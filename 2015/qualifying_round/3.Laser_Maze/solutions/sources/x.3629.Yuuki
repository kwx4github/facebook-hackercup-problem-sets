import java.util.LinkedList;
import java.util.Scanner;

public class P55 {

    char[][][] table;
    int start = 0;
    int goal = 0;
    int M;
    int N;

    public P55() {
        Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            M = scanner.nextInt();
            N = scanner.nextInt();

            //empty
            scanner.nextLine();

            table = new char[4][M][N];

            for (int i = 0; i < M; i++) {
                table[0][i] = scanner.nextLine().toCharArray();
            }
            for (int k = 1; k < 4; k++) {
                for (int i = 0; i < M; i++) {
                    for (int j = 0; j < N; j++) {
                        if (table[0][i][j] == 'S') {
                            start = i * 100 + j;
                            table[0][i][j] = '.';
                        }
                        if (table[0][i][j] == 'G') {
                            goal = i * 100 + j;
                            table[0][i][j] = '.';

                        }
                        table[k][i][j] = table[0][i][j];

                    }
                }
            }

            for (int k = 0; k < 4; k++) {
                for (int i = 0; i < M; i++) {
                    for (int j = 0; j < N; j++) {
                        if (table[k][i][j] == '^') {
                            table[(k + 1) % 4][i][j] = '>';
                            for (int l = i - 1; l >= 0; l--) {
                                if (table[k][l][j] != '.') {
                                    break;
                                }
                                table[k][l][j] = ' ';
                            }
                        } else if (table[k][i][j] == '>') {
                            table[(k + 1) % 4][i][j] = 'v';
                            for (int l = j + 1; l < N; l++) {
                                if (table[k][i][l] != '.') {
                                    break;
                                }
                                table[k][i][l] = ' ';
                            }
                        } else if (table[k][i][j] == 'v') {
                            table[(k + 1) % 4][i][j] = '<';

                            for (int l = i + 1; l < M; l++) {
                                if (table[k][l][j] != '.') {
                                    break;
                                }

                                table[k][l][j] = ' ';
                            }
                        } else if (table[k][i][j] == '<') {
                            table[(k + 1) % 4][i][j] = '^';
                            for (int l = j - 1; l >= 0; l--) {
                                if (table[k][i][l] != '.') {
                                    break;
                                }

                                table[k][i][l] = ' ';
                            }
                        }
                    }
                }
            }
            int result = bfs();
            System.out.print("Case #" + t + ": ");
            if (result == -1) {
                System.out.println("impossible");
            } else {
                System.out.println(result);
            }
        }

    }

    int[][] vec = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

    int bfs() {
        boolean[][][] checked = new boolean[4][M][N];
        LinkedList<Integer> queue = new LinkedList<>();
        checked[0][start / 100][start % 100] = true;
        queue.add(start);

        LinkedList<Integer> nextQueue = new LinkedList<>();

        int turn = 0;
        boolean isGoal = false;
        MAIN:
        while (queue.size() > 0) {
            turn++;
            int t = turn % 4;

            while (queue.size() > 0) {
                int current = queue.pop();

                for (int[] v : vec) {
                    int x = current % 100;
                    int y = current / 100;

                    x += v[0];
                    y += v[1];

                    if (!(0 <= x && x < N && 0 <= y && y < M)) {
                        continue;
                    }

                    if (checked[t][y][x]) {
                        continue;
                    }


                    if (table[t][y][x] != '.') {
                        continue;
                    }
                    if (x == goal % 100 && y == goal / 100) {
                        isGoal = true;
                        break MAIN;
                    }

                    checked[t][y][x] = true;
                    nextQueue.add(y * 100 + x);

                }
            }
            queue.addAll(nextQueue);
            nextQueue.clear();

        }
        if (isGoal) {
            return turn;
        } else {
            return -1;
        }
    }

    public static void main(String[] args) {
        P55 p30 = new P55();
    }
}

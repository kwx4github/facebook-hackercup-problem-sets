#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<ctime>
#include<algorithm>
#include<vector>
#include<queue>
#include<list>
#include<string>
#include<set>
#include<map>
#include<iomanip>
#include<sstream>
#include<functional>
#include<climits>
#define eps 1e-9
const int mod = 1000000007;
using namespace std;

struct trip {
  int x, y, z;
  trip(int _x, int _y, int _z) : x(_x), y(_y), z(_z){}
};
int dist[105][105][4], dx[4] = { -1, 1, 0, 0 }, dy[4] = { 0, 0, -1, 1 }, m, n;
char mat[105][105], dir[4] = { '<', '^', '>', 'v' };
map<pair<char,int>, char> clockLaser;
bool laserCheck(int x, int y, int z) {
  if (mat[x][y] == '<' || mat[x][y] == '^' || mat[x][y] == '>' || mat[x][y] == 'v') return true;
  for (int i = 0; i < y; ++i) if (clockLaser[{mat[x][i], z}] == '>') return true;
  for (int i = y + 1; i < n; ++i) if (clockLaser[{mat[x][i], z}] == '<') return true;
  for (int i = 0; i < x; ++i) if (clockLaser[{mat[i][y], z}] == 'v') return true;
  for (int i = x + 1; i < m; ++i) if (clockLaser[{mat[i][y], z}] == '^') return true;
  return false;
}
void bfs(int x, int y) {
  queue<trip> q;
  q.push(trip(x,y,0));
  dist[x][y][0] = 0;
  int maxiter = (1 << 22) - 1;
  while (maxiter-- && !q.empty()) {
    trip cur = q.front();
    q.pop();
    for (int i = 0; i < 4; ++i) {
	int nx = cur.x + dx[i], ny = cur.y + dy[i], nz = (cur.z + 1) % 4;
	if (nx >= m || nx < 0 || ny >= n || ny < 0 || dist[nx][ny][nz] != INT_MAX || mat[nx][ny] == '#' || laserCheck(nx, ny, nz)) continue;
	dist[nx][ny][nz] = dist[cur.x][cur.y][cur.z] + 1;
	q.push(trip(nx, ny, nz));
    }
  }
}
int main() {
  //freopen("laser_maze.txt", "r", stdin);
  //freopen("out.txt", "w", stdout);
  int t;
  scanf("%d", &t);
  for (int i = 0; i < 4; ++i) {
    for (int j = 0; j < 4; ++j) {
	clockLaser[{dir[i], j}] = dir[(i + j) % 4];
    }
    clockLaser[{'.', i}] = clockLaser[{'#', i}] = clockLaser[{'S', i}] = clockLaser[{'G', i}] = 'o';
  }
  for (int q = 1; q <= t; ++q) {
    for (int k = 0; k < 4; ++k) {
	for (int i = 0; i < 104; ++i) {
	  for (int j = 0; j < 104; ++j) {
	    dist[i][j][k] = INT_MAX;
	  }
	}
    }
    int sx, sy, fx, fy;
    scanf("%d %d", &m, &n);
    getchar();
    for (int i = 0; i < m; ++i) {
	for (int j = 0; j < n; ++j) {
	  scanf("%c", &mat[i][j]);
	  if (mat[i][j] == 'S') {
	    sx = i, sy = j;
	  }
	  if (mat[i][j] == 'G') {
	    fx = i, fy = j;
	  }
	}
	getchar();
    }
    bfs(sx, sy);
    if (dist[fx][fy][0] == INT_MAX && dist[fx][fy][1] == INT_MAX && dist[fx][fy][2] == INT_MAX && dist[fx][fy][3] == INT_MAX) {
	printf("Case #%d: impossible\n", q);
    }
    else {
	int ret = min(min(min(dist[fx][fy][0], dist[fx][fy][1]), dist[fx][fy][2]),dist[fx][fy][3]);
	printf("Case #%d: %d\n", q, ret);
    }
  }
  return 0;
}
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<string>
#include<sstream>
#include<iostream>
#include<algorithm>

using namespace std;

int m, n;
char maze[110][110];
bool valid[4][110][110];
int dist[4][110][110];
int tc;
int tsx[11000];
int tsy[11000];
int tsd[11000];
int qs;
int qa[44000];
int qx[44000];
int qy[44000];

int dx[4] = {0, -1, 0, 1};
int dy[4] = {-1, 0, 1, 0};

int main()
{
    int t, test;
    int i, j, a, b;
    scanf("%d", &test);
    for (t = 0; t < test; t++)
    {
        scanf("%d %d", &m, &n);
        for (i = 0; i < m; i++)
        {
            scanf("%s", maze[i]);
        }
        int startX, startY;
        int goalX, goalY;
        tc = 0;
        for (i = 0; i < m; i++)
        {
            for (j = 0; j < n; j++)
            {
                switch (maze[i][j])
                {
                case 'S':
                    startX = i;
                    startY = j;
                    break;
                case 'G':
                    goalX = i;
                    goalY = j;
                    break;
                case '<':
                    tsx[tc] = i;
                    tsy[tc] = j;
                    tsd[tc] = 0;
                    tc++;
                    maze[i][j] = '#';
                    break;
                case '^':
                    tsx[tc] = i;
                    tsy[tc] = j;
                    tsd[tc] = 1;
                    tc++;
                    maze[i][j] = '#';
                    break;
                case '>':
                    tsx[tc] = i;
                    tsy[tc] = j;
                    tsd[tc] = 2;
                    tc++;
                    maze[i][j] = '#';
                    break;
                case 'v':
                    tsx[tc] = i;
                    tsy[tc] = j;
                    tsd[tc] = 3;
                    tc++;
                    maze[i][j] = '#';
                    break;
                }
            }
        }
        for (a = 0; a < 4; a++)
        {
            for (i = 0; i < m; i++)
            {
                for (j = 0; j < n; j++)
                {
                    valid[a][i][j] = (maze[i][j] != '#');
                    dist[a][i][j] = -1;
                }
            }
            for (b = 0; b < tc; b++)
            {
                i = tsx[b];
                j = tsy[b];
                int d = (a + tsd[b]) % 4;
                while(true)
                {
                    i += dx[d];
                    j += dy[d];
                    if (i < 0 || i >= m || j < 0 || j >= n)
                        break;
                    if (maze[i][j] == '#')
                        break;
                    valid[a][i][j] = false;
                }
            }
        }
        qs = 0;
        for (a = 0; a < 4; a++)
        {
            i = startX + dx[a];
            j = startY + dy[a];
            if (i < 0 || i >= m || j < 0 || j >= n)
                continue;
            if (valid[1][i][j])
            {
                qa[qs] = 1;
                qx[qs] = i;
                qy[qs] = j;
                dist[1][i][j] = 1;
                qs++;
            }
        }
        int qpos = 0;
        while (qpos < qs)
        {
            b = (qa[qpos] + 1) % 4;
            int ox = qx[qpos];
            int oy = qy[qpos];
            int odist = dist[qa[qpos]][ox][oy];
            for (a = 0; a < 4; a++)
            {
                i = ox + dx[a];
                j = oy + dy[a];
                if (i < 0 || i >= m || j < 0 || j >= n)
                    continue;
                if (valid[b][i][j] && dist[b][i][j] == -1)
                {
                    qa[qs] = b;
                    qx[qs] = i;
                    qy[qs] = j;
                    dist[b][i][j] = odist+1;
                    qs++;
                }
            }
            qpos++;
        }
        int best = -1;
        for (a = 0; a < 4; a++)
        {
            if (dist[a][goalX][goalY] != -1)
            {
                if (best == -1 || best > dist[a][goalX][goalY])
                    best = dist[a][goalX][goalY];
            }
        }
        if (best >= 0)
            printf("Case #%d: %d\n", t+1, best);
        else
            printf("Case #%d: impossible\n", t+1);
    }
    return 0;
}

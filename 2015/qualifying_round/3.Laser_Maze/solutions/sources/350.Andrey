import java.util.Deque;
import java.io.FileInputStream;
import java.util.InputMismatchException;
import java.util.ArrayDeque;
import java.io.InputStream;
import java.util.Collection;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LaserMaze solver = new LaserMaze();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LaserMaze {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int R = in.nextInt();
		int C = in.nextInt();
		char[][] a = new char[R][];
		int sr = -1, sc = -1, gr = -1, gc = -1;
		for (int r = 0; r < R; r++) {
			a[r] = in.next().toCharArray();
			for (int c = 0; c < C; c++) {
				if (a[r][c] == 'S') {
					sr = r;
					sc = c;
				}
				if (a[r][c] == 'G') {
					gr = r;
					gc = c;
				}
			}
		}
		String empty = "SG.";
		String laser = "<^>v";
		int[] dr = {0, -1, 0, 1};
		int[] dc = {-1, 0, 1, 0};
		boolean[][][] blocked = new boolean[4][R][C];
		for (int i = 0; i < 4; i++) {
			for (int r = 0; r < R; r++) {
				for (int c = 0; c < C; c++) {
					int d = laser.indexOf(a[r][c]);
					if (d != -1) {
						d = (d + i) % 4;
						int nr = r;
						int nc = c;
						while (true) {
							nr += dr[d];
							nc += dc[d];
							if (nr < 0 || nr >= R || nc < 0 || nc >= C || empty.indexOf(a[nr][nc]) == -1)
								break;
							blocked[i][nr][nc] = true;
						}
					}
				}
			}
		}
		Deque<Integer> qr = new ArrayDeque<>();
		Deque<Integer> qc = new ArrayDeque<>();
		Deque<Integer> qd = new ArrayDeque<>();
		Deque<Integer> qdist = new ArrayDeque<>();
		boolean[][][] vis = new boolean[4][R][C];
		qr.addLast(sr);
		qc.addLast(sc);
		qd.addLast(0);
		qdist.addLast(0);
		vis[0][sr][sc] = true;
		int res = -1;
		while (!qr.isEmpty()) {
			int curr = qr.removeFirst();
			int curc = qc.removeFirst();
			int curd = qd.removeFirst();
			int curdist = qdist.removeFirst();
			if (curr == gr && curc == gc) {
				res = curdist;
				break;
			}
			for (int dir = 0; dir < 4; dir++) {
				int nr = curr + dr[dir];
				int nc = curc + dc[dir];
				int nd = (curd + 1) % 4;
				if (nr >= 0 && nr < R && nc >= 0 && nc < C && empty.indexOf(a[nr][nc]) != -1 && !vis[nd][nr][nc] && !blocked[nd][nr][nc]) {
					qr.addLast(nr);
					qc.addLast(nc);
					qd.addLast(nd);
					qdist.addLast(curdist + 1);
					vis[nd][nr][nc] = true;
				}
			}
		}

		out.println("Case #" + testNumber + ": " + (res == -1 ? "impossible" : "" + res));
	}
}

class InputReader {
	final InputStream is;
	final byte[] buf = new byte[1024];
	int pos;
	int size;

	public InputReader(InputStream is) {
		this.is = is;
	}

	public int nextInt() {
		int c = read();
		while (isWhitespace(c))
			c = read();
		int sign = 1;
		if (c == '-') {
			sign = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res = res * 10 + c - '0';
			c = read();
		} while (!isWhitespace(c));
		return res * sign;
	}

	public String next() {
		int c = read();
		while (isWhitespace(c))
			c = read();
		StringBuilder sb = new StringBuilder();
		do {
			sb.append((char) c);
			c = read();
		} while (!isWhitespace(c));
		return sb.toString();
	}

	int read() {
		if (size == -1)
			throw new InputMismatchException();
		if (pos >= size) {
			pos = 0;
			try {
				size = is.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (size <= 0)
				return -1;
		}
		return buf[pos++] & 255;
	}

	static boolean isWhitespace(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

}


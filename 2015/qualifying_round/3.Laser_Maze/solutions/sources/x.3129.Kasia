#include <bits/stdc++.h>
using namespace std;
const int N = 105;
#define st first.first
#define nd first.second
#define rd second
#define make(a,b,c) make_pair(make_pair(a,b),c)
char maze[N][N];
int lef[N][N],rig[N][N],dow[N][N],up[N][N];
int vis[N][N][4];
bool all[N][N][4];
queue<pair<pair<int,int>,int> > kol;
/*
	# 0
	^ 1
	> 2
	v 3
	< 4
*/
int n,m;

int numer( char x )
{
	switch(x)
	{
		case '#': return 0;
		case '^': return 1;
		case '>': return 2;
		case 'v': return 3;
		case '<': return 4;
	}
}

int r[4][2] = { {-1,0}, {0,-1}, {1,0}, {0,1} };

bool mozna(int a,int b,int c)
{
	if (a == 0 || b == 0 || a == n+1 || b == m+1) return 0;
	if ( vis[a][b][c] < (1<<20) ) return 0;
	return all[a][b][c];
}

int bfs()
{
	int x,y,t,w;
	vis[kol.front().st][kol.front().nd][0] = 1;
	while( !kol.empty() )
	{
		x = kol.front().st;
		y = kol.front().nd;
		t = kol.front().rd;
		kol.pop();
		if ( maze[x][y] == 'G' ) return vis[x][y][t] - 1;
		w = (t+1)%4;
		for (int i=0;i<4;i++)
			if (mozna(x+r[i][0],y+r[i][1],w))
			{
				vis[x+r[i][0]][y+r[i][1]][w] = vis[x][y][t] + 1;
				kol.push( make(x+r[i][0],y+r[i][1],w) );
			}
	}
	return -1;
}

int main()
{
	int t;
	scanf("%d",&t);
	for (int z=1;z<=t;z++)
	{
		scanf("%d%d",&n,&m);
		while(!kol.empty()) kol.pop();
		for (int i=1;i<=n;i++) scanf("%s",maze[i]+1);
		for (int i=1;i<=n;i++)
			for (int j=1;j<=m;j++)
			{
				if ( maze[i][j] == '.'||maze[i][j] == 'S'||maze[i][j]=='G' )
				{
					lef[i][j] = lef[i][j-1];
					up[i][j] = up[i-1][j];
				}
				else lef[i][j] = up[i][j] = numer(maze[i][j]);
			}
		for (int i=n;i>0;i--)
			for (int j=m;j>0;j--)
			{
				if ( maze[i][j] == '.'||maze[i][j] == 'S'||maze[i][j]=='G' )
				{
					rig[i][j] = rig[i][j+1];
					dow[i][j] = dow[i+1][j];
				}
				else rig[i][j] = dow[i][j] = numer(maze[i][j]);
			}
		for (int i=1;i<=n;i++)
			for (int j=1;j<=m;j++)
			{
				if (maze[i][j] == 'S') kol.push(make(i,j,0));
				for (int k=0;k<4;k++)
				{
					all[i][j][k] = 1;
					vis[i][j][k] = 1<<20;
				}
				if (lef[i][j]) all[i][j][(6-lef[i][j])%4] = 0;
				if (rig[i][j]) all[i][j][4-rig[i][j]] = 0;
				if (up[i][j]) all[i][j][(7-up[i][j])%4] = 0;
				if (dow[i][j]) all[i][j][(5-dow[i][j])%4] = 0;
			}
		int w = bfs();
		printf("Case #%d: ",z);
		if ( w >= 0 ) printf("%d\n",w);
		else printf("impossible\n");
	}
}

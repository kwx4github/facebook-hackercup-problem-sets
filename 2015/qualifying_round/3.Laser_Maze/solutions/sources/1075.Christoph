#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# facebook hackercup - c.durr - 2015

# simulation, shortest path in directed graph, by bfs
# linear time O(N*M*4)

from sys import *
import string
from queue import *

def readstr():    return stdin.readline().strip()
def readint():    return int(stdin.readline())
def readarray(f): return map(f, stdin.readline().split())

def vertex(i, j, p):
    return p + 4 * ( j + cols * i)

laser_turret = "<^>v"
laser_x = [0,-1,0,1]
laser_y = [-1,0,1,0]

def inbound(i,j):
    return 0<=i and i<rows and 0<=j and j<cols

BLOCK = -1
def solve(maze):
    grid = [[[BLOCK for p in range(4)] for j in range(cols)] for i in range(rows)]
    for i in range(rows):
        for j in range(cols):
            if maze[i][j] in '.SG':
                for p in range(4):
                    grid[i][j][p] = float('inf')
            if maze[i][j] == 'S':
                start = (i,j,0)
                grid[i][j][0] = 0
            if maze[i][j] == 'G':
                goal = (i,j)
    for i in range(rows):
        for j in range(cols):
            d = laser_turret.find(maze[i][j])
            if d >= 0:
                for p in range(4):
                    q = (4 + p - d) % 4
                    a,b = i,j
                    while True:
                        a += laser_x[p]
                        b += laser_y[p]
                        if not inbound(a,b) or maze[a][b] not in '.SG':
                            break
                        grid[a][b][q] = BLOCK
    to_visit = Queue()
    to_visit.put(start)
    grid[start[0]][start[1]][start[2]] = 0  # ignore first laser shoot
    while not to_visit.empty():
        i,j,p = to_visit.get()
        if grid[i][j][p] == BLOCK:
            break
        for (a,b) in [(i-1,j), (i+1,j), (i,j-1), (i,j+1)]:
            q = (p+1)%4
            if inbound(a,b) and grid[a][b][q] == float('inf'):
                grid[a][b][q] = grid[i][j][p] + 1
                to_visit.put((a,b,q))
    answ = float('inf')
    for p in range(4):
        alt = grid[goal[0]][goal[1]][p]
        if alt != BLOCK and alt < answ:
            answ = alt
    if answ < float('inf'):
        return str(answ)
    else:
        return "impossible"

for test in range(readint()):
    rows, cols = readarray(int)
    maze = [readstr() for i in range(rows)]
    print( "Case #%d: %s" % (test+1, solve(maze)))
    
    

// INCLUDES
#include <functional>
#include <algorithm>
#include <utility>
#include <cassert>
#include <cmath>
#include <ctime>

#include <numeric>
#include <iomanip>
#include <complex>
#include <float.h>
#include <cfloat>

#include <iostream>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <cstdio>

#include <cstring>
#include <string>

#include <iterator>
#include <vector>
#include <bitset>
#include <deque>
#include <stack>
#include <queue>
#include <list>
#include <set>
#include <map>

#include <inttypes.h>
#include <ctype.h>
using namespace std;

// TYPEDEFS
typedef long long TLL;
typedef long double TLD;
typedef unsigned long TUL;
typedef pair < int, int > PII;
typedef pair < string, string > PSS;
typedef vector < pair < int, int > > VPII;
typedef vector < pair < string, string > > VPSS;
typedef vector < int > VI;
typedef vector < string > VS;
typedef vector < long long > VLL;
typedef vector < long double > VLD;

// DEFINES
#define FORN(index, start, end) for (int index = (int) (start); index <= (int) (end); ++ index)
#define FORDN(index, end, start) for (int index = (int) (end); index >= (int) (start); -- index)
#define _FORN(index, start, end) for (int index = (int) (start); index < (int) (end); ++ index)
#define _FORDN(index, end, start) for (int index = (int) (end); index > (int) (start); -- index)
#define SFORN(index, start, end, shift) for (int index = (int) (start); index <= (int) (end); index += shift)
#define SFORDN(index, end, start, shift) for (int index = (int) (end); index >= (int) (start); index -= shift)
#define _SFORN(index, start, end, shift) for (int index = (int) (start); index < (int) (end); index += shift)
#define _SFORDN(index, end, start, shift) for (int index = (int) (end); index > (int) (start); index -= shift)
#define FORIT(itIndex, container) for (typeof(container.begin()) itIndex = container.begin(); itIndex != container.end(); ++ itIndex)
#define FORTESTS() int nTests; scanf("%d", &nTests); _FORN(testId, 0, nTests)
#define FILL(box, value) memset(box, value, sizeof(box))
#define ALL(box) box.begin(), box.end()
#define RALL(box) box.rbegin(), box.rend()
#define SIZE(box) ((int) (box.size()))
#define LENGTH(box) ((int) (box.length()))
#define MP(firstItem, secondItem) make_pair(firstItem, secondItem)
#define PB(value) push_back(value)
#define TWOP(power) (1 << (power))
#define TWOLP(power) (((LL) (1)) << (power))
#define CONTAINB(mask, index) (((mask) & TWOP(index)) != 0)
#define CONTAINLB(mask, index) (((mask) & TWOLP(index)) != 0)
#define ONEBITN(value) (__builtin_popcount(value))
#define ALLBSETS(maskIndex, length) for (int maskIndex = 0; maskIndex < TWOP(length); ++ maskIndex)
#define ALLBSUBSETS(maskIndex, mask) for (int maskIndex = mask; ; maskIndex = ((maskIndex - 1) & mask))
#define CONTAINS(container, key) (container.find(key) != container.end())
#define MSG(who) cout << #who << " = " << who << endl;

// CONSTS
const TLD PI = acos(-1.0);
const TLD EPS = 1e-9;
const int INF = 1000000000;
const TLL INFL = (TLL) 1000000000 * (TLL) 1000000000;
const int NULO = -1;
const string INPUT_FILE = "input.txt";
const string OUTPUT_FILE = "output.txt";

// TEMPLATES
template<class T> inline int CMPF(T X, T Y = 0, T EPS_DIST = EPS) { return (X <= Y + EPS_DIST) ? ((X + EPS_DIST < Y) ? -1 : 0) : +1; }
template<class T> inline T GCD(T A, T B) { return (A < 0) ? GCD(-A, B) : ((B < 0) ? GCD(A, -B) : ((0 == B) ? A : GCD(B, A % B))); }
template<class T> inline T LCM(T A, T B) { return (A < 0) ? LCM(-A, B) : ((B < 0) ? LCM(A, -B) : (A * (B / GCD(A, B)))); }
template<class T> inline string TO_STRING(T X) { ostringstream oss; oss << X; oss.flush(); return oss.str(); }
template<class T> inline void FIX_MIN(T & B, T A) { if (A < B) B = A; }
template<class T> inline void FIX_MAX(T & B, T A) { if (A > B) B = A; }
template<class T> inline T SQR(T X) { return X * X; }

// INLINES
inline bool IS_UPPERCH(char C) { return C >= 'A' && C <= 'Z'; }
inline bool IS_LOWERCH(char C) { return C >= 'a' && C <= 'z'; }
inline bool IS_LETTERCH(char C) { return IS_UPPERCH(C) || IS_LOWERCH(C); }
inline bool IS_DIGITCH(char C) { return C >= '0' && C <= '9'; }
inline char TO_LOWERCH(char C) { return (IS_UPPERCH(C)) ? (C + 32) : C; }
inline char TO_UPPERCH(char C) { return (IS_LOWERCH(C)) ? (C - 32) : C; }
inline int TO_INTS(string S) { int value; istringstream iss(S); iss >> value; return value; }
inline double TO_DOUBLES(string S) { double value; istringstream iss(S); iss >> value; return value; }

// MY
typedef pair <pair <int, int>, int> Qstate;
const int DIRECTION [4][2] = {{+0, +1}, {+0, -1}, {+1, +0}, {-1, +0}};
const int MAXN = 100 + 10;
int N, M, gX, gY;
char maze [MAXN][MAXN];
int dist [MAXN][MAXN][4];

inline bool okPosition(int x, int y, int t) {
    if ('.' != maze [x][y]) return false;
    if (0 == dist [x][y][t]) return true;

    // left
    FORDN(ly, y - 1, 0) {
        if (t == 0 && '>' == maze [x][ly]) return false;
        if (t == 1 && '^' == maze [x][ly]) return false;
        if (t == 2 && '<' == maze [x][ly]) return false;
        if (t == 3 && 'v' == maze [x][ly]) return false;
        if ('.' != maze [x][ly]) break;
    }

    // right
    _FORN(ly, y + 1, M) {
        if (t == 0 && '<' == maze [x][ly]) return false;
        if (t == 1 && 'v' == maze [x][ly]) return false;
        if (t == 2 && '>' == maze [x][ly]) return false;
        if (t == 3 && '^' == maze [x][ly]) return false;
        if ('.' != maze [x][ly]) break;
    }

    // up
    FORDN(lx, x - 1, 0) {
        if (t == 0 && 'v' == maze [lx][y]) return false;
        if (t == 1 && '>' == maze [lx][y]) return false;
        if (t == 2 && '^' == maze [lx][y]) return false;
        if (t == 3 && '<' == maze [lx][y]) return false;
        if ('.' != maze [lx][y]) break;
    }

    // down
    _FORN(lx, x + 1, N) {
        if (t == 0 && '^' == maze [lx][y]) return false;
        if (t == 1 && '<' == maze [lx][y]) return false;
        if (t == 2 && 'v' == maze [lx][y]) return false;
        if (t == 3 && '>' == maze [lx][y]) return false;
        if ('.' != maze [lx][y]) break;
    }

    return true;
}

// MAIN
int main() {
    freopen(INPUT_FILE.c_str(), "r", stdin);
    freopen(OUTPUT_FILE.c_str(), "w", stdout);

    // CODE AREA =>
    int nTests;
    scanf("%d\n", &nTests);

    _FORN(testId, 0, nTests) {
        scanf("%d %d\n", &N, &M);
        queue < Qstate > qq;
        FILL(dist, NULO);
        gX = gY = NULO;

        _FORN(i, 0, N) {
            _FORN(j, 0, M) {
                scanf("%c", &maze [i][j]);
                if ('S' == maze [i][j]) qq.push(MP(MP(i, j), 0)), dist [i][j][0] = 0, maze [i][j] = '.';
                if ('G' == maze [i][j]) gX = i, gY = j, maze [i][j] = '.';
            }

            scanf("\n");
        }

        _FORN(i, 0, N)
            _FORN(j, 0, M)
                _FORN(t, 0, 4)
                    dist [i][j][t] = !okPosition(i, j, t) ? -2 : dist [i][j][t];

        int result = NULO;

        while (!qq.empty()) {
            Qstate state = qq.front();
            qq.pop();

            _FORN(i, 0, 4) {
                int cx = state.first.first + DIRECTION [i][0];
                int cy = state.first.second + DIRECTION [i][1];
                int ct = (state.second + 1) % 4;
                if (cx >= 0 && cx < N && cy >= 0 && cy < M && NULO == dist [cx][cy][ct]) {
                    qq.push(MP(MP(cx, cy), ct));
                    dist [cx][cy][ct] = dist [state.first.first][state.first.second][state.second] + 1;
                }
            }
        }

        _FORN(t, 0, 4)
            if (dist [gX][gY][t] >= 0)
                if (NULO == result || dist [gX][gY][t] < result)
                    result = dist [gX][gY][t];

        if (NULO != result) {
            printf("Case #%d: %d\n", testId + 1, result);
        } else {
            printf("Case #%d: impossible\n", testId + 1);
        }
    }
    // CODE AREA <=

    return 0;
}
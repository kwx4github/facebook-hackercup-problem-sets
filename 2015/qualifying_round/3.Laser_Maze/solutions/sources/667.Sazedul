#include <set>
#include <map>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <cctype>
#include <cstdio>
#include <string>
#include <vector>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<double,double> pdd;
typedef vector<int> vi;
typedef vector<double>vd;
typedef vector<string> vs;
typedef vector<vi>vvi;
typedef map<string,int> msi;
typedef map<int,int>mii;
typedef map<pii,int>mpi;

#define pb push_back
#define MP make_pair
#define popb pop_back
#define all(a) a.begin(), a.end()
#define Sort(x) sort(x.begin(),x.end())
#define Reverse(x) reverse(x.begin(),x.end())
#define SZ(a) ( (int)a.size() )
#define mem(a, b) memset(a, b, sizeof(a))
#define Clear(a, b) { for (int i=0; i<=b; i++) a[i].clear(); }

#define REP(i,n) for (i=0;i<n;i++)
#define REV(i,n) for (i=n;i>=0;i--)
#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)
#define FOR(i,p,k) for (i=p; i<k;i++)

#define COPY(c,r)   memcpy(c,r,sizeof(r))
#define popcount(i) __builtin_popcount(i)
#define fs first
#define sc second

#define DOWN 0
#define RIGHT 1
#define UP 2
#define LEFT 3

/// Moves ///
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[] = {-2, 2, -1, 1, -1, 1};int dy[] = {0, 0, 1, 1, -1, -1}; //Hexagonal Moves

#define INF 1<<30
#define MAX 100 //10^6
#define LEN(x1, y1, x2, y2) sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))

int m, n;
int norm[MAX+5][MAX+5];
bool col[MAX+5][MAX+5][7];
vector<string> maze;

struct data
{
    int r, c, mov;
    data(){}
    data(int _r, int _c, int _mov)
    {
        r = _r, c = _c, mov = _mov;
    }
};

bool is_turret(int i, int j)
{
    return maze[i][j]=='<' || maze[i][j]=='^' || maze[i][j]=='>' || maze[i][j]=='v';
}

bool has_obstacle(int i, int j)
{
    if (i>=0 && i<m && j>=0 && j<n)
    {
        if (is_turret(i, j) || maze[i][j]=='#') return true;
        else return false;
    }
    return true;
}

int get_mask(char turret, int direction)
{
    if (turret=='<')
    {
        if (direction == LEFT) return 1;
        else if (direction == UP) return 2;
        else if (direction == RIGHT) return 4;
        else if (direction == DOWN)  return 8;
    }
    else if (turret=='^')
    {
        if (direction == LEFT) return 8;
        else if (direction == UP) return 1;
        else if (direction == RIGHT) return 2;
        else if (direction == DOWN)  return 4;
    }
    else if (turret=='>')
    {
        if (direction == LEFT) return 4;
        else if (direction == UP) return 8;
        else if (direction == RIGHT) return 1;
        else if (direction == DOWN)  return 2;
    }
    else if (turret=='v')
    {
        if (direction == LEFT) return 2;
        else if (direction == UP) return 4;
        else if (direction == RIGHT) return 8;
        else if (direction == DOWN)  return 1;
    }
}

// param i, j is the turret position
void fill_normalize_maze(int i, int j)
{
    for (int k=0; k<4; k++)
    {
        int ni = i+dx[k];
        int nj = j+dy[k];

        if (!has_obstacle(ni, nj))
        {
            do
            {
                norm[ni][nj] |= get_mask(maze[i][j], k);
                ni = ni+dx[k];
                nj = nj+dy[k];
            } while (!has_obstacle(ni, nj));
        }
    }
}

void normalize_maze()
{
    mem(norm, 0);
    for (int i=0; i<m; i++)
    {
        for (int j=0; j<n; j++)
        {
            if (is_turret(i, j))
            {
                fill_normalize_maze(i, j);
            }
        }
    }
}

bool can_move(int r, int c, int mov)
{
    if (has_obstacle(r, c)) return false;
    if (col[r][c][mov] == true) return false;
    if (norm[r][c] & (1<<mov)) return false;
    return true;
}

int get_move_number(int si, int sj)
{
    queue<data>q;

    mem(col, 0);
    q.push(data(si, sj, 0));

    while(!q.empty())
    {
        data u = q.front();
//        cout<<"IN QUEUE "<<u.r<<" "<<u.c<<endl;
        q.pop();

        if (maze[u.r][u.c] == 'G') return u.mov;

        for (int k=0; k<4; k++)
        {
            int nr = u.r + dx[k];
            int nc = u.c + dy[k];
            int nmov = u.mov + 1;

            if (can_move(nr, nc, nmov%4))
            {
                col[nr][nc][nmov%4] = true;
                q.push(data(nr, nc, nmov));
            }
        }
    }
    return -1;
}

int main ()
{
    int t, si, sj;
    string s;

    freopen("inp.txt", "r", stdin);
    freopen("out.txt", "w", stdout);

    cin>>t;
    for (int cas=1; cas<=t; cas++)
    {
        cin>>m>>n;
        for (int i=0; i<m; i++)
        {
            cin>>s;
            maze.pb(s);
            for (int j=0; j<SZ(s); j++)
                if (s[j] == 'S') si = i, sj = j;
        }
        normalize_maze();
//        cout<<"NORMALIZED"<<endl;
        int res = -1;

        res = get_move_number(si, sj);
//        cout<<"MOVE FOUND"<<endl;

        if (res == -1) cout<<"Case #"<<cas<<": "<<"impossible"<<endl;
        else cout<<"Case #"<<cas<<": "<<res<<endl;

        maze.clear();
    }
    return 0;
}

/*
3 3
S>.
.G<
.>.

3 3
.>.
SG<
.>.
*/

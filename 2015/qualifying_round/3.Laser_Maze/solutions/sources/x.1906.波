#include <bits/stdc++.h>

using namespace std;
const int MOD = 4;
const int MAXN = 105;
const int dir[4][2] = {-1, 0, 0, 1, 1, 0, 0, -1};

struct P {
    int x, y, t;
    P() {}
    P(int x, int y, int t):x(x), y(y), t(t) {}
};


/*
   0
 3   1
   2
*/
pair<int, int> G, S;
int maze[MAXN][MAXN];
int vis[4][MAXN][MAXN];
int dis[4][MAXN][MAXN];
int n, m;
const int INF = 0x3f3f3f3f;
char mp[MAXN][MAXN];
int fob[4][MAXN][MAXN];
void ini(int x, int y, int ad) {
    maze[x][y] = -1;
    for (int t = 0; t < 4; t++) {
        int e = (t + ad) % MOD;
        int X = x, Y = y;
        for (int i = 1; ; i++) {
            X += dir[e][0];
            Y += dir[e][1];
            if (X > n || X <= 0 || Y > m || Y <= 0) break;
            fob[t][X][Y] = 1;
        }
    }
    return ;
}

int spfa() {
    queue<P> Q;
    memset(vis, 0, sizeof(vis));
    memset(dis, INF, sizeof(dis));
    Q.push(P(S.first, S.second, 0));
    vis[0][S.first][S.second] = 1;
    dis[0][S.first][S.second] = 0;
    while (!Q.empty()) {
        P tmp = Q.front(); Q.pop();
        int x = tmp.x, y = tmp.y, t = tmp.t + 1;
        for (int i = 0; i < 4; i++) {
            int X = x + dir[i][0];
            int Y = y + dir[i][1];
            if (maze[X][Y] == -1 || vis[t%MOD][X][Y] == 1) continue;
            if (fob[t%MOD][X][Y] == 1) continue;
            vis[t%MOD][X][Y] = 1; dis[t%MOD][X][Y] = t;
            Q.push(P(X, Y, t));
        }
    }
    int ret = dis[0][G.first][G.second];
    for (int i = 1; i < 4; i++) {
        ret = min(ret, dis[i][G.first][G.second]);
    }
    return ret == INF ? -1 : ret;
}

void work(int cas) {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++) {
        scanf("%s", mp[i] + 1);
    }
    memset(maze, -1, sizeof(maze));
    memset(fob, 0, sizeof(fob));

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (mp[i][j] == '#') continue;
            maze[i][j] = 0;
            if (mp[i][j] == 'S') {
                S = make_pair(i, j);
            }
            if (mp[i][j] == 'G') {
                G = make_pair(i, j);
            }
            if (mp[i][j] == '>') {
                ini(i, j, 1);
            }
            if (mp[i][j] == 'v') {
                ini(i, j, 2);
            }
            if (mp[i][j] == '<') {
                ini(i, j, 3);
            }
            if (mp[i][j] == '^') {
                ini(i, j, 0);
            }
        }
    }
    int ret = spfa();
    if (ret == -1) printf("Case #%d: impossible\n", cas);
    else printf("Case #%d: %d\n", cas, ret);
    return ;
}

int main() {
    int T;
    freopen("laser_maze.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    scanf("%d", &T);
    for (int cas = 1; cas <= T; cas++) work(cas);
    return 0;
}

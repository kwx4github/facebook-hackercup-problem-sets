#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define in_str(b) scanf("%s",(b))
#define in_int1(a) scanf("%d",&(a))
#define in_int2(a,b) scanf("%d%d",&(a),&(b))
#define in_int3(a,b,c) scanf("%d%d%d",&(a),&(b),&(c))
#define in_int4(a,b,c,d) scanf("%d%d%d%d",&(a),&(b),&(c),&(d))
#define so(a) sort((a).begin(), (a).end())
#define rso(a) sort((a).rbegin(), (a).rend())
#define mp(a,b) make_pair(a,b)
#define MOD 1000000007
#define INF 1000000000
typedef pair<int, int> pii;
typedef pair<long long, long long> pll;

char mas[110][110];
char safe[110][110];
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };
int dp[4][110][110];
int n, m;

int TurrelDirection(char c)
{
	switch (c)
	{
	case '^': return 3;
	case '>': return 0;
	case 'v': return 1;
	case '<': return 2;
	}

	return -1;
}

bool ValidMove(int y, int x, int s)
{
	return y >= 0 && y < n && x >= 0 && x < m && (safe[y][x] & (1 << s));
}

int doit(int y, int x, int step)
{
	if (mas[y][x] == 'G') return 0;
	int& res = dp[step][y][x];
	if (res == -1)
	{
		int nstep = (step + 1) & 3;
		res = -2;
		int best = INF;
		for (int i = 0; i < 4; i++)
		{
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (ValidMove(ny, nx, nstep))
			{
				int ret = doit(ny, nx, nstep);
				if (ret >= 0) best = min(best, ret + 1);
			}
		}
		if (best < INF) res = best;
	}

	return res;
}

void Solve()
{
	int i, j, k;
	int tests;
	in_int1(tests);
	for (int test = 1; test <= tests; test++)
	{
		printf("Case #%d: ", test);
		in_int2(n, m);
		for (i = 0; i < n; i++)in_str(mas[i]);
		memset(safe, 15, sizeof(safe));
		int sx=-1, sy=-1;
		for (i = 0; i < n; i++)
		{
			for (j = 0; j < m; j++)
			{
				if (mas[i][j] == '#') safe[i][j] = 0;
				else if (mas[i][j] == 'S')
				{
					sy = i;
					sx = j;
					mas[i][j] = '.';
				}
				else
				{
					int d = TurrelDirection(mas[i][j]);
					if (d != -1)
					{
						safe[i][j] = 0;
						for (k = 0; k < 4; k++)
						{
							int y = i, x = j;
							while (true)
							{
								y += dy[d];
								x += dx[d];
								if (x < 0 || y < 0 || x >= m || y >= n || (mas[y][x] != '.' && mas[y][x] != 'S' && mas[y][x] != 'G')) break;
								safe[y][x] &= ~(1 << k);
							}
							d = (d + 1) % 4;
						}
					}
				}
			}
		}

		memset(dp, -1, sizeof(dp));
		int ret = sx!=-1 ? doit(sy, sx, 0) : -2;
		if (ret == -2) printf("impossible\n");
		else printf("%d\n", ret);
	}
}

int main()
{
#ifdef __LOCAL_RUN__
	#define _MAX_BUF_SIZE 32
	int _i = 0;
	char *_buf = new char[_MAX_BUF_SIZE];

	FILE *res_output = freopen("output.txt", "wt", stdout);
	while (true)
	{
		string _suffix = string(itoa(_i, _buf, 10)) + string(".txt");
		FILE *res_input = freopen((string("input-") + _suffix).c_str(), "rt", stdin);
		if (!res_input)
		{
			// the end
			break;
		}
		if (_i) printf("\n\n");
		printf("==== Case #%d =====\n", _i);
		Solve();
		_i++;
	}
#else
	Solve();
#endif
	return 0;
}
#include <cstdio>
#include <queue>
using namespace std;

const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};

int n, m, sx, sy, tx, ty;
char a[105][105];
bool mat[4][105][105];
int f[4][105][105];

struct foo {int t, x, y;};

bool in(int x, int y) {
    return x >= 0 && x < n && y >= 0 && y < m;
}

void init_mat(bool mat[105][105]) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            mat[i][j] = a[i][j] == '.';
        }
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (a[i][j] < 4) {
                int d = a[i][j];
                int x = i + dx[d];
                int y = j + dy[d];
                while (in(x, y) && mat[x][y]) {
                    mat[x][y] = false;
                    x += dx[d];
                    y += dy[d];
                }
            }
        }
    }
}

int main() {
    char mp[128];
    mp['.'] = '.';
    mp['#'] = '#';
    mp['S'] = '.';
    mp['G'] = '.';
    mp['^'] = 0;
    mp['>'] = 1;
    mp['v'] = 2;
    mp['<'] = 3;
    int T; scanf("%d", &T);
    for (int cas = 1; cas <= T; ++cas) {
        scanf("%d%d", &n, &m);
        for (int i = 0; i < n; ++i) scanf("%s", a[i]);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (a[i][j] == 'S') sx = i, sy = j;
                if (a[i][j] == 'G') tx = i, ty = j;
                a[i][j] = mp[a[i][j]];
            }
        }
        for (int t = 0; t < 4; ++t) {
            init_mat(mat[t]);
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < m; ++j) {
                    if (a[i][j] < 4) {
                        a[i][j] = (a[i][j] + 1) & 3;
                    }
                }
            }
        }
        int ans = -1;
        memset(f, 0xff, sizeof(f));
        queue<foo> q;
        f[0][sx][sy] = 0;
        q.push({0, sx, sy});
        while (!q.empty()) {
            auto _ = q.front(); q.pop();
            int t = _.t;
            int x = _.x;
            int y = _.y;
            if (x == tx && y == ty) {
                ans = f[t][x][y];
                break;
            }
            int nt = (t + 1) & 3;
            for (int i = 0; i < 4; ++i) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (in(nx, ny) && mat[nt][nx][ny] && f[nt][nx][ny] < 0) {
                    f[nt][nx][ny] = f[t][x][y] + 1;
                    q.push({nt, nx, ny});
                }
            }
        }
        printf("Case #%d: ", cas);
        if (ans < 0) puts("impossible");
        else printf("%d\n", ans);
    }
}

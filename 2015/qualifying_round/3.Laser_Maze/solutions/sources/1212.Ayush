#include <iostream>
#include <cstdio>
#include <set>
#include <queue>
#include <algorithm>
#define lli long long int
#define s(x) scanf("%lld", &x)
#define s1(x) scanf("%c", &x)
#define fr first
#define sc second
using namespace std;

char arr[105][105];

set<pair<lli, lli> > s[4];

set<pair<lli, pair<lli, lli> > > state;

queue< pair <pair<lli, lli>, pair<lli, lli> >  > sk;

int main() {
	// your code goes here
	lli tt,sum,tcase,n,m,i,j,k,ans,temp,sx,cnt,cx,cy,sy,ex,ey;
	char a,b;

	s(tcase);

	tt = 1;

	while (tt <= tcase) {
		s(n);
		s(m);

		s[0].clear();
		s[1].clear();
		s[2].clear();
		s[3].clear();

		state.clear();

		printf("Case #%lld: ", tt);
		++tt;

		for (i = 1; i <= n; ++i) {
			s1(a);
			for (j = 1; j <= m; ++j) {
				s1(arr[i][j]);

				if (arr[i][j] == 'S') {
					sx = i;
					sy = j;
				}
				if (arr[i][j] == 'G') {
					ex = i;
					ey = j;
				}
			}
		}

		for (i = 1; i <= n; ++i) {
			for (j = 1; j <= m; ++j) {
				if (arr[i][j] == '^') {
					for (k = i-1; k > 0; --k) {
						if ((arr[k][j] != '.') && (arr[k][j] != 'S') &&(arr[k][j] != 'G'))
							break;
						s[0].insert(make_pair(k,j));
					}

					for (k = j+1; k <= m; ++k) {
						if ((arr[i][k] != '.') && (arr[i][k] != 'S') &&(arr[i][k] != 'G'))
							break;
						s[1].insert(make_pair(i,k));
					}

					for (k = i+1; k <= n; ++k) {
						if ((arr[k][j] != '.') && (arr[k][j] != 'S') &&(arr[k][j] != 'G'))
							break;
						s[2].insert(make_pair(k,j));
					}

					for (k = j-1;  k > 0; --k) {
						if ((arr[i][k] != '.') && (arr[i][k] != 'S') &&(arr[i][k] != 'G'))
							break;
						s[3].insert(make_pair(i,k));
					}
				} else if (arr[i][j] == '>') {
					for (k = i-1; k > 0; --k) {
						if ((arr[k][j] != '.') && (arr[k][j] != 'S') &&(arr[k][j] != 'G'))
							break;
						s[3].insert(make_pair(k,j));
					}

					for (k = j+1; k <= m; ++k) {
						if ((arr[i][k] != '.') && (arr[i][k] != 'S') &&(arr[i][k] != 'G'))
							break;
						s[0].insert(make_pair(i,k));
					}

					for (k = i+1; k <= n; ++k) {
						if ((arr[k][j] != '.') && (arr[k][j] != 'S') &&(arr[k][j] != 'G'))
							break;
						s[1].insert(make_pair(k,j));
					}

					for (k = j-1;  k > 0; --k) {
						if ((arr[i][k] != '.') && (arr[i][k] != 'S') &&(arr[i][k] != 'G'))
							break;
						s[2].insert(make_pair(i,k));
					}
				} else if (arr[i][j] == 'v') {
					for (k = i-1; k > 0; --k) {
						if ((arr[k][j] != '.') && (arr[k][j] != 'S') &&(arr[k][j] != 'G'))
							break;
						s[2].insert(make_pair(k,j));
					}

					for (k = j+1; k <= m; ++k) {
						if ((arr[i][k] != '.') && (arr[i][k] != 'S') &&(arr[i][k] != 'G'))
							break;
						s[3].insert(make_pair(i,k));
					}

					for (k = i+1; k <= n; ++k) {
						if ((arr[k][j] != '.') && (arr[k][j] != 'S') &&(arr[k][j] != 'G'))
							break;
						s[0].insert(make_pair(k,j));
					}

					for (k = j-1;  k > 0; --k) {
						if ((arr[i][k] != '.') && (arr[i][k] != 'S') &&(arr[i][k] != 'G'))
							break;
						s[1].insert(make_pair(i,k));
					}
				} else if (arr[i][j] == '<') {
					for (k = i-1; k > 0; --k) {
						if ((arr[k][j] != '.') && (arr[k][j] != 'S') &&(arr[k][j] != 'G'))
							break;
						s[1].insert(make_pair(k,j));
					}

					for (k = j+1; k <= m; ++k) {
						if ((arr[i][k] != '.') && (arr[i][k] != 'S') &&(arr[i][k] != 'G'))
							break;
						s[2].insert(make_pair(i,k));
					}

					for (k = i+1; k <= n; ++k) {
						if ((arr[k][j] != '.') && (arr[k][j] != 'S') &&(arr[k][j] != 'G'))
							break;
						s[3].insert(make_pair(k,j));
					}

					for (k = j-1;  k > 0; --k) {
						if ((arr[i][k] != '.') && (arr[i][k] != 'S') &&(arr[i][k] != 'G'))
							break;
						s[0].insert(make_pair(i,k));
					}
				}
			}
		}

		/*for (i = 0; i < 4; ++i) {
			for (std::set<pair<lli, lli> >::iterator it = s[i].begin(); it != s[i].end(); ++it)
				cout<<i << " " << it->fr << " " << it->sc <<" ";
			cout << endl;
		}*/

		cnt = 0;
		sum = 0;

		sk.push(make_pair(make_pair(cnt, sum), make_pair(sx, sy)) );

		temp = 0;
		sum = 0;

		while (!sk.empty()) {
			cnt = sk.front().fr.fr;
			sum = sk.front().fr.sc;
			cx = sk.front().sc.fr;
			cy = sk.front().sc.sc;

			sk.pop();

			if ((cx > n) || (cx < 1) || (cy > m) || (cy < 1) || ((arr[cx][cy] != '.')&&(arr[cx][cy] != 'S')&&(arr[cx][cy] != 'G')))
				continue;

			if (state.find(make_pair(cnt, make_pair(cx,cy))) != state.end())
				continue;

			state.insert(make_pair(cnt, make_pair(cx,cy)));

		//	cout << cx << " " <<cy << endl;

			if (sum != 0) {
			if (s[cnt].find(make_pair(cx,cy)) != s[cnt].end())
				continue;
			}

			if ((cx == ex) && (cy == ey)) {
				temp = 1;
				ans = sum;
				break;
			}

			sk.push(make_pair(make_pair(((cnt+1)%4), sum+1), make_pair(cx+1, cy)));
			sk.push(make_pair(make_pair(((cnt+1)%4), sum+1), make_pair(cx-1, cy)));
			sk.push(make_pair(make_pair(((cnt+1)%4), sum+1), make_pair(cx, cy+1)));
			sk.push(make_pair(make_pair(((cnt+1)%4), sum+1), make_pair(cx, cy-1)));
		}

		if (temp == 1) {
			printf("%lld\n", ans);
		} else {
			printf("impossible\n");
		}

		while (!sk.empty())
			sk.pop();
	}
	return 0;
}

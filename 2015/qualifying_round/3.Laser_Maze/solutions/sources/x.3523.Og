#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

int N, M;
char maze[105][105];
bool nextmove[105][105];
queue<pair<int, int> > cola;

bool checkAt(int y, int x, int step) {
	if (
		y < 0 || y >= M || 
		x < 0 || x >= N || 
		nextmove[y][x] ||
		maze[y][x] == '#' || 
		maze[y][x] == '^' || maze[y][x] == '>' || maze[y][x] == 'v' || maze[y][x] == '<'
	) {
		return false;
	}

	int top = y;
	while (top >= 0 && maze[top][x] == '.' || maze[top][x] == 'G') top--;
	if (top >= 0) {
		if (maze[top][x] == 'v' && step%4 == 0) return false;
		if (maze[top][x] == '>' && step%4 == 1) return false;
		if (maze[top][x] == '^' && step%4 == 2) return false;
		if (maze[top][x] == '<' && step%4 == 3) return false;
	}

	int bottom = y;
	while (bottom < M && maze[bottom][x] == '.' || maze[bottom][x] == 'G') bottom++;
	if (bottom < M) {
		if (maze[top][x] == '^' && step%4 == 0) return false;
		if (maze[top][x] == '<' && step%4 == 1) return false;
		if (maze[top][x] == 'v' && step%4 == 2) return false;
		if (maze[top][x] == '>' && step%4 == 3) return false;
	}

	int left = x;
	while (left >= 0 && maze[y][left] == '.' || maze[y][left] == 'G') left--;
	if (left >= 0) {
		if (maze[y][left] == '>' && step%4 == 0) return false;
		if (maze[y][left] == '^' && step%4 == 1) return false;
		if (maze[y][left] == '<' && step%4 == 2) return false;
		if (maze[y][left] == 'v' && step%4 == 3) return false;
	}

	int right = x;
	while (right < N && maze[y][right] == '.' || maze[y][right] == 'G') right++;
	if (right < N) {
		if (maze[y][right] == '<' && step%4 == 0) return false;
		if (maze[y][right] == 'v' && step%4 == 1) return false;
		if (maze[y][right] == '>' && step%4 == 2) return false;
		if (maze[y][right] == '^' && step%4 == 3) return false;
	}

//	printf("try: %d,%d at %d\n", x, y, step);

	nextmove[y][x] = true;
	return true;
}

int main() {
	int T, step, cnt, test = 0, win;
	pair<int, int> tmp;

	cin >> T;
	while (T--) {
		cin >> M >> N;
		cin.ignore(100, '\n');

		for (int i=0; i<M; i++) {
			cin.getline(maze[i], 105);
			for (int j=0; j<N; j++) {
				if (maze[i][j] == 'S') {
					//cout << "Base " << j << "," << i << endl; 
					maze[i][j] = '.';
					cola.push(make_pair(i, j));
				}
			}
		}

		step = 0;
		win = 0;
		while (!win && !cola.empty() && step < 100000) {
			for (int i=0; i<M; i++) {
				for (int j=0; j<N; j++) {
					nextmove[i][j] = 0;
				}
			}

			cnt = cola.size();
			for (int i=0; i<cnt; i++) {
				tmp = cola.front();
				cola.pop();

				if (maze[tmp.first][tmp.second] == 'G') {
					win = 1;
					break;					
				}

				if (checkAt(tmp.first+1, tmp.second, step + 1)) cola.push(make_pair(tmp.first+1, tmp.second));
				if (checkAt(tmp.first-1, tmp.second, step + 1)) cola.push(make_pair(tmp.first-1, tmp.second));
				if (checkAt(tmp.first, tmp.second+1, step + 1)) cola.push(make_pair(tmp.first, tmp.second+1));
				if (checkAt(tmp.first, tmp.second-1, step + 1)) cola.push(make_pair(tmp.first, tmp.second-1));
			}
			step++;
		}

		while (!cola.empty()) {
			cola.pop();
		}

		if (win) {
			cout << "Case #" << ++test << ": " << step - 1 << "\n";
		} else {
			cout << "Case #" << ++test << ": impossible\n";
		}
	}
	return 0;
}

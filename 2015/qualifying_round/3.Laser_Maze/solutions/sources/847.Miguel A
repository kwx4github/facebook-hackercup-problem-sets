#!/usr/bin/env python2.7

import sys

sys.setrecursionlimit(100000)

def parseLineTypes (line, types):
    result = []
    elements = line.strip("\n").split(" ")
    if len(elements) != len(types):
        print ("Error: Diferent number elements between line and types_list")
        return None
    for i in range(len(elements)):
        result.append(types[i](elements[i]))
    return result

def printMaze (maze):
    print ("")
    for i in range(len(maze)):
        print (maze[i])
    print ("")

#input_file_path = "laser_maze_example_input.txt"
input_file_path = "laser_maze.txt"
#output_file_path = "laser_maze_example_output.txt"
output_file_path = "laser_maze_output.txt"

input_file = open(input_file_path, 'r')
input_file_lines = input_file.readlines()
output_file = open(output_file_path, 'w')

T = int(input_file_lines[0])

numero_linea = 1

for case in range(T):
    [M, N] = parseLineTypes(input_file_lines[numero_linea],[int, int])
    numero_linea += 1
    maze=[]
    for i in range(M):
        maze.append(list(input_file_lines[numero_linea].strip("\n")))
        numero_linea += 1
        
    moves = [(0,1),(1,0),(0,-1),(-1,0)]

    def moveInMaze(actual, movement):
        x = actual[1]+moves[movement][1]
        if (x < 0) or (x >= N):
            return None
        y = actual[0]+moves[movement][0]
        if (y < 0) or (y >= M):
            return None
        return (y,x)
    
    #Generating the four maps
    maps = []
    for j in range(4):
        tmpMap = []
        for k in range(M):
            tmpLine = []
            for l in range(N):
                if (maze[k][l]=="#"):
                    tmpLine.append(1)
                elif (maze[k][l]==">"):
                    tmpLine.append(2)
                elif (maze[k][l]=="v"):
                    tmpLine.append(3)
                elif (maze[k][l]=="<"):
                    tmpLine.append(4)
                elif (maze[k][l]=="^"):
                    tmpLine.append(5)
                else:
                    tmpLine.append(0)
            tmpMap.append(tmpLine)
        #Adding the laser beams
        for k in range(M):
            for l in range(N):
                if (tmpMap[k][l] >= 2):
                    direction = (tmpMap[k][l]-2+j) % 4
                    beam=(k,l)
                    while (True):
                        beam = moveInMaze(beam,direction)
                        if (beam == None) or (tmpMap[beam[0]][beam[1]]>0):
                            break
                        else:
                            tmpMap[beam[0]][beam[1]]=-1
        maps.append(tmpMap)
        
    #printMaze(maze)
    #for j in range(4):
    #    print ("Mapa %d" % (j))
    #    printMaze(maps[j])

    #Start and Goal
    for k in range(M):
        for l in range(N):
            if (maze[k][l]=="S"):
                start = (k,l,0)
            elif (maze[k][l]=="G"):
                goal = (k,l)
    
    addedStates = {}
    addedStates[start] = True;
    nas = 1
    frontier = []
    
    def isValidState(state):
        y,x,t = state
        if (x < 0) or (x >= N) or (y < 0) or (y >= M):
            return False 
        elif (maps[t][y][x] != 0):
            return False 
        else:
            return True

    def stepMaze(state):
        global nas
        if (state[0] == goal[0]) and (state[1] == goal[1]):
            #print (state)
            return state[2]
        
        [y,x,t] = state;
        #Next States
        sw = False
        for i in range(4):
            nextState = (y+moves[i][0],x+moves[i][1],(t+1)%4)
            if isValidState(nextState):
                #Check if is a duplicate state (Position and Map Configuration (Lasers Beams))
                if not (nextState in addedStates):
                    addedStates [nextState] = True
                    value=int(t+1+abs(nextState[0]-goal[0])+abs(nextState[1]-goal[1]));
                    frontier.append((value,(nextState[0],nextState[1],t+1)))
                    sw = True
                    nas += 1
        
        if sw:
            frontier.sort();
            
        while len(frontier)>0:
            [value,state]=frontier.pop(0)
            res = stepMaze(state)
            if res:
                return res
        
        return False
        
    solution = stepMaze(start)
    
    if (solution == False):
        solution = "impossible"
    else:
        solution = str(solution)
    
    #print ("Added States %d" % (nas))
    
    output_file.write ("Case #%d: %s\n" % (case+1,solution))
    print ("Case #%d: %s" % (case+1,solution))

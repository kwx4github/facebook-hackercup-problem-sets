#include"stdio.h"
#include"map"
#include"queue"
#include"algorithm"
#define INF 1000000007
using namespace std;
struct III {
	int X, Y, L;
	III (int x = 0, int y = 0, int l = 0) {
		X = x; Y = y; L = l % 4;
	}
};
int t, T, M, N, A[105][105][4], B[105][105][4];
int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
III S, G;
char s[200], p[] = {"^>v<#."};
map<char, int> m;
bool outOfBound(int &x, int &y, int d, int &l) {
	x += dx[d]; y += dy[d]; l %= 4;
	if (x < 1 || x > M) return true;
	if (y < 1 || y > N) return true;
	return false;
}
bool blast(int& x, int& y, int d, int l) {
	if (outOfBound(x, y, d, l)) return false;
	if (A[x][y][l] <= 4) return false;
	A[x][y][l] = 5;
	return true;
}
bool valid(int x, int y, int d, int l, int dist) {
	if (outOfBound(x, y, d, l)) return false;
	if (A[x][y][l] != 6) return false;
	if (B[x][y][l] != INF) return false;
	B[x][y][l] = dist + 1;
	return true;
}
int main() {
	freopen("C_in.txt", "r", stdin);
	freopen("C_out.txt", "w", stdout);
	m['^'] = 0;
	m['>'] = 1;
	m['v'] = 2;
	m['<'] = 3;
	m['#'] = 4;
	m['.'] = m['S'] = m['G'] = 6;
	scanf("%d", &T);
	while (t < T) {
		scanf("%d%d", &M, &N);
		for (int i = 1; i <= M; i++) {
			scanf("%s", s + 1);
			for (int j = 1; j <= N; j++) {
				for (int k = 0; k < 4; k++) {
					B[i][j][k] = INF;
					switch (s[j]) {
						case '.':
						case 'S':
						case 'G': 
						case '#': A[i][j][k] = m[s[j]]; break;
						default: A[i][j][k] = (m[s[j]] + k) % 4; 
					}
				}
				if (s[j] == 'S') {
					S = III(i, j, 0);
					B[i][j][0] = 0;
				}
				if (s[j] == 'G') G = III(i, j, 0);
			}
		}
		for (int i = 1; i <= M; i++) {
			for (int j = 1; j <= N; j++) {
				if (A[i][j][0] >= 4) continue;
				for (int k = 0; k < 4; k++) {
					int x = i, y = j, d = A[i][j][k];
					while (blast(x, y, d, k));
				}
			}
		}
		printf("Case #%d: ", ++t); 
		queue<III> q;
		q.push(S);
		while (!q.empty()) {
			int x = q.front().X;
			int y = q.front().Y;
			int l = q.front().L;
			int dist = B[x][y][l];
			if (x == G.X && y == G.Y) {
				printf("%d\n", dist);
				break;
			}
			q.pop();
			for (int i = 0; i < 4; i++)
				if (valid(x, y, i, l + 1, dist))
					q.push(III(x + dx[i], y + dy[i], l + 1));
		}
		if (q.empty()) printf("impossible\n");
	}
}
/*
5
2 5
##^##
S...G
2 5
#>###
S...G
1 5
S..G<
1 6
S...G<
5 5
S....
.....
.>v..
.^<..
....G
*/

#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>

using namespace std;

char actual_map[110][110];
bool smap[4][110][110];
int tab[4][110][110];

char dy[4] = {-1,0,1,0};
char dx[4] = {0,1,0,-1};

typedef pair<int,int> PI;

int main() {
	int T; scanf("%d", &T);
	for(int _ = 0; _ < T; _++) {
		int m, n; scanf("%d%d", &m, &n);
		int g_y, g_x, p_y, p_x;
		for(int i = 0; i < m; i++) {
			scanf(" %s", actual_map[i]);
			for(int j = 0; j < 4; j++) {
				memset(smap[j][i], 0, sizeof(smap[j][i]));
				memset(tab[j][i], -1, sizeof(tab[j][i]));
			}
		}
		for(int i = 0; i < m; i++)
			for(int j = 0; j < n; j++) {
				switch(actual_map[i][j]) {
					case 'S':
						p_y = i; p_x = j;
						break;
					case 'G':
						g_y = i; g_x = j;
						break;
					case '.':
						break;
					case '#':
					{
						for(int k = 0; k < 4; k++) {
							smap[k][i][j] = 1;
						}
						break;
					}
					default:
					{
						int dir = 0;
						switch(actual_map[i][j]) {
							case '<':
								dir++;
							case 'v':
								dir++;
							case '>':
								dir++;
							case '^':
							default:
								break;
						}
						for(int k = 0; k < 4; k++, (dir = (dir+1)%4)) {
							smap[k][i][j] = 1;
							int ii = i + dy[dir], jj = j + dx[dir];
							while(ii >= 0 && ii < m && jj >= 0 && jj < n) {
								bool empty;
								switch(actual_map[ii][jj]) {
									case '#':
									case '^':
									case '>':
									case 'v':
									case '<':
										empty = 0;
										break;
									default:
										empty = 1;
										break;
								}
								if (!empty) break;
								smap[k][ii][jj] = 1;
								ii += dy[dir];
								jj += dx[dir];
							}
						}
						break;
					}
				}
			}
		vector<PI> q;
		q.push_back(PI(p_y*n+p_x,0));
		int res = -1;
		for(int i = 0; i < q.size(); i++) {
			PI entry = q[i];
			int py = entry.first/n, px = entry.first%n;
			int t = entry.second;
			if (py == g_y && px == g_x) {
				res = t;
				break;
			}
			int nd = (t+1)%4;
			for(int j = 0; j < 4; j++) {
				int ny = py + dy[j]; int nx = px + dx[j];
				if (ny >= 0 && ny < m && nx >= 0 && nx < n &&
					tab[nd][ny][nx] == -1 && !smap[nd][ny][nx]) {
					tab[nd][ny][nx] = t+1;
					q.push_back(PI(ny*n+nx,t+1));
				}
			}
		}
		printf("Case #%d: ", _+1);
		if(res == -1) printf("impossible\n");
		else printf("%d\n", res);
	}
	return 0;
}

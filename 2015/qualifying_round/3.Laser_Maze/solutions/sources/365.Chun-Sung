#include<stdio.h>
#include<string.h>

typedef int Coord;

int T, nR, nC;
char M[4][128][128];
int D[4][128][128];
Coord S, G;
int dr[4] = {-1,0,1,0}, dc[4] = {0,1,0,-1};

inline Coord enc(int r, int c, int t) { return (t<<20) | (r<<10) | c; }
inline void dec(Coord &x, int &r, int &c, int &t) { t = x>>20, r = (x>>10)&0x3ff, c = x&0x3ff; }

inline bool wall(char c) { return c == '#' || c == '^' || c == '>' || c == 'v' || c == '<'; }
inline bool dead(char c) { return c == '#' || c == 'L'; }
inline bool goal(int r, int c) { return ((r<<10)|c) == G; }	// G.t == 0

void laser(int r, int c, int t) {
	for(int i = 0; i < 4; ++i) {
		int p = (t+i)&3;
		M[p][r][c] = '#';
		for(int nr = r+dr[i], nc = c+dc[i]; !wall(M[p][nr][nc]); nr+=dr[i], nc+=dc[i]) {
			M[p][nr][nc] = 'L';
		}
	}
}

Coord Q[65536];
int bfs() {
	int r, c, t, qn = 1;
	memset(D, -1, sizeof(int)*4*128*128);
	dec(S, r, c, t);
	D[t][r][c] = 0;
	Q[0] = S;
	for(int i = 0; i < qn; ++i) {
		dec(Q[i], r, c, t);
		int d = D[t][r][c];
		for(int j = 0; j < 4; ++j) {
			int nr = r+dr[j], nc = c+dc[j], nt = (t+1)&3;
			if(dead(M[nt][nr][nc]) || D[nt][nr][nc] != -1) continue;
			if(goal(nr, nc)) return d + 1;
			D[nt][nr][nc] = d + 1;
			Q[qn++] = enc(nr, nc, nt);
		}
	}
	return -1;
}

int main() {
	scanf("%d", &T);
	for(int tt = 1; tt <= T; ++tt) {
		scanf("%d %d", &nR, &nC);
		memset(M, '#', sizeof(char)*128*128);
		for(int i = 1; i <= nR; ++i) {
			scanf("%s", M[0][i]+1);
			M[0][i][nC+1] = '#';
			for(int j = 1; j <= nC; ++j) {
				if(M[0][i][j] == 'S') {
					S = enc(i, j, 0);
					M[0][i][j] = '.';
				} else if(M[0][i][j] == 'G') {
					G = enc(i, j, 0);
					M[0][i][j] = '.';
				}
			}
		}
		for(int t = 1; t < 4; ++t) memcpy(M[t], M[0], sizeof(char)*128*128);
		for(int i = 1; i <= nR; ++i) for(int j = 1; j <= nC; ++j) {
			if(M[0][i][j] == '^') laser(i, j, 0);
			else if(M[0][i][j] == '>') laser(i, j, 3);
			else if(M[0][i][j] == 'v') laser(i, j, 2);
			else if(M[0][i][j] == '<') laser(i, j, 1);
		}
		int a = bfs();
		if(a >= 0) printf("Case #%d: %d\n", tt, a);
		else printf("Case #%d: impossible\n", tt);
	}
}

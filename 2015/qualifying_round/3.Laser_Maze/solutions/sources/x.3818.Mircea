#include <cstdio>
#include <queue>
#include <cstring>
#define N 103
using namespace std;

struct nod {
    int x, y, v;
    nod() {};
    nod(int _x, int _y, int _v) { x = _x; y = _y; v = _v;};
};

int test, T;
int n, m;
char a[N][N];
int dp[N][N][4];
bool used[N][N][4];

char dirs[] = "^>v<^>v<^>v<^";
char xx[] = {-1, 0, 1, 0};
char yy[] = {0, 1, 0, -1};

char getDir(char x, int p) {
    int i;
    for (i = 0; i < 13; ++i)
        if (x == dirs[i])
            break;
    return dirs[i + p];
}

bool isDir(int i, int j) {
    if (a[i][j] == '>' || a[i][j] == '<' || a[i][j] == 'v' || a[i][j] == '^')
        return true;
    return false;
}

bool check(int x, int y, int v) {
    int i, j;
    j = y;
    for (i = x - 1; i >= 1; --i)
        if (a[i][j] == '#')
            break;
        else if (isDir(i, j)) {
            char d = getDir(a[i][j], v);
            if (d == 'v')
                return false;
        }
    
    for (i = x + 1; i <= n; ++i)
        if (a[i][j] == '#') break;
        else if (isDir(i, j)) {
            char d = getDir(a[i][j], v);
            if (d == '^')
                return false;
        }
    i = x;
    for (j = y - 1; j >= 1; --j)
        if (a[i][j] == '#') break;
        else if (isDir(i, j)) {
            char d = getDir(a[i][j], v);
            if (d == '>')
                return false;
        }
    for (j = y + 1; j <= m; ++j)
        if (a[i][j] == '#') break;
        else if (isDir(i, j)) {
            char d = getDir(a[i][j], v);
            if (d == '<')
                return false;
        }
    return true;
}


void solve() {
    queue<nod> Q;
    memset (dp, 0, sizeof(dp));
    memset (used, 0, sizeof(used));
    nod start, end;
    int i, j;
    for (i = 1; i <= n; ++i)
        for (j = 1; j <= m; ++j)
            if (a[i][j] == 'S') {
                start = nod(i, j, 0);
                Q.push(start);
                used[i][j][0] = true;
            }
            else if (a[i][j] == 'G') {
                end = nod(i, j, 0);
            }
    int res = 0x3f3f3f3f;
    while (!Q.empty()) {
        nod u = Q.front(); Q.pop();
        if (u.x == end.x && u.y == end.y) {
            res = dp[u.x][u.y][u.v];
            break;
        }
        for (int i = 0; i < 4; ++i) {
            int nx = u.x + xx[i];
            int ny = u.y + yy[i];
            if (nx >= 1 && nx <= n && ny >= 1 && ny <= m)
                if (a[nx][ny] == '.' || a[nx][ny] == 'S' || a[nx][ny] == 'G')
                if (!used[nx][ny][(u.v + 1) % 4] && check(nx, ny, (u.v + 1) % 4)) {
                    
                    used[nx][ny][(u.v + 1) % 4] = true;
                    dp[nx][ny][(u.v + 1) % 4] = dp[u.x][u.y][u.v] + 1;
                    Q.push(nod(nx, ny, (u.v + 1) % 4));
                }
        }
    }
    if (res == 0x3f3f3f3f)
        printf ("Case #%d: impossible\n", test);
    else
        printf ("Case #%d: %d\n", test, res);
                
}

int main() {
    freopen ("c.in", "r", stdin);
    freopen ("c.out", "w", stdout);
    scanf ("%d", &T);
    int i, j;
    for (test = 1; test <= T; ++test) {
        scanf ("%d %d\n", &n, &m);
        for (i = 1; i <= n; ++i)
            scanf ("%s\n", a[i] + 1);
        solve();
    }
}

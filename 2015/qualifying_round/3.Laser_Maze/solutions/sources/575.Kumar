#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

int n,m,visited[110][110][4],st,ed;
string maze[110];
const string laser = "<^>v";

int gridchk(int x,int y)
{
	if(x>=0&&x<n&&y>=0&&y<m&&(maze[x][y]=='.'||maze[x][y]=='S'||maze[x][y]=='G'))
		return 1;
	return 0;
}

int check(int x,int y,int step)
{
	if(st==x&&ed==y&&step==0)
		return 1;
	for(int i=x+1;i<n;i++){
		if(maze[i][y]=='#')
			break;
		int flag=0;
		for (int k = 0; k < 4; ++k){
			if(maze[i][y]==laser[k]){
				if((k+step)%4==1)
					return 0;
				flag=1;
			}
		}
		if(flag)
			break;
	}

	for(int i=x-1;i>=0;i--){
		if(maze[i][y]=='#')
			break;
		int flag=0;
		for (int k = 0; k < 4; ++k){
			if(maze[i][y]==laser[k]){
				if((k+step)%4==3)
					return 0;
				flag=1;
			}
		}
		if(flag)
			break;
	}

	for(int i=y+1;i<m;i++){
		if(maze[x][i]=='#')
			break;
		int flag=0;
		for (int k = 0; k < 4; ++k){
			if(maze[x][i]==laser[k]){
				if((k+step)%4==0)
					return 0;
				flag=1;
			}
		}
		if(flag)
			break;
	}

	for(int i=y-1;i>=0;i--){
		if(maze[x][i]=='#')
			break;
		int flag=0;
		for (int k = 0; k < 4; ++k){
			if(maze[x][i]==laser[k]){
				if((k+step)%4==2)
					return 0;
				flag=1;
			}
		}
		if(flag)
			break;
	}
	return 1;
}

// void solve(int x,int y,int step)
// {
// 	printf("%d %d %d\n",x,y,step);
// 	visited[x][y][step]=1;
// 	if((!check(x,y,step))&&noMovement==0){
// 		printf("Gotcha!!\n");
// 		DP[x][y][step]=INT_MAX;
// 		return ;
// 	}
// 	noMovement=0;
// 	if(maze[x][y]=='G'){
// 		DP[x][y][step]=0;
// 		return ;
// 	}
// 	int st = (step+1)%4,res = INT_MAX;
// 	int deltax[] = {1,-1,0,0};
// 	int deltay[] = {0,0,1,-1};
// 	for(int k=0;k<4;k++){
// 		int i = deltax[k];
// 		int j = deltay[k];
// 		if(!gridchk(x+i,y+j)){
// 			//printf("%d %d No Dot region\n",x+i,y+j);
// 			continue;
// 		}
// 		if(!visited[x+i][y+j][st]){
// 			solve(x+i,y+j,st);
// 			//printf("inner loop %d %d %d %d %d\n",x+i,y+j,st,res,DP[x+i][y+j][st]);
// 		}
// 			//printf("outer loop %d %d %d %d %d\n",x+i,y+j,st,res,DP[x+i][y+j][st]);
// 			if(DP[x+i][y+j][st]!=-1)
// 			 res = min(res,DP[x+i][y+j][st]);
// 		// }
// 	}
// 	if(res==INT_MAX)
// 		DP[x][y][step]=INT_MAX;
// 	else
// 		DP[x][y][step]=res+1;
// 	printf("Finally %d %d %d %d\n",x,y,step,DP[x][y][step]);
// }

int bfs()
{
	int deltax[] = {1,-1,0,0};
	int deltay[] = {0,0,1,-1};
	queue<pair<pair<int,int>,int> > Q;
	Q.push(mp(mp(st,ed),0));
	visited[st][ed][0]=1;
	while(!Q.empty()){
		pair<pair<int,int>,int> frnt = Q.front();Q.pop();
		int x = frnt.ff.ff,y = frnt.ff.ss,step = frnt.ss;
		if(!check(x,y,step))
			continue;
		if(maze[x][y]=='G'){
			return step;
		}
		for(int k=0;k<4;k++){
			int i = x+deltax[k];
			int j = y+deltay[k];
			if(!gridchk(i,j))
				continue;
			if(!visited[i][j][(step+1)%4]){
				Q.push(mp(mp(i,j),step+1));
				visited[i][j][(step+1)%4]=1;
			}
		}
	}
	return -1;
}

int main()
{
	int t;
	cin>>t;
	for (int T = 1; T <= t; ++T){
		cin>>n>>m;
		for (int i = 0; i < n; ++i){
			cin>>maze[i];
		}
		for (int i = 0; i < n; ++i){
			for (int j = 0; j < m; ++j){
				if(maze[i][j]=='S'){
					st = i;
					ed = j;
				}
				for (int k = 0; k < 4; ++k){
					// DP[i][j][k]=-1;
					visited[i][j][k]=0;
				}
			}
		}
		int ans = bfs();
		if(ans!=-1)
			printf("Case #%d: %d\n",T,ans);
		else
			printf("Case #%d: impossible\n",T);
	}
}
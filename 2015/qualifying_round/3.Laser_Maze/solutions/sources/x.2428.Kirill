#include<iostream>
#include<cstdio>
#include<stack>
#include<queue>
#include<set>
#include<iomanip>
#include<complex>
#include<vector>
#include<map>
#include<algorithm>
#include<cmath>
#include<string>
#include<bitset>
#include<memory.h>
#include<cassert>
#include<ctime>
 
using namespace std;
 
#define For(i,l,r) for (int i = l ;i < (int)(r + 1) ; ++ i )
#define ForI(it , s , T) for (T :: iterator it = s.begin(); it != s.end() ; ++ it )
#define LL long long
#define iinf 2000000000
#define linf 4000000000000000000LL
#define MOD  1000000007
#define Pi 3.1415926535897932384
#define bit(mask,i) ((mask>>i)&1)
#define pb(x) push_back(x)
#define mk(x,y) make_pair(x,y)
#define sqr(x) ((x)*(x))
#define pause cin.get();cin.get();
#define fir first
#define sec second
#define ln(x) log(x)
#define pii pair<int,int>
#define map map11
#define distance dist123123
const int Direction[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
const int Nmax = 500001;

int n,m;
string map[111];
int distance[15][111][111];
bool shootArea[15][111][111];

inline bool moveIsPossible(int x,int y, int time){
       if (x <= 0 || x > n) return 0;
       if (y <= 0 || y > m) return 0;
       if (map[x][y] == '#') return 0;
       if (shootArea[time][x][y]) return 0;
       if (distance[time][x][y] != iinf) return 0;
       return 1;
}
inline int isTurrel(int x,int y){
       if (map[x][y] == '^') return 1;
       if (map[x][y] == '>') return 2;
       if (map[x][y] == 'v') return 3;
       if (map[x][y] == '<') return 4;
       return 0;
}
inline bool validCell(int x,int y){
       if (x <= 0 || x > n) return 0;
       if (y <= 0 || y > m) return 0;
       if (map[x][y] == '#') return 0;
       return 1;
}
int main() {
    ios_base::sync_with_stdio(0);
    freopen("laser_maze.txt","r",stdin);
    freopen("laser_maze_out.txt","w",stdout);
    int test;
    cin >> test;
    int g = test;
    while (test --> 0){
          cout << "Case #" << g - test << ": ";
          cin >> n >> m;
          pii start(-1,-1), finish(-1,-1);
          
          for (int i = 0 ;i <= n ;i ++){
              getline(cin, map[i]);
              if (i)
                 map[i] = '$' + map[i];
              for (int j = 1; j <= m ;j ++){
                  if (map[i][j] == 'S') start = mk(i,j);
                  if (map[i][j] == 'G') finish = mk(i,j);
              }
          }
          for (int i = 1; i <= n ;i ++)
              for (int j = 1; j <= m ;j ++)
                  for (int t = 0 ; t < 12 ; t ++){
                      distance[t][i][j] = iinf;
                      shootArea[t][i][j] = 0;
                  }
          distance[0][start.first][start.second] = 0;
          for (int i = 1; i <= n ;i ++)
              for (int j = 1; j <= m ;j ++){
                  int state = isTurrel(i,j);
                  if (state == 0) continue;
                  state --;
                  for (int time = 0 ; time < 12 ; time ++, state = (state + 1) % 4){
                      shootArea[time][i][j] = true;
                      int x = i , y = j;
                      while (1){
                            x += Direction[state][0];
                            y += Direction[state][1];
                            if (!validCell(x,y)) break;
                            shootArea[time][x][y] = true;
                      }
                  }
              }
          
          queue<pair<int,pii > > que;
          que.push(mk(0,start));
          while (!que.empty()){
                int modTime = (que.front()).first;
                pii currentCell = que.front().second;
                que.pop();
                int time = distance[modTime][currentCell.first][currentCell.second];
                for (int i = 0; i < 4; i ++){
                    int x = currentCell.first + Direction[i][0];
                    int y = currentCell.second + Direction[i][1];
                    if (!moveIsPossible(x,y, (time + 1) % 12)) continue;
                    distance[(time + 1) % 12][x][y] = time + 1;
                    que.push(mk((time + 1) % 12 , mk(x,y) ));
                }
          }
          int dist = iinf;
          for (int t = 0 ;t < 12 ;t ++)
              dist = min(dist , distance[t][finish.first][finish.second]);
          if (dist == iinf)
             cout << "impossible\n";
          else
              cout << dist << endl;
    }
    return 0;
}


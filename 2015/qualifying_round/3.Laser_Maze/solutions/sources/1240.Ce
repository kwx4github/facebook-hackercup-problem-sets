#!/usr/bin/env python
# -*- coding: utf-8 -*-

def solve(maze, M, N):
	m0 = [[0 for j in xrange(N)] for i in xrange(M)]
	m1 = [[0 for j in xrange(N)] for i in xrange(M)]
	m2 = [[0 for j in xrange(N)] for i in xrange(M)]
	m3 = [[0 for j in xrange(N)] for i in xrange(M)]
	mazes = [m0, m1, m2, m3]
	s_x, s_y = -1, -1

	def shoot_left(x, y, m):
		y -= 1
		while y >= 0 and (maze[x][y] == '.' or maze[x][y] == 'S' or maze[x][y] == 'G'):
			m[x][y] = 1
			y -= 1
 
	def shoot_right(x, y, m):
		y += 1
		while y < N and (maze[x][y] == '.' or maze[x][y] == 'S' or maze[x][y] == 'G'):
			m[x][y] = 1
			y += 1

	def shoot_up(x, y, m):
		x -= 1
		while x >= 0 and (maze[x][y] == '.' or maze[x][y] == 'S' or maze[x][y] == 'G'):
			m[x][y] = 1
			x -= 1

	def shoot_down(x, y, m):
		x += 1
		while x < M and (maze[x][y] == '.' or maze[x][y] == 'S' or maze[x][y] == 'G'):
			m[x][y] = 1
			x += 1

	for i in xrange(M):
		for j in xrange(N):
			if maze[i][j] == "S":
				s_x, s_y = i, j
				continue
			elif maze[i][j] == "." or maze[i][j] == "G":
				continue			

			elif maze[i][j] == "<":
				shoot_left(i, j, m0)
				shoot_up(i, j, m1)
				shoot_right(i, j, m2)
				shoot_down(i, j, m3)

			elif maze[i][j] == ">":
				shoot_right(i, j, m0)
				shoot_down(i, j, m1)
				shoot_left(i, j, m2)
				shoot_up(i, j, m3)

			elif maze[i][j] == "^":
				shoot_up(i, j, m0)
				shoot_right(i, j, m1)
				shoot_down(i, j, m2)
				shoot_left(i, j, m3)

			elif maze[i][j] == "v":
				shoot_down(i, j, m0)
				shoot_left(i, j, m1)
				shoot_up(i, j, m2)
				shoot_right(i, j, m3)

			for k in xrange(4):
					mazes[k][i][j] = 1

	#BFS
	# if m0[s_x][s_y] != 0:
	# 	return "impossible"

	qu1, qu2 = [], [] # (x, y)
	cur_step = 0
	in_qu = set() # (x, y)
	dp = [[[-1 for i in xrange(N)] for j in xrange(M)] for k in xrange(4)]
	qu1.append((s_x, s_y))

	def add_to_qu(x, y, cur_step):
		if x >= 0 and x < M and y >= 0 and y < N:
			if mazes[cur_step%4][x][y] == 0:
				if dp[cur_step%4][x][y] == -1:
					dp[cur_step%4][x][y] = cur_step
					if not (x, y) in in_qu:
						qu2.append((x, y))

	while len(qu1) != 0:
		cur_step += 1
		while len(qu1) != 0:
			cur = qu1.pop()
			x, y = cur[0], cur[1]

			#print x, y, M, N, s_x, s_y
			if maze[x][y] == "G":
				return str(cur_step-1)

			add_to_qu(x-1, y, cur_step)
			add_to_qu(x+1, y, cur_step)
			add_to_qu(x, y-1, cur_step)
			add_to_qu(x, y+1, cur_step)

		in_qu.clear()
		qu1, qu2 = qu2, qu1

	return "impossible"


if __name__ == "__main__":
	T = int(raw_input())
	for i in xrange(T):
		M, N = map(int, raw_input().split())
		maze = []
		for j in xrange(M):
			maze.append(raw_input().strip())
		print "Case #%d: %s" % (i+1, solve(maze, M, N))
#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#include <set>
#include <map>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a>b?b:a
#define GCD(a,b)  { return (b==0)?a:GCD(b,a%b);
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,n,x) for(i=x;i<n;i++)
#define BACK(i,n) for(i=n;i>=0;i--)
#define BACK_X(i,n,x) for(i=n;i>=x;i--)

typedef long long int lld;
using namespace std;
struct node{
	int x,y,move;
};
char a[102][102];
char dir[]={'^','>','v','<'};
int xx[]={-1,0,1,0};
int yy[]={0,1,0,-1};
char dead[4][102][102];
int vis[4][102][102];
int n,m;
void rotate()
{
	int i,j;
	FOR(i,n)
	{
		FOR(j,m)
		{
			if( a[i][j]=='^' ) a[i][j]='>' ;
			else if( a[i][j]=='>' ) a[i][j]='v' ;
			else if( a[i][j]=='v' ) a[i][j]='<' ;
			else if( a[i][j]=='<' ) a[i][j]='^' ;
		}
	}
}
void deadzone(int x)
{
	int i,j,k;
	FOR(i,n)
	{
		FOR(j,m)
		{
			if( dead[x][i][j]!='.') continue;
			if( a[i][j]=='^' )
			{
				dead[x][i][j]=a[i][j];
				for(k=i-1;k>=0;k--)
				{
					if( a[k][j]=='#' || a[k][j]=='^' || a[k][j]=='>' || a[k][j]=='v' || a[k][j]=='<' ) break;
					dead[x][k][j]='x';
				}
			}
			else if( a[i][j]=='>' )
			{
				dead[x][i][j]=a[i][j];
				for(k=j+1;k<m;k++)
				{
					if( a[i][k]=='#' || a[i][k]=='^' || a[i][k]=='>' || a[i][k]=='v' || a[i][k]=='<' ) break;
					dead[x][i][k]='x';
				}
			}
			else if( a[i][j]=='v' )
			{
				dead[x][i][j]=a[i][j];
				for(k=i+1;k<n;k++)
				{
					if( a[k][j]=='#' || a[k][j]=='^' || a[k][j]=='>' || a[k][j]=='v' || a[k][j]=='<' ) break;
					dead[x][k][j]='x';
				}
			}
			else if( a[i][j]=='<' )
			{
				dead[x][i][j]=a[i][j];
				for(k=j-1;k>=0;k--)
				{
					if( a[i][k]=='#' || a[i][k]=='^' || a[i][k]=='>' || a[i][k]=='v' || a[i][k]=='<' ) break;
					dead[x][i][k]='x';
				}
			}
			else dead[x][i][j]=a[i][j];
		}
	}
}
int main()
{
//	ios_base::sync_with_stdio(0); //dont use with EOF
	int t,no=0;
	int i,j,k;
	cin>>t;
	while(t--)
	{
		no++;
		cin>>n>>m;
		int ans=-1;
		FOR(i,n)
		cin>>a[i];
		FOR(i,4) FOR(j,n) FOR(k,m) dead[i][j][k]='.';
		FOR(i,4) FOR(j,n) FOR(k,m) vis[i][j][k]=0;
		FOR(i,4)
		{
			
			deadzone(i);
	/*		cout<<"\n**********\n";
			FOR(j,n)
			{
				FOR(k,m) cout<<a[j][k];
				cout<<endl;
			}
			FOR(j,n)
			{
				FOR(k,m) cout<<dead[i][j][k];
				cout<<endl;
			}
			cout<<"\n**********\n";
			*/
			rotate();
		}
		queue<node> q;
		FOR(i,n)
		{
			FOR(j,m)
			{
				if(a[i][j]=='S' )
				{
					q.push( (node){i,j,0} ); 
				}
			}
		}
		
		while(!q.empty() )
		{
			node tmp=q.front();
			q.pop();
			int x=tmp.x; int y=tmp.y; int move=tmp.move;
		//	cout<<x<<" "<<y<<" "<<move<<" "<<vis[move%4][x][y]<<" "<<dead[move%4][x][y]<<endl;
			if( move!=0 && (vis[move%4][x][y]==1 || dead[ move%4][x][y]=='x' ) ) continue;
			vis[move%4][x][y]=1;
			if( dead[move%4][x][y]=='G' )
			{
				ans=move; break;
			}
			else
			{
				FOR(i,4)
				{
					int X=x+xx[i]; int Y=y+yy[i];
					if( X>=0 && Y>=0 && X<n && Y<m && (a[X][Y]=='.' || a[X][Y]=='G'|| a[X][Y]=='S') )
					q.push( (node) {X,Y,move+1} );
				}
			}
		}
		if(ans!=-1)
		cout<<"Case #"<<no<<": "<<ans<<endl;
		else cout<<"Case #"<<no<<": impossible\n";
		
	}
	return 0;
}

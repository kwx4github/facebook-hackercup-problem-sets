#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

struct Node
{
    int x, y, z;
    Node(int _x = 0, int _y = 0, int _z = 0): x(_x), y(_y), z(_z) { }
};

char s[4][202][202];
int dp[4][202][202];
const int dx[4] = {0, 0, -1, 1}, dy[4] = {1, -1, 0, 0};

char next(char pre)
{
    if( pre == '>' ) return 'v';
    if( pre == 'v' ) return '<';
    if( pre == '<' ) return '^';
    return '>';
}

int main()
{
    int cases;
    scanf("%d", &cases);
    for( int tt = 0; tt < cases; tt++ )
    {
        int n, m;
        Node st, ed;
        scanf("%d%d", &n, &m);
        for( int i = 0; i < 4; i++ )
            for( int j = 0; j < n; j++ )
                for( int k = 0; k < m; k++ ) dp[i][j][k] = -1;
        for( int i = 0; i < n; i++ )
        {
            scanf("%s", s[0][i]);
            for( int j = 0; j < m; j++ )
            {
                if( s[0][i][j] == 'S' )
                {
                    st = Node(i, j, 0);
                    s[0][i][j] = '.';
                }
                else if( s[0][i][j] == 'G' )
                {
                    ed = Node(i, j, 0);
                    s[0][i][j] = '.';
                }
            }
        }
        for( int i = 1; i < 4; i++ )
        {
            for( int j = 0; j < n; j++ )
                for( int k = 0; k < m; k++ )
                {
                    char tt = s[i - 1][j][k];
                    if( tt == '.' || tt == '#' ) s[i][j][k] = tt;
                    else s[i][j][k] = next(tt);
                }
        }
        for( int i = 0; i < 4; i++ )
            for( int j = 0; j < n; j++ )
                for( int k = 0; k < m; k++ )
                {
                    if( s[i][j][k] == '<' )
                    {
                        for( int l = k - 1; l >= 0; l-- )
                        {
                            if( s[i][j][l] != '.' ) break;
                            s[i][j][l] = '#';
                        }
                    }
                    else if( s[i][j][k] == '^' )
                    {
                        for( int l = j - 1; l >= 0; l-- )
                        {
                            if( s[i][l][k] != '.' ) break;
                            s[i][l][k] = '#';
                        }
                    }
                    else if( s[i][j][k] == '>' )
                    {
                        for( int l = k + 1; l < m; l++ )
                        {
                            if( s[i][j][l] != '.' ) break;
                            s[i][j][l] = '#';
                        }
                    }
                    else if( s[i][j][k] == 'v' )
                    {
                        for( int l = j + 1; l < n; l++ )
                        {
                            if( s[i][l][k] != '.' ) break;
                            s[i][l][k] = '#';
                        }
                    }
                }
        dp[st.z][st.x][st.y] = 0;
        queue<Node> q;
        q.push(st);
        while( !q.empty() )
        {
            Node tmp = q.front();
            q.pop();
            for( int i = 0; i < 4; i++ )
            {
                Node nn(tmp.x + dx[i], tmp.y + dy[i], (tmp.z + 1) % 4);
                if( nn.x >= 0 && nn.x < n && nn.y >= 0 && nn.y < m && s[nn.z][nn.x][nn.y] == '.' && dp[nn.z][nn.x][nn.y] == -1 )
                {
                    dp[nn.z][nn.x][nn.y] = dp[tmp.z][tmp.x][tmp.y] + 1;
                    q.push(nn);
                }
            }
        }
        int ans = 1 << 28;
        for( int i = 0; i < 4; i++ )
            if( dp[i][ed.x][ed.y] != -1 ) ans = min(ans, dp[i][ed.x][ed.y]);
        if( ans == (1 << 28) ) printf("Case #%d: impossible\n", tt + 1);
        else printf("Case #%d: %d\n", tt + 1, ans);
    }
    return 0;
}

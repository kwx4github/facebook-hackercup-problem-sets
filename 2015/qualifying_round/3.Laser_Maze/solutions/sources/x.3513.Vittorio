package qualification;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayDeque;
import java.util.ResourceBundle.Control;
import java.util.Scanner;
import java.util.Stack;

public class exeThree {
	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		Scanner input = new Scanner(new File("input"));
		BufferedWriter output = new BufferedWriter(new FileWriter(new File("output")));
		int T = input.nextInt(); input.nextLine();
		int [][][] matrix = new int[100][100][4];
		char[][] maze = new char[100][100];
		for ( int i = 0; i < T ; i++)
		{
			int M = input.nextInt();
			int N = input.nextInt();
			int Gx=0,Gy=0;
			input.nextLine();
			Stack<Integer> Ns = new Stack<Integer>();
			Stack<Integer> Ms = new Stack<Integer>();
			Stack<Integer> periods = new Stack<Integer>();
			for ( int index = 0; index < M; index++)
			{
				for (int indexI = 0; indexI < N; indexI++)
				{
					for (int indexII = 0; indexII < 4; indexII++)
					{
						matrix[index][indexI][indexII] = -1;
					}
				}
			}
			for ( int index = 0; index < M; index++)
			{
				String string = input.nextLine();
				for (int indexI = 0; indexI < N; indexI++)
				{
					maze[index][indexI] = string.charAt(indexI);
					if ( maze[index][indexI] == 'S')
					{
						Ms.push(Integer.valueOf(index));
						Ns.push(Integer.valueOf(indexI));
						periods.push(Integer.valueOf(0));
						matrix[index][indexI][0] = 0;
					}
					if ( maze[index][indexI] == 'G')
					{
						Gx = index;
						Gy = indexI;
					}
				}
			}
			
			while ( !Ms.isEmpty())
			{
				int m = Ms.pop().intValue();
				int n = Ns.pop().intValue();
				int period = periods.pop().intValue();
				int time = matrix[m][n][period];
				if ( control(m,n,time,period,maze,M,N))
				{
					int period1 = (period+1)%4;
					if ( n > 0)
					{
						if ( maze[m][n-1] == '.' || maze[m][n-1] == 'S' || maze[m][n-1] == 'G')
						{
							if ( matrix[m][n-1][period1] == -1 || matrix[m][n-1][period1] > time+1 )
							{
								Ms.push(Integer.valueOf(m));
								Ns.push(Integer.valueOf(n-1));
								periods.push(Integer.valueOf(period1));
								matrix[m][n-1][period1] = time+1;
							}
						}
					}
					if ( m > 0)
					{
						if ( maze[m-1][n] == '.' || maze[m-1][n] == 'S' || maze[m-1][n] == 'G')
						{
							if ( matrix[m-1][n][period1] == -1 || matrix[m-1][n][period1] > time+1 )
							{
								Ms.push(Integer.valueOf(m-1));
								Ns.push(Integer.valueOf(n));
								periods.push(Integer.valueOf(period1));
								matrix[m-1][n][period1] = time+1;
							}
						}
					}
					if ( n < N-1)
					{
						if ( maze[m][n+1] == '.' || maze[m][n+1] == 'S' || maze[m][n+1] == 'G')
						{
							if ( matrix[m][n+1][period1] == -1 || matrix[m][n+1][period1] > time+1 )
							{
								Ms.push(Integer.valueOf(m));
								Ns.push(Integer.valueOf(n+1));
								periods.push(Integer.valueOf(period1));
								matrix[m][n+1][period1] = time+1;
							}
						}
					}
					if ( m < M-1)
					{
						if ( maze[m+1][n] == '.' || maze[m+1][n] == 'S' || maze[m+1][n] == 'G')
						{
							if ( matrix[m+1][n][period1] == -1 || matrix[m+1][n][period1] > time+1 )
							{
								Ms.push(Integer.valueOf(m+1));
								Ns.push(Integer.valueOf(n));
								periods.push(Integer.valueOf(period1));
								matrix[m+1][n][period1] = time+1;
							}
						}
					}
				}
			}
			int ans = -1;
			for ( int in = 0; in < 4; in++)
			{
				if ( matrix[Gx][Gy][in] != -1)
				{
					if ( control(Gx,Gy,matrix[Gx][Gy][in],in, maze,M,N) && (matrix[Gx][Gy][in] < ans || ans == -1 ))
					{
						ans = matrix[Gx][Gy][in];
					}
				}
			}
			if ( ans != -1)
			{
				output.write("Case #"+(i+1)+": "+ans);
			}
			else
			{
				output.write("Case #"+(i+1)+": impossible");
			}
			output.newLine();
			
		}
		output.flush();
		input.close();
		output.close();
	}
	
	
	static boolean control ( int m, int n,int time, int p, char[][] maze, int M, int N)
	{
		if ( time == 0)
		{
			return true;
		}
		boolean ret = true;
		
		for ( int i = m-1; i >= 0; i--)
		{
			if ( maze[i][n] == '#')
			{
				break;
			}
			
			if ( maze[i][n] == 'v' && p == 0)
			{
				ret = false;
			}
			if ( maze[i][n] == '>' && p == 1)
			{
				ret = false;
			}
			if ( maze[i][n] == '^' && p == 2)
			{
				ret = false;
			}
			if ( maze[i][n] == '<' && p == 3)
			{
				ret = false;
			}
		}
		for ( int i = n-1; i >= 0; i--)
		{
			if ( maze[m][i] == '#')
			{
				break;
			}
			
			if ( maze[m][i] == '>' && p == 0)
			{
				ret = false;
			}
			if ( maze[m][i] == '^' && p == 1)
			{
				ret = false;
			}
			if ( maze[m][i] == '<' && p == 2)
			{
				ret = false;
			}
			if ( maze[m][i] == 'v' && p == 3)
			{
				ret = false;
			}
		}
		for ( int i = m+1; i < M; i++)
		{
			if ( maze[i][n] == '#')
			{
				break;
			}
			
			if ( maze[i][n] == '^' && p == 0)
			{
				ret = false;
			}
			if ( maze[i][n] == '<' && p == 1)
			{
				ret = false;
			}
			if ( maze[i][n] == 'v' && p == 2)
			{
				ret = false;
			}
			if ( maze[i][n] == '>' && p == 3)
			{
				ret = false;
			}
		}
		for ( int i = n+1; i < N; i++)
		{
			if ( maze[m][i] == '#')
			{
				break;
			}
			
			if ( maze[m][i] == '<' && p == 0)
			{
				ret = false;
			}
			if ( maze[m][i] == 'v' && p == 1)
			{
				ret = false;
			}
			if ( maze[m][i] == '>' && p == 2)
			{
				ret = false;
			}
			if ( maze[m][i] == '^' && p == 3)
			{
				ret = false;
			}
		}
		return ret;
	}
}

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <vector>
#include <algorithm>
#include <queue>
#define SZ(x) ((int)(x).size())
#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
using namespace std;
typedef long long LL;

char a[105][105];
int m, n, cs, ex, ey;

bool inside(int x, int y) {
  return 0<=x && x<m && 0<=y && y<n;
}

int used[105][105][4], flag, ans;
queue<int> Q;
void PUSH(int x, int y, int t) {
  Q.push(x); Q.push(y), Q.push(t);
}
void POP(int &x, int &y, int &t) {
  if (x == ex && y == ey) { flag = 1; ans = t; }
  x = Q.front(); Q.pop();
  y = Q.front(); Q.pop();
  t = Q.front(); Q.pop();
}
int getidx(char x) {
  if(x=='<') return 0;
  if(x=='^') return 1;
  if(x=='>') return 2;
  if(x=='v') return 3;
  return -1;
}

bool test_and_set(int x, int y, int d) {
  if(!inside(x, y)) return false;
  if(used[x][y][d%4] == cs) return false;
  used[x][y][d%4] = cs;
  if(a[x][y] != '.') return false;
  return true;
}

void solve() {
  ++cs;
  scanf("%d%d", &m, &n);
  for(int i=0;i<m;i++) scanf("%s", a[i]);
  Q = queue<int>();
  for(int i=0;i<m;i++)
    for(int j=0;j<n;j++)
      if(a[i][j]=='S') {
        PUSH(i, j, 0);
        a[i][j] = '.';
      } else if (a[i][j] == 'G') {
        ex = i; ey = j;
        a[i][j] = '.';
      }
  for(int i=0;i<m;i++)
    for(int j=0;j<n;j++) {
      if(a[i][j] == '#') {
        for(int z=0;z<4;z++) used[i][j][z] = cs;

      } else if(a[i][j]!='.'){
        int idx = getidx(a[i][j]);
        const int dx[4] = {0, -1, 0, 1};
        const int dy[4] = {-1, 0, 1, 0};
        for(int z=0;z<4;z++, idx=(idx+1)%4) {
          int nx = i+dx[idx], ny = j+dy[idx];
          while(inside(nx, ny) && a[nx][ny] == '.') {
            used[nx][ny][z] = cs;
            nx += dx[idx];
            ny += dy[idx];
          }
        }
      }
    }
  flag = 0;
  while(!Q.empty() && flag==0) {
    int x, y, d;
    POP(x, y, d);
    if (test_and_set(x, y+1, d+1)) PUSH(x, y+1, d+1);
    if (test_and_set(x, y-1, d+1)) PUSH(x, y-1, d+1);
    if (test_and_set(x+1, y, d+1)) PUSH(x+1, y, d+1);
    if (test_and_set(x-1, y, d+1)) PUSH(x-1, y, d+1);
  }
  printf("Case #%d: ", cs);
  if(flag) printf("%d\n", ans);
  else puts("impossible");
}

int main(void) {
  int T;
  scanf("%d", &T);
  while(T--) solve();
  return 0;
}

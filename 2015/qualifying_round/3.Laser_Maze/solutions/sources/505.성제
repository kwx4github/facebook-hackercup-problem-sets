#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<map>
#include<queue>
#include<functional>
#include<utility>
#include<sstream>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef std::tuple<int,int,int,int> Node;


char table[111][111];
int isSteppable[4][111][111];

 // dir of R, D, L, U and it is clockwise.
 //          >, v, <, ^ - 0 1 2 3
int dy[4] = {0,1,0,-1};
int dx[4] = {1,0,-1,0};

int main(){
  int testCase; cin >> testCase;
  for(int tc=1;tc<=testCase;++tc){
    int h, w, si, sj, goali, goalj;
    
    cin>>h>>w;

    for(int i=0;i<h;++i) cin >> table[i];

    memset(isSteppable, 1, sizeof(isSteppable));
    for(int d=0;d<4;++d){
      for(int i=0;i<h;++i)for(int j=0;j<w;++j){
        int dir = -1;
        switch( table[i][j] ){ // dir : turret's initial state.
          case'>':dir=0;break;
          case'v':dir=1;break;
          case'<':dir=2;break;
          case'^':dir=3;break;
        }
        if(table[i][j] == '#' || dir >= 0) isSteppable[d][i][j] = 0;// unsteppable: Wall or Laser Turret.
        if(table[i][j] == 'S'){
          si =i;
          sj =j;
        }
        if(table[i][j] == 'G'){
          goali = i;
          goalj = j;
        }
        if(dir == -1) continue; // 'not turret' : no calc
        dir = (dir + d)%4; // turret's Current State.
        int gi = i + dy[dir], gj = j + dx[dir];
        while(0 <= gi && gi < h && 0 <= gj && gj < w && 
            (table[gi][gj] == '.' || table[gi][gj] == 'G' || table[gi][gj] == 'S')){
          isSteppable[d][gi][gj] = 0; // unSteppable by LASER.
          gi += dy[dir];
          gj += dx[dir];
        }
      }
    }
    int ans=-1;

    // go
    queue< Node > q;
    q.push( make_tuple(0, si, sj, 0) );

    int visit[4][111][111];
    memset(visit, 0, sizeof(visit));

    while(!q.empty()){
      auto cur = q.front(); q.pop();
      int step = get<0>(cur);
      int ci = get<1>(cur);
      int cj = get<2>(cur);
      int cd = get<3>(cur);
      if( 0 <= ci && ci < h && 0 <= cj && cj < w ){
        //calculate except first time
        if( step && ! isSteppable[cd][ci][cj] ) continue; // this is wall or turret or Laser.
      }
      else continue; // out of maze
      if( visit[cd][ci][cj] ) continue;
      //printf("%d : %d,%d - %d \n",step,ci,cj,cd);
      visit[cd][ci][cj] = 1;

      if(ci == goali && cj == goalj){
        ans = step;
        break;
      }

      for(int k=0;k<4;++k){
        auto next = make_tuple( step+1 , ci+dy[k], cj+dx[k], (cd+1)%4);
        q.push(next);
      }
    }
    printf("Case #%d: ", tc);
    if(ans == -1) printf("impossible\n");
    else printf("%d\n", ans);
  }
  return 0;
}








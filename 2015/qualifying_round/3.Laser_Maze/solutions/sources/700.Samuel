#include <stdio.h>
#include <queue>
#include <string.h>
using namespace std;
// ^ = 0, > = 1, v = 2, < = 3
class node{
	public:
	int x, y, l, s;
	node(){}
	node(int a, int b, int c, int d){
		x = a; y = b; l = c; s = d;
	}
};
int movx[] = {-1, 0, 1, 0};
int movy[] = {0, 1, 0, -1};
char maze[110][110];
bool visited[5][110][110];
bool laser[5][110][110];
int n, m, t;
void lasers(int x, int y){
	int dir;
	if(maze[x][y]=='^') dir = 0;
	else if(maze[x][y]=='>') dir = 1;
	else if(maze[x][y]=='v') dir = 2;
	else dir = 3;
	int ni, nj;
	for(int i=0; i<4; i++){
		ni = x; nj = y;
		while(ni>=0 && ni<n && nj>=0 && nj<m && maze[ni][nj]!='#'){
			if((maze[ni][nj]=='^' || maze[ni][nj]=='>' || maze[ni][nj]=='v' || maze[ni][nj]=='<') && !(ni==x && nj==y)) break;
			laser[i][ni][nj] = true;
			ni+=movx[dir]; nj+=movy[dir];
		}
		dir = (dir+1)%4;
	}
}
int bfs(int x, int y){
	queue<node> q;
	q.push(node(x,y,0,0));
	visited[0][x][y] = true;
	while(!q.empty()){
		node cur = q.front(); q.pop();
		if(maze[cur.x][cur.y]=='G' && !laser[cur.l][cur.x][cur.y]) return cur.s;
		for(int i=0; i<4; i++){
			int ni = cur.x+movx[i];
			int nj = cur.y+movy[i];
			if(ni<0 || ni>=n || nj<0 || nj>=m) continue;
			if(maze[ni][nj]=='#') continue;
			if(laser[(cur.l+1)%4][ni][nj]) continue;
			if(visited[(cur.l+1)%4][ni][nj]) continue;
			visited[(cur.l+1)%4][ni][nj] = true;
			q.push(node(ni, nj, (cur.l+1)%4, cur.s+1));
		}
	}
	return -1;
}
int main(){
	freopen("laser_maze.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	scanf("%d", &t);
	for(int ind=1; ind<=t; ind++){
		printf("Case #%d: ", ind);
		scanf("%d %d", &n, &m);
		memset(visited, false, sizeof(visited));
		memset(laser, false, sizeof(laser));
		for(int i=0; i<n; i++) scanf("%s", maze[i]);
		int sx, sy;
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if(maze[i][j]=='^' || maze[i][j]=='>' || maze[i][j]=='v' || maze[i][j]=='<') lasers(i,j);
				else if(maze[i][j]=='S'){	sx = i; sy = j;}
			}
		}
		int ans = bfs(sx,sy);
		if(ans==-1) printf("impossible\n");
		else printf("%d\n", ans);
	}
	return 0;
}
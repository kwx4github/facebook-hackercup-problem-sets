#include <iostream>
#include <queue>
using namespace std;

char maze[100][100];
bool blocked[100][100][4];
bool visited[100][100][4];

struct pos {
	int r;
	int c;
	int t;
};

int main() {
	int T;
	cin >> T;
	for (int t = 1; t <= T; t++) {
		int M, N;
		cin >> M >> N;
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				cin >> maze[i][j];
			}
		}

		for (int d = 0; d < 4; d++) {
			for (int i = 0; i < M; i++) {
				for (int j = 0; j < N; j++) {
					visited[i][j][d] = false;
					blocked[i][j][d] = true;

					switch (maze[i][j]) {
						case '<':
							maze[i][j] = '^';
							break;
						case '^':
							maze[i][j] = '>';
							break;
						case '>':
							maze[i][j] = 'v';
							break;
						case 'v':
							maze[i][j] = '<';
							break;
						case '#':
							break;
						default:
							blocked[i][j][d] = false;
					}
				}
			}

			for (int i = 0; i < M; i++) {
				bool deadly = false;
				for (int j = 0; j < N; j++) {
					switch (maze[i][j]) {
						case '>':
							deadly = true;
							break;
						case '<':
						case '^':
						case 'v':
						case '#':
							deadly = false;
							break;
					}
					if (deadly) blocked[i][j][d] = true;
				}
				deadly = false;
				for (int j = N-1; j >= 0; j--) {
					switch (maze[i][j]) {
						case '<':
							deadly = true;
							break;
						case '>':
						case '^':
						case 'v':
						case '#':
							deadly = false;
							break;
					}
					if (deadly) blocked[i][j][d] = true;
				}
			}

			for (int j = 0; j < N; j++) {
				bool deadly = false;
				for (int i = 0; i < M; i++) {
					switch (maze[i][j]) {
						case 'v':
							deadly = true;
							break;
						case '<':
						case '>':
						case '^':
						case '#':
							deadly = false;
							break;
					}
					if (deadly) blocked[i][j][d] = true;
				}
				deadly = false;
				for (int i = M-1; i >= 0; i--) {
					switch (maze[i][j]) {
						case '^':
							deadly = true;
							break;
						case '<':
						case '>':
						case 'v':
						case '#':
							deadly = false;
							break;
					}
					if (deadly) blocked[i][j][d] = true;
				}
			}
		}

		queue<pos> toProcess;
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (maze[i][j] == 'S') {
					visited[i][j][0] = true;
					toProcess.push({ i, j, 0 });
				}
			}
		}
		cout << "Case #" << t << ": ";
		while (!toProcess.empty()) {
			pos p = toProcess.front();
			if (maze[p.r][p.c] == 'G') {
				cout << p.t << '\n';
				break;
			}
			toProcess.pop();

			if (p.r > 0 && !blocked[p.r-1][p.c][p.t%4] && !visited[p.r-1][p.c][(p.t+1)%4]) {
				visited[p.r-1][p.c][(p.t+1)%4] = true;
				toProcess.push({p.r-1, p.c, p.t+1});
			}
			if (p.r < M-1 && !blocked[p.r+1][p.c][p.t%4] && !visited[p.r+1][p.c][(p.t+1)%4]) {
				visited[p.r+1][p.c][(p.t+1)%4] = true;
				toProcess.push({p.r+1, p.c, p.t+1});
			}
			if (p.c > 0 && !blocked[p.r][p.c-1][p.t%4] && !visited[p.r][p.c-1][(p.t+1)%4]) {
				visited[p.r][p.c-1][(p.t+1)%4] = true;
				toProcess.push({p.r, p.c-1, p.t+1});
			}
			if (p.c < N-1 && !blocked[p.r][p.c+1][p.t%4] && !visited[p.r][p.c+1][(p.t+1)%4]) {
				visited[p.r][p.c+1][(p.t+1)%4] = true;
				toProcess.push({p.r, p.c+1, p.t+1});
			}
		}
		if (toProcess.empty()) cout << "impossible\n";
	}
	return 0;
}

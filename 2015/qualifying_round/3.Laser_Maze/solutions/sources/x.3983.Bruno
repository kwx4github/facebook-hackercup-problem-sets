#include <bits/stdc++.h>

using namespace std;
#define MAX 110

struct node
{
	int x,y,p;
	node(){}
	node(int xx, int yy, int pp)
	{
		x = xx;
		y = yy;
		p = pp;
	}

	bool operator < (node a) const
	{
		return p > a.p;
	}
};

string s[MAX];
int t,n,m;
int dis[MAX][MAX][4];
int table[4][2] = {
	{-1,0},
	{1,0},
	{0,-1},
	{0,1}
};

bool isTurrent(char v)
{
	return v == '<' || v == '>' || v == '^' || v == 'v';
}

int getNum(char v)
{
	int tmp;
	if (v == '>')
	{
		tmp = 1;
	}
	else if (v == 'v')
	{
		tmp = 2;
	}
	else if (v == '<')
	{
		tmp = 3;
	}
	else
	{
		tmp = 0;
	}
	return tmp;
}

bool isOk(int currx, int curry)
{
	if (currx < 0 || curry < 0)
	{
		return false;
	}
	
	if (currx >= m || curry >= n)
	{
		return false;
	}
	return true;
}
bool isValid(int currx, int curry, int st)
{
	
	if (s[currx][curry] == '#')
	{
		return false;
	}

	if (isTurrent(s[currx][curry]))
	{
		return false;
	}

	st %= 4;
	for (int i = currx; i >= 0; --i)
	{
		if (s[i][curry] == '#')
			break;

		if ( isTurrent(s[i][curry]) )
		{
			int tmp = getNum(s[i][curry]);
			tmp = (tmp + st)%4;
			if (tmp == 2)
			{
				return false;
			}
		}
	}

	for (int i = currx; i < m; ++i)
	{
		if (s[i][curry] == '#')
			break;

		if ( isTurrent(s[i][curry]) )
		{
			int tmp = getNum(s[i][curry]);
			tmp = (tmp + st)%4;

			if (tmp == 0)
			{
				return false;
			}
		}
	}

	for (int i = curry; i >= 0; --i)
	{
		if (s[currx][i] == '#')
			break;

		if ( isTurrent(s[currx][i]) )
		{
			int tmp = getNum(s[currx][i]);
			tmp = (tmp + st)%4;

			if (tmp == 1)
			{
				return false;
			}
		}
	}

	for (int i = curry; i < n; ++i)
	{
		if (s[currx][i] == '#')
			break;

		if ( isTurrent(s[currx][i]) )
		{
			int tmp = getNum(s[currx][i]);
			tmp = (tmp + st)%4;

			if (tmp == 3)
			{
				return false;
			}
		}
	}

	return true;
}

int dijkstra(int currx, int curry)
{
	
	priority_queue<node> pq;
	for (int i = 0; i < MAX; ++i)
	{
		for (int j = 0; j < MAX; ++j)
		{
			for (int k = 0; k < 4; ++k)
			{
				dis[i][j][k] = 0x3f3f3f3f;
			}
		}
	}

	node v(currx,curry,0);
	dis[v.x][v.y][0] = 0;
	pq.push(v);

	while (!pq.empty())
	{
		node v = pq.top(); pq.pop();

		if (!isOk(v.x,v.y))
		{
			continue;
		}

		if (s[v.x][v.y] != 'S' && !isValid(v.x, v.y, v.p))
		{
			continue;
		}

		if (dis[v.x][v.y][v.p%4] != v.p)
		{
			continue;
		}

		if (s[v.x][v.y] == 'G')
		{
			return v.p;
		}

		for (int i = 0; i < 4; ++i)
		{
			node u = v;
			u.x += table[i][0];
			u.y += table[i][1];
			u.p++;

			if (isOk(u.x,u.y) && dis[u.x][u.y][u.p%4] > u.p)
			{
				dis[u.x][u.y][u.p%4] = u.p;
				pq.push(u);
			}
		}
	}

	return -1;

}

int main(void)
{
	cin >> t;

	for (int cases = 1; cases <= t; ++cases)
	{
		cin >> m >> n;

		for (int i = 0; i < m; ++i)
		{
			cin >> s[i];
		}

		for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				if (s[i][j] == 'S')
				{
					int ret = dijkstra(i,j);

					if (ret == -1)
					{
						cout << "Case #" << cases << ": impossible" << "\n";
					}
					else
					{
						cout << "Case #" << cases << ": " << ret << "\n";	
					}
					break;
				}
			}
		}

	}
	return 0;
}
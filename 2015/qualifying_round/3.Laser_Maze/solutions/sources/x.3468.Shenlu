package FHC;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class C {
	public static void main(String[] args) throws IOException,
			FileNotFoundException {
		String input = "laser_maze.txt";
		String output = "laser_maze.out";

		Scanner scan = new Scanner(new BufferedReader(new FileReader(input)));
		PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(
				output)));

		int T = Integer.parseInt(scan.nextLine());
		for (int t = 1; t <= T; t++) {
			String[] data = scan.nextLine().split(" ");
			M = Integer.parseInt(data[0]);
			N = Integer.parseInt(data[1]);
			char[][] grid = new char[M][N];
			for (int i = 0; i < M; i++)
				grid[i] = scan.nextLine().toCharArray();
			char[][] dp = new char[M][N];
			for (int i = 0; i < M; i++)
				for (int j = 0; j < N; j++)
					if (grid[i][j] == 'S')
						dp[i][j] = 'S';
			boolean found = false;
			loop: for (int step = 1; step <= (M + N) * 3; step++) {
				char[][] next = new char[M][N];
				for (int i = 0; i < M; i++)
					for (int j = 0; j < N; j++)
						if (grid[i][j] != '#' && grid[i][j] != '^'
								&& grid[i][j] != '>' && grid[i][j] != 'v'
								&& grid[i][j] != '<') {
							if ((i > 0 && dp[i - 1][j] == 'S')
									|| (i + 1 < M && dp[i + 1][j] == 'S')
									|| (j > 0 && dp[i][j - 1] == 'S')
									|| (j + 1 < N && dp[i][j + 1] == 'S')) {
								if (check(step, i, j, grid)) {
									next[i][j] = 'S';
									if (grid[i][j] == 'G') {
										found = true;
										pw.println("Case #" + t + ": " + step);
										break loop;
									}
								}
							}
						}
				dp = next;
			}
			if (!found)
				pw.println("Case #" + t + ": impossible");
		}

		scan.close();
		pw.close();
	}

	private static int M, N;
	private static char[] turn = { '^', '>', 'v', '<' };

	public static boolean check(int step, int r, int c, char[][] grid) {
		// search above
		for (int i = r - 1; i >= 0; i--)
			if (grid[i][c] == '#')
				break;
			else {
				int index = -1;
				for (int k = 0; k < 4; k++)
					if (grid[i][c] == turn[k])
						index = k;
				if (index != -1) {
					index = (index + step) % 4;
					if (turn[index] == 'v')
						return false;
				}
			}
		// search right
		for (int j = c + 1; j < N; j++)
			if (grid[r][j] == '#')
				break;
			else {
				int index = -1;
				for (int k = 0; k < 4; k++)
					if (grid[r][j] == turn[k])
						index = k;
				if (index != -1) {
					index = (index + step) % 4;
					if (turn[index] == '<')
						return false;
				}
			}
		// search below
		for (int i = r + 1; i < M; i++)
			if (grid[i][c] == '#')
				break;
			else {
				int index = -1;
				for (int k = 0; k < 4; k++)
					if (grid[i][c] == turn[k])
						index = k;
				if (index != -1) {
					index = (index + step) % 4;
					if (turn[index] == '^')
						return false;
				}
			}
		// search left
		for (int j = c - 1; j >= 0; j--)
			if (grid[r][j] == '#')
				break;
			else {
				int index = -1;
				for (int k = 0; k < 4; k++)
					if (grid[r][j] == turn[k])
						index = k;
				if (index != -1) {
					index = (index + step) % 4;
					if (turn[index] == '>')
						return false;
				}
			}
		// safe
		return true;
	}
}

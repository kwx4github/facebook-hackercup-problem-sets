#include <bits/stdc++.h>

using namespace std;

// ^ > v <
const int dx[] = {0, 1, 0, -1};
const int dy[] = {-1, 0, 1, 0};
const int INF = (1 << 30);

struct State {
  int x, y, d;
  State(int x, int y, int d): x(x), y(y), d(d) {}
};

int m, n;
int sx, sy, gx, gy;
char stage[100][100][4];
int minCost[100][100][4];

void init() {
  for (int k = 0; k < 4; k++) {
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        bool flg = false;
        int idx = k;
        string dir = "^>v<";
        for (int l = 0; l < 4; l++) {
          if (stage[i][j][k] == dir[l]) {
            flg = true;
            idx = (idx + l) % 4;
          }
        }
        if (!flg) continue;
        int ny = i;
        int nx = j;
        while (1) {
          ny += dy[idx];
          nx += dx[idx];
          if (!(0 <= ny && ny < m)) break;
          if (!(0 <= nx && nx < n)) break;
          if (stage[ny][nx][k] != '.' && stage[ny][nx][k] != 'L') break;
          stage[ny][nx][k] = 'L';
        }
      }
    }
  }
}

int bfs() {
  init();
  
  queue<State> Q;
  Q.push(State(sx, sy, 0));
  minCost[sy][sx][0] = 0;
  
  while (!Q.empty()) {
    int y = Q.front().y;
    int x = Q.front().x;
    int d = Q.front().d;
    Q.pop();

    for (int k = 0; k < 4; k++) {
      int ny = y + dy[k];
      int nx = x + dx[k];
      int nd = (d + 1) % 4;
      if (!(0 <= ny && ny < m)) continue;
      if (!(0 <= nx && nx < n)) continue;
      if (stage[ny][nx][nd] != '.') continue;
      if (minCost[y][x][d] + 1 >= minCost[ny][nx][nd]) continue;
      minCost[ny][nx][nd] = minCost[y][x][d] + 1;
      Q.push(State(nx, ny, nd));
    }
  }

  int res = INF;
  for (int k = 0; k < 4; k++) {
    res = min(res, minCost[gy][gx][k]);
  }
  return res;
}

int main() {
  int T;
  cin >> T;

  for (int tc = 1; tc <= T; tc++) {
    cin >> m >> n;
    
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        char ch;
        cin >> ch;
        if (ch == 'S') {
          sy = i;
          sx = j;
          ch = '.';
        } else if (ch == 'G') {
          gy = i;
          gx = j;
          ch = '.';
        }
        for (int k = 0; k < 4; k++) {
          stage[i][j][k] = ch;
          minCost[i][j][k] = INF;
        }
      }
    }
    
    int ans = bfs();
    cout << "Case #" << tc << ": ";
    if (ans == INF) cout << "impossible" << endl;
    else cout << ans << endl;
  }
  
  return 0;
}

#include <iostream>
#include <cassert>
#include <queue>
#include <cstring>

using namespace std;

struct state {
	int x, y, t;
};

int M, N;
char maze[200][200];
int safe[200][200];
bool pushed[200][200][4];

int dx[] = {0,1,0,-1};
int dy[] = {-1,0,1,0};
char laser[] = {'>', '^', '<', 'v'};

int isLaser(char c) {
	for (int i = 0; i < 4; i++)
		if (laser[i] == c) return i;
	return -1;
}

bool isEmpty(char c) {
	return c == '.' || c == 'S' || c == 'G';
}

bool outOfBounds(int x, int y) {
	return x < 0 || x >= M || y < 0 || y >= N;
}

int findSafe(int i, int j) {
	if (!isEmpty(maze[i][j])) return 0;
	int safe = 15; // binair: 1111
	for (int d = 0; d < 4; d++) {
		int x = i;
		int y = j;
		while (!outOfBounds(x, y)) {
			int laserType = isLaser(maze[x][y]);
			if (laserType != -1) {
				int changeBit = (laserType + 4 - d) % 4;
				safe = safe & (~(1 << changeBit));
				break;
			}
			else if (maze[x][y] == '#') {
				break;
			}
			assert(isEmpty(maze[x][y]));
			x += dx[d];
			y += dy[d];
		}
	}
	return safe;
}

void doDebugOutput() {
	for (int d = 0; d < 4; d++) {
		cerr << endl << "Maze after " << d << " (mod 4) time steps:" << endl;
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (isEmpty(maze[i][j])) {
					if (safe[i][j] & (1 << d)) cerr << maze[i][j];
					else cerr << '*';
				}
				else if (maze[i][j] == '#')
					cerr << '#';
				else {
					int laserType = isLaser(maze[i][j]);
					assert(laserType != -1);
					cerr << laser[(laserType + 4 - d) % 4];
				}
			}
			cerr << endl;
		}
	}
}

queue<state> q;
void pushState(int x, int y, int t) {
	if (!pushed[x][y][t % 4])
		q.push((state) {x, y, t});
	pushed[x][y][t % 4] = true;
}

void solve() {
	cin >> M >> N;
	assert(M >= 1 && M <= 100);
	assert(N >= 1 && N <= 100);
	for (int i = 0; i < M; i++) {
		cin >> maze[i];
	}
	int beginX = -1;
	int beginY = -1;
	int eindX = -1;
	int eindY = -1;
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			safe[i][j] = findSafe(i, j);
			if (maze[i][j] == 'S') {
				assert(beginX == -1 && beginY == -1);
				beginX = i;
				beginY = j;
			}
			if (maze[i][j] == 'G') {
				assert(eindX == -1 && eindY == -1);
				eindX = i;
				eindY = j;
			}
		}
	}
	assert(beginX != -1 && beginY != -1);
	assert(eindX != -1 && eindY != -1);
	//doDebugOutput();
	memset(pushed, 0, sizeof pushed);
	while (!q.empty()) q.pop();
	pushState(beginX, beginY, 0);
	while (!q.empty()) {
		state cur = q.front();
		q.pop();
		assert(!outOfBounds(cur.x, cur.y));
		if (maze[cur.x][cur.y] == 'G') {
			assert(cur.x == eindX && cur.y == eindY);
			cout << cur.t << endl;
			return;
		}
		assert(cur.x != eindX || cur.y != eindY);
		for (int d = 0; d < 4; d++) {
			int newX = cur.x + dx[d];
			int newY = cur.y + dy[d];
			if (outOfBounds(newX, newY)) continue;
			int newT = cur.t + 1;
			if (safe[newX][newY] & (1 << (newT % 4)))
				pushState(newX, newY, newT);
		}
	}
	cout << "impossible" << endl;
}

int main() {
	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		cout << "Case #" << (i + 1) << ": ";
		solve();
		//cerr << endl << endl;
	}
	return 0;
}

#include <bits/stdc++.h>
using namespace std;
const int maxn = 105;

char grid[maxn][maxn];
int n, m;
int laser[maxn][maxn];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};
int id(char c) {
	if(c == '^') return 0;
	if(c == '>') return 1;
	if(c == 'v') return 2;
	if(c == '<') return 3;
	return -1;
}

bool ingrid(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < m;
}
bool can(int x, int y) {
	return ingrid(x, y) && (grid[x][y] == '.' || grid[x][y] == 'G' || grid[x][y] == 'S');
}
void prework() {
	memset(laser, 0, sizeof(laser));
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < m; j++) {
			int dir = id(grid[i][j]);
			if(dir >= 0) {
				for(int t = 0, d = dir; t < 4; t++, d = (d + 1) % 4) {
					int x = i + dx[d];
					int y = j + dy[d];
					while(can(x, y)) {
						laser[x][y] |= 1 << t;
						x = x + dx[d];
						y = y + dy[d];
					}
				}
			}
		}
	}
//	for(int i = 0; i < n; i++) {
//		for(int j = 0; j < m; j++)
//			printf("%d ", laser[i][j]);
//		printf("\n");
//	}
//	printf("-----------\n");
}

struct qNode {
	int x, y, t;
};
int t[maxn][maxn][4];
int bfs(int SX, int SY) {
	queue<qNode> q;
	q.push((qNode) {SX, SY, 0});
	memset(t, -1, sizeof(t));
	t[SX][SY][0] = 0;

	while(!q.empty()) {
		qNode s = q.front(); q.pop();
		if(grid[s.x][s.y] == 'G') return t[s.x][s.y][s.t];
		for(int d = 0; d < 4; d++) {
			int x = s.x + dx[d], y = s.y + dy[d];
			int mod = (s.t + 1) % 4;
			if(can(x, y) && t[x][y][mod] == -1 && !(laser[x][y] & (1 << mod))) {
				t[x][y][mod] = t[s.x][s.y][s.t] + 1;
				q.push((qNode) {x, y, mod});
			}
		}
	}
	return -1;
}
int calc() {
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < m; j++) {
			if(grid[i][j] == 'S')
				return bfs(i, j);
		}
	}
}
int main() {
	freopen("C.in", "r", stdin);
	freopen("C.out", "w", stdout);
	int _T;
	scanf("%d", &_T);
	for(int _t = 1; _t <= _T; _t++) {
		scanf("%d%d", &n, &m);
		for(int i = 0; i < n; i++)
			scanf("%s", grid[i]);
		prework();
		int ans = calc();
		if(ans != -1) printf("Case #%d: %d\n", _t, calc());
		else printf("Case #%d: impossible\n", _t);
	}
	return 0;
}

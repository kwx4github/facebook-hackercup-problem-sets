#include <iostream>
#include <fstream>
#include <algorithm>
#include <utility>
#include <map>
#include <set>
#include <vector>
#include <bitset>
#include <string>
#include <iomanip>
#include <sstream>
#include <queue>
#include <stack>

using namespace std;

typedef long long int64;

char maze[100][100];
bool visited[100][100][4];
int64 dist[10000][4];
const int64 INF = 1000000000000000000L;
int N, M;

inline int is_laser(int row, int col) {
    switch (maze[row][col]) {
        case '<':
            return 0;
        case '^':
            return 1;
        case '>':
            return 2;
        case 'v':
            return 3;
    }
    return 4;
}

bool is_safe(int row, int col, int state) {
    state = state % 4;
    if (row < 0 || row >= M || col < 0 || col >= N)
        return false;

    if (maze[row][col] != '.' && maze[row][col] != 'S' && maze[row][col] != 'G')
        return false;

    // There should not be any laser in this row facing in this direction
    for (int co = 1; col + co < N; co++) {
        int nr = row, nc = col + co;
        if (maze[nr][nc] == '#')
            break;
        
        int laserconf = is_laser(nr, nc);
        if (laserconf != 4) {
            int newstate = (laserconf + state) % 4;
            if (newstate == 0)
                return false;
            break;
        }
    }
    for (int co = -1; col + co >= 0; co--) {
        int nr = row, nc = col + co;
        if (maze[nr][nc] == '#')
            break;
        
        int laserconf = is_laser(nr, nc);
        if (laserconf != 4) {
            int newstate = (laserconf + state) % 4;
            if (newstate == 2)
                return false;
            break;
        }
    }
    // There should not be any laser in this col facing in this direction
    for (int ro = 1; row + ro < M; ro++) {
        int nr = row + ro, nc = col;
        if (maze[nr][nc] == '#')
            break;
        
        int laserconf = is_laser(nr, nc);
        if (laserconf != 4) {
            int newstate = (laserconf + state) % 4;
            if (newstate == 1)
                return false;
            break;
        }
    }
    for (int ro = -1; row + ro >= 0; ro--) {
        int nr = row + ro, nc = col;
        if (maze[nr][nc] == '#')
            break;
        
        int laserconf = is_laser(nr, nc);
        if (laserconf != 4) {
            int newstate = (laserconf + state) % 4;
            if (newstate == 3)
                return false;
            break;
        }
    }
    return true;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int T;
    cin >> T;

    for (int t = 1; t <= T; t++) {
        cin >> M >> N;

        int source, dest;
        for (int i = 0; i < M; i++) {
            cin.ignore();
            for (int j = 0; j < N; j++) {
                cin >> maze[i][j];

                if (maze[i][j] == 'S')
                    source = i * N + j;
                else if (maze[i][j] == 'G')
                    dest = i * N + j;
            }
        }

        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++)
                for (int k = 0; k < 4; k++)
                    visited[i][j][k] = false;
        }

        for (int i = 0; i < N*M; i++)
            for (int j = 0; j < 4; j++)
                dist[i][j] = INF;

        queue< pair<int, int> > Q;
        Q.emplace(source, 0);
        visited[source / N][source % N][0] = true;
        dist[source][0] = 0;

        while (!Q.empty()) {
            auto data = Q.front();
            int node = data.first;
            int state = data.second;
            Q.pop();

            int row = node / N, col = node % N;
            for (int ro = -1; ro <= 1; ro++) {
                for (int co = -1; co <= 1; co++) {
                    if (!(ro * co) && (ro != co) && is_safe(row+ro, col+co, state+1) && !visited[row+ro][col+co][(state+1) % 4]) {
                        int child = (row + ro) * N + col + co;
                        int newstate = (state + 1) % 4;
                        dist[child][newstate] = min(dist[child][newstate], dist[node][state] + 1);
                        visited[row+ro][col+co][(state+1) % 4] = true;
                        Q.emplace(child, (state+1) % 4);
                    }
                }
            }
        }

        cout << "Case #" << t << ": ";
        int64 mindist = INF;
        for (int i = 0; i < 4; i++)
            mindist = min(mindist, dist[dest][i]);
        if (mindist != INF)
            cout << mindist << "\n";
        else
            cout << "impossible\n";
    }
    return 0;
}

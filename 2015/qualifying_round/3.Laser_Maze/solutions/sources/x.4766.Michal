#!/usr/bin/python3
import sys
# import math
from collections import deque
from copy import deepcopy
import fractions
sys.setrecursionlimit(1000000)
DEBUG = 0


def rl(convert='', a=False):
    line = sys.stdin.readline().split()
    for i, c in enumerate(convert):
        if c == 'i':
            line[i] = int(line[i])
        elif c == 's':
            pass
        elif c == 'f':
            line[i] = float(line[i])
    if not a and len(line) == 1:
        return line[0]
    return line


def gcd(*args):
    if len(args) == 0:
        return 0
    g = args[0]
    for i in range(1, len(args)):
        g = fractions.gcd(g, args[i])
    return g


def lcm(*args):
    if len(args) == 0:
        return 0
    g = args[0]
    for i in range(1, len(args)):
        g *= args[i]
    return g / gcd(*args)


def avg(a):
    return sum(a) / len(a)


def debug(*args, **kwargs):
    level = 1
    if 'level' in kwargs:
        level = kwargs.pop('level')
    if DEBUG >= level:
        print(*args, **kwargs)
        # pass


def yesno(val):
    return 'yes' if val else 'no'
# --------------------------------------------------------------------#


def rotate(maze):
    maze2 = deepcopy(maze)
    for i, l in enumerate(maze):
        for j, c in enumerate(l):
            if maze2[i][j] == '^':
                maze2[i][j] = '>'
            elif maze2[i][j] == '>':
                maze2[i][j] = 'v'
            elif maze2[i][j] == 'v':
                maze2[i][j] = '<'
            elif maze2[i][j] == '<':
                maze2[i][j] = '^'
    return maze2


def fill(maze):
    hardchars = set(['#', '^', '>', 'v', '<'])
    for i, l in enumerate(maze):
        for j, c in enumerate(l):
            if maze[i][j] == '^':
                ii = i - 1
                maze[i][j] = '#'
                while ii >= 0 and maze[ii][j] not in hardchars:
                    maze[ii][j] = '#'
                    ii -= 1
            elif maze[i][j] == '>':
                jj = j + 1
                maze[i][j] = '#'
                while jj < len(l) and maze[i][jj] not in hardchars:
                    maze[i][jj] = '#'
                    jj += 1
            elif maze[i][j] == 'v':
                ii = i + 1
                maze[i][j] = '#'
                while ii < len(maze) and maze[ii][j] not in hardchars:
                    maze[ii][j] = '#'
                    ii += 1
            elif maze[i][j] == '<':
                jj = j - 1
                maze[i][j] = '#'
                while jj >= 0 and maze[i][jj] not in hardchars:
                    maze[i][jj] = '#'
                    jj -= 1

next_step = [
    (0, 1),
    (0, -1),
    (1, 0),
    (-1, 0),
]


def multibfs(s, lines):
    visited = [[[False]*len(lines[0][i]) for i in range(len(lines[0]))] for _ in range(4)]
    q = deque()
    q.append((s[0], s[1], 0))

    mintime = None

    while len(q):
        px, py, time = q.pop()
        debug('trying', px, py, time)

        if not (0 <= px < len(lines[0]) and 0 <= py < len(lines[0][0])):
            debug('out of bounds')
            continue


        if lines[time % 4][px][py] == 'G':
            debug('GOAL')
            if mintime is None or time < mintime:
                mintime = time

        if visited[time % 4][px][py] or (lines[time % 4][px][py] == '#' and time > 0):
            debug('visited or #')
            continue

        visited[time % 4][px][py] = True

        print_maze(lines[time % 4], px, py, time)

        for npx, npy in next_step:
            q.append((px + npx, py + npy, time + 1))

    if mintime is None:
        return 'impossible'
    else:
        return mintime


def print_maze(maze, x, y, time):
    debug(time)
    maze2 = deepcopy(maze)
    maze2[x][y] = '*'
    for l in maze2:
        debug(''.join(l))


t = rl('i')

for tc in range(1, t + 1):
    m, n = rl('ii')
    lines = [[]]
    for i in range(m):
        l = list(rl('s'))
        if 'S' in l:
            s = (i, l.index('S'))
        lines[0].append(l)
    for i in range(3):
        lines.append(rotate(lines[i]))
    for i in range(4):
        fill(lines[i])

    print('Case #{}: {}'.format(tc, multibfs(s, lines)))

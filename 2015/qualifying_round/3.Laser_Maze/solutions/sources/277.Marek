#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int visited[100][100][4];
bool hitspot[100][100][4];
char board[100][100];

int turrets[10000][2];
int max_x, max_y;
int dest_x, dest_y;

int minimum()
{
	int current = 1 << 20;
	for (int i = 0; i < 4; ++i)
	{
		if (visited[dest_x][dest_y][i] < current && visited[dest_x][dest_y][i] != -1)
			current = visited[dest_x][dest_y][i];
	}
	return current;
}
void can_pass(int x, int y, int moment, int sum)
{
	if (x == dest_x && y == dest_y)
	{
		if (visited[x][y][moment] == -1 || visited[x][y][moment] > sum)
			visited[x][y][moment] = sum;
		return;
	}
	if (visited[x][y][moment] == -1 || visited[x][y][moment] > sum)
		visited[x][y][moment] = sum;
	else
		return;
	if (x != 0 && board[x - 1][y] != '#' && (board[x - 1][y] > '3' || board[x - 1][y] < '0') && hitspot[x - 1][y][moment] == false)
		can_pass(x - 1, y, (moment + 1) % 4, sum + 1);
	if (x != max_x - 1 && board[x + 1][y] != '#' && (board[x + 1][y] > '3' || board[x + 1][y] < '0') && hitspot[x + 1][y][moment] == false)
		can_pass(x + 1, y, (moment + 1) % 4, sum + 1);
	if (y != 0 && board[x][y - 1] != '#' && (board[x][y - 1] > '3' || board[x][y - 1] < '0') && hitspot[x][y - 1][moment] == false)
		can_pass(x, y - 1, (moment + 1) % 4, sum + 1);
	if (y != max_y - 1 && board[x][y + 1] != '#' && (board[x][y + 1] > '3' || board[x][y + 1] < '0') && hitspot[x][y + 1][moment] == false)
		can_pass(x, y + 1, (moment + 1) % 4, sum + 1);
}

void count(int x, int y, int direction, int moment)
{
	if (direction == 0)
	{
		x--;
		while (x != -1 && board[x][y] != '#' && (board[x][y] < '0' || board[x][y] > '3'))
		{
			hitspot[x][y][moment] = true;
			x--;
		}
	}
	else if (direction == 1)
	{
		y++;
		while (y != max_y && board[x][y] != '#' && (board[x][y] < '0' || board[x][y] > '3'))
		{
			hitspot[x][y][moment] = true;
			y++;
		}
	}
	else if (direction == 2)
	{
		x++;
		while (x != max_x && board[x][y] != '#' && (board[x][y] < '0' || board[x][y] > '3'))
		{
			hitspot[x][y][moment] = true;
			x++;
		}
	}
	else
	{
		y--;
		while (y != -1 && board[x][y] != '#' && (board[x][y] < '0' || board[x][y] > '3'))
		{
			hitspot[x][y][moment] = true;
			y--;
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(0);
	int t;
	cin >> t;
	for (int i = 0; i < t; ++i)
	{
		int n, m;
		cin >> n >> m;
		max_x = n;
		max_y = m;
		int turret_count = 0;
		int start_x, start_y;
		for (int j = 0; j < n; ++j)
		{
			for (int k = 0; k < m; ++k)
			{
				for (int a = 0; a < 4; ++a)
				{
					visited[j][k][a] = -1;
					hitspot[j][k][a] = false;
				}
				cin >> board[j][k];
				if (board[j][k] == 'S') {
					start_x = j;
					start_y = k;
				}
				if (board[j][k] == 'G') {
					dest_x = j;
					dest_y = k;
				}
			
				if (board[j][k] != '#' && board[j][k] != '.' && board[j][k] != 'S' && board[j][k] != 'G') {
					turrets[turret_count][0] = j;
					turrets[turret_count][1] = k;
					turret_count++;
				}
				if (board[j][k] == '>') board[j][k] = '1';
				else if (board[j][k] == '^') board[j][k] = '0';
				else if (board[j][k] == 'v') board[j][k] = '2';
				else if (board[j][k] == '<') board[j][k] = '3';
			}
		}
		for (int j = 0; j < turret_count; ++j)
		{
			int state = board[turrets[j][0]][turrets[j][1]] - '0';
			int moment = 0;
			for (int k = 0; k < 4; ++k)
			{
				count(turrets[j][0], turrets[j][1], state, moment);
				moment++;
				state = (state + 1) % 4;
			}
		}
		can_pass(start_x, start_y, 1, 0);
		int score = minimum();
		if (score != 1 << 20)
			cout << "Case #" << i + 1 << ": " << score << endl;
		else
			cout << "Case #" << i + 1 << ": impossible\n";
	}
	return 0;
}
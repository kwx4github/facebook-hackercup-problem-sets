#include<iostream>
#include<cstring>
#include<cstdlib>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include<string>
#include<random>
#include<fstream>
#include<cmath>
#include<cctype>
#include<functional>
#include<iomanip>

using namespace std;

//#define input cin
//#define output cout



int maze[100][100];
int si,sj;
int gi,gj;
int M,N;

bool danger[100][100][4];
bool flag[100][100][4];


int fun()
{
	queue<pair<int,int>> q;
	q.push(pair<int,int>(si*N+sj,0));
    
	int i,j,step;
	while(!q.empty())
	{
		i=q.front().first/N;
		j=q.front().first%N;
		step=q.front().second;
		q.pop();

		if(step!=0&&danger[i][j][step%4]) continue; // From the example, first state no check necessary

		if(i==gi&&j==gj) return step;

		if(i!=0&&!flag[i-1][j][(step+1)%4])
		{
			flag[i-1][j][(step+1)%4]=true;
			q.push(pair<int,int>((i-1)*N+j,step+1));
		}

		if(j!=0&&!flag[i][j-1][(step+1)%4])
		{
			flag[i][j-1][(step+1)%4]=true;
			q.push(pair<int,int>(i*N+j-1,step+1));
		}

		if(i!=M-1&&!flag[i+1][j][(step+1)%4])
		{
			flag[i+1][j][(step+1)%4]=true;
			q.push(pair<int,int>((i+1)*N+j,step+1));
		}

		if(j!=N-1&&!flag[i][j+1][(step+1)%4])
		{
			flag[i][j+1][(step+1)%4]=true;
			q.push(pair<int,int>(i*N+j+1,step+1));
		}

	}

	return -1;
}

int main()
{
	ifstream input("C:\\Test\\laser_maze_example_input.txt");
    ofstream output("C:\\Test\\laser_maze_output.txt",ios::trunc);
	int testN;
	input>>testN;
	for(int caseN=1;caseN<=testN;caseN++)
	{
		input>>M>>N;
		memset(danger,0,sizeof(danger));
		memset(flag,0,sizeof(flag));

		char c;
		for(int i=0;i<M;i++)
			for(int j=0;j<N;j++)
			{
				input>>c;
				switch (c)
				{
					case 'G': gi=i;gj=j;maze[i][j]=5;break;
					case 'S': si=i;sj=j;maze[i][j]=6;break;
					case '^': maze[i][j]=0;break;
					case '>': maze[i][j]=1;break;
					case 'v': maze[i][j]=2;break;
				    case '<': maze[i][j]=3;break;
					case '#': maze[i][j]=4;break;
					default:
						maze[i][j]=7;
						break;
				}
			}

			for(int i=0;i<M;i++)
				for(int j=0;j<N;j++)
			{
				if(maze[i][j]<4)
				{
					for(int k=i-1;k>=0;k--)
					{
						if(maze[k][j]<=4) break;
						danger[k][j][(4-maze[i][j])%4]=true;
					}

					for(int k=i+1;k<M;k++)
					{
						if(maze[k][j]<=4) break;
						danger[k][j][(6-maze[i][j])%4]=true;
					}

					for(int k=j+1;k<N;k++)
					{
						if(maze[i][k]<=4) break;
						danger[i][k][(5-maze[i][j])%4]=true;
					}

					for(int k=j-1;k>=0;k--)
					{
						if(maze[i][k]<=4) break;
						danger[i][k][(7-maze[i][j])%4]=true;
					}
				}
			}

		int res=fun();
		output<<"Case #"<<caseN<<": ";
		if(res==-1) output<<"impossible"<<endl;
		else output<<res<<endl;
	}
	

	return 0;
}






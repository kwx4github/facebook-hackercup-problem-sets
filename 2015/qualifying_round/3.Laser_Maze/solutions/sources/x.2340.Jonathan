#include<cstdio>
int T,n,m,laser[105][105],v[105][105][5],sx,sy,gx,gy,hd,tl,x,y,z,xx,yy,zz,dx[5],dy[5],ac;
char maze[105][105];
struct state{
       int x,y,z;       
}q[100000];
int btw(int a,int b,int c){
    if (a>=b&&a<=c) return 1;
    return 0;    
}

int safe(int x,int y,int z){
    for (int i=x+1; i<n; i++)
        if (laser[i][y]!=-1&&(laser[i][y]+z)%4==0) return 0;
    for (int j=y-1; j>=0; j--)
        if (laser[x][j]!=-1&&(laser[x][j]+z)%4==1) return 0;
    for (int i=x-1; i>=0; i--)
        if (laser[i][y]!=-1&&(laser[i][y]+z)%4==2) return 0;
    for (int j=y+1; j<m; j++)
        if (laser[x][j]!=-1&&(laser[x][j]+z)%4==3) return 0;
    return 1;
}

int main(){
    scanf("%d",&T);
    dx[0]=1; dx[1]=-1; dx[2]=0; dx[3]=0;
    dy[0]=0; dy[1]=0; dy[2]=1; dy[3]=-1;
    for (int o=1; o<=T; o++){
        scanf("%d%d",&n,&m);
        
        for (int i=0; i<n; i++)
            for (int j=0; j<m; j++)
                laser[i][j]=-1;
        
        for (int i=0; i<n; i++)
            scanf("%s",maze[i]);
        
        for (int i=0; i<n; i++)
            for (int j=0; j<m; j++){
                if (maze[i][j]=='S') sx=i,sy=j,maze[i][j]='.';
                else if (maze[i][j]=='G') gx=i,gy=j,maze[i][j]='.';
                else if (maze[i][j]=='^') laser[i][j]=0;                
                else if (maze[i][j]=='>') laser[i][j]=1;
                else if (maze[i][j]=='v') laser[i][j]=2;
                else if (maze[i][j]=='<') laser[i][j]=3;
            }
            
        for (int i=0; i<n; i++)
            for (int j=0; j<m; j++)
                for (int k=0; k<4; k++)
                    v[i][j][k]=-1;
        
        
        ac=-1;
        v[sx][sy][0]=0; q[1].x=sx; q[1].y=sy; q[1].z=0;
        
        for (hd=tl=1; (hd<=tl)&&(ac==-1); hd++){
            x=q[hd].x; y=q[hd].y; z=q[hd].z;
            for (int k=0; k<4; k++){
                xx=x+dx[k]; yy=y+dy[k]; zz=(z+1)%4;
                if (btw(xx,0,n-1) && btw(yy,0,m-1) && (maze[xx][yy]=='.') && (v[xx][yy][zz]==-1) && safe(xx,yy,zz)){
                   q[++tl].x=xx; q[tl].y=yy; q[tl].z=zz; v[xx][yy][zz]=v[x][y][z]+1;
                   if (xx==gx&&yy==gy){ac=v[xx][yy][zz]; break;}
                }
            }
            if (ac!=-1) break;
        }
        
        
        printf("Case #%d: ",o);
        if (ac==-1) printf("impossible\n");
        else printf("%d\n",ac);
    }
    return 0;    
}

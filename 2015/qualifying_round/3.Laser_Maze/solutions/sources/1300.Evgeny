#include <iostream>
#include <fstream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cstring>
#include <string>
#include <cmath>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <functional>
#include <limits>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef pair<int,int> pii;
typedef vector<vector<int> > graph;

const double pi = acos(-1.0);

#define oned(a, x1, x2) { cout << #a << ":"; for(int _i = (x1); _i < (x2); _i++){ cout << " " << a[_i]; } cout << endl; }
#define twod(a, x1, x2, y1, y2) { cout << #a << ":" << endl; for(int _i = (x1); _i < (x2); _i++){ for(int _j = (y1); _j < (y2); _j++){ cout << (_j > y1 ? " " : "") << a[_i][_j]; } cout << endl; } }

#define mp make_pair
#define pb push_back
#define fst first
#define snd second

#define endl '\n'

const int MAXN = 105;

int n, m;
char a[MAXN][MAXN];
bool vis[4][MAXN][MAXN];
int d[4][MAXN][MAXN];
queue<pair<int,pii> > Q;
int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};

bool turret(int x, int y) {
	return 0<=a[x][y] && a[x][y]<4;
}

void solve() {
	int sx = 0, sy = 0, fx = 0, fy = 0;
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < m; j++) {
            if(a[i][j]=='S') {
                sx = i;
                sy = j;
                a[i][j] = '.';
            } else if(a[i][j]=='G') {
				fx = i;
				fy = j;
                a[i][j] = '.';
            } else if(a[i][j]=='^') {
				a[i][j] = 0;
            } else if(a[i][j]=='>') {
				a[i][j] = 1;
            } else if(a[i][j]=='v') {
				a[i][j] = 2;
            } else if(a[i][j]=='<') {
				a[i][j] = 3;
            }
		}
	}

	Q = queue<pair<int,pii> >();
	memset(vis,0,sizeof(vis));
    Q.push(mp(0,mp(sx,sy)));
    vis[0][sx][sy] = true;
    d[0][sx][sy] = 0;
	while(!Q.empty()) {
		int t = Q.front().fst;
		int x = Q.front().snd.fst;
		int y = Q.front().snd.snd;
		if(x==fx && y==fy) {
			cout << d[t][x][y] << endl;
			return;
		}
		Q.pop();
		for(int k = 0; k < 4; k++) {
			int nt = (t+1)%4;
			int nx = x+dir[k][0];
			int ny = y+dir[k][1];
			if(nx>=0 && nx<n && ny>=0 && ny<m && !vis[nt][nx][ny] && a[nx][ny]=='.') {
				bool good = true;
                int cx, cy;

                cx = nx;
                cy = ny;
                while(cx>0 && a[cx][cy]=='.') {
					cx--;
                }
                if(cx>=0 && turret(cx,cy) && (a[cx][cy]+nt)%4==2) {
					good = false;
                }

                cx = nx;
                cy = ny;
                while(cx+1<n && a[cx][cy]=='.') {
					cx++;
                }
                if(cx<n && turret(cx,cy) && (a[cx][cy]+nt)%4==0) {
					good = false;
                }

				cx = nx;
				cy = ny;
				while(cy>0 && a[cx][cy]=='.') {
					cy--;
				}
				if(cy>=0 && turret(cx,cy) && (a[cx][cy]+nt)%4==1) {
					good = false;
				}

				cx = nx;
				cy = ny;
				while(cy+1<m && a[cx][cy]=='.') {
					cy++;
				}
				if(cy>=0 && turret(cx,cy) && (a[cx][cy]+nt)%4==3) {
					good = false;
				}

				if(good) {
                    vis[nt][nx][ny] = true;
                    d[nt][nx][ny] = d[t][x][y]+1;
                    Q.push(mp(nt,mp(nx,ny)));
				}
			}
		}
	}
	cout << "impossible" << endl;
}

int main() {
	freopen("input.in", "r", stdin);
	freopen("output.out", "w", stdout);
	int T; cin >> T;
	for(int C = 1; C <= T; C++) {
		cin >> n >> m;
		for(int i = 0; i < n; i++) {
			cin >> a[i];
		}
        cout << "Case #" << C << ": ";
        solve();
	}
}

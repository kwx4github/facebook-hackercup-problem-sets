#include <cstdio>
#include <cassert>
#include <algorithm>
#include <cstring>
#include <queue>

using namespace std;

struct Triplet
{
	int x, y, t;
	Triplet() {}
	Triplet(int x, int y, int t): x(x), y(y), t(t) {}
};

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

int dist[100][100][4];
int block[100][100];
int r, c;

char m[200][200];

int main()
{
	int t;
	scanf("%d", &t);
	for (int tc = 1; tc <= t; ++tc)
	{
		scanf("%d %d", &r, &c);
		queue<Triplet> q;
		memset(dist, -1, sizeof dist);
		memset(block, 0, sizeof block);
		for (int i = 0; i < r; ++i)
			scanf("%s", m[i]);
		for (int i = 0; i < r; ++i)
			for (int j = 0; j < c; ++j)
				if (m[i][j] == 'S')
				{
					q.push(Triplet(i, j, 1));
					dist[i][j][1] = 0;
				}
				else
				if (m[i][j] == '.' || m[i][j] == 'G') continue;
				else
				if (m[i][j] == '#')
					block[i][j] = 15;
				else
				{
					block[i][j] = 15;
					int v;
					switch (m[i][j])
					{
						case '^': v = 0; break;
						case '>': v = 1; break;
						case 'v': v = 2; break;
						case '<': v = 3; break;
					}
					for (int k = 0; k < 4; ++k)
					{
						int p = (v + k) % 4;
						int x = i + dx[p], y = j + dy[p];
						for (; x >= 0 && y >= 0 && x < r && y < c && (m[x][y] == 'S' || m[x][y] == '.' || m[x][y] == 'G'); x += dx[p], y += dy[p])
							block[x][y] |= 1 << k;
					}
				}
		
		int ans = -1;
		while (!q.empty())
		{
			Triplet u = q.front();
			if (m[u.x][u.y] == 'G')
			{
				ans = dist[u.x][u.y][u.t];
				break;
			}
			q.pop();
			for (int i = 0; i < 4; ++i)
			{
				int x = u.x + dx[i], y = u.y + dy[i];
				if (x < 0 || x == r || y < 0 || y == c) continue;
				if (block[x][y] & (1 << u.t)) continue;
				int t = (u.t + 1) % 4;
				if (dist[x][y][t] == -1)
				{
					dist[x][y][t] = dist[u.x][u.y][u.t] + 1;
					q.push(Triplet(x, y, t));
				}
			}
		}
		printf("Case #%d: ", tc);
		if (ans == -1) puts("impossible");
		else printf("%d\n", ans);
	}
	return 0;
}

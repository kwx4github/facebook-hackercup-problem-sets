/**************************************
 *	
 *	Author		: Gerald Zhang
 *	Affiliation	: Tsinghua University
 *	Email		: monocofe@gmail.com
 *	Date		: 2015/01/09 16:07:04
 *	
**************************************/

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <iostream>
#include <cmath>
#include <set>
#include <ctime>
#include <algorithm>
#define min(a,b)	((a)<(b)?(a):(b))
#define max(a,b)	((a)>(b)?(a):(b))
#define abs(a)	((a)<0?-(a):(a))
#define inf 214748364
#define pi 3.141592653589793
using namespace std;
typedef long long ll;

const int maxn = 201;

int tim;
int n, m;
char g[maxn][maxn];
int blocked[maxn][maxn];
int stx, sty, enx, eny;

int qx[maxn*maxn], qy[maxn*maxn], qp[maxn*maxn], head, tail;

int dirx[4] = {-1, 0, 1, 0};
int diry[4] = {0, 1, 0, -1};
char* turret = "^>v<";

int f[maxn][maxn][4];

#define pin(x, y)	((x) >=0 && (y) >=0 && (x) < n && (y) < m && (g[x][y]=='.'||g[x][y]=='S'||g[x][y]=='G') )

void goblock(int x, int y, int d)
{
	for(int i = 0; i < 4; ++i)
	{
		int dir = (d + i) % 4;
		int px = x + dirx[dir], py = y + diry[dir];
		while(pin(px, py))
		{
			blocked[px][py] |= (1<<i);
			px += dirx[dir], py += diry[dir];
		}
	}
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("a.in","r",stdin);
	freopen("a.out","w",stdout);
	#endif
	scanf("%d", &tim);
	for(int tt = 1; tt <= tim; ++tt)
	{
		printf("Case #%d: ", tt);
		scanf("%d%d", &n, &m);
		for(int i = 0; i < n; ++i)
			scanf("%s", g[i]);
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < m; ++j)
			{
				blocked[i][j] = 0;
				for(int k = 0; k < 4; ++k)
					f[i][j][k] = inf;
			}
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < m; ++j)
			{
				if(g[i][j] == 'S')
					stx = i, sty = j;
				if(g[i][j] == 'G')
					enx = i, eny = j;
				for(int k = 0; k < 4; ++k)
					if(g[i][j] == turret[k])
						goblock(i, j, k);
			}
		qx[head=tail=0] = stx, qy[0] = sty, qp[0] = 0;
		f[stx][sty][0] = 0;
		while(head<=tail)
		{
			int x = qx[head], y = qy[head], p = qp[head++];
			for(int dir = 0; dir < 4; ++dir)
			{
				int px = x + dirx[dir], py = y + diry[dir];
				int pp = (p+1)%4;
				if(!(pin(px, py)))
					continue;
				if(blocked[px][py]&(1<<pp))
					continue;
				if(f[px][py][pp] > f[x][y][p] + 1)
				{
					f[px][py][pp] = f[x][y][p] + 1;
					qx[++tail] = px;
					qy[tail] = py;
					qp[tail] = pp;
				}
			}
		}
		int minn = inf;
		for(int i = 0; i < 4; ++i)
			minn = min(minn, f[enx][eny][i]);
		if(minn == inf)
			printf("impossible\n");
		else
			printf("%d\n", minn);
	}
	return 0;
}


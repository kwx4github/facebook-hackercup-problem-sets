#include <bits/stdc++.h>

#define MP           make_pair
#define PB           push_back
#define SZ(a)        ((int)a.size())
#define LENGTH(a)    ((int)a.length())
#define ALL(a)       a.begin(), a.end()
#define REP(i, n)    for(int i = 0; i < n; i++)
#define INC(i, a, b) for(int i = a; i <= b; i++)
#define DEC(i, a, b) for(int i = a; i >= b; i--)
#define CLEAR(a, b)  memset(a, b, sizeof a)

using namespace std;

typedef long long          LL;
typedef unsigned long long ULL;
typedef vector<int>        VI;
typedef pair<int, int>     II;
typedef vector<II>         VII;

const double PI  = acos(-1.0);
const double EPS = 1e-9;
const int    inf = 1000000000;
const LL     INF = ((LL)inf)*inf;

#define LIM 200

char inp[LIM][LIM];
int block[LIM][LIM][4], dist[LIM][LIM][4];
bool visit[LIM][LIM][4];
int n, m;

bool pass(int i, int j) {
	if(inp[i][j] == '.' || inp[i][j] == 'S' || inp[i][j] == 'G')
		return true;
	return false;
}

bool inside(int i, int j) {
	if(i >= n || j >= m || i < 0 || j < 0)
		return false;
	return true;
}

int dir[][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
void poss() {
	REP(i, n) REP(j, m) {
		int cur = -1;
		if(inp[i][j] == '>') cur = 0;
		else if(inp[i][j] == 'v') cur = 3;
		else if(inp[i][j] == '<') cur = 2;
		else if(inp[i][j] == '^') cur = 1;
		if(cur == -1) continue;
		REP(k, 4) {
			int ii = i, jj = j;
			do {
				block[ii][jj][(cur+k)%4] = 1;
				ii += dir[k][0];
				jj += dir[k][1];
				if(inside(ii, jj) != true) break;
			} while(pass(ii, jj));
		}
	}
}

int bfs() {
	int ii, jj;
	for(ii = 0; ii < n; ii++) {
		for(jj = 0; jj < m; jj++)
			if(inp[ii][jj] == 'S') break;
		if(jj != m) break;
	}
	visit[ii][jj][0] = true;
	dist[ii][jj][0] = 0;
	queue< pair< II, int> > vert;
	vert.push(MP(MP(ii, jj), 0));
	while(!vert.empty()) {
		int ci, cj, cdist;
		pair< II, int> cur = vert.front();
		ci = cur.first.first;
		cj = cur.first.second;
		cdist = dist[ci][cj][cur.second];
		vert.pop();
		// printf("%d %d %d\n", ci, cj, cdist);

		REP(k, 4) {
			int cci = ci+dir[k][0], ccj = cj+dir[k][1];
			if(!(inside(cci, ccj) && pass(cci, ccj))) continue;
			if(visit[cci][ccj][(cdist+1)%4] == true) continue;
			if(block[cci][ccj][(cdist+1)%4] == 1) continue;
			visit[cci][ccj][(cdist+1)%4] = true;
			dist[cci][ccj][(cdist+1)%4] = cdist + 1;
			vert.push(MP(MP(cci, ccj), (cdist+1)%4));
		}

	}

	for(ii = 0; ii < n; ii++) {
		for(jj = 0; jj < m; jj++)
			if(inp[ii][jj] == 'G') break;
		if(jj != m) break;
	}
	int ans = inf;
	REP(i, 4) if(dist[ii][jj][i] != 0) ans = min(ans, dist[ii][jj][i]);
	return ans;
}

int main(int argc, char const *argv[])
{
	int tcase;
	scanf("%d", &tcase);
	REP(_t, tcase) {
		scanf("%d%d", &n, &m);
		REP(i, n) scanf(" %s", inp[i]);
		CLEAR(block, 0);
		CLEAR(visit, 0);
		CLEAR(dist, 0);
		poss();
		int ans = bfs();
		// REP(i, n) {
		// 	REP(j, m) REP(k, 4)
		// 		printf("%c%d%c", (k == 0 ? '[' : ' '), dist[i][j][k], (k == 3 ? ']' : 0));
		// 	printf("\n");
		// }

		printf("Case #%d: ", _t+1);
		if(ans == inf) printf("impossible\n");
		else printf("%d\n", ans);
	}
	return 0;
}
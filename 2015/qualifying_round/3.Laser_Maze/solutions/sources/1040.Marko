#include <iostream>
#include <fstream>
#include <set>
#include <tuple>

using namespace std;
#define MAXN 101

set<int> grid[MAXN][MAXN];
char G[MAXN][MAXN];
set<tuple<int,int,int>> Q;
int dir[][2] = {{-1, 0}, //^
               { 0, 1}, //>
               { 1, 0}, //v
               { 0,-1}, //<
               {-1, 0}, //^
               { 0, 1}, //>
               { 1, 0}, //v
               { 0,-1}}; //<

void clear() {
    for(int i = 0; i < MAXN; i++){
        for(int j = 0; j < MAXN; j++) {
            grid[i][j].clear();
            G[i][j] = 0;
        }
    }
}
void drawLine(int i, int j, int dirVec){
    int nexti,nextj;
    char txt;
    for(int n = 0; n < 4; n++) {
        for(int d = 1;  ; d++) {
            nexti = i + dir[dirVec + n][0]*d;
            nextj = j + dir[dirVec + n][1]*d;

            if(nexti < 0 || nextj < 0 || nexti >= MAXN || nextj >= MAXN)
                break;

            txt = G[nexti][nextj];
            //cout<<nexti<<" "<<nextj<<txt<<endl;
            if(txt == '.' ||txt == 'S' || txt=='G'){
                grid[nexti][nextj].insert(n);
            } else{
                break;
            }
        }
    }
}
int main() {
    ofstream output;
    ifstream input;
    input.open ("input.txt");
    output.open ("output.txt");
	int T,h,w,si,ei,sj,ej;
	input>>T;
	for(int caseNo = 1; caseNo <= T; caseNo++) {
        input>>h>>w;
        string tmp;
        clear();
        for(int i = 0; i < h; i++){
            input>>tmp;
            for(int j = 0; j < w; j++){
                G[i][j]= tmp[j];
                if(tmp[j] == 'S'){
                    si = i;
                    sj = j;
                } else if (tmp[j] == 'G'){
                    ei = i;
                    ej = j;
                }

            }
        }
        for(int i = 0; i < h; i++){
            for(int j = 0; j < w; j++) {
                if(G[i][j] == '^')
                    drawLine(i,j,0);
                if(G[i][j] == '>')
                    drawLine(i,j,1);
                if(G[i][j] == 'v')
                    drawLine(i,j,2);
                if(G[i][j]== '<')
                    drawLine(i,j,3);

            }
        }
       // cout<<si<<" "<<sj<<" "<<ei<<" "<<ej<<endl;
    Q.clear();
    Q.insert(make_tuple(0,si,sj));
    int i,j,ii,jj,hopcount;
   // cout<<"---------------"<<endl;
    bool found = false;
    while(!Q.empty()) {
        auto Tmp = *Q.begin();
        Q.erase(Q.begin());
        hopcount = get<0>(Tmp);
        i = get<1>(Tmp);
        j = get<2>(Tmp);
        //cout<<i<<" "<<j<<" "<<hopcount<<endl;
        if(hopcount > 10000){
            break;
        }
        if(i == ei && j == ej){
            //cout<<hopcount<<endl;
            found = true;
            break;
        } else {
            hopcount++;
            for(int d = 0; d < 4; d++) {
                ii = i + dir[d][0];
                jj = j + dir[d][1];
                if(ii < 0 || jj < 0 || ii >= h ||jj >= w)
                    continue;
                if(G[ii][jj] == '.' || G[ii][jj] == 'S' || G[ii][jj] == 'G'){

                if(grid[ii][jj].find(hopcount%4) == grid[ii][jj].end()){
                    Q.insert(make_tuple(hopcount,ii,jj));
                }
                }
            }
        }
        }
        if(found) {
            output<<"Case #"<<caseNo<<": "<<hopcount<<endl;
        } else {
            output<<"Case #"<<caseNo<<": "<<"impossible"<<endl;
        }

	}


	input.close();
	output.close();
	return 0;
}

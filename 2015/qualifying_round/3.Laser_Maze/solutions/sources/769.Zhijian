#include <cstdio>
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int N = 111;

int n, m;
char state[N][N];
int step[4][N][N];
bool ban[4][N][N];

inline bool bound(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

inline void solve() {
	cin >> n >> m;
	for (int i = 0; i < n; ++i) {
		cin >> state[i];
	}
	for (int modular = 0; modular < 4; ++modular) {
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (state[i][j] == '.' || state[i][j] == 'S' || state[i][j] == 'G') {
					ban[modular][i][j] = false;
				} else {
					ban[modular][i][j] = true;
				}
			}
		}
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				int dir = -1;
				if (state[i][j] == '^') {
					dir = 0;
				} else if (state[i][j] == '>') {
					dir = 1;
				} else if (state[i][j] == 'v') {
					dir = 2;
				} else if (state[i][j] == '<') {
					dir = 3;
				}
				if (dir == -1) {
					continue;
				}
				(dir += modular) %= 4;
				for (int x = i + dx[dir], y = j + dy[dir]; bound(x, y); x += dx[dir], y += dy[dir]) {
					if (state[x][y] == '.' || state[x][y] == 'S' || state[x][y] == 'G') {
						ban[modular][x][y] = true;
					} else {
						break;
					}
				}
			}
		}
	}
	for (int modular = 0; modular < 4; ++modular) {
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				step[modular][i][j] = -1;
			}
		}
	}
	vector<pair<int, pair<int, int> > > queue;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (state[i][j] == 'S') {
				queue.push_back(make_pair(0, make_pair(i, j)));
				step[0][i][j] = 0;
			}
		}
	}
	for (int head = 0; head < (int)queue.size(); ++head) {
		int modular1 = queue[head].first;
		int x1 = queue[head].second.first;
		int y1 = queue[head].second.second;
		if (state[x1][y1] == 'G') {
			cout << step[modular1][x1][y1] << endl;
			return;
		}
		int modular2 = (modular1 + 1) % 4;
		for (int i = 0; i < 4; ++i) {
			int x2 = x1 + dx[i];
			int y2 = y1 + dy[i];
			if (bound(x2, y2) && !ban[modular2][x2][y2] && step[modular2][x2][y2] == -1) {
				step[modular2][x2][y2] = step[modular1][x1][y1] + 1;
				queue.push_back(make_pair(modular2, make_pair(x2, y2)));
			}
		}
	}
	cout << "impossible" << endl;
}

int main() {
	ios::sync_with_stdio(false);
	int tests;
	cin >> tests;
	for (int i = 1; i <= tests; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
	return 0;
}
#include<cstdio>
#include <bits/stdc++.h>

using namespace std;
int n,m,mark[4][100][100],unsafe[4][100][100],sx,sy,ex,ey;
char inp[100][100];

int bfs()
{
	queue<int> x,y,s;
	int i,j,qx,qy,qs,flag=0;

	x.push(sx);y.push(sy);s.push(0);
	
	mark[0][sx][sy]=1;

	while(!x.empty())
	{

		qx=x.front(); qy=y.front(); qs = s.front(); 
		x.pop();y.pop();s.pop();

		//printf("%d %d %d %d\n",qx,qy,qs,qp);

		if(qx==ex && qy==ey)
		{
			flag=1;
			break;


		}

		if(qx+1<n && mark[(qs+1)%4][qx+1][qy]==0 && inp[qx+1][qy]=='.' && unsafe[(qs+1)%4][qx+1][qy]==0)
		{
			
				mark[(qs+1)%4][qx+1][qy]=1;
				x.push(qx+1);y.push(qy);s.push(qs+1);
			
			
		}

		if(qy+1<m && mark[(qs+1)%4][qx][qy+1]==0 && inp[qx][qy+1]=='.' && unsafe[(qs+1)%4][qx][qy+1]==0)
		{
			
				mark[(qs+1)%4][qx][qy+1]=1;
				x.push(qx);y.push(qy+1);s.push(qs+1);
			
			
		}

		if(qx-1>=0 && mark[(qs+1)%4][qx-1][qy]==0 && inp[qx-1][qy]=='.' && unsafe[(qs+1)%4][qx-1][qy]==0)
		{
			
				mark[(qs+1)%4][qx-1][qy]=1;
				x.push(qx-1);y.push(qy);s.push(qs+1);
			
			
		}

		if(qy-1>=0 && mark[(qs+1)%4][qx][qy-1]==0 && inp[qx][qy-1]=='.' && unsafe[(qs+1)%4][qx][qy-1]==0)
		{
			
				mark[(qs+1)%4][qx][qy-1]=1;
				x.push(qx);y.push(qy-1);s.push(qs+1);
			
			
		}




	}

	if(flag==1)
		return(qs);

	return(-1);
	
}

void mark_right(int x,int y,int pos)
{
	int i;

	for(i=y+1;i<m;i++)
	{
		if(inp[x][i]=='.')
			unsafe[pos][x][i]=1;
		
		else
			break;
	}
	

}

void mark_left(int x,int y,int pos)
{
	int i;

	for(i=y-1;i>=0;i--)
	{
		if(inp[x][i]=='.')
			unsafe[pos][x][i]=1;
		
		else
			break;
	}
	

}

void mark_up(int x,int y,int pos)
{
	int i;

	for(i=x-1;i>=0;i--)
	{
		if(inp[i][y]=='.')
			unsafe[pos][i][y]=1;
		
		else
			break;
	}
	

}

void mark_down(int x,int y,int pos)
{
	int i;

	for(i=x+1;i<n;i++)
	{
		if(inp[i][y]=='.')
			unsafe[pos][i][y]=1;
		
		else
			break;
	}
	

}
void find_unsafe()
{
	int i,j;

	for(i=0;i<n;i++)
		{
			for(j=0;j<m;j++)
			{
				if(inp[i][j]=='^')
				{	
					mark_up(i,j,0);
					mark_right(i,j,1);
					mark_down(i,j,2);
					mark_left(i,j,3);
				}
			
				else if(inp[i][j]=='>')
				{	
					mark_up(i,j,3);
					mark_right(i,j,0);
					mark_down(i,j,1);
					mark_left(i,j,2);
				}
				
				else if(inp[i][j]=='v')
				{	
					mark_up(i,j,2);
					mark_right(i,j,3);
					mark_down(i,j,0);
					mark_left(i,j,1);
				}
				
				else if(inp[i][j]=='<')
				{	
					mark_up(i,j,1);
					mark_right(i,j,2);
					mark_down(i,j,3);
					mark_left(i,j,0);
				}
				
			}
			
		}


}
int  main()
{
	int t,t1,i,j,res;
	
	scanf("%d",&t);

	for(t1=1;t1<=t;t1++)
	{
		scanf("%d %d",&n,&m);

		for(i=0;i<n;i++)
		{
			getchar();

			for(j=0;j<m;j++)
			{
				scanf("%c",&inp[i][j]);
				if(inp[i][j] == 'S')
				{
					sx=i;
					sy=j;
					inp[i][j]='.';
				
				}
				if(inp[i][j] == 'G')
				{
					ex=i;
					ey=j;
					inp[i][j]='.';
				
				}

				mark[0][i][j]=mark[1][i][j]=mark[2][i][j]=mark[3][i][j]=0;
				unsafe[0][i][j]=unsafe[1][i][j]=unsafe[2][i][j]=unsafe[3][i][j]=0;
				
			}
		}

		find_unsafe();

		/*for(i=0;i<n;i++)
		{
			for(j=0;j<m;j++)
			{
				printf("%d",unsafe[3][i][j]);
				
			}
			printf("\n");
		}
		printf("\n");*/

		res=bfs();
		if(res==-1)
			printf("Case #%d: impossible\n",t1);
		else
			printf("Case #%d: %d\n",t1,res);
		
	


	}



return 0;
}

#include <bits/stdc++.h>
#include <cassert>
#include <climits>
#include <cfloat>

using namespace std;

#define _ std::ios_base::Init i; std::ios_base::sync_with_stdio(0); std::cin.tie(0); \
		setlinebuf(stdout); srand(time(0));

typedef long long LL;
typedef unsigned long long ULL;

inline unsigned int rand16(){return ((rand()) << 15) ^ rand();}
inline unsigned int rand32(){return (rand16() << 16) | rand16();}
inline ULL rand64(){return ((LL)rand32() << 32) | rand32();}
inline ULL random(LL l, LL r){return l == r ? l : rand64() %(r-l) +l;}
inline double fRand(double fMin, double fMax) // RAND_MAX: [fMin,fMax)
		{ double f = (double)rand()/(RAND_MAX+1.0f); return fMin + f*(fMax-fMin); }

const int INF = 0x3f3f3f3f;
const LL INFF = 1LL << 60;
const double EPS = 1e-9;
const double PI = acos(-1.0); //2*acos(0.0); //M_PI;

int dx[]={-1,0,1,0}, dy[]={0,1,0,-1};

#define FOR(i,a,b)   for(int(i)=int(a);(i)<int(b);(i)++)
#define FOREQ(i,a,b) for(int(i)=int(a);(i)<=int(b);(i)++)
#define RFOR(i,a,b)  for(int(i)=(a),_b(b);(i)>=_b;--(i))
#define FOREACH(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define FILL(arr,val) memset((arr),(val),sizeof(arr))
#define CLR(a)        memset((a),0,sizeof(a))
#define CPY(dest,src) memcpy((dest),(src),sizeof(dest))

#define ALL(a)       (a).begin(),(a).end()
#define SZ(a)        ((int)(a).size())
#define UNIQ(a)      sort(ALL(a)); (a).erase(unique(ALL(a)),(a).end())
#define IDX(arr,ind) (lower_bound(ALL(arr),ind)-arr.begin())

#define fst first
#define snd second
#define pb  push_back
#define mp  make_pair
#define popcnt   __builtin_popcount
#define popcntll __builtin_popcountll

template< typename T, size_t N >
inline void print_ary(T(&ary)[N], int er)
		{for(int r = 0; r < er; r++) {cout << ary[r] << " ";}cout<<endl;}
template< typename T, size_t N >
inline void print_ary_eq(T(&ary)[N], int er)
		{for(int r = 1; r <= er; r++) {cout << ary[r] << " ";}cout<<endl;}
template< typename T, size_t N, size_t M >
inline void print_ary_2d(T(&ary)[N][M], int er, int ec)
		{for(int r = 0; r < er; r++) {for(int c = 0; c < ec; c++) {cout << ary[r][c] << " ";}cout<<endl;}}
template< typename T, size_t N, size_t M >
inline void print_ary_2d_eq(T(&ary)[N][M], int er, int ec)
		{for(int r = 1; r <= er; r++) {for(int c = 1; c <= ec; c++) {cout << ary[r][c] << " ";}cout<<endl;}}
inline LL lcm(LL a, LL b)
		{return a*b/__gcd(a,b);}
inline double dist(double x1, double y1, double x2, double y2)
		{return hypot(x1-x2,y1-y2);}
//scanf("%[^\n]", &s);
inline int isPowerOfTwo (unsigned int x) {return ((x != 0) && ((x & (~x + 1)) == x));}
//@ http://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
//#leading 0-bits in x (32bit fixed width representation); x=0: undefined
inline int clz(int N) {return N ? 32 - __builtin_clz(N) : INT_MIN;}
inline int clz(ULL N) {return N ? 64 - __builtin_clzll(N) : 0;}
#define bin_width 32
inline char* bin(int x,char *so){char s[bin_width+1];int i=bin_width;s[i--]=0x00;do{s[i--]=(x&1)?'1':'0';x>>=1;}while(x>0);i++;sprintf(so,"%s",s+i);return so;}
//USAGE: char buf[bin_width+1];printf("%s",bin(N,buf));

int n, m, h[101][101][4];
char g[105][105];
struct node
{
	int x,y,v;
	node(int _x, int _y, int _v)
		: x(_x), y(_y), v(_v) {}
} nodes(0,0,0);
vector<node> s;
int marked[105][105][5];
struct edge {int x,y;} S, G;

inline void f(int x, int y)
{
	int i, j;
	for(i=x-1; i>=0; i--)
	{
		if(g[i][y] == '#'
		|| g[i][y] == '<'
		|| g[i][y] == '>'
		|| g[i][y] == '^'
		|| g[i][y] == 'v')
		{
			break;
		}
	}
	h[x][y][0] = i;

	for(j=y+1; j<n; j++)
	{
		if(g[x][j] == '#'
		|| g[x][j] == '<'
		|| g[x][j] == '>'
		|| g[x][j] == '^'
		|| g[x][j] == 'v')
		{
			break;
		}
	}
	h[x][y][1] = j;

	for(j=y-1; j>=0; j--){
		if(g[x][j] == '#'
		|| g[x][j] == '<'
		|| g[x][j] == '>'
		|| g[x][j] == '^'
		|| g[x][j] == 'v')
		{
			break;
		}
	}
	h[x][y][3]=j;

	for(i=x+1; i<m; i++)
	{
		if(g[i][y] == '#'
		|| g[i][y] == '<'
		|| g[i][y] == '>'
		|| g[i][y] == '^'
		|| g[i][y] == 'v')
		{
			break;
		}
	}
	h[x][y][2] = i;
}

inline void turn()
{
	FOR(i,0,SZ(s))
	{
		s[i].v = (s[i].v+1) % 4;
	}
}

inline int is_valid(int x, int y)
{
	int i;
	if(x>=0 && x<m && y>=0 && y<n)
	{
		if(g[x][y] == '#'
		|| g[x][y] == '<'
		|| g[x][y] == '>'
		|| g[x][y] == '^'
		|| g[x][y] == 'v')
		{
			return 0;
		}
		FOR(i,0,SZ(s))
		{
			switch(s[i].v)
			{
			case 0:
				if(y==s[i].y && (x<=s[i].x && x>h[s[i].x][s[i].y][s[i].v]))
				{
					return 0;
				}
				break;
			case 1:
				if(x==s[i].x && (y>=s[i].y && y<h[s[i].x][s[i].y][s[i].v]))
				{
					return 0;
				}
				break;
			case 2:
				if(y==s[i].y && (x>=s[i].x && x<h[s[i].x][s[i].y][s[i].v]))
				{
					return 0;
				}
				break;
			case 3:
				if(x==s[i].x && (y<=s[i].y && y>h[s[i].x][s[i].y][s[i].v]))
				{
					return 0;
				}
				break;
			}
		}
		return 1;
	}
	return 0;
}

int flag, ans;
int main()
{
	int T; scanf("%d", &T);
	FOREQ(t,1,T)
	{
		CLR(marked);
		flag = 0;
		s.clear();
		queue<node> q;

		scanf("%d%d", &m,&n);
		FOR(i,0,m)
		{
			FOR(j,0,n)
			{
				scanf(" %c", &g[i][j]);
			}
		}

		FOR(i,0,m)
		{
			FOR(j,0,n)
			{
				if(g[i][j] == '<')
				{
					s.pb(node(i,j,3));
				}
				else if(g[i][j] == '>')
				{
					s.pb(node(i,j,1));
				}
				else if(g[i][j] == '^')
				{
					s.pb(node(i,j,0));
				}
				else if(g[i][j]=='v')
				{
					s.pb(node(i,j,2));
				}
				else if(g[i][j] == 'S')
				{
					S.x = i;
					S.y = j;
				}
				else if(g[i][j] == 'G')
				{
					G.x = i;
					G.y = j;
				}
			}
		}

		FOR(i,0,SZ(s))
		{
			f(s[i].x, s[i].y);
		}

		q.push(node(S.x, S.y, 0));
		int cnt;
		while(true)
		{
			turn();
			cnt = SZ(q);
			if(cnt == 0)
			{
				break;
			}
			while(cnt-- && !q.empty())
			{
				nodes = q.front();
				q.pop();
				if(marked[nodes.x][nodes.y][(nodes.v)%4] == 1)
				{
					continue;
				}
				marked[nodes.x][nodes.y][(nodes.v)%4] = 1;
				if(nodes.x==G.x && nodes.y==G.y)
				{
					ans = nodes.v;
					flag = 1;
					break;
				}
				FOR(i,0,4)
				{
					int nx = nodes.x + dx[i];
					int ny = nodes.y + dy[i];
					if(is_valid(nx, ny))
					{
						q.push(node(nx, ny, nodes.v+1));
					}
				}
			}
			if(flag)
			{
				break;
			}
		}
		if(!flag)
		{
			printf("Case #%d: impossible\n", t);
		}
		else
		{
			printf("Case #%d: %d\n", t,ans);
		}
	}
	return 0;
}

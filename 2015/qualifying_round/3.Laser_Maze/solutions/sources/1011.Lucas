#include <bits/stdc++.h>

using namespace std;

#define DEBUG_ON 0

#define INF 0x3f3f3f3f
#define REP(i,n) for(int i = 0; i < (n); ++i)
#define REPD(i,n) for(int i = (n)-1; i >= 0; --i)
#define R(x) scanf(" %d",&x)
#define RR(x,y) scanf(" %d %d",&x,&y)
#define DBG(x) if(DEBUG_ON) cout << #x << " == " << x << endl

typedef long long ll;
typedef pair<int,int> ii;

#define MAXN 510

int dl[] = {-1,0,1,0};
int dc[] = {0,1,0,-1};

bool pode[MAXN][MAXN][4];
bool vis[MAXN][MAXN][4];
bool fim[MAXN][MAXN];

char s[MAXN][MAXN];

struct state {
  int l, c, passos;
  state() {}
  state(int a, int b, int c) : l(a), c(b), passos(c) {}
};

int main() {
  int nt; R(nt);
  REP(t, nt) {
    int n, m;
    scanf(" %d %d",&n, &m);
    REP(i,n) scanf(" %s",s[i]);
    REP(i,n) REP(j,m) REP(k, 4) pode[i][j][k] = true;
    REP(i,n) REP(j,m) fim[i][j] = false;
    
    int inii = -1, inij = -1;
    bool hasfim = false;
    
    REP(i, n) REP(j, m) {
      if (s[i][j] == '#') REP(k, 4) pode[i][j][k] = false;
      else if (s[i][j] == 'S') inii = i, inij = j;
      else if (s[i][j] == 'G') {
        hasfim = true;
        fim[i][j] = true;
      }
      else if (s[i][j] != '.') {
        REP(k, 4) pode[i][j][k] = false;        
        int d;
        if (s[i][j] == '^') d = 0;
        else if (s[i][j] == '>') d = 1;
        else if (s[i][j] == 'v') d = 2;
        else if (s[i][j] == '<') d = 3;

        REP(k,4) {          
          int dd = (d + k)%4;          
          int a = i + dl[dd], b = j + dc[dd];          
          while (true) {
            if (a >= n || b >= m || a < 0 || b < 0) break;
            if (s[a][b] == '#' || s[a][b] == '^' || s[a][b] == '>' || s[a][b] == 'v' || s[a][b] == '<') break;            
            pode[a][b][k] = false;
            a += dl[dd];
            b += dc[dd];            
          }
        }
      }
    }

    if (inii == -1 || inij == -1 || !hasfim) {
      printf("Case #%d: impossible\n",t+1);
      continue;
    }
    
    int ans = -1;
    queue<state> q;
    
    memset(vis, false, sizeof(vis));
    q.push(state(inii, inij, 0));
    vis[inii][inij][0] = true;
    
    while (!q.empty()) {
      state t = q.front(); q.pop();
      int l = t.l;
      int c = t.c;
      int passos = t.passos;

      if (fim[l][c]) {
        ans = passos;
        break;
      }
      
      REP(i,4) {
        int pl = l + dl[i];
        int pc = c + dc[i];
        if (pl >= n || pl < 0 || pc >= m || pc < 0) continue;
        if (!pode[pl][pc][(passos + 1)%4]) continue;
        if (vis[pl][pc][(passos + 1)%4]) continue;
        vis[pl][pc][(passos + 1)%4] = true;
        q.push(state(pl,pc,passos+1));
      }
    }
    if (ans == -1) printf("Case #%d: impossible\n",t+1);
    else printf("Case #%d: %d\n",t+1, ans);
  }
  return 0;
}


using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Threading;
using kp.Algo;

namespace HackerCup
{
	class Solution
	{
		private const bool UseMultiThreading = false;
		private const bool UseStandardIO = false;
		private const string InputFile = @"C:\Users\kp\Downloads\laser_maze.txt";
		private const string OutputFile = @"D:\docs\Dropbox\Olymp\Sources\_submit\HackerCup 2015 Qual\C.cs" + ".output.txt";


		private int rows, cols;
		private char[][] maze;
		private int minMoves;

		void ReadData()
		{
			rows = NextInt();
			cols = NextInt();
			maze = new char[rows][];
			for ( int i = 0; i < rows; i++ )
			{
				maze[i] = NextToken().ToCharArray();
			}
			minMoves = int.MaxValue;
		}

		static void PreSolve()
		{

		}

		private int[] dr = { 0, 1, 0, -1 };
		private int[] dc = { 1, 0, -1, 0 };

		int GetDirection( char c )
		{
			if ( c == '>' ) return 0;
			if ( c == 'v' ) return 1;
			if ( c == '<' ) return 2;
			if ( c == '^' ) return 3;
			throw new NotSupportedException();
		}

		void Solve()
		{
			bool[, ,] hitByTurret = new bool[rows, cols, 4];

			int startRow = -1, startCol = -1, finishRow = -1, finishCol = -1;
			int[, ,] minDists = new int[rows, cols, 4];
			for ( int i = 0; i < rows; i++ )
			{
				for ( int j = 0; j < cols; j++ )
				{
					minDists[i, j, 0] = int.MaxValue;
					minDists[i, j, 1] = int.MaxValue;
					minDists[i, j, 2] = int.MaxValue;
					minDists[i, j, 3] = int.MaxValue;

					if ( "<>^v".Contains( maze[i][j] ) )
					{
						var startDir = GetDirection( maze[i][j] );
						for ( int t = 0; t < 4; t++ )
						{
							int r = i + dr[startDir], c = j + dc[startDir];
							while ( r >= 0 && r < rows && c >= 0 && c < cols && ( maze[r][c] == '.' || maze[r][c] == 'S' || maze[r][c] == 'G' ) )
							{
								hitByTurret[r, c, t] = true;
								r += dr[startDir];
								c += dc[startDir];
							}

							startDir++;
							if ( startDir == 4 ) startDir = 0;
						}
					}

					if ( maze[i][j] == 'S' )
					{
						startRow = i;
						startCol = j;
						minDists[i, j, 0] = 0;
					}

					if ( maze[i][j] == 'G' )
					{
						finishRow = i;
						finishCol = j;
					}
				}
			}



			var q = new Queue<int>();
			q.Enqueue( startRow );
			q.Enqueue( startCol );
			q.Enqueue( 0 );

			while ( q.Any() )
			{
				int r = q.Dequeue(), c = q.Dequeue(), time = q.Dequeue();

				if ( r == finishRow && c == finishCol )
				{
					minMoves = minDists[r, c, time];
					break;
				}
				for ( int i = 0; i < 4; i++ )
				{
					int nr = r + dr[i], nc = c + dc[i], nt = time + 1;
					if ( nt == 4 ) nt = 0;
					if ( nr >= 0 && nr < rows && nc >= 0 && nc < cols &&
							( maze[nr][nc] == '.' || maze[nr][nc] == 'S' || maze[nr][nc] == 'G' )
							&& minDists[nr, nc, nt] == int.MaxValue && !hitByTurret[nr, nc, nt] )
					{
						q.Enqueue( nr );
						q.Enqueue( nc );
						q.Enqueue( nt );
						minDists[nr, nc, nt] = minDists[r, c, time] + 1;
					}
				}
			}
		}

		void WriteAnswer()
		{
			Out.WriteLine( minMoves == int.MaxValue ? "impossible" : minMoves.ToString() );
		}

		#region ...

		void run()
		{
			if ( UseStandardIO )
			{
				var inputFileName = Path.Combine( Path.GetDirectoryName( GetType().Assembly.Location ), "input.txt" );
				_inputStream = File.OpenText( inputFileName );
				_outputStream = Console.Out;
			}
			else
			{
				_inputStream = File.OpenText( InputFile );
				_outputStream = File.CreateText( OutputFile );
			}

			PreSolve();

			int testsCount = int.Parse( _inputStream.ReadLine() );
			var solvers = new Solution[testsCount];
			for ( int i = 0; i < testsCount; ++i )
			{
				solvers[i] = new Solution();
				solvers[i].ReadData();
			}

			int done = 0;
			if ( UseMultiThreading )
			{
				solvers.AsParallel().WithDegreeOfParallelism( Math.Min( Environment.ProcessorCount, 2 ) - 1 ).ForAll(
					solver => { solver.Solve(); Console.Title = ( ++done ).ToString() + " of " + testsCount; } );
			}
			else
			{
				for ( int i = 0; i < testsCount; ++i )
				{
					solvers[i].Solve();
					Console.Title = ( ++done ).ToString() + " of " + testsCount;
				}
			}
			for ( int i = 0; i < testsCount; ++i )
			{
				Out.Write( string.Format( "Case #{0}: ", i + 1 ) );
				solvers[i].WriteAnswer();
			}
			Out.Flush();
			if ( UseStandardIO )
			{
				Console.ReadLine();
			}
			else
			{
				Out.Close();
			}
		}

		static TextWriter Out { get { return _outputStream; } }

		private static TextReader _inputStream;
		private static TextWriter _outputStream;

		public BigInteger NextBigInteger()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return BigInteger.Parse( token );
		}

		public double NextDouble()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return double.Parse( token, CultureInfo.InvariantCulture );
		}

		public long NextLong()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return long.Parse( token );
		}

		public int NextInt()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return int.Parse( token );
		}

		private static readonly Queue<string> Tokens = new Queue<string>();
		public string NextToken()
		{
			if ( Tokens.Count > 0 )
			{
				return Tokens.Dequeue();
			}
			while ( Tokens.Count == 0 )
			{
				var line = _inputStream.ReadLine();
				if ( line == null ) return null;
				foreach ( var token in line.Split( _whiteSpaces, StringSplitOptions.RemoveEmptyEntries ) )
				{
					Tokens.Enqueue( token );
				}
			}
			return Tokens.Count == 0 ? null : Tokens.Dequeue();
		}

		private readonly char[] _whiteSpaces = { ' ', '\r', '\n', '\t' };

		static void Main()
		{
			new Thread( new Solution().run, 64 * 1024 * 1024 ).Start();
		}

		#endregion
	}
}

namespace kp.Algo { }
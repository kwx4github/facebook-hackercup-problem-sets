#include <iostream>
#include <fstream>
#include<string>
#define LIMIT1 100000000
#define LIMIT2 1000000000

using namespace std;

int oms;
string maze[100];
bool walls[4][100][100];
bool check[100][100][4];
int M,N;
int startx, starty, goalx, goaly;
int minsteps;
int coun;
int maxstep;

void setWalls(){
	for(int i=0;i<M;i++)
	for(int j=0;j<N;j++){
		if(maze[i][j]=='.'||maze[i][j]=='S'||maze[i][j]=='G') walls[0][i][j]=walls[1][i][j]=walls[2][i][j]=walls[3][i][j]=true;
		else walls[0][i][j]=walls[1][i][j]=walls[2][i][j]=walls[3][i][j]=false;
	}
	
	for(int i=0;i<M;i++)
	for(int j=0;j<N;j++){
		if(maze[i][j]=='v'){
			for(int k=i+1;k<M;k++){
				if(walls[0][k][j]==false) break;
				walls[0][k][j]=false;
			}
			for(int k=i-1;k>=0;k--){
				if(walls[2][k][j]==false) break;
				walls[2][k][j]=false;
			}
			for(int k=j+1;k<N;k++){
				if(walls[3][i][k]==false) break;
				walls[3][i][k]=false;
			}
			for(int k=j-1;k>=0;k--){
				if(walls[1][i][k]==false) break;
				walls[1][i][k]=false;
			}
		}
		if(maze[i][j]=='^'){
			for(int k=i+1;k<M;k++){
				if(walls[2][k][j]==false) break;
				walls[2][k][j]=false;
			}
			for(int k=i-1;k>=0;k--){
				if(walls[0][k][j]==false) break;
				walls[0][k][j]=false;
			}
			for(int k=j+1;k<N;k++){
				if(walls[1][i][k]==false) break;
				walls[1][i][k]=false;
			}
			for(int k=j-1;k>=0;k--){
				if(walls[3][i][k]==false) break;
				walls[3][i][k]=false;
			}
		}
		if(maze[i][j]=='>'){
			for(int k=i+1;k<M;k++){
				if(walls[1][k][j]==false) break;
				walls[1][k][j]=false;
			}
			for(int k=i-1;k>=0;k--){
				if(walls[3][k][j]==false) break;
				walls[3][k][j]=false;
			}
			for(int k=j+1;k<N;k++){
				if(walls[0][i][k]==false) break;
				walls[0][i][k]=false;
			}
			for(int k=j-1;k>=0;k--){
				if(walls[2][i][k]==false) break;
				walls[2][i][k]=false;
			}
		}
		if(maze[i][j]=='<'){
			for(int k=i+1;k<M;k++){
				if(walls[3][k][j]==false) break;
				walls[3][k][j]=false;
			}
			for(int k=i-1;k>=0;k--){
				if(walls[1][k][j]==false) break;
				walls[1][k][j]=false;
			}
			for(int k=j+1;k<N;k++){
				if(walls[2][i][k]==false) break;
				walls[2][i][k]=false;
			}
			for(int k=j-1;k>=0;k--){
				if(walls[0][i][k]==false) break;
				walls[0][i][k]=false;
			}
		}
	}
}

void solve(int y, int x, int steps){
	if (steps>maxstep) maxstep=steps;
	if(x<0||x>=N) return;
	if(y<0||y>=M) return;
	
	int width, height;
	width=x-goalx;
	height=y-goaly;
	if(width<0) width=-width;
	if(height<0) height=-height;
	if(width+height+steps>minsteps-1) return;
	
	if(!walls[steps%4][y][x]&&steps!=0) return;
		
	coun++;
	if(minsteps==oms){ if(coun>=LIMIT1) return;}
	else if(coun>=LIMIT2) return;
	
	if(maze[y][x]=='G'){
		if(minsteps>steps) minsteps=steps;
		return;
	}
	
	if(check[y][x][steps%4]) return;
	check[y][x][steps%4]=true;
	
	solve(y+1,x,steps+1);
	if(minsteps==oms){ if(coun>=LIMIT1) return;}
	else if(coun>=LIMIT2) return;
	solve(y-1,x,steps+1);
	if(minsteps==oms){ if(coun>=LIMIT1) return;}
	else if(coun>=LIMIT2) return;
	solve(y,x+1,steps+1);
	if(minsteps==oms){ if(coun>=LIMIT1) return;}
	else if(coun>=LIMIT2) return;
	solve(y,x-1,steps+1);
	if(minsteps==oms){ if(coun>=LIMIT1) return;}
	else if(coun>=LIMIT2) return;
	
	check[y][x][steps%4]=false;
}

int main() {
    ifstream fin ("laser_maze.txt");
	ofstream fout ("mazeout.txt");
	int T;
	fin>>T;
	for(int i=0;i<T;i++){
		coun=0;
		maxstep=0;
		fin>>M>>N;
		for(int a=0;a<M;a++)
		for(int b=0;b<N;b++)
		for(int c=0;c<4;c++)
			check[a][b][c]=false;
		for(int j=0;j<M;j++){
			fin>>maze[j];
			for(int k=0;k<N;k++){
				if(maze[j][k]=='S'){
					starty=j;
					startx=k;
				}
				if(maze[j][k]=='G'){
					goaly=j;
					goalx=k;
				}
			}
		}
		oms=4*M*N;
		minsteps=oms;
		setWalls();
		fout<<"Case #"<<i+1<<": ";
		solve(starty, startx, 0);
		if(minsteps<oms) fout<<minsteps<<endl;
		else fout<<"impossible"<<endl;
	}
    return 0;
}
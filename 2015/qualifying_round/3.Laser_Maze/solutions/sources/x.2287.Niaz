#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
#include<vector>
#define N 105
using namespace std;

char board[N][N];
char b[N][N][4];
bool v[N][N][4];

bool islaser(char ch)
{
    return ch=='<'||ch=='>'||ch=='^'||ch=='v';
}
int getDir(int ch)
{
    if(ch=='^') return 0;
    else if(ch=='>') return 1;
    else if(ch=='v') return 2;
    else return 3;
}

bool isWall(char ch)
{
    return ch=='#';
}
int diff(int d1,int d2)
{
    return (d2+4-d1)%4;
}
int getDis(int m,int n)
{
    memset(b,'.',sizeof(b));
    memset(v,0,sizeof(v));

    //from left

    for(int i=0;i<m;i++)
    {
        int col=-1,dir;
        for(int j=0;j<n;j++)
        {
            char c = board[i][j];
            if(isWall(c)) col=-1;
            else if(islaser(c))
            {
                dir = getDir(c);
                col=j;
            }
            else if(col!=-1)
            {
                b[i][j][diff(dir,1)]='#';
            }
        }
    }


    // from right

    for(int i=0;i<m;i++)
    {
        int col=n,dir;
        for(int j=n-1;j>=0;j--)
        {
            char c = board[i][j];
            if(isWall(c)) col=n;
            else if(islaser(c))
            {
                dir = getDir(c);
                col=j;
            }
            else if(col!=n)
            {
                b[i][j][diff(dir,3)]='#';
            }
        }
    }

    //from up


    for(int j=0;j<n;j++)
    {
        int row=-1,dir;
        for(int i=0;i<m;i++)
        {
            char c =board[i][j];
            if(isWall(c)) row=-1;
            else if(islaser(c)) row=i,dir = getDir(c);
            else if(row!=-1) b[i][j][diff(dir,2)]='#';

        }
    }

    //from down



    for(int j=0;j<n;j++)
    {
        int row=m,dir;
        for(int i=m-1;i>=0;i--)
        {
            char c =board[i][j];
            if(isWall(c)) row=m;
            else if(islaser(c)) row=i,dir = getDir(c);
            else if(row!=m) b[i][j][diff(dir,0)]='#';

        }
    }



    int s_i,s_j,g_i,g_j;
    for(int i=0;i<m;i++)
    for(int j=0;j<n;j++)
    {
        char c = board[i][j];
        if(c=='S') s_i=i,s_j=j;
        if(c=='G') g_i=i,g_j=j;
        if(c=='#')
        {
            for(int k=0;k<4;k++)
            b[i][j][k]='#';
        }
    }
    queue<int> q_i,q_j,q_d;
    if(v[s_i][s_j][0]==false)
    {
        v[s_i][s_j][0]=true;
        q_i.push(s_i);
        q_j.push(s_j);
        q_d.push(0);
    }
    while(!q_i.empty())
    {
        int i,j,d;
        i=q_i.front();
        q_i.pop();
        j=q_j.front();
        q_j.pop();
        d=q_d.front();
        q_d.pop();
        int di[]={0,0,-1,1};
        int dj[]={-1,1,0,0};
        for(int k=0;k<4;k++)
        {
            int n_i = i+di[k];
            int n_j = j+dj[k];
            int n_d= d+1;
            if(n_i>=0&&n_i<m&&n_j>=0&&n_j<n&&v[n_i][n_j][n_d%4]==false&&b[n_i][n_j][n_d%4]=='.')
            {
                v[n_i][n_j][n_d%4]=true;
                if(n_i==g_i&&n_j==g_j) return n_d;
                q_i.push(n_i);
                q_j.push(n_j);
                q_d.push(n_d);
            }
        }
    }
    return -1;
}
int main()
{
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int T;
    cin>>T;
    for(int t=1;t<=T;t++)
    {
        int m,n;
        cin>>m>>n;
        for(int i=0;i<m;i++)
        cin>>board[i];
        int steps;
        steps=getDis(m,n);
        cout<<"Case #"<<t<<": ";
        if(steps==-1) cout<<"impossible";
        else cout<<steps;
        cout<<endl;
    }
    return 0;
}

/*#include <cstdio>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <ctime>
#include <cassert>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <unordered_set>
#include <unordered_map>*/
#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sc second
#define mp make_pair
#define pb push_back

#define epr(...) fprintf(stderr, __VA_ARGS__)
#define dbg(x) { cerr << #x << " = " << x << endl; }
const int N = 100 + 10;
const int INF = 1e9;
const int dx[4] = {0, 1, 0, -1};
const int dy[4] = {1, 0, -1, 0};

struct state {  
    int x, y, t;   
    state() { }
    state(int x, int y, int t): x(x), y(y), t(t) { }
    void add(int i) {
        x += dx[i];
        y += dy[i];
        t = (t + 1) % 4;
    }
    void print() {
        cerr << "x y t: " << x << " " << y << " " << t << endl;
    }
};

int n, m;
char s[N][N];
int dist[N][N][4];
bool use[N][N][4];
queue < state > q;

void read() {
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++)
        scanf("%s", s[i]);
}

bool check(int x, int y) {
    return 0 <= x && x < n && 0 <= y && y < m;
}

void solve() {
    memset(use, 0, sizeof(use));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++) {
            if (s[i][j] == '>') s[i][j] = '0';
            if (s[i][j] == 'v') s[i][j] = '1';
            if (s[i][j] == '<') s[i][j] = '2';
            if (s[i][j] == '^') s[i][j] = '3';
        }
    int xS = -1, yS = -1, xG = -1, yG = -1;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++) {
            if (s[i][j] == 'S') {
                xS = i;
                yS = j;
                s[i][j] = '.';
            }
            if (s[i][j] == 'G') {
                xG = i;
                yG = j;
                s[i][j] = '.';
            }
        }

    for (int t = 0; t < 4; t++) {
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++) 
                if (s[i][j] != '.' && s[i][j] != 'S' && s[i][j] != 'G')
                    use[i][j][t] = 1;                  
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                if ('0' <= s[i][j] && s[i][j] <= '3') {
                    int dir = s[i][j] - '0';
                    //cerr << "dir: " << dir << endl;
                    dir = (dir + t) % 4;
                    int x = i + dx[dir];
                    int y = j + dy[dir];
                    for (; check(x, y) && s[x][y] == '.'; x += dx[dir], y += dy[dir]) {
                        //cerr << "!! x y t: " << x << " " << y << " " << t << endl;
                        use[x][y][t] =1;
                    }
                }
    }
    memset(dist, 63, sizeof(dist));
    q.push(state(xS, yS, 0));    
    dist[xS][yS][0] = 0;
    while (!q.empty()) {
        state v = q.front();
        //v.print();
        q.pop();
        for (int i = 0; i < 4; i++) {
            state u = v;
            if (!check(u.x + dx[i], u.y + dy[i])) continue;
            u.add(i);
            if (use[u.x][u.y][u.t]) continue;
            if (dist[u.x][u.y][u.t] > dist[v.x][v.y][v.t] + 1) {
                dist[u.x][u.y][u.t] = dist[v.x][v.y][v.t] + 1;
                q.push(u);
            }
        }
    }
    int mn = INF;
    for (int i = 0; i < 4; i++)
        mn = min(dist[xG][yG][i], mn);
    if (mn < INF)
        printf("%d\n", mn);
    else
        printf("impossible\n");
}

void printAns() {

}

void stress() {

}


int main(){
#ifdef DEBUG
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
#endif
    if (1) {
        int t;
        scanf("%d", &t);
        for (int i = 0; i < t; i++) {
            printf("Case #%d: ", i + 1);
            read();
            solve();
            printAns();
        }
    }
    else {
        stress();
    }

    return 0;
}


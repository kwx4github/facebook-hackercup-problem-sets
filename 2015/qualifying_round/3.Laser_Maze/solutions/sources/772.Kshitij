#include<iostream>
#include <iostream>
#include <cstdio>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
using namespace std;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define MOD 1000000007
#define LL  long long

#include <iomanip>
#include <string>
using namespace std;

struct node
{
    int i,j;
    int moves;
    node(int a,int b,int c)
    {
        i=a;j=b;moves=c;
    }
    node(){}
};

bool check_valid(int i,int j,int m,int n)
{
    if(i<0)return false;
    if(i>=m)return false;
    if(j<0)return false;
    if(j>=n)return false;
    return true;
}
int main()
{
    freopen("laser_maze.txt", "r", stdin);
    freopen("o3.txt", "w", stdout);

    int t;
    cin>>t;

    for(int test=1;test<=t;test++)
    {

        cout<<"Case #"<<test<<": ";

        int m,n;
        cin>>m>>n;
        int maze[m][n],sti,stj;
        string temp;
        vector< pair<int,int> > las;
        bool poss[m][n][4];
        for(int i=0;i<m;i++)
        {
            cin>>temp;
            for(int j=0;j<n;j++)
            {
                //poss[i][j]={true};
                if(temp[j]=='.')maze[i][j]=4;
                if(temp[j]=='#')maze[i][j]=-1;
                if(temp[j]=='S'){maze[i][j]=10;sti=i;stj=j;}
                if(temp[j]=='G')maze[i][j]=100;
                if(temp[j]=='^'){maze[i][j]=0;las.push_back(make_pair(i,j));}
                if(temp[j]=='>'){maze[i][j]=1;las.push_back(make_pair(i,j));}
                if(temp[j]=='v'){maze[i][j]=2;las.push_back(make_pair(i,j));}
                if(temp[j]=='<'){maze[i][j]=3;las.push_back(make_pair(i,j));}
            }
            //cout<<"Entereddd"<<temp<<endl;
        }

        bool check;
        bool visited[m][n][4];
        for(int mod=0;mod<4;mod++)
        {
            for(int i=0;i<m;i++)
            {
                for(int j=0;j<n;j++)
                {
                    if(!(maze[i][j] == 4 || maze[i][j]==10 || maze[i][j]==100)){poss[i][j][mod]=false;continue;}
                    check=true;
                    //if(i==1 && j==1)cout<<"Entered"<<endl;
                    for(int k=j+1;k<n;k++)
                    {
                        if(maze[i][k]==-1)break;
                        if(maze[i][k] == 3){check=false;break;}
                        if(maze[i][k]>=0 && maze[i][k]<=3)break;
                    }
                    for(int k=j-1;k>=0;k--)
                    {
                        if(maze[i][k]==-1)break;
                        if(maze[i][k] == 1){check=false;break;}
                        if(maze[i][k]>=0 && maze[i][k]<=3)break;
                    }
                    for(int k=i+1;k<m;k++)
                    {
                        if(maze[k][j]==-1)break;
                        if(maze[k][j] == 0){check=false;break;}
                        if(maze[k][j]>=0 && maze[k][j]<=3)break;
                    }
                    for(int k=i-1;k>=0;k--)
                    {
                        if(maze[k][j]==-1)break;
                        if(maze[k][j] == 2){check=false;break;}
                        if(maze[k][j]>=0 && maze[k][j]<=3)break;
                    }
                    if(check){poss[i][j][mod]=true;}//cout<<i<<" "<<j<<" "<<mod<<" allowed "<<endl;}
                    else poss[i][j][mod]=false;
                    visited[i][j][mod]=false;
                }
            }
            for(int l=0;l<las.size();l++)
            {
                maze[las[l].first][las[l].second]++;
                maze[las[l].first][las[l].second]%=4;
            }
        }

        queue<node> bfs;
        bfs.push(node(sti,stj,0));
        visited[sti][stj][0]=true;
        int ti,tj,tm;
        node tempo;
        bool res=false;
        while(!bfs.empty())
        {
            tempo=bfs.front();
            bfs.pop();
            ti=tempo.i;
            tj=tempo.j;
            tm=tempo.moves;
            //cout<<ti<<" "<<tj<<" "<<tm<<endl;
            if(maze[ti][tj]==100){cout<<tm<<endl;res=true;break;}

            if(check_valid(ti+1,tj,m,n))
            {
                if(poss[ti+1][tj][(tm+1)%4] && !visited[ti+1][tj][(tm+1)%4])
                {
                    bfs.push(node(ti+1,tj,tm+1));visited[ti+1][tj][(tm+1)%4]=true;
                }
            }
            if(check_valid(ti-1,tj,m,n)  )
            {
                if(poss[ti-1][tj][(tm+1)%4] && !visited[ti-1][tj][(tm+1)%4])
                {
                    bfs.push(node(ti-1,tj,tm+1));visited[ti-1][tj][(tm+1)%4]=true;
                }
            }
            if(check_valid(ti,tj+1,m,n))
            {
                if(poss[ti][tj+1][(tm+1)%4] && !visited[ti][tj+1][(tm+1)%4])
                {
                    bfs.push(node(ti,tj+1,tm+1));visited[ti][tj+1][(tm+1)%4]=true;
                }
            }
            if(check_valid(ti,tj-1,m,n))
            {
                if(poss[ti][tj-1][(tm+1)%4] && !visited[ti][tj-1][(tm+1)%4])
                {
                    bfs.push(node(ti,tj-1,tm+1));visited[ti][tj-1][(tm+1)%4]=true;
                }
            }
        }
        if(!res)cout<<"impossible"<<endl;
        while(!bfs.empty())bfs.pop();
    }
}

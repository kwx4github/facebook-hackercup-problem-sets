#include <bits/stdc++.h>

using namespace std;

vector <pair <int, int> > directions = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

int main() {

  int T;
  cin >> T;

  for (int t = 0; t < T; ++t) {

    int mp[4][105][105];
    char mf[105][105];

    int M, N;
    cin >> M >> N;

    for (int i = 0; i < M; ++i) {
      for (int j = 0; j < N; ++j) {
        mp[0][i][j] = 0; 
        mp[1][i][j] = 0; 
        mp[2][i][j] = 0; 
        mp[3][i][j] = 0; 
      }
    }

    pair <int, int> S, G;

    for (int i = 0; i < M; ++i) {
      string a;
      cin >> a;
      for (int j = 0; j < N; ++j) {
        mf[i][j] = a[j];
        if (mf[i][j] == 'S') {
          S = {i, j};
          mf[i][j] = '.';
        } else if (mf[i][j] == 'G') {
          G = {i, j};
          mf[i][j] = '.';
        } 
      }
    }

    for (int i = 0; i < M; ++i) {
      for (int j = 0; j < N; ++j) {
        if (mf[i][j] != '.') {
          mp[0][i][j] = 1; 
          mp[1][i][j] = 1; 
          mp[2][i][j] = 1; 
          mp[3][i][j] = 1; 
        }
      }
    }

    for (int i = 0; i < M; ++i) {
      for (int j = 0; j < N; ++j) {
        vector <int> order = {-1};
        if (mf[i][j] == '^') {
          order = {0, 1, 2, 3};
        } else if (mf[i][j] == '>') {
          order = {1, 2, 3, 0};
        } else if (mf[i][j] == 'v') {
          order = {2, 3, 0 ,1};
        } else if (mf[i][j] == '<') {
          order = {3, 0, 1, 2};
        }
        if (order[0] != -1) {
          for (int r = 0; r < 4; ++r) {
            int x = i, y = j;
            x += directions[order[r]].first;
            y += directions[order[r]].second;
            // cout << directions[order[r]].first << " " << directions[order[r]].second << "\n";
            while (0 <= x && x < M && 0 <= y && y < N && mp[order[r]][x][y] != 1) {
              mp[r][x][y] = 2;
              x += directions[order[r]].first;
              y += directions[order[r]].second;
            }

            x = i, y = j;
            int r2 = (r + 1) % 4;
            // cout << directions[order[r2]].first << " " << directions[order[r2]].second << "\n";
            x += directions[order[r2]].first;
            y += directions[order[r2]].second;
            // while (0 <= x && x < M && 0 <= y && y < N && mp[order[r]][x][y] != 1) {
            //   mp[r][x][y] = 2;
            //   x += directions[order[r2]].first;
            //   y += directions[order[r2]].second;
            // }
          }
        }
      }
    }

    // bfs
    queue <vector <int> > st;
    st.push({0, S.first, S.second});
    mp[0][S.first][S.second] = -1;

    while (!st.empty()) {
      vector <int> here = st.front();
      st.pop();

      int nextLevel = (here[0] + 1) % 4;
      int x = here[1];
      int y = here[2];

      for (int i = 0; i < 4; ++i) {
        int x2 = x + directions[i].first;
        int y2 = y + directions[i].second;
        // if (mp[here[0]][x][y] == -4) {
        //   cout << x2 << " " << y2 << "\n";
        // }
        if (0 <= x2 && x2 < M && 0 <= y2 && y2 < N && mp[nextLevel][x2][y2] == 0) {
          st.push({nextLevel, x2, y2});
          mp[nextLevel][x2][y2] = mp[here[0]][x][y] - 1;
        }
      }

      // for (int k = 0; k < 4; ++k) {
      //   for (int i = 0; i < M; ++i) {
      //     for (int j = 0; j < N; ++j) {
      //       cout << setw(4) << mp[k][i][j];
      //     }
      //     cout << "\n";
      //     }
      //     cout << "\n";
      //   }
      // cout << "\n";
      // cout << "---------------------------------\n";
    }


    int best = (1 << 30);
    for (int i = 0; i < 4; ++i) {
      if (mp[i][G.first][G.second] < 0) {
        best = min(best, abs(mp[i][G.first][G.second]));
      }
    }

    cout << "Case #" << t + 1 << ": ";
    if (best < (1 << 30)) {
      cout << best - 1;
    } else {
      cout << "impossible";
    }
    cout << "\n";


    // for (int k = 0; k < 4; ++k) {
    //   for (int i = 0; i < M; ++i) {
    //     for (int j = 0; j < N; ++j) {
    //       cout << setw(4) << mp[k][i][j];
    //     }
    //     cout << "\n";
    //   }
    //   cout << "\n";
    // }
    // cout << "\n";

  }

  return 0;
}
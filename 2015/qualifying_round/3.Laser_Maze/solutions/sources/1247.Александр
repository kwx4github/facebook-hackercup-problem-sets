var
  maze, dist: array[0 .. 3, 0 .. 100, 0 .. 100] of longint;
  a: array[0 .. 100, 0 .. 100] of char;
  q: array[0 .. 100000, 0 .. 2] of longint;
  ans: array[1 .. 2] of longint;
  t, m, n, i, j, k, z, left, right, out: longint;
 
function check(L, b, c: longint): boolean;
begin
  if (b <= m) and (b >= 1) and (c <= n) and (c >= 1) then
    if (L = -1) and ((a[b, c] = '.') or (a[b, c] = 'G') or (a[b, c] = 'S')) then
      exit(True)
    else if (L >= 0) and (maze[L, b, c] = 0) and (dist[L, b, c] = 0) then
      exit(True);
  exit(False);
end;
 
procedure fire(a, b, da, db: longint);
var
  i, tmp, ca, cb: longint;
begin
  for i := 0 to 3 do
    begin
      maze[i, a, b] := -1;
      ca := a + da;
      cb := b + db;
      while check(-1, ca, cb) do
        begin
          maze[i, ca, cb] := -1;
          inc(ca, da);
          inc(cb, db);
        end;
      tmp := -da;
      da := db;
      db := tmp;
    end;
end;
 
procedure add(a, b, c, d: longint);
begin
  if check(a, b, c) then
    begin
      dist[a, b, c] := d + 1;
      q[right][0] := a;
      q[right][1] := b;
      q[right][2] := c;
      inc(right);
    end;
end;
 
begin
  read(t);
  for z := 1 to t do
    begin
      readln(m, n);
      for k := 0 to 3 do
        for i := 1 to m do
          for j := 1 to n do
            begin
              dist[k, i, j] := 0;
              maze[k, i, j] := 0;
            end;
      for i := 1 to m do
        begin
          for j := 1 to n do
            read(a[i][j]);
          readln();
        end;
      for i := 1 to m do
        for j := 1 to n do
          if a[i][j] = '#' then
            for k := 0 to 3 do
              maze[k][i][j] := -1
          else if a[i][j] = '>' then
            fire(i, j, 0, 1)
          else if a[i][j] = '<' then
            fire(i, j, 0, -1)
          else if a[i][j] = 'v' then
            fire(i, j, 1, 0)
          else if a[i][j] = '^' then
            fire(i, j, -1, 0)
          else if a[i][j] = 'S' then
            begin
              q[1][1] := i;
              q[1][2] := j;
              q[1][0] := 0;
              dist[0][i][j] := 1;
            end
          else if a[i][j] = 'G' then
            begin
              ans[1] := i;
              ans[2] := j;
            end;
      right := 2;
      left := 1;
      while left < right do
        begin
          add((q[left][0] + 1) mod 4, q[left][1] + 1, q[left][2], dist[q[left][0], q[left][1], q[left][2]]);
          add((q[left][0] + 1) mod 4, q[left][1] - 1, q[left][2], dist[q[left][0], q[left][1], q[left][2]]);
          add((q[left][0] + 1) mod 4, q[left][1], q[left][2] - 1, dist[q[left][0], q[left][1], q[left][2]]);
          add((q[left][0] + 1) mod 4, q[left][1], q[left][2] + 1, dist[q[left][0], q[left][1], q[left][2]]);
          inc(left);
        end;
      {for k := 0 to 3 do
        begin
          writeln();
          for i := 1 to m do
            begin
              for j := 1 to n do
                write(dist[k, i, j]: 4);
              writeln;
            end;
        end;}
      write('Case #', z, ': ');
      out := -1;
      for i := 0 to 3 do
        if (dist[i, ans[1], ans[2]] > 0) and ((out = -1) or (out > dist[i, ans[1], ans[2]])) then
          out := dist[i, ans[1], ans[2]];
      if out = -1 then 
        writeln('impossible')
      else
        writeln(out - 1);
    end;
end.
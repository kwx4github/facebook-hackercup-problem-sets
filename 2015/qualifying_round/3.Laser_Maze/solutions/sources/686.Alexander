#include <algorithm>
#include <cstring>
#include <cstdio>
using namespace std;

const int MAXN = 100;
const int dr[] = { 0, -1, 0, 1 }, dc[] = { -1, 0, 1, 0 };

int M, N;
char F[MAXN][MAXN + 1];
int res[MAXN][MAXN][4], L, R;
pair<pair<int, int>, int> qq[MAXN * MAXN * 4];
int start_r, start_c, end_r, end_c;

int main()
{
    int T; scanf("%d", &T);
    for (int t = 0; t < T; ++t) {
        printf("Case #%d: ", t + 1);

        scanf("%d%d", &M, &N);
        for (int r = 0; r < M; ++r) {
            scanf("%s", &F[r][0]);

            for (int c = 0; c < N; ++c)
                switch (F[r][c]) {
                    case 'S': start_r = r; start_c = c; F[r][c] = '.'; break;
                    case 'G': end_r = r; end_c = c; F[r][c] = '.'; break;
                    case '<': F[r][c] = 0; break;
                    case '^': F[r][c] = 1; break;
                    case '>': F[r][c] = 2; break;
                    case 'v': F[r][c] = 3; break;
                }
        }

        memset(res, -1, sizeof(res));
        res[start_r][start_c][0] = 0;
        qq[0] = make_pair(make_pair(start_r, start_c), 0);
        L = R = 0;

        while (L <= R) {
            int cur_r = qq[L].first.first;
            int cur_c = qq[L].first.second;
            int cur_t = qq[L].second;
            ++L;

            for (int d = 0; d < 4; ++d) {
                int new_r = cur_r + dr[d], new_c = cur_c + dc[d], new_t = (cur_t + 1) % 4;
                if (new_r < 0 || new_r >= M || new_c < 0 || new_c >= N) continue;
                if (F[new_r][new_c] != '.') continue;
                if (res[new_r][new_c][new_t] != -1) continue;

                bool killed = false;

                for (int s = 0; s < 4; ++s) {
                    int shoot_r = new_r, shoot_c = new_c;
                    while (shoot_r >= 0 && shoot_r < M && shoot_c >= 0 && shoot_c < N) {
                        if (F[shoot_r][shoot_c] != '.') {
                            if (F[shoot_r][shoot_c] < 4 && (F[shoot_r][shoot_c] + new_t) % 4 == s) killed = true;
                            break;
                        }

                        shoot_r -= dr[s]; shoot_c -= dc[s];
                    }
                }

                if (!killed) {
                    res[new_r][new_c][new_t] = res[cur_r][cur_c][cur_t] + 1;
                    qq[++R] = make_pair(make_pair(new_r, new_c), new_t);
                }
            }
        }

        int answer = -1;
        for (int tt = 0; tt < 4; ++tt)
            if (res[end_r][end_c][tt] != -1 && (answer == -1 || res[end_r][end_c][tt] < answer))
                answer = res[end_r][end_c][tt];

        if (answer == -1) printf("impossible\n"); else printf("%d\n", answer);
    }

    return 0;
}

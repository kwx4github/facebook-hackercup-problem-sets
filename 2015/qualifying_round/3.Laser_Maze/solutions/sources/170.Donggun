#!/usr/bin/env python3
# vim:set sw=4 et smarttab:
# Hacker Cup 2015 Qualification Round

import sys
import collections

def find(n, m, map, p):
    for i in range(n):
        for j in range(m):
            if map[i][j] == p:
                map[i][j] = '.'
                return i, j

def go(cur, d):
    dir = [(-1, 0), (0, 1), (1, 0), (0, -1)]
    return (cur[0] + dir[d][0], cur[1] + dir[d][1])

def can_go(n, m, cur, d):
    cur = go(cur, d)
    return cur[0] >= 0 and cur[0] < n and cur[1] >= 0 and cur[1] < m

def is_turret(ch):
    return ch == '>' or ch == '<' or ch == '^' or ch == 'v'

def turret_direction(ch):
    if ch == '^':
        return 0
    elif ch == '>':
        return 1
    elif ch == 'v':
        return 2
    elif ch == '<':
        return 3

def is_empty(pos, map):
    return map[pos[0]][pos[1]] == '.'

def rotate(n, m, map, n_rotate):
    ret = [['.' for j in range(m)] for i in range(n)]
    for i in range(n):
        for j in range(m):
            if map[i][j] == '#':
                ret[i][j] = '#'
            elif is_turret(map[i][j]):
                ret[i][j] = '#'
                cur = (i, j)
                d = turret_direction(map[i][j]) + n_rotate
                d %= 4
                while can_go(n, m, cur, d):
                    cur = go(cur, d)
                    if not is_empty(cur, map):
                        break
                    ret[cur[0]][cur[1]] = '#'
    return ret

def bfs(n, m, rmap, s, g):
    queue = collections.deque()
    queue.append((s, 0))
    discovered = set()
    while len(queue) > 0:
        cur, t = queue.popleft()
        if cur == g:
            return t
        for d in range(4):
            if not can_go(n, m, cur, d):
                continue
            next = go(cur, d)
            if not is_empty(next, rmap[(t + 1) % 4]):
                continue
            if (next, (t + 1) % 4) in discovered:
                continue
            discovered.add((next, (t + 1) % 4))
            queue.append((next, t + 1))
    return None

def solve(n, m, map):
    s = find(n, m, map, 'S')
    g = find(n, m, map, 'G')
    rmap = []
    for t in range(4):
        rmap.append(rotate(n, m, map, t))
    ret = bfs(n, m, rmap, s, g)
    if ret == None:
        return 'impossible'
    return ret

def main():
    filein = sys.stdin
    line = filein.readline()
    fields = line.split()
    assert len(fields) == 1
    ntc = int(fields[0])

    for tc in range(1, ntc + 1):
        line = filein.readline()
        fields = line.split()
        assert len(fields) == 2
        n = int(fields[0])
        m = int(fields[1])
        map = []
        for i in range(n):
            line = filein.readline()
            fields = line.split()
            assert len(fields) == 1
            assert len(fields[0]) == m
            map.append(list(fields[0]))
        answer = solve(n, m, map)
        print('Case #{}: {}'.format(tc, answer))

if __name__ == '__main__':
    main()

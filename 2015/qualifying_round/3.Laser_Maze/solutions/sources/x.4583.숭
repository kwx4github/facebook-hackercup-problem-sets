#include <stdio.h>
#include <algorithm>
#include <queue>

using namespace std;

queue < pair <int, pair <int, int> > > Q;
int n, m;
int dx, dy;
char q[111][111];
int v[111][111][5];
int qx[5] = {0, 0, 1, -1};
int qy[5] = {1, -1, 0, 0};

void check(int i, int j, int a, int b, int c, int d){

	for (int k = i - 1; k >= 1 && q[k][j] == '.'; k--)
		v[k][j][a] = 1;
	for (int k = j + 1; k <= m && q[i][k] == '.'; k++)
		v[i][k][b] = 1;
	for (int k = i + 1; k <= n && q[k][j] == '.'; k++)
		v[k][j][c] = 1;
	for (int k = j - 1; k >= 1 && q[i][k] == '.'; k--)
		v[i][k][d] = 1;

}
int main(){

	int T;
	scanf("%d", &T);

	for (int cnt = 1; cnt <= T; cnt++){

		scanf("%d %d", &n, &m);

		for (int i = 1; i <= n; i++)
			scanf("%s", q[i] + 1);

		int stx, sty;

		for (int i = 1; i <= n; i++){
			for (int j = 1; j <= m; j++){
				if (q[i][j] == 'S'){
					stx = i;
					sty = j;
					q[i][j] = '.';
				}else if (q[i][j] == 'G'){
					q[i][j] = '.';
					dx = i;
					dy = j;
				}else if (q[i][j] == '^'){
					check(i, j, 0, 1, 2, 3);
				}else if (q[i][j] == 'v'){
					check(i, j, 2, 3, 0, 1);
				}else if (q[i][j] == '<'){
					check(i, j, 1, 2, 3, 0);
				}else if (q[i][j] == '>'){
					check(i, j, 3, 0, 1, 2);
				}
			}
		}

		Q.push(make_pair(0, make_pair(stx, sty)));

		int len;
		while (!Q.empty()){
		
			pair <int, pair <int, int> > pp = Q.front();
			int di = (pp.first + 1) % 4;
			len = pp.first + 1;
			int x = pp.second.first;
			int y = pp.second.second;
			if (x == dx && y == dy) break;
			Q.pop();
			
			for (int i = 0; i < 4; i++){
				if (q[x + qx[i]][y + qy[i]] == '.' && v[x + qx[i]][y + qy[i]][di] == 0){
					v[x + qx[i]][y + qy[i]][di] = 1;
					Q.push(make_pair(len, make_pair(x + qx[i], y + qy[i])));
				}
			}
		}
		printf("Case #%d: ", cnt);
		if (!Q.empty())
			printf("%d\n", len - 1);
		else
			printf("impossible\n");

		while (!Q.empty()) Q.pop();
		
		for (int i = 1; i <= n; i++)
			for (int j = 1; j < m; j++){
				q[i][j] = '\0';
				for (int k = 0; k < 4; k++) v[i][j][k] = 0;
			}

	}
	return 0;

}
/*
ID: Sfiction
COMP: 2015HackerCup
ROUND: Qualification
PROB: C
*/
#include <cstdio>
#include <cstring>

const int MAXN=110;
const int d[4][2]={-1,0,0,1,1,0,0,-1};

int n,m;
int sx,sy;
char map[4][MAXN][MAXN];
bool vis[4][MAXN][MAXN];

void Init(){
	static int check[300];
	memset(check,0,sizeof(check));
	memset(map,0,sizeof(map));
	check['.']=check['#']=check['S']=check['G']=-1;
	check['^']=0;
	check['>']=1;
	check['v']=2;
	check['<']=3;
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;++i){
		scanf("%s",map[0][i]+1);
		for (int j=1;j<=m;++j)
			if (check[map[0][i][j]]!=-1){
				map[0][i][j]=check[map[0][i][j]];
				map[1][i][j]=(map[0][i][j]+1)&3;
				map[2][i][j]=(map[0][i][j]+2)&3;
				map[3][i][j]=(map[0][i][j]+3)&3;
			}
			else{
				map[1][i][j]=map[2][i][j]=map[3][i][j]=map[0][i][j];
				if (map[0][i][j]=='S'){
					sx=i;
					sy=j;
				}
			}
		map[0][i][0]=map[1][i][0]=map[2][i][0]=map[3][i][0]='#';
		map[0][i][m+1]=map[1][i][m+1]=map[2][i][m+1]=map[3][i][m+1]='#';
	}
	for (int j=0;j<=m+1;++j){
		map[0][0][j]=map[1][0][j]=map[2][0][j]=map[3][0][j]='#';
		map[0][n+1][j]=map[1][n+1][j]=map[2][n+1][j]=map[3][n+1][j]='#';
	}
	int dire,x,y;
	for (int k=0;k<4;++k)
		for (int i=1;i<=n;++i)
			for (int j=1;j<=m;++j)
				if (map[k][i][j]<4){
					dire=map[k][i][j];
					x=i;
					y=j;
					do{
						map[k][x][y]=4;
						x+=d[dire][0];
						y+=d[dire][1];
					}while (map[k][x][y]!='#' && map[k][x][y]>=4);
					map[k][i][j]=dire;
				}
	for (int k=0;k<4;++k)
		for (int i=1;i<=n;++i)
			for (int j=1;j<=m;++j)
				if (map[k][i][j]<=4)
					map[k][i][j]='#';
}

int BFS(){
	static int que[MAXN*MAXN*4][3];
	int l=0,r=1;
	int x,y,k;
	
	memset(vis,0,sizeof(vis));
	que[0][0]=sx;
	que[0][1]=sy;
	que[0][2]=0;
	vis[0][sx][sy]=true;
	for (;l<r;++l){
		k=(que[l][2]+1)&3;
		for (int i=0;i<4;++i){
			x=que[l][0]+d[i][0];
			y=que[l][1]+d[i][1];
			if (!vis[k][x][y] && map[k][x][y]!='#'){
				if (map[k][x][y]=='G')
					return que[l][2]+1;
				que[r][0]=x;
				que[r][1]=y;
				que[r][2]=que[l][2]+1;
				vis[k][x][y]=true;
				++r;
			}
		}
	}
	return -1;
}

int main(){
	int cas;
	scanf("%d",&cas);
	for (int casi=1;casi<=cas;++casi){
		printf("Case #%d: ",casi);
		Init();
		int ans=BFS();
		if (ans<0)
			puts("impossible");
		else
			printf("%d\n",ans);
	}
	return 0;
}

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.LinkedList;

public class QUAL_THIRD {

	static Reader sc = new Reader();
	static PrintWriter out = new PrintWriter(System.out); 

	static int[] dr = { 1, 0, -1, 0 }; // S,E,N,W neighbors
	static int[] dc = { 0, 1, 0, -1 }; // Grid exploration

	static char[] dir = { '^', '<' , 'v', '>' };

	static int maxRow;
	static int maxCol;

	static char[][] map;

	static boolean laser(int row, int col, int step) {
		boolean burned = false;

		for (int i = row; i < maxRow; i++) {
			if(map[i][col] == '#' || map[i][col] == dir[0] || map[i][col] == dir[1] || map[i][col] == dir[2] || map[i][col] == dir[3]) {
				if(map[i][col] == dir[(step + 0) % 4])
					burned = true;
				break;
			}
		}

		for (int i = row; i >= 0; i--) {
			if(map[i][col] == '#' || map[i][col] == dir[0] || map[i][col] == dir[1] || map[i][col] == dir[2] || map[i][col] == dir[3]) {
				if(map[i][col] == dir[(step + 2) % 4])
					burned = true;
				break;
			}
		}

		for (int j = col; j < maxCol; j++) {
			if(map[row][j] == '#' || map[row][j]  == dir[0] || map[row][j]  == dir[1] || map[row][j]  == dir[2] || map[row][j]  == dir[3]) {
				if(map[row][j]  == dir[(step + 1) % 4])
					burned = true;
				break;
			}
		}

		for (int j = col; j >= 0; j--) {
			if(map[row][j] == '#' || map[row][j]  == dir[0] || map[row][j]  == dir[1] || map[row][j]  == dir[2] || map[row][j]  == dir[3]) {
				if(map[row][j]  == dir[(step + 3) % 4])
					burned = true;
				break;
			}
		}

		return burned;
	}

	static final int INF = Integer.MAX_VALUE/4;

	public static boolean isValidCell(int row, int column) {
		return row >= 0 && row < maxRow && column >= 0 && column < maxCol && (map[row][column] == 'G' || map[row][column] == '.');
	}
	public static void main(String[] args) throws IOException {				
		int t = sc.nextInt();

		for (int cas = 1; cas <= t; cas++) {

			int n = sc.nextInt();
			int m = sc.nextInt();
			maxRow = n;
			maxCol = m;

			map = sc.ncha(n);
			boolean[][][] vis = new boolean[n][m][4];

			int si = 0;
			int sj = 0;
			int gi = 0;
			int gj = 0;

			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					if(map[i][j] == 'S') {
						si = i;
						sj = j;
						map[i][j] = '.';
					}
					if(map[i][j] == 'G') {
						gi = i;
						gj = j;
					}
				}
			}


			int[][][] distTo = new int[n][m][4];
			for (int i = 0; i < n; i++)
				for (int j = 0; j < m; j++)
					Arrays.fill(distTo[i][j], INF);

			LinkedList<Triplet<Integer, Integer, Integer>> Q = new LinkedList<Triplet<Integer, Integer, Integer>>();
			Q.add(new Triplet<Integer, Integer, Integer>(si,sj,0));

			distTo[si][sj][0] = 0;

			boolean found = false;
			int bestDist = INF;
			
			int count = 0;

			while (!Q.isEmpty() && !found) {
				Triplet<Integer, Integer, Integer> act = Q.removeFirst();
				if (vis[act.first][act.second][act.third % 4])
					continue;
				vis[act.first][act.second][act.third % 4] = true;
//				count++;
//				if(count%1000 == 0)
//					System.out.println(count);

				for (int d = 0; d < 4; d++) {
					int ni = act.first + dr[d];
					int nj = act.second + dc[d];

					if (isValidCell(ni, nj)
							&& !vis[ni][nj][(act.third + 1) % 4]
									&& !laser( ni, nj, (act.third + 1) % 4)) {
						distTo[ni][nj][(act.third + 1) % 4] = act.third + 1;
						Q.addLast(new Triplet<Integer, Integer, Integer>(ni, nj, act.third + 1));
						if(map[ni][nj] == 'G') {
							found = true;
							bestDist = act.third + 1;
						}
					}
				}
			}

			if(found)
				out.printf("Case #%d: %d\n", cas, bestDist);
			else
				out.printf("Case #%d: impossible\n", cas, bestDist);
		}
		out.close();
	}

	static public class Triplet<U, V, W> implements Comparable<Triplet<U, V, W>> {
		public final U first;
		public final V second;
		public final W third;

		public Triplet(U first, V second, W third) {
			this.first = first;
			this.second = second;
			this.third = third;
		}

		@SuppressWarnings("unchecked")
		public int compareTo(Triplet<U, V, W> other) {			
			int value = ((Comparable<U>)this.first).compareTo(other.first);
			if (value != 0)
				return value;
			value = ((Comparable<V>)this.second).compareTo(other.second);
			if (value != 0)
				return value;
			return ((Comparable<W>)this.third).compareTo(other.third);
		}

		public boolean equals(Triplet<U, V, W> other) {
			return (this.compareTo(other) == 0);				
		}

		@Override
		public int hashCode() {
			return 31 * (31 * (527 + first.hashCode()) + second.hashCode()) + third.hashCode();
		}

		@Override
		public String toString() {
			return "(" + first + ", " + second + ", " + third + ")";
		}
	}


	static class Reader {
		final private int BUFFER_SIZE = 1 << 12;private byte[] buffer;private int bufferPointer, bytesRead;
		public Reader(){buffer=new byte[BUFFER_SIZE];bufferPointer=bytesRead=0;
		}private void fillBuffer() throws IOException{bytesRead=System.in.read(buffer,bufferPointer=0,BUFFER_SIZE);if(bytesRead==-1)buffer[0]=-1;
		}private byte read() throws IOException{if(bufferPointer==bytesRead)fillBuffer();return buffer[bufferPointer++];
		}public String next() throws IOException{StringBuilder sb = new StringBuilder();byte c;while((c=read())<=' '){if(c==-1) return null;};do{sb.append((char)c);}while((c=read())>' ');if (sb.length()==0) return null;return sb.toString();
		}public String nextLine() throws IOException{StringBuilder sb = new StringBuilder();byte c;boolean read = false;while((c=read())!=-1){if(c=='\n') {read = true;break;}if(c>=' ')sb.append((char)c);}if (!read) return null;return sb.toString();
		}public int nextInt() throws IOException{int ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
		}public long nextLong() throws IOException{long ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10L+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
		}public double nextDouble() throws IOException{double ret=0,div=1;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c = read();do {ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(c=='.')while((c=read())>='0'&&c<='9')ret+=(c-'0')/(div*=10);if(neg)return -ret;return ret;
		}public int[] na(int n) throws IOException{int[] a = new int[n];for(int i = 0;i < n;i++)a[i] = nextInt();return a;
		}public char[][] ncha(int n) throws IOException{char[][] a = new char[n][];for(int i = 0;i < n;i++)a[i] = next().toCharArray();return a;
		}public int[][] nm(int n, int m) throws IOException{int[][] map = new int[n][m];for(int i = 0;i < n;i++)map[i] = na(m);return map;
		}public void close() throws IOException{if(System.in==null) return;System.in.close();}
	}

	static void print(int[] A) {for(int i=0;i<A.length;i++){if(i!=0) out.print(' ');out.print(A[i]);}out.println();}
	static <T> void print(Iterable<T> A) {int i = 0;for(T act : A){if(i!=0)out.print(' ');out.print(act);i++;}out.println();}
	static void printPlus1(Iterable<Number> A) {int i = 0;for(Number act : A){if(i!=0)out.print(' ');out.print(act.longValue() + 1L);i++;}out.println();}
	static void debug(Object... o) { System.err.println(Arrays.deepToString(o)); }

	/*
	long s = System.currentTimeMillis();
	debug(System.currentTimeMillis()-s+"ms");
	 */
}

#ifdef NALP_PROJECT
#pragma hdrstop
#else
#define _SECURE_SCL 0
#endif

#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker, "/STACK:200000000")

#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <utility>
#include <cassert>

#include <set>
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <bitset>
#include <memory.h>

#include <iostream>
#include <fstream>
#include <sstream>

#ifdef _WIN32
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

using namespace std;

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define y1 YYY1
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

template<typename T> inline T Abs(T x) { return (x >= 0) ? x : -x; }
template<typename T> inline T sqr(T x) { return x * x; }
template<typename T> inline string toStr(T x) { stringstream st; st << x; string s; st >> s; return s; }
template<typename T> inline int bit(T mask, int b) { return (b >= 0 && (mask & (T(1) << b)) != 0) ? 1 : 0; }

inline int nextInt() { int x; if (scanf("%d", &x) != 1) throw; return x; }
inline int64 nextInt64() { int64 x; if (scanf(LLD, &x) != 1) throw; return x; }
inline double nextDouble() { double x; if (scanf("%lf", &x) != 1) throw; return x; }

const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double EPS = 1E-9;
const long double PI = 3.1415926535897932384626433832795;

const int MAXN = 210;
const int dx[] = {0, -1, 0, +1};
const int dy[] = {-1, 0, +1, 0};

bool used[MAXN][MAXN][4], bad[MAXN][MAXN][4];
int n, m, d[MAXN][MAXN][4];
queue<int> qx, qy, qd;
char a[MAXN][MAXN];

bool valid(int x, int y) {
    return (0 <= x && x < n) && (0 <= y && y < m) && a[x][y] != '#';
}

int getDir(char c) {
    static string dirs = "<^>v";
    string::iterator it = find(all(dirs), c);
    return (it == dirs.end()) ? -1 : int(it - dirs.begin());
}

void update(int x, int y, int dir, int value, bool first = false) {
    if (valid(x, y) && (!bad[x][y][dir] || first) && d[x][y][dir] > value) {
        if (!used[x][y][dir]) {
            qx.push(x);
            qy.push(y);
            qd.push(dir);
        }

        used[x][y][dir] = true;
        d[x][y][dir] = value;
    }
}

void shoot(int x, int y, int dir, int mod, bool first = true) {
    if (!valid(x, y)) return;
    if (getDir(a[x][y]) != -1 && !first) return;

    shoot(x + dx[dir], y + dy[dir], dir, mod, false);
    bad[x][y][mod] = true;
}

int stupid() {
    return INF;
}

void solve(bool skipThisTest) {
    if (true) {
        cerr << "\tinput mode: read test." << endl;

        n = nextInt();
        m = nextInt();
        forn(i, n) {
            cin >> a[i];
        }

        if (skipThisTest) return;
    } else {
        cerr << "\tinput mode: generated test." << endl;
        // generate test.
    }
    memset(d, 60, sizeof d);
    memset(bad, 0, sizeof bad);
    memset(used, 0, sizeof used);

    int stX = -1, stY = -1, finX = -1, finY = -1;
    forn(x, n) {
        forn(y, m) {
            if (a[x][y] == 'G') finX = x, finY = y;
            if (a[x][y] == 'S') stX = x, stY = y;

            int dir = getDir(a[x][y]);
            if (dir != -1) {
                forn(dd, 4) {
                    shoot(x, y, (dd + dir) % 4, dd);
                }
            }
        }
    }

    update(stX, stY, 0, 0, true);
    while (!qx.empty()) {
        int dir = qd.front(); qd.pop();
        int x = qx.front(); qx.pop();
        int y = qy.front(); qy.pop();
        used[x][y][dir] = false;

        forn(i, 4) {
            update(x + dx[i], y + dy[i], (dir + 1) % 4, d[x][y][dir] + 1);
        }
    }

    int ans = INF;
    forn(dir, 4) {
        ans = min(ans, d[finX][finY][dir]);
    }

    cout << ((ans > INF/2) ? "impossible" : toStr(ans)) << endl;
    cerr << "\tclever answer is '" << ans << "'." << endl;
    if (n * m < 0) {
        int stupidAnswer = stupid();
        cerr << "\tstupid answer is '" << stupidAnswer << "'." << endl;
        assert(ans == stupidAnswer);
    }
}

int main(int argc, char * argv[]) {
#ifdef NALP_PROJECT
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#else
#endif

    int minTest = 1, maxTest = INF;
    if (argc == 3) {
        minTest = atoi(argv[1]);
        maxTest = atoi(argv[2]);
    }

    cout.precision(10);
    cout.setf(ios::fixed);
    cerr.precision(10);
    cerr.setf(ios::fixed);

    srand((unsigned int)time(0));
    int tests = nextInt();
    clock_t totalStartTime = clock();
    for(int test = 1; test <= tests; test++) {
        clock_t startTime = clock();
        cerr << "Case #" << test << endl;
        bool skipThisTest = (test < minTest || test > maxTest);
        if (!skipThisTest) cout << "Case #" << test << ": ";
        solve(skipThisTest);

        char formattedTime[100];
        clock_t time = clock() - startTime;
        sprintf(formattedTime, "%d.%03d", int(time / CLOCKS_PER_SEC), int(time % CLOCKS_PER_SEC));
        cerr << "time for test is " << formattedTime << " s." << endl << endl;
    }

    char formattedTime[100];
    clock_t totalTime = clock() - totalStartTime;
    sprintf(formattedTime, "%d.%03d", int(totalTime / CLOCKS_PER_SEC), int(totalTime % CLOCKS_PER_SEC));
    cerr << string(20, '=') << endl;
    cerr << "TOTAL TIME IS " << formattedTime << " s." << endl;

    return 0;
}

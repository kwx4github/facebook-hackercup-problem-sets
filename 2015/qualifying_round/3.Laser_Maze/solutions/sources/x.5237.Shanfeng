#include <cstdio>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <algorithm>
#include <cassert>
#include <ctime>
#include <queue>
#include <fstream>
#include <list>
#include <thread>
#include <mutex>
#include <queue>
#include <stack>
#include <ctime>
using namespace std;



//int2string
string intToString(int val) {
    stringstream ss;
    ss <<val;
    return ss.str();
}


//***************************
//Tree related
//***************************
struct BinaryTree {
    BinaryTree *left;
    BinaryTree *right;
    BinaryTree *parent;
    int data;
    BinaryTree() {}
    BinaryTree(int v) : data(v) {}
};

template <class T> int maxHeight(T* root) {
    if (root == NULL) return 0;
    int left_height = maxHeight(root->left);
    int right_height = maxHeight(root->right);
    return max(left_height, right_height)+1;
}

// //print and test
// Print the arm branches (eg, /    \ ) on a line
void printBranches(int branchLen, int nodeSpaceLen, int startLen, int nodesInThisLevel, const deque<BinaryTree* > &nodesQueue, ostream& out) {
  deque<BinaryTree*>::const_iterator iter = nodesQueue.begin();
  for (int i = 0; i < nodesInThisLevel / 2; i++) {
    out << ((i == 0) ? setw(startLen-1) : setw(nodeSpaceLen-2)) << "" << ((*iter++) ? "/" : " ");
    out << setw(2*branchLen+2) << "" << ((*iter++) ? "\\" : " ");
  }
  out << endl;
}

// Print the branches and node (eg, ___10___ )
void printNodes(int branchLen, int nodeSpaceLen, int startLen, int nodesInThisLevel, const deque<BinaryTree*>& nodesQueue, ostream& out) {
  deque<BinaryTree*>::const_iterator iter = nodesQueue.begin();
  for (int i = 0; i < nodesInThisLevel; i++, iter++) {
    out << ((i == 0) ? setw(startLen) : setw(nodeSpaceLen)) << "" << ((*iter && (*iter)->left) ? setfill('_') : setfill(' '));
    out << setw(branchLen+2) << ((*iter) ? intToString((*iter)->data) : "");
    out << ((*iter && (*iter)->right) ? setfill('_') : setfill(' ')) << setw(branchLen) << "" << setfill(' ');
  }
  out << endl;
}

// Print the leaves only (just for the bottom row)
void printLeaves(int indentSpace, int level, int nodesInThisLevel, const deque<BinaryTree*>& nodesQueue, ostream& out) {
  deque<BinaryTree*>::const_iterator iter = nodesQueue.begin();
  for (int i = 0; i < nodesInThisLevel; i++, iter++) {
    out << ((i == 0) ? setw(indentSpace+2) : setw(2*level+2)) << ((*iter) ? intToString((*iter)->data) : "");
  }
  out << endl;
}

// Pretty formatting of a binary tree to the output stream
// @ param
// level  Control how wide you want the tree to sparse (eg, level 1 has the minimum space between nodes, while level 2 has a larger space between nodes)
// indentSpace  Change this to add some indent space to the left (eg, indentSpace of 0 means the lowest level of the left node will stick to the left margin)
void printPretty(BinaryTree *root, int level, int indentSpace, ostream& out) {
  int h = maxHeight(root);
  int nodesInThisLevel = 1;

  int branchLen = 2*((int)pow(2.0,h)-1) - (3-level)*(int)pow(2.0,h-1);  // eq of the length of branch for each node of each level
  int nodeSpaceLen = 2 + (level+1)*(int)pow(2.0,h);  // distance between left neighbor node's right arm and right neighbor node's left arm
  int startLen = branchLen + (3-level) + indentSpace;  // starting space to the first node to print of each level (for the left most node of each level only)

  deque<BinaryTree*> nodesQueue;
  nodesQueue.push_back(root);
  for (int r = 1; r < h; r++) {
    printBranches(branchLen, nodeSpaceLen, startLen, nodesInThisLevel, nodesQueue, out);
    branchLen = branchLen/2 - 1;
    nodeSpaceLen = nodeSpaceLen/2 + 1;
    startLen = branchLen + (3-level) + indentSpace;
    printNodes(branchLen, nodeSpaceLen, startLen, nodesInThisLevel, nodesQueue, out);

    for (int i = 0; i < nodesInThisLevel; i++) {
      BinaryTree *currNode = nodesQueue.front();
      nodesQueue.pop_front();
      if (currNode) {
       nodesQueue.push_back(currNode->left);
       nodesQueue.push_back(currNode->right);
      } else {
        nodesQueue.push_back(NULL);
        nodesQueue.push_back(NULL);
      }
    }
    nodesInThisLevel *= 2;
  }
  printBranches(branchLen, nodeSpaceLen, startLen, nodesInThisLevel, nodesQueue, out);
  printLeaves(indentSpace, level, nodesInThisLevel, nodesQueue, out);
}

BinaryTree* constructBinaryTree(string &tree, int &i) {
    if (tree[i] == '#' || i >= tree.size()) return NULL;
    BinaryTree *root = new BinaryTree(tree[i]-'0');
    root->left = constructBinaryTree(tree, ++i);
    root->right = constructBinaryTree(tree, ++i);
    return root;
}

BinaryTree* constructBinaryTree(string tree) {
    int i = 0;
    return constructBinaryTree(tree, i);
}

template <class T>
void priorder(T root) {
    if (root == NULL) return;
    cout <<root->data <<" ";
    priorder(root->left);
    priorder(root->right);
}


//others...
template<class T>
vector<vector<T> > constructMatrix(T *m, int width, int height) {
    vector<vector<T> > results;
    vector<T> temp;
    for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j) {
            temp.push_back(*(m+i*width+j));
        }
        results.push_back(temp);
        temp.clear();
    }
    return results;
}

vector<vector<char> > convert(vector<string> &data) {
    vector<vector<char> > results(data.size(), vector<char>{});
    for (int i = 0; i < data.size(); ++i) {
        for (int j = 0; j < data[i].size(); ++j) {
            results[i].push_back(data[i][j]);
        }
    }
    return results;
}

template<class T>
void print(vector<vector<T> > data) {
    cout <<"{\n";
    for (int i = 0; i != data.size(); ++i) {
        if (data[i].size() == 0) {
            cout <<"{ }\n";
        } else {
            cout <<"{";
            int j = 0;
            for (; j < data[i].size()-1; ++j) {
                cout <<data[i][j] <<", ";
            }
            cout <<data[i][j] <<"}\n";
        }
    }
    cout <<"}" <<endl;
}

void print(bool b) {
    if (b) cout <<"true" <<endl;
    else cout <<"false" <<endl;
}

template<class T> void print(vector<T> data) {
    cout <<"s = " <<data.size() <<"; ";
    if (data.size() == 0) {
        cout <<"{ }\n";
    } else {
        cout <<"{";
        int i = 0;
        for (; i < data.size()-1; ++i) {
            cout <<data[i] <<", ";
        }
        cout <<data[i] <<"}\n";
    }
}
//end print and test

//this function is a dp implementation of C(i,j);
void prepareC(vector<vector<int> > &C, int threshold){
    for (int m = 1; m <= 100; m++) {
        C[0][m] = 1;
        C[1][m] = m;
        int i = 2;
        for (; i <= m/2; i++) {
            C[i][m] = (C[i-1][m-1] + C[i][m-1]) % threshold;
        }
        for (; i <= m; i++) {
            C[i][m] = C[m-i][m];
        }
    }
}

//this function is a dp implementation of Pow(m, n);
void preparePow(vector<vector<int> > &mypow, int threshold){
    for (int m = 1; m <= 100; m++) {
        mypow[m][1] = m;
        for (int n = 2; n <= 100; n++) {
            mypow[m][n] = 0;
            for (int j = 1; j <= m; j++) {
                mypow[m][n] = (mypow[m][n] + mypow[m][n-1])%threshold;
            }
        }
    }
}


void turnLeft(vector<vector<int> > &nums, int N) {
    for (int i = 0; i < N/2; ++i) {
        for (int j = 0; j < N; ++j) {
            swap(nums[i][j], nums[N-i-1][j]);
        }
    }
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N-i-1; ++j) {
            swap(nums[i][j], nums[N-j-1][N-i-1]);
        }
    }
}

char getLaserState(char curr_state) {
  if (curr_state == '^') return '>';
  if (curr_state == '>') return 'v';
  if (curr_state == 'v') return '<';
  if (curr_state == '<') return '^';
  cout <<"Error in get laser state" <<endl;
  return 'x';
}

bool isValidFire(const char &c) {
  return c == '.' || c == 'S' || c == 'G';
}

bool isTurrets(const char &c) {
  return c == '<' || c == '>' || c == '^' || c == 'v';
}

void rotateLasers(vector<string> &maze,
                  const int &M, const int &N) {
  for (int i = 0; i < M; ++i) {
    for (int j = 0; j < N; ++j) {
      if (isTurrets(maze[i][j])) {
        maze[i][j] = getLaserState(maze[i][j]);
      }
    }
  }
}

void addOneLaserFire(vector<string> &maze, int i, int j,
                     const int& M, const int &N) {
  if (maze[i][j] == '^') {
    for (int f = i-1; f >= 0 && isValidFire(maze[f][j]); --f) {
      maze[f][j] = 'F';
    }
  } else if (maze[i][j] == '>') {
    for (int f = j+1; f < N && isValidFire(maze[i][f]); ++f) {
      maze[i][f] = 'F';
    }
  } else if (maze[i][j] == 'v') {
    for (int f = i+1; f < M && isValidFire(maze[f][j]); ++f) {
      maze[f][j] = 'F';
    }
  } else if (maze[i][j] == '<') {
    for (int f = j-1; f >= 0 && isValidFire(maze[i][f]); --f) {
      maze[i][f] = 'F';
    }
  }
}

void addFire(vector<string> &maze,
             const int &M, const int &N) {
  for (int i = 0; i < M; ++i) {
    for (int j = 0; j < N; ++j) {
      if (isTurrets(maze[i][j])) {
        addOneLaserFire(maze, i, j, M, N);
      }
    }
  }
}

vector<vector<string> > getMazes(vector<string> &maze,
                                 const int &M, const int &N) {
  vector<vector<string> > mazes(4, maze);
  //rotate first
  for (int i = 1; i < 4; ++i) {
    mazes[i] = mazes[i-1];
    rotateLasers(mazes[i], M, N);
  }
  //add fire
  for (int i = 0; i < 4; ++i) {
    addFire(mazes[i], M, N);
  }
  return mazes;
}

struct State {
  int i;
  int j;
  int mazeID;
  State(int i_, int j_, int mazeID_) {
    i = i_;
    j = j_;
    mazeID = mazeID_;
  }
  void operator=(State B) {
    i = B.i;
    j = B.j;
    mazeID = B.mazeID;
  }
};

bool isValid(const vector<string> &maze, const int &M, const int &N,
             int i, int j) {
  if (i >= M || i < 0 || j >= N || j < 0) return false;
  if (maze[i][j] == '.' || maze[i][j] == 'S' || maze[i][j] == 'G') return true;
  return false;
}

int LaserMaze(vector<string> maze, int M, int N) {
  //construct maze state
  vector<vector<string> > mazes = getMazes(maze, M, N);
  //bfs
  //state: i, j, mazeID
  vector<vector<vector<bool>>> states(4, vector<vector<bool>>(M, vector<bool>(N, true)));
  vector<State> curr;
  vector<State> next;
  //search for start
  for (int i = 0; i < M; ++i) {
    for (int j = 0; j < N; ++j) {
      if (maze[i][j] == 'S') {
        states[0][i][j] = false;
        curr.push_back(State(i, j, 0));
        break;
      }
    }
  }

  vector<int> dx = {1, -1, 0, 0};
  vector<int> dy = {0, 0, 1, -1};
  int step = 1;
  // print(mazes);
  while (!curr.empty()) {
    for (int c = 0; c < curr.size(); ++c) {
      // if (mazes[curr[c].mazeID][curr[c].i][curr[c].j] == 'G') return step;
      int id = (curr[c].mazeID+1)%4;
      for (int d = 0; d < 4; ++d) {
        int new_i = curr[c].i + dx[d];
        int new_j = curr[c].j + dy[d];
        if (isValid(mazes[id], M, N, new_i, new_j)&&states[id][new_i][new_j]) {
          if (mazes[id][new_i][new_j] == 'G') return step;
          // cout <<new_i <<", " <<new_j <<", " <<id <<endl;
          next.push_back(State(new_i, new_j, id));
          states[id][new_i][new_j] = false;
        }
      }
    }
    curr = next;
    next.clear();
    step++;
  }
  return -1;
}

void HackerCup(string inFileName, string outFileName) {
  ifstream input(inFileName);
  ofstream output(outFileName);
  if (!input.is_open() || !output.is_open()) {
    cout <<"Failed to open file" <<endl;
    return;
  }
  int T;
  input >>T;
  for (int i = 0; i < T; ++i) {
    int M, N;
    input >>M >>N;
    vector<string> maze(M);
    for (int j = 0; j < M; ++j) {
      input >>maze[j];
    }
    int result = LaserMaze(maze, M, N);
    output <<"Case #" <<i+1 <<": ";
    if (result == -1) {
      output <<"impossible\n";
    } else {
      output <<result <<endl;
    }
  }
}

int main() {
  HackerCup("laser_maze.txt", "output.txt");
}
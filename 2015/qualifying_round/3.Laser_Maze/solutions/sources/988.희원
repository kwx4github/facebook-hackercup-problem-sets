#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <map>
using namespace std;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
int tc, tcn, m, n,d[101][101][4],sx,sy,ex,ey;
int dx[] = { -1, 1, 0, 0 };
int dy[] = { 0, 0, -1, 1 };
int ns[] = { '^', '>', 'v', '<' };
char s[101][101];
map<char, int> mp;

void input(){
	scanf("%d %d", &m, &n);
	for (int i = 0; i < m; i++){
		scanf("%s", s[i]);
	}
	for (int i = 0; i < m; i++){
		for (int j = 0; j < n; j++){
			if (s[i][j] == 'S'){
				sx = i;
				sy = j;
			}
			else if( s[i][j] == 'G'){
				ex = i;
				ey = j;
			}
			for (int k = 0; k < 4; k++){
				d[i][j][k] = -1;
			}
		}
	}


}

int checkPossible(int x, int y, int t){
	if (s[x][y] != 'G' && s[x][y] != 'S' && s[x][y] != '.')
		return 0;

	for (int j = y + 1; j < n; j++){
		if (s[x][j] == '#')
			break;
		if (s[x][j] != 'G' && s[x][j] != 'S' && s[x][j] != '.'){
			int laser = (mp[s[x][j]]+t)%4;
			if (ns[laser] == '<')
				return 0;
			break;
		}

	}

	for (int j = y - 1; j >= 0; j--){
		if (s[x][j] == '#')
			break;
		if (s[x][j] != 'G' && s[x][j] != 'S' && s[x][j] != '.'){
			int laser = (mp[s[x][j]] + t) % 4;
			if (ns[laser] == '>')
				return 0;
			break;
		}

	}


	for (int j = x + 1; j < m; j++){
		if (s[j][y] == '#')
			break;
		if (s[j][y] != 'G' && s[j][y] != 'S' && s[j][y] != '.'){
			int laser = (mp[s[j][y]] + t) % 4;
			if (ns[laser] == '^')
				return 0;
			break;
		}

	}

	for (int j = x -1; j >=0 ; j--){
		if (s[j][y] == '#')
			break;
		if (s[j][y] != 'G' && s[j][y] != 'S' && s[j][y] != '.'){
			int laser = (mp[s[j][y]] + t) % 4;
			if (ns[laser] == 'v')
				return 0;
			break;
		}

	}

	return 1;
}

void solve(){
	for (int i = 0; i < 4; i++){
		mp[ns[i]] = i;
	}

	scanf("%d", &tc);
	while (tc--){
		input();
		priority_queue<iii> pq;
		pq.push(iii(0, ii(sx, sy)));
		while (!pq.empty()){
			iii cur = pq.top(); pq.pop();
			int x = cur.second.first;
			int y = cur.second.second;
			int t = -cur.first+1;

			for (int i = 0; i < 4; i++){
				if (x + dx[i] >= 0 && x + dx[i] < m &&
					y + dy[i] >= 0 && y + dy[i] < n &&
					(d[x + dx[i]][y + dy[i]][t % 4] == -1 || d[x + dx[i]][y + dy[i]][t % 4] > t)){
					if (checkPossible(x + dx[i], y + dy[i], t)){
						d[x + dx[i]][y + dy[i]][t%4] = t;
						pq.push(iii(-t, ii(x + dx[i], y + dy[i])) );
					}
				}
			}
		}

		int re = -1;
		for (int i = 0; i < 4; i++){
			if (re == -1)
				re = d[ex][ey][i];
			else if (d[ex][ey][i] != -1)
				re = min(re, d[ex][ey][i]);
		}

		printf("Case #%d: ", ++tcn);
		if (re != -1)
			printf("%d\n", re);
		else
			puts("impossible");
	}
}

int main(void){
//	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	solve();
	return 0;
}
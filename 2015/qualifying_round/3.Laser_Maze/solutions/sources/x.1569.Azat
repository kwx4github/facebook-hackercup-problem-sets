import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


public class C {

	static StringTokenizer st;
	static BufferedReader br;
	static PrintWriter pw;
	static class Que_Elems {
		int k, x, y;
		public Que_Elems(int k, int x, int y) {
			this.k = k;
			this.x = x;
			this.y = y;
		}
	}
	public static void main(String[] args) throws IOException{
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		int test = nextInt();
		for (int t = 1; t <= test; t++) {
			pw.print("Case #"+t+": ");
			int n = nextInt();
			int m = nextInt();
			char[][]a = new char[n+1][m+1];
			int x1 = 0, y1 = 0, x2 = 0, y2 = 0;
			for (int i = 1; i <= n; i++) {
				String s = next();
				for (int j = 1; j <= m; j++) {
					a[i][j] = s.charAt(j-1);
					if (a[i][j]=='S') {
						x1 = i;
						y1 = j;
					}
					if (a[i][j]=='G') {
						x2 = i;
						y2 = j;
					}
				}
			}
			boolean[][][]inAttact = new boolean[4][n+1][m+1];
			int k = 0;
			for (int q = 0; q < 4; q++) {
				k = (k+1) % 4;
				for (int i = 1; i <= n; i++) {
					for (int j = 1; j <= m; j++) {
						if (a[i][j]=='>')
							a[i][j] = 'v';
						else if (a[i][j]=='v')
							a[i][j] = '<';
						else if (a[i][j]=='<')
							a[i][j] = '^';
						else if (a[i][j]=='^')
							a[i][j] = '>';
					}
				}
				for (int i = 1; i <= n; i++) {
					for (int j = 1; j <= m; j++) {
						if (a[i][j]=='>') {
							for (int j2 = j; j2 <= m; j2++) {
								inAttact[k][i][j2] = true;
							}
						}
						if (a[i][j]=='<') {
							for (int j2 = j; j2 >= 1; j2--) {
								inAttact[k][i][j2] = true;
							}
						}
						if (a[i][j]=='v') {
							for (int j2 = i; j2 <= n; j2++) {
								inAttact[k][j2][j] = true;
							}
						}
						if (a[i][j]=='^') {
							for (int j2 = i; j2 >= 1; j2--) {
								inAttact[k][j2][j] = true;
							}
						}
					}
				}
			}
			int[][][]d = new int[4][n+1][m+1];
			int INF = (int) 1e9;
			for (k = 0; k < 4; k++) {
				for (int i = 1; i <= n; i++) {
					for (int j = 1; j <= m; j++) {
						d[k][i][j] = INF;
					}
				}
			}
			Queue<Que_Elems> q = new LinkedList<>();
			q.add(new Que_Elems(0, x1, y1));
			int[]dx = {1, -1, 0, 0};
			int[]dy = {0, 0, 1, -1};
			d[0][x1][y1] = 0;
			while (!q.isEmpty()) {
				int k0 = q.peek().k;
				int x0 = q.peek().x;
				int y0 = q.peek().y;
				q.poll();
				for (int i = 0; i < 4; i++) {
					int x = x0+dx[i];
					int y = y0+dy[i];
					k = (k0+1) % 4;
					if (x >= 1 && x <= n && y >= 1 && y <= m && !inAttact[k][x][y] && a[x][y] != '#' && d[k][x][y]==INF) {
						d[k][x][y] = d[k0][x0][y0]+1;
						q.add(new Que_Elems(k, x, y));
					}
				}
			}
			int min = INF;
			for (int i = 0; i < 4; i++) {
				min = Math.min(min, d[i][x2][y2]);
			}
			if (min==INF)
				pw.println("impossible");
			else
				pw.println(min);
		}
		pw.close();
	}
	
	private static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}
	private static long nextLong() throws IOException {
		return Long.parseLong(next());
	}
	private static double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	private static String next() throws IOException{
		while (st==null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine());
		return st.nextToken();
	}

}

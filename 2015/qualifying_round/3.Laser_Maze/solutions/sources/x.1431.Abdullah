#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<sstream>
#include<stdio.h>
#include<map>
#include<set>
#include<memory.h>
#include<algorithm>
#include<vector>
using namespace std;
typedef long long ll;
ll gcd(ll a, ll b){
	if (!b)
		return a;
	return gcd(b, a%b);
}
ll lcm(ll a, ll b){
	return b / gcd(a, b)*a;
}
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
#define FORK(I,N,K) for(int(i)=0;i<int(N);i+=int(K))

int t;
char g[100][101];
char v[4][100][100];
int vis[4][100][100], vs;
int n, m;
class state{
public:
	int t, r, c;
	state(){}
	state(int x, int y, int z){
		r = x; c = y; t = z;
	}
};
int dr[] = { 0, -1, 0, 1 };
int dc[] = { -1, 0, 1, 0 };
int dir(char x){
	if (x == '<')
		return 0;
	if (x == '^')
		return 1;
	if (x == '>')
		return 2;
	return 3;
}
bool Can(int r, int c, int T){
	if (T == 0)
		return g[r][c] == '.' || g[r][c] == 'S' || g[r][c] == 'G';
	else{
		++T;
		return v[T % 4][r][c] == '.' || v[T % 4][r][c] == 'S' || v[T % 4][r][c] == 'G';
	}
}
int BFS(int r, int c){
	queue<state>q;
	q.push(state(r, c, 0));
	vis[0][r][c] = vs;
	while (!q.empty()){
		state src = q.front();
		q.pop();
		FOR(0, 4){
			int nr = dr[i] + src.r;
			int nc = dc[i] + src.c;
			if (nr < 0 || nc < 0 || nr == n || nc == m)
				continue;
			if (Can(nr, nc, src.t)){
				int T = (src.t + 1) % 4;
				if (vis[T][nr][nc] != vs){
					vis[T][nr][nc] = vs;
					if (v[T][nr][nc] == 'G')
						return src.t + 1;
					q.push(state(nr, nc, src.t + 1));
				}
			}
		}
	}
	return -1;
}
bool isT(char x){
	return x == '^' || x == '>' || x == '<' || x == 'v';
}
void DFS(int mom, int r, int c, int d){
	if (r < 0 || r == n || c < 0 || c == m || g[r][c] == '#' || isT(g[r][c]))
		return;
	v[mom][r][c] = '*';
	DFS(mom, r + dr[d], c + dc[d], d);
}
void build(){
	for (int mom = 0; mom < 4; ++mom){

		for (int i = 0; i < n; ++i)
			for (int j = 0; j < m; ++j)
					v[mom][i][j] = g[i][j];

		for (int i = 0; i < n; ++i){
			for (int j = 0; j < m; ++j){
				if (isT(g[i][j])){
					int d = (dir(g[i][j]) + mom) % 4;
					v[mom][i][j] = '*';
					DFS(mom, i + dr[d], j + dc[d], d);
				}
			}
		}
	}
	
}
int main(){
	freopen("laser_maze.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	cin >> t;
	for (int k = 1; k <= t; ++k){
		cin >> n >> m;
		int r, c;
		FOR(0, n){
			scanf("%s", g[i]);
			for (int j = 0; j < m; ++j)
			if (g[i][j] == 'S'){
				r = i; c = j;
			}
		}
		++vs;
		build();
		int res = BFS(r, c);
		if (res == -1)
			printf("Case #%d: impossible\n", k);
		else
			printf("Case #%d: %d\n", k, res);
	}
}
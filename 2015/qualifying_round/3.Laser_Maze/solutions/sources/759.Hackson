#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define eps 1e-9
#define FOR(x, s, e) for(int x = (s); x < (e); ++x)
#define FORc(x, s, e, c) for(int x = (s); x < (e) && (c); ++x)
#define STEP(x, s, e, d) for(int x = (s); x < (e); x+=(d))
#define ROF(x, s, e) for(int x = (s); x >= (e); --x)
#define ROFc(x, s, e, c) for(int x = (s); x >= (e) && (c); --x)
#define FOREACH(container, it) \
   for(typeof(container.begin()) it=container.begin(); it!=container.end(); it++)
#define EXP(i, s) for (int i = (s); i; i = qn[i])
#define vb vector<bool>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define vs vector<string>
#define pb push_back
#define mp make_pair
#define ALL(X) X.begin(), X.end()
#define LL long long
#define pii pair<int, int>
#define x first
#define y second
#define gcd(x, y) __gcd((x), (y))
#define countbit(x) __builtin_popcount(x)

using namespace std;

int getIndex(char ch) {
  switch (ch) {
    case '<': return 0;
    case '^': return 1;
    case '>': return 2;
    case 'v': return 3;
  }
  return -1;
}

int x[4] = {0, -1, 0, 1};
int y[4] = {-1, 0, 1, 0};

struct node {
  int x, y, t;
  node() {}
  node(int x, int y, int t) : x(x), y(y), t(t) {}
};

int main(int argc, char **argv){
  int T;
  cin >> T;
  FOR(ca, 1, T+1) {
    int N, M;
    cin >> N >> M;
    char maze[N][M+1];
    int sx, sy, ex, ey;
    FOR(i, 0, N) {
      scanf("%s", maze[i]);
      FOR(j, 0, M) {
        if (maze[i][j] == 'S') {
          sx = i;
          sy = j;
        } else if (maze[i][j] == 'G') {
          ex = i;
          ey = j;
        }
      }
    }
    bool walkable[N][M][4];
    memset(walkable, true, sizeof(walkable));
    FOR(i, 0, N) {
      FOR(j, 0, M) {
        if (maze[i][j] == '<' || maze[i][j] == '>' || maze[i][j] == '^' || maze[i][j] == 'v') {
          int dir = getIndex(maze[i][j]);
          FOR(k, 0, 4) {
            int dx = x[dir], dy = y[dir];
            int cx = i, cy = j;
            while (true) {
              cx += dx, cy += dy;
              if (cx < 0 || cx >= N || cy < 0 || cy >= M || maze[cx][cy] == '#' || getIndex(maze[cx][cy]) != -1) {
                break;
              }
              walkable[cx][cy][k] = false;
            }
            dir = (dir + 1) % 4;
          }
          walkable[i][j][0] = walkable[i][j][1] = walkable[i][j][2] = walkable[i][j][3] = 0;
        } else if (maze[i][j] == '#') {
          walkable[i][j][0] = walkable[i][j][1] = walkable[i][j][2] = walkable[i][j][3] = 0;
        }
      }
    }
    int visited[N][M][4];
    memset(visited, -1, sizeof(visited));
    queue<node> Q;
    visited[sx][sy][0] = 0;
    Q.push(node(sx, sy, 0));
    int res = -1;
    while (!Q.empty() && res == -1) {
      node P = Q.front();
      Q.pop();
      int cx = P.x, cy = P.y, ct = P.t;
      FOR(i, 0, 4) {
        int dx = cx + x[i], dy = cy + y[i];
        if (dx < 0 || dx >= N || dy < 0 || dy >= M || !walkable[dx][dy][(ct+1)%4] || visited[dx][dy][(ct+1)%4] != -1) {
          continue;
        }
        if (dx == ex && dy == ey) {
          res = visited[cx][cy][ct] + 1;
          break;
        }
        visited[dx][dy][(ct+1)%4] = visited[cx][cy][ct] + 1;
        Q.push(node(dx, dy, (ct+1)%4));
      }
    }
    printf("Case #%d: ", ca);
    if (res == -1) puts("impossible");
    else printf("%d\n", res);
  }
  return 0;
}

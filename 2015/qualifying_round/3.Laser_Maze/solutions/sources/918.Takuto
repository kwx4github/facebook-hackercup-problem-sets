#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <cstring>
#include <functional>
#include <cmath>
#include <utility>
#include <complex>
using namespace std;
#define rep(i,n) for(int i=0;i<(n);++i)
#define rep1(i,n) for(int i=1;i<=(n);++i)
#define all(c) (c).begin(),(c).end()
#define fs first
#define sc second
#define pb push_back
#define show(x) cout << #x << " " << x << endl
int d[4][100][100],inf=1e8,dx[4]={-1,0,1,0},dy[4]={0,1,0,-1},H,W;
bool ok[4][100][100];
string s[100];
bool is(int x,int y){
	return 0<=x&&x<H&&0<=y&&y<W&&(s[x][y]=='.'||s[x][y]=='S'||s[x][y]=='G');
}
bool allok(int k,int x,int y){
	return is(x,y)&&ok[k][x][y];
}
void bfs(int sx,int sy){
	queue<int> a,b,c;
	a.push(0),b.push(sx),c.push(sy);
	while(!a.empty()){
		int t=a.front();a.pop();
		int x=b.front();b.pop();
		int y=c.front();c.pop();
		rep(i,4){
			int nt=(t+1)%4,nx=x+dx[i],ny=y+dy[i];
			if(allok(nt,nx,ny)&&d[nt][nx][ny]==inf){
				d[nt][nx][ny]=d[t][x][y]+1;
				a.push(nt),b.push(nx),c.push(ny);
			}
		}
	}
}
int main(){
	int T;
	cin>>T;
	rep1(tt,T){
		cin>>H>>W;
		rep(k,4) rep(i,H) rep(j,W) d[k][i][j]=inf,ok[k][i][j]=1;
		rep(i,H) cin>>s[i];
		int sx,sy,gx,gy;
		rep(i,H) rep(j,W){
			if(s[i][j]=='S') sx=i,sy=j;
			if(s[i][j]=='G') gx=i,gy=j;
		}
		rep(i,H) rep(j,W){
			int d=-1;
			if(s[i][j]=='^') d=0;
			if(s[i][j]=='>') d=1;
			if(s[i][j]=='v') d=2;
			if(s[i][j]=='<') d=3;
			if(d==-1) continue;
			rep(k,4){
				int x=i,y=j,di=(d+k)%4;
				do{
					ok[k][x][y]=false;
					x+=dx[di],y+=dy[di];
				}while(is(x,y));
			}
		}
		d[0][sx][sy]=0;
		bfs(sx,sy);
		int ans=inf;
		rep(i,4) ans=min(ans,d[i][gx][gy]);
		printf("Case #%d: ",tt);
		if(ans==inf) puts("impossible");
		else cout<<ans<<endl;
	}
}
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int solve(int height, int width, vector<string>& maze){
    vector<vector<int> > lazer(height, vector<int>(width, 0));
    int sx = 0, sy = 0;
    int gx = 0, gy = 0;
    for(int y = 0; y < height; y++){
        for(int x = 0; x < width; x++){
            int c = maze[y][x];
            if(c == 'S'){
                sx = x; sy = y;
                maze[y][x] = '.';
            }
            if(c == 'G'){
                gx = x; gy = y;
                maze[y][x] = '.';
            }
        }
    }
    for(int y = 0; y < height; y++){
        for(int x = 0; x < width; x++){
            int c = maze[y][x];
            int dir = -1;
            if(c == '<') dir = 0;
            if(c == '^') dir = 3;
            if(c == '>') dir = 2;
            if(c == 'v') dir = 1;
            if(dir == -1) continue;
            for(int dx = x-1; dx >= 0; dx--){
                if(maze[y][dx] != '.') break;
                lazer[y][dx] |= (1<<dir);
            }
            for(int dy = y-1; dy >= 0; dy--){
                if(maze[dy][x] != '.') break;
                lazer[dy][x] |= (1 << ((dir + 1) % 4));
            }
            for(int dx = x+1; dx < width; dx++){
                if(maze[y][dx] != '.') break;
                lazer[y][dx] |= (1 << ((dir + 2) % 4));
            }
            for(int dy = y+1; dy < height; dy--){
                if(maze[dy][x] != '.') break;
                lazer[dy][x] |= (1 << ((dir + 3) % 4));
            }
        }
    }
    vector<vector<int> > memo(height, vector<int>(width, 0));
    vector<pair<int,int> > cand;
    cand.push_back(pair<int,int>(sx, sy));
    vector<pair<int,int> > next_cand;
    int t = 0;
    while(!cand.empty()){
        for(int i = 0; i < cand.size(); i++){
            int x = cand[i].first;
            int y = cand[i].second;
            if(x < 0 || x >= width) continue;
            if(y < 0 || y >= height) continue;
            if(maze[y][x] != '.') continue;
            if(t > 0 && lazer[y][x] & (1<<(t%4))) continue;
            int& m = memo[y][x];
            if(m & (1<<(t%4))) continue;
            m |= (1<<(t%4));
            if(x == gx && y == gy) return t;
            next_cand.push_back(pair<int,int>(x+1, y));
            next_cand.push_back(pair<int,int>(x-1, y));
            next_cand.push_back(pair<int,int>(x, y+1));
            next_cand.push_back(pair<int,int>(x, y-1));
        }
        next_cand.swap(cand);
        next_cand.clear();
        t++;
    }
    return -1;
}

int main(){
    int T;
    cin >> T;
    for(int t = 1; t <= T; t++){
        int M, N;
        cin >> M >> N;
        vector<string> maze(M);
        for(int i = 0; i < M; i++){
            cin >> maze[i];
        }
        int res = solve(M, N, maze);
        if(res >= 0){
            cout << "Case #" << t << ": " << res << endl;
        }else{
            cout << "Case #" << t << ": impossible" << endl;
        }
    }
    return 0;
}



#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <string>
#include <iostream>
#include <queue>

using namespace std;

#define mp make_pair
#define fill(a, x) memset(a, x, sizeof(a))
#define X first
#define Y second

typedef long long ll;
typedef pair<int, int> pii;

const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fLL;

const int DX[] = {-1, 0, 1, 0};
const int DY[] = {0, 1, 0, -1};

struct Item {
    int x, y, k, dist;

    Item() {}

    Item(int x, int y, int k, int dist) : x(x), y(y), k(k), dist(dist) {}

};

bool operator < (const Item& a, const Item& b) {
    return a.dist > b.dist;
}

int a[111][111], tur[111][111], n, m, dist[111][111][4];
priority_queue<Item> q;
bool bad[111][111][4], was[111][111][4];

inline bool badCell(int x, int y) {
    return x < 1 || y < 1 || x > n || y > m || !a[x][y];
}

inline bool badCell(int x, int y, int k) {
    return x < 1 || y < 1 || x > n || y > m || !a[x][y] || bad[x][y][k] || was[x][y][k];
}

void markBlocked(int x, int y, int k, int dir) {
    for (;;) {
        x += DX[dir], y += DY[dir];
        if (badCell(x, y)) {
            break;
        }
        bad[x][y][k] = true;
    }
}

void add(int x, int y, int k, int d) {
    q.push(Item(x, y, k, d));
    was[x][y][k] = true;
    dist[x][y][k] = min(dist[x][y][k], d);
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int __;
    cin >> __;
    for (int _ = 0; _ < __; ++_) {
        int ans;
        cin >> n >> m;
        string s;
        pii st, fn;
        for (int i = 1; i <= n; ++i) {
            cin >> s;
            for (int j = 0; j < m; ++j) {
                char ch = s[j];
                a[i][j + 1] = (ch == '.' || ch == 'S' || ch == 'G');
                int & ct = tur[i][j + 1];
                ct = -1;
                if (ch == 'S') {
                    st = mp(i, j + 1);
                } else
                if (ch == 'G') {
                    fn = mp(i, j + 1);
                } else
                if (ch == '^') {
                    ct = 0;
                } else
                if (ch == '>') {
                    ct = 1;
                } else
                if (ch == 'v') {
                    ct = 2;
                } else
                if (ch == '<') {
                    ct = 3;
                }
            }
        }
        fill(bad, 0);
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (tur[i][j] >= 0) {
                    for (int k = 0; k < 4; ++k) {
                        markBlocked(i, j, k, (tur[i][j] + k) & 3);
                    }
                }
            }
        }
        fill(dist, INF);
        fill(was, 0);
        add(st.X, st.Y, 0, 0);
        while (!q.empty()) {
            Item &cur = q.top();
            int x = cur.x, y = cur.y, k = cur.k, d = cur.dist;
            q.pop();
            if (dist[x][y][k] < d) {
                continue;
            }
            for (int dir = 0; dir < 4; ++dir) {
                int nx = x + DX[dir], ny = y + DY[dir], nk = (k + 1) & 3;
                if (badCell(nx, ny, nk) || dist[nx][ny][nk] < d + 1) {
                    continue;
                }
                add(nx, ny, nk, d + 1);
            }
        }
        ans = INF;
        for (int i = 0; i < 4; ++i) {
            ans = min(ans, dist[fn.X][fn.Y][i]);
        }
        printf("Case #%d: %s\n", _ + 1, (ans == INF ? "impossible" : to_string(ans).c_str()));
    }
    return 0;
}
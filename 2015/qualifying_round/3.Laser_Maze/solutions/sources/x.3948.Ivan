#pragma comment(linker, "/STACK:500000000") 
#include <functional>
#include <algorithm> 
#include <iostream> 
#include <string.h> 
#include <stdlib.h>
#include <limits.h>
#include <numeric>
#include <sstream> 
#include <fstream>
#include <ctype.h> 
#include <stdio.h> 
#include <bitset>
#include <vector> 
#include <string> 
#include <math.h> 
#include <time.h> 
#include <queue> 
#include <stack> 
#include <list>
#include <map> 
#include <set> 
#define Int long long 
#define INF 0x3F3F3F3F 
#define eps 1e-9
using namespace std;
typedef pair<int, int> pii;

#define N 109

const int _i[] = { -1, 0, 1, 0 }, _j[] = { 0, -1, 0, 1 };

char A[N][N];
int d[N][N][4];
int n, m;
int id[128];

bool kill(int x, int y, int myX, int myY, int z)
{
	int dx = _i[z], dy = _j[z];
	for (int i = x + dx, j = y + dy; i >= 0 && j >= 0 && i < n && j < m; i += dx, j += dy)
	{
		if (i == myX && j == myY)
			return true;
		if (A[i][j] == '^' || A[i][j] == 'v' || A[i][j] == '<' || A[i][j] == '>' || A[i][j] == '#')
			return false;
	}
	return false;
}

bool isOk(int x, int y, int z)
{
	if (x < 0 || y < 0 || x >= n || y >= m || id[A[x][y]] || A[x][y] == '#')
		return false;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (i == x || j == y)
			{
				if (id[A[i][j]] && kill(i, j, x, y, (z + id[A[i][j]]) % 4))
						return false;
			}
		}
	}
	return true;
}

int main()
{
	id['^'] = 1;
	id['<'] = 2;
	id['v'] = 3;
	id['>'] = 4;
	int tests, i, j, k, sI, sJ, eI, eJ;
	scanf("%d", &tests);
	for (int test = 1; test <= tests; test++)
	{
		scanf("%d %d", &n, &m);
		for (i = 0; i < n; i++)
		{
			scanf("%s", A[i]);
			for (j = 0; j < m; j++)
			{
				if (A[i][j] == 'S')
					sI = i, sJ = j;
				else if (A[i][j] == 'G')
					eI = i, eJ = j;
			}
		}
		queue<int> q;
		memset(d, 63, sizeof(d));
		d[sI][sJ][0] = 0;
		q.push(sI);
		q.push(sJ);
		q.push(0);
		while (q.size())
		{
			i = q.front();
			q.pop();
			j = q.front();
			q.pop();
			k = q.front();
			q.pop();
			for (int s = 0; s < 4; s++)
			{
				int ni = _i[s] + i,
					nj = _j[s] + j,
					nk = (k + 1) % 4;
				if (isOk(ni, nj, k) && d[ni][nj][nk] == INF)
				{
					d[ni][nj][nk] = d[i][j][k] + 1;
					q.push(ni);
					q.push(nj);
					q.push(nk);
				}
			}
		}
		printf("Case #%d: ", test);
		int res = *min_element(d[eI][eJ], d[eI][eJ] + 4);
		if (res == INF)
			puts("impossible");
		else
			printf("%d\n", res);
	}
}
#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<iomanip>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<sstream>
#define sp(z) setprecision(z)
#define sv(z) sort(z.begin(),z.end())
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double 
#define si(z) scanf("%d",&z)
#define sl(z) scanf("%Ld",&z)
#define sd(z) scanf("%Lf",&z)
#define sc(z) scanf("%c",&z)
#define fr(y,q,s) for(int y=q;y<s;y++)
#define f(y,z) for(int y=0;y<z;y++)
#define fe(y,z) for(int y=1;y<=z;y++)
using namespace std;
ll min(ll a,ll b){ return (a<b)?a:b; }
ll max(ll a,ll b){ return (a>b)?a:b; }
ll gcd(ll a,ll b){ return (b==0)?a:gcd(b,a%b); }
ll modpow(ll a, ll n, ll mod){ ll res=1; while(n){ if(n&1)res=(res*a)%mod; a=(a*a)%mod; n>>=1; } return res; }
ll lpow(ll a, ll n){ ll res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
ld dpow(ld a, ll n){ ld res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
ll INF = 1000000000000000000L;

int lt = 4;
int rt = 5;
int up = 6;
int down = 7;
int g[105][105],block[105][105][4];
int m,n;
ll memo[105][105][4];
bool vis[105][105][4];

ll solve(int ci,int cj,int steps)
{
//	cout<<ci<<" "<<cj<<" "<<steps<<endl;
	if(vis[ci][cj][steps]) return memo[ci][cj][steps];
	vis[ci][cj][steps]=true;

	ll &res = memo[ci][cj][steps];

//	cout<<res<<endl;
	if(res!=-1)
		return res;

	if(g[ci][cj]==2)
	{
		res = 0;
		return res;
	}

	ll mn = INF;
	if((cj-1)>=0 && g[ci][cj-1]<=2 && !block[ci][cj-1][(steps+1)%4] && (!vis[ci][cj-1][(steps+1)%4] || (vis[ci][cj-1][(steps+1)%4] && memo[ci][cj-1][(steps+1)%4]!=-1) ))
	{
		mn = min(mn,1+solve(ci,cj-1,(steps+1)%4));
	}
	
	if((ci-1)>=0 && g[ci-1][cj]<=2 && !block[ci-1][cj][(steps+1)%4] && (!vis[ci-1][cj][(steps+1)%4] || (vis[ci-1][cj][(steps+1)%4] && memo[ci-1][cj][(steps+1)%4]!=-1 )))
	{
//		cout<<ci-1<<" "<<cj<<" "<<g[ci-1][cj]<<endl;
		mn = min(mn,1+solve(ci-1,cj,(steps+1)%4));
	}
	
	if((cj+1)<n && g[ci][cj+1]<=2 && !block[ci][cj+1][(steps+1)%4] && (!vis[ci][cj+1][(steps+1)%4] || (memo[ci][cj+1][(steps+1)%4]!=-1 ) ))
	{
		mn = min(mn,1+solve(ci,cj+1,(steps+1)%4));
	}
		
	if((ci+1)<m && g[ci+1][cj]<=2 && !block[ci+1][cj][(steps+1)%4] && (!vis[ci+1][cj][(steps+1)%4] || (memo[ci+1][cj][(steps+1)%4]!=-1) ))
	{
		
		mn = min(mn,1+solve(ci+1,cj,(steps+1)%4));
//		cout<<ci+1<<" "<<cj<<" "<<mn<<endl;
	}
	
	res = mn;
	return mn;
}

int main()
{
	int t;
	si(t);
	fe(tc,t)
	{
		printf("Case #%d: ",tc);
		si(m);si(n);	
		
		f(i,m) f(j,n) f(k,4) 
		{
			memo[i][j][k]=-1;
			vis[i][j][k]=false;
		}
	
		int si,sj;
		f(i,m)
		{
			getchar();
			f(j,n)
			{
				char c;
				scanf("%c",&c);
				if(c=='.') g[i][j]=0;
				else if(c=='#') g[i][j]=3;
				else if(c=='S') 
				{
					g[i][j]=1;
					si=i;sj=j;
				}
				else if(c=='G') 
				{
					g[i][j]=2;
					//cout<<i<<" "<<j<<endl;
				}
				else if(c=='<') g[i][j]=lt;
				else if(c=='>') g[i][j]=rt;
				else if(c=='^') g[i][j]=up;
				else if(c=='v') g[i][j]=down;
			}
		}
		
		f(i,m) f(j,n) f(k,4) block[i][j][k]=false;
		f(i,m)
		{
			f(j,n)
			{
				if(g[i][j]<=3) continue;
				if(g[i][j]==lt)
				{
					for(int k=j-1;k>=0;k--)
					{
						if(g[i][k]>=3)
							break;
						 block[i][k][0]=true;
					}
					for(int k=i-1;k>=0;k--) 
					{
						if(g[k][j]>=3)
							break;
						block[k][j][1]=true;
					}
					for(int k=j+1;k<n;k++)
					{
						if(g[i][k]>=3) break;
						block[i][k][2]=true;
					}
					for(int k=i+1;k<m;k++)
					{
						if(g[k][j]>=3) break;
						block[k][j][3]=true;
					}
				}

				else if(g[i][j]==rt)
				{
					for(int k=j-1;k>=0;k--) 
					{
						if(g[i][k]>=3) break;
						block[i][k][2]=true;
					}
					for(int k=i-1;k>=0;k--) 
					{
						if(g[k][j]>=3) break;
						block[k][j][3]=true;
					}
					for(int k=j+1;k<n;k++)
					{
						if(g[i][k]>=3) break;
						block[i][k][0]=true;
					}
					for(int k=i+1;k<m;k++)
					{
						if(g[k][j]>=3) break;
						block[k][j][1]=true;
					}
				}

				else if(g[i][j]==up)
				{
					for(int k=j-1;k>=0;k--)
					{
						 if(g[i][k]>=3) break;
						 block[i][k][3]=true;
					}
					for(int k=i-1;k>=0;k--) 
					{
						if(g[k][j]>=3) break;
						 block[k][j][0]=true;
					}
					for(int k=j+1;k<n;k++)
					{
						if(g[i][k]>=3) break;
						block[i][k][1]=true;
					}
					for(int k=i+1;k<m;k++)
					{
						if(g[k][j]>=3) break;
						block[k][j][2]=true;
					}
				}
							
				else if(g[i][j]==down)
				{
					for(int k=j-1;k>=0;k--)
					{ 
						if(g[i][k]>=3) break; 
						block[i][k][1]=true;
					}
					for(int k=i-1;k>=0;k--)
					{
						if(g[k][j]>=3) break; 
						block[k][j][2]=true;
					}
					for(int k=j+1;k<n;k++)
					{
						if(g[i][k]>=3) break;
						block[i][k][3]=true;
					}
					for(int k=i+1;k<m;k++)
					{
						if(g[k][j]>=3) break;
						block[k][j][0]=true;
					}
				}
			}
		}
	
	/*	f(i,m)
		{
			f(j,n)
			{
				cout<<i<<" "<<j<<": ";
				f(k,4) if(block[i][j][k]) cout<<k<<" ";
				cout<<endl;
			}
		}*/
	//	cout<<g[0][0]<<endl;
		
		ll answer = solve(si,sj,0);
		if(answer>=INF)
			printf("impossible\n");
		else
			printf("%lld\n",answer);
	}
	return 0;
}

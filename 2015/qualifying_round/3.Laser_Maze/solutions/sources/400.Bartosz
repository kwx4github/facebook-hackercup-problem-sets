#include "bits/stdc++.h"

using namespace std;

const int MAXN = 107,
           INF = 1000*1000*1000+7;
string s[MAXN];
bool blo[MAXN][MAXN][4];
int cza[MAXN][MAXN][4];

int n, m;
bool onboard(int a, int b)
{
  return 0<=a and a<n and 0<=b and b<m; 
}

queue <tuple <int, int, int>> Q;
int dx[] = {0,0,-1,1}, dy[] = {1,-1,0,0};
void bfs(int sa, int sb)
{
  Q.emplace(sa,sb,0);
  cza[sa][sb][0] = 0;
  while(!Q.empty())
  {
    int x, y, t, w;
    tie(x,y,t) = Q.front();
    //cerr << s[x][y] << " " << x << " " << y << " " << t << "\n";
    Q.pop();
    w = cza[x][y][t];
    int nt = (t+1)%4;
    for(int i=0; i<4; i++)
    {
      int nx = x+dx[i], ny = y+dy[i];
      if(onboard(nx,ny)==false)
        continue;
      if(s[nx][ny]!='.')
        continue;
      if(blo[nx][ny][nt] == true)
        continue;
      if(cza[nx][ny][nt] == -1) 
      {
        cza[nx][ny][nt] = w+1;
        Q.emplace(nx,ny,nt);
      }
    }
  }
}

void go(int a, int b, int da, int db, int ss)
{
  a += da;
  b += db;
  if(onboard(a,b)==false)
    return;
  if(s[a][b]!='.')
    return;
  blo[a][b][ss] = true;
  go(a,b,da,db,ss);
}

void test()
{
  memset(cza, -1, sizeof(cza[0][0][0]) * 100 * 100 * 4);
  memset(blo, 0, sizeof(blo[0][0][0]) * 100 * 100 * 4);
  cin >> n >> m;
  for(int i=0; i<n; i++)
    cin >> s[i];
  int sx, sy, gx, gy;
  for(int i=0; i<n; i++)
    for(int j=0; j<m; j++)
    {
      if(s[i][j]=='S')
        tie(sx,sy) = make_tuple(i,j);
      if(s[i][j]=='G')
        tie(gx,gy) = make_tuple(i,j);
     }
  s[sx][sy] = '.';
  s[gx][gy] = '.';
  //cerr << s[0] << "\n";
  for(int i=0; i<n; i++)
    for(int j=0; j<m; j++)
    {
      if(s[i][j]=='^')
      {
        go(i,j,-1,0,0);
        go(i,j,0,1,1);
        go(i,j,1,0,2);
        go(i,j,0,-1,3);
      }
      if(s[i][j]=='>')
      {
        go(i,j,-1,0,3);
        go(i,j,0,1,0);
        go(i,j,1,0,1);
        go(i,j,0,-1,2);
      }
      if(s[i][j]=='v')
      {
        go(i,j,-1,0,2);
        go(i,j,0,1,3);
        go(i,j,1,0,0);
        go(i,j,0,-1,1);
      }
      if(s[i][j]=='<')
      {
        go(i,j,-1,0,1);
        go(i,j,0,1,2);
        go(i,j,1,0,3);
        go(i,j,0,-1,0);
      }
    }
  bfs(sx,sy);
  int res = INF;
  for(int i=0; i<4; i++)
    if(cza[gx][gy][i]!=-1)
    {
      //cerr << cza[gx][gy][i] << " " << i << "\n";
      res = min(res, cza[gx][gy][i]);
    }
  if(res == INF)
  {
    puts("impossible");
    return;
  }
  cout << res << "\n";
  return;
}

int main()
{
  int t;
  cin >> t;
  for(int i=1; i<=t; i++)
  {
    cout << "Case #" << i << ": ";
    test();
  }
}

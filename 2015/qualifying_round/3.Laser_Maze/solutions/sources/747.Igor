using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;

// (づ°ω°)づﾐ★゜・。。・゜゜・。。・゜☆゜・。。・゜゜・。。・゜
public class Solver
{
    private int[] dr = {0, 1, 0, -1};
    private int[] dc = {1, 0, -1, 0};

    public object Solve()
    {
        int tt = ReadInt();
        for (int nt = 1; nt <= tt; nt++)
        {
            int rs = ReadInt();
            int cs = ReadInt();
            var e = ReadLines(rs);

            int rstart = 0, rgoal = 0, cstart = 0, cgoal = 0;
            var f = new bool[4, rs,cs];
            for (int i = 0; i < rs; i++)
                for (int j = 0; j < cs; j++)
                {
                    if (e[i][j] == 'S')
                    {
                        rstart = i;
                        cstart = j;
                    }
                    else if (e[i][j] == 'G')
                    {
                        rgoal = i;
                        cgoal = j;
                    }
                    else if (e[i][j] == '#')
                        f[0, i, j] = f[1, i, j] = f[2, i, j] = f[3, i, j] = true;
                    else if (e[i][j] != '.')
                    {
                        f[0, i, j] = f[1, i, j] = f[2, i, j] = f[3, i, j] = true;
                        int shift = "^>v<".IndexOf(e[i][j]);
                        for (int k = 0; k < 4; k++)
                        {
                            int d = k + shift & 3;
                            int r = i, c = j;
                            while (true)
                            {
                                r += dr[d];
                                c += dc[d];
                                if (r < 0 || r == rs || c < 0 || c == cs || "^>v<#".IndexOf(e[r][c]) != -1)
                                    break;
                                f[k, r, c] = true;
                            }
                        }
                    }
                }

            int step = 0;
            bool found = false;
            var q = new Queue<Tuple<int, int>>();
            q.Enqueue(Tuple.Create(rstart, cstart));
            var visited = new bool[4,rs,cs];
            visited[0, rstart, cstart] = true;
            while (!found && q.Count > 0)
            {
                var nq = new Queue<Tuple<int, int>>();
                while (q.Count > 0)
                {
                    var t = q.Dequeue();
                    int r = t.Item1;
                    int c = t.Item2;
                    if (r == rgoal && c == cgoal)
                    {
                        found = true;
                        step--;
                        break;
                    }

                    for (int d = 0; d < 4; d++)
                    {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        if (nr >= 0 && nr < rs && nc >= 0 && nc < cs && !visited[step & 3, nr, nc] && !f[step & 3, nr, nc])
                        {
                            visited[step & 3, nr, nc] = true;
                            nq.Enqueue(Tuple.Create(nr, nc));
                        }
                    }
                }
                q = nq;
                step++;
            }

            writer.WriteLine("Case #{0}: {1}", nt, found ? step.ToString() : "impossible");
        }

        return null;
    }

    #region Main

    protected static TextReader reader;
    protected static TextWriter writer;

    static void Main()
    {
#if DEBUG
        reader = new StreamReader("..\\..\\input.txt");
        writer = Console.Out;
        writer = new StreamWriter("..\\..\\output.txt");
#else
        reader = new StreamReader(Console.OpenStandardInput());
        writer = new StreamWriter(Console.OpenStandardOutput());
        //reader = new StreamReader("game.in");
        //writer = new StreamWriter("game.out");
#endif
        try
        {
//            var thread = new Thread(new Solver().Solve, 1024 * 1024 * 128);
//            thread.Start();
//            thread.Join();
            object result = new Solver().Solve();
            if (result != null)
                writer.WriteLine(result);
        }
        catch (Exception ex)
        {
#if DEBUG
            Console.WriteLine(ex);
#else
            Console.WriteLine(ex);
            throw;
#endif
        }
        reader.Close();
        writer.Close();
    }

    #endregion

    #region Read / Write

    private static Queue<string> currentLineTokens = new Queue<string>();

    private static string[] ReadAndSplitLine()
    {
        return reader.ReadLine().Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
    }

    public static string ReadToken()
    {
        while (currentLineTokens.Count == 0)
            currentLineTokens = new Queue<string>(ReadAndSplitLine());
        return currentLineTokens.Dequeue();
    }

    public static int ReadInt()
    {
        return int.Parse(ReadToken());
    }

    public static long ReadLong()
    {
        return long.Parse(ReadToken());
    }

    public static double ReadDouble()
    {
        return double.Parse(ReadToken(), CultureInfo.InvariantCulture);
    }

    public static int[] ReadIntArray()
    {
        return ReadAndSplitLine().Select(int.Parse).ToArray();
    }

    public static long[] ReadLongArray()
    {
        return ReadAndSplitLine().Select(long.Parse).ToArray();
    }

    public static double[] ReadDoubleArray()
    {
        return ReadAndSplitLine().Select(s => double.Parse(s, CultureInfo.InvariantCulture)).ToArray();
    }

    public static int[][] ReadIntMatrix(int numberOfRows)
    {
        int[][] matrix = new int[numberOfRows][];
        for (int i = 0; i < numberOfRows; i++)
            matrix[i] = ReadIntArray();
        return matrix;
    }

    public static int[][] ReadAndTransposeIntMatrix(int numberOfRows)
    {
        int[][] matrix = ReadIntMatrix(numberOfRows);
        int[][] ret = new int[matrix[0].Length][];
        for (int i = 0; i < ret.Length; i++)
        {
            ret[i] = new int[numberOfRows];
            for (int j = 0; j < numberOfRows; j++)
                ret[i][j] = matrix[j][i];
        }
        return ret;
    }

    public static string[] ReadLines(int quantity)
    {
        string[] lines = new string[quantity];
        for (int i = 0; i < quantity; i++)
            lines[i] = reader.ReadLine().Trim();
        return lines;
    }

    public static void WriteArray<T>(IEnumerable<T> array)
    {
        writer.WriteLine(string.Join(" ", array));
    }

    public static void Write<T>(params T[] array)
    {
        WriteArray(array);
    }

    public static void WriteLines<T>(IEnumerable<T> array)
    {
        foreach (var a in array)
            writer.WriteLine(a);
    }

    #endregion
}
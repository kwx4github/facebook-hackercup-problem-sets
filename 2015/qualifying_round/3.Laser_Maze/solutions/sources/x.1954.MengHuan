// @author cebrusfs
// headers {{{
#include<bits/stdc++.h>
using namespace std;
// }}}
// macros {{{
#ifdef WIN32
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)

#define MS0(x) memset(x,0,sizeof(x))
#define MS1(x) memset(x,-1,sizeof(x))

#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())

#define IOS ios_base::sync_with_stdio(false)

#define REP(i,n) for(int i=0;i<(n);i++)
#define REP1(i,a,b) for(int i=(a);i<=(b);i++)

#define PER(i,n) for(int i=(n)-1;i>=0;i--)
#define PER1(i,a,b) for(int i=(a);i>=(b);i--)

#ifdef ONLINE_JUDGE
#define FILEIO(x) freopen(#x ".in","r",stdin);freopen(#x ".out","w",stdout);
#define FILEIOS freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#else
#define FILEIO(x) ;
#define FILEIOS ;
#endif

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

typedef pair<int, int> PII;
#define MP make_pair
#define F first
#define S second

typedef vector<int> VI;
#define PB push_back
#define PF push_front

#define PPB pop_back
#define PPF pop_front


// C++11
#if __cplusplus >= 201103L
#define MT make_tuple
typedef tuple<int, int> TII;
#endif

#define runtime() ((double)clock() / CLOCKS_PER_SEC)

const double eps = 1e-7;
// }}}

#define MAX 105

char mp[MAX][MAX];
bool invalid[4][MAX][MAX];
bool vis[4][MAX][MAX];

typedef tuple<int, int, int> STATE;

map<char, int> cdir = {
    {'<', 0},
    {'^', 1},
    {'>', 2},
    {'v', 3},
};

int dir[4][2] = {
    {0, -1},
    {-1, 0},
    {0, 1},
    {1, 0},
};

void solve(int caseid)
{
    fprintf(stderr, "solve at Case %d ... \n", caseid);
    int n, m;
    scanf("%d %d", &n, &m);

    for (int i = 0; i < n; ++i)
        scanf(" %s", mp[i]);

    MS0(invalid);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
        {
            if (mp[i][j] == '.' or mp[i][j] == 'S' or mp[i][j] == 'G')
                continue;

            if (mp[i][j] == '#')
            {
                for (int k = 0; k < 4; ++k)
                    invalid[k][i][j] = true;
                continue;
            }

            for (int di = 0; di < 4; ++di)
            {
                int d = di + cdir[mp[i][j]];

                for (int k = 0; k < MAX; ++k)
                {
                    int x = i + dir[d][0] * k;
                    int y = j + dir[d][1] * k;

                    if (0 <= x and x < n and 0 <= y and y < m)
                        invalid[di][x][y] = true;
                }
            }
        }


    queue<STATE> q;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
            if (mp[i][j] == 'S')
                q.push(MT(i, j, 0));

    int ans = INT_MAX;
    MS0(vis);
    while (not q.empty())
    {
        int x, y, d;
        tie(x, y, d) = q.front();
        q.pop();
        if (mp[x][y] == 'G')
            ans = min(d, ans);

        for (int k = 0; k < 4; ++k)
        {
            int nx = x + dir[k][0];
            int ny = y + dir[k][1];
            int nd = d + 1;

            if (0 <= nx and nx < n and 0 <= ny and ny < m and not invalid[nd%4][nx][ny])
            {
                if (not vis[nd%4][nx][ny])
                {
                    vis[nd%4][nx][ny] = true;
                    q.push(MT(nx, ny, nd));
                }
            }
        }
    }
    printf("Case #%d: ", caseid);
    if (ans == INT_MAX)
        printf("impossible\n");
    else
        printf("%d\n", ans);

}

int main()
{
    int T;
    scanf("%d", &T);
    for (int i = 1; i <= T; ++i)
        solve(i);
}


#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <iomanip>
#include <string>
#include <cstdio>
#include <cstring>
#include <set>
#include <map>
#include <queue>
using namespace std;

#define BARSUK_ALEXEY_PSKOV

struct info {
    int i, j;
    int len;
};


const int INF = 1000000009;

char field[4][105][105];

bool isTurret(char token)
{
    return token == '<' || token == '>' || token == 'v' || token == '^';
}

int main()
{
#ifdef BARSUK_ALEXEY_PSKOV
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#endif

    int tests;
    cin >> tests;
    for (int t = 1; t <= tests; t++)
    {
        int n, m;
        cin >> n >> m;
        memset(field, '#', sizeof(field));

        int ssi = 0, ssj = 0, ggi = 0, ggj = 0;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                char token; cin >> token;
                field[0][i][j] = token;
                field[1][i][j] = token;
                field[2][i][j] = token;
                field[3][i][j] = token;
                if (field[0][i][j] == '>') {
                    field[1][i][j] = 'v';
                    field[2][i][j] = '<';
                    field[3][i][j] = '^';
                }
                else if (field[0][i][j] == '^') {
                    field[1][i][j] = '>';
                    field[2][i][j] = 'v';
                    field[3][i][j] = '<';
                }
                else if (field[0][i][j] == 'v') {
                    field[1][i][j] = '<';
                    field[2][i][j] = '^';
                    field[3][i][j] = '>';
                }
                else if (field[0][i][j] == '<') {
                    field[1][i][j] = '^';
                    field[2][i][j] = '>';
                    field[3][i][j] = 'v';
                }
                if (field[0][i][j] == 'S') {
                    ssi = i;
                    ssj = j;
                }
                if (field[0][i][j] == 'G') {
                    ggi = i;
                    ggj = j;
                }
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int a = 1; a <= n; a++) {
                for (int b = 1; b <= m; b++) {
                    int aa = a, bb = b;
                    if (field[i][aa][bb] == '<') {
                        while (bb > 0) {
                            field[i][aa][bb] = '#';
                            bb--;
                            if (field[i][aa][bb] == '#' || isTurret(field[i][aa][bb]))
                                break;
                        }
                    }
                    else if (field[i][aa][bb] == '>') {
                        while (bb <= m) {
                            field[i][aa][bb] = '#';
                            bb++;
                            if (field[i][aa][bb] == '#' || isTurret(field[i][aa][bb]))
                                break;
                        }
                    }
                    else if (field[i][aa][bb] == '^') {
                        while (aa > 0) {
                            field[i][aa][bb] = '#';
                            aa--;
                            if (field[i][aa][bb] == '#' || isTurret(field[i][aa][bb]))
                                break;
                        }
                    }
                    else if (field[i][aa][bb] == 'v') {
                        while (aa <= n) {
                            field[i][aa][bb] = '#';
                            aa++;
                            if (field[i][aa][bb] == '#' || isTurret(field[i][aa][bb]))
                                break;
                        }
                    }
                }
            }
        }
        int dp[4][105][105];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 105; j++) {
                for (int k = 0; k < 105; k++) {
                    dp[i][j][k] = INF;
                }
            }
        }
        info temp;
        temp.i = ssi;
        temp.j = ssj;
        temp.len = 0;
        queue<info> q;
        q.push(temp);

        while (!q.empty()) {
            temp = q.front();
            q.pop();

            if (dp[temp.len % 4][temp.i][temp.j] <= temp.len)
                continue;
            dp[temp.len % 4][temp.i][temp.j] = temp.len;

            int dx[] = { -1, 0, 1, 0 };
            int dy[] = { 0, -1, 0, 1 };

            for (int k = 0; k < 4; k++) {
                int y = temp.i + dy[k];
                int x = temp.j + dx[k];
                if (x < 1 || y < 1) continue;
                if (x > m || y > n) continue;
                if (field[(temp.len + 1) % 4][y][x] == '#') continue;
                info tt;
                tt.i = y;
                tt.j = x;
                tt.len = temp.len + 1;
                q.push(tt);
            }
        }
        int mn = dp[0][ggi][ggj];
        for (int i = 0; i < 4; i++)
            mn = min(mn, dp[i][ggi][ggj]);

        cout << "Case #" << t << ": ";
        if (mn >= INF) {
            cout << "impossible";
        }
        else {
            cout << mn;
        }
        cout << endl;
    }

    return 0;
}


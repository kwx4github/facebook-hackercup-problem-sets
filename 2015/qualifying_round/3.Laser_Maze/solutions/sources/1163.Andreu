#include <iostream>
#include <vector>
#include <queue>
#include <map>

using namespace std;

int dir[4][2] = {0, 1, 1, 0, 0, -1, -1, 0};
int r, c;

struct Tri {
  int i, j, k;
  
  Tri() {
  }
  
  Tri(int ii, int jj, int kk) {
    i = ii; j = jj; k = kk;
  }
};

int bfs(const vector<vector<vector<char> > >& tc, vector<vector<vector<int> > >& ti, int sk, int si, int sj) {
  queue<Tri> q;
  q.push(Tri(si, sj, sk));
  while (!q.empty()) {
    Tri act = q.front();
    q.pop();
    
    int i = act.i;
    int j = act.j;
    int k = act.k;
    
    if (tc[i][j][k] == 'G') return ti[i][j][k];
    
    for (int p = 0; p < 4; ++p) {
      int i2 = i + dir[p][0];
      int j2 = j + dir[p][1];
      int kk = (k + 1)%4;
      if (i2 >= 0 and j2 >= 0 and i2 < r and j2 < c and tc[i2][j2][kk] != '#' and ti[i2][j2][kk] == -1) {
        ti[i2][j2][kk] = ti[i][j][k] + 1;
        q.push(Tri(i2, j2, kk));
      }
    }
  }
  
  return -1;
}

int main() {
  int cases;
  cin >> cases;
  for (int cas = 1; cas <= cases; ++cas) {
    cout << "Case #" << cas << ": ";
    cin >> r >> c;
    vector<vector<char> > tt(r, vector<char>(c));
    for (int i = 0; i < r; ++i) for (int j = 0; j < c; ++j) cin >> tt[i][j];
    
    int si, sj;
    for (int i = 0; i < r; ++i) for (int j = 0; j < c; ++j) if (tt[i][j] == 'S') {
      si = i;
      sj = j;
      tt[i][j] = '.';
      break;
    }
    map<char, int> qq;
    qq['^'] = 3;
    qq['>'] = 0;
    qq['v'] = 1;
    qq['<'] = 2;
    
    vector<vector<vector<char> > > tc(r, vector<vector<char> >(c, vector<char>(4, '.')));
    for (int k = 0; k < 4; ++k) {
      for (int i = 0; i < r; ++i) for (int j = 0; j < c; ++j) {
        if (tt[i][j] == '^' or tt[i][j] == '>' or tt[i][j] == 'v' or tt[i][j] == '<') {
          tc[i][j][k] = '#';
          int kk = (k + qq[tt[i][j]])%4;
          int i2 = i + dir[kk][0];
          int j2 = j + dir[kk][1];
          while (i2 >= 0 and j2 >= 0 and i2 < r and j2 < c and (tt[i2][j2] == '.' or tt[i2][j2] == 'S' or tt[i2][j2] == 'G')) {
            tc[i2][j2][k] = '#';
            i2 = i2 + dir[kk][0];
            j2 = j2 + dir[kk][1];
          }
        }
        else if (tc[i][j][k] == '.') tc[i][j][k] = tt[i][j];
      }
      
//       for (int i = 0; i < r; ++i) {
//         for (int j = 0; j < c; ++j) cout << tc[i][j][k];
//         cout << endl;
//       }
//       cout << endl;
    }
    
    vector<vector<vector<int> > > ti(r, vector<vector<int> >(c, vector<int>(4, -1)));
    ti[si][sj][0] = 0;
    
    int cost = bfs(tc, ti, 0, si, sj);
    if (cost == -1) cout << "impossible" << endl;
    else cout << cost << endl;
  }
}

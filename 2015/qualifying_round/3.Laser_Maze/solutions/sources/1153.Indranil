#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<string>
#include<list>

using namespace std;

typedef unsigned long long 	uLL;
typedef long long 			LL;
typedef unsigned int	 	uI;
typedef int		 			I;
typedef double	 			D;
typedef void	 			V;
//typedef char				C;


#define sz(v)					sizeof(v)
#define fill(a,v) 				memset(a,v,sizeof a)
#define ini(a,count, type)		{a=(type *)malloc(count*sz(type)); memset ((void *)a, 0, count*sz(type));}
#define arr_sz(a)				I(sz(a)/sz(a[0]))

#define all(a) 					(a).begin(),(a).end()
#define SZ(v) 					((int)(v).size())
#define foreach(it,v)           for(typeof((v).begin()) it = v.begin() ; it != (v).end() ; ++it)
#define mp						make_pair
#define FF						first
#define SS						second
#define tri(a,b,c)				mp(a,mp(b,c))
#define XX						first
#define YY						second.first
#define ZZ						second.second
#define pb						push_back
#define DREP(a)					sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())

typedef pair<int,int> PII;
typedef pair<uLL,uLL> PLL;
typedef pair<int,PII> TRI;
typedef vector<int> VI;
//typedef vector<uLL> VL;
typedef vector<PII> VII;
typedef vector<TRI> VT;

//======================================================
#define P(x)					cout << x
#define Pn(x)					cout << x << endl;
#define S(x)					cin >> x
//======================================================
#define F(i,a,b) 				for(int i=(a);i<(b);++i)
#define R(i,n) 					F(i,0,n)
//------------------------------------------------------
#define Fe(i,a,b)				for(int i=(a);i<=(b);++i)
#define Re(i,n)					Fe(i,0,n)
//------------------------------------------------------
#define FSZ(i,a,v) 				F(i,a,SZ(v))
#define RSZ(i,v) 				R(i,SZ(v))
//------------------------------------------------------
#define Fsz(i,a,v)				F(i,a,arr_sz(v))
#define Rsz(i,v)				R(i,arr_sz(v))
//------------------------------------------------------
#define W						while
//------------------------------------------------------
#define PL(A)					Rsz(__,A) { P(A[__]);} printf("\n");
#define PLn(A,n)				R(__,n) { P(A[__]);} printf("\n");
#define PM(A,p,q)				do{R(__,p) {R(___,q){printf("%02d ", A[__][___]);}printf("\n");}}while(0)

#define PLSZ(A)					RSZ(__,A) { P(A[__]);} printf("\n");
//======================================================
#define INF						(int)1e9
#define LINF					(long long)1e18
#define EPS						1e-9
//======================================================
#define maX(a,b)				((a)>(b)?(a):(b))
#define miN(a,b)				((a)<(b)?(a):(b))
#define abS(x)					((x)<0?-(x):(x))
#define rUP(a, b)	 			(((a) + ((b)-1)) & ~((b)-1))
#define rDN(a, b)	 			((a) & ~((b)-1))
//======================================================


//#define DEBUG
#define CASE    6

#define WALL    1000000
#define LAZER   1000001
//#define A1      1000003
//#define A2      1000004
//#define A3      1000005
//#define A4      1000006

#define clear_list(A)       do{ foreach(it,A) {delete *it;} \
                                A.clear();}while(0)


#define DMAT(A)			printf("---------------------------------------------------------------------\n"); \
                        do{R(__,M) {R(___,N){ \
                            if(A[__][___].V==WALL) printf("## "); \
                            else if(A[__][___].V==LAZER) { \
                                if(((A[__][___].L+level-1)%4)==0) printf("^^ "); \
                                else if(((A[__][___].L+level-1)%4)==1) printf(">> "); \
                                else if(((A[__][___].L+level-1)%4)==2) printf("vv "); \
                                else if(((A[__][___].L+level-1)%4)==3) printf("<< "); \
                            }\
                            else if((G.FF==__)&&(G.SS==___)) printf("XX "); \
                            else if(A[__][___].V==0) printf(".. "); \
                            else printf("%02d ", A[__][___].V); \
                        }printf("\n");}}while(0)

                        //else if(A[__][___].junk==A1) printf("|| "); \
                            else if(A[__][___].junk==A2) printf("-- "); \
                            else if(A[__][___].junk==A3) printf("|| "); \
                            else if(A[__][___].junk==A4) printf("-- "); \


#define PLASERS         printf("....lasers....\n"); \
                        do{RSZ(i,lasers) {P("("<<(I)lasers[i]->x<<","<<(I)lasers[i]->y<<")"<<(I)data[(I)lasers[i]->x][(I)lasers[i]->y].L<<"\n");}}while(0)

//#define UDIR            do {I x=G.FF, y=G.SS; \
                            while((x!=S.FF) && (y!=S.SS)){ \
                                P(x<<" "<<y<<endl); \
                                if (data[x][y].D==1) {data[x][y].junk=A1; x++;} \
                                else if (data[x][y].D==2) {data[x][y].junk=A2; y--;} \
                                else if (data[x][y].D==3) {data[x][y].junk=A3; x--;} \
                                else if (data[x][y].D==4) {data[x][y].junk=A4; y++;} \
                                else break; \
                            }}while(0)

typedef struct {
    I V;
    //I L;
    unsigned int L:2;
    unsigned int D:3;
    unsigned int junk:27;
} NODE;

typedef struct {
    unsigned char x,y;
    //unsigned char data:2;
    //unsigned char junk:6;
} laser;

typedef struct {
    unsigned char x,y,L;
//    unsigned char L:1;
//    unsigned char R:1;
//    unsigned char T:1;
//    unsigned char B:1;
//    unsigned char junk:4;
} coordinate;

typedef vector<laser *> VL;
typedef list<coordinate *> VQ;

NODE data[100][100];
I level;
VL lasers; VQ ck_list, temp,lev0,lev1,lev2,lev3,lev4;
I M,N;
PII S,G;

//void update_lasers() {
//    RSZ(i,lasers) {data[(I)lasers[i]->x][(I)lasers[i]->y].L++;}
//}

I check_lasers(I X, I Y, I l) {
    if (l==1) return 0;
    I x,y; l--;
    x=X; y=Y;
    while((data[x][y].V<WALL) && ((x-1)>=0)) x--;
    if(data[x][y].V==LAZER) {if((data[x][y].L+l)%4==2) return 1;}
    x=X; y=Y;
    while((data[x][y].V<WALL) && ((x+1)<M)) x++;
    if(data[x][y].V==LAZER) {if((data[x][y].L+l)%4==0) return 1;}
    x=X; y=Y;
    while((data[x][y].V<WALL) && ((y-1)>=0)) y--;
    if(data[x][y].V==LAZER) {if((data[x][y].L+l)%4==1) return 1;}
    x=X; y=Y;
    while((data[x][y].V<WALL) && ((y+1)<N)) y++;
    if(data[x][y].V==LAZER) {if((data[x][y].L+l)%4==3) return 1;}

    return 0;
}

#define if_blank(x,y)       !((data[(x)][(y)].V==WALL)||(data[(x)][(y)].V==LAZER))

I check_escape_2(I x, I y, I l) {
    if(check_lasers(x,y,l+3)){ return 0;}
    I f1x=1,f2x=1,f3x=1,f4x=1,f1y=1,f2y=1,f3y=1,f4y=1,f11=1,f22=1,f33=1,f44=1,f12=1,f14=1,f32=1,f34=1;

    if((x-1)>=0){if(if_blank(x-1,y)){
        f1x=check_lasers(x-1,y,l);
    }}
    if((y-1)>=0){if(if_blank(x,y-1)){
        f4x=check_lasers(x,y-1,l);
    }}
    if((y+1)<N) {if(if_blank(x,y+1)){
        f2x=check_lasers(x,y+1,l);
    }}
    if((x+1)<M) {if(if_blank(x+1,y)){
        f3x=check_lasers(x+1,y,l);
    }}

    if((x-1)>=0){if(if_blank(x-1,y)){
        f1y=check_lasers(x-1,y,l+2);
    }}
    if((y-1)>=0){if(if_blank(x,y-1)){
        f4y=check_lasers(x,y-1,l+2);
    }}
    if((y+1)<N) {if(if_blank(x,y+1)){
        f2y=check_lasers(x,y+1,l+2);
    }}
    if((x+1)<M) {if(if_blank(x+1,y)){
        f3y=check_lasers(x+1,y,l+2);
    }}

    if((x-2)>=0){if(if_blank(x-2,y)){
        f11=check_lasers(x-2,y,l+1);
    }}
    if((y-2)>=0){if(if_blank(x,y-2)){
        f44=check_lasers(x,y-2,l+1);
    }}
    if((y+2)<N) {if(if_blank(x,y+2)){
        f22=check_lasers(x,y+2,l+1);
    }}
    if((x+2)<M) {if(if_blank(x+2,y)){
        f33=check_lasers(x+2,y,l+1);
    }}

    if(((x-1)>=0) && ((y-1)>=0)){if(if_blank(x-1,y-1)){
        f14=check_lasers(x-1,y-1,l+1);
    }}
    if(((x+1)<M) && ((y-1)>=0)){if(if_blank(x+1,y-1)){
        f34=check_lasers(x+1,y-1,l+1);
    }}
    if(((x-1)>=0) && ((y+1)<N)){if(if_blank(x-1,y+1)){
        f12=check_lasers(x-1,y+1,l+1);
    }}
    if(((x+1)<M) && ((y+1)<N)){if(if_blank(x+1,y+1)){
        f32=check_lasers(x+1,y+1,l+1);
    }}

    if((f1x+f1y+f11)==0) { return 1;}
    if((f2x+f2y+f22)==0) { return 1;}
    if((f3x+f3y+f33)==0) { return 1;}
    if((f4x+f4y+f44)==0) { return 1;}

    if((f1x+f12+f1y)==0) { return 1;}
    if((f1x+f12+f2y)==0) { return 1;}
    if((f1x+f14+f1y)==0) { return 1;}
    if((f1x+f14+f4y)==0) { return 1;}

    if((f3x+f32+f3y)==0) { return 1;}
    if((f3x+f32+f2y)==0) { return 1;}
    if((f3x+f34+f3y)==0) { return 1;}
    if((f3x+f34+f4y)==0) { return 1;}

    if((f2x+f12+f2y)==0) { return 1;}
    if((f2x+f12+f1y)==0) { return 1;}
    if((f2x+f32+f2y)==0) { return 1;}
    if((f2x+f32+f3y)==0) { return 1;}

    if((f4x+f14+f4y)==0) { return 1;}
    if((f4x+f14+f1y)==0) { return 1;}
    if((f4x+f34+f4y)==0) { return 1;}
    if((f4x+f34+f3y)==0) { return 1;}

    return 0;
}

I check_escape(I x, I y, I l) {
    if(check_lasers(x,y,l+1)){
        //if(check_escape_2(x,y,l)) return 2;
        return 0;
    }

    I flag=0;
    if((x-1)>=0){if(if_blank(x-1,y)){
        if(check_lasers(x-1,y,l)==0){
            flag=1;
        }
    }}
    if((y-1)>=0){if(if_blank(x,y-1)){
        if(check_lasers(x,y-1,l)==0){
            flag=1;
        }
    }}
    if((y+1)<N) {if(if_blank(x,y+1)){
        if(check_lasers(x,y+1,l)==0){
            flag=1;
        }
    }}
    if((x+1)<M) {if(if_blank(x+1,y)){
        if(check_lasers(x+1,y,l)==0){
            flag=1;
        }
    }}
    if (flag==1) return 1;
    else return 0;
}

// Not needed
#define check_goal      data[G.FF][G.SS].V

void init_data() {
    memset(data,0,100*100*sz(NODE));
    clear_list(lasers);
    clear_list(ck_list);
    clear_list(lev0);
    clear_list(lev1);
    clear_list(lev2);
    clear_list(lev3);
    clear_list(lev4);
    clear_list(temp);
    level=2;
}

I add_coord(VQ &lst, VQ &lst2, VQ &lst4, int x, int y, int ox, int oy, int l) {
    //P(x<<" "<<y<<endl);
    coordinate *cood;
    if (check_lasers(x,y,l)) {
        I f=check_escape(ox,oy,l);
            if (f==1) {
                l+=2;
                if(check_lasers(x,y,l)==0) {
                    cood = new coordinate;
                    cood->y=(unsigned char)y;
                    cood->L=(unsigned char)l;
                    cood->x=(unsigned char)x;
                    lst2.pb(cood);
                    data[x][y].V=l;
                }
            }
            else if (f==2) {
                l+=4;
                if(check_lasers(x,y,l)==0) {
                //P("here\n");
                    cood = new coordinate;
                    cood->y=(unsigned char)y;
                    cood->L=(unsigned char)l;
                    cood->x=(unsigned char)x;
                    lst4.pb(cood);
                }
            }
    } else {
        cood = new coordinate;
        cood->x=(unsigned char)x;
        cood->y=(unsigned char)y;
        cood->L=(unsigned char)l;
        lst.pb(cood);
        data[x][y].V=l;
    }
    return 0;
}

I new_coord(VQ::iterator it) {
    I x=(*it)->x;
    I y=(*it)->y;
    //I lev=data[x][y].V;
    I lev=(*it)->L;
    I flag=1;

    if((x-1)>=0){if(data[x-1][y].V==0){
        if(add_coord(temp,lev2,lev4,x-1,y,x,y,lev+1)){
            data[x-1][y].D==1;
        }
    }}
    if((y-1)>=0){if(data[x][y-1].V==0){
        if(add_coord(temp,lev2,lev4,x,y-1,x,y,lev+1)){
            data[x][y-1].D==4;
        }
    }}
    if((y+1)<N) {if(data[x][y+1].V==0){
        if(add_coord(temp,lev2,lev4,x,y+1,x,y,lev+1)){
            data[x][y+1].D==2;
        }
    }}
    if((x+1)<M) {if(data[x+1][y].V==0){
        if(add_coord(temp,lev2,lev4,x+1,y,x,y,lev+1)){
            data[x+1][y].D==3;
        }
    }}

    return flag;
}

void bfs() {
    while(SZ(ck_list) || SZ(lev0) || SZ(lev1)) {
        foreach(it,lev0) {
            if(data[(I)((*it)->x)][(I)((*it)->y)].V==0)
            {data[(I)((*it)->x)][(I)((*it)->y)].V=(I)((*it)->L);}
        }
        foreach(it,ck_list) {
            //P("here\n"); DMAT(data);
            //if(new_coord(it)) ck_list.erase(it);
            new_coord(it); //) ck_list.erase(it);
        }
#ifdef DEBUG
            DMAT(data);
#endif
        level ++;
        //P(SZ(lev0) <<" "<<SZ(lev1) <<" "<<SZ(lev2) <<" " <<SZ(lev3) <<" " <<SZ(lev4) <<" "<<"\n");
        if(check_goal) break;

        ck_list.swap(lev0);
        lev0.swap(lev1);
        lev1.swap(lev2);
        lev2.swap(lev3);
        lev3.swap(lev4);
        clear_list(lev4);
        ck_list.splice(ck_list.end(),temp);
    }
}

int main() {
    I T;
    S(T);
    F(k,1,T+1) {
        init_data();

        S(M); S(N);
        string row; laser *temp;

        //DMAT(data);
        R(m,M) {
            S(row);
            R(n,row.length()) {
                if (row[n]=='#') data[m][n].V=WALL;
                if (row[n]=='S') {
                    //data[m][n]=1;
                    S.FF=m; S.SS=n;
                }
                if (row[n]=='G') {G.FF=m; G.SS=n;}
                if (row[n]=='^') {
                    data[m][n].V=LAZER;
                    temp = new laser;
                    temp->x=m; temp->y=n; data[m][n].L=0;
                    lasers.pb(temp);
                }
                if (row[n]=='>') {
                    data[m][n].V=LAZER;
                    temp = new laser;
                    temp->x=m; temp->y=n; data[m][n].L=1;
                    lasers.pb(temp);
                }
                if (row[n]=='v') {
                    data[m][n].V=LAZER;
                    temp = new laser;
                    temp->x=m; temp->y=n; data[m][n].L=2;
                    lasers.pb(temp);
                }
                if (row[n]=='<') {
                    data[m][n].V=LAZER;
                    temp = new laser;
                    temp->x=m; temp->y=n; data[m][n].L=3;
                    lasers.pb(temp);
                }
            }
        }
        //DMAT(data); PLASERS;

        //if (k==10)
#ifdef DEBUG
        if (k==CASE)
#endif
        {
        add_coord(ck_list,lev2,lev4,S.FF,S.SS,0,0,1);
        bfs();

        //UDIR;
#ifdef DEBUG
        DMAT(data); P(check_goal<<endl); //PLASERS;
#endif
        //break;
        if(check_goal) P("Case #" <<k<<": " <<check_goal-1<< "\n");
        else P("Case #" <<k<<": impossible" << "\n");
        }
    }
}

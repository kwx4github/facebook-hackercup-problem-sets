#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
int dir[4][2]={-1,0,0,-1,1,0,0,1};
char *a[4];
int startx,starty,endx,endy;
void generate_mats(int M,int N)
{
	for(int i=1;i<4;i++)
		for(int j=0;j<M;j++)
			for(int k=0;k<N;k++)
			{
				if((a[i-1])[j*N+k]=='<')
					(a[i])[j*N+k]='^';
				else if((a[i-1])[j*N+k]=='^')
					(a[i])[j*N+k]='>';
				else if((a[i-1])[j*N+k]=='>')
					(a[i])[j*N+k]='v';
				else if((a[i-1])[j*N+k]=='v')
					(a[i])[j*N+k]='<';
				else
				{
					a[i][j*N+k] = a[i-1][j*N+k];
				}
			}
}
void fill_firing(int M,int N)
{
	for(int i=0;i<4;i++)
		for(int j=0;j<M;j++)
			for(int k=0;k<N;k++)
			{
				if((a[i])[j*N+k]=='<')
				{
					for(int p=k-1;p>=0;p--)
						if((a[i])[j*N+p]=='.'||(a[i])[j*N+p]=='G'||(a[i])[j*N+p]=='S')
							(a[i])[j*N+p]='X';
						else break;
				}
				else if((a[i])[j*N+k]=='^')
				{
					for(int p=j-1;p>=0;p--)
						if((a[i])[p*N+k]=='.'||(a[i])[p*N+k]=='G'||(a[i])[p*N+k]=='S')
							(a[i])[p*N+k]='X';
						else break;
				}
				else if((a[i])[j*N+k]=='>')
				{
					for(int p=k+1;p<N;p++)
						if((a[i])[j*N+p]=='.'||(a[i])[j*N+p]=='G'||(a[i])[j*N+p]=='S')
							(a[i])[j*N+p]='X';
						else break;
				}
				else if((a[i])[j*N+k]=='v')
				{
					for(int p=j+1;p<M;p++)
						if((a[i])[p*N+k]=='.'||(a[i])[p*N+k]=='G'||(a[i])[p*N+k]=='S')
							(a[i])[p*N+k]='X';
						else break;
				}
				else
				{
				}

			}
}
int solve(int M,int N)
{
	generate_mats(M,N);
	fill_firing(M,N);
	std::set<std::pair<std::pair<int,int>,int>> s1;
	std::vector<std::pair<std::pair<int,int>,int>> vc1,vc2;
	if(startx==endx&&starty==endy)
		return 0;
	vc1.push_back(std::pair<std::pair<int,int>,int>(std::pair<int,int>(startx,starty),0));
	s1.insert(std::pair<std::pair<int,int>,int>(std::pair<int,int>(startx,starty),0));
	int count=1;
	while(!vc1.empty())
	{
		while(!vc1.empty())
		{
			for(int i=0;i<vc1.size();i++)
			{
				int alp,bet,gam;
				alp = vc1[i].first.first;
				bet = vc1[i].first.second;
				gam = vc1[i].second;
				gam = (gam+1)%4;
				for(int j=0;j<4;j++)
				{
					if(alp+dir[j][0]>=0&&alp+dir[j][0]<M&&bet+dir[j][1]>=0&&bet+dir[j][1]<N){
					if((a[gam])[(alp+dir[j][0])*N+bet+dir[j][1]]=='G')
						return count;
					else if((a[gam])[(alp+dir[j][0])*N+bet+dir[j][1]]=='S'||(a[gam])[(alp+dir[j][0])*N+bet+dir[j][1]]=='.')
					{
						if(s1.find(std::pair<std::pair<int,int>,int>(std::pair<int,int>(alp+dir[j][0],bet+dir[j][1]),gam))==s1.end())
						{
							s1.insert(std::pair<std::pair<int,int>,int>(std::pair<int,int>(alp+dir[j][0],bet+dir[j][1]),gam));
							vc2.push_back(std::pair<std::pair<int,int>,int>(std::pair<int,int>(alp+dir[j][0],bet+dir[j][1]),gam));
						}
					}
					}

				}
			}
				vc1.clear();
		}

		vc1=vc2;
		vc2.clear();
		count++;
	}
	s1.clear();
	return -1;
}
int main()
{
 freopen("in.txt", "r", stdin);
 freopen("out.txt", "w", stdout);
  int tt;
 // scanf("%d", &tt);
	cin>>tt;
  int total=tt;
  for(int i=0;i<4;i++)
	  a[i]=(char *) malloc(sizeof(char)*101*101);
  while(tt--)
  {
	  int M,N;
	  cin>>M>>N;
	  for(int i=0;i<M;i++)
		  for(int j=0;j<N;j++)
		  {
				  cin>>(a[0])[i*N+j];
				  if((a[0])[i*N+j]=='G')
					{
						endx = i;
					endy=j;}
				  if((a[0])[i*N+j]=='S')
				  {
					  startx=i;
					  starty=j;
				  }
		  }
	  int result = solve(M,N);
	  if(result<0)
		  printf("Case #%d: impossible\n",total-tt);
	  else
		  printf("Case #%d: %d\n",total-tt,result);
  }
  return 0;
}
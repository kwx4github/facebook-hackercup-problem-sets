import java.io.*;
import java.util.*;

class Laser_Maze {
	static class State {
		int i, j, step;
		State(int i, int j, int step) {
			this.i = i;
			this.j = j;
			this.step = step;
		}
	}
	static boolean empty(char a) {
		return a == '.' || a == 'S' || a == 'G';
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw = new PrintWriter(System.out);
		int T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			String s = br.readLine();
			int si = s.indexOf(' ', 0);
			int m = Integer.parseInt(s.substring(0, si));
			int n = Integer.parseInt(s.substring(si + 1));
			char[][] aa = new char[m][n];
			for (int i = 0; i < m; i++)
				br.readLine().getChars(0, n, aa[i], 0);
			int iS = -1;
			int jS = -1;
			int iG = -1;
			int jG = -1;
			boolean[][][] bb = new boolean[m][n][4];
			for (int i = 0; i < m; i++)
				for (int j = 0; j < n; j++)
					switch (aa[i][j]) {
						case 'S':
							iS = i;
							jS = j;
							break;
						case 'G':
							iG = i;
							jG = j;
							break;
						case '#':
							bb[i][j][0] = bb[i][j][1] = bb[i][j][2] = bb[i][j][3] = true;
							break;
						case '^':
							bb[i][j][0] = bb[i][j][1] = bb[i][j][2] = bb[i][j][3] = true;
							for (int k = j - 1; k >= 0 && empty(aa[i][k]); k--)
								bb[i][k][3] = true;
							for (int k = j + 1; k < n && empty(aa[i][k]); k++)
								bb[i][k][1] = true;
							for (int k = i - 1; k >= 0 && empty(aa[k][j]); k--)
								bb[k][j][0] = true;
							for (int k = i + 1; k < m && empty(aa[k][j]); k++)
								bb[k][j][2] = true;
							break;
						case 'v':
							bb[i][j][0] = bb[i][j][1] = bb[i][j][2] = bb[i][j][3] = true;
							for (int k = j - 1; k >= 0 && empty(aa[i][k]); k--)
								bb[i][k][1] = true;
							for (int k = j + 1; k < n && empty(aa[i][k]); k++)
								bb[i][k][3] = true;
							for (int k = i - 1; k >= 0 && empty(aa[k][j]); k--)
								bb[k][j][2] = true;
							for (int k = i + 1; k < m && empty(aa[k][j]); k++)
								bb[k][j][0] = true;
							break;
						case '<':
							bb[i][j][0] = bb[i][j][1] = bb[i][j][2] = bb[i][j][3] = true;
							for (int k = j - 1; k >= 0 && empty(aa[i][k]); k--)
								bb[i][k][0] = true;
							for (int k = j + 1; k < n && empty(aa[i][k]); k++)
								bb[i][k][2] = true;
							for (int k = i - 1; k >= 0 && empty(aa[k][j]); k--)
								bb[k][j][1] = true;
							for (int k = i + 1; k < m && empty(aa[k][j]); k++)
								bb[k][j][3] = true;
							break;
						case '>':
							bb[i][j][0] = bb[i][j][1] = bb[i][j][2] = bb[i][j][3] = true;
							for (int k = j - 1; k >= 0 && empty(aa[i][k]); k--)
								bb[i][k][2] = true;
							for (int k = j + 1; k < n && empty(aa[i][k]); k++)
								bb[i][k][0] = true;
							for (int k = i - 1; k >= 0 && empty(aa[k][j]); k--)
								bb[k][j][3] = true;
							for (int k = i + 1; k < m && empty(aa[k][j]); k++)
								bb[k][j][1] = true;
							break;
					}
			boolean[][][] visited = new boolean[m][n][4];
			LinkedList<State> list = new LinkedList<State>();
			list.addLast(new State(iS, jS, 0));
			int steps = 0;
			while (!list.isEmpty()) {
				State state = list.removeFirst();
				int i, j, s4 = (state.step + 1) % 4;
				i = state.i - 1;
				j = state.j;
				if (i >= 0 && !bb[i][j][s4] && !visited[i][j][s4]) {
					if (i == iG && j == jG) {
						steps = state.step + 1;
						break;
					}
					visited[i][j][s4] = true;
					list.addLast(new State(i, j, state.step + 1));
				}
				i = state.i + 1;
				j = state.j;
				if (i < m && !bb[i][j][s4] && !visited[i][j][s4]) {
					if (i == iG && j == jG) {
						steps = state.step + 1;
						break;
					}
					visited[i][j][s4] = true;
					list.addLast(new State(i, j, state.step + 1));
				}
				i = state.i;
				j = state.j - 1;
				if (j >= 0 && !bb[i][j][s4] && !visited[i][j][s4]) {
					if (i == iG && j == jG) {
						steps = state.step + 1;
						break;
					}
					visited[i][j][s4] = true;
					list.addLast(new State(i, j, state.step + 1));
				}
				i = state.i;
				j = state.j + 1;
				if (j < n && !bb[i][j][s4] && !visited[i][j][s4]) {
					if (i == iG && j == jG) {
						steps = state.step + 1;
						break;
					}
					visited[i][j][s4] = true;
					list.addLast(new State(i, j, state.step + 1));
				}
			}
			pw.println("Case #" + t + ": " + (steps > 0 ? steps : "impossible"));
		}
		pw.close();
	}
}

#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

typedef struct guy{
    int time;
    int x;
    int y;
} guy;

int starty, startx;
int dx[4] = {0, +1, 0, -1};
int dy[4] = {-1, 0, +1, 0};
char s[110][110];
int m[4][110][110];
int used[4][110][110];
int mini[110][110];
queue<guy> myq;

void solve() {
    guy p, aux;
    p.time = 0;
    p.x = startx;
    p.y = starty;
    used[0][starty][startx] = 1;
    mini[starty][startx] = 0;
    myq.push(p);

    while(!myq.empty()) {
        p = myq.front();
        myq.pop();
        bool cond = false;
        for(int i = 0; i < 4; i++) {
            if(m[(p.time + 1)%4][p.y + dy[i]][p.x + dx[i]] == 0) {
                cond = true;
                if(used[(p.time + 1)%4][p.y + dy[i]][p.x + dx[i]] == 0) {
                    used[(p.time + 1)%4][p.y + dy[i]][p.x + dx[i]] = 1;
                    if(mini[p.y + dy[i]][p.x + dx[i]] != -1) {
                        mini[p.y + dy[i]][p.x + dx[i]] = min(mini[p.y + dy[i]][p.x + dx[i]], p.time + 1);
                    }else {
                        mini[p.y + dy[i]][p.x + dx[i]] = p.time + 1;
                    }
                    aux.time = p.time + 1;
                    aux.x = p.x + dx[i];
                    aux.y = p.y + dy[i];
                    myq.push(aux);
                }
            }
        }
        if(cond) {
            if(m[(p.time + 2)%4][p.y][p.x] == 0) {
                if(used[(p.time + 2)%4][p.y][p.x] == 0) {
                    used[(p.time + 2)%4][p.y][p.x] = 1;
                    if(mini[p.y][p.x] != -1) {
                        mini[p.y][p.x] = min(mini[p.y][p.x], p.time + 2);
                    }else {
                        mini[p.y][p.x] = p.time + 2;
                    }
                    aux.time = p.time + 2;
                    aux.x = p.x;
                    aux.y = p.y;
                    myq.push(aux);
                }
            }
        }
    }
}

int main() {
    int t, finalx, finaly;
    int n, mm;
    scanf("%d", &t);
    for(int z = 1; z <= t; z++) {
        scanf("%d %d", &n, &mm);
        for(int i = 0; i < n; i++) {
            scanf("%s", s[i]);
        }
        memset(m, -1, sizeof(m));
        memset(used, 0, sizeof(used));
        memset(mini, -1, sizeof(mini));
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < mm; j++) {
                if((s[i][j] == '.') || (s[i][j] == 'S') || (s[i][j] == 'G')) {
                    m[0][i+1][j+1] = 0;
                    m[1][i+1][j+1] = 0;
                    m[2][i+1][j+1] = 0;
                    m[3][i+1][j+1] = 0;
                }
                if(s[i][j] == 'S') {
                    startx = j + 1;
                    starty = i + 1;
                }
                if(s[i][j] == 'G') {
                    finalx = j + 1;
                    finaly = i + 1;
                }
            }
        }
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < mm; j++) {
                if(s[i][j] == '<') {
                    int k = j - 1;
                    while(m[0][i+1][k+1] != -1) {
                        m[0][i+1][k+1] = -2;
                        k--;
                    }
                    k = i - 1;
                    while(m[1][k+1][j+1] != -1) {
                        m[1][k+1][j+1] = -2;
                        k--;
                    }
                    k = j + 1;
                    while(m[2][i+1][k+1] != -1) {
                        m[2][i+1][k+1] = -2;
                        k++;
                    }
                    k = i + 1;
                    while(m[3][k+1][j+1] != -1) {
                        m[3][k+1][j+1] = -2;
                        k++;
                    }
                }else if(s[i][j] == 'v') {
                    int k = j - 1;
                    while(m[1][i+1][k+1] != -1) {
                        m[1][i+1][k+1] = -2;
                        k--;
                    }
                    k = i - 1;
                    while(m[2][k+1][j+1] != -1) {
                        m[2][k+1][j+1] = -2;
                        k--;
                    }
                    k = j + 1;
                    while(m[3][i+1][k+1] != -1) {
                        m[3][i+1][k+1] = -2;
                        k++;
                    }
                    k = i + 1;
                    while(m[0][k+1][j+1] != -1) {
                        m[0][k+1][j+1] = -2;
                        k++;
                    }
                }else if(s[i][j] == '>') {
                    int k = j - 1;
                    while(m[2][i+1][k+1] != -1) {
                        m[2][i+1][k+1] = -2;
                        k--;
                    }
                    k = i - 1;
                    while(m[3][k+1][j+1] != -1) {
                        m[3][k+1][j+1] = -2;
                        k--;
                    }
                    k = j + 1;
                    while(m[0][i+1][k+1] != -1) {
                        m[0][i+1][k+1] = -2;
                        k++;
                    }
                    k = i + 1;
                    while(m[1][k+1][j+1] != -1) {
                        m[1][k+1][j+1] = -2;
                        k++;
                    }
                }else if(s[i][j] == '^') {
                    int k = j - 1;
                    while(m[3][i+1][k+1] != -1) {
                        m[3][i+1][k+1] = -2;
                        k--;
                    }
                    k = i - 1;
                    while(m[0][k+1][j+1] != -1) {
                        m[0][k+1][j+1] = -2;
                        k--;
                    }
                    k = j + 1;
                    while(m[1][i+1][k+1] != -1) {
                        m[1][i+1][k+1] = -2;
                        k++;
                    }
                    k = i + 1;
                    while(m[2][k+1][j+1] != -1) {
                        m[2][k+1][j+1] = -2;
                        k++;
                    }
                }
            }
        }
        solve();
        if(mini[finaly][finalx] == -1) {
            printf("Case #%d: impossible\n", z);
        }else {
            printf("Case #%d: %d\n", z, mini[finaly][finalx]);
        }
    }
    return 0;
}

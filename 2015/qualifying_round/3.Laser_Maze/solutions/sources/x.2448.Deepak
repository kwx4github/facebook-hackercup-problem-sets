#include<iostream>
#include<bits/stdc++.h>


#include<queue>
#include<stack>
#include<vector>
#include<set>
#include<map>

#define ff first
#define ss second
#define mp make_pair

using namespace std;



int rotatec(int *p);
int rotateac(int *p);
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};

  char arr[101][101];
  int x[101],y[101],p[101],point=0,ct=0,cas=0;
  int desx,desy,n,m;
  int is_reached(queue<pair<pair<int,int>,int> > q,int *x,int *y,int *z,int lev);
int sx,sy,ll=0,ii=0;




   int main()
    {
    	
    	
    		freopen("kkraj.in","r",stdin);

    	int t;
    	  cin>>t;

    	    while(t--)
    	     {
    	     	queue<pair<pair<int,int>,int> > q;
    	     	ll++;
    	     	cas++;
    	     //	cout<<"case "<<cas<<endl;
    	     	point =0;
    	     	
    	     	cin>>n>>m;
    	     
    	     	  for(int i=0;i<n;i++)
    	     	  {
    	     	  	
    	     	  
    	     	     for(int j=0;j<m;j++)
    	     	     {
    	     	     	cin>>arr[i][j];
    	     	     	if(arr[i][j]=='S')
    	     	     	 {
    	     	     	 	sx=i;
    	     	     	 	sy=j;
    	     	     	 }
    	     	     	else if(arr[i][j]=='G')
    	     	     	  {
    	     	     	  	desx=i;
    	     	     	  	desy=j;
    	     	     	  }
    	     	     	  else if(arr[i][j]=='>' )	// >>=3
							{
								x[point]=i;
								y[point]=j;
								p[point++]=3;
				                        	}
    	     	     	   
    	     	     	   else if(arr[i][j]=='<') //<<=1
    	     	     	   {
    	     	     	   	    x[point]=i;
								y[point]=j;
								p[point++]=1;
    	     	     	   }
							 
    	     	     	   
    	     	     	    else if(arr[i][j]=='^')//^=2
    	     	     	    {
    	     	     	    	x[point]=i;
								y[point]=j;
								p[point++]=2;
    	     	     	    }
    	     	     	    
    	     	     	   else if(arr[i][j]=='v') // v=4
    	     	     	    {
    	     	     	    	x[point]=i;
								y[point]=j;
								p[point++]=4;
    	     	     	    }
    	     	     	     

    	     	     }
    	     	 }
    	     	    /*  cout<<"given array is ";
    	     	        for(int i=0;i<n;i++)
    	     	         {
    	     	         	  for(int j=0;j<m;j++)
    	     	         	   cout<<arr[i][j];
    	     	         	   cout<<endl;
    	     	         }*/
    	     	     
                 for(int i=0;i<=3;i++)
                  {
                  	 if(arr[sx+dx[i]][sy+dy[i]]=='.' || arr[sx+dx[i]][sy+dy[i]]=='G')
                  	  {
                  	  	q.push(mp(mp(sx+dx[i],sy+dy[i]),1));
                  	  }
                  }
              
                   
    	     	    
    	     	   
    	     	    
    	     
    	       
    	     	      
    	     	int ans=is_reached(q,x,y,p,1);
    	     	 
    	     }
       return 0;
    }

int is_reached(queue<pair<pair<int,int>,int> > q,int *x,int *y,int *p,int lev)
     {
   
              pair< pair<int,int>,int > start;
                     if(q.empty()==1)
                                 {
       	                            cout<<"Case #"<<cas<<": "<<"impossible\n";
       	                             return 0;
                                            }
      // cout<<"geggege\n";
     	                         start=q.front();
     	
      // cout<<"corrently start "<<start.ff.ff<<" "<<start.ff.second<<" with level "<<level<<endl;
     	q.pop();
        
     	int i=0,flag=0;
     	if(start.ff.first==desx &&  start.ff.second==desy)
     	  {
     	  	return lev;
     	  }

     	  else
     	   {
     	   	   rotatec(p);
     	   	   i=0,flag=0;

     	   	     for(int i=0;i<point;i++)
     	   	      {
     	   	           if(start.ff.ff==x[i] && p[i]==1 && start.ff.ff<y[i])
     	   	            {
     	   	            	 int tt=0;
     	   	            	  for(int mn=start.ff.ss+1;mn<y[i];mn++)
     	   	            	   {
     	   	            	   	  if(arr[start.ff.ff][mn]=='#' ||  arr[start.ff.ff][mn]=='>' || arr[start.ff.ff][mn]=='<'  || arr[start.ff.ff][mn]=='v' || arr[start.ff.ff][mn]=='^' )
     	   	            	   	   {
     	   	            	   	   	tt=1;
     	   	            	   	   	break;
     	   	            	   	   }
     	   	            	   }
     	   	            	   if(tt==0)
     	   	            	   {
     	   	            	   	flag=1;
     	   	            	    break;
     	   	            	   }
     	   	            	
     	   	            }
     	   	            else if(start.ff.ff==x[i] && p[i]==3 && start.ff.ff>y[i])
     	   	             {
     	   	                    
     	   	                  int tt=0;
     	   	            	  for(int mn=start.ff.ss-1;mn>y[i];mn--)
     	   	            	   {
     	   	            	   	  if(arr[start.ff.ff][mn]=='#' ||  arr[start.ff.ff][mn]=='<' || arr[start.ff.ff][mn]=='>' || arr[start.ff.ff][mn]=='v' || arr[start.ff.ff][mn]=='^' )
     	   	            	   	   {
     	   	            	   	   	tt=1;
     	   	            	   	   	break;
     	   	            	   	   }
     	   	            	   }
     	   	            	   if(tt==0)
     	   	            	   {
     	   	            	   	flag=1;
     	   	            	    break;
     	   	            	   }
     	   	            	
     	   	             }
     	   	             else if(start.ss==y[i]&& p[i]==2 && start.ss<x[i])
     	   	              {
     	   	              int tt=0;
     	   	            	  for(int mn=start.ff.ff+1;mn<x[i];mn++)
     	   	            	   {
     	   	            	   	  if(arr[mn][start.ff.ff]=='#' || arr[mn][start.ff.ff]=='>'  || arr[mn][start.ff.ff]=='<' || arr[mn][start.ff.ff]=='v' || arr[mn][start.ff.ff]=='^'  )
     	   	            	   	   {
     	   	            	   	   	tt=1;
     	   	            	   	   	break;
     	   	            	   	   }
     	   	            	   }
     	   	            	   if(tt==0)
     	   	            	   {
     	   	            	   	flag=1;
     	   	            	    break;
     	   	            	   }
     	   	            	
     	   	              }
     	   	              else if(start.ff.ss==y[i] && p[i]==4 && start.ff.ss>x[i])
     	   	               {
     	   	               	int tt=0;
     	   	            	  for(int mn=start.ff.ff-1;mn>x[i];mn--)
     	   	            	   {
     	   	            	   	  if(arr[mn][start.ff.ff]=='#' || arr[mn][start.ff.ff]=='>'  || arr[mn][start.ff.ff]=='<' || arr[mn][start.ff.ff]=='v' || arr[mn][start.ff.ff]=='^'   )
     	   	            	   	   {
     	   	            	   	   	tt=1;
     	   	            	   	   	break;
     	   	            	   	   }
     	   	            	   }
     	   	            	   if(tt==0)
     	   	            	   {
     	   	            	   	flag=1;
     	   	            	    break;
     	   	            	   }
     	   	            	
     	   	               }
     	   	      }
     	   	      if(flag==1) rotateac(p);
     	   	      else
     	   	       {
     	   	       	   for(int k=0;k<=3;k++)
     	   	       	    {
     	   	       	    	  if(start.ff.ff+dx[k]<n && start.ff.ff+dx[k]>=0 && start.ff.ss+dy[k]>=0 && start.ff.ss+dy[k]<m)
     	   	       	    	   {
                                   if(arr[start.ff.ff+dx[k]][start.ff.ss+dy[k]]=='.' || arr[start.ff.ff+dx[k]][start.ff.ss+dy[k]]=='S'||arr[start.ff.ff+dx[k]][start.ff.ss+dy[k]]=='G')
                                   {
                                   	   int a,b;
                                   	  // cout<<"start.ff "<<start.ff<<" start.ss"<<start.ss<<endl;
                                   	   a=start.ff.ff+dx[k];
                                   	   b=start.ff.ss+dy[k];
                                   	   q.push(mp(mp(a,b),start.ss+1));
     	   	       	    	  	     //cout<<"pussing index "<<a<<" "<<b<<endl;
     	   	       	    	   	     if(arr[start.ff.ff+dx[k]][start.ff.ss+dy[k]]=='G')
											   {
											   	cout<<"Case #"<<cas<<": "<<start.ss+1<<endl;
											   	return lev;
											   	
											   } 
                                   }
                                    

     	   	       	    	   }
     	   	       	    }

     	   	       }

     	   }

    is_reached( q,x,y,p,++lev);
     	  return 0;

     }




     int rotatec(int *p)
     {
     	 
     	 	int i=0;
     	 	 for(i=0;i<point;i++)
     	 	  {
     	 	  	  p[i]+=1;
     	 	  	  if(p[i]>4)
     	 	  	   p[i]=1;
     	 	  }
     	/* 	    cout<<"after rotating clock \n";
     	 	    i=0;
     	 	    for(i=0;i<point;i++)
     	 	     {
     	 	  	     //cout<<v[i].first.first<<" "<<v[i].first.second<<" "<<v[i].second<<endl;
     	 	  	     cout<<x[i]<<" "<<y[i]<<" "<<p[i]<<endl;
     	 	      }*/


     	 	      return 0;

     }









      int rotateac(int *p)
     {
     	 
     	 	int i=0;
     	 	 for(i=0;i<point;i++)
     	 	  {
     	 	  	  p[i]-=1;
     	 	  	  if(p[i]<1)
     	 	  	   p[i]=4;
     	 	  }
     	 	  
     	 	/*  cout<<"anti\n";
     	 	    for(i=0;i<point;i++)
     	 	     {
     	 	  	     //cout<<v[i].first.first<<" "<<v[i].first.second<<" "<<v[i].second<<endl;
     	 	  	     cout<<x[i]<<" "<<y[i]<<" "<<p[i]<<endl;
     	 	      }*/

     	 	      return 0;

     }

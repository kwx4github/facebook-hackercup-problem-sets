import java.util.*;
import java.io.*;

public class maze {
    private static int dx[] = new int[] {1, -1, 0, 0};
    private static int dy[] = new int[] {0, 0, 1, -1};

    private static class Pos {
        public Pos(int r, int c, int moves) {
            this.r = r;
            this.c = c;
            this.moves = moves;
        }
        int r;
        int c;
        int moves;
    }
    private static class Laser {
        public Laser(int r, int c, int dir) {
            this.r = r;
            this.c = c;
            this.dir = dir;
        }

        int r;
        int c;
        int dir;
    }
    private static int sr, sc, gr, gc, R, C;
    private static boolean grid[][][];
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("maze.in"));
        PrintWriter pw = new PrintWriter(new FileWriter("maze.out"));

        int T = Integer.parseInt(br.readLine());
        for (int caseNum = 1; caseNum <= T; caseNum++) {
            StringTokenizer tok = new StringTokenizer(br.readLine());
            R = Integer.parseInt(tok.nextToken());
            C = Integer.parseInt(tok.nextToken());

            grid = new boolean[R][C][5];
            ArrayList<Laser> lasers = new ArrayList<>();
            for (int r = 0; r < R; r++) {
                String l = br.readLine();
                for (int c = 0; c < C; c++) {
                    char chr = l.charAt(c);
                    if (chr == '#') {
                        grid[r][c][4] = true;
                    } else if (chr == '^') {
                        grid[r][c][4] = true;
                        lasers.add(new Laser(r, c, 0));
                    } else if (chr == '>') {
                        grid[r][c][4] = true;
                        lasers.add(new Laser(r, c, 1));
                    } else if (chr == 'v') {
                        grid[r][c][4] = true;
                        lasers.add(new Laser(r, c, 2));
                    } else if (chr == '<') {
                        grid[r][c][4] = true;
                        lasers.add(new Laser(r, c, 3));
                    } else if (chr == 'S') {
                        sr = r;
                        sc = c;
                    } else if (chr == 'G') {
                        gr = r;
                        gc = c;
                    }
                }
            }

            for (Laser l : lasers) {
                for (int i = 0; i < 4; i++) {
                    switch (l.dir + i % 4) {
                    case 0:
                        // Column up
                        for (int r = l.r - 1; r >= 0; r--) {
                            if (grid[r][l.c][4]) {
                                break;
                            }
                            grid[r][l.c][i] = true;
                        }
                        break;
                    case 1:
                        // Row right
                        for (int c = l.c + 1; c < C; c++) {
                            if (grid[l.r][c][4]) {
                                break;
                            }
                            grid[l.r][c][i] = true;
                        }
                        break;
                    case 2:
                        // Column down
                        for (int r = l.r + 1; r < R; r++) {
                            if (grid[r][l.c][4]) {
                                break;
                            }
                            grid[r][l.c][i] = true;
                        }
                        break;
                    case 3:
                        // Row left
                        for (int c = l.c - 1; c >= 0; c--) {
                            if (grid[l.r][c][4]) {
                                break;
                            }
                            grid[l.r][c][i] = true;
                        }
                        break;
                    }
                }
            }

            int result = bfs();
            pw.println("Case #" + caseNum + ": " +
                       (result == -1 ? "impossible" : result));
        }

        pw.flush();
    }

    private static int bfs() {
        boolean visited[][][] = new boolean[R][C][4];
        LinkedList<Pos> q = new LinkedList<>();
        q.add(new Pos(sr, sc, 0));
        int curR = sr;
        int curC = sr;
        while (!q.isEmpty()) {
            Pos p = q.pollFirst();
            curR = p.r;
            curC = p.c;
            int moves = p.moves;
            int mod = moves % 4;
            if (curR == gr && curC == gc) {
                return moves;
            }
            moves++;
            mod = moves % 4;
            for (int i = 0; i < dx.length; i++) {
                int r = curR + dx[i];
                int c = curC + dy[i];
                if (r >= R || r < 0 || c >= C || c < 0) {
                    continue;
                }
                if (grid[r][c][4] || grid[r][c][mod]) {
                    continue;
                }
                if (!visited[r][c][mod]) {
                    visited[r][c][mod] = true;
                    q.add(new Pos(r, c, moves));
                }
            }
        }
        return -1;
    }
}

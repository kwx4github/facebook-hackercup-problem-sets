#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

const int dx[4] = {1,-1,0,0};
const int dy[4] = {0,0,1,-1};

struct state {
    int x,y;
    int step;
    state(int x, int y, int step) {
        this->x = x;
        this->y = y;
        this->step = step;
    }
};

char a[105][105];
bool vis[105][105][4];
int m, n;

bool boundary(int x, int y) {
    return x >= 0 && x < m && y >= 0 && y < n;
}

bool check(int x, int y) {
    if(boundary(x, y)){
        return a[x][y] == '.';
    } else {
        return false;
    }
}

int parse(char c) {
    if(c == '^') return 0;
    if(c == '>') return 1;
    if(c == 'v') return 2;
    if(c == '<') return 3;
    return -1;
}

bool die(char c, int step, int dir) {
    int ini = parse(c);
    if(ini >= 0) {
        int stat = (ini + step)%4;
        if(dir == 0) return stat == 0; 
        if(dir == 1) return stat == 2; 
        if(dir == 2) return stat == 3; 
        if(dir == 3) return stat == 1; 
    }
    return false;
}

bool can(int x, int y, int step) {
    if(check(x, y)) {
        //cout << "Accessable!" << endl;
        for(int k = 0 ; k < 4 ; k++) {
            int xx = x + dx[k], yy = y + dy[k];
            while(boundary(xx, yy)) {
                if(die(a[xx][yy], step, k)) {
                    //cout << "Killed on dir " << k << endl;
                    return false;
                }
                xx = xx + dx[k], yy = yy + dy[k];
            }
        }
        return true;
    } else {
        return false;
    }
    return false;
}

int main() {
    freopen("data.in", "r", stdin);
    freopen("data.out", "w", stdout);
    int t;
    cin >> t;
    for(int cas = 1; cas <= t; cas ++) {
        cin >> m >> n;
        getchar();
        for(int i = 0 ; i < m ; i++) {
            gets(a[i]);
        }
        memset(vis, false, sizeof(vis));
        int sx, sy, tx, ty;
        for(int i = 0 ; i < m ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if(a[i][j] == 'S') sx = i, sy = j, a[i][j] = '.';
                if(a[i][j] == 'G') tx = i, ty = j, a[i][j] = '.';
            }
        }
        int ans = -1;
        queue <state> q;
        q.push(state(sx, sy, 0));
        vis[sx][sy][0] = true;
        while(!q.empty()) {
            state cur = q.front();
            q.pop();
            //cout << cur.x << ',' << cur.y << ':' << cur.step << endl;
            if(cur.x == tx && cur.y == ty) {
                ans = cur.step;
                break;
            }
            for(int i = 0 ; i < 4 ; i++) {
                int xx = cur.x + dx[i];
                int yy = cur.y + dy[i];
                int step = cur.step + 1;
                //cout << "dir" << i << endl;
                //cout << can(xx, yy, step) << endl;
                //cout << !vis[xx][yy][step%4] << endl;
                if(can(xx, yy, step) && !vis[xx][yy][step%4]) {
                    q.push(state(xx, yy, step));
                    vis[xx][yy][step%4] = true;
                }
            }
        }
        cout << "Case #" << cas << ": ";
        if(ans >= 0) cout << ans << endl;
        else cout << "impossible" << endl;
    }
}

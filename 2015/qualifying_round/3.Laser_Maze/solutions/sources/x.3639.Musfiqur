/*
Author :: MD. Musfiqur Rahman Sanim
Aust cse 28th Batch
ID:11.02.04.097
*/


//{ Template
using namespace std;
//{ headers
#include<bits/stdc++.h>
//}
//{ Loops
#define forab(i,a,b) for (__typeof(b) i = (a); i <= (b); ++i)
#define rep(i,n) forab (i, 0, (n) - 1)
#define For(i,n) forab (i, 1, n)
#define rofba(i,a,b) for (__typeof(b) i = (b); i >= (a); --i)
#define per(i,n) rofba (i, 0, (n) - 1)
#define rof(i,n) rofba (i, 1, n)
#define forstl(i,s) for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)
//}
//{ Floating-points
#define EPS 1e-7
#define abs(x) (((x) < 0) ? - (x) : (x))
#define zero(x) (abs (x) < EPS)
#define equal(a,b) (zero ((a) - (b)))
#define PI 2*acos (0.0)
//}
typedef long long int64;
typedef unsigned long long int64u;
#define memo(a,v) memset(a,v,sizeof(a))
#define all(a) a.begin(),a.end()
#define db double
#define pb push_back
#define pii pair<int ,int >
#define NL puts("")
#define ff first
#define ss second
//{
//Intput_Output
#define gc getchar
template<class T>inline bool read(T &x){int c=gc();int sgn=1;while(~c&&c<'0'|c>'9'){if(c=='-')sgn=-1;c=gc();}for(x=0;~c&&'0'<=c&&c<='9';c=gc())x=x*10+c-'0';x*=sgn;return ~c;}
#define II ({ int a; read(a); a;})
#define IL ({ int64 a; read(a);  a;})
#define ID ({ db a; scanf("%lf",&a);  a;})
#define IC ({ char a; scanf("%c",&a);  a;})
#define IS ({ string a; cin >> a;  a;})
#define OC printf("Case #%d:",cs);
//}
//}
#define __(args...) {dbg,args; cerr<<endl;}
struct debugger{template<typename T> debugger& operator , (const T& v){cerr<<v<<"    "; return *this; }}dbg;
template <class T, class U> inline T max (T &a, U &b)
{
    return a > b ? a : b;
}
template <class T, class U> inline T min (T &a, U &b)
{
    return a < b ? a : b;
}
template <class T, class U> inline T swap (T &a, U &b)
{
    T tmp = a;
    a = b;
    b = tmp;
}
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 Direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[6]={2,1,-1,-2,-1,1};int dy[6]={0,1,1,0,-1,-1}; //Hexagonal Direction

const int64 INF = (1ll)<<50;
const int mx = 1e5 + 7;
const int mod = 1000000007 ;
const db pi = PI;
int EQ(double d) {
    if ( fabs(d) < EPS ) return 0;
    return d > EPS ? 1 : -1 ;
}
int n,m;
string st[102];
bool flag[102][102][4];

bool call(int i,int k){
    if(st[i][k] == '.' || st[i][k] == 'S' || st[i][k] == 'G') return true;
    return false;
}

void Set(int i,int j){
    if(st[i][j] == '^'){
        rofba(k,0,i-1){
            flag[k][j][0] = true;
            if(call(k,j)) continue;
            break;
        }
        forab(k,j+1,m-1){
            flag[i][k][1] = true;
            if(call(i,k)) continue;
            break;
        }
        forab(k,i+1,n-1){
            flag[k][j][2] = true;
            if(call(k,j)) continue;
            break;
        }
        rofba(k,0,j-1){
            flag[i][k][3] = true;
            if(call(i,k)) continue;
            break;
        }
    }
    else if(st[i][j] == '<'){
        rofba(k,0,i-1){
            flag[k][j][1] = true;
            if(call(k,j)) continue;
            break;
        }
        forab(k,j+1,m-1){
            flag[i][k][2] = true;
            if(call(i,k)) continue;
            break;
        }
        forab(k,i+1,n-1){
            flag[k][j][3] = true;
            if(call(k,j)) continue;
            break;
        }
        rofba(k,0,j-1){
            flag[i][k][0] = true;
            if(call(i,k)) continue;
            break;
        }
    }
    else if(st[i][j] == '>'){
        rofba(k,0,i-1){
            flag[k][j][3] = true;
            if(call(k,j)) continue;
            break;
        }
        forab(k,j+1,m-1){
            flag[i][k][0] = true;
            if(call(i,k)) continue;
            break;
        }
        forab(k,i+1,n-1){
            flag[k][j][1] = true;
            if(call(k,j)) continue;
            break;
        }
        rofba(k,0,j-1){
            flag[i][k][2] = true;
            if(call(i,k)) continue;
            break;
        }
    }
    else if(st[i][j] == 'v'){
        rofba(k,0,i-1){
            flag[k][j][2] = true;
            if(call(k,j)) continue;
            break;
        }
        forab(k,j+1,m-1){
            flag[i][k][3] = true;
            if(call(i,k)) continue;
            break;
        }
        forab(k,i+1,n-1){
            flag[k][j][0] = true;
            if(call(k,j)) continue;
            break;

        }
        rofba(k,0,j-1){
            flag[i][k][1] = true;
            if(call(i,k)) continue;
            break;
        }
    }

    rep(k,4)flag[i][j][k] = true;

}
pii src,sink;
struct node{
    int x,y,wh;
    node(int x,int y,int wh):x(x),y(y),wh(wh){}
    bool operator<(const node& n)const{
        return wh > n.wh;
    }
};
bool vis[102][102][4];
pii path[102][102][4];
bool valid(int x,int y,int w){
    w %= 4;
    return (x>=0&&x<n&&y>=0&&y<m&&!flag[x][y][w]);
}
int dis[102][102][4];
int bfs(){
    priority_queue<node >q;
    q.push(node(src.ff,src.ss,0));
    dis[src.ff][src.ss][0] = 0;
    while(!q.empty()){
        node p = q.top();
        q.pop();
        if(p.x == sink.ff && p.y == sink.ss) return p.wh;
        if(vis[p.x][p.y][(p.wh)%4]) continue;
        vis[p.x][p.y][(p.wh)%4] = true;
        //__(p.x,p.y,p.wh,flag[p.x][p.y][p.wh%4])
        rep(i,4){
            int xx = p.x + dx[i];
            int yy = p.y + dy[i];
            if(valid(xx,yy,p.wh+1) && (dis[xx][yy][(p.wh + 1)%4] == -1 || dis[xx][yy][(p.wh + 1)%4] > p.wh + 1  )){
                dis[xx][yy][(p.wh + 1)%4] = p.wh + 1;
                q.push(node(xx,yy,p.wh+1));
                path[xx][yy][(p.wh + 1)%4] = pii(p.x,p.y);
            }
        }
    }
    return -1;
}

void print(int x,int y,int wh){
    if(wh == 0){
        __(x,y,wh);
        return;
    }
    pii p = path[x][y][wh%4];
    print(p.ff,p.ss,wh-1);
    __(x,y,wh);
}

int main() {
#ifdef Sanim
    freopen ("in.txt", "r", stdin);
    freopen ("output.txt", "w", stdout);
#endif
    int t = II;
    For(cs,t){
        n = II,m = II;
        memo(dis,-1);
        memo(path,-1);
        memo(vis,0);memo(flag,0);
        rep(i,n){
            cin >> st[i];
            rep(j,m){
                if(st[i][j] == 'S') src = pii(i,j);
                if(st[i][j] == 'G') sink = pii(i,j);
                if(call(i,j)) continue;
                Set(i,j);
            }
        }
       // __(flag[54][36][2],st[54][40])
        int ans = bfs();
        //print(sink.ff,sink.ss,ans);
        OC;
        if(ans == -1)printf(" impossible\n");
        else printf(" %d\n",ans);
    }
}

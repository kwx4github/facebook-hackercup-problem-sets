#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>
#include <string>
#include <queue>

using namespace std;

#define LOG(x) cerr << #x << " = " << (x) << "\n"

typedef long long llint;
typedef pair<int,int> pii;
const int MAXN = 110;
const string DIRECTIONS = "<^>v";
const int dr[] = { 0, -1, 0, 1 };
const int dc[] = { -1, 0, 1, 0 };

int n, m;
char a[MAXN][MAXN];
char b[4][MAXN][MAXN];
int bio[4][MAXN][MAXN];
int dist[4][MAXN][MAXN];
int sr, sc;
int er, ec;

void draw_laser_beam(int r, int c, char out[MAXN][MAXN]) {
  int dir = DIRECTIONS.find(a[r][c]);
  out[r][c] = '#'; 
  r += dr[dir], c += dc[dir];
  while (r >= 0 && r < n && c >= 0 && c < m && 
      (a[r][c] == '.' || a[r][c] == 'S' || a[r][c] == 'G')) {
    out[r][c] = '#';
    r += dr[dir], c += dc[dir];
  }
}

void preprocess_turrets(char out[MAXN][MAXN]) {
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j)
      out[i][j] = a[i][j];
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (out[i][j] == 'S' || out[i][j] == 'G' || out[i][j] == '.') {
        out[i][j] = '.';
      } else if (DIRECTIONS.find(out[i][j]) != string::npos) {
        draw_laser_beam(i, j, out);
      }
    }
  }
}

void rotate_turrets() {
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j)
      if (DIRECTIONS.find(a[i][j]) != string::npos) 
        a[i][j] = DIRECTIONS[(DIRECTIONS.find(a[i][j]) + 1) % 4];
}

void bfs() {
  queue<tuple<int,int,int>> q;
  for (int i = 0; i < 4; ++i)
    for (int j = 0; j < n; ++j)
      for (int k = 0; k < m; ++k)
        bio[i][j][k] = false, dist[i][j][k] = 1e9;

  q.push(make_tuple(0, sr, sc));
  bio[0][sr][sc] = true;
  dist[0][sr][sc] = 0;

  while (q.size()) {
    int rot, r, c;
    tie(rot, r, c) = q.front();
    q.pop();
    for (int i = 0; i < 4; ++i) {
      int rr = r + dr[i], cc = c + dc[i];
      int rrot = (rot + 1) % 4;
      if (rr < 0 || rr >= n || cc < 0 || cc >= m || 
          b[rrot][rr][cc] == '#') continue;
      if (bio[rrot][rr][cc]) continue;
      bio[rrot][rr][cc] = true;
      dist[rrot][rr][cc] = dist[rot][r][c] + 1;
      q.push(make_tuple(rrot, rr, cc));
    }
  }
}

void solve() {
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; ++i) {
    scanf("%s", a[i]);
    for (int j = 0; j < m; ++j) {
      if (a[i][j] == 'S')
        sr = i, sc = j;
      if (a[i][j] == 'G')
        er = i, ec = j;
    }
  }
  
  for (int i = 0; i < 4; ++i) {
    preprocess_turrets(b[i]);
    rotate_turrets();
  }

  bfs();
  bool ok = false;
  int ans = 1e9;
  for (int i = 0; i < 4; ++i) {
    if (bio[i][er][ec]) {
      ok = true;
      ans = min(ans, dist[i][er][ec]);
    }
  }
  if (ok) {
    printf("%d\n", ans);
  } else {
    printf("impossible\n");
  }
}

int main() {
  int t; scanf("%d", &t);
  for (int i = 0; i < t; ++i) {
    printf("Case #%d: ", i+1);
    solve();
  }
  return 0;
}


#include <iostream>
#include <map>
#include <queue>
#include <string>
#include <cstring>
#define INF 100000000
using namespace std;
int oX[] = {0, 1, 0, -1};
int oY[] = {-1, 0, 1, 0};
int g[128][128], dist[4][128][128];
bool x[4][128][128];
map<char, int> mp;

int T, N, M;

inline bool inside(int i, int j){
    return i >= 0 && i < N && j >= 0 && j < M; 
}
int p[] = {2, 3, 0, 1};
inline bool chk_line(int i, int j, int k, int dir){
    while(true){
        i += oY[dir];
        j += oX[dir];
        if(!inside(i, j)) break;
        if(g[i][j] < 4 && (g[i][j] + k) % 4 == p[dir])
            return false;
        if(g[i][j] != mp['.']) break;
        
    }
    
    return true;
}
inline bool check(int i, int j, int k){
    for(int d = 0; d < 4; d++)
        if(!chk_line(i, j, k, d))
            return false;
    return true;
}
void calc(){
    for(int i = 0; i < N; i++)
        for(int j = 0; j < M; j++)
            for(int k = 0; k < 4; k++)
                x[k][i][j] = check(i, j, k);
}
struct tri {
    int x ,y, k;
    
};
int main(){
    mp['^'] = 0;
    mp['>'] = 1;
    mp['v'] = 2;
    mp['<'] = 3;
    mp['.'] = 4;
    mp['#'] = 5;
    mp['S'] = 6;
    mp['G'] = 4;
    string line;
    
    cin >> T;
    int sX, sY, gX, gY;
    for(int t = 1; t <= T; t++){
        cin >> N >> M;
        for(int i = 0; i < N; i++){
            cin >> line;
            for(int j = 0; j < M; j++){
                g[i][j] = mp[line[j]];
                if(g[i][j] == mp['S']){
                    sX = j;
                    sY = i;
                }
                if(g[i][j] == mp['G']){
                    gX = j;
                    gY = i;
                }
            }
        }
        calc();
        
        memset(dist, -1, sizeof(dist));
        
        queue<tri> q;
        tri start;
        start.x = sX; start.y = sY; start.k = 0;
        
        q.push(start);
        dist[0][sY][sX] = 0;
        while(!q.empty()){
            tri u = q.front();
            q.pop();
            
            for(int i = 0; i < 4; i++){
                tri v;
                v.x = u.x + oX[i];
                v.y = u.y + oY[i];
                v.k = (u.k + 1) % 4;
                
                if(!inside(v.y, v.x)) continue;
                if(dist[v.k][v.y][v.x] != -1 || !x[v.k][v.y][v.x]) continue;
                dist[v.k][v.y][v.x] = dist[u.k][u.y][u.x] + 1;
                q.push(v);
            }

        }
        int res = INF;
        for(int i = 0; i < 4; i++){
            if(dist[i][gY][gX] != -1 )
                res = min(res, dist[i][gY][gX]);
        }        
        cout << "Case #" << t << ": ";
        if(res == INF)
            cout << "impossible" << endl;
        else
            cout << res << endl;
    }
    
    return 0;
}


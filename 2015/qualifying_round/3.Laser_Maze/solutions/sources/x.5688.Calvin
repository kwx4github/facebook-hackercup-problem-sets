
def cache(f):
    c = {}
    def w(*args):
        if args in c: return c[args]
        ret = f(*args)
        c[args] = ret
        return ret
    return w

def solve(m, sx, sy, tx, ty, M, N):
    q = []
    q.append((sx, sy, 0, 0))
    lo = 0
    visited = set()
    visited.add((sx, sy, 0))
    while lo < len(q):
        qx, qy, qp, d = q[lo]
        if (qx, qy) == (tx, ty):
            return d
        lo += 1
        p = (qp + 1) % 4
        for xx,yy in [(1,0),(-1,0),(0,1),(0,-1)]:
            x,y = qx + xx, qy + yy
            if x < 0 or x >= N or y < 0 or y >= M or m[p][x][y]:
                continue
            if (x, y, p) in visited:
                continue
            q.append((x, y, p, d+1))
            visited.add((x, y, p))

dm = dict(zip('^>V<', range(4)))
mm = [(-1,0), (0,1), (1,0), (0,-1)]
T = int(raw_input())
for ii in range(T):
    N, M = map(int, raw_input().split())
    sm = [list(raw_input()) for i in range(N)]
    sx, sy = -1, -1
    m = []
    for p in range(4):
        m.append([])
        for i in range(N):
            m[p].append([])
            for j in range(M):
                m[p][i].append(int(sm[i][j] not in 'SG.'))
    for i in range(N):
        for j in range(M):
            if sm[i][j] == 'S':
                sx, sy = i,j
            elif sm[i][j] == 'G':
                tx, ty = i,j
            elif sm[i][j] in '^>V<':
                for p in xrange(4):
                    xx, yy = mm[(dm[sm[i][j]] + p) % 4]
                    ux, uy = i + xx, j + yy
                    while (ux >= 0 and uy >= 0 and ux < N and uy < M and m[p][ux][uy] != 1): 
                        m[p][ux][uy] = 2
                        ux += xx
                        uy += yy
    ans = solve(m, sx, sy, tx, ty, M, N) or "impossible"
    print "Case #%d: %s" % (ii+1, ans)
                        
                    

            

    






/***************************             Just beyond the HORIZON of the so called IMPOSSIBLE  is INFINTE POSSIBILITY                   *******************************************/


/******** HEADER FILES  ********/

#include<cstdio>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<map>
#include<limits.h>



/******** MACRO *******/


#define il(n)                   scanf("%lld",&n)
#define i(n)                    scanf("%d",&n)
#define vv                      vector<int>
#define ll                      long long
#define pp                      pair<int,int>
#define mod                     1000000007


using namespace std;


/***** NODE ******/


struct node
{
    int a;
    int b;
    int c;
    int d;
};



/********  predefined sorting functions *************/


bool cmp(const node &first,const node &sec)
{
    if(first.a!=sec.a)
    return first.a<sec.a;                                            /// sort in ascending order
    return first.b<sec.b ;                                          /// if first same than in ascending order of second
}

bool operator <(const node &left,const node &right)              /// use of < operator sorts in ascending order
{
    return left.b>right.b;                                     /// sort w r t b
}




/*********  Main Code **********/



char s[110][110],str[110];

long long dp[110][110][10],infy=100000000000000000LL;

int n,m,i,j,k,x,y,z,x1,y2,dz;

node start,goal;

int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};



int check(int x,int y)
{

    if( (s[x][y]=='#')||(s[x][y]=='<')||(s[x][y]=='>')||(s[x][y]=='v')||(s[x][y]=='^'))
    return 1;

    return 0;

}


int call_up(int x,int y,int z)
{
    int i;
    for(i=x-1;i>=1;i--)
    {
        if(check(i,y))
        break;

        dp[i][y][z]=infy;
    }

    return 0;
}


int call_down(int x,int y,int z)
{
    int i;
    for(i=x+1;i<=n;i++)
    {
        if(check(i,y))
        break;

        dp[i][y][z]=infy;
    }

    return 0;
}

int call_right(int x,int y,int z)
{
    int i;
    for(i=y+1;i<=m;i++)
    {
        if(check(x,i))
        break;

        dp[x][i][z]=infy;
    }

    return 0;
}

int call_left(int x,int y,int z)
{
    int i;
    for(i=y-1;i>=1;i--)
    {
        if(check(x,i))
        break;

        dp[x][i][z]=infy;
    }

    return 0;
}



int main()
{


  int tc,tx=0;
  cin>>tc;

  while(tc--)
  {

   tx++;

  i(n);i(m);

  for(i=1;i<=n;i++)
  {
      cin>>str;

      for(j=1;j<=m;j++)
      s[i][j]=str[j-1];

  }

  /**   d p[i][j][k] = reaching position i , j in minimum steps x such that x%4 == k */



  /// initialization

  for(i=1;i<=n;i++)
  {
      for(j=1;j<=m;j++)
      {
          for(k=0;k<4;k++)
          dp[i][j][k]=-1;

      }
  }


  for(i=1;i<=n;i++)
  {
      for(j=1;j<=m;j++)
      {

          /// wall

          if(s[i][j]=='#')
          {
              for(k=0;k<4;k++)
              dp[i][j][k]=infy;
          }

          /// start

          if(s[i][j]=='S')
          {

              start.a=i;
              start.b=j;
          }

          /// destination

          if(s[i][j]=='G')
          {

              goal.a=i;
              goal.b=j;
          }

          /// laser

          if(s[i][j]=='^')
          {

              for(k=0;k<4;k++)
              dp[i][j][k]=infy;


              call_up(i,j,0);
              call_right(i,j,1);
              call_down(i,j,2);
              call_left(i,j,3);

          }

          if(s[i][j]=='>')
          {

              for(k=0;k<4;k++)
              dp[i][j][k]=infy;


              call_up(i,j,3);
              call_right(i,j,0);
              call_down(i,j,1);
              call_left(i,j,2);

          }

          if(s[i][j]=='v')
          {

              for(k=0;k<4;k++)
              dp[i][j][k]=infy;


              call_up(i,j,2);
              call_right(i,j,3);
              call_down(i,j,0);
              call_left(i,j,1);
          }

          if(s[i][j]=='<')
          {

              for(k=0;k<4;k++)
              dp[i][j][k]=infy;


              call_up(i,j,1);
              call_right(i,j,2);
              call_down(i,j,3);
              call_left(i,j,0);
          }

      }
  }

  queue<node> q;

  dp[start.a][start.b][0]=0;
  start.c=0;
  q.push(start);

  while(!q.empty())
  {
      node t,t1;

      t=q.front();
      q.pop();

      x=t.a;
      y=t.b;
      z=t.c;
      dz=(z+1)%4;


      for(i=0;i<4;i++)
      {
          x1=x+dx[i];
          y2=y+dy[i];

          if( (x1>n)||(x1<1)||(y2<1)||(y2>m))
          continue;

          if(dp[x1][y2][dz]!=-1)
          continue;

          dp[x1][y2][dz]=dp[t.a][t.b][z]+1;

          t1.a=x1;t1.b=y2;t1.c=dz;
          q.push(t1);
       }

  }

  long long ans=infy;
  for(i=0;i<4;i++)
  {
      if(dp[goal.a][goal.b][i]!=-1)
      ans=min(ans,dp[goal.a][goal.b][i]);
  }

  cout<<"Case #"<<tx<<": ";

  if(ans==infy)
  cout<<"impossible";
  else
  cout<<ans;

  cout<<"\n";

  }


  return 0;
}

#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>

using namespace std;

const int INF = 1e9;

char in[100][101];
char maze[102][102][4];

int dir[4][2] = {{+1, 0}, {-1, 0}, {0, +1}, {0, -1}};
int sr, sc, gr, gc;

struct Node {
    int r;
    int c;
    int t;
    int dis;
    Node(int rr, int cc, int tt, int dd): r(rr), c(cc), t(tt), dis(dd){}
};

bool vis[102][102][4];
int bfs(int sr, int sc) {
    queue<Node> q;
    q.push(Node(sr, sc, 0, 0));
    vis[sr][sc][0] = true;

    while (q.size()) {
        Node node = q.front(); q.pop();
        int r = node.r;
        int c = node.c;
        int t = node.t;
        int dis = node.dis;

        if (r == gr && c == gc) return dis;

        int nt = (t + 1) % 4;
        for (int i = 0; i < 4; i++) {
            int nr = r + dir[i][0];
            int nc = c + dir[i][1];
            if (maze[nr][nc][nt] == '.' && !vis[nr][nc][nt]) {
                q.push(Node(nr, nc, nt, dis + 1));
                vis[nr][nc][nt] = true;
            }
        }
    }
    return INF;
}

// 0: up, 1: right, 2: down, 3: left
void block(int r, int c, int k, int d) {
    if (d == 0) {
        while (maze[r - 1][c][k] == '.') {
            maze[--r][c][k] = '#';
        }
    }
    else if (d == 1) {
        while (maze[r][c + 1][k] == '.') {
            maze[r][++c][k] = '#';
        }
    }
    else if (d == 2) {
        while (maze[r + 1][c][k] == '.') {
            maze[++r][c][k] = '#';
        }
    }
    else {
        while (maze[r][c - 1][k] == '.') {
            maze[r][--c][k] = '#';
        }
    }
}

int main() {
    int T, n, m;
    scanf("%d", &T);

    for (int times = 0; times < T; times++) {
        scanf("%d%d", &n, &m);

        for (int i = 0; i < n; i++) {
            scanf("%s", in[i]);
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (in[i][j] == 'S') {
                    sr = i + 1;
                    sc = j + 1;
                }
                else if (in[i][j] == 'G') {
                    gr = i + 1;
                    gc = j + 1;
                } 
            }
        }

        memset(maze, '#', sizeof(maze));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (in[i][j] == '.' || in[i][j] == 'S' || in[i][j] == 'G') {
                    for (int k = 0; k < 4; k++) {
                        maze[i + 1][j + 1][k] = '.';
                    }
                }
                else {
                    for (int k = 0; k < 4; k++) {
                        maze[i + 1][j + 1][k] = '#';
                    }
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                for (int k = 0; k < 4; k++) {
                    if (in[i][j] == '^') block(i + 1, j + 1, k, k % 4);
                    else if (in[i][j] == '>') block(i + 1, j + 1, k, (k + 1) % 4);
                    else if (in[i][j] == 'v') block(i + 1, j + 1, k, (k + 2) % 4);
                    else if (in[i][j] == '<') block(i + 1, j + 1, k, (k + 3) % 4);
                }
            }
        }

        memset(vis, 0, sizeof(vis));
        int ret = bfs(sr, sc);

        if (ret < INF) printf("Case #%d: %d\n", times + 1, ret);
        else printf("Case #%d: impossible\n", times + 1);
    }
}

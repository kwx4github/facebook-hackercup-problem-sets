#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <map>
#include <queue> // push, front, pop
#include <sstream>
#include <string>
#include <stack> // push, top, pop
#include <set>
#include <vector>
#include <list> // list.insert(it, data); data inserted before it..
#include <iomanip>
#include <stdio.h>
#include <string.h> 

#define PI 3.14159265358979323846264338327950288
#define fill_(x,v) memset(x,v,sizeof(x))
#define min(x,y) (((x)>(y)) ? (y) :(x))
#define max(x,y) (((y)>(x)) ? (y) :(x))
#define Pi  3.1415926535
#define ll long long

using namespace std;

ifstream fin("c:\\tmp\\laser_maze.txt");
ofstream fout("c:\\tmp\\out.txt");

int Dm[] = {-1, 0, 1, 0};
int Dn[] = {0, 1, 0, -1};

int shortest[101][101][4];

void convto(const vector<string> maze, int t, vector<string>* nxt) {
     *nxt = maze;
     for (int m = 0; m < maze.size(); m++) 
     for (int n = 0; n < maze[0].length(); n++) {
         int pd;
         int c = maze[m][n];
         if (c == '^') {
             pd = 0;
         } else if (c == '>') {
             pd = 1;
         } else if (c == 'v') {
             pd = 2;
         } else if (c == '<') {
             pd = 3;
         } else {
             continue;
         }
         
         pd = (pd + t) % 4;
         int cm = m + Dm[pd]; int cn = n + Dn[pd];
         (*nxt)[m][n] = '#';
         while (cm >= 0 && cn >= 0 && cm < maze.size() && cn < maze[0].length()
                && (maze[cm][cn] == 'S' || maze[cm][cn] == '.' || maze[cm][cn] == 'G')) {
                (*nxt)[cm][cn] ='#';
                cm += Dm[pd];
                cn += Dn[pd];
         }
     }
}

int run() {
 fill_(shortest, -1);
 int M, N;
 fin >> M >> N;
 vector<string> maze;
 int sm, sn;
 for (int m = 0; m < M; m++) {
     string s;
     fin >> s;
     maze.push_back(s);
     for (int n = 0; n < s.length(); n++) {
         if (s[n] == 'S') {
             sm = m;
             sn = n;
         }
     }
 }
 vector<string> mazes[4];
 for (int t = 0; t < 4; t++) {
     convto(maze, t, &mazes[t]);
//     cout<<t<<endl;
//     for (int k = 0; k < M; k++) cout<<mazes[t][k]<<endl;
 }
 
 stack<int> sN, sM, sT,steps;
 sN.push(sn);
 sM.push(sm);
 sT.push(0);
 steps.push(0);
 shortest[sm][sn][0] = 0;
 int minSteps = -1;
 while (!sN.empty()) {
     int m = sM.top();
     int n = sN.top();
     int t = sT.top();
     int s = steps.top();
     sM.pop(); sN.pop(); sT.pop(); steps.pop();
     for (int d = 0; d < 4; d++) {
         int nm = m + Dm[d];
         int nn = n + Dn[d];
         int nt = (t + 1) % 4;
         if (nm < 0 || nm >= M) continue;
         if (nn < 0 || nn >= N) continue;
         if (mazes[nt][nm][nn] == '#') continue;
         if (shortest[nm][nn][nt] >= 0 &&
             shortest[nm][nn][nt] <= s + 1) continue;
         
         shortest[nm][nn][nt] = s + 1;
         if (mazes[nt][nm][nn] == 'G') {
           if (minSteps == -1 || minSteps > shortest[nm][nn][nt])
            minSteps = shortest[nm][nn][nt];
         }
         sN.push(nn); sM.push(nm); sT.push(nt); steps.push(s + 1);    
     }
 }
 return minSteps;
}

int main() {
	int N;
	fin >> N;
	//char inp[1000];
  //fin.getline(inp, 1000);
  
	for( int n = 1; n <= N; n++){
		//fout<<"Case #"<<n<<": ";
		
		int ret = run();
		//cout<<"Case #"<<n<<": "<<(ret? "YES" : "NO")<<endl;
		if (ret < 0)
		 fout<<"Case #"<<n<<": "<<"impossible"<<endl;
		else
		 fout<<"Case #"<<n<<": "<<ret<<endl;
		 
		//printf("Case #%d: %d\n", n, ret);
		//cout<<"Case #"<<n<<": "<endl;
		//fout << fixed;
		//fout<<"Case #"<<n<<": "<<setprecision(10)<<ret<<endl;
   }
   return 0;
}

#include <bits/stdc++.h>

using namespace std;

vector<string> maze;
bool visited[110][110][4];

bool check(int i,int j,int m,int n)
{
    if(i>=0 && i<m && j>=0 && j<n && (maze[i][j]=='.' || maze[i][j]=='S' || maze[i][j]=='G')) return true;
    return false;
}

int turret(int i,int j)
{
    if(maze[i][j]=='^') return 0;
    if(maze[i][j]=='>') return 1;
    if(maze[i][j]=='v') return 2;
    if(maze[i][j]=='<') return 3;
    return -1;
}
bool killed(int i,int j,int m,int n,int step)
{
    step=step%4;
    for(int k=i+1;k<m;++k)
    {
        if(maze[k][j]=='#') break;
        int t=turret(k,j);
        if(t==-1) continue;
        if((t+step)%4==0) return true;
        break;
    }
    for(int k=j-1;k>=0;--k)
    {
        if(maze[i][k]=='#') break;
        int t=turret(i,k);
        if(t==-1) continue;
        if((t+step)%4==1) return true;
        break;
    }
    for(int k=i-1;k>=0;--k)
    {
        if(maze[k][j]=='#') break;
        int t=turret(k,j);
        if(t==-1) continue;
        if((t+step)%4==2) return true;
        break;
    }
    for(int k=j+1;k<n;++k)
    {
        if(maze[i][k]=='#') break;
        int t=turret(i,k);
        if(t==-1) continue;
        if((t+step)%4==3) return true;
        break;
    }
    return false;
}
int main()
{
    int t,m,n;
    scanf("%d",&t);
    int x[]={-1,0,1,0};
    int y[]={0,1,0,-1};
    for(int z=1;z<=t;++z)
    {
        scanf("%d %d",&m,&n);
        string line;
        int starti,startj,goali,goalj;
        for(int i=0;i<m;++i)
        {
            cin>>line;
            maze.push_back(line);
            for(int j=0;j<n;++j)
            {
                if(line[j]=='S'){starti=i; startj=j;}
                if(line[j]=='G'){goali=i; goalj=j;}
            }
        }
        printf("Case #%d: ",z);
        bool flag=false;
        queue<pair<pair<int,int>,int> > q;
        q.push(make_pair(make_pair(starti,startj),0));
        visited[starti][startj][0]=1;
        while(!q.empty())
        {
            pair<pair<int,int>,int> tp=q.front();
            q.pop();
            pair<int,int> p=tp.first;
            int steps=tp.second;
            if(p.first==goali && p.second==goalj)
            {
                printf("%d\n",steps);
                flag=true;
                break;
            }
            steps++;
            for(int i=0;i<4;++i)
            {
                if(check(p.first+x[i],p.second+y[i],m,n) && !visited[p.first+x[i]][p.second+y[i]][steps%4])
                {
                    visited[p.first+x[i]][p.second+y[i]][steps%4]=1;
                    if(!killed(p.first+x[i],p.second+y[i],m,n,steps)){
                        q.push(make_pair(make_pair(p.first+x[i],p.second+y[i]),steps));
                    }
                }
            }
        }
        if(!flag) printf("impossible\n");
        memset(visited,0,sizeof(visited));
        maze.clear();
    }
    return 0;
}

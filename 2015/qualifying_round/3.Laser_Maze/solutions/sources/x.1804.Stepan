// Happy new year! ;)

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cassert>
#include <cctype>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <string>
#include <iomanip>
#include <numeric>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <tuple>
using namespace std;

#ifdef KVARK
	#include "debug.h"
#else
	#define dbg(...) (void(1))
	#define dbgp(...) (void(1))
	#define dbg_range(...) (void(1))
#endif
#define endl "\n"

const string lazer = "^>V<";
const int shift[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
int ok[110][110][4];
int dist[110][110][4];

const int INF = 1e9;

struct Q {
	int i;
	int j;
	int dist;
};

void task(){
	ios_base::sync_with_stdio(0);
	int tests;
	cin >> tests;
	for (int test = 1; test <= tests; ++test) {
		int n, m;
		string board[110];
		fill(ok[0][0], ok[0][0] + 110 * 110 * 4, 1);
		cin >> n >> m;
		for (int i = 0; i < n; ++i)
			cin >> board[i];

		int id = -1;
		for (int step = 0; step < 4; ++step) {
			for (int i = 0; i < n; ++i)
				for (int j = 0; j < m; ++j)
					if (( id = lazer.find(board[i][j])) != string::npos) {
						int ii = i;
						int jj = j;
						while (ii >= 0 && ii < n && jj >= 0 && jj < m && board[ii][jj] != '#') {
							ok[ii][jj][step] = 0;
							ii += shift[(id + step) % 4][0];
							jj += shift[(id + step) % 4][1];
						}
					}
		}

		pair<int, int> end_pos;
		pair<int, int> start_pos;
		for (int i = 0; i < n; ++i)
			for (int j = 0; j < m; ++j)
				if (board[i][j] == 'S')
					start_pos = {i, j};
				else if (board[i][j] == 'G')
					end_pos = {i, j};

		fill(dist[0][0], dist[0][0] + 110 * 110 * 4, INF);
		dist[start_pos.first][start_pos.second][0] = 0;

		queue<Q> q;
		q.push({start_pos.first, start_pos.second, 0});
		int ans = -1;

		while (!q.empty()) {
			Q p = q.front();
			q.pop();
			if (p.i == end_pos.first && p.j == end_pos.second) {
				ans = p.dist;
				break;
			}
			if (dist[p.i][p.j][p.dist % 4] != p.dist)
				continue;
			for (int k = 0; k < 4; ++k) {
				int ii = p.i + shift[k][0];
				int jj = p.j + shift[k][1];
				if (ii >= 0 && ii < n && jj >= 0 && jj < m
					&& board[ii][jj] != '#'
					&& ok[ii][jj][(p.dist + 1) % 4]
					&& dist[ii][jj][(p.dist + 1) % 4] > p.dist + 1) {
					dist[ii][jj][(p.dist + 1) % 4] = p.dist + 1;
					q.push({ii, jj, p.dist + 1});
				}
			}
		}

		cout << "Case #" << test << ": ";
		if (ans == -1)
			cout << "impossible";
		else
			cout << ans;
		cout << (test < tests ? "\n" : "");
	}
}

int main() {
#ifdef KVARK
	freopen("laser_maze.txt", "r", stdin);
	//freopen("debug.txt", "w", stderr);
	freopen("laser_maze_output.txt", "w", stdout);
#else
	freopen("laser_maze.txt", "r", stdin);
	//freopen("debug.txt", "w", stderr);
	freopen("laser_maze_output.txt", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif

	task();

#ifdef KVARK
	//my_debug::printProcessInfo();
#endif
	return 0;
}

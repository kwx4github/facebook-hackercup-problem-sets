#include <iostream>
#include <cstring>
#include <map>
#include <queue>
using namespace std;

char maze[110][110];
bool vis[110][110][4];
bool nowalk[110][110][4];

int dir[4][2] = {
	1, 0,
	0, -1,
	-1, 0,
	0, 1
};

map<char, int> mapping;

class Stat {
public:
	int step, x, y;
};

int M, N;

int bfs(int startx, int starty, int endx, int endy) {
	queue<Stat> q;
	Stat temp, temp2;
	temp.x = startx;
	temp.y = starty;
	temp.step = 0;
	memset(vis, 0, sizeof(vis));
	vis[temp.x][temp.y][0] = true;
	q.push(temp);
	while (!q.empty()) {
		temp = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			temp2 = temp;
			temp2.x += dir[i][0];
			temp2.y += dir[i][1];
			temp2.step++;
			if (temp2.x < 0 || temp2.x >= M || temp2.y < 0 || temp2.y >= N) continue;
			if (vis[temp2.x][temp2.y][temp2.step % 4]) continue;
			if (nowalk[temp2.x][temp2.y][temp2.step % 4]) continue;
			if (temp2.x == endx && temp2.y == endy) {
				return temp2.step;
			}
			q.push(temp2);
			vis[temp2.x][temp2.y][temp2.step % 4] = true;
		}
	}
	return -1;
}

int main() {
	int T;
	mapping['v'] = 0;
	mapping['<'] = 1;
	mapping['^'] = 2;
	mapping['>'] = 3;
	cin.sync_with_stdio(false);
	cin >> T;
	for (int cas = 1; cas <= T; cas++) {
		memset(nowalk, 0, sizeof(nowalk));
		cin >> M >> N;
		for (int i = 0; i < M; i++) {
			cin >> maze[i];
		}
		int startx, starty, endx, endy;
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (maze[i][j] == 'S') {
					startx = i;
					starty = j;
					continue;
				}
				if (maze[i][j] == 'G') {
					endx = i;
					endy = j;
					continue;
				}
				if (maze[i][j] == '.') continue;
				if (maze[i][j] == '#') {
					for (int k = 0; k < 4; k++) {
						nowalk[i][j][k] = true;
					}
					continue;
				}
				int dd = mapping[maze[i][j]];
				for (int d = 0; d < 4; d++) {
					int actualdir = (dd + d) % 4;
					nowalk[i][j][d] = true;
					int& dx = dir[actualdir][0];
					int& dy = dir[actualdir][1];
					int currentx = i + dx;
					int currenty = j + dy;
					while (currentx >= 0 && currentx < M && currenty < N && currenty >= 0
						&& (maze[currentx][currenty] == '.' || maze[currentx][currenty] == 'S' || maze[currentx][currenty] == 'G')) {
						nowalk[currentx][currenty][d] = true;
						currentx += dx;
						currenty += dy;
					}
				}
			}
		}
		cout << "Case #" << cas << ": ";
		int result = bfs(startx, starty, endx, endy);
		if (result == -1) {
			cout << "impossible" << endl;
		}
		else {
			cout << result << endl;
		}
	}
//	system("pause");
	return 0;
}
#include <bits/stdc++.h>

#define maxn 1010
#define inf 0x3F3F3F3F
#define eps 1e-9
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vii;
typedef priority_queue<pii, vii, greater<pii> > pq;

int t, n, m;
char v[110][110];
int vis[110][110][4];
int block[110][110][4];
int xx, yy;

int dx[] = {1, 0, -1, 0};
int dy[] = {0, -1, 0, 1};

void bl(int x, int y, int a, int b, int c)
{
	while(1)
	{
		if(x < 0 || y < 0 || x >= n || y >= m || (v[x][y] != '.' && v[x][y] != 'G' && v[x][y] != 'S')) break;
		block[x][y][c] = 1;
		x += a;
		y += b;
	}
}

struct no
{
	int x, y, t;
	no(){}
	no(int _x, int _y, int _t)
	{
		x = _x;
		y = _y;
		t = _t;
	}
};

void bfs(int x, int y)
{
	int t, ax, ay, tempo;
	queue<no> q;
	vis[x][y][0] = 0;
	q.push(no(x, y, 0));
	while(!q.empty())
	{
		x = q.front().x;
		y = q.front().y;
		t = q.front().t;
		tempo = (t+1)%4;
		q.pop();
		//printf("%d %d %d\n", x, y, t);

		for(int i = 0; i < 4; ++i)
		{
			ax = x+dx[i];
			ay = y+dy[i];
			//printf("%d %d\n", ax, ay);
			if(ax >= 0 && ax < n && ay >= 0 && ay < m && !block[ax][ay][tempo] && vis[ax][ay][tempo] == -1)
			{
				vis[ax][ay][tempo] = t+1;

				if(!(ax == xx && ay == yy))
				{
					q.push(no(ax, ay, t+1));
				}
			}
		}
	}
}

int main()
{
	int x, y, a, b, teste = 1;
	char c;
	scanf("%d", &t);

	while(t--)
	{
		scanf("%d %d", &n, &m);

		for(int i = 0; i < n; ++i)
		{
			scanf(" %s", v[i]);
		}
		
		memset(block, 0, sizeof block);
		memset(vis, -1, sizeof vis);
		for(int i = 0; i < n; ++i)
		{
			for(int j = 0; j < m; ++j)
			{
				c = v[i][j];

				if(c != 'S' && c != 'G' && c != '.')
				{
					for(int k = 0; k < 4; ++k)
					{
						block[i][j][k] = 1;
					}
				}

				if(c == 'S')
				{
					x = i;
					y = j;
				}
				else if(c == 'G')
				{
					xx = i;
					yy = j;
				}
				else if(c == '<')
				{
					bl(i, j-1, 0, -1, 0);
					bl(i-1, j, -1, 0, 1);
					bl(i, j+1, 0, 1, 2);
					bl(i+1, j, 1, 0, 3);
				}
				else if(c == '^')
				{
					bl(i-1, j, -1, 0, 0);
					bl(i, j+1, 0, 1, 1);
					bl(i+1, j, 1, 0, 2);
					bl(i, j-1, 0, -1, 3);
				}
				else if(c == '>')
				{					
					bl(i, j+1, 0, 1, 0);
					bl(i+1, j, 1, 0, 1);
					bl(i, j-1, 0, -1, 2);
					bl(i-1, j, -1, 0, 3);
				}
				else if(c == 'v')
				{
					bl(i+1, j, 1, 0, 0);
					bl(i, j-1, 0, -1, 1);
					bl(i-1, j, -1, 0, 2);
					bl(i, j+1, 0, 1, 3);
				}
			}
		}

		bfs(x, y);

		// for(int k = 0; k < 4; ++k)
		// {
		// 	for(int i = 0; i < n; ++i)
		// 	{
		// 		for(int j = 0; j < m; ++j)
		// 		{
		// 			printf("%d ", block[i][j][k]);
		// 		}
		// 		printf("\n");
		// 	}
		// 	printf("\n\n");
		// }

		printf("Case #%d: ", teste++);
		int ans = inf;
		for(int i = 0; i < 4; ++i)
		{
			if(vis[xx][yy][i] != -1)
				ans = min(ans, vis[xx][yy][i]);
		}
		if(ans == inf)
		{
			printf("impossible\n");
		}
		else
		{
			printf("%d\n", ans);
		}
	}

	return 0;
}
import java.io.*;
import java.util.*;
import java.math.*;


public class Main {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	
	static char[][] a;
	static int n, m;
	
	static void solve() throws Exception {
		int t = nextInt();
		for (int tt = 1; tt <= t; ++tt) {
			n = nextInt();
			m = nextInt();
			a = new char[n][m];
			int x = 0;
			int y = 0;
			for (int i = 0; i < n; ++i) {
				a[i] = next().toCharArray();
				for (int j = 0; j < m; ++j) {
					if (a[i][j] == 'S') {
						x = i;
						y = j;
					}
				}
			}
			int res = bfs(x, y);
			out.println("Case #" + tt + ": " + (res == 0 ? "impossible" : res));
		}
	}
	
	static int[] xMove = {-1, 1, 0, 0};
	static int[] yMove = { 0, 0,-1, 1};
	
	static int bfs(int x, int y) {
		if (!f(x, y, 0)) {
			return 0;
		}
		int[][][] cnt = new int[n][m][4];
		boolean[][][] used = new boolean[n][m][4];
		used[x][y][0] = true;
		Queue<T> q = new LinkedList<T>();
		q.add(new T(x, y, 0));
		while (!q.isEmpty()) {
			x = q.peek().x;
			y = q.peek().y;
			int d = q.poll().d;
			for (int k = 0; k < 4; ++k) {
				int newX = x + xMove[k];
				int newY = y + yMove[k];
				int newD = (d + 1) % 4;
				if (in(newX, newY) && !used[newX][newY][newD] && f(newX, newY, newD)) {
					used[newX][newY][newD] = true;
					cnt[newX][newY][newD] = cnt[x][y][d] + 1;
					if (a[newX][newY] == 'G') {
						return cnt[newX][newY][newD];
					}
					q.add(new T(newX, newY, newD));
				}
			}
		}
		return 0;
	}
	
	static boolean in(int x, int y) {
		if (x < 0 || x >= n || y < 0 || y >= m) {
			return false;
		}
		return true;
	}
	
	static boolean f(int x, int y, int d) {
		for (int i = x - 1; i >= 0; --i) {
			if (a[i][y] != '.' && a[i][y] != 'S' && a[i][y] != 'G') {
				if (d == 0 && a[i][y] == 'v') return false;
				if (d == 1 && a[i][y] == '>') return false;
				if (d == 2 && a[i][y] == '^') return false;
				if (d == 3 && a[i][y] == '<') return false;
				break;
			}
		}
		for (int i = x + 1; i < n; ++i) {
			if (a[i][y] != '.' && a[i][y] != 'S' && a[i][y] != 'G') {
				if (d == 0 && a[i][y] == '^') return false;
				if (d == 1 && a[i][y] == '<') return false;
				if (d == 2 && a[i][y] == 'v') return false;
				if (d == 3 && a[i][y] == '>') return false;
				break;
			}
		}
		for (int j = y - 1; j >= 0; --j) {
			if (a[x][j] != '.' && a[x][j] != 'S' && a[x][j] != 'G') {
				if (d == 0 && a[x][j] == '>') return false;
				if (d == 1 && a[x][j] == '^') return false;
				if (d == 2 && a[x][j] == '<') return false;
				if (d == 3 && a[x][j] == 'v') return false;
				break;
			}
		}
		for (int j = y + 1; j < m; ++j) {
			if (a[x][j] != '.' && a[x][j] != 'S' && a[x][j] != 'G') {
				if (d == 0 && a[x][j] == '<') return false;
				if (d == 1 && a[x][j] == 'v') return false;
				if (d == 2 && a[x][j] == '>') return false;
				if (d == 3 && a[x][j] == '^') return false;
				break;
			}
		}
		return true;
	}
	
	static class T {
		int x, y, d;
		
		T(int x, int y, int d) {
			this.x = x;
			this.y = y;
			this.d = d;
		}
	}
	
	static long sqr(int x) {
		return (long)x * x;
	}
	
	static int gcd(int a, int b) {
		if (b == 0) {
			return a;
		}
		return gcd(b, a % b);
	}
	
	static long lcm(int a, int b) {
		return (long)a / gcd(a, b) * b;
	}
	
	static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	static long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	static double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	static BigInteger nextBigInteger() throws IOException {
		return new BigInteger(next());
	}
	
	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}
	
	static String nextLine() throws IOException {
		tok = new StringTokenizer("");
		return in.readLine();
	}

	static boolean hasNext() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			String s = in.readLine();
			if (s == null) {
				return false;
			}
			tok = new StringTokenizer(s);
		}
		return true;
	}

	public static void main(String args[]) {
		try {
			//in = new BufferedReader(new InputStreamReader(System.in));
			//out = new PrintWriter(new OutputStreamWriter(System.out));
			in = new BufferedReader(new FileReader("input.in"));
			out = new PrintWriter(new FileWriter("output.out"));
			solve();
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			java.lang.System.exit(1);
		}
	}
}
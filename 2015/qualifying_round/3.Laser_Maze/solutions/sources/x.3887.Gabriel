#include <iostream>
using namespace std;

typedef struct Block{
    bool wall;
    bool gol;
    bool free_block[4];
    bool visited[4];
    void clear(){
        wall = false;
        gol = false;
        free_block[0] = true;
        free_block[1] = true;
        free_block[2] = true;
        free_block[3] = true;
        visited[0] = false;
        visited[1] = false;
        visited[2] = false;
        visited[3] = false;
        }
}Block;

int find_path_rec(Block maze[102][102], int start_lin, int start_col,int time_){
    int dis_r,dis_d,dis_l,dis_u,dis_min;

    if( maze[start_lin][start_col].wall || !maze[start_lin][start_col].free_block[time_] || maze[start_lin][start_col].visited[time_] )
        return -1;
    if( maze[start_lin][start_col].gol )
        return 0;
    maze[start_lin][start_col].visited[time_] = true;
    time_++;
    if(time_ == 4) time_ = 0;
    dis_r = find_path_rec(maze,start_lin,start_col + 1,time_);
    dis_d = find_path_rec(maze,start_lin + 1,start_col,time_);
    dis_l = find_path_rec(maze,start_lin,start_col - 1,time_);
    dis_u = find_path_rec(maze,start_lin - 1,start_col,time_);
    dis_min = dis_r;
    if(dis_min < 0 || (dis_d >= 0 && dis_d < dis_min) )
        dis_min = dis_d;
    if(dis_min < 0 || (dis_l >= 0 && dis_l < dis_min) )
        dis_min = dis_l;
    if(dis_min < 0 || (dis_u >= 0 && dis_u < dis_min) )
        dis_min = dis_u;
    if(dis_min >= 0) return dis_min + 1;
    return -1;
}

int find_path(Block maze[102][102], int start_lin, int start_col,int time_){
    int dis_r,dis_d,dis_l,dis_u,dis_min;

    maze[start_lin][start_col].visited[time_] = true;
    time_++;
    if(time_ == 4) time_ = 0;
    dis_r = find_path_rec(maze,start_lin,start_col + 1,time_);
    dis_d = find_path_rec(maze,start_lin + 1,start_col,time_);
    dis_l = find_path_rec(maze,start_lin,start_col - 1,time_);
    dis_u = find_path_rec(maze,start_lin - 1,start_col,time_);
    dis_min = dis_r;
    if(dis_min < 0 || (dis_d >= 0 && dis_d < dis_min) )
        dis_min = dis_d;
    if(dis_min < 0 || (dis_l >= 0 && dis_l < dis_min) )
        dis_min = dis_l;
    if(dis_min < 0 || (dis_u >= 0 && dis_u < dis_min) )
        dis_min = dis_u;
    if(dis_min >= 0) return dis_min + 1;
    return -1;
}

int main(){
    int num_cases,col,lin;
    int start_lin,start_col;
    int aux,dist;
    Block maze[102][102];
    char cmaze[102][102];

    cin >> num_cases;
    for(int h = 1; h <= num_cases; h++){
        cin >> lin >> col;
        for(int i = 0; i <= lin+1; i++)
            for(int j = 0; j <= col+1; j++)
                maze[i][j].clear();
        for(int i = 1; i <= lin; i++){
            cmaze[i][0] = '#';
            cmaze[i][col+1] = '#';
            for(int j = 1; j <= col; j++){
                cmaze[0][j] = '#';
                cmaze[lin+1][j] = '#';
                cin >> cmaze[i][j];
            }
        }
        for(int i = 0; i <= lin+1; i++){
            for(int j = 0; j <= col+1; j++){
                switch(cmaze[i][j]){
                    case '#':
                    case '>':
                    case '^':
                    case 'v':
                    case '<':
                        maze[i][j].wall = true;
                        break;
                    case 'S':
                        start_lin = i;
                        start_col = j;
                        break;
                    case 'G':
                        maze[i][j].gol = true;
                        break;
                }
            }
        }
        for(int i = 0; i <= lin+1; i++){
            for(int j = 0; j <= col+1; j++){
                switch(cmaze[i][j]){
                    case '>':
                        aux = 0;
                        break;
                    case '^':
                        aux = 1;
                        break;
                    case '<':
                        aux = 2;
                        break;
                    case 'v':
                        aux = 3;
                        break;
                    default:
                        aux = -1;
                }
                if(aux >= 0){
                    for(int k = j+1; !maze[i][k].wall; k++)
                        maze[i][k].free_block[aux] = false;
                    aux++;
                    if(aux == 4) aux = 0;
                    for(int k = i+1; !maze[k][j].wall; k++)
                        maze[k][j].free_block[aux] = false;
                    aux++;
                    if(aux == 4) aux = 0;
                    for(int k = j-1; !maze[i][k].wall; k--)
                        maze[i][k].free_block[aux] = false;
                    aux++;
                    if(aux == 4) aux = 0;
                    for(int k = i-1; !maze[k][j].wall; k--)
                        maze[k][j].free_block[aux] = false;
                }
            }
        }
        dist = find_path(maze,start_lin,start_col,0);
        if(dist < 0)
            cout << "Case #" << h << ": impossible" << endl;
        else
            cout << "Case #" << h << ": " << dist << endl;
    }
    return 0;
}

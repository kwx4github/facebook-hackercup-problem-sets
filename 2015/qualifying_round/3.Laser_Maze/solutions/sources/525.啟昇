#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;

#define ll long long

int wx[4]={-1,0,1,0},wy[4]={0,1,0,-1};

void lazer(char mp[][120],int w,int x,int y,int n,int m){
	int nx=x+wx[w],ny=y+wy[w];
	if(nx>=n || nx<0 || ny>=m || ny<0)
		return;
	if(mp[nx][ny]!='#' && mp[nx][ny]>=4){
		mp[nx][ny]='x';
		lazer(mp,w,nx,ny,n,m);
	}
}

void buildmp(char mp[][120][120],char mpp[][120],int n,int m){
	for(int k=0;k<4;k++){
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				mp[k][i][j]=mpp[i][j];
				if(mpp[i][j]<4)
					mpp[i][j]=(mpp[i][j]+1)%4;
			}
		}
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++)
				if(mp[k][i][j]<4){
					int w=mp[k][i][j];
					mp[k][i][j]='#';
					lazer(mp[k],w,i,j,n,m);
				}
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++)
				if(mp[k][i][j]=='x')
					mp[k][i][j]='#';
		/*
		puts("*-*-*-*-*-*");
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++)
				putchar(mp[k][i][j]);
			puts("");
		}
		*/
	}
}

inline ll tp(ll x,ll y,ll z){return x*1000000+y*1000+z;}
inline ll tpa(ll x){return x/1000000;}
inline ll tpb(ll x){return x/1000%1000;}
inline ll tpc(ll x){return x%1000;}

ll gogo(char mp[][120][120],ll bg,int n,int m){
	bool hs[4][120][120]={};
	queue<ll> q;
	q.push(bg);
	while(!q.empty()){
		ll x=q.front();
		ll xa=tpa(x),xb=tpb(x),xc=tpc(x);
		q.pop();
		if(hs[xa%4][xb][xc] || (x!=bg && mp[xa%4][xb][xc]=='#'))
			continue;
		if(mp[xa%4][xb][xc]=='G')
			return xa;
		hs[xa%4][xb][xc]=true;
		for(int i=0;i<4;i++){
			int nx=xb+wx[i],ny=xc+wy[i];
			if(nx>=0 && nx<n && ny>=0 && ny<m)
				q.push(tp(xa+1,nx,ny));
		}
	}
	return -1;
}


int main(){
	int t,tk=1;
	char mp[4][120][120],mpp[120][120];
	scanf("%d",&t);
	while(t--){
		int n,m;
		scanf("%d%d",&n,&m);
		ll bg;
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++){
				cin>>mpp[i][j];
				if(mpp[i][j]=='S')
					bg=tp(0,i,j);
				if(mpp[i][j]=='^')
					mpp[i][j]=0;
				else if(mpp[i][j]=='>')
					mpp[i][j]=1;
				else if(mpp[i][j]=='v')
					mpp[i][j]=2;
				else if(mpp[i][j]=='<')
					mpp[i][j]=3;
			}
		buildmp(mp,mpp,n,m);
		ll ans=gogo(mp,bg,n,m);
		if(ans==-1)
			printf("Case #%d: impossible\n",tk++);
		else
			printf("Case #%d: %lld\n",tk++,ans);
	}
}

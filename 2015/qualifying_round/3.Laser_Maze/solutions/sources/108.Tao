#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <iostream>
#include <vector>
#include <map>
#include <queue>

using namespace std;

const int nmax = 105;

int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

int n, m;

bool islegal(int x, int y){
    if(x<0 || x>=n || y<0 || y >=m)
        return false;
    return true;
}

char g[nmax][nmax];

bool isblock(int x, int y){
    if(g[x][y] == '#') return true;
    if(g[x][y] == '<') return true;
    if(g[x][y] == '^') return true;
    if(g[x][y] == '>') return true;
    if(g[x][y] == 'v') return true;
    return false;
}

bool die[4][nmax][nmax];

int reach[4][nmax][nmax];

int sx, sy;
int tx, ty;

struct st
{
    int x, y, tim;
};

int main(){
    int T;
    cin >> T;
    for(int ca = 1; ca <= T; ca++){
        cin >> n >> m;
        for(int i = 0; i < n; i++)
            cin >> g[i];
        memset(die, false, sizeof(die));
        memset(reach, -1, sizeof(reach));
        for(int i = 0; i < n; i++)
            for(int j=0; j<m; j++){
                if(g[i][j] == 'S') sx = i, sy = j;
                if(g[i][j] == 'G') tx = i, ty = j;
                int s = -1;
                if(g[i][j] == '^') s = 0;
                if(g[i][j] == '>') s = 1;
                if(g[i][j] == 'v') s = 2;
                if(g[i][j] == '<') s = 3;
                if(s == -1) continue;
                for(int tim = 0; tim < 4; tim++){
                    int dir = (s + tim) % 4;
                    for(int d = 1; ; d++){
                        int x = i + dx[dir] * d;
                        int y = j + dy[dir] * d;
                        if(!islegal(x,y) || isblock(x,y))
                            break;
                        die[tim][x][y] = 1;
                        // cout << tim << " " << x << " " << y << endl;
                    }
                }
            }
        reach[0][sx][sy] = 0;
        queue<st>q;
        st start;
        start.x = sx;
        start.y = sy;
        start.tim = 0;
        q.push(start);
        while(!q.empty()){
            st cur = q.front();
            q.pop();
            for(int dir = 0; dir < 4; dir++){
                int x = cur.x + dx[dir];
                int y = cur.y + dy[dir];
                if(!islegal(x,y) || isblock(x,y) || die[(cur.tim + 1) % 4][x][y])
                    continue;
                st next;
                next.x = x;
                next.y = y;
                next.tim = cur.tim + 1;
                // cout << next.tim << " " << x << " " << y << endl;
                if(reach[next.tim % 4][x][y] == -1 || reach[next.tim % 4][x][y] > next.tim){
                    reach[next.tim % 4][x][y] = next.tim;
                    q.push(next);
                }
            }
        }
        int ans = -1;
        for(int i=0;i<4;i++){
            if(reach[i][tx][ty] != -1){
                if(ans == -1 || reach[i][tx][ty] < ans)
                    ans = reach[i][tx][ty];
            }
        }
        if(ans != -1)
            printf("Case #%d: %d\n", ca, ans);
        else
            printf("Case #%d: impossible\n", ca);
    }
    return 0;
}


#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j1234 = n; (i) < j1234; (i) ++)
#define rep1(i, n) for (int (i) = 1, j1234 = n; (i) <= j1234; (i) ++)
#define For(i, a, b) for (int (i) = (a), ub1234=b; (i) <= ub1234; (i) ++)
#define db(x) {if(debug){cout << #x << " = " << (x) << endl;}}
#define dba(a, x, y) {if(debug){cout << #a << " :";For(i, (x), (y))cout<<" "<<(a)[(i)];cout<<endl;}}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define endl '\n'
#define ll long long
#define ld long double
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const int output_precision = 15;
const ld pi = acos(-1);
const bool debug = true;
// const ll MOD = ;
//const int mxNodeNumber = 5*(101*101+101)+4;

//vector<int> nodes;
//vector<int> adj[mxNodeNumber];
int nodenumber(int r, int c, int time)
{
  time %= 4;
  return 5*(101*r+c)+time;
}
int findnode(int n, int&r, int&c, int&time)
{
  time = n%5;
  n /= 5;
  c = n%101;
  n /= 101;
  r = n;
  return 0;
}
int dr[4] = {-1, 0, 1, 0};
int dc[4] = {0, 1, 0, -1};
int shot[7][110][110];
int dist[7][110][110];
int seen[7][110][110];
string table[110];
int N, M;
inline int laser(char ch)
{
  if (ch == '^') return 0;
  if (ch == '>') return 1;
  if (ch == 'v') return 2;
  if (ch == '<') return 3;
  return -1;
}
inline int okay(int r, int c)
{
  return 1 <= r && r <= N && 1 <= c && c <= M;
}
inline int can(int r, int c)
{
//  if (!okay(r,c)) return 0;
  char ch = table[r][c];
//  db(r);
//  db(c);
//  db(ch);
  return ch == '.' || ch == 'S' || ch == 'G'; 
}
//struct Location 
//{
//  int r; 
//  int c;
//  int time;
//};
int solve()
{
  cin >> N >> M;
  rep1(i,N) cin >> table[i], table[i] = " " + table[i];
//  rep1(i,N) db(table[i]);
  int rootr, rootc, goalr, goalc;
  rep(time,4)
  {
    rep1(r,N)
    {
      rep1(c,M)
      {
        if (table[r][c] == 'S')
          rootr = r, rootc = c;
        if (table[r][c] == 'G')
          goalr = r, goalc = c;
        int l = laser(table[r][c]);
        if (l == -1) continue;
        l = (l + time) % 4;
        int rr = r + dr[l];
        int cc = c + dc[l];
//        db(okay(rr,cc));
//        db(can(rr,cc));
        while (okay(rr,cc) && can(rr,cc))
        {
          shot[time][rr][cc] = 1;
          rr += dr[l];
          cc += dc[l];
        }
      }
    }
  }
//  rep(time,4)
//  {
//    rep1(r,N)
//    rep1(c,M)
//    {
//      cout << shot[time][r][c] << (c==M ? '\n' : ' ');
//    }
//  }
//  cout << "(" << rootr << "," << rootc << ")" << endl;
//  cout << "(" << goalr << "," << goalc << ")" << endl;
  rep(i,4) rep1(r,N) rep1(c,M) dist[i][r][c] = INF;
  priority_queue< pair<int,int> > pq;
//  Location loc;
//  loc.r = rootr;
//  loc.c = rootc;
//  loc.time = 0;
  pq.push(mp(-0,nodenumber(rootr,rootc,0)));
  dist[0][rootr][rootc]=0;
  while (!pq.empty())
  {
    int location = pq.top().second;
//    db(location);
    pq.pop();
    int r, c, time;
    findnode(location,r,c,time);
//    db(r); db(c); db(time);
//    cout << "(" << r << "," << c << ")" << endl;
    if (seen[time][r][c]) continue;
    seen[time][r][c] = 1;
    rep(i,4)
    {
      int rr = r+dr[i];
      int cc = c+dc[i];
      int tt = (time+1)%4;
//      db(rr); db(cc); db(tt);
      if (!can(rr,cc)) continue;
      if (shot[tt][rr][cc]) continue;
      int alt = dist[time][r][c] + 1;
//      db(dist[tt][rr][cc]);
      if (dist[tt][rr][cc] > alt)
      {
        int v = nodenumber(rr,cc,tt);
//        db(v);
//        db(v);
//        v.r = rr;
//        v.c = cc;
//        v.time = tt;
        dist[tt][rr][cc] = alt;
        pq.push(mp(-alt,v));
      }
    }
  }
  int mn = INF;
  rep(time,4) mn = min(mn,dist[time][goalr][goalc]);
  if (mn == INF)
    cout << "impossible" << endl;
  else
    cout << mn << endl;
}

int T;
int init()
{
//  nodes.clear();
//  rep(i,mxNodeNumber) adj[i].clear();
  clr(shot);
  clr(dist);
  clr(seen);
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(output_precision); cout << fixed;
  cout.tie(0);
  cin >> T;
  rep1(test,T)
  {
    init();
    cout << "Case #" << test << ": ";
    solve();
  }
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <assert.h>

#define in freopen("laser_maze.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 1e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
int col[4] = {1, 0, -1, 0};
int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void show(T a){cout << a << endl;}
template <class T> void show(T a, T b){cout << a << ' ' << b << endl;}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 110
/***********************************THE GRASS IS ALWAYS GREENER ON THE OTHER SIDE***********************************/

char maze[4][MAX][MAX];
int dist[4][MAX][MAX], n, m;

bool ok(int r, int c, int t)
{
    int i;
    for(i = r; i >= 0; i--)
    {
        if(maze[t][i][c] == 'v')
            return false;
        if(maze[t][i][c] == '#')
            break;
    }
    for(i = r; i < n; i++)
    {
        if(maze[t][i][c] == '^')
            return false;
        if(maze[t][i][c] == '#')
            break;
    }
    for(i = c; i < m; i++)
    {
        if(maze[t][r][i] == '<')
            return false;
        if(maze[t][r][i] == '#')
            break;
    }
    for(i = c; i >= 0; i--)
    {
        if(maze[t][r][i] == '>')
            return false;
        if(maze[t][r][i] == '#')
            break;
    }
    return true;
}

void bfs(int r, int c, int t)
{
    queue <int> Q;
    Q.push(r);
    Q.push(c);
    Q.push(t);
    dist[t][r][c] = 1;
    int i, nr, nc, d;
    while(!Q.empty())
    {
        r = Q.front();
        Q.pop();
        c = Q.front();
        Q.pop();
        t = Q.front();
        Q.pop();
        d = dist[t][r][c];
        t++;
        t %= 4;
        for(i = 0; i < 4; i++)
        {
            nr = r + row[i];
            nc = c + col[i];
            if(nr >= n || nr < 0 || nc >= m || nc < 0 ||
                maze[t][nr][nc] != '.' || dist[t][nr][nc] || !ok(nr, nc, t)) continue;
            dist[t][nr][nc] = d + 1;
            Q.push(nr);
            Q.push(nc);
            Q.push(t);
        }
    }
}

int main()
{
    #ifdef Evan
        in;
        out;
    #endif
    CF
    int test, kase = 1, i, j, si, sj, gi, gj;
    cin >> test;
    while(test--)
    {
        cin >> n >> m;
        for(i = 0; i < n; i++)
            cin >> maze[0][i];
        for(int k = 1; k < 4; k++)
        {
            for(i = 0; i < n; i++)
            {
                for(j = 0; j < m; j++)
                {
                    if(maze[k-1][i][j] == '^')
                        maze[k][i][j] = '>';
                    else if(maze[k-1][i][j] == '>')
                        maze[k][i][j] = 'v';
                    else if(maze[k-1][i][j] == 'v')
                        maze[k][i][j] = '<';
                    else if(maze[k-1][i][j] == '<')
                        maze[k][i][j] = '^';
                    else
                        maze[k][i][j] = maze[k-1][i][j];
                    if(maze[k][i][j] == 'S')
                        si = i, sj = j;
                    if(maze[k][i][j] == 'G')
                        gi = i, gj = j;
                }
            }
        }
        for(i = 0; i < 4; i++)
            maze[i][si][sj] = maze[i][gi][gj] = '.';
        clr(dist, 0);
        bfs(si, sj, 0);
        int res = infinity;
        for(i = 0; i < 4; i++)
        {
            if(dist[i][gi][gj])
                res = min(dist[i][gi][gj], res);
        }
        if(res == infinity)
            cout << "Case #" << kase++ << ": " << "impossible" << "\n";
        else
            cout << "Case #" << kase++ << ": " << res - 1<< "\n";
    }
    return 0;
}


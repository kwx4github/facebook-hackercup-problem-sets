#include <cstdio>
#include <iostream>
#include <string>
#include <queue>

using namespace std;

#define FOR(i,n) for(int i = 0; i < (n); ++i)

const int dr[] = {-1, 0, 1, 0}, dc[] = {0, 1, 0, -1};
const string dirs = "^>v<";
const int INF = 1000000000;

struct Point {
	int d, r, c;
	Point(int d=0, int r=0, int c=0):
		d(d), r(r), c(c) {}
};


int tc, m, n;
int r1, c1, r2, c2;
char a[4][102][102];
int ans[4][102][102];

int fun() {
	// copy and modify
	for (int d = 1; d < 4; ++d) {
		for (int i = 0; i < m+2; ++i) {
			for (int j = 0; j < n+2; ++j) {
				a[d][i][j] = a[d-1][i][j];
				if (dirs.find(a[d][i][j]) != string::npos) {
					int ps = (dirs.find(a[d][i][j]) + 1) % 4;
					a[d][i][j] = dirs[ps];
				}
			}
		}
	}
	// fill forbidden places
	for (int d = 0; d < 4; ++d) {
		for (int i = 0; i < m+2; ++i) {
			for (int j = 0; j < n+2; ++j) {
				int dir = dirs.find(a[d][i][j]);
				if (dir != string::npos) {
					int tr = i;
					int tc = j;
					while (true) {
						tr += dr[dir];
						tc += dc[dir];
						if (a[d][tr][tc] != '.') break;
						a[d][tr][tc] = '*';
					}
				}
			}
		}
		/*
		cout << "----------" << endl;
		for (int i = 1; i <= m; ++i) {
			for (int j = 1; j <= n; ++j) cout << a[d][i][j];
			cout << endl;
		}
		*/
	}

	queue<Point> q;
	FOR(d,4) FOR(i,m+2) FOR(j,n+2) ans[d][i][j] = INF;
	ans[0][r1][c1] = 0;
	q.push(Point(0, r1, c1));

	while (!q.empty()) {
		Point p0 = q.front();
		q.pop();
		FOR(d,4) {
			Point p1((p0.d+1) % 4, p0.r + dr[d], p0.c + dc[d]);
			if (a[p1.d][p1.r][p1.c] == '.' && ans[p1.d][p1.r][p1.c] == INF) {
				ans[p1.d][p1.r][p1.c] = ans[p0.d][p0.r][p0.c] + 1;
				q.push(p1);
			}
		}
	}

	int res = INF;
	FOR(d,4) res = min<int>(res, ans[d][r2][c2]);
	return res;
}

int main() {

	cin >> tc;
	for (int ic = 0; ic < tc; ++ic) {
		cin >> m >> n;
		for (int i = 0; i < m+2; ++i) {
			for (int j = 0; j < n+2; ++j) a[0][i][j] = '#';
		}
		string t;
		for (int i = 0; i < m; ++i) {
			cin >> t;
			for (int j = 0; j < n; ++j) a[0][i+1][j+1] = t[j];
		}
		for (int i = 1; i <= m; ++i) {
			for (int j = 1; j <= n; ++j) {
				if (a[0][i][j] == 'S') {
					r1 = i; c1 = j; a[0][i][j] = '.';
				}
				if (a[0][i][j] == 'G') {
					r2 = i; c2 = j; a[0][i][j] = '.';
				}
			}
		}
		int result = fun();
		cout << "Case #" << ic+1 << ": ";
		if (result < INF) cout << result << endl;
		else cout << "impossible" << endl;
	}

	return 0;
}

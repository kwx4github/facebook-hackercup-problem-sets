#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <queue>
#include <cstring>
#include <string>

#define vi vector<int>
#define vpii vector< pair<int,int> >
#define pii pair<int,int>
#define mp(x,y) make_pair(x,y)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define sqr(x) ((x)*(x))
#define FOR(i,n) for (ll i = 0; i < ll(n); i++)
#define FOR1(i,n) for (ll i = 1; i < ll(n); i++)
#define READ(v,n) { FOR(i,n){int x;cin>>x;v.pb(x);} }
#define FREAD(v,n) { FOR(i,n){int x;in>>x;v.pb(x);} }
#define WRITE(v) "";FOR(i,sz(v))cout<<v[i]<<" ";cout
#define FWRITE(v) "";FOR(i,sz(v))out<<v[i]<<" ";out
#define gmin(a,b) { if (b < a) a = b; }
#define gmax(a,b) { if (b > a) a = b; }
#define pb push_back
#define ppb pop_back
typedef long long ll;
typedef unsigned long long ull;
using namespace std;
vector<string> ma;
int mm[105][105][4];
int dir[4][2];
int m,n;

struct Node{
  int x, y, k, dist;
};



string hashNode(Node n){
  stringstream ss;
  ss<<n.x<<","<<n.y<<","<<n.k<<","<<n.dist;
  return ss.str();
}

bool onBoard(int x, int y){
  if(x<0 || x>=m || y<0 || y>=n) return false;
  return true;
}

bool isFree(int x, int y, int k){
  if(!onBoard(x,y)) return false;
  return mm[x][y][k]==0;
}

bool isWall(int x, int y){
  if(!onBoard(x,y)) return true;
  if(ma[x][y]=='.') return false;
  return true;
}

void shoot(int x, int y, int d, int k){
  x += dir[d][0];
  y += dir[d][1];
  while(!isWall(x,y)){
    mm[x][y][k] = 2;
    x += dir[d][0];
    y += dir[d][1];
  }
}




int main(void){
  dir[0][0]=-1; dir[0][1]=0;
  dir[1][0]=0; dir[1][1]=1;
  dir[2][0]=1; dir[2][1]=0;
  dir[3][0]=0; dir[3][1]=-1;

  int T;
  cin>>T;
  FOR1(t, T+1){
    //read
    cin>>m>>n;
    //memset(&ma, 0, sizeof(ma));
    ma = vector<string>(105);
    memset(&mm, 0, sizeof(mm));
    
    FOR(i,m){
      string s;
      cin>>s;
      ma[i] = s;
    }
    
    //init
    int beginx, beginy;
    int targetx, targety;
    FOR(i,m)FOR(j,n){
      if(ma[i][j] == 'S'){
        beginx = i;
        beginy = j;
        ma[i][j] = '.';
      }
      if(ma[i][j] == 'G'){
        targetx = i;
        targety = j;
        ma[i][j] = '.';
      }
    }
    FOR(i,m)FOR(j,n)FOR(k,4){
      mm[i][j][k] = (ma[i][j] == '.'?0:1);
    }
    FOR(i,m)FOR(j,n){
      if(ma[i][j]!='.' && ma[i][j]!='#'){
        int ofset = 0;
        if(ma[i][j]=='^') ofset = 3;
        if(ma[i][j]=='>') ofset = 2;
        if(ma[i][j]=='v') ofset = 1;
        if(ma[i][j]=='<') ofset = 0;
        
        FOR(d, 4){
          int k = (ofset+d) % 4;
          shoot(i, j, d, k);
        }
      }
    }
    
    //cerr
//    FOR(k,4){
//      cerr<<k<<endl;
//      FOR(i,m){
//        FOR(j,n){
//          cerr<<mm[i][j][k];
//        }
//        cerr<<endl;
//      }
//    }cerr<<endl;
    
    
    
    //search
    set<string> ss;
    Node o;
    o.x = beginx;
    o.y = beginy;
    o.k = 0;
    o.dist = 0;
    queue<Node> q;
    ss.insert(hashNode(o));
    q.push(o);
    
    while(!q.empty()){
      Node o = q.front(); q.pop();
      int x = o.x;
      int y = o.y;
      int dist = o.dist;
      int k = o.k;
      
      FOR(d, 4){
        int xx = x + dir[d][0];
        int yy = y + dir[d][1];
        if(x == targetx && y == targety){
          cout<<"Case #"<<t<<": ";
          cout<<dist<<endl;
          goto nextt;
        }
        if(!isFree(xx, yy, k)) continue;
        Node p;
        p.x = xx;
        p.y = yy;
        p.k = (k+1) %4;
        p.dist=dist+1;
        if(ss.insert(hashNode(p)).second){
          q.push(p);
        }
      }
    
    }
    
    cout<<"Case #"<<t<<": ";
    cout<<"impossible"<<endl;
    nextt:continue;
  }
    
  return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:256000000")
#define _USE_MATH_DEFINES
#include<iostream>
#include<vector>
#include<string>
#include<stack>
#include<algorithm>
#include<cmath>
#include<set>
#include<queue>
#include<sstream>
#include<utility>
#include<map>
#include<ctime>
#include<cstdio>
#include<cassert>
#include<functional>




using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<char, char> pcc;
typedef pair<double, double> pdd;

#define show(x) cerr << x
#define debug(x) show(#x << ": " << (x) << endl)

const long double PI = 3.14159265358979323846;
const long double gammama = 0.57721566490153286060;
const long double eps = 1e-5;
const int INF = 1000 * 1000 * 1000 + 1;
const ll LINF = (ll)1000 * 1000 * 1000 * 1000 * 1000 * 1000;
const ll mod = 1000 * 1000 * 1000 + 7;


int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };


void laser(int id, int i, int j, vector<vector<vector<int> > >& a) {
      int n = a[0].size();
      int m = a[0][0].size();
      for (int num = 0; num < 4; ++num, id = (id + 1) % 4) {
            int x = j, y = i;
            x += dx[id], y += dy[id];
            while (((x >= 0) && (y >= 0) && (x < m) && (y < n)) && (a[num][y][x] != INF + 1)) {
                  a[num][y][x] = INF + 1;
                  x += dx[id];
                  y += dy[id];
            }
      }
}

struct vertex {
      int id, x, y;
      vertex(int a, int b, int c) : id(a), x(b), y(c) {}
      vertex(int _id, pii p) : id(_id), x(p.first), y(p.second) {}
};

void solve() {
      int n, m;
      cin >> n >> m;
      vector<vector<vector<int> > > a(4, vector<vector<int> >(n, vector<int>(m, INF)));
      vector<string> field(n);
      pii start, end;
      for (int i = 0; i < n; ++i)
            cin >> field[i];
      for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                  if (field[i][j] == '.')
                        continue;
                  if (field[i][j] == 'S') {
                        start = pii(i, j);
                        continue;
                  }
                  if (field[i][j] == 'G') {
                        end = pii(i, j);
                        continue;
                  }
                  for (int id = 0; id < 4; ++id)
                        a[id][i][j] = INF + 1;
            }
      }
      for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                  if (field[i][j] == '>') {
                        laser(0, i, j, a);
                  }
                  if (field[i][j] == 'v') {
                        laser(1, i, j, a);
                  }
                  if (field[i][j] == '<') {
                        laser(2, i, j, a);
                  }
                  if (field[i][j] == '^') {
                        laser(3, i, j, a);
                  }
            }
      }
      queue<vertex> q;
      /*if (a[0][start.first][start.second] > INF) {
            cout << "impossible\n";
            return;
      }*/
      a[0][start.first][start.second] = 0;
      q.push(vertex(0, start.first, start.second));
      while (!q.empty()) {
            vertex v = q.front();
            q.pop();
            int newId = (v.id + 1) % 4;
            pii p[4];
            for (int i = 0; i < 4; ++i) {
                  p[i] = pii(v.x + dx[i], v.y + dy[i]);
                  if (((p[i].first >= 0) && (p[i].second >= 0) && (p[i].first < n) && (p[i].second < m)) && (a[newId][p[i].first][p[i].second] == INF)) {
                        a[newId][p[i].first][p[i].second] = a[v.id][v.x][v.y] + 1;
                        q.push(vertex(newId, p[i]));
                  }
            }
      }
      int res = INF;
      for (int i = 0; i < 4; ++i)
            res = min(res, a[i][end.first][end.second]);
      if (res == INF)
            cout << "impossible\n";
      else
            cout << res << "\n";
}

#define LOCAL

int main() {
      //ios_base::sync_with_stdio(0);
#ifdef LOCAL
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
#endif
      int numberOfTests;
      cin >> numberOfTests;
      for (int testId = 0; testId < numberOfTests; ++testId) {
            cout << "Case #" << testId + 1 << ": ";
            solve();
            std::cerr << testId << endl;
      }

#ifdef LOCAL
      cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif	
      return 0;
}

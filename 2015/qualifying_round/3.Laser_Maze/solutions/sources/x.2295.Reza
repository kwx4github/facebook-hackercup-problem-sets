#include <bits/stdc++.h>
using namespace std;

typedef pair < int , int > pii;
#define fr first
#define se second

int n, m;
char mat[128][128];
int g[4][128][128], dis[4][128][128];
char dd[4] = { '<' , '^', '>', 'v' };
int d[4][2] = { {0,-1}, {-1,0}, {0,1}, {1,0} };

void make( int start )
{
	for( int i = 0 ; i < n ; i ++ )
		for( int j = 0 ; j < m ; j ++ )
			g[start][i][j] = 1;
	for( int i = 0 ; i < n ; i ++ )
		for( int j = 0 ; j < m ; j ++ )
			for( int k = 0 ; k < 4 ; k ++ )
				if( mat[i][j] == dd[k] )
				{
					int dir = ( k + start ) % 4;
					int xx = i + d[dir][0], yy = j + d[dir][1];
					while( 0 <= xx && xx < n && 0 <= yy && yy < m && mat[xx][yy] == '.' )
					{
						g[start][xx][yy] = 0;
						xx += d[dir][0], yy += d[dir][1];
					}
				}
}
int bfs( int sx, int sy, int tx, int ty )
{
	queue < pair < pii , int > > q;
	q.push( make_pair( pii( sx, sy ) , 0 ) );
	for( int i = 0 ; i < n ; i ++ )
		for( int j = 0 ; j < m ; j ++ )
			for( int k = 0 ; k < 4 ; k ++ )
				dis[k][i][j] = 1000000000;
	dis[0][sx][sy] = 0;
	while( !q.empty() )
	{
		int x = q.front().fr.fr;
		int y = q.front().fr.se;
		int id = q.front().se;
		q.pop();
		int nid = ( id + 1 ) % 4;
		for( int i = 0 ; i < 4 ; i ++ )
		{
			int nx = x + d[i][0], ny = y + d[i][1];
			if( 0 <= nx && nx < n && 0 <= ny && ny < m && g[nid][nx][ny] && dis[nid][nx][ny] > dis[id][x][y] + 1 )
			{
				dis[nid][nx][ny] = dis[id][x][y] + 1;
				q.push( make_pair( pii( nx, ny ) , nid ) );
			}
		}
	}
	int mn = 1000000000;
	for( int i = 0 ; i < 4 ; i ++ )
		mn = min( mn, dis[i][tx][ty] );
	return mn;
}

int main()
{
	int t;
	cin >> t;
	for( int tc = 1 ; tc <= t ; tc ++ )
	{
		int sx, sy, tx, ty;
		cin >> n >> m;
		for( int i = 0 ; i < n ; i ++ )
			for( int j = 0 ; j < m ; j ++ )
			{
				cin >> mat[i][j];
				if( mat[i][j] == 'S' )
					sx = i, sy = j, mat[i][j] = '.';
				if( mat[i][j] == 'G' )
					tx = i, ty = j, mat[i][j] = '.';
			}
		for( int i = 0 ; i < 4 ; i ++ )
			make( i );
		int d = bfs( sx, sy, tx, ty );
		if( d == 1000000000 )
			printf( "Case #%d: impossible\n", tc );
		else
			printf( "Case #%d: %d\n", tc, bfs( sx, sy, tx, ty ) );
	}
	return 0;
}

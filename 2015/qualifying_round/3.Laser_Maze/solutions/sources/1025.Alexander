#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <map>
#include <queue>

using namespace std;
#define forn(i, n) for(int i = 0; i < (int)(n); i++)

const int N = 110, K = 4;
char table[N][N];
map<char, int> dir = {{'^', 0}, {'>', 1}, {'v', 2}, {'<', 3}};
char a[K][N][N];
const int di[4] = {-1, 0, 1, 0};
const int dj[4] = {0, 1, 0, -1};

int d[K][N][N];

struct TPos
{
    int k, i, j;
    TPos(int k, int i, int j): k(k), i(i), j(j) {}
    TPos() {}
};
const int inf = 1e9;
int solve() {
    forn(i, N) forn(j, N) table[i][j] = '#';
    int n, m;
    cin >> n >> m;
    int si, fi, sj, fj;
    forn (i, n) forn (j, m) {
        cin >> table[i][j];
        if (table[i][j] == 'S') si = i, sj = j, table[i][j] = '.';
        if (table[i][j] == 'G') fi = i, fj = j, table[i][j] = '.';
    }
    forn (k, 4) forn (i, N) forn (j, N) d[k][i][j] = inf, a[k][i][j] = table[i][j];
    forn (k, 4) forn (i, n) forn (j, m) {
        auto it = dir.find(table[i][j]);
        if (it != dir.end()) {
            int w = (it->second + k) % 4;
            int pi = i + di[w], pj = j + dj[w];
            while (table[pi][pj] == '.') {
                a[k][pi][pj] = '#';
                pi += di[w];
                pj += dj[w];
            }
        }
    }
    queue<TPos> q;
    q.push(TPos(0, si, sj));
    d[0][si][sj] = 0;
    while (!q.empty()) {
        TPos cur = q.front(); q.pop();
        forn (w, 4)
        {
            TPos nex((cur.k + 1) % 4, cur.i + di[w], cur.j + dj[w]);
            if (a[nex.k][nex.i][nex.j] == '.' && d[nex.k][nex.i][nex.j] == inf){
                d[nex.k][nex.i][nex.j] = d[cur.k][cur.i][cur.j] + 1;
                q.push(nex);
            }
        }
    }
    int mn = inf;
    forn (k, 4) mn = min(mn, d[k][fi][fj]);
    return mn;
}

int main()
{
    cin.sync_with_stdio();
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int T;
    cin >> T;
    for (int t = 1; t <= T; t++) {
        cout << "Case #" << t << ": ";
        int res = solve();
        if (res == inf) cout << "impossible";
        else cout << res;
        cout << "\n";
    }
    return 0;
}

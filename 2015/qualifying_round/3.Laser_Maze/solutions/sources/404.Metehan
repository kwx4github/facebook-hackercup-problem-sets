#include <algorithm>
#include <string.h>
#include <stdio.h>
#include <queue>
#define  maxn      105
#define  maxc      256
using    namespace std;

struct data
{
  int x,y,c;
  data(int _x , int _y , int _c)
  {
    x=_x;
    y=_y;
    c=_c;
  }
  friend bool operator<(const data &a , const data &b)
  {
    return a.c>b.c;
  }
};

int T,n,m;
int val[maxc];
char s[maxn][maxn];
bool forb[maxn][maxn][4];
bool mark[maxn][maxn][4];
int dir[4][2]={{-1,0},{0,1},{1,0},{0,-1}};

int main()
{
  memset(val,-1,sizeof(val));
  val['^']=0;
  val['>']=1;
  val['v']=2;
  val['<']=3;
  scanf("%d",&T);
  for(int t=1 ; t<=T ; t++)
  {
    memset(mark,0,sizeof(mark));
    memset(forb,0,sizeof(forb));
    int sx,sy,ex,ey;
    scanf("%d%d",&n,&m);
    for(int i=1 ; i<=n ; i++)
      scanf("%s",s[i]+1);
    for(int i=1 ; i<=n ; i++)
      for(int j=1 ; j<=m ; j++)
      {
        if(s[i][j]=='S') sx=i,sy=j;
        if(s[i][j]=='G') ex=i,ey=j;
        if(val[s[i][j]]!=-1)
          for(int k=0 ; k<4 ; k++)
          {
            //printf("%d %d %d\n",i,j,k);
            int x=i,y=j,tmp=(val[s[x][y]]+k)%4;
            x+=dir[tmp][0];
            y+=dir[tmp][1];
            while(x>=1 && x<=n && y>=1 && y<=m && val[s[x][y]]==-1 && s[x][y]!='#')
            {
              //printf("%d %d\n",x,y);
              forb[x][y][k]=true;
              x+=dir[tmp][0];
              y+=dir[tmp][1];
            }
          }
      }
    priority_queue<data>heap;
    for(int i=0 ; i<4 ; i++)
    {
      int x=sx+dir[i][0];
      int y=sy+dir[i][1];
      if(x>=1 && x<=n && y>=1 && y<=m && val[s[x][y]]==-1 && s[x][y]!='#' && !forb[x][y][1])
        heap.push(data(x,y,1));
    }
    bool imp=true;
    while(!heap.empty())
    {
      data tmp=heap.top();
      heap.pop();
      if(mark[tmp.x][tmp.y][tmp.c%4]) continue;
      //printf("Q %d %d %d\n",tmp.x,tmp.y,tmp.c);
      if(tmp.x==ex && tmp.y==ey)
      {
        printf("Case #%d: %d\n",t,tmp.c);
        imp=false;
        break;
      }
      mark[tmp.x][tmp.y][tmp.c%4]=true;
      for(int i=0 ; i<4 ; i++)
      {
        int x=tmp.x+dir[i][0];
        int y=tmp.y+dir[i][1];
        if(x>=1 && x<=n && y>=1 && y<=m && val[s[x][y]]==-1 && s[x][y]!='#' && !forb[x][y][(tmp.c+1)%4] && !mark[x][y][(tmp.c+1)%4])
          heap.push(data(x,y,tmp.c+1));
      }
    }
    if(imp)
      printf("Case #%d: impossible\n",t);
  }
  return 0;
}

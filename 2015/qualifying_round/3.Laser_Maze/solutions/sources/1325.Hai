#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>
#include <string>

using namespace std;

const int N = 123;
const int DX[] = { 0, 1, 0, -1 };
const int DY[] = { 1, 0, -1, 0 };
const string sdir = ">v<^";

int dp[N][N][4], dir[N][N];
pair<int, int> pos[N][N][4];
string s[N];

inline
int ok(pair<int, int> p, int step) {
    for (int i = 0; i < 4; ++i) {
        int x = pos[p.first][p.second][i].first;
        int y = pos[p.first][p.second][i].second;
        if (x != 0) {
            if (((i + 2) & 3) == ((dir[x][y] + step) & 3)) {
                return false;
            }
        }
    }
    return true;
}

inline
bool can(int x, int y) {
    return s[x][y] == '.' || s[x][y] == 'G' || s[x][y] == 'S';
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int tt;
    cin >> tt;
    for (int tn = 1; tn <= tt; ++tn) {
        int n, m;
        cin >> n >> m;
        pair<int, int> fpos, tpos;
        for (int i = 1; i <= n; ++i) {
            cin >> s[i];
            s[i] = '0' + s[i];
            for (int j = 1; j <= m; ++j) {
                if (s[i][j] == 'S') {
                    fpos = make_pair(i, j);
                } else if (s[i][j] == 'G') {
                    tpos = make_pair(i, j);
                }
            }
        }
        memset(pos, 0, sizeof(pos));
        memset(dp, -1, sizeof(dp));
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= m; ++j) {
                char c = s[i][j];
                if (sdir.find(c) != string::npos) {
                    dir[i][j] = sdir.find(c);
                    for (int k = j - 1; k >= 1 && can(i, k); --k) pos[i][k][0] = make_pair(i, j);
                    for (int k = j + 1; k <= m && can(i, k); ++k) pos[i][k][2] = make_pair(i, j);
                    for (int k = i - 1; k >= 1 && can(k, j); --k) pos[k][j][1] = make_pair(i, j);
                    for (int k = i + 1; k <= n && can(k, j); ++k) pos[k][j][3] = make_pair(i, j);
                }
            }
        queue<pair<pair<int, int>, int>> q;
        dp[fpos.first][fpos.second][0] = 0;
        q.push(make_pair(fpos, 0));
        while (!q.empty()) {
            pair<int, int> p = q.front().first;
            int remainder = q.front().second;
            q.pop();
            int step = dp[p.first][p.second][remainder];
            for (int i = 0; i < 4; ++i) {
                pair<int, int> z(p.first + DX[i], p.second + DY[i]);
                if (1 <= z.first && z.first <= n)
                    if (1 <= z.second && z.second <= m)
                        if (can(z.first, z.second))
                            if (ok(z, step + 1)) {
                                if (dp[z.first][z.second][(step + 1) & 3] == -1) {
                                    dp[z.first][z.second][(step + 1) & 3] = step + 1;
                                    q.push(make_pair(z, (step + 1) & 3));
                                }
                            }
            }
        }
        int ans = -1;
        for (int remainder = 0; remainder < 4; ++remainder)
            if (ok(tpos, remainder)) {
                int step = dp[tpos.first][tpos.second][remainder];
                if (step != -1) {
                    if (ans == -1 || ans > step) {
                        ans = step;
                    }
                }
            }
        cout << "Case #" << tn << ": ";
        if (ans == -1) {
            cout << "impossible" << '\n';
        } else {
            cout << ans << '\n';
        }
    }
}

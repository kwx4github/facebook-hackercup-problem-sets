#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
int N , M;
char in[110][110];
char kill[4][110][110];
ll sp[110][110][4];
string pos = ">v<^>v<^";
map<char , pii> dir;
char type(char of , int cl){
  return pos[pos.find(of) + cl];
}
bool is_in(int x , int y){
  return x >= 0 && x < N &&
         y >= 0 && y < M;
}
bool is_fine(char w){
  return w == '.' || w == 'B';
}
void prepare(){
  for(int m=0;m<4;++m){
   for(int i=0;i<N;++i)
    for(int j=0;j<M;++j)
     kill[m][i][j] = in[i][j];
   for(int i=0;i<N;++i)
    for(int j=0;j<M;++j)
     if(dir.count(kill[m][i][j])){
      kill[m][i][j] = type(kill[m][i][j],m);
      pii d = dir[kill[m][i][j]];
      int ci = i , cj = j;
      while(is_in(ci + d.fi , cj + d.se) &&
            is_fine(kill[m][ci+d.fi][cj+d.se]))
       ci += d.fi , cj += d.se,
       kill[m][ci][cj] = 'B';
                                 }
                      }
}
int sft[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
ll doit(){
  //// Input
  scanf("%d%d" , &N , &M);
  for(int i=0;i<N;++i)
   scanf("%s" , &in[i]);
  pii S , F;
  for(int i=0;i<N;++i)
   for(int j=0;j<M;++j){
    if(in[i][j] == 'S')
     in[i][j] = '.',
     S = mp(i , j);
    if(in[i][j] == 'G')
     in[i][j] = '.',
     F = mp(i , j);
                       }
  prepare();
  //// </end>
  for(int i=0;i<N;++i)
   for(int j=0;j<M;++j)
    for(int l=0;l<4;++l)
     sp[i][j][l] = -1;
  queue< pair<pii,int> > Q;
  Q.push(mp(S , 0));
  sp[S.fi][S.se][0] = 0;
  while(!Q.empty()){
   pii p = Q.front().fi;
   int len = Q.front().se;
   ll path = sp[p.fi][p.se][len];
   if(p == F) return path;
   Q.pop();
   (len += 1) %= 4;
   for(int t=0;t<4;++t){
    int nx = p.fi + sft[t][0];
    int ny = p.se + sft[t][1];
    if(!is_in(nx , ny)) continue;
    if(in[nx][ny] != '.') continue;
    if(kill[len][nx][ny] == 'B') continue;
    if(sp[nx][ny][len] == -1)
     sp[nx][ny][len] = path + 1,
     Q.push(mp(mp(nx , ny) , len));
                       }
                   }
  return -1;
}
int main(){
  dir['>'] = mp(0 , 1);
  dir['v'] = mp(1 , 0);
  dir['<'] = mp(0 , -1);
  dir['^'] = mp(-1 , 0);
  int Q;
  scanf("%d" , &Q);
  for(int i=1;i<=Q;++i){
   ll sol = doit();
   if(sol >= 0)
    cout<<"Case #"<<i<<": "<<sol<<'\n';
   else
    cout<<"Case #"<<i<<": impossible\n";
                       }
  return 0;
}


#include <string>
#include <iostream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <cassert>
#include <queue>
#include <cstring>
using namespace std;

/*PREWRITTEN CODE BEGINS HERE*/
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define SIZE(x) ( (int)((x).size()) )
#define CS c_str()
#define EL printf("\n")
#define RESET(a,c) memset(a,(c),sizeof(a))

#define ALL(v) (v).begin(), (v).end()
#define REP(i,n) for(int i=0,_n=(n); i<_n; ++i)
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; ++i)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; --i)
#define VAR(a,b) __typeof (b) a=b
#define FORE(i,a)  for(VAR(i,a.begin()); i!=a.end(); ++i)

typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long long> VLL; 
typedef vector<vector<int> > VVI;
typedef vector<vector<string> > VVS;
/*PREWRITTEN CODE ENDS HERE*/
inline int RI() { int xx; scanf("%d",&xx); return xx; }
typedef long double LD;
const int INF = 1010000000;
const double EPS = 1e-9;
/*SOLUTION BEGINS HERE*/

const int MAX = 110;
int N, M;

const int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};

char plan[MAX][MAX];

int vis[MAX][MAX][4];


struct E {
	int x, y, time;
	E(int x_, int y_, int time_) :
		x(x_), y(y_), time(time_ % 4) {}
};


bool in_field(int x, int y) {
	if (x < 0 || x >= N || y < 0 || y >= M) return false;
	return true;
}

bool can_move(int x, int y, int tm) {
	if (!in_field(x, y)) return false;
	if (plan[x][y] != '.') return false;

	REP(k, 4) {
		int nx = x, ny = y;
		
		while (in_field(nx, ny) && plan[nx][ny] == '.') {
			nx += dx[k];
			ny += dy[k];
		}

		if (!in_field(nx, ny)) { continue; }
		if (plan[nx][ny] == '#') { continue; }

		assert(plan[nx][ny] >= 0 && plan[nx][ny] < 4);

		bool hits = ( ((plan[nx][ny] + tm) % 4)  == ((k + 2) % 4));
		if (hits) return false;
	}

	return true;
}

int bfs(int sx, int sy, int ex, int ey) {
	queue<E> q;
	
	RESET(vis, -1);

	q.push(E(sx, sy, 0));
	vis[sx][sy][0] = 0;

	while (!q.empty()) {
		E e = q.front(); q.pop();

		if (e.x == ex && e.y == ey) { return vis[e.x][e.y][e.time]; }

		REP(k, 4) {
			int nx = e.x + dx[k];
			int ny = e.y + dy[k];
			int ntime = (e.time + 1) % 4;
			if (!can_move(nx, ny, ntime)) {
				continue;
			}
			if (vis[nx][ny][ntime] != -1) {
				continue;
			}

			vis[nx][ny][ntime] = vis[e.x][e.y][e.time] + 1;
			q.push(E(nx, ny, ntime));
		}
	}

	return -1;
}

void solve(void)
{
	scanf("%d %d\n", &N, &M);
	char buf[10 * MAX];
	REP(i, N) {
		fgets(buf, 10 * MAX, stdin);
		REP(j, M) plan[i][j] = buf[j];
	}
	
	int sx = -1, sy = -1, ex = -1, ey = -1;
	REP(i, N) REP(j, M) {
		switch (plan[i][j]) {
			case '#': break;
			case '.': break;
			case 'S': sx = i; sy = j; plan[i][j] = '.'; break;
			case 'G': ex = i; ey = j; plan[i][j] = '.'; break;
			case '^': plan[i][j] = 0; break;
			case '>': plan[i][j] = 1; break;
			case 'v': plan[i][j] = 2; break;
			case '<': plan[i][j] = 3; break;
			default: printf("plan[i][j] = %c\n", plan[i][j]); assert(0);
		}
	}

	int steps = bfs(sx, sy, ex, ey);
	if (steps == -1) {
		printf("impossible\n");
	} else {
		printf("%d\n", steps);
	}
}

int main(void)
{
	int T, C = 1;
	scanf("%d", &T);
	while(T--) { printf("Case #%d: ",C++); solve(); }
	return (0);
}

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.List;
import java.util.Scanner;

public class LaserMaze {

	static final int EMPTY = 0;
	static final int OCCUPIED = 1;
	static final int OCCUPIED_BY_LASER = 2;

	private static final char START = 'S';
	private static final char GOAL = 'G';
	private static final char WALL = '#';

	public static void main(String[] argv) {
		LaserMaze solver = new LaserMaze();
		Scanner sc = new Scanner(System.in);
		try {
			int t = sc.nextInt();
			for (int i = 1; i <= t; i++) {
				int m = sc.nextInt();
				int n = sc.nextInt();
				sc.nextLine();
				String[] maze = new String[m];
				for (int j = 0; j < m; j++) {
					maze[j] = sc.nextLine();
				}
				int result = solver.solve(m, n, maze);
				if (result >= 0)
					System.out.println("Case #" + i + ": " + result);
				else
					System.out.println("Case #" + i + ": impossible");

			}
		} finally {
			sc.close();
		}
	}

	static void setCellAcrossTime(int[][][] hyperMaze, int x, int y, int val) {
		for (int z = 0; z < hyperMaze[x][y].length; z++) {
			hyperMaze[x][y][z] = val;
		}
	}

	public int solve(int m, int n, String[] maze) {
		int[][][] hyperMaze = new int[m][n][4];
		List<Turret> turrets = new ArrayList<Turret>();
		int sx = -1, sy = -1, gx = -1, gy = -1;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				char c = maze[i].charAt(j);
				if (Arrow.isArrow(c)) {
					Arrow arrow = Arrow.fromChar(c);
					turrets.add(new Turret(i, j, arrow));
					setCellAcrossTime(hyperMaze, i, j, OCCUPIED);
				} else {
					switch (c) {
					case WALL:
						setCellAcrossTime(hyperMaze, i, j, OCCUPIED);
						break;
					case START:
						sx = i;
						sy = j;
						break;
					case GOAL:
						gx = i;
						gy = j;
						break;
					default:
						break;

					}
				}
			}
		}
		fillHyperMazeWithLaserBeams(turrets, hyperMaze);
		return findShortestRoute(sx, sy, gx, gy, hyperMaze);
	}

	private int findShortestRoute(int sx, int sy, int gx, int gy,
			int[][][] hyperMaze) {
		if (sx < 0 || sy < 0 || gx < 0 || gy < 0)
			return -1;
		Deque<Integer[]> stack = new ArrayDeque<Integer[]>(100);
		int result = Integer.MAX_VALUE;
		int m = hyperMaze.length;
		int n = hyperMaze[0].length;
		int[][][] visited = initVisited(m, n, sx, sy);
		stack.add(point(sx, sy, 0));
		while (!stack.isEmpty()) {
			Integer[] point = stack.pop();
			int x = point[0];
			int y = point[1];
			int time = point[2];
			int dist = visited[x][y][time] + 1;
			if (x + 1 < m) {
				tryMoving(stack, hyperMaze, visited, x + 1, y, dist);
			}
			if (x - 1 >= 0) {
				tryMoving(stack, hyperMaze, visited, x - 1, y, dist);
			}

			if (y + 1 < n) {
				tryMoving(stack, hyperMaze, visited, x, y + 1, dist);
			}

			if (y - 1 >= 0) {
				tryMoving(stack, hyperMaze, visited, x, y - 1, dist);
			}

		}
		for (int i = 0; i < 4; i++) {
			if (visited[gx][gy][i] < result)
				result = visited[gx][gy][i];
		}
		if (result == Integer.MAX_VALUE)
			result = -1;
		return result;
	}

	private int[][][] initVisited(int m, int n, int sx, int sy) {
		int[][][] visited = new int[m][n][4];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				Arrays.fill(visited[i][j], Integer.MAX_VALUE);
			}
		}
		visited[sx][sy][0] = 0;
		return visited;
	}

	private static int distToTime(int dist) {
		dist = (dist % 4) - 1;
		if (dist < 0)
			dist += 4;
		return dist;
	}

	private void tryMoving(Deque<Integer[]> stack, int[][][] hyperMaze,
			int[][][] visited, int x, int y, int dist) {
		if (canMoveTo(hyperMaze, visited, x, y, dist)) {
			visited[x][y][distToTime(dist)] = dist;
			stack.add(point(x, y, distToTime(dist)));
		}
	}

	private boolean canMoveTo(int[][][] hyperMaze, int[][][] visited, int x,
			int y, int dist) {
		return hyperMaze[x][y][distToTime(dist)] == EMPTY
				&& visited[x][y][distToTime(dist)] > dist;
	}

	private void fillHyperMazeWithLaserBeams(List<Turret> turrets,
			int[][][] hyperMaze) {
		for (Turret t : turrets) {
			t.fireLaserInAllDirections(hyperMaze);
		}
	}

	private static Integer[] point(int x, int y, int z) {
		return new Integer[] { x, y, z };
	}

	static class Turret {
		public int x;
		public int y;
		public Arrow arrow;

		public Turret(int x, int y, Arrow arrow) {
			super();
			this.x = x;
			this.y = y;
			this.arrow = arrow;
		}

		public void fireLaserInAllDirections(int[][][] maze) {
			Arrow direction = this.arrow;
			for (int time = 0; time < 4; time++) {
				direction = direction.rotateClockwise();
				fireLaserInSingleDirection(maze, direction, time);
			}
		}

		private void fireLaserInSingleDirection(int[][][] maze,
				Arrow direction, int time) {
			switch (direction) {
			case DOWN: {
				boolean clearPath = true;
				int cx = this.x + 1;
				for (; clearPath && cx < maze.length; cx++) {
					clearPath = tryToOccupyMazeCellByLaser(maze, cx, this.y,
							time);
				}
			}
				break;
			case LEFT: {
				boolean clearPath = true;
				int cy = this.y - 1;
				for (; clearPath && cy >= 0; cy--) {
					clearPath = tryToOccupyMazeCellByLaser(maze, this.x, cy,
							time);
				}
			}
				break;
			case RIGHT: {
				boolean clearPath = true;
				int cy = this.y + 1;
				for (; clearPath && cy < maze[0].length; cy++) {
					clearPath = tryToOccupyMazeCellByLaser(maze, this.x, cy,
							time);
				}
			}
				break;
			case UP: {
				boolean clearPath = true;
				int cx = this.x - 1;
				for (; clearPath && cx >= 0; cx--) {
					clearPath = tryToOccupyMazeCellByLaser(maze, cx, this.y,
							time);
				}
			}
				break;

			}
		}

		private boolean tryToOccupyMazeCellByLaser(int[][][] maze, int x,
				int y, int z) {
			if (maze[x][y][z] != OCCUPIED) {
				maze[x][y][z] = OCCUPIED_BY_LASER;
				return true;
			} else {
				return false;
			}
		}

	}

	enum Arrow {
		UP('^', 0), DOWN('v', 2), LEFT('<', 3), RIGHT('>', 1);

		private final char symbol;
		private final int offset;

		private Arrow(char s, int o) {
			this.symbol = s;
			this.offset = o;
		}

		public Arrow rotateClockwise() {
			int nextOffset = (this.offset + 1) % 4;
			return fromOffset(nextOffset);
		}

		public static boolean isArrow(char c) {
			for (Arrow a : Arrow.values()) {
				if (a.symbol == c) {
					return true;
				}
			}
			return false;
		}

		private static Arrow fromOffset(int offset) {
			for (Arrow a : Arrow.values()) {
				if (a.offset == offset) {
					return a;
				}
			}
			throw new IllegalArgumentException("Offset " + offset
					+ " is illegal.");
		}

		public static Arrow fromChar(char c) {
			for (Arrow a : Arrow.values()) {
				if (a.symbol == c) {
					return a;
				}
			}
			throw new IllegalArgumentException("Symbol " + c
					+ " is not an arrow.");
		}
	}

}

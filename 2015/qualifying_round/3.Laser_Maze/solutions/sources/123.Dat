#include <bits/stdc++.h>
using namespace std;

const int maxN = 111;
const int dx[]={-1,0,1,0}, dy[]={0,1,0,-1};

typedef pair<int,int> pii;
typedef pair<pii,int> tii;
#define fi first
#define se second
#define mp make_pair

int m, n;
char a[maxN][maxN], b[4][maxN][maxN];
int dz[256];
int d[4][maxN][maxN];
queue<tii> qu;

bool inside(int x, int y){return 0 < x && x <= m && 0 < y && y <= n;}

void createB(int d){
    for (int i = 1; i <= m; i++)
        for (int j = 1; j <= n; j++){
            b[d][i][j] = a[i][j];
        }
    for (int i = 1; i <= m; i++)
        for (int j = 1; j <= n; j++){
        int ii = dz[b[d][i][j]], x = i, y = j;
            if (ii != -1){
                ii = (ii + d) % 4;
                //printf("ii = %d\n", ii);
                while (true){
                    x = x + dx[ii]; y = y + dy[ii];
                    if (!inside(x, y) || a[x][y] != '.')
                        break;
                    //printf("%d, %d\n", x, y);
                    b[d][x][y] = '@';
                }
            }
        }
    //printf("%s\n%s\n", b[d][1]+1, b[d][2]+1);
}

void solve(){
    scanf("%d%d", &m, &n);
    pii s, t;
    for (int i = 1; i <= m; i++){
        scanf("%s", a[i] + 1);
        for (int j = 1; j <= n; j++)
            if (a[i][j] == 'S') s = mp(i, j), a[i][j] = '.';
            else if (a[i][j] == 'G') t = mp(i, j), a[i][j] = '.';
    }
    for (int i = 0; i < 4; i++)
        createB(i);
    memset(d, -1, sizeof d);
    d[0][s.fi][s.se] = 0;
    while (qu.size()) qu.pop();
    qu.push(mp(s, 0));
    int res = -1;
    while (qu.size()){
        tii u = qu.front(); qu.pop();
        int x = u.fi.fi, y = u.fi.se, ii = u.se, ni = (ii + 1)%4;
        //printf("FROM %d, %d, %d: %s\n", x, y, ii, b[ii][2]+1);
        int X, Y;
        for (int i = 0; i < 4; i++){
            X = x + dx[i]; Y = y + dy[i];
            if (inside(X, Y) && b[ni][X][Y] == '.' && d[ni][X][Y] == -1){
                d[ni][X][Y] = d[ii][x][y] + 1;
                if (X == t.fi && Y == t.se && res == -1) res = d[ni][X][Y];
                qu.push(mp(mp(X, Y), ni));
            }
        }
    }
    if (res != -1) printf("%d\n", res);
    else printf("impossible\n");
}

int main(){
    freopen("C.in", "r", stdin);
    freopen("C.out", "w", stdout);
    memset(dz, -1, sizeof dz);
    dz['^'] = 0; dz['>'] = 1; dz['v'] = 2; dz['<'] = 3;
    int t; scanf("%d", &t);
    for (int i = 1; i <= t; i++){
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}


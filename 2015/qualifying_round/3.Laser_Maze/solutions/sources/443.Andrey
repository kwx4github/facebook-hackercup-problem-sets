#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>

using namespace std;

int di[4] = {1,  0, -1, 0};
int dj[4] = {0, -1,  0, 1};

int n, m, nt;
char s[101][101];
bool was[101][101][4];
bool safe[101][101][4];

bool inside(int i, int j)
{
	return i >= 0 && j >= 0 && i < n && j < m;
}

int solve()
{
	memset(was, 0, sizeof was);
	queue<int> Q;
	for(int i = 0; i < n; i++) for(int j = 0; j < m; j++)
		if (s[i][j] == 'S')
		{
			Q.push(i);
			Q.push(j);
			Q.push(0);
		}
	while(!Q.empty())
	{
		int x = Q.front(); Q.pop();
		int y = Q.front(); Q.pop();
		int T = Q.front(); Q.pop();
		if (T != 0 && !safe[x][y][T % 4]) continue;
		if (  was[x][y][T % 4]) continue;
		if (s[x][y] == 'G') return T;
		was[x][y][T % 4] = true;
		if (inside(x + 1, y))
		{
			Q.push(x + 1); Q.push(y); Q.push(T + 1);
		}
		if (inside(x, y + 1))
		{
			Q.push(x); Q.push(y + 1); Q.push(T + 1);
		}
		if (inside(x - 1, y))
		{
			Q.push(x - 1); Q.push(y); Q.push(T + 1);
		}
		if (inside(x, y - 1))
		{
			Q.push(x); Q.push(y - 1); Q.push(T + 1);
		}		
	}
	return -1;
}

int main()
{
	scanf("%d\n", &nt);
	for(int tt = 1; tt <= nt; tt++)
	{
		printf("Case #%d: ", tt);
		scanf("%d %d", &n, &m);
		for(int i = 0; i < n; i++) scanf("%s", s[i]);


		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				for(int k = 0; k < 4; k++) safe[i][j][k] = (s[i][j] != '#');

		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
			{
				int dir = -1;
				if (s[i][j] == 'v') dir = 0;
				if (s[i][j] == '<') dir = 1;
				if (s[i][j] == '^') dir = 2;
				if (s[i][j] == '>') dir = 3;
				if (dir != -1)
				{
					for(int k = 0; k < 4; k++)
					{
						int ii = i, jj = j;
						while(inside(ii, jj))
						{
							safe[ii][jj][k] = false;
							ii += di[dir];
							jj += dj[dir];
							if (strchr("#<>v^", s[ii][jj])) break;
						}
						dir = (dir + 1) % 4;
					}
				}
			}
		int res = solve();
		if (res == -1) puts("impossible"); else printf("%d\n", res);
	}
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <cstring>
#include <set>
#include <map>
#include <ctime>
#include <stack>
using namespace std;

#define inf 2147483647
#define eps 0.0000000000001
#define pi 3.1415926535897932
#define mod 1000000007
#define LL long long
#define ULL unsigned long long
#define LD long double
#define ULD unsigned long double

const int N = 100005;

//	printf("Case #%d: ",tcase);
//	cout<<fixed<<setprecision(3)<<"\nExecution time="<<clock()/1000.0<<endl;
//	freopen("input.txt","r",stdin);
//	freopen("output.txt","w",stdout);

int n, m, i, j, k, q, s, w, v, ans;
int x0, yzro, x1, ymek,x,y,vis[102][102];
char a[102][102], temp[102][102];
bool p[5][102][102];
queue<pair<pair<int,int>, int>> Q;
pair<pair<int, int>, int> pop;
queue<int> tans;

void upd(int cur)
{
	int i, j, k;
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= m; j++)
		{
			if (temp[i][j] == '^')
			{
				k = i - 1;
				while (k >= 1 && (temp[k][j] == '.' || temp[k][j] == 'S' || temp[k][j] == 'G'))
				{
					p[cur][k][j] = 1;
					k--;
				}
			}
			if (temp[i][j] == 'v')
			{
				k = i + 1;
				while (k <= n && (temp[k][j] == '.' || temp[k][j] == 'S' || temp[k][j] == 'G'))
				{
					p[cur][k][j] = 1;
					k++;
				}
			}
			if (temp[i][j] == '<')
			{
				k = j - 1;
				while (k >= 1 && (temp[i][k] == '.' || temp[i][k] == 'S' || temp[i][k] == 'G'))
				{
					p[cur][i][k] = 1;
					k--;
				}
			}
			if (temp[i][j] == '>')
			{
				k = j + 1;
				while (k <= m && (temp[i][k] == '.' || temp[i][k] == 'S' || temp[i][k] == 'G'))
				{
					p[cur][i][k] = 1;
					k++;
				}
			}
		}
	}
}
void rev()
{
	int i, j;
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= m; j++)
		{
			if (temp[i][j] == '^')
			{
				temp[i][j] = '>';
				continue;
			}
			if (temp[i][j] == '>')
			{
				temp[i][j] = 'v';
				continue;
			}
			if (temp[i][j] == 'v')
			{
				temp[i][j] = '<';
				continue;
			}
			if (temp[i][j] == '<')
			{
				temp[i][j] = '^';
				continue;
			}
		}
	}
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt","w",stdout);
	cin >> w;
	int tcase = 0;
	while (w--)
	{
		for (i = 1; i <= 100; i++)
			for (j = 1; j <= 100; j++)
				vis[i][j] = p[1][i][j] = p[2][i][j] = p[3][i][j] = p[4][i][j] = 0;
		tcase++;
		ans = 1e8;
		cin >> n >> m;
		for (i = 1; i <= n; i++)
		{
			for (j = 1; j <= m; j++)
			{
				cin >> a[i][j];
				temp[i][j] = a[i][j];
				if (a[i][j] == 'S')
					x0 = i, yzro = j;
				if (a[i][j] == 'G')
					x1 = i, ymek = j;
			}
		}
		upd(1);
		rev();
		upd(2);
		rev();
		upd(3);
		rev();
		upd(4);
		int curstage = 2;

		while (!Q.empty())
		{
			Q.pop();
			tans.pop();
		}
		Q.push({ { x0, yzro }, curstage });
		tans.push(0);
		int walk;
		while (!Q.empty())
		{
			pop = Q.front();
			x = pop.first.first;
			y = pop.first.second;
			curstage = pop.second;
			if (curstage == 4)
				curstage = 0;
			walk = tans.front();
			tans.pop(); Q.pop();
			if (++vis[x][y] >= 5)
				continue;
			if (x == x1 && y == ymek)
				ans = min(ans, walk);

			if (x + 1 <= n && (a[x + 1][y] == '.' || a[x + 1][y] == 'S' || a[x + 1][y] == 'G') && p[curstage][x + 1][y] == 0)
			{
				Q.push({ { x + 1, y }, curstage + 1 });
				tans.push(walk + 1);
			}
			if (x - 1 >= 1 && (a[x - 1][y] == '.' || a[x - 1][y] == 'S' || a[x - 1][y] == 'G') && p[curstage][x - 1][y] == 0)
			{
				Q.push({ { x - 1, y }, curstage + 1 });
				tans.push(walk + 1);
			}
			if (y + 1 <= m && (a[x][y + 1] == '.' || a[x][y + 1] == 'S' || a[x][y + 1] == 'G') && p[curstage][x][y + 1] == 0)
			{
				Q.push({ { x, y + 1 }, curstage + 1 });
				tans.push(walk + 1);
			}
			if (y - 1 >= 1 && (a[x][y - 1] == '.' || a[x][y - 1] == 'S' || a[x][y - 1] == 'G') && p[curstage][x][y - 1] == 0)
			{
				Q.push({ { x, y - 1 }, curstage + 1 });
				tans.push(walk + 1);
			}
		}
		if (ans == 1e8)
		{
			printf("Case #%d: impossible\n", tcase);
			continue;
		}

		printf("Case #%d: %d\n", tcase, ans);
	}
	return 0;
}











		


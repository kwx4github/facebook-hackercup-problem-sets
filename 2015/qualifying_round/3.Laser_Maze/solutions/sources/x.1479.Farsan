#include<cstdio>
#include<sstream>
#include<cstdlib>
#include<cctype>
#include<cmath>
#include<algorithm>
#include<set>
#include<queue>
#include<stack>
#include<list>
#include<iostream>
#include<fstream>
#include<numeric>
#include<string>
#include<vector>
#include<cstring>
#include<map>
#include<iterator>
#include<limits>
#include<iomanip>
#define inf 10000000
#define Max(v) *max_element(v.begin(),v.end())
#define Min(v) *min_element(v.begin(),v.end())
#define inp1(x) scanf("%d",&x)
#define inp2(x,y) scanf("%d %d",&x,&y)
#define Unique(v) v.resize(unique(v.begin(),v.end())-v.begin())
#define Sort(v) sort(v.begin(),v.end(),greater<int>());
#define fread() freopen("inp.txt","r",stdin)
#define fwrite() freopen("out.txt","w",stdout)
#define mem(n,m) memset(n,m,sizeof n)
int Set(int N,int pos){return N=N | (1<<pos);}
int reset(int N,int pos){return N= N & ~(1<<pos);}
bool check(int N,int pos){return (bool)(N & (1<<pos));}
int cnt_leading_zero_bits(int N){return __builtin_clz(N);}
int cnt_trailing_zero_bits(int N){return __builtin_ctz(N);}
int cnt_no_of_bits_on(int N){return __builtin_popcount(N);}
int mod_of_negative_number(int n,int m){return ((n%m)+m)%m;}
int a_to_the_power_b_mod_c(int a,int b,int c){if(b==0)return 1;if(b%2==0){int mx=a_to_the_power_b_mod_c(a,b/2,c);return (mx*mx)%c;} return ((a%c)*a_to_the_power_b_mod_c(a,b-1,c))%c;}
// solvability of a puzzle board( (grid width odd) && (#inversions even) )  ||  ( (grid width even) && ((blank on odd row from bottom) == (#inversions even)) )
//catalan(n+1)=(2*(2*n+1)*catalan(n))/(n+2) ... catalan(0)=1
//priority_queue< int, vector<int>, greater<int> > PQ;// keeps in ascending order
// bool operator < ( const node& b ) const


using namespace std;

pair<int,int> lft[10002],up[10002],rght[10002],dwn[10002];
int grid[105][105],dir[10002][5],stx,sty,enx,eny;
vector<int>row[105],col[105];
int dp[105][105][5],r,c,in_dir[102][102];
bool visited[105][105][5];
int rng(int x,int y,int pos)
{
    int mn;
    if(pos==0)
    {
        mn=x;
        x--;
        while(grid[x][y]==1)
        {
            mn=x;
            x--;
        }
        return mn;
    }
    else if(pos==1)
    {
        mn=y;
        y++;
        while(grid[x][y]==1)
        {
            mn=y;
            y++;
        }
        return mn;
    }
    else if(pos==2)
    {
        mn=x;
        x++;
        while(grid[x][y]==1)
        {
            mn=x;
            x++;
        }
        return mn;
    }
    else if(pos==3)
    {
        mn=y;
        y--;
        while(grid[x][y]==1)
        {
            mn=y;
            y--;
        }
        return mn;
    }
}

int solve(int x,int y,int pos)
{
    if(x==enx&&y==eny)
        return 0;
    if(visited[x][y][pos])
    {
        if(dp[x][y][pos]==-1)return 100000000;
        return dp[x][y][pos];
    }
    visited[x][y][pos]=true;
    int mx=1000000000,i,j,k,m,n;
    bool ok;
    if(grid[x-1][y]==1)
    {
        ok=true;
        for(i=0,j=row[x-1].size();i<j&&ok;i++)
        {
            k=row[x-1][i];
            m=lft[k].first;
            n=lft[k].second;
            if(y>=m&&y<=n&&dir[k][(pos+1)%4]==3)
            {
                ok=false;
            }
            m=rght[k].first;
            n=rght[k].second;
            if(y>=m&&y<=n&&dir[k][(pos+1)%4]==1)
            {
                ok=false;
            }
        }
        for(i=0,j=col[y].size();i<j&&ok;i++)
        {
            k=col[y][i];
            m=up[k].first;
            n=up[k].second;
            if(x-1>=m&&x-1<=n&&dir[k][(pos+1)%4]==0)
            {
                ok=false;
            }
            m=dwn[k].first;
            n=dwn[k].second;
            if(x-1>=m&&x-1<=n&&dir[k][(pos+1)%4]==2)
            {
                ok=false;
            }
        }
        if(ok)
        {
            m=solve(x-1,y,(pos+1)%4);
            if(m<mx)
                mx=m;
        }
    }
    if(grid[x][y+1]==1)
    {
        ok=true;
        for(i=0,j=row[x].size();i<j&&ok;i++)
        {
            k=row[x][i];
            m=lft[k].first;
            n=lft[k].second;
            if(y+1>=m&&y+1<=n&&dir[k][(pos+1)%4]==3)
            {
                ok=false;
            }
            m=rght[k].first;
            n=rght[k].second;
            if(y+1>=m&&y+1<=n&&dir[k][(pos+1)%4]==1)
            {
                ok=false;
            }
        }
        for(i=0,j=col[y+1].size();i<j&&ok;i++)
        {
            k=col[y+1][i];
            m=up[k].first;
            n=up[k].second;
            if(x>=m&&x<=n&&dir[k][(pos+1)%4]==0)
            {
                ok=false;
            }
            m=dwn[k].first;
            n=dwn[k].second;
            if(x>=m&&x<=n&&dir[k][(pos+1)%4]==2)
            {
                ok=false;
            }
        }
        if(ok)
        {
            m=solve(x,y+1,(pos+1)%4);
            if(m<mx)
                mx=m;
        }
    }
    if(grid[x+1][y]==1)
    {
        ok=true;
        for(i=0,j=row[x+1].size();i<j&&ok;i++)
        {
            k=row[x+1][i];
            m=lft[k].first;
            n=lft[k].second;
            if(y>=m&&y<=n&&dir[k][(pos+1)%4]==3)
            {
                ok=false;
            }
            m=rght[k].first;
            n=rght[k].second;
            if(y>=m&&y<=n&&dir[k][(pos+1)%4]==1)
            {
                ok=false;
            }
        }
        for(i=0,j=col[y].size();i<j&&ok;i++)
        {
            k=col[y][i];
            m=up[k].first;
            n=up[k].second;
            if(x+1>=m&&x+1<=n&&dir[k][(pos+1)%4]==0)
            {
                ok=false;
            }
            m=dwn[k].first;
            n=dwn[k].second;
            if(x+1>=m&&x+1<=n&&dir[k][(pos+1)%4]==2)
            {
                ok=false;
            }
        }
        if(ok)
        {
            m=solve(x+1,y,(pos+1)%4);
            if(m<mx)
                mx=m;
        }
    }
    if(grid[x][y-1]==1)
    {
        ok=true;
        for(i=0,j=row[x].size();i<j&&ok;i++)
        {
            k=row[x][i];
            m=lft[k].first;
            n=lft[k].second;
            if(y-1>=m&&y-1<=n&&dir[k][(pos+1)%4]==3)
            {
                ok=false;
            }
            m=rght[k].first;
            n=rght[k].second;
            if(y-1>=m&&y-1<=n&&dir[k][(pos+1)%4]==1)
            {
                ok=false;
            }
        }
        for(i=0,j=col[y-1].size();i<j&&ok;i++)
        {
            k=col[y-1][i];
            m=up[k].first;
            n=up[k].second;
            if(x>=m&&x<=n&&dir[k][(pos+1)%4]==0)
            {
                ok=false;
            }
            m=dwn[k].first;
            n=dwn[k].second;
            if(y>=m&&y<=n&&dir[k][(pos+1)%4]==2)
            {
                ok=false;
            }
        }
        if(ok)
        {
            m=solve(x,y-1,(pos+1)%4);
            if(m<mx)
                mx=m;
        }
    }
    return dp[x][y][pos]=mx+1;
}

int main()
{
    int i,j,k,m,n,t,cs=0,c;
    cin>>t;
    string s;
    //fwrite();
    while(t--)
    {
        cin>>r>>c;
        mem(grid,0);
        for(i=0;i<=r;i++)
        {
            row[i].clear();
        }
        for(i=1;i<=c;i++)
        {
            col[i].clear();
        }
        for(i=1;i<=r;i++)
        {
            cin>>s;
            for(j=0;j<c;j++)
            {
                if(s[j]=='.'||s[j]=='S'||s[j]=='G')
                {
                    grid[i][j+1]=1;
                    if(s[j]=='S')
                    {
                        stx=i;
                        sty=j+1;
                    }
                    if(s[j]=='G')
                    {
                        enx=i;
                        eny=j+1;
                    }
                }
                else if(s[j]=='#')
                {
                    grid[i][j+1]=0;
                }
                else
                {
                    grid[i][j+1]=3;
                    if(s[j]=='^')
                    in_dir[i][j+1]=1;
                    else if(s[j]=='>')
                    in_dir[i][j+1]=2;
                    else if(s[j]=='v')
                    in_dir[i][j+1]=3;
                    else if(s[j]=='<')
                    in_dir[i][j+1]=4;
                }
            }
        }
        for(i=1,k=0;i<=r;i++)
        {
            for(j=1;j<=c;j++)
            {
                if(grid[i][j]==3)
                {
                    k++;
                    row[i].push_back(k);
                    col[j].push_back(k);
                    if(in_dir[i][j]==1)
                    {
                        dir[k][0]=0;
                        c=rng(i,j,0);
                        up[k]=make_pair(c,i);
                    }
                    else if(in_dir[i][j]==2)
                    {
                        dir[k][0]=1;
                        c=rng(i,j,1);
                        rght[k]=make_pair(j,c);
                    }
                    else if(in_dir[i][j]==3)
                    {
                        dir[k][0]=2;
                        c=rng(i,j,2);
                        dwn[k]=make_pair(i,c);
                    }
                    else if(in_dir[i][j]==4)
                    {
                        dir[k][0]=3;
                        c=rng(i,j,3);
                        lft[k]=make_pair(c,j);
                    }
                    int tme=1;
                    while(tme<4)
                    {
                        dir[k][tme]=(dir[k][tme-1]+1)%4;
                        c=rng(i,j,dir[k][tme]);
                        if(dir[k][tme]==0)
                        {
                            up[k]=make_pair(c,i);
                        }
                        else if(dir[k][tme]==1)
                        {
                            rght[k]=make_pair(j,c);
                        }
                        else if(dir[k][tme]==2)
                        {
                            dwn[k]=make_pair(i,c);
                        }
                         else if(dir[k][tme]==3)
                        {
                            lft[k]=make_pair(c,j);
                        }
                        tme++;
                    }
                }
            }
        }
        cout<<"Case #"<<++cs<<": ";
        mem(visited,false);
        mem(dp,-1);
        m=solve(stx,sty,0);
        if(m<1000000000)
        cout<<m<<endl;
        else
            cout<<"impossible\n";
    }
    return 0;
}

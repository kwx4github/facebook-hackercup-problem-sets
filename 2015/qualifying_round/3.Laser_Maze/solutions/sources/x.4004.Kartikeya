#include<iostream>
#include<stdio.h>
#include<vector>
#include<string>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<list>
#include<algorithm>
#include<string.h>
#include<fstream>
#include<sstream>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<char> vc;
typedef vector<vc> vvc;
typedef set<int> si;
typedef map<string, int> msi;

#define rep(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define repb(i, a, b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

#define pvi(c) tr(c,i)cout<<(*i)<<" "
#define mp(x,y) make_pair(x,y)
#define all(c) (c).begin(),(c).end()
#define sz(c)  int((c).size())
#define pb(x)  push_back(x)
#define tr(c,i) for(typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define present(c,x) ((c).find(x)!=(c).end())
#define cpresent(c,x) (find(all(c),x) !=(c).end())
#define MOD 1000000007

ifstream in("laser_maze.txt");
ofstream out("out.txt");

vvc grid;
vector<vvi> dp;
int sx,sy,gx,gy,m,n;

bool turret(int i, int j)
{
    if(grid[i][j]=='v' || grid[i][j]=='^' || grid[i][j]=='<' || grid[i][j]=='>')
    return true;
    return false;
}
int tr_cnt(int i, int j, int c)
{
    int cnt;
    if(grid[i][j]=='<')cnt=0;
    else if(grid[i][j]=='v')cnt=1;
    else if(grid[i][j]=='>')cnt=2;
    else cnt=3;
    return (cnt+c)%4;
}
bool killed(int i, int j, int c)
{
    int k=i+1;
    while(k<m && !(grid[k][j]=='#'))
    {
        if(turret(k,j))
        {
            if(tr_cnt(k,j,c)==3)return true;
            break;
        }
        k++;
    }
    k=i-1;
    while(k>=0 && !(grid[k][j]=='#'))
    {
        if(turret(k,j))
        {
            if(tr_cnt(k,j,c)==1)return true;
            break;
        }
        k--;
    }
    k=j+1;
    while(k<n && !(grid[i][k]=='#'))
    {
        if(turret(i,k))
        {
            if(tr_cnt(i,k,c)==0)return true;
            break;
        }
        k++;
    }
    k=j-1;
    while(k>=0 && !(grid[i][k]=='#'))
    {
        if(turret(i,k))
        {
            if(tr_cnt(i,k,c)==2)return true;
            break;
        }
        k--;
    }
    return false;
}
int find(int i, int j, int c)
{
    //cout<<i<<" "<<j<<" "<<c<<endl;
    if(i<0 || i>m-1 || j<0 || j>n-1  || dp[i][j][c]==2*INF)return INF;
    if(dp[i][j][c]!=INF)return dp[i][j][c];
    if(grid[i][j]=='#' || turret(i,j))return dp[i][j][c]=INF;
    if(killed(i,j,c))
    {
        //cout<<i<<" "<<j<<" "<<c<<endl;
        return dp[i][j][c]=INF;
    }
    if(i==gx && j==gy)return dp[i][j][c]=0;
    int mn=INF;
    dp[i][j][c]=2*INF;
    mn = 1+min(find(i+1,j,(c+1)%4),min(find(i-1,j,(c+1)%4),min(find(i,j+1,(c+1)%4),find(i,j-1,(c+1)%4))));
    return dp[i][j][c]=mn;
}
int main()
{
    int t;
    in>>t;
    rep(l,1,t)
    {
        in>>m>>n;
        grid.clear();
        grid.resize(m,vc(n));
        dp.clear();
        dp.resize(m,vvi(n,vi(4,INF)));
        rep(i,0,m-1)rep(j,0,n-1)
        {
            in>>grid[i][j];
            if(grid[i][j]=='G')
            {
                gx = i;
                gy = j;
            }
            if(grid[i][j]=='S')
            {
                sx = i;
                sy = j;
            }
        }
        out<<"Case #"<<l<<": ";
        int ans = 1+min(find(sx+1,sy,1),min(find(sx-1,sy,1),min(find(sx,sy+1,1),find(sx,sy-1,1))));
        if(ans>=INF)out<<"impossible\n";
        else out<<ans<<endl;
        //cout<<dp[sx][sy][0]<<" "<<dp[sx][sy+1][1]<<" "<<dp[sx][sy+2][2]<<dp[sx][sy+3][3]<<endl;
        /*rep(i,0,m-1)
        {
            rep(j,0,n-1)cout<<dp[i][j][0]<<" ";
            cout<<endl;
        }
        rep(i,0,m-1)
        {
            rep(j,0,n-1)cout<<dp[i][j][1]<<" ";
            cout<<endl;
        }
        rep(i,0,m-1)
        {
            rep(j,0,n-1)cout<<dp[i][j][2]<<" ";
            cout<<endl;
        }
        rep(i,0,m-1)
        {
            rep(j,0,n-1)cout<<dp[i][j][3]<<" ";
            cout<<endl;
        }*/
    }
}

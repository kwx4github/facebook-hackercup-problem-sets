/*
author:ljy
university:South China Agricultural University
language:C++
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int inf = 0x7fffffff;
const double eps = 1e-9;
const double PI = acos(-1.0);
const int N = 110;
const int diry[]={-1,0,1,0};///вСиосроб
const int dirx[]={0,-1,0,1};

struct status
{
    int x,y,index;
    status(){}
    status(int x,int y,int index)
    {
        push(x,y,index);
    }
    void push(int x,int y,int index)
    {
        this->x=x;
        this->y=y;
        this->index=index;
    }
}start,ending;
int cas,n,m;
char ch[N][N];
bool G[N][N][4];
int dp[N][N][4];

bool outOfBounds(int x,int y)
{
    if(x>n)
        return true;
    if(y>m)
        return true;
    if(x<0)
        return true;
    if(y<0)
        return true;
    return false;
}

void changeCh()
{
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            switch(ch[i][j])
            {
            case '^':
                ch[i][j]='>';
                break;
            case '>':
                ch[i][j]='v';
                break;
            case 'v':
                ch[i][j]='<';
                break;
            case '<':
                ch[i][j]='^';
                break;
            default:
                break;
            }
        }
    }
}

void buildGraph(int index)
{
    int type;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            type=-1;
            switch(ch[i][j])
            {
            case '#':
                G[i][j][index]=false;
                break;
            case '<':
                G[i][j][index]=false;
                type=0;
                break;
            case '^':
                G[i][j][index]=false;
                type=1;
                break;
            case '>':
                G[i][j][index]=false;
                type=2;
                break;
            case 'v':
                G[i][j][index]=false;
                type=3;
                break;
            default:
                break;
            }
            if(type!=-1)
            {
                int x=i+dirx[type],y=j+diry[type];
                while(ch[x][y]!='#')
                {
                    G[x][y][index]=false;
                    x+=dirx[type];
                    y+=diry[type];
                }
            }
        }
    }
}

int bfs()
{
    queue<status> Q;
    dp[start.x][start.y][0]=1;
    Q.push(start);
    while(!Q.empty())
    {
        int X=Q.front().x,Y=Q.front().y,Index=Q.front().index;Q.pop();
//        printf("x=%d,y=%d,index=%d,res=%d\n",X,Y,Index,dp[X][Y][Index]);
        if(X==ending.x&&Y==ending.y)
            return dp[X][Y][Index]-1;
        for(int i=0;i<4;i++)
        {
            int x=X+dirx[i],y=Y+diry[i],index=(Index+1)%4;
            if(dp[x][y][index])continue;
            if(!G[x][y][index])continue;
            dp[x][y][index]=dp[X][Y][Index]+1;
            Q.push(status(x,y,index));
        }
    }
    return -1;
}

void solve()
{
    memset(dp,0,sizeof dp);
    memset(G,0,sizeof G);
    scanf("%d%d",&n,&m);
    for(int i=0;i<=n+1;i++)
        ch[i][0]=ch[i][m+1]='#';
    for(int i=0;i<=m+1;i++)
        ch[0][i]=ch[n+1][i]='#';
    for(int i=1;i<=n;i++)
    {
        getchar();
        for(int j=1;j<=m;j++)
        {
            ch[i][j]=getchar();
            if(ch[i][j]=='S')start.push(i,j,0);
            if(ch[i][j]=='G')ending.push(i,j,0);
            for(int k=0;k<4;k++)
                G[i][j][k]=true;
        }
    }


    for(int i=0;i<4;i++)
    {
        buildGraph(i);
        changeCh();
    }

//    for(int k=0;k<4;k++)
//    {
//        for(int i=0;i<=n+1;i++)
//        {
//            for(int j=0;j<=m+1;j++)
//                printf("%d",G[i][j][k]);
//            putchar('\n');
//        }
//        puts("");
//    }
    int ans=bfs();
    printf("Case #%d: ",cas);
    if(~ans)
        printf("%d\n",ans);
    else
        puts("impossible");
}

int main()
{
    #ifdef LOCAL
        freopen("in","r",stdin);
        freopen("out","w",stdout);
    #endif
    int t;
    scanf("%d",&t);
    for(cas=1;cas<=t;cas++)
        solve();
    return 0;
}

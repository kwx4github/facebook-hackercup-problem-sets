#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>
#include <cstring>

#define NMAX 110

using namespace std;

struct node{
	int i,j,t;
};

const int dir[4][2] = {{-1,0}, {0,1}, {1,0}, {0,-1}  };

int bl[NMAX][NMAX][4];
int grid[NMAX][NMAX];
int visited[NMAX][NMAX][4];
int dist[NMAX][NMAX][4];

node Q[NMAX*NMAX*4];
int H,T;

int M,N;

int tarx,tary;

int bfs(node src){
	node u,v;
	int i,ds,t;

	H = T = 0;
	memset(visited,0,sizeof(visited));


	Q[T++] = src;
	visited[src.i][src.j][src.t] = 1;
	dist[src.i][src.j][src.t] = 0;

	while(H < T){

		v = Q[H++];

		ds = dist[v.i][v.j][v.t];
		if(v.i == tarx && v.j == tary) return ds;

		t = (v.t+1)%4;

		for(i = 0; i < 4; ++i){
			u.i = v.i+dir[i][0], u.j = v.j+dir[i][1];
			u.t = t;

			if(u.i < 0 || u.i >= M || u.j < 0 || u.j >= N) continue;
			if(grid[u.i][u.j] >= 0 || visited[u.i][u.j][u.t] || bl[u.i][u.j][u.t]) continue;
			visited[u.i][u.j][u.t] = 1;
			dist[u.i][u.j][u.t] = ds+1;
			Q[T++] = u;
		}
	}

	return -1;
}

void init(){
	int i,j,ti,tj,time,d;

	for(i = 0; i < M; ++i){
		for(j = 0 ; j < N; ++j){
			if(grid[i][j] < 0 || grid[i][j] > 3) continue;
			d = grid[i][j];


			for(time = 0; time < 4; ++time,++d){
				d %= 4;

				ti = i, tj = j;
				ti += dir[d][0], tj += dir[d][1];

				while(ti >= 0 && tj >= 0 && ti < M && tj < N){
					if(grid[ti][tj] > 0) break;
					bl[ti][tj][time] = 1;
					ti += dir[d][0], tj += dir[d][1];
				}
			}
		}
	}
}

int Ts;
char str[NMAX];

int main(){

	int t,i,j,x,y,ds;
	node src;

	scanf("%d",&Ts);

	for(t = 1; t <= Ts; ++t){
		memset(bl,0,sizeof(bl));

		scanf("%d%d",&M,&N);

		for(i = 0; i < M; ++i){
			scanf("%s",str);
			for(j = 0; j < N; ++j){
				if(str[j] == 'S'){
					x = i, y = j;
					str[j] = '.';
				}

				if(str[j] == 'G'){
					tarx = i, tary = j;
					str[j] = '.';
				}

				if(str[j] == '.'){
					grid[i][j] = -1;
					continue;
				}

				if(str[j] == '#'){
					grid[i][j] = 4;
					continue;
				}

				if(str[j] == '^') grid[i][j] = 0;
				if(str[j] == '>') grid[i][j] = 1;
				if(str[j] == 'v') grid[i][j] = 2;
				if(str[j] == '<') grid[i][j] = 3;
			}
		}

		init();
		src.i = x, src.j = y, src.t = 0;

		ds = bfs(src);

		printf("Case #%d: ",t);
		if(ds < 0) printf("impossible\n");
		else printf("%d\n",ds);
	}


	return 0;
}

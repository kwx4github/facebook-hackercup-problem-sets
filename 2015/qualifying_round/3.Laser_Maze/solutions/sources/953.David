#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <bitset>
#include <cmath>
#include <queue>
#include <map>
#include <set>

#define For(i, a, b) for(int i=(a); i<(b); ++i)
#define INF (1<<30)
#define MP make_pair

using namespace std;

typedef pair <int, int> ii;
typedef long long ll;

struct nodo
{
	int i, j, p;
	nodo(int _i, int _j, int _p)
	{
		i = _i;
		j = _j;
		p = _p;
	}
	nodo(){}
};

char f[] = { '<', '^', '>', 'v' };
char maze[105][105];
int dX[] = {1, 0, -1, 0}, dY[] = {0, 1, 0, -1};
bool visit[105][105][4], muere[105][105][4];
int n, m;

void ataca(int i, int j, int t, int x)
{
	if (t == 0)
		for(int k = j-1; k >= 0; k--)
		{
			if (maze[i][k] != 'S' and maze[i][k] != '.' and maze[i][k] != 'G')
				break;

			muere[i][k][x] = true;
		}
	else if (t == 1)
		for(int k = i-1; k >= 0; k--)
		{
			if (maze[k][j] != 'S' and maze[k][j] != '.' and maze[k][j] != 'G')
				break;

			muere[k][j][x] = true;
		}
	else if (t == 2)
		for(int k = j+1; k < m; k++)
		{
			if (maze[i][k] != 'S' and maze[i][k] != '.' and maze[i][k] != 'G')
				break;

			muere[i][k][x] = true;
		}
	else if (t == 3)
		for(int k = i+1; k < n; k++)
		{
			if (maze[k][j] != 'S' and maze[k][j] != '.' and maze[k][j] != 'G')
				break;

			muere[k][j][x] = true;
		}
}

void marca(int i, int j)
{
	int k;

	if (maze[i][j] == '<')
		k = 0;
	else if (maze[i][j] == '^')
		k = 1;
	else if (maze[i][j] == '>')
		k = 2;
	else if (maze[i][j] == 'v')
		k = 3;
	else
		return;

	For(x, 0, 4)
		ataca(i, j, (k+x)%4, x);
}

int bfs(int i_s, int j_s, int i_f, int j_f)
{
	queue <nodo> cola;
	cola.push(nodo(i_s, j_s, 0));
	visit[i_s][j_s][0] = true;

	while (cola.empty() == false)
	{
		nodo act = cola.front(); cola.pop();

		//printf("%d %d %d\n", act.i, act.j, act.p);

		if (act.i == i_f and act.j == j_f)
			return act.p;

		For(k, 0, 4)
		{
			int i_n = act.i + dY[k], j_n = act.j + dX[k];

			if (i_n < 0 or j_n < 0 or i_n >= n or j_n >= m or 
				maze[i_n][j_n] == '#' or 
				maze[i_n][j_n] == '<' or maze[i_n][j_n] == '^' or maze[i_n][j_n] == '>' or maze[i_n][j_n] == 'v' or 
				visit[i_n][j_n][(act.p+1)%4] or
				muere[i_n][j_n][(act.p+1)%4])
				continue;

			cola.push(nodo(i_n, j_n, act.p+1));
			visit[i_n][j_n][(act.p+1)%4] = true; 
		}
	}

	return -1;
}

int main()
{
	int tt, caso = 1;
	scanf("%d", &tt);

	while (tt--)
	{
		memset(visit, 0, sizeof visit);
		memset(muere, 0, sizeof muere);

		scanf("%d %d", &n, &m);
		For(i, 0, n)
			scanf("%s", maze[i]);

		int i_s, j_s, i_f, j_f;
		For(i, 0, n)
			For(j, 0, m)
			{
				if (maze[i][j] == 'S')
					i_s = i, j_s = j;
				else if (maze[i][j] == 'G')
					i_f = i, j_f = j;

				marca(i, j);
			}	

		/*For(i, 0, n)
		{
			For(j, 0, m)
				printf("%d", muere[i][j][0]);
			printf("\n");
		}*/

		int ans = bfs(i_s, j_s, i_f, j_f);
		printf("Case #%d: ", caso++);
		if (ans == -1)
			printf("impossible\n");
		else
			printf("%d\n", ans);
	}
	return 0;
}
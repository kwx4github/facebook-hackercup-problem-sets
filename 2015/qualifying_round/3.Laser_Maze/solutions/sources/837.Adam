#include<stdio.h>
#include<iostream>
#include<vector>
#include<cmath>
#include<algorithm>
#include<memory.h>
#include<map>
#include<set>
#include<queue>
#include<list>
#include<sstream>
#define mp make_pair
#define pb push_back      
#define F first
#define S second
#define SS stringstream
#define sqr(x) ((x)*(x))
#define m0(x) memset(x,0,sizeof(x))
#define m1(x) memset(x,63,sizeof(x))
#define CC(x) cout << (x) << endl
#define pw(x) (1ll<<(x))
#define M 1000000007
#define N 111111
using namespace std;
typedef pair<int,int> pt;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

string dir = "^>v<";

string a[333];
int bad[4][333][333];
int f[4][333][333];

int q[5000555];

int main(){
	freopen("1.in","r",stdin);	
	freopen("1.out","w",stdout);
	int T;
	cin >> T;
	for (int tt = 1; tt <= T; tt++) {
		int n, m;
		cin >> n >> m;

		for (int i = 0; i < n; i++) cin >> a[i];

		int sx, sy;
		int fx, fy;

		for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) {
			if (a[i][j] == 'S') {
				sx = i;
				sy = j;
				a[i][j] = '.';
			}
			if (a[i][j] == 'G') {
				fx = i;
				fy = j;
				a[i][j] = '.';
			}

		}

		for (int w = 0; w < 4; w++) {
			for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) bad[w][i][j] = 0;

			for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) if (dir.find(a[i][j]) < dir.size()) {
				int d = dir.find(a[i][j]);
				d = (d + w) % 4;

				int x = i + dx[d];
				int y = j + dy[d];
				while (x >= 0 && x < n && y >= 0 && y < m) {
					if (a[x][y] != '.') break;
					bad[w][x][y] = 1;
					x += dx[d];
					y += dy[d];					
				}
			}
		}

		for (int w = 0; w < 4; w++) for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) f[w][i][j] = 1e9;
		f[0][sx][sy] = 0;

		int q1 = 0, q2 = 0;

		q[q1++] = 0;
		q[q1++] = sx;
		q[q1++] = sy;

		while (q1 != q2) {
			int w = q[q2++];
			int x = q[q2++];
			int y = q[q2++];

			for (int i = 0; i < 4; i++) {
				int ww = (w + 1) % 4;
				int xx = x + dx[i];
				int yy = y + dy[i];
				if (xx < 0 || xx >= n || yy < 0 || yy >= m) continue;
				if (a[xx][yy] != '.') continue;
				if (bad[ww][xx][yy]) continue;
				if (f[ww][xx][yy] < 1e9) continue;

				f[ww][xx][yy] = f[w][x][y] + 1;
				q[q1++] = ww;
				q[q1++] = xx;
				q[q1++] = yy;
			}

		}

		int ans = 1e9;
		for (int i = 0; i < 4; i++) ans = min(ans, f[i][fx][fy]);


		cout << "Case #" << tt << ": ";

		if (ans == 1e9) puts("impossible"); else cout << ans << endl;


	}
	return 0;
}
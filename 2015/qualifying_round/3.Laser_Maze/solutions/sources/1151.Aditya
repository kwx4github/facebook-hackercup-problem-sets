#include <iostream>
#include <queue>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <stack>
#include <iomanip>

#define FOR(i,x,y) for(int i =(int)(x); i<(int)(y); i++)
#define REP(i, N) FOR(i, 0, N)
#define SZ(x) (int)x.size()

using namespace std;

typedef vector<int> vin;
typedef pair<int, int> pii;
typedef vector<pair<int, int>> vpii;
typedef vector<vector<int>> vvin;

int map[105][105];
bool visited[105][105][4];
int m, n, sx, sy, gx, gy;

enum {
    UP, RIGHT, DOWN, LEFT, WALL, EMPTY, START, GOAL
};

struct node {
    int r, c, state;
    node (int rr, int cc, int ss) { r = rr; c = cc; state = ss; }
};

bool checkNext (int r, int c, int state) {
    if (r < 0 || r >= m) return false;
    if (c < 0 || c >= n) return false;
    if (visited[r][c][state % 4]) return false;
    if (map[r][c] < EMPTY) return false;

    for (int i = r; i >= 0; i--) {
        if (map[i][c] < WALL && (map[i][c] + state) % 4 == DOWN) return false;
        else if (map[i][c] <= WALL) break;
    }
    for (int i = r; i < m; i++) {
        if (map[i][c] < WALL && (map[i][c] + state) % 4 == UP) return false;
        else if (map[i][c] <= WALL) break;
    }
    for (int i = c; i >= 0; i--) {
        if (map[r][i] < WALL && (map[r][i] + state) % 4 == RIGHT) return false;
        else if (map[r][i] <= WALL) break;
    }
    for (int i = c; i < n; i++) {
        if (map[r][i] < WALL && (map[r][i] + state) % 4 == LEFT) return false;
        else if (map[r][i] <= WALL) break;
    }

    return true;
}

int solve () {
    queue<node> q;
    REP (k, 4) REP (i, 101) REP (j, 101) visited[i][j][k] = false;

    q.push(node(sx, sy, 0));
    visited[sx][sy][0] = true;
    int inf = 100000000;
    int count = inf;

    while (SZ(q)) {
        node &n = q.front(); q.pop();
        if (map[n.r][n.c] == GOAL) {
            count = min(count, n.state);
            continue;
        }
        int nextState = (n.state + 1) % 4;

        if (checkNext (n.r - 1, n.c, nextState)) {
            q.push(node(n.r - 1, n.c, n.state+1));
            visited[n.r-1][n.c][nextState] = true;
        }

        if (checkNext (n.r + 1, n.c, nextState)) {
            q.push(node(n.r + 1, n.c, n.state+1));
            visited[n.r+1][n.c][nextState] = true;
        }

        if (checkNext (n.r, n.c - 1, nextState)) {
            q.push(node(n.r, n.c-1, n.state+1));
            visited[n.r][n.c-1][nextState] = true;
        }

        if (checkNext (n.r, n.c + 1, nextState)) {
            q.push(node(n.r, n.c+1, n.state+1));
            visited[n.r][n.c+1][nextState] = true;
        }
    }
    return count == inf ? -1 : count;
}

int main (int argc, char *args[]) {
    freopen("input.in", "rt", stdin);
    freopen("output.out", "wt", stdout);

    int T; cin >> T;
    FOR (i, 1, T+1) {
        cin >> m >> n;

        REP (i, m) REP (j, n) {
            char c; cin >> c;
            if (c == 'S') { sx = i; sy = j; map[i][j] = START; }
            if (c == 'G') { gx = i; gy = j; map[i][j] = GOAL; }
            if (c == '.') map[i][j] = EMPTY;
            if (c == '#') map[i][j] = WALL;
            if (c == '^') map[i][j] = UP;
            if (c == '>') map[i][j] = RIGHT;
            if (c == 'v') map[i][j] = DOWN;
            if (c == '<') map[i][j] = LEFT;
        }
        int s = solve();
        cout << "Case #" << i << ": ";
        if (s == -1) cout << "impossible\n";
        else cout << s << "\n";
    }
    return 0;
}

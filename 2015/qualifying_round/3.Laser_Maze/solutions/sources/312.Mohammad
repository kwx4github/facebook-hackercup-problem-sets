/*Author : Md. Al- Amin
           20th batch
           Dept. of CSE, SUST*/
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#include<stack>
#include<map>
#include<set>
#include<queue>
#include<vector>
#define pi (2*acos(0))
#define SF scanf
#define SFd1(a) scanf("%d",&a)
#define SFd2(a,b) scanf("%d%d",&a,&b)
#define SFd3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define PF printf
#define inf 99999999
#define eps 0.00000001
#define ll long long
#define ull long long unsigned
#define int_max 2147483647
#define int_min -2147483648
#define long_max 9223372036854775807
#define long_min -9223372036854775808
#define fr(i,n) for(i=0;i<n;i++)
#define ms(dp,a) memset(dp,a,sizeof(dp))
#define dist(x1,y1,x2,y2) sqrt( ((x2-x1)*(x2-x1)) + ((y2-y1)*(y2-y1)) )
#define PB push_back
using namespace std;
//int rr[]={1,2,-1,-2,1,2,-1,-2};
//int cc[]={2,1,2,1,-2,-1,-2,-1};
int rr[]={0,0,1,-1};
int cc[]={-1,1,0,0};

struct node{
int x,y,val,now;
};

queue<node>q;
node det,u;
int stat[6][105][105],p,t,row,col,st_x,st_y,en_x,en_y;
char arr[6][105][105],maze[105][105];

void bfs(void)
{
    int i;
    memset(stat,0,sizeof(stat));
    while(!q.empty())
        q.pop();

    det.x=st_x;
    det.y=st_y;
    det.val=0;
    det.now=1;
    q.push(det);
    stat[1][det.x][det.y]=1;
    while(!q.empty())
    {
        u=q.front();
        q.pop();
        det.now=u.now+1;
        det.val=u.val+1;
        if(det.now==5)
            det.now=1;
        for(i=0;i<4;i++)
        {
            det.x=u.x+rr[i];
            det.y=u.y+cc[i];
            if(det.x>=1&&det.y>=1&&det.x<=row&&det.y<=col)
            {
                if(stat[det.now][det.x][det.y]==0&&arr[det.now][det.x][det.y]=='.')
                {
                    stat[det.now][det.x][det.y]=1;
                    if(maze[det.x][det.y]=='G')
                    {
                        printf("Case #%d: %d\n",p,det.val);
                        return;
                    }
                    q.push(det);
                }
            }
        }
    }
    printf("Case #%d: impossible\n",p);
    return;
}

int main()
{
    int i,j,k,kk;
    freopen("laser_maze.txt","r",stdin);
    freopen("laser_maze_output.txt","w",stdout);

    scanf(" %d",&t);

    for(p=1; p<=t; p++)
    {
        scanf(" %d %d",&row,&col);
        getchar();
        for(i=1; i<=row; i++)
        {
            for(j=1; j<=col; j++)
            {
                scanf("%c",&maze[i][j]);
                if(maze[i][j]=='S')
                {
                    st_x=i;
                    st_y=j;
                    for(k=1; k<=4; k++)
                        arr[k][i][j]='.';
                }
                else if(maze[i][j]=='G')
                {
                    en_x=i;
                    en_y=j;
                    for(k=1; k<=4; k++)
                        arr[k][i][j]='.';
                }
                else
                {
                    for(k=1; k<=4; k++)
                        arr[k][i][j]=maze[i][j];
                }
            }
            getchar();
        }
        for(k=1; k<=4; k++)
        {
            for(i=1; i<=row; i++)
            {
                for(j=1; j<=col; j++)
                {
                    if(maze[i][j]=='^')
                    {
                        arr[k][i][j]=maze[i][j];
                        for(kk=i-1; kk>=1; kk--)
                        {
                            if(maze[kk][j]=='^'||maze[kk][j]=='>'||maze[kk][j]=='v'||maze[kk][j]=='<'||maze[kk][j]=='#')
                                break;
                            arr[k][kk][j]='*';
                        }
                        maze[i][j]='>';
                    }
                    else if(maze[i][j]=='>')
                    {
                        arr[k][i][j]=maze[i][j];
                        for(kk=j+1; kk<=col; kk++)
                        {
                            if(maze[i][kk]=='^'||maze[i][kk]=='>'||maze[i][kk]=='v'||maze[i][kk]=='<'||maze[i][kk]=='#')
                                break;
                            arr[k][i][kk]='*';
                        }
                        maze[i][j]='v';
                    }
                    else if(maze[i][j]=='v')
                    {
                        arr[k][i][j]=maze[i][j];
                        for(kk=i+1; kk<=row; kk++)
                        {
                            if(maze[kk][j]=='^'||maze[kk][j]=='>'||maze[kk][j]=='v'||maze[kk][j]=='<'||maze[kk][j]=='#')
                                break;
                            arr[k][kk][j]='*';
                        }
                        maze[i][j]='<';
                    }
                    else if(maze[i][j]=='<')
                    {
                        arr[k][i][j]=maze[i][j];
                        for(kk=j-1; kk>=1; kk--)
                        {
                            if(maze[i][kk]=='^'||maze[i][kk]=='>'||maze[i][kk]=='v'||maze[i][kk]=='<'||maze[i][kk]=='#')
                                break;
                            arr[k][i][kk]='*';
                        }
                        maze[i][j]='^';
                    }
                }
            }
        }

        /*for(i=1;i<=row;i++)
            {
                for(j=1;j<=col;j++)
                {
                    printf("%c",maze[i][j]);
                }
                printf("\n");
            }
            printf("\n");
            printf("\n");
        for(k=1;k<=4;k++)
        {
            for(i=1;i<=row;i++)
            {
                for(j=1;j<=col;j++)
                {
                    printf("%c",arr[k][i][j]);
                }
                printf("\n");
            }
            printf("\n");
            printf("\n");
        }*/

        /*if(arr[1][st_x][st_y]=='*')
            {printf("Case #%d: impossible\n",p);
            continue;}*/
        bfs();
    }
    return 0;
}





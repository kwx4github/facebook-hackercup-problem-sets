#include<cstdio>
#include<iostream>
#include<string>
#include<cstring>
#include<deque>
#include<algorithm>
#define INF 999999999
using namespace std;
int ANS,T,N,A,B,M,S=0,counter=0;
char map[120][120];
char Dire[10]={'^','>','v','<','^','>','v'}; 
bool flag[120][120][4];
bool Leishe[120][120][4];
class woca
{
	public:
		int x,y,step;
};
class woqu
{
	public:
		int x,y;
		char s;
}F[20005];
void Mark(char temp,int X,int Y,int ceng)
{                           //标记函数
	int i,j;
	if(temp=='^')
		for(i=X-1;i>=1;i--)
		{
			if(map[i][Y]=='#'||map[i][Y]=='^'||map[i][Y]=='>'||map[i][Y]=='v'||map[i][Y]=='<')
				break;
			Leishe[i][Y][ceng]=1;
		}	
	if(temp=='<')
		for(i=Y-1;i>=1;i--)
		{
			if(map[X][i]=='#'||map[X][i]=='^'||map[X][i]=='>'||map[X][i]=='v'||map[X][i]=='<')
				break;
			Leishe[X][i][ceng]=1;
		}
	if(temp=='v')
		for(i=X+1;i<=N;i--)
		{
			if(map[i][Y]=='#'||map[i][Y]=='^'||map[i][Y]=='>'||map[i][Y]=='v'||map[i][Y]=='<')
				break;
			Leishe[i][Y][ceng]=1;
		}
	if(temp=='>')
		for(i=Y+1;i<=M;i--)
		{
			if(map[X][i]=='#'||map[X][i]=='^'||map[X][i]=='>'||map[X][i]=='v'||map[X][i]=='<')
				break;
			Leishe[X][i][ceng]=1;
		}					
}
void BFS()//开始搜索 
{
	woca temp;temp.x=A;temp.y=B;temp.step=0;
	woca P;char ss;
	deque<woca> Q;
	Q.push_back(temp);
	while(!Q.empty())
	{
		temp=Q.at(0);Q.pop_front();
		if(temp.x-1>=1&&Leishe[temp.x-1][temp.y][(temp.step+1)%4]==0&&flag[temp.x-1][temp.y][(temp.step+1)%4]==0)
		{
			ss=map[temp.x-1][temp.y];
			if(ss=='G')
			{
				if(temp.step+1<ANS) ANS=temp.step+1;
			}
			if(ss=='.'||ss=='S')
			{
				P.x=temp.x-1;P.y=temp.y;P.step=temp.step+1;
				flag[P.x][P.y][(P.step)%4]=1;
				Q.push_back(P);
			}
		}
		if(temp.y-1>=1&&Leishe[temp.x][temp.y-1][(temp.step+1)%4]==0&&flag[temp.x][temp.y-1][(temp.step+1)%4]==0)
		{
			ss=map[temp.x][temp.y-1];
			if(ss=='G')
			{
				if(temp.step+1<ANS) ANS=temp.step+1;
			}
			if(ss=='.'||ss=='S')
			{
				P.x=temp.x;P.y=temp.y-1;P.step=temp.step+1;
				flag[P.x][P.y][(P.step)%4]=1;
				Q.push_back(P);
			}
		}
		if(temp.x+1<=N&&Leishe[temp.x+1][temp.y][(temp.step+1)%4]==0&&flag[temp.x+1][temp.y][(temp.step+1)%4]==0)
		{
			ss=map[temp.x+1][temp.y];
			if(ss=='G')
			{
				if(temp.step+1<ANS) ANS=temp.step+1;
			}
			if(ss=='.'||ss=='S')
			{
				P.x=temp.x+1;P.y=temp.y;P.step=temp.step+1;
				flag[P.x][P.y][(P.step)%4]=1;
				Q.push_back(P);
			}
		}
		if(temp.y+1<=M&&Leishe[temp.x][temp.y+1][(temp.step+1)%4]==0&&flag[temp.x][temp.y+1][(temp.step+1)%4]==0)
		{
			ss=map[temp.x][temp.y+1];
			if(ss=='G')
			{
				if(temp.step+1<ANS) ANS=temp.step+1;
			}
			if(ss=='.'||ss=='S')
			{
				P.x=temp.x;P.y=temp.y+1;P.step=temp.step+1;
				flag[P.x][P.y][(P.step)%4]=1;
				Q.push_back(P);
			}
		}						
	}
}
int main()
{
	int i,j;string temp;
	int sum;
	cin>>T;
	while(T>0)
	{
		memset(flag,0,sizeof(flag));
		memset(Leishe,0,sizeof(Leishe));
		T--;cin>>N>>M;ANS=INF;counter++;S=0;
		for(i=1;i<=N;i++)
		{                                      //读入
			cin>>temp;
			for(j=0;j<temp.length();j++)
			{
				map[i][j+1]=temp[j];
				if(temp[j]=='S')
				{
					A=i;B=j+1;//起点 
				}
				if(temp[j]=='<')
				{
					S++;F[S].x=i;F[S].y=j+1;F[S].s='<';
				}
				if(temp[j]=='>')
				{
					S++;F[S].x=i;F[S].y=j+1;F[S].s='>';
				}
				if(temp[j]=='v')
				{
					S++;F[S].x=i;F[S].y=j+1;F[S].s='v';
				}
				if(temp[j]=='^')
				{
					S++;F[S].x=i;F[S].y=j+1;F[S].s='^';
				}
			}
		}
		for(i=1;i<=S;i++)
		{                           //预处理激光模式
			sum=0;
			if(F[i].s=='^')
			{
				for(j=1;j<=4;j++)
				{
					sum++;sum%=4;
					Mark(Dire[j],F[i].x,F[i].y,sum);
				}
			}
			if(F[i].s=='>')
			{
				for(j=2;j<=5;j++)
				{
					sum++;sum%=4;
					Mark(Dire[j],F[i].x,F[i].y,sum);
				}
			}
			if(F[i].s=='v')
			{
				for(j=3;j<=6;j++)
				{
					sum++;sum%=4;
					Mark(Dire[j],F[i].x,F[i].y,sum);
				}
			}
			if(F[i].s=='<')
			{
				for(j=0;j<=3;j++)
				{
					sum++;sum%=4;
					Mark(Dire[j],F[i].x,F[i].y,sum);
				}				
			}			
		}
		BFS();
		if(ANS<INF)
			cout<<"Case #"<<counter<<": "<<ANS<<endl;
		else
			cout<<"Case #"<<counter<<": impossible"<<endl;	
	}
	return 0;
}

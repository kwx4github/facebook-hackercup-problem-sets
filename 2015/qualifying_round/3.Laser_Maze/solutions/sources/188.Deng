#include<stdio.h>
#include<string.h>
#include<queue>
using namespace std;
int dis[101][101][4];
char map[101][101];
int danger[101][101][4];
int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};
int n,m;
struct node
{
    node () {}
    node (int _x,int _y,int _t) {x=_x;y=_y;t=_t;}
    int x,y,t;
};
bool reach(int x,int y)
{
    return (x>=0&&x<n&&y>=0&&y<m&&map[x][y]=='.');
}
void SPFA(int sx,int sy)
{
    dis[sx][sy][0] = 0;
    queue<node> Q;
    Q.push(node(sx,sy,0));
    int x,y,t;
    int xx,yy,tt;
    while(!Q.empty()){
        x = Q.front().x;
        y = Q.front().y;
        t = Q.front().t;
        Q.pop();
        for(int k=0;k<4;k++){
            xx = x+dx[k];
            yy = y+dy[k];
            tt = (t+1)%4;
            if(reach(xx,yy)&&!danger[xx][yy][tt]){
                if(dis[xx][yy][tt]<0||dis[x][y][t]+1<dis[xx][yy][tt]){
                    dis[xx][yy][tt] =dis[x][y][t]+1;
                    Q.push(node(xx,yy,tt));
                }
            }
        }
    }
}
int main ()
{
    int T;
    int sx,sy,tx,ty;
    scanf("%d",&T);
    for(int _ = 1;_<=T;_++){
        scanf("%d%d",&n,&m);
        for(int i =0;i<n;i++){
            scanf("%s",map[i]);
            for(int j = 0;j<m;j++){
                if(map[i][j]=='S'){
                    sx = i;
                    sy = j;
                    map[i][j]='.';
                }else if(map[i][j]=='G'){
                    tx = i;
                    ty = j;
                    map[i][j]='.';
                }
            }
        }
        memset(danger,0,sizeof(danger));
        memset(dis,-1,sizeof(dis));
        int ori;
        int ni,nj;
        for(int i =0;i<n;i++){
            for(int j =0;j<m;j++){
                ori = -1;
                if(map[i][j]=='^'){
                    ori = 0;
                }
                else if(map[i][j]=='>'){
                    ori = 1;
                }
                else if(map[i][j]=='v'){
                    ori = 2;
                }
                else if(map[i][j]=='<'){
                    ori = 3;
                }
                if(ori==-1) continue;
                for(int k = 0;k<4;k++){
                    int ddx = dx[(ori+k)%4];
                    int ddy = dy[(ori+k)%4];
                    for(ni=i+ddx,nj=j+ddy;reach(ni,nj);ni+=ddx,nj+=ddy){
                        danger[ni][nj][k] = 1;
                    }
                }
            }
        }
        SPFA(sx,sy);
        int ans = -1;
        for(int k =0;k<4;k++){
            if(dis[tx][ty][k]<0) continue;
            if(ans<0||dis[tx][ty][k]<ans){
                ans =dis[tx][ty][k];
            }
        }
        printf("Case #%d: ",_);
        if(ans<0){
            printf("impossible\n");
        }else{
            printf("%d\n",ans);
        }
    }
    return 0;
}
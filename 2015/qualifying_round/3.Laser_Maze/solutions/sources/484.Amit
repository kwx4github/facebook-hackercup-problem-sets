#include<cstdio>
#include<iostream>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<algorithm>
#include<cmath>
#include<cstdlib>
#include<cstring>

#define INF 2000000000
#define INF_LL 2000000000000000000ll
#define MOD_7 1000000007
#define MOD_9 1000000009
#define mp make_pair

typedef long long ll;

using namespace std;


char board[4][103][103];
char grid[103][103];
int vis[4][103][103];
int dir_x[]={1,0,-1,0};
int dir_y[]={0,1,0,-1};

void extend(int idx,int x,int y,int n,int m)
{
     int i;
     //printf("%d\n",idx);
     if(grid[x][y]=='^')
     {
                        board[idx][x][y]='#';
                        for(i=x-1;i>=0;i--)
                        {
                                           if(grid[i][y]!='.' && grid[i][y]!='S' && grid[i][y]!='G')
                                            break;
                                           
                                           board[idx][i][y]='#';
                        }
     }
     else if(grid[x][y]=='v')
     {
          board[idx][x][y]='#';
          for(i=x+1;i<n;i++)
          {
                            if(grid[i][y]!='.' && grid[i][y]!='S' && grid[i][y]!='G')
                             break;
                            
                            board[idx][i][y]='#';
          }
     }
     else if(grid[x][y]=='>')
     {
          board[idx][x][y]='#';
          for(i=y+1;i<m;i++)
          {
                            if(grid[x][i]!='.' && grid[x][i]!='S' && grid[x][i]!='G')
                             break;
                            
                            board[idx][x][i]='#';
          }
     }
     else
     {
         board[idx][x][y]='#';
         for(i=y-1;i>=0;i--)
         {
                            if(grid[x][i]!='.' && grid[x][i]!='S' && grid[x][i]!='G')
                             break;
                            
                            board[idx][x][i]='#';
         }
     }
}
void make_board(int idx,int n,int m)
{
    int i,j;
    
    for(i=0;i<n;i++)
    {
                    for(j=0;j<m;j++)
                    {
                                    board[idx][i][j]=grid[i][j];
                    }
    }
    
    for(i=0;i<n;i++)
    {
                    for(j=0;j<m;j++)
                    {
                                    if(grid[i][j]=='^' || grid[i][j]=='v' || grid[i][j]=='<' || grid[i][j]=='>')
                                    {
                                                       extend(idx,i,j,n,m);
                                    }
                    }
    }
}

int solve(int sx,int sy,int ex,int ey,int n,int m)
{
    int i;
    
    queue<pair<int,pair<int,int> > > q;
    queue<int> val;
    memset(vis,0,sizeof(vis));
    
    q.push(mp(0,mp(sx,sy)));
    val.push(0);
    vis[0][sx][sy]=1;
    
    pair<int,pair<int,int> > p;
    while(!q.empty())
    {
                     p=q.front();
                     q.pop();
                     int d=val.front();
                     val.pop();
                     int idx=p.first;
                     int x=p.second.first;
                     int y=p.second.second;
                     
                     if(x==ex && y==ey)
                      return d;
                     //printf("%d %d\n",x,y);
                     int nidx=(idx+1)%4;
                     
                     for(i=0;i<4;i++)
                     {
                                     int nx=x+dir_x[i];
                                     int ny=y+dir_y[i];
                                     
                                     if(nx>=n || ny>=m || nx<0 || ny<0)
                                      continue;
                                     //printf("%d %d\n",nx,ny);
                                     if(board[nidx][nx][ny]=='.' || board[nidx][nx][ny]=='S' || board[nidx][nx][ny]=='G')
                                     {
                                                                  if(!vis[nidx][nx][ny])
                                                                  {
                                                                                        vis[nidx][nx][ny]=1;
                                                                                        q.push(mp(nidx,mp(nx,ny)));
                                                                                        val.push(d+1);
                                                                  }
                                     }
                     }
    }  
    
    return -1;     
}                 

int main()
{
    int i,j,k,n,m,t;
    
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    scanf("%d",&t);
    int sv=t;
    
    while(t--)
    {
              scanf("%d %d",&n,&m);
              
              for(i=0;i<n;i++)
               scanf("%s",grid[i]);
              
              int sx,sy,ex,ey;
              
              make_board(0,n,m);
              
              for(i=1;i<4;i++)
              {
                              for(j=0;j<n;j++)
                              {
                                              for(k=0;k<m;k++)
                                              {
                                                              if(grid[j][k]=='^')
                                                               grid[j][k]='>';
                                                              else if(grid[j][k]=='>')
                                                               grid[j][k]='v';
                                                              else if(grid[j][k]=='<')
                                                               grid[j][k]='^';
                                                              else if(grid[j][k]=='v')
                                                               grid[j][k]='<';
                                                              
                                                              if(grid[j][k]=='S')
                                                              {
                                                                                 sx=j;
                                                                                 sy=k;
                                                              }
                                                              if(grid[j][k]=='G')
                                                              {
                                                                                 ex=j;
                                                                                 ey=k;
                                                              }
                                                              //if(grid[j][k]!='G' && grid[j][k]!='S' && grid[j][k]!='.' && grid[j][k]!='#')
                                                               //printf("%c\n",grid[j][k]);
                                              }
                              }
                              make_board(i,n,m);
              }
              //printf("%d %d\n",sx,sy);
              int x=solve(sx,sy,ex,ey,n,m);
              if(x==-1)
               printf("Case #%d: impossible\n",sv-t);
              else
               printf("Case #%d: %d\n",sv-t,x);
    }        
    
    //system("pause");
    return 0;
}

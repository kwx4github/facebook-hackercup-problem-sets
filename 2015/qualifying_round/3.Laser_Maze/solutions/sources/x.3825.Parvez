/* Supto
   Dept. Of CSE
   University Of Dhaka
*/
//#include<bits/stdc++.h>
#include <cstdio>
#include <sstream>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <iostream>
#include <fstream>
#include <numeric>
#include <string>
#include <vector>
#include <cstring>
#include <map>
#include <iterator>

#define pb push_back
#define ins insert
#define ff first
#define ss second
#define ll long long int
#define llu long long unsigned
#define sss stringstream
#define oss ostringstream
#define iss istringstream
#define pii pair<int,int>
#define _sq(x) ((x)*(x))
#define lcm(a,b) ((a)*((b)/gcd(a,b)))
#define mem(a) memset(a,0,sizeof(a))
#define _set(a) memset(a,-1,sizeof(a))
#define popcount(n) __builtin_popcount(n)
#define popcountl(n) __builtin_popcountll(n)
#define ctz(x) __builtin_ctz(x) //number of trailing zeroes in a digit
#define ctzl(x) __builtin_ctzll(x)
#define clz(x) __builtin_clz(x)
#define clzl(x) __builtin_clzll(x) //number of leading zeroes in a digit
//If Long Long (mask & (1LL << k))
#define check(mask, k) (mask & (1 << k))
#define set1(mask, k) (mask | (1 << k))
#define set0(mask ,k) (mask & (~(1<<k)))
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)

using namespace std;
#define pi acos(-1.0)
#define inf (1<<30)
#define eps 1e-9
#define MAX 100005
#define MAXL 15

//const ll mod = 1000003;
int dx[] = {0,0,1,-1};
int dy[] = {1,-1,0,0};
//int dx[] = {-1,-1,-1,0,0,1,1,1};
//int dy[] = {-1,0,1,-1,1,-1,0,1};
char maze[105][105];
int n, m, g[105][105];
bool vis[105][105][4];
struct data
{
    int x, y, mv;
    data() {}
    data(int _x, int _y, int _mv) {x = _x, y = _y, mv = _mv;}
};
void fillUp(int r, int c, int v)
{
    for(int i = r-1; i >= 0 && maze[i][c] == '.'; i--) g[i][c] |= (1 << v);
}
void fillDown(int r, int c, int v)
{
    for(int i = r+1; i < m && maze[i][c] == '.'; i++) g[i][c] |= (1 << v);
}
void fillLeft(int r, int c, int v)
{
    for(int i = c-1; i >= 0 && maze[r][i] == '.'; i--) g[r][i] |= (1 << v);
}
void fillRight(int r, int c, int v)
{
    for(int i = c+1; i < n && maze[r][i] == '.'; i++) g[r][i] != (1 << v);
}
void lazerFill(int i, int j)
{
    if(maze[i][j] == '^')
    {
        fillUp(i, j, 0);
        fillLeft(i, j, 1);
        fillDown(i, j, 2);
        fillRight(i, j, 3);
    }
    else if(maze[i][j] == '>')
    {
        fillUp(i, j, 3);
        fillLeft(i, j, 2);
        fillDown(i, j, 1);
        fillRight(i, j, 0);
    }
    else if(maze[i][j] == 'v')
    {
        fillUp(i, j, 2);
        fillLeft(i, j, 1);
        fillDown(i, j, 0);
        fillRight(i, j, 3);
    }
    else
    {
        fillUp(i, j, 1);
        fillLeft(i, j, 0);
        fillDown(i, j, 3);
        fillRight(i, j, 2);
    }
}
bool isValid(int x, int y)
{
    if(x < 0 || x >= m || y < 0 || y >= n) return false;
    return true;
}
int bfs(pii src, pii des)
{
    queue < data > q;
    mem(vis);
    int i, j;
    q.push(data(src.ff, src.ss, 0));
    while(!q.empty())
    {
        data t = q.front();
        q.pop();
        if(t.x == des.ff && t.y == des.ss) return t.mv;
        for(i = 0; i < 4; i++)
        {
            int nx = t.x + dx[i];
            int ny = t.y + dy[i];
            int mv = t.mv+1;
            int rm = mv%4;
            if(!isValid(nx, ny)) continue;
            if(maze[nx][ny] != '.' || (g[nx][ny]&(1<<rm))) continue;
            if(vis[nx][ny][rm] == 0)
            {
                vis[nx][ny][rm] = 1;
                q.push(data(nx, ny, mv));
            }
        }
    }
    return -1;
}
int main()
{
    READ("laser_maze.txt");
    WRITE("output.txt");
    //ios_base::sync_with_stdio(false);
    int ncase, tcase = 1, i, j;
    scanf("%d", &ncase);
    while(ncase--)
    {
        scanf("%d %d", &m, &n);
        for(i = 0; i < m; i++) scanf("%s", maze[i]);
        pii src, des;
        mem(g);
        for(i = 0; i < m; i++)
        {
            for(j = 0; j < n; j++)
            {
                if(maze[i][j] == 'S') src = make_pair(i, j), maze[i][j] = '.';
                else if(maze[i][j] == 'G') des = make_pair(i, j), maze[i][j] = '.';
                else if(maze[i][j] == '<' || maze[i][j] == '>' || maze[i][j] == '^' || maze[i][j] == 'v') lazerFill(i, j);
            }
        }
        int ans = bfs(src, des);
        printf("Case #%d: ", tcase++);
        if(ans == -1) printf("impossible\n");
        else printf("%d\n", ans);
    }
    return 0;
}

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;

public class LaserMaze {

    static int row;
    static int col;
    static char[][] a;

    static int[] dx = { -1, 0, 1, 0 };
    static int[] dy = { 0, 1, 0, -1 };
    static int startX, startY;
    static int goalX, goalY;
    static boolean[][][] hit;

    static int bfs() {
        boolean[][][] visited = new boolean[4][row][col];
        int[] qx = new int[5 * row * col];
        int[] qy = new int[5 * row * col];
        int[] qt = new int[5 * row * col];
        int[] qd = new int[5 * row * col];
        int head = 0, tail = -1;

        tail++;
        qx[tail] = startX;
        qy[tail] = startY;
        qt[tail] = 0;
        qd[tail] = 0;
        visited[0][startX][startY] = true;

        while (head <= tail) {
            int x = qx[head];
            int y = qy[head];
            int t = qt[head];
            int d = qd[head];
            head++;

            int tt = (t + 1) % 4;
            int dd = d + 1;
            for (int k = 0; k < 4; k++) {
                int xx = x + dx[k];
                int yy = y + dy[k];
                if (xx >= 0 && xx < row && yy >= 0 && yy < col && a[xx][yy] == '.' && !hit[tt][xx][yy] && !visited[tt][xx][yy]) {
                    if (xx == goalX && yy == goalY) return dd;

                    tail++;
                    qx[tail] = xx;
                    qy[tail] = yy;
                    qt[tail] = tt;
                    qd[tail] = dd;
                    visited[tt][xx][yy] = true;
                }
            }
        }
        return -1;
    }

    public static void main(String[] args) throws FileNotFoundException {
        Scanner cin = new Scanner(new File("laser_maze.txt"));
        PrintStream cout = new PrintStream("laser_maze.out");
        // Scanner cin = new Scanner(new File("A-large-practice.in"));
        // PrintStream cout = new PrintStream("A-large-practice.out");
        // Scanner cin = new Scanner(System.in);
        // PrintStream cout = System.out;

        int _case = 0;
        for (int T = cin.nextInt(); T > 0; T--) {
            _case++;
            row = cin.nextInt();
            col = cin.nextInt();
            a = new char[row][];
            for (int i = 0; i < row; i++) {
                a[i] = cin.next().toCharArray();
                for (int j = 0; j < col; j++) {
                    if (a[i][j] == 'S') {
                        startX = i;
                        startY = j;
                        a[i][j] = '.';
                    } else if (a[i][j] == 'G') {
                        goalX = i;
                        goalY = j;
                        a[i][j] = '.';
                    } else if (a[i][j] == '^') a[i][j] = 0;
                    else if (a[i][j] == '>') a[i][j] = 1;
                    else if (a[i][j] == 'v') a[i][j] = 2;
                    else if (a[i][j] == '<') a[i][j] = 3;
                }
            }
            hit = new boolean[4][row][col];
            for (int t = 0; t < 4; t++) {
                for (int i = 0; i < row; i++)
                    for (int j = 0; j < col; j++)
                        if (a[i][j] >= 0 && a[i][j] < 4) {
                            int k = (t + a[i][j]) % 4;
                            for (int x = i + dx[k], y = j + dy[k]; x >= 0 && x < row && y >= 0 && y < col && a[x][y] == '.'; x += dx[k], y += dy[k])
                                hit[t][x][y] = true;
                        }
            }

            int ans = bfs();
            if (ans == -1) cout.printf("Case #%d: impossible%n", _case);
            else cout.printf("Case #%d: %d%n", _case, ans);
        }
        cin.close();
        cout.close();
    }
}

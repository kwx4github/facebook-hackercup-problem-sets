#include <bits/stdc++.h>

using namespace std;

char matrix[5][101][101];
char work[5][101][101];
bool mark[5][101][101];
map <char, int > pos;
char posc[]={'^','>','v','<'};

int movlx[]={-1,0,1,0};
int movly[]={0,1,0,-1};

int n,m;

int movx[]={-1,0,1,0};
int movy[]={0,1,0,-1};

bool valid (int dimension, int aux, int auy){

	return (aux>=0 && auy>=0 && aux<n && auy<m && (matrix[dimension][aux][auy]=='.' || matrix[dimension][aux][auy]=='S' || matrix[dimension][aux][auy]=='G' ) );
}

class state{
	public:
	int k,x,y,steps;
	
	state (int a, int b,int c,int d){
		x=b; y=c; k=a; steps=d;
	}

};


int BFS (int sx, int sy, int gx, int gy){

	queue <state> cola;
	memset(mark,0,sizeof(mark));
	
	cola.push(state(0,sx,sy,0));
	
	while (!cola.empty()){
		state viaje = cola.front();
		cola.pop();
		
		if (matrix[viaje.k][viaje.x][viaje.y]=='G'){
			return viaje.steps;
		}
		
		if (mark[viaje.k][viaje.x][viaje.y]) continue;
		
		mark[viaje.k][viaje.x][viaje.y]=true;
		int mov= (viaje.k+1)%4;
		for (int i=0;i<4;++i){
			int aux= movx[i]+viaje.x;
			int auy= movy[i]+viaje.y;
			
			if (valid(mov,aux,auy) && !mark[mov][aux][auy]){
				cola.push(state(mov,aux,auy,viaje.steps+1));
			}
		}
	
	}
	
	return -1;
	
}

int main(){
	pos['^']=1;
	pos['>']=2;
	pos['v']=3;
	pos['<']=4;
	
	int t;
	scanf("%d",&t);
	
	for (int tt=1;tt<=t;++tt){
		scanf("%d %d",&n,&m);
		int sx=-1,sy=-1;
		int gx,gy;
		
		for (int i=0;i<n;++i){
			scanf("%s",matrix[0][i]);
			
			for (int j=0;j<m;++j){
				if (matrix[0][i][j]=='S'){
					sx=i; sy=j;
				}else if (matrix[0][i][j]=='G'){
					gx=i; gy=j;
				}
			}
		}
		
		for (int k=0;k<4;++k){
			for (int i=0;i<n;++i){
				for (int j=0;j<m;++j){
					matrix[k][i][j]=matrix[0][i][j];
					work[k][i][j]=matrix[0][i][j];
				}
			}
		}
		
		for (int k=0;k<4;++k){
		for (int i=0;i<n;++i)
		for (int j=0;j<m;++j){
			if ( pos.count(work[k][i][j])  ){
				int aux=i;
				int auy=j;
			
				int mov=(pos[matrix[k][i][j]]+k-1)%4;
				char cual=posc[(pos[matrix[k][i][j]]+k-1)%4];
				aux+=movlx[mov];
				auy+=movly[mov];
				matrix[k][i][j]=cual;

				while ( valid(k,aux,auy) ){
					matrix[k][aux][auy]=cual;
					aux+=movlx[mov];
					auy+=movly[mov];
				
				}
			}	
		}
		
		
		
		}
		
		if (sx==-1 && sy==-1){
			printf("Case #%d: impossible\n",tt);
			continue;
		}
		
		int bfs= BFS(sx,sy,gx,gy);
		if (bfs!=-1){
			printf("Case #%d: %d\n",tt,bfs);
		}else{
			printf("Case #%d: impossible\n",tt);
		}
		
	}
	
	return 0;
}

#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <queue>

using namespace std;
struct	Node
{
	int x,y,t;
}dq,next;
queue<Node> q;
int T,n,m,map[10][150][150],dq1,ans,vis[10][150][150],ex,ey,sx,sy;
char s[150][150];
int main()
{
	freopen("laser_maze.txt","r",stdin);
	freopen("c.out","w",stdout);
	scanf("%d",&T);
	for (int z=1;z<=T;++z)
	{
		scanf("%d%d",&n,&m);
		memset(map,0,sizeof(map));
		for (int i=0;i<n;++i) scanf("%s",s[i]);
		for (int i=0;i<n;++i)
			for (int j=0;j<m;++j)
			{
				if (s[i][j]=='S')
				{
					sx=i;sy=j;
				}
				if (s[i][j]=='G')
				{
					ex=i;ey=j;
				}
			}
		for (int t=0;t<4;++t)
		{
			for (int i=0;i<n;++i)
				for (int j=0;j<m;++j)
				{
					if (s[i][j]=='#') {map[t][i][j]=-1;continue;}
					if (s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G') continue;
					if (s[i][j]=='^')
					{
						dq1=(0+t)%4;
					}
					if (s[i][j]=='>')
					{
						dq1=(1+t)%4;
					}
					if (s[i][j]=='v')
					{
						dq1=(2+t)%4;
					}
					if (s[i][j]=='<')
					{
						dq1=(3+t)%4;
					}
					if (dq1==0)
					{
						map[t][i][j]=-1;
						for (int k=i-1;k>=0;--k) 
						{
						if (s[k][j]=='#'||s[k][j]=='^'||s[k][j]=='>'||s[k][j]=='v'||s[k][j]=='<') break;
						map[t][k][j]=-1;
						}
					}
					if (dq1==1)
					{
						map[t][i][j]=-1;
						for (int k=j+1;k<m;++k)
						{
						if (s[i][k]=='#'||s[i][k]=='^'||s[i][k]=='>'||s[i][k]=='v'||s[i][k]=='<') break;
						map[t][i][k]=-1;
						}
					}
					if (dq1==2)
					{
						map[t][i][j]=-1;
						for (int k=i+1;k<n;++k)
						{
						if (s[k][j]=='#'||s[k][j]=='^'||s[k][j]=='>'||s[k][j]=='v'||s[k][j]=='<') break;
						map[t][k][j]=-1;
						}
					}
					if (dq1==3)
					{
						map[t][i][j]=-1;
						for (int k=j-1;k>=0;--k) 
						{
						if (s[i][k]=='#'||s[i][k]=='^'||s[i][k]=='>'||s[i][k]=='v'||s[i][k]=='<') break;
						map[t][i][k]=-1;
						}
					}
				}
		}	
		memset(vis,0,sizeof(vis));
		dq.x=sx;dq.y=sy;dq.t=0;
		vis[dq.t%4][dq.x][dq.y]=1;
		while (!q.empty()) q.pop();
		q.push(dq);
		ans=0;
		while (!q.empty())
		{
			dq=q.front();
			if (dq.x==ex&&dq.y==ey)
			{
				ans=dq.t;
				break;
			}
			q.pop();
			next.t=dq.t+1;
			if (dq.x-1>=0)
			{
				if (map[next.t%4][dq.x-1][dq.y]!=-1&&vis[next.t%4][dq.x-1][dq.y]==0)
				{
					vis[next.t%4][dq.x-1][dq.y]=1;
					next.x=dq.x-1;next.y=dq.y;
					q.push(next);
				}
			}
			if (dq.x+1<n)
			{
				if (map[next.t%4][dq.x+1][dq.y]!=-1&&vis[next.t%4][dq.x+1][dq.y]==0)
				{
					vis[next.t%4][dq.x+1][dq.y]=1;
					next.x=dq.x+1;next.y=dq.y;
					q.push(next);
				}
			}
			if (dq.y-1>=0)
			{
				if (map[next.t%4][dq.x][dq.y-1]!=-1&&vis[next.t%4][dq.x][dq.y-1]==0)
				{
					vis[next.t%4][dq.x][dq.y-1]=1;
					next.x=dq.x;next.y=dq.y-1;
					q.push(next);
				}
			}	
			if (dq.y+1<m)
			{
				if (map[next.t%4][dq.x][dq.y+1]!=-1&&vis[next.t%4][dq.x][dq.y+1]==0)
				{
					vis[next.t%4][dq.x][dq.y+1]=1;
					next.x=dq.x;next.y=dq.y+1;
					q.push(next);
				}
			}
		}
		printf("Case #%d: ",z);
		if (ans==0) printf("impossible\n");
		else printf("%d\n",ans);
	}	
	return 0;
}

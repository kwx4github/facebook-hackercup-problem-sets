#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<vector>
#include<map>
#include<cmath>
#include<queue>
#include<set>
#define PII pair<int,int>
#define f first
#define s second
#define VI vector<int>
#define LL long long
#define MP make_pair
#define LD long double
#define PB push_back
#define ALL(V) V.begin(),V.end()
#define abs(x) max((x),-(x))
#define PDD pair<LD,LD> 
#define VPII vector< PII > 
#define siz(V) ((int)V.size())
#define FOR(x, b, e)  for(int x=b;x<=(e);x++)
#define FORD(x, b, e) for(int x=b;x>=(e);x--)
#define REP(x, n)     for(int x=0;x<(n);x++)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
using namespace std;
int n,a,b,c,d,k,m,q,z;
char in[104][104];
char plansza[4][104][104];
int dp[4][104][104];
int val(char x)
  {
  if(x=='<')return 0;
  if(x=='^')return 1;
  if(x=='>')return 2;
  if(x=='v')return 3;
  return -1;
  }
void idz(int u,int i,int j,int va)
  {
  while(1)
      {
      if(va==0)j--;
      if(va==2)j++;
      if(va==1)i--;
      if(va==3)i++;
      if(in[i][j]!='.')break;
      plansza[u][i][j]='#';
      }
  }
int MVX[4]={0,0,1,-1};
int MVY[4]={-1,1,0,0};
void go(int u,int i,int j)
  {
  FOR(uu,0,3)
    FOR(ii,0,n+1)
      FOR(jj,0,m+1)dp[uu][ii][jj]=1e9;
  queue<pair<int,PII> > q;
  
  FOR(y,0,3)
      {
      if(plansza[1][i+MVX[y]][j+MVY[y]]=='.')
        {
        dp[1][i+MVX[y]][j+MVY[y]]=1;
        q.push(MP(1,MP(i+MVX[y],j+MVY[y])));
        }
      }


  while(q.size())
    {
    u=q.front().f;
    i=q.front().s.f;
    j=q.front().s.s;
 //   printf("%d %d %d\n",u,i,j);
    q.pop();
    FOR(y,0,3)
      {
      if(plansza[(u+1)%4][i+MVX[y]][j+MVY[y]]=='.' && dp[(u+1)%4][i+MVX[y]][j+MVY[y]]>dp[u][i][j]+1)
        {
        dp[(u+1)%4][i+MVX[y]][j+MVY[y]]=dp[u][i][j]+1;
        q.push(MP((u+1)%4,MP(i+MVX[y],j+MVY[y])));
        }
      }
    }
  }
void solve()
  {
  PII S,G;
  scanf("%d%d",&n,&m);
  FOR(i,1,n+1)
    FOR(j,1,m+1)in[i][j]=0;
    
  FOR(u,0,3)
    FOR(i,0,n+1)
      FOR(j,0,m+1)
        plansza[u][i][j]=0;
        
  FOR(i,1,n)
    {
    FOR(j,1,m)
      {
      scanf(" %c",&in[i][j]);
      if(in[i][j]=='S')S=MP(i,j),in[i][j]='.';
      if(in[i][j]=='G')G=MP(i,j),in[i][j]='.';
      REP(u,4)plansza[u][i][j]=in[i][j];
      }
    }

  FOR(u,0,3)
    {
    FOR(i,1,n)
      {
      FOR(j,1,m)
        {
        if(val(plansza[u][i][j])==-1)continue;
        idz(u,i,j,(val(plansza[u][i][j])+u)%4);
        }
      }
    }
  FOR(u,0,3)
    {
    FOR(i,1,n)
      {
      FOR(j,1,m)
        {
        if(val(plansza[u][i][j])!=-1)
        plansza[u][i][j]='#';
        }
      }
    }
  go(0,S.f,S.s);
  int res=1e9;
  REP(i,4)
    {
    mini(res,dp[i][G.f][G.s]);
    }
  if(res>1e6)puts("impossible");
  else printf("%d\n",res);
  }
main()
{
scanf("%d",&z);
FOR(i,1,z)
  {
  printf("Case #%d: ",i);
  solve();
  }

}

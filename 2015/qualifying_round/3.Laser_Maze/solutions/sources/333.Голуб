#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>

using namespace std;

#define pb push_back
#define mp make_pair
#define pib pair<int, bool>
#define pii pair<int, int>
#define piii pair<pii, int>
#define vi vector<int>
#define inf 2000000000
#define mod 1000000007
#define mod2 536870911
#define y1 uhgeg
#define lim 31700

typedef long long ll;
typedef unsigned long long ull;

int n, m, l, k, j, i, h, g, x, y, q1, q2, w, ptr, xs, ys, xg, yg, t, field[101][101], d[101][101][5], c[5][5] = {{}, {0, 4, 1, 2, 3}, {0, 3, 4, 1, 2}, {0, 2, 3, 4, 1}, {0, 1, 2, 3, 4}};
char buf[110];
vector<piii> qu;
bool b[101][101][5], attack[101][101][5];

void solve()
{
	scanf ("%d", &t);
	for (g = 1; g <= t; g++)
	{
		scanf ("%d%d\n", &n, &m);
		for (j = 1; j <= n; j++)
		{
			scanf ("%s\n", &buf);
			for (i = 0; i < m; i++)
			{
				for (h = 1; h <= 4; h++)
				{
					b[j][i + 1][h] = 0;
					attack[j][i + 1][h] = 0;
					d[j][i + 1][h] = inf;
				}
				switch (buf[i])
				{
				case '.':
					field[j][i + 1] = 0;
					break;
				case '^':
					field[j][i + 1] = 1;
					break;
				case '>':
					field[j][i + 1] = 2;
					break;
				case 'v':
					field[j][i + 1] = 3;
					break;
				case '<':
					field[j][i + 1] = 4;
					break;
				case '#':
					field[j][i + 1] = 5;
					break;
				case 'S':
					field[j][i + 1] = 0;
					xs = j;
					ys = i + 1;
					break;
				case 'G':
					field[j][i + 1] = 0;
					xg = j;
					yg = i + 1;
					break;
				}
			}
		}
		for (j = 1; j <= n; j++)
		{
			for (i = 1; i <= m; i++)
			{
				if (1 <= field[j][i] && field[j][i] <= 4)
				{
					for (h = j - 1; h > 0; h--)
					{
						if (field[h][i])
						{
							break;
						}
						attack[h][i][c[field[j][i]][1]] = 1;
					}
					for (h = i + 1; h <= m; h++)
					{
						if (field[j][h])
						{
							break;
						}
						attack[j][h][c[field[j][i]][2]] = 1;
					}
					for (h = j + 1; h <= n; h++)
					{
						if (field[h][i])
						{
							break;
						}
						attack[h][i][c[field[j][i]][3]] = 1;
					}
					for (h = i - 1; h > 0; h--)
					{
						if (field[j][h])
						{
							break;
						}
						attack[j][h][c[field[j][i]][4]] = 1;
					}
				}
			}
		}
		b[xs][ys][4] = 0;
		d[xs][ys][4] = 0;
		qu.clear();
		qu.pb(piii(pii(xs, ys), 4));
		ptr = 0;
		while (ptr < qu.size())
		{
			x = qu[ptr].first.first;
			y = qu[ptr].first.second;
			w = qu[ptr].second;
			ptr++;
			if (x > 1 && !field[x - 1][y] && !attack[x - 1][y][w % 4 + 1])
			{
				d[x - 1][y][w % 4 + 1] = min(d[x - 1][y][w % 4 + 1], d[x][y][w] + 1);
				if (!b[x - 1][y][w % 4 + 1])
				{
					b[x - 1][y][w % 4 + 1] = 1;
					qu.pb(piii(pii(x - 1, y), w % 4 + 1));
				}
			}
			if (y > 1 && !field[x][y - 1] && !attack[x][y - 1][w % 4 + 1])
			{
				d[x][y - 1][w % 4 + 1] = min(d[x][y - 1][w % 4 + 1], d[x][y][w] + 1);
				if (!b[x][y - 1][w % 4 + 1])
				{
					b[x][y - 1][w % 4 + 1] = 1;
					qu.pb(piii(pii(x, y - 1), w % 4 + 1));
				}
			}
			if (x < n && !field[x + 1][y] && !attack[x + 1][y][w % 4 + 1])
			{
				d[x + 1][y][w % 4 + 1] = min(d[x + 1][y][w % 4 + 1], d[x][y][w] + 1);
				if (!b[x + 1][y][w % 4 + 1])
				{
					b[x + 1][y][w % 4 + 1] = 1;
					qu.pb(piii(pii(x + 1, y), w % 4 + 1));
				}
			}
			if (y < m && !field[x][y + 1] && !attack[x][y + 1][w % 4 + 1])
			{
				d[x][y + 1][w % 4 + 1] = min(d[x][y + 1][w % 4 + 1], d[x][y][w] + 1);
				if (!b[x][y + 1][w % 4 + 1])
				{
					b[x][y + 1][w % 4 + 1] = 1;
					qu.pb(piii(pii(x, y + 1), w % 4 + 1));
				}
			}
		}
		x = inf;
		for (j = 1; j <= 4; j++)
		{
			x = min(d[xg][yg][j], x);
		}
		printf ("Case #%d: ", g);
		if (x == inf)
		{
			printf ("impossible\n");
		}
		else
		{
			printf ("%d\n", x);
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
	srand(333);
	solve();
	return 0;
}
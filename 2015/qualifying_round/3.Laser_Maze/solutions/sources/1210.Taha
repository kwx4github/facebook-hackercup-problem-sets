/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package facebook;

import java.io.FileReader;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;

/**
 *
 * @author Taha
 */
public class Test3 {

    private static Integer bsf(boolean[][][] blockedorVisited, Point start, Point end) {
        int steps = 0;
        LinkedList<Point> q = new LinkedList<Point>();
        q.addFirst(start);
        blockedorVisited[0][start.x][start.y] = true;
        int[] xs = new int[]{-1, 0, 1, 0};
        int[] ys = new int[]{0, -1, 0, 1};
        int n = 1;
        while (!q.isEmpty()) {
            int m = 0;
            for (int ll = 0; ll < n; ll++) {
                final Point last = q.removeLast();
                if (last.x == end.x && last.y == end.y) {
                    return steps;
                }
                for (int i = 0; i < 4; i++) {
                    int x = last.x + xs[i];
                    int y = last.y + ys[i];
                    int t = (last.t + 1) % 4;
                    if (x >= 0 && y >= 0 && x < blockedorVisited[0].length && y < blockedorVisited[0][0].length) {
                        if (!blockedorVisited[t][x][y]) {
                            blockedorVisited[t][x][y] = true;
                            Point p = new Point();
                            p.x = x;
                            p.t = t;
                            p.y = y;
                            q.addFirst(p);
                            m++;
                        }
                    }
                }
            }
            n = m;
            steps++;
        }

        return null;

    }

    static class Point {

        public int x;
        public int y;
        int t;
    }

    public static void main(String[] args) throws Exception {
        try {
            FileWriter fw = new FileWriter("c:\\Temp\\out.txt");
            FileReader f = new FileReader("c:\\Temp\\input.txt");
            Scanner s = new Scanner(f);
            int t = s.nextInt();
            for (int i = 0; i < t; i++) {
                int sx = 0, sy = 0, st = 0;
                int gx = 0, gy = 0;
                int h = s.nextInt(), w = s.nextInt();
                boolean[][][] blockedorVisited = new boolean[4][h][w];
                for (boolean[][] te : blockedorVisited) {
                    for (boolean[] bs : te) {
                        Arrays.fill(bs, Boolean.FALSE);

                    }
                }
                String[] board = new String[h];
                s.nextLine();
                for (int j = 0; j < h; j++) {
                    board[j] = s.nextLine().trim();
                }

                for (int j = 0; j < h; j++) {
                    for (int k = 0; k < w; k++) {
                        switch (board[j].charAt(k)) {
                            case '#':
                                blockedorVisited[0][j][k] = true;
                                blockedorVisited[1][j][k] = true;
                                blockedorVisited[2][j][k] = true;
                                blockedorVisited[3][j][k] = true;
                                break;
                            case '<':
                                fillBoard(0, j, k, blockedorVisited, board);
                                break;
                            case '^':
                                fillBoard(1, j, k, blockedorVisited, board);
                                break;
                            case '>':
                                fillBoard(2, j, k, blockedorVisited, board);
                                break;
                            case 'v':
                                fillBoard(3, j, k, blockedorVisited, board);
                                break;
                            case 'G':
                                gx = j;
                                gy = k;
                                break;
                            case 'S':
                                sx = j;
                                sy = k;
                        }
                    }
                }

                Point start = new Point();
                Point end = new Point();
                start.x = sx;
                start.y = sy;
                start.t = 0;
                end.x = gx;
                end.y = gy;
                Integer res  = bsf(blockedorVisited, start, end);;
                if (res == null) {
                    fw.write("Case #" + (i + 1) + ": " + "impossible\n");
                } else {
                    fw.write("Case #" + (i + 1) + ": " + res + "\n");
                }
            }
            fw.close();
            f.close();
        } catch (Exception e) {
            throw e;
        }
    }

    private static void fillBoard(int t, int xl, int yl, boolean[][][] blockedorVisited, String[] board) {
        int[] xs = new int[]{0, -1, 0, 1};
        int[] ys = new int[]{-1, 0, 1, 0};
        for (int i = 0; i < 4; i++) {
            int tt = (t+i) % 4;
            int x = xl;
            int y = yl;
            boolean first = true;
            while (x >= 0 && y >= 0 && x < blockedorVisited[0].length && y < blockedorVisited[0][0].length) {
                blockedorVisited[i][x][y] = true;
                if (!first && (board[x].charAt(y) != '.' && board[x].charAt(y) != 'G' && board[x].charAt(y) != 'S')) {
                    break;
                }
                first = false;
                x += xs[tt];
                y += ys[tt];
            }
        }
    }
}

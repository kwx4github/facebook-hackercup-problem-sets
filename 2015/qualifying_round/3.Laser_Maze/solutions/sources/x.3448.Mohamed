import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;

import javax.swing.border.Border;

public class a {

	public static long mod = (long) Math.pow(10, 9) + 7;
	public static int k = 0;

	private static class node {
		int x;
		int y;
		int dis;

		node(int m, int n, int g) {
			x = m;
			y = n;
			dis = g;
		}

	}

	public static class point implements Comparable<point> {
		int x;
		int y;
		int dis;

		point(int x, int y, int b) {
			this.x = x;
			this.y = y;
			this.dis = b;
		}

		@Override
		public int compareTo(point o) {
			if (o.dis < dis)
				return 1;
			return -1;

		}
	}

	public static int ch(long y) {
		int r = Long.bitCount(y);
		return r;
	}

	public static long gcd(long x, long y) {
		if (y == 0)
			return x;

		return gcd(y, x % y);
	}

	public static boolean ch[];
	public static ArrayList<Integer> prime;
	public static Queue<Integer> pp;

	public static void sieve(int k) {
		ch[0] = ch[1] = true;

		for (int i = 2; i <= k; i++) {
			if (!ch[i]) {
				prime.add(i);
				pp.add(i);
				for (int j = i + i; j <= k; j += i) {
					ch[j] = true;
				}
			}
		}

	}

	public static long pw(int x, int power, int mod) {
		if (power == 1)
			return x % mod;
		else if (power % 2 == 0)
			return pw((x % mod * x % mod) % mod, power / 2, mod);
		else
			return (pw(x, power - 1, mod) % mod * x % mod) % mod;

	}

	public static int swap[][];
	public static int parent[];

	public static boolean graph(int s, int e, int n) {
		boolean ch[] = new boolean[400];
		Arrays.fill(parent, -1);
		Queue<Integer> q = new LinkedList<>();
		ch[s] = true;
		if (s == e)
			return true;
		q.add(s);
		while (!q.isEmpty()) {
			int r = q.poll();

			if (r == e)
				return true;

			for (int i = 0; i < n; i++) {
				if (!ch[i] && swap[r][i] == 1) {
					q.add(i);
					parent[i] = r;
					ch[i] = true;

				}
			}
		}

		return false;

	}

	public static char a[][];
	public static ArrayList<Integer> b[][];
	public static int n;
	public static int m;
	public static int ans[][];
	public static int dx[] = { 1, 0, -1, 0 };
	public static int dy[] = { 0, 1, 0, -1 };
	public static boolean ok[][];

	public static boolean ch1(int x, int y, int dis) {

		for (int i = 0; i < b[x][y].size(); i++) {
			if (dis % 4 == b[x][y].get(i))
				return false;
		}
		return true;
	}

	public static boolean ch2(int x, int y, int dis) {
		for (int i = 0; i < 4; i++) {
			int x1 = x + dx[i];
			int y1 = y + dy[i];
			if (x1 < 0 || y1 < 0 || x1 >= n || y1 >= m)
				continue;
			if (ch1(x1, y1, dis))
				return true;
		}
		return false;
	}

	public static int dig(int x, int y) {
		ok = new boolean[n][m];
		ans = new int[n][m];

		PriorityQueue<point> q = new PriorityQueue<>();
		q.add(new point(x, y, 0));
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				ans[i][j] = Integer.MAX_VALUE;
			}
		}
		ans[x][y] = 0;
		while (!q.isEmpty()) {
			point r = q.poll();
			int x1 = r.x;
			int y1 = r.y;
			int dis = r.dis;
			ok[x1][y1] = true;
			if (a[x1][y1] == 'G')
				return dis;
			boolean ee = ch2(x1, y1, dis + 1);
			for (int i = 0; i < 4; i++) {
				int x2 = dx[i] + x1;
				int y2 = dy[i] + y1;
				if (x2 < 0 || y2 < 0 || x2 >= n || y2 >= m)
					continue;
				if (a[x2][y2] != '.' && a[x2][y2] != 'G')
					continue;
				if (!ok[x2][y2]) {
					if (ch1(x2, y2, dis + 1)) {
						ans[x2][y2] = dis + 1;
						q.add(new point(x2, y2, dis + 1));
					} else {
						if (ee) {
							ans[x2][y2] = dis + 3;
							q.add(new point(x2, y2, dis + 3));
						}
					}
				}
			}

		}

		return -1;
	}

	public static void up(int x, int y, int num) {
		for (int i = x - 1; i >= 0; i--) {
			b[i][y].add(num);
		}

	}

	public static void down(int x, int y, int num) {
		for (int i = x + 1; i < n; i++) {
			b[i][y].add(num);
		}

	}

	public static void left(int x, int y, int num) {
		for (int i = y + 1; i < m; i++) {
			b[x][i].add(num);
		}

	}

	public static void right(int x, int y, int num) {
		for (int i = y - 1; i >= 0; i--) {
			b[x][i].add(num);
		}

	}

	public static void main(String[] args) throws IOException {
		//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		 BufferedReader in = new BufferedReader(new FileReader(
		 "laser_maze.txt"));
		StringBuilder qq = new StringBuilder();
		//PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		 PrintWriter out = new PrintWriter(new FileWriter("out.txt"));

		int t = Integer.parseInt(in.readLine());
		for (int i = 0; i < t; i++) {

			out.print("Case #" + (i + 1) + ": ");
			String[] y = in.readLine().split(" ");
			n = Integer.parseInt(y[0]);
			m = Integer.parseInt(y[1]);
			a = new char[n][m];
			b = new ArrayList[n][m];
			for (int j = 0; j < n; j++) {
				for (int j2 = 0; j2 < m; j2++) {
					b[j][j2] = new ArrayList();
				}
			}
			int s = 0;
			int e = 0;
			for (int j = 0; j < n; j++) {
				String u = in.readLine();
				for (int k = 0; k < m; k++) {
					a[j][k] = u.charAt(k);
					if (a[j][k] == 'S') {
						s = j;
						e = k;
					} else if (a[j][k] == '^') {
						left(j, k, 1);
						down(j, k, 2);
						right(j, k, 3);
						up(j, k, 0);
					} else if (a[j][k] == 'v') {
						left(j, k, 3);
						down(j, k, 0);
						right(j, k, 1);
						up(j, k, 2);
					} else if (a[j][k] == '>') {
						left(j, k, 0);
						down(j, k, 1);
						right(j, k, 2);
						up(j, k, 3);
					} else if (a[j][k] == '<') {
						left(j, k, 2);
						down(j, k, 3);
						right(j, k, 0);
						up(j, k, 1);
					}

				}
			}

			int k = dig(s, e);
			if (k == -1)
				out.println("impossible");
			else
				out.println(k);
		}

		out.close();

	}
}
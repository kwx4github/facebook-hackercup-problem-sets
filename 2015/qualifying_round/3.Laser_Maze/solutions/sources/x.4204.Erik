using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Qual3
{
	class Program
	{
		static void Main(string[] args)
		{
			var cases = Read.Int();

			using (var s = new StreamWriter(@"c:\users\krox\Downloads\HackerCup\Qual3.out", false))
			{
				for (var t = 0; t < cases; t++)
				{
					var answer = "Case #" + (t + 1) + ": " + Solve() + "\n";
					Console.Write(answer);
					s.Write(answer);
				}
			}

			Console.ReadLine();
		}

		private static bool[,,] Death;

		private static bool[,] Wall;

		private static int Gx;

		private static int Gy;

		private static int?[,,] Memo;

		private static int H;
		private static int W;

		private static string Solve()
		{
			int x, y;
			ReadMaze(out x, out y);

			var moves = new Queue<Tuple<int, int, int>>();
			moves.Enqueue(Tuple.Create(x - 1, y, 1));
			moves.Enqueue(Tuple.Create(x, y + 1, 1));
			moves.Enqueue(Tuple.Create(x + 1, y, 1));
			moves.Enqueue(Tuple.Create(x, y - 1, 1));

			while( moves.Any())
			{
				var m = moves.Dequeue();
				x = m.Item1;
				y = m.Item2;

				if (m.Item1 < 0 || m.Item2 < 0 || m.Item1 >= W || m.Item2 >= H)
				{
					continue;
				}

				if (Wall[m.Item1, m.Item2])
				{
					continue;
				}

				var count = m.Item3;
				if (Memo[x,y,count%4].HasValue)
				{
					continue;
				}

				Memo[x, y, count % 4] = count;

				if (Death[x,y,count%4])
				{
					continue;
				}

				if (x == Gx && y == Gy)
				{
					return "" + count;
				}

				moves.Enqueue(Tuple.Create(x - 1, y, count + 1));
				moves.Enqueue(Tuple.Create(x, y + 1, count + 1));
				moves.Enqueue(Tuple.Create(x + 1, y, count + 1));
				moves.Enqueue(Tuple.Create(x, y - 1, count + 1));
			}

			return "impossible";
		}

		private static void ReadMaze(out int x, out int y)
		{
			var M = Read.Int();
			var N = Read.Int();
			H = M;
			W = N;
			x = -1; y = -1;

			Memo = new int?[N, M, 4];
			Death = new bool[N, M,4];
			Wall = new bool[N, M];

			var turret = new int[N, M];
			for(int i=M-1; i >= 0; i--)
			{
				var line = Read.String();
				for(int j=0; j < N; j++)
				{
					if (line[j] == 'G')
					{
						Gx = j;
						Gy = i;
						continue;
					}

					if (line[j] == 'S')
					{
						x = j;
						y = i;
						continue;
					}

					if (line[j] == '.' )
					{
						continue;
					}

					Wall[j, i] = true;

					if (line[j] == '<')
					{
						turret[j, i] = 1;
					}
					else if (line[j] == '^')
					{
						turret[j, i] = 2;
					}
					else if (line[j] == '>')
					{
						turret[j, i] = 3;
					}
					else if (line[j] == 'v')
					{
						turret[j, i] = 4;
					}
				}
			}

			for (int i = 0; i < M; i++)
			{
				for (int j = 0; j < N ; j++)
				{
					if (turret[j, i] == 0)
					{
						continue;
					}

					int dx = 0;
					int dy = -1;
					for (int k=0; k < 4; k++)
					{
						var ndx = dx != 0 ? 0 : (dy > 0 ? 1 : -1);
						dy = dy != 0 ? 0 : (dx > 0 ? -1 : 1);
						dx = ndx;
						var cx = j + dx;
						var cy = i + dy;

						while(cx >= 0 && cx < N &&
								cy >= 0 && cy < M &&
								!Wall[cx, cy])
						{
							Death[cx, cy, ((turret[j, i] - 1 + 4 - k ) % 4)] = true;
							cx += dx;
							cy += dy;
						}
					}
				}
			}

		}
	}

	public static class Read
	{
		private static string[] input = ReadAllText().Split(new[] { ' ', '\r', '\n', '\t' }, StringSplitOptions.RemoveEmptyEntries);

		private static int indexer = 0;

		public static int Int()
		{
			return int.Parse(input[indexer++]);
		}

		public static int[] Ints(int c)
		{
			return Enumerable.Range(0, c).Select(t => Int()).ToArray();
		}

		public static long Long()
		{
			return long.Parse(input[indexer++]);
		}

		public static string String()
		{
			return input[indexer++];
		}

		private static string ReadAllText()
		{
			return File.ReadAllText(@"c:\users\krox\Downloads\HackerCup\Qual3.in");
		}
	}
}

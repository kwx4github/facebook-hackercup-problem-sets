#include <bits/stdc++.h>
using namespace std;

typedef struct
{
	int i;
	int j;
	int k;
} point;

char maze[101][101];
char blocked[101][101][4];
char status[101][101][4];

point q[40004];

int M, N, qf, qr;

void block(int x, int y, int down, int right, int k)
{
	int i = x + down, j = y + right;
	while (i >= 0 && i < M && j >= 0 && j < N
		&& (maze[i][j] == '.' || maze[i][j] == 'S' || maze[i][j] == 'G'))
	{
		blocked[i][j][k] = 1;
		i += down;
		j += right;
	}
}

int main()
{
	int T, i, j, k, l, d, t, sx, sy, gx, gy;
	point top;
	cin >> T;
	for (t = 1; t <= T; t++)
	{
		cin >> M >> N;
		for (i = 0; i < M; i++)
		{
			cin >> maze[i];
			for (j = 0; j < N; j++)
				for (k = 0; k < 4; k++)
				{
					blocked[i][j][k] = 0;
					status[i][j][k] = 0;
				}
		}
		
		for (i = 0; i < M; i++)
		{
			for (j = 0; j < N; j++)
			{
				d = maze[i][j];
				if (d == '.')
					continue;
				if (d == 'S')
				{
					sx = i;
					sy = j;
					continue;
				}
				if (d == 'G')
				{
					gx = i;
					gy = j;
					continue;
				}
				for (k = 0; k < 4; k++)
					blocked[i][j][k] = 1;
				switch (d)
				{
				case '^':
					block(i, j, -1, 0, 0);
					block(i, j, 0, 1, 1);
					block(i, j, 1, 0, 2);
					block(i, j, 0, -1, 3);
					break;
				case '>':
					block(i, j, 0, 1, 0);
					block(i, j, 1, 0, 1);
					block(i, j, 0, -1, 2);
					block(i, j, -1, 0, 3);
					break;
				case 'v':
					block(i, j, 1, 0, 0);
					block(i, j, 0, -1, 1);
					block(i, j, -1, 0, 2);
					block(i, j, 0, 1, 3);
					break;
				case '<':
					block(i, j, 0, -1, 0);
					block(i, j, -1, 0, 1);
					block(i, j, 0, 1, 2);
					block(i, j, 1, 0, 3);
					break;
				}
			}
		}
		
		qf = 0;
		q[0].i = sx;
		q[0].j = sy;
		q[0].k = 0;
		status[sx][sy][0] = 1;
		qr = 1;
		while (qf < qr)
		{
			top = q[qf];
			qf++;
			if (top.i < 0 || top.i >= M || top.j < 0 || top.j >= N)
				continue;
			if (top.i == gx && top.j == gy)
			{
				qf--;
				break;
			}
			if (!(blocked[top.i + 1][top.j][(top.k + 1) & 3] || status[top.i + 1][top.j][(top.k + 1) & 3]))
			{
				q[qr].i = top.i + 1;
				q[qr].j = top.j;
				q[qr].k = top.k + 1;
				status[top.i + 1][top.j][(top.k + 1) & 3] = 1;
				qr++;
			}
			if (!(blocked[top.i][top.j + 1][(top.k + 1) & 3] || status[top.i][top.j + 1][(top.k + 1) & 3]))
			{
				q[qr].i = top.i;
				q[qr].j = top.j + 1;
				q[qr].k = top.k + 1;
				status[top.i][top.j - 1][(top.k + 1) & 3] = 1;
				qr++;
			}
			if (!(blocked[top.i - 1][top.j][(top.k + 1) & 3] || status[top.i - 1][top.j][(top.k + 1) & 3]))
			{
				q[qr].i = top.i - 1;
				q[qr].j = top.j;
				q[qr].k = top.k + 1;
				status[top.i - 1][top.j][(top.k + 1) & 3] = 1;
				qr++;
			}
			if (!(blocked[top.i][top.j - 1][(top.k + 1) & 3] || status[top.i][top.j - 1][(top.k + 1) & 3]))
			{
				q[qr].i = top.i;
				q[qr].j = top.j - 1;
				q[qr].k = top.k + 1;
				status[top.i][top.j - 1][(top.k + 1) & 3] = 1;
				qr++;
			}
		}
		/*
		cout << qf << " " << qr << endl;
		for (i = 0; i < qr; i++)
			cout << q[i].i << " " << q[i].j << " " << q[i].k << endl;
		*/
		
		cout << "Case #" << t << ": ";
		if (qf < qr)
			cout << q[qf].k;
		else
			cout << "impossible";
		cout << endl;
	}
	return 0;
}

#include <cstdio>
#include <cstring>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <bitset>
#include <numeric>
#include <ctime>
#include <cmath>
#include <cassert>
#include <algorithm>

using namespace std;

typedef pair<int, int> PII;
typedef pair<PII, int> PI3;
typedef long long ll;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define pct __builtin_popcount

#define INF 1000000007
#define N 110

const int dx[4] = {-1,0,1,0};
const int dy[4] = {0,1,0,-1};
const string str = "^>v<";

int n, m;
string a[N];
int s[N][N][4];
bool v[N][N][4];

void ff(int x, int y, int z, int d) {
	while (true) {
		v[x][y][z] = 1;
		x += dx[d];
		y += dy[d];
		if (x < 0 || x >= n || y < 0 || y >= m || a[x][y] != '.') {
			break;
		}
	}
}

int main () {
	int _;
	cin >> _;
	for (int __ = 1; __ <= _; __ ++) {
		cin >> n >> m;
		for (int i = 0; i < n; i ++) 
			cin >> a[i];
		memset(v,0,sizeof v);
		int sx, sy, tx, ty;
		for (int i = 0; i < n; i ++) 
			for (int j = 0; j < m; j ++) {
				if (a[i][j] == 'S') {
					sx = i; sy = j;
					a[i][j] = '.';
				} 
				if (a[i][j] == 'G') {
					tx = i; ty = j;
					a[i][j] = '.';
				}
			}
		for (int i = 0; i < n; i ++) 
			for (int j = 0; j < m; j ++) {
				if (a[i][j] == '#') {
					for (int k = 0; k < 4; k ++)
						v[i][j][k] = 1;
				} else {
					int p = -1;
					for (int k = 0; k < 4; k ++) 
						if (str[k] == a[i][j]) p = k;
					if (p != -1) {
						for (int k = 0; k < 4; k ++) {
							ff(i,j,k,(p+k)%4);
						}
					}
				}
			}
		for (int i = 0; i < n; i ++)
			for (int j = 0; j < m; j ++) 
				for (int k = 0; k < 4; k ++) 
					s[i][j][k] = INF;
		s[sx][sy][0] = 0;
		queue<PI3> q;
		q.push(mp(mp(sx,sy),0));
		int S = -1;
		while (!q.empty()) {
			PI3 _x = q.front(); q.pop();
			int x = _x.fi.fi, y = _x.fi.se, z = _x.se;
			//cout << x << " " << y << " " << z << "" << tx << " " << ty << endl;
			for (int d = 0; d < 4; d ++) {
				int x1 = x+dx[d];
				int y1 = y+dy[d];
				int z1 = (z+1)%4;
				if (x1 < 0 || x1 >= n || y1 < 0 || y1 >= m || v[x1][y1][z1] || s[x1][y1][z1] != INF) continue;
				s[x1][y1][z1] = s[x][y][z]+1;
				q.push(mp(mp(x1,y1),z1));
				if (x1 == tx && y1 == ty) {
					S = s[x1][y1][z1];
					break;
				}
			}
			if (S != -1) break;
		}
		printf ("Case #%d: ", __);
		if (S == -1) puts("impossible");
		else printf("%d\n", S);
	}
	return 0;
}
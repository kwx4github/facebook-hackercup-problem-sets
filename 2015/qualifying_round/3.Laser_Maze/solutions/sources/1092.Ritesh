/*for(long long i = 0 ; i < n ; i++){
    for(long long j = 0 ; j < m ; j++){

    }
}*/

#include <bits/stdc++.h>
 
using namespace std;

#define reads() freopen("input.txt", "r", stdin)
#define writes() freopen("output.txt", "w", stdout)

long long MOD = 1000000007;


#define inf (1 << 30)
#define INF (1<<45LL)
#define pb push_back
#define mp make_pair
using namespace std;
 
typedef pair<int, int> pi;
typedef long long ll;



template<class T> inline void read(T& x) {
    char ch;
    while(!isdigit(ch = getchar_unlocked()));
    x = ch-'0';
    while( isdigit(ch = getchar_unlocked())) x *= 10, x += ch-'0';
}

int n,m;
char a[103][103];
int starti,startj,finishi,finishj;
int dead[103][103][7];
int visited[103][103][7];
int distances[103][103][7];
vector < pair < pair <int , int> , int > > laser;

int check(){
    distances[starti][startj][0] = 0;
    queue <pair < pair < int, int> ,int > > b;
    b.push(make_pair(make_pair(starti,startj),0));
    while(!b.empty()){
        int first = b.front().first.first;
        int second = b.front().first.second;
        int state = b.front().second;
        b.pop();
        if(first == finishi && second == finishj){
            return distances[finishi][finishj][state];
        }

        for(int l = 0 ; l < 4 ; l++){
            int i,j,k;
            if(l == 0){
                i = first + 1;
                j = second + 0;
                k = (state + 1)%4;
            }

            if(l == 1){
                i = first - 1;
                j = second + 0;
                k = (state + 1)%4;
            }

            if(l == 2){
                i = first + 0;
                j = second + 1;
                k = (state + 1)%4;
            }

            if(l == 3){
                i = first + 0;
                j = second - 1;
                k = (state + 1)%4;
            }

            if(i < n && i >= 0 && j < m && j >= 0 && visited[i][j][k] == 0 && dead[i][j][k] == 0){
                if(a[i][j] != '^' && a[i][j] != 'v' && a[i][j] != '<' && a[i][j] != '>' && a[i][j] != '#'){
                    if(distances[i][j][k] == -1){
                        distances[i][j][k] = INT_MAX;
                    }
                    distances[i][j][k] = min(distances[i][j][k] , distances[first][second][state] + 1);
                    visited[i][j][k] = 1;
                    //cout << distances[i][j][k] << "\n";
                    b.push(make_pair(make_pair(i,j),k));
                }
            }
        }
    }
    return INT_MAX;
}

int main(){
    reads();
    writes();
    int t;
    cin >> t;
    int test = 1;
    while(t--){
        memset(visited , 0 , sizeof(visited));
        memset(dead , 0 , sizeof(dead));
        memset(distances , INT_MAX , sizeof(distances));
        laser.clear();
        cin >> n >> m;
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                cin >> a[i][j];
                if(a[i][j] == 'S'){
                    starti = i;
                    startj = j;
                }
                if(a[i][j] == 'G'){
                    finishi = i;
                    finishj = j;
                }
            }
        }
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(a[i][j] == '^'){
                    laser.push_back(make_pair(make_pair(i,j),0));
                }
                else if(a[i][j] == '>'){
                    laser.push_back(make_pair(make_pair(i,j),1));
                }
                else if(a[i][j] == 'v'){
                    laser.push_back(make_pair(make_pair(i,j),2));
                }
                else if(a[i][j] == '<'){
                    laser.push_back(make_pair(make_pair(i,j),3));
                }
            }
        }
        int directioni[5] = {-1,0,1,0}; 
        int directionj[5] = {0,1,0,-1};
        for(int i = 0 ; i < laser.size() ; i++){
            int direction = laser[i].second;
            for(int j = 0 ; j < 4 ; j++,direction++){
                direction = direction%4;
                int x = laser[i].first.first;
                int y = laser[i].first.second;
                while(x < n && x >= 0 && y < m && y >= 0){
                    x = x + directioni[direction];
                    y = y + directionj[direction];
                    if(a[x][y] == '^' || a[x][y] == '>' || a[x][y] == '<' || a[x][y] == 'v' || a[x][y] == '#'){
                        break;
                    }
                    //cout << x << " " << y << " " << j << "\n";
                    dead[x][y][j] = 1;
                }
            }
        }
        int answer = check();
        if(answer != INT_MAX)
        cout << "Case #" << test++ << ": " << answer << "\n";
        else
        cout << "Case #" << test++ << ": " << "impossible" << "\n";
    }
    return 0;
}
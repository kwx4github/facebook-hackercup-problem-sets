//
//  3.cpp
//  FHC
//
//  Created by jie zheng on 15/1/10.
//  Copyright (c) 2015å¹´ jie zheng. All rights reserved.
//

#include <stdio.h>
#include <iostream>
#include <queue>
#include <set>
#include <vector>

using namespace std;
char arr[105][105];
struct Point
{
    int x;
    int y;
    int step;
    
};

int main()
{
    freopen("/Users/jiezheng/Dev/poj/laser_maze.txt", "r", stdin);
    freopen("/Users/jiezheng/Dev/poj/maze.txt", "w", stdout);
    int T;
    while(cin>>T)
    {
        for(int caseid = 1; caseid <= T; ++caseid)
        {
            cout<<"Case #"<<caseid<<": ";
            // ^ > v <
            vector<Point> lasers[4];
            int m, n;
            cin>>m>>n;
            Point p;
            queue<Point> q;
            for(int i = 0; i < m; ++i)
                for(int j = 0; j < n; ++j)
                {
                    cin>>arr[i][j];
                    p.x = i;
                    p.y = j;
                    p.step = 0;
                    if(arr[i][j] == 'S')
                    {
                        q.push(p);
                    }
                    else if(arr[i][j] == '^')
                    {
                        lasers[0].push_back(p);
                    }
                    else if(arr[i][j] == '>')
                    {
                        lasers[1].push_back(p);
                    }
                    else if(arr[i][j] == 'v')
                    {
                        lasers[2].push_back(p);
                    }
                    else if(arr[i][j] == '<')
                    {
                        
                        lasers[3].push_back(p);
                    }
                }
            
            bool flag = false;
            int ans = 0;
            set<string> uniqs;
            bool first = false;
            while(!q.empty())
            {
                Point cur = q.front();
                q.pop();
                char curstr[1024];
                sprintf(curstr, "%d_%d_%d", cur.x, cur.y, cur.step%4);
                uniqs.insert(curstr);
                
                int x = cur.x;
                int y = cur.y;
                ans = cur.step;
                int step = cur.step;
                bool safe = true;
                for(int i = 0; i < 4 && safe && first; ++i)
                {
                    int dir = (i+step)%4;
                    
                    for(int j = 0; j < lasers[i].size() && safe; ++j)
                    {
                        int lx = lasers[i][j].x;
                        int ly = lasers[i][j].y;
                        if(dir == 0 && ly == y && x < lx)
                        {
                            bool f = false;
                            for(int k = x+1; k < lx; ++k)
                            {
                                if(arr[k][y] != '.' && arr[k][y] != 'S' && arr[k][y] != 'G')
                                {
                                    f = true;
                                    break;
                                }
                            }
                            if(!f)
                            {
                                safe = false;
                                break;
                            }
                        }
                        if(dir == 2 && ly == y && x > lx)
                        {
                            bool f = false;
                            for(int k = lx+1; k < x; ++k)
                            {
                                if(arr[k][y] != '.' && arr[k][y] != 'S' && arr[k][y] != 'G')
                                {
                                    f = true;
                                    break;
                                }
                            }
                            if(!f)
                            {
                                safe = false;
                                break;
                            }
                        }
                        
                        if(dir == 3 && lx == x && y < ly)
                        {
                            bool f = false;
                            
                            for(int k = y+1; k < ly; ++k)
                            {
                                if(arr[x][k] != '.' && arr[x][k] != 'S' && arr[x][k] != 'G')
                                {
                                    f = true;
                                    break;
                                }
                            }
                            if(!f)
                            {
                                safe = false;
                                break;
                            }
                        }
                        
                        if(dir == 1 && lx == x && y > ly)
                        {
                            bool f = false;
                            for(int k = ly+1; k < y; ++k)
                            {
                                if(arr[x][k] != '.' && arr[x][k] != 'S' && arr[x][k] != 'G')
                                {
                                    f = true;
                                    break;
                                }
                            }
                            if(!f)
                            {
                                safe = false;
                                break;
                            }
                        }
                    }
                }
                
                if(!safe)
                    continue;
                
                if(arr[x][y] == 'G' && safe)
                {
                    flag = true;
                    goto end;
                }
                first = true;
                if(x-1 >= 0 && (arr[x-1][y] == '.' || arr[x-1][y] == 'G' || arr[x-1][y] == 'S'))
                {
                    Point t;
                    t.x = x-1;
                    t.y = y;
                    t.step = (cur.step+1);
                    char str[1024];
                    sprintf(str, "%d_%d_%d", t.x, t.y, t.step%4);
                    if(uniqs.find(str) == uniqs.end())
                    {
                        q.push(t);
                        uniqs.insert(str);
                    }
                }
                if(x+1 < m && (arr[x+1][y] == '.' || arr[x+1][y] == 'G' || arr[x+1][y] == 'S'))
                {
                    Point t;
                    t.x = x+1;
                    t.y = y;
                    t.step = cur.step+1;
                    char str[1024];
                    sprintf(str, "%d_%d_%d", t.x, t.y, t.step%4);
                    if(uniqs.find(str) == uniqs.end())
                    {
                        q.push(t);
                        uniqs.insert(str);
                    }
                    
                }
                if(y-1 >= 0 && (arr[x][y-1] == '.' || arr[x][y-1] == 'G' || arr[x][y-1] == 'S'))
                {
                    Point t;
                    t.x = x;
                    t.y = y-1;
                    t.step = (cur.step+1);
                    char str[1024];
                    sprintf(str, "%d_%d_%d", t.x, t.y, t.step%4);
                    if(uniqs.find(str) == uniqs.end())
                    {
                        q.push(t);
                        uniqs.insert(str);
                    }
                    
                }
                if(y+1 < n && (arr[x][y+1] == '.' || arr[x][y+1] == 'G' || arr[x][y+1] == 'S'))
                {
                    Point t;
                    t.x = x;
                    t.y = y+1;
                    t.step = (cur.step+1);
                    char str[1024];
                    sprintf(str, "%d_%d_%d", t.x, t.y, t.step%4);
                    if(uniqs.find(str) == uniqs.end())
                    {
                        q.push(t);
                        uniqs.insert(str);
                    }
                    
                }
                
                
            }
            
            end :
            if(flag)
                cout<<ans<<endl;
            else
                cout<<"impossible"<<endl;
        }
    }
    return 0;
}
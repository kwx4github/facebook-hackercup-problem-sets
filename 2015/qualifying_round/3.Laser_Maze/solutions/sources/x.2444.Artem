// https://pp.vk.me/c540102/v540102394/7cd5/J2NXxBbvBrM.jpg
#pragma GCC optimize("O500")
#pragma comment(linker, "/STACK:1677777216")
#pragma warning(default :4)
#define _CRT_SECURE_NO_DEPRECATE
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <utility>
#include <set>
#include <map>
#include <vector>
#include <stack>
#include <ctime>
#include <queue>
#include <cmath>
#include <deque>
#include <list>
#include <sstream>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
//#include <array>
//#include <unordered_set>
//#include <unordered_map>
#include <cassert>
#include <iomanip>
#define mp make_pair
#define FOR(i,a,b) for(int i=(a),_b(b);i<_b;++i)
#define FORD(i,a,b) for(int i=(a),_b(b);i>=_b;--i)
#define FORA(e,c) for(auto e:c)
#define REP(i,n) FOR(i,0,n)
#define CL(x) memset(x, 0, sizeof(x))
#define SINF(x) memset(x, 0x3F, sizeof(x))
#define SVAL(x, y) memset(x, y, sizeof(x))
#define CP(t, f) memcpy(t, f, sizeof(f));
#define CPS(t, f, s) memcpy(t, f, s*sizeof(f[0]))
#define ALL(a) (a).begin(), (a).end()
#define ALLR(a) (a).rbegin(), (a).rend()
#define FIN freopen("in.txt", "r", stdin);
#define FINOUT freopen("in.txt", "w", stdout);
#define FOUT freopen("out.txt", "w", stdout);
#define y1 ____y1
using namespace std;
typedef const int CI;
typedef long long ll;
typedef unsigned long long ull;
//typedef __float128 ld;
//typedef long double ld;
typedef double ld;
typedef vector<int> VINT;
typedef vector<ld> VLD;
typedef vector<ll> VLL;
typedef vector<vector<int> > VVINT;
typedef pair<int, int> PII;
typedef pair<int, PII> PIII;
typedef pair<PII, PII> PIIII;
typedef pair<ll, ll> PLL;
typedef pair<ld, ld> PLD;
typedef pair<ld, ld> ptp;
typedef complex<ld> Cn;
typedef vector<PII> VPII;
typedef vector<PLL> VPLL;
typedef vector<PIII> VPIII;
typedef unsigned int uint;
const ld eps=1e-12;
//const int INF = 1000000001;
const int oo=0x3F3F3F3F;
const ll ooLL=0x3F3F3F3F3F3F3F3FLL;
const int MOD=1000000007;
template<typename T> T sqr(T x) { return x*x; }
template<typename T> void debpr(const T &);
template<typename T1, typename T2> void debpr(const pair<T1, T2> &);
template<typename T1, typename T2> void debpr(const vector<T1, T2> &);
template<typename T> void debpr(const set<T> &);
template<typename T1, typename T2> void debpr(const map<T1, T2> &);
template<typename T> void prcont(T be, T en, const string &st, const string &fi, const string &mi) { debpr(st); bool ft=0; while (be!=en) { if (ft) debpr(mi); ft=1; debpr(*be); ++be; } debpr(fi); }
template<typename T> void debpr(const T &a) {
#ifdef EgQrauETGh
	cerr<<a;
#endif
}
template<typename T1, typename T2> void debpr(const pair<T1, T2> &p) { debpr("("); debpr(p.first); debpr(", "); debpr(p.second); debpr(")"); }
template<typename T1, typename T2> void debpr(const vector<T1, T2> &a) { prcont(a.begin(), a.end(), "[", "]", ", "); }
template<typename T> void debpr(const set<T> &a) { prcont(a.begin(), a.end(), "{", "}", ", "); }
template<typename T1, typename T2> void debpr(const map<T1, T2> &a) { prcont(a.begin(), a.end(), "{", "}", ", "); }
void deb() {};
template<typename T1> void deb(const T1 &t1) { debpr(t1); debpr('\n'); }
template<typename T1, typename T2> void deb(const T1 &t1, const T2 &t2) { debpr(t1); debpr(' '); debpr(t2); debpr('\n'); }
template<typename T1, typename T2, typename T3> void deb(const T1 &t1, const T2 &t2, const T3 &t3) { debpr(t1); debpr(' '); debpr(t2); debpr(' '); debpr(t3); debpr('\n'); }
template<typename T1, typename T2, typename T3, typename T4> void deb(const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4) { debpr(t1); debpr(' '); debpr(t2); debpr(' '); debpr(t3); debpr(' '); debpr(t4); debpr('\n'); }
const ld PI=acos(-1.);
ll Round(double x) { return x<0?x-.5:x+.5; }
template <typename T> void ass(bool v, const T &x, string m="Fail") { if (!v) { deb(m); deb(x); throw; } }
#ifdef EgQrauETGh
#  include <intrin.h>
#  define __builtin_popcount __popcnt
#endif
int main()
{
#ifdef EgQrauETGh
	FIN; ld tm=clock();
#else
	//freopen("polycomp.in", "r", stdin); freopen("polycomp.out", "w", stdout);
#endif
	void run(); run();
#ifdef EgQrauETGh
	cerr<<setprecision(9)<<fixed;
	deb((clock()-tm)/CLOCKS_PER_SEC);
#endif
	return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int t, d[111][111][4], w[111][111][4], n, m;
PIII q[111*111*4];
char s[111][111];
int dx[]={-1, 0, 0, 1};
int dy[]={0, -1, 1, 0};
string LA="^>v<";
map<char, char> RO{{'^', '>'}, {'>', 'v'}, {'v', '<'}, {'<', '^'}};
map<char, PII> DI{{'^', {-1, 0}}, {'>', {0, 1}}, {'v', {1, 0}}, {'<', {0, -1}}};
bool IN(int x, int y)
{
	return x>=0&&y>=0&&x<n&&y<m;
}
void run()
{
	int t;
	scanf("%d\n", &t);
	REP(TE, t)
	{
		scanf("%d %d\n", &n, &m);
		REP(i, n) gets(s[i]);
		CL(w); SINF(d);
		PII S, F;
		REP(i, n) REP(j, m) if (s[i][j]=='S') S={i, j}; else if (s[i][j]=='G') F={i, j};
		REP(t, 4)
		{
			REP(i, n) REP(j, m)
			{
				if (LA.find(s[i][j])!=string::npos)
				{
					char cc=s[i][j]; REP(it, t) cc=RO[cc];
					int x=i, y=j, dx=DI[cc].first, dy=DI[cc].second;
					while (IN(x, y)&&s[x][y]!='#')
					{
						w[x][y][t]=1; x+=dx; y+=dy;
					}
				}
				if (s[i][j]=='#') w[i][j][t]=1;
			}
		}
		int ql=0, qr=1;
		q[0]={0, S}; d[S.first][S.second][0]=0;
		while (ql<qr)
		{
			PIII e=q[ql++];
			int i=e.second.first, j=e.second.second, ct=e.first, cd=d[i][j][ct];
			ct=(ct+1)%4; ++cd;
			REP(z, 4)
			{
				int x=i+dx[z], y=j+dy[z];
				if (!IN(x, y)||w[x][y][ct]||d[x][y][ct]!=oo) continue;
				d[x][y][ct]=cd;
				q[qr++]={ct, {x, y}};
			}
		}
		int rs=oo;
		REP(i, 4) rs=min(rs, d[F.first][F.second][i]);
		printf("Case #%d: %s\n", TE+1, rs==oo?"impossible":to_string(rs).c_str());
	}
}

#include <iostream>
#include <tuple>
#include <cstring>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <sstream>
#include <numeric>
#include <iterator>
#include <queue>
#include <set>
#include <map>
#include <vector>

#define mp make_pair
#define mt make_tuple
#define pb push_back
#define sqr(x) ((x)*(x))
#define foreach(it,c) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int,int> PII;

template<typename T> int size(const T &a) { return a.size(); } 

const int dx[] = {-1,0,1,0};
const int dy[] = {0,1,0,-1};

int n,m;
char data[200][200];
bool flag[4][200][200];
int visit[4][200][200];

bool pillar(char x) {
    return x != '.' && x != 'S' && x != 'G';
}

bool chk(int x, int y) {
    return x >= 0 && y>=0 && x<n && y<m;
}

void process(void) {
    memset(flag, 0, sizeof(flag));
    memset(visit, 0, sizeof(visit));
    scanf(" %d %d", &n, &m);
    for(int i=0;i<n;i++) {
        scanf(" %s", data[i]);
    }

    for(int i=0;i<4;i++) {
        for(int j=0;j<n;j++) for(int k=0;k<m;k++) {
            if (!pillar(data[j][k])) continue;
            flag[i][j][k] = true;
            int dir;
            switch(data[j][k]) {
                case '^':
                    dir = i % 4;
                    break;
                case '>':
                    dir = (1+i) % 4;
                    break;
                case 'V':
                    dir = (2+i) % 4;
                    break;
                case '<':
                    dir = (3+i) % 4;
                    break;
                default:
                    continue;
            }
            int x = j + dx[dir];
            int y = k + dy[dir];
            while(chk(x,y) && pillar(data[x][y]) == false) {
                flag[i][x][y] = true;
                x += dx[dir];
                y += dy[dir];
            }
        }
    }
    int sx,sy;
    for(int i=0;i<n;i++) for(int j=0;j<m;j++) {
        if(data[i][j] == 'S') {
            sx=i; sy=j;
        }
    }

    queue<tuple<int, int, int> > q;
    q.push(mt(0, sx, sy));
    visit[0][sx][sy] = 1;

    while(!q.empty()) {
        int a,b,c;
        tie(a,b,c) = q.front();
        q.pop();

        if (data[b][c] == 'G') {
            cout << visit[a][b][c] - 1 << endl;
            return;
        }

        int na = (a+1) % 4;
        for(int i=0;i<4;i++) {
            int nb, nc;
            nb = b + dx[i];
            nc = c + dy[i];
            if(!chk(nb, nc)) continue;
            if(flag[na][nb][nc]) continue;
            if(visit[na][nb][nc] != 0) continue;
            visit[na][nb][nc] = visit[a][b][c] + 1;
            q.push(make_tuple(na, nb, nc));
        }
    }
    cout << "impossible" << endl;
}

int main(void) {
    int T;
    scanf("%d", &T);
    for(int i=1;i<=T;i++) {
        printf("Case #%d: ", i);
        process();
    }
}

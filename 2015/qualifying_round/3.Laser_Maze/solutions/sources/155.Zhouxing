/*
    Author: Zhouxing Shi
    Created on Jan9, 2015
*/
#include <bits/stdc++.h>
#define rep(i, a, b) for (int i = (a); i <= (b); ++i)
#define drep(i, a, b) for (int i = (a); i >= (b); --i)
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define pb(x) push_back(x)
#define mp(x, y) (make_pair(x, y))
#define clr(x) memset(x, 0, sizeof(x))
#define xx first
#define yy second

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
const int inf = ~0U >> 1;
const ll INF = ~0ULL >> 1;
template <class T> inline void read(T &n)
{
    char c;
    for (c = getchar(); !(c >= '0' && c <= '9'); c = getchar()); n = c - '0';
    for (c = getchar(); c >= '0' && c <= '9'; c = getchar()) n = n * 10 + c - '0';
}
int Pow(int base, int n, int mo)
{
    if (n == 0) return 1;
    if (n == 1) return base % mo;
    int tmp = Pow(base, n >> 1, mo);
    tmp = (ll)tmp * tmp % mo;
    if (n & 1) tmp = (ll)tmp * base % mo;
    return tmp;
}
//***************************

const int dx[4] = {0, -1, 0, 1};
const int dy[4] = {-1, 0, 1, 0};

int trans(char c)
{
	if (c == '<') return 0;
	else if (c == '^') return 1;
	else if (c == '>') return 2;
	else if (c == 'v') return 3;
}

struct state
{
	int x, y, m;
	state(){}
	state(int _x, int _y, int _m) : x(_x), y(_y), m(_m) {}
} ;

int valid[200][200][4];
int dis[200][200][4], vis[200][200][4], N, M, sx, sy, ex, ey;
char grid[200][200];
queue <state> Q;

int inside(int x, int y)
{
	return x > 0 && y > 0 && x <= N && y <= M;	
}

void work(int caseid)
{
	scanf("%d%d", &N, &M);
	rep(i, 1, N) scanf("%s", grid[i] + 1);
	rep(i, 1, N)
		rep(j, 1, M)
		{
			if (grid[i][j] == 'S') sx = i, sy = j;
			else if (grid[i][j] == 'G') ex = i, ey = j;
		}
		
	memset(valid, 1, sizeof(valid));
		
	rep(k, 0, 3)
	{
		rep(i, 1, N)
			rep(j, 1, M)
				if (grid[i][j] == '<' || grid[i][j] == '>' || grid[i][j] == '^' || grid[i][j] == 'v')
				{
					int dir = (trans(grid[i][j]) + k) % 4;
					int x = i;
					int y = j;
					while (inside(x, y))
					{
						valid[x][y][k] = 0;
						x += dx[dir];
						y += dy[dir];
						if (!inside(x, y)) break;
						if (grid[x][y] != 'S' && grid[x][y] != '.' && grid[x][y] != 'G') break;
					}
				}
	}
		
	memset(dis, 0x7f, sizeof(dis));
	dis[sx][sy][0] = 0;
	vis[sx][sy][0] = 1;
	Q.push(state(sx, sy, 0));
	while (Q.size())
	{
		state u = Q.front(); Q.pop();
		vis[u.x][u.y][u.m] = 0;
		rep(k, 0, 3)
		{
			int nx = u.x + dx[k];
			int ny = u.y + dy[k];
			if (nx > 0 && ny > 0 && nx <= N && ny <= M && 
			grid[nx][ny] != '#' && valid[nx][ny][(u.m + 1) % 4])
			{
				if (dis[u.x][u.y][u.m] + 1 < dis[nx][ny][(u.m + 1) % 4])
				{
					dis[nx][ny][(u.m + 1) % 4] = dis[u.x][u.y][u.m] + 1;
					if (!vis[nx][ny][(u.m + 1) % 4])
					{
						vis[nx][ny][(u.m + 1) % 4] = 1;
						Q.push(state(nx, ny, (u.m + 1) % 4));
					}
				}
			}
		}
	}
	int ans = inf;
	rep(k, 0, 3) ans = min(ans, dis[ex][ey][k]);
	if (ans < dis[0][0][0]) printf("Case #%d: %d\n", caseid, ans);
	else printf("Case #%d: impossible\n", caseid);
}

int main()
{
	//freopen("Cinput.txt", "r", stdin);
	//freopen("Coutput.txt", "w", stdout);
	
	int T;
	
	scanf("%d", &T);
	
	rep(_, 1, T) work(_);
	
    return 0;
}


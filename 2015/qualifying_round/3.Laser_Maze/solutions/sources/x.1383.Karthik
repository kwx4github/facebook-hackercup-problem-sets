#include<cstdio>
#include<iostream>
#include<queue>
#include<vector>
#include<string>
#include<algorithm>

using namespace std;
vector<string> grid;
struct node
{
	int x;
	int y;
	int d;
	int steps;
	
	node(int x, int y, int dir, int steps)
	{
		this->x = x;
		this->y = y;
		this->d = dir;
		this->steps = steps;
		
	}
};

bool laser(vector<int> tx, vector<int> ty, int d, int x, int y)
{
	bool hit = false;
	if(d == 1)
	{
		int i,j;
		for(j=0;j<tx.size();j++){
		for(i=tx[j];i>=0;i--)
		{
			if(grid[i][ty[j]] == '#')
				break;
			if(i == x && ty[j] == y)
				hit = true;
			
		}
		}
		
	}
	if(d == 0)
	{
		int i,j;
		for(j=0;j<tx.size();j++){
		for(i=ty[j];i>=0;i--)
		{
			if(grid[tx[j]][i] == '#')
				break;
			if(tx[j] == x && i == y)
				hit = true;
			
		}
	}
		
	}
	if(d == 3)
	{
		int i,j;
		for(j=0;j<tx.size();j++){
		for(i=tx[j];i<grid[0].length();i++)
		{
			if(grid[i][ty[j]] == '#')
				break;
			if(i == x && ty[j] == y)
				hit = true;
			
		}
	}
		
	}
	if(d == 2)
	{
		int i,j;
		for(j=0;j<tx.size();j++){
		for(i=ty[j];i<grid.size();i++)
		{
			if(grid[tx[j]][i] == '#')
				break;
			if(tx[j] == x && i == y)
				hit = true;
			
		}
	}
		
	}
	
	return hit;
}
int main()
{
	int t;
	cin>>t;
	
	int cas = 1;
	while(t--)
	{
		grid.clear();
		
		int m,n;
		cin>>m>>n;
		
		
		
		int i,j,k;
		for(i=0;i<m;i++)
		{
			string s;
			cin>>s;
			
			grid.push_back(s);
			
		}
		
		bool vis[105][105][5];
		for(i=0;i<105;i++)
		{
			for(j=0;j<105;j++)
			{
				for(k=0;k<5;k++)
					vis[i][j][k] = false;
				
				
			}
			
			
		}
		
		queue<node> bfs;
		int sx, sy, d, ex, ey;
		vector<int> tx, ty;
		for(i=0;i<m;i++)
		{
			for(j=0;j<n;j++)
			{
				if(grid[i][j] == 'S')
				{
					sx = i;
					sy = j;
					grid[i][j] = '.';
					
				}
				if(grid[i][j] == 'G')
				{
					ex = i;
					ey = j;
					grid[i][j] = '.';
					
				}
				if(grid[i][j] == '<')
				{
					d = 0;
					tx.push_back(i);
					ty.push_back(j);
					
				}
				if(grid[i][j] == '^')
				{
					d =1;
					tx.push_back(i);
					ty.push_back(j);
				}	
				if(grid[i][j] == '>')
				{
					d = 2;
					tx.push_back(i);
					ty.push_back(j);
				}	
				if(grid[i][j] == 'v')
				{
					d = 3;
					tx.push_back(i);
					ty.push_back(j);
				}	
				
			}
			
		}
		vis[sx][sy][d] = true;
		bfs.push(node(sx,sy,d,0));
		bool fd = false;
		printf("Case #%d: ",cas);
		cas++;
		while(!bfs.empty())
		{
			node fr = bfs.front();
			bfs.pop();
			
			if(fr.x == ex && fr.y == ey && !laser(tx, ty, fr.d, ex, ey))
			{
				printf("%d\n", fr.steps);
				fd = true;
				break;
				
			}
			int d = (fr.d+1)%4;
			int fx = fr.x;
			int fy = fr.y;
			int steps = fr.steps;
			
			if(fr.x+1<m && grid[fr.x+1][fr.y]=='.' && !laser(tx, ty, d, fr.x+1, fr.y) && !vis[fr.x+1][fr.y][d])
			{
				vis[fx+1][fy][d] = true;
				bfs.push(node(fx+1,fy,d,steps+1));
			}
			if(fy+1<n && grid[fx][fr.y+1]=='.' && !laser(tx, ty, d, fr.x, fr.y+1) && !vis[fr.x][fr.y+1][d])
			{
				vis[fx][fy+1][d] = true;
				bfs.push(node(fx,fy+1,d,steps+1));
			}
			if(fr.x-1>=0 && grid[fr.x-1][fr.y]=='.' && !laser(tx, ty, d, fr.x-1, fr.y) && !vis[fr.x-1][fr.y][d])
			{
				vis[fx-1][fy][d] = true;
				bfs.push(node(fx-1,fy,d,steps+1));
			}
			if(fy-1>=0 && grid[fx][fr.y-1]=='.' && !laser(tx, ty, d, fr.x, fr.y-1) && !vis[fr.x][fr.y-1][d])
			{
				vis[fx][fy-1][d] = true;
				bfs.push(node(fx,fy-1,d,steps+1));
			}
			
		}
		if(!fd)
			printf("impossible\n");
	}
	
	
	
}
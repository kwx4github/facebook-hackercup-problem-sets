#include <iostream>
#include <algorithm>
#include <limits.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <memory.h>
#include <queue>
#include <utility>

using namespace std;

#define Mx 123
#define X first
#define Y second
#define mp make_pair

int dis[ Mx ][ Mx ][ 4 ] , R , C , go[ 4 ][ 2 ] = {{-1,0},{0,1},{1,0},{0,-1}};
bool bck[ Mx ][ Mx ][ 4 ];
char M[ Mx ][ Mx ] , laser[ 4 ] = {94 , 62 , 118 , 60}; //"^>v<"

typedef pair< int , int > ii;
typedef pair< ii , int > iii;

int main()
{
	//puts(laser);

	int T , tx , ty , sx , sy , r , c , nr , nc ;
	int ans;
	cin >> T;

	for( int k = 1; k <= T ; k++ )
	{
		//Clean enviroment
		memset( dis , -1 , sizeof dis );
		memset( bck ,  0 , sizeof bck ); //posibly two laser 

		// Read input and set source and target
		cin >> R >> C;
		for( int i = 0; i < R; i++ )
		{
			cin >> M[ i ];
			for( int j = 0; j < C; j++ )
			{
				if( M[ i ][ j ] == 'S' )
				{
					sx = i; sy = j;
					M[ i ][ j ] = '.';
				}
				if( M[ i ][ j ] == 'G' )
				{
					tx = i; ty = j;
					M[ i ][ j ] = '.';
				}
			}
		}

		// Expand the laser
		for( int i = 0; i < R ; i++)
		{
			for(int j = 0; j < C; j++)
			{
				for( int z = 0; z < 4; z++ )
				{
					if( M[ i ][ j ] == laser[ z ] )
					{
						for( int u = 1; u <= 4; u++ )
						{
							int v = ( u + z ) % 4;
							int uu = u % 4;
							nr = i + go[ v ][ 0 ];
							nc = j + go[ v ][ 1 ];
							while( nr < R && nr >= 0 && nc >= 0 && nc < C && M[ nr ][ nc ] == '.' )
							{
								bck[ nr ][ nc ][ uu ] = true;
								nr = nr + go[ v ][ 0 ];
								nc = nc + go[ v ][ 1 ];
							}
						}
					}
				}
			}
		}

		//Bfs
		queue < iii > Q;

		Q.push( mp( mp( sx , sy ) , 0 ) );
		dis[ sx ][ sy ][ 0 ] = 0;

		while( !Q.empty() )
		{
			r = Q.front().X.X;
			c = Q.front().X.Y;
			int u = Q.front().Y;
			int v = ( dis[ r ][ c ][ u ] + 1 ) % 4;
			Q.pop();
			for( int kk = 0; kk < 4; kk++ )
			{
				nr = r + go[ kk ][ 0 ];
				nc = c + go[ kk ][ 1 ];
				if( nr >= 0 && nr < R && nc >= 0 && nc < C && M[ nr ][ nc ] == '.' && !bck[ nr ][ nc ][ v ] )
				{
					if( (dis[ nr ][ nc ][ v ] == -1) || ( ( dis[ r ][ c ][ u ] + 1 ) < dis[ nr ][ nc ][ v ] ) )  
					{
						Q.push( mp( mp( nr , nc ) , v ) );
						dis[ nr ][ nc ][ v ] = dis[ r ][ c ][ u ] + 1;
					}
				}
			}
		}

		cout << "Case #"<< k << ": " ;
		ans = -1;
		for( int z = 0; z < 4; z++ )
		{
			//cout << endl <<  z << " " << dis[ tx ][ ty ][ z ] << endl; 
			if( dis[ tx ][ ty ][ z ] != -1 )
			{
				ans = ( ans == -1 ) ? dis[ tx ][ ty ][ z ] : min( ans , dis[ tx ][ ty ][ z ] );
			}
		}
		if( ans == -1 )
		{
			cout << "impossible" << endl;
		}
		else
		{
			cout << ans << endl;
		}
	}
	return 0;
}
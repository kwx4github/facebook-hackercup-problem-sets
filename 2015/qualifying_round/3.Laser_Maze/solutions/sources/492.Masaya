#include <bits/stdc++.h>

using namespace std;

#define BET(a,b,c) ((a)<=(b)&&(b)<(c))
#define FOR(i,n) for(int i=0,i##_end=(int(n));i<i##_end;i++)
#define SZ(x) (int)(x.size())
#define ALL(x) (x).begin(),(x).end()
#define MP make_pair
typedef long long ll_t;
typedef vector<int> VI;
typedef vector<VI> VVI;

struct data{
    int row,col,step;
};


bool visited[111][111][4];

int dx[] = {0,1,0,-1};
int dy[] = {-1,0,1,0};
string ds = "^>v<";

int getDir(char c){
    return ds.find(c);
}

bool isTurret(char c){
    return getDir(c) != (int)string::npos;
}

int main()
{
    int t;
    cin>>t;
    FOR(caseNo, t){
        int H,W;
        cin>>H>>W;
        vector<string> dat(H);
        FOR(i,H) cin>>dat[i];

        const int inf = 1<<29;
        int ans = inf;
        queue<data> qu;
        FOR(i,H) FOR(j,W) if(dat[i][j] == 'S') qu.push((data){i,j,0});
        memset(visited , 0 , sizeof(visited));
        while(!qu.empty()){
            data now = qu.front(); qu.pop();
            if(visited[now.row][now.col][now.step%4]++) continue;
            if(dat[now.row][now.col] == 'G'){
                ans = now.step;
                break;
            }
            //cout<<now.row<<" "<<now.col<<endl;
            FOR(k,4){
                int nr = now.row + dy[k];
                int nc = now.col + dx[k];
                if(BET(0,nr,H) && BET(0,nc,W)){
                    if(dat[nr][nc] == '#') continue;
                    if(isTurret(dat[nr][nc])) continue;
                    bool lazered = false;
                    FOR(d,4){
                        int mr = nr + dy[d];
                        int mc = nc + dx[d];
                        while(BET(0,mr,H) && BET(0,mc,W)){
                            if(dat[mr][mc] == '#') break;
                            if(isTurret(dat[mr][mc])){
                                int dir = (getDir(dat[mr][mc]) + now.step+1) % 4;
                                if((d + 2) % 4 == dir){
                                    lazered = true;
                                }
                                break;
                            }
                            mr += dy[d];
                            mc += dx[d];
                        }
                        if(lazered) break;
                    }
                    if(!lazered){
                        qu.push((data){nr,nc,now.step+1});
                    }
                }
            }
        }
        if(ans == inf){
            printf("Case #%d: impossible\n", caseNo+1);
        }else {
            printf("Case #%d: %d\n", caseNo+1, ans);
        }
    }
    return 0;
}

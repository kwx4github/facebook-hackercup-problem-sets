#include <iostream>
#include <cstdio>
#include <sstream>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <queue>

using namespace std;

char input[100][100];
char arr[4][100][100];
int m,n,si,sj,gi,gj;
queue<int> ipos;
queue<int> jpos;
queue<int> iter;
queue<int> timeq;

void tryInsert(int i, int j, int it, int t){
	if(i >= 0 && i < m && j >= 0 && j < n && arr[t][i][j] == '.'){
		ipos.push(i);
		jpos.push(j);
		iter.push(it);
		timeq.push(t);
	}
}

void pop(){
	ipos.pop();
	jpos.pop();
	iter.pop();
	timeq.pop();
}

void clear(){
	ipos = queue<int>();
	jpos = queue<int>();
	iter = queue<int>();
	timeq = queue<int>();
 
}

int convert(char turret){
	switch (turret){
		case '^': return 0;
		case '>': return 1;
		case 'v': return 2;
		case '<': return 3;
		default: cout << "ERR" << endl; exit(1);
	}
}

int idiff(int dir){
	switch (dir){
		case 0: return -1;
		case 1: return 0;
		case 2: return 1;
		case 3: return 0;
		default: cout << "ERR" << endl; exit(1);
	}
}

int jdiff(int dir){
	switch (dir){
		case 0: return 0;
		case 1: return 1;
		case 2: return 0;
		case 3: return -1;
		default: cout << "ERR" << endl; exit(1);
	}
}

void fire(int fromi, int fromj, int dir, int t){
	//cout << fromi << " " << fromj << " " << dir << " " << time << endl;
	int iadd = idiff(dir), jadd=jdiff(dir);
	int i = fromi;// + iadd;
	int j = fromj;// + jadd;
	//cout << i << "i " << j << "j " <<endl;
	do{
		arr[t][i][j] = '#';
		i += iadd;
		j += jadd;
	} while(i >= 0 && i < m && j >= 0 && j < n && arr[t][i][j] == '.');
}

int main(int argc, const char* argv[])
{

	int N;
	cin >> N;
	for (int c = 1; c <= N; c++){
		clear();
		cin >> m >> n;
		for(int i = 0; i < m; i++){
			for(int j = 0; j < n; j++){
				cin >> input[i][j];
				if (input[i][j] == 'S'){
					si = i;
					sj = j;
					input[i][j] = '.';
				}
				if (input[i][j] == 'G'){
					gi = i;
					gj = j;
					input[i][j] = '.';
				}
				for(int k = 0; k < 4; k++)
					arr[k][i][j] = input[i][j];
			}
		}

		for(int i = 0; i < m; i++){
			for(int j = 0; j < n; j++){
				if (input[i][j] != '.' && input[i][j] != '#'){
					int defdir = convert(input[i][j]);
					for(int k = 0; k < 4; k++){
						fire(i, j, (defdir+1+k)%4, (k+1)%4);
					}
				}
			}
		}

		//print test
		/*for(int i = 0; i < m; i++){
			for(int j = 0; j < n; j++)
				cout << input[i][j];
			cout << endl;
		}
		cout << endl;

		for(int k = 0; k < 4; k++){
			cout << k << endl;
			for(int i = 0; i < m; i++){
				for(int j = 0; j < n; j++)
					cout << arr[k][i][j];
				cout << endl;
			}
			cout << endl;
		}*/


		ipos.push(si);
		jpos.push(sj);
		iter.push(0);
		timeq.push(0);
		bool found = false;
		while(!ipos.empty()){
			int i = ipos.front(), j = jpos.front(), it = iter.front(), activtime = (timeq.front()+1)%4;
			if (i == gi && j == gj){
				found = true;
				break;
			}
			if (arr[activtime][i][j]=='O'){
				pop();
				continue;
			}
			//printf("%d %d %d %d\n",i,j,it, activtime);
			for(int k = 0; k < 4; k++)
				tryInsert(i+idiff(k),j+jdiff(k),it+1,activtime);
			arr[activtime][i][j]='O';
			pop();
		}
		if (found)
			cout << "Case #"<<c<<": " << iter.front() << endl;
		else
			cout << "Case #"<<c<<": impossible" << endl;
	}

	return 0;
}


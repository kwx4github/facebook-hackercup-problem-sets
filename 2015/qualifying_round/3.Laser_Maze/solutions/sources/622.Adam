#include <cstdio>
#include <queue>
#include <map>
#include <vector>
#include <set>

using namespace std;

struct position{
	int time,x,y;
};

bool operator<(position a,position b){
	if(a.time!=b.time){return a.time<b.time;}
	if(a.x!=b.x){return a.x<b.x;}
	return a.y<b.y;
}

vector<position> getNeighbours(position st){
	vector<position>ret;
	st.time++;
	st.time%=4;
	st.x++;
	ret.push_back(st);
	st.x-=2;
	ret.push_back(st);
	st.x++;
	st.y++;
	ret.push_back(st);
	st.y-=2;
	ret.push_back(st);
	return ret;
}

char mp[4][109][109];


int main(){
	int t;
	scanf("%d",&t);
	for(int tc=1;tc<=t;tc++){
		int m,n;
		scanf("%d %d",&m,&n);
		for(int i=0;i<m;i++){
			scanf("%s",mp[0][i+1]+1);
			mp[0][i+1][0]='#';
			mp[0][i+1][n+1]='#';
		}
		for(int i=0;i<n+2;i++){
			mp[0][0][i]='#';
			mp[0][m+1][i]='#';
		}
		position start;
		start.time=0;
		for(int i=0;i<m+2;i++){
			for(int j=0;j<n+2;j++){
				if(mp[0][i][j]=='S'){
					start.x=i;
					start.y=j;
					mp[0][i][j]='.';
				}
				for(int k=0;k<3;k++){
					mp[k+1][i][j]=mp[k][i][j];
					if(mp[k+1][i][j]=='^'){
						mp[k+1][i][j]='>';
					}
					else if(mp[k+1][i][j]=='>'){
						mp[k+1][i][j]='v';
					}
					else if(mp[k+1][i][j]=='v'){
						mp[k+1][i][j]='<';
					}
					else if(mp[k+1][i][j]=='<'){
						mp[k+1][i][j]='^';
					}
				}
			}
		}
		for(int i=0;i<m+2;i++){
			for(int j=0;j<n+2;j++){
				for(int k=0;k<4;k++){
					if(mp[k][i][j]=='v'){
						//shoot until hit a wall or turret
						int i2=i+1;
						while(1){
							if(mp[k][i2][j]=='#'||mp[k][i2][j]=='^'||
								mp[k][i2][j]=='v'||mp[k][i2][j]=='<'||
								mp[k][i2][j]=='>'){
								break;
							}
							else{
								mp[k][i2][j]='o';
							}
							i2++;
						}
						mp[k][i][j]='#';
					}
					if(mp[k][i][j]=='^'){
						//shoot until hit a wall or turret
						int i2=i-1;
						while(1){
							if(mp[k][i2][j]=='#'||mp[k][i2][j]=='^'||
								mp[k][i2][j]=='v'||mp[k][i2][j]=='<'||
								mp[k][i2][j]=='>'){
								break;
							}
							else{
								mp[k][i2][j]='o';
							}
							i2--;
						}
						mp[k][i][j]='#';
					}
					if(mp[k][i][j]=='<'){
						//shoot until hit a wall or turret
						int j2=j-1;;
						while(1){
							if(mp[k][i][j2]=='#'||mp[k][i][j2]=='^'||
								mp[k][i][j2]=='v'||mp[k][i][j2]=='<'||
								mp[k][i][j2]=='>'){
								break;
							}
							else{
								mp[k][i][j2]='o';
							}
							j2--;
						}
						mp[k][i][j]='#';
					}
					if(mp[k][i][j]=='>'){
						//shoot until hit a wall or turret
						int j2=j+1;;
						while(1){
							if(mp[k][i][j2]=='#'||mp[k][i][j2]=='^'||
								mp[k][i][j2]=='v'||mp[k][i][j2]=='<'||
								mp[k][i][j2]=='>'){
								break;
							}
							else{
								mp[k][i][j2]='o';
							}
							j2++;
						}
						mp[k][i][j]='#';
					}
				}
			}
		}
		set<position>visited;
		visited.insert(start);
		map<position,int>dist;
		dist[start]=0;
		queue<position>q;
		q.push(start);
		position end;
		bool found=false;
		while(!q.empty()&&!found){
			position cur=q.front();
			q.pop();
			vector<position> nei=getNeighbours(cur);
			for(int i=0;i<nei.size();i++){
				position cur2=nei[i];
				if(mp[cur2.time][cur2.x][cur2.y]!='#'&&
					mp[cur2.time][cur2.x][cur2.y]!='o'){
					if(visited.count(cur2)==0){
						visited.insert(cur2);
						q.push(cur2);
						dist[cur2]=dist[cur]+1;
						if(mp[cur2.time][cur2.x][cur2.y]=='G'){
							end=cur2;
							found=true;
						}
					}
				}
			}
		}
		printf("Case #%d: ",tc);
		if(!found){
			printf("impossible\n");
		}
		else{
			printf("%d\n",dist[end]);
		}
		continue;
		for(int k=0;k<4;k++){
			printf("Time: %d\n",k);
			for(int i=0;i<m+2;i++){
				printf("%s\n",mp[k][i]);
			}
		}
		printf("\n");
		

	}
}

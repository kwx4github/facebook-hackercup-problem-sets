#include <bits/stdc++.h>
#define fr(i,a,b) for (int i = (a), __ = (b); i < __; ++i)
#define rp(i,b) fr(i,0,b)
#define st first
#define nd second
#define pb push_back
#define db(x) cerr << #x << " == " << x << endl
#define _ << ", " <<
using namespace std;

typedef pair<int,int> ii;
typedef pair<ii, int> iii;
typedef long long ll;
typedef vector<int> vi;

const double eps = 1e-9;
const int inf = 0x3f3f3f3f;

/*
esq		0
cima	1
dir		2
baixo	3
*/

int n, m, morre[110][110][4], dist[110][110][4], passo, dx[10] = {0, -1, 0, 1}, dy[10] = {-1, 0, 1, 0};
char mat[110][110];

bool valid(int x, int y){
	return x >= 0 && x < n && y >= 0 && y < m && (mat[x][y] == '.' || mat[x][y] == 'S' || mat[x][y] == 'G');
}

void bfs(int x, int y){
	memset(dist, inf, sizeof dist);
	queue<iii> fila;
	fila.push(iii(ii(x, y), 0));
	dist[x][y][0] = 0;

	while(!fila.empty()){
		iii p = fila.front();
		fila.pop();
		x = p.st.st;
		y = p.st.nd;
		int dir = p.nd;
		fr(i, 0, 4){
			int xx = x+dx[i], yy = y+dy[i], dirr = (dir+1)%4;
			if(valid(xx, yy) && dist[xx][yy][dirr] == inf && morre[xx][yy][dirr] != passo){
				fila.push(iii(ii(xx, yy), dirr));
				dist[xx][yy][dirr] = dist[x][y][dir]+1;
			}
		}
	}
}

int main(){
    freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	int t, caso = 1, xs, ys, xg, yg;
	scanf("%d", &t);
	while(t--){
		scanf("%d%d", &n, &m);
		fr(i, 0, n) fr(j, 0, m){
			scanf(" %c", &mat[i][j]);
			if(mat[i][j] == '<') mat[i][j] = 0;
			if(mat[i][j] == '^') mat[i][j] = 1;
			if(mat[i][j] == '>') mat[i][j] = 2;
			if(mat[i][j] == 'v') mat[i][j] = 3;
			if(mat[i][j] == 'S') {
				xs = i;
				ys = j;
			}
			if(mat[i][j] == 'G') {
				xg = i;
				yg = j;
			}
		}

		passo++;
		fr(i, 0, n) fr(j, 0, m){
			if(mat[i][j] >= 0 && mat[i][j] < 4){
				fr(k, 0, 4){
					int dir = (mat[i][j]+k)%4;
					int ii = i+dx[dir], jj = j+dy[dir];

					while(valid(ii, jj)){
						morre[ii][jj][k] = passo;
						ii += dx[dir];
						jj += dy[dir];
					}
				}
			}
		}

		bfs(xs, ys);
		int ans = inf;
		fr(i, 0, 4){
			ans = min(ans, dist[xg][yg][i]);
		}
		if(ans != inf) printf("Case #%d: %d\n", caso++, ans);
		else printf("Case #%d: impossible\n", caso++);
	}

	return 0;
}

#include <bits/stdc++.h>
using namespace std;
int dist[105][105][5];
char maze[105][105];
const int DX[4] = {0, 1, 0, -1};
const int DY[4] = {1, 0, -1, 0};
const char TURRET[4] = {'^', '<', 'v', '>'};
int main() {
	int T;
	scanf("%d", &T);
	for (int cn = 1; cn <= T; ++cn) {
		int M, N;
		scanf("%d%d", &M, &N);
		pair<int, int> st, en;
		for (int i = 0; i < M; ++i) {
			scanf("%s", maze[i]);
			for (int j = 0; j < N; ++j)
				if (maze[i][j] == 'S') {
					st.first = j;
					st.second = i;
					maze[i][j] = '.';
				} else if (maze[i][j] == 'G') {
					en.first = j;
					en.second = i;
					maze[i][j] = '.';
				}
		}
		memset(dist, -1, sizeof(dist));
		queue<pair<int, pair<int, int> > > Q;
		dist[st.second][st.first][0] = 0;
		Q.push(make_pair(0, st));
		bool ans = false;
		printf("Case #%d: ", cn);
		while (!Q.empty()) {
			auto cur = Q.front();
			Q.pop();
			auto pos = cur.second;
			int tim = cur.first;
			int curd = dist[pos.second][pos.first][tim];
			// Check if can be killed
			if (dist[pos.second][pos.first][tim]) {
				bool bad = false;
				for (int d = 0; d < 4; ++d) {
					int x = pos.first, y = pos.second;
					char turret = TURRET[(d + tim) % 4];
					for (;;) {
						x += DX[d];
						y += DY[d];
						if (x < 0 || y < 0 || x >= N || y >= M) break;
						if (maze[y][x] == turret) {
							bad = true;
							break;
						}
						if (maze[y][x] != '.') break;
					}
					if (bad) break;
				}
				if (bad) continue;
			}
			if (pos == en) {
				printf("%d\n", curd);
				ans = true;
				break;
			}
			for (int d = 0; d < 4; ++d) {
				int nx = pos.first + DX[d];
				int ny = pos.second + DY[d];
				if (nx < 0 || ny < 0 || nx >= N || ny >= M) continue;
				if (maze[ny][nx] != '.') continue;
				auto nex = make_pair((tim + 1) % 4, make_pair(nx, ny));
				if (dist[ny][nx][nex.first] != -1) continue;
				dist[ny][nx][nex.first] = curd + 1;
				Q.push(nex);
			}
		}
		if (!ans) printf("impossible\n");
	}
}


#include <cstdio>
#include <cassert>
#include <queue>
#include <cstring>
#include <cstdlib>
#include <algorithm>

#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

const int INF = (int)1e9;
const int maxn = 111;
int b[maxn][maxn];
char str[maxn];
int  v[4][maxn][maxn];
int dist[4][maxn][maxn];

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

int n, m;

int check(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

void solve(int test) {
	scanf("%d%d", &n, &m);
	int sX, sY;
	int tX, tY;
	sX = sY = tX = tY = 0;
	for (int i = 0; i < n; i++) {
		scanf("%s", str);
		for (int j = 0; j < m; j++) {
			if (str[j] == '#') b[i][j] = 5;
			if (str[j] == '.') b[i][j] = -1;
			if (str[j] == '^') b[i][j] = 0;
			if (str[j] == '>') b[i][j] = 1;
			if (str[j] == 'v') b[i][j] = 2;
			if (str[j] == '<') b[i][j] = 3;
			if (str[j] == 'S') {
				sX = i;
				sY = j;
				b[i][j] = -1;
			}
			if (str[j] == 'G') {
				tX = i;
				tY = j;
				b[i][j] = -1;
			}
		}
	}
	memset(v, 0, sizeof v);
	for (int k = 0; k < 4; k++) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (b[i][j] == -1 || b[i][j] == 5) {
					v[k][i][j] |= b[i][j] == 5;
					continue;
				}
				v[k][i][j] = 1;
				int _dx = dx[(b[i][j] + k) % 4];
				int _dy = dy[(b[i][j] + k) % 4];
				int ii = i + _dx;
				int jj = j + _dy;
				while (check(ii, jj) && b[ii][jj] == -1) {
					v[k][ii][jj] = 1;
					ii += _dx;
					jj += _dy;
				}
			}
		}
	}
	queue<pair<int, pair<int, int>>> pq;
	pq.push(mp(0, mp(sX, sY)));
	for (int k = 0; k < 4; k++) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				dist[k][i][j] = INF;
			}
		}
	}
	dist[0][sX][sY] = 0;
	//assert(!v[0][sX][sY]);
	while (!pq.empty()) {
		auto cur = pq.front();
		pq.pop();
		int cx = cur.second.first;
		int cy = cur.second.second;
		int cr = cur.first;
		//eprintf("(%d, (%d, %d)) = %d\n", cr, cx, cy, dist[cr][cx][cy]);
		for (int k = 0; k < 4; k++) {
			int nx = cx + dx[k];
			int ny = cy + dy[k];
			int nr = (cr + 1) % 4;
			if (check(nx, ny) && !v[nr][nx][ny] && dist[nr][nx][ny] > dist[cr][cx][cy] + 1) {
				dist[nr][nx][ny] = dist[cr][cx][cy] + 1;
				pq.push(mp(nr, mp(nx, ny)));
			}
		}
	}
	int res = INF;
	for (int k = 0; k < 4; k++) res = min(res, dist[k][tX][tY]);
	if (res == INF) {
		printf("Case #%d: impossible\n", test);
	} else {
		printf("Case #%d: %d\n", test, res);
	}
}

int main() {
	int T;
	scanf("%d", &T);
	for (int test = 1; test <= T; test++) solve(test);
}

#include <iostream>
#include<cstdio>
#include<string>
#include<queue>
#include<cstring>
using namespace std;

string s[105];
int rt[105][105],lft[105][105],up[105][105],dwn[105][105],vis[105][105][4];

void init(int mat[105][105],int i,int j)
{
    if(s[i][j]=='^')
        mat[i][j]=0;
    if(s[i][j]=='>')
        mat[i][j]=1;
    if(s[i][j]=='v')
        mat[i][j]=2;
    if(s[i][j]=='<')
        mat[i][j]=3;
    if(s[i][j]=='#')
        mat[i][j]=-1;
    return;
}

bool isSafe(int i,int j,int step)
{
    int r,l,u,d;
    r=-1;l=-1;u=-1;d=-1;
    if(rt[i][j]!=-1)
        r=(rt[i][j]+step)%4;
    if(lft[i][j]!=-1)
        l=(lft[i][j]+step)%4;
    if(up[i][j]!=-1)
        u=(up[i][j]+step)%4;
    if(dwn[i][j]!=-1)
        d=(dwn[i][j]+step)%4;
    if(r==3||l==1||u==2||d==0)
        return false;
    else
        return true;
}

int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("output.in","w",stdout);
    int test,m,n,i,j,stx,sty,enx,eny,step,tt;
    scanf("%d",&test);
    for(tt=1;tt<=test;tt++)
    {
        memset(vis,0,sizeof(vis));
        printf("Case #%d: ",tt);
        scanf("%d%d",&m,&n);
        for(i=0;i<m;i++)
            cin>>s[i];
        for(i=0;i<m;i++)
        {
            for(j=0;j<n;j++)
            {
                if(s[i][j]=='S')
                {
                    stx=i;
                    sty=j;
                    s[i][j]='.';
                }
                if(s[i][j]=='G')
                {
                    enx=i;
                    eny=j;
                    s[i][j]='.';
                }
            }
        }
        for(i=0;i<m;i++)
        {
            j=n-1;
            if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
                rt[i][j]=-1;
            else
                init(rt,i,j);
            for(j=n-2;j>=0;j--)
            {
                if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
                    rt[i][j]=rt[i][j+1];
                else
                    init(rt,i,j);
            }
        }
        for(i=0;i<m;i++)
        {
            j=0;
            if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
                lft[i][j]=-1;
            else
                init(lft,i,j);
            for(j=1;j<n;j++)
            {
                if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
                    lft[i][j]=lft[i][j-1];
                else
                    init(lft,i,j);
            }
        }
        for(j=0;j<n;j++)
        {
            i=0;
            if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
                up[i][j]=-1;
            else
                init(up,i,j);
            for(i=1;i<m;i++)
            {
                if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
                    up[i][j]=up[i-1][j];
                else
                    init(up,i,j);
            }
        }
        for(j=0;j<n;j++)
        {
            i=m-1;
            if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
                dwn[i][j]=-1;
            else
                init(dwn,i,j);
            for(i=m-2;i>=0;i--)
            {
                if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
                    dwn[i][j]=dwn[i+1][j];
                else
                    init(dwn,i,j);
            }
        }
        priority_queue<pair<int,pair<int,int> > >q;
        q.push(make_pair(0,make_pair(stx,sty)));
        int f=0;
        int x,y,ans;
        ans=0;
        //vis[stx][sty][0]=1;
        while(q.empty()==0)
        {
            pair<int,pair<int,int> >p;
            p=q.top();
            q.pop();
            step=-p.first;
            x=p.second.first;
            y=p.second.second;
            if(x==enx&&y==eny)
            {
                f=1;
                ans=step;
                break;
            }
            if(vis[x][y][step%4]==1)
                continue;
            vis[x][y][step%4]=1;
            int r;
            r=(step+1)%4;
            if(y+1<n&&s[x][y+1]=='.'&&vis[x][y+1][r]==0)
            {
                if(isSafe(x,y+1,step+1))
                {
                    //vis[x][y+1][r]=1;
                    q.push(make_pair(-(step+1),make_pair(x,y+1)));
                }
            }
            if(y-1>=0&&s[x][y-1]=='.'&&vis[x][y-1][r]==0)
            {
                if(isSafe(x,y-1,step+1))
                {
                   // vis[x][y-1][r]=1;
                    q.push(make_pair(-(step+1),make_pair(x,y-1)));
                }
            }
            if(x+1<m&&s[x+1][y]=='.'&&vis[x+1][y][r]==0)
            {
                if(isSafe(x+1,y,step+1))
                {
                   // vis[x+1][y][r]=1;
                    q.push(make_pair(-(step+1),make_pair(x+1,y)));
                }
            }
            if(x-1>=0&&s[x-1][y]=='.'&&vis[x-1][y][r]==0)
            {
                if(isSafe(x-1,y,step+1))
                {
                   // vis[x-1][y][r]=1;
                    q.push(make_pair(-(step+1),make_pair(x-1,y)));
                }
            }
        }
        if(f==0)
        {
            printf("impossible\n");
        }
        else
        {
            printf("%d\n",ans);
        }
    }
    return 0;
}

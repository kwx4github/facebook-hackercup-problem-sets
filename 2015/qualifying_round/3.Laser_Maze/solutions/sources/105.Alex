#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cstdlib>
#include<map>
#include<queue>
using namespace std;
#define FOR(i,s,e) for(int i = (s); i < (e); i++)
#define FOE(i,s,e) for(int i = (s); i <= (e); i++)
#define FOD(i,s,e) for(int i = (s); i >= (e); i--)
#define CLR(a) memset(a,0,sizeof(a))
#define LL long long
#include<ctime>

char A[105][105];
bool B[105][105][4]; int V[105][105][4];
int n, m, x, y, z, k, w, T, t, Q[40005][3], X, Y, Z, ans, p;
int a[4] = {0 ,0 ,1 , -1}, b[4] = {1, -1, 0, 0};

int main () {
	
  scanf("%d", &T);
  while (T--) {
  	
  	ans = -1;
  	memset(B, 0, sizeof(B));
	memset(V, -1, sizeof(V));

	scanf("%d%d", &n, &m);
	FOR(i, 0, n) scanf("%s", &A[i]);
	
	FOR(i, 0, n) FOR(j, 0, m) {
		if (A[i][j] == '>') x = 0;
		else if (A[i][j] == 'v') x = 1;
		else if (A[i][j] == '<') x = 2;
		else if (A[i][j] == '^') x = 3;
		else continue;
		p = x;
		FOR(time, 0, 4) {
			x = p;
			x = (x + time) % 4;
			if (x == 0) FOR(k, j + 1, m) {
				if (A[i][k] == '.' || A[i][k] == 'S' || A[i][k] == 'G') B[i][k][time] = 1;
				else break;
			}
			else if (x == 1) FOR(k, i + 1, n) {
				if (A[k][j] == '.' || A[k][j] == 'G' || A[k][j] == 'S') B[k][j][time] = 1;
				else break;
			}
			else if (x == 2) FOD(k, j - 1, 0) {
				if (A[i][k] == '.' || A[i][k] == 'S' || A[i][k] == 'G') B[i][k][time] = 1;
				else break;
			}
			else if (x == 3) FOD(k, i - 1, 0) {
				if (A[k][j] == '.' || A[k][j] == 'G' || A[k][j] == 'S') B[k][j][time] = 1;
				else break;
			}			
		}
	}
	
	/*FOR(time, 0, 4) {
		FOR(i, 0, n) { FOR(j, 0, m) printf("%d", B[i][j][time]); printf("\n"); }
		printf("\n");
	}*/
	
	x = -1; y = 0;
	FOR(i, 0, n) FOR(j, 0, m) if (A[i][j] == 'S') {
		Q[y][0] = i; Q[y][1] = j; Q[y][2] = 0; V[i][j][0] = 0; break;
	}
	
	while (x < y) {
		x++; 
		//printf("%d %d %d\n", Q[x][0], Q[x][1], Q[x][2]);
		FOR(i, 0, 4) {
			X = Q[x][0] + a[i]; Y = Q[x][1] + b[i]; Z = Q[x][2];
			if (X < 0 || X >= n) continue;
			if (Y < 0 || Y >= m) continue;
			if (A[X][Y] == '.' || A[X][Y] == 'S' || A[X][Y] == 'G')
			if (B[X][Y][(Z + 1)% 4] == 0 && V[X][Y][(Z + 1) % 4] == -1) {
				y++; Q[y][0] = X; Q[y][1] = Y; Q[y][2] = Z + 1;
				V[X][Y][(Z + 1) % 4] = Z + 1;
				if (A[X][Y] == 'G') { ans = Z + 1; break; }
			}
		}
		if (ans != -1) break;
	}
	
	printf("Case #%d: ", ++t);
	if (ans == -1) printf("impossible\n");
	else printf("%d\n", ans);
  }
  
  return 0;
}

				
			
			

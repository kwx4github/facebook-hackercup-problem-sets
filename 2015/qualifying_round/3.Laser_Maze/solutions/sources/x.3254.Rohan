/**
 * Created by rohangarg on 1/11/15.
 */
import java.util.*;
import java.io.*;
public class Qual15_LazerMaze {

    public static void main(String[] args) throws Exception {
        input();
    }

    static char[][] grid;
    static void input() throws Exception {
        InputReader in = new InputReader(new FileInputStream("input.txt"));
        //PrintWriter out = new PrintWriter(System.out);
        FileWriter out = new FileWriter("output.txt");

        int t = in.readInt();
        for(int tn=1;tn<=t;tn++) {
            int n=in.readInt(), m=in.readInt(); grid=new char[n][m];
            for(int i=0;i<n;i++) grid[i]=in.readString().toCharArray();
            int sx=-1,sy=-1,gx=-1,gy=-1;
            for(int i=0;i<n;i++) for(int j=0;j<grid[i].length;j++) {
                if (grid[i][j] == 'S') {
                    grid[i][j] = '.';
                    sx = i;
                    sy = j;
                } else if (grid[i][j] == 'G') {
                    grid[i][j] = '.';
                    gx = i;
                    gy = j;
                }
            }
            //out.println("Case #"+tn+": "+solve(grid, sx, sy, gx, gy));
            out.write("Case #"+tn+": "+solve(grid, sx, sy, gx, gy)+"\n");
        }
        out.flush(); out.close();
    }

    static HashSet<String> vis;
    static String solve(char[][] g, int sx, int sy, int gx, int gy) {
        vis=new HashSet<String>();
        PriorityQueue<node> pq = new PriorityQueue<node>();
        pq.add(new node(g, 0, sx, sy)); node init = new node(g, 0, sx, sy);

        while(pq.size()>0) {
            node t = pq.poll(); String s = createString(t); if(vis.contains(s)) continue;
            vis.add(s); if(isDead(t) && !s.equals(createString(init))) continue;
            if(t.x==gx && t.y==gy) return t.d+"";

            int x=t.x, y=t.y;
            if(inGrid(x+1, y, t.g.length, t.g[0].length)) pq.add(new node(newGrid(t.g), t.d+1, x+1, y));
            if(inGrid(x-1, y, t.g.length, t.g[0].length)) pq.add(new node(newGrid(t.g), t.d+1, x-1, y));
            if(inGrid(x, y+1, t.g.length, t.g[0].length)) pq.add(new node(newGrid(t.g), t.d+1, x, y+1));
            if(inGrid(x, y-1, t.g.length, t.g[0].length)) pq.add(new node(newGrid(t.g), t.d+1, x, y-1));
        }
        return "impossible";
    }

    static char[][] newGrid(char[][] g) {
        char[][] ng = new char[g.length][g[0].length];
        for(int i=0;i<g.length;i++)
            for(int j=0;j<g[0].length;j++)
                if(g[i][j]=='^') ng[i][j]='>';
                else if(g[i][j]=='>') ng[i][j]='v';
                else if(g[i][j]=='v') ng[i][j]='<';
                else if(g[i][j]=='<') ng[i][j]='^';
                else ng[i][j]=g[i][j];
        return ng;
    }

    static boolean inGrid(int x, int y, int m, int n) {
        return x>=0 && x<m && y>=0 && y<n;
    }

    static boolean isDead(node n) {
        int r=n.x, c=n.y; char[][] g=n.g;
        for(int i=r-1;i>=0;i--) {
            if(g[i][c]=='v') return true;
            else if(g[i][c]!='.') break;
        }
        for(int i=r+1;i<g.length;i++) {
            if(g[i][c]=='^') return true;
            else if(g[i][c]!='.') break;
        }
        for(int i=c-1;i>=0;i--) {
            if(g[r][i]=='>') return true;
            else if(g[r][i]!='.') break;
        }
        for(int i=c+1;i<g[0].length;i++) {
            if(g[r][i]=='<') return true;
            else if(g[r][i]!='.') break;
        }
        return false;
    }

    static String createString(node t) {
        char[][] g=t.g;
        StringBuilder s=new StringBuilder();
        for(int i=0;i<g.length;i++) for(int j=0;j<g[0].length;j++) s.append(g[i][j]);
        s.append(' '); s.append(t.x); s.append(' '); s.append(t.y);
        return s.toString();
    }

    static class node implements Comparable<node>{
        char[][] g; int d, x, y;
        public node(char[][] _g, int _d, int _x, int _y) {
            g=_g; d=_d; x=_x; y=_y;
        }
        public int compareTo(node n) {
            return this.d-n.d;
        }
    }

    public static class InputReader {

        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1)
                throw new InputMismatchException();
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }

        public int readInt() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public long readLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            long sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }

        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public String next() {
            return readString();
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }
}

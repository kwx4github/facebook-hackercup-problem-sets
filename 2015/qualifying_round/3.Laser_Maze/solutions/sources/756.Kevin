#include <iostream>
#include <queue>

using namespace std;

char origMap[105][105];
bool map[4][105][105];
int dist[4][105][105];
bool seen[4][105][105];

struct point {
    int r, c;
};

struct state {
    point p;
    int k;
};

void reset() {
    for(int k = 0; k < 4; k++) {
        for(int i = 1; i <= 100; i++) {
            for(int j = 1; j <= 100; j++) {
                dist[k][i][j] = 0;
                map[k][i][j] = true;
                seen[k][i][j] = false;
            }
        }
    }
}
point start, end;
int R, C;
const int UP = 0;
const int RIGHT = 1;
const int DOWN = 2;
const int LEFT = 3;
int dr[4] = {-1,0,1,0};
int dc[4] = {0,1,0,-1};

bool onBoard(point p) {
    return p.r >= 1 && p.r <= R && p.c >= 1 && p.c <= C;
}

void laser(int rAt, int cAt, int dir) {
    for(int k = 0; k < 4; k++) {
        int newDir = (dir+k)%4;
        point cur;
        cur.r = rAt+dr[newDir];
        cur.c = cAt+dc[newDir];
        while(onBoard(cur) && origMap[cur.r][cur.c] == '.') {
            map[k][cur.r][cur.c] = false;
            cur.r += dr[newDir];
            cur.c += dc[newDir];
        }
    }
}

void solve() {
    for(int r = 1; r <= R; r++) {
        for(int c = 1; c <= C; c++) {
            if(origMap[r][c] == '.' ||
               origMap[r][c] == 'S' ||
               origMap[r][c] == 'G') {
                origMap[r][c] = '.';
                map[0][r][c] = true;
                map[1][r][c] = true;
                map[2][r][c] = true;
                map[3][r][c] = true;
            } else {
//                cout << r << " " << c << " unwalkable\n";
                map[0][r][c] = false;
                map[1][r][c] = false;
                map[2][r][c] = false;
                map[3][r][c] = false;
            }
        }
    }
    for(int r = 1; r <= R; r++) {
        for(int c = 1; c <= C; c++) {
            switch (origMap[r][c]) {
                case '^':
                    laser(r, c, UP);
                    break;
                case '>':
                    laser(r, c, RIGHT);
                    break;
                case 'v':
                    laser(r, c, DOWN);
                    break;
                case '<':
                    laser(r, c, LEFT);
                    break;
                default:;
            }
        }
    }

    // DEBUG
    /*for(int k = 0; k < 4; k++) {
        cout << "Tick " << k << "\n";
        for(int r = 1; r <= R; r++) {
            for(int c = 1; c <= C; c++) {
                cout << map[k][r][c];
            }
            cout << "\n";
        }

    }*/
    // DEBUG

    state cur;
    cur.p = start;
    cur.k = 0;
    queue<state> q;
    q.push(cur);
    dist[cur.k][cur.p.r][cur.p.c] = 0;
    seen[cur.k][cur.p.r][cur.p.c] = true;
    
    while(!q.empty()) {
        cur = q.front(); q.pop();
        if(cur.p.r == end.r && cur.p.c == end.c) {
            cout << dist[cur.k][cur.p.r][cur.p.c] << "\n";
            return;
        } else {
            int newK = cur.k+1;
            newK %= 4;
            for(int d = 0; d < 4; d++) {
                state temp;
                temp.p.r = cur.p.r+dr[d];
                temp.p.c = cur.p.c+dc[d];
                temp.k = newK;
                if(onBoard(temp.p) && !seen[temp.k][temp.p.r][temp.p.c] && map[temp.k][temp.p.r][temp.p.c]) {
                    dist[temp.k][temp.p.r][temp.p.c] = dist[cur.k][cur.p.r][cur.p.c]+1;
                    seen[temp.k][temp.p.r][temp.p.c] = true;
                    q.push(temp);
                }
            }
        }
    }
    cout << "impossible\n";
    
}

int main() {
    int T;
    cin >> T;
    for(int t = 1; t <= T; t++) {
        cout << "Case #" << t << ": ";
        reset();
        cin >> R >> C;
        for(int r = 1; r <= R; r++) {
            for(int c = 1; c <= C; c++) {
                cin >> origMap[r][c];
                if(origMap[r][c] == 'S') {
                    start.r = r;
                    start.c = c;
                } else if(origMap[r][c] == 'G') {
                    end.r = r;
                    end.c = c;
                }
            }
        }
        solve();
    }
    return 0;
}

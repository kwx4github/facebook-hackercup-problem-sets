#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
#define MAXN 105
using namespace std;

struct pt {
  int x, y, t;
  pt(int _x=0,int _y=0,int _t=0) {x = _x, y = _y, t = _t;}
};
int N,M,testcase,block[MAXN][MAXN][4],dist[MAXN][MAXN][4];
char laser[4] = {'^','>','v','<'}, board[MAXN][MAXN];
int dir[5][2] = { {-1,0},{0,1},{1,0},{0,-1},{0,0} };
queue <pt> q;

bool can(int x,int y) {
  if (!(x >= 0 && x < N && y >= 0 && y < M)) return 0;
  for (int k=0;k<4;++k) if (board[x][y] == laser[k]) return 0;
  return board[x][y] != '#';
}

bool ok(int x,int y,int t){ return block[x][y][t] == 0;}

int main () {
  scanf("%d",&testcase);
  for (int TC=1;TC<=testcase;++TC) {
    scanf("%d%d",&N,&M);
    for (int i=0;i<N;++i)
      for (int j=0;j<M;++j)
        scanf(" %c",&board[i][j]);
    while (!q.empty()) q.pop();
    memset(block,0,sizeof(block));
    memset(dist,-1,sizeof(dist));
    for (int a=0;a<4;++a) {
      for (int i=0;i<N;++i)
        for (int j=0;j<M;++j)
          if (board[i][j] == 'S') {
            q.push(pt(i,j,0));
            dist[i][j][0] = 0;
          }
          else if(board[i][j] == '#')
            for (int k=0;k<4;++k) block[i][j][k] = 1;
          else
            for (int k=0;k<4;++k)
              if (laser[k] == board[i][j]) {
                int x = i, y = j;
                do {
                  block[x][y][a] = 1;
                  x += dir[k][0];
                  y += dir[k][1];
                } while (can(x,y));
                break;
              }
      for (int i=0;i<N;++i)
        for (int j=0;j<M;++j)
          for (int k=0;k<4;++k)
            if (board[i][j] == laser[k]) {
              board[i][j] = laser[(k+1)%4];
              break;
            }
    }
    int ans = -1;
    while (!q.empty()) {
      pt cur = q.front();
      q.pop();
      if (board[cur.x][cur.y] == 'G') {
        ans = dist[cur.x][cur.y][cur.t];
        break;
      }
      int p = (cur.t+1)%4;
      for (int k=0;k<4;++k) {
        pt val = pt(cur.x+dir[k][0], cur.y + dir[k][1], p);
        if (can(val.x,val.y) && ok(val.x,val.y,val.t) && dist[val.x][val.y][val.t] == -1) {
          dist[val.x][val.y][val.t] = dist[cur.x][cur.y][cur.t] + 1;
          q.push(val);
        }
      }
    }
    if (ans == -1) printf("Case #%d: impossible\n",TC);
    else printf("Case #%d: %d\n",TC,ans);
  }
}

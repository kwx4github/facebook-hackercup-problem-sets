#include <iostream>
#include <cstdio>
#include <unordered_map>
#include <queue>
using namespace std;

char maze[102][102];
bool danger[102][102][4];
int result[102][102][4];
int gx, gy;
// UP RIGHT DOWN LEFT
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

struct qpos {
    int r, c, t;
};

/*
 * MIGHT GET USEFUL SOMETIMES :)
unordered_map<int, unordered_map<int, unordered_map<int, int>>> memo;

bool in_map(int r, int c, int t) {
    if (memo.find(r) == memo.end()) return false;
    if (memo[r].find(c) == memo[r].end()) return false;
    if (memo[r][c].find(t) == memo[r][c].end()) return false;
    return true;
}

void set_map(int r, int c, int t, int result) {
    memo[r][c][t] = result;
}

int get_map(int r, int c, int t) {
    return memo[r][c][t];
}
*/

/**
 * @brief Solves the task using DP
 * @param r Starting row
 * @param c Starting column
 * @param t Current tick
 * @return -1 if no solution available or number of steps in best solution
 */
int solve(int r, int c, int t) {
    // BFS through time-space continuum
    queue<qpos> q;
    for (int i = 0; i < 4; i++) {
        // If target not endangered in the tock
        if (!danger[gx][gy][i])
            q.push({gx,gy,i});
    }
    while (!q.empty()) {
        qpos akt = q.front();
        q.pop();
        int ar = akt.r;
        int ac = akt.c;
        int at = akt.t;
        for (int i = 0; i < 4; i++) {
            int tr = ar + dx[i];
            int tc = ac + dy[i];
            int tt = (at - 1) == -1 ? 3 : at - 1;
            if (result[tr][tc][tt] == -1) {
                // wasn't here yet
                if ((maze[tr][tc] == '.' || maze[tr][tc] == 'S')) {
                    // can step here
                    if (!danger[tr][tc][tt] || (maze[tr][tc] == 'S' && tt == 0)) {
                        // and won't receive a laser in da face
                        result[tr][tc][tt] = result[ar][ac][at] + 1;
                        q.push({tr, tc, tt});
                    }
                }
            }
        }
        // We are moving backwards in time :)
    }
    return result[r][c][t];
}

int main()
{
    int T; scanf("%d", &T);
    for (int I = 1; I <= T; I++) {
        // Clean up
        int M, N; scanf("%d %d", &M, &N);
        for (int i = 0; i < M+2; i++) {
            for (int j = 0; j < N+2; j++) {
                for (int k = 0; k < 4; k++) {
                    danger[i][j][k] = 0;
                    result[i][j][k] = -1;
                }
            }
        }

        // Set sentinels
        for (int i = 0; i < M+2; i++) {
            maze[i][0] = '#';
            maze[i][N+1] = '#';
        }
        for (int i = 0; i < N+2; i++) {
            maze[0][i] = '#';
            maze[M+1][i] = '#';
        }

        // Read the maze
        int sx, sy;
        for (int i = 1; i <= M; i++) {
            for (int j = 1; j <= N; j++) {
                char c; scanf(" %c", &c);
                maze[i][j] = c;
                if (c == 'S') {
                    sx = i, sy = j;
                } else if (c == 'G') {
                    gx = i, gy = j;
                }
            }
        }

        // Initialize result
        for (int i = 0; i < 4; i++) {
            result[gx][gy][i] = 0;
        }

        // Calculate danger
        for (int i = 1; i <= M; i++) {
            for (int j = 1; j <= N; j++) {
                int st = -1;
                if (maze[i][j] == '^') st = 0;
                else if (maze[i][j] == '>') st = 1;
                else if (maze[i][j] == 'v') st = 2;
                else if (maze[i][j] == '<') st = 3;
                if (st == -1) continue;

                // in all tocks:
                for (int tock = 0; tock < 4; tock++) {
                    int direction = (st + tock) % 4;
                    int tx = i+dx[direction], ty = j+dy[direction];
                    while (maze[tx][ty] == '.' || maze[tx][ty] == 'S' || maze[tx][ty] == 'G') {
                        danger[tx][ty][tock] = 1;
                        tx += dx[direction];
                        ty += dy[direction];
                    }
                }
            }
        }

        // Run the algorithm
        int r = solve(sx, sy, 0);
        printf("Case #%d: ", I);
        r == -1 ? printf("impossible\n") : printf("%d\n", r);
    }
    return 0;
}


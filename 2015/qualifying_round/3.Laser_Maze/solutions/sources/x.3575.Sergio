#include <iostream>
#include <algorithm>
#include <string>
#include <queue>
#include <vector>
#include <stdio.h>

using namespace std;
    int w, h, fx,fy;
    vector<string> m;
    int v[100][100];
    int v2[100][100];
    queue<int> qx,qy,qc,qp;

void show(int i, int j){
     cout << endl;    
     for (int y = 0; y < h; y++){
         for (int z = 0; z < w; z++){
             if (y==j && z==i)
                cout << "*";
             else if (v[y][z]==0)
                cout << m[y][z];
                else
                    cout << v[y][z];
             }
         cout << endl;                 
         }    
     cout << endl;    
     }
     
void laser(int x,int y,int a, int b, int dx, int dy){
    if (x==-1){
       return;
       }
    for (int i=a, j=b, p=1; p<=8 ; i+=dx,j+=dy,p*=2 ){
            if (i>1 || i<-1){
               dx*=-1;
               i+=2*dx;
               }
            if (j>1 || j<-1){
               dy*=-1;
               j+=2*dy;
               }
            for (int i2=x+i, j2=y+j; i2>=0 && j2>=0 && i2<w && j2<h ;i2+=i, j2+=j){
                if (m[j2][i2]!='#' && m[j2][i2]!='^' && m[j2][i2]!='>' && m[j2][i2]!='v' && m[j2][i2]!='<'){
                   v[j2][i2]+=p;
                   }
                   else{
                        break;
                        }
                }
        }
    }
    
int rec(){
    int x, y, c, p, temp;
    while(!qx.empty()){
        x=qx.front();
        y=qy.front();
        c=qc.front();        
        p=qp.front();
        if(p>8)p=1;
        if (x>=0 && x<w && y>=0 && y<h && p!=v[y][x] && v2[y][x] < 5 && (m[y][x]=='.'||m[y][x]=='S'||m[y][x]=='G') && c<w*h*4){
/*           show(x,y);
           cout << c << endl;
           cout << "------------------------" << endl; */
           if (x==fx && y==fy){
//               cout << x << "," << y << " : " << c << endl;
               return c;
               }
//            getchar();
            v2[y][x]++;
            qx.push(x+1);qy.push(y);qc.push(c+1);qp.push(p*2);
            qx.push(x);qy.push(y+1);qc.push(c+1);qp.push(p*2);
            qx.push(x-1);qy.push(y);qc.push(c+1);qp.push(p*2);
            qx.push(x);qy.push(y-1);qc.push(c+1);qp.push(p*2);
            }                  
        qx.pop();qy.pop();qc.pop();qp.pop();
        }
    return 0;
    }

int main(){
    int C, k,ix=-1,iy=-1;
    string s;
    cin >> C;
    for (int j=1;j<=C;j++){
        cin >> h >> w;
        for (int y = 0; y < h; y++)
            for (int z = 0; z < w; z++){
                v[y][z]=0;
                v2[y][z]=0;
                }
        m.clear();
        while (!qx.empty()){
              qx.pop();qy.pop();qc.pop();qp.pop();
              }
        ix=-1,fx=-1;
        for (int z = 0; z < h; z++){
            cin >> s;
            if(ix==-1 && (ix=s.find('S'))!=-1)iy=z;
            if(fx==-1 && (fx=s.find('G'))!=-1)fy=z;            
            m.push_back(s);
            }
        for (int z = 0; z < h; z++){
            laser(m[z].find('^'),z, 1, 0,-1, 1);
            laser(m[z].find('>'),z, 0, 1,-1,-1);
            laser(m[z].find('v'),z,-1, 0, 1,-1);            
            laser(m[z].find('<'),z, 0,-1, 1, 1); 
            }
        k=0;
        qx.push(ix+1);qy.push(iy);qc.push(1);qp.push(1);
        qx.push(ix);qy.push(iy+1);qc.push(1);qp.push(1);
        qx.push(ix-1);qy.push(iy);qc.push(1);qp.push(1);
        qx.push(ix);qy.push(iy-1);qc.push(1);qp.push(1);
        k=rec();
        if (k>0)    
           cout << "Case #"<< j << ": " << k << endl;
           else
               cout << "Case #"<< j << ": impossible"<< endl;
        }
    return 0;
    }

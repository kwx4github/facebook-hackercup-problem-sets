#include<iostream>
#include<stdio.h>
#include<fstream>
using namespace std;
struct coord
{
    int x;
    int y;
    coord(int i=0,int j=0)
    { x=i; y=j; }
    void setc(int i,int j)
    { x=i; y=j;}
};
struct queu
{

    struct coord q[10001];
    int frnt,rear,maxi;
    queu() { frnt=rear=-1; maxi=10000;}
    void push(int x,int y)
    {
        if(rear==-1) frnt=rear=0;
        q[rear].x=x; q[rear].y=y;
        rear=(rear+1)%maxi;
    }
    struct coord pop()
    {
        struct coord t;
        if(frnt==-1) t.setc(-1,-1);
        else t=q[frnt];
        frnt=(frnt+1)%maxi;
        if(frnt==rear) frnt=rear=-1;
        return t;
    }
};
bool laser(char maze[][101],int m,int n,int x,int y,int dist)
{
    struct coord co(x,y);
    int i,j;
    for(i=0;i<co.x;i++)
    if(maze[i][co.y]=='^') if(dist%4==2) return false; else;
    else if(maze[i][co.y]=='>') if(dist%4==1) return false; else;
    else if(maze[i][co.y]=='v') if(dist%4==0) return false; else;
    else if(maze[i][co.y]=='<') if(dist%4==3) return false; else;

    for(i=co.x+1; i<m ;i++)
    if(maze[i][co.y]=='^') if(dist%4==0) return false; else;
    else if(maze[i][co.y]=='>') if(dist%4==3) return false; else;
    else if(maze[i][co.y]=='v') if(dist%4==2) return false; else;
    else if(maze[i][co.y]=='<') if(dist%4==1) return false; else;

    for(i=0;i<co.y;i++)
    if(maze[co.x][i]=='^') if(dist%4==1) return false; else;
    else if(maze[co.x][i]=='>') if(dist%4==0) return false; else;
    else if(maze[co.x][i]=='v') if(dist%4==3) return false; else;
    else if(maze[co.x][i]=='<') if(dist%4==2) return false; else;

    for(i=co.y+1;i<n;i++)
    if(maze[co.x][i]=='^') if(dist%4==3) return false; else;
    else if(maze[co.x][i]=='>') if(dist%4==2) return false; else;
    else if(maze[co.x][i]=='v') if(dist%4==1) return false; else;
    else if(maze[co.x][i]=='<') if(dist%4==0) return false; else;

    return true;
}
int main()
{
ofstream fout; fout.open("output1.txt");
    struct coord s,g,temp;
    queu q;
    //cout<<g.x<<" "<<g.y;
    char maze[101][101],c,neighbour[4];
    int t,m,n,i,j,a[101][101],flag; cin>>t;
    for(int j=1;j<=t;j++)
    {
        cin>>m; cin>>n;
        for(int k=0;k<m;k++)
        {
            c=getchar();
            for(int l=0;l<n;l++)
            {
                c=getchar_unlocked();
                if(c=='S') s.setc(k,l);
                else if(c=='G') g.setc(k,l);
                maze[k][l]=c;
                a[k][l]=-1;
            }

            maze[k][n]='\0';
        }
        //for(int k=0;k<m;k++) cout<<maze[k]<<endl;
        q.push(s.x,s.y); a[s.x][s.y]=0;
        for(temp=q.pop(),i=0; temp.x!=-1 && i<30 ; temp=q.pop(),i++)
        {
            //cout<<"pop "<<temp.x<<" "<<temp.y<<endl;
            if(g.x==temp.x && g.y==temp.y) break;
            flag=0;
            if(temp.x>0)
            if((a[temp.x-1][temp.y] ==-1 || a[temp.x-1][temp.y]>a[temp.x][temp.y]+1) && maze[temp.x-1][temp.y]=='.'
             || maze[temp.x-1][temp.y]=='G')
            { if(!laser(maze,m,n,temp.x-1,temp.y,a[temp.x][temp.y]+1)) a[temp.x][temp.y]+=2;
             q.push(temp.x-1,temp.y);      a[temp.x-1][temp.y] = a[temp.x][temp.y]+1;
            //cout<<"pushing "<<temp.x-1<<" "<<temp.y<<endl; flag=1;
            }
            //else neighbour[0]='l';
            else neighbour[0]='>';

            if(temp.x<m-1)
            if((a[temp.x+1][temp.y] ==-1 || a[temp.x+1][temp.y]>a[temp.x][temp.y]+1) && maze[temp.x+1][temp.y]=='.'
             || maze[temp.x+1][temp.y]=='G')
            { if(!laser(maze,m,n,temp.x+1,temp.y,a[temp.x][temp.y]+1)) a[temp.x][temp.y]+=2;
             q.push(temp.x+1,temp.y);      a[temp.x+1][temp.y]=a[temp.x][temp.y]+1;
            //cout<<"pushing "<<temp.x+1<<" "<<temp.y<<endl; flag=1;
            }
            //else neighbour[1]='l';
            else neighbour[1]='>';

            if(temp.y>0)
            if((a[temp.x][temp.y-1] ==-1 || a[temp.x][temp.y-1]>a[temp.x][temp.y]+1) && maze[temp.x][temp.y-1]=='.'
            || maze[temp.x][temp.y-1]=='G')
            { if(!laser(maze,m,n,temp.x,temp.y-1,a[temp.x][temp.y]+1)) a[temp.x][temp.y]+=2;
             q.push(temp.x,temp.y-1);      a[temp.x][temp.y-1]=a[temp.x][temp.y]+1;
            //cout<<"pushing "<<temp.x<<" "<<temp.y-1<<endl; flag=1;
            }
            //else neighbour[2]='l';
            else neighbour[2]='>';

            if(temp.y<n-1)
            if((a[temp.x][temp.y+1] ==-1 || a[temp.x][temp.y+1]>a[temp.x][temp.y]+1) && maze[temp.x][temp.y+1]=='.'
            || maze[temp.x][temp.y+1]=='G')
            { if(!laser(maze,m,n,temp.x,temp.y+1,a[temp.x][temp.y]+1)) a[temp.x][temp.y]+=2;
             q.push(temp.x,temp.y+1);      a[temp.x][temp.y+1]=a[temp.x][temp.y]+1;
            //cout<<"pushing "<<temp.x<<" "<<temp.y+1<<endl; flag=1;
            }
            //else neighbour[3]='l';
            else neighbour[3]='>';

            //if(flag==0) for()
        }
        if(a[g.x][g.y]==-1) fout<<"Case #"<<j<<": "<<"impossible\n";
        else fout<<"Case #"<<j<<": "<<a[g.x][g.y]<<endl;
        //cout<<endl;
        //for(int k=0;k<m;k++,cout<<endl) for(int l=0;l<n;l++) cout<<a[k][l]<<" ";
    }
}

#include<stdio.h>
#include<queue>
#include<vector>

using namespace std;



struct space
{
    char c;
    bool viz[4];
    bool lazor[4];
};

struct elem
{
    int l,c;
    int pasi;
    elem(int l,int c,int pasi)
    {
        this->l=l;
        this->c=c;
        this->pasi=pasi;
    }
    elem(){}
};



int T,m,n,ras;
space mat[105][105];
elem goal;


class cmp
{
    public: bool operator()(const elem &e1,const elem &e2)
    {
        float dist1=(e1.c-goal.c)*(e1.c-goal.c)+(e1.l-goal.l)*(e1.l-goal.l);
        float dist2=(e2.c-goal.c)*(e2.c-goal.c)+(e2.l-goal.l)*(e2.l-goal.l);
        if(e1.pasi==e2.pasi)return dist1>dist2;
        return e1.pasi>e2.pasi;
    };
};

priority_queue<elem,vector<elem>, cmp> Q;

void put_lazor(int l,int c,int type,int turn)
{
    if(type==0)
        for(int i=l;i>=0;--i)mat[i][c].lazor[turn]=1;
    else  if(type==1)
        for(int i=c;i<m;++i)mat[l][i].lazor[turn]=1;
    else  if(type==2)
        for(int i=l;i<n;++i)mat[i][c].lazor[turn]=1;
    else  if(type==3)
        for(int i=c;i>=0;--i)mat[l][i].lazor[turn]=1;
}

void get_lazor(int l,int c)
{
    int type;
    if(mat[l][c].c=='^')type=0;
    else if(mat[l][c].c=='>')type=1;
    else if(mat[l][c].c=='v')type=2;
    else if(mat[l][c].c=='<')type=3;
    for(int i=0;i<4;++i)
    {
        put_lazor(l,c,type,i);
        type++;
        if(type==4)type=0;
    }
}

int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};

inline void expand()
{
    elem top=Q.top();
    Q.pop();
    for(int i=0;i<4;++i)
    {
        int l2=top.l+dx[i];
        int c2=top.c+dy[i];
        int pasi=top.pasi+1;
        int moment=(top.pasi+1)%4;
        if(l2>=0&&c2>=0&&l2<m&&c2<n)
          if(mat[l2][c2].c=='.'||mat[l2][c2].c=='G'||mat[l2][c2].c=='S')
            if(mat[l2][c2].viz[moment]==0&&mat[l2][c2].lazor[moment]==0)
            {
                if(mat[l2][c2].c=='G'){ras=pasi;return;}
                mat[l2][c2].viz[moment]=1;
                Q.push(*new elem(l2,c2,pasi));
            }
    }

}

int main()
{
    freopen("input","r",stdin);
    freopen("output","w",stdout);
    scanf("%d",&T);
    for(int t=1;t<=T;++t)
    {
        Q=priority_queue<elem,vector<elem>,cmp>();
        ras=-1;
        scanf("%d%d\n",&m,&n);
        for(int i=0;i<m;++i)
        {
            for(int j=0;j<n;++j)
            {
                scanf("%c",&mat[i][j].c);
                for(int k=0;k<4;++k){mat[i][j].viz[k]=0;mat[i][j].lazor[k]=0;}
                if(mat[i][j].c=='G')goal=*new elem(i,j,0);
                else if(mat[i][j].c=='S')Q.push(*new elem(i,j,0));
            }
            scanf("\n");
        }
        for(int i=0;i<m;++i)
            for(int j=0;j<n;++j)
            if(mat[i][j].c=='>'||mat[i][j].c=='v'||mat[i][j].c=='<'||mat[i][j].c=='^')get_lazor(i,j);
        //if(mat[Q.top().l][Q.top().c].lazor[0]==1)Q.pop();
        while(Q.size()>0&&ras==-1)expand();
        if(ras==-1)printf("Case #%d: impossible\n",t);
        else printf("Case #%d: %d\n",t,ras);
    }
    return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <limits>
using namespace std;

// Types
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int,int> ipair;
const double pi=acos(-1.0);
const double eps=1e-11;

// Generic
#define SIZE(X) ((int)(X.size()))
#define LENGTH(X) ((int)(X.length()))
#define MP(X,Y) make_pair(X,Y)
#define FORD(i, a, b) for(int i=(a); i<(b); i++)
#define FORS(i, a) for(int i=(0); i<SIZE(a); i++)
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
template<class T> inline T sqr(T x){return x*x;}

// Bit manipulation
template<class T> void setbit(T& v, int position)    { v |= (T)1 << position; }
template<class T> void unsetbit(T& v, int position)  { v &= ~((T)1 << position); }
template<class T> void togglebit(T& v, int position) { v ^= (T)1 << position; }
template<class T> bool isbit(T v, int position) { return (v & ((T)1 << position)) != 0; }
template<class T> inline int countbit(T n){return (n==0)?0:(1+countbit(n&(n-1)));}

// Input / Output
string ReadToEndLine(istream& s) { string sLine; getline(s, sLine); return sLine; }
char gStr[1024];
// sprintf_s(gStr, "%d", );

struct Runner
{
	Runner(istream& in, ostream& out) : mIn(in), mOut(out), mCase(0) {}
	void RunAll();
	void Run();
	istream& mIn; ostream& mOut;
	size_t mCase;
};

void Runner::RunAll()
{
    size_t caseCount;
    mIn >> caseCount;
    ReadToEndLine(mIn);
    for(size_t c=0; c<caseCount; ++c)
    {
        mCase = c + 1;
		cout << "Case " << mCase << ": ... ";
        Run();
		cout << "done" << endl;
    }
}

// 
const int mW = -1;
const int mE = -2;
const int mImpossible = -1;
const int mUnvisited = -2;
pair<int, int> S, G;

//
int Rows, Cols;
vector<vector<int> > Maze(101, vector<int>(101));
vector<vector<pair<int, int> > > LbyRow(101), LbyCol(101);

//   R, C             <           ^           >         v
int DIR[4][2] = { { 0, -1 }, { -1, 0 }, { 0, 1 }, { 1, 0 } };

// DP state
vector<int> D(66000);

int makeMask(int r, int c, int rot)
{
	return r | (c << 7) | (rot << 14);
}

bool isValid(int r, int c)
{
	return (r >= 0 && r < Rows && c >= 0 && c < Cols && Maze[r][c] == mE);
}

bool isGoal(int r, int c)
{
	return r == G.first && c == G.second;
}

void readMaze(istream& mIn)
{
	FORD(r, 0, Rows)
	{
		string row;
		mIn >> row;
		FORS(c, row)
		{
			switch (row[c])
			{
			case '.':
				Maze[r][c] = mE;
				break;
			case '#':
				Maze[r][c] = mW;
				break;
			case 'S':
				S = MP(r, c);
				Maze[r][c] = mE;
				break;
			case 'G':
				G = MP(r, c);
				Maze[r][c] = mE;
				break;
			case '<':
				LbyRow[r].push_back(MP(c, 0));
				LbyCol[c].push_back(MP(r, 0));
				Maze[r][c] = 0;
				break;
			case '^':
				LbyRow[r].push_back(MP(c, 1));
				LbyCol[c].push_back(MP(r, 1));
				Maze[r][c] = 1;
				break;
			case '>':
				LbyRow[r].push_back(MP(c, 2));
				LbyCol[c].push_back(MP(r, 2));
				Maze[r][c] = 2;
				break;
			case 'v':
			case 'V':
				LbyRow[r].push_back(MP(c, 3));
				LbyCol[c].push_back(MP(r, 3));
				Maze[r][c] = 3;
				break;
			}
		}
	}
}

bool hitByLaser(int r, int c, int lR, int lC, int dir)
{
	do
	{
		lR += DIR[dir][0];
		lC += DIR[dir][1];
		if (!isValid(lR, lC))
			return false;

		if (lR == r && lC == c)
			return true;
	} while (true);
	return false;
}

bool hitByLasers(int r, int c, int step)
{
	FORS(i, LbyRow[r])
	{
		if (hitByLaser(r, c, r, LbyRow[r][i].first, (step + LbyRow[r][i].second) % 4))
			return true;
	}
	FORS(i, LbyCol[c])
	{
		if (hitByLaser(r, c, LbyCol[c][i].first, c, (step + LbyCol[c][i].second) % 4))
			return true;
	}
	return false;
}

int iter(int r, int c, int step);
void checkDir(int r, int c, int step, int &D)
{
	int cur = iter(r, c, step) + 1;
	if (cur > 0 && (D == mImpossible || D > cur))
		D = cur;
}

int iter(int r, int c, int step)
{
	if (!isValid(r, c))
		return mImpossible;

	int mask = makeMask(r, c, step);
	if (D[mask] != mUnvisited)
		return D[mask];
	D[mask] = mImpossible;

	if (!hitByLasers(r, c, step))
	{
		if (isGoal(r, c))
		{
			D[mask] = 0;
		}
		else
		{
			int nextStep = (step + 1) % 4;
			checkDir(r + 1, c, nextStep, D[mask]);
			checkDir(r - 1, c, nextStep, D[mask]);
			checkDir(r, c + 1, nextStep, D[mask]);
			checkDir(r, c - 1, nextStep, D[mask]);
		}
	}

	return D[mask];
}

void Runner::Run()
{
	FORS(i, D)
		D[i] = mUnvisited;
	FORS(i, LbyRow)
	{
		LbyRow[i].clear();
		LbyCol[i].clear();
	}

	mIn >> Rows >> Cols;
	readMaze(mIn);

	int r = S.first;
	int c = S.second;
	int res=mImpossible;
	checkDir(r + 1, c, 1, res);
	checkDir(r - 1, c, 1, res);
	checkDir(r, c + 1, 1, res);
	checkDir(r, c - 1, 1, res);

	mOut << "Case #" << mCase << ": ";
	if (res == mImpossible)
		mOut << "impossible";
	else
		mOut << res;
	mOut << endl;
}


string pathToCpp = __FILE__;
#ifdef LOCAL
#include "local_IO.cpp"
#endif

void main(int argc, char *argv[])
{
	string pathToFiles = pathToCpp;
	pathToFiles.resize(pathToFiles.size() - 4);
	string pathToInput = pathToFiles + ".in.txt";
	if(argc >= 2)
	{
		pathToFiles = pathToInput = argv[1];
	}

	{
		ifstream sIn(pathToInput);
		ofstream sMy(pathToFiles + ".my.txt");
		Runner runner(sIn, sMy);
		runner.RunAll();
	}

#ifdef LOCAL
	check_Nto1(pathToFiles + ".ok.txt", pathToFiles + ".my.txt");
#endif

	getchar();
}

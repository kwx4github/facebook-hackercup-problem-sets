import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.*;

/*
 Facebook Hacker Cup 2015 Qualification Round
 Problem 3: Lazer Maze
 author: Galina Khayut
 Date: 01/09/2015
*/

public class LazerMaze {
    public static final int NORTH = 0;
    public static final int EAST = 1;
    public static final int SOUTH = 2;
    public static final int WEST = 3;

    int height;
    int width;

    Cell[][] board;
    MazeState currentState;
    Set<MazeState> moves;
    List<Stack<Cell>> allPaths;
    Cell start;
    Cell end;
    int min = Integer.MAX_VALUE;
    boolean possible;

    public LazerMaze(int height, int width, List<String> input) {
        init(height, width, input);
        currentState = new MazeState(start, 0);
    }


    private boolean isValidMove(int x, int y) {
        return ((x < width && x >= 0) &&
                            (y < height && y >= 0));

    }
    private boolean isValidState(MazeState newState) {
        if (!newState.cell.isEmpty) return false;
        if (moves.contains(newState)) return false;
        return !isVulnerable(newState);
    }

    private boolean isVulnerable(MazeState state) {
        Cell cell = state.cell;
        Cell[] neighbors = nearestObstacle(cell);
        for (Cell c : neighbors) {
            if (c == null) continue;
            if (c instanceof Lazer) {
                Lazer l = (Lazer) c;
                int direction = (l.direction + state.lazerState()) % 4;
                if (direction == relativePosition(cell, l)) return true;
            }
        }
        return false;
    }

    private MazeState[] validMoves(MazeState currentState) {
        Cell current = currentState.cell;
        int newSteps = currentState.steps + 1;
        MazeState[] result = new MazeState[4];
        for (int y = -1; y < 2; y++) {
            if (y != 0) {
                int cy = current.y + y;
                if (isValidMove(current.x, cy))  {
                    MazeState newState = new MazeState(board[cy][current.x], newSteps);
                    if (isValidState(newState)) {
                        result[y + 1] = newState ;
                    }
                }
            }
        }

        for (int x = -1; x < 2; x++) {
            if (x != 0) {
                int cx = current.x + x;
                if (isValidMove(cx, current.y)) {
                    MazeState newState = new MazeState(board[current.y][cx], newSteps);
                    if (isValidState(newState)) {
                        result[x + 2] = newState;
                    }
                }
            }
        }
        return result;
    }

    public MazeState makeMove(MazeState to) {
        currentState = to;
        moves.add(currentState);
        return to;
    }

    private int relativePosition(Cell me, Cell c) {
        if (me.x == c.x) {
            if (me.y < c.y) return NORTH;
            if (me.y > c.y) return SOUTH;
        } else if (me.y == c.y) {
            if (me.x > c.x) return EAST;
            if (me.x < c.x) return WEST;
        }
        return -1;
    }

    private Cell[] nearestObstacle(Cell c) {
        Cell[] result = new Cell[4];
        for (int y = c.y; y >= 0; y--) {
            if (!board[y][c.x].isEmpty) {
                result[NORTH] = board[y][c.x];
                break;
            }
        }
        for (int x = c.x; x < width; x++) {
            if (!board[c.y][x].isEmpty) {
                result[EAST] = board[c.y][x];
                break;
            }
        }
        for (int y = c.y; y < height; y++) {
            if (!board[y][c.x].isEmpty) {
                result[SOUTH] = board[y][c.x];
                break;
            }
        }
        for (int x = c.x; x >= 0; x--) {
            if (!board[c.y][x].isEmpty)  {
                result[WEST] = board[c.y][x];
                break;
            }
        }
        return result;
    }

    private void solve(MazeState start) {
        Stack<MazeState> path = new Stack<MazeState>();
        path.push(start);
        while(!path.isEmpty()) {
            MazeState state = path.pop();
            makeMove(state);
            if (state.cell.equals(end)) {
                if (state.steps < min) {
                    min = state.steps;
                    possible = true;
                }
                continue;
            }
            MazeState[] validMoves = validMoves(state);
            for (MazeState move : validMoves) {
                if (move != null)
                    path.push(move);
            }
        }
    }

    private void init(int h, int w, List<String> input) {
        moves = new HashSet<MazeState>();
        height = h; width = w;
        board = new Cell[height][width];
        int y = 0;
        for (String s : input) {
            for (int x = 0; x < width; x++) {
                char c = s.charAt(x);
                board[y][x] = makeCell(x, y, c);
                if (c == 'S') start = board[y][x];
                if (c == 'G') end = board[y][x];
            }
            y++;
        }
    }

    private Cell makeCell(int x, int y, char c) {
        switch (c) {
            case '.' : return new Cell(c, x, y, true);
            case '#' : return new Cell(c, x, y, false);
            case '^' : return new Lazer(c, x, y, NORTH);
            case '>' : return new Lazer(c, x, y, EAST);
            case 'v' : return new Lazer(c, x, y, SOUTH);
            case '<' : return new Lazer(c, x, y, WEST);
            default  : return new Cell(c, x, y, true);
        }
    }

    public int solveMe() {
        if (start == null || end == null) return -1;
        allPaths = new ArrayList<Stack<Cell>>();
        Stack<MazeState> path = new Stack<MazeState>();
        solve(currentState);
        if (possible) return min;
        return -1;
    }


    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            System.out.println("Please provide input file name as first argument");
            return;
        }

        String filename = args[0];
        Scanner sc = null;
        List<Integer> solutions = new ArrayList<Integer>();
        List<List<String>> inputs = new ArrayList<List<String>>();

        try {
            sc = new Scanner(new File(System.getProperty("user.dir") +"/" + filename));
            int cases = Integer.parseInt(sc.nextLine().trim());
            List<String> input = null;
            while (cases > 0) {
                String[] s = sc.nextLine().split("\\s+");
                if (s.length == 2) {
                    int height = Integer.parseInt(s[0]);
                    input = new ArrayList<String>();
                    for (int i = 0; i < height; i++) {
                        String str = sc.nextLine();
                        input.add(str.trim());
                    }
                    if (input != null) inputs.add(input);
                } else {
                    inputs.add(new ArrayList<String>());
                }
                cases--;
            }

        } finally {
            sc.close();
        }

        for (List<String> maze : inputs) {
            LazerMaze lazerMaze = new LazerMaze(maze.size(), maze.get(0).length(), maze);
            solutions.add(lazerMaze.solveMe());
        }


        PrintWriter pw = null;
        try {
            pw = new PrintWriter(new FileWriter
                                             (new File(System.getProperty("user.dir")
                                                                   + "/" + filename + ".out")));
            for (int i = 0; i < solutions.size(); i++) {
                int s = solutions.get(i);
                pw.printf("Case #%d: %s\n", i+1, s == -1 ? "impossible" : s+"");
            }
        } finally {
            pw.close();
        }
    }
}

class Cell {
    int x;
    int y;
    char c;
    boolean isEmpty;

    public Cell(char c, int x, int y, boolean isEmpty) {
        this.c = c;
        this.x = x;
        this.y = y;
        this.isEmpty = isEmpty;
    }

    @Override
    public String toString() {
        return String.format(" %s ", c+"");
    }
}

class Lazer extends Cell{
    int direction;
    public Lazer(char c, int x, int y,  int p) {
        super(c, x, y, false);
        direction = p;
    }
}

class MazeState {
    Cell cell;
    int steps;

    public MazeState(Cell c, int s) {
        cell = c;
        steps = s;
    }

    public int lazerState() {
        return steps % 4;
    }

    public boolean equals (Object o) {
        if (!(o instanceof MazeState)) return false;
        MazeState m = (MazeState) o;
        return (hashCode() == m.hashCode());
    }

    public int hashCode() {
        return (""+ cell.x + cell.y + lazerState()).hashCode();
    }

    public String toString() {
        return String.format("{%d,%d, %d}", cell.y, cell.x, lazerState());
    }
}

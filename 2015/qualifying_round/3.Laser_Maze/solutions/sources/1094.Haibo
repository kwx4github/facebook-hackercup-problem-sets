#include <stdio.h>
#include <string.h>

char mp[100][128];

int m, n;
bool dist[4][100][128];
const int d[][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
bool valid(int x, int y) {
	return x>=0 && x<m && y>=0 && y<n;
}
bool safe(int x, int y, int t) {
	for(int i=0;i<4;i++) {
		int cx=x, cy=y;
		do {
		  cx += d[i][0];
		  cy += d[i][1];
		} while(valid(cx, cy) && mp[cx][cy]=='.');
		if (!valid(cx, cy) || mp[cx][cy]=='#') {
			continue;
		}
		char ds[] = "^>v<";
		int d;
		for(d=0;ds[d];d++) {
			if (mp[cx][cy]==ds[d]) {
				break;
			}
		}
		d=(d+t+2)%4;
		if (d==i) return false;
	}
	return true;
}

int bfs(int x, int y, int gx, int gy) {
	memset(dist, 0, sizeof(dist));
	dist[0][x][y]=true;
	bool updated=true;
	for(int t=0;updated;t++) {
		updated=false;
		int cur = t%4, next = (t+1)%4;
		if (dist[cur][gx][gy]) {
			return t;
		}
		for(int i=0;i<m;i++) {
			for(int j=0;j<n;j++) {
				if (dist[cur][i][j]) {
					for (int k=0;k<4;k++) {
						int ni=i+d[k][0], nj=j+d[k][1];
						if (valid(ni, nj) && mp[ni][nj]=='.' && safe(ni, nj, next) && !dist[next][ni][nj]) {
							dist[next][ni][nj]=true;
							updated=true;
						}
					}
				}
			}
		}
	}
	return -1;
}

void solve() {
	scanf("%d%d", &m, &n);
	for(int i=0;i<m;i++) {
		scanf("%s", mp[i]);
	}
	int si, sj, gi, gj;
	for(int i=0;i<m;i++) {
		for(int j=0;j<n;j++) {
			if (mp[i][j]=='S') {
				mp[si=i][sj=j]='.';
			}
			if (mp[i][j]=='G') {
				mp[gi=i][gj=j]='.';
			}
		}
	}
	int r=bfs(si, sj, gi, gj);
	if (r==-1) {
		puts("impossible");
	} else {
		printf("%d\n", r);
	}
}

int main() {
	int T;
	scanf("%d", &T);
	for(int c=1;c<=T;c++) {
		printf("Case #%d: ", c);
		solve();
	}
}
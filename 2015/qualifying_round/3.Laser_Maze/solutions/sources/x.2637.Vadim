#include <bits/stdc++.h>
using namespace std;

#ifdef ILIKEGENTOO
#   define Eo(x) { cerr << #x << " = " << (x) << endl; }
#   define E(x) { cerr << #x << " = " << (x) << "   "; }
#   define FREOPEN(x)
#else
#   define Eo(x) {}
#   define E(x) {}
#   define FREOPEN(x) (void)freopen(x ".in", "r", stdin);(void)freopen(x ".out", "w", stdout);
#endif
#define EO(x) Eo(x)
#define Sz(x) (int((x).size()))
#define All(x) (x).begin(),(x).end()

template<class A, class B> ostream &operator<<(ostream &os, const pair<A, B>& p) { return os << '(' << p.first << ", " << p.second << ')'; }

template<class C> void operator<<(vector<C> &v, const C &x){v.push_back(x);}
template<class D> void operator>>(vector<D> &v, D &x){assert(!v.empty()); x=v.back(); v.pop_back();}
template<class E> void operator<<(set<E> &v, const E &x){v.insert(x);}

typedef double flt;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;

const int inf = 0x3f3f3f3f;
const int64 inf64 = 0x3f3f3f3f3f3f3f3fLL;
const flt eps = 1e-8;
const flt pi = acos(-1.0);
const int dir[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };

const int maxn = 123;
string field[maxn];
int bfs[maxn][maxn][4];
bool die[maxn][maxn][4];

int main() {
    ios_base::sync_with_stdio(false);
    int TT; cin >> TT;
    int sr, sc, fr, fc;
    for (int T = 1; T <= TT; ++T) {
        int n, m; cin >> n >> m;
        memset(die, 0, sizeof(die));
        memset(bfs, 0x3f, sizeof(bfs));

        for (int i = 0; i < n; ++i) {
            string& s = field[i]; cin >> s;
            for (int j = 0; j < m; ++j) {
                int id = -1;
                switch(s[j]) {
                    case '.':
                    case '#':
                        break;
                    case 'S':
                        sr = i;
                        sc = j;
                        break;
                    case 'G':
                        fr = i;
                        fc = j;
                        break;
                    case '^':
                        id = 3; break;
                    case '>':
                        id = 0; break;
                    case 'v':
                        id = 1; break;
                    case '<':
                        id = 2; break;
                }
                if (id > -1) {
                    for (int k = 0; k < 4; ++k) {
                        int ci = i, cj = j;
                        while (ci >= 0 && ci < n && cj >= 0 && cj < m) {
                            die[ci][cj][k] = true;
                            ci += dir[(id + k) % 4][0];
                            cj += dir[(id + k) % 4][1];
                        }
                    }
                }
            }
        }

        bfs[sr][sc][0] = 0;
        queue<tuple<int, int, int>> que;
        que.push(make_tuple(sr, sc, 0));
        while (!que.empty()) {
            int row, col, rot;
            tie(row, col, rot) = que.front();
            for (int k = 0; k < 4; ++k) {
                int nrow = row + dir[k][0];
                int ncol = col + dir[k][1];
                int nrot = (rot + 1) % 4;
                if (nrow < 0 || nrow == n || ncol < 0 || ncol == m) continue;
                char c = field[nrow][ncol];
                if (c != '.' && c != 'S' && c != 'G') continue;
                if (die[nrow][ncol][nrot]) continue;
                if (bfs[nrow][ncol][nrot] <= bfs[row][col][rot] + 1) continue;

                bfs[nrow][ncol][nrot] = bfs[row][col][rot] + 1;
                que.push(make_tuple(nrow, ncol, nrot));
            }
            que.pop();
        }

        int best = inf;
        for (int k = 0; k < 4; ++k) best = min(best, bfs[fr][fc][k]);
        printf("Case #%d: ", T);
        if (best == inf) {
            puts("impossible");
        } else {
            printf("%d\n", best);
        }
    }

    return 0;
}

// tested by hightail - https://github.com/dj3500/hightail


#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
#define REP(i, n) for(int i = 0; i < (int)(n); ++i)
using namespace std;
typedef long long ll;

char field[110][110];
bool canGo[4][110][110];
int dist[4][110][110];
const int INF = 1000000000;

const int DI[4] = {0, 1, 0, -1};
const int DJ[4] = {1, 0, -1, 0};
const char *S = ">v<^";

struct K {
  int t, i, j;
};

int main(void) {
  int nCase;
  scanf("%d", &nCase);
  REP(iCase, nCase){
    int nRow, nCol;
    scanf("%d%d", &nRow, &nCol);
    int si, sj, gi, gj;
    REP(i, nRow){
      scanf("%s", field[i]);
      REP(j, nCol){
        if(field[i][j] == 'S'){
          si = i;
          sj = j;
          field[i][j] = '.';
        }else if(field[i][j] == 'G'){
          gi = i;
          gj = j;
          field[i][j] = '.';
        }
      }
    }

    REP(t, 4){
      REP(i, nRow) REP(j, nCol){
        canGo[t][i][j] = field[i][j] == '.';
        dist[t][i][j] = INF;
      }
      REP(i, nRow) REP(j, nCol){
        REP(d1, 4){
          if(field[i][j] == S[d1]){
            int d = (d1+t) & 3;
            int ci = i + DI[d];
            int cj = j + DJ[d];
            while(ci >= 0 && cj >= 0 && ci < nRow && cj < nCol && field[ci][cj] == '.'){
              canGo[t][ci][cj] = false;
              ci += DI[d];
              cj += DJ[d];
            }
          }
        }
      }
//       REP(i, nRow){
//         REP(j, nCol){
//           cerr << (canGo[t][i][j] ? '.' : '#');
//         }
//         cerr << endl;
//       }
//       cerr << "====" << endl;
    }

    int res = INF;
    queue<K> q;
    q.push((K){0, si, sj});
    dist[0][si][sj] = 0;
    while(!q.empty()){
      K cur = q.front(); q.pop();
      if(cur.i == gi && cur.j == gj){
        res = dist[cur.t][cur.i][cur.j];
        break;
      }
      REP(d, 4){
        K next;
        next.t = (cur.t + 1) & 3;
        next.i = cur.i + DI[d];
        next.j = cur.j + DJ[d];
        if(next.i >= 0 && next.j >= 0 && next.i < nRow && next.j < nCol &&
           canGo[next.t][next.i][next.j] && dist[next.t][next.i][next.j] >= INF){
          dist[next.t][next.i][next.j] = dist[cur.t][cur.i][cur.j] + 1;
          q.push(next);
        }
      }
    }
    printf("Case #%d: ", iCase+1);
    if(res >= INF){
      printf("impossible\n");
    }else{
      printf("%d\n", res);
    }
  }
  return 0;
}

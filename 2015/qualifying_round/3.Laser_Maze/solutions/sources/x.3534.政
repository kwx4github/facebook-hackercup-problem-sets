#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>

using namespace std;

struct state
{
    int pi,pj;
    int num;

    state() {}
    state(int x,int y,int n):pi(x),pj(y),num(n) {}
};

int N,M;
int vis[105][105];
int map1[105][105];
int Si,Sj,Gi,Gj;

bool judge(int hi,int hj,int n)
{
    if(!n)
        return 1;

    for(int i=hi;i<=N;++i)
        if(map1[i][hj]==-2)
            break;
        else if(map1[i][hj]>=0)
            if((map1[i][hj]+n)%4==0)
                return 0;

    for(int i=hi;i>=1;--i)
        if(map1[i][hj]==-2)
            break;
        else if(map1[i][hj]>=0)
            if((map1[i][hj]+n)%4==2)
                return 0;

    for(int j=hj;j<=M;++j)
        if(map1[hi][j]==-2)
            break;
        else if(map1[hi][j]>=0)
            if((map1[hi][j]+n)%4==3)
                return 0;

    for(int j=hj;j>=1;--j)
        if(map1[hi][j]==-2)
            break;
        else if(map1[hi][j]>=0)
            if((map1[hi][j]+n)%4==1)
                return 0;

    return 1;
}

bool judge1(int hi,int hj)
{
    if(hi<=0||hi>N||hj<=0||hj>M)
        return 0;

    if(map1[hi][hj]!=-1)
        return 0;

    if(vis[hi][hj]>=2)
        return 0;

    return 1;
}

int bfs()
{
    queue <state> que;
    state temp;

    que.push(state(Si,Sj,0));
    ++vis[Si][Sj];

    while(!que.empty())
    {
        temp=que.front();
        que.pop();

        if(!judge(temp.pi,temp.pj,temp.num))
            continue;

        if(temp.pi==Gi&&temp.pj==Gj)
            return temp.num;

        if(judge1(temp.pi+1,temp.pj))
        {
            ++vis[temp.pi+1][temp.pj];
            que.push(state(temp.pi+1,temp.pj,temp.num+1));
        }
        if(judge1(temp.pi-1,temp.pj))
        {
            ++vis[temp.pi-1][temp.pj];
            que.push(state(temp.pi-1,temp.pj,temp.num+1));
        }
        if(judge1(temp.pi,temp.pj+1))
        {
            ++vis[temp.pi][temp.pj+1];
            que.push(state(temp.pi,temp.pj+1,temp.num+1));
        }
        if(judge1(temp.pi,temp.pj-1))
        {
            ++vis[temp.pi][temp.pj-1];
            que.push(state(temp.pi,temp.pj-1,temp.num+1));
        }
    }

    return 0;
}

int main()
{
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);

    int T;
    char s[110];

    cin>>T;

    for(int cas=1;cas<=T;++cas)
    {
        memset(map1,-1,sizeof(map1));
        memset(vis,0,sizeof(vis));

        cin>>N>>M;
        for(int i=1;i<=N;++i)
        {
            cin>>s;
            for(int j=1;j<=M;++j)
                switch(s[j-1])
                {
                case '#':
                    map1[i][j]=-2;
                    break;
                case 'S':
                    Si=i;
                    Sj=j;
                    break;
                case 'G':
                    Gi=i;
                    Gj=j;
                    break;
                case '^':
                    map1[i][j]=0;
                    break;
                case '>':
                    map1[i][j]=1;
                    break;
                case 'v':
                    map1[i][j]=2;
                    break;
                case '<':
                    map1[i][j]=3;
                    break;
                }
        }

        cout<<"Case #"<<cas<<": ";
        int ans=bfs();
        if(ans)
            cout<<ans<<endl;
        else
            cout<<"impossible"<<endl;
    }

    return 0;
}

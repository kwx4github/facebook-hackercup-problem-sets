import java.io.*;
import java.util.*;
import static java.lang.Math.*;
public class Sample

{
     BufferedReader read;
     BufferedWriter write;
    public static void main(String args[]) throws Exception
    {
        new Sample().init("laser_maze");
    }
     void init(String name) throws Exception
    {
        read= rf(name+".txt");
        write=wf(name+"_output.txt");
        String x="";
        x = read.readLine();
        int n = Integer.parseInt(x);
        for(int i=0;i<n;i++) result( i);
        write.flush(); write.close();read.close();
   }
int row,col;
char c[][];
boolean bad[][][];
void result(int p1) throws Exception
{
    int p[]=ia(read.readLine());
    row=p[0];
    col=p[1];
    c=new char[row][];
    for(int i=0;i<row;i++)c[i]=read.readLine().toCharArray();
    bad=new boolean[4][row][col];
    
    // marking bad sectors in each turn for each laser turret
    for(int turn=0;turn<4;turn++)for(int i=0;i<row;i++)for(int j=0;j<col;j++)mark(i, j, turn);
  //  for(int turn=0;turn<4;turn++)for(int i=0;i<row;i++)for(int j=0;j<col;j++)if(bad[turn][i][j])// System.out.println("  turn "+turn+"  "+i+"  "+j+"  "+bad[turn][i][j]);
    // finding min distance to GOAL
    String s1="impossible";
    boolean done[][][]=new boolean[4][row][col];
    LinkedList<node>ls=new LinkedList<node>();
    for(int i=0;i<row;i++)for(int j=0;j<col;j++)if(c[i][j]=='S')ls.addLast(new node(i,j,0));
    while(!ls.isEmpty())
    {
        node n=ls.removeFirst();
    //    // System.out.println(n);
        if(c[n.i][n.j]=='G')
        {
            s1=""+n.time;
            break;
        }
        if(done[n.time%4][n.i][n.j])continue;
        done[n.time%4][n.i][n.j]=true;
        int t=n.time+1;
        if(b(n.i-1,n.j,t))ls.addLast(new node(n.i-1,n.j,t));
        if(b(n.i+1,n.j,t))ls.addLast(new node(n.i+1,n.j,t));
        if(b(n.i,n.j-1,t))ls.addLast(new node(n.i,n.j-1,t));
        if(b(n.i,n.j+1,t))ls.addLast(new node(n.i,n.j+1,t));
    }
    
    System.out.println("Case #"+(p1+1)+": "+s1);
    write.write("Case #"+(p1+1)+": "+s1+"\n");
}

boolean b(int i,int j,int time)
{
    if(i<0||i>=row||j<0||j>=col||bad[time%4][i][j]||!(c[i][j]=='.'||c[i][j]=='G'||c[i][j]=='S'))return false;
    return true;
}

void mark(int i,int j,int turn)
{
    if(!(c[i][j]=='>'||c[i][j]=='<'||c[i][j]=='^'||c[i][j]=='v'))return;
    // System.out.println("  inside mar ");
     int t=turn;
      if(c[i][j]=='v')t++;
      if(c[i][j]=='<')t+=2;
      if(c[i][j]=='^')t+=3;
      t%=4;
      // System.out.println("marking " +i+"  "+j+"  turn = "+turn +"   direction ="+t);
      if(t==0)markRight(i, j, turn%4);
       if(t==1)markDown(i, j,turn%4);
        if(t==2)markLeft(i, j,turn%4);
         if(t==3)markUP(i, j, turn%4);
}
void markLeft(int i,int j,int t)
{
    j--;
    while(j>=0&&(c[i][j]=='.'||c[i][j]=='G'||c[i][j]=='S'))bad[t][i][j--]=true;
}
void markRight(int i,int j,int t)
{
    j++;
    while(j<col&&(c[i][j]=='.'||c[i][j]=='G'||c[i][j]=='S'))bad[t][i][j++]=true;
}
void markUP(int i,int j,int t)
{
    i--;
    while(i>=0&&(c[i][j]=='.'||c[i][j]=='G'||c[i][j]=='S'))bad[t][i--][j]=true;
}
void markDown(int i,int j,int t)
{
    // System.out.println("  marking down "+"  "+row+"  "+i);
    i++;
    while(i<row&&(c[i][j]=='.'||c[i][j]=='G'||c[i][j]=='S'))bad[t][i++][j]=true;
    // System.out.println (" marfked down "+i);
}
int i(String s){return Integer.parseInt(s.trim());}
long l(String s){return Long.parseLong(s.trim());}
double d(String s){return Double.parseDouble(s.trim());}
 int[] ia(String s1){String s[]=s1.trim().split(" ");int p[]=new int[s.length];for(int i=0;i<s.length;i++)p[i]=Integer.parseInt(s[i]);return p;}
 
static BufferedWriter wf(String s) throws Exception{return new BufferedWriter(new FileWriter(new File(s)));}
static BufferedReader rf(String s) throws Exception{return new BufferedReader(new FileReader(new File(s)));}
static BufferedReader ri() throws Exception{return new BufferedReader(new InputStreamReader(System.in));}
}
class node
{
    int i,j,time;

    @Override
    public String toString() {
        return "node{" + "i=" + i + ", j=" + j + ", time=" + time + '}';
    }

    public node(int i, int j, int time) {
        this.i = i;
        this.j = j;
        this.time = time;
    }
   
}
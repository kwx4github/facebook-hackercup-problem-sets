#include <bits/stdc++.h>
using namespace std;
const int N = 105;
char maze[N][N];
bool bisa[N][N][4];
int jarak[N][N][4];
int t;
//BFS
typedef pair<int,int> pii;
#define pb push_back
#define mp make_pair
#define fi first
#define se second
pii arah[4] = {mp(0,-1),mp(-1,0),mp(0,1),mp(1,0)};
int n,m;
inline bool valid(int a, int b)
{
	if(a < 0 || b < 0 || a>=n || b>=m || maze[a][b]=='#' || maze[a][b]=='<' || maze[a][b]=='^' || maze[a][b]=='>' || maze[a][b]=='v') return false;
	return true;
}
typedef pair<pii,int> piii;
queue<piii> q;
pii start, goal;
inline void DEBUGWAKTU()
{
	for(int i=0;i<4;i++)
	{
		cout<<i<<endl;
		for(int j=0;j<n;j++)
		{
			for(int k=0;k<m;k++) cout<<!bisa[j][k][i];
			cout<<endl;
		}
		cout<<endl;
	}
}
int main()
{
	scanf("%d", &t);
	for(int tc = 1; tc <= t;tc++)
	{
		scanf("%d%d",&n, &m);
		for(int i=0;i<n;i++)
		{
			scanf("%s", maze[i]);
			for(int j=0;j<m;j++)
			{
				if(maze[i][j] == 'S') start = mp(i,j);
				else if(maze[i][j]=='G') goal = mp(i,j);
			}
		}
		memset(bisa,0,sizeof bisa);
		memset(jarak,-1,sizeof jarak);
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				//CEK ada laser ga
				if(maze[i][j]=='#') for(int k=0;k<4;k++) bisa[i][j][k] = 1;
				else if(maze[i][j]=='<')
				{
					int mulai = 0;
					for(int k=0;k<4;k++)
					{
						bisa[i][j][k] = 1;
						pii now = mp(i,j);
						now.fi+=arah[mulai].fi;
						now.se+=arah[mulai].se;
						while(valid(now.fi, now.se))
						{
							bisa[now.fi][now.se][k] = 1;
							now.fi+=arah[mulai].fi;
							now.se+=arah[mulai].se;
						}
						mulai++;
						if(mulai==4) mulai=0;
					}
				}
				else if(maze[i][j]=='^')
				{
					int mulai = 1;
					for(int k=0;k<4;k++)
					{
						bisa[i][j][k] = 1;
						pii now = mp(i,j);
						now.fi+=arah[mulai].fi;
						now.se+=arah[mulai].se;
						while(valid(now.fi, now.se))
						{
							bisa[now.fi][now.se][k] = 1;
							now.fi+=arah[mulai].fi;
							now.se+=arah[mulai].se;
						}
						mulai++;
						if(mulai==4) mulai=0;
					}
				}
				else if(maze[i][j]=='>')
				{
					int mulai = 2;
					for(int k=0;k<4;k++)
					{
						bisa[i][j][k] = 1;
						pii now = mp(i,j);
						now.fi+=arah[mulai].fi;
						now.se+=arah[mulai].se;
						while(valid(now.fi, now.se))
						{
							bisa[now.fi][now.se][k] = 1;
							now.fi+=arah[mulai].fi;
							now.se+=arah[mulai].se;
						}
						mulai++;
						if(mulai==4) mulai=0;
					}
				}
				else if(maze[i][j]=='v')
				{
					int mulai = 3;
					for(int k=0;k<4;k++)
					{
						bisa[i][j][k] = 1;
						pii now = mp(i,j);
						now.fi+=arah[mulai].fi;
						now.se+=arah[mulai].se;
						while(valid(now.fi, now.se))
						{
							bisa[now.fi][now.se][k] = 1;
							now.fi+=arah[mulai].fi;
							now.se+=arah[mulai].se;
						}
						mulai++;
						if(mulai==4) mulai=0;
					}
				}
			}
		}
	//	DEBUGWAKTU();
		jarak[start.fi][start.se][0] = 0;
		while(!q.empty()) q.pop();
		bool ketemu = false;
		q.push(mp(start,0));
		while(!q.empty())
		{
			piii tmp = q.front();
			q.pop();
			if(tmp.fi.fi==goal.fi && tmp.fi.se==goal.se)
			{
				ketemu = true;
				printf("Case #%d: %d\n", tc, jarak[tmp.fi.fi][tmp.fi.se][tmp.se]);
				break;
			}
			for(int i=0;i<4;i++)
			{
				piii now = tmp;
				now.fi.fi+=arah[i].fi;
				now.fi.se+=arah[i].se;
				now.se++;
				if(now.se==4) now.se=0;
				if(valid(now.fi.fi, now.fi.se) && !bisa[now.fi.fi][now.fi.se][now.se] && jarak[now.fi.fi][now.fi.se][now.se]==-1)
				{
					jarak[now.fi.fi][now.fi.se][now.se] = jarak[tmp.fi.fi][tmp.fi.se][tmp.se] + 1;
					q.push(now);
				}
			}
		}
		if(!ketemu) printf("Case #%d: impossible\n", tc);
	}
	return 0;
}


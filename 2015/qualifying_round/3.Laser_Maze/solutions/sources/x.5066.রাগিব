#include <iostream>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;

// #define IN freopen("laser_maze_example_input.txt", "r", stdin);
#define IN freopen("laser_maze.txt", "r", stdin);

#define OUT freopen("output.txt", "w", stdout);

#define MAX_SIZE 100+10

int T, M, N;
char grid[MAX_SIZE][MAX_SIZE];
bool visited[MAX_SIZE][MAX_SIZE][4];

char turret_state[4][4] = {
    {'<', '^', '>', 'v'},
    {'^', '>', 'v', '<'},
    {'>', 'v', '<', '^'},
    {'v', '<', '^', '>'}
};


class __point {
public:
    int x, y, steps;

    __point() {
        this->x = 0;
        this->y = 0;
        this->steps = 0;
    }

    __point(int x, int y, int steps) {
        this->x = x;
        this->y = y;
        this->steps = steps;
    }

    bool equals(__point p1) {
        return (x == p1.x && y == p1.y && steps == p1.steps);
    }

    __point left() {
        return __point(x, y - 1, steps + 1);
    }

    __point right() {
        return __point(x, y + 1, steps + 1);
    }

    __point top() {
        return __point(x - 1, y, steps + 1);
    }

    __point bottom() {
        return __point(x + 1, y, steps + 1);
    }

    bool isVisitedRecently() {
        return visited[x][y][(steps - 1) % 4];
    }

    bool isVisited() {
        // printf("visited: %d %d %d = %d\n", x,y,steps%4,visited[x][y][steps % 4]);
        return visited[x][y][steps % 4];
    }

    void visit() {
        visited[x][y][steps % 4] = true;
    }

};


queue<__point> Q;


bool goable(__point p) {
    if(p.x >= 0 && p.x < M && p.y >=0 && p.y < N) {
        return !p.isVisited() && (grid[p.x][p.y] == '.' || grid[p.x][p.y] == 'S' || grid[p.x][p.y] == 'G');    
    }
    
    return false;
}


bool isTurret(char t) {
    return ( t == 'v' || t == '<' || t == '>' || t == '^');
}

int turret_ind(char c) {
    int ind = 0;

    switch(c) {
        case '<':
            ind = 0;
            break;
        case '^':
            ind = 1;
            break;
        case  '>':
            ind = 2;
            break;
        case 'v':
            ind = 3;
            break;
    }

    return ind;
}

bool killed(__point p) {

    int i;
    //left
    for(i=p.y - 1; i>=0; i--) {
        if(grid[p.x][i] != '#' && isTurret(grid[p.x][i])) {
            if( turret_state[ turret_ind(grid[p.x][i]) ][p.steps % 4] == '>') {
                return true;
            }
        }
    }

    //right
    for(i=p.y + 1; i<N; i++) {
        if(grid[p.x][i] != '#' && isTurret(grid[p.x][i])) {
            if(turret_state[ turret_ind(grid[p.x][i]) ][p.steps % 4] == '<') {
                return true;
            }
        }
    }

    //top
    for(i=p.x - 1; i>=0; i--) {
        if(grid[i][p.y] != '#' && isTurret(grid[i][p.y])) {
            if(turret_state[ turret_ind(grid[i][p.y]) ][p.steps % 4] == 'v') {
                return true;
            }
        }
    }

    //bottom
    for(i=p.x + 1; i<M; i++) {
        if(grid[i][p.y] != '#' && isTurret(grid[i][p.y])) {
            if(turret_state[ turret_ind(grid[i][p.y]) ][p.steps % 4] == '^') {
                return true;
            }
        }
    }

    return false;
}




int bfs(int sx, int sy) {
    memset(visited, 0, sizeof(visited));

    while(!Q.empty()) {
        Q.pop();
    }

    // printf("bfs: %d %d\n", sx, sy);
    __point start(sx, sy, 0);
    Q.push(start);
    start.visit();

    while(!Q.empty()) {
        __point p = Q.front();
        Q.pop();

        if(!p.equals(start) && killed(p)) {
            // printf("killed: %d %d %d\n", p.x, p.y, p.steps);
            continue;
        }

        // printf("pos: %d %d %d\n", p.x, p.y, p.steps);
        if(grid[p.x][p.y] == 'G') {
            // printf("complete !\n");
            return p.steps;
        }

        __point temp;

        //left
        __point left = p.left();
        
        if(goable(left)) {
            
            left.visit();
            if(left.isVisitedRecently()) temp = left;
            else {
                Q.push(left);
                // printf("goable left: ");
            }
        }

        //right
        __point right = p.right();
        
        if(goable(right)) {
            right.visit();
            if(right.isVisitedRecently()) temp = right;
            else {
                Q.push(right);
                // printf("goable right: %d %d ", right.x, right.y);
            }
        }

        //top
        __point top = p.top();
        
        if(goable(top)) {
            
            top.visit();
            if(top.isVisitedRecently()) temp = top;
            else {
                Q.push(top);
                // printf("goable top: ");
            }
        }

        //bottom
        __point bottom = p.bottom();
        
        if(goable(bottom)) {
            bottom.visit();
            if(bottom.isVisitedRecently()) temp = bottom;
            else {
                Q.push(bottom);
                // printf("goable bottom: %d %d ", bottom.x, bottom.y);
            }
        }

        if(temp.steps != 0) {
            // printf("temp temp \n");
            Q.push(temp);
        }

        // printf("\n\n");
    }

    return -1;
}



int main()
{
    IN
    OUT
    
    int i, j, t;
    scanf("%d", &T);
    
    for(t=1 ; t<=T; t++ ) {
        printf("Case #%d: ", t);
        
        scanf("%d %d", &M, &N);

        int sx, sy;
        for(i=0; i<M; i++) {
            scanf("%s", grid[i]);
            for(j=0; j<N; j++) {
                if(grid[i][j] == 'S') {
                    sx = i;
                    sy = j;
                }
            }
        }

        int res = bfs(sx, sy);
        if(res != -1) {
            printf("%d\n", res);
        } else {
            printf("impossible\n");
        }
    }
    
    return 0;
}

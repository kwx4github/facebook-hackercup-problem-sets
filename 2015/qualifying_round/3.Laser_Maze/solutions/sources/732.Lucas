# -*- coding: utf-8 -*-

import sys
import string

def Dijkstra(G,s,t):
    Todo = [s]
    Done = []
    sp = {s:0}
    while Todo != [] and not(t in sp.keys()):
        x = Todo.pop()
        la = G[x]
        for ad in la:
            if not(ad in sp.keys()):
                sp[ad] = sp[x]+1
                Todo = [ad] + Todo # Breadth First Search
    try:
        return sp[t] - 1
    except:
        return "impossible"

def lazoring(map,M,N,x,y,dir):
    addx = 0
    addy = 0
    if dir == '<':
        addy = -1
    elif dir == '^':
        addx = -1
    elif dir == '>':
        addy = 1
    elif dir == 'v':
        addx = 1
    tx = x + addx
    ty = y + addy
    while tx >= 0 and tx < M and ty >= 0 and ty < N and map[(tx,ty)] != '#':
        map[(tx,ty)] = 'l'
        tx += addx
        ty += addy
    
def turn_turret(dir):
    if dir == '<':
        return '^'
    elif dir == '^':
        return '>'
    elif dir == '>':
        return 'v'
    elif dir == 'v':
        return '<'
        
def turn(dir, nb):
    if nb < 1:
        return dir
    else:
        return turn(turn_turret(dir),nb-1)
    
inputfile = open(sys.argv[1],"r")
outputfile = open(sys.argv[1]+"_output","w")

T = int(inputfile.readline().replace('\n',''))
for i in xrange(0,T):
    outputfile.write("Case #"+str(i+1)+": ")
    size = inputfile.readline().replace('\n','').split()
    M = int(size[0])
    N = int(size[1])
    lazl = []
    map = {}
    graph = {}
    start = (0,0)
    goal = (0,0)
    for a in xrange(0,M):
        line = inputfile.readline().replace('\n','')
        for b in xrange(0,N):
            if line[b] == '.':
                map[(a,b)] = '.'
            elif line[b] == '#':
                map[(a,b)] = '#'
            elif line[b] == 'S':
                map[(a,b)] = '.'
                start = (a,b)
            elif line[b] == 'G':
                map[(a,b)] = '.'
                goal = (a,b)
            else:
                map[(a,b)] = '#'
                lazl += [(a,b,line[b])]
    timemaps = [map.copy(),map.copy(),map.copy(),map.copy()]
    for (x,y,d) in lazl:
        for t in xrange(0,4):
            lazoring(timemaps[t],M,N,x,y,turn(d,t))
    graph['G'] = []
    for t in xrange(0,4):
        for x in timemaps[t]:
            if timemaps[t][x] == '.' or x == start:
                graph[(t,x[0],x[1])] = []
                if x[0] < M-1 and timemaps[(t+1)%4][(x[0]+1,x[1])] == '.':
                    graph[(t,x[0],x[1])] += [((t+1)%4,x[0]+1,x[1])]
                if x[0] > 0 and timemaps[(t+1)%4][(x[0]-1,x[1])] == '.':
                    graph[(t,x[0],x[1])] += [((t+1)%4,x[0]-1,x[1])]
                if x[1] < N-1 and timemaps[(t+1)%4][(x[0],x[1]+1)] == '.':
                    graph[(t,x[0],x[1])] += [((t+1)%4,x[0],x[1]+1)]
                if x[1] > 0 and timemaps[(t+1)%4][(x[0],x[1]-1)] == '.':
                    graph[(t,x[0],x[1])] += [((t+1)%4,x[0],x[1]-1)]
                if x == goal:
                    graph[(t,x[0],x[1])] += ["G"]                
                
    graph['S'] = graph[(0,start[0],start[1])]
    st = Dijkstra(graph,"S","G")
    outputfile.write(str(st))
    if i != T-1:
        outputfile.write('\n')
    
    
    

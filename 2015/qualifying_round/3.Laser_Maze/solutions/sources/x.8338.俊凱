#include <bits/stdc++.h>
using namespace std;
char sp[] = {'<', '^', '>', 'v'};
int d[4][2] = {0, -1, -1, 0, 0, 1, 1, 0};
struct P{
	int d, x, y;
	P(){}
	P(int _d, int _x, int _y) : d(_d), x(_x), y(_y) {}
};
void Solve(int cases){
	int h, w;
	bool ok[4][128][128];
	memset(ok, 1, sizeof(ok));
	vector<string> src;
	P s, e;
	cin >> h >> w;
	for(int i = 0 ; i < h ; i++){
		string tmp;
		cin >> tmp;
		src.push_back(tmp);
	}
	for(int i = 0 ; i < h ; i++){
		for(int j = 0 ; j < w ; j++){
			if(src[i][j] == '.') continue;
			else if(src[i][j] == '#') {
				for(int k = 0 ; k < 4 ; k++)
					ok[k][i][j] = 0;
			}
			else if(src[i][j] == 'S') s = P(0, i, j);
			else if(src[i][j] == 'G') e = P(0, i, j);
			else{
				for(int k = 0 ; k < 4 ; k++){
					if(src[i][j] == sp[k]){
						for(int dk = 0 ; dk < 4 ; dk++){
							int nx = i, ny = j;
							ok[dk][nx][ny] = 0;
							nx += d[(k+dk)%4][0];
							ny += d[(k+dk)%4][1];
							while(nx >= 0 && nx < h && ny >= 0 && ny < w && src[nx][ny] != '#'){
								bool br = false;
								for(int r = 0 ; r < 4 ; r++) if(src[nx][ny] == sp[r]) br = true;
								if(br) break;
								ok[dk][nx][ny] = 0;
								nx += d[(k+dk)%4][0];
								ny += d[(k+dk)%4][1];
							}
						}
					}
				}
			}
		}
	}
/*
	for(int k = 0 ; k < 4 ; k++){
		for(int i = 0 ; i < h ; i++){
			for(int j = 0 ; j < 4 ; j++)
				cout << ok[k][i][j];
			cout << endl;
		}
		cout << endl;
	}*/
	queue<P> Q;
	Q.push(s);
	cout << "Case #" << cases << ": ";
	while(Q.size()){
		P tmp = Q.front(); Q.pop();
		//cout << tmp.d << ' ' << tmp.x << ' ' << tmp.y << endl;
		if(tmp.x == e.x && tmp.y == e.y){
			cout << tmp.d << endl;
			return;
		}
		for(int k = 0 ; k < 4 ; k++){
			int nx = tmp.x + d[k][0];
			int ny = tmp.y + d[k][1];
			int nd = tmp.d + 1;
			if(nx < 0 || nx >= h || ny < 0 || ny >= w) continue;
			if(ok[nd%4][nx][ny]){
				ok[nd%4][nx][ny] = 0;
				Q.push(P(nd, nx, ny));
			}
		}
	}
	cout << "impossible" << endl;
}

int main()
{
	int n;
	cin >> n;
	for(int i = 1 ; i <= n ; i++)
		Solve(i);
}
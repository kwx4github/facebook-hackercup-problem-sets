#include<bits/stdc++.h>
using namespace std ;

#define FOR(i,a,b) for(int i= (int)a; i< (int)b; ++i)
#define REP(i,n) FOR(i,0,n)
#define fill(a, x) memset(a, x, sizeof(a))
#define all(c) c.begin(), c.end()

#define LL long long int 
#define PII pair<int,int> 
#define PB push_back
#define MP make_pair
#define INF 1000000000
#define mod 1000000007

string s[110];
string image[5][110];
int visit[110][110][5];
int Si, Sj;
int Gi, Gj;

bool ans; int anssteps;

int dx[] = {1, 0, 0, -1};
int dy[] = {0, -1, 1, 0};

int N, M;

void dfs(int i, int j, int img, int steps) {
   if(visit[i][j][img] >=0) {
      if(visit[i][j][img] <= steps) return;
   }
   //cout << i << " " << j << " " << img << " " << steps << endl;


   if(visit[i][j][img] == -1) {
      visit[i][j][img] = steps;
   } else {
      visit[i][j][img] = min(steps, visit[i][j][img]);
   }

   int nextimg = (img+1)%4;

   REP(k, 4) {
      int newx = i + dx[k];
      int newy = j + dy[k];
      if(newx<0 || newx>=M || newy<0 || newy>=N) continue;
      if(image[nextimg][newx][newy]=='.') {
         dfs(newx, newy, nextimg, visit[i][j][img]+1);
      }
   }
}


int main()
{
   int T; scanf("%d",&T);
   int r = 1;

   map<int, char> M1;
   map<char, int> M2;
   M1[0] = '<';
   M1[1] = '^';
   M1[2] = '>';
   M1[3] = 'v';

   REP(i, 4) {
      M2[M1[i]] = i;
   }

   while(T--) {
      ans = false;
      cin>>M>>N;
      getchar();
      REP(i, M) {
         cin>>s[i];
         getchar();
      }

      REP(i, M) {
         REP(j, N) {
            if(s[i][j] == 'S') {Si = i; Sj = j; s[i][j] = '.';}
            if(s[i][j] == 'G') {Gi = i; Gj = j; s[i][j] = '.';}
         }
      }

      REP(k, 4) {
         REP(i, M) {
            image[k][i] = s[i];
            if(k==0) continue;
            REP(j, N) {
               if( M2.find(image[k-1][i][j]) != M2.end()) {
                  image[k][i][j] = M1[ (M2[image[k-1][i][j]] + 1)%4 ];
               } 
            }
         }
      }

      // # = wall
      // 1 = laser light
      // 2 = laser

      REP(k, 4) {
         REP(i, M) {
            REP(j, N) {
               if(image[k][i][j] == '<') { //left
                  for(int j1 = j-1;j1>=0;j1--) {
                     char ch = image[k][i][j1];
                     if(M2.find(ch) != M2.end()) break;
                     if(ch == '#' || ch == '2') break;
                     if(ch == '.') image[k][i][j1] = '1';
                  }
                  image[k][i][j] = '2';
               }
               else if(image[k][i][j] == '>') { //right
                  for(int j1 = j+1;j1<N;j1++) {
                     char ch = image[k][i][j1];
                     if(M2.find(ch) != M2.end()) break;
                     if(ch == '#' || ch == '2') break;
                     if(ch == '.') image[k][i][j1] = '1';
                  }
                  image[k][i][j] = '2';
               }
               else if(image[k][i][j] == '^') { //up
                  for(int i1 = i-1;i1>=0;i1--) {
                     char ch = image[k][i1][j];
                     if(M2.find(ch) != M2.end()) break;
                     if(ch == '#' || ch == '2') break;
                     if(ch == '.') image[k][i1][j] = '1';
                  }
                  image[k][i][j] = '2';
               }
               else if(image[k][i][j] == 'v') { //down
                  for(int i1 = i+1;i1<M;i1++) {
                     char ch = image[k][i1][j];
                     if(M2.find(ch) != M2.end()) break;
                     if(ch == '#' || ch == '2') break;
                     if(ch == '.') image[k][i1][j] = '1';
                  }
                  image[k][i][j] = '2';
               }
            }
         }
      }
      
      fill(visit, -1);
      dfs(Si, Sj, 0, 0);

      anssteps = -1;

      REP(k, 4) {
         if(visit[Gi][Gj][k] != -1) {
            if(anssteps == -1) anssteps = visit[Gi][Gj][k];
            else anssteps = min(anssteps, visit[Gi][Gj][k]);
            ans = true;
         }
      }

      cout << "Case #" << r << ": ";

      if(ans) cout << anssteps << endl;
      else cout << "impossible" << endl;
      r++;
   }
   return 0;
}

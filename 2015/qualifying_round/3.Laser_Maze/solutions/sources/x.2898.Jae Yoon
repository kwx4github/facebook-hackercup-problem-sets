#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <numeric>
#include <queue>
using namespace std;

const int INF = numeric_limits<int>::max() - 1000;
int t, r, c, sx, sy, ex, ey;
string board[5][101];
int dist[5][101][101];
const int dx[] = { -1, 0, 0, 1 };
const int dy[] = { 0, -1, 1, 0 };

class pos{
public:
	int p, x, y;
	pos(int P, int X, int Y){
		p = P;
		x = X;
		y = Y;
	}
	pos(){
		p = x = y = -1;
	}
};

void filling(int cnt, int x, int y){
	char p = board[cnt - 1][x][y];
	if (p == '<'){
		board[cnt][x][y] = '^';
		for (int i = x - 1; i >= 0; --i){
			if (board[cnt][i][y] != '.') break;
			board[cnt][i][y] = '#';
		}
	}
	if (p == '^'){
		board[cnt][x][y] = '>';
		for (int i = y + 1; i < c; ++i){
			if (board[cnt][x][i] != '.') break;
			board[cnt][x][i] = '#';
		}
	}
	if (p == '>'){
		board[cnt][x][y] = 'v';
		for (int i = x + 1; i < r; ++i){
			if (board[cnt][i][y] != '.') break;
			board[cnt][i][y] = '#';
		}
	}
	if (p == 'v'){
		board[cnt][x][y] = '<';
		for (int i = y - 1; i >= 0; --i){
			if (board[cnt][x][i] != '.') break;
			board[cnt][x][i] = '#';
		}
	}
}

void init(){
	for (int i = 0; i < r; ++i){
		for (int j = 0; j < board[0][i].size(); ++j){
			if (board[0][i][j] == 'S'){
				sx = i; sy = j;
			}
			if (board[0][i][j] == 'G'){
				ex = i; ey = j;
			}
		}
	}
	for (int i = 0; i < 5; ++i){
		board[i][sx][sy] = '.';
		board[i][ex][ey] = '.';
	}
	for (int p = 1; p < 5; ++p){
		for (int i = 0; i < r; ++i){
			for (int j = 0; j < c; ++j){
				filling(p, i, j);
			}
		}
	}
}

void bfs(){
	queue< pos > q;
	pos newPos(0, sx, sy);
	q.push(newPos);
	dist[0][sx][sy] = 0;
	while (!q.empty()){
		int p = q.front().p;
		int x = q.front().x;
		int y = q.front().y;
		q.pop();
		for (int i = 0; i < 4; ++i){
			int nextP = p + 1;
			if (nextP > 4) nextP = 1;
			int dX = x + dx[i];
			int dY = y + dy[i];
			if (0 <= dX && dX < r && 0 <= dY && dY < c){
				if (dist[nextP][dX][dY] != -1 || board[nextP][dX][dY] != '.') continue;
				dist[nextP][dX][dY] = dist[p][x][y] + 1;
				pos newPos(nextP, dX, dY);
				q.push(newPos);
			}
		}

	}
}


int main(){
#ifdef _CONSOLE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w+", stdout);
#endif
	scanf("%d", &t);
	for (int i = 0; i < t; ++i){
		memset(dist, -1, sizeof(dist));
		scanf("%d%d", &r, &c);
		for (int i = 0; i < r; ++i) {
			cin >> board[0][i];
			board[1][i] = board[2][i] = board[3][i] = board[4][i] = board[0][i];
		}
		init();
		bfs();
		int ans = INF;
		for (int i = 0; i < 5; ++i){
			if (dist[i][ex][ey] != -1) ans = min(ans, dist[i][ex][ey]);
		}
		cout << "Case #" << i + 1 << ": ";
		if (ans >= INF) cout << "impossible" << endl;
		else cout << ans << endl;
	}
	return 0;
}
#include <iostream>
#include <iomanip>
#include <functional>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <list>
#include <stack>
#include <string>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <utility>
#include <iterator>
#include <bitset>
#include <sstream>
#include <numeric>
#include <complex>
#include <sstream>
#include <unordered_set>
#include <unordered_map>

#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
#define uint unsigned int
#define LL long long
#define ULL unsigned LL
#define VI vector<int>
#define X first
#define Y second
#define sz(_v) ((int)_v.size())
#define all(_v) (_v).begin(),(_v).end()
#define FOR(_i,a,b) for (int _i(a),_l(b); _i<=_l; ++_i)
#define rept(i,a) FOR(i,0,(int)(a)-1)
#define x1 X1
#define y1 Y1
#define sqr(a) ((a)*(a))
#define C(a) memset((a),0,sizeof (a))
#define MS(a,x) memset((a),(x),sizeof (a))
#define INF 2000000000
#define INFL INF*1ll*INF
#define PI 3.141592653589
#define eps 1e-10
#define MOD 1000000007
#define PRIME 312427
#define MOD2 500000004

using namespace std;

vector<string> maze;
set< pair< pii, int > > used;
vector< pair< pii, pii > > q;
int head;
int curX, curY, curRot, curStep;

char rotate(char c) {
	switch (c) {
	case '<':
		return '^';
	case '^':
		return '>';
	case '>':
		return 'v';
	case 'v':
		return '<';
	default:
		printf("FROGS!!!");
		return 'F';
	}
}

char rotate(char c, int times) {
	rept(i,times) c=rotate(c);
	return c;
}

bool isFree(int x, int y) {
	return maze[x][y]=='.' || maze[x][y]=='S' || maze[x][y]=='G';
}

bool outside(int x, int y) {
	if (x<0 || x>=sz(maze) || y<0 || y>=sz(maze[0])) {
		return true;
	} else {
		return false;
	}
}

const int dx[] = {1,-1,0,0};
const int dy[] = {0,0,1,-1};
const char alarm[] = {'^','v','<','>'};

bool checkPos(int x, int y, int rot) {
	if (outside(x,y)) {
		return false;
	}
	if (!isFree(x,y)) {
		return false;
	}
	rept(i,4) {
		int curx(x+dx[i]),cury(y+dy[i]);
		while (!outside(curx,cury)) {
			if (!isFree(curx,cury)) {
				if (maze[curx][cury]=='#')
					break;
				char tur(rotate(maze[curx][cury],rot));
				if (tur==alarm[i])
					return false;
			}
			curx+=dx[i],cury+=dy[i];
		}
	}
	return true;
}

bool push(int x, int y, int rot, int step) {
	if (step!=0 && !checkPos(x,y,rot)) {
		return false;
	}
	if (maze[x][y]=='G') {
		printf("%d\n",step);
		return true;
	}

	pair<pii, int> pos(mp(x,y),rot);
	if (used.count(pos)) {
		return false;
	}
	used.insert(pos);
	q.pb(mp(mp(x,y),mp(rot,step)));
	return false;
}

void pop() {
	curX=q[head].X.X;
	curY=q[head].X.Y;
	curRot=q[head].Y.X;
	curStep=q[head].Y.Y;
	++head;
}

void solveTest() {
	int n,m;
	scanf("%d%d\n",&n,&m);
	maze.resize(n);
	int sx,sy;
	rept(i,n) {
		getline(cin,maze[i]);
		rept(j,m) {
			if (maze[i][j]=='S') sx=i,sy=j;
		}
	}
	push(sx,sy,0,0);
	while (head!=sz(q)) {
		pop();
		rept(i,4) {
			if (push(curX+dx[i],curY+dy[i],(curRot+1)%4,curStep+1))
				return;
		}
	}
	printf("impossible\n");
}

void prepare() {
	maze.clear();
	used.clear();
	q.clear();
	head=0;
}

void solve() {
	int tst;
	scanf("%d\n",&tst);
	FOR(i,1,tst) {
		printf("Case #%d: ",i);
		prepare();
		solveTest();
	}
}

int main() {
	freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
//	freopen(".in","r",stdin); freopen(".out","w",stdout);

//	clock_t tm = clock();
	solve();
//	cerr<<setprecision(3);
//	cerr<<(clock()-tm+0.)/CLOCKS_PER_SEC<<endl;
	return 0;
}

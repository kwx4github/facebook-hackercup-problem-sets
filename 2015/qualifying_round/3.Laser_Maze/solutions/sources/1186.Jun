//c++ standard libraries
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
//#include <ios_base>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <string>
#include <typeinfo>
#include <utility>
#include <vector>
#include <limits>

//c standard libraries
#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <float.h> 
#include <limits.h>
#include <locale.h> 
#include <math.h> 
#include <setjmp.h>
#include <signal.h> 
#include <stdarg.h> 
#include <stddef.h> 
#include <stdio.h>
#include <stdlib.h> 
#include <string.h> 
#include <time.h>


struct LaserMaze
{
	int r; // row
	int c; // col
	int d; // direction
	int numSteps;
};

class LaserMazeCompare
{
public:
	bool operator() (const LaserMaze& lhs, const LaserMaze& rhs) const
	{
		return lhs.numSteps > rhs.numSteps;
	}
};


void laserMaze()
{
	int T, M, N;
	std::cin >> T;
	int ok[106][106][4];
	int visited[106][106][4];
	//            up right down left
	int row_d[] = {-1, 0, 1,  0};
	int col_d[] = { 0, 1, 0, -1};
	int table[128];
	memset(table, -1, sizeof(table));
	table['^'] = 0;
	table['>'] = 1;
	table['v'] = 2;
	table['<'] = 3;
	for (int t = 1; t <= T; ++t)
	{
		memset(ok, -1, sizeof(ok));
		memset(visited, 0, sizeof(visited));
		std::cin >> M >> N;
		std::vector<std::string> maze(M);
		int startRow, startCol, goalRow, goalCol;
		for (int i = 0; i < M; ++i)
		{
			std::cin >> maze[i];
			for (int j = 0; j < N; ++j)
			{
				if (maze[i][j] == 'S')
				{
					startRow = i;
					startCol = j;
				}
				else if (maze[i][j] == 'G')
				{
					goalRow = i;
					goalCol = j;
				}
				else if (table[maze[i][j]] != -1)
					maze[i][j] = '0' + table[maze[i][j]];
			}
		}

		for (int k = 0; k < 4; ++k)
		{
			for (int i = 0; i < M; ++i)
				for (int j = 0; j < N; ++j)
				{
					if (maze[i][j] == '#')
						ok[i][j][k] = 0;
					else if (maze[i][j] >= '0' && maze[i][j] <= '3')
					{
						ok[i][j][k] = 0;
						// d: direction, 0: up; 1: right; 2: down; 3: left
						int d = maze[i][j] - '0';
						int tmp_i = i + row_d[d];
						int tmp_j = j + col_d[d];
						while (   tmp_i >= 0 && tmp_i < M && tmp_j >= 0 && tmp_j < N
							   && (maze[tmp_i][tmp_j] == 'S' || maze[tmp_i][tmp_j] == 'G' || maze[tmp_i][tmp_j] == '.') )
						{
							ok[tmp_i][tmp_j][k] = 0;
							tmp_i += row_d[d];
							tmp_j += col_d[d];
						}

						d = (d + 1) % 4;
						// update the direction
						maze[i][j] = '0' + d;
					}
				}
		}

		std::priority_queue<LaserMaze, std::vector<LaserMaze>, LaserMazeCompare> pq;
		LaserMaze curr;
		curr.r = startRow;
		curr.c = startCol;
		curr.d = 0;
		curr.numSteps = 0;
		pq.push(curr);
		visited[startRow][startCol][0] = 1;

		int result = -1;
		while (!pq.empty())
		{
			curr = pq.top();
			pq.pop();

			if (curr.r == goalRow && curr.c == goalCol)
			{
				result = curr.numSteps;
				break;
			}

			for (int k = 0; k < 4; ++k)
			{
				LaserMaze next = curr;
				next.r += row_d[k];
				next.c += col_d[k];
				next.d = (next.d + 1) % 4;
				++next.numSteps;

				if (   next.r >= 0 && next.r < M && next.c >= 0 && next.c < N
					&& ok[next.r][next.c][next.d] && !visited[next.r][next.c][next.d])
				{
					visited[next.r][next.c][next.d] = 1;
					pq.push(next);
				}
			}
		}

		std::cout << "Case #" << t << ": ";
		if (result == -1)
			std::cout << "impossible\n";
		else
			std::cout << result << "\n";
	}	
}


int main()
{
	freopen("laser_maze.txt", "r", stdin);
	freopen("laser_maze_output.txt", "w", stdout);

	laserMaze();
}

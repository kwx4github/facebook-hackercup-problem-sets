//============================================================================
// Judge    : FB Hacker Cup 2015
// Problem  : Qualification Round C. Laser Maze
// Author   : Carlos Mendoza
// Category : BFS
// Notes    : 
//============================================================================
#include <bits/stdc++.h>
using namespace std;
#define UP 0
#define RT 1
#define DW 2
#define LF 3
#define MAX 105

typedef pair<int,int> ii;
typedef pair<ii,int> turret;
typedef vector<turret> vturret;
typedef pair<ii,vturret> state;

map<state,int> dist;
char M[MAX][MAX];
bool inDanger[MAX][MAX];
int R,C;
int sx,sy;
int ex,ey;
vturret vt;

int aux_x[4] = {0,0,1,-1};
int aux_y[4] = {1,-1,0,0};

int bfs()
{
    queue<state> q;
    state root(ii(sx,sy), vt);
    dist[root] = 0;
    q.push(root);
    while(!q.empty())
    {
        state v = q.front(); q.pop();
        if(v.first.first == ex && v.first.second == ey)
            return dist[v];

        memset(inDanger, false, sizeof inDanger);
        vt = v.second;
        for(int i = 0; i < (int)vt.size(); i++)
        {
            vt[i].second++;
            if(vt[i].second == 4)
                vt[i].second = 0;

            int px,py;
            int dx,dy;
            switch(vt[i].second)
            {
                case UP: 
                    dx = -1;
                    dy = 0;
                    break;
                case RT: 
                    dx = 0;
                    dy = 1;
                    break;
                case DW: 
                    dx = 1;
                    dy = 0;
                    break;
                case LF: 
                    dx = 0;
                    dy = -1;
                    break;
            }

            px = vt[i].first.first + dx;
            py = vt[i].first.second + dy;
            while(px > -1 && px > -1 && px < R && py < C && M[px][py] == '.')
            {
                inDanger[px][py] = true;
                px += dx;
                py += dy;
            }
        }

        for(int k = 0; k < 4; k++)
        {
            int nx = v.first.first + aux_x[k];
            int ny = v.first.second + aux_y[k];
            if(nx > -1 && ny > -1 && nx < R && ny < C && M[nx][ny] == '.' && !inDanger[nx][ny])
            {
                state u(ii(nx,ny), vt);
                if(dist.find(u) == dist.end())
                {
                    dist[u] = dist[v] + 1;
                    q.push(u);
                }
            }
        }

    } 
    return -1;
}

int main() 
{
    int T,ans,ntest=1;
    scanf("%d\n",&T);
    while(T--)
    {
        scanf("%d %d\n",&R,&C);
        vt.clear();
        for(int i = 0; i < R; i++)
        {
            gets(M[i]);
            for(int j = 0; j < C; j++)
                if(M[i][j] == 'S')
                {
                    sx = i; sy = j;
                    M[i][j] = '.';
                }
                else if(M[i][j] == 'G')
                {
                    ex = i; ey = j;
                    M[i][j] = '.';
                }
                else if(M[i][j] == '^')
                    vt.push_back(turret(ii(i,j),UP));
                else if(M[i][j] == '>')
                    vt.push_back(turret(ii(i,j),RT));
                else if(M[i][j] == 'v')
                    vt.push_back(turret(ii(i,j),DW));
                else if(M[i][j] == '<')
                    vt.push_back(turret(ii(i,j),LF));
        }
        dist.clear();
        ans = bfs();
        if(ans == -1)
            printf("Case #%d: impossible\n",ntest++);
        else
            printf("Case #%d: %d\n", ntest++, ans);
    }
    return 0;
}

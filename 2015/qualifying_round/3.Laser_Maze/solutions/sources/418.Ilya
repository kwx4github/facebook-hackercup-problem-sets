#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 100 + 13;
int n, m;
char s[N][N];

inline bool read()
{
	if (scanf ("%d%d", &n, &m) != 2)
		return false;
		
	forn (i, n)
		assert(scanf ("%s", s[i]) == 1);

	return true;
}

int used[4][N][N];
const char dc[4] = {'<', '>', '^', 'v'};
const char next[4] = {'^', 'v', '>', '<'};
const int dx[4] = {0, 0, -1, 1};
const int dy[4] = {-1, 1, 0, 0};

inline bool correct (int x, int y)
{
	return x >= 0 && y >= 0 && x < n && y < m;
}

int d[4][N][N];
pair<pt, int> q[4 * N * N];
int head, tail;

inline void solve(int test)
{
	printf ("Case #%d: ", test + 1);
	memset(used, 0, sizeof used);

	forn (it, 4)
	{
		forn (i, n)
			forn (j, m)
			{
				int id = -1;
				forn (k, 4)
					if (s[i][j] == dc[k])
					{
						id = k;
						break;
					}
					
				if (id == -1)
					continue;
					
				s[i][j] = next[id];
				
				forn (k, 4)
					if (s[i][j] == dc[k])
					{
						id = k;
						break;
					}				
					
				int x = i + dx[id], y = j + dy[id];
				while (correct(x, y) && (s[x][y] == '.' || s[x][y] == 'G' || s[x][y] == 'S'))
				{
					used[it][x][y] = 1;

					x += dx[id];
					y += dy[id];
				}
			}
	}
	
	head = tail = 0;
	int sx = -1, sy = -1;
	int tx = -1, ty = -1;
	
	forn (i, n)
		forn (j, m)
		{
			if (s[i][j] == 'S')
			{
				sx = i, sy = j;
			}
			
			if (s[i][j] == 'G')
			{
				tx = i, ty = j;
			}
		}
		
	assert(sx != -1 && tx != -1);
	
	forn (it, 4)
		forn (i, n)
			forn (j, m)
				d[it][i][j] = INF;
				
	d[0][sx][sy] = 0;
	q[tail++] = mp(mp(sx, sy), 0);
	
	while (head != tail)
	{
		int x = q[head].ft.x, y = q[head].ft.y, t = q[head].sc;
		head++;
		
		forn (k, 4)
		{
			int nx = x + dx[k], ny = y + dy[k];
			
			if (!correct(nx, ny))
				continue;

			if (!(s[nx][ny] == '.' || s[nx][ny] == 'G' || s[nx][ny] == 'S'))
				continue;
			
			if (used[t][nx][ny])
				continue;
				
			int nt = (t + 1) & 3;
				
			if (d[nt][nx][ny] <= d[t][x][y] + 1)
				continue;
				
			d[nt][nx][ny] = d[t][x][y] + 1;
			
			q[tail++] = mp(mp(nx, ny), nt);
		}
	}
	
	int ans = INF;
	forn (i, 4)
		ans = min(ans, d[i][tx][ty]);

	 if (ans == INF)
	 	puts("impossible");
	 else
	 	cout << ans << endl;
}

int main()
{
#ifdef SU2_PROJ
	assert(freopen("input.txt", "r", stdin));
	assert(freopen("output.txt", "w", stdout));
#endif

	cout << setprecision(25) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int testCnt;
	assert(scanf ("%d", &testCnt) == 1);
	
	forn (test, testCnt)
	{
		assert(read());
		solve(test);
	}

#ifdef SU2_PROJ
	cerr << "TIME: " << clock() << endl;
#endif

	return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>

using namespace std;

static bool f[101][101][4];
static int m, n;

bool checkLaser(const vector<string> &b, int i, int j, int state){
    int target = (2-state+4)%4;
    for(int ci=i-1; ci>=0; --ci){
        char c = b[ci][j];
        if(c == '.')
            continue;
        
        if(c == target)
            return false;
        
        break;
    }
    
    target = (0-state+4)%4;
    for(int ci=i+1; ci<m; ++ci){
        char c = b[ci][j];
        if(c == '.')
            continue;
        
        if(c == target)
            return false;
        
        break;
    }
    
    target = (1-state+4)%4;
    for(int cj=j-1; cj>=0; --cj){
        char c = b[i][cj];
        if(c == '.')
            continue;
        
        if(c == target)
            return false;
        
        break;
    }
    
    target = (3-state+4)%4;
    for(int cj=j+1; cj<n; ++cj){
        char c = b[i][cj];
        if(c == '.')
            continue;
        
        if(c == target)
            return false;
        
        break;
    }
    
    return true;
}

void comp(int tc){
    fill(&f[0][0][0], &f[0][0][0] + sizeof(f), false);
    
    cin >> m >> n;
    vector<string> b(m);
    for(int i=0; i<m; ++i){
        cin >> b[i];
    }
    
    int gi, gj, si, sj;
    gi = gj = si = sj = 0;
    for(int i=0; i<m; ++i){
        for(int j=0; j<n; ++j){
            char &c = b[i][j];
            if(c == 'G'){
                gi = i;
                gj = j;
                c = '.';
            } else if(c == 'S'){
                si = i;
                sj = j;
                c = '.';
            } else if(c == '^'){
                c = 0;
            } else if(c == '>'){
                c = 1;
            } else if(c == 'v'){
                c = 2;
            } else if(c == '<'){
                c = 3;
            }
        }
    }
    
    int d[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
    int count = 0;
    f[si][sj][0] = true;
    queue<pair<int, int>> q1, q2;
    q2.push({si, sj});
    while(!q2.empty()){
        int nextState = (count + 1) % 4;
        while(!q2.empty()){
            auto p = q2.front();
            q2.pop();
            for(int i=0; i<4; ++i){
                int ni = p.first + d[i][0];
                int nj = p.second + d[i][1];
                if(ni < 0 || ni >= m || nj < 0 || nj >= n)
                    continue;
                
                char c = b[ni][nj];
                if(c != '.' || f[ni][nj][nextState])
                    continue;
                
                f[ni][nj][nextState] = true;
                if(checkLaser(b, ni, nj, nextState)){
                    if(ni == gi && nj == gj){
                        cout << "Case #" << tc << ": " << (count + 1) << endl;
                        return;
                    }
                    q1.push({ni, nj});
                }
            }
        }
        q1.swap(q2);
        ++count;
    }
    
    cout << "Case #" << tc << ": impossible" << endl;
}

int main() {
    int T;
    cin >> T;
    for(int i=1; i<=T; ++i){
        comp(i);
    }
}

#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second

const double pi = acos(-1.0);
const int size = 1100;
const int inf = 1000 * 1000 * 1000;

const int px[4] = {1, 0, -1, 0};
const int py[4] = {0, -1, 0, 1};

bool isfree[4][size][size];
char field[size][size];
int dist[4][size][size];
int tur[size][size];
int tc, n, m;

bool onfield(int x, int y) {
	return x >= 0 && y >= 0 && x < n && y < m;
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    cin >> tc;
    for (int tnum = 0; tnum < tc; tnum++) {
    	cin >> n >> m;
    	for (int i = 0; i < n; i++)
    		cin >> field[i];

    	for (int i = 0; i < n; i++)
    		for (int j = 0; j < m; j++) {
    			for (int k = 0; k < 4; k++) {
    				isfree[k][i][j] = true;
    				dist[k][i][j] = inf;
    			}
    			tur[i][j] = -1;
    		}

    	int xs, ys, xt, yt;
    	for (int i = 0; i < n; i++)
    		for (int j = 0; j < m; j++) {
    			if (field[i][j] == 'S') {
    				xs = i;
    				ys = j;
    			}
    			if (field[i][j] == 'G') {
    			    xt = i;
    			    yt = j;
    			}
    			if (field[i][j] == '#') {
    				for (int k = 0; k < 4; k++)
    					isfree[k][i][j] = false;
    			}
    			if (field[i][j] == '>') {
    				tur[i][j] = 3;
    			}
    			if (field[i][j] == 'v') {
    				tur[i][j] = 0;
    			}
    			if (field[i][j] == '<') {
    				tur[i][j] = 1;
    			}
    			if (field[i][j] == '^') {
    				tur[i][j] = 2;
    			}
    		}

       	for (int i = 0; i < n; i++) {
       		for (int j = 0; j < m; j++) {
       			if (tur[i][j] != -1) {
       				for (int k = 0; k < 4; k++) {
       					int dir = (tur[i][j] + k) % 4;
       					isfree[k][i][j] = false;
       					for (int p = 1; p <= max(n, m); p++) {
       						int tx = i + px[dir] * p;
       						int ty = j + py[dir] * p;
       						if (!onfield(tx, ty) || (field[tx][ty] != '.' && field[tx][ty] != 'S' && field[tx][ty] != 'G'))
       							break;
       						isfree[k][tx][ty] = false;
       					}
       				}
       			}	
       		}
       	}
       	/*
       	for (int i = 0; i < 4; i++) {
       		for (int j = 0; j < n; j++) {
       			for (int k = 0; k < m; k++)
       				cout << (int) isfree[i][j][k];
				cout << endl;
			}
			cout << endl;
       	}
       	*/

       	queue <pair <int, pair <int, int> > > q;
       	q.push(mp(0, mp(xs, ys)));
       	dist[0][xs][ys] = 0;

       	while (!q.empty()) {
       		int dv = q.front().fs;
       		int x = q.front().sc.fs;
       		int y = q.front().sc.sc;
       		q.pop();

       		for (int i = 0; i < 4; i++) {
       			int tx = x + px[i];
       			int ty = y + py[i];
       			int ndv = (dv + 1) % 4;
       			if (onfield(tx, ty) && isfree[ndv][tx][ty] && dist[ndv][tx][ty] == inf) {
					dist[ndv][tx][ty] = dist[dv][x][y] + 1;
					q.push(mp(ndv, mp(tx, ty)));       				
       			}
       		}
       	}

       	int mn = inf;
       	for (int i = 0; i < 4; i++)
       		mn = min(mn, dist[i][xt][yt]);
   		cout << "Case #" << tnum + 1 << ": ";
   		if (mn < inf)
   			cout << mn << endl;
   		else
   			cout << "impossible" << endl;
    }

    return 0;
}
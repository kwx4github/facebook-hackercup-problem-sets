#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <utility>
#include <cstring>
#include <string>
#include <cstdio>
#include <cmath>
#include <queue>
#include <cstdlib>

using namespace std;


typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;

#define pb push_back
#define mp make_pair
#define S second
#define F first
#define INF 2000000000
#define MEMSET_INF 127
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

typedef struct position{
	int l;
	int c;
	int t;
} position;

bool maze[100][100][4];
bool vis[100][100][4];
queue<pair<position,int> > q;
string mchars[100];
int n,m;
int goall, goalc;
int startl, startc;

int main(int argc, char const *argv[])
{
	int t;
	cin >> t;
	for(int i = 0; i < t; i++) {
		memset(maze, 0, sizeof maze);
		memset(vis, 0, sizeof vis);
		while(!q.empty())
			q.pop();

		cin >> m >> n;

		for(int j = 0; j < m; j++){
			cin >> mchars[j];
		}
		for(int j = 0; j < m; j++){
			for(int k = 0; k < n; k++){
				switch (mchars[j][k]){
					case '#':
					maze[j][k][0]=1;
					maze[j][k][1]=1;
					maze[j][k][2]=1;
					maze[j][k][3]=1;
					break;
					case '.':
					break;
					case 'S':
					startl = j;
					startc = k;
					break;
					case 'G':
					goall = j;
					goalc = k;
					break;
					case '^':
					maze[j][k][0]=1;
					maze[j][k][1]=1;
					maze[j][k][2]=1;
					maze[j][k][3]=1;

					for(int l = j-1; l >= 0; l--){
						maze[l][k][0] = 1;
						if((mchars[l][k] == '#')||(mchars[l][k] == '>')||(mchars[l][k] == '<')||(mchars[l][k] == '^')||(mchars[l][k] == 'v'))
							break;
					}
					for(int l = k+1; l < n; l++){
						maze[j][l][1] = 1;
						if((mchars[j][l] == '#')||(mchars[j][l] == '>')||(mchars[j][l] == '<')||(mchars[j][l] == '^')||(mchars[j][l] == 'v'))
							break;
					}
					for(int l = j+1; l < m; l++){
						maze[l][k][2] = 1;
						if((mchars[l][k] == '#')||(mchars[l][k] == '>')||(mchars[l][k] == '<')||(mchars[l][k] == '^')||(mchars[l][k] == 'v'))
							break;
					}
					for(int l = k-1; l >= 0; l--){
						maze[j][l][3] = 1;
						if((mchars[j][l] == '#')||(mchars[j][l] == '>')||(mchars[j][l] == '<')||(mchars[j][l] == '^')||(mchars[j][l] == 'v'))
							break;
					}
					break;

					case '<':
					maze[j][k][0]=1;
					maze[j][k][1]=1;
					maze[j][k][2]=1;
					maze[j][k][3]=1;
					
					for(int l = k-1; l >= 0; l--){
						maze[j][l][0] = 1;
						if((mchars[j][l] == '#')||(mchars[j][l] == '>')||(mchars[j][l] == '<')||(mchars[j][l] == '^')||(mchars[j][l] == 'v'))
							break;
					}
					for(int l = j-1; l >= 0; l--){
						maze[l][k][1] = 1;
						if((mchars[l][k] == '#')||(mchars[l][k] == '>')||(mchars[l][k] == '<')||(mchars[l][k] == '^')||(mchars[l][k] == 'v'))
							break;
					}
					for(int l = k+1; l < n; l++){
						maze[j][l][2] = 1;
						if((mchars[j][l] == '#')||(mchars[j][l] == '>')||(mchars[j][l] == '<')||(mchars[j][l] == '^')||(mchars[j][l] == 'v'))
							break;
					}
					for(int l = j+1; l < m; l++){
						maze[l][k][3] = 1;
						if((mchars[l][k] == '#')||(mchars[l][k] == '>')||(mchars[l][k] == '<')||(mchars[l][k] == '^')||(mchars[l][k] == 'v'))
							break;
					}
					break;

					case '>':
					maze[j][k][0]=1;
					maze[j][k][1]=1;
					maze[j][k][2]=1;
					maze[j][k][3]=1;

					for(int l = k+1; l < n; l++){
						maze[j][l][0] = 1;
						if((mchars[j][l] == '#')||(mchars[j][l] == '>')||(mchars[j][l] == '<')||(mchars[j][l] == '^')||(mchars[j][l] == 'v'))
							break;
					}
					for(int l = j+1; l < m; l++){
						maze[l][k][1] = 1;
						if((mchars[l][k] == '#')||(mchars[l][k] == '>')||(mchars[l][k] == '<')||(mchars[l][k] == '^')||(mchars[l][k] == 'v'))
							break;
					}
					for(int l = k-1; l >= 0; l--){
						maze[j][l][2] = 1;
						if((mchars[j][l] == '#')||(mchars[j][l] == '>')||(mchars[j][l] == '<')||(mchars[j][l] == '^')||(mchars[j][l] == 'v'))
							break;
					}
					for(int l = j-1; l >= 0; l--){
						maze[l][k][3] = 1;
						if((mchars[l][k] == '#')||(mchars[l][k] == '>')||(mchars[l][k] == '<')||(mchars[l][k] == '^')||(mchars[l][k] == 'v'))
							break;
					}

					break;
					case 'v':
					maze[j][k][0]=1;
					maze[j][k][1]=1;
					maze[j][k][2]=1;
					maze[j][k][3]=1;

					for(int l = j+1; l < m; l++){
						maze[l][k][0] = 1;
						if((mchars[l][k] == '#')||(mchars[l][k] == '>')||(mchars[l][k] == '<')||(mchars[l][k] == '^')||(mchars[l][k] == 'v'))
							break;
					}
					for(int l = k-1; l >= 0; l--){
						maze[j][l][1] = 1;
						if((mchars[j][l] == '#')||(mchars[j][l] == '>')||(mchars[j][l] == '<')||(mchars[j][l] == '^')||(mchars[j][l] == 'v'))
							break;
					}
					for(int l = j-1; l >= 0; l--){
						maze[l][k][2] = 1;
						if((mchars[l][k] == '#')||(mchars[l][k] == '>')||(mchars[l][k] == '<')||(mchars[l][k] == '^')||(mchars[l][k] == 'v'))
							break;
					}
					for(int l = k+1; l < n; l++){
						maze[j][l][3] = 1;
						if((mchars[j][l] == '#')||(mchars[j][l] == '>')||(mchars[j][l] == '<')||(mchars[j][l] == '^')||(mchars[j][l] == 'v'))
							break;
					}
					break;
				}
			}
		}

		position auxp;
		auxp.l = startl;
		auxp.c = startc;
		auxp.t = 0;	
		q.push(mp(auxp, 0));

		int ans = -1;

		while(!q.empty()){

			pair<position, int> top = q.front(); 
			q.pop();
			int posl = top.F.l;
			int posc = top.F.c;
			int nextturn = (top.F.t + 1) % 4;

			if((posl == goall) && (posc == goalc)){
				ans = top.S;
				break;
			}
			if(vis[top.F.l][top.F.c][top.F.t])
				continue;

			vis[posl][posc][top.F.t] = 1;

			if(posl && !maze[posl-1][posc][nextturn]){
				auxp.l = posl-1;
				auxp.c = posc;
				auxp.t = nextturn;
				q.push(mp(auxp, top.S+1));
			}
			if(posl < m-1 && !maze[posl + 1][posc][nextturn]){
				auxp.l = posl+1;
				auxp.c = posc;
				auxp.t = nextturn;
				q.push(mp(auxp, top.S+1));
			}
			if(posc < n-1 && !maze[posl][posc + 1][nextturn]){
				auxp.l = posl;
				auxp.c = posc+1;
				auxp.t = nextturn;
				q.push(mp(auxp, top.S+1));
			}
			if(posc && !maze[posl][posc - 1][nextturn]){
				auxp.l = posl;
				auxp.c = posc - 1;
				auxp.t = nextturn;
				q.push(mp(auxp, top.S+1));	
			}
		}

		cout << "Case #" << i+1<< ": ";
		if(ans == -1){
			cout<<"impossible"<<endl;
		}else{
			cout<<ans<<endl;
		}
	}
    return 0;
}
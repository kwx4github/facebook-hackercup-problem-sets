import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;


public class LazerMaze {
	
	
	static int N, M;
	static char[][] matrix;
	static char[][][] filled;
	static HashSet<Character> s;
	static char[] mm;
	static int sx, sy, tx, ty;
	static boolean[][][] visited;
	
	
	
	static void fire(char[][] ma){
		int[] dx = new int[256];
		int[] dy = new int[256];
		dx['<'] = 0;
		dx['>'] = 0;
		dx['^'] = -1;
		dx['v'] = 1;
		dy['<'] = -1;
		dy['>'] = 1;
		dy['^'] = 0;
		dy['v'] = 0;
		for(int i = 0; i < M; i++)
			for(int j = 0; j < N; j++){
				if (s.contains(ma[i][j]) && ma[i][j] != '#'){
					//laser
					int x = i + dx[ma[i][j]];
					int y = j + dy[ma[i][j]];
					while(x >= 0 && x < M && y >= 0 && y < N && !s.contains(ma[x][y])){
						ma[x][y] = 'x';
						x += dx[ma[i][j]];
						y += dy[ma[i][j]];
					}
				}
			}
		return;
	}
	
	static void turn(char[][] ma){
		for(int i = 0; i < M; i++)
			for(int j = 0; j < N; j++){
				if (s.contains(ma[i][j]) && ma[i][j] != '#')
					ma[i][j] = mm[ma[i][j]];
			}
		return;
	}
	
	public static void main(String args[]){
		mm = new char[256];
		mm['<'] = '^';
		mm['>'] = 'v';
		mm['^'] = '>';
		mm['v'] = '<';
		s = new HashSet<Character>();
		s.add('<');
		s.add('>');
		s.add('^');
		s.add('v');
		s.add('#');
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for(int c = 0; c < T; c++){
			M = sc.nextInt();
			N = sc.nextInt();
			matrix = new char[M][];
			filled = new char[4][M][];
			visited = new boolean[M][N][4];
			for(int i = 0; i < M; i++){
				String cad = sc.next();
				matrix[i] = cad.toCharArray();
				for(int j = 0; j < 4; j++)
					filled[j][i] = cad.toCharArray(); 
			}
			for(int i = 0; i < 4; i++){
				for(int j = 0; j < i; j++)
					turn(filled[i]);
				fire(filled[i]);
			}
			for(int i = 0; i < M; i++)
				for(int j = 0; j < N; j++){
					if (matrix[i][j] == 'S'){
						sx = i;
						sy = j;
					}
					if (matrix[i][j] == 'G'){
						tx = i;
						ty = j;
					}
				}
			System.out.print("Case #" + (c+1) + ": ");
			int[] dx = {0,0,1,-1};
			int[] dy = {1,-1,0,0};
			int[] state = {sx, sy, 0, 0};
			LinkedList<int[]> q = new LinkedList<int[]>();
			q.add(state);
			visited[sx][sy][0] = true;
			boolean possible = false;
			while(!q.isEmpty() && !possible){
				int[] cur = q.pollFirst();
				int x = cur[0];
				int y = cur[1];
				int p = cur[2];
				int t = cur[3];
				for(int i = 0; i < 4; i++){
					int nx = x + dx[i];
					int ny = y + dy[i];
					int np = (p + 1)%4;
					int nt = t + 1;
					if (nx < 0 || nx >= M || ny < 0 || ny >= N)
						continue;
					if (s.contains(matrix[nx][ny]))
						continue;
					if (visited[nx][ny][np])
						continue;
					if (filled[np][nx][ny] == 'x')
						continue;
					if (nx == tx && ny == ty){
						possible = true;
						System.out.println(nt);
						break;
					}
					visited[nx][ny][np] = true;
					int[] ns = {nx, ny, np, nt};
					q.add(ns);
				}
			}
			if (!possible)
				System.out.println("impossible");
		}
	}
	
	
	static void debug(char[][] m){
		for(int i = 0; i < M; i++){
			for(int j = 0; j < N; j++)
				System.out.print(m[i][j]);
			System.out.println();
		}
	}

}

#!/usr/bin/python


DIR = [(0, -1), (-1, 0), (0, 1), (1, 0)]
N_DIRS = len(DIR)


def move(x, y, d):
    dx, dy = DIR[d]
    return x + dx, y + dy


def process(nt):
    n_rows, n_cols = map(int, raw_input().split())
    rows, cols = range(n_rows), range(n_cols)
    grid = [raw_input() for _ in rows]
    occupied = [[set() for _ in cols] for _ in rows]

    lasers_to_dir = {
        '<': 0,
        '^': 1,
        '>': 2,
        'v': 3,
    }

    def valid(row, col):
        if row < 0 or row >= n_rows:
            return False
        if col < 0 or col >= n_cols:
            return False
        return True

    def shoot(row, col):
        direction = lasers_to_dir[grid[row][col]]
        for second in xrange(N_DIRS):
            r, c = row, col
            while True:
                occupied[r][c].add(second)
                r, c = move(r, c, direction)
                if not valid(r, c):
                    break
            direction = (direction + 1) % N_DIRS

    inf = 1000000000

    dist = [[[inf for _ in DIR] for _ in cols] for _ in rows]
    for row, row_str in enumerate(grid):
        for col, cell in enumerate(row_str):
            if cell in lasers_to_dir:
                shoot(row, col)
            elif cell == '#':
                occupied[row][col] = set(range(N_DIRS))
            elif cell == 'S':
                q = [(row, col, 0)]
                dist[row][col][0] = 0
            elif cell == 'G':
                goal_row, goal_col = row, col

    while q:
        row, col, sec = q.pop()
        for d in xrange(N_DIRS):
            r, c = move(row, col, d)
            s = (sec + 1) % N_DIRS
            if not valid(r, c) or s in occupied[r][c]:
                continue
            if dist[r][c][s] > dist[row][col][sec] + 1:
                dist[r][c][s] = dist[row][col][sec] + 1
                q.append((r, c, s))

    sol = min(dist[goal_row][goal_col])
    sol = sol if sol < inf else 'impossible'
    print 'Case {}: {}'.format(nt + 1, sol)

if __name__ == '__main__':
    ntests = input()
    for nt in xrange(ntests):
        process(nt)

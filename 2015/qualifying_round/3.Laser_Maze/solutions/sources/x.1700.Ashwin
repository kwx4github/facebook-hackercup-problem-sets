#include <iostream>
#include <queue>
#include <cstdio>
#include <cstring>
#include <utility>
#define mp make_pair

using namespace std;

struct srt
{
    char inp;
    int visited[4];
    int blocked[4];
    int cost;
};

int main()
{
    FILE *fi = fopen("inp.txt", "r");
    FILE *fo = fopen("op.txt", "w");

    int t;

    fscanf(fi, "%d", &t);

    for (int lol = 1; lol <= t; lol++) {
        int m, n, i, j, k, initx, inity, flag, time;

        fscanf(fi, "%d %d", &m, &n);

        struct srt s[m][n];

        memset(s, 0, sizeof(s));

        for (i = 0; i < m; i++)
            for (j = 0; j < n; j++)
                fscanf(fi, " %c", &s[i][j].inp);

        /*for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++)
                printf("%c", s[i][j].inp);
            cout << endl;
        }
        cout << endl;*/

        for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                if (s[i][j].inp == '.')
                    continue;

                else if (s[i][j].inp == '#') {
                    for (k = 0; k < 4; k++)
                        s[i][j].blocked[k] = 1;
                }

                else if (s[i][j].inp == '^') {
                    time = 0;
                    for (k = i-1; k >= 0; k--) {
                        if (s[k][j].inp == '.' || s[k][j].inp == 'S' || s[k][j].inp == 'G')
                            s[k][j].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 1;
                    for (k = j+1; k < n; k++) {
                        if (s[i][k].inp == '.' || s[i][k].inp == 'S' || s[i][k].inp == 'G')
                            s[i][k].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 2;
                    for (k = i+1; k < m; k++) {
                        if (s[k][j].inp == '.' || s[k][j].inp == 'S' || s[k][j].inp == 'G')
                            s[k][j].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 3;
                    for (k = j-1; k >= 0; k--) {
                        if (s[i][k].inp == '.' || s[i][k].inp == 'S' || s[i][k].inp == 'G')
                            s[i][k].blocked[time] = 1;

                        else
                            break;
                    }
                }

                else if (s[i][j].inp == '>') {
                    time = 0;
                    for (k = j+1; k < n; k++) {
                        if (s[i][k].inp == '.' || s[i][k].inp == 'S' || s[i][k].inp == 'G')
                            s[i][k].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 1;
                    for (k = i+1; k < m; k++) {
                        if (s[k][j].inp == '.' || s[k][j].inp == 'S' || s[k][j].inp == 'G')
                            s[k][j].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 2;
                    for (k = j-1; k >= 0; k--) {
                        if (s[i][k].inp == '.' || s[i][k].inp == 'S' || s[i][k].inp == 'G')
                            s[i][k].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 3;
                    for (k = i-1; k >= 0; k--) {
                        if (s[k][j].inp == '.' || s[k][j].inp == 'S' || s[k][j].inp == 'G')
                            s[k][j].blocked[time] = 1;

                        else
                            break;
                    }
                }

                else if (s[i][j].inp == 'v') {
                    time = 0;
                    for (k = i+1; k < m; k++) {
                        if (s[k][j].inp == '.' || s[k][j].inp == 'S' || s[k][j].inp == 'G')
                            s[k][j].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 1;
                    for (k = j-1; k >= 0; k--) {
                        if (s[i][k].inp == '.' || s[i][k].inp == 'S' || s[i][k].inp == 'G')
                            s[i][k].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 2;
                    for (k = i-1; k >= 0; k--) {
                        if (s[k][j].inp == '.' || s[k][j].inp == 'S' || s[k][j].inp == 'G')
                            s[k][j].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 3;
                    for (k = j+1; k < n; k++) {
                        if (s[i][k].inp == '.' || s[i][k].inp == 'S' || s[i][k].inp == 'G')
                            s[i][k].blocked[time] = 1;

                        else
                            break;
                    }
                }

                else if (s[i][j].inp == '<') {
                    time = 0;
                    for (k = j-1; k >= 0; k--) {
                        if (s[i][k].inp == '.' || s[i][k].inp == 'S' || s[i][k].inp == 'G')
                            s[i][k].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 1;
                    for (k = i-1; k >= 0; k--) {
                        if (s[k][j].inp == '.' || s[k][j].inp == 'S' || s[k][j].inp == 'G')
                            s[k][j].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 2;
                    for (k = j+1; k < n; k++) {
                        if (s[i][k].inp == '.' || s[i][k].inp == 'S' || s[i][k].inp == 'G')
                            s[i][k].blocked[time] = 1;

                        else
                            break;
                    }

                    time = 3;
                    for (k = i+1; k < m; k++) {
                        if (s[k][j].inp == '.' || s[k][j].inp == 'S' || s[k][j].inp == 'G')
                            s[k][j].blocked[time] = 1;

                        else
                            break;
                    }
                }

                else if (s[i][j].inp == 'S')
                    initx = i, inity = j;
            }
        } // End of for loop which analyses the input symbols

        /*for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                for (k = 0; k < 4; k++) {
                    cout << s[i][j].blocked[k] << " ";
                }
                cout << endl;
            }
            cout << endl;
        }*/


        //cout << initx << " " << inity << endl;

        queue < pair <int, int> > q;
        pair <int, int> cur;

        time = 0;
        q.push(mp(initx, inity));
        s[initx][inity].visited[time] = 1;
        s[initx][inity].cost = 0;

        int t1 = -1;
        flag = 0;
        while (!q.empty()) {
            cur = q.front();
            q.pop();

            i = cur.first;
            j = cur.second;

            if (s[i][j].cost != t1) {
                t1 = s[i][j].cost;
                time = (time+1) % 4;
            }

            //cout << time << " " << i << " " << j << endl;

            if (s[i][j].inp == 'G') {
                flag = 1;
                break;
            }

            if (j+1 < n) { //Move right
                if (s[i][j+1].visited[time] == 0 && s[i][j+1].blocked[time] == 0) {
                    s[i][j+1].cost = s[i][j].cost + 1;
                    s[i][j+1].visited[time] = 1;
                    q.push(mp(i, j+1));
                    //cout << "hi";
                }
                //cout << "bye";
            }

            if (i+1 < m) { //Move down
                if (s[i+1][j].visited[time] == 0 && s[i][j+1].blocked[time] == 0) {
                    s[i+1][j].cost = s[i][j].cost + 1;
                    s[i+1][j].visited[time] = 1;
                    q.push(mp(i+1, j));
                }
            }

            if (j-1 >= 0) { //Move left
                if (s[i][j-1].visited[time] == 0 && s[i][j-1].blocked[time] == 0) {
                    s[i][j-1].cost = s[i][j].cost + 1;
                    s[i][j-1].visited[time] = 1;
                    q.push(mp(i, j-1));
                }
            }

            if (i-1 >= 0) { //Move up
                if (s[i-1][j].visited[time] == 0 && s[i-1][j].blocked[time] == 0) {
                    s[i-1][j].cost = s[i][j].cost + 1;
                    s[i-1][j].visited[time] = 1;
                    q.push(mp(i-1, j));
                }
            }
        }

        //cout << endl << q.size() << " " << i << " " << j << endl;
        if (flag)
            fprintf(fo, "Case #%d: %d\n", lol, s[i][j].cost);

        else
            fprintf(fo, "Case #%d: impossible\n", lol);
    }

    fclose(fi);
    fclose(fo);

    return 0;
}

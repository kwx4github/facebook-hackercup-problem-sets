// {{{ Boilerplate Code <--------------------------------------------------
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define ALL(A)     (A).begin(), (A).end()

using namespace std;

// }}}

int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};

int main(){
	int T;
	cin>>T;


	for(int iter=0; iter<T; iter++){
		cout<<"Case #"<<(iter+1)<<": ";

		int M,N;

		cin>>M>>N;

		char stage[4][102][102];
		int visited[4][102][102];

		FOR(i,0,4) FOR(j,0,102) FOR(k,0,102) stage[i][j][k]='#';
		FOR(i,0,4) FOR(j,0,102) FOR(k,0,102) visited[i][j][k]=0;

		int startx=0;
		int starty=0;
		int goalx=0;
		int goaly=0;

		FOR(i,0,M){
			FOR(j,0,N){
				cin>>stage[0][i+1][j+1];

				if(stage[0][i+1][j+1]=='S'){
					startx=i+1;starty=j+1;
					stage[0][i+1][j+1]='.';
				}
				if(stage[0][i+1][j+1]=='G'){
					goalx=i+1;goaly=j+1;
					stage[0][i+1][j+1]='.';
				}
			}
		}


		FOR(s,1,4){
			FOR(i,0,102){
				FOR(j,0,102){
					char n=stage[s-1][i][j];

					if(n=='^')
						n='>';
					else if(n=='>')
						n='v';
					else if(n=='v')
						n='<';
					else if(n=='<')
						n='^';

					stage[s][i][j]=n;
				}
			}
		}

		FOR(s,0,4){
			FOR(i,0,102){
				FOR(j,0,102){
					char n=stage[s][i][j];
					if(n=='^'){
						int x=i;
						int y=j;

						while(stage[s][--x][y]!='#'){
							stage[s][x][y]=',';
						}
					}

					if(n=='>'){
						int x=i;
						int y=j;

						while(stage[s][x][++y]!='#'){
							stage[s][x][y]=',';
						}
					}

					if(n=='v'){
						int x=i;
						int y=j;

						while(stage[s][++x][y]!='#'){
							stage[s][x][y]=',';
						}
					}

					if(n=='<'){
						int x=i;
						int y=j;

						while(stage[s][x][--y]!='#'){
							stage[s][x][y]=',';
						}
					}
				}
			}
		}

		vector <int> cands;
		cands.push_back(startx*102+starty);

		int steps=0;
		int flag=0;

		while(!cands.empty()){
			vector <int> cands_tmp=cands;
			cands.clear();

			FOR(it,0,cands_tmp.size()){
				int curs=cands_tmp[it]/10404;
				int curx=(cands_tmp[it]%10404)/102;
				int cury=cands_tmp[it]%102;

				if(curx==goalx && cury==goaly)
					flag=1;

				FOR(i,0,4){
					int nexts=(curs+1)%4;
					int nextx=curx+dx[i];
					int nexty=cury+dy[i];

					if(visited[nexts][nextx][nexty])
						continue;

					visited[nexts][nextx][nexty]=1;

					if(stage[nexts][nextx][nexty]=='.'){
						cands.push_back(nexts*10404+nextx*102+nexty);
					}
				}
			}

			if(flag)
				break;
			steps++;
		}

		if(flag)
			cout<<steps;
		else
			cout<<"impossible";
		cout<<endl;

	}

}

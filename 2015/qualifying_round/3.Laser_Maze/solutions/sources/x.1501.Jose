#include <bits/stdc++.h>
using namespace std;

#define INF 1000000000
#define MAX 105

int dr[] = {-1, 0,0,1};
int dc[] = { 0,-1,1,0};

struct Nodo { int fil, col; };
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

Nodo s, g;
int n, m, TC;
char maze[MAX][MAX], A[MAX][MAX], B[MAX][MAX], C[MAX][MAX], D[MAX][MAX];

void make_st(char st[][MAX], int n, int m)
{
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            if (st[i][j]=='v') {
                maze[i][j] = '<';
                for (int k = i+1; k < n; ++k){
                    if (st[k][j] == '.') st[k][j] = '#';
                    else break;
                }
            }
            if (st[i][j]=='^') {
                maze[i][j] = '>';
                for (int k = i-1; k >=0; --k){
                    if (st[k][j] == '.') st[k][j] = '#';
                    else break;
                }
            }
            if (st[i][j]=='>') {
                maze[i][j] = 'v';
                for (int k = j+1; k < m; ++k){
                    if (st[i][k] == '.') st[i][k] = '#';
                    else break;
                }
            }
            if (st[i][j]=='<') {
                maze[i][j] = '^';
                for (int k = j-1; k >=0; --k){
                    if (st[i][k] == '.') st[i][k] = '#';
                    else break;
                }
            }
        }
    }
}

queue<pair<Nodo,int> > q; 
int layer;
void neighbors(char st[][MAX], Nodo u)
{
    for (int i = 0; i < 4; ++i)  // for each neighbor of u
    {
        Nodo v;             
        v.fil = u.fil + dr[i];
        v.col = u.col + dc[i];
      
        if ( (v.fil >=0 && v.fil < n) && ( v.col>=0 && v.col < m ) ) // in range
        {
            if ( st[v.fil][v.col] == '.' ) //not seen before
            {
                q.push( make_pair(v, layer + 1));
                st[v.fil][v.col] = layer + '0';
            }
        }
    }
}

int main() 
{
    scanf("%d", &TC);
    int k=1;

    ofstream myfile;
    myfile.open ("laser_maze_output.txt");

    while( TC-- )
    {
        scanf("%d %d", &n, &m);
        for (int i = 0; i < n; i++) { scanf("%s", maze[i]); }

        ////////////////////////////////////////////////
        // clean input
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (maze[i][j]=='S') {   
                    s.fil =  i, s.col = j;
                    maze[i][j] = '.';
                }
                else if (maze[i][j]=='G')
                {
                    g.fil =  i, g.col = j;
                    maze[i][j] = '.';
                }
            }
        }

        ///////////////////////////////////////////////
        // build 4 states of the maze
        memcpy(A, maze, sizeof(maze)); make_st(A, n, m);
        memcpy(B, maze, sizeof(maze)); make_st(B, n, m);
        memcpy(C, maze, sizeof(maze)); make_st(C, n, m);
        memcpy(D, maze, sizeof(maze)); make_st(D, n, m);

        // States B->C->D-A->B
        // BFS routine
        q.push(make_pair(s, 0));                              
        bool found = false;

        while (!q.empty()) 
        {
            Nodo u = q.front().first;                      
            layer = q.front().second;
            q.pop();

            if (u.fil == g.fil && u.col == g.col) {
                myfile << "Case #" << k++ << ": " << layer << endl;
                found = true;
                break;
            }
            // search layer neighbours
            if (layer%4 == 3)       { neighbors(A, u);}// cout << "A" << endl; }
            else if( layer%4 == 0)  { neighbors(B, u);}// cout << "B" << endl; }
            else if( layer%4 == 1)  { neighbors(C, u);}// cout << "C" << endl;}
            else if( layer%4 == 2)  { neighbors(D, u);}// cout << "D" << endl;}
        }
        if (!found) {
            myfile << "Case #" << k++ << ": impossible" << endl;
        }
    }

    myfile.close();
    return 0;
}


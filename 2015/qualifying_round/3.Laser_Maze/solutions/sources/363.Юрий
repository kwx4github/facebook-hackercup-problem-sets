#include <list>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <vector>
#include <string>
  
using namespace std;
  
#define ABS(a) (((a) > 0)? (a): -(a))
#define MIN(a, b) (((a) < (b))? (a): (b))
#define MAX(a, b) (((a) < (b))? (b): (a))
#define FOR(i, a, n) for (int i = (a); i <= (n); i++)
#define DFOR(i, a, n) for (int i = (a); i >= (n); i--)
#define SORT(a, first_element, last_element) sort(&(a)[(first_element)], &(a)[(last_element) + 1])
#define SQR(a) (a) * (a)
#define PI 3.14159265358979323846264
#define MEMS(a, b) memset((a), (b), sizeof(a))
#define MP make_pair
#define PB push_back
#define endl '\n'
#define LL long long
#define UN unsigned
#define Or ||
#define And &&
/////////////////////////////////////////////

char mp[105][105];
char vis[105][105][4];
string s[105];
int n, m;
int mov[5][2] = {0, -1, -1, 0, 0, 1, 1, 0};

struct position
{
	int x, y;
};

position start, fin;
char queue[40050][3];

void bfs()
{
	int head = 0;
	int tail = 1;
	queue[1][0] = start.x;
	queue[1][1] = start.y;
	queue[1][2] = 0;
	while (head < tail)
	{
		head++;
		int nx = queue[head][0];
		int ny = queue[head][1];
		int actual_st = queue[head][2];
		int st = actual_st % 4;
		int nexst = (actual_st + 1) % 4;

		if (nx == fin.x And ny == fin.y)
		{
			cout << actual_st << endl;
			return;
		}

		FOR(nee, 0, 3)
		{
			int nexx = nx + mov[nee][0];
			int nexy = ny + mov[nee][1];
			if (vis[nexx][nexy][nexst] == 0 And ((mp[nexx][nexy] >> nexst) & 1) == 0)
			{
				vis[nexx][nexy][nexst] = 1;
				tail++;
				queue[tail][0] = nexx;
				queue[tail][1] = nexy;
				queue[tail][2] = actual_st + 1;
			}
		}
	}
	cout << "impossible" << endl;
}

void solution()
{
	int T;
	cin >> T;
	s[0] = '#';
	FOR(i, 1, 111)
		s[0] = s[0] + '#';
	FOR(t, 1, T)
	{
		MEMS(mp, 0);
		cin >> n >> m;
		FOR(i, 1, n)
		{
			cin >> s[i];
			s[i] = '#' + s[i] + '#';
		}
		s[n + 1] = s[0];

		FOR(i, 1, n)
		{
			FOR(j, 1, m)
			{
				if (s[i][j] == 'S')
				{
					s[i][j] = '.';
					start.x = i;
					start.y = j;
				}
				else if (s[i][j] == 'G')
				{
					s[i][j] = '.';
					fin.x = i;
					fin.y = j;
				}
			}
		}

		FOR(i, 0, n + 1)
		{
			FOR(j, 0, m + 1)
			{
				if (s[i][j] != '.')
				{
					mp[i][j] = 15;
					if (s[i][j] != '#')
					{
						//char k = (s[i][j] % 19 - 3) % 6;
						char k = s[i][j];
						k = 1 - ((k >> 5) & 1) + ((k >> 4) & 1) + ((k >> 3) & 1) - ((((k + 2) >> 1) & 1) << 1);
						
						/*
						if (s[i][j] == '<')
							k = 0;
						else if (s[i][j] == '^')
							k = 3;
						else if (s[i][j] == '>')
							k = 2;
						else if (s[i][j] == 'v')
							k = 1;
						*/

						FOR(init, 0, 3)
						{
							int ii = i + mov[init][0];
							int jj = j + mov[init][1];
							while (s[ii][jj] == '.')
							{
								mp[ii][jj] |= (1 << k);
								ii += mov[init][0];
								jj += mov[init][1];
							}

							k = (k + 1) % 4;
						}
					}
				}
			}
		}
		MEMS(vis, 0);
		printf("Case #%d: ", t);
		bfs();
	}

}
     
/*-------------------*/ 
  
int main()
{
#ifdef Files
freopen("input.txt", "r", stdin);
freopen("output.txt", "w", stdout);
/*Test*/
//freopen("input.txt", "w", stdout);
double OcZ2X = clock();
#endif
  
solution();
  
#ifdef Time
cout << endl;
double P2HxQ = clock();
printf("*** Total time = %.3f sec ***", (P2HxQ - OcZ2X) / CLOCKS_PER_SEC);
#endif
}  
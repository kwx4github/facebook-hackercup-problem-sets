#include <cstdio>
#include <algorithm>
#include <map>
#include <string>
#include <utility>

using namespace std;

int X, Y;
int maze[110][110][4];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};

typedef pair<pair<int, int>, int> Pos;

bool wall(Pos p) {
	if (p.first.first < 0 || p.first.first >= X || p.first.second < 0 ||
			p.first.second >= Y) return true;
	return maze[p.first.first][p.first.second][p.second] > 0;
}

int solve() {
	pair<int, int> start;
	pair<int, int> finish;
	scanf("%d %d\n", &Y, &X);
	for (int y = 0; y < Y; ++y) {
		char tab[110];
		scanf("%s\n", tab);
		for (int x = 0; x < X; ++x) {
			if (tab[x] == 'S' || tab[x] == 'G' || tab[x] == '.') {
				for (int l = 0; l < 4; ++l) maze[x][y][l] = 0;
			}
			if (tab[x] == 'S') start = make_pair(x, y);
			if (tab[x] == 'G') finish = make_pair(x, y);
			if (tab[x] == '#') for (int l = 0; l < 4; ++l) maze[x][y][l] = 1;
      if (tab[x] == '<' || tab[x] == '^' || tab[x] =='>' || tab[x] == 'v') {
				int beg = 0;
				if (tab[x] == '^') beg = 1;
				if (tab[x] == '>') beg = 2;
				if (tab[x] == 'v') beg = 3;
				for (int l = 0; l < 4; ++l) maze[x][y][l] = 10 + ((beg + l) % 4);
			}
		}
	}
	for (int x = 0; x < X; ++x) for (int y = 0; y < Y; ++y) for (int l = 0; l < 4; ++l) {
		if (maze[x][y][l] > 2) {
			int tx = dx[maze[x][y][l] - 10];
			int ty = dy[maze[x][y][l] - 10];
			int cx = x + tx; int cy = y + ty;
			while (cx >= 0 && cx < X && cy >= 0 && cy < Y &&
					(maze[cx][cy][l] == 0 || maze[cx][cy][l] == 2)) {
				maze[cx][cy][l] = 2;
				cx += tx;
				cy += ty;
			}
		}
	}
	map<Pos, int> seen;
  Pos tosee[50000];
	tosee[0] = make_pair(start, 0);
	int ctop = 1;
	int cpos = 0;
	while (cpos < ctop) {
		Pos cur = tosee[cpos];
		if (cur.first == finish) return seen[cur];
		for (int d = 0; d < 4; ++d) {
			Pos next = cur;
			next.first.first += dx[d];
			next.first.second += dy[d];
			next.second += 1;
			next.second %= 4;
      if (wall(next)) continue;
			if (seen.find(next) != seen.end()) continue;
			seen[next] = seen[cur] + 1;
			tosee[ctop++] = next;
		}
		cpos++;
	}
	return -1;
}

string print(int s) {
  if (s == -1) return "impossible";
	char tab[300];
	sprintf(tab, "%d", s);
	return tab;
}

int main() {
	int T;
	scanf("%d\n", &T);
	for (int tt = 0; tt < T; ++tt) {
		printf("Case #%d: %s\n", tt + 1, print(solve()).c_str());
	}
	return 0;
}

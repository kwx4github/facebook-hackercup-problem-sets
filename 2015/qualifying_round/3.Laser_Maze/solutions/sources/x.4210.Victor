#include <cmath>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>
#include <deque>
#include <queue>
#include <functional>
#include <map>
#include <bitset>
#include <stack>
using namespace std;
#define fr(a,b,c) for(int a=b;a<c;a++)
#define addEdge(a,b) to[z] = b; ant[z] = adj[a]; adj[a] = z++
#define addEdgeC(a,b,c) from[z] = a; to[z] = b; ant[z] = adj[a]; adj[a] = z; cost[z] = c; edges[z] = z; z++;
#define rp(a,b) fr(a,0,b)
#define MP make_pair
#define F first
#define S second
const int infinity = 0x3f3f3f;
typedef pair<int,int> pii;
typedef long long ll;

int T,N,M;
char grid[110][110];
bool pre[4][110][110];
bool marked[110][110][4];
pii S,G;

int ri[4] = {0,-1,0,1};
int rj[4] = {-1,0,1,0};

void preProcess(){
	memset(pre,0,sizeof(pre));
	rp(m,M){
		rp(n,N){
			if(grid[m][n] == '#' || grid[m][n] == '<' || grid[m][n] == '>' || 
				grid[m][n] == '^' || grid[m][n] == 'v') rp(k,4) pre[k][m][n] = 1;
			if(grid[m][n] == '<'){
				rp(k,4){
					int a = m + ri[k], b = n + rj[k];
					while(a >= 0 && a < M && b >= 0 && b < N && pre[k][a][b] != 1){
						pre[k][a][b] = 1;
						a += ri[k]; b += rj[k];
					}
				}
			}
			if(grid[m][n] == '>'){
				rp(k,4){
					int a = m + ri[(k+2)%4], b = n + rj[(k+2)%4];
					while(a >= 0 && a < M && b >= 0 && b < N && pre[(k+2)%4][a][b] != 1){
						pre[k][a][b] = 1;
						a += ri[(k+2)%4]; b += rj[(k+2)%4];
					}
				}
			}
			if(grid[m][n] == '^'){
				rp(k,4){
					int a = m + ri[(k+1)%4], b = n + rj[(k+1)%4];
					while(a >= 0 && a < M && b >= 0 && b < N && pre[(k+1)%4][a][b] != 1){
						pre[k][a][b] = 1;
						a += ri[(k+1)%4]; b += rj[(k+1)%4];
					}
				}
			}
			if(grid[m][n] == 'v'){
				rp(k,4){
					int a = m + ri[(k+3)%4], b = n + rj[(k+3)%4];
					while(a >= 0 && a < M && b >= 0 && b < N && pre[(k+3)%4][a][b] != 1){
						pre[k][a][b] = 1;
						a += ri[(k+3)%4]; b += rj[(k+3)%4];
					}
				}
			}
		}
	}
}

int BFSE(pii root){
	queue<pii> fila = queue<pii>();
	memset(marked,false,sizeof(marked));

	marked[root.F][root.S][0] = true;
	fila.push(root);
	int len = 0;
	int e = 1;
	int c = 0;
	while(!fila.empty()){
		pii f = fila.front();
		fila.pop();
		e--;
		rp(k,4){
			if(f.F+ri[k] >= 0 && f.F+ri[k] < M){
				if(f.S+rj[k] >= 0 && f.S+rj[k] < N){
					if(grid[f.F+ri[k]][f.S+rj[k]] == '.'){
						if(!pre[(len+1)%4][f.F+ri[k]][f.S+rj[k]] && !marked[f.F+ri[k]][f.S+rj[k]][(len+1)%4]){
							fila.push(pii(f.F+ri[k],f.S+rj[k]));
							marked[f.F+ri[k]][f.S+rj[k]][(len+1)%4] = true;
							int s = fila.size();
							c++;

							if(f.F+ri[k] == G.F && f.S+rj[k] == G.S) return len;
						}
					}
				}
			}
		}
		if(e == 0){
			swap(e,c);
			len++;
		}
	}
	return -1;
}

int main(){
	scanf("%d",&T);
	rp(t,T){
		scanf("%d%d",&M,&N);
		rp(m,M){
			rp(n,N){
				scanf(" %c",&grid[m][n]);
				if(grid[m][n] == 'S'){
					S = pii(m,n);
					grid[m][n] = '.';
				}
				else if(grid[m][n] == 'G'){
					G = pii(m,n);
					grid[m][n] = '.';
				}
			}
		}
		preProcess();
		int ans = BFSE(S);
		if(ans != -1)printf("Case #%d: %d\n", t+1,ans+1);
		else printf("Case #%d: impossible\n", t+1);
	}
}
#include <fstream>
#include <queue>
#define INF 1000000000
using namespace std;
int T, n, m, best[110][110][4], sol;
char mat[110][110];
bool ucis[110][110][4], bagat[110][110][4];
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};
struct Pozitie{int x, y, t;};
queue <Pozitie> Q;

inline void Solve()
{
	int i, j, k, timp, x, y;
	Pozitie S, G, now;
	for(i = 1; i <= n; ++i)
	{
		for(j = 1; j <= m; ++j)
		{
			for(timp = 0; timp < 4; ++timp)
			{
				bagat[i][j][timp] = false;
				best[i][j][timp] = INF;
				ucis[i][j][timp] = false;
			}
		}
	}
	for(i = 1; i <= n; ++i)
	{
		for(j = 1; j <= m; ++j)
		{
			if(mat[i][j] == 'S')
			{
				S.x = i;
				S.y = j;
				S.t = 0;
			}
			if(mat[i][j] == 'G')
			{
				G.x = i;
				G.y = j;
			}
			k = -1;
			if(mat[i][j] == '^')
				k = 2;
			if(mat[i][j] == 'v')
				k = 0;
			if(mat[i][j] == '>')
				k = 1;
			if(mat[i][j] == '<')
				k = 3;
			if(k < 0)
				continue;
			for(timp = 0; timp < 4; ++timp)
			{
				ucis[i][j][timp] = true;
				x = i + dx[k];
				y = j + dy[k];
				while(mat[x][y] == '.' || mat[x][y] == 'S' || mat[x][y] == 'G')
				{
					ucis[x][y][timp] = true;
					x += dx[k];
					y += dy[k];
				}
				k--;
				if(k < 0)
					k = 3;
			}
		}
	}
	best[S.x][S.y][S.t] = 0;
	Q.push(S);
	while(!Q.empty())
	{
		S = Q.front();
		Q.pop();
		bagat[S.x][S.y][S.t] = false;
		for(k = 0; k < 4; ++k)
		{
			now.x = S.x + dx[k];
			now.y = S.y + dy[k];
			now.t = (S.t + 1) % 4;
			if(ucis[now.x][now.y][now.t] || mat[now.x][now.y] == '#')
				continue;
			if(best[now.x][now.y][now.t] > best[S.x][S.y][S.t] + 1)
			{
				best[now.x][now.y][now.t] = best[S.x][S.y][S.t] + 1;
				if(!bagat[now.x][now.y][now.t])
				{
					bagat[now.x][now.y][now.t] = true;
					Q.push(now);
				}
			}
		}
	}
	for(timp = 0; timp < 4; ++timp)
		sol = min(sol, best[G.x][G.y][timp]);
}

int main()
{
	int i, t;
	ifstream fin("C.in");
	ofstream fout("C.out");
	fin >> T;
	for(t = 1; t <= T; ++t)
	{
		fin >> n >> m;
		for(i = 1; i <= n; ++i)
			fin >> (mat[i] + 1);
		for(i = 0; i <= n + 1; ++i)
			mat[i][0] = mat[i][m + 1] = '#';
		for(i = 0; i <= m + 1; ++i)
			mat[0][i] = mat[n + 1][i] = '#';
		sol = INF;
		Solve();
		fout << "Case #" << t << ": ";
		if(sol < INF)
			fout << sol << "\n";
		else
			fout << "impossible\n";
	}
	fin.close();
	fout.close();
	return 0;
}

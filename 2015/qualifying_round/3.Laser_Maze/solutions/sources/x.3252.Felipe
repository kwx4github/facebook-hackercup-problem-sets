#include <vector>
#include <string>
#include <queue>
#include <utility>
#include <iostream>

const int INF = 1000000000;

using namespace std;

struct Point
{
    Point()
        : x(0)
        , y(0)
        {}
        
    Point(int x, int y)
        : x(x)
        , y(y)
        {}
        
    bool operator==(const Point& other) const
    {
        return (x == other.x) && (y == other.y);
    }
    
    Point& operator+=(const Point& other)
    {
        x += other.x;
        y += other.y;
        return *this;
    }
    
    Point operator+(const Point& other) const
    {
        Point p = *this;
        p += other;
        return p;        
    }
    
    int x;
    int y;
};

Point delta[] = {Point(-1, 0), Point(0, -1), Point(1, 0), Point(0, 1)};

bool isvalid(const Point& p, const vector<string>& board)
{
    return (p.x >= 0) && (p.y >= 0) && (p.x < board.size()) && (p.y < board[0].size());    
}

bool isopen(const Point& p, const vector<string>& board)
{
    return (board[p.x][p.y] == '.') || (board[p.x][p.y] == 'S') || (board[p.x][p.y] == 'G');
}

void applylaser(const vector<string>& board, vector<vector<int>>& maze, const Point& location, int startDirection)
{
    maze[location.x][location.y] = 0;
    for(int d=0;d<4;++d)
    {
        int dir = (d + startDirection) % 4;
        auto current = location + delta[dir];
        while(isvalid(current, board) && isopen(current, board))
        {
            maze[current.x][current.y] &= ~(1 << d);
            current += delta[dir];
        }
    }
}

vector<vector<int>> buildmaze(const vector<string>& board)
{
    vector<vector<int>> maze(board.size(), vector<int>(board[0].size(), 15));
    for(int i=0;i<maze.size();++i)
    {
        for(int j=0;j<maze[i].size();++j)
        {
            if(board[i][j] == '#')
            {
                maze[i][j] = 0;
            }
            else if(board[i][j] == '^')
            {
                applylaser(board, maze, Point(i,j), 0);
            }
            else if(board[i][j] == 'v')
            {
                applylaser(board, maze, Point(i,j), 2);
            }
            else if(board[i][j] == '<')
            {
                applylaser(board, maze, Point(i,j), 1);
            }
            else if(board[i][j] == '>')
            {
                applylaser(board, maze, Point(i,j), 3);
            }  
        }
    }
    
    return maze;
}

bool isvalidstate(const Point& p, const vector<vector<int>>& maze, int currentDir)
{
    return ((maze[p.x][p.y] & (1 << currentDir)) != 0);
}

Point findelem(const vector<string>& board, char c)
{
    Point ret;
    for(int i=0;i<board.size();++i)
    {
        for(int j=0;j<board[0].size();++j)
        {
            if(board[i][j] == c)
            {
                ret = Point(i,j);
            }
        }            
    }
    
    return ret;
}

Point getstart(const vector<string>& board)
{
    return findelem(board, 'S');
}

Point getgoal(const vector<string>& board)
{
    return findelem(board, 'G');
}

int solve(const vector<string>& board)
{
    auto maze = buildmaze(board);
    auto start = getstart(board);
    auto goal = getgoal(board);
    
    /*
    if(!isvalidstate(start, maze, 0))
    {
        return INF;
    }
    */
    
    vector<vector<vector<int>>> dist(maze.size(), vector<vector<int>>(maze[0].size(), vector<int>(4, INF)));
    queue<pair<Point, int>> q;
    dist[start.x][start.y][0] = 0;
    q.push(make_pair(start, 0));
    
    while(!q.empty())
    {
        auto curState = q.front();
        q.pop();
        auto& curPoint = curState.first;
        auto curDirection = curState.second;
        
        if(curPoint == goal)
        {
            return dist[curPoint.x][curPoint.y][curDirection];
        }
        
        int nextDirection = (curDirection+1) % 4;
        for(int d=0;d<4;++d)
        {
            auto nextPoint = curPoint + delta[d];
            if(!isvalid(nextPoint, board))
            {
                continue;
            }
            
            if(!isvalidstate(nextPoint, maze, nextDirection))
            {
                continue;
            }
            
            if(dist[nextPoint.x][nextPoint.y][nextDirection] != INF)
            {
                continue;
            }
            
            dist[nextPoint.x][nextPoint.y][nextDirection] = 1 + dist[curPoint.x][curPoint.y][curDirection];
            q.push(make_pair(nextPoint, nextDirection));
        }
    }
    
    return INF;
}

int main()
{
    int t;
    cin >> t;
    for(int lp=1;lp<=t;++lp)
    {
        int m, n;
        cin >> m >> n;
        vector<string> board(m, string(n, '0'));
        for(auto&& s : board)
        {
            cin >> s;
        }
        
        int resp = solve(board);
        cout << "Case #" << lp << ": ";
        if(resp == INF)
        {
            cout << "impossible\n";
        }
        else
        {
            cout << resp << "\n";
        }
    }
    return 0;    
}
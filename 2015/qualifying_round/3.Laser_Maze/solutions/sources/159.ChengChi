//+-------------------------------------+
//|     By   qwer_zcc                   |
//|     Date 30/10/2014                 |
//+-------------------------------------+
#include <bits/stdc++.h>
#define INF (int(2e9))
#define LLINF ((LL)(1e18))
#define LL long long
#define uLL unsigned long long
#define uint unsigned int
#define D double
#define LD long double
#define rep(i,a,b) for (int i=a;i<=b;i++)
#define drep(i,a,b) for (int i=a;i>=b;i--)
#define M(a) memset(a,0,sizeof(a));
#define pb push_back
#define mp make_pair
#define Pi M_PI
using namespace std;
template<class T> inline T min(T &a,T &b) {return a<b?a:b;}
template<class T> inline T max(T &a,T &b) {return a>b?a:b;}
template<class T> void read(T &x)
{
    char ch;
    while ((ch=getchar()) && !(ch>='0'&&ch<='9'));x=ch-'0';
    while ((ch=getchar()) && (ch>='0'&&ch<='9')) x=x*10+ch-'0';
}
LL Pow(LL a,LL b,LL mod) {LL res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
LL Pow(LL a,LL b) {LL res=1;for(;b;b>>=1){if(b&1)res=res*a;a=a*a;}return res;}
const int Up=1,Down=2,Left=3,Right=4;
const pair<int,int> Run[4]={mp(-1,0),mp(1,0),mp(0,-1),mp(0,1)};
int Sx,Sy,Tx,Ty,n,m,dt[200][200],fail[6][200][200],dis[6][200][200];
char s[200];
int char_to_int(int i,int j,char x)
{
	if (x=='.') return 0;
	else if (x=='^') return Up;
	else if (x=='v') return Down;
	else if (x=='<') return Left;
	else if (x=='>') return Right;
	else if (x=='S') {Sx=i;Sy=j;return 0;}
	else if (x=='G') {Tx=i;Ty=j;return 0;}
	else if (x=='#') return 5;
	assert(0);
}
struct point
{
	int x,y,z;
	point(){}
	point(int _x,int _y,int _z) : x(_x),y(_y),z(_z) {}
};
queue<point> Q;
void work(int ti)
{
	printf("Case #%d: ",ti);
	scanf("%d%d",&n,&m);
	rep(i,1,n)
	{
		scanf("%s",s+1);
		rep(j,1,m) dt[i][j]=char_to_int(i,j,s[j]);
	}
	rep(_,0,3)
	{
		rep(i,1,n) rep(j,1,m) fail[_][i][j]=0;
		rep(i,1,n) rep(j,1,m)
		if (dt[i][j]>=1 && dt[i][j]<=4)
		{
			int dx=Run[dt[i][j]-1].first,dy=Run[dt[i][j]-1].second,x=i,y=j;
			fail[_][x][y]=1;
			while ((x+dx)>0 && (x+dx)<=n && (y+dy)>0 && (y+dy)<=m && !dt[x+dx][y+dy]) x+=dx,y+=dy,fail[_][x][y]=1;
		}
		rep(i,1,n) rep(j,1,m)
		{
			if (dt[i][j]==1) dt[i][j]=4;
			else if (dt[i][j]==2) dt[i][j]=3;
			else if (dt[i][j]==3) dt[i][j]=1;
			else if (dt[i][j]==4) dt[i][j]=2;
		}
	}
	/*
	rep(_,0,3)
	{
		rep(i,1,n)
		{
			rep(j,1,m) printf("%d ",fail[_][i][j]);
			puts("");
		}
		puts("\n");
	}
	*/
	rep(_,0,3) rep(i,1,n) rep(j,1,m) dis[_][i][j]=INF;
	dis[0][Sx][Sy]=0;
	Q.push(point(Sx,Sy,0));
	while (Q.size())
	{
		int x=Q.front().x,y=Q.front().y,_=Q.front().z;Q.pop();
		rep(i,0,3)
		{
			int dx=Run[i].first,dy=Run[i].second;
			if ((x+dx)>0 && (x+dx)<=n && (y+dy)>0 && (y+dy)<=m && !dt[x+dx][y+dy] && !fail[(_+1)%4][x+dx][y+dy])
			{
				if (dis[(_+1)%4][x+dx][y+dy]>dis[_][x][y]+1)
				{
					dis[(_+1)%4][x+dx][y+dy]=dis[_][x][y]+1;
					Q.push(point(x+dx,y+dy,(_+1)%4));
				}
			}
		}
	}
	int ans=INF;
	rep(_,0,3) ans=min(ans,dis[_][Tx][Ty]);
	if (ans==INF) puts("impossible");
	else printf("%d\n",ans);
}
int main()
{
	//freopen("laser_maze.txt","r",stdin);
	//freopen("me.out","w",stdout);
	int cs,ti=0;
	scanf("%d",&cs);
	while (cs--) work(++ti);
}


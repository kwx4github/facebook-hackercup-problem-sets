#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

#define X first
#define Y second

#define MP make_pair

#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


typedef pair<int,int> pint;
typedef map<int,int> mint;


#define SIZE 105

char board[SIZE][SIZE];
bool vis[SIZE][SIZE][4];

struct state{
    int r,c,cnt,mov;
}tmp;

int row,col;

int get( char c ){
    if ( c == '<' )return 0;
    if ( c == '^' )return 1;
    if ( c == '>' )return 2;
    if ( c == 'v' )return 3;
    exit(5);
}

bool destroy(int r,int c,int cnt){

    for (int i=r-1;i>=0;--i){
        if ( board[i][c] == '#' ){
            break;
        }else if ( board[i][c] != '.' ){
            int val = get( board[i][c] );
            val+= cnt;
            val%=4;
            if ( val == 3 )return true;
            break;
        }
    }

    for (int i=r+1;i<row;++i){
        if ( board[i][c] == '#' ){
            break;
        }else if ( board[i][c] != '.' ){
            int val = get( board[i][c] );
            val+= cnt;
            val%=4;
            if ( val == 1 )return true;
            break;
        }
    }

    for (int j=c-1;j>=0;--j){
        if ( board[r][j] == '#' ){
            break;
        }else if ( board[r][j] != '.' ){
            int val = get( board[r][j] );
            val+= cnt;
            val%=4;
            if ( val == 2 )return true;
            break;
        }
    }

    for (int j=c+1;j<col;++j){
        if ( board[r][j] == '#' ){
            break;
        }else if ( board[r][j] != '.' ){
            int val = get( board[r][j] );
            val+= cnt;
            val%=4;
            if ( val == 0 )return true;
            break;
        }
    }
    return false;
}


int dr[]={-1,0,1,0};
int dc[]={0,-1,0,1};

int bfs(){

    CLR(vis);
    vector< pint > st,fn;
    for (int i=0;i<row;++i){
        for (int j=0;j<col;++j){
            if ( board[i][j] == 'S' ){
                st .PB( MP( i,j ) );
                board[i][j] = '.';
            }
            if ( board[i][j] == 'G' ){
                fn .PB( MP( i,j ) );
                board[i][j] = '.';
            }
        }
    }
    sort( st.begin(),st.end() );
    sort( fn.begin(),fn.end() );

    queue<state> q;
    for (int i=0;i<st.size();++i){
        tmp.r = st[i].X;
        tmp.c = st[i].Y;
        tmp.cnt = 0;
        tmp.mov = 0;
        q.push( tmp );
    }

    while ( !q.empty() ){

        state ff = q.front();q.pop();
        pint shaon = MP(ff.r,ff.c);
        if ( find( fn.begin(),fn.end(),shaon ) != fn.end() )return ff.mov;

        for (int i=0;i<4;++i){
            tmp.r = ff.r + dr[i];
            tmp.c = ff.c + dc[i];
            tmp.cnt = ff.cnt+1;
            tmp.cnt %= 4;
            tmp.mov = ff.mov+1;

            if ( tmp.r >= 0 && tmp.r <row && tmp.c >=0 && tmp.c <col && board[tmp.r][tmp.c] == '.' && !vis[tmp.r][tmp.c][tmp.cnt] && !destroy(tmp.r,tmp.c,tmp.cnt)  ){
                q.push( tmp );
                vis[tmp.r][tmp.c][tmp.cnt] = true;
            }
        }
    }
    return -1;
}


int main(){

    freopen("laser_maze.txt","r",stdin);
    freopen("out.txt","w",stdout);

    int kase;
    scanf("%d",&kase);

    for (int kk=1;kase--;++kk){
        scanf("%d %d",&row,&col);
        for (int i=0;i<row;++i){
            scanf("%s",board[i]);
        }
        printf("Case #%d: ",kk);
        int ans = bfs();

        if ( ans == -1 )printf("impossible\n");
        else printf("%d\n",ans);

    }


    return 0;
}

#include <stdio.h>

struct node{
	int x, y, t;
	node(){}
	node(int x_, int y_, int t_){
		x = x_;
		y = y_;
		t = t_;
	}
};

const int idx[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};

int T;
int N, M;
int map[102][102];
int Sx, Sy, Gx, Gy;
int mod[102][102][4];
char str[102];
int d[102][102][4]; // t%4

node Q[100000];
int head, tail;
int V[102][102][4];
int lvl[102][102][4];

void block(int i, int j, int dir, int t){
	if(dir == 0){
		for(int k = i ; k >= 1 ; k --){	
			if(k != i && map[k][j] != 0) break;
			mod[k][j][t] = 1;
		}
	}
	else if(dir == 1){
		for(int k = j ; k <= M ; k ++){
			if(k != j && map[i][k] != 0) break;
			mod[i][k][t] = 1;
		}
	}
	else if(dir == 2){
		for(int k = i ; k <= N ; k ++){
			if(k != i && map[k][j] != 0) break;
			mod[k][j][t] = 1;
		}
	}
	else{
		for(int k = j ; k >= 1 ; k --){
			if(k != j && map[i][k] != 0) break;
			mod[i][k][t] = 1;
		}
	}

}

int main(){
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d", &T);
	for(int z = 1 ; z <= T ; z ++){
		scanf("%d %d", &N, &M);

		for(int i = 1 ; i <= N ; i ++){
			for(int j = 1 ; j <= M ; j ++){
				for(int k = 0 ; k < 4 ; k ++){
					mod[i][j][k] = 0;
					V[i][j][k] = 0;
					lvl[i][j][k] = 0;
				}
			}
		}

		for(int i = 1 ; i <= N ; i ++){
			scanf("%s", str);
			for(int j = 0 ; j < M ; j ++){
				if(str[j] == '#') map[i][j+1] = 1;
				else if(str[j] == '^') map[i][j+1] = 2;
				else if(str[j] == '>') map[i][j+1] = 3;
				else if(str[j] == 'v') map[i][j+1] = 4;
				else if(str[j] == '<') map[i][j+1] = 5;
				else map[i][j+1] = 0;

				if(str[j] == 'S'){ Sx = j+1; Sy = i; }
				if(str[j] == 'G'){ Gx = j+1; Gy = i; }
			}
		}

		for(int i = 1 ; i <= N ; i ++){
			for(int j = 1 ; j <= M ; j ++){
				if(map[i][j] == 1) mod[i][j][0] = mod[i][j][1] = mod[i][j][2] = mod[i][j][3] = 1;
				else if(map[i][j] == 2){
					block(i,j,0,0);
					block(i,j,1,1);
					block(i,j,2,2);
					block(i,j,3,3);
				}
				else if(map[i][j] == 3){
					block(i,j,1,0);
					block(i,j,2,1);
					block(i,j,3,2);
					block(i,j,0,3);
				}
				else if(map[i][j] == 4){
					block(i,j,2,0);
					block(i,j,3,1);
					block(i,j,0,2);
					block(i,j,1,3);
				}
				else if(map[i][j] == 5){
					block(i,j,3,0);
					block(i,j,0,1);
					block(i,j,1,2);
					block(i,j,2,3);
				}
			}
		}

		for(int i = 0 ; i <= M+1 ; i ++)
			for(int j = 0 ; j < 4 ; j ++) mod[0][i][j] = mod[N+1][i][j] = 1;
		for(int i = 0 ; i <= N+1 ; i ++) 
			for(int j = 0 ; j < 4 ; j ++) mod[i][0][j] = mod[i][M+1][j] = 1;
	
		head = tail = 0;
		Q[head ++] = node(Sx, Sy, 0);
		V[Sy][Sx][0] = 1;
		lvl[Sy][Sx][0] = 0;
		
		int ans = -1;
		while(head > tail){
			node c = Q[tail ++];
			if(c.x == Gx && c.y == Gy){
				ans = lvl[c.y][c.x][c.t]; break;
			}
			for(int i = 0 ; i < 4 ; i ++){
				int dx = c.x+idx[i][0];
				int dy = c.y+idx[i][1];
				int dt = (c.t+1)%4;
				
				if(mod[dy][dx][dt] == 0 && V[dy][dx][dt] == 0){
					Q[head++] = node(dx,dy,dt);
					V[dy][dx][dt] = 1;
					lvl[dy][dx][dt] = lvl[c.y][c.x][c.t]+1;
				}
			}
		}
		printf("Case #%d: ", z);
		if(ans == -1) printf("impossible\n");
		else printf("%d\n", ans);
	}
	return 0;
}

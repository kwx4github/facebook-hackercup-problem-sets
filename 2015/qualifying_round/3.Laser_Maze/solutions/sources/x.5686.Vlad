#include <iostream>
#include <string.h>
using namespace std;
int n, m;
int v[128][128];
int UP = 2;
int RIGHT = 3;
int DOWN = 4;
int LEFT = 5;
int dd[128][128][4];
int dx[] = {+1, 0, -1, 0};
int dy[] = {0, -1, 0, +1};
int dp[2][128][128];
int main() {
  int tt; cin >> tt;
  int idx = 0;
  while (tt--) {
    cin >> n >> m;
    memset(v, 0, sizeof(v));
    for (int i = 0; i <= n + 1; ++i) v[i][0] = v[i][m + 1] = 1;
    for (int j = 0; j <= m + 1; ++j) v[0][j] = v[n + 1][j] = 1;
    int sx, sy, gx, gy;
    for (int i = 1; i <= n; ++i) {
      string s;
      cin >> s;
      for (int j = 1; j <= m; ++j) {
        if (s[j-1] == 'S') sx = i, sy = j;
        if (s[j-1] == 'G') gx = i, gy = j;
        if (s[j-1] == '<') v[i][j] = LEFT;
        if (s[j-1] == '^') v[i][j] = UP;
        if (s[j-1] == '>') v[i][j] = RIGHT;
        if (s[j-1] == 'v') v[i][j] = DOWN;
        if (s[j-1] == '#') v[i][j] = 1;
      }
    }
    memset(dd, 0, sizeof(dd));
    for (int t = 0; t < 4; ++t) {
      for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (v[i][j] == 0) {
        for (int d = 0; d < 4; ++d) {
          int nx = i, ny = j;
          while (v[nx][ny] == 0) nx += dx[d], ny += dy[d];
          if (v[nx][ny] >= 2 && (4 + d + t) % 4 + 2 == v[nx][ny]) dd[i][j][t] |= 1;
        }
      }
    }

    memset(dp, 0, sizeof(dp));
    dp[0][sx][sy] = 1;
    int found = 0;
    for (int t = 1; t <= n * m * 16 + 1; ++t) {
      memset(dp[t%2], 0, sizeof(dp[t%2]));
      for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= m; ++j) if (dp[(t + 1) % 2][i][j] == 1) {
          for (int d = 0; d < 4; ++d) {
            int nx = i + dx[d], ny = j + dy[d];
            if (v[nx][ny]) continue;
            if (dd[nx][ny][t % 4]) continue;
            dp[t % 2][nx][ny] |= 1;
          }
        }
      if (dp[t % 2][gx][gy]) {
        found = t;
        break;
      }
    }
    cout << "Case #" << ++idx << ": ";
    if (found) cout << found << '\n';
    else cout << "impossible\n";
  }
  return 0;
}

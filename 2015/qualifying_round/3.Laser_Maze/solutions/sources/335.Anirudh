//Anirudh Bhargava
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cmath>
#include <ctype.h>
#include <stack>
#include <queue>
#include <limits.h>
#include <fstream>
#include <map>
#include <set>

#define rep(i, a) for(long long Int i = 0; i < a; i++)
#define rep1(i, a) for(i = 1; i <= a; i++)
#define fo(i, a, b) for(long long Int i = a; i < b; i++)
#define defo(i, a, b) for(long long Int i = a; i >= b; i--)
#define ll long long
#define Int long long int
#define pr(i) printf("Case #%lld: ",i)
#define pb push_back
#define sz(a) ((long long Int)(a.size()))
#define x first
#define y second
#define SET(x, a) memset(x, a, sizeof(x));
#define pi  3.1415926535897
#define mod 1000000007
#define mp1 make_pair
using namespace std;

typedef vector<long long int> vi;
typedef vector<ll> vll;
typedef pair<long long int, long long int> pii;
typedef pair<ll, ll> pll;
Int ans = -1;
Int n,m,sx,sy,gx,gy;
map<pair<char,int>,char> mp;
string str[105];
int vis[105][105][4];
struct node{
    Int xc,yc,ro,cost;
};
int check(int i,int j,int rot){
    //cout<<i<<" "<<j<<" "<<rot<<"\n";
    if(str[i][j]=='#'||str[i][j]=='^'||str[i][j]=='<'||str[i][j]=='>'||str[i][j]=='v'){
        return 0;
    }
    int i1,j1;
    i1 = i;
    j1 = j;
    while(str[i1][j1]=='.'||str[i1][j1]=='S'||str[i1][j1]=='G'){
        i1--;
        if(i1==-1){
            break;
        }
    }
    if(i1!=-1&&str[i1][j1]!='#'){
        char c = mp[mp1(str[i1][j1],rot)];
        if(c=='v'){
            //cout<<i<<" "<<j<<" "<<" "<<i1<<" "<<j1<<" "<<"upar\n";
            return 0;
        }
    }
    i1 = i;
    j1 = j;
    while(str[i1][j1]=='.'||str[i1][j1]=='S'||str[i1][j1]=='G'){
        i1++;
        if(i1==n){
            break;
        }
    }
    if(i1!=n&&str[i1][j1]!='#'){
        char c = mp[mp1(str[i1][j1],rot)];
        if(c=='^'){
            //cout<<"neeche\n";
            return 0;
        }
    }
    i1 = i;
    j1 = j;
    while(str[i1][j1]=='.'||str[i1][j1]=='S'||str[i1][j1]=='G'){
        j1--;
        if(j1==-1){
            break;
        }
    }
    if(j1!=-1&&str[i1][j1]!='#'){
        char c = mp[mp1(str[i1][j1],rot)];
        if(c=='>'){
            //cout<<"left\n";
            return 0;
        }
    }
    i1 = i;
    j1 = j;
    while(str[i1][j1]=='.'||str[i1][j1]=='S'||str[i1][j1]=='G'){
        j1++;
        if(j1==m){
            break;
        }
    }
    if(j1!=n&&str[i1][j1]!='#'){
        char c = mp[mp1(str[i1][j1],rot)];
        if(c=='<'){
            //cout<<i<<" "<<j<<" "<<" "<<i1<<" "<<j1<<" "<<"right\n";
            return 0;
        }
    }
    return 1;
}
void bfs(){
    struct node temp;
    temp.xc = sx;
    temp.yc = sy;
    temp.ro = 0;
    temp.cost = 0;
    vis[sx][sy][0] = 1;
    queue<struct node> q;
    q.push(temp);
    while(q.size()!=0){
        struct node e = q.front();
        q.pop();
        if(e.xc==gx&&e.yc==gy){
            if(ans==-1){
                ans = e.cost;
            }
            else{
                ans = min(ans,e.cost);
            }
        }
        if((e.xc-1)>=0){
            if(check(e.xc-1,e.yc,(e.ro+1)%4)==1){
                if(vis[e.xc-1][e.yc][(e.ro+1)%4]==0){
                    vis[e.xc-1][e.yc][(e.ro+1)%4] = 1;
                    struct node h;
                    h.xc = e.xc-1;
                    h.yc = e.yc;
                    h.ro = (e.ro+1)%4;
                    h.cost = e.cost+1;
                    q.push(h);
                }
            }
        }
        if((e.yc-1)>=0){
            if(check(e.xc,e.yc-1,(e.ro+1)%4)==1){
                if(vis[e.xc][e.yc-1][(e.ro+1)%4]==0){
                    vis[e.xc][e.yc-1][(e.ro+1)%4] = 1;
                    struct node h;
                    h.xc = e.xc;
                    h.yc = e.yc-1;
                    h.ro = (e.ro+1)%4;
                    h.cost = e.cost+1;
                    q.push(h);
                }
            }
        }
        if((e.xc+1)<n){
            if(check(e.xc+1,e.yc,(e.ro+1)%4)==1){
                if(vis[e.xc+1][e.yc][(e.ro+1)%4]==0){
                    vis[e.xc+1][e.yc][(e.ro+1)%4] = 1;
                    struct node h;
                    h.xc = e.xc+1;
                    h.yc = e.yc;
                    h.ro = (e.ro+1)%4;
                    h.cost = e.cost+1;
                    q.push(h);
                }
            }
        }
        if((e.yc+1)<m){
            if(check(e.xc,e.yc+1,(e.ro+1)%4)==1){
                if(vis[e.xc][e.yc+1][(e.ro+1)%4]==0){
                    vis[e.xc][e.yc+1][(e.ro+1)%4] = 1;
                    struct node h;
                    h.xc = e.xc;
                    h.yc = e.yc+1;
                    h.ro = (e.ro+1)%4;
                    h.cost = e.cost+1;
                    q.push(h);
                }
            }
        }
    }
}
int main(){
    freopen("laser_maze.txt","r",stdin);
    freopen("output.txt","w",stdout);
    mp[mp1('^',0)] = '^';
    mp[mp1('^',1)] = '>';
    mp[mp1('^',2)] = 'v';
    mp[mp1('^',3)] = '<';
    mp[mp1('>',0)] = '>';
    mp[mp1('>',1)] = 'v';
    mp[mp1('>',2)] = '<';
    mp[mp1('>',3)] = '^';
    mp[mp1('v',0)] = 'v';
    mp[mp1('v',1)] = '<';
    mp[mp1('v',2)] = '^';
    mp[mp1('v',3)] = '>';
    mp[mp1('<',0)] = '<';
    mp[mp1('<',1)] = '^';
    mp[mp1('<',2)] = '>';
    mp[mp1('<',3)] = 'v';
    int test;
    Int l = 0;
    cin>>test;
    while(test--){
        l++;
        memset(vis,0,sizeof(vis));
        scanf("%lld%lld",&n,&m);
        Int i,j;
        ans = -1;
        for(i=0;i<n;i++){
            cin>>str[i];
        }
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                if(str[i][j]=='S'){
                    sx = i;
                    sy = j;
                }
                if(str[i][j]=='G'){
                    gx = i;
                    gy = j;
                }
            }
        }
        bfs();
        pr(l);
        if(ans==-1){
            cout<<"impossible\n";
        }
        else{
            cout<<ans<<"\n";
        }
    }
    return 0;
}

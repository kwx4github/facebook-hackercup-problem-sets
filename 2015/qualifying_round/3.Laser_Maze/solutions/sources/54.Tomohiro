#include<queue>
#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)

template<class T> inline void amin(T &a, T b) { if (a>b) a=b; }
template<class T> inline void amax(T &a, T b) { if (a<b) a=b; }


const char DIR[] = "^>v<";
const int dx[] = { 0, 1, 0, -1};
const int dy[] = { -1, 0, 1, 0};
int T;
int M, N;
char F[111][111];
char B[111][111][4];
int len[111][111][4];

int INF;

bool in(int y, int x) {
    return 0 <= y && y < M && 0 <= x && x < N;
}

int main() {
    memset(&INF, 0x3f, sizeof INF);

    scanf("%d", &T);
    REP ($, T) {
	scanf("%d%d", &M, &N);
	REP (i, M) scanf("%s", F[i]);
	REP (i, M) REP (j, N) {
	    if (F[i][j] == '#') REP (d, 4) B[i][j][d] = '#';
	    else REP (d, 4) B[i][j][d] = '.';
	}

	memset(len, 0x3f, sizeof len);
	
	queue<int> qY, qX, qD;
	int gY = 0, gX = 0;
	REP (i, M) REP (j, N) {
	    REP (D, 4) {
		if (F[i][j] == DIR[D]) {
		    REP (d, 4) {
			int dd = (D + d) % 4;
			for (int k=1; ; k++) {
			    int x = j + k*dx[dd], y = i + k*dy[dd];
			    if (in(y, x) && (F[y][x] == 'S' || F[y][x] == 'G' || F[y][x] == '.')) {
				B[y][x][d] = '#';
			    } else {
				break;
			    }
			}
			B[i][j][d] = '#';
		    }
		}
	    }

	    if (F[i][j] == 'S') {
		qX.push(j);
		qY.push(i);
		qD.push(0);
		len[i][j][0] = 0;
	    }
	    if (F[i][j] == 'G') {
		gX = j;
		gY = i;
	    }
	}

	while (!qX.empty()) {
	    int y = qY.front(); qY.pop();
	    int x = qX.front(); qX.pop();
	    int d = qD.front(); qD.pop();
	    REP (z, 4) {
		int yy = y + dy[z], xx = x + dx[z], dd = (d+1) % 4;
		if (in(yy, xx) && B[yy][xx][dd] == '.' && len[yy][xx][dd] > len[y][x][d]+1) {
		    len[yy][xx][dd] = len[y][x][d]+1;
		    qY.push(yy);
		    qX.push(xx);
		    qD.push(dd);
		}
	    }
	}

	int ans;
	memset(&ans, 0x3f, sizeof ans);
	REP (d, 4) {
	    amin(ans, len[gY][gX][d]);
	}
	
	// REP (d, 4) {
	//     REP (i, M) {
	// 	REP (j, N) putchar(B[i][j][d]);
	// 	putchar('\n');
	//     }
	//     putchar('\n');
	// }
	    
	printf("Case #%d: ", $+1);
	if (ans == INF) puts("impossible");
	else printf("%d\n", ans);
    }
    return 0;
}

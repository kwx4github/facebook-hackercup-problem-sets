import sys
import collections

if __name__ == "__main__":
    f = sys.stdin
    if len(sys.argv) >= 2:
        fn = sys.argv[1]
        if fn != '-':
            f = open(fn)

    T = int(f.readline())
    for _T in xrange(T):
        R, C = map(int, f.readline().split())

        passable = [[True] * C for i in xrange(R)]
        lasered = [[[] for j in xrange(C)] for i in xrange(R)]

        themap = []
        for r in xrange(R):
            themap.append(f.readline().strip())

        start = None
        goal = None
        for i in xrange(R):
            for j in xrange(C):
                if themap[i][j] in "#<>^v":
                    passable[i][j] = False
                if themap[i][j] == 'S':
                    start = (i, j, 0)
                if themap[i][j] == 'G':
                    goal = (i, j)

        assert start
        assert goal

        dirs = [(1, 0, 'v'), (0, -1, '<'), (-1, 0, '^'), (0, 1, '>')]

        for i in xrange(R):
            for j in xrange(C):
                for di, d in enumerate(dirs):
                    if d[2] != themap[i][j]:
                        continue

                    for k in xrange(4):
                        d = dirs[(di + k) % 4]
                        r = i
                        c = j

                        while True:
                            r += d[0]
                            c += d[1]

                            if r < 0 or r >= R or c < 0 or c >= C or not passable[r][c]:
                                break

                            l = lasered[r][c]
                            l.append(k)

        possible = set(start)
        q = collections.deque([start])

        done = None
        while q and done is None:
            r, c, n = q.popleft()
            for d in dirs:
                nr = r + d[0]
                nc = c + d[1]
                nn = n + 1
                if nr < 0 or nr >= R or nc < 0 or nc >= C:
                    continue
                if (nn % 4) in lasered[nr][nc]:
                    continue

                key = (nr, nc, nn % 4)
                if key in possible:
                    continue
                possible.add(key)
                q.append((nr, nc, nn))

                if (nr, nc) == goal:
                    done = nn
                    break

        # print themap
        # print passable
        # print lasered
        # print done
        # print

        print "Case #%d: %s" % (_T+1, "impossible" if done is None else done)

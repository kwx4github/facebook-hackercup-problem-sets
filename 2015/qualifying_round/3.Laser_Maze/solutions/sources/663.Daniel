#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
using namespace std;
long long t,n,m,a[101][101],sx,sy,fx,fy,used[5][101][101];
long long b[4][2]={{-1,0},{0,-1},{1,0},{0,1}};
queue<int> q;
bool lazer_hit(int x, int y, int step)
{
    for(int i=x; i<=n; i++)
    {
        if(a[i][y]==-5) break;
        if(a[i][y]!=0)
        {
            if(((a[i][y]+1)-step)%4==0) return true;
            else break;
        }
    }
    for(int i=x; i>=0; i--)
    {
        if(a[i][y]==-5) break;
        if(a[i][y]!=0)
        {
            if(((a[i][y]+1)-step)%4==-2) return true;
            else break;
        }
    }
    for(int i=y; i<=m; i++)
    {
        if(a[x][i]==-5) break;
        if(a[x][i]!=0)
        {
            if(((a[x][i]+1)-step)%4==-3) return true;
            else break;
        }
    }
    for(int i=y; i>=0; i--)
    {
        if(a[x][i]==-5) break;
        if(a[x][i]!=0)
        {
            if(((a[x][i]+1)-step)%4==-1) return true;
            else break;
        }
    }
    return false;
}
long long wave(int sx, int sy)
{
    while(!q.empty()) q.pop();
    for(int i=1; i<=n; i++)
        for(int j=1; j<=m; j++)
        {
            used[0][i][j]=used[1][i][j]=used[2][i][j]=used[3][i][j]=used[4][i][j]=0;
        }
    q.push(sx);
    q.push(sy);
    used[0][sx][sy]=1;
    used[4][sx][sy]=0;
    while(!q.empty())
    {
        int x = q.front();
        q.pop();
        int y = q.front();
        q.pop();
        for(int i=0; i<=3; i++)
        {
            int xx = x + b[i][0];
            int yy = y + b[i][1];
            if(xx>=1&&xx<=n&&yy>=1&&yy<=m&&a[xx][yy]>=0)
            {
                int curstep=used[4][x][y]+1;
                if(used[curstep%4][xx][yy]==1) continue;
                if(lazer_hit(xx,yy,curstep%4)==true) continue;
                used[4][xx][yy]=used[4][x][y]+1;
                used[curstep%4][xx][yy]=1;
                q.push(xx);
                q.push(yy);
                if(xx==fx&&yy==fy) {return used[4][xx][yy];}
            }
        }
    }
    return -1;
}
int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    scanf("%lld",&t);
    for(int o=1; o<=t; o++)
    {
        scanf("%lld%lld",&n,&m);
        for(int i=1; i<=n; i++)
        {
            scanf("\n");
            for(int j=1; j<=m; j++)
            {
                char c;
                scanf("%c",&c);
                if(c=='#') a[i][j]=-5;
                else if(c=='^') a[i][j]=-1;
                else if(c=='>') a[i][j]=-2;
                else if(c=='v') a[i][j]=-3;
                else if(c=='<') a[i][j]=-4;
                else a[i][j]=0;
                if(c=='S') {sx=i; sy=j;}
                if(c=='G') {fx=i; fy=j;}
            }
        }
        long long k=wave(sx,sy);
        if(k==-1) {printf("Case #%d: impossible\n",o);}
        else {printf("Case #%d: %lld\n",o,k);}
    }
    return 0;
}

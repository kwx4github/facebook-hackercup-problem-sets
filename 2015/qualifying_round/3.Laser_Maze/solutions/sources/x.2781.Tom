dirs = [(0,-1), (1, 0), (0, 1), (-1, 0)]
dir_names = "^>v<"

def getb(b, (x,y)):
    return b[y][x]

def setb(b, (x,y), v):
    b[y][x] = v

def on_board((x,y)):
    return 0 <= x < xs and 0 <= y < ys

def add(pos, d):
    return tuple(map(sum, zip(pos, d)))

def fire_laser(laser_board, pos, d):
    p = pos
    while on_board(p) and (p == pos or getb(board, p) in '.SG'):
        setb(laser_board, p, '#')
        p = add(p, d)

def solve():
    seen = set()
    q = [start]
    t = 0
    while q:
        t += 1
        q2 = []
        for pos in q:
            for d in dirs:
                p = add(pos, d)
                if on_board(p) and getb(laser_boards[t%4], p) == '.':
                    if p == stop:
                        return t
                    s = (p, t%4)
                    if s not in seen:
                        seen.add(s)
                        q2.append(p)
        q = q2
    return "impossible"

def load_maze():
    global xs, ys, board, laser_boards, start, stop
    ys, xs = map(int, raw_input().split())
    board = [raw_input() for i in xrange(ys)]
    laser_boards = [[["." for x in xrange(xs)] for y in xrange(ys)] for d in dirs]
    for pos in ((x,y) for x in xrange(xs) for y in xrange(ys)):
        c = getb(board, pos)
        for d in xrange(len(dirs)):
            if c == 'S':
                start = pos
                setb(laser_boards[d], pos, '.')
            elif c == 'G':
                stop = pos
                setb(laser_boards[d], pos, '.')
            elif c == '#':
                setb(laser_boards[d], pos, '#')
            elif c in dir_names:
                fire_laser(laser_boards[d], pos, dirs[(dir_names.index(c) + d) % len(dirs)])

def run():
    ts = int(raw_input())
    for t in xrange(ts):
        load_maze()
        print "Case #%d: %s" % (t + 1, solve())

if __name__ == "__main__":
    run()

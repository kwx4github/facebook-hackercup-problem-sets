#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int m,n;
string arr[105];
int dp[105][105][4],startX, startY;

enum Direction{
	UP=0,
	RIGHT,
	DOWN,
	LEFT
};

bool isValid(int i, int j){
	if(i<0||j<0)
		return false;
	if(i>=m||j>=n)
		return false;
	if(arr[i][j]=='S' || arr[i][j]=='G' || arr[i][j]=='.')
		return true;
	return false;
}

int findMax(int i, int j, int mod){
	if(!isValid(i,j))
		return 1e9;

	//cout<<i<<" "<<j<<" "<<mod<<endl;

	if(dp[i][j][mod]!=-1)
		return dp[i][j][mod];

	dp[i][j][mod] = (int)1e9;


	//check whether I get striked
	bool striked = false;
	int k;

	if(i==startX && j==startY && mod == 0)
	{}
	else{
		//left
		for(k=j-1;k>=0;k--)
		{
			if(arr[i][k]=='.' || arr[i][k]=='S' || arr[i][k]=='G')
				continue;
			if(arr[i][k]=='#') break;

			else if((arr[i][k]-'A'+mod)%4 == RIGHT)
				striked = true;
			else break;
		}
		//right
		for(k=j+1;k<n;k++){
			if(arr[i][k]=='.' || arr[i][k]=='S' || arr[i][k]=='G')
				continue;
			if(arr[i][k]=='#') break;

			else if((arr[i][k]-'A'+mod)%4 == LEFT)
				striked = true;
			else break;
		}
		//up
		for(k=i-1;k>=0;k--){
			if(arr[k][j]=='.' || arr[k][j]=='S' || arr[k][j]=='G')
				continue;
			if(arr[k][j]=='#') break;

			else if((arr[k][j]-'A'+mod)%4 == DOWN)
				striked = true;
			else break;
		}
		//down
		for(k=i+1;k<m;k++){
			if(arr[k][j]=='.' || arr[k][j]=='S' || arr[k][j]=='G')
				continue;
			if(arr[k][j]=='#') break;

			else if((arr[k][j]-'A'+mod)%4 == UP)
				striked = true;
			else break;
		}
	}
	if(striked)
		return dp[i][j][mod]=(int)1e9;

	//check whether I am at the goal
	if(arr[i][j]=='G')
		return dp[i][j][mod]=0;


	dp[i][j][mod] = min(dp[i][j][mod], 1+findMax(i+1,j,(mod+1)%4));
	dp[i][j][mod] = min(dp[i][j][mod], 1+findMax(i-1,j,(mod+1)%4));
	dp[i][j][mod] = min(dp[i][j][mod], 1+findMax(i,j+1,(mod+1)%4));
	dp[i][j][mod] = min(dp[i][j][mod], 1+findMax(i,j-1,(mod+1)%4));


	//cout<<i<<" "<<j<<" "<<mod<<" "<<dp[i][j][mod]<<endl;
	return dp[i][j][mod];
}

int main(){
	ios::sync_with_stdio(false);
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int t, i, j, test=1, ans;
	cin>>t;

	while(t--){
		cin>>m>>n;

		for(i=0;i<m;i++){
			cin>>arr[i];
			for(j=0;j<n;j++){
				if(arr[i][j]=='S')
				{
					startX = i;
					startY = j;
				}

				if(arr[i][j]=='^')
					arr[i][j]='A';
				else if(arr[i][j]=='>')
					arr[i][j]='B';
				else if(arr[i][j]=='v')
					arr[i][j]='C';
				else if(arr[i][j]=='<')
					arr[i][j]='D';
			}
		}

		memset(dp,-1,sizeof(dp));
		ans = findMax(startX,startY,0);
		cout<<"Case #"<<test++<<": ";
		if(ans == (int)1e9)
			cout<<"impossible\n";
		else cout<<ans<<'\n';
	}

	return 0;
}
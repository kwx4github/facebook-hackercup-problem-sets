#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <list>
#include <numeric>
#include <algorithm>
using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef vector<vs> vvs;
#define pb push_back
#define sz(v) (int)(v.size())

char f[105][105];
bool seen[100][100][4];

//         > v  <  ^
int dy[4]={0,1, 0,-1};
int dx[4]={1,0,-1, 0};

int main(){
  map<char,int> laser_dir;
  laser_dir['>']=0;
  laser_dir['v']=1;
  laser_dir['<']=2;
  laser_dir['^']=3;

  int run,runs,i,j;
  scanf("%d",&runs);
  for(run=1;run<=runs;run++){
    int M,N,Sy,Sx,Gy,Gx;
    scanf("%d %d",&M,&N);
    for(j=0;j<M;j++) {
      scanf("%s",f[j]);
      for(i=0;i<N;i++) {
        if(f[j][i]=='S'){
          Sy=j;Sx=i;
          f[j][i]='.';
        }
        if(f[j][i]=='G'){
          Gy=j;Gx=i;
          f[j][i]='.';
        }
      }
    }
    memset(seen,false,sizeof(seen));
    vi Qy(1,Sy),Qx(1,Sx),Qt(1,0);
    seen[Sy][Sx][0]=true;
    int res=-1;
    for(int w=0;w<sz(Qt);w++) {
      if(Qy[w]==Gy&&Qx[w]==Gx){
        res=Qt[w]; break;
      }
      for(int r=0;r<4;r++){
        int ny=Qy[w]+dy[r],nx=Qx[w]+dx[r],nt=Qt[w]+1;
        if(ny<0||nx<0||ny>=M||nx>=N)
          continue;
        if(f[ny][nx]!='.')
          continue;
        if(seen[ny][nx][nt%4])
          continue;
        seen[ny][nx][nt%4]=true;
        bool hit=false;
        for(int d=0;d<4;d++){
          for(int k=1;;k++){
            int ky=ny+dy[d]*k,kx=nx+dx[d]*k;
            if(ky<0||kx<0||ky>=M||kx>=N)
              break;
            if(f[ky][kx]=='#')
              break;
            if(f[ky][kx]=='.')
              continue;
            //laser
            if(d==(laser_dir[f[ky][kx]]+nt+2)%4){
              hit=true;
            }
            break;
          }
        }
        if(!hit) {
          Qt.pb(nt);
          Qy.pb(ny);
          Qx.pb(nx);
        }
      }
    }
    if(res==-1)
      printf("Case #%d: impossible\n",run);
    else
      printf("Case #%d: %d\n",run,res);
  }

  return 0;
}

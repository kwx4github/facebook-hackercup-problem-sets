import java.util.*;

public class lasermaze {
	static char[][] map;
	static int width;
	static int height;
	static HashMap<String, Integer> memo;

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int numCases = s.nextInt();
		for (int z = 1; z <= numCases; z++) {
			height = s.nextInt();
			width = s.nextInt();
			s.nextLine();
			map = new char[width][height];
			memo = new HashMap<String, Integer>();
			for (int y = 0; y < height; y++) {
				String str = s.nextLine();
				for(int x = 0; x < width; x++){
					map[x][y] = str.charAt(x);
				}
			}
			int sX = 0;
			int sY = 0;
			for (int x = 0; x < width; x++) {
				for (int y = 0; y < height; y++) {
					if (map[x][y] == 'S') {
						sX = x;
						sY = y;
					}
				}
			}
			int res = run(sX, sY, 0);
			System.out.println("Case #" + z + ": "
					+ (res == 987654321 ? "impossible" : res));
		}
	}

	private static int run(int sX, int sY, int i) {
		Queue<Integer> q = new ArrayDeque<Integer>();
		q.add(sX);
		q.add(sY);
		q.add(i);
		q.add(0);
		boolean first = true;
		
		while(!q.isEmpty()){
			sX = q.poll();
			sY = q.poll();
			i = q.poll();
			int res = q.poll();

			String key = sX + "|" + sY + "|" + i;
			if (memo.containsKey(key))
				continue;
			
			if (positionSafe(sX, sY, i) || first) {
				if (map[sX][sY] == 'G') {
					return res;
				} else {
					q.add(sX + 1);
					q.add(sY);
					q.add((i + 1) % 4);
					q.add(res + 1);
					
					q.add(sX - 1);
					q.add(sY);
					q.add((i + 1) % 4);
					q.add(res + 1);
					
					q.add(sX);
					q.add(sY + 1);
					q.add((i + 1) % 4);
					q.add(res + 1);
					
					q.add(sX);
					q.add(sY - 1);
					q.add((i + 1) % 4);
					q.add(res + 1);
				}
			}
			first = false;
			memo.put(key, res);
		}
		return 987654321;
	}

	private static boolean positionSafe(int sX, int sY, int i) {
		if(sX < 0 || sY < 0) return false;
		if(sX >= width || sY >= height) return false;
		
		if(map[sX][sY] != '.' && map[sX][sY] != 'S' && map[sX][sY] != 'G') return false;
		
		HashMap<Character, Character> laserMapping = new HashMap<Character, Character>();
		switch(i){
		case 0:
			laserMapping.put('^', '^');
			laserMapping.put('<', '<');
			laserMapping.put('>', '>');
			laserMapping.put('v', 'v');
			break;
		case 1:
			laserMapping.put('^', '>');
			laserMapping.put('<', '^');
			laserMapping.put('>', 'v');
			laserMapping.put('v', '<');
			break;
		case 2:
			laserMapping.put('^', 'v');
			laserMapping.put('<', '>');
			laserMapping.put('>', '<');
			laserMapping.put('v', '^');
			break;
		case 3:
			laserMapping.put('^', '<');
			laserMapping.put('<', 'v');
			laserMapping.put('>', '^');
			laserMapping.put('v', '>');
			break;
		}
		
		if(!dirSafe(sX, sY, laserMapping, 1, 0, '<')) return false;
		if(!dirSafe(sX, sY, laserMapping, -1, 0, '>')) return false;
		if(!dirSafe(sX, sY, laserMapping, 0, 1, '^')) return false;
		if(!dirSafe(sX, sY, laserMapping, 0, -1, 'v')) return false;
		
		
		return true;
	}
	static boolean dirSafe(int sX, int sY, HashMap<Character, Character> laserMapping, int dX, int dY, char targ){
		while(true){
			if(sX < 0 || sY < 0) return true;
			if(sX >= width || sY >= height) return true;
			if(map[sX][sY] == '#') return true;
			if(map[sX][sY] == laserMapping.get(targ)) return false;
			if(map[sX][sY] == '>' || map[sX][sY] == '<' || map[sX][sY] == '^' || map[sX][sY] == 'v') return true;
			
			sX += dX;
			sY += dY;
		}
	}
}

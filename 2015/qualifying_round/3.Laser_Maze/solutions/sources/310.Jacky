#include <bits/stdc++.h>

#define TEXTSTREAM

using namespace std;

const int dx[5] = {0, -1, 0, 1, 0};
const int dy[5] = {1, 0, -1, 0, 0};

string mat[300];
int M[4][200][200];
int v[4][200][200];
int n,m;

bool inside(int x, int y)
{
	if (x>=0 && x<n && y>=0 && y<m)
		return true;
	else return false;
}

int main()
{
#ifdef TEXTSTREAM
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
	int T;
	cin>>T;
	for (int cases = 1; cases<=T; cases++){
		memset(M, 0, sizeof(M));
		cin>>n>>m;
		for (int i = 0; i<n; i++) cin>>mat[i];
		int nx, ny;
		int gx, gy;
		for (int i = 0; i<n; i++) {
			for (int j = 0; j<m; j++) {
				if (mat[i][j]=='#') {
					M[0][i][j] = 5;
				}
				else if (mat[i][j]=='^') {
					M[0][i][j] = 1;
				}
				else if (mat[i][j]=='v') {
					M[0][i][j] = 3;
				}
				else if (mat[i][j]=='<') {
					M[0][i][j] = 4;
				}
				else if (mat[i][j]=='>') {
					M[0][i][j] = 2;
				}
				else if (mat[i][j]=='S') {
					nx = i; ny = j; M[0][i][j] = 0;
				}
				else if (mat[i][j]=='G') {
					gx = i; gy = j; M[0][i][j] = 0;
				} 
				else {
					M[0][i][j] = 0;
				}
			}
		}
		for (int i = 1; i<=3; i++) {
			for (int j = 0; j<n; j++)
				for (int k = 0; k<m; k++)
					M[i][j][k] = M[0][j][k];
		}
		for (int i = 0; i<4; i++) {
			for (int j = 0; j<n; j++) {
				for (int k = 0; k<m; k++) {
					if (M[i][j][k]>0 && M[i][j][k]<5) {
						int x = M[i][j][k]+i;
						if (x>4) x -= 4;
						if (x==1) {
							for (int l = 1; j-l>=0 && 
								(M[i][j-l][k]==0 || M[i][j-l][k]>5); l++) {
								M[i][j-l][k] = 6;
							}
						}
						else if (x==3) {
							for (int l = 1; j+l<n && 
								(M[i][j+l][k]==0 || M[i][j+l][k]>5); l++) {
								M[i][j+l][k] = 6;
							}
						}
						else if (x==4) {
							for (int l = 1; k-l>=0 && 
								(M[i][j][k-l]==0 || M[i][j][k-l]>5); l++) {
								M[i][j][k-l] = 6;
							}
						}
						else if (x==2) {
							for (int l = 1; k+l<m && 
								(M[i][j][k+l]==0 || M[i][j][k+l]>5); l++) {
								M[i][j][k+l] = 6;
							}
						}
					}
				}
			}
		}
		memset(v, 0, sizeof(v));
		struct node {
			int layer, x, y, step;
		};
		queue <node> Q;
		node tmp;
		tmp.layer = 0; tmp.x = nx; tmp.y = ny; tmp.step = 0;
		v[0][nx][ny] = 1;
		Q.push(tmp);
		int res = 100000000;
		while (!Q.empty()){
			node tmp = Q.front();
			//cout<<tmp.layer<<" "<<tmp.x<<"-"<<tmp.y<<" "<<tmp.step<<endl;
			for (int i = 0; i<4; i++) {
				int nx, ny;
				nx = Q.front().x+dx[i];
				ny = Q.front().y+dy[i];
				if (!inside(nx,ny)) continue;
				else {
					int nextLayer = (Q.front().layer+1)%4;
					if (v[nextLayer][nx][ny]) continue;
					if (M[nextLayer][nx][ny]>0) continue;
					else {
						node tmp;
						tmp.layer = nextLayer;
						tmp.x = nx;
						tmp.y = ny;
						tmp.step = Q.front().step+1;
						v[nextLayer][nx][ny] = 1;
						Q.push(tmp);
						if (tmp.x==gx && tmp.y==gy) res = min(res, tmp.step);
					}
				}
			}
			Q.pop();
		}
		if (res<100000000) {
			cout<<"Case #"<<cases<<": "<<res<<endl;
		} else {
			cout<<"Case #"<<cases<<": impossible"<<endl;
		}
	}
}

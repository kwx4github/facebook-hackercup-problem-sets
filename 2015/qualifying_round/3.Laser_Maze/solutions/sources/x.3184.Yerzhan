#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <deque>
#include <cassert>

using namespace std;

#ifdef WIN32
	#define I64 "%I64d"
#else
	#define I64 "%lld"
#endif

typedef long long ll;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define all(s) s.begin(), s.end()
#define sz(s) (int(s.size()))
#define fname "a"
#define ms(a,x) memset(a, x, sizeof(a))
#define forit(it,s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); ++it)
#define MAXN 1001

int dx[4] = {-1, 0, 1, 0};
int dy[4] = { 0, 1, 0,-1};

int n, m;
char s[MAXN][MAXN];
int w[MAXN][MAXN][4];
int d[MAXN][MAXN][4];
pair <int, int> start, finish;

inline void solve()
{
	memset(d, -1, sizeof(d));
	memset(w, 0, sizeof(w));
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%s", s[i]);
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
		{
			if (s[i][j] == 'S')
			{
				start = mp(i, j);
				s[i][j] = '.';
			}
			if (s[i][j] == 'G')
			{
				finish = mp(i, j);
				s[i][j] = '.';
			}
			if (s[i][j] != '.' && s[i][j] != '#')
			{
				int id = 0;
				if (s[i][j] == '^') id = 0;
				if (s[i][j] == '>') id = 1;
				if (s[i][j] == 'v') id = 2;
				if (s[i][j] == '<') id = 3;
				for (int k = 0; k < 4; ++k)
				{
					int sx = i; 
					int sy = j;
					while(1)
					{
						sx += dx[(id + k) % 4];
						sy += dy[(id + k) % 4];
						if (sx < 0 || sx >= n || sy < 0 || sy >= m || s[sx][sy] != '.') break;
						w[sx][sy][k] = 1;
					}
				}
			}
		}
   d[start.f][start.s][0] = 0;
   queue < pair<int, pair<int, int> > > q;
   q.push(mp(0, start));
   while(!q.empty())
   {
   	int cur = q.front().f;
   	int x = q.front().s.f;
   	int y = q.front().s.s;
   	q.pop();
   	for (int i = 0; i < 4; ++i)
   	{
   		int sx = x + dx[i];
   		int sy = y + dy[i];
   		int ncur = (cur + 1) % 4;
			if (sx < 0 || sx >= n || sy < 0 || sy >= m || s[sx][sy] != '.' || w[sx][sy][ncur] || d[sx][sy][ncur] != -1) continue;
			d[sx][sy][ncur] = d[x][y][cur] + 1;
			q.push(mp(ncur, mp(sx, sy)));
   	}
   }
   int ans = -1;
   for (int i = 0; i < 4; ++i)
   	if (d[finish.f][finish.s][i] != -1 && (ans == -1 || d[finish.f][finish.s][i] < ans))
   		ans = d[finish.f][finish.s][i];
	if (ans == -1)
	{
		puts("impossible");
		return;
	}
   printf("%d\n", ans);
}

int main()
{
	#ifdef LOCAL
	freopen(fname".in", "r", stdin);
	freopen(fname".out", "w", stdout);
	#endif

	int tt;
	scanf("%d", &tt);
	for (int t = 0; t < tt; ++t)
	{
		printf("Case #%d: ", t + 1);
		solve();
	}
	return 0;
}

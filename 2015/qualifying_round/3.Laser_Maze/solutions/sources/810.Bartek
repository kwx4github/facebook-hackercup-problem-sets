#include <cstdio>
#include <string>
#include <algorithm>
#include <vector>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <queue>
#include <set>
#include <map>

#define fru(j,n) for(int j=0;j<n;++j)
#define tr(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();++it)
#define x first
#define y second
#define pb push_back

using namespace std;

typedef pair<int,int> pii;
typedef long long LL;

const int MAXN = 106;

int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};
char S[MAXN][MAXN];
bool moge[4][MAXN][MAXN];
bool wolne(int i,int j){
	return 	S[i][j]=='S' || S[i][j]=='G' || S[i][j]=='.';
}
typedef pair<int,pii> tri;

tri Q[MAXN*MAXN*4];
int ODL[4][MAXN][MAXN];

int dir(int a,int b){
	char c=S[a][b];
	if(c=='^') return 0;
	if(c=='>') return 1;
	if(c=='v') return 2;
	if(c=='<') return 3;
	return 4;


}

void solve(){
	int n,m;
	scanf("%d%d",&n,&m);
	fru(i,n) scanf("%s",S[i]);
	fru(k,4) fru(i,n) fru(j,m) moge[k][i][j]=wolne(i,j);
	fru(i,n) fru(j,m){
		int d=dir(i,j);
		if(d==4) continue;
		d=(d+1)%4;
		fru(k,4){
			int x=i,y=j;
			while(1){
				x+=dx[d];
				y+=dy[d];
				if(min(x,y)<0 || x==n || y==m || !wolne(x,y)) break;
				moge[k][x][y]=0;
			}
			d=(d+1)%4;
		}
	}
	int INF=1<<30;
	fru(i,4) fru(j,n) fru(k,m) ODL[i][j][k]=INF;
	int qs=0;
	fru(i,n) fru(j,m) if(S[i][j]=='S') {
		ODL[0][i][j]=0;
		Q[qs++]=tri(0,pii(i,j));
	}
	fru(o,qs){
		tri aa=Q[o];
		int odl=ODL[aa.x][aa.y.x][aa.y.y];
	//	printf("odl = %d dla %d %d\n",odl,aa.y.x,aa.y.y);
		fru(k,4){
			int x=aa.y.x+dx[k];
			int y=aa.y.y+dy[k];
			if(min(x,y)<0 || x==n || y==m) continue;
			if(!moge[aa.x][x][y] || ODL[(aa.x+1)%4][x][y]!=INF) continue;
			ODL[(aa.x+1)%4][x][y]=odl+1;
			Q[qs++]=tri((aa.x+1)%4,pii(x,y));
		}
	}
	int e=INF;
	fru(i,n) fru(j,m) if(S[i][j]=='G') fru(k,4) e=min(ODL[k][i][j],e);
	if(e==INF) printf("impossible\n");
	else printf("%d\n",e);
}

int main()
{
	int te;
	scanf("%d",&te);
	fru(o,te){
		printf("Case #%d: ",o+1);
		solve();
	}
  
  return 0;
}

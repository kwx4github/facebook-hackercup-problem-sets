#include<bits/stdc++.h>
using namespace std;
#define MAX 123
#define X first
#define Y second
#define mp make_pair

int graphs[ MAX ][ MAX ][ 4 ] , R , C , direction[ 4 ][ 2 ] = {{-1,0},{0,1},{1,0},{0,-1}};
bool back[ MAX ][ MAX ][ 4 ];
char M[ MAX ][ MAX ] , laser[ 4 ] = {94 , 62 , 118 , 60}; //"^>v<"

typedef pair< int , int > ii;
typedef pair< ii , int > iii;

int main()
{
	int T , tx , ty , sx , sy , r , c , nr , nc ;
	int result;
	cin >> T;
 int k=0;
	while(T--)
	{
	    k++;
		memset( graphs , -1 , sizeof graphs );
		memset( back ,  0 , sizeof back ); //posibly two laser
		cin >> R >> C;
		for( int i = 0; i < R; i++ )
		{
			cin >> M[ i ];
			for( int j = 0; j < C; j++ )
			{
				if( M[ i ][ j ] == 'S' )
				{
					sx = i; sy = j;
					M[ i ][ j ] = '.';
				}
				if( M[ i ][ j ] == 'G' )
				{
					tx = i; ty = j;
					M[ i ][ j ] = '.';
				}
			}
		}

		for( int i = 0; i < R ; i++)
		{
			for(int j = 0; j < C; j++)
			{
				for( int z = 0; z < 4; z++ )
				{
					if( M[ i ][ j ] == laser[ z ] )
					{
						for( int u = 1; u <= 4; u++ )
						{
							int v = ( u + z ) % 4;
							int uu = u % 4;
							nr = i + direction[ v ][ 0 ];
							nc = j + direction[ v ][ 1 ];
							while( nr < R && nr >= 0 && nc >= 0 && nc < C && M[ nr ][ nc ] == '.' )
							{
								back[ nr ][ nc ][ uu ] = true;
								nr = nr + direction[ v ][ 0 ];
								nc = nc + direction[ v ][ 1 ];
							}
						}
					}
				}
			}
		}

		//Bfs
		queue < iii > Q;

		Q.push( mp( mp( sx , sy ) , 0 ) );
		graphs[ sx ][ sy ][ 0 ] = 0;

		while( !Q.empty() )
		{
			r = Q.front().X.X;
			c = Q.front().X.Y;
			int u = Q.front().Y;
			int v = ( graphs[ r ][ c ][ u ] + 1 ) % 4;
			Q.pop();
			for( int kk = 0; kk < 4; kk++ )
			{
				nr = r + direction[ kk ][ 0 ];
				nc = c + direction[ kk ][ 1 ];
				if( nr >= 0 && nr < R && nc >= 0 && nc < C && M[ nr ][ nc ] == '.' && !back[ nr ][ nc ][ v ] )
				{
					if( (graphs[ nr ][ nc ][ v ] == -1) || ( ( graphs[ r ][ c ][ u ] + 1 ) < graphs[ nr ][ nc ][ v ] ) )
					{
						Q.push( mp( mp( nr , nc ) , v ) );
						graphs[ nr ][ nc ][ v ] = graphs[ r ][ c ][ u ] + 1;
					}
				}
			}
		}

		cout << "Case #"<< k << ": " ;
		result = -1;
		for( int z = 0; z < 4; z++ )
		{
			if( graphs[ tx ][ ty ][ z ] != -1 )
			{
				result = ( result == -1 ) ? graphs[ tx ][ ty ][ z ] : min( result , graphs[ tx ][ ty ][ z ] );
			}
		}
		if( result == -1 )
		{
			cout << "impossible" << endl;
		}
		else
		{
			cout << result << endl;
		}
	}
	return 0;
}

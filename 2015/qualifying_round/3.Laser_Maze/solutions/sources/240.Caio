#include <bits/stdc++.h>

#define ff first
#define ss second
#define pb push_back
#define sz size

#define MAXM 100
#define MAXN 100

using namespace std;
typedef long long L;
typedef double D;
typedef vector<L> vi;
typedef vector<vi> vvi;
typedef pair<L,L> ii;



int d_i[4] = {0, -1, 0, 1},
    d_j[4] = {-1, 0, 1, 0};

struct turr{
  int i, j, d;
  turr(){}
  turr(int i, int j, int d):
    i(i), j(j), d(d){ }
};

int m, n;

inline bool ok(int i, int j){ return i >= 0 && j >= 0 && i < m && j < n; }

bool obs[4][MAXM][MAXN];
int maze[MAXM][MAXN];

void print_obs(){
  for(int d = 0; d < 4; d++, cout << '\n')
    
    for(int i = 0; i < m; i++, cout << '\n')
      for(int j = 0; j < n; j++, cout << ' ')
	cout << obs[d][i][j];

}

void print_maze(){
  for(int i = 0; i < m; i++, cout << '\n')
    for(int j = 0; j < n; j++, cout << ' ')
      cout << maze[i][j];
}

int dist[MAXM][MAXN][4];
queue<turr> q;
int search(ii S, ii E){
  memset(dist, -1, sizeof dist);
  while(!q.empty()) q.pop();

  dist[S.ff][S.ss][0] = 0;
  q.push(turr(S.ff,S.ss,0));
  int ans = -1;
  while(!q.empty()){
    turr cur = q.front(); q.pop();
    if(cur.i == E.ff && cur.j == E.ss)
      return dist[cur.i][cur.j][cur.d];

    for(int d = 0; d < 4; d++){
      turr nxt(cur.i + d_i[d], cur.j + d_j[d], (cur.d+1)%4);
      if(ok(nxt.i, nxt.j) && !obs[nxt.d][nxt.i][nxt.j] && dist[nxt.i][nxt.j][nxt.d] == -1){
	if(nxt.i == E.ff && nxt.j == E.ss)
	  return dist[cur.i][cur.j][cur.d] + 1;
	dist[nxt.i][nxt.j][nxt.d] = dist[cur.i][cur.j][cur.d] + 1;
	q.push(nxt);
      }
    }	
  }
  return ans;
}


void mark_wall(int i, int j){
  for(int k = 0; k < 4; k++) obs[k][i][j] = 1;
  maze[i][j] = 1;
}

vector<turr> turrets;

void setLasers(){

  for(size_t i = 0; i < turrets.sz(); i++){
    for(int dir = turrets[i].d, cnt = 0; cnt < 4; cnt++, dir = (dir+1)%4){
	int k = 1;
	
	while(1){
	  int i2 = turrets[i].i + d_i[dir] * k;
	  int j2 = turrets[i].j + d_j[dir] * k;

	  if(!ok(i2,j2) || maze[i2][j2]) break;

	  obs[cnt][i2][j2] = 1;

	  ++k;
      }
    }
  }
}

void solve(){
  cin >> m >> n;

  char c;
  ii S, G;

  turrets.clear();
  memset(obs, 0, sizeof obs);
  memset(maze, 0, sizeof maze);
  
  for(int i = 0; i < m; i++){
    for(int j = 0; j < n; j++){
      cin >> c;
      
      switch(c){
      case '#':
	mark_wall(i,j);
	break;
      case 'G':
	G = ii(i,j);
	break;
      case 'S':
	S = ii(i,j);
	break;
      case '<':
	mark_wall(i,j);
	turrets.pb(turr(i,j,0));
	break;
      case '^':
	mark_wall(i,j);
	turrets.pb(turr(i,j,1));
	break;
      case '>':
	mark_wall(i,j);
	turrets.pb(turr(i,j,2));
	break;
      case 'v':
	mark_wall(i,j);
	turrets.pb(turr(i,j,3));
	break;
      }
    }
  }

  setLasers();

  int minD = search(S, G);
  if(minD == -1) cout << "impossible\n";
  else cout << minD << '\n';
}

int main(){
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int T;
  cin >> T;
  for(int i = 1; i <= T; i++){
    cout << "Case #"<< i << ": ";
    solve();
  }
}

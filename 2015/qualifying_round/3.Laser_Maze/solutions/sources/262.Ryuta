#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

int tohash(int t, int y, int x, int W) {
	return (y * W + x) * 4 + t;
}
void fromhash(int h, int &t, int &y, int &x, int W) {
	t = h % 4; h /= 4;
	x = h % W; h /= W;
	y = h;
}

int main() {
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		int H, W;
		scanf("%d%d", &H, &W);
		vector<string> maze(H);
		rep(i, H)
			cin >> maze[i];
		pii S, G;
		rep(i, H) rep(j, W) {
			if(maze[i][j] == 'S')
				S = mp(i, j), maze[i][j] = '.';
			else if(maze[i][j] == 'G')
				G = mp(i, j), maze[i][j] = '.';
		}
		vector<string> states[4];
		static const int dy[4] = {0,1,0,-1}, dx[4] = {1,0,-1,0};
		rep(t, 4) {
			states[t] = maze;
			rep(i, H) rep(j, W) {
				const char *dirs = ">v<^";
				const char *p = strchr(dirs, maze[i][j]);
				if(p != 0) {
					int d = ((int)(p - dirs) + t) % 4;
					int yy = i, xx = j;
					do {
						states[t][yy][xx] = '#';
						yy += dy[d], xx += dx[d];
					}while(0 <= yy && yy < H && 0 <= xx && xx < W && maze[yy][xx] == '.');
				}
			}
		}
		vector<bool> vis(4 * H * W, false);
		vector<int> q, nq;
		nq.push_back(tohash(0, S.first, S.second, W));
		int tim = 0, ans = INF;
		while(!nq.empty()) {
			q.swap(nq);
			while(!q.empty()) {
				int h = q.back(); q.pop_back();
				if(vis[h]) continue;
				vis[h] = true;
				int t, y, x;
				fromhash(h, t, y, x, W);
				if(mp(y, x) == G) {
					ans = tim;
					q.clear(); nq.clear();
					break;
				}
				int nt = (t + 1) % 4;
				rep(d, 4) {
					int yy = y + dy[d], xx = x + dx[d];
					if(yy<0||yy>=H||xx<0||xx>=W) continue;
					if(states[nt][yy][xx] == '#') continue;
					nq.push_back(tohash(nt, yy, xx, W));
				}
			}
			tim ++;
		}
		printf("Case #%d: ", ii+1);
		if(ans == INF)
			puts("impossible");
		else
			printf("%d\n", ans);
	}
	return 0;
}


#include <iostream>
#include <string.h>
#include <algorithm>
#include <queue>

using namespace std;


int T;
int n,m;

int sp[105][105][4];

char maze[105][105];

int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};

char turrets[4]={'<','^','>','v'};

bool is_inside(int x,int y){
    if (x<0) return false;
    if (x>=m) return false;
    if (y<0) return false;
    if (y>=n) return false;

    return true;

}


bool is_an_empty_field(int x,int y){
    if (maze[x][y]!='.') return false;
    return true;
    
}

bool is_a_turret(int x,int y){
    for (int i=0;i<4;i++) if (turrets[i]==maze[x][y]) return true;
    return false;


}

char current_state(char t,int dir){
    for (int i=0;i<4;i++){
        if (turrets[i]==t) return turrets[(i+dir)%4];
    }
    return '0';
}

bool is_acceptable(int x,int y,int dir){
    //is it inside the maze
    //is it the right kind of a field
    //if (x==1&&y==4) printf("YES\n");
    
    if (!is_inside(x, y)) return false;
    if (!is_an_empty_field(x, y)) return false;

    if (sp[x][y][dir]!=-1) return false;
    //do I get hit by a laser
    for (int i=0;i<4;i++){
        int xt=x;
        int yt=y;
        
        while (true){
            xt=xt+dx[i];
            yt=yt+dy[i];
            if (!is_inside(xt, yt)) break;
            if (is_an_empty_field(xt, yt)) continue;
            if (!is_a_turret(xt, yt)) break;
            if (current_state(maze[xt][yt],dir)==turrets[i]) return false;
            break;
        
        }
    
    }
    
    return true;
    


}


int main() {
    
    scanf("%d",&T);
    
    for (int test_case_number=1;test_case_number<=T;test_case_number++){
    
        queue<int> Q;
        int start_x,start_y,goal_x,goal_y;
        
        
        scanf("%d %d",&m,&n);
        
        for (int i=0;i<m;i++) scanf("%s",maze[i]);
        
        memset(sp,-1,sizeof(sp));
        
        for (int i=0;i<m;i++)
            for (int j=0;j<n;j++){
                if (maze[i][j]=='S'){
                    start_x=i;
                    start_y=j;
                    maze[i][j]='.';
                }
                if (maze[i][j]=='G'){
                    goal_x=i;
                    goal_y=j;
                    maze[i][j]='.';
                    
                }
            }
        
        
        Q.push(start_x); Q.push(start_y); Q.push(0);
        sp[start_x][start_y][0]=0;
        
        while (!Q.empty()){
            int x=Q.front(); Q.pop();
            int y=Q.front(); Q.pop();
            int dir=Q.front(); Q.pop();
           // printf("x :%d  y: %d  dir:%d sp:%d\n",x,y,dir,sp[x][y][dir]);
            
            for (int i=0;i<4;i++){
                if (is_acceptable(x+dx[i], y+dy[i], (dir+1)%4)){
                    sp[x+dx[i]][y+dy[i]][(dir+1)%4]=sp[x][y][dir]+1;
                    Q.push(x+dx[i]);
                    Q.push(y+dy[i]);
                    Q.push((dir+1)%4);
                }
                
            }
        
        
        }
        
        int infinity=80000;
        for (int i=0;i<4;i++) if (sp[goal_x][goal_y][i]==-1) sp[goal_x][goal_y][i]=infinity;
        
        int shortest_path=min(min(sp[goal_x][goal_y][0],sp[goal_x][goal_y][1]),min(sp[goal_x][goal_y][2],sp[goal_x][goal_y][3]));
        
        if (shortest_path==infinity) printf("Case #%d: impossible\n",test_case_number); else printf("Case #%d: %d\n",test_case_number,shortest_path);
        
    }
    return 0;
}

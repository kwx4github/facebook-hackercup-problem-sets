#include <cstdio>
#include <iostream>
#include <algorithm>
#include <climits>
#include <vector>
#include <queue>
#include <string>

#define from(x,a,b) for(int x=(a); x<=(b);x++)
#define iter(x,a,b) for(int x=(a); x <(b);x++)
#define min4(a,b,c,d) (min(min(a,b),min(c,d)))
using namespace std;
typedef long long ll;
typedef vector<int> vec;
typedef vector<vec> mat;
typedef struct{
  int a;
  int b;
  int c;
} triple;

#define LEN 100
#define wall    -1
#define space   -2


int H,W;
int sh, sw;
int gh, gw;
char maze[LEN][LEN];
int m[LEN][LEN][4];


void laser(int i, int j, int p){
  iter(k,0,4){
    int h=i, w=j;
    int dh, dw;
    switch( (k+p)&3 ){
      case 0: dh=0; dw=1; break;
      case 1: dh=-1; dw=0; break;
      case 2: dh=0; dw=-1; break; 
      case 3: dh=1; dw=0; break;
    }
    h += dh;
    w += dw;
    while(0<=h && h<H && 0<=w && w<W && maze[h][w] == '.'){
      m[h][w][k] = wall;
      h += dh;
      w += dw;
    }
  }
}

void convert(){
  // initialize
  iter(i,0,H) iter(j,0,W) iter(k,0,4) m[i][j][k] = space;

  iter(i,0,H){
    iter(j,0,W){
      char c = maze[i][j];
      if(c == '#') iter(k,0,4) m[i][j][k] = wall;
      else if(c == '.') continue;
      else if(c == '>') laser(i,j,0);
      else if(c == '^') laser(i,j,1);
      else if(c == '<') laser(i,j,2);
      else if(c == 'v') laser(i,j,3);
      else cout << "unknown character " << c << endl;
    }
  }
}

// return number of steps
// int dfs(int h, int w, int s){
//   if( h < 0 || h >= H || w < 0 || w >= W ) return INT_MAX;
//   int& n = m[h][w][s&3];
//   if( n == wall ) return INT_MAX;
//   if( h == gh && w == gw ) return s;
//   if( n == space || s < n ){
//     n = s;
//     int dh[4] = {-1,1,0,0};
//     int dw[4] = {0,0,-1,1};
//     int ans = INT_MAX;
//     iter(i,0,4) ans = min(ans, dfs(h+dh[i],w+dw[i],s+1));
//     return ans;
//   }
//   else return INT_MAX;
// }

int bfs(int h0, int w0){
  queue<triple> que;
  triple t = {h0,w0,0};
  que.push(t);


  int cnt = 0;
  while(!que.empty()){
    triple t = que.front(); que.pop();
    m[t.a][t.b][t.c&3]  = t.c;
    // cout << cnt++ << endl;
    if( t.a == gh && t.b == gw ) return t.c;
    int dh[4] = {-1,1,0,0};
    int dw[4] = {0,0,-1,1};
    iter(i,0,4) {
      int h = t.a+dh[i];
      int w = t.b+dw[i];
      if( h >=0 && h < H && w >= 0 && w < W && m[h][w][(t.c+1)&3] == space){
        triple t2 = {h,w,t.c+1};
        m[h][w][(t.c+1)&3] = t.c+1;
        que.push(t2);
      }
    }
  }
  return INT_MAX;
}

int solve(){
  cin >> H >> W;
  getchar();
  iter(i,0,H){
    iter(j,0,W){
      char c = getchar();
      if( c == 'S' ){
        sh = i;
        sw = j;
        maze[i][j] = '.';
      }
      else if( c == 'G' ){
        gh = i;
        gw = j;
        maze[i][j] = '.';
      }
      else maze[i][j] = c; 
    }
    getchar();
  } 

  // convert to 4 period 
  convert();
  // iter(k,0,4){
  //   iter(i,0,H){
  //     iter(j,0,W){
  //       int t = m[i][j][k];
  //       if(t==wall) putchar('#');
  //       else putchar('.');
  //     }
  //     cout<<endl;
  //   }
  //   cout << endl;
  // }

  int ans = bfs(sh,sw);
  // iter(k,0,4){
  //   iter(i,0,H){
  //     iter(j,0,W){
  //       int t = m[i][j][k];
  //       if(t==wall) putchar('#');
  //       else if(t==space) putchar('.');
  //       else {
  //         if( t < 10 ) putchar('0'+t);
  //         else if( t < 16 ) putchar('A'+t-10);
  //       }
  //     }
  //     cout<<endl;
  //   }
  //   cout << endl;
  // }


  return ans;
  // return min4(
  //   dfs(sh+1,sw,1),
  //   dfs(sh,sw+1,1),
  //   dfs(sh-1,sw,1),
  //   dfs(sh,sw-1,1));
}

int main(){
  int ntc;
  cin >> ntc;
  from(tc,1,ntc){
    int ans = solve();
    printf("Case #%d: ", tc);
    if(ans == INT_MAX) printf("impossible\n");
    else printf("%d\n", ans);
  } 
  return 0;
}
#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

bool mark[105][105][4];
char board[105][105];
int dist[105][105][4];
int m, n;

bool isSafe(int r, int c, int s) {
	//Down
	for(int i = r; i < m; i++) {
		if(board[i][c] == '#') break;
		if(board[i][c] == '^')
			if((s % 4) == 0) return false;
			else break;
		if(board[i][c] == '<')
			if((s % 4) == 1) return false;
			else break;
		if(board[i][c] == 'v')
			if((s % 4) == 2) return false;
			else break;
		if(board[i][c] == '>')
			if((s % 4) == 3) return false;
			else break;
	}
	//Up
	for(int i = r; i >= 0; i--) {
		if(board[i][c] == '#') break;
		if(board[i][c] == 'v')
			if((s % 4) == 0) return false;
			else break;
		if(board[i][c] == '>')
			if((s % 4) == 1) return false;
			else break;
		if(board[i][c] == '^')
			if((s % 4) == 2) return false;
			else break;
		if(board[i][c] == '<')
			if((s % 4) == 3) return false;
			else break;
	}
	//Right
	for(int i = c; i < n; i++) {
		if(board[r][i] == '#') break;
		if(board[r][i] == '<')
			if((s % 4) == 0) return false;
			else break;
		if(board[r][i] == 'v')
			if((s % 4) == 1) return false;
			else break;
		if(board[r][i] == '>')
			if((s % 4) == 2) return false;
			else break;
		if(board[r][i] == '^')
			if((s % 4) == 3) return false;
			else break;
	}
	//Left
	for(int i = c; i >= 0; i--) {
		if(board[r][i] == '#') break;
		if(board[r][i] == '>')
			if((s % 4) == 0) return false;
			else break;
		if(board[r][i] == '^')
			if((s % 4) == 1) return false;
			else break;
		if(board[r][i] == '<')
			if((s % 4) == 2) return false;
			else break;
		if(board[r][i] == 'v')
			if((s % 4) == 3) return false;
			else break;
	}
	return true;
}

int main () {
	int T;
	cin >> T;
	for(int t = 1; t <= T; t++) {
		cout << "Case #" << t << ": ";
		memset(mark, 0, sizeof(mark));
		memset(board, 0, sizeof(board));
		cin >> m >> n;
		queue<pair<int, pair<int, int> > > q;
		for(int i = 0; i < m; i++)
			for(int j = 0; j < n; j++) {
				cin >> board[i][j];
				if(board[i][j] == 'S') {
					pair<int, int> tmp = pair<int, int>(i, j);
					q.push(pair<int, pair<int, int> >(0, tmp));
					mark[i][j][0] = true;
					board[i][j] = '.';
					dist[i][j][0] = 0;
				}
			}
		int res = -1;
		while(!q.empty()) {
			pair<int, pair<int, int> > cur = q.front(); q.pop();
			pair<int, int> pcur = cur.second;
			int step = cur.first;
			int r = pcur.first, c = pcur.second;
			//cerr << "!!! " << r << " " << c << " " << step << endl;
			if(board[r][c] == 'G') {
				res = dist[r][c][step];
				break;
			}
			int newStep = (step+1)%4;
			if(r+1 < m && !mark[r+1][c][newStep] && (board[r+1][c] == '.' || board[r+1][c] == 'G') && isSafe(r+1, c, newStep)) {
				pair<int, int> pos = pair<int, int>(r+1, c);
				q.push(pair<int, pair<int, int> >(newStep, pos));
				mark[r+1][c][newStep] = true;
				dist[r+1][c][newStep] = dist[r][c][step]+1;
			}
			if(r-1 >= 0 && !mark[r-1][c][newStep] && (board[r-1][c] == '.' || board[r-1][c] == 'G') && isSafe(r-1, c, newStep)) {
				pair<int, int> pos = pair<int, int>(r-1, c);
				q.push(pair<int, pair<int, int> >(newStep, pos));
				mark[r-1][c][newStep] = true;
				dist[r-1][c][newStep] = dist[r][c][step]+1;
			}
			if(c+1 < n && !mark[r][c+1][newStep] && (board[r][c+1] == '.' || board[r][c+1] == 'G') && isSafe(r, c+1, newStep)) {
				pair<int, int> pos = pair<int, int>(r, c+1);
				q.push(pair<int, pair<int, int> >(newStep, pos));
				mark[r][c+1][newStep] = true;
				dist[r][c+1][newStep] = dist[r][c][step]+1;
			}
			if(c-1 >= 0 && !mark[r][c-1][newStep] && (board[r][c-1] == '.' || board[r][c-1] == 'G') && isSafe(r, c-1, newStep)) {
				pair<int, int> pos = pair<int, int>(r, c-1);
				q.push(pair<int, pair<int, int> >(newStep, pos));
				mark[r][c-1][newStep] = true;
				dist[r][c-1][newStep] = dist[r][c][step]+1;
			}
		}
		if(res == -1)
			cout << "impossible" << endl;
		else
			cout << res << endl;
	}
	return 0;
}

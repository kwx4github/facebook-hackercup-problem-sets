#include <iostream>
#include <string>
#include <algorithm>
#include <queue>
#include <cstring>
using namespace std;

char a[105][105];
int n, m;
bool mark[105][105][4];

struct Status {
	int x, y, s;
	Status(int x, int y, int s): x(x), y(y), s(s) {}
};

bool is_valid(int x, int y) {
	return x >= 0 && y < m && x < n && y >= 0 && a[x][y] >= 4 && a[x][y] != '#';
}

bool is_shooted(int x, int y, int s) {
	// left
	int xx, yy;
	for (yy = y - 1; yy >= 0; --yy) {
		if (a[x][yy] < 4) {
			if ((a[x][yy] + s) % 4 == 1) {
				return true;
			} else {
				break;			
			}
		}
		if (a[x][yy] == '#') {
			break;
		}
	}
	// right
	for (yy = y + 1; yy < m; ++yy) {
		if (a[x][yy] < 4) {
			if ((a[x][yy] + s) % 4 == 3) {
				return true;
			} else {
				break;			
			}
		}
		if (a[x][yy] == '#') {
			break;
		}
	}
	// up
	for (xx = x - 1; xx >= 0; --xx) {
		if (a[xx][y] < 4) {
			if ((a[xx][y] + s) % 4 == 2) {
				return true;
			} else {
				break;
			}
		}
		if (a[xx][y] == '#') {
			break;
		}
	}
	// down
	for (xx = x + 1; xx < n; ++xx) {
		if (a[xx][y] < 4) {
			if ((a[xx][y] + s) % 4 == 0) {
				return true;
			} else {
				break;
			}
		}
		if (a[xx][y] == '#') {
			break;
		}
	}
	return false;
}

int main() {
	int nCase;
	cin >> nCase;
	for (int re = 1; re <= nCase; ++re) {
		int sx, sy;
		cin >> n >> m;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				cin >> a[i][j];
				switch (a[i][j]) {
					case '^': a[i][j] = 0; break;
					case '>': a[i][j] = 1; break;
					case 'v': a[i][j] = 2; break;
					case '<': a[i][j] = 3; break;
					case 'S': sx = i; sy = j; break;
					default: break;
				}
			}
		}

		memset(mark, 0, sizeof(mark));
		int ans = -1;
		queue<Status> q;
		q.push(Status(sx, sy, 0));
		mark[sx][sy][0] = true;
		while (!q.empty()) {
			Status st = q.front();
			q.pop();
			if (a[st.x][st.y] == 'G') {
				ans = st.s;
				break;
			}

			int dx[] = {-1, 1, 0, 0};
			int dy[] = {0, 0, -1, 1};

			for (int k = 0; k < 4; ++k) {
				int x = st.x + dx[k], y = st.y + dy[k];
				if (is_valid(x, y) && !mark[x][y][(st.s + 1) % 4] && !is_shooted(x, y, st.s + 1)) {
					q.push(Status(x, y, st.s + 1));
					mark[x][y][(st.s + 1) % 4] = true;
				}
			}
		}

		cout << "Case #" << re << ": ";
		if (ans >= 0) { cout << ans << endl; }
		else { cout << "impossible" << endl; }
	}
	return 0;
}
/*
    Rezwan_4029 , AUST
*/

#include <bits/stdc++.h>

#define pb push_back
#define all(x) x.begin(),x.end()
#define ms(a,v) memset(a,v,sizeof a)
#define II ({int a; scanf("%d", &a); a;})
#define LL ({Long a; scanf("%lld", &a); a;})
#define DD ({double a; scanf("%lf", &a); a;})
#define ff first
#define ss second
#define mp make_pair
#define gc getchar
#define EPS 1e-10
#define pi 3.1415926535897932384626433832795
using namespace std;

#define FI freopen ("ain.txt", "r", stdin)
#define FO freopen ("out.txt", "w", stdout)

typedef long long Long;
typedef unsigned long long ull;
typedef vector<int> vi ;
typedef set<int> si;
typedef vector<Long>vl;
typedef pair<int,int>pii;
typedef pair<string,int>psi;
typedef pair<Long,Long>pll;
typedef pair<double,double>pdd;
typedef vector<pii> vpii;

#define forab(i, a, b)	for (__typeof (b) i = (a) ; i <= b ; ++i)
#define rep(i, n)		forab (i, 0, (n) - 1)
#define For(i, n)		forab (i, 1, n)
#define rofba(i, a, b)	for (__typeof (b)i = (b) ; i >= a ; --i)
#define per(i, n)		rofba (i, 0, (n) - 1)
#define rof(i, n)		rofba (i, 1, n)
#define forstl(i, s)	for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)

#define __(args...) {dbg,args; cerr<<endl;}
struct debugger{template<typename T> debugger& operator , (const T& v){cerr<<v<<"\t"; return *this; }}dbg;
#define __1D(a,n) rep(i,n) { if(i) printf(" ") ; cout << a[i] ; }
#define __2D(a,r,c,f) forab(i,f,r-!f){forab(j,f,c-!f){if(j!=f)printf(" ");cout<<a[i][j];}cout<<endl;}

template<class A, class B> ostream &operator<<(ostream& o, const pair<A,B>& p){ return o<<"("<<p.ff<<", "<<p.ss<<")";} //Pair print
template<class T> ostream& operator<<(ostream& o, const vector<T>& v){ o<<"[";forstl(it,v)o<<*it<<", ";return o<<"]";} //Vector print
template<class T> ostream& operator<<(ostream& o, const set<T>& v){ o<<"[";forstl(it,v)o<<*it<<", ";return o<<"]";} //Set print
template<class T> inline void MAX(T &a , T b){ if (a < b ) a = b;}
template<class T> inline void MIN(T &a , T b){ if (a > b ) a = b;}

//Fast Reader
template<class T>inline bool read(T &x){int c=gc();int sgn=1;while(~c&&c<'0'||c>'9'){if(c=='-')sgn=-1;c=gc();}for(x=0;~c&&'0'<=c&&c<='9';c=gc())x=x*10+c-'0';x*=sgn;return ~c;}

int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={2,1,-1,-2,-1,1};int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction
int r , c ;
char g[111][111];
bool Vis[111][111][5];
char get(char x, int stp){
    if( x == '^' ){
        if( stp == 0 ) return '^';
        else if( stp == 1 ) return '>';
        else if( stp == 2 ) return 'v';
        return '<';
    }
    if( x == '>' ){
        if( stp == 0 ) return '>';
        else if( stp == 1 ) return 'v';
        else if( stp == 2 ) return '<';
        return '^';
    }
    if( x == 'v' ){
        if( stp == 0 ) return 'v';
        else if( stp == 1 ) return '<';
        else if( stp == 2 ) return '^';
        return '>';
    }
    if( x == '<' ){
        if( stp == 0 ) return '<';
        else if( stp == 1 ) return '^';
        else if( stp == 2 ) return '>';
        return 'v';
    }
}
bool isdir(int p , int q){
    char x = g[p][q];
    return x == '^' || x == '<' || x == '>' || x == 'v' ;
}
bool valid(int x , int y, int stp){
    if( x < 0 || y < 0 || x >= r || y >= c ) return false ;
    stp %= 4 ;
    if( Vis[x][y][stp] ) return false ;
    for( int tx = x - 1 ; tx >= 0 ; tx-- ){
        if( g[tx][y] == '#' ) break ;
        if( isdir(tx,y) ){
            char c = get(g[tx][y],stp);
            if( c == 'v' ) return false ;
        }
    }
    for( int ty = y + 1 ; ty < c ; ty++ ){
        if( g[x][ty] == '#' ) break ;
        if( isdir(x,ty) ){
            char c = get(g[x][ty],stp);
            if( c == '<' ) return false ;
        }
    }
    for( int tx = x + 1 ; tx < r ; tx++ ){
        if( g[tx][y] == '#' ) break ;
        if( isdir(tx,y) ){
            char c = get(g[tx][y],stp);
            if( c == '^' ) return false ;
        }
    }
    for( int ty = y - 1 ; ty >= 0 ; ty-- ){
        if( g[x][ty] == '#' ) break ;
        if( isdir(x,ty) ){
            char c = get(g[x][ty],stp);
            if( c == '>' ) return false ;
        }
    }
    return true ;
}
struct Node{
    int x , y , cost ;
    Node(){}
    Node(int _x , int _y , int _c  ){
        x = _x , y = _y , cost = _c ;
    }
};
Node St, En;
int bfs(){
    ms(Vis,false);
    queue<Node>Q;
    Q.push(St);
    while(!Q.empty()){
        Node now = Q.front(); Q.pop();
        if( En.x == now.x  && En.y == now.y ) return now.cost ;
        rep(i,4){
            int nx = now.x + dx[i];
            int ny = now.y + dy[i];
            int cost = now.cost + 1 ;
            if( valid(nx,ny,cost)){
                Vis[nx][ny][cost%4] = true ;
                Q.push( Node(nx,ny,cost) );
            }
        }
    }
    return -1;
}
int main(){
    freopen("fin.txt","r",stdin);
    freopen("fout.txt","w",stdout);
    int T = II ;
    For(cs,T){
        cin >> r >> c ;
        rep(i,r) cin >> g[i] ;
        rep(i,r)rep(j,c){
            if( g[i][j] == 'S' ) St = Node(i,j,0);
            else if( g[i][j] == 'G' ) En = Node(i,j,0);
        }
        int ans = bfs();
        printf("Case #%d: ",cs);
        if( ans == -1 ) puts("impossible");
        else cout << ans << endl;
    }
}

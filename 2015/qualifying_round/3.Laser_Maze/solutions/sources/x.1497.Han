package hackercup._2015.qual;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;

public class C {

    Scanner scanner;

    private void solve() throws FileNotFoundException {
        File input = new File("data/hackercup/2015/qual/laser_maze.txt");
        scanner = new Scanner(input);

        File test = new File("data/hackercup/2015/qual/C.out");
        PrintStream out = new PrintStream(new FileOutputStream(test));
        System.setOut(out);

        int testCase = scanner.nextInt();
        scanner.nextLine();

        for (int i = 1; i <= testCase; i++) {
            System.out.printf("Case #%d: ", i);
            int ans = solveCase();
            if (ans >= 0) {
                System.out.println(ans);
            } else {
                System.out.println("impossible");
            }
        }
    }

    private int solveCase() {
        int r = scanner.nextInt();
        int c = scanner.nextInt();
        boolean[][][] board = new boolean[r][c][4];

        int sy = 0, sx = 0;
        int gy = 0, gx = 0;

        int[] dy = {-1, 0, 1, 0};
        int[] dx = {0, 1, 0, -1};

        for (int y = 0; y < r; y++) {
            String row = scanner.next();
            for (int x = 0; x < c; x++) {
                char grid = row.charAt(x);

                if (grid == 'S') {
                    sy = y;
                    sx = x;
                }
                else if (grid == 'G') {
                    gy = y;
                    gx = x;
                }
                else if (grid == '#') {
                    Arrays.fill(board[y][x], true);
                }
                else if (grid == '^' || grid == 'v' || grid == '<' || grid == '>') {
                    int idx =
                            grid == '^' ? 0 :
                            grid == '>' ? 1 :
                            grid == 'v' ? 2 : 3;
                    for (int dir = 0; dir < 4; dir++) {
                        int cy = y;
                        int cx = x;
                        while (cy >= 0 && cy < r && cx >= 0 && cx < c) {
                            board[cy][cx][(dir - idx + 4) % 4] = true;
                            cy += dy[dir];
                            cx += dx[dir];
                        }
                    }

                }
            }
        }

        int[][][] ans = new int[r][c][4];
        for (int y = 0; y < r; y++) {
            for (int x = 0; x < c; x++) {
                for (int i = 0; i < 4; i++) {
                    ans[y][x][i] = Integer.MAX_VALUE / 2;
                }
            }
        }

        // list<[y, x, 0~3]>
        LinkedList<int[]> q = new LinkedList<int[]>();
        ans[sy][sx][0] = 0;
        q.offer(new int[]{sy, sx, 0});
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int y = cur[0];
            int x = cur[1];
            int rem = cur[2];

            if (y == gy && x == gx) {
                return ans[y][x][rem];
            }

            for (int dir = 0; dir < 4; dir++) {
                int ty = y + dy[dir];
                int tx = x + dx[dir];
                if (ty < 0 || ty >= r || tx < 0 || tx >= c) {
                    continue;
                }
                if (board[ty][tx][(rem + 1) % 4]) {
                    continue;
                }
                if (ans[ty][tx][(rem + 1) % 4] <= ans[y][x][rem] + 1) {
                    continue;
                }

                ans[ty][tx][(rem + 1) % 4] = ans[y][x][rem] + 1;
                q.offer(new int[]{
                        ty,
                        tx,
                        (rem + 1) % 4
                });
            }
        }

        return -1;
    }

    public static void main(String[] args) throws FileNotFoundException {
        new C().solve();
    }

}

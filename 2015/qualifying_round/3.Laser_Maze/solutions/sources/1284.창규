#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

int m,n;
char buff[100][101];
bool map[4][100][100];
int si,sj,gi,gj;
struct status{
	int count;
	int i;
	int j;
	status(int a,int b, int c){
		count = a; i = b; j = c;
	}
	status(){}
};

void makeMap(){

	for(int i=0;i<m;i++)
		for(int j=0;j<n;j++)
			for(int k=0;k<4;k++)
				map[k][i][j]=true;

	for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			if(buff[i][j]=='S'){si=i;sj=j;buff[i][j]='.';}
			else if(buff[i][j]=='G'){gi=i;gj=j;buff[i][j]='.';}
			else if(buff[i][j]=='#') map[0][i][j]=map[1][i][j]=map[2][i][j]=map[3][i][j]=false;
		}}
	
	for(int k=0;k<4;k++){
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				if(buff[i][j]=='^'){
					map[k][i][j] = false;
					for(int l=i-1;l>=0;l--){
						if(buff[l][j]=='.') map[k][l][j]=false;
						else break;
					}
					buff[i][j]='>';
				}else if(buff[i][j]=='>'){
					map[k][i][j] = false;
					for(int l=j+1;l<n;l++){
						if(buff[i][l]=='.') map[k][i][l]=false;
						else break;
					}
					buff[i][j]='v';
				}else if(buff[i][j]=='v'){
					map[k][i][j] = false;
					for(int l=i+1;l<m;l++){
						if(buff[l][j]=='.') map[k][l][j]=false;
						else break;
					}
					buff[i][j]='<';
				}else if(buff[i][j]=='<'){
					map[k][i][j] = false;
					for(int l=j-1;l>=0;l--){
						if(buff[i][l]=='.') map[k][i][l]=false;
						else break;
					}
					buff[i][j]='^';
				}
			}
		}

	}
}

int main(){
	int tc;
	scanf("%d",&tc);
	for(int k=1;k<=tc;k++){
		printf("Case #%d: ",k);
		scanf("%d%d",&m,&n);
		
		for(int i=0;i<m;i++){
			scanf("%s",buff[i]);
		}
		makeMap();
		int ans = -1;
		queue<status> q;
		q.push(status(0,si,sj));
		map[0][si][sj] = false;

		while(!q.empty()){
			int step = q.front().count;
			int nowi = q.front().i;
			int nowj = q.front().j;
			q.pop();
			if(nowi == gi && nowj == gj){
				ans = step;
				break;
			}

			step++;
			int k = step%4;

			if(nowi-1 >= 0){
				if(map[k][nowi-1][nowj]){
					q.push(status(step,nowi-1,nowj));
					map[k][nowi-1][nowj] = false;
				}}
			if(nowj+1 < n){
				if(map[k][nowi][nowj+1]){
					q.push(status(step,nowi,nowj+1));
					map[k][nowi][nowj+1] = false;
				}}
			if(nowi+1 < m){
				if(map[k][nowi+1][nowj]){
					q.push(status(step,nowi+1,nowj));
					map[k][nowi+1][nowj] = false;
				}}
			if(nowj-1 >= 0){
				if(map[k][nowi][nowj-1]){
					q.push(status(step,nowi,nowj-1));
					map[k][nowi][nowj-1] = false;
				}}
		}
		if(ans==-1) puts("impossible");
		else printf("%d\n",ans);
	}

	return 0;
}
//2015_Qual_P3.cpp
//Laser Maze
//Author: derekhh
//Date: Jan 11, 2015

#include<iostream>
#include<string>
using namespace std;

char maze[4][110][110];
char dir[4] = { '^', '>', 'v', '<' };
const int dx[4] = { -1, 0, 1, 0 };
const int dy[4] = { 0, 1, 0, -1 };

struct Type
{
	int x, y, t, len;
};

Type Q[50000];
int head, tail;
bool visited[4][110][110];

int main()
{
	int t, kase = 0;
	cin >> t;
	while (t--)
	{
		memset(visited, 0, sizeof(visited));
		int r, c, sr, sc, gr, gc;
		cin >> r >> c;
		for (int i = 0; i < r; i++)
			cin >> maze[0][i];

		for (int i = 0; i < r; i++)
		{
			for (int j = 0; j < c; j++)
			{
				if (maze[0][i][j] == 'S')
					sr = i, sc = j;
				else if (maze[0][i][j] == 'G')
					gr = i, gc = j;
			}
		}

		for (int t = 1; t < 4; t++)
			memcpy(maze[t], maze[0], sizeof(maze[0]));

		for (int t = 1; t < 4; t++)
		{
			for (int i = 0; i < r; i++)
			{
				for (int j = 0; j < c; j++)
				{
					for (int d = 0; d < 4; d++)
					{
						if (maze[t - 1][i][j] == dir[d])
						{
							maze[t][i][j] = dir[(d + 1) % 4];
						}
					}
				}
			}
		}

		for (int t = 0; t < 4; t++)
		{
			for (int i = 0; i < r; i++)
			{
				for (int j = 0; j < c; j++)
				{
					for (int d = 0; d < 4; d++)
					{
						if (maze[t][i][j] == dir[d])
						{
							int rr = i + dx[d];
							int cc = j + dy[d];
							while (rr >= 0 && rr < r && cc >= 0 && cc < c && maze[t][rr][cc] != '#')
							{
								maze[t][rr][cc] = '#';
								rr += dx[d];
								cc += dy[d];
							}
						}
					}
				}
			}
		}

		Type tmp;
		tmp.x = sr, tmp.y = sc, tmp.t = 0, tmp.len = 0;
		Q[tail++] = tmp;
		visited[0][sr][sc] = true;
		int ans = -1;
		while (head < tail)
		{
			tmp = Q[head++];
			if (tmp.x == gr && tmp.y == gc)
			{
				ans = tmp.len;
				break;
			}
			for (int i = 0; i < 4; i++)
			{
				int nx = tmp.x + dx[i];
				int ny = tmp.y + dy[i];
				int nt = (tmp.t + 1) % 4;
				if (nx >= 0 && nx < r && ny >= 0 && ny < c && maze[nt][nx][ny] != '#' && !visited[nt][nx][ny])
				{
					Type next;
					next.x = nx, next.y = ny, next.t = nt;
					next.len = tmp.len + 1;
					Q[tail++] = next;
					visited[nt][nx][ny] = true;
				}
			}
		}

		if (ans == -1)
			cout << "Case #" << ++kase << ": " << "impossible" << endl;
		else
			cout << "Case #" << ++kase << ": " << ans << endl;
	}
	return 0;
}
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		new Main().run();
	}

	void run() {
		Scanner in = new Scanner(System.in);
		PrintWriter out = new PrintWriter(System.out);
		int T = in.nextInt();
		for (int t = 0; t < T; t++) {
			int m = in.nextInt();
			int n = in.nextInt();
			char[][] buf = new char[m][n];
			for (int i = 0; i < m; i++) {
				String s = in.next();
				for (int j = 0; j < n; j++) {
					buf[i][j] = s.charAt(j);
				}
			}
			boolean not[][][] = new boolean[m][n][4];
			int dir[] = new int[0xff];
			dir['^'] = 0;
			dir['>'] = 1;
			dir['v'] = 2;
			dir['<'] = 3;
			int dx[] = new int[] { 0, 1, 0, -1 };
			int dy[] = new int[] { -1, 0, 1, 0 };
			int sy = 0, sx = 0, gy = 0, gx = 0;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					char c = buf[i][j];
					if (c == '^' || c == '<' || c == '>' || c == 'v') {
						Arrays.fill(not[i][j], true);
						for (int k = 0; k < 4; k++) {
							int d = (dir[c] + k) % 4;
							int y = i;
							int x = j;
							while (true) {
								y += dy[d];
								x += dx[d];
								if (x < 0 || n <= x || y < 0 || m <= y)
									break;
								char z = buf[y][x];
								if (z == '^' || z == '<' || z == '>' || z == 'v' || z == '#')
									break;
								not[y][x][k] = true;
							}
						}
					}
					if (c == '#') {
						Arrays.fill(not[i][j], true);
					}
					if (c == 'S') {
						sy = i;
						sx = j;
					}
					if (c == 'G') {
						gy = i;
						gx = j;
					}
				}
			}
			//			for (int i = 0; i < m; i++) {
			//				for (int j = 0; j < n; j++) {
			//					out.print(Arrays.toString(not[i][j]) + " ");
			//				}
			//				out.println();
			//			}
			int min[][][] = new int[m][n][4];
			for (int a[][] : min)
				for (int b[] : a)
					Arrays.fill(b, Integer.MAX_VALUE);
			min[sy][sx][0] = 0;
			Queue<int[]> queue = new ArrayDeque<>();
			queue.add(new int[] { sy, sx, 0 });
			while (!queue.isEmpty()) {
				int node[] = queue.poll();
				for (int i = 0; i < 4; i++) {
					int ny = node[0] + dy[i];
					int nx = node[1] + dx[i];
					if (nx < 0 || n <= nx || ny < 0 || m <= ny)
						continue;
					int nt = (node[2] + 1) % 4;
					if (not[ny][nx][nt] || min[ny][nx][nt] != Integer.MAX_VALUE)
						continue;
					min[ny][nx][nt] = min[node[0]][node[1]][node[2]] + 1;
					queue.add(new int[] { ny, nx, nt });
				}
			}
			int ans = Integer.MAX_VALUE;
			for (int i = 0; i < 4; i++) {
				ans = Math.min(ans, min[gy][gx][i]);
			}
			out.println("Case #" + (t + 1) + ": " + (ans == Integer.MAX_VALUE ? "impossible" : ans));
		}
		in.close();
		out.flush();
	}
}
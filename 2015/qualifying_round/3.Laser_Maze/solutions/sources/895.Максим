#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

typedef long long int64;
//#define double long double
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const double EPS = 1E-9;
const double EPS_ANG = 1E-16;
const double PI = acos((double)0) * 2;

#define forn(i, n)  for (int i = 0; i < int(n); ++i)
#define ford(i, n)  for (int i=int(n) - 1; i >= 0; --i)
#define fore(i, l, r)  for (int i = int(l); i < int(r); ++i)
#define all(a)  a.begin(), a.end()
#define fs  first
#define sc  second
#define mp  make_pair
#define pb  push_back


const int MAXN = 110;
const int dxy[4][2] = { {1, 0}, {0, -1}, {-1, 0}, {0, 1} };
const string dirs = "v<^>";
const string allowed = ".SG";


int rows, cols;
char field[MAXN][MAXN];


void read() {
	cin >> rows >> cols;
	forn(x, rows)
		scanf(" %s", field[x]);
}


struct state {
	int x, y, t;

	state(int x, int y, int t) : x(x), y(y), t(t) { }
	state() { }
};

int qh, qt;
state q[MAXN * MAXN * 4];
int d[MAXN][MAXN][4];

void upd(const state& to, int dst) {
	d[to.x][to.y][to.t] = dst;
	q[qt++] = to;
}

bool inside(int x, int y) {
	return 0 <= x && x < rows && 0 <= y && y < cols;
}

bool check_walkable(int x, int y) {
	return inside(x, y) && allowed.find(field[x][y]) != -1;
}

bool check_lasers(const state& to) {
	forn(dir, 4) {
		int x = to.x,  y = to.y;
		while (check_walkable(x, y)) {
			x += dxy[dir][0];
			y += dxy[dir][1];
		}
		char expected_laser = dirs[(dir + 2 + 4 - to.t) % 4];
		if (inside(x, y) && field[x][y] == expected_laser)
			return false;
	}
	return true;
}

void solve() {
	qh = qt = 0;
	memset(d, -1, sizeof d);
	forn(x, rows)
		forn(y, cols)
			if (field[x][y] == 'S')
				upd(state(x, y, 0), 0);
	
	while (qh != qt) {
		state cur = q[qh++];
		int curd = d[cur.x][cur.y][cur.t];

		forn(dir, 4) {
			state to(cur.x + dxy[dir][0], cur.y + dxy[dir][1], (cur.t + 1) % 4);
			if (check_walkable(to.x, to.y) && d[to.x][to.y][to.t] == -1 && check_lasers(to)) {
				if (field[to.x][to.y] == 'G') {
					cout << curd + 1 << endl;
					return;
				}
				upd(to, curd + 1);
			}
		}
	}
	puts("impossible");
}


int main(int argc, char *argv[]) {
	int test_to_execute = (argc == 2) ? atoi(argv[1]) : -1;

	if (test_to_execute == -1) {
		freopen("input.txt", "rt", stdin);
		freopen("output.txt", "wt", stdout);
	}

	int tests;
	cin >> tests;
	
	if (test_to_execute != -1 && !(1 <= test_to_execute && test_to_execute <= tests)) {
		cerr << "Requested test doesn't exist!" << endl;
		throw std::exception("Requested test doesn't exist!");
	}

	for (int test = 1; test <= tests; ++test) {
		time_t start_time = clock();
		read();
		if (!cin)
			throw;
		if (test_to_execute != -1 && test != test_to_execute)
			continue;
		printf("Case #%d: ", test);
		solve();
		cerr << "Test #" << test << " done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
	}
}

#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <utility>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stack>
#include <ctime>
#include <list>
#include <map>
#include <set>

#define REP(i,n) for(int i=0;i<(n);i++)
#define TR(i,x) for(__typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))
#define SIZE(x) (int)(x).size()

#define MP make_pair
#define PB push_back

using namespace std;

typedef long long LL;
typedef pair<int,int> PII;

const int MAXN = 110;

int m, n;
int d[MAXN][MAXN][4];
bool g[MAXN][MAXN][4];
char Map[MAXN][MAXN];

int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};

int GetDirection(char ch) {
    if (ch == '>') return 0;
    if (ch == 'v') return 1;
    if (ch == '<') return 2;
    if (ch == '^') return 3;
    if (ch == '#') return 4;
    assert(ch == 'G' || ch == 'S' || ch == '.');
    return -1;
}

bool Inside(int x, int y) {
    return x >= 0 && x < m && y >= 0 && y < n;
}

void Go(int x, int y, int dir, int st) {
    x += dx[dir];
    y += dy[dir];
    for (; Inside(x, y) && GetDirection(Map[x][y]) == -1; x += dx[dir], y += dy[dir]) {
        g[x][y][st] = false;
    }
}

tuple<int,int,int> q[MAXN * MAXN * 4];

void BFS(int sx, int sy) {
    FILL(d, 0x3f);
    d[sx][sy][0] = 0;
    q[0] = make_tuple(sx, sy, 0);
    for (int h = 0, t = 1; h < t; ++h) {
        int x, y, s;
        tie(x, y, s) = q[h];
        REP(i, 4) {
            int xx = x + dx[i], yy = y + dy[i], ss = (s + 1) % 4;
            if (Inside(xx, yy) && g[xx][yy][ss] && d[xx][yy][ss] == 0x3f3f3f3f) {
                d[xx][yy][ss] = d[x][y][s] + 1;
                q[t++] = make_tuple(xx, yy, ss);
            }
        }
    }
}

void Solve() {
    cin >> m >> n;
    REP(i, m) scanf("%s", Map[i]);
    int sx = -1, sy = -1, ex = -1, ey = -1;
    REP(i, m) REP(j, n) REP(k, 4) g[i][j][k] = true;
    REP(i, m) {
        REP(j, n) {
            if (Map[i][j] == 'S') {
                assert(sx == -1 && sy == -1);
                sx = i;
                sy = j;
            } else if (Map[i][j] == 'G') {
                assert(ex == -1 && ey == -1);
                ex = i;
                ey = j;
            } else { 
                int c = GetDirection(Map[i][j]);
                if (c != -1) {
                    REP(k, 4) {
                        g[i][j][k] = false;
                        if (c < 4) {
                            Go(i, j, (c + k) % 4, k);
                        }
                    }
                }

            }
        }
    }
    BFS(sx, sy);
    int dis = 0x3f3f3f3f;
    REP(i, 4) dis = min(dis, d[ex][ey][i]);
    if (dis < 0x3f3f3f3f) cout << dis << endl;
    else puts("impossible");
}

int main() {
//    freopen("laser_maze_example_input.txt", "r", stdin);
    freopen("laser_maze.txt", "r", stdin);
    freopen("laser_maze_output.txt", "w", stdout);
    int cas;
    cin >> cas;
    for (int T = 1; T <= cas; ++T) {
        printf("Case #%d: ", T);
        Solve();
    }
    return 0;
}


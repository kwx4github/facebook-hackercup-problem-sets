#include <bits/stdc++.h>

using namespace std;


char grid[107][107];
bool Safe[107][107][5];
int n,m;

/// t = 0 up,
/// t = 1 right
/// t = 2 down
/// t = 3 left

void Go(int x,int y,int t,int d)
{
    if(x<0 || y<0 || x>=n || y>=m || grid[x][y]=='#') return;
    if(grid[x][y]=='<' || grid[x][y]=='^' || grid[x][y]=='>' || grid[x][y]=='v') return ;

    Safe[x][y][d] = false;
    if(t==0) Go(x-1,y,t,d);
    if(t==1) Go(x,y+1,t,d);
    if(t==2) Go(x+1,y,t,d);
    if(t==3) Go(x,y-1,t,d);

}


int inx[] = {-1,0,1,0};
int iny[] = {0,1,0,-1};

int GetType(char c)
{
    if(c=='^') return 0;
    if(c=='>') return 1;
    if(c=='v') return 2;
    if(c=='<') return 3;
    return -1;
}

int sx,sy,ex,ey;

void Init()
{
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
            for(int k=0;k<4;k++)
            {
                Safe[i][j][k] = true;
            }

    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
        {
            int t = GetType(grid[i][j]);
            if(grid[i][j]=='S') sx = i , sy = j;
            if(grid[i][j]=='#')
            {
                for(int k=0;k<4;k++) Safe[i][j][k] = false;
            }
            else if(t!=-1)
            {
                for(int k=0;k<4;k++) Safe[i][j][k] = false;

                for(int k=0;k<4;k++)
                {
                    Go(i+inx[(t+k)%4] , j+iny[(t+k)%4] , t , k);
                }
            }
        }
}

struct ss
{
    int x,y,t,c;
};

int vis[107][107][5] , True;

int Bfs()
{
    True++;
    ss s1,s2;
    queue<ss> Q;
    s1.x = sx; s1.y = sy; s1.t = 0; s1.c = 0;

    ///if(Safe[s1.x][s1.y][s1.t] == false)     return -1;
    Q.push(s1);
    vis[s1.x][s1.y][s1.t] = True;

    while(!Q.empty())
    {
        s1 = Q.front();
        Q.pop();
        if(grid[s1.x][s1.y] == 'G') return s1.c;
        /*s2 = s1;
        s2.t = (s1.t + 1)%4;
        s2.c = s1.c + 1;
        if(Safe[s2.x][s2.y][s2.t] && vis[s2.x][s2.y][s2.t] != True)
        {
            vis[s2.x][s2.y][s2.t] = True;
            Q.push(s2);
        }*/


        for(int i=0;i<4;i++)
        {
            s2.x =s1.x + inx[i];
            s2.y = s1.y + iny[i];
            s2.t = (s1.t+1)%4;
            s2.c = s1.c + 1;
            if(s2.x >=0 && s2.x < n && s2.y >=0 && s2.y < m && Safe[s2.x][s2.y][s2.t] && vis[s2.x][s2.y][s2.t] != True)
            {
                vis[s2.x][s2.y][s2.t] = True;
                Q.push(s2);
            }
        }

    }
    return -1;

}


void print()
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            for(int k=0;k<4;k++)
            {
                if(Safe[i][j][k] == false) cout<<i<<","<<j<<","<<k<<endl;
            }
        }
    }
}

int main()
{
    freopen("Cin.txt","rt",stdin);
    freopen("Cout.txt","wt",stdout);
    int cas,tst;
    scanf("%d",&tst);
    for(cas=1;cas<=tst;cas++)
    {
        scanf("%d%d",&n,&m);
        for(int i=0;i<n;i++) scanf("%s",&grid[i]);
        Init();
        //print();
        int ans = Bfs();
        if(ans==-1) printf("Case #%d: impossible\n",cas);
        else printf("Case #%d: %d\n",cas,ans);
    }
    return 0;
}

#include <fstream>
#include <algorithm>
#include <queue>
using namespace std;

const int Nmax = 105;
const int inf = 1 << 30;

ifstream in("laser_maze.txt");
ofstream out("laser_maze_output.txt");

struct point_phase{
	int x, y;
	int phase;
	point_phase() {}
	point_phase(int a, int b, int p) :
		x(a), y(b), phase(p) {}
};

int t, n, m;
point_phase s, g;
char mat[Nmax][Nmax];
int obstacle[Nmax][Nmax];
int dist[Nmax][Nmax][5];

inline bool passes_through(char c) {
	if (c == '.' || c == 'S' || c == 'G')
		return true;
	return false;
}

void update_up(int x, int y, int phase) {
	obstacle[x][y] |= 1;
	for (int k = x - 1; k > 0 && passes_through(mat[k][y]); --k)
		obstacle[k][y] |= (1 << phase);
}

void update_down(int x, int y, int phase) {
	obstacle[x][y] |= 1;
	for (int k = x + 1; k <= n && passes_through(mat[k][y]); ++k)
		obstacle[k][y] |= (1 << phase);
}

void update_left(int x, int y, int phase) {
	obstacle[x][y] |= 1;
	for (int k = y - 1; k > 0 && passes_through(mat[x][k]); --k)
		obstacle[x][k] |= (1 << phase);
}

void update_right(int x, int y, int phase) {
	obstacle[x][y] |= 1;
	for (int k = y + 1; k <= n && passes_through(mat[x][k]); ++k)
		obstacle[x][k] |= (1 << phase);
}

void create_obstacle_mat() {
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= m; ++j)
			obstacle[i][j] = 0;

	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= m; ++j) {
			if (mat[i][j] == 'S') s = point_phase(i, j, 1);
			else if (mat[i][j] == 'G') g = point_phase(i, j, 1);
			else if (mat[i][j] == '#') obstacle[i][j] |= 1;
			else if (mat[i][j] == '<') {
				update_left(i, j, 1);
				update_up(i, j, 2);
				update_right(i, j, 3);
				update_down(i, j, 4);
			}
			else if (mat[i][j] == '^') {
				update_up(i, j, 1);
				update_right(i, j, 2);
				update_down(i, j, 3);
				update_left(i, j, 4);
			}
			else if (mat[i][j] == '>') {
				update_right(i, j, 1);
				update_down(i, j, 2);
				update_left(i, j, 3);
				update_up(i, j, 4);
			}
			else if (mat[i][j] == 'v') {
				update_down(i, j, 1);
				update_left(i, j, 2);
				update_up(i, j, 3);
				update_right(i, j, 4);
			}
		}
}

inline bool is_inside_mat(int x, int y) {
	if (x < 1 || x > n || y < 1 || y > m)
		return false;
	return true;
}

void dfs() {
	int dx[] = { -1, 0, 1, 0 };
	int dy[] = { 0, -1, 0, 1 };
	queue<point_phase> q;

	for (int k = 1; k <= 4; ++k)
		for (int i = 1; i <= n; ++i)
			for (int j = 1; j <= m; ++j)
				dist[i][j][k] = inf;

	dist[s.x][s.y][s.phase] = 0;
	q.push(s);

	while (!q.empty()) {
		point_phase t = q.front();
		q.pop();
		for (int k = 0; k < 4; ++k) {
			int x = t.x + dx[k];
			int y = t.y + dy[k];
			int phase = (t.phase % 4) + 1;
			if (is_inside_mat(x, y) &&
				(dist[x][y][phase] > dist[t.x][t.y][t.phase] + 1) &&
				!((obstacle[x][y] & 1) || (obstacle[x][y] & (1 << phase)))) {
				dist[x][y][phase] = dist[t.x][t.y][t.phase] + 1;
				q.push(point_phase(x, y, phase));
			}
		}
	}
}

int main() {
	string buffer;
	in >> t;
	for (int k = 1; k <= t; ++k) {
		in >> n >> m;
		for (int i = 1; i <= n; ++i)
			in >> mat[i] + 1;
		create_obstacle_mat();
		dfs();
		out << "Case #" << k << ": ";
		int dist_min = inf;
		for (int k = 1; k <= 4; ++k)
			dist_min = min(dist_min, dist[g.x][g.y][k]);
		if (dist_min == inf) out << "impossible\n";
		else out << dist_min << '\n';
	}
	
	return 0;
}
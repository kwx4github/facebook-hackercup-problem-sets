#include <bits/stdc++.h>
#define INF 0x3f3f3f3f
#define mk make_pair
#define pb push_back

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
#define N 100

char grid[N][N+1];

int dist[N*N][4];
int n,m, src, tar;

bool ok( int i, int j ) {
        return i>=0 && i<n && j>=0 && j<m && (grid[i][j] =='.' || grid[i][j] == 'G' || grid[i][j] =='S' );
}
const char turet[] = {'v','<','^','>' };
int map_tur( char x ) {
        switch( x ) {
                case 'v' : return 0;
                case '<' : return 1;
                case '^' : return 2;
                case '>' : return 3;
        }
}

char mov( int k, char x ) {
        if( x != 'v' && x != '>' && x!= '<' && x!='^' ) return '.';
        return turet[ (map_tur( x ) + k)%4 ];
}

bool iswall( int k, char a, char x ) {
        if( x=='#' ) return true;
        if( x=='.' || x=='S' || x=='G' ) return false;

        if( mov( k, x ) == a ) return false;

        return ( mov(k,x) == 'v' || mov(k,x)=='^' || mov(k,x)=='>' || mov(k,x)=='<');
}

bool dead( int k, int ui, int uj ) {
        
        for( int i = ui; i>=0; i-- )
        {
                //cout << mov( k, grid[i][uj] ) << endl;
                if( iswall( k, 'v', grid[i][uj] )) break;
                else 
                        if( mov( k, grid[i][uj]) == 'v' ) return true;
        }
        for( int i = ui; i<n; i++ )
                if( iswall( k, '^', grid[i][uj] )) break;
                else if( mov( k, grid[i][uj] ) == '^' ) return true;

        for( int j = uj; j>=0; j-- )
                if( iswall( k, '>', grid[ui][j] )) break;
                else if( mov( k, grid[ui][j] ) == '>' ) return true;

        for( int j = uj; j<m; j++ )
        {
                if( iswall( k, '<', grid[ui][j] )) break;
                else 
                        if( mov( k, grid[ui][j] ) == '<' ) return true;
        }
        return false;
}

int d[][2] = { {0,1}, {1,0}, {-1,0}, {0,-1} };

int bfs( ) {

        memset( dist, INF, sizeof( dist ));

        queue<ii> Q;
        Q.push( mk( 0, src) );
        dist[ src ][ 0 ] = 0;

//        if( dead( 0, src/m, src%m ) ) return INF;

        while( !Q.empty() ) {
                int u = Q.front().second; 
                int pos = Q.front().first;
                Q.pop();
                int npos = (pos+1)%4;

                int ui = u/m, uj = u%m;
                //cout << dist[u][pos] <<" "<< ui << " " << uj << endl;

                if( u == tar ) {
                        return dist[tar][pos];
                }

                for( int i = 0; i<4; i++ )
                {
                        int vi = ui + d[i][0];
                        int vj = uj + d[i][1];
                        int v = vi*m + vj;

                        /*
                        cout << ui << " " << uj <<" -> " << vi <<" " << vj << endl;

                        if( ok( vi, vj ) && dead( npos, vi, vj ) )
                               cout << vi <<" " << vj <<" ##" << npos << endl;
                               */

                        if( ok( vi, vj ) && !dead( npos, vi, vj ) && dist[u][pos] + 1 < dist[v][npos] ) 
                        {
                                //cout << dist[v][npos] << "#\n";
                                dist[v][npos] = dist[u][pos] + 1;
                                Q.push( mk( npos, v ) );
                        }
                }
        }

        return INF;
        return min( dist[tar][0], dist[tar][1] );
}

int main(){

        int T;
        cin >> T;
        for( int ca = 1; ca <=T; ca++ )
        {
                cin >> n >> m;
                for( int i = 0; i<n; i++ )
                        cin >> grid[i];
                for( int i = 0; i<n; i++)
                {
                        for( int j = 0;j < m; j++) 
                        {
                                //cout << grid[i][j];
                                if( grid[i][j] == 'S' )
                                        src = i*m+j;
                                else if( grid[i][j] == 'G' )
                                        tar = i*m+j;
                        }
                }

//                cout << mov( 2, '<' ) << "@\n";

                int res = bfs();

//                if( dead( 0, 1, 0 ) ) cout << "D";

                cout << "Case #"<< ca <<": ";
                if( res == INF )
                        cout << "impossible\n";
                else
                        cout << res << "\n";
        }


        return 0;
}

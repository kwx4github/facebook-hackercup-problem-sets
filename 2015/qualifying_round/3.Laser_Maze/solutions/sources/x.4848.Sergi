#include <iostream>
#include <queue>   

using namespace std;
#define INFINITO 99999999

    /*
    POSIBLE SOLUCION: BUSQUEDA EN ANCHURA CON GRAFO MUY GRANDE (1 POR CADA PASO), 
    AUNQUE REALMENTE HAY 4 GRAFOS DISTINTOS QUE SON REFERENCIADOS
    
    */


long long int T;
long long int M,N;

char tmp[4];

char matriz[4][150][150];


short grafos[4][100][100][100][100];
long long int visitas[4][100][100];

long long int xEntrada,yEntrada,xSalida,ySalida;


void rotar(int estado)
{
    long long int i,j,k;
    for(i=0;i<M;i++)
    {
        for(j=0;j<N;j++)
        {
            if(matriz[estado-1][i][j]=='^')
            {
                matriz[estado][i][j]='>';
            }
            else  if(matriz[estado-1][i][j]=='>')
            {
                matriz[estado][i][j]='v';
            }
            else  if(matriz[estado-1][i][j]=='v')
            {
                matriz[estado][i][j]='<';
            }
            else  if(matriz[estado-1][i][j]=='<')
            {
                matriz[estado][i][j]='^';
            }
            else
            {
                matriz[estado][i][j]=matriz[estado-1][i][j];
            }
        }
    }
}

void crearParedes()
{
    long long int i,j,k,l;
    
    for(i=0;i<4;i++)
    {
        for(j=0;j<M;j++)
        {
            for(k=0;k<N;k++)
            {
                if(matriz[i][j][k]=='S')
                {
                    xEntrada=j;
                    yEntrada=k;
                }
                if(matriz[i][j][k]=='G')
                {
                    xSalida=j;
                    ySalida=k;
                }
                if(matriz[i][j][k]=='^')
                {
                    for(l=j-1;l>=0;l--)
                    {
                        if(matriz[i][l][k]=='.')
                        {
                            matriz[i][l][k]='#';
                        }
                        else if(matriz[i][l][k]=='S' || matriz[i][l][k]=='G')
                        {
                            matriz[i][l][k]='#';
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                else  if(matriz[i][j][k]=='>')
                {
                    for(l=k+1;l<N;l++)
                    {
                        if(matriz[i][j][l]=='.')
                        {
                            matriz[i][j][l]='#';
                        }
                        
                        else if(matriz[i][j][l]=='S' || matriz[i][j][l]=='G')
                        {
                            matriz[i][j][l]='#';
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                else  if(matriz[i][j][k]=='v')
                {
                    for(l=j+1;l<M;l++)
                    {
                        if(matriz[i][l][k]=='.')
                        {
                            matriz[i][l][k]='#';
                        }
                        else if(matriz[i][l][k]=='S' || matriz[i][l][k]=='G')
                        {
                            matriz[i][l][k]='#';
                        } 
                        else
                        {
                            break;
                        }
                    }
                }
                else  if(matriz[i][j][k]=='<')
                {
                    
                    for(l=k-1;l>=0;l--)
                    {
                        if(matriz[i][j][l]=='.')
                        {
                            matriz[i][j][l]='#';
                        }
                        else if(matriz[i][j][l]=='S' || matriz[i][j][l]=='G')
                        {
                            matriz[i][j][l]='#';
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }
        }
    }
    
}

void inicializarVisitados()
{
    long long int i,j,k,l,m;
    
    for(i=0;i<4;i++)
    {
        for(j=0;j<100;j++)
        {
            for(k=0;k<100;k++)
            {
                
                for(l=0;l<100;l++)
                {
                    for(m=0;m<100;m++)
                    {
                        grafos[i][j][k][l][m]=0;
                    }
                }
                visitas[i][j][k]=INFINITO;
            }   
            
        }
    }
}

void imprimirGrafo(int estado)
{
    long long int i,j,k;
    
    i=estado;
        for(j=0;j<M;j++)
        {
            for(k=0;k<N;k++)
            {
                cout << matriz[i][j][k];
             }   
            cout << endl;
        }
    
            cout << endl;
            cout << endl;
            cout << endl;
}

void imprimirVisitas(int estado)
{
    long long int i,j,k;
    
    i=estado;
        for(j=0;j<M;j++)
        {
            for(k=0;k<N;k++)
            {
                cout << visitas[i][j][k]<< " ";
             }   
            cout << endl;
        }
    
            cout << endl;
            cout << endl;
            cout << endl;
}
void imprimirCaminos(int estado)
{
    long long int i,j,k,l,m;
    
    i=estado;
        for(j=0;j<M;j++)
        {
            for(k=0;k<N;k++)
            {
                cout << "Posicion "<<j<<" " <<k<<endl;
                for(l=0;l<M;l++)
                {
                    for(m=0;m<N;m++)
                    {
                        if(grafos[i][j][k][l][m]==1)
                        {
                                cout << "--> Conecta con " <<l <<" " <<m<< " "<<endl;
                        }
                    }
                }
             }   
            cout << endl;
        }
    
            cout << endl;
            cout << endl;
            cout << endl;
}

void matrizToGrafo(int estado)
{
    // # pared
    // ^v<> laser
    // G goal
    // S Start
    // . vacio
    
    long long int i,j;
    
    int estadoSig=estado+1;
    if(estadoSig==4)
    {
        estadoSig=0;
    }
    
    for(i=0;i<M;i++)
    {
        for(j=0;j<N;j++)
        {
            if(matriz[estado][i][j]=='G')
            {
                xSalida=i;
                ySalida=j;
            }
            if(matriz[estado][i][j]=='S')
            {
                xEntrada=i;
                yEntrada=j;
            }

            if(matriz[estado][i][j]=='.' || matriz[estado][i][j]=='G' || matriz[estado][i][j]=='S')
            {
                if(i+1<M && (matriz[estadoSig][i+1][j]=='.' || matriz[estadoSig][i+1][j]=='S' ||matriz[estadoSig][i+1][j]=='G'))
                {
                    grafos[estado][i][j][i+1][j]=1;
                }
                if(i-1>=0 && (matriz[estadoSig][i-1][j]=='.' ||matriz[estadoSig][i-1][j]=='S' ||matriz[estadoSig][i-1][j]=='G'))
                {
                    grafos[estado][i][j][i-1][j]=1;                    
                }
                if(j+1<N && (matriz[estadoSig][i][j+1]=='.' ||matriz[estadoSig][i][j+1]=='S' ||matriz[estadoSig][i][j+1]=='G'))
                {
                    grafos[estado][i][j][i][j+1]=1;
                }
                if(j-1>=0 && (matriz[estadoSig][i][j-1]=='.' ||matriz[estadoSig][i][j-1]=='S' ||matriz[estadoSig][i][j-1]=='G'))
                {
                    grafos[estado][i][j][i][j-1]=1;
                }
            }
            
        }
    }
        
}

long long int minimo(long long int a,long long int b)
{
    if(a<b)
        return a;
    return b;
}


    struct S 
    { 
        int estado;
        int x;
        int y;
    };
    
    typedef struct S nodo;

long long int bfs4d()
{


    queue<nodo> colaBFS;    
    
    nodo nodoAct;
    nodoAct.estado=0;
    nodoAct.x=xEntrada;
    nodoAct.y=yEntrada;
    
    visitas[0][xEntrada][yEntrada]=0;
    
    //cout << "Pongo a 0 visitas de "<<xEntrada<<" "<<yEntrada<<endl;
    
    colaBFS.push(nodoAct);
    
    while (!colaBFS.empty())
    {
        nodoAct=colaBFS.front();
        colaBFS.pop();
        long long int x,y,e,eSig,pasos;
        e=nodoAct.estado;
        eSig=e+1;
        if(eSig==4)
        {
            eSig=0;
        }
        x=nodoAct.x;
        y=nodoAct.y;
        pasos=visitas[e][x][y];
        
        //cout << "Saco "<<e<<" " << x << " " << y << endl;
        
        if(x-1>=0 && grafos[e][x][y][x-1][y]==1 && visitas[eSig][x-1][y]>pasos+1)
        {
            visitas[eSig][x-1][y]=pasos+1;
            nodo nodoTMP;
            nodoTMP.estado=eSig;
            nodoTMP.x=x-1;
            nodoTMP.y=y;
            colaBFS.push(nodoTMP);
        }
        if(x+1<M && grafos[e][x][y][x+1][y]==1 && visitas[eSig][x+1][y]>pasos+1)
        {
            visitas[eSig][x+1][y]=pasos+1;
            nodo nodoTMP;
            nodoTMP.estado=eSig;
            nodoTMP.x=x+1;
            nodoTMP.y=y;
            colaBFS.push(nodoTMP);
        }
        if(y-1>=0 && grafos[e][x][y][x][y-1]==1 && visitas[eSig][x][y-1]>pasos+1)
        {
            visitas[eSig][x][y-1]=pasos+1;
            nodo nodoTMP;
            nodoTMP.estado=eSig;
            nodoTMP.x=x;
            nodoTMP.y=y-1;
            colaBFS.push(nodoTMP);
        }
        if(y+1<N && grafos[e][x][y][x][y+1]==1 && visitas[eSig][x][y+1]>pasos+1)
        {
            visitas[eSig][x][y+1]=pasos+1;
            nodo nodoTMP;
            nodoTMP.estado=eSig;
            nodoTMP.x=x;
            nodoTMP.y=y+1;
            colaBFS.push(nodoTMP);
        }
        
        
    }
    
    return minimo(minimo(minimo(visitas[0][xSalida][ySalida],visitas[1][xSalida][ySalida]),visitas[2][xSalida][ySalida]),visitas[3][xSalida][ySalida]);
}


int main()
{
    long long int i,j,k;
    cin >> T;
    
    for(i=0;i<T;i++)
    {
        cin >>M >> N;
        cin.getline(tmp,3);
        for(j=0;j<M;j++)
        {
            cin.getline(matriz[0][j],101);
        }
        inicializarVisitados();
        
        rotar(1);
        rotar(2);
        rotar(3);
        
        crearParedes();
        /*
        imprimirGrafo(0);
        imprimirGrafo(1);
        imprimirGrafo(2);
        imprimirGrafo(3);    
        */
        matrizToGrafo(0);
        matrizToGrafo(1);
        matrizToGrafo(2);
        matrizToGrafo(3);
        
        long long int res=bfs4d();
        /*
        imprimirVisitas(0);
        imprimirVisitas(1);
        imprimirVisitas(2);
        imprimirVisitas(3);
        */
        /*
        imprimirCaminos(0);
      */
      
        if(res!=INFINITO)
        {
            cout << "Case #"<<(i+1)<<": "<<res<<endl;
        }
        else
        {
            cout << "Case #"<<(i+1)<<": impossible"<<endl;
        }
    }
    
    return 0;
}

#include <iostream>
#include <cstdio>
#include <string.h>
#include <algorithm>
#include <string>
#include <queue>
#include <cassert>
using namespace std;
#define debug(x) cout << #x << " = " << x << endl;
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define rrep(i,b,a) for(int i = (b); i >= (a); --i)
#define clr(a,x) memset(a,(x),sizeof(a))
#define LL long long
#define eps 1e-9
#define mt make_tuple
const int maxn = 100;

const int Move[2][4] = { {-1,0,1,0},{0,1,0,-1} };
int n,m;

char maze[maxn][maxn];
int dir[maxn][maxn];
int d[maxn][maxn][4];
typedef tuple<int,int,int> State;
queue<State> q;

inline bool inRange(int r,int c)
{
    return 0 <= r && r < n && 0 <= c && c < m;
}

bool Ok(int r,int c,int t)
{
    rep(i,0,4) {
        int rr = r + Move[0][i];
        int cc = c + Move[1][i];
        while (inRange(rr,cc) && (maze[rr][cc] != '#' && dir[rr][cc] == -1))
            tie(rr,cc) = mt(rr+Move[0][i],cc+Move[1][i]);
        if (!inRange(rr,cc) || maze[rr][cc] == '#') continue;
        int tt = (t + dir[rr][cc]) % 4;
        if ((i+2)%4 == tt) return false;
    }
    return true;
}

void input()
{
    scanf("%d%d",&n,&m);
    rep(i,0,n) scanf("%s",maze[i]);
    clr(dir,-1);
    rep(i,0,n) rep(j,0,m) {
        if (maze[i][j] == '^') dir[i][j] = 0;
        else if (maze[i][j] == '>') dir[i][j] = 1;
        else if (maze[i][j] == 'v') dir[i][j] = 2;
        else if (maze[i][j] == '<') dir[i][j] = 3;
    }
}

const int inf = 1e8;
void solve()
{
    rep(i,0,n) rep(j,0,m) rep(k,0,4) d[i][j][k] = inf;
    rep(i,0,n) rep(j,0,m) if (maze[i][j] == 'S') {
        q.push(mt(i,j,0));
        d[i][j][0] = 0;
        break;
    }
    while (q.size()) {
            int r,c,t;
            tie(r,c,t) = q.front(); q.pop();
            rep(i,0,4) {
                int rr = r + Move[0][i];
                int cc = c + Move[1][i];
                int tt = (t + 1) % 4;
                if (!inRange(rr,cc) || d[rr][cc][tt] <= d[r][c][t] + 1) continue;
                if (maze[rr][cc] == '#' || dir[rr][cc] != -1) continue;
                if (!Ok(rr,cc,tt)) continue;
                d[rr][cc][tt] = d[r][c][t] + 1;
                q.push(mt(rr,cc,tt));
            }
    }
    int ans = inf;
    rep(i,0,n) rep(j,0,m) if (maze[i][j] == 'G') {
        rep(k,0,4) ans = min(ans,d[i][j][k]);
        break;
    }
    if (ans == inf) puts("impossible");
    else printf("%d\n",ans);
}

int main()
{
    freopen("C:\\in.txt","r",stdin);
    freopen("C:\\out.txt","w",stdout);
    int T; cin >> T;
    rep(cas,1,T+1) {
        input();
        printf("Case #%d: ",cas);
        solve();
    }
}

#include <bits/stdc++.h>

using namespace std;

int H, W;
string B[110];
pair<int, int> S;
pair<int, int> G;

bool visit[110][110][4];
struct Search {
  Search(int x, int y, int turn) : x(x), y(y), turn(turn) {}
  int x, y, turn;
};

const string gLaser = "<^>v";
const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, -1, 0, 1};

struct Laser {
  Laser(int x, int y, int dir) : x(x), y(y), dir(dir) {}
  int x, y, dir;
};
vector<Laser> lasers;

void Input() {
  cin >> H >> W;
  for (int y = 0; y < H; y++) cin >> B[y];
}

bool IsAttacked(const Search& cur) {
  for (const Laser& laser : lasers) {
    int dir = (laser.dir + cur.turn) % 4;
    if (dir == 0) {
      if (cur.x <= laser.x && cur.y == laser.y) return true;
    } else if (dir == 1) {
      if (cur.x == laser.x && cur.y <= laser.y) return true;
    } else if (dir == 2) {
      if (cur.x >= laser.x && cur.y == laser.y) return true;
    } else if (dir == 3) {
      if (cur.x == laser.x && cur.y >= laser.y) return true;
    }
  }
  return false;
}

void Solve() {
  memset(visit, false, sizeof(visit));
  lasers.clear();

  for (int y = 0; y < H; y++) {
    for (int x = 0; x < W; x++) {
      if (B[y][x] == 'S') S = { x, y };
      if (B[y][x] == 'G') G = { x, y };
      if (gLaser.find(B[y][x]) != string::npos) {
        lasers.emplace_back(Laser(x, y, gLaser.find(B[y][x])));
      }
    }
  }

  int res = -1;
  queue<Search> q;
  q.push(Search(S.first, S.second, 0));
  while (!q.empty()) {
    Search cur = q.front();
    q.pop();

    if (visit[cur.x][cur.y][cur.turn % 4]) continue;
    visit[cur.x][cur.y][cur.turn % 4] = true;

    if (cur.turn > 0 && IsAttacked(cur)) {
      continue;
    }
    if (cur.x == G.first && cur.y == G.second) {
      res = cur.turn;
      break;
    }

    for (int d = 0; d < 4; d++) {
      int nx = cur.x + dx[d];
      int ny = cur.y + dy[d];
      if (nx < 0 || nx >= W || ny < 0 || ny >= H ||
          gLaser.find(B[ny][nx]) != string::npos|| B[ny][nx] == '#') {
        continue;
      }

      q.push(Search(nx, ny, cur.turn + 1));
    }
  }

  if (res == -1) {
    cout << "impossible";
  } else {
    cout << res;
  }
}

int main() {
  int T;
  cin >> T;
  for (int test_case = 1; test_case <= T; test_case++) {
    Input();
    printf("Case #%d: ", test_case);
    Solve();
    cout << "\n";
  }

  return 0;
}

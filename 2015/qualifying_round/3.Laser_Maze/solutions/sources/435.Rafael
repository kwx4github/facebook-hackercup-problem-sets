#include <cstdio>
#include <queue>

using namespace std;

char maze[200][200];

int cas;

int m, n;
int sx, sy;
int gx, gy;

bool alive(int x, int y, int mod){
	for(int i = x-1; i >= 0; i--){
		char c = maze[i][y];

		if(c == '<' && mod == 3){
			return false;
		} else if(c == '>' && mod == 1){
			return false;
		} else if(c == '^' && mod == 2){
			return false;
		} else if(c == 'v' && mod == 0){
			return false;
		}

		if(c == '<' || c == '>' || c == '^' || c == 'v' || c == '#') break;
	}

	for(int i = x+1; i < m; i++){
		char c = maze[i][y];

		if(c == '<' && mod == 1){
			return false;
		} else if(c == '>' && mod == 3){
			return false;
		} else if(c == '^' && mod == 0){
			return false;
		} else if(c == 'v' && mod == 2){
			return false;
		}

		if(c == '<' || c == '>' || c == '^' || c == 'v' || c == '#') break;
	}

	for(int i = y; i >= 0; i--){
		char c = maze[x][i];

		if(c == '<' && mod == 2){
			return false;
		} else if(c == '>' && mod == 0){
			return false;
		} else if(c == '^' && mod == 1){
			return false;
		} else if(c == 'v' && mod == 3){
			return false;
		}

		if(c == '<' || c == '>' || c == '^' || c == 'v' || c == '#') break;
	}

	for(int i = y+1; i < n; i++){
		char c = maze[x][i];

		if(c == '<' && mod == 0){
			return false;
		} else if(c == '>' && mod == 2){
			return false;
		} else if(c == '^' && mod == 3){
			return false;
		} else if(c == 'v' && mod == 1){
			return false;
		}

		if(c == '<' || c == '>' || c == '^' || c == 'v' || c == '#') break;
	}

	return true;
}

bool wall(int x, int y){
	char c = maze[x][y];
	if(c == '.' || c == 'S' || c == 'G'){
		return false;
	} else{
		return true;
	}
}

bool read(){
	scanf("%d %d", &m, &n);
	for(int i = 0; i < m; i++){
		scanf("%s", maze[i]);
		for(int j = 0; j < n; j++){
			if(maze[i][j] == 'S'){
				sx = i;
				sy = j;
			} else if(maze[i][j] == 'G'){
				gx = i;
				gy = j;
			}
		}
	}
	return true;
}

int state[200][200][4];

struct Node{
	int x, y, steps;
};



void process(){
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++){
			for(int k = 0; k < 4; k++){
				state[i][j][k] = -1;
			}
		}
	}

	queue<Node> fila;
	Node no;
	no.x = sx; no.y = sy; no.steps = 0;
	fila.push(no);

	while(!fila.empty()){
		Node atual = fila.front();
		fila.pop();

		// printf("%d %d %d\n", atual.x, atual.y, atual.steps);

		if(state[atual.x][atual.y][atual.steps%4] >= 0) continue;

		if(atual.steps == 0 || alive(atual.x, atual.y, atual.steps%4)){
			// printf("ALIVE\n");
			state[atual.x][atual.y][atual.steps%4] = atual.steps;

			if(atual.x + 1 < m && !wall(atual.x+1, atual.y)){
				Node novo;
				novo.x = atual.x+1; novo.y = atual.y; novo.steps = atual.steps+1;
				fila.push(novo);
			}

			if(atual.x - 1 >= 0 && !wall(atual.x-1, atual.y)){
				Node novo;
				novo.x = atual.x-1; novo.y = atual.y; novo.steps = atual.steps+1;
				fila.push(novo);
			}

			if(atual.y + 1 < n && !wall(atual.x, atual.y+1)){
				Node novo;
				novo.x = atual.x; novo.y = atual.y+1; novo.steps = atual.steps+1;
				fila.push(novo);
			}

			if(atual.y - 1 >= 0 && !wall(atual.x, atual.y-1)){
				Node novo;
				novo.x = atual.x; novo.y = atual.y-1; novo.steps = atual.steps+1;
				fila.push(novo);
			}
		}
	}

	int madeit = -1;

	for(int i = 0; i < 4; i++){
		int s = state[gx][gy][i];
		if(madeit < 0){
			madeit = s;
		} else if(s >= 0 && s < madeit){
			madeit = s;
		}
	}

	if(madeit < 0){
		printf("Case #%d: impossible\n", cas);
	} else{
		printf("Case #%d: %d\n", cas, madeit);
	}

}

int main(){
	int cases;
	scanf("%d", &cases);
	cas = 1;
	while(cases-- && read()){
		process();
		cas++;
	}
	return 0;
}
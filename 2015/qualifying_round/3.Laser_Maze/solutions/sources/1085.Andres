//package tosend;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;


public class Main {
	
	static BufferedReader in = new BufferedReader( new InputStreamReader(System.in) );
	
	static int readInt() throws NumberFormatException, IOException{
		return Integer.parseInt(in.readLine());
	}
	
	static int[] map(String [] a){
		int r[] = new int[a.length];
		for(int i=0; i<a.length; i++){
			r[i] = Integer.parseInt(a[i]);
		}
		return r;
	}
	
	public static void main(String[] args) throws Exception {
	//	in = new BufferedReader(new FileReader("C:/laser_maze_example_input.txt"));
	//	in = new BufferedReader(new FileReader("C:/out2.txt"));
		in = new BufferedReader(new FileReader("C:/laser_maze.txt"));
		int T = readInt();
		for(int cases=1; cases<=T; cases++){
			int []data = map(in.readLine().split(" "));
			int n = data[0];
			int m = data[1];
			char map[][] = new char[n][m];
			
			for(int j=0; j<n; j++)
				map[j] = in.readLine().toCharArray();
			
			int currentX = 0, currentY = 0, goalX = 0, goalY = 0;
			TreeMap<Integer,Character> lasers = new TreeMap<>();
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					if( map[i][j] == 'S' ){
						currentX = i;
						currentY = j;
					}
					
					if( map[i][j] == 'G' ){
						goalX = i;
						goalY = j;
					}
					
					if( map[i][j] == '>' || map[i][j] == '<' || map[i][j] == '^' || map[i][j] == 'v' )
						lasers.put(i*m+j, map[i][j]);
				}
			}
			
			Heuristic heuristic = new Heuristic() {
				@Override
				public void setGoalCube(Problem goal) {
				}
				
				@Override
				public double h(State state) {
					BoardState bs = (BoardState)state;
					BoardProblem p = bs.problem;
					return (Math.abs(p.currentX-p.goalX) + Math.abs(p.currentY-p.goalY));
					
				}
				
				@Override
				public String getName() {
					return "Manhattan distance";
				}
			};
			
			AStarSearch search = new AStarSearch(heuristic, new StateFactory() {
				
				@Override
				public State getState() {
					return new BoardState();
				}
			});
			BoardProblem.matrix = map;
			map[currentX][currentY] = '.';
			map[goalX][goalY] = '.';
			//System.out.println(n + " "  + m);
			List<Action> ans = search.search(new BoardProblem(currentX, currentY, goalX, goalY,0));
			if(ans.size() == 0)
				System.out.println( "Case #"+cases+": " + "impossible" );
			else
				System.out.println( "Case #"+cases+": " + ans.size() );
		}
	}
	
	static class BoardAction implements Action {
		public static enum Actions{
			UP,LEFT,RIGHT,DOWN
		}
		
		Actions movement;
		
		public BoardAction(Actions movement){
			this.movement = movement;
		}
		
		public String toString(){
			if( movement.equals(Actions.UP) )
				return "UP";
			else if( movement.equals(Actions.DOWN) )
				return "DOWN";
			else if( movement.equals(Actions.LEFT) )
				return "LEFT";
			else if( movement.equals(Actions.RIGHT) )
				return "RIGHT";
			return "WATW";
		}
	}
	
	static class BoardState implements State {
		
		BoardProblem problem;
		BoardState parent;
		BoardAction action;
		double cost;
		int depth;
		String toString;
		
		public BoardState(){
			
		}
		
		public BoardState(BoardProblem problem, BoardState parent,
				BoardAction action, double cost, int depth) {
			super();
			this.problem = problem;
			this.parent = parent;
			this.action = action;
			this.cost = cost;
			this.depth = depth;
			this.toString = problem.toString();
		}

		@Override
		public int compareTo(State o) {
			BoardState bs = (BoardState)o;
			return toString.compareTo(bs.toString);
		}
		
		@Override
		public boolean equals(Object o) {
			BoardState bs = (BoardState)o;
			return toString.equals(bs.toString);
		}
		
		@Override
		public int hashCode() {
			return toString.hashCode();
		}

		@Override
		public void setProblem(Problem problem) {
			this.problem = (BoardProblem)problem;
			this.toString = problem.toString();
			
		}

		@Override
		public void setParent(State parent) {
			this.parent = (BoardState)parent;		
		}

		@Override
		public void setAction(Action action) {
			this.action = (BoardAction)action;
		}

		@Override
		public void setCost(double cost) {
			this.cost = cost;
		}

		@Override
		public void setDepth(int depth) {
			this.depth = depth;
		}

		@Override
		public Iterable<State> successorFunction() {
			// TODO Auto-generated method stub
			State goUp = move(BoardAction.Actions.UP);
			State goDown = move(BoardAction.Actions.DOWN);
			State goLeft = move(BoardAction.Actions.LEFT);
			State goRight = move(BoardAction.Actions.RIGHT);
			
			ArrayList<State> children = new ArrayList<>(4);
			if( goUp != null ) children.add(goUp);
			if( goDown != null ) children.add(goDown);
			if( goLeft != null ) children.add(goLeft);
			if( goRight != null ) children.add(goRight);
			//Collections.shuffle(children);
			return children;
		}
		
		

		private State move(BoardAction.Actions action) {
			if( action.equals(BoardAction.Actions.UP) ){
				if( BoardProblem.inValidPos(problem.currentX-1, problem.currentY) )
					return null;
				
				BoardProblem newProblem = problem.clone();
				newProblem.currentX--;
				if( newProblem.isDead() ) return null;
				
				return new BoardState(newProblem, this, new BoardAction(action), cost, depth+1);
				
			}else if( action.equals(BoardAction.Actions.DOWN) ){
				if( BoardProblem.inValidPos(problem.currentX+1, problem.currentY) )
					return null;
				
				
				BoardProblem newProblem = problem.clone();
				newProblem.currentX++;
				if( newProblem.isDead() ) return null;
				return new BoardState(newProblem, this, new BoardAction(action), cost, depth+1);
				
			}else if( action.equals(BoardAction.Actions.LEFT) ){
				if( BoardProblem.inValidPos(problem.currentX, problem.currentY-1) )
					return null;
				
				BoardProblem newProblem = problem.clone();
				newProblem.currentY--;
				if( newProblem.isDead() ) return null;
				return new BoardState(newProblem, this, new BoardAction(action), cost, depth+1);
				
			}else if( action.equals(BoardAction.Actions.RIGHT) ){
				if( BoardProblem.inValidPos(problem.currentX, problem.currentY+1) )
					return null;
				
				BoardProblem newProblem = problem.clone();
				newProblem.currentY++;
				
				if( newProblem.isDead() ) return null;
				return new BoardState(newProblem, this, new BoardAction(action), cost, depth+1);
			}
			return null;
		}
		
		

		@Override
		public State getParent() {
			return parent;
		}

		@Override
		public Action getAction() {
			return action;
		}

		@Override
		public Problem getProblem() {
			return problem;
		}

		@Override
		public double getCost() {
			//return cost;
			return depth;
		}

		@Override
		public boolean isGoal() {
			return problem.currentX == problem.goalX && problem.currentY == problem.goalY;
		}
		
		@Override
		public String toString(){
			return problem.toString();
		}

		@Override
		public int getDepth() {
			// TODO Auto-generated method stub
			return depth;
		}

	}
	
	static class BoardProblem implements Problem {
		public static char matrix[][];
		int currentX, currentY, goalX, goalY;
		int orientation;
		static char up[] = {'^','>','v','<'};
		static char down[] = {'v','<','^','>'};
		static char left[] = {'<','^','>','v'};
		static char right[] = {'>','v','<','^'};
		
		
		public BoardProblem( int currentX, int currentY, int goalX, int goalY, int orientation ){
			this.currentX = currentX;
			this.currentY = currentY;
			this.goalX = goalX;
			this.goalY = goalY;
			this.orientation = orientation;
		}
		
		public boolean equals(Object o){
			
			BoardProblem b = (BoardProblem)o;
			
			if( matrix.length != b.matrix.length || matrix[0].length != b.matrix[0].length )
				return false;
			
			for(int i=0; i<matrix.length; i++){
				for(int j=0; j<matrix[i].length; j++){
					if( matrix[i][j] != b.matrix[i][j] )
						return false;
				}
			}
			
			return true;
		}
		
		public BoardProblem clone(){
			return new BoardProblem(currentX, currentY, goalX, goalY,(orientation+1)%4);
		}
		
		private char getLaser(int i,int j){
			char symbol = matrix[i][j];
			switch (symbol) {
			case '^':
				return up[orientation];
			case '>':
				return right[orientation];
			case 'v':
				return down[orientation];
			case '<':
				return left[orientation];
			}
			
			//throw new IllegalArgumentException("LOL");
			return symbol;
			
		}

		public boolean isDead() {
			
			boolean isLaser = false;
			char l;
			for(int i=0; i<matrix[currentX].length; i++){
				
				if( i == currentY && isLaser )
					return true;
				
				if( matrix[currentX][i] == '.' || matrix[currentX][i] == 'G' ) continue;
				if( matrix[currentX][i] == '#' ){
					isLaser = false;
					continue;
				}
				l = getLaser(currentX,i);
				if( l == '>' )
					isLaser = true;
				else if( l == '<' || l == '^' || l == 'v'  )
					isLaser = false;
				else if( i == currentY && isLaser )
					return true;
			}
			
			isLaser = false;
			for(int i=matrix[currentX].length-1; i>=0; i--){
				
				if( i == currentY && isLaser )
					return true;
				
				if( matrix[currentX][i] == '.' || matrix[currentX][i] == 'G' ) continue;
				if( matrix[currentX][i] == '#' ){
					isLaser = false;
					continue;
				}
				l = getLaser(currentX,i);
				if( l == '<' )
					isLaser = true;
				else if( l == '>' || l == '^' || l == 'v' )
					isLaser = false;
				else if( i == currentY && isLaser )
					return true;
			}
			
			isLaser = false;
			for(int i=0; i<matrix.length; i++){
				
				if( i == currentX && isLaser )
					return true;
				
				if( matrix[i][currentY] == '.' || matrix[i][currentY] == 'G' ) continue;
				if( matrix[i][currentY] == '#' ){
					isLaser = false;
					continue;
				}
				
				l = getLaser(i,currentY);
				if( l == 'v' )
					isLaser = true;
				else if( l == '^' || l == '>' || l == '<' )
					isLaser = false;
				else if( i == currentX && isLaser )
					return true;
			}
			
			isLaser = false;
			for(int i=matrix.length-1; i>=0; i--){
				
				if( i == currentX && isLaser )
					return true;
				
				if( matrix[i][currentY] == '.' || matrix[i][currentY] == 'G' ) continue;
				if( matrix[i][currentY] == '#' ){
					isLaser = false;
					continue;
				}
				
				l = getLaser(i,currentY);
				
				
				if( l == '^' )
					isLaser = true;
				else if( l == 'v' || l == '>' || l == '<' || l == '#' )
					isLaser = false;
				else if( i == currentX && isLaser )
					return true;
			}
			
			return false;
		}
		
		public void move(int i, int j){
			currentX = i;
			currentY = j;
		}
		
		
		public String toString(){
			StringBuilder out = new StringBuilder();
			for(int i=0; i<matrix.length; i++){
				for (int j = 0; j < matrix[i].length; j++) {
						if( i == currentX && j == currentY )
							out.append("S");
						else if( i == goalX && j == goalY )
							out.append("G");
						else
							out.append(getLaser(i,j));
				}
				out.append("\n");
			}
			
			return out.toString();
		}

		public static boolean inValidPos(int i, int j){
			if( i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length )
				return true;
			return matrix[i][j] == '#' || matrix[i][j] == '^' || matrix[i][j] == '<' || matrix[i][j] == '>' || matrix[i][j] == 'v'; 
		}


	}
	
	static interface Action {

	}
	
	static class AStarSearch{
		
		private Heuristic heuristic;
		private StateFactory factory;
		
		public AStarSearch(Heuristic heuristic,StateFactory factory) {
			this.heuristic = heuristic;
			this.factory = factory;
		}
		
		public List<Action> search( Problem cube ){
			return doSearch( cube );
		}
		

		public List<Action> doSearch(Problem cube) {
			PriorityQueue<HeuristicNode> q = new PriorityQueue<>();
			Set<State> seen = new TreeSet<>();
			State newState = factory.getState();
			
			newState.setProblem(cube);
			newState.setParent(null);
			newState.setAction(null);
			newState.setCost(0.0);
			newState.setCost(1);
			
			q.add(new HeuristicNode(newState));
			HeuristicNode current = null;
			int expandedNodes = 0;
			
			while( !q.isEmpty() ){
				
				current = q.poll();
				//System.out.println(current.state);
				expandedNodes++;
				seen.add(current.state);			
				for( State st : current.state.successorFunction() ){
					
					if( !seen.contains(st) ){
						if( testGoal(st) ){
							return buildSolution(st);
						}
						
						q.add( new HeuristicNode(st) );
					}
				}
			}
			
			return new LinkedList<>();
		}
		
		protected List<Action> buildSolution(State finalState){
			LinkedList<Action> l = new LinkedList<>();
			
			while( finalState.getParent() != null ){
				l.add(0, finalState.getAction());
				finalState = finalState.getParent();
			}
			return l;
		}
		
		private boolean testGoal(State state){
			return state.isGoal();
		}
		
		class HeuristicNode implements Comparable<HeuristicNode>{
			
			State state;

			public HeuristicNode(State state) {
				this.state = state;
			}
			
			private double f(){
				return heuristic.h(state) + state.getCost();
			}

			@Override
			public int compareTo(HeuristicNode o) {
				/*if( f() == o.f() ) //Breaking tie
					return (int) (heuristic.h(state) - heuristic.h(o.state));*/
				
				return (int) (f() - o.f()) ;
			}
			
			public boolean equals(Object o){
				return compareTo((HeuristicNode)o) == 0;
			}
			
		}

		public String getPresentationName() {
			return "A* - " + heuristic.getName();
		}

	}
	
	static interface Heuristic {
		/*
		 * This should compute the estimate 
		 * cost from state to the GOAL state.
		 */
		double h(State state);
		
		/*
		 * Sets the goalState in order to
		 * compute correctly the h value.
		 */
		void setGoalCube(Problem goal);
		
		String getName();
	}

	static interface Problem {

	}
	
	static interface State extends Comparable<State> {

		public abstract void setProblem(Problem problem);
		public abstract void setParent(State parent);
		public abstract void setAction(Action action);
		public abstract void setCost(double cost);
		public abstract void setDepth(int depth);
		
		public abstract Iterable<State> successorFunction();

		public abstract State getParent();

		public abstract Action getAction();

		public abstract Problem getProblem();

		public abstract double getCost();
		public abstract boolean isGoal();
		public abstract int getDepth();

	}
	
	static interface StateFactory {
		State getState();
	}




}

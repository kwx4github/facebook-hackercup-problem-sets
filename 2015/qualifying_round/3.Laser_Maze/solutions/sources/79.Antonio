#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pb push_back
#define mp make_pair

#define foreach(v,c) for(typeof((c).begin()) v = (c).begin(); v!=(c).end(); ++v)
#define all(c) (c).begin(), (c).end()
#define REP(i,n) for(int i=0; i<n; i++)
#define F(i,L,R) for(int i=L; i<R; i++)

#define printA(a,L,R) F(puf,L,R) cout << a[puf] << (puf==(R-1)?'\n':' ')
#define prinvV(a) printA(a,0,a.size())

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

typedef pair<int,int> ii;
typedef pair<int, ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ld> vld;
typedef complex<int> pt;

#define PI 3.1415926535897932384626
#define INF 2001000009
#define EPS 1e-8
#define MAXN 128
#define MOD 1000000007

pt offs[] = {pt(0,1),pt(1,0),pt(0,-1),pt(-1,0)};

int T,M,N;
char maze[MAXN][MAXN];
int safe[4][MAXN][MAXN];
pt S,G;
int timeto[4][MAXN][MAXN];

int main() { ios_base::sync_with_stdio(0); cin.tie(0);
  cin >> T;
  F(zz,1,T+1) {
    cin >> M >> N;
    REP(i,M+2) REP(j,N+2) maze[i][j]='#';
    F(i,1,M+1) {
      string inny;
      cin >> inny;
      F(j,1,N+1) maze[i][j]=inny[j-1];
    }
    M+=2; N+=2;
    REP(i,M) REP(j,N) REP(k,4) safe[k][i][j]=1;
    REP(i,M) REP(j,N) {
      if (maze[i][j]=='S') S=pt(i,j);
      if (maze[i][j]=='G') G=pt(i,j);
    }
    REP(i,M) REP(j,N) {
      if (maze[i][j]=='S') maze[i][j]='.';
      if (maze[i][j]=='G') maze[i][j]='.';
    }
    REP(i,M) REP(j,N) {
      if (maze[i][j]!='.')
        REP(k,4)
          safe[k][i][j]=0;
    }
    REP(i,M) REP(j,N) {
      int adj = -1;
      if (maze[i][j]=='>') adj=0;
      if (maze[i][j]=='^') adj=3;
      if (maze[i][j]=='<') adj=2;
      if (maze[i][j]=='v') adj=1;
      if (adj==-1) continue;
      REP(t,4) {
        pt curr = pt(i,j);
        curr+=offs[(t+adj)%4];
        while(maze[curr.real()][curr.imag()]=='.') {
          safe[t%4][curr.real()][curr.imag()]=0;
          curr+=offs[(t+adj)%4];
        }
      }
    }

    /*
    if (zz==3)
      REP(t,4) { cout << endl;
        REP(i,M) { cout << endl;
          REP(j,N) cout << safe[t][i][j];
        }
      }
    */

    REP(i,M) REP(j,N) REP(t,4) timeto[t][i][j] = -1;
    /*
    if (safe[0][S.real()][S.imag()]==0) {
      cout << "Case #" << zz << ": impossible" << endl;
      continue;
    }
    */
    timeto[0][S.real()][S.imag()] = 0;
    queue< pair<int,pt> > s;
    s.push(mp(0,S));
    int res = -2;
    while (!s.empty()) {
      pt curr = s.front().se;
      int t = s.front().fi;
      s.pop();
      int time = timeto[t][curr.real()][curr.imag()];
      if(G==curr) {
        res = time; break;
      }
      //      cout << curr << " " << time << endl;
      REP(k,4) {
        if (timeto[(t+1)%4][(curr+offs[k]).real()][(curr+offs[k]).imag()] == -1 && safe[(t+1)%4][(curr+offs[k]).real()][(curr+offs[k]).imag()] == 1) {
          timeto[(t+1)%4][(curr+offs[k]).real()][(curr+offs[k]).imag()] = time+1;
          s.push(mp((t+1)%4,curr+offs[k]));
        }
      }
    }

    /*
    if (zz>=1)
      REP(t,4) { cout << endl;
        REP(i,M) { cout << endl;
          REP(j,N) cout << timeto[t][i][j];
        }
      }
    */

    cout << "Case #" << zz << ": ";
    if (res==-2) cout << "impossible";
    else cout << res;
    cout << endl;
  }
}

#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <numeric>

#define mp make_pair
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;

template<class T>
bool uin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool uax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int H, W;

int hit[4][200][200], dist[4][200][200];
string f[200];

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, -1, 0, 1};

bool pass(int x, int y) {
    if (x < 0 || y < 0 || x >= H || y >= W) return false;
    return f[x][y] == '.' || f[x][y] == 'S' || f[x][y] == 'G';
}

int getdir(int x, int y) {
    if (f[x][y] == 'v') return 0;
    if (f[x][y] == '<') return 1;
    if (f[x][y] == '^') return 2;
    if (f[x][y] == '>') return 3;
    return -1;
}

int compress(int d, int x, int y) {
    return y + W * (x + H * d);
}

void decompress(int c, int &d, int &x, int &y) {
    y = c % W; c /= W;
    x = c % H; c /= H;
    d = c;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;


    int T;
    cin >> T;
    for1(t, T) {
        cin >> H >> W;
        forn(i, H) cin >> f[i];
        int fx, fy, sx, sy;
        forn(d, 4) forn(i, H) forn(j, W) hit[d][i][j] = 0, dist[d][i][j] = 1e9;
        forn(i, H) forn(j, W) {
            if (f[i][j] == 'S') {
                sx = i; sy = j;
            }
            if (f[i][j] == 'G') {
                fx = i; fy = j;
            }
            if (!pass(i, j)) forn(d, 4) hit[d][i][j] = 1;
            int d = getdir(i, j);
            if (d == -1) continue;
            forn(dd, 4) {
                int dir = (d + dd + 1) % 4;
                for (int x = i + dx[dir], y = j + dy[dir]; pass(x, y); x += dx[dir], y += dy[dir]) {
                    hit[dd][x][y] = 1;
                }
            }
        }
        forn(d, 4) forn(i, H) forn(j, W) dist[d][i][j] = 1e9;
        dist[0][sx][sy] = 0;
        vector<int> q;
        q.pb(compress(0, sx, sy));
        int cur = 0;
        while (cur < q.size()) {
            int d, x, y;
            decompress(q[cur++], d, x, y);
            forn(dd, 4) {
                int xx = x + dx[dd], yy = y + dy[dd];
                if (!pass(xx, yy) || hit[d][xx][yy] || dist[(d + 1) % 4][xx][yy] < 1e8) continue;
                dist[(d + 1) % 4][xx][yy] = dist[d][x][y] + 1;
                q.pb(compress((d + 1) % 4, xx, yy));
            }
        }
        int ans = 1e9;
        forn(d, 4) uin(ans, dist[d][fx][fy]);
        cout << "Case #" << t << ": ";
        if (ans > 1e8) cout << "impossible";
        else cout << ans;
        cout << '\n';
    }

#ifdef LOCAL_DEFINE
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}

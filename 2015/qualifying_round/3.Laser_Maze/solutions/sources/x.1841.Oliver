#include <cstdio>
#include <algorithm>
#include <queue>
using namespace std;
#define fo(i,a,b) for (int i = (a); i < (b); i++)
#define mp make_pair
#define INF 999999999

int t, n, m, sx, sy, gx, gy, dst[4][123][123];
char gr[123][123], s[4][123][123];
int dx[] = {0, 1, 0, -1};
int dy[] = {-1, 0, 1, 0};
char dmp[256];
queue<pair<int,pair<int,int> > > q;
bool ins(int y, int x) {
	return y >= 0 && y < n && x >= 0 && x < m;
}
int main() {
	dmp['>'] = 1; dmp['v'] = 2; dmp['<'] = 3;
	freopen("cin.txt", "r", stdin); freopen("cout.txt", "w", stdout);
	scanf("%d", &t);
	fo(tc,1,t+1) {
		scanf("%d %d", &n, &m);
		fo(k,0,4) fo(i,0,n) fo(j,0,m) s[k][i][j] = 0;
		fo(i,0,n) {
			scanf("%s", gr[i]);
			fo(j,0,m) {
				if (gr[i][j]=='S') {
					sy = i; sx = j;
				}
				else if (gr[i][j]=='G') {
					gy = i; gx = j;
				}
				else if (gr[i][j]=='#') fo(k,0,4) s[k][i][j] = 1;
				else if (gr[i][j] != '.') fo(k,0,4) {
					int d = (dmp[gr[i][j]] + k)%4;
					s[k][i][j] = 1;
					int cy = i + dy[d], cx = j + dx[d];
					while (ins(cy, cx) && gr[cy][cx] != '#' && !dmp[gr[cy][cx]] && gr[cy][cx] != '^') {
						s[k][cy][cx] = 1;
						cy += dy[d]; cx += dx[d];
					}
				}
			}
		}
		dst[0][sy][sx] = 0; s[0][sy][sx] = 1;
		q.push(mp(0,mp(sy, sx)));
		while (!q.empty()) {
			int tm = q.front().first, cy = q.front().second.first, cx = q.front().second.second; q.pop();
			//printf("%d %d %d %d\n", tm, cy, cx, dst[tm][cy][cx]);
			fo(i,0,4) {
				int ntm = (tm+1)%4, ny = cy + dy[i], nx = cx + dx[i];
				if (!ins(ny, nx) || s[ntm][ny][nx]) continue;
				s[ntm][ny][nx] = 1; dst[ntm][ny][nx] = dst[tm][cy][cx]+1;
				q.push(mp(ntm,mp(ny,nx)));
			}
		}
		int ans = INF;
		fo(i,0,4) if (dst[i][gy][gx]) ans = min(ans, dst[i][gy][gx]);
		printf("Case #%d: ", tc);
		if (ans==INF) puts("impossible");
		else printf("%d\n", ans);
	}

	return 0;
}
#include <iostream>
#include <vector>
#include <tuple>
#include <queue>
#include <climits>

int H, W;
int ri[4] = {1, 0, -1, 0};
int rj[4] = {0, 1, 0, -1};
char maze[101][101][4];
int dp[101][101][4];

char turn(char s){
	if(s == '^') return '>';
	else if(s == '>') return 'v';
	else if(s == 'v') return '<';
	else if(s == '<') return '^';
	return s;
}

bool valid(int i, int j){
	return (0 <= i && i < H && 0 <= j && j < W);
}

int main(){
	int N;
	std::cin >> N;
	for(int p=1; p<=N; ++p){
		std::cin >> H >> W;
		int si, sj;
		int ei = -1, ej = -1;
		for(int i=0; i<H; ++i){
			for(int j=0; j<W; ++j){
				for(int k=0; k<4; ++k) dp[i][j][k] = INT_MAX;
				std::cin >> maze[i][j][0];
				if(maze[i][j][0] == 'S'){
					si = i, sj = j;
					maze[i][j][0] = '.';
				}
				if(maze[i][j][0] == 'G'){
					ei = i, ej = j;
					maze[i][j][0] = '.';
				}
			}
		}
		for(int k=1; k<4; ++k){
			for(int i=0; i<H; ++i){
				for(int j=0; j<W; ++j){
					maze[i][j][k] = turn(maze[i][j][k-1]);
				}
			}
		}
		for(int k=0; k<4; ++k){
			for(int i=0; i<H; ++i){
				for(int j=0; j<W; ++j){
					int ki = 0, kj = 0;
					if(maze[i][j][k] == '^') ki = -1, kj = 0;
					else if(maze[i][j][k] == '>') ki = 0, kj = 1;
					else if(maze[i][j][k] == 'v') ki = 1, kj = 0;
					else if(maze[i][j][k] == '<') ki = 0, kj = -1;
					if(ki == 0 && kj == 0) continue;
					int pi = i+ki; int pj = j+kj;
					while(valid(pi, pj) && maze[pi][pj][k] == '.'){
						maze[pi][pj][k] = '#';
						pi += ki;
						pj += kj;
					}
				}
			}
		}
		for(int k=0; k<4; ++k){
			for(int i=0; i<H; ++i){
				for(int j=0; j<W; ++j){
					if(maze[i][j][k] == '^') maze[i][j][k] = '#';
					else if(maze[i][j][k] == '>') maze[i][j][k] = '#';
					else if(maze[i][j][k] == 'v') maze[i][j][k] = '#';
					else if(maze[i][j][k] == '<') maze[i][j][k] = '#';
					//std::cout << maze[i][j][k];
				}
				//std::cout << std::endl;
			}
			//std::cout << std::endl;
		}
		std::queue<std::tuple<int, int, int > > q;
		dp[si][sj][0] = 0;
		q.push(std::make_tuple(si, sj, 0));
		while(!q.empty()){
			std::tuple<int, int, int> t = q.front();
			q.pop();
			int pi = std::get<0>(t); int pj = std::get<1>(t);
			int k = std::get<2>(t);
			int s = (dp[pi][pj][k]+1)%4;
			for(int i=0; i<4; ++i){
				int ti = pi+ri[i]; int tj = pj+rj[i];
				if(valid(ti, tj) && dp[ti][tj][s] == INT_MAX && maze[ti][tj][s] != '#'){
					dp[ti][tj][s] = dp[pi][pj][k]+1;
					q.push(std::make_tuple(ti, tj, s));
				}
			}
		}
		int ans = INT_MAX;
		for(int i=0; i<4; ++i){
			ans = std::min(ans, dp[ei][ej][i]);
		}
		if(ans != INT_MAX) std::cout << "Case #" << p << ": " << ans << std::endl;
		else std::cout << "Case #" << p << ": impossible" << std::endl;

	}
}
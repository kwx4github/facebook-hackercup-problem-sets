#include<bits/stdc++.h>
using namespace std;

string blocked[102][102];
char s[102][102];
int N, M;
bool vis[102][102][4];
int dx[] = {0, 0, -1, 1};
int dy[] = {1, -1, 0, 0};

struct node
{
	int r, c, cost;
};

bool isDir(char x)
{
	return x == '>' || x == 'v' || x == '^' || x == '<';
}

int getDirVal(char x)
{
	if(x == '^') return 0;
	if(x == '>') return 1;
	if(x == 'v') return 2;
	return 3;
}

int getTime(int arrowDir, int attackDir)
{
	int ret = 0;
	while(arrowDir != attackDir)
	{
		arrowDir ++;
		arrowDir %= 4;
		ret++;
	}
	return ret;
}

void getLeft(int r, int c)
{
	for(int col = c-1; col>=0; col--)
	{
		if(isDir(s[r][col]))
		{
			int dirVal = getDirVal(s[r][col]);
			blocked[r][c][getTime(dirVal, 1)] = '1';
			break;
		}
		if(s[r][col] == '#') break;
	}
}

void getUp(int r, int c)
{
	for(int row = r-1; row>=0; row--)
	{
		if(isDir(s[row][c]))
		{
			int dirVal = getDirVal(s[row][c]);
			blocked[r][c][getTime(dirVal, 2)] = '1';
			break;
		}
		if(s[row][c] == '#') break;
	}
}

void getRight(int r, int c)
{
	for(int col = c+1; col<M; col++)
	{
		if(isDir(s[r][col]))
		{
			int dirVal = getDirVal(s[r][col]);
			blocked[r][c][getTime(dirVal, 3)] = '1';
			break;
		}
		if(s[r][col] == '#') break;
	}
}

void getDown(int r, int c)
{
	for(int row = r+1; row<N; row++)
	{
		if(isDir(s[row][c]))
		{
			int dirVal = getDirVal(s[row][c]);
			blocked[r][c][getTime(dirVal, 0)] = '1';
			break;
		}
		if(s[row][c] == '#') break;
	}
}

int main()
{
	freopen("laser_maze.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int T, k=0;
	scanf("%d",&T);
	
	while(T--)
	{
		k++;
		memset(vis, 0, sizeof vis);
		
		int sR, sC, gR, gC;
		bool flag = 0;
		
		scanf("%d %d",&N, &M);
		
		for(int i=0; i<N; i++)
			scanf("%s",s[i]);
		
		for(int i=0; i<N; i++)
		{
			for(int j=0; j<M; j++)
			{
				if(s[i][j] == 'S')
					sR = i, sC = j;
				if(s[i][j] == 'G')
					gR = i, gC = j;
					
				blocked[i][j] = "0000";
				
				getLeft(i, j);
				getRight(i, j);
				getDown(i, j);
				getUp(i, j);
			}
		}
		printf("Case #%d: ",k);
		queue<node> q;
		if(blocked[sR][sC][0] == '0')
			q.push(node{sR, sC, 0});
		
		while(!q.empty())
		{
			node cur = q.front();
			q.pop();
			
			if(cur.r == gR && cur.c == gC)
			{
				printf("%d\n",cur.cost);
				flag = 1;
				break;
			}
			
			if(vis[cur.r][cur.c][cur.cost%4]) continue;
			vis[cur.r][cur.c][cur.cost%4] = 1;
			
			for(int i=0; i<4; i++)
			{
				if(cur.r+dx[i]>=0 && cur.r+dx[i]<N && cur.c+dy[i]>=0 && cur.c+dy[i]<M && !vis[cur.r+dx[i]][cur.c+dy[i]][(cur.cost+1)%4] && s[cur.r+dx[i]][cur.c+dy[i]]!='#' && !isDir(s[cur.r+dx[i]][cur.c+dy[i]]) && blocked[cur.r+dx[i]][cur.c+dy[i]][(cur.cost+1)%4] == '0')
					q.push(node{cur.r+dx[i], cur.c+dy[i], cur.cost+1});
			}
		}
		if(!flag) printf("impossible\n");
	}
}

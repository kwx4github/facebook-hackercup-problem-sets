#include <iostream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <malloc.h>
#include <deque>
using namespace std;

#define ILLEGAL_PATH 999

enum {UP=0, DOWN=1, LEFT=2, RIGHT=3, UP3D=4, DOWN3D=5};

struct point
{
    int x;      // x-asis
    int y;      // y-asis
    int z;      // z-asis
    char val;   // map content
    int steps;  // flag, using by function "pathfinder" to check poisition is passed or not
    int laser;
};

point move_to (int direct, point p, vector< vector< vector<point> > > &map)
{
    int x_offset = 0;
    int y_offset = 0;
    int z_offset = 1;

    if (direct == UP) //up
        y_offset = -1;
    else if (direct == DOWN) //down
        y_offset = 1;
    else if (direct == LEFT) //left
        x_offset = -1;
    else if (direct == RIGHT) //right
        x_offset = 1;

    point tp;
    tp.x = p.x+x_offset;
    tp.y = p.y+y_offset;
    tp.z = (p.z+z_offset)%8;
    tp.val = map.at(tp.z).at(tp.y).at(tp.x).val;        
    return tp;
}

char rotate (char c)
{
    if (c == 'v') return '<';
    else if (c == '<') return '^';
    else if (c == '^') return '>';
    else if (c == '>') return 'v';
    else return c;
}

void map_change (vector<vector<point> >&map, int z)
{
    int i, j;
    for (i=0; i<map.size(); i++)
        for (j=0; j<map[i].size(); j++)
        {
            map.at(i).at(j).z = z;
            if (map[i].at(j).laser == 1)
                map.at(i).at(j).val = rotate (map.at(i).at(j).val);
            if (map[i].at(j).val == '|' || map[i].at(j).val == '-')
                map.at(i).at(j).val = '.';
            if (map[i].at(j).val == 's')
                map.at(i).at(j).val = 'S';
            if (map[i].at(j).val == 'g')
                map.at(i).at(j).val = 'G';
            if (map[i].at(j).val == 'x')
                map.at(i).at(j).val = 'X';
        }
}

void laser_change (vector<vector<point> >&map)
{
    int i, j, k;
    for (i=0; i<map.size(); i++)
    {
        for (j=0; j<map[i].size(); j++)
        {
            if (map[i].at(j).val == '>')
            {
                for (k=map[i].at(j).x+1; k<map[i].size(); k++)
                {
                    if (map[i].at(k).val == 'S')
                        map[i].at(k).val = 's'; 
                    else if (map[i].at(k).val == 'G')
                        map[i].at(k).val = 'g';
                    else if (map[i].at(k).val == '.')
                        map[i].at(k).val = '-';
                    else if (map[i].at(k).val == 'X')
                        map[i].at(k).val = 'x';
                    else 
                        break;
                }
            }
            if (map[i].at(j).val == '<')
            {
                for (k=map[i].at(j).x-1; k>0; k--)
                {
                    if (map[i].at(k).val == 'S')
                        map[i].at(k).val = 's'; 
                    else if (map[i].at(k).val == 'G')
                        map[i].at(k).val = 'g';
                    else if (map[i].at(k).val == '.')
                        map[i].at(k).val = '-';
                    else if (map[i].at(k).val == 'X')
                        map[i].at(k).val = 'x';
                    else 
                        break;
                }
            }
            if (map[i].at(j).val == '^')
            {
                for (k=map[i].at(j).y-1; k>0; k--)
                {
                    if (map[k].at(j).val == 'S')
                        map[k].at(j).val = 's'; 
                    else if (map[k].at(j).val == 'G')
                        map[k].at(j).val = 'g';
                    else if (map[k].at(j).val == '.')
                        map[k].at(j).val = '|';
                    else if (map[k].at(j).val == 'X')
                        map[k].at(j).val = 'x';
                    else 
                        break;
                }
            }
            if (map[i].at(j).val == 'v')
            {
                for (k=map[i].at(j).y+1; k<map.size(); k++)
                {
                    if (map[k].at(j).val == 'S')
                        map[k].at(j).val = 's'; 
                    else if (map[k].at(j).val == 'G')
                        map[k].at(j).val = 'g';
                    else if (map[k].at(j).val == '.')
                        map[k].at(j).val = '|';
                    else if (map[k].at(j).val == 'X')
                        map[k].at(j).val = 'x';
                    else 
                        break;
                }
            }
        }
    }
}

void print_map (vector<vector<point> >&map, int round)
{
    int i, j, k;
    for (k=0; k<round; k++)
    {
        for (i=0; i<map.size(); i++)
        {
            for (j=0; j<map[i].size(); j++)
            {
                cout << map[i][j].val;
            }
            cout << endl;
        }
    }
}

int gg = 0;

int pathfinder (point p1, point p2, vector <vector< vector<point> > > map)
{
    deque<point> bfs_queue; 
    //initial
    p1.steps = 0; 
    map.at(p1.z).at(p1.y).at(p1.x).val = 'X'; //already passed   
    bfs_queue.push_back(p1);
    int flag = 0;

    if (gg == 1)
        map[4] = map[0];

    while (!bfs_queue.empty())
    {
        point cur_point = bfs_queue.front();
        bfs_queue.pop_front();
        map.at(cur_point.z).at(cur_point.y).at(cur_point.x).val = 'X'; 
        int i, j;
        point tp[4];

        for (i=0; i<4; i++)       
        {
            tp[i] = move_to (i, cur_point, map);
            if (flag == 0)
            {
                flag = 1;
                gg = 1;
                map[4] = map[0];
            }
            tp[i].steps = cur_point.steps+1;

            if (tp[i].x == p2.x && tp[i].y == p2.y && tp[i].val != 'g') //arrived
                return tp[i].steps;
            else if (tp[i].val=='.' || tp[i].val=='G' || tp[i].val=='S')
            {
                if (tp[i].val != '|' || tp[i].val != '-' || tp[i].val != 's' || tp[i].val != 'g' || tp[i].val != 'x')
                    bfs_queue.push_back (tp[i]);
                else
                    return ILLEGAL_PATH;
            }
        }
    }
    return ILLEGAL_PATH;
}

int main ()
{
    int round;
    cin >> round;
    int kkk;
    for (kkk = 1; kkk <= round; kkk++)
{
// 1. Input Map
    int width;
    int height;
    int i,j;
    vector< vector<point> > map;
    vector< vector< vector<point> > > map3D;
    vector<point>::iterator it;
    scanf ("%d%d", &height, &width);
    char *str = (char*)malloc(sizeof(char)*10000);
    memset (str, '\0', 100);   
    map.resize(height+2);

    deque<point> target_queue;
    point src; src.x=0; src.y=0; src.z=4; src.val='#'; 
    point dst; dst.x=0; dst.y=0; dst.z=4; dst.val='#';
    point cur = src;
    int laser_num = 0;

    for (i=0; i<height+2; i++)
    {
        if (i==0 || i==height+1)
        {
            for (j=0; j<width+2; j++)
            {
                point p;
                p.x = j;
                p.y = i;
                p.z = 4;
                p.val = '#'; 
                map[i].push_back(p);
            }                           
            continue;
        }
        else
        {
            scanf ("%s", str);
            for (j=0; j<width+2; j++)
            {
                point p;
                p.x = j;
                p.y = i;
                p.z = 4;
                
                if (j==0 || j==width+1)
                    p.val = '*'; 
                else
                {
                    p.val = *str;
                    *str++;
                }
                p.laser = 0;
                if (p.val == 'S')
                    src = p;
                else if (p.val == 'G')
                    dst = p;
                else if (p.val == '>' || p.val == 'v' || p.val == '^' || p.val == '<')
                {
                    p.laser = 1;
                    laser_num++;
                }
                map[i].push_back(p);
            }   
        }
    }
    // target_queue = {S, @...@}
    target_queue.push_front (src); 
    // target_queue = {S, @...@, G}
    target_queue.push_back (dst); 

    vector< vector<point> > map_bak(map);
    for (i=0; i<4; i++)
    {    
        map_change (map, i);
        laser_change (map);
    }
    for (i=0; i<4; i++)
    {
        map3D.push_back (map);
        map_change (map, i);
        laser_change (map);
    }
    map3D.push_back (map_bak);
    for (i=0; i<4; i++)
    {
        map_change (map, i+5);
        laser_change (map);
        map3D.push_back (map);
    }
// 2. BFS algorithm to build bfsmap
    int size = target_queue.size();
    int bfsmap[size][size]={0};

    for (i=0; i<size; i++)
    {
        for (j=i; j<size; j++)
        {
            if (i==j)
                bfsmap[i][j] = 0;
            else 
            {
                bfsmap[i][j] = pathfinder (target_queue.at(i), target_queue.at(j), map3D); 
                bfsmap[j][i] = bfsmap[i][j];
            }           
        }      
    }
 
    int ans = ILLEGAL_PATH;
    if (size == 2) //no checkpoint
    {
        if (bfsmap[0][1] == ILLEGAL_PATH)
            cout << "Case #" << kkk << ": " << "impossible" << endl;
        else
            cout << "Case #" << kkk << ": " << bfsmap[0][1] << endl;
    }
}
    
}

/*
    for (int k=0; k<9; k++)
    {
        cout << k+1 << ":\n";
        print_map (map[k], 1);
    }   
*/


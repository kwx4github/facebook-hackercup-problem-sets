#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <sstream>
#include <iostream>
#include <set>
#include <map>
#include <cassert>

#define REP(AA,BB) for(int AA=0; AA<(BB); ++AA)
#define FOR(AA,BB,CC) for(int AA=(BB); AA<(CC); ++AA)
#define FC(AA,BB) for(__typeof((AA).begin()) BB=(AA).begin(); BB!=(AA).end(); ++BB)
#define SZ(AA) ((int)((AA).size()))
#define ALL(AA) (AA).begin(), (AA).end()
#define PB push_back
#define MP make_pair

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PII;
typedef long long LL;
typedef long double LD;

const int MAXN = 110;
char c[MAXN][MAXN], ok[MAXN][MAXN][4];
int dist[MAXN][MAXN][4];

int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
map<char, int> dir;

struct state {
  int x, y, k;
};

bool allowed(char z) {
  return z == '.' || z == 'S' || z == 'G';
}

void test() {
  int n, m; scanf("%d%d", &n, &m);
  REP (i, n) {
    scanf("%s", c[i]);
  }
  REP (i, n) {
    REP (j, m) {
      REP (k, 4) {
        ok[i][j][k] = 1;
      }
    }
  }
  memset(dist, -1, sizeof dist);
  REP (i, n) {
    REP (j, m) {
      if (!dir.count(c[i][j])) {
        continue;
      }
      int s = dir[c[i][j]];
      REP (k, 4) {
        int d = (s + k) % 4;
        for (int x = i + dx[d], y = j + dy[d];
            x >= 0 && x < n && y >= 0 && y < m && allowed(c[x][y]);
            x += dx[d], y += dy[d]) {
          ok[x][y][k] = 0;
        }
      }
    }
  }
  queue<state> Q;
  REP (i, n) {
    REP (j, m) {
      if (c[i][j] == 'S') {
        Q.push({i, j, 0});
        dist[i][j][0] = 0;
        break;
      }
    }
  }
  while (!Q.empty()) {
    state v = Q.front(); Q.pop();
    int D = dist[v.x][v.y][v.k];
    assert(D % 4 == v.k);
    if (c[v.x][v.y] == 'G') {
      printf("%d\n", D);
      return;
    }
    REP (d, 4) {
      int x = v.x + dx[d], y = v.y + dy[d], k = (v.k + 1) % 4;
      if (x < 0 || x >= n || y < 0 || y >= m || !allowed(c[x][y]) || !ok[x][y][k]) {
        continue;
      }
      if (dist[x][y][k] == -1) {
        dist[x][y][k] = D + 1;
        Q.push({x, y, k});
      }
    }
  }
  printf("impossible\n");
}

int main(void) {
  int T; scanf("%d", &T);
  dir['^'] = 0;
  dir['>'] = 1;
  dir['v'] = 2;
  dir['<'] = 3;
  for (int t = 1; t <= T; ++t) {
    printf("Case #%d: ", t);
    test();
  }
  return 0;
}


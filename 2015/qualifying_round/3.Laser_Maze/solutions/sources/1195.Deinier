#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <cctype>
#include <cstdio>
#include <string>
#include <vector>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <numeric>
#include <sstream>
#include <utility>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long int ll;
typedef pair<int, int> par;
#define mp make_pair

#define MAXN 105
#define MOD 1000000009

// Define Variables/
int n, i, j, k, l, a, row, col, cell[MAXN][MAXN][5], sol, movX[4] = { -1, 0, 1, 0 }, movY[4] = { 0, 1, 0, -1 }, nexti, nextj, Fi, Fj, step;
char cad[MAXN][MAXN];
bool check[MAXN][MAXN][4], canMove, temp;
// Define Variables

void MoveDir(int pi, int pj, int dir, int value)
{
	if (dir == 1)
	{
		for (a = pi - 1; a >= 0; a--)
		{
			if (cad[a][pj] == '.' || cad[a][pj] == 'S' || cad[a][pj] == 'G')
			{
				cell[a][pj][value] = 0;
			}
			else
				return;
		}
		return;
	}
	else if (dir == 2)
	{
		for (a = pj + 1; a<col; a++)
		{
			if (cad[pi][a] == '.' || cad[pi][a] == 'S' || cad[pi][a] == 'G')
			{
				cell[pi][a][value] = 0;
			}
			else
				return;
		}
		return;
	}
	else if (dir == 3)
	{
		for (a = pi + 1; a < row; a++)
		{
			if (cad[a][pj] == '.' || cad[a][pj] == 'S' || cad[a][pj] == 'G')
			{
				cell[a][pj][value] = 0;
			}
			else
				return;
		}
		return;
	}
	else
	{
		for (a = pj - 1; a>=0; a--)
		{
			if (cad[pi][a] == '.' || cad[pi][a] == 'S' || cad[pi][a] == 'G')
			{
				cell[pi][a][value] = 0;
			}
			else
				return;
		}
	}
}

bool CanMove(int pstep)
{	
	return (pstep % 4 > 0 && cell[nexti][nextj][pstep % 4]) || (pstep % 4 == 0 && cell[nexti][nextj][4]);
}

class state
{
public:
	int pi;
	int pj;
	int dist;	
	state()
	{
		pi = -1;
		pj = -1;
		dist = -1;		
	}
	state(int px, int py, int pdist)
	{
		pi = px;
		pj = py;
		dist = pdist;
	}
};

queue<state> Q;
state Qfront;

int BFS()
{
	while (!Q.empty())
	{
		Qfront = Q.front();
		Q.pop();

		step = Qfront.dist + 1;				

		for (a = 0; a < 4; a++)
		{
			nexti = Qfront.pi + movX[a];
			nextj = Qfront.pj + movY[a];

			if (nexti >= 0 && nexti < row && nextj >= 0 && nextj < col && cell[nexti][nextj][0])
			{
				canMove = CanMove(step);
				if (!canMove)
					continue;

				if (nexti == Fi && nextj == Fj)
				{
					return step;					
				}

				if (check[nexti][nextj][step % 4])
				{
					Q.push(state(nexti, nextj, step));
					check[nexti][nextj][step % 4] = 0;
				}				
			}
		}
	}

	return -1;
}

int main()
{
	ios::sync_with_stdio(false);

	ifstream input("input.txt");
	ofstream output("output.txt");

	input >> n;

	for (l = 1; l <= n; l++)
	{
		input >> row >> col;
		for (i = 0; i < row; i++)
		{
			input >> cad[i];
		}

		while (!Q.empty())
		{
			Q.pop();
		}

		for (i = 0; i < row; i++)
		{
			for (j = 0; j < col; j++)
			{				
				for (k = 0; k < 4; k++)
				{
					check[i][j][k] = 1;
				}
				
				temp = (cad[i][j] == '.' || cad[i][j] == 'S' || cad[i][j] == 'G');				
				
				if (cad[i][j] == 'S')
				{
					Q.push(state(i,j,0));
					check[i][j][0] = 0;
				}

				if (cad[i][j] == 'G')
				{
					Fi = i;
					Fj = j;
				}				
				
				for (k = 0; k < 5; k++)
				{
					if (temp)
					{
						cell[i][j][k] = 1;
					}
					else
					{
						cell[i][j][k] = 0;
					}
				}				
			}
		}

		for (i = 0; i < row; i++)
		{
			for (j = 0; j < col; j++)
			{
				if (cad[i][j] == '^')
				{
					MoveDir(i, j, 2, 1);
					MoveDir(i, j, 3, 2);
					MoveDir(i, j, 4, 3);
					MoveDir(i, j, 1, 4);
				}
				else if (cad[i][j] == '>')
				{
					MoveDir(i, j, 3, 1);
					MoveDir(i, j, 4, 2);
					MoveDir(i, j, 1, 3);
					MoveDir(i, j, 2, 4);
				}
				else if (cad[i][j] == 'v')
				{
					MoveDir(i, j, 4, 1);
					MoveDir(i, j, 1, 2);
					MoveDir(i, j, 2, 3);
					MoveDir(i, j, 3, 4);
				}
				else if (cad[i][j] == '<')
				{
					MoveDir(i, j, 1, 1);
					MoveDir(i, j, 2, 2);
					MoveDir(i, j, 3, 3);
					MoveDir(i, j, 4, 4);
				}
			}
		}

		sol = BFS();

		output << "Case #" << l <<": ";
		
		if (sol == -1)
			output << "impossible" << endl;
		else
			output << sol << endl;
	}

	input.close();
	output.close();

	return 0;
}
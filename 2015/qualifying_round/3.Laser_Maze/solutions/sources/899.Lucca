//
//  Laser Maze.cpp
//  programas2
//
//  Created by Lucca Siaudzionis on 11/01/15.
//  Copyright (c) 2015 Luccasiau. All rights reserved.
//
//  Facebook Hacker Cup

#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef pair<int, int> pii;

//---------------------------------
#define MAXN 105
#define ff first
#define ss second

int n, m;
int mapa[MAXN][MAXN];
bool forbid[MAXN][MAXN][4];

int small[MAXN][MAXN][4];
pair<pii, int> lista[MAXN*MAXN*4];
//---------------------------------

#define UP    1
#define LEFT  2
#define DOWN  3
#define RIGHT 4

void bloqueia(int i, int j, int dir, int modulo){
    
    forbid[i][j][modulo] = true;
    
    if(dir == UP){
        for(--i;i > 0;i--){
            if(mapa[i][j]) return;
            forbid[i][j][modulo] = true;
        }
    }
    
    if(dir == DOWN){
        for(++i;i <= m;i++){
            if(mapa[i][j]) return;
            forbid[i][j][modulo] = true;
        }
    }
    
    if(dir == LEFT){
        for(--j;j > 0;j--){
            if(mapa[i][j]) return;
            forbid[i][j][modulo] = true;
        }
    }
    
    if(dir == RIGHT){
        for(++j;j <= m;j++){
            if(mapa[i][j]) return;
            forbid[i][j][modulo] = true;
        }
    }
}

int main(){
    
    int casos;
    scanf("%d", &casos);
    
    for(int ins = 1;ins <= casos;ins++){
    
        memset(mapa, -1, sizeof mapa);
        memset(forbid, 0, sizeof forbid);
        
        int si, sj;
        int fi, fj;
        
        scanf("%d %d", &m, &n);
        for(int i = 1;i <= m;i++)
        for(int j = 1;j <= n;j++){
            
            char c;
            scanf(" %c", &c);
            
            if(c == '.') mapa[i][j] = 0;
            if(c == '^') mapa[i][j] = 1;
            if(c == '<') mapa[i][j] = 2;
            if(c == 'v') mapa[i][j] = 3;
            if(c == '>') mapa[i][j] = 4;
            
            if(c == 'S'){
                si = i;
                sj = j;
                mapa[i][j] = 0;
            }
            if(c == 'G'){
                fi = i;
                fj = j;
                mapa[i][j] = 0;
            }
        }

        for(int i = 0;i <= m+1;i++)
        for(int j = 0;j <= n+1;j++){
            
            if(mapa[i][j] == -1) forbid[i][j][0] = forbid[i][j][1] = forbid[i][j][2] = forbid[i][j][3] = true;
            
            if(mapa[i][j] == UP){
                bloqueia(i, j, UP, 0);
                bloqueia(i, j, LEFT, 3);
                bloqueia(i, j, DOWN, 2);
                bloqueia(i, j, RIGHT, 1);
            }
            
            if(mapa[i][j] == LEFT){
                bloqueia(i, j, UP, 1);
                bloqueia(i, j, LEFT, 0);
                bloqueia(i, j, DOWN, 3);
                bloqueia(i, j, RIGHT, 2);
            }
            
            if(mapa[i][j] == DOWN){
                bloqueia(i, j, UP, 2);
                bloqueia(i, j, LEFT, 1);
                bloqueia(i, j, DOWN, 0);
                bloqueia(i, j, RIGHT, 3);
            }
            
            if(mapa[i][j] == RIGHT){
                bloqueia(i, j, UP, 3);
                bloqueia(i, j, LEFT, 2);
                bloqueia(i, j, DOWN, 1);
                bloqueia(i, j, RIGHT, 0);
            }
            
        }
        
        int beg = 0;
        int end = 1;
        
        for(int i = 1;i <= m;i++)
        for(int j = 1;j <= n;j++)
            small[i][j][0] = small[i][j][1] = small[i][j][2] = small[i][j][3] = 999999999;
        
        lista[beg].ss = 0;
        lista[beg].ff.ff = si;
        lista[beg].ff.ss = sj;
        
        small[si][sj][0] = 0;
        
        while(beg < end){
            
            int m = lista[beg].ss;
            int i = lista[beg].ff.ff;
            int j = lista[beg].ff.ss;
            int steps = small[i][j][m];
            
            beg++;
            int prox = (m+1)%4;
            
            if(!forbid[i][j+1][prox] && small[i][j+1][prox] > steps+1){
                
                lista[end].ss = prox;
                lista[end].ff.ff = i;
                lista[end].ff.ss = j+1;
                small[i][j+1][prox] = steps+1;
                
                end++;
            }
            
            if(!forbid[i][j-1][prox] && small[i][j-1][prox] > steps+1){
                
                lista[end].ss = prox;
                lista[end].ff.ff = i;
                lista[end].ff.ss = j-1;
                small[i][j-1][prox] = steps+1;
                
                end++;
            }
            
            if(!forbid[i+1][j][prox] && small[i+1][j][prox] > steps+1){
                
                lista[end].ss = prox;
                lista[end].ff.ss = j;
                lista[end].ff.ff = i+1;
                small[i+1][j][prox] = steps+1;
                
                end++;
            }
            
            if(!forbid[i-1][j][prox] && small[i-1][j][prox] > steps+1){
                
                lista[end].ss = prox;
                lista[end].ff.ss = j;
                lista[end].ff.ff = i-1;
                small[i-1][j][prox] = steps+1;
                
                end++;
            }
        }
        
        int ans = 999999999;
        ans = min(ans, small[fi][fj][0]);
        ans = min(ans, small[fi][fj][1]);
        ans = min(ans, small[fi][fj][2]);
        ans = min(ans, small[fi][fj][3]);
        
        printf("Case #%d: ", ins);
        if(ans < 999999999) printf("%d\n", ans);
        else printf("impossible\n");
    }
    
    return 0;
}
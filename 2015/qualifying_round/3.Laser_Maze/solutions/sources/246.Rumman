#include <sstream>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <complex>
#include <cmath>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <algorithm>
#include <bitset>
#include <list>
#include <string.h>
#include <assert.h>
#include <time.h>

using namespace std;

#define SZ(x) ((int)x.size())
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define clrall(name,val) memset(name,(val),sizeof(name));
#define EPS 10e-9
#define ll long long
#define ull long long unsigned
#define SF scanf
#define PF printf
#define psb(b) push_back((b))
#define ppb() pop_back()
#define oo (1<<28)
#define mp make_pair
#define fs first
#define sc second
#define rep(var,s,n,it) for(var=(s);var<(n);(var)+=it)
#define rev(var,s,n,it) for(var=(n-1);var>(s-1);(var)-=it)
#define Read freopen("C.txt","r",stdin)
#define Write freopen("outC.txt","w",stdout)
#define __ std::ios_base::sync_with_stdio (false)
#define csprint PF("Case #%d: ",++cas)

ll BigMod(ll B,ll P,ll M){     ll R=1; while(P>0)      {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;} /// (B^P)%M

template<class T1> void deb(T1 e1){cout<<e1<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}

///< , ^ , > , v , # , . , S , G -> 0,1,2,3,4,5,6,7
string s="<^>v#.SG";
int id[500];
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};

const int MAX = 105;

int n,m,grid[MAX][MAX];
int dist[MAX][MAX][4];
bool isOk(int x,int y,int step)
{
    int face;
    ///R
    for(int i=y+1;i<m;i++)
    {
        if(grid[x][i]<5)
        {
            if(grid[x][i]<4)
            {
                face=(grid[x][i]+step)&3;
                if(face==0) return false;
            }
            break;
        }
    }
    ///L
    for(int i=y-1;i>-1;i--)
    {
        if(grid[x][i]<5)
        {
            if(grid[x][i]<4)
            {
                face=(grid[x][i]+step)&3;
                if(face==2) return false;
            }
            break;
        }
    }
    ///U
    for(int i=x-1;i>-1;i--)
    {
        if(grid[i][y]<5)
        {
            if(grid[i][y]<4)
            {
                face=(grid[i][y]+step)&3;
                if(face==3) return false;
            }
            break;
        }
    }
    ///D
    for(int i=x+1;i<n;i++)
    {
        if(grid[i][y]<5)
        {
            if(grid[i][y]<4)
            {
                face=(grid[i][y]+step)&3;
                if(face==1) return false;
            }
            break;
        }
    }
    return true;
}

int bfs(int sx,int sy,int ex,int ey)
{
    queue<int> Q;

    dist[sx][sy][0]=0,Q.push(sx),Q.push(sy),Q.push(0);
    int x,y,step,nx,ny,nstep;
    while(!Q.empty())
    {
        x=Q.front();Q.pop();
        y=Q.front();Q.pop();
        step=Q.front();Q.pop();
        for(int i=0;i<4;i++)
        {
            nx=x+dx[i];
            ny=y+dy[i];
            nstep=(step+1)&3;
            if(nx<0||nx==n||ny<0||ny==m||grid[nx][ny]<5) continue;
            if(isOk(nx,ny,nstep) && (dist[nx][ny][nstep]>dist[x][y][step]+1 || dist[nx][ny][nstep]==-1) )
            {
                dist[nx][ny][nstep]=dist[x][y][step]+1;
                Q.push(nx);
                Q.push(ny);
                Q.push(nstep);
            }
        }
    }
    int res=-1;
    for(int i=0;i<4;i++)
    {
        if(dist[ex][ey][i]!=-1)
        {
            if(res==-1) res=dist[ex][ey][i];
            else res=min(res,dist[ex][ey][i]);
        }
    }
    return res;
}

int main()
{
    #ifdef MAHDI
    Read;
    Write;
    #endif // MAHDI
    for(int i=0;i<SZ(s);i++) id[s[i]]=i;
    int test,cas=0;
    int sx,sy,ex,ey;
    char ch;
    SF("%d",&test);
    while(test--)
    {
        SF("%d %d",&n,&m);
        clrall(dist,-1);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                SF(" %c",&ch);
                grid[i][j]=id[ch];
                if(ch=='S') sx=i,sy=j;
                else if(ch=='G') ex=i,ey=j;
            }
        }
        int res=bfs(sx,sy,ex,ey);
        csprint;
        if(res==-1) PF("impossible\n");
        else PF("%d\n",res);
    }
    return 0;
}

/**
5
2 5
##^##
S...G
2 5
##v##
S...G
1 5
S..G<
1 6
S...G<
5 5
S....
.....
.>v..
.^<..
....G
*/











/* Written by Filip Hlasek 2014 */
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstring>

#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define REP(i,b) for(int i=0;i<(b);i++)

using namespace std;

#define MAXN 111
int N, M;
char m[MAXN][MAXN];
int Sx, Sy, Gx, Gy;

#define INF 1111111111
int dist[MAXN][MAXN][4];
bool safe[MAXN][MAXN][4];

const int D[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

bool outside(int x, int y) { return x < 0 || y < 0 || x >= N || y >= M; }

queue<int> qx, qy, qs;
void add(int x, int y, int s) {
  if (outside(x, y)) return;
  if (s && !safe[x][y][s % 4]) return;
  if (dist[x][y][s % 4] != INF) return;
  dist[x][y][s % 4] = s;
  qx.push(x);
  qy.push(y);
  qs.push(s % 4);
}

void solve() {
  REP(i, N) REP(j, M) REP(k, 4) dist[i][j][k] = INF;
  REP(i, N) REP(j, M) REP(s, 4) {
    safe[i][j][s] = (m[i][j] == '.');
    REP(d, 4) {
      REP(k, N + M) {
        int x = i + k * D[d][0], y = j + k * D[d][1];
        if (outside(x, y)) break;
        if ((s + d) % 4 == m[x][y]) {
          // printf("i: %d j: %d s: %d d: %d k: %d\n", i, j, s, d, k);
          safe[i][j][s] = false;
          break;
        }
        if (m[x][y] != '.') break;
      }
    }
  }
  // REP(d, 4) printf("d: %d safe: %d\n", d, (int)safe[1][2][d]);
  while (!qx.empty()) { qx.pop(); qy.pop(); qs.pop(); }
  add(Sx, Sy, 0);
  while (!qx.empty()) {
    int x = qx.front(), y = qy.front(), s = qs.front(); qx.pop(); qy.pop(); qs.pop();
    // printf("x: %d y: %d s: %d dist: %d\n", x, y, s, dist[x][y][s]);
    if (x == Gx && y == Gy) { printf("%d\n", dist[x][y][s]); return; }
    REP(d, 4) add(x + D[d][0], y + D[d][1], dist[x][y][s] + 1);
  }
  printf("impossible\n");
}

int main(int argc, char *argv[]) {
  int T;
  scanf("%d", &T);
  REP(t, T) {
    printf("Case #%d: ", t + 1);
    scanf("%d%d", &N, &M);
    REP(i, N) scanf("%s", m[i]);
    REP(i, N) REP(j, M) {
      if (m[i][j] == 'S') { Sx = i; Sy = j; m[i][j] = '.'; }
      if (m[i][j] == 'G') { Gx = i; Gy = j; m[i][j] = '.'; }
      if (m[i][j] == 'v') m[i][j] = 0;
      if (m[i][j] == '<') m[i][j] = 1;
      if (m[i][j] == '^') m[i][j] = 2;
      if (m[i][j] == '>') m[i][j] = 3;
    }
    solve();
  }
  return 0;
}

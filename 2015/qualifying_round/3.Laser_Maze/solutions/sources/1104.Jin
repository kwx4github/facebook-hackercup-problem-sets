#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int dirToNum(char c) {
	int n = 0;
	switch (c) {
		case '^': n = 0; break;
		case '>': n = 1; break;
		case 'v': n = 2; break;
		case '<': n = 3; break;
		default: break;
	}
	return n;
}

char numToDir(int n) {
	char c = '^';
	switch (n) {
		case 0: c = '^'; break;
		case 1: c = '>'; break;
		case 2: c = 'v'; break;
		case 3: c = '<'; break;
		default: break;
	}
	return c;
}

void turnTurret(char &c, int turn) {
	turn = turn % 4;
	int n = dirToNum(c);
	n = (n + turn) % 4;
	c = numToDir(n);	
}

int isBlock(char cc) {
	if (cc == '#' || cc == '^' || cc == '>' || cc == 'v' || cc == '<') {
		return true;
	} else return false;
}

vector<int> makePos(int l, int x, int y, int s) {
	vector<int> v;
	v.push_back(l);
	v.push_back(x);
	v.push_back(y);
	v.push_back(s);
	return v;
}

bool canPass(vector<vector<char> > mazes[4], int l, int x, int y, vector<vector<bool> > mark[4]) {
	// out of maze
	if (x < 0 || x >= mazes[0].size() || y < 0 || y >= mazes[0][0].size()) return false;

	// blocked
	if (isBlock(mazes[l][x][y])) return false;

	// laser blast
	if (mazes[l][x][y] == '+') return false;

	// visited
	if (mark[l][x][y]) return false;

	return true;
}

int laserMaze(vector<vector<char> > &maze, int x, int y) {
	vector<vector<char> > mazes[4];
	int m = maze.size();
	int n = maze[0].size();
	for (int l = 0; l < 4; l++) {
		// next level
		mazes[l] = maze;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				char &c = mazes[l][i][j];
				if (c == '^' || c == '>' || c == 'v' || c == '<') {
					turnTurret(c, l + 1);
					// fill the maze with laser blast
					if (c == '^') { // fill up
						int u = i - 1;
						while (u >= 0) {
							char &cc = mazes[l][u][j];
							if (isBlock(cc)) {
								break;
							} else {
								cc = '+';
							}
							u--;
						}
					} else if (c == 'v') {
						int u = i + 1;
						while (u < m) {
							char &cc = mazes[l][u][j];
							if (isBlock(cc)) break;
							else cc = '+';
							u++;
						}
					} else if (c == '<') {
						int u = j - 1;
						while (u >= 0) {
							char &cc = mazes[l][i][u];
							if (isBlock(cc)) break;
							else cc = '+';
							u--;
						}
					} else if (c == '>') {
						int u = j + 1;
						while (u < n) {
							char &cc = mazes[l][i][u];
							if (isBlock(cc)) break;
							else cc = '+';
							u++;
						}
					}
				}
			}
		}
	}
	vector<vector<bool> > mark[4];
	// start point
	int l = 3;
	int steps = 0;
	vector<vector<bool> > mk(m, vector<bool>(n, false));
	mark[0] = mark[1] = mark[2] = mark[3] = mk;
	mark[l][x][y] = true;
	queue<vector<int> > q;
	q.push(makePos(l, x, y, 0));
	while (!q.empty()) {
		auto pos = q.front();
		l = pos[0];
		x = pos[1];
		y = pos[2];
		steps = pos[3];
		q.pop();
		l = (l + 1) % 4;
		steps++;
		// up
		if (canPass(mazes, l, x - 1, y, mark)) {
			if (mazes[l][x - 1][y] == 'G') return steps;
			mark[l][x - 1][y] = true;
			q.push(makePos(l, x - 1, y, steps));
		}
		// down
		if (canPass(mazes, l, x + 1, y, mark)) {
			if (mazes[l][x + 1][y] == 'G') return steps;
			mark[l][x + 1][y] = true;
			q.push(makePos(l, x + 1, y, steps));
		}
		// left
		if (canPass(mazes, l, x, y - 1, mark)) {
			if (mazes[l][x][y - 1] == 'G') return steps;
			mark[l][x][y - 1] = true;
			q.push(makePos(l, x, y - 1, steps));
		}
		// right
		if (canPass(mazes, l, x, y + 1, mark)) {
			if (mazes[l][x][y + 1] == 'G') return steps;
			mark[l][x][y + 1] = true;
			q.push(makePos(l, x, y + 1, steps));
		}
	}
	return -1;
}

int main() {
	int t = 0;
	int m = 0, n = 0;
	cin >> t;
	//cout << t << " mazes\n";

	for (int i = 0; i < t; i++) {
		cin >> m >> n;
		vector<vector<char> > maze(m, vector<char>(n, ' '));
		//cout << i << " maze: " << m << ", " << n << endl;
		int x = 0, y = 0;
		for (int j = 0; j < m; j++) {
			for (int k = 0; k < n; k++) {
				cin >> maze[j][k];
				if (maze[j][k] == 'S') {
					x = j; y = k;
				}
			}
		}
		//cout << i << " maze: " << m << ", " << n << endl;		
		int s = laserMaze(maze, x, y);
		if (s > 0) {
			cout << "Case #" << i + 1 << ": " << s << endl;			
		} else {
			cout << "Case #" << i + 1 << ": impossible\n";
		}
	}
	return 0;
}
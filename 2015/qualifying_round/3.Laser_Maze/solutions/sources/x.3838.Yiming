#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <ctime> 

using namespace std;

#define _int64 long long

int neigh[4][2]={{0,1},{1,0},{0,-1},{-1,0}};
char a[110][110];
char ma[4][110][110];
int d[4][110][110];
int used[4][110][110];


int main()
{
  vector<pair<int,pair<int,int> > > q;
  int i,j,k,l,t,m,n,sx,sy,ex,ey,x,y,ans,dire,z;
  scanf("%d",&t);
  for (l=0;l<t;l++)
  {
    scanf("%d%d",&m,&n);
    for (i=0;i<m;i++)
      scanf("%s",a[i]);
    memset(ma,0,sizeof(ma));
    for (i=0;i<m;i++)
      for (j=0;j<n;j++)
      {
        switch (a[i][j])
        {
          case 'S':
            sx=i;sy=j;
            break;
          case 'G':
            ex=i;ey=j;
            break;
          case '.':
            break;
          case '#':
            for (k=0;k<4;k++)
              ma[k][i][j]=1;
            break;
          default:
            switch (a[i][j])
            {
              case '^':dire=3;break;
              case '>':dire=0;break;
              case 'v':dire=1;break;
              case '<':dire=2;break;
            }
            for (k=0;k<4;k++)
            {
              x=i;y=j;
              while ((x>=0)&&(x<m)&&(y>=0)&&(y<n))
              {
                ma[k][x][y]=1;
                x+=neigh[dire][0];
                y+=neigh[dire][1];
              }
              dire++;
              dire%=4;
            }
        }
      }
    q.clear();
    q.push_back(make_pair(0,make_pair(sx,sy)));
    memset(used,0,sizeof(used));
    used[0][sx][sy]=1;
    memset(d,-1,sizeof(d));
    d[0][sx][sy]=0;
    for (i=0;i<q.size();i++)
    {
      z=d[q[i].first][q[i].second.first][q[i].second.second];
      dire=(q[i].first+1)%4;
      for (k=0;k<4;k++)
      {
        x=q[i].second.first+neigh[k][0];
        y=q[i].second.second+neigh[k][1];
        if ((x>=0)&&(x<m)&&(y>=0)&&(y<n)&&(used[dire][x][y]==0)&&(ma[dire][x][y]==0))
        {
          used[dire][x][y]=1;
          d[dire][x][y]=z+1;
          q.push_back(make_pair(dire,make_pair(x,y)));
        }
      }
    }
    ans=2000000000;
    for (i=0;i<4;i++)
    {
      if (used[i][ex][ey]!=0)
      {
        if (d[i][ex][ey]<ans) ans=d[i][ex][ey];
      }
    }
    if (ans==2000000000) printf("Case #%d: impossible\n",l+1);
    else printf("Case #%d: %d\n",l+1,ans);
  }
}

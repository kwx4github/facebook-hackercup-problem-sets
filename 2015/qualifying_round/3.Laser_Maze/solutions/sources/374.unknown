#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int maxm = 110;
const int maxn = 110;

int m,n;
char field[maxm][maxn];
bool blockage[4][maxm][maxn];
bool mark[4][maxm][maxn];

int goal_i, goal_j;
int start_i, start_j;

int iadd[] = {0, 1, 0, -1};
int jadd[] = {1, 0, -1, 0};

int isvalid(int i, int j) {
	return i>=0 && j>=0 && i<m && j<n;
}

int iswall(char c) {
	return c=='#' || c=='>' || c=='v' || c=='<' || c=='^';
}

struct state {
	int i, j, len;
	state(int i, int j, int len) : i(i), j(j), len(len) {}
};

int bfs () {
	vector<state> queue;
	queue.push_back(state(start_i, start_j, 0));
	mark[0][start_i][start_j] = 1;
	int start = 0;
	while( start < queue.size() ) {
		state cur = queue[start];
		for (int h=0; h<4; h++) {
			state next = cur;
			next.i += iadd[h];
			next.j += jadd[h];
				next.len += 1;
			if ( isvalid(next.i, next.j)
				 && !mark[next.len%4][next.i][next.j]
				 && !blockage[next.len%4][next.i][next.j]) {
				queue.push_back(next);
				mark[next.len%4][next.i][next.j] = 1;
				if (next.i == goal_i && next.j == goal_j)
					return next.len;
			}
		}
		start++;
	}
	return -1;
}

int main() {
	int t;
	cin >> t;
	for (int tn=0; tn<t; tn++) {
		cin >> m >> n;
		memset(blockage, 0, sizeof blockage);
		memset(mark, 0, sizeof mark);
		for (int i=0; i<m; i++) {
			for(int j=0; j<n; j++) {
				cin >> field[i][j];
			}
		}
		for(int i=0; i<m; i++) {
			for (int j=0; j<n; j++) {
				if (field[i][j] == 'G') {
					goal_i = i;
					goal_j = j;
				} else if (field[i][j] == 'S') {
					start_i = i;
					start_j = j;
				}
			}
		}
		for(int h=0; h<4; h++) {
			for (int i=0; i<m ;i++) {
				for(int j=0; j<n ;j++) {
					if (field[i][j] == '#') {
						blockage[h][i][j] = 1;
					} else if(field[i][j] == '>') {
						int ii = i;
						int jj = j;
						do {
							blockage[h][ii][jj] = 1;
							ii += iadd[(h)%4];
							jj += jadd[(h)%4];
						} while (isvalid(ii, jj) && !iswall(field[ii][jj]));
					} else if(field[i][j] == 'v') {
						int ii = i;
						int jj = j;
						do {
							blockage[h][ii][jj] = 1;
							ii += iadd[(h+1)%4];
							jj += jadd[(h+1)%4];
						} while (isvalid(ii, jj) && !iswall(field[ii][jj]));
					} else if(field[i][j] == '<') {
						int ii = i;
						int jj = j;
						do {
							blockage[h][ii][jj] = 1;
							ii += iadd[(h+2)%4];
							jj += jadd[(h+2)%4];
						} while (isvalid(ii, jj) && !iswall(field[ii][jj]));
					} else if(field[i][j] == '^') {
						int ii = i;
						int jj = j;
						do {
							blockage[h][ii][jj] = 1;
							ii += iadd[(h+3)%4];
							jj += jadd[(h+3)%4];
						} while (isvalid(ii, jj) && !iswall(field[ii][jj]));
					}
				}
			}
		}
		int ans = bfs();
		if (ans == -1) {
			cout << "Case #" << tn+1 << ": impossible" << endl;
		} else {
			cout << "Case #" << tn+1 << ": " << ans << endl;
		}
	}
}
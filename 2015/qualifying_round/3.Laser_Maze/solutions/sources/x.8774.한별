#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <vector>
#include <set>
#include <string>
#include <algorithm>
#include <sstream>
#include <stack>
#include <queue>
using namespace std;

vector<string> M[4];

int main()
{
	int T;
	cin >> T;
	
	for (int t = 1; t <= T; ++t) {
		int Y, X;
		cin >> Y >> X;
		M[0].clear();
		
		for (int i = 0; i < Y; ++i) {
			string x;
			cin >> x;
			M[0].push_back(x);
		}
		
		int sx, sy, gx, gy;
		for (int y = 0; y < Y; ++y) {
			for (int x = 0; x < X; ++x) {
				if (M[0][y][x] == 'S') {
					sy = y;
					sx = x;
				}
				if (M[0][y][x] == 'G') {
					gy = y;
					gx = x;
				}
			}
		}
		
		for (int i = 1; i < 4; ++i) {
			M[i] = M[i - 1];
			for (int y = 0; y < Y; ++y) {
				for (int x = 0; x < X; ++x) {
					if (M[i][y][x] == '^') M[i][y][x] = '>';
					else if (M[i][y][x] == '>') M[i][y][x] = 'v';
					else if (M[i][y][x] == 'v') M[i][y][x] = '<';
					else if (M[i][y][x] == '<') M[i][y][x] = '^';
				}
			}
		}
		for (int i = 0; i < 4; ++i) {
			for (int y = 0; y < Y; ++y) {
				for (int x = 0; x < X; ++x) {
					if (M[i][y][x] == '^') {
						for (int yy = y - 1; yy >= 0; --yy) {
							if (M[i][yy][x] != '.' && M[i][yy][x] != 'G' && M[i][yy][x] != 'S') break;
							M[i][yy][x] = 'X';
						}
					}
					if (M[i][y][x] == 'v') {
						for (int yy = y + 1; yy < Y; ++yy) {
							if (M[i][yy][x] != '.' && M[i][yy][x] != 'G' && M[i][yy][x] != 'S') break;
							M[i][yy][x] = 'X';
						}
					}
					if (M[i][y][x] == '<') {
						for (int xx = x - 1; xx >= 0; --xx) {
							if (M[i][y][xx] != '.' && M[i][y][xx] != 'G' && M[i][y][xx] != 'S') break;
							M[i][y][xx] = 'X';
						}
					}
					if (M[i][y][x] == '>') {
						for (int xx = x + 1; xx < X; ++xx) {
							if (M[i][y][xx] != '.' && M[i][y][xx] != 'G' && M[i][y][xx] != 'S') break;
							M[i][y][xx] = 'X';
						}
					}
				}
			}
		}
		
		set<int> visit;
		queue<vector<int> > q;
		bool found = false;
		int ans = -1;
		
		while (!q.empty() ) q.pop();
		visit.clear();
		
		vector<int> st(3, 0);
		st[0] = 0;
		st[1] = sy;
		st[2] = sx;
		q.push(st);
		while (!q.empty() ) {
			vector<int> a = q.front();
			q.pop();
			int nt, ny, nx;
			nt = a[0];
			ny = a[1];
			nx = a[2];
			
			if (ny < 0 || ny >= Y || nx < 0 || nx >= X) continue;
			if (nt > 0 && M[a[0] % 4][ny][nx] != '.' && M[a[0] % 4][ny][nx] != 'S' && M[a[0] % 4][ny][nx] != 'G') continue;
			
			if (ny == gy && nx == gx) {
				found = true;
				ans = nt;
				break;
			}
			int v = (a[0] % 4) * 200 * 200 + ny * 200 + nx;
			if (visit.find(v) != visit.end() ) continue;
			visit.insert(v);
			
			vector<int> b = a;
			b[0] = b[0] + 1;
			b[1] = a[1];
			b[2] = a[2] + 1;
			q.push(b);
			b[2] = a[2] - 1;
			q.push(b);
			b[2] = a[2];
			b[1] = a[1] + 1;
			q.push(b);
			b[1] = a[1] - 1;
			q.push(b);
		}
		
		if (found) printf("Case #%d: %d\n", t, ans);
		else printf("Case #%d: impossible\n", t);
	}
	
	return 0;
}

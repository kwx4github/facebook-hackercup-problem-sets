#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct Turret
{
	int row, col, dir;
};

struct Position
{
	int row, col,dir;
};

int moveRow[5] = {0,-1,0,1};
int moveCol[5] = {-1,0,1,0};

char turretSymbol[5] = "<^>v";

int visit[5][120][120];
Position startPos;
Position endPos;

int r,c;
char s[120][120];
bool wall[5][120][120];
vector<Turret> turrets;

int turretDirrection(char ch)
{	
	for(int i = 0 ; i < 4; i++)
	{
		if(turretSymbol[i] == ch) return i;
	}	
	return -1;
}

void readInput()
{
	turrets.clear();
	scanf("%d %d",&r,&c);
	gets(s[0]);
	for(int i = 0 ; i < r ; i++)
	{
		gets(s[i]);
		for(int j = 0; j < c; j++)
		{
			int x = turretDirrection(s[i][j]);
			if(x != -1) 
			{
				Turret turret;
				turret.row = i;
				turret.col = j;
				turret.dir = x;
				turrets.push_back(turret);
			}
			if(s[i][j] == 'S') {
				startPos.row = i;
				startPos.col = j;
				startPos.dir = 0;
			}
			if(s[i][j] == 'G'){
				endPos.row = i;
				endPos.col = j;
				endPos.dir = 0;
			}
		}
	}
}

void generateWall(int dir)
{
	for(int i = 0; i < r; i++)
	{
		for(int j = 0; j < c; j++)
		{
			wall[dir][i][j] = (s[i][j] == '#');
		}
	}
	for(int i =0 ;i < (int)turrets.size(); i++)
	{
		int row = turrets[i].row,col = turrets[i].col;
		wall[dir][row][col] = true;
		int dir2 = (turrets[i].dir + dir) % 4;
		while(true)
		{			
			row += moveRow[dir2];
			col += moveCol[dir2];			
			if(row < 0 || row >= r || col < 0 || col >= c) break;
			if(s[row][col] == '#' || turretDirrection(s[row][col]) != -1) break;						
			wall[dir][row][col] = true;
		}		
	}
}

void printWall()
{
	for(int k = 0; k < 4; k++)
	{
		for(int i = 0; i < r; i++)
		{
			for(int j = 0 ;j < c ; j++)
			{
				printf("%d",wall[k][i][j]);
			}
			puts("");
		}
		puts("=========================");
	}
}

int bfs()
{
	memset(visit,-1,sizeof(visit));
	queue<Position> q;
	q.push(startPos);
	visit[startPos.dir][startPos.row][startPos.col] = 0;
	while(!q.empty())
	{
		Position pos = q.front();
		q.pop();
		//cerr << pos.row << " " << pos.col << endl;
		if(pos.row == endPos.row && pos.col == endPos.col) return visit[pos.dir][pos.row][pos.col];
		for(int dir = 0; dir < 4; dir++)
		{
			int row2 = pos.row + moveRow[dir];
			int col2 = pos.col + moveCol[dir];
			int dir2 = (pos.dir + 1) % 4;			
			if(row2 < 0 || row2 >= r || col2 < 0 || col2 >= c) continue;			
			if(wall[dir2][row2][col2]) continue;			
			if(visit[dir2][row2][col2] != -1) continue;
			visit[dir2][row2][col2] = visit[pos.dir][pos.row][pos.col]+1;
			Position pos2;
			pos2.row = row2;
			pos2.col = col2;
			pos2.dir = dir2;
			q.push(pos2);
		}
	}
	return -1;
}

void solve(int ca)
{
	for(int i = 0; i < 4; i++) generateWall(i);
	//printWall();	
	int ans = bfs();
	printf("Case #%d: ",ca);
	if(ans == -1) puts("impossible");
	else printf("%d\n",ans);
}

int main()
{
	int t;
	scanf("%d",&t);
	for(int ca = 1; ca <= t ; ca++)
	{
		readInput();
		solve(ca);
	}
	return 0;
}

#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;

const int MAXN = 110;
const int INF  = 1000000000;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

int n, m, sx, sy, ex, ey;
char in[MAXN][MAXN];

map<char, int> tbl =
{
  {'^', 0}, {'>',1}, {'v',2}, {'<',3}
};

bool can[MAXN][MAXN][4];
bool vis[MAXN][MAXN][4];
int dis[MAXN][MAXN][4];

inline void chk(int i, int j)
{
  fill(vis[i][j], vis[i][j]+4, 0);
  if(in[i][j] == '#' || tbl.count(in[i][j]))
  {
    fill(can[i][j], can[i][j]+4, 0);
    return ;
  }
  for(int k = 0; k < 4; k++)
  {
    can[i][j][k] = 1;
    for(int l = 0; l < 4; l++)
    {
      int px = i, py = j;
      while(1)
      {
        if(px < 0 || n < px
        || py < 0 || m < py
        || in[px][py] == '#')
          break ;
        //printf("px %d py %d %c\n", px, py, in[px][py]);
        if(tbl.count(in[px][py]))
        {
          if(((tbl[in[px][py]] + k) % 4) == ((l + 2) % 4))
            can[i][j][k] = 0;
          break ;
        }
        px = px + dx[l];
        py = py + dy[l];
      }
    }
    //printf("can %d %d %d %s\n", i, j, k, can[i][j][k]?"OK":"NO");
  }

}

int main()
{
  int tc;scanf("%d", &tc);
  for(int _ = 1; _ <= tc; _++)
  {printf("Case #%d: ", _);
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; i++) scanf("%s", in[i]+1);
    for(int i = 1; i <= n; i++)
      for(int j = 1; j <= m; j++)
      {
        if(in[i][j] == 'S') sx = i, sy = j;
        else if(in[i][j] == 'G') ex = i, ey = j;
        fill(dis[i][j], dis[i][j] + 4, INF);
      }
    dis[sx][sy][0] = 0;

    for(int i = 1; i <= n; i++)
      for(int j = 1; j <= m; j++)
        chk(i, j);
    can[sx][sy][0] = 1;

    queue<tuple<int, int, int>> qu;
    qu.push(make_tuple(sx, sy, 0));
    while(qu.size())
    {
      int px, py, pt;
      tie(px, py, pt) = qu.front();qu.pop();
      //printf("now %d %d %d %s\n", px, py, pt, can[px][py][pt]?"OK":"NO");
      int pd = dis[px][py][pt];
      if(!can[px][py][pt])
      {
        dis[px][py][pt] = INF;
        continue ;
      }
      for(int k = 0; k < 4; k++)
      {
        int nx = px + dx[k];
        int ny = py + dy[k];
        int nt = (pt + 1) % 4;
        if(1 <= nx && nx <= n
        && 1 <= ny && ny <= m
        && can[nx][ny][nt]
        && !vis[nx][ny][nt])
        {
          vis[nx][ny][nt] = 1;
          dis[nx][ny][nt] = pd + 1;
          qu.push(make_tuple(nx, ny, nt));
        }
      }
    }
    int ans = INF;
    for(int k = 0; k < 4; k++)
      ans = min(ans, dis[ex][ey][k]);
    if(ans >= INF) printf("impossible\n");
    else printf("%d\n", ans);
  }
}


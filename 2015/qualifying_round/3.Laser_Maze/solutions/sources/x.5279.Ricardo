import java.util.*;

public class C {

  public static final int LEFT  = 0,
                          DOWN  = 1,
                          RIGHT = 2,
                          UP    = 3;

  public static int n, m, initi, initj, metai, metaj;

  public static char[][] mapa = new char[101][101];

  public static boolean [][][] peligro   = new boolean[101][101][4],
                               visitados = new boolean[101][101][4];

  public static int[] x = new int[] {0 , -1, 0, 1},
                      y = new int[] {-1, 0 , 1, 0};

  public static void main(String [] args){
    
    Scanner S = new Scanner(System.in);
    int t = S.nextInt();
    
    for (int c = 1 ; c <= t ; c++) {
      n = S.nextInt();
      m = S.nextInt();
      for (int i = 0 ; i < n ; i++)
        mapa[i] = S.next().toCharArray();
      // Preprocesando peligro.
      for (int i = 0 ; i < n ; i++)
        for (int j = 0 ; j < m ; j++)
          for (int k = 0 ; k < 4 ; k++)
            peligro[i][j][k] = visitados[i][j][k] = false;
      for (int i = 0 ; i < n ; i++)
        for (int j = 0 ; j < m ; j++) {
          if (mapa[i][j] == 'S') {
            initi = i;
            initj = j;
            mapa[i][j] = '.';
          } else if (mapa[i][j] == 'G') {
            metai = i;
            metaj = j;
            mapa[i][j] = '.';
          }
          int despl = -1;
          switch (mapa[i][j]) {
            case '<':
              despl = LEFT;
              break;
            case '^':
              despl = UP;
              break;
            case '>':
              despl = RIGHT;
              break;
            case 'v':
              despl = DOWN;
              break;
          }
          if (despl != -1) {
            for (int k = 0 ; k < 4 ; k++) {
              for (int ni = i + x[k], nj = j + y[k] ;
                      ni < n && nj < m && ni >= 0 && nj >= 0 &&
                      mapa[ni][nj] == '.';
                      ni += x[k], nj += y[k]) {
                peligro[ni][nj][(k + despl) & 3] = true;
              }
            }
          }
        }
      /* Imprimiendo el peligro
      for (int k = 0 ; k < 4 ; k++) {
        System.out.println("Estatus = " + k + ":\n");
        for (int i = 0 ; i < n ; i++) {
          System.out.print(peligro[i][0][k] ? 'X' : '.');
          for (int j = 1 ; j < m ; j++) {
            System.out.print(" " + (peligro[i][j][k] ? 'X' : '.'));
          }
          System.out.println();
        }
        System.out.println();
      }
      */
      // BFS.
      LinkedList<Nodo> cola = new LinkedList<Nodo>();
      cola.addLast(new Nodo(initi-1, initj  , 1, 1));
      cola.addLast(new Nodo(initi  , initj-1, 1, 1));
      cola.addLast(new Nodo(initi+1, initj  , 1, 1));
      cola.addLast(new Nodo(initi  , initj+1, 1, 1));
      boolean encontre = false;
      while (!cola.isEmpty()) {
        Nodo actual = cola.removeFirst();
        if (actual.i < 0 || actual.i >= n || actual.j < 0 || actual.j >= m ||
            mapa[actual.i][actual.j] != '.' ||
            visitados[actual.i][actual.j][actual.estatus] ||
            peligro[actual.i][actual.j][actual.estatus])
          continue;
        if (actual.i == metai && actual.j == metaj) {
          System.out.println("Case #" + c + ": " + actual.pasos);
          encontre = true;
          break;
        }
        visitados[actual.i][actual.j][actual.estatus] = true;
        if (actual.i > 0 && !visitados[actual.i-1][actual.j][(actual.estatus+1) & 3])
          cola.addLast(new Nodo(actual.i-1    , actual.j,
                                actual.pasos+1, (actual.estatus+1) & 3));
        if (actual.j > 0 && !visitados[actual.i][actual.j-1][(actual.estatus+1) & 3])
          cola.addLast(new Nodo(actual.i      , actual.j-1,
                                actual.pasos+1, (actual.estatus+1) & 3));
        if (actual.i < n-1 && !visitados[actual.i+1][actual.j][(actual.estatus+1) & 3])
          cola.addLast(new Nodo(actual.i+1    , actual.j,
                                actual.pasos+1, (actual.estatus+1) & 3));
        if (actual.j < m-1 && !visitados[actual.i][actual.j+1][(actual.estatus+1) & 3])
          cola.addLast(new Nodo(actual.i      , actual.j+1,
                                actual.pasos+1, (actual.estatus+1) & 3));
      }
      if (!encontre)
        System.out.println("Case #" + c + ": impossible");
    }
    
  }

}

class Nodo {

  int i, j, pasos, estatus;

  public Nodo(int i, int j, int pasos, int estatus) {
    
    this.i = i;
    this.j = j;
    this.pasos = pasos;
    this.estatus = estatus;
    
  }

}
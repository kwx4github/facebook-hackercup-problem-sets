#include <bits/stdc++.h>
#include <fcntl.h>
#include <unistd.h>

using namespace std;

/*** START OF TEMPLATE CODE ***/

typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<double> pnt;
typedef pair<int, int> pii;

#define RA(x) begin(x), end(x)
#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)
#define SZ(x) ((int) (x).size())

template<class T>
vector<T> splitstr(const string &s)
{
    istringstream in(s);
    vector<T> out;
    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));
    return out;
}

template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }

static void redirect(int argc, const char **argv)
{
    ios::sync_with_stdio(false);

    if (argc > 1)
    {
        int fd = open(argv[1], O_RDONLY);
        if (fd == -1) { perror(argv[1]); exit(1); }
        if (-1 == dup2(fd, 0)) { perror(argv[1]); exit(1); }
        if (-1 == close(fd)) { perror(argv[1]); exit(1); }
    }

    if (argc > 2)
    {
        int fd = open(argv[2], O_WRONLY | O_CREAT, 0666);
        if (fd == -1) { perror(argv[2]); exit(1); }
        if (-1 == dup2(fd, 1)) { perror(argv[2]); exit(1); }
        if (-1 == close(fd)) { perror(argv[2]); exit(1); }
    }

    cin.exceptions(ios::failbit | ios::badbit);
}

/*** END OF TEMPLATE CODE ***/

static const int dr[4] = {-1, 0, 1, 0};
static const int dc[4] = {0, 1, 0, -1};

int main(int argc, const char **argv)
{
    map<char, int> dir_map;
    dir_map['^'] = 0;
    dir_map['>'] = 1;
    dir_map['v'] = 2;
    dir_map['<'] = 3;
    redirect(argc, argv);
    set<char> empty_types{'.', 'S', 'G'};

    int cases;
    cin >> cases;
    for (int cas = 0; cas < cases; cas++)
    {
        int R, C;
        cin >> R >> C;
        vector<string> basemaze(R);
        for (int i = 0; i < R; i++)
            cin >> basemaze[i];
        vector<vi> maze(R, vi(C, 0));
        int sr = -1, sc = -1, gr = -1, gc = -1;
        for (int i = 0; i < R; i++)
            for (int j = 0; j < C; j++)
                switch (basemaze[i][j])
                {
                case '.':
                    break;
                case 'S':
                    sr = i;
                    sc = j;
                    break;
                case 'G':
                    gr = i;
                    gc = j;
                    break;
                case '#':
                    maze[i][j] = 15;
                    break;
                default:
                    {
                        maze[i][j] = 15;
                        int dir0 = dir_map[basemaze[i][j]];
                        for (int phase = 0; phase < 4; phase++)
                        {
                            int dir = (dir0 + phase) & 3;
                            int r = i + dr[dir];
                            int c = j + dc[dir];
                            while (r >= 0 && r < R && c >= 0 && c < C
                                   && empty_types.count(basemaze[r][c]))
                            {
                                maze[r][c] |= 1 << phase;
                                r += dr[dir];
                                c += dc[dir];
                            }
                        }
                    }
                }

        vector<vector<array<int, 4>>> dist(R, vector<array<int, 4>>(C));
        for (int i = 0; i < R; i++)
            for (int j = 0; j < C; j++)
                for (int p = 0; p < 4; p++)
                    dist[i][j][p] = INT_MAX;

        dist[sr][sc][0] = 0;
        queue<int> q;
        q.push(sr);
        q.push(sc);
        q.push(0);
        while (!q.empty())
        {
            int r = q.front(); q.pop();
            int c = q.front(); q.pop();
            int p = q.front(); q.pop();
            int d1 = dist[r][c][p] + 1;
            for (int d = 0; d < 4; d++)
            {
                int r2 = r + dr[d];
                int c2 = c + dc[d];
                int p2 = (p + 1) & 3;
                if (r2 >= 0 && r2 < R && c2 >= 0 && c2 < C
                    && !(maze[r2][c2] & (1 << p2))
                    && d1 < dist[r2][c2][p2])
                {
                    dist[r2][c2][p2] = d1;
                    q.push(r2);
                    q.push(c2);
                    q.push(p2);
                }
            }
        }

        int ans = INT_MAX;
        for (int p = 0; p < 4; p++)
            ans = min(ans, dist[gr][gc][p]);

        cout << "Case #" << cas + 1 << ": ";
        if (ans == INT_MAX)
            cout << "impossible\n";
        else
            cout << ans << "\n";
    }
    return 0;
}

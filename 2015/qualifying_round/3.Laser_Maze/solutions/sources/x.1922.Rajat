#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <sstream>
#include <utility>
#include <functional>
#include <numeric>
#include <stack>
#include <queue>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#include <list>
#include <memory.h>

using namespace std;

int n, m;
char g[123][123][5];
bool seen[123][123][5];
int dist[123][123];
int steps;
pair< int, int > start, end;
const int dx[] = {-1, 0, 0, 1};
const int dy[] = {0, -1, 1, 0};

bool range(int x, int y) {
  if( (x >= 1 && x <= n) && (y >= 1 && y <= m) ) return true;
  else return false;
}

void init() {
  memset(g, '.', sizeof g);
  memset(seen, false, sizeof seen);
  memset(dist, 0, sizeof dist);
  steps = 0;
}

inline bool isLaser(char ch) {
  if(ch == '^' || ch == '<' || ch == '>' || ch == 'v') return true;
  else return false;
}

void print(int x = 0) {
  for(int i = 1; i <= n; i++) {
    for(int j = 1; j <= m; j++) {
      cout << g[i][j][x];
    }
    cout << endl;
  }
  cout << endl;
}

void down(int x, int y, int level) {
  for(int i = x; i <= n; i++) {
    if(g[i][y][level] == '#') return;
    else g[i][y][level] = '#';
  }
}

void up(int x, int y, int level) {
  for(int i = x; i >= 1; i--) {
    if(g[i][y][level] == '#') return;
    else g[i][y][level] = '#';
  }
}

void right(int x, int y, int level) {
  for(int j = y; j <= m; j++) {
    if(g[x][j][level] == '#') return;
    else g[x][j][level] = '#';
  }
}

void left(int x, int y, int level) {
  for(int j = y; j >= 1; j--) {
    if(g[x][j][level] == '#') return;
    else g[x][j][level] = '#';
  }
}

void color(int level) {
  for(int i = 1; i <= n; i++) {
    for(int j = 1; j <= m; j++) {
      if(g[i][j][level] == 'v') {
        down(i, j, level);
      }
      else if(g[i][j][level] == '^') {
        up(i, j, level);
      }
      else if(g[i][j][level] == '>') {
        right(i, j, level);
      }
      else if(g[i][j][level] == '<') {
        left(i, j, level);
      }
    }
  }
}

void bfs() {
  queue< pair< int, int > > q;
  q.push( start );
  
  while(!q.empty()) {
    pair< int, int > v = q.front();
    q.pop();

    int l = (dist[v.first][v.second] + 1) % 4;
    
    for(int i = 0; i < 4; i++) {
      int x = v.first + dx[i];
      int y = v.second + dy[i];
      
      if(!range(x, y) || g[x][y][l] == '#') continue;
      if(seen[x][y][l]) continue;

      // dist[x][y] = g[x][y][l] == '#' ? 0 : dist[v.first][v.second] + 1;

      dist[x][y] = dist[v.first][v.second] + 1;

      // cout << x << " " << y << endl;

      if(g[x][y][l] == 'G') return;


      seen[x][y][l] = true;

      q.push(make_pair(x, y));

    }
    seen[v.first][v.second][ dist[v.first][v.second] % 4 ] = true;

  }
}

int main() {
  int tt, Caseid = 0;
  cin >> tt;
  while(tt--) {
    init();

    cin >> n >> m;
    for(int i = 1; i <= n; i++) {
      for(int j = 1; j <= m; j++) {
        cin >> g[i][j][0];
        g[i][j][1] = g[i][j][2] = g[i][j][3] = g[i][j][0];

        if(g[i][j][0] == 'S') start = make_pair(i, j);
        if(g[i][j][0] == 'G') end = make_pair(i, j); 

      }
    }

    for(int level = 0; level < 4; level++) {
      for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
          if(g[i][j][level] == '<') {
            g[i][j][level + 1] = '^';
          }
          else if(g[i][j][level] == '^') {
            g[i][j][level + 1] = '>';
          }
          else if(g[i][j][level] == '>') {
            g[i][j][level + 1] = 'v';
          }
          else if(g[i][j][level] == 'v') {
            g[i][j][level + 1] = '<';
          }
        }
      }
    }

    for(int i = 0; i < 4; i++) color(i);

    // color(0);
    // color(1);
    // color(2);
    // color(3);
    bfs();

    printf("Case #%d: ", ++Caseid);
    if(dist[end.first][end.second] == 0) {
      puts("impossible");
    }
    else {
      printf("%d\n", dist[end.first][end.second]);
    }
  }
}
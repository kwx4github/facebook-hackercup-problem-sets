#include <iostream>
#include <queue>
#include <cstdio>
#include <cstring>

using namespace std;

struct Node {
	int currC, currR, currStep;
};

int startc, startr, endc, endr;
int map[105][105];
int available[5][105][105];
int m,n;

int main() {
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int T;
	scanf("%d",&T);
	for (int t = 0; t < T; t++) {
		printf("Case #%d: ", t + 1);
		memset(map, 0, sizeof(map));
		scanf("%d%d\n",&m,&n);
		for (int i = 0; i < m; i++) {
			char ch;
			for (int j = 0; j < n; j++) {
				scanf("%c", &ch);
				if (ch == 'S') {
					startr = i;
					startc = j;
				}
				else if (ch == 'G') {
					endr = i;
					endc = j;
				}
				else if (ch == '^') 
					map[i][j] = 1;
				else if (ch == '>')
					map[i][j] = 2;
				else if (ch == 'v')
					map[i][j] = 3;
				else if (ch == '<') 
					map[i][j] = 4;
				else if (ch == '#')
					map[i][j] = 5;
			}
			getchar();
		}

		memset(available, 0, sizeof(available));
		for (int time = 0; time < 4; time++) {
			for (int i = 0; i < m; i++)
				for (int j = 0; j < n; j++)
					available[time][i][j] = map[i][j];

			for (int i = 0; i < m; i++)
				for (int j = 0; j < n; j++) {
					int x = available[time][i][j];
					if (x >= 1 && x <= 4) {
						x += time;
						if (x > 4) x -= 4;
					}
					available[time][i][j] = x;
				}

			for (int i = 0; i < m; i++)
				for (int j = 0; j < n; j++) {
					int x = available[time][i][j];
					if (x >= 1 && x <= 4) {
						if (x == 1) {
							int r = i-1;
							while (r >= 0 && map[r][j] <= 0) {
								available[time][r][j] = -1;
								r--;
							}
						}
						if (x == 3) {
							int r = i+1;
							while (r < m && map[r][j] <= 0) {
								available[time][r][j] = -1;
								r++;
							}
						}
						if (x == 2) {
							int c = j+1;
							while (c < n  && map[i][c] <= 0) {
								available[time][i][c] = -1;
								c++;
							}
						}
						if (x == 4) {
							int c = j-1;
							while (c >= 0 && map[i][c] <= 0) {
								available[time][i][c] = -1;
								c--;
							}
						}
					}
				}
			/*
			printf("==================\n");
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++)
					printf("%d ", available[time][i][j]);
				printf("\n");
			}
			*/
		}

		int visited[5][105][105];
		memset(visited, 0, sizeof(visited));
		queue<Node> q;
		Node start;
		start.currC = startc;
		start.currR = startr;
		start.currStep = 0;
		q.push(start);
		visited[0][startc][startr] = 1;
		bool result = false;
		while (!q.empty()) {
			Node curr = q.front();
			q.pop();
			int step = curr.currStep + 1;
			int r = curr.currR;
			int c = curr.currC;
			int time = step % 4;
			Node next;
			next.currStep = step;
			if (r-1 >= 0 && available[time][r-1][c] == 0) {
				next.currR = r-1;
				next.currC = c;
				if (visited[time][r-1][c] == 0) {
					visited[time][r-1][c] = 1;
					q.push(next);
					if (r-1 == endr && c == endc) {
						result = true;
						printf("%d\n", step);
						break;
					}
				}
			}
			if (c-1 >= 0 && available[time][r][c-1] == 0) {
				next.currR = r;
				next.currC = c-1;
				if (visited[time][r][c-1] == 0) {
					visited[time][r][c-1] = 1;
					q.push(next);
					if (r == endr && c-1 == endc) {
						result = true;
						printf("%d\n", step);
						break;
					}
				}
			}
			if (r+1 < m && available[time][r+1][c] == 0) {
				next.currR = r+1;
				next.currC = c;
				if (visited[time][r+1][c] == 0) {
					visited[time][r+1][c] = 1;
					q.push(next);
					if (r+1 == endr && c == endc) {
						result = true;
						printf("%d\n", step);
						break;
					}
				}
			}
			if (c+1 < n && available[time][r][c+1] == 0) {
				next.currR = r;
				next.currC = c+1;
				if (visited[time][r][c+1] == 0) {
					visited[time][r][c+1] = 1;
					q.push(next);
					if (r == endr && c+1 == endc) {
						result = true;
						printf("%d\n", step);
						break;
					}
				}
			}
		}

		if (!result) printf("impossible\n");
	}	
	return 0;
}




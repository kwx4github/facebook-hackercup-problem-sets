/*
Shamim Ehsan
SUST CSE 12
*/
#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<stdlib.h>
#include<limits.h>
#include<iostream>
#include<string>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<set>
#include<deque>
#include<algorithm>
#define PI (2* acos(0))
#define pb push_back
#define ll long long
using namespace std;
int X[]= {0,0,1,-1};
int Y[]= {-1,1,0,0};
//int X[]= {0,0,1,1,1,-1,-1,-1};
//int Y[]= {-1,1,0,1,-1,0,1,-1};
int p,c,f,n,m;
bool laser[4][110][110];
char grid[110][110];
void move_right(int I,int J,int ct)
{
    {
        for(int j=J+1; j<m && (grid[I][j]=='.'  || grid[I][j]=='S' || grid[I][j]=='G'); j++)
        {
            laser[ct][I][j]=1;
        }
    }
}
void move_left(int I,int J,int ct)
{
    {
        for(int j=J-1; j>=0 && (grid[I][j]=='.'  || grid[I][j]=='S' || grid[I][j]=='G'); j--)
        {
            laser[ct][I][j]=1;
        }
    }
}
void move_down(int I,int J,int ct)
{
    {
        for(int i=I+1; i<n && (grid[i][J]=='.'  || grid[i][J]=='S' || grid[i][J]=='G'); i++)
        {
            laser[ct][i][J]=1;
        }
    }
}
void move_up(int I,int J,int ct)
{
    {
        for(int i=I-1; i>=0 && (grid[i][J]=='.'  || grid[i][J]=='S' || grid[i][J]=='G'); i--)
        {
            laser[ct][i][J]=1;
        }
    }
}
int bfs(int sti,int stj)
{
    int vis[110][110][5];
    int dist[110][110][5];
    memset(vis,0, sizeof(vis));
    vis[sti][stj][0]=1;
    dist[sti][stj][0]=0;
    queue<int>Q;
    Q.push(sti);
    Q.push(stj);
    Q.push(0);

    while(!Q.empty())
    {
        int x=Q.front();
        Q.pop();
        int y=Q.front();
        Q.pop();
        int tm=Q.front();
        Q.pop();
        for(int i=0; i<4; i++)
        {
            int nx=x+X[i];
            int ny=y+Y[i];
            if(nx>=0 && ny>=0 && nx<n && ny<m &&(grid[nx][ny]=='.' || grid[nx][ny]=='G' || grid[nx][ny]=='S') && vis[nx][ny][(tm+1)%4]==0)
            {
//                printf("%d %d\n",nx,ny);
                int md=(tm+1)%4;
//                printf("%d %d %d %d\n",nx,ny,md,dist[nx][ny][md]);
                if(laser[md][nx][ny]==0)
                {
//                    puts("fk");
                    Q.push(nx);
                    Q.push(ny);
                    Q.push(md);
                    vis[nx][ny][md]=1;
                    dist[nx][ny][md]=dist[x][y][tm]+1;
//                    printf("%d %d %d %d\n",nx,ny,md,dist[nx][ny][md]);
                    if(grid[nx][ny]=='G')
                        return dist[nx][ny][md];
                }

            }
        }
    }
    return -1;
}
int main()
{
//    freopen("laser_maze.txt","r",stdin);
//    freopen("output.txt","w",stdout);



    int t;
    scanf("%d",&t);
    for(int cs=1; cs<=t; cs++)
    {
        memset(laser,0,sizeof(laser));
        scanf("%d %d",&n,&m);
        for(int i=0; i<n; i++)
            scanf("%s",grid[i]);
        for(int i=0; i<n; i++)
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]=='v')//||grid[i][j]=='^'||grid[i][j]=='>'||grid[i][j]=='<'||)
                {
                    move_left(i,j,1);
                    move_up(i,j,2);
                    move_right(i,j,3);
                    move_down(i,j,0);

                }

                if(grid[i][j]=='<')
                {
                    move_up(i,j,1);
                    move_right(i,j,2);
                    move_down(i,j,3);
                    move_left(i,j,0);

                }
                if(grid[i][j]=='^')
                {
                    move_right(i,j,1);
                    move_down(i,j,2);
                    move_left(i,j,3);
                    move_up(i,j,0);
                }
                if(grid[i][j]=='>')
                {
                    move_down(i,j,1);
                    move_left(i,j,2);
                    move_up(i,j,3);
                    move_right(i,j,0);
                }
            }
//        for(int I=0; I<4; I++)
//        {
//            for(int i=0; i<n; i++)
//            {
//                for(int j=0; j<m; j++)
//                {
////                    if(grid[i][j]=='S')
////                    printf("%d ",bfs(i,j));
//                    printf("%d",laser[I][i][j]);
//                }
//                puts("");
//            }
//            puts("");
//        }
        {
            for(int i=0; i<n; i++)
            {
                for(int j=0; j<m; j++)
                {
                    if(grid[i][j]=='S')
                    {
                        int ans=bfs(i,j);
                        if(ans!=-1)
                            printf("Case #%d: %d\n",cs,ans);
                        else
                            printf("Case #%d: impossible\n",cs);
                        break;
                    }
                }
            }

        }
    }
    return 0;
}

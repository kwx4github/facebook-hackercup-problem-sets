#include <bits/stdc++.h>

#define jjs(i, s, x) for (int i = (s); i < (x); i++)
#define jjl(i, x) jjs(i, 0, x)
#define ji(x) jjl(i, x)
#define jj(x) jjl(j, x)
#define jk(x) jjl(k, x)
#define jij(a, b) ji(a) jj(b)
#define INF ((int) 1e9+10)
#define pb push_back
#define mp make_pair
#define rint(x) scanf("%d", &(x))
#define rlong(x) scanf("%lld", &(x))
#define MOD 1000000007

using namespace std;
typedef long long ll;
typedef pair<int, int> pi;
typedef pair<ll, ll> pll;

int T, M, N;
char maze[100][100];
int mcost[100][100][4];

int gpl(char x)
{
	if (x == '^')
		return 0;
	if (x == '>')
		return 1;
	if (x == 'v')
		return 2;
	if (x == '<')
		return 3;
	return -1;
}

bool ist(char c)
{
	return gpl(c) >= 0;
}

int main()
{
	rint(T);
	jjl(testcase, T)
	{
		rint(M); rint(N);
		ji(M)
		{
			char buf[200];
			scanf("%s", buf);
			jj(N) maze[i][j] = buf[j];
		}
		ji(M) jj(N) jk(4) mcost[i][j][k] = -1;
		int sx, sy, gx, gy;
		jij(M, N)
		{
			if (maze[i][j] == 'S')
				sx = i, sy = j;
			if (maze[i][j] == 'G')
				gx = i, gy = j;
		}
		queue<pair<pi, int> > Q;
		Q.push(mp(mp(sx, sy), 0));
		mcost[sx][sy][0] = 0;
		int ans = -1;
		while (!Q.empty() && ans < 0)
		{
			auto pr = Q.front();
			Q.pop();
			for (int dx = -1; dx <= 1; dx++) for (int dy = -1; dy <= 1; dy++) if (abs(dx) + abs(dy) == 1)
			{
				int nx = pr.first.first + dx;
				int ny = pr.first.second + dy;
				int ntime = (pr.second + 1) % 4;
				// printf("trying %d %d %d\n", nx, ny, ntime);
				if (nx < 0 || nx >= M || ny < 0 || ny >= N || maze[nx][ny] == '#' || ist(maze[nx][ny]) || mcost[nx][ny][ntime] >= 0)
					continue;
				bool ok = true;
				ji(M) if (ist(maze[i][ny]))
				{
					int ct = (ntime + gpl(maze[i][ny])) % 4;
					// printf("%d %d %d ct = %d\n", nx, ny, ntime, ct);
					if (ct == 0 && i > nx) ok = false;
					if (ct == 2 && i < nx) ok = false;
				}
				ji(N) if (ist(maze[nx][i]))
				{
					int ct = (ntime + gpl(maze[nx][i])) % 4;
					// printf("%d %d %d ct = %d\n", nx, ny, ntime, ct);
					if (ct == 1 && i < ny) ok = false;
					if (ct == 3 && i > ny) ok = false;
				}
				if (ok)
				{
					mcost[nx][ny][ntime] = mcost[pr.first.first][pr.first.second][pr.second] + 1;
					if (nx == gx && ny == gy)
						ans = mcost[gx][gy][ntime];
					Q.push(mp(mp(nx, ny), ntime));
					// printf("%d %d %d -> %d\n", nx, ny, ntime, mcost[nx][ny][ntime]);
				}
			}
		}
		printf("Case #%d: ", testcase + 1);
		if (ans < 0)
			printf("impossible\n");
		else
			printf("%d\n", ans);
	}
}
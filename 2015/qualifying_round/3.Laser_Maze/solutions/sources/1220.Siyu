#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;
ifstream cin("in.txt");
ofstream cout("out.txt");

typedef struct 
{
	int x,y;
	int t,step;
} node;

node q[50000];
char map[105][105];
bool used[105][105][5],laser[5][105][105];
int n,m,head,tail;

void add_tail(int i, int j, int t, int step)
{
	used[i][j][t]=1;
	tail++;
	q[tail].x=i;
	q[tail].y=j;
	q[tail].t=t;
	q[tail].step=step;
}

void init_laser()
{
	int i,j,k,l;
	for (i=0;i<n;i++)
		for (j=0;j<m;j++)
		{
			if (map[i][j]=='<')
				k=0;
			else if (map[i][j]=='^')
				k=3;
			else if (map[i][j]=='>')
				k=2;
			else if (map[i][j]=='v')
				k=1;
			else
				continue;
			k=(k+1)%4;
			l=1;
			while (i-l>=0)
			{
				if (map[i-l][j]=='<'||map[i-l][j]=='^'||map[i-l][j]=='v'||map[i-l][j]=='>'||map[i-l][j]=='#')
					break;
				laser[k][i-l][j]=1;
				l++;
			}
			k=(k+1)%4;
			l=1;
			while (j+l<m)
			{
				if (map[i][j+l]=='<'||map[i][j+l]=='^'||map[i][j+l]=='v'||map[i][j+l]=='>'||map[i][j+l]=='#')
					break;
				laser[k][i][j+l]=1;
				l++;
			}
			k=(k+1)%4;
			l=1;
			while (i+l<n)
			{
				if (map[i+l][j]=='<'||map[i+l][j]=='^'||map[i+l][j]=='v'||map[i+l][j]=='>'||map[i+l][j]=='#')
					break;
				laser[k][i+l][j]=1;
				l++;
			}
			k=(k+1)%4;
			l=1;
			while (j-l>=0)
			{
				if (map[i][j-l]=='<'||map[i][j-l]=='^'||map[i][j-l]=='v'||map[i][j-l]=='>'||map[i][j-l]=='#')
					break;
				laser[k][i][j-l]=1;
				l++;
			}
		}
}

int main()
{
	int t,i,j,k,face,con=0;
	bool flag;
	cin>>t;
	while (t--)
	{
		con++;
		cout<<"Case #"<<con<<": ";
		memset(used,0,sizeof(used));
		memset(laser,0,sizeof(laser));
		memset(q,0,sizeof(q));
		cin>>n>>m;
		for (i=0;i<n;i++)
			cin>>map[i];
		init_laser();
		//cout<<endl;
		//for (i=0;i<n;i++)
		//{
		//	for (j=0;j<m;j++)
		//		cout<<laser[3][i][j];
		//	cout<<endl;
		//}
		flag=0;
		for (i=0;i<n;i++)
		{
			for (j=0;j<m;j++)
				if (map[i][j]=='S')
				{
					flag=1;
					break;
				}
			if (flag)
				break;
		}
		head=0;
		tail=1;
		q[1].x=i;
		q[1].y=j;
		q[1].t=0;
		q[1].step=0;
		used[i][j][0]=1;
		flag=0;
		while (head<tail)
		{
			head++;
			i=q[head].x;
			j=q[head].y;
			face=(q[head].t+1)%4;
			if (i-1>=0)
				if (!used[i-1][j][face]&&(map[i-1][j]=='.'||map[i-1][j]=='S'||map[i-1][j]=='G'))
					if (!laser[face][i-1][j])
					{
						add_tail(i-1,j,face,q[head].step+1);
						if (map[i-1][j]=='G')
						{
							flag=1;
							break;
						}
					}
			if (i+1<n)
				if (!used[i+1][j][face]&&(map[i+1][j]=='.'||map[i+1][j]=='S'||map[i+1][j]=='G'))
					if (!laser[face][i+1][j])
					{
						add_tail(i+1,j,face,q[head].step+1);
						if (map[i+1][j]=='G')
						{
							flag=1;
							break;
						}
					}
			if (j-1>=0)
				if (!used[i][j-1][face]&&(map[i][j-1]=='.'||map[i][j-1]=='S'||map[i][j-1]=='G'))
					if (!laser[face][i][j-1])
					{
						add_tail(i,j-1,face,q[head].step+1);
						if (map[i][j-1]=='G')
						{
							flag=1;
							break;
						}
					}
			if (j+1<m)
				if (!used[i][j+1][face]&&(map[i][j+1]=='.'||map[i][j+1]=='S'||map[i][j+1]=='G'))
					if (!laser[face][i][j+1])
					{
						add_tail(i,j+1,face,q[head].step+1);
						if (map[i][j+1]=='G')
						{
							flag=1;
							break;
						}
					}
		}
		if (flag==1)
			cout<<q[tail].step;
		else
			cout<<"impossible";
		cout<<endl;
	}
	return 0;
}
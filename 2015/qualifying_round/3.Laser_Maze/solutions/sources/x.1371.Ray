#include <bits/stdc++.h>

#define INF 1000000010
#define FO(i,a,b) for (int (i) = (a); (i) < (b); ++(i))

using namespace std;
//PAIRS:
#define mp make_pair
#define fi first
#define se second
typedef pair<int,int> pii;

/*~~~~TEMPLATE END~~~~*/

struct aState {
    int y,x,d;
    aState (int _y=0, int _x=0, int _d=0) {
        y = _y; x = _x; d = _d;
    }
};

int dy[4] = {-1,0,1,0};
int dx[4] = {0,1,0,-1};

int T, R, C;
char gr[105][105];
bool canR[105][105][4];
bool seen[105][105][4];
int sD[105][105][4];

aState stState, cSt;
queue <aState> bfs;

int enY, enX;


int main() {
    freopen ("c.in", "r", stdin);
    freopen ("c.out", "w", stdout);
    scanf ("%d", &T);
    FO (_z,0,T) {
        scanf ("%d %d", &R, &C);
        printf ("Case #%d: ", _z+1);
        FO (i,1,R+1) {
            FO (p,1,C+1) {
                scanf (" %c ", &gr[i][p]);
            }
        }
        FO (i,0,C+1) gr[0][i] = gr[R+1][i] = '#';
        FO (i,0,R+1) gr[i][0] = gr[i][C+1] = '#';
        FO (i,0,R+1) {
            FO (p,0,C+1) {
                FO (t,0,4) {
                    canR[i][p][t] = true;
                    seen[i][p][t] = false;
                    sD[i][p][t] = INF;
                }
            }
        }
        FO (i,1,R+1) {
            FO (p,1,C+1) {
                if (gr[i][p] == '^') gr[i][p] = 0;
                if (gr[i][p] == '>') gr[i][p] = 1;
                if (gr[i][p] == 'v') gr[i][p] = 2;
                if (gr[i][p] == '<') gr[i][p] = 3;
                if (gr[i][p] == 'S') {
                    stState.y = i;
                    stState.x = p;
                    bfs.push (stState);
                }
                if (gr[i][p] == 'G') {
                    enY = i;
                    enX = p;
                }
                if (gr[i][p] < 4) {
                    //printf ("LASER: %d %d %d\n", i, p, gr[i][p]);
                    int temDir = gr[i][p];
                    FO (t,0,4) {
                        int cY = i;
                        int cX = p;
                        for (;;) {
                            cY += dy[temDir];
                            cX += dx[temDir];
                            if (gr[cY][cX] < 4 || gr[cY][cX] == '#') break;
                            canR[cY][cX][t] = false;
                        }
                        temDir = (temDir+1) % 4;
                    }
                }
            }
        }
        seen[stState.y][stState.x][0] = true;
        sD[stState.y][stState.x][0] = 0;
        while (!bfs.empty()) {
            cSt = bfs.front();
            bfs.pop();
            int temDir = (cSt.d+1)%4;
            //printf ("STATE: %d %d %d\n", cSt.y, cSt.x, cSt.d);
            FO (i,0,4) {
                int cY = cSt.y+dy[i];
                int cX = cSt.x+dx[i];
                if (gr[cY][cX] < 4 || gr[cY][cX] == '#') continue;
                if (seen[cY][cX][temDir]) continue;
                if (!canR[cY][cX][temDir]) continue;
                seen[cY][cX][temDir] = true;
                sD[cY][cX][temDir] = sD[cSt.y][cSt.x][cSt.d]+1;
                bfs.push (aState (cY,cX,temDir));
            }
        }
        int ans = INF;
        FO (i,0,4) {
            ans = min (sD[enY][enX][i], ans);
        }
        if (ans == INF) printf ("impossible\n");
        else printf ("%d\n", ans);
    }
    return 0;
}
                            
                            
                            
                            
                            
                            
                            

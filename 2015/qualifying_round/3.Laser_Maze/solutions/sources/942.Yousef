#include <bits/stdc++.h>
using namespace std;

int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, 1, 0, -1 };
int n, m;
int id, ff[111][111][5], vist[111][111][5], vid;
pair<int, int> s, e;
string ss[111];
bool valid(int x, int y) {
	return x >= 0 && y >= 0 && x < n && y < m;
}

int bfs() {
	queue<pair<int, pair<int, int> > > que;
	vid++;
	que.push(make_pair(0, s));
	int lev = 0;
	while (que.size()) {
		int s = que.size();
		while (s--) {
			int x = que.front().second.first, y = que.front().second.second,
					tim = que.front().first;
			que.pop();
			if (make_pair(x, y) == e)
				return lev;
			for (int i = 0; i < 4; ++i) {
				int _x = x + dx[i], _y = y + dy[i];
				if (!valid(_x, _y) || ss[_x][_y] != '.'
						|| vist[_x][_y][(tim + 1) % 4] == vid
						|| ff[_x][_y][(tim + 1) % 4] == id)
					continue;
				vist[_x][_y][(tim + 1) % 4] = vid;
				que.push(make_pair((tim + 1) % 4, make_pair(_x, _y)));
			}
		}
		++lev;
	}
	return -1;
}
int main(int argc, char **argv) {
	freopen("a.in", "r", stdin);
	freopen("out", "w", stdout);
	int t;
	cin >> t;
	while (t--) {
		static int cas = 1;
		printf("Case #%d: ", cas++);
		cin >> n >> m;
		for (int i = 0; i < n; ++i) {
			cin >> ss[i];
			for (int j = 0; ss[i][j]; ++j) {
				if (ss[i][j] == 'S')
					s = make_pair(i, j), ss[i][j] = '.';
				if (ss[i][j] == 'G')
					e = make_pair(i, j), ss[i][j] = '.';
			}
		}
		++id;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				size_t pos = string("^>v<").find(ss[i][j]);
				if (pos == string::npos)
					continue;
				for (int k = 4, l = 0; k--; ++l) {
					int x = i + dx[pos], y = j + dy[pos];
					while (valid(x, y) && ss[x][y] == '.') {
						ff[x][y][l] = id;
						x += dx[pos], y += dy[pos];
					}
					pos = (pos + 1) % 4;
				}
			}
		}
		int ans = bfs();
		if (ans == -1)
			cout << "impossible" << endl;
		else
			cout << ans << endl;
	}
	return 0;
}

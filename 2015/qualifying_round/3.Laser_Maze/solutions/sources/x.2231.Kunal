#include<bits/stdc++.h>
using namespace std;

int main()
 {
 	freopen("in.txt","r",stdin);
	freopen("out.txt","w",stdout);
 	int t;
 	cin>>t;
 	
 	for(int te=1;te<=t;te++)
	 {	cout<<"Case #"<<te<<": ";
	 
 	 	int n,m,k,i,j;
 	 	char ch;
		cin>>m>>n;
		vector<vector<vector<int> > > visitable(m,vector<vector<int> > (n,vector<int> (4,1)));
		pair<int,int> source,dest;
		vector<vector<char> > grid(m,vector<char> (n));
		vector<vector<int> > pillar(m,vector<int> (n));
		vector<vector<vector<int> > > visited(m,vector<vector<int> > (n,vector<int> (4,0)));
		
		
		for(i=0;i<m;i++)
		 {
		 	for(j=0;j<n;j++)
		 	  {
		 	  	cin>>grid[i][j];
		 	  	if(grid[i][j]=='#' || grid[i][j]=='^' || grid[i][j]=='v' || grid[i][j]=='>' || grid[i][j]=='<')
		 	  	  pillar[i][j]=1;
		 	  }
		 }
		for(i=0;i<m;i++)
		 {
		 	for(j=0;j<n;j++)
		 	  {	ch=grid[i][j];
				if(ch=='#')
		 	  	  {
		 	  	  	for(k=0;k<4;k++)
		 	  	  	  visitable[i][j][k]=0;
		 	  	  	
		 	  	  }
		 	  	else if(ch=='S')
		 	  	  {
		 	  	  	source=make_pair(i,j);
		 	  	  }
		 	  	else if(ch=='G')
		 	  	  {
		 	  	  	dest=make_pair(i,j);
		 	  	  }
		 	  	else if(ch=='^')
		 	  	  {
		 	  	  	for(k=0;k<4;k++)
		 	  	  	  visitable[i][j][k]=0;
		 	  	   for(k=j+1;k<n && !pillar[i][k];k++)
		 	  	        visitable[i][k][1]=0;
		 	  	   for(k=j-1;k>=0 && !pillar[i][k];k--)
		 	  	        visitable[i][k][3]=0;
		 	  	   for(k=i+1;k<m && !pillar[k][j];k++)
		 	  	        visitable[k][j][2]=0;
		 	  	   for(k=i-1;k>=0 && !pillar[k][j];k--)
		 	  	        visitable[k][j][0]=0;
		 	  			 	  	     
		 	  	  }
		 	  	else if(ch=='v')
		 	  	  {
		 	  	  	for(k=0;k<4;k++)
		 	  	  	  visitable[i][j][k]=0;
		 	  	  	for(k=j+1;k<n && !pillar[i][k];k++)
		 	  	        visitable[i][k][3]=0;
		 	  	   for(k=j-1;k>=0 && !pillar[i][k];k--)
		 	  	        visitable[i][k][1]=0;
		 	  	   for(k=i+1;k<m && !pillar[k][j];k++)
		 	  	        visitable[k][j][0]=0;
		 	  	   for(k=i-1;k>=0 && !pillar[k][j];k--)
		 	  	        visitable[k][j][2]=0;
		 	  	  }
		 	  	else if(ch=='<')
		 	  	  {
		 	  	  	for(k=0;k<4;k++)
		 	  	  	  visitable[i][j][k]=0;
		 	  	  	for(k=j+1;k<n && !pillar[i][k];k++)
		 	  	        visitable[i][k][2]=0;
		 	  	   	for(k=j-1;k>=0 && !pillar[i][k];k--)
		 	  	        visitable[i][k][0]=0;
		 	  	    for(k=i+1;k<m && !pillar[k][j];k++)
		 	  	        visitable[k][j][1]=0;
		 	  	    for(k=i-1;k>=0 && !pillar[k][j];k--)
		 	  	        visitable[k][j][3]=0;
		 	  	  }
		 	  	else if(ch=='>')
		 	      {
		 	      	for(k=0;k<4;k++)
		 	  	  	  visitable[i][j][k]=0;
		 	  	  	for(k=j+1;k<n && !pillar[i][k];k++)
		 	  	        visitable[i][k][0]=0;
		 	  	    for(k=j-1;k>=0 && !pillar[i][k];k--)
		 	  	        visitable[i][k][2]=0;
		 	  	    for(k=i+1;k<m && !pillar[k][j];k++)
		 	  	        visitable[k][j][1]=0;
		 	  	    for(k=i-1;k>=0 && !pillar[k][j];k--)
		 	  	        visitable[k][j][3]=0;
		 	      }
		 	  }
		 }
 	 	
 	 	priority_queue<pair<int,pair<int,int> >, vector<pair<int,pair<int,int> > >,less<pair<int,pair<int,int> > > > pq;
 	 	
 	 	pq.push(make_pair(0,source));
 	 	visited[source.first][source.second][0]=1;
 	 	pair<int,pair<int,int> > node;
 	 	int index,x,y;
 	 	while(!pq.empty())
 	 	  {
 	 	  	node=pq.top();
 	 	  	pq.pop();
 	 	  	index=(node.first+1)%4;
 	 	  	x=node.second.first;
 	 	  	y=node.second.second;
 	 	  	if(x>0 && !visited[x-1][y][index] && visitable[x-1][y][index])
 	 	  	  {
 	 	  	  	pq.push(make_pair(node.first+1,make_pair(x-1,y)));
 	 	  	  	visited[x-1][y][index]=node.first+1;
 	 	  	  }
 	 	  	if(x<m-1 && !visited[x+1][y][index] && visitable[x+1][y][index])
 	 	  	  {
 	 	  	  	pq.push(make_pair(node.first+1,make_pair(x+1,y)));
 	 	  	  	visited[x+1][y][index]=node.first+1;
 	 	  	  }
 	 	  	if(y>0 && !visited[x][y-1][index] && visitable[x][y-1][index])
 	 	  	  {
 	 	  	  	pq.push(make_pair(node.first+1,make_pair(x,y-1)));
 	 	  	  	visited[x][y-1][index]=node.first+1;
 	 	  	  }
 	 	  	if(y<n-1 && !visited[x][y+1][index] && visitable[x][y+1][index])
 	 	  	  {
 	 	  	  	pq.push(make_pair(node.first+1,make_pair(x,y+1)));
 	 	  	  	visited[x][y+1][index]=node.first+1;
 	 	  	  }
 	 	  	
 	 	  }
 	 	  x=dest.first;
 	 	  y=dest.second;
 	 	int ans=INT_MAX;
 	 	for(i=0;i<4;i++)
 	 	  {
 	 	    if(visited[x][y][i])
 	 	      ans=min(ans,visited[x][y][i]);
 	 	  }
 	 	if(ans==INT_MAX)
 	 	  puts("impossible");
 	 	else
 	 	  cout<<ans<<endl;
 	 }
 }

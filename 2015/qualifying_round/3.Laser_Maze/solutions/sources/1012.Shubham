# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <cstdio>
# include <cmath>
# include <numeric>
# include <cstdlib>
# include <cstring>
# include <vector>
# include <list>
# include <set>
# include <map>
# include <stack>
# include <queue>
# include <cctype>
# include <climits>
# include <complex>


using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
#define rep(i,a,b) for(int i=a;i<b;i++)
#define pb push_back
#define mp make_pair
#define sd(x) scanf(“%d”,&x);
#define pf(x) printf(“%d\n”,x);
#define inf 1000000000
#define mod 1000000007
#define mst(a,b) memset(a,b,sizeof(a))
#define pi (double)(3.141592653589793)
vector<pair<pair<int,int>,int> > pos;
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};
string s[100];

bool reachable(int x,int y,int a,int b)
{
    if(x==a)
    {
        if(y>b)
        {
           int z=y;
           y=b+1;
           b=z;
        }
        else
        {
            b--;
        }
        for(int i=y;i<=b;i++)
        {
            if(s[x][i]=='#'|| s[x][i]=='^' || s[x][i]=='v' || s[x][i]=='>' || s[x][i]=='<')
                return false;
        }
    }
    else if(y==b)
    {
        if(x>a)
        {
            int z=x;
            x=a+1;
            a=z;
        }
        else
        {
            a--;
        }
         for(int i=x;i<=a;i++)
        {
            if(s[i][y]=='#'|| s[i][y]=='^' || s[i][y]=='v' || s[i][y]=='>' || s[i][y]=='<')
                return false;
        }
    }
    return true;
}

bool safe(int x,int y,int t)
{

    for(int i=0;i<pos.size();i++)
    {
        if((pos[i].first.first==x) && (pos[i].first.second-y)>0 && ((pos[i].second+t)%4)==0)
        {

            if(  reachable(x,y,pos[i].first.first,pos[i].first.second))
                 return false;
        }
        else if((pos[i].first.first==x) && (pos[i].first.second-y)<0 && ((pos[i].second+t)%4)==2 )
        {
           if(  reachable(x,y,pos[i].first.first,pos[i].first.second))
                 return false;
        }
        else if((pos[i].first.second==y) && (pos[i].first.first-x)>0 && ((pos[i].second+t)%4)==1 )
        {
            if(  reachable(x,y,pos[i].first.first,pos[i].first.second))
                 return false;
        }
        else if((pos[i].first.second==y) && (pos[i].first.first-x)<0 && ((pos[i].second+t)%4)==3 )
        {
            if(  reachable(x,y,pos[i].first.first,pos[i].first.second))
                 return false;
        }
    }
    return true;
}

int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int t,m,n,i,j,k,a,b,x,y,z,c,d;
    cin>>t;
    for(i=1;i<=t;i++)
    {

        int xx=0;
        pos.clear();
        scanf("%d %d\n",&m,&n);
        int arr[m][n],vis1[m][n],vis2[m][n],vis3[m][n],vis4[m][n];


        for(j=0;j<m;j++)
        getline(cin,s[j]);

        for(j=0;j<m;j++)
        {
            for(k=0;k<n;k++)
            {
                arr[j][k]=-1;
                vis1[j][k]=0;
                vis2[j][k]=0;
                vis3[j][k]=0;
                vis4[j][k]=0;
                if(s[j][k]=='^')
                {
                    pos.pb(mp(mp(j,k),1));
                }
                else if(s[j][k]=='>')
                {
                    pos.pb(mp(mp(j,k),2));
                }
                else if(s[j][k]=='v')
                {
                    pos.pb(mp(mp(j,k),3));
                }
                else if(s[j][k]=='<')
                {
                    pos.pb(mp(mp(j,k),4));
                }
                else if(s[j][k]=='S')
                {
                    a=j,b=k;
                }
                else if(s[j][k]=='G')
                {
                    c=j,d=k;
                }
            }
        }

        queue<pair<int,int> > q;
        q.push(mp(a,b));
        arr[a][b]=0;
        while(!q.empty())
        {
            x=q.front().first;
            y=q.front().second;

            q.pop();
            for(j=0;j<4;j++)
            {

                if(((x+dx[j])>=0) && ((y+dy[j])>=0) && ((x+dx[j])<m) &&((y+dy[j])<n) && s[x+dx[j]][y+dy[j]]!='#' && s[x+dx[j]][y+dy[j]]!='>' && s[x+dx[j]][y+dy[j]]!='<' &&s[x+dx[j]][y+dy[j]]!='^' && s[x+dx[j]][y+dy[j]]!='v' && (!(vis1[x+dx[j]][y+dy[j]])|| !(vis2[x+dx[j]][y+dy[j]])|| !(vis3[x+dx[j]][y+dy[j]])|| !(vis4[x+dx[j]][y+dy[j]])))
                {
                    if(safe(x+dx[j],y+dy[j],arr[x][y]+1)  )
                    {



                        if((arr[x][y]+1)%4==0 && !vis4[x+dx[j]][y+dy[j]])
                        vis4[x+dx[j]][y+dy[j]]++;
                        else if((arr[x][y]+1)%4==1 && !vis1[x+dx[j]][y+dy[j]])
                        vis1[x+dx[j]][y+dy[j]]++;
                       else if((arr[x][y]+1)%4==2 && !vis2[x+dx[j]][y+dy[j]])
                        vis2[x+dx[j]][y+dy[j]]++;
                        else if((arr[x][y]+1)%4==3 && !vis3[x+dx[j]][y+dy[j]])
                        vis3[x+dx[j]][y+dy[j]]++;
                        else{
                            continue;}

                         arr[x+dx[j]][y+dy[j]]=arr[x][y]+1;
                        q.push(mp(x+dx[j],y+dy[j]));


                        if(s[x+dx[j]][y+dy[j]]=='G')
                      {
                          xx=1;
                        break;
                      }
                    }

                }
            }
            if(xx==1)
                break;
        }


        if(i==t){
        if(xx==1)
        {
            printf("Case #%d: %d",i,arr[c][d]);
        }
        else
        {
            printf("Case #%d: impossible",i);
        }
        }
        else
        {
            if(xx==1)
        {
            printf("Case #%d: %d\n",i,arr[c][d]);
        }
        else
        {
            printf("Case #%d: impossible\n",i);
        }
        }
    }



    return 0;
}

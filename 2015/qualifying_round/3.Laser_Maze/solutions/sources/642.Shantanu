#include<iostream>
#include<queue>
#include<string>
using namespace std;

bool kill[101][101][4];

char maze[101][101];

int getVal(char c){
	int initial=-1;
	switch(c){
				case '>' : initial = 0;
							break;
				case 'v': initial = 1;
							break;
				case '<': initial = 2;
							break;
				case '^': initial = 3;
							break;
				default:
					cerr<<"ERROR\n";
			}
	return initial;
}
int main(){
	int T;
	cin>>T;
	int k=0;
	while(T--){
		k++;
		int M, N;
		cin>>M>>N;

		for(int i=0; i<101; i++){
			for(int j=0; j<101; j++){
				maze[i][j] = '$';
				for(int k=0; k<4; k++)
					kill[i][j][k] = false;
			}
		}
		int Si, Sj, Gi, Gj;
		
		queue<pair<int, int> > turrets;
		for(int j=0; j<M; j++){
			string s;
			s.resize(N);
			cin>>s;
			for(int i=0; i<N; i++){
				char c;
				c=s[i];
				maze[i][j] = c;
				if(c=='<' || c=='>' || c=='^' || c=='v'){
					turrets.push(make_pair(i, j));
					for(int k=0; k<4; k++)
						kill[i][j][k] = true;
				}
				if(c=='S'){
					Si = i;
					Sj = j;
				}
				if(c=='#'){
					for(int k=0; k<4; k++)
						kill[i][j][k] = true;
				}
				if(c=='G'){
					Gi = i;
					Gj = j;
				}
			}
		}
		
		while(!turrets.empty()){
			pair<int, int> p = turrets.front();
			turrets.pop();
			int i=p.first, j=p.second;
			char c = maze[i][j];
			int initial=getVal(c);
			for(int ai=i+1; ai<N; ai++){
				kill[ai][j][(4-initial)%4]=true;
				c=maze[ai][j];
				if(!(c=='S' || c=='G' || c=='.'))
					break;
			}
			for(int ai=i-1; ai>=0; ai--){
				kill[ai][j][(getVal('<') - initial + 4)%4]=true;
				c=maze[ai][j];
				if(!(c=='S' || c=='G' || c=='.'))
					break;
			}
			for(int aj=j+1; aj<M; aj++){
				kill[i][aj][(getVal('v') - initial + 4)%4]=true;
				c=maze[i][aj];
				if(!(c=='S' || c=='G' || c=='.'))
					break;
			}
			for(int aj=j-1; aj>=0; aj--){
				kill[i][aj][(getVal('^') - initial + 4)%4]=true;
				c=maze[i][aj];
				if(!(c=='S' || c=='G' || c=='.'))
					break;
			}
		}
		/*
		for(int k=0; k<4; k++){
			for(int j=0; j<M; j++){
				for(int i=0; i<N; i++)
						cout<<kill[i][j][k];
					cout<<endl;
				}
			cout<<"_______\n";
		}
		*/
		queue<pair<int, pair<int, int> > > nodes;
		nodes.push(make_pair(0, make_pair(Si, Sj)));
		bool found=false;
		while(!nodes.empty()){
			pair<int, pair<int, int> > p = nodes.front();
			nodes.pop();
			int score = p.first;
			int i=p.second.first;
			int j=p.second.second;
			int dir = score%4;
			if(i<0 || i>=N || j<0 || j>=M)
				continue;
			if(score!=0 && kill[i][j][dir])
					continue;
			if(i==Gi && j==Gj){
				cout<<"Case #"<<k<<": "<<score<<endl;
				found=true;
				break;
			}
			nodes.push(make_pair(score+1, make_pair(i+1, j)));
			nodes.push(make_pair(score+1, make_pair(i-1, j)));
			nodes.push(make_pair(score+1, make_pair(i, j+1)));
			nodes.push(make_pair(score+1, make_pair(i, j-1)));
			kill[i][j][dir]=true;
		}
		if(!found) cout<<"Case #"<<k<<": impossible"<<endl;
	}
	return 0;
}

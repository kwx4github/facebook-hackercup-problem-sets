#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <cstring>

using namespace std;

#define pb push_back
#define len length()
#define clr clear()

#define eps 0.0000001
#define PI  3.14159265359
#define inf 1999888777

FILE *fin, *fout;

//   0
// 3   1
//   2

int N,M,xx[155*155*5],yy[155*155*5],dd[155*155*5],d[155][155][5];
char a[155][155];
bool mark[155][155][5];

int dx[4] = {-1,0,1,0}, dy[4] = {0,1,0,-1};

bool moze(int x, int y) {
    return (x >= 0 && x < N && y >= 0 && y < M && (a[x][y] == '.' || a[x][y] == 'S' || a[x][y] == 'G'));
}

void markiraj(int poc, int ts, int x, int y) {
    int s;
    s = (poc + ts) % 4;
    x += dx[s]; y += dy[s];
    while (moze(x,y)) {
        mark[x][y][ts] = true;
        x += dx[s]; y += dy[s];
    }
}

int main() {

    int t,T,pc,kr,tx,ty,td,tdd,krx,kry,res,pocx,pocy;

    //fin = stdin;
    //fout = stdout;
    fin = fopen("laser_maze.txt", "r");
    fout = fopen("laser_maze_output.txt", "w");

    fscanf(fin, "%d", &T);
    for(t=1; t<=T; t++) {

        fscanf(fin, "%d%d", &N, &M);
        for(int i=0; i<N; i++) {
            fscanf(fin, "%s", &a[i]);
        }

        memset(mark,0,sizeof(mark));

        for(int s=0; s<4; s++) {
            for(int i=0; i<N; i++) {
                for(int j=0; j<M; j++) {

                    d[i][j][s] = -1;

                    if (a[i][j] == '.') continue;

                    if (a[i][j] == 'S') {
                        pocx = i; pocy = j;
                        continue;
                    }

                    if (a[i][j] == 'G') {
                        krx = i; kry = j;
                        continue;
                    }

                    if (a[i][j] == '#') {
                        mark[i][j][s] = true;
                        continue;
                    }

                    if (a[i][j] == '^') markiraj(0,s,i,j);
                    if (a[i][j] == '>') markiraj(1,s,i,j);
                    if (a[i][j] == 'v') markiraj(2,s,i,j);
                    if (a[i][j] == '<') markiraj(3,s,i,j);
                }
            }
        }

        xx[1] = pocx; yy[1] = pocy; dd[1] = 0;
        d[pocx][pocy][0] = 0;

        res = -1;

        pc = 0; kr = 1;
        while (pc < kr) {
            pc++;

            if (xx[pc] == krx && yy[pc] == kry) {
                res = d[xx[pc]][yy[pc]][dd[pc]];
                break;
            }

            for(int s=0; s<4; s++) {
                tx = xx[pc] + dx[s]; ty = yy[pc] + dy[s];
                td = d[xx[pc]][yy[pc]][dd[pc]] + 1;
                tdd = td % 4;

                if (moze(tx,ty) && !mark[tx][ty][tdd] && d[tx][ty][tdd] == -1) {
                    kr++;
                    xx[kr] = tx; yy[kr] = ty; dd[kr] = tdd;
                    d[tx][ty][tdd] = td;
                }
            }
        }

        fprintf(fout, "Case #%d: ", t);
        if (res == -1) fprintf(fout, "impossible\n");
        else fprintf(fout, "%d\n", res);
    }

    return 0;
}

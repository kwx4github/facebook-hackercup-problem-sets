/*
ID: eoart2
PROG: transform
LANG: C++
*/
//#define MYDEBUG
#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:134217728")
#include <cstdio>
#include <iostream>
#include <iomanip> 
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <functional>
#include <cassert>

const long long MOD = 10000;
const long long INF = 2111111111111111111;
const int MAXN = 105;
const double EPS = 1e-7;
const int HASH_POW = 29;
const double PI = acos(-1.0);

using namespace std;

void my_return(int code)
{
	#ifdef MYDEBUG
		cout << "\nTime = " << fixed << setprecision(3) << double(clock()) / CLOCKS_PER_SEC << endl;
	#endif
	exit(code);
}

int m, n;
char p[100][100];

int get_id(int x, int y, int t)
{
	return 4*(x*n + y) + t;
}

char u[40010];
vector <int> G[40010];
int d[40010];

int main()
{
	//cin.sync_with_stdio(0);
	#ifdef MYDEBUG
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	#else
	freopen("laser_maze.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	#endif

	int CASE;
	scanf("%d", &CASE);
	char nxt[256];
	nxt['v'] = '<';
	nxt['<'] = '^';
	nxt['^'] = '>';
	nxt['>'] = 'v';
	nxt['.'] = '.';
	nxt['S'] = 'S';
	nxt['G'] = 'G';
	nxt['#'] = '#';
	for (int t = 1; t <= CASE; ++t)
	{
		scanf("%d %d\n", &m, &n);
		for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
				p[i][j] = getchar();
			getchar();
		}

		memset(u, 0, sizeof u);
		int start, endx, endy;
		for (int tim = 0; tim < 4; ++tim)
		{
			for (int i = 0; i < m; ++i)
			{
				for (int j = 0; j < n; ++j)
				{
					if (p[i][j] == '#')
						u[get_id(i, j, tim)] = 1;
					else if (p[i][j] == 'v')
					{
						u[get_id(i, j, tim)] = 1;
						for (int r = i + 1; r < m; ++r)
						{
							if (p[r][j] == '.' || p[r][j] == 'S' || p[r][j] == 'G')
								u[get_id(r, j, tim)] = 1;
							else
								break;
						}
					}
					else if (p[i][j] == '<')
					{
						u[get_id(i, j, tim)] = 1;
						for (int r = j - 1; r >= 0; --r)
						{
							if (p[i][r] == '.' || p[i][r] == 'S' || p[i][r] == 'G')
								u[get_id(i, r, tim)] = 1;
							else
								break;
						}
					}
					else if (p[i][j] == '^')
					{
						u[get_id(i, j, tim)] = 1;
						for (int r = i - 1; r >= 0; --r)
						{
							if (p[r][j] == '.' || p[r][j] == 'S' || p[r][j] == 'G')
								u[get_id(r, j, tim)] = 1;
							else
								break;
						}
					}
					else if (p[i][j] == '>')
					{
						u[get_id(i, j, tim)] = 1;
						for (int r = j + 1; r < n; ++r)
						{
							if (p[i][r] == '.' || p[i][r] == 'S' || p[i][r] == 'G')
								u[get_id(i, r, tim)] = 1;
							else
								break;
						}
					}
					else if (p[i][j] == 'S')
						start = get_id(i, j, 0);
					else if (p[i][j] == 'G')
					{
						endx = i;
						endy = j;
					}
				}
			}
			for (int i = 0; i < m; ++i)
			{
				for (int j = 0; j < n; ++j)
				{
					p[i][j] = nxt[p[i][j]];
				}
			}
		}

		for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				for (int tim = 0; tim < 4; ++tim)
				{
					int v = get_id(i, j, tim);
					G[v].clear();
					if (!u[v] || v == start)
					{
						int to;
						if (i > 0)
						{
							to = get_id(i - 1, j, (tim + 1) % 4);
							if (!u[to])
								G[v].push_back(to);
						}
						if (i < m - 1)
						{
							to = get_id(i + 1, j, (tim + 1) % 4);
							if (!u[to])
								G[v].push_back(to);
						}
						if (j > 0)
						{
							to = get_id(i, j - 1, (tim + 1) % 4);
							if (!u[to])
								G[v].push_back(to);
						}
						if (j < n - 1)
						{
							to = get_id(i, j + 1, (tim + 1) % 4);
							if (!u[to])
								G[v].push_back(to);
						}
					}
				}
			}
		}

		G[4*n*m] = G[start];
		queue <int> q;
		q.push(4*n*m);
		for (int i = 0; i < 4*m*n; ++i)
			d[i] = 1111111111;
		d[4*n*m] = 0;
		while (!q.empty())
		{
			int v = q.front();
			q.pop();
			for (int i = 0; i < G[v].size(); ++i)
			{
				if (!u[G[v][i]])
				{
					u[G[v][i]] = 1;
					d[G[v][i]] = d[v] + 1;
					q.push(G[v][i]);
				}
			}
		}

		int ans = 1000000000;
		for (int tim = 0; tim < 4; ++tim)
			ans = min(ans, d[get_id(endx, endy, tim)]);
		if (ans == 1000000000)
			printf("Case #%d: impossible\n", t);
		else
			printf("Case #%d: %d\n", t, ans);
	}
	
	my_return(0);
}
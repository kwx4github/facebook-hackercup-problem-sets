#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

#define NMAX 105

char board[NMAX][NMAX];
int m, n;

bool isobstacle(int i, int j) {
  return board[i][j] == '#' || board[i][j] == '<' ||
    board[i][j] == '>' || board[i][j] == 'v' || board[i][j] == '^';
}

bool valid(int i, int j) {
  return i >= 0 && i < m && j >= 0 && j < n;
}

int rotate(char c, int times) {
  if (times == 0)
    return c;

  if (c == '>')
    return rotate('v', times - 1);
  else if (c == 'v')
    return rotate('<', times - 1);
  else if (c == '<')
    return rotate('^', times - 1);
  return rotate('>', times - 1);
}

struct node {
  int i;
  int j;
  int depth;

  node(int _i, int _j, int _depth) : i(_i), j(_j), depth(_depth) {}
};

int main() {
  int t;
  scanf("%d", &t);
  for (int ctest = 1; ctest <= t; ctest++) {
    scanf("%d %d", &m, &n);

    for (int i = 0; i < m; i++) {
      scanf(" %s", board[i]);
    }

    int si, sj;
    int gi, gj;
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        if (board[i][j] == 'S') {
          si = i;
          sj = j;
        }
        else if (board[i][j] == 'G') {
          gi = i;
          gj = j;
        }
      }
    }

    bool unsafe[NMAX][NMAX][5];
    memset(unsafe, false, sizeof unsafe);
    for (int k = 0; k < 4; k++) {
      for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
          if (board[i][j] == '.' || board[i][j] == '#' || board[i][j] == 'S' ||
            board[i][j] == 'G') continue;

          char direction = rotate(board[i][j], k);

          int dx = 0, dy = 0;
          if (direction == '^')
            dy = -1;
          else if (direction == 'v')
            dy = 1;
          else if (direction == '<')
            dx = -1;
          else
            dx = 1;

          int i1 = i;
          int j1 = j;
          do {
            unsafe[i1][j1][k] = true;
            i1 += dy;
            j1 += dx;
          }
          while (valid(i1, j1) && !isobstacle(i1, j1));
        }
      }
    }

    bool done = false;
    int dist[NMAX][NMAX][4];
    memset(dist, -1, sizeof dist);
    dist[si][sj][0] = 0;
    queue<node> q;
    q.push(node(si, sj, 0));
    while (!q.empty()) {
      node nd = q.front();
      q.pop();

      int i = nd.i;
      int j = nd.j;
      int depth = nd.depth;

      if (i == gi && j == gj) {
        printf("Case #%d: %d\n", ctest, depth);
        done = true;
        break;
      }

      int dx[] = {1, 0, -1, 0};
      int dy[] = {0, 1, 0, -1};
      for (int k = 0; k < 4; k++) {
        int i1 = i + dy[k];
        int j1 = j + dx[k];
        int nextdepth = depth + 1;
        if (valid(i1, j1) && dist[i1][j1][nextdepth % 4] == -1 && !isobstacle(i1, j1) &&
            !unsafe[i1][j1][nextdepth % 4]) {
          dist[i1][j1][nextdepth % 4] = depth + 1;
          q.push(node(i1, j1, nextdepth));
        }
      }
    }

    if (!done)
      printf("Case #%d: impossible\n", ctest);
  }
  return 0;
}

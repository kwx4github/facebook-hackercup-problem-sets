#include <bits/stdc++.h>
using namespace std;
#define TR(i,v)       for(__typeof((v).begin())i=(v).begin();i!=(v).end();++i)
#define DEBUG(x)      cout<<#x<<" = "<<x<<endl;
#define SIZE(p)       (int)(p).size()
#define MP(a,b)       make_pair((a),(b))
#define ALL(p)        (p).begin(),(p).end()
#define rep(i,n)      for(int i=0;i<(int)(n);++i)
#define REP(i,a,n)    for(int i=(a);i<(int)(n); ++i)
#define FOR(i,a,b)    for(int i=(int)(a);i<=(int)(b);++i)
#define FORD(i,b,a)   for(int i=(int)(b);i>=(int)(a);--i)
#define CLR(x,y)      memset((x),(y),sizeof((x)))
typedef long long LL;
typedef pair<int,int> pii;
const int N=150;
char g[N][N];
int dis[N][N][4],laser_dir[N][N];
int up[N][N],dn[N][N],lf[N][N],rh[N][N];
int dx[]={-1,1,0,0};
int dy[]={0,0,1,-1};
typedef tuple<int,int,int> State;
char get(int x,int y,int t){
    static char d[]={'^','>','v','<'};
    return d[(laser_dir[x][y]+t)%4];
}
bool ck(int x,int y,int t){
    if(lf[x][y]>0 && get(x,lf[x][y],t)=='>') return 0;
    if(rh[x][y]>0 && get(x,rh[x][y],t)=='<') return 0;
    if(up[x][y]>0 && get(up[x][y],y,t)=='v') return 0;
    if(dn[x][y]>0 && get(dn[x][y],y,t)=='^') return 0;
    return 1;
}
bool is_laser(char c){
    return c=='^' || c=='>' || c=='<' || c=='v';
}
int main(int argc, char const *argv[]) {
#ifndef ONLINE_JUDGE
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
#endif
    int T; scanf("%d",&T);
    FOR(cs,1,T){
        printf("Case #%d: ",cs);
        int n,m; scanf("%d%d",&n,&m);
        int sx,sy,gx,gy,tot=0;
        FOR(i,1,n){
            scanf("%s",g[i]+1);
            FOR(j,1,m){
                if(g[i][j]=='S') sx=i,sy=j,g[i][j]='.';
                if(g[i][j]=='G') gx=i,gy=j,g[i][j]='.';
                if(g[i][j]=='^') laser_dir[i][j]=0;
                if(g[i][j]=='>') laser_dir[i][j]=1;
                if(g[i][j]=='v') laser_dir[i][j]=2;
                if(g[i][j]=='<') laser_dir[i][j]=3;
            }
        }
        FOR(i,1,n){
            lf[i][0]=rh[i][m+1]=-1;
            FOR(j,1,m)  lf[i][j]=is_laser(g[i][j])?j:g[i][j]=='#'?-1:lf[i][j-1];
            FORD(j,m,1) rh[i][j]=is_laser(g[i][j])?j:g[i][j]=='#'?-1:rh[i][j+1];
        }
        FOR(j,1,m){
            up[0][j]=dn[n+1][j]=-1;
            FOR(i,1,n)  up[i][j]=is_laser(g[i][j])?i:g[i][j]=='#'?-1:up[i-1][j];
            FORD(i,n,1) dn[i][j]=is_laser(g[i][j])?i:g[i][j]=='#'?-1:dn[i+1][j];
        }        
        CLR(dis,-1);        
        queue<State> q; q.push(make_tuple(sx,sy,0));
        dis[sx][sy][0]=0;
        while(q.size()){
            State now_s=q.front();q.pop();
            int x=get<0>(now_s),y=get<1>(now_s),t=get<2>(now_s);
            rep(k,4){
                int xx=x+dx[k],yy=y+dy[k],tt=(t+1)%4;
                if(xx>=1 && xx<=n && yy>=1 && yy<=m && g[xx][yy]=='.' && dis[xx][yy][tt]==-1 && ck(xx,yy,tt)){
                    dis[xx][yy][tt]=dis[x][y][t]+1;
                    q.push(make_tuple(xx,yy,tt));
                }
            }
        }
        int res=-1;
        rep(i,4)if(~dis[gx][gy][i] && (res==-1 || res>dis[gx][gy][i]))
            res=dis[gx][gy][i];
        if(res<0) puts("impossible");
        else      printf("%d\n",res);        
    }
    return 0;
}
/*
ちょっと難しい
*/
 
//#define NDEBUG
 
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <map>
#include <set>
#include <vector>
#include <complex>
#include <queue>
#include <tuple>
#include <queue>

using namespace std;
typedef long long ll;

template<int V>
struct Dijkstra {
    using T = int;
    using P = pair<T, int>;
    const T INF = 1<<28;
    vector<P> g[V];
    void add(int from, int to, T dist) {
        g[from].push_back(P(dist, to));
    }
    T res[V];
    void exec(int s) {
        fill_n(res, V, INF);
        priority_queue<P, vector<P>, greater<P>> q;
        q.push(P(0, s));
        while (!q.empty()) {
            P p = q.top(); q.pop();
            if (res[p.second] != INF) continue;
            res[p.second] = p.first;
            for (P e: g[p.second]) {
                q.push(P(e.first+p.first, e.second));
            }
        }
        return;
    }
};

const int MN = 100;

const int d4[4][2] = {
    {0, 1},
    {1, 0},
    {0, -1},
    {-1, 0}
};

int n, m;
int sy, sx, gy, gx;
char g[MN][MN];
map<char, int> mp = {{'>',0}, {'v',1}, {'<',2}, {'^',3}};
bool bc(int x, int y) {
    return (0 <= y && y < n && 0 <= x && x < m);
}

bool usedc[MN][MN][4][4];
bool resc[MN][MN][4][4];
bool checkd(int x, int y, int t, int d) {
    if (!bc(x, y)) return false;
    if (usedc[x][y][t][d]) return resc[x][y][t][d];
    usedc[x][y][t][d] = true;
    bool &res = resc[x][y][t][d];
    if (g[y][x] == '#') return res = false;
    if (g[y][x] == '.') return res = checkd(x+d4[d][1], y+d4[d][0], t, d);
    return res = ((mp[g[y][x]] + t) % 4 == (d+2) % 4);
}

bool check(int x, int y, int t) {
    if (g[y][x] == '#') return true;
    for (int i = 0; i < 4; i++) {
        if (checkd(x, y, t, i)) return true;
    }
    return false;
}

int solve() {
    memset(usedc, 0, sizeof(usedc));
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        for (int j = 0; j < m; j++) {
            g[i][j] = s[j];
            if (s[j] == 'G') {
                gy = i; gx = j;
                g[i][j] = '.';
            }
            if (s[j] == 'S') {
                sy = i; sx = j;
                g[i][j] = '.';
            }
        }
    }
    Dijkstra<MN*MN*4> mf;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            for (int t = 0; t < 4; t++) {
                for (int d = 0; d < 4; d++) {
                    int xx = j+d4[d][1], yy = i+d4[d][0];
                    if (!bc(xx, yy)) continue;
                    if (check(xx, yy, (t+1)%4)) continue;
                    mf.add(i*MN*4+j*4+t, yy*MN*4+xx*4+(t+1)%4, 1);
                }
            }
        }
    }
    mf.exec(sy*MN*4+sx*4);
    int res = 1<<28;
    for (int t = 0; t < 4; t++) {
        res = min(res, mf.res[gy*MN*4+gx*4+t]);
    }
    memset(usedc, 0, sizeof(usedc));
    if (1<<28 <= res) return -1;
    return res;
}

int main() {
    int T;
    cin >> T;
    for (int t = 0; t < T; t++) {
        int res = solve();
        if (res != -1) {
            printf("Case #%d: %d\n", t+1, res);
        } else {
            printf("Case #%d: impossible\n", t+1);
        }
    }
    return 0;
}
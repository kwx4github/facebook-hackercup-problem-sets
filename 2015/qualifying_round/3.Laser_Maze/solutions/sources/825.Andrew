#include <iostream>
#include <vector>
#include <string>
using namespace std;

int main() {
	int tests;
	cin >> tests;
	for (int test = 1; test <= tests; ++test) {
		int m, n;
		cin >> m >> n;
		vector<string> g[4];
		g[0].resize(m);
		int si, sj, gi, gj;
		for (int i = 0; i < m; ++i) {
			cin >> g[0][i];
			for (int j = 0; j < n; ++j) {
				if (g[0][i][j] == 'S') {
					si = i;
					sj = j;
					g[0][i][j] = '.';
				} else if (g[0][i][j] == 'G') {
					gi = i;
					gj = j;
					g[0][i][j] = '.';
				}
			}
		}
		g[1] = g[0];
		g[2] = g[0];
		g[3] = g[0];
		string seq = "<^>v";
		int di[] = {0, -1, 0, 1};
		int dj[] = {-1, 0, 1, 0};
		for (int t = 0; t < 4; ++t) {
			for (int i = 0; i < m; ++i) {
				for (int j = 0; j < n; ++j) {
					size_t pos = seq.find(g[t][i][j]);
					if (pos == string::npos) {
						continue;
					}
					int d = (pos + t) % 4;
					g[t][i][j] = seq[d];
					int ni = i + di[d];
					int nj = j + dj[d];
					while (ni >= 0 && ni < m && nj >= 0 && nj < n &&
							(g[t][ni][nj] == '.' || g[t][ni][nj] == 'X')) {
						g[t][ni][nj] = 'X';
						ni += di[d];
						nj += dj[d];
					}
				}
			}
		}

		vector<int> qi, qj, qt;
		qi.reserve(4 * n * m);
		qj.reserve(4 * n * m);
		qt.reserve(4 * n * m);

		size_t qs = 0;
		qi.push_back(si);
		qj.push_back(sj);
		qt.push_back(0);

		vector<vector<int> > v[4];
		for (int t = 0; t < 4; ++t) {
			v[t].assign(m, vector<int>(n, -1));
		}
		v[0][si][sj] = 0;

		int best = -1;
		while (best == -1 && qs < qi.size()) {
			int i = qi[qs];
			int j = qj[qs];
			int t = qt[qs];
			++qs;

			for (int d = 0; d < 4; ++d) {
				int ni = i + di[d];
				int nj = j + dj[d];
				int nt = (t + 1) % 4;
				if (ni >= 0 && ni < m && nj >= 0 && nj < n &&
						g[nt][ni][nj] == '.' && v[nt][ni][nj] == -1) {
					v[nt][ni][nj] = v[t][i][j] + 1;
					qi.push_back(ni);
					qj.push_back(nj);
					qt.push_back(nt);

					if (ni == gi && nj == gj) {
						best = v[nt][ni][nj];
						break;
					}
				}
			}
		}

		cout << "Case #" << test << ": ";
		if (best != -1) {
			cout << best;
		} else {
			cout << "impossible";
		}
		cout << endl;
	}
}

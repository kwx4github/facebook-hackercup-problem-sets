//Coder: Balajiganapathi
#ifndef ONLINE_JUDGE
#   define DEBUG
//#   define TRACE
#else
//#   define NDEBUG
#endif

#include <algorithm>
#include <bitset>
#include <deque>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

typedef vector<int> vi;
typedef pair<int,int> pi;
typedef vector<string> vs;
typedef vector<pi> vpi;

// Basic macros
#define fi          first
#define se          second
#define all(x)      (x).begin(), (x).end()
#define ini(a, v)   memset(a, v, sizeof(a))
#define re(i,s,n)  	for(int i=s;i<(n);++i)
#define rep(i,s,n)  for(int i=s;i<=(n);++i)
#define fo(i,n)     re(i,0,n)
#define rev(i,n,s)  for(int i=(n)-1;i>=s;--i)
#define repv(i,n,s) for(int i=(n);i>=s;--i)
#define fov(i,n)    rev(i,n,0)
#define pu          push_back
#define mp          make_pair
#define si(x)       (int)(x.size())

#ifdef TRACE
    #define trace(x)            cerr<<x<<endl;
    #define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
    #define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
    #define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
    #define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
    #define trace5(a,b,c,d,e)   cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<" | "#e" = "<<e<<endl;
    #define trace6(a,b,c,d,e,f) cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<" | "#e" = "<<e<<" | "#f" = "<<f<<endl;
#else
    #define trace(x)
    #define trace1(x)
    #define trace2(x,y)
    #define trace3(x,y,z)
    #define trace4(a,b,c,d)
    #define trace5(a,b,c,d,e)
    #define trace6(a,b,c,d,e,f)
#endif

const int oo = 1000000009;
const double eps = 1e-6;
const int mod = 1000000007;
const int mx = 102;

#define left wtf
#define right wtfwhy

char maze[mx][mx];
int dist[mx][mx][4];
char up[mx][mx], down[mx][mx], left[mx][mx], right[mx][mx];
int n, m;
char dirs[] = "<^>v";

bool is_laser(char c) {
    return find(dirs, dirs + 4, c) != dirs + 4;
}

void pre() {
    char c;

    fo(i, n) {
        c = '.';
        fo(j, m) {
            if(is_laser(maze[i][j])) c = maze[i][j];
            if(maze[i][j] == '#') c = '.';
            left[i][j] = c;
        }
    }

    fo(i, n) {
        c = '.';
        fov(j, m) {
            if(is_laser(maze[i][j])) c = maze[i][j];
            if(maze[i][j] == '#') c = '.';
            right[i][j] = c;
        }
    }

    fo(j, m) {
        c = '.';
        fo(i, n) {
            if(is_laser(maze[i][j])) c = maze[i][j];
            if(maze[i][j] == '#') c = '.';
            up[i][j] = c;
        }
    }

    fo(j, m) {
        c = '.';
        fov(i, n) {
            if(is_laser(maze[i][j])) c = maze[i][j];
            if(maze[i][j] == '#') c = '.';
            down[i][j] = c;
        }
    }

}

pair<pi, int> get_start() {
    fo(i, n) fo(j, m) if(maze[i][j] == 'S') {
        dist[i][j][0] = 0;
        return mp(mp(i, j), 0);
    }
}

char get_current_dir(char c, int d) {
    int i = find(dirs, dirs + 4, c) - dirs;
    i = (i + d) % 4;
    return dirs[i];
}

void check_add(queue<pair<pi, int> > &q, int i, int j, int d) {
    ++d;
    if(i < 0 || j < 0 || i >= n || j >= m || maze[i][j] == '#' || is_laser(maze[i][j]) || dist[i][j][d % 4] <= d) return;
    char c;

    if(up[i][j] != '.') if(get_current_dir(up[i][j], d) == 'v') return;
    if(down[i][j] != '.') if(get_current_dir(down[i][j], d) == '^') return;
    if(left[i][j] != '.') if(get_current_dir(left[i][j], d) == '>') return;
    if(right[i][j] != '.') if(get_current_dir(right[i][j], d) == '<') return;

    dist[i][j][d % 4] = d;
    q.push(mp(mp(i, j), d));
}

int main() {
    int t;
    scanf("%d", &t);
    rep(kase, 1, t) {
        scanf("%d %d", &n, &m);
        fo(i, n) scanf("%s", maze[i]);
        pre();
        queue<pair<pi, int> > q;

        fo(i, n) fo(j, m) fo(k, 4) dist[i][j][k] = oo;
        q.push(get_start());

        int ans = -1;
        while(!q.empty()) {
            pair<pi, int> cur = q.front();
            q.pop();
            int i = cur.fi.fi, j = cur.fi.se, d = cur.se;
            trace3(i, j, d);

            if(maze[i][j] == 'G') {
                ans = d;
                break;
            }
            
            check_add(q, i + 1, j, d);
            check_add(q, i - 1, j, d);
            check_add(q, i, j + 1, d);
            check_add(q, i, j - 1, d);
        }

        printf("Case %d: ", kase);
        if(ans == -1) printf("impossible\n");
        else printf("%d\n", ans);
    }
    
	return 0;
}

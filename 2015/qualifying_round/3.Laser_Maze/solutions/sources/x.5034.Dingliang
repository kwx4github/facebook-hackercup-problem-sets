#include <cstdio>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
#define ROW 101
#define COL 101
char reginal_map[ROW][COL];
char dir[4][2] = {0,-1, -1,0, 0,1, 1,0};
char dir_str[4] = {'<','^', '>',  'v'};
bool block[4][ROW][COL];
bool vis[4][ROW][COL];
struct po{
	int x,y;
	int dir;
	int step;
}start, end;
int bfs(po start, po end, int n, int m) {
	memset(vis, 0, sizeof(vis));
	queue<po> que;
	start.dir = 0;
	start.step = 0;
	vis[0][start.x][start.y] = true;
	que.push(start);
	while(!que.empty()) {
		po pre = que.front();
		que.pop();
		if (pre.x == end.x && pre.y == end.y) {
			return pre.step;
		}
		po now;
		now.dir = (pre.dir + 1) %4;
		now.step = pre.step + 1;
		for (int i = 0; i < 4; i++) {
			now.x = pre.x + dir[i][0];
			now.y = pre.y + dir[i][1];
			if (now.x >= 0 && now.x < n && now.y >= 0 && now.y < m) {
				if (block[now.dir][now.x][now.y] == false && reginal_map[now.x][now.y] != '#') {
					if (vis[now.dir][now.x][now.y] == false) {
						vis[now.dir][now.x][now.y] = true;
						que.push(now);
					}
				}
			}
		}
	}
	return -1;
}
int main() {
	int t, n, m;
	freopen("out.txt","w",stdout);
/**************INPUT SPACE***********************/
	scanf("%d",&t);
	for (int cas = 1; cas <= t; cas++) {
		vector<po> v;
		scanf("%d%d", &n, &m);
		for (int i = 0;i < n; i++) {
			scanf("%s", reginal_map[i]);
			for (int j = 0; j < m; j++) {
				if (reginal_map[i][j] == 'S') {
					start.x = i;
					start.y = j;
				}
				if (reginal_map[i][j] == 'G') {
					end.x = i;
					end.y = j;
				}
				for (int k = 0; k < 4; k++) {
					if (reginal_map[i][j] == dir_str[k]) {
						po temp;
						temp.x = i;
						temp.y = j;
						temp.dir = k;
						v.push_back(temp);
					}
				}
			}
		}

		memset(block,0,sizeof(block));
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < v.size(); j++) {
				int dx = dir[(v[j].dir + i)%4][0];
				int dy = dir[(v[j].dir + i)%4][1];
				int x = v[j].x;
				int y = v[j].y;
				while(x >= 0 && x < n && y >= 0 && y < m && reginal_map[x][y] != '#') {
					block[i][x][y] = true;
					x+=dx;
					y+=dy;
				}
			}
		}
/**************DEAL SPACE***********************/
		printf("Case #%d: ", cas);
		int res = bfs(start, end, n, m);
		if (res == -1) {
			printf("impossible\n");
		} else printf("%d\n",res);
	}
	return 0;
}
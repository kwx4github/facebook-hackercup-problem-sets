#include <bits/stdc++.h>
using namespace std;

#define fru(j,n) for(int j=0; j<(n); ++j)
#define tr(it,v) for(typeof((v).begin()) it=(v).begin(); it!=(v).end(); ++it)
#define x first
#define y second
#define pb push_back
#define ALL(G) (G).begin(),(G).end()

typedef long long ll;
typedef double D;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;

const int inft = 1000000009;
const int MAXN = 105;//10^6

int moveX[]={-1,0,1,0},moveY[]={0,1,0,-1};
void solve() {
	int n,m;
	char maze[MAXN][MAXN];
	scanf("%d%d",&n,&m);
	fru(i,n)scanf(" %s",maze[i]);
	pii S,G;
	fru(i,n)fru(j,m)
		if(maze[i][j]=='S'){maze[i][j]='.';S=pii(i,j);}
		else if(maze[i][j]=='G'){maze[i][j]='.';G=pii(i,j);}
	bool lava[MAXN][MAXN][4];
	fru(i,n)fru(j,m)fru(h,4)lava[i][j][h]=0;
	bool vis[MAXN][MAXN][4];
	fru(i,n)fru(j,m)fru(h,4)vis[i][j][h]=0;
	fru(i,n)fru(j,m)if(maze[i][j]!='.' && maze[i][j]!='#')
	{
		int dir;
		switch(maze[i][j])
		{
			case '^': dir=0;break;
			case '>': dir=1;break;
			case 'v': dir=2;break;
			case '<': dir=3;break;
		}
		maze[i][j]='#';
		fru(h,4)
		{
			int ii=i,jj=j;
			do
			{
				lava[ii][jj][h]=1;
				ii+=moveX[(h+dir)%4];
				jj+=moveY[(h+dir)%4];
			}
			while(ii>=0 && ii<n && jj>=0 && jj<m && maze[ii][jj]=='.');
		}
	}
	if(0)fru(h,4)
	{
		printf("lava level %d\n",h);
		fru(i,n)
		{
			fru(j,m)printf("%d",lava[i][j][h]);puts("");
		}
	}
	queue<pair<pii,int> > Q;
	Q.push(make_pair(S,0));
	vis[S.x][S.y][0]=true;
	while(!Q.empty())
	{
		pair<pii,int> v=Q.front();Q.pop();
		if(v.x==G){printf("%d\n",v.y);return;}
		fru(h,4)
		{
			pii N(moveX[h]+v.x.x,moveY[h]+v.x.y);
			if(N.x>=0 && N.x<n && N.y>=0 && N.y<m && maze[N.x][N.y]=='.'
					&& !lava[N.x][N.y][(v.y+1)%4]
					&& !vis[N.x][N.y][(v.y+1)%4])
			{
				Q.push(make_pair(N,v.y+1));
				vis[N.x][N.y][(v.y+1)%4]=1;
			}
		}
	}
	puts("impossible");
}

int main(){
	int tt=1;scanf("%d",&tt);
	fru(i,tt) 
	{
		printf("Case #%d: ",i+1);
		solve();
	}
	return 0;
}

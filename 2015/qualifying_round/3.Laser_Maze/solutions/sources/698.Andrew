import java.util.*;
import java.io.*;

public class C {
    class Turret {
        int x, y, d;

        Turret(int x, int y, int d) {
            this.x = x;
            this.y = y;
            this.d = d;
        }
    }

    class Pos {
        int x, y, d;

        Pos(int x, int y, int d) {
            this.x = x;
            this.y = y;
            this.d = d;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Pos pos = (Pos) o;

            if (d != pos.d) return false;
            if (x != pos.x) return false;
            if (y != pos.y) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = x;
            result = 31 * result + y;
            result = 31 * result + d;
            return result;
        }
    }

    int[] dx = {-1, 0, 1, 0};
    int[] dy = {0, 1, 0, -1};

    public void run() throws IOException {
        in = new FastScanner(new FileInputStream("laser_maze.txt"));
        out = new PrintWriter("laser_maze.out");

        int testn = in.nextInt();
        for (int test = 0; test < testn; test++) {
            int h = in.nextInt();
            int w = in.nextInt();
            int[][] m = new int[h + 2][w + 2];
            for (int[] z : m) {
                Arrays.fill(z, -1);
            }
            int sx = 0;
            int sy = 0;
            int tx = 0;
            int ty = 0;
            ArrayList<Turret> t = new ArrayList<>();
            for (int i = 0; i < h; i++) {
                String s = in.next();
                for (int j = 0; j < w; j++) {
                    switch (s.charAt(j)) {
                        case '#': {
                            break;
                        }
                        case 'S': {
                            sx = i + 1;
                            sy = j + 1;
                            m[i + 1][j + 1] = 0;
                            break;
                        }
                        case 'G': {
                            tx = i + 1;
                            ty = j + 1;
                            m[i + 1][j + 1] = 0;
                            break;
                        }
                        case '.': {
                            m[i + 1][j + 1] = 0;
                            break;
                        }
                        case '^': {
                            t.add(new Turret(i + 1, j + 1, 0));
                            break;
                        }
                        case '>': {
                            t.add(new Turret(i + 1, j + 1, 1));
                            break;
                        }
                        case 'v': {
                            t.add(new Turret(i + 1, j + 1, 2));
                            break;
                        }
                        case '<': {
                            t.add(new Turret(i + 1, j + 1, 3));
                            break;
                        }
                    }
                }
            }
            for (Turret x : t) {
                for (int i = 0; i < 4; i++) {
                    int d = (x.d + i) % 4;
                    int px = x.x + dx[d];
                    int py = x.y + dy[d];
                    while (m[px][py] != -1) {
                        m[px][py] |= 1 << i;
                        px += dx[d];
                        py += dy[d];
                    }
                }
            }

            ArrayDeque<Pos> q = new ArrayDeque<>();
            Pos start = new Pos(sx, sy, 0);
            q.addLast(start);
            Map<Pos, Integer> dist= new HashMap<>();
            dist.put(start, 0);
            while (!q.isEmpty()) {
                Pos u = q.pollFirst();
                for (int i = 0; i < 4; i++) {
                    Pos v = new Pos(u.x + dx[i], u.y + dy[i], (u.d + 1) % 4);
                    if (m[v.x][v.y] == -1 || ((m[v.x][v.y] & (1 << v.d)) != 0)) {
                        continue;
                    }
                    if (dist.containsKey(v)) {
                        continue;
                    }
                    dist.put(v, dist.get(u) + 1);
                    q.addLast(v);
                }
            }
            int ans = Integer.MAX_VALUE;
            for (int i = 0; i < 4; i++) {
                Pos d = new Pos(tx, ty, i);
                if (dist.containsKey(d)) {
                    int val = dist.get(d);
                    if (val < ans) {
                        ans = val;
                    }
                }
            }
            out.println("Case #" + (test + 1) + ": " + (ans == Integer.MAX_VALUE ? "impossible" : "" + ans));
        }

        out.close();
    }

    FastScanner in;
    PrintWriter out;

    public static void main(String[] args) throws IOException {
        new C().run();
    }

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(InputStream in) throws IOException {
            br = new BufferedReader(new InputStreamReader(in));
        }

        String next() {
            try {
                while (st == null || !st.hasMoreTokens()) {
                    st = new StringTokenizer(br.readLine());
                }
            } catch (IOException e) {
                System.err.println(e);
                System.exit(1);
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }
    }
}
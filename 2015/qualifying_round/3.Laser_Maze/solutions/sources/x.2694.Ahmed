#include <iostream>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <cstring>
using namespace std;

void block(int r, int c, int turn);
int fn(int x, int y, int turn);
void pre_process();
char rot(char x);

char maze[105][105];
bool invalid[4][105][105];

int visited[4][105][105], dp[4][105][105], n_row, n_col, cases, dest_y, dest_x, start_y, start_x, p = 1, ans1;
const int inf = 99999999;

int main()
{

      freopen("laser_maze.txt", "r", stdin);
     freopen("ans2.txt", "w", stdout);

    memset(visited, -1, sizeof(visited));
    scanf("%d", &cases);
    while(cases--)
    {
        scanf("%d %d", &n_row, &n_col);
        for(int i = 0; i < n_row; i++)
            scanf("%s", maze[i]);
        pre_process();
        ans1 = min(ans1, fn(start_x - 1, start_y, 1) + 1), ans1 = min(ans1, fn(start_x + 1, start_y, 1) + 1);
        ans1 = min(ans1, fn(start_x, start_y - 1, 1) + 1), ans1 = min(ans1, fn(start_x, start_y + 1, 1) + 1);

        printf("Case #%d: ", p++);
        if(ans1 == inf)
            printf("impossible");
        else
            printf("%d", ans1);
        printf("\n");

    }
    return 0;
}

int fn(int x, int y, int turn)
{
    if(x < 0 || x >= n_row || y < 0 || y >= n_col)
        return inf;

    if(!invalid[turn][x][y])
        return inf;

    if(x == dest_x && y == dest_y)
    {
        // printf("here %d\n",turn);
        return 0;

    }

    int& flag = visited[turn][x][y];
    int& ret = dp[turn][x][y];

    if(flag == cases)
        return ret;
    flag = cases, ret = inf;

    //int ans = inf;
    int& ans = dp[turn][x][y];
    ans = inf;
    ans = min(ans, fn(x + 1, y, (turn + 1) % 4) + 1);
    ans = min(ans, fn(x - 1, y, (turn + 1) % 4) + 1);
    ans = min(ans, fn(x, y + 1, (turn + 1) % 4) + 1);
    ans = min(ans, fn(x, y - 1, (turn + 1) % 4) + 1);
    ret = ans;

    return ret;
}

void pre_process()
{
    memset(invalid, 1, sizeof(invalid));
    // memset(dp, inf, sizeof(dp));
    ans1 = inf;

    for(int i = 0; i < n_row; i++)
        for(int j = 0; j < n_col; j++)
        {
            if(maze[i][j] == '#')
                invalid[0][i][j] = invalid[1][i][j] = invalid[2][i][j] = invalid[3][i][j] = 0;

            if(maze[i][j] == 'G')
                dest_x = i, dest_y = j;

            if(maze[i][j] == 'S')
                start_x = i, start_y = j;

            if(maze[i][j] == '>' || maze[i][j] == '<' || maze[i][j] == 'v' || maze[i][j] == '^')
                for(int k = 0; k < 4; k++)
                    block(i, j, k);
        }


    /*  for(int k = 0; k < 4; k++)
      {
          for(int i = 0; i < n_row; i++)
          {
              for(int j = 0; j < n_col; j++)
                  printf("%d", invalid[k][i][j]);
              printf("\n");
          }
          printf("\n\n");
      }
      */
    return;
}

void block(int r, int c, int turn)
{
    char x = maze[r][c];
    for(int i = 0; i < turn; i++)
        x = rot(x);

    if(x == '<')
        for(int j = c; j >= 0; j--)
        {
            invalid[turn][r][j] = 0;
            char& h = maze[r][j];
            if((h == '>' || h == '<' || h == 'v' || h == '^') && j != c)
                return;
        }

    if(x == '>')
        for(int j = c; j < n_col; j++)
        {
            invalid[turn][r][j] = 0;
            char& h = maze[r][j];
            if((h == '>' || h == '<' || h == 'v' || h == '^') && j != c)
                return;
        }

    if(x == '^')
        for(int i = r; i >= 0; i--)
        {
            invalid[turn][i][c] = 0;
            char& h = maze[i][c];
            if((h == '>' || h == '<' || h == 'v' || h == '^') && i != r)
                return;
        }

    if(x == 'v')
        for(int i = r; i < n_row; i++)
        {
            invalid[turn][i][c] = 0;
            char& h = maze[i][c];
            if((h == '>' || h == '<' || h == 'v' || h == '^') && i != r)
                return;
        }
}

char rot(char x)
{
    if(x == '>')
        return 'v';
    if(x == 'v')
        return '<';
    if(x == '<')
        return '^';
    if(x == '^')
        return '>';
}


#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <list>
#include <set>
#include <map>
using namespace std;

const int N = 100;
int n, m;
char a[N][N];
int d[N][N][4];
int di[] = { -1, 1, 0, 0 };
int dj[] = { 0, 0, -1, 1 };
char c[] = { '>', 'v', '<', '^' };

bool isTurrel(char c)
{
	return c == '>' || c == '<' || c == 'v' || c == '^';
}

int getIndex(char turrel)
{
	for (int i = 0; i < 4; i++)
	{
		if (c[i] == turrel) return i;
	}
	return -1;
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	int t; scanf("%d", &t);
	for (int k = 0; k < t; k++)
	{
		int si, sj, fi, fj;
		scanf("%d%d", &n, &m);
		for (int i = 0; i < n; i++)
		{
			scanf("\n");
			for (int j = 0; j < m; j++)
			{
				scanf("%c", &a[i][j]);
				if (a[i][j] == 'S') si = i, sj = j;
				else if (a[i][j] == 'G') fi = i, fj = j;
			}
		}
		memset(d, -1, sizeof(d));
		queue < pair < pair < int,int >,int > > q;
		d[si][sj][0] = 0;
		q.push(make_pair(make_pair(si, sj), 0));
		while (!q.empty())
		{
			int i = q.front().first.first;
			int j = q.front().first.second;
			int turn = q.front().second;
			q.pop();
			for (int l = 0; l < 4; l++)
			{
				int ii = i + di[l];
				int jj = j + dj[l];
				int nturn = (turn + 1) % 4;
				if (ii >= 0 && jj >= 0 && ii < n && jj < m && (a[ii][jj] != '#' && !isTurrel(a[ii][jj])) && d[ii][jj][nturn] == -1)
				{
					bool shooted = false;
					for (int I = ii - 1; I >= 0 && a[I][jj] != '#'; I--)
					{
						if (isTurrel(a[I][jj]))
						{
							shooted |= c[(getIndex(a[I][jj]) + nturn) % 4] == 'v';
							break;
						}
					}
					for (int I = ii + 1; I < n && a[I][jj] != '#'; I++)
					{
						if (isTurrel(a[I][jj]))
						{
							shooted |= c[(getIndex(a[I][jj]) + nturn) % 4] == '^';
						}
					}
					for (int J = jj - 1; J >= 0 && a[ii][J] != '#'; J--)
					{
						if (isTurrel(a[ii][J]))
						{
							shooted |= c[(getIndex(a[ii][J]) + nturn) % 4] == '>';
							break;
						}
					}
					for (int J = jj + 1; J < m && a[ii][J] != '#'; J++)
					{
						if (isTurrel(a[ii][J]))
						{
							shooted |= c[(getIndex(a[ii][J]) + nturn) % 4] == '<';
							break;
						}
					}

					if (!shooted)
					{
						d[ii][jj][nturn] = d[i][j][turn] + 1;
						q.push(make_pair(make_pair(ii, jj), nturn));
					}
				}
			}
		}
		int ans = 1e9;
		for (int l = 0; l < 4; l++) 
		{
			if (d[fi][fj][l] != -1) ans = min(ans, d[fi][fj][l]);
		}
		if (ans == 1e9) printf("Case #%d: impossible\n", k + 1);
		else printf("Case #%d: %d\n", k + 1, ans);
	}
    return 0;
}
#include <string>
#include <vector>
#include <set>
#include <map>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <cmath>
#include <string.h>
#include <queue>
#include <cstdio>
#include <cassert>
#include <deque>
#include <stack>
#include <utility>
#include <numeric>
#include <ctime>
#include <tuple>

using namespace std;

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define fore(i, l, r) for (int i = (int)(l); i < (int)(r); i++)
#define forv(i, v) forn(i, v.size())

#define mp make_pair
#define pb push_back
#define all(v) v.begin(), v.end()

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;

typedef tuple<int, int, int> state;

const string ds = "^>v<";
const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, 1, 0, -1};

bool validPos(int x, int y, int n, int m) {
    return x >= 0 && y >= 0 && x < n && y < m;
}

void solveCase(int tc) {
    cerr << tc << endl;
    printf("Case #%d: ", tc);
    int n, m;
    cin >> n >> m;
    vector<string> field(n);
    for (int i = 0; i < n; i++) cin >> field[i];
    vector<vector<vector<int>>> d(4, vector<vector<int>>(n, vector<int>(m, -1)));
    vector<vector<string>> pass(4, vector<string>(n, string(m, '.')));
    queue<state> q;
    int gx = 0, gy = 0;
    for (int t = 0; t < 4; t++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (field[i][j] == '#') {
                    pass[t][i][j] = '#';
                } else {
                    int dir = ds.find(field[i][j]);
                    if (dir != -1) {
                        dir = (dir + t) % 4;
                        int x = i, y = j;
                        while (validPos(x, y, n, m)) {
                            pass[t][x][y] = '#';
                            x += dx[dir];
                            y += dy[dir];
                        }
                    } else if (field[i][j] == 'S') {
                        q.emplace(0, i, j);
                        d[0][i][j] = 0;
                    } else if (field[i][j] == 'G') {
                        gx = i, gy = j;
                    }
                }
            }
        }
    }
    while (!q.empty()) {
        int t, x, y;
        tie(t, x, y) = q.front(); q.pop();
        int tt = (t + 1) % 4;
        for (int dir = 0; dir < 4; dir++) {
            int xx = x + dx[dir];
            int yy = y + dy[dir];
            if (validPos(xx, yy, n, m) && pass[tt][xx][yy] == '.' && d[tt][xx][yy] == -1) {
                d[tt][xx][yy] = d[t][x][y] + 1;
                q.emplace(tt, xx, yy);
            }
        }
    }
    int ans = 100000;
    for (int t = 0; t < 4; t++) {
        if (d[t][gx][gy] != -1) ans = min(ans, d[t][gx][gy]);
    }
    if (ans == 100000) cout << "impossible"; else cout << ans;
    cout << endl;
}

int main() {
#ifdef NEREVAR_PROJECT
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int tc;
    cin >> tc;
    for (int i = 0; i < tc; i++) solveCase(i + 1);
    return 0;
}

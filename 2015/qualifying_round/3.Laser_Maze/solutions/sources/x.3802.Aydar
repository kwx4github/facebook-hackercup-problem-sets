import java.io.*;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;
import java.util.StringTokenizer;

public class ProbA {
    boolean eof;

    public static void main(String[] args) throws IOException {
        new ProbA().run();
    }

    String next() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                eof = true;
                return "-1";
            }
        }
        return st.nextToken();
    }

    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    int nextInt() {
        return Integer.parseInt(next());
    }

    void run() throws IOException {
        String name = "input.txt";
        InputStream input = System.in;
        OutputStream output = System.out;
        try {
            File f = new File(name);
            if (f.exists() && f.canRead()) {
                input = new FileInputStream(f);
                output = new FileOutputStream(name + ".out");
            }
        } catch (Exception e) {
        }

        br = new BufferedReader(new InputStreamReader(input));
        out = new PrintWriter(output);

        solve();

        br.close();
        out.close();
    }

    void solve() {
        int t = nextInt();
        int[][][] a;
        char[][][] c;
        String tur = "<>^v";
        Deque<Pair> q;
        int[] h = {0, 1, 0, -1};

        int inf = Integer.MAX_VALUE / 4;
        for (int t_id = 0; t_id < t; ++t_id) {
            int n = nextInt();
            int m = nextInt();
            a = new int[n][m][4];
            c = new char[n][m][4];

            int sx = 0;
            int sy = 0;
            int fx = 0;
            int fy = 0;

            for (int i = 0; i < n; ++i) {
                String s = next();
                for (int j = 0; j < m; ++j) {
                    c[i][j][0] = s.charAt(j);
                }
                for (int j = 0; j < m; ++j) {
                    if (c[i][j][0] == 'S') {
                        sx = i;
                        sy = j;
                    }
                    if (c[i][j][0] == 'G') {
                        fx = i;
                        fy = j;
                    }
                }
            }

            for (int r = 0; r < 4; ++r){
                int p = (r + 1) % 4;
                for (int i = 0; i < n; ++i){
                    for (int j = 0; j < m; ++j){
                        c[i][j][p] = c[i][j][r];
                    }
                }
            }

            for (int r = 0; r < 4; ++r) {
                int p = (r + 1) % 4;
                for (int i = 0; i < n; ++i) {
                    for (int j = 0; j < m; ++j) {
                        if (c[i][j][r] == '^') {
                            c[i][j][p] = '<';
                            for (int f = j - 1; f >= 0; --f) {
                                if (c[i][f][0] == '#' || tur.contains(c[i][f][0] + "")) {
                                    break;
                                }
                                c[i][f][p] = '#';
                            }
                        }

                        if (c[i][j][r] == '<') {
                            c[i][j][p] = 'v';
                            for (int f = i + 1; f < n; ++f) {
                                if (c[f][j][0] == '#' || tur.contains(c[f][j][0] + "")) {
                                    break;
                                }
                                c[f][j][p] = '#';
                            }
                        }

                        if (c[i][j][r] == '>') {
                            c[i][j][p] = '^';
                            for (int f = i - 1; f >= 0; --f) {
                                if (c[f][j][0] == '#' || tur.contains(c[f][j][0] + "")) {
                                    break;
                                }
                                c[f][j][p] = '#';
                            }
                        }

                        if (c[i][j][r] == 'v') {
                            c[i][j][p] = '>';
                            for (int f = j + 1; f < m; ++f) {
                                if (c[i][f][0] == '#' || tur.contains(c[i][f][0] + "")) {
                                    break;
                                }
                                c[i][f][p] = '#';
                            }
                        }
                    }
                }
            }

/*
            for (int r = 0; r < 4; ++r) {
                for (int i = 0; i < n; ++i) {
                    for (int j = 0; j < m; ++j) {
                        out.print(c[i][j][r]);
                    }
                    out.println();
                }
                out.println();
            }

            out.println("############");*/

            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < m; ++j) {
                    Arrays.fill(a[i][j], inf);
                }
            }

            a[sx][sy][0] = 0;
            q = new ArrayDeque<>();

            q.add(new Pair(sx, sy, 0));
            while (!q.isEmpty()) {
                Pair p = q.pollFirst();
                for (int i = 0; i < 4; ++i) {
                    int x = p.x + h[i];
                    int y = p.y + h[3 - i];
                    int r = (p.p + 1) % 4;
                    if (0 <= x && x < n && 0 <= y && y < m && c[x][y][r] != '#' && !tur.contains(c[x][y][r] + "")
                            && a[p.x][p.y][p.p] + 1 < a[x][y][r]) {
                        a[x][y][r] = a[p.x][p.y][p.p] + 1;
                        q.add(new Pair(x, y, r));
                    }
                }
            }

            int ans = Math.min(Math.min(a[fx][fy][0], a[fx][fy][1]), Math.min(a[fx][fy][2], a[fx][fy][3]));
            out.println("Case #" + (t_id + 1) + ": " + (ans < inf ? ans : "impossible"));
        }
    }

    class Pair {
        int x;
        int y;
        int p;

        Pair(int x, int y, int p) {
            this.x = x;
            this.y = y;
            this.p = p;
        }
    }
}

#include <cassert>
#include <cstring>

#include <algorithm>
#include <iostream>
#include <queue>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < int(b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

const int MAXN = 123;

struct Pt { int x, y; };

const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, 1, 0, -1};
const string lasers = "^>v<";

int dp[MAXN][MAXN][4];

struct ST {
  int x, y, tt;
  int& ref() { assert(tt < 4); return dp[x][y][tt]; }
};

struct Map {
  int R, S;
  char grid[MAXN][MAXN];

  Pt start, end;
  bool denied[MAXN][MAXN][4];

  void read() {
    scanf("%d %d", &R, &S);
    REP(i, R) scanf("%s", grid[i]);

    struct Laser { int x, y, init; };
    vector<Laser> ls;

    REP(i, R) REP(j, S) {
      if (grid[i][j] == 'S') {
        start = {i, j};
        grid[i][j] = '.';
      } else if (grid[i][j] == 'G') {
        end = {i, j};
        grid[i][j] = '.';
      } else if (lasers.find(grid[i][j]) != string::npos) {
        ls.push_back({i, j, (int)lasers.find(grid[i][j])});
        grid[i][j] = '#';
      }
    }

    memset(denied, false, sizeof denied);

    for (Laser L : ls) {
      REP(tt, 4) {
        int dir = (L.init + tt) % 4;

        for (int x = L.x+dx[dir], y = L.y+dy[dir]; valid(x, y) && grid[x][y] == '.';
             x += dx[dir], y += dy[dir]) {
          denied[x][y][tt] = true;
        }
      }
    }
  }

  bool valid(int x, int y) { return (x >= 0 && y >= 0 && x < R && y < S); }  

  int solve() {
    memset(dp, -1, sizeof dp);

    queue<ST> Q; 
    int best = 1e9;
    ST orig = {start.x, start.y, 0};
    for (Q.push(orig), orig.ref() = 0; !Q.empty(); Q.pop()) {
      ST ex = Q.front();
      if (ex.x == end.x && ex.y == end.y) best = min(best, ex.ref());

      REP(dir, 4) {
        ST nov = {ex.x + dx[dir], ex.y + dy[dir], (ex.tt+1)%4};
        if (valid(nov.x, nov.y) && grid[nov.x][nov.y] != '#') {
          if (!denied[nov.x][nov.y][nov.tt] && nov.ref() == -1) {
            nov.ref() = ex.ref() + 1;
            Q.push(nov);
          }
        }
      }
    }   

    return best;
  }
};

int main(void) {
  int ntc; scanf("%d", &ntc);
  REP(tc, ntc) {
    Map M; M.read();    
    int ans = M.solve();
    printf("Case #%d: ", tc+1);

    if (ans >= (int)1e9) printf("impossible\n");
    else printf("%d\n", ans);
  }
  return 0;
}   

import java.awt.*;
import java.util.*;

class Node implements Comparable<Node> {
    public int minCost;
    public int estimate;
    public Node[] connections;
    public boolean end;

    public Node() {
        minCost = Integer.MAX_VALUE;
        end = false;
    }

    @Override
    public int compareTo(Node o) {
        return (this.minCost + this.estimate) - (o.minCost + o.estimate);
    }
}

class Maze {
    int width;
    int height;
    boolean[][] tiles;

    public Maze(int width, int height) {
        this.width = width;
        this.height = height;
        this.tiles = new boolean[height][width];
    }
}

public class Problem3 {
//    private static HashMap<Integer, Node> nodes;
    private static PriorityQueue<Node> queue;
    private static Point entryPoint;
    private static Node entryNode;
    private static Point endPoint;
//    private static Node endNode;
//    private static Set<Node> endNodes;
    private static Scanner in;

    public static void main(String[] args) {
        in = new Scanner(System.in);
        int cases = in.nextInt();

        for (int i = 0; i < cases; i++) {
            int h = in.nextInt();
            int w = in.nextInt();
            Maze[] mazes = readMazes(w, h);
//            printMaze(mazes[0]);
//            printMaze(mazes[1]);
//            printMaze(mazes[2]);
//            printMaze(mazes[3]);
//            System.out.println("start: " + entryPoint);
//            System.out.println("end: " + endPoint);
            buildGraph(mazes);
            int cost = solveGraph();

            if (cost >= 1) {
                System.out.println("Case #" + (i+1) + ": " + cost);
            }
            else {
                System.out.println("Case #" + (i+1) + ": " + "impossible");
            }
        }
    }

    private static boolean isTileBlockable(char tile) {
        if (tile == '.' || tile == 'S' || tile == 'G') {
            return true;
        }
        else {
            return false;
        }
    }

    private static void replaceTurrets(char[][] maze, int width, int height) {
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                char tile = maze[y][x];
                if (tile == '<') {
                    maze[y][x] = '#';
                    int xp = x-1;
                    while (xp >= 0) {
                        if (isTileBlockable(maze[y][xp])) {
                            maze[y][xp] = '#';
                        }
                        else {
                            break;
                        }
                        xp--;
                    }
                }
                else if (tile == '>') {
                    maze[y][x] = '#';
                    int xp = x+1;
                    while (xp < width) {
                        if (isTileBlockable(maze[y][xp])) {
                            maze[y][xp] = '#';
                        }
                        else {
                            break;
                        }
                        xp++;
                    }
                }
                else if (tile == '^') {
                    maze[y][x] = '#';
                    int yp = y-1;
                    while (yp >= 0) {
                        if (isTileBlockable(maze[yp][x])) {
                            maze[yp][x] = '#';
                        }
                        else {
                            break;
                        }
                        yp--;
                    }
                }
                else if (tile == 'v') {
                    maze[y][x] = '#';
                    int yp = y+1;
                    while (yp < height) {
                        if (isTileBlockable(maze[yp][x])) {
                            maze[yp][x] = '#';
                        }
                        else {
                            break;
                        }
                        yp++;
                    }
                }
            }
        }
    }

    private static char[][] rotatedMaze(char[][] maze, int width, int height) {
        char[][] newMaze = new char[height][width];

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                if (maze[y][x] == '<') {
                    newMaze[y][x] = '^';
                }
                else if (maze[y][x] == '^') {
                    newMaze[y][x] = '>';
                }
                else if (maze[y][x] == '>') {
                    newMaze[y][x] = 'v';
                }
                else if (maze[y][x] == 'v') {
                    newMaze[y][x] = '<';
                }
                else {
                    newMaze[y][x] = maze[y][x];
                }
            }
        }

        return newMaze;
    }

    private static Maze mazeFromCharMaze(char[][] charMaze, int width, int height) {
        Maze maze = new Maze(width, height);

        replaceTurrets(charMaze, width, height);
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                char tile = charMaze[y][x];
                if (tile == '.' || tile == 'S' || tile == 'G') maze.tiles[y][x] = true;
                else maze.tiles[y][x] = false;
            }
        }

        return maze;
    }

    private static Maze[] readMazes(int width, int height) {
        char[][] charMaze = new char[height][width];

        for (int y = 0; y < height; y++) {
            String line = in.next();
            for (int x = 0; x < width; x++) {
                char tile = line.charAt(x);
                if (tile == 'S') {
                    entryPoint = new Point(x, y);
                }
                else if (tile == 'G') {
                    endPoint = new Point(x, y);
                }
                charMaze[y][x] = tile;
            }
        }

        char[][] charMaze2 = rotatedMaze(charMaze, width, height);
        char[][] charMaze3 = rotatedMaze(charMaze2, width, height);
        char[][] charMaze4 = rotatedMaze(charMaze3, width, height);
        Maze m1 = mazeFromCharMaze(charMaze, width, height);
        Maze m2 = mazeFromCharMaze(charMaze2, width, height);
        Maze m3 = mazeFromCharMaze(charMaze3, width, height);
        Maze m4 = mazeFromCharMaze(charMaze4, width, height);
        Maze[] mazes = {m1, m2, m3, m4};

        return mazes;
    }

    private static int solveGraph() {
        queue = new PriorityQueue<Node>();
        queue.add(entryNode);
        entryNode.minCost = 0;
        int cost = -1;

        while (queue.size() > 0) {
            Node node = queue.poll();
            if (node.end) {
                cost = node.minCost;
                break;
            }
            for (Node n: node.connections) {
                if (node.minCost + 1 < n.minCost) {
                    n.minCost = node.minCost+1;
                    queue.add(n);
                }
            }
        }

        return cost;
    }

    private static int estimate(Point from, int z, Maze[] mazes) {
        int xp = Math.abs(from.x - endPoint.x);
        int yp = Math.abs(from.y - endPoint.y);

        return xp + yp;
    }

    private static void buildGraph(Maze[] mazes) {
        int width = mazes[0].width;
        int height = mazes[0]. height;
        Node[][][] nodes = new Node[4][height][width];

        for (int z = 0; z < 4; z++) {
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    nodes[z][y][x] = new Node();
                    nodes[z][y][x].estimate = estimate(new Point(x, y), z, mazes);
                    if (x == endPoint.x && y == endPoint.y) {
                        nodes[z][y][x].end = true;
                    }
                }
            }
        }

        for (int z = 0; z < 4; z++) {
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    ArrayList<Node> nextNodes = new ArrayList<Node>(4);
                    int zp = (z+1)%4;
                    if (y > 0) {
                        if (mazes[zp].tiles[y-1][x]) {
                            nextNodes.add(nodes[zp][y-1][x]);
                        }
                    }
                    if (x < width-1) {
                        if (mazes[zp].tiles[y][x+1]) {
                            nextNodes.add(nodes[zp][y][x+1]);
                        }
                    }
                    if (y < height-1) {
                        if (mazes[zp].tiles[y+1][x]) {
                            nextNodes.add(nodes[zp][y+1][x]);
                        }
                    }
                    if (x > 0) {
                        if (mazes[zp].tiles[y][x-1]) {
                            nextNodes.add(nodes[zp][y][x-1]);
                        }
                    }
                    nodes[z][y][x].connections = nextNodes.toArray(new Node[nextNodes.size()]);
                }
            }
        }

        entryNode = nodes[0][entryPoint.y][entryPoint.x];
    }

    private static void printMaze(Maze maze) {
        for (int y = 0; y < maze.height; y++) {
            for (int x = 0; x < maze.width; x++) {
                System.out.print(maze.tiles[y][x] + " ");
            }
            System.out.println();
        }
    }
}

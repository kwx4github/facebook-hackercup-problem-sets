#include <cassert>
#include <cstdio>
#include <cstring>
#include <vector>

int dy[4] = {0, 1, 0, -1};
int dx[4] = {1, 0, -1, 0};

int main () {
  using std::vector;
  int tn;
  assert (scanf ("%d", &tn) == 1);
  for (int tt = 1; tt <= tn; tt++) {
    int m, n;
    assert (scanf ("%d%d", &m, &n) == 2);
    char c[m][n];
    int gy = -1, gx = -1, sy = -1, sx = -1;
    for (int i = 0; i < m; i++)
      for (int j = 0; j < n; j++) {
        assert (scanf (" %c", &c[i][j]) == 1);
        if (c[i][j] == 'S')
          sy = i, sx = j;
        if (c[i][j] == 'G')
          gy = i, gx = j;
      }
    int vn = 4 * n * m;
    vector <int> g[vn];
    #define V(t, y, x) ( (t) % 4 * n * m + (y) * n + (x) )
    int start = V (0, sy, sx);
    int goal = V (0, gy, gx);
    for (int t = 0; t < 4; t++) {
      bool ok[m][n];
      for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++) {
          ok[i][j] = c[i][j] == '.' || c[i][j] == 'S' || c[i][j] == 'G';
        }
      for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++) {
          int d = -1;
          if (c[i][j] == '>')
            d = 0;
          if (c[i][j] == 'v')
            d = 1;
          if (c[i][j] == '<')
            d = 2;
          if (c[i][j] == '^')
            d = 3;
          if (d == -1)
            continue;
          d = (d + t + 1) % 4;
          int y = i + dy[d];
          int x = j + dx[d];
          while (true) {
            if (x < 0 || x >= n || y < 0 || y >= m)
              break;
            if (!(c[y][x] == '.' || c[y][x] == 'S' || c[y][x] == 'G'))
              break;
            ok[y][x] = 0;
            y += dy[d];
            x += dx[d];
          }
        }
      for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
          for (int d = 0; d < 4; d++) {
            int y = i + dy[d];
            int x = j + dx[d];
            if (x < 0 || x >= n || y < 0 || y >= m)
              continue;
            if (!ok[y][x])
              continue;
            // fprintf (stderr, "edge: (%d: %d,%d,%d) -> (%d: %d,%d,%d)\n", V(t, i, j), t, i, j, V(t + 1, y, x), t + 1, y, x);
            g[V(t, i, j)].push_back (V(t + 1, y, x));
          }
    }
    int q[vn], qs = 0, qz = 0;
    int d[vn];
    memset (d, -1, sizeof (d[0]) * vn);
    d[start] = 0;
    q[qs + qz++] = start;
    while (qz > 0) {
      int u = q[qs++]; qz--;
      // fprintf (stderr, "d[u=%d] = %d\n", u, d[u]);
      for (int i = 0; i < (int)g[u].size (); i++) {
        if (d[g[u][i]] != -1)
          continue;
        d[g[u][i]] = d[u] + 1;
        q[qs + qz++] = g[u][i];
      }
    }
    int ans = -1;
    for (int t = 0; t < 4; t++) {
      if (d[t * n * m + goal] == -1)
        continue;
      if (ans == -1 || ans > d[t * n * m + goal])
        ans = d[t * n * m + goal];
    }
    if (ans == -1)
      printf ("Case #%d: impossible\n", tt);
    else
      printf ("Case #%d: %d\n", tt, ans);
  }
  return 0;
}


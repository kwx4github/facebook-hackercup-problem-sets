// iostream is too mainstream
#include <cstdio>
// bitch please
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <tuple>
#include <list>
#include <cmath>
#include <iomanip>
#include <time.h>
#define dibs reserve
#define OVER9000 1234567890
#define ALL_THE(CAKE,LIE) for(auto LIE =CAKE.begin(); LIE != CAKE.end(); LIE++)
#define tisic 47
#define soclose 1e-9
#define chocolate win
// so much chocolate
#define patkan 9
#define ff first
#define ss second
#define abs(x) ((x < 0)?-(x):x)
#define uint unsigned int
#define dbl long double
using namespace std;
// mylittledoge

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	int T;
	cin >> T;
	for(int t =0; t < T; t++) {
		cout << "Case #" << t+1 << ": ";
		int N,M;
		cin >> N >> M;
		vector<string> V(N);
		vector< vector<bool> > free[4];
		for(int i =0; i < 4; i++) free[i].resize(N,vector<bool>(M,true));
		pair<int,int> st,goal;
		for(int i =0; i < N; i++) cin >> V[i];
		for(int i =0; i < N; i++) {
			for(int j =0; j < M; j++) if(V[i][j] == '#') 
				for(int k =0; k < 4; k++) free[k][i][j] =false;
			for(int j =0; j < M; j++) if(V[i][j] != '.' && V[i][j] != 'S' && V[i][j] != 'G' && V[i][j] != '#') {
				int tt =0;
				if(V[i][j] == '>') tt =0;
				if(V[i][j] == 'v') tt =1;
				if(V[i][j] == '<') tt =2;
				if(V[i][j] == '^') tt =3;
				for(int k =0; k < 4; k++) {
					if(tt == 0) for(int l =j; l < M; l++) {
						if(j != l) if(V[i][l] != '.' && V[i][l] != 'S' && V[i][l] != 'G') break;
						free[k][i][l] =false;}
					if(tt == 1) for(int l =i; l < N; l++) {
						if(i != l) if(V[l][j] != '.' && V[l][j] != 'S' && V[l][j] != 'G') break;
						free[k][l][j] =false;}
					if(tt == 2) for(int l =j; l >= 0; l--) {
						if(j != l) if(V[i][l] != '.' && V[i][l] != 'S' && V[i][l] != 'G') break;
						free[k][i][l] =false;}
					if(tt == 3) for(int l =i; l >= 0; l--) {
						if(i != l) if(V[l][j] != '.' && V[l][j] != 'S' && V[l][j] != 'G') break;
						free[k][l][j] =false;}
					tt =(tt+1)%4;}
				}
			for(int j =0; j < M; j++) {
				if(V[i][j] == 'S') st =make_pair(i,j);
				if(V[i][j] == 'G') goal =make_pair(i,j);}
			}
		vector< vector<int> > D[4];
		for(int i =0; i < 4; i++) D[i].resize(N,vector<int>(M,OVER9000));
		queue< tuple<int,int,int> > q;
		q.push(make_tuple(0,st.ff,st.ss));
		D[0][st.ff][st.ss] =0;
		int dx[] ={1,-1,0,0};
		int dy[] ={0,0,1,-1};
		while(!q.empty()) {
			tuple<int,int,int> tt =q.front();
			int x =get<1>(tt), y =get<2>(tt), tA =get<0>(tt);
			for(int i =0; i < 4; i++) if(x+dx[i] >= 0 && y+dy[i] >= 0 && x+dx[i] < N && y+dy[i] < M) 
				if(free[(tA+1)%4][x+dx[i]][y+dy[i]]) if(D[(tA+1)%4][x+dx[i]][y+dy[i]] > D[tA][x][y]+1) {
					D[(tA+1)%4][x+dx[i]][y+dy[i]] =D[tA][x][y]+1;
					q.push(make_tuple((tA+1)%4,x+dx[i],y+dy[i]));}
			q.pop();}
		int ans =OVER9000;
		for(int i =0; i < 4; i++) if(free[i][goal.ff][goal.ss])
			ans =min(ans,D[i][goal.ff][goal.ss]);
		if(ans == OVER9000) cout << "impossible\n";
		else cout << ans << "\n";}
	return 0;}

// look at my code
// my code is amazing
	
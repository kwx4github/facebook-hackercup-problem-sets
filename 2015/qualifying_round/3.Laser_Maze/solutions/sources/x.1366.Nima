from collections import deque

tcou = int(raw_input())
nexts = {
    '<': '<^>v',
    '^': '^>v<',
    '>': '>v<^',
    'v': 'v<^>',
}
for tnum in range(1, tcou+1):
    R, C = [int(x) for x in raw_input().split()]
    maze = [raw_input() for _ in range(R)]
    def valid(state):
        r, c, t = state
        if r<0 or r>=R or c<0 or c>=C:
            return False
        if maze[r][c] not in 'SG.':
            return False
        for d, dr, dc in [('v', -1, 0), ('>', 0, -1), ('^', 1, 0), ('<', 0, 1)]:
            nr, nc = r, c
            while nr>=0 and nr<R and nc>=0 and nc<C:
                if maze[nr][nc] in 'v><^':
                    if nexts[maze[nr][nc]][t]==d:
                        return False
                nr += dr
                nc += dc
        return True
    start = None
    goal = None
    for r in range(len(maze)):
        for c in range(len(maze[r])):
            if maze[r][c] == 'S':
                start = (r, c, 0)
            if maze[r][c] == 'G':
                goal = (r, c)
    answer = None
    q = deque()
    d = {}
    d[start] = 0
    q.append(start)
    while len(q)>0:
        v = q.popleft()
        r, c, t = v
        if (r, c)==goal:
            answer = d[v]
            break
        for dr, dc in [(-1, 0), (0, -1), (1, 0), (0, 1)]:
            w = (r+dr, c+dc, (t+1)%4)
            if valid(w) and w not in d:
                d[w] = d[v]+1
                q.append(w)
    print "Case #{}: {}".format(tnum, 'impossible' if answer is None else answer)

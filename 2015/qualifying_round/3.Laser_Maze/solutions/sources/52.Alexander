#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>
#include <cctype>
#include <map>
#include <climits>
#include <set>
#include <cmath>
#include <utility>
using namespace std;

string maze[110];
long long dp[110][110][4];

int main()
{
  ifstream fin("laser_maze.txt");
  ofstream fout("laser_maze_output.txt");

  int T, M, N, temp, ansx, ansy;
  fin >> T;

  for(int i=0; i<T; i++){
    fin >> M >> N;
    for(int j=0; j<M; j++){
      fin >> maze[j];
    }
    for(int x=0; x<M; x++){
      for(int y=0; y<N; y++){
        for(int z=0; z<4; z++){
          dp[x][y][z]=9999999999;
          if(maze[x][y]=='G'){
            dp[x][y][z]=0;
          }
          if(maze[x][y]=='S'){
            ansx=x;
            ansy=y;
          }
        }
      }
    }
    //DEBUG
    /*fout << "***DEBUG***" << endl;
    for(int x=0; x<M; x++){
      for(int y=0; y<N; y++){
        fout << maze[x][y];
      }
      fout << endl;
    }
    fout << "***DEBUG***" << endl;
    for(int x=0; x<M; x++){
      for(int y=0; y<N; y++){
        fout << dp[x][y][2] << " ";
      }
      fout << endl;
    }*/
    //DEBUG
    for(int x=0; x<M; x++){
      for(int y=0; y<N; y++){
        if(maze[x][y]=='<'){
          temp=y;
          temp--;
          while(temp>=0 && (maze[x][temp]=='.' || maze[x][temp]=='S' || maze[x][temp]=='G')){
            dp[x][temp][0]=-1;
            temp--;
          }
          temp=x;
          temp--;
          while(temp>=0 && (maze[temp][y]=='.' || maze[temp][y]=='S' || maze[temp][y]=='G')){
            dp[temp][y][1]=-1;
            temp--;
          }
          temp=y;
          temp++;
          while(temp<N && (maze[x][temp]=='.' || maze[x][temp]=='S' || maze[x][temp]=='G')){
            dp[x][temp][2]=-1;
            temp++;
          }
          temp=x;
          temp++;
          while(temp<M && (maze[temp][y]=='.' || maze[temp][y]=='S' || maze[temp][y]=='G')){
            dp[temp][y][3]=-1;
            temp++;
          }
        }
        if(maze[x][y]=='^'){
          temp=y;
          temp--;
          while(temp>=0 && (maze[x][temp]=='.' || maze[x][temp]=='S' || maze[x][temp]=='G')){
            dp[x][temp][3]=-1;
            temp--;
          }
          temp=x;
          temp--;
          while(temp>=0 && (maze[temp][y]=='.' || maze[temp][y]=='S' || maze[temp][y]=='G')){
            dp[temp][y][0]=-1;
            temp--;
          }
          temp=y;
          temp++;
          while(temp<N && (maze[x][temp]=='.' || maze[x][temp]=='S' || maze[x][temp]=='G')){
            dp[x][temp][1]=-1;
            temp++;
          }
          temp=x;
          temp++;
          while(temp<M && (maze[temp][y]=='.' || maze[temp][y]=='S' || maze[temp][y]=='G')){
            dp[temp][y][2]=-1;
            temp++;
          }
        }
        if(maze[x][y]=='>'){
          temp=y;
          temp--;
          while(temp>=0 && (maze[x][temp]=='.' || maze[x][temp]=='S' || maze[x][temp]=='G')){
            dp[x][temp][2]=-1;
            temp--;
          }
          temp=x;
          temp--;
          while(temp>=0 && (maze[temp][y]=='.' || maze[temp][y]=='S' || maze[temp][y]=='G')){
            dp[temp][y][3]=-1;
            temp--;
          }
          temp=y;
          temp++;
          while(temp<N && (maze[x][temp]=='.' || maze[x][temp]=='S' || maze[x][temp]=='G')){
            dp[x][temp][0]=-1;
            temp++;
          }
          temp=x;
          temp++;
          while(temp<M && (maze[temp][y]=='.' || maze[temp][y]=='S' || maze[temp][y]=='G')){
            dp[temp][y][1]=-1;
            temp++;
          }
        }
        if(maze[x][y]=='v'){
          temp=y;
          temp--;
          while(temp>=0 && (maze[x][temp]=='.' || maze[x][temp]=='S' || maze[x][temp]=='G')){
            dp[x][temp][1]=-1;
            temp--;
          }
          temp=x;
          temp--;
          while(temp>=0 && (maze[temp][y]=='.' || maze[temp][y]=='S' || maze[temp][y]=='G')){
            dp[temp][y][2]=-1;
            temp--;
          }
          temp=y;
          temp++;
          while(temp<N && (maze[x][temp]=='.' || maze[x][temp]=='S' || maze[x][temp]=='G')){
            dp[x][temp][3]=-1;
            temp++;
          }
          temp=x;
          temp++;
          while(temp<M && (maze[temp][y]=='.' || maze[temp][y]=='S' || maze[temp][y]=='G')){
            dp[temp][y][0]=-1;
            temp++;
          }
        }
        if(maze[x][y]=='#' || maze[x][y]=='v' || maze[x][y]=='<' || maze[x][y]=='^' || maze[x][y]=='>'){
          dp[x][y][0]=dp[x][y][1]=dp[x][y][2]=dp[x][y][3]=-1;
        }
      }
    }
    //DEBUG
    /*fout << "***DEBUG***" << endl;
    for(int x=0; x<M; x++){
      for(int y=0; y<N; y++){
        fout << maze[x][y];
      }
      fout << endl;
    }
    fout << "***DEBUG***" << endl;
    for(int x=0; x<M; x++){
      for(int y=0; y<N; y++){
        fout << dp[x][y][2] << " ";
      }
      fout << endl;
    }*/
    //DEBUG
    for(int k=0; k<1000; k++){
      for(int x=0; x<M; x++){
        for(int y=0; y<N; y++){
          if(dp[x][y][0]==-1 && maze[x][y]=='S' && k==0){
            dp[x][y][0]=9999999999;
          }
          if(x>0 && dp[x-1][y][(k+1)%4]!=-1){
            dp[x][y][k%4]=min(dp[x][y][k%4], 1+dp[x-1][y][(k+1)%4]);
          }
          if(x<M-1 && dp[x+1][y][(k+1)%4]!=-1){
            dp[x][y][k%4]=min(dp[x][y][k%4], 1+dp[x+1][y][(k+1)%4]);
          }
          if(y>0 && dp[x][y-1][(k+1)%4]!=-1){
            dp[x][y][k%4]=min(dp[x][y][k%4], 1+dp[x][y-1][(k+1)%4]);
          }
          if(y<N-1 && dp[x][y+1][(k+1)%4]!=-1){
            dp[x][y][k%4]=min(dp[x][y][k%4], 1+dp[x][y+1][(k+1)%4]);
          }
        }
      }
    }
    //DEBUG
    /*fout << "***DEBUG***" << endl;
    for(int x=0; x<M; x++){
      for(int y=0; y<N; y++){
        fout << maze[x][y];
      }
      fout << endl;
    }
    fout << "***DEBUG***" << endl;
    for(int x=0; x<M; x++){
      for(int y=0; y<N; y++){
        fout << dp[x][y][2] << " ";
      }
      fout << endl;
    }*/
    //DEBUG
    if(dp[ansx][ansy][0]==9999999999){
      fout << "Case #" << i+1 << ": impossible" << endl;
    }
    else{
      fout << "Case #" << i+1 << ": " << dp[ansx][ansy][0] << endl;
    }
  }
  return 0;
}

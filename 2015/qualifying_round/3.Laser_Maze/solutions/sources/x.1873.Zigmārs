#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <tuple>
#include <queue>
#include <utility>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <climits>
// #include <cstdint>

using namespace std;

typedef pair<int,int> pii;
enum class Square : uint8_t {empty = 0, wall, start, goal};

int n, m;


pii start, goal;
char grid[102][102][4];
// bool visited[102][102][4];

vector<tuple<int, int, int>> lasers;
void printGrid(int i){
	for(int ni = 0; ni <= n+1; ni++){
		for(int mi = 0; mi <= m+1; mi++){
			cout << grid[ni][mi][i];
		}
		cout << "\n";
	}
	cout << "\n";
}

void printGrids(){
	for(int i = 0; i < 4; i++){
		printGrid(i);
	}
}

void read_and_make_grid(){
	char ch;
	cin >> n >> m;
	for(int ni = 0; ni <= n+1; ni++){
		grid[ni][0][0] = grid[ni][0][1] = grid[ni][0][2] = grid[ni][0][3] = '#';
		grid[ni][m+1][0] = grid[ni][m+1][1] = grid[ni][m+1][2] = grid[ni][m+1][3] = '#';
	}
	for(int mi = 0; mi <= m+1; mi++){
		grid[0][mi][0] = grid[0][mi][1] = grid[0][mi][2] = grid[0][mi][3] = '#';
		grid[n+1][mi][0] = grid[n+1][mi][1] = grid[n+1][mi][2] = grid[n+1][mi][3] = '#';
	}
	// printGrids();
	// cout << "______________Contour Done______________\n";
		
	
	lasers.clear();
	
	for(int ni = 1; ni <= n ; ni++){
		for(int mi = 1; mi <= m ; mi++){
			cin >> ch;
			switch(ch){
			case '.':
				grid[ni][mi][0] = grid[ni][mi][1] = grid[ni][mi][2] = grid[ni][mi][3] = '.';
			break;
			case '#':
				grid[ni][mi][0] = grid[ni][mi][1] = grid[ni][mi][2] = grid[ni][mi][3] = '#';
			break;
			case '>':
				// cout << ">: (" << ni << ", " << mi << ", 3)\n";
				lasers.push_back(make_tuple(ni, mi, 0));
				grid[ni][mi][0] = grid[ni][mi][1] = grid[ni][mi][2] = grid[ni][mi][3] = '#';
			break;
			case '^':
				// cout << "^: (" << ni << ", " << mi << ", 3)\n";
				lasers.push_back(make_tuple(ni, mi, 1));
				grid[ni][mi][0] = grid[ni][mi][1] = grid[ni][mi][2] = grid[ni][mi][3] = '#';
			break;
			case '<':
				// cout << "<: (" << ni << ", " << mi << ", 3)\n";
				lasers.push_back(make_tuple(ni, mi, 2));
				grid[ni][mi][0] = grid[ni][mi][1] = grid[ni][mi][2] = grid[ni][mi][3] = '#';
			break;
			case 'v':
				// cout << "v: (" << ni << ", " << mi << ", 3)\n";
				lasers.push_back(make_tuple(ni, mi, 3));
				grid[ni][mi][0] = grid[ni][mi][1] = grid[ni][mi][2] = grid[ni][mi][3] = '#';
			break;
			case 'S':
				grid[ni][mi][0] = grid[ni][mi][1] = grid[ni][mi][2] = grid[ni][mi][3] = '.';
				start.first = ni; start.second = mi;
			break;
			case 'G':
				grid[ni][mi][0] = grid[ni][mi][1] = grid[ni][mi][2] = grid[ni][mi][3] = '.';
				goal.first = ni; goal.second = mi;
			break;
			}
		}
	}

	// printGrids();
	// cout << "______________Walls Done______________\n";
	
	for(auto it = lasers.begin(); it != lasers.end(); it++){
		int row = get<0>(*it), col = get<1>(*it), dir = get<2>(*it);
		// cout << "row, col, dir = " << row << ", " << col << ", " << dir << "\n";
		for(int i = col; i == col || grid[row][i][dir] != '#'; i++){
			grid[row][i][dir] = 'L';
		}
		for(int i = row; i == row || grid[i][col][(dir+1)%4] != '#'; i++){
			grid[i][col][(dir+1)%4] = 'L';
		}
		for(int i = col; i == col || grid[row][i][(dir+2)%4] != '#'; i--){
			grid[row][i][(dir+2)%4] = 'L';
		}
		for(int i = row; i == row || grid[i][col][(dir+3)%4] != '#'; i--){
			grid[i][col][(dir+3)%4] = 'L';
		}
	}
	
	// printGrids();
	// cout << "______________All Done______________\n";
}

int solve(){

	queue<pii> levelQueue;
	levelQueue.push(start);
	int depth = 0;
	bool fail = true;
	for(;fail && !levelQueue.empty();depth++) {
		int levelSize = levelQueue.size();
		for(int i = 0; i < levelSize; i++){
			// cout << "depth == " << depth << "\n";
			pii curPos = levelQueue.front();
			levelQueue.pop();
			if(depth != 0 && grid[curPos.first][curPos.second][depth%4] != '.'){
				continue;
			}
			else {
				grid[curPos.first][curPos.second][depth%4] = '+';
			}
			if(curPos == goal){
				fail = false;
				goto freedom;
			}
			
			pii nextPos = curPos;
			nextPos.first += 1;
			levelQueue.push(nextPos);
			nextPos.first -= 2;
			levelQueue.push(nextPos);
			nextPos = curPos;
			nextPos.second += 1;
			levelQueue.push(nextPos);
			nextPos.second -= 2;
			levelQueue.push(nextPos);
			
		}
		// printGrids();
	}
	freedom:
	if(!fail){
		return depth;
	}
	return -1;
}

int t;

int main(){
	cin >> t;
	for(int ti = 1; ti <= t; ti++){
		memset(grid, '.', sizeof(char)*102*102*4);
		// memset(visited, 0, sizeof(bool)*102*102*4);
		read_and_make_grid();
		
		int sol = solve();
		cout << "Case #" << ti << ": ";
		if(sol < 0){
			cout << "impossible\n";
		}
		else {
			cout << sol << "\n";
		}
	}
	return 0;
}
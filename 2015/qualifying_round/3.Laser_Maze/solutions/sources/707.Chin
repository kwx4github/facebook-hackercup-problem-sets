#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <queue>
using namespace std;

int T;
int X, Y;
int SX, SY, DX, DY;
char turrets[] = "<^>v";
int delta[4][2] = { {0, -1}, {-1, 0}, {0, 1}, {1, 0} };
bool accessible[200][200][4];
bool visited[200][200][4];
char maze[200][200];

struct dat {
  int x, y, d;
};

bool isBlocker(char c) {
  if (c == '#') return true;
  for (int k = 0; k < 4; k++) {
    if (c == turrets[k]) return true;
  }
  return false;
}
bool isOutOfMaze(int x, int y) {
  if (x < 0 || x >= X || y < 0 || y >= Y) return true;
  return false;
}

void generateLasers(int y, int x, int k) {
  for (int i = 0; i < 4; i++) {
    int tx = x;
    int ty = y;
    for (;;) {
      tx += delta[(k+i)%4][1];
      ty += delta[(k+i)%4][0];
      if (isOutOfMaze(tx, ty) || isBlocker(maze[ty][tx])) {
        break;
      }
      accessible[ty][tx][i] = false;
    }
  }
  return;
}

int main () {
  scanf("%d", &T);
  for (int TC = 1; TC <= T; TC++) {
    scanf("%d%d", &Y, &X);
    for (int i = 0; i < Y; i++) {
      scanf("%s", maze[i]);
      for (int j = 0; j < X; j++) {
        for (int k = 0; k < 4; k++) {
          accessible[i][j][k] = true;
          visited[i][j][k] = false;
        }
      }
    }
    for (int i = 0; i < Y; i++) {
      for (int j = 0; j < X; j++) {
        if (maze[i][j] == 'S') {
          SX = j;
          SY = i;
        } else if (maze[i][j] == 'G') {
          DX = j;
          DY = i;
        } else if (maze[i][j] == '#') {
          for (int k = 0; k < 4; k++) accessible[i][j][k] = false;
        } else if (maze[i][j] == '.') {
        } else {
          for (int k = 0; k < 4; k++) {
            accessible[i][j][k] = false;
            if (turrets[k] == maze[i][j]) {
              generateLasers(i, j, k);
            }
          }
        }
      }
    }
    /*for (int i = 0; i < 4; i++) {
      for (int j = 0; j < Y; j++) {
        for (int k = 0; k < X; k++) {
          if (accessible[j][k][i]) {
            printf(".");
          } else {
            printf("#");
          }
        }
        printf("\n");
      }
      printf("\n");
    }
    printf("===\n");
    */
    visited[SY][SX][0] = true;
    queue<dat> q;
    while (!q.empty()) q.pop();
    dat td;
    td.x = SX;
    td.y = SY;
    td.d = 0;
    int ret = -1;
    q.push(td);
    while (!q.empty()) {
      td = q.front();
      q.pop();
      if (td.x == DX && td.y == DY) {
        ret = td.d;
        break;
      }
      dat nd;
      for (int i = 0; i < 4; i++) {
        nd.x = td.x + delta[i][1];
        nd.y = td.y + delta[i][0];
        nd.d = td.d + 1;
        if (isOutOfMaze(nd.x,nd.y)) continue;
        if (!accessible[nd.y][nd.x][nd.d%4]) continue;
        if (visited[nd.y][nd.x][nd.d%4]) continue;
        visited[nd.y][nd.x][nd.d%4] = true;
        q.push(nd);
      }
    }
    printf("Case #%d: ", TC);
    if (ret == -1) {
      printf("impossible\n");
    } else {
      printf("%d\n", ret);
    }
  }
  return 0;
}

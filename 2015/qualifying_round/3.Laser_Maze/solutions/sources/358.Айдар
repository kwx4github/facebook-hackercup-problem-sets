#include <fstream>
#include <queue>

using namespace std;

const int MAXN = 105, INF = 1000 * 1000 * 1000 + 5;
char c[MAXN][MAXN];
int dir[MAXN][MAXN][4], dist[MAXN][MAXN][4],
    gox[4] = {-1, 0, 1, 0}, goy[4] = {0, -1, 0, 1};

int getDir(char x) {
    return (x == '#'? -1 : (x == '^'? 0 : (x == '<'? 1 : (x == 'v'? 2 : 3))));
}

bool bad(int x, int y, int d) {
    for(int i = 0; i < 4; i++)
        if(dir[x][y][i] == ((i ^ 2) + 4 - d) % 4)
            return true;
    return false;
}

int main() {
    ifstream in("input.txt");
    ofstream out("output.txt");
    int t;
    in >> t;
    for(int tt = 0; tt < t; tt++) {
        int n, m;
        in >> n >> m;
        int sx, sy, tx, ty;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++) {
                in >> c[i][j];
                if(c[i][j] == 'S') {
                    sx = i;
                    sy = j;
                    c[i][j] = '.';
                }
                else if(c[i][j] == 'G') {
                    tx = i;
                    ty = j;
                    c[i][j] = '.';
                }
            }
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++) {
                dir[i][j][0] = (i == 0? -1 :
                                (c[i - 1][j] == '.'? dir[i - 1][j][0] :
                                 getDir(c[i - 1][j])));
                dir[i][j][1] = (j == 0? -1 :
                                (c[i][j - 1] == '.'? dir[i][j - 1][1] :
                                 getDir(c[i][j - 1])));
            }
        for(int i = n - 1; i >= 0; i--)
            for(int j = m - 1; j >= 0; j--) {
                dir[i][j][2] = (i == n - 1? -1 :
                                (c[i + 1][j] == '.'? dir[i + 1][j][2] :
                                 getDir(c[i + 1][j])));
                dir[i][j][3] = (j == m - 1? -1 :
                                (c[i][j + 1] == '.'? dir[i][j + 1][3] :
                                 getDir(c[i][j + 1])));
            }
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                for(int k = 0; k < 4; k++)
                    dist[i][j][k] = INF;
        queue< pair< pair<int, int>, int> > q;
        q.push(make_pair(make_pair(sx, sy), 0));
        dist[sx][sy][0] = 0;
        while(!q.empty()) {
            int x = q.front().first.first, y = q.front().first.second,
                d = q.front().second;
            q.pop();
            int tod = (d + 1) % 4;
            for(int i = 0; i < 4; i++) {
                int tox = x + gox[i], toy = y + goy[i];
                if(tox < 0 || tox >= n || toy < 0 || toy >= m ||
                   c[tox][toy] != '.' || bad(tox, toy, tod) ||
                   dist[tox][toy][tod] <= dist[x][y][d] + 1)
                    continue;
                dist[tox][toy][tod] = dist[x][y][d] + 1;
                q.push(make_pair(make_pair(tox, toy), tod));
            }
        }
        int ans = INF;
        for(int i = 0; i < 4; i++)
            ans = min(ans, dist[tx][ty][i]);
        out << "Case #" << tt + 1 << ": ";
        if(ans == INF)
            out << "impossible";
        else
            out << ans;
        out << '\n';
    }
    return 0;
}

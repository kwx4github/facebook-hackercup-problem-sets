#include<bits/stdc++.h>
using namespace std;
#define LEFT 0
#define RIGHT 2
#define UP 1
#define DOWN 3
#define WALL 4
#define EMPTY 5
#define DEATH 6
class Graph
{
	public:
	int V;
	vector<int> *adj;
	Graph(int V);
	void addEdge(int v, int w);
	int printPath(int s, int d, vector<int> parent);
	int isReachable(int s, int d);
};
Graph::Graph(int n)
{
	V = n;
	adj = new vector<int>[n];
}
void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w);
}
int Graph::printPath(int s, int d, vector<int> parent)
{
	vector<int> path;
	while(d != s && d != -1)
	{
		path.push_back(d);
		d = parent[d];
	}
	if(d == -1)
	{
		return -1;
	}
	//cout<<d<<endl;
	// for(int i=path.size()-1;i>=0;i--)
	// {
	// 	//cout<<path[i]<<" ";
	// }
	return path.size();
}
int Graph::isReachable(int s, int d)
{
	if (s == d)
	{
		return 0;
	}
	int a = s;
	vector<bool> visited (V, false);
	list<int> queue;
	vector<int> parent (V, -1);
	visited[s] = true;
	queue.push_back(s);
	while (!queue.empty())
	{
		s = queue.front();
		queue.pop_front();
		for(int i = 0; i < adj[s].size() ; i++)
		{
			if(visited[adj[s][i]]==false)
				parent[adj[s][i]] = s;
			if(adj[s][i] == d)
			{
				return printPath(a, d, parent);
			}
			else
			{
				if(visited[adj[s][i]] == false)
				{
					visited[adj[s][i]] = true;
					queue.push_back(adj[s][i]);
				}
			}
		}
	}
	return -1;
}
// S..##
// .....
// .>v..
// .^<..
// ....G
int main()
{
	int t,n,p,m,i,j,k,start,goal;
	bool safe;
	string s;
	cin>>t;
	for(p=1;p<=t;++p)
	{
		cin>>m>>n;
		int a[4][m][n];
		Graph g(4*n*m+2);
		for(i=0;i<m;++i)
		{
			cin>>s;
			for(j=0;j<n;j++)
			{
				if(s[j]=='<')
					a[0][i][j]=LEFT;
				else if(s[j]=='>')
					a[0][i][j]=RIGHT;
				else if(s[j]=='^')
					a[0][i][j]=UP;
				else if(s[j]=='v')
					a[0][i][j]=DOWN;
				else if(s[j]=='#')
					a[0][i][j]=WALL;
				else
					a[0][i][j]=EMPTY;
				if(s[j]=='S')
					start=n*i+j;
				else if(s[j]=='G')
					goal=n*i+j;
			}
		}
		for(i=1;i<4;++i)
		{
			for(j=0;j<m;++j)
			{
				for(k=0;k<n;++k)
				{
					if(a[i-1][j][k]<WALL)
					{
						a[i][j][k]=(a[i-1][j][k]+1)%4;
					}
					else
						a[i][j][k]=a[i-1][j][k];
				}
			}
		}
		for(i=0;i<4;++i)
		{
			for(j=0;j<m;++j)
			{
				safe=true;
				for(k=0;k<n;++k)
				{
					if(a[i][j][k]==RIGHT)
						safe=false;
					else if(a[i][j][k]==EMPTY && !safe)
						a[i][j][k]=DEATH;
					else if(a[i][j][k]<=WALL)
						safe=true;
				}
				safe=true;
				for(k=n-1;k>=0;k--)
				{
					if(a[i][j][k]==LEFT)
						safe=false;
					else if(a[i][j][k]==EMPTY && !safe)
						a[i][j][k]=DEATH;
					else if(a[i][j][k]<=WALL)
						safe=true;
				}
			}
			for(k=0;k<n;++k)
			{
				safe=true;
				for(j=0;j<m;++j)
				{
					if(a[i][j][k]==DOWN)
						safe=false;
					else if(a[i][j][k]==EMPTY && !safe)
						a[i][j][k]=DEATH;
					else if(a[i][j][k]<=WALL)
						safe=true;
				}
				safe=true;
				for(j=m-1;j>=0;j--)
				{
					if(a[i][j][k]==UP)
						safe=false;
					else if(a[i][j][k]==EMPTY && !safe)
						a[i][j][k]=DEATH;
					else if(a[i][j][k]<=WALL)
						safe=true;
				}
			}
		}
		// cout<<"INPUT : "<<p<<endl;
		// for(i=0;i<4;++i)
		// {
		// 	for(j=0;j<m;j++)
		// 	{
		// 		for(k=0;k<n;k++)
		// 		{
		// 			if(a[i][j][k]==LEFT)
		// 				cout<<"<";
		// 			else if(a[i][j][k]==RIGHT)
		// 				cout<<">";
		// 			else if(a[i][j][k]==UP)
		// 				cout<<"^";
		// 			else if(a[i][j][k]==DOWN)
		// 				cout<<"v";
		// 			else if(a[i][j][k]==EMPTY)
		// 				cout<<".";
		// 			else if(a[i][j][k]==WALL)
		// 				cout<<"#";
		// 			else if(a[i][j][k]==DEATH)
		// 				cout<<"x";
		// 			else cout<<"?";
		// 		}
		// 		cout<<endl;
		// 	}
		// 	cout<<endl;
		// }
		for(i=0;i<4;++i)
		{
			for(j=0;j<m;++j)
			{
				for(k=0;k<n;++k)
				{
					if(a[i][j][k]!=EMPTY)continue;
					if(j-1>=0 && a[(i+1)%4][j-1][k]==EMPTY)g.addEdge(i*n*m+j*n+k, ((i+1)%4)*n*m+(j-1)*n+k);
					if(j+1<m && a[(i+1)%4][j+1][k]==EMPTY)g.addEdge(i*n*m+j*n+k, ((i+1)%4)*n*m+(j+1)*n+k);
					if(k-1>=0 && a[(i+1)%4][j][k-1]==EMPTY)g.addEdge(i*n*m+j*n+k, ((i+1)%4)*n*m+j*n+k-1);
					if(k+1<n && a[(i+1)%4][j][k+1]==EMPTY)g.addEdge(i*n*m+j*n+k, ((i+1)%4)*n*m+j*n+k+1);
				}
			}
		}
		i=0;
		j=start/n;
		k=start%n;
		g.addEdge(goal, 4*n*m+1);
		g.addEdge( goal+n*m, 4*n*m+1);
		g.addEdge(goal+2*n*m, 4*n*m+1);
		g.addEdge(goal+3*n*m, 4*n*m+1);
		vector<int> ans;
		if(j-1>=0 && a[(i+1)%4][j-1][k]==EMPTY)ans.push_back(g.isReachable(n*m+(j-1)*n+k, 4*n*m+1));
		if(j+1<m && a[(i+1)%4][j+1][k]==EMPTY)ans.push_back(g.isReachable(n*m+(j+1)*n+k, 4*n*m+1));
		if(k-1>=0 && a[(i+1)%4][j][k-1]==EMPTY)ans.push_back(g.isReachable(n*m+(j)*n+k-1, 4*n*m+1));
		if(k+1<n && a[(i+1)%4][j][k+1]==EMPTY)ans.push_back(g.isReachable(n*m+(j)*n+k+1, 4*n*m+1));
		sort(ans.begin(), ans.end());
		bool flag=false;
		for(i=0;i<4;i++)
		{
			if(ans[i]>0)
			{
				flag=true;
				break;
			}
		}
		cout<<"Case #"<<p<<": ";
		if(flag)
			cout<<ans[i]<<endl;
		else cout<<"impossible\n";
	}
	return 0;
}
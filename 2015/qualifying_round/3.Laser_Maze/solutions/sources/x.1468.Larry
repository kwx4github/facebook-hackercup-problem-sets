#include <stdio.h>
#include <string.h>

#define MAX_L 4 * 102 * 102
char map[102][102];
int d[4][102][102];
int qt[MAX_L], qx[MAX_L], qy[MAX_L];
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
int dt[] = { 'v', '<', '^', '>' };

int main() {
  int T, M, N, ca, i, j, k, sx, sy, ex, ey, c, x, y;
  int nx, ny, nc, min;
  int tx, ty;
  int h, t, good;
  int INF = 1000000;

  scanf("%d\n", &T);
  for (ca = 1; ca <= T; ca++) {
    scanf("%d %d\n", &M, &N);
    for (i = 0; i < M; i++) {
      gets(map[i]);
    }

    sx = sy = -1;
    memset(d, 0, sizeof(d));
    for (i = 0; i < M; i++)
      for (j = 0; j < N; j++)
	if (map[i][j] == 'S')
	  sx = i, sy = j;
	else if (map[i][j] == 'G')
	  ex = i, ey = j;

    for (i = 0; i < 4; i++)
      for (j = 0; j < M; j++)
	for (k = 0; k < N; k++)
	  d[i][j][k] = INF;

    /* Probably can precompute more, but too lazy */
    h = t = 0;
    qt[t] = 0, qx[t] = sx, qy[t] = sy;
    d[0][sx][sy] = 0;
    t++;
    while (h < t) {
      c = qt[h], x = qx[h], y = qy[h];
      h++;
      for (i = 0; i < 4; i++) {
	nc = (c + 1) % 4;
	nx = x + dx[i];
	ny = y + dy[i];

	if (nx >= 0 && nx < M && ny >= 0 && ny < N && d[nc][nx][ny] == INF &&
	    map[nx][ny] != '#') {
	  /* Check turrets */

	  good = 1;
	  for (j = 0; j < 4; j++) {
	    for (k = 0; 1; k++) {
	      tx = nx + k * dx[j];
	      ty = ny + k * dy[j];

	      if (!(tx >= 0 && tx < M && ty >= 0 && ty < N) || map[tx][ty] == '#') break;
	      if (map[tx][ty] == dt[(j+nc)%4]) good = 0;
	      if (map[tx][ty] == '<' || 
		  map[tx][ty] == '^' || 
		  map[tx][ty] == 'v' || 
		  map[tx][ty] == '>' ) break;
	    }
	  }
	  if (good) {
	    d[nc][nx][ny] = d[c][x][y] + 1;
	    qt[t] = nc, qx[t] = nx, qy[t] = ny;
	    t++;
	  }
	}
      }
    }

    min = INF;
    for (i = 0; i < 4; i++)
      if (min > d[i][ex][ey]) min = d[i][ex][ey];
    if (min != INF)
      printf("Case #%d: %d\n", ca, min);
    else
      printf("Case #%d: impossible\n", ca);
  }
}

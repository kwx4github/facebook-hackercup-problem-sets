#include <bits/stdc++.h>

using namespace std;
const int N = 123;

char tab[N][N];
bool ok[N][N][4];
int dx[] = {0,-1,0,1};
int dy[] = {-1,0,1,0};

string mov = "<^>v";
int id(char x){
    for(int i = 0; i < 4; ++i){
        if(x == mov[i]){
            return i;
        }
    }
    return -1;
}

int f[N][N][4];
class node{
    public:
    int x , y , dir;
    node(){}
    node(int _x,int _y,int _dir){
        x = _x; y = _y; dir = _dir;
    }
};

int solve(){
    int x , y;
    scanf("%d %d",&x,&y);

    for(int i = 0; i < x; ++i){
        scanf("%s",&tab[i]);
    }

    int inix = 0 ,iniy = 0;
    for(int i = 0; i < x; ++i){
        for(int j = 0; j < y; ++j){
            memset(ok[i][j],true,sizeof ok[i][j]);
            memset(f[i][j],-1,sizeof f[i][j]);
        }
    }

    for(int i = 0; i < x; ++i){
        for(int j = 0; j < y; ++j){
            if(id(tab[i][j]) != -1){
                for(int dir = 0 ;dir < 4; dir++){
                        int val = ( id(tab[i][j]) + dir) % 4;
                        int posx = i + dx[val] , posy = j + dy[val];
                        while(posx >=0 && posx < x && posy >=0 && posy < y &&
                        (tab[posx][posy]=='.' || tab[posx][posy]=='S' || tab[posx][posy]=='G') ){
                            ok[posx][posy][dir] = false;
                            posx += dx[val];
                            posy += dy[val];
                        }
                }
            }
            if(tab[i][j] == 'S'){
            inix = i;
            iniy = j;
            }
        }
    }

    queue< node > q;
    q.push(node(inix,iniy,0));
    f[inix][iniy][0] = 0;
    while(!q.empty()){
    node c = q.front(); q.pop();
    int posx = c.x , posy = c.y , dir = c.dir , t = f[posx][posy][dir];
        if(tab[posx][posy] == 'G'){
            return t;
        }

        for(int i = 0; i < 4; ++i){
            int xnew = posx + dx[i];
            int ynew = posy + dy[i];
            if(xnew < 0 || xnew >= x || ynew < 0 || ynew>=y){
                continue;
            }
            if(tab[xnew][ynew] =='.' || tab[xnew][ynew]=='S' || tab[xnew][ynew]=='G'){
                if(ok[xnew][ynew][(dir+1)%4] && f[xnew][ynew][(dir+1)%4] == -1){
                    f[xnew][ynew][(dir+1)%4] = 1 + t;
                    q.push(node(xnew,ynew,(dir+1)%4));
                }
            }
        }
    }
    return -1;
}

int main(){
    freopen("in.c","r",stdin);
	freopen("on.c","w",stdout);
    int tc , nc = 1;
    cin >> tc;
    while(tc--){
        printf("Case #%d: ",nc++);
        int res = solve();
        if(res == -1){
            puts("impossible");
        }else{
            printf("%d\n",res);
        }
    }


    return 0;
}

import sys
sys.stdin = open("input.txt", "r")
sys.stdout = open("output.txt", "w")
T = int(input())
for _ in range(T):
    sys.__stdout__.write(str(_))
    sys.__stdout__.flush()
    n, m = map(int, input().split())
    a = []
    for i in range(n):
        a.append(list(input()))
    for i in range(n):
        for j in range(m):
            if a[i][j] == 'S':
                start = i, j
                a[i][j] = '.'
            if a[i][j] == 'G':
                end = i, j
                a[i][j] = '.'
    used = [[[False] * m for i in range(n)] for j in range(4)]
    temp = '>v<^'
    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    f = [[[a[i][j] for j in range(m)] for i in range(n)] for g in range(4)]
    valid = lambda x, y: 0 <= x < n and 0 <= y < m
    for g in range(4):
        for i in range(n):
            for j in range(m):
                if a[i][j] in temp:
                    cur = (temp.find(a[i][j]) + g) % 4
                    f[g][i][j] = temp[cur]
                    ni, nj = i, j
                    while True:
                        ni += moves[cur][0]; nj += moves[cur][1]
                        if not valid(ni, nj) or a[ni][nj] != '.':
                            break
                        f[g][ni][nj] = temp[cur]
    #for g in range(4):
    #    for i in range(n):
    #        print(''.join(f[g][i]))
    q = [(start, 0)]
    used[0][start[0]][start[1]] = True
    pr = 0
    while len(q) > pr:
        (x, y), cnt = q[pr]; pr += 1
        if end == (x, y):
            print("Case #%d: %d" % (_ + 1, cnt))
            break
        ng = (cnt + 1) & 3
        for dx, dy in moves:
            nx, ny = x + dx, y + dy
            if valid(nx, ny) and not used[ng][nx][ny] and f[ng][nx][ny] == '.':
                used[ng][nx][ny] = True
                q.append(((nx, ny), cnt + 1))
    else:
        print("Case #%d: impossible" % (_ + 1))

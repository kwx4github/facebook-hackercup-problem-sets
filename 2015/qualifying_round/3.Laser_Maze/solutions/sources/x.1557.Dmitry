#pragma comment(linker, "/STACK:128777216")

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <sstream>

#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <deque>
#include <stack>

#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <string.h>

#include <memory.h>
#include <cassert>
#include <time.h>

using namespace std;

#define forn(i,n) for (int i = 0; i < (int)(n); i++)
#define fornd(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i,a,b) for (int i = (int)(a); i <= (int)(b); i++)
#define forabd(i, b, a) for (int i = (int)(b); i >= (int)(a); i--)
#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)

#define _(a, val) memset (a, val, sizeof (a))
#define sz(a) (int)((a).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef long long lint;
typedef unsigned long long ull;
typedef long double ld;

const lint LINF = 1000000000000000000LL;
const int INF = 1000000000;
const long double eps = 1e-9;
const long double PI = 3.1415926535897932384626433832795l;

#ifdef MY_DEBUG
#define dbgx( x ) { cerr << #x << " = " << x << endl; }
#define dbg( ... ) { fprintf(stderr, __VA_ARGS__); fflush(stderr); }
#else
#define dbgx( x ) {  } 
#define dbg( ... ) {  } 
#endif

void prepare (string s)
{
#ifdef MY_DEBUG
	freopen ("input.txt", "r", stdin);
	freopen ("output.txt", "w", stdout);
#else
	if (s.length() != 0)
	{
		freopen ((s + ".in").c_str(), "r", stdin);
		freopen ((s + ".out").c_str(), "w", stdout);
	}
#endif
}

const int NMAX = 155;

int n, m;
char a[NMAX][NMAX];
int dp[NMAX][NMAX][4];
int tur[NMAX][NMAX][4];

int dx[] = {0, -1, 0, 1};
int dy[] = {-1, 0, 1, 0};

int get_dir(char c)
{
	if (c == '<')
		return 0;
	if (c == '^')
		return 1;
	if (c == '>')
		return 2;
	if (c == 'v')
		return 3;
	return -1;
}

char get_sym(int d)
{
	if (d == 0)
		return '<';
	if (d == 1)
		return '^';
	if (d == 2)
		return '>';
	if (d == 3)
		return 'v';
	assert( false );
	return -1;
}

bool ok(int x, int y)
{
	return 0 <= x && x < n && 0 <= y && y < m;
}

void read()
{
	scanf("%d %d\n", &n, &m);
	forn(i, n)
		scanf("%s\n", a[i]);
}

void build_tur()
{
	_(tur, 0);
	forn(_, 4)
	{
		forn(i, n)
		{
			forn(j, m)
			{
				if (get_dir(a[i][j]) != -1)
				{
					int x, y, d;
					x = i;
					y = j;
					d = get_dir(a[i][j]);
					while(ok(x, y))
					{
						tur[x][y][_] = 1;
						x += dx[d];
						y += dy[d];
					}

					a[i][j] = get_sym( (get_dir(a[i][j]) + 1) % 4 );
				}
			}
		}
	}

	forn(i, n)
	{
		forn(j, m)
		{
			if (a[i][j] == '#')
				forn(_, 4)
					tur[i][j][_] = 1;
		}
	}
}

struct state
{
	int x, y, d;
	state(){}
	state(int a, int b, int c)
	{
		x = a;
		y = b;
		d = c;
	}
};

int bfs()
{
	queue<state> q;
	_(dp, -1);
	forn(i, n)
	{
		forn(j, m)
		{
			if (a[i][j] == 'S')
			{
				q.push( state(i, j, 0) );
				dp[i][j][0] = 0;
			}
		}
	}

	while(!q.empty())
	{
		state cur = q.front();
		q.pop();

		forn(i, 4)
		{
			state nxt;
			nxt.x = cur.x + dx[i];
			nxt.y = cur.y + dy[i];
			nxt.d = (cur.d + 1) % 4;
			if (ok(nxt.x, nxt.y) && tur[nxt.x][nxt.y][nxt.d] == 0 && dp[nxt.x][nxt.y][nxt.d] == -1)
			{
				dp[nxt.x][nxt.y][nxt.d] = dp[cur.x][cur.y][cur.d] + 1;
				q.push(nxt);
			}
		}
	}
	
	forn(i, n)
	{
		forn(j, m)
		{
			if (a[i][j] == 'G')
			{
				int mn = INF;
				forn(k, 4)
				{
					if (dp[i][j][k] != -1)
						mn = min(mn, dp[i][j][k]);
				}
				return mn;
			}
		}
	}

	assert( false );
	return -1;
}

void solve()
{
	build_tur();
	int ans = bfs();
	if (ans == INF)
		printf("impossible\n");
	else
		printf("%d\n", ans);
}

int main()
{
	prepare ("");

	int t;
	scanf("%d", &t);
	forn(i, t)
	{
		printf("Case #%d: ", i + 1);
		read();
		solve();
	}

	return 0;
}

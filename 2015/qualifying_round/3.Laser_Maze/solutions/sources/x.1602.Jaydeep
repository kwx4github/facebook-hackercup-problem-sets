#include<bits/stdc++.h>
#define si(n)scanf("%d",&n)
#define pi(n)printf("%d\n",n)
#define sll(n)scanf("%lld",&n)
#define pll(n)printf("%lld\n",n)
using namespace std;using ll=long long;using pii=pair<int,int>;using piii=pair<int,pair<int,int> >;
int d[150][150],sx,sy,gx,gy,n,m;char s[150][150];bool safe[150][150][4];
map<char,int>mci;
const int dx[]={0,1,0,-1},dy[]={1,0,-1,0};
void pre(){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(s[i][j]=='#' || mci.find(s[i][j])!=mci.end())continue;
            bool wall=false,lt=false;
            for(int k=j+1;k<m;k++){
                if(!lt && s[i][k]=='#'){
                    wall=true;break;
                }
                else if(!wall && mci.find(s[i][k])!=mci.end()){
                    lt=true;
                    safe[i][j][(2-mci[s[i][k]]+4)%4]=false;
                    break;
                }
            }
            wall=false,lt=false;
            for(int k=i+1;k<n;k++){
                if(!lt && s[k][j]=='#'){
                    wall=true;break;
                }
                else if(!wall && mci.find(s[k][j])!=mci.end()){
                    lt=true;
                    safe[i][j][(3-mci[s[k][j]]+4)%4]=false;
                    break;
                }
            }
            wall=false,lt=false;
            for(int k=j-1;k>=0;k--){
                if(!lt && s[i][k]=='#'){
                    wall=true;break;
                }
                else if(!wall && mci.find(s[i][k])!=mci.end()){
                    lt=true;
                    safe[i][j][(0-mci[s[i][k]]+4)%4]=false;
                    break;
                }
            }
            wall=false,lt=false;
            for(int k=i-1;k>=0;k--){
                if(!lt && s[k][j]=='#'){
                    wall=true;break;
                }
                else if(!wall && mci.find(s[k][j])!=mci.end()){
                    lt=true;
                    safe[i][j][(1-mci[s[k][j]]+4)%4]=false;
                    break;
                }
            }
        }
    }
}
bool chk(int nx,int ny,int dist,int ind){
   bool ok=false;
   for(int i=0;i<4;i++){
        if(i==ind)continue;
        int nxx=nx+dx[i],nyy=ny+dy[i];
        if(nxx>=0 && nxx<n && nyy>=0 && nyy<m){
            ok=ok || (safe[nxx][nyy][(dist+1)%4] && safe[nx][ny][(dist+2)%4]);
        }
   }
   return ok;
}
int main(){
    freopen("q9in.txt","r",stdin);
    freopen("q9out.txt","w",stdout);
    int t;si(t);mci['>']=0;mci['v']=1;mci['<']=2;mci['^']=3;
    for(int tt=1;tt<=t;tt++){
        si(n);si(m);
        for(int i=0;i<n;i++){
            scanf("%s",s[i]);
        }
         for(int i=0;i<150;i++){
            for(int j=0;j<150;j++){
                for(int k=0;k<4;k++){
                    if(s[i][j]=='.' || s[i][j]=='S' || s[i][j]=='G'){
                            safe[i][j][k]=true;
                    }
                }
            }
        }
        pre();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(s[i][j]=='S'){
                    sx=i;sy=j;
                }
                else if(s[i][j]=='G'){
                    gx=i;gy=j;
                }
            }
        }
        for(int i=0;i<150;i++){
            fill(d[i],d[i]+150,1e7);
        }
        d[sx][sy]=0;safe[sx][sy][0]=true;
        priority_queue<piii,vector<piii>,greater<piii> >q;
        q.push(make_pair(0,make_pair(sx,sy)));
        while(!q.empty()){
            piii node=q.top();q.pop();
            int dist=node.first,nx=node.second.first,ny=node.second.second;
            if(dist<=d[nx][ny]){
                for(int i=0;i<4;i++){
                    int nxx=nx+dx[i],nyy=ny+dy[i];
                    if(nxx>=0 && nxx<n && nyy>=0 && nyy<m && s[nxx][nyy]=='.' || s[nxx][nyy]=='G'){
                        if(safe[nxx][nyy][(dist+1)%4]){
                            if(d[nxx][nyy]>1+dist){
                                d[nxx][nyy]=1+dist;
                                q.push(make_pair(d[nxx][nyy],make_pair(nxx,nyy)));
                            }
                        }
                        else if(safe[nxx][nyy][(dist+3)%4] && chk(nx,ny,dist,i)){
                            if(d[nxx][nyy]>3+dist){
                                d[nxx][nyy]=3+dist;
                                q.push(make_pair(d[nxx][nyy],make_pair(nxx,nyy)));
                            }
                        }
                    }
                }

            }
        }
        printf("Case #%d: ",tt);
        if(d[gx][gy]==1e7){
            printf("impossible\n");
        }
        else{
            printf("%d\n",d[gx][gy]);
        }
    }
    return 0;
}

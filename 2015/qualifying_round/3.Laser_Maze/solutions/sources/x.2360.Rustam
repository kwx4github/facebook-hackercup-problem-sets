#include <iostream>
#include <sstream>
#include <cmath>
#include <string>
#include <string.h>
#include <cstdio>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
using namespace std;
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz(x) ((int)((x).size()))
#define rep(i, N) for (int i = 0; i < N; ++i)
#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();++it)
typedef long long lint;
typedef vector<string> vs;
typedef vector<int> vi;
typedef pair<int, int> pii;

char next(char ch) {
	if (ch == '>') return 'v';
	if (ch == 'v') return '<';
	if (ch == '<') return '^';
	if (ch == '^') return '>';
	printf("ch=%c\n", ch);
	return 0;
}

void init_d(char ch, int &di, int &dj) {
	if (ch == '>') { di = 0,  dj = 1;  return;}
	if (ch == 'v') { di = 1,  dj = 0;  return;}
	if (ch == '<') { di = 0,  dj = -1; return;}
	if (ch == '^') { di = -1, dj = 0;  return;}
	printf("ch=%c\n", ch);
}

void solve(int tst) {
	int n, m;
	cin >> n >> m;
	vector<string> v[4];
	vector<vi> dist[4];
	int i0, j0, i1, j1;
	for (int i = 0; i < n; ++i) {
		string s;
		cin >> s;
		for (int j = 0; j < m; ++j) {
			if (s[j] == 'S') {
				s[j] = '.';
				i0 = i;
				j0 = j;
			}
			if (s[j] == 'G') {
				s[j] = '.';
				i1 = i;
				j1 = j;
			}
		}
		for (int k = 0; k < 4; ++k) {
			v[k].pb(s);
			dist[k].pb(vi(m, 1 << 30));
		}
	}



	for (int k = 0; k < 4; ++k) {
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				char ch = v[k][i][j];
				if (ch != '<' && ch != '>' && ch != '^' && ch != 'v') continue;
				for (int t = 0; t < k; ++t) {
					ch = next(ch);
				}
				v[k][i][j] = ch;
				int di, dj;
				init_d(ch, di, dj);
				int ni = i, nj = j;
				while (1) {
					ni += di;
					nj += dj;
					if (0 <= ni && ni < n && 0 <= nj && nj < m) {
					} else {
						break;
					}
					if (v[k][ni][nj] == '.') {
						v[k][ni][nj] = '#';
					} else {
						break;
					}
				}
			}
		}
	}

	// for (int k = 0; k < 4; ++k) {
	// 	for (int i = 0; i < n; ++i) {
	// 		cout << v[k][i] << endl;
	// 	}
	// 	cout << endl;
	// }

	queue<int> q;
	q.push(i0);
	q.push(j0);
	q.push(0);
	dist[0][i0][j0] = 0;
	while (!q.empty()) {
		int i = q.front(); q.pop();
		int j = q.front(); q.pop();
		int d = q.front(); q.pop();
		int nd = (d + 1) % 4;
		if (i == i1 && j == j1) {
			printf("Case #%d: %d\n", tst, dist[d][i][j]);
			return;
		}
		for (int di = -1; di <= 1; ++di) {
			for (int dj = -1; dj <= 1; ++dj) {
				if (abs(di) + abs(dj) == 1) {
					int ni = i + di;
					int nj = j + dj;
					if (0 <= ni && ni < n && 0 <= nj && nj < m) {
						if (v[nd][ni][nj] == '.') {
							if (dist[nd][ni][nj] == 1 << 30) {
								dist[nd][ni][nj] = dist[d][i][j] + 1;
								q.push(ni);
								q.push(nj);
								q.push(nd);
							}
						}
					}
				}
			}
		}
	}
	printf("Case #%d: impossible\n", tst);
}

int main() {
	freopen("input.txt", "r", stdin);
	int tst;
	cin >> tst;
	for (int i = 1; i <= tst; ++i) {
		solve(i);
	}

    return 0;
}

#include <iostream>
#include <cassert>
#include <cstring>
#include <vector>
#include <queue>

using namespace std;

int M, N;
vector<string> map;
int X[4][102][102];
bool V[4][102][102];
// ^ > v < 
void fill_laser(int i, int j, int f) {
	int ti = i, tj = j;
	ti--;
	while (ti >= 0 && map[ti][tj] == '.') X[(f + 0)%4][ti--][tj] = 0;
	ti = i, tj = j;
	tj++;
	while (tj < N && map[ti][tj] == '.') X[(f + 1)%4][ti][tj++] = 0;
	ti = i, tj = j;
	ti++;
	while (ti < M && map[ti][tj] == '.') X[(f + 2)%4][ti++][tj] = 0;	
	ti = i, tj = j;	
	tj--;
	while (tj >= 0 && map[ti][tj] == '.') X[(f + 3)%4][ti][tj--] = 0;
}
struct loc {
	int f,i,j,s;
};
int dx[] = {0,0,1,-1};
int dy[] = {1,-1,0,0};
bool check(const loc & cur) {
	if (V[cur.f][cur.i][cur.j]) return false;
	V[cur.f][cur.i][cur.j] = true;
	return true;
}
int main (int argc, char const *argv[])
{
	int T;
	queue <loc> Q;	
	cin >> T;
	for (int casen = 1; casen <= T ; casen++) {
		cout << "Case #" << casen << ": ";
		cin >> M >> N;
		map.resize(M);
		int si, sj, gi, gj;
		memset(X, -1, sizeof(X));
		memset(V, 0, sizeof(V));
		while(!Q.empty()) Q.pop();
		for (int i = 0 ; i < M ; ++i) cin >> map[i];
		for (int i = 0 ; i < M ; ++i) {
			for (int j = 0 ; j < N ; ++j) {
				if (map[i][j] == 'S') {
					si = i, sj = j;
					map[i][j] = '.';
				} 
				if (map[i][j] == 'G') {
					gi = i, gj = j;
					X[0][i][j] = X[1][i][j] = X[2][i][j] = X[3][i][j] = 2;
					map[i][j] = '.';					
				} 
			}
		}
		for (int i = 0 ; i < M ; ++i) {
			for (int j = 0 ; j < N ; ++j) {
				if (map[i][j] != '.') 
					X[0][i][j] = X[1][i][j] = X[2][i][j] = X[3][i][j] = 0;
				if (map[i][j] == '^') fill_laser(i,j,0);
				if (map[i][j] == '<') fill_laser(i,j,1);
				if (map[i][j] == 'v') fill_laser(i,j,2);
				if (map[i][j] == '>') fill_laser(i,j,3);				
			}
		}
		int reach = -1;
		loc cur;
		cur.i = si, cur.j = sj, cur.f = 0, cur.s = 0;
		Q.push(cur);
		check(cur);
		while(!Q.empty()) {
			cur = Q.front();
			Q.pop();
			if (X[cur.f][cur.i][cur.j] == 2) {
				reach = cur.s;
				break;
			}
			for (int i = 0 ; i < 4 ; ++i) {
				loc next = cur;
				next.i += dx[i], next.j += dy[i], next.s++, next.f = (next.f + 1)%4;
				if (next.i < M && next.i >= 0 && next.j < N && next.j >= 0 && X[next.f][next.i][next.j] && check(next)) 
					Q.push(next);
			}
		}
		if (reach > 0) cout << reach << endl;
		else cout << "impossible" << endl;
	}
	return 0;
}
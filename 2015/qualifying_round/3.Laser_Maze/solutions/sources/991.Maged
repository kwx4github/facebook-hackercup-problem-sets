//============================================================================
// Name        : Practice.cpp
// Author      : Code 08
// Version     :
// Copyri   :
// Description :
//============================================================================

#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <math.h>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>
#include <iostream>

using namespace std;

#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define sz(v) ((ll)v.size())
#define clr(v, d) memset(v, d, sizeof(v))

typedef stringstream ss;
typedef long long ll;
typedef pair<ll, ll> ii;
typedef vector<vector<ii> > vii;
typedef vector<string> vs;
typedef vector<ll> vi;
typedef vector<double> vd;
typedef long double ld;
typedef vector<vector<ll> > matrix;

int dx[] = { 1, -1, 0, 0 };
int dy[] = { 0, 0, 1, -1 };

const ll oo = (ll) 1e9 + 1;
const double eps = 1e-9;
const ll mod = 1000000007;

//freopen("in.in","r",stdin);
//freopen("out.out","w",stdout);

vs board;

bool reachY(int x, int startY, int endY) {
	if (endY < startY) {
		return false;
	}
	for (int j = startY + 1; j < endY; j++) {
		if (board[x][j] == '#' || board[x][j] == '^' || board[x][j] == '>'
				|| board[x][j] == 'v' || board[x][j] == '<') {
			return false;
		}
	}
	return true;
}

bool reachX(int y, int startX, int endX) {
	if (endX < startX) {
		return false;
	}
	for (int j = startX + 1; j < endX; j++) {
		if (board[j][y] == '#' || board[j][y] == '^' || board[j][y] == '>'
				|| board[j][y] == 'v' || board[j][y] == '<') {
			return false;
		}
	}
	return true;
}

int main() {
	freopen("in.in", "r", stdin);
	freopen("out.out","w",stdout);
	int test, tc = 0;
	cin >> test;
	while (test--) {
		board.clear();
		tc++;
		int n, m;
		cin >> m >> n;

		for (int i = 0; i < m; i++) {
			string s;
			cin >> s;
			board.push_back(s);
		}
		int sx, sy;
		vector<pair<int, pair<int, int> > > laser;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (board[i][j] == 'S') {
					sx = i;
					sy = j;
				}
				if (board[i][j] == '^') {
					laser.push_back(make_pair(0, make_pair(i, j)));
				}
				if (board[i][j] == '>') {
					laser.push_back(make_pair(1, make_pair(i, j)));
				}
				if (board[i][j] == 'v') {
					laser.push_back(make_pair(2, make_pair(i, j)));
				}
				if (board[i][j] == '<') {
					laser.push_back(make_pair(3, make_pair(i, j)));
				}
			}
		}
		bool vis[100 + 5][100 + 5][10];
		clr(vis, false);
		queue<pair<pair<int, int>, pair<int, int> > > bfs;
		bfs.push(make_pair(make_pair(0, 0), make_pair(sx, sy)));
		vis[sx][sy][0] = 1;
		int ans = -1;
		while (!bfs.empty()) {
			int x = bfs.front().second.first;
			int y = bfs.front().second.second;
			int conIdx = bfs.front().first.first;
			int path = bfs.front().first.second;
			bfs.pop();

			if (board[x][y] == 'G') {
				ans = path;
				break;
			}
			for (int idx = 0; idx < 4; idx++) {
				int nextX = x + dx[idx];
				int nextY = y + dy[idx];
				if (nextX >= m || nextX < 0)
					continue;
				if (nextY >= n || nextY < 0)
					continue;
				if (vis[nextX][nextY][(conIdx + 1) % 4])
					continue;
				if (board[nextX][nextY] != '.' && board[nextX][nextY] != 'G'
						&& board[nextX][nextY] != 'S') {
					continue;
				}

				vis[nextX][nextY][(conIdx + 1) % 4] = 1;
				bool reach = false;
				for (int i = 0; i < sz(laser); i++) {
					int laserX = laser[i].second.first;
					int laserY = laser[i].second.second;
					int laserCon = laser[i].first;

						int real = (conIdx + 1) % 4;
						real += laserCon;
						real %= 4;
						if (real == 0) {
							if (nextY == laserY) {
								reach |= reachX(nextY, nextX, laserX);
							} else {
								reach |= false;
							}
						} else if (real == 1) {
							if (nextX == laserX) {
								reach |= reachY(nextX, laserY, nextY);
							} else {
								reach |= false;
							}
						} else if (real == 2) {
							if (nextY == laserY) {
								reach |= reachX(nextY, laserX, nextX);
							} else {
								reach |= false;
							}
						} else {
							if (nextX == laserX) {
								reach |= reachY(nextX, nextY, laserY);
							} else {
								reach |= false;
							}
						}

				}


				if (!reach) {

					bfs.push(
							make_pair(make_pair((conIdx + 1) % 4, path + 1),
									make_pair(nextX, nextY)));
				}
			}
		}
		if(ans!=-1)
			cout<<"Case #"<<tc<<": "<<ans<<endl;
		else
			cout<<"Case #"<<tc<<": impossible"<<endl;
	}
	return 0;
}

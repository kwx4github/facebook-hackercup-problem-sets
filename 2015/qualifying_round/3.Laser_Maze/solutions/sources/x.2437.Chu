package happy;

import java.io.*;
import java.math.*;
import java.lang.*;
import java.util.*;
import java.util.Arrays.*;
import java.io.BufferedReader;

public class LaserMaze {


    public static void main(String[] args) {
        new LaserMaze().haha();
    }

        public void haha() {
        BufferedReader in = null;
        BufferedWriter out = null;

        try{
            in = new BufferedReader(new FileReader("laser_maze.txt"));
            out = new BufferedWriter(new FileWriter("out.txt"));
            int T = Integer.parseInt(in.readLine());
            System.out.println("T="+T);
            for(int i=0;i<T;i++){
                System.out.print("Case #"+(i+1)+":");
                out.write("Case #"+(i+1)+":");
                int ok = 0;

                String[] line = in.readLine().split(" ");
                int M = Integer.parseInt(line[0]);
                int N = Integer.parseInt(line[1]);

                int[][][] map = new int[4][M][N];
                int[][] ori = new int[M][N];
                int sm=0, sn=0;
                int gm=0, gn=0;

                for(int m=0;m<M;m++){
                    String ns = in.readLine();
                    for(int n=0;n<N;n++){
                        switch(ns.charAt(n)){
                            case '.':
                                ori[m][n] = 6;
                                break;
                            case '#':
                                ori[m][n] = 7;
                                break;
                            case '^':
                                ori[m][n] = 0;
                                break;
                            case '>':
                                ori[m][n] = 1;
                                break;
                            case 'v':
                                ori[m][n] = 2;
                                break;
                            case '<':
                                ori[m][n] = 3;
                                break;
                            case 'S':
                                ori[m][n] = 8;
                                sm=m;
                                sn=n;
                                break;
                            case 'G':
                                ori[m][n] = 9;
                                gm=m;
                                gn=n;
                                break;
                        }
                    }
                }


                for(int s=0;s<4;s++){
                    for(int m=0;m<M;m++){
                        for(int n=0;n<N;n++){
                            int tmp = ori[m][n];
                            if(0<=tmp&&tmp<=3){
                                map[s][m][n] = (tmp + s)%4;
                            } else {
                                map[s][m][n] = ori[m][n];
                            }
                        }
                    }
                }

                for(int s=0;s<4;s++){
                    for(int m=0;m<M;m++){
                        for(int n=0;n<N;n++){
                            switch(map[s][m][n]){
                                case 0:
                                    //shotU(map,m,n,s);
                                    for(int m1=m-1;m1>=0;m1--){
                                        int tmp = map[s][m1][n];
                                        if(tmp==0||tmp==1||tmp==2||tmp==3||tmp==7){
                                            break;
                                        }
                                        map[s][m1][n] = 4;
                                    }
                                    break;
                                case 1:
                                    //shotR(map,m,n,s);
                                    for(int n1=n+1;n1<N;n1++){
                                        int tmp = map[s][m][n1];
                                        if(tmp==0||tmp==1||tmp==2||tmp==3||tmp==7){
                                            break;
                                        }
                                        map[s][m][n1] = 4;
                                    }
                                    break;
                                case 2:
                                    //shotD(map,m,n,s);
                                    for(int m1=m+1;m1<M;m1++){
                                        int tmp = map[s][m1][n];
                                        if(tmp==0||tmp==1||tmp==2||tmp==3||tmp==7){
                                            break;
                                        }
                                        map[s][m1][n] = 4;
                                    }
                                    break;
                                case 3:
                                    //shotL(map,m,n,s);
                                    for(int n1=n-1;n1>=0;n1--){
                                        int tmp = map[s][m][n1];
                                        if(tmp==0||tmp==1||tmp==2||tmp==3||tmp==7){
                                            break;
                                        }
                                        map[s][m][n1] = 4;
                                    }
                                    break;
                            }
                        }
                    }
                }

                /*System.out.print("\n");
                for(int s=0;s<4;s++){
                    System.out.print("s:"+s+":\n");
                    for(int m=0;m<M;m++){
                        for(int n=0;n<N;n++){
                            System.out.print(""+map[s][m][n]);
                        }
                        System.out.print("\n");
                    }
                }
                System.out.print("\n");*/

                LinkedList<SS> q = new LinkedList<SS>();
                if(sm+1<M){
                     if(map[1][sm+1][sn]==6||map[1][sm+1][sn]==8||map[1][sm+1][sn]==9){
                        q.offer(new SS(sm+1,sn,1));
                     }
                }
                if(sm-1>=0){
                     if(map[1][sm-1][sn]==6||map[1][sm-1][sn]==8||map[1][sm-1][sn]==9){
                        q.offer(new SS(sm-1,sn,1));
                     }
                }
                if(sn+1<N){
                     if(map[1][sm][sn+1]==6||map[1][sm][sn+1]==8||map[1][sm][sn+1]==9){
                        q.offer(new SS(sm,sn+1,1));
                     }
                }
                if(sn-1>=0){
                     if(map[1][sm][sn-1]==6||map[1][sm][sn-1]==8||map[1][sm][sn-1]==9){
                        q.offer(new SS(sm,sn-1,1));
                     }
                }

                while(q.size()>0){
                    SS ss = q.poll();
                    int m = ss.m;
                    int n = ss.n;
                    int s = ss.s;
                    if(map[s%4][m][n]==9){
                        ok = s;
                        break;
                    }
                    if(q.size()>1000000||s>1000000)
                        break;
                    
                    s = s + 1;
                    if(m+1<M){
                         if(map[s%4][m+1][n]==6||map[s%4][m+1][n]==8||map[s%4][m+1][n]==9){
                            q.offer(new SS(m+1,n,s));
                         }
                    }
                    if(m-1>=0){
                         if(map[s%4][m-1][n]==6||map[s%4][m-1][n]==8||map[s%4][m-1][n]==9){
                            q.offer(new SS(m-1,n,s));
                         }
                    }
                    if(n+1<N){
                         if(map[s%4][m][n+1]==6||map[s%4][m][n+1]==8||map[s%4][m][n+1]==9){
                            q.offer(new SS(m,n+1,s));
                         }
                    }
                    if(n-1>=0){
                         if(map[s%4][m][n-1]==6||map[s%4][m][n-1]==8||map[s%4][m][n-1]==9){
                            q.offer(new SS(m,n-1,s));
                         }
                    }
                }

                String ans;
                if(ok==0){
                    ans = "impossible";
                } else {
                    ans = ""+ok;
                }

                System.out.print(" "+ans+"\n");
                out.write(" "+ans+"\n");
            }

            in.close();
            out.close();
        }catch(Exception e){
            e.printStackTrace();
            try{
                in.close();
                out.close();
            }catch(Exception ee){
                ee.printStackTrace();
            }
        }
        System.out.print("Ha Ha :D\n");
    }

    class SS {
       public SS(int m, int n, int s){
           this.m = m;
           this.n = n;
           this.s = s;
       }
       int m, n, s;
    }
}

#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define all(C) begin(C), end(C)

#define debug(x) cerr << #x" = " << x << '\n';

template <typename T>
inline T sqr(T x) {
  return x * x;
}

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;

const double EPS = 1e-9;
const int MAXN = 100 + 10;
const char dirs[4] = { '^', '>', 'v', '<' };
const int INF = 1e9;
const int di[4] = { 1, -1, 0, 0 };
const int dj[4] = { 0, 0, 1, -1 };

char f[4][MAXN][MAXN];
bool blocked[4][MAXN][MAXN];
int d[4][MAXN][MAXN];
int n, m;

void rotate(char& c) {
  forn(i, 4)
    if  (c == dirs[i]) {
      c = dirs[(i + 1) % 4];
      return;
    }
}

bool on(int i, int j) {
  return 0 <= i && i < n && 0 <= j && j < m;
}

bool solve(int& len) {
  scanf("%d%d\n", &n, &m);
  forn(i, n) {
    gets(f[0][i]);
  }

  for (int k = 1; k < 4; ++k)
    forn(i, n) forn(j, m) {
      f[k][i][j] = f[k - 1][i][j];
      rotate(f[k][i][j]);
    }

  memset (blocked, false, sizeof blocked);
  forn(k, 4) forn(i, n) forn(j, m) blocked[k][i][j] = f[k][i][j] != 'S' && f[k][i][j] != 'G' && f[k][i][j] != '.';

  forn(k, 4) {
    forn(i, n) {
      bool block = false;
      forn(j, m) {
        char& c = f[k][i][j];
        if  (c == '.' || c == 'S' || c == 'G') {
          if  (block) blocked[k][i][j] = true;
        } else if  (c == '>') {
          block = true;
        } else if  (c != 'S' && c != 'G') {
          block = false;
        }
      }

      block = false;
      ford(j, m) {
        char& c = f[k][i][j];
        if  (c == '.' || c == 'S' || c == 'G') {
          if  (block) blocked[k][i][j] = true;
        } else if  (c == '<') {
          block = true;
        } else if  (c != 'S' && c != 'G') {
          block = false;
        }
      }
    }

    forn(j, m) {
      bool block = false;
      forn(i, n) {
        char& c = f[k][i][j];
        if  (c == '.' || c == 'S' || c == 'G') {
          if  (block) blocked[k][i][j] = true;
        } else if  (c == 'v') {
          block = true;
        } else if  (c != 'S' && c != 'G') {
          block = false;
        }
      }

      block = false;
      ford(i, n) {
        char& c = f[k][i][j];
        if  (c == '.' || c == 'S' || c == 'G') {
          if  (block) blocked[k][i][j] = true;
        } else if  (c == '^') {
          block = true;
        } else {
          block = false;
        }
      }
    }
  }

  queue<tuple<int, int, int> > q;
  forn(k, 4) forn(i, n) forn(j, m) d[k][i][j] = INF;
  forn(i, n) forn(j, m) if  (f[0][i][j] == 'S') {
    d[0][i][j] = 0;
    q.push(make_tuple(0, i, j));
  }
/*   
  puts("");
  forn(k, 4) {
    forn(i, n) {
      puts(f[k][i]);
    }
    puts("");
  }

  puts("");
  forn(k, 4) {
    forn(i, n) {
      forn(j, m)  
        printf("%d", blocked[k][i][j]);
      puts("");
    }
    puts("");
  }
*/
  while (!q.empty()) {
    int k, i, j;
    tie(k, i, j) = q.front();
    q.pop();

//    printf("in %d %d %d d = %d\n", k, i, j, d[k][i][j]);

    forn(dir, 4) {
      int ii = i + di[dir];
      int jj = j + dj[dir];

      if  (on(ii, jj) && !blocked[(k + 1) % 4][ii][jj] && d[(k + 1) % 4][ii][jj] > d[k][i][j] + 1) {
        d[(k + 1) % 4][ii][jj] = d[k][i][j] + 1;
        q.push(make_tuple((k + 1) % 4, ii, jj));  
      }
    }
  }

  len = INF;
  forn(k, 4) forn(i, n) forn(j, m)
    if  (f[k][i][j] == 'G') {
      len = min(len, d[k][i][j]);  
    }

  return len < INF;
}

int main() {
#ifdef LOCAL
  freopen(".in", "r", stdin);
  freopen(".out", "w", stdout);
#endif

  int T;
  scanf("%d", &T);
  forn(t, T) {
    printf("Case #%d: ", t + 1);

    int res;
    if  (!solve(res)) {
      puts("impossible");
    } else {
      printf("%d\n", res);
    }

  }

  return 0;
}

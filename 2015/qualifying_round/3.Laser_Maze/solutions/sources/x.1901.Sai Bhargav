#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;
#define range(i, n) for(int i = 0; i < n; i++)
#define sz 100

struct e{
	int i, j, k;
	e(int i_, int j_, int k_){
		i = i_, j = j_, k = k_;
	}
};

char maze[sz][sz][4];
int v[sz][sz][4];
int m, n, x, y;
char las[4] = {'^', '>', 'v', '<'};
int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
queue<e> q;

int find(char c){
	range(i, 4)	if(las[i] == c)	return i;
	return -1;
}

bool check(int i, int j, int k){
	if(maze[i][j][k] == '.' || maze[i][j][k] == 'S' || maze[i][j][k] == 'G')	
		return true;
	return false;
}

void tr(int i, int j, int k){
	int pos = find(maze[i][j][0]);
	if(pos == -1)	return;
	
	pos = (pos + k) % 4;
	maze[i][j][k] = las[pos];
	for(i += dx[pos], j += dy[pos]; i >= 0 && i < m && j >= 0 && j < n && (maze[i][j][k] == '.' || maze[i][j][k] == 'S' || maze[i][j][k] == 'G'); i += dx[pos], j += dy[pos])
		maze[i][j][k] = 'x';
}

int bfs(){
	while(!q.empty())	q.pop();
	q.push(e(x, y, 0));

	while(!q.empty()){
		e f = q.front();
		q.pop();
		
		if(maze[f.i][f.j][f.k % 4] == 'G')	return f.k;
		if(v[f.i][f.j][f.k % 4] == 1)	continue;
		v[f.i][f.j][f.k % 4] = 1;

		for(int dx = -1; dx <= 1; dx++){
			for(int dy = -1; dy <= 1; dy++){
				int i = min(max(f.i + dx, 0), m - 1), j = min(max(f.j + dy, 0), n - 1);
				if((abs(dx) + abs(dy) == 1) && (i != f.i || j != f.j) && v[i][j][(f.k + 1) % 4] == 0 && check(i, j, (f.k + 1) % 4))
					q.push(e(i, j, f.k + 1));
			}
		}
	}

	return -1;
}

int main(){
	int tt, t = 1;
	for(cin >> tt; t <= tt; t++){
		cout << "Case #" << t << ": ";
		cin >> m >> n;
		
		range(i, m)	range(j, n){	char temp; cin >> temp; range(k, 4){	maze[i][j][k] = temp; v[i][j][k] = 0; }	if(temp == 'S')	x = i, y = j; }
		range(i, m)	range(j, n)	range(k, 4)	tr(i, j, k);

		int res = bfs();
		if(res == -1)	cout << "impossible\n";
		else	cout << res << endl;
	}
	return 0;
}
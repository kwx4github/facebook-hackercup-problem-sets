#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <map>
#include <queue>
#include <stack>
#include <set>
#include <iterator>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>

using namespace std;

int correspondance(char car)
{
    if(car=='>') return 0;
    else if(car=='v') return 1;
    else if(car=='<') return 2;
    return 3;
}

char correspondanceInverse(int n)
{
    n%=3;
    if(n==0) return '>';
    else if(n==1) return 'v';
    else if(n==2) return '<';
    return '^';
}

int main()
{

    ios_base::sync_with_stdio(false);
#ifndef ONLINE_JUDGE
    #define cin in
    #define cout out
    ifstream in("input.txt");
    ofstream out("output.txt");
#endif // ONLINE_JUDGE
    int T;
    cin>>T;
    for(int c=1;c<=T;c++)
    {
        cout<<"Case #"<<c<<": ";
        int N,M;
        cin>>N>>M;
        vector<string> lab(N);
        for(int x=0;x<N;x++) cin>>lab[x];
        int xme=-1,yme=-1;
        for(int x=0;x<N;x++)
            for(int y=0;y<M;y++)
                if(lab[x][y]=='S')
                {
                    xme = x;
                    yme = y;
                }
        priority_queue<pair<int,pair<int,int> > > pq;
        pq.push(make_pair(0,make_pair(xme,yme)));
        vector<vector<vector<bool> > > visites(N,vector<vector<bool> > (M,vector<bool>(4,false)));

        visites[xme][yme][0]=true;

        int dx[4]={0,-1,0,1};
        int dy[4]={-1,0,1,0};


        while(pq.size())
        {
            int steps = pq.top().first;
            int xact = pq.top().second.first;
            int yact = pq.top().second.second;
            pq.pop();
            for(int d=0;steps>0&&d<4;d++)
            {
                for(int coeff=0;;coeff++)
                {
                    int x2=xact+dx[d]*coeff;
                    int y2=yact+dy[d]*coeff;
                    if(x2<0||y2<0||x2>=N||y2>=M||lab[x2][y2]=='#') break;
                    if(lab[x2][y2]=='>'||lab[x2][y2]=='<'||lab[x2][y2]=='^'||lab[x2][y2]=='v')
                    {
                        if((correspondance(lab[x2][y2])+steps)%4==d)
                        {
                            goto nop;
                        }
                    }
                }
            }

            if(lab[xact][yact]=='G')
            {
                cout<<steps<<endl;
                goto end;
            }


            for(int d=0;d<4;d++)
            {
                int x2=dx[d]+xact;
                int y2=dy[d]+yact;

                if(x2>=0&&y2>=0&&x2<N&&y2<M&&!visites[x2][y2][(steps+1)%4]&&(lab[x2][y2]=='S'||lab[x2][y2]=='G'||lab[x2][y2]=='.'))
                {
                    visites[x2][y2][(steps+1)%4]=true;
                    pq.push(make_pair(steps+1,make_pair(x2,y2)));
                }
            }

            nop:;
        }
        cout<<"impossible"<<endl;
        end:;
    }

}

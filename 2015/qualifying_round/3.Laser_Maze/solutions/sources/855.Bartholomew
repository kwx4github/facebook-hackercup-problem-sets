#include <bits/stdc++.h>

using namespace std;
#define V vector
#define tD typedef
tD long long ll;
tD V<int> vi;
tD V<vi> vii;
tD V<ll> vll;
tD V<string> vs;
tD long double ld;
tD pair<int, int> pii;
#define mt make_tuple
#define fr(x,y) for(int x=0;x<(y); ++x)
#define fi(n) fr(i,n)
#define fj(n) fr(j,n)
#define fk(n) fr(k,n)
#define eb emplace_back
#define pb push_back
#define sz size()
#define DEBUG 0

typedef tuple<int, int, int> state;
map<char, int> cd = {{'^', 0}, {'>', 1}, {'v', 2}, {'<', 3}};
int dx[4] = {0, 1, 0, -1};
int dy[4] = {-1, 0, 1, 0};

int main() {
  int T; cin >> T;
  for (int qw = 1; qw <= T; qw++) {
    int h, w; cin >> h >> w;
    vector<string> maze(h + 2, string(w + 2, '#'));
    fi(h) {
      cin >> maze[i + 1];
      maze[i + 1] = "#" + maze[i + 1] + "#";
    }
    h += 2;
    w += 2;
    state start;
    state goal;
    fi(h) fj(w) {
      if (maze[i][j] == 'S') {
	maze[i][j] = '.';
	start = mt(i, j, 0);
      } else if (maze[i][j] == 'G') {
	maze[i][j] = '.';
	goal = mt(i, j, -1);
      }
    }
    // fi(h) cout << maze[i] << endl;
    // cout << endl;
    vector<vector<string> > mazet(4, vector<string>(h, string(w, '.')));
    fk(4) {
      vector<string>& m = mazet[k];
      fi(h) fj(w) {
	if (maze[i][j] != '.') m[i][j] = '#';
	if (maze[i][j] != '#' && maze[i][j] != '.') {
	  int dir = (cd[maze[i][j]] + k) % 4;
	  for (int dist = 1; ; dist++) {
	    int y = i + dist * dy[dir];
	    int x = j + dist * dx[dir];
	    if (maze[y][x] != '.') break;
	    m[y][x] = '#';
	  }
	}
      }
    }
    // fk(4) {
    //   cout << "Maze " << k<<":" << endl;
    //   fi(h) cout << mazet[k][i] << endl;
    //   cout << endl;
    // }
    int ans = -1;
    queue<pair<int, state> > q;
    map<state, int> dist;
    q.push(make_pair(0, start));
    while (!q.empty()) {
      int distance;
      state s;
      tie(distance, s) = q.front(); q.pop();
      if (dist.count(s)) continue;
      dist[s] = distance;
      int y, x, t;
      tie(y, x, t) = s;
      // cout << "Considering " << y <<","<<x<<" at time " << distance << "(" << t<<")" << endl;
      if (y == get<0>(goal) && x == get<1>(goal)) {
	ans = distance;
	break;
      }
      fk(4) {
	state pos(y + dy[k], x + dx[k], (t + 1) % 4);
	if (mazet[get<2>(pos)][get<0>(pos)][get<1>(pos)] == '#') {
	  continue;
	}
	q.push(make_pair(distance + 1, pos));
      }
    }
    cout << "Case #" << qw << ": ";
    if (ans == -1) {
      cout << "impossible" << endl;
    } else {
      cout << ans << endl;
    }
  }
}

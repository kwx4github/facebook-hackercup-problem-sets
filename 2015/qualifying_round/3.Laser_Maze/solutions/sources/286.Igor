#undef NDEBUG
#ifdef SU1
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
template<typename X, typename Y> inline ostream& operator<< (ostream& out, const pair <X, Y>& p) { return out << '(' << p.x << ", " << p.y << ')'; }
template<typename X> inline ostream& operator<< (ostream& out, const vector<X>& p) { forn(i, sz(p)) { if (i != 0) out << ' '; out << p[i]; } return out; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 100 + 3;

char cdir[] = {'<', '^', '>', 'v'};
int dx[] = {0, -1, 0, 1};
int dy[] = {-1, 0, 1, 0};

int n, m;
char f[N][N];
bool used[4][N][N];

inline bool read ()
{
	if (scanf("%d%d", &n, &m) != 2) return false;
	forn(i, n) assert(scanf("%s", f[i]) == 1);
	return true;
}

inline bool bad (int x, int y) { return f[x][y] != '.' && f[x][y] != 'S' && f[x][y] != 'G'; }

pt start, finish;

inline void prepare ()
{
	forn(dir, 4)
	{
		memset(used[dir], 0, sizeof(used[dir]));
		forn(i, n) forn(j, m)
			if (f[i][j] == 'S') start = mp(i, j);
			else if (f[i][j] == 'G') finish = mp(i, j);
			else
			{
				int d = -1;
				forn(k, 4) if (f[i][j] == cdir[k]) d = k;
				if (d == -1) continue;
				d = (d + dir) % 4;
				
				int x = i, y = j;
				while (true)
				{
					used[dir][x][y] = true;
					x += dx[d], y += dy[d];
					if (!correct(x, y, n, m) || bad(x, y)) break;
				}
			}
		
		//forn(i, n) { forn(j, m) cerr << used[dir][i][j]; cerr << endl; } cerr << endl;
	}
}

struct state
{
	int x, y, mod;
	state (int x, int y, int mod) : x(x), y(y), mod(mod) {}
};

int d[N][N][4];

inline void solve (int test)
{
	printf("Case #%d: ", test);
	
	prepare();
	
	memset(d, 63, sizeof(d));
	d[start.x][start.y][0] = 0;
	
	queue<state> q;
	q.push(state(start.x, start.y, 0));
	
	while (!q.empty())
	{
		int x = q.front().x, y = q.front().y, mod = q.front().mod;
		q.pop();
		
		forn(i, 4)
		{
			int tx = x + dx[i], ty = y + dy[i], nmod = (mod + 1) % 4;
			
			if (!correct(tx, ty, n, m) || bad(tx, ty)) continue;
			
			//cerr << "u = " << nmod << ' ' << tx << ' ' << ty << ' ' << used[nmod][tx][ty] << endl;
			
			if (!used[nmod][tx][ty] && d[tx][ty][nmod] > d[x][y][mod] + 1)
			{
				d[tx][ty][nmod] = d[x][y][mod] + 1;
				//cerr << tx << ' ' << ty << ' ' << nmod << ' ' << d[tx][ty][nmod] << endl;
				q.push(state(tx, ty, nmod));
			}			
		}
	}
	
	int ans = INF;
	forn(i, 4) ans = min(ans, d[finish.x][finish.y][i]);
	
	if (ans > INF / 2) puts("impossible");
	else printf("%d\n", ans);
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		assert(read());
		solve(test + 1);
	}
	
#ifdef SU1
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

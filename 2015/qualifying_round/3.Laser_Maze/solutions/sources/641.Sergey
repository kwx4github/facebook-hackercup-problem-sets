package com.facebook.hackercup2015.qualification;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class LaserMaze {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter writer = new PrintWriter(System.out);

    LaserMaze() throws IOException {
        reader = new BufferedReader(new FileReader("input.txt"));
        writer = new PrintWriter(new FileWriter("output.txt"));
    }

    StringTokenizer stringTokenizer;

    String next() throws IOException {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            stringTokenizer = new StringTokenizer(reader.readLine());
        }
        return stringTokenizer.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    void solve() throws IOException {
        int t = nextInt();
        for(int i = 1; i <= t; i++) {
            solve(i);
        }
        writer.close();
    }

    private void solve(int testNumber) throws IOException {
        writer.printf("Case #%d: ", testNumber);
        int m = nextInt();
        int n = nextInt();
        char[][] maze = new char[m + 2][n + 2];
        for (char[] row : maze) {
            Arrays.fill(row, '#');
        }
        for(int i = 1; i <= m; i++) {
            System.arraycopy(next().toCharArray(), 0, maze[i], 1, n);
        }
        boolean[][][] blocked = new boolean[m + 2][n + 2][4];
        int startR = -1, startC = -1, finishR = -1, finishC = -1;
        final int[] dr = {-1, 0, 1, 0};
        final int[] dc = {0, 1, 0, -1};
        for(int i = 0; i < maze.length; i++) {
            for(int j = 0; j < maze[i].length; j++) {
                switch(maze[i][j]) {
                    case '.': break;
                    case 'S':
                        startR = i;
                        startC = j;
                        break;
                    case 'G':
                        finishR = i;
                        finishC = j;
                        break;
                    case '#':
                        for(int k = 0; k < 4; k++) {
                            blocked[i][j][k] = true;
                        }
                        break;
                    default:
                        for(int k = 0; k < 4; k++) {
                            blocked[i][j][k] = true;
                        }
                        final char[] turrets = "^>v<".toCharArray();
                        int tk = 0;
                        while(maze[i][j] != turrets[tk]) tk++;
                        for(int k = 0; k < 4; k++) {
                            int r = i;
                            int c = j;
                            while(true) {
                                r += dr[k + tk & 3];
                                c += dc[k + tk & 3];
                                if(maze[r][c] != '.' && maze[r][c] != 'S' && maze[r][c] != 'G') break;
                                blocked[r][c][k] = true;
                            }
                        }
                }
            }
        }

        class Thing {
            int r, c, k;

            Thing(int r, int c, int k) {
                this.r = r;
                this.c = c;
                this.k = k;
            }
        }
        final int INF = 1 << 20;
        int[][][] dist = new int[m + 2][n + 2][4];
        for(int i = 0; i < m + 2; i++) {
            for(int j = 0; j < n + 2; j++) {
                for(int k = 0; k < 4; k++) {
                    dist[i][j][k] = INF;
                }
            }
        }
        Queue<Thing> q = new LinkedList<>();
        for(int k = 0; k < 4; k++) {
            final int r = startR + dr[k];
            final int c = startC + dc[k];
            if(!blocked[r][c][1]) {
                q.add(new Thing(r, c, 1));
                dist[r][c][1] = 1;
            }
        }
        while(!q.isEmpty()) {
            Thing thing = q.poll();
            for(int k = 0; k < 4; k++) {
                int r = thing.r + dr[k];
                int c = thing.c + dc[k];
                int level = thing.k + 1 & 3;
                if(!blocked[r][c][level] && dist[r][c][level] == INF) {
                    q.add(new Thing(r, c, level));
                    dist[r][c][level] = dist[thing.r][thing.c][thing.k] + 1;
                }
            }
        }
        int answer = INF;
        for(int k = 0; k < 4; k++) {
            answer = Math.min(answer, dist[finishR][finishC][k]);
        }
        writer.println(answer == INF ? "impossible" : answer);
    }

    public static void main(String[] args) throws IOException {
        new LaserMaze().solve();
    }
}

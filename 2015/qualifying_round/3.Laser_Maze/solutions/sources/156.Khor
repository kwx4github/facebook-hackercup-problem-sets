#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;

void print_vector(vi v);
void print_array(int* array, int start, int end);

#define FOR(i,a,b) for (int i = (a),_b = (b); i < _b; i++)
#define DOW(i,b,a) for (int i = (b),_a = (a); i >= _a; i--)
#define fill(a,v) memset(a, v, sizeof a)
#define checkbit(n,b) ((n >> b) & 1)
#define pb(a) push_back(a)
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) (int)(a).size()

#define INF 1e9
#define PI acos(-1.0)

#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s\n",n)

int tc, cse, m, n, x, y, gx, gy, visited[5][110][110];
char maze[110][110];
int dir[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
vii tp;
set<ii> tur[110][110][4];
bool solved;

bool canMove(int xx, int yy){
  if(xx < 0 || xx >= n || yy < 0 || yy >= m) return false;
  else if(maze[xx][yy] == '#' 
          || maze[xx][yy] == '<' || maze[xx][yy] == '^' || maze[xx][yy] == 'v' || maze[xx][yy] == '>') return false;
  else {
    FOR(i, 0, SZ(tp)){
      int cx = tp[i].first;
      int cy = tp[i].second;
      char dir = maze[cx][cy];
      int d = 0;
      if(dir == '^') d = 1;
      else if (dir == '>') d = 2;
      else if (dir == 'v') d = 3;
      else d = 0;
      if(tur[cx][cy][d].count(ii(xx, yy)) > 0) return false;
    }
  }
  return true;
}

int main() {
  #ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  #endif 

  s(tc);
  cse = 1;
  
  while(tc--){
    fill(visited, 0);
    solved = false;
    s(n), s(m);
    getchar();
    FOR(i, 0, n){
      ss(maze[i]);
    }
    deque<iii> q;
    tp.clear();
    FOR(i, 0, n) FOR(j, 0, m) {
      if(maze[i][j] == 'S') x = i, y = j;
      if(maze[i][j] == 'G') gx = i, gy = j; 
      if(maze[i][j] == 'v' || maze[i][j] == '>' || maze[i][j] == '<' || maze[i][j] == '^') tp.push_back(ii(i, j));
    }
    q.push_back(iii(0, ii(x, y)));
    FOR(i, 0, SZ(tp)){
      x = tp[i].first;
      y = tp[i].second;
      FOR(j, 0, 4){
        tur[x][y][j].clear();
        int cx = x + dir[j][0], cy = y + dir[j][1];
        while(!(cx < 0 || cx >= n || cy < 0 || cy >= m) && maze[cx][cy] != '#' 
          && maze[cx][cy] != '<' && maze[cx][cy] != '^' && maze[cx][cy] != 'v' && maze[cx][cy] != '>'){
         // printf("here\n");
          tur[x][y][j].insert(ii(cx, cy));
          cx += dir[j][0], cy += dir[j][1];
        }
      }
    }
    
    // FOR(i, 0, SZ(tp)){
    //   int x = tp[i].first;
    //   int y = tp[i].second;
    //   set<ii>::iterator it;
    //   FOR(d, 0, 4)
    //   for(it = tur[x][y][d].begin(); it != tur[x][y][d].end(); it++){
    //     printf("Turret %d %d at dir %d: %d %d\n", x, y, d, it->first, it->second);
    //   }
    // }

    int prev = 0;
    while(!q.empty()){
      iii front = q.front();
      q.pop_front();
      int d = front.first;
      x = front.second.first, y = front.second.second;
      //printf("%d %d %d\n", d, x, y);
      
      if(x == gx && y == gy){
        solved = true;
        printf("Case #%d: %d\n", cse++, d);
        break;
      }
      if(prev != d){
        prev = d;
        FOR(k, 0, SZ(tp)){
          int i = tp[k].first;
          int j = tp[k].second;
          if(maze[i][j] == '^') maze[i][j] = '>';
          else if (maze[i][j] == '>') maze[i][j] = 'v';
          else if (maze[i][j] == 'v') maze[i][j] = '<';
          else if (maze[i][j] == '<') maze[i][j] = '^';
        }
      }
      FOR(i, 0, 4){
        int xx = x + dir[i][0];
        int yy = y + dir[i][1];
        if(canMove(xx, yy) && !visited[(d+1)%4][xx][yy]){
          q.push_back(iii(d+1, ii(xx, yy)));
          visited[(d+1)%4][xx][yy] = 1;
        }
      }
    }
    if(!solved) printf("Case #%d: impossible\n", cse++);
  }


  return 0;
}

void print_array(int* array, int start, int end){
  printf("[");
  FOR(i, start, end){
    printf("%d ", array[i]);
  }
  printf("]");
  printf("\n");
}

void print_vector(vi v){
  printf("[");
  FOR(i, 0, v.size()){
    printf("%d ", v[i]);
  }
  printf("]");
  printf("\n");
}
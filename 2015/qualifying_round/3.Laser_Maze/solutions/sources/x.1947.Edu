#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <iostream>
#include <queue>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <cstring>
#include <vector>

#define MAX 100005

#define REPN(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define REP(i,n) REPN(i,0,n)

#define CLR(cont, a) memset(cont, a, sizeof cont)

#define dbg(x) cout << #x << " = " << x << "\n";
#define dbg2(x, y) cout << #x << " = " << x << " " << #y << " = " << y << "\n";
#define dbg3(x, y, z) cout << #x << " = " << x << " " << #y << " = " << y << " " << #z << " = " << z << "\n";
#define dbg4(x, y, z, w) cout << #x << " = " << x << " " << #y << " = " << y << " " << #z << " = " << z << " " << #w << " = " << w << "\n";

#define pb push_back
#define mp make_pair
#define oo (1<<30)
#define ALL(x) (x).begin(),(x).end()

using namespace std;

int n, m;
string M[150];
int V[110][110][4];
int S[110][110][4];
int my[4] = {0, 1, 0, -1};
int mx[4] = {1, 0, -1, 0};
char SY[4] = {'<', 'v', '>', '^'};
// > v < ^

bool in(int y, int x) {
    return (y < n && y >=0 && x < m && x >= 0);
}

int main() {
    int T, sy, sx, ey, ex, x;
    cin >> T;
    REP(tc, T) {
        cin >> n >> m;
        CLR(V, 0);
        CLR(S, 0);

        REP(i, n) {
            cin >> M[i];
            REP(j, m) {
                if (M[i][j] == 'S') sy = i, sx = j, M[i][j] = '.';
                if (M[i][j] == 'G') ey = i, ex = j, M[i][j] = '.';
            }
        }
        REP(i, n) REP(j, m) if (M[i][j] == '.') {
            REP(k, 4) REPN(p, 1, 110) {
                int ny = i + my[k]*p;
                int nx = j + mx[k]*p;
                if (!in(ny, nx)) break;
                if (in(ny, nx) && M[ny][nx] != '.' && M[ny][nx] != '#') {
                    REP(t, 4) if (M[ny][nx] == SY[t]) x = t;
                    V[i][j][(x+k)%4] = 1;
//                    dbg3(i, j, (x+k)%4);
//                    dbg2(ny, nx);
                    break;
                }
            }
        }

        queue < pair < int, pair <int, int> > > Q;
        Q.push(mp(0, mp(sy, sx)));
        int res = 0;

        while(!Q.empty()) {
            int w = Q.front().first, y = Q.front().second.first, x = Q.front().second.second;
            Q.pop();

            if (y == ey && x == ex) {
                res = w;
                break;
            }

            REP(i, 4) {
                int ny = y + my[i];
                int nx = x + mx[i];
                if (in(ny, nx) && !S[ny][nx][(w+1)%4] && !V[ny][nx][(w+1)%4]) {
                    Q.push(mp(w+1, mp(ny, nx)));
                    S[ny][nx][(w+1)%4] = 1;
                }
            }
        }
        if (res == 0) 
            cout << "Case #" << tc+1 << ": impossible\n";
        else
            cout << "Case #" << tc+1 << ": " << res << "\n";
    }
    return 0;
}

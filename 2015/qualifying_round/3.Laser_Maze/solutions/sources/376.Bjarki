#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define all(o) (o).begin(), (o).end()
#define allr(o) (o).rbegin(), (o).rend()
const int INF = 2147483647;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
template <class T> int size(T &x) { return x.size(); }

// assert or gtfo

char arr[1000][1000];
bool lazered[4][1000][1000];
int dist[4][1000][1000];

int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};

int main()
{
    int ts;
    scanf("%d\n", &ts);

    for (int t = 0; t < ts; t++) {
        printf("Case #%d: ", t + 1);

        int n, m;
        scanf("%d %d\n", &n, &m);

        int sx, sy,
            ex, ey;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                scanf("%c", &arr[i][j]);

                if (arr[i][j] == 'S') {
                    sx = i;
                    sy = j;
                    arr[i][j] = '.';
                } else if (arr[i][j] == 'G') {
                    ex = i;
                    ey = j;
                    arr[i][j] = '.';
                }
            }
            scanf("\n");
        }

        memset(lazered, 0, sizeof(lazered));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int dir = -1;
                if (arr[i][j] == '^') dir = 0;
                if (arr[i][j] == '>') dir = 1;
                if (arr[i][j] == 'v') dir = 2;
                if (arr[i][j] == '<') dir = 3;

                if (dir == -1)
                    continue;

                for (int d = 0; d < 4; d++) {
                    for (int k = 0, x = i, y = j; ; ) {

                        lazered[d][x][y] = true;

                        x += dx[dir];
                        y += dy[dir];
                        if (!(0 <= x && x < n && 0 <= y && y < m)) break;
                        if (arr[x][y] != '.')
                            break;
                    }

                    dir = (dir + 1) % 4;
                }
            }
        }

        // if (lazered[0][sx][sy]) {
        //     printf("impossible\n");
        //     assert(false);
        //     continue;
        // }

        memset(dist, -1, sizeof(dist));
        dist[0][sx][sy] = 0;
        queue<pair<ii, int> > Q;
        Q.push(make_pair(ii(sx, sy), 0));

        bool found = false;
        while (!Q.empty()) {

            int cx = Q.front().first.first,
                cy = Q.front().first.second,
                d = Q.front().second;

            Q.pop();

            if (cx == ex && cy == ey) {
                printf("%d\n", dist[d][cx][cy]);
                found = true;
                break;
            }

            for (int dx = -1; dx <= 1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    if ((dx == 0) == (dy == 0)) {
                        continue;
                    }

                    int nx = cx + dx,
                        ny = cy + dy,
                        nd = (d + 1) % 4;

                    if (nx < 0 || ny < 0 || nx >= n || ny >= m)
                        continue;

                    if (arr[nx][ny] != '.')
                        continue;

                    if (lazered[nd][nx][ny]) {
                        continue;
                    }

                    if (dist[nd][nx][ny] == -1) {
                        dist[nd][nx][ny] = 1 + dist[d][cx][cy];
                        Q.push(make_pair(ii(nx, ny), nd));
                    }
                }
            }
        }

        if (!found) {
            printf("impossible\n");
        }
    }

    return 0;
}


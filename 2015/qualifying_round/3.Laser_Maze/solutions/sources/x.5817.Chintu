#include <bits/stdc++.h>
using namespace std;

#define debug(a,n)    cerr << "["; for(int i = 0; i < n; ++i) cerr << a[i] << " ";cerr << "\b]\n";
#define dbg(args...)  {debug1,args; cerr<<endl;}
#define pause()       cin.get();cin.get();

struct debugger {
    template<typename T> debugger& operator , (const T& v) {
        cerr<<v<<" "; return *this;
    }
} debug1;

template <typename T1, typename T2>
inline ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    return os << "(" << p.first << ", " << p.second << ")";
}

int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

string fix = "^>v<";
const int NN = 112;
const int inf = 100000000;

string grid[NN];
bool pos[NN][NN][4];
int n,m;

int get(int x,int y){
    for(int k = 0; k < 4; ++k){
        if (grid[x][y] == fix[k])
            return k;
    }
    return -1;
}

bool valid(int x,int y){
    if (x < 0 or y < 0 or x >= n or y >= m)
        return false;
    return true;
}

bool vis[NN][NN][4];

struct node{
    int x,y,k,d;
    node(){}
    node(int _x,int _y,int _k,int _d){
        x = _x;
        y = _y;
        k = _k;
        d = _d;
    }
};

int f(int x,int y,int k){
    queue<node> q;
    q.push(node(x,y,k,0));

    int d;
    while(!q.empty()){
        x = q.front().x;
        y = q.front().y;
        k = q.front().k;
        d = q.front().d;

        q.pop();
        if (pos[x][y][k]) continue;
        if (grid[x][y] == 'G')
            return d;
        if (vis[x][y][k]) continue;
        vis[x][y][k] = true;

        int nw = (k+1)%4;
        for(int k = 0; k < 4; ++k){
            int xx = x + dx[k];
            int yy = y + dy[k];

            if (!valid(xx,yy)) continue;
            if (pos[xx][yy][nw]) continue;
            if (grid[xx][yy] == '#') continue;
            if (get(xx,yy) >= 0) continue;
            if (vis[xx][yy][nw]) continue;
            q.push(node(xx,yy,nw,d+1));
        }
    }

    return -1;
}

void solve(int tc){
    cin >> n >> m;
    for(int i = 0; i < n; ++i)
        cin >> grid[i];

    memset(pos,false,sizeof(pos));
    memset(vis,false,sizeof(vis));

    int st_x,st_y;
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < m; ++j){
            if (grid[i][j] == 'S')
                st_x = i, st_y = j;
            int num = get(i,j);
            if (num < 0)
                continue;

            for(int k = 0; k < 4; ++k){
                int x = i + dx[num];
                int y = j + dy[num];

                while(valid(x,y) and (get(x,y) < 0) and grid[x][y] != '#'){
                    pos[x][y][k] = true;
                    x += dx[num];
                    y += dy[num];
                }

                num = (num+1)%4;
            }
        }
    }

    int ans = f(st_x,st_y,0);
    cout << "Case #" << tc << ": ";
    if (ans == -1)
        cout << "impossible\n";
    else
        cout << ans << "\n";
}

int main()
{
    freopen("inp.txt","r",stdin);
    freopen("out.txt","w",stdout);

    ios_base::sync_with_stdio(false);
    int t;
    cin >> t;

    for(int i = 1; i <= t; ++i)
        solve(i);
    return 0;
}

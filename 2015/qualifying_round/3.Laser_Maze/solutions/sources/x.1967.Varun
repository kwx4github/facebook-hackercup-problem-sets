#include <bits/stdc++.h>
 
using namespace std;
 
#define REP(i, n) for(int i=0; i<(n); i++)
#define FOR(i, a, b) for(int i=(a); i<(b); i++)
#define IFOR(i, a, b) for(int i=(a); i>=(b); i--)
#define FORD(i, a, b, c) for(int i=(a); i<(b); i+=(c))
 
#define SS ({int x;scanf("%d", &x);x;})
#define SI(x) ((int)x.size())
#define PB(x) push_back(x)
#define MP(a,b) make_pair(a, b)
#define SORT(a) sort(a.begin(),a.end())
#define ITER(it,a) for(typeof(a.begin()) it = a.begin(); it!=a.end(); it++)
#define ALL(a) a.begin(),a.end()
#define INF 1000000000
#define V vector
#define S string
#define FST first
#define SEC second
typedef V<int> VI;
typedef V<S> VS;
typedef long long LL;
typedef pair<int, int> PII;

#define LEF 1
#define UP 2
#define RIG 3
#define DOW 4

int ar[101][101];
int laz[101][101];
int n,m;

int dir[4][2]={{0,-1},{-1,0},{0,1},{1,0}};

int isvalid(int a, int b){
	if(a>=0 && a<n && b>=0 && b<m)
		return true;
	return false;
}

void fill(int i, int j){
	for(int k=0;k<4;k++){
		int pk = (ar[i][j]-1+k)%4;
		int x=i+dir[pk][0],y=j+dir[pk][1];
		while(isvalid(x,y) && ar[x][y]==0){
			laz[x][y] = laz[x][y] | (1<<k);
			x+=dir[pk][0];y+=dir[pk][1];
		}
	}
}

int main(){
	int ite;
	cin>>ite;
	int c=1;
	while(ite--){
		cout<<"Case #"<<c++<<": ";
		memset(laz,0,sizeof(laz));
		memset(ar,0,sizeof(ar));
		cin>>n>>m;
		string s;
		int sx,sy,ex,ey;
		for(int i=0;i<n;i++){
			cin>>s;
			for(int j=0;j<m;j++){
				if(s[j]=='#')
					ar[i][j]=-1;
				else if(s[j]=='.')
					ar[i][j]=0;
				else if(s[j]=='<')
					ar[i][j]=LEF;
				else if(s[j]=='^')
					ar[i][j]=UP;
				else if(s[j]=='>')
					ar[i][j]=RIG;
				else if(s[j]=='v')
					ar[i][j]=DOW;
				else if(s[j]=='S'){
					sx=i;sy=j;
				}
				else if(s[j]=='G'){
					ex=i;ey=j;
				}
			}
		}
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++)
				if(ar[i][j]>0&&ar[i][j]<5)
					fill(i,j);
		//for(int i=0;i<n;i++){for(int j=0;j<m;j++)cout<<laz[i][j]<<' ';cout<<endl;}
		queue<int> qx,qy,qc;

		int visited[n][m][4];
		memset(visited,0,sizeof(visited));
		int tx=sx,ty=sy,tc=0,tt;
		int cost=-1;

		qx.push(tx+dir[0][0]);qy.push(ty+dir[0][1]);qc.push(tc+1);
		qx.push(tx+dir[1][0]);qy.push(ty+dir[1][1]);qc.push(tc+1);
		qx.push(tx+dir[2][0]);qy.push(ty+dir[2][1]);qc.push(tc+1);
		qx.push(tx+dir[3][0]);qy.push(ty+dir[3][1]);qc.push(tc+1);

		while(!qx.empty()){
			tx=qx.front();qx.pop();
			ty=qy.front();qy.pop();
			tc=qc.front();qc.pop();
			tt = tc%4;

			if(!isvalid(tx,ty) || ar[tx][ty]==-1)
				continue;
			if(visited[tx][ty][tt])
				continue;
			visited[tx][ty][tt]=1;
			//cout<<tt<<endl;
			if(laz[tx][ty] & (1<<tt))
				continue;
			if(tx==ex && ty==ey){
				cost = tc;
				break;
			}
			//cout<<tx<<' '<<ty<<endl;
			qx.push(tx+dir[0][0]);qy.push(ty+dir[0][1]);qc.push(tc+1);
			qx.push(tx+dir[1][0]);qy.push(ty+dir[1][1]);qc.push(tc+1);
			qx.push(tx+dir[2][0]);qy.push(ty+dir[2][1]);qc.push(tc+1);
			qx.push(tx+dir[3][0]);qy.push(ty+dir[3][1]);qc.push(tc+1);
		}
		if(cost==-1)
			cout<<"impossible"<<endl;
		else
			cout<<cost<<endl;

	}
}
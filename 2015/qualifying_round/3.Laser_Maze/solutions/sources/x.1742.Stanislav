#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <map>
#include <hash_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
//#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
const int MAX = 2147483647;
const int MAXN = 150;
typedef long long LL;
const LL MOD = 1000000000 + 7;

struct step{
	int x,y,num;
};

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
#else
	//freopen("movetofront.in", "r", stdin); freopen("movetofront.out", "w", stdout);
#endif
	
	int T;
	cin>>T;
	int A[105][105];
	int D[105][105][4];
	forn(it, 0, T)
	{
		int n,m;
		cin>>n>>m;
		int sx,sy,gx,gy;
		mems(A, -1);
		forn(i, 0, n)
		{
			string s;
			cin>>s;
			for(int j = 0; j < m; ++j)
			{
				if (s[j] == 'S')
				{
					sx = i + 1;
					sy = j + 1;
					A[i + 1][j + 1] = 0;
				}
				if (s[j] == 'G')
				{
					gx = i + 1;
					gy = j + 1;
					A[i + 1][j + 1] = 0;
				}
				if (s[j] == '.')
				{
					A[i + 1][j + 1] = 0;
				}
				if (s[j] == '#') continue;
				if (s[j] == '>') A[i + 1][j + 1] = 1;
				if (s[j] == '^') A[i + 1][j + 1] = 2;
				if (s[j] == '<') A[i + 1][j + 1] = 3;
				if (s[j] == 'v') A[i + 1][j + 1] = 4;
			}
		}

		mems(D, 0);
		queue<step> Q;
		step start;
		start.x = sx;
		start.y = sy;
		start.num = 0;
		Q.push(start);
		int ans = -1;
		while(!Q.empty())
		{
			auto cur = Q.front();
			Q.pop();

			int x = cur.x;
			int y = cur.y;
			int time = cur.num % 4;
			bool shot = false;
			for(int i = x + 1; i <= n; ++i)
			{
				if (A[i][y] == -1) break;
				if (A[i][y] >= 1)
				{
					int cur_dir = ((A[i][y] - 1) + time) % 4 + 1;
					if (cur_dir == 2) {shot = true;}
					break;
				}
			}
			for(int i = x - 1; i >= 1; --i)
			{
				if (A[i][y] == -1) break;
				if (A[i][y] >= 1)
				{
					int cur_dir = ((A[i][y] - 1) + time) % 4 + 1;
					if (cur_dir == 4) {shot = true;}
					break;
				}
			}

			for(int i = y + 1; i <= m; ++i)
			{
				if (A[x][i] == -1) break;
				if (A[x][i] >= 1)
				{
					int cur_dir = ((A[x][i] - 1) + time) % 4 + 1;
					if (cur_dir == 3) {shot = true;}
					break;
				}
			}
			for(int i = y - 1; i >= 1; --i)
			{
				if (A[x][i] == -1) break;
				if (A[x][i] >= 1)
				{
					int cur_dir = ((A[x][i] - 1) + time) % 4 + 1;
					if (cur_dir == 1) {shot = true;}
					break;
				}
			}

			if(shot && cur.num != 0) continue;
			if (x == gx && y == gy)
			{
				ans = cur.num;
				break;
			}
			int newx = x + 1;
			int newy = y;
			int newnum = cur.num + 1;
			if (A[newx][newy] == 0 && !D[newx][newy][newnum % 4])
			{
				D[newx][newy][newnum % 4] = 1;
				step news;
				news.x = newx;
				news.y = newy;
				news.num = newnum;
				Q.push(news);
			}
			newx = x - 1;
			newy = y;
			if (A[newx][newy] == 0 && !D[newx][newy][newnum % 4])
			{
				D[newx][newy][newnum % 4] = 1;
				step news;
				news.x = newx;
				news.y = newy;
				news.num = newnum;
				Q.push(news);
			}
			newx = x;
			newy = y + 1;
			if (A[newx][newy] == 0 && !D[newx][newy][newnum % 4])
			{
				D[newx][newy][newnum % 4] = 1;
				step news;
				news.x = newx;
				news.y = newy;
				news.num = newnum;
				Q.push(news);
			}
			newx = x;
			newy = y - 1;
			if (A[newx][newy] == 0 && !D[newx][newy][newnum % 4])
			{
				D[newx][newy][newnum % 4] = 1;
				step news;
				news.x = newx;
				news.y = newy;
				news.num = newnum;
				Q.push(news);
			}
		}
		if (ans == -1)
		{
			cout<<"Case #"<<it+1<<": "<<"impossible"<<endl;
		}
		else
		{
			cout<<"Case #"<<it+1<<": "<<ans<<endl;
		}

	}


	return 0;
}
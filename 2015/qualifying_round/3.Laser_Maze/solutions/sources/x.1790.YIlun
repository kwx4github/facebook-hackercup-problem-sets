#define debug
#define usepb_ds
#define usetr1

/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")

#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <list>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <sstream>

using namespace std;

#ifdef usetr1
#include <tr1/unordered_map>
#include <tr1/unordered_set>
using namespace tr1;
#endif

#ifdef usepb_ds
#include <ext/pb_ds/priority_queue.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
// binomial_heap_tag, rc_binomial_heap_tag, thin_heap_tag, binary_heap_tag
typedef __gnu_pbds::priority_queue<int, greater<int>, pairing_heap_tag> pq_type;
// splay_tree_tag, ov_tree_tag
typedef tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> tree_type;
#endif

#define mpr make_pair
typedef unsigned int ui;
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const long double eps = 1e-10;
const int step[8][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}

template <class T> inline T max1(T a, T b) { return b < a ? a : b; }
template <class T> inline T max1(T a, T b, T c) { return max1(max1(a, b), c); }
template <class T> inline T max1(T a, T b, T c, T d) { return max1(max1(a, b, c), d); }
template <class T> inline T max1(T a, T b, T c, T d, T e) { return max1(max1(a, b, c, d), e); }
template <class T> inline T min1(T a, T b) { return a < b ? a : b; }
template <class T> inline T min1(T a, T b, T c) { return min1(min1(a, b), c); }
template <class T> inline T min1(T a, T b, T c, T d) { return min1(min1(a, b, c), d); }
template <class T> inline T min1(T a, T b, T c, T d, T e) { return min1(min1(a, b, c, d), e); }

inline int jud(double a, double b){
	if(abs(a) < eps && abs(b) < eps) return 0;
	else if(abs1(a - b) / abs1(a) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename t> inline int jud(t a, t b){
	if(a < b) return -1;
	if(a == b) return 0;
	return 1;
}

// f_lb == 1代表返回相同的一串的左边界，f_small == 1代表返回如果没有寻找的值返回小的数
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1) be--;
		if(!f_small && jud(*(a + be), val) == -1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1) be--;
		if(f_small && jud(*(a + be), val) == 1) be++;
	}
	return be;
}

template <class T> inline T lowb(T num) {return num & (-num); }
inline int bitnum(ui nValue) { return __builtin_popcount(nValue); }
inline int bitnum(int nValue) { return __builtin_popcount(nValue); }
inline int bitnum(ull nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitnum(ll nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitmaxl(ui a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(int a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(ull a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }
inline int bitmaxl(ll a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }

long long pow(long long n, long long m, long long mod = 0){
	if(m < 0) return 0;
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

#define  MOD 1000000007
template <class t1, class t2>
inline void add(t1 &a, t2 b, int mod = -1) {
	if(mod == -1) mod = MOD;
	a += b;
	while(a >= mod) a -= mod;
	while(a < 0) a += mod;
}
template <class t>
void output1(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		cerr << arr[i] << ' ';
	cerr << endl;
}
template <class t>
void output2(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		output1(arr[i]);
}

//....................密..........封..........线..........下..........禁..........止..........hack...............................................

const int maxn = 110;
int dis[4][maxn][maxn];
char mp[4][maxn][maxn];
char laser[4] = {'^', '>', 'v', '<'};
int ncase, n, m;
int q[maxn * maxn * 4][3], lq, rq;
pii be, en;

int main() {
	ios_base::sync_with_stdio(0);
	#ifdef debug //......................................................................................................
	freopen("input.txt", "r", stdin);
	int __size__ = 256 << 20; // 256MB
	char *__p__ = (char*)malloc(__size__) + __size__;
	__asm__("movl %0, %%esp\n" :: "r"(__p__));
	#endif //...........................................................................................................

	scanf("%d", &ncase);
	for(int i1 = 0; i1 < ncase; i1++) {
		scanf("%d%d", &n, &m);
		for(int i = 0; i < n; i++)
			scanf("%s", mp[0][i]);

		for(int i = 0; i < n; i++) for(int j = 0; j < m; j++) {
			if(mp[0][i][j] == 'S') {
				be = mpr(i, j);
				mp[0][i][j] = '.';
			}
			if(mp[0][i][j] == 'G') {
				en = mpr(i, j);
				mp[0][i][j] = '.';
			}
			if(mp[0][i][j] == '#' || mp[0][i][j] == '.') {
				for(int p = 1; p < 4; p++)
					mp[p][i][j] = mp[0][i][j];
				continue;
			}
			int st = 0;
			for(; st < 4; st++)
				if(laser[st] == mp[0][i][j])
					break;
			for(int p = 1; p < 4; p++)
				mp[p][i][j] = laser[(st + p) % 4];
		}


		for(int p = 0; p < 4; p++) {
			for(int i = 0; i < n; i++) for(int j = 0; j < m; j++) {
				if(mp[0][i][j] == '#' || mp[0][i][j] == '.')
					continue;
				int dir = 0;
				for(; dir < 4; dir++) if(laser[dir	] == mp[p][i][j])
					break;
				int x = i + step[dir][0], y = j + step[dir][1];
				for(; x >= 0 && x < n && y >= 0 && y < m; ) {
					if(mp[p][x][y] == '.')
						mp[p][x][y] = '#';
					else break;
					x += step[dir][0];
					y += step[dir][1];
				}
			}
		}

//		//
//		#ifdef debug //......................................................................................................
//		for(int cate = 0; cate < 4; cate++) {
//			for(int i = 0; i < n; i++) puts(mp[cate][i]);
//			puts("");
//		}
//		#endif //...........................................................................................................


		memset(dis, 0x3f, sizeof(dis));
		dis[0][be.first][be.second] = 0;

		lq = rq = 0;
		q[rq][0] = 0; q[rq][1] = be.first; q[rq][2] = be.second;
		rq++;
		for(; lq != rq; lq++) {
			int cate = q[lq][0], x = q[lq][1], y = q[lq][2];
			for(int i = 0; i < 4; i++) {
				int rcate = (cate + 1) % 4, rx = x + step[i][0], ry = y + step[i][1];
				if(rx < 0 || rx >= n || ry < 0 || ry >= m)
					continue;
				if(mp[rcate][rx][ry] != '.') continue;
				if(dis[rcate][rx][ry] <= dis[cate][x][y] + 1) continue;
				dis[rcate][rx][ry] = dis[cate][x][y] + 1;
				q[rq][0] = rcate;
				q[rq][1] = rx;
				q[rq][2] = ry;
				rq++;
			}
		}
		int ans = MOD;
		for(int cate = 0; cate < 4; cate++)
			ans = min(ans, dis[cate][en.first][en.second]);

		printf("Case #%d: ", i1 + 1);
		if(ans >= MOD) puts("impossible");
		else printf("%d\n", ans);
	}

    return 0;
}

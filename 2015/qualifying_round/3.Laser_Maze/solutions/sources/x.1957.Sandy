#include <stdio.h>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <stdlib.h>
#include <math.h>
#include <cmath>
#include <string.h>
#include <string>
#include <algorithm>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <limits.h>
#include <time.h>
#include <bitset>
#include <list>
#include <cassert>

#define EPS 1e-11
#define PI acos(-1)
#define LL long long
#define INF 1000000009
#define MP(a,b) make_pair(a,b)
#define PB(a) push_back(a)
#define OPENR(a) freopen(a,"r",stdin)
#define OPENW(a) freopen(a,"w",stdout)
#define pii pair<int,int>

int x4[4] = { 0, 0,-1, 1};
int y4[4] = {-1, 1, 0, 0};
int x8[8] = {-1,-1,-1, 0, 0, 1, 1, 1};
int y8[8] = {-1, 0, 1,-1, 1,-1, 0, 1};
int xhorse[8] = {1,2,1,2,-1,-2,-1,-2};
int yhorse[8] = {2,1,-2,-1,2,1,-2,-1};

using namespace std;

int t;
int n,m;
char s[4][105][105];
bool visited[4][105][105];
queue<pair<pii,pii> > q;

char next(char c)
{
	if (c=='^') return '>';
	if (c=='>') return 'v';
	if (c=='v') return '<';
	if (c=='<') return '^';
	assert(false);
}

int main()
{
	OPENR("laser_maze.txt");
	OPENW("laser_maze.out");
	
	scanf("%d",&t);
	
	for (int tc=1;tc<=t;tc++)
	{
		scanf("%d %d",&n,&m);
		for (int i=0;i<n;i++) scanf("%s",s[0][i]);
		
		pii start,goal;
		for (int i=0;i<n;i++)
		{
			for (int j=0;j<m;j++)
			{
				if (s[0][i][j]=='.' || s[0][i][j]=='#')
				{
					for (int k=1;k<4;k++) s[k][i][j] = s[0][i][j];
				}
				else if (s[0][i][j]=='S' || s[0][i][j]=='G')
				{
					if (s[0][i][j]=='S') start = MP(i,j);
					else if (s[0][i][j]=='G') goal = MP(i,j);
					for (int k=0;k<4;k++) s[k][i][j] = '.';
				}
				else
				{
					for (int k=1;k<4;k++) s[k][i][j] = next(s[k-1][i][j]);
				}
			}
		}
		
		for (int k=0;k<4;k++)
		{
			for (int i=0;i<n;i++)
			{
				for (int j=0;j<m;j++)
				{
					if (s[k][i][j]=='^')
					{
						for (int l=i-1;l>=0 && s[k][l][j]=='.';l--)
						{
							s[k][l][j] = 'd';
						}
					}
					else if (s[k][i][j]=='v')
					{
						for (int l=i+1;l<n && s[k][l][j]=='.';l++)
						{
							s[k][l][j] = 'd';
						}
					}
					else if (s[k][i][j]=='<')
					{
						for (int l=j-1;j>=0 && s[k][i][l]=='.';l--)
						{
							s[k][i][l] = 'd';
						}
					}
					else if (s[k][i][j]=='>')
					{
						for (int l=j+1;j<m && s[k][i][l]=='.';l++)
						{
							s[k][i][l] = 'd';
						}
					}
				}
			}
		}
		
		int ans = -1;
		while(!q.empty()) q.pop();
		memset(visited,false,sizeof(visited));
		
		q.push(MP(start, MP(0,0)));
		
		while(!q.empty())
		{
			int layer = q.front().second.first;
			int cur = q.front().second.second;
			pii pos = q.front().first;
			q.pop();
			
		//	printf("layer:%d, (%d,%d)\n",layer,pos.first,pos.second);
			
			if (pos == goal)
			{
				ans = cur;
				break;
			}
			
			pii np;
			for (int i=0;i<4;i++)
			{
				np = pos;
				np.first += x4[i];
				np.second += y4[i];
				if (np.first<0 || np.second<0 || np.first>=n || np.second>=m) continue;
				if (visited[(layer+1)%4][np.first][np.second]) continue;
				if (s[(layer+1)%4][np.first][np.second]!='.') continue;
				
				visited[(layer+1)%4][np.first][np.second] = true;
				q.push(MP(np, MP((layer+1)%4, cur+1)));
			}
			
		}
		
		printf("Case #%d: ",tc);
		if (ans==-1) printf("impossible\n");
		else printf("%d\n",ans);
	}
	
	return 0;
}


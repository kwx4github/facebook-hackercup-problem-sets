#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <algorithm>
#include <map>
#include <vector>
#include <iostream>
#include <set>
#include <cmath>
#include <cstring>
#include <bitset>
#include <deque>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

#define mp make_pair
#define pb push_back
#define bpc(a) __builtin_popcount(a)
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define clr(ar,val) memset(ar, val, sizeof(ar))
#define forn(i,n) for(int i=0;i<(n);++i)
#define X first
#define Y second
#define debug(x) { cerr<<#x<<" = "<<(x)<<endl; }

const int mod = 1e9 + 7;
const int inf = 1e9;

ll powm(ll a,ll p,ll m){ll r=1 % m;while(p){if(p&1)r=r*a%m;p>>=1;a=a*a%m;}return r;}

bool islaser(char c)
{
    return c == 'v' || c == '^' || c == '>' || c == '<';
}

char next(char c)
{
    if(c == '^')
        return '>';
    if(c == '>')
        return 'v';
    if(c == 'v')
        return '<';
    if(c == '<')
        return '^';
    return c;
}

int dist[4][110][110], di[] = {0,0,1,-1}, dj[] = {1,-1,0,0};

void solve()
{
    int m, n, si, sj, gi, gj;
    scanf("%d%d", &m, &n);
    char maze[4][110][110];
    forn(i, m)
    {
        scanf("%s", maze[0][i + 1] + 1);
        forn(j, n)
            if(maze[0][i + 1][j + 1] == 'S')
                si = i + 1, sj = j + 1, maze[0][i + 1][j + 1] = '.';
            else if(maze[0][i + 1][j + 1] == 'G')
                gi = i + 1, gj = j + 1, maze[0][i + 1][j + 1] = '.';
    }
    forn(k, 3) forn(i, m) forn(j, n)
        maze[k + 1][i + 1][j + 1] = next(maze[k][i + 1][j + 1]);
    forn(k, 4) for(int i = 1; i <= m; ++i) for(int j = 1; j <= n; ++j)
        if(islaser(maze[k][i][j]))
        {
            if(maze[k][i][j] == '^')
                for(int t = i - 1; maze[k][t][j] == '.'; --t)
                    maze[k][t][j] = '^';
            if(maze[k][i][j] == 'v')
                for(int t = i + 1; maze[k][t][j] == '.'; ++t)
                    maze[k][t][j] = 'v';
            if(maze[k][i][j] == '>')
                for(int t = j + 1; maze[k][i][t] == '.'; ++t)
                    maze[k][i][t] = '>';
            if(maze[k][i][j] == '<')
                for(int t = j - 1; maze[k][i][t] == '.'; --t)
                    maze[k][i][t] = '<';
        }
    vpii q;
    forn(k, 4) forn(i, m) forn(j, n)
        dist[k][i + 1][j + 1] = inf;
    dist[0][si][sj] = 0;
    q.pb(mp(si, sj));
    for(int st = 1; sz(q); ++st)
    {
        vpii tmp;
        int nk = st % 4;
        for(vpii::iterator it = q.begin(); it != q.end(); ++it)
        {
            forn(k, 4)
            {
                int ni = it->X + di[k], nj = it->Y + dj[k];
                if(maze[nk][ni][nj] == '.' && st < dist[nk][ni][nj])
                {
                    dist[nk][ni][nj] = st;
                    tmp.pb(mp(ni, nj));
                }
            }
        }
        q = tmp;
    }
    int ans = inf;
    forn(k, 4)
        ans = min(ans, dist[k][gi][gj]);
    if(ans == inf)
        puts("impossible");
    else
        printf("%d\n", ans);
}

int main()
{
    int t;
    scanf("%d", &t);
    forn(i, t)
    {
        printf("Case #%d: ", i + 1);
        solve();
    }
    return 0;
}

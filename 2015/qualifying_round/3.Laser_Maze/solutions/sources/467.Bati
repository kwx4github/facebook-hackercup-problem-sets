#include <algorithm>
#include <iostream>
#include <string.h>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string.h>
using namespace std;
#define MAXN 300
#define xx first 
#define yy second 
#define INF 1000000000
#define mp make_pair
using namespace std;

char arrows[4] = { '<' , '^', '>' ,'v' };
int dx[4] =      { 0 , -1 , 0 , 1};
int dy[4] =      { -1, 0 , 1 , 0 };

char getnext ( char a  , int k) {
     for ( int i = 0; i < 4; i ++ ) 
         if ( a == arrows[i] ) return (arrows[(i + k) % 4]);
}

pair< int,int > getDir( char a ) {
    for ( int i = 0; i < 4; i ++ ) 
         if ( a == arrows[i] ) return (make_pair (dx[i] , dy[i]));
}

bool isLaser ( char a) {
    for ( int i = 0; i < 4; i ++ ) 
        if ( a == arrows[i] ) return (1);
    return false;    
}


int n , m;
int state[MAXN][MAXN][4] = {0};
int board[MAXN][MAXN][4] = {0};

void reset () {
    memset(state , -1, sizeof (state));
    memset(board , -1, sizeof (board)); 
}

void fill ( int k  , vector<string> brd) {
    
    for ( int i = 0; i < n; i ++ ) {
        for ( int j = 0; j < m; j ++ ) {
            
            if ( isLaser (brd[i][j]) ) {
                 
                pair<int,int> dir = getDir( brd[i][j] );
                int x = i, y = j;
                bool t = true;
                
                while ( x >= 0 && x < n && y >=0 && y <=m && ( !isLaser( brd[x][y]) || t ) && brd[x][y] != '#' ) {
                     t = false;
                     board[x][y][k] = 1;
                     x = x + dir.xx;
                     y = y + dir.yy;            
                }
                       
            }
            else if ( brd[i][j] == '#' )     board[i][j][k] = 1;
            else if ( board[i][j][k] == -1 ) board[i][j][k] = 0;
        }
    }
}
bool avail ( int v , int u , int k) {
    if ( v>=0 && v < n && u >=0 && u < m &&  board[v][u][k] == 0 ) return 1;
    return false; 
}
pair<int,int> find (vector<string> brd,  char a) {
    for ( int i = 0; i < n; i ++ ) 
        for ( int j = 0; j < m; j ++ )
            if (brd[i][j] == a ) return mp ( i , j);          
}
int calc ( vector<string> brd ) {
     reset();
     n = brd.size();
     m = brd[0].size();
     
     
     for ( int k = 0; k < 4; k ++ ) {
          
          vector<string> temp = brd;
          
          for ( int i = 0; i < n; i ++ ) {
              for ( int j = 0; j < m; j ++ ) { 
                  if ( isLaser ( temp[i][j] ) ) {
                      temp[i][j] = getnext(temp[i][j] , k);       
                  }  
              }
          }  
          
          fill (k , temp);
     }
     
     queue< pair<int, pair<int,int> > > qe;
     
     pair<int,int> S = find (brd , 'S');
     pair<int,int> G   = find (brd , 'G');
     //if ( board[S.xx][S.yy][0] == 1  ) return -1;
     qe.push ( mp (0 , mp(S.xx , S.yy ) ) );
     state[S.xx][S.yy][0] = 0;
  
     while ( !qe.empty() ) {
          int current = qe.front().xx; 
          int nc = ( current + 1 ) % 4;
          int cx = qe.front().yy.xx;
          int cy = qe.front().yy.yy;
          int cost = state[cx][cy][current];
          qe.pop();
          if (cx == G.xx && cy == G.yy ) return cost;
          for ( int i = 0; i < 4; i ++ ) {
              int nx = cx + dx[i];
              int ny = cy + dy[i];
              if ( avail (nx , ny , nc ) && (state[nx][ny][nc] == -1 || cost + 1 < state[nx][ny][nc] ) ){
                 qe.push ( mp (nc , mp(nx , ny) ));     
                 state[nx][ny][nc] = cost + 1;
              }    
          }  
           
     }
     return -1;
     
}

int main() {
    freopen("laser_maze.txt" , "r" , stdin);
    freopen("laser_maze_output.txt", "w" , stdout);
    
    int T;
    cin >> T;
    for ( int test = 1; test <= T; test ++ ) {
       cin >> n >> m;
       vector<string> brd;
       brd.resize(n);
       for ( int i = 0; i < n; i ++ )
           cin >> brd[i];
       int res = calc (brd);    
       cout << "Case #"<<test<<": ";
       if (res < 0) cout << "impossible"<< endl;
       else cout << res << endl;      
    }
//system("pause");    
return 0;
}



// spnautilus's T
//
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(int _b=(b),i=(a); i<_b; ++i)
#define ROF(i,b,a) for(int _a=(a),i=(b); i>_a; --i)
#define _1 first
#define _2 second
#define PB(x) push_back(x)
#define MSET(m,v) memset(m,v,sizeof(m))
#define MAX_PQ(T) priority_queue <T>
#define MIN_PQ(T) priority_queue <T,vector<T>,greater<T>>
typedef long long LL; typedef long double LD; typedef unsigned int uint;
typedef pair<int,int> PII; typedef pair<LL,LL> PLL;
typedef vector<int> VI; typedef vector<LL> VL; typedef vector<PII> VP;
template<typename A, typename B> inline bool mina(A &x, B y) { return (x > y)? (x=y,1):0; }
template<typename A, typename B> inline bool maxa(A &x, B y) { return (x < y)? (x=y,1):0; }

#define MAXN (104)

const int dr[4] = {0, 1, 0, -1};
const int dc[4] = {1, 0, -1, 0};
const char ds[8] = ">v<^";
const int inf = 1e8;

int T;
int R, C;

char B[4][MAXN][MAXN];
int D[4][MAXN][MAXN];

inline PII d1(char c)
{
	FOR(i,0,4) if(c == ds[i]) return PII(dr[i], dc[i]);
	return {0,0};
}

inline int inrange(int r, int c)
{
	return r >= 0 && r < R && c >= 0 && c < C;
}

int main()
{
	map <char,char> rot;
	FOR(i,0,4) rot[ds[i]] = ds[(i+1)%4];
	rot['.'] = '.';
	rot['#'] = '#';

	map <char,int> blk;
	FOR(i,0,4) blk[ds[i]] = 1;
	blk['.'] = 0;
	blk['O'] = 0;
	blk['#'] = 1;

	cin >> T;
	FOR(tt,1,T+1)
	{
		cin >> R >> C;
		FOR(i,0,R) scanf("%s", B[0][i]);
		PII S, G;
		FOR(i,0,R) FOR(j,0,C)
		{
			char &b = B[0][i][j];
			if(b == 'S')
			{
				S = {i,j};
				b = '.';
			}
			if(b == 'G')
			{
				G = {i,j};
				b = '.';
			}
		}
		FOR(i,1,4) FOR(j,0,R)
		{
			strcpy(B[i][j], B[i-1][j]);
			FOR(k,0,C) B[i][j][k] = rot[B[i][j][k]];
		}
		FOR(i,0,4) FOR(j,0,R) FOR(k,0,C)
		{
			PII d = d1(B[i][j][k]);
			if(d != PII(0,0))
			{
				int r = j + d._1;
				int c = k + d._2;
				while(inrange(r,c) && !blk[B[i][r][c]])
				{
					B[i][r][c] = 'O';
					r += d._1;
					c += d._2;
				}
			}
		}

		int sol = -1;
		queue <tuple<int,int,int,int>> Q;

		FOR(i,0,4) FOR(j,0,R) FOR(k,0,C) D[i][j][k] = inf;
		D[0][S._1][S._2] = 0;
		Q.emplace(0,0,S._1,S._2);

		while(!Q.empty())
		{
			int d, t, r, c;
			tie(d,t,r,c) = Q.front();
			Q.pop();

			if(G == PII(r,c))
			{
				sol = d;
				break;
			}
			t = (t+1)%4;

			FOR(i,0,4)
			{
				int rr = r + dr[i];
				int cc = c + dc[i];
				if(inrange(rr,cc) && B[t][rr][cc] == '.' && mina(D[t][rr][cc], d+1))
				{
					Q.emplace(d+1,t,rr,cc);
				}
			}
		}

		printf("Case #%d: ", tt);
		if(sol == -1) printf("impossible\n");
		else printf("%d\n", sol);
	}

	return 0;
}

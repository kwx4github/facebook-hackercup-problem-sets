#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define p(n) printf("%d\n",n)
#define mod 1000000007
#define ll long long
#define inf 1000000000
using namespace std;
ll gcd(ll a,ll b)
{
if(a%b==0)
return b;
else
return gcd(b,a%b);
}
struct node
{
 int i,j;
};
pair<int,int>sr,des;
int dist[101][101];
char maze[101][101];
int pos[101][101][4];
int vis[101][101];
int xm[4]={1,-1,0,0};
int ym[4]={0,0,1,-1};
int n,m;
bool operator<(const struct node &a,const struct node &b)
{
 return dist[a.i][a.j]>dist[b.i][b.j];
}
bool valid(int x,int y,int tim)
{
 int i,nx,ny;
 for(i=0;i<4;++i)
 {
   int nx=x+xm[i];
     int ny=y+ym[i];
     if((nx>=1) && (nx<=n) && (ny>=1) && (ny<=m) && (maze[nx][ny]!='#') && (maze[nx][ny]!='^') && (maze[nx][ny]!='>') && (maze[nx][ny]!='v') && (maze[nx][ny]!='<'))
     {
      if(pos[nx][ny][tim%4]==0)
      return 1;
     }
  }
  return 0;
}
void djistra()
{
 int k;
 priority_queue<node>q;
 node source,curr,ne;
 source.i=sr.first;
 source.j=sr.second;
 q.push(source);
 dist[source.i][source.j]=0;
 vis[source.i][source.j]=1;
 while(!q.empty())
 {
   curr=q.top();
   q.pop();
   int x=curr.i;
   int y=curr.j;
   vis[x][y]=2;
   for(k=0;k<4;++k)
   {
     int nx=x+xm[k];
     int ny=y+ym[k];
     if((nx>=1) && (nx<=n) && (ny>=1) && (ny<=m) && (maze[nx][ny]!='#') && (maze[nx][ny]!='^') && (maze[nx][ny]!='>') && (maze[nx][ny]!='v') && (maze[nx][ny]!='<'))
     {
       int nt=dist[x][y]+1;
       if(pos[nx][ny][nt%4]==0)
       {
         if(vis[nx][ny]==0)
         {
          vis[nx][ny]=1;
          ne.i=nx;
          ne.j=ny;
          dist[nx][ny]=nt;
          q.push(ne);
         }
         else if(vis[nx][ny]==1)
           dist[nx][ny]=min(dist[nx][ny],nt);
       }
       else if( (valid(x,y,nt)) && pos[x][y][(nt+1)%4]==0)
       {
         if(vis[nx][ny]==0)
         {
          vis[nx][ny]=1;
          ne.i=nx;
          ne.j=ny;
          dist[nx][ny]=nt+2;
          q.push(ne);
         }
         else if(vis[nx][ny]==1)
           dist[nx][ny]=min(dist[nx][ny],nt+2);
       }

     }
   }
 }
}
int main()
{
     int t,i,j,k,p;
    cin>>t;

    for(p=1;p<=t;++p)
    {
      cout<<"Case #"<<p<<": ";
       cin>>n>>m;
       for(i=1;i<=n;++i)
       for(j=1;j<=m;++j)
       {
        scanf(" %c",&maze[i][j]);
        if(maze[i][j]=='S')
        {
         sr.first=i;
         sr.second=j;
        }
        if(maze[i][j]=='G')
        {
         des.first=i;
         des.second=j;
        }
        dist[i][j]=inf;
        pos[i][j][0]=pos[i][j][1]=pos[i][j][2]=pos[i][j][3]=0;
        vis[i][j]=0;
       }
       for(i=1;i<=n;++i)
       for(j=1;j<=m;++j)
       {
         ///check khatra right
         for(k=j+1;k<=m;++k)
         {
          if(maze[i][k]=='#')
          break;
          else if(maze[i][k]=='^')
          {
           pos[i][j][3]=1;
           break;
          }
          else if(maze[i][k]=='>')
          {
           pos[i][j][2]=1;
           break;
          }
          else if(maze[i][k]=='v')
          {
           pos[i][j][1]=1;
           break;
          }
          else if(maze[i][k]=='<')
          {
           pos[i][j][0]=1;
           break;
          }
         }
         ///check khatra left
         for(k=j-1;k>=1;--k)
         {
          if(maze[i][k]=='#')
          break;
          else if(maze[i][k]=='^')
          {
           pos[i][j][1]=1;
           break;
          }
          else if(maze[i][k]=='>')
          {
           pos[i][j][0]=1;
           break;
          }
          else if(maze[i][k]=='v')
          {
           pos[i][j][3]=1;
           break;
          }
          else if(maze[i][k]=='<')
          {
           pos[i][j][2]=1;
           break;
          }
         }
         ///check khatra up
         for(k=i-1;k>=1;--k)
         {
          if(maze[k][j]=='#')
          break;
          else if(maze[k][j]=='^')
          {
           pos[i][j][2]=1;
           break;
          }
          else if(maze[k][j]=='>')
          {
           pos[i][j][1]=1;
           break;
          }
          else if(maze[k][j]=='v')
          {
           pos[i][j][0]=1;
           break;
          }
          else if(maze[k][j]=='<')
          {
           pos[i][j][3]=1;
           break;
          }
         }
         /// check khatra down
         for(k=i+1;k<=n;++k)
         {
          if(maze[k][j]=='#')
          break;
          else if(maze[k][j]=='^')
          {
           pos[i][j][0]=1;
           break;
          }
          else if(maze[k][j]=='>')
          {
           pos[i][j][3]=1;
           break;
          }
          else if(maze[k][j]=='v')
          {
           pos[i][j][2]=1;
           break;
          }
          else if(maze[k][j]=='<')
          {
           pos[i][j][1]=1;
           break;
          }
         }
       }
       /*cout<<sr.first<<" "<<sr.second<<endl;
       cout<<des.first<<" "<<des.second<<endl;*/
       djistra();
      /* for(i=1;i<=n;++i)
       {
        for(j=1;j<=m;++j)
        {
         cout<<i<<" "<<j<<" "<<dist[i][j]<<endl;
        }
        cout<<endl;
       }*/
       if(dist[des.first][des.second]==inf)
       printf("impossible\n");
       else
       printf("%d\n",dist[des.first][des.second]);
    }
return 0;
}

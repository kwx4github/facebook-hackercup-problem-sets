#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

char mapa[101][101];
int grafo[101][101][4];
bool marked[101][101][4];
int M, N;
int inicialX, inicialY;
int finalX, finalY;

int dirX[] = {-1, 0, 1, 0};
int dirY[] = {0, 1, 0, -1};
string caminho = "^>v<";

void read() {
	scanf("%d %d", &M, &N);
	for (int i = 0; i < M; i++)
		scanf("%s", mapa[i]);

	memset(grafo, 0x3f, sizeof grafo);
	memset(marked, false, sizeof marked);
}

void process(int caso) {
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			if (mapa[i][j] == '#') {
				for (int k = 0; k < 4; k++)
					grafo[i][j][k] = -1;
			} else if (mapa[i][j] == 'S') {
				inicialX = i;
				inicialY = j;
			} else if (mapa[i][j] == 'G') {
				finalX = i;
				finalY = j;
			} else if (mapa[i][j] != '.') {
				int idx;
				for (idx = 0; idx < caminho.size(); idx++) {
					if (mapa[i][j] == caminho[idx]){
						 break;
					}
				}
				//fprintf(stderr, "[%d][%d] pos(%c) idx(%d)\n", i, j, mapa[i][j], idx);
				for (int dir = 0; dir < 4; dir++) {

					grafo[i][j][dir] = -1;
					int idxDirecao = (idx + dir) % 4;
					
					int x = i + dirX[idxDirecao], y = j + dirY[idxDirecao];
					//fprintf(stderr, "simulando laser %c a partir de (%d, %d)\n", caminho[idxDirecao], x, y);
					while (0 <= x && x < M && 0 <= y && y < N) {
						if (strchr("#^>v<", mapa[x][y]) != NULL) {
							break;
						}

						grafo[x][y][dir] = -1;
						x += dirX[idxDirecao];
						y += dirY[idxDirecao];
					}
				}
			}
		}
	}
	
	grafo[inicialX][inicialY][0] = 0;
	queue<pair<int, pair<int, int> > > bfs;

	bfs.push(make_pair(0, make_pair(inicialX, inicialY)));

	while (!bfs.empty()) {
		pair<int, pair<int, int> > pos = bfs.front();
		bfs.pop();

		int place = pos.first;
		int x = pos.second.first;
		int y = pos.second.second;
		//fprintf(stderr, "caso [%d][%d][%d] = %d\n", x, y, place, grafo[x][y][place]);

		marked[x][y][place] = true;

		for (int k = 0; k < 4; k++) {
			int novoX  = x + dirX[k];
			int novoY = y + dirY[k];
			int novoPlace = (place + 1) % 4;
			//fprintf(stderr, "testando posicao [%d][%d][%d] = %d\n", novoX, novoY, novoPlace, grafo[novoX][novoY][novoPlace]);

			int val = 1 + grafo[x][y][place];
			if (0 <= novoX && novoX < M &&
				0 <= novoY && novoY < N &&
				grafo[novoX][novoY][novoPlace] != -1 &&
				!marked[novoX][novoY][novoPlace] &&
				grafo[novoX][novoY][novoPlace] > val) {

				pair<int, pair<int, int> > novoPos = make_pair(novoPlace, make_pair(novoX, novoY));
				grafo[novoX][novoY][novoPlace] = val;
				//fprintf(stderr, "entrou [%d][%d][%d] = %d\n", novoX, novoY, novoPlace, grafo[novoX][novoY][novoPlace]);
				bfs.push(novoPos);
			}
		}
	}
	int answ = 0x3f3f3f3f;
	for (int i = 0; i < 4; i++) {
		if (grafo[finalX][finalY][i] > -1 && grafo[finalX][finalY][i] < answ) {
			answ = grafo[finalX][finalY][i];
		}
	}

	if (answ < 0x3f3f3f3f) {
		printf("Case #%d: %d\n", caso, answ);
	} else {
		printf("Case #%d: impossible\n", caso);
	}
}

int main() {
	int T;
	scanf("%d", &T);
	for (int t = 1; t <= T; t++) {
		read();
		process(t);
	}
	return 0;
}
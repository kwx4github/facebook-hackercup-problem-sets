#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.1415926535897
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

int dx[] = { 1, 0, -1, 0 };
int dy[] = { 0, -1, 0, 1 };

char s[110][110];
int bad[110][110][4];
int d[110][110][4];
int p[101 * 101 * 4][3];
int n, m;

void block(int x, int y, int k, int c)
{
	while (1)
	{
		x += dx[k];
		y += dy[k];
		if ((x < 0) || (x >= n) || (y < 0) || (y >= m) || ((s[x][y] != '.') && (s[x][y] != 'S') && (s[x][y] != 'G')))
			break;
		bad[x][y][c] = 1;
	}
}

int main()
{
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	double beg = clock();
#else
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	string s1 = "v<^>";
	int t;
	scanf("%d", &t);
	FOR(it, 1, t+1)
	{
		printf("Case #%d: ", it);
		cin >> n >> m;
		FOR(i, 0, n)
			scanf("%s", s[i]);
		MEMS(bad, 0);
		int xs=0, ys=0, xt=0, yt=0;
		FOR(i, 0, n)
		{
			FOR(j, 0, m)
			{
				if (s[i][j] == '.')
					continue;
				if (s[i][j] == '#')
				{
					bad[i][j][0] = bad[i][j][1] = bad[i][j][2] = bad[i][j][3] = 1;
					continue;
				}
				if (s[i][j] == 'S')
				{
					xs = i;
					ys = j;
					continue;
				}
				if (s[i][j] == 'G')
				{
					xt = i;
					yt = j;
					continue;
				}
				bad[i][j][0] = bad[i][j][1] = bad[i][j][2] = bad[i][j][3] = 1;
				int idx = 0;
				FOR(k,0,4)
				if (s1[k] == s[i][j])
					idx = k;
				FOR(k, 0, 4)
					block(i, j, (idx + k) % 4, k);
			}
		}
		FOR(i, 0, n)
			FOR(j, 0, m)
			FOR(k, 0, 4)
			d[i][j][k] = 1000000000;
		d[xs][ys][0] = 0;
		p[0][0] = xs;
		p[0][1] = ys;
		p[0][2] = 0;
		int l = 0, r = 0;
		int res = -1;
		while (l <= r)
		{
			int x = p[l][0];
			int y = p[l][1];
			int dir = p[l][2];
			if ((x == xt) && (y == yt))
			{
				res = d[x][y][dir];
				break;
			}
			l++;
			FOR(k, 0, 4)
			{
				int nx = x + dx[k];
				int ny = y + dy[k];
				int ndir = (dir + 1) % 4;
				if ((nx < 0) || (nx >= n) || (ny < 0) || (ny >= m))
					continue;
				if ((bad[nx][ny][ndir]) || (d[nx][ny][ndir] < 1000000000))
				{
					continue;
				}
				r++;
				p[r][0] = nx;
				p[r][1] = ny;
				p[r][2] = ndir;
				d[nx][ny][ndir] = d[x][y][dir] + 1;
			}
		}
		if (res == -1)
			printf("impossible\n");
		else
			printf("%d\n", res);
	}

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n", (end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}
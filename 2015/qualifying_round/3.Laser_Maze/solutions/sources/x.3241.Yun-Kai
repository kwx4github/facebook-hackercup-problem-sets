// Template.cpp by kevinptt 20140714
// #include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cmath>

#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <list>
#include <map>
#include <set>

#include <iostream>
using namespace std;

#ifdef _WIN32 // for fucking Windows
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

#define REP(I, N) for(int I=0; I<(N); ++I)
#define REP1(I, N) for(int I=1; I<=(N); ++I)
#define REPP(I, A, B) for(int I=(A); I<(B); ++I)
#define REPR(I, N) for(int I=N-1; I>=0; --I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int X; scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define MP make_pair
#define PB push_back
#define MSET(x, y) memset(x, y, sizeof(x))
#define x first
#define y second
typedef long long ll;
typedef pair<int,int> pii;

/***************************************************************/

char mapp[4][105][105];
int dis[4][105][105];
char dir[] = "^>v<";
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
void redraw(char mp[105][105], int n, int m) {
	REP1(i, n) REP1(j, m) REP(k, 4)
		if( mp[i][j] == dir[k] ) {
			mp[i][j] = '#';
			for(int i2=i+dx[k], j2=j+dy[k]; mp[i2][j2]=='.'; i2+=dx[k], j2+=dy[k])
				mp[i2][j2] = '#';
			break;
		}
}
void print(char mp[105][105], int n, int m) {
	REP1(i, n) {
		REP1(j, m)
			putchar(mp[i][j]);
		putchar('\n');
	}
}

struct sta { int t, x, y; };

int bfs(int n, int m, pii st, pii gl) {
	MSET(dis, 0x3f);
	queue<sta> qq;
	sta now;
	qq.push(sta{0, st.x, st.y});
	dis[0][st.x][st.y] = 0;
	while( !qq.empty() ) {
		now = qq.front(); qq.pop();
		for(int i=0; i<4; ++i)
			if( mapp[(now.t+1)%4][now.x+dx[i]][now.y+dy[i]]=='.' && dis[(now.t+1)%4][now.x+dx[i]][now.y+dy[i]]==0x3f3f3f3f ) {
				dis[(now.t+1)%4][now.x+dx[i]][now.y+dy[i]] = dis[now.t][now.x][now.y]+1;
				qq.push(sta{(now.t+1)%4, now.x+dx[i], now.y+dy[i]});
				if( now.x+dx[i]==gl.x && now.y+dy[i]==gl.y ) return dis[(now.t+1)%4][now.x+dx[i]][now.y+dy[i]];
			}
	}
	return -1;
}

int main() {
#ifdef KEVINPTT
	//freopen("a.in", "r", stdin);
	//freopen("a.ans", "w", stdout);
#endif
	DRI(T);
	REP1(casen, T) {
		DRII(n, m);
		MSET(mapp[0], '#');
		pii st, gl;
		REP1(i, n) {
			scanf("%s", mapp[0][i]+1);
			mapp[0][i][m+1] = '#';
			REP1(j, m)
				if( mapp[0][i][j] == 'S' ) st = MP(i, j), mapp[0][i][j] = '.';
				else if( mapp[0][i][j] == 'G' ) gl = MP(i, j), mapp[0][i][j] = '.';
		}
		REP1(t, 3) {
			memcpy(mapp[t], mapp[0], sizeof(mapp[t]));
			REP1(i, n) REP1(j, m) REP(k, 4)
				if( mapp[t][i][j] == dir[k] ) {
					mapp[t][i][j] = dir[(k+t)%4];
					break;
				}
			redraw(mapp[t], n, m);
		}
		redraw(mapp[0], n, m);
		int ans = bfs(n, m, st, gl);
		if( ans==-1 ) printf("Case #%d: impossible\n", casen);
		else printf("Case #%d: %d\n", casen, ans);
	}
	
	return 0;
}


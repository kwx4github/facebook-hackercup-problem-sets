#include <iostream>
#include <cstring>
#include <cassert>

using namespace std;

char b[110][110];
char nv[110][110][5];
int dp[110][110][5];

int Q[110*110*5*3];
int rd, wr;

int g[4]={0,1,0,-1};
int h[4]={1,0,-1,0};

void do_case(int cn) {
	memset(nv,0,sizeof(nv));
	int R,C;
	cin >> R >> C;
	for(int i=0;i<R;i++) cin>>b[i];
	int si=-1, sj=-1, ei=-1, ej=-1;
	for(int i=0;i<R;i++) for(int j=0;j<C;j++) {
		if(b[i][j] == 'S') {
			si = i;
			sj = j;
			b[i][j] = '.';
		}
		if(b[i][j] == 'G') {
			ei = i;
			ej = j;
			b[i][j] = '.';
		}
	}
	assert(si!=-1&&sj!=-1&&ei!=-1&&ej!=-1);
	for(int i=0;i<R;i++) for(int j=0;j<C;j++) {
#define SHOOT_START		int PH = 1
#define SHOOT_LEFT		for(int nj=j-1;nj>=0&&b[i][nj]=='.';nj--) nv[i][nj][PH] = 1; ++PH
#define SHOOT_UP		for(int ni=i-1;ni>=0&&b[ni][j]=='.';ni--) nv[ni][j][PH] = 1; ++PH
#define SHOOT_RIGHT		for(int nj=j+1;nj<C&&b[i][nj]=='.';nj++) nv[i][nj][PH] = 1; ++PH
#define SHOOT_DOWN		for(int ni=i+1;ni<R&&b[ni][j]=='.';ni++) nv[ni][j][PH] = 1; ++PH
		if(b[i][j] == '<') {
			SHOOT_START;
			SHOOT_UP;
			SHOOT_RIGHT;
			SHOOT_DOWN;
			SHOOT_LEFT;
		}
		if(b[i][j] == '^') {
			SHOOT_START;
			SHOOT_RIGHT;
			SHOOT_DOWN;
			SHOOT_LEFT;
			SHOOT_UP;
		}
		if(b[i][j] == '>') {
			SHOOT_START;
			SHOOT_DOWN;
			SHOOT_LEFT;
			SHOOT_UP;
			SHOOT_RIGHT;
		}
		if(b[i][j] == 'v') {
			SHOOT_START;
			SHOOT_LEFT;
			SHOOT_UP;
			SHOOT_RIGHT;
			SHOOT_DOWN;
		}
	}
	memset(dp,-1,sizeof(dp));
	int res = -1;
	rd = 0; wr = 0;
	dp[si][sj][0] = 0;
	Q[wr++] = si;
	Q[wr++] = sj;
	Q[wr++] = 0;
	while(rd < wr) {
		int ti = Q[rd++];
		int tj = Q[rd++];
		int tp = Q[rd++];
		if(ti == ei && tj == ej) {
			res = dp[ei][ej][tp];
			goto is_possible;
		}
		int np = tp+1; if(np>4) np=1;
		for(int k=0;k<4;k++) {
			int ni = ti+g[k];
			int nj = tj+h[k];
			if(ni<0||ni>=R||nj<0||nj>=C) continue;
			if(b[ni][nj] != '.') continue;
			if(nv[ni][nj][np]) continue;
			if(dp[ni][nj][np] != -1) continue;
			dp[ni][nj][np] = dp[ti][tj][tp]+1;
			Q[wr++] = ni;
			Q[wr++] = nj;
			Q[wr++] = np;
		}
	}
	cout << "Case #" << cn << ": impossible" << endl;
	return;
is_possible:
	assert(res != -1);
	cout << "Case #" << cn << ": " << res << endl;
	return;
}

int main() {
	int T, cn = 1;
	cin >> T;
	while(T--) do_case(cn++);
	return 0;
}

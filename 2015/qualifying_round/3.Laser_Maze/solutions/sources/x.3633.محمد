#include <bits/stdc++.h>
using namespace std;
struct pnt {
	int x, y, d;
};
pnt start, end;
int dx[2] = { -1, 1 }, dy[2] = { -1, 1 }, n, m, memo[101][101][4];
bool nsafe[101][101][4], vis[101][101][4];
string s[101];

int BFS() {
	queue<pair<pnt, int> > q;
	q.push(make_pair(start, 0));
	while (!q.empty()) {
		pnt tmp = q.front().first;
		vis[tmp.x][tmp.y][tmp.d] = 1;
		int steps = q.front().second;
		if (tmp.x == end.x && tmp.y == end.y && !nsafe[tmp.x][tmp.y][tmp.d])
			return steps;
		tmp.d = (tmp.d + 1) % 4;
		if (tmp.x > 0 && !nsafe[tmp.x - 1][tmp.y][tmp.d]
				&& !vis[tmp.x - 1][tmp.y][tmp.d]) {
			--tmp.x;
			q.push(make_pair(tmp, steps + 1));
			++tmp.x;
		}
		if (tmp.x < n - 1 && !nsafe[tmp.x + 1][tmp.y][tmp.d]
				&& !vis[tmp.x + 1][tmp.y][tmp.d]) {
			++tmp.x;
			q.push(make_pair(tmp, steps + 1));
			--tmp.x;
		}
		if (tmp.y > 0 && !nsafe[tmp.x][tmp.y - 1][tmp.d]
				&& !vis[tmp.x][tmp.y - 1][tmp.d]) {
			--tmp.y;
			q.push(make_pair(tmp, steps + 1));
			++tmp.y;
		}
		if (tmp.y < m - 1 && !nsafe[tmp.x][tmp.y + 1][tmp.d]
				&& !vis[tmp.x][tmp.y + 1][tmp.d]) {
			++tmp.y;
			q.push(make_pair(tmp, steps + 1));
			--tmp.y;
		}
		q.pop();
	}
	return 1e6;
}
int main() {
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int t;
	cin >> t;
	for (int c = 1; c <= t; ++c) {
		cout << "Case #" << c << ": ";
		cin >> n >> m;
		for (int i = 0; i < n; ++i) {
			cin >> s[i];
			for (int j = 0; j < m; ++j) {
				if (s[i][j] == '<')
					s[i][j] = '0';
				if (s[i][j] == '>')
					s[i][j] = '2';
				if (s[i][j] == '^')
					s[i][j] = '1';
				if (s[i][j] == 'v')
					s[i][j] = '3';
				if (s[i][j] == 'S')
					start.x = i, start.y = j;
				else if (s[i][j] == 'G')
					end.x = i, end.y = j;
				else if (s[i][j] != '.')
					for (int d = 0; d < 4; ++d)
						nsafe[i][j][d] = 1;
			}
		}
		memset(memo, -1, sizeof memo);
		memset(nsafe, 0, sizeof nsafe);
		memset(vis, 0, sizeof vis);
		for (int i = 0; i < n; ++i)
			for (int j = 0; j < m; ++j) {
				if (isdigit(s[i][j]))
					for (int d = 0; d < 4; ++d) {
						int tmpd = (s[i][j] - '0' + d) % 4;
						if (tmpd & 1)
							for (int ind = i + dy[tmpd / 2];
									ind >= 0 && ind < n; ind += dy[tmpd / 2])
								nsafe[ind][j][d] = 1;
						else
							for (int ind = j + dx[tmpd / 2];
									ind >= 0 && ind < m; ind += dx[tmpd / 2])
								nsafe[i][ind][d] = 1;
					}
			}
		int ans = BFS();
		if (ans > 1e5)
			cout << "impossible";
		else
			cout << ans;
		cout << endl;
	}
}

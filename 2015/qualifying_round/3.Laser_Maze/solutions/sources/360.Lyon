#include <bits/stdc++.h>
using namespace std;

const int DX[] = { 0, 1, 0, -1 };
const int DY[] = { 1, 0, -1, 0 };
const char *DCH = ">v<^";
const int N = 123;

int n, m;
vector<string> mat;
bool block[4][N][N];

inline bool InMat(const int a, const int b) { return 0 <= a && a < n && 0 <= b && b < m; }

inline int GetDirection(const char c) {
	for (int i = 0; i < 4; ++i) {
		if (c == DCH[i]) {
			return i;
		}
	}

	return -1;
}

void Prepare() {
	memset(block, 0, sizeof block);
	for (int d = 0; d < 4; ++d) {
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				int t;

				if (mat[i][j] == '#') {
					block[d][i][j] = 1;
				} else if ((t = GetDirection(mat[i][j])) >= 0) {
					int x = i, y = j;

					t = t + d & 3;
					while (InMat(x, y) && mat[x][y] != '#' && (GetDirection(mat[x][y]) < 0 || i == x && j == y)) {
						block[d][x][y] = 1;
						x += DX[t];
						y += DY[t];
					}
				}
			}
		}
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				cerr << block[d][i][j];
			}
			cerr << endl;
		}
	}
}

int dist[4][N][N];

int FindStart(int &x, int &y) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (mat[i][j] == 'S') {
				x = i;
				y = j;

				return 1;
			}
		}
	}

	return 0;
}

void Gao() {
	memset(dist, 0x11, sizeof dist);
	int d, x, y;
	int nd, nx, ny;
	queue<int> qd, qx, qy;

	FindStart(x, y);
	//if (block[0][x][y]) { cout << "impossible" << endl; return ; }
	dist[0][x][y] = 0;
	qd.push(0);
	qx.push(x);
	qy.push(y);
	while (!qd.empty()) {
		d = qd.front(); qd.pop();
		x = qx.front(); qx.pop();
		y = qy.front(); qy.pop();

		nd = d + 1 & 3;
		for (int i = 0; i < 4; ++i) {
			nx = x + DX[i];
			ny = y + DY[i];
			if (!InMat(nx, ny)) {
				continue;
			}
			if (block[nd][nx][ny]) {
				continue;
			}
			if (mat[nx][ny] == 'G') {
				cout << (dist[d][x][y] + 1) << endl;

				return ;
			}
			if (dist[nd][nx][ny] > dist[d][x][y] + 1) {
				dist[nd][nx][ny] = dist[d][x][y] + 1;
				qd.push(nd);
				qx.push(nx);
				qy.push(ny);
			}
		}
	}

	cout << "impossible" << endl;
}

int main() {
	ios::sync_with_stdio(0);
	int T;

	cin >> T;
	for (int cas = 1; cas <= T; ++cas) {
		cin >> n >> m;
		mat.resize(n);
		for (int i = 0; i < n; ++i) {
			cin >> mat[i];
		}
		cout << "Case #" << cas << ": ";
		Prepare();
		Gao();
	}

	return 0;
}

#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
#include<set>
#include<assert.h>
using namespace std;
#define FOR(i,a,n) for(int i = (a); i <= (n); ++i)
#define FORD(i,a,n) for(int i = (a); i >= (n); --i)
#define REP(i,n) FOR(i,0,(n)-1)
#define RI(i,n) FOR(i,1,(n))
#define pb push_back
#define st first
#define nd second
#define mini(a,b) a=min(a,(b))
#define maxi(a,b) a=max(a,(b))
bool debug;
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const int nax = 1e3 + 5;

int H, W;
char sl[nax];
const int MUR = -2, NIC = -1, PRAWO = 0, DOL = 1, LEWO = 2, GORA = 3;
int t[nax][nax];
bool ok[4][nax][nax];
bool memo[nax][nax];
int dx[4], dy[4];
bool vis[nax][nax][4];

void test() {
	dx[PRAWO] = 1;
	dx[LEWO] = -1;
	dy[GORA] = -1;
	dy[DOL] = 1;
	pii start, koniec;
	scanf("%d%d", &H, &W);
	REP(y, H) {
		scanf("%s", sl);
		REP(x, W) {
			char z = sl[x];
			if(z == '#') t[x+1][y+1] = MUR;
			else if(z == '.') t[x+1][y+1] = NIC;
			else if(z == '>') t[x+1][y+1] = PRAWO;
			else if(z == 'v') t[x+1][y+1] = DOL;
			else if(z == '<') t[x+1][y+1] = LEWO;
			else if(z == '^') t[x+1][y+1] = GORA;
			else if(z == 'S') {
				t[x+1][y+1] = NIC;
				start = {x+1, y+1};
			}
			else if(z == 'G') {
				t[x+1][y+1] = NIC;
				koniec = {x+1, y+1};
			}
			else {
				printf("%c\n", z);
				assert(false);
			}
		}
	}
	if(debug) printf("start = %d %d\n", start.st, start.nd);
	vector<pii > kol2;
	vector<pii > kol = {start};
	REP(moves, 4) {
		REP(x, W + 3) REP(y, H + 3) ok[moves][x][y] = false;
		RI(x, W) RI(y, H) ok[moves][x][y] = (t[x][y] == NIC);
		REP(x, W + 3) REP(y, H + 3) memo[x][y] = ok[moves][x][y];
		RI(x, W) RI(y, H) if(t[x][y] >= 0) {
			int rodz = (t[x][y] + moves) % 4;
			pii cord = {x,y};
			do {
				if(debug) printf(">> %d %d\n", x, y);
				ok[moves][x][y] = false;
				x += dx[rodz];
				y += dy[rodz];
				if(debug) printf(">> %d %d\n", x, y);
			} while(memo[x][y]);
			x = cord.st;
			y = cord.nd;
		}
	}
	if(debug) RI(x, W) RI(y, H) if(ok[3][x][y]) printf("ciach  %d %d\n", x, y);
	if(debug) puts("---");
	RI(x,W)RI(y,H)REP(moves,4) vis[x][y][moves] = false;
	vis[start.st][start.nd][0] = true;
	int moves = 1;
	while(!kol.empty()) {
		for(auto p : kol) {
			if(debug) printf("%d %d\n", p.st, p.nd);
			REP(dir, 4) {
				int x = p.st + dx[dir];
				int y = p.nd + dy[dir];
				if(ok[moves % 4][x][y] && !vis[x][y][moves % 4]) {
					vis[x][y][moves % 4] = true;
					kol2.pb({x,y});
					if(x == koniec.st && y == koniec.nd) {
						printf("%d\n", moves);
						return;
					}
				}
			}
		}
		kol = kol2;
		kol2.clear();
		++moves;
	}
	if(debug)
		assert(false);
	puts("impossible");
}

int main(int argc, char * argv[]) {
	debug = argc > 1;
	int z;
	scanf("%d", &z);
	RI(i, z) {
		printf("Case #%d: ", i);
		test();
	}
	return 0;
}

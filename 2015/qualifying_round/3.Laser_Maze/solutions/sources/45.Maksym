#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <complex>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <complex>
#include <stdio.h>
#include <cstdlib>
#include <unordered_set>
#include <memory.h>
#include <ctime>
#include <stack>
#include <unordered_map>
#ifdef SAMMAX
#include <ctime>
clock_t beg;
#endif


const double pi = 3.1415926535897932384626433832795;
double EPS = 10e-9;
const int INF = 2000000000;

#pragma comment(linker, "/stack:1500000000")
#define sz size()
#define mp make_pair
#define pb push_back
#define ALL(a) (a).begin(), (a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define MEMS(a,b) memset(a,b,sizeof(a))
#define sqr(a) ((a)*(a))
#define HAS(a,b) ((a).find(b)!=(a).end())
#define MAX(a,b) ((a>=b)?a:b)
#define MIN(a,b) ((a<=b)?a:b)
#define ABS(a) ((a<0)?-(a):a)
#define FOR(i,a,b) for (int i=(a);i<(b);++i)
#define FORD(i,a,b) for (int i=(a);i>(b);--i)
#define VVI vector < vector <int> >
#define VI vector <int>
#define LL long long    
#define U unsigned
#define pnt pair <int,int>
LL gcd(LL a, LL b){ if (a == 0) return b; return gcd(b%a, a); }
LL lcm(LL a, LL b){ return a / gcd(a, b) * b; }

using namespace std;

void ifd() {
#ifdef SAMMAX
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	beg = clock();
#else
	//freopen("kimbits.in", "r", stdin);
	//freopen("kimbits.out", "w", stdout);
#endif  
}
void tme() {
#ifdef SAMMAX
	fprintf(stderr, "*** Total time: %.3lf ***\n", 1.0*(clock() - beg) / CLOCKS_PER_SEC);
#endif
}

int t;
int n, m;

struct state {
	int posi, posj, cnt;
	state(int pi = 0, int pj = 0, int c = 0) : posi(pi), posj(pj), cnt(c) {}
	bool is_valid() {
		return posi >= 0 && posj >= 0 && posi < n && posj < m;
	}
};

int si, sj, gi, gj;
int maze[111][111], maze_all[111][111][4];
int was[111][111][4];
char c;
state q[50000];
int head, tail, ans;
int di[] = { -1, 0, 1, 0 };
int dj[] = { 0, 1, 0, -1 };

int main() {
	ifd();

	cin >> t;
	FOR(i, 0, t) {
		cin >> n >> m;
		FOR(j, 0, n) {
			FOR(k, 0, m) {
				cin >> c;
				switch (c) {
					case '.': maze[j][k] = 5; break;
					case '#': maze[j][k] = -1; break;
					case 'S': maze[j][k] = 5; si = j; sj = k; break;
					case 'G': maze[j][k] = 5; gi = j; gj = k; break;
					case '^': maze[j][k] = 0; break;
					case '>': maze[j][k] = 1; break;
					case 'v': maze[j][k] = 2; break;
					case '<': maze[j][k] = 3; break;
				}
				FOR(l, 0, 4)
					was[j][k][l] = 0;
			}
		}
		FOR(l, 0, 4) {
			FOR(j, 0, n) {
				FOR(k, 0, m) {
					maze_all[j][k][l] = maze[j][k];
				}
			}
			FOR(j, 0, n) {
				FOR(k, 0, m) {
					if (maze[j][k] < 0 || maze[j][k] > 3)
						continue;
					int ti = j, tj = k, dir = (maze[j][k] + l) % 4;
					maze_all[ti][tj][l] = -1;
					ti += di[dir];
					tj += dj[dir];
					while (ti >= 0 && ti < n && tj >= 0 && tj < m && (maze[ti][tj] != -1 && maze[ti][tj] > 3)) {
						maze_all[ti][tj][l] = -1;
						ti += di[dir];
						tj += dj[dir];
					}
				}
			}
		}
		ans = -1;
		head = tail = 0;
		was[si][sj][0] = 1;
		q[head++] = state(si, sj, 0);
		while (tail < head) {
			state cur = q[tail++], tmp;
			if (cur.posi == gi && cur.posj == gj) {
				ans = cur.cnt;
				break;
			}
			FOR(j, 0, 4) {
				tmp = state(cur.posi + di[j], cur.posj + dj[j], cur.cnt + 1);
				if (tmp.is_valid() && !was[tmp.posi][tmp.posj][tmp.cnt % 4] && maze_all[tmp.posi][tmp.posj][tmp.cnt % 4] == 5) {
					was[tmp.posi][tmp.posj][tmp.cnt % 4] = 1;
					q[head++] = tmp;
				}
			}
		}
		cout << "Case #" << i + 1 << ": ";
		if (ans == -1)
			cout << "impossible\n";
		else
			cout << ans << "\n";
	}

	tme();
	return 0;
}


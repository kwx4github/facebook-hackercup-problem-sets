//solution by Wsl_F
#include <bits/stdc++.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <math.h>
#include <iomanip>
#include <algorithm>
#include <functional>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <bitset>
#include <numeric>
#include <cassert>
//#include <time.h>
//#include <ctime>
#include <memory.h>
#include <stdint.h>
#include <complex>
#include <utility>
#include <climits>
#include <cctype>
#include <x86intrin.h>



using namespace std;
#pragma comment(linker, "/STACK:1024000000,1024000000")


typedef long long LL;
typedef unsigned long long uLL;
typedef double dbl;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<LL> vll;
typedef pair<int,int> pii;
typedef pair<LL,LL> pll;

#define mp(x,y)  make_pair((x),(y))
#define pb(x)  push_back(x)
#define sqr(x) ((x)*(x))

int a[111][111];
int b[111][111][5];
int TIME[111][111][5];

map <char,int> symbol;
set<int> turret;

 int n,m;
 int iStart,jStart,iGoal,jGoal;

void shot(int i, int j, int k, int t)
{
        if (t==0)
        {
            int i1= i-1;
            while (i1>0)
            {
                if (a[i1][j]!=0) break;
                b[i1][j][k]= 1;
                i1--;
            }
        } else
        if (t==1)
        {
            int j1= j+1;
            while (j1<=m)
            {
                if (a[i][j1]!=0) break;
                b[i][j1][k]= 1;
                j1++;
            }
        } else
        if (t==2)
        {
            int i1= i+1;
            while (i1<=n)
            {
                if (a[i1][j]!=0) break;
                b[i1][j][k]= 1;
                i1++;
            }
        } else
        {
            int j1= j-1;
            while (j1>0)
            {
                if (a[i][j1]!=0) break;
                b[i][j1][k]= 1;
                j1--;
            }
        }
}


void processingTurret()
{
 memset(b,-1,sizeof(b));
 for (int i=1; i<=n; i++)
    for (int j= 1; j<=m; j++)
        if (a[i][j]==0)
        for (int k= 0; k<4; k++)
            b[i][j][k]= 0;



 for (int i=1; i<=n; i++)
    for (int j=1; j<=m; j++)
        if (turret.find(a[i][j])!=turret.end())
 {
    int t= a[i][j]-4;
    for (int k=0; k<4; k++)
    {
        t= (a[i][j]+k)%4;
        shot(i,j,k,t);
    }
    a[i][j]= 1;
 }

 for (int i=1; i<=n; i++)
    for (int j=1; j<=m; j++)
 {
     int flag= 1;
     for (int k= 0; k<4; k++)
        flag&= b[i][j][k];
     if (flag) a[i][j]= 1;
 }
}

void read()
{
 cin>>n>>m;
 char c;

 for (int i=1; i<=n; i++)
    for (int j=1; j<=m; j++)
 {
     cin>>c;
     a[i][j]= symbol[c];
     if (c=='S') { iStart= i; jStart= j; }
     else if (c=='G') { iGoal= i; jGoal= j; }
 }
}

void calckTime()
{
    memset(TIME,-1,sizeof(TIME));
    int t= 0,t1;
    {
        int i,j;
        i= iStart; j= jStart;
        TIME[i][j][0]= 0;
        queue <pii> q;
        q.push(mp(i,j));
        while (!q.empty())
        {
            i= q.front().first; j= q.front().second; q.pop();
            for (int k= 0; k<4; k++)
                if (TIME[i][j][k]!=-1)
            {
                t= TIME[i][j][k]+1; t1= t%4;
                if (b[i-1][j][t1]==0 && TIME[i-1][j][t1]==-1) { TIME[i-1][j][t1]= t; q.push(mp(i-1,j)); }
                if (b[i+1][j][t1]==0 && TIME[i+1][j][t1]==-1) { TIME[i+1][j][t1]= t; q.push(mp(i+1,j)); }
                if (b[i][j-1][t1]==0 && TIME[i][j-1][t1]==-1) { TIME[i][j-1][t1]= t; q.push(mp(i,j-1)); }
                if (b[i][j+1][t1]==0 && TIME[i][j+1][t1]==-1) { TIME[i][j+1][t1]= t; q.push(mp(i,j+1)); }
            }
        }
    }
}

void solve()
{
    read();
    processingTurret();

    if (a[iGoal][jGoal]==1) { cout<<"impossible"<<endl; return; }

    calckTime();
    int ans= 1000000000;
    for (int k= 0; k<4; k++)
        if (TIME[iGoal][jGoal][k]>0 && TIME[iGoal][jGoal][k]<ans) ans= TIME[iGoal][jGoal][k];
    if (ans==1000000000) { cout<<"impossible"<<endl; return; }
    cout<<ans<<endl;
}

int main()
{
 ios_base::sync_with_stdio(0);
 cin.tie(0);
 // LL a[110];
 // memset(a,0,sizeof(a));

 freopen("input.txt","r",stdin);
 freopen("output.txt","w",stdout);
 //cout<<fixed;
 //cout<<setprecision(9);

 srand(__rdtsc());

 symbol['.']= 0;
 symbol['#']= 1;
 symbol['S']= 0;
 symbol['G']= 0;
 symbol['^']= 4;
 symbol['>']= 5;
 symbol['v']= 6;
 symbol['<']= 7;

 turret.insert(4);
 turret.insert(5);
 turret.insert(6);
 turret.insert(7);

 int T;
 cin>>T;
 for (int tc= 1; tc<=T; tc++)
 {
     cout<<"Case #"<<tc<<": ";
     solve();
 }
 return 0;
}



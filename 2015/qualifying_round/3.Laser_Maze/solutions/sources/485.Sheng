#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <set>

#define pause cout << " press ansy key to continue...",  cin >> chh
#define file_r(x) freopen(x,  "r",  stdin)
#define file_w(x) freopen(x,  "w",  stdout)
#define lowbit(x) ((x) & (-x))
#define repit(i, c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define rep(i, n) for (int i = 0; i < (n); i++)
#define repe(i, u) for (int i = head[u]; i != -1; i = nxt[i])
#define repd(i, n) for (int i = (n - 1); i >= 0; i--)
#define FOR(i, n, m) for (int i = (n); i <= (m); i++)
#define FORD(i, n, m) for (int i = (n); i >= (m); i--)
#define pb push_back
#define X first
#define Y second
#define mp make_pair
#define lb lower_bound
#define ub upper_bound
#define SZ(c) (c).size()
#define ALL(c) (c).begin(), (c).end()
#define sqr(r) ((r) * (r))
#define dis(x1, y1, x2, y2) (((x1) - (x2)) * ((x1) - (x2)) + ((y1) - (y2)) * ((y1) - (y2)))

#define bug(x) cout << #x" = " << x << endl
#define bug2(x, y) cout << #x" = " << x << " " << #y" = " << y << endl
#define bug3(x, y, z) cout << #x" = " << x << " " << #y" = " << y << " " << #z" = " << z << endl
#define bug4(x, y, z, w) cout << #x" = " << x << " " << #y" = " << y << " " << #z" = " << z << " " << #w" = " << w << endl

#define in(n) scanf("%d", &n)
#define in2(n, m) scanf("%d %d", &n, &m)
#define in3(x, y, z) scanf("%d %d %d", &x, &y, &z)

using namespace std;
int chh;

typedef vector<int> vi;
typedef set<int> si;
typedef map<int, int> mii;
typedef pair<int, int> pii;
typedef pair<int, pii> pi3;
typedef vector< pair<int, int> > vpii;
typedef long long LL;

const int N = 105;

int T, n, m, sx, sy, ex, ey;
int d[N][N][4], vis[N][N][4];
int dx[4] = {0, -1, 0, 1};
int dy[4] = {-1, 0, 1, 0};
char g[N][N];
queue< pair<pii, int> > q;
map<char, int> h;
vector<pii> p[N][N];

void init() {
	int ix, jy;
    h.clear();
    h['<'] = 0, h['^'] = 1, h['>'] = 2, h['v'] = 3;
	rep (i, n) rep (j, m) p[i][j].clear();
	rep (i, n) rep (j, m) {
		if (!h.count(g[i][j])) continue;
//		printf("GGG i= %d %d", i, j), pause;
		FORD (jy, j - 1, 0) {
			if (g[i][jy] == '.' || g[i][jy] == 'S' || g[i][jy] == 'G') p[i][jy].pb(mp(i, j));
			else break;
		}
		FORD (ix, i - 1, 0) {
			if (g[ix][j] == '.' || g[ix][j] == 'S' || g[ix][j] == 'G') p[ix][j].pb(mp(i, j));
			else break;
		}
		FOR (jy, j + 1, m - 1) {
			if (g[i][jy] == '.' || g[i][jy] == 'S' || g[i][jy] == 'G') p[i][jy].pb(mp(i, j));
			else break;
		}	
		FOR (ix, i + 1, n - 1) {
			if (g[ix][j] == '.' || g[ix][j] == 'S' || g[ix][j] == 'G') p[ix][j].pb(mp(i, j));
			else break;
		}
	
	}
}

bool judge(int x, int y, int tim) {
    int ix, jy;
    bool flag = 1;
//	puts("FUCK");
    repit (it, p[x][y]) {
		if (flag == 0) break;
		int i = it->X, j = it->Y;
        int di = (tim + h[g[i][j]]) % 4;	
//		printf("i= %d %d %d\n", i, j, di);
		if (di == 0 && x == i && y < j) flag = 0; 
		if (di == 1 && x < i && y == j) flag = 0;
		if (di == 2 && x == i && y > j) flag = 0;
		if (di == 3 && x > i && y == j) flag = 0;
    }
    return flag;
}

void spfa() {
    int u, v, w, x, y, z, tmp;
    memset(d, -1, sizeof(d));
    memset(vis, 0, sizeof(vis));
    d[sx][sy][0] = 0, vis[sx][sy][0] = 1;
    q.push(mp(mp(sx, sy), 0));
    while (!q.empty()) {
        u = q.front().X.X, v = q.front().X.Y, w = q.front().Y;
        q.pop(), vis[u][v][w] = 0;
	//	printf("u= %d %d %d %d", u, v, w, d[u][v][w]), pause;
        rep (i, 4) {
            x = u + dx[i], y = v + dy[i], z = (w + 1) % 4;
            if (x < 0 || x >= n) continue;
            if (y < 0 || y >= m) continue;
			if (g[x][y] == '#' || h.count(g[x][y])) continue;
			if (!judge(x, y, z)) continue;
			tmp = d[u][v][w] + 1;
			if (d[x][y][z] == -1 || tmp < d[x][y][z]) {
				d[x][y][z] = tmp;
				if (!vis[x][y][z]) q.push(mp(mp(x, y), z)), vis[x][y][z] = 1;
			}
        }
    }
}

int main() {
    int cas = 0;
    scanf("%d", &T);
    while (T--) {
        scanf("%d %d", &n, &m);
        rep (i, n) scanf("%s", g[i]);
		init();
        rep (i, n) rep (j, m) {
            if (g[i][j] == 'S') sx = i, sy = j;
            if (g[i][j] == 'G') ex = i, ey = j;
        }
        spfa();
		int ans = -1;
		rep (i, 4) {
			if (d[ex][ey][i] == -1) continue;
			if (ans == -1) ans = d[ex][ey][i];
			else ans = min(ans, d[ex][ey][i]);
		}
		printf("Case #%d: ", ++cas);
		if (ans == -1) puts("impossible");
		else printf("%d\n", ans);
    }
    return 0;
}

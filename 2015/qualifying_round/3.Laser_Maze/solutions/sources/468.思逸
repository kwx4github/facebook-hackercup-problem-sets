#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <ctime>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <cassert>
#include <bitset>
#include <numeric>

using namespace std;

const int MAXN = 111;
const int DIRECT[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

struct node {
	int x, y, v;
	node(int x = 0, int y = 0, int v = 0) : x(x), y(y), v(v) {}
};

int dict[MAXN][MAXN][4];
char maze[MAXN][MAXN];

int laser_type(int x, int y) {
	if (maze[x][y] == '<') {
		return 0;
	}
	if (maze[x][y] == '^') {
		return 1;
	}
	if (maze[x][y] == '>') {
		return 2;
	}
	if (maze[x][y] == 'v') {
		return 3;
	}
	return -1;
}

bool laser(int x, int y, int v, int d, bool &valid) {
	int t = laser_type(x, y);
	if (t == -1) {
		return false;
	}
	int nt = (t + v) % 4;
	valid &= d != nt;
	return true;
}

int main() {
	int task;
	scanf("%d", &task);
	for (int task_id = 1; task_id <= task; ++task_id) {
		int n, m;
		scanf("%d %d", &n, &m);
		for (int i = 0; i < n; ++i) {
			scanf("%s", maze[i]);
		}
		int init_x, init_y;
		int goal_x, goal_y;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (maze[i][j] == 'S') {
					init_x = i;
					init_y = j;
					maze[i][j] = '.';
				}
				if (maze[i][j] == 'G') {
					goal_x = i;
					goal_y = j;
					maze[i][j] = '.';
				}
				for (int k = 0; k < 4; ++k) {
					dict[i][j][k] = -1;
				}
			}
		}
		int sol = -1;
		dict[init_x][init_y][0] = 0;
		queue<node> que;
		que.push(node(init_x, init_y, 0));
		while (!que.empty()) {
			node p = que.front();
			que.pop();
			if (p.x == goal_x && p.y == goal_y) {
				sol = p.v;
				break;
			}
			for (int i = 0; i < 4; ++i) {
				int nx = p.x + DIRECT[i][0];
				int ny = p.y + DIRECT[i][1];
				int nv = p.v + 1;
				if (nx < 0 || nx >= n || ny < 0 || ny >= m) {
					continue;
				}
				bool valid = maze[nx][ny] == '.';
				for (int j = 0; j < 4; ++j) {
					int mx = nx, my = ny;
					while (true) {
						mx += DIRECT[j][0];
						my += DIRECT[j][1];
						if (mx < 0 || mx >= n || my < 0 || my >= m) {
							break;
						}
						if (maze[mx][my] == '#') {
							break;
						}
						if (laser(mx, my, nv, j, valid)) {
							break;
						}
					}
				}
				if (valid && dict[nx][ny][nv % 4] == -1) {
					que.push(node(nx, ny, nv));
					dict[nx][ny][nv % 4] = nv;
				}
			}
		}

		printf("Case #%d: ", task_id);
		if (sol == -1) {
			puts("impossible");
		}
		else {
			printf("%d\n", sol);
		}
	}
	return 0;
}


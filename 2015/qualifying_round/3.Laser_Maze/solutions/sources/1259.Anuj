#include<iostream>
#include<queue>
using namespace std;

int safe(char arr[100][100],int n,int m,int i,int j,int count,int visited[100][100][4])
{
	int x=count%4;
	
	
	
	int a=i;
	int b=j;
	
	if(x==0)
	{
		
		
		while(i>=0)
		{
			if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='>' || arr[i][j]=='^')
			break;
			
			if(arr[i][j]=='v')
			return 0;
			
			i--;
		}
		i=a;
		j=b;
		
		while(i<n)
		{
			if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='>' || arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='^')
			return 0;
			
			i++;
		}
		
		i=a;
		j=b;
		while(j>=0)
		{
			if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='^' || arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='>')
			return 0;
			
			j--;
		}
		i=a;
		j=b;
		while(j<m)
		{
			if(arr[i][j]=='#' || arr[i][j]=='>' || arr[i][j]=='^' || arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='<')
			return 0;
			j++;
		}
		i=a;
		j=b;
	
	}
	else if(x==1)
	{
		
		while(i>=0)
		{
			if(arr[i][j]=='#' || arr[i][j]=='<'  || arr[i][j]=='^' || arr[i][j]=='v' )
			break;
			if(arr[i][j]=='>')
			return 0;
			
			i--;
		}
		i=a;
		j=b;
		
		while(i<n)
		{
			if(arr[i][j]=='#' || arr[i][j]=='>' || arr[i][j]=='^' || arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='<')
			return 0;
			
			i++;
		}
		
		i=a;
		j=b;
		while(j>=0)
		{
			if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='>' ||  arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='^')
			return 0;
			
			j--;
		}
		i=a;
		j=b;
		while(j<m)
		{
			if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='>' || arr[i][j]=='^' )
			break;
			
			if(arr[i][j]=='v')
			return 0;
			j++;
		}
	i=a;
		j=b;

	}
	
	else if(x==2)
	{
		
		while(i>=0)
		{
			
			if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='>' || arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='^')
			return 0;
			
			i--;
		}
		i=a;
		j=b;
		
		while(i<n)
		{
			if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='>' || arr[i][j]=='^'  )
			break;
			
			
			if(arr[i][j]=='v')
			return 0;
			
			i++;
		}
		
		i=a;
		j=b;
		while(j>=0)
		{
			
			if(arr[i][j]=='#' || arr[i][j]=='>' || arr[i][j]=='^' || arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='<')
			return 0;
			
			j--;
		}
		i=a;
		j=b;
		while(j<m)
		{
			if(arr[i][j]=='#'  || arr[i][j]=='<' || arr[i][j]=='^' || arr[i][j]=='v' )
			break;
			
			
			if(arr[i][j]=='>')
			return 0;
			j++;
		}

i=a;
		j=b;

	}
	else if(x==3)
	{
		while(i>=0)
		{
			if(arr[i][j]=='#' ||  arr[i][j]=='>' || arr[i][j]=='^' || arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='<')
			return 0;
			
			i--;
		}
		
		i=a;
		j=b;
		while(i<n)
		{   if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='^' || arr[i][j]=='v' )
			break;
			
			if(arr[i][j]=='>')
			return 0;
			
			i++;
		}
		i=a;
		j=b;
		
		while(j>=0)
		{
			
			if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='>' || arr[i][j]=='^'  )
			break;
			
			if(arr[i][j]=='v')
			return 0;
			
			j--;
		}
		i=a;
		j=b;
		while(j<m)
		{   if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='>' ||  arr[i][j]=='v' )
			break;
			if(arr[i][j]=='^')
			return 0;
			j++;
		}
	}
	return 1;

}

struct p{
	int i;
	int j;
	int count;
};

int bfs(char arr[100][100],int n,int m,int x,int y,int z,int visited[100][100][4])
{
	
	queue<p> q;
	p temp;
	temp.i=x;
	temp.j=y;
	temp.count=z;
	visited[x][y][0]=1;
	q.push(temp);
	int flag=1;
	while(!q.empty())
	{
		p temp1=q.front();
		q.pop();
	
		if(flag || safe(arr,n,m,temp1.i,temp1.j,temp1.count,visited))
		{
		
		flag=0;
		
		if(arr[temp1.i][temp1.j]=='G')
		return temp1.count;
		int x=temp1.i;
		int y=temp1.j;
		int z=temp1.count;
	//	cout<<x<<" "<<y<<" "<<z<<"\n";
		if(y+1<m && (arr[x][y+1]=='.' || arr[x][y+1]=='S' || arr[x][y+1]=='G'))
		{
		p temp;
		temp.i=x;
		temp.j=y+1;
		temp.count=z+1;
		if(!visited[temp.i][temp.j][temp.count%4])
		{
		q.push(temp);
		visited[temp.i][temp.j][temp.count%4]=1;
		}
		}
	
	
		if(y-1>=0 && (arr[x][y-1]=='.' || arr[x][y-1]=='S' || arr[x][y-1]=='G'))
		{
		p temp;
		temp.i=x;
		temp.j=y-1;
		temp.count=z+1;
		if(!visited[temp.i][temp.j][temp.count%4])
		{
		q.push(temp);
		visited[temp.i][temp.j][temp.count%4]=1;
		}
		}
		
	
		if(x+1<n && (arr[x+1][y]=='.' || arr[x+1][y]=='S'|| arr[x+1][y]=='G'))
		{
		p temp;
		temp.i=x+1;
		temp.j=y;
		temp.count=z+1;
		if(!visited[temp.i][temp.j][temp.count%4])
		{
		q.push(temp);
		visited[temp.i][temp.j][temp.count%4]=1;
		}
		}
		
	
	
		if(x-1>=0 && (arr[x-1][y]=='.' || arr[x-1][y]=='S'|| arr[x-1][y]=='G'))
		{
		p temp;
		temp.i=x-1;
		temp.j=y;
		temp.count=z+1;
		if(!visited[temp.i][temp.j][temp.count%4])
		{
		q.push(temp);
		visited[temp.i][temp.j][temp.count%4]=1;
		}
		}
	}
	}	
	return 0;
}

int main()
{	freopen("D:\\input.txt","r",stdin);	
	FILE * fp=fopen("D:\\output.txt","w");
	int t;
	cin>>t;
	int x=1;
	while(x<=t)
	{
		int n,m;
		cin>>n>>m;
		char arr[100][100];
		int visited[100][100][4]={0};
		int a,b;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
			cin>>arr[i][j];
			
			if(arr[i][j]=='S')
			{
			a=i;
			b=j;
			}
			
			}
		}

		int ans=bfs(arr,n,m,a,b,0,visited);
		if(ans)
			fprintf(fp,"Case #%d: %d\n",x,ans);
		else
			fprintf(fp,"Case #%d: impossible\n",x);
	
		x++;
	}
	
	
	
	
	
	
}

#include <cstdio>
#include <algorithm>
#include<iostream>
#include<vector>
#include<climits>
#include <complex>
#include <iostream>
#include <valarray>
#include<cstring>
#include<queue>
#include<bitset>
#include<map>
#include<set>
#include<sstream>
#include<ctime>
#include <stack>
#include <iomanip>
#include <cassert>
#include<cmath>


using namespace std;


#define PB push_back
#define i64 long long
#define FOR(i,a,b) for(i=(a);i<(b);++i)
#define FORE(i,a,b) for(i=(a);i<=(b);++i)
#define REP(i,n) FOR(i,0,n)
#define REPE(i,n) FORE(i,0,n)
#define SZ(v) ((v).size())
#define LD long double
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VLD vector<LD>
#define MSET(x,y) memset((x),(y),sizeof(x))
#define SZOF(x) sizeof((x))
#define VVI vector< VI >
#define PII pair< int,int >
#define VPII vector< PII >
#define MP make_pair
#define PIPII pair<int, PII >
#define PIPIPII pair< int, PIPII >
#define u64 unsigned i64
#define Vi64 vector<i64>
#define Vu64 vector<u64>

#define MAXN 111

char arr[MAXN][MAXN];
bool dp[MAXN][MAXN][4];
int tx[MAXN][MAXN];
int ty[MAXN][MAXN];
int rx[MAXN][MAXN];
int ry[MAXN][MAXN];
int bx[MAXN][MAXN];
int by[MAXN][MAXN];
int lx[MAXN][MAXN];
int ly[MAXN][MAXN];

bool poss=0;
int ans=0;
int n,m;
int stx,sty,enx,eny;
int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};



void topp(int x,int y)
{
    int i=x,j=y;
    ++x;
    while(x<=n && arr[x][y]=='.')
    {
        tx[x][y]=i;
        ty[x][y]=j;
        ++x;
    }
}

void rightt(int x,int y)
{
    int i=x,j=y;
    --y;
    while(y>0 && arr[x][y]=='.')
    {
        rx[x][y]=i;
        ry[x][y]=j;
        --y;
    }
}

void bottomm(int x,int y)
{
    int i=x,j=y;
    --x;
    while(x>0 && arr[x][y]=='.')
    {
        bx[x][y]=i;
        by[x][y]=j;
        --x;
    }
}

void leftt(int x,int y)
{
    int i=x,j=y;
    ++y;
    while(y<=m && arr[x][y]=='.')
    {
        lx[x][y]=i;
        ly[x][y]=j;
        ++y;
    }
}


bool is_valid(int x,int y)
{
    if(x<1 || y<1 || x>n || y>m)
    {
        return 0;
    }

    return 1;
}

bool hitss(int x,int y,int d)
{
    int a,b;


    a=tx[x][y];
    b=ty[x][y];

    if(a && b)
    {
        if((arr[a][b]-'0'+d)%4==2)
        {
            return 1;
        }
    }


    a=rx[x][y];
    b=ry[x][y];

    if(a && b)
    {
        if((arr[a][b]-'0'+d)%4==3)
        {
            return 1;
        }
    }


    a=bx[x][y];
    b=by[x][y];

    if(a && b)
    {
        if((arr[a][b]-'0'+d)%4==0)
        {
            return 1;
        }
    }


    a=lx[x][y];
    b=ly[x][y];

    if(a && b)
    {
        if((arr[a][b]-'0'+d)%4==1)
        {
            return 1;
        }
    }



    return 0;
}


void solve()
{

    MSET(dp,0);

    priority_queue<PIPII > pq;
    pq.push(MP(-1,MP(stx,sty)));
    int x,y,d;
    int nx,ny;
    int fl;
    int i;



    while(!pq.empty())
    {
        d=-pq.top().first;
        x=pq.top().second.first;
        y=pq.top().second.second;
        pq.pop();
        fl=d%4;


        if(x==enx && y==eny)
        {
            poss=1;
            ans=d-1;
            return;
        }

        if(dp[x][y][fl])
        {
            continue;
        }
        dp[x][y][fl]=d;

        for(i=0;i<4;++i)
        {
            nx=x+dx[i];
            ny=y+dy[i];

            if(!is_valid(nx,ny))
            {
                continue;
            }

            if(arr[nx][ny]!='.')
            {
                continue;
            }



            if(hitss(nx,ny,d))
            {
                continue;
            }

            //printf("DD\t%d\t%d\t%d\n",nx,ny,d);

            pq.push(MP(-(d+1),MP(nx,ny)));
        }


    }
}

void MAIN()
{

    int cases;
    scanf("%d",&cases);
    int i;
    int j;

    for(int t=1;t<=cases;++t)
    {
        MSET(tx,0);
        MSET(ty,0);
        MSET(rx,0);
        MSET(ry,0);
        MSET(bx,0);
        MSET(by,0);
        MSET(lx,0);
        MSET(ly,0);

        poss=0;

        scanf("%d %d",&n,&m);

        for(i=1;i<=n;++i)
        {
            scanf("%s",&arr[i][1]);
            for(j=1;j<=m;++j)
            {
                if(arr[i][j]=='^')
                {
                    arr[i][j]='0';
                }
                else if(arr[i][j]=='>')
                {
                    arr[i][j]='1';
                }
                else if(arr[i][j]=='v')
                {
                    arr[i][j]='2';
                }
                else if(arr[i][j]=='<')
                {
                    arr[i][j]='3';
                }
                else if(arr[i][j]=='S')
                {
                    arr[i][j]='.';
                    stx=i;
                    sty=j;
                }
                else if(arr[i][j]=='G')
                {
                    arr[i][j]='.';
                    enx=i;
                    eny=j;
                }
            }
            //printf("\n");
        }

        for(i=1;i<=n;++i)
        {
            for(j=1;j<=m;++j)
            {
                if(arr[i][j]>='0' && arr[i][j]<='3')
                {
                    //printf("CC\t%c",arr[i][j]);
                    topp(i,j);
                    rightt(i,j);
                    bottomm(i,j);
                    leftt(i,j);
                }
            }
        }


        solve();



        printf("Case #%d: ",t);
        if(poss)
        {
            printf("%d\n",ans);
        }
        else
        {
            printf("impossible\n");
        }

    }

}

int main()
{
    //freopen("Laser Maze.in","r",stdin);
    //freopen("Laser Maze.out","w",stdout);

    MAIN();
    return 0;
}





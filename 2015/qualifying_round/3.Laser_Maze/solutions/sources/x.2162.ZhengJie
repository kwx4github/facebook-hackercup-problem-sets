#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<string>
#include<cstdio>
#include<vector>
#include<cassert>
#include<cstring>
#include<cstdlib>
#include<utility>
#include<iostream>
#include<algorithm>
#include<functional>
#define REP(x,y,z) for(int x=y;x<=z;x++)
#define FORD(x,y,z) for(int x=y;x>=z;x--)
#define MSET(x,y) memset(x,y,sizeof(x))
#define FOR(x,y) for(__typeof(y.begin()) x=y.begin();x!=y.end();x++)
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define SZ size()
#define M 105
using namespace std;
typedef long long LL;
typedef pair<int,int> P;
typedef pair<P,int> PP;

int t,n,m,ans,dis[M][M][4];
bool ban[M][M][4];
char mp[M][M];
P st,ed,d[4]={MP(0,-1), MP(-1,0), MP(0,1), MP(1,0)};//<^>v
queue<PP> q;

P operator + (P a,P b)
{
	return MP(a.F+b.F, a.S+b.S);
}
bool ins(int x,int y)
{
	return x>=1 && y>=1 && x<=n && y<=m;
}
void init()
{
	P cur;
	int z,dir;
	REP(i,1,n)REP(j,1,m)
	{
		if(mp[i][j] == 'S')
			st = MP(i,j);
		else if(mp[i][j] == 'G')
			ed = MP(i,j);
		else if(mp[i][j]!='.' && mp[i][j]!='#')
		{
			if(mp[i][j] == '<') dir = 0;
			else if(mp[i][j] == '^') dir = 1;
			else if(mp[i][j] == '>') dir = 2;
			else if(mp[i][j] == 'v') dir = 3;

			REP(k,0,3)
			{
				cur = MP(i,j);
				z = (dir+k)%4;

				while( ins(cur.F, cur.S) )
				{
					ban[cur.F][cur.S][k] = true;
					cur = cur + d[z];
				}
			}
		}
	}
}
void bfs()
{
	int z,zn;
	P cur,nxt;
	dis[st.F][st.S][0] = 0;
	q.push( MP(st, 0) );

	while(!q.empty())
	{
		cur = q.front().F;
		z = q.front().S;
		zn = (z+1)%4;
		q.pop();
		
		REP(i,0,3)
		{
			nxt = cur+d[i];

			if( !ins(nxt.F, nxt.S) ) continue;
			if( mp[nxt.F][nxt.S]=='#' ) continue;
			if( ban[nxt.F][nxt.S][zn] ) continue;
			if( dis[nxt.F][nxt.S][zn]!=-1 ) continue;

			dis[nxt.F][nxt.S][zn] = dis[cur.F][cur.S][z]+1;
			q.push( MP(nxt,zn) );
		}
	}
}
int main()
{
	scanf("%d",&t);
	REP(tt,1,t)
	{
		MSET(dis,-1);
		MSET(ban,false);
		scanf("%d %d",&n,&m);
		REP(i,1,n)scanf("%s",mp[i]+1);

		init();
		bfs();

		ans = M*M*M;
		REP(i,0,3) if( dis[ed.F][ed.S][i]!=-1 ) ans = min(ans, dis[ed.F][ed.S][i]);
		
		printf("Case #%d: ",tt);
		if(ans >= M*M*M) puts("impossible");
		else printf("%d\n",ans);
	}
	return 0;
}


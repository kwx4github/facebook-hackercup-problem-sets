#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 100 + 3;

int n, m;
char f[N][N];
int a[4][N][N];
int d[4][N][N];

inline bool read() {
	if (scanf("%d%d", &n, &m) != 2)
		return false;
	forn(i, n) {
		assert(scanf("%s", f[i]));
	}
    return true;
}

int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
string st = ">v<^";
int sx, sy;
int tx, ty;

inline bool ok(int x, int y) {
	return 0 <= x && x < n && 0 <= y && y < m;
}

inline bool correct(int a[N][N], int x, int y) {
	return ok(x, y) && (a[x][y] == 0);
}

inline void laser_shot(int a[N][N], int x, int y, char c) {
	int d = st.find(c);
	assert(d != -1);
	for(;;) {
		a[x][y] = -1;
		x += dx[d];
		y += dy[d];
		if (!ok(x, y) || f[x][y] != '.')
			break;
	}
}

inline void solve(int test) {
	printf("Case #%d: ", test + 1);
	forn(i, n)
		forn(j, m) {
			if (f[i][j] == 'S') {
				sx = i;
				sy = j;
				f[i][j] = '.';
			}
			if (f[i][j] == 'G') {
				tx = i;
				ty = j;
				f[i][j] = '.';
			}
		}
	forn(it, 4) {
		memset(a[it], 0, sizeof a[it]);
		forn(i, n) {
			forn(j, m) {
				if (f[i][j] == '.')
					continue;
				if (f[i][j] == '#') {
					a[it][i][j] = -1;
					continue;
				}	
				laser_shot(a[it], i, j, f[i][j]);
				f[i][j] = st[ (st.find(f[i][j]) + 1) & 3 ];
			}
		}
	}
	memset(d, 127, sizeof d);
	d[0][sx][sy] = 0;
	queue< pair<int, pt> > q;
	q.push(mp(0, mp(sx, sy) ));
	while (!q.empty()) {
		int step = q.front().ft;
		int x = q.front().sc.ft;
		int y = q.front().sc.sc;
		q.pop();
		forn(it, 4) {
			int nstep = (step + 1) & 3;
			int nx = x + dx[it];
			int ny = y + dy[it];
			if (!correct(a[nstep], nx, ny))
				continue;
			if (d[nstep][nx][ny] > d[step][x][y] + 1) {
				d[nstep][nx][ny] = d[step][x][y] + 1;
				q.push(mp(nstep, mp(nx, ny)));
			}
		}
	}
	int ans = INF;
	forn(i, 4)
		ans = min(ans, d[i][tx][ty]);
	if (ans == INF)
		puts("impossible");
	else
		printf("%d\n", ans);
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
#endif

    cout << setprecision(25) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));
	int n;
	assert(scanf("%d", &n) == 1);
	forn(i, n) {
	    assert(read());
    	solve(i);
    }

#ifdef SU2_PROJ
    cerr << "TIME: " << clock() << endl;
#endif

    return 0;
}
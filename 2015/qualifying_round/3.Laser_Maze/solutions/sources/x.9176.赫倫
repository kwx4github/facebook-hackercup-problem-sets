#include <stdio.h>
#include <string.h>
#include <queue>
#include <algorithm> 
using namespace std;
struct Step
{
	int dis,time,x,y;
	Step(int _x,int _y,int _d,int _t)
	{
		x=_x,y=_y,dis=_d,time=_t;
	}
	bool operator < (const Step &n)const
	{
		return n.dis<dis;
	}
};
int dx[]={0,0,-1,1};
int dy[]={1,-1,0,0};
char mp[200][200];
bool mp2[4][200][200];
bool vis[4][200][200];
int N,M;
bool isin(int x,int y)
{
	return x>=0&&y>=0&&x<N&&y<M;
}
int main()
{
	int T,t=1;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d %d",&N,&M);
		for(int i=0;i<N;i++)
			scanf("%s",mp[i]);
		printf("Case #%d: ",t++);
		memset(vis,false,sizeof(vis));
		memset(mp2,true,sizeof(mp2));
		for(int tt=0;tt<4;tt++)
		{
			for(int i=0;i<N;i++)
			{
				for(int j=0;j<M;j++)
				{
					if(mp[i][j]=='#')
						mp2[tt][i][j]=false;
					if(mp[i][j]=='^')
					{
						mp2[tt][i][j]=false;
						for(int tx=i-1,ty=j;isin(tx,ty)&&(mp[tx][ty]=='.'||mp[tx][ty]=='S'||mp[tx][ty]=='G');tx--)
							mp2[tt][tx][ty]=false;
					}
					else if(mp[i][j]=='>')
					{
						mp2[tt][i][j]=false;
						for(int tx=i,ty=j+1;isin(tx,ty)&&(mp[tx][ty]=='.'||mp[tx][ty]=='S'||mp[tx][ty]=='G');ty++)
							mp2[tt][tx][ty]=false;
					}
					else if(mp[i][j]=='v')
					{
						mp2[tt][i][j]=false;
						for(int tx=i+1,ty=j;isin(tx,ty)&&(mp[tx][ty]=='.'||mp[tx][ty]=='S'||mp[tx][ty]=='G');tx++)
							mp2[tt][tx][ty]=false;;
					}
					else if(mp[i][j]=='<')
					{
						mp2[tt][i][j]=false;
						for(int tx=i,ty=j-1;isin(tx,ty)&&(mp[tx][ty]=='.'||mp[tx][ty]=='S'||mp[tx][ty]=='G');ty--)
							mp2[tt][tx][ty]=false;;
					}
				}
			}
			for(int i=0;i<N;i++)
			{
				for(int j=0;j<M;j++)
				{
					if(mp[i][j]=='^')
						mp[i][j]='>';
					else if(mp[i][j]=='>')
						mp[i][j]='v';
					else if(mp[i][j]=='v')
						mp[i][j]='<';
					else if(mp[i][j]=='<')
						mp[i][j]='^';
				}
			}
		}
		int sx=0,sy=0,gx=0,gy=0;
		for(int i=0;i<N;i++)
		{
			for(int j=0;j<M;j++)
			{
				if(mp[i][j]=='S')
					sx=i,sy=j;
				else if(mp[i][j]=='G')
					gx=i,gy=j;
			}
		}
		if(mp2[1][sx][sy]==false&&mp2[1][gx][gy]==false)
		{
			puts("impossible");
			continue;
		}
//priority_queue<Step>pq;
		queue<Step>pq;
		vis[0][sx][sy]=true;
		pq.push(Step(sx,sy,0,0));
		int ans=-1;
		while(!pq.empty())
		{
			Step tmp=pq.front();pq.pop();
			if(tmp.x==gx&&tmp.y==gy)
			{
				ans=tmp.dis;
				break;
			}
			for(int i=0;i<4;i++)
			{
				int tx=tmp.x+dx[i],ty=tmp.y+dy[i];
				if(isin(tx,ty)&&mp2[(tmp.time+1)%4][tx][ty]&&vis[(tmp.time+1)%4][tx][ty]==false)
				{
					vis[(tmp.time+1)%4][tx][ty]=true;
					pq.push(Step(tx,ty,tmp.dis+1,(tmp.time+1)%4));
				}
			}
		}
		if(ans!=-1)printf("%d\n",ans);
		else puts("impossible");
	}
	return 0;
}

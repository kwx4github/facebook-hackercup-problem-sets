#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

#define x first
#define y second

int t, m, n;
int a[101][101][4];
char s[101];
int start[2], e[2];

int visited[101][101][4];
void add(queue<pair<int, int>> &q, int x, int y){
	if (x>=0&&y>=0&&x<m&&y<n)
		q.push({ x, y });
}
int bfs(){
	memset(visited, 0, sizeof(visited));
	int state = 0, ans=0;
	queue<pair<int, int>> q;
	q.push({ start[0], start[1] });
	while (!q.empty()){
		int sz = q.size();
		while (sz--){
			auto p = q.front();
			q.pop();
			if (!visited[p.x][p.y][state]){
				visited[p.x][p.y][state] = 1;
				if (a[p.x][p.y][state] == 0 || (ans == 0 && a[p.x][p.y][state]==1)){
					if (p.x == e[0] && p.y == e[1]) return ans;
					add(q, p.x + 1, p.y);
					add(q, p.x - 1, p.y);
					add(q, p.x, p.y + 1);
					add(q, p.x, p.y - 1);
				}
			}
		}
		state++;
		state %= 4;
		ans++;
	}
	return -1;
}
void setLaser(int i, int j, int dir){
	a[i][j][0] = a[i][j][1] = a[i][j][2] = a[i][j][3] = 2;
	for (int k = i - 1; k >= 0&&a[k][j][0]!=2; k--) //Upar
		a[k][j][dir] = 1;
	for (int k = i + 1; k < m&&a[k][j][0] != 2; k++)	//Neeche
		a[k][j][(dir + 2) % 4] = 1;
	for (int k = j - 1; k >= 0 && a[i][k][0] != 2; k--)//Left
		a[i][k][(dir + 3) % 4] = 1;
	for (int k = j + 1; k < n&&a[i][k][0] != 2; k++)//Right
		a[i][k][(dir+1)%4] = 1;
}
int main() {
	int cs = 1;
	cin >> t;
	while (t--){
		cin >> m >> n;
		memset(a, 0, sizeof(a));

		for (int i = 0; i < m; i++){
			cin >> s;
			for (int j = 0; j < n; j++){
				if (s[j] == 'S'){
					start[0] = i, start[1] = j;
					a[i][j][0] = a[i][j][1] = a[i][j][2] = a[i][j][3] = 0;
				}
				else if (s[j] == 'G'){
					e[0] = i, e[1] = j;
					a[i][j][0] = a[i][j][1] = a[i][j][2] = a[i][j][3] = 0;
				}
				else if (s[j] == '#')
					a[i][j][0] = a[i][j][1] = a[i][j][2] = a[i][j][3] = 2;
				else if (s[j] == '^')
					setLaser(i, j, 0);
				else if (s[j] == '>')
					setLaser(i, j, 3);
				else if (s[j] == 'v')
					setLaser(i, j, 2);
				else if (s[j] == '<')
					setLaser(i, j, 1);

			}
		}
		printf("Case #%d: ", cs++);
		int ans = bfs();
		if (ans == -1)
			cout << "impossible\n";
		else cout << ans << endl;
	}
	return 0;
}

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

const int MAXN = 110;
const int smjerx[] = {0,0,1,-1};
const int smjery[] = {1,-1,0,0};

int n,m;
char s[MAXN][MAXN];
bool bio[MAXN][MAXN][4];

queue <int> q;
vector <int> p[MAXN][MAXN];

bool laser(int x,int y) {
	return s[x][y] == '^' || s[x][y] == 'v' || s[x][y] == '>' || s[x][y] == '<' || s[x][y] == '#';
}

void tag(int x,int y,int smjer,int k) {
	if (smjer == 0) {
		for (int i = x - 1;i >= 0 && !laser(i,y); i--)
			p[i][y].push_back(k);
	}
	if (smjer == 1) {
		for (int i = y + 1; i < m && !laser(x,i); i++)
			p[x][i].push_back(k);
	}
	if (smjer == 2) {
		for (int i = x + 1; i < n && !laser(i,y); i++)
			p[i][y].push_back(k);
	}
	if (smjer == 3) {
		for (int i = y - 1; i >= 0 && !laser(x,i); i--)
			p[x][i].push_back(k);
	}
}

void solve(int x,int y,int smjer) {
	tag(x,y,smjer,0);
	tag(x,y,(smjer + 1) % 4,1);
	tag(x,y,(smjer + 2) % 4,2);
	tag(x,y,(smjer + 3) % 4,3);
}

bool check(int x,int y,int k) {
	for (int i = 0;i < (int)p[x][y].size(); i++)
		if (p[x][y][i] == k) return 1;
	return 0;
}

int bfs() {
	int x,y,k;
	
	while (!q.empty()) {
		x = q.front();
		q.pop();
		y = q.front();
		q.pop();
		k = q.front();	
		q.pop();
		
		bio[x][y][k % 4] = 1;
		
		if (s[x][y] == 'G') return k;
		
		for (int i = 0;i < 4; i++) {
			int nx = smjerx[i] + x, ny = smjery[i] + y, nk = k + 1;
			if (nx < 0 || ny < 0 || nx >= n || ny >= m || bio[nx][ny][nk % 4] || (s[nx][ny] != '.' && s[nx][ny] != 'G' && s[nx][ny] != 'S') || check(nx,ny,nk % 4)) continue;
			q.push(nx);
			q.push(ny);
			q.push(nk);
			bio[nx][ny][nk % 4] = 1;
		}
	}
	return -1;
}

void solve(int test) {
	printf("Case #%d: ",test);
	memset(bio, 0, sizeof bio);
	scanf("%d %d",&n,&m);
	for (int i = 0;i < n; i++) {
		scanf("%s",s[i]);
	}
	
	for (int i = 0;i < n; i++)
		for (int j = 0;j < m; j++)
			p[i][j].clear();
			
	for (int i = 0;i < n; i++) {
		for (int j = 0;j < m; j++) {
			if (s[i][j] == '^') solve(i,j,0);
			if (s[i][j] == 'v') solve(i,j,2);
			if (s[i][j] == '<') solve(i,j,3);
			if (s[i][j] == '>') solve(i,j,1);
		}
	}
	
	while (!q.empty()) q.pop();
	for (int i = 0;i < n; i++) 
		for (int j = 0;j < m; j++) 
			if (s[i][j] == 'S') {q.push(i); q.push(j); q.push(0);}
	
	
	int sol = bfs();
	/*for (int i = 0; i < n; i++) {
		for (int j = 0;j < m; j++) {
			printf("[%d,%d]: ",i,j); 
			for (int k = 0; k < (int)p[i][j].size(); k++)
				printf("%d ",p[i][j][k]);
			printf("\n");
		}
	}*/
	
			
	if (sol == -1) {printf("impossible\n"); return;}
	
	printf("%d\n",sol);
	
	
}		
	
int main() {
	int t;
	scanf("%d",&t);
	for (int i = 0;i < t; i++)
		solve(i + 1);
	return 0;
}

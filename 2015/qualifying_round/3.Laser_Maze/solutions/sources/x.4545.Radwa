#include <iostream>
#include <fstream>
#include <vector>
#include <string>
using namespace std;


void updatemat(int** adjacencymatrix, int step, int k, int l, int N, int M, vector<vector<char>> the_maze)
{
	int i=k/N, j=k%N;
	char dir='0';
	if(the_maze[k/N][k%N]=='<')
	{
		if(step%4==0)
			dir='u';
		if(step%4==1)
			dir='r';
		if(step%4==2)
			dir='d';
		if(step%4==3)
			dir='l';
	}
	if(the_maze[k/N][k%N]=='^')
	{
		if(step%4==0)
			dir='r';
		if(step%4==1)
			dir='d';
		if(step%4==2)
			dir='l';
		if(step%4==3)
			dir='u';
	}
	if(the_maze[k/N][k%N]=='>')
	{
		if(step%4==0)
			dir='d';
		if(step%4==1)
			dir='l';
		if(step%4==2)
			dir='u';
		if(step%4==3)
			dir='r';
	}
	if(dir=='u')
	{
		for(i=0; i<k/N; i++)
		{
			if(j!=0)
				adjacencymatrix[i*N+(j-1)][i*N+j]=0;
			if(j<N-1)
				adjacencymatrix[i*N+(j+1)][i*N+j]=0;
			if(i!=0)
				adjacencymatrix[(i-1)*N+j][i*N+j]=0;
			if(i<M-1)
				adjacencymatrix[(i+1)*N+j][i*N+j]=0;
			if(j!=0)
				adjacencymatrix[i*N+j][i*N+(j-1)]=0;
			if(j<N-1)
				adjacencymatrix[i*N+j][i*N+(j+1)]=0;
			if(i!=0)
				adjacencymatrix[i*N+j][(i-1)*N+j]=0;
			if(i<M-1)
				adjacencymatrix[i*N+j][(i+1)*N+j]=0;
		}
	}
	if(dir=='l')
	{
		for(j=0; j<k%N; j++)
		{
			if(j!=0)
				adjacencymatrix[i*N+(j-1)][i*N+j]=0;
			if(j<N-1)
				adjacencymatrix[i*N+(j+1)][i*N+j]=0;
			if(i!=0)
				adjacencymatrix[(i-1)*N+j][i*N+j]=0;
			if(i<M-1)
				adjacencymatrix[(i+1)*N+j][i*N+j]=0;
			if(j!=0)
				adjacencymatrix[i*N+j][i*N+(j-1)]=0;
			if(j<N-1)
				adjacencymatrix[i*N+j][i*N+(j+1)]=0;
			if(i!=0)
				adjacencymatrix[i*N+j][(i-1)*N+j]=0;
			if(i<M-1)
				adjacencymatrix[i*N+j][(i+1)*N+j]=0;
		}
	}
	if(dir=='r')
	{
		for(j=(k%N)+1; j<N; j++)
		{
			if(j!=0)
				adjacencymatrix[i*N+(j-1)][i*N+j]=0;
			if(j<N-1)
				adjacencymatrix[i*N+(j+1)][i*N+j]=0;
			if(i!=0)
				adjacencymatrix[(i-1)*N+j][i*N+j]=0;
			if(i<M-1)
				adjacencymatrix[(i+1)*N+j][i*N+j]=0;
			if(j!=0)
				adjacencymatrix[i*N+j][i*N+(j-1)]=0;
			if(j<N-1)
				adjacencymatrix[i*N+j][i*N+(j+1)]=0;
			if(i!=0)
				adjacencymatrix[i*N+j][(i-1)*N+j]=0;
			if(i<M-1)
				adjacencymatrix[i*N+j][(i+1)*N+j]=0;
		}
	}
	if(dir=='d')
	{
		for(i=k/N+1; i<M; i++)
		{
			if(j!=0)
				adjacencymatrix[i*N+(j-1)][i*N+j]=0;
			if(j<N-1)
				adjacencymatrix[i*N+(j+1)][i*N+j]=0;
			if(i!=0)
				adjacencymatrix[(i-1)*N+j][i*N+j]=0;
			if(i<M-1)
				adjacencymatrix[(i+1)*N+j][i*N+j]=0;
			if(j!=0)
				adjacencymatrix[i*N+j][i*N+(j-1)]=0;
			if(j<N-1)
				adjacencymatrix[i*N+j][i*N+(j+1)]=0;
			if(i!=0)
				adjacencymatrix[i*N+j][(i-1)*N+j]=0;
			if(i<M-1)
				adjacencymatrix[i*N+j][(i+1)*N+j]=0;
		}
	}
}


// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[],int V)
{
   // Initialize min value
   int min = INT_MAX, min_index;
 
   for (int v = 0; v < V; v++)
     if (sptSet[v] == false && dist[v] <= min)
         min = dist[v], min_index = v;
 
   return min_index;
}
 
// A utility function to print the constructed distance array
void printSolution(int dist[], int n, int t, int dst)
{
	printf("Vertex   Distance from Source\n");
	for (int i = 0; i < n; i++)
		printf("%d \t\t %d\n", i, dist[i]);
}
 
// Funtion that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int** graph, int src, int dst, int V, int t, int N, int M, vector<vector<char>> the_maze)
{
     int *dist= new int[V];     // The output array.  dist[i] will hold the shortest
                      // distance from src to i
 
     bool *sptSet= new bool[V]; // sptSet[i] will true if vertex i is included in shortest
                     // path tree or shortest distance from src to i is finalized
 
     // Initialize all distances as INFINITE and stpSet[] as false
     for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;
 
     // Distance of source vertex from itself is always 0
     dist[src] = 0;
	 int** thecache= new int*[N*M];
	 for( int f=0; f<N*M; f++)
	 {
		 thecache[f]= new int [N*M];
		 for(int g=0; g<N*M;g++)
			 thecache[f][g]=graph[f][g];
	 }
     // Find shortest path for all vertices
     for (int count = 0; count < V-1; count++)
     {
       // Pick the minimum distance vertex from the set of vertices not
       // yet processed. u is always equal to src in first iteration.
       int u = minDistance(dist, sptSet, V);
       // Mark the picked vertex as processed
       sptSet[u] = true;
		for(int r=0; r<M*N; r++)
			updatemat(graph, count, r, r, N, M, the_maze);
       // Update dist value of the adjacent vertices of the picked vertex.
       for (int v = 0; v < V; v++)
	   {
 
         // Update dist[v] only if is not in sptSet, there is an edge from 
         // u to v, and total weight of path from src to  v through u is 
         // smaller than current value of dist[v]
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
	   }
		for( int f=0; f<N*M; f++)
			for(int g=0; g<N*M;g++)
				graph[f][g]=thecache[f][g];
     }
	 if(dist[dst]!=INT_MAX)
		cout<<"Case #"<<t+1<<": "<<dist[dst]<<endl;
	 else
		cout<<"Case #"<<t+1<<": "<<"impossible"<<endl;

}
 

int main()
{
	ifstream source("test.txt");
	ofstream target("o.txt");
	int T, M, N; 
	source >> T;
	for(int t = 0; t < T; t++) 
	{
		source>>M>>N;
		vector<vector<char>> the_maze;
		char c;
		for(int i=0; i<M; i++)
		{
			the_maze.push_back(vector<char>());
			for( int j=0; j<N; j++)
			{
				source>>c;
				the_maze[i].push_back(c);
			}
		}
		int ** adjacencymatrix= new int* [N*M];
		for( int i=0; i<N*M; i++)
		{
			adjacencymatrix[i]= new int [N*M];
			for( int j=0; j<N*M; j++)
				adjacencymatrix[i][j]=-1;
		}
		int src, dst;
		for(int k=0; k<N*M; k++)
		{
			for(int l=0; l<N*M; l++)
			{
				if(k==l)
					adjacencymatrix[k][l]=0;
				
				if(the_maze[k/N][k%N]=='S')
					src=k;
				if(the_maze[k/N][k%N]=='G')
					dst=k;
				int i=k/N, j=k%N;
				if(the_maze[k/N][k%N]=='#')
				{
					if(j!=0 && adjacencymatrix[i*N+(j-1)][i*N+j]==-1)
						adjacencymatrix[i*N+(j-1)][i*N+j]=0;
					if(j<N-1 && adjacencymatrix[i*N+(j+1)][i*N+j]==-1)
						adjacencymatrix[i*N+(j+1)][i*N+j]=0;
					if(i!=0 && adjacencymatrix[(i-1)*N+j][i*N+j]==-1)
						adjacencymatrix[(i-1)*N+j][i*N+j]=0;
					if(i<M-1 && adjacencymatrix[(i+1)*N+j][i*N+j]==-1)
						adjacencymatrix[(i+1)*N+j][i*N+j]=0;
					if(j!=0 && adjacencymatrix[i*N+j][i*N+(j-1)]==-1)
						adjacencymatrix[i*N+j][i*N+(j-1)]=0;
					if(j<N-1 && adjacencymatrix[i*N+j][i*N+(j+1)]==-1)
						adjacencymatrix[i*N+j][i*N+(j+1)]=0;
					if(i!=0 && adjacencymatrix[i*N+j][(i-1)*N+j]==-1)
						adjacencymatrix[i*N+j][(i-1)*N+j]=0;
					if(i<M-1 && adjacencymatrix[i*N+j][(i+1)*N+j]==-1)
						adjacencymatrix[i*N+j][(i+1)*N+j]=0;
				}
				else
				{
					if(j!=0 && adjacencymatrix[i*N+(j-1)][i*N+j]==-1)
						adjacencymatrix[i*N+(j-1)][i*N+j]=1;
					if(j<N-1 && adjacencymatrix[i*N+(j+1)][i*N+j]==-1)
						adjacencymatrix[i*N+(j+1)][i*N+j]=1;
					if(i!=0 && adjacencymatrix[(i-1)*N+j][i*N+j]==-1)
						adjacencymatrix[(i-1)*N+j][i*N+j]=1;
					if(i<M-1 && adjacencymatrix[(i+1)*N+j][i*N+j]==-1)
						adjacencymatrix[(i+1)*N+j][i*N+j]=1;
					if(j!=0 && adjacencymatrix[i*N+j][i*N+(j-1)]==-1)
						adjacencymatrix[i*N+j][i*N+(j-1)]=1;
					if(j<N-1 && adjacencymatrix[i*N+j][i*N+(j+1)]==-1)
						adjacencymatrix[i*N+j][i*N+(j+1)]=1;
					if(i!=0 && adjacencymatrix[i*N+j][(i-1)*N+j]==-1)
						adjacencymatrix[i*N+j][(i-1)*N+j]=1;
					if(i<M-1 && adjacencymatrix[i*N+j][(i+1)*N+j]==-1)
						adjacencymatrix[i*N+j][(i+1)*N+j]=1;
				}/*
				if((k!=(i-1)*N+j||k!=(i+1)*N+j||k!=i*N+(j-1)||k!=i*N+(j+1))&&(l!=(i-1)*N+j||l!=(i+1)*N+j||l!=i*N+(j-1)||l!=i*N+(j+1)))
					adjacencymatrix[k][l]=0;*/		
			}
			//updatemat(adjacencymatrix, 0, k, k, N, M, the_maze);
		}
		for(int i=0; i<N*M; i++)
			for(int j=0 ; j<N*M; j++)
				if(adjacencymatrix[i][j]==-1)
					adjacencymatrix[i][j]=0;
		dijkstra(adjacencymatrix,src,dst,N*M,t, N, M, the_maze);
	}
}
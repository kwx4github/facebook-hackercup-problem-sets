#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

int px[] = {0, -1, 0, 1};
int py[] = {-1, 0, 1, 0};
char pn[] = {'<', '^', '>', 'v'};

const int nmax = 110;

int n, m;
char a[nmax][nmax];
int d[nmax][nmax][4];
int good[nmax][nmax][4];
queue<pair<pii, int> > q;
int res;

bool checkInside(int x, int y) {
	return !(x < 0 || y < 0 || x >= n || y >= m);
}

bool checkFree(int x, int y) {
	return checkInside(x, y) && (a[x][y] == '.' || a[x][y] == 'S' || a[x][y] == 'G');
}

bool check(int x, int y, int dep) {
	if (!checkFree(x, y)) return 0;
	int w = dep % 4;
	if (good[x][y][w] >= 0) return good[x][y][w];
	good[x][y][w] = 1;
	forn(i, 4) {
		int nx = x;
		int ny = y;
		while (checkFree(nx, ny)) {
			nx -= px[i];
			ny -= py[i];
		}
//		if (x == 1 && y == 2)
//			cerr << dep << " " << i << " " << nx << " " << ny << a[nx][ny] << " " <<  pn[(i + 4 - w) % 4] << endl;
		if (checkInside(nx, ny) && a[nx][ny] == pn[(i + 4 - w) % 4])
			return good[x][y][w] = 0;
	}
	return good[x][y][w] = 1;
}
            
void update(int x, int y, int dep) {
	int w = dep % 4;
	if (d[x][y][w] == -1 || d[x][y][w] > dep) {
		if (a[x][y] == 'G' && (res == -1 || res > dep))
			res = dep;
		d[x][y][w] = dep;
		q.push(mp(mp(x, y), w));
	}
}

void solve() {
	cin >> n >> m;
	memset(d, 255, sizeof d);
	memset(good, 255, sizeof good);
	res = -1;
	forn(i, n)
		forn(j, m) {
			cin >> a[i][j];
			if (a[i][j] == 'S')
				update(i, j, 0);
		}
	while (!q.empty()) {
		pair<pii, int> now = q.front();
		q.pop();
		int nx = now.fs.fs;
		int ny = now.fs.sc;
		int ns = now.sc;
		int dep = d[nx][ny][ns];
		forn(i, 4) {
			int qx = nx + px[i];
			int qy = ny + py[i];
			if (check(qx, qy, dep + 1))
				update(qx, qy, dep + 1);
		}
	}
	if (res >= 0)
		cout << res << endl;
	else
		puts("impossible");
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);
	

	int tst;
	cin >> tst;
	forn(i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
	}


	return 0;
}

import java.util.*;
import java.io.*;

public class LaserMaze {

	public static void main(String[] args) throws IOException {
		
		BufferedReader f = new BufferedReader(new FileReader("laser_maze (1).txt"));
		int T = Integer.parseInt(f.readLine());
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("LaserMazeOut.txt")));
		
		for (int trial = 1; trial <= T; trial++) {
			
			StringTokenizer st = new StringTokenizer(f.readLine());
			
			// dimensions of maze
			int M = Integer.parseInt(st.nextToken());
			int N = Integer.parseInt(st.nextToken());
			
			// creation of maze
			int[][][] maze = new int[M][N][8]; 
			// 0 - is wall/laser or not (1 for wall/laser, 0 for not) 
			// 1 - if isn't wall/laser, is minimum moves needed to get there in 0 or 1 (mod 4) steps
			// 2 - if isn't wall/laser, is minimum moves needed to get there in 2 or 3 (mod 4) steps
			// 3 - if is wall/laser, 0 if wall, 1 if N, 2 if E, 3 if S, 4 if W
			// 4 - if isn't wall/laser, can be hit in 0 (mod 4) moves?
			// 5 - if isn't wall/laser, can be hit in 1 (mod 4) moves?
			// 6 - if isn't wall/laser, can be hit in 2 (mod 4) moves?
			// 7 - if isn't wall/laser, can be hit in 3 (mod 4) moves?
			
			// start + end
			int[] start = new int[2];
			int[] end = new int[2];
			
			// where the lasers are
			ArrayList<Integer[]> lasers = new ArrayList<Integer[]>();
			
			// setting up the maze -- what 0, 1, 2, 3 are -- still need 4, 5, 6, 7
			for (int i = 0; i < M; i++) {
				String line = f.readLine();
				for (int j = 0; j < N; j++) {
					char space = line.charAt(j);
					if (space == '.') {
						maze[i][j][1] = -1;
						maze[i][j][2] = -1;
					}
					else if (space == 'S') {
						start[0] = i;
						start[1] = j;
						maze[i][j][1] = 0;
						maze[i][j][2] = -1;
					}
					else if (space == 'G') {
						end[0] = i;
						end[1] = j;
						maze[i][j][1] = -1;
						maze[i][j][2] = -1;
					}
					else if (space == '#') {
						maze[i][j][0] = 1;
						maze[i][j][3] = 0;
					}
					else if (space == '^') {
						maze[i][j][0] = 1;
						maze[i][j][3] = 1;
						lasers.add(new Integer[] {i,j});
					}
					else if (space == '>') {
						maze[i][j][0] = 1;
						maze[i][j][3] = 2;
						lasers.add(new Integer[] {i,j});
					}
					else if (space == 'v') {
						maze[i][j][0] = 1;
						maze[i][j][3] = 3;
						lasers.add(new Integer[] {i,j});
					}
					else if (space == '<') {
						maze[i][j][0] = 1;
						maze[i][j][3] = 4;
						lasers.add(new Integer[] {i,j});
					}
				}
			}
			
			// setting up 4, 5, 6, 7 -- can be hit or not?
			// case 1 : 0 (mod 4)
			for (Integer[] laser : lasers) {
				int x = laser[0];
				int y = laser[1];
				if (maze[x][y][3]%4 == 1) {
					for (int i = 1; (x - i >= 0); i++) {
						if (maze[x-i][y][0] == 1) {
							break;
						}
						maze[x-i][y][4] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 2) {
					for (int i = 1; (y+i < N); i++) {
						if (maze[x][y+i][0] == 1) {
							break;
						}
						maze[x][y+i][4] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 3) {
					for (int i = 1; (x + i < M); i++) {
						if (maze[x+i][y][0] == 1) {
							break;
						}
						maze[x+i][y][4] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 0) {
					for (int i = 1; (y - i >= 0); i++) {
						if (maze[x][y-i][0] == 1) {
							break;
						}
						maze[x][y-i][4] = 1;
					}
				}
			}
			
			// case 2 : 1 (mod 4)
			for (Integer[] laser : lasers) {
				int x = laser[0];
				int y = laser[1];
				if (maze[x][y][3]%4 == 0) {
					for (int i = 1; (x - i >= 0); i++) {
						if (maze[x-i][y][0] == 1) {
							break;
						}
						maze[x-i][y][5] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 1) {
					for (int i = 1; (y+i < N); i++) {
						if (maze[x][y+i][0] == 1) {
							break;
						}
						maze[x][y+i][5] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 2) {
					for (int i = 1; (x + i < M); i++) {
						if (maze[x+i][y][0] == 1) {
							break;
						}
						maze[x+i][y][5] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 3) {
					for (int i = 1; (y - i >= 0); i++) {
						if (maze[x][y-i][0] == 1) {
							break;
						}
						maze[x][y-i][5] = 1;
					}
				}
			}
			
			// case 3 : 2 (mod 4)
			for (Integer[] laser : lasers) {
				int x = laser[0];
				int y = laser[1];
				if (maze[x][y][3]%4 == 3) {
					for (int i = 1; (x - i >= 0); i++) {
						if (maze[x-i][y][0] == 1) {
							break;
						}
						maze[x-i][y][6] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 0) {
					for (int i = 1; (y+i < N); i++) {
						if (maze[x][y+i][0] == 1) {
							break;
						}
						maze[x][y+i][6] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 1) {
					for (int i = 1; (x + i < M); i++) {
						if (maze[x+i][y][0] == 1) {
							break;
						}
						maze[x+i][y][6] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 2) {
					for (int i = 1; (y - i >= 0); i++) {
						if (maze[x][y-i][0] == 1) {
							break;
						}
						maze[x][y-i][6] = 1;
					}
				}
			}
			
			// case 4 : 3 (mod 4)
			for (Integer[] laser : lasers) {
				int x = laser[0];
				int y = laser[1];
				if (maze[x][y][3]%4 == 2) {
					for (int i = 1; (x - i >= 0); i++) {
						if (maze[x-i][y][0] == 1) {
							break;
						}
						maze[x-i][y][7] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 3) {
					for (int i = 1; (y+i < N); i++) {
						if (maze[x][y+i][0] == 1) {
							break;
						}
						maze[x][y+i][7] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 0) {
					for (int i = 1; (x + i < M); i++) {
						if (maze[x+i][y][0] == 1) {
							break;
						}
						maze[x+i][y][7] = 1;
					}
				}
				else if (maze[x][y][3]%4 == 1) {
					for (int i = 1; (y - i >= 0); i++) {
						if (maze[x][y-i][0] == 1) {
							break;
						}
						maze[x][y-i][7] = 1;
					}
				}
			}
			
			// now maze is set up, YAY
			
			int moves = 0;
			ArrayList<Integer[]> spacesAt = new ArrayList<Integer[]>();
			spacesAt.add(new Integer[] {start[0], start[1]});
			while (spacesAt.size() > 0) {
				moves++;
				ArrayList<Integer[]> newSpacesAt = new ArrayList<Integer[]>();
				int index;
				if (moves%4 == 0 || moves%4 == 1) {
					index = 1;
				}
				else {
					index = 2;
				}
				for (Integer[] current : spacesAt) {
					int x = current[0];
					int y = current[1];
					// north
					if ((x > 0) && (maze[x-1][y][0] == 0)) {
						if ((maze[x-1][y][4+(moves%4)] == 0) && (maze[x-1][y][index] == -1)) {
							maze[x-1][y][index] = moves;
							newSpacesAt.add(new Integer[] {x-1, y});
						}
					}
					// east
					if ((y < N-1) && (maze[x][y+1][0] == 0)) {
						if ((maze[x][y+1][4+(moves%4)] == 0) && (maze[x][y+1][index] == -1)) {
							maze[x][y+1][index] = moves;
							newSpacesAt.add(new Integer[] {x, y+1});
						}
					}
					// south
					if ((x < M-1) && (maze[x+1][y][0] == 0)) {
						if ((maze[x+1][y][4+(moves%4)] == 0) && (maze[x+1][y][index] == -1)) {
							maze[x+1][y][index] = moves;
							newSpacesAt.add(new Integer[] {x+1, y});
						}
					}
					// west
					if ((y > 0) && (maze[x][y-1][0] == 0)) {
						if ((maze[x][y-1][4+(moves%4)] == 0) && (maze[x][y-1][index] == -1)) {
							maze[x][y-1][index] = moves;
							newSpacesAt.add(new Integer[] {x, y-1});
						}
					}
				}
				spacesAt = newSpacesAt;
			}
			
			out.print("Case #" + (trial) + ": ");
			int end1 = maze[end[0]][end[1]][1];
			int end2 = maze[end[0]][end[1]][2];
			if ((end1 == -1) && (end2 == -1)) {
				out.println("impossible");
			}
			else if (end1 == -1) {
				out.println(end2);
			}
			else if (end2 == -1) {
				out.println(end1);
			}
			else {
				if (end1 > end2) {
					out.println(end2);
				}
				else {
					out.println(end1);
				}
			}
			
			
		}
		
		f.close();
		out.close();
		
		
		
	}

}

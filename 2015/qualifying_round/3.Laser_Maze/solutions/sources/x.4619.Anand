
import java.util.*;

public class LaserMaze {
    static boolean ok(int x, int y, int M, int N) {
        if (x >= 0 && x < M && y >=0 && y < N ) return true;
        return false;
    }
    public static void main(String [] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt();
        for (int tt = 1; tt <= T; tt++) {
            int M = scanner.nextInt();
            int N = scanner.nextInt();
            String [] _maze = new String[M];
            for (int i=0;i<M;i++) {
                _maze[i] = scanner.next();
            }
            boolean [][][] blocked = new boolean[M][N][4];
            int [] s = new int[2];
            int [] e = new int[2];
            for (int i=0;i<M;i++) {
                for (int j=0;j<N;j++) {
                    if (_maze[i].charAt(j) == '#') {
                        for (int k=0;k<4;k++) blocked[i][j][k] = true;

                    }
                    if (_maze[i].charAt(j) == 'v') {
                        for (int k=0;k<=j;k++) blocked[i][k][1] = true;
                        for (int k=0;k<=i;k++) blocked[k][j][2] = true;
                        for (int k=j;k<N;k++) blocked[i][k][3] = true;
                        for (int k=i;k<M;k++) blocked[k][j][0] = true;
                    }
                    if (_maze[i].charAt(j) == '<') {
                        for (int k=0;k<=j;k++) blocked[i][k][0] = true;
                        for (int k=0;k<=i;k++) blocked[k][j][1] = true;
                        for (int k=j;k<N;k++) blocked[i][k][2] = true;
                        for (int k=i;k<M;k++) blocked[k][j][3] = true;
                    }
                    if (_maze[i].charAt(j) == '^') {
                        for (int k=0;k<=j;k++) blocked[i][k][3] = true;
                        for (int k=0;k<=i;k++) blocked[k][j][0] = true;
                        for (int k=j;k<N;k++) blocked[i][k][1] = true;
                        for (int k=i;k<M;k++) blocked[k][j][2] = true;
                    }
                    if (_maze[i].charAt(j) == '>') {
                        for (int k=0;k<=j;k++) blocked[i][k][2] = true;
                        for (int k=0;k<=i;k++) blocked[k][j][3] = true;
                        for (int k=j;k<N;k++) blocked[i][k][0] = true;
                        for (int k=i;k<M;k++) blocked[k][j][1] = true;
                    }
                    if (_maze[i].charAt(j) == 'S') {
                        s[0] = i;
                        s[1] = j;
                    }
                    if (_maze[i].charAt(j) == 'G') {
                        e[0] = i;
                        e[1] = j;
                    }
                }
            }
            int [][][] minCost = new int[M][N][4];
            for (int i=0;i<M;i++)
                for (int j=0;j<N;j++)
                    Arrays.fill(minCost[i][j],Integer.MAX_VALUE);
            minCost[s[0]][s[1]][0] = 0;
            Queue<Integer> qx = new LinkedList<Integer>();
            Queue<Integer> qy = new LinkedList<Integer>();
            Queue<Integer> qsteps = new LinkedList<Integer>();
            qx.add(s[0]);
            qy.add(s[1]);
            qsteps.add(0);
            int [] dx = { 1, -1, 0,0};
            int [] dy = { 0,0, 1,-1};
            int count = 0;
            while (!qx.isEmpty()) {
                int x = qx.remove();
                int y = qy.remove();
                int step = qsteps.remove();
                //System.out.println( x +" "+ y + " "+step);
                int cost = minCost[x][y][step];
                step++;
                step %= 4;
                for (int _d = 0; _d <4; _d++) {
                    int _x = x + dx[_d];
                    int _y = y + dy[_d];
                    if (!ok(_x, _y, M,N)) continue;
                    if ( blocked[_x][_y][step] || minCost[_x][_y][step] <= cost) continue;
                    //System.out.println( _x +" "+ _y + " "+step);
                    //System.out.println( "till now = "+ minCost[_x][_y][step] + " update to =" + cost);
                    minCost[_x][_y][step] = cost + 1;
                    qx.add(_x);
                    qy.add(_y);
                    qsteps.add(step);
                }
            }
            int min = Integer.MAX_VALUE;
            for (int k=0;k<4;k++)
                min = Math.min(minCost[e[0]][e[1]][k],min);
            if (min == Integer.MAX_VALUE) System.out.println("Case #"+tt+": impossible");
            else System.out.println("Case #"+tt+": "+min);

        }
        scanner.close();
    }
}
/*


 */
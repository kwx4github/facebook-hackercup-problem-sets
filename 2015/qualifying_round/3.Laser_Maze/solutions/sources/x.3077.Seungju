// P C F 가능한지 확인

#include <stdio.h>

#include <vector>
#include <queue>

using namespace std;

class ele{
public:
	int r, c, n;
};

char str[103][103];
int dr[4] = { 0, 0, 1, -1 };
int dc[4] = { 1, -1, 0, 0 };

int main(){
	freopen("output3.txt", "w", stdout);
	freopen("laser_maze.txt", "r", stdin);

	int t;
	scanf("%d", &t);

	for (int T = 1; T <= t; T++){
		int m, n;
		scanf("%d %d", &m, &n);

		ele psh, pp;
		queue <ele> Q;

		vector <ele> L;

		for (int i = 0; i < m; i++){
			scanf("%s", str[i]);
			for (int j = 0; j < n; j++){
				if (str[i][j] == 'S'){
					psh.r = i, psh.c = j, psh.n = 0;
					Q.push(psh);
				}
				else if (str[i][j] == '^'){
					psh.r = i, psh.c = j, psh.n = 0;
					L.push_back(psh);
				}
				else if (str[i][j] == 'v'){
					psh.r = i, psh.c = j, psh.n = 2;
					L.push_back(psh);
				}
				else if (str[i][j] == '<'){
					psh.r = i, psh.c = j, psh.n = 3;
					L.push_back(psh);
				}
				else if (str[i][j] == '>'){
					psh.r = i, psh.c = j, psh.n = 1;
					L.push_back(psh);
				}
			}
		}

		bool chk[103][103][4] = { 0 };

		bool flag = false;

		while (!Q.empty()){
			pp = Q.front();
			Q.pop();

			if (str[pp.r][pp.c] == 'G'){
				flag = true;
				break;
			}
			else{
				psh = pp;

				psh.n++;

				for (int i = 0; i < 4; i++){
					psh.r = pp.r + dr[i], psh.c = pp.c + dc[i];
					if (psh.r >= 0 && psh.r < m){
						if (psh.c >= 0 && psh.c < n){
							if (!chk[psh.r][psh.c][psh.n%4]){
								char cf = str[psh.r][psh.c];
								if (cf == '#' || cf == '^' || cf == 'v' || cf == '<' || cf == '>')continue;
								for (int j = 0; j < L.size(); j++){
									int d = L[j].n + psh.n;
									d %= 4;

									bool flag = false;

									if (d == 0){ // top
										if (psh.c == L[j].c && psh.r < L[j].r)flag = true;
									}
									else if (d == 2){ // bot
										if (psh.c == L[j].c && psh.r > L[j].r)flag = true;
									}
									else if (d == 3){ // left
										if (psh.r == L[j].r && psh.c < L[j].c)flag = true;
									}
									else{ // right
										if (psh.r == L[j].r && psh.c > L[j].c)flag = true;
									}

									if (!flag){
										Q.push(psh);
										chk[psh.r][psh.c][psh.n%4] = true;
									}
								}
							}
						}
					}
				}
			}
		}

		printf("Case #%d: ", T);

		if(flag)printf("%d\n", pp.n);
		else{
			printf("impossible\n");
		}

	}
}
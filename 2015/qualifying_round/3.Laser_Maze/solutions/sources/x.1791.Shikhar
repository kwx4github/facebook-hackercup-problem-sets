#include<iostream>
#include<queue>
#include<map>
#include<fstream>
using namespace std;
struct info{
int r,c,d;
void init(int a,int b,int di){
r=a,c=b,d=di;}
};
class valueComp
{
public:

  bool operator()(const info& A,
          const info& B)
    const
    { if( A.r<B.r)return true;
    else if(A.r>B.r)return false;
    else if(A.c<B.c)return true;
    else if(A.c>B.c)return false;
    else if(A.d<B.d)return true;
    else if(A.d>B.d)return false;
    return A.r<B.r;}
};

int main(){
int t,n,m;
char c;
cin>>t;
for(int p=1;p<=t;p++){
    cin>>n>>m;
    map< info,bool ,valueComp> prev;
    int arr[101][101];
    map< pair<int,int>,int > dist;

    char c;
        info s,u,v;
        int is,js,ig,jg;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>c;
            if(c=='.'||c=='S'||c=='G')arr[i][j]=4;
            else if(c=='#')arr[i][j]=5;
            else if(c=='^')arr[i][j]=0;
            else if(c=='>')arr[i][j]=1;
            else if(c=='v')arr[i][j]=2;
            else if(c=='<')arr[i][j]=3;
            s.init(i,j,0);
            if(c=='G')ig=i,jg=j;
            if(c=='S'){
                dist[make_pair(i,j)]=0;
                is=i,js=j;
                prev[s]=true;
            }
            else dist[make_pair(i,j)]=-1;

        }
    }
    queue< info > q;

    s.init(is,js,0);
    q.push(s);
    while(!q.empty()){
        u=q.front();
        q.pop();
        int i=u.r,j=u.c,d=u.d+1,flag;
       // cout<<"Checking for "<<i<<" "<<j<<" "<<d<<endl;
        if(arr[i][j]!=4)
            continue;
        if(i>1&&arr[i-1][j]==4){
            v.init(i-1,j,d%4);
            if(prev.count(v)==false){
                flag=0;
                v.init(i-1,j,d);
                for(int k=j+1;k<=m;k++){
                    if(arr[i-1][k]==5)break;
                    else if(arr[i-1][k]!=4&&(arr[i-1][k]+d)%4==3){flag=1;break;}
                    else if(arr[i-1][k]!=4&&(arr[i-1][k]+d)%4!=3){break;}
                }
                for(int k=1;k<j&&flag==0;k++){
                    if(arr[i-1][k]==5)break;
                    else if(arr[i-1][k]!=4&&(arr[i-1][k]+d)%4==1){flag=1;break;}
                    else if(arr[i-1][k]!=4&&(arr[i-1][k]+d)%4!=1){break;}
                }
                for(int k=1;k<(i-1)&&flag==0;k++){
                    if(arr[k][j]==5)break;
                    else if(arr[k][j]!=4&&(arr[k][j]+d)%4==2){flag=1;break;}
                    else if(arr[k][j]!=4&&(arr[k][j]+d)%4!=2){break;}
                }
                for(int k=i;k<=n&&flag==0;k++){
                    if(arr[k][j]==5)break;
                    else if(arr[k][j]!=4&&(arr[k][j]+d)%4==0){flag=1;break;}
                    else if(arr[k][j]!=4&&(arr[k][j]+d)%4!=0){break;}
                }
                if(flag==0){
                    q.push(v);
                    v.init(i-1,j,d%4);
                    if(dist[make_pair(i-1,j)]>d||dist[make_pair(i-1,j)]==-1)dist[make_pair(i-1,j)]=d;
                    prev[v]=true;
                }

            }


        }
        if(i<n&&arr[i+1][j]==4){
            v.init(i+1,j,d%4);
            if(prev.count(v)==false){
                flag=0;
                v.init(i+1,j,d);
                for(int k=j+1;k<=m;k++){
                    if(arr[i+1][k]==5)break;
                    else if(arr[i+1][k]!=4&&(arr[i+1][k]+d)%4==3){flag=1;break;}
                    else if(arr[i+1][k]!=4&&(arr[i+1][k]+d)%4!=3){break;}
                }
                for(int k=1;k<j&&flag==0;k++){
                    if(arr[i+1][k]==5)break;
                    else if(arr[i+1][k]!=4&&(arr[i+1][k]+d)%4==1){flag=1;break;}
                    else if(arr[i+1][k]!=4&&(arr[i+1][k]+d)%4!=1){break;}
                }
                for(int k=1;k<=i&&flag==0;k++){
                    if(arr[k][j]==5)break;
                    else if(arr[k][j]!=4&&(arr[k][j]+d)%4==2){flag=1;break;}
                    else if(arr[k][j]!=4&&(arr[k][j]+d)%4!=2){break;}
                }
                for(int k=i+2;k<=n&&flag==0;k++){
                    if(arr[k][j]==5)break;
                    else if(arr[k][j]!=4&&(arr[k][j]+d)%4==0){flag=1;break;}
                    else if(arr[k][j]!=4&&(arr[k][j]+d)%4==0){break;}
                }
                if(flag==0){
                    q.push(v);
                    v.init(i+1,j,d%4);
                    if(dist[make_pair(i+1,j)]>d||dist[make_pair(i+1,j)]==-1)dist[make_pair(i+1,j)]=d;
                    prev[v]=true;
                }

            }


        }
        if(j>1&&arr[i][j-1]==4){
            v.init(i,j-1,d%4);
            if(prev.count(v)==false){
                flag=0;
                v.init(i,j-1,d);
                for(int k=i+1;k<=n;k++){
                    if(arr[k][j-1]==5)break;
                    else if(arr[k][j-1]!=4&&(arr[k][j-1]+d)%4==0){flag=1;break;}
                    else if(arr[k][j-1]!=4&&(arr[k][j-1]+d)%4!=0){break;}
                }
                for(int k=1;k<i&&flag==0;k++){
                    if(arr[k][j-1]==5)break;
                    else if(arr[k][j-1]!=4&&(arr[k][j-1]+d)%4==2){flag=1;break;}
                    else if(arr[k][j-1]!=4&&(arr[k][j-1]+d)%4!=2){break;}
                }
                for(int k=1;k<(j-1)&&flag==0;k++){
                    if(arr[i][k]==5)break;
                    else if(arr[i][k]!=4&&(arr[i][k]+d)%4==1){flag=1;break;}
                    else if(arr[i][k]!=4&&(arr[i][k]+d)%4!=1){break;}
                }
                for(int k=j;k<=m&&flag==0;k++){
                    if(arr[i][k]==5)break;
                    else if(arr[i][k]!=4&&(arr[i][k]+d)%4==3){flag=1;break;}
                    else if(arr[i][k]!=4&&(arr[i][k]+d)%4!=3){break;}
                }
                if(flag==0){
                    q.push(v);
                    v.init(i,j-1,d%4);
                    prev[v]=true;
                    if(dist[make_pair(i,j-1)]>d||dist[make_pair(i,j-1)]==-1)dist[make_pair(i,j-1)]=d;
                }

            }


        }
        if(j<m&&arr[i][j+1]==4){
              //  cout<<i<<" "<<(j+1)<<" front "<<endl;
            v.init(i,j+1,d%4);
            if(prev.count(v)==false){
                    v.init(i,j+1,d);
                flag=0;
                for(int k=i+1;k<=n;k++){
                    if(arr[k][j+1]==5)break;
                    else if(arr[k][j+1]!=4&&(arr[k][j+1]+d)%4==0){flag=1;break;}
                    else if(arr[k][j+1]!=4&&(arr[k][j+1]+d)%4!=0){break;}
                }
                for(int k=1;k<i&&flag==0;k++){
                    if(arr[k][j+1]==5)break;
                    else if(arr[k][j+1]!=4&&(arr[k][j+1]+d)%4==2){flag=1;break;}
                    else if(arr[k][j+1]!=4&&(arr[k][j+1]+d)%4!=2){break;}
                }
                for(int k=1;k<=j&&flag==0;k++){
                    if(arr[i][k]==5)break;
                    else if(arr[i][k]!=4&&(arr[i][k]+d)%4==1){flag=1;break;}
                    else if(arr[i][k]!=4&&(arr[i][k]+d)%4!=1){break;}
                }
                for(int k=j+2;k<=m&&flag==0;k++){
                    if(arr[i][k]==5)break;
                    else if(arr[i][k]!=4&&(arr[i][k]+d)%4==3){flag=1;break;}
                    else if(arr[i][k]!=4&&(arr[i][k]+d)%4!=3){break;}
                }
                if(flag==0){
                    q.push(v);
                    v.init(i,j+1,d%4);
                    if(dist[make_pair(i,j+1)]>d||dist[make_pair(i,j+1)]==-1){dist[make_pair(i,j+1)]=d;}
                    prev[v]=true;
                }

            }


        }

    }

    cout<<"Case #"<<p<<": ";
    if(dist[make_pair(ig,jg)]==-1)cout<<"impossible"<<endl;
    else cout<<dist[make_pair(ig,jg)]<<endl;


}


}

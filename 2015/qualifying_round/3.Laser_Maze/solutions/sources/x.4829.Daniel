#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <queue>

using namespace std;

int get_direction(char laser, int rotation) {
   int original = laser == '^' ? 0 : (laser == '>' ? 1 : (
            laser == 'v' ? 2 : 3));

   return (original + rotation) % 4;
}

int min_moves(const vector<vector<char> >& maze) {
   pair<int, int> start, target;

   static pair<int, int> directions[4] = { make_pair(-1, 0), make_pair(0, 1),
                                           make_pair(1, 0), make_pair(0, -1) };

   int m = maze.size(),
       n = maze[0].size();

   vector<vector<char> > base(m, vector<char>(n));
   for(int i = 0; i < m; ++i) {
      for(int j = 0; j < n; ++j) {
         if (maze[i][j] == 'S') {
            start.first = i;
            start.second = j;
            base[i][j] = '.';
         } else if(maze[i][j] == 'G') {
            target.first = i;
            target.second = j;
            base[i][j] = '.';
         } else {
            base[i][j] = maze[i][j];
         }
      }
   }

   /*cout << "target is " << target.first << ", " << target.second << endl;
   cout << "start is " << start.first << ", " << start.second << endl;*/

   vector<vector<vector<char> > > rotation_maps(4);
   for(int r = 0; r < 4; ++r) {
      rotation_maps[r] = base;

      for(int i = 0; i < m; ++i) {
         for(int j = 0; j < n; ++j) {
            char element = rotation_maps[r][i][j];
            if (element != '#' && element != '.' && element != 'L') {
               // Rotate and expand
               int direction = get_direction(element, r);

               int step_i = directions[direction].first,
                   step_j = directions[direction].second;

               rotation_maps[r][i][j] = 'L';

               int current_i = i + step_i,
                   current_j = j + step_j;

               while(0 <= current_i && current_i < m && 0 <= current_j &&
                     current_j < n) {
                  char current = rotation_maps[r][current_i][current_j];
                  if (current != '.' && current != 'L')
                     break;

                  rotation_maps[r][current_i][current_j] = 'L';
                  current_i += step_i;
                  current_j += step_j;
               }
            }
         }
      }
   }

   /*cout << "rotation_maps: " << endl;
   for(int r = 0; r < 4; ++r) {
      cout << r << ": " << endl;

      for(int i = 0; i < m; ++i) {
         for(int j = 0; j < n; ++j) {
            cout << rotation_maps[r][i][j];
         }
         cout << endl;
      }
   }*/

   // BFS
   //cout << "starting BFS" << endl;
   
   vector<vector<vector<int> > > moves(4, vector<vector<int> >(m,
            vector<int>(n, -1)));

   // State: <rotation, <i, j> >
   moves[0][start.first][start.second] = 0;
   queue<pair<int, pair<int, int> > > to_visit;
   to_visit.push(make_pair(0, make_pair(start.first, start.second)));

   while(!to_visit.empty()) {
      int rotation = to_visit.front().first,
          i = to_visit.front().second.first,
          j = to_visit.front().second.second;

      to_visit.pop();

      /*cout << "visiting " << i << ", " << j << "(r = " << rotation << "): " <<
        rotation_maps[rotation][i][j] << endl;*/

      for(int k = 0; k < 4; ++k) {
         int new_i = i + directions[k].first,
             new_j = j + directions[k].second,
             new_r = (rotation + 1) % 4;

         if (!(0 <= new_i && new_i < m && 0 <= new_j && new_j < n))
            continue;
         
         if (moves[new_r][new_i][new_j] != -1)
            continue;

         if (rotation_maps[new_r][new_i][new_j] != '.')
            continue;
         
         moves[new_r][new_i][new_j] = moves[rotation][i][j] + 1;
         to_visit.push(make_pair(new_r, make_pair(new_i, new_j)));
      }
   }

   int best = -1;

   for(int r = 0; r < 4; ++r) {
      int moves_to_target = moves[r][target.first][target.second];

      if (moves_to_target == -1)
         continue;

      if (best == -1 || moves_to_target < best)
         best = moves_to_target;
   }


   return best;
}

int main() {
   ios_base::sync_with_stdio(false);
   int t;
   cin >> t;

   for(int i = 1; i <= t; ++i) {
      int m, n;
      cin >> m >> n;

      vector<vector<char> > maze(m, vector<char>(n));

      for(int j = 0; j < m; ++j) {
         for(int k = 0; k < n; ++k) {
            cin >> maze[j][k];
         }
      }

      cout << "Case #" << i << ": ";
      int result = min_moves(maze);
      if (result == -1)
         cout << "impossible\n";
      else
         cout << result << '\n';

   }
}

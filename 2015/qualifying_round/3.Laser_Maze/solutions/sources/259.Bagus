#define MAXSIZE 100
#define INF 1000000000
#include <cstdio>
#include <queue>

using namespace std;

int ntest;
int M, N;
char maze[MAXSIZE + 5][MAXSIZE + 5];
char mlaser[4][MAXSIZE + 5][MAXSIZE + 5];

int si, sj, gi, gj;
char laser[] = "^>v<";
int di[4] = {-1, 0, 1, 0};
int dj[4] = {0, 1, 0, -1};

queue<int> qk, qi, qj;
int step[4][MAXSIZE + 5][MAXSIZE + 5];

int islaser(char c)
{
	for(int i = 0;i < 4;++i)
		if(c == laser[i])
			return i;
	return -1;
}

int main()
{
	scanf("%d", &ntest);
	for(int test = 1;test <= ntest;++test)
	{
		scanf("%d %d", &M, &N);
		for(int i = 0;i < M;++i)
		{
			scanf("%s", maze[i]);
			for(int j = 0;j < N;++j)
				if(maze[i][j] == 'S')
				{
					maze[i][j] = '.';
					si = i;
					sj = j;
				}
				else if(maze[i][j] == 'G')
				{
					maze[i][j] = '.';
					gi = i;
					gj = j;
				}
		}
		for(int k = 0;k < 4;++k)
		{
			for(int i = 0;i < M;++i)
				for(int j = 0;j < N;++j)
					mlaser[k][i][j] = maze[i][j];
			for(int i = 0;i < M;++i)
				for(int j = 0;j < N;++j)
				{
					int type = islaser(maze[i][j]);
					if(type >= 0)
					{
						int x = i + di[type], y = j + dj[type];
						while(x >= 0 && x < M && y >= 0 && y < N && maze[x][y] == '.')
						{
							mlaser[k][x][y] = '#';
							x += di[type];
							y += dj[type];
						}
					}
				}
			for(int i = 0;i < M;++i)
				for(int j = 0;j < N;++j)
				{
					int type = islaser(maze[i][j]);
					if(type >= 0)
					{
						int next = (type + 1) % 4;
						maze[i][j] = laser[next];
					}
				}
		}
		
		for(int k = 0;k < 4;++k)
			for(int i = 0;i < M;++i)
				for(int j = 0;j < N;++j)
					step[k][i][j] = INF;
		step[0][si][sj] = 0;
		qk.push(0);
		qi.push(si);
		qj.push(sj);
		while(!qi.empty())
		{
			int ck = qk.front();
			int ci = qi.front();
			int cj = qj.front();
			qk.pop();
			qi.pop();
			qj.pop();
			for(int k = 0;k < 4;++k)
			{
				int nk = (ck + 1) % 4;
				int ni = ci + di[k];
				int nj = cj + dj[k];
				if(ni < 0 || ni >= M)
					continue;
				if(nj < 0 || nj >= N)
					continue;
				if(mlaser[nk][ni][nj] != '.')
					continue;
				if(step[ck][ci][cj] + 1 >= step[nk][ni][nj])
					continue;
				step[nk][ni][nj] = step[ck][ci][cj] + 1;
				qk.push(nk);
				qi.push(ni);
				qj.push(nj);
			}
		}
		int mini = INF;
		for(int k = 0;k < 4;++k)
			if(step[k][gi][gj] < mini)
				mini = step[k][gi][gj];
		printf("Case #%d: ", test);
		if(mini >= INF)
			printf("impossible\n");
		else
			printf("%d\n", mini);
		
	}
}

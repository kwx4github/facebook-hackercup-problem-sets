#include <cstdio>
#include <queue>
#include <algorithm>

using namespace std;

char polje[101][101];
int rez[101][101][4];
int m, n; //n je x-os smjer, m je y-os smjer

struct point {
	int x, y;
	point() {
		x = 0;
		y = 0;
	}
	point(int a, int b) {
		y = a;
		x = b;
	}
} Starting, Goal;

struct time {
	int y, x;
	int m; //m kao moves;
	time(int a, int b, int mov) {
		y = a;
		x = b;
		m = mov;
	}
	time() {
		x=0; y=0;
		m = 0;
	}
};

//queue <time> Q;

int check(point a, int moves) {
	if(a.x<0 || a.y<0 || a.x>=n || a.y>=m ) return 0;
	if(polje[a.y][a.x]=='#' || polje[a.y][a.x]=='3' || polje[a.y][a.x]=='0' || polje[a.y][a.x]=='2' || polje[a.y][a.x]=='1' ) return 0;

	for(int i=a.x; i>=0; --i) {
		if(polje[a.y][i]=='#') break;
		if(polje[a.y][i]=='.') continue;
		
		if( ((polje[a.y][i]-'0')+moves)%4 == 0 ) return 0;
		else break;
	}
	
	for(int i=a.x; i<n; ++i) {
		if(polje[a.y][i]=='#') break;
		if(polje[a.y][i]=='.') continue;
		
		if( ((polje[a.y][i]-'0')+moves)%4 == 2 ) return 0;
		else break;
	}

	for(int i=a.y; i>=0; --i) {
		if(polje[i][a.x]=='#') break;
		if(polje[i][a.x]=='.') continue;
		
		if( ((polje[i][a.x]-'0')+moves)%4 == 1 ) return 0;
		else break;
	}

	for(int i=a.y; i<m; ++i) {
		if(polje[i][a.x]=='#') break;
		if(polje[i][a.x]=='.') continue;
		
		if( ((polje[i][a.x]-'0')+moves)%4 == 3 ) return 0;
		else break;
	}
	
	return 1;
}

int main () {
	int t; scanf("%d", &t);
	for(int k=1; k<=t; ++k) {
		scanf("%d %d", &m, &n);
		for(int i=0; i<m; ++i) {
			for(int j=0; j<n; ++j) {
				char tmp;
				scanf(" %c", &tmp);
				if(tmp=='#' || tmp=='.') polje[i][j] = tmp;
				
				if(tmp=='>') polje[i][j] = '0'; 
				if(tmp=='v') polje[i][j] = '1';
				if(tmp=='<') polje[i][j] = '2';
				if(tmp=='^') polje[i][j] = '3';
				
				if(tmp=='S') {
					polje[i][j] = '.';
					Starting.y = i;	
					Starting.x = j;
				}
				if(tmp=='G') {
					polje[i][j] = '.';
					Goal.y = i;
					Goal.x = j;
				}
			}
		}//debug
		/*for(int xx=1; xx<=4; ++xx) printf("%d %d\n", xx, check(point(0,0), xx));
		for(int xx=1; xx<=4; ++xx) printf("%d %d\n", xx, check(point(0,1), xx));
		printf("%d\n", check(point(1, 2), 1));
		printf("%d\n", check(point(1, 2), 5));
		printf("%d\n", check(point(1, 2), 2));
		*/
		for(int i=0; i<=100; ++i) {
			for(int j=0; j<=100; ++j) {
				for(int ii=0; ii<=3; ++ii) {
					rez[i][j][ii] = -1;
				}
			}
		}
		queue<time> Q;
		int sol = -1;
		Q.push(time(Starting.y, Starting.x, 0));
		while(!Q.empty()) {
			time curr = Q.front();
			Q.pop();
			if( check(point(curr.y+1, curr.x), curr.m+1) && rez[curr.y+1][curr.x][(curr.m+1)%4]==-1 ) {
				rez[curr.y+1][curr.x][(curr.m+1)%4]= curr.m+1;
				if(Goal.y == curr.y+1 && Goal.x == curr.x) {
					sol = curr.m+1;
					break;
				}
				Q.push(time(curr.y+1, curr.x, curr.m+1)); 
			}
			if( check(point(curr.y-1, curr.x), curr.m+1) && rez[curr.y-1][curr.x][(curr.m+1)%4]==-1 ) {
				rez[curr.y-1][curr.x][(curr.m+1)%4]= curr.m+1;
				if(Goal.y == curr.y-1 && Goal.x == curr.x) {
					sol = curr.m+1;
					break;
				}
				Q.push(time(curr.y-1, curr.x, curr.m+1)); 
			}
			if( check(point(curr.y, curr.x+1), curr.m+1) && rez[curr.y][curr.x+1][(curr.m+1)%4]==-1 ) {
				rez[curr.y][curr.x+1][(curr.m+1)%4]= curr.m+1;
				if(Goal.y == curr.y && Goal.x == curr.x+1) {
					sol = curr.m+1;
					break;
				}
				Q.push(time(curr.y, curr.x+1, curr.m+1)); 
			}
			if( check(point(curr.y, curr.x-1), curr.m+1) && rez[curr.y][curr.x-1][(curr.m+1)%4]==-1 ) {
				rez[curr.y][curr.x-1][(curr.m+1)%4]= curr.m+1;
				if(Goal.y == curr.y && Goal.x == curr.x-1) {
					sol = curr.m+1;
					break;
				}
				Q.push(time(curr.y, curr.x-1, curr.m+1)); 
			}
		}
		if(sol>=0) printf("Case #%d: %d\n", k, sol);
		else printf("Case #%d: impossible\n", k);
	}
	return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <set>
#include <cstdio>
#include <cstdlib>
#include <stack>
#include <cstring>
#include <iomanip>
#include <cctype>
#include <map>
#include <cfloat>

using namespace std;


#define LEFT 0
#define TOP 1
#define RIGHT 2
#define DOWN 3
#define x first
#define y second

int blocked[105][105];
int initLaserState[105][105];
int hit[105][105][4];
int visited[105][105][4];
int d[105][105][4];
pair<int,int> start,finish;



void solve() {
    int n,m; cin>>n>>m;
    for(int i = 0;i < n;i++) {
        string s; cin>>s;
        for(int j = 0;j < m;j++) {
            for(int k = 0;k < 4;k++) hit[i][j][k] = 0,visited[i][j][k] = 0,d[i][j][k] = -1;
            if(s[j] == '.') {
                blocked[i][j] = 0;
            }
            else if(s[j] == '#') {
                blocked[i][j] = 1;
                for(int k = 0;k < 4;k++) hit[i][j][k] = 1;
            }
            else if(s[j] == 'S') {
                start = {i,j};
                blocked[i][j] = 0;
            }
            else if(s[j] == 'G') {
                finish = {i,j};
                blocked[i][j] = 0;
            }
            else if(s[j] == '^') {
                blocked[i][j] = 2;
                initLaserState[i][j] = TOP;
                for(int k = 0;k < 4;k++) hit[i][j][k] = 1;
            }
            else if(s[j] == '>') {
                blocked[i][j] = 2;
                initLaserState[i][j] = RIGHT;
                for(int k = 0;k < 4;k++) hit[i][j][k] = 1;
            }
            else if(s[j] == '<') {
                blocked[i][j] = 2;
                initLaserState[i][j] = LEFT;
                for(int k = 0;k < 4;k++) hit[i][j][k] = 1;
            }
            else if(s[j] == 'v') {
                blocked[i][j] = 2;
                initLaserState[i][j] = DOWN;
                for(int k = 0;k < 4;k++) hit[i][j][k] = 1;
            }
        }
    }
    for(int i = 0;i < n;i++) {
        for(int j = 0;j < m;j++) {
            if(blocked[i][j] == 2) {
                for(int k = 0;k < 4;k++) {
                    int cd = (initLaserState[i][j] + k) % 4;
                    if(cd == LEFT) {
                        for(int l = j - 1;l >= 0 && !blocked[i][l];l--) {
                            hit[i][l][k] = 1;
                        }
                    }
                    else if(cd == RIGHT) {
                        for(int l = j + 1;l < m && !blocked[i][l];l++) {
                            hit[i][l][k] = 1;
                        }
                    }
                    else if(cd == TOP) {
                        for(int l = i - 1;l >= 0 && !blocked[l][j];l--) {
                            hit[l][j][k] = 1;
                        }
                    }
                    else {
                        for(int l = i + 1;l < n && !blocked[l][j];l++) {
                            hit[l][j][k] = 1;
                        }
                    }
                }
            }
        }
    }
    int cs = 0;
    visited[start.x][start.y][cs] = 1;
    d[start.x][start.y][0] = 0;
    queue<pair<pair<int,int>,int> > q;
    q.push({start,0});
    while(!q.empty()) {
        pair<pair<int,int>,int> cur = q.front();
        q.pop();
        cs = cur.second;
        cs++;
        cs%=4;
        if(cur.first == finish) break;
        if(cur.first.x > 0  && !hit[cur.first.x - 1][cur.first.y][cs] && !visited[cur.first.x - 1][cur.first.y][cs]) {
            visited[cur.first.x - 1][cur.first.y][cs] = 1;
            d[cur.first.x - 1][cur.first.y][cs] = d[cur.first.x][cur.first.y][cur.second] + 1;
            q.push({{cur.first.x - 1,cur.first.y},cs});
        }
        if(cur.first.x < (n - 1) && !hit[cur.first.x + 1][cur.first.y][cs] && !visited[cur.first.x + 1][cur.first.y][cs]) {
            visited[cur.first.x + 1][cur.first.y][cs] = 1;
            d[cur.first.x + 1][cur.first.y][cs] = d[cur.first.x][cur.first.y][cur.second] + 1;
            q.push({{cur.first.x + 1,cur.first.y},cs});
        }
        if(cur.first.y > 0 && !hit[cur.first.x][cur.first.y - 1][cs] && !visited[cur.first.x][cur.first.y - 1][cs]) {
            visited[cur.first.x][cur.first.y - 1][cs] = 1;
            d[cur.first.x][cur.first.y - 1][cs] = d[cur.first.x][cur.first.y][cur.second] + 1;
            q.push({{cur.first.x,cur.first.y - 1},cs});
        }
        if(cur.first.y < (m - 1) && !hit[cur.first.x][cur.first.y + 1][cs] && !visited[cur.first.x][cur.first.y + 1][cs]) {
            visited[cur.first.x][cur.first.y + 1][cs] = 1;
            d[cur.first.x][cur.first.y + 1][cs] = d[cur.first.x][cur.first.y][cur.second] + 1;
            q.push({{cur.first.x,cur.first.y + 1},cs});
        }
    }
    int best = -1;
    for(int i = 0;i < 4;i++) {
        if(d[finish.x][finish.y][i] != -1) {
            if(best == -1) best = d[finish.x][finish.y][i];
            else best = min(best,d[finish.x][finish.y][i]);
        }
    }
    if(best == -1) cout<<"impossible"<<endl;
    else cout<<best<<endl;
}


int main() {
    freopen("/Users/administrator/Desktop/laser_maze.txt","r",stdin);
    freopen("/Users/administrator/Desktop/output.txt","w",stdout);
    int t; cin>>t;
    for(int i = 1;i <= t;i++) {
        cout<<"Case #"<<i<<": ";
        solve();
    }
}
#include<iostream>
#include<cstdio>
#include<limits.h>
using namespace std;

int min(int a, int b)
{
	if(a<b)
		return a;
	else
		return b;
}

int findpath (int sx, int sy, int d, int m, int n, char s[][100]) 
{
	//cout<<d<<endl;
	if (sx<0||sy<0||sx>=m||sy>=n||s[sx][sy]=='#'||s[sx][sy]=='^'||s[sx][sy]=='<'||s[sx][sy]=='>'||s[sx][sy]=='v'||s[sx][sy]=='Q')
  		return INT_MAX;
  	if (s[sx][sy]=='S')
  		//cout<<"hello"<<" "<<INT_MAX<<"\n";
  		s[sx][sy]='S';
  	else
  	{
  		int i;
  		for(i=sx-1;i>=0;i--)
  		{
  			if(s[i][sy]=='#')
  				break;
  			else if((s[i][sy]=='^'&&d%4==2)||(s[i][sy]=='<'&&d%4==3)||(s[i][sy]=='v'&&d%4==0)||(s[i][sy]=='>'&&d%4==1))
  				return INT_MAX;
  			else if(s[i][sy]=='^'||s[i][sy]=='<'||s[i][sy]=='v'||s[i][sy]=='>')
  				break;
  		}
  		for(i=sx+1;i<m;i++)
  		{
  			if(s[i][sy]=='#')
  				break;
  			else if((s[i][sy]=='^'&&d%4==0)||(s[i][sy]=='<'&&d%4==1)||(s[i][sy]=='v'&&d%4==2)||(s[i][sy]=='>'&&d%4==3))
  				return INT_MAX;
  			else if(s[i][sy]=='^'||s[i][sy]=='<'||s[i][sy]=='v'||s[i][sy]=='>')
  				break;
  		}
  		for(i=sy+1;i<n;i++)
  		{
  			if(s[sx][i]=='#')
  				break;
  			else if((s[sx][i]=='^'&&d%4==3)||(s[sx][i]=='<'&&d%4==0)||(s[sx][i]=='v'&&d%4==1)||(s[sx][i]=='>'&&d%4==2))
  				return INT_MAX;
  			else if(s[sx][i]=='^'||s[sx][i]=='<'||s[sx][i]=='v'||s[sx][i]=='>')
  				break;
  		}
  		for(i=sy-1;i>=0;i--)
  		{
  			if(s[sx][i]=='#')
  				break;
  			else if((s[sx][i]=='^'&&d%4==1)||(s[sx][i]=='<'&&d%4==2)||(s[sx][i]=='v'&&d%4==3)||(s[sx][i]=='>'&&d%4==0))
  				return INT_MAX;
  			else if(s[sx][i]=='^'||s[sx][i]=='<'||s[sx][i]=='v'||s[sx][i]=='>')
  				break;
  		}
  	}
  	if (s[sx][sy] == 'G') 
  		return d;
  	if(s[sx][sy]=='P')
  		s[sx][sy]='Q';
  	else
  		s[sx][sy]='P';
 	int minValue = INT_MAX;
	minValue = min(minValue, findpath (sx + 1, sy, d+1, m, n, s));
  	//cout<<sx<<" "<<sy<<" "<<d<<" "<<minValue<<endl;
 	minValue = min(minValue, findpath (sx, sy + 1, d+1, m, n, s)); 
 	//cout<<sx<<" "<<sy<<" "<<d<<" "<<minValue<<endl;
  	minValue = min(minValue, findpath (sx, sy - 1, d+1, m, n, s));
  	//cout<<sx<<" "<<sy<<" "<<d<<" "<<minValue<<endl;
  	minValue = min(minValue, findpath (sx - 1, sy, d+1, m, n, s)); 
  	//cout<<sx<<" "<<sy<<" "<<d<<" "<<minValue<<endl;
  	return (minValue );
}

int main()
{
	int t;
	cin>>t;
	for(int j1=1;j1<=t;j1++)
	{
		int m,n,sx,sy;
		cin>>m>>n;
		char s[100][100];
		int i,j;
		for(i=0;i<m;i++)
		{	
			for(j=0;j<n;j++)
			{
				cin>>s[i][j];
				if(s[i][j]=='S')
				{
					sx=i;
					sy=j;
				}
			}
		}
		/*for(i=0;i<m;i++)
		{
			for(j=0;j<n;j++)
			{
				cout<<s[i][j];
			}
			cout<<endl;
		}*/
		int distance = 0;
		distance= findpath(sx,sy,0,m,n,s);
		if(distance == INT_MAX)
			cout<<"Case #"<<j1<<": impossible\n";
		else
			cout<<"Case #"<<j1<<": "<<distance<<endl;
	}
}

import Queue

WALL = '#'
TURRETS = ['<', '^', '>', 'v']
START = 'S'
GOAL = 'G'

class Laser:
	def __init__(self, turret, x, y, maze):
		self.turret = turret
		self.turrets = TURRETS
		self.x = x
		self.y = y
		self.left_range = 0
		self.right_range = len(maze[0])
		self.up_range = 0
		self.down_range = len(maze)
		for i in range(y, -1, -1):
			if maze[i][x] == WALL:
				self.up_range = i+1
				break
		for i in range(y, len(maze)):
			if maze[i][x] == WALL:
				self.down_range = i-1
				break
		for i in range(x, -1, -1):
			if maze[y][i] == WALL:
				self.left_range = i+1
				break
		for i in range(x, len(maze[0])):
			if maze[y][i] == WALL:
				self.right_range = i+1
				break

	def will_hit(self, turn, x, y):
		if self.x != x and self.y != y:
			return False

		turret = self.turrets[(self.turrets.index(self.turret) + turn) % len(self.turrets)]
		if turret == '<':
			return self.y == y and x <= self.x and self.left_range <= x
		elif turret == '>':
			return self.y == y and x >= self.x and self.right_range >= x
		elif turret == '^':
			return self.x == x and y <= self.y and self.up_range <= y
		elif turret == 'v':
			return self.x == x and y >= self.y and self.down_range >= y

class Maze:
	def __init__(self, maze):
		self.maze = maze
		self.lasers = []
		for y in range(len(maze)):
			for x in range(len(maze[0])):
				if maze[y][x] == START:
					self.start = (x, y)
				elif maze[y][x] == GOAL:
					self.goal = (x, y)
				elif maze[y][x] in TURRETS:
					self.lasers.append(Laser(maze[y][x], x, y, maze))

	def is_safe(self, turn, x, y):
		for laser in self.lasers:
			if laser.will_hit(turn, x, y):
				return False
		return True

	def is_goal(self, state):
		return self.goal == (state.x, state.y)

class State:
	def __init__(self, turns, x, y):
		self.turns = turns
		self.x = x
		self.y = y

	def __lt__(self, other):
		return self.turns < other.turns

	def __eq__(self, other):
		return self.x == other.x and self.y == other.y and self.turns % 4 == other.turns % 4

	def __hash__(self):
		return hash((self.x, self.y, self.turns % 4))

	def next_states(self, maze):
		m = maze.maze
		possible_coords = [(self.x-1, self.y), (self.x+1, self.y), 
			(self.x, self.y-1), (self.x, self.y+1)]
		states = []
		for (x, y) in possible_coords:
			if x < 0 or x >= len(m[0]) or y < 0 or y >= len(m):
				continue
			if m[y][x] == WALL:
				continue
			if maze.is_safe(self.turns + 1, x, y):
				states.append(State(self.turns + 1, x, y))
		return states

def trial(m):
	maze = Maze(m)
	frontier = Queue.PriorityQueue()
	explored = set()
	start_state = State(0, maze.start[0], maze.start[1])
	frontier.put(start_state)
	while (not frontier.empty()):
		state = frontier.get()
		if state in explored:
			continue
		if maze.is_goal(state):
			return str(state.turns)
		next_states = state.next_states(maze)
		for s in next_states:
			frontier.put(s)
		explored.add(state)
	return "impossible"

def parse():
	rows, cols = [int(i) for i in raw_input().split()]
	maze = []
	for r in range(rows):
		maze.append(list(raw_input()))
	return maze

T = int(raw_input())
for t in range(1, T+1):
	maze = parse()
	print "Case #%d: %s" % (t, trial(maze))





import static java.lang.Math.*;
import static java.util.Arrays.*;

import java.util.*;

public class laser_maze {

	public Object solve() {
		R = sc.nextInt();
		C = sc.nextInt();
		B = sc.nextChars(R);

		boolean [][][] A = new boolean [R][C][4];
		int [] S = null, G = null;

		for (int r : rep(R))
			for (int c : rep(C)) {
				if (B[r][c] == 'S')
					S = new int [] { r, c };
				if (B[r][c] == 'G')
					G = new int [] { r, c };

				int o = offset(r, c);
				if (o == -1)
					continue;

				for (int k : rep(c+1, C))
					if (free(r, k))
						A[r][k][o] = true;
					else
						break;
				for (int k : rep(r+1, R))
					if (free(k, c))
						A[k][c][(o+1)%4] = true;
					else
						break;
				for (int k : sep(c))
					if (free(r, k))
						A[r][k][(o+2)%4] = true;
					else
						break;
				for (int k : sep(r))
					if (free(k, c))
						A[k][c][(o+3)%4] = true;
					else
						break;
			}

		int [][][] T = new int [R][C][4];
		for (int [][] tt : T)
			for (int [] t : tt)
				fill(t, INF);

		T[S[0]][S[1]][0] = 0;
		Queue<int[]> Q = new LinkedList<>();
		Q.add(new int [] { S[0], S[1], 0 });

		while (!Q.isEmpty()) {
			int [] q = Q.poll();
			int r = q[0], c = q[1], t = q[2];

			for (int dr : req(-1, 1))
				for (int dc : req(-1, 1))
					if (abs(dr + dc) == 1) {
						int [] p = { r + dr, c + dc, t + 1 };
						if (free(p))
							if (A[p[0]][p[1]][p[2]%4] == false)
								if (T[p[0]][p[1]][p[2]%4] > t+1) {
									T[p[0]][p[1]][p[2]%4] = t+1;
									Q.add(p);
								}
					}
		}

		int res = INF;
		for (int o : rep(4))
			res = min(res, T[G[0]][G[1]][o]);

		return res == INF ? "impossible" : res;
	}

	int R, C;
	char [][] B;

	int offset (int r, int c) {
		switch(B[r][c]) {
		case '>': return 0;
		case '^': return 1;
		case '<': return 2;
		case 'v': return 3;
		default: return -1;
		}
	}

	boolean free (int ... a) {
		int r = a[0], c = a[1];
		if (r >= 0 && r < R && c >= 0 && c < C) {
			char x = B[r][c];
			if (x == 'S' || x == 'G' || x == '.')
				return true;
		}
		return false;
	}

	private static final int INF = (int) 1e9;
	private static int [] rep(int N) { return rep(0, N); }
	private static int [] rep(int S, int T) { if (T <= S) return new int [0]; int [] res = new int [T-S]; for (int i = S; i < T; ++i) res[i-S] = i; return res; }
	private static int [] req(int S, int T) { return rep(S, T+1); }
	private static int [] sep(int N) { return sep(0, N); }
	private static int [] sep(int S, int T) { if (T <= S) return new int [0]; int [] res = new int [T-S]; for (int i = S; i < T; ++i) res[T-1-i] = i; return res; }
	////////////////////////////////////////////////////////////////////////////////////
	private static IOUtils.MyScanner sc = new IOUtils.MyScanner();
	private static class IOUtils {
		public static class MyScanner {
			public String next() { return sc.next(); }
			public int nextInt() { return sc.nextInt(); }
			public char[] nextChars() { return next().toCharArray(); }
			public char[][] nextChars(int N) {
				char[][] res = new char[N][];
				for (int i = 0; i < N; ++i)
					res[i] = nextChars();
				return res;
			}
			private final java.util.Scanner sc;
			private MyScanner() {
				sc = new java.util.Scanner(System.in);
				sc.hasNext();
				start();
			}
		}
		private static String build(Object o, Object... a) { return buildDelim(" ", o, a); }
		private static String buildDelim(String delim, Object o, Object... a) {
			StringBuilder b = new StringBuilder();
			append(b, o, delim);
			for (Object p : a)
				append(b, p, delim);
			return b.substring(delim.length());
		}
		//////////////////////////////////////////////////////////////////////////////////
		private static void start() { if (t == 0) t = millis(); }
		private static void append(StringBuilder b, Object o, String delim) {
			if (o.getClass().isArray()) {
				int len = java.lang.reflect.Array.getLength(o);
				for (int i = 0; i < len; ++i)
					append(b, java.lang.reflect.Array.get(o, i), delim);
			} else if (o instanceof Iterable<?>)
				for (Object p : (Iterable<?>) o)
					append(b, p, delim);
			else {
				if (o instanceof Double)
					o = new java.text.DecimalFormat("#.#########").format(o);
				b.append(delim).append(o);
			}
		}
		private static void print(Object o) {
			err(o, '(', time(), ')');
			if (PRINT)
				System.out.println(o);
		}
		private static void err(Object ...o) { System.err.println(build(o)); }
		private static long t;
		private static long millis() { return System.currentTimeMillis(); }
		private static String time() { return "Time: " + (millis() - t) / 1000.0; }
		private static final boolean PRINT = System.getProperties().containsKey("PRINT");
		private static void run(int N) {
			for (int n = 1; n <= N; ++n)
				print("Case #" + n + ": " + build(new laser_maze().solve()));
			err("------------------");
			err(time());
		}
	}
	public static void main(String[] args) {
		int N = sc.nextInt();
		IOUtils.run(N);
	}
}

#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <iterator>
using namespace std;

struct State {
  int y, x, turn;
  State(int y_, int x_, int turn_) : y(y_), x(x_), turn(turn_) { }
};

const string dir = ">v<^";
const int dy[4] = { 0, 1, 0, -1 };
const int dx[4] = { 1, 0, -1, 0 };

int main() {
  int T; cin >> T;
  for(int t = 1;t <= T; ++t) {
    int M, N; cin >> M >> N;
    vector<string> field(M);
    for(int i = 0; i < M; ++i)
      cin >> field[i];
    static bool danger[100][100][4];
    memset(danger, 0, sizeof(danger));
    static bool vis[100][100][4];
    memset(vis, 0, sizeof(vis));
    queue<State> que;
    for(int y = 0; y < M; ++y) {
      for(int x = 0; x < N; ++x) {
        if(field[y][x] == 'S') {
          que.emplace(y, x, 0);
          vis[y][x][0] = true;
        }
        if(dir.find(field[y][x]) != string::npos) {
          const int d = dir.find(field[y][x]);
          for(int k = 0; k < 4; ++k) {
            const int nd = (d + k) % 4;
            for(int l = 1; ; ++l) {
              int ny = y + dy[nd]*l;
              int nx = x + dx[nd]*l;
              if(ny < 0 || ny >= M || nx < 0 || nx >= N) break;
              if(field[ny][nx] == '#' || dir.find(field[ny][nx]) != string::npos) break;
              danger[ny][nx][k] = true;
            }
          }
        }
      }
    }
#if 0
    for(int k = 0; k < 4; ++k) {
      cerr << "k = " << k << endl;
      for(int y = 0; y < M; ++y) {
        for(int x = 0; x < N; ++x)
          cerr << (danger[y][x][k] ? 'x' : '.');
        cerr << endl;
      }
    }
#endif
    int ans = -1;
    while(!que.empty()) {
      State cur = que.front();
      que.pop();
      if(field[cur.y][cur.x] == 'G') {
        ans = cur.turn;
        break;
      }
      for(int k = 0; k < 4; ++k) {
        int ny = cur.y + dy[k];
        int nx = cur.x + dx[k];
        if(ny < 0 || ny >= M || nx < 0 || nx >= N) continue;
        if(field[ny][nx] == '#' || dir.find(field[ny][nx]) != string::npos) continue;
        if(danger[ny][nx][(cur.turn + 1) % 4]) continue;
        if(vis[ny][nx][(cur.turn + 1) % 4]) continue;
        que.emplace(ny, nx, cur.turn + 1);
        vis[ny][nx][(cur.turn + 1) % 4] = true;
      }
    }
    cout << "Case #" << t << ": ";
    if(ans == -1) {
      cout << "impossible" << endl;
    }
    else {
      cout << ans << endl;
    }
  }
}

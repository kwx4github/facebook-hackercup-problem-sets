// I AM BACK!!!

#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>

using namespace std;

#define pb push_back
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define sz(v) ((int)v.size())
#define rep(i, m) for (int i = 0; i < (int)(m); i++)
#define rep2(i, n, m) for (int i = n; i < (int)(m); i++)
#define For(it, c) for (__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define mem(a, b) memset(a, b, sizeof(a))
#define mp make_pair
#define dot(a, b) ((conj(a) * (b)).X)
#define X real()
#define Y imag()
#define length(V) (hypot((V).X, (V).Y))
#define vect(a, b) ((b) - (a))
#define cross(a, b) ((conj(a) * (b)).imag())
#define normalize(v) ((v) / length(v))
#define rotate(p, about, theta) ((p - about) * exp(point(0, theta)) + about)
#define pointEqu(a, b) (comp(a.X, b.X) == 0 && comp(a.Y, b.Y) == 0)

typedef stringstream ss;
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef vector<string> vs;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vector<int> > vii;
typedef long double ld;
typedef complex<double> point;
typedef pair<point, point> segment;
typedef pair<double, point> circle;
typedef vector<point> polygon;

const int oo = (int)1e9;
const double PI = 2 * acos(0.0);
const double eps = 1e-9;

int T, I, J, ia, ja, ib, jb;
// v<^>
int di[] = {1, 0, -1, 0};
int dj[] = {0, -1, 0, 1};
string maze[111];
bool val(const int& i, const int& j) {
  return i >= 0 && i < I && j >= 0 && j < J && maze[i][j] != '^' &&
         maze[i][j] != 'v' && maze[i][j] != '<' && maze[i][j] != '>' &&
         maze[i][j] != '#';
}
struct st {
  int i, j, d;
  st() { i = j = d = 0; }
  st(int ii, int jj, int dd) {
    i = ii;
    j = jj;
    d = dd;
  }
};

bool vis[111][111][11];

vpii v;

bool ok(int i, int j, int add) {
  rep(a, sz(v)) {
    int ii = v[a].first;
    int jj = v[a].second;
    int kk = (maze[ii][jj] + add) % 4;
    ii += di[kk];
    jj += dj[kk];
    while (val(ii, jj)) {
      if (ii == i && jj == j) return false;
      ii += di[kk];
      jj += dj[kk];
    }
  }
  return true;
}

void solve() {
  st t(ia, ja, 0);
  mem(vis, 0);
  queue<st> q;
  q.push(t);
  vis[t.i][t.j][t.d] = 1;
  int lvl = 0;
  while (sz(q)) {
    int size = sz(q);
    while (size--) {
      t = q.front();
      if (t.i == ib && t.j == jb) {
        cout << lvl << endl;
        return;
      }
      q.pop();
      rep(k, 4) {
        int ni = t.i + di[k];
        int nj = t.j + dj[k];
        if (val(ni, nj) && ok(ni, nj, t.d + 1)) {
          st nt(ni, nj, (t.d + 1) % 4);
          if (!vis[nt.i][nt.j][nt.d]) {
            vis[nt.i][nt.j][nt.d] = 1;
            q.push(nt);
          }
        }
      }
    }
    lvl++;
  }
  cout << "impossible" << endl;
}

int main() {
#ifdef AHMED_ALY
  freopen("a.txt", "rt", stdin);
 freopen("b.txt", "wt", stdout);
#endif
  cin >> T;
  rep2(tt, 1, T + 1) {
    cerr<<tt<<endl;
    cin >> I >> J;
    v.clear();
    rep(i, I) {
      cin >> maze[i];
      rep(j, J) if (maze[i][j] == 'v') {
        maze[i][j] = 0;
        v.pb(mp(i, j));
      }
      else if (maze[i][j] == '<') {
        maze[i][j] = 1;
        v.pb(mp(i, j));
      }
      else if (maze[i][j] == '^') {
        maze[i][j] = 2;
        v.pb(mp(i, j));
      }
      else if (maze[i][j] == '>') {
        maze[i][j] = 3;
        v.pb(mp(i, j));
      }
      else if (maze[i][j] == 'S') ia = i, ja = j;
      else if (maze[i][j] == 'G') ib = i, jb = j;
    }
    cout << "Case #" << tt << ": ";
    solve();
  }
  return 0;
}

#include <iostream>
#include <string>
#include <queue>
using namespace std;
int v[100][100][4];
string s[100];
struct node
{
	int x,y,mod;
	node(int a,int b,int c)
	{
		x=a;y=b;mod=c;
	}
};
//! -2 : unvisited | -1 : can't visit
int main()
{
	ios::sync_with_stdio(false);
	int t;
	cin>>t;
	for(int k=1;k<=t;k++)
	{
		int m,n;
		cin>>m>>n;
		int sx,sy,gx,gy;
		for (int i = 0; i < m; i++)
		{
			cin>>s[i];
			for (int j = 0; j < n; j++)
			{
				if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G')
				{
					v[i][j][0]=v[i][j][1]=v[i][j][2]=v[i][j][3]=-2;
					if(s[i][j]=='S'){sx=i;sy=j;}
					if(s[i][j]=='G'){gx=i;gy=j;}
					s[i][j]='.';
				}
				else
				{
					v[i][j][0]=v[i][j][1]=v[i][j][2]=v[i][j][3]=-1;
				}
			}
		}
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < n; j++)
			{
				int start=-1;
				if(s[i][j]=='^')start=0;
				else if(s[i][j]=='>')start=3;
				else if(s[i][j]=='v')start=2;
				else if(s[i][j]=='<')start=1;
				if(start>=0)
				{
					for(int temp=i-1; temp>=0 && s[temp][j]=='.'; temp--)
					{
						v[temp][j][start]=-1;
					}
					start=(start+1)%4;
					for(int temp=j+1; temp<n && s[i][temp]=='.'; temp++)
					{
						v[i][temp][start]=-1;
					}
					start=(start+1)%4;
					for(int temp=i+1; temp<m && s[temp][j]=='.'; temp++)
					{
						v[temp][j][start]=-1;
					}
					start=(start+1)%4;
					for(int temp=j-1; temp>=0 && s[i][temp]=='.'; temp--)
					{
						v[i][temp][start]=-1;
					}
				}
			}
		}
		v[sx][sy][0]=0;
		queue<node*> qq;
		qq.push(new node(sx,sy,0));
		bool flag=false;
		int answer;
		while(!qq.empty() && !flag)
		{
			node cur=*qq.front();
			int nex=(cur.mod+1)%4;
			int x=cur.x,y=cur.y;
			if(x==gx && y==gy)
			{
				answer=v[x][y][cur.mod];
				flag=true;
				break;
			}
			if(x>0 && v[x-1][y][nex]==-2)
			{
				v[x-1][y][nex]=v[x][y][cur.mod]+1;
				qq.push(new node(x-1,y,nex));
			}
			if(y>0 && v[x][y-1][nex]==-2)
			{
				v[x][y-1][nex]=v[x][y][cur.mod]+1;
				qq.push(new node(x,y-1,nex));
			}
			if(x<m-1 && v[x+1][y][nex]==-2)
			{
				v[x+1][y][nex]=v[x][y][cur.mod]+1;
				qq.push(new node(x+1,y,nex));
			}
			if(y<n-1 && v[x][y+1][nex]==-2)
			{
				v[x][y+1][nex]=v[x][y][cur.mod]+1;
				qq.push(new node(x,y+1,nex));
			}
			qq.pop();
		}
		if(flag)
			cout<<"Case #"<<k<<": "<<answer<<endl;
		else
			cout<<"Case #"<<k<<": impossible"<<endl;
	}
	return 0;
}

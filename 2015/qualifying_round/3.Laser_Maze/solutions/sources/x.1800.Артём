#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <deque>
#include <stack>
#include <string>
#include <ctime>
#include <list>
#include <cstdlib>
#include <algorithm>
#include <fstream>
#include <cmath>
#include <queue>
#include <sstream>
#include <unordered_set>
#include <unordered_map>
#include <assert.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

#define mp make_pair
#define pb push_back

#define _USE_MATH_DEFINES
#define pi M_PI
#define endl '\n'

// using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector <vector<pair<int, ll> > > graph;
// typedef tree <ll,
//     null_type,
//     less <ll>,
//     rb_tree_tag,
//     tree_order_statistics_node_update> oset; // order_of_key, ...

bool check(int x, int y, int n, int m)
{
    return x >= 0 && y >= 0 && x < n && y < m;
}

void solve(int test)
{

    int dx[4] = {1, 0, -1, 0};
    int dy[4] = {0, -1, 0, 1};

    int n, m;
    cin >> n >> m;
    vector <vector <vector <int> > > p(4);
    int sx = -1, sy = -1, fx = -1, fy = -1;
    for (int i = 0; i < 4; i++)
    {
        p[i].resize(n);
        for (int j = 0; j < n; j++)
            p[i][j].resize(m, 0);
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            char c;
            cin >> c;
            if (c == 'S')
            {
                sx = i;
                sy = j;
            }
            if (c == 'G')
            {
                fx = i;
                fy = j;
            }
            for (int q = 0; q < 4; q++)
                p[q][i][j] = c;
        }
    }
    for (int po = 0; po < 4; po++)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                int c = p[po][i][j];
                int s = -1;
                if (c == 'v')
                {
                    s = 0;
                }
                else if (c == '<')
                {
                    s = 1;
                }
                else if (c == '^')
                {
                    s = 2;
                }
                else if (c == '>')
                {
                    s = 3;
                }
                if (s == -1)
                    continue;
                for (int q = 1; q < 110; q++)
                {
                    int tx = i + dx[(po + s) % 4] * q;
                    int ty = j + dy[(po + s) % 4] * q;
                    if (check(tx, ty, n, m))
                    {
                        if (p[po][tx][ty] != '.' && p[po][tx][ty] != 'G' && p[po][tx][ty] != 'S')
                            break;
                        p[po][tx][ty] = '#';
                    }
                }
            }
        }
    }
    // cout << endl << endl << "test #" << test << endl;
    // for (int q = 0; q < 4; q++)
    // {
    //     cout << endl;
    //     for (int i = 0; i < n; i++)
    //     {
    //         for (int j = 0; j < m; j++)
    //         {
    //             cout << (char)p[q][i][j];
    //         }
    //         cout << endl;
    //     }
    // }

    queue <vector <int> > q;
    if (sx == -1)
    {
        cout << "Case #" << test << ": impossible\n";
        return;
    }
    map <vector <int>, int > M;
    M[{sx, sy, 1}] = 0;
    q.push({sx, sy, 1});    
    while (!q.empty())
    {
        vector <int> top = q.front();
        q.pop();
        int x = top[0];
        int y = top[1];
        int s = top[2];
        for (int i = 0; i < 4; i++)
        {
            int tx = x + dx[i];
            int ty = y + dy[i];
            if (!check(tx, ty, n, m))
                continue;
            if (M.count({tx, ty, (s + 1) % 4}))
                continue;
            if (p[s][tx][ty] == '.' || p[s][tx][ty] == 'G' || p[s][tx][ty] == 'S')
            {
                M[{tx, ty, (s + 1) % 4}] = M[{x, y, s}] + 1;
                q.push({tx, ty, (s + 1) % 4});
            }
        }
    }
    int ans = 1000 * 1000 * 100;
    for (int i = 0; i < 4; i++)
    {
        if (M.count({fx, fy, i}))
        {
            ans = min(ans, M[{fx, fy, i}]);
        }
    }
    if (ans == 1000 * 1000 * 100)
    {
        cout << "Case #" << test << ": impossible\n";
    } 
    else
    {
        cout << "Case #" << test << ": " << ans << endl;
    }
}

int main()
{
    int T;
    cin >> T;
    for (int t = 0; t < T; t++)
        solve(t + 1);
    return 0;
}
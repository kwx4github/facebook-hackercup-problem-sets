#include <stdio.h>
#include <string.h>
struct data
{
	int x,y;
} a[100000];

struct state
{
	int d;
	int x,y,step;
} mem[100000];

struct laser
{
	bool l,r,up,down;
}la[100][100];

char s[100][100];
bool visit[100][100][4];
int tmpd[100000],dire[4][100000];
int m,n,cnt;

bool ok(int kx,int ky)
{
	int i,j;
	if(kx<m && ky<n && kx>=0 && ky>=0 && s[kx][ky]=='.')
	{
		if(!la[kx][ky].l && !la[kx][ky].r && !la[kx][ky].up && !la[kx][ky].down)
			return true;
		else
		{
			for(i=0;i<cnt;i++)
			{
				if(a[i].x==kx)
				{
					if(ky<a[i].y && tmpd[i]==3) return false;
					if(ky>a[i].y && tmpd[i]==1) return false;
				}
				if(a[i].y==ky)
				{
					if(kx<a[i].x && tmpd[i]==0) return false;
					if(kx>a[i].x && tmpd[i]==2) return false;
				}
			}
			return true;
		}
	}
	return false;
}
				
int main()
{
	int i,j,t,kase;
	freopen("in.txt","r",stdin);
	freopen("3.txt","w",stdout);
	scanf("%d",&t);
	for(kase=1;kase<=t;kase++)
	{
		cnt=0;
		int sx,sy,gx,gy;
		memset(visit,0,sizeof(visit));
		memset(la,0,sizeof(la));
		memset(mem,0,sizeof(mem));
		memset(dire,0,sizeof(dire));
		printf("Case #%d: ",kase);
		scanf("%d %d",&m,&n);
		for(i=0;i<m;i++)
		{
			scanf("%s",&s[i]);
			for(j=0;j<n;j++)
			{
				if(s[i][j]=='^' || s[i][j]=='v' || s[i][j]=='<' || s[i][j]=='>')
				{
					a[cnt].x=i;
					a[cnt].y=j;
					if(s[i][j]=='^') dire[0][cnt]=0;
					if(s[i][j]=='>') dire[0][cnt]=1;
					if(s[i][j]=='v') dire[0][cnt]=2;
					if(s[i][j]=='<') dire[0][cnt]=3;
					for(int left=j+1;left<n;left++)
						la[i][left].l=true;
					for(int right=0;right<j;right++)
						la[i][right].r=true;
					for(int u=i+1;u<m;u++)
						la[u][j].up=true;
					for(int d=0;d<i;d++)
						la[d][j].down=true;
					cnt++;
				}
				if(s[i][j]=='S')
				{
					sx=i;
					sy=j;
					s[i][j]='.';
				}
				if(s[i][j]=='G')
				{
					gx=i;
					gy=j;
					s[i][j]='.';
				}
			}
		}
		int l=1,r=1;
		for(i=1;i<4;i++)
			for(j=0;j<cnt;j++)
				dire[i][j]=(dire[i-1][j]+1)%4;
		mem[1].x=sx;
		mem[1].y=sy;
		mem[1].d=0;
		mem[1].step=0;
		bool mm=false;
		for(i=l;i<=r;i++)
		{
			for(j=0;j<cnt;j++)
				tmpd[j]=(dire[mem[i].d][j]+1)%4;
			if(ok(mem[i].x+1,mem[i].y))
			{
				if(!visit[mem[i].x+1][mem[i].y][(mem[i].d+1)%4])
				{
					visit[mem[i].x+1][mem[i].y][(mem[i].d+1)%4]=true;
					r++;
					mem[r].x=mem[i].x+1;
					mem[r].y=mem[i].y;
					mem[r].d=(mem[i].d+1)%4;
					mem[r].step=mem[i].step+1;
					if(mem[r].x==gx && mem[r].y==gy)
					{
						mm=true;
						printf("%d\n",mem[r].step);
						break;
					}
				}
			}
			if(ok(mem[i].x-1,mem[i].y))
			{
				if(!visit[mem[i].x-1][mem[i].y][(mem[i].d+1)%4])
				{
					visit[mem[i].x-1][mem[i].y][(mem[i].d+1)%4]=true;
					r++;
					mem[r].x=mem[i].x-1;
					mem[r].y=mem[i].y;
					mem[r].d=(mem[i].d+1)%4;
					mem[r].step=mem[i].step+1;
					if(mem[r].x==gx && mem[r].y==gy)
					{
						mm=true;
						printf("%d\n",mem[r].step);
						break;
					}
				}
			}
			if(ok(mem[i].x,mem[i].y+1))
			{
				if(!visit[mem[i].x][mem[i].y+1][(mem[i].d+1)%4])
				{
					visit[mem[i].x][mem[i].y+1][(mem[i].d+1)%4]=true;
					r++;
					mem[r].x=mem[i].x;
					mem[r].y=mem[i].y+1;
					mem[r].d=(mem[i].d+1)%4;
					mem[r].step=mem[i].step+1;
					if(mem[r].x==gx && mem[r].y==gy)
					{
						mm=true;
						printf("%d\n",mem[r].step);
						break;
					}
				}
			}
			if(ok(mem[i].x,mem[i].y-1))
			{
				if(!visit[mem[i].x][mem[i].y-1][(mem[i].d+1)%4])
				{
					visit[mem[i].x][mem[i].y-1][(mem[i].d+1)%4]=true;
					r++;
					mem[r].x=mem[i].x;
					mem[r].y=mem[i].y-1;
					mem[r].d=(mem[i].d+1)%4;
					mem[r].step=mem[i].step+1;
					if(mem[r].x==gx && mem[r].y==gy)
					{
						mm=true;
						printf("%d\n",mem[r].step);
						break;
					}
				}
			}
		}
		if(!mm) printf("impossible\n");
	}
	return 0;
}	

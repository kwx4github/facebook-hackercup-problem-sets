#include <algorithm>
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <iomanip>
#include <stdio.h>
#include <string>
#include <queue>
#include <cmath>
#include <stack>
#include <time.h>
#include <map>
#include <set>
#define eps 1e-8
#define M 1000100
#define LL long long
//#define LL long long
#define INF 0x3f3f3f
#define PI 3.1415926535898


#define read() freopen("laser_maze.in", "r", stdin)
#define write() freopen("laser_maze.out", "w", stdout);

const int maxn = 210;

using namespace std;


int mp[maxn][maxn];

char str[maxn][maxn];
int vis[maxn][maxn][4];


struct node
{
    int x, y, step;
};

queue<node> que;

int tx1, ty1, tx2, ty2;
int n, m;
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};


bool judge(int x, int y, int step)
{
    int flag = 0;
    if(mp[x][y] != -1) flag = 1;
    for(int i = 0; i < y; i++)
    {
        if(mp[x][i] >= 0 && (mp[x][i]+step)%4 == 1)
        {
            flag = 1;
            break;
        }
    }

    for(int i = y+1; i < m; i++)
    {
        if(mp[x][i] >= 0 && (mp[x][i]+step)%4 == 3)
        {
            flag = 1;
            break;
        }
    }
    for(int i = 0; i < x; i++)
    {
        if(mp[i][y] >= 0 && (mp[i][y]+step)%4 == 2)
        {
            flag = 1;
            break;
        }
    }
    for(int i = x+1; i < n; i++)
    {
        if(mp[i][y] >= 0 && (mp[i][y]+step)%4 == 0)
        {
            flag = 1;
            break;
        }
    }
    if(flag) return false;
    return true;

}

int bfs()
{
    node tmp;
    tmp.x = tx1;
    tmp.y = ty1;
    tmp.step = 0;

    int flag = -1;
    vis[tx1][ty1][0] = 1;
    que.push(tmp);

    while(!que.empty())
    {
        tmp = que.front();
        que.pop();
        int sx = tmp.x;
        int sy = tmp.y;
        int step = tmp.step;
        for(int i = 0; i < 4; i++)
        {
            int px, py;
            px = sx + dx[i];
            py = sy + dy[i];
            if(px < 0 || px >= n || py < 0 || py >= m) continue;
            if(vis[px][py][(step+1)%4]) continue;
            if(!judge(px, py, step+1)) continue;
            if(px == tx2 && py == ty2)
            {
                if(flag == -1) flag = step+1;
                else flag = min(flag, step+1);
            }
            node tmx;
            tmx.x = px;
            tmx.y = py;
            tmx.step = step+1;
            que.push(tmx);
            vis[px][py][(step+1)%4] = 1;
        }
    }
    return flag;
}


int main()
{
    read();
    write();
    int T;
    cin >>T;
    int Case = 1;
    while(T--)
    {

        scanf("%d %d",&n, &m);
        for(int i = 0; i < n; i++) scanf("%s",str[i]);
        memset(vis, 0, sizeof(vis));
        memset(mp, -1, sizeof(mp));
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(str[i][j] == 'S')
                {
                    tx1 = i;
                    ty1 = j;
                }
                else if(str[i][j] == 'G')
                {
                    tx2 = i;
                    ty2 = j;
                }
                else if(str[i][j] == '#')  mp[i][j] = -2;
                else if(str[i][j] == '^')  mp[i][j] = 0;
                else if(str[i][j] == 'v')  mp[i][j] = 1;
                else if(str[i][j] == '>')  mp[i][j] = 2;
                else if(str[i][j] == '<')  mp[i][j] = 3;
            }
        }
        int flag = bfs();
        printf("Case #%d: ", Case++);
        if(flag == -1) cout<<"impossible"<<endl;
        else cout<<flag<<endl;
    }
}

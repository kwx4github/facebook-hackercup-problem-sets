#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <cstring>

using namespace std;

int dx [] = { 1 , 0 , -1, 0 };
int dy [] = { 0 , 1 , 0, -1 };

struct node
{
    int x,y,l;

    node ( int xx, int yy, int ll ) { x = xx; y = yy; l = ll; }
};

bool bio [ 105 ][ 105 ][ 4 ];

void SolveMe ( int num )
{
    memset ( bio, 0 , sizeof bio );
    int ret = -1, x, y, l, xst,yst, xend, yend, n, m,sm;

    cin >> n >> m;

    vector < string > v ( n );

    for ( int i = 0; i < n; i++ )
        cin >> v[i];

    for ( int i = 0; i < n; i++ )
        for ( int j = 0; j < m; j++ )
            if ( v[i][j] == 'S' )
            {
                xst = i;
                yst = j;
                v[i][j] = '.';
            }
            else if ( v[i][j] == 'G' )
            {
                xend = i;
                yend = j;
                v[i][j] = '.';
            }

    for ( int i = 0; i < n; i++ )
        for ( int j = 0; j < m; j++ )
            if ( v[i][j] != '#' && v[i][j] != '.' )
            {
                if ( v[i][j] == 'v' ) sm = 0;
                if ( v[i][j] == '>' ) sm = 1;
                if ( v[i][j] == '^' ) sm = 2;
                if ( v[i][j] == '<' ) sm = 3;

                for ( int k = 0; k < 4; k++ )
                {
                    x = i + dx[sm]; y = j+dy[sm];

                    while ( x >= 0 && x < n && y >= 0 && y < m && v[x][y] == '.' )
                    {
                        bio[x][y][k] = true;

                        x += dx[sm];
                        y += dy[sm];
                    }

                    sm--;
                    if ( sm < 0 ) sm += 4;
                }
            }

    queue < node > q;

    for ( int i = 0; i < 4; i++ )
    {
        x = xst + dx[i]; y = yst + dy[i];

        if ( x < 0 || x >= n || y < 0 || y >= m || v[x][y] != '.' ) continue;

        q.push ( node ( x, y, 1 ) );
    }

    while ( !q.empty() )
    {

        x = q.front().x;
        y = q.front().y;
        l = q.front().l;
        q.pop();

        if ( bio[x][y][l%4] ) continue;
        bio[x][y][l%4] = true;

        if ( x == xend && y == yend )
        {
            cout << "Case #" << num << ": " << l << endl;
            return;
        }

        l++;

        for ( int i = 0; i < 4; i++ )
        {
            x += dx[i]; y+= dy[i];

            if ( x >= 0 && x < n && y >= 0 && y < m && v[x][y] == '.' && !bio[x][y][l%4] )
                q.push ( node ( x, y, l ) );

            x -= dx[i]; y-= dy[i];
        }
    }

    cout << "Case #" << num << ": impossible" << endl;
}

int main()
{
    int t;cin >> t;

    for ( int i = 1; i <= t; i++ )
        SolveMe ( i );

    return 0;
}

#include <cstdio>
#include <cmath>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <queue>
#include <map>
#include <algorithm>
using namespace std;

string maze[100];
int hit[100][100][4];
int used[100][100][4];

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void solveTest() {
    int n, m;
    cin >> m >> n;
    
    for (int i = 0; i < m; i++) {
        cin >> maze[i];
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < 4; k++) {
                hit[i][j][k] = 0;
                used[i][j][k] = 0;
            }
        }
    }
    
    int sx, sy, gx, gy;
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (maze[i][j] == 'G') {
                gx = i;
                gy = j;
            }
            else if (maze[i][j] == 'S') {
                sx = i;
                sy = j;
            }
            else if (maze[i][j] == '#') {
                for (int k = 0; k < 4; k++) {
                    hit[i][j][k] = 1;
                }
            }
            
            int dir;
            if (maze[i][j] == '^') {
                dir = 0;
            }
            else if (maze[i][j] == '>') {
                dir = 1;
            }
            else if (maze[i][j] == 'v') {
                dir = 2;
            }
            else if (maze[i][j] == '<') {
                dir = 3;
            }
            else {
                continue;
            }
            
            for (int k = 0; k < 4; k++, dir = (dir + 1) % 4) {
                int ni = i, nj = j;
                while (1) {
                    ni += dx[dir];
                    nj += dy[dir];
                    if (ni < 0 || ni >= m || nj < 0 || nj >= n) {
                        break;
                    }
                    if (maze[ni][nj] != '.' && maze[ni][nj] != 'G' && maze[ni][nj] != 'S') {
                        break;
                    }
                    hit[ni][nj][k] = 1;
                }
            }
        }
    }
    
    queue<pair<pair<int, int>, int> > q;
    q.push(make_pair(make_pair(sx, sy), 0));
    used[sx][sy][0] = 1;
    
    while (!q.empty()) {
        int x = q.front().first.first;
        int y = q.front().first.second;
        int k = q.front().second;
        int dis = used[x][y][k];
        q.pop();
        
        k = (k + 1) % 4;
        
        for (int i = 0; i < 4; i++) {
            int ni = x + dx[i];
            int nj = y + dy[i];
            if (ni < 0 || ni >= m || nj < 0 || nj >= n) {
                continue;
            }
            if (!hit[ni][nj][k] && !used[ni][nj][k]) {
                q.push(make_pair(make_pair(ni, nj), k));
                used[ni][nj][k] = dis + 1;
            }
        }
    }
    
    int ans = 0;
    
    for (int i = 0; i < 4; i++) {
        if (used[gx][gy][i]) {
            if (ans == 0 || ans > used[gx][gy][i]) {
                ans = used[gx][gy][i];
            }
        }
    }
    
    if (ans) {
        cout << ans - 1;
    }
    else {
        cout << "impossible";
    }
    
}

void solve() {
    int T;
    cin >> T;
    
    for (int i = 1; i <= T; i++) {
        cout << "Case #" << i << ": ";
        solveTest();
        cout << endl;
    }
}

int main() {
    freopen("laser_maze.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
    
    solve();
}

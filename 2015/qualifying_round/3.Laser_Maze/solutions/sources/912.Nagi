//
//  main.cpp
//  FHCQualMaze
//
//  Created by Nagi Nahas on 1/11/15.
//  Copyright (c) 2015 Nagi Nahas. All rights reserved.
//




#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>
#include <map>
#include <cstdlib>
using namespace std;

int distances [4][200][200];



struct nd {
    int i;
    int j;
    int k;
};
int BFS2(vector <vector <string> > grids, vector <string> grid){
    nd org;
    
    //need to initialize distances and use them as visited array
    for(int i=0;i<4;i++) for(int j=0;j<200;j++) for(int k=0;k<200;k++) distances[i][j][k] = -1;
    for(int i=0;i<grid.size();i++) for(int j =0;j<grid[0].size();j++) if(grid[i][j] == 'S') {
        org.i = i; org.j = j;org.k = 0;
        distances [0][i][j] = 0;
        
    }
    queue <nd> q;
    q.push(org);
    while (q.empty()==false){
        nd newv = q.front();
        q.pop();
        for(int i=-1;i<=1;i++){
            for(int j=-1;j<=1;j++){
                if(abs(i) +abs(j) ==1){
                    int pi = newv.i + i;
                    int pj = newv.j + j;
                    int pk = (newv.k +1)%4;
                    
                    if(pi>=0 && pi<grid.size() && pj>=0 && pj < grid[0].size()){
                        if(distances[pk][pi][pj] !=-1) continue;
                        if(grids[pk][pi][pj] == 'S' ||  grids[pk][pi][pj] == 'G' || grids[pk][pi][pj] == '.' ){
                            distances[pk][pi][pj] = distances[newv.k][newv.i][newv.j] + 1;
                            nd nv2;
                            nv2.i = pi;
                            nv2.j = pj;
                            nv2.k = pk;
                            q.push(nv2);
                            if(grids[pk][pi][pj] == 'G') return distances[pk][pi][pj];
                        }
                    }
                }
            }
        }
    }
    return -1;
}

//I need rt and fillt;
vector<string> rt(vector <string> grid){
    vector <string> grid2;
    map <char,char> nxt;
    nxt['>'] = 'v';
    nxt['v'] = '<';
    nxt['<'] = '^';
    nxt['^'] = '>';
    grid2 = grid;
    for(int i=0;i<grid.size();i++){
        for(int j=0;j<grid[0].size();j++){
            if(nxt.count(grid[i][j])!=0) grid2[i][j] = nxt[grid[i][j]];
        }
    }
    return grid2;
}
void fillt(vector<string> &grid){
    for(int i=0;i<grid.size();i++){
        for(int j=0;j<grid[0].size();j++){
            if(grid[i][j] == '>'){
                for(int k =j+1;k<grid[0].size();k++){
                    if(grid[i][k] == '.' || grid[i][k] == 'G' || grid[i][k] == 'S'|| grid[i][k] == 'I'){
                        grid[i][k] = 'I';
                    }
                    else break;
                
                }
                
            }
            else if(grid[i][j] == '<'){
                for(int k =j-1;k>=0;k--){
                    if(grid[i][k] == '.' || grid[i][k] == 'G' || grid[i][k] == 'S' || grid[i][k] == 'I'){
                        grid[i][k] = 'I';
                    }
                    else break;
                    
                }
                
            }
            else if(grid[i][j] == 'v'){
                for(int k =i+1;k<grid.size();k++){
                    if(grid[k][j] == '.' || grid[k][j] == 'G' || grid[k][j] == 'I'|| grid[k][j] == 'S'){
                        grid[k][j] = 'I';
                    }
                    else break;
                    
                }
                
            }
            else if(grid[i][j] =='^'){
                for(int k =i-1;k>=0;k--){
                    if(grid[k][j] == '.' || grid[k][j] == 'G' || grid[k][j] == 'I' || grid[k][j] == 'S' ){
                        grid[k][j] = 'I';
                    }
                    else break;
                    
                }
                
            }
            
            
        }
    }
}
void display(vector <string> vs){
    cout << "*****" << endl;
    for(int i=0;i<vs.size();i++){
        cout << vs[i] << endl;
    }
}

int main(int argc, const char * argv[])
{

    int T;
    cin >> T;
    for(int t=0;t<T;t++){
        int M,N;
        cin >> M >> N;
        //M lines of n characters each
        string s;
        vector <string> grid;
        for(int i=0;i<M;i++){
            cin >> s;
            grid.push_back(s);
            
        }
        vector <vector <string> > grids;
        grids.push_back(grid);
        vector <string> temp;
        temp = rt(grid);
        grids.push_back(temp);
        temp = rt(temp);
        grids.push_back(temp);
        temp = rt(temp);
        grids.push_back(temp);
        
        for(int i=0;i<grids.size();i++) fillt(grids[i]);
        //for(int i=0;i<grids.size();i++) display(grids[i]);
        int dist = BFS2(grids,grid);
        if(dist ==-1) cout << "Case #" << t+1 << ": " << "impossible" << endl;
        else cout << "Case #" << t+1 << ": " << dist << endl;
        
    }
    
    return 0;
}



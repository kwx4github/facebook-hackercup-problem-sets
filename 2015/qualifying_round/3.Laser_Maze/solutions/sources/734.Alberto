// Facebook Hacker Cup 2015 Qualification Round
// Laser Maze
// 11/01/2015

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <deque>
#include <iomanip>
#include <iostream>
#include <queue>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
#define INF 1000000000
#define FOR(i, a, b) for(int i=int(a); i<int(b); i++)
#define FORC(cont, it) for(typeof((cont).begin()) it=(cont).begin(); it!=(cont).end(); it++)
#define pb push_back
#define mp make_pair
typedef int mint;
#define int ll
using namespace std;
typedef long long ll; typedef pair<int, int> ii;
typedef vector<int> vi; typedef vector<ii> vii;
typedef vector<vi> vvi;

struct tile{
    int x, y, s, t;
    tile() {}
    tile(int x, int y, int s, int t) :
        x(x), y(y), s(s), t(t) {}
};

int M, N, startX, startY, goalX, goalY;
int neigh[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; // ^ > v <
bool visited[100][100][4];
bool attacked[100][100][4];
char board[100][100];

int isTurret(char x) {
    switch(x) {
        case '^':
            return 0;
        case '>':
            return 1;
        case 'v':
            return 2;
        case '<':
            return 3;
        default:
            return -1;
    };
}

int solve() {
    queue<tile> q;
    q.push(tile(startX, startY, 0, 0));
    while (!q.empty()) {
        tile curTile = q.front();
        q.pop();
        int X = curTile.x, Y = curTile.y, S = curTile.s, T = curTile.t;
        if (X < 0 || M <= X || Y < 0 || N <= Y || board[X][Y] != '.')
            continue;
        if (visited[X][Y][S] || ((X != startX || Y != startY || S != 0) && attacked[X][Y][S]))
            continue;
        visited[X][Y][S] = true;
        if (goalX == X && goalY == Y)
            return T;
        FOR(k, 0, 4) {
            int nextX = X + neigh[k][0],
                nextY = Y + neigh[k][1];
            q.push(tile(nextX, nextY, (S+1)%4, T+1));
        }
    }
    return -1;
}

void fillAttacks() {
    FOR(i, 0, M) {
        FOR(j, 0, N) {
            int tur = isTurret(board[i][j]);
            if(tur != -1) {
                FOR(k, 0, 4) {
                    int curX = i + neigh[k][0],
                        curY = j + neigh[k][1];
                    while (0 <= curX && curX < M && 0 <= curY && curY < N && board[curX][curY] == '.') {
                        attacked[curX][curY][(k-tur+4)%4] = true;
                        curX += neigh[k][0];
                        curY += neigh[k][1];
                    }
                }
            }
        }
    }
}

mint main()
{
    int T;
    cin >> T;
    for (int tc = 1; tc <= T; tc++) {
        cin >> M >> N;
        FOR(i, 0, M) {
            FOR(j, 0, N) {
                cin >> board[i][j];
                if (board[i][j] == 'S')
                    startX = i, startY = j, board[i][j] = '.';
                if (board[i][j] == 'G')
                    goalX = i, goalY = j, board[i][j] = '.';
                FOR(k, 0, 4)
                    visited[i][j][k] = attacked[i][j][k] = false;
            }
        }
        fillAttacks();
        int ans = solve();
        cout << "Case #" << tc << ": ";
        if(ans == -1)
            cout << "impossible" << endl;
        else
            cout << ans << endl;
    }
}

#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstring>
#include <cstdarg>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <complex>
#include <numeric>
#include <vector>
#include <string>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <thread>
#include <mutex>

using namespace std;

#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define FOR(i, a, b) for (int i(a), _b(b); i < _b; ++i)
#define REP(i, n) FOR(i, 0, n)
#define FORD(i, a, b) for (int i(a), _b(b); i >= _b; --i)
#define FORE(e, v) for (int e = head[v]; e >= 0; e = E[e].next)
#define UNIQUE(a) sort(all(a)), (a).erase(unique(all(a)), (a).end())
#define CL(a, v) memset(a, v, sizeof a)
#define pb push_back
#define X first
#define Y second

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;

const int INF = 1000000000;
const ll INF_LL = 1000000000000000000LL;
const double pi = 2 * acos(0.0);

template<class T> void smin(T& a, const T& b) { if (a > b) a = b; }
template<class T> void smax(T& a, const T& b) { if (a < b) a = b; }
template<class T> T gcd(T a, T b) {
  while (a & b) { if (a >= b) a %= b; else b %= a; } return a + b; }
template<class T> T sqr(const T& a) { return a * a; }

template<typename Iterator> void print(const char* fmt,
    Iterator begin, Iterator end, const char* separator = " ") {
  for (Iterator it = begin; it != end; ++it) {
    if (it != begin) printf("%s", separator);
    printf(fmt, *it);
  }
  printf("\n");
}

const int h = 101;
int n, m;
char f[h][h];
int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};

struct P {
  int x, y;
  int r;
  P(int x = 0, int y = 0, int r = 0) : x(x), y(y), r(r) {}
};

bool l[h][h][4];
int d[h][h][4];
P q[h*h*4], s, t;

int solve() {
  CL(d, -1);
  q[0] = s;
  d[s.x][s.y][s.r] = 0;
  for (int qa = 0, qb = 1; qa < qb; ++qa) {
    s = q[qa];
    int r = (s.r + 1) % 4;
    REP(u, 4) {
      int x = s.x + dx[u];
      int y = s.y + dy[u];
      if (x < 0 || x >= n || y < 0 || y >= m
          || f[x][y] != '.' || l[x][y][r]) continue;
      if (d[x][y][r] == -1) {
        d[x][y][r] = d[s.x][s.y][s.r] + 1;
        q[qb++] = P(x, y, r);
        if (x == t.x && y == t.y) return d[x][y][r];
      }
    }
  }
  return -1;
}

int main() {
  cin.tie(NULL);
  //ios_base::sync_with_stdio(false);
  freopen("laser_maze.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  int ntest, itest = 1;
  for (scanf("%d", &ntest); itest <= ntest; ++itest) {
    scanf("%d%d", &n, &m);
    REP(i, n) scanf("%s", f+i);
    REP(i, n) REP(j, m) {
      if (f[i][j] == 'S') s = P(i, j), f[i][j] = '.';
      if (f[i][j] == 'G') t = P(i, j), f[i][j] = '.';
    }

    CL(l, 0);
    REP(i, n) REP(j, m) if (f[i][j] != '.' && f[i][j] != '#') {
      int o = 0;
      switch (f[i][j]) {
      case '>': o = 0; break;
      case 'v': o = 1; break;
      case '<': o = 2; break;
      case '^': o = 3; break;
      default: return -1;
      }
      REP(u, 4) {
        int x = i, y = j;
        while (true) {
          x += dx[o];
          y += dy[o];
          if (x < 0 || x >= n || y < 0 || y >= m || f[x][y] != '.') break;
          l[x][y][u] = true;
        }
        ++o;
        if (o == 4) o = 0;
      }
    }

    printf("Case #%d: ", itest);
    int ans = solve();
    if (ans == -1) printf("impossible\n");
    else printf("%d\n", ans);
  }
  cerr << endl << endl << "TIME: " << clock() << endl;
  return 0;
}

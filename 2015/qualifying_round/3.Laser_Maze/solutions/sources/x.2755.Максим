#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<cassert>
#include<cstdio>
#include<cstring>
#include<ctime>

#define DEBUGLEVEL
#ifdef DEBUGLEVEL
#define printf_debug(fmt, args...) fprintf(stderr, fmt, ##args)
#else
#define printf_debug(fmt, args...)
#endif

typedef long long llong;

using namespace std;

#define ADD(y,x,i) q[qe][0] = y; q[qe][1] = x; q[qe][2] = i; used[i % 4][y][x] = 1; qe++;
#define MAXN 120
char real_world[MAXN][MAXN];
char world[4][MAXN][MAXN];
int used[4][MAXN][MAXN];
int q[MAXN * MAXN * 4][3];
int qs, qe;

int n, m;
int dx[] = {-1, 0,  1, 0};
int dy[] = { 0, -1, 0, 1};

inline int get_d (char c) {
    switch (c) {
    case '<':
        return 0;
    case '^':
        return 1;
    case '>':
        return 2;
    case 'v':
        return 3;
    default:
        return -1;
    }
}

inline char rw_to_w (char c) {
    if (get_d (c) != -1 || c == '#') {
        return '#';
    }
    return '.';
}

inline int is_free (char c) {
    return c == '.' || c == 'S' || c == 'G';
}

inline int is_valid (int y, int x) {
    return (0 <= y && y < n) && (0 <= x && x < m);
}

int main() {
#ifdef DEBUG
    freopen("laser_maze.txt", "r", stdin);
    freopen("C.out", "w", stdout);
#endif
    int T;
    cin >> T;
    for(int t = 1; t <= T; t++) {
        cin >> n >> m;
        memset (used, 0, sizeof (used));
        int sy = -1, sx = -1, gy = -1, gx = -1;
        for (int i = 0; i < n; ++i) {
            string s;
            cin >> s;
            assert ((int)s.size() == m);
            for (int j = 0; j < m; ++j) {
                real_world[i][j] = s[j];
                for (int t = 0; t < 4; ++t) {
                    world[t][i][j] = rw_to_w (s[j]);
                }
                if (s[j] == 'S') {
                    sy = i;
                    sx = j;
                }
                if (s[j] == 'G') {
                    gy = i;
                    gx = j;
                }
            }
        }
        for (int st = 0; st < 4; ++st) {
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < m; ++j) {
                    int d = get_d (real_world[i][j]);
                    if (d != -1) {
                        d = (d + 1 + st) % 4;
                        int y = i + dy[d];
                        int x = j + dx[d];
                        while (is_valid (y, x) && is_free (real_world[y][x])) {
                            world[st][y][x] = '#';
                            y += dy[d];
                            x += dx[d];
                        }
                    }
                }
            }
        }
        int res = -1;
        ADD (sy, sx, 0);
        while (qs < qe) {
            int y = q[qs][0];
            int x = q[qs][1];
            int l = q[qs][2];
            qs++;
            if (y == gy && x == gx) {
                res = l;
                break;
            }
            for (int d = 0; d < 4; ++d) {
                int ny = y + dy[d];
                int nx = x + dx[d];
                int nl = l + 1;
                if (is_valid (ny, nx) && world[l % 4][ny][nx] == '.' && !used[nl % 4][ny][nx]) {
                    ADD (ny, nx, nl);
                }
            }
        }
        printf ("Case #%d: ", t);
        if (res == -1) {
            printf ("impossible\n");
        } else {
            printf ("%d\n", res);
        }
    }
    return 0;
}
#include <iostream>
#include <cmath>
#include <set>
#include <map>
#include <algorithm>
#include <cstdio>
#include <vector>

#define mp(x,y) make_pair((x), (y))
#define pb(x) push_back((x))
#define sortv(v) sort((v).begin(),(v).begin()+(v).size())

using namespace std;

int next() {int x;cin >> x;return x;}
long long nextl() {long long x;cin >> x;return x;}
double nextd() {double x;cin >> x;return x;}

void out(long long x) {printf("%d ", x);}


int main() {
	int tests = next();

	map<char, int> mp;
	mp['>'] = 0;
	mp['^'] = 1;
	mp['<'] = 2;
	mp['v'] = 3;

	int dx[4] = {1, 0, -1, 0};
	int dy[4] = {0, -1, 0, 1};

	for (int test = 1; test <= tests; test++) {
		int n = next() + 2;
		int m = next() + 2;
		
		char field[n][m];
		for (int i = 1; i < n - 1; i++) scanf("%s", field[i] + 1);
		for (int i = 0; i < n; i++) field[i][0] = field[i][m - 1] = '#';
		for (int j = 0; j < m; j++) field[0][j] = field[n - 1][j] = '#';
		
		char fld[4][n][m];
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < n; j++)
				for (int t = 0; t < m; t++)
					if (!mp.count(field[j][t])) {
						fld[i][j][t] = field[j][t];
						if (field[j][t] == 'S' || field[j][t] == 'G') fld[i][j][t] = '.';
					}

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < n; j++)
				for (int t = 0; t < m; t++)
					if (mp.count(field[j][t])) {
						int rot = (mp[field[j][t]] + i) % 4;
						int x = t;
						int y = j;
						while (1) {
							fld[i][y][x] = '#';
							x += dx[rot];
							y += dy[rot];
							if (!(x >= 0 && x < m && y >= 0 && y < n && field[y][x] != '#' && !mp.count(field[y][x]))) break;
						}
					}

		for (int i = 0; i < 0; i++) {
			printf("%d\n", i);
			for (int j = 0; j < n; j++) {
				for (int t = 0; t < m; t++) printf("%c", fld[i][j][t]);
				printf("\n");
			}
			printf("\n");
		}

		int startx, starty, finishx, finishy;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				if (field[i][j] == 'S') {startx = j; starty = i;}
				if (field[i][j] == 'G') {finishx = j; finishy = i;}
			}
		
		//out(startx); out(starty); out(finishx); out(finishy); printf("\n");
		int mn[4][n][m];
		int len = 4*n*m;
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < n; j++)
				for (int t = 0; t < m; t++) mn[i][j][t] = len + 10;
		mn[0][starty][startx] = 0;

		int h[len + 1];
		int x[len + 1];
		int y[len + 1];
		for (int i = 0; i <= len; i++) h[i] = x[i] = y[i] = -1;

		int ind = 1;
		h[0] = 0;
		x[0] = startx;
		y[0] = starty;

		for (int i = 0; i < ind; i++) {
			//printf("%d %d %d\n", h[i], x[i], y[i]);
			int hh = (h[i] + 1) % 4;
			for (int t = 0; t < 4; t++) {
				int xx = x[i] + dx[t];
				int yy = y[i] + dy[t];
				//printf("!!! %d %d %d\n", hh, xx, yy);
				if (fld[hh][yy][xx] != '#' && mn[hh][yy][xx] > len) {
					mn[hh][yy][xx] = mn[h[i]][y[i]][x[i]] + 1;
					h[ind] = hh;
					x[ind] = xx;
					y[ind] = yy;
					ind++;
				}
			}
		}

		int answ = len + 10;
		for (int i = 0; i < 4; i++) answ = min(answ, mn[i][finishy][finishx]);

		if (answ > len) printf("Case #%d: impossible\n", test);
		else printf("Case #%d: %d\n", test, answ);
	}
}
#include <iostream>
#include <cstdlib>
#include <fstream>

using namespace std;

bool first = false;
long long minSteps;
int m, n, gr, gc, cnt;
int turrets[10000][2];
char maze[100][100];
int visited[100][100][4];

bool die(int row, int col)
{
     for (int i=(row-1); i>=0; i--)
     {
         if (maze[i][col] == '#')
            break;
         else if (maze[i][col]=='4')
              return true;
     }
     for (int i=(row+1); i<m; i++)
     {
         if (maze[i][col] == '#')
            break;
         else if (maze[i][col]=='2')
              return true;
     }
     for (int i=(col+1); i<n; i++)
     {
         if (maze[row][i] == '#')
            break;
         else if (maze[row][i]=='1')
              return true;
     }
     for (int i=(col-1); i>=0; i--)
     {
         if (maze[row][i] == '#')
            break;
         else if (maze[row][i]=='3')
              return true;
     }
     return false;
}

void reverse()
{
     for (int i=0; i<cnt; i++)
     {
         int temp = (maze[turrets[i][0]][turrets[i][1]] - '0');
         temp--;
         if (temp==0)
            temp = 4;
         maze[turrets[i][0]][turrets[i][1]] = (temp+'0');
     }
}

void findMin(int row, int col, int cur)
{
     if (!first)
     {
        if (visited[row][col][cur%4]==1)
           return;
        visited[row][col][cur%4] = 1;
        for (int i=0; i<cnt; i++)
        {
            int temp = (maze[turrets[i][0]][turrets[i][1]]-'0');
            temp=temp%4;
            temp++;
            maze[turrets[i][0]][turrets[i][1]] = (temp + '0');
        }           
        if (die(row, col))
        {
                  reverse();
                  return;
        }
     }
     first = false;
     if (maze[row][col]=='G')
     {
                            if (cur < minSteps)
                               minSteps = cur;
                            reverse();
                            return;
     }
     if (row<(m-1) && maze[row+1][col]!='#' && !(maze[row+1][col]-'0'>0 && maze[row+1][col]-'0'<5))
        findMin(row+1, col, cur+1);
     if (col<(n-1) && maze[row][col+1]!='#' && !(maze[row][col+1]-'0'>0 && maze[row][col+1]-'0'<5))
        findMin(row, col+1, cur+1);
     if (row>0 && maze[row-1][col]!='#' && !(maze[row-1][col]-'0'>0 && maze[row-1][col]-'0'<5))
        findMin(row-1, col, cur+1);
     //if (cur==1)
     //   cout<<maze[0][5]<<endl;
     if (col>0 && maze[row][col-1]!='#' && !(maze[row][col-1]-'0'>0 && maze[row][col-1]-'0'<5))
        findMin(row, col-1, cur+1);
     reverse();   
}

void makeZero()
{
     for (int i=0; i<m; i++)
     {
         for (int j=0; j<n; j++)
         {
             for (int k=0; k<4; k++)
                 visited[i][j][k] = 0;
         }
     }
}

int main()
{
    ifstream fin("laser_maze.txt");
    int t, sr, sc;
    //cin>>t;
    fin>>t;
    for (int i=0; i<t; i++)
    {
        cnt = 0;
        minSteps = 1000000000;
        //cin>>m>>n;
        fin>>m>>n;
        for (int j=0; j<m; j++)
        {
            for (int k=0; k<n; k++)
            {
                //cin>>maze[j][k];
                fin>>maze[j][k];
                if (maze[j][k] == '<' || maze[j][k] == '>' || maze[j][k] == '^' || maze[j][k] == 'v')
                {
                               turrets[cnt][0] = j;
                               turrets[cnt][1] = k;
                               cnt++;
                               if (maze[j][k]=='<')
                                  maze[j][k] = '1';
                               else if (maze[j][k]=='v')
                                    maze[j][k] = '4';
                               else if (maze[j][k]=='>')
                                    maze[j][k] = '3';
                               else
                                   maze[j][k] = '2';
                }
                else if (maze[j][k]=='S')
                {
                     sr = j;
                     sc = k;
                }
                else if (maze[j][k]=='G')
                {
                     gr = j;
                     gc = k;
                }
            }
        }
        //cout<<maze[0][4]<<endl;
        makeZero();
        first = true;
        findMin(sr, sc, 0);
        cout<<"Case #"<<i+1<<": ";
        if (minSteps==1000000000)
           cout<<"impossible";
        else
            cout<<minSteps;
        if (i!=(t-1))
           cout<<endl;
    }
    system("pause");
    return 0;
}

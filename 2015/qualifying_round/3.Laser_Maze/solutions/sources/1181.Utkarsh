//Author: Utkarsh $axena
#include<bits/stdc++.h>
#include<iostream>
using namespace std;
#define fre 	freopen("0.in.txt","r",stdin),freopen("0.out","w",stdout)
#define abs(x) ((x)>0?(x):-(x))
#define M 1000000007
#define lld signed long long int
#define pp pop_back()
#define ps(x) push_back(x)
#define mpa make_pair
#define pii pair<int,int>
#define fi first
#define se second
#define scan(x) scanf("%d",&x)
#define print(x) printf("%d\n",x)
#define scanll(x) scanf("%lld",&x)
#define printll(x) printf("%lld\n",x)
#define boost ios_base::sync_with_stdio(0)
//vector<int> g[2*100000+5];;
struct ss
{
	int x,y,mv;//mve %4
	int step=0;
	ss(){}
	ss(int xx,int yy,int mvv,int s)
	{
		x=xx;
		y=yy;
		mv=mvv;
		step=s;
	}
};
struct OrderBy
{
    bool operator() (struct ss a, struct ss b) { return a.step >b.step; }
};
priority_queue<struct ss, std::vector<struct ss >, OrderBy> q;
int wall[104][104][5],visited[101][102][5],n,m;
char d[102][102];
void fill_wall(int x,int y,int mv)
{
	for(int i=x-1;i>=1 and wall[i][y][1]!=2;--i)
		wall[i][y][mv]=1;
	mv=mv%4+1;
	for(int i=y+1;i<=m and wall[x][i][1]!=2;++i)
		wall[x][i][mv]=1;
	mv=mv%4+1;
	for(int i=x+1;i<=n and wall[i][y][1]!=2;++i)
		wall[i][y][mv]=1;
	mv=mv%4+1;
	for(int i=y-1;i>=1 and wall[x][i][1]!=2;--i)
		wall[x][i][mv]=1;

}
int main()
{
	fre;
	int sx,sy,gx,gy,t,c=0;
	cin>>t;
	while(t--)
	{
		++c;
		cin>>n>>m;
		printf("Case #%d: ",c);
		for(int i=1;i<=n;++i)
			for(int j=1;j<=m;++j)
			{
				wall[i][j][1]=wall[i][j][2]=wall[i][j][3]=wall[i][j][4]=0;
				visited[i][j][1]=visited[i][j][2]=visited[i][j][3]=visited[i][j][4]=0;
			}

		for(int i=1;i<=n;++i)
		{
			for(int j=1;j<=m;++j)
			{
				cin>>d[i][j];
				if(d[i][j]=='S')
				{
					sx=i;sy=j;
				}
				if(d[i][j]=='G')
				{
					gx=i;gy=j;
				}
				//scanf("%c",&d[i][j]);
				if(d[i][j]!='.' and d[i][j]!='S' and d[i][j]!='G' )
					wall[i][j][1]=wall[i][j][2]=wall[i][j][3]=wall[i][j][4]=2;
			}
		}

		for(int i=1;i<=n;++i)
		{
			for(int j=1;j<=m;++j)
			{
				switch(d[i][j])
				{
				case '<':
					fill_wall(i,j,2);

					break;
				case '^':
					fill_wall(i,j,1);
					break;
				case '>':
					fill_wall(i,j,4);
					break;
				case 'v':
					fill_wall(i,j,3);
				default:
					break;
				}
			}
		}

		q.push(ss(sx,sy,1,0));
		while(not q.empty())
		{
			ss temp=q.top();
			q.pop();
			int x=temp.x;
			int y=temp.y;
			int mv=temp.mv;
			if(temp.step!=0)
				if(visited[x][y][mv] or wall[x][y][mv]!=0 or y>m or y<1 or x>n or x<1)continue;


			visited[x][y][mv]=1;
			if(x==gx and y==gy)
			{
				cout<<temp.step<<endl;
				goto hell;
			}

			q.push(ss(x+1,y,mv%4+1,temp.step+1));
			q.push(ss(x-1,y,mv%4+1,temp.step+1));
			q.push(ss(x,y+1,mv%4+1,temp.step+1));
			q.push(ss(x,y-1,mv%4+1,temp.step+1));
		}
		cout<<"impossible\n";
		hell:;
		while(not q.empty())q.pop();
	}
}

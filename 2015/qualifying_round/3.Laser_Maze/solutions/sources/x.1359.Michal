#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cctype>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std; 

#define DEBUG(x) cerr << '>' << #x << ':' << x << endl;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }

const int INF = 1<<29;
typedef long long ll;

inline int two(int n) { return 1 << n; }
inline int test(int n, int b) { return n & two(b); }
inline void set_bit(int & n, int b) { n |= two(b); }
inline void unset_bit(int & n, int b) { n &= ~two(b); }
inline int last_bit(int n) { return n & (-n); }
inline int ones(int n) { int res = 0; while(n && ++res) n-=n&(-n); return res; }

template<class T> void chmax(T & a, const T & b) { a = max(a, b); }
template<class T> void chmin(T & a, const T & b) { a = min(a, b); }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

const int MAX = 147;
const int dr[] = {-1,0,1,0}, dc[] = {0,1,0,-1};
int R, C;
char maze[MAX][MAX];
bool is_safe[MAX][MAX][4];
int dist[MAX][MAX][4];

bool check(int r, int c) { return r >= 0 && r < R && c >= 0 && c < C && maze[r][c] == '.'; }

struct rec
{
	int r, c, d;
	rec(int _r=0, int _c=0, int _d=0): r(_r), c(_c), d(_d) {}
};

void Solve(int tc)
{
	scanf("%d%d", &R, &C);
	REP(i, R) scanf("%s", maze[i]);
	memset(is_safe, true, sizeof(is_safe));

	int sr=-1, sc=-1, er=-1, ec=-1;
	REP(i, R) REP(j, C)
	{
		if (maze[i][j] == 'S')
		{
			sr = i;
			sc = j;
			maze[i][j] = '.';
		}
		else if (maze[i][j] == 'G')
		{
			er = i;
			ec = j;
			maze[i][j] = '.';
		}
		else if (maze[i][j] != '.' && maze[i][j] != '#')
		{
			int dir;
			if (maze[i][j] == '<')
				dir = 3;
			else if (maze[i][j] == '>')
				dir = 1;
			else if (maze[i][j] == '^')
				dir = 0;
			else if (maze[i][j] ==  'v')
				dir = 2;
			else
				DEBUG("AAAAAAAAAAAAAAAAAAAAAAAA");
			REP(d, 4)
			{
				int r = i, c = j;
				do {
					is_safe[r][c][d] = false;
					r += dr[(dir+d)&3];
					c += dc[(dir+d)&3];
				} while (check(r, c));
			}
		}
	}

	printf("Case #%d: ", tc);
	memset(dist, -1, sizeof(dist));
	queue<rec> manage;
	dist[sr][sc][0] = 0;
	manage.push(rec(sr, sc, 0));
	
	while (!manage.empty())
	{
		int r = manage.front().r, c = manage.front().c, cost = dist[r][c][manage.front().d];
		manage.pop();

		REP(d, 4)
		{
			int rr = r+dr[d], cc = c+dc[d], cost2 = cost+1;
			if (check(rr, cc) && is_safe[rr][cc][cost2&3] && dist[rr][cc][cost2&3] == -1)
			{
				if (rr == er && cc == ec)
				{
					printf("%d\n", cost2);
					return;
				}
				dist[rr][cc][cost2&3] = cost2;
				manage.push(rec(rr, cc, cost2&3));
			}
		}
	}
	printf("impossible\n");
}

int main()
{
	int T;
	scanf("%d\n", &T);
	FOR(tc,1,T) Solve(tc);

	return 0;
}
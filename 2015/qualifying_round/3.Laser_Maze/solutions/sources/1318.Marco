#include<bits/stdc++.h>
#define pb(x) push_back(x)
#define all(x) x.begin(), x.end()
#define cout2(x, y) cout << x << " " << y <<  endl
#define N 104

using namespace std;

char T[N][N];
bool forb[N][N][4];

int mapa[130];
int n, m;

int dx[] = {0, 1, 0, -1};
int dy[] = {-1, 0, 1, 0};

bool isTower(char c){ return (c == '^') || (c == 'v') || (c == '>') || (c == '<'); }

bool valid(int fil, int col){
	
	if(fil < 0 || col < 0)return false;
	if(fil >= n || col >= m)return false;
	return T[fil][col] != '#';
}

struct node{
	
	int fil, col, t;
	node(int _fil, int _col, int _t){ fil = _fil; col = _col; t = _t; }
	node(){}		
};


int D[N][N][4];
bool vis[N][N][4];

int BFS(node S, node T){
	
	memset(D, -1, sizeof D);
	memset(vis, false, sizeof vis);
	
	D[S.fil][S.col][0] = 0;
	
	queue<node>Q;
	Q.push(S);
	
	while(!Q.empty()){
		
		node u = Q.front();
		Q.pop();
		
		if(vis[u.fil][u.col][u.t])continue;
		vis[u.fil][u.col][u.t] = true;
		
		if(u.fil == T.fil && u.col == T.col)
			return D[u.fil][u.col][u.t];
		
		for(int i = 0; i < 4; i++){
			
			int fil = u.fil + dy[i];
			int col = u.col + dx[i];
			int t = (u.t + 1)%4;

			if(!valid(fil, col) || forb[fil][col][t])continue;
			
			if(D[fil][col][t] == -1){
				
				D[fil][col][t] = D[u.fil][u.col][u.t] + 1;
				Q.push(node(fil, col, t));
			}
		}	
	}
	
	return -1;
}


int main()
{

	int tc = 0, caso = 1;
	scanf("%d", &tc);
	
	mapa['^'] = 0; mapa['>'] = 1;
	mapa['v'] = 2; mapa['<'] = 3;
	
	while(tc--)
	{
		scanf("%d%d", &n, &m);
		
		for(int i = 0; i < n; i++)
			scanf("%s", T[i]);

		node source, target;
		memset(forb, false, sizeof forb);
		
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				
				if(T[i][j] == 'S')source = node(i, j, 0);
				if(T[i][j] == 'G')target = node(i, j, 0);
				
				if(!isTower(T[i][j]))continue;
				
				int id = mapa[T[i][j]];
				for(int k = 0; k < 4; k++){
					
					int fil = i;
					int col = j;
					int dir = (id + k)%4;
					
					while(valid(fil, col)){
						
						forb[fil][col][k] = true;
						if(!(fil == i && col == j) && isTower(T[fil][col]))break;
						
						fil += dy[dir];
						col += dx[dir];

					}
					
				}
			}
		}
		
		int ans = BFS(source, target);
		
		if(ans < 0)printf("Case #%d: impossible\n", caso++);
		else printf("Case #%d: %d\n", caso++, ans);

	}
}




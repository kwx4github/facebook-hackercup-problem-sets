#include <algorithm>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <sstream>
#include <functional>
#include <map>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <list>
#include <numeric>
using namespace std;
const double PI = 3.14159265358979323846;
const double EPS = 1e-12;
const int INF = 1<<25;
typedef pair<int,int> P;
typedef long long ll;
typedef unsigned long long ull;

int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
int dist[100][100][2];
int h, w;
string g[100];
bool g2[100][100][4];
bool vali(int a, int b){
	return 0<=a&&a<h&&0<=b&&b<w;
}
int main(){
	int T;
	cin>>T;
	for(int C = 1; C <= T; C++){
		memset(g2, 0, sizeof(g2));
		for(int i = 0; i < 100; i++)
			for(int j = 0; j < 100; j++)
				for(int k = 0; k < 2; k++)
					dist[i][j][k] = INF;
		cin>>h>>w;
		for(int i = 0; i < h; i++) cin>>g[i];
		int sx, sy, gx, gy;
		for(int i = 0; i < h; i++){
			for(int j = 0; j < w; j++){
				if(g[i][j]=='S'){sx=i; sy=j; g[i][j]='.';}
				if(g[i][j]=='G'){gx=i; gy=j; g[i][j]='.';}
			}
		}
		for(int i = 0; i < h; i++){
			for(int j = 0; j < w; j++){
				int dr = -1;
				if(g[i][j]=='^') dr = 0;
				if(g[i][j]=='>') dr = 1;
				if(g[i][j]=='v') dr = 2;
				if(g[i][j]=='<') dr = 3;
				if(dr<0) continue;
				for(int k = 0; k < 4; k++){
					int r = (dr+k)%4;
					int x = i+dx[r], y = j+dy[r];
					while(vali(x, y) && g[x][y]=='.'){
						g2[x][y][k] = 1;
						x += dx[r];
						y += dy[r];
					}
				}
			}
		}
		queue<pair<P, int> > q;
		q.push(make_pair(P(sx, sy), 0));
		dist[sx][sy][0] = 0;
		while(!q.empty()){
			pair<P, int> p = q.front(); q.pop();
			int px = p.first.first, py = p.first.second;
			int t = dist[px][py][p.second]+1, t2 = 1&(t>>1);
			for(int i = 0; i < 4; i++){
				int x = px+dx[i], y = py+dy[i];
				if(!vali(x, y) || g[x][y]!='.' || dist[x][y][t2]<=t || g2[x][y][t&3]) continue;
				dist[x][y][t2] = t;
				q.push(make_pair(P(x, y), t2));
			}
		}
		int res = min(dist[gx][gy][0], dist[gx][gy][1]);
		printf("Case #%d: ", C);
		if(res==INF) puts("impossible");
		else printf("%d\n", res);
	}

	return 0;
}

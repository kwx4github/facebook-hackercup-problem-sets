#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

#ifdef ONLINE_JUDGE
#define OJ 1
#else
#define OJ 0
#endif

#define dd				double
#define ll 				long long
#define pb 				push_back
#define mp 				make_pair
#define X				first
#define Y				second
#define forn( i, n ) 	for( ll i = 0; i < (ll) (n); i ++ )
#define endl 			'\n'

#define TIMESTAMP fprintf(stderr, "Execution time: %.3lf s.\n", (double)clock()/CLOCKS_PER_SEC)

struct __s { __s() {
		//srand( time( NULL ) );
		freopen( "laser_maze.in", "r", stdin ); freopen( "laser_maze.out", "w", stdout );
		if( OJ ) { ios_base::Init i; cin.sync_with_stdio( 0 ); cin.tie( 0 ); }
	} ~__s() {
		if( !OJ ) TIMESTAMP;
		ll n;
		cin >> n;
	}
} __S;

ll t;
ll m, n;
string s[111];
string c[4][111];
pair< ll, ll > start, finish;
ll d[4][2] = {
    { 0, 1 },
    { 1, 0 },
    { 0, -1 },
    { -1, 0 }
};
bool u[4][111][111];
ll ans;

void dfs( ll x, ll y, ll res ) {
    u[res % 4][x][y] = true;
    if( finish == mp( x, y ) )
        ans = min( ans, res );
    res ++;
    forn( i, 4 ) {
        ll xx = x + d[i][0], yy = y + d[i][1];
        if( 0 <= xx && xx < m && 0 <= yy && yy < n && !u[res % 4][xx][yy] && c[res % 4][xx][yy] == '.' )
            dfs( xx, yy, res );
    }
}

int main( void ) {
    cin >> t;
    forn( _, t ) {
        cin >> m >> n;
        forn( i, m ) {
            cin >> s[i];
        }
        vector< pair< ll, ll > > laser;
        vector< ll > laser2;
        forn( i, m ) {
            forn( j, n ) {
                if( s[i][j] == '>' || s[i][j] == '<' || s[i][j] == '^' || s[i][j] == 'v' )
                    laser.pb( mp( i, j ) ), laser2.pb( ( s[i][j] == '>' ? 0 : s[i][j] == 'v' ? 1 : s[i][j] == '<' ? 2 : 3 ) ), s[i][j] = '#';
                else if( s[i][j] == 'S' )
                    start = mp( i, j ), s[i][j] = '.';
                else if( s[i][j] == 'G' )
                    finish = mp( i, j ), s[i][j] = '.';
            }
        }
        forn( k, 4 ) {
            forn( i, m ) {
                c[k][i] = s[i];
                forn( j, n ) {
                    u[k][i][j] = false;
                }
            }
            forn( i, laser.size() ) {
                ll x = laser[i].X + d[laser2[i]][0], y = laser[i].Y + d[laser2[i]][1];
                while( 0 <= x && x < m && 0 <= y && y < n && s[x][y] == '.' ) {
                    c[k][x][y] = '#';
                    x += d[laser2[i]][0];
                    y += d[laser2[i]][1];
                }
                laser2[i] = ( laser2[i] + 1 ) % 4;
            }
        }
        ans = 1123456789123456789LL;
        dfs( start.X, start.Y, 0 );
        cout << "Case #" << _ + 1 << ": ";
        if( ans == 1123456789123456789LL )
            cout << "impossible";
        else
            cout << ans;
        cout << endl;
    }
	return 0;
}


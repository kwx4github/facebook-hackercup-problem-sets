#include<stdio.h>
#include<queue>
using namespace std;
queue<int>que;

int dir[300],vst[105][105][5],m,n,prs,h[] = {0,0,1,-1}, v[] = {1,-1,0,0},t,i,dist;
char st[105][105];

bool isAlive(int x, int y, int dist)
{
    int i;
    for(i=y+1; i<m ; i++)
    if(st[x][i] == '#')
    break;
    else if(dir[st[x][i]]>=80)
    {
        if((dir[st[x][i]]-80+dist)%4 == 3)
        return 0;
        else
        break;
    }

    for(i=y-1; i>=0 ; i--)
    if(st[x][i] == '#')
    break;
    else if(dir[st[x][i]]>=80)
    {
        if((dir[st[x][i]]-80+dist)%4 == 1)
        return 0;
        else
        break;
    }

    for(i=x+1; i<n ; i++)
    if(st[i][y] == '#')
    break;
    else if(dir[st[i][y]]>=80)
    {
        if((dir[st[i][y]]-80+dist)%4 == 0)
        return 0;
        else
        break;
    }

    for(i=x-1; i>=0 ; i--)
    if(st[i][y] == '#')
    break;
    else if(dir[st[i][y]]>=80)
    {
        if((dir[st[i][y]]-80+dist)%4 == 2)
        return 0;
        else
        break;
    }
    return 1;
}

int bfs()
{
    int i,j,k,x,y,dist,p,q;
    for(i=0; i<n; i++)
    for(j=0; j<m; j++)
    if(st[i][j] == 'S')
    {
        vst[i][j][0] = prs;
        que.push(i);
        que.push(j);
        que.push(0);
        break;
    }

    while(!que.empty())
    {
        x = que.front();
        que.pop();
        y = que.front();
        que.pop();
        dist = que.front() + 1;
        que.pop();

        for(i=0; i<4; i++)
        {
            p = x + h[i];
            q = y + v[i];

            if(p>=n || p<0 || q>=m || q<0 || st[p][q] == '#' || dir[st[p][q]]>=80)
            continue;

            if(vst[p][q][dist%4] != prs)
            {
                vst[p][q][dist%4] = prs;

                if(!isAlive(p,q,dist))
                continue;

                if(st[p][q] == 'G')
                {
                    while(!que.empty())
                    que.pop();
                    return dist;
                }

                que.push(p);
                que.push(q);
                que.push(dist);
            }
        }
    }
    return -1;
}

int main()
{
    //freopen("inc.txt","r",stdin);
    //freopen("outc.txt","w",stdout);
    dir['^'] = 80;
    dir['>'] = 81;
    dir['v'] = 82;
    dir['<'] = 83;

    scanf("%d",&t);

    while(t--)
    {
        scanf("%d%d", &n, &m);
        for(i=0; i<n; i++)
        scanf("%s", &st[i]);

        prs++;
        dist = bfs();
        if(dist == -1)
        printf("Case #%d: impossible\n",prs);
        else
        printf("Case #%d: %d\n",prs,dist);
    }
    return 0;
}

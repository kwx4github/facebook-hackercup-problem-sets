#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <fstream>
#include <queue>
#include <complex>

#define INF 100000000
#define EPS 1e-9
#define Pi acos(-1)

using namespace std;

typedef long long ll;

#define MAX_T 100
#define MAX_N 101
#define MAX_M 101

int T;
int N, M;

char maze[MAX_N][MAX_M];
char r_maze[4][MAX_N][MAX_M];
int dp[4][MAX_N][MAX_M];

int sx, sy, gx, gy;

int dx[] = { 1, 0, -1, 0 };
int dy[] = { 0, 1, 0, -1 };

typedef pair<int, int> P;

//ñ¿òHÇé¿ç€Ç…âÇ≠Å@ï‘ÇËílÇÕç≈è¨éËêîÅ@Å|ÇPÇÕçUó™ïsâ¬î\
int solve(){

	queue<P> que;
	queue<int> rNum;
	que.push(P(sx, sy));
	rNum.push(0);

	memset(dp, 0, sizeof(dp));

	while (que.size()){
		
		P p = que.front();
		int r = rNum.front();
		que.pop();
		rNum.pop();

		int x = p.first;
		int y = p.second;

		if (gx == x && gy == y){
			return dp[r][y][x];
		}

		int nr = (r + 1) % 4;

		for (int i = 0; i < 4; i++){
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (0 <= nx && nx < M && 0 <= ny && ny < N && maze[ny][nx] != '#' && r_maze[nr][ny][nx] != 'R'){
				if (dp[nr][ny][nx] == 0){
					dp[nr][ny][nx] = dp[r][y][x] + 1;
					que.push(P(nx, ny));
					rNum.push(nr);
				}
			}
		}

	}

	return -1;

}

int main(){

	ifstream ifs("C:\\C\\pra\\Debug\\input.txt");
	ofstream ofs("C:\\C\\pra\\Debug\\output.txt");

	ifs >> T;

	for (int num = 0; num < T; num++){

		//ì¸óÕÇ∆èâä˙âª
		ifs >> N >> M;
		memset(r_maze, ' ', sizeof(r_maze));
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				ifs >> maze[i][j];
				if (maze[i][j] == 'S'){
					sx = j;
					sy = i;
				}
				if (maze[i][j] == 'G'){
					gx = j;
					gy = i;
				}
				if (maze[i][j] == '<'){
					maze[i][j] = '2';
				}
				if (maze[i][j] == '>'){
					maze[i][j] = '0';
				}
				if (maze[i][j] == '^'){
					maze[i][j] = '3';
				}
				if (maze[i][j] == 'v'){
					maze[i][j] = '1';
				}
			}
		}

		//ÉåÅ[ÉUÅ[ñ¿òHÇÃê∂ê¨
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				if (!('0' <= maze[i][j] && maze[i][j] <= '3'))
					continue;
				for (int d = 0; d < 4; d++){
					int dir = (d + maze[i][j] - '0') % 4;
					r_maze[d][i][j] = 'R';
					for (int n = 1; n < MAX_N; n++){
						int nx = j + n*dx[dir];
						int ny = i + n*dy[dir];
						if (0 <= nx && nx < M && 0 <= ny && ny < N && (maze[ny][nx] == '.' || maze[ny][nx] == 'S' || maze[ny][nx] == 'G')){
							r_maze[d][ny][nx] = 'R';
						}
						else{
							break;
						}
					}
				}
			}
		}

		//ñ¿òHÇé¿ç€Ç…âÇ≠
		int ans = solve();
		
		if (ans == -1){
			ofs << "Case #" << num+1 << ": impossible" << endl;
		}
		else{
			ofs << "Case #" << num+1 << ": " << ans << endl;
		}
		

	}

	ifs.close();
	ofs.close();

	return 0;

}
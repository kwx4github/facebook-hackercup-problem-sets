#include <iostream>
#include <queue>
#include <fstream>
using namespace std;
const int INF=1000000000;
const int N=104;
struct elem
{
	int x;
	int y;
	int time;
};
queue<elem> q;
elem p1,p2,p3;
bool busy[5][N][N];
bool mark[5][N][N];
int n,m;
char a[N][N];
int px[5]={0,1,-1,0,0};
int py[5]={0,0,0,1,-1};
void fillBusy(int x, int y, int dirx, int diry, int time)
{
	x=x+dirx;
	y=y+diry;
	if(x<1 || y<1 || x>n || y>m || a[x][y]!='.')
		return;
	busy[time][x][y]=true;
	fillBusy(x+dirx,y+diry,dirx,diry,time);
}
void makeFalse()
{
	for(int t=0;t<=3;++t)
		for(int i=0;i<=N;++i)
			for(int j=0;j<=N;++j)
			{
				mark[t][i][j]=false;
				busy[t][i][j]=false;
			}
}
int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int t,k,x1,y1,x2,y2;
	cin>>t;
	for(k=1;k<=t;++k)
	{
		int ans=INF;
		cin>>n>>m;
		makeFalse();
		for(int i=1;i<=n;++i)
			for(int j=1;j<=m;++j)
				cin>>a[i][j];
		for(int i=1;i<=n;++i)
			for(int j=1;j<=m;++j)
			{
				if(a[i][j]=='>')
				{
					fillBusy(i,j,0,1,0);
					fillBusy(i,j,1,0,1);
					fillBusy(i,j,0,-1,2);
					fillBusy(i,j,-1,0,3);
				}
				if(a[i][j]=='v')
				{
					fillBusy(i,j,1,0,0);
					fillBusy(i,j,0,-1,1);
					fillBusy(i,j,-1,0,2);
					fillBusy(i,j,0,1,3);
				}
				if(a[i][j]=='<')
				{
					fillBusy(i,j,0,-1,0);
					fillBusy(i,j,-1,0,1);
					fillBusy(i,j,0,1,2);
					fillBusy(i,j,1,0,3);
				}
				if(a[i][j]=='^')
				{
					fillBusy(i,j,-1,0,0);
					fillBusy(i,j,0,1,1);
					fillBusy(i,j,1,0,2);
					fillBusy(i,j,0,-1,3);
				}
				if(a[i][j]=='S')
				{
					x1=i;
					y1=j;
					a[i][j]='.';
				}
				if(a[i][j]=='G')
				{
					x2=i;
					y2=j;
					a[i][j]='.';
				}
			}
		p1.time=0;
		p1.x=x1;
		p1.y=y1;
		q.push(p1);
		while(!q.empty())
		{
			p1=q.front();
			q.pop();
			if(p1.x==x2 && p1.y==y2)
			{
				ans=p1.time;
				break;
			}
			int x=p1.x;
			int y=p1.y;
			int t=p1.time+1;
			t=t%4;
			for(int z=1;z<=4;++z)
			{

				int xx=x+px[z];
				int yy=y+py[z];
				if(xx>0 && yy>0 && xx<=n && yy<=m && a[xx][yy]=='.' && !busy[t][xx][yy] && !mark[t][xx][yy])
				{
					mark[t][xx][yy]=true;
					p2.x=xx;
					p2.y=yy;
					p2.time=p1.time+1;
					q.push(p2);
				}
			}
		}
		if(ans!=INF)
			cout<<"Case #"<<k<<": "<<ans<<endl;
		else
			cout<<"Case #"<<k<<": impossible"<<endl;
		
	}
}
#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <cstring>
#include <string>
using namespace std;

typedef vector<string> vc;
typedef vector<vc> vvc;
typedef vector<vector<int> > vvi;
typedef pair<int, int> ii;
vc graph;
ii start;
ii goal;
int steps = 0, n, m, done = 0;
void interpreter()
{
	for(int i = 0, l = int(graph.size());i < l;i++)
	{
		for(int x = 0, y = int(graph[i].size());x < y;x++)
		{
			switch(graph[i][x])
			{
				case '.':
					graph[i][x] = 'E';
					break;
				case '#':
					graph[i][x] = 'W';
					break;
				case 'S':
					start.first = i;
					start.second = x;
					break;
				case 'G':
					goal.first = i;
					goal.second = x;
					break;
				case '<':
					graph[i][x] = 'L';
					break;
				case '>':
					graph[i][x] = 'R';
					break;
				case '^':
					graph[i][x] = 'U';
					break;
				default:
					break;
			}
		}
	}
}

bool allowance(int i, int j) //You asshole laser
{
	if(graph[i][j] == 'W')
	{
		return false;
	}
	for(int a = 0;a <= i;a++)
	{
		if(graph[a][j] == 'V' && steps % 4 == 0)
		{
			return false;
		}
		else if(graph[a][j] == '<' && steps % 4 == 3)
			return false;
		else if(graph[a][j] == '^' && steps % 4 == 2)
			return false;
		else if(graph[a][j] == '>' && steps % 4 == 1)
			return false;
	}
	for(int a = i + 1;a < n;a++)
	{
		if(graph[a][j] == '^' && steps % 4 == 0)
		{
			return false;
		}
		else if(graph[a][j] == '>' && steps % 4 == 3)
			return false;
		else if(graph[a][j] == 'V' && steps % 4 == 2)
			return false;
		else if(graph[a][j] == '<' && steps % 4 == 1)
			return false;
	}
	for(int a = 0;a <= j;a++)
	{
		if(graph[i][a] == '>' && steps % 4 == 0)
		{
			return false;
		}
		else if(graph[i][a] == 'V' && steps % 4 == 3)
			return false;
		else if(graph[i][a] == '<' && steps % 4 == 2)
			return false;
		else if(graph[i][a] == '^' && steps % 4 == 1)
			return false;
	}
	for(int a = j + 1;a <= m;a++)
	{
		if(graph[i][a] == '<' && steps % 4 == 0)
		{
			return false;
		}
		else if(graph[i][a] == '^' && steps % 4 == 3)
			return false;
		else if(graph[i][a] == '>' && steps % 4 == 2)
			return false;
		else if(graph[i][a] == 'V' && steps % 4 == 1)
			return false;
	}
	return true;
}

int main(void)
{
	int t;
	scanf("%d", &t);
	for(int rep = 1;rep <= t;rep++)
	{
		scanf("%d%d", &n, &m);
		vvi dist(n, vector<int>(m, -1));
		graph.clear();
		graph.resize(n);
		for(int i = 0;i < n;i++)
		{
			getline(cin, graph[i]);
		}
		interpreter();
		dist[start.first][start.second] = 0;
		bool checked = false;
		if(allowance(start.first, start.second))
		{
			queue<ii> Q;
			Q.push(ii(start.first, start.second));
			while(!Q.empty())
			{
				ii current = Q.front();
				Q.pop();
				steps = dist[current.first][current.second] + 1;
				if(current.first == goal.first && current.second == goal.second)
				{
					checked = true;
					break;
				}
				else 
				{
					if(dist[current.first - 1][current.second] == -1 && allowance(current.first - 1, current.second))
					{
						Q.push(ii(current.first - 1, current.second));
						dist[current.first - 1][current.second] = dist[current.first][current.second] + 1;
					}
					if(dist[current.first + 1][current.second] == -1 && allowance(current.first + 1, current.second))
					{
						Q.push(ii(current.first + 1, current.second));
						dist[current.first + 1][current.second] = dist[current.first][current.second] + 1;
					}
					if(dist[current.first][current.second - 1] == -1 && allowance(current.first, current.second - 1))
					{
						Q.push(ii(current.first, current.second - 1));
						dist[current.first][current.second - 1] = dist[current.first][current.second] + 1;
					}
					if(dist[current.first][current.second + 1] == -1 && allowance(current.first, current.second + 1))
					{
						Q.push(ii(current.first, current.second + 1));
						dist[current.first][current.second + 1] = dist[current.first][current.second] + 1;
					}
				}
			}
		}

		if(checked == false)
			printf("Case #%d: impossible\n", rep);
		else
			printf("Case #%d: %d\n", rep, dist[goal.first][goal.second]);
	}
}
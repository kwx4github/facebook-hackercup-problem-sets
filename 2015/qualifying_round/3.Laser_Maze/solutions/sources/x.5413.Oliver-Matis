#include<iostream>
#include<string>
#include<vector>
#define f first
#define s second
#define mp make_pair
using namespace std;

string laser = "^>v<";
pair<int, int> move[4] = { mp(-1, 0), mp(0, 1), mp(1, 0), mp(0, -1) }, spos, epos;

char maze[4][101][101];
bool explr[4][101][101];

int t, n, m;



pair<int, int> operator+(pair<int, int> l, pair<int, int> r) {
	return mp(l.f + r.f  ,   l.s + r.s);
}

bool valid(pair<int, int> l) {
	return l.f >= 0 && l.f < n && l.s >= 0 && l.s < m;
}



void mazeproc(char cmaze[101][101]) {
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			if(laser.find(cmaze[i][j]) != -1) {
				int dir = laser.find(cmaze[i][j]);
				
				pair<int, int> cpos = mp(i, j) + move[dir];
				
				while(valid(cpos) && cmaze[cpos.f][cpos.s] == '.') {
					cmaze[cpos.f][cpos.s] = '#';
					
					cpos = cpos + move[dir];
				}
			}
}





//-------------------------------------------------------------------------------
//Main algorithm



int main() {
	cin.sync_with_stdio(false);
	cin >> t;
	
	
	
	for(int TCASE = 1; TCASE <= t; TCASE++) {
		cin >> n >> m;
		cout << "Case #" << TCASE << ": ";
		
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++) {
				cin >> maze[0][i][j];
				
				for(int k=0;k<4;k++)
					explr[k][i][j] = false;
				
				if(maze[0][i][j] == 'S')
					spos = mp(i, j), maze[0][i][j] = '.';
				if(maze[0][i][j] == 'G')
					epos = mp(i, j), maze[0][i][j] = '.';
					
				
				int dir = laser.find(maze[0][i][j]);
				
				if(dir == -1) {
					for(int k=1;k<4;k++)
						maze[k][i][j] = maze[0][i][j];
				}
				else
					for(int k=1;k<4;k++)
						maze[k][i][j] = laser[(dir + k) % 4];
			}
		
		for(int i=0;i<4;i++)
			mazeproc(maze[i]);
		
		
		
		int curind = 0;
		//format: ( (cost, maze index), (row, column) )
		vector<pair<pair<int, int>, pair<int, int> > > front;
		front.push_back(mp(mp(0, 0), spos ) );
		explr[0][spos.f][spos.s] = true;
		
		
		//BFS here
		
		while(curind < front.size()) {
			pair<pair<int, int>, pair<int, int> > cpos = front[curind], nextpos;
			
			if(cpos.s == epos) {
				cout << cpos.f.f << '\n';
				break;
			}
			
			
			for(int i=0;i<4;i++) {
				nextpos = mp(mp(cpos.f.f + 1, (cpos.f.s + 1) % 4) ,  cpos.s + move[i] );
				
				if(!valid(nextpos.s) || explr[nextpos.f.s][nextpos.s.f][nextpos.s.s]
									 || maze[nextpos.f.s][nextpos.s.f][nextpos.s.s] != '.')
					continue;
				
				explr[nextpos.f.s][nextpos.s.f][nextpos.s.s] = true;
				
				front.push_back(nextpos);
			}
			
			
			curind++;
		}
		
		
		if(curind == front.size())
			cout << "impossible\n";
	}
	
	return 0;
}






































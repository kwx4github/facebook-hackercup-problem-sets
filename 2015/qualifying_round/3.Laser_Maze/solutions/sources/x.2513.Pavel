#pragma comment(linker, "/STACK:128777216")

#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <map>
#include <set>
#include <iostream>
#include <functional>
#include <numeric>
#include <sstream>
#include <exception>
#include <cassert>

typedef long long i64;
typedef unsigned int u32;
using namespace std;

typedef vector<int> VI;

#define all(a) a.begin(),a.end()

template<class T>
int size(const T &a) {
    return int(a.size());
}

template<class T>
T abs(const T &a) {
    return (a < 0 ? -a : a);
}

template<class T>
T sqr(const T &a) {
    return a * a;
}

const double pi = acos(-1.0);

int mod = int(1e9 + 7.1);

inline int msum(int a, int b) {
    return (a + b < mod ? a + b : a + b - mod);
}

inline int mdiff(int a, int b) {
    return (a < b ? a - b + mod : a - b);
}

inline void madd(int &a, int b) {
    a = msum(a, b);
}

inline void msub(int &a, int b) {
    a = mdiff(a, b);
}

inline i64 mmul(int a, int b) {
    return i64(a) * b % mod;
}

struct Pos {
    int r, c;
    int dist;

    Pos(int r, int c, int dist) : r(r), c(c), dist(dist) {
    }
};


int main() {
#ifdef pperm
    freopen("input.txt", "r", stdin);
    //freopen("input.txt", "w", stdout);
    freopen("output.txt", "w", stdout);
#endif
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int T = 1;
    cin >> T;
    map<char, char> rotate = {{'^', '>'}, {'>', 'v'}, {'v', '<'}, {'<', '^'}};
    for (int iTest = 1; iTest <= T; ++iTest) {
        int n, m;
        cin >> n >> m;
        vector<string> a(n);
        for (string &s : a) {
            cin >> s;
        }
        vector<vector<vector<bool> > > is_empty(n, vector<vector<bool> >(m, vector<bool>(4, true)));
        int si = 0, sj = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                char ch = a[i][j];
                if (ch == '#') {
                    is_empty[i][j].assign(4, false);
                } else if (rotate.find(ch) != rotate.end()) {
                    for (int k = 0; k < 4; k++) {
                        int r = i, c = j;
                        ch = rotate[ch];
                        while (1) {
                            is_empty[r][c][k] = false;
                            bool g = true;
                            switch (ch) {
                                case '>':
                                    g = (++c) < m;
                                    break;
                                case '<':
                                    g = (--c) >= 0;
                                    break;
                                case '^':
                                    g = (--r) >= 0;
                                    break;
                                case 'v':
                                    g = (++r) < n;
                                    break;
                            }
                            if (!g) {
                                break;
                            }
                        }
                    }
                } else if (ch == 'S') {
                    si = i;
                    sj = j;
                }
            }
        }
        deque<Pos> queue;
        queue.push_back(Pos(si, sj, 0));
        int di[4] = {-1, 0, 1, 0};
        int dj[4] = {0, -1, 0, 1};
        int result = -1;
        while (!queue.empty()) {
            Pos p = queue.front();
            if (a[p.r][p.c] == 'G') {
                result = p.dist;
                break;
            }
            queue.pop_front();
            int k = p.dist & 3;
            for (int d = 0; d < 4; d++) {
                int r = p.r + di[d], c = p.c + dj[d];
                if (r >= 0 && c >= 0 && r < n && c < m && is_empty[r][c][k]) {
                    is_empty[r][c][k] = false;
                    queue.push_back(Pos(r, c, p.dist + 1));
                }
            }
        }
        cout << "Case #" << iTest << ": ";
        if (result == -1) {
            cout << "impossible";
        } else {
            cout << result;
        }
        cout << endl;
    }

#ifdef pperm
    flush(cout);
    cerr << endl << "Time: " << (clock() / double(CLOCKS_PER_SEC)) << endl;
#endif
    return 0;
}


#include <bits/stdc++.h>
using namespace std;

int t;
int m,n;
char c[105][105];
int num[105][105],step[105][105],times[105][105];

bool lasered(int x, int y, int z){
    if (x<1 || y<1 || x>m || y>n) return true;
    if (num[x][y]==-1) num[x][y]==15;
    return (num[x][y] & (1<<((z+1)%4))) > 0;
}

int main(){
    scanf("%d",&t);
    for (int tc=1;tc<=t;tc++){
        int ans = 0;
        scanf("%d %d",&m,&n);
        getchar();
        queue< pair<int,int> > Q;
        pair<int,int> finish;
        //memset(num,0,sizeof(num));

        for (int i=1;i<=m;i++){
            for (int j=1;j<=n;j++){
                scanf("%c",&c[i][j]);
                if (c[i][j]=='S'){ Q.push(make_pair(i,j)); num[i][j]=0; }
                else if (c[i][j]=='G'){ finish = make_pair(i,j); num[i][j]=0; }
                else if (c[i][j]=='.') num[i][j] = 0;
                else{
                    num[i][j] = -1;
                }
                step[i][j] = 0;
                times[i][j] = 0;
            }
            getchar();
        }
        for (int i=1;i<=m;i++){
            for (int j=1;j<=n;j++){
                if (c[i][j]=='^'){
                    for (int k=i-1;k>0 && num[k][j]!=-1;k--) num[k][j] += 1<<0;
                    for (int k=j+1;k<=n && num[i][k]!=-1;k++) num[i][k] += 1<<1;
                    for (int k=i+1;k<=m && num[k][j]!=-1;k--) num[k][j] += 1<<2;
                    for (int k=j-1;k>0 && num[i][k]!=-1;k--) num[i][k] += 1<<3;
                }
                if (c[i][j]=='>'){
                    for (int k=i-1;k>0 && num[k][j]!=-1;k--) num[k][j] += 1<<3;
                    for (int k=j+1;k<=n && num[i][k]!=-1;k++) num[i][k] += 1<<0;
                    for (int k=i+1;k<=m && num[k][j]!=-1;k--) num[k][j] += 1<<1;
                    for (int k=j-1;k>0 && num[i][k]!=-1;k--) num[i][k] += 1<<2;
                }
                if (c[i][j]=='v'){
                    for (int k=i-1;k>0 && num[k][j]!=-1;k--) num[k][j] += 1<<2;
                    for (int k=j+1;k<=n && num[i][k]!=-1;k++) num[i][k] += 1<<3;
                    for (int k=i+1;k<=m && num[k][j]!=-1;k--) num[k][j] += 1<<0;
                    for (int k=j-1;k>0 && num[i][k]!=-1;k--) num[i][k] += 1<<1;
                }
                if (c[i][j]=='<'){
                    for (int k=i-1;k>0 && num[k][j]!=-1;k--) num[k][j] += 1<<1;
                    for (int k=j+1;k<=n && num[i][k]!=-1;k++) num[i][k] += 1<<2;
                    for (int k=i+1;k<=m && num[k][j]!=-1;k--) num[k][j] += 1<<3;
                    for (int k=j-1;k>0 && num[i][k]!=-1;k--) num[i][k] += 1<<0;
                }
            }
        }
        /*for (int i=1;i<=m;i++){
            for (int j=1;j<=n;j++){
                printf("%d ",num[i][j]);
            }
            printf("\n");
        }*/
        while (!Q.empty()){
            pair<int,int> tmp = Q.front();
            Q.pop();
            int x = tmp.first;
            int y = tmp.second;
            if (x==finish.first && y==finish.second){ ans = step[x][y]; break; }
            bool a = !lasered(x-1,y,step[x][y]);
            bool b = !lasered(x,y+1,step[x][y]);
            bool c = !lasered(x+1,y,step[x][y]);
            bool d = !lasered(x,y-1,step[x][y]);
            //printf("%d %d %d %d\n",a,b,c,d);
            //bool e = !lasered(x,y,step[x][y]+1);
            if (a && times[x-1][y]<2){
                Q.push(make_pair(x-1,y));
                step[x-1][y] = step[x][y] + 1;
                times[x-1][y]++;
            }
            if (b && times[x][y+1]<2){
                Q.push(make_pair(x,y+1));
                step[x][y+1] = step[x][y] + 1;
                times[x][y+1]++;
            }
            if (c && times[x+1][y]<2){
                Q.push(make_pair(x+1,y));
                step[x+1][y] = step[x][y] + 1;
                times[x+1][y]++;
            }
            if (d && times[x][y-1]<2){
                Q.push(make_pair(x,y-1));
                step[x][y-1] = step[x][y] + 1;
                times[x][y-1]++;
            }
        }
        printf("Case #%d: ",tc);
        if (ans>0){
            printf("%d\n",ans);
        }else{
            printf("impossible\n");
        }

    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

int Min[101][101][4];
int shoots[101][101][4];
char maze[101][101];
int R , C ;
char s[111];
int x[555];
int si , sj , ei , ej ;
int ID = 0 ;
int di[]={0,-1,0,1};
int dj[]={-1,0,1,0};

int dijk(){
    memset(Min,63,sizeof(Min));
    queue< pair< pair<int,int>,pair<int,int> > >Q;
    Q.push(make_pair(make_pair(0,1),make_pair(si,sj)));
    while(!Q.empty()){
        int I = Q.front().second.first;
        int J = Q.front().second.second;
        int c = Q.front().first.first;
        int D = Q.front().first.second;
        D = (D+1)%4;
        Q.pop();
        for(int i = 0 ; i < 4 ; i++){
            int II = I + di[i];
            int JJ = J + dj[i];
            if(II < 0 || JJ < 0 || II >= R || JJ >= C || maze[II][JJ]!= '.' || shoots[II][JJ][D]==ID)
                continue;
            if(Min[II][JJ][D] > c+1){
                Min[II][JJ][D] = c+1;
                Q.push(make_pair(make_pair(c+1,D),make_pair(II,JJ)));
            }
        }
    }
    int M = (int)1e9 ;
    for(int i = 0 ; i < 4 ; i++){
        M = min(M , Min[ei][ej][i]);
    }
    if(M == (int)1e9){
        return -1;
    }
    return M ;
}


int main(){
    x['<'] = 1 ;
    x['v'] = 2 ;
    x['>'] = 3 ;
    x['^'] = 4 ;
    int t ;
    int cas = 0 ;
    scanf("%d",&t);
    while(t--){
        scanf("%d%d",&R,&C);
        ID++;
        for(int i = 0 ; i < R ; i++){
            scanf("%s",s);
            for(int j = 0 ; j < C ; j++){
                maze[i][j] = s[j];
                if(s[j] == 'S'){
                    si = i ;
                    sj = j ;
                    maze[i][j] = '.';
                }
                if(s[j] == 'G'){
                    ei = i ;
                    ej = j ;
                    maze[i][j] = '.';
                }
            }
        }
        for(int i = 0 ; i < R ; i++){
            for(int j = 0 ; j < C ; j++){
                if(maze[i][j]!='.'&&maze[i][j]!='#'){
                    int d = x[maze[i][j]] ;
                    for(int k = 0 ; k < 4 ; k++){
                        for(int l = 1; ;l++){
                            int II = i + di[k]*l;
                            int JJ = j + dj[k]*l;
                            if(II < 0 || JJ < 0 || II >= R || JJ >= C || maze[II][JJ]!='.')
                                break;
                            shoots[II][JJ][((d+k)%4)] = ID ;
                        }
                    }
                }
            }
        }
        int x = dijk();
        if(x != -1){
            printf("Case #%d: %d\n",++cas,x);
        }else {
            printf("Case #%d: impossible\n",++cas);
        }
    }
}

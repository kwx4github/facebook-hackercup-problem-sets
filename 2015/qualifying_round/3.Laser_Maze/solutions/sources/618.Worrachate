/*
  ------------------------- Hachiikung ---------------------------------
  ---------------------- Worrachate Bosri ------------------------------
  ------ Faculty of Computer Engineering Chulalongkorn University ------
*/
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<list>
#include<set>
#include<map>
#include<string>
#include<utility>
using namespace std;
#define REP(i,FN) for(int i=0;i<FN;i++)
#define FOR(i,ST,FN) for(int i=ST;i<=FN;i++)
#define FORD(i,FN,ST) for(int i=FN;i>=ST;i--)
#define FORX(i,c) for(typeof(c.begin())i=c.begin();i!=c.end();i++)
#define pause system("pause")
#define S scanf
#define P printf
#define X first
#define Y second
#define pb push_back
#define PII pair<int,int>
#define mp make_pair
#define sz size()
#define eps 1e-8

const int MOD(1000000007);
const int INF((1<<30)-1);
const int MAXN(105);

int n, m, path[4][MAXN][MAXN], d[4][2] = {1,0,-1,0,0,1,0,-1};

string a[4][MAXN];

bool b[4][MAXN][MAXN];

bool isLaser(int k,int i,int j){
    return a[k][i][j] == '>' ||
           a[k][i][j] == 'v' ||
           a[k][i][j] == '<' ||
           a[k][i][j] == '^';
}

bool outOfBound(int i,int j){
    return i < 0 || i >= n || j < 0 || j >= m;
}

struct node
{
    int k,i,j;
    node(){}
    node(int k,int i,int j) : k(k), i(i), j(j) {}
};

void solve(int test){

    S("%d%d",&n,&m);
    REP(i,n)
        cin >> a[0][i];

    FOR(k,1,3)
    {
        REP(i,n)
            a[k][i] = a[k-1][i];

        REP(i,n)
            REP(j,m)
            {
                if(a[k][i][j] == '>') a[k][i][j] = 'v';
                else if(a[k][i][j] == 'v') a[k][i][j] = '<';
                else if(a[k][i][j] == '<') a[k][i][j] = '^';
                else if(a[k][i][j] == '^') a[k][i][j] = '>';
            }
    }

    REP(k,4)
        REP(i,n)
            REP(j,m)
                b[k][i][j] = false;

    REP(k,4)
        REP(i,n)
            REP(j,m)
            {
                if(a[k][i][j] == '#')
                    b[k][i][j] = true;
            }

    REP(k,4)
        REP(i,n)
            REP(j,m)
            {
                if(isLaser(k,i,j))
                {
                    int x = i, y = j, dx, dy;

                    if(a[k][i][j] == '>') dx = 0, dy = 1;
                    else if(a[k][i][j] == 'v') dx = 1, dy = 0;
                    else if(a[k][i][j] == '<') dx = 0, dy = -1;
                    else if(a[k][i][j] == '^') dx = -1, dy = 0;

                    b[k][x][y] = true;

                    x += dx, y += dy;

                    while(!outOfBound(x,y))
                    {
                        if(a[k][x][y] == '#' || isLaser(k,x,y))
                            break;
                        b[k][x][y] = true;
                        x += dx;
                        y += dy;
                    }
                }
            }

    queue<node>q;

    REP(k,4)
        REP(i,n)
            REP(j,m)
                path[k][i][j] = -1;

    REP(i,n)
        REP(j,m)
        {
            if(a[0][i][j] == 'S')
            {
                q.push(node(0,i,j));
                path[0][i][j] = 0;
            }
        }

    while(!q.empty())
    {
        node t = q.front();

        q.pop();

        int k = (t.k + 1) % 4;

        REP(p,4)
        {
            int x = t.i + d[p][0];
            int y = t.j + d[p][1];

            if(!outOfBound(x,y) && !b[k][x][y] && path[k][x][y] == -1)
            {
                q.push(node(k,x,y));
                path[k][x][y] = path[t.k][t.i][t.j] + 1;
            }
        }
    }

    int ans = INF;

    REP(i,n)
        REP(j,m)
        {
            if(a[0][i][j] == 'G')
            {
                REP(k,4)
                {
                    if(path[k][i][j] != -1)
                        ans = min(ans, path[k][i][j]);
                }
            }
        }

    P("Case #%d: ",test);

    if(ans == INF) P("impossible\n");
    else P("%d\n",ans);

}

int main(){

    freopen("1input.txt","r",stdin);
    freopen("1output.txt","w",stdout);

    int t;
    S("%d",&t);
    FOR(i,1,t)
        solve(i);

}

/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
#endif
}

/* Input opener ends */

int dx[] = {1,0,-1,0};
int dy[] = {0,-1,0,1};

char s[105][105];

bool isTurret[105][105];
bool vis[105][105][4];
bool attack[105][105][4];

int main() {
    // input();

    int t; cin >> t;
    int tst = 1;
    while (t-- ) {

        int n,m; cin >> n >> m;
        F(i,0,n) cin >> s[i];

        M(isTurret,0);
        F(i,0,n) F(j,0,m) {
            if ( s[i][j] == 'v' ) isTurret[i][j] = 1;
            else if ( s[i][j] == '<' ) isTurret[i][j] = 1;
            else if ( s[i][j] == '^' ) isTurret[i][j] = 1;
            else if ( s[i][j] == '>' ) isTurret[i][j] = 1;
        }

        M(attack,0);
        F(d,0,4) {

            F(i,0,n) F(j,0,m) {

                int dir = d;
                if ( s[i][j] == 'v' ) dir += 0;
                else if ( s[i][j] == '<' ) dir += 1;
                else if ( s[i][j] == '^' ) dir += 2;
                else if ( s[i][j] == '>' ) dir += 3;
                else continue;

                // cout << i << " " << j << endl;

                dir %= 4;

                int x = i+dx[dir], y = j+dy[dir];
                // cout << i << " " << j << " "<< x << " " << y << endl;
                while ( x >= 0 && y >= 0 && x < n && y < m && s[x][y] != '#' && !isTurret[x][y] ) {
                    // cout << x << " " << y << " "<< d << endl;
                    attack[x][y][d] = 1;
                    x += dx[dir]; y += dy[dir];
                }

            }

            // F(i,0,n) {
            //     F(j,0,m) cout << attack[i][j][d]; cout << endl;
            // } cout << endl;

        }

        int sx = -1, sy = -1, ex = -1, ey = -1;

        F(i,0,n) F(j,0,m) {
            if ( s[i][j] == 'S' ) sx = i, sy = j;
            if ( s[i][j] == 'G' ) ex = i, ey = j;
        }

        M(vis,0);
        vis[sx][sy][0] = 1;
        queue<int> qx, qy, qd, cnt;
        qx.push(sx);qy.push(sy);qd.push(0); cnt.push(0);

        int ans = -1;

        while ( !qx.empty() ) {

            int wx = qx.front(); qx.pop();
            int wy = qy.front(); qy.pop();
            int wd = qd.front(); qd.pop();
            int cc = cnt.front(); cnt.pop();

            // cout << wx << " " << wy << " " << wd << " " << cc << endl;

            if ( wx == ex && wy == ey ) {
                ans = cc; break;
            }

            F(k,0,4) {
                int nx = wx + dx[k];
                int ny = wy + dy[k];
                int nd = (wd+1) % 4;
                int nc = cc + 1;
                if ( nx >= n || ny >= m || nx < 0 || ny < 0 ) continue;
                if ( vis[nx][ny][nd] ) continue;
                if ( s[nx][ny] != 'S' && s[nx][ny] != '.' && s[nx][ny] != 'G' ) continue;
                if ( attack[nx][ny][nd] ) continue;
                qx.push(nx); qy.push(ny); qd.push(nd); cnt.push(nc);
                vis[nx][ny][nd] = 1;
            }

        }

        cout << "Case #" << tst++ << ": ";
        if ( ans == -1 ) cout << "impossible" << endl;
        else cout << ans << endl;


    }
    return 0;
}


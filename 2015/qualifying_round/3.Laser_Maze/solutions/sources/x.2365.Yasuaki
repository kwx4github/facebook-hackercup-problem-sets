#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;
typedef tuple<int, int, int> S;

const int INF = 1 << 28;
const int MAX_M = 110;
const int MAX_N = 110;
const int dx[4] = {0, 1, 0, -1};
const int dy[4] = {-1, 0, 1, 0};
const string DIR = "^>v<";

int h, w;
char a[4][MAX_M][MAX_N];
int d[4][MAX_M][MAX_N];

int solve() {
  int si = -1, sj = -1;
  int gi = -1, gj = -1;
  for (int i = 0; i < h; i++) {
    for (int j = 0; j < w; j++) {
      for (int k = 0; k < 4; k++) {
        if (DIR.find(a[0][i][j]) != string::npos) {
          int dir = DIR.find(a[0][i][j]);
          a[k][i][j] = DIR[(dir + k) % 4];
        } else if (a[0][i][j] == '#'
                   || a[0][i][j] == '.') {
          a[k][i][j] = a[0][i][j];
        } else if (a[0][i][j] == 'S') {
          si = i, sj = j;
          a[k][i][j] = '.';
        } else if (a[0][i][j] == 'G') {
          gi = i, gj = j;
          a[k][i][j] = '.';
        } else {
          assert(false);
        }
      }
    }
  }
  for (int i = 0; i < h; i++) {
    for (int j = 0; j < w; j++) {
      for (int k = 0; k < 4; k++) {
        if (DIR.find(a[k][i][j]) != string::npos) {
          int dir = DIR.find(a[k][i][j]);
          for (int ni = i + dy[dir], nj = j + dx[dir];
               0 <= ni && ni < h && 0 <= nj && nj < w
                 && a[k][ni][nj] == '.';
               ni += dy[dir], nj += dx[dir]) {
            a[k][ni][nj] = '*';
          }
        }        
      }
    }
  }
  // for (int k = 0; k < 4; k++) {
  //   cout << "k == " << k << endl;
  //   for (int i = 0; i < h; i++) {
  //     for (int j = 0; j < w; j++) {   
  //       cout << a[k][i][j];
  //     }
  //     cout << endl;
  //   }
  //   cout << endl;
  // }
  if (a[0][si][sj] == '#') return -1;
  memset(d, -1, sizeof(d));
  queue<S> q;
  q.push(S(0, si, sj));
  d[0][si][sj] = 0;
  while (!q.empty()) {
    int k, i, j;
    tie(k, i, j) = q.front();
    q.pop();
    for (int dir = 0; dir < 4; dir++) {
      int ni = i + dy[dir], nj = j + dx[dir], nk = (k + 1) % 4;
      if (0 <= ni && ni < h
          && 0 <= nj && nj < w
          && a[nk][ni][nj] == '.'
          && d[nk][ni][nj] == -1) {
        d[nk][ni][nj] = d[k][i][j] + 1;
        q.push(S(nk, ni, nj));
      }
    }
  }
  int r = INF;
  for (int k = 0; k < 4; k++) {
    if (d[k][gi][gj] != -1) {
      r = min(r, d[k][gi][gj]);
    }
  }
  return (r == INF ? -1 : r);
}

int main() {
  int T;
  cin >> T;
  for (int t = 1; t <= T; t++) {
    cin >> h >> w;
    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
        cin >> a[0][i][j];
      }
    }
    int r = solve();
    printf("Case #%d: ", t);
    if (r == -1) {
      puts("impossible");
    } else {
      printf("%d\n", r);
    }
  }
}

#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;
typedef tuple<int, int, int> state;

const int nm = 101;
const int xi[4] = {-1, 0, 1, 0};
const int yi[4] = {0, 1, 0, -1};
const int oo = 1000000007;

int xs, ys, xt, yt, m, n, test, res;
queue<state> q;
string mp[nm];
bool notOK[nm][nm][4];
int d[nm][nm][4];

void inp() {
	cin >> m >> n;
	int i, j, k, c, xc, yc;
	for (i = 0; i < m; ++i) cin >> mp[i];
	memset(notOK, 0, sizeof notOK);
	for (i = 0; i < m; ++i) {
		for (j = 0; j < n; ++j) {
			k = -1;
			switch (mp[i][j]) {
				case 'S':
					xs = i; ys = j; break;
				case 'G':
					xt = i; yt = j; break;
				case '#':
					for (k = 0; k < 4; ++k) notOK[i][j][k] = true;
					k = -1;
					break;
				case '^':
					k = 0; break;
				case '>':
					k = 1; break;
				case 'v':
					k = 2; break;
				case '<':
					k = 3; break;
			}
			if (k != -1) {
				for (c = 0; c < 4; ++c) {
					xc = i; yc = j;
					while ((xc >= 0) && (yc >= 0) && (xc < m) && (yc < n)) {
						if (mp[xc][yc] == '#') break;
						//cerr << "(" << xc << ", " << yc << ", " << c << ") became invalid.\n";
						notOK[xc][yc][c] = true;
						xc += xi[k]; yc += yi[k];
					}
					k = ((k + 1) & 3);
				}
			}
		}
	}
}

void sol() {
	int x, y, t, xc, yc, k;
	for (x = 0; x < m; ++x) {
		for (y = 0; y < n; ++y) {
			for (t = 0; t < 4; ++t) d[x][y][t] = oo;
		}
	}
	d[xs][ys][0] = 0;
	q = {};
	q.push(make_tuple(xs, ys, 0));
	while (!q.empty()) {
		state tmp = q.front(); q.pop();
		x = get<0>(tmp); y = get<1>(tmp); t = get<2>(tmp);
		for (k = 0; k < 4; ++k) {
			xc = x + xi[k]; yc = y + yi[k];
			if (!((xc >= 0) && (yc >= 0) && (xc < m) && (yc < n))) continue;
			if (notOK[xc][yc][(t+1)&3]) continue;
			if (d[xc][yc][(t+1)&3] < oo) continue;
			//cerr << "Go to (" << xc << ", " << yc << ", " << ((t+1)&3) << ").\n";
			d[xc][yc][(t+1)&3] = d[x][y][t] + 1;
			if ((xc == xt) && (yc == yt)) {
				res = d[x][y][t] + 1;
				return;
			}
			q.push(make_tuple(xc, yc, (t+1)&3));
		}
	}
}
int main(int argc, char* argv[]) {
	freopen("laser_maze.txt", "r", stdin);
	freopen("laser_output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	cin >> test;
	for (int it = 1; it <= test; ++it) {
		inp();
		res = oo;
		sol();
		cout << "Case #" << it << ": ";
		if (res == oo) cout << "impossible\n";
		else cout << res << '\n';
	}
	return 0;
}


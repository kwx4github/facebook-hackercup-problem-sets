package main

import (
  "os"
  "bufio"
  "strconv"
  "fmt"
  "strings"
)

func scanInt(scanner *bufio.Scanner) int {
  scanner.Scan()
  x, _ := strconv.Atoi(scanner.Text())
  return x
}

func main() {
  scanner := bufio.NewScanner(os.Stdin)
  scanner.Split(bufio.ScanWords)
  writer := bufio.NewWriter(os.Stdout)
  defer writer.Flush()
  numCases := scanInt(scanner)
  for caseIndex := 1; caseIndex <= numCases; caseIndex++ {
    rowNum, colNum := scanInt(scanner), scanInt(scanner)
    input := make([]string, rowNum)
    for r := 0; r < rowNum; r++ {
      scanner.Scan()
      input[r] = scanner.Text()
    }
    startR, startC, goalR, goalC := -1, -1, -1, -1
    lasers := make([][]int, 0)
    grid := make([][][]int, rowNum)
    for r := 0; r < rowNum; r++ {
      grid[r] = make([][]int, colNum)
      for c := 0; c < colNum; c++ {
        grid[r][c] = make([]int, 4)
        ch := input[r][c]
        if ch == 'S' || ch == 'G' || ch == '.' {
          if ch == 'S' {
            startR, startC = r, c
          } else if ch == 'G' {
            goalR, goalC = r, c
          }
          continue
        }
        for i := 0; i < 4; i++ {
          grid[r][c][i] = 1
        }
        if ch != '#' {
          lasers = append(lasers, []int{ r, c })
        }
      }
    }
    dr, dc := []int{ -1, 0, 1, 0 }, []int{ 0, 1, 0, -1 }
    for _, laser := range lasers {
      r0, c0 := laser[0], laser[1]
      dir0 := strings.IndexByte("^>v<", input[r0][c0])
      for i := 0; i < 4; i++ {
        dir := (dir0 + i) % 4
        r, c := r0, c0
        for {
          r += dr[dir]
          c += dc[dir]
          if r < 0 || r >= rowNum || c < 0 || c >= colNum {
            break
          }
          if grid[r][c][i] == 1 {
            break
          }
          grid[r][c][i] = 2
        }
      }
    }
    best := make([][][]int, rowNum)
    for r := 0; r < rowNum; r++ {
      best[r] = make([][]int, colNum)
      for c := 0; c < colNum; c++ {
        best[r][c] = make([]int, 4)
        for i := 0; i < 4; i++ {
          best[r][c][i] = -1
        }
      }
    }
    best[startR][startC][0] = 0
    qLen := 20*100*100
    queue := make([][]int, qLen)
    for i := range queue {
      queue[i] = make([]int, 3)
    }
    queue[0][0], queue[0][1], queue[0][2] = startR, startC, 0
    tail, head := 0, 1
    for head != tail {
      r, c, steps := queue[tail][0], queue[tail][1], queue[tail][2]
      //writer.WriteString(fmt.Sprintf("r = %d, c = %d, steps = %d\n",
      //    r, c, steps))
      tail = (tail + 1) % qLen
      steps += 1
      dir := steps % 4
      for i := 0; i < 4; i++ {
        R, C := r + dr[i], c + dc[i]
        if R < 0 || R >= rowNum || C < 0 || C >= colNum {
          continue
        }
        if grid[R][C][dir] != 0 {
          continue
        }
        if best[R][C][dir] != -1 && best[R][C][dir] <= steps {
          continue
        }
        best[R][C][dir] = steps
        queue[head][0], queue[head][1], queue[head][2] = R, C, steps
        head = (head + 1) % qLen
      }
    }
    result := -1
    for i := 0; i < 4; i++ {
      x := best[goalR][goalC][i]
      if x != -1 && (result == -1 || x < result) {
        result = x
      }
    }
    writer.WriteString(fmt.Sprintf("Case #%d: ", caseIndex))
    if result == -1 {
      writer.WriteString("impossible\n")
    } else {
      writer.WriteString(fmt.Sprintf("%d\n", result))
    }
  }
}

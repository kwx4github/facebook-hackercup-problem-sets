#include <bits/stdc++.h>
using namespace std;


typedef pair<int,int> point;
typedef pair<point,int> tri;


int t,m,n;
int isSafe[100][100][4];
int isVis[100][100][4];
int steps[100][100][4];
string grid[100];
int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};
point start,end;



bool inRange(int i,int j){
	return (i>=0&&j>=0&&i<m&&j<n);
}
bool isObstacle(int i,int j){
	return (grid[i][j]=='^'||grid[i][j]=='>'||grid[i][j]=='v'||grid[i][j]=='^'||grid[i][j]=='#');
}
void setGrid(int x,int y,int dir){
	int i=x+dx[dir],j=y+dy[dir];
	int time=0;
	while(inRange(i,j)&&!isObstacle(i,j)){
		isSafe[i][j][time]=0;
		i+=dx[dir];
		j+=dy[dir];
	}
	time+=1;
	dir=(dir+1)%4;
	i=x+dx[dir],j=y+dy[dir];
	while(inRange(i,j)&&!isObstacle(i,j)){
		isSafe[i][j][time]=0;
		i+=dx[dir];
		j+=dy[dir];
	}
	time+=1;
	dir=(dir+1)%4;
	i=x+dx[dir],j=y+dy[dir];
	while(inRange(i,j)&&!isObstacle(i,j)){
		isSafe[i][j][time]=0;
		i+=dx[dir];
		j+=dy[dir];
	}
	time+=1;
	dir=(dir+1)%4;
	i=x+dx[dir],j=y+dy[dir];
	while(inRange(i,j)&&!isObstacle(i,j)){
		isSafe[i][j][time]=0;
		i+=dx[dir];
		j+=dy[dir];
	}	
}

int bfs(point start){
	int time=0;
	int res=1e8;
	isVis[start.first][start.second][time]=0;
	queue<tri> q;
	q.push(tri(start,time));
	while(!q.empty()){
		tri r=q.front();q.pop();
		point s=r.first;
		time=r.second;
		int x=s.first,y=s.second;
		if(x==end.first&&y==end.second){
			res=min(res,isVis[x][y][time]);
			continue;
		}
		//cout<<"probable"<<" "<<x<<" "<<y<<endl;;
		for(int i=0;i<4;i++){
			if(inRange(x+dx[i],y+dy[i])&&!isObstacle(x+dx[i],y+dy[i])&&isSafe[x+dx[i]][y+dy[i]][(time+1)%4]){
				
			//cout<<" "<<x+dx[i]<<" "<<y+dy[i]<<" "<<(time+1)%4<<" "<<isSafe[x+dx[i]][y+dy[i]][(time+1)%4]<<"\n";
				if(isVis[x+dx[i]][y+dy[i]][(time+1)%4]>isVis[x][y][time]+1){
					isVis[x+dx[i]][y+dy[i]][(time+1)%4]=isVis[x][y][time]+1;
					q.push(tri(point(x+dx[i],y+dy[i]),(time+1)%4));
				}
			}
			
		}
		//cout<<"endprobable\n";
	}
	return res;
}


int main(){
	cin>>t;
	for(int i=1;i<=t;i++){
		cout<<"Case #"<<i<<": ";
		for(int k=0;k<100;k++){
			for(int l=0;l<100;l++){
				for(int u=0;u<4;u++){
					isSafe[k][l][u]=1;
					isVis[k][l][u]=1e8;
				}
			}
		}
	
		cin>>m>>n;
		for(int j=0;j<m;j++){
			cin>>grid[j];
		}
		for(int k=0;k<m;k++){
			for(int l=0;l<n;l++){
				if(grid[k][l]=='>')
				setGrid(k,l,0);
				if(grid[k][l]=='v')
				setGrid(k,l,1);
				if(grid[k][l]=='<')
				setGrid(k,l,2);
				if(grid[k][l]=='^')
				setGrid(k,l,3);
				if(grid[k][l]=='S')
				start=point(k,l);
				if(grid[k][l]=='G')
				end=point(k,l);				
			}
		}
		int res=bfs(start);
		if(res<1e8)
			cout<<res<<endl;
		else
			cout<<"impossible"<<endl;		
	}
}

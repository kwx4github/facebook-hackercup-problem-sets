#include <stdio.h>
#include <string.h>

#define NMAX 128

int M, N;
char A[NMAX][NMAX], blocked[4][NMAX][NMAX];
int drow[4] = {-1, 0, +1, 0};
int dcol[4] = {0, +1, 0, -1};

void MarkBlocked() {
	int i, j, k, t, p, q, sdir;
	memset(blocked, 0, sizeof(blocked));
	for (i = 1; i <= M; i++)
		for (j = 1; j <= N; j++)
			if (A[i][j] == '#') {
				for (k = 0; k < 4; k++)
					blocked[k][i][j] = 1;
			} else {
				sdir = -1;
				if (A[i][j] == '^') sdir = 0;
				else if (A[i][j] == '>') sdir = 1;
				else if (A[i][j] == 'v') sdir = 2;
				else if (A[i][j] == '<') sdir = 3;
				if (sdir >= 0) {
					for (k = 0; k < 4; k++)
						blocked[k][i][j] = 1;
					for (t = 0; t < 4; t++) {
						k = (sdir + t) % 4;
						p = i + drow[k];
						q = j + dcol[k];
						while (1 <= p && p <= M && 1 <= q && q <= N &&
							   (A[p][q] == '.' || A[p][q] == 'S' || A[p][q] == 'G')) {
							blocked[t][p][q] = 1;
							p += drow[k];
							q += dcol[k];							
						}
					}
				}
			}
}

#define INF 1000000000

int dmin[4][NMAX][NMAX], q[4 * NMAX * NMAX][3], qli, qls;

void FindShortestPath() {
	int i, j, t, k, u, v, w;
	for (k = 0; k < 4; k++)
		for (i = 1; i <= M; i++)
			for (j = 1; j <= N; j++)
				dmin[k][i][j] = INF;

	qli = 0; qls = -1;
	for (i = 1; i <= M; i++)
		for (j = 1; j <= N; j++)
			if (A[i][j] == 'S') {
				dmin[0][i][j] = 0;
				qls++;
				q[qls][0] = 0;
				q[qls][1] = i;
				q[qls][2] = j;				
			}
	
	while (qli <= qls) {
		t = q[qli][0];
		i = q[qli][1];
		j = q[qli][2];
		qli++;

		w = (t + 1) % 4;
		for (k = 0; k < 4; k++) {
			u = i + drow[k];
			v = j + dcol[k];
			if (1 <= u && u <= M && 1 <= v && v <= N &&
				!blocked[w][u][v] && dmin[w][u][v] == INF) {
				dmin[w][u][v] = dmin[t][i][j] + 1;
				qls++;
				q[qls][0] = w;
				q[qls][1] = u;
				q[qls][2] = v;
			}
		}
	}
}

int main() {
	freopen("laser_maze.txt", "r", stdin);
	freopen("laser_maze.out", "w", stdout);
	int T, t, i, j, k, ans;
	scanf("%d", &T);
	for (t = 1; t <= T; t++) {
		scanf("%d %d", &M, &N);
		for (i = 1; i <= M; i++)
			scanf("%s", &(A[i][1]));
		MarkBlocked();
		FindShortestPath();
		int ig = 0, jg = 0;
		for (i = 1; i <= M; i++)
			for (j = 1; j <= N; j++)
				if (A[i][j] == 'G') {
					ig = i; jg = j;
				}
		if (ig == 0 || jg == 0) return 111;
		printf("Case #%d: ", t);
		ans = INF;
		for (k = 0; k < 4; k++)
			if (dmin[k][ig][jg] < ans)
				ans = dmin[k][ig][jg];
		if (ans == INF) printf("impossible\n");
		else printf("%d\n", ans);
	}
	return 0;
}

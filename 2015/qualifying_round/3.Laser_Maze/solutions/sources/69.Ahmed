#include <set>
#include <map>
#include <list>
#include <stack>
#include <queue>
#include <cmath>
#include <deque>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <complex>
#include <sstream>
#include <utility>
#include <climits>
#include <cstring>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <algorithm>

#define OO (int) 1e9

using namespace std;

int gcd(int u, int v) {return (v != 0)?gcd(v, u%v):u;}

char grid[110][110];
char tempGrid[110][110];
bool unSafe[4][110][110];
bool vis[4][110][110];
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};
int r,c;
pair<int,int> start;

bool isEmpty(int i,int j)
{
	if (grid[i][j]=='S' || grid[i][j]=='G'|| grid[i][j]=='.') return 1;
	return 0;
}

bool check(int steps, int i, int j)
{
	if( !(i>=0 && i <r && j>=0 && j<c )) return 0;
	return isEmpty(i,j) && !vis[steps][i][j] && !unSafe[steps][i][j];
}

int bfs()
{
	vis[0][start.first][start.second]=1;
	queue <pair<int,pair<int,int> > > q;
	q.push(make_pair(0,start));
	while(!q.empty())
	{
		pair<int,pair<int,int> > cur=q.front();
		q.pop();
		for(int i=0;i<4;i++)
		{
			int nxt_x= cur.second.first+dx[i];
			int nxt_y=cur.second.second+dy[i];
			if(check((cur.first+1)%4,nxt_x,nxt_y))
			{
				if(grid[nxt_x][nxt_y]=='G') return cur.first+1;
				vis[(cur.first+1)%4][nxt_x][nxt_y]=1;
				q.push(make_pair(cur.first+1,make_pair(nxt_x,nxt_y)));
			}
		}
	}
	return -1;
}

void markUnSafe(int steps)
{
	for(int i=0;i<r;i++)
	{
		for(int j=0;j<c;j++)
		{
			if(tempGrid[i][j]=='^')
			{
				for(int k=i-1;k>=0;k--) 
				{
					if(!isEmpty(k,j)) break;
					unSafe[steps][k][j]=1;
				}
			}
			else if(tempGrid[i][j]=='>')
			{
				for(int k=j+1;k<c;k++) 
				{
					if(!isEmpty(i,k)) break;
					unSafe[steps][i][k]=1;
				}
			}
			else if(tempGrid[i][j]=='v')
			{
				for(int k=i+1;k<r;k++)
				{
					if(!isEmpty(k,j)) break;
					unSafe[steps][k][j]=1;
				}
			}
			else if(tempGrid[i][j]=='<')
			{
				for(int k=j-1;k>=0;k--)
				{
					if(!isEmpty(i,k)) break;
					unSafe[steps][i][k]=1;
				}
			}
		}
	}
}

int main()
{
	//ios_base::sync_with_stdio(false);
	freopen("laser_maze.txt","r",stdin);
    freopen("laser_maze_out.txt","w",stdout);

	int tc;
	cin>>tc;
	for(int i=1;i<=tc;i++)
	{
		memset(vis,0,sizeof vis);
		memset(unSafe,0,sizeof unSafe);
		cin>>r>>c;
		for(int j=0;j<r;j++)
		{
			for(int k=0;k<c;k++)
			{
				cin>>grid[j][k];
				tempGrid[j][k]=grid[j][k];
				if(grid[j][k]=='S') start=make_pair(j,k);
			}
		}
		markUnSafe(0);
		for(int m=1;m<4;m++)
		{
			for(int j=0;j<r;j++)
			{
				for(int k=0;k<c;k++)
				{
					if(tempGrid[j][k]=='^') tempGrid[j][k]='>';
					else if(tempGrid[j][k]=='>') tempGrid[j][k]='v';
					else if(tempGrid[j][k]=='v') tempGrid[j][k]='<';
					else if(tempGrid[j][k]=='<') tempGrid[j][k]='^';
				}
			}
			markUnSafe(m);
		}
		cout<<"Case #"<<i<<": ";
		int res=bfs();
		if(res==-1) cout<<"impossible"<<endl;
		else cout<<res<<endl;
	}
}

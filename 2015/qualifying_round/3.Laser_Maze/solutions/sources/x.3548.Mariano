#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <vector>
#include <cassert>
#include <algorithm>
using namespace std;
#define dprint(v) cerr << #v"=" << v << endl //;)
#define forr(i,a,b) for(int i=(a); i<(b); i++)
#define forn(i,n) forr(i,0,n)
#define dforn(i,n) for(int i=n-1; i>=0; i--)
#define forall(it,v) for(typeof(v.begin()) it=v.begin();it!=v.end();++it)
#define sz(c) ((int)c.size())
#define zero(v) memset(v, 0, sizeof(v))
#define fst first
#define snd second
#define mkp make_pair
#define pb push_back
typedef long long ll;
typedef pair<int,int> ii;

char mapa[5][150][150];
ll dist[5][150][150];
int n,m;
ii init, end;

struct state {
	state(int x, int y, int mpn) : x(x), y(y), mpn(mpn) {}
	int x,y,mpn;
};

#define INF 1e15

queue< state > q;

char towers[] = {'>', 'v', '<', '^' };
int dx[] = { 1, 0, -1, 0};
int dy[] = { 0, 1, 0, -1};

bool correct(int x,int y) {
	return y>=0 && y<m && x>=0 && x<n;
}

int main() {
	//~ freopen("c.in", "r", stdin);
	//~ freopen("c.out", "w", stdout);
	int T;
	
	
	cin >> T;
	forn(tc,T){
		cin >> m >> n;
		forn(i,m) cin >> mapa[0][i];
		forn(i,m) forn(j,n) {
			if (mapa[0][i][j] == 'S') {
				init.snd = i; init.fst = j;
				mapa[0][i][j] = '.';
			}
			if (mapa[0][i][j] == 'G') {
				end.snd = i; end.fst = j;
				mapa[0][i][j] = '.';
			}
			int p = -1;
			forn(t,4) if (towers[t] == mapa[0][i][j]) {
				p = t; break;
			}
			if (p!=-1) {
				forr (mpn,1,4) mapa[mpn][i][j] = towers[(p+mpn)%4];
			} else {
				forr (mpn,1,4) mapa[mpn][i][j] = mapa[0][i][j];
			}
		}
		
		forn (mpn, 4) forn(i,m) forn(j,n) {
			int p = -1;
			forn(t,4) if (towers[t] == mapa[mpn][i][j]) {
				p = t; break;
			}
			if (p!=-1) {
				int x=j+dx[p], y=i+dy[p];
				while (correct(x,y) && mapa[mpn][y][x]=='.' ) {
					
					mapa[mpn][y][x] = '#';
					x += dx[p]; y+= dy[p];
				}
			}
		}
		
		
		
		forn (mpn, 4) forn(i,m) forn(j,n)  {
			dist[mpn][i][j]=INF;
		}
		
	
		dist[0][init.snd][init.fst] = 0;
		q.push(state(init.fst,init.snd,0));
		
		while (!q.empty()) {
			
			state e = q.front(); q.pop();
			
			forn(mv,4) {
				 state ne = state(e.x+dx[mv],e.y+dy[mv],(e.mpn+1)%4);
				 
				 //~ if (e.x==1 && e.y==1 && e.mpn==1) cout <<dist[e.mpn][e.y][e.x]<<" "<< ne.x << " " << ne.y << " " << ne.mpn <<" " << dist[ne.mpn][ne.x][ne.y]<< endl;
				 
				 if (correct(ne.x, ne.y) && mapa[ne.mpn][ne.y][ne.x]=='.' && dist[ne.mpn][ne.y][ne.x] > dist[e.mpn][e.y][e.x]+1) {
					 
					 dist[ne.mpn][ne.y][ne.x] = dist[e.mpn][e.y][e.x]+1;
					 
					 //~ dprint(ne.x);dprint(ne.y);
					 //~ dprint(dist[ne.mpn][ne.x][ne.y]);
					 q.push(ne);
				 }
			}
		}
		
		
		//~ forn(mpn, 4) { forn(i,m)  cout << mapa[mpn][i] << endl;
			//~ cout << "\n\n";
			//~ }
		
		ll mini = INF;
		forn(m,4) mini = min(mini,dist[m][end.snd][end.fst]);
		
		cout << "Case #"<<tc+1<< ": ";
		if (mini == INF) cout << "impossible" << endl;
		else cout << mini << endl;
	}
    return 0;
}

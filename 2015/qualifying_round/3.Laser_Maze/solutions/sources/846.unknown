#include <stdio.h>
#include <math.h>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <iostream>
using namespace std;


int T, n, m, sy, sx, gy, gx;
int dy[] = { -1, 0, 1, 0 }, dx[] = { 0, 1, 0, -1 };
char cc[110][110], c[110][110][4], ds[] = "^>v<";

struct S {
    int y, x, r;
    S(int y, int x, int r) : y(y), x(x), r(r) {}
    S(int c) : y(c / 1000), x(c % 1000 / 10), r(c % 10) {}
    int c() {
        return y * 100 * 10 + x * 10 + r;
    }
};
map<int, int> u;
queue<int> q;

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &T);
    for (int test = 1; test <= T; test++) {

        scanf("%d%d", &n, &m);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++)
                scanf(" %c", &cc[i][j]);
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (cc[i][j] == 'S') {
                    sy = i;
                    sx = j;
                }
                if (cc[i][j] == 'G') {
                    gy = i;
                    gx = j;
                }
                for (int r = 0; r < 4; r++)
                    c[i][j][r] = strchr(".SG", cc[i][j]) ? '.' : '#';
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (strchr("<>v^", cc[i][j])) {
                    int sr = find(ds, ds + 4, cc[i][j]) - ds;
                    for (int r = 0; r < 4; r++) {
                        int fr = (sr + r) % 4;
                        for (int ti = i + dy[fr], tj = j + dx[fr];
                            ti >= 0 && ti < n && tj >= 0 && tj < m && c[ti][tj][r] != '#';
                            ti += dy[fr], tj += dx[fr])
                            c[ti][tj][r] = 'x';
                    }
                }
            }
        }

        u.clear();
        u[S(sy, sx, 0).c()] = 1;
        q.push(S(sy, sx, 0).c());
        while (!q.empty()) {
            S s(q.front());
            q.pop();
            for (int k = 0; k < 4; k++) {
                S t(s.y + dy[k], s.x + dx[k], (s.r + 1) % 4);
                if (t.y < 0 || t.y >= n || t.x < 0 || t.x >= m || u.count(t.c()) || c[t.y][t.x][t.r] != '.')
                    continue;
                u[t.c()] = u[s.c()] + 1;
                q.push(t.c());
            }
        }

        int mu = 1 << 30;
        for (int r = 0; r < 4; r++) {
            if (u.count(S(gy, gx, r).c()))
                mu = min(mu, u[S(gy, gx, r).c()] - 1);
        }
        if (mu == 1 << 30)
            printf("Case #%d: impossible\n", test);
        else
            printf("Case #%d: %d\n", test, mu);
    }
}
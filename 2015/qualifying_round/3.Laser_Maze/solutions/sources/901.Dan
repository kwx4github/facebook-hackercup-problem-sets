package hackercup1;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class P3 {
	Scanner sc;
	PrintWriter pw;
	String problemName = "P3";
	
	public P3() throws FileNotFoundException {
		sc = new Scanner(new File(problemName + ".in"));
		pw = new PrintWriter(new File(problemName + ".out"));
	}
	
	public static final int EMPTY = 0;
	public static final int WALL = 1;
	public static final String IMPOSSIBLE = "impossible";

	int[] di = {-1, 0, 1, 0};
	int[] dj = {0, 1, 0, -1};
	
	public void solveTest(int testIdx) {
		int h = sc.nextInt();
		int w = sc.nextInt();
		String[] maze = new String[h];
		sc.nextLine();
		for (int i=0; i<h; i++) maze[i] = sc.nextLine();
		int[][][] mazes = new int[h][w][4];
		int startI=-1, startJ=-1;
		int endI=-1, endJ=-1;

		for (int i=0; i<h; i++) {
			for (int j=0; j<w; j++) {
				char c = maze[i].charAt(j);
				
				if (c == 'S') {
					startI = i;
					startJ = j;
				}
				else if (c == 'G') {
					endI = i;
					endJ = j;
				}
				else if (c == '#') {
					for (int k=0; k<4; k++) {
						mazes[i][j][k] = WALL;
					}
				}
				else if (c != '.') {
					int dir = -1;
					if (c == '^') dir = 0;
					else if (c == '>') dir = 1;
					else if (c == 'v') dir = 2;
					else if (c == '<') dir = 3;
					if (dir == -1) throw new AssertionError(dir);
					
					for (int k=0; k<4; k++) {
						int ci = i, cj = j, cdir = (dir + k) % 4;
						while (true) {
							mazes[ci][cj][k] = WALL;
							
							ci += di[cdir];
							cj += dj[cdir];
							if (ci<0 || ci>=h || cj<0 || cj>=w) {
								break;
							}
							char cc = maze[ci].charAt(cj);
							if (cc=='#' || cc=='^' || cc=='>' || cc=='v' || cc=='<') {
								break;
							}
						}
					}
				}
			}
		}
		
		if (startI==-1 || startJ==-1) throw new AssertionError();
		if (endI==-1 || endJ==-1) throw new AssertionError();
//		if (mazes[startI][startJ][0] == WALL) {
//			System.out.println("Initially hit!");
//			pw.println("Case #" + testIdx + ": " + IMPOSSIBLE);
//			return;
//		}
		
		Queue<Position> q = new LinkedList<Position>();
		int[][][] reach = new int[h][w][4];
		for (int i=0; i<h; i++) {
			for (int j=0; j<w; j++) {
				for (int k=0; k<4; k++) {
					reach[i][j][k] = -1;
				}
			}
		}
		q.add(new Position(startI, startJ, 0));
		while (!q.isEmpty()) {
			Position crt = q.poll();
			int i=crt.i;
			int j=crt.j;
			int k=crt.t % 4;
			int t=crt.t;
			reach[i][j][k] = t;
			
			for (int dir=0; dir<4; dir++) {
				int ni = i + di[dir];
				int nj = j + dj[dir];
				int nk = (k+1) % 4;
				int nt = t+1;
				if (ni<0 || ni>=h || nj<0 || nj>=w) continue;
				if (mazes[ni][nj][nk] != WALL) {
					if (reach[ni][nj][nk] == -1 || reach[ni][nj][nk] > nt) {
						reach[ni][nj][nk] = nt;
						q.add(new Position(ni, nj, nt));
					}
				}
			}
		}
		
		int minTime = -1;
		for (int k=0; k<4; k++) {
			int time = reach[endI][endJ][k];
			if (time != -1)
				if (minTime==-1 || time<minTime)
					minTime = time;
		}
		if (minTime == -1)
			pw.println("Case #" + testIdx + ": " + IMPOSSIBLE);
		else
			pw.println("Case #" + testIdx + ": " + minTime);
	}
	
	public void solve() {
		int T = sc.nextInt();
		for (int testIdx=1; testIdx<=T; testIdx++) {
			solveTest(testIdx);
			System.out.println("Done " + testIdx + " / " + T);
		}
		
		pw.close();
	}
	
	public static void main(String[] args) throws FileNotFoundException {
		P3 p = new P3();
		p.solve();
	}
	
	class Position {
		int i, j, t;
		public Position(int i, int j, int t) {
			this.i = i;
			this.j = j;
			this.t = t;
		}
	}
}

package fbhc15QR;


import java.io.*;
import java.math.BigInteger;
import java.util.*;


public class C
{
        String line;
        StringTokenizer inputParser;
        BufferedReader is;
        FileInputStream fstream;
        DataInputStream in;
        String FInput="";
        
        void openInput(String file)
        {

                if(file==null)is = new BufferedReader(new InputStreamReader(System.in));//stdin
                else
                {
                        try{
                
                                
                        fstream = new FileInputStream(file);
                        in = new DataInputStream(fstream);
                        is = new BufferedReader(new InputStreamReader(in));
                        }catch(Exception e)
                        {
                                System.err.println(e);
                        }
                }

        }
        
        void readNextLine()
    	{
    		try {
    			line = is.readLine();
    			inputParser = new StringTokenizer(line, " ,\t");
    			//System.err.println("Input: " + line);
    		} catch (IOException e) {
    			System.err.println("Unexpected IO ERROR: " + e);
    		}	
    		catch (NullPointerException e)
    		{
    			line=null;
    			
    		}
    		
    	}
        
        long NextLong()
        {
                String n = inputParser.nextToken();
                
                long val = Long.parseLong(n);
                
                 return val;
        }
        
        int NextInt()
        {
                String n = inputParser.nextToken();
                int val = Integer.parseInt(n);
                
                //System.out.println("I read this number: " + val);
                return val;
        }
        
        String NextString()
        {
                String n = inputParser.nextToken();
                return n;
        }
        
        void closeInput()
        {
                try {
                        is.close();
                } catch (IOException e) {
                        System.err.println("Unexpected IO ERROR: " + e);
                }
                        
        }
        
        
        public static void main(String [] argv)
        {
                //String filePath="circles.in";
                String filePath=null;
                if(argv.length>0)filePath=argv[0];
                new C(filePath);
                
        }
        

		String turrets = "<^>v";
		int [] dy = {-1, 0, 1, 0};
		int [] dx = {0, -1, 0, 1};
		int M,N;
        public C(String inputFile)
        {
        	openInput(inputFile);
    		StringBuilder sb = new StringBuilder();
    		readNextLine();
    		int T=NextInt(), t=0;
    		while(T-->0)
    		{
    			t++;
    			readNextLine();
    			M=NextInt();
    			N=NextInt();
    			boolean [] [] w = new boolean [M][N];
    			boolean [] [] p = new boolean [M][N];
    			int gi=-1, gj=-1;
    			ArrayList <Turret> ts = new ArrayList<C.Turret>();
    			for(int i=0; i<M; i++)
    			{
    				readNextLine();
    				for(int j=0; j<N; j++)
    				{
    					int turret = turrets.indexOf(line.charAt(j));
    					if(line.charAt(j)=='#'|| turret > -1)w[i][j]=true;
    					if(turret > -1)
    						ts.add(new Turret(i, j, turret));
    						
    					if(line.charAt(j)=='S')p[i][j]=true;
    					if(line.charAt(j)=='G') {
    						gi = i;
    						gj = j;
    					}
    				}
    			}
    			int res = -1;
    			for(int step=1; step<100000; step++)
    			{
    				boolean [][] q = new boolean[M][N];
    				for(int i=0; i<M; i++)
        			{
        				for(int j=0; j<N; j++)
        				{
        					if(p[i][j])
        					{
        						for(int d=0; d<dx.length; d++)
        						{
        							int x=i+dx[d];
        							int y=j+dy[d];
        							if(x<0||x>=M)continue;
        							if(y<0||y>=N)continue;
        							if(w[x][y])continue;
        							q[x][y]=true;
        						}
        					}
        				}
        			}
    				for(Turret turret:ts)
    				{
    					turret.nextStep();
    					turret.shoot(q, w);
    				}

					if(q[gi][gj])
					{
						res = step;
						break;
					}
    				p=q;
    			}
    			
    			
    			sb.append("Case #"+t+": ");
    			if(res==-1)sb.append("impossible");
    			else sb.append(res);
    			sb.append("\n");
    		}
    		
    		System.out.println(sb);
        	
    		closeInput();		
      
        }
        private class Turret
        {
        	int x, y, d;
        	Turret(int x, int y, int d)
        	{
        		this.x=x;
        		this.y=y;
        		this.d=d;
        	}
        	
        	public void shoot(boolean[][] q, boolean [] [] w) {
				int ddx=dx[d], ddy=dy[d];
				int xx = x, yy=y;
				xx+=ddx;
				yy+=ddy;
				while(xx>=0&&xx<M&&yy>=0&&yy<N)
				{
					if(w[xx][yy])break;
					q[xx][yy]=false;
					xx+=ddx;
					yy+=ddy;
				}
			}

			public void nextStep()
        	{
        		d++;
        		if(d==4)d=0;
        	}
        }
        
       

}

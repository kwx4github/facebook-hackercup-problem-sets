#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <cstring>

using namespace std;

int main(){
  int T;
  cin >> T;
  for( int i = 0 ; i < T; i++ ){
    int h,w;
    cin >> h >> w;
    int map[4][102][102];
    memset(map,-1,sizeof(map));
    int sh=0,sw=0,gh=0,gw=0;
    vector<string> mapVec;
    for( int hi = 1 ; hi <= h ; hi++){
      string line;
      cin >> line;
      mapVec.push_back(line);
      for( int wi = 1 ; wi <= w ; wi++ ){
        if( line[wi-1] == '.'){
          for( int k = 0 ; k < 4; k++ ) map[k][hi][wi] = 0;
        }
        else if(line[wi-1]== 'S' ){
          sh = hi;
          sw = wi;
          for( int k = 0 ; k < 4; k++ ) map[k][hi][wi] = 0;
        }
        else if( line[wi-1] == 'G' ){
          gh = hi;
          gw = wi;
          for( int k = 0 ; k < 4; k++ ) map[k][hi][wi] = 0;
        }
        else if( line[wi-1] == '#' ){
          // do nothing
        }
        else{
          for( int k = 0 ; k < 4; k++ ) map[k][hi][wi] = -3;
        }
      }
    }
    for( int k = 0 ; k < 4; k++ ){
      for( int hi = 1; hi <= h ;hi++){
        for( int wi = 1; wi <= w; wi++ ){
          if( map[k][hi][wi] == -3 ){
            if( mapVec[hi-1][wi-1] =='^'){
              int dh = -1;
              int dw = 0;
              mapVec[hi-1][wi-1]='>'; 
              for( int x=hi+dh,y=wi+dw; map[k][x][y] == 0; map[k][x][y] = -2,x+=dh,y+=dw );
            }
            else if( mapVec[hi-1][wi-1] =='>'){
              int dh = 0;
              int dw = 1;
              mapVec[hi-1][wi-1]='v'; 
              for( int x=hi+dh,y=wi+dw; map[k][x][y] == 0; map[k][x][y] = -2,x+=dh,y+=dw );
            }
            else if( mapVec[hi-1][wi-1] =='v'){
              int dh = 1;
              int dw = 0;
              mapVec[hi-1][wi-1]='<'; 
              for( int x=hi+dh,y=wi+dw; map[k][x][y] == 0; map[k][x][y] = -2,x+=dh,y+=dw );
            }
            else if( mapVec[hi-1][wi-1] =='<'){
              int dh = 0;
              int dw = -1;
              mapVec[hi-1][wi-1]='^'; 
              for( int x=hi+dh,y=wi+dw; map[k][x][y] == 0; map[k][x][y] = -2,x+=dh,y+=dw );
            }
          }
        }
      }/*
      for( int i = 0 ; i < h; i++ ){
        cout << mapVec[i] << endl;
      }
      cout << endl;*/
    }
    /*
    for( int k = 0 ; k < 4; k++ ){
      for( int hi = 1 ; hi <= h ; hi++ ){
        for( int wi = 1; wi <=w ; wi ++ ){
          cout << map[k][hi][wi]<<"\t";
        }
        cout <<endl;
      }
      cout << endl;
    }*/
    bool arrived[4][102][102];
    memset(arrived,false,sizeof(arrived));
    priority_queue< pair<int, pair<int,int> > > q;
    int dx[4] ={0,1,0,-1};
    int dy[4] ={1,0,-1,0};
    q.push(make_pair(0,make_pair(sh,sw)));
    int ans = -1;
    while( !q.empty() ){
      pair<int, pair<int,int> > p = q.top();
      int dist = -p.first; 
      int curH = p.second.first;
      int curW = p.second.second;
      q.pop();
      if( arrived[dist%4][curH][curW] ) continue;
      arrived[dist%4][curH][curW] = true;
      if( curH == gh && curW == gw ){
        ans = dist;
        break;
      }
      //cout << dist << " " << curH << " " << curW << endl; 
      for( int di = 0 ; di < 4; di ++ ){
        int d2 = dist+1;
        int nxtH = curH+dx[di];
        int nxtW = curW+dy[di];
        if( map[d2%4][nxtH][nxtW] >= 0 && arrived[d2%4][nxtH][nxtW] == false ){
          q.push(make_pair(-d2,make_pair(nxtH,nxtW)));
        }
      }
    }
    if( ans == -1 ){
      cout <<"Case #"<< i+1 <<": " << "impossible"<<endl;
    }
    else{
      cout <<"Case #" << i+1 <<": "<< ans<<endl;
    }
    
  }
  return 0;
}

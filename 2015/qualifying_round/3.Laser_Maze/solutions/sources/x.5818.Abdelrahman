#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<limits.h>

static short line;
char L,H;
enum dir{UP,RIGHT,DOWN,LEFT};
char arr[4]={'^','>','v','<'};
struct mazez{
	char sign;
	short dirs[4];
}maze[100][100];
typedef struct{
	char x;
	char y;
}place;
static place G;


char direct(char x,char y,short counter)
{
	char i,j,v,tempx=G.x-x,tempy=G.y-y;
	if(counter>=line||counter>=maze[x][y].dirs[(UP+counter)%4])
		return -1;
	if(counter!=0)
	{
		for(i=x+1;i<H;i++)
		{
			if(maze[i][y].sign=='.')
				continue;
			else if(maze[i][y].sign==arr[((((UP-counter)%4)+4)%4)])
				return -1;
			else
				break;
		}
		for(i=x-1;i>=0;i--)
		{
			if(maze[i][y].sign=='.')
				continue;
			else if(maze[i][y].sign==arr[((((DOWN-counter)%4)+4)%4)])
				return -1;
			else
				break;
		}
		for(i=y+1;i<L;i++)
		{
			if(maze[x][i].sign=='.')
				continue;
			else if(maze[x][i].sign==arr[((((LEFT-counter)%4)+4)%4)])
				return -1;
			else
				break;
		}
		for(i=y-1;i>=0;i--)
		{
			if(maze[x][i].sign=='.')
				continue;
			else if(maze[x][i].sign==arr[((((RIGHT-counter)%4)+4)%4)])
				return -1;
			else
				break;
		}
	}
	maze[x][y].dirs[(UP+counter)%4]=counter;
	if(x==G.x&&y==G.y)
	{
		line =counter;
		return 0;
	}
	else if(abs(tempx)<=abs(tempy)&&(tempx!=0||tempy!=0))
	{
		(tempy!=0&&y+tempy/abs(tempy)<L&&y+tempy/abs(tempy)>0&&maze[x][y+tempy/abs(tempy)].sign=='.')?direct(x,y+tempy/abs(tempy),counter+1):0;
		(tempx!=0&&x+tempx/abs(tempx)<H&&x+tempx/abs(tempx)>0&&maze[x+tempx/abs(tempx)][y].sign=='.')?direct(x+tempx/abs(tempx),y,counter+1):0;
		(tempy!=0&&y-tempy/abs(tempy)<L&&y-tempy/abs(tempy)>0&&maze[x][y-tempy/abs(tempy)].sign=='.')?direct(x,y-tempy/abs(tempy),counter+1):0;
		(tempx!=0&&x-tempx/abs(tempx)<H&&x-tempx/abs(tempx)>0&&maze[x-tempx/abs(tempx)][y].sign=='.')?direct(x-tempx/abs(tempx),y,counter+1):0;
	}
	else if(abs(tempx)>abs(tempy))
	{
		(tempx!=0&&x+tempx/abs(tempx)<H&&x+tempx/abs(tempx)>0&&maze[x+tempx/abs(tempx)][y].sign=='.')?direct(x+tempx/abs(tempx),y,counter+1):0;
		(tempy!=0&&y+tempy/abs(tempy)<L&&y+tempy/abs(tempy)>0&&maze[x][y+tempy/abs(tempy)].sign=='.')?direct(x,y+tempy/abs(tempy),counter+1):0;
		(tempx!=0&&x-tempx/abs(tempx)<H&&x-tempx/abs(tempx)>0&&maze[x-tempx/abs(tempx)][y].sign=='.')?direct(x-tempx/abs(tempx),y,counter+1):0;
		(tempy!=0&&y-tempy/abs(tempy)<L&&y-tempy/abs(tempy)>0&&maze[x][y-tempy/abs(tempy)].sign=='.')?direct(x,y-tempy/abs(tempy),counter+1):0;
	}
	return 0;
}

void main()
{
	place S;
	FILE* input=fopen("input.txt","r");
	FILE* output;
	char T,i,v,j,t=0;
	fscanf(input,"%d",&T);
	output=fopen("output.txt","w");
	for(t=1;t<=T;t++)
	{
		line=SHRT_MAX;
		fscanf(input,"%d %d",&H,&L);
		for(i=0;i<H;i++)
		{
			for(j=0;j<L;j++)
			{
				back:
				switch(maze[i][j].sign=fgetc(input))
				{
					case'\n':case' ':goto back;break;
				}
				maze[i][j].dirs[UP]=SHRT_MAX;
				maze[i][j].dirs[RIGHT]=SHRT_MAX;
				maze[i][j].dirs[DOWN]=SHRT_MAX;
				maze[i][j].dirs[LEFT]=SHRT_MAX;
				(maze[i][j].sign=='S')?S.x=i,S.y=j,maze[i][j].sign='.':(maze[i][j].sign=='G')?G.x=i,G.y=j,maze[i][j].sign='.':0;
			}
		}
	
		direct(S.x,S.y,0);
		if(line==SHRT_MAX)
			fprintf(output,"Case #%d: impossible\n",t);
		else
			fprintf(output,"Case #%d: %d\n",t,line);
	}
	fclose(input);
	fclose(output);
}

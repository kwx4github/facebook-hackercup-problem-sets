#include<iostream>
#include<cstdio>
#include<queue>
#include<vector>
#include<algorithm>
#include<cstring>
#include<stack>
#include<map>
#define MOD 1000000009
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii > vii;
typedef pair<ii, int > iii;

int n,m;
char arr[105][105];
bool cantdo[105][105][4];

int dx[4]={0,0,-1,1};
int dy[4]={1,-1,0,0};

ii s,g;

bool in_limits(int x,int y){
	return x>=0 && x<n && y>=0 && y<m;
}


int new_bfs(){
	//int res=0;
	queue<iii > q;
	bool visited[105][105][4]={0};
	q.push(iii(s,0));
	int x=s.first;
	int y=s.second;
	visited[x][y][0]=1;
	while(!q.empty()){
		iii p=q.front();
		q.pop();
		x=p.first.first;
		y=p.first.second;
		int res=p.second;
		//cout << res << endl;
		if(x==g.first && y==g.second)
			return res;
		int i;
		for(i=0;i<4;i++){
			int u=x+dx[i];
			int v=y+dy[i];
			if(!in_limits(u,v))
				continue;
			if(arr[u][v]!='.')
				continue;
			if(cantdo[u][v][(res+1)%4])
				continue;
			if(visited[u][v][(res+1)%4]==0){
				q.push(iii(ii(u,v),res+1));
				visited[u][v][(res+1)%4]=1;
			}
		}
	}
	return -1;
}
		

int main(){
	int t;
	scanf("%d",&t);
	int l=0;
	while(l++<t){
		//memset(visited,0,sizeof(visited));
		memset(cantdo,0,sizeof(cantdo));
		scanf("%d%d",&n,&m);
		int i,j,k,ans;
		for(i=0;i<n;i++)
			scanf("%s",arr+i);
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				if(arr[i][j]=='S'){
					arr[i][j]='.';
					s=ii(i,j);
				}
				else if(arr[i][j]=='G'){
					arr[i][j]='.';
					g=ii(i,j);
				}
			}
		}
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				if(arr[i][j]=='>'){
					for(k=j+1;k<m;k++){
						if(arr[i][k]!='.')
							break;
						cantdo[i][k][0]=true;
					}
					for(k=j-1;k>=0;k--){
						if(arr[i][k]!='.')
							break;
						cantdo[i][k][2]=true;
					}
					for(k=i+1;k<n;k++){
						if(arr[k][j]!='.')
							break;
						cantdo[k][j][1]=true;
					}
					for(k=i-1;k>=0;k--){
						if(arr[k][j]!='.')
							break;
						cantdo[k][j][3]=true;
					}
				}
				else if(arr[i][j]=='v'){
					for(k=j+1;k<m;k++){
						if(arr[i][k]!='.')
							break;
						cantdo[i][k][3]=true;
					}
					for(k=j-1;k>=0;k--){
						if(arr[i][k]!='.')
							break;
						cantdo[i][k][1]=true;
					}
					for(k=i+1;k<n;k++){
						if(arr[k][j]!='.')
							break;
						cantdo[k][j][0]=true;
					}
					for(k=i-1;k>=0;k--){
						if(arr[k][j]!='.')
							break;
						cantdo[k][j][2]=true;
					}
				}
				else if(arr[i][j]=='<'){
					for(k=j+1;k<m;k++){
						if(arr[i][k]!='.')
							break;
						cantdo[i][k][2]=true;
					}
					for(k=j-1;k>=0;k--){
						if(arr[i][k]!='.')
							break;
						cantdo[i][k][0]=true;
					}
					for(k=i+1;k<n;k++){
						if(arr[k][j]!='.')
							break;
						cantdo[k][j][3]=true;
					}
					for(k=i-1;k>=0;k--){
						if(arr[k][j]!='.')
							break;
						cantdo[k][j][1]=true;
					}
				}
				else if(arr[i][j]=='^'){
					for(k=j+1;k<m;k++){
						if(arr[i][k]!='.')
							break;
						cantdo[i][k][1]=true;
					}
					for(k=j-1;k>=0;k--){
						if(arr[i][k]!='.')
							break;
						cantdo[i][k][3]=true;
					}
					for(k=i+1;k<n;k++){
						if(arr[k][j]!='.')
							break;
						cantdo[k][j][2]=true;
					}
					for(k=i-1;k>=0;k--){
						if(arr[k][j]!='.')
							break;
						cantdo[k][j][0]=true;
					}
				}
			}
		}
		/*for(k=0;k<4;k++){
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				cout << cantdo[i][j][k] << " ";
			}
			cout << endl;
		}
		cout << endl;
		}*/
		//cout << endl;
		//if(cantdo[s.first][s.second][0])
			//ans=-1;
		//else
		ans=new_bfs();
		if(ans==-1)
			printf("Case #%d: impossible\n",l);
		else
			printf("Case #%d: %d\n",l,ans);
	}
	return 0;
}
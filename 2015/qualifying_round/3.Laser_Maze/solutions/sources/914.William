package Maze;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Solution {

	final static String PROBLEM_NAME = "laser_maze";

	class Node {
		int x;
		int y;
		int z;

		Node(int x, int y, int z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}
	}

	char[][][] g = new char[101][101][4];
	int[][][] d = new int[101][101][4];
	boolean[][][] v = new boolean[101][101][4];
	int r, c;

	int sx = 0, sy = 0, gx = 0, gy = 0;

	int[] dx = {0, 1, 0, -1};
	int[] dy = {1, 0, -1, 0};

	boolean insideGrid(int x, int y) {
		return x >= 0 && y >= 0 && x < r && y < c;
	}

	int turretType(char p) {
		if (p == '>') return 0;
		if (p == 'v') return 1;
		if (p == '<') return 2;
		if (p == '^') return 3;
		return -1;
	}

	void expandGrid(String[] lines) {

		char[] line;
		char cc;

		for (int i = 0; i < r; i++) {
			line = lines[i].toCharArray();
			for (int j = 0; j < c; j++) {
				for (int k = 0; k < 4; k++) {

					cc = line[j];

					if (cc == 'S') {
						sx = i;
						sy = j;
						cc = '.';

					}

					if (cc == 'G') {
						gx = i;
						gy = j;
						cc = '.';
					}

					d[i][j][k] = 0;
					v[i][j][k] = false;
					g[i][j][k] = cc;
				}
			}
		}
	}

	void extendLasers() {

		char cc;
		int tt, lx, ly;

		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				for (int k = 0; k < 4; k++) {

					cc = g[i][j][k];
					tt = turretType(cc);

					if (tt != -1) {
						tt = (tt + k) % 4;

						lx = i;
						ly = j;
						g[lx][ly][k] = '#';

						while (true) {
							lx = lx + dx[tt];
							ly = ly + dy[tt];
							if (insideGrid(lx, ly) && (g[lx][ly][k] == '.' || g[lx][ly][k] == 'L'))
								g[lx][ly][k] = 'L';
							else
								break;
						}
					}
				}
			}
		}
	}

	void search() {

		Node p;
		int cx, cy, cz, k;

		Queue<Node> q = new LinkedList<Node>();

		q.add(new Node(sx, sy, 0));
		v[sx][sy][0] = true;

		while (!q.isEmpty()) {
			p = q.remove();

			cz = (p.z + 1) % 4;
			for (k = 0; k < 4; k++) {
				cx = p.x + dx[k];
				cy = p.y + dy[k];

				if (insideGrid(cx, cy) && g[cx][cy][cz] == '.' && !v[cx][cy][cz]) {
					q.add(new Node(cx, cy, cz));
					d[cx][cy][cz] = d[p.x][p.y][p.z] + 1;
					v[cx][cy][cz] = true;
				}
			}
		}
	}

	void solve(Scanner sc, PrintWriter pw) {

		int i, k;
		int a;
		String[] lines;

		r = sc.nextInt();
		c = sc.nextInt();
		sc.nextLine();

		lines = new String[r];

		for (i = 0; i < r; i++) lines[i] = sc.nextLine();

		expandGrid(lines);
		extendLasers();
		search();

		a = Integer.MAX_VALUE;
		for (k = 0; k < 4; k++) {
			if (d[gx][gy][k] != 0) a = Math.min(a, d[gx][gy][k]);
		}

		pw.println(a != Integer.MAX_VALUE ? a : "impossible");
	}

	public static void main(String[] args) throws Exception {
		String path = "src/" + Solution.class.getPackage().getName().replace('.', '/') + '/';
		Scanner sc = new Scanner(new FileReader(path + PROBLEM_NAME + ".txt"));
		PrintWriter pw = new PrintWriter(new FileWriter(path + PROBLEM_NAME + ".out"));
		int caseCnt = sc.nextInt();
		sc.nextLine();
		for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
			System.out.println("Processing test case " + (caseNum + 1));
			pw.print("Case #" + (caseNum + 1) + ": ");
			new Solution().solve(sc, pw);
		}
		pw.flush();
		pw.close();
		sc.close();
	}
}

#include<iostream>
#include<queue>
using namespace std;

int t,m,n;
int map[110][110];
int beginP[2],endP[2];
int findR[110][110][4];

queue<int> q;

void fndWay()
{
	int x,y,state,newState;
	while(!q.empty())
		q.pop();
	q.push(beginP[0]);
	q.push(beginP[1]);
	q.push(0);
	findR[beginP[0]][beginP[1]][0]=0;
	while(!q.empty())
	{
		x=q.front();
		q.pop();
		y=q.front();
		q.pop();
		state=q.front();
		q.pop();
		newState=(state+1)%4;

		if(x==endP[0]&&y==endP[1])continue;

		if(map[x-1][y]=='.'&&findR[x-1][y][newState]!=-1)
		{
			if(findR[x-1][y][newState]>findR[x][y][state]+1)
			{
				findR[x-1][y][newState]=findR[x][y][state]+1;
				q.push(x-1);
				q.push(y);
				q.push(newState);
			}					
		}

		if(map[x+1][y]=='.'&&findR[x+1][y][newState]!=-1)
		{
			if(findR[x+1][y][newState]>findR[x][y][state]+1)
			{
				findR[x+1][y][newState]=findR[x][y][state]+1;
				q.push(x+1);
				q.push(y);
				q.push(newState);
			}	
		}

		if(map[x][y-1]=='.'&&findR[x][y-1][newState]!=-1)
		{
			if(findR[x][y-1][newState]>findR[x][y][state]+1)
			{
				findR[x][y-1][newState]=findR[x][y][state]+1;
				q.push(x);
				q.push(y-1);
				q.push(newState);
			}	
		}

		if(map[x][y+1]=='.'&&findR[x][y+1][newState]!=-1)
		{
			if(findR[x][y+1][newState]>findR[x][y][state]+1)
			{
				findR[x][y+1][newState]=findR[x][y][state]+1;
				q.push(x);
				q.push(y+1);
				q.push(newState);
			}	
		}
	}
}


int main()
{
	char wh[120];	
	int tmp,min;

	freopen("laser_maze.txt","r",stdin);
	freopen("laser_maze_output.txt","w",stdout);

	scanf("%d",&t);
	for(int k=1;k<=t;k++)
	{
		memset(findR,1,sizeof(findR));
		memset(map,0,sizeof(map));
		scanf("%d%d",&m,&n);
		for(int i=1;i<=m;i++)
		{			
			scanf("%s",wh);
			for(int j=0;j<n;j++)
			{
				map[j+1][i]=wh[j];
				if(wh[j]=='S')
				{
					beginP[0]=j+1;
					beginP[1]=i;
					map[j+1][i]='.';
				}
				if(wh[j]=='G')
				{
					endP[0]=j+1;
					endP[1]=i;
					map[j+1][i]='.';
				}
			}			
		}
		min=tmp=findR[endP[0]][endP[1]][0];
		for(int i=0;i<=m+1;i++)
		{
			map[0][i]=map[n+1][i]='#';
		}
		for(int i=0;i<=n+1;i++)
		{
			map[i][0]=map[i][m+1]='#';
		}

		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=m;j++)
			{
				if(map[i][j]=='<')
				{
					for(int p=i-1;p>0;p--)
					{
						if(map[p][j]=='.')
							findR[p][j][0]=-1;
						else break;
					}
					for(int p=i+1;p<=n;p++)
					{
						if(map[p][j]=='.')
							findR[p][j][2]=-1;
						else break;
					}
					for(int p=j-1;p>0;p--)
					{
						if(map[i][p]=='.')
							findR[i][p][1]=-1;
						else break;
					}
					for(int p=j+1;p<=m;p++)
					{
						if(map[i][p]=='.')
							findR[i][p][3]=-1;
						else break;
					}
				}
				else if(map[i][j]=='>')
				{
					for(int p=i-1;p>0;p--)
					{
						if(map[p][j]=='.')
							findR[p][j][2]=-1;
						else break;
					}
					for(int p=i+1;p<=n;p++)
					{
						if(map[p][j]=='.')
							findR[p][j][0]=-1;
						else break;
					}
					for(int p=j-1;p>0;p--)
					{
						if(map[i][p]=='.')
							findR[i][p][3]=-1;
						else break;
					}
					for(int p=j+1;p<=m;p++)
					{
						if(map[i][p]=='.')
							findR[i][p][1]=-1;
						else break;
					}
				}
				else if(map[i][j]=='^')
				{
					for(int p=i-1;p>0;p--)
					{
						if(map[p][j]=='.')
							findR[p][j][3]=-1;
						else break;
					}
					for(int p=i+1;p<=n;p++)
					{
						if(map[p][j]=='.')
							findR[p][j][1]=-1;
						else break;
					}
					for(int p=j-1;p>0;p--)
					{
						if(map[i][p]=='.')
							findR[i][p][0]=-1;
						else break;
					}
					for(int p=j+1;p<=m;p++)
					{
						if(map[i][p]=='.')
							findR[i][p][2]=-1;
						else break;
					}
				}
				else if(map[i][j]=='v')
				{
					for(int p=i-1;p>0;p--)
					{
						if(map[p][j]=='.')
							findR[p][j][1]=-1;
						else break;
					}
					for(int p=i+1;p<=n;p++)
					{
						if(map[p][j]=='.')
							findR[p][j][3]=-1;
						else break;
					}
					for(int p=j-1;p>0;p--)
					{
						if(map[i][p]=='.')
							findR[i][p][2]=-1;
						else break;
					}
					for(int p=j+1;p<=m;p++)
					{
						if(map[i][p]=='.')
							findR[i][p][0]=-1;
						else break;
					}
				}
			}
		}

		
		fndWay();
		for(int p=0;p<4;p++)
		{
			if(findR[endP[0]][endP[1]][p]>0&&min>findR[endP[0]][endP[1]][p])
				min=findR[endP[0]][endP[1]][p];
		}
		if(tmp==min)
		{
			printf("Case #%d: impossible\n",k);
		}
		else
		{
			printf("Case #%d: %d\n",k,min);
		}


	}

	fclose(stdin);
	fclose(stdout);

	return 0;
}

import java.io.*;
import java.util.*;

import javax.swing.undo.StateEdit;

public class C {
	FastScanner in = new FastScanner(System.in);
	PrintWriter out = new PrintWriter(System.out);

	int MAX = 10;
	
	class State implements Comparable<State> {
		int x, y, t;

		State(int x, int y, int t) {
			this.x = x;
			this.y = y;
			this.t = t;
		}

		public int compareTo(State s) {
			return t - s.t;
		}
	}
	
	char[] lasers = {'^', '>', 'v', '<'};
	
	char[][] map;
	int[] vx = {0, 1, 0, -1};
	int[] vy = {-1, 0, 1, 0};
	

	boolean isOk(int x, int y, int t) {
		int N = map.length, M = map[0].length;
		for (int d = 0; d < vx.length; d++) {
			int ny = y + vy[d], nx = x + vx[d];
			char ng_laser = lasers[(d + 2) % 4];
			while (nx >= 0 && nx < M && ny >= 0 && ny < N) {
				int dir = -1;
				switch (map[ny][nx]) {
				case '^' :
					dir = 0;
					break;
				case '>' :
					dir = 1;
					break;
				case 'v' :
					dir = 2;
					break;
				case '<' :
					dir = 3;
					break;
				}
				
				if (dir != -1) {
					char now_laser = lasers[(dir + t) % 4];
					if (now_laser == ng_laser) return false;
				}
				
				ny += vy[d];
				nx += vx[d];
			}
		}
		return true;
	}
	
	boolean isValid(char c) {
		return c == '.' || c == 'S' || c == 'G';
	}
	
	void solve() {
		int N = in.nextInt(), M = in.nextInt();
		map = new char[N][];
		for (int i = 0; i < N; i++) {
			map[i] = in.next().toCharArray();
		}
		
		int sx = 0, sy = 0;
		int gx = 0, gy = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				switch (map[i][j]) {
				case 'S' :
					sx = j;
					sy = i;
					break;
				case 'G' :
					gx = j;
					gy = i;
					break;
				}
			}
		}
		
		int res = Integer.MAX_VALUE;
		boolean[][][] visited = new boolean[MAX][N][M];
		for (int i = 0; i < MAX; i++) for (int j = 0; j < N; j++) 
			Arrays.fill(visited[i][j], false);
		visited[0][sy][sx] = true;
		
		PriorityQueue<State> pq = new PriorityQueue<State>();
		pq.add(new State(sx, sy, 0));
		while (!pq.isEmpty()) {
			State st = pq.poll();
			if (st.x == gx && st.y == gy) {
				res = Math.min(res, st.t);
				break;
			}
//			out.println(st.x + " " + st.y + " " + st.t);
			int nt = st.t + 1;
 			for (int d = 0; d < vx.length; d++) {
				int nx = st.x + vx[d], ny = st.y + vy[d];
				if (nx >= 0 && nx < M && ny >= 0 && ny < N && nt < MAX && isValid(map[ny][nx])) {
					if (isOk(nx, ny, nt) && !visited[nt][ny][nx]) {
						visited[nt][ny][nx] = true;
						pq.add(new State(nx, ny, nt));
					}
				}
			}
		}
		
		out.println(res == Integer.MAX_VALUE ? "impossible" : res);
	}

	public void run() {
		int T = in.nextInt();
		for (int caseN = 1; caseN <= T; caseN++) {
			out.print("Case #" + caseN + ": ");
			solve();
		}

		out.close();
	}

	public static void main(String[] args) {
		new C().run();
	}

	public void mapDebug(int[][] a) {
		System.out.println("--------map display---------");

		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a[i].length; j++) {
				System.out.printf("%3d ", a[i][j]);
			}
			System.out.println();
		}

		System.out.println("----------------------------");
		System.out.println();
	}

	public void debug(Object... obj) {
		System.out.println(Arrays.deepToString(obj));
	}

	class FastScanner {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;

		public FastScanner(InputStream stream) {
			this.stream = stream;
			//stream = new FileInputStream(new File("dec.in"));

		}

		int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		boolean isEndline(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		int[] nextIntArray(int n) {
			int[] array = new int[n];
			for (int i = 0; i < n; i++)
				array[i] = nextInt();

			return array;
		}

		int[][] nextIntMap(int n, int m) {
			int[][] map = new int[n][m];
			for (int i = 0; i < n; i++) {
				map[i] = in.nextIntArray(m);
			}
			return map;
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		long[] nextLongArray(int n) {
			long[] array = new long[n];
			for (int i = 0; i < n; i++)
				array[i] = nextLong();

			return array;
		}

		long[][] nextLongMap(int n, int m) {
			long[][] map = new long[n][m];
			for (int i = 0; i < n; i++) {
				map[i] = in.nextLongArray(m);
			}
			return map;
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		double[] nextDoubleArray(int n) {
			double[] array = new double[n];
			for (int i = 0; i < n; i++)
				array[i] = nextDouble();

			return array;
		}

		double[][] nextDoubleMap(int n, int m) {
			double[][] map = new double[n][m];
			for (int i = 0; i < n; i++) {
				map[i] = in.nextDoubleArray(m);
			}
			return map;
		}

		String next() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		String[] nextStringArray(int n) {
			String[] array = new String[n];
			for (int i = 0; i < n; i++)
				array[i] = next();

			return array;
		}

		String nextLine() {
			int c = read();
			while (isEndline(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndline(c));
			return res.toString();
		}
	}
}


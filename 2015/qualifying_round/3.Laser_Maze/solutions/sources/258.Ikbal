#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

//clockwise order
const int dx[] = {-1,0,+1,0};
const int dy[] = {0,+1,0,-1};

const int N = 110;

enum{ FREE, WALL, LASER};

char s[N][N];
int a[N][N];
int dir[N][N];

bool safe[4][N][N];
int what[1024];

struct node{
    int x, y, t;
    node() {}
    node(int _x,int _y,int _t) : x(_x), y(_y), t(_t) {}
};

int dist[4][N][N];

void solve(){
    int n = read();
    int m = read();
    for(int i = 1; i <= n; i++)
        scanf(" %s", s[i] + 1);
    int sx, sy, gx, gy;
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            if(s[i][j] == 'S'){
                sx = i;
                sy = j;
                a[i][j] = FREE;
            }else if(s[i][j] == 'G'){
                gx = i;
                gy = j;
                a[i][j] = FREE;
            }else if(s[i][j] == '.'){
                a[i][j] = FREE;
            }else if(s[i][j] == '#'){
                a[i][j] = WALL;
            }else{
                a[i][j] = LASER;
                dir[i][j] = what[s[i][j]];
            }
        }
    }
    for(int t = 0; t < 4; t++){
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(a[i][j] == FREE)
                    safe[t][i][j] = true;
                else
                    safe[t][i][j] = false;
            }
        }
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(a[i][j] == LASER){
                    int d = (dir[i][j] + t) % 4;
                    int x = i + dx[d], y = j + dy[d];
                    while(x >= 1 && x <= n && y >= 1 && y <= m && a[x][y] == FREE){
                        safe[t][x][y] = false;
                        x += dx[d];
                        y += dy[d];
                    }
                }
            }
        }
    }
    queue<node> q;
    memset(dist, -1, sizeof dist);
    dist[0][sx][sy] = 0;
    q.push(node(sx, sy, 0));
    int ans = inf;
    while(!q.empty()){
        int x = q.front().x;
        int y = q.front().y;
        int t = q.front().t;
        q.pop();
        int nt = (t + 1) % 4;
        if(x == gx && y == gy){
            umin(ans, dist[t][x][y]);
        }
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m && safe[nt][nx][ny] && dist[nt][nx][ny] == -1){
                dist[nt][nx][ny] = dist[t][x][y] + 1;
                q.push(node(nx, ny, nt));
            }
        }
    }
    if(ans == inf){
        puts("impossible");
    }else{
        printf("%d\n", ans);
    }
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    what['^'] = 0;
    what['>'] = 1;
    what['v'] = 2;
    what['<'] = 3;

    int t = read();

    for(int it = 1; it <= t; it++){
        printf("Case #%d: ", it);
        solve();
    }

    return 0;
}

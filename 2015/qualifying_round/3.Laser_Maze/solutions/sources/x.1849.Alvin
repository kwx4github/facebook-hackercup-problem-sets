#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<string>
#include<map>
#include<utility>
#include<vector>
#include<algorithm>
#include<cmath>
#include<stack>
#include<queue>

#define LL long long
#define MP make_pair
#define PB push_back
#define ii pair<int,int>
using namespace std;
int t,n,m;
char in[111][111];
string ar[4][111];
bool dp[4][111][111];
ii S,G;
int dx[] = {0,0,-1,1};
int dy[] = {-1,1,0,0};
void update(int a,int b,int c){
	int k;
	if(ar[a][b][c] == '^')	k = 2;
	if(ar[a][b][c] == '<')	k = 0;
	if(ar[a][b][c] == 'v')	k = 3;
	if(ar[a][b][c] == '>')	k = 1;
	for(int x = b + dx[k],y = c + dy[k];x>=0 && x<n && y>=0 && y<m; x+=dx[k],y+=dy[k]){
		if(ar[a][x][y] =='>' || ar[a][x][y] == 'v' || ar[a][x][y] == '<' || ar[a][x][y] == '^')	break;
		if(ar[a][x][y] =='#')	break;
		ar[a][x][y] = 'x';
	}
}
queue<pair<ii,int > > q;
int BFS(int s1,int s2,int t1,int t2){
	int ret = -1;
	while(!q.empty())	q.pop();
	memset(dp,0,sizeof(dp));
	q.push(MP(MP(s1,s2),0));
	dp[0][s1][s2] = 1;
	while(!q.empty()){
		int x = q.front().first.first;
		int y = q.front().first.second;
		int d = q.front().second;
		q.pop();
		//cout<<x<<" "<<y<<" "<<d<<endl;
		if(x == t1 && y == t2){
			ret = d;
			break;
		}
		int xx,yy,dd=(d+1)%4;
		for(int i=0;i<4;i++){
			xx = x+dx[i];
			yy = y+dy[i];
			if(xx<0 || xx>=n || yy<0 || yy>=m)	continue;
			if(ar[dd][xx][yy] == '#')	continue;
			if(ar[dd][xx][yy] == '^')	continue;
			if(ar[dd][xx][yy] == '>')	continue;
			if(ar[dd][xx][yy] == 'v')	continue;
			if(ar[dd][xx][yy] == '<')	continue;
			if(ar[dd][xx][yy] == 'x')	continue;
			if(dp[dd][xx][yy])	continue;
			dp[dd][xx][yy] = 1;
			q.push(MP(MP(xx,yy),d+1));
		}
	}
	return ret;
}


int main(){
	scanf("%d",&t);
	for(int z=1;z<=t;z++){
		printf("Case #%d: ",z);
		scanf("%d %d",&n,&m);
		for(int i=0;i<n;i++){
			scanf("%s",in[i]);
			ar[0][i] = ar[1][i] = ar[2][i] = ar[3][i] = in[i];
			for(int j=0;j<m;j++)
				if(in[i][j]=='S')	S = MP(i,j);
				else if(in[i][j]=='G')	G = MP(i,j);
		}
		for(int k=1;k<4;k++)
			for(int i=0;i<n;i++)
				for(int j=0;j<m;j++)
					if(ar[k-1][i][j] == '>')	ar[k][i][j] = '^';
					else if(ar[k-1][i][j] == '^')	ar[k][i][j] = '<';
					else if(ar[k-1][i][j] == '<')	ar[k][i][j] = 'v';
					else if(ar[k-1][i][j] == 'v')	ar[k][i][j] = '>';
		
		for(int k=0;k<4;k++)
			for(int i=0;i<n;i++)
				for(int j=0;j<m;j++)
					if(ar[k][i][j] == '^'||ar[k][i][j] == '<'||ar[k][i][j] == 'v'||ar[k][i][j] == '>')
						update(k,i,j);
		
		
		int ans = BFS(S.first,S.second,G.first,G.second);
		if(ans==-1)	printf("impossible\n");
		else		printf("%d\n",ans);
	}
	return 0;
}
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <queue>

using namespace std ;

char map[110][110] ;
int sx, sy, ex, ey, mx, my ;
int done[110][110][4] ;
struct pos
{
	int x, y, step ;
} ;
queue<pos> q ;

char turn(char in, int step)
{
	int cur ;
	if(in=='^') cur = 0 ;
	if(in=='>') cur = 1 ;
	if(in=='v') cur = 2 ;
	if(in=='<') cur = 3 ;
	cur =  (cur+step)%4 ;
	return "^>v<"[cur] ;
}

bool good(const pos &p)
{
	if(done[p.y][p.x][p.step%4]==1)
		return false ;
		
	done[p.y][p.x][p.step%4] = 1 ;
	
	for(int i=1;p.x+i<mx;i++)
	{
		if(map[p.y][p.x+i]=='.')
			continue ;
		else if(map[p.y][p.x+i]=='#')
			break ;
		else
		{
			if(turn(map[p.y][p.x+i], p.step)=='<')
				return false ;
			break ;
		}
	}
	
	for(int i=1;p.x-i>=0;i++)
	{
		if(map[p.y][p.x-i]=='.')
			continue ;
		else if(map[p.y][p.x-i]=='#')
			break ;
		else
		{
			if(turn(map[p.y][p.x-i], p.step)=='>')
				return false ;
			break ;
		}
	}
	
	for(int i=1;p.y+i<my;i++)
	{
		if(map[p.y+i][p.x]=='.')
			continue ;
		else if(map[p.y+i][p.x]=='#')
			break ;
		else
		{
			if(turn(map[p.y+i][p.x], p.step)=='^')
				return false ;
			break ;
		}
	}
	
	for(int i=1;p.y-i>=0;i++)
	{
		if(map[p.y-i][p.x]=='.')
			continue ;
		else if(map[p.y-i][p.x]=='#')
			break ;
		else
		{
			if(turn(map[p.y-i][p.x], p.step)=='v')
				return false ;
			break ;
		}
	}
	
	return true ;
}

int main(void)
{
	int tc ;
	cin >> tc ;
	
	for(int c=1;c<=tc;c++)
	{
		cin >> my >> mx ;
		for(int y=0;y<my;y++)
		{
			scanf("%s", map[y]) ;
			for(int x=0;x<mx;x++)
				if(map[y][x]=='S')
				{
					map[y][x] = '.' ;
					sx = x ;
					sy = y ;
				}
				else if(map[y][x]=='G')
				{
					map[y][x] = '.' ;
					ex = x ;
					ey = y ;
				}
		}
		
		memset(done, 0, sizeof(done)) ;
		while(q.size()>0)
			q.pop() ;
		
		pos p ;
		p.x = sx ;
		p.y = sy ;
		p.step = 0 ;
		q.push(p) ;
		
		printf("Case #%d: ", c) ;
		
		bool succ = false ;
		
		while(q.size())
		{
			p = q.front() ;
			q.pop() ;
			
			if(p.x==ex && p.y==ey)
			{
				succ = true ;
				printf("%d\n", p.step) ;
				break ;
			}
			
			p.step++ ;
			if(p.x>0)
			{
				p.x-- ;
				if(good(p))
					q.push(p) ;
				p.x++ ;
			}
			if(p.x+1<mx)
			{
				p.x++ ;
				if(good(p))
					q.push(p) ;
				p.x-- ;
			}
			if(p.y>0)
			{
				p.y-- ;
				if(good(p))
					q.push(p) ;
				p.y++ ;
			}
			if(p.y+1<my)
			{
				p.y++ ;
				if(good(p))
					q.push(p) ;
				p.y-- ;
			}
		}
		
		if(!succ)
			printf("impossible\n") ;
	}
	
	return 0 ;
}

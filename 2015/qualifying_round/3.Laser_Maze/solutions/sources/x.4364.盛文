//by david942j
#include <cstdio>
#include <cstring>
#include <set>
#include <map>
#include <ctime>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <cassert>
#include <queue>
#include <stack>
#include <cstdlib>
#define openfile(s) freopen(s".in","r",stdin);freopen(s".out","w",stdout)
#define mpr std::make_pair
#define lg(x) (31-__builtin_clz(x))
#define __count __builtin_popcount
#define X first
#define Y second
#define mst(x) memset(x,0,sizeof(x))
#define mst1(x) memset(x,-1,sizeof(x))
#define ALL(c) (c).begin(),(c).end()
#define FOR(i,n) for(int i=0;i<n;i++)
#define FOR1(i,n) for(int i=1;i<=n;i++)
#define FORit(it,c) for(__typeof(c.begin()) it=c.begin();it!=c.end();++it)
#define pb push_back
#define RID(x) int x;RI(x)
using namespace std;
typedef long long LL;
typedef double LD;
typedef vector<int> VI;
typedef std::pair<int,int> PII;
template<class T>inline void maz(T &a,T b){if(a<b)a=b;}
template<class T>inline void miz(T &a,T b){if(a>b)a=b;}
template<class T>inline T abs(T a){return a>0?a:-a;}
inline int max(int a,int  b){return a>b?a:b;}
void RI() {}
template<typename... T>
void RI( int& head, T&... tail ) {
    scanf("%d",&head);
    RI(tail...);
}
const int N=501,INF=1<<26;
const LD EPS=1e-9;
char s[N][N];
char board[4][N][N];
int dis[4][N][N];
int n,m;
char L[]="^>v<";
int laser(char c) {
    FOR(i,4)if(L[i]==c)return i;
    return -1;
}
int dx[]={-1,0,1,0},dy[]={0,1,0,-1};
void make_board() {
    mst(board);
    FOR(k,4)FOR(i,n)FOR(j,m) {
        board[k][i][j]=s[i][j];
        if(~laser(s[i][j]))board[k][i][j]=L[(laser(s[i][j])+k+1)%4];
        if(s[i][j]=='S')board[k][i][j]='.';
    }

    //FOR(k,4) {FOR(i,n)printf("%s\n",board[k][i]);puts("==");}

    FOR(k,4)FOR(i,n)FOR(j,m)if(~laser(board[k][i][j])) {
        int d=laser(board[k][i][j]);
        int a=i+dx[d],b=j+dy[d];
        board[k][i][j]='#';
        while(true) {
            if(a<0||a>=n||b<0||b>=m||board[k][a][b]=='#')break;
            board[k][a][b]='#';
            a+=dx[d];b+=dy[d];
        }
    }
    // puts("--------");
    // FOR(k,4) {FOR(i,n)printf("%s\n",board[k][i]);puts("==");}
}
int BFS(int x,int y) {
    queue<int>Q;
    auto push = [&](int k,int i,int j,int d) {
        k=(k+4)&3;
        if(i<0||i>=n||j<0||j>=m||board[k][i][j]=='#'||dis[k][i][j]!=-1)return;
        dis[k][i][j]=d;
        Q.push(k);
        Q.push(i);
        Q.push(j);
    };
    auto pop = [&](int &a) {
        a=Q.front();
        Q.pop();
    };
    FOR(k,4)FOR(i,n)FOR(j,m)dis[k][i][j]=-1;
    FOR(k,4)push(0,x+dx[k],y+dy[k],1);
    while(!Q.empty()) {
        int k,i,j;
        pop(k);pop(i);pop(j);
        if(board[k][i][j]=='G')return dis[k][i][j];
        FOR(l,4)
            push(k+1,i+dx[l],j+dy[l],dis[k][i][j]+1);
    }
    return -1;
}
int main() {
    RID(T);int w=1;
    while(T--) {
        RI(n,m);
        FOR(i,n)scanf("%s",s[i]);
        make_board();
        int ans;
        FOR(i,n)FOR(j,m)if(s[i][j]=='S')
            ans=BFS(i,j);
        printf("Case #%d: ",w++);
        if(ans==-1)puts("impossible");
        else printf("%d\n",ans);
    }
}
/*

*/
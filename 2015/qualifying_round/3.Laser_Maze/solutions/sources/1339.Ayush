#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<algorithm>
#include<bitset>
#include<list>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<cmath>
#include<string>
#include<cstring>
#include<sstream>
#include<climits>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;

#define S(x) scanf("%d",&x)
#define SD(x) scanf("%lf",&x)
#define SL(x) scanf("%lld",&x)
#define pb(x) push_back(x)
#define mp make_pair
#define F(i, a, b) for (int i = int(a); i < int(b); i++)
#define forit(it, a) for (it = (a).begin(); it != (a).end(); it++)
#define M(x,i) memset(x,i,sizeof(x))

/* -------------------CODE GOES HERE---------------------- */

int board[101][101][4];
int dx[] = {1,0,-1,0};
int dy[] = {0,1,0,-1};

int main(){
	
	int T, M, N; S(T);
	int tst = 1;
	string row;

	ii G;
	pair<ii, int> S,c,t;
	int x, ans;


	while(T--){

		queue< pair<ii, int> > q;
		S(M); S(N);
		getline(cin,row);

		F(i,0,M) F(j,0,N) F(k,0,4) board[i][j][k] = INT_MAX;

		F(i,0,M){
			getline(cin, row);

			F(j,0,N) {

				if(row[j] == '#'){
					F(k,0,4) board[i][j][k] = -1;
				}

				else if(row[j] == 'S'){
					S.first.first = i;
					S.first.second = j;
					S.second = 0;
				}

				else if(row[j] == 'G'){
					G.first = i;
					G.second = j;
				}

				else if(row[j] == '^'){
					F(k,0,4) board[i][j][k] = (k % 4); 
				}

				else if(row[j] == '>'){
					F(k,0,4) board[i][j][k] = ((k+1) % 4); 
				}

				else if(row[j] == 'v'){
					F(k,0,4) board[i][j][k] = ((k+2) % 4); 
				}

				else if(row[j] == '<'){
					F(k,0,4) board[i][j][k] = ((k+3) % 4); 
				}
			}
		}

		F(i,0,M) F(j,0,N) F(k,0,4){
			
			if(board[i][j][k] == 0){
				x = i;
				while(((x-1) >= 0) && ((board[x-1][j][k] == INT_MAX) || (board[x-1][j][k] == -2))) {
					board[x-1][j][k] = -2;
					x--;
				}
			}

			else if(board[i][j][k] == 1){
				x = j;
				while(((x+1) < N) && ((board[i][x+1][k] == INT_MAX) || (board[i][x+1][k] == -2))) {
					board[i][x+1][k] = -2;
					x++;
				}
			}

			else if(board[i][j][k] == 2){
				x = i;
				while(((x+1) < M) && ((board[x+1][j][k] == INT_MAX) || (board[x+1][j][k] == -2))) {
					board[x+1][j][k] = -2;
					x++;
				}
			}

			else if(board[i][j][k] == 3){
				x = j;
				while(((x-1) >= 0) && ((board[i][x-1][k] == INT_MAX) || (board[i][x-1][k] == -2))) {
					board[i][x-1][k] = -2;
					x--;
				}
			}
		}

		F(i,0,M) F(j,0,N) F(k,0,4) if(board[i][j][k] != INT_MAX) board[i][j][k] = -1;

		board[S.first.first][S.first.second][S.second] = 0;
		q.push(S);

		while(!q.empty()){
			
			c = q.front();
			q.pop();

			F(i,0,4){
				t.first.first = c.first.first + dx[i];
				t.first.second = c.first.second + dy[i];
				t.second = ((c.second + 1) % 4);

				if(t.first.first >= 0 && t.first.first < M && t.first.second >= 0 && t.first.second < N){
					if(board[t.first.first][t.first.second][t.second] == INT_MAX){
						board[t.first.first][t.first.second][t.second] = board[c.first.first][c.first.second][c.second] + 1;
						q.push(t);
					}
				} 
			}
		}

		ans = INT_MAX;

		F(k,0,4){
			if(board[G.first][G.second][k] >= 0) ans = min(ans, board[G.first][G.second][k]);
		}

		(ans != INT_MAX) ? printf("Case #%d: %d\n", tst++, ans) : printf("Case #%d: impossible\n", tst++);
	}
}
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class Maze {

	public static Map<Character, Character> nextLaser = new HashMap<>();
	
	static{
		nextLaser.put('^', '>');
		nextLaser.put('>', 'v');
		nextLaser.put('v', '<');
		nextLaser.put('<', '^');
	}
	
	public static void main(String[] args) throws IOException {
		Scanner scan = new Scanner(new File("laser_maze.txt"));
		PrintWriter printer = new PrintWriter(new File("answers3.txt"));
		int tests = scan.nextInt(), nr = 1;
		while(tests-- > 0){
			
			List<Set<Square>> moves = new ArrayList<>();
			Set<Square> nowPos = new HashSet<>();

			int x = scan.nextInt();
			int y =  scan.nextInt();
			char [][] map = new char[x+2][y+2];
			for (int i = 0; i < map.length; i++)
				Arrays.fill(map[i], '#');
			
			Square start = null;
			Square end = null;
			for (int i = 1; i <= x; i++){
				String c = scan.next();
				for (int j = 0; j < c.length(); j++){
					map[i][j+1] = c.charAt(j);
					if (map[i][j+1] == 'S'){ 
						start = new Square(i, j+1);
						map[i][j+1] = '.';
					}
					else if (map[i][j+1] == 'G'){ 
						end = new Square(i, j+1); 
						map[i][j+1] = '.';
					}
				}
			}
			nowPos.add(start);
			
			for (int i = 0; i < 4; i++)
				moves.add(findDangerousSquares(map));
			
			int nrMoves = 0;
			while(!nowPos.contains(end) && nrMoves < x*y){
				Set<Square> newNext = new HashSet<>();
				int modMove = nrMoves%4;
				for (Square sq : nowPos){
					int row = sq.x;
					int col = sq.y;
					for (int i = -1; i <= 1; i++)
						for(int j = -1; j <= 1; j++){
							if ((i == 0 && j == 0) || (i != 0 && j != 0))		//is diagonal
								continue;
							int nextRow = row+i;
							int nextCol = col+j;
							Square newSquare = new Square(nextRow, nextCol);
							if (!moves.get(modMove).contains(newSquare) && map[nextRow][nextCol] == '.'){
								newNext.add(newSquare);
							}
						}
				}
				nowPos = newNext;
				nrMoves++;
			}
			if (nowPos.contains(end))
				printer.write("Case #" + (nr++) + ": "+ nrMoves + "\n");
			else
				printer.write("Case #" + (nr++) + ": impossible\n");
		//	printer.write("Case #" + (nr++) + ": " + min + " " + max + "\n");
		}
		printer.flush();
		printer.close();
		
		scan.close();
	}
	    private static Set<Square> findDangerousSquares(char[][] map) {
    	Set<Square> results = new HashSet<>();
    	
    	for (int i = 1; i < map.length; i++){
    		for (int j = 1; j < map[i].length; j++){
    			if (map[i][j] == '^'){
    				results.addAll(fillDangerous(map, i, j, 0, 1));
    				map[i][j] = nextLaser.get('^');
    			}
    			else if (map[i][j] == '>'){
    				results.addAll(fillDangerous(map, i, j, 1, 0));
    				map[i][j] = nextLaser.get('>');
    			}
    			else if (map[i][j] == 'v'){
    				results.addAll(fillDangerous(map, i, j, 0, -1));
    				map[i][j] = nextLaser.get('v');
    			}
    			else if (map[i][j] == '<'){
    				results.addAll(fillDangerous(map, i, j, -1, 0));
    				map[i][j] = nextLaser.get('<');
    			}
    			
    		}
    	}
		return results;
	}
    
    

	private static Set<Square> fillDangerous(char[][] map, int i, int j, int r, int c){
		Set<Square> squares = new HashSet<>();
		while(map[i+r][j+c] == '.'){
			squares.add(new Square(i+r, j+c));
			i += r;
			j += c;
		}
		return squares;
	}


	public static class Square{
		
		int x;
		int y;
		
		Square(int x, int y){
			this.x = x;
			this.y = y;
		}
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + x;
			result = prime * result + y;
			return result;
		}
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Square other = (Square) obj;
			if (x != other.x)
				return false;
			if (y != other.y)
				return false;
			return true;
		}

		
	}

}

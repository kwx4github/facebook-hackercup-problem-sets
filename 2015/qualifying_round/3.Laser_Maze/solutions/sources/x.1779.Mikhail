/*
 * Template for code jam - different includes and templates
 * Real task code is in the end
 * Mikhail Dektyarow <mihail.dektyarow@gmail.com>, 2009
 */
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cassert>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <sstream>
#include <numeric>
#include <stack>
#include <bitset>
#include <iostream>
#include <string>
using namespace std;

/*
 * DEFINES
 */
#define FOR(i, a, b) for (int i(a), _b(b); i <= _b; ++i)
#define FORD(i, a, b) for (int i(a), _b(b); i >= _b; --i)
#define REP(i, n) for (int i(0), _n(n); i < _n; ++i)
#define REPD(i, n) for (int i((n)-1); i >= 0; --i)
#define ALL(c) (c).begin(), (c).end()
#define SIZE(X) ((int)(X.size()))
#define LENGTH(X) ((int)(X.length()))

/*
 * Types
 */
typedef pair<int,int> ipair;
typedef long long int int64;
typedef unsigned long long uint64;

/*
 * Different useful templates
 */
template<typename T> void remin(T& a, const T& b) { if (b < a) a = b; }
template<typename T> void remax(T& a, const T& b) { if (b > a) a = b; }
template<class T1, class T2>inline istream& operator>> (istream& s, pair<T1, T2> &p) {	return s >> p.first >> p.second;}
template<class T1, class T2>inline ostream& operator<< (ostream& s, const pair<T1, T2>p) {	return s << "(" << p.first << " " << p.second << ")";}
template<class T1>inline ostream& operator<< (ostream& s, const vector<T1> container) {
	for (typename vector<T1>::const_iterator i = container.begin(); i != container.end(); i++) s << *i << " ";
	return s;
}
template<class T1>inline istream& operator>> (istream&s, vector<T1> &container) {
	for (typename vector<T1>::iterator i = container.begin(); i != container.end(); i++) s >> *i;
	return s;
}
/*
 * Euclide's algorithm
 */
template<class T> inline T euclide(T a,T b,T &x,T &y)
  {if(a<0){T d=euclide(-a,b,x,y);x=-x;return d;}
   if(b<0){T d=euclide(a,-b,x,y);y=-y;return d;}
   if(b==0){x=1;y=0;return a;}else{T d=euclide(b,a%b,x,y);T t=x;x=y;y=t-(a/b)*y;return d;}}
/*
 * Factorizing a number
 */
template<class T> inline vector<pair<T,int> > factorize(T n)
{vector<pair<T,int> > R;for (T i=2;n>1;){if (n%i==0){int C=0;for (;n%i==0;C++,n/=i);R.push_back(make_pair(i,C));}i++;if (i>n/i) i=n;}if (n>1) R.push_back(make_pair(n,1));return R;}
template<class T> inline bool isPrimeNumber(T n)
  {if(n<=1)return false;for (T i=2;i*i<=n;i++) if (n%i==0) return false;return true;}
//Searching prime numbers
//Using Sieve of Atkin (http://en.wikipedia.org/wiki/Sieve_of_Atkin)
vector<int> gen_primes(int limit) {
	int sqr_lim;
	int x2, y2;
	int n;
	vector<bool> is_prime(limit+1, false);
	sqr_lim = (int)sqrt((long double)limit);
	is_prime[2] = true;
	is_prime[3] = true;
	x2 = 0;
	for (int i = 1; i <= sqr_lim; i++) {
		x2 += 2 * i - 1;
		y2 = 0;
		for (int j = 1; j <= sqr_lim; j++) {
			y2 += 2 * j - 1;
			n = 4 * x2 + y2;
			if ((n <= limit) && (n % 12 == 1 || n % 12 == 5))
				is_prime[n] = !is_prime[n];
			n -= x2;
			if ((n <= limit) && (n % 12 == 7))
				is_prime[n] = !is_prime[n];
			n -= 2 * y2;
			if ((i > j) && (n <= limit) && (n % 12 == 11))
				is_prime[n] = !is_prime[n];
		}
	}
	for (int i = 5; i <= sqr_lim; i++) {
		if (is_prime[i]) {
			n = i * i;
			for (int j = n; j <= limit; j += n) {
				is_prime[j] = false;
			}
		}
	}
	int primes_count = 0;
	for (int i = 2; i < limit; i++) primes_count += is_prime[i];
	vector<int> primes;
	primes.reserve(primes_count);
	for (int i=2; i < limit; i++) if (is_prime[i]) primes.push_back(i);
	return primes;
}
//Translating string to different types
template<class T> string toString(T n){ostringstream ost;ost<<n;ost.flush();return ost.str();}//NOTES:toString(
int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}//NOTES:toInt(
int64 toInt64(string s){int64 r=0;istringstream sin(s);sin>>r;return r;}//NOTES:toInt64(
double toDouble(string s){double r=0;istringstream sin(s);sin>>r;return r;}//NOTES:toDouble(

/*
 * Real code
 */

char rotate(char c) {
    switch (c) {
        case '<':
            return '^';
            break;
        case '^':
            return '>';
            break;
        case '>':
            return 'v';
            break;
        case 'v':
            return '<';
            break;
        default:
            return c;
    };
}

vector<vector<char>> rotate(vector<vector<char>> s) {
    for (auto& i : s) {
        for (auto& j : i) {
            j = rotate(j);
        }
    }
    return s;
}

ipair get_dir(char c) {
    switch (c) {
        case '<':
            return {0, -1};
            break;
        case '^':
            return {-1, 0};
            break;
        case '>':
            return {0, 1};
            break;
        case 'v':
            return {1, 0};
            break;
    };
    return {0, 0};
}

void fill(vector<vector<char>>& s) {
    REP(i, s.size()) {
        REP(j, s[i].size()) {
            auto dir = get_dir(s[i][j]);
            if (dir.first || dir.second) {
                for (size_t i0 = i + dir.first, j0 = j + dir.second; i0 < s.size() && j0 < s[i0].size() && (s[i0][j0] == '.' || s[i0][j0] == 'S' || s[i0][j0] == 'G'); i0 += dir.first, j0 += dir.second) {
                    s[i0][j0] = '#';
                }
                s[i][j] = '#';
            }
        }
    }
}

int main(void) {
	int __number_of_cases;
	cin >> __number_of_cases;
	REP(__number_of_case, __number_of_cases) {
        size_t m, n;
        cin >> m >> n;
        vector<vector<char>> lab(m, vector<char>(n));
        cin >> lab;
        ipair start, finish;
        for (size_t i = 0; i < m; ++i) {
            for (size_t j = 0; j < n; ++j) {
                if (lab[i][j] == 'S') {
                    start = {i, j};
                }
                if (lab[i][j] == 'G') {
                    finish = {i, j};
                }
            }
        }
        vector<vector<vector<char>>> maps;
        for (size_t i = 0; i < 4; ++i) {
            maps.push_back(lab);
            fill(maps.back());
            lab = rotate(lab);
        }
        struct TV {
            int level, time, x, y;
        };
        deque<TV> targets;
        targets.emplace_back(TV{0, 0, start.first, start.second});
        bool ok = false;
        vector<ipair> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        while (!targets.empty()) {
            auto target = targets.front();
            targets.pop_front();
            if (maps[target.level][target.x][target.y] == '_') {
                continue;
            }
            if (maps[target.level][target.x][target.y] == 'G') {
                cout << "Case #" << __number_of_case+1 << ": " << target.time << endl;
                ok = true;
                break;
            }
            maps[target.level][target.x][target.y] = '_';
            auto next_level = (target.level + 1) % 4;
            for (const auto& dir : dirs) {
                auto nx = target.x + dir.first, ny = target.y + dir.second;
                if (nx >= 0 && nx < lab.size() && ny >= 0 && ny < lab[nx].size()) {
                    if (maps[next_level][nx][ny] != '#') {
                        targets.emplace_back(TV{next_level, target.time + 1, nx, ny});
                    }
                }
            }
        }
        if (!ok) {
            cout << "Case #" << __number_of_case+1 << ": impossible" << endl;
        }
	}
    return 0;
}

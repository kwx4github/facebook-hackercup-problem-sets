#include<cstdio>
#include<fstream>
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<vector>
#include<bitset>
#include<deque>
#include<queue>
#include<set>
#include<map>
#include<cmath>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<unordered_map>

#define ll long long
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pll pair<ll,ll>

using namespace std;

const int nmax = 105;
const int inf = 1 << 30;

int dx[] = { -1, 0, 0, 1};
int dy[] = {0, -1, 1, 0};

int t, I, n, m, i, j, k, sx, sy, fx, fy;
int sol, newx, newy, newz, x, y, z;
int bad[nmax][nmax][4], best[nmax][nmax][4];
char a[nmax][nmax];
bool inq[nmax][nmax][4];

deque<pair<pii, int>> q;

int main()
{
    freopen("test.in", "r", stdin);
    freopen("test.out", "w", stdout);

    scanf("%d", &t);

    for(int I = 1; I <= t; I++)
    {
        scanf("%d%d", &n, &m);
        for(i = 1; i <= n; i++)
            scanf("%s", a[i] + 1);

        for(i = 1; i <= n; i++)
            for(j = 1; j <= m; j++)
            {
                if(a[i][j] == 'S') sx = i, sy = j, a[i][j] = '.';
                if(a[i][j] == 'G') fx = i, fy = j, a[i][j] = '.';
            }

        memset(bad, 0, sizeof(bad));
        memset(best, 0, sizeof(best));

        for(i = 1; i <= n; i++)
            for(j = 1; j <= m; j++)
                if(a[i][j] == '.')
                {
                    for(k = j - 1; k >= 1; k--)
                    {
                        if(a[i][k] == '#') break;
                        if(a[i][k] == '>')
                        {
                            bad[i][j][0] = 1;
                            break;
                        }
                        if(a[i][k] == '^')
                        {
                            bad[i][j][1] = 1;
                            break;
                        }
                        if(a[i][k] == '<')
                        {
                            bad[i][j][2] = 1;
                            break;
                        }
                        if(a[i][k] == 'v')
                        {
                            bad[i][j][3] = 1;
                            break;
                        }
                    }

                    for(k = j + 1; k <= m; k++)
                    {
                        if(a[i][k] == '#') break;
                        if(a[i][k] == '<')
                        {
                            bad[i][j][0] = 1;
                            break;
                        }
                        if(a[i][k] == 'v')
                        {
                            bad[i][j][1] = 1;
                            break;
                        }
                        if(a[i][k] == '>')
                        {
                            bad[i][j][2] = 1;
                            break;
                        }
                        if(a[i][k] == '^')
                        {
                            bad[i][j][3] = 1;
                            break;
                        }
                    }

                    for(k = i - 1; k >= 1; k--)
                    {
                        if(a[k][j] == '#') break;
                        if(a[k][j] == 'v')
                        {
                            bad[i][j][0] = 1;
                            break;
                        }
                        if(a[k][j] == '>')
                        {
                            bad[i][j][1] = 1;
                            break;
                        }
                        if(a[k][j] == '^')
                        {
                            bad[i][j][2] = 1;
                            break;
                        }
                        if(a[k][j] == '<')
                        {
                            bad[i][j][3] = 1;
                            break;
                        }
                    }

                    for(k = i + 1; k <= n; k++)
                    {
                        if(a[k][j] == '#') break;
                        if(a[k][j] == '^')
                        {
                            bad[i][j][0] = 1;
                            break;
                        }
                        if(a[k][j] == '<')
                        {
                            bad[i][j][1] = 1;
                            break;
                        }
                        if(a[k][j] == 'v')
                        {
                            bad[i][j][2] = 1;
                            break;
                        }
                        if(a[k][j] == '>')
                        {
                            bad[i][j][3] = 1;
                            break;
                        }
                    }
                }

        for(i = 0; i < 4; i++)
            bad[sx][sy][i] = 0;

        for(i = 1; i <= n; i++)
            for(j = 1; j <= m; j++)
                for(k = 0; k < 4; k++)
                    best[i][j][k] = inf;

        q.pb(mp(mp(sx, sy), 0));
        best[sx][sy][0] = 0;
        inq[sx][sy][0] = 1;

        while(!q.empty())
        {
            x = q.front().first.first;
            y = q.front().first.second;
            z = q.front().second;

            for(k = 0; k < 4; k++)
            {
                newx = x + dx[k];
                newy = y + dy[k];
                newz = z + 1;
                if(newz == 4) newz = 0;

                if(newx >= 1 && newx <= n && newy >= 1 && newy <= m && !bad[newx][newy][newz] && best[x][y][z] + 1 < best[newx][newy][newz])
                {
                    best[newx][newy][newz] = best[x][y][z] + 1;
                    if(!inq[newx][newy][newz])
                    {
                        q.pb(mp(mp(newx, newy), newz));
                        inq[newx][newy][newz] = 1;
                    }
                }
            }

            q.pop_front();
            inq[x][y][z] = 0;
        }

        sol = inf;
        for(i = 0; i < 4; i++)
            sol = min(sol, best[fx][fy][i]);

        printf("Case #%d: ", I);
        if(sol == inf) printf("impossible\n");
        else printf("%d\n", sol);
    }

    return 0;
}

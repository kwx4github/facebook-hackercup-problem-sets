#!/usr/bin/env python2
for t in xrange(1, 1 + int(raw_input())):
	print 'Case #%d:' % t,
	m, n = map(int, raw_input().split())
	a = [raw_input().strip() for _ in xrange(m)]
	start = next((i, j) for i in xrange(m) for j in xrange(n) if a[i][j] == 'S')
	end = next((i, j) for i in xrange(m) for j in xrange(n) if a[i][j] == 'G')
	deltas = [(-1, 0), (0, 1), (1, 0), (0, -1)]
	syms = '^>V<'
	safe = 'S.G'
	deadly = [set() for _ in xrange(4)]
	for i, ch in enumerate(syms):
		for j, delta in enumerate((deltas + deltas)[i:i+4]):
			dx, dy = delta
			for x in xrange(m):
				for y in xrange(n):
					if a[x][y] == ch:
						k = 1
						while True:
							xk = x + k * dx
							yk = y + k * dy
							if 0 <= xk < m and 0 <= yk < n and a[xk][yk] in safe:
								deadly[j].add((xk, yk))
							else:
								break
							k += 1
	start += 0,
	seen = {start}
	q = [start]
	for x, y, i in q:
		if (x, y) == end:
			print i
			break
		for dx, dy in deltas:
			xk = x + dx
			yk = y + dy
			pos = xk, yk, i + 1
			if 0 <= xk < m and 0 <= yk < n and a[xk][yk] in safe and (xk, yk) not in deadly[(i + 1) % 4] and pos not in seen:
				seen.add(pos)
				q.append(pos)
	else:
		print 'impossible'

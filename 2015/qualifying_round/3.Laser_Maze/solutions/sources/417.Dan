def obstacleLocations(mazeGrid):
	height = len(mazeGrid)
	width = len(mazeGrid[0])
	outputGrid = []
	for i in range(height):
		row = []
		for j in range(width):
			row.append(0)
		outputGrid.append(row)
	for i in range(height):
		for j in range(width):
			if mazeGrid[i][j] in ['^','>','v','<','#']:
				outputGrid[i][j] = 1
	return outputGrid

def laserLocations(mazeGrid):
	obsLocations = obstacleLocations(mazeGrid)
	height = len(mazeGrid)
	width = len(mazeGrid[0])
	outputGrid = []
	for i in range(height):
		row = []
		for j in range(width):
			row.append([])
		outputGrid.append(row)
	for i in range(height):
		for j in range(width):
			if mazeGrid[i][j] == '^':
				counter = j
				doneMovingRight = False
				while doneMovingRight == False:
					counter += 1
					if counter >= width:
						doneMovingRight = True
					elif obsLocations[i][counter] == 1:
						doneMovingRight = True
					else:
						outputGrid[i][counter].append(1)
				counter = i
				doneMovingDown = False
				while doneMovingDown == False:
					counter += 1
					if counter >= height:
						doneMovingDown = True
					elif obsLocations[counter][j] == 1:
						doneMovingDown = True
					else:
						outputGrid[counter][j].append(2)
				counter = j
				doneMovingLeft = False
				while doneMovingLeft == False:
					counter -= 1
					if counter < 0:
						doneMovingLeft = True
					elif obsLocations[i][counter] == 1:
						doneMovingLeft = True
					else:
						outputGrid[i][counter].append(3)
				counter = i
				doneMovingUp = False
				while doneMovingUp == False:
					counter -= 1
					if counter < 0:
						doneMovingUp = True
					elif obsLocations[counter][j] == 1:
						doneMovingUp = True
					else:
						outputGrid[counter][j].append(0)
			if mazeGrid[i][j] == '>':
				counter = j
				doneMovingRight = False
				while doneMovingRight == False:
					counter += 1
					if counter >= width:
						doneMovingRight = True
					elif obsLocations[i][counter] == 1:
						doneMovingRight = True
					else:
						outputGrid[i][counter].append(0)
				counter = i
				doneMovingDown = False
				while doneMovingDown == False:
					counter += 1
					if counter >= height:
						doneMovingDown = True
					elif obsLocations[counter][j] == 1:
						doneMovingDown = True
					else:
						outputGrid[counter][j].append(1)
				counter = j
				doneMovingLeft = False
				while doneMovingLeft == False:
					counter -= 1
					if counter < 0:
						doneMovingLeft = True
					elif obsLocations[i][counter] == 1:
						doneMovingLeft = True
					else:
						outputGrid[i][counter].append(2)
				counter = i
				doneMovingUp = False
				while doneMovingUp == False:
					counter -= 1
					if counter < 0:
						doneMovingUp = True
					elif obsLocations[counter][j] == 1:
						doneMovingUp = True
					else:
						outputGrid[counter][j].append(3)
			if mazeGrid[i][j] == 'v':
				counter = j
				doneMovingRight = False
				while doneMovingRight == False:
					counter += 1
					if counter >= width:
						doneMovingRight = True
					elif obsLocations[i][counter] == 1:
						doneMovingRight = True
					else:
						outputGrid[i][counter].append(3)
				counter = i
				doneMovingDown = False
				while doneMovingDown == False:
					counter += 1
					if counter >= height:
						doneMovingDown = True
					elif obsLocations[counter][j] == 1:
						doneMovingDown = True
					else:
						outputGrid[counter][j].append(0)
				counter = j
				doneMovingLeft = False
				while doneMovingLeft == False:
					counter -= 1
					if counter < 0:
						doneMovingLeft = True
					elif obsLocations[i][counter] == 1:
						doneMovingLeft = True
					else:
						outputGrid[i][counter].append(1)
				counter = i
				doneMovingUp = False
				while doneMovingUp == False:
					counter -= 1
					if counter < 0:
						doneMovingUp = True
					elif obsLocations[counter][j] == 1:
						doneMovingUp = True
					else:
						outputGrid[counter][j].append(2)
			if mazeGrid[i][j] == '<':
				counter = j
				doneMovingRight = False
				while doneMovingRight == False:
					counter += 1
					if counter >= width:
						doneMovingRight = True
					elif obsLocations[i][counter] == 1:
						doneMovingRight = True
					else:
						outputGrid[i][counter].append(2)
				counter = i
				doneMovingDown = False
				while doneMovingDown == False:
					counter += 1
					if counter >= height:
						doneMovingDown = True
					elif obsLocations[counter][j] == 1:
						doneMovingDown = True
					else:
						outputGrid[counter][j].append(3)
				counter = j
				doneMovingLeft = False
				while doneMovingLeft == False:
					counter -= 1
					if counter < 0:
						doneMovingLeft = True
					elif obsLocations[i][counter] == 1:
						doneMovingLeft = True
					else:
						outputGrid[i][counter].append(0)
				counter = i
				doneMovingUp = False
				while doneMovingUp == False:
					counter -= 1
					if counter < 0:
						doneMovingUp = True
					elif obsLocations[counter][j] == 1:
						doneMovingUp = True
					else:
						outputGrid[counter][j].append(1)					
	return outputGrid

def startLocation(mazeGrid):
	height = len(mazeGrid)
	width = len(mazeGrid[0])
	for i in range(height):
		for j in range(width):
			if mazeGrid[i][j] == 'S':
				return [i,j]

def goalLocation(mazeGrid):
	height = len(mazeGrid)
	width = len(mazeGrid[0])
	for i in range(height):
		for j in range(width):
			if mazeGrid[i][j] == 'G':
				return [i,j]
	
def shortestRoute(mazeGrid):
	height = len(mazeGrid)
	width = len(mazeGrid[0])
	obsGrid = obstacleLocations(mazeGrid)
	laserGrid = laserLocations(mazeGrid)
	currentLoc = startLocation(mazeGrid)
	goalLoc = goalLocation(mazeGrid)
	reachableList = [[currentLoc]]
	movesSoFar = 0
	while True:
		nextSteps = []
		nextStepCandidates = []
		for loc in reachableList[movesSoFar]:
			nextStepCandidates.append([loc[0]-1,loc[1]])
			nextStepCandidates.append([loc[0]+1,loc[1]])
			nextStepCandidates.append([loc[0],loc[1]-1])
			nextStepCandidates.append([loc[0],loc[1]+1])
		for cand in nextStepCandidates:
			eligible = True
			if cand[0] < 0 or cand[0] >= height:
				eligible = False
			elif cand[1] < 0 or cand[1] >= width:
				eligible = False
			elif obsGrid[cand[0]][cand[1]] == 1:
				eligible = False
			elif (movesSoFar + 1) % 4 in laserGrid[cand[0]][cand[1]]:
				eligible = False
			elif cand not in nextSteps:
				nextSteps.append(cand)
		nextSteps = sorted(nextSteps)
		movesSoFar += 1
		if goalLoc in nextSteps:
			return movesSoFar
		if movesSoFar >= 4 and nextSteps == reachableList[movesSoFar-4]:
			return 'impossible'
		reachableList.append(nextSteps)

import sys
with open(sys.argv[1], "r") as fileIN:
	inputLines = fileIN.readlines()
	
with open(sys.argv[2], "w") as fileOUT:
	numberOfCases = int(inputLines.pop(0))
	for num in range(numberOfCases):
		numberOfRows = int(inputLines.pop(0).split()[0])
		mazeGrid = []
		for i in range(numberOfRows):
			mazeGrid.append(list(str(inputLines.pop(0).rstrip())))
		result = str(shortestRoute(mazeGrid))
		fileOUT.write('Case #' + str(num+1) + ': ' + result + '\n')

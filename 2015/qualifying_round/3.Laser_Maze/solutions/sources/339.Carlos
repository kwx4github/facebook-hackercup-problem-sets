#include <iostream>
#include <sstream>
#include <numeric>
#include <set>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <strings.h>
#include <string.h>

using namespace std;

struct status {
	int r, c;
	int movements;
};

int main(){
	int tests;
	cin >> tests;
	for (int t = 1; t <= tests; t++){
		int R, C;
		cin >> R >> C;
		char board[R+2][C+2];
		memset(board, '#', sizeof(board));
		int startR, startC, endR, endC;
		for (int i = 1; i <= R; i++){
			for (int j = 1; j <= C; j++){
				cin >> board[i][j];
				if (board[i][j] == 'S'){
					board[i][j] = '.';
					startR = i;
					startC = j;
				} else if (board[i][j] == 'G'){
					board[i][j] = '.';
					endR = i;
					endC = j;
				}
			}
		}
		bool banned[4][R+2][C+2];
		bzero(banned, sizeof(banned));
		for (int i = 0; i < 4; i++){
			//ban positions
			for (int j = 0; j < R + 2; j++){
				for (int k = 0; k < C + 2; k++){
					if (board[j][k] == '#'){
						banned[i][j][k] = true;
					} else if (board[j][k] == '>'){
						int copyk = k;
						do {
							banned[i][j][copyk] = true;
							copyk++;
						} while(board[j][copyk] == '.');
					} else if (board[j][k] == '<'){
						int copyk = k;
						do {
							banned[i][j][copyk] = true;
							copyk--;
						} while(board[j][copyk] == '.');
					} else if (board[j][k] == 'v'){
						int copyj = j;
						do {
							banned[i][copyj][k] = true;
							copyj++;
						} while(board[copyj][k] == '.');
					} else if (board[j][k] == '^'){
						int copyj = j;
						do {
							banned[i][copyj][k] = true;
							copyj--;
						} while(board[copyj][k] == '.');
					}
				}
			}
			
			//rotate
			for (int j = 1; j < R+1; j++){
				for (int k = 1; k < C + 1; k++){
					if (board[j][k] == '>'){
						board[j][k] = 'v';
					} else if (board[j][k] == 'v'){
						board[j][k] = '<';
					} else if (board[j][k] == '<'){
						board[j][k] = '^';
					} else if (board[j][k] == '^'){
						board[j][k] = '>';
					}
				}
			}
		}

		bool visited[4][R+2][C+2];
		bzero(visited, sizeof(visited));
		queue<status> queue;
		status initialStatus;
		initialStatus.r = startR;
		initialStatus.c = startC;
		initialStatus.movements = 0;
		queue.push(initialStatus);
		bool hasSolution = false;
		int solution = -1;
		while(queue.size() && (!hasSolution)){
			status current = queue.front();
			queue.pop();
			int currentR = current.r;
			int currentC = current.c;
			int movements = current.movements;
			int movements4 = (current.movements) % 4;
			int newMovement4 = (movements4 + 1) % 4;
			int dR[4] = {-1, 1, 0, 0};
			int dC[4] = {0, 0, 1, -1};
			for (int i = 0; i < 4; i++){
				int newR = currentR + dR[i];
				int newC = currentC + dC[i];
				if ( (!banned[newMovement4][newR][newC]) && (!visited[newMovement4][newR][newC]) ){
					if ((newR == endR) && (newC == endC)){
						hasSolution = true;
						solution = movements + 1;
					}
					visited[newMovement4][newR][newC] = true;
					status newStatus;
					newStatus.r = newR;
					newStatus.c = newC;
					newStatus.movements = (movements + 1);
					queue.push(newStatus);
				}
			}
		}
		if (hasSolution){	
			cout << "Case #" << t << ": " << solution << endl;
		} else {
			cout << "Case #" << t << ": impossible" << endl;
		}
	}
}

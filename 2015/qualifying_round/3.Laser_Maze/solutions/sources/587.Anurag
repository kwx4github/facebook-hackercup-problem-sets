#include<iostream>
#include<string>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<queue>
#include<map>
#define ll long long int
#define INF 1e10
#define mk make_pair
#define pi pair<ll,ll>
using namespace std;

ll visited[111][111][5],sx,sy,ex,ey,distTo[111][111][5],n,m,board[111][111][5];
string s[111];
map<char,ll> mp;

int up(ll x,ll y,ll z)
{
    for(ll i=x-1;i>=0;i--)
    {
        if(s[i][y]=='.'||s[i][y]=='S'||s[i][y]=='G')
            board[i][y][z]=1;
        else
            break;
    }
}

int down(ll x,ll y,ll z)
{
    for(ll i=x+1;i<n;i++)
    {
        if(s[i][y]=='.'||s[i][y]=='S'||s[i][y]=='G')
            board[i][y][z]=1;
        else
            break;
    }
}

int left(ll x,ll y,ll z)
{
    for(ll j=y-1;j>=0;j--)
    {
        if(s[x][j]=='.'||s[x][j]=='S'||s[x][j]=='G')
            board[x][j][z]=1;
        else
            break;
    }
}

int right(ll x,ll y,ll z)
{
    for(ll j=y+1;j<m;j++)
    {
        if(s[x][j]=='.'||s[x][j]=='S'||s[x][j]=='G')
            board[x][j][z]=1;
        else
            break;
    }
}

int mark()
{
    ll k,j,i;
    for(k=0;k<4;k++)
        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                if(s[i][j]=='>'||s[i][j]=='<'||s[i][j]=='^'||s[i][j]=='v')
                {
                    ll var=(mp[s[i][j]]+k)%4;
                    board[i][j][k]=1;
                    switch(var)
                    {
                        case 0: up(i,j,k);
                                break;
                        case 1: right(i,j,k);
                                break;
                        case 2: down(i,j,k);
                                break;
                        case 3: left(i,j,k);
                                break;
                    }
                }
                else if(s[i][j]=='#')
                    board[i][j][k]=1;
}

int isSafe(ll x,ll y,ll z)
{
    if(x<n&&x>=0&&y<m&&y>=0&&board[x][y][z]==0&&visited[x][y][z]==0)
        return 1;
    return 0;
}


int solve()
{
    queue<ll> x,y,z;
    x.push(sx);
    y.push(sy);
    z.push(0);
    visited[sx][sy][0]=1;
    distTo[sx][sy][0]=0;
    while(!x.empty())
    {
        ll u=x.front();
        ll v=y.front();
        ll w=z.front();
        x.pop(); y.pop(); z.pop();
        if(isSafe(u+1,v,(w+1)%4))
        {
            distTo[u+1][v][(w+1)%4]=distTo[u][v][w]+1;
            visited[u+1][v][(w+1)%4]=1;
            x.push(u+1); y.push(v); z.push((w+1)%4);
        }
        if(isSafe(u-1,v,(w+1)%4))
        {
            distTo[u-1][v][(w+1)%4]=distTo[u][v][w]+1;
            visited[u-1][v][(w+1)%4]=1;
            x.push(u-1); y.push(v); z.push((w+1)%4);
        }
        if(isSafe(u,v+1,(w+1)%4))
        {
            distTo[u][v+1][(w+1)%4]=distTo[u][v][w]+1;
            visited[u][v+1][(w+1)%4]=1;
            x.push(u); y.push(v+1); z.push((w+1)%4);
        }
        if(isSafe(u,v-1,(w+1)%4))
        {
            distTo[u][v-1][(w+1)%4]=distTo[u][v][w]+1;
            visited[u][v-1][(w+1)%4]=1;
            x.push(u); y.push(v-1); z.push((w+1)%4);
        }
    }
}

int main()
{
    freopen("input.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int t,w=1;
    cin>>t;
    while(t--)
    {
        memset(visited,0,sizeof(visited));
        memset(board,0,sizeof(board));
        ll i,j,k,l;
        for(i=0;i<101;i++)
            for(j=0;j<101;j++)
                for(k=0;k<5;k++)
                    distTo[i][j][k]=INF;
        cin>>n>>m;
        for(i=0;i<n;i++)
            cin>>s[i];
        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                if(s[i][j]=='S')
                {
                    sx=i;
                    sy=j;
                }
        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                if(s[i][j]=='G')
                {
                     ex=i;
                     ey=j;
                }
        mp['^']=0; mp['>']=1; mp['v']=2; mp['<']=3;
        mark();
        solve();
        ll ans=INF;
        ans=min(ans,distTo[ex][ey][0]);
        ans=min(ans,distTo[ex][ey][1]);
        ans=min(ans,distTo[ex][ey][2]);
        ans=min(ans,distTo[ex][ey][3]);
        if(ans!=INF)
            cout<<"Case #"<<w<<": "<<ans<<"\n";
        else
            cout<<"Case #"<<w<<": impossible\n";
        w++;
    }
    return 0;
}

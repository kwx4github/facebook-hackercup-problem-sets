#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))
#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)

#define CLEAR(v) memset((v),0,sizeof(v));

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

const int MAXN = 100 + 1;
const int DX[4] = {0, -1, 0, 1};
const int DY[4] = {-1, 0, 1, 0};

int n, m, sx, sy, tx, ty;
char mat[MAXN][MAXN];
bool danger[4][MAXN][MAXN];

bool isLaser(char ch) {
  return ch == '<' || ch == '>' || ch == '^' || ch == 'v';
}

int laserDir(char ch) {
  if (ch == '<') return 0;
  else if (ch == '^') return 1;
  else if (ch == '>') return 2;
  else return 3;
}

bool isValid(int x, int y) {
  return 0 <= x && x < n && 0 <= y && y < m;
}

void initDanger() {
  CLEAR(danger);
  FOR(t, 0, 4) {
    FOR(i, 0, n) FOR(j, 0, m) if (isLaser(mat[i][j])) {
      int dir = (laserDir(mat[i][j]) + t) & 3;
      int x = i + DX[dir], y = j + DY[dir];
      while (isValid(x, y) && mat[x][y] == '.') {
        danger[t][x][y] = true;
        x += DX[dir];
        y += DY[dir];
      }
    }
//printf("====t %d===\n", t);
//FOR(i, 0, n) { FOR(j, 0, m) printf("%d", danger[t][i][j]); putchar('\n'); }
  }
}

const int INF = 1012345678;

int dist[4][MAXN][MAXN];
priority_queue<pair<int, pair<int, pair<int, int> > >, vector<pair<int, pair<int, pair<int, int> > > >, greater<pair<int, pair<int, pair<int, int> > > > > heap;

void update(int t, int x, int y, int value) {
  if (dist[t][x][y] > value) {
    dist[t][x][y] = value;
    heap.push(make_pair(value, make_pair(t, make_pair(x, y))));
  }
}

int calc() {
  while (!heap.empty()) heap.pop();
  FOR(t, 0, 4) FOR(i, 0, n) FOR(j, 0, m) dist[t][i][j] = INF;
  update(0, sx, sy, 0);
  while (!heap.empty()) {
    int value = heap.top().first;
    int t = heap.top().second.first;
    int x = heap.top().second.second.first;
    int y = heap.top().second.second.second;
//printf("t=%d x=%d y=%d value=%d %d\n", t, x, y, value, dist[t][x][y]);
    if (x == tx && y == ty) {
      return value;
    }
    heap.pop();
    if (dist[t][x][y] != value) continue;
//printf("t=%d x=%d y=%d value=%d\n", t, x, y, value);
    t = (t + 1) & 3;
    value++;
//printf("newT=%d newX=%d newY=%d\n", t, x, y);
/*    if (!danger[t][x][y]) {
      update(t, x, y, value);
    }*/
    FOR(dir, 0, 4) {
      int xx = x + DX[dir], yy = y + DY[dir];
      if (isValid(xx, yy) && mat[xx][yy] == '.' && !danger[t][xx][yy]) {
        update(t, xx, yy, value);
      }
    }
  }
  return -1;
}

int main() {
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    scanf("%d%d", &n, &m);
    FOR(i, 0, n) {
      scanf("%s", mat[i]);
      FOR(j, 0, m) if (mat[i][j] == 'S') {
        sx = i;
        sy = j;
        mat[i][j] = '.';
      } else if (mat[i][j] == 'G') {
        tx = i;
        ty = j;
        mat[i][j] = '.';
      }
    }
    initDanger();
    int dist = calc();
    printf("Case #%d: ", taskIdx);
    if (dist == -1) puts("impossible");
    else printf("%d\n", dist);
  }
  return 0;
}

#include <iostream>
#include <fstream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <stack>
#include <map>
#include <climits>
#include <cassert>

#define FOR(i,n) for(int i=0,_n=n;i<_n;i++)
#define FORD(i,n) for(int i=n;i>=0;i--)
#define FORR(i,s,n) for(int i=s,_n=n;i<_n;i++)
#define FORRD(i,n,s) for(int i=n,_s=s;i>=_s;i--)
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define pli pair<ll,int>
#define vi vector<int>
#define fs first
#define sec second

#define maxn 1000
using namespace std;
typedef long long ll;

string mm[maxn];
int ff[4][maxn][maxn],m,n;
bool vis[4][maxn][maxn];
int d[4][2] = {{0,-1},{-1,0},{0,1},{1,0}};
bool inrng(int y,int x){
	return (x >= 0 && x < m && y >= 0 && y < n);
}
int getIdx(char s){
	if(s == '<') 
		return 0;
	else if(s == '^')
		return 1;
	else if(s == '>')
		return 2;
	else if(s == 'v')
		return 3;
	else return -1;
}

deque<pair<int,pii> > dq;
int main(){
	int t;
	pii G,S;
	cin>>t;
	FORR(tt,1,t + 1){
		cin>>n>>m;
		int ans = -1;
		
		FOR(i,n){
			cin>>mm[i];
			FOR(j,m)
				if(mm[i][j] == 'G'){
					G = mp(i,j);
					mm[i][j] = '.';
				}
				else if(mm[i][j] == 'S'){
					S = mp(i,j);
					mm[i][j] = '.';
				}
		}
		memset(ff,0,sizeof ff);
		FOR(i,n)
			FOR(j,m){
				int idx = getIdx(mm[i][j]);
				if(idx == -1) continue;
				
				FOR(k,4){
					int x = j + d[idx][1], y = i + d[idx][0];
					while(inrng(y,x) && mm[y][x] == '.'){
						ff[k][y][x]++;
						x += d[idx][1];
						y += d[idx][0];
					}
					idx = (idx + 1) % 4;
				}
			}
		memset(vis,0,sizeof vis);
		dq.pb(mp(0,S));
		while(!dq.empty()){
			pair<int,pii> tmp = dq.front();
			dq.pop_front();
			
			if(vis[tmp.fs % 4][tmp.sec.fs][tmp.sec.sec]) continue;
			if(tmp.fs > 0 && ff[tmp.fs % 4][tmp.sec.fs][tmp.sec.sec] != 0) continue;
			vis[tmp.fs % 4][tmp.sec.fs][tmp.sec.sec] = true;
			
			if(tmp.sec == G)
			{
				ans = tmp.fs;
				break;
			}
			FOR(k,4){
				int nx = tmp.sec.sec + d[k][1];
				int ny = tmp.sec.fs + d[k][0];
				if(inrng(ny,nx) && mm[ny][nx] == '.' && !vis[(tmp.fs + 1) % 4][ny][nx])
					dq.pb(mp(tmp.fs + 1,mp(ny,nx)));
			}
		}
		cout<<"Case #"<<tt<<": ";
		if(ans == -1)
			cout<<"impossible\n";
		else cout<<ans<<"\n";
	}
	return 0;
}

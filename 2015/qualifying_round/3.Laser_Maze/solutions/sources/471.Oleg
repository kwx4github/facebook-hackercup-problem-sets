#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <utility>
#include <set>
#include <map>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <queue>

using namespace std;


const int maxn = 110;
const string laserState = "^>v<";
const int dy[4] = {0, -1, 0, +1};
const int dx[4] = {-1, 0, +1, 0};

string maze[maxn];
int n, m;
int dist[maxn][maxn][4];


struct TState {
    int y;
    int x;
    int r;
    TState(int y, int x, int r)
        : y(y)
        , x(x)
        , r(r)
    {
    }
};


inline bool IsBlocked(int y, int x) {
    return y < 0 || y >= n || x < 0 || x >= m || maze[y][x] == '#' || maze[y][x] < 4;
}

inline bool IsLaser(int y, int x) {
    return y >= 0 && y < n && x >= 0 && x < m && maze[y][x] < 4;
}

void Solve() {
    cin >> n >> m;
    int sy, sx, fy, fx;
    for (int i = 0; i < n; ++i) {
        cin >> maze[i];
        for (int j = 0; j < m; ++j) {
            for (char c = 0; c < 4; ++c) {
                if (laserState[c] == maze[i][j]) {
                    maze[i][j] = c;
                }
            }
            if (maze[i][j] == 'S') {
                sy = i, sx = j;
            } else if (maze[i][j] == 'G') {
                fy = i, fx = j;
            }
        }
    }
    memset(dist, -1, sizeof(dist));
    dist[sy][sx][0] = 0;
    queue<TState> q;
    q.push(TState(sy, sx, 0));
    while (!q.empty()) {
        TState c = q.front();
        q.pop();
        if (c.y == fy && c.x == fx) {
            cout << dist[c.y][c.x][c.r] << endl;
            return;
        }
        for (int d = 0; d < 4; ++d) {
            TState nc(c.y + dy[d], c.x + dx[d], ((c.r + 1) & 3));
            if (IsBlocked(nc.y, nc.x)) {
                continue;
            }
            bool isBad = false;
            for (int ld = 0; ld < 4; ++ld) {
                int y = nc.y;
                int x = nc.x;
                while (!IsBlocked(y, x)) {
                    y += dy[ld];
                    x += dx[ld];
                }
                if (IsLaser(y, x) && ld == ((c.r + maze[y][x]) & 3)) {
                    isBad = true;
                    break;
                }
            }
            if (!isBad && dist[nc.y][nc.x][nc.r] == -1) {
                dist[nc.y][nc.x][nc.r] = dist[c.y][c.x][c.r] + 1;
                q.push(nc);
            }
        }
    }
    cout << "impossible" << endl;
}


int main() {

    ios_base::sync_with_stdio(false);
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        cout << "Case #" << i + 1 << ": ";
        Solve();
    }

    return 0;
}



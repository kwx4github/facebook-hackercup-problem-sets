#pragma  comment(linker, "/STACK:36777216")
#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <iomanip>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#define  lc(x) (x << 1)
#define  rc(x) (lc(x) + 1)
#define  lowbit(x) (x & (-x))
#define  PI    (acos(-1))
#define  lowbit(x) (x & (-x))
#define  LL    long long
#define  DB    double
#define  ULL   unsigned long long
#define  PII   pair<int, int>
#define  PLL   pair<LL, LL>
#define  PB    push_back
#define  MP    make_pair

using namespace std;

const int N = 111;
const int M = N * N * 2;
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const DB  EPS = 1e-8;

struct Node {
    int t, x, y, d;
    Node(){}
    Node(int _t, int _x, int _y, int _d) {
        t = _t, x = _x, y = _y, d = _d;
    }
    bool operator < (const Node &A) const {
        return d > A.d;
    }
};

int d[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

int n, m, ban[4][N][N], vis[4][N][N], dist[4][N][N]; char ch[N][N];

PII st, ed;

priority_queue <Node> Q;

int Gao() {
    memset(vis, 0, sizeof(vis));
    dist[0][st.first][st.second] = 0;
    Q.push(Node(0, st.first, st.second, 0));
    while(!Q.empty()) {
        Node fr = Q.top(); Q.pop();
        if(vis[fr.t][fr.x][fr.y]) continue;
        vis[fr.t][fr.x][fr.y] = true;
//        cout << fr.t << ' ' << fr.x << ' ' << fr.y << endl;
        for(int i = 0; i < 4; i ++) {
            int xx = fr.x + d[i][0];
            int yy = fr.y + d[i][1];
            if(xx < 0 || yy < 0 || xx >= n || yy >= m) continue;
            int tt = (fr.t + 1) % 4;
            if(ban[tt][xx][yy]) continue;
            if(dist[tt][xx][yy] > fr.d + 1) {
                dist[tt][xx][yy] = fr.d + 1;
                Q.push(Node(tt, xx, yy, dist[tt][xx][yy]));
            }
        }
    }
    int ret = INF;
    for(int i = 0; i < 4; i ++)
        ret = min(ret, dist[i][ed.first][ed.second]);
    return ret;
}
void BlockAll(int x, int y) {for(int i = 0; i < 4; i ++) ban[i][x][y] = 1;}
void BlockU(int t, int x, int y) {for(int i = x - 1; i >= 0 && ch[i][y] == '.'; i --) ban[t][i][y] = 1;}
void BlockR(int t, int x, int y) {for(int i = y + 1; i < m && ch[x][i] == '.'; i ++) ban[t][x][i] = 1;}
void BlockD(int t, int x, int y) {for(int i = x + 1; i < n && ch[i][y] == '.'; i ++) ban[t][i][y] = 1;}
void BlockL(int t, int x, int y) {for(int i = y - 1; i >= 0 && ch[x][i] == '.'; i --) ban[t][x][i] = 1;}

int T, cas;

int main() {
    freopen("laser_maze.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    cin >> T;
    while(T --) {
        scanf("%d%d", &n, &m);
        for(int k = 0; k < 4; k ++)
        for(int i = 0; i < n; i ++)
        for(int j = 0; j < m; j ++) {
            dist[k][i][j] = INF;
            ban[k][i][j] = 0;
        }
        for(int i = 0; i < n; i ++)
            for(int j = 0; j < m; j ++) {
                scanf(" %c", &ch[i][j]);
                if(ch[i][j] == 'S') {
                    st = MP(i, j); ch[i][j] = '.';
                } else if(ch[i][j] == 'G') {
                    ed = MP(i, j); ch[i][j] = '.';
                }
            }
        for(int i = 0; i < n; i ++)
            for(int j = 0; j < m; j ++) {
                if(ch[i][j] == '^') {
                    BlockAll(i, j);
                    BlockU(0, i, j);
                    BlockR(1, i, j);
                    BlockD(2, i, j);
                    BlockL(3, i, j);
                } else if(ch[i][j] == '<') {
                    BlockAll(i, j);
                    BlockL(0, i, j);
                    BlockU(1, i, j);
                    BlockR(2, i, j);
                    BlockD(3, i, j);
                } else if(ch[i][j] == '>') {
                    BlockAll(i, j);
                    BlockR(0, i, j);
                    BlockD(1, i, j);
                    BlockL(2, i, j);
                    BlockU(3, i, j);
                } else if(ch[i][j] == 'v') {
                    BlockAll(i, j);
                    BlockD(0, i, j);
                    BlockL(1, i, j);
                    BlockU(2, i, j);
                    BlockR(3, i, j);
                } else if(ch[i][j] == '#') {
                    BlockAll(i, j);
                }
            }
//        for(int i = 0; i < 4; i ++){
//        for(int j = 0; j < n; j ++){
//        for(int k = 0; k < m; k ++)
//            {cout << ban[i][j][k];}
//            cout << endl;
//        }cout << endl;}
        int t = Gao();
        printf("Case #%d: ", ++ cas);
        if(t == INF) puts("impossible");
        else printf("%d\n", t);
    }
}

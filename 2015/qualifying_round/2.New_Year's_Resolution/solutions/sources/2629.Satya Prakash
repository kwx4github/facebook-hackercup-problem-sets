#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <map>
#include <utility>

#define ex(b,x,y,z) b[x*1000+y] //hacked to ignore z while converting 3-d array 
                                //2-d array

using namespace std;

typedef struct food_ 
{
  int x;
  int y;
  int z;
} food_t;

typedef struct node_
{
  char foods[20];
  char reach;
  char value;
} node_t;

class map_t
{
  public:
  map_t() {
    count = 0;
  }
 
  std::map<int, node_t*> hmap;  
  int count;
};

void
figureout(map_t *a, int id, food_t ideal, food_t *foods, int num)
{
  int i, j, k;
  int l, m, n;
  int p, q, r;
  int u, v;

  int ans = 0;
 
  node_t *tmp;
 
  tmp = (node_t*)malloc(sizeof(node_t));
  memset(tmp, 0, sizeof(node_t));
  tmp->reach = 1;

  ex(a, 0,0,0).hmap.insert(std::make_pair(0, tmp));

  tmp = (node_t*)malloc(sizeof(node_t));
  memset(tmp, 0, sizeof(node_t));
  tmp->reach = 0;

  ex(a, ideal.x, ideal.y, ideal.z).hmap.insert(std::make_pair(ideal.z, tmp));

  int len = 0;

  for (i=0; i<num; i++) {
    for (j=0; j<=ideal.x-foods[i].x; j++) {
      for (p=0; p<=ideal.y-foods[i].y; p++) {
        map_t root = ex(a, j,p,q);
        int jj, pp, qq;

        jj = j + foods[i].x;
        pp = p + foods[i].y;

        //0 is dummy
        for (map <int, node_t*>::iterator it = ex(a,j,p,0).hmap.begin(); 
               it != ex(a,j,p,q).hmap.end(); ++it) {
          qq = (it->first) + foods[i].z;
          
          if ((it->second)->reach && (it->second)->foods[i]) {
            continue;
          }  

          map <int, node_t*>::iterator newadd = ex(a, jj,pp,qq).hmap.find(qq);

          if (newadd == ex(a,jj,pp,qq).hmap.end()) {
            tmp = (node_t*)malloc(sizeof(node_t));
            memset(tmp, 0, sizeof(node_t));
            tmp->reach = 1;
            tmp->foods[i] = 1;

            ex(a, jj, pp, qq).hmap.insert(std::make_pair(qq, tmp));
          } else {
            node_t *old = newadd->second;
            old->foods[i] = 1;
            old->reach = 1;
          }
        }
      }
    }

    map <int, node_t*>::iterator defadd = ex(a,foods[i].x,foods[i].y,foods[i].z).hmap.find(foods[i].z);

    if (defadd == ex(a,foods[i].x,foods[i].y,foods[i].z).hmap.end()) {
      tmp = (node_t*)malloc(sizeof(node_t));
      memset(tmp, 0, sizeof(node_t));
      tmp->reach = 1;
      tmp->foods[i] = 1;
      ex(a, foods[i].x, foods[i].y, foods[i].z).hmap.insert(std::make_pair(foods[i].z, tmp));
    } else {
      node_t *old = defadd->second;
      old->foods[i] = 1;
      old->reach = 1;
    }
  }

  printf("Case #%d: ", id);
  map <int, node_t*>::iterator iit = ex(a, ideal.x,ideal.y,ideal.z).hmap.find(ideal.z);
  node_t *fi = iit->second; 
  
  if (iit != ex(a, ideal.x,ideal.y,ideal.z).hmap.end() && fi->reach) {
    printf("yes \n");
  } else {
    printf("no \n"); 
  }
  return;
}

int
main()
{
  int n, numfoods;
  int i, j;
  food_t ideal;
  food_t foods[20];

  map_t *a = new map_t[1000*1000];

  scanf("%d\n", &n);
  for (i=0; i<n; i++) {
    scanf("%d %d %d", &ideal.x, &ideal.y, &ideal.z);
    scanf("%d", &numfoods);
    for (j=0; j<numfoods; j++) {
      scanf("%d %d %d", &(foods[j].x), &(foods[j].y), &(foods[j].z));
    }

    figureout(a, i+1, ideal, foods, numfoods);

    for(int ii=0; ii<1000*1000; ii++) {
      for (map <int, node_t*>::iterator it = a[ii].hmap.begin(); 
           it != a[ii].hmap.end(); it++) {
        if (it->second) 
          delete (it->second);
      }
      a[ii].hmap.clear();
    }
  }
 
  return 0;
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace newyearsresolution
{
  
        class Program
        {
            static void Main(string[] args)
            {
                List<int> list = new List<int>();
                /*
                 * i want to generate every possible permutation 
                 * and hope it runs fast enough
                 * THis input is weirdly written
                */
                string[] lines = System.IO.File.ReadAllLines(@"C:\Users\SAi\Documents\FacebookHackerCup\2015\Qualifcation round\newyearsresolution\newyearsresolution\p2a.txt");

                int n = Convert.ToInt32(lines[0]);
                string[] ans = new string[n];
                int t;
                long p, c, f;
                int[] typesOfNut;
                string[] tON;
                int i = 1;
                int testcase = 1;
                while (testcase <= n)
                {
                    tON = lines[i].Split(' ');
                    i++;
                    typesOfNut = new int[3];
                    typesOfNut[0] = Convert.ToInt32(tON[0]);
                    typesOfNut[1] = Convert.ToInt32(tON[1]);
                    typesOfNut[2] = Convert.ToInt32(tON[2]);
                    t = Convert.ToInt32(lines[i]);
                    i++;
                    List<food> listOfFoods = new List<food>();
                    for (int j = 0; j < t; j++, i++)
                    {
                        tON = lines[i].Split(' ');
                        if (Convert.ToInt32(tON[0]) <= typesOfNut[0]
                            && Convert.ToInt32(tON[1]) <= typesOfNut[1]
                            && Convert.ToInt32(tON[2]) <= typesOfNut[2])
                        {
                            listOfFoods.Add(new food(Convert.ToInt32(tON[0]), Convert.ToInt32(tON[1]), Convert.ToInt32(tON[2])));
                        }
                    }
                    bool canDo = isPossible(typesOfNut, listOfFoods);
                    if (canDo)
                    {
                        ans[testcase-1] += string.Format("Case #{0}: yes", testcase);
                        Console.WriteLine("Case #{0}: yes", testcase);
                        testcase++;
                    }
                    else
                    {
                        ans[testcase-1] += string.Format("Case #{0}: no", testcase);
                        Console.WriteLine("Case #{0}: no", testcase);
                        testcase++;
                    }


                }
                System.IO.File.WriteAllLines(@"C:\Users\SAi\Documents\FacebookHackerCup\2015\Qualifcation round\newyearsresolution\newyearsresolution\p2ans.txt", ans);
            }

            private static bool isPossible(int[] typesOfNut, List<food> listOfFoods)
            {
                double n = listOfFoods.Count;
                string num;
                long[] sumOfFood = new long[3];
                for (long i = 1; i <= Math.Pow(2, n); i++)
                {

                    num = Convert.ToString(i, 2);
                    while (num.Length < n)
                    {
                        num = "0" + num;
                    }
                    sumOfFood = new long[3];
                    for (int j = 0; j < sumOfFood.Length; j++)
                    {
                        sumOfFood[j] = 0;
                    }
                    for (int j = 0; j < listOfFoods.Count; j++)
                    {
                        if (num[j] == '1')
                        {
                            
                                sumOfFood[0] += listOfFoods[j].p;
                                sumOfFood[1] += listOfFoods[j].g;
                                sumOfFood[2] += listOfFoods[j].f;
                            
                        }
                        if (sumOfFood[0] == typesOfNut[0]
                            && sumOfFood[1] == typesOfNut[1]
                            && sumOfFood[2] == typesOfNut[2])
                        {
                            return true;
                        }
                        else if (sumOfFood[0] > typesOfNut[0]
                            && sumOfFood[1] > typesOfNut[1]
                            && sumOfFood[2] > typesOfNut[2])
                        {
                            break;
                        }
                    }

                }

                return false;
            }

        }



        class food
        {
            public food(int a,int b, int c)
            {
                p = a;
                g = b;
                f = c; 
            }

            public int p { get; set; }
            public int g { get; set; }
            public int f { get; set; }
        }

    }



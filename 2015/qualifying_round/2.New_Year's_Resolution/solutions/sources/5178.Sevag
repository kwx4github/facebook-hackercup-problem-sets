#include <iostream>
#include <fstream>
#include <algorithm>
using namespace std;

int T;
int GP, GC, GF;
int N;
int P[20], C[20], F[20];

int DPP[25][1005];
int DPC[25][1005];
int DPF[25][1005];

bool possP(int i, int GP){

	if (GP < 0 ) return false;
	if ( i==N ){
		if (GP ==0 ) return true;
		else return false;
	}

	if (DPP[i][GP] != -1)
		return DPP[i][GP];

	bool val = false;
	val |= possP(i+1, GP - P[i]);
	val |= possP(i+1, GP);

	DPP[i][GP] = val;
	return val;
}

bool possC(int i, int GP, int GC) {
	if (DPP[i][GP] == 0) return false;

	if (GC < 0) return false;
	if (i==N) {
		if (GC==0) return true;
		else return false;
	}

	if (DPC[i][GC] != -1)
		return DPC[i][GC];

	bool val = false;
	val |= possC(i+1, GP - P[i], GC - C[i]);
	val |= possC(i+1, GP, GC);
	
	DPC[i][GC] = val;
	return val;
}

bool possF(int i, int GP, int GC, int GF) {
	if (DPP[i][GP] == 0) return false;
	if (DPC[i][GC] == 0) return false;

	if (GF < 0 ) return false;
	if ( i==N ){
		if (GF==0) return true;
		else return false;
	}

	if (DPF[i][GF]!=-1)
		return DPF[i][GF];

	bool val = false;
	val |= possF(i+1, GP-P[i], GC-C[i], GF-F[i]);
	val |= possF(i+1, GP, GC, GF);

	DPF[i][GF] = val;
	return val;
}

bool possible() {

	fill(&DPP[0][0], &DPP[0][0] + 25*1005, -1);
	fill(&DPC[0][0], &DPC[0][0] + 25*1005, -1);
	fill(&DPF[0][0], &DPF[0][0] + 25*1005, -1);

	if ( !possP(0, GP) )
		return false;

	if ( !possC(0, GP, GC) )
		return false;

	if ( !possF(0, GP, GC, GF) )
		return false;

	return true;
}


int main() {
	ifstream cin;
	cin.open("new_years_resolution.txt");
	ofstream cout;
	cout.open("resolution_sevag.out");

	cin >> T;

	for (int t=1; t<=T; t++) 
	{
		cin >> GP >> GC >> GF;

		cin >> N ;
		for (int i=0; i<N ; i++){
			cin >> P[i] >> C[i] >> F[i];
		}

		cout << "Case #"<<t<<": ";
		if ( possible() ){
			cout << "yes";
		}
		else {
			cout<< "no";
		}
		cout<<endl;
	}


	return 0;
}
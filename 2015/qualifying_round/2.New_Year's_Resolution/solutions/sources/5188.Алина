#include <iostream>
#include <vector>
#include <cstdlib>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

struct Food {
	int p, c, f;
	Food() {}
	Food(int p, int c, int f) : p(p), c(c), f(f) {}

	const Food operator + (const Food & a) const {
		return Food(p+a.p, c+a.c, f+a.f);
	}

	bool operator == (const Food & a) const {
		return (p == a.p && c == a.c && f == a.f);
	}

	bool operator > (const Food & a) const {
		return (p > a.p || c > a.c || f > a.f);
	}
};

vector<Food> v;

bool check(const Food & need, int index, Food cur) {
	if(cur == need) 
		return true;

	if(cur > need)
		return false;

	if(index == v.size())
		return false;

	return (check(need, index+1, cur) || check(need, index+1, cur+v[index]));
}

int main() {

	int t;
	cin >> t;

	for(int i = 0; i < t; ++i) {
		int p, c, f;
		cin >> p >> c >> f;
		Food need(p, c, f);
		int n;
		cin >> n;
		for(int k = 0; k < n; ++k) {
			cin >> p >> c >> f;
			v.push_back(Food(p, c, f));
		}

		if(check(need, 0, Food(0, 0, 0)))
			cout << "Case #" << i+1 << ": yes" << endl;
		else
			cout << "Case #" << i+1 << ": no" << endl;

		v.clear();
	}

	return 0;
}
import fileinput


class DietChecker:
    combinations = []

    @classmethod
    def meet_goals(cls, items, totals, no_food):
        p_left, c_left, f_left = [int(total) for total in totals.split()]
        available_foods = [[], [], []]
        for i in xrange(0, no_food):
            food_info = items.next().split()
            available_foods[0] += [(int(food_info[0]), i)]
            available_foods[1] += [(int(food_info[1]), i)]
            available_foods[2] += [(int(food_info[2]), i)]
        DietChecker.meet_goal(p_left, available_foods[0])
        for i in xrange(len(DietChecker.combinations)):
            c_total = 0
            f_total = 0
            for j in xrange(len(DietChecker.combinations[i])):
                index = DietChecker.combinations[i][j]
                c_total += available_foods[1][index][0]
                f_total += available_foods[2][index][0]
            if (c_total == c_left) and (f_total == f_left):
                return True
        return False

    @classmethod
    def meet_goal(cls, total, numbers, partial=[]):
        s = 0
        if partial != []:
            for number in partial:
                s += number[0]
        if s == total:
            food_nos = []
            for num in partial:
                food_nos += [num[1]]
            DietChecker.combinations += [food_nos]
            return
        if s > total:
            return
        for i in xrange(len(numbers)):
            n = numbers[i]
            remaining = numbers[i+1:]
            DietChecker.meet_goal(total, remaining, partial + [n])


lines = [line.strip() for line in fileinput.input()]
iter_items = iter(lines)
n_cases = int(iter_items.next())
for caseno in xrange(0, n_cases):
    ttls = iter_items.next()
    number_food = int(iter_items.next())
    DietChecker.combinations = []
    if DietChecker.meet_goals(iter_items, ttls, number_food):
        result = "yes"
    else:
        result = "no"
    print "Case #%s: %s" % (caseno + 1, result)

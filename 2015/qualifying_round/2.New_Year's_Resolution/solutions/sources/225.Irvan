// Authored by dolphinigle

#include <vector>
#include <list>
#include <map>
#include <set>

#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

#define FORN(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define REP(X,Y,Z) for (int (X) = (Y);(X) < (Z);++(X))

#define SZ(Z) ((int)(Z).size())
#define ALL(W) (W).begin(), (W).end()
#define PB push_back

#define MP make_pair
#define A first
#define B second

#define INF 1023123123
#define EPS 1e-11

#define MX(Z,Y) Z = max((Z),(Y))
#define MN(X,Y) X = min((X),(Y))

using namespace std;

typedef long long ll;
typedef double db;
typedef vector<int> vint;

int vs[33][3];
int targs[3];
int tots[3];

#ifdef DOLPHINIGLE_ENV
int main_b() {
#else
int main() {
#endif
  int ntc;
  cin >> ntc;
  FORN(itc, ntc) {
    printf("Case #%d: ", itc+1);
    FORN(i, 3) cin >> targs[i];
    int n;
    cin >> n;
    FORN(i, n) {
      FORN(j, 3) {
        cin >> vs[i][j];
      }
    }
    int ok = 0;
    FORN(i, (1 << n)) {
      FORN(j, 3) tots[j] = 0;
      FORN(j, n) if (i & (1 << j)) FORN(k, 3) tots[k] += vs[j][k];
      if (tots[0] == targs[0] && tots[1] == targs[1] && tots[2] == targs[2]) {
        ok = 1;
        break;
      }
    }
    if (ok) {
      cout << "yes" << endl;
    } else {
      cout << "no" << endl;
    }
  }

  return 0;
}




def can_eat(pool, optimal):
    """
    Determines if there is a subset of pool that, when added, equasl optimal.
    """

    if all([i == 0 for i in optimal]):
        return True
    
    if not pool or any([i < 0 for i in optimal]):
        return False

    o1 = optimal
    o2 = tuple([a - b for (a, b) in zip(optimal, pool[0])])

    return can_eat(pool[1:], o1) or can_eat(pool[1:], o2)

def resolution(filename):
    with open(filename) as f:
        lines = f.readlines()

    T = int(lines.pop(0))

    for i in range(0, T):
        foods = []
        optimal = map(int, lines.pop(0).split())
        
        N = int(lines.pop(0))

        for j in range(0, N):
            foods.append(map(int, lines.pop(0).split()))
        
        print 'Case #{0}: {1}'.format(i + 1, 'yes' if can_eat(foods, optimal) else 'no')

resolution('new_years_resolution.txt')

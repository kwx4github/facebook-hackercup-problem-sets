#include<cstdio>
#include<vector>
#include<cstring>
#include<algorithm>
using namespace std;

typedef struct T_food
{
   int a, b, c;
}food;

vector<bool> ans;

int main()
{
   int t; scanf("%d", &t);
   for(int tc=1;tc<=t;tc++)
   {
      int lima, limb, limc; scanf("%d%d%d", &lima, &limb, &limc);
      int n; scanf("%d", &n);
      vector<food> in;
      for(int i=0;i<n;i++) { food tmp; scanf("%d%d%d", &tmp.a, &tmp.b, &tmp.c); in.push_back(tmp); }
      
      vector<food> dp[1005];
      bool dp1[1005]; memset(dp1,false,sizeof(dp1));
      dp1[0]=true;
      food tmp1; tmp1.a=0; tmp1.b=0; tmp1.c=0;
      dp[0].push_back(tmp1);
      
      for(int i=0;i<n;i++)
      {
         for(int j=lima;j>=0;j--)
         {
            if(dp1[j]==true)
            {
               for(int k=0;k<dp[j].size();k++)
               {
                   if((dp[j][k].a+in[i].a)<=lima && (dp[j][k].b+in[i].b)<=limb && (dp[j][k].c+in[i].c)<=limc)
                   {
                      dp1[j+in[i].a]=true;
                      food tm;
                      tm.a=dp[j][k].a+in[i].a;
                      tm.b=dp[j][k].b+in[i].b;
                      tm.c=dp[j][k].c+in[i].c;
                      dp[j+in[i].a].push_back(tm); 
                   }
               }
            }
         }
      }
      bool an=false;
      for(int i=0;i<dp[lima].size();i++)
      {
         if(dp[lima][i].a==lima && dp[lima][i].b==limb && dp[lima][i].c==limc) { an=true; break; }
      }
      ans.push_back(an);
   }
   
   for(int i=0;i<ans.size();i++)
   {
      printf("Case #%d:", i+1);
      if(ans[i]==true) printf(" yes\n");
      else printf(" no\n");
   }
 
   return 0;
}

using System;
using System.Collections.Generic;
using System.IO;
class NewYearsResolution
{
    static int[] foodProtein;
    static int[] foodCarbohydrates;
    static int[] foodFats;
    static bool[] cases;
    static List<int> protein = new List<int>();
    static List<int> carbohydrates = new List<int>();
    static List<int> fats = new List<int>();
    static int wantedProtein;
    static int wantedCarbohydrates;
    static int wantedFats;
    static int totalFoods;
    static bool foundAnswer;

    static void Main()
    {
        StreamReader input = new StreamReader(@"C:\Users\atanas\Desktop\input.txt");

        int totalCases = int.Parse(input.ReadLine()); // INPUT - TOTAL TESTS
        cases = new bool[totalCases];

        for (int i = 0; i < totalCases; i++)
        {
            foundAnswer = false;
            string[] wantedValues = input.ReadLine().Split(); // INPUT - WANTED VALUES

            wantedProtein = int.Parse(wantedValues[0]);
            wantedCarbohydrates = int.Parse(wantedValues[1]);
            wantedFats = int.Parse(wantedValues[2]);

            totalFoods = int.Parse(input.ReadLine()); // INPUT - TOTAL FOODS

            foodProtein = new int[totalFoods];
            foodCarbohydrates = new int[totalFoods];
            foodFats = new int[totalFoods];

            for (int food = 0; food < totalFoods; food++)
            {
                string[] foodValues = input.ReadLine().Split(); // INPUT - AVAILABLE VALUES
                foodProtein[food] = int.Parse(foodValues[0]);
                foodCarbohydrates[food] = int.Parse(foodValues[1]);
                foodFats[food] = int.Parse(foodValues[2]);
            }

            GetMatchingCombinations(foodProtein, foodCarbohydrates, foodFats, 0, totalFoods);
            cases[i] = foundAnswer;
        }

        input.Close();

        StreamWriter output = new StreamWriter(@"C:\Users\atanas\Desktop\output.txt");

        for (int i = 0; i < cases.Length; i++)
        {
            output.WriteLine("Case #{0}: {1}", i + 1, cases[i] == true ? "yes" : "no");
        }

        output.Close();
    }
    public static void GetMatchingCombinations(int[] foodProtein, int[] foodCarbohydrates, int[] foodFats, int start, int length)
    {
        for (int i = start; i < totalFoods; i++)
        {
            protein.Add(foodProtein[i]);
            carbohydrates.Add(foodCarbohydrates[i]);
            fats.Add(foodFats[i]);

            CompareValues(protein, carbohydrates, fats);

            if (start != length)
            {
                GetMatchingCombinations(foodProtein, foodCarbohydrates, foodFats, i + 1, length);
            }

            protein.RemoveAt(protein.Count - 1);
            carbohydrates.RemoveAt(carbohydrates.Count - 1);
            fats.RemoveAt(fats.Count - 1);
        }
    }
    public static void CompareValues(List<int> protein, List<int> carbohydrates, List<int> fats)
    {
        bool proteinEquals = GetSumOfElements(protein) == wantedProtein;
        bool carbohydratesEquals = GetSumOfElements(carbohydrates) == wantedCarbohydrates;
        bool fatsEquals = GetSumOfElements(fats) == wantedFats;

        if (proteinEquals &&
            carbohydratesEquals &&
            fatsEquals)
        {
            foundAnswer = true;
        }
    }
    public static int GetSumOfElements(List<int> numbers)
    {
        int sum = 0;

        foreach (var number in numbers)
        {
            sum += number;
        }

        return sum;
    }
}
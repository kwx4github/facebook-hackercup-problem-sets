#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>

using namespace std;

struct triade
{
	int x, y, z;
	triade(int ax = 0, int ay = 0, int az = 0)
		: x(ax), y(ay), z(az)
	{
	}
	triade & operator += (const triade & src)
	{
		x += src.x; y += src.y; z += src.z;
		return *this;
	}
	bool operator == (const triade & src) const
	{
		return (x == src.x) && (y == src.y) && (z == src.z);
	}
};

bool trisum(const vector<triade> & a, const triade & b, int mask)
{
	triade result(0, 0, 0);
	for (int i = 0, j = 1; mask; ++i, j <<= 1)
	{
		if (mask & j)
		{
			result += a[i];
			mask ^= j;
		}
	}
	return result == b;
}

void solve()
{
	triade tmpl;
	cin >> tmpl.x >> tmpl.y >> tmpl.z;
	int n; cin >> n;
	vector<triade> a(n);
	for (int i = 0; i < n; ++i)
		cin >> a[i].x >> a[i].y >> a[i].z;

	int max_mask = 1 << n;
	for (int mask = 0; mask < max_mask; ++mask)
	{
		if (trisum(a, tmpl, mask))
		{
			cout << "yes" << endl;
			return;
		}
	}
	cout << "no" << endl;
}

int main()
{
	ios::sync_with_stdio(false);
#ifdef GRANDVIC_DEBUG
	freopen("e:/input.txt", "rt", stdin);
	freopen("e:/output.txt", "wt", stdout);
#endif
	int T; cin >> T;
	for (int t = 1; t <= T; ++t)
	{
		cout << "Case #" << t << ": ";
		solve();
	}

	return 0;
}

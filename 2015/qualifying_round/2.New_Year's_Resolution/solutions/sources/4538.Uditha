//
//  main.cpp
//  NewYearRes
//
//  Created by Uditha Kasthuriarachchi on 09/01/2015.
//  Copyright (c) 2015 Uditha Kasthuriarachchi. All rights reserved.
//

#include <iostream>
#include <fstream>
using namespace std;

struct Nutrition{
    int p;
    int c;
    int f;
    
    void clear()
    {
        p = c = f = 0;
    }
    
    bool operator>(const Nutrition& b)
    {
        return p>b.p && c>b.c && f>b.f;
    }
    
    bool operator==(const Nutrition& b)
    {
        return p==b.p && c==b.c && f==b.f;
    }
    
};

bool solveNutr(Nutrition* vals, int count, const Nutrition &target)
{
    int pos = 0;
    
    Nutrition sum;
    
    int totalpos = 1<<count;
    
    while (true) {
        
        //update the pos
        
        pos++;
        
        //std::bitset<32> x(pos);
        //cout<<"pos:"<<x<<endl;
        
        if (pos >= totalpos) return false;
    
        
        //get the sum
        sum.clear();
        for ( int i = 0; i < count;i++) {
            if (pos & 1<<i){
                sum.p += vals[i].p;
                sum.c += vals[i].c;
                sum.f += vals[i].f;
                
                if (sum>target) break;
                else if ( sum == target) return true;
            }
            
        }
        
        
    }
    
    return false;
}

int main2(int argc, const char * argv[]) {
    cout<< "val  =" << (1<<20)<<endl;
    return 0;
}


int main(int argc, const char * argv[]) {
    
    
    
    ofstream wf;
    wf.open ("result.txt");
    
    ifstream rf;
    rf.open("input.txt");
    
    int T;
    
    rf>>T;
    
    cout<<"total:"<<T<<endl;
    
    //int Gp, Gc, Gf;
    //int Tp, Tc, Tf;
    
    Nutrition G;
    
    int N;
    
    for ( int i = 1; i <= T; i++)
    {
        std::cout<<"Processing:"<<i<<std::endl;
        rf>>G.p >>G.c>>G.f;
        
        rf>>N;
        
        Nutrition* nutr = new Nutrition[N];
        
        
        for ( int j = 0; j < N; j++){
            rf >> nutr[j].p;
            rf >> nutr[j].c;
            rf >> nutr[j].f;
        }
        
        wf<<"Case #" << i << ": "<<(solveNutr(nutr, N, G)?"yes":"no")<<endl;
        
    }
    
    
    wf.close();
    rf.close();
    //std::cout<<"Wrote"<<std::endl;
    return 0;
    

}

package NewsYearResolution;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class driver {
	
	private static String filePath;
	private static List<String> fileData;
	private static int gp;
	private static int gc;
	private static int gf;
	private static int foods;
	private static String[] foodDetails;

	public static void main(String[] args) {
		
		foodDetails = new String[20];
		gp = 0;
		gc = 0;
		gf = 0;
		foods = 0;
		
		//filePath = "new_years_resolution_example_input.txt";
		filePath = "new_years_resolution.txt";
		parseFile();
		
		String[] temp = new String[3];
		
		/* iterate through loop N times */
		int caseCount = 1;
		for(int i = 1; i <= fileData.size()-1; i++)
		{	
			temp = fileData.get(i++).split("\\s+");
			gp = Integer.parseInt(temp[0]);
			gc = Integer.parseInt(temp[1]);
			gf = Integer.parseInt(temp[2]);
			
			foods = Integer.parseInt(fileData.get(i++));
			
			for(int j=0; j<foods; j++)
			{
				foodDetails[j] = fileData.get(i++);
			}
			i--;
			
			System.out.println("Case #" + caseCount++ + ": " + (bruteForce() ? "yes" : "no"));	
		}
		

	}
	
	private static void parseFile()
	{
		try {
			fileData = Files.readAllLines(Paths.get("src",filePath),StandardCharsets.US_ASCII);
			
		} catch (IOException e) {
			e.printStackTrace();
		}	
	}
	
	private static boolean bruteForce()
	{
		int[] p= new int[20];
		int[] c= new int[20];
		int[] f= new int[20];


		String[] temp = new String[3];
		
		for(int i=0; i<foods; i++)
		{
			temp = foodDetails[i].split("\\s+");
			p[i] = Integer.parseInt(temp[0]);
			c[i] = Integer.parseInt(temp[1]);
			f[i] = Integer.parseInt(temp[2]);
		}
		
		int pSum = 0;
		int cSum = 0;
		int fSum = 0;
		for(int i=0; i<foods; i++)
		{
			
			pSum += p[i];
			cSum += c[i];
			fSum += f[i];
		}
		
		if(pSum == gp && cSum == gc && fSum == gf)
			return true;
		
		if(pSum < gp || cSum < gc || fSum < gf)
			return false;
		
		
		for(int i=0; i<foods; i++)
		{
			for(int j=i; j<foods; j++)
			{
				if((p[i] + p[j] == gp)&&(c[i] + c[j] == gc)&&(f[i] + f[j] == gf))
					return true;
			}
		}
		
		
		for(int x=0; x<foods; x++)
		{
			for(int y=x; y<foods; y++)
			{
				pSum = 0;
				cSum = 0;
				fSum = 0;
				
				pSum += p[x];
				cSum += c[x];
				fSum += f[x];
				
				if((pSum == gp) && (cSum == gc) && (fSum == gf))
					return true;
				
				if((pSum > gp) || (cSum > gc) || (fSum > gf))
					break;
				
				for(int i=y+1; i<foods; i++)
				{
					pSum += p[i];
					cSum += c[i];
					fSum += f[i];
					
					if((pSum == gp) && (cSum == gc) && (fSum == gf))
						return true;
					
					if((pSum > gp) || (cSum > gc) || (fSum > gf))
						break;
				
					for(int j=i; j<foods; j++)
					{
						if((pSum + p[j] == gp)&&(cSum + c[j] == gc)&&(fSum + f[j] == gf))
							return true;
					}
				}
			}
		}
		
		
		return false;
	}

}

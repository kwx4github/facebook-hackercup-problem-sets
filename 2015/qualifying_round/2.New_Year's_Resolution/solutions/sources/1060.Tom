#include <iostream>
#include <set>
#include <array>
#include <iterator>
#include <vector>

/* build using gcc 4.8.2 with c++11 on ubuntu 14.04 LTS */

namespace std
{
    /* maybe this one is not needed (only for std::set internally) */
    template <typename T, size_t N>
    struct less< array<T, N> >
    {
        typedef std::array<T, N> type;
        bool operator () (const type &lhs, const type &rhs)
        {
            for (size_t i = 0; i < N; i++)
            {
                if (lhs[i] < rhs[i])
                    return true;
            }
            return false;
        }
    };

    template <class T, size_t N>
    ostream &operator << (ostream &os, const array<T, N> &arr)
    {
        copy(arr.cbegin(), arr.cend(), ostream_iterator<T>(os, " "));
        return os;
    }
    
    template <class T, size_t N>
    istream &operator >> (istream &is, array<T, N> &arr)
    {
        for (size_t i = 0; i < N; i++)
            is >> arr[i];

        return is;
    }
}

typedef std::array<int, 3> meal;

bool test(const std::vector<meal> &meals, const meal &target)
{
    std::set<meal> q_current;
    std::set<meal> q_new;
    /* eating nothing is also an option */
    q_current.insert({0,0,0});
    
    for (auto it = meals.cbegin(); it != meals.cend(); it++)
    {
        for (auto jt = q_current.cbegin(); jt != q_current.cend(); jt++)
        {
            const meal &mi = *it;
            const meal &mj = *jt;
            meal m = {mi[0]+mj[0], mi[1]+mj[1], mi[2]+mj[2]};
            if (m[0] < target[0] && m[1] < target[1] && m[2] < target[2])
            {
                q_new.insert(m);
            }
            else if (m[0] == target[0] && m[1] == target[1] && m[2] == target[2])
            {
                return true;
            }
        }
        q_current.insert(q_new.cbegin(), q_new.cend());
        q_new.clear();
    }
    return false;
}

void testcase(int casenr)
{
    meal G;
    int n;
    std::vector<meal> meals;

    std::cin >> G >> n;

    for (int i = 0; i < n; i++)
    {
        meal m;
        std::cin >> m;
        meals.push_back(m);
    }

    if (test(meals, G))
        std::cout << "Case #" << casenr << ": yes" << std::endl;
    else
        std::cout << "Case #" << casenr << ": no" << std::endl;
}

int main()
{
    int t;
    std::cin >> t;
    for (int i = 0; i < t; i++)
    {
        testcase(i+1);
    }

    return 0;
}

#include<iostream>
#include<cstdio>
#include<map>
#include<vector>
#include<map>
#include<list>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<set>

#define mod 1000000007
#define sd(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define pd(x) printf("%d",x)
#define ll int
#define mid ((start+end)/2)
#define intmax 99999999
#define no_nodes 1001
using namespace std;
ll power(ll b,ll exp,ll m) {ll ans=1; b%=m; while(exp){if(exp&1) ans=(ans*b)%m; exp>>=1; b=(b*b)%m; } return ans; }


//vector< vector<pair<int,int> > > adj(no_nodes);              //graph

struct triplet
{

    int f;
    int s;
    int t;
};

vector<triplet> a;
triplet temp;

bool ispossible(triplet r,int n)
{
    //cout<<r.f<<" "<<r.s<<" "<<r.t<<endl;
    //cout<<a[n].f<<" "<<a[n].s<<" "<<a[n].t<<endl;

    if(r.f==0&&r.s==0&&r.t==0) return true;
    if(n==0&&(a[n].f==r.f&&a[n].s==r.s&&a[n].t==r.t)) return true;
    if(n==0&&(a[n].f!=r.f||a[n].s!=r.s||a[n].t!=r.t))  return false;


    if(r.f<a[n].f||r.s<a[n].s||r.t<a[n].t)
    {
        return ispossible(r,n-1);
    }

    temp.f=r.f-a[n].f;
    temp.s=r.s-a[n].s;
    temp.t=r.t-a[n].t;
    return (ispossible(temp,n-1)||ispossible(r,n-1));


}



int main()
{

    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    triplet rdiet;

    int test,n,b,c;
    sd(test);
    int count=1;
    //test=1;
    while(test--)
    {
        a.clear();

        sd(rdiet.f);
        sd(rdiet.s);
        sd(rdiet.t);
        sd(n);
        while(n--)
        {
           sd(temp.f);
           sd(temp.s);
           sd(temp.t);
           a.push_back(temp);

           //cout<<"hi:"<<temp.f<<" "<<temp.s<<" "<<temp.t<<endl;

        }
        cout<<"Case #"<<count<<": ";

        if(ispossible(rdiet,(a.size()-1))==true)
        cout<<"yes"<<endl;
        else
        cout<<"no"<<endl;

        count++;


    }
   return 0;
}


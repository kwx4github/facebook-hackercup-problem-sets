#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

typedef long long LL;
#define rep(it,s) for(__typeof((s).begin()) it=(s).begin();it!=(s).end();it++)

int n;
int gp, gc, gf;
int p[22], c[22], f[22];
int vp[1<<20], vc[1<<20], vf[1<<20];

bool check() {

    if (!gp && !gc && !gf) return true;

    bool found = false;

    for (int i=1; i<(1<<n); i++) {

        int mask = i - (i&-i);

        int j = (int)(log2(i - mask) + 0.1);

        vp[i] = vp[mask] + p[j];
        vc[i] = vc[mask] + c[j];
        vf[i] = vf[mask] + f[j];

        if (vp[i]==gp && vc[i]==gc && vf[i]==gf) {
            found = true;
            break;
        }

    }

    return found;

}

bool bruteforce() {

    if (!gp && !gc && !gf) return true;

    bool found = false;

    for (int i=1; i<(1<<n); i++) {

        int tp = 0, tc = 0, tf = 0;

        for (int j=0; j<n; j++) if ((1<<j)&i) {
            tp += p[j];
            tc += c[j];
            tf += f[j];
        }

        if (tp==gp && tc==gc && tf==gf) {
            found = true;
            break;
        }

    }

    return found;

}

void solve() {

    cin>>gp>>gc>>gf;

    cin>>n;

    for (int i=0; i<n; i++) scanf("%d%d%d", p+i, c+i, f+i);

    bool res = check();

    if (0) {
        bool tmp = bruteforce();
        if (res != tmp) cout<<"ERROR"<<endl;
    }

    if (res) printf("yes");
    else printf("no");

    return;

}

int main() {

    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

    int cases;
    cin>>cases;
    for (int cas=1; cas<=cases; cas++) {

        printf("Case #%d: ", cas);

        solve();

        printf("\n");

    }

    return 0;

}

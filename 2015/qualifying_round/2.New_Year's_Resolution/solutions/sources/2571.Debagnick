#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<vector>
#include<queue>
#include<algorithm>
#define mod 1000000007
typedef long long li;
using namespace std;

typedef struct data
{
	li P;
	li C;
	li F;
} data;

/*class comparison		//for Priority Queue
{
	public : 
	bool operator()(customer a,customer b)
	{
		int pra=0,prb=0;
		pra=a.next;
		prb=b.next;
		if(pra<prb)
			return true;
		else
			return false;
	}
};

int comp(const void *a, const void *b)
{
	data m = *((data *)a);
	data n = *((data *)b);
	if(m.a>n.a)
		return 1;
	else if(m.a<n.a)
		return -1;
	else if(m.a==n.a)
	{
		if(m.d>n.d)
			return 1;
		else
			return -1;
	}
}

int exp(int x, int y)
{
	if(y==0)
		return 1;
	int z=0;
	z=exp(x,y/2);
	z=z*z;
	if((y%2)==1)
		z=z*x;
	return z;
}*/

/*Disjoint-Set Data Structure*/
/*vector<int> L;
void Make_Set(int N,int S[])
{
	L.resize(N);
	int i=0;
	for(i=0;i<N;i++)
	{
		L[S[i]]=S[i]);
	}
}

void union_set(int x, int y)
{
	L[x]=y;
}

int find_set(int x)		//with path compression
{
	if(x==L[x])
		return x;
	int root;
	root=find_set(L[x]);
	L[x]=root;
	return root;
}*/

data A[1000];

li calc(data x, data val, li i, li N)
{
	if(val.P==x.P && val.C==x.C && val.F==x.F)
		return 1;
	if(i==N)
		return 0;
	data y;
	y.P=x.P+A[i].P;
	y.C=x.C+A[i].C;
	y.F=x.F+A[i].F;
	return max(calc(y,val,i+1,N),calc(x,val,i+1,N));
}
	
	
int main()
{
	li T=0,N=0,R=0,i=0,len=0,end=0,max=0,k=0;
	data val,temp;
	scanf("%lld",&T);
	for(k=1;k<=T;k++)
	{
		R=0;
		scanf("%lld%lld%lld",&val.P,&val.C,&val.F);
		scanf("%lld",&N);
		for(i=0;i<N;i++)
		{
			scanf("%lld%lld%lld",&A[i].P,&A[i].C,&A[i].F);
		}
		temp.P=0;
		temp.C=0;
		temp.F=0;
		R=calc(temp,val,0,N);
		if(R==1)
			printf("Case #%lld: yes\n",k);
		else
			printf("Case #%lld: no\n",k);
	}
	return 0;
}

	

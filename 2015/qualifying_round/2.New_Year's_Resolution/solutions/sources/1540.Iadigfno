#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: Jonathan S. Prieto
# @Date:   2015-01-08 23:01:06
# @Last Modified by:   usuario
# @Last Modified time: 2015-01-08 23:42:48
import sys
from functools import wraps


class memo2(object):

    def __init__(self, func):
        self.func = func
        self.cache = {}

    def __call__(self, *args):
        try:
            return self.cache[args]
        except KeyError:
            value = self.func(*args)
            self.cache[args] = value
            return value
        except TypeError:
            return self.func(*args)

    def __repr__(self):
        return self.func.__doc__

    def __get__(self, obj, objtype):
        fn = functools.partial(self.__call__, obj)
        fn.reset = self._reset
        return fn

    def reset(self):
        self.cache = {}

food = dict()


@memo2
def dp(n, P, C, F):
    if n == 0:
        if P == 0 and C == 0 and F == 0:
            return True
        return False
    if dp(n - 1, P, C, F):
        return True
    p, c, f = food[n]
    if P >= p and C >= c and F >= f:
        return dp(n - 1, P - p, C - c, F - f)
    return False

with open('input.txt') as sys.stdin:
    T = int(raw_input())
    for t in range(1,T+1):
        food = dict()
        GP, GC, GF = map(int, raw_input().strip().split())
        N = int(raw_input())
        for i in range(N):
            P, C, F = map(int, raw_input().strip().split())
            food[i + 1] = [P, C, F]
        ANS = dp(N, GP, GC, GF)
        print "Case #{0}: {1}".format(t, 'yes' if ANS else 'no')
        dp.reset()

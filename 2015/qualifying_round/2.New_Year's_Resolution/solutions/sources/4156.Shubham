#include<iostream>
#include <cstdio>
#include <cstdlib>

static int node_count;

typedef struct
{
	int p;
	int c;
	int f;
}food;

bool subset_exists(food s[], food tuple[], int s_size, int t_size, food sum, int itr, food const target_sum);

bool generate_subet(food s[], food sum, int n)
{
	food *tuple_vec = (food*)malloc(n*sizeof(food));
	food temp = {0, 0, 0};
	bool ret = subset_exists(s, tuple_vec, n, 0, temp, 0, sum);
	free(tuple_vec);
	return ret;
}
int main()
{
	int t;
	std::cin >> t;
	for(int x=1;x<=t;x++)
	{
		food arr[21],sum,temp,temp_sum;
		node_count = 0;
		int flag1 = 0;
		int n;
		scanf("%d %d %d",&sum.p,&sum.c,&sum.f);
		scanf("%d",&n);
		temp_sum.p = temp_sum.c = temp_sum.f = 0;
		int i=0;
		for(int k=0;k<n;k++)
		{
			scanf("%d %d %d",&temp.p, &temp.c, &temp.f);
			
			if( temp.p < sum.p && temp.c < sum.c && temp.f < sum.f)
			{
				arr[i].p = temp.p;
				arr[i].c = temp.c;
				arr[i].f = temp.f;
				temp_sum.p += temp.p;
				temp_sum.c += temp.c;
				temp_sum.f += temp.f;
				i++;
			}
			else if(temp.p==sum.p && temp.c==sum.c && temp.f==sum.f)
			{
				i++;
				flag1 = 1;
			}
		}
		if(flag1)
		{
			printf("Case #%d: yes\n",x);
			continue;
		}
		if(temp_sum.p<sum.p||temp_sum.c<sum.c||temp_sum.f<sum.f)
		{
			printf("Case #%d: no\n",x);
			continue;
		}
		//number of element in the array is i+1
		if(generate_subet(arr, sum, i+1))
			printf("Case #%d: yes\n",x);
		else
			printf("Case #%d: no\n",x);
	}
	return 0;
}

bool subset_exists(food s[], food tuple[], int s_size, int t_size, food sum, int itr, food const target_sum)
{
	node_count++;
	if(sum.f==target_sum.f && sum.c==target_sum.c && sum.f==target_sum.f)
	{
		return true;
	}
	else
	{
		bool flag = false;
		food temp;
		for(int i=itr; i<s_size; i++)
		{
			tuple[t_size].p = s[i].p;
			tuple[t_size].c = s[i].c;
			tuple[t_size].f = s[i].f;
			temp.p = sum.p+s[i].p;
			temp.c = sum.c+s[i].c;
			temp.f = sum.f+s[i].f;
			if(subset_exists(s,tuple,s_size,t_size+1,temp,i+1,target_sum))
			{
				flag = true;
				break;
			}
		}
		return flag;
	}
}


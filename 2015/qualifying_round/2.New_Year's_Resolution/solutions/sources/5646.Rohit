package facebookcup;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

public class SumSet {

	
	  /*static void sum_up_recursive(ArrayList<Integer> numbers, int target, ArrayList<Integer> partial) {
	       int s = 0;
	       for (int x: partial) s += x;
	       if (s == target)
	            System.out.println("sum("+Arrays.toString(partial.toArray())+")="+target);
	       if (s >= target)
	            return;
	       for(int i=0;i<numbers.size();i++) {
	             ArrayList<Integer> remaining = new ArrayList<Integer>();
	             int n = numbers.get(i);
	             for (int j=i+1; j<numbers.size();j++) remaining.add(numbers.get(j));
	             ArrayList<Integer> partial_rec = new ArrayList<Integer>(partial);
	             partial_rec.add(n);
	             sum_up_recursive(remaining,target,partial_rec);
	       }
	    }
	    static void sum_up(ArrayList<Integer> numbers, int target) {
	        sum_up_recursive(numbers,target,new ArrayList<Integer>());
	    }*/
	static boolean eat=false;
	
	    static void sum_up_recursive_array(int[][] numbers, int[][] target, int[][] partial) {
	    	
	    	if(eat==true){
	    		return;
	    	}
		       int s = 0;
		      
		       int[][] targetSum=new int[1][3];
		      // for (int x: partial) s += x;
		       int kcnt=0;
		       for ( int j = 0; j < partial [ 0 ].length; j++ )
		        {
		             s=0;
		            for ( int i = 0; i < partial.length; i++ )
		                s = s + partial [ i ] [ j ];
		            	targetSum[0][kcnt]=s;
		            	kcnt++;
		        }
		       if (targetSum[0][0] == target[0][0] && targetSum[0][1] == target[0][1] && targetSum[0][2] == target[0][2])
		          {
		    	  
		    	   		//System.out.println("sum("+Arrays.toString(partial)+")="+target);
		    	   		/*for(int row=0;row<partial.length;row++){
		    	   			for(int col=0;col<3;col++){
		    	   				System.out.print(partial[row][col]+" ");
		    	   			}
		    	   			System.out.println(" ");
		    	   		}
		    	   		System.out.println("targetSum= "+targetSum[0][0]+" "+targetSum[0][1]+" "+targetSum[0][2]);
		    	   		System.out.println("target= "+target[0][0]+" "+target[0][1]+" "+target[0][2]);*/
		    	   		eat=true;
		    	   		return;
		            }
		       
		       
		       
		       if (targetSum[0][0] > target[0][0] || targetSum[0][1] > target[0][1] || targetSum[0][2] > target[0][2])
		            return;
		       
		       for(int i=0;i<numbers.length;i++) {
		           //  ArrayList<Integer> remaining = new ArrayList<Integer>();
		    	   int[][] remaining=new int[numbers.length-1][3];
		             int np = numbers[i][0];
		             int nc= numbers[i][1];
		             int nf= numbers[i][2];
		             
		             for (int j=0; j<numbers.length-1;j++) 
		            	 {
		            	// remaining[k]=numbers[j];
		            	 int[] aMatrix = numbers[j+1];
			               int   aLength = aMatrix.length;
			               remaining[j] = new int[aLength];
			               System.arraycopy(aMatrix, 0, remaining[j], 0, aLength);
		            	 }
		            // System.arraycopy(numbers, i+1, arg2, arg3, arg4);
		            // ArrayList<Integer> partial_rec = new ArrayList<Integer>(partial);
		            //// int[][] partial_rec=new int[partial.length][3];
		             ////System.arraycopy( partial, 0, partial_rec, 0, partial.length );
		             
		             int [][] partial_rec = new int[partial.length][];
		             for(int ip = 0; ip < partial.length; ip++)
		             {
		               int[] aMatrix = partial[ip];
		               int   aLength = aMatrix.length;
		               partial_rec[ip] = new int[aLength];
		               System.arraycopy(aMatrix, 0, partial_rec[ip], 0, aLength);
		             }
		             
		             
		            for(int k=0;k<partial_rec.length;k++)
		            {
		            	
		            	if(partial_rec[k][0]==0)
		            	{
		            		partial_rec[k][0]=np;
		            		partial_rec[k][1]=nc;
		            		partial_rec[k][2]=nf;
		            		break;
		            	}
		            }
		             // partial_rec.add(n);
		             
		             sum_up_recursive_array(remaining,target,partial_rec);
		       }
		    }
		    static void sum_up_array(int[][] numbers, int[][] target) {
		        sum_up_recursive_array(numbers,target,new int[numbers.length][3]);
		    }
	    
	    
	public static void main(String[] args) throws NumberFormatException, IOException {
		// TODO Auto-generated method stub
		/*int [][] numbers = {{40,70,30},{30,10,40},{20,20,50},{10,50,90},{40,10,20}};
        int[][] target = {{100,100,100}};
        //sum_up(new ArrayList<Integer>(Arrays.asList(numbers)),target);
        sum_up_array(numbers, target);
        eat=false;
        System.out.println("-------------------------");
        int [][] numbers2 = { {909, 302, 261}, {705, 597 ,823}, {291, 51, 126},{28, 697, 57},{593, 31 ,826},{311, 256, 57},
                {292, 14, 47},{29 ,730, 716},{12,529 ,146},{768, 16, 439},{37, 472, 15}, {350, 192 ,34},
                {163, 468, 238}, {69, 173, 10},{203, 72 ,690},{424, 875, 213},{223, 593, 292},{ 151, 46 ,10},
                {88, 90, 16},{773, 653 ,711}};
        int[][] target2 = {{292,264,512}};
        sum_up_array(numbers2, target2);*/
        
boolean set=false;
		
		int n;
		 BufferedReader fileReader=new BufferedReader(new FileReader("new_years_resolution.txt"));
	        String text="";
	        int cnt=0;
	        int caseNumber=1;
	        int T= Integer.valueOf(fileReader.readLine());
	        for(int record=0;record<T;record++)
	        {
	        	int[][] required=new int[1][3];
	        	String[] vals=fileReader.readLine().split(" ");
	        	required[0][0]=Integer.valueOf(vals[0]); 
	        	required[0][1]=Integer.valueOf(vals[1]);
	        	required[0][2]=Integer.valueOf(vals[2]);
	        	int foodAvailable=Integer.valueOf(fileReader.readLine());
	        	int [][]arrfood=new int[foodAvailable][3];
	        	for(int p=0;p<foodAvailable;p++){
	        		
	        			String[] cals=fileReader.readLine().split(" ");
	        			
	        			arrfood[p][0]=Integer.valueOf(cals[0]);
	        			arrfood[p][1]=Integer.valueOf(cals[1]);
	        			arrfood[p][2]=Integer.valueOf(cals[2]);
	        	}
	        	
	        	/*for(int p=0;p<foodAvailable;p++){
	        		for(int q=0;q<3;q++)
	        		{
	        			System.out.print(arrfood[p][q]+" ");
	        		}
	        		System.out.println(" ");
	        	}*/
	        	  sum_up_array(arrfood, required);
	        	  if(eat)
	        	  {
	        		  System.out.println("Case #"+caseNumber+": yes");
	        	  }
	        	  else{
	        		  System.out.println("Case #"+caseNumber+": no");
	        	  }
	        	  caseNumber++;
	        	  eat=false;

	        	////////////////
	        	//List testList= twoDArrayToList(arrfood);
	        	
	        // System.out.println("test = "+testList.toString());	
	        	
	        }
        
        
        
        
	}

}

use strict;
use warnings;

use Data::Dumper;

my $tc = <>;
for my $T ( 1..$tc ) {

	my @g = split " ", <>;
	my $n = int <>;
	my @all = map +( [ split " ", <> ] ), ( 0..( $n - 1 ) );

	my @a;
	my $f = 0;
	for my $mask ( 0..( ( 1 << $n ) - 1 ) ) {
		$a[ 0 ] = $a[ 1 ] = $a[ 2 ] = 0;
		for my $i ( 0..( $n - 1 ) ) {
			next unless ( ( $mask >> $i ) & 1 );
                        $a[ 0 ] += $all[ $i ][ 0 ];
                        $a[ 1 ] += $all[ $i ][ 1 ];
                        $a[ 2 ] += $all[ $i ][ 2 ];
		}
		#########################################################################################
		# my @temp = @all[ map +(  ( $mask >> $_ ) & 1 ? ( $_  ) : () ), ( 0..( $n - 1 ) ) ];
		# my $a = shift @temp;
		# next unless $a;
		# my @a = @$a;
		# for my $b ( @temp ) {
		#	$a[ 0 ] += $b->[ 0 ];
		#	$a[ 1 ] += $b->[ 1 ];
		#	$a[ 2 ] += $b->[ 2 ];
		# }
		#########################################################################################
		$f = ( $a[ 0 ] == $g[ 0 ] and $a[ 1 ] == $g[ 1 ] and $a[ 2 ] == $g[ 2 ] );
		last if $f;
	}

	print "Case #$T: ".( $f ? "yes" : "no" )."\n";
}

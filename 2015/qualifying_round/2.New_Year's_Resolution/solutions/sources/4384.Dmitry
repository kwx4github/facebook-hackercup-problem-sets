import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

/**
 * by dt on 1/9/15, 8:45 PM
 */
public class NewYearsResolution {
    public static void main(String... args) throws FileNotFoundException {
        Scanner sc = new Scanner(new FileInputStream("NewYearsResolution.in.txt"));
        System.out.println(Long.MAX_VALUE - 1000L * 10000L * 10000L - 1000L * 10000L - 1000L);
        int count = sc.nextInt();
        PrintStream ps = new PrintStream("NewYearsResolution.out.txt");
        for (int i = 1; i <= count; i ++) {
            long desired = sc.nextLong() * 10000 * 10000 + sc.nextLong() * 10000 + sc.nextLong();
            int foodsN = sc.nextInt();
            long[] foods = new long[foodsN];
            for (int k = 0; k < foodsN; k ++) {
                foods[k] = sc.nextLong() * 10000 * 10000 + sc.nextLong() * 10000 + sc.nextLong();
            }
            String res = "Case #" + i + ": " + (canEat(desired, foods) ? "yes" : "no");
            ps.println(res);
        }
        ps.flush();ps.close();
    }

    private static boolean canEat(long desired, long[] foods) {
        List<Long> combos = new LinkedList<Long>();
        combos.add(0L);

        for (long f : foods) {
            List<Long> additions = new LinkedList<Long>();
            for (long l : combos) {
                long newCombo = l + f;
                if (newCombo < desired) {
                    additions.add(l + f);
                } else if (newCombo == desired) {
                    return true;
                }
            }
            combos.addAll(additions);
        }
        return false;
    }


    private static int[] readArray(Scanner sc, int n) {
        int[] res = new int[n];
        for (int k = 0; k < n; k ++) {
            res[k] = sc.nextInt();
        }
        return res;
    }

}

#include <iostream>
using namespace std;

const int MAXN = 1003;

bool dp[MAXN][MAXN][MAXN];
bool check[3][MAXN];
int food[MAXN][3];

void checkFun(int m, int d, bool dp[], int M) {
	for (int i = 0; i <= M; ++i) dp[i] = false;
	dp[0] = true;
	for (int z = 0; z < m; ++z) {
		int v = food[z][d];
		for (int i = M; i >= v; --i) {
			if (dp[i]) continue;
			if (dp[i - v]) {
				dp[i] = true;
			}
		}
	}
	// cout << dp[M] << endl;
}

bool filter(int m, int P, int C, int F) {
	checkFun(m, 0, check[0], P);
	checkFun(m, 1, check[1], C);
	checkFun(m, 2, check[2], F);
	if (!check[0][P] or !check[1][C] or !check[2][F]) return false;
	return true;
}

bool solve(int m, int P, int C, int F) {
	if (!filter(m, P, C, F)) {
		// cout << "filtered" << endl;
		return false;
	}
	for (int i = 0; i <= P; ++i) {
		for (int j = 0; j <= C; ++j) {
			for (int k = 0; k <= F; ++k) {
				dp[i][j][k] = false;
			}
		}
	}
	dp[0][0][0] = true;
	for (int z = 0; z < m; ++z) {
		int p = food[z][0], c = food[z][1], f = food[z][2];
		for (int i = P; i >= p; --i) {
			if (!check[0][i]) continue;
			for (int j = C; j >= c; --j) {
				if (!check[1][j]) continue;
				for (int k = F; k >= f; --k) {
					if (!check[2][k]) continue;
					if (dp[i - p][j - c][k - f]) {
						dp[i][j][k] = true;
					}
					if (dp[P][C][F]) return true;
				}
			}
		}
	}
	return false;
}

int main() {

	int T; cin >> T;
	for (int t = 0; t < T; t++) {
		printf("Case #%d: ", t + 1);
		int m, P, C, F;
		cin >> P >> C >> F >> m;
		for (int i = 0; i < m; ++i) cin >> food[i][0] >> food[i][1] >> food[i][2];
 		if (solve(m, P, C, F)) cout << "yes" << endl;
 		else cout << "no" << endl;
	}
}
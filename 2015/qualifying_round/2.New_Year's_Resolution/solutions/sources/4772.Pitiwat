/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newyearresolution;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

/**
 *
 * @author pchompoocotr
 */
public class Main {
    public void doAction() {
        int t = 0;
        int tCount = 1;
        int food = 0;
        int foodCount = 0;
        int gp = 0;
        int gc = 0;
        int gf = 0;
        int[] p = new int[20];
        int[] c = new int[20];
        int[] f = new int[20];
        
        
        
        try {
            BufferedReader reader = new BufferedReader(new FileReader(new File("new_years_resolution.txt")));
            String line = reader.readLine();
            
            while (line != null) {
                //System.out.println(line);
                
                if (t < 1) {
                    t = Integer.parseInt(line);
                    line = reader.readLine();
                    continue;
                }
                
                // Collect data
                if (gp < 10 && gc < 10 && gf < 10) {
                    String[] gComponents = line.split(" ");
                    gp = Integer.parseInt(gComponents[0]);
                    gc = Integer.parseInt(gComponents[1]);
                    gf = Integer.parseInt(gComponents[2]);
                    
                    line = reader.readLine();
                    continue;
                }
                
                if (food < 1) {
                    food = Integer.parseInt(line);
                    foodCount = 0;
                    line = reader.readLine();
                    continue;
                }
                
                if (foodCount < food) {
                    String[] components = line.split(" ");
                    p[foodCount] = Integer.parseInt(components[0]);
                    c[foodCount] = Integer.parseInt(components[1]);
                    f[foodCount] = Integer.parseInt(components[2]);
                    
                    foodCount++;
                } 
                
                // Start calculate
                if (foodCount == food) {
                    if (calulate3(food, gp, gc, gf, p, c, f)) {
                        System.out.println("Case #" + tCount + ": yes");
                    } else {
                        System.out.println("Case #" + tCount + ": no");
                    }
                    
                    // Reinitialize
                    
                    gp = 0;
                    gc = 0;
                    gf = 0;
                    food = 0;
                    p = new int[20];
                    c = new int[20];
                    f = new int[20];
                    
                    // Count test case
                    tCount++;
                    t--;
                }
                
                // Next line
                line = reader.readLine();
                
                // Finish
                if (t == 0) {
                    return;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private boolean calulate(int food, int gp, int gc, int gf, int[] p, int[] c, int[] f) {
        //System.out.println(food + "," + gp + "," + gc + "," + gf + "," + Arrays.toString(p) + "," + Arrays.toString(c) + "," + Arrays.toString(f));
        
        for (int i = 0; i < food; i++) {
            int rp = gp - p[i];
            int rc = gc - c[i];
            int rf = gf - f[i];
            System.out.println("index " + i);
            boolean[] usageIndex = new boolean[]{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
            usageIndex[i] = true;
            
            while (rp > 0 && rc > 0 && rf > 0) {
                int cp = 0;
                int cc = 0;
                int cf = 0;
                
                for (int j = 0; j < food; j++) {
                    // Check usage
                    if (!usageIndex[j]) {
                        // Find suitable result
                       if (rp >= p[j] && rc >= c[j] && rf >= f[j]) {
                            cp = p[j];
                            cc = c[j];
                            cf = f[j];
                            usageIndex[j] = true;System.out.println(" - with index " + j);
                            break;
                       }
                    }
                }
                
                if (cp > 0 && cc > 0 && cf > 0) {
                    rp -= cp;
                    rc -= cc;
                    rf -= cf;//System.out.println("result : " + rp + " " + rc + " " + rf);
                } else {
                    break;
                }
            }
            if (rp == 0 && rc == 0 && rf == 0) {
                return true;
            }
            
           System.out.println("remain : " + rp + " " + rc + " " + rf);
        }
        
        return false;
    }
     
    private boolean calulate3(int food, int gp, int gc, int gf, int[] p, int[] c, int[] f) {
        for (int i = 0; i < food; i++) {
            int sp = p[i];
            int sc = c[i];
            int sf = f[i];
            
            if (sp == gp && sc == gc && sf == gf) {
                return true;
            }
            
            boolean[] usageIndex = new boolean[]{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
            usageIndex[i] = true;
            
            while (sp < gp && sc < gc && sf < gf) {
                for (int j = 0; j < food; j++) {
                    // Check usage
                    if (!usageIndex[j]) {
                        int csp = sp + p[j];
                        int csc = sc + c[j];
                        int csf = sf + f[j];
                        
                        if (csp < gp && csc < gc && csf < gf) {
                            sp = csp;
                            sc = csc;
                            sf = csf;
                            usageIndex[j] = true;
                        } else if (csp == gp && csc == gc && csf == gf) {
                            return true;
                        }
                    }
                }
                
                // Chage number
                int usageCount = 0;
                for (int x = 0; x < food; x++) {
                    usageCount++;
                }
                if (usageCount >= food) {
                    break;
                }
            }
        }
        
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        new Main().doAction();
    }
    
}

#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <vector>
#include <set>
#include <string>
#include <map>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <list>
#include <deque>
#include <algorithm>

using namespace std;

class Solution
{
    static const int MAXN = 21;
	bool Result;
    int N;
    int Gp, Gc, Gf;
    int P[ MAXN ], C[ MAXN ], F[ MAXN ];
public:
    bool Func( int p = 0, int c = 0, int f = 0, int i = 0 )
    {
        if( p > Gp || c > Gc || f > Gf )
            return false;
        if( p == Gp && c == Gc && f == Gf )
            return true;
        if( i == N )
            return false;
        return Func( p + P[ i ], c + C[ i ], f + F[ i ], i + 1 ) || Func( p, c, f, i + 1 );
    }

    void Work()
	{
        Result = Func();
	}
	
	void Read()
	{
        int i;
        scanf( "%d%d%d", &Gp, &Gc, &Gf );
        scanf( "%d", &N );
        for( i = 0; i < N; ++i ) 
        {
            scanf( "%d%d%d", &P[ i ], &C[ i ], &F[ i ] );
        }
	}

	void Write( int t )
	{
		printf( "Case #%d: %s\n", t, Result ? "yes" : "no" );
	}
};

vector< Solution > solution;

int main()
{
	int i, t;
	scanf( "%d", &t );
	solution.resize( t );
	for( i = 0; i < t; ++i )
		solution[ i ].Read();
#pragma omp parallel for schedule(dynamic, 1)
	for( i = 0; i < t; ++i )
		solution[ i ].Work();
	for( i = 0; i < t; ++i )
		solution[ i ].Write( i + 1 );
	return 0;
}

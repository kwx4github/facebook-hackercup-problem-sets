#include <iostream>
#include <vector>

struct Nutritive
{
	int P;
	int C;
	int F;
};

bool solve_impl(Nutritive target, const std::vector<Nutritive>& foods, int food_index)
{
	if (food_index == foods.size()) return false;
	const Nutritive& food = foods[food_index];

	if (solve_impl(target, foods, food_index + 1)) return true;

	target.P -= food.P;
	target.C -= food.C;
	target.F -= food.F;
	if (target.P == 0 && target.C == 0 && target.F == 0) return true;
	if (target.P < 0 || target.C < 0 || target.F < 0) return false;

	return solve_impl(target, foods, food_index + 1);
}

bool solve(Nutritive target, const std::vector<Nutritive>& foods)
{
	return solve_impl(target, foods, 0);
}

int main()
{
	int T;
	std::cin >> T;
	for (int t = 0; t < T; t++) {
		Nutritive target;
		std::cin >> target.P >> target.C >> target.F;
		
		int N;
		std::cin >> N;
		std::vector<Nutritive> foods;
		for (int n = 0; n < N; n++) {
			Nutritive food;
			std::cin >> food.P >> food.C >> food.F;
			foods.push_back(std::move(food));
		}
		
		std::cout << "Case #" << t + 1 << ": " << (solve(target, foods) ? "yes" : "no") << std::endl;
	}
	return 0;
}

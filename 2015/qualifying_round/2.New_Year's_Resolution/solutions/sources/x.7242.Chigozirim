package hackercup;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

class FoodTuple implements Comparable<FoodTuple> {
	private int P; // Protein
	private int C; // Carbohydrates
	private int F; // Fat
	private int compareNutrient; //

	public FoodTuple() {
		this.P = 0;
		this.C = 0;
		this.F = 0;
		this.compareNutrient = 0;
	}

	public int compareTo(FoodTuple o) {
		switch (compareNutrient) {
		case 1:
			if (C > o.C) {
				return 1;
			} else if (C < o.C) {
				return -1;
			}
			return 0;
		case 0:
			if (P > o.P) {
				return 1;
			} else if (P < o.P) {
				return -1;
			}
			return 0;
		case 2:
			if (F > o.F) {
				return 1;
			} else if (F < o.F) {
				return -1;
			}
			return 0;
		}
		return 0;
	}

	public int getC() {
		return C;
	}

	public void setC(int c) {
		C = c;
	}

	public int getP() {
		return P;
	}

	public void setP(int p) {
		P = p;
	}

	public int getF() {
		return F;
	}

	public void setF(int f) {
		F = f;
	}

	public int getCompareNutrient() {
		return compareNutrient;
	}

	public void setCompareNutrient(int comp) {
		this.compareNutrient = comp;
	}

	@Override
	public String toString() {
		return String.format("%d %d %d", P, C, F);
	}
}

class NewYearResolution {
	public static void main(String[] args) throws IOException {
		File inputFile = new File("new_years_resolution.txt");
		PrintWriter writer = new PrintWriter(new FileWriter(new File(
				"outputfile.out")));
		FoodTuple totalFoodAllowed = new FoodTuple(); // The total food allowed
														// in by alex
		int whichNutrient = 0; // which nutrient is our base
		ArrayList<Integer> proteins = new ArrayList<>();
		ArrayList<Integer> carbohydrates = new ArrayList<>();
		ArrayList<Integer> fats = new ArrayList<>();
		ArrayList<FoodTuple> allFoods = new ArrayList<FoodTuple>();
		ArrayList<FoodTuple> toBeDeleted = new ArrayList<FoodTuple>();
		FoodTuple foodTuple = null;
		int noOfMeals = 0;
		boolean match = false;
		try (Scanner scanner = new Scanner(inputFile)) {
			// Read the number of test cases
			int testCase = scanner.nextInt();
			int count = 0;

			// For each test case
			for (int Case = 1; Case <= testCase; Case++) {
				match = false;
				proteins.clear();
				carbohydrates.clear();
				fats.clear();
				allFoods.clear();
				toBeDeleted.clear();
				count = 0;
				writer.printf("Case #%d: ", Case);
				// Fetch amount of each type of macro nutrient required
				totalFoodAllowed.setP(scanner.nextInt());
				totalFoodAllowed.setC(scanner.nextInt());
				totalFoodAllowed.setF(scanner.nextInt());
				System.out.println(totalFoodAllowed);

				// Get the number of possible meals
				noOfMeals = scanner.nextInt();
				for (int meals = 0; meals < noOfMeals; meals++) {
					// Fetch the possible foods
					read: while (scanner.hasNext()) {
						switch (count) {
						case 0:
							foodTuple = new FoodTuple();
							foodTuple.setP(scanner.nextInt());
							foodTuple.setCompareNutrient(totalFoodAllowed
									.getCompareNutrient());
							count++;
							break;
						case 1:
							foodTuple.setC(scanner.nextInt());
							count++;
							break;
						case 2:
							foodTuple.setF(scanner.nextInt());
							allFoods.add(foodTuple);
							count = 0;
							meals++;
							if (meals == noOfMeals)
								break read;
							break;
						}
					}
				}

				// Eliminate all impossible meals
				// Mark meals for deletion
				for (int i = 0; i < allFoods.size(); i++) {
					// check P
					if (allFoods.get(i).getP() > totalFoodAllowed.getP()) {
						toBeDeleted.add(allFoods.get(i));
						continue;
					}
					// check C
					if (allFoods.get(i).getC() > totalFoodAllowed.getC()) {
						toBeDeleted.add(allFoods.get(i));
						continue;
					}
					// check F
					if (allFoods.get(i).getF() > totalFoodAllowed.getF()) {
						toBeDeleted.add(allFoods.get(i));
						continue;
					}
				}

				// Eliminate marked meals
				allFoods.removeAll(toBeDeleted);
				Collections.sort(allFoods);

				// Separate the tuples into their respective arraylists
				for (FoodTuple x : allFoods) {
					proteins.add(x.getP());
					carbohydrates.add(x.getC());
					fats.add(x.getF());
				}
				
				//Sort all the lists
				Collections.sort(proteins);
				Collections.sort(carbohydrates);
				Collections.sort(fats);

				if (!hasSum(proteins, 0, totalFoodAllowed.getP())) {

					writer.printf("no%n");
					continue;
				}

				if (!hasSum(carbohydrates, 0, totalFoodAllowed.getC())) {

					writer.printf("no%n");
					continue;
				}

				if (hasSum(fats, 0, totalFoodAllowed.getF())) {
					System.out.println("Match");
				} else {
					writer.printf("no%n");
					continue;
				}
				writer.printf("yes%n");
			}
			writer.flush();
			writer.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static boolean hasSum(ArrayList<Integer> array, int start, int sum) {
		if (sum == 0) // found the sum?
			return true;

		if (start > array.size() - 1)// reached end of the array?
			return false;

		return hasSum(array, start + 1, sum)
				|| hasSum(array, start + 1, sum - array.get(start));

	}
}

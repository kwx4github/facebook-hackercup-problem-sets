#include<iostream>
#include<algorithm>
#include<math.h>
#include<vector>
#include<string>
#include<fstream>

using namespace std;

struct values
{
	int p = 0;
	int c = 0;
	int f = 0;
};

bool generate_powerset(values *temparr, values*arr, int size, int level, int start, const values & target)
{
	bool success = false;
	int i, j;
	for (i = start; i<size; i++)
	{
		temparr[level] = arr[i];
		
		int sump = 0;
		int sumc = 0;
		int sumf = 0;
		for (j = 0; j <= level; j++)
		{
			sump += temparr[j].p;
			sumc += temparr[j].c;
			sumf += temparr[j].f;			
		}

		if (sump == target.p && sumc == target.c && sumf == target.f)
			return true;

		if (i < size - 1)
		{
			if (generate_powerset(temparr, arr, size, level + 1, i + 1, target))
				return true;
		}
	}
	return false;
}

int main()
{
	ifstream fin("new_years_resolution.txt");
	ofstream fout("Output.txt");
	int n = 0;

	fin >> n;
	

	for (int c = 0; c < n; c++)
	{
		values target;
		fin >> target.p >> target.c >> target.f;
		
		int count = 0;
		fin >> count;
		values* myValues = new values[count];
		for (int i = 0; i < count; i++)
		{
			fin >> myValues[i].p >> myValues[i].c >> myValues[i].f;
		}
		values*temp = new values[count];
		if (generate_powerset(temp, myValues, count, 0, 0, target))
		{
			fout << "Case #" << c + 1 << ": yes" << endl;
		}
		else
		{
			fout << "Case #" << c + 1 << ": no" << endl;
		}

	}


	return 0;
}

/*#define size 4

int arr[size] = { 1, 2, 3, 4 };

void generate_powerset(int *temparr, int level, int start)
{
	int i, j;
	for (i = start; i<size; i++)
	{
		temparr[level] = arr[i];
		printf("{ ");
		for (j = 0; j <= level; j++)
			printf("%d ", temparr[j]);
		printf("}\n");
		if (i < size - 1)
			generate_powerset(temparr, level + 1, i + 1);
	}
}

int main()
{
	printf("{ }\n");
	int temparr[size] = { 0 };
	//generate_powerset(temparr, 0, 0);
	cout << (1<<0);
}*/
from collections import Counter, defaultdict
from itertools import cycle, product as prod, permutations as perm, combinations as comb, combinations_with_replacement as combr
from sys import stdin, stdout
read_ints = lambda: map(int, raw_input().split())
read_floats = lambda: map(float, raw_input().split())

def conv_percent(v):
    return (int)(float(v) * 1000 + 0.5)

def main():
    t = read_ints()[0]
    for i in xrange(t):
        cas = i + 1
        p, c, f = read_ints()
        n = read_ints()[0]
        vp = []
        vc = []
        vf = []
        for i in xrange(n):
            ap, ac, af = read_ints()
            vp.append(ap)
            vc.append(ac)
            vf.append(af)
        ans = False
        i = 1
        while i < (2 ** n):
            tp, tc, tf = 0, 0, 0
            for j in xrange(n):
                if i & (2 ** j):
                    tp += vp[j]
                    tc += vc[j]
                    tf += vf[j]
            if (tp == p) and (tc == c) and (tf == f):
                ans = True
                break
            i += 1

        print "Case #%d: %s" % (cas,  "yes" if ans else "no")

if __name__ == '__main__':
    main()

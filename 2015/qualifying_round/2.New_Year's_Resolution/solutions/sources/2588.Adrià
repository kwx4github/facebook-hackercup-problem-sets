<?php
set_time_limit(0);
// Facebook Hacker Cup 2015 Qualification Round - New Year's Resolution
header("Content-Type: text/plain");
// Below you copy and paste the input:
$input = "20
985 848 926
20
179 356 12
44 490 297
126 181 58
55 225 110
321 99 486
115 70 171
602 187 844
391 11 188
53 76 203
29 374 307
78 959 34
182 24 828
318 296 43
244 72 530
161 730 76
751 808 296
487 54 106
857 36 588
231 12 118
291 62 35
425 837 606
20
36 382 976
898 10 596
773 773 287
160 170 135
166 13 340
412 94 139
441 348 778
676 103 850
134 37 244
12 146 165
542 14 623
264 248 10
89 71 18
173 27 452
340 222 227
62 560 446
139 245 48
15 830 769
774 655 30
429 216 92
524 829 430
20
45 392 93
140 56 30
29 42 621
249 829 584
886 53 26
691 215 765
174 160 477
65 481 367
62 239 741
48 361 10
950 657 395
82 712 883
202 21 249
973 273 110
123 277 871
11 15 67
65 192 182
730 28 717
168 952 720
55 829 760
826 133 225
20
109 598 886
630 811 280
463 241 444
101 746 10
14 847 927
45 742 961
10 720 111
800 773 320
391 13 234
594 21 99
232 112 126
304 965 351
907 46 310
189 40 168
39 80 443
234 29 846
647 40 56
307 66 548
407 93 878
848 15 186
390 818 745
20
208 14 139
694 107 395
23 987 19
25 786 329
493 104 401
200 122 23
50 386 241
827 128 73
45 961 682
206 366 86
15 71 282
12 293 553
650 454 495
148 385 497
392 968 334
199 387 39
973 51 280
354 11 672
493 127 17
540 308 143
771 534 961
20
291 72 444
15 249 256
192 25 311
325 131 10
66 10 67
969 135 19
360 43 129
187 104 756
105 226 694
179 41 837
359 762 422
278 241 278
534 53 29
314 123 740
820 299 60
562 920 100
17 16 211
11 64 16
125 562 929
661 269 546
410 787 593
20
157 816 309
51 78 20
281 125 720
29 881 205
91 476 664
552 985 252
414 753 58
98 261 469
684 57 494
206 276 570
233 731 655
16 226 814
28 617 242
756 600 176
292 259 708
949 52 312
11 452 87
448 919 291
20 20 20
281 54 17
536 749 776
20
55 10 724
122 264 654
10 980 98
494 242 170
159 814 813
615 278 95
251 298 381
310 43 52
735 913 69
195 29 266
15 324 268
12 831 11
19 148 12
30 323 24
417 186 702
799 890 338
79 615 470
540 62 142
206 132 220
347 15 916
861 761 436
20
53 70 126
176 143 95
758 312 907
409 183 29
887 63 355
781 941 21
235 192 358
43 20 93
106 138 551
196 10 576
195 875 263
213 449 401
639 73 934
655 222 98
53 71 141
537 976 662
669 26 11
294 729 93
436 17 15
246 341 467
788 804 781
20
447 71 70
274 994 525
577 199 427
543 963 263
438 11 11
484 844 38
54 125 371
123 10 217
797 403 18
41 527 163
487 10 171
16 762 912
10 932 68
694 118 222
759 10 22
670 917 553
107 871 413
119 82 410
614 472 670
230 100 99
708 39 464
20
691 490 32
10 10 785
130 230 92
83 66 217
30 106 576
10 734 108
70 193 173
501 467 154
873 696 10
259 285 183
205 26 423
10 100 10
544 920 63
357 856 93
503 13 41
372 62 393
438 181 35
877 369 662
636 897 273
23 987 807
737 308 815
20
11 117 72
13 23 13
220 939 229
215 852 88
20 563 36
544 713 524
98 626 333
15 401 270
35 232 110
546 458 955
25 351 194
27 239 494
675 206 38
40 107 844
16 69 753
431 504 123
33 10 11
938 82 14
151 186 974
230 174 22
828 683 564
20
526 612 937
85 194 532
729 56 190
29 46 518
363 18 134
60 741 529
321 353 874
90 376 71
11 391 83
52 179 772
832 292 690
524 434 459
571 38 10
32 415 58
96 352 802
47 848 436
980 73 621
174 60 10
60 339 250
64 39 423
100 100 100
1
100 100 100
181 750 819
20
60 10 576
303 39 917
158 159 42
16 499 333
115 959 782
841 229 358
142 10 742
181 750 819
53 588 951
668 160 18
10 66 238
865 416 10
374 107 988
149 926 470
59 223 914
11 564 201
23 24 28
10 359 455
818 159 841
132 963 10
905 801 686
20
96 702 733
255 767 766
813 66 80
561 418 216
37 778 95
765 818 433
869 761 45
270 635 304
623 356 44
871 407 13
12 303 607
972 148 951
374 280 16
179 191 583
38 552 19
22 91 66
243 981 10
13 171 864
91 11 129
168 728 757
401 536 646
20
706 58 262
48 13 296
716 181 182
73 362 146
42 629 451
74 37 13
61 486 435
742 480 405
353 14 54
166 119 607
14 408 181
12 425 17
121 661 194
327 499 633
11 234 103
14 624 86
114 491 84
482 610 88
15 19 722
11 293 688
291 999 572
20
514 631 123
688 547 135
822 542 52
95 22 100
25 100 384
28 174 413
37 474 15
702 511 465
10 26 742
616 863 74
815 850 707
364 10 563
48 43 225
725 75 62
991 270 100
26 131 867
168 803 59
289 408 23
70 54 234
459 876 640
658 874 116
20
201 149 224
18 834 789
41 90 23
28 615 25
435 144 568
777 41 921
129 375 447
256 804 531
439 63 10
223 324 105
54 204 977
669 10 66
23 99 12
132 600 90
302 77 38
354 406 307
328 182 53
14 203 633
914 978 14
300 15 542
100 100 100
5
40 70 30
30 10 40
20 20 50
10 50 90
40 10 20";

// Common functions for all problems:
function exit_alt($code = 0, $message = "") {
  echo "ERROR ".$code.": '".$message."'";
  exit($code);
}

function parse($input) {
  $lines = explode("\n", $input);
  $return = array();
  $return["lines"] = array();

  foreach ($lines as $i => $line) {
    if ($i == 0) {
      $return["t"] = $line;
    } else {
      if (!empty($line) || $line == 0) {
        $return["lines"][] = trim($line);
      }
    }
  }

  return $return;
}

function sum($a, $b, $limits) {
	$return = array(0 => ($a[0] + $b[0]), 1 => ($a[1] + $b[1]), 2 => ($a[2] + $b[2]));
	$bingo = 0;
	foreach ($return as $key => $value) {
		if ($value > $limits[$key]) {
			return false;
		}
		if ($value == $limits[$key]) {
			$bingo++;
		}
	}
	if ($bingo == 3) {
		return true;
	}
	return $return;
}

function recursive($count, $key, $food, $foodneeded) {
	foreach ($food as $insidekey => $insidefooditem) {
		if ($insidekey <= $key) {
			continue;
		}
		$possiblecount = sum($count, $insidefooditem, $foodneeded);
		if ($possiblecount === false) {
			continue;
		} elseif ($possiblecount === true) {
			return "yes";
		} else {
			$response = recursive($possiblecount, $insidekey, $food, $foodneeded);
			if ($response == "yes") {
				return "yes";
			}
		}
	}
}

// Here begins the journey!
function resolve($foodneeded, $food) {
	foreach ($food as $key => $fooditem) {
		for ($i = 0; $i < 3; $i++) {
			if ($fooditem[$i] > $foodneeded[$i]) {
				unset($food[$key]);
				break;
			}
		}
		if ($fooditem[0] == $foodneeded[0] && $fooditem[1] == $foodneeded[1] && $fooditem[2] == $foodneeded[2]) {
			return "yes";
		}
	}
	$mean = array(0 => 0, 1 => 0, 2 => 0);
	$totalfood = count($food);
	foreach ($food as $key => $fooditem) {
		for ($i = 0; $i < 3; $i++) {
			$mean[$i] += $fooditem[$i];
		}
	}
	for ($i = 0; $i < 3; $i++) {
		$mean[$i] = $mean[$i] / $totalfood;
	}
	arsort($mean);
	$mean_winner = reset($mean);
	$mean_key_winner = key($mean);
	$possible = array();
	foreach ($food as $key => $fooditem) {
		$count = $fooditem;
		$response = recursive($count, $key, $food, $foodneeded);
		if ($response == "yes") {
			return "yes";
		}
	}
	return "no";
}

$parsed = parse($input);

$testcase = 0;

$linetype = 0;

foreach ($parsed["lines"] as $line) {
	if ($linetype == 0) {
		// Set all variables
		$testcase++;
		$fooditem = 0;
		$food = array();
		$foodneeded = explode(" ", $line);
		$linetype++;

	} elseif ($linetype == 1) {
		$fooditem = $line;
		$linetype++;

	} elseif ($linetype == 2) {
		$food[] = explode(" ", $line);
		if ($fooditem == 1) {
			$out = resolve($foodneeded, $food);
			echo "Case #".$testcase.": ".$out."\n";
			$linetype = 0;
		}
		$fooditem--;
	}
}

if ($testcase != $parsed["t"]) {
  exit_alt(1, "Total number of test cases doesn't match the number in input file");
}
?>
#include <iostream>
using namespace std;
#include <math.h>
#include <cmath>
#include <string>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<queue>
#include<stack>
#include <list>
#include <functional>
#include <sstream>
#include <fstream>
#include <stdio.h>      /* printf */
#include <stdlib.h>
#include <bitset>
#include <utility>
#include <cctype>
#include <cstring>
#include <cctype>
#include <vector>
#include<valarray>
#include <map>
#include <set>
#include<complex>
#include<iomanip>
#include <numeric>
#include <stdio.h>
#include <stdlib.h>
//typedef vector<int> intv; 
//typedef set<int> ints; 
#define sz(v) ((int)((v).size()))
#define all(v) ((v).begin()),((v).end())

typedef int ii; 
typedef vector<int> vii; 
typedef vector<int> vi;

int P,C,F;
struct carb{
	int p,c,f;
};
vector<carb>v;
bool ans;
bool check(int p,int c,int f)
{
	return(p==P && C==c && F==f);
}
void recurse(int n,int curr,int p,int c,int f)
{
	//cout<<p<<" "<<c<<" "<<f<<endl;
	if(check(p,c,f))ans=1;
	if (curr == n)return;	
	p+=v[curr].p;
	c+=v[curr].c;
	f+=v[curr].f;
	recurse(n,curr+1,p,c,f);
	p-=v[curr].p;
	c-=v[curr].c;
	f-=v[curr].f;
	recurse(n,curr+1,p,c,f);
	//return 0;
}

int main()
{
	freopen("new_years_resolution.txt","r",stdin);
	freopen("out.txt","w",stdout);

	int t,n;
	carb temp;
	cin>>t;
	for (int i = 1; i <= t; i++)
	{
		ans = 0;
		cin>>P>>C>>F>>n;
		for (int g = 0; g < n; g++)
		{
			cin>>temp.p>>temp.c>>temp.f;
			if(temp.p<=P && temp.c<=C && temp.f<=F)
			v.push_back(temp);
		}
		//condition ? value_if_true : value_if_false
		recurse(v.size(),1,v[0].p,v[0].c,v[0].f);
		cout<<"Case #"<<i<<":"<<(ans ? "yes" : "no")<<endl;
		v.clear();
	}

	return 0;
}
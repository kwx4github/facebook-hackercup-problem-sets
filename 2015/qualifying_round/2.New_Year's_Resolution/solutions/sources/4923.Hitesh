package com.hitesh;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class Second {

	private static ArrayList<Food> allFood;
	private static Food alexFood;
	private static int COUNT;
	private static int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s,
			t;

	public static void main(String[] args) {
		int N = 0;

		if (args.length > 0) {
			File file = new File(args[0]);
			try {
				BufferedReader br = new BufferedReader(new FileReader(file));
				N = Integer.parseInt(br.readLine());
				String line;
				for (int u = 0; u < N; u++) {
					// Get Alex Food
					line = br.readLine();
					String[] split = line.split(" ");
					alexFood = new Food(Integer.parseInt(split[0].trim()),
							Integer.parseInt(split[1].trim()),
							Integer.parseInt(split[2].trim()));
					allFood = new ArrayList<Food>();
					// Get Food Count
					line = br.readLine();
					COUNT = Integer.parseInt(line.trim());

					// Get All Food
					for (int v = 0; v < COUNT; v++) {
						line = br.readLine();
						split = line.split(" ");
						allFood.add(new Food(Integer.parseInt(split[0].trim()),
								Integer.parseInt(split[1].trim()), Integer
										.parseInt(split[2].trim())));
					}

					boolean check = checkSum();
					System.out.println("Case #" + (u + 1) + ": "
							+ (check ? "yes" : "no"));
				}
				br.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private static boolean checkSum() {
		// 1
		for (a = 0; a < COUNT; a++) {
			if (verifySum(1))
				return true;
				// 2
				for (b = a + 1; b < COUNT; b++) {
					if (verifySum(2))
						return true;
					// 3
					for (c = b + 1; c < COUNT; c++) {
						if (verifySum(3))
							return true;
						// 4
						for (d = c + 1; d < COUNT; d++) {
							if (verifySum(4))
								return true;
							// 5
							for (e = d + 1; e < COUNT; e++) {
								if (verifySum(5))
									return true;
								// 6
								for (f = e + 1; f < COUNT; f++) {
									if (verifySum(6))
										return true;
									// 7
									for (g = f + 1; g < COUNT; g++) {
										if (verifySum(7))
											return true;
										// 8
										for (h = g + 1; h < COUNT; h++) {
											if (verifySum(8))
												return true;
											// 9
											for (i = h + 1; i < COUNT; i++) {
												if (verifySum(9))
														return true;
												// 10
												for (j = i + 1; j < COUNT; j++) {
													if (verifySum(10))
															return true;
													// 11
													for (k = j + 1; k < COUNT; k++) {
														if (verifySum(11))
																return true;
														// 12
														for (l = k + 1; l < COUNT; l++) {
															if (verifySum(12))
																	return true;
															// 13
															for (m = l + 1; m < COUNT; m++) {
																if (verifySum(13))
																		return true;
																// 14
																for (n = m + 1; n < COUNT; n++) {
																	if (verifySum(14))
																			return true;
																	// 15
																	for (o = n + 1; o < COUNT; o++) {
																		if (verifySum(15))
																				return true;
																		// 16
																		for (p = o + 1; p < COUNT; p++) {
																			if (verifySum(16))
																					return true;
																			// 17
																			for (q = p + 1; q < COUNT; q++) {
																				if (verifySum(17))
																						return true;
																				// 18
																				for (r = q + 1; r < COUNT; r++) {
																					if (verifySum(18))
																							return true;
																					// 19
																					for (s = r + 1; s < COUNT; s++) {
																						if (verifySum(19))
																								return true;
																						// 20
																						for (t = s + 1; t < COUNT; t++) {
																							if (verifySum(20))
																									return true;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		return false;
	}

	private static boolean verifySum(int level) {
		switch (level) {
		case 1:
			return (alexFood.equals(allFood.get(a)));
		case 2:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b))));
		case 3:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c))));
		case 4:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d))));
		case 5:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e))));
		case 6:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f))));
		case 7:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g))));
		case 8:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h))));
		case 9:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i))));
		case 10:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j))));
		case 11:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k))));
		case 12:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l))));
		case 13:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l), allFood.get(m))));
		case 14:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l), allFood.get(m), allFood.get(n))));
		case 15:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l), allFood.get(m), allFood.get(n), allFood.get(o))));
		case 16:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l), allFood.get(m), allFood.get(n), allFood.get(o), allFood.get(p))));
		case 17:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l), allFood.get(m), allFood.get(n), allFood.get(o), allFood.get(p), allFood.get(q))));
		case 18:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l), allFood.get(m), allFood.get(n), allFood.get(o), allFood.get(p), allFood.get(q), allFood.get(r))));
		case 19:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l), allFood.get(m), allFood.get(n), allFood.get(o), allFood.get(p), allFood.get(q), allFood.get(r), allFood.get(s))));
		case 20:
			return (alexFood.equals(sum(allFood.get(a),allFood.get(b),allFood.get(c),allFood.get(d),allFood.get(e),allFood.get(f),allFood.get(g),allFood.get(h),allFood.get(i), allFood.get(j), allFood.get(k), allFood.get(l), allFood.get(m), allFood.get(n), allFood.get(o), allFood.get(p), allFood.get(q), allFood.get(r), allFood.get(s), allFood.get(t))));
		}
		return false;
	}

	private static Food sum(Food... foods) {
		Food item = new Food(0, 0, 0);
		for (Food food : foods) {
			item.c += food.c;
			item.p += food.p;
			item.f += food.f;
		}
		return item;
	}

	public static class Food {
		public int p;
		public int c;
		public int f;

		public Food(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}

		@Override
		public String toString() {
			return "Food [p=" + p + ", c=" + c + ", f=" + f + "]";
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Food other = (Food) obj;
			if (c != other.c)
				return false;
			if (f != other.f)
				return false;
			if (p != other.p)
				return false;
			return true;
		}

	}
}

#include <iostream>
#include <string>
#include <vector>
#include <unordered_set>
#include <boost/functional/hash.hpp>

using namespace std;

class PCF {
public:
  int p, c, f;

  PCF() {
    p = c = f = 0;
  }

  PCF(int _p, int _c, int _f) :
    p(_p), c(_c), f(_f) {
  }

  bool operator < (const PCF &rhf) const {
    return (p < rhf.p);
  }

  bool operator == (const PCF &rhf) const {
    return (p == rhf.p && c == rhf.c && f == rhf.f);
  }

  PCF operator + (const PCF &rhf) const {
    return PCF(p + rhf.p, c + rhf.c, f + rhf.f);
  }

  PCF operator - (const PCF &rhf) const {
    return PCF(p - rhf.p, c - rhf.c, f - rhf.f);
  }
};

namespace std {
  template <>
  struct hash<PCF> {
    typedef PCF argument_type;
    typedef std::size_t result_type;

    result_type operator()(const PCF &t) const {
      std::size_t val {0 };
      boost::hash_combine(val, t.p);
      boost::hash_combine(val, t.c);
      boost::hash_combine(val, t.f);
      return val;
    }
  };
}

void dump(const PCF &v) {
  cout << v.p << ' ' << v.c << ' ' << v.f << endl;
}

bool pcf(const PCF &T, const vector<PCF> &V) {
  // dump(T);
  // for (int i = 0; i < V.size(); ++i) {
  //   dump(V[i]);
  // }

  int N = V.size();
  for (int i = 0; i < N; ++i) {
    if (T == V[i]) {
      return true;
    }
  }

  unordered_set<PCF> Q;
  Q.insert(V[0]);

  for (int i = 1; i < N; ++i) {
    const PCF &v = V[i];
    PCF d = T - v;
    if (Q.find(d) != Q.end()) {
      return true;
    }

    unordered_set<PCF> P(Q);
    for (unordered_set<PCF>::iterator iter = Q.begin();
         iter != Q.end();
         ++iter) {
      PCF g = (*iter) + v;
      P.insert(g);
    }
    P.insert(v);
    Q = P;
  }


  return false;
}

int main(int argc, char *argv[]) {
  int T, N, x;

  cin >> T;
  for (int k = 0; k < T; ++k) {
    PCF PT;
    cin >> PT.p; cin >> PT.c; cin >> PT.f;

    cin >> N;
    vector<PCF > V(N, PCF());
    for (int i = 0; i < N; ++i) {
      PCF &v = V[i];
      cin >> v.p; cin >> v.c; cin >> v.f;
    }

    cout << "Case #" << (k + 1) << ": " <<
      boolalpha << pcf(PT, V) << endl;
  }

  return 0;
}

//============================================================================
// Name        : HackerCup-2015.cpp
// Author      : Abdullah Khan Zehady
// Version     :
// Copyright   : Use for Learning
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>

using namespace std;

#define pb push_back
#define tr(C,it) for(typeof((C).begin()) it=(C).begin(); it!=(C).end(); it++)
#define FOR(i,s,e) for(int i=int(s); i<=int(e); i++)

typedef struct food {
    int P;
    int C;
    int F;
} Food;

vector<Food > foo;
vector<Food > F;

int g_p,g_c,g_f;
bool YES=false;
bool meetCriteria(Food f) {
    if (f.P < g_p && f.C < g_c && f.F < g_f) {
        return true;
    }
    else if (f.P == g_p && f.C ==  g_c && f.F == g_f) {
        YES=true;
        return true;
    }
    else {
        return false;
    }
}

void getFoodItem(int k,bool taken, Food prev) {
    if(YES)
        return;
    //cout << "k = " << k << endl; 
    if(k==0) {
        if(meetCriteria(prev)) {
            F.pb(prev);
            //cout << prev.P << " " << prev.C << " " << prev.F << endl;
        }
        return;
    }


    if (!taken) { //k-th item not taken
        getFoodItem(k-1, false, prev); //k-1th item not taken
        if(k>1)
            getFoodItem(k-1, true, prev);//k-1th item taken
    }

    if(taken) {//k-th item taken
        Food tmp;
        tmp.P = prev.P + foo[k-1].P;
        tmp.C = prev.C + foo[k-1].C;
        tmp.F = prev.F + foo[k-1].F;
        getFoodItem(k-1,false,tmp); //k-1th item not taken
        if(k>1)
            getFoodItem(k-1,true,tmp);
    }

}

int main() {
    int T,N;

    cin >> T;

    for(int i=0;i<T;i++) {
        YES=false;
        cout << "Case #" << i+1 << ": ";
        cin >> g_p >> g_c >> g_f;
        cin >> N;
        foo.clear();
        foo = vector<Food>(N);
        FOR(i,0,N-1) {
            cin >> foo[i].P >> foo[i].C >> foo[i].F; 
        }
        F.clear();

        Food t = {0,0,0};
        getFoodItem(N,false,t);
        getFoodItem(N,true,t); 
        
        if(!YES) {
            cout << "no" << endl; 
        }
        else {
            cout << "yes" << endl; 
        }
        /*tr(foo,it) {
            cout << it->P << " " << it->C << " " << it->F << endl; 
        }*/
    }

    return 0;
}

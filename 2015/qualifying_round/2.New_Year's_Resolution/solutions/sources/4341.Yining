#include <set>
#include <map>
#include <queue>
#include <math.h>
#include <vector>
#include <string>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <cctype>
#include <algorithm>

#define eps 1e-10
#define pi acos(-1.0)
#define inf 107374182
#define inf64 1152921504606846976
#define lc l,m,tr<<1
#define rc m + 1,r,tr<<1|1
#define zero(a) fabs(a)<eps
#define iabs(x)  ((x) > 0 ? (x) : -(x))
#define clear1(A, X, SIZE) memset(A, X, sizeof(A[0]) * (min(SIZE,sizeof(A))))
#define clearall(A, X) memset(A, X, sizeof(A))
#define memcopy1(A , X, SIZE) memcpy(A , X ,sizeof(X[0])*(SIZE))
#define memcopyall(A, X) memcpy(A , X ,sizeof(X))
#define max( x, y )  ( ((x) > (y)) ? (x) : (y) )
#define min( x, y )  ( ((x) < (y)) ? (x) : (y) )

using namespace std;

struct node
{
    int p,c,f;
};

node food[30],x;
bool flat;
int n;
void dfs(int p ,node a)
{
    if(flat||p>n)return;
    else
    {
        dfs(p+1,a);
        a.p+=food[p].p;
        a.c+=food[p].c;
        a.f+=food[p].f;
        if(a.p==x.p&&a.c==x.c&&a.f==x.f){
            flat=true;
            return;
        }
        else{
            dfs(p+1,a);
        }
    }
}

int main()
{
    //freopen("data.txt","w",stdout);
    int t,case1=1;
    while(scanf("%d",&t)!=EOF)
    {
        while(t--)
        {
            int gp,gc,gf;
            scanf("%d%d%d",&x.p,&x.c,&x.f);
            scanf("%d",&n);
            for( int i=0; i<n; i++)
            {
                scanf("%d%d%d",&food[i].p,&food[i].c,&food[i].f);
            }
            flat=false;
            node temp;
            temp.p=0;
            temp.c=0;
            temp.f=0;
            dfs(0,temp);
            printf("Case #%d: ",case1++);
            if(flat){
                puts("yes");
            }
            else{
                puts("no");
            }
        }
    }
    return 0;
}

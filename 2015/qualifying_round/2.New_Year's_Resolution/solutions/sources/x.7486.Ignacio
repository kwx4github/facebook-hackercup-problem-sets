import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

public class NewYearResolution {

	private static class StdIn {

		// assume Unicode UTF-8 encoding
		private String charsetName = "UTF-8";

		// the scanner object
		private Scanner scanner = new Scanner(new BufferedInputStream(System.in), charsetName);

		public StdIn() {

		}

		public StdIn(InputStream in) {
			scanner = new Scanner(in, charsetName);
		}

		/**
		 * Is there only whitespace left on standard input?
		 */
		public boolean isEmpty() {
			return !scanner.hasNext();
		}

		/**
		 * Return next string from standard input
		 */
		public String readString() {
			return scanner.next();
		}

		/**
		 * Return next int from standard input
		 */
		public int readInt() {
			return scanner.nextInt();
		}

		/**
		 * Return next double from standard input
		 */
		public double readDouble() {
			return scanner.nextDouble();
		}

		/**
		 * Return next float from standard input
		 */
		public float readFloat() {
			return scanner.nextFloat();
		}

		/**
		 * Return next short from standard input
		 */
		public short readShort() {
			return scanner.nextShort();
		}

		/**
		 * Return next long from standard input
		 */
		public long readLong() {
			return scanner.nextLong();
		}

		/**
		 * Return next byte from standard input
		 */
		public byte readByte() {
			return scanner.nextByte();
		}

		/**
		 * Return next boolean from standard input, allowing "true" or "1" for true,
		 * and "false" or "0" for false
		 */
		public boolean readBoolean() {
			String s = readString();
			if (s.equalsIgnoreCase("true"))
				return true;
			if (s.equalsIgnoreCase("false"))
				return false;
			if (s.equals("1"))
				return true;
			if (s.equals("0"))
				return false;
			throw new java.util.InputMismatchException();
		}

		/**
		 * Does standard input have a next line?
		 */
		public boolean hasNextLine() {
			return scanner.hasNextLine();
		}

		/**
		 * Return rest of line from standard input
		 */
		public String readLine() {
			return scanner.nextLine();
		}

		/**
		 * Return next char from standard input
		 */
		// a complete hack and inefficient - email me if you have a better
		public char readChar() {
			// (?s) for DOTALL mode so . matches a line termination character
			// 1 says look only one character ahead
			// consider precompiling the pattern
			String s = scanner.findWithinHorizon("(?s).", 1);
			return s.charAt(0);
		}

		/**
		 * Return rest of input from standard input
		 */
		public String readAll() {
			if (!scanner.hasNextLine())
				return null;

			// reference: http://weblogs.java.net/blog/pat/archive/2004/10/stupid_scanner_1.html
			return scanner.useDelimiter("\\A").next();
		}

		/**
		  * Read rest of input as array of ints
		  */
		public int[] readInts() {
			String[] fields = readAll().trim().split("\\s+");
			int[] vals = new int[fields.length];
			for (int i = 0; i < fields.length; i++)
				vals[i] = Integer.parseInt(fields[i]);
			return vals;
		}

		/**
		  * Read rest of input as array of doubles
		  */
		public double[] readDoubles() {
			String[] fields = readAll().trim().split("\\s+");
			double[] vals = new double[fields.length];
			for (int i = 0; i < fields.length; i++)
				vals[i] = Double.parseDouble(fields[i]);
			return vals;
		}

		/**
		  * Read rest of input as array of strings
		  */
		public String[] readStrings() {
			String[] fields = readAll().trim().split("\\s+");
			return fields;
		}
	}

	// print all subsets of the characters in s
	public static List<Queue<Integer>> getCombinations(Queue<Integer> s) {
		List<Queue<Integer>> combinations = new ArrayList<Queue<Integer>>();
		getCombinations(new LinkedList<Integer>(), s, combinations);
		return combinations;
	}

	// print all subsets of the remaining elements, with given prefix 
	private static void getCombinations(Queue<Integer> prefix, Queue<Integer> s, List<Queue<Integer>> combinations) {
		if (s.size() > 0) {
			Queue<Integer> combination = new LinkedList<Integer>();
			for (Integer next : prefix) {
				combination.add(next);
			}
			combination.add(s.poll());
			combinations.add(combination);

			getCombinations(combination, new LinkedList<Integer>(s), combinations);
			getCombinations(prefix, s, combinations);
		}
	}

	public static void main(String[] args) throws FileNotFoundException {
		StdIn in = new StdIn(new FileInputStream());
		int cases = in.readInt();
		
		int count = 0;
		while (in.hasNextLine() && count < cases) {
			count++;
			int maxProtein = in.readInt();
			int maxCarbo = in.readInt();
			int mxFat = in.readInt();
			in.hasNextLine();
			
			int nfoods = in.readInt();
			
			Queue<Integer> protein = new LinkedList<Integer>();
			Queue<Integer> carbo = new LinkedList<Integer>();
			Queue<Integer> fat = new LinkedList<Integer>();
			
			for (int i=0;i<nfoods;i++) {
				in.hasNextLine();
				protein.add(in.readInt());
				carbo.add(in.readInt());
				fat.add(in.readInt());
			}
			
			List<Queue<Integer>> proteinCombinations = getCombinations(protein);
			List<Queue<Integer>> carboCombinations = getCombinations(carbo);
			List<Queue<Integer>> fatCombinations = getCombinations(fat);
			
			boolean holdProtein = isHold(maxProtein, proteinCombinations);
			boolean holdCarbo = isHold(maxCarbo, carboCombinations);
			boolean holdFat = isHold(mxFat, fatCombinations);
			
			
			System.out.println(MessageFormat.format("Case #{0}: {1}", String.valueOf(count), (holdProtein && holdCarbo && holdFat) ? "yes" : "no"));
			
		}
	}

	private static boolean isHold(int max, List<Queue<Integer>> combinations) {
		outer : for (Queue<Integer> nextCombination : combinations) {
			int result = 0;
			for (Integer next : nextCombination) {
				result += next;
				if (result > max)
					continue outer;
			}
			if (result == max)
				return true;
		}
		return false;
	}

}
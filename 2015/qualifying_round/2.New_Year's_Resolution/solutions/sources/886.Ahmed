import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main
{

	public static void main(String[] args) throws IOException
	{
		Main main = new Main();
		main.begin();
	}

	// IO
	private BufferedReader in;
	private BufferedWriter out;
	private StringBuilder ans;
	private StringTokenizer tok;
	private int[] required;
	private int nGiven;
	private int[][] given;

	// Fields

	private void begin() throws IOException
	{
		// IO streams
		String inputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\new_years_resolution.txt";
		String outputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\out.txt";
		in = new BufferedReader(new FileReader(inputFileName));
		out = new BufferedWriter(new FileWriter(outputFileName));
		ans = new StringBuilder();
		tok = new StringTokenizer("");

		// read input
		int n = Integer.parseInt(in.readLine());
		for (int cas = 1; cas <= n; cas++)
		{
			// required
			required = new int[3];
			tok = new StringTokenizer(in.readLine());
			for (int i = 0; i < 3; i++)
				required[i] = Integer.parseInt(tok.nextToken());

			// given foods
			nGiven = Integer.parseInt(in.readLine());
			given = new int[nGiven][3];
			for (int i = 0; i < nGiven; i++)
			{
				tok = new StringTokenizer(in.readLine());
				for (int j = 0; j < 3; j++)
					given[i][j] = Integer.parseInt(tok.nextToken());
			}

			// solve
			ans.append("Case #" + cas + ": " + solve() + "\n");
		}

		// output
		System.out.println(ans.toString());
		out.write(ans.toString());
		out.close();
	}

	private String solve()
	{
		// try all combinations
		for (int mask = 0; mask < (1 << nGiven); mask++)
		{
			// sum the combinations
			int curr[] = new int[3];
			for (int i = 0; i < nGiven; i++)
				if ((mask & (1 << i)) != 0)
					for (int j = 0; j < 3; j++)
						curr[j] += given[i][j];

			// check if match
			boolean correct = true;
			for (int i = 0; i < 3; i++)
				if (curr[i] != required[i])
					correct = false;
			if (correct)
				return "yes";
		}

		return "no";
	}

}

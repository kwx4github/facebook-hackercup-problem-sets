#include <iostream>
#include <tuple>
#include <vector>

using namespace std;

typedef tuple<int, int, int> food;

bool satisfies_goal(int gp, int gc, int gf, const vector<food> &foods,
                    const vector<bool> &subset) {
  int tp = 0, tc = 0, tf = 0;
  for(int i = 0; i < foods.size(); i++) {
    if(!subset[i]) continue;

    int p, c, f;
    tie(p, c, f) = foods[i];
    tp += p;
    tc += c;
    tf += f;
  }

  return gp == tp &&
         gc == tc &&
         gf == tf;
}

bool solve_r(int gp, int gc, int gf, const vector<food> &foods,
             vector<bool> &current_set, int current_food) {
  if(current_food == foods.size()) {
    return satisfies_goal(gp, gc, gf, foods, current_set);
  } else {
    current_set[current_food] = false;
    if(solve_r(gp, gc, gf, foods, current_set, current_food + 1)) return true;
    current_set[current_food] = true;
    return solve_r(gp, gc, gf, foods, current_set, current_food + 1);
  }
}


bool solve(int gp, int gc, int gf, const vector<food> &foods) {
  vector<bool> current_set(foods.size(), false);
  return solve_r(gp, gc, gf, foods, current_set, 0);
}

int main() {
  int T;
  cin >> T;

  for(int t = 1; t <= T; t++) {
    int gp, gc, gf, n;
    cin >> gp >> gc >> gf >> n;

    vector<food> foods;

    while(n-- > 0) {
      int p, c, f;
      cin >> p >> c >> f;
      foods.push_back(make_tuple(p, c, f));
    }

    bool solution = solve(gp, gc, gf, foods);

    cout << "Case #" << t << ": " << (solution ? "yes" : "no") << endl;
  }

  return 0;
}

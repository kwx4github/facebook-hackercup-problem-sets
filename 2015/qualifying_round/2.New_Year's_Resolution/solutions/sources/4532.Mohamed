#include <bits/stdc++.h>

using namespace std;

int n;
int food[22][5];
map<pair<pair<int, int>, pair<int, int>>, int> dp;
#define P4(a,b,c,d) make_pair(make_pair(a,b),make_pair(c,d))

int dpf(int n, int p, int c, int f) {
  if (dp.find(P4(n,p,c,f)) != dp.end())
    return dp[P4(n,p,c,f)];
  if (p+c+f == 0)
    return dp[P4(n,p,c,f)]=1;
  if (n==0)
    return dp[P4(n,p,c,f)]=0;
  int ret = 0;
  if (p >= food[n-1][0] && c >= food[n-1][1] && f >= food[n-1][2]) {
    ret = dpf(n-1, p-food[n-1][0], c-food[n-1][1], f-food[n-1][2]);
  }
  ret = max(ret, dpf(n-1, p,c,f));
  return dp[P4(n,p,c,f)] = ret;
}

int main() {
  int t;
  cin >> t;
  for (int i=1; i<=t; i++) {
    dp.clear();
    int tp, tc, tf;
    cin >> tp >> tc >> tf;
    cin >> n;
    for (int j=0; j<n; j++) {
      cin >> food[j][0];
      cin >> food[j][1];
      cin >> food[j][2];
    }
    string ans = dpf(n, tp, tc, tf)==1 ? "yes" : "no";
    printf("Case #%d: %s\n", i, ans.c_str());
  }
}

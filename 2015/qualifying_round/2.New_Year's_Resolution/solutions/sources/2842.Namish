#include<stdio.h>
int t,n,p[100],c[100],f[100],gp,gc,gf,k,sump,sumc,sumf,s,found;


 void mergeSort(int low,int mid,int high){
	int temp[100],tempc[100],tempf[100];
    int i1,m1,k1,l1;

    l1=low;
    i1=low;
    m1=mid+1;

    while((l1<=mid)&&(m1<=high)){

         if(p[l1]<=p[m1]){
             temp[i1]=p[l1];
             tempc[i1]=c[l1];
             tempf[i1]=f[l1];
			 l1++;
         }
         else{
             temp[i1]=p[m1];
             tempc[i1]=c[m1];
             tempf[i1]=f[m1];
             m1++;
         }
         i1++;
    }

    if(l1>mid){
         for(k1=m1;k1<=high;k1++){
             temp[i1]=p[k1];
             tempc[i1]=c[k1];
             tempf[i1]=f[k1];
			 i1++;
         }
    }
    else{
         for(k1=l1;k1<=mid;k1++){
             temp[i1]=p[k1];
             tempc[i1]=c[k1];
             tempf[i1]=f[k1];
             i1++;
         }
    }
   
    for(k1=low;k1<=high;k1++){
         p[k1]=temp[k1];
         c[k1]=tempc[k1];
         f[k1]=tempf[k1];
         
    }
}


 void partition(int low,int high){

    int mid;

    if(low<high){
         mid=(low+high)/2;
         partition(low,mid);
         partition(mid+1,high);
         mergeSort(low,mid,high);
    }
}




int promising(int i,int weightp,int weightc,int weightf,int totalp,int totalc,int totalf)
{
	int promise=0;
	if(((weightp+totalp)>=gp)&&((weightp==gp)||(weightp+p[i+1])<=gp))
	{
		if(weightc<=gc)
		{
			if(weightf<=gf)
			{
				promise=1;
			}
		}		
	}
	return promise;		
}
sum_subsets(int i,int weightp,int weightc,int weightf,int totalp,int totalc,int totalf)
{
	
	if(promising(i,weightp,weightc,weightf,totalp,totalc,totalf)==1)
	{
	
		if((weightp==gp)&&(weightc==gc)&&(weightf==gf))
		{
			printf("Case #%d: yes\n",s);
			found=1;
			s++;
		}
		else
		{
			
			if(weightc+c[i+1]<=gc && weightf+f[i+1]<=gf && found==0 &&i<n)
			{
				sum_subsets(i+1,weightp+p[i+1],weightc+c[i+1],weightf+f[i+1],totalp-p[i+1],totalc-c[i+1],totalf-f[i+1]);	
			}
			if(found==0&&i<n)
			{
				sum_subsets(i+1,weightp,weightc,weightf,totalp-p[i+1],totalc-c[i+1],totalf-f[i+1]);	
			}
			
		}
	}
	
}



int main()
{
	freopen("new_years_resolution.txt","r",stdin);
	freopen("output.txt","w",stdout);
	
	scanf("%d",&t);
	s=1;
	while(t--)
	{
		scanf("%d %d %d",&gp,&gc,&gf);
		sump=0;
		sumc=0;
		sumf=0;
		found=0;
		scanf("%d",&n);
		for(k=0;k<n;k++)
		{
			scanf("%d %d %d",&p[k],&c[k],&f[k]);
			sump=sump+p[k];
			sumc=sumc+c[k];
			sumf=sumf+f[k];
		}
		
		if(sump<gp||sumc<gc||sumf<gf)
		{
			printf("Case #%d: no\n",s);
			s++;
		}
		else
		{
				partition(0,n-1);
				sum_subsets(-1,0,0,0,sump,sumc,sumf);
				if(found==0)
				{
					printf("Case #%d: no\n",s);
					s++;
				}
   		}
		
	}
	return 0;
}

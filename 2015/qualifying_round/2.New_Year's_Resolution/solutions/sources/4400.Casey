import sys

def subSetForSum(arr, sumValue, minValue):
  table = []
  r = sumValue - minValue + 1
  
  for i in range(r):
    table.append([])
    
  for i in range(r):
    s = i + minValue
    j = 0
    for v in arr:
      if j == 0:
        if v == s:
          table[i].append([[j]])
        else:
          table[i].append([])
      else:
        record = list(table[i][j-1])
        if s == v:
          record = record + [[j]]
        elif s >= (v + minValue):
          rest = s - v - minValue
          if len(table[rest][j-1]) > 0:
            for e in table[rest][j-1]:
              record.append(e + [j])
        table[i].append(record)
      
      j = j + 1
      
  return table[s - minValue][len(arr)-1]
  
def ifHaveCommonSetSorted(arr1, arr2, arr3):
  commonIndices = []
  for i in range(len(arr1)):
    a1 = arr1[i]
    for a2 in arr2:
      if a1 == a2:
        commonIndices.append(i)
        break
        
  result = []
  for i in commonIndices:
    a1 = arr1[i]
    for a3 in arr3:
      if a1 == a3:
        result.append(i)
        break
  return (len(result) > 0)
  
def ifHaveCommonSet(listOfArr):
  mLen = len(listOfArr[0])
  mIndex = 0
  if mLen > len(listOfArr[1]):
    mLen = len(listOfArr[1])
    mIndex = 1
  if mLen > len(listOfArr[2]):
    mLen = len(listOfArr[2])
    mIndex = 2
    
  if mIndex == 0:
    return ifHaveCommonSetSorted(listOfArr[0], listOfArr[1], listOfArr[2])
  if mIndex == 1:
    return ifHaveCommonSetSorted(listOfArr[1], listOfArr[0], listOfArr[2])
  if mIndex == 2:
    return ifHaveCommonSetSorted(listOfArr[2], listOfArr[0], listOfArr[1])
    
  
T = int(sys.stdin.readline())

for tIndex in range(1,T+1):
  (gp, gc, gf) = [int(v) for v in sys.stdin.readline().strip().split()]
  numOfFood = int(sys.stdin.readline().strip())
  pArr = []
  cArr = []
  fArr = []
  minValue = [None,None,None]
  total = [0,0,0]
  for i in range(numOfFood):
    p, c, f = [int(v) for v in sys.stdin.readline().strip().split()]
    pArr.append(p)
    cArr.append(c)
    fArr.append(f)
    if minValue[0] is None or minValue[0] > p:
      minValue[0] = p
    if minValue[1] is None or minValue[1] > c:
      minValue[1] = c
    if minValue[2] is None or minValue[2] > f:
      minValue[2] = f
      
    total[0] = total[0] + p
    total[1] = total[1] + c
    total[2] = total[2] + f
    
  result = 'no'
  if total[0] >= gp and total[1] >= gc and total[2] >= gf:
    subsetArr1 = subSetForSum(pArr, gp,  minValue[0])
    subsetArr2 = subSetForSum(cArr, gc,  minValue[1])
    subsetArr3 = subSetForSum(fArr, gf,  minValue[2])
    check = ifHaveCommonSet([subsetArr1,subsetArr2, subsetArr3])
    if check:
      result = 'yes'
    
  print "Case #{0}: {1}".format(tIndex, result)
  
  
  
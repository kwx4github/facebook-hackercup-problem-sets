def remove_unnecessary(need, food):
	result = []
	for idx, val in enumerate(food):
		if val[0] > need[0] or val[1] > need[1] or val[2] > need[2]:
			continue
		result.append(val)
	return result

def add_food(food1, food2):
	total = []
	total.append(food1[0]+food2[0])
	total.append(food1[1]+food2[1])
	total.append(food1[2]+food2[2])
	return total

def should_eat(need, total):
	if need[0] == total[0] and need[1] == total[1] and need[2] == total[2]:
		return True
	else:
		return False

def decide(need, food):
	test_times = 2 ** len(food);
	result = False

	for x in xrange(0, test_times):
		bin_str = bin(x)[2:]
		total = [0, 0, 0]
		for idx, val in enumerate(bin_str):
			if val == "1":
				total = add_food(total, food[idx])

		result = should_eat(need, total)
		if result:
			result = True
			break

	return result

def convert_to_int_list(list_in):
	int_list = []
	for x in xrange(0,len(list_in)):
		int_list.append(int(list_in[x]))
	return int_list

#############FOR READING FROM FILE#############
import os
script_dir = os.path.dirname(__file__)
fname = os.path.join(script_dir, "new_years_resolution.txt")
with open(fname) as f:
	no_of_case = int(f.readline())

	for x in xrange(0, no_of_case):
		need = convert_to_int_list(f.readline().rstrip().split())

		no_of_food = int(f.readline())
		food = []
		for y in xrange(0,no_of_food):
			food.append(convert_to_int_list(f.readline().rstrip().split()))

		food = remove_unnecessary(need, food)
		yes_or_no = decide(need, food)
		if yes_or_no:
			print "Case #%d: yes" % (x+1)
		else:
			print "Case #%d: no" % (x+1)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int arr[21],q,cnum[1000000],com[1000000][20],data[1000000];
int size,yes,no,p[21],c[21],f[21],food,tgp,tgc,tgf,gp,gc,gf;

void combinationUtil(int arr[], int data[], int start, int end, int index, int r)
{
    int j;
    // Current combination is ready to be printed, print it
    if (index == r)
    {cnum[q]=0;

        for (j=0; j<r; j++){
            com[q][j]= data[j];
            cnum[q]++;}
        q++;
        return;
    }
 
    // replace index with all possible elements. The condition
    // "end-i+1 >= r-index" makes sure that including one element
    // at index will make a combination with remaining elements
    // at remaining positions
    for (int i=start; i<=end && end-i+1 >= r-index; i++)
    {
        data[index] = arr[i];
        combinationUtil(arr, data, i+1, end, index+1, r);
    }
}

void printCombination(int arr[], int n, int r)
{
    // A temporary array to store all combination one by one

    // Print all combination using temprary array 'data[]'
    combinationUtil(arr, data, 0, n-1, 0, r);
}
 
// Driver program to test above functions
int main()
{
   int j,k,i,num,x;
   scanf("%d",&num);
   for(i=0;i<num;i++){
      q=0;
      size=0;
      yes=0;
      no=0;
      memset(p,0,sizeof(p));
      memset(c,0,sizeof(c));
      memset(f,0,sizeof(f));
      memset(arr,0,sizeof(arr));
      memset(cnum,0,sizeof(cnum));
      for (j=0;j<1000000;j++)
           memset(com[j],0,sizeof(com[j]));
      scanf("%d %d %d",&gp,&gc,&gf);
      scanf("%d",&food);
      for(j=0;j<food;j++){
	arr[j]=j;
        size++;
	}

      for(j=0;j<food;j++){
         scanf("%d %d %d",&p[j],&c[j],&f[j]);
      }
     
      for(j=1;j<=food;j++){
	  printCombination(arr, size, j);
        }

      for(j=0;j<q;j++){
         tgf=gf;
         tgc=gc;
         tgp=gp;
         for(k=0;k<cnum[j];k++){
         tgp=tgp-p[com[j][k]];
         tgc=tgc-c[com[j][k]];
         tgf=tgf-f[com[j][k]];
         if((tgp==0) && (tgc==0) && (tgf==0)){
         	yes=1;
		break;}}
      if (yes==1)
          break;
      }
      if (j==q)
        no=1;
      if (yes)
         printf("Case #%d:yes\n",i+1);
      else
         if (no)
		printf("Case #%d:no\n",i+1);
   }
}

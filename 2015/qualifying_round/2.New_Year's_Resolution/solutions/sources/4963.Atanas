#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

class MacroNutrients
{
public:
    MacroNutrients();
    MacroNutrients(const MacroNutrients &);
    MacroNutrients(const int);

    MacroNutrients operator=(const MacroNutrients &);
    MacroNutrients operator=(const int);

    bool operator <(const MacroNutrients &);
    bool operator ==(const MacroNutrients &);

    int pro;
    int carbo;
    int fat;
};

MacroNutrients::MacroNutrients()
{
    pro = 0;
    carbo = 0;
    fat = 0;
}

MacroNutrients::MacroNutrients(const MacroNutrients &other)
{
    pro = other.pro;
    carbo = other.carbo;
    fat = other.fat;
}

MacroNutrients::MacroNutrients(const int value)
{
    pro = carbo = fat = value;
}

MacroNutrients MacroNutrients::operator =(const MacroNutrients &other)
{
    pro = other.pro;
    carbo = other.carbo;
    fat = other.fat;

    return *this;
}

MacroNutrients MacroNutrients::operator =(const int value)
{
    pro = carbo = fat = value;

    return *this;
}

bool MacroNutrients::operator <(const MacroNutrients &other)
{
    return (pro < other.pro && carbo < other.carbo && fat < other.fat);
}

bool MacroNutrients::operator ==(const MacroNutrients &other)
{
    return (pro == other.pro && carbo == other.carbo && fat == other.fat);
}

bool canAlexEatThis(const MacroNutrients *max, vector<MacroNutrients> *foods, MacroNutrients total = 0)
{
    int size = foods->size();
    for (int i = 0; i < size; i++)
    {
        MacroNutrients food = foods->at(i);
        MacroNutrients current = total;

        current.pro += food.pro;
        current.carbo += food.carbo;
        current.fat += food.fat;

        if (current < *max)
        {
            vector<MacroNutrients> temp = *foods;
            temp.erase(temp.begin() + i);
            if (canAlexEatThis(max, &temp, current))
            {
                return true;
            }
        }
        else if (current == *max)
        {
            return true;
        }
    }

    return false;
}

void calculate(ifstream *in, ofstream *out)
{
    int count, foodCount;

    *in >> count;
    for (int i = 0; i < count; i++)
    {
        MacroNutrients g;
        vector<MacroNutrients> foods;

        *in >> g.pro;
        *in >> g.carbo;
        *in >> g.fat;
        *in >> foodCount;

        for (int j = 0; j < foodCount; j++)
        {
            MacroNutrients temp;

            *in >> temp.pro;
            *in >> temp.carbo;
            *in >> temp.fat;

            foods.push_back(temp);
        }

        bool canAlexEat = canAlexEatThis(&g, &foods);

        *out << "Case #" << i + 1 << ": " << (canAlexEat ? "yes" : "no") << '\n';
    }
}

int main(int argc, char **argv)
{
    if (argc != 3)
    {
        return 1;
    }

    ifstream input(argv[1], ifstream::in);
    if (!input.is_open())
    {
        return 2;
    }

    ofstream output(argv[2], ofstream::out | ofstream::trunc);
    if (!output.is_open())
    {
        input.close();
        return 3;
    }

    calculate(&input, &output);

    input.close();
    output.close();

    return 0;
}

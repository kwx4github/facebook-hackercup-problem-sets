#include <fstream>
#include <algorithm>
#include <vector>
using namespace std;

bool check(int GP, int GC, int GF, int N, int foods[3][21]);

int main()
{
    int T, N, GP, GC, GF, i, j;
    ifstream f("input.in");
    ofstream g("output.out");
    int foods[3][21];
    f >> T;
    for (i = 1; i <= T; i++)
    {
        f >> GP >> GC >> GF;
        f >> N;
        for (j = 1; j <= N; j++)
            f >> foods[0][j] >> foods[1][j] >> foods[2][j];
        g << "Case #" << i << ": ";
        if (check(GP, GC, GF, N, foods))
            g << "yes";
        else
            g << "no";
        g << "\n";
    }
    return 0;
}

bool check(int GP, int GC, int GF, int N, int foods[3][21])
{
    int r;
    int sP, sC, sF;
    bool found = false;
    for (r = 1; r <= N && !found; r++)
    {
        vector<bool> v(N);
        fill(v.begin() + N - r, v.end(), true);

        do
        {
            sP = sC = sF = 0;
            for (int i = 0; !found && i < N && sP <= GP && sC <= GC && sF <= GF; ++i) {
                if (v[i])
                {
                    sP += foods[0][i + 1];
                    sC += foods[1][i + 1];
                    sF += foods[2][i + 1];
                    if (sP == GP && sC == GC && sF == GF)
                        found = true;
                }
            }
        } while (!found && next_permutation(v.begin(), v.end()));
    }

    if (found)
        return true;

    return false;
}

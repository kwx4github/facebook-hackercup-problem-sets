#include <cstddef>
#include <iostream>
#include <vector>

struct food
{
    unsigned int p;
    unsigned int f;
    unsigned int c;

    bool null() const { return p == 0 && f == 0 && c == 0; }
};

using Iter = std::vector<food>::const_iterator;

bool can_solve(Iter a, Iter b, food target)
{
    if (target.null()) { return true; }
    if (a == b) { return false; }

    // Try to not eat *a
    bool skip = can_solve(a + 1, b, target);

    if (a->p <= target.p && a->f <= target.f && a->c <= target.c)
    {
        target.p -= a->p;
        target.f -= a->f;
        target.c -= a->c;
    }

    return skip || can_solve(a + 1, b, target);
}

int main()
{
    unsigned int t;
    if (!(std::cin >> t)) { std::abort(); }

    std::vector<food> vf;
    vf.reserve(20);

    for (unsigned int i = 0; i != t; ++i)
    {
        vf.clear();

        food target;
        unsigned int n;
        if (!(std::cin >> target.p >> target.f >> target.c >> n)) { std::abort(); }

        for (unsigned int i = 0; i != n; ++i)
        {
            vf.emplace_back();
            if (!(std::cin >> vf.back().p >> vf.back().f >> vf.back().c)) { std::abort(); }
        }

        std::cout << "Case #" << i + 1 << ": "
                  << (can_solve(vf.begin(), vf.end(), target) ? "yes" : "no")
                  << '\n';
    }
}

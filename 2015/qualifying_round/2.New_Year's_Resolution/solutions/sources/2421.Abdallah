import itertools

def sub(L1,L2):
    L = list(L1)
    for i in xrange(len(L1)):
        L[i] -= L2[i]
    return L

def summ(L):
    s = list(L[0][:])
    for i in xrange(len (s)):
        for LL in xrange(1,len(L)):
            s[i] += L[LL][i]

    return s

def testCase(case , meals):
    for w in xrange(1,len(meals)+1):
        result = itertools.combinations(xrange(len(meals)),w)
        for r in result :
            # print list(r)
            L =[]
            for n in r:
                L.append(meals[n])
            if  all( i == 0 for i in sub(case,summ(L)) ) :
                return 'yes'
    return 'no'

def testCase2( case,meals ) :

    print '-' * 40
    print meals
    print case
    print '-' * 40
    for i,m in enumerate(meals):
        testCase = sub(case,m)
        print testCase
        if all([t > 0 for t in testCase]):
            for j in xrange(i+1,len(meals)):
                jj = j
                tcase = testCase[:]
                while all( [ t > 0 for t in tcase]) and jj < len(meals):
                    mm = meals[jj]
                    tcase = sub(tcase,mm)
                    jj+=1
                    print tcase , mm


                if all([t == 0 for t in tcase]):
                    return 'yes'


        elif all([t == 0 for t in testCase]):
            return 'yes'
        else:
            continue

    return 'no'

T  = input()
for t in xrange(T):
    case = tuple ([int(i) for i in raw_input().split() ])
    meals = []
    N = input()
    for n in xrange(N):
        m = tuple ([int(i) for i in raw_input().split() ])
        meals.append(m)

    print "Case #{0}: {1}".format(t+1,testCase(case,meals))



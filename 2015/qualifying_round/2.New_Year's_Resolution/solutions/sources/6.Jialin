#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))
#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)

#define CLEAR(v) memset((v),0,sizeof(v));

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

const int MAXN = 20;

int n, p[MAXN], c[MAXN], f[MAXN], gp, gc, gf;

int main() {
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    scanf("%d%d%d%d", &gp, &gc, &gf, &n);
    FOR(i, 0, n) scanf("%d%d%d", &p[i], &c[i], &f[i]);
    bool found = false;
    FOR(mask, 0, 1 << n) {
      int sp = 0, sc = 0, sf = 0;
      FOR(i, 0, n) if (mask & (1 << i)) {
        sp += p[i];
        sc += c[i];
        sf += f[i];
      }
      if (sp == gp && sc == gc && sf == gf) {
        found = true;
        break;
      }
    }
    printf("Case #%d: %s\n", taskIdx, found ? "yes" : "no");
  }
  return 0;
}

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <vector>
#include <algorithm>

typedef struct
{
	int x[3];
} MN;

using namespace std;

bool _comp(MN a, MN b) { return a.x[0] < b.x[0]; }

int calc(vector <MN> rem, MN t, MN sum)
{
	MN a;

	if (rem.size() <= 0) return -1;

	for (int i = 0; i < 3; i++) a.x[i] = sum.x[i] + rem[0].x[i];

	if (a.x[0] == t.x[0] && a.x[1] == t.x[1] && a.x[2] == t.x[2]) return 0;
	else if (t.x[0] / 2 < rem[0].x[0]) return -1;
	else if (rem.size() > 1 && (sum.x[0] + rem[1].x[0] <= t.x[0]))
	{
		if (sum.x[0] + rem[1].x[0] != t.x[0] && sum.x[0] + rem[0].x[0] * 2 > t.x[0])
			return calc((vector <MN> (rem.begin() + 1, rem.end())), t, sum);
		else return calc((vector <MN> (rem.begin() + 1, rem.end())), t, a)
			& calc((vector <MN> (rem.begin() + 1, rem.end())), t, sum);
	}
	else return -1;
}

int check(vector <MN> foods, MN t)
{
	int ret = -1;

	sort(foods.begin(), foods.end(), _comp);

	for (int i = 0; i < foods.size(); i++)
	{
		MN sum;

		memset((void *) &sum, 0, sizeof(sum));

		if ((ret = calc((vector <MN> (foods.begin() + i, foods.end())), t, sum)) == 0)
			break;
	}

	return ret;
}

int main(int argc, char **argv)
{
	ifstream ifs;
	ofstream ofs;

	string buf;
	stringstream ssi;

	int T;
	MN g_mn;
	int N;
	vector <MN> f;

	ifs.open("new_years_resolution.txt", ifstream::in);
	ofs.open("new_years_resolution_output.txt", ofstream::out);

	buf.clear();
	getline(ifs, buf);
	T = atoi(buf.c_str());

	for (int i = 0; i < T; i++)
	{
		int j;
		MN test;

		f.clear();

		buf.clear();
		getline(ifs, buf);

		ssi.clear();
		ssi << buf;

		memset((void *) &test, 0, sizeof(test));

		j = 0;
		while (ssi >> N)
		{
			g_mn.x[j] = N;
			j++;
		}

		buf.clear();
		getline(ifs, buf);
		N = atoi(buf.c_str());
		for (int k = 0; k < N; k++)
		{
			buf.clear();
			getline(ifs, buf);
			ssi.clear();
			ssi << buf;

			j = 0;
			while (ssi >> test.x[j]) j++;

			f.push_back(test);
		}

		ofs << "Case #" << i + 1 << ": " << (check(f, g_mn) == 0 ?  "yes" : "no") << endl;
	}

	ifs.close();
	ofs.close();

	return 0;
}

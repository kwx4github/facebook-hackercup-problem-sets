import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NewYearsResolution solver = new NewYearsResolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class NewYearsResolution {
    private int GP;
    private int GC;
    private int GF;
    private int N;
    private int P[];
    private int C[];
    private int F[];

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        GP = in.nextInt();
        GC = in.nextInt();
        GF = in.nextInt();
        N = in.nextInt();
        P = new int[N];
        C = new int[N];
        F = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = in.nextInt();
            C[i] = in.nextInt();
            F[i] = in.nextInt();
        }

        out.println("Case #" + testNumber + ": " + (backtrack(0, 0, 0, 0) ? "yes" : "no"));
    }

    private boolean backtrack(int i, int MP, int MC, int MF) {
        if (i == N) {
            return MP == GP && MC == GC && MF == GF;
        }

        if (MP > GP || MC > GC || MF > GF) return false;

        return backtrack(i + 1, MP + P[i], MC + C[i], MF + F[i]) || backtrack(i + 1, MP, MC, MF);
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


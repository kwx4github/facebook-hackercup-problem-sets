/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

/**
 *
 * @author PENS
 */
public class Solution {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner scanner = new Scanner(new File("C:\\Users\\PENS\\Downloads\\new_years_resolution_example_input.txt"));
        int t = scanner.nextInt();
        for (int test = 1; test <= t; test++) {
            int gp = scanner.nextInt();
            int gc = scanner.nextInt();
            int gf = scanner.nextInt();
            int n = scanner.nextInt();
            Food[] foodVector = new Food[n];
            Queue<Foods> queue = new LinkedList<>();
            boolean solutionFound = false;
            for (int i = 0; i < n; i++) {
                int p = scanner.nextInt();
                int c = scanner.nextInt();
                int f = scanner.nextInt();
                Food food = new Food(p, c, f);
                Foods foods = new Foods(n, food, i);
                if ((food.p == gp) && (food.f == gf) && (food.c == gc)) {
                    solutionFound = true;
                    break;
                }
                foodVector[i] = food;
                queue.add(foods);
            }
            if (!solutionFound) {
                while (!queue.isEmpty()) {
                    Foods foods = queue.remove();
                    for (int i = 0; i < n; i++) {
                        if (foods.id < i) {
                            Foods currentFoods = new Foods(n, i, foods, foodVector[i]);
                            if ((currentFoods.p == gp) && (currentFoods.f == gf) && (currentFoods.c == gc)) {
                                solutionFound = true;
                                break;
                            }
                            queue.add(currentFoods);
                        }

                    }
                    if (solutionFound) {
                        break;
                    }
                }
            }
            if (solutionFound) {
                System.out.println("Case #" + test + ": yes");
            } else {
                System.out.println("Case #" + test + ": no");
            }
        }
    }

    private static class Food {

        int p;
        int c;
        int f;

        public Food(int p, int c, int f) {
            this.p = p;
            this.c = c;
            this.f = f;
        }

    }

    private static class Foods {

        // boolean[] allFoods; //= new Food[n];  
        int p;
        int c;
        int f;
        int id;

        public Foods(int n, Food food, int id) {
            //   allFoods = new boolean[n];
            this.p = food.p;
            this.c = food.c;
            this.f = food.f;
            this.id = id;
        }

        public Foods(int n, int i, Foods foods, Food food) {
            //    allFoods = new boolean[n];
            //   System.arraycopy(taken, 0, allFoods, 0, n);
            //     allFoods[i] = true;
            this.id = i;
            this.p += food.p + foods.p;
            this.c += food.c + foods.c;
            this.f += food.f + foods.f;
        }
    }
}

#include<iostream>
#include<fstream>
#include<string>

#define MASK 1 // 비트마스크
#define SIZE 20 // 배열의 크기

using namespace std;

struct Nutrition{
	int P;	// protin
	int C;	// carbohydrate
	int F;	// fat
};

ofstream makeOutputFile(string outputFileName){
	int i = 0;
	string txt = ".txt";
	ifstream check(outputFileName + to_string(i) + txt);	// output open test
	while (check.good()){
		check.close();
		check.open(outputFileName + to_string(++i) + txt);
	}
	check.close();

	ofstream output;

	output.open(outputFileName + to_string(i) + txt);	// output open
	return output;
}

bool isSame(Nutrition goal, Nutrition testCase){
	if (goal.P == testCase.P&&
		goal.C == testCase.C&&
		goal.F == testCase.F)
		return true;
	return false;
}

bool doTest(Nutrition goal, Nutrition* foods, int N){
	int lastCase;
	lastCase = 1 << N;
	Nutrition testCase;
	for (int i = 0; i < lastCase; i++){
		testCase.P = 0;		testCase.C = 0;		testCase.F = 0;	// initiating
		for (int j = 0; j < N; j++){
			if (i & 1 << j){
				testCase.P += foods[j].P;
				testCase.C += foods[j].C;
				testCase.F += foods[j].F;
			}
		}
		if (isSame(goal, testCase)) return true;		
	}
	return false;
}

void testProg(){
	ifstream input("new_years_resolution_example_input.txt");	// input file

	int T;	// how many cases?
	int N;
	Nutrition goal;	// Alex's goal
	Nutrition* foods;

	input >> T;
	for (int i = 0; i < T; i++){
		foods = new Nutrition[SIZE];
		input >> goal.P >> goal.C >> goal.F;
		input >> N;
		for (int j = 0; j < N; j++)
			input >> foods[j].P >> foods[j].C >> foods[j].F;
		cout << "Case #" << i + 1 << ": ";
		if (doTest(goal, foods, N)) cout << "yes" << endl;
		else cout << "no" << endl;
		delete[] foods;
	}
}

void prog(){
	ifstream input("new_years_resolution.txt");	// input file
	ofstream output;	// output file
	output = makeOutputFile("output_");	// assign output file

	int T;	// how many cases?
	int N;
	Nutrition goal;	// Alex's goal
	Nutrition* foods;

	input >> T;
	for (int i = 0; i < T; i++){
		foods = new Nutrition[SIZE];
		input >> goal.P >> goal.C >> goal.F;
		input >> N;
		for (int j = 0; j < N; j++)
			input >> foods[j].P >> foods[j].C >> foods[j].F;
		output << "Case #" << i + 1 << ": ";
		if (doTest(goal, foods, N)) output << "yes" << endl;
		else output << "no" << endl;
		delete[] foods;
	}
}

int main(){
	prog();
	return 1;
}
#include <iostream>
#include <map>
#include <cstdio>
#include <vector>
using namespace std;

int n;

int solve(int goal1,int goal2,int goal3, int first, vector<int> track[3]){
    if(first == n-1){
        if(goal1>=track[0][first] && goal2>=track[1][first] && goal3>=track[2][first]) return track[0][first]+track[1][first]+track[2][first];
        else return 0;
    }else{
        if(goal1>=track[0][first] && goal2>=track[1][first] && goal3>=track[2][first]) return max(solve(goal1,goal2,goal3,first+1,track),solve(goal1-track[0][first],goal2-track[1][first],goal3-track[2][first],first+1,track)+track[0][first]+track[1][first]+track[2][first]);
        else return solve(goal1,goal2,goal3,first+1,track);
    }
}

int main(){
    freopen("new_years_resolution.txt","r",stdin);
    freopen("newyear.out","w",stdout);
    int t,p,c,f,goal[3];
    scanf("%d\n",&t);
    for(int i = 1; i < t+1; i++){
        scanf("%d%d%d\n%d\n",&goal[0],&goal[1],&goal[2],&n);
        vector<int> track[3];
        for(int j = 0; j < n; j++){
            scanf("%d%d%d\n",&p,&c,&f);
            track[0].push_back(p);
            track[1].push_back(c);
            track[2].push_back(f);
        }
        cout << "Case #" << i << ": " << (solve(goal[0],goal[1],goal[2],0,track) == goal[0]+goal[1]+goal[2] ? "yes" : "no") << endl;
    }
    return 0;
}

#include <bits/stdtr1c++.h>

using namespace std;

typedef vector < int > vi; 
typedef long long int64; 
typedef unsigned long long uint64; 
    
int x[] = {-1,-1,-1, 0, 1, 1, 1, 0 }; 
int y[] = {-1, 0, 1, 1, 1, 0,-1,-1 }; 
    
#ifdef _WIN32  
    #define getchar_unlocked getchar 
    #define putchar_unlocked putchar 
#endif 
   
inline void read( int &n ) { 
    n = 0; 
    register bool neg = false; 
    register char c = getchar_unlocked(); 
    if( c == EOF) { n = -1; return; } 
    while (!('0' <= c && c <= '9')) { 
        if( c == '-' ) neg = true; 
        c = getchar_unlocked(); 
    } 
    while ('0' <= c && c <= '9') { 
        n = n * 10 + c - '0'; 
        c = getchar_unlocked(); 
    } 
    n = (neg ? (-n) : (n)); 
} 
   
inline void writeInt(int n){ 
    register int idx = 20; 
    if( n < 0 ) putchar_unlocked('-'); 
    n = abs(n); 
    char out[21]; 
    out[20] = ' '; 
    do{ 
        idx--; 
        out[idx] = n % 10 + '0'; 
        n/= 10; 
    }while(n); 
    do{ putchar_unlocked(out[idx++]); } while (out[idx] != ' '); 
} 

struct tri{
    int p, c, f;
};

int n, p, c, f;
vector < tri > vet;
bool solve( int at, int pp, int cc, int ff ){
    if( at >= n ){
        if( pp == p && cc == c && ff == f ) return true;
        return false;
    }
    return solve( at+1, pp, cc, ff) || solve(at+1, pp+vet[at].p, cc+vet[at].c, ff+vet[at].f);
}

int main(){
    ios::sync_with_stdio(false);
    int t, k = 1;
    cin >> t;
    while( t-- ){
        cin >> p >> c >> f;
        cin >> n;
        vet.resize(n);
        for( int i = 0; i < n; i++ ) cin >> vet[i].p >> vet[i].c >> vet[i].f;
        if( solve( 0, 0, 0, 0) ) cout << "Case #" << k++ << ": yes\n";
        else cout << "Case #" << k++ << ": no\n";
        vet.clear();
    }
    return 0;
}
#!/usr/bin/env python3
# vim:set sw=4 et smarttab:
# Hacker Cup 2015 Qualification Round

import sys

def can_eat(want, food):
    for i in range(3):
        if food[i] > want[i]:
            return False
    return True

def eat(want, food):
    ret = []
    for i in range(3):
        ret.append(want[i] - food[i])
    return tuple(ret)

class Recur:
    def __init__(self, food):
        self.food = food
        self.mem = {}
    def recur(self, want, st):
        if want == (0, 0, 0):
            return True
        if st >= len(self.food):
            return False
        if (want, st) in self.mem:
            return self.mem
        if self.recur(want, st + 1):
            self.mem[want, st] = True
            return True
        if can_eat(want, self.food[st]):
            if self.recur(eat(want, self.food[st]), st + 1):
                self.mem[want, st] = True
                return True
        self.mem[want, st] = False
        return False

def solve(want, food):
    recur = Recur(food)
    return recur.recur(want, 0)

def main():
    filein = sys.stdin
    #filein = open('filename.in', 'r')
    line = filein.readline()
    fields = line.split()
    assert len(fields) == 1
    ntc = int(fields[0])

    for tc in range(1, ntc + 1):
        line = filein.readline()
        fields = line.split()
        assert len(fields) == 3
        want = tuple(map(int, fields))
        line = filein.readline()
        fields = line.split()
        assert len(fields) == 1
        n = int(fields[0])
        food = []
        for i in range(n):
            line = filein.readline()
            fields = line.split()
            assert len(fields) == 3
            food.append(tuple(map(int, fields)))
        answer = solve(want, food)
        print('Case #{}: '.format(tc), end='')
        if answer:
            print('yes')
        else:
            print('no')

if __name__ == '__main__':
    main()

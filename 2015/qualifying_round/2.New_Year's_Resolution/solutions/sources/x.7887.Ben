#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
using namespace std;
bool dfs(int pro, int car, int fat, int depth, vector<int> &a, vector<int> &b, vector<int> &c, int i)
{
	if(i == depth)
	{
		if(pro == a[i] && car == b[i] && fat == c[i])
		{
			return true;
		}
		else
			return false;
	}
	else
	{
		return dfs(pro - a[i], car - b[i], fat - c[i], depth, a, b, c, i+1) || dfs (pro, car, fat, depth, a, b, c, i+1);
	}
}
int main()
{
	ifstream fin;
	fin.open("fat.in",ios::in);
	ofstream fout;
	fout.open("fat.out", ios::out);
	int input;
	int n;
	fin>>n;
	for(int i = 0; i < n; ++i)
	{
		int pro, car, fat;
		fin>>pro>>car>>fat;
		int s;
		fin>>s;
		vector<int> a(s);
		vector<int> b(s);
		vector<int> c(s);
		for(int j = 0; j < s; ++j)
			fin>>a[j]>>b[j]>>c[j];
		if(dfs(pro, car, fat, s-1, a, b, c, 0))
			fout<<"Case #"<< i+1<<": "<<"yes"<<endl;
		else
			fout<<"Case #"<< i+1<<": "<<"no"<<endl;
	}
	fin.close();
	fout.close();
	return 0;
}

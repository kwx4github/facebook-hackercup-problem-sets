#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <iostream>
#include <string>
#include <queue>
#include <stack>

//{{{ ************[  Floating points     ]************
#define ABS(x)          (((x) < 0) ? - (x) : (x))
#define ZERO(x)         (ABS (x) < EPS)
#define EQUAL(x, y)     (ZERO ((x) - (y)))

#define sqr(x)        (x*x)
#define cube(x)        (x*x*x)
#define INF            (int)1e9
#define EPS            1e-9

#define mset(a,v)    memset(a, v, sizeof(a))

using namespace std;

struct food {
    int p, c, f;
}a [21];

int n, gp, gc, gf;
bool visit [21][525000];
bool cache [21][525000];

bool check (int mark) {
    int tp = 0, tc = 0, tf = 0;
    for (int i = 0; i < n; i++)
        if ((1 << i) & mark) {
            tp += a [i].p;
            tc += a [i].c;
            tf += a [i].f;
        }

    return (tp == gp && tc == gc && tf == gf);
}

bool exceed (int mark) {
    int tp = 0, tc = 0, tf = 0;
    for (int i = 0; i < n; i++)
        if ((1 << i) & mark) {
            tp += a [i].p;
            tc += a [i].c;
            tf += a [i].f;
        }

    return (tp > gp || tc > gc || tf > gf);
}

bool bit_dp (int pos, int mark) {
    if (pos == n) return check (mark);
    bool &ret = cache [pos][mark];
    if (visit [pos][mark]) return ret;
    visit [pos][mark] = true;
    ret = false;

    if (!exceed (mark | (1 << pos))) ret = ret || bit_dp (pos + 1, mark | (1 << pos));
    ret = ret || bit_dp (pos + 1, mark);

    return ret;
}

int main(){
    freopen("new_years_resolution.txt", "r", stdin);
    freopen("output2.txt", "w", stdout);
    int t;
    cin>>t;

    for (int kase = 1; kase <= t; kase++) {
        cin>>gp>>gc>>gf;
        cin>>n;

        for (int i = 0; i < n; i++)
            cin>>a [i].p>>a [i].c>>a [i].f;

        mset (visit, false);
        bool possible = bit_dp (0, 0);
        if (possible) printf("Case #%d: yes\n", kase);
        else          printf("Case #%d: no\n", kase);
    }

    return 0;
}

#include <algorithm>
#include <numeric>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <sstream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
#include <stdio.h>
#include <assert.h>
typedef long long ll;
#define mset(a, val) memset(a, val, sizeof(a))
#define up(i, s, t) for (ll i = (s); i < (t); i += 1)
#define down(i, s, t) for (ll i = (s); i > (t); i -= 1)
#define rd1(a) scanf("%d", &a)
#define rd2(a, b) scanf("%d %d", &a, &b)
#define rd3(a, b, c) scanf("%d %d %d", &a, &b, &c)
#define rd4(a, b, c, d) scanf("%d %d %d %d", &a, &b, &c, &d)
#define pii pair<int, int>

using namespace std;
const int MAXINT = 0x70707070;
const ll MAXLONG = (ll) 1 << 60;
const int MAXN = 1005;

bool ans;
int food[MAXN][3];

void dfs(int idx, int n, vector<int> &cur) {
	bool ok = true;
	for (int i = 0; i < 3; i ++) {
		if (cur[i] != 0) ok = false;
		if (cur[i] < 0) return;
	}
	if (ok) {
		ans = true;
		return;
	}

	if (idx >= n) return;

	
	dfs(idx + 1, n, cur);
	for (int i = 0; i < 3; i ++) {
		cur[i] -= food[idx][i];
	}
	dfs(idx + 1, n, cur);
	for (int i = 0; i < 3; i ++) {
		cur[i] += food[idx][i];
	}
}

void foo() {
	int t;
	cin >> t;
	for (int i = 1; i <= t; i ++) {
		printf("Case #%d: ", i);
		ans = false;
		vector<int> cur(3);
		for (int j = 0; j < 3; j ++) {
			cin >> cur[j];
		}
		
		int n;
		cin >> n;
		for (int j = 0; j < n; j ++) {
			for (int k = 0; k < 3; k ++) 
				cin >> food[j][k];
		}

		
		dfs(0, n, cur);
		puts(ans ? "yes" : "no");
	}
}
int main () {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	foo();
	return 0;
}

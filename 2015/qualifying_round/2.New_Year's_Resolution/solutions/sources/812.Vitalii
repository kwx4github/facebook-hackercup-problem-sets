#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <complex>
#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <complex>
#include <stack>
#include <cassert>
#include <memory.h>
#ifdef NEV_DEBUG
#include <ctime>
#endif
#pragma comment(linker,"/STACK:64000000")
using namespace std;

const double pi = 3.1415926535897932384626433832795;
double eps = 1e-9;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;

#define sz size()
#define mp make_pair
#define pb push_back
#define FOR(i,a,b) for(int i=(a),_b(b); i<_b; ++i)
#define RFOR(i,a,b) for(int i=(a)-1,_b(b); i>=_b; --i)
#define CLR(a,b) memset(a,b,sizeof(a))
#define CPY(a,b) memcpy(a,b,sizeof(a))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define sqr(a) ((a)*(a))

char ch[1 << 20];
inline string gs() {scanf("%s", ch);return string(ch);}
inline string gl() {gets(ch);return string(ch);}
inline int gi() {int x;scanf("%d", &x);return x;}

const int MOD = 1000 * 1000 * 1000 + 7;
inline int MUL(int a, int b) {
  return 1ll * a * b % MOD;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VI kmp(string &s) {
  VI p(s.sz, 0);
  int k = 0;
  FOR(i, 1, s.sz) {
    while (k && s[k] != s[i]) k = p[k - 1];
    if (s[i] == s[k]) ++k;
    p[i] = k;
  }
  return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main() {
#ifdef NEV_DEBUG
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
  clock_t beg = clock();
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  int tn = gi();
  FOR(test, 1, tn + 1) {
    
    int A = gi();
    int B = gi();
    int C = gi();
    int n = gi();
    VI a, b, c;
    FOR(i, 0, n) {
      a.pb(gi());
      b.pb(gi());
      c.pb(gi());
    }
    int ok = 0;
    FOR(m, 0, 1 << n) {
      int ta = 0;
      int tb = 0;
      int tc = 0;
      FOR(i, 0, n) if (m&(1 << i)) {
        ta += a[i];
        tb += b[i];
        tc += c[i];
      }
      if (ta == A && tb == B && tc == C) { ok = 1; break; }
    }
    printf("Case #%d: %s\n", test, (ok ? "yes" : "no"));
  }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef NEV_DEBUG
  fprintf(stderr, "*** Total time: %.3lf ***\n", 1.0 * (clock() - beg) / CLOCKS_PER_SEC);
#endif
  return 0;
}

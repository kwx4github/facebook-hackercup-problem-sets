#include<stack>
#include<vector>
#include<iostream>
#include<string>
#include<string.h>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<vector>
#include<stdlib.h>
#include<ctype.h>
using namespace std;
// typedef struct node
// {
//     int index,height;
// }node;
// typedef struct node {
//     int open,close;
// }node;
// node a[100005];
// int sortbyopen(const void *a,const void *b) 
// {
//     node *p = (node *) a;
//     node *q = (node *) b;
//     if(p->open==q->open)
//         return p->close - q->close;
//     else 
//         return p->open - q->open;
// }    
//int search(char b[100],int i,int j)
//{
//  int mid=(i+j)/2;
//  if(strcmp(a[mid].first,b)>0)
//  {
//      return search(b,i,mid);
//      
//  }
//  else if(strcmp(a[mid].first,b)<0)
//  {
//      return search(b,mid+1,j);
//      
//  }
//  else if(strcmp(a[mid].first,b)==0)
//      return mid;
//}
// int gcd(int a,int b)
// {
//     if(a<b)
//     {
//         swap(a,b);
//     }
//     int t;
//     while(b!=0)
//     {
//         t=b;
//         b=a%b;
//         a=t;
//     }
//     return a;
// }
int gcd(int a,int b)
{
    if(a<b)
    {
        swap(a,b);
    }
    int t;
    while(b!=0)
    {
        t=b;
        b=a%b;
        a=t;
    }
    return a;
}

typedef struct node{
    int p,c,f;
}node;
bool isSubsetSum(node set[], int n,node sum)
{
   // Base Cases
   if (sum.p == 0&&sum.c == 0&&sum.f == 0)
     return true;
   if (n == 0 && (sum .c!= 0||sum.p != 0||sum.f != 0))
     return false;
 
   // If last element is greater than sum, then ignore it
   if (set[n-1].p > sum.p||set[n-1].c > sum.c||set[n-1].f > sum.f)
     return isSubsetSum(set, n-1, sum);
 
   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
   node sumnew;
   sumnew.p=sum.p-set[n-1].p;
   sumnew.c=sum.c-set[n-1].c;
   sumnew.f=sum.f-set[n-1].f;   
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sumnew);
}int main() {
    // your code goes here
    node g;
    int n,t;
    node a[100];
    cin>>t;
    for (int k = 1; k <= t; ++k)
    {
        cin>>g.p>>g.c>>g.f>>n;
        
        for(int j=0;j<n;j++)
        {
            cin>>a[j].p>>a[j].c>>a[j].f;
        }

        bool ans=isSubsetSum(a,n,g);
        if(ans==true)
            printf("Case #%d: yes\n",k);
        else
            printf("Case #%d: no\n",k);
                    


        /* code */
    }
    
}  
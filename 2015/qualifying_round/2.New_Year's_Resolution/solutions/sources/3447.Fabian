package codeforces;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

import codeforces.Main.Node;

public class Main {

	public static int[] readInts(String cad) {
		String read[] = cad.split(" ");
		int res[] = new int[read.length];
		for (int i = 0; i < read.length; i++) {
			res[i] = Integer.parseInt(read[i]);
		}
		return res;
	}

	public static long[] readLongs(String cad) {
		String read[] = cad.split(" ");
		long res[] = new long[read.length];
		for (int i = 0; i < read.length; i++) {
			res[i] = Long.parseLong(read[i]);
		}
		return res;
	}

	static void printArrayInt(int[] array) {
		if (array == null || array.length == 0)
			return;
		for (int i = 0; i < array.length; i++) {
			if (i > 0)
				System.out.print(" ");
			System.out.print(array[i]);
		}
		System.out.println();
	}

	static void printMatrixInt(int[][] array) {
		if (array == null || array.length == 0)
			return;
		for (int i = 0; i < array.length; i++) {
			for (int j = 0; j < array[0].length; j++) {
				if (j > 0)
					System.out.print(" ");
				System.out.print(array[i][j]);
			}
			System.out.println();
		}

	}

	public static int max(int arr[]) {
		int max = arr[0];
		for (int i = 1; i < arr.length; i++) {
			max = Math.max(max, arr[i]);
		}
		return max;
	}

	public static int min(int arr[]) {
		int min = arr[0];
		for (int i = 1; i < arr.length; i++) {
			min = Math.min(min, arr[i]);
		}
		return min;
	}

	public static int Gp, Gc, Gf;
	public static ArrayList<Node> l;
	public static boolean res = false;

	public static class Node implements Comparable<Node> {
		int p, c, f;

		public Node(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}

		@Override
		public int compareTo(Node o) {
			if (p == o.p)
				if (c == o.c)
					return f - o.f;
				else
					return c - o.c;
			return p - o.p;
		}

	}

	public static boolean dfs(int p, int c, int f, int n) {
		if (res)
			return true;
		if (p == Gp && c == Gc && f == Gf) {
			return res = true;

		} else if (n < l.size()) {
			if (p + l.get(n).p <= Gp && c + l.get(n).c <= Gc
					&& f + l.get(n).f <= Gf && !res)
				dfs(p + l.get(n).p, c + l.get(n).c, f + l.get(n).f, n + 1);
			dfs(p, c, f, n + 1);
			return false;
		}
		return false;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader in;
		StringBuilder out = new StringBuilder();
		File f = new File("entrada");
		if (f.exists()) {
			in = new BufferedReader(new FileReader(f));
		} else
			in = new BufferedReader(new InputStreamReader(System.in));

		int n = Integer.parseInt(in.readLine());
		int d[];
		for (int i = 0; i < n; i++) {
			out.append("Case #" + (i + 1) + ": ");
			d = readInts(in.readLine());
			Gp = d[0];
			Gc = d[1];
			Gf = d[2];
			res = false;
			int k = Integer.parseInt(in.readLine());
			l = new ArrayList<Node>();
			for (int j = 0; j < k; j++) {
				d = readInts(in.readLine());
				l.add(new Node(d[0], d[1], d[2]));
			}
			boolean s = dfs(0, 0, 0, 0);
			if (res) {
				out.append("yes\n");
			} else
				out.append("no\n");
		}
		System.out.print(out);

	}
}

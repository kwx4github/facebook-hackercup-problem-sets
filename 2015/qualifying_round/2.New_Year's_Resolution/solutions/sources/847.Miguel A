#!/usr/bin/env python2.7

import sys

def parseLineTypes (line, types):
    result = []
    elements = line.strip("\n").split(" ")
    if len(elements) != len(types):
        print ("Error: Diferent number elements between line and types_list")
        return None
    for i in range(len(elements)):
        result.append(types[i](elements[i]))
    return result

#input_file_path = "new_years_resolution_example_input.txt"
input_file_path = "new_years_resolution.txt"
#output_file_path = "new_years_resolution_example_output.txt"
output_file_path = "new_years_resolution_output.txt"

input_file = open(input_file_path, 'r')
input_file_lines = input_file.readlines()
output_file = open(output_file_path, 'w')

T = int(input_file_lines[0])

numero_linea = 1

for case in range(T):
    [GP, GC, GF] = parseLineTypes(input_file_lines[numero_linea],[int, int, int])
    numero_linea += 1
    N = int(input_file_lines[numero_linea])
    numero_linea += 1
    foods = []
    food = 0
    for food in range(N):
        foods.append(parseLineTypes(input_file_lines[numero_linea],[int, int, int]))
        numero_linea += 1
    
    foods.sort(reverse=True)
    #print(foods)
    
    def checkDiet(total, restFood):
        def sumFood(f1, f2):
            return [f1[0]+f2[0],f1[1]+f2[1],f1[2]+f2[2]]
        def sumAll(fs):
            t=[0,0,0]
            for i in range(len(fs)):
                t = sumFood(t,fs[i])
            return t
        #Check if adding all the rest is enough
        [RP, RC, RF] = sumFood(total,sumAll(restFood))
        if (RP < GP) or (RC < GC) or (RF < GF):
            return False
        [P, C, F] = total
        if (P > GP) or (C > GC) or (F > GF):
            return False
        if (P == GP) and (C == GC) and (F == GF):
            return True
        for i in range(len(restFood)):
            food = restFood[i]
            if checkDiet(sumFood([P,C,F],food), restFood[1:]):
                return True
        return False
    if checkDiet([0,0,0],foods):
        isPossible = "yes"
    else:
        isPossible = "no"    
    output_file.write ("Case #%d: %s\n" % (case+1,isPossible))
    print ("Case #%d: %s" % (case,isPossible))

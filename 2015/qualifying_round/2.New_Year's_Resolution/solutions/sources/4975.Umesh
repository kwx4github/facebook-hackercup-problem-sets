import java.util.ArrayList;
import java.util.List;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

class Subset {
    public static void main(String[] args) throws IOException {

	long t;
	PrintWriter out=new PrintWriter(System.out);
	        
	      bre.init(System.in);
	t=bre.nextLong();

	for(int ii=0;ii<t;ii++){
		int ca,fa,pr,java=0;
		ca=bre.nextInt();
		fa=bre.nextInt();
		pr=bre.nextInt();
		int n=bre.nextInt();int a[]=new int [n];int b[]=new int[n];int c[]=new int[n];
		List<Integer> s = new ArrayList<Integer>();
	for(int j=0;j<n;j++){
		int fca=bre.nextInt();
		int ffa=bre.nextInt();
		int fpr=bre.nextInt();
		if(fca<=ca&&ffa<=fa&&fpr<=pr){
			a[java]=fca;
			b[java]=ffa;
    			c[java]=fpr;
   			s.add(java);
			java++;
		}
	}
    			
    int setSize = s.size();int i;
    int finalValue = (int) (Math.pow(2, setSize));
    String bValue = "";
    for (i = 0; i < finalValue; i++) {
        bValue = Integer.toBinaryString(i);
        int bValueSize = bValue.length();
        for (int k = 0; k < (setSize - bValueSize); k++) {
            bValue = "0" + bValue;
        }
        int sum=0;int sum1=0;int sum2=0;
        for (int j = 0; j < setSize; j++) {
            if (bValue.charAt(j) == '1') {
			int umesh=s.get(j);//sum+=umesh;
			sum=sum+a[umesh];
			sum1=sum1+b[umesh];
			sum2=sum2+c[umesh];
                
            }
        }
	if(sum==ca && sum1==fa && sum2==pr){
		System.out.println("Case #"+(ii+1)+": yes");
		
		i=finalValue+100;
	}
	
        
    }
	if(i==finalValue){
		System.out.println("Case #"+(ii+1)+": no");
	}
	




	}//end of test
}
}


class bre {
	    static BufferedReader reader;
	    static StringTokenizer tokenizer;
	 
	    /** call this method to initialize reader for InputStream */
	    static void init(InputStream input) {	        reader = new BufferedReader(
	                     new InputStreamReader(input) );
	        tokenizer = new StringTokenizer("");
	    }
	 
	    /** get next word */
	    static String next() throws IOException {
	        while ( ! tokenizer.hasMoreTokens() ) {
	            //TODO add check for eof if necessary
	            tokenizer = new StringTokenizer(
	                   reader.readLine() );
	        }
	        return tokenizer.nextToken();
	    }
	 
	    static int nextInt() throws IOException {
	        return Integer.parseInt( next() );
	    }
	 
	    static long nextLong() throws IOException {
	        return Long.parseLong( next() );
	    }
	 
	    static double nextDouble() throws IOException {
	        return Double.parseDouble( next() );
	    }
	}  


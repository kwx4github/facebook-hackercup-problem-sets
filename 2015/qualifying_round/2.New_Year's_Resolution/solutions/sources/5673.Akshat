import sys
from multiprocessing import Process,Queue

def knapsack(input, sum, q):
	op = []
	if (sum == 0):
		op.append(0);
		q.put(op)
		return [0]

	r= 2**len(input)

	p = []
	for i in range(r):
		p.append(0)

	step = 1

	for e in input:
		#r = r/2
		init = 0
		for i in range(step,r,step*2):
			for j in range(step):
				p[i+j] +=e
		step *= 2

	ret = []

	for i in range(len(p)):
		if p[i] == sum:
			ret += [i]

	op.extend(ret)
 	q.put(op)
	return ret


fi = sys.stdin
t = int(fi.readline())


for _t in range(t):
    	s = fi.readline().split()
    	gp = int(s[0])
    	gc = int(s[1])
    	gf = int(s[2])
	
	n = fi.readline().split()
	n = int(n[0])
	
	p = []
        c = []
        f = []
	for j in range(n):
		tt = fi.readline().split()
		p.append(int(tt[0]))
		c.append(int(tt[1]))
		f.append(int(tt[2]))
	
	rp = Queue() 
        pp1 = Process(target=knapsack, args=(p,gp,rp))
	pp1.start()
	rc = Queue()
        pp2 = Process(target=knapsack, args=(c,gc,rc))
        pp2.start()
	rf = Queue()
        pp3 = Process(target=knapsack, args=(f,gf,rf))
	pp3.start()

	pp1.join()
	pp2.join()
	pp3.join()
	
	rp = rp.get()
	rf = rf.get()
	rc = rc.get()

	p1 = set(rp).intersection(rc)
	p2 = p1.intersection(rf)

	op = "no"

	if (len(p2) != 0):
		op = "yes"
		
	print "Case #%d: %s" % ((_t+1,op))		


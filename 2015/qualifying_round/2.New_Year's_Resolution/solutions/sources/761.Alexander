#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <limits>

static const size_t INF = std::numeric_limits<size_t>::max(); 

struct Meal {
    unsigned P;
    unsigned C;
    unsigned F;
    
    friend std::istream& operator >> (std::istream& in, Meal& m)
    {
        unsigned p, c, f;
        in >> p >> c >> f;
        m = Meal {p, c, f};
        return in;
    }

    Meal& operator += (const Meal& rhs)
    {
        P += rhs.P;
        C += rhs.C;
        F += rhs.F;
        return *this;
    }
    
    friend Meal operator + (const Meal& lhs, const Meal& rhs)
    {
        Meal ret(lhs);
        ret += rhs;
        return ret;
    }
    
    friend bool operator == (const Meal& lhs, const Meal& rhs)
    {
        return lhs.P == rhs.P && lhs.C == rhs.C && lhs.F == rhs.F;
    }
};

int main()
{
    size_t T;
    std::cin >> T;
    for (size_t t = 0; t < T; ++t) {
        Meal required;
        std::cin >> required;
        
        size_t N;
        std::cin >> N;
        std::vector<Meal> products;
        for (size_t i = 0; i < N; ++i) {
            Meal p;
            std::cin >> p;
            products.push_back(p);
        }
           
        bool flag = false;
        for (size_t k = 0; k < (1 << N); ++k) {
            Meal sum { 0, 0, 0 };
            for (size_t i = 0; i < N; ++i) {
                if (k & (1 << i)) {
                    sum = (sum + products[i]);
                }
            }
            if (sum == required) {
                flag = true;
                break;
            }
        } 
        std::cout << "Case #" << (t + 1) << ": " << (flag ? "yes" : "no") << std::endl;
    }
    return 0;
}



#include<iostream>
using namespace std;
#define MAXN 25
struct nutrient{
	int protein;
	int carbohydrate;
	int fats;
};
nutrient nutrients[MAXN];
nutrient required;
nutrient store[MAXN];
int recur(nutrient curruentNutrient,int currentPosition,int n){
	if(currentPosition>n) 
		return 0;
	if(curruentNutrient.protein==required.protein && curruentNutrient.carbohydrate==required.carbohydrate && curruentNutrient.fats==required.fats) 
		return 1; 
	for(int i=currentPosition+1;i<n;i++)
	{
		nutrient afterIntake;
		afterIntake.protein=curruentNutrient.protein+nutrients[i].protein;
		afterIntake.carbohydrate=curruentNutrient.carbohydrate+nutrients[i].carbohydrate;
		afterIntake.fats=curruentNutrient.fats+nutrients[i].fats; 
		if(recur(afterIntake,i,n)) {
			return 1;
		} 
	}
	return 0; 
}
int main(){
	freopen("in2.txt","r",stdin);
	freopen("out2.txt","w",stdout);
	int t;
	cin>>t;
	for(int j=1;j<=t;j++){
		cin>>required.protein>>required.carbohydrate>>required.fats;
		int n;
		cin>>n;
		for(int i=0;i<n;i++){
			cin>>nutrients[i].protein>>nutrients[i].carbohydrate>>nutrients[i].fats;
		}
		bool isPossible=false; 
		for(int i=0;i<n;i++){
			if(recur(nutrients[i],i,n))
			{
				isPossible=true;	
			}
		}
		if(isPossible){
			cout<<"Case #"<<j<<": "<<"yes\n";
		}
		else{
			cout<<"Case #"<<j<<": "<<"no\n";
		}
		
	}
}

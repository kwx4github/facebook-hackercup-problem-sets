using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace NewYearsResolution
{
    public class Food
    {
        public Int32 protein;
        public Int32 carbohydrates;
        public Int32 fat;
    }
    class Program
    {
        static void Main(string[] args)
        {
            StreamReader sr = new StreamReader("new_years_resolution.txt");
            StreamWriter sw = new StreamWriter("output.txt");
            Int32 T = Int32.Parse(sr.ReadLine());
            List<string> outputs = new List<string>();
            for (Int32 i = 0; i < T; i++)
            {
                string[] data = sr.ReadLine().Split(' ');
                Food total = new Food();
                total.protein = Int32.Parse(data[0]);
                total.carbohydrates = Int32.Parse(data[1]);
                total.fat = Int32.Parse(data[2]);
                Int32 N = Int32.Parse(sr.ReadLine());
                List<Food> foods = new List<Food>();
                for (Int32 j = 0; j < N; j++)
                {
                    data = sr.ReadLine().Split(' ');
                    Food food = new Food();
                    food.protein = Int32.Parse(data[0]);
                    food.carbohydrates = Int32.Parse(data[1]);
                    food.fat = Int32.Parse(data[2]);
                    if (food.protein <= total.protein && food.carbohydrates <= total.carbohydrates && food.fat <= total.fat)
                    {
                        foods.Add(food);
                    }
                }
                foods = foods.OrderByDescending(x => x.protein).ToList();

                /*
                Console.WriteLine("#####");
                foreach (Food food in foods)
                {
                    Console.WriteLine(food.protein + " " + food.carbohydrates + " " + food.fat);
                }
                */

                Int32 level = 0;
                List<bool> levelIncluded = new List<bool>();
                foreach (Food food in foods)
                {
                    levelIncluded.Add(false);
                }
                bool solved = false;
                Food calculate = new Food();
                while (level < foods.Count && !solved)
                {
                    if (calculate.protein + foods[level].protein <= total.protein &&
                        calculate.carbohydrates + foods[level].carbohydrates <= total.carbohydrates &&
                        calculate.fat + foods[level].fat <= total.fat)
                    {
                        calculate.protein += foods[level].protein;
                        calculate.carbohydrates += foods[level].carbohydrates;
                        calculate.fat += foods[level].fat;
                        levelIncluded[level] = true;
                    }
                    if (calculate.protein == total.protein && calculate.carbohydrates == total.carbohydrates && calculate.fat == total.fat)
                    {
                        solved = true;
                    }
                    else
                    {
                        if (level < foods.Count() - 1)
                        {
                            level++;
                        }
                        else
                        {
                            if (levelIncluded.Distinct().Count() == 1)
                            {
                                level++;
                            }
                            else
                            {
                                if (levelIncluded[level])
                                {
                                    calculate.protein -= foods[level].protein;
                                    calculate.carbohydrates -= foods[level].carbohydrates;
                                    calculate.fat -= foods[level].fat;
                                    levelIncluded[level] = false;
                                }
                                level--;
                                while (level >= 0 && !levelIncluded[level])
                                {
                                    level--;
                                }
                                if (level < 0)
                                {
                                    level = foods.Count();
                                }
                                else
                                {
                                    calculate.protein -= foods[level].protein;
                                    calculate.carbohydrates -= foods[level].carbohydrates;
                                    calculate.fat -= foods[level].fat;
                                    levelIncluded[level] = false;
                                }
                                level++;
                            }
                        }
                    }
                }
                outputs.Add("Case #" + (i + 1) + ": " + (solved ? "yes" : "no"));
            }
            foreach (string output in outputs)
            {
                sw.WriteLine(output);
            }
            sr.Close();
            sw.Flush();
            sw.Close();
        }
    }
}

#include <iostream>
#include <vector>
#include <cmath>

// g++ -Wall -std=c++11 main.cpp -o 30_NewYear
//
// Facebook Hacker Cup 2015 - Quali Round
// 30: New Year's Resolution
// by Guilherme Caixeta de Oliveira
// gcaixetaoliveira@gmail.com
//

using namespace std;

class Food {
public:
    unsigned P, C, F;
    Food() {
        P = C = F = 0;
    }
};

int main() {

    // T
    unsigned T=0;
    cin >> T;

    // For each test case
    for(unsigned test=0; test<T; test++) {

        // Gp, Gc, Gf
        Food desired;
        cin >> desired.P >> desired.C >> desired.F;

        // N
        unsigned N=0;
        cin >> N;

        // Store foods
        vector<Food> food;
        for(unsigned i=0; i<N; i++) {
            Food tmp;
            cin >> tmp.P >> tmp.C >> tmp.F;
            food.push_back(tmp);
        }

        // Generate combinations
        bool possible = false;
        int comb=0;
        for(int i=0; i<pow(2, N); i++) {
            int thisComb = comb;
            Food sum;

            // Sum nutrients for this combination
            vector<Food>::iterator it;
            for(it=food.begin(); it!=food.end(); it++) {
                // If eat this, sum
                if((thisComb&1)==1) {
                    Food n = (*it);
                    sum.P += n.P;
                    sum.C += n.C;
                    sum.F += n.F;
                }
                // Check exceed maximum
                if(sum.P>desired.P || sum.C>desired.C || sum.F>desired.F)
                    break;
                thisComb >>= 1;
            }

            // Check if ate exact nutrients
            if(sum.P==desired.P && sum.C==desired.C && sum.F==desired.F) {
                possible = true;
                break;
            }

            comb++;
        }

        cout << "Case #" << test+1 << ": " << (possible?"yes":"no") << "\n";
    }


    return 0;
}


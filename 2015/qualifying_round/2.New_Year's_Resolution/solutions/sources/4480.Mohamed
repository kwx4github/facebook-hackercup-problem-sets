import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Resolution {

    private BufferedReader in;
    private StringTokenizer st;
    private PrintWriter out;

    void solve() throws IOException {

        int t = nextInt();
        int kase = 0;
        while (t-- > 0) {
            kase++;
            out.print("Case #" + kase + ": ");
            int p = nextInt();
            int c = nextInt();
            int f = nextInt();
            int n = nextInt();
            int[][] food = new int[n][3];
            for (int i = 0; i < food.length; i++) {
                food[i][0] = nextInt();
                food[i][1] = nextInt();
                food[i][2] = nextInt();
            }
            boolean solved = false;
            for (int i = 0; i < (1 << n); i++) {
                int pp = 0;
                int cc = 0;
                int ff = 0;
                for (int j = 0; j < n; j++) {
                    if ((i & (1 << j)) != 0) {
                        pp += food[j][0];
                        cc += food[j][1];
                        ff += food[j][2];
                    }
                }
                if (pp == p && cc == c && ff == f) {
                    out.println("yes");
                    solved = true;
                    break;
                }
            }
            if (!solved) {
                out.println("no");
            }
        }
    }

    Resolution() throws IOException {
        in = new BufferedReader(new FileReader("in"));
        out = new PrintWriter(new FileWriter("out"));
        eat("");
        solve();
        out.close();
    }

    private void eat(String str) {
        st = new StringTokenizer(str);
    }

    String next() throws IOException {
        while (!st.hasMoreTokens()) {
            String line = in.readLine();
            if (line == null) {
                return null;
            }
            eat(line);
        }
        return st.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }

    public static void main(String[] args) throws IOException {
        new Resolution();
    }

    int gcd(int a, int b) {
        if (b > a)
            return gcd(b, a);
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

}

#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

struct Data {
    int x, y, z;
    
    Data () {}
    Data (int x, int y, int z) : x(x), y(y), z(z) {}
    
    void read() {
        scanf("%d%d%d", &x, &y, &z);
    }
    
    Data const operator +(Data o) {
        return Data(x + o.x, y + o.y, z + o.z);
    }
    
    bool operator ==(const Data &a) {
        return a.x == x && a.y == y && a.z == z;
    }
} person, a[30], dp[1 << 21];

int t;
int n;
int bit[1 << 21];
bool calced[1 << 20];

Data calc(int mask) {
    if(mask == 0) return Data(0, 0, 0);
    Data &res = dp[mask];
    if(calced[mask]) return res;
    calced[mask] = 1;
    return res = a[bit[mask]] + calc(mask^(1<<bit[mask]));
}

void solve() {
    person.read();
    scanf("%d", &n);
    for(int i = 0; i < n; i++) a[i].read();
    memset(calced, 0, sizeof calced);
    for(int i = 0; i < (1<<n); i++) {
        if(calc(i) == person) {
            printf("yes\n");
            return;
        }
    }
    printf("no\n");
}

int main(){
    
    bit[0] = -1;
    for(int i = 1; i < (1<<21); i++) {
        if(i&1) bit[i] = 0;
        else bit[i] = bit[i >> 1] + 1;
    }
    
    scanf("%d", &t);
    for(int i = 1; i <= t; i++) {
        printf("Case #%d: ", i);
        solve();
    }
    
    return 0;
}

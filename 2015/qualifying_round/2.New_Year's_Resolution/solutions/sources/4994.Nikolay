using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;

namespace Facebook
{
    class Program
    {
        private const string problem = "new_years_resolution";

        private static void Solve(int T)
        {
            var yes = "yes";
            var no = "no";
            for (int test = 1; test <= T; test++)
            {
                int a, b, c;
                Read(out a, out b, out c);
                var count = ReadInt();
                var canA = new List<int>();
                var canB = new List<int>();
                var canC = new List<int>();

                for (int i = 0; i < count; i++)
                {
                    int fa, fb, fc;
                    Read(out fa, out fb, out fc);
                    var n = canA.Count;
                    for (int j = 0; j < n; j++)
                    {
                        if (canA[j] + fa > a || canB[j] + fb > b || canC[j] + fc > c) 
                            continue;

                        canA.Add(canA[j] + fa);
                        canB.Add(canB[j] + fb);
                        canC.Add(canC[j] + fc);
                    }
                    if (fa <= a && fb <= b && fc <= c)
                    {
                        canA.Add(fa);
                        canB.Add(fb);
                        canC.Add(fc);
                    }
                }
                var res = false;
                for (int i = 0; i < canA.Count; i++)
                {
                    res = canA[i] == a && canB[i] == b && canC[i] == c;
                    if (res)
                        break;
                }
                Console.WriteLine(OuputStringFormat, test, res ? yes : no);
            }
        }
        
        static void Main()
        {
            Console.SetIn(new StreamReader(String.Format(@"..\..\..\{0}.in", problem)));
            if (!Debugger.IsAttached)
                Console.SetOut(new StreamWriter(String.Format(@"..\..\..\{0}.out", problem)));

            var T = ReadInt();

            Solve(T);

            Console.In.Close();
            Console.Out.Flush();
            Console.Out.Close();

            if (Debugger.IsAttached)
            {
                Console.SetIn(new StreamReader(Console.OpenStandardInput()));
                Console.ReadLine();
            }
        }

        const string OuputStringFormat = "Case #{0}: {1}";

        private static int[] SortIndexs<T>(IEnumerable<T> source) where T : IComparable
        {
            var array = source == null ? new List<T>() : source.ToList();
            var n = array.Count;
            var res = Enumerable.Range(0, n).ToArray();
            Array.Sort(res, (a, b) => array[a].CompareTo(array[b]));
            return res;
        }

        #region Reader

        private static string Read()
        {
            return Console.ReadLine();
        }

        private static void Read<T>(out T a1, out T a2)
        {
            var input = ReadArray();
            a1 = (T)Convert.ChangeType(input[0], typeof(T));
            a2 = (T)Convert.ChangeType(input[1], typeof(T));
        }

        private static void Read<T>(out T a1, out T a2, out T a3)
        {
            var input = ReadArray();
            a1 = (T)Convert.ChangeType(input[0], typeof(T));
            a2 = (T)Convert.ChangeType(input[1], typeof(T));
            a3 = (T)Convert.ChangeType(input[2], typeof(T));
        }

        private static void Read<T>(out T a1, out T a2, out T a3, out T a4)
        {
            var input = ReadArray();
            a1 = (T)Convert.ChangeType(input[0], typeof(T));
            a2 = (T)Convert.ChangeType(input[1], typeof(T));
            a3 = (T)Convert.ChangeType(input[2], typeof(T));
            a4 = (T)Convert.ChangeType(input[3], typeof(T));
        }

        private static int ReadInt()
        {
            return Int32.Parse(Read());
        }

        private static long ReadLong()
        {
            return long.Parse(Read());
        }

        private static double ReadDouble()
        {
            return double.Parse(Read(), CultureInfo.InvariantCulture);
        }

        private static T Read<T>()
        {
            return (T)Convert.ChangeType(Read(), typeof(T));
        }

        private static string[] ReadArray()
        {
            var readLine = Console.ReadLine();
            if (readLine != null)
                return readLine.Split(' ');

            throw new ArgumentException();
        }

        private static List<int> ReadIntArray()
        {
            return ReadArray().Select(Int32.Parse).ToList();
        }

        private static List<long> ReadLongArray()
        {
            return ReadArray().Select(long.Parse).ToList();
        }

        private static List<double> ReadDoubleArray()
        {
            return ReadArray().Select(d => double.Parse(d, CultureInfo.InvariantCulture)).ToList();
        }

        private static List<T> ReadArray<T>()
        {
            return ReadArray().Select(x => (T)Convert.ChangeType(x, typeof(T))).ToList();
        }

        private static void WriteLine(double value)
        {
            Console.WriteLine(value.ToString(CultureInfo.InvariantCulture));
        }

        private static void WriteLine(double value, string stringFormat)
        {
            Console.WriteLine(value.ToString(stringFormat, CultureInfo.InvariantCulture));
        }

        private static void WriteLine<T>(T value)
        {
            Console.WriteLine(value);
        }

        private static void Write(double value)
        {
            Console.Write(value.ToString(CultureInfo.InvariantCulture));
        }

        private static void Write(double value, string stringFormat)
        {
            Console.Write(value.ToString(stringFormat, CultureInfo.InvariantCulture));
        }

        private static void Write<T>(T value)
        {
            Console.Write(value);
        }

        #endregion
    }

}

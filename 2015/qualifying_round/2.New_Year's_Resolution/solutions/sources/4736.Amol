/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package food;
import java.util.*;
import java.io.*;
/**
 *
 * @author amol
 */
public class Food {

    /**
     * @param args the command line arguments
     */
    public static boolean algoDyn (int p,int c,int f, int [] PA, int [] CA, int [] FA, int n) {
        int len = PA.length;
        boolean [][][][] mat = new boolean[p+1][c+1][f+1][n+1];
        
        for (int i=0;i<n+1;i++)
        {
            mat [0][0][0][i] = true;
        }
        
       for (int m = 1; m <= p; m++)
       {
           for (int k=1;k<=c;k++) {
               for (int o=1;o<=f;o++) {
                   for(int j=1;j<=n;j++) {
                       mat[m][k][o][j] = mat[m][k][o][j-1];
                       if (m>=PA[j-1] && k>=CA[j-1] && o>=FA[j-1]) {
                           mat[m][k][o][j] = mat[m][k][o][j-1] || mat[m-PA[j-1]][k-CA[j-1]][o-FA[j-1]][j-1];
                       }
                   }
               }
           }
       }
       return mat[p][c][f][n];
    }
    
    public static boolean algo (int p,int c,int f, int [] PA, int [] CA, int [] FA, int n) {
        if (p == 0 && c == 0 && f == 0) {
            return true;
        }
        if (n < 0) 
        {
            return false;
        }
        if ((p - PA[n] < 0) || (c - CA[n] < 0) || (f- FA[n] < 0)) {
            algo(p,c,f,PA,CA,FA,n-1);
        }
        return algo(p,c,f,PA,CA,FA,n-1) || algo(p-PA[n],c-CA[n],f-FA[n],PA,CA,FA,n-1);
    }
    public static void main(String[] args) throws FileNotFoundException{
        // TODO code application logic here
        File file = new File("new_years_resolution.txt");
        Scanner sc = new Scanner(file);
        File output = new File("output.txt");
        PrintWriter printer = new PrintWriter(output);
        // take the input
        int tests = sc.nextInt();
        for (int i=0;i<tests;i++) {
            int reqP,reqC,reqF;
            int foods = 0;
            reqP = sc.nextInt();
            reqC = sc.nextInt();
            reqF = sc.nextInt();
            foods = sc.nextInt();
            int [] Proteins = new int [foods];
            int [] Carbs = new int [foods];
            int [] Fats = new int [foods];
            for (int j=0;j<foods;j++) {
                // take the each food details
                Proteins [j] = sc.nextInt();
                Carbs [j] = sc.nextInt();
                Fats [j] = sc.nextInt();
            }
            // all input has been taken 
            // call the algorithm to solve
            if (algo (reqP, reqC, reqF, Proteins,Carbs,Fats, foods-1)) {
                printer.println("Case #"+(i+1)+": yes");
            }
            else
                printer.println("Case #"+(i+1)+": no");
        }
        printer.close();
    }
    
}

def powerset_generator(i):
    for subset in chain.from_iterable(combinations(i, r) for r in range(len(i)+1)):
	    yield list(subset)


def possible(P,C,F,Gp,Gc,Gf):
	#print 'calling possible'
	#print P,C,F
	#print sum(P), sum(C), sum(F)
	#print Gp,Gc,Gf
	indices = []
	for index, value in enumerate(P):
		indices.append(index)
	for a in powerset_generator(indices):
		Ps = 0
		Cs = 0
		Fs = 0

		for item in a:
			Ps += P[item]
			Cs += C[item]
			Fs += F[item]
		#check if perfect match
		if Ps == Gp and Cs == Gc and Fs == Gf:
			return 'yes'
	return 'no'

from sys import argv
from itertools import islice, chain, combinations

script, filename = argv
infile = open(filename, 'r')


T = int(next(infile))
print T

count = 1
for i in range(T):
	P = []
	C = []
	F = []
	Gp,Gc,Gf = next(infile).split()
	Gp = int(Gp)
	Gc = int(Gc)
	Gf = int(Gf)
	N = int(next(infile))
	for j in range(N):
		p,c,f = next(infile).split()
		P.append(p)
		C.append(c)
		F.append(f)
	P = map(int, P)
	C = map(int, C)
	F = map(int, F)
	#print P,C,F
	#print Gp,Gc,Gf
	print 'Case #%d:'%count, possible(P,C,F,Gp,Gc,Gf)
	count += 1
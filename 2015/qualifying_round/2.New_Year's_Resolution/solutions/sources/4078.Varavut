import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

import com.google.common.collect.Sets;


public class Combinations {

    public static void main (String args[]) throws FileNotFoundException
    {
    	File a = new File("F:\\b.txt");
		FileInputStream fileInputStream = new FileInputStream(a);
		Scanner scanner = new Scanner(a); 
		int line = scanner.nextInt();
		
		for(int i=0;i<line;i++){
			Triple expect = new Triple(scanner.nextInt(),scanner.nextInt(),scanner.nextInt());
			int itemCount = scanner.nextInt();
			Set<Triple> input = new HashSet<Combinations.Triple>(itemCount);
			for(int j=0;j<itemCount;j++){
				input.add(new Triple(scanner.nextInt(),scanner.nextInt(),scanner.nextInt()));
			}
			Set<Set<Triple>> powerSet = Sets.powerSet(input);
			System.out.println(String.format("Case #%d: %s", i+1,test(powerSet,expect)?"yes":"no"));
		}
    }
    
    static boolean test(Set<Set<Triple>> powerSet, Triple expect){
    	Iterator<Set<Triple>> iterator = powerSet.iterator();
    	while(iterator.hasNext()){
    		Set<Triple> triples = iterator.next();
    		//System.out.print(Triple.printList(triples));
    		Triple result = Triple.plusAll(new ArrayList<Triple>(triples));
    		if(result!=null && expect.equals(result)){
    			return true;
    			//System.out.println(" ["+result+"] "+true);
    		}/*else{
    			System.out.println(" ["+result+"] "+false);
    		}*/
    	}
    	return false;
    }
    
    static class Triple {
    	private int first;
    	private int second;
    	private int third;
		public int getFirst() {
			return first;
		}
		public void setFirst(int first) {
			this.first = first;
		}
		public int getSecond() {
			return second;
		}
		public void setSecond(int second) {
			this.second = second;
		}
		public int getThird() {
			return third;
		}
		public void setThird(int third) {
			this.third = third;
		}
		public Triple(int first, int second, int third) {
			super();
			this.first = first;
			this.second = second;
			this.third = third;
		}
    	@Override
    	public boolean equals(Object o) {
    		Triple other = (Triple) o;
    		return this.first==other.first && this.second == other.second && this.third == other.third;
    	}
    	
    	public static Triple plusAll(List<Triple> triples){
    		int first = 0;
    		int second = 0;
    		int third = 0;
    		for(Triple triple : triples){
    			first+=triple.first;
    			second+=triple.second;
    			third+=triple.third;
    		}
    		return new Triple(first, second, third);
    	}

    	@Override
    	public String toString() {
    		return String.format("(%d,%d,%d)", first,second,third);
    	}

    	public static String printList(Collection<Triple> triples){
    		StringBuffer buffer = new StringBuffer();
    		for(Triple triple:triples){
    			buffer.append(triple);
    		}
    		return buffer.toString();
    	}
    }
}

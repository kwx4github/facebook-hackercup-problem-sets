#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <set>
using namespace std;

struct data {
	int p, c, f;

	bool isOk(const data& d) const {
		return (p<=d.p) && (c<=d.c) && (f<=d.f);
	}

	bool operator<(const data& d) const {
		return (p<d.p) || (p==d.p && c<d.c) || (p==d.p && c==d.c && f<d.f);
	}

	bool operator==(const data& d) const {
		return (p==d.p) && (c==d.c) && (f==d.f);
	}

	data operator+(const data& d) const {
		return data(p + d.p, c + d.c, f + d.f);
	}

	data(int p=0, int c=0, int f=0) {
		this->p = p;
		this->c = c;
		this->f = f;
	}
};

int main() {
	ifstream inp("new_years_resolution.txt");
	ofstream out("output.txt");
	cin.rdbuf(inp.rdbuf());
	cout.rdbuf(out.rdbuf());

	int T; cin>>T;
	for(int t=1; t<=T; t++) {
		data to; 
		cin>>to.p>>to.c>>to.f;
		int n; cin>>n;
		set<data> ar;
		ar.insert(data());
		set<data>::iterator it;
		for(int i=0; i<n; i++) {
			data d;
			cin>>d.p>>d.c>>d.f;
			set<data> ar2;
			for(it=ar.begin(); it!=ar.end(); ++it) {
				data tmp = d + (*it);
				if (!tmp.isOk(to)) continue;
				ar2.insert(tmp);
			}
			ar.insert(ar2.begin(), ar2.end());
		}
		string res = (ar.find(to) != ar.end()) ? "yes" :"no";
		cout<<"Case #"<<t<<": "<<res<<endl;
	}

	return 0;
}
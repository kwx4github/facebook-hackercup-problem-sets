import java.util.*;
import java.io.*;

class GetAllSubsetByStack {

/** Set a value for target sum */
//public static final int TARGET_SUM = 100;

private Stack<Integer> stack = new Stack<Integer>();
private Stack<Integer> indx= new Stack<Integer>();

/** Store the sum of current elements stored in stack */
private int sumInStack = 0;
 //String ind="";

public int populateSubset(int[] data, int fromIndex, int endIndex,int TARGET_SUM,int c, int f,int pr[], int ca[],int fa[], int fin) {

    /*
    * Check if sum of elements stored in Stack is equal to the expected
    * target sum.
    *
    * If so, call print method to print the candidate satisfied result.
    */
    int a=0;
    if (sumInStack == TARGET_SUM) {
       a=print(indx,ca,fa,c,f);
		   //return 1;
		 // System.out.println(a);
		if (a==1)
			return 1;
	   //return indx;
	   
    }

    for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

        if (sumInStack + data[currentIndex] <= TARGET_SUM) {
            stack.push(data[currentIndex]);
            //ind+=(currentIndex);
            indx.push(currentIndex);
            sumInStack += data[currentIndex];

            /*
            * Make the currentIndex +1, and then use recursion to proceed
            * further.
            */
            int jo;
            jo=populateSubset(data, currentIndex + 1, endIndex,TARGET_SUM,c,f,pr,ca,fa,fin);
            if(jo==1)
				return 1;            
            sumInStack -= (Integer) stack.pop();
            int k;
            k=(Integer) indx.pop();
        }
    }
    
	//if (fin ==1)
	//	return 1;
	//else
	 	return 0;
    
}

/**
 * Print satisfied result. i.e. 15 = 4+6+5
 */

private int print(Stack<Integer> indx,int ca[], int fa[], int c, int f) {
    //StringBuilder sb = new StringBuilder();
    //StringBuilder in = new StringBuilder();
    //sb.append(TARGET_SUM).append(" = ");
   // for (Integer i : stack) {
     //   sb.append(i).append("+");
    //}
	int sum1,sum2;
	sum1=0;
	sum2=0;
    for(Integer i:indx)
    {
    	//System.out.println(i);
    	sum1+=ca[i];
		sum2+=fa[i];
	}
//	System.out.println(sum1+ " "+ sum2+c+" "+f);
	if(sum1==c && sum2==f)
	{
		//System.out.println("hi");
		return 1;
	}
	else
	{
		return 0;
	}
	//System.out.println();
    //System.out.println(sb.deleteCharAt(sb.length() - 1).toString());
	
    //System.out.println(in.deleteCharAt(in.length() - 1).toString());
   // ind+="";
}
}
class Ideone {

//private static final int[] DATA = { 40,30,10,20,40 };

public static void main(String[] args) {
	int t;
	Scanner in=new Scanner(System.in);
	t=in.nextInt();
	for(int j=1;j<=t;j++)
	{
		int p,c,f;
		p=in.nextInt();
		c=in.nextInt();
		f=in.nextInt();
		int n;
		n=in.nextInt();
		int pr[]=new int[n], ca[]=new int[n],fa[]=new int[n];
		for(int i=0;i<n;i++)
		{
			pr[i]=in.nextInt();
			ca[i]=in.nextInt();
			fa[i]=in.nextInt();
		}
		int fin=0;
		GetAllSubsetByStack get = new GetAllSubsetByStack();
		int k=get.populateSubset(pr, 0, pr.length,p,c,f,pr,ca,fa,fin);
		//System.out.println(k);
		if(k==1)
			System.out.println("Case #"+j+": "+"yes");
		else
			System.out.println("Case #"+j+": "+"no");
		
}
} }
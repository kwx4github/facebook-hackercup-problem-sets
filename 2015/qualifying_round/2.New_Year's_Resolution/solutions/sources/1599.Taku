import Control.Monad
import Text.Printf
import Control.Applicative
import Data.List

main :: IO ()
main = do
    t <- readLn :: IO Int
    forM_ [1..t] $ \caseNum -> do
        goal <- readTriple
        n <- readLn :: IO Int
        l <- replicateM n readTriple
        let b = if solve goal l then "yes" else "no"
        printf "Case #%d: %s\n" caseNum b

readTriple :: IO (Int,Int,Int)
readTriple = do
    [a,b,c] <- map read. words <$> getLine
    return (a,b,c)

solve :: (Int,Int,Int) -> [(Int,Int,Int)] -> Bool
solve goal l = any ((==goal).calc) $ subset l

calc :: [(Int,Int,Int)] -> (Int,Int,Int)
calc = foldl' (\(a1,a2,a3) (b1,b2,b3) -> (a1+b1,a2+b2,a3+b3)) (0,0,0)

subset :: [a] -> [[a]]
subset = foldr (\x s -> s <|> (x:) <$> s) (pure []) 


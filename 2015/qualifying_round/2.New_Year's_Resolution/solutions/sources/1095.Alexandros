#include "cmath"
#include "cstdio"
#include "iostream"
#include "algorithm"
#include "functional"
#include "map"
#include "numeric"
#include "queue"
#include "set"
#include "string"
#include "utility"
#include "vector"
using namespace std;
typedef long long i64;

struct Food {
  int p, c, f;
  int operator/(const Food& rhs) const
  {
    return min(min(p / rhs.p, c / rhs.c), f / rhs.f);
  }
  Food& operator-=(const Food& rhs)
  {
    p -= rhs.p; c -= rhs.c; f -= rhs.f;
    return (*this);
  }
  bool zero()
  {
    return(p == 0 && c == 0 && f == 0);
  }
};

bool iterate_foods(Food remaining, Food foods[], int level, int max_level) {
  Food current = remaining;
  for(int i = 0; i <= remaining / foods[level]; i++) {
    if(current.zero() || (level < max_level && iterate_foods(current, foods, level + 1, max_level)))
      return true;
    current -= foods[level];
  }
  return false;
}

string solve() {
  Food total; cin >> total.p >> total.c >> total.f;
  int food_count; cin >> food_count;
  Food foods[food_count];
  for(int i = 0; i < food_count; i++) {
    cin >> foods[i].p >> foods[i].c >> foods[i].f;
  }
  if(iterate_foods(total, foods, 0, food_count - 1))
    return "yes";
  else
    return "no";
}

int main() {
  int T; scanf("%d", &T);
  for (int Ti = 1; Ti <= T; ++Ti) {
    cerr << "Case #" << Ti << " of " << T << endl;
    cout << "Case #" << Ti << ": " << solve() << endl;
  }
  return 0;
}

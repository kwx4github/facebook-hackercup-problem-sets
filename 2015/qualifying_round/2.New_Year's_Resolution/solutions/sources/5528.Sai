import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;


 class new_year_2 {
	 /** Set a value for target sum */
	    public static int TARGET_SUM = 100;
	    public static boolean[] result=new boolean[20];
	    private Stack<Integer> stack1 = new Stack<Integer>();
	    private Stack<Integer> stack2 = new Stack<Integer>();
	    private Stack<Integer> stack3 = new Stack<Integer>();
	    /** Store the sum of current elements stored in stack */
	    private int sumInStack1 = 0;
	    private int sumInStack2 = 0;
	    private int sumInStack3 = 0;
	    public void populateSubset(int[][] data, int fromIndex, int endIndex,int p,int c,int f,int k) {

	        /*
	        * Check if sum of elements stored in Stack is equal to the expected
	        * target sum.
	        * 
	        * If so, call print method to print the candidate satisfied result.
	        */
	    	TARGET_SUM = p;
	        if (sumInStack1 == TARGET_SUM && sumInStack2==c && sumInStack3==f) {
	            //print(stack1);
	           // print(stack2);
	           // print(stack3);
	           // boolean ch=stack1.empty();
	            result[k]=true;
	        }

	        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

	            if (sumInStack1 + data[currentIndex][0] <= TARGET_SUM )//&& sumInStack2+data[currentIndex][1] <=c && sumInStack3+data[currentIndex][2]<=f) 
	            {
	                stack1.push(data[currentIndex][0]);
	                sumInStack1 += data[currentIndex][0];
	                
	                stack2.push(data[currentIndex][1]);
	                sumInStack2 += data[currentIndex][1];
	                
	                stack3.push(data[currentIndex][2]);
	                sumInStack3 += data[currentIndex][2];
	                /*
	                * Make the currentIndex +1, and then use recursion to proceed
	                * further.
	                */
	                populateSubset(data, currentIndex + 1, endIndex,p,c,f,k);
	                sumInStack1 -= (Integer) stack1.pop();
	                sumInStack2 -= (Integer) stack2.pop();
	                sumInStack3 -= (Integer) stack3.pop();
	            }
	        }
			
	    }

	    /**
	    * Print satisfied result. i.e. 15 = 4+6+5
	     * @return 
	    */

	    private boolean print(Stack<Integer> stack) {
	        StringBuilder sb = new StringBuilder();
	        sb.append(TARGET_SUM).append(" = ");
	        for (Integer i : stack) {
	            sb.append(i).append("+");
	        }
	        System.out.println(sb.deleteCharAt(sb.length() - 1).toString());
	        return true;
	    }
	/**
	 * @param args
	 * @throws IOException 
	 * @throws NumberFormatException 
	 */
	public static void main(String[] args) throws NumberFormatException, IOException {
		// TODO Auto-generated method stub
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	    int t=Integer.parseInt(br.readLine()),k=0,n;
	    String ar[]=new String[t];
	    int p,c,f;
	    while(t-->0)
	        {
	        String s[]=br.readLine().split(" ");
	        p=Integer.parseInt(s[0]);
	        c=Integer.parseInt(s[1]);
	        f=Integer.parseInt(s[2]);
	        n=Integer.parseInt(br.readLine());
	        int a[][]=new int[n][3];
	        
	        for(int i=0;i<n;i++)
	        {
	        	String s1[]=br.readLine().split(" ");
	        	a[i][0]=Integer.parseInt(s1[0]);
	        	a[i][1]=Integer.parseInt(s1[1]);
	        	a[i][2]=Integer.parseInt(s1[2]);
	        }
	        new_year_2 g=new new_year_2();
	        
	        g.populateSubset(a, 0, a.length,p,c,f,k);
	       
	        
	        k++;
	        
	        
	        }
	    for(int i=0;i<ar.length;i++)
	    	if(result[i])
			System.out.println("Case #"+(i+1)+": yes");
	    	else
	    		System.out.println("Case #"+(i+1)+": no");
	}

}

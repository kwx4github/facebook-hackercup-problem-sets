#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <vector>

using namespace std;

#define FOR(prom, a, b) for(int prom = (a); prom < (b); prom++)
#define FORD(prom, a, b) for(int prom = (a); prom > (b); prom--)
#define FORDE(prom, a, b) for(int prom = (a); prom >= (b); prom--)

#define DRI(a) int a; scanf("%d ", &a);
#define DRII(a, b) int a, b; scanf("%d %d ", &a, &b);
#define DRIII(a, b, c) int a, b, c; scanf("%d %d %d ", &a, &b, &c);
#define DRIIII(a, b, c, d) int a, b, c, d; scanf("%d %d %d %d ", &a, &b, &c, &d);
#define RI(a) scanf("%d ", &a);
#define RII(a, b) scanf("%d %d ", &a, &b);
#define RIII(a, b, c) scanf("%d %d %d ", &a, &b, &c);
#define RIIII(a, b, c, d) scanf("%d %d %d %d ", &a, &b, &c, &d);

#define PB push_back
#define MP make_pair

#define ll long long
#define ull unsigned long long

#define MM(co, cim) memset((co), (cim), sizeof((co)))

#define DEB(x) cerr << ">>> " << #x << " : " << x << endl;

int P[23];
int C[23];
int F[23];
int dynP[1<<20];
int dynC[1<<20];
int dynF[1<<20];

int main ()
{
  DRI(T);
  FOR(t,0,T) {
    DRIII(GP,GC,GF);
    DRI(N);
    FOR(i,0,N) {
      RIII(P[i],C[i],F[i]);
    }
    bool ok = false;
    dynP[0] = 0;
    dynC[0] = 0;
    dynF[0] = 0;
    FOR(i,1,1<<N) {
      int msk = 1;
      int j = 0;
      while(!(msk & i)) {msk <<= 1; j++;}
      dynP[i] = dynP[i-msk] + P[j];
      dynC[i] = dynC[i-msk] + C[j];
      dynF[i] = dynF[i-msk] + F[j];
      if(dynC[i] == GC && dynP[i] == GP && dynF[i] == GF) ok = true;
    }
    if(GP == 0 && GC == 0 && GF == 0) ok = true;
    cout << "Case #" << t+1 << ": " << (ok?"yes":"no") << endl;
  }
  return 0;
}











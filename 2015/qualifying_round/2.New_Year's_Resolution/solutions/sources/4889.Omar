using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Test
{
    class Program
    {
        public static string[] lines;
        public static int LineCounter = 0;
        

        static void Main(string[] args)
        {
            lines = System.IO.File.ReadAllLines("input.txt");
            LineCounter = 0;

            string result = "";

            int T = int.Parse(lines[LineCounter++]);

            for (int i = 0; i < T; i++)
            {
                Tuple<int, int, int> target = readTripleInt();

                int N = int.Parse(lines[LineCounter++]);

                List<Tuple<int, int, int>> foodList = new List<Tuple<int, int, int>>();

                for (int j = 0; j < N; j++)
                    foodList.Add(readTripleInt());

                result += string.Format("Case #{0} : {1}", i+1, (doWork(0, new Tuple<int, int, int>(0, 0, 0), foodList.ToArray(), target) ? "yes" : "no")) + "\n";
            }

            System.IO.File.WriteAllText("output.txt", result);

            Console.WriteLine("Press any key to continue...");
            Console.ReadLine();
        }

        static Tuple<int, int, int> readTripleInt()
        {
            string[] sTarget = lines[LineCounter++].Split(' ');
            int[] target = new int[sTarget.Length];

            for (int k = 0; k < sTarget.Length; k++)
                target[k] = int.Parse(sTarget[k]);

            return new Tuple<int, int, int>(target[0], target[1], target[2]);
        }

        static bool doWork(int idx, Tuple<int, int, int> current, Tuple<int, int, int>[] foodList, Tuple<int, int, int> target)
        {
            if (idx >= foodList.Length)
                return false;

            Tuple<int, int, int>  newCurrent = new Tuple<int, int, int>(current.Item1 + foodList[idx].Item1,
                                                                        current.Item2 + foodList[idx].Item2,
                                                                        current.Item3 + foodList[idx].Item3);

             if ((newCurrent.Item1 == target.Item1) && (newCurrent.Item2 == target.Item2) && (newCurrent.Item3 == target.Item3))
                return true;

            if ((newCurrent.Item1 > target.Item1) || (newCurrent.Item2 > target.Item2) || (newCurrent.Item3 > target.Item3))
                return doWork(idx + 1, current, foodList, target);

            return doWork(idx + 1, newCurrent, foodList, target) || doWork(idx + 1, current, foodList, target);
        }
    }
}

// directives 
	#include <stdio.h>
	#include <vector>
	#include <map>
	#include <set>
	#include <deque>
	#include <queue>
	#include <algorithm>
	#include <iostream>
	#include <cmath>
	#include <cstring>
	#include <typeinfo>
	#include <sstream>
// 
using namespace std;
// macros 
	#define FOR(i,a,b)      for(int i(a);i<b;++i)
	#define REP(i,n)        FOR(i,0,n)
	#define FORD(i,a,b)      for(int i(a-1);i>=b;--i)
	#define CL(a,x)         memset(a,x,sizeof(a))
	#define FL(a,x)			fill_n(a,sizeof(a)/sizeof(a[0]),x)
	#define asort(a,n)		sort(a,a+n)
	#define vsort(v,n)		sort(v.begin(), v.begin()+n)
	#define sz(x)			x.size()
	#define all(x)			x.begin(), x.end()
	#define SSTR( x )		dynamic_cast< std::ostringstream & >( ( std::ostringstream() << std::dec << x ) ).str()
	#define TI(x)		int x = rint()
	#define TII(x,y)		int x = rint(),y = rint()
	#define TIII(x,y,z)		int x = rint(),y = rint(),z = rint()
// 

typedef long long LL;
typedef vector<int> vi;
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%I64d",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }

struct triplet {
	int a,b,c;
	triplet(){}
	triplet(int x,int y, int z): a(x), b(y), c(z) {}
	triplet operator+(const triplet &t) const {
		return triplet(a+t.a, b+t.b, c+t.c);
	}
	bool operator<(const triplet &t) const{
		if (a!=t.a) return a < t.a;
		if (b!=t.b) return b < t.b;
		return c < t.c;
	}
	bool operator==(const triplet &t) const {
		return a == t.a && b == t.b && c == t.c;
	}
	void print() {
		cout << a << " " << b << " " << c << endl;
	}
};

typedef vector<triplet> vt;

vt foods, s[2];

void subsetSums(int a, int b, int part, triplet t) {
	if (a > b) s[part].push_back(t);
	else {
//		foods[a].print();
		subsetSums(a+1,b,part,t);
		subsetSums(a+1,b,part,t + foods[a]);
	}
}

bool solve(const triplet &target) {
	int n = sz(foods);
	s[0].clear();
	s[1].clear();
	subsetSums(0,(n/2)-1, 0, triplet(0,0,0));
	subsetSums((n/2), n-1, 1, triplet(0,0,0));
	sort(all(s[0]));
	sort(all(s[1]));
	int p = sz(s[0]), q = sz(s[1]), i = 0, j = q-1;
//	cout << p << ";" << q << endl;
	while (i < p && j >= 0) {
		triplet sum = s[0][i] + s[1][j];
//		sum.print();
		if (sum < target) i++;
		else if (target < sum) j--;
		else return true;
	}
	return false;
}

int main()
{
	TI(T);
	REP(t,T) {
		TIII(a,b,c);
		triplet target(a,b,c);
		foods.clear();
		TI(n);
		REP(i,n) {
			TIII(a,b,c);
			foods.push_back(triplet(a,b,c));
		}
		printf("Case #%d: %s\n", t+1, solve(target) ? "yes" : "no");
		
	}
	return 0;
}

def gotBadCase(binary):
    binary = list(binary)
    z = 0
    hasZero = 0
    while len(binary) > z and binary[-z-1] == "0":
        z += 1
        hasZero = 1
    while len(binary) > z and binary[-z-1] == "1":
        z += 1
    if len(binary)==z:
        binary.insert(0,"1")
    else:
        binary[-z-1]="1"
    
    while z > 0:
        binary[-z] = "0"
        z -= 1
    return int("".join(binary), 2)
def checkCase(binary):
    y = 0
    isBad = 1
    while len(badCases) > y:
        x = 0
        badCaseLength = len(badCases[y])
        while badCaseLength > x and isBad == 1:
            if badCases[y][-x-1] != binary[-x-1] and badCases[y][-x-1] == "1":
                isBad = 0
            x += 1
        y += 1
        if isBad == 1:
            return isBad
        else:
            isBad = 1
    return 0
def RICHIEMETHOD(line):
    global foods
    global lineNumber
    global badCases
    targets = input_rows[line].split(" ")
    targets[0] = int(targets[0])
    targets[1] = int(targets[1])
    targets[2] = int(targets[2])
    foodCount = int(input_rows[line + 1])
    line += 2
    foods = []
    for q in range(0, foodCount):
        foods.append(q)
        foods[q] = list(input_rows[line + q].split(" "))
    for q in range(0, foodCount):
        for r in range(0,3):
            foods[q][r] = int(foods[q][r])
          
    badCases = []
    i = 0
    totalCases = 2**(foodCount)
    global actualCycles
    actualCycles = 0
    THECASE = [0,0,0]
    while i < totalCases:
        binaryI = bin(i)[2:]
        if len(badCases)==0 or checkCase(binaryI) == 0:        
            j = 0
            THECASE = [0,0,0]
            while len(binaryI) > j:
                if binaryI[-j-1] == "1":
                    THECASE[0] += foods[j][0]
                    THECASE[1] += foods[j][1]
                    THECASE[2] += foods[j][2]
                if THECASE[0] == targets[0] and THECASE[1] == targets[1] and THECASE[2] == targets[2]:
                    lineNumber += foodCount + 2
                    return "yes"
                
                elif THECASE[0] > targets[0] or THECASE[1] > targets[1] or THECASE[2] > targets[2]:
                    i = gotBadCase(binaryI)-1
                    j = len(binaryI)
                    badCases.append(binaryI)
                j += 1
        else:
            i = gotBadCase(binaryI) - 1
        
        actualCycles += 1
        i += 1
    lineNumber += foodCount + 2
    
    return "no"
        

input_file = open("new_years_resolution.txt", "r")
# break file into rows
input_rows = input_file.read().split("\n")
output = ""

# scan first row to find number of cases
cases = int(input_rows[0])
currentCase = 1
global lineNumber
lineNumber = 1
while cases > currentCase-1:
    outputLine = "Case #" + str(currentCase) + ": " + RICHIEMETHOD(lineNumber) + "\n"
    output += outputLine
    currentCase += 1
      
print output

outputFile = open("output.txt", "w")
outputFile.write(output)
outputFile.close()

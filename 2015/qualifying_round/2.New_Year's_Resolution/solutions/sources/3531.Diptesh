/*
ID: diptesh1
TASK:
LANG: C++
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define PB(X) push_back(X)
#define fill(x,v) memset(x,v,sizeof(x))
int getint()
{
	char ch;
	do
	{
		ch=getchar();
	}while (ch!='-'&&(ch<'0'||ch>'9'));
	int ans=0,f=0;
	if (ch=='-') f=1; else ans=ch-'0';
	while (isdigit(ch=getchar())) ans=ans*10+ch-'0';
	if (f) ans*=-1;
	return ans;
}
int p,c,f,gp,gc,gf,n;
int values[30][4];
bool canPoss(int n){
    int x=0,y=0,z=0;
    for(int i=0 ; i<=30 ; i++){
        if(n&(1<<i)){
            x+=values[i][1];
            y+=values[i][2];
            z+=values[i][3];
        }
    }
    if(x==gp && y==gc && z==gf)
        return true;
    return false;
}
int main()
{
    freopen("secondOut.txt","w",stdout);
	freopen("second.txt","r",stdin);
	int testCases;
	testCases=getint();
	for(int i=1; i<=testCases ; i++){
        printf("Case #%d: ",i);
        scanf("%d %d %d",&gp,&gc,&gf);
        scanf("%d",&n);
        for(int i=0; i<n ; i++){
            scanf("%d %d %d",&p,&c,&f);
            values[i][1]=p;
            values[i][2]=c;
            values[i][3]=f;
        }
        bool isAns;
        for(int i=0 ; i<1<<n ; i++){
                isAns=canPoss(i);
                if(isAns==true)
                    break;
        }
        puts(isAns?"yes":"no");
	}
	return 0;
}


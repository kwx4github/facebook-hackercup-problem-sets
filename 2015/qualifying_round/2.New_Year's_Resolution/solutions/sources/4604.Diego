import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) throws FileNotFoundException {
		Scanner s = new Scanner(System.in, "UTF-8");

		int nTests = Integer.parseInt(s.nextLine());

		for (int t = 1; t <= nTests; t++) {
			int targetP = s.nextInt();
			int targetC = s.nextInt();
			int targetF = s.nextInt();

			int nFoods = s.nextInt();
			int[] ps = new int[nFoods];
			int[] cs = new int[nFoods];
			int[] fs = new int[nFoods];

			for (int i = 0; i < nFoods; i++) {
				ps[i] = s.nextInt();
				cs[i] = s.nextInt();
				fs[i] = s.nextInt();
			}

			List<List<Integer>> compliantPs = findCombinationsThatSumTarget(ps,
					targetP);
			List<List<Integer>> compliantCs = findCombinationsThatSumTarget(cs,
					targetC);
			List<List<Integer>> compliantFs = findCombinationsThatSumTarget(fs,
					targetF);

			List<List<Integer>> result = new LinkedList<>(compliantPs);
			result.retainAll(compliantCs);
			result.retainAll(compliantFs);

			System.out.println("Case #" + t + ": " + (result.size() > 0 ? "yes" : "no"));
		}

		s.close();
	}

	private static List<List<Integer>> findCombinationsThatSumTarget(
			int[] numbers, int target) {
		List<List<Integer>> result = new LinkedList<List<Integer>>();

		rFindCombinationsThatSumTarget(numbers, 0, target,
				new LinkedList<Integer>(), result);

		return result;
	}

	private static void rFindCombinationsThatSumTarget(int[] numbers,
			int currentIdx, int target, List<Integer> accumIdxs,
			List<List<Integer>> result) {
		int accumSize = accumIdxs.size();

		if (accumSize > 0) {
			int sum = 0;

			for (int idx : accumIdxs) {
				sum += numbers[idx];
			}

			if (sum == target) {
				result.add(new ArrayList<Integer>(accumIdxs));

				return;
			} else if (sum > target) {
				return;
			}
		}

		for (int i = currentIdx; i < numbers.length; i++) {
			accumIdxs.add(i);
			rFindCombinationsThatSumTarget(numbers, i + 1, target, accumIdxs,
					result);
			accumIdxs.remove(accumIdxs.size() - 1);
		}
	}
}

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

/* Represents the food requirement */
struct Greq
{
	int gp;
	int gc;
	int gf;
};

/* represents the food items */
struct Item
{
	int p;
	int c;
	int f;
};

int dietutil(struct Greq G, struct Item *itemarray,struct Item *curr, int index, int max_index)
{
	
	int i,ret = 0;
	struct Item local;
	
	if( index > max_index)
		return 0;
	// Limit exceeded  
	if( (curr->p + itemarray[index].p > G.gp) ||  (curr->c + itemarray[index].c > G.gc ) ||  (curr->f + itemarray[index].f > G.gf))
                return 0;
	
	// Match found case 
	if( (curr->p + itemarray[index].p == G.gp) &&  (curr->c + itemarray[index].c == G.gc )&&  (curr->f + itemarray[index].f == G.gf))
		return 1;
			
	// Limit not reached, look further in the itemarray 
	curr->p += itemarray[index].p;
	curr->c += itemarray[index].c;
	curr->f += itemarray[index].f;
	for( i = index+1; i < max_index;i++)
	{
		local = *curr;
		ret = dietutil(G,itemarray,&local,i, max_index);
		if( ret == 1)
			return ret;
	}
	return ret;
}

int diet(struct Greq G, struct Item *itemarray, int items)
{
	struct Item curr,temp;
	int i, j,ret = 0;
	for(i = 0; i < items; i++)
	{
		curr.p = itemarray[i].p;
		curr.c = itemarray[i].c;
		curr.f = itemarray[i].f;
		for( j= i+1; j <= items; j++)
		{
			temp = curr;
			ret = dietutil(G, itemarray, &temp,j, items);
			if( ret == 1)
				return ret;
		}
	} 
	return ret;
}



int main(int argc, char* argv[])
{
	long cases, items, tmparr[5];
        char line[256], *value;
        int i, j, k,temp, ret, index;
        char const* const filename = argv[1];
	struct Greq G;
	struct Item *itemarray;
        FILE *file = fopen(filename, "r");
        fgets(line,sizeof(line),file);
        cases = strtol(line,NULL,10);
	if( cases < 1 || cases > 20)
        {
                return 0;
        }

        for( i =0; i < cases; i++)
        {
                /* Filling G */
		fgets(line,sizeof(line),file);
		value = strtok(line," ");	
        	index = 0;
		while((value != NULL) && index < 3)
		{
			tmparr[index] = strtol(value,NULL,10);
			value = strtok(NULL," ");
			index++;
		}
		if( value != NULL)
		{
			return 0;
			// Error case
		}	
		for ( k=0 ; k < 3; k++)
		{
			if(tmparr[k] > 1000 || tmparr[k] < 10)
			{
				return 0;
			}
		}
		
		G.gp = tmparr[0];
		G.gc = tmparr[1];
		G.gf = tmparr[2];
		/* Getting the number of food items */
        	fgets(line,sizeof(line),file);
		items = strtol(line,NULL,10);
		if( items < 1 || items > 20)
        	{
			return 0;
        	}
		/* Reading the food item values in a loop and puting them in array */
		itemarray = (struct Item *)malloc(sizeof(struct Item) * items);
		
		for( j =0; j < items; j++)
		{
			fgets(line,sizeof(line),file);
                	value = strtok(line," "); 
                	index = 0;
                	while((value != NULL) && index < 3)
                	{
                        	tmparr[index] = strtol(value,NULL,10);
                        	value = strtok(NULL," ");
                		index++;
			}
                	if( value != NULL)
                	{
                        	return 0;
                	}
                	for ( k=0 ; k < 3; k++)
			{
				if(tmparr[k] > 1000 || tmparr[k] < 10)
				{
					return 0;
				}
			}
			itemarray[j].p = tmparr[0];
                	itemarray[j].c = tmparr[1];
                	itemarray[j].f = tmparr[2];
			
		}		
		ret = diet(G,itemarray,items);
		if( ret == 1)
			printf("Case #%d: yes\n",i+1);
		else
			printf("Case #%d: no\n", i+1);
		
		if( itemarray != NULL)
		{
			free(itemarray);
			itemarray = NULL;
		}
next:		;
	}
			
	return 0;
}

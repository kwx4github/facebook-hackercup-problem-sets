/*
http://codingaquarium.wordpress.com/
Shaikh shiam Rahman
Khunla University of Engineering and Technology(KUET)

*/

#include <bits/stdc++.h>
using namespace std;

/*** typedef ***/

#define MEMSET_INF 127
#define MEMSET_HALF_INF 63
#define stream istringstream
#define rep(i,n) for(__typeof(n) i=0; i<(n); i++)
#define repl(i,n) for(__typeof(n) i=1; i<=(n); i++)
#define FOR(i,a,b) for(__typeof(b) i=(a); i<=(b); i++)
#define INF (1<<30)
#define PI acos(-1.0)
#define pb push_back
#define ppb pop_back
#define all(x) x.begin(),x.end()
#define mem(x,y) memset(x,y,sizeof(x))
#define memsp(x) mem(x,MEMSET_INF)
#define memdp(x) mem(x,-1)
#define memca(x) mem(x,0)
#define eps 1e-9
#define ii pair<int,int>
#define pmp make_pair
#define ft first
#define sd second
#define vi vector<int>
#define vii vector<ii>
#define si set<int>
#define msi map<string , int >
#define mis map<int , string >
typedef long long i64;
typedef unsigned long long ui64;

/** function **/

#define SDi(x) sf("%d",&x)
#define SDl(x) sf("%lld",&x)
#define SDs(x) sf("%s",x)
#define SD2(x,y) sf("%d%d",&x,&y)
#define SD3(x,y,z) sf("%d%d%d",&x,&y,&z)
#define pf printf
#define sf scanf
#define pfcas(x) pf("Case %d: ",x)

#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)
#define MAX 20010

int n,GP,GC,GF,P[25],F[25],C[25];
bool gotit;

void call(int id,int a,int b,int c){
    if(a==GP and b==GC and c==GF){
        gotit = true;
        return;
    }
    if(id==n) return;
    if(a+P[id]<=GP and b+C[id]<=GC and c+F[id]<=GF)
        call(id+1,a+P[id],b+C[id],c+F[id]);
    if(!gotit)
        call(id+1,a,b,c);
}

int main (int argc, char **argv) {
#ifndef ONLINE_JUDGE
    READ("in.txt");
    WRITE("out.txt");
    //cout<<"hello world!"<<endl;
#endif
    int tc,cas=0;
    SDi(tc);
    while(tc--){
        SD3(GP,GC,GF);
        SDi(n);
        rep(i,n) SD3(P[i],C[i],F[i]);
        gotit = false;
        call(0,0,0,0);
        printf("Case #%d: %s\n",++cas,gotit?"yes":"no");
    }
    return 0;
}

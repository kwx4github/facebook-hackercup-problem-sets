import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.StringTokenizer;

/**
 * 
 */

/**
 * @author Nam Khanh Tran - ntran@L3S.de
 *
 */
public class Resolution {
	private static BufferedReader br;
	private static StringTokenizer st;
	private static PrintWriter pw;

	public static void main(String[] args) throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
				System.out)));

		final int MAX_NUM_CASE = readInt();
		for (int qq = 1; qq <= MAX_NUM_CASE; qq++) {
			pw.print("Case #" + qq + ": ");

			int Gp = readInt();
			int Gc = readInt();
			int Gf = readInt();
			int N = readInt();

			HashSet<Food> mark = new HashSet<Food>();
			mark.add(new Food(0, 0, 0));
			while (N-- > 0) {
				int p = readInt();
				int c = readInt();
				int f = readInt();
				HashSet<Food> temp = new HashSet<Food>();
				for (Food food : mark) {
					Food newFood = new Food(p + food.p, c + food.c, f + food.f);
					temp.add(newFood);
				}
				mark.addAll(temp);
			}

			Food finalFood = new Food(Gp, Gc, Gf);
			if (mark.contains(finalFood))
				pw.println("yes");
			else
				pw.println("no");
		}
		pw.close();
	}

	static class Food {
		public int p;
		public int c;
		public int f;

		public Food(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}

		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + p;
			result = prime * result + c;
			result = prime * result + f;
			return result;
		}

		public boolean equals(Object obj) {
			if (this == obj)
				return true;

			if (obj == null)
				return false;

			if (getClass() != obj.getClass())
				return false;

			Food other = (Food) obj;

			if (p == other.p && c == other.c && f == other.f)
				return true;

			return false;
		}
		
		public String toString() {
			return p + " " + c + " " + f;
		}
	}

	private static long readLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private static double readDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}

	private static int readInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private static String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			if (!br.ready()) {
				pw.close();
				System.exit(0);
			}
			st = new StringTokenizer(br.readLine().trim());
		}
		return st.nextToken();
	}
}

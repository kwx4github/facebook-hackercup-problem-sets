#include <iostream>
using namespace std;
#include <fstream>

struct G
{
	int p,c,f;
};

void read(ifstream& in, G&);

bool function(G,G*,int,int);

void equal(G&,G&);
void le(G,G&);

int main(int argc, char *argv[])
{
	if(argc>1)
	{
		string output = "output.txt";
		int t,n;
		int i= 0;
		ifstream in;
		ofstream out;
		G g,*gs;
		
		in.open(argv[1]);
		out.open(output.c_str());
		
		in >> t;
		
		
		
		while(i<t)
		{
			read(in,g);
			
			in >> n;
			
			gs = new G[n];
			
			for(int j = 0; j< n; j++)
				read(in,gs[j]);
			
			
			out << "Case #" << (i+1) << ": ";
			if(function(g,gs,n,0))
			{
				out << "yes" << endl;
			}
			else
			{
				out << "no" << endl;
			}
			
			delete gs;
			
			i++;
		}
		
		out.close();
		in.close();
		
	}
	
	return 0;
}



void read(ifstream& in, G& g)
{
	in >> g.p >> g.c >> g.f;
}


bool function(G g,G* gs,int n,int u)
{
	bool ok = false;
	G g2 = gs[u],g3;
	if(u<n-1)
	{
		equal(g,g3);
		le(g2,g3);
		
		if(g3.c==0&&g3.p==0&&g3.f==0)
			return true;
			
		if(!(g3.c<0||g3.p<0 || g3.f<0))
			ok=function(g3,gs,n,u+1);
		
		if(!ok)
		{
			ok= function(g,gs,n,u+1);
		}
	}
	else
	{
		ok = (g.c==g2.c&&g.p==g2.p&&g.f==g.f);
	}
	
	return ok;
	
}


void equal(G& g2,G& g)
{
	g.c=g2.c;
	g.f=g2.f;
	g.p=g2.p;
}

void le(G g2,G& g)
{
	g.c -=g2.c;
	g.f -=g2.f;
	g.p -=g2.p;
}

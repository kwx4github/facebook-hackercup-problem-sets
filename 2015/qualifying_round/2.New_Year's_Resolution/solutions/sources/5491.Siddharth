#include <bits/stdc++.h>
using namespace std;

#define R(i,a,b) for(int i=a;i<b;i++)
#define RE(i,a,b) for(int i=a;i<=b;i++)
#define RR(i,a,b) for(int i=a;i>b;i--)
#define RRE(i,a,b) for(int i=a;i>=b;i--)
#define F(i,n) for(int i=0;i<n;i++)
#define FE(i,n) for(int i=0;i<=n;i++)
#define FR(i,n) for(int i=n;i>0;i--)
#define FRE(i,n) for(int i=n;i>=0;i--)
#define mp(a,b) make_pair(a,b)
#define pii pair <int, int>
#define pb push_back
#define ft first
#define sd second
#define LL long long
#define gc getchar_unlocked
#define pc putchar_unlocked

inline void get(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

struct node
{
	int p,c,f;

	node():p(0),c(0),f(0){}
	node(int tp, int tc, int tf):p(tp),c(tc),f(tf){}

	node operator+(const node& b)
	{
		node tmp;
		tmp.p = this->p + b.p;
		tmp.c = this->c + b.c;
		tmp.f = this->f + b.f;
		return tmp;
	}

	bool operator==(const node& b)
	{
		if (this->p == b.p && this->c == b.c && this->f == b.f)
			return true;
		else return false;
	}

}food[30];


int main()
{
	int T;
	get(T);
	for (int __rep = 1; __rep <=T; __rep++)
	{
		cout << "Case #"<<__rep<<": ";
		int tp, tc, tf;
		get(tp);	
		get(tc);	
		get(tf);
		node target(tp,tc,tf);

		int n;
		get(n);

		F(i,n)
		{
			get(food[i].p);
			get(food[i].c);
			get(food[i].f);
		}

		int lim = 1<<n;
		bool done = false;
		F(i,lim)
		{
			node sum;
			F(j,n)
			{
				if (i & 1<<j)
					sum = sum + food[j];
			}
			if (sum == target)
			{
				cout << "yes" << endl;
				done = true;
			}
		}
		if (!done)
			cout << "no" << endl;
	}
	return 0;
}

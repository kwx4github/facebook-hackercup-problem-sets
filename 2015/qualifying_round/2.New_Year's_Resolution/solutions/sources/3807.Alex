# -*- coding: utf-8 -*-
from itertools import chain, combinations
import operator

# This library is available online and free to use:
# https://github.com/yanatan16/pycodejam
from codejam.parsers import iter_parser


def _adjust_goal(goal, food):
    return tuple(x - y for x, y in zip(goal, food))


def _sum(*iterables):
    return tuple(
        map(lambda *x: reduce(operator.add, x), *iterables))


def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))


def solve(g_p, g_c, g_f, foods):
    goal = (g_p, g_c, g_f)
    for combination in powerset(foods):
        if len(combination) == 0:
            continue
        elif len(combination) == 1:
            if goal == combination[0]:
                return 'yes'
        elif _sum(*combination) == goal:
            return 'yes'
    return 'no'


@iter_parser
def parse(nxtline):
    g_p, g_c, g_f = map(int, nxtline().split())
    N = int(nxtline())
    foods = []
    for i in xrange(N):
        foods.append(tuple(map(int, nxtline().split())))
    return g_p, g_c, g_f, foods


if __name__ == "__main__":
    from codejam import CodeJam
    CodeJam(parse, solve).main()

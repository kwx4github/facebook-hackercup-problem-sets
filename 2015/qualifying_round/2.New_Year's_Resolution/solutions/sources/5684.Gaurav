#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string.h>
#include <vector>
#include <cmath>
#include <climits>
#include <utility>
#include <cstdlib>
#include <cstdio>
#include <list>

using namespace std;

#define FORIT(i,c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define FV(i,s,v) for (i = int(s); i < v.size(); i++)
#define FOR(i,s,e) for (i = int(s); i < int(e); i++)
#define ALL(c) (c).begin(), (c).end()
#define ALLR(c) (c).rbegin(), (c).rend()

#define INF 1070000000LL
#define MOD 1000000007LL
#define EPS 1e-9

typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
typedef pair<int, int> PI;

VI pa, ca, fa ;
int solve (int pos, int P, int C, int F);

int main() {
	int i, j, T, N, P, C, F ;

	cin >> T ;
	for (i = 0; i < T; i++){
		cin >> P >> C >> F ;
		cin >> N ;
		pa.clear() ;
		ca.clear();
		fa.clear();
		for (j = 0; j < N; j++){
			int p, c, f ;
			cin >> p >> c >> f ;
			pa.push_back((p));
			ca.push_back(c);
			fa.push_back(f);
		}
		int poss = solve (0, P, C, F) ;
		if (poss)
			cout << "Case #" << i+1 << ": yes" << endl ;
		else
			cout << "Case #" << i+1 << ": no" << endl ;
	}
	return 0;
}

int solve (int pos, int P, int C, int F){
	if (P == 0 && C == 0 && F == 0)
		return 1 ;
	if (P < 0 || C < 0 || F < 0 || pos == pa.size())
		return 0 ;


	return solve (pos+1, P-pa[pos], C-ca[pos], F-fa[pos]) |
			solve (pos+1, P, C, F) ;
}




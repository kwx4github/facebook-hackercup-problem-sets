#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 20 + 3;
int n;
pair<pt, int> targ, a[N];

inline void read(pair<pt, int>& a)
{
	int x, y, z;
	assert(scanf ("%d%d%d", &x, &y, &z) == 3);
	
	a = mp(mp(x, y), z);
}

inline bool read()
{
	read(targ);
	
	if (scanf ("%d", &n) != 1)
		return false;
		
	forn (i, n)
		read(a[i]);

	return true;
}

inline pair<pt, int> operator + (const pair<pt, int>& a, const pair<pt, int>& b) { return mp(mp(a.ft.x + b.ft.x, a.ft.y + b.ft.y), a.sc + b.sc); }

inline void solve(int test)
{
	printf ("Case #%d: ", test + 1);
	
	for (int mask = 0; mask < (1 << n); mask++)
	{
		pair<pt, int> cur = mp(mp(0, 0), 0);
		
		forn (i, n)
			if ((mask >> i) & 1)
				cur = cur + a[i];
				
		if (cur == targ)
		{
			puts("yes");
			return;
		}	
	}
	
	puts("no");
}

int main()
{
#ifdef SU2_PROJ
	assert(freopen("input.txt", "r", stdin));
	assert(freopen("output.txt", "w", stdout));
#endif

	cout << setprecision(25) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));
	
	int testCnt;
	assert(scanf ("%d", &testCnt) == 1);

	forn (test, testCnt)
	{
		assert(read());
		solve(test);
	}

#ifdef SU2_PROJ
	cerr << "TIME: " << clock() << endl;
#endif

	return 0;
}

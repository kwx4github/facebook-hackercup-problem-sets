# include <stdio.h>
# include <limits.h>

#include <list>
#include <vector>
 
#include <iostream>
using namespace std;
#include <math.h> 
#include <string>
#ifndef ONLINE_JUDGE
    #define getcx getchar
#else
    #define getcx getchar_unlocked
#endif
#define MOD 1000000007

#include <fstream>
 
 
inline int inp ()
{
   int n=0;
   int ch=getcx();
   int sign = 1;
   while( ch < '0' || ch > '9' )
   {
     if(ch=='-')
     {
        sign=-1;
     }
     ch=getcx();
   }
   while(  ch >= '0' && ch <= '9' )
       n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   n=n*sign;
   return n; 
}


inline long long inpLong()
{
   long long n = 0;
   int ch = getcx();
   int sign = 1;
   while( ch < '0' || ch > '9' )
   {
       if(ch=='-')
       {
           sign=-1;
       }
       ch=getcx();
   }
   while(  ch >= '0' && ch <= '9' )
   {
       n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   }
   n=n*sign;
   return n;
}

bool isExact(list<list<int> > foods, int Gp, int Gc, int Gf);

int getNumberOfDigits(long long number);    

long long getNumber(int* Acopy, int digits);

    
int main()
{
	ifstream fin ("new_years_resolution.txt");
	
	ofstream fout ("output1.txt");
		
	
	if (fin.is_open())
	{
		int T;
		
		int Gp, Gc, Gf, P, C, F, N;
		
		fin>>T;
		
		
	    for (int i = 0; i<T; i++)
        {
        	fin>>Gp>>Gc>>Gf;
        	
        	fin>>N;
        	
        	//cout<<Gp<<" "<<Gc<<" "<<Gf<<" "<<N<<endl;
        	
        	list<list<int> > foods ;
        	
        	for (int j = 0; j<N; j++)
        	{
        		fin>>P>>C>>F;
        		
        		//cout<<P<<" "<<C<<" "<<F<<" "<<endl;
        		
        		list<int> food;         
			    food.push_back(P);        
			    food.push_back(C);       
			    food.push_back(F);  
				
				foods.push_back(food);      
				
				
        		
			}       
			//cout<<"Foods constructed"<<endl;
			
			if (isExact(foods, Gp, Gc, Gf) == true)
			{
				fout<<"Case #"<<(i+1)<<":"<<" "<<"yes"<<endl;     
			}
        	else
        	{
        		fout<<"Case #"<<(i+1)<<":"<<" "<<"no"<<endl; 
			}
        }
    }
    
    else cout << "Unable to open file"; 
  
    fin.close();
    fout.close();
    
    cin.get();
	cin.ignore();
	return 0; 	
}


bool isExact(list<list<int> > foods, int Gp, int Gc, int Gf)
{
	if (Gp == 0 && Gc == 0 && Gf == 0)
	{
		return true;
	}
	
	// If foods list is empty, then return false
	
	if (foods.empty() == true)
	{
		return false;
	}
	
	list<int> food = foods.back();
	foods.pop_back();
	
	list<int>::iterator it;
	
	int i =0;
	
	int P, C, F;  
	
	
	for(it = food.begin(); it != food.end(); ++it)
    {
    	if (i == 0)
    	{
    		P = *it;
		}
		else if (i == 1)
    	{
    		C = *it;
		}
		else if (i == 2)
    	{
    		F = *it;
		}
		i++;
    }
    
    //cout<<P<<" "<<C<<" "<<F<<" "<<endl;

	if ( (P > Gp) || (C > Gc) || (F > Gf)  )
	{
		return isExact(foods, Gp, Gc, Gf) ;
	}
	
	return isExact(foods, Gp - P, Gc - C, Gf - F) || isExact(foods, Gp, Gc, Gf); 
	
}


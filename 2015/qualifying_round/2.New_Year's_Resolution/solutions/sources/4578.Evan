package za.co.knonchalant.hackercup2014;

import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static java.nio.file.Files.readAllBytes;
import static java.nio.file.Paths.get;

public class NewYear {

    public static final String FILENAME = "C:\\Users\\User\\Downloads\\new_years_resolution.txt";

    @Test
    public void doIt() throws IOException {
        String input = new String(readAllBytes(get(FILENAME)));
        String[] lines = input.replaceAll("\r", "").split("\n");

        int currCase = 1;
        for (int i = 1; i < lines.length; ) {

            Nutrients target = new Nutrients(lines[i++]);
            Nutrients start = new Nutrients("0 0 0");

            int foods = Integer.parseInt(lines[i++]);
            List<Nutrients> allFoods = new ArrayList<Nutrients>();

            for (int j = 0; j < foods; j++) {
                allFoods.add(new Nutrients(lines[i++]));
            }

            boolean valid = makeUp(target, start, allFoods);

            System.out.printf("Case #%d: %s%n", currCase++, valid ? "yes" : "no");
        }
    }

    private boolean makeUp(Nutrients target, Nutrients current, List<Nutrients> allFoods) {
        if (current.greaterThan(target)) {
            return false;
        }

        for (Nutrients nutrient : allFoods) {
            Nutrients result = current.add(nutrient);
            if (result.equalTo(target)) {
                return true;
            }

            if (makeUp(target, result, remove(allFoods, nutrient))) {
                return true;
            }
        }

        return false;
    }

    public List<Nutrients> remove(List<Nutrients> list, Nutrients item) {
        ArrayList<Nutrients> result = new ArrayList<>(list);
        result.remove(item);
        return result;
    }

    private class Nutrients {
        private int p, c, f;

        public Nutrients(int p, int c, int f) {
            this.p = p;
            this.c = c;
            this.f = f;
        }

        public Nutrients(String input) {
            String[] numbers = input.split(" ");

            this.p = Integer.parseInt(numbers[0]);
            this.c = Integer.parseInt(numbers[1]);
            this.f = Integer.parseInt(numbers[2]);
        }

        public boolean greaterThan(Nutrients nutrient) {
            return this.p > nutrient.p || this.c > nutrient.c || this.f > nutrient.f;
        }

        public boolean equalTo(Nutrients nutrient) {
            return this.p == nutrient.p && this.c == nutrient.c && this.f == nutrient.f;
        }

        public Nutrients add(Nutrients nutrient) {
            return new Nutrients(this.p + nutrient.p, this.c + nutrient.c, this.f + nutrient.f);
        }

        @Override
        public String toString() {
            return p +
                    " " + c +
                    " " + f;
        }
    }
}

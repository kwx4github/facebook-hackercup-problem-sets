#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <numeric>
#include <tuple>
#include <climits>

#define INF 1023456789
#define SQR(x) ((x)*(x))
#define INIT(x,y) memset((x),(y),sizeof((x)))
#define SIZE(x) ((int)((x).size()))
#define REP(i, n) for (__typeof(n) i=0;i<(n);++i)
#define FOR(i, a, b) for (__typeof(a) i=(a);i<=(b);++i)
#define FORD(i, a, b) for (__typeof(a) i=(a);i>=(b);--i)
#define FORE(it, c) for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

#define DEBUG
#ifdef DEBUG
#define DBG(x) cerr << #x << ": " << (x) << endl;
#else
#define DBG(x)
#endif

using namespace std;
 
typedef long long LL;
typedef pair<int,int> PI;
typedef tuple<int,int,int>trio;

struct food
{
	int p,c,f;

	food(int _p=0,int _c=0,int _f=0)
	{
		p = _p;
		c = _c;
		f = _f;
	}

	void add(food food)
	{
		p += food.p;
		c += food.c;
		f += food.f;
	}
};

inline void solve(int t)
{
	int P,C,F,N;
	cin >> P >> C >> F >> N;
	food f[50];
	REP(i,N) cin >> f[i].p >> f[i].c >> f[i].f;
	REP(i,1 << N)
	{
		food sum = food(0,0,0);
		REP(j,N) 
			if (i & (1 << j)) sum.add(f[j]);
		if (sum.p==P && sum.c==C && sum.f==F) 
		{
			cout << "Case #" << t << ": yes\n"; 
			return;
		}
	}
	cout << "Case #" << t << ": no\n"; 
}

int main()
{
	int T;
	cin >> T;
	REP(i,T) solve(i+1);
        return 0;
}

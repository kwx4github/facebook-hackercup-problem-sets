import sys

def ksum(K, nums):
    sys.setrecursionlimit(10000)
    result_set = set()
    def _dfs(selected, i):
        i+=1
        if sum([v for _,v in selected]) == K:
            result_set.add(''.join([str(i) for i,_ in selected]) )
            return
        if i > len(nums):
            return
        s = list(selected)
        _dfs(s, i)
        selected.append((i-1, nums[i-1]))
        _dfs(selected, i)
    _dfs([],0)
    return result_set

def solve(P,C,F,N,foods):
    #print 'P=%(P)d C=%(C)d F=%(F)d N=%(N)d' % locals()
    #print 'foods=' + str(foods)
    
    Pset = ksum(P,[p for p,_,_ in foods])
    if not Pset:
        return False
    Cset = ksum(C,[c for _,c,_ in foods])
    if not (Pset & Cset):
        return False
    Fset = ksum(F,[f for _,_,f in foods])
    return Pset & Cset & Fset

if __name__ == '__main__':
    with open(sys.argv[1]) as f:
        cases = f.readline()
        for i in range(0,int(cases)):
            P, C, F = (int(n) for n in f.readline().rstrip().split(' '))
            N = int(f.readline().rstrip())
            foods = []
            for n in range(0, N):
                pp, cc, ff = (int(d) for d in f.readline().rstrip().split(' '))
                foods.append((pp, cc, ff))
            if solve(P, C, F, N, foods):
                print 'Case #%d: yes' % (i+1)
            else:
                print 'Case #%d: no' % (i+1)
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class NewYearResolution {

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new FileReader("Y:\\chrome\\new_years_resolution.txt"));
		int size = Integer.parseInt(br.readLine());
		for (int x = 0; x < size; x++) {
			String line = br.readLine();
			Node g = new Node(line);
			int numFood = Integer.parseInt(br.readLine());
			List<Node> l = new ArrayList<Node>();
			for(int i = 0; i< numFood; i++){
				l.add(new Node(br.readLine()));
			}
			String result = solve(g, l)? "yes" :"no";
			System.out.println("Case #" + (x+1) + " " + result );
		}

		Node goal = new Node(100, 100, 100);
//		40 70 30
//		30 10 40
//		20 20 50
//		10 50 90
//		40 10 20
//		292 264 512
		Node n = new Node("40 70 30");
		Node n1 = new Node("30 10 40");
		Node n2 = new Node("20 20 50");
		Node n3 = new Node("10 50 90");
		Node n4 = new Node("40 10 20");

		List<Node> l = new ArrayList<Node>(Arrays.asList(n, n1, n2, n3, n4));
		boolean r = solve(goal, l);
		//System.out.println(r);

	}

	public static boolean solve(Node goal, List<Node> list) {
		for (Node n : list) {
			if (goal.equals(n)) {
				return true;
			}
			List<Node> remaining = new ArrayList<Node>(list);
			remaining.remove(n);
			if (recurse(new Node(n.a, n.b, n.c), goal, remaining)) {
				return true;
			}
		}
		return false;
	}

	public static boolean recurse(Node sofar, Node goal, List<Node> remaining) {
//		System.out.println(sofar);
//		System.out.println(remaining);
		for (Node n : remaining) {
			Node m = sofar.add(n);
			if (m.equals(goal)) {
//				System.out.println("returning true");
				return true;
			}
			if (m.a > goal.a || m.b > goal.b || m.c > goal.c) {
				continue;
			} else {
				List<Node> list = new ArrayList<Node>(remaining);
				list.remove(n);
				if(recurse(m, goal, list)){
					return true;
				}
			}
		}
		return false;
	}

	public static class Node {
		public int a;
		public int b;
		public int c;
		
		public Node(String s){
			String[] ar = s.split(" ");
			if(ar.length != 3){
				throw new RuntimeException();
			}
			a = new Integer(ar[0]);
			b = new Integer(ar[1]);
			c = new Integer(ar[2]);
		}

		public Node(int a, int b, int c) {
			this.a = a;
			this.b = b;
			this.c = c;
		}

		public Node add(Node n) {
			return new Node(this.a + n.a, this.b + n.b, this.c + n.c);
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj) {
				return true;
			}
			if (!(obj instanceof Node)) {
				return false;
			}
			Node n = (Node) obj;
			if (n.a == this.a && n.b == this.b && n.c == this.c) {
				return true;
			}
			return false;
		}
		
		@Override
		public String toString(){
			return "{" + a +  " " + b + " " + c +"}";
		}
	}
}

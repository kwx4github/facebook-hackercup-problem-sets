using System;
using System.Collections.Generic;
using System.Linq;

namespace hackercup
{
    class Program
    {
        private static void Main(string[] args)
        {
            var cCase = FetchInt();
            for (var iCase = 0; iCase < cCase; iCase++)
            {
                var dstFood = FetchInts();
                var cFood = FetchInt();
                var rgsrcFood = new List<int[]>();
                for (var iFood = 0; iFood < cFood; iFood++)
                    rgsrcFood.Add(FetchInts());
                Solve(iCase+1, dstFood, rgsrcFood);
            }
        }

        private static int FetchInt()
        {
            return FetchInts().Single();
        }

        private static int[] FetchInts()
        {
            var st = Console.ReadLine();
            return st.Trim().Split(' ').Select(int.Parse).ToArray();
        }

        private static void Solve(int iCase, int[] dstFood, List<int[]> rgsrcFood)
        {
            if(SolveRecursive(dstFood, rgsrcFood, 0))
                Console.WriteLine("Case #{0}: yes", iCase);
            else
                Console.WriteLine("Case #{0}: no", iCase);
        }

        private static bool SolveRecursive(int[] dstFood, List<int[]> rgsrcFood, int isrc)
        {
            if (Empty(dstFood))
                return true;
            if (isrc == rgsrcFood.Count)
                return false;

            if (CanEat(dstFood, rgsrcFood[isrc]) && SolveRecursive(Eat(dstFood, rgsrcFood[isrc]), rgsrcFood, isrc + 1))
                return true;

            return SolveRecursive(dstFood, rgsrcFood, isrc + 1);
        }

        private static bool Empty(int[] food)
        {
            return food.All(i => i == 0);
        }
        
        private static bool CanEat(int[] foodLimit, int[] food)
        {
            return foodLimit.Zip(food, (gA, gB) => gA >= gB).All(b => b);
        }

        private static int[] Eat(int[] foodLimit, int[] food)
        {
            return foodLimit.Zip(food, (gA, gB) => gA - gB).ToArray();
        }
    }
}

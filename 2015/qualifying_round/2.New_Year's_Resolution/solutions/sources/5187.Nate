def fcompute(v, i, S, memo):
  if i >= len(v): return 1 if S == 0 else 0
  if (i, S) not in memo:  # <-- Check if value has not been calculated.
    count = fcompute(v, i + 1, S, memo)
    count += fcompute(v, i + 1, S - v[i], memo)
    memo[(i, S)] = count  # <-- Memoize calculated result.
  return memo[(i, S)]     # <-- Return memoized value.

def g(v, S, memo):
  subset = []
  for i, x in enumerate(v):
    # Check if there is still a solution if we include v[i]
    if fcompute(v, i + 1, S - x, memo) > 0:
      subset.append(x)
      S -= x
  return subset


def gAll(v, S, i, memo):
  subset = []
  #include i'th item.
  
  if S == v[i]: return [[i]]
  if S == 0: return [[]]
  if i == len(v): return [[]]
  
  if fcompute(v, i + 1, S - v[i], memo) > 0:
      for each in gAll(v, S - v[i], i+1, memo):
        each.append(i)	  
        subset.append(each)
  if fcompute(v, i + 1, S, memo) > 0:
      subset.extend(gAll(v, S, i + 1, memo))
  #find all without including ith item.	  
  return subset
  
  
def checkOhters(ans, ingredients, p, f):
	for each in ans:
		fsum, psum = 0, 0
		for index in each:
			fsum += ingredients[index][2]
			psum += ingredients[index][1]
		#print fsum, psum	
		if fsum == f and psum == p:
			return 'yes'
	return 'no'

def solve(ingredients, c, fat, p):
	carb = [each[0] for each in ingredients]
	memo = {}
	fcompute(carb, 0, c, memo)
	ans = gAll(carb, c, 0, memo)
	return checkOhters(ans, ingredients, fat, p)

inputfile = open('new_years_resolution.txt', 'r')
q = open('output.txt' , 'w')

n = int(inputfile.readline())
for i in range(n):
	l = map(int, inputfile.readline().rstrip().split())
	#print l
	c,fat,p = l[0], l[1], l[2]
	num = int(inputfile.readline())
	ing = []
	for _ in range(num):
		ing.append(map(int, inputfile.readline().rstrip().split()))
	#print ing
	ans = 'Case #' + str(i + 1) + ': ' + solve(ing, c, fat, p) + '\n'
	if i == n - 1: ans.rstrip()
	q.write(ans)
q.close()

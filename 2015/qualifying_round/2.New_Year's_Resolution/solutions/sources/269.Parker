#include <iostream>
#include <algorithm>
using namespace std;

class Food {
public:
	int p, c, f;
	bool operator<(const Food& another) const {
		return p < another.p;
	}
};

Food food[21];

int N;

bool dfs(int i, int Gp, int Gc, int Gf) {
	if (Gp == 0 && Gc == 0 && Gf == 0) return true;
	if (i == N) return false;
	if (Gp >= food[i].p && Gc >= food[i].c && Gf >= food[i].f && dfs(i + 1, Gp - food[i].p, Gc - food[i].c, Gf - food[i].f)) {
		return true;
	}
	if (Gp < food[i].p) return false;
	return dfs(i + 1, Gp, Gc, Gf);
}

int main() {
	// your code goes here
	int T;
	cin >> T;
	for (int cas = 1; cas <= T; cas++) {
		int Gp, Gc, Gf;
		cin >> Gp >> Gc >> Gf;
		cin >> N;
		for (int i = 0; i<N; i++) {
			cin >> food[i].p >> food[i].c >> food[i].f;
		}
		sort(food, food + N);
		cout << "Case #" << cas << ": ";
		if (dfs(0, Gp, Gc, Gf)) {
			cout << "yes" << endl;
		}
		else {
			cout << "no" << endl;
		}
	}
	return 0;
}
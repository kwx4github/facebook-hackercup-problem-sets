from operator import add, sub
from bisect import bisect_left

t = input()
for test in range(t):
	total = map(int, raw_input().split())
	N = input()
	li = []
	sum1 = []
	sum2 = []
	
	for i in range(N):
		li.append(map(int, raw_input().split()))	
	
	for i in range(1L << (N / 2)):
		sm = [0, 0, 0]
		bitmap = str(bin(i))[2:][::-1]
		for j, bit in enumerate(bitmap):
			if bit == '1':
				sm = map(add, li[j], sm)
		sum1.append(sm)
	
	for i in range(1L << (N - N / 2)):
		sm = [0, 0, 0]
		bitmap = str(bin(i))[2:][::-1]
		for j, bit in enumerate(bitmap):
			if bit == '1':
				sm = map(add, li[N/2 + j], sm)
		sum2.append(sm)

	sum2.sort()

	found = False
	for elem in sum1:
		elem = map(sub, total, elem)
		idx = bisect_left(sum2, elem)
		if idx != len(sum2) and sorted(sum2[idx]) == sorted(elem):
			found = True
			break
	val = 'no'
	if found == True:
		val = 'yes'
		
	print "Case #%d: %s" % (test+1,val)
			

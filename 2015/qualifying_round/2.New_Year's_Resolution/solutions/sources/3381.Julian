import Control.Monad
import Data.List.Split
import Data.List




makeOutput :: [TestCase] -> String
makeOutput cases =	foldr (++) "" $map (\(a,x) -> "Case #" ++ (show a) ++ ": " ++ (yesno x) ++ "\n") out
	where
		out :: [(Int, Bool)]
		out = zip [1..(length cases)] (map isPossible cases) 
		yesno x = if x then "yes" else "no"

data Nutrition = Nutrition Integer Integer Integer
readNut :: String -> Nutrition
readNut str = Nutrition (l!!0) (l!!1) (l!!2) 
	where
		l = map read (splitOn " " str)  
data TestCase = TestCase Nutrition [Nutrition]

sublists [] = [[]]
sublists (x:xs) = [x:sublist | sublist <- sublists xs] ++ sublists xs

isPossible :: TestCase -> Bool
isPossible (TestCase target l) = any (goodSum target) (sublists l)
	where
		goodSum :: Nutrition -> [Nutrition] -> Bool
		goodSum (Nutrition 0 0 0) _ = True
		goodSum (Nutrition a b c) [] = False
		goodSum (Nutrition a b c) ((Nutrition x y z):xs) = goodSum (Nutrition (a-x) (b-y) (c-z)) xs 
main = do
	n <- getLine
	inputs <- replicateM (read n) getTestCase
	putStr $makeOutput inputs
getTestCase = do
	nutstr <- getLine
	n <- getLine
	nutlist <- replicateM (read n) getLine
	return (TestCase (readNut nutstr) (map readNut nutlist))

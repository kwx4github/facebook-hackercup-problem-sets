import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Resolution {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        final int testCaseCount = Integer.parseInt(br.readLine());

        for (int t = 1; t <= testCaseCount; t++) {

            String[] target = br.readLine().split(" ");
            FoodContent targetContent = new FoodContent(
                    Integer.parseInt(target[0]),
                    Integer.parseInt(target[1]),
                    Integer.parseInt(target[2]));

            final int foodCount = Integer.parseInt(br.readLine());

            FoodContent[] food = new FoodContent[foodCount];
            for (int f = 0; f < foodCount; f++) {
                String[] tokens = br.readLine().split(" ");
                food[f] = new FoodContent(
                        Integer.parseInt(tokens[0]),
                        Integer.parseInt(tokens[1]),
                        Integer.parseInt(tokens[2]));
            }

            boolean result = eat(targetContent, food, 0, new FoodContent(0,0,0));


            if (result) {
                System.out.println("Case #" + t + ": yes");
            } else {
                System.out.println("Case #" + t + ": no");
            }

        }
    }

    private static boolean eat(FoodContent target, FoodContent[] food, int num, FoodContent foodSum) {

        if (foodSum.compareTo(target) > 0) return false;
        if (foodSum.equals(target)) return true;
        if (num == food.length) return false;

        // in every step try to eat or not eat the given food
        return eat(target, food, num + 1, new FoodContent(foodSum, food[num])) || // eat
                eat(target, food, num + 1, foodSum); // not eat

    }

    private static class FoodContent implements Comparable<FoodContent> {

        private int protein;
        private int carbohydrates;
        private int fat;

        private FoodContent(int protein, int carbohydrates, int fat) {
            this.protein = protein;
            this.carbohydrates = carbohydrates;
            this.fat = fat;
        }

        private FoodContent(FoodContent a, FoodContent b) {
            this.protein = a.getProtein() + b.getProtein();
            this.carbohydrates = a.getCarbohydrates() + b.getCarbohydrates();
            this.fat = a.getFat() + b.getFat();
        }

        public int getProtein() {
            return protein;
        }

        public void setProtein(int protein) {
            this.protein = protein;
        }

        public int getCarbohydrates() {
            return carbohydrates;
        }

        public void setCarbohydrates(int carbohydrates) {
            this.carbohydrates = carbohydrates;
        }

        public int getFat() {
            return fat;
        }

        public void setFat(int fat) {
            this.fat = fat;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            FoodContent that = (FoodContent) o;

            if (carbohydrates != that.carbohydrates) return false;
            if (fat != that.fat) return false;
            if (protein != that.protein) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = protein;
            result = 31 * result + carbohydrates;
            result = 31 * result + fat;
            return result;
        }

        @Override
        public int compareTo(FoodContent o) {
            if (this.equals(o)) {
                return 0;
            } else if (this.protein > o.protein || this.carbohydrates > o.carbohydrates || this.fat > o.fat) {
                return 1;
            }

            return -1;
        }
    }
}

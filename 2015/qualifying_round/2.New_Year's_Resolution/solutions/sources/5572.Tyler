import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.Scanner;


public class NewYearsResolution
{
	private static final String inputPath = "input.txt";
	
	private static final String outputPath = "output.txt";
	
	private static Scanner fileInput;
	
	private static Formatter fileOutput;
	
	private static ArrayList<Integer> proteins,carbs,fats;
	
	private static int targetProtein, targetCarbs, targetFat;

	public static void main(String[] args) 
	{
		try 
		{
			fileInput = new Scanner(new File(inputPath));
			fileOutput = new Formatter(outputPath);
		} 
		catch (FileNotFoundException e) 
		{
			System.out.println("Cannot find file \"input\" in same directory");
			System.exit(0);
		}
		
		int numberOfCases = Integer.parseInt(fileInput.nextLine());
		int numberOfFoods;
		
		for(int i = 0;i < numberOfCases;i++)
		{
			fileOutput.format("Case #%d: ", i + 1);
			targetProtein = fileInput.nextInt();
			targetCarbs = fileInput.nextInt();
			targetFat = fileInput.nextInt();
			
			numberOfFoods = fileInput.nextInt();
			
			proteins = new ArrayList<Integer>(numberOfFoods);
			carbs = new ArrayList<Integer>(numberOfFoods);
			fats = new ArrayList<Integer>(numberOfFoods);
			
			for(int food = 0;food < numberOfFoods;food++)
			{
				proteins.add(fileInput.nextInt());
				carbs.add(fileInput.nextInt());
				fats.add(fileInput.nextInt());
			}
			
			int root;
			
			for(root = 0;root < numberOfFoods;root++)
			{
				if(backtrack(0,0,0,root))
					break;
			}
			
			if(root < numberOfFoods)
				fileOutput.format("yes\n");
			else
				fileOutput.format("no\n");
		}
		
		fileOutput.close();
		fileInput.close();
	}
	
	private static boolean backtrack(int proteinSum, int carbSum, int fatSum, int index)
	{
		if(index == proteins.size())
		{
			if(proteinSum != targetProtein || carbSum != targetCarbs || fatSum != targetFat)
				return false;
			else 
				return true;
		}
		
		if(proteinSum == targetProtein && carbSum == targetCarbs && fatSum == targetFat)
			return true;
		
		if(proteinSum > targetProtein || carbSum > targetCarbs || fatSum > targetFat)
			return false;
		
		for(int i = index;i < proteins.size();i++)
		{
			proteinSum += proteins.get(index);
			carbSum += carbs.get(index);
			fatSum += fats.get(index);
			
			if(backtrack(proteinSum,carbSum,fatSum,i + 1))
				return true;
			proteinSum -= proteins.get(index);
			carbSum -= carbs.get(index);
			fatSum -= fats.get(index);
		}
		
		return false;
	}
	
}

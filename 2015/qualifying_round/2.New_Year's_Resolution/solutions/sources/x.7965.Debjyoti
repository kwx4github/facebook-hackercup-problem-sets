#include<stdio.h>
#include<malloc.h>
int *parr,*carr,*farr,flag,gp,gc,gf;
main()
{
	int a=0,t;
	scanf("%d",&t);
	for(a=0;a<t;a++)
	{
		printf("CASE #%d:- ",a+1);
		int n,i,j,k;
		scanf("%d %d %d",&gp,&gc,&gf);
		scanf("%d",&n);
		parr=malloc(n*sizeof(int));
		carr=malloc(n*sizeof(int));
		farr=malloc(n*sizeof(int));
		for(i=0;i<n;i++)
		{
			scanf("%d %d %d",&parr[i],&carr[i],&farr[i]);
		}
		flag=0;
		for(i=1;i<=n;i++)
		{
			int data[i];
			combinationUtil(parr,data,0,n-1,0,i);
			if(flag) break;
		}
		if(!flag) printf("no\n");
		free(parr);
		free(carr);
		free(farr);
	}
	return(0);
}
void combinationUtil(int arr[], int data[], int start, int end, int index, int r)
{
    // Current combination is ready to be printed, print it
    int i,j;
    if (index == r)
    {
    	int psum=0,csum=0,fsum=0;
        for (j=0; j<r; j++)
		{
			psum+=parr[data[j]];
			csum+=carr[data[j]];
			fsum+=farr[data[j]];
		} 
		//printf("%d %d %d %d %d %d\n",psum,csum,fsum,gp,gc,gf);
		if(psum==gp && csum==gc && fsum==gf)
		{
			flag=1;
			printf("yes\n");
			return;
		}
        //printf("%d ", data[j]);
        //printf("\n");
        return;
    }
 
    // replace index with all possible elements. The condition
    // "end-i+1 >= r-index" makes sure that including one element
    // at index will make a combination with remaining elements
    // at remaining positions
    for (i=start; i<=end && end-i+1 >= r-index; i++)
    {
        data[index] = i;//arr[i];
        combinationUtil(arr, data, i+1, end, index+1, r);
        if(flag) return;
    }
}

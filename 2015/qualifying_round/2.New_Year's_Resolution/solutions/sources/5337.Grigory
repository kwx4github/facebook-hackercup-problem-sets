import java.util.*;
import java.io.*;

public class TaskB {
    private FastScanner in;
    private PrintWriter out;

    public void solve() throws IOException {
        int t = in.nextInt();
        for (int test = 0; test < t; test++) {
            int p = in.nextInt(), c = in.nextInt(), f = in.nextInt();
            int n = in.nextInt();
            int[] pp = new int[n];
            int[] cc = new int[n];
            int[] ff = new int[n];

            for (int i = 0; i < n; i++) {
                pp[i] = in.nextInt();
                cc[i] = in.nextInt();
                ff[i] = in.nextInt();
            }
            boolean ok = false;
            for (int i = 0; i < (1 << n); i++) {
                int curp = 0, curc = 0, curf = 0;
                for (int j = 0; j < n; j++) {
                    if (((1 << j) & i) != 0) {
                        curp += pp[j];
                        curc += cc[j];
                        curf += ff[j];
                    }
                }
                if (curp == p && curc == c && curf == f) {
                    ok = true;
                    break;
                }
            }
            out.println("Case #" + (test + 1) + ": " + (ok ? "yes" : "no"));
        }
    }

    public void run() {
        try {
            in = new FastScanner(new File("input.txt"));
            out = new PrintWriter(new File("output.txt"));
            solve();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private class FastScanner {
        private BufferedReader br;
        private StringTokenizer st;

        public FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        public String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    public static void main(String[] arg) {
        new TaskB().run();
    }
}
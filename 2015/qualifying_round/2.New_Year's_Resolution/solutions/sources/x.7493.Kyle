#!/usr/bin/env python

def getRipUnwantFood(macronutrients_want, foods):
    Gp, Gc, Gf = macronutrients_want.split()
    Gp, Gc, Gf = int(Gp), int(Gc), int(Gf)
    new_foods = []

    for food in foods:
        p, c, f = food.split()
        p, c, f = int(p), int(c), int(f)
        if p <= Gp and c <= Gc and f <= Gf:
            new_foods.append((p, c, f))
    return ((Gp, Gc, Gf), new_foods)

def compareNutrient(utrients_want, food_list):
    Gp, Gc, Gf = utrients_want

    for i in range(len(food_list)):
        foods = food_list[i]

        p, c, f = 0, 0, 0
        for food in foods:
            p += food[0]
            c += food[1]
            f += food[2]
        if Gp == p and Gc == c and Gf == f:
            return True
    return False


def foodsMeetNutrient(macronutrients_want, foods):
    nutrients, new_foods = getRipUnwantFood(macronutrients_want, foods)
    Gp, Gc, Gf = nutrients
    smallest_nutrient_index = 0
    if Gc < Gp and Gc < Gf:
        smallest_nutrient_index = 1
    elif Gf < Gp and Gf < Gc:
        smallest_nutrient_index = 2

    target_nutrient = nutrients[smallest_nutrient_index]
    food_nutrients = sorted([food for food in new_foods], reverse=True, key=lambda x: x[smallest_nutrient_index])

    all_possible_foods = []

    if len(food_nutrients) == 1:
        all_possible_foods.append(food_nutrients)
    else:
        for i in range(len(food_nutrients) - 1):
            target_nutrient -= food_nutrients[i][smallest_nutrient_index]
            index = i+1
            while True:
                subset_nutrients = [food_nutrients[i]]
                subtarget_nutrient = target_nutrient
                for j in range(index, len(food_nutrients)):
                    if subtarget_nutrient >= food_nutrients[j][smallest_nutrient_index]:
                        subset_nutrients.append(food_nutrients[j])
                        subtarget_nutrient -= food_nutrients[j][smallest_nutrient_index]
                    if subtarget_nutrient == 0:
                        if subset_nutrients not in all_possible_foods:
                            all_possible_foods.append(subset_nutrients)
                        break
                index += 1
                if index >= len(food_nutrients): break
            target_nutrient = nutrients[smallest_nutrient_index]

    return compareNutrient(nutrients, all_possible_foods)


if __name__ == '__main__':
    import sys

    if len(sys.argv) != 2:
        raise Exception("USAGE: python new_year_resolution.py 'input file'")

    f = open(sys.argv[1])
    lines = f.readlines()
    f.close()

    f = open('out.txt', 'w')

    T = int(lines.pop(0))
    for test_case in range(T):
        macronutrients_want = lines.pop(0)
        N = int(lines.pop(0))
        foods = lines[:N]
        lines = lines[N:]

        meetNutrient = 'no'
        if foodsMeetNutrient(macronutrients_want, foods):
            meetNutrient = 'yes'
        result = 'Case #%d: %s' % (test_case+1, meetNutrient)
        print result
        f.write(result + '\n')
    f.close()

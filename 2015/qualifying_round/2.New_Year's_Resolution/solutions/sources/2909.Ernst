using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace FacebookHackerCup2015
{
	internal class Program
	{
		private static void Main(string[] args)
		{
			Stopwatch sw = new Stopwatch(); sw.Start();
			// 1: cooking the books

			// vars
			string inputFile = @"E:\Ernst\Code Projects\FacebookHackerCup2015\FacebookHackerCup2015\files\qual-2.txt";
			string outputFile = @"E:\Ernst\Code Projects\FacebookHackerCup2015\FacebookHackerCup2015\files\qual-2-answer.txt";

			List<string> output = new List<string>();
			// read inputfile
			string[] lines = System.IO.File.ReadAllLines(inputFile);
			int testCases = Convert.ToInt32(lines[0]);
			int curLine = 1;
			
			// do some voodoo
			for (int i = 1; i <= testCases; i++)
			{
				// parse input
				int[] goal = Array.ConvertAll(lines[curLine].Split(' '), a=>Convert.ToInt32(a)); // goal[0] = p, goal[1] = c, goal[2]=f
				int selection = Convert.ToInt32(lines[curLine + 1]);
				int[][] food = new int[selection][]; // save all food in matrix

				var q = new Queue<Tuple<int, int[]>>(); // q(index, total[p,c,f]
				for (int j = 0; j < selection; j++)
				{
					int foodLine = j + curLine + 2;
					int[] foodItems = Array.ConvertAll(lines[foodLine].Split(' '), a => Convert.ToInt32(a));
					food[j] = foodItems;	// lookup
					q.Enqueue(new Tuple<int,int[]>(j, foodItems)); // search
				}

				// seek and ye shall find
				bool found = false;
				while (q.Count > 0) {
					var curQ = q.Dequeue();
					int[] curTotal = curQ.Item2;
					// exit criteria
					if (goal[0] == curTotal[0] && goal[1] == curTotal[1] && goal[2] == curTotal[2]) { found = true; break; }
					
					// else iterate further
					for (int j = curQ.Item1+1; j < selection; j++)
					{
						int p = curTotal[0] + food[j][0];
						int c = curTotal[1] + food[j][1];
						int f = curTotal[2] + food[j][2];
						// constraint check (early leave)
						if (p < 1001 && c < 1001 && f < 1001) {
							q.Enqueue(new Tuple<int, int[]>(j, new int[]{p,c,f})); // search
						}
					}
				}
				curLine += selection + 2;

				// output
				string sFound = found ? "yes" : "no";

				output.Add(String.Format("Case #{0}: {1}", i, sFound));
				Console.Out.WriteLine(String.Format("Case #{0}: {1}", i, sFound));
			}

			// write outputfile
			System.IO.File.WriteAllLines(outputFile, output);

			// End program, ran in 2 ms
			sw.Stop(); Console.Out.WriteLine("DONE! in {0} ms, written {1} lines", sw.ElapsedMilliseconds, output.Count()); Console.ReadLine();
		}
	}
}
class Food(object):
	def __init__(self, lst):
		self.protein = int(lst[0])
		self.carbo = int(lst[1])
		self.fat = int(lst[2])

	def __str__(self):
		return "(%d, %d, %d)" % (self.protein, self.carbo, self.fat)

def powerset(contents):
	L = contents[:]
	for i in range(1,1<<len(L)):
		power = []
		for j in range(len(L)):
			if 1<<j&i:
				power.append(L[j])
		yield power	

def Check(contents, Req):
	gen = powerset(contents)
	for p in gen:
		pro = 0
		car = 0
		f = 0
		for fooditem in p:
			pro += fooditem.protein
			car += fooditem.carbo
			f += fooditem.fat
#		print pro," ",
#		print car," ",
#		print f
		if pro == Req[0] and car == Req[1] and f == Req[2]:
			return True
	return False


def PrintFoodArray(contents):
	print "[",
	for food in contents:
		print food,
		print ", ",
	print "]"


f = open('fb.txt', 'r')
write = open('fb_out.txt', 'w')
n = int(f.readline())
for i in range(n):
	Requirements = f.readline()
	Req = Requirements.split()
	intReq = [int(R) for R in Req]
	NofoodItems = int(f.readline())
	contents = []
	for j in range(NofoodItems):
		contents.append(Food(f.readline().split()))
	# print PrintFoodArray(contents)
	# print Req
	if Check(contents, intReq):
		string = "Case #"+str(i+1)+": yes"
	else:
		string = "Case #"+str(i+1)+": no"
	print string
	write.write(string+"\n")

write.close()

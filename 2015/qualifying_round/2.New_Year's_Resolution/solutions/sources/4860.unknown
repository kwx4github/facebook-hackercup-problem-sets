import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;


public class Main {
	static final String INFILE_NAME = "inputfile.txt";
	static final String OUTFILE_NAME = "outputfile.txt";
	
	static File inFile = new File(INFILE_NAME);
	static File outFile = new File(OUTFILE_NAME);
	
	public static void main(String[] args) {

		try (BufferedReader reader = new BufferedReader(new FileReader(inFile));
			Writer writer = new BufferedWriter(new FileWriter(outFile))) 
		{
			int length = Integer.parseInt(reader.readLine());
			for (int i = 1; i <= length; i++){
				System.out.println("Case #" + i + ":");
				Solution sol = new Solution(reader);
				writer.write("Case #" + i + ": " + sol.solve() + "\n");
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
			
	}
}

class Nutritional {
	int protein, carbohydrates, fat;
	
	public Nutritional(int protein, int carbohydrates, int fat){
		this.protein = protein;
		this.carbohydrates = carbohydrates;
		this.fat = fat;
	}
}

class Food extends Nutritional{
	public Food(int protein, int carbohydrates, int fat){
		super(protein, carbohydrates, fat);
	}
	
	public static Food add(Food... foods){
		int protein = 0;
		int carbohydrates = 0;
		int fat = 0;
		
		for (int i = 0; i < foods.length; i++){
			Food food = foods[i];
			protein += food.protein;
			carbohydrates += food.carbohydrates;
			fat += food.fat;
		}
		
		return new Food(protein, carbohydrates, fat);
	}
}

class Target extends Nutritional {
	public Target(int protein, int carbohydrates, int fat){
		super(protein, carbohydrates, fat);
	}
	
	public boolean check(Nutritional food){
		if (protein == food.protein && carbohydrates == food.carbohydrates && fat == food.fat){
			return true;
		} else {
			return false;
		}
	}
}

class FoodCollection {
	private Food[] foodCollection;
	private int[] indexArray;
	private Target target;
	
	public FoodCollection(Food[] foodArray){
		foodCollection = foodArray;
	}
	
	public boolean check(Target target){
		this.target = target;
		indexArray = new int[foodCollection.length];
		for (int i = 0; i < indexArray.length; i++){
			indexArray[i] = i;
		}
		
		for (int i = 1; i <= indexArray.length; i++){
			int[] subset = new int[i];
			if (testSubsets(subset, 0, 0)){
				return true;
			}
		}
		
		return false;
	}
	
	private boolean testSubsets(int[] subset, int subsetSize, int index){
		if (subsetSize == subset.length){
			Food[] foodSubset = new Food[subset.length];
			for (int i = 0; i < subset.length; i++){
				foodSubset[i] = foodCollection[subset[i]];
			}
			if (target.check(Food.add(foodSubset))){
				System.out.println(arrayPrint(subset));
				return true;
			}
			return target.check(Food.add(foodSubset));
		} else {
			for (int i = index; i < indexArray.length; i++){
				subset[subsetSize] = i;
				if (testSubsets(subset, subsetSize + 1, i + 1)){
					return true;
				}
			}
			return false;
		}
	}
	
	private String arrayPrint(int[] array){
		StringBuilder sb = new StringBuilder();
		sb.append("{");
		for (int i = 0; i < array.length; i++){
			if (i != array.length - 1){
				sb.append(array[i] + ", ");
			} else {
				sb.append(array[i] + "}");
			}
		}
		return sb.toString();
	}
}
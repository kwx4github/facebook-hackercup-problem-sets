//
//  main.cpp
//  Problem2
//
//  Created by Maxim Piskunov on 1/9/15.
//  Copyright (c) 2015 Maxim Piskunov. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <string>

using namespace std;

struct input {
    int GP, GC, GF;
    int N;
    vector <int> P;
    vector <int> C;
    vector <int> F;
};

struct output {
    bool possibleQ;
};

void read(ifstream &in, input &test) {
    in >> test.GP >> test.GC >> test.GF;
    in >> test.N;
    test.P.resize(test.N);
    test.C.resize(test.N);
    test.F.resize(test.N);
    for (int i = 0; i < test.N; i++) {
        in >> test.P[i] >> test.C[i] >> test.F[i];
    }
}

void write(ofstream &out, output test) {
    if (test.possibleQ) out << "yes";
    else out << "no";
}

output solve (input test) {
    output result;
    result.possibleQ = false;
    
    for (int i = 0; i < round(pow(2, test.N)); i++) {
        vector <bool> pattern(test.N);
        int m = i;
        for (int j = 0; j < test.N; j++) {
            if (m % 2 == 0) pattern[j] = false;
            else pattern[j] = true;
            m /= 2;
        }
        
        int p = 0, c = 0, f = 0;
        for (int j = 0; j < pattern.size(); j++) {
            if (pattern[j]) {
                p += test.P[j];
                c += test.C[j];
                f += test.F[j];
            }
        }
        
        if (p == test.GP && c == test.GC && f == test.GF) {
            result.possibleQ = true;
        }
    }
    
    return result;
}

void readAll(vector <input> &tests) {
    ifstream in("../../../../../input.txt");
    
    int T;
    in >> T;
    tests.resize(T);
    for (int i = 0; i < T; i++) {
        read(in, tests[i]);
    }
    
    in.close();
}

void writeAll(vector <output> &results) {
    ofstream out("../../../../../output.txt");
    
    out << "Case #1: ";
    write(out, results[0]);
    for (int i = 1; i < results.size(); i++) {
        out << endl << "Case #" << i+1 << ": ";
        write(out, results[i]);
    }
    
    out.close();
}

void solveAll(vector <input> &tests, vector <output> &results) {
    results.resize(tests.size());
    for (int i = 0; i < tests.size(); i++) results[i] = solve(tests[i]);
}

int main(int argc, const char * argv[]) {
    vector <input> tests;
    vector <output> results;
    
    readAll(tests);
    solveAll(tests, results);
    writeAll(results);
    
    return 0;
}
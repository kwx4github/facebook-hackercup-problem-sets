import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;


public class Resolution {

	/**
	 * @param args
	 * @throws FileNotFoundException 
	 */
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub

		Scanner sc = new Scanner(new File("new_years_resolution.txt"));
		int T = sc.nextInt();
		for (int i = 0; i < T; i++) {
			int[] target = new int[3];
			target[0] = sc.nextInt();
			target[1] = sc.nextInt();
			target[2] = sc.nextInt();
			
			int N = sc.nextInt();
			int[][] contains = new int[N][3];
			for(int j=0;j<N;j++){
				contains[j][0] = sc.nextInt();
				contains[j][1] = sc.nextInt();
				contains[j][2] = sc.nextInt();
			}
			String result = (solve(target, contains, N)) ? "yes" : "no";
			System.out.println("Case #" + (i+1) + ": " + result);
		}
	}
	
	private static boolean solve(int[] target, int[][]contains, int N){
		return dfs(target, contains, 0, N);
	}
	
	private static boolean dfs(int[] target, int[][]contains, int start, int end){
		if(target[0]==0&&target[1]==0&&target[2]==0){
			return true;
		}else if(target[0]<0||target[1]<0||target[2]<0) {
			return false;
		}else if(start>end){
			return false;
		}
		
		for(int i=start;i<end;i++){
			//eat it
			target[0] -=contains[i][0];
			target[1] -=contains[i][1];
			target[2] -=contains[i][2];
			if(dfs(target, contains,i+1,end)) {
				return true;
			}
			//reverse eat it
			target[0] +=contains[i][0];
			target[1] +=contains[i][1];
			target[2] +=contains[i][2];
		}
		return false;
	}

}

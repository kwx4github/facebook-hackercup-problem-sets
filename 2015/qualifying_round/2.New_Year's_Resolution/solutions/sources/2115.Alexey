import java.io.*;
import java.util.*;
import java.math.*;

public class NewYear implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st;
	static Random rnd;

	private void solve() throws IOException {
		int tests = nextInt();
		for (int test = 0; test < tests; test++) {
			out.print("Case #" + (test + 1) + ": ");
			solveOne();
		}
	}

	class Food {
		long p, c, f;

		public Food(long p, long c, long f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}

	}

	private void solveOne() throws IOException {
		long p = nextLong(), c = nextLong(), f = nextLong();
		int foodCount = nextInt();
		Food[] food = new Food[foodCount];
		for (int i = 0; i < foodCount; i++) {
			food[i] = new Food(nextLong(), nextLong(), nextLong());
		}
		boolean found = false;
		for (int mask = 0; mask < (1 << foodCount); mask++) {
			long pCurrent = 0, cCurrent = 0, fCurrent = 0;
			for (int bit = 0; bit < foodCount; bit++) {
				if (checkBit(mask, bit)) {
					pCurrent += food[bit].p;
					cCurrent += food[bit].c;
					fCurrent += food[bit].f;
				}
			}
			found |= (p == pCurrent && c == cCurrent && f == fCurrent);
		}
		out.println(found ? "yes" : "no");
	}

	private boolean checkBit(int mask, int bit) {
		return ((mask >> bit) & 1) != 0;
	}

	public static void main(String[] args) {
		new NewYear().run();
	}

	public void run() {
		try {
			final String className = this.getClass().getName().toLowerCase();

			try {
				in = new BufferedReader(new FileReader(className + ".in"));
				out = new PrintWriter(new FileWriter(className + ".out"));
				// in = new BufferedReader(new FileReader("input.txt"));
				// out = new PrintWriter(new FileWriter("output.txt"));
			} catch (FileNotFoundException e) {
				in = new BufferedReader(new InputStreamReader(System.in));
				out = new PrintWriter(System.out);
			}

			rnd = new Random();

			solve();

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String line = in.readLine();

			if (line == null)
				return null;

			st = new StringTokenizer(line);
		}

		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
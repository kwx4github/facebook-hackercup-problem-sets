import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class NewYearsResolution {

	private static Scanner scanner;
	private static PrintWriter printWriter;
	static String inputFilename = "new_years_resolution.txt";
	static String outputFilename = "new_years_resolution_output.txt";

	public static void main(String[] args) throws FileNotFoundException {

		scanner = new Scanner(new FileReader(inputFilename));
		printWriter = new PrintWriter(outputFilename);

		new NewYearsResolution().solve();

		scanner.close();
		printWriter.close();
	}

	public void solve() {

		int numOfTestCases = scanner.nextInt();

		for (int testCaseNumber = 1; testCaseNumber <= numOfTestCases; testCaseNumber++) {

			int gp = scanner.nextInt();
			int gc = scanner.nextInt();
			int gf = scanner.nextInt();

			int numOfRawFood = scanner.nextInt();

			// Create a list of food in memory and remove impossible ones to
			// reduce subsequent computation
			ArrayList<Food> foodList = new ArrayList<Food>();

			for (int foodNum = 1; foodNum <= numOfRawFood; foodNum++) {
				int p = scanner.nextInt();
				int c = scanner.nextInt();
				int f = scanner.nextInt();

				// Add food that does not exceed the ideal value even by itself
				if ((p <= gp) && (c <= gc) && (f <= gf)) {
					Food food = new Food(p, c, f);
					foodList.add(food);
				}
			}

			// Create all binary combinations. In preparation for brute force =)
			int numOfFood = foodList.size();
			int numOfCombinations = (int) Math.pow(2, numOfFood);
			boolean[][] bools = new boolean[numOfCombinations][numOfFood];

			for (int i = 0; i < numOfCombinations; i++) {
				for (int j = 0; j < numOfFood; j++) {
					int val = numOfCombinations * j + i;
					int ret = (1 & (val >>> j));
					bools[i][j] = ret != 0;
				}
			}

			// Let the brute force begin. =P
			// Each row represents certain combination of the foods
			boolean solved = false;
			for (int i = 0; i < bools.length; i++) {
				int tp = 0;
				int tc = 0;
				int tf = 0;

				for (int j = 0; j < bools[i].length; j++) {
					if (bools[i][j]) {
						tp += foodList.get(j).p;
						tc += foodList.get(j).c;
						tf += foodList.get(j).f;
					}
				}

				if ((tp == gp) && (tc == gc) && (tf == gf)) {
					solved = true;
					break;
				}
			}

			if (solved) {
				printWriter.println("Case #" + testCaseNumber + ": yes");
			} else {
				printWriter.println("Case #" + testCaseNumber + ": no");
			}
		}

		System.out.println("\nProgram terminating...");
	}

	public class Food {
		int p;
		int c;
		int f;

		public Food(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}
	}
}
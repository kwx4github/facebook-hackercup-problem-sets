using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Q_NewYears
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] lines = null;
            if (args == null || args.Length == 0)
            {
                lines = System.IO.File.ReadAllLines(@"example.txt");
            }
            else
            {
                if (args.Length > 0)
                {
                    if (System.IO.File.Exists(args[0]))
                    {
                        lines = System.IO.File.ReadAllLines(@args[0]);
                    }
                }
            }

            if (lines != null)
            {
                int i = 0;
                int t = 0;
                int n = 0;
                int[] needed = null;
                List<int[]> food = new List<int[]>();
                bool ended = false;
                int caseNo = 1;
                foreach (string line in lines)
                {
                    if (i == 0)
                    {
                        t = int.Parse(line);
                    }
                    else if (t > 0 && line.Length > 0)
                    {
                        if (needed == null)
                        {
                            needed = GetMacros(line.Split(new Char[] { ' ' }, 3));
                        }
                        else if (n <= 0)
                        {
                            n = int.Parse(line);
                        }
                        else
                        {
                            int[] values = GetMacros(line.Split(new Char[] { ' ' }, 3));
                            food.Add(values);
                            n--;
                            if (n == 0)
                            {
                                ended = true;
                            }
                        }                   
                    }
                    i++;

                    if (ended)
                    {
                        bool result = CanEat(needed, food);
                        Console.WriteLine(String.Format("Case #{0}: {1}", caseNo, result ? "yes" : "no"));
                        ended = false;
                        caseNo++;

                        // Prepare next case
                        needed = null;
                        n = 0;
                        food.Clear();
                    }
                }
            }
            Console.ReadLine();
        }

        protected static int[] GetMacros(string[] values)
        {
            int[] result = new int[values.Length];
            for (int i = 0; i < values.Length; i++)
            {
                result[i] = int.Parse(values[i]);
            }
            return result;
        }

        protected static bool CanEat(int[] needed, List<int[]> food)
        {            
            if (needed != null && needed.Length == 3 && food.Count > 0)
            {
                for (int i = 0; i < food.Count; i++)
                {
                    int[] sum = new int[3] { 0, 0, 0 };
                    if (CheckFood(needed, food, sum, i))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        protected static bool CheckFood(int[] needed, List<int[]> food, int[] sum, int currentIndex = 0)
        {
            int[] tmpSum = new int[3]{0,0,0};
            bool allLower = false;
            if (food.Count > currentIndex)
            {
                bool valid = true;
                allLower = true;
                for (int i = 0; i < 3; i++)
                {
                    tmpSum[i] = sum[i] + food[currentIndex][i];
                    if (tmpSum[i] != needed[i])
                    {
                        valid = false;                        
                    }

                    if (tmpSum[i] >= needed[i])
                    {
                        allLower = false;
                    }
                }

                if (!valid && allLower)
                {
                    for (int i = currentIndex + 1; i < food.Count; i++)
                    {
                        if (CheckFood(needed, food, tmpSum, i))
                        {
                            valid = true;
                            break;
                        }
                    }
                }

                return valid;
            }            
            return false;
        }

    }
}

#include <fstream>

using namespace std;

class stack
{
public:
	int elements[20]; // Elements in stack
	int tos; // Top of stack

	stack()
	{
		tos=0; // Initialize top of stack
	}
	int is_empty() // Check if stack is empty
	{
		return (tos==0?1:0);
	}
	int is_full() // Check if stack is full
	{
		return (tos==20?1:0);
	}
	void push(int n) // Push an element in stack
	{
		if (!is_full())
		{
			elements[tos]=n;
			tos++;
		}
	}
	int pop() // Pop the last element from stack
	{
		if (!is_empty())
		return (elements[--tos]);

	}
	void reset()
	{
		for (int i=0; i<tos; i++)
		{
			elements[i]=0;
		}
		tos=0;
	}
};

int check_if_possible(int GP, int GC, int GF, int N, int P[20], int C[20], int F[20])
{
	stack stack;
	int sum_p, aux, i, j, k, q;
	int sum_c, sum_f;

	for (i=0; i<N; i++)
	{
		stack.reset();
		sum_p=0;
		if (P[i]>GP) 
		{
			continue;
		}
		sum_p+=P[i];
		stack.push(i);
		aux=i;
		while (aux!=N)
		{
			for (j=aux+1; j<N; j++)
			{
				if (P[j]+sum_p>GP) continue;
				else
				{
					sum_p+=P[j];
					stack.push(j);
				}
			}
			if (sum_p==GP)
			{
				sum_c=0;
				sum_f=0;
				for (k=0; k<stack.tos; k++)
				{
					sum_c+=C[stack.elements[k]];
					sum_f+=F[stack.elements[k]];
				}
				if (sum_c==GC && sum_f==GF)
					return 1;
				else
				{
					aux=stack.pop();
					sum_p-=P[aux];
					if (aux==N-1) aux++;
				}
			}
			else
			{
				aux=stack.pop();
				sum_p-=P[aux];
				if (aux==N-1) aux++;
			}
		}
	}
	return 0;
}
int main()
{
	ifstream fin("data.in");
	ofstream fout("data.out");

	short T;
	fin >> T;

	short i, j;
	short possible=0;

	int GP, GC, GF;
	short N;
	int P[20], C[20], F[20];
	for (i=0; i<T; i++)
	{
		fin >> GP >> GC >> GF >> N;
		for (j=0; j<N; j++)
		{
			fin >> P[j] >> C[j] >> F[j];
		}
		fout << "Case #" << i+1 << ": ";
		if (check_if_possible(GP, GC, GF, N, P, C, F))
		{
			fout << "yes\n";
		}
		else
		{
			fout << "no\n";
		}
	}
	fin.close();
	fout.close();
	return 0;
}
//#define __test__aTest__
#ifndef __test__aTest__

#include <vector>
#include <list>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <assert.h>
#include <stdexcept>
#include <string>


using namespace std;

#define ll long long
#define ull size_t

int N;

void process(int index) {
    printf("Case #%d: ", index);
    //scanf("%d", &N);
    int gp, gc, gf;
    cin >> gp >> gc >> gf;
    int n;
    cin >> n;
    pair<int, pair<int, int> > food;
    vector<pair<int, pair<int, int> > > v;
    for (int i = 0; i < n; i++) {
        int p, c, f;
        cin >> p >> c >> f;
        v.push_back(make_pair(p, make_pair(c, f)));
    }
    set<pair<int, pair<int, int> > > s;
    set<pair<int, pair<int, int> > >::iterator it;
    s.insert(make_pair(0, make_pair(0, 0)));
    for (int i = 0; i < n; i++) {
        set<pair<int, pair<int, int> > > nxt = s;
        for (it = s.begin(); it != s.end(); ++it) {
            food.first = (*it).first + v[i].first;
            food.second.first = (*it).second.first + v[i].second.first;
            food.second.second = (*it).second.second + v[i].second.second;
            nxt.insert(food);
        }
        s = nxt;
    }
    if (s.find(make_pair(gp, make_pair(gc, gf))) != s.end()) {
        cout<< "yes" <<endl;
    } else {
        cout<< "no" <<endl;
    }
    //printf("%.9f\n", 0.0);
    fflush(stdout);
}

int main() {
    
    freopen("/Users/zishirs/Documents/workspace/test/test/test.txt", "r", stdin);
    freopen("/Users/zishirs/Documents/workspace/test/test/output.txt", "w", stdout);
    
    
    int T;
    scanf("%d", &T);
    for (int index = 1; index <= T; ++index) {
        process(index);
    }
    
    
    /*
    int n;
    vector<int> v;
    while (cin >> n) {
        v.push_back(n);
    }
    vector<int> v1(v.begin(), v.begin() + v.size()/2), v2(v.begin() + v.size()/2, v.end());
    */
    
    //srand((unsigned int)time(NULL));

    return 0;
}

#endif
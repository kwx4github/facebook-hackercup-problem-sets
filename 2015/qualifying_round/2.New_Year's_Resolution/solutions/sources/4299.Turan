import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;


public class NewYearResolution {
	private static final int SOURCES = 3; 
	
	private static class Nutrients{
		int protein;
		int carbohydrate;
		int fat;
		
		public Nutrients(){
			protein = 0;
			carbohydrate = 0;
			fat = 0;
		}
		
		public Nutrients(String[] parameters){
			this(Integer.valueOf(parameters[0]), Integer.valueOf(parameters[1]), Integer.valueOf(parameters[2]));
		}
		
		public Nutrients(int protein, int carbohydrate, int fat){
			this.protein = protein;
			this.carbohydrate = carbohydrate;
			this.fat = fat;
		}
		
		public int compare(Nutrients comparand){
			if(this.protein < comparand.protein &&
					this.carbohydrate < comparand.carbohydrate &&
					this.fat < comparand.fat)
				return -1;
			else if(this.protein > comparand.protein &&
					this.carbohydrate > comparand.carbohydrate &&
					this.fat > comparand.fat)
				return 1;
			else if(this.equals(comparand))
				return 0;
			else 
				return Integer.MIN_VALUE;
		}
		
		public boolean equals(Nutrients comparand){
			if(this.protein == comparand.protein &&
					this.carbohydrate == comparand.carbohydrate &&
					this.fat == comparand.fat)
				return true;
			else 
				return false;
		}
		
		public void add(Nutrients addend){
			this.protein += addend.protein;
			this.carbohydrate += addend.carbohydrate;
			this.fat += addend.fat;
		}
	}
	
	public static int getBit(int n, int k) {
	    return (n >> k) & 1;
	}
	
	public static int[] getBitArray(int n, int k){
		int[] bitArray = new int[k];
		for(int i = 0; i < k; i++){
			bitArray[k-i-1] = getBit(n, i);
		}
		return bitArray;
	}
	
	public static String toString(int[] bitArray){
		StringBuffer sb = new StringBuffer(bitArray.length);
		for(int i = 0; i < bitArray.length; i++){
			sb.append(bitArray[i]);
		}
		return sb.toString();
	}
	
	public static boolean process(int numOfLines, Nutrients[] food, Nutrients constraint){
		boolean result = false;
		int numOfPermutations = 1;
		for(int i = 1; i <= numOfLines; i++){
			numOfPermutations *= 2; 
		}
		
		for(int i = 0; i < numOfPermutations; i++){
			int[] bitArray = getBitArray(i, numOfLines);
			result = satisfies(bitArray, food, constraint);
			if(result)
				break;
		}
		return result;
	}
	
	public static boolean satisfies(int[] bitArray, Nutrients[] food, Nutrients constraint){
		Nutrients sum = new Nutrients();
		for(int i = 0; i < bitArray.length; i++){
			if(bitArray[i] == 1)
				sum.add(food[i]);
			int result = sum.compare(constraint);
			if(result == 1) {
				return false;
			} else if(result == 0){
				return true;
			}
		}
		return false;
	}
	
	public static int[] sum(int[] bitArray, int[][] food){
		int[] result = new int[SOURCES];
		
		return result;
	}
	
	public static void readAndProcess(String fileName) throws IOException{
		BufferedReader reader = new BufferedReader(new FileReader(fileName));
		PrintWriter writer = new PrintWriter(new File("output.txt"));
		String line = reader.readLine();
		int cases = Integer.valueOf(line);
		for(int cs = 0; cs < cases; cs++){
			String[] tokens = reader.readLine().split(" ");
			Nutrients constraint = new Nutrients(tokens);
			int numOfFoods = Integer.valueOf(reader.readLine());
			Nutrients[] meal = new Nutrients[numOfFoods];
			for(int food = 0; food < numOfFoods; food++){
				tokens = reader.readLine().split(" ");
				meal[food] = new Nutrients(tokens);
			}
			boolean result = process(numOfFoods, meal, constraint);
			writer.print("Case #" + (cs + 1) + ": ");
			if(result)
				writer.println("yes");
			else
				writer.println("no");
		}
		reader.close();
		writer.close();
	}
	
	
	public static void main(String[] args) throws IOException{
		readAndProcess(args[0]);
	}
}

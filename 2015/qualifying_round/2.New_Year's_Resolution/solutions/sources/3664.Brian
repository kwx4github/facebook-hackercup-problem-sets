import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class FacebookNewYearsResolution {
	private FastScanner in;
	private PrintWriter out;

	class Triple {
		int a, b, c;
		public Triple(int a, int b, int c){
			this.a = a;
			this.b = b;
			this.c = c;
		}
	}
	public void solve() throws IOException {
		int t = in.nextInt();
		for (int i = 1; i <= t; i++){
			out.print("Case #" + i + ": ");
			int p = in.nextInt();
			int c = in.nextInt();
			int f = in.nextInt();
			Triple sum = new Triple(p, c, f);
			int n = in.nextInt();
			Triple[] set = new Triple[n];
			for (int a = 0; a < n; a++){
				set[a] = new Triple(in.nextInt(), in.nextInt(), in.nextInt());
			}
			out.println(checkSum(set, 0, sum)? "yes" : "no");
		}
	}
	
	public boolean checkSum(Triple[] set, int start, Triple sum){
		if (sum.a == 0 && sum.b == 0 && sum.c == 0) return true;
		if (set.length - 1 < start) return false;
		Triple newSum = new Triple((sum.a - set[start].a), (sum.b - set[start].b), (sum.c - set[start].c));
		return checkSum(set, start+1, sum) || 
				checkSum(set, start+1, newSum);
	}

	public static void main(String[] args) {
		new FacebookNewYearsResolution().run();
	}

	public void run() {
		try {
			in = new FastScanner();
			out = new PrintWriter(System.out);
			solve();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private class FastScanner {
		private BufferedReader br;
		private StringTokenizer st;

		public FastScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		public String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public double nextDouble() {
			return Double.parseDouble(next());
		}
	}
}

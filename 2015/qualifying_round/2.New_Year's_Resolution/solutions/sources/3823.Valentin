package qualification_round;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;

public class NewYearResolution {
	
	static boolean found;
	
	public static void main(String[] args) throws FileNotFoundException {
		String fileIn = "C:/Users/Valentin/workspace/FacebookHackerCup/src/qualification_round/new_years_resolution.txt";
		String fileOut = "C:/Users/Valentin/workspace/FacebookHackerCup/src/qualification_round/test.out";
		System.setIn(new FileInputStream(fileIn));
		System.setOut(new PrintStream(fileOut));

		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		for (int k = 0; k < t; k++) {
			found = false;
			int[] g = new int[3];
			g[0] = sc.nextInt();
			g[1] = sc.nextInt();
			g[2] = sc.nextInt();
			int foodNb = sc.nextInt();
			int[][] foods = new int[foodNb][3];
			for (int i = 0; i < foodNb; i++) {
				foods[i][0] = sc.nextInt();
				foods[i][1] = sc.nextInt();
				foods[i][2] = sc.nextInt();
			}
			backtrack(0, 0, 0, foods, g, 0);
			System.out.print("Case #" + (k+1) + ": ");
			if (found) {
				System.out.println("yes");
			}
			else System.out.println("no");
		}
	}
	
	public static void backtrack (int sumP, int sumC, int sumF, int[][] numbers, int[] targetValue, int j)
	{
	    for (int i = j; i < numbers.length; i++)
	        {
	    		int[] potentialSolution = new int[3];
	            potentialSolution[0] = numbers[i][0];
	            potentialSolution[1] = numbers[i][1];
	            potentialSolution[2] = numbers[i][2];
	            if (found) return;
	            else if (sumP + potentialSolution[0] > targetValue[0] || sumC + potentialSolution[1] > targetValue[1] || sumF + potentialSolution[2] > targetValue[2])
	                continue;
	            else if (sumP + potentialSolution[0] == targetValue[0] && sumC + potentialSolution[1] == targetValue[1] && sumF + potentialSolution[2] == targetValue[2])
	            {
	                found = true;
	                return;
	            }
	            else
	            {
	                backtrack (sumP + potentialSolution[0], sumC + potentialSolution[1], sumF + potentialSolution[2], numbers, targetValue, i + 1);
	            }
	        }
	}
	
}

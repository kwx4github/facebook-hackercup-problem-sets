#define _CRT_SECURE_NO_WARNINGS

#include <time.h>

#include <iostream>
#include <utility>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

struct Food
{
    int a, b, c;

    Food(int a = 0, int b = 0, int c = 0) :
        a(a),
        b(b),
        c(c)
    {}

    Food& operator += (const Food& food)
    {
        a += food.a;
        b += food.b;
        c += food.c;
        return *this;
    }

    bool operator == (const Food& food) const
    {
        return a == food.a && b == food.b && c == food.c;
    }
};

string solve(const Food& target, const vector<Food> dishes)
{
    for (int subset = 0; subset < (1 << dishes.size()); ++subset)
    {
        Food current;
        for (size_t i = 0; i < dishes.size(); i++)
            if (subset & (1 << i))
            {
                current += dishes[i];
            }
        if (target == current)
        {
            return "yes";
        }
    }
    return "no";
}

void test();

int main(int argc, char* argv[])
{
    // test();

    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    ios_base::sync_with_stdio(false);

    double time = clock();
    int T;
    cin >> T;
    for (int t = 1; t <= T; t++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        Food target(a, b, c);
        int n;
        cin >> n;
        vector<Food> dishes;
        for (int i = 0; i < n; i++)
        {
            cin >> a >> b >> c;
            dishes.push_back(Food(a, b, c));
        }        
        string ans = solve(target, dishes);
        cout << "Case #" << t << ": " << ans << endl;
    }
    time = (clock() - time) / CLOCKS_PER_SEC;
    cerr << "Time is " << time << "s" << endl;

    return 0;
}

void test()
{    
    /*
    double worst_time1 = 0, worst_time2 = 0;

    const double FPS = 30;
    double last_showed = 0;

    //for (int n = 0; n <= 999999999; n++)
    for (int n = 999999999; n >= 0; n--)
    {
        if ((clock() - last_showed) / CLOCKS_PER_SEC > 1 / FPS)
        {
            cout << "\r" << n;
            last_showed = clock();
        }        

        double time = clock();
        pair<int, int> ans1 = solve(n);
        time = (clock() - time) / CLOCKS_PER_SEC;
        if (worst_time1 < time)
        {
            worst_time1 = time;
            cout << endl;
            cout << "Worst time is " << worst_time1 << " and " << worst_time2 << endl;
        }

        time = clock();
        pair<int, int> ans2 = solve2(n);
        time = (clock() - time) / CLOCKS_PER_SEC;
        if (worst_time2 < time)
        {
            worst_time2 = time;
            cout << endl;
            cout << "Worst time is " << worst_time1 << " and " << worst_time2 << endl;
        }

        if (ans1 != ans2)
        {
            cout << endl << "WA!" << endl;
            cout << ans1.first << " " << ans1.second << endl;
            cout << ans2.first << " " << ans2.second << endl;
            return;
        }
    }
    cout << endl << "OK" << endl;
    */
}


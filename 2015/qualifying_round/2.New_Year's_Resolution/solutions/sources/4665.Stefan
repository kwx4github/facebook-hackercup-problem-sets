#include <algorithm>
#include <bitset>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <set>

using namespace std;

#define mp make_pair
#define pb push_back
#define LL long long
#define ULL unsigned long long
#define BASE 73
#define NMAX 10000
#define NMAX2 20001
#define MOD1 1000000007
#define ALL(V) (V).begin(), (V).end()
#define ALLR(V) (V).rbegin(), (V).rend()
#define CRLINE Duxar(__LINE__);
#define ENTER putchar('\n');

void Duxar(int _this_line) {
#ifndef ONLINE_JUDGE
	printf("\n . . . . . . . . . . . . . Passed line - %d\n", _this_line);
#endif
}

template <class T>
void ReadNo(T &_value) {
	T sign = 1;
	char ch;
	_value = 0;
	while(!isdigit(ch = getchar())) {
		(ch == '-') && (sign = -1);
	}
	do {
		_value = _value * 10 + (ch - '0');
	} while(isdigit(ch = getchar()));
	_value *= sign;
}

template <class T>
void AddNr(T &a, T b) {
	a = a + b;
	while (a >= MOD1) {
		a -= MOD1;
	}
	while (a < 0) {
		a += MOD1;
	}
}

struct state {
	int a, b, c;
};

state operator+(const state a, const state b) {
	state now;
	now.a = a.a + b.a;
	now.b = a.b + b.b;
	now.c = a.c + b.c;
	return now;
}

bool operator<(const state a, const state b) {
	LL nr1 = a.a * 1000 * 1000 + a.b * 1000 + a.c;
	LL nr2 = b.a * 1000 * 1000 + b.b * 1000 + b.c;
	return nr1 < nr2;
}

int A, B, C;

void Solve() {
	int N, i;
	state element, new_state;
	set <state> found;
	bool done = false;
	
	element.a = element.b = element.c = 0;
	found.insert(element);
	
	ReadNo(A); ReadNo(B); ReadNo(C);
	ReadNo(N);
	for (i = 0; i < N; ++i) {
		ReadNo(element.a);
		ReadNo(element.b);
		ReadNo(element.c);
		if (!done) {
			for (auto it: found) {
				new_state = it + element;
				if (new_state.a == A && new_state.b == B && new_state.c == C) {
					printf("yes\n");
					done = true;
				}
				if (found.find(new_state) == found.end()) {
					if (new_state.a <= A && new_state.b <= B && new_state.c <= C) {
						found.insert(new_state);
					}
				}
			}
		}
	}
	if (!done) {
		printf("no\n");
	}
	
}

int main(int no_arguments, char **arguments){
	if (no_arguments > 1) {
		freopen(arguments[1], "r", stdin);
	}
	else {
		freopen("input.cpp", "r", stdin);
	}
	freopen("answer.cpp", "w", stdout);
	
	int i, N;
	
	ReadNo(N);
	for (i = 1; i <= N; ++i) {
		printf("Case #%d: ", i);
		Solve();
	}
	return 0;
}



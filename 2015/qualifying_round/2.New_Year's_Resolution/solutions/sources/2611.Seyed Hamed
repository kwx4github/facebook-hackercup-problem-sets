import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Hamed Valizadeh (havaliza@gmail.com)
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		FastInputReader in = new FastInputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NewYearsResolution solver = new NewYearsResolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class NewYearsResolution {
    public void solve(int testNumber, FastInputReader in, PrintWriter out) {
        int a = in.nextInt();
        int b = in.nextInt();
        int c = in.nextInt();

        int n = in.nextInt();

        int[] as = new int[n];
        int[] bs = new int[n];
        int[] cs = new int[n];

        for (int i = 0; i < n; i++) {
            as[i] = in.nextInt();
            bs[i] = in.nextInt();
            cs[i] = in.nextInt();
        }

        out.printf("Case #%d: ", testNumber);

        for (int mask = 0; mask < (1 << n); mask++) {
            if (ok(a, as, mask) && ok(b, bs, mask) && ok(c, cs, mask)) {
                out.println("yes");
                return;
            }
        }

        out.println("no");
    }

    private boolean ok(int a, int[] as, int mask) {
        int total = 0;
        for (int i = 0; i < as.length; i++)
            if ((mask & (1 << i)) != 0)
                total += as[i];
        return a == total;
    }
}

class FastInputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public FastInputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.IO;

namespace NewYearsResolution
{
	class Program
	{
		public struct MyVector
		{
			public int a;
			public int b;
			public int c;

			public MyVector( int a, int b, int c )
			{
				this.a = a;
				this.b = b;
				this.c = c;
			}

			public static MyVector operator +( MyVector a1, MyVector a2 )
			{
				return new MyVector( a1.a + a2.a, a1.b + a2.b, a1.c + a2.c );
			}

			public static MyVector operator -( MyVector a1, MyVector a2 )
			{
				return new MyVector( a1.a - a2.a, a1.b - a2.b, a1.c - a2.c );
			}

			public static bool operator <( MyVector a1, MyVector a2 )
			{
				//a1 < a2
				return a1.a < a2.a && a1.b < a2.b && a1.c < a2.c;
			}

			public static bool operator >( MyVector a1, MyVector a2 )
			{
				//a1 > a2
				return a1.a > a2.a && a1.b > a2.b && a1.c > a2.c;
			}

			public static bool operator ==( MyVector a1, MyVector a2 )
			{
				//a1 == a2
				return a1.a == a2.a && a1.b == a2.b && a1.c == a2.c;
			}

			public static bool operator !=( MyVector a1, MyVector a2 )
			{
				//a1 == a2
				return a1.a != a2.a && a1.b != a2.b && a1.c != a2.c;
			}

		}

		static void Main( string[ ] args )
		{

			using ( StreamReader sr = new StreamReader( "D:\\input.txt" ) )
			{
				using ( StreamWriter sw = new StreamWriter( "D:\\output.txt", false, sr.CurrentEncoding ) )
				{
					int T = int.Parse( sr.ReadLine( ) );
					for ( int i = 0; i < T; i++ )
					{

						var nums = sr.ReadLine( );
						var numArr = nums.Split( ' ' ).Select( x => int.Parse( x ) ).ToList( );
						var goal = new MyVector( numArr[ 0 ], numArr[ 1 ], numArr[ 2 ] );
						var n = int.Parse( sr.ReadLine( ) );
						var v = new List<MyVector>( );
						for ( int ii = 0; ii < n; ii++ )
						{
							nums = sr.ReadLine( );
							numArr = nums.Split( ' ' ).Select( x => int.Parse( x ) ).ToList( );
							v.Add( new MyVector( numArr[ 0 ], numArr[ 1 ], numArr[ 2 ] ) );
						}


						var exist = false;

						for ( int iii = 0; iii < v.Count; iii++ )
						{
							var x = R( goal, v, 0, new MyVector( ) );
							if ( x )
							{
								exist = true;
								break;
							}

							var first = v[ 0 ];
							v.RemoveAt( 0 );
							v.Add( first );
						}

						sw.Write( string.Format( "Case #{0}: {1}\n", ( i + 1 ), exist ? "yes" : "no" ) );
						Console.WriteLine( "Case #{0}: {1}\n", ( i + 1 ), exist ? "yes" : "no" );
					}
				}
			}

		}


		static bool R( MyVector goal, List<MyVector> v, int i, MyVector add )
		{
			//if ( i >= v.Count )
			//	return false;

			add += v[ i ];
			if ( add < goal )
			{

				for ( int j = i + 1; j < v.Count; j++ )
				{
					var ret = R( goal, v, j, add );

					if ( ret )
						return true;
				}
				return false;
				
			}
			else
			{
				if ( goal == add )
					return true;
				else
				{
					add -= v[ i ];
					return false;
				}
			}

		}


	}

}

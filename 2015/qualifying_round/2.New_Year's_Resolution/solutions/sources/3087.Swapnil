#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <algorithm>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <limits.h>
 
using namespace std;
 
// Constants
#define					HODOR unsigned long long
// Loop Macros
#define rep(i, a, b)	for(int i = (a); i < (b); ++i)
#define dwn(i, a, b)	for(int i = (a); i >= (b); --i)
#define repi(v, c)		for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define dwni(v, c) 		for( typeof( (c).end()) v = (c).end()-1;  v >= (c).begin(); --v)
// Input Macros
#define s(n)			scanf("%d",&n)
#define sc(n)			scanf("%c",&n)
#define sl(n)			scanf("%lld",&n)
#define ss(n)			scanf("%s",n)
// STL Macros
#define pb 				push_back
#define mp              make_pair
#define all(v)          v.begin(), v.end()
#define gc 				getchar_unlocked
#define pc 				putchar_unlocked
#define fi 				first
#define se 				second
 
//	Functions
#define testcases()		int t; for(s(t);t;--t)
 
template<typename X> inline void inp(X &n ) {
    register int ch=gc();int sign=1;n=0;
    while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=gc();}
    while(  ch >= '0' && ch <= '9' ) n = (n<<3)+(n<<1) + ch-'0', ch=gc();
    n=n*sign;
}
 
template<typename X> inline void out(X a) {
    char snum[20]; int i=0;
    do {snum[i++]=a%10+48; a=a/10; }while(a!=0);
    i=i-1;
    while(i>=0) pc(snum[i--]);
    pc('\n');
}

int exact_nutrients(vector<pair<pair<int, int>, int> > nutrients, int gp, int g, int gf, int n) {
	int end = 1<<n, _gp, _gc, _gf;
	rep(i, 1, end) {
		_gp = _gc = _gf = 0;
		rep(j, 0, n) {
			if (i & (1<<j)) 
				_gp += nutrients[j].fi.fi , _gc += nutrients[j].fi.se, _gf += nutrients[j].se;
		}
		if ( _gp == gp && _gc == g && _gf == gf )	
			return 1;
	}
	return 0;
}
 
int main() {
	int gp, g, gf, n, c = 0, _gp, _gc, _gf;
	testcases() {
		vector<pair<pair<int, int>, int> > nutrients;
		inp(gp), inp(g), inp(gf), inp(n), c++;
		rep(i, 0, n) 
			inp(_gp), inp(_gc), inp(_gf), nutrients.pb(mp(mp(_gp, _gc), _gf));
		if( exact_nutrients(nutrients, gp, g, gf, n) )
			printf("Case #%d: yes\n", c);
		else
			printf("Case #%d: no\n", c);
	}
	return 0;
}
import java.nio.charset.*;
import java.nio.file.*;
import java.util.*;
import java.io.*;

class Entry {
    private int a, b, c;

    public Entry(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }
    
    public Entry(String s) {
        String[] parts = s.split(" ");
        a = Integer.parseInt(parts[0]);
        b = Integer.parseInt(parts[1]);        
        c = Integer.parseInt(parts[2]);
    }

    public Entry subtract(Entry e) {
        return new Entry(a - e.a, b - e.b, c - e.c);
    }

    public boolean isInvalid() {
        return (a < 0) || (b < 0) || (c < 0);
    }

    public boolean isZero() {
        return (a == 0) && (b == 0) && (c == 0);
    }

    public String toString() {
        return String.format("%d %d %d", a, b, c);
    }

}

public class Nutrition {

    public static boolean solve(List<Entry> foods, int index, Entry goal) {
        if (goal.isInvalid()) return false;
        if (goal.isZero()) return true;
        if (index >= foods.size()) return false;
        Entry current = foods.get(index);
        return solve(foods, index+1, goal.subtract(current)) || solve(foods, index+1, goal); 
    }

    public static void main(String[] args) {
        Path inputFile = Paths.get(args[0]);
        List<String> input;
        try {
            input = Files.readAllLines(inputFile, Charset.forName("UTF-8"));
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return;
        }
        Iterator<String> it =  input.iterator();
        int numCases = Integer.parseInt(it.next());
        for (int i = 1; i <= numCases; i++) {
            Entry goal = new Entry(it.next());
            List<Entry> foods = new ArrayList<>();
            int numFoods = Integer.parseInt(it.next());
            for (int j = 1; j <= numFoods; j++) {
                Entry food = new Entry(it.next());
                foods.add(food);
            }
            System.out.printf("Case #%d: %s%n", i, solve(foods, 0, goal) ? "yes" : "no");
        }
    }
}

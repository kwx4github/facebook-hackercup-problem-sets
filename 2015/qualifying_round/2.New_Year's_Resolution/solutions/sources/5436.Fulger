#include <stdio.h>
#include <string.h>
#define MCALS 1001
#define MFOODS 25

typedef struct {
  int a,b,c;
}cal;
char mat[MCALS][MCALS][MCALS];

int nr;
cal foods[MFOODS];
char selected[MFOODS];

void print(cal a) {
  printf("(%d, %d, %d)\n", a.a, a.b, a.c);
}

int inBounds(cal cal, int a, int b, int c) {
  return cal.a + a <MCALS && cal.b + b < MCALS && cal.c + c < MCALS;
}


int runTest(cal req) {
  memset(mat, 0, MCALS * MCALS * MCALS * sizeof(char));
  int i, j, k, l;
  mat[0][0][0] = 1;
  for (l = 0; l < nr; l++) {
    for (i = 0; i <= req.a; i++) {
      for (j = 0; j <= req.b; j++) {
        for (k = 0; k <= req.c; k++) {
          cal crt = foods[l];
          if (mat[i][j][k] && inBounds(crt, i, j, k)) {
            mat[i + crt.a][j+crt.b][k+crt.c] = 1;
          }
        }
      }
    }
  }

  return mat[req.a][req.b][req.c];
}

int main() {
  int t, n, f;
  int i, j;
  scanf("%d", &t);
  for (i = 0; i < t; i++) {
    cal req;
    memset(mat, 0, MFOODS * sizeof(cal));
    scanf("%d%d%d", &req.a, &req.b, &req.c);
    scanf("%d", &nr);
    for (j = 0; j < nr; j++) {
      scanf("%d%d%d", &foods[j].a, &foods[j].b, &foods[j].c);
    }
    printf("Case #%d: %s\n", i + 1, runTest(req) ? "yes" : "no");
  }

  return 0;
}

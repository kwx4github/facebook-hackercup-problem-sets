#include <iostream>
#include <vector>
using namespace std;
typedef struct __nts{
	int P;
	int C;
	int F;
}nts;

bool operator ==(const nts &n1,const nts &n2)
{
	return ((n1.P == n2.P) && (n1.C == n2.C) && (n1.F == n2.F));
}

bool operator<(const nts &lhs,const nts &rhs)
{
	return ((lhs.P < rhs.P) && (lhs.C < rhs.C) && (lhs.F < rhs.F));
}

nts operator+(const nts &lhs,const nts &rhs)
{
	nts res;
	res.P = lhs.P + rhs.P;
	res.C = lhs.C + rhs.C;
	res.F = lhs.F + rhs.F;
	return res;
}

bool ChkNutsFull(nts Gnt,nts nt[20],int N)
{
        vector <nts> sumNts[20];
	int ncounter,scounter,vcounter;
	nts res;

	/*Check if any of the food fulfils*/
	for(ncounter=0;ncounter<N;ncounter++)
		if(Gnt == nt[ncounter])
			return true;

	for(ncounter=0;ncounter<N;ncounter++) {
		if(Gnt < nt[ncounter]) 
			continue;
		sumNts[ncounter].push_back(nt[ncounter]);
		for(scounter=0;scounter<ncounter;scounter++) {
			for(vcounter=0;vcounter<sumNts[scounter].size();vcounter++){
				res = sumNts[scounter][vcounter] + nt[ncounter];
				if(Gnt < res)
					continue;
				if(res == Gnt)
					return true;
				sumNts[ncounter].push_back(res);	
			}	
		}

	}	

	return false;
}


int main()
{
	int T;
	int tcounter;
	nts nt[20],Gnt;
	int N,ncounter;

        cin>>T;	
	for(tcounter=1;tcounter<=T;tcounter++) {
		cin>>Gnt.P>>Gnt.C>>Gnt.F;
		cin>>N;
		for(ncounter=0;ncounter<N;ncounter++)
			cin>>nt[ncounter].P>>nt[ncounter].C>>nt[ncounter].F;

		cout<<"Case #"<<tcounter<<": ";
		if(ChkNutsFull(Gnt,nt,N))
			cout<<"yes"<<endl;
		else
			cout<<"no"<<endl;
	}	
	
	return 0;
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace nyr
{
    class Program
    {
        static void Main(string[] args)
        {
            // test
            // Console.SetIn(new StreamReader(@"C:\users\stan\downloads\new_years_resolution.txt"));

            var count = read_int();
            var cases = new List<test_case>();

            for (int i = 0; i < count; i++)
            {
                var c = new test_case();

                {
                    var columns = read_split();

                    c.want.protein = Convert.ToInt32(columns[0]);
                    c.want.carbohydrates = Convert.ToInt32(columns[1]);
                    c.want.fat = Convert.ToInt32(columns[2]);
                }

                {
                    var foods = read_int();

                    for (int j = 0; j < foods; j++)
                    {
                        var f = new food();

                        var columns = read_split();

                        f.protein = Convert.ToInt32(columns[0]);
                        f.carbohydrates = Convert.ToInt32(columns[1]);
                        f.fat = Convert.ToInt32(columns[2]);

                        c.foods.Add(f);
                    }
                }

                cases.Add(c);
            }

            for (int i = 0; i < cases.Count; i++)
            {
                var c = cases[i];
                var result = yes_or_no(c);

                Console.WriteLine("Case #{0}: {1}", i + 1, result ? "yes" : "no");
            }
        }

        static string[] read_split()
        {
            var line = Console.ReadLine();
            var columns = line.Split(' ');

            return columns;
        }

        static int read_int()
        {
            return Convert.ToInt32(Console.ReadLine());
        }

        static bool yes_or_no(test_case input)
        {
            var n = input.foods.Count;

            // check each individual food a number of times -- first with zero neighbors,
            // then one more, etc.
            for (int i = 1; i <= n; i++)
            {
                var exact = choose(input, i);

                if (exact)
                    return true;
            }

            return false;
        }

        static List<List<int>> combinations(int[] values, int take)
        {
            return combinations(values, 0, take);
        }

        static List<List<int>> combinations(int[] values, int startingIndex, int take)
        {
            var result = new List<List<int>>();

            if (take == 1)
            {
                var l = new List<int>();

                l.AddRange(values);

                result.Add(l);
            }
            else if (take == 2)
            {

                int combinationsListIndex = 0;

                for (int arrayIndex = startingIndex; arrayIndex < values.Length; arrayIndex++)
                {
                    for (int i = arrayIndex + 1; i < values.Length; i++)
                    {

                        //add new List in the list to hold the new combination
                        result.Add(new List<int>());

                        //add the starting index element from "array"
                        result[combinationsListIndex].Add(values[arrayIndex]);
                        while (result[combinationsListIndex].Count < take)
                        {
                            //add until we come to the length of the combination
                            result[combinationsListIndex].Add(values[i]);
                        }
                        combinationsListIndex++;
                    }

                }
            }
            else
            {
                for (int i = startingIndex; i < values.Length - take + 1; i++)
                {
                    //generate combinations of lenght-1(if lenght > 2 we enter into recursion)
                    var intermediate = combinations(values, i + 1, take - 1);

                    //add the starting index Elemetn in the begginnig of each newly generated list
                    for (int index = 0; index < intermediate.Count; index++)
                    {
                        intermediate[index].Insert(0, values[i]);
                    }

                    for (int y = 0; y < intermediate.Count; y++)
                    {
                        result.Add(intermediate[y]);
                    }
                }
            }

            return result;
        }

        static bool choose(test_case input, int n)
        {
            var fc = input.foods.Count;
            var values = new int[fc];

            for (int i = 0; i < fc; i++)
                values[i] = i;

            var possibilities = combinations(values, n);

            /*
            var candidates = new List<food>();

            while (candidates.Count < n)
                for (int j = 0; j < input.foods.Count; j++)
                    if (i != j)
                        candidates.Add(input.foods[j]);

            candidates.Add(food); */

            foreach (var possibility in possibilities)
            {
                var p = 0;
                var c = 0;
                var f = 0;

                foreach (var index in possibility)
                {
                    var x = input.foods[index];

                    p += x.protein;
                    c += x.carbohydrates;
                    f += x.fat;
                }

                if (p == input.want.protein)
                    if (c == input.want.carbohydrates)
                        if (f == input.want.fat)
                            return true;
            }

            return false;
        }

        static List<List<int>> get_groups(int total, int current_food_index, int neighbors_needed)
        {
            return null;
        }

        static List<int[]> get_possibilities(int total, int current_food_index, int neighbors_needed)
        {
            var values = new int[total];
            var iValue = 0;

            values[iValue++] = current_food_index;

            for (int i = 0; i < neighbors_needed; i++)
                if (i != current_food_index)
                    values[iValue++] = i;

            var groups = get_groups(total, current_food_index, neighbors_needed);

            var all = new List<int[]>();

            return all;
        }

        class test_case
        {
            public food want = new food();
            public List<food> foods = new List<food>();
        }

        class food
        {
            public int protein;
            public int carbohydrates;
            public int fat;
        }
    }
}





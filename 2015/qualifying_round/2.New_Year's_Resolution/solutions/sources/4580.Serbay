#include <iostream>
#include <vector>
#include <set>

using namespace std;

struct food {
  int protein;
  int carbo;
  int fat;

  food(int p, int c, int f): protein(p), carbo(c), fat(f) {}
};

food read_food() {
  int p, c, t;
  cin >> p >> c >> t;

  return food(p, c, t);
}

void eat(food &target, food &food) {
  target.protein -= food.protein;
  target.carbo -= food.carbo;
  target.fat -= food.fat;
}

void uneat(food &target, food &food) {
  target.protein += food.protein;
  target.carbo += food.carbo;
  target.fat += food.fat;
}

bool solve(food &target, vector<food> &foods, vector<bool> &eaten) {
  if(target.protein == 0 && target.carbo == 0 && target.fat == 0) {
    return true;
  } else if(target.protein < 0 || target.carbo < 0 || target.fat < 0) {
    return false;
  } else {
    for(int i=0; i<foods.size(); i++) {
      if(eaten[i]) {
        continue;
      } else {
        eat(target, foods[i]);
        eaten[i] = true;
        bool child_result = solve(target, foods, eaten);
        if(child_result) {
          return true;
        } else {
          uneat(target, foods[i]);
          eaten[i] = false;
        }
      }
    }
    return false;
  }
}

bool solve(food &target, vector<food> &foods) {
  vector<bool> eaten(foods.size(), false);
  
  return solve(target, foods, eaten);
}

int main() {
  int T;
  int p, c, t;
  int N;

  cin >> T;
  
  for(int t=0; t<T; t++) {
    food target = read_food();

    cin >> N;
    vector<food> foods;

    for(int n=0; n<N; n++) {
      foods.push_back(read_food());
    }

    bool result = solve(target, foods);

    cout << "Case #" << (t+1) << ": " << (result ? "yes" : "no") << endl;
  }
}

from itertools import chain, combinations
import numpy


def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))


T = input()

def rec(g, ps, acc, i):
    # print acc, i
    if acc[0] > g[0] or acc[1] > g[1] or acc[2] > g[0]:
        return False
    if all(acc == g):
        return True
    if i >= len(ps):
        return False
    if rec(g, ps, acc, i + 1):
        return True
    acc += numpy.array(ps[i])
    if rec(g, ps, acc, i + 1):
        return True
    acc -= numpy.array(ps[i])
    return False


for tc in range(1, T + 1):
    g = map(int, raw_input().strip().split())
    N = input()
    ps = [map(int, raw_input().strip().split()) for i in range(N)]
    ok = False

    # for set in powerset(ps):
    #     if all(numpy.array(set).sum(axis=0) == g):
    #         ok = True
    #         break

    ok = rec(numpy.array(g), numpy.array(ps), numpy.zeros(3), 0)

    print 'Case #%d: %s' % (tc, 'yes' if ok else 'no')

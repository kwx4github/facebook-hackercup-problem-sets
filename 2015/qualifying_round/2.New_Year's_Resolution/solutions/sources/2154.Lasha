import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

public class NewYearsResolution {
   static void printOutput(int testcaseNum, String result, PrintWriter pw) {
        pw.println("Case #" + testcaseNum + ": " + result);
    }
   
    static boolean isRightSubset(int mask, int[][] t, int a, int b, int c) {
        for (int i = 0; i < t.length; i++) {
            if ((mask & (1 << i)) != 0) {
                a -= t[i][0];
                b -= t[i][1];
                c -= t[i][2];
                if (a < 0 || b < 0 || c < 0)
                    return false;
            }
        }
        return a == 0 && b == 0 && c == 0;
    }

   static boolean isPossibleToEat(int gp, int gc, int gf, int[][] t) {
        int n = t.length;
        for (int m=0; m<(1<<n); m++) {
            if (isRightSubset(m, t, gp, gc, gf)) {
                return true;
            }
        }
        return false;
   }

   public static void main(String[] args) throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        int numTests = Integer.parseInt(rd.readLine());
        PrintWriter pw = new PrintWriter(new FileWriter("/Users/llakirbaia/Desktop/output.txt"));
        for (int i = 0; i < numTests; i++) {
            String line = rd.readLine();
            String[] desired = line.split(" ");
            int a = Integer.parseInt(desired[0]), b = Integer.parseInt(desired[1]), c = Integer.parseInt(desired[2]);
            int n = Integer.parseInt(rd.readLine());
            int[][] t = new int[n][3];
            for (int j = 0; j < n; j++) {
                line = rd.readLine();
                String[] split = line.split(" ");
                for (int k = 0; k < 3; k++) {
                    t[j][k] = Integer.parseInt(split[k]);
                }
            }
            printOutput(i + 1, isPossibleToEat(a, b, c, t) ? "yes" : "no", pw);
        }
        pw.flush();
        pw.close();
    }
}

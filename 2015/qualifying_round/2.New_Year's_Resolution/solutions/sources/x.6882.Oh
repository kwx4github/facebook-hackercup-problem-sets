package com.main;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;


public class QualitificationTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		File inputF = new File("./input.txt");
		try {
			FileReader inputFR = new FileReader("F:\\workspace\\HackTest\\src\\com\\main\\input.txt");//inputF);
			BufferedReader in = new BufferedReader(inputFR);
			BufferedWriter out = new BufferedWriter(new FileWriter("F:\\workspace\\HackTest\\src\\com\\main\\output.txt"));
			StringBuffer line = new StringBuffer("");
			String lineS = null;
			int lineC = 0;
			int totalTestNum = 0;
			int testCount = 0;
			int foodNumOfEachTest = 0;
			int testGoalAmount[] = {0,0,0} ;
			
			List<int[]> foodsForTest = new ArrayList<int[]>();
			int foodorder = 0;
			int garbageSum[] = {0,0,0} ;
			
			int TYPE_TOTAL_TEST_NUM = -1;
			int TYPE_TEST_NUM = 0;
			int TYPE_GOAL = 1;
			int TYPE_FOODS = 2;
			int state = TYPE_TOTAL_TEST_NUM;
			while((lineS=in.readLine()) != null)
			{
				line.append(lineS);
				StringTokenizer lineST = new StringTokenizer(lineS," ");
				System.out.println("line "+lineC+":"+line.toString());
				
				if (state == TYPE_TOTAL_TEST_NUM){
					totalTestNum = Integer.valueOf(lineST.nextToken());
					state = TYPE_GOAL;
				}else if (lineST.countTokens() == 3){
					if (state == TYPE_GOAL){
						int nutritionC = 0;
						while(lineST.hasMoreTokens()){
							testGoalAmount[nutritionC] = Integer.valueOf(lineST.nextToken());
							nutritionC++;
						}
						if (nutritionC == 3)	System.out.println(": TEST GOAL OK :");
						state = TYPE_TEST_NUM;
					}else if (state == TYPE_FOODS){
						int nutritionC = 0;
						int eachfoodElements[] = {0,0,0} ;
						while(lineST.hasMoreTokens()){
							eachfoodElements[nutritionC] = Integer.valueOf(lineST.nextToken());
							nutritionC++;
						}
						System.out.println(" eachfoodElements 1:"+eachfoodElements[0]+"- eachfoodElements 2:"+eachfoodElements[1]+"- eachfoodElements 3:"+eachfoodElements[2]);
						foodsForTest.add(foodorder, eachfoodElements);
						if (nutritionC == 3)	System.out.println(": EACH FOOD OK :"+foodsForTest.size()+ " -- foodNumOfEachTest : "+foodNumOfEachTest);
						if (foodNumOfEachTest == foodsForTest.size()){
							//calculate yes or not
							boolean result = calculate(testGoalAmount, foodsForTest, 0, 0, garbageSum);
							String resultS = "Case #"+testCount+":"; 
							if (result){
								resultS = resultS + "Yes";
							}else{
								resultS = resultS + "No";
							}
							out.write(resultS);out.newLine(); 
							//writeLineToFile(resultS);
							
							state = TYPE_GOAL;
						}
						foodorder++;
					}
				}else{ //food num
					System.out.println(": TYPE_TEST_NUM :");
					foodsForTest = new ArrayList<int[]>();
					foodorder = 0;
					foodNumOfEachTest = Integer.valueOf(lineST.nextToken());
					testCount++;
					state = TYPE_FOODS;
				}
				
				line.delete(0, line.length());
				lineC++;
			}
			in.close();
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException ie) {
			ie.printStackTrace();
		} 
	}
	
	public static boolean calculate(int[] testGoalAmount, List<int[]> foodsForTest, int startnum, int depth, int nowSum[]){
		boolean rtnVal = false;
		int foodSum[] = {0,0,0};
		String blank = "";
		for (int dc=0;dc < depth;dc++)	blank = blank +"\t";
		System.out.println(blank+"depth "+depth+" start with food size in :"+startnum);
		System.out.println(" nowSum 1:"+nowSum[0]+"- nowSum 2:"+nowSum[1]+"- nowSum 3:"+nowSum[2]);
		for (int c=0;startnum+c < foodsForTest.size();c++){
			int [] currentFood = foodsForTest.get(startnum+c);
			foodSum[0] = currentFood[0] + nowSum[0];
			foodSum[1] = currentFood[1] + nowSum[1];
			foodSum[2] = currentFood[2] + nowSum[2];
			if ((testGoalAmount[0] == foodSum[0])&&(testGoalAmount[1] == foodSum[1])&&(testGoalAmount[2] == foodSum[2])){//answer
				System.out.println("---------->found it!!!!!!!!!! : startnum:"+startnum+"-count:"+c+"-depth:"+depth);
				System.out.println(" currentFood 1:"+currentFood[0]+"- currentFood 2:"+currentFood[1]+"- currentFood 3:"+currentFood[2]);
				return true;
			}else if ((testGoalAmount[0] < foodSum[0])||(testGoalAmount[1] < foodSum[1])||(testGoalAmount[2] < foodSum[2])){ // no more
				System.out.println(" no more and next :"+startnum+c);
			}else{//next depth
				System.out.println(" go next depth :");
				boolean cResult = calculate(testGoalAmount, foodsForTest, startnum+c+1, depth+1, foodSum);
				if (cResult)	{
					//System.out.println("->found it!!!!!!!!!! : startnum:"+startnum+"-count:"+c+"-depth:"+depth);
					System.out.println(" currentFood 1:"+currentFood[0]+"- currentFood 2:"+currentFood[1]+"- currentFood 3:"+currentFood[2]);
					return true;
				}
			}
			System.out.println(" when ");
		}
		
		return rtnVal;
	}
	
	public static void writeLineToFile(String line) throws IOException{
		BufferedWriter out = new BufferedWriter(new FileWriter("F:\\workspace\\HackTest\\src\\com\\main\\output.txt"));
		out.newLine(); out.write(line);
		out.close();
	}

}

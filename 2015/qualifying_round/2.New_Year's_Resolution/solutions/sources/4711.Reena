#include "stdio.h"
#include "stdlib.h"
#include "string.h"

// ---------------------------------------------------------------------------------
// Actual logic
// ---------------------------------------------------------------------------------

bool IsDietPossible ( int n, int maxValues[3], int allFoods[20][3])
{
	if(maxValues[0] == 0 && maxValues[1] == 0 && maxValues[2] == 0)
		return true;

	if(maxValues[0] < 0 || maxValues[1] < 0 || maxValues[2] < 0 || n <= 0)
		return false;

	int arrnew[3] = {maxValues[0]-allFoods[n-1][0], maxValues[1]-allFoods[n-1][1], maxValues[2]-allFoods[n-1][2]};
	return IsDietPossible(n-1, arrnew, allFoods) || IsDietPossible(n-1, maxValues, allFoods); // with or without u... ;)
}

// ---------------------------------------------------------------------------------
// This function takes the input file kept in the same dirctory with name "input.txt"
// and processes the input line by line and writes the output file in file
// "output.txt" in the same directory.
// ---------------------------------------------------------------------------------

int ProcessInputFile()
{
	static const char inputfile[] = "C:\\tmp\\input.txt";
	static const char outputfile[] = "C:\\tmp\\output.txt";

	FILE *Ipfile;
	fopen_s(&Ipfile, inputfile, "r" );
	FILE *Opfile; 
	fopen_s(&Opfile, outputfile, "w" );

	if ( Ipfile != NULL && Opfile != NULL)
	{
		char line [100];
		int caseNumber = 0, numCases = 0;

		if(fgets ( line, sizeof (line), Ipfile ) != NULL)
		{
			numCases =  atoi (line);
		}

		while ( numCases > 0 ) 
		{
			caseNumber++;
			int arr[3], values[20][3], n;
			/* read the arr */
			if(fgets ( line, sizeof (line), Ipfile ) != NULL)
			{
				char temp[100];
				int firstpos = 0;
				for(int i = 0; i<3; i++)
				{
					int temppos = 0;
					while(line[firstpos] != ' ' && line[firstpos] != '\0')
						temp[temppos++] = line[firstpos++];
					firstpos++;
					temp[temppos] = '\0';
					arr[i] = atoi(temp);
				}

				if(fgets ( line, sizeof (line), Ipfile ) != NULL)
				{
					n =  atoi (line);
					for(int k = 0; k<n; k++)
					{
						// read all the foods
						fgets ( line, sizeof (line), Ipfile );
						firstpos = 0;
						for(int i = 0; i<3; i++)
						{
							int temppos = 0;
							while(line[firstpos] != ' ' && line[firstpos] != '\0')
								temp[temppos++] = line[firstpos++];
							firstpos++;
							temp[temppos] = '\0';
							values[k][i] = atoi(temp);
						}
					}
				}

				bool possible = IsDietPossible( n, arr, values);
				if(possible)
					fprintf(Opfile, "Case #%d: yes\n", caseNumber);
				else
					fprintf(Opfile, "Case #%d: no\n", caseNumber);				

			}
			else
				break;

			numCases--;
		}
		fclose ( Ipfile );
		fclose ( Opfile );
	}
	else
	{
		if(Ipfile == NULL)
			perror ( inputfile ); /* why didn't the file open? */
		if(Opfile == NULL)
			perror ( outputfile ); /* why didn't the file open? */
	}
	return 0;
}

// ---------------------------------------------------------------------------------
// Main Function
// ---------------------------------------------------------------------------------

int main ( void )
{
   return ProcessInputFile();
}

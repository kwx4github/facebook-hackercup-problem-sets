package org.denisg.facebook;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class NewYearsResolution {

	public static class Calories {
		private int gp;
		private int gc;
		private int gf;

		public Calories(int gp, int gc, int gf) {
			this.gp = gp;
			this.gc = gc;
			this.gf = gf;
		}

		public void add(Calories calories) {
			this.gp += calories.gp;
			this.gc += calories.gc;
			this.gf += calories.gf;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + gc;
			result = prime * result + gf;
			result = prime * result + gp;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Calories other = (Calories) obj;
			if (gc != other.gc)
				return false;
			if (gf != other.gf)
				return false;
			if (gp != other.gp)
				return false;
			return true;
		}

		@Override
		public String toString() {
			return "Calories [gp=" + gp + ", gc=" + gc + ", gf=" + gf + "]";
		}

	}

	public static void main(String[] args) throws FileNotFoundException {
		Scanner in = new Scanner(new File("input.txt"));
		PrintStream out = new PrintStream(new File("output.txt"));
		try {
			int t = in.nextInt();
			for (int caseNumber = 1; caseNumber <= t; caseNumber++) {
				Calories target = new Calories(in.nextInt(), in.nextInt(),
						in.nextInt());
				int n = in.nextInt();
				List<Calories> products = new ArrayList<Calories>();
				for (int i = 0; i < n; i++) {
					products.add(new Calories(in.nextInt(), in.nextInt(), in
							.nextInt()));
				}
				out.println("Case #" + caseNumber + ": "
						+ (solve(target, products) ? "yes" : "no"));
			}
		} finally {
			in.close();
			out.close();
		}
	}

	public static boolean solve(Calories target, List<Calories> products) {
		int maxShift = products.size();
		for (int mask = 0; mask < (1 << maxShift); mask++) {
			Calories sum = new Calories(0, 0, 0);
			for (int shift = 0; shift < maxShift; shift++) {
				int bit = 1 << shift;
				if ((mask & bit) == bit) {
					sum.add(products.get(shift));
				}
			}
			if (sum.equals(target)) {
				return true;
			}
		}
		return false;
	}
}

#!/usr/bin/python

from sys import stdin

def main():
	T = int(stdin.readline().strip())
	cases = [None]*T
	
	# read input
	for x in range(T):
		goal = list(map(int, stdin.readline().split()))
		
		N = int(stdin.readline().strip())
		foods = [None]*N
		
		for y in range(N):
			foods[y] = list(map(int, stdin.readline().split()))
		
		cases[x] = (goal, foods)
	
	# solve and print
	for nCase in range(1, T+1):
		print("Case #{}: {}".format(nCase, solve(cases[nCase-1])))  

def solve(case):
	goal, foods = case
	Gp, Gc, Gf = goal
	N = len(foods)
	
	# iterate over all combinations of foods as bitmasks
	for mask in range(1 << N):
		P = C = F = 0
		
		# for all indices, add food on index if bit on index is 1
		for i in range(N):
			if ((mask >> i) & 1) == 0: continue
			food = foods[i]
			P += food[0]
			C += food[1]
			F += food[2]
		
		# check if this combination of foods gives the desired nutrition
		if (P==Gp) and (C == Gc) and (F == Gf):
			return "yes"
	
	# all combinations exhausted with no success
	return "no"

main()

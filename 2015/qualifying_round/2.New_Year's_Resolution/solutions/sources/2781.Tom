def sub_tuples(t1, t2):
    return tuple([i1 - i2 for i1, i2 in zip(t1, t2)])

def overshot(targets):
    return any(t < 0 for t in targets)

def perfect(targets):
    return all(t == 0 for t in targets)

def solve(items, targets):
    if perfect(targets):
        return True
    if overshot(targets) or items == []:
        return False
    alt_targets = sub_tuples(targets, items[0])
    return solve(items[1:], targets) or solve(items[1:], alt_targets)

def read_tuple():
    return tuple(map(int, raw_input().split()))

def run():
    ts = int(raw_input())
    for t in xrange(ts):
        targets = read_tuple()
        n = int(raw_input())
        items = [read_tuple() for i in xrange(n)]
        solved = solve(items, targets)
        print "Case #%d: %s" % (t + 1, "yes" if solved else "no")

if __name__ == "__main__":
    run()

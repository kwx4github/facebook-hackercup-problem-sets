#include<bits/stdc++.h>
using namespace std;
 
#define ARRAYSIZE(a) (sizeof(a))/(sizeof(a[0]))
 
static int chk1;
 
// prints subset found
bool chk(pair<int,pair<int,int> > t[],int size,int t2,int t3)
{
	if(chk1==0)
	{
		int sum1=0,sum2=0;
		for(int i=0;i<size;++i)
		{
			sum1+=t[i].second.first;
			sum2+=t[i].second.second;
	//		cout<<t[i].first<<" "<<t[i].second.first<<" "<<t[i].second.second<<" ";
		}
	//	cout<<sum1<<" "<<sum2;
	//	cout<<endl;
		if(sum1==t2&&sum2==t3)
		{
	//		cout<<"yes\n";
			chk1=1;
			return 1;
		}
	//	return 1;
		else
		{
	//		cout<<"no\n";
			return 0;
		}
	}
}
void printSubset(int A[], int size)
{
    for(int i = 0; i < size; i++)
    {
        printf("%*d", 5, A[i]);
    }
 
    printf("\n");
}
 
// qsort compare function
int comparator(const void *pLhs, const void *pRhs)
{
    int *lhs = (int *)pLhs;
    int *rhs = (int *)pRhs;
 
    return *lhs > *rhs;
}
 
// inputs
// s            - set vector
// t            - tuplet vector
// s_size       - set size
// t_size       - tuplet size so far
// sum          - sum so far
// ite          - nodes count
// target_sum   - sum to be found
void subset_sum(pair<int,pair<int,int> > s[], pair<int,pair<int,int> > t[],
                int s_size, int t_size,
                int sum, int ite,
                int const target_sum,int t2,int t3)
{
	bool ch21;
	//bool chk1,flag;
    //total_nodes++;
 
    if( target_sum == sum )
    {
        // We found sum
        ch21=chk(t, t_size,t2,t3);
        if(ch21)
 		return;
 		else
        {
			// constraint check
	        if( ite + 1 < s_size && sum - s[ite].first + s[ite+1].first <= target_sum )
	        {
	            // Exclude previous added item and consider next candidate
	            subset_sum(s, t, s_size, t_size-1, sum - s[ite].first, ite + 1, target_sum,t3,t3);
	        	//return flag;
			}
			//else
			//return 0;
    	}
    }
    else
    {
        // constraint check
        if( ite < s_size && sum + s[ite].first <= target_sum )
        {
            // generate nodes along the breadth
            for( int i = ite; i < s_size; i++ )
            {
                t[t_size].first = s[i].first;
                t[t_size].second.second = s[i].second.second;
 				t[t_size].second.first = s[i].second.first;
                if( sum + s[i].first <= target_sum )
                {
                    // consider next level node (along depth)
                    subset_sum(s, t, s_size, t_size + 1, sum + s[i].first, i + 1, target_sum,t2,t3);
                }
            }
            //return flag;
        }
        //else
        //return 0;
    }
}
 
// Wrapper that prints subsets that sum to target_sum
void generateSubsets(pair<int,pair<int,int> > s[21], int size, int target_sum,int t2,int t3,int val)
{
	chk1=0;
    pair<int,pair<int,int> > t[21];
 
    int total = 0,num=0;
 	sort(s,s+size);
    // sort the set
    //qsort(s, size, sizeof(int), &comparator);
 
    for( int i = 0; i < size; i++ )
    {
        total += s[i].first;
    }
 
    if( s[0].first <= target_sum && total >= target_sum )
    {
 
        subset_sum(s, t, size, 0, 0, 0, target_sum,t2,t3);
 
    }
    cout<<"Case #"<<val<<": ";
    if(chk1==1)
    cout<<"yes\n";
    else
    cout<<"no\n";
 
 //   free(tuplet_vector);
}
 
int main()
{
	freopen("in.txt","r",stdin);
	freopen("out.txt","w",stdout);
	int t,val,tot,size,t1,t2,t3,b,c,d;
	pair<int,pair<int,int> > a[21];
	cin>>t;
	tot=t;
	while(t--)
	{
		cin>>t1>>t2>>t3;
		cin>>size;
		for(int i=0;i<size;++i)
		{
			cin>>b>>c>>d;
			a[i]=make_pair(b,make_pair(c,d));
		}
	    //int weights[] = {15, 22, 14, 26, 32, 9, 16, 8};
	    //int target = 53;
	 
	    //int size = ARRAYSIZE(weights);
	 	val=tot-t;
	    generateSubsets(a, size, t1,t2,t3,val);
	 
	    //printf("Nodes generated %d\n", total_nodes);
	}
    return 0;
}

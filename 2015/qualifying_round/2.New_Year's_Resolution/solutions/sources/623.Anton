#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <string>
#include <algorithm>
#include <memory.h>
#include <tuple>

using namespace std;

#define forn(i, n) for(int i = 0; i < (n); ++i)
#define forv(i, a) forn(i, (int)a.size())

struct item {
    int val[3];

    item() {
        forn(i, 3) {
            val[i] = 0;
        }
    }

    item& operator+=(item const &other) {
        forn(i, 3) {
            val[i] += other.val[i];
        }

        return *this;
    }

    bool operator==(item const &other) const {
        forn(i, 3) {
            if (val[i] != other.val[i]) {
                return false;
            }
        }

        return true;
    }
};

istream& operator>>(istream &is, item &it) {
    forn(i, 3) {
        is >> it.val[i];
    }

    return is;
}


bool solve() {
    item goal;
    cin >> goal;

    int n;
    cin >> n;

    vector<item> a(n);
    forn(i, n) {
        cin >> a[i];
    }

    for (int mask = 0; mask < (1 << n); ++mask) {
        item cur;

        forn(i, n) {
            if (mask & (1 << i)) {
                cur += a[i];
            }
        }

        if (goal == cur) {
            return true;
        }
    }

    return false;
}

int main() {
#ifdef __ASD__
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);


    int T;
    cin >> T;

    forn(i, T) {
        bool res = solve();

        cout << "Case #" << i + 1 << ": " << (res ? "yes" : "no") << endl;
    }

	return 0;
}
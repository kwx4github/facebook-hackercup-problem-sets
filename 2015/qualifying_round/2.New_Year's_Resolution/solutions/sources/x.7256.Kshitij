cont=[]
rep=[]
P=[]
C=[]
F=[]
combi=[]
flag=False

from itertools import combinations
cases=int(input())
for count in range(cases):
    expected=input()
    GP, GC, GF=expected.split(" ")
    #print(GP, GC, GF)
    items=int(input())
    for each in range(items):
        cont.append(input())
    #print(cont)
    for each in cont:
        P.append(int(each.split(" ")[0]))
        C.append(int(each.split(" ")[1]))
        F.append(int(each.split(" ")[2]))

    #print(P,C,F)
    combi=([comb for i in range(items) for comb in combinations(P, i) if sum(comb) == int(GP)])
    print(combi)
    for each in combi:
        SC=0
        SF=0
        a=list(each)
        #print(a)
        for each in a:
            if each not in rep:
                #print("-REP--"+str(rep))
                rep.append(each)
                z=len([i for i,x in enumerate(a) if x == each])
                #print("Z"+str(z))
                if z>=1:
                    nun=[i for i,x in enumerate(P) if x == each]
                    #print("NUN --- "+str(nun))
                    i=0
                    while z>=1:
                        SC=SC+C[nun[i]]
                        #print("***"+str(C[nun[i]]))
                        SF=SF+F[nun[i]]
                        #print("***"+str(F[nun[i]]))
                        z=z-1
                        i=i+1
                        #print(SC, SF)
                

                
            #SC=SC+C[P.index(each)]
            #print("***"+str(C[P.index(each)]))
            #SF=SF+F[P.index(each)]
            #print("***"+str(F[P.index(each)]))
        #print(SC, SF)
        #print(GC, GF)
        #print(int(SC)==int(GC))

        if (int(SC)==int(GC)) and (int(SF)==int(GF)):
            flag=True
            break
        #print(flag)
    if flag==True:
        print("Case #"+str(count+1)+": yes")
    else:
        print("Case #"+str(count+1)+": no")


 
        

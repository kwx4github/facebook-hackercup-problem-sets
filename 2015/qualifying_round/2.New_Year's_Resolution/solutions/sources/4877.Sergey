#include <map>
#include <set>
#include <cmath>
#include <deque>
#include <limits>
#include <vector>
#include <string>
#include <cassert>
#include <iostream>
#include <cinttypes>
#include <algorithm>
#include <unordered_map>

using namespace std;
typedef uint64_t LL;

LL N;
LL Gp, Gc, Gf;
vector<LL> P, C, F;

LL getGrayCode(LL n)
{
    return n ^ (n >> 1);
}

bool canCompose()
{
    if (Gp + Gc + Gf == 0)
        return true;

    LL n = 1 << N;
    LL Tp = 0, Tc = 0, Tf = 0;
    LL previousCode = 0;

    for (LL i = 1; i < n; ++i)
    {
        LL code = getGrayCode(i);
        LL delta = previousCode ^ code;
        LL index = ffs(delta);
        assert(index > 0);
        index -= 1;

        LL mask = 1 << index;
        LL sign = previousCode & mask ? -1 : 1;
        Tp += sign * P[index];
        Tc += sign * C[index];
        Tf += sign * F[index];

        if (Tp == Gp && Tc == Gc && Tf == Gf)
            return true;

        previousCode = code;
    }

    return false;
}

int main(int, char**)
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    LL T;
    cin >> T;
    for (LL t = 1; t <= T; ++t)
    {
        cin >> Gp >> Gc >> Gf;

        cin >> N;
        P.resize(N);
        C.resize(N);
        F.resize(N);
        for (LL n = 0; n < N; ++n)
        {
            cin >> P[n] >> C[n] >> F[n];
        }

        bool can = canCompose();
        cout << "Case #" << t << ": " << (can ? "yes" : "no") << endl;
    }

    return 0;
}


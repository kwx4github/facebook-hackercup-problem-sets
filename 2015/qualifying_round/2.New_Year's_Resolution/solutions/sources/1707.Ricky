#include <tuple>
#include <queue>
#include <vector>
#include <iostream>
#include <map>
using namespace std;

typedef tuple<int, int, int> PCF;

int main(int argc, char *argv[]) {
    int T;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        int gp, gc, gf;
        cin >> gp >> gc >> gf;
        PCF target{gp, gc, gf};
        int n;
        cin >> n;
        vector<PCF> foods;
        for (int i = 0; i < n; ++i) {
            int p, c, f;
            cin >> p >> c >> f;
            foods.push_back(PCF{p, c, f});
        }
        PCF start{0, 0, 0};
        queue<PCF> Q;
        map<PCF, bool> track;
        Q.push(start);
        track[start] = true;
        while (!Q.empty()) {
            PCF curr = Q.front();
            if (curr == target) {
                break;
            }
            Q.pop();
            for (auto &pcf : foods) {
                PCF next{curr};
                get<0>(next) += get<0>(pcf);
                get<1>(next) += get<1>(pcf);
                get<2>(next) += get<2>(pcf);
                if (next <= target && track.find(next) == track.end()) {
                    Q.push(next);
                    track[next] = true;
                }
            }
        }
        cout << "Case #" << t + 1 << ": " << (Q.empty() ? "no" : "yes") << endl;
    }
    return 0;
}

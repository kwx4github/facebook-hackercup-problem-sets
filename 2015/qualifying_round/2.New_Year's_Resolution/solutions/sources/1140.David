#include <algorithm>
#include <cassert>
#include <fstream>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <utility>
#include <vector>

using namespace std;

struct nutricion {
public:
	unsigned p, c, f;

	nutricion() : p(0), c(0),f(0) {}
	nutricion(unsigned p, unsigned c, unsigned f) : p(p), c(c),f(f) {}

	bool operator<(const nutricion& rhs) const
	{
		if (p < rhs.p)
			return true;
		else if (p == rhs.p) {
			if (c < rhs.c)
				return true;
			else if (c == rhs.c) {
				return (f < rhs.f);
			}
		}
		return false;
	}
};

/*
 * Input
 *
 * Input begins with an integer T, the number of test cases.
 *
 * For each test case, the first line consists of three space-separated integers: GP, GC, and GF, which
 * represent the amount of protein, carbohydrates, and fat that Alex wants to eat.
 *
 * The next line has the number of foods for that test case, an integer N.
 *
 * The next N lines each consist of three space-separated integers: P, C, and F, which represent the amount
 * of protein, carbohydrates, and fat in that food, respectively.
 *
 * Output
 *
 * For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for
 * Alex to eat the exact amount of each macronutrient, or "no" if it is not possible.
 *
 * Constraints
 *
 * 1 ≤ T ≤ 20
 * 1 ≤ N ≤ 20
 * 10 ≤ GP, GC, GF ≤ 1000
 * 10 ≤ P, C, F ≤ 1000
 */

bool solve(const nutricion& G, const vector<nutricion>& foods)
{
	set<nutricion> result;
	nutricion zero;
	zero.p = zero.c = zero.f = 0;

	result.insert(zero);

	bool match_p = G.p == 0;
	bool match_c = G.c == 0;
	bool match_f = G.f == 0;

	for (const auto& i : foods) {
		if (match_p && match_c && match_f)
			return true;

		auto tmp = result;

		for (const auto& j : tmp) {
			if (i.p + j.p > G.p)
				continue;
			if (i.c + j.c > G.c)
				continue;
			if (i.f + j.f > G.f)
				continue;

			result.insert(nutricion(i.p + j.p, i.c + j.c, i.f + j.f));

			if (i.p + j.p == G.p)
				match_p = true;
			if (i.c + j.c == G.c)
				match_c = true;
			if (i.f + j.f == G.f)
				match_f = true;

			if (match_p && match_c && match_f)
				return true;
		}
	}

	if (match_p && match_c && match_f)
		return true;

	return false;
}

int main(int argc, char** argv)
{
	if (argc < 2) {
		std::cerr << "Need an input file" << std::endl;
	}
	else {
		std::fstream input;
		input.open(argv[1], std::fstream::in);

		if (!input.is_open())
			return -1;

		unsigned T;
		input >> T;

		for (unsigned i = 1; i <= T; ++i) {
			nutricion G;

			input >> G.p >> G.c >> G.f;

			unsigned N;
			input >> N;

			vector<nutricion> foods;

			for (unsigned j = 1; j <= N; ++j) {
				nutricion food;

				input >> food.p >> food.c >> food.f;

				foods.push_back(food);
			}

			bool retval = solve(G, foods);

			std::cout << "Case #" << i << ": ";
			std::cout << (retval ? "yes" : "no") << std::endl;
		}
	}
	return 0;
}


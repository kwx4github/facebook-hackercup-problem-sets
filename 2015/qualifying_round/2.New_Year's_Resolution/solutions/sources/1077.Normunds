def solve(G, food):
	N = len(food)
	if N == 1:
		return G == food[0]

	def get(B):
		s = [0] * 3
		for i, f in enumerate(food):
			if ((B >> i) & 1):
				s = [x + y for x, y in zip(s, f)]
		return tuple(s)

	n = N / 2
	s1 = set(get(B) for B in xrange(1 << n))
	s2 = set(get(B << n) for B in xrange(1 << (N - n)))

	for a in s1:
		b = tuple(x - y for x, y in zip(G, a))
		if b in s2:
			return True

	return False

fin, fout = open('B2.in', 'r'), open('B2.out', 'w')
for t in xrange(int(fin.readline())):
	G = [int(x) for x in fin.readline().strip().split(' ')]
	food = [[int(x) for x in fin.readline().strip().split(' ')] for i in xrange(int(fin.readline()))]
	fout.write('Case #%d: %s\n' % (t + 1, 'yes' if solve(G, food) else 'no'))

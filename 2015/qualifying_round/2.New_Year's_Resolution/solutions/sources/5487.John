/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package facebookhackercupqualifier30;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

/** Program to solve the following problem:
 * 
 * 
 *  Alex's New Year's resolution for 2015 is to eat healthier foods. He's done 
 * some research and has found out that calories come from three main sources, 
 * called macronutrients: protein, carbohydrates, and fat. Alex wants to get the 
 * right balance of protein, carbohydrates, and fat to have a balanced diet. For 
 * each available food, Alex can only choose to eat it or not eat it. He can't 
 * eat a certain food more than once, and he can't eat a fractional amount of a food.
    Input

    Input begins with an integer T, the number of test cases. For each test case, the first line consists of three space-separated integers: GP, GC, and GF, which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. The next line has the number of foods for that test case, an integer N. The next N lines each consist of three space-separated integers: P, C, and F, which represent the amount of protein, carbohydrates, and fat in that food, respectively.
    Output

    For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for Alex to eat the exact amount of each macronutrient, or "no" if it is not possible.
    Constraints

    1 ≤ T ≤ 20
    1 ≤ N ≤ 20
    10 ≤ GP, GC, GF ≤ 1000
    10 ≤ P, C, F ≤ 1000 
 * 
 * 
 * *************************************************************************** *
 * I will be attempting to solve this problem via recursion.
 * 
 * @author John
 */
public class FacebookHackerCupQualifier30 {

    // P rotien     C arbohydrates      F at

    private int goalP = 0;
    private int goalC = 0;
    private int goalF = 0;

    private int numberOfFoodTypes = 0;

    private int[] foodP = new int [20];  
    private int[] foodC = new int [20];
    private int[] foodF = new int [20];
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException
    {
        FacebookHackerCupQualifier30 myProgram = new FacebookHackerCupQualifier30();
        
        myProgram.begin();
    }
    
    private void begin() throws IOException {
        
        Scanner     inputStream     = null;
        PrintStream outputStream    = null;
        
        int numberOfProblems = 99;          // Just an initialization value.
        
        try
        {
            inputStream     = new Scanner       (new File("input.txt"));
            outputStream    = new PrintStream   (new FileOutputStream("output.txt"));
            
            if(inputStream.hasNextInt())
            {
                numberOfProblems = inputStream.nextInt();
                
                if(numberOfProblems > 20)
                {
                    // I have been misinformed!!!
                    numberOfProblems = 20;
                }
            }
            
            for(int i = 0; inputStream.hasNextInt() && i < numberOfProblems; i++)
            {
                goalP = inputStream.nextInt();
                goalC = inputStream.nextInt();
                goalF = inputStream.nextInt();
                
                numberOfFoodTypes = inputStream.nextInt();
                
                if (numberOfFoodTypes >= 20)
                {
                    // I have misunderstood, or an error!
                    numberOfFoodTypes = 20;
                }
                
                for(int j = 0; inputStream.hasNextInt() && j < numberOfFoodTypes; j++)
                {
                    foodP[j] = inputStream.nextInt();
                    foodC[j] = inputStream.nextInt();
                    foodF[j] = inputStream.nextInt();
                }
                
                if (canReachGoals(0,0,0,0))
                {
                    System.out.println  ("Case #" + (i + 1) + ": yes");
                    outputStream.println("Case #" + (i + 1) + ": yes");
                }
                else
                {
                    System.out.println  ("Case #" + (i + 1) + ": no");
                    outputStream.println("Case #" + (i + 1) + ": no");
                }
            }
            
            
        }
        finally
        {
            if (inputStream != null)
            {
                inputStream.close();
            }
            if (outputStream != null)
            {
                outputStream.close();
            }
        }
    }
    
    // canReachGoals is the function that does the heavy lifting in this problem.
    //  
    //  Basically, it goes through the arrays and checks whether we could reach 
    //  our goals by counting all combinations of the foods.
    //  It takes the current index as 'index', refering to foodP, foodC and foodF,
    //      and the current nutrition of that path as arguments.
    private boolean canReachGoals(int index, int currP, int currC, int currF)
    {
    // Base cases:
        // In the case that we have exhausted all possible foods, return false.
        if (index >= numberOfFoodTypes)
        {
            return false;
        }
        // If we are over any goal, return false.
        else if (currP > goalP || currC > goalC || currF > goalF)
        {
            return false;
        }
        // Figure whether we can eat the current ('index') food to reach the goal!
        else if (currP + foodP[index] == goalP && currC + foodC[index] == goalC && currF + foodF[index] == goalF)
        {
            return true;
        }
    // Recursive cases:
        // Test whether we can reach our goals by eating the 'index'-th food.
        else if (canReachGoals(index + 1, currP + foodP[index], currC + foodC[index], currF + foodF[index]))
        {
            return true;
        }
        // Test whether we can reach our goals if we skip this food.
        else if (canReachGoals(index + 1, currP, currC, currF))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

#include <iostream>
#include <vector>
#include <array>
#include <math.h>
#include <algorithm>
using namespace std;


void convert_to_bitvec(int c,vector<bool>& bit_vec,int n)
{
  int max_count = pow(2,n)-1;
 /* if(c==max_count)
  cout<<c<<endl;*/
  while(c)
  {
    bit_vec.push_back(c%2);
    c=c/2;
  }
  /*if(c==max_count)
  cout<<"after c"<<endl;*/
  reverse(bit_vec.begin(),bit_vec.end());
}

bool sums_to(int val1,int val2,int val3,vector<int> cal_vals1,vector<int> cal_vals2,vector<int> cal_vals3)
    {
      if((val1==0)&&(val2==0)&&(val3==0))
	return true;
      if((val1<0)||(val2<0)||(val3<0))
	return false;
      if(cal_vals1.size()==0)
	return false;
      
      for(int i=0;i<cal_vals1.size();i++)
      {
	vector<int> copy_cal_vals1 = cal_vals1;
	vector<int> copy_cal_vals2 = cal_vals2;
	vector<int> copy_cal_vals3 = cal_vals3;
	
	copy_cal_vals1.erase(copy_cal_vals1.begin()+i);
	copy_cal_vals2.erase(copy_cal_vals2.begin()+i);
	copy_cal_vals3.erase(copy_cal_vals3.begin()+i);
	
	if(sums_to((val1-cal_vals1[i]),(val2-cal_vals2[i]),(val3-cal_vals3[i]),copy_cal_vals1,copy_cal_vals2,copy_cal_vals3))
	{
	 return true;
	}
      }
      return false;
    }
int main()
{
  int T;
  cin>>T;
  
  for(int i=0;i<T;i++)
  {
    array<int,3> target_arr;
    cin>>target_arr[0]>>target_arr[1]>>target_arr[2];
    int n;
    cin>>n;
    
    //vector<int> a(n,0),b(n,0),c(n,0);
    vector<int> cal_vals1,cal_vals2,cal_vals3;
    for(int i=0;i<n;i++)
    {
      int cal=0;
      cin>>cal;
      cal_vals1.push_back(cal);
      cin>>cal;
      cal_vals2.push_back(cal);
      cin>>cal;
      cal_vals3.push_back(cal);
    }
    
    /*vector<bool> bit_vec(n,0);
    int c=1;
    int max_count = pow(2,n)-1;
    vector<vector<bool>> is_cal_poss;
    for(int i=0;i<3;i++)
    {
      vector<bool> vec(1000,0);
      is_cal_poss.push_back(vec);
    }    
    vector<bool> is_cal_poss(3,0);
    bool flag=0;
    */
    if(sums_to(target_arr[0],target_arr[1],target_arr[2],cal_vals1,cal_vals2,cal_vals3))
    {cout<<"Case #"<<(i+1)<<": "<<"yes"<<endl;}
     else
     { cout<<"Case #"<<(i+1)<<": "<<"no"<<endl;}
    
    /*
    while(c<=max_count)
    {
      convert_to_bitvec(c,bit_vec,n);
      vector<int> sum(3,0);
      for(int i=0;i<n;i++)
      {
	if(bit_vec[i])
	{
	  for(int j=0;j<3;j++)
	  {
	    sum[j]+=cal_vals[i][j];
	    if(sum[j]>target_arr[j])
	    {
	      break;
	    }
	  }
	    
	 
	}
      }	
      bool is_poss=1;
      for(int i=0;i<3;i++)
      {
	if(sum[i]!=target_arr[i])
	  is_poss=0;
      }*/
    
    /*
    int c=1;
    int max_count = pow(2,n);
    vector<bool> bit_vec;
    vector<int> calorie_val()
    while(c<=max_count)
    {
      convert_to_bitvec(c,bit_vec);
      array<int,3> sum;
      for(int i=0;i<n;i++)
      {
	if(bit_vec[i])
	{
	  sum[0]+=a[i];
	  sum[1]+=b[i];
	  sum[2]+=c[i];
	  
	  if(sum[0]<target_arr[0])
	  {
	    
	  }
	}
      }
      c++;
      
    }*/
    /*
    for(int i=0;i<n;i++)
    {
      for(int j=0;j<3;j++)
      {
	cout<<cal_vals[i][j]<<"\t";
      }
      cout<<endl;
    }
    */
  }
  return 0;
}
#include<stdio.h>
#include<fstream>
struct node
{
    int p,c,f;
};
bool isSubsetSum(struct node set[], int n, struct node sum)
{
   // Base Cases
   if (sum.p == 0&&sum.c==0&&sum.c==0)
     return true;
   if (n == 0 &&(sum.c!= 0||sum.p!=0||sum.f!=0))
     return false;

   // If last element is greater than sum, then ignore it
   if (set[n-1].p > sum.p||set[n-1].c>sum.c||set[n-1].f>sum.f)
     return isSubsetSum(set, n-1, sum);

   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
    struct node val;

    val.p=sum.p-set[n-1].p;val.c=sum.c-set[n-1].c;val.f=sum.f-set[n-1].f;
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1,val);
}
int main()
{
    freopen("new_years_resolution.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int test,p,n,i;
    scanf("%d",&test);
    for(p=1;p<=test;p++)
    {
        printf("Case #%d: ",p);
        struct node val;
        scanf("%d %d %d",&val.p,&val.c,&val.f);
        scanf("%d",&n);
        struct node item[n];
        for(i=0;i<n;i++)
        {
            scanf("%d %d %d\n",&item[i].p,&item[i].c,&item[i].f);
        }
        if (isSubsetSum(item, n, val) == true)
            printf("yes\n");
        else
            printf("no\n");
    }
    return 0;
}

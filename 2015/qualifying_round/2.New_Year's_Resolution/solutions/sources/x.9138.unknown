import java.util.*;

class Solution{
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		int T = in.nextInt();
		for(int i=1;i<=T;i++){
			int[] G = new int[3];
			G[0] = in.nextInt();
			G[1] = in.nextInt();
			G[2] = in.nextInt();
			int N = in.nextInt();
			PCF pcf[] = new PCF[N];
			for(int j=0;j<N;j++){
				pcf[j] = new PCF(in.nextInt(), in.nextInt(), in.nextInt());
			}
			PCF res[][] = new PCF[3][N];
			System.out.print("Case #"+i+": ");

			if(findSumP(pcf, N, 0, G, 0, res))
				System.out.println("yes");
			else
				System.out.println("no");
		}
	}
	static boolean findSumP(PCF[] ar, int len, int st, int[] G, int idx, PCF[][] res){
		if(G[0] == 0){
			return findSumC(res[0], idx, 0, G, 0, res);
		}
		if(G[0]<0 || st >= len)
			return false;
		if(findSumP(ar, len, st+1, G, idx, res))
			return true;
		res[0][idx] = ar[st];
		G[0] -= ar[st].p;
		boolean valid = findSumP(ar, len, st+1, G, idx+1, res);
		G[0] += ar[st].p;
		return valid;
	}

	static boolean findSumC(PCF[] ar, int len, int st, int[] G, int idx, PCF[][] res){
		if(G[1] == 0){
			return findSumF(res[1], idx, 0, G, 0, res);
		}
		if(G[1]<0 || st >= len)
			return false;
		if(findSumC(ar, len, st+1, G, idx, res))
			return true;
		res[1][idx] = ar[st];
		G[1] -= ar[st].c;
		boolean valid = findSumC(ar, len, st+1, G, idx+1, res);
		G[1] += ar[st].c;
		return valid;
	}

	static boolean findSumF(PCF[] ar, int len, int st, int[] G, int idx, PCF[][] res){
		if(G[2] == 0){
			return true;
		}
		if(G[2]<0 || st >= len)
			return false;
		if(findSumF(ar, len, st+1, G, idx, res))
			return true;
		res[2][idx] = ar[st];
		G[2] -= ar[st].f;
		boolean valid = findSumF(ar, len, st+1, G, idx+1, res);
		G[2] += ar[st].f;
		return valid;
	}
}

class PCF{
	int p, c, f;
	PCF(int p, int c, int f){
		this.p = p;
		this.c = c;
		this.f = f;
	}
	void print(){
		System.out.println(this.p + " " + this.c + " " + this.f);
	}
}
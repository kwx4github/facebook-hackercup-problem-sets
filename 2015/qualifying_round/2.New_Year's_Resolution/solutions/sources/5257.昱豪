#include <cstdio>

struct nutrient {
    int protein, carbohydrates, fat;
    nutrient (): protein(0), carbohydrates(0), fat(0)
    {
    }
    friend nutrient operator+ (const nutrient &A, const nutrient &B);
} food[20], goal;

int total;

bool operator== (const nutrient &A, const nutrient &B)
{
    return  A.protein == B.protein && 
            A.carbohydrates == B.carbohydrates && 
            A.fat == B.fat;
}

bool operator<= (const nutrient &A, const nutrient &B)
{
    return  A.protein <= B.protein && 
            A.carbohydrates <= B.carbohydrates && 
            A.fat <= B.fat;
}

nutrient operator+ (const nutrient &A, const nutrient &B) 
{
    nutrient tmp;
    tmp.protein = A.protein + B.protein;
    tmp.carbohydrates = A.carbohydrates + B.carbohydrates;
    tmp.fat = A.fat + B.fat;
    return tmp;
}

bool recursive (nutrient now, int stage)
{
    if (stage > total)
        return false;
    if (now == goal)
        return true;
    else if (now <= goal)
        return  recursive (now + food[stage], stage+1) ||
                recursive (now, stage+1);
    else 
        return false;
}

int main(void)
{
    int run;
    for (int _case = scanf("%d", &run); _case <= run; _case++) {
        scanf("%d%d%d", &goal.protein, &goal.carbohydrates, &goal.fat );
        scanf("%d", &total);
        for (int i = 0; i < total; i++) {
            scanf("%d%d%d", &food[i].protein, &food[i].carbohydrates, &food[i].fat);
        }
        nutrient init = nutrient();
        bool result = recursive( init, 0);
        printf("Case #%d: %s\n", _case, result ? "yes" : "no");
    }
    return 0;
}

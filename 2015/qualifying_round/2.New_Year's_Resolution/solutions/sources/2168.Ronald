from itertools import chain, combinations

# from itertools docs
def powerset(iterable):
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

# brute force uh oh
def possible(total, foods):
    subsets = powerset(range(len(foods)))
    for subset in subsets:
        subset_total = [0, 0, 0]
        for j in subset:
            for k in range(3):
                subset_total[k] += foods[j][k]
        if subset_total == total:
            return True
    return False

cases = int(raw_input())
for case in range(1, cases + 1):
    total = [int(t) for t in raw_input().split()]
    num_foods = int(raw_input())
    foods = []
    for i in range(num_foods):
        foods.append([int(c) for c in raw_input().split()])
    result = "yes" if possible(total, foods) else "no"
    print "Case #{0}: {1}".format(case, result)


import operator

def get_input(file):
    with open(file) as f:
        data = f.read()
    
    return data.split('\n')[:-1]

def get_hash_value(required, index):
    hash_ = "%s_%s_%s_%s" % ( required[0], required[1], required[2], index)
    return hash_

def calc(required, foods, index, map_result):
    n = len(foods)
    # print required, index


    hash_ = get_hash_value(required, index)
    if hash_ in map_result:
        return map_result[hash_]

    if required == [0, 0, 0]:
        map_result[hash_] = 1
        return 1

    if index > n-1:
        map_result[hash_] = 0
        return 0

    for current in xrange(index, n):
        new_required = map(operator.sub, required ,foods[current])

        should_call = True
        for value in new_required:
            if value < 0:
                should_call = False

        if ( should_call and calc(new_required, foods, current+1, map_result) ) or calc(required, foods, current+1, map_result):
            return 1 

    return 0

def solution():
    input_arr = get_input("new_years_resolution_example_input.txt")
    case = int(input_arr[0])
    input_index_prefix = 0
    for i in xrange(case):
        map_result = {}
        required = input_arr[input_index_prefix + 1].split(' ')
        required = [ int(value) for value in required] 

        food_no = int(input_arr[input_index_prefix + 2])

        foods = []
        for j in xrange(food_no):
            a_food = input_arr[input_index_prefix + 3 + j].split(' ')
            a_food = [ int(value) for value in a_food] 
            foods.append(a_food)    

        answer = calc(required, foods, 0, map_result)
        if answer:
            answer = 'yes'
        else:
            answer = 'no'

        print "Case #%s: %s" % ( i+1, answer)

        input_index_prefix += food_no + 2
        


solution()


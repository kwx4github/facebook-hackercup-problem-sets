import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by anhsu on 1/9/15.
 */
public class NewYearsResolution {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("new_years_resolution.txt"));
        PrintWriter writer = new PrintWriter("new_years_resolution_output.txt", "UTF-8");

        int numOfTestCases = Integer.valueOf(br.readLine());

        for (int i = 1; i <= numOfTestCases; i++) {
            String isPossible = "no";

            String amountWantToEatLine = br.readLine();
            String[] amounts = amountWantToEatLine.split("\\s+");
            Integer numOfFoods = Integer.valueOf(br.readLine());
            int[] column1 = new int[numOfFoods];
            int[] column2 = new int[numOfFoods];
            int[] column3 = new int[numOfFoods];
            int column1TargetSum = Integer.valueOf(amounts[0]);
            int column2TargetSum = Integer.valueOf(amounts[1]);
            int column3TargetSum = Integer.valueOf(amounts[2]);
            for (int j = 0; j < numOfFoods; j++) {
                String[] foodArray = br.readLine().split("\\s+");
                column1[j] = Integer.valueOf(foodArray[0]);
                column2[j] = Integer.valueOf(foodArray[1]);
                column3[j] = Integer.valueOf(foodArray[2]);
            }

            for (int k = 1; k < Math.pow(2, numOfFoods); k++) {
                int sumCol1 = 0;
                int sumCol2 = 0;
                int sumCol3 = 0;
                List<Integer> picks = subset(k, numOfFoods);
                for (int number : picks) {
                    sumCol1 = column1[number] + sumCol1;
                    sumCol2 = column2[number] + sumCol2;
                    sumCol3 = column3[number] + sumCol3;
                }
                if (sumCol1 == column1TargetSum && sumCol2 == column2TargetSum && sumCol3 == column3TargetSum) {
                    isPossible = "yes";
                    break;
                }
            }

            writer.println("Case #" + i + ": " + isPossible);

        }
        writer.close();
        br.close();
    }

    private static List<Integer> subset(int number, int n) {
        List<Integer> res = new ArrayList<>();
        char[] binaryNumber = Integer.toBinaryString(number).toCharArray();
        int length = binaryNumber.length;
        int index = n - 1;
        for (int i = length - 1; i >= 0; i--) {
            if (binaryNumber[i] == '1') {
                res.add(index);
            }
            index--;
        }
        return res;
    }
}

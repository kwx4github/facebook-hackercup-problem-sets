#!/usr/bin/env python3
#  Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some research and has found out that calories come from three main sources, called macronutrients: protein, carbohydrates, and fat. Alex wants to get the right balance of protein, carbohydrates, and fat to have a balanced diet. For each available food, Alex can only choose to eat it or not eat it. He can't eat a certain food more than once, and he can't eat a fractional amount of a food.
# Input

# Input beings with an integer T, the number of test cases. For each test case, the first line consists of three space-separated integers: GP, GC, and GF, which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. The next line has the number of foods for that test case, an integer N. The next N lines each consist of three space-separated integers: P, C, and F, which represent the amount of protein, carbohydrates, and fat in that food, respectively.
# Output

# For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for Alex to eat the exact amount of each macronutrient, or "no" if it is not possible.
# Constraints

# 1 ≤ T ≤ 20
# 1 ≤ N ≤ 20
# 10 ≤ GP, GC, GF ≤ 1000
# 10 ≤ P, C, F ≤ 1000 

import fileinput, sys, math

def write_out(buff, case, smallest, largest):
    """
    Write to output file case number, smallest, and largest numbers possible
    """
    buff.write("Case #{}: {} {}\n".format(case, smallest, largest))

def add_nutrients(a, b):
    return [x + y for x, y in zip(a, b)]

def greater_than(a, b):
    """
    Return if any elements in a is larger than b.
    """
    for ela, elb in zip(a, b):
        if ela > elb:
            return True
    return False

def combo_exists(quota, foods, nuts_so_far):
    if len(foods) == 0 or greater_than(nuts_so_far, quota):
        return False
    if add_nutrients(nuts_so_far, foods[0]) == quota:
        return True
    else:
        return combo_exists(quota, foods, add_nutrients(nuts_so_far, foods[0])) or combo_exists(quota, foods[1:], nuts_so_far)


file_input = open(sys.argv[1])
file_output = open(sys.argv[2], "w")

#file_input = open('test_in.txt')
#file_output = open('test_out.txt', "w")

line = file_input.readline()[:-1]

num_cases = int(line)
for case in range(num_cases):
    quota = [int(nut) for nut in file_input.readline()[:-1].split()] # quota of nutrients
    
    num_foods = int(file_input.readline()[:-1])
    foods = []
    for _ in range(num_foods):
        foods.append([int(nut) for nut in file_input.readline()[:-1].split()])

    possibility = "yes" if combo_exists(quota, foods, [0] * len(quota)) else "no"
    file_output.write("Case #{}: {}\n".format(case + 1, possibility))

file_output.close()
exit()

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;


public class resolution { // TO CHANGE: this class name

	public static boolean compare(int[] a, int[] b) {
		for (int i = 0; i < a.length; i++) {
			if (a[i] != b[i]) {
				return false;
			}
		}
		return true;
	}

	public static void solve() throws IOException {
		int t = nextInt();
		test: for (int iii = 0; iii < t; iii++) {
			int[] min = new int[3];
			for (int i = 0; i < 3; i++) {
				min[i] = nextInt();
			}
			int g = nextInt();
			int[][] feed = new int[g][3];
			for (int i = 0; i < g; i++) {
				for (int j = 0; j < 3; j++) {
					feed[i][j] = nextInt();
				}
			}
			for (int i = 1; i < (1 << g); i++) {
				int[] temp = new int[3];
				for (int j = g - 1; j >= 0; j--) {
					if (((i & (1 << j)) == (1 << j))) {
						for (int k = 0; k < 3; k++) {
							temp[k] += feed[g - 1 - j][k];
						}
					}
				}
				if (compare(temp, min)) {
					println("Case #"+(iii+1)+": "+"yes");
					continue test;
				}
			}
			println("Case #"+(iii+1)+": "+"no");
		}
	}

	public static void main(String[] args) throws Exception { // file loading
																// from
																// Kapparate
		in = new BufferedReader(new FileReader("resolution.in"));
		// in = new BufferedReader(new InputStreamReader(System.in));
		// TO CHANGE: the file input output name is not always assign.in /
		// assign.out
		out = new PrintWriter(new BufferedWriter(new FileWriter(
				"resolution.txt")));
		solve();
		in.close();
		out.close();
	}

	public static StringTokenizer tokenizer;
	public static BufferedReader in;
	public static PrintWriter out;

	public static String nextToken() throws IOException {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			tokenizer = new StringTokenizer(in.readLine());
		}
		return tokenizer.nextToken();
	}

	public static String nextString() throws IOException {
		return nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	public static void println(int x) {
		System.out.println(x);
		out.println(x);
	}

	public static void println(String x) {
		System.out.println(x);
		out.println(x);
	}

	public static void print(String x) {
		System.out.print(x);
		out.print(x);
	}

	public static void print(int x) {
		System.out.print(x);
		out.print(x);
	}
}

#pragma warning (disable : 4996)

#include <stdlib.h>
#include <iostream>
#include <vector>
#include <string>
#include <assert.h>
#include <stack>
#include <algorithm>
#include <ios>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <queue>
#include <set>
#include <functional>
#include <cmath>
#include <sstream>
#include <map>
#include <memory.h>
#include <stdio.h>
#include <cassert>
#include <string.h>
#include <deque>

#define forn(i , n) for (int i = 0; i < n; ++i)
#define down(i, n) for (int i = n - 1; i >= 0; --i)


using namespace std;

typedef unsigned long long int u64;
typedef long long int i64;
typedef vector<int> vint;
typedef vector<i64> vi64;
typedef pair<int, int> pint;
typedef pair<i64, i64> pi64;

#define FILE_NAME "file"
#define CONTEST "seq"
#define M_PI 3.14159265358979323846

double sqr(double a)
{
	return a * a;
}

const i64 inf = 100000000000000000LL;


int main()
{
	clock_t start = clock();
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout << fixed << setprecision(15);
#ifdef FILE_INPUT
	freopen(FILE_NAME ".in", "r", stdin);
	freopen(FILE_NAME ".out", "w", stdout);
#else 
	freopen(CONTEST ".in", "r", stdin);
	freopen(CONTEST ".out", "w", stdout);
#endif
	int T;
	cin >> T;
	forn(t, T)
	{
		int p[3] = {0};
		forn(i, 3)
		{
			cin >> p[i];
		}
		int n;
		cin >> n;
		vector<vint> arr(n);
		forn(i, n)
		{
			arr[i].resize(3);
			forn(j, 3)
			{
				cin >> arr[i][j];
			}
		}
		bool flag = false;
		forn(i, (1 << n))
		{
			vint used(n, 0);
			forn(j, n)
			{
				if (((1 << j) & i))
				{
					used[j] = 1;
				}
			}
			int c[3] = {0};
			forn(j, n)
			{
				if (used[j])
				{
					forn(k, 3)
					{
						c[k] += arr[j][k];
					}
				}
			}
			if (c[0] == p[0] && c[1] == p[1] && c[2] == p[2])
			{
				cout << "Case #" << (t + 1) << ": " << "yes" << "\n";
				flag = true;
				break;
			}

		}
		if (!flag)
		{
			cout << "Case #" << (t + 1) << ": " << "no" << "\n";
		}
		
	}
	
	return 0;
}

#! /usr/bin/ruby

class Array
    def subset_sum(value)
        ans = []
        old = [[]]
        self.each_with_index do |e, index| 
            new_subsets = []
            new_subsets << [index] if e <= value
            old.each do |old_subset|
                current_subset = old_subset + [index]
                sum = current_subset.inject(0){|memo, i| memo += self[i]}
                if (sum == value); ans << current_subset
                else; new_subsets << current_subset if sum < value
                end
            end
            old = old + new_subsets
        end
        return ans
    end 
end

def check arr, indexes, target
    sum = 0
    for i in indexes
        sum += arr[i]
    end
   
    if (sum == target); return true
    else; return false
    end
end

def solve p, c, f, gp, gc, gf
    poss = p.subset_sum(gp);
    return false if poss.empty?

    poss = poss.select {|e| check(c, e, gc)}
    return false if poss.empty?    

    poss = poss.select {|e| check(f, e, gf)}
    return false if poss.empty?

    return true
end

input = File.new "input.in", "r"
output = File.new "output.out", "w"

T = input.readline.to_i
for i in (1..T)
    gp, gc, gf = input.readline.split(" ").map(&:to_i)
    p = []
    c = []
    f = []
    n = input.readline.chomp.to_i
    n.times do
        curr_p, curr_c, curr_f = input.readline.split(" ").map(&:to_i)
        p << curr_p
        c << curr_c
        f << curr_f
    end
    if (solve(p, c, f, gp, gc, gf))
        output.puts "Case ##{i}: yes"
    else
        output.puts "Case ##{i}: no"
    end
end
input.close
output.close




import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {
	static BufferedReader reader;
	static PrintWriter writer;
	static StringTokenizer tokenizer;

	static String name = "task";

	static String nextToken() throws IOException {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			tokenizer = new StringTokenizer(reader.readLine());
		}
		return tokenizer.nextToken();
	}

	public static void main(String[] args) throws IOException {
		reader = new BufferedReader(new InputStreamReader(new FileInputStream(name + ".in")));
		writer = new PrintWriter(name + ".out");
		// reader = new BufferedReader(new InputStreamReader(System.in));
		// writer = new PrintWriter(System.out);
		tokenizer = null;
		solve();
		reader.close();
		writer.close();
	}

	static void solve() throws IOException {
		int t = Integer.parseInt(nextToken());
		for (int tst = 0; tst < t; tst++) {
			writer.print("Case #" + (tst + 1) + ": ");
			banana();
		}
	}

	static int food[][];
	static int n;

	static boolean canReach(int i, int x, int y, int z) {
		if (i == n)
			return (x == 0 && y == 0 && z == 0);
		if (x < 0 || y < 0 || z < 0)
			return false;
		return canReach(i + 1, x, y, z) || canReach(i + 1, x - food[i][0], y - food[i][1], z - food[i][2]);
	}

	static void banana() throws IOException {
		int x, y, z;
		x = Integer.parseInt(nextToken());
		y = Integer.parseInt(nextToken());
		z = Integer.parseInt(nextToken());

		n = Integer.parseInt(nextToken());
		food = new int[n][3];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 3; j++) {
				food[i][j] = Integer.parseInt(nextToken());
			}
		}
		writer.println(canReach(0, x, y, z) ? "yes" : "no");
	}
}
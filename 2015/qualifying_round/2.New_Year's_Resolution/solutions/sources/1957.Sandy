#include <stdio.h>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <stdlib.h>
#include <math.h>
#include <cmath>
#include <string.h>
#include <string>
#include <algorithm>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <limits.h>
#include <time.h>
#include <bitset>
#include <list>
#include <cassert>

#define EPS 1e-11
#define PI acos(-1)
#define LL long long
#define INF 1000000009
#define MP(a,b) make_pair(a,b)
#define PB(a) push_back(a)
#define OPENR(a) freopen(a,"r",stdin)
#define OPENW(a) freopen(a,"w",stdout)
#define pii pair<int,int>

int x4[4] = { 0, 0,-1, 1};
int y4[4] = {-1, 1, 0, 0};
int x8[8] = {-1,-1,-1, 0, 0, 1, 1, 1};
int y8[8] = {-1, 0, 1,-1, 1,-1, 0, 1};
int xhorse[8] = {1,2,1,2,-1,-2,-1,-2};
int yhorse[8] = {2,1,-2,-1,2,1,-2,-1};

using namespace std;

map<pair<pii,pii>,bool> dp;

int t;
int n;
int g[25];
int c[25];
int f[25];

bool getDp(int a,int gp,int gc,int gf)
{
	if (gp==0 && gc==0 && gf==0) return true;
	if (a==n) return false;
	
	if (dp.find(MP(MP(a,gp),MP(gc,gf)))!=dp.end()) return dp[MP(MP(a,gp),MP(gc,gf))];
	
	bool &res = dp[MP(MP(a,gp),MP(gc,gf))];
	res = getDp(a+1,gp,gc,gf);
	if (gp-g[a]>=0 && gc-c[a]>=0 && gf-f[a]>=0) res |= getDp(a+1, gp-g[a], gc-c[a],gf-f[a]);
	return res;
}

int main()
{
	OPENR("new_years_resolution.txt");
	OPENW("new_years_resolution.out");
	scanf("%d",&t);
	for (int tc=1;tc<=t;tc++)
	{
		dp.clear();
		int gp,gc,gf;
		scanf("%d %d %d",&gp,&gc,&gf);
		scanf("%d",&n);
		
		for (int i=0;i<n;i++) scanf("%d %d %d",&g[i],&c[i],&f[i]);
		
		bool ans = getDp(0, gp, gc, gf);
		if (ans) printf("Case #%d: yes\n",tc);
		else printf("Case #%d: no\n",tc);
	}
	return 0;
}


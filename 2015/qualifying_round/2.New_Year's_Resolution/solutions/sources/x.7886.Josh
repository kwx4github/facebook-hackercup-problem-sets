using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HackerRankTrial
{
    class Program
    {
        static void Main(string[] args)
        {
            //var t = new string[6] {"A:B,C,D","B:A,D,E","C:A,B","D:E,A,B","E:A,F,G,F","A"};
            //var t = new string[4] {"A:B,C,D", "B:A,D,E", "C:E,B", "A"};
            //var res = graph(t);

            //addIterative(5, 4);

            //var array = new int[20] {22,99,173,10,74,46,49,523,747,691,374,968,400,11,298,238,314,345,472,101 };
            ////array = new int[] {10,20,40,30,40};
            //var tt1 = Combinations(array.ToList());
            //foreach (var list in tt1)
            //{
            //    var sum = 0;
            //    foreach (var i in list)
            //    {
            //        sum += array[i];
            //    }

            //    if (sum == 415)
            //    {
            //        foreach (var i in list)
            //        {
            //            Console.Write(i + " ");
            //        }
            //    }
            //    else
            //    {
            //        continue;
            //    }

            //    Console.WriteLine("-----------");
            //}

            //Console.Read();

            //var list = new List<int>();
            //var target = 253;
            //var isExist = FindSum(array, target, ref list);
            //var total = 0;
            //foreach (var i in list)
            //{
            //    total += array[i];
            //}
            //if (target == total)
            //{
                
            //}

            var result = "";
            int val1 = Convert.ToInt32(Console.ReadLine());
            for (int i = 0; i < val1; i++)
            {
                int[] totalsStr = Console.ReadLine().Split(' ').Select(x=>Convert.ToInt32(x)).ToArray();
                int num = Convert.ToInt32(Console.ReadLine());
                var list1 = new List<int>();
                var list2 = new List<int>();
                var list3 = new List<int>();
                
                for (int j = 0; j < num; j++)
                {
                    var t = Console.ReadLine();
                    list1.Add(Convert.ToInt32(t.Split(' ')[0]));
                    list2.Add(Convert.ToInt32(t.Split(' ')[1]));
                    list3.Add(Convert.ToInt32(t.Split(' ')[2]));
                }
                
                //var ref1 = new List<int>();
                //var count = 0;
                //var dict = new Dictionary<int, List<int>>();
                //var isExist1 = FindSum(list1.ToArray(), totalsStr[0], ref ref1);

                //if (isExist1) dict[++count] = ref1;
                var matches = new List<int>();
                var tt = Combinations(list1.ToList());
                var c = -1;
                foreach (var list in tt)
                {
                    c++;
                    var sum = 0;
                    foreach (var j in list)
                    {
                        sum += list1[j];
                    }

                    if (sum == totalsStr[0])
                    {
                        matches.Add(c);
                    }
                }

                //while (isExist1)
                //{
                //    var t = new List<int>();
                //    foreach (var i1 in ref1)
                //    {
                //        t.Add(i1);
                //    }

                //    isExist1 = FindSum(list1.ToArray(), totalsStr[0], ref ref1);
                //    if (isExist1) dict[++count] = ref1.Where(x=>!t.Contains(x)).ToList();
                //}

                var finalMatch = false;
                //if (dict.Count > 0)
                //{
                //    foreach (var key in dict.Keys)
                //    {
                //        var arr = dict[key];
                //        if (arr.Sum(x => list2[x]) == totalsStr[1] && arr.Sum(x => list3[x]) == totalsStr[2])
                //            finalMatch = true;
                //    }
                //}

                foreach (var m in matches)
                {
                    var match = tt[m];
                    if (match.Sum(x => list2[x]) == totalsStr[1] && match.Sum(x => list3[x]) == totalsStr[2])
                        finalMatch = true;
                }


                if (finalMatch)
                    result += "Case #" + (i + 1) + ":" + " yes"+Environment.NewLine;
                else
                    result += "Case #" + (i + 1) + ":" + " no" + Environment.NewLine;
            }
        }

        //public static int addIterative(int a, int b)
        //{
        //    while (b != 0)
        //    {
        //        int carry = (a & b); //CARRY is AND of two bits

        //        a = a ^ b; //SUM of two bits is A XOR B

        //        b = carry << 1; //shifts carry to 1 bit to calculate sum
        //    }

        //    return a;
        //}


        //private static string[] graph(string[] input)
        //{
        //    if (input == null || input.Count() == 0)
        //        return new List<string>().ToArray();

        //    var result = new List<string>();
        //    var currentResult = new List<string>();
        //    var inputList = input.ToList();

        //    var root = inputList.Last();
        //    var dict1 = new Dictionary<string, int>();
            
        //    var q = new Queue<string>();
        //    q.Enqueue(root);
        //    var nextLevelCount = 0;
        //    var currentLevel = 1;
        //    var countLevel = currentLevel;
            
        //    while (q.Count > 0)
        //    {
        //        var currentElement = q.Dequeue();
        //        var levelFriends = inputList.Where(x => x.StartsWith(currentElement)).FirstOrDefault();
        //        countLevel--;
        //        currentResult.Add(currentElement);

        //        if (levelFriends== null)
        //        {
        //            if (countLevel == 0)
        //            {
        //                countLevel = nextLevelCount;
        //                nextLevelCount = 0;
        //                currentLevel++;

        //                var temp = "";
        //                foreach (string s in currentResult)
        //                {
        //                    if (temp.Length > 0)
        //                        temp += "," + s;
        //                    else
        //                        temp += s;
        //                }

        //                result.Add(temp);
        //                currentResult = new List<string>();
        //            }

        //            continue;
        //        }

        //        var splitArray = levelFriends.Split(':')[1].Split(',');
                
        //        foreach (string s in splitArray)
        //        {
        //            if (!dict1.ContainsKey(s) && s!=root)
        //            {
        //                q.Enqueue(s);
        //                dict1.Add(s, 1);
        //                nextLevelCount++;
        //            }
        //        }

        //        if (countLevel == 0)
        //        {
        //            countLevel = nextLevelCount;
        //            nextLevelCount = 0;
        //            currentLevel++;

        //            var temp = "";
        //            foreach (string s in currentResult)
        //            {
        //                if (temp.Length > 0)
        //                    temp += "," + s;
        //                else
        //                    temp += s;
        //            }

        //            result.Add(temp);
        //            currentResult = new List<string>();
        //        }
        //    }

        //    return result.ToArray();
        //}

        //private static void main1()
        //{
        //    var list = new List<int>();
        //    string s;
        //    var intTemp = 0;
        //    var count = 0;
        //    var testCaseCount = 0;
        //    while ((s = Console.ReadLine()) != null)
        //    {
        //        count++;
        //        if (int.TryParse(s, out intTemp))
        //        {
        //            if (count == 1)
        //            {
        //                testCaseCount = intTemp;
        //            }
        //            else
        //            {
        //                Test(intTemp);
        //            }
        //        }
        //        else
        //        {
        //            Console.WriteLine("invalid input");
        //        }
        //    }
        //}

        //static void Test(int input)
        //{
        //    int count = 0;
        //    var tempInput = input;
        //    while (tempInput>0)
        //    {
        //        var digit = tempInput%10;
        //        if (digit > 0)
        //        {
        //            if (input%digit == 0)
        //                count++;
        //        }

        //        tempInput = tempInput/10;
        //    }

        //    Console.WriteLine(count);
        //}

        //public static bool FindSum(int[] array, int target, ref List<int> list)
        //{
        //   // var index = array.ToList().IndexOf(target);

        //    for (int i = 0; i < array.ToList().Count; i++)
        //    {
        //        if(list.Contains(i))
        //            continue;
        //        else if(array[i]==target)
        //        {
        //            list.Add(i);
        //            return true;
        //        }
        //    }

        //    //if (index >= 0)
        //    //{
        //    //    list.Add(array[index]);
        //    //    return true;
        //    //}

        //    var found = false;
        //    var count = -1;
        //    foreach (var i in array)
        //    {
        //        count++;
                
        //        if(list.Contains(count))
        //            continue;

        //        if (i > target)
        //            continue;

        //        list.Add(count);

        //        found = FindSum(array, target - i, ref list);
        //        if (found)
        //            return true;
        //        else
        //            list.Remove(count);
        //    }

        //    return false;
        //}

        public static List<List<int>> Combinations(List<int> array)
        {
            var res = new List<List<int>>();
            res.Add(new int[1]{ 0 }.ToList());
            var count = 0;
            foreach (var i in array.Skip(1))
            {
                count++;
                var t = new List<List<int>>(); 
                foreach (var r in res)
                {
                    var temp = new List<int>();
                    temp.Add(count);
                    temp.AddRange(r);
                    t.Add(temp);
                }

                res.AddRange(t);
                res.Add(new int[1] { count }.ToList());
            }

            return res;
        }
    }
}

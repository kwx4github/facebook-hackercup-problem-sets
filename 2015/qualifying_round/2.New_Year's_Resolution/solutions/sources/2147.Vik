#include <fstream>
#include <cassert>
#include <vector>
#include <string>

using namespace std;

bool canMeetNeeds(int* needs, int* current, std::vector<int*>* foods, int foodIndex = 0) {
	int numFoods = foods->size();

	for (int j = foodIndex; j < numFoods; j++) {
		int *nextFood = foods->at(j);

		for (int k = 0; k < 3; k++)
			current[k] += nextFood[k];

		bool metNeeds = true;
		bool exceedsNeeds = false;

		for (int k = 0; k < 3; k++) {
			if (current[k] != needs[k]) {
				metNeeds = false;
			}
			if (current[k] > needs[k]) {
				exceedsNeeds = true;
			}
		}

		if (!exceedsNeeds) {
			if (metNeeds) return true;

			for (int k = j + 1; k < numFoods; k++) {
				if (canMeetNeeds(needs, current, foods, k)) return true;
			}
		}
	
		for (int k = 0; k < 3; k++)
			current[k] -= nextFood[k];
	}

	return false;
}

int main() {
	ifstream inputFile("input.txt");
	ofstream outputFile("output.txt");

	assert(inputFile);
	assert(outputFile);

	int numTestCases;
	inputFile >> numTestCases;

	string yes = ": yes\n";
	string no = ": no\n";

	for (int i = 0; i < numTestCases; i++) {
		int needs[3];
		inputFile >> needs[0] >> needs[1] >> needs[2];

		int numFood;
		inputFile >> numFood;

		vector<int*> foods;
		foods.reserve(numFood);

		for (int j = 0; j < numFood; j++) {
			int *food = new int[3];
			inputFile >> food[0] >> food[1] >> food[2];
			foods.push_back(food);
		}

		int current[3];
		current[0] = current[1] = current[2] = 0;
		
		bool isPossible = (needs[0] == 0 && needs[1] == 0 && needs[2] == 0) || 
				  		   canMeetNeeds(needs, current, &foods);

		string *answer;
		if (isPossible) answer = &yes;
		else answer = &no;
		outputFile << "Case #" << (i + 1) << (*answer);
	}

	inputFile.close();
	outputFile.close();
}
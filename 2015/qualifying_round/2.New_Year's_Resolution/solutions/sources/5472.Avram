import itertools

def isPossible(desired, listPossibleFoods):
    permutations = itertools.permutations(listPossibleFoods)
    
    for permutation in permutations:
        eatenSoFar = {'protein': 0, 'carb': 0, 'fat': 0} # ce a mancat pana in prezent
        for food in permutation: # parcurg toate mancarurile dintr-o permutare
            eatenSoFar['protein'] += food['protein']
            eatenSoFar['carb'] += food['carb']
            eatenSoFar['fat'] += food['fat']
            if eatenSoFar['protein'] == desired['protein'] and eatenSoFar['carb'] == desired['carb'] and \
                eatenSoFar['fat'] == desired['fat']:
                   return True
            if eatenSoFar['protein'] > desired['protein'] or eatenSoFar['carb'] > desired['carb'] or \
                eatenSoFar['fat'] > desired['fat']: # am depasit cat voiam sa mananc
                break # ma duc la urmatoarea permutare
    return False

def isPossible2(desired, listPossibleFoods): # optimizat
    possibleCombinationsOfSystem = 2 ** len(listPossibleFoods)
    for i in range(possibleCombinationsOfSystem):
        systemCoef = bitGeneratePosition(i)# coeficientii sistemului
        eatenSoFar = {}
        eatenSoFar['protein'] = eatenSoFar['carb'] = eatenSoFar['fat'] = 0
        for j in systemCoef:
            eatenSoFar['protein'] += listPossibleFoods[j]['protein']
            eatenSoFar['carb'] += listPossibleFoods[j]['carb']
            eatenSoFar['fat'] += listPossibleFoods[j]['fat']
        if eatenSoFar['protein'] == desired['protein'] and eatenSoFar['carb'] == desired['carb'] and \
                eatenSoFar['fat'] == desired['fat']:
                   return True
    
    return False

def bitGeneratePosition(number): # returneaza o lista cu indicii bitilor setati din numarul dat ca argument 
    result = []
    i = 0;
    while number != 0:
        if (number & 0x1) != 0:
            result.append(i)
        number >>= 1
        i += 1
    return result

def removeInvalid(desired, listPossibleFoods):
    result = []
    for i, food in enumerate(listPossibleFoods):
        if food['protein'] > desired['protein'] or food['carb'] > desired['carb'] or \
                food['fat'] > desired['fat']:
            continue
        else:
            result.append(food)
    return result


def main():

    fOut = open("new_years_resolution_example_output.txt", "w")

    with open("new_years_resolution_example_input.txt") as file:
        nrOfCases = int(file.readline().split()[0]) # am citit numarul de case-uri
        
        for i in range(nrOfCases):
            desired = {} # dictionarul cu mancarurile pe care vrea sa le mananace
            desired['protein'], desired['carb'], desired['fat'] = [int(x) for x in file.readline().split()]
            nrOfFoods = int(file.readline().split()[0]) # numarul de mancaruri pe care le poate manca
            listPossibleFoods = [] # lista de dictionare, fiecare dictionar reprezentand o mancare posibila
            for j in range(nrOfFoods):
                possible = {} # dictionar reprezentand o mancare posibila
                possible['protein'], possible['carb'], possible['fat'] = [int(x) for x in file.readline().split()]
                listPossibleFoods.append(possible)
            validFoods = removeInvalid(desired, listPossibleFoods) # iau doar mancarurile valide
            if isPossible2(desired, validFoods):
                print("Case #{}: yes".format(i+1), file = fOut)
            else:
                print("Case #{}: no".format(i+1), file = fOut)


    
if __name__ == "__main__": main()
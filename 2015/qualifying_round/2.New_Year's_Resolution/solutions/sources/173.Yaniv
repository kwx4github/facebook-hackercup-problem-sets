#include <iostream>
#include <vector>
#include <set>

#define MAX_VAL 2000

using namespace std;

int encode(int P, int C, int F) {
	return P*MAX_VAL*MAX_VAL + C*MAX_VAL + F;
}

int main() {
	int T;
	cin >> T;
	for (int t = 0; t < T; ++t) {
		bool found = false;
		int P, C, F, N;
		
		cin >> P >> C >> F;
		cin >> N;
		vector<int> GP(N), GC(N), GF(N);

		for (int i = 0; i < N; ++i) {
			cin >> GP[i] >> GC[i] >> GF[i];
		}

		set<int> one_side;

		for (int i = 0; i < (1 << (N/2)); ++i) {
			int rP = 0, rC = 0, rF = 0;
			for (size_t j = 0; j < N/2; ++j) {
				if (i & (1<<j)) {
					rP += GP[j];
					rC += GC[j];
					rF += GF[j];
				}
			}
			one_side.insert(encode(rP, rC, rF));
		}

		for (int i = 0; i < (1 << ((N+1)/2)); ++i) {
			int rP = 0, rC = 0, rF = 0;
			for (size_t j = 0; j < ((N+1)/2); ++j) {
				if (i & (1<<j)) {
					rP += GP[(N/2)+j];
					rC += GC[(N/2)+j];
					rF += GF[(N/2)+j];
				}
			}
			if (one_side.find(encode(P-rP, C-rC, F-rF)) != one_side.end()) {
				found = true;
				break;
			}
		}

		cout << "Case #" << (t+1) << ": ";
		if (found) {
			cout << "yes";
		} else {
			cout << "no";
		}
		cout << endl;
	}
	return 0;
}
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

namespace NewYearsResolution
{
	class Program
	{
		static void Main(string[] args)
		{
			using (var reader = new StreamReader(args[0]))
			using (var writer = new StreamWriter(args.Length > 1 ? args[1] : args[0].Replace(".in", ".out")))
			{
				var t = reader.Next<int>();
				for (int i = 1; i <= t; i++)
				{
					var p = reader.Next<int>();
					var c = reader.Next<int>();
					var f = reader.Next<int>();
					var n = reader.Next<int>();
					var foods = new int[n, 3];
					var foodSums = new int[n, 3];
					for (int j = 0; j < n; j++)
					{
						foods[j, 0] = reader.Next<int>();
						foods[j, 1] = reader.Next<int>();
						foods[j, 2] = reader.Next<int>();
						foodSums[j, 0] = (j > 0 ? foodSums[j - 1, 0] : 0) + foods[j, 0];
						foodSums[j, 1] = (j > 0 ? foodSums[j - 1, 1] : 0) + foods[j, 1];
						foodSums[j, 2] = (j > 0 ? foodSums[j - 1, 2] : 0) + foods[j, 2];
					}

					var achivable = Solve(p, c, f, foods, foods.GetLength(0), foodSums);

					writer.WriteLine("Case #{0}: {1}", i, achivable ? "yes" : "no");
				}
			}
		}

		private static bool Solve(int p, int c, int f, int[,] foods, int fc, int[,] foodSums)
		{
			if (p == 0 && c == 0 && f == 0) return true;
			if (fc == 0) return false;
			if (p < 0 || c < 0 || f < 0) return false;

			if (foodSums[fc - 1, 0] < p || foodSums[fc - 1, 1] < c || foodSums[fc - 1, 2] < f) return false;

			return Solve(p - foods[fc - 1, 0], c - foods[fc - 1, 1], f - foods[fc - 1, 2], foods, fc - 1, foodSums)
			       || Solve(p, c, f, foods, fc - 1, foodSums);
		}
	}

	public static class StreamReaderExtensions
	{
		private static List<string> currLine;

		public static T Next<T>(this StreamReader reader)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			var res = (T)Convert.ChangeType(currLine[0], typeof(T), CultureInfo.InvariantCulture);
			currLine.RemoveAt(0);
			return res;
		}

		public static T[] Next<T>(this StreamReader reader, int count)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			if (count == 0) count = currLine.Count;
			var res = currLine.Take(count).Select(i => (T)Convert.ChangeType(i, typeof(T), CultureInfo.InvariantCulture)).ToArray();
			currLine.RemoveRange(0, count);
			return res;
		}
	}
}

import javafx.util.Pair;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

// bydlocode
public class Main {
	private static ArrayList<Pair<Integer, Integer>> p = new ArrayList<Pair<Integer, Integer>>();
	private static ArrayList<Integer> c = new ArrayList<Integer>();
	private static ArrayList<Integer> f = new ArrayList<Integer>();
	private static int gp;
	private static int gc;
	private static int gf;

	private static int find(int[] sum, ArrayList<Integer> prev, int pos) {
		if (sum[0] == gp && sum[1] == gc && sum[2] == gf) {
			return 0;
		}
		if (sum[0] > gp || sum[1] > gc || sum[2] > gf) {
			int index = prev.get(prev.size() - 1);
			sum[0] -= p.get(index).getKey();
			index = p.get(index).getValue();
			sum[1] -= c.get(index);
			sum[2] -= f.get(index);
			prev.remove(prev.size() - 1);
			return 1;
		}
		int res = -1;
		for (int i = pos; (res != 0) && (i < p.size()) && (p.get(i).getKey() <= gp); i++) {
			prev.add(i);
			int curr = p.get(i).getValue();
			sum[0] += p.get(i).getKey();;
			sum[1] += c.get(curr);
			sum[2] += f.get(curr);
			res = find(sum, prev, i + 1);
		}
		if (prev.size() > 0) {
			int index = prev.get(prev.size() - 1);
			sum[0] -= p.get(index).getKey();
			index = p.get(index).getValue();
			sum[1] -= c.get(index);
			sum[2] -= f.get(index);
			prev.remove(prev.size() - 1);
		}
		return res;
	}

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(new BufferedReader(new FileReader(new File("input.txt"))));
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("output.txt")));
		int t = sc.nextInt();
		for (int i = 0; i < t; i++) {
			gp = sc.nextInt();
			gc = sc.nextInt();
			gf = sc.nextInt();
			int n = sc.nextInt();

			int sumP = 0;
			int sumC = 0;
			int sumF = 0;
			int minP = 1001;
			int minC = 1001;
			int minF = 1001;

			for (int j = 0; j < n; j++) {
				int val = sc.nextInt();
				sumP += val;
				minP = Math.min(minP, val);
				Pair<Integer, Integer> pair = new Pair(val, j);
				p.add(pair);
				val = sc.nextInt();
				sumC += val;
				minC = Math.min(minC, val);
				c.add(val);
				val = sc.nextInt();
				sumF += val;
				minF = Math.min(minF, val);
				f.add(val);
			}
			bw.write("Case #" + (i + 1) + ": ");

			if (sumP == gp && sumC == gc && sumF == gf) {
				bw.write("yes");
			} else if (sumP  < gp || sumC < gc || sumF < gf || gp < minP || gc < minC || gf < minF) {
				bw.write("no");
			} else {
				Collections.sort(p, (a, b) -> (a.getKey() < b.getKey()) ? -1 : ((a.getKey() > b.getKey()) ? 1 : 0));
				int res = -1;
				for (int j = 0; (res != 0) && (j < n) && (p.get(j).getKey() <= gp); j++) {
					ArrayList<Integer> prev = new ArrayList<>();
					int[] sum = new int[3];
					res = find(sum, prev, j);
				}
				if (res == 0) {
					bw.write("yes");
				} else {
					bw.write("no");
				}
			}
			p.clear();
			c.clear();
			f.clear();
			bw.newLine();
		}
		bw.close();
	}
}

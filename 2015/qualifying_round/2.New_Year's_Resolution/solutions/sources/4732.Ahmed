import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class NewYearsResolution {
	static int[] S1, S2, S3;
	static boolean done;

	static void count(int m, int n1, int n2, int n3) {
		if (done)
			return;
		// If n is 0 then there is 1 solution (do not include any coin)
		if (n1 == 0 && n2 == 0 && n3 == 0) {
			done = true;
			return;
		}

		// If n is less than 0 then no solution exists
		if (n1 < 0 || n2 < 0 || n3 < 0) {
			return;
		}

		// If there are no coins and n is greater than 0, then no solution exist
		if (m <= 0 && (n1 >= 1 || n2 >= 1 || n3 >= 1))
			return;

		// count is sum of solutions (i) including S[m-1] (ii) excluding S[m-1]
		count(m - 1, n1, n2, n3);
		count(m, n1 - S1[m - 1], n2 - S2[m - 1], n3 - S3[m - 1]);
	}

	public static void main(String[] args) throws NumberFormatException,
			IOException {
		BufferedReader rd = new BufferedReader(new FileReader("B.txt"));
		PrintWriter pw = new PrintWriter(new File("B.out"));
		int t = Integer.parseInt(rd.readLine());
		for (int i = 1; i <= t; i++) {
			done = false;
			StringTokenizer to = new StringTokenizer(rd.readLine(), " ");
			int n1 = Integer.parseInt(to.nextToken());
			int n2 = Integer.parseInt(to.nextToken());
			int n3 = Integer.parseInt(to.nextToken());
			int m = Integer.parseInt(rd.readLine());
			S1 = new int[m];
			S2 = new int[m];
			S3 = new int[m];
			for (int j = 0; j < m; j++) {
				to = new StringTokenizer(rd.readLine(), " ");
				S1[j] = Integer.parseInt(to.nextToken());
				S2[j] = Integer.parseInt(to.nextToken());
				S3[j] = Integer.parseInt(to.nextToken());
			}
			count(m, n1, n2, n3);
			pw.println("Case #" + i + ": " + (done ? "yes" : "no"));
		}
		rd.close();
		pw.close();
	}

}

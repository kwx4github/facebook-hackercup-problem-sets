import std.stdio, std.conv, std.string, std.format;

struct Food {
  int gp;
  int gc;
  int gf;
  
  this ( int gp, int gc, int gf ) {
	this.gp = gp;
	this.gc = gc;
	this.gf = gf;
  }

  Food opBinary(string op)( Food f ) {
	static if ( op == "+" ) {
	  return Food( gp + f.gp, gc + f.gc, gf + f.gf );
	} else {
	  return Food( 0, 0, 0 );
	}
  }

  bool opEquals( Food f ) {
	return gp == f.gp &&
	  gc == f.gc &&
	  gf == f.gf;
  }
}

void main()
{
  int T = to!int( strip( readln ) );
  foreach ( t; 1 .. T + 1 ) {
	int gp, gc, gf;
	string line = readln;
	formattedRead( line, "%d %d %d\n", &gp, &gc, &gf );
	Food target = Food( gp, gc, gf );
	int n = to!int( strip( readln ) );
	Food[] foods = new Food[]( n );
	foreach ( i; 0 .. n ) {
	  line = readln;
	  formattedRead( line, "%d %d %d\n", &gp, &gc, &gf );
	  foods[ i ] = Food( gp, gc, gf );
	}

	if ( solve( target, foods ) ) {
	  writefln( "Case #%d: yes", t );
	} else {
	  writefln( "Case #%d: no", t );
	}
  }
}

bool solve ( Food target, Food[] foods ) {
  ulong n = foods.length;
  foreach ( i; 1 .. (1 << n) ) {
	Food sum = Food( 0, 0, 0 );
	for ( int j = 0; j < n; j++ ) {
	  if ( ( i & (1 << j) ) > 0 ) {
		sum = sum + foods[ j ];
	  }
	}
	if ( sum == target ) {
	  return true;
	}
  }
  return false;
}

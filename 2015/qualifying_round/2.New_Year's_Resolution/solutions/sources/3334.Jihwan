package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func setZeroPadding(s string, length int) string {
	return strings.Repeat("0", length-len(s)) + s
}

func main() {
	fileIn, err := os.Open("input.txt")
	check(err)
	defer fileIn.Close()

	fileOut, err := os.Create("output.txt")
	check(err)
	defer fileOut.Close()

	var problems int

	var limitPro, limitCarb, limitFat, foodNum int
	var sumPro, sumCarb, sumFat int

	fmt.Fscanf(fileIn, "%d\n", &problems)

	for cases := 1; cases <= problems; cases++ {
		fmt.Fscanf(fileIn, "%d %d %d\n%d\n", &limitPro, &limitCarb, &limitFat, &foodNum)
		foodList := make([][3]int, foodNum)
		for i := 0; i < foodNum; i++ {
			fmt.Fscanf(fileIn, "%d %d %d\n", &foodList[i][0], &foodList[i][1], &foodList[i][2])
		}

		flag := "no"
		fullCase := 1 << uint(foodNum)

		for iter := 0; iter < fullCase && flag == "no"; iter++ {
			param := setZeroPadding(strconv.FormatInt(int64(iter), 2), foodNum)

			sumPro = 0
			sumCarb = 0
			sumFat = 0

			for i := 0; i < foodNum; i++ {
				if param[i] == '1' {
					sumPro += foodList[i][0]
					sumCarb += foodList[i][1]
					sumFat += foodList[i][2]
				}
			}

			if sumPro == limitPro && sumCarb == limitCarb && sumFat == limitFat {
				flag = "yes"
			}

		}

		fmt.Fprintf(fileOut, "Case #%d: %s\n", cases, flag)
	}
}

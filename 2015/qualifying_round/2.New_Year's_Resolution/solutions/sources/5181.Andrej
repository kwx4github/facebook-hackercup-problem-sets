//---------------------------------------------------------------------------------------------------------------------
// by Andrej Petelin
//    Medenska c. 31
//    1000 Ljubljana
//    Slovenia
//    European Union
//
//    coded in C++11 with GCC 4.8.2
//---------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

//---------------------------------------------------------------------------------------------------------------------
const string INFILE = "new_years_resolution.txt";
const string OUTFILE = "results.txt";

//---------------------------------------------------------------------------------------------------------------------
struct Nutrients
{
    Nutrients() : prot{0}, carb{0}, fat{0} { }
    Nutrients(int p, int c, int f) : prot{p}, carb{c}, fat{f} { }
    int prot, carb, fat;
};

struct Meals
{
    Nutrients desired;
    vector<Nutrients> menu;
};

//---------------------------------------------------------------------------------------------------------------------
// read input
//---------------------------------------------------------------------------------------------------------------------
void readNutrients(istream& is, size_t cases, vector<Meals>& vec)
{
    // read desired nutrients
    for (size_t i = 0; i < cases; ++i)
    {
        // data for full test case
        Meals diet;
        size_t nrOfMeals;
        is >> diet.desired.prot >> diet.desired.carb >> diet.desired.fat;
        is >> nrOfMeals;

        // data for each food, nrOfMeals foods in each test case
        for (size_t j = 0; j < nrOfMeals; ++j)
        {
            Nutrients meal;
            is >> meal.prot >> meal.carb >> meal.fat;
            diet.menu.push_back(meal);
        }
        vec.push_back(diet);
    }
}

//---------------------------------------------------------------------------------------------------------------------
// overloaded comparison operators
//---------------------------------------------------------------------------------------------------------------------
bool operator<(const Nutrients& a, const Nutrients& b)
{
    if (a.carb < b.carb || a.prot < b.prot || a.fat < b.fat) return true;
    return false;
}

bool operator==(const Nutrients& a, const Nutrients& b)
{
    if (a.carb == b.carb && a.prot == b.prot && a.fat == b.fat) return true;
    return false;
}

bool operator!=(const Nutrients& a, const Nutrients& b)
{
    if (a.carb != b.carb || a.prot != b.prot || a.fat != b.fat) return true;
    return false;
}

//---------------------------------------------------------------------------------------------------------------------
// overloaded binary minus
//---------------------------------------------------------------------------------------------------------------------
Nutrients operator-(const Nutrients& a, const Nutrients& b)
{
    return Nutrients(a.prot - b.prot, a.carb - b.carb, a.fat - b.fat);
}

//---------------------------------------------------------------------------------------------------------------------
bool sumSubsets(Meals& menu, Nutrients& sum, int nr)
{
    if (sum == Nutrients()) return true;
    else if (nr == 0) return false;

    if (sum < menu.menu[nr - 1]) return sumSubsets(menu, sum, nr - 1);  // skip last element if it's greater than sum

    Nutrients curr = sum - menu.menu[nr - 1];
    return sumSubsets(menu, sum, nr - 1) || sumSubsets(menu, curr, nr - 1);
}

//---------------------------------------------------------------------------------------------------------------------
int main()
{

    ifstream ifs(INFILE);
    ofstream ofs(OUTFILE);

    if(ifs.is_open())
    {
        size_t testCases;
        ifs >> testCases;

        vector<Meals> foods;
        readNutrients(ifs, testCases, foods);

        for (size_t i = 0; i < foods.size(); ++i)
        {
            cout << "Case #" << i + 1 << ": ";
            ofs << "Case #" << i + 1 << ": ";
            if (sumSubsets(foods[i], foods[i].desired, foods[i].menu.size()))
            {
                ofs << "yes\n";
                cout << "yes\n";
            }
            else
            {
                ofs << "no\n";
                cout << "no\n";
            }
        }
    }
    else cout << "Check filename!!!\n";
}


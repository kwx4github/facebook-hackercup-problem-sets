#include<iostream>
#include<sstream>
#include<string>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<vector>
#include<map>
#include<bitset>
#include<list>
#include<set>
#include<queue>
#include<functional>
#include<cmath>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
using namespace std;
#define WHITE 1
#define BLACK -1
#define INF 0xffffff
#define LL  long long
#define FI  freopen("in.txt","r",stdin)
#define FO  freopen("out.txt","w",stdout)
#define sc scanf
#define pf printf
#define maxx(a, b) ((a > b)? a: b)
#define minn(a, b) ((a < b)? a: b)
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<vi> vii;
struct cal{
	int p,c,f;
	cal(int pp, int cc, int ff){
		p = pp;
		c = cc;
		f = ff;
	}
};

int ans;
int n;
vector<cal> in;
bool iszero( struct cal food){
	return ! ( food.c + food.f + food.p );
}

bool neg( struct cal food){
	if ( food.c < 0 || food.p < 0 || food.f < 0 ) return true;
	return false;
}
void solve(int ind, struct cal food, vector<cal> v){
	if ( iszero(food) ) {ans++; return;}
	for( int i = ind ; i < n && ! ans ; i++){
		v.push_back(in[i]);
		food.c -= in[i].c;
		food.p -= in[i].p;
		food.f -= in[i].f;
		if ( ! neg(food) )
			solve(ind+1,food,v);
		v.pop_back();
		food.c += in[i].c;
		food.p += in[i].p;
		food.f += in[i].f;
	}
}
int main(){
	FI;
	FO;
	int T;
	scanf("%d",&T);
	for( int t = 1 ; t <= T; t++){
		printf("Case #%d: ",t);
		int gp,gc,gf;
		scanf("%d %d %d\n%d",&gp,&gc,&gf,&n);
		int p,c,f;
		for( int i = 0 ; i < n ; i++){
			scanf("%d %d %d",&p,&c,&f);
			in.push_back(cal(p,c,f));
		}
		ans = 0;
		struct cal food(gp,gc,gf);
		vector<cal> tmp;
		solve(0,food,tmp);
		if ( ans ) printf("yes\n");
		else printf("no\n");
		in.clear();
	}
	return 0;
}
module Main where

import Control.Monad

-- Specific problem solution code, used in general hackercup-like code.

type Input = (Terna, [Terna])
type Solution = Bool

solveCase :: Input -> Solution
solveCase (goal, items) = goal `elem` allOptions items
            where allOptions []     = [(0,0,0)]
                  allOptions (x:xs) = remaining ++ map (addTerna x) remaining
                                where remaining = allOptions xs

readCase :: IO Input
readCase = do
              target <- readTerna
              n <- readLine
              ternas <- n `timesDo` readTerna
              return (target, ternas)
             
solutionToString :: Solution -> String
solutionToString x  = if x then "yes" else "no"

-- Solution's helper functions

type Terna = (Integer, Integer, Integer)

addTerna :: Terna -> Terna -> Terna
addTerna (a1,a2,a3) (b1,b2,b3) = (a1+b1, a2+b2, a3+b3)

readTerna :: IO Terna
readTerna = do
              [a,b,c] <- readLineTokens
              return (a,b,c)

-- General hackercup-like-problem code

timesDo :: Int -> IO a -> IO [a]
t `timesDo` action = sequence $ replicate t action

timesDo_ :: Int -> IO () -> IO ()
t `timesDo_` action = sequence_ $ replicate t action

readLine :: Read a => IO a
readLine = fmap read getLine

readLineTokens :: Read a => IO [a]
readLineTokens = fmap (map read . words) getLine

main :: IO ()
main = do
         t <- readLine
         forM_ [1..t] (\caseNumber -> readCase >>= printSolution caseNumber . solutionToString . solveCase)


printSolution :: Int -> String -> IO ()
printSolution caseNumber solution = putStrLn $ "Case #" ++ show caseNumber ++ ": " ++ solution

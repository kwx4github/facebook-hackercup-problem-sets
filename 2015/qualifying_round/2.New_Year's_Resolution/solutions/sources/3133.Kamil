#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <cmath>
#include <list>
#include <map>
#include <set>
using namespace std;

typedef long long int LL;
typedef long double LD;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<LD> VLD;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef vector<PII> VPII;

const int INF = 1000000001;
const LD EPS = 10e-9;

#define FOR(x, b, e) for(int x = b; x <= (e); ++x)
#define FORD(x, b, e) for(int x = b; x >= (e); --x)
#define REP(x, n) for(int x = 0; x < (n); ++x)
#define VAR(v, n) __typeof(n) v = (n)
#define ALL(c) (c).begin(), (c).end()
#define SIZE(x) ((int)(x).size())
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define abs(a) ((a)<0 ? -(a) : (a))
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))

const int MAX_N = 1005;

struct Food
{
	int p, c, f;
}food[MAX_N];

int t, n;
int gp, gc, gf;

bool check(int x)
{
	int pSum = 0, cSum = 0, fSum = 0;
	for(int i = 0; i < n; i++)
	{
		if((x>>i) & 1)
		{
			pSum += food[i].p;
			cSum += food[i].c;
			fSum += food[i].f;	
		}
	}
	
	return pSum == gp && cSum == gc && fSum == gf;
}

int main()
{
	scanf("%d", &t);
	for(int i = 1; i <= t; i++)
	{
		scanf("%d %d %d", &gp, &gc, &gf);
		scanf("%d", &n);
		
		for(int j = 0; j < n; j++)
		{
			scanf("%d %d %d", &food[j].p, &food[j].c, &food[j].f);
		}
		
		bool ok = false;
		int maxNum = 1<<n;
		for(int j = 0; j < maxNum; j++)
		{
			if(check(j))
			{
				ok = true;
				break;	
			}
		}	
		
		cout << "Case #" << i << ": " << (ok ? "yes" : "no") << endl;
	}
	//system("pause");
	return 0;
}



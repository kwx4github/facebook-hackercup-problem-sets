#include <iostream>
#include <vector>

using namespace std;

int gp, gc, gf;

struct food {
	int p;
	int c;
	int f;
};

bool backtrace(vector<food> &foods, int depth, int p, int c, int f) {
	if (p > gp || c > gc || f > gf || depth == foods.size())
		return false;

	int cp = p + foods[depth].p;
	int cc = c + foods[depth].c;
	int cf = f + foods[depth].f;
	
	if (cp == gp && cc == gc && cf == gf)
		return true;
	else {
		return backtrace(foods, depth + 1, p, c, f) ||
			backtrace(foods, depth + 1, cp, cc, cf);
	}
}

void alg(vector<food> &foods) {
	bool result = backtrace(foods, 0, 0, 0, 0);
	
	static int c = 1;
	cout << "Case #" << c++ << ": " << (result ? "yes" : "no") << endl;
}

int main() {
	int T;
	cin >> T;
	while (T --> 0) {
		cin >> gp >> gc >> gf;
		int n;
		cin >> n;
		vector<food> foods(n);
		for (int i = 0; i < n; ++i)
			cin >> foods[i].p >> foods[i].c >> foods[i].f;
		
		alg(foods);
	}
	
	return 0;
}

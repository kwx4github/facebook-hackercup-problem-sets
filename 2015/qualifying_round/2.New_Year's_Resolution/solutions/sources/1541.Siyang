def main():
	results = list()

	with open("new_years_resolution.txt") as f:
		number_of_cases = int(f.readline())
		for i in range(0, number_of_cases):
			nutrients_needed = map(lambda x : int(x), f.readline().split())
			# read all available foods
			number_of_foods = int(f.readline())
			foods = list()
			for j in range(0, number_of_foods):
				foods.append(map(lambda x : int(x), f.readline().split()))
			# could satisfy?
			results.append(if_satisfy_nutrients_requirement(nutrients_needed, foods))


	with open("new_years_resolution_output.txt", 'w+') as f:
		for i in range(0, len(results)):
			line = 'Case #' + str(i + 1) + ': ' + ('yes' if results[i] else 'no') + '\n'
			f.write(line)

def if_satisfy_nutrients_requirement(nutrients_needed, nutrients_available):
	# some nutrient < 0
	if len(filter(lambda x : x < 0, nutrients_needed)) != 0:
		return False
	# all nutrients == 0
	if len(filter(lambda x : x == 0, nutrients_needed)) == len(nutrients_needed):
		return True
	if len(nutrients_available) == 0:
		return False

	return if_satisfy_nutrients_requirement(nutrients_needed, nutrients_available[1:]) \
	or if_satisfy_nutrients_requirement(map(lambda x, y : x - y, nutrients_needed, nutrients_available[0]), nutrients_available[1:])

if __name__ == '__main__':
    main()

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.Buffer;


public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		
		int tests = Integer.valueOf(reader.readLine());
		
		for (int i=0; i<tests; ++i) {
			doTest(reader, i+1);
		}
	}
	
	static void doTest(BufferedReader reader, int testNum) throws IOException {
		int[] target = readIntArray(reader);
		
		int foodCnt = Integer.valueOf(reader.readLine());
		int[][] food = new int[foodCnt][];
		
		for (int i=0; i<foodCnt; ++i) {
			food[i] = readIntArray(reader);
		}
		
		int startFrom = 0;
		String result;
		if (target[0] == 0 && target[1] == 0 && target[2] == 0) {
			result = "yes";
		} else {
			result = combinationExists(food, startFrom, target) ? "yes" : "no";
		}
		System.out.println("Case #" + testNum + ": " + result);
	}
	
	static boolean combinationExists(int[][] allFood, int startFrom, int[] target) {
		if (startFrom >= allFood.length) {
			return false;
		}
		
		int[] food = allFood[startFrom];
		
		if (food[0] == target[0] && food[1] == target[1] && food[2] == target[2]) {
			return true;
		}
		
		if (combinationExists(allFood, startFrom + 1, target)) {
			return true;
		}
		
		target[0] -= food[0];
		target[1] -= food[1];
		target[2] -= food[2];
		
		if (target[0] >=0 && target[1] >= 0 && target[2] >= 0 && combinationExists(allFood, startFrom + 1, target)) {
			return true;
		}
		
		target[0] += food[0];
		target[1] += food[1];
		target[2] += food[2];

		
		return false;
	}
	
	static int[] readIntArray(BufferedReader reader) throws IOException {
		String[] stringArr = reader.readLine().split(" ");
		
		int len = stringArr.length;
		int[] arr = new int[len];
		for (int i=0; i<len; ++i) {
			arr[i] = Integer.valueOf(stringArr[i]);
		}
		
		return arr;
	}

	/* (non-Java-doc)
	 * @see java.lang.Object#Object()
	 */
	public Main() {
		super();
	}

}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newyearresolution;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import org.apache.commons.lang3.StringUtils;


/**
 *
 * @author yoovrajshinde
 */
public class NewYearResolution {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException, IOException {
        // TODO code application logic here
        long start = System.currentTimeMillis();
        BufferedReader br = 
                new BufferedReader(
                        new FileReader("/Users/yoovrajshinde/facebook/new_years_resolution.txt"));
        
        BufferedWriter bw = 
                new BufferedWriter(
                        new FileWriter("/Users/yoovrajshinde/facebook/output.txt"));
        
        String line;
        boolean first=true;
        int T = 0;
        int i=1;
        int G_P=0, G_C=1, G_F=2;
        while((line = br.readLine()) != null || T<0 ) {
            // T, the number of test cases
            if (first) {
                T = Integer.valueOf(line);
                first = false;
                continue;
            }
            
            //GP, GC, and GF
            int[] G = toIntArray(line.split(" "));
            
            //the number of foods for that test case, an integer N
            line = br.readLine();
            int N = Integer.valueOf(line);
            int[] P = new int[N];
            int[] C = new int[N];
            int[] F = new int[N];
            
            //N lines each consist of three space-separated integers: P, C, and F
            for (int n = 0 ; n < N ; n++) {
                line = br.readLine();
                int[] tmp = toIntArray(line.split(" "));
                P[n] = tmp[G_P];
                C[n] = tmp[G_C];
                F[n] = tmp[G_F];
            }
            boolean foundMatchedSet = false;
            // from 1 -> N
            for (int subSetSize = 1; subSetSize <= N; subSetSize++) {
                if (foundMatchedSet) {
                    System.out.println("stop searching further ");
                    break;
                }
                // numbers = indexes for [P C F]
                int[] subSetIndexes = new int[N];
                for (int k=0; k<N; k++) {
                    subSetIndexes[k] = k;
                }
                Set<String> exaustibleIndexSet = new HashSet<>();
                while (true) {
                    if (exaustibleIndexSet.size() == nCk(N, subSetSize)) {
                        // exhausted 
                        System.out.println("Exausted all combinations !!! ");
                        break;
                    }
                    int setSumP = 0;
                    int setSumC = 0;
                    int setSumF = 0;

                    int subsetIndex[] = getRandomSet(subSetIndexes, subSetSize);
                    Arrays.sort(subsetIndex);
                    exaustibleIndexSet.add(StringUtils.join(subsetIndex, ' ').replace(" ", ""));

                    for(int index : subsetIndex) {
        //                System.out.println(index);
                        setSumP += P[index];
                        setSumC += C[index];
                        setSumF += F[index];
                    }
        //            System.out.println("Sum in this iteration = " 
        //                    + setSumP + " " + setSumC + " " + setSumF);
                    if (setSumP == G[G_P] && 
                            setSumC == G[G_C] && 
                            setSumF == G[G_F]) {
                        System.out.println("Set matched");
                        foundMatchedSet = true;
                        for(int num : subsetIndex) {
                            System.out.println(num);
                        }
                        break;
                    }
                }// end of while 
            
            }// end of for from 1 -> N
            System.out.println("Case #" + i + ": "  + (foundMatchedSet ? "yes" : "no"));
            bw.write("Case #" + i + ": "  + (foundMatchedSet ? "yes" : "no"));
            bw.newLine();

            i++;
            // go to next test case
        }
        long processedTime = System.currentTimeMillis() - start;
        System.out.println(processedTime);
        System.out.println("ms");
            
        br.close();
        bw.close();
        
    }
    
    public static int[] toIntArray(String[] strArray) {
        int[] intArray = new int[strArray.length];
        for(int i=0; i<intArray.length; i++) {
            intArray[i] = Integer.valueOf(strArray[i]);
        }
        return intArray;
    }
    public static int nCk (int n, int k) {
        if (k > n/2) {
            k = n - k;
        }
        int num=1, den=1 ;
        for (int t = 1; t <= k; t++) {
            num *= n;n--;
            den *= t;
        }
        return num/den;
    }
    public static int[] getRandomSet(int[] mainSet, int size) {
        int index[] = new int[size];
        for(int j=0;j <size; j++) {
            index[j] = -1;
        }
        int i=0;
        int loop = 0;
        while (i<=size-1) {
            int tmp = randInt(0,mainSet.length-1);
            boolean duplicate = false;
            for(int t : index) {
                if (t == tmp) {
                    duplicate = true;
                    break;
                }
            }
            if (!duplicate) {
                index[i] = tmp;                
//                System.out.println(index[i]);
                i++;
            }
            loop++;
        }
//        System.out.println("Looped " + loop + " times");
        
        int[] subSet = new int[size];
        for (int j=0; j < size; j++) {
            subSet[j] = mainSet[index[j]];
        }
        return subSet;
    }
    public static int randInt(int min, int max) {

        // NOTE: Usually this should be a field rather than a method
        // variable so that it is not re-seeded every call.
        Random rand = new Random();

        // nextInt is normally exclusive of the top value,
        // so add 1 to make it inclusive
        int randomNum = rand.nextInt((max - min) + 1) + min;

        return randomNum;
    }    
    
}

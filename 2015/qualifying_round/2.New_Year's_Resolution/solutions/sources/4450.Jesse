using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;

namespace NewYearsResolution
{
    class NewYearsResolution
    {
        private static bool YesNo { get; set; }

        static void Main(string[] args)
        {
            var lines = File.ReadAllLines(args[0]);

            var numOfTestCases = int.Parse(lines[0]);

            var t = 1;

            for (var testCaseNum = 1; testCaseNum <= numOfTestCases; testCaseNum++)
            {
                var foodTypes = lines[t++].Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

                var numOfFoodTestCases = int.Parse(lines[t++]);

                var foods = new[] { 
                    new List<int>(), 
                    new List<int>(),
                    new List<int>() 
                };

                for (var f = 0; f < numOfFoodTestCases; f++)
                {
                    var food = lines[t++].Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();
                    foods[0].Add(food[0]);
                    foods[1].Add(food[1]);
                    foods[2].Add(food[2]);
                }

                YesNo = false;
                RecursiveSolve(foodTypes, new[] { 0, 0, 0 }, foods, 0);

                Console.WriteLine("Case #{0}: {1}", testCaseNum, YesNo ? "yes" : "no");
            }

        }

        private static void RecursiveSolve(IList<int> goals, IList<int> currentSum, IList<List<int>> notIncluded, int startIndex)
        {
            for (var index = startIndex; index < notIncluded[0].Count && !YesNo; index++)
            {
                var nextValue0 = notIncluded[0][index];
                var nextValue1 = notIncluded[1][index];
                var nextValue2 = notIncluded[2][index];

                if (currentSum[0] + nextValue0 == goals[0] &&
                    currentSum[1] + nextValue1 == goals[1] &&
                    currentSum[2] + nextValue2 == goals[2])
                {
                    YesNo = true;
                }
                else if (currentSum[0] + nextValue0 < goals[0] &&
                         currentSum[1] + nextValue1 < goals[1] &&
                         currentSum[2] + nextValue2 < goals[2])
                {
                    var newCurrentSums = new[]
                    {
                        currentSum[0] + nextValue0,
                        currentSum[1] + nextValue1,
                        currentSum[2] + nextValue2
                    };

                    var nextNotIncluded = new[]
                    {
                        new List<int>(notIncluded[0]),
                        new List<int>(notIncluded[1]),
                        new List<int>(notIncluded[2])
                    };

                    nextNotIncluded[0].RemoveAt(index);
                    nextNotIncluded[1].RemoveAt(index);
                    nextNotIncluded[2].RemoveAt(index);

                    RecursiveSolve(goals, newCurrentSums, nextNotIncluded, startIndex++);
                }
            }
        }
    }
}

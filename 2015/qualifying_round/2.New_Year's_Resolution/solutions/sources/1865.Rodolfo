def is_full(chosen, totals):
    for i in xrange(3):
        if sum(row[i] for row in chosen) != totals[i]: return False
    return True

def needs_more_food(chosen, totals):
    for i in xrange(3):
        if sum(row[i] for row in chosen) >= totals[i]: return False
    return True

def backtracking(foods, chosen, i, N, totals):
    chosen.append(foods[i])
    if is_full(chosen, totals): return True
    if needs_more_food(chosen, totals):
        for j in xrange(i+1, N):
            if backtracking(foods, chosen, j, N, totals):
                return True
    chosen.pop()

def solve():
    totals = map(int,raw_input().split())
    
    foods = []

    N = int(raw_input())
    for i in xrange(N):
        foods.append(map(int,raw_input().split()))

    chosen = []

    for i in xrange(N):
        if backtracking(foods, chosen, i, N, totals): return "yes"
    return "no"

def main():
    T = int(raw_input())
    for c in xrange(T):
        ans = solve()
        print "Case #%d: %s" % (c+1, ans)

if __name__ == "__main__":
    main()

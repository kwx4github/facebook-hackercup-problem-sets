#include <cctype>
#include <string>
#include <cstring>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <utility>
#include <bitset>
#include <limits>

using namespace std;

#define PB(x)       push_back(x)
#define MP(x,y)     make_pair(x,y)
#define ALL(x)      x.begin(), x.end()
#define RALL(x)     x.rbegin(), x.rend()
#define READ(x)     freopen(x, "r", stdin)
#define WRITE(x)    freopen(x, "w", stdout)
#define SORT(x)     sort(ALL(x))
#define DREP(x)     sort(ALL(x)); x.erase(unique(ALL(x)),x.end())
#define CLEAR(c)    memset(c, 0, sizeof(c))
#define P(x)        ">>> " << #x << " : " << x << endl
#define C(x)        cout << P(x)
#define CC(x)       clog << P(x)

struct _ { ios_base::Init i; _() { cin.sync_with_stdio(0); cin.tie(0); } } _;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> ii;
typedef vector<ii> vii;

#define EPS 1e-14
#define INF 0x3f3f3f3f;
#define PI atan(1)*4;

int cases, n;
int gp, gc, gf;
int p, c, f;

vector<vi> meals;

int snoob(int x) {
  int y = x + (x & -x);
  x = x & ~y;
  while ((x & 1) == 0) x  = x >> 1;
  x = x >> 1;
  return y | x;
}

bool check() {
  int x;
  for (int i=1; i<=meals.size(); i++) {
    x = (1 << i) - 1;
    do {
      ll a = 0;
      ll b = 0;
      ll c = 0;
      for (int j=0; j<meals.size(); j++) {
        if (x & (1 << j)) {

          a += meals[j][0];
          b += meals[j][1];
          c += meals[j][2];

          if (a == gp && b == gc && c == gf) {
            return true;
          } else if (a > gp || b > gc || c > gf) {
            break;
          }
        }
      }

      x = snoob(x);
    } while (x < (1 << meals.size()));
  }

  return false;
}

int main() {
  WRITE("B.txt");
  cin >> cases;

  for(size_t i = 1; i <= cases; i++) {
    cin >> gp >> gc >> gf;
    cout << "Case #" << i << ": ";
    cin >> n;

    meals.clear();

    for(size_t j = 0; j < n; j++) {
      vi meal;
      cin >> p >> c >> f;
      meal.PB(p);
      meal.PB(c);
      meal.PB(f);

      meals.PB(meal);
    }

    if (check()) {
      cout << "yes" << endl;
    } else {
      cout << "no" << endl;
    }
  }
}

#include <stdio.h>
#include <stdlib.h>
 
#define ARRAYSIZE(a) (sizeof(a))/(sizeof(a[0]))

int outA[100][21],outB[100][21],outC[100][21];
int call,index;

static int total_nodes;
 
// prints subset found
void printSubset(int A[], int size)
{
    for(int i = 0; i < size; i++)
    {
    	int j;
        //printf("%*d", 5, A[i]);
        if(call==1)
        outA[index][i]=A[i];
    }
    index++;
 
    printf("\n");
}
 
// qsort compare function
int comparator(const void *pLhs, const void *pRhs)
{
    int *lhs = (int *)pLhs;
    int *rhs = (int *)pRhs;
 
    return *lhs > *rhs;
}
 
// inputs
// s            - set vector
// t            - tuplet vector
// s_size       - set size
// t_size       - tuplet size so far
// sum          - sum so far
// ite          - nodes count
// target_sum   - sum to be found
void subset_sum(int s[], int t[],
                int s_size, int t_size,
                int sum, int ite,
                int const target_sum)
{
    total_nodes++;
 
    if( target_sum == sum )
    {
        // We found sum
        printSubset(t, t_size);
 
        // constraint check
        if( ite + 1 < s_size && sum - s[ite] + s[ite+1] <= target_sum )
        {
            // Exclude previous added item and consider next candidate
            subset_sum(s, t, s_size, t_size-1, sum - s[ite], ite + 1, target_sum);
        }
        return;
    }
    else
    {
        // constraint check
        if( ite < s_size && sum + s[ite] <= target_sum )
        {
            // generate nodes along the breadth
            for( int i = ite; i < s_size; i++ )
            {
                t[t_size] = s[i];
 
                if( sum + s[i] <= target_sum )
                {
                    // consider next level node (along depth)
                    subset_sum(s, t, s_size, t_size + 1, sum + s[i], i + 1, target_sum);
                }
            }
        }
    }
}
 
// Wrapper that prints subsets that sum to target_sum
void generateSubsets(int s[], int size, int target_sum)
{
    int *tuplet_vector = (int *)malloc(size * sizeof(int));
 
    int total = 0;
 
    // sort the set
    qsort(s, size, sizeof(int), &comparator);
 
    for( int i = 0; i < size; i++ )
    {
        total += s[i];
    }
 
    if( s[0] <= target_sum && total >= target_sum )
    {
 
        subset_sum(s, tuplet_vector, size, 0, 0, 0, target_sum);
 
    }
 
    free(tuplet_vector);
}
 
int main()
{
	
	int cas=1,t;
	scanf("%d",&t);
	while(t--)
	{
		int i,j;
		////////////////////////////=============///////////
		for(i=0;outA[i][0];i++){
			for(j=0;outA[i][j];j++)
			outA[i][j]=0;
		}
		////////////////////////////=============///////////
		int A,B,C;
		scanf("%d %d %d",&A,&B,&C);
		int n;
		scanf("%d",&n);
		int k,a[21]={0},b[21]={0},c[21]={0};
		for(i=0;i<n;i++)scanf("%d %d %d",&a[i],&b[i],&c[i]);
		
		//first
		int weights[n],target;
		for(i=0;i<n;i++)weights[i]=a[i];
		target=A;
		
		int size = ARRAYSIZE(weights);
		index=0,call=1;
		generateSubsets(weights, size, target);
		
		/*////////////////////////////=============///////////
		for(i=0;outA[i][0];i++){
			for(j=0;outA[i][j];j++)
			printf("%d ",outA[i][j]);
			puts("");
		}
		////////////////////////////=============//////////*/
		if(outA[0][0]){
			int match=0;
			for(i=0;outA[i][0];i++){
				
				//copy a into tmp
				int y,ind[21]={0},tmp[21];
				for(y=0;y<n;y++)tmp[y]=a[y];
				
				for(j=0;outA[i][j];j++){
				for(k=0;k<n;k++){ if(outA[i][j]==tmp[k]){tmp[k]=-1;ind[k]=1;break;} }
				}
				int l,sumB=0,sumC=0;
				for(l=0;l<20;l++){if(ind[l]==1)sumB+=b[l],sumC+=c[l];}
				//printf("***%d %d***\n",sumB,sumC);
				if(sumB==B && sumC==C)
				{printf("Case #%d: yes\n",cas);cas++;match=1;break;}
			}
			if(!match){printf("Case #%d: no\n",cas);cas++;}
		}
		else {printf("Case #%d: no\n",cas);cas++;}
        }
 
    return 0;
}
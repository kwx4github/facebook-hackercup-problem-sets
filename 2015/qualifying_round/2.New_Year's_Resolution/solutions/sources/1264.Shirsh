    import java.io.*;
import java.util.StringTokenizer;

/**
 * Created by shirsh on 11/1/15.
 */
public class OneThirty {
    public static void main(String...args) {
        Input input = new Input();

        int T = input.nextInt();
        for(int i = 0; i < T; i++) {
            int GP = input.nextInt();
            int GC = input.nextInt();
            int GF = input.nextInt();

            int N = input.nextInt();
            int P[] = new int[N];
            int C[] = new int[N];
            int F[] = new int[N];

            for(int j = 0; j < N; j++) {
                P[j] = input.nextInt();
                C[j] = input.nextInt();
                F[j] = input.nextInt();
            }

            System.out.println("Case #" + (i+1) + ": " + isPossible(GP, GC, GF, P,C, F, N));
        }
    }

    private static String isPossible(int gp, int gc, int gf, int[] p, int[] c, int[] f, int n) {
        int count = 1 << n;

        for(int i = 0; i < count; i++) {
            Integer num = new Integer(i);
            int cp = 0;
            int cc = 0;
            int cf = 0;
            for(int j = 0; j < n; j++) {
                int val = 1 << j;
                if((num & val) == val) {
                    cp += p[j];
                    cc += c[j];
                    cf += f[j];
                }
            }

            if(gp == cp && gc == cc && gf == cf) {
                return "yes";
            }
        }

        return "no";
    }

    static class Input {
        BufferedReader br;
        StringTokenizer st;

        public Input() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        public Input(String s) {
            try {
                br = new BufferedReader(new FileReader(s));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String nextToken() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(nextToken());
        }
    }
}

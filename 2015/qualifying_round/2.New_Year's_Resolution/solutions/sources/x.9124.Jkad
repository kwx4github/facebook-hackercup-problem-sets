#include <iostream>
#include <vector>
#include <deque>

#define YES 1
#define NO 0

using namespace std;

struct Food{
	int prot;
	int carbo;
	int fat;
};

struct Alex{
	int prot;
	int carbo;
	int fat;
};

int PROT;
int CARBO;
int FAT;
int status;

int eat(Alex &alex, vector<Food> &FoodList, int nextfood){
	if (nextfood >= FoodList.size()){
		if(alex.prot == PROT && alex.carbo == CARBO && alex.fat == FAT) status = YES;
		else status = NO;
		return status;
	}
	else {
		for(int i = nextfood; i < FoodList.size(); i++){
			int t1 = alex.prot + FoodList[i].prot;
			if(t1 <= PROT){
				int t2 = alex.carbo + FoodList[i].carbo;
				if (t2 <= CARBO){
					int t3 = alex.fat + FoodList[i].fat;
					if (t3 <= FAT){
						alex.prot = t1;
						alex.carbo = t2;
						alex.fat = t3;
						if(eat(alex, FoodList, i + 1) == NO){
							alex.prot -= FoodList[i].prot;
							alex.carbo -= FoodList[i].carbo;
							alex.fat -= FoodList[i].fat;
							continue;
						}
						else break;
					}
				}
			}
		}
		return status;
	}
}

int main(int argc, char const *argv[]){
	int T;
	Alex alex;
	std::vector<Food> FoodList;
	cin >> T;
	for(int i = 0; i < T; i++){
		status = NO;
		cin >> PROT;
		cin >> CARBO;
		cin >> FAT;
		alex.prot = 0;
		alex.carbo = 0;
		alex.fat = 0;
		int n;
		cin >> n;
		FoodList.resize(n);
		for(int j = 0; j < n; j++){
			cin >> FoodList[j].prot;
			cin >> FoodList[j].carbo;
			cin >> FoodList[j].fat;
		}
		eat(alex, FoodList, 0);
		if(status == YES) cout << "Case #" << i + 1 << ": yes" << endl;
		else cout << "Case #" << i + 1 << ": no" << endl;
	}
	return 0;
}
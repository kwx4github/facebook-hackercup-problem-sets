def sum_problem_dyn(nums, sum, cache):
    N = len(nums)
    for i in range(N):
        sum_sub = sum - nums[i]
        if sum_sub < 0:
            continue
        if sum_sub == 0:
            return True
        nums_sub = list(nums)
        nums_sub.remove(nums[i])
        nums_sub.sort()
        nums_hash = hash(tuple(nums_sub))
        if nums_hash in cache:
            continue
        else:
            cache.add(nums_hash)
        if sum_problem_dyn(nums_sub, sum_sub, cache):
            return True
    return False

f = open('C:\\temp\\new_years_resolution.txt')
out = open('C:\\temp\\new_years_resolution_output.txt', 'w')
T = int(f.readline().strip())

for t in range(1, T + 1):    
    sums = [int(i) for i in f.readline().strip().split(' ')]
    sum = sums[0] * 10**8 + sums[1] * 10**4 + sums[2]
    N = int(f.readline().strip())
    nums = []
    for n in range(N):
        num = [int(i) for i in f.readline().strip().split(' ')]
        nums.append(num[0] * 10**8 + num[1] * 10**4 + num[2])    
    result = "Case #{0}: {1}".format(t, "yes" if sum_problem_dyn(nums, sum, set()) else "no")
    print result
    out.write(result + "\n")    
out.close()








#include <iostream>
#include <vector>
using namespace std;

struct triad
{
	int P, C, F;
};

triad sub(triad G, triad A)
{
	G.P -= A.P;
	G.C -= A.C;
	G.F -= A.F;
	return G;
}

bool possible(vector<triad> &vec, triad G, int index)
{
	if (G.P == 0 && G.C == 0 && G.F == 0)
		return true;
	if (index == -1 && (G.P != 0 || G.C != 0 || G.F != 0))
		return false;
	return possible(vec, G, index - 1) || possible(vec, sub(G, vec[index]), index - 1);
}

int main()
{
	int T, N;
	cin >> T;
	vector<triad> vec;
	triad tmp, G;
	for (int i = 0; i < T; i++)
	{
		cin >> G.P >> G.C >> G.F >> N;
		for (int j = 0; j < N; j++)
		{
			cin >> tmp.P >> tmp.C >> tmp.F;
			if (tmp.P <= G.P && tmp.C <= G.C && tmp.F <= G.F)
				vec.push_back(tmp);
		}
		cout << "Case #" << i + 1 << ": " << (possible(vec, G, vec.size() - 1) ? "yes" : "no") << '\n';
		vec.clear();
	}
	return 0;
}
import java.io.*;
import java.util.Locale;
import java.util.StringTokenizer;

public class Main {

    private static BufferedReader in;
    private static PrintWriter out;
    private static StringTokenizer tok = new StringTokenizer("");

    public static void main(String[] args) {
        try {
//            if (System.getProperty("ONLINE_JUDGE") != null) {
                in = new BufferedReader(new InputStreamReader(System.in));
                out = new PrintWriter(System.out);
//            } else {
//                in = new BufferedReader(new FileReader("input.txt"));
//                out = new PrintWriter("output.txt");
//            }
// 
            Locale.setDefault(Locale.US);
            solve();
            in.close();
            out.close();
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    private static String readString() throws IOException {
        while (!tok.hasMoreTokens()) {
            tok = new StringTokenizer(in.readLine());
        }
        return tok.nextToken();
    }

    private static int readInt() throws IOException {
        return Integer.parseInt(readString());
    }

    private static byte readByte() throws IOException {
        return Byte.parseByte(readString());
    }

    private static long readLong() throws IOException {
        return Long.parseLong(readString());
    }

    private static double readDouble() throws IOException {
        return Double.parseDouble(readString());
    }

    private static void solve() throws IOException {
        int t = readInt();
        for (int i = 0; i < t; i++) {
            int prot = readInt();
            int carb = readInt();
            int fat = readInt();
            int N = readInt();
            int[][] fruits = new int[N][3];
            for (int j = 0; j < fruits.length; j++) {
                fruits[j] = new int[3];
                fruits[j][0] = readInt();
                fruits[j][1] = readInt();
                fruits[j][2] = readInt();
            }
            String result = subsetSum(fruits, fruits.length, prot, carb, fat) ? "yes" : "no";
            out.printf("Case #%d: %s\n", i + 1, result);
        }
    }

    private static boolean subsetSum(int[][] fruits, int n, int sp, int sc, int sf) {
        if (sp == 0 && sc == 0 && sf == 0) {
            return true;
        }
        if (n == 0) {
            return false;
        }

        if (fruits[n-1][0] > sp
                || fruits[n-1][1] > sc
                || fruits[n-1][2] > sf)
            return subsetSum(fruits, n-1, sp, sc, sf);

        return subsetSum(fruits, n - 1, sp, sc, sf) || subsetSum(fruits, n - 1, sp - fruits[n - 1][0], sc - fruits[n - 1][1], sf - fruits[n - 1][2]);
    }
}
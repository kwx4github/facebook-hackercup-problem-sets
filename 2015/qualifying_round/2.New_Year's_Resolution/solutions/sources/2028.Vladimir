#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <map>
#include <set>

#define f(i,beg,end) for(int i=beg; i<=end; i++)
#define F(i,beg,end) for(int i=beg; i>=end; i--)

#define input(file) freopen(file,"r",stdin)
#define output(file) freopen(file,"w",stdout)

typedef long long ll;
typedef unsigned long long ull;

using namespace std;

const ll mod = 1000000000 + 7;

int n;
int neededCarbs, neededProteins, neededFats;
vector <int> carbs, proteins, fats;

void precompute();
void init();
void solve(int);

int main() {
    input("new_years_resolution.txt");
    output("new_years_resolution_answer.txt");
    precompute();

    int tests = 1; cin >> tests;
    f(i,1,tests) {
        init();
        solve(i);
    }

    return 0;
}
void init() {
    cin >> neededCarbs >> neededProteins >> neededFats;
    cin >> n;

    carbs.resize(n);
    proteins.resize(n);
    fats.resize(n);

    f(i,0,n-1) {
        cin >> carbs[i] >> proteins[i] >> fats[i];
    }
}

void solve(int testNumber) {
    int totalCarbs = 0, totalProteins = 0, totalFats = 0;
    string hasSolution = "no";

    const int MAXIMAL_STATE = (1<<n) - 1;
    f(state,0,MAXIMAL_STATE) {
        totalCarbs = 0;
        totalProteins = 0;
        totalFats = 0;

        f(j,0,n-1) {
            if ((state >> j) & 1) {
                totalCarbs += carbs[j];
                totalProteins += proteins[j];
                totalFats += fats[j];
            }
        }

        if (totalCarbs == neededCarbs && totalProteins == neededProteins && totalFats == neededFats) {
            hasSolution = "yes";
        }
    }

    cout << "Case #" << testNumber << ": " << hasSolution << endl;
}

void precompute() {

}

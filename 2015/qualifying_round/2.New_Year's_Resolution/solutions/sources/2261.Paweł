#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>

class Three {
    public:
    int a,b,c;
    Three(int a, int b, int c);
    void is(Three tr);
    void add (Three tr);
    bool eq (Three tr);
    bool bigger_than(Three tr);
    void print();
};

Three::Three (int a=0, int b=0, int c=0)
{
        this->a = a;
        this->b = b;
        this->c = c;
    }

void Three::is (Three tr) {
    this->a = tr.a;
    this->b = tr.b;
    this->c = tr.c;
}

void Three::add (Three tr) {
        this->a += tr.a;
        this->b += tr.b;
        this->c += tr.c;
    }

bool Three::eq (Three tr) {
        if (  this->a == tr.a && this->b == tr.b && this->c == tr.c )
            return true;
        return false;
    }

bool Three::bigger_than (Three tr) {
    if ( this->a > tr.a || this->b > tr.b || this->c > tr.c)
        return true;
    return false;
}

void Three::print () {
    std::cout << this->a << " " << this->b << " " << this->c << std::endl;
}

bool cmp (Three const &a, Three const &b) {
    if ( a.a < b.a)
        return true;
    else if ( a.a > b.a)
        return false;
    else {
        if ( a.b > b.b)
            return false;
        else if ( a.b < b.b)
            return true;
        else
            return a.c < b.c;
    }
}

int main(void) {
    std::ifstream in ("new_years_resolution.txt");
    std::ofstream out ("nyr_output.txt");
    int tests;
    in >> tests;
    for (int i=0; i < tests; i++) {
        Three aim;
        in >> aim.a >> aim.b >> aim.c;

        int amount;
        in >> amount;

        int counter = 0;
        Three first_half[amount];

        for (int i =0; i < amount; i++) {
            Three temp;
            in >> temp.a >> temp.b >> temp.c;
            if (temp.bigger_than(aim))
                continue;
            first_half[counter] = temp;
            counter++;
        }

        Three second_half[counter - counter/2];
        for ( int i = 0; i < counter - counter/2; i++ ) {
            second_half[i] = first_half[counter/2 + i];
        }

        int first_half_amount = pow(2, counter/2);
        int second_half_amount = pow(2, counter - counter/2);
        int first_count = 0;
        int second_count = 0;
        Three first_sums[first_half_amount];
        Three second_sums[second_half_amount];

        for (int i=0; i < first_half_amount; i++) {
            Three sum;
            int temp = i;
            for (int j=0; j < counter/2 && temp > 0; j++) {
                if ( temp & 1 == 1)
                    sum.add(first_half[j]);
                temp /= 2;
            }
            if (sum.bigger_than(aim))
                continue;
            first_sums[first_count] = sum;
            first_count++;
        }

        for (int i=0; i < second_half_amount; i++) {
            Three sum;
            int temp = i;
            for (int j=0; j < counter - counter/2 && temp > 0; j++) {
                if ( temp & 1 == 1)
                    sum.add(second_half[j]);
                temp /= 2;
            }
            if (sum.bigger_than(aim))
                continue;
            second_sums[second_count] = sum;
            second_count++;
        }

        std::sort(first_sums, first_sums + first_count, cmp);
        std::sort(second_sums, second_sums + second_count, cmp);

        int j = 0;
        int k = second_count - 1;
        std::string result = "no";
        while ( j<first_count && k >= 0) {
            Three temp;
            temp.is(first_sums[j]);
            temp.add(second_sums[k]);

            if ( temp.eq(aim)) {
                result = "yes";
                break;
            }

            if (cmp (aim, temp))
                k--;
            else
                j++;
        }

        out << "Case #" << i+1 << ": " << result << std::endl;
    }
    out.close();
    in.close();
    return 0;
}

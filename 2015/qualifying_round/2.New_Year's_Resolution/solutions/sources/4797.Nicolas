/**
 * Created by Nicolas on 10.01.15.
 */

object ProbFace2 extends App {

    val scanner = new java.util.Scanner(System.in)

    for {
        i <- 1 to scanner.nextInt()
    }{
        val g = (scanner.nextInt(), scanner.nextInt(), scanner.nextInt())
        val n = scanner.nextInt()
        val fNutriments = for{
            j <- 1 to n
        }yield{
            (scanner.nextInt(), scanner.nextInt(), scanner.nextInt())
        }

        println("Case #" + i + ": " + pos(fNutriments.toList, n, g))
    }

    def pos(fNutriments: List[(Int, Int, Int)], n: Int, g: (Int, Int, Int)): String = {
        for{
            pcf <- fNutriments
        }{
            if (pcf._1 == g._1 && pcf._2 == g._2 && pcf._3 == g._3) {
                return "yes"
            } else if (pcf._1 > g._1 || pcf._2 > g._2 || pcf._3 > g._3){
            } else if (fNutriments.length > 1){
                val res = pos(fNutriments.filterNot(_ == pcf), n-1, (g._1 - pcf._1, g._2 - pcf._2, g._3 - pcf._3))
                if (res == "yes")
                    return res
            }
        }
        "no"
    }

}
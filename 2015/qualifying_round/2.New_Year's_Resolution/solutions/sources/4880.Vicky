package com.facebook;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeSet;

public class Problem2 {
	
	static boolean found = false;
	static Food targetFood;
	public static void main (String args[]) throws IOException {
		

		int casenum = 1;
		BufferedReader br = new BufferedReader(new FileReader(new File(args[0])));
		br.readLine();
		String line;
		while ((line = br.readLine()) != null) {
			found = false;
			String targetValues[] = line.split(" ");
			targetFood  = new Food(Integer.valueOf(targetValues[0]), Integer.valueOf( targetValues[1]), Integer.valueOf(targetValues[2]));
			line = br.readLine();
			Integer n = new Integer(line);
			Food allFods[] = new Food[n.intValue()];
			
			for (int i = 0 ; i <  n.intValue(); ++i) {
				line = br.readLine();
				String values[] = line.split(" ");
				allFods[i] = new Food(Integer.valueOf(values[0]), Integer.valueOf(values[1]), Integer.valueOf(values[2]));
			}
			
			permute(0, allFods);
			System.out.println("Case #"+ casenum+": " + (found ? "yes" : "no"));			
			++casenum;
			}
			
 			
		
		
		br.close();	
	}
	
	
	static String numberToCountString(int n) {
		String ret = "";
		for (int i = 0 ; i <  n ; ++i){
			ret += i;
		}
		
		return ret;
	}
	
	static ArrayList<Food> permute(int startindex, Food [] allFoods) {
		Food f = new Food(0,0,0);
		Food f1 = allFoods[startindex];
		
		f.add(f1.P, f1.C, f1.F);
		if (f.equals(targetFood)) {
			found = true;
		}
		
		ArrayList<Food> permFoods = new ArrayList<Problem2.Food>();
		permFoods.add(f);
		if (startindex == (allFoods.length -1) || found ==true) {	
			
			return permFoods;
		}
		
		
		
		ArrayList<Food> permutedFoods = permute(startindex + 1, allFoods);
		for(Food s: permutedFoods) {
			if (found == true){
				break;
			}
			Food newFood = new Food(s.P + f.P, s.C + f.C,  s.F + f.F );
			if (newFood.equals(targetFood)) {
				found = true;
				break;
			}
			permFoods.add(newFood);
			permFoods.add(s);
			
		}
		return permFoods;
	}
	
	static class Food {
		 int P;
		 int C;
		 int F;
		Food(int P, int C, int F) {
			this.P = P;
			this.C = C;
			this.F = F;
		}
		void add (int P, int C, int F) {
			this.P += P; this.C += C; this.F += F;
		}
		@Override
		public
		boolean equals(Object o) {
			Food other = (Food)o;
			
			if (this.P == other.P && this.C == other.C && this.F == other.F) {
				return true;
			}
			return false;
		}
	}
}

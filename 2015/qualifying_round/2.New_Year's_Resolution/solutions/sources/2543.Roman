#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:16777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
using namespace std;

#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair <int, int> PII;

const int INF = 1000000000;
const int MAX = 100007;
const int MAX2 = 10007;
const int BASE = 1000000000;
const int MOD = 1000000007;


int main()
{
    #ifndef ONLINE_JUDGE
        freopen("in.txt", "r", stdin);
        freopen("out.txt" , "w" , stdout);
    #endif

    int t;
    cin >> t;
    FOR(tt,0,t)
    {
        cout << "Case #" << tt + 1 << ": ";
        int A , B , C;
        cin >> A >> B >> C;
        int n;
        cin >> n;
        vector<int> a(n);
        vector<int> b(n);
        vector<int> c(n);

        FOR(i,0,n)
        {
            cin >> a[i] >> b[i] >> c[i];
        }

        bool ok = 0;
        FOR(mask ,0 , 1 << n)
        {
            int sa = 0;
            int sb = 0;
            int sc = 0;
            FOR(i,0,n)
            {
                if (mask & (1 << i))
                {
                    sa += a[i];
                    sb += b[i];
                    sc += c[i];
                }
            }
            ok |= (A == sa && B == sb && C == sc);
        }

        cout << (ok ? "yes" : "no") << endl;

    }

    return 0;
}

from sys import argv, exit
from numpy import subtract, add

def sumVectors(veca, vecb):
	return tuple(add(veca, vecb))

def subVectors(veca, vecb):
	return tuple(subtract(veca, vecb))

def isSubsetSum(vset, tsum):
	if tsum == (0, 0, 0):
		return True
	if tsum != (0, 0, 0) and len(vset) == 0:
		return False

	if vset[-1] > tsum:
		return isSubsetSum(vset[:-1], tsum)

	return isSubsetSum(vset[:-1], tsum) or isSubsetSum(vset[:-1], subVectors(tsum, vset[-1]))

def solve(limits, foods):
	return 'yes' if isSubsetSum(foods, limits) else 'no'

if __name__ == "__main__":
	if len(argv) < 2:
		print "Usage: %s <infile>" % (argv[0])
		exit(1)

	infile = open(argv[1])
	test_cases = int(infile.readline())

	for tc in xrange(test_cases):
		gp, gc, gf = [int(x) for x in infile.readline().split(' ')]
		num_foods = int(infile.readline())
		foods = list()
		
		for food_line in xrange(num_foods):
			food = infile.readline()
			foods.append(tuple([int(x) for x in food.split(' ')]))

		print 'Case #%d: %s' % (tc + 1, solve((gp, gc, gf), foods))

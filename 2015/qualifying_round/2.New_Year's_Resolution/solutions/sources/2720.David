#include <iostream>
#include <cstdlib>
#include <vector>

using namespace std;

// USAGE: nyr < input.file > output.file

namespace {
  class Food {
  public:
    int p, c, f;
    
    Food (int protein, int carbs, int fat) : p(protein), c(carbs), f(fat)
    {}
    
    inline bool operator == (const Food& other) const
    {
      return p == other.p && c == other.c && f == other.f;
    }
    
    inline bool operator > (const Food& other) const
    {
      return p > other.p || c > other.c || f > other.f;
    }    

    const Food operator + (const Food& arg) const {
      return Food(p + arg.p, c + arg.c, f + arg.f);
    }    
  };
}

bool is_exact_amount_possible(const Food& diet, const vector<Food>& foods, const Food& curr_sum, const unsigned int i)
{
  if (curr_sum == diet) return true; // we've found the exact amount
  if (curr_sum > diet) return false; // too much of a given source
  if (i >= foods.size()) return false; // not enough food
  
  int found_exact = is_exact_amount_possible(diet, foods, curr_sum + foods[i], i+1); // result from taking the food
  
  if (found_exact) return true; // we've found the exact amount
  else // explore the other branch
    return is_exact_amount_possible(diet, foods, curr_sum, i+1); // result from not taking the food
}

int main()
{
  unsigned int T; // number of Tests
  cin >> T;
  
  for (unsigned int test = 1; test <= T; ++test) {    
    int p, c, f;
    cin >> p >> c >> f;
    
    Food diet(p, c, f);
    
    int n;    
    cin >> n;
    vector<Food> foods;
    for(int i=0; i<n; i++) {
      cin >> p >> c >> f;
      foods.push_back(Food(p, c, f));
    }
    
    Food ini_sum(0, 0, 0);
    string solution = is_exact_amount_possible(diet, foods, ini_sum, 0) ? "yes" : "no";
    cout << "Case #" << test << ": " << solution << endl;
  }
  
  return EXIT_SUCCESS;
}

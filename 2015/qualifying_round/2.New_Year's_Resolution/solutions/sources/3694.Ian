import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

class Food {
	int protein;
	int carbohydrates;
	int fat;

	public Food(int p, int c, int f) {
		protein = p;
		carbohydrates = c;
		fat = f;
	}

	public int protein() {
		return protein;
	}

	public int carbohydrates() {
		return carbohydrates;
	}

	public int fat() {
		return fat;
	}
	
	public void add(Food f){
		this.protein += f.protein;
		this.carbohydrates += f.carbohydrates;
		this.fat += f.fat;
	}
	
	public boolean equals(Food f){
		return (protein == f.protein) && (this.carbohydrates == f.carbohydrates) && (this.fat == f.fat);
	}
	
	public boolean over(Food f) {
		return (protein > f.protein) || (this.carbohydrates > f.carbohydrates) || (this.fat > f.fat);
	}
	
	public boolean under(Food f){
		return (protein < f.protein) && (this.carbohydrates < f.carbohydrates) && (this.fat < f.fat);
	}
	
	public String toString(){
		return protein + "," + carbohydrates + "," + fat;
	}
	
}

public class NutrientCounter {
	public static void main(String args[]) throws FileNotFoundException {
		File inputFile = new File(args[0]);
		Scanner read = new Scanner(inputFile);
		String testCases = read.nextLine();
		int cases = Integer.parseInt(testCases);

		for (int i = 1; i <= cases; i++) {
			int gP = Integer.parseInt(read.next().trim());
			int gC = Integer.parseInt(read.next().trim());
			int gF = Integer.parseInt(read.next().trim());
			Food total = new Food(gP, gC, gF);
			int foodCount = Integer.parseInt(read.next().trim());
			Food[] foods = new Food[foodCount];
			for (int j = 0; j < foodCount; j++) {
				foods[j] = new Food(Integer.parseInt(read.next().trim()),
						Integer.parseInt(read.next().trim()),
						Integer.parseInt(read.next().trim()));
			}
			System.out.print("Case #" + i + ": ");
			boolean sums = sumPossible(total, foodCount, foods);
			if (sums) System.out.println("yes");
			else System.out.println("no");

		}
		read.close();
	}

	public static boolean sumPossible(Food total, int numArrayElements,
			Food[] array) {
		Food sum = new Food(0,0,0);
		Food[] validFood = new Food[numArrayElements];
		int validIndex = 0;		
		for (int i = 0; i < numArrayElements; i++){
			if (!array[i].over(total)){
				validFood[validIndex] = array[i];
				validIndex++;
				sum.add(array[i]);
			}
		}
		if (sum.under(total)){
			return false;
		}
		
		int combinations = (1 << validIndex) - 1;
		for (int i = 0; i < combinations; i++){
			sum = new Food(0, 0, 0);
			for (int j = 0; j < validIndex; j++){
				int mask = 1 << j;
				int result = (i & mask) >> j;
				if (result == 0){
					sum.add(validFood[j]);
				}
			}
			if (sum.equals(total)){
				return true;
			}
		}
		return false;
	}

}

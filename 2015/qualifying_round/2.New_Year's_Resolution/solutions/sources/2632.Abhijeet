#include <stdio.h>
#include <math.h>


struct nutr {
	int a;
	int b;
	int c;
	int setBlank() {
		a = b = c = 0;
	}
	int checkZero() {
		if(a==b && b==c) {
			return c==0;
		}
		return false;
	}
	int read() {
		scanf("%d%d%d", &a, &b, &c);
	}
};
void use(nutr *a, nutr *b) {
	a->a -= b->a;
	a->b -= b->b;
	a->c -= b->c;
}
int checkEqual(nutr *a, nutr *b) {
	use(a, b);
	return a->checkZero();
}

void add(nutr *a, nutr *b) {
	a->a += b->a;
	a->b += b->b;
	a->c += b->c;
}
bool checkPowerSet(nutr *set, int set_size, nutr *rqd)
{
    unsigned int pow_set_size = 1<<set_size;
    int counter, j;
    nutr sum; 
 
    /*Run from counter 000..0 to 111..1*/
    for(counter = 0; counter < pow_set_size; counter++) {
      sum.setBlank();
	  for(j = 0; j < set_size; j++)
       {
          /* Check if jth bit in the counter is set
             If set then pront jth element from set */
          if(counter & (1<<j))
            add(&sum, set+j);
       }
       if(checkEqual(&sum, rqd)) {
       	return true;
       }
    }
    return false;
}
 
/*Driver program to test printPowerSet*/
int main()
{
	int t, cnt, n;
	bool flag;
	nutr *set;
	nutr rqd;
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	scanf("%d", &t);
	for(cnt=1;cnt<=t;cnt++) {
		rqd.read();
		scanf("%d", &n);
		set = new nutr[n];
		for(int i=0;i<n;i++) {
			set[i].read();
		}
		printf("Case #%d: ", cnt);
		flag = checkPowerSet(set, n, &rqd);
		if(flag) {
			printf("yes\n");
		}
		else {
			printf("no\n");
		}
	}
    return 0;
}
/*Time Complexity: O(n2^n)*/

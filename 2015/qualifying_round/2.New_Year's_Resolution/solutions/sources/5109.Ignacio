package qr2015;

import java.util.*;
import java.io.*;

/**
 *
 * @author kronenthaler
 */
public class B {
    static byte memo[][][];
    static class node implements Comparable<node>{
        public int p,c,f;
        node(int _p, int _c, int _f){
            p=_p;
            c=_c;
            f=_f;
        }

        public int compareTo(node o) {
            return (o.p+o.c+o.f) - (p+f+c);
        }
    }
    
    public static void main(String[] argv){
        try{
            Scanner in = new Scanner(new FileInputStream("b_large.in"));
            System.setOut(new PrintStream(new FileOutputStream("b.out")));
            int T = in.nextInt();
            for(int cases=1;cases<=T;cases++){
                int dp=in.nextInt();
                int dc=in.nextInt();
                int df=in.nextInt();
                memo = new byte[dp+1][dc+1][df+1];
                ArrayList<node> food = new ArrayList<node>();
                int F = in.nextInt();
                int totalP=0,totalC=0,totalF=0;
                for(int f=0;f<F;f++){
                    node n = new node(in.nextInt(), in.nextInt(), in.nextInt());
                    food.add(n);
                    totalP+=n.p;
                    totalC+=n.c;
                    totalF+=n.f;
                }
                
                boolean possible = false;
                if(totalP >= dp && totalC >= dc && totalF >= df)
                    possible = isPossible(dp,dc,df, food, 0);
                
                System.out.printf("Case #%d: %s\n", cases, possible?"yes":"no");
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public static boolean isPossible(int dp, int dc, int df, List<node> food, int visited){
        if(dp == 0 && dc == 0 && df == 0) return true;
        //if(memo[dp][dc][df]!=0) return false;
        for(int i=0;i<food.size();i++){
            if((visited&(1<<i)) != 0) continue;
            node c = food.get(i);
            if(!(c.p <= dp && c.c <= dc && c.f <= df)) continue;
            if(isPossible(dp-c.p, dc-c.c, df-c.f, food, visited | (1<<i)))
                return true;
        }
        memo[dp][dc][df] = -1;
        return false;
    }
}

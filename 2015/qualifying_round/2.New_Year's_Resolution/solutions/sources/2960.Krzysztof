import Control.Monad

main = readLn >>= flip forM solve . enumFromTo 1
    where
        solve tc = do
            target <- readRow
            poss <- readLn >>= flip replicateM readRow
            let isgood = (target ==) . foldl (zipWith (+)) [0, 0, 0]
            let answer = not $ null $ filter isgood $ filterM (const [True, False]) poss
            putStrLn $ "Case #" ++ show tc ++ ": " ++ (if answer then "yes" else "no")

        readRow = liftM (map read . words) getLine

#include <iostream>
#include <fstream>
#include <stdlib.h>

class calorias{
	private:
		int x, y, z;

	public:
		calorias(int x, int y, int z){ this->x = x; this->y = y; this->z = z; };
		int getX(){ return x; };
		int getY(){ return y; };
		int getZ(){ return z; };

		int comparar(calorias* c)
		{
			if( c->getX() == x && c->getY() == y && c->getZ() == z)
				return 0;
			else if( c->getX() <= x && c->getY() <= y && c->getZ() <= z)
				return -1;
			else
				return 1;
		}
		
		void sumar(calorias* c){
			x += c->getX(); 
			y += c->getY(); 
			z += c->getZ(); 
		}
		
		void restar(calorias* c){
			x -= c->getX(); 
			y -= c->getY(); 
			z -= c->getZ(); 
		}
	
};

calorias* obtenerCaloriasString(char* buff){

	char aux[100];
	int i = 0;
	int x = 0;
	int count = 0;
	int values[3];

	while(buff[i] != '\0')
	{
		
		if(buff[i] != ' '){
			aux[x] = buff[i];
			x++;
		}else{
			aux[x] = '\0';
			values[count] = atoi(aux);
			count++;
			x=0;
		}

		i++;
	}


	aux[x] = '\0';
	values[count] = atoi(aux);
	count++;
	x=0;

	return new calorias(values[0], values[1] , values[2]);

}

int problema( calorias* sumMax, int comidaActual, calorias* listadoComidas[], int numComidas, calorias sumActual ){

	if(sumMax->comparar(&sumActual) == 0){
		return 1;
	}else if(sumMax->comparar(&sumActual) == 1){
		return 0;
	}else{
		int x = comidaActual + 1;
		while(x < numComidas){
			sumActual.sumar(listadoComidas[x]);
			
			if (problema( sumMax, x, listadoComidas, numComidas, sumActual ) == 1 ) {
				return 1;
			}
			
			sumActual.restar(listadoComidas[x]);
			x++;
		}
		
		return 0;
	}	
	
}

int main(){
	
	std::ifstream file("2.txt");
	std::ofstream fileOutput("2o.txt");

	char buff[100];
	file.getline(buff, 100);

	int total = atoi(buff);
	int count=0;

	
	while(count < total)
	{
		// Leemos el numero de calorias que quiere Alex.
		file.getline(buff, 100);
		calorias* sumMax = obtenerCaloriasString(buff);

		//obtenemos el nÃºmero de comidas:
		file.getline(buff, 100);
		int numComidas = atoi(buff);
		int x = 0;

		calorias* listadoComidas[numComidas];
	
		int i = 0;
		while(x < numComidas){
		
			
			file.getline(buff, 100);
			calorias* cal = obtenerCaloriasString(buff);
			if( cal->getX() <= sumMax->getX() && cal->getY() <= sumMax->getY() && cal->getZ() <= sumMax->getZ()  ){
				listadoComidas[i] = cal;
				i++;
			}
			
			x++;
		}

		// Actualizamos el numero de comidas por las que han quedado por no sobrepasar lo que pide Alex.
		numComidas = i;

		// Empezamos:
		bool posible = false;
		int actual = 0;
		while(!posible && actual < numComidas){
			calorias c(listadoComidas[actual]->getX(), listadoComidas[actual]->getY(), listadoComidas[actual]->getZ());
			
			if(problema(sumMax, actual, listadoComidas, numComidas, c) == 1){
				posible = true;	
			}
			
			actual++;
		}
		

		// Imprimimos resultado:
		if(posible){
			std::cout  << "Case #" << (count+1) << ": yes" << std::endl;
		}else{
			std::cout  << "Case #" << (count+1) << ": no" << std::endl;
		}
		

		count++;
	}

	fileOutput.close();
}

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Scanner;


public class fb2
{
		private static int[] convertIntArray(String[] dietRequiredStr)
		{
			int[] intArray = new int[dietRequiredStr.length];
			for(int i=0; i<dietRequiredStr.length; i++)
			{
				intArray[i] = Integer.parseInt(dietRequiredStr[i]);
			}
			
			return intArray;
		}
		
		private static int sum(int[] intArray)
		{
			int sum = 0;
			for(int i=0; i<intArray.length; i++)
			{
				sum = sum+intArray[i];
			}
			
			return sum;
		}
		
		private static void findResult()
		{
			int numsCount = Integer.parseInt(scanner.nextLine());
			for(int k=0; k<numsCount && scanner.hasNextLine(); k++)
			{
				int[] dietRequiredIntsr = convertIntArray(scanner.nextLine().split(" "));
				int dietVarieties = Integer.parseInt(scanner.nextLine());
				
				List<int[]> list = new ArrayList<int[]>();
				for(int i=0; i<dietVarieties; i++)
				{
					list.add(convertIntArray(scanner.nextLine().split(" ")));
				}
				
				boolean finalResult = true;
				for(int i=0; i<dietRequiredIntsr.length; i++)
				{
					int [] tmpList = new int[dietVarieties];
					for(int j=0; j<dietVarieties; j++)
					{
						tmpList[j] = ((int[])(list.get(j)))[i];
					}
					ArrayList<int[]> powerSet = powerset(tmpList);
					boolean found = false;

					for(int m=0; m<powerSet.size(); m++)
			        {
			        	//itr.
						if(dietRequiredIntsr[i] == sum(powerSet.get(m)))
						{
							int[] tmp = powerSet.get(m);
							found = true;
							break;
						}
			        }
			        
			        String result = "";
			        if(found == false)
			        {
			        	finalResult = false;
			        	break;
			        }
				}
			        
		        String result = "";
		        if(finalResult == true)
		        {
		        	result = "yes";
		        }
		        else
		        {
		        	result = "no";
		        }
		        
		        try {
					bw.write("Case #"+(k+1)+": "+result+"\n");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		public static void main(String[] args) {
			init();
			findResult();
			release();
	       //construct the set S = {a,b,c}
	       //int set[] = {1,2,3,4};
	     
	       //form the power set
	       //List<int[]> myPowerSet = powerset(set);
	       /*for (int i = 0; i<myPowerSet.size(); i++)
	       {
	    	   for(int j=0; j<myPowerSet.get(i).length; j++)
	    	   {
	    		   System.out.print(myPowerSet.get(i)[j]);
	    	   }
	    	   System.out.print("\n");
	       }*/
	       //display the power set
	       //System.out.println(myPowerSet.toString());
	     
	   }
	 
	   /**
	     * Returns the power set from the given set by using a binary counter
	     * Example: S = {a,b,c}
	     * P(S) = {[], [c], [b], [b, c], [a], [a, c], [a, b], [a, b, c]}
	     * @param set String[]
	     * @return LinkedHashSet
	     */
	   private static ArrayList<int[]> powerset(int[] set) {
	     
	       //create the empty power set
		   ArrayList<int[]> power = new ArrayList<int[]>();
	     
	       //get the number of elements in the set
	       int elements = set.length;
	     
	       //the number of members of a power set is 2^n
	       int powerElements = (int) Math.pow(2,elements);
	     
	       //run a binary counter for the number of power elements
	       for (int i = 0; i < powerElements; i++) {
	         
	           //convert the binary number to a string containing n digits
	           String binary = intToBinary(i, elements);
	         
	           //create a new set
	           LinkedHashSet innerSet = new LinkedHashSet();
	         
	           int[] tmp = new int[binary.length()];
	           int index = 0;
	           //convert each digit in the current binary number to the corresponding element
	            //in the given set
	           for (int j = 0; j < binary.length(); j++) {
	               if (binary.charAt(j) == '1')
	               {
	            	   tmp[index] = set[j];
	               	   ++index;
	               }
	           }
	         
	           //add the new set to the power set
	           power.add(tmp);
	         
	       }
	     
	       return power;
	   }
	 
	   /**
	     * Converts the given integer to a String representing a binary number
	     * with the specified number of digits
	     * For example when using 4 digits the binary 1 is 0001
	     * @param binary int
	     * @param digits int
	     * @return String
	     */
	   private static String intToBinary(int binary, int digits) {
	     
	       String temp = Integer.toBinaryString(binary);
	       int foundDigits = temp.length();
	       String returner = temp;
	       for (int i = foundDigits; i < digits; i++) {
	           returner = "0" + returner;
	       }
	     
	       return returner;
	   } 
	   
		static private Scanner scanner = null;
		static private BufferedWriter bw = null;
		
		private static void init()
		{
			FileInputStream fis = null;
			try {
				fis = new FileInputStream("C:/input.txt");
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			scanner = new Scanner(fis);
			
			
			
			File fout = new File("C:/output.txt");
			FileOutputStream fos = null;
			try {
				fos = new FileOutputStream(fout);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		 
			bw = new BufferedWriter(new OutputStreamWriter(fos));
		}
		
		private static void release()
		{
			scanner.close();
			try {
				bw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
}
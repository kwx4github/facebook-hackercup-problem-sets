#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#include <set>
#include <map>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a>b?b:a
#define GCD(a,b)  { return (b==0)?a:GCD(b,a%b);
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,n,x) for(i=x;i<n;i++)
#define BACK(i,n) for(i=n;i>=0;i--)
#define BACK_X(i,n,x) for(i=n;i>=x;i--)

typedef long long int lld;
using namespace std;
struct node{
	int a,b,c;
};
node arr[22];
node dp[(1<<21)+9];
int main()
{
	ios_base::sync_with_stdio(0); //dont use with EOF
	int t,n,tt=0,x,y,z,i;
	cin>>t;
	while(t--)
	{
		tt++;
		cin>>x>>y>>z;
		cin>>n;
		FOR(i,n)
		{
			cin>>arr[i].a>>arr[i].b>>arr[i].c;
		}
		dp[0]=(node){0,0,0};
		int last= 1<<n;
		int ans=0;
		FOR_X(i,last,1)
		{
			int pos=__builtin_ctz(i);
			int tmp= i & ( ~(1<<pos));
			dp[i]= (node) {dp[tmp].a+arr[pos].a , dp[tmp].b+arr[pos].b , dp[tmp].c+arr[pos].c };
			if( dp[i].a==x && dp[i].b==y && dp[i].c==z)
			{
				ans=1; break;
			}
		}
		if(ans==1)
		cout<<"Case #"<<tt<<": yes\n";
		else cout<<"Case #"<<tt<<": no\n";
		
	}
	return 0;
}

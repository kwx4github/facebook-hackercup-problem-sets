#!/usr/bin/env python3
import sys

def read_ints():
    return map(int, sys.stdin.readline().strip().split())

t, = read_ints()

class Triple:
    def __init__(self, p, c, f):
        self.p, self.c, self.f = p, c, f

    def __eq__(lhs, rhs):
        return lhs.p == rhs.p and lhs.c == rhs.c and lhs.f == rhs.f

    def __gt__(lhs, rhs):
        return lhs.p > rhs.p or lhs.c > rhs.c or lhs.f > rhs.f

    def __add__(lhs, rhs):
        return Triple(lhs.p + rhs.p, lhs.c + rhs.c, lhs.f + rhs.f)


Triple.Zero = Triple(0, 0, 0)

def solve(foods, target):
    def bt(foods, target, state):
        if state > target: return False
        if not foods: return target == state
        return bt(foods[1:], target, state + foods[0]) or bt(foods[1:], target, state)

    return bt(foods, target, Triple.Zero)

for i in range(1, t+1):
    target = Triple(*read_ints())
    n, = read_ints()
    foods = list( Triple(*read_ints()) for _ in range(n) )

    result = 'yes' if solve(foods, target) else 'no'

    print('Case #{}: {}'.format(i, result))

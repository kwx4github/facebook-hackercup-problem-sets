#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;
typedef long long ll;

ll rdtsc() {
  ll tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

struct Triple {
  int a[3];

  int read() {
    for (int i = 0; i < 3; ++i)
      if (scanf("%d", &a[i]) < 1)
        return 0;
    return 1;
  }

  Triple(int x=0) {
    for (int i = 0; i < 3; ++i)
      a[i] = x;
  }

  inline Triple operator + (const Triple &b) const {
    Triple res;
    for (int i = 0; i < 3; ++i)
      res.a[i] = a[i] + b.a[i];
    return res;
  }

  inline bool operator > (const Triple &t) const {
    for (int i = 0; i < 3; ++i)
      if (a[i] > t.a[i])
        return 1;
    return 0;
  }

  inline bool operator == (const Triple &t) const {
    for (int i = 0; i < 3; ++i)
      if (a[i] != t.a[i])
        return 0;
    return 1;
  }
};

bool gen(int iter, int n, Triple *a, Triple cur, const Triple &we) {
  if (cur > we)
    return 0;
  if (cur == we)
    return 1;
  if (iter == n)
    return 0;

  if (gen(iter + 1, n, a, cur + a[iter], we))
    return 1;

  return gen(iter + 1, n, a, cur, we);
}

const int maxn = 20 + 5;
Triple a[maxn];

bool solve() {
  Triple we;
  if (!we.read())
    return 0;

  int n;
  assert(scanf("%d", &n) == 1);
  for (int i = 0; i < n; ++i) {
    a[i].read();
  }

  if (gen(0, n, a, Triple(0), we)) {
    printf("yes\n");
  } else
    printf("no\n");

  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".in", "r", stdin);
  freopen(TASKNAME".out", "w", stdout);
#endif

  int t;
  while (scanf("%d", &t) == 1) {
    for (int i = 0; i < t; ++i) {
      printf("Case #%d: ", i + 1);
      assert(solve());
    }
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}

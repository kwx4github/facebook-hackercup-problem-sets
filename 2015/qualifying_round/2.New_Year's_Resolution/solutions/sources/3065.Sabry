#include <bits/stdc++.h>

using namespace std ;

typedef long long ll; ///NOTES:int64
typedef vector<int> vi;

const double eps = 1e-8; ///NOTES:eps
const int dx[] = {1, 0, -1, 0};
const int dy[] = {0, 1, 0, -1};
const double pi = acos(-1.0); ///NOTES:pi
const int MAX = 1000000000 ; /// 10^9


#define SZ(x)           (int)x.size()
#define ALL(x)          (x).begin()                                                                                                                                                                                                                                                                                                                                                                                                                                                               ,(x).end()
#define ALLR(x)         (x).rbegin(),(x).rend()
#define PB( x )         push_back(x)
#define MP(x , y)           make_pair(x,y)
#define rep(i,st,en) for(int i=st ; i< en; i++)
#define repR(i,st,en) for(int i=st;i>=en ; i--)

///-----------*  Topcoder Contest class  *-----------------///////////////////

class CCipher
{
public :


};





///----------------------  Cooking the Books problem  ------------------------///
int main()
{
 freopen("new_years_resolution.txt" , "rt",stdin);
 freopen("new_years_resolution_output.txt", "wt", stdout);

int T ;

while ( cin >> T )
{


    rep(t,1,T+1)
   {
        int Gp , Gc ,Gf ;
        scanf("%d%d%d" , &Gp ,  &Gc , &Gf);
        ///cin >> Gp >> Gc >> Gf ;

       int n ;
       scanf("%d" , &n);
       ///cin >> n ;

       vector< vector<int> > all(n , vector<int>(3));   /// p,c,f ;
       rep(k,0,n)
       {
            scanf("%d%d%d" , &all[k][0] , &all[k][1] , &all[k][2]);
           /// cin >> all[k][0] >> all[k][1] >> all[k][2] ;
       }

       /// bitmasks approach
       bool isOK = 0 ;
       int sumP , sumC , sumF ;
       rep( i , 0 , (int)pow(2,n) )
       {
           sumP = sumC =  sumF = 0 ;
           rep(j,0,n)
           {
               if(  i & (1 << j ))
               {
                   sumP += all[j][0];
                   sumC += all[j][1];
                   sumF += all[j][2];
               }

           }

           if(sumP == Gp && sumC == Gc && sumF == Gf  )
           {
               isOK = 1;
               break;
           }
       }


       if(isOK)  printf("Case #%d: yes\n" , t);
       else      printf("Case #%d: no\n" , t);


    }

    ///end of file loop
}


return 0;
}

import java.io.*;
import java.util.*;

public class NewYearsResolution {
    BufferedReader br;
    StringTokenizer in;
    PrintWriter out;
    int gp, gc, gf, n;
    int[][] a;

    public String nextToken() throws IOException {
        while (in == null || !in.hasMoreTokens()) {
            in = new StringTokenizer(br.readLine());
        }
        return in.nextToken();
    }

    public int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    public double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    public long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    public static void main(String[] args) throws IOException {
        new NewYearsResolution().run();
    }

    boolean gen(int cp, int cc, int cf, int k) {
        if (k == n) {
            return cp == gp && cc == gc && cf == gf;
        } else {
            return gen(cp + a[k][0], cc + a[k][1], cf + a[k][2], k + 1) || gen(cp, cc, cf, k + 1);
        }
    }

    public void solve() throws IOException {
        int t = nextInt();
        for (int cycle = 1; cycle <= t; cycle++) {
            gp = nextInt();
            gc = nextInt();
            gf = nextInt();
            n = nextInt();
            a = new int[n][3];
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < 3; j++) {
                    a[i][j] = nextInt();
                }
            }
            out.print("Case #" + cycle + ": ");
            if (gen(0, 0, 0, 0)) {
                out.println("yes");
            } else {
                out.println("no");
            }
        }
    }

    public void run() {
        try {
            br = new BufferedReader(new FileReader("new_years_resolution.txt"));
            out = new PrintWriter("new_years_resolution_output.txt");

            solve();

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
}
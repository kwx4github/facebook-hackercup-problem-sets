import Control.Monad

readInt :: String -> Int
readInt = read

toTuple :: [Int] -> (Int, Int, Int)
toTuple [a, b, c] = (a, b, c)

ans :: Bool -> String
ans True = "yes"
ans False = "no"

fun :: (Int, Int, Int) -> [(Int, Int, Int)] -> Bool
fun (0, 0, 0) _ = True
fun _ [] = False
fun (gp, gc, gf) ((p, c, f): xs)
  | gp < 0 || gc < 0 || gf < 0 = False
  | gp >= p && gc >= c && gf >= f = (fun (gp - p, gc - c, gf - f) xs) || (fun (gp, gc, gf) xs)
  | otherwise = fun (gp, gc, gf) xs

main = do
  t <- liftM readInt getLine
  forM_ [1..t] (\i -> do
        gTuple <- liftM (toTuple . map readInt . words) getLine
        n <- liftM readInt getLine
        l <- replicateM n (liftM (toTuple . map readInt . words) getLine)
        putStrLn $ "Case #" ++ (show i) ++ ": " ++ (ans $ fun gTuple l)
    )

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PI;
typedef vector<PI> VPI;

#define FOR(i,a,n) for (int i = (a); i < (n); ++i)
#define FORE(i,a,n) for (int i = (a); i <= (n); ++i)
#define FORD(i,a,b) for (int i = (a); i >= (b); --i)
#define REP(i,n) FOR(i,0,n)
#define REPE(i,n) FORE(i,0,n)
#define LL long long
#define FIR(n) REP(i,n)
#define FJR(n) REP(j,n)
#define ALL(v) v.begin(), v.end()

#define FI FIR(n)
#define FJ FJR(n)
#define FR(i,a) FOR(i,a,n)
#define REPN(i) REP(i,n)

#define GI(n) scanf("%d", &n)
#define GI2(n,m) scanf("%d %d", &n, &m)

int T[3];
int a[20][3];

bool solve() {
	FIR(3) GI(T[i]);
	int n; GI(n);
	FI FJR(3) GI(a[i][j]);

	REP(mask, 1<<n) {
		int s[3] = {0, 0, 0};
		FI if (mask & (1 << i))
			FJR(3) s[j] += a[i][j];

		if (s[0] == T[0] && s[1] == T[1] && s[2] == T[2])
			return true;
	}

	return false;
}

int main() {
freopen("b-in.txt", "rt", stdin);
freopen("b-out.txt", "w", stdout);

	int ntc; GI(ntc);
	FORE(tc, 1, ntc) {
		
		bool ok = solve();
		printf("Case #%d: %s\n", tc, (ok ? "yes" : "no"));
		fprintf(stderr, "Case #%d: %s\n", tc, (ok ? "yes" : "no"));
	}


}

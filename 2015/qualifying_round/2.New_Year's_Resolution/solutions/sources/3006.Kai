#include <iostream>
#include <set>
#include <vector>
using namespace std;

int list[20][3];
bool gao(int gp,int gc, int gf,int N)
{
    set<long long> pool;
    for(int i=0;i<N;i++)
    {
        set<long long>::iterator it = pool.begin();
        vector<long long> newVal;
        for(;it != pool.end();it++)
        {
            long long cur = *it;
            int a = cur / 100000000L + list[i][0];
            int b = cur % 100000000L / 10000 + list[i][1];
            int c = cur % 10000 + list[i][2];
            
            if(a > gp || b > gc || c > gf) continue;

            if(a == gp && b == gc && c == gf) return true;

            newVal.push_back( (long long)a * 100000000L + (long long)b * 10000 + c);
        }
        if(list[i][0] == gp && list[i][1] == gc && list[i][2] == gf) return true;
        pool.insert((long long)list[i][0] * 100000000L + (long long)list[i][1] * 10000 + list[i][2]);
        for(vector<long long>::iterator it = newVal.begin();it != newVal.end();it++)
            pool.insert(*it);
    }
    return false;
}

int main()
{
    int T;
    cin>>T;
    for(int ca=1;ca<=T;ca++)
    {
        int gp,gc,gf;
        cin>>gp>>gc>>gf;

        int N;
        cin>>N;

        for(int i=0;i<N;i++)
            cin>>list[i][0]>>list[i][1]>>list[i][2];

        cout<<"Case #"<<ca<<": ";
        if(gao(gp,gc,gf,N))
            cout<<"yes"<<endl;
        else
            cout<<"no"<<endl;
    }
    return 0;
}

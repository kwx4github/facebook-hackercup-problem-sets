package qualification;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class NewYearsResolution {
	public static void main(String[] args) {
		ArrayList<TestCase> allCases = loadFile(args[0]);
		try {
			File outputFile = new File("new_years_output.txt");
			PrintWriter out = new PrintWriter(outputFile);
			for (int i = 0; i < allCases.size(); i++) {
				TestCase currentCase = allCases.get(i);
				boolean isPossible = currentCase.isPossible();
				if (isPossible) {
					out.printf("Case #%s: %s\n", i + 1, "yes");
					System.out.printf("Case #%s: %s\n", i + 1, "yes");
				}
				else{
					out.printf("Case #%s: %s\n", i + 1, "no");
					System.out.printf("Case #%s: %s\n", i + 1, "no");
				}
			}
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

	}

	public static ArrayList<TestCase> loadFile(String fileName) {
		File inputFile = new File(fileName);
		int testCaseNum = 0;
		ArrayList<TestCase> caseList = new ArrayList<TestCase>();
		try {
			Scanner in = new Scanner(inputFile);
			testCaseNum = Integer.parseInt(in.nextLine());
			for (int k = 0; k < testCaseNum; k++) {
				String line = in.nextLine();
				int[] goal = parseValues(line);
				int numOfFoods = Integer.parseInt(in.nextLine());
				ArrayList<int[]> currentFoodList = new ArrayList<int[]>();
				for (int i = 0; i < numOfFoods; i++) {
					String currentLine = in.nextLine();
					int[] currentFood = parseValues(currentLine);
					currentFoodList.add(currentFood);
				}
				NewYearsResolution.TestCase tempCase = new NewYearsResolution.TestCase(
						goal, currentFoodList);
				caseList.add(tempCase);
			}

			in.close();
			return caseList;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public static int[] parseValues(String s) {
		int[] currentFood = new int[3];
		for (int i = 0; i < currentFood.length; i++) {
			if (i == 2) {
				currentFood[i] = Integer.parseInt(s.substring(0, s.length()));
			} else {
				currentFood[i] = Integer
						.parseInt(s.substring(0, s.indexOf(" ")));
				s = s.substring(s.indexOf(" ") + 1, s.length());
			}
		}

		return currentFood;
	}

	private static class TestCase {
		private int[] goal;
		private ArrayList<int[]> foods;

		public TestCase(int[] goal, ArrayList<int[]> foods) {
			this.goal = goal;
			this.foods = foods;
		}

		public boolean isPossible() {
			for (int i = 0; i < foods.size(); i++) {
				ArrayList<int[]> tempList = new ArrayList<int[]>();
				int[] currentFood = foods.get(i);
				tempList.add(currentFood);
				ArrayList<int[]> leftovers = (ArrayList<int[]>) foods.clone();
				leftovers.remove(i);
				boolean idk = isPossible(tempList, leftovers);
				if(idk){
					return idk;
				}

			}
			return false;
		}

		private boolean isPossible(ArrayList<int[]> currentList,
				ArrayList<int[]> leftovers) {
			if (doesItAddUp(currentList)) {
				return true;
			}
			else if(leftovers.size() == 0){
				return false;
			}
			else if(isOverLimit(currentList)){
				return false;
			}
			for (int i = 0; i < leftovers.size(); i++) {
				ArrayList<int[]> newList = (ArrayList<int[]>) currentList
						.clone();
				ArrayList<int[]> newLeftovers = (ArrayList<int[]>) leftovers
						.clone();
				newList.add(newLeftovers.get(i));
				newLeftovers.remove(i);
				boolean idk = isPossible(newList, newLeftovers);
				if(idk){
					return idk;
				}
			}
			return false;

		}

		private boolean doesItAddUp(ArrayList<int[]> list) {
			int firstColumn = 0;
			int secondColumn = 0;
			int thirdColumn = 0;
			for (int i = 0; i < list.size(); i++) {
				firstColumn = firstColumn + list.get(i)[0];
				secondColumn = secondColumn + list.get(i)[1];
				thirdColumn = thirdColumn + list.get(i)[2];
			}
			if (firstColumn == goal[0] && secondColumn == goal[1]
					&& thirdColumn == goal[2]) {
				return true;
			}
			return false;
		}
		
		private boolean isOverLimit(ArrayList<int[]> list) {
			int firstColumn = 0;
			int secondColumn = 0;
			int thirdColumn = 0;
			for (int i = 0; i < list.size(); i++) {
				firstColumn = firstColumn + list.get(i)[0];
				secondColumn = secondColumn + list.get(i)[1];
				thirdColumn = thirdColumn + list.get(i)[2];
			}
			if (firstColumn > goal[0] || secondColumn > goal[1]
					|| thirdColumn > goal[2]) {
				return true;
			}
			return false;
		}

	}

}

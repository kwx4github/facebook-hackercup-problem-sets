using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Collections;
using System.Linq;

namespace FBHC2015.QR
{
    public class NewYearResolution
    {
        static class Program
        {
            [STAThread]
            static void Main(string[] args)
            {
                string inpFilePath = "QR\\InputOutputFiles\\new_years_resolution_example_input.in";
                if (args.Length > 0) inpFilePath = args[0];
                NewYearResolution b = new NewYearResolution(inpFilePath);
                b.Run();
            }
        }


        class Nutri
        {
            private int[] nutri;
            public int P { get { return nutri[0]; } }
            public int C { get { return nutri[1]; } }
            public int F { get { return nutri[2]; } }

            public Nutri(string line)
            {
                nutri = line.Split().Select(t => int.Parse(t)).ToArray();
            }

            public Nutri(int p, int c, int f)
            {
                nutri = new int[] { p, c, f };
            }

            public override bool Equals(object obj)
            {
                Nutri n = obj as Nutri;
                return (n != null && n.P == P && n.C == C && n.F == F);
            }

            public void Add(Nutri n)
            {
                nutri[0] += n.P;
                nutri[1] += n.C;
                nutri[2] += n.F;
            }

            public void Remove(Nutri n)
            {
                nutri[0] -= n.P;
                nutri[1] -= n.C;
                nutri[2] -= n.F;
            }
        }
        StreamReader inputFile;
        StreamWriter outPutFile;

        long totalCases, testCase;
        string fileLine, inputFilePath, outputFilePath;

        //Problem Variables 
        Nutri required;
        Nutri[] foods;

        public NewYearResolution(string inputFilePath)
        {
            this.inputFilePath = Path.GetFullPath(inputFilePath);
            this.outputFilePath = Path.Combine(Path.GetDirectoryName(inputFilePath), Path.GetFileNameWithoutExtension(inputFilePath) + ".out");
        }

        public void Run()
        {
            this.inputFile = new StreamReader(this.inputFilePath);
            this.outPutFile = new StreamWriter(this.outputFilePath);

            fileLine = this.inputFile.ReadLine();
            totalCases = Convert.ToInt32(fileLine);

            for (testCase = 0; testCase < totalCases; testCase++)
            {
                InitTestCase();
                RunTestCase();
                this.outPutFile.Flush();
            }

            this.outPutFile.Close();
            this.inputFile.Close();
        }

        private void InitTestCase()
        {
            required = new Nutri(this.inputFile.ReadLine());
            int N = int.Parse(this.inputFile.ReadLine());
            foods = new Nutri[N];
            for (int i = 0; i < N; i++)
            {
                foods[i] = new Nutri(this.inputFile.ReadLine());
            }
        }

        private void RunTestCase()
        {
            string result = "no";
            Nutri total = new Nutri(foods.Sum(n => n.P), foods.Sum(n => n.C), foods.Sum(n => n.F));
            if (required.Equals(total))
            {
                result = "yes";
            }
            else if (required.C < total.C && required.P < total.P && required.F < total.F)
            {
                result = tryCombinations(new Nutri(0, 0, 0), 0) ? "yes" : "no";
            }
            this.outPutFile.Write("Case #{0}: {1}\r\n", this.testCase + 1, result);
        }

        private bool tryCombinations(Nutri n, int startIndex)
        { 
            bool result = false;
            for (int i = startIndex; i < foods.Length; i++)
            {
                n.Add(foods[i]);
                if (required.Equals(n) || tryCombinations(n, i + 1))
                {
                    result = true;
                    break;
                }
                n.Remove(foods[i]);
            }
            return result;
        }
    }
}

#pragma comment(linker, "/STACK:16777216")
#include <iostream>
#include <climits>
#include <fstream>
#include <cstring>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <iomanip>
#include <cstdio>
#include <ctime>
#include <functional>
#include <iterator>
#include <complex>
#include <queue>
#include <cassert>
#include <sstream>
#include <cstdlib>

#define PROBLEM_ID ""

using namespace std;

double pi = acos((double) -1);
const int MOD = 1000000007;
const int INF = 2147483647;
const long long LLONG_INF = 9223372036854775807LL;

int binpow(int a, int n) {
    if (n == 0)
        return 1;
    if (n % 2 == 1)
        return binpow(a, n - 1) * a;
    else {
        int b = binpow(a, n / 2);
        return b * b;
    }
}

int main() {
    clock_t tStart = clock();
    //freopen(PROBLEM_ID".in", "r", stdin);
    freopen("output.txt", "w", stdout);
    int tests;
    cin >> tests;

    for (int test = 1; test <= tests; test++) {
        int N, gP, gC, gF, P, C, F;
        cin >> gP >> gC >> gF;

        cin >> N;
        vector<int> Ps, Cs, Fs;
        for (int i = 0; i < N; i++) {
            cin >> P >> C >> F;
            Ps.push_back(P); Cs.push_back(C); Fs.push_back(F);
        }

        bool possible = false;
        int p = binpow(2, N + 1);
        for (int i = 0; i < p; i++) {
            int totalp = 0, totalc = 0, totalf = 0;
            int j = i;
            int g = 0;
            while (j) {
                if (j % 2 == 1) {
                    totalp += Ps[g]; totalc += Cs[g]; totalf += Fs[g];
                }
                j /= 2;
                g++;
            }

            if (totalp == gP && totalc == gC && totalf == gF) {
                possible = true;
                break;
            }
        }

        cout << "Case #" << test << ": " << (possible ? "yes" : "no") << endl;
    }
    //printf("Time taken: %.2fs\n", (double)(clock() - tStart)/CLOCKS_PER_SEC);
}

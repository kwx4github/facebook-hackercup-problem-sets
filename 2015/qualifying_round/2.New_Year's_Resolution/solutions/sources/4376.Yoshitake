#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <stack>
#include <queue>
#include <cctype>
#include <complex>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <cassert>
#include <iomanip>

using namespace std;

#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
typedef long long ll;
typedef complex<int> P;
typedef pair<int,int> pii;
const double EPS = 1e-10;
const double PI  = acos(-1.0);
template <class F, class T> void convert(const F &f, T &t){	stringstream ss; ss << f; ss >> t;}


struct st{
	int a, b, c;
	st(){}
	st(int x, int y, int z): a(x),b(y),c(z) {}
	st operator+(const st &o)const{
		return st(this->a + o.a, this->b + o.b, this->c + o.c);
	}
	bool operator==(const st &o)const{
		return (this->a == o.a && this->b == o.b && this->c == o.c);
	}
};

void debug(st s){
	cerr<< s.a<< " "<< s.b<< " "<< s.c<< endl;
}

bool f(int k, int &n, st now, st &g, vector<st> &w){
	bool res = false;
	if(k == n){
/*
		if(now.a == g.a){
			debug(now);
			cerr<< (now == g) << endl;
		}
*/
		return now == g;
	}
	res |= f(k+1, n, now, g, w);
	res |= f(k+1, n, now+w[k], g, w);
	return res;
}

bool solve(){
	st g;
	int n;
	cin >> g.a>> g.b>> g.c>> n;
	vector<st> w(n);
	for(int i=0;i<n;i++) cin>> w[i].a>> w[i].b>> w[i].c;
/*
	debug(g);
	cerr<< n<< endl;
	debug(w[0]);
	cerr<< "-------------"<< endl;
*/
	cout<< ( f(0, n, st(0,0,0), g, w) ? "yes" : "no" ) << endl;
	return true;
}

int main(){
	cout.setf(ios::fixed); cout.precision(10);
	int n;
	cin>> n;
	for(int i=0;i<n;i++){
		cout<< "Case #"<< i+1 << ": ";
		solve();
	}
	return 0;
}

 
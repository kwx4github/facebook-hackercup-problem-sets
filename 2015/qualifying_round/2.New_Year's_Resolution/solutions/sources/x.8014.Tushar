import java.util.Stack;
import java.io.*;
import java.util.*;

  class GetAllSubsetByStack {

  
    public final int TARGET_SUM ;
	public String str="";

    private Stack<Integer> stack = new Stack<Integer>();
	private Stack<Integer>st=new Stack<Integer>();

   
    private int sumInStack = 0;
	public GetAllSubsetByStack(int tsum){
		this.TARGET_SUM=tsum;
	}

    public String populateSubset(int[] data, int fromIndex, int endIndex) {

        /*
        * Check if sum of elements stored in Stack is equal to the expected
        * target sum.
        * 
        * If so, call print method to print the candidate satisfied result.
        */
        if (sumInStack == TARGET_SUM) {
         
		 str+=""+st+"  ";


        }

        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

            if (sumInStack + data[currentIndex] <= TARGET_SUM) {
                stack.push(data[currentIndex]);
				st.push(currentIndex);
                sumInStack += data[currentIndex];

                /*
                * Make the currentIndex +1, and then use recursion to proceed
                * further.
                */
                populateSubset(data, currentIndex + 1, endIndex);
                sumInStack -= (Integer) stack.pop();
				int tmp=(Integer)st.pop();
            }
        }
		return str;
    }

    

    private void print(Stack<Integer> stack) {
        StringBuilder sb = new StringBuilder();
        sb.append(TARGET_SUM).append(" = ");
        for (Integer i : stack) {
            sb.append(i).append("+");
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1).toString());
    }
}

class NewYearResolution
{
	public static void main(String [] args)throws Exception
	{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		int t=Integer.parseInt(br.readLine());
		int Gp,Gc,Gf;
		int []Gparr;
		int []Gcarr;
		int []Gfarr;
		String ans="";
		int cnt=0;
		for(int m=0;m<t;m++)
		{
			String []arr1=br.readLine().trim().split(" ");
			 Gp=Integer.parseInt(arr1[0]);
			 Gc=Integer.parseInt(arr1[1]);
			 Gf=Integer.parseInt(arr1[2]);
			int n=Integer.parseInt(br.readLine());
			Gparr=new int[n];
			Gcarr=new int[n];
			Gfarr=new int[n];
			for(int j=0;j<n;j++)
			{
				arr1=br.readLine().trim().split(" ");
				Gparr[j]=Integer.parseInt(arr1[0]);
				Gcarr[j]=Integer.parseInt(arr1[1]);
				Gfarr[j]=Integer.parseInt(arr1[2]);
			}
			
			if(n==1)
			{
				if(Gparr[0]==Gp&&Gcarr[0]==Gc&&Gfarr[0]==Gf)
				{
					ans+="\nCase #"+(m+1)+": "+"yes";
					continue;
				}
				else
				{
					ans+="\nCase #"+(m+1)+": "+"no";
					continue;
				}

			}
			else
			{
				GetAllSubsetByStack get = new GetAllSubsetByStack(Gp);
				String subset=get.populateSubset(Gparr, 0, Gparr.length);
				String []arr=subset.trim().split("  ");
				int noSet=arr.length;
				
				if(noSet==0)
				{
					ans+="\nCase #"+(m+1)+": "+"no";
					continue;
				}
				int k;
				for( k=0;k<noSet;k++)
				{
					String tmp=arr[k];
				
					String []tmpArr=tmp.trim().split(", ");
					
					int []sSet=new int[tmpArr.length];
					for(int l=0;l<tmpArr.length;l++)
					{
						if(l==0)
						{	
							char []charr=tmpArr[l].toCharArray();
							String sb="";
							for(int s=1;s<charr.length;s++)
							{
								sb+=charr[s];
							}
							try
							{
								int v=Integer.parseInt(""+sb);
								sSet[l]=v;
							}
							catch (Exception e)
							{
								//System.out.println(""+e);
							}
							
							cnt++;
						}
						else if (l==tmpArr.length-1)
						{
							StringBuilder sb=new StringBuilder(tmpArr[l]);
							sb.deleteCharAt(tmpArr[l].length()-1);
							sSet[l]=Integer.parseInt(""+sb);
						}
						else
							sSet[l]=Integer.parseInt(""+tmpArr[l]);
					}
					
					int sumGc=0,sumGf=0;
					for(int l=0;l<sSet.length;l++)
					{
						sumGc+=Gcarr[sSet[l]];
						sumGf+=Gfarr[sSet[l]];
					}
					if(sumGc==Gc&&sumGf==Gf)
					{
						ans+="\nCase #"+(m+1)+": "+"yes";
						break;
					}
				}
				if(k==noSet)
				{
					ans+="\nCase #"+(m+1)+": "+"no";
				}
			}
		}
		System.out.println(""+ans);
	}
}
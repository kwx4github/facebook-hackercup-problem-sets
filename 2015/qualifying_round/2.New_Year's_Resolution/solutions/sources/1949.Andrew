#include <iostream>
#include <vector>
#include <memory>

const int LIST_LENGTH = 3;

typedef std::vector<int> IntList;
typedef std::shared_ptr<IntList> Component;
typedef std::vector<Component> ComponentsList;

int maxDivide(const IntList& remaining, Component component)
{
    int minDivider = remaining[0];
    for (int i = 0; i < LIST_LENGTH; i++) {
        int divider = remaining[i] / (*component)[i];
        if (divider < minDivider) {
            minDivider = divider;
        }
    }
    return minDivider;
}

bool tryDivide(size_t i, IntList remaining, ComponentsList& c)
{
    if (i == c.size()) return false;

    int start = maxDivide(remaining, c[i]);
    bool allZero = true;
    for (int j = 0; j < LIST_LENGTH; j++) {
        remaining[j] -= (start * (*c[i])[j]);
        if (remaining[j] != 0) {
            allZero = false;
        }
    }
    /* Done because this one evenly divided in */
    if (allZero) return true;

    while (1) {
        /* Otherwise we recursively try more */
        if (tryDivide(i+1, remaining, c)) {
            return true;
        }
        start--;
        if (start < 0) {
            break;
        }
        for (int j = 0; j < LIST_LENGTH; j++) {
            remaining[j] += (*c[i])[j];
        }
    }
    return false;
}

void readIntegers(IntList& result, int num)
{
    for (int i = 0; i < num; i++) {
        int temp;
        std::cin >> temp;
        result.push_back(temp);
    }
}

int main(void)
{
    int numTestCases;
    std::cin >> numTestCases;

    for (int i = 0; i < numTestCases; i++) {
        std::vector<int> total;
        readIntegers(total, LIST_LENGTH);
        int numComponents;
        std::cin >> numComponents;
        ComponentsList components;
        for (int j = 0; j < numComponents; j++) {
            Component component(new IntList);
            readIntegers(*component, LIST_LENGTH);
            components.push_back(component);
        }
        std::cout << "Case #" << (i + 1) << ": ";
        if (tryDivide(0, total, components)) {
            std::cout << "yes";
        } else {
            std::cout << "no";
        }
        std::cout << std::endl;
    }
    return 0;
}

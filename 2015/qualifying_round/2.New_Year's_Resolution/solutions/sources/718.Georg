#!/usr/bin/env python

import csv
import sys
import argparse

class Bunch:
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

def inc(k,S,food,i=0):
    for j in range(i,len(k)):
        if k[j] == 0:
            k[j]=1
            S[0]+=food[j][0]
            S[1]+=food[j][1]
            S[2]+=food[j][2]
            return(j)
        k[j]=0
        S[0]-=food[j][0]
        S[1]-=food[j][1]
        S[2]-=food[j][2]
    return(len(k))
           
def Gsum(k, food):
    P=0
    C=0
    F=0
    for i in range(len(k)):
        P+=k[i][0]*food[i]
        C+=k[i][1]*food[i]
        F+=k[i][2]*food[i]
    return(P,C,F)    

debugflag=False
def debug(key, value=None):
    if (debugflag):
        if (value != None):
            sys.stderr.write("*DBG* {!s}: {!s}\n".format(key, value))
        else:
            sys.stderr.write("*DBG* {!s}\n".format(key))

class problem:
    def __init__(self, i, data):
        self.i=i

        # process data
        self.data=data
        # end process

class solver:
    def __init__(self, debug=False,):
        global debugflag

        debugflag=debug

        # Init
        pass
        # end Init

    def solve(self, p):
        debug("i", p.i)
        debug("GP", p.data.GP)
        debug("GC", p.data.GC)
        debug("GF", p.data.GF)
        debug("N", p.data.N)
        debug("Food", p.data.food)

        GP=p.data.GP
        GC=p.data.GC
        GF=p.data.GF
        N=p.data.N
        food=p.data.food
        
        # Solve problem
        k=[0]*N
        S=[0]*3
        solution=["no"]
        i=inc(k,S,food,0)
        while i < N:
            #debug("k",k)
            if not (S[0] > GP or S[1] > GC or S[2] > GF):
                i=0
            if GP==S[0] and GC==S[1] and GF==S[2]:
                solution=["yes"]
                break
            i=inc(k,S,food,i)
        # End solve

        return(solution)

    def solve2(self, p):
        # debug("Problem Data", p.data)
        
        # Solve problem Brute Force
        solution=[p.data]
        # End solve

        return(solution)

class pparser:
    
    def __init__(self, pfile):
        self.pfile=pfile
        self.reader=csv.reader(pfile, delimiter=" ")
        
        row=next(self.reader)
        self.N=int(row[0])
        self.i=0

    def __next__(self):
        self.i+=1

        if (self.i > self.N):
            raise StopIteration()

        data=Bunch()
        
        # Parse problem here
        row=next(self.reader)
        data.GP,data.GC,data.GF=int(row[0]),int(row[1]),int(row[2])
        data.N=int(next(self.reader)[0])
        data.food=[];
        for i in range(data.N):
            row=next(self.reader)
            data.food.append([int(row[0]),int(row[1]),int(row[2])])

        # End parse

        p=problem(self.i, data)
        return(p)

    def __iter__(self):
        return(self)
        

def solve():
    parser=argparse.ArgumentParser("Solve the problem.")
    parser.add_argument("--debug", "-d", action="store_true")
    parser.add_argument("--test", "-t", action="store_true")
    parser.add_argument("file", type=open)
    
    opt=parser.parse_args()

    if (opt.test):
        opt.debug=True

    s=solver(opt.debug)
    pfile=opt.file

    pparse=pparser(pfile)

    outwriter=csv.writer(sys.stdout, delimiter=" ", quoting=csv.QUOTE_NONE, lineterminator="\n")
    for p in pparse:
        solution=s.solve(p)
        
        if (opt.test):
            solution2=s.solve2(p)
            if (solution2 != solution):
                debug("Differing Solution", [solution, solution2])

        outwriter.writerow(["Case", "#{:d}:".format(p.i)]+solution)
    
    pfile.close()


if (__name__ == "__main__"):
    solve()

#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;
//bool val[1001][1001][1001];
struct valor {
   int p, c, f;
};
valor vec[25];
bool comp(const valor &a, const valor &b) {
   if (a.p != b.p) return a.p < b.p;
   if (a.c != b.c) return a.c < b.c;
   return a.f < b.f;
}

bool check(int p, int c, int f, int pos, int max) {
   if (p == 0 && c == 0 && f == 0) return true;
   if (p < 0 || c < 0 || f < 0) return false;

   for (int i = pos; i < max; i++) {
      if (p <= vec[i].p) {
         if (p < vec[i].p) return false;
         if (c <= vec[i].c) {
            if (c < vec[i].c) return false;
            if (f <= vec[i].f) {
               if (f < vec[i].f) return false;
               return true;
            }
         }
      }
      if (check(p - vec[i].p, c - vec[i].c, f - vec[i].f, i+1, max)) return true;
   }
   return false;
}
int main ()
{
   int t, n, gp, gc, gf;
   bool possible;
   scanf("%d", &t);
   for (int i = 1; i <= t; i++) {
      scanf("%d %d %d", &gp, &gc, &gf);
      scanf("%d", &n);
      for (int j = 0; j < n; j++) {
         scanf("%d %d %d", &vec[j].p, &vec[j].c, &vec[j].f);
      }
      sort(vec, vec + n, comp);

      printf("Case #%d: ", i);
      //memset(val, 0, sizeof(val));
      possible = check(gp, gc, gf, 0, n);

      if (possible) printf("yes\n");
      else printf("no\n");
   }
   return 0;
}
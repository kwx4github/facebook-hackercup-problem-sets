#!/usr/bin/env python3

class Food:
    def __init__(self, protein = 0, carbohydrates = 0, fat = 0):
        self.p = protein
        self.c = carbohydrates
        self.f = fat

    def __eq__(self, other):
        try:
            return self.p == other.p and self.c == other.c and self.f == other.f
        except AttributeError:
            return False

    def __sub__(self, other):
        return Food(self.p - other.p, self.c - other.c, self.f - other.f)

    def __lt__(self, other):
        try:
            return (self.p < other.p) and (self.c < other.c) and (self.f) < (other.f)
        except AttributeError:
            return False

    def __gt__(self, other):
        try:
            return (self.p > other.p) and (self.c > other.c) and (self.f) > (other.f)
        except AttributeError:
            return False

    def __repr__(self):
        return repr((self.p, self.c, self.f))

    def __str__(self):
        return str((self.p, self.c, self.f))

def solution(card, nutrients):
    NONE_NUTRIETS = Food(0, 0, 0)

    if NONE_NUTRIETS == nutrients:
        return True
    elif (len(card) == 0) and (NONE_NUTRIETS != nutrients):
        return False
    elif nutrients < card[-1]:
        return solution(card[:-1], nutrients)
    else:
        return solution(card[:-1], nutrients) or solution(card[:-1], nutrients - card[-1])

def main():
    try:
        test_cases = int(input())
        for case in range(1, test_cases + 1):
            # Read food restriction
            protein, carbohydrates, fat = [int(item) for item in input().split()]
            nutrients = Food(protein, carbohydrates, fat)

            # Read number of food items
            items = int(input())

            # Read food items
            card = list()
            for i in range(items):
                protein, carbohydrates, fat = [int(item) for item in input().split()]
                card.append(Food(protein, carbohydrates, fat))

            print("Case #%d: %s" % (case, 'yes' if solution(card, nutrients) else 'no'))

        return 0

    except KeyboardInterrupt:
        return 1

if __name__ == '__main__':
    main()

        

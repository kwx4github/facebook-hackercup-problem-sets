import java.util.*;
 
public class NewYearResolution{
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();

		for(int i = 0; i < T; i++){
			System.out.print("Case #" + (i + 1) + ": ");
			int Gp = sc.nextInt(); int Gc = sc.nextInt(); int Gf = sc.nextInt();
			int N = sc.nextInt();
			Pair[] P = new Pair[N]; int C[] = new int[N]; int F[] = new int[N]; 
			for(int j = 0; j < N; j++){
				P[j] = new Pair(j, sc.nextInt()); C[j] = sc.nextInt(); F[j] = sc.nextInt();
			}
			Arrays.sort(P);

			Set<ArrayList<Pair>> set = new HashSet<ArrayList<Pair>>();
	        combination(P, 0, Gp, new ArrayList<Pair>(), set);
	        boolean canEat = false;
	        for(ArrayList<Pair> list : set){
	        	int tGc = 0;
	        	int tGf = 0;
	        	for(Pair p : list){
	        		tGc += C[p.index];
	        		tGf += F[p.index];
	        	}
	        	if(Gc == tGc && Gf == tGf){
	        		canEat = true; break;
	        	}
	        }
	        if(canEat)
	        	System.out.println("yes");
	        else System.out.println("no");
		}
	}

	private static void combination(Pair[] P, int index, int target, List<Pair> list, Set<ArrayList<Pair>> res){
        int n = P.length;
        if(index == n){
            if(target == 0)
                res.add(new ArrayList<Pair>(list));
            return;
        }
        combination(P, index + 1, target, list, res);
        if(target >= P[index].protein){
            list.add(P[index]);
            combination(P, index + 1, target - P[index].protein, list, res);
            list.remove(list.size() - 1);
        }
    }

	public static class Pair implements Comparable<Pair> {
    public final int index;
    public final int protein;

    public Pair(int index, int protein) {
        this.index = index;
        this.protein = protein;
    }

    @Override
    public int compareTo(Pair other) {
        return Integer.valueOf(this.protein).compareTo(other.protein);
    }
}
}
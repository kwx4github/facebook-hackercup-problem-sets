import java.util.Arrays;
import java.util.Scanner;

public class NewYearsResolution {

	public static void main(String[] argv) {
		Scanner sc = new Scanner(System.in);
		try {
			NewYearsResolution s = new NewYearsResolution();
			int t = sc.nextInt();
			for (int i = 1; i <= t; i++) {
				int[] expected = readIntArray(sc);
				int n = sc.nextInt();
				int[][] meals = new int[n][];
				for (int j = 0; j < n; j++) {
					meals[j] = readIntArray(sc);
				}
				if (s.solve(expected, meals)) {
					System.out.println("Case #" + i + ": yes");
				} else {
					System.out.println("Case #" + i + ": no");
				}
			}
		} finally {
			sc.close();
		}
	}

	private static int[] readIntArray(Scanner sc) {
		int[] array = new int[3];
		for (int j = 0; j < 3; j++) {
			array[j] = sc.nextInt();
		}
		return array;
	}

	public boolean solve(int[] expected, int[][] meals) {
		boolean[] selectedMeals = new boolean[meals.length];
		return dfs(expected, meals, selectedMeals, 0, 0);
	}

	private boolean dfs(int[] expected, int[][] meals, boolean[] selectedMeals,
			int depth, int nodeId) {
		if (depth == selectedMeals.length) {
			return checkExpected(expected, meals, selectedMeals);
		}
		boolean[] values = { false, true };
		boolean result = false;
		for (boolean b : values) {
			selectedMeals[depth] = b;
			result = result
					|| dfs(expected, meals, selectedMeals, depth + 1, nodeId);
		}
		return result;
	}

	private boolean checkExpected(int[] expected, int[][] meals,
			boolean[] selectedMeals) {
		int[] sums = new int[expected.length];
		for (int i = 0; i < meals.length; i++) {
			if (selectedMeals[i])
				for (int j = 0; j < expected.length; j++) {
					sums[j] += meals[i][j];
				}
		}
		return Arrays.equals(sums, expected);
	}

}

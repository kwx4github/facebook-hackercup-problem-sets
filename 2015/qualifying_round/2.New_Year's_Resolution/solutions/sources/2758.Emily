class Resolution:
    def __init__(self):
        self.foodp = []
        self.foodc = []
        self.foodf = []
    
    def eatNutrients(self) :
        input_file = open("new_years_resolution.txt", "r")
        output_file = open("output_final.txt", "w")
        numCases = int(input_file.readline());
        
        for x in range(numCases):
            wantsToEat = input_file.readline();
            wantsToEat = wantsToEat.split() #p, c, f
            numFoods = input_file.readline();
            
            self.foodp = []
            self.foodc = []
            self.foodf = []
        
            for j in range(int(numFoods)):
                food = input_file.readline();
                food = food.split()
                self.foodp.append(int(food[0]))
                self.foodc.append(int(food[1]))
                self.foodf.append(int(food[2]))
                    
            if (self.sum_exact(self.foodp, wantsToEat, [], [i for i in range(int(numFoods))], [])):
                output_file.write("Case #" + str(x + 1) + ": yes" + "\n")
            else:
                output_file.write("Case #" + str(x + 1) + ": no" + "\n")
            

    def sum_exact(self, food_source, wantsToEat, food_subset, topickfrom_indices, subset_indices):
        
        #print "food_subset: " + str(food_subset)
        total_cal = sum(food_subset)
        
        if total_cal == int(wantsToEat[0]):
            #check foodc and foodf
            total_foodc = 0
            #print "subset_indices: " + str(subset_indices)
            for i in subset_indices:
                #print i
                #print self.foodc
                total_foodc += self.foodc[i]
            '''
            print "foodc: " + str(foodc);
            print "wantstoEat[1]: " + wantsToEat[1]
            print "total_foodc: " + str(total_foodc);
            '''
            
            total_foodf = 0
            for i in subset_indices:
                total_foodf += self.foodf[i]
            if total_foodc == int(wantsToEat[1]) and total_foodf == int(wantsToEat[2]):
                return 1
        elif total_cal > wantsToEat:
            return 0;
        
        for i in range(len(food_source)):
            #print "topickfrom_indices: " + str(topickfrom_indices)
            food_i = food_source[i]
            food_source_temp = food_source[i+1:]

            #print "food_source_remaining: " + str(food_source_temp)
            if (self.sum_exact(food_source_temp, wantsToEat, food_subset + [food_i], topickfrom_indices[i+1:],  subset_indices + [topickfrom_indices[i]])):
                return 1

if __name__ == "__main__":
    res = Resolution()
    res.eatNutrients()















#include <iostream>
#include <algorithm>
#include <cassert>
#include <cfloat>
#include <climits>
#include <cstring>
#include <fstream>
#include <map>
#include <numeric>
#include <stack>
#include <string>
#include <vector>
#include <queue>

using namespace std;

struct Food{
	int protein;
	int carbohydrates;
	int fat;
	Food():protein(-1),carbohydrates(-1),fat(-1){}
	Food(int protein, int carbohydrates, int fat) :protein(protein), carbohydrates(carbohydrates), fat(fat){}
	bool operator==(const Food& f) const{
		return (protein == f.protein) && (carbohydrates==f.carbohydrates) && (fat==f.fat);
	}
	bool operator>(const Food& f) const{
		return (protein > f.protein) || (carbohydrates > f.carbohydrates) || (fat > f.fat);
	}
	Food operator+(const Food& f) const{
		return Food(protein + f.protein, carbohydrates + f.carbohydrates, fat + f.fat);
	}
	Food& operator+=(const Food& f){
		this->protein += f.protein;
		this->carbohydrates += f.carbohydrates;
		this->fat += f.fat;
		return *this;
	}
	Food operator-(const Food& f) const{
		return Food(protein - f.protein, carbohydrates - f.carbohydrates, fat - f.fat);
	}
	Food& operator-=(const Food& f){
		this->protein -= f.protein;
		this->carbohydrates -= f.carbohydrates;
		this->fat -= f.fat;
		return *this;
	}

};

Food goalFood;
Food nowFood;
vector<Food> foods;
int foodCount;
int cache[1 << 20];
bool finished = false;

int eat(int eatenNo){
	if (nowFood == goalFood) return 1;

	int &cacheValue = cache[eatenNo];
	if (cacheValue != -1) return cacheValue;
	if (nowFood > goalFood) return cacheValue = 0;

	cacheValue = 0;
	for (int i = 0; i < foods.size(); i++){
		if ((eatenNo & (1 << i)) == 0){
			nowFood += foods[i];
			if (eat(eatenNo | (1 << i))) return 1;
			nowFood -= foods[i];
		}
	}
	return cacheValue;
}

int main(){
	int testCase;
	cin >> testCase;
	fstream outFile;
	outFile.open("NewYearsResolution.txt", fstream::out);
	for (int t = 0; t < testCase; t++){
		memset(&cache, -1, sizeof(cache));
		nowFood = Food(0, 0, 0);
		finished = false;
		cin >> goalFood.protein >> goalFood.carbohydrates >> goalFood.fat;
		cin >> foodCount;
		foods.resize(foodCount);
		for (int i = 0; i < foodCount; i++){
			cin >> foods[i].protein >> foods[i].carbohydrates >> foods[i].fat;
		}
		outFile << "Case #" << t + 1 << ": ";
		if (eat(0)) outFile << "yes";
		else outFile << "no";
		outFile << endl;
	}
	outFile.close();
	return 0;
}
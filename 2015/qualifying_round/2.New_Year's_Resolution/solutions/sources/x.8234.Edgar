#include "cstdio"
#include "cstdlib"
#include "iostream"

using namespace std;
class dieta
{
public:
    dieta(){}
    void distribuir(int, int, int);
    void ingresarAlimentos(int);
    bool verificarProteina(int);
    bool verificarCalorias(int);
    bool verificarGrasas(int);
private:
    int totalproteina;
    int totalcalorias;
    int totalgrasas;
    int limite;
    bool usadosGp[20];
    bool usadosGc[20];
    bool usadosGf[20];
    int calorias[20];
    int proteinas[20];
    int grasas[20];
    int maxcalorias;
    int maxproteinas;
    int maxgrasas;
};
int i;
void dieta::distribuir(int Gp, int Gc, int Gf)
{
    dieta::maxproteinas = Gp;
    dieta::maxcalorias = Gc;
    dieta::maxgrasas = Gf;
    dieta::totalproteina = 0;
    dieta::totalcalorias = 0;
    dieta::totalgrasas = 0;
}
void dieta::ingresarAlimentos(int alimentos)
{
    dieta::limite = alimentos;
    int grasasActuales;
    int proteinasActuales;
    int caloriasActuales;
    for(i = 0; i < alimentos; i++)
    {
        cin>>proteinasActuales>>caloriasActuales>>grasasActuales;
        proteinas[i] = proteinasActuales;
        calorias[i] = caloriasActuales;
        grasas[i] = grasasActuales;
    }
}
bool dieta::verificarProteina(int e)
{
    if (e == limite)
        return false;
    else
    {
        if(totalproteina == maxproteinas)
            return true;
        else
        for(i = 0; i < limite; i++)
        {
            if(usadosGp[i] && totalproteina < maxproteinas)
            {
                totalproteina = totalproteina + proteinas[i];
                usadosGp[i] = false;
                verificarProteina(e+1);
                totalproteina = totalproteina - proteinas[i];

            }
        }
        usadosGp[i] = true;
    }
}
bool dieta::verificarCalorias(int e)
{
    if (e == limite)
        return false;
    else
    {
        if(totalcalorias == maxcalorias)
            return true;
        else
        for(i = 0; i < limite; i++)
        {
            if(usadosGc[i] && totalcalorias < maxcalorias)
            {
                totalcalorias = totalcalorias + calorias[i];
                usadosGc[i] = false;
                verificarCalorias(e+1);
                totalcalorias = totalcalorias - calorias[i];

            }
        }
        usadosGc[i] = true;
    }
}
bool dieta::verificarGrasas(int e)
{
    if (e == limite)
        return false;
    else
    {
        if(totalgrasas == maxgrasas)
            return true;
        else
            for(i = 0; i < limite; i++)
            {
                if(usadosGf[i] && totalgrasas < maxgrasas)
                {
                    totalgrasas = totalgrasas + grasas[i];
                    usadosGf[i] = false;
                    verificarGrasas(e+1);
                    totalgrasas = totalgrasas - grasas[i];

                }
            }
        usadosGf[i] = true;
    }
}
int main()
{
    int T;
    int x;
    int Gp, Gc, Gf;
    int alimentos;
    dieta *caso;
    cin>>T;
    caso = new dieta[T];
    for(x = 0; x < T; x ++)
    {
        cin>>Gp>>Gc>>Gf;
        caso[x].distribuir(Gp, Gc, Gf);
        cin>>alimentos;
        caso[x].ingresarAlimentos(alimentos);
    }
    for(x = 0; x < T; x++)
    {
        cout<<"Case #"<<x+1<<": ";
        if(caso[x].verificarProteina(0) &&
        caso[x].verificarCalorias(0) &&
        caso[x].verificarGrasas(0))
            cout<<"yes"<<endl;
        else
            cout<<"no"<<endl;

    }
    return 0;
}

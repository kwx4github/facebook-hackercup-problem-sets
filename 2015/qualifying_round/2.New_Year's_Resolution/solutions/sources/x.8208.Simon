def foods_have_needed_total(numbers, needed_sum):
    n = len(numbers)

    # subset[s][j] = True if there are numbers in subset numbers[:j] that add up to s
    subset = [[0 for i in range(n+1)] for i in range(needed_sum+1)]

    # if sum is 0 then it adds up
    for j in range(n+1):
        subset[0][j] = True

    # if sum is not 0 it doesn't add up for empty sums
    for s in range(1, needed_sum+1):
        subset[s][0] = False
    
    # for every sum "s" up to needed_sum
    for s in range(1, needed_sum+1):
        # for every number number[j] in numbers
        for j in range(1, n+1):
            subset[s][j] = subset[s][j-1]
            # if current sum is greater than or equal to current number in set
            if (s >= numbers[j-1]):
                x = s - numbers[j-1]
                if subset[x][j-1] == True:
                    subset[s][j] = True

    return subset[needed_sum][n]

test_cases = int(input())

for i in range(1, test_cases+1):

    food_totals = []
    needed_total = sum([int(j) for j in input().split()])

    num_foods = int(input())
    for j in range(num_foods):
        food_total = sum([int(j) for j in input().split()])
        food_totals.append(food_total)

    if foods_have_needed_total(food_totals, needed_total):
        print("Case #{0}: {1}".format(i, "yes"))
    else:
        print("Case #{0}: {1}".format(i, "no"))

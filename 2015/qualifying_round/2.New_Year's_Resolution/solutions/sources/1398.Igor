import java.io.*;
import java.util.*;
import java.math.BigInteger;
import static java.lang.Math.*;
import static java.lang.Math.min;
import static java.lang.Math.max;
import static java.math.BigInteger.*;
import static java.util.Arrays.*;


public class Main{

    void run(){
        Locale.setDefault(Locale.US);
        boolean oj;
        oj = false;
//        try {
//            oj = System.getProperty("MYLOCAL") == null;
//        } catch (Exception e) {
//            oj = true;
//        }
        try{
            if( oj ){
//                sc  = new FastScanner( new InputStreamReader(System.in  ) );
//                out = new PrintWriter(   new OutputStreamWriter(System.out) );
                String str = "epic";
                sc  = new FastScanner(new FileReader(str+".in") );
                out = new PrintWriter(new FileWriter(str+".out") );
            } else{
                sc  = new FastScanner(new FileReader( "input.txt") );
                out = new PrintWriter(new FileWriter("output.txt") );
            }
        } catch (Exception e) {
            System.exit(-1);
        }
//        long tB = System.currentTimeMillis();
        solve();
//        if( !oj ) System.err.println( "Time: " + (System.currentTimeMillis()-tB)/1e3 );
        out.flush();
    }

    class FastScanner{
        BufferedReader br;
        StringTokenizer st = new StringTokenizer("");
        FastScanner( InputStreamReader a ){
            br = new BufferedReader(a);
        }
        FastScanner( FileReader a ){
            br = new BufferedReader(a);
        }
        String next(){
            while( !st.hasMoreTokens() )
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    return null;
                }
            return st.nextToken();
        }
        String readLine(){
            try {
                return br.readLine();
            } catch (Exception e) {
                return null;
            }
        }
        int nextInt(){ return Integer.parseInt(next()); }
        long nextLong(){ return Long.parseLong(next()); }
    }

    FastScanner sc;
    PrintWriter out;
    PrintStream err = System.err;



    public static void main(String[] args){
        new Main().run();
//        new Thread( null, new Runnable() {
//            @Override
//            public void run() {
//                new Main().run();
//            }
//            }, "LOL", 256L * 1024 * 1024 / 2 ).run();
//        }, "LOL", 2000 * 1024 * 1024 ).run();
    }



    void TLE(){ for(;;); }

    void MLE(){
        int[][] arr = new int[1024 * 1024][];
        for(int i = 0; i < arr.length; ++i)
            arr[i] = new int[1024 * 1024];
    }

    void exit( int val ){
        out.flush();
        out.close();
        System.exit(val);
    }
    //////////////////////////////////////////////////////////////////////////////////////////

    int tagA, tagB, tagC;
    int n;
    int[] a, b, c;

    boolean f( int pos, int getA, int getB, int getC ){
        if( pos == n ){
            return  getA == tagA &&
                    getB == tagB &&
                    getC == tagC;
        } else {
            if( f(pos+1, getA, getB, getC) ) return true;
            if( f(pos+1, getA + a[pos], getB + b[pos], getC + c[pos]) )
                return true;
            return false;
        }
    }
    
    boolean solveTest(){
        tagA = sc.nextInt();
        tagB = sc.nextInt();
        tagC = sc.nextInt();
        n = sc.nextInt();
        a = new int[n];
        b = new int[n];
        c = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
        }
        return f(0,0,0,0);
    }
  
    void solve(){
        int test = sc.nextInt();
        for(int i = 0; i < test; ++i){
            out.printf( "Case #%d: %s\n", i+1, solveTest()? "yes" : "no" );
        }
    }
    
}
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

struct Food
{
public:
	int p, c, f;

	Food() {};
	Food(int _p, int _c, int _f)
	{
		this->p = _p;
		this->c = _c;
		this->f = _f;
	}
	Food operator+(const Food &rhs)
	{
		return Food(this->p + rhs.p, this->c + rhs.c, this->f + rhs.f);
	}
	bool operator==(const Food &rhs)
	{
		return this->p == rhs.p && this->c == rhs.c && this->f == rhs.f;
	}
};

class FoodList {
private:
	Food need;
	vector<Food> foods;
public:
	int count;

	void addFood(Food f);
	void setNeed(Food n);
	vector<Food> getFoods() { return this->foods;}
	Food getNeed() { return this->need; }
};


void FoodList::addFood(Food f)
{
	this->foods.push_back(f);
}

void FoodList::setNeed(Food n)
{
	this->need.p = n.p;
	this->need.c = n.c;
	this->need.f = n.f;
}

bool edible(FoodList fl)
{
	int oldsize = 0;
	vector< vector<Food> > subset;
	vector<Food> empty;
	subset.push_back(empty);

	for (int i = 0; i < fl.getFoods().size(); ++i)
	{
		vector< vector<Food> > subsetTemp = subset;

		for (int j = 0; j < subsetTemp.size(); ++j)
			subsetTemp[j].push_back(fl.getFoods()[i]);

		for (int j = 0; j < subsetTemp.size(); ++j)
			subset.push_back(subsetTemp[j]);

		for (int k = oldsize; k < subset.size(); ++k)
		{
			Food sum(0, 0, 0);

			for each (Food var in subset[k])
			{
				sum = sum + var;
				if (sum.p > fl.getNeed().p || sum.c > fl.getNeed().c || sum.f > fl.getNeed().f)
				{
					subset.erase(subset.begin() + k);
					break;
				}
			}

			if (fl.getNeed() == sum)
				return true;
		}
		oldsize = subset.size();
		
	}
	return false;
}

int main()
{
	int testcases;
	vector<FoodList> tests;

	fstream ifile("new_years_resolution.txt");
	ifile >> testcases;
	
	for (int i = 0; i < testcases; ++i)
	{
		int p, c, f;
		FoodList fl;
		int listsize;
		
		ifile >> p;
		ifile >> c;
		ifile >> f;
		fl.setNeed(Food(p,c,f));

		ifile >> listsize;
		for (int j = 0; j < listsize; ++j)
		{
			ifile >> p;
			ifile >> c;
			ifile >> f;
			fl.addFood(Food(p,c,f));
		}
		tests.push_back(fl);
	}
	ifile.close();

	int c = 1;
	ofstream ofile("output");
	for each (FoodList var in tests)
	{
		ofile << "Case #" << c++ << ": ";
		if (edible(var)) ofile << "yes" << endl;
		else ofile << "no" << endl;
	}

	return 0;
}
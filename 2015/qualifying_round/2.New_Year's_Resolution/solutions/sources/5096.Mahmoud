using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleAppSolveFBHII
{
    class Program
    {
        static void Main(string[] args)
        {
            StreamReader reader = new StreamReader("input.txt"); StreamWriter writer = new StreamWriter("KBTest.txt");
            string ans = "no";
            int targeta, targetb, targetc;
            int t = int.Parse(reader.ReadLine());
            for (int i = 0; i < t; i++)
            {
                ans = "no";
                string x = reader.ReadLine();
                string[] xs = x.Split(' ');
                int[] tempArr = GetInts(xs); targeta = tempArr[0]; targetb = tempArr[1]; targetc = tempArr[2];
                int length = int.Parse(reader.ReadLine());
                List<int[]> myfood = new List<int[]>();
                for (int z = 0; z < length; z++)
                {
                    x = reader.ReadLine();
                    xs = x.Split(' ');
                    tempArr = GetInts(xs);
                    myfood.Add(tempArr);
                }
                List<string> FirstCol = new List<string>();
                for (int z = 0; z < length; z++)
                {
                    FirstCol.Add(myfood[z][0].ToString()+"," + z);
                }
                for (int z = 0; z < length; z++)
                {
                    
                    List<string> MYCOMBS = Combinations(FirstCol, z+1).ToList<string>();
                    List<int[]> myind = Checkimp(MYCOMBS, targeta, z); int sum1 = 0; int sum2 = 0;
                    foreach (int[] MYARR in myind)
                    {
                        sum1 = 0; sum2 = 0;
                        for (int i2 = 0; i2 < MYARR.Length; i2++)
                        {
                            sum1 = sum1 + myfood[MYARR[i2]][1];
                        }
                        for (int i2 = 0; i2 < MYARR.Length; i2++)
                        {
                            sum2 = sum2 + myfood[MYARR[i2]][2];
                        }
                        if (sum1 == targetb && sum2 == targetc)
                        {

                            ans = "yes";
                            break;
                        }
                    }
                    if (ans == "yes") break;
                }


                writer.WriteLine("Case #" + (i + 1) + ": " + ans);
                Console.WriteLine("Case #" + (i + 1) + ": " + ans);
            }
                 writer.Close();
        }
        static int[] GetInts(string[] xs)
        { 
           int[] temp = new int[3];
           for (int i = 0; i < 3; i++) temp[i] = int.Parse(xs[i]);
           return temp;
        }
        static List<int[]> Checkimp(List<string> xs,int target,int z)
        {
            List<int[]> ret = new List<int[]>(); int sum = 0; 
            foreach(string tempo in xs)
            {
                List<int> temp1 = new List<int>();
                sum = 0;
                string[] xss = tempo.Split(' ');string[][] xss2 = new string[xss.Length][];
                for (int i = 0; i < xss.Length; i++)
                {
                    xss2[i] = xss[i].Split(',');
                }
                for(int i=0;i<xss.Length;i++)
                {
                    sum = sum + int.Parse(xss2[i][0]);
                }
                if(sum == target) 
                {
                for(int i=0;i<xss.Length;i++)
                {
                    temp1.Add(int.Parse(xss2[i][1]));
                }
                ret.Add(temp1.ToArray());
                }

            }
            return ret;
        }
        static IEnumerable<string> Combinations(List<string> characters, int length)
        {
            for (int i = 0; i < characters.Count; i++)
            {
                // only want 1 character, just return this one
                if (length == 1)
                    yield return characters[i];

                // want more than one character, return this one plus all combinations one shorter
                // only use characters after the current one for the rest of the combinations
                else
                    foreach (string next in Combinations(characters.GetRange(i + 1, characters.Count - (i + 1)), length - 1))
                        yield return characters[i] + " " + next;
            }
        }
    }
}

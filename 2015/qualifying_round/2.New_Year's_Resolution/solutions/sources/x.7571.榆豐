#include<iostream>
#include<memory>
using namespace std;


int Gp,Gc,Gf;
int N;
int food[21][3];

bool table[20][1001][1001][1001]={0};

int round=0;

void resetTable()
{
	memset(table,0,sizeof(table));
	cout<< "init ok"<<endl;
}

//bool solve(int n, int p,int c,int f)
//{
////	cout<< "n:"<<n<<",p:"<<p<<",c:"<<c<<",f:"<<f<<endl;
//
//	if(p == 0 &&  c == 0 && f == 0){
//		return true;
//	}
//
//	if(n == 0) return false;
//
//
//	if(table[round][n][p][c][f] != 0){
//		return table[round][n][p][c][f] == 2? true: false;
//	}
//
//	bool a =  solve(n-1,p,c,f)  ;
//
//	if ( a == true){
//		table[round][n][p][c][f] = 2;    
//		return true;
//	}
//	bool b =  solve(n-1,p-food[n][0], c- food[n][1], f-food[n][2]);
//	if ( b == true){
//		table[round][n][p][c][f] = 2;    
//		return true;
//	}
//
//	table[round][n][p][c][f] = 1;    
//	return false;
//
//}

bool solve(int n, int p,int c,int f)
{
	
	table[round][0][0][0] = true;
	for(int n1=0;n1< n; n1++){
		
		for(int p1=food[n1][0];p1<=p;p1++){
			for(int c1=food[n1][1];c1<=c; c1++){
				
				for(int f1=food[n1][2];f1<=f;f1++){
					int pp1 = p1-food[n1][0];
					int cc1 = c1-food[n1][1];
					int ff1 = f1-food[n1][2];
					table[round][p1][c1][f1] = table[round][p1][c1][f1] ||  table[round][pp1][cc1][ff1];
				}
			}
		}
	}

	if(table[round][p][c][f]) return true;
	else return false;
}

void printTab(int* table, int size)
{
	cout<<"Table:";
	for(int i = 0 ;i < size; i++){
		cout<< table[i]<<",";
	}
	cout<<endl;
}


//struct foodItem{
//	int w,
//	int count
//};
//
//int countSubFood(struct foodItem fi ,int size,int field)
//{
//	int numOfItem = 0;
//	for(int i =0; i< size;i++){
//		
//		if(numOfItem == 0){
//			fi[numOfItem].w = food[i][field];
//			fi[numOfItem].cout = 1;
//			numOfItem = 1;
//		} else {
//			bool isFound = false;
//			for(int a=0;a<numOfItem;a++){
//				if(fi[a].w == food[i][field]){
//					fi[a].count++;
//					isFound = true;
//					break;
//				}
//			}
//
//			if(!isFound){
//				fi[numOfItem].w = food[i][field];
//				fi[numOfItem].cout = 1;
//				numOfItem++;
//				
//			}
//		}
//		
//	}
//
//	return numOfItem;
//}
//
//bool solve2(int n, int p, int c,int f)
//{
//
//	int table[21][1001];
//	int checker = 0xffffffff;
//	int nn;
//	int pcf[3];
//	pcf[0] = p;
//	pcf[1] = c;
//	pcf[2] = f;
//
//	nn = n;
//	for(int r=0;r<3;r++){
//
//		struct foodItem subFood[21];
//		int subFood_size = 0;
//		subFood_size = countSubFood(subFood, nn, r );
//
//		for(int n1=0;n1< subFood_size ; n1++){
//			for(int p1=0;p1<= pcf[r];p1++){
//				//table[n1][p1] |= table[ p1 - food[n1][r] ] << 1;
//
//				if ( p1 - food[n1][r] < 0) {
//					table[n1+1][p1] =  table[n1][p1] ;
//				} else {
//					table[n1+1][p1] = 
//					
//				}
//			}
//		}
//		
//
//		cout<< r <<"food:";
//		int count = 0;
//		for(int n2=1;n2<= 31;n2++){
//			if(table[pcf[r]] & (1 << n2) ) {
//				cout<<n2 << ",";
//				memcpy(food[count++], food[n2-1], sizeof(int)*3);
//			}
//		}
//		cout << endl;
//		nn = count;
//	}
//
//	if( nn >0) return true;
//	else return false;
//}

void test()
{
	cout<<"test start"<<endl;
	int r=0;
	for(int a=0;a<20;a++){
		for(int b=0;b<= 1000;b++){
			for( int c=0;c<=1000;c++){
				for(int d=0;d<=1000;d++){
					r++;	
				}
			}
		}
		cout<<a<<endl;
	}

	cout<<"test end:"<< r<<endl;
}
int main()
{
	
	int T;

	cin >> T;

	for(int i=0;i< T;i++){
		int num;
		cin >> Gp >> Gc>> Gf;
		cin >> N;
		for(int a = 0; a< N ;a++){
			cin>>food[a][0] >> food[a][1] >> food[a][2];
		}
		bool result = false;
		round = i;
		result = solve(N, Gp,Gc,Gf);
		cout<< "Case #"<<i+1<<": ";
		if(result) cout<< "yes";
		else cout << "no";
		cout<<endl;

	}


	return 0;
}

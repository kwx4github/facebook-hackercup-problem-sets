#!/usr/bin/env ruby

def maximum(gs, value)
    gs.each_with_index.map { |g, i| g/value[i] }.min
end

def possible(gs, values)
    value = values[0]
    nextValues = values.drop(1)
    if nextValues.empty?
        result = gs.each_with_index.map { |g, i| g - (gs[0]/value[0])*value[i] }
        return result.uniq == [0]
    end
    max = maximum(gs, value)
    (max+1).times do |i|
        newgs = gs.each_with_index.map { |g, j| g - value[j]*i }
        return true if possible(newgs, nextValues)
    end
    return false
end

STDIN.gets.chomp.to_i.times do |i|
    gs = STDIN.gets.chomp.split(' ').map(&:to_i)

    values = []
    STDIN.gets.chomp.to_i.times do
        values << STDIN.gets.chomp.split(' ' ).map(&:to_i)
    end

    puts "Case ##{i+1}: #{possible(gs, values) ? 'yes' : 'no'}"
end

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SubsetSum
{
    class Program
    {
        static Int32[] nums;
        static Int32 sum;
        static Int32 maxNums;
        static Int32[] selectedNums;

        static void Main(string[] args)
        {
            string[] input = System.IO.File.ReadAllLines(@"C:\Users\Samarth Agarwal\Desktop\new_years_resolution.txt");
            int t = Convert.ToInt32(input[0]);
            int P_R, C_R, F_R;
            int c = 2;
            int foodBasic = Convert.ToInt32(input[c]);

            System.IO.File.Delete(@"C:\Users\Samarth Agarwal\Desktop\newyearoutput.txt");

            for (int i = 0; i < t; i++)//for cycling through test cases
            {
                int flag = 0;
                if(i!=0)
                    c = c + foodBasic + 2;
                foodBasic = Convert.ToInt32(input[c]);
                
                P_R = Convert.ToInt32(input[c - 1].Split(' ')[0]);
                C_R = Convert.ToInt32(input[c - 1].Split(' ')[1]);
                F_R = Convert.ToInt32(input[c - 1].Split(' ')[2]);

                int[] foodDetails_P = new int[Convert.ToInt32(input[c])];
                int[] foodDetails_C = new int[Convert.ToInt32(input[c])];
                int[] foodDetails_F = new int[Convert.ToInt32(input[c])];
                
                for (int count = 0; count < foodBasic; count++)
                {
                    string tempInput = input[c + 1 + count];
                    string[] rowValues = tempInput.Split(' ');
                    foodDetails_P[count] = Convert.ToInt32(rowValues[0]);
                    foodDetails_C[count] = Convert.ToInt32(rowValues[1]);
                    foodDetails_F[count] = Convert.ToInt32(rowValues[2]);
                }

                ///
                nums = foodDetails_P;
                sum = P_R;
                maxNums = foodDetails_P.Length;
                selectedNums = new Int32[maxNums];
                returnable_list = new List<int[]>();
                System.IO.File.AppendAllText(@"C:\Users\Samarth Agarwal\Desktop\newyearoutput.txt", "Case #"+ (i+1)+": ");

                CurrentSum(0, 0, 0);

                if (returnable_list.Count() == 0 || returnable_list == null)
                { 
                    System.IO.File.AppendAllText(@"C:\Users\Samarth Agarwal\Desktop\newyearoutput.txt","NO"+Environment.NewLine);
                    //c = c + foodBasic + 2;
                    continue;
                }

                //we are here that means we have arrays of integers in our returnable_list
                foreach (int[] array in returnable_list)
                {
                    int length = array.Length;
                    int sum_C = 0, sum_F = 0;

                    var duplicateIndexesInReturned = array.Select((t1, i1) => new { Index = i1, Text = t1 })
                    .GroupBy(g => g.Text).Where(g => g.Count() > 1).SelectMany(g => g, (g, x) => x.Index);
                    var duplicateIndexesInOriginal = foodDetails_P.Select((t1, i1) => new { Index = i1, Text = t1 })
                    .GroupBy(g => g.Text).Where(g => g.Count() > 1).SelectMany(g => g, (g, x) => x.Index);

                    List<int> duplicateIndicesInRet = duplicateIndexesInReturned.ToList();
                    List<int> duplicateIndicesInOri = duplicateIndexesInOriginal.ToList();

                    for (int j = 0; j < length; j++)
                    {
                        if (duplicateIndicesInRet.Count > 0 && duplicateIndicesInOri.Count > 0 && duplicateIndicesInOri.Count == duplicateIndicesInRet.Count)
                            if (duplicateIndicesInRet.Contains(j))
                                continue;
                        int index = Array.IndexOf(foodDetails_P, array[j]);
                        sum_C += foodDetails_C[index];
                        sum_F += foodDetails_F[index];
                    }

                    if (duplicateIndicesInRet.Count > 0 && duplicateIndicesInOri.Count > 0 && duplicateIndicesInOri.Count == duplicateIndicesInRet.Count)
                    {
                        foreach (int index in duplicateIndicesInOri)
                        {
                            sum_C += foodDetails_C[index];
                            sum_F += foodDetails_F[index];
                        }
                    }

                    if (sum_C == C_R && sum_F == F_R)
                    {
                        System.IO.File.AppendAllText(@"C:\Users\Samarth Agarwal\Desktop\newyearoutput.txt", "YES"+Environment.NewLine);
                        flag = 1;
                        ///c = c + foodBasic + 2;
                        break;
                    }
                    else
                    {
                        //Console.WriteLine("NO");
                    }
                }

                if (flag == 0)
                    System.IO.File.AppendAllText(@"C:\Users\Samarth Agarwal\Desktop\newyearoutput.txt", "NO" + Environment.NewLine);
            }

            Console.ReadLine();
        }

        public static List<int[]> returnable_list;
        public static int[] returnable;
        public static void CurrentSum(Int32 sumSoFar, Int32 numsUsed, Int32 startIndex)
        {
            if (sumSoFar == sum && numsUsed <= maxNums)
            {
                returnable = new int[numsUsed];
                for (Int32 i = 0; i < numsUsed; i++)
                {
                    returnable[i] = selectedNums[i];
                    //Console.Write(selectedNums[i] + " ");
                }
                returnable_list.Add(returnable);
                //Console.WriteLine();
            }

            if (numsUsed >= maxNums || startIndex >= nums.Length)
                return;

            for (int i = startIndex; i < nums.Length; i++)
            {
                // Include i'th number
                selectedNums[numsUsed] = nums[i];
                CurrentSum(sumSoFar + nums[i], numsUsed + 1, i + 1);
            }
        }
    }
}

#include<iostream>
#include<vector>
using namespace std;
#define getcx getchar_unlocked
#ifndef ONLINE_JUDGE
    #define getcx getchar
#endif       
int b[1005][3];
inline long long int in()
{
  long long  int n=0;
  long long  int ch=getcx();long long int sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   return n*sign;
}

bool** dp;
vector<vector<int> > finale;


void display(const vector<int>& v) {
    finale.push_back(v);
}

void output(const vector<int>& a, int i, int sum, vector<int>& p) {
    if (i == 0 && sum != 0 && dp[0][sum]) {
        p.push_back(i);
        display(p);
        return;
    }
    if (i == 0 && sum == 0) {
        display(p);
        return;
    }
    if (dp[i - 1][sum]) {
        vector<int> b = p;
        output(a, i - 1, sum, b);
    }
    if (sum >= a[i] && dp[i - 1][sum - a[i]]) {
        p.push_back(i);
        output(a, i - 1, sum - a[i], p);
    }
}

void find(const vector<int>& a, int sum) {
    if (a.size() == 0 || sum < 0) return ;
    dp = new bool*[a.size()];
    for (int i = 0; i < a.size(); ++i) {
        dp[i] = new bool[sum + 1];
        dp[i][0] = true;
    }
    for (int i = 1; i < sum + 1; ++i)
        dp[0][i] = (a[0] == i) ? true : false;
    for (int i = 1; i < a.size(); ++i)
        for (int j = 0; j < sum + 1; ++j)
            dp[i][j] = (a[i] <= j) ? dp[i - 1][j] || dp[i - 1][j - a[i]] : dp[i - 1][j];
    if (!dp[a.size() - 1][sum]) {
        
        return  ;
    }
    vector<int> p;
    output(a, a.size() - 1, sum, p);
}

void merge1(int a[][3], int low, int mid , int high,int criteria )
{
    int h,i,j,k;
   h=low;
   i=low;
    j=mid+1;
   while(h<=mid && j<=high)
   {
      if(a[h][criteria]<=a[j][criteria])
      {
	 b[i][0]=a[h][0];
	 b[i][1]=a[h][1];
	 b[i][2]  =  a[h++][2];
 	 i++;
     }
      else
	 {b[i][0]=a[j][0];
	  b[i][1] = a[j][1];
	  b[i][2] =  a[j++][2];
	  
      i++;
      }
   }
 
   if( h > mid)
      for(k=j;k<=high;k++)
      {
	   b[i][0]=a[k][0];
	   b[i][1] = a[k][1];
	   b[i++][2] = a[k][2];
      }
   else
      for(k=h;k<=mid;k++)
	   {
                b[i][0]=a[k][0];
                b[i][1] = a[k][1];
                b[i++][2] = a[k][2];
       }
 
  // cout <<"\n";
  //cout<<"low";
   for(k=low;k<=high;k++)
   {  a[k][0]=b[k][0];
      a[k][1] = b[k][1];
      a[k][2] = b[k][2];
    // cout << a[k][0] <<" "<<a[k][1]<<endl;
   }
 
}
void mergesort1( int a[][3], int i, int j,int criteria)
{
    int mid;
   if(i<j)
   {
      mid=(i+j)/2;
      mergesort1(a,i,mid,criteria);
      mergesort1(a,mid+1,j,criteria);
      merge1(a,i,mid,j,criteria);
   }
}
int main()
{
	freopen("2.txt","r",stdin);
freopen("out.txt","w",stdout);

	   int t;
	   t = in();
	   int cases = 1;
	   
	   while(t--)
	   {
	         int target[3];
	         for(int i=0;i<3;i++)
	         {
	         	    target[i] = in();
	         }
	         int num;
	         num = in();
	         int opt[num][3];
	         for(int i=0;i<num;i++)
	         {
	         	     opt[i][0] = in();
	         	     opt[i][1] = in();
	         	     opt[i][2] = in();
	         }
	         
	         vector<int> ans ;
	         for(int i=0;i<num;i++)
	         {
	         	     ans.push_back(opt[i][0]);
	         	     
	         }
	        find(ans,target[0]);
	         
	         
	     //    mergesort1(opt,0,num-1,0);
	    
	        int n = finale.size();
	        int found = 0;
			for(int i=0;i<n;i++)
			{
				  int suma = 0 , sumb=0,sumc= 0;
				  int ele=   finale[i].size();
				for(int j=0;j<ele;j++)
				{
					    suma += opt[finale[i][j]][0];
					    sumb += opt[finale[i][j]][1];
					    sumc += opt[finale[i][j]][2];
					    
				}
				if(suma==target[0] && sumb == target[1] && sumc ==  target[2])
				{
					   found =  1;
					   break;
				}
			} 
	         
	        if(found)
			{
			     cout<<"Case #"<<cases<<": yes"<<endl;	
			} 
			else
			{
				cout<<"Case #"<<cases<<": no"<<endl;
			}
			cases++;
			finale.clear();
	   }
}

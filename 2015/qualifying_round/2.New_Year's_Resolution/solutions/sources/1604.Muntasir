#include <stdio.h>

typedef struct {
  long long protein;
  long long carbohydrates;
  long long fat;
} food;

inline int bit_set(int bit, int number) {
  return (number & (1 << bit)) != 0;
}

inline int equals(const food* a, const food* b) {
  return (a->protein == b->protein) &&
         (a->carbohydrates == b->carbohydrates) &&
         (a->fat == b->fat);
}

void print_food(const food* f) {
  printf("%lld %lld %lld\n", f->protein, f->carbohydrates, f->fat);
}

food diet_total(int mask, food* data, int n) {
  food ret = {0, 0, 0};
  int i;
  for (i = 0; i < n; i++) {
    if (bit_set(i, mask)) {
      ret.protein += data[i].protein;
      ret.carbohydrates += data[i].carbohydrates;
      ret.fat += data[i].fat;
    }
  }
  return ret;
}

int is_possible(food* data, int n, food target) {
  int limit = 1 << n;
  int possible = 0;
  int state;
  for(state = 0; state < limit && !possible; state++) {
    food total = diet_total(state, data, n);
    possible |= equals(&total, &target);
  }
  return possible;
}

food data[22];

int main() {
  int T, N, i, cas;
  food target;
  scanf("%d", &T);
  for(cas = 1; cas <= T; cas++) {
    scanf(
        "%lld %lld %lld",
        &target.protein, &target.carbohydrates, &target.fat);
    scanf("%d", &N);
    for(i = 0; i < N; i++) {
      scanf(
          "%lld %lld %lld",
          &data[i].protein, &data[i].carbohydrates, &data[i].fat);
    }
    printf("Case #%d: ", cas);
    if (is_possible(data, N, target)) {
      printf("yes\n");
    }
    else {
      printf("no\n");
    }
  }
  return 0;
}

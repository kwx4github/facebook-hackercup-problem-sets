#include <iostream>
using namespace std;

#define N 1024;

struct nuts {
	int P;
	int C;
	int F;
};

bool isSubsetSum(nuts sset[], int n, int PS, int CS, int FS) {
	if(PS == 0 && CS == 0 && FS == 0) return true;
	if(n == 0) return false;
	
	if(sset[n-1].F > FS || sset[n-1].C > CS || sset[n-1].P > PS) 
		return isSubsetSum(sset, n-1, PS, CS, FS);

	return isSubsetSum(sset, n-1, PS, CS, FS) || isSubsetSum(sset, n-1, PS-sset[n-1].P, CS-sset[n-1].C, FS-sset[n-1].F);
}

int main() {
	int tc, GP, GC, GF; cin >> tc;
	for(int kase = 1; kase <= tc; kase++) {
		cin >> GP >> GC >> GF;
		int n; cin >> n;
		nuts sset[n];

		for(int i=0; i<n; i++)
			cin >> sset[i].P >> sset[i].C >> sset[i].F;

		if(isSubsetSum(sset, n, GP, GC, GF)) 
			cout << "Case #" << kase << ": yes\n";
		else
			cout << "Case #" << kase << ": no\n";
	}
	return 0;
}
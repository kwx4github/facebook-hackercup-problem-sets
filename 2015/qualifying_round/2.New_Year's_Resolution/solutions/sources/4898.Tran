import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;

/**
 *
 */

/**
 * @author dattran
 *
 */
public class NewYearResolution {

	/**
	 * @param args
	 * @throws FileNotFoundException
	 * @throws UnsupportedEncodingException
	 */
	public static void main(final String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		String inputFileName = "/home/dattran/Downloads/new_years_resolution.txt";
		String outputFileName = "/home/dattran/Downloads/output.txt";
		Scanner in = new Scanner(new FileReader(inputFileName));
		PrintWriter writer = new PrintWriter(outputFileName, "UTF-8");
		int totalTestCase = Integer.valueOf(in.nextLine());
		NewYearResolution nYear = new NewYearResolution();
		for (int i = 0; i < totalTestCase; i++) {
			System.out.print(i + " ");
			int[] mySum = nYear.stringToArray(in.nextLine());
			int foodNr = Integer.valueOf(in.nextLine());
			int[][] mySet = new int[foodNr][3];
			for (int j = 0; j < foodNr; j++) {
				mySet[j] = nYear.stringToArray(in.nextLine());
			}
			StringBuilder sb = new StringBuilder("Case #");
			sb.append(i + 1);
			sb.append(": ");
			if (nYear.isExistSumSubSetAdvance(mySet, mySum, 0)) {
				sb.append("yes");
			} else {
				sb.append("no");
			}
			System.out.println();
			writer.println(sb.toString());
		}
		writer.close();
		in.close();

	}

	private boolean isExistSumSubSet(final int[] mySet, final int mySum, final int currentIndex) {
		if (mySum == 0) {
			return true;
		}
		if ((mySum < 0) || (currentIndex >= mySet.length)) {
			return false;
		}
		if (isExistSumSubSet(mySet, mySum, currentIndex + 1)) {
			return true;
		}
		if (isExistSumSubSet(mySet, mySum - mySet[currentIndex], currentIndex + 1)) {
			System.out.print(mySet[currentIndex] + " ");
			return true;
		}
		return false;
	}

	private boolean isExistSumSubSetAdvance(final int[][] mySet, final int mySum[], final int currentIndex) {
		if ((mySum[0] == 0) && (mySum[1] == 0) && (mySum[2] == 0)) {
			return true;
		}
		if ((mySum[0] < 0) || (mySum[1] < 0) || (mySum[2] < 0) || (currentIndex >= mySet.length)) {
			return false;
		}
		if (isExistSumSubSetAdvance(mySet, mySum, currentIndex + 1)) {
			return true;
		}
		int[] myCurrentSum = new int[mySum.length];
		for (int i = 0; i < 3; i++) {
			myCurrentSum[i] = mySum[i] - mySet[currentIndex][i];
		}
		if (isExistSumSubSetAdvance(mySet, myCurrentSum, currentIndex + 1)) {
			System.out.print(currentIndex + " ");
			return true;
		}
		return false;
	}

	private int[] stringToArray(final String line) {
		String[] number = line.split(" ");
		int[] arr = new int[number.length];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = Integer.valueOf(number[i]);
		}
		return arr;
	}

}

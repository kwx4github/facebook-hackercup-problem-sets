import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

import com.google.common.collect.Sets;

public class NYR {
    public static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

    }

    private static class Food {
        private final int p;
        private final int c;
        private final int f;

        public Food(int p, int c, int f) {
            this.p = p;
            this.c = c;
            this.f = f;
        }

    }

    public static void main(String[] args) throws IOException {
        InputReader in = new InputReader(new FileInputStream("d:/downloads/new_years_resolution.txt"));
        int T = in.nextInt();
        BufferedWriter bw = new BufferedWriter(new FileWriter("d:/downloads/output.txt"));
        for (int t = 1; t <= T; t++) {
            Food desired = new Food(in.nextInt(), in.nextInt(), in.nextInt());
            int N = in.nextInt();
            Set<Food> foods = new HashSet<Food>();
            for (int i = 0; i < N; i++) {
                Food f = new Food(in.nextInt(), in.nextInt(), in.nextInt());
                foods.add(f);
            }
            String res = solve(desired, foods);
            String resLine = "Case #" + t + ": " + res + "\n";
            bw.write(resLine);
            System.out.print(resLine);
        }
        bw.close();
    }

    private static String solve(Food desired, Set<Food> foods) {
        Set<Set<Food>> subsets = Sets.powerSet(foods);
        boolean found = false;
        for (Set<Food> subset : subsets) {
            int leftP = desired.p;
            int leftC = desired.c;
            int leftF = desired.f;
            for (Food food : subset) {
                leftP -= food.p;
                leftC -= food.c;
                leftF -= food.f;
                if (leftC < 0 || leftP < 0 || leftF < 0) {
                    break;
                }
            }
            if (leftC == 0 && leftP == 0 && leftF == 0) {
                found = true;
                break;
            }
        }
        return found ? "yes" : "no";
    }

}

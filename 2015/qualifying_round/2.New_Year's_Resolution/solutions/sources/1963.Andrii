#include <cassert>
#include <complex>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iostream>
#include <iterator>
#include <limits>
#include <numeric>
#include <sstream>
#include <utility>

#include <algorithm>
#include <bitset>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

#include <memory.h>
using namespace std;

#define Pi 3.141592653589793
#define all(c) (c).begin(), (c).end()
typedef long long ll;

int ri() {
  static int res;
  scanf("%d", &res);
  return res;
}

template <typename T>
int numbits(T n) {
  return n ? 1 + numbits(n & (n - 1)) : 0;
}

class timer {
public:
  timer() : t_(clock()) {}
  void restart() { t_ = clock(); }
  float elapsed() { return float(clock() - t_) / CLOCKS_PER_SEC; }
private:
  clock_t t_;
};

void run();

int main() {
#ifdef LOCAL_HOST
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
  timer t;
#endif
  run();
#ifdef LOCAL_HOST
  printf("\nElapsed time: %.9f\n", t.elapsed());
#endif
  return 0;
}

void run() {
  int n; cin >> n;
  int b[3];
  int a[32][3];
  for (int cs = 0; cs < n; ++cs) {
    cin >> b[0] >> b[1] >> b[2];
    int m; cin >> m;
    for (int j = 0; j < m; ++j) {
      cin >> a[j][0] >> a[j][1] >> a[j][2];
    }
    bool possible = false;

    for (int mask = 0; mask < (1 << m); ++mask) {
      int c[3]; c[0] = c[1] = c[2] = 0;
      for (int j = 0; j < m; ++j) {
        if ((1 << j) & mask) {
          for (int k = 0; k < 3; ++k) {
            c[k] += a[j][k];
          }
        }
      }
      if (b[0] == c[0] && b[1] == c[1] && b[2] == c[2]) {
        possible = true;
      }
    }

    if (possible) {
      printf("Case #%d: yes\n",cs + 1);
    } else {
      printf("Case #%d: no\n",cs + 1);
    }
  }
}

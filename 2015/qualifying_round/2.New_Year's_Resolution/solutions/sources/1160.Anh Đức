#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <climits>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <climits>
#define FOR(i, a, b) for(int i = (a); i < (b); i++)
#define REP(i, a, b) for(int i = (a); i <=(b); i++)
#define FORD(i, a, b) for(int i = (a); i > (b); i--)
#define REPD(i, a, b) for(int i = (a); i >=(b); i--)
#define TR(it, a) for(typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define RESET(a, v) memset((a), (v), sizeof((a)))
#define SZ(a) (int((a).size()))
#define ALL(a) (a).begin(), (a).end()
#define PB push_back
#define MP make_pair
#define LL long long
#define LD long double
#define II pair<int, int>
#define X first
#define Y second
#define VI vector<int>

const int N = 22;

using namespace std;

int p, c, f;

struct food {
    int p, c, f;
} a[N];

bool YES;
int n, nTest;

void backtrack(int i, int pp, int cc, int ff) {
    if (pp > p || cc > c || ff > f || YES) return;
    if (i > n) {
        if (pp == p && cc == c && f == ff)
            YES = 1;
        return;
    }
    backtrack(i + 1, pp, cc, ff);
    backtrack(i + 1, pp + a[i].p, cc + a[i].c, ff + a[i].f);
}

int main() {
    ios :: sync_with_stdio(0); cin.tie(0);
    freopen("new_years_resolution.txt", "r", stdin);
    freopen("new_years_resolution.out", "w", stdout);
    cin >> nTest;
    REP(step, 1, nTest) {
        cin >> p >> c >> f;
        cin >> n;
        FOR(i, 0, n) cin >> a[i].p >> a[i].c >> a[i].f;
        YES = 0;
        backtrack(0, 0, 0, 0);
        cout << "Case #" << step << ": " << (YES ? "yes\n" : "no\n");
    }
    return 0;
}

import java.io.*;
import java.util.*;
public class Resolution {
	static Food[] array;
	static boolean found;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String aux;
		int cases = Integer.parseInt(br.readLine());
		for (int i = 1; i <= cases; i++) {
			found = false;
			aux = br.readLine();
			StringTokenizer st = new StringTokenizer(aux);
			Food goal = new Food(Integer.parseInt(st.nextToken()) , Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
			int numFood = Integer.parseInt(br.readLine());
			array = new Food[numFood];
			for (int j = 0; j < numFood; j++) {
				aux = br.readLine();
				st = new StringTokenizer(aux);
				array[j] = new Food(Integer.parseInt(st.nextToken()) , Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
			}
			recursion(goal, 0);
			if(found) System.out.println("Case #" + i + ": yes");
			else System.out.println("Case #" + i + ": no");
		}
	}
	
	public static void recursion(Food cur, int i) {
		if(found) return;
		if(cur.P == 0 && cur.C == 0 && cur.F == 0) {
			found = true;
			return;
		}
		for (int j = i; j < array.length; j++) {
			Food aux = new Food(0,0,0);
			//System.out.println(aux + " aux");
			aux.P = cur.P - array[j].P;
			aux.C = cur.C - array[j].C;
			aux.F = cur.F - array[j].F;
			if(aux.P < 0 || aux.C < 0 || aux.F < 0) continue;
			//System.out.println(aux + "....."  + array[j]);
			recursion(aux, j+1);
		}
	}
}
class Food {
	int P;
	int C;
	int F;
	
	Food(int P, int C, int F) {
		this.P = P;
		this.C = C;
		this.F = F;
	}
	
	@Override
	public String toString() {
		return P + " " + C + " " + F;
	}
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;


class NewYearsResolution {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(System.out, true);

	public static void main(String[] args) throws NumberFormatException, IOException {
		
		int t = Integer.parseInt(br.readLine());
		
		for(int i=1; i<=t; i++){
			String[] a = br.readLine().split(" ");
			int Gp = Integer.parseInt(a[0]);
			int Gc = Integer.parseInt(a[1]);
			int Gf = Integer.parseInt(a[2]);
			//int[] sum = {Gp, Gc, Gf};
			
			int n = Integer.parseInt(br.readLine());
			  
			int[][] set = new int[n][3];
			for(int ii=0; ii<n; ii++){
				a = br.readLine().split(" ");
				set[ii][0] = Integer.parseInt(a[0]);
				set[ii][1] = Integer.parseInt(a[1]);
				set[ii][2] = Integer.parseInt(a[2]);
			}
			
			String res = "";
			if(isSubsetSum(set, n, Gp, Gc, Gf))
				res = "yes";
			else
				res = "no";
			
		    out.println("Case #"+i+": "+res);
		}
	}
	
	public static boolean isSubsetSum(int[][] set, int n, int sum0, int sum1, int sum2)
	{
	   // Base Cases
	   if (sum0 == 0 && sum1 == 0 && sum2 == 0)
	     return true;
	   if (n == 0 && (sum0 != 0 || sum1 != 0 || sum2 != 0))
	     return false;
	 
	   // If last element is greater than sum, then ignore it
	   if (set[n-1][0] > sum0 && set[n-1][1] > sum1 && set[n-1][2] > sum2)
	     return isSubsetSum(set, n-1, sum0, sum1, sum2);
	 
	   /* else, check if sum can be obtained by any of the following
	      (a) including the last element
	      (b) excluding the last element   */
	   return isSubsetSum(set, n-1, sum0, sum1, sum2) || isSubsetSum(set, n-1, sum0-set[n-1][0],sum1- set[n-1][1], sum2- set[n-1][2]);
	}
	
	
}

#include <iostream>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <functional>
#include <set>
#include <map>
#include <numeric>
#include <cstdio>
#include <string>
#include <cstring>
#include <cctype>
#include <ctime>
#include <cassert>
#include <cmath>
#include <complex>

#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define all(v) (v).begin(), (v).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(x,y) memset(m,v,sizeof(m))

using namespace std;

typedef long long ll;

const int INF = 1 << 29;
const double EPS = 1e-9;

struct Food {
    int P, C, F;
    Food() : P(0), C(0), F(0) {}
    
    Food& operator+=(const Food &a) {
        P += a.P;
        C += a.C;
        F += a.F;
        return *this;
    }

};

bool operator==(const Food &a, const Food &b) {
    return (a.P == b.P && a.C == b.C && a.F == b.F);
}


int main() {
    int T, N;
    cin >> T;
    for(int t = 1; t <= T; t++) {
        bool ok = false;
        Food G;
        cin >> G.P >> G.C >> G.F;
        cin >> N;
        vector<Food> v(N);
        for(int i = 0; i < N; i++) {
            cin >> v[i].P >> v[i].C >> v[i].F;    
        }

        for(int i  = 0; i < 1 << N; i++) {
            Food tmp;
            for(int j = 0; j < N; j++) {
                if(1 & (i >> j)) {
                    tmp += v[j];
                }
            }
            if(tmp == G) ok = true;
        }
        cout << "Case #" << t << ": " << (ok ? "yes" : "no") << endl;
    }
}


package fhc2015.qual;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;

public class B {

	public static void main(String[] args) throws Exception {
		String DIR = "src/fhc2015/qual/";
		String READ_FILE = null;
		String WRITE_FILE = null;

		//      READ_FILE = "b.in";
		//      WRITE_FILE = "b.out";

		if(READ_FILE != null){
			System.setIn(new BufferedInputStream(new FileInputStream(new File(DIR+READ_FILE))));
		}
		if(WRITE_FILE != null){
			System.setOut(new PrintStream(new File(DIR+WRITE_FILE)));
		}
		precalc();
		new B().run();
	}

	boolean DEBUG = false;
	Scanner sc;
	static void precalc(){}

	void run(){
		sc = new Scanner(System.in);
		int caseCnt = sc.nextInt();
		for (int caseNum = 1; caseNum <= caseCnt; caseNum++) {
			System.out.print("Case #" + caseNum + ": ");
			solve();
			System.out.flush();
		}
	}
	void debug(Object... o){
		if (DEBUG) System.out.println(Arrays.deepToString(o));
	}

	void solve(){

		N target = new N(sc);

		int n = sc.nextInt();

		HashSet<N> set = new HashSet<>();
		set.add(new N(0, 0, 0));

		LinkedList<N> list = new LinkedList<>();
		for (int i = 0 ; i < n ; i++) {
			list.add(new N(sc));
		}
		
		for (N item : list) {
			HashSet<N> news = new HashSet<N>();
			
			for (N iter : set) {
				N added = iter.add(item);
				if (added.equals(target)) {
					System.out.println("yes");
					return;
				}
				
				if (added.a <= target.a && added.b <= target.b && added.c <= target.c) {
					news.add(added);
				}
			}

			set.addAll(news);
		}
		System.out.println("no");
		
	}
	
	public static class N{
		public int a, b, c;
		public N(int a, int b, int c) {
			this.a = a;
			this.b = b;
			this.c = c;
		}
		public N(Scanner sc) {
			this.a = sc.nextInt();
			this.b = sc.nextInt();
			this.c = sc.nextInt();
		}
		
		public N add(N o) {
			return new N(this.a + o.a, this.b + o.b, this.c + o.c);
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + a;
			result = prime * result + b;
			result = prime * result + c;
			return result;
		}
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			N other = (N) obj;
			if (a != other.a)
				return false;
			if (b != other.b)
				return false;
			if (c != other.c)
				return false;
			return true;
		}
	}
	
}
/**
5
100 100 100
1
100 100 100
100 100 100
3
10 10 40
10 30 10
10 60 50
100 100 100
5
40 70 30
30 10 40
20 20 50
10 50 90
40 10 20
292 264 512
20
909 302 261
705 597 823
291 51 126
28 697 57
593 31 826
311 256 57
292 14 47
29 730 716
12 529 146
768 16 439
37 472 15
350 192 34
163 468 238
69 173 10
203 72 690
424 875 213
223 593 292
151 46 10
88 90 16
773 653 711
991 827 352
20
29 560 929
139 681 102
144 853 10
84 729 80
218 20 67
140 80 901
428 20 500
520 970 128
422 419 30
413 101 192
467 448 501
32 939 684
34 20 38
251 317 132
588 437 10
648 21 79
391 25 14
499 22 24
854 77 361
405 25 20
Case #1: yes
Case #2: no
Case #3: yes
Case #4: no
Case #5: yes
 */

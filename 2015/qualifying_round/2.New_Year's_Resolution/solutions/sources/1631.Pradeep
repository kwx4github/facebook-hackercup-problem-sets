import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;


public class Second {

	public static void main(String[] args) {
		Scanner fileScanner;
		int tests = 0;
		int cases = 0;
		try {
			fileScanner = new Scanner(new File("C:/Users/User/Desktop/def.txt"));
			BufferedWriter writer = new BufferedWriter(new FileWriter("C:/Users/User/Desktop/abc.txt"));
			if(fileScanner.hasNextLine()) {
				tests = Integer.parseInt(fileScanner.nextLine());
			}
			while (fileScanner.hasNextLine()){
				String s[] = fileScanner.nextLine().split(" ");
				int mainP = Integer.parseInt(s[0]);
				int mainC = Integer.parseInt(s[1]);
				int mainF = Integer.parseInt(s[2]);
				int numFoods = 0;
				if(fileScanner.hasNextLine()) {
					numFoods = Integer.parseInt(fileScanner.nextLine());
				}
				int[] P = new int[numFoods];
				int[] C = new int[numFoods];
				int[] F = new int[numFoods];
				int h = 0;
				String m[] = new String[3];
				for(int y = 0; y < numFoods; y++) {
					if(fileScanner.hasNextLine()) {
						m = fileScanner.nextLine().split(" ");
					}
					P[h] = Integer.parseInt(m[0]);
					C[h] = Integer.parseInt(m[1]);
					F[h++] = Integer.parseInt(m[2]);
				}
				if(possible(mainP, P, mainC, C, mainF, F, 0)) {
					writer.write("Case #" + ++cases + ": yes");
					writer.newLine();
				}
				else {
					writer.write("Case #" + ++cases + ": no");
					writer.newLine();
				}
			}
			writer.close();
		}
		catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	public static boolean possible(int mainP, int[] P, int mainC, int[] C, int mainF, int[] F, int index) {
		if(mainP == 0 && mainC == 0 && mainF == 0) {
			return true;
		}
		if(index >= P.length)
			return false;
		if(mainP - P[index] == 0 && mainC - C[index] == 0 && mainF - F[index] == 0) {
			return true;
		}
		if(possible(mainP, P, mainC, C, mainF, F, index + 1) || (mainP - P[index] > 0 && mainC - C[index] > 0 && mainF - F[index] > 0 && possible(mainP - P[index], P, mainC - C[index], C, mainF - F[index], F, index + 1)))
			return true;
		return false;
	}

}
#include <cstring>
#include <string.h>
#include <fstream>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>

using namespace std;

#define pb push_back
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz size()
#define rep(i,s,e) for (int i = int(s); i < int(e); i++)
#define repit(i,c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define mem(a,b) memset(a,b,sizeof(a))
#define mp make_pair

typedef stringstream ss;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const double PI = 2 * acos(0);
const double eps = 1e-9;

const int MAX_N = 20;
int T;
int nfood;
int gp, gc, gf;
int p[MAX_N], c[MAX_N], f[MAX_N];

bool dfs( int i, int sum_p, int sum_c, int sum_f ) {

	if( i == nfood ) {
		if( sum_p == gp && sum_c == gc && sum_f == gf ) {
			return true;
		} else {
			return false;
		}
	}

	if( dfs( i + 1, sum_p, sum_c, sum_f ) ) return true;

	if( dfs( i + 1, sum_p + p[i], sum_c + c[i], sum_f + f[i] ) ) return true;

	return false;

}

int main(int argc, char *args[]) {
	std::ifstream fin;
	std::ofstream fout;
    if (argc == 1) {
        fin.open("new_years_resolution.txt");
        fout.open("new_years_resolution_output.txt");
    } else if  (argc == 2 && strcmp(args[1], "test") == 0) {
    	fin.open("new_years_resolution_example_input.txt");
    	fout.open("new_years_resolution_example_output.txt");
    }
    if(fin.fail()) {
    	cerr << "File do not exist.\n";
    	exit(0);
   	}

    string line;
    getline( fin, line );
    int T = stoi(line);
    vector<string> results;
    results.resize(T);

    rep(i, 0, T) {
    	rep(j, 0, MAX_N) {
    		p[j] = c[j] = f[j] = 0;
    	}
    	getline( fin, line );
    	ss ssbuf(line);
    	ssbuf >> gp >> gc >> gf;
    	//cout << gp << ", " << gc << ", " << gf << endl;
    	getline( fin, line );
    	nfood = stoi( line );
    	//cout << nfood << endl;

    	rep(j, 0, nfood) {
    		ssbuf.str(""); ssbuf.clear();
    		getline( fin, line );
    		ssbuf << line;
    		ssbuf >> p[j] >> c[j] >> f[j];
    	}

    	if( dfs(0, 0, 0, 0) ) { results[i] = "yes"; }
    	else { results[i] = "no"; }
    }

    rep(n, 0, T) {
    	//cout << "Case #" << n+1 << ": " << results[n] << endl;
        fout << "Case #" << n+1 << ": ";
        fout << results[n];
        fout << endl;
    }

    fin.close();
    fout.close();
    return 0;
}

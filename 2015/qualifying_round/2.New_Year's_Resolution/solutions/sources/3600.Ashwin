#include <cstdio>
#include <cstring>
#include <set>
#include <iostream>
#include <vector>
#include <cstdlib>

using namespace std;

set < pair < pair < int,int >, int > > myset;
set < pair < pair < int,int >, int > >::iterator it;

int carb[20],prot[20],fat[20];

bool possible(int c, int p, int f, int n){
	
	int curr_c, curr_p, curr_f;
	int i;
	bool found = false;
	pair < pair < int,int > , int > mypair, tpair;

	for(i=0;i<n && !found;i++){

		//cout<<"\nRunning "<<i<<endl;

		//insert the element into the set
		mypair = make_pair( make_pair( carb[i], prot[i] ), fat[i] );
		it = myset.find(mypair);

		if( it == myset.end() ){
			myset.insert(mypair);
		}

		it = myset.begin();
		
		while( it != myset.end() ){

			if(carb[i] + it->first.first > c || prot[i] + it->first.second > p || fat[i] + it->second > f)
				;
			else
				myset.insert(make_pair( make_pair(carb[i] + it->first.first, prot[i]+it->first.second),fat[i] + it->second));

			it++;
		}

		mypair = make_pair( make_pair( c,p ), f );
		it = myset.find(mypair);

		if( it != myset.end() ){
			found = true;
		}
	}

	return found;
}

int main(){

 	int tcase;
	int c,p,f;
	int num;
	int i,cnt = 1;

	cin>>tcase;

	while(tcase--){
		
		cin>>c>>p>>f;
		cin>>num;

		for(i=0;i<num;i++){
			cin>>carb[i]>>prot[i]>>fat[i];
		}
		
		if(possible(c,p,f,num))
			printf("Case #%d: yes\n",cnt++);
		else
			printf("Case #%d: no\n",cnt++);
		
		myset.clear();
	}

	return 0;
}

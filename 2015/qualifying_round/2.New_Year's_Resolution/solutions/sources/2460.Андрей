#include <cstdio>
#include <cinttypes>
#include <iostream>
#include <vector>
#include <algorithm>

struct food {
  int32_t p, c, f;
};

bool solve(int32_t p, int32_t c, int32_t f, const std::vector<food> &v) {
  auto n = (1 << v.size());

  for (int32_t i = 0; i < n; ++i) {
    auto temp = i;
    int32_t sum_p = 0;
    int32_t sum_c = 0;
    int32_t sum_f = 0;

    int index = 0;
    while (temp > 0) {
      int x = temp & 1;
      if (x == 1) {
        sum_p += v[index].p;
        sum_c += v[index].c;
        sum_f += v[index].f;
      }
      ++index; temp >>= 1;
    }

    if ((sum_p == p) && (sum_c == c) && (sum_f == f))
      return true;
  }
  return false;
}

int main() {
  std::freopen("input.txt", "r", stdin);
  std::freopen("output.txt", "w", stdout);

  int32_t t, n;
  std::scanf("%" SCNd32, &t);

  int32_t p, c, f;
  std::vector<food> v;
  for (int32_t i = 0; i < t; ++i) {
    std::scanf("%" SCNd32 "%" SCNd32 "%" SCNd32, &p, &c, &f);
    std::scanf("%" SCNd32, &n);

    v.clear();
    v.resize(n);
    for (int32_t j = 0; j < n; ++j)
      std::scanf("%" SCNd32 "%" SCNd32 "%" SCNd32, &v[j].p, &v[j].c, &v[j].f);

    bool ans = solve(p, c, f, v);
    std::printf("Case #%" PRId32 ": %s", i + 1, (ans ? "yes\n" : "no\n"));
  }

  return 0;
}

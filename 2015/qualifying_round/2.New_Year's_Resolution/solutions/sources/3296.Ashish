import java.util.Scanner;
import java.util.Stack;

class Solution {

    private static boolean result = false;
    private static int[] sumInStack = {0, 0, 0};
    private static Stack<Integer> stack0 = new Stack<Integer>();
    private static Stack<Integer> stack1 = new Stack<Integer>();
    private static Stack<Integer> stack2 = new Stack<Integer>();

    public static void main(String[] args) {
        Scanner inp = new Scanner(System.in);
        int t = inp.nextInt();
        int[] target = new int[3];
        for (int z = 1; z <= t; z++) {
            sumInStack[0] = sumInStack[1] = sumInStack[2] = 0;
            stack0.clear();
            stack1.clear();
            stack2.clear();
            result = false;
            target[0] = inp.nextInt();
            target[1] = inp.nextInt();
            target[2] = inp.nextInt();

            int n_data = inp.nextInt();
            int[][] data = new int[n_data][3];
            for (int y = 0; y < n_data; y++) {
                data[y][0] = inp.nextInt();
                data[y][1] = inp.nextInt();
                data[y][2] = inp.nextInt();
            }
            if (check(target, data, n_data)) {
                System.out.println("Case #" + z + ": yes");
            } else {
                System.out.println("Case #" + z + ": no");
            }
        }
    }

    private static boolean check(int[] target, int[][] data, int n_data) {
        int[] sum = new int[3];
        sum[0] = sum[1] = sum[2] = 0;
        // removing every element of data is greater than target values.
        Stack<Integer> dataStack0 = new Stack<Integer>();
        Stack<Integer> dataStack1 = new Stack<Integer>();
        Stack<Integer> dataStack2 = new Stack<Integer>();
        for (int i = 0; i < n_data; i++) {
            if (data[i][0] <= target[0] && data[i][1] <= target[1] && data[i][2] <= target[2]) {
                dataStack0.push(data[i][0]);
                dataStack1.push(data[i][1]);
                dataStack2.push(data[i][2]);
                sum[0] += data[i][0];
                sum[1] += data[i][1];
                sum[2] += data[i][2];
            }
        }
        // checking if in any case sum can be equal to target values.
        for (int x = 0; x < 3; x++) {
            if (sum[x] < target[x]) {
                return false;
            }
        }
        int[][] new_data = new int[dataStack0.size()][3];
        for (int i = 0; i < new_data.length; i++) {
            new_data[i][0] = dataStack0.pop();
            new_data[i][1] = dataStack1.pop();
            new_data[i][2] = dataStack2.pop();
        }
        doCombinations(target, new_data, 0, new_data.length);
        return result;
    }

    private static void doCombinations(int[] target, int[][] data, int fromIndex, int endIndex) {
        if (sumInStack[0] == target[0] && sumInStack[1] == target[1] && sumInStack[2] == target[2]) {
            result = true;
            return;
        }

        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {
            if(result)
                return;
            if ((sumInStack[0] + data[currentIndex][0] <= target[0]) && (sumInStack[1] + data[currentIndex][1] <= target[1]) && (sumInStack[2] + data[currentIndex][2] <= target[2])) {
                stack0.push(data[currentIndex][0]);
                stack1.push(data[currentIndex][1]);
                stack2.push(data[currentIndex][2]);
                sumInStack[0] += data[currentIndex][0];
                sumInStack[1] += data[currentIndex][1];
                sumInStack[2] += data[currentIndex][2];
                doCombinations(target, data, currentIndex + 1, endIndex);
                sumInStack[0] -= stack0.pop();
                sumInStack[1] -= stack1.pop();
                sumInStack[2] -= stack2.pop();
            }
        }
    }
}
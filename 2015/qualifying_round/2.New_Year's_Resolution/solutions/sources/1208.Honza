#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

struct values {
	int p;
	int c;
	int f;
	values() {p = c = f = 0;}
	values operator+ (const values& a) {
		values res;
		res.p = this->p + a.p;
		res.c = this->c + a.c;
		res.f = this->f + a.f;
		return res;
	}
	bool operator== (const values& a) {
		if (this->p != a.p) return false;
		if (this->c != a.c) return false;
		if (this->f != a.f) return false;
		return true;
	}
};
values g;
values meal [30];
int T, cnt, cnt2;

bool solve(values v, int start) {
	// printf("Cnt %d %d %d | %d %d %d\n", cnt2++, start, cnt, v.p, v.c, v.f);
	if (start == cnt) return v == g;
	bool res = false;
	res = res || solve(v, start+1);
	res = res || solve(v+meal[start], start+1);
	return res;
}

int main(int argc, char const *argv[]) {		
	bool b;
	scanf("%d\n",&T);
	for (int i = 0; i < T; ++i) {
		cnt2 = 0;
		scanf("%d %d %d\n", &g.p, &g.c, &g.f);
		scanf("%d\n",&cnt);
		// printf("%d\n", cnt);
		for (int j = 0; j < cnt; ++j) {
			scanf("%d %d %d\n", &meal[j].p, &meal[j].c, &meal[j].f);
		}
		b = solve(values(), 0);
		if (b) printf("Case #%d: yes\n", i+1);
		else printf("Case #%d: no\n", i+1);
	}
	return 0;
}
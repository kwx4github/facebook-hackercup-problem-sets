#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <utility>
#include <functional>

#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;


ifstream ifs;
ofstream ofs;
string buf;

bool solve(int N, int index, int** PCF, int P, int C, int F){
    if(P == 0 && C == 0 && F == 0){
        return true;
    }
    if(index >= N){
        return false;
    }
    if(P < 0 || C < 0 || F < 0){
        return false;
    }

    bool result = solve(N, index + 1, PCF, P - PCF[index][0], C - PCF[index][1], F - PCF[index][2])
                    || solve(N, index + 1, PCF, P, C, F);
    return result;
}

int main(int argc, char **argv){
    ifs.open("new_years_resolution.txt");
    ofs.open("output.txt");

    
	getline(ifs, buf);
	int T = atoi(buf.c_str());

	rep(i, T){
        ofs << "Case #" << i + 1 << ": ";

        int targetPCF[3];
        getline(ifs, buf, ' ');
        targetPCF[0] = atoi(buf.c_str());
        getline(ifs, buf, ' ');
        targetPCF[1] = atoi(buf.c_str());
        getline(ifs, buf);
        targetPCF[2] = atoi(buf.c_str());
        
		getline(ifs, buf);
	    int N = atoi(buf.c_str());

        int** PCF = new int*[N];
        rep(j, N){
            PCF[j] = new int[3];
        }
        rep(j, N){
            getline(ifs, buf, ' ');
            PCF[j][0] = atoi(buf.c_str());
            getline(ifs, buf, ' ');
            PCF[j][1] = atoi(buf.c_str());
            getline(ifs, buf);
            PCF[j][2] = atoi(buf.c_str());
        }

        bool result = solve(N, 0, PCF, targetPCF[0], targetPCF[1], targetPCF[2]);
        if(result){
            ofs << "yes" << endl;
        }
        else{
            ofs << "no" << endl;
        }

        rep(j, N){
            delete[] PCF[j];
        }
        delete[] PCF;
	}
	

    ifs.close();
    ofs.close();
    return 0;
}

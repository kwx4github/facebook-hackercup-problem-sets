#include<iostream>
#include<stdio.h>
#include<fstream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

struct food{
    int p, c, f;
};

bool comp(const food&a, const food&b){
    return ((a.p<b.p) || (a.p==b.p && (a.c<b.p)) || (a.p==b.p && a.c==b.c && a.f<b.f));
}


bool sol(vector<food> &v, int&gp, int&gc, int&gf, int tp, int tc, int tf, int ind){

    if(gp==tp && gc==tc &&gf==tf)
        return true;
    if(ind>=v.size())
        return false;
    bool a;
    if(gp>tp && gc >tc && gf>tf){
        //dont eat
        a=sol(v, gp, gc, gf, tp, tc, tf, ind+1);
        if(a)
            return a;
        //eat
        a=sol(v, gp, gc, gf, tp+v[ind].p, tc+v[ind].c, tf+v[ind].f, ind+1);
        return a;
    }
    return false;
}

int main()
{
    int T, t=1;
    ifstream fin("A-small-practice.in");
    freopen("A-small-practice.out","a+",stdout);
    fin>>T;
    vector<food> v;
    int Gp, Gc, Gf, N;
    food tmp;
    while(t<=T)
    {
        bool ans=false;
        fin>>Gp>>Gc>>Gf>>N;
        for(int i=0; i<N; i++){
            fin>>tmp.p>>tmp.c>>tmp.f;
            v.push_back(tmp);
        }
        sort(v.begin(), v.end(), comp);
        ans=sol(v, Gp, Gc, Gf, 0, 0, 0, 0);
        v.clear();
        printf("Case #%d: %s\n", t++, ans?"yes":"no");
    }
    fin.close();
    fclose(stdout);
    return 0;
}


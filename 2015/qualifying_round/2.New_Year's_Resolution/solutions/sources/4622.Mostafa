package com.meg7.training.facebook.HackerCup15;

import java.util.Scanner;

public class New_Year_s_Resolution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numberOfTests = scanner.nextInt();

        int gP, gC, gF;
        int[] p, c, f;
        int minP, minC, minF;
        int availableFood;

        boolean valid;
        for (int i = 1; i <= numberOfTests; i++) {
            gP = scanner.nextInt();
            gC = scanner.nextInt();
            gF = scanner.nextInt();
            availableFood = scanner.nextInt();
            p = new int[availableFood];
            c = new int[availableFood];
            f = new int[availableFood];

            minP = 1001;
            minC = 1001;
            minF = 1001;
            for (int j = 0; j < availableFood; j++) {
                p[j] = scanner.nextInt();
                minP = Math.min(minP, p[j]);
                c[j] = scanner.nextInt();
                minC = Math.min(minC, c[j]);
                f[j] = scanner.nextInt();
                minF = Math.min(minF, f[j]);
            }
            valid = true;
            if (gP < minP || gC < minC || gF < minF) {
                valid = false;
            } else {
                if (!check(p, gP, c, gC, f, gF)) {
                    valid = false;
                }
            }

            System.out.println("case #" + i + ": " + (valid ? "yes" : "no"));
        }
    }

    private static boolean check(int[] a, int targetP, int[] c, int targetC, int[] f, int targetF) {
        return check(a, targetP, c, targetC, f, targetF, 0);
    }

    private static boolean check(int[] p, int targetP, int[] c, int targetC, int[] f, int targetF, int position) {
        if (targetP == 0 && targetC == 0 && targetF == 0) {
            return true;
        }

        int length = p.length;
        if (position >= length) {
            return targetP == 0 && targetC == 0 && targetF == 0;
        }


        boolean valid = false;
        for (int i = position; i < length; i++) {
            if (targetP - p[i] == 0 && targetC - c[i] == 0 && targetF - f[i] == 0) {
                return true;
            } else if (targetP - p[i] > 0 && targetC - c[i] > 0 && targetF - f[i] > 0) {
                valid |= check(p, targetP - p[i],
                        c, targetC - c[i],
                        f, targetF - f[i],
                        i + 1);
            }
        }

        return valid;
    }

}

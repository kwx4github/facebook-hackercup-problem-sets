//package cup.hacker.fb;

import java.util.List;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class NewYearResolution {
	private static BufferedReader br;
	private static PrintWriter pw;
	
	static class Food {
		private int[] nutris = new int[3];
		
		Food(int p, int c, int f) {
			nutris[0] = p;
			nutris[1] = c;
			nutris[2] = f;
		}
		
		public int[] getNutris() {
			return this.nutris;
		}
		
		@Override
		public String toString() {
			return "[" + nutris[0] + ", " + nutris[1] + ", " + nutris[2] + "]";
		}
	}
	
	public static int[] sumFoods(Set<Food> set) {
		int P = 0, C = 0, F = 0;
		
		for (Food f : set) {
			P += f.getNutris()[0];
			C += f.getNutris()[1];
			F += f.getNutris()[2];
		}
		
		int[] sum = {P, C, F};
		
		return sum;
	}
	
	public static <T> Set<Set<T>> powerSet(Set<T> originalSet) {
	    Set<Set<T>> sets = new HashSet<Set<T>>();
	    if (originalSet.isEmpty()) {
	    	sets.add(new HashSet<T>());
	    	return sets;
	    }
	    List<T> list = new ArrayList<T>(originalSet);
	    T head = list.get(0);
	    Set<T> rest = new HashSet<T>(list.subList(1, list.size())); 
	    for (Set<T> set : powerSet(rest)) {
	    	Set<T> newSet = new HashSet<T>();
	    	newSet.add(head);
	    	newSet.addAll(set);
	    	sets.add(newSet);
	    	sets.add(set);
	    }		
	    return sets;
	}
	
	public static void main(String[] args) throws IOException {
		br = new BufferedReader(new InputStreamReader(new FileInputStream("input.txt")));
		pw = new PrintWriter(new FileOutputStream("output.txt"));
		
		final int MAX_NUM_CASE = Integer.parseInt(br.readLine());
		int i = 0;
		
		while (i < MAX_NUM_CASE) {
			String FLAG = "no";
			i++;
			pw.print("Case #" + i + ": ");
			
			String[] wish = br.readLine().split(" ");
			Food desired = new Food(Integer.parseInt(wish[0]), 
					Integer.parseInt(wish[1]), Integer.parseInt(wish[2]));
			
			int maxChoices = Integer.parseInt(br.readLine());
			Set<Food> choices = new HashSet<Food>();
			
			for (int j = 0; j < maxChoices; j++) {
				String[] choice = br.readLine().split(" ");
				Food f = new Food(Integer.parseInt(choice[0]), 
					Integer.parseInt(choice[1]), Integer.parseInt(choice[2]));
				choices.add(f);
			}
			
			Set<Set<Food>> allPossibleChoices = powerSet(choices);
			
			for (Set<Food> s : allPossibleChoices) {
				if (!s.isEmpty() && Arrays.equals(desired.getNutris(), sumFoods(s))) {
					FLAG = "yes";
					break;
				}
			}	
			pw.print(FLAG);
			
			if (i != MAX_NUM_CASE) pw.println();
		}

		pw.close();
	}
}

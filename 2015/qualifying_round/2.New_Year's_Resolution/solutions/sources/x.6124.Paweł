#include <iostream>
#include <set>
#include <vector>
#include <tuple>

using namespace std;

struct s {
	int p;
	int c;
	int f;

	s(int pp, int cc, int ff) {
		p = pp;
		c = cc;
		f = ff;
	}

	bool operator<(const s &rhs) const {
		return tie(p, c, f) < tie(rhs.p, rhs.c, rhs.f);
	}
};

int prot, carbs, fat;
vector<multiset<s> > results;
vector<s> all;

void solve_rec(vector<s> mall, multiset<s> used, int sum, int lookingfor) {
	if (sum == lookingfor) {
		results.push_back(used);
		return;
	}

	if (sum > lookingfor)
		return;
	
	for (int i = 0; i < mall.size(); ++i) {
		s curs = mall[i];
		int cur;
		if (lookingfor == prot) {
			cur = curs.p;
		} else if (lookingfor == carbs) {
			cur = curs.c;
		} else {
			cur = curs.f;
		}
		used.insert(curs);
		vector<s> sub(mall.begin() + i + 1, mall.end());
		solve_rec(sub, used, sum + cur, lookingfor);
	}
}

vector<multiset<s> > intersection(vector<multiset<s> > &v1, vector<multiset<s> > &v2) {
	vector<multiset<s> > res;
	sort(v1.begin(), v1.end());
	sort(v2.begin(), v2.end());

	set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), back_inserter(res));

	return res;
}

vector<multiset<s> >solve (int what) {
	multiset<s> m;
	solve_rec(all, m, 0, what);
	auto res = results;
	results.clear();
	return res;
}

bool solve() {
	auto protres = solve(prot);
	auto carbsres = solve(carbs);
	auto fatres = solve(fat);
	vector<multiset<s> > a = intersection(protres, carbsres);
	vector<multiset<s> > b = intersection(a, fatres);	
	return b.size() > 0;
}

int main() {
	int t;
	cin >> t;
	int counter = 0;
	while (t--) {
		all.clear();
		results.clear();
		cin >> prot >> carbs >> fat;
		int n;
		cin >> n;
		while (n--) {
			int pp, cc, ff;
			cin >> pp >> cc >> ff;
			s cur(pp, cc, ff);		
			all.push_back(cur);
		}
		cout << "Case #" << ++counter << ": " << (solve() ? "yes" : "no") << endl;
	}
}

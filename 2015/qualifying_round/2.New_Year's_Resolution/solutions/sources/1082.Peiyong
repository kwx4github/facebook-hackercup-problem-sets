#define PRETEST
#include <iostream>
#include <stdio.h>
#include <string>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#include <stdlib.h>

using namespace std;

const int INF = 0x7fffffff;
const int BIG = 0x4f4f4f4f;

struct macr {
  int p, c, f;
  macr() {}
  macr(int _p, int _c, int _f) {
    p = _p;
    c = _c;
    f = _f;
  }
};

int gp, gc, gf;
int n;
vector<macr> a;

bool dfs(int k, int p, int c, int f) {
  if (p > gp || c > gc || f > gf) {
    return false;
  }
  if (p == gp && c == gc && f == gf) {
    return true;
  }
  if (k == n) {
    return false;
  }
  if (dfs(k + 1, p + a[k].p, c + a[k].c, f + a[k].f)) {
    return true;
  }
  if (dfs(k + 1, p, c, f)) {
    return true;
  }
  return false;
}

int main() {
#ifdef PRETEST
  freopen("b.txt", "r", stdin);
  freopen("out.txt", "w+", stdout);
#endif
  int T;
  scanf("%d", &T);
  for (int counter = 1; counter <= T; ++counter) {
    scanf("%d%d%d", &gp, &gc, &gf);
    scanf("%d", &n);
    a.clear();
    int tmpp = 0, tmpc = 0, tmpf = 0;
    for (int i = 0; i < n; ++i) {
      int p, c, f;
      scanf("%d%d%d", &p, &c, &f);
      tmpp += p;
      tmpc += c;
      tmpf += f;
      a.push_back(macr(p, c, f));
    }
    printf("Case #%d: ", counter);
    if (tmpp < gp || tmpc < gc || tmpf < gf) {
      printf("no\n");
      continue;
    }
    if (dfs(0, 0, 0, 0)) {
      printf("yes\n");
      continue;
    }
    printf("no\n");
  }
  return 0;
}

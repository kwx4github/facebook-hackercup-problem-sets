/**
 * 
 */
package facebook.hacker.quali2015;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author Kisna
 * 
 */
public class NewYearsResolution {
	private static boolean SUBSET = false;
	public static void main(String[] args) {
		BufferedReader br = null;
		try {
			FileWriter fstream = new FileWriter("newyearsresolution_output.txt");
			BufferedWriter out = new BufferedWriter(fstream);

			/* Start input section */
			br = new BufferedReader(new FileReader("new_years_resolution.txt"));
			int T = Integer.parseInt(br.readLine());

			for (int i = 1; i <= T; i++) {
				SUBSET = false;
				String[] temp = br.readLine().split(" ");
				int required[] = new int[3];
				for (int j = 0; j < required.length; j++) {
					required[j] = Integer.parseInt(temp[j]);
				}
				int N = Integer.parseInt(br.readLine());
				List<ArrayList<Integer>> nutrients = new ArrayList<ArrayList<Integer>>(3);
				nutrients.add(new ArrayList<Integer>(N));
				nutrients.add(new ArrayList<Integer>(N));
				nutrients.add(new ArrayList<Integer>(N));
				for (int j = 0; j < N; j++) {
					temp = br.readLine().split(" ");
					for (int j2 = 0; j2 < 3; j2++) {
						nutrients.get(j2).add(j, Integer.parseInt(temp[j2]));
					}
				}
				/* End input section */
				
				// Find if sum exists
				int isSubsetSum = 0;
				for (int j = 0; j < nutrients.size(); j++) {
					if (isSubsetSum(nutrients.get(j), required[j])) {
						isSubsetSum++;
					} else {
						break;
					}
				}

				// find the subsets
				if (3 == isSubsetSum) {
					// find the subsets of first array
					// when the subset is found,
					// check if a subset exists for same index on the other 2 arrays
					List<ArrayList<Integer>> partial = new ArrayList<ArrayList<Integer>>();
					partial.add(new ArrayList<Integer>(N));
					partial.add(new ArrayList<Integer>(N));
					partial.add(new ArrayList<Integer>(N));
					if(true == subsetsExist(nutrients, required, partial)) {
						out.write("Case #" + i + ": " + "yes");	
					}
					else {
						out.write("Case #" + i + ": " + "no");	
					}
				} else {
					out.write("Case #" + i + ": " + "no");
				}
				out.write("\n");
			}
			out.close();
		} catch (IOException e) {
		} finally {
			try {
				if (br != null)
					br.close();
			} catch (IOException ex) {
			}
		}
	}

	public static boolean isSubsetSum(ArrayList<Integer> arr, int sum) {
		boolean[][] map = new boolean[sum + 1][arr.size() + 1];
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				if (0 == i) {
					map[i][j] = true;
				} else if (0 == j) {
					map[i][j] = false;
				} else {
					map[i][j] = map[i][j-1];
					if(i >= arr.get(j - 1)) {
						map[i][j] = map[i][j] || map[i - arr.get(j - 1)][j - 1];
					}
				}
			}
		}
		return map[sum][arr.size()];
	}

	public static boolean subsetsExist(List<ArrayList<Integer>> nutrients, int[] required, List<ArrayList<Integer>> partial) {
		int[] s = new int[3];
		Arrays.fill(s, 0);
		for (int i = 0; i < s.length; i++) {
			for (int x : partial.get(i))
				s[i] += x;
		}
		
		int subsetExists = 0;
		for (int i = 0; i < s.length; i++) {
			if (s[i] == required[i]) {				
				subsetExists++;
			} else if(s[i] > required[i]) {
				return false;
			}
		}
		
		if(3 == subsetExists) {
			SUBSET = true;
			return true;
		}

		for (int i = 0; i < nutrients.get(0).size(); i++) {
			List<ArrayList<Integer>> remaining = new ArrayList<ArrayList<Integer>>();
			remaining.add(new ArrayList<Integer>());
			remaining.add(new ArrayList<Integer>());
			remaining.add(new ArrayList<Integer>());
			List<ArrayList<Integer>> partial_rec = new ArrayList<ArrayList<Integer>>();
			for (int j = 0; j < required.length; j++) {
				for (int k = i + 1; k < nutrients.get(0).size(); k++){
					remaining.get(j).add(nutrients.get(j).get(k));	
				}				
				partial_rec.add(new ArrayList<Integer>(partial.get(j)));
				int n = nutrients.get(j).get(i);
				partial_rec.get(j).add(n);
			}
			if(true == subsetsExist(remaining, required, partial_rec)){
				SUBSET = true;
				return true;
			}
		}
		
		return SUBSET;
	}
}

#include<iostream>
#include<fstream>
#include<sstream>
#include<list>
#include<queue>
#include<deque>
#include<stack>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<ctype.h>
#include<string>
#include<iterator>
#include<map>
#include<set>
#define PI 2*acos(0)
#define inf 0x7fffffff
#define ppb push_back
#define ppf push_front
#define clr clear()
#define emp empty()
#define ll long long
#define ull unsigned long long
#define ssi(x) scanf("%d",&x)
#define ssd(x) scanf("%lf",&x)
#define ssc(x) scanf("%c",&x)
#define sss(x) scanf("%s",&x)
#define ssii(x,y) scanf("%d %d",&x,&y)
#define ssdd(x,y) scanf("%lf %lf",&x,&y)
#define sscc(x,y) scanf("%c %c",&x,&y)
#define ssss(x,y) scanf("%s %s",&x,&y)
#define eol printf("\n")
#define feol fprintf(f,"\n")
#define ssp printf(" ")
#define ggt getchar()
#define ppt putchar('.')
using namespace std;
struct S{int a,b,c;};
int CMP(S q,S w){return(q.a==w.a && q.b==w.b && q.c==w.c);}
S IN(int i,int j,int k){S z;z.a=i;z.b=j;z.c=k;return z;}
S ADD(S i,S j){S z=IN(i.a+j.a,i.b+j.b,i.c+j.c);return z;}

main()
{
    FILE *F,*G;
    F=fopen("new_years_resolution.txt","r");
    G=fopen("new_years_resolution2.txt","w");
    int cas,n;
    int ccas=0;
    fscanf(F,"%d",&cas);
    while(ccas++!=cas){
    S q;
    int i,j,k,l;
    fscanf(F,"%d %d %d",&i,&j,&k);
    q=IN(i,j,k);
    fscanf(F,"%d",&n);
    vector<S> v(n,IN(0,0,0));
    vector<S> u(1,IN(0,0,0));
    for(l=0;l<n;l++)
    {fscanf(F,"%d %d %d",&i,&j,&k);
     v[l]=IN(i,j,k);}


    bool match=0;
//    if(CMP(u[0],q))match=1;
//    if(!match)
    for(j=0;j<v.size();j++)
    for(i=0,k=u.size();i<k;i++){
    u.ppb(ADD(u[i],v[j]));
    if(CMP(u.back(),q)){match=1;break;}}



//    for(i=0;i<u.size();i++)
//    if(CMP(u[i],q))
//    break;
//    if(i==u.size())
    if(!match)
    fprintf(G,"Case #%d: no\n",ccas);
    else
    fprintf(G,"Case #%d: yes\n",ccas);}

    return 0;
}

//Case #1: yes
//Case #2: no



//5
//100 100 100
//1
//100 100 100
//100 100 100
//3
//10 10 40
//10 30 10
//10 60 50
//100 100 100
//5
//40 70 30
//30 10 40
//20 20 50
//10 50 90
//40 10 20
//292 264 512
//20
//909 302 261
//705 597 823
//291 51 126
//28 697 57
//593 31 826
//311 256 57
//292 14 47
//29 730 716
//12 529 146
//768 16 439
//37 472 15
//350 192 34
//163 468 238
//69 173 10
//203 72 690
//424 875 213
//223 593 292
//151 46 10
//88 90 16
//773 653 711
//991 827 352
//20
//29 560 929
//139 681 102
//144 853 10
//84 729 80
//218 20 67
//140 80 901
//428 20 500
//520 970 128
//422 419 30
//413 101 192
//467 448 501
//32 939 684
//34 20 38
//251 317 132
//588 437 10
//648 21 79
//391 25 14
//499 22 24
//854 77 361
//405 25 20


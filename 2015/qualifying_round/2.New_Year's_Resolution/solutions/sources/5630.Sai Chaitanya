#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

bool check (int tp, int tc, int tf, int p[], int c[], int f[], int kp, int kc, int kf, int i);
bool findSolution(int tp, int tc, int tf, int p[], int c[], int f[], int kp, int kc, int kf, int i, int n);
int main(){

	int t;
	scanf("%d", &t);
	int caser = 1;
	while(t-->0){
		int tp, tc, tf;
		int n;
		scanf("%d%d%d%d",&tp,&tc,&tf,&n);
		int p[20],c[20],f[20];
		int i;
		for(i=0;i<n;i++){
			scanf("%d%d%d",&p[i],&c[i], &f[i]);
		}
		int kp, kc, kf;
		
		printf("Case #%d: ",caser);
		caser++;
		if(findSolution(tp,tc,tf,p,c,f,kp,kc,kf,0, n) == true) printf("yes\n");
		else printf("no\n");
	}
}

bool findSolution(int tp, int tc, int tf, int p[], int c[], int f[], int kp, int kc, int kf, int i, int n){
	if(i == n+1){
		if(kp == tp && kc == tc && kf == tf) return true;
		else return false;
	}

	if(check(tp,tc,tf,p,c,f, kp,kc,kf,i)){
		//call next
		kp += p[i];
		kc += c[i];
		kf += f[i];
		if(findSolution(tp,tc,tf, p,c,f,kp,kc,kf,i+1,n)){
			return true;
		}
		else{
			//back track
			kp -= p[i];
			kc -= c[i];
			kf -= f[i];
		}
	}
	if(findSolution(tp,tc,tf,p,c,f,kp,kc,kf,i+1,n)) return true;
	else return false;
}
bool check (int tp, int tc, int tf, int p[], int c[], int f[], int kp, int kc, int kf, int i){
	if(tp< kp+p[i] || tc< kc+c[i] || tf<kf+f[i]) return false;
	return true;
}

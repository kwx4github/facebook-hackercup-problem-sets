#include <cstdio>
#include <vector>

using namespace std;

struct Food {
  int p, c, f;
};

bool canEat(const Food& desired, const vector<Food>& list) {
  int N = list.size();

  Food sum;

  for (int i = 0; i < (1 << N); ++i) {
    sum.p = sum.c = sum.f = 0;

    for (int k = 0; k < N; k++) {
      if (i & (1 << k)) {
        // Eat
        sum.p += list[k].p;
        sum.c += list[k].c;
        sum.f += list[k].f;
      }
    }

    if (sum.p == desired.p && sum.c == desired.c && sum.f == desired.f) {
      return true;
    }
  }

  return false;
}

int main(void) {
  int T;
  int caseId;
  int N;
  Food desired;
  Food food;
  vector<Food> list;

  scanf("%d", &T);
  caseId = 1;
  while (caseId <= T) {
    scanf("%d %d %d", &desired.p, &desired.c, &desired.f);

    scanf("%d", &N);

    list.clear();
    for (int i = 0; i < N; ++i) {
      scanf("%d %d %d", &food.p, &food.c, &food.f);
      list.push_back(food);
    }

    printf("Case #%d: %s\n",
      caseId,
      canEat(desired, list) ? "yes" : "no");

    caseId++;
  }
  return 0;
}

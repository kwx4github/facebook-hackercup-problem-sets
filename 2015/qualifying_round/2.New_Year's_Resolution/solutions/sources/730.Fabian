import java.io.File;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

/**
 * New Years Resolution entry for Facebook Hacker Cup - Janurary 2015
 * Combined into 1 file for s and g.
 * 
 * Written to work with Java SE 8 update 25.
 * 
 * @author Fabian Thielisch (fthielisch@gmail.com)
 */
public class NewYearsResolution {

	public static void main(String[] args) throws Exception {
		
		String inputFileName = "input.txt";
		String outputFileName = "output.txt";
		
		if (args.length > 0) {
			inputFileName = args[0];
			if (args.length > 1) {
				outputFileName = args[1];
			}
		}
		
		try (Scanner s = new Scanner(new File(inputFileName))) {
			try (PrintStream ps = new PrintStream(outputFileName)) {
				// I hate things indented so much :(
				new NewYearsResolution().run(s, ps);
			}
		}
	}
	
	private void run(Scanner s, PrintStream ps) {
		int totalTestCases = s.nextInt();
		
		TestCaseEvaluator eval = new TestCaseEvaluator();
		for (int i = 0; i < totalTestCases; i++) {
			TestCase tc = parseTestCase(s);
			
			if (eval.isPossible(tc)) {
				ps.println("Case #" + (i + 1) + ": yes");
			} else {
				ps.println("Case #" + (i + 1) + ": no");
			}
		}
	}

	private TestCase parseTestCase(Scanner s) {
		TestCaseBuilder b = new TestCaseBuilder();
		b.BuildGoal(new NutrientInformation(s.nextInt(), s.nextInt(), s.nextInt()));

		int totalFoods = s.nextInt();

		for (int i = 0; i < totalFoods; i++) {
			NutrientInformation nutrientInformation = new NutrientInformation(s.nextInt(), s.nextInt(), s.nextInt());

			Food food = new Food(nutrientInformation);

			b.BuildFoodChoice(food);
		}

		return b.Build();
	}
	
	// ---------------------------------------------------------------------------
	// -------------------SUPPORTING CLASSES BELOW--------------------------------
	// ---------------------------------------------------------------------------

	public class Food {

		private NutrientInformation nutrients;
		
		public Food(NutrientInformation n) {
			nutrients = n;
		}
		
		public NutrientInformation getNutrientInformation() {
			return nutrients;
		}
	}

	public class NutrientInformation {

		private int protein;
		private int carbohydrates;
		private int fat;
		
		public NutrientInformation(int p, int c, int f) {
			protein = p;
			carbohydrates = c;
			fat = f;
		}

		public NutrientInformation combineWith(NutrientInformation other) {
			return new NutrientInformation(protein + other.protein, carbohydrates + other.carbohydrates, fat + other.fat);
		}

		public int getProtein() {
			return protein;
		}

		public int getCarbohydrates() {
			return carbohydrates;
		}

		public int getFat() {
			return fat;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + carbohydrates;
			result = prime * result + fat;
			result = prime * result + protein;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj) {
				return true;
			}
			if (obj == null) {
				return false;
			}
			if (getClass() != obj.getClass()) {
				return false;
			}
			
			NutrientInformation other = (NutrientInformation) obj;
			return equals(other);
		}
		
		public boolean equals(NutrientInformation other) {
			if (carbohydrates != other.carbohydrates) {
				return false;
			}
			if (fat != other.fat) {
				return false;
			}
			if (protein != other.protein) {
				return false;
			}
			return true;
		}
		
		public boolean exceeds(NutrientInformation other) {
			if (carbohydrates > other.carbohydrates) {
				return true;
			}
			if (fat > other.fat) {
				return true;
			}
			if (protein > other.protein) {
				return true;
			}
			return false;
		}
	}

	public class TestCase {

		private NutrientInformation totalNutrientsGoal;
		private List<Food> possibleFoodChoices;
		
		public TestCase(NutrientInformation totalNutrientsGoal, List<Food> foodChoices) {
			this.totalNutrientsGoal = totalNutrientsGoal;
			possibleFoodChoices = foodChoices;
		}

		public NutrientInformation getTotalNutrientsGoal() {
			return totalNutrientsGoal;
		}

		public List<Food> getPossibleFoodChoices() {
			return possibleFoodChoices;
		}	
	}

	public class TestCaseBuilder {

		private NutrientInformation goalNutrientInformation;
		private List<Food> foodChoices;
		
		public TestCaseBuilder() {
			goalNutrientInformation = null;
			foodChoices = new LinkedList<Food>();
		}
		
		public void BuildGoal(NutrientInformation goalNutrientInformation) {
			this.goalNutrientInformation = goalNutrientInformation;
		}
		
		public void BuildFoodChoice(Food f) {
			foodChoices.add(f);
		}
		
		public TestCase Build() {
			return new TestCase(goalNutrientInformation, foodChoices);
		}
	}

	public class TestCaseEvaluator {

		public boolean isPossible(TestCase c) {
			
			NutrientInformation goal = c.getTotalNutrientsGoal();		
			List<Food> allFoods = c.getPossibleFoodChoices();
			
			List<TestCaseScenario> currentScenarios = new LinkedList<TestCaseScenario>();
			
			TestCaseScenario defaultScenario = new TestCaseScenario();		
			if (defaultScenario.getTotals().equals(goal)) {
				return true;
			}		
			currentScenarios.add(defaultScenario);

			
			for(Food f : allFoods) {
				List<TestCaseScenario> newScenarios = new LinkedList<TestCaseScenario>();
				
				for(TestCaseScenario scenario : currentScenarios) {
					TestCaseScenario newScenario = scenario.addFood(f);
					
					if (newScenario.getTotals().equals(goal)) {
						return true;
					}
					if (newScenario.getTotals().exceeds(goal)) {
						continue;
					}
					
					newScenarios.add(newScenario);
				}
				
				currentScenarios.addAll(newScenarios);
			}
			
			return false;
		}
	}

	public class TestCaseScenario {

		private NutrientInformation totalsThusFar;
		
		public TestCaseScenario() {
			this.totalsThusFar = new NutrientInformation(0,0,0);
		}
		
		private TestCaseScenario(NutrientInformation totalsThusFar) {
			this.totalsThusFar = totalsThusFar;
		}
		
		public TestCaseScenario addFood(Food f) {
			NutrientInformation newTotals = f.getNutrientInformation().combineWith(totalsThusFar);
			
			return new TestCaseScenario(newTotals);
		}

		public NutrientInformation getTotals() {
			return totalsThusFar;
		}
	}
}
#!/usr/bin/env python

def fromLine(line):
	parts = line.split()
	return Food(int(parts[0]), int(parts[1]), int(parts[2]))

class Food:
	prot = 0
	carb = 0
	fat = 0

	def __init__(self, p, c, f):
		self.prot = p
		self.carb = c
		self.fat = f

	def __str__(self):
		return "(%d, %d, %d)" % (self.prot, self.carb, self.fat)

	def subtract(self, other):
		return Food(self.prot - other.prot, self.carb - other.carb, self.fat - other.fat)
		
	def greater(self, other):
		return (self.prot < other.prot) and (self.carb < other.carb) and (self.fat < other.fat)
		
	def __eq__(self, other):
		return (self.prot == other.prot) and (self.carb == other.carb) and (self.fat == other.fat)
		
def isSubsetSum(subset, n, sum):

	if sum == Food(0, 0, 0):
		return True
	if (n == 0 and sum != Food(0, 0, 0)):
		return False
 
	if (sum.greater(subset[n - 1])):
		return isSubsetSum(subset, n - 1, sum)

	return isSubsetSum(subset, n - 1, sum) or isSubsetSum(subset, n - 1, sum.subtract(subset[n - 1]))


if __name__ == "__main__":
	
	T = int(raw_input().strip())
	
	fout = open("newyears.out.txt", "wb")
	
	for t in xrange(T):
		
		line = raw_input()
		target = fromLine(line)
		
		#print "Target:", target
		
		N = int(raw_input().strip())
		
		foods = []
		for n in xrange(N):
			line = raw_input()
			foods.append(fromLine(line))
		
		answer = "no"
		if (isSubsetSum(foods, len(foods), target)):
			answer = "yes"
		
		fout.write("Case #%d: %s\n" % ((t + 1), answer))
	
	fout.close()

import java.io.*;
import java.math.*;
import java.util.*;

public class NewYearsResolution {
	// public static int dp[][][] = new int[22][1005][1005];
	public static int[] pp = new int[22];
	public static int[] cc = new int[22];
	public static int[] ff = new int[22];
	public static int n;
	public static boolean ok = false;

	public static boolean solve(int index, int p, int c, int f) {
		if (ok) {
			return true;
		}
		if (index == n) {
			if (p == 0 && c == 0 && f == 0) {
				ok = true;
				return true;
			}
			return false;
		}

		boolean choose1 = false;

		if (p - pp[index] >= 0 && c - cc[index] >= 0 && f - ff[index] >= 0) {
			choose1 = solve(index + 1, p - pp[index], c - cc[index], f
					- ff[index]);

		}
		boolean choose2 = solve(index + 1, p, c, f);

		return choose1 | choose2;

	}

	// public static int solve(int index, int p, int c, int f) {
	// if (ok) {
	// return -1;
	// }
	// if (index == n) {
	// if (p == 0 && c == 0 && f == 0) {
	// ok = true;
	// return 1;
	// }
	// return -1;
	// }
	//		
	// // if (dp[index][p][c][f] != Integer.MIN_VALUE) {
	// // return dp[index][p][c][f];
	// // }
	//		
	// int choose1 = -1;
	//		
	// if (p - pp[index] >= 0 && c - cc[index] >= 0 && f - ff[index] >= 0) {
	// choose1 = solve(index + 1, p - pp[index], c - cc[index], f
	// - ff[index]);
	//			
	// }
	// int choose2 = solve(index + 1, p, c, f);
	//		
	// return Math.max(choose1, choose2);
	// // return dp[index][p][c][f] = Math.max(choose1, choose2);
	//		
	// }

	public static void main(String[] args) throws IOException {
		// ----------------------------------------------------
		start();
		// ----------------------------------------------------
		int t = nextInt();

		for (int b = 1; b <= t; b++) {
			int p = nextInt();
			int c = nextInt();
			int f = nextInt();

			n = nextInt();

			for (int i = 0; i < n; i++) {
				pp[i] = nextInt();
				cc[i] = nextInt();
				ff[i] = nextInt();
			}

			// for (int i = 0; i < n + 2; i++) {
			// for (int j = 0; j < 22; j++) {
			// for (int k = 0; k < 22; k++) {
			// Arrays.fill(dp[i][j][k], Integer.MIN_VALUE);
			// }
			// }
			// }
			//
			ok = false;

			boolean x = solve(0, p, c, f);

			if (ok || x) {

				out.println("Case #" + b + ": yes");
				System.out.println("Case #" + b + ": yes");
			} else {
				out.println("Case #" + b + ": no");
				System.out.println("Case #" + b + ": no");
			}

		}

		// ----------------------------------------------------
		end();
		// ----------------------------------------------------
	}

	static BufferedReader br;
	static PrintWriter out;
	static StringTokenizer sc;

	static void start() throws IOException {
		// br = new BufferedReader(new InputStreamReader(System.in));
		br = new BufferedReader(new FileReader("input.txt"));
		// out = new PrintWriter(new OutputStreamWriter(System.out));
		out = new PrintWriter(new FileWriter("output.txt"));
		sc = new StringTokenizer("");
	}

	static void end() throws IOException {
		br.close();
		out.close();
	}

	static String nextString() throws IOException {
		while (!sc.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null) {
				return null;
			}
			sc = new StringTokenizer(s.trim());
		}
		return sc.nextToken();
	}

	static String nextLine() throws IOException {
		String s = br.readLine();
		if (s == null) {
			return null;
		}
		return s;
	}

	static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	static double nextDouble() throws IOException {
		return Double.parseDouble(nextString());
	}

	BigInteger nextBigInteger() throws IOException {
		return new BigInteger(nextString());
	}

	static int[] nextIntArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	static long[] nextLongArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}

	static char[] nextCharArray() throws IOException {
		return nextString().toCharArray();
	}

	static String[] nextStringArray(int n) throws IOException {
		String[] a = new String[n];
		for (int i = 0; i < n; i++)
			a[i] = nextString();
		return a;
	}

}
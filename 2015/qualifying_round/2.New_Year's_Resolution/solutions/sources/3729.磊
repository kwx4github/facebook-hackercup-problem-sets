#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <algorithm>
using namespace std;
#define root 1,n,1
#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
#define lr rt<<1
#define rr rt<<1|1
typedef long long LL;
typedef pair<int,int>pii;
#define X first
#define Y second
const int oo = 1e9+7;
const double PI = acos(-1.0);
const double eps = 1e-6 ;
const int N = 2001 ;
int n , A , B , C ;
bool tag ;
struct node {
    int a , b , c ;
    bool operator < ( const node &A ) const {
        if( a != A.a ) return a < A.a ;
        else if( b != A.b ) return b < A.b;
        else return c < A.c ;
    }
}e[N];

void dfs( int i , int aa , int bb , int cc ) {
    if( tag || i > n || aa > A || bb > B || cc > C ) return ;
    if( aa + e[i].a == A && bb + e[i].b == B && cc + e[i].c == C ) { tag = true ; return ; }
    dfs( i + 1 , aa , bb , cc );
    if( tag ) return ;
    dfs( i + 1 , aa + e[i].a , bb + e[i].b , cc + e[i].c);
}

void Run() {
    tag = 0 ;
    cin >> A >> B >> C >> n ;
    for( int i = 1 ; i <= n ; ++i ) cin >> e[i].a >> e[i].b >> e[i].c ;
    sort( e+1 ,e+n+1 );
    dfs( 0 , 0 , 0 , 0 );
    if(tag) cout << "yes" <<endl;
    else cout <<"no" << endl ;
}

int main()
{
    #ifdef LOCAL
        freopen("in.txt","r",stdin);
        freopen("out.txt","w",stdout);
    #endif // LOCAL
    ios::sync_with_stdio(false);
    int  _ , cas = 1 ; cin >> _ ;
    while( _ -- ) {
        cout << "Case #"<<cas++<<": "; Run();
    }
}

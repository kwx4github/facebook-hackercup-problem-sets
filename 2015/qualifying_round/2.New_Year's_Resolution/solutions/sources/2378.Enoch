import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class NewYears {
    public static void main(String[] args) {
        BufferedReader br = null;
        PrintWriter out = null;
        int T;
        try {
            br = new BufferedReader(new FileReader("new_years_resolution.txt"));
            out
                    = new PrintWriter(new BufferedWriter(new FileWriter("new_years_resolution_output.txt")));

            T = Integer.valueOf(br.readLine());
            for (int i = 0; i < T; i++) {

                String goalLine = br.readLine();
                Nutrients goal = readNutrients(goalLine);

                int N = Integer.valueOf(br.readLine());
                List<Nutrients> foods = new ArrayList<Nutrients>();
                for (int j = 0; j < N; j++) {
                    String line = br.readLine();
                    foods.add(readNutrients(line));
                }

                out.println("Case #" + (i + 1) + ": " + (possible(goal, foods, 0,new boolean[N]) ? "yes" : "no"));
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            out.close();
        }


    }

    private static Nutrients readNutrients(String line) {
        String[] stringArray = line.split(" ");
        int P = Integer.valueOf(stringArray[0]);
        int C = Integer.valueOf(stringArray[1]);
        int F = Integer.valueOf(stringArray[2]);

        return new Nutrients(P, C, F);
    }

    private static boolean possible(Nutrients goal, List<Nutrients> foods, int foodsStartIndex, boolean[] solution) {
        if (!goal.nonnegative()) {
            return false;
        }

        if (goal.zero()) {
            System.out.println(solution);
            return true;
        }

        if (foodsStartIndex > foods.size() - 1) {
            return false;
        }

        int newStart = foodsStartIndex + 1;
        Nutrients loweredGoal = goal.minus(foods.get(foodsStartIndex));
        boolean[] solution1 = new boolean[solution.length];
        boolean[] solution2 = new boolean[solution.length];

        System.arraycopy(solution,0,solution1,0,solution.length);
        System.arraycopy(solution,0,solution2,0,solution.length);
        solution1[foodsStartIndex] = true;
        solution2[foodsStartIndex]=false;

        return (possible(loweredGoal, foods, newStart,solution1) || possible(goal, foods, newStart,solution2));
    }

}


class Nutrients {
    final int P;
    final int C;
    final int F;

    public Nutrients(int P, int C, int F) {
        this.P = P;
        this.C = C;
        this.F = F;
    }


    public boolean equals(Object o) {
        if (!(o instanceof Nutrients)) {
            return false;
        }
        Nutrients nutrients = (Nutrients) o;
        return ((nutrients.P == this.P) && (nutrients.C == this.C) && (nutrients.F == this.F));
    }

    public Nutrients minus(Nutrients that) {
        return new Nutrients(this.P - that.P, this.C - that.C, this.F - that.F);
    }

    public boolean zero() {
        return ((this.P == 0) && (this.C == 0) && (this.F == 0));
    }

    public boolean nonnegative() {
        return ((this.P >= 0) && (this.C >= 0) && (this.F >= 0));
    }

}

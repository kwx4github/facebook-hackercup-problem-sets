
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;

/**
 *
 * @author Uday Kandpal
 */
public class Main {

    static int gp, gc, gf;

    static class Triplets implements Comparable<Triplets>, Cloneable {

        int p;
        int c;
        int f;

        public Triplets(int _p, int _c, int _f) {
            p = _p;
            c = _c;
            f = _f;
        }

        public Triplets clone() {
            return new Triplets(p, c, f);
        }

        @Override
        public int compareTo(Triplets o) {
            if (p < o.p) {
                return -1;
            } else if (p == o.p) {
                if (c < o.c) {
                    return -1;
                } else if (c == o.c) {
                    if (f < o.f) {
                        return -1;
                    } else if (f == o.f) {
                        return 0;
                    } else {
                        return 1;
                    }
                } else {
                    return 1;
                }
            } else {
                return 1;
            }
        }

        @Override
        public String toString() {
            return "[" + p + ", " + c + ", " + f + "]";
        }
    }
    static ArrayList<Triplets> values = new ArrayList<>();
    static ArrayList<ArrayList<Triplets>> chosen = new ArrayList<>();

    static void getSelectedByP(int capacity) {
        int n = values.size();
        int power = (int) Math.pow(2, n);
        //System.out.println("n : " + n + ", power = " + power);
        for (int i = 0; i < power; i++) {
            ArrayList<Triplets> current = new ArrayList<>();
            int sum = 0;
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    sum += values.get(j).p;
                    //System.out.println(sum);
                    current.add(values.get(j).clone());
                }
            }
            //System.out.println(Integer.toBinaryString(i));
            //System.out.println("Sum_p = " + sum);
            if (capacity == sum) {
                chosen.add((ArrayList<Triplets>) current.clone());
            }
        }
    }

    static void getSelectedByCOrF(int capacity, boolean CORF) {
        ArrayList<ArrayList<Triplets>> copy = (ArrayList<ArrayList<Triplets>>) chosen.clone();
        chosen = new ArrayList<>();
        for (int k = 0; k < copy.size(); k++) {
            int n = copy.get(k).size();
            int sum = 0;
            for (Triplets triplets : copy.get(k)) {
                sum += (CORF ? triplets.c : triplets.f);
                if (sum > capacity) {
                    break;
                }
            }
            if (sum == capacity) {
                chosen.add(copy.get(k));
            }
        }
    }

    static BufferedReader br;
    static BufferedWriter bw;

    public static void main(String[] args) throws java.lang.Exception {
        bw = new BufferedWriter(new FileWriter("new_years_resolution_output.txt"));
        br = new BufferedReader(new FileReader("new_years_resolution.txt"));
        Integer t = Integer.parseInt(br.readLine());
        int caseNo = 1;
        while (t-- > 0) {
            chosen = new ArrayList<>();
            String gpcf[] = br.readLine().trim().split(" ");
            values = new ArrayList<>();
            gp = Integer.parseInt(gpcf[0]);
            gc = Integer.parseInt(gpcf[1]);
            gf = Integer.parseInt(gpcf[2]);
            int n = Integer.parseInt(br.readLine().trim());
            for (int i = 0; i < n; i++) {
                String pcf[] = br.readLine().trim().split(" ");
                Triplets trip = new Triplets(Integer.parseInt(pcf[0]), Integer.parseInt(pcf[1]), Integer.parseInt(pcf[2]));
                values.add(trip);
            }
            Collections.sort(values);
            getSelectedByP(gp);
//            if (caseNo <= 5) {
//                System.out.println(chosen);
//            }
            getSelectedByCOrF(gc, true);
//            if (caseNo <= 5) {
//                System.out.println(chosen);
//            }
            getSelectedByCOrF(gf, false);
//            if (caseNo <= 5) {
//                System.out.println(chosen);
//            }
            // printData(chosen);
            if (chosen.isEmpty()) {
                //System.out.println(chosen);
                printData("Case #" + caseNo + ": no");
            } else {
                printData("Case #" + caseNo + ": yes");
                //printData("combination : "+chosen);
            }
            caseNo++;
        }
        bw.close();
        br.close();
    }

    static void printData(Object s) throws IOException {
        bw.write(s.toString() + "\n");
    }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package hack_qualif_2;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;

/**
 *
 * @author Catalina
 */

class Resolution {
    int gprot;
    int gcarb;
    int gfat;
    int n;
    int[] prot;
    int[] carb;
    int[] fat;


    public Resolution(int gprot, int gcarb, int gfat, int n, int[] prot, int[] carb, int[] fat){
        this.gprot = gprot;
        this.gcarb = gcarb;
        this.gfat = gfat;
        this.n = n;
        this.prot = prot;
        this.carb = carb;
        this.fat = fat;
    }

    public static ArrayList<Resolution> readFromFile() {

        try {
            String strLine;
            FileInputStream in = new FileInputStream("input.txt");
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            ArrayList<Resolution> testCases = new ArrayList<Resolution>();

            //get no of tests
            strLine = br.readLine();
            String temp[] = strLine.split(" ");
            int testCasesNo = Integer.parseInt(temp[0]);
            //System.out.println("testCasesNo = " + testCasesNo);
            for (int testIdx = 1; testIdx <= testCasesNo; testIdx++) {
                strLine = br.readLine();
                temp = strLine.split(" ");
                int gprot = Integer.parseInt(temp[0]);
                int gcarb = Integer.parseInt(temp[1]);
                int gfat = Integer.parseInt(temp[2]);

                strLine = br.readLine();
                int n = Integer.parseInt(strLine);

                int prot[] = new int[n];
                int carb[] = new int[n];
                int fat[] = new int[n];

                for (int i = 0; i < n; i++) {
                    strLine = br.readLine();
                    temp = strLine.split(" ");
                    prot[i] = Integer.parseInt(temp[0]);
                    carb[i] = Integer.parseInt(temp[1]);
                    fat[i] = Integer.parseInt(temp[2]);
                    
                }

                Resolution testCase = new Resolution(gprot, gcarb, gfat, n, prot, carb, fat);
                testCases.add(testCase);

            }
            return testCases;
        } catch (IOException e) {
            System.out.println(e);
        }
        return null;
    }

    public static void writeToFile(ArrayList<String> labels) {
        PrintWriter printWriter = null;
        try {
            printWriter = new PrintWriter("output.txt");
            for (int i = 1; i <= labels.size(); i++) {
                printWriter.print("Case #" + i + ": " + labels.get(i - 1) + "\n");
            }
            printWriter.close();
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } finally {
            printWriter.close();
        }
    }


    private int isPossible(int gprot_left, int gcarb_left, int gfat_left, int pos) {
        //System.out.println("gprot_left = "+ gprot_left + " gcarb_left " + gcarb_left + " gfat_left " + gfat_left);
        if (gprot_left == 0 && gcarb_left == 0 && gfat_left == 0)
            return 1;

        boolean found = false;
        for(int i= pos; i<n && !found; i++) {
            int gprot_left_2 = gprot_left - prot[i];
            int gcarb_left_2 = gcarb_left - carb[i];
            int gfat_left_2 = gfat_left - fat[i];
            if (gprot_left_2 >= 0 && gcarb_left_2 >= 0 && gfat_left_2 >= 0) {
                if (isPossible(gprot_left_2, gcarb_left_2, gfat_left_2, i+1) == 1 )
                    return 1;
            }
        }
        
        return -1;

    }
    public String isPossibleStr(){
        boolean found = false;
        //System.out.println(">>>>> gprot= "+ gprot + " gcarb " + gcarb + " gfat " + gfat);
        for(int i=0; i<n && !found; i++) {
            int gprot_left = gprot - prot[i];
            int gcarb_left = gcarb - carb[i];
            int gfat_left = gfat - fat[i];
            if (gprot_left >= 0 && gcarb_left >= 0 && gfat_left >= 0)
                if(isPossible(gprot_left, gcarb_left, gfat_left, i+1) == 1) {
                    found = true;
                }
        }
        if(found)
            return "yes";

        return "no";

    }
}

public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        ArrayList<Resolution> testCases = Resolution.readFromFile();
        ArrayList<String> results = new ArrayList<String>();
        for (int i = 0; i < testCases.size(); i++) {
            //System.out.println("======================= "+i+" ================================");
            String result = testCases.get(i).isPossibleStr();
            results.add(result);
        }
        Resolution.writeToFile(results);
    }

}

// New_Year's_Resolution.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include <math.h>

using std::string;
using std::vector;
using std::istringstream;
using std::ifstream;
using std::ofstream;

#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))

void getThreeNumbers(const string& line, int* gP, int* gC, int* gF) {
	istringstream is(line);
	is >> *gP >> *gC >> *gF;
}

void getNumber(const string& line, int* num) {
	istringstream is(line);
	is >> *num; 
}

bool singleSumProblem(int mask, int sum, std::vector<int> additors)
{
	for (size_t i = 0; i < additors.size(); ++i) {
		if (CHECK_BIT(mask, i))
			sum -= additors[i];

		if (sum < 0)
			return false;
	}

	if (sum == 0)
		return true;
	return false;
}

bool foodsProblem(int gP, int gC, int gF, const std::vector<int>& gPs, const std::vector<int>& gCs, const std::vector<int>& gFs, short foodsNumber) {
	unsigned int max = static_cast<unsigned int> (pow(2.0, static_cast<int>(foodsNumber)));
	for (unsigned int i = 1; i < max; ++i) {
		if (singleSumProblem(i, gP, gPs))
			if (singleSumProblem(i, gC, gCs))
				if (singleSumProblem(i, gF, gFs))
					return true;
	}
	return false;
}

string boolToString(bool result) {
	if (result)
		return "yes";
	else
		return "no";
}

int _tmain(int argc, _TCHAR* argv[])
{
	//open input file
	ifstream fileStream;
	fileStream.open("new_years_resolution_in.txt");

	//open output file
	ofstream outFile;
	outFile.open("new_years_resolution_out.txt", ofstream::out);

	//get number of test cases
	int testCases = 0;
	string line;
	std::getline(fileStream, line);
	getNumber(line, &testCases);

	//main loop
	for (int i = 1; i <= testCases; ++i) {
		//get expected calories
		int gP, gC, gF;
		std::getline(fileStream, line);
		getThreeNumbers(line, &gP, &gC, &gF);

		//get Number of foods
		int foodsNumber;
		std::getline(fileStream, line);
		getNumber(line, &foodsNumber);

		//get actual foods
		vector<int> gPs(foodsNumber), gCs(foodsNumber), gFs(foodsNumber);

		for(int j = 0; j < foodsNumber; ++j) {
			std::getline(fileStream, line);
			getThreeNumbers(line, &gPs[j], &gCs[j], &gFs[j]);
		}

		//find answer
		outFile << "Case #" << i << ": " << boolToString(foodsProblem(gP, gC, gF, gPs, gCs, gFs, foodsNumber))<<'\n';
	}

	fileStream.close();
	outFile.close();

	return 0;
}


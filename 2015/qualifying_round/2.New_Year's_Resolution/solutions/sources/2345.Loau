#include <algorithm>
#include <bitset>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <iomanip>
#include <iterator>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <string.h>
#include <utility>
#include <vector>
#define si 21
using namespace std;

typedef struct FF{
	int p;
	int c;
	int f;
}fd;

int gp, gc, gf, num;
fd food[si];
bool visited[si];


int backtrack(int pp, int cc, int ff) {

	for (int i = 1; i <= num; i++){
		if(!visited[i]){
			if (pp>=food[i].p && cc>=food[i].c && ff>=food[i].f) {
				visited[i]=true;
				if(pp==food[i].p && cc==food[i].c && ff==food[i].f){
					return true; 
				}else if (backtrack(pp-food[i].p , cc-food[i].c , ff-food[i].f)){
					return true; 
				}
				visited[i]=false;
			}
		}
	}

	return false;

}

bool solve(){
	memset(visited,false,sizeof(visited));
	if(backtrack(gp,gc,gf))
		return true;
	else 
		return false;
}

int main() {

	freopen("new_years_resolution.txt","r",stdin);
	freopen("out2.txt","w",stdout);
	int T, n,p,c,f;
	scanf("%d",&T);
	for(int t=1;t<=T;t++){
		scanf("%d %d %d %d",&gp, &gc, &gf, &n);
		num=1;
		memset(food,0,sizeof(food));

		for(int i=0;i<n;i++){
			scanf("%d %d %d",&p, &c, &f);
			if(p<=gp && c<=gc && f<=gf){
				food[num].c=c;
				food[num].f=f;
				food[num].p=p;
				++num;
			}
		}
		num--;
		if(solve())
			printf("Case #%d: yes\n", t);
		else
			printf("Case #%d: no\n", t);
	}
	return 0;
}
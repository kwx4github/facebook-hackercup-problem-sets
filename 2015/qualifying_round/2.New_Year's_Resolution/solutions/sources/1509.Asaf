using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NewYearsResolution
{
    public class Program
    {
        static void Main(string[] args)
        {
            var cases = GetConstraints(args);
            int i = 1;
            foreach (var item in cases)
            {
                bool res = IsMatch(item.Item1, item.Item2);
                string print = res == true ? "yes" : "no";
                Console.WriteLine(string.Format("Case #{0}: {1}", i, print));
                i++;
            }
            Console.ReadLine();
        }

        public static List<Tuple<Item, List<Item>>> GetConstraints(string[] args)
        {
            var result = new List<Tuple<Item, List<Item>>>();
            var s = File.ReadAllText(args[0]);
            var rows = s.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
            int cases = int.Parse(rows[0]);
            int row = 1;
            for (int i = 1; i <= cases; i++)
            {
                var entry = new Tuple<Item, List<Item>>(GetItem(rows[row]), new List<Item>());
                row++;
                int items = int.Parse(rows[row]);
                row++;
                for (int j = 1; j <= items; j++)
                {
                    entry.Item2.Add(GetItem(rows[row]));
                    row++;
                }
                result.Add(entry);
            }

            return result;
        }

        private static Item GetItem(string p)
        {
            var res = p.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);
            return new Item { P = int.Parse(res[0]), C = int.Parse(res[1]), F = int.Parse(res[2]) };
        }

        public static bool IsMatch(Item target, List<Item> items)
        {
            var relevantItems = items.Where(t => t.C <= target.C && t.F <= target.F && t.P <= target.P).ToList();

            if (!relevantItems.Any())
            {
                return false;
            }

            if (relevantItems.Any(t => t.C == target.C && t.F == target.F && t.P == target.P))
            {
                return true;
            }

            foreach (var item in items)
            {
                var newItems = new List<Item>();
                newItems.AddRange(items);
                newItems.Remove(item);
                bool isMatch = IsMatch(new Item { P = target.P - item.P, C = target.C - item.C, F = target.F - item.F }, newItems);
                if (isMatch)
                {
                    return true;
                }
            }
            return false;
        }

        public class Item
        {
            public int P { get; set; }
            public int C { get; set; }
            public int F { get; set; }
        }
    }
}

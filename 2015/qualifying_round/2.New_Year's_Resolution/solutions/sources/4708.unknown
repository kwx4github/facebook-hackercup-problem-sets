#define NDEBUG
#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) repi(i,0,n)
#define repi(i,a,b) for(int i=int(a);i<int(b);++i)
#define once for(static int rest__=1;rest__;--rest__)

typedef tuple<int, int, int> entry;
inline bool valid(const entry& a) { return min({get<0>(a), get<1>(a), get<2>(a)}) >= 0; }
inline int ord(const entry& a) { return get<0>(a) + get<1>(a) + get<2>(a); }
inline bool cmp(const entry& a, const entry& b) { return ord(a) > ord(b); }
entry& operator +=(entry& a, const entry& b) {
    get<0>(a) += get<0>(b);
    get<1>(a) += get<1>(b);
    get<2>(a) += get<2>(b);
    return a;
}
entry& operator -=(entry& a, const entry& b) {
    get<0>(a) -= get<0>(b);
    get<1>(a) -= get<1>(b);
    get<2>(a) -= get<2>(b);
    return a;
}
inline entry operator +(entry a, const entry& b) { return a += b; }
inline entry operator -(entry a, const entry& b) { return a -= b; }
istream& operator >>(istream& in, entry& a) { return in >> get<0>(a) >> get<1>(a) >> get<2>(a); }

int n;
entry s;
vector<entry> v;

void input()
{
    cin >> s >> n;
    v.resize(n);
    rep(i, n) cin >> v[i];
    sort(begin(v), end(v), cmp);
}

bool dfs(entry rest, int depth = 0)
{
    if (not valid(rest)) return false;
    if (ord(rest) == 0) return true;
    if (depth == n) return false;
    return dfs(rest - v[depth], depth + 1) or dfs(rest, depth + 1);
}

void solve()
{
    cout << (dfs(s) ? "yes" : "no") << endl;
}

int main()
{
    cin.tie(0);
    ios_base::sync_with_stdio(false);

    int t;
    cin >> t;
    for (int i = 1; i <= t; ++i) {
        input();
        cout << "Case #" << i << ": ";
        solve();
    }
}

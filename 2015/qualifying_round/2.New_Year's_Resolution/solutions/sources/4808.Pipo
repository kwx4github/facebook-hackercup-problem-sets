
class Calcul {

	void Main () {
		int nombreLigne ;

		int offset = 0 ;

		Ligne lign ;

		Interface inter = new Interface(
				"/home/professionnel/Documents/Programmation/Global/Concours programmation Groovy/src/",
				"input.txt",'output.txt') ;
		inter.CreationFichier();
		String[] ligne = inter.ChargementDonnees();

		nombreLigne = ligne[0].toInteger() ;

		int i ;
		offset = 1 ;
		for(i=0;i<nombreLigne;i++) {
			lign = new Ligne(ligne[offset],ligne[offset+1].toInteger()) ;
			offset+=2 ;
			//offset++ ;
			//lign.SetN(ligne[offset].toInteger()) ;
			//offset++ ;
			offset = lign.ChargerNourriture(ligne,offset) ;
			//lign.AfficherNourriture();
			lign.Trier() ;
			//lign.AfficherNourriture();
			lign.CalculGlobal() ;
			lign.Afficher(i+1) ;
			lign.Ecrire(inter,i+1) ;
		}
	}
}


class Ligne {

	// http://www.tutorialspoint.com/java/java_string_tochararray.htm
	// http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#compareTo(java.lang.Character)

	int N ;
	int gp ;
	int gc ;
	int gf ;
	Aliment[] nourriture ;
	
	String resultat ;

	Ligne(String ligne,int n) {
		Scanner scan  = new Scanner(ligne);

		gp = scan.nextInt() ;
		gc = scan.nextInt() ;
		gf = scan.nextInt() ;

		N=n ;
	}

	/*void SetN (int n) {
	 N = n ;
	 }*/

	int ChargerNourriture (String[] tableau, int offset) {
		int i ;

		Scanner scan ;

		nourriture = new Aliment[N] ;

		for(i=0;i<N;i++)
		{
			scan = new Scanner(tableau[i+offset]);
			//print
			//nourriture.add(new Aliment(scan.nextInt(),scan.nextInt(),scan.nextInt())) ;
			//nourriture.push(new Aliment(scan.nextInt(),scan.nextInt(),scan.nextInt())) ;
			nourriture[i] = new Aliment(scan.nextInt(),scan.nextInt(),scan.nextInt()) ;
		}

		return offset + N ;
	}


	void Trier () {
		//println nourriture.size() ;
		if(nourriture.size() > 1)
		{
			//println "Merdier" ;
			nourriture = nourriture.sort({Aliment a, Aliment b ->
				if(a.p > b.p) {return 1}
				if(a.p < b.p) {return -1}
				if(a.p == b.p) {
					if(a.c > b.c) {return 1}
					if(a.c < b.c) {return -1}
					if(a.c == b.c) {
						if(a.f > b.f) {return 1}
						if(a.f < b.f) {return -1}
						if(a.f == b.f) {return 0}
					}
				}
			}) ;
		}

	}
	
	boolean Boucle (int taille)
	{
		assert taille <= N ;
		int[] i = new int[taille] ;
		
		int j ;
		for(j=0;j<taille;j++)
		{
			i[j] = j ;
		}
		
		boolean bouclage = true ;
		boolean reussite = false ;
		
		while(bouclage)
		{
			reussite = this.somme (i) ;
			bouclage = !(reussite) ;
			
			if(bouclage)
			{
				bouclage = this.increment(i , taille) ;
			}
		}
		
		return reussite ;
	}
	
	boolean somme (int[] i)
	{
		int p = 0,c = 0,f = 0;
		int j ;
		for(j=0;j<i.size();j++)
		{
			p += nourriture[i[j]].p ;
			c += nourriture[i[j]].c ;
			f += nourriture[i[j]].f ;
		}
		
		//println p + " " + c + " " + f + " " + ((p == gp) && (c == gc) && (f == gf))
		
		return ((p == gp) && (c == gc) && (f == gf)) ;
	}
	
	boolean increment(int[] i , int taille)
	{
		int j ;
		int ref ;
		
		boolean resultat = false
		
		for(j=taille-1;j>=0 && !(resultat);j--)
		{
			if(i[j] < (N - 1) - (taille - 1 - j) )
			{
				resultat = true ;
				ref = j ;
				i[ref]++ ;
				for(j = ref+1;j<taille;j++)
				{
					i[j] = i[j-1] + 1 ;
				}
			}
		}
		
		return resultat ;
	}
	
	
	boolean BoucleGlobale () {
		int j ;
		
		boolean resultat = false ;
		
		for(j=1;j<=N && !(resultat);j++)
		{
			resultat = this.Boucle ( j) ;
		}
		
		return resultat ;
	}
	
	void CalculGlobal () {
		if( this.BoucleGlobale() )
		{
			resultat = "yes" ;
		} else {
			resultat = "no" ;
		}
	}
	

	void AfficherNourriture() {
		int i ;

		for(i=0; i<nourriture.size();i++)
		{
			println nourriture[i].p + " " + nourriture[i].c + " " +nourriture[i].f ;
		}
		println "#########################################" ;
	}

	void Afficher(int cas) {
		println "Case #" + cas + ": " + resultat ;
	}

	void Ecrire(Interface inter, int cas) {
		if(cas == 1) {
			inter.Ecriture("Case #" + cas + ": " + resultat + "\n") ;
		} else {
			inter.EcritureAppend("Case #" + cas + ": " + resultat + "\n") ;
		}

	}

}

class Aliment {

	int p;
	int c;
	int f;

	Aliment( int P , int C, int F)
	{
		p = P;
		c = C;
		f = F ;
	}

}

class Interface {

	// http://stackoverflow.com/questions/12260849/read-values-from-formatted-string-java-groovy
	// http://groovy.codehaus.org/Reading+Files+Line+by+Line
	// http://groovy.codehaus.org/Input+Output
	// http://groovy.codehaus.org/groovy-jdk/java/io/File.html

	String dossier;
	String nomFichierIn ;
	String nomFichierOut ;

	File fichierIn ;
	File fichierOut ;

	Interface(String dossierString , String nomFichierInString, String nomFichierOutString){
		dossier = dossierString ;
		nomFichierIn = nomFichierInString ;
		nomFichierOut = nomFichierOutString ;
	}

	void CreationFichier ()
	{
		fichierIn = new File(dossier + nomFichierIn) ;
		fichierOut = new File(dossier + nomFichierOut) ;
	}

	List ChargementDonnees ()
	{
		return fichierIn.readLines() ;
	}

	void Ecriture (String chaine) {
		fichierOut.write(chaine) ;
	}

	void EcritureAppend (String chaine) {
		fichierOut.append(chaine) ;
	}


}


Calcul programme = new Calcul() ;
programme.Main();









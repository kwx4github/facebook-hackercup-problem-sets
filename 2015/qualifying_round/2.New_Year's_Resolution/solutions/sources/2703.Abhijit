#!/usr/bin/env python

def dfs(foods, P, C, F, level, visited):
    if C == 0 and P == 0 and F == 0:
        return True

    if level == len(foods):
        return False 

    visited[level] = True
    possible = False
    for i in range(len(foods)):
        if not visited[i] and (foods[i][0] <= P and foods[i][1] <= C and foods[i][2] <= F):
            possible = dfs(foods, P - foods[i][0], C - foods[i][1], F - foods[i][2], i, visited)
            if possible:
                visited[level] = False
                return possible
    visited[level] = False

    return possible

def get_food_possible(foods, P, C, F):
    possible = False
    for i in range(len(foods)):
        visited = {}
        for j in range(len(foods)):
            visited[j] = False
        possible = dfs(foods, P - foods[i][0], C - foods[i][1], F - foods[i][2], i, visited)
        if possible:
            return 'yes'
    return 'no'

if __name__ == '__main__':
    t = int(raw_input())

    for tc in range(t):
        P, C, F = map(int, raw_input().split())
        n = int(raw_input())
        foods = []
        for i in range(n):
            foods.append(map(int, raw_input().split()))
        print 'Case #%d: %s' % (tc + 1, get_food_possible(foods, P, C, F))

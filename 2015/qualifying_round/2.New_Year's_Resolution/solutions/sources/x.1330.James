//This program wrote Jakub Tomanek 
//9.1. 2015

#include <iostream>
#include <fstream>

using namespace std;

// DECLARATION

int COUNT;

class Number{
public:
	Number(int number);
	~Number();
	void setNext(Number * next);
	void solve();
	void printResult(int order);
private:
	void findMin();
	void findMax();
	void swapWithFirst(int ndPosition);
	int getArrayNumber();
	int number;
	int minNumber;
	int maxNumber;
	int nLength;
	int * nArray;
	Number * next;
};

int numberLength(int number);

// DEFINITION

Number::Number(int number){
	this->number = number;
	this->next = NULL;
	this->nLength = numberLength(number);
	this->nArray = new int[this->nLength];
	for(int i = nLength - 1; i >= 0; i--){
		nArray[i] = number % 10;
		number /= 10;
	}
}

Number::~Number(){
	delete nArray;
	if(next != NULL){
		delete next;
	}
}

void Number::setNext(Number * next){
	this->next = next;
}

void Number::solve(){
	this->findMin();
	this->findMax();
	if(next != NULL){
		next->solve();
	}
}

void Number::findMin(){
	if(nLength == 1){
		minNumber = number;
		return;
	}
	int position = 0;
	int tmpMin = nArray[0];
	int refValue = nArray[0];
	for(int i = 1; i < nLength; i++){
		if(nArray[i] < refValue && nArray[i] != 0 && nArray[i] <= tmpMin){
			position = i;
			tmpMin = nArray[i];
		}
	}

	swapWithFirst(position);
	minNumber = getArrayNumber();
	swapWithFirst(position);
}

void Number::findMax(){
	if(nLength == 1){
		maxNumber = number;
		return;
	}
	int position = 0;
	int tmpMax = nArray[0];
	int refValue = nArray[0];
	for(int i = 1; i < nLength; i++){
		if(nArray[i] > refValue && nArray[i] >= tmpMax){
			position = i;
			tmpMax = nArray[i];
		}
	}

	swapWithFirst(position);
	maxNumber = getArrayNumber();
	swapWithFirst(position);

}

void Number::swapWithFirst(int position){
	int tmp = nArray[0];
	nArray[0] = nArray[position];
	nArray[position] = tmp;
}

int Number::getArrayNumber(){
	int numb = nArray[0];
	for(int i = 1; i < nLength; i++){
		numb *= 10;
		numb += nArray[i];
	}
	return numb;
}

void Number::printResult(int order){
	cout << "Case #" << order << ": " << minNumber << " " << maxNumber << endl;
	if(next != NULL){
		next->printResult(order + 1);
	}
}

Number * readInput(char * fileName){
	int number;
	ifstream ifs;
	ifs.open(fileName, ifstream::in);
	ifs >> COUNT;
	ifs >> number;
	Number * first = new Number(number);
	Number * tmp = first;
	Number * tmp2;
	for(int i = 0; i < COUNT - 1; i++){
		ifs >> number;
		tmp2 = new Number(number);
		tmp->setNext(tmp2);
		tmp = tmp2;
	}
	return first;
}

int numberLength(int number){
	if(number == 0)
		return 1;
	int counter = 0;
	while(number != 0){
		number /= 10;
		counter++;
	}
	return counter;
}

int main(int argc, char * argv[]){
	if(argc < 2){
		cout << "Invalid number of arguments." << endl;
	}
	Number * numberChain = readInput(argv[1]);
	numberChain->solve();
	numberChain->printResult(1);
	delete numberChain;
	return 0;
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Stack;
import java.util.StringTokenizer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Nidhi
 */
public class NewYearResolution {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            StringTokenizer s = new StringTokenizer(br.readLine(), " ");
            int Gp = Integer.parseInt(s.nextToken());
            int Gc = Integer.parseInt(s.nextToken());
            int Gf = Integer.parseInt(s.nextToken());
            int n = Integer.parseInt(br.readLine());
            // int[] P = new int[n];
            //int[] C = new int[n];
            //int[] F = new int[n];
            int PCF[][] = new int[n][3];
            int p, c, f, count = n, x = 0;
            for (int l = 0; l < n; l++) {
                s = new StringTokenizer(br.readLine(), " ");
                p = Integer.parseInt(s.nextToken());
                c = Integer.parseInt(s.nextToken());
                f = Integer.parseInt(s.nextToken());
                if (p > Gp || c > Gc || f > Gf) {
                    count--;
                } else {
                    PCF[x][0] = p;
                    PCF[x][1] = c;
                    PCF[x][2] = f;
                    x++;
                }
            }

            int[][] PCFor = new int[count][3];
            for (int l = 0; l < count; l++) {
                PCFor[l][0]= PCF[l][0] ;
                PCFor[l][1]=PCF[l][1] ;
                PCFor[l][2]=PCF[l][2] ;
            }

            Arrays.sort(PCFor, new Comparator<int[]>() {
                @Override
                public int compare(final int[] entry1, final int[] entry2) {
                    final Integer time1 = entry1[0];
                    final Integer time2 = entry2[0];
                    return time1.compareTo(time2);
                }
            });

            GetAllSubsetByStack gets = new GetAllSubsetByStack();
            gets.TARGET_SUM1 = Gp;
            gets.TARGET_SUM2 = Gc;
            gets.TARGET_SUM3 = Gf;
            gets.populateSubset(PCFor, 0, count);
            String possible="no";
            if(gets.answer)
                possible="yes";
            
            System.out.println("Case #" + i + ": " + possible);
        }
    }
}

class GetAllSubsetByStack {

    /**
     * Set a value for target sum
     */
    public int TARGET_SUM1;
    public int TARGET_SUM2;
    public int TARGET_SUM3;
    public boolean answer = false;
    private Stack<Integer> stack1 = new Stack<Integer>();
    private Stack<Integer> stack2 = new Stack<Integer>();
    private Stack<Integer> stack3 = new Stack<Integer>();
    /**
     * Store the sum of current elements stored in stack
     */
    private int sumInStack1 = 0;
    private int sumInStack2 = 0;
    private int sumInStack3 = 0;

    public void populateSubset(int[][] data, int fromIndex, int endIndex) {

        /*
         * Check if sum of elements stored in Stack is equal to the expected
         * target sum.
         * 
         * If so, call print method to print the candidate satisfied result.
         */
        if ((sumInStack1 >= TARGET_SUM1) || (sumInStack2 >= TARGET_SUM2) || (sumInStack3 >= TARGET_SUM3)) {
            if ((sumInStack1 == TARGET_SUM1) && (sumInStack2 == TARGET_SUM2) && (sumInStack3 == TARGET_SUM3)) {
                answer = true;
            }
            // there is no need to continue when we have an answer
            // because nothing we add from here on in will make it
            // add to anything less than what we have...
            return;
        }

        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

            if ((sumInStack1 + data[currentIndex][0] <= TARGET_SUM1) && (sumInStack2 + data[currentIndex][1] <= TARGET_SUM2)
                    && (sumInStack3 + data[currentIndex][2] <= TARGET_SUM3)) {
                stack1.push(data[currentIndex][0]);
                stack2.push(data[currentIndex][1]);
                stack3.push(data[currentIndex][2]);
                sumInStack1 += data[currentIndex][0];
                sumInStack2 += data[currentIndex][1];
                sumInStack3 += data[currentIndex][2];
                /*
                 * Make the currentIndex +1, and then use recursion to proceed
                 * further.
                 */
                populateSubset(data, currentIndex + 1, endIndex);
                if (answer) {
                    return;
                }
                sumInStack1 -= (Integer) stack1.pop();
                sumInStack2 -= (Integer) stack2.pop();
                sumInStack3 -= (Integer) stack3.pop();
            }
        }
    }

    /**
     * Print satisfied result. i.e. 15 = 4+6+5
     */
}

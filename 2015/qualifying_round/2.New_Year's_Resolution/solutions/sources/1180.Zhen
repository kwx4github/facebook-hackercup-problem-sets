#include <string>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
using namespace std;

struct food {
  int P;
  int C;
  int F;
};
vector<food> lst;

bool dfs(int tempP,int tempC,int tempF, int k)
{
    if (k >= lst.size())
    {
        return false;
    }
    tempP -= lst[k].P;
    tempC -= lst[k].C;
    tempF -= lst[k].F;

    if (tempP == 0 && tempC == 0 && tempF == 0)
    {
        return true;
    }else if (tempP < 0 || tempC < 0 || tempF < 0 || tempP*tempC*tempF == 0){
        return false;
    }else{
        for (int z=k+1;z<lst.size();z++)
        {
            if (dfs(tempP, tempC, tempF, z))
            {
                return true;
            }
        }
        return false;
    }
}

int main() {
	freopen("C:\\ATestCase\\in.txt","r",stdin);
    freopen("C:\\ATestCase\\out.txt","w",stdout);

	int TestNum;
	cin >> TestNum;

	for (int testCase = 0;testCase < TestNum;testCase++)
	{
		int N = 0, Gp, Gc, Gf;
		cin >> Gp >> Gc >> Gf;
		cin >> N;
        lst.clear();
		for (int i=0;i<N;i++)
		{
			int p,c,f;
			cin >> p >> c >> f;
			lst.push_back({p,c,f});
		}

		bool result = false;

        for (int z=0;z<lst.size();z++)
        {
            result = dfs(Gp,Gc,Gf,z);
            if (result)
            {
                break;
            }
        }
		cout << "Case #" << testCase+1 << ": "<< (result ? "yes":"no") <<endl;
	}
	return 0;
}

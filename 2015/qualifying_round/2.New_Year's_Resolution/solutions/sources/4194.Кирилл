#include <cstdio>
#include <cmath>

#include <algorithm>
#include <iostream>
#include <vector>
#include <utility>

using std::cin;
using std::cout;
using std::vector;
using std::pair;

struct Triple
{
    int A, B, C;
    Triple(int A_, int B_, int C_) : A(A_), B(B_), C(C_) {}
};

Triple operator+ (Triple lhs, Triple rhs)
{
    Triple result(lhs.A + rhs.A, lhs.B + rhs.B, lhs.C + rhs.C);
    return result;
}

bool operator== (Triple lhs, Triple rhs)
{
    return (lhs.A == rhs.A && lhs.B == rhs.B && lhs.C == rhs.C);
}

bool hasSubset(vector<Triple> data, Triple triple)
{
    int n = data.size();
    int maxBound = static_cast<int>(pow(2, n));
    // cout << "maxBound: " << maxBound << "\n";
    for (int j = 0; j < maxBound; ++j) {
        Triple current(0, 0, 0);
        int mask = j;
        for (int i = 0; i < n; ++i) {
            if (mask % 2 == 1) {
                current = current + data[i];
            }
            mask /= 2;
        } 
        if (current == triple) {
            return true;
        }
    }
    return false;
}

int main() 
{
    freopen("B.txt", "r", stdin);
    freopen("B_out.txt", "w", stdout);
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int T;
    cin >> T;
    for (int i = 0; i < T; ++i) {
        int A, B, C, n;
        cin >> A >> B >> C;
        Triple triple(A, B, C);
        cin >> n;
        vector<Triple> data;
        for (int i = 0; i < n; ++i) {
            int aa, bb, cc;
            cin >> aa >> bb >> cc;
            data.push_back(Triple(aa, bb, cc));
        }

        if (hasSubset(data, triple)) {
            cout << "Case #" << i+1 << ": yes\n";
        } else {
            cout << "Case #" << i+1 << ": no\n";
        }
    }
    return 0;
}

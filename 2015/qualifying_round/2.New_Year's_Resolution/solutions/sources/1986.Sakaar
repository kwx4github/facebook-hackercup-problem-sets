#include <string>
#include <vector>
#include <cstring>
#include <cmath>
#include <utility>
#include <algorithm>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <list>
#include <iomanip>
#include <ctime>
#include <cassert>
//#include <unordered_map>
//#include <unordered_set>


#define SZ(a) int((a).size())
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define PRESENT(c,x) ((c).find(x) != (c).end())
#define CPRESENT(c,x) (find(ALL(c),x) != (c).end()) 
#define WHAT_IS(x) cout << #x << " is " << x << endl;

#define MP make_pair

#define MAX 100010
#define MOD 1000000007
#define INF 1000000007

using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> II;

typedef long long LL;

// undirected graph
class Graph {
  public:
  int V;
  VVI adj;
  Graph() : V(0) { }
  Graph(int n) : V(n), adj(n) { }
  void add_edge(int u, int v) {
    adj[u].PB(v);
    adj[v].PB(u);
  }
  void resize(int n) {
    for (int i=0; i<SZ(adj); i++) {
      adj[i].clear();
    }
    V = n;
    adj.clear();
    adj = VVI(n);
  }
};

// gcd
inline int gcd(int a, int b) {
  while (a > 0 && b > 0) {
    if (a > b) a %= b;
    else b %= a;
  }
  return a + b;
}


// power
inline int power(int a, int b, int mod) {
  LL ans=1;
  int bin[64], i=0;
  while (b>0) {
    bin[i++] = b%2;
    b /= 2;
  }
  for (int j=i-1; j>=0; j--) {
    ans = (ans*ans)%mod;
    if (bin[j] == 1) {
      ans = (ans*a)%mod;
    }
  }
  return (int)ans;
}

int p[25], c[25], f[25];

int main () {
  int t;
  scanf("%d", &t);
  for (int i=0; i<t; i++) {
    int gp, gc, gf, n;
    bool found = false;
    scanf("%d%d%d%d", &gp, &gc, &gf, &n);
    for (int i=0; i<n; i++) {
      scanf("%d%d%d", &p[i], &c[i], &f[i]);
    }
    int all = 1<<n;
    for (int sub=0; sub<=all && !found; sub++) {
      int mp=0, mc=0, mf=0;
      for (int item=0; item<n; item++) {
	mp += (sub & (1<<item)) ? p[item] : 0;
	mc += (sub & (1<<item)) ? c[item] : 0;
	mf += (sub & (1<<item)) ? f[item] : 0;
      }
      if (mp == gp && mc == gc && mf == gf) {
	printf("Case #%d: yes\n", i+1);
	found = true;
      }
    }
    if (!found) {
      printf("Case #%d: no\n", i+1);      
    }
  }
  return 0;
}

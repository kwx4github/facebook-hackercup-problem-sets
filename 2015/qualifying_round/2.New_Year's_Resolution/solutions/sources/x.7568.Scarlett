#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>

//
//    Program Source:  fb_foods.cpp
//    Author:          Scarlett J. Davidson
//    Author Email:    scarlett.ibis@gmail.com
//    Date:            1/10/2015


struct food_t {
  int protein;
  int carb;
  int fat;
};

bool mysortprotein(const food_t &A, const food_t &B) 
{ return (A.protein > B.protein); }

bool mysortcarb(const food_t &A, const food_t &B) 
{ return (A.carb > B.carb); }

bool mysortfat(const food_t &A, const food_t &B) 
{ return (A.fat > B.fat); }

int sum_protein(const std::stack<food_t> & fstack)
{
  std::stack<food_t> tmp_stack(fstack);

  int protein_sum = 0;
  while (!tmp_stack.empty())
    {
      protein_sum += tmp_stack.top().protein;
      //      std::cout << "\n" << tmp_stack.top().protein << " " ;
      tmp_stack.pop();
    }
  //  std::cout << "\nprotein_sum: " << protein_sum ;
  return protein_sum;
}


int sum_carb(const std::stack<food_t> & fstack)
{
  std::stack<food_t> tmp_stack(fstack);

  int carb_sum = 0;
  while (!tmp_stack.empty())
    {
      carb_sum += tmp_stack.top().carb;
      //      std::cout << "\n" << tmp_stack.top().carb << " " ;
      tmp_stack.pop();
    }
  //  std::cout << "\ncarb_sum: " << carb_sum ;
  return carb_sum;
}

int sum_fat(const std::stack<food_t> & fstack)
{
  std::stack<food_t> tmp_stack(fstack);

  int fat_sum = 0;
  while (!tmp_stack.empty())
    {
      fat_sum += tmp_stack.top().fat;
      //      std::cout << "\n" << tmp_stack.top().fat << " " ;
      tmp_stack.pop();
    }
  //  std::cout << "\nfat_sum: " << fat_sum ;
  return fat_sum;
}


bool check_all_goals(const food_t & fgoals, const std::stack<food_t> & fstack)
{
  std::stack<food_t> tmp_stack(fstack);

  int protein_sum = 0;
  int carb_sum = 0;
  int fat_sum =0;

  //  std::cout << "\nCHECKING GOALS: "<< fgoals.protein << " " << fgoals.carb << " " << fgoals.fat;

  while (!tmp_stack.empty())
    {
      protein_sum += tmp_stack.top().protein;
      carb_sum += tmp_stack.top().carb;
      fat_sum += tmp_stack.top().fat;
      //      std::cout << "\n" << tmp_stack.top().protein << " " ;
      //      std::cout << tmp_stack.top().carb << " " << tmp_stack.top().fat;


      tmp_stack.pop();
    }

  //  std::cout << "\nActual sums: " << protein_sum << " " << carb_sum << " " << fat_sum;


  bool pass = false;
  if ((protein_sum == fgoals.protein) &&
      (carb_sum == fgoals.carb) &&
      (fat_sum == fgoals.fat))
    pass = true;

  return pass;
}

int main ()
{

  food_t food_goal;
  int num_foods;
  std::vector<food_t> foods;


  int total=0;
  std::cin >> total;
  //  std::cout << "\nTotal: " << total << "\n";

  for (int ln=1; ln <= total; ln++){
    num_foods=0;
    bool total_match_found=false;
    bool protein_match_found=false;
    bool carb_match_found=false;
    bool fat_match_found=false;

    food_t new_food;

    //get food goals
    std::cin >> food_goal.protein >> food_goal.carb >> food_goal.fat;
    //    std::cout << "\n Goals: " << food_goal.protein << " " << food_goal.carb << " " << food_goal.fat;

    //get num foods
    std::cin >> num_foods;
    //    std::cout << "\n Num Foods: " << num_foods;

    foods.clear();

    //get food choices
    for (int i=0; i<num_foods; ++i)
      {
	std::cin >> new_food.protein >> new_food.carb >> new_food.fat;
	foods.push_back(new_food);
      }
    // sort foods based on protein
    std::sort(foods.begin(), foods.end(), mysortprotein);

    //    std::cout << "\nSORTED Foods";
    for (int i=0; i < foods.size(); i++)
      {
	//	std::cout << "\n" << foods[i].protein << " " << foods[i].carb << " " << foods[i].fat;
      }


    // Check possibilities of each food w/ lower foods
    for (int i=0; i<num_foods; i++)
      {
	std::stack<food_t> foodstack;

	for (int j=i; j<num_foods; j++)  // lower foods
	  {
	    foodstack.push(foods[j]);
	    int protein_total = sum_protein(foodstack);
	    if (protein_total == food_goal.protein)
	      { 
		protein_match_found = true;
		if (!(total_match_found = check_all_goals(food_goal, foodstack)))
		  foodstack.pop();  // no match for this "j" food
	      }
	    else if (protein_total > food_goal.protein)
	      {
		foodstack.pop();
	      }
	    if (total_match_found) break;
	  }
	if (total_match_found) break;
      }

    if (!total_match_found) // try based on carbs sort
      {
	// sort foods based on carb
	std::sort(foods.begin(), foods.end(), mysortcarb);

	//	std::cout << "\nSORTED Foods";
	for (int i=0; i < foods.size(); i++)
	  {
	    //	    std::cout << "\n" << foods[i].protein << " " << foods[i].carb << " " << foods[i].fat;
	  }


	// Check possibilities of each food w/ lower foods
	for (int i=0; i<num_foods; i++)
	  {
	    std::stack<food_t> foodstack;

	    for (int j=i; j<num_foods; j++)  // lower foods
	      {
		foodstack.push(foods[j]);
		int carb_total = sum_carb(foodstack);
		if (carb_total == food_goal.carb)
		  { 
		    carb_match_found = true;
		    if (!(total_match_found = check_all_goals(food_goal, foodstack)))
		      foodstack.pop();  // no match for this "j" food
		  }
		else if (carb_total > food_goal.carb)
		  {
		    foodstack.pop();
		  }
		if (total_match_found) break;
	      }
	    if (total_match_found) break;
	  }

      }

    if (!total_match_found) // try based on fats sort
      {
	// sort foods based on fat
	std::sort(foods.begin(), foods.end(), mysortfat);

	//	std::cout << "\nSORTED Foods";
	for (int i=0; i < foods.size(); i++)
	  {
	    //	    std::cout << "\n" << foods[i].protein << " " << foods[i].carb << " " << foods[i].fat;
	  }


	// Check possibilities of each food w/ lower foods
	for (int i=0; i<num_foods; i++)
	  {
	    std::stack<food_t> foodstack;

	    for (int j=i; j<num_foods; j++)  // lower foods
	      {
		foodstack.push(foods[j]);
		int fat_total = sum_fat(foodstack);
		if (fat_total == food_goal.fat)
		  { 
		    fat_match_found = true;
		    if (!(total_match_found = check_all_goals(food_goal, foodstack)))
		      foodstack.pop();  // no match for this "j" food
		  }
		else if (fat_total > food_goal.fat)
		  {
		    foodstack.pop();
		  }
		if (total_match_found) break;
	      }
	    if (total_match_found) break;
	  }

      }
    // if (!total_match_found)
    //   {
    // 	if (protein_match_found && carb_match_found && fat_match_found)
    // 	  total_match_found = true;
    //   }
    std::string answer = total_match_found ? "yes" : "no";
    std::cout << "Case #" << ln << ": " << answer ;
    std::cout << std::endl;
  }
}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <ctime>
#include <climits>

const double Pi=acos(-1.0);
typedef long long LL;

#define Set(a, s) memset(a, s, sizeof (a))
#define Rd(r) freopen(r, "r", stdin)
#define Wt(w) freopen(w, "w", stdout)
using namespace std;


class Three{
public:
    int protein;
    int carb;
    int fat;

    bool operator==(const Three &a) const {
        return protein == a.protein && fat == a.fat && carb == a.carb;
    }
};

vector<Three> mygraph;
int number=0;
void recurse(Three sum, Three target,int length)
{
    if(sum==target)
        {
            number++;
        }


    if(sum.protein>target.protein||sum.carb>target.carb||sum.fat>target.fat)
        return;

    for(int i =0; i <mygraph.size(); i++)
    {
        Three random=mygraph[i];
        sum.protein+=mygraph[i].protein;
        sum.carb+=mygraph[i].carb;
        sum.fat+=mygraph[i].fat;
        //cout<<sum.protein<<' '<<sum.carb<<' '<<sum.fat<<' '<<mygraph[i].protein<<' '<<mygraph[i].carb<<' '<<mygraph[i].fat<<endl;
        mygraph.erase(mygraph.begin()+i);
        recurse(sum, target, length+1);
        mygraph.insert(mygraph.begin()+i,random);
        sum.protein=sum.protein-mygraph[i].protein;
        sum.fat=sum.fat-mygraph[i].fat;
        sum.carb=sum.carb-mygraph[i].carb;
    }
}
int main()
{
    Rd("Resolution.in");
    Wt("Resolution.out");
    int T;
    cin>>T;

    for(int i=0; i <T; i++)
    {
        Three target;
        cin>>target.protein>>target.carb>>target.fat;
        int N;
        cin>>N;
        number=0;
        for(int k=0; k<N; k++)
        {
            Three random;
            cin>>random.protein>>random.carb>>random.fat;
            mygraph.push_back(random);
        }
        Three sum;
        sum.protein=0;
        sum.fat=0;
        sum.carb=0;
        recurse(sum,target,0);


         if(number==0)
            cout<<"Case #"<<i+1<<": no"<<endl;
        if(number!=0)
             cout<<"Case #"<<i+1<<": yes"<<endl;
        mygraph.clear();
    }
}


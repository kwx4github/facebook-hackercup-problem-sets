#include<iostream>
#include<cstdio>
#include<string>
#include<algorithm>
#include<vector>
#include<cmath>
#include<list>
#define REP(I,N) for(int I = 0; I < N; ++I)
using namespace std;

typedef vector<int> VI;
typedef long long LL;

bool isPossibleP[1001] = {false};
bool isPossibleC[1001] = {false};
bool isPossibleF[1001] = {false};
list<VI> setP[1001];
list<VI> setC[1001];
list<VI> setF[1001];

void prepPossible()
{
	REP(i,1001) isPossibleP[i] = false;
	isPossibleP[0] = true;
	
	REP(i,1001) isPossibleC[i] = false;
	isPossibleC[0] = true;
	
	REP(i,1001) isPossibleF[i] = false;
	isPossibleF[0] = true;
}

void clearSets()
{
	REP(i, 1001)
	{
		setP[i].clear();
		setC[i].clear();
		setF[i].clear();
	}
	
	setP[0].push_back({-1});
	setC[0].push_back({-1});
	setF[0].push_back({-1});
}

int main()
{	
	LL T;
	scanf("%lld", &T);
	for(int test = 1; test <= T; ++test)
	{
		LL P, C, F, N;
			prepPossible();
			clearSets();
		scanf("%lld %lld %lld", &P, &C, &F);
		scanf("%lld", &N);
		REP(i, N) 
		{
			int p, c, f;
			scanf("%d %d %d", &p, &c, &f);
			
			// P zone
			VI tmpVec;
			for(int j = 0; j < P; ++j)
			{
				if(isPossibleP[j] && j+p <= P)
				{
					tmpVec.push_back(j + p);
					for(auto vec : setP[j])
					{
						if(binary_search(vec.begin(), vec.end(), i)) continue; 
						VI tmp = vec;
						tmp.push_back(i);
						sort(tmp.begin(), tmp.end());
						setP[j+p].push_back(tmp);
					}
				}
			}
			for(int changed : tmpVec) isPossibleP[changed] = true;
			tmpVec.clear();
			
			// C zone
			for(int j = 0; j < C; ++j)
			{
				if(isPossibleC[j] && j+c <= C)
				{
					tmpVec.push_back(j + c);
					for(auto vec : setC[j])
					{
						if(binary_search(vec.begin(), vec.end(), i)) continue; 
						VI tmp = vec;
						tmp.push_back(i);
						sort(tmp.begin(), tmp.end());
						setC[j+c].push_back(tmp);
					}
				}
			}
			for(int changed : tmpVec) isPossibleC[changed] = true;
			tmpVec.clear();
			
			// F zone
			for(int j = 0; j < F; ++j)
			{
				if(isPossibleF[j] && j+f <= F)
				{
					tmpVec.push_back(j + f);
					for(auto vec : setF[j])
					{
						if(binary_search(vec.begin(), vec.end(), i)) continue; 
						VI tmp = vec;
						tmp.push_back(i);
						sort(tmp.begin(), tmp.end());
						setF[j+f].push_back(tmp);
					}
				}
			}
			for(int changed : tmpVec) isPossibleF[changed] = true;
			tmpVec.clear();
		}
				
		/*REP(i, 11)
		{
			printf("%d %d %d\n", isPossibleP[i], isPossibleC[i], isPossibleF[i]);
		}*/
		if(!isPossibleP[P] || !isPossibleC[C] || !isPossibleF[F]) {printf("Case #%d: no\n", test); continue;}
		
		/*
		printf("Pelems:\n");
		for(auto Pelems : setP[P]) 
		{
			printf("[");
			for(auto foo : Pelems) printf("%d, ", foo);
			printf("]; ");
		}
		
		printf("\nCelems:\n");
		for(auto Celems : setC[C]) 
		{
			printf("[");
			for(auto foo : Celems) printf("%d, ", foo);
			printf("]; ");
		}
		
		printf("\nFelems:\n");
		for(auto Felems : setF[F]) 
		{
			printf("[");
			for(auto foo : Felems) printf("%d, ", foo);
			printf("]; ");
		}
		printf("\n\n\n");
		*/
		
		bool found = false;
		for(auto Pelems : setP[P])
		{
			for(auto Celems : setC[C])
			{
				for(auto Felems : setF[F])
				{
					if((Pelems == Celems) && (Celems == Felems)) {found = true; break;}
				}
				if(found) break;
			}
			if(found) break;
		}
		
		if(!found) printf("Case #%d: no\n", test);
		else printf("Case #%d: yes\n", test);
		
		
	}
}

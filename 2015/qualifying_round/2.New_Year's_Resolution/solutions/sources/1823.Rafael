using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace FBHackerCup
{
    public class Problem2
    {
        private static void RecursiveSolve3(int[] goal, int[] currentSum, List<string> included, List<string> notIncluded, int startIndex, List<List<string>> result)
        {
            for (int index = startIndex; index < notIncluded.Count; index++)
            {
                int[] nextValue = notIncluded[index].Split(' ').Select(a => int.Parse(a)).ToArray();

                if (currentSum[0] + nextValue[0] == goal[0] &&
                    currentSum[1] + nextValue[1] == goal[1] &&
                    currentSum[2] + nextValue[2] == goal[2])
                {
                    List<string> newResult = new List<string>(included);
                    newResult.Add(string.Join(" ", nextValue));
                    result.Add(newResult);
                }
                else if (currentSum[0] + nextValue[0] < goal[0] &&
                    currentSum[1] + nextValue[1] < goal[1] &&
                    currentSum[2] + nextValue[2] < goal[2])
                {
                    List<string> nextIncluded = new List<string>(included);
                    nextIncluded.Add(string.Join(" ", nextValue));
                    List<string> nextNotIncluded = new List<string>(notIncluded);
                    nextNotIncluded.Remove(string.Join(" ", nextValue));

                    int sum0 = currentSum[0] + nextValue[0];
                    int sum1 = currentSum[1] + nextValue[1];
                    int sum2 = currentSum[2] + nextValue[2];

                    RecursiveSolve3(goal, new int[] { sum0, sum1, sum2 }, nextIncluded, nextNotIncluded, startIndex++, result);
                }
            }
        }

        public static void Process()
        {
            string filebase = @"c:\temp\fbhackercup\input2.txt";
            string fileresult = @"c:\temp\fbhackercup\output2.txt";
            string[] lines = File.ReadAllLines(filebase);
            
            int totaltc = int.Parse(lines[0]);

            StringBuilder sb = new StringBuilder();
            int pos = 1;

            for (int i = 1; i <= totaltc; i++) // Test Cases
            {
                int[] wantseat = lines[pos].Split(' ').Select(a => int.Parse(a)).ToArray();
                pos++;
                int numfoods = int.Parse(lines[pos]);
                pos++;

                bool caneat = false;
                List<int[]> foodslist = new List<int[]>();
                List<string> foodlist = new List<string>();

                for (int b = pos; b < pos + numfoods; b++)
                {
                    foodslist.Add(lines[b].Split(' ').Select(a => int.Parse(a)).ToArray());
                    foodlist.Add(lines[b]);
                }

                List<List<string>> lista3 = new List<List<string>>();
                RecursiveSolve3(wantseat, new int[] { 0, 0, 0 }, new List<string>(), foodlist, 0, lista3);

                caneat = (lista3.Count > 0);

                pos += numfoods;

                sb.Append(string.Format("Case #{0}: {1}{2}", i, caneat ? "yes" : "no", "\n"));
                Console.WriteLine(string.Format("Case #{0}: {1}", i, caneat ? "yes" : "no"));
            }

            File.WriteAllText(fileresult, sb.ToString());

            Console.ReadLine();
        }
    }
}
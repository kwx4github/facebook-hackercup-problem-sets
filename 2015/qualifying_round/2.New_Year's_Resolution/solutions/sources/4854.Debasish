def getResults(wishpro,wishcarb,wishfat,provalues,carbvalues,fatvalues):
    if reduce(lambda x,y: x+y, provalues) < wishpro\
     or reduce(lambda x,y: x+y, carbvalues) < wishcarb\
      or reduce(lambda x,y: x+y, fatvalues) < wishfat:
            return "no"
    if len(provalues) == len(carbvalues) == len(fatvalues) == 1:
        if wishpro==wishcarb==wishfat==provalues[0]==carbvalues[0]==fatvalues[0]:
            return "yes"

    import itertools
    temp = list(itertools.product([0, 1], repeat=len(provalues)))
    for val in temp:
        if sum([x*y for x,y in zip(list(val),provalues)]) == wishpro:
            if sum([x*y for x,y in zip(list(val),carbvalues)])== wishcarb:
                if sum([x*y for x,y in zip(list(val),fatvalues)]) == wishfat:
                    return "yes"
    return "no"

def eliminateOptions(wishpro,wishcarb,wishfat,provalues,carbvalues,fatvalues):
    delete=[]

    for i in xrange(0,len(provalues)):
        if wishpro != provalues[i]  and wishcarb != carbvalues[i] and wishfat != fatvalues[i]:
            if wishpro < provalues[i]  or wishcarb < carbvalues[i] or wishfat < fatvalues[i] or \
                wishpro - provalues[i] < 10  or wishcarb - carbvalues[i] < 10 or wishfat - fatvalues[i] < 10 :

                delete.append(i)


    return delete

def main():
    generate=[]
    import re
    max2digit=re.compile("^[0-9]{,2}$")
    data={}
    lines = [line.strip() for line in open('input')]

    values=[]
    indices=[]


    for i in xrange (0,len(lines)):

        if max2digit.match(lines[i]):
            indices.append(i)
            values.append(int(lines[i]))

    wishpro={}
    wishcarb={}
    wishfat={}
    provalues={}
    carbvalues={}
    fatvalues={}

    for i in xrange(0,values[0]):
        wishpro[i+1]=int(lines[indices[i+1]-1].split(" ")[0])
        wishcarb[i+1]=int(lines[indices[i+1]-1].split(" ")[1])
        wishfat[i+1]=int(lines[indices[i+1]-1].split(" ")[2])

    options=dict.fromkeys(xrange(1,values[0]+1))

    for i in xrange(1,len(indices)):
        if i==len(indices)-1:
            options[i]=lines[indices[i]+1:]
            break
        options[i]=lines[indices[i]+1:indices[i+1]-1]


    tempcarb=[]
    tempfat=[]
    for i in xrange(0,len(options)):
        temppro=[]
        tempcarb=[]
        tempfat=[]
        for j in xrange(0,len(options[i+1])):
            temppro.append(int(options[i+1][j].split(" ")[0]))
            tempcarb.append(int(options[i+1][j].split(" ")[1]))
            tempfat.append(int(options[i+1][j].split(" ")[2]))
        provalues[i+1]=temppro
        carbvalues[i+1]=tempcarb
        fatvalues[i+1]=tempfat

    assert len(wishpro)==len(wishcarb)==len(wishfat)==len(provalues)==len(carbvalues)==len(fatvalues),"Something is wrong"


    delete_keys={}
    for i in xrange(0,len(wishpro)):
        delete_keys[i+1]=eliminateOptions(wishpro[i+1],wishcarb[i+1],wishfat[i+1],provalues[i+1],carbvalues[i+1],fatvalues[i+1])

    for index in xrange(1,len(provalues)+1):
        provalues[index] = [i for j, i in enumerate(provalues[index]) if j not in delete_keys[index]]
        carbvalues[index] = [i for j, i in enumerate(carbvalues[index]) if j not in delete_keys[index]]
        fatvalues[index] =  [i for j, i in enumerate(fatvalues[index]) if j not in delete_keys[index]]
    assert len(provalues)==len(carbvalues)==len(fatvalues),"Something is wrong"

    for i in xrange(0,len(wishpro)):
        print "Case #{}: {}".format(i+1,getResults(wishpro[i+1],wishcarb[i+1],wishfat[i+1],provalues[i+1],carbvalues[i+1],fatvalues[i+1]))


if __name__ == "__main__":
    main()
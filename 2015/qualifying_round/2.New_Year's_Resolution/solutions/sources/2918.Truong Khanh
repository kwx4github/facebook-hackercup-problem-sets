package tkn.challenge.hackercup2015;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class NewYearResolution {

	private static int proteinToEat;
	private static int carbonToEat;
	private static int fatToEat;
	private static Food[] foods;
	
	public static void main(String[] args){
		String YES = "yes";
		String NO = "no";
		
		Scanner in = new Scanner(System.in);
		
		int T = in.nextInt();
		for(int i = 1; i <= T; i++){
			proteinToEat = in.nextInt();
			carbonToEat = in.nextInt();
			fatToEat = in.nextInt();
			
			int numberOfFoods = in.nextInt();
			foods = new Food[numberOfFoods];
			for(int j = 0; j < numberOfFoods; j++){
				int p = in.nextInt();
				int c = in.nextInt();
				int f = in.nextInt();
				foods[j] = new Food(p, c, f);
			}
			
			Arrays.sort(foods);
			String result = possibleToEat()? YES: NO;
			System.out.println("Case #" + i + ": " + result);
		}
		
		in.close();
	}
	
	public static boolean possibleToEat(){
		int[] P = new int[foods.length];
		for(int i = 0; i < foods.length; i++){
			P[i] = foods[i].getProtein();
		}
		return subsetSum(P, proteinToEat, new HashSet<>(), 0, 0);
	}
	
	/**
	 * 
	 * @param numbers is sorted in increasing order
	 * @param sum
	 * @param indexSelection
	 * @param currentSum
	 * @param i
	 * @return
	 */
	public static boolean subsetSum(int[] numbers, int sum, Set<Integer> indexSelection, int currentSum, int i){
		if(currentSum == sum){
			if(allSumsSatisfied(indexSelection)){
				return true;
			}
		}
		
		if(i < numbers.length){
			if(currentSum + numbers[i] <= sum){
				indexSelection.add(i);
				boolean result = subsetSum(numbers, sum, indexSelection, currentSum + numbers[i], i+1);
				if(result){
					return true;
				}
				indexSelection.remove(i);
				return subsetSum(numbers, sum, indexSelection, currentSum, i+1);
			}
		}
		return false;
	}
	
	private static boolean allSumsSatisfied(Set<Integer> indexSelection){
		int sumProtein = 0;
		int sumCarbon = 0;
		int sumFat = 0;
		for(Integer index: indexSelection){
			sumProtein += foods[index].getProtein();
			sumCarbon += foods[index].getCarbon();
			sumFat += foods[index].getFat();
		}
		
		return sumProtein == proteinToEat && sumCarbon == carbonToEat && sumFat == fatToEat;
	}
	
	public static class Food implements Comparable<Food>{
		public int getProtein() {
			return protein;
		}

		public int getCarbon() {
			return carbon;
		}

		public int getFat() {
			return fat;
		}

		private int protein;
		private int carbon;
		private int fat;
		
		public Food(int p, int c, int f){
			this.protein = p;
			this.carbon = c;
			this.fat = f;
		}
		
		public int compareTo(Food compareFood) {
			return (this.protein - compareFood.protein);
		}
	}
}

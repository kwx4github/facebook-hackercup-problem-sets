// 09.01.2015   FaceBook Hucker Cup



/*
New Year's Resolution (30 points)
Alex's New Year's resolution for 2015 is to eat healthier foods.
He's done some research and has found out that calories come from three main sources, called macronutrients:
protein, carbohydrates, and fat.
Alex wants to get the right balance of protein, carbohydrates, and fat to have a balanced diet.
For each available food, Alex can only choose to eat it or not eat it.
He can't eat a certain food more than once, and he can't eat a fractional amount of a food. 
Input
Input beings with an integer T, the number of test cases.
For each test case, the first line consists of three space-separated integers:
GP, GC, and GF, which represent the amount of protein, carbohydrates, and fat that Alex wants to eat.
The next line has the number of foods for that test case, an integer N.
The next N lines each consist of three space-separated integers: P, C, and F,
which represent the amount of protein, carbohydrates, and fat in that food, respectively. 
Output
For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for Alex
to eat the exact amount of each macronutrient, or "no" if it is not possible. 
Constraints
1 <= T <= 20 
1 <= N <= 20 
10 <= GP, GC, GF <= 1000 
10 <= P, C, F <= 1000 

5
100 100 100
1
100 100 100
100 100 100
3
10 10 40
10 30 10
10 60 50
100 100 100
5
40 70 30
30 10 40
20 20 50
10 50 90
40 10 20
292 264 512
20
909 302 261
705 597 823
291 51 126
28 697 57
593 31 826
311 256 57
292 14 47
29 730 716
12 529 146
768 16 439
37 472 15
350 192 34
163 468 238
69 173 10
203 72 690
424 875 213
223 593 292
151 46 10
88 90 16
773 653 711
991 827 352
20
29 560 929
139 681 102
144 853 10
84 729 80
218 20 67
140 80 901
428 20 500
520 970 128
422 419 30
413 101 192
467 448 501
32 939 684
34 20 38
251 317 132
588 437 10
648 21 79
391 25 14
499 22 24
854 77 361
405 25 20

Case #1: yes
Case #2: no
Case #3: yes
Case #4: no
Case #5: yes


*/


# include <iostream>
# include <iomanip>
# include <cmath>
# include <cstring>
# include <cstdio>


# include <vector>
# include <queue>
# include <algorithm>

using namespace std;



//================================================
//

//# define MY_JUDGE

//
//================================================


# include <stdio.h>
# include <math.h>
# include <string.h>



# define iabs(x) ( (x) < 0 ? (-(x)) : (x) )
# define imax(x,y) ( (x) < (y) ? (y) : (x) )
# define imin(x,y) ( (x) > (y) ? (y) : (x) )
# define sqr(x) ((x)*(x))

# define isalpha(c) ( (c) >= 'a' && (c) <= 'z' )
# define isAlpha(c) ( (c) >= 'A' && (c) <= 'Z' )
# define isdigit(c) ( (c) >= '0' && (c) <= '9' )

# define alpha(c) ( isalpha (c) ? (c) : ( isAlpha (c) ? (c) - 'A' + 'a' : (c) ) )
# define Alpha(c) ( isAlpha (c) ? (c) : ( isalpha (c) ? (c) - 'a' + 'A' : (c) ) )

//# define alpha(c) ( (c) - 'A' + 'a' )
//# define Alpha(c) ( (c) - 'a' + 'A' )

# define NUM(r,c) ( ((r) << 8) + (c) )
# define ROW(n) ( (n) >> 8 )
# define COL(n) ( (n) & 0XFF )

# define CHECK(r,c) ( (r) >= 0 && (r) < n && (c) >= 0 && (c) < m )


# define between(a,b,c) ( (a) > (b) && (a) < (c) )
# define Between(a,b,c) ( (a) >= (b) && (a) <= (c) )




# define x  X
# define y  Y
# define x1 X1
# define y1 Y1
# define x2 X2
# define y2 Y2


typedef pair <int, int>          Pair;
typedef long long int            Long;
typedef unsigned int             uint;
typedef unsigned long long int   ULong;
typedef unsigned char            uchar;
typedef pair <int, Pair>         Trio;



/*
   *****************  Main IDEA  *******************

перебираем (до 2 в 20-й = 1000000) всех комбинаций
для каждой считаем сумму 3-х и сравниваем с заданной тройкой
если нашли - выход ЙЕС
если конец, то НАЙН

   *************************************************
*/

const int N = 21;
const int M = 250;
const int K = 32;



int n, m, gp, gh, gf, k, l, kk, t, p2, k1, k2;
int p [N], h [N], f [N], c [N];
bool ok;


void PrintData ();
void Calculate ();
void Input ();
void Print (int i);

int main ()
{
   freopen ("B.txt", "r", stdin);
   freopen ("B.out", "w", stdout);

   Input ();

   Calculate ();

   return 0;
}

void Calculate ()
{
   int sp, sh, sf;
   for ( int tt=1, i, d, j; tt <= t; tt++ )
   {
      ok = false;

      scanf ("%d %d %d\n", &gp, &gh, &gf);
      scanf ("%d\n", &n);
      for ( i=0; i < n; i++ )
      {
         scanf ("%d %d %d\n", &p [i], &h [i], &f [i]);
         c [i] = 0;
      }


# ifdef MY_JUDGE
   PrintData ();
# endif

      for ( d=0; d < 1; )
      {
         d = 1;
         for ( i=n-1; i >= 0 && d > 0; i-- )
         {
            c [i] += d;
            d = c [i]/2;
            c [i] = c [i]%2;
         }
/*
# ifdef MY_JUDGE
   for ( i=0; i < n; i++ )
      printf ("%d", c [i]);
   printf ("\n");
# endif
*/
         sp = 0, sh = 0, sf = 0;
         for ( i=0; i < n; i++ )
            if ( c [i] )
               sp += p [i],
               sh += h [i],
               sf += f [i];

         if ( sp == gp && sh == gh && sf == gf )
         {
            ok = true;
# ifdef MY_JUDGE
   for ( i=0; i < n; i++ )
      printf ("%d", c [i]);
   printf ("\n");
# endif
            break;
         }
      }

      Print (tt);
   }
}

void Input ()
{
   scanf ("%d\n", &t);
}

void Print (int i)
{
   printf ("Case #%d: ", i);
   if ( ok )
      printf ("yes\n");
   else
      printf ("no\n");
//   printf ("\n");
}

void PrintData ()
{
   printf ("gp=%d gh=%d gf=%d\n", gp, gh, gf);
   printf ("n=%d\n", n);
   for ( int i=0; i < n; i++ )
      printf ("%2d] %5d %5d %5d\n", i, p [i], h [i], f [i]);
   printf ("\n");
}

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class NewYear {
	static BufferedReader in;
	static BufferedWriter out;
	static int T, N, P, C, F;
	static boolean flag;
	static MacroNutrients[] arr;
	static NewYear ny;

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new FileReader("input.txt"));
			out = new BufferedWriter(new FileWriter("output.txt"));
			T = Integer.parseInt(in.readLine());
			for (int i = 1; i <= T; i++) {
				flag = false;
				out.write("Case #" + i + ": ");
				printOutput();
				if (flag) out.write("yes");
				else out.write("no");
				out.newLine();
			}
			out.close();
		} catch (IOException e) {
			System.out.println("IOError");
		}
	}

	public static void printOutput() throws IOException {
		String line = in.readLine();
		String cals[] = line.split(" ");
		P = Integer.parseInt(cals[0]);
		C = Integer.parseInt(cals[1]);
		F = Integer.parseInt(cals[2]);
		N = Integer.parseInt(in.readLine());
		arr = new MacroNutrients[N];
		ny = new NewYear();
		for (int k = 0; k < N; k++) {
			line = in.readLine();
			cals = line.split(" ");
			MacroNutrients mn = ny.new MacroNutrients(
					Integer.parseInt(cals[0]), Integer.parseInt(cals[1]),
					Integer.parseInt(cals[2]));
			arr[k] = mn;
		}
		isPossibleToEat(ny.new MacroNutrients(0, 0, 0), 0);
	}

	public static void isPossibleToEat(MacroNutrients mn, int i) {
		if (mn.c == C && mn.p == P && mn.f == F) {
			flag = true;
			return;
		}
		if (i >= N)
			return;
		MacroNutrients with = ny.new MacroNutrients(mn.p + arr[i].p, mn.c
				+ arr[i].c, mn.f + arr[i].f);
		MacroNutrients without = ny.new MacroNutrients(mn.p, mn.c, mn.f);
		if (!flag) {
			isPossibleToEat(with, i + 1);
			isPossibleToEat(without, i + 1);
		}
	}

	public class MacroNutrients {
		int p;
		int c;
		int f;

		public MacroNutrients(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}
	}
}

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;

public class NewYearResolution {
	public static int targetProt = 991;
	public static int targetCarb = 827;
	public static int targetFat = 352;
	public static int[] numsProt = { 29, 139, 144, 84, 218, 140, 428, 520, 422,
			413, 467, 32, 34, 251, 588, 648, 391, 499, 854, 405 };
	public static int[] numsCarb = { 560, 681, 853, 729, 20, 80, 20, 970, 419,
			101, 448, 939, 20, 317, 437, 21, 25, 22, 77, 25 };
	public static int[] numsFat = { 92, 102, 10, 80, 67, 901, 500, 128, 30,
			192, 501, 684, 38, 132, 10, 79, 14, 24, 361, 20 };

	public static void main(String[] args) throws FileNotFoundException,
			IOException {
		PrintWriter writer = new PrintWriter(
				"C:\\Users\\soshah\\Downloads\\hackercup\\new_year_resolution\\new_years_resolution_output.txt",
				"UTF-8");
		int counter = 1;
		try (BufferedReader br = new BufferedReader(
				new FileReader(
						"C:\\Users\\soshah\\Downloads\\hackercup\\new_year_resolution\\new_years_resolution.txt"))) {
			Integer testCaseSize = Integer.valueOf(br.readLine());

			for (; counter <= testCaseSize; counter++) {
				String nutrientsRequired = br.readLine();
				String[] nuteReq = nutrientsRequired.split(" ");
				targetProt = Integer.valueOf(nuteReq[0]);
				targetCarb = Integer.valueOf(nuteReq[1]);
				targetFat = Integer.valueOf(nuteReq[2]);
				int noOfFood = Integer.valueOf(br.readLine());
				numsProt = new int[noOfFood];
				numsCarb = new int[noOfFood];
				numsFat = new int[noOfFood];
				for (int i = 0; i < noOfFood; i++) {
					String currentFood = br.readLine();
					String[] curFoodNute = currentFood.split(" ");
					numsProt[i] = Integer.valueOf(curFoodNute[0]);
					numsCarb[i] = Integer.valueOf(curFoodNute[1]);
					numsFat[i] = Integer.valueOf(curFoodNute[2]);
				}
				writer.print("Case #"
						+ counter
						+ ": "
						+ (addForCombination(numsProt, numsCarb, numsFat, 0, 0,
								0, 0) ? "yes" : "no") + "\r");
			}
		}
		writer.close();
	}

	private static boolean addForCombination(int[] numsProt, int[] numsCarb,
			int[] numsFat, int totProt, int totCarb, int totFat, int count) {
		for (int i = count; i < numsProt.length; i++) {
			if (totProt + numsProt[i] < targetProt
					&& totCarb + numsCarb[i] < targetCarb
					&& totFat + numsFat[i] < targetFat) {
				if (addForCombination(numsProt, numsCarb, numsFat, totProt
						+ numsProt[i], totCarb + numsCarb[i], totFat
						+ numsFat[i], i + 1)) {
					return true;
				}
			} else if (totProt + numsProt[i] == targetProt) {
				if (totCarb + numsCarb[i] == targetCarb
						&& totFat + numsFat[i] == targetFat) {
					return true;
				}
			}
		}
		return false;
	}
}

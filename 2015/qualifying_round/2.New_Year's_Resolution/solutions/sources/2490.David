// New Year's Resolution entry by David Haaga

fs = require('fs');

var INPUTFILE = "./ny-data/nyinput.txt",
    OUTPUTFILE = "./ny-data/nyoutput.txt",
    dev = false;

var x = fs.readFile(INPUTFILE, 'utf8', processData);


console.log(string2int(['1', '2', '3']));

function processData(error, data) {
    if (!error) {
    
    // Array mit allen Zeilen:
    var zdata = data.split('\n');
        
    // Anzahl Testcases
    var line = 0,
        anzahl = parseInt(zdata[line++]),
        results = "";
        
        console.log('Zeilen insgesamt: '+zdata.length);
        
    for (var i = 1; i <= anzahl; i++) {

        var goal = string2int(zdata[line++].split(' '));
        console.log(line, "Goal ", goal);
        var Gp = goal[0], 
            Gc = goal[1], 
            Gf = goal[2], 
            // Nummer an foodItems des jeweiligen Daten-Sets
            N = parseInt(zdata[line++]);
        console.log(line, 'N ', N);
        
        var foodItemList = [];
        
        for(var fi = 0; fi < N; fi++) {
            a = string2int(zdata[line++].split(' '));
            console.log(line, a);
            foodItemList.push(a);
        };
              
        console.log("Goal ", goal , "\nN " + N);
        console.log("foodItemList \n")
        console.log(foodItemList);
        //line= line + N+1;
        console.log(line);
        
        results += 'Case #' + i + ': ' + solveCase(foodItemList, goal) + '\n';
        
        
    };
                
    
    fs.writeFileSync(OUTPUTFILE, results);
        
            
    } else { console.log('oh oh.');};
    
};

function string2int(shallowList) {
    if (!Array.isArray(shallowList)) {
        console.log("Oh, string2int wurde nicht mit einem Array aufgerufen!");
        console.log(typeof shallowList);
        throw "shallowlist muss Array sein";
    } else {
        var result = [];
        for (e in shallowList) {
            result.push(parseInt(shallowList[e]));
        };
        if (result.length != shallowList.length) throw "Serious problem with string2List";
        return result;
    
    };

}


// ********************* REC ***********************


function solveCase(foodItemList, goal) {
    
    var zeitpunktA = new Date(),
        result;
    
        
    if (dev) console.log(foodItemList, foodItemList.length);


    var solution = makeArray(foodItemList);

    if (dev) console.log('Start '+solution + '\n');


    result = iter(solution,0, foodItemList, goal) ? "yes" : "no";
    
    console.log("Case :" + result);

    if (dev) console.log("================== \n* Statistik \n")
    

    var zeitpunktB = new Date();

    console.log('* Dauer ', zeitpunktB-zeitpunktA, " ms");
    
    return result;
    
}




function sameArray(a,b) {
    return a.join() == b.join();
}

function evalSolution(foodItems, goal, solutionSet) {
    
    if (foodItems.length != solutionSet.length) throw "evalSolution: Ungleiche Anzahl in foodItems und solution Arrays!";

    var meal = makeArray(goal);
        
    // Für jedes Lebensmittel...
    for (var i = 0; i < solutionSet.length; i++) {
        
        // ... das auf dem Menu steht...
        if (solutionSet[i]) {
        
            //werden alle Nährstoffe dem Meal hinzugefügt
            for (var n = 0; n < goal.length; n++) {
                
                meal[n] += foodItems[i][n];
            };
                        
        };
    };
    
            
    // return true if meal meets goal
    return sameArray(meal, goal);
    
}


function makeArray(foodItems) {
    var N = foodItems.length,
        resultArray = [];
    for (var z = 0; z< N; z++) {
        resultArray.push(0);
    };
    
    return resultArray;

}


function iter(solArray, i, foodItemList, goal) {
    /* I know, the "combinatorics" are really, really bad...
        
    Was hier fehlt: a ist GLOBAL! Sollte übergeben werden.
    
    Was hier überflüssig ist: solArray wird nicht gebraucht.
    
    */
    //count++; // measures my shame bc missing "optimization"
        
    var isSolution = evalSolution(foodItemList, goal, solArray);
    
    if (isSolution) {
        console.log("Case #x: true", solArray);
        return true;
    };
    
    if (i>=solArray.length) return false;
    
    var aArray = solArray.slice();
    var bArray = solArray.slice();
    
    aArray[i] = 1;
    
    return (iter(aArray, i+1, foodItemList, goal) || iter(bArray, i+1, foodItemList, goal));
        
}









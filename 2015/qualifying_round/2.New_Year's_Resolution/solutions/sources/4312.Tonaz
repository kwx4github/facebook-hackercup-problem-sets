package Problems;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class NewYearsResolution {

    private static final String SOLUTION_TAG_1 = "Case #";
    private static final String SOLUTION_TAG_2 = ": ";
    private static final String FILE_NAME
            = "new_years_resolution.txt";
    
    static class Case {

        private int proteinLimit;
        private int carbohydratesLimit;
        private int fatLimit;
        private boolean hasSolution = false;
        
        private List<Food> options = new ArrayList<Food>();

        public int getProteinLimit() {
            return proteinLimit;
        }

        public void setProteinLimit(int proteinLimit) {
            this.proteinLimit = proteinLimit;
        }

        public int getCarbohydratesLimit() {
            return carbohydratesLimit;
        }

        public void setCarbohydratesLimit(int carbohydratesLimit) {
            this.carbohydratesLimit = carbohydratesLimit;
        }

        public int getFatLimit() {
            return fatLimit;
        }

        public void setFatLimit(int fatLimit) {
            this.fatLimit = fatLimit;
        }

        public List<Food> getOptions() {
            return options;
        }

        public void addOption(Food option) {
            this.options.add(option);
        }

        public void addOptions(List<Food> options) {
            this.options.addAll(options);
        }

        public boolean hasSolution() {
            return hasSolution;
        }

        public void setHasSolution(boolean hasSolution) {
            this.hasSolution = hasSolution;
        }
        
    }

    static class Food {

        private int proteins;
        private int carbohydrates;
        private int fat;

        public Food(int proteins, int carbohydrates, int fat) {
            this.proteins = proteins;
            this.carbohydrates = carbohydrates;
            this.fat = fat;
        }

        public int getProteins() {
            return proteins;
        }

        public void setProteins(int proteins) {
            this.proteins = proteins;
        }

        public int getCarbohydrates() {
            return carbohydrates;
        }

        public void setCarbohydrates(int carbohydrates) {
            this.carbohydrates = carbohydrates;
        }

        public int getFat() {
            return fat;
        }

        public void setFat(int fat) {
            this.fat = fat;
        }

    }

    static void backtrackingSolutionsRecursive(List<Food> foods, Case kase,
            List<Food> partial) {
        
        int sumProteins = 0;
        int sumCarbohydrates = 0;
        int sumFat = 0;

        for (Food x : partial) {
            sumCarbohydrates += x.carbohydrates;
            sumProteins += x.proteins;
            sumFat += x.fat;
        }

        if (sumProteins == kase.getProteinLimit()
                && sumCarbohydrates == kase.getCarbohydratesLimit()
                && sumFat == kase.getFatLimit()) {
            kase.setHasSolution(true);
            return;
        }

        if (sumProteins < kase.getProteinLimit()
                && sumCarbohydrates < kase.getCarbohydratesLimit()
                && sumFat < kase.getFatLimit()) {

            for (int i = 0; i < foods.size(); i++) {

                ArrayList<Food> remaining = new ArrayList<Food>();
                Food n = foods.get(i);

                for (int j = i + 1; j < foods.size(); j++) {
                    remaining.add(foods.get(j));
                }

                ArrayList<Food> partial_rec = new ArrayList<Food>(partial);
                partial_rec.add(n);
                
                backtrackingSolutionsRecursive(remaining,
                        kase, partial_rec);
            }
        }
        
    }

    public static boolean backtrackingSolutions(Case kase) {
        backtrackingSolutionsRecursive(kase.options, kase, new ArrayList<Food>());
        return kase.hasSolution();
    }

    public static String readFile() {

        String everything = "";

        try {
            BufferedReader br = new BufferedReader(new FileReader(FILE_NAME));
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
                line = br.readLine();
            }
            everything = sb.toString();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewYearsResolution.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewYearsResolution.class.getName()).log(Level.SEVERE, null, ex);
        }
        return everything;
    }

    public static void printSolution(Boolean flag, int caseNumber) {
        
        StringBuffer output = new StringBuffer(SOLUTION_TAG_1 + caseNumber + SOLUTION_TAG_2);
        if(flag){
            output.append("yes");
        } else {
            output.append("no");
        }
        
        System.out.println(output.toString());
    }

    public static void main(String args[]) {

        Scanner in = new Scanner(readFile());
        int T = in.nextInt();

        for (int i = 0; i < T; i++) {
            Case kase = new Case();
            kase.setProteinLimit(in.nextInt());
            kase.setCarbohydratesLimit(in.nextInt());
            kase.setFatLimit(in.nextInt());
            int optionsTotal = in.nextInt();
            for (int j = 0; j < optionsTotal; j++) {
                Food newOption = new Food(in.nextInt(), in.nextInt(), in.nextInt());
                kase.addOption(newOption);
            }
            boolean flag = NewYearsResolution.backtrackingSolutions(kase);
            NewYearsResolution.printSolution(flag, i + 1);

        }
    }
}

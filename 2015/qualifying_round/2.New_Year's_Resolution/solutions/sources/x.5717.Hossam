#include <stdio.h>
#include <stdbool.h>

bool isEdible(int p[], int c[], int f[], int counter, int sump, int sumc, int sumf, int n, int excluded);

int gp, gc, gf;

int main(void)
{
    // get T
    int t = 0;
    scanf("%i", &t);
    
    // iterate over each case
    for (int i = 1; i <= t; i++)
    {
        // get GP, GC, and GF
        scanf("%i %i %i", &gp, &gc, &gf);
        
        // get N
        int n;
        scanf("%i", &n);
        
        // arrays for all possible meals
        int p[n], c[n], f[n];
        int counter = 0;
        
        // temporary storage
        int bufferp, bufferc, bufferf;
               
        // iterate over each meal
        for (int i = 0; i < n; i++)
        {
            // get P, C, and F
            scanf("%i %i %i", &bufferp, &bufferc, &bufferf);
            
            // add them to the array if edible
            if(bufferp <= gp && bufferc <= gc && bufferf <= gf)
            {
                p[counter] = bufferp;
                c[counter] = bufferc;
                f[counter] = bufferf;
                counter++;
            }    
        }
        
        // brute force attack
        bool found = false;
        printf("Case #%i: ", i);
        for (int i = 0; i <= n; i++)
        {
            if (isEdible(p, c, f, counter, 0, 0, 0, i, -1))
            {
                printf("yes\n");
                found = true;
                break;
            }
        }
        if(!found)
        {
            printf("no\n");
        }
        
    } 
}

/*
* returns true if a combination of meals can be eaten to give exactly the desired goals
* else false
*/
bool isEdible(int p[], int c[], int f[], int counter, int sump, int sumc, int sumf, int n, int excluded)
{
    // iterate over each meal
    int finalp = sump, finalc = sumc, finalf = sumf;
    if (n < 1)
    {
        for (int i = 0; i < counter; i++)
        {
            if (sump + p[i] == gp && sumc + c[i] == gc && sumf + f[i] == gf && i != excluded)
            {
                return true;
            }  
        }
        return false;
    }
    for (int j = 0; j < counter; j++)
    {
        sump = finalp; sumc = finalc; sumf = finalf;
        sump += p[j];  sumc += c[j];  sumf += f[j];
        if (sump > gp || sumc > gc || sumf > gf)
            break;
        if (isEdible(p, c, f, counter, sump, sumc, sumf, n - 1, j))
            return true;      
    }
    return false;  
}

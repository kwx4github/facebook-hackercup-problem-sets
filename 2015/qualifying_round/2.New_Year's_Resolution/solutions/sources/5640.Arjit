
#include <bits/stdc++.h>

/* 
 *    Always code as if the guy who ends up maintaining your code will be a
 *    violent psychopath who knows where you live.
 *       â€” Rick Osborne
 *           */

using namespace std;

/*Template Part begins, only the important ones. */

#define all(v) v.begin(),v.end()
#define read(a) freopen("a.txt","r",stdin)
#define write(b) freopen("b.txt","w",stdout)
#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define min4(a,b,c,d) min(min(a,b),min(c,d))
#define max4(a,b,c,d) max(max(a,b),max(c,d))
#define maxall(v) *max_element(all(v))
#define minall(v) *min_element(all(v))
#define pb push_back
#define mk make_pair
#define REV(x) reverse(x.begin(),x.end())
#define SORT(v) sort(all(v))
#define UN(v) SORT(v), (v).earse(unique(all(v)),v.end())
#define common(a,b) SORT(a), SORT(b), a.erase(set_intersection(all(a),all(b),a.begin()),a.end())
#define uncommon(a,b) SORT(a), SORT(b), a.erase(set_symmetric_difference(all(a),all(b),a.begin()),a.end())
#define FILL(a,d) memset(a,d,sizeof(a))
#define LL long long
#define PI 2*acos(0.0)
#define pi pair<int,int>
#define MAXM 2147483647
#define MAXML 9223372036854775807LL
#define MODM 1000000007

int binarySearch(vector < int > arr, int l, int r, int x) { while (l <= r){int m = l + (r-l)/2; if (arr[m] == x) return m; if (arr[m] < x) l = m + 1; else r = m - 1; return -1; }}
LL gcd(LL a, LL b){if(a==0)return(b);else return(gcd(b%a,a));}
LL fastpow(LL a, LL n, LL temp){if(n==0) return(1);if(n==1)return((a*temp)%MODM); if(n&1)temp=(temp*a)%MODM;return(fastpow((a*a)%MODM,n/2,temp));}



int main() {
	int tc;
	scanf("%d",&tc);
	int cnt = 0;
	while (tc--) {
		cnt++;
		int cgp,cgc,cgf,n;
		scanf("%d%d%d",&cgp,&cgc,&cgf);
		scanf("%d",&n);

		int p[n];
		int c[n];
		int f[n];

		for (int i=0; i<n; i++) {
			scanf("%d%d%d",&p[i],&c[i],&f[i]);
		}

		int csp=0, csc=0, csf=0;
		string ans = "no";

		for (int i=0; i<(1<<n); i++) {
			csp = 0;
			csc = 0;
			csf = 0;
			for (int j=0; j<n; j++) {
				if ((1<<j)&i) {
					csc+=c[j];
					csf+=f[j];
					csp+=p[j];
				}
			}
			if (csp==cgp and csc==cgc and csf==cgf)  {
				ans = "yes";
			}
		}

		//if (csp==cgp and csc==cgc and csf==cgf)  {
		//			cout << "Case #" << cnt << ": " << "ye << endl;
		//		}
		//		else {
		cout << "Case #" << cnt << ": " << ans << endl;
		//		}
	}	
	return 0;
}

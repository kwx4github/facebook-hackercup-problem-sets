#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Nut {
    int p, c, f;
    Nut operator-(const Nut& other) {
        Nut n;
        n.p = p - other.p;
        n.c = c - other.c;
        n.f = f - other.f;
        return n;
    }
};

int d = 0;
bool b = false;
string h = "";

bool poss(Nut& target, vector< Nut >& set, size_t i) {
    
    if (b)
    cout << h << target.p << ' ' << target.c << ' ' << target.f << endl;
    
    if (target.p < 0 || target.c < 0 || target.f < 0)
        return false;

    if (target.p == 0 && target.c == 0 && target.f == 0)
        return true;

    if (set.size() == i)
        return false;

    // Lose
    h += '-';
    bool res1 = (poss(target, set, i + 1));
    h.erase(--h.end());
    if (res1)
        return true;

    // Use
    h += '+';
    Nut n = target - set[i];
    bool res = poss(n, set, i + 1);
    h.erase(--h.end());
    return res;
}

int main() {
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        Nut target;
        d = 0;
        cin >> target.p >> target.c >> target.f;
        vector< Nut > set;
        int cnt;
        cin >> cnt;
        for (int j = 0; j < cnt; ++j) {
            Nut nut;
            cin >> nut.p >> nut.c >> nut.f;
            set.push_back(nut);
        }

        bool res = poss(target, set, 0);
        string ans = res ? "yes" : "no";
        cout << "Case #" << i << ": " << ans << endl;

    }
}

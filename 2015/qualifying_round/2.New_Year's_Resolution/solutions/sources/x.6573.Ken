#include <stdio.h>

/* The problem to solve is to find a subset A' of A where the sum of A' is a given t. t and the
 * elments of A are tuples of three integers between and including 10 and 1000. A will contain
 * 20 elements at most and we will at most solve 20 problems. The solution takes a dynamic 
 * programming approach with a worst case of n*n additions and memory used. This seems
 * reasonable with the problem sizes at hand.
 */

int
HasSolution(int *target, int size, int *inputs) {
	// This accounts for worst case. We don't expect to use all of it.

	int fullSize = size * 3;
	int partialSolutions[fullSize * fullSize + 100];
	int solutionCount = 0;
	for (int i = 0; i < size; ++i) {
		int in1 = inputs[i*3 + 0];
		int in2 = inputs[i*3 + 1];
		int in3 = inputs[i*3 + 2];
		
		if (in1 == target[0] && in2 == target[1] && in3 == target[2]) {
			return 1;
		}
		else if (in1 <= target[0] && in2 <= target[1] && in3 <= target[2]){
			int solutionSkip = 0;
			partialSolutions[solutionCount*3 + 0] = in1;
			partialSolutions[solutionCount*3 + 1] = in2;
			partialSolutions[solutionCount*3 + 2] = in3;
		
			for (int ii = 0; ii < solutionCount; ++ii) {
				int p1 = partialSolutions[ii*3 + 0] + in1;
				int p2 = partialSolutions[ii*3 + 1] + in2;
				int p3 = partialSolutions[ii*3 + 2] + in3;

				if (p1 == target[0] && p2 == target[1] && p3 == target[2]) {
					return 1;
				}
				else if (p1 <= target[0] && p2 <= target[1] && p3 <= target[2]){
					partialSolutions[solutionCount*3 + ii*3 + 3] = p1;
					partialSolutions[solutionCount*3 + ii*3 + 4] = p2;
					partialSolutions[solutionCount*3 + ii*3 + 5] = p3;
				}
				else {
					solutionSkip++;
				}
			}

			solutionCount += solutionCount + 1 - solutionSkip;
		}
	}

	return 0;
}

int 
ReadInt(FILE *file) {
	int output = 0;
	char current = fgetc(file);

	while (current >= '0' && current <= '9') {
		output *= 10;
		output += (current - '0');
		current = fgetc(file);
	}

	return output;
}

int
ReadAndSolve(FILE *file) {
	int target[3] = {ReadInt(file), ReadInt(file), ReadInt(file)};
	int size = ReadInt(file);
	int inputs[size*3];
	for (int ii = 0; ii < size*3; ++ii) {
		inputs[ii] = ReadInt(file);
	}

	return HasSolution(target, size, inputs);
}

int 
main(int argc, char *argv[]) {
	/* We define the following syntax for the command line arguments:
	     [0] The name of the program (automatically provided by C)
	     [1] The file path to the problem set
	     [2] The file path to where the solutions will be written
	 */

	FILE *serializedProblems = fopen(argv[1], "r");
	int problemCount = ReadInt(serializedProblems);
	
	FILE *output = fopen(argv[2], "w");
	for (int i = 0; i < problemCount; ++i) {
		fprintf(output, "Case #%d: %s\n", i + 1, ReadAndSolve(serializedProblems) ? "yes" : "no");
	}

	fclose(serializedProblems);
}
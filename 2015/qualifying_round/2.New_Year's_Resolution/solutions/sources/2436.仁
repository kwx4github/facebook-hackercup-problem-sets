#include <cstdint>
#include <iostream>
#include <vector>
using namespace std;
typedef int64_t int64;

class Solver {
 public:
  void Input();
  void Solve();
  void Output(int t);
 private:
  int64 goal;
  int n;
  vector<int64> cal;
  bool possible;
};

void Solver::Input() {
  int64 gp, gc, gf;
  cin >> gp >> gc >> gf;
  goal = (gp << 40) + (gc << 20) + gf;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    int64 p, c, f;
    cin >> p >> c >> f;
    cal.push_back((p << 40) + (c << 20) + f);
  }
}

void Solver::Solve() {
  possible = false;
  for (int64 bits = 0; bits < (1LL << n); ++bits) {
    int64 sum = 0;
    for (int i = 0; i < n; ++i) {
      if ((bits >> i) & 1)
        sum += cal[i];
    }

    if (sum == goal) {
      possible = true;
      break;
    }
  }
}

void Solver::Output(int t) {
  cout << "Case #" << t << ": " << (possible ? "yes\n" : "no\n");
}

int main(void) {
  int T;
  cin >> T;

  vector<Solver> solver(T);
  for (int i = 0; i < T; ++i)
    solver[i].Input();
  for (int i = 0; i < T; ++i)
    solver[i].Solve();
  for (int i = 0; i < T; ++i)
    solver[i].Output(i + 1);
    
  return 0;
}

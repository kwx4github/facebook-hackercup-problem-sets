#include <iostream>
#include <vector>

using namespace std;

struct food_t {
  int p, c, f;
};

bool enumerate_all(int pos, int p, int c, int f, const vector<food_t>& food) {
  if (pos == (int) food.size()) {
    return p == 0 && c == 0 && f == 0;
  } else {
    if (enumerate_all(pos + 1, p, c, f, food)) {
      return true;
    }
    p -= food[pos].p;
    c -= food[pos].c;
    f -= food[pos].f;
    return enumerate_all(pos + 1, p, c, f, food);
  }
}

const char* solve(int p, int c, int f, const vector<food_t>& food) {
  if (enumerate_all(0, p, c, f, food)) {
    return "yes";
  } else {
    return "no";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  int t;
  vector<food_t> food;
  cin >> t;
  for (int test_case = 1; test_case <= t; ++test_case) {
    int p, c, f;
    cin >> p >> c >> f;
    int n;
    cin >> n;
    food.resize(n);
    for (int i = 0; i < n; ++i) {
      cin >> food[i].p >> food[i].c >> food[i].f;
    }
    cout << "Case #" << test_case << ": " << solve(p, c, f, food) << '\n';
  }
  return 0;
}

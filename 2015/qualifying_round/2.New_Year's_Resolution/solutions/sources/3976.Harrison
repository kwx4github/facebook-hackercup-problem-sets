#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
using namespace std;

vector<vector<int> > total;
void combinations (int v[], int start, int n, int k, int maxk) {
        int     i;

        /* k here counts through positions in the maxk-element v.
         * if k > maxk, then the v is complete and we can use it.
         */
        if (k > maxk) {
                /* insert code here to use combinations as you please */
                for (i=1; i<=maxk; i++) {
                	printf ("%i ", v[i]);
//                	c.push_back(v[i]);

                }
                std::vector<int> c(v+1, v+1+ maxk);
        		total.push_back(c);
                printf ("\n");
                return;
        }

        /* for this k'th element of the v, try all start..n
         * elements in that position
         */
        for (i=start; i<=n; i++) {

                v[k] = i;

                /* recursively generate combinations of integers
                 * from i+1..n
                 */
                combinations (v, i+1, n, k+1, maxk);
        }
}

int main (int argc, char *argv[]) {
        int     v[100], n, k;

//        if (argc != 3) {
//                printf ("Usage: %s n k\n", argv[0]);
//                exit (1);
//        }
//        n = atoi (argv[1]);
//        k = atoi (argv[2]);

        /* generate all combinations of n elements taken
         * k at a time, starting with combinations containing 1
         * in the first position.
         */
        for(int k=1; k<=5; k++)
        	combinations (v, 1, 5, 1, k);
        cout << "=================";
        for(int i=0; i<total.size(); i++){
        	for(int j=0; j<total[i].size(); j++){
        		cout << total[i][j] << ' ';
        	}
        	cout << '\n';
        }
        exit (0);
}

var fs = require('fs'),
    debug = true;

fs.readFile('solve-2.in', {encoding: 'utf-8'}, function(err, data) {
    if (err) throw  err;
    main(data.split("\r\n"));
});

function _log(data)
{
    if ( debug ) {
        console.log(data);
    }
}

function _normalize(_d)
{
    for ( var k = 0, n = _d.length; k < n; ++k ) {
        _d[k] = parseInt(_d[k]);
    }
    return _d;
}

function main(data) {
    var res = '', response = '',
        cases = data.shift();
    for ( var i = 1; i <= cases; i++) {

        var G = _normalize(data.shift().split(' ')),
            N = parseInt(data.shift()),
            Data = [];

        for ( var j = 0; j < N; j++ ) {
            Data[j] = _normalize(data.shift().split(' '));
        }

        res = 'Case #' + i + ': ' + solve(G, N, Data);

        _log(res);

        response += res + "\n";
    }
    fs.writeFileSync('out-2.txt', response);
}

function deef(ar, sm, r)
{
    var res = [];
    for ( var i = r, N = ar.length; i < N; i++ ) {
        if ( ar[i] != 0 ) {
            if ( ar[i] + sm == SUM[0] ) {
                for (var j = 0; j < N; j++) {
                    if (ar[j] == 0 || j == i) {
                        res.push(j);
                    }
                }
                result.push(res);
            } else if ( ar[i] + sm <= SUM[0] ) {
                var d = ar[i] + sm;
                var br = ar.slice(0);
                br[i] = 0;
                deef(br, d, i + 1);
            }
        }
    }
}
var SUM = [],
    A = [],
    result = [];
function solve(G, N, Data)
{
    A = [];
    result = [];
    for ( var i = 0; i < N; i++ ) {
        A[i] = Data[i][0];
    }
    SUM[0] = G[0];
    deef(A.slice(0), 0, 0);

    //_log(result);

    if ( result.length > 0 ) {
        for ( var k = 0, RL = result.length; k < RL; k++ ) {
            SUM[1] = 0;
            SUM[2] = 0;
            var row = result[k];
            for ( var l = 0, RowL = row.length; l < RowL; l++ ) {
                var key = row[l];
                SUM[1] += Data[key][1];
                SUM[2] += Data[key][2];
            }
            if ( SUM[1] == G[1] || SUM[2] == G[2]) {
                return 'yes';
            }
        }
    }
    return 'no';
}

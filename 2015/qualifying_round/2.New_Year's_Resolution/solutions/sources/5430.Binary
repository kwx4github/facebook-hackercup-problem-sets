#include <stdio.h>
#include <stdlib.h>

typedef struct {
	int P, C, F;
} Food;

int canGetExact(Food * G, int N, Food * foods) {
	int eat[20] = {0};
	Food eaten = {0,0,0};
	int pos = 0;
	while (pos >= 0) {
		int P, C, F;
		switch (eat[pos]) {
		case 0: //not considered
			eat[pos] = 1; //try not eat first;
			break;
		case 1: //considered not eat
			//see if eatable
			P = foods[pos].P + eaten.P;
			C = foods[pos].C + eaten.C;
			F = foods[pos].F + eaten.F;
			if (P == G->P && C == G->C && F == G->F) return 1;
			if (P < G->P && C < G->C && F < G->F) {
				eaten.P = P; eaten.C = C; eaten.F = F;
				eat[pos] = 2; //consider eat
			}else {
				eat[pos] = 0; //can't eat for now, go back
			}
			break;
		case 2: //ate, but no, need to spit out
		    eaten.P -= foods[pos].P;
		    eaten.C -= foods[pos].C;
		    eaten.F -= foods[pos].F;
			eat[pos] = 0;
			break;
		}
		if (eat[pos] == 0) pos --; // go back
		else if (pos + 1 < N) pos ++; //advance
		//else stay and change decision about the current food
	}
	return 0;
}

int main(int argc, char * argv[]) {
	int T;
	scanf("%d", &T);
	Food G, foods[20];
	int N;
	for (int i = 0; i < T; i++) {
		scanf("%d %d %d", &G.P, &G.C, &G.F);
		//printf("G=[%d %d %d]\n", G.P, G.C, G.F);
		scanf("%d", &N);
		//printf("N=%d\n", N);
		for (int j=0; j<N;j++) {
			scanf("%d %d %d", &foods[j].P, &foods[j].C, &foods[j].F);
			//printf("food[%d]=[%d %d %d]\n", j, foods[j].P,foods[j].C,foods[j].F);
		}
		printf("Case #%d: %s\n", i+1, canGetExact(&G, N, foods)?"yes":"no");
	}
	return 0;
}
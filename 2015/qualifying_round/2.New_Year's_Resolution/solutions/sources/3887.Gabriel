#include <iostream>
#include <list>
using namespace std;

typedef struct Meal{int P,C,F; }Meal;

bool find_perfect_meal(list<Meal>& meals,Meal& total){
    Meal aux;
    if(!total.P && !total.C && !total.F){
        return true;
    }
    if(total.P < 0 || total.C < 0 || total.F < 0) return false;
    for(list<Meal>::iterator it = meals.begin(); it != meals.end(); it++){
        total.P -= (*it).P;
        total.C -= (*it).C;
        total.F -= (*it).F;
        aux = *it;
        it = meals.erase(it);
        if(find_perfect_meal(meals,total)) return true;
        it = meals.insert(it,aux);
        total.P += (*it).P;
        total.C += (*it).C;
        total.F += (*it).F;
    }
    return false;
}

int main(){
    int num_cases,num_meals;
    Meal total,aux;
    list<Meal> meals;
    bool success;

    cin >> num_cases;
    for(int j = 1; j <= num_cases; j++){
        cin >> total.P >> total.C >> total.F;
        cin >> num_meals;
        for(int i = 0; i < num_meals; i++){
            cin >> aux.P >> aux.C >> aux.F;
            meals.push_back(aux);
        }
        if(find_perfect_meal(meals,total))
            cout << "Case #" << j <<": yes" << endl;
        else
            cout << "Case #" << j <<": no" << endl;
        meals.clear();
    }
    return 0;
}

package programmingpractice;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Newyear {

	
	public static ArrayList<ArrayList<Integer>> output1= new ArrayList<ArrayList<Integer>>();
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        Scanner sc= new Scanner(System.in);
        int t = sc.nextInt();
        int cases = 1;
        while(cases<=t)
        {
        	int gp=0,gc=0,gf=0;
        	 gp = sc.nextInt();
        	 gc=sc.nextInt();
        	 gf=sc.nextInt();
        	 int n = sc.nextInt();
        	 int[] ap = new int[n];
        	 int[] ac=new int[n];
        	 int[] af= new int[n];
        	 int p=0;
        	 while(p<n)
        	 {
        		 ap[p]=sc.nextInt();
        		 ac[p]=sc.nextInt();
        		 af[p]=sc.nextInt();
        		 p++;
        	 }
        	 
        /*	//boolean boolp=isSubsetSum(ap,n,gp);
        	//boolean boolc=isSubsetSum(ac,n,gc);
        	//boolean boolf=isSubsetSum(af,n,gf);
        	String answer = "no";
        	if(boolp&&boolc&&boolf)
        	{
        		answer="yes";
        	} */
        	subset(0,0,"",gp,ap);
        	//System.out.println("Case #"+cases+": "+answer);
        	boolean result =false;
        	for(int k =0;k<output1.size();k++)
        	{
        		int sumc=0,sumf=0;
        		for(int l=0;l<output1.get(k).size();l++)
        		{
        			sumc +=ac[output1.get(k).get(l)];
        			sumf +=af[output1.get(k).get(l)];
        		}
        		if(gc==sumc&&gf==sumf)
        		{
        			result = true;
        			break;
        		}
        	}
        	if(result)
        	{
        		System.out.println("Case #"+cases+": yes");
        	}
        	else
        		System.out.println("Case #"+cases+": no");
        	cases++;
        		
        }
        sc.close();
	}
	public static void subset(int sum, int index, String output,int targetVal,int[] input){
		if (sum > targetVal)
			return;
		
		if (sum == targetVal){
			//System.out.println(output);
			
				StringTokenizer st = new StringTokenizer(output);
				ArrayList<Integer> temp = new ArrayList<Integer>();
			     while (st.hasMoreTokens()) {
			         temp.add(Integer.parseInt(st.nextToken()));
			     }
			    output1.add(temp);
			
			return;
		}
		for(int i=index;i<input.length;i++)
			subset(sum+input[i],i+1, output + " " +  i + " ",targetVal,input);
	}
	/*
	public static boolean isSubsetSum(int set[], int n, int sum)
	{
	    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
	    //  with sum equal to i
	    boolean[][] subset = new boolean[sum+1][n+1];
	 
	    // If sum is 0, then answer is true
	    for (int i = 0; i <= n; i++)
	      subset[0][i] = true;
	 
	    // If sum is not 0 and set is empty, then answer is false
	    for (int i = 1; i <= sum; i++)
	      subset[i][0] = false;
	 
	     // Fill the subset table in botton up manner
	     for (int i = 1; i <= sum; i++)
	     {
	       for (int j = 1; j <= n; j++)
	       {
	         subset[i][j] = subset[i][j-1];
	         if (i >= set[j-1])
	           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
	       }
	     }
	 
	   //uncomment this code to print table
	     for (int i = 0; i <= sum; i++)
	     {
	       for (int j = 0; j <= n; j++)
	          System.out.print (subset[i][j]+"\t");
	       System.out.println();
	     } 
	 
	     return subset[sum][n];
	}   */

}

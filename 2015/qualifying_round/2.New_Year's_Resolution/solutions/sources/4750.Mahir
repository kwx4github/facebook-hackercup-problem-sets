/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package facebookhackercup2015first;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Idrak
 */
public class FacebookHackerCup2015Second {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //reading file line by line in Java using BufferedReader       
        FileInputStream fis = null;
        BufferedReader reader = null;
        File fout = new File("d:/new_years_resolution_output.txt");
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(fout);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FacebookHackerCup2015Second.class.getName()).log(Level.SEVERE, null, ex);
        }

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));

        try {
            fis = new FileInputStream("D:/new_years_resolution.txt");
            reader = new BufferedReader(new InputStreamReader(fis));

            System.out.println("Reading File line by line using BufferedReader");

            String line = reader.readLine();
            line = reader.readLine();
            Integer proccessCount=0;
            List<DietCase> dietCases=new ArrayList<DietCase>();
            DietCase currentDietCase=null;
            while (line != null) {
                if (proccessCount==0){
                    if (currentDietCase!=null){
                        dietCases.add(currentDietCase);
                    }
                    currentDietCase=new DietCase();
                    String arrs[]=line.split(" ");
                    currentDietCase.setWantedP(Integer.valueOf(arrs[0]));
                    currentDietCase.setWantedC(Integer.valueOf(arrs[1]));
                    currentDietCase.setWantedF(Integer.valueOf(arrs[2]));
                    proccessCount=-1;
                } else if (proccessCount==-1){
                    currentDietCase.setFoodCount(Integer.valueOf(line));
                    proccessCount=currentDietCase.getFoodCount();
                } else {
                    String arrs[]=line.split(" ");
                    currentDietCase.addFood(new Food(Integer.valueOf(arrs[0]), Integer.valueOf(arrs[1]), Integer.valueOf(arrs[2])));
                    proccessCount--;
                }
                
                line = reader.readLine();
            }
            dietCases.add(currentDietCase);
            
            Integer index=1;
            for (DietCase dc:dietCases){
//                System.out.println(dc);
                ArrayList<Integer> set = new ArrayList<Integer>();
                for (Integer i=0;i<dc.getFoodCount();i++){
                    set.add(i);
                }
                ArrayList<ArrayList<Integer>> subSets = getSubsets(set);
                
                boolean yesNo=false;
                for (ArrayList<Integer> subset : subSets) {
                    Integer sumP=0;
                    Integer sumC=0;
                    Integer sumF=0;
                    for (Integer ind:subset){
                        sumP+=dc.getFoods().get(ind).getP();
                        sumC+=dc.getFoods().get(ind).getC();
                        sumF+=dc.getFoods().get(ind).getF();
                    }
                   
                    if (sumP.intValue()==dc.getWantedP().intValue() && sumC.intValue()==dc.getWantedC().intValue() && sumF.intValue()==dc.getWantedF().intValue()){
                        yesNo=true;
                        break;
                    }
		}
                if (yesNo){
                    bw.write("Case #" + index + ": yes");
                    bw.newLine();
                }else{
                    bw.write("Case #" + index + ": no");
                    bw.newLine();
                }
                index++;
            }
            bw.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FacebookHackerCup2015Second.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FacebookHackerCup2015Second.class.getName()).log(Level.SEVERE, null, ex);

        } finally {
            try {
                reader.close();
                fis.close();
            } catch (IOException ex) {
                Logger.getLogger(FacebookHackerCup2015Second.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }
    
    private static ArrayList<ArrayList<Integer>> getSubsets(
			ArrayList<Integer> set) {

		ArrayList<ArrayList<Integer>> subsetCollection = new ArrayList<ArrayList<Integer>>();

		if (set.size() == 0) {
			subsetCollection.add(new ArrayList<Integer>());
		} else {
			ArrayList<Integer> reducedSet = new ArrayList<Integer>();

			reducedSet.addAll(set);

			int first = reducedSet.remove(0);
			ArrayList<ArrayList<Integer>> subsets = getSubsets(reducedSet);
			subsetCollection.addAll(subsets);

			subsets = getSubsets(reducedSet);

			for (ArrayList<Integer> subset : subsets) {
				subset.add(0, first);
			}

			subsetCollection.addAll(subsets);
		}

		return subsetCollection;
	}
}

class DietCase{
    private Integer wantedP;
    private Integer wantedC;
    private Integer wantedF;
    private Integer foodCount;
    private List<Food> foods;

    public DietCase(Integer wantedP, Integer wantedC, Integer wantedF, Integer foodCount, List<Food> foods) {
        this.wantedP = wantedP;
        this.wantedC = wantedC;
        this.wantedF = wantedF;
        this.foodCount = foodCount;
        this.foods = foods;
    }

    public DietCase() {
    }

    public void addFood(Food food){
        if (foods==null) foods=new ArrayList<Food>();
        foods.add(food);
    }
    public Integer getFoodCount() {
        return foodCount;
    }

    public void setFoodCount(Integer foodCount) {
        this.foodCount = foodCount;
    }

    public List<Food> getFoods() {
        return foods;
    }

    public void setFoods(List<Food> foods) {
        this.foods = foods;
    }

    public Integer getWantedC() {
        return wantedC;
    }

    public void setWantedC(Integer wantedC) {
        this.wantedC = wantedC;
    }

    public Integer getWantedF() {
        return wantedF;
    }

    public void setWantedF(Integer wantedF) {
        this.wantedF = wantedF;
    }

    public Integer getWantedP() {
        return wantedP;
    }

    public void setWantedP(Integer wantedP) {
        this.wantedP = wantedP;
    }

    @Override
    public String toString() {
        return ""+ wantedP + " " + wantedC + " " + wantedF + "\n" + foodCount + "\n" + foods;
    }
    
}
class Food{
    private Integer p;
    private Integer c;
    private Integer f;

    @Override
    public String toString() {
        return ""+p+" "+c+" "+f+"\n";
    }

    public Food(Integer p, Integer c, Integer f) {
        this.p = p;
        this.c = c;
        this.f = f;
    }

    public Integer getC() {
        return c;
    }

    public void setC(Integer c) {
        this.c = c;
    }

    public Integer getF() {
        return f;
    }

    public void setF(Integer f) {
        this.f = f;
    }

    public Integer getP() {
        return p;
    }

    public void setP(Integer p) {
        this.p = p;
    }
    
}


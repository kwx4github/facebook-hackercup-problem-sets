import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class ProblemB {

public static void main(String[] args) throws IOException {
		
		ProblemB solver = new ProblemB();
		solver.init();
		solver.solve();
	}

	private void init() {
		
	}
	
	private static class Calories {
		int p;
		int c;
		int f;
		
		public Calories(int p, int c, int f) {
			super();
			this.p = p;
			this.c = c;
			this.f = f;
		}
		
		public Calories add(Calories that) {
			return new Calories(this.p + that.p, this.c + that.c, this.f + that.f);
		}
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + c;
			result = prime * result + f;
			result = prime * result + p;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Calories other = (Calories) obj;
			if (c != other.c)
				return false;
			if (f != other.f)
				return false;
			if (p != other.p)
				return false;
			return true;
		}
		
	}
	
	private void solve() throws IOException {
		 
		Reader in = new Reader(System.in);
		PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
		
		int T = in.nextInt();
		
		for(int t = 1; t <= T; t++) {
			Calories want = new Calories(in.nextInt(), in.nextInt(), in.nextInt());
			int N = in.nextInt();
			Calories[] possible = new Calories[N];
			for (int i = 0; i < N; i++) possible[i] = new Calories(in.nextInt(), in.nextInt(), in.nextInt());
			boolean found = check(want, possible);
			out.println("Case #" + t + ": " + (found ? "yes" : "no"));
		}
		
		out.flush();
		out.close();
	}
	
	private boolean check(Calories want, Calories[] possible) {
		int N = possible.length;
		for (int mask = 0; mask < (1 << N); mask++) {
			Calories curr = new Calories(0,0,0);
			for (int i = 0; i < N; i++) if ((mask & (1 << i)) > 0) {
				curr = curr.add(possible[i]);
			}
			if (curr.equals(want)) return true;
		}
		return false;
	}

	private static class Reader {
		
	    BufferedReader reader;
	    StringTokenizer tokenizer;
	
	    /** call this method to initialize reader for InputStream */
	    Reader(InputStream input) {
	        reader = new BufferedReader(
	                     new InputStreamReader(input) );
	        tokenizer = new StringTokenizer("");
	    }
	
	    /** get next word */
	    public String next() throws IOException {
	        while ( ! tokenizer.hasMoreTokens() ) {
	            //TODO add check for eof if necessary
	            tokenizer = new StringTokenizer(
	                   reader.readLine() );
	        }
	        return tokenizer.nextToken();
	    }
	    
	    public String nextLine() throws IOException {
	    	return reader.readLine();
	    }
	
	    public int nextInt() throws IOException {
	        return Integer.parseInt( next() );
	    }
	    
	    public double nextDouble() throws IOException {
	        return Double.parseDouble( next() );
	    }
	    
	    public long nextLong() throws IOException {
	    	return Long.parseLong(next());
	    }
	}

}

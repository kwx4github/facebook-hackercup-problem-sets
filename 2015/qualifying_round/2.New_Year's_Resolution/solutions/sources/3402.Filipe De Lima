#include <iostream>
#include <vector>
#include <map>
#include <tuple>

using namespace std;

typedef tuple<int, int, int> Food;

vector<Food> meals;
map<Food, bool> memo;

bool valid(const Food f)
{
  return get<0>(f) >= 0
     and get<1>(f) >= 0
     and get<2>(f) >= 0;
}

bool go(const Food target, int i)
{
  if (memo.count(target))
    return memo[target];
  bool result = false;
  if (i == meals.size()) {
    result = get<0>(target) == 0
         and get<1>(target) == 0
         and get<2>(target) == 0;
  } else {
    Food new_target(get<0>(target) - get<0>(meals[i]),
                    get<1>(target) - get<1>(meals[i]),
                    get<2>(target) - get<2>(meals[i]));
    result = go(target, i + 1);
    if (valid(new_target))
      result = result or go(new_target, i+1);
  }
  memo[target] = result;
  return result;
}

int main()
{
  int ntc; 
  cin >> ntc;
  for (int tc = 0; tc < ntc; ++tc) {
    meals.clear();
    memo.clear();
    int x, y, z;
    cin >> x >> y >> z;
    Food target(x, y, z);
    int nm; cin >> nm;
    for (int i = 0; i < nm; ++i) {
      cin >> x >> y >> z;
      meals.emplace_back(x, y, z);
    }
    bool result = go(target, 0);
    cout << "Case #" << (tc + 1) << ": " << (result ? "yes" : "no") << endl;
  }
}

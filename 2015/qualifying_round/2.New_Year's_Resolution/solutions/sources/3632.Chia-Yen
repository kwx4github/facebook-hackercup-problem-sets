import sys
class Case:

  def __init__(self, num):
    self.num = num
    self.sol = Solution()

  def getRes(self, items, target):
    res = 'yes'
    if not self.sol.canEat(items, target):
      res = 'no'
    return "Case #" + str(self.num) + ": " + res

class Solution:

  def canEat(self, items, target):
    self.hit = False
    self.getKSum(0, items, target)
    return self.hit

  def getKSum(self, index, items, remains):
    if self.clear(remains):
      self.hit = True
      return
    for i in xrange(index, len(items)):
      item = items[i]
      tmp = list(remains)
      tmp[0] -= item[0]
      tmp[1] -= item[1]
      tmp[2] -= item[2]
      self.getKSum(i + 1, items, tmp)
      if self.hit:
        return

  def clear(self, remains):
    for remain in remains:
      if remain != 0:
        return False
    return True

class InputFile:

  def run(self):
    File = open(sys.argv[1], 'r')
    lines = File.readlines()
    output = open('output.out', 'w')
    caseNum = None
    curCase = 0
    curLine = 0

    while curLine < len(lines):
      line = lines[curLine].strip()
      if line:
        if not caseNum:
          caseNum = int(line.strip())
        else:
          curCase += 1
          target = [int(x) for x in line.split(" ")]
          curLine += 1
          itemNum = int(lines[curLine].strip())
          curLine += 1
          items = []
          for i in xrange(itemNum):
            items.append([int(x) for x in lines[curLine].split(" ")])
            curLine += 1
          case = Case(curCase)
          res = case.getRes(items, target)
          print res
          output.write(res + '\n')
          curLine -= 1       
      curLine += 1

    File.close()
    output.close()

inputFile = InputFile()
inputFile.run()
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            StreamReader s = new StreamReader("input.txt");
            StreamWriter w = new StreamWriter("output.txt");
            int n_case = int.Parse(s.ReadLine());
            for (int i = 0; i < n_case; i++) 
            {
                String[] o =  s.ReadLine().Split(' ');
                int[] ob = new int[3];
                for (int k = 0; k < 3; k++)
                {
                    ob[k] = int.Parse(o[k]);
                }
                int n_f = int.Parse(s.ReadLine());
                int[,] food = new int[n_f,3];
                for (int j = 0; j < n_f; j++)
                {
                    String[] f = s.ReadLine().Split(' ');
                    for (int k = 0; k < 3; k++)
                    {
                        food[j,k] = int.Parse(f[k]);
                    }
                }
                bool ris = solve(food, ob, 0, 0, 0, n_f, 0);
                if (ris) 
                {
                    w.WriteLine("Case #" + (i + 1) + ": yes");
                }
                else 
                {
                    w.WriteLine("Case #" + (i + 1) + ": no");
                }
            }
            s.Close();
            w.Close();
        }

        static bool solve(int[,] food,int[] ob,int p,int c,int f,int n_f,int pos)
        {
            if (pos == n_f) 
            {
                if (ob[0] == p && ob[1] == c && ob[2] == f) 
                {
                    return true;
                }
                else 
                {
                    return false;
                }
            }
            bool b0 = solve(food, ob, p, c, f, n_f, pos + 1);
            bool b1 = solve(food, ob, p + food[pos, 0], c + food[pos, 1], f + food[pos, 2], n_f, pos + 1);
            return b0 || b1;
        }
    }
}

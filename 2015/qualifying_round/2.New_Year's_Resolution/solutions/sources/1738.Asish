# Constraints
# 1 <= T <= 20
# 1 <= N <= 20
# 10 <= Gp, Gc, Gf <= 1000
# 10 <= P, C, F <= 1000
f = open("input.txt", "r")
g = open("output.txt", "w")

T = int(f.readline())

def path(p, c, f, to_do):
    #print "visited .", p, c, f, to_do
    if len(to_do) == 0:
        if (p, c, f) == (0, 0, 0):
            return True
        return False
    
    temp = to_do.pop(0)
    if temp[0] <= p and temp[1] <= c and temp[2] <= f:
        if path(p - temp[0], c - temp[1], f - temp[2], to_do[:]):
            return True
    if path(p, c, f, to_do[:]):
        return True
    return False

def is_possible(L, G):
    queue = []
    to_check = L[:]

    p, c, f = G
    for i in xrange(len(L)):
        #print "\n new start \n"
        if path(p, c, f, L[i:]):
            return "yes"
    return "no"
        
    
for k in xrange(1,T+1):
    G = map(int, f.readline().split())
    N = int(f.readline())
    L = []

    for i in xrange(N):
        x = map(int, f.readline().split())
        if any([x[j] > G[j] for j in range(3)]):
            continue
        L.append(x)

    g.write("Case #{0}: {1}\n".format(k, is_possible(L, G)))

f.close()
g.close()

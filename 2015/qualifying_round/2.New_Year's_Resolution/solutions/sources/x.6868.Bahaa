var fs = require('fs');

var findSubSetsWithDesiredSum = function(set, desiredSum, subSets, iterationNumber, desiredSubSets){
	var subSetLength = subSets.length;

	subSets.push([set[iterationNumber]]);

	for(var i = 0; i < subSetLength; i++)
	{
		var temp = [];
		var tempIndex = [];
		var sum = 0;

		for(var j = 0; j < subSets[i].length; j++)
		{
			sum += subSets[i][j];
			temp.push(subSets[i][j]);
			tempIndex.push(set.indexOf(subSets[i][j]));
		}

		temp.push(set[iterationNumber]);
		tempIndex.push(iterationNumber);
		sum += set[iterationNumber];

		if(sum <= desiredSum)
			subSets.push(temp);

		if(sum == desiredSum)
			desiredSubSets.push(tempIndex);
	}

	iterationNumber++;

	if(iterationNumber == set.length)
		return;

	findSubSetsWithDesiredSum(set, desiredSum, subSets, iterationNumber, desiredSubSets);
};

var validateSubSetsWithDesiredSum = function(set, desiredSum, desiredSubSets, newDesiredSubSets){
	for(var i = 0; i < desiredSubSets.length; i++)
	{
		var total = 0;

		for(var j = 0; j < desiredSubSets[i].length; j++)
			total += set[desiredSubSets[i][j]];

		if(total == desiredSum)
			newDesiredSubSets.push(desiredSubSets[i]);
	}
};

var checkFood = function(desired, available, printSets){

	if(available.length == 1)
	{
		if(desired[0] == available[0][0] && desired[1] == available[0][1] && desired[2] == available[0][2])
			return true;
		return false;
	}

	for(var j = 0; j < 3; j++)
	{
		var tempTotal = 0;
		for(var i = 0; i < available.length; i++)
			tempTotal += available[i][j];

		if(tempTotal < desired[j])
			return false;
	}

	var aSet = [];
	var bSet = [];
	var cSet = [];

	for(var i = 0; i < available.length; i++)
	{
		aSet.push(available[i][0]);
		bSet.push(available[i][1]);
		cSet.push(available[i][2]);
	}

	var aDesired = [];
	var bDesired = [];
	var cDesired = [];

	findSubSetsWithDesiredSum(aSet, desired[0], [], 0, aDesired);

	if(!aDesired.length) return false;

	validateSubSetsWithDesiredSum(bSet, desired[1], aDesired, bDesired);

	if(!bDesired.length) return false;

	validateSubSetsWithDesiredSum(cSet, desired[2], bDesired, cDesired);

	if(!cDesired.length) return false;

	if(printSets)
	{
		console.log(desired);
		console.log('....');

		for(var i = 0; i < cDesired.length; i++)
		{
			for(var j = 0; j < cDesired[i].length; j++)
				console.log(available[cDesired[i][j]]);
		}

		console.log('----');
	}

	return true;
};

var input = fs.readFileSync(process.argv[2]).toString().split("\n");

var numberOfTestCases = parseInt(input[0]);

var currentLine = 1;

for(var i = 0; i < numberOfTestCases; i++)
{
	var desired = input[currentLine].split(' ');
	for(var d = 0; d < desired.length; d++)
		desired[d] = parseInt(desired[d]);

	currentLine++;
	var availableFoods = parseInt(input[currentLine]);

	var available = [];
	for(var k = 0; k < availableFoods; k++)
	{
		currentLine++;
		var temp = input[currentLine].split(' ');
		for(var a = 0; a < temp.length; a++)
			temp[a] = parseInt(temp[a]);
		available.push(temp);
	}

	currentLine++;

	if(checkFood(desired, available))
		console.log('Case #' + (i + 1) + ': yes');
	else
		console.log('Case #' + (i + 1) + ': no');
}

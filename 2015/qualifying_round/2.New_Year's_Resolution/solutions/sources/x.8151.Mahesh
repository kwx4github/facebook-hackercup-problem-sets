using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NewYearResolution
{
    class Program
    {
        static List<string> subsetlist = new List<string>();
        static int[] originalArray;
        static void Main(string[] args)
        {
            string[] lines = System.IO.File.ReadAllLines(@"C:\Input\new_years_resolution.txt");
            int lc=1;
            int tc = int.Parse(lines[0]);
            int gp, gc, gf,nf;            
            int[,] inp;
            string[] scalories = new string[3];
            string[] temp=new string[3];
            bool possible;
            string str;
            for (int i = 0; i < tc; i++)
            {
                subsetlist = new List<string>();
                scalories = lines[lc].Split(' ');
                lc++;
                gp= int.Parse(scalories[0]);
                gc=int.Parse(scalories[1]);
                gf = int.Parse(scalories[2]);
                nf = int.Parse(lines[lc]);
                lc++;
                inp = new int[nf,3];
                originalArray = new int[nf];
                for (int j = 0; j < nf; j++)
                {
                    temp=lines[lc].Split(' ');
                    originalArray[j] = int.Parse(temp[0]);
                    inp[j, 0] = int.Parse(temp[0]);
                    inp[j, 1] = int.Parse(temp[1]);
                    inp[j, 2] = int.Parse(temp[2]);
                    lc++;
                }
                int[,] validArray= removefoods(gp, gc, gf, inp);
                int[] arraytogenerate = returngp(validArray);
                generateSubsets(arraytogenerate,arraytogenerate.Length,gp);
                possible = validate(gp, gc, gf, inp);
                str = "Case #" + (i + 1) + ": ";
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\output\new_years_resolution_output.txt", true))
                {
                    if (possible)
                    {
                        str += "yes";
                    }
                    else
                    {
                        str += "no";
                    }
                    file.WriteLine(str);
                }
            }
        }
        static void generateSubsets(int[] s, int size, int target_sum)
        {
            int[] arrset = new int[size];

            subset_sum(s, arrset, size, 0, 0, 0, target_sum);

        }
        static void subset_sum(int[] s, int[] t,
                int s_size, int t_size,
                int sum, int ite,
                int target_sum)
        {
            if (target_sum == sum)
            {
                writeSubsettoList(t, t_size);
                subset_sum(s, t, s_size, t_size - 1, sum - s[ite - 1], ite, target_sum);
                return;
            }
            else
            {
                for (int i = ite; i < s_size; i++)
                {
                    t[t_size] = s[i];
                    subset_sum(s, t, s_size, t_size + 1, sum + s[i], i + 1, target_sum);
                }
            }
        }

        static void writeSubsettoList(int[] subset, int size)
        {
            int j = 0;
            string str = "";
            using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\output\temp.txt", true))
            {
                for (int i = 0; i < subset.Length; i++)
                {
                    if (originalArray[i] == subset[j])
                    {
                        file.Write(1 + " ");
                        str += (1 + " ");
                        j++;
                    }
                    else
                    {
                        file.Write(0 + " ");
                        str += (0 + " ");
                    }

                }
                file.WriteLine();
            }
            subsetlist.Add(str);

        }
        static int[,] removefoods(int gp, int gc, int gf, int[,] inp)
        {
            int[,] tempArray = new int[inp.GetLength(0),3];
            int lc = 0;
            for (int i = 0; i < inp.GetLength(0); i++)
            {
                if (inp[i, 0] <= gp && inp[i, 1] <= gc && inp[i, 2] <= gf)
                {
                    tempArray[lc, 0] = inp[i, 0];
                    tempArray[lc, 1] = inp[i, 1];
                    tempArray[lc, 2] = inp[i, 2];
                    lc++;
                }
            }
            int[,] retArray = new int[lc,3];
            for (int i = 0; i < lc; i++)
            {
                retArray[i,0] = tempArray[i,0];
                retArray[i, 1] = tempArray[i, 1];
                retArray[i, 2] = tempArray[i, 2];
            }
            return retArray;
        }
        static int[] returngp(int[,] inp)
        {
            int[] retArray = new int[inp.GetLength(0)];
            for (int i = 0; i < inp.GetLength(0); i++)
            {
                retArray[i] = inp[i, 0];
            }
            return retArray;
        }
        static bool validate(int gp, int gc, int gf, int[,] foods)
        {
            bool ret = false;
            int tgp=0, tgc=0, tgf=0;
            for (int i = 0; i < subsetlist.Count; i++)
            {
                string[] ch = subsetlist[i].Split(' ');
                for (int j = 0; j < ch.Length; j++)
                {
                    if (ch[j] == "1")
                    {
                        tgp += foods[j, 0];
                        tgc += foods[j, 1];
                        tgf += foods[j, 2];
                    }
                }
                if (tgp == gp && tgc == gc && tgf == gf)
                {
                    return true;
                }
                else
                {
                    tgp = 0;
                    tgc = 0; 
                    tgf = 0;
                }
            }
            return ret;
        }
    }
}

package live;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
	
	public static void main(String[] args) {
		
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks problem = new CookingTheBooks();
		int testcase = Integer.parseInt(in.scanInput());
		for (int i = 1; i <= testcase; i++) {
			problem.solve(i, in, out);
		}
		
		out.close();
		
	}

}

class NewYearResolution {
	
	private int data[][];
	private int gp, gc, gf;
	private boolean isPossible;
	private List<Integer> indexes;
	
	public void solve(int testcase, InputReader in, PrintWriter out) {
		gp = Integer.parseInt(in.scanInput());
		gc = Integer.parseInt(in.scanInput());
		gf = Integer.parseInt(in.scanInput());
		int n = Integer.parseInt(in.scanInput());
		isPossible = false;
		data = new int[n][3];
		indexes = new ArrayList<Integer>();
		for (int i = 0; i < n; i++) {
			data[i][0] = Integer.parseInt(in.scanInput());
			data[i][1] = Integer.parseInt(in.scanInput());
			data[i][2] = Integer.parseInt(in.scanInput());
		}
		for (int i = 0; i < n; i++) {
			if (!isPossible)
				doit(data[i][0], i);
			else
				break;
		}
		if (isPossible) out.println("YES");
		else out.println("NO");
	}
	
	private void doit(int sum, int at) {
		if (sum == gp) {
			indexes.add(at);
			isPossible = check();
			if (!isPossible) indexes.remove(Integer.valueOf(at));
			return;
		}
		
		if (sum > gp) return;
		
		indexes.add(at);
		for (int i = at + 1; i < data.length; i++) {
			if (sum + data[i][0] <= gp && !isPossible) doit(sum + data[i][0], i);
		}
		indexes.remove(Integer.valueOf(at));
	}
	
	private boolean check() {
		boolean isOk = false;
		
		int pSum, cSum, fSum;
		pSum = cSum = fSum = 0;
		for (int at : indexes) {
			pSum += data[at][0];
			cSum += data[at][1];
			fSum += data[at][2];
		}
		
		if (pSum == gp && cSum == gc && fSum == gf) isOk = true;
		
		return isOk;
	}
}


class InputReader {
	
	private BufferedReader mReader;
	private  StringTokenizer mTokenizer;
	
	public InputReader(InputStream inputStream) {
		mReader = new BufferedReader(new InputStreamReader(inputStream));
		mTokenizer = null;
	}
	
	public String scanInput() {
		while (mTokenizer == null || !mTokenizer.hasMoreTokens()) {
			try {
				mTokenizer = new StringTokenizer(mReader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return mTokenizer.nextToken();
	}
	
}

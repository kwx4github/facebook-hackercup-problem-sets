#include <stdio.h>
#include <algorithm>
#include <assert.h>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <vector>
#include <iostream>
#include <queue>
#include <cmath>
#include <ctime>
#include <climits>
#include <iomanip>
#include <sstream>
using namespace std;

typedef long long LL;
#define tr(container, it)for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define PB push_back
#define MP make_pair
#define REP(i,a,b) for (int i = (a); i < (int)(b); i++)

int GCD (int a, int b) { if (!a) return b; return GCD(b%a, a);}

struct macro {
    int protein;
    int carbs;
    int fat;
    macro () {
        protein = carbs = fat = 0;
    }
    macro (int p, int c, int f) {
        protein = p;
        carbs = c;
        fat = f;
    }
    macro operator+ (const macro &other) {
        macro added;
        added.protein = this->protein + other.protein;
        added.carbs = this->carbs + other.carbs;
        added.fat = this->fat + other.fat;
        return added;
    }
    bool operator== (const macro &other) {
        return (this->protein == other.protein &&
                this->carbs == other.carbs &&
                this->fat == other.fat);
    }
    macro& operator= (macro other) {
        swap(*this, other);
        return *this;
    }
    friend void swap(macro &first, macro &second) {
        swap(first.protein, second.protein);
        swap(first.carbs, second.carbs);
        swap(first.fat, second.fat);
    }
};

int main() {
    clock_t startTime = clock();
    ios_base::sync_with_stdio(false);

    int testCase = 0;
    int t; cin>>t;
    for (testCase = 1; testCase <= t; testCase++) {
        cout<<"Case #"<<testCase<<": ";
        int p, c, f; cin>>p>>c>>f;
        macro goal(p, c, f);
        int n; cin>>n;
        vector<macro> meals;
        for (int i = 0; i < n; i++) {
            cin>>p>>c>>f;
            macro meal(p,c,f);
            meals.push_back(meal);
        }
        bool pos = false;
        for (int i = 1; i < (1<<n); i++) {
            macro subs(0,0,0);
            for (int j = 0; j < n; j++) {
                if (i & (1<<j)) {
                    subs = subs + meals[j];
                }
            }
            if (subs == goal) {
                pos = true;
                break;
            }
        }
        if (pos) cout<<"yes\n";
        else cout<<"no\n";
    }

    clock_t endTime = clock();
    cerr<<"\nTime:"<< double(endTime - startTime) / CLOCKS_PER_SEC <<" seconds\n" ;
    return 0;
}

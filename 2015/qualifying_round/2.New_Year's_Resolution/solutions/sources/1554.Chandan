package hackercup.qual2015.resolution;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {

    static String BASE = "/Users/chandangiri/contest/src/main/java/hackercup/qual2015/resolution/";
    public static void main(String args[]) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(new File(BASE + "in.txt"));;
        OutputStream outputStream = new FileOutputStream(new File(BASE + "out.txt"));
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        int testCount = in.nextInt();
        for (int i = 1; i <= testCount; i++) {
            out.printf("Case #%d: ", i);
            solver.solve(in, out);
        }
        out.close();
    }

    static class Food {
        int p, c, f;

        Food(int p, int c, int f) {
            this.p = p;
            this.c = c;
            this.f = f;
        }
    }

    private static class Solver {

        int bit[] = new int[21];

        {
            bit[0] = 1;
            for (int i=1; i<=20; i++) {
                bit[i] = bit[i-1] << 1;
            }
        }

        public void solve(InputReader in, PrintWriter out) {
            int gp = in.nextInt();
            int gc = in.nextInt();
            int gf = in.nextInt();

            int n = in.nextInt();
            Food food[] = new Food[n];
            for (int i=0; i<n; i++) {
                food[i] = new Food(in.nextInt(), in.nextInt(), in.nextInt());
            }

            boolean found = false;
            for (int i=0; i<(1<<n); i++) {
                int tgp = gp;
                int tgc = gc;
                int tgf = gf;
                for (int j=0; j<n; j++) {
                    if ((i & bit[j]) > 0) {
                        Food f = food[j];
                        tgp -= f.p;
                        tgc -= f.c;
                        tgf -= f.f;

                        if (tgp < 0 || tgc < 0 || tgf < 0) {
                            break;
                        }
                    }
                }

                if (tgp == 0 && tgc == 0 && tgf == 0) {
                    found = true;
                    break;
                }
            }
            out.println(found? "yes" : "no");
        }

    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
    }
}



//
//  main.cpp
//  Timus
//
//  Created by Anton Ovcharenko on 1/8/15.
//  Copyright (c) 2015 Anton Ovcharenko. All rights reserved.
//

#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <fstream>

using std::vector;
using std::map;
using std::pair;
using std::cin;
using std::cout;
using std::endl;
using std::stable_sort;
using std::string;
using std::to_string;
using std::ifstream;
using std::ofstream;
using std::reverse;
using std::swap;
using std::tuple;
using std::clog;

struct Food
{
    int protein = 0;
    int carb = 0;
    int fat = 0;
};

bool equal(Food a, Food b)
{
    return a.protein == b.protein && a.carb == b.carb && a.fat == b.fat;
}

bool overdose(Food total, Food goal)
{
    return total.protein > goal.protein || total.carb > goal.carb || total.fat > goal.fat;
}

bool check_mask(vector<Food> menu, long long mask, Food metaFood)
{
    bool result = false;
    Food picked;
    for (int i = 0; i < menu.size(); i++)
    {
        int currentBit = 1 << i;
        if (mask & currentBit)
        {
            picked.protein += menu[i].protein;
            picked.carb += menu[i].carb;
            picked.fat += menu[i].fat;
            if (equal(picked, metaFood))
            {
                result = true;
                break;
            }
            if (overdose(picked, metaFood))
            {
                break;
            }
        }
    }
    return result;
}

void solve_case(vector<Food> menu, Food metaFood, long caseNumber)
{
    clog << "Solving case #" << caseNumber << endl << "Menu:" << endl;
    for (auto item : menu)
    {
        clog << "[" << item.protein << "," << item.carb << "," << item.fat << "]" << endl;
    }
    clog << "Goal is:" << endl;
    clog << "[" << metaFood.protein << "," << metaFood.carb << "," << metaFood.fat << "]" << endl;
    
    bool acceptable = false;
    for (long long mask = 1; mask < pow(2, menu.size()); mask++)
    {
        acceptable = check_mask(menu, mask, metaFood);
        if (acceptable)
        {
            break;
        }
    }
    string result = acceptable ? "yes" : "no";
    cout << "Case #" << caseNumber << ": " << result << endl;
    std::clog << "Solved" << endl;
}

int main(int argc, const char * argv[])
{
    ifstream in("./in.txt");
    cin.rdbuf(in.rdbuf());
    
    ofstream out("./out.txt");
    cout.rdbuf(out.rdbuf());
    
    long n;
    cin >> n;
    
    for (long i = 0; i < n; i++)
    {
        Food metaFood;
        cin >> metaFood.protein >> metaFood.carb >> metaFood.fat;
        
        long numberOfFoods;
        cin >> numberOfFoods;
        
        vector<Food> menu;
        for (int j = 0; j < numberOfFoods; j++)
        {
            Food currentFood;
            cin >> currentFood.protein >> currentFood.carb >> currentFood.fat;
            menu.push_back(currentFood);
        }
        solve_case(menu, metaFood, i + 1);
    }
    
    return 0;
}


import sys
from pprint import pprint

filename = sys.argv[1]

def getTheNumbers(fn):
    with open(fn, 'r') as inputFile:
        fc = inputFile.read()
    numbers = fc.split()
    return map(int, numbers)

def parseTestCases(fn):
    numbers = getTheNumbers(fn)
    nbTestCases = numbers[0]
    idx = 1

    testCases = list()

    for i in xrange(nbTestCases):
        currentTestCase = dict()
        currentTestCase['Gp'] = numbers[idx]
        idx +=1
        currentTestCase['Gc'] = numbers[idx]
        idx +=1
        currentTestCase['Gf'] = numbers[idx]
        idx +=1
        nbFood = numbers[idx]
        idx +=1

        listFood = list()
        for j in xrange(nbFood):
            P = numbers[idx]
            idx += 1
            C = numbers[idx]
            idx += 1
            F = numbers[idx]
            idx += 1

            listFood.append({'P': P, 'C': C, 'F': F})

        currentTestCase['listFood'] = listFood

        testCases.append(currentTestCase)

    return testCases

class BT(object):
    def __init__(self, testCase):
        self._LISTFOOD = testCase['listFood']
        self._theSolution = [False for i in xrange(len(self._LISTFOOD))]
        self._globalP = testCase['Gp']
        self._globalC = testCase['Gc']
        self._globalF = testCase['Gf']

    def runBackTrack(self):
        return self.backTrack(self._theSolution, 0, 0, 0, 0)

#print ''.join(map(lambda x: '1' if x else '0', currentSolution))
#if currentSumP > self._globalP or currentSumC > self._globalC or currentSumF > self._globalF:
#    return False
    def backTrack(self, currentSolution, currentSumP, currentSumC, currentSumF, idx):
        if currentSumP == self._globalP and currentSumC == self._globalC and currentSumF == self._globalF:
            return True
        elif idx == len(currentSolution):
            return False
        else:
            for sol in [False, True]:
                currentSolution[idx] = sol
                e = self._LISTFOOD[idx]
                nextSumP = currentSumP + (e['P'] if sol else 0)
                nextSumC = currentSumC + (e['C'] if sol else 0)
                nextSumF = currentSumF + (e['F'] if sol else 0)

                if nextSumP <= self._globalP and nextSumC <= self._globalC and nextSumF <= self._globalF:
                    res = self.backTrack(currentSolution, nextSumP, nextSumC, nextSumF, idx+1)
                    if res:
                        return True
            return False

def getResult(testCase):
    """
    print ('-'*80)
    pprint(testCase)
    print ('-'*80)
    """
    """
    listFood = testCase['listFood']
    putOrNot = lambda idx, d, vChoice, sVal: d[sVal] if ((vChoice & (1 << idx)) != 0) else 0
    total = lambda sVal, vChoice: sum(map(lambda t: putOrNot(t[0], t[1], vChoice, sVal), enumerate(listFood)))

    listVal = ['P', 'C', 'F']
    for vvv in xrange(2**len(listFood)):
        tM = map(lambda sV: total(sV, vvv) == testCase[('G{v}'.format(v=sV.lower()))], listVal)
        cond = all(tM)
        if cond:
            break

    return cond
    """
    bt = BT(testCase)
    return bt.runBackTrack()

if __name__ == '__main__':
    testCases = parseTestCases(filename)
    #pprint(testCases)

    i = 1
    for testCase in testCases:
        bResult = getResult(testCase)
        print "Case #{i}: {result}".format(i=i, result="yes" if bResult else "no")
        i += 1

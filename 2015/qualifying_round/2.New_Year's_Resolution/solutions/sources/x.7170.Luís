#include <stdio.h>
#include <stdlib.h>

typedef struct nutrients{
    int protein;
    int carbs;
    int fat;
}Nutrients;

int is_subset_sum(int*, int, int);
int is_exact_amount(Nutrients*, Nutrients*, int);

int main(int argc, char** argv){
    FILE* input_file;
    FILE* output_file;

    int input_size;
    int input_index;
    int food_index;
    int number_of_foods;
    Nutrients *nutrients_needed;
    Nutrients *foods;

    input_file = fopen(argv[1], "r");
    output_file = fopen("nutrients.txt", "w");
    fscanf (input_file, "%d\n", &input_size);

    for (input_index = 0; input_index < input_size; input_index++){
        nutrients_needed = (Nutrients*)malloc(sizeof(Nutrients));
        fscanf(input_file, "%d %d %d\n", &(nutrients_needed->protein), &(nutrients_needed->carbs), &(nutrients_needed->fat));

        fscanf(input_file, "%d\n", &number_of_foods);
        foods = (Nutrients*)malloc(number_of_foods*sizeof(Nutrients));
        for (food_index = 0; food_index < number_of_foods; food_index++){
            fscanf(input_file, "%d %d %d\n", &(foods[food_index].protein), &(foods[food_index].carbs), &(foods[food_index].fat));
        }

        fprintf (output_file, "Case #%d: ", input_index + 1);
        if(is_exact_amount(nutrients_needed, foods, number_of_foods))
            fprintf(output_file, "yes\n");
        else
            fprintf(output_file, "no\n");

        free(nutrients_needed);
        free(foods);
    }
    fclose(input_file);
    fclose(output_file);
    return 1;
}

int is_exact_amount(Nutrients* nutrients_needed, Nutrients* foods, int number_of_foods){
    return is_subset_sum(&(foods[number_of_foods - 1].protein), number_of_foods, nutrients_needed->protein) &&
           is_subset_sum(&(foods[number_of_foods - 1].carbs), number_of_foods, nutrients_needed->carbs)     &&
           is_subset_sum(&(foods[number_of_foods - 1].fat), number_of_foods, nutrients_needed->fat);

}

int is_subset_sum(int* nutrient, int n, int sum){
    if (sum == 0)
        return 1;
    if (n == 0 && sum != 0)
        return 0;
    if (*nutrient > sum)
        return is_subset_sum(nutrient - 3, n - 1, sum);
    
    return is_subset_sum(nutrient - 3, n - 1, sum) || is_subset_sum(nutrient - 3, n - 1, sum - *nutrient);

}







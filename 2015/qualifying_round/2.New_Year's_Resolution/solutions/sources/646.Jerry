/**
 * jerry
 * B.cpp
 */

#include <assert.h>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <algorithm>
#include <bitset>
#include <deque>
#include <fstream>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

typedef long long int lli;
typedef pair<int, int> pii;

int gInt () {
    int i;
    scanf("%d", &i);
    return i;
}

lli gLong () {
    lli i;
    scanf("%lld", &i);
    return i;
}

double gDouble () {
    double i;
    scanf("%lf", &i);
    return i;
}

void quit () {
    fflush(stdout);
    exit(0);
}

int n;
int targets[3];
int x, y, z;
int amounts[25][3];
int sums[3];

bool rec (int i) {
    if (i == n) {
        for (int i = 0; i < 3; ++i) {
            if (sums[i] != targets[i]) {
                return false;
            }
        }
        return true;
    }
    for (int j = 0; j < 3; ++j) {
        sums[j] += amounts[i][j];
    }
    bool a = rec(i + 1);
    for (int j = 0; j < 3; ++j) {
        sums[j] -= amounts[i][j];
    }
    bool b = rec(i + 1);
    return a || b;
}

void solve (int nC) {
    fprintf(stderr, "solving %d\n", nC);
    for (int i = 0; i < 3; ++i) {
        targets[i] = gInt();
    }
    n = gInt();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < 3; ++j) {
            amounts[i][j] = gInt();
        }
    }
    printf("Case #%d: %s\n", nC, rec(0) ? "yes" : "no");
}

int main (int argc, char ** argv) {
    int t = gInt();
    for (int i = 0; i < t; ++i) {
        solve(i + 1);
    }
    quit();
}

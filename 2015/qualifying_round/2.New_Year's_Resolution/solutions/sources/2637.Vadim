#include <bits/stdc++.h>
using namespace std;

#ifdef ILIKEGENTOO
#   define Eo(x) { cerr << #x << " = " << (x) << endl; }
#   define E(x) { cerr << #x << " = " << (x) << "   "; }
#   define FREOPEN(x)
#else
#   define Eo(x) {}
#   define E(x) {}
#   define FREOPEN(x) (void)freopen(x ".in", "r", stdin);(void)freopen(x ".out", "w", stdout);
#endif
#define EO(x) Eo(x)
#define Sz(x) (int((x).size()))
#define All(x) (x).begin(),(x).end()

template<class A, class B> ostream &operator<<(ostream &os, const pair<A, B>& p) { return os << '(' << p.first << ", " << p.second << ')'; }

template<class C> void operator<<(vector<C> &v, const C &x){v.push_back(x);}
template<class D> void operator>>(vector<D> &v, D &x){assert(!v.empty()); x=v.back(); v.pop_back();}
template<class E> void operator<<(set<E> &v, const E &x){v.insert(x);}

typedef double flt;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;

const int inf = 0x3f3f3f3f;
const int64 inf64 = 0x3f3f3f3f3f3f3f3fLL;
const flt eps = 1e-8;
const flt pi = acos(-1.0);
const int dir[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };
int bit(int t) { return 1 << t; }

int f[20][3];

int main() {
    ios_base::sync_with_stdio(false);
    int T; cin >> T;
    for (int test = 1; test <= T; ++test) {
        int req[3]; cin >> req[0] >> req[1] >> req[2];
        int n; cin >> n;
        for (int i = 0; i < n; ++i) cin >> f[i][0] >> f[i][1] >> f[i][2];
        bool ok = false;
        for (int j = 0; j < (1<<n); ++j) {
            int have[3] = {req[0], req[1], req[2]};
            for (int i = 0; i < n; ++i) if (j & bit(i)) {
                have[0] -= f[i][0];
                have[1] -= f[i][1];
                have[2] -= f[i][2];
            }
            if (!have[0] && !have[1] && !have[2]) {
                ok = true;
                break;
            }
        }
        printf("Case #%d: %s\n", test, ok ? "yes" : "no");
    }

    return 0;
}

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.StringTokenizer;


public class Solution{

    ///////////////////////////////////////////////////////////////////////////
    static class FastScanner{
        BufferedReader s;
        StringTokenizer st;

        public FastScanner(InputStream InputStream){
            st = new StringTokenizer("");
            s = new BufferedReader(new InputStreamReader(InputStream));
        }

        public FastScanner(File f) throws FileNotFoundException{
            st = new StringTokenizer("");
            s = new BufferedReader (new FileReader(f));
        }

        public int nextInt() throws IOException{
            if(st.hasMoreTokens())
                return Integer.parseInt(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextInt();
            }
        }

        public BigInteger big() throws IOException{
            if(st.hasMoreTokens())
                return new BigInteger(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return big();
            }
        }

        public double nextDouble() throws IOException{
            if(st.hasMoreTokens())
                return Double.parseDouble(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextDouble();
            }
        }

        public long nextLong() throws IOException{
            if(st.hasMoreTokens())
                return Long.parseLong(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextLong();
            }
        }

        public String nextString() throws IOException{
            if(st.hasMoreTokens())
                return st.nextToken();
            else{
                st = new StringTokenizer(s.readLine());
                return nextString();
            }

        }
        public String readLine() throws IOException{
            return s.readLine();
        }

        public void close() throws IOException{
            s.close();
        }

    }

   
    @SuppressWarnings("unused")
    private static int[][] states = { {-1,0} , {1,0} , {0,-1} , {0,1} };


    ////////////////////////////////////////////////////////////////////



    public static void main(String[] args) throws IOException{
        new Solution().solve();
//        s.close();
//        ww.close();
    }


    ////////////////////////////////////////////////////////////////////


    void solve() throws IOException{

    	FastScanner s = new FastScanner(new File("input.txt"));
        PrintWriter ww = new PrintWriter(new FileWriter("output.txt"));
    	int test = s.nextInt();
    	for(int ll=1;ll<=test;ll++){

    		int sum1 = s.nextInt();
    		int sum2 = s.nextInt();
    		int sum3 = s.nextInt();

    		int n = s.nextInt();
    		int[] a = new int[n];
    		int[] b = new int[n];
    		int[] c = new int[n];

    		for(int i=0;i<n;i++){
    			a[i] = s.nextInt();
    			b[i] = s.nextInt();
    			c[i] = s.nextInt();
    		}

    		boolean ans = false;
    		for(int i=0;i<(1<<n);i++){
    			int sum = 0;
    			for(int j=0;j<=n;j++){
    	// 			ww.println(1<<j);
    				if((i&(1<<j))!= 0) sum += a[j];
    			}
    			if(sum == sum1){
    				int gum1 = 0;
    				int gum2 = 0;
    				for(int j=0;j<=n;j++)
    			    	if((i&(1<<j))!= 0) gum1 += b[j];
    				for(int j=0;j<=n;j++)
    			    	if((i&(1<<j))!= 0) gum2 += c[j];

    				if(gum1 == sum2 && gum2 == sum3){
    					ans = true;
    					ww.println("Case #"+ll+": yes");
    					break;
    				}

    			}
    		}
    		if(!ans) ww.println("Case #"+ll+": no");
    	}
    	s.close();
    	ww.close();
    }
}


#include <cstdio>
#include <vector>
#include <algorithm>
#include <string>
#include <iostream>
#include <cmath>
#include <cstring>
#include <fstream>

using namespace std;

vector <int> p, c, f;

const int maxM = 1048576;

int dp[21][maxM];

int setbit (int x, int bit) {
	return (x | (1 << bit)) ;
}

int isSolvable (int ix, int mask, int gp, int gc, int gf, int n) {
	//printf("isSolvable (%d, %d, %d, %d, %d)\n", ix, mask, gp, gc, gf);
	if (gp < 0 || gc < 0 || gf < 0)
		return dp[ix][mask] = 0;

	if (gp == 0 && gc == 0 && gf == 0)
		return dp[ix][mask] = 1;

	if (ix >= n)
		return dp[ix][mask] = 0;

	if (dp[ix][mask] != -1)
		return dp[ix][mask];

	int l = isSolvable (ix+1, setbit(mask, ix), gp - p[ix], gc - c[ix], gf - f[ix], n);
	int r = isSolvable (ix+1, mask, gp, gc, gf, n);

	if (l == 1 || r == 1)
		return dp[ix][mask] = 1;

	return dp[ix][mask] = 0;
}

int main() {
	int t;
	ifstream fin;
	ofstream fout;
	fin.open("input.txt");
	fout.open("output.txt");
	fin >> t;
	for (int j = 0; j < t; j++) {
		memset (dp, -1, sizeof(dp));
		int n, gp, gc, gf;
		fin >> gp >> gc >> gf;
		fin >> n;
		p.assign (n+1, 0);
		c.assign (n+1, 0);
		f.assign (n+1, 0);
		for (int i = 0; i < n; i++)
			fin >> p[i] >> c[i] >> f[i];
		fout << "Case #" << j+1 << ": " << (isSolvable(0, 0, gp, gc, gf, n) ? "yes\n" : "no\n");
		p.clear();
		c.clear();
		f.clear();
	}
	return 0;
}
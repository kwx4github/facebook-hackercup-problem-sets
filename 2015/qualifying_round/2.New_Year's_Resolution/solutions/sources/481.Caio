#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <string.h>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <set>
#include <stack>
#include <queue>
#include <map>
#include <vector>
#include <algorithm>
#include <bitset>
#include <list>
#define ll long long
#define ull unsigned long long
#define INF 0x3f3f3f3f
#define INFL 0x3FFFFFFFFFFFFFFFLL
#define NP next_permutation
#define PP prev_permutation
#define mp make_pair
#define abs(x) (((x) < 0) ? - (x) : (x))
#define pi 3.1415926535897932384626433832795
#define rep(k, n) for(int (k) = 0; (k) < (int)(n); (k)++)
#define Rep(k, n) for(int (k) = 1; (k) <= (int)(n); (k)++) 
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define TRvii(c, it) for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
using namespace std;
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[6]={2,1,-1,-2,-1,1};int dy[6]={0,1,1,0,-1,-1}; //Hexagonal Direction
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef pair<ii,int> iii;
typedef vector<ii> vii; 
typedef map<string, int> si;
typedef map<int, string> is;
typedef map<string,string> ss;

int n, gc[21], gp[21], gf[21], GC, GP, GF,a,b,c;
bool sim;

bool solve()
{
   for(int i = 0; i < (1<<n); i++)
   {
      a = b = c = 0;
      for(int j = 0; j < n; j++)
         if((i & (1<<j))!= 0)
         {
            a += gp[j];
            b += gc[j];
            c += gf[j];
         }
      if(a == GP and b == GC and c == GF)
         return true;
   }
   return false;
}

int main()
{
    int t,caso=1;
    scanf("%d",&t);
    while(t--){
       scanf("%d%d%d",&GP, &GC, &GF);
       scanf("%d",&n);
       for(int i = 0; i < n; i++)
          scanf("%d%d%d",&gp[i], &gc[i], &gf[i]);
       printf("Case #%d: %s\n", caso++, solve()?"yes":"no");
    }
    return 0;
}

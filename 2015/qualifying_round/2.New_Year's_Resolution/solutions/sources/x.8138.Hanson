require 'matrix'
@cache = {}
def compute(foods, ind, desired_sum)
  return true if desired_sum == Matrix[[0, 0, 0]]
  return true if desired_sum == foods[ind]
  return false if desired_sum.to_a.first.zip(foods[ind].to_a.first).map {|a,b| a<b}.all?
  return false if ind < 0
  opt1 = @cache[[ind-1, desired_sum]] ||= compute(foods, ind-1, desired_sum)
  opt2 = @cache[[ind-1, desired_sum-foods[ind]]] ||= compute(foods, ind-1, desired_sum-foods[ind])
  return opt1 || opt2
end
File.open('./new_years_resolution.txt') do |f|
  num_test_cases = f.readline.to_i
  num_test_cases.times do |test_ind|
    desired_sum = Matrix[f.readline.chomp.split(' ').map(&:to_i)]
    num_foods = f.readline.to_i
    foods = num_foods.times.map do
      Matrix[f.readline.chomp.split(' ').map(&:to_i)]
    end
    result = compute(foods, foods.size-1, desired_sum)
    puts "Case ##{test_ind+1}: #{result ? 'yes' : 'no'}"
    @cache = {}
  end
end

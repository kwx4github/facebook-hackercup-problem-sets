module Main where

solve testCase = do line1 <- getLine
                    let gp:gc:gf:_ = map read $ words line1 :: [Int]
                    line2 <- getLine
                    let n = read line2 :: Int
                    list <- mapM (\_ -> do line <- getLine
                                           let p:c:f:_ = map read $ words line :: [Int]
                                           return (p,c,f)) [1..n]
                    putStrLn $ "Case #" ++ show testCase ++ ": " ++ if possible (gp,gc,gf) list then "yes" else "no"
                 where possible (0,0,0) _ = True
                       possible (gp,gc,gf) _ | gp < 0 || gc < 0 || gf < 0 = False
                       possible _ [] = False
                       possible (gp,gc,gf) ((p,c,f):list) = possible (gp,gc,gf) list || possible (gp - p,gc - c,gf - f) list

main = do line <- getLine
          mapM_ solve [1..(read line)::Int]
          return ()

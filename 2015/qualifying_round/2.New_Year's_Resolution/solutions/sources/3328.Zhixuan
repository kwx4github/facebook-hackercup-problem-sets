import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Zhixuna Jia
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("new_year_resolution.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("new_year_resolution.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		New_Year_Resolution solver = new New_Year_Resolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class New_Year_Resolution {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int P = in.nextInt();
        int C = in.nextInt();
        int F = in.nextInt();

        int N = in.nextInt();
        boolean possible = false;

        ArrayList<ArrayList<Integer>> foods = new ArrayList<ArrayList<Integer>>();

        for (int i = 0; i < N; i++) {
            int p = in.nextInt();
            int c = in.nextInt();
            int f = in.nextInt();
            ArrayList<Integer> food = new ArrayList<Integer>();
            food.add(p);
            food.add(c);
            food.add(f);
            foods.add(food);
        }

        for (int i = 1; i <= N; i++) {
            List<List<Integer>> tmp = combine(N, i);
            for (int j = 0; j < tmp.size(); j++) {
                List<Integer> list = tmp.get(j);
                int p = 0, c = 0, f = 0;
                for (int k = 0; k < list.size(); k++) {
                    p += foods.get(list.get(k)-1).get(0);
                    c += foods.get(list.get(k)-1).get(1);
                    f += foods.get(list.get(k)-1).get(2);
                    if (p > P || c > C || f > F) break;
                    if (p == P && c == C && f == F) {
                        possible = true;
                        break;
                    }
                }
                if (possible) break;
            }
            if (possible) break;
        }

        if (possible) {
            out.println("Case #" + testNumber + ": yes");
        } else {
            out.println("Case #" + testNumber + ": no");
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> l = new ArrayList<Integer>();
        find(result, l, k, n, 0);
        return result;
    }

    private void find(List<List<Integer>> result, List<Integer> l, int k, int n, int last) {
        if (l.size() == k) {
            result.add(l);
            return;
        }

        for (int i = last+1; i <= n; i++) {
            List<Integer> ln = new ArrayList<Integer>(l);
            ln.add(i);
            find(result, ln, k, n, i);
        }
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


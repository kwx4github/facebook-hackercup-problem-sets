#include<fstream>
#include<vector>
using namespace std;

struct colory{
    int p,c,f;
    colory(int x=0, int y=0, int z=0):p(x), c(y), f(z){}
};

vector<vector<int>> sumTo(vector<int> &v, int i, int target){
    vector<vector<int>> res;
    if(i==v.size()) return res;
    if(v[i]>target) return move(sumTo(v, i+1, target));
    else if(v[i]==target){
        vector<vector<int>> tmp=sumTo(v, i+1, target);
        tmp.push_back(vector<int>{i});
        return move(tmp);
    }else{
        vector<vector<int>> tmp1=sumTo(v, i+1, target-v[i]);
        vector<vector<int>> tmp2=sumTo(v, i+1, target);
        for(auto vi: tmp1){
            vi.push_back(i);
            tmp2.push_back(vi);
        }
        return move(tmp2);
    }
}

bool eat(vector<colory> &foods, const colory& desire){
    vector<int> p;
    for(auto food: foods){
        p.push_back(food.p);
    }
    vector<vector<int>> idx=sumTo(p, 0, desire.p);
    if(idx.empty()) return false;
    for(auto vi: idx){
        int c=0, f=0;
        for(auto i: vi){
            c+=foods[i].c;
            f+=foods[i].f;
        }
        if(c==desire.c && f==desire.f)  return true;
    }
    return false;
}

int main(){
    ifstream input("new_years_resolution.txt");
    ofstream output("output.txt");
    int T;
    input>>T;
    for(int i=0; i<T; ++i){
        colory desire;
        input>>desire.p>>desire.c>>desire.f;
        int N;
        input>>N;
        vector<colory> foods;
        foods.reserve(N);
        for(int j=0; j<N; ++j){
            colory tmp;
            input>>tmp.p>>tmp.c>>tmp.f;
            foods.push_back(move(tmp));
        }
        output<<"Case #"<<i+1<<": ";
        if(eat(foods, desire))
            output<<"yes"<<endl;
        else
            output<<"no"<<endl;
    }

}

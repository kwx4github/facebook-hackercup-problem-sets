import sys

def getComb(elems, wantedsum, prefix_index=0):
	if wantedsum < 0 or len(elems) == 0 :
		return None
	
	rslt = []
	for i, root in enumerate(elems):
		#print "*"*prefix_index,
		#print "at%d   (%d --> %d)"%(prefix_index,root, wantedsum)
		if root == wantedsum:
			 rslt.append([i+prefix_index])
			# print "."*prefix_index,
			# print "found! res:"+str(rslt),
			# print "and i:%d"%i
		else:
			tmp = getComb(elems[i+1:], wantedsum-root, i+prefix_index+1)
			if tmp:
				rslt.append([i+prefix_index]+tmp)
			#	print "."*prefix_index,
			#	print "appended at %d with res:%s"%(prefix_index, str(rslt))
			#else:
			#	print "."*prefix_index,
			#	print "nothing returned from %d"%(prefix_index+1)
	
	#print "%d is returning"%prefix_index
	return rslt

def printComb(sln, prev, ret):
	if not sln:
		ret.append(prev)
		#print str(prev)
	root = sln[0]
	if not sln[1:]:
		ret.append(prev+[root])
		#print str(prev+[root])
	for e in sln[1:]:
		printComb(e, prev+[root],ret)
	

def getPossiblePaths():
	case = 1
	for each_test, w_list in zip(testcases,wanted_list):
		three_sln = []
		for i in range(3):
			#print "test:"+str(each_test[i]) +" and wanted:"+str(w_list[i])
			slns = getComb(each_test[i], w_list[i])
			#print slns
			#print
			
			ret=[]
			for sln in slns:
				printComb(sln,[],ret)
			#print ret
			three_sln.append(ret)
		
		sln_z = three_sln[2]
		sln_y = three_sln[1]
		sln_x = three_sln[0]
		found=False
		for e in sln_x:
			if e in sln_y and e in sln_z:
				found=True
				break
		
		print "Case #%d:"%case,
	
		if found:
			print "yes"
		else:
			print "no"
		case = case+1



if len(sys.argv) > 1:
	filename = argv[1]
else:
	filename='new_years_resolution.txt'

testcases=[]
wanted_list=[]
totaltests = 0

with open(filename,'r') as f:
	totaltests = int(f.readline().strip())

	for test in range(totaltests):
		
		newtest = [[],[],[]] # [ a_list, b_list, c_list ]

		wanteds = map( int, f.readline().strip().split(' '))
		wanted_list.append(wanteds)

		total_food = int(f.readline().strip())
		
		for a_food in range(total_food):
			foods = f.readline().strip().split(' ')
			for i,elem in enumerate(foods):
				newtest[i].append(int(elem))

		
		testcases.append(newtest)


getPossiblePaths()


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

//Solves a subset sum problem disguised as dietary decisionmaking
public class Resolution
{
	public static void main(String[] args)
	{
		long start = System.nanoTime();
		solveResolution();
		long end = System.nanoTime();
		printTime(start, end);
	}
	
	private static void solveResolution()
	{
		Scanner sc = openFileForReading("new_years_resolution.txt");
		PrintWriter pw = openFileForWriting("output.txt");
		int size = sc.nextInt();
		for(int casenum = 1; casenum <= size; casenum++)
		{
			if(casenum != 1) pw.println();
			int[] targets = {sc.nextInt(), sc.nextInt(), sc.nextInt()};
			int[][] foods = new int[sc.nextInt()][3];
			for(int foodnum = 0; foodnum < foods.length; foodnum++) for(int i = 0; i < 3; i++)
				foods[foodnum][i] = sc.nextInt();
			/*I initally thought of solving this with the dynamic programming approach,
			 * started here, but I realized that the exponential approach doesn't scale with
			 * the three macronutrients, while the DP approach scales combinatorially with them,
			 * making the exponential approach probably better
			 * (in the interest of time, I'm not going to do the math to verify that)
			int nutrientscope = 1000+1;
			int subsetscope = foods.length+1;
			//The memoization table stores whether there exists a subset that reaches a certain set of sums
			// so the first dimension is the subset range we're considering (i.e. the first i foods)
			// the next three dimensions specify a particular nutrient sum for which a subset does/does not exist
			boolean[][][][] memo = new boolean[subsetscope][nutrientscope][nutrientscope][nutrientscope];
			*/
			
			pw.print(("Case #" + casenum + ": " + (recurseSubsetSum(foods, targets, null, 0) ? "yes" : "no")));
		}
		sc.close();
		pw.close();
	}
	
	private static boolean recurseSubsetSum(int[][] foods, int[] targets, boolean[] eat, int index)
	{
		int[] sums = null;
		if(index > 0) sums = sumfoods(foods, eat);
		if(index == foods.length)
		{
			for(int i = 0; i < targets.length; i++)
				if(targets[i] != sums[i])
					return false;
			return true;
		}
		else
		{
			/* This little block (and the part at the top making it get the sum even when it's not done selecting)
			 *  lets it check if the currently selected foods already exceed the targets,
			 *  and if so, abandon further food selection
			 * -- my tests indicate it increases speed by about a factor of 10
			 */
			if(sums != null) for(int i = 0; i < targets.length; i++)
				if(targets[i] < sums[i]) return false;
			boolean[] eatyes = new boolean[index+1];
			boolean[] eatnot = new boolean[index+1];
			for(int i = 0; i < index; i++)
			{
				eatyes[i] = eat[i];
				eatnot[i] = eat[i];
			}
			eatyes[index] = true;
			eatnot[index] = false;
			return recurseSubsetSum(foods, targets, eatyes, index+1) || recurseSubsetSum(foods, targets, eatnot, index+1);
		}
	}
	
	private static int[] sumfoods(int[][] foods, boolean[] eat)
	{
		int[] sums = new int[foods[0].length];
		for(int i = 0; i < eat.length; i++) if(eat[i])
			for(int j = 0; j < foods[i].length; j++)
				sums[j] += foods[i][j];
		return sums;
	}
		
	//Returns a scanner for the file of name fileName
	private static Scanner openFileForReading(String filename)
	{
		Scanner scanner = null;
		try {	scanner = new Scanner(new File(filename));	}
		catch (FileNotFoundException e)
		{
			System.out.println("Could not open " + filename);
			e.printStackTrace();
		}
		return scanner;
	}

	//Returns a writer for a file of name fileName
	private static PrintWriter openFileForWriting(String filename)
	{
		PrintWriter writer = null;
		try {	writer = new PrintWriter(new FileWriter(filename));	}
		catch (IOException e)
		{
			System.out.println("Could not create " + filename);
			e.printStackTrace();
		}
		return writer;
	}

	private static void printTime(long start, long end)
	{
		long time = end - start;
		print("\nTime elapsed: ");
		int seconds = (int)(time/1000000000);
		int minutes = seconds/60;
		seconds%=60;
		int milliseconds = (int)((time/1000000)%1000);
		int microseconds = (int)((time/1000)%1000);
		int nanoseconds = (int)(time%1000);
		if(minutes > 0)			print(minutes + " minutes");
		if(seconds > 0) 		print(seconds + " seconds");
		if(milliseconds > 0)	print(milliseconds + " milliseconds");
		if(microseconds > 0)	print(microseconds + " microseconds");
		if(nanoseconds > 0)		print(nanoseconds + " nanoseconds");
	}
	
	private static void print(Object ob) { System.out.println(ob); }
}
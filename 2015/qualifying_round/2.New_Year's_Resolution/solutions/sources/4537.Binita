using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Linq;
struct Food
{
    public int a;
    public int b;
    public int c;
}
class FHackerCup
{
    public static void Main()
    {
        //read a file
        string[] txt = File.ReadAllLines("input.txt");
        int t = int.Parse(txt[0]);
        int counter = 1;
        StringBuilder sb = new StringBuilder();
        int lineNumber = 1;
        while (t-- > 0)
        {
            //long n = long.Parse(txt[lineNumber]);
            sb.AppendFormat("Case #{0}: ", counter);
            int[] final = txt[lineNumber].Split().Select(x => int.Parse(x)).ToArray();
            lineNumber++;
            int n = int.Parse(txt[lineNumber]);
            lineNumber++;
            Food[] f = new Food[n];
            for (int i = 0; i < n; i++)
            {
                int[] quantity = txt[lineNumber].Split().Select(x => int.Parse(x)).ToArray();
                lineNumber++;
                f[i].a = quantity[0];
                f[i].b = quantity[1];
                f[i].c = quantity[2];
            }
            bool outcome = Recur(final, n, f, 0, new int[] { 0, 0, 0 });
            if (outcome)
                sb.Append("yes");
            else
                sb.Append("no");
            sb.AppendLine();
            counter++;
        }
        File.WriteAllText("output.txt", sb.ToString());

    }

    static bool Recur(int[] final, int n, Food[] arr , int idx , int[] summation)
    {
        if (idx == n)
        {
            if (final[0] == summation[0] && final[1] == summation[1] && final[2] == summation[2])
                return true;
            return false;
        }
        //if we pick current item
        int[] updatedVal = new int[3];
        updatedVal[0] = summation[0] + arr[idx].a;
        updatedVal[1] = summation[1] + arr[idx].b;
        updatedVal[2] = summation[2] + arr[idx].c;
        bool r = Recur(final, n, arr, idx + 1, updatedVal);
        if (!r)
        {
            r = Recur(final, n, arr, idx + 1, summation);
        }
        return r;
    }
}
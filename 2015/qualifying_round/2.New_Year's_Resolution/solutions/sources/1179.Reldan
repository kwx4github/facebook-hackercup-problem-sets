package hackercup

import scala.io.Source

object NY extends App {
  var source = Source.fromURL(getClass.getResource("/ny.txt")).getLines().toList
  val testCount = source.head.toInt
  source = source.tail
  var cache = Map.empty[Map[Int, Int], (Int, Int, Int)]
  var foods = Map.empty[Int, Int]
  var foodIndex = Map.empty[Int, (Int, Int, Int)]
  var foodPriority = List.empty[Int]
  var i = 0

  def yesOrNo(expected: (Int, Int, Int), foods: List[(Int, Int, Int)]): Boolean = expected match {
    case (0, 0, 0) => true
    case (a, b, c) if a < 0 || b < 0 || c < 0 => false
    case _ if foods.isEmpty => false
    case (a, b, c) =>
      val head :: tail = foods
      yesOrNo(expected, tail) || yesOrNo((expected._1 - head._1, expected._2 - head._2, expected._3 - head._3), tail)
  }


  val res = Range(0, testCount).map { _ =>

    val Array(eP, eC, eF) = source.head.split(" ").map(_.toInt)
    source = source.tail
    val foodCount = source.head.toInt
    source = source.tail
    cache = Map(Map.empty[Int, Int] -> (0, 0, 0))
    val foodsAll = Range(0, foodCount).map{ c_ =>
      val Array(p, c, f) = source.head.split(" ").map(_.toInt)
      source = source.tail
      (p, c, f)
    }.sortBy{ case(a, b, c) => (if (eP != 0) a.toDouble / eP else a) + (if (eC != 0) b.toDouble / eC else b) + (if (eF != 0) b.toDouble / eF else c)}
    .reverse

    yesOrNo((eP, eC, eF), foodsAll.toList)
  }.map{
    case true => "yes"
    case false => "no"}
  println(res.zipWithIndex.map{
    case (b, index) => s"Case #${index + 1}: $b"
  }.mkString("\n"))
}

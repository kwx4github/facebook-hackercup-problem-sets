import java.util.*;
import java.io.*;

public class newyearRes {
	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new FileReader("new_years_resolution.txt"));
		String cas = in.readLine();
		int n = Integer.parseInt(cas);
		BufferedWriter out = new BufferedWriter(new FileWriter("new_years_resolution_answer.txt"));

		for (int j = 0; j < n; ++j) {
			String[] line = in.readLine().split(" ");
			int[] target = strToIntArr(line);

			int foodNum = Integer.parseInt(in.readLine());
			List<Food> foods = new ArrayList<Food>();
			for (int i = 0; i < foodNum; ++i) {
				String[] f = in.readLine().split(" ");
				foods.add(new Food(strToIntArr(f)));
			}
			Collections.sort(foods, new FoodComparator());
			boolean b = combination(foods, 0, target);
			// System.out.println(b);
			out.write("Case #"+(j+1)+": " + ((b) ? "yes" : "no") + "\n");
		}
		in.close();
		out.close();
	}

	private static int[] strToIntArr(String[] str) {
		int[] res = new int[str.length];
		int i = 0;
		for (String s : str) {
			res[i++] = Integer.parseInt(s);
		}
		return res;
	}

	private static boolean combination(List<Food> foods, int start, int[] target) {
		if (target[0] < 0 || target[1] < 0 || target[2] < 0) return false;

		if (target[0] == 0 && target[1] == 0 && target[2] == 0) return true;
		else {
			for (int i = start; i < foods.size(); ++i) {
				int[] newtarget = new int[target.length];
				newtarget[0] = target[0]-foods.get(i).p;
				newtarget[1] = target[1]-foods.get(i).c;
				newtarget[2] = target[2]-foods.get(i).f;
				if (combination(foods, start+1, newtarget)) return true;
			}
		}

		return false;
	}
}


class FoodComparator implements Comparator<Food> {
	
	@Override
	public int compare(Food f1, Food f2) {
		if (f1.p < f2.p) return -1;
		else if (f1.p > f2.p) return 1;
		else {
			if (f1.c < f2.c) return -1;
			else if (f1.c > f2.c) return 1;
			else {
				return f1.f - f2.f;
			}
		}
	}
} 

class Food {
	int p;
	int c;
	int f;
	Food (int[] food) {
		this.p = food[0];
		this.c = food[1];
		this.f = food[2];
	}
};



#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <sstream>
using namespace std;
class Solution{
public:
	bool eatFoot(vector<int>& target, vector<vector<int> >& food)
	{
		vector<int> sum(3, 0);
		for (int i = 0; i < food.size(); i++)
			if (dfs(target, food, sum, i))
				return true;
		return false;
	}

	bool dfs(vector<int>& target, vector<vector<int> > &food, vector<int> sum, int pos)
	{
		sum[0] = sum[0] + food[pos][0];
		sum[1] = sum[1] + food[pos][1];
		sum[2] = sum[2] + food[pos][2];
		if (sum[0] > target[0] || sum[1] > target[1] || sum[2] > target[2])
			return false;
		if (sum[0] == target[0] && sum[1] == target[1] && sum[2] == target[2])
			return true;
		bool find = false;
		for (int i = pos + 1; i < food.size(); i++)
		{
			if (dfs(target, food, sum, i))
			{
				find = true;
				break;
			}
		}
		return find;
	}
}S;
int main()
{
	ifstream input("input.txt");
	ofstream output("output.txt");
	string line;
	getline(input, line);
	int total = atoi(line.c_str());
	for (int i = 0; i < total; i++)
	{
		getline(input, line);
		istringstream iss(line);
		vector<int> target;
		vector<vector<int> > food;
		string word;
		for (int i = 0; i < 3; i++)
		{
			iss >> word;
			target.push_back(atoi(word.c_str()));
		}
		getline(input, line);
		int foodNum = atoi(line.c_str());
		for (int j = 0; j < foodNum; j++)
		{
			getline(input, line);
			istringstream ist(line);
			vector<int> vec;
			string foodword;
			for (int k = 0; k < 3; k++)
			{
				ist >> word;
				vec.push_back(atoi(word.c_str()));
			}
			food.push_back(vec);
		}
		if (S.eatFoot(target, food))
			output << "Case #" << i + 1 << ": " << "yes" << endl;
		else
			output << "Case #" << i + 1 << ": " << "no" << endl;
	}
	input.close();
	output.close();
}
#include<bits/stdc++.h>
  
using namespace std;

template<class T> inline T sqr(const T& a) { return a * a; }
  
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
  
constexpr ld EPS = 1e-9;
constexpr ld PI = 2 * acos(0.0);
constexpr int N = 21;

int fp[N], fc[N], ff[N];

bool solve(int gp, int gc, int gf, int n) {
  int mend = 1 << n;
  for (int mask = 0; mask < mend; ++mask) {
    int p = 0, c = 0, f = 0;
    for (int i = 0; i < n; ++i) {
      if (mask & (1 << i)) {
        p += fp[i];
        c += fc[i];
        f += ff[i];
      }
    }
    if (p == gp && c == gc && f == gf)
      return true;
  }
  return false;
}

int main() {
  int tests;
  scanf("%d", &tests);
  for (int it = 1; it <= tests; ++it) {
    int gp, gc, gf;
    scanf("%d%d%d", &gp, &gc, &gf);
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
      scanf("%d%d%d", &fp[i], &fc[i], &ff[i]);
    }
    printf("Case #%d: %s\n", it, solve(gp, gc, gf, n) ? "yes" : "no");
  }
  return 0;
}

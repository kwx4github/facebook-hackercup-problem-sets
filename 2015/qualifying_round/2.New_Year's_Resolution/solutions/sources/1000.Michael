require 'pp'

# returns nil if empty line
def input_line
  # if not defined, set to nil and read from stdinput
  @input_filename ||= 'new_years_resolution.txt'

  if @input_filename
    @lines ||= File.read(@input_filename).each_line.map(&:chomp)
    # read from file line by line
    @lines.shift
  else
    # read from stdin
    $stdin.read
  end
end

def letter?(char)
  char =~ /[a-z]/
end

$foods = nil
$cache = nil
def possible?(needs, foods)
  $foods = foods
  $cache = {}
  possible_recursive?(needs) ? "yes" : "no"
end

def needs_key(needs)
  needs[0] + needs[1] * 1000 + needs[2] * 1000000
end

def possible_recursive?(needs)
  if needs.all? { |need| need == 0 }
    return true
  end
  if needs.any? { |need| need < 0 }
    return false
  end

  key = needs_key(needs)
  return $cache[key] if $cache.has_key?(key)

  result = $foods.any? do |food|
    new_need = needs.zip(food).map { |x| x.reduce(:-) }
    possible_recursive?(new_need)
  end
  $cache[key] = result
  result
end

num_cases = input_line.to_i
(1..num_cases).each do |case_num|
  needs = input_line.split(' ').map(&:to_i)

  foods = []
  input_line.to_i.times do |_n|
    foods << input_line.split(' ').map(&:to_i)
  end
  foods.uniq!

  result = possible?(needs, foods)
  puts "Case ##{case_num}: #{result}"
end
package gowtham;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.StringTokenizer;

public class hackerQualifyingRound {
	static String combination = "";

	private static void readFile(String fileName) {
		try {
			File file = new File(fileName);
			Scanner scanner = new Scanner(file);
			int no_of_input = 0;
			if (scanner.hasNextLine()) {
				no_of_input = scanner.nextInt();
			}
			for (int k = 0; k < no_of_input; k++) {
				boolean flag = false;
				int pro, car, fat, no_of_food, count = 0;
				pro = scanner.nextInt();
				car = scanner.nextInt();
				fat = scanner.nextInt();
				no_of_food = scanner.nextInt();
				int arr[][] = new int[no_of_food][3];
				for (int i = 0; i < no_of_food; i++) {
					int a = scanner.nextInt(), b = scanner.nextInt(), c = scanner
							.nextInt();
					if (a > pro || b > car || c > fat) {
						continue;
					}
					arr[count][0] = a;
					arr[count][1] = b;
					arr[count][2] = c;
					count++;
				}
				int combi = 0, final_count = count;
				while (count > 0) {
					combination = "";
					int arr1[] = new int[final_count];
					for (int i = 0; i < final_count; i++) {
						arr1[i] = i;
					}
					combi += 1;
					printCombination(arr1, final_count, combi);
					StringTokenizer tokenizer = new StringTokenizer(
							combination, ". ");
					int number_0f_times = tokenizer.countTokens() / combi;
					if (tokenizer.hasMoreTokens()) {
						for (int i = 0; i < number_0f_times; i++) {
							int suma = 0, sumb = 0, sumc = 0, temp;
							for (int j = 0; j < combi; j++) {
								temp = Integer.parseInt(tokenizer.nextToken());
								suma += arr[temp][0];
								sumb += arr[temp][1];
								sumc += arr[temp][2];
							}
							if (suma == pro && sumb == car && sumc == fat) {
								flag = true;
								break;
							}
						}
						if (flag) {
							break;
						}
					}
					count--;
				}
				if (flag) {
					System.out.print("Case #"+(k+1)+": yes\n");
				} else
					System.out.print("Case #"+(k+1)+": no\n");
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	static void printCombination(int arr[], int n, int k) {
		int data[] = new int[k];

		combinationUtil(arr, data, 0, n - 1, 0, k);
	}

	static void combinationUtil(int arr[], int data[], int start, int end,
			int index, int r) {
		if (index == r) {
			for (int j = 0; j < r; j++)
				combination += String.valueOf(data[j]) + " ";
			return;
		}

		for (int i = start; i <= end && end - i + 1 >= r - index; i++) {
			data[index] = arr[i];
			combinationUtil(arr, data, i + 1, end, index + 1, r);
		}
	}

	public static void main(String args[]) {
		readFile("new_years_resolution.txt");
	}

}

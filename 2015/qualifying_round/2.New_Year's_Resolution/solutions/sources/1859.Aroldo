import java.io.*;
import java.util.StringTokenizer;


public class Main {
    private static class IO {

        private static class InputReader {
            public BufferedReader reader;
            public StringTokenizer tokenizer;

            public InputReader(InputStream stream) {
                reader = new BufferedReader(new InputStreamReader(stream), 32768);
                tokenizer = null;
            }

            public String next() {
                while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                    try {
                        tokenizer = new StringTokenizer(reader.readLine());
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
                return tokenizer.nextToken();
            }

            public String nextLine() {
                try {
                    return reader.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
            }

            public int nextInt() {
                return Integer.parseInt(next());
            }

            public long nextLong() {
                return Long.parseLong(next());
            }

            public double nextDouble() {
                return Double.parseDouble(next());
            }

            public float nextFloat() {
                return Float.parseFloat(next());
            }

        }

        private static InputStream inputStream = System.in;
        private static OutputStream outputStream = System.out;
        private static InputReader in = new InputReader(inputStream);
        private static PrintWriter out = new PrintWriter(outputStream);

        private static String next() {
            return in.next();
        }

        public static String nextLine() {
            return in.nextLine();
        }

        public static int nextInt() {
            return in.nextInt();
        }

        public static long nextLong() {
            return in.nextLong();
        }

        public static double nextDouble() {
            return in.nextDouble();
        }

        public static float nextFloat() {
            return in.nextFloat();
        }

        public static void print(String txt) {
            out.print(txt);
        }

        public static void println(String txt) {
            out.println(txt);
        }

        public static void println(int txt) {
            out.println(txt);
        }

        public static void println(long txt) {
            out.println(txt);
        }

        public static void println() {
            out.println();
        }

        public static void close() {
            out.close();
        }
    }

    public static void main(String[] args) {
        solve();
        IO.close();
    }

    private static void solve() {
        int t = IO.nextInt();
        for (int i = 1; i <= t; i++) {
            int gp = IO.nextInt();
            int gc = IO.nextInt();
            int gf = IO.nextInt();
            int n = IO.nextInt();
            int[] p = new int[n];
            int[] c = new int[n];
            int[] f = new int[n];
            for (int j = 0; j < n; j++) {
                p[j] = IO.nextInt();
                c[j] = IO.nextInt();
                f[j] = IO.nextInt();
            }
            boolean possible = false;
            for (int j = 0; j < (1 << n); j++) {
                int sp = 0;
                int sc = 0;
                int sf = 0;
                for (int k = 0; k < n; k++) {
                    if ((j & (1 << k)) != 0) {
                        sp += p[k];
                        sc += c[k];
                        sf += f[k];
                    }
                }
                if (gp == sp && gc == sc && gf == sf) {
                    possible = true;
                    break;
                }
            }
            IO.println("Case #" + i + ": " + (possible ? "yes" : "no"));
        }
    }


}

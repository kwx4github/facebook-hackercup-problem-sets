#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

bool isPossible(vector<int> &proteins,vector<int> &carbos, vector<int> &fats,int low, int size, int pro_req, int car_req, int fat_req)
{
	if (pro_req == 0 && car_req == 0 && fat_req == 0)
		return true;

	if (size == 0)
		return false;

	return (isPossible(proteins,carbos,fats, low + 1, size - 1, pro_req - proteins[low], car_req - carbos[low], fat_req - fats[low]) || isPossible(proteins,carbos,fats, low + 1, size - 1, pro_req, car_req, fat_req));
}

void testcase(int no)
{
	int pro_req, car_req, fat_req;
	cin >> pro_req >> car_req >> fat_req;
	int n;
	cin >> n;
	vector<int> proteins, carbos, fats;
	int input;
	for (int i = 0; i < n; i++)
	{
		cin >> input;
		proteins.push_back(input);
		cin >> input;
		carbos.push_back(input);
		cin >> input;
		fats.push_back(input);
	}
	//sort(proteins.begin(), proteins.end());
	//sort(carbos.begin(), carbos.end());
	//sort(fats.begin(), fats.end());

	bool isPos_pro = isPossible(proteins,carbos,fats,0, proteins.size(), pro_req, car_req, fat_req);
	//bool isPos_carbos = isPossible(carbos, 0, carbos.size(), car_req);
	//bool ispos_fats = isPossible(fats, 0, fats.size(), fat_req);

	if (isPos_pro)
	{
		cout << "Case #" << no + 1 << ": yes" << endl;
	}
	else
	{
		cout << "Case #" << no + 1 << ": no" << endl;
	}
}

int main()
{
	int t;
	cin >> t;
	for (int i = 0; i < t; i++)
		testcase(i);

	getchar();
	return 0;
}

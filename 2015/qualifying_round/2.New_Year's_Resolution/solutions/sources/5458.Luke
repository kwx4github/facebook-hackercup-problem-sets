import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Stack;



public class NewYear {
    //private static final int[] DATA = { 40, 20, 30, 10, 40};
	  private static  ArrayList<Food> testCase= new ArrayList<Food>();
	  private static int T;
	  private static int currentTestCase=1;
	  private static int typeOfLine = 0; //0 is GpGcGf, 1 is N, 2 is P C or F 
	  public static int targetValues[]= {0,0,0};  
	  public static boolean isbalanced=false;
    public static void main(String[] args) {
    	
    	// Open the file
    	FileInputStream fstream;
		try {
			fstream = new FileInputStream("new_years_resolution.txt");
			BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

	    	String strLine;
            int currentLine=1;
            int N=0;
            int processedNlines=0;
	    	//Read File Line By Line
	    	while ((strLine = br.readLine()) != null)   {
	    	  // Print the content on the console
	    		
	    	if (currentLine==1){
	    		T= Integer.parseInt(strLine);
                typeOfLine=0;
                System.out.println("Started Process");	
	    	}else{
	    		if (typeOfLine==0){
	    			 
	    			targetValues[0] = Integer.parseInt(strLine.split(" ")[0]);
	    			targetValues[1] = Integer.parseInt(strLine.split(" ")[1]);
	    			targetValues[2] = Integer.parseInt(strLine.split(" ")[2]);
	    			typeOfLine=1;
	    			processedNlines=0;
	    			isbalanced=false;
	    			 System.out.println("Processing Test case: "+currentTestCase+" of "+T);	
	    		}else if (typeOfLine==1){
	    			N = Integer.parseInt(strLine);
	    		    typeOfLine=2;
	    		    testCase.clear();
	    		}else if (typeOfLine==2){
	    			if (processedNlines<N){
	    				testCase.add(new Food(Integer.parseInt(strLine.split(" ")[0]), Integer.parseInt(strLine.split(" ")[1]), Integer.parseInt(strLine.split(" ")[2]), testCase.size()));
	    			}
	    			processedNlines++;
	    			if (processedNlines>=N){
	    				 GetAllSubsetByStack get = new GetAllSubsetByStack(0);
	    			        ArrayList<ArrayList<Food>> combinationsByCol = new ArrayList<ArrayList<Food>>();
	    			        combinationsByCol.add(testCase);
	    			        get.getCombinations(combinationsByCol.get(0)).size();
	    			    	
	    				typeOfLine=0;
	    		
	    				if (isbalanced){
	    					writeToFile("Case #"+currentTestCase+": yes");
	    				  //System.out.println("Case #"+currentTestCase+": yes");	
	    				}else{
	    					writeToFile("Case #"+currentTestCase+": no");
	    					//System.out.println("Case #"+currentTestCase+": no");	
	    				}
	    				currentTestCase++;
	    			
	    			}
	    		   
	    		}
	    	}
	    	  //System.out.println (strLine);
	    	  currentLine++;
	    	}

	    	//Close the input stream
	    	br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Parabens..iam done");	    
    }

    
    private static final String newLine = System.getProperty("line.separator");

    private static synchronized void writeToFile(String msg)  {
        String fileName = "new_years_resolution_output.txt";
        PrintWriter printWriter = null;
        File file = new File(fileName);
        try {
            if (!file.exists()) file.createNewFile();
            printWriter = new PrintWriter(new FileOutputStream(fileName, true));
            printWriter.write(msg+newLine);
        } catch (IOException ioex) {
            ioex.printStackTrace();
        } finally {
            if (printWriter != null) {
                printWriter.flush();
                printWriter.close();
            }
        }
    }

}

class Food{
	private int P;
	private int C;
	private int F;
	private int id;
	
	public Food(int P, int C, int F,int id) {
		// TODO Auto-generated constructor stub
		this.P=P;
		this.C=C;
		this.F=F;
		this.id = id;
	}
	
	
	
	public int getId() {
		return id;
	}



	public void setId(int id) {
		this.id = id;
	}



	public int getP() {
		return P;
	}
	public void setP(int p) {
		P = p;
	}
	public int getC() {
		return C;
	}
	public void setC(int c) {
		C = c;
	}
	public int getF() {
		return F;
	}
	public void setF(int f) {
		F = f;
	}
	
	
}

class GetAllSubsetByStack {
	
    /** Set a value for target sum */
   private int currentCol;
   boolean hasCombinations;
   ArrayList<ArrayList<Food>> combinationsFound;
   ArrayList<Food> currentTestCase;
    private Stack<MacroNutrient> stack = new Stack<MacroNutrient>();

    /** Store the sum of current elements stored in stack */
    private int sumInStack = 0;
    
    public GetAllSubsetByStack(int currentCol) {
			// TODO Auto-generated constructor stub
    	this.currentCol=currentCol;
    	combinationsFound= new ArrayList<ArrayList<Food>>();
    	hasCombinations=false;
    	currentTestCase= new ArrayList<Food>();
    	
     }

    public ArrayList<ArrayList<Food>> getCombinations(ArrayList<Food> currentFoodCollection){
    	// GetAllSubsetByStack get = new GetAllSubsetByStack();
    	//for (int i=0;i<combinationsByCol.size();i++){
    	currentTestCase= currentFoodCollection;
    	populateSubset(getColumn(currentFoodCollection,currentCol), 0, currentFoodCollection.toArray().length);
    	
        if (combinationsFound.size()>0){
        	if ((currentCol+1)<=2){
        	for (int i=0;i<combinationsFound.size();i++){
        
            GetAllSubsetByStack get = new GetAllSubsetByStack(currentCol+1);
            get.getCombinations(combinationsFound.get(i)).size();
        	}
        	}else{
        		NewYear.isbalanced=true;
        	}
        }
    	
    
    	 
    	 return combinationsFound;
    }
    
    private ArrayList<MacroNutrient> getColumn(ArrayList<Food> testCase,int col){
    	ArrayList<MacroNutrient> columnData = new ArrayList<MacroNutrient>();
    	for (int i=0;i<testCase.size();i++){
    		if (col==0){
    			columnData.add(new MacroNutrient(testCase.get(i).getP(),testCase.get(i).getId()));
    		}else if (col==1){
    			columnData.add(new MacroNutrient(testCase.get(i).getC(),testCase.get(i).getId()));
    		}else{
    			columnData.add(new MacroNutrient(testCase.get(i).getF(),testCase.get(i).getId()));
    		}
    		
    	}
    	
    	return columnData;
    	
    }
    public void populateSubset(ArrayList<MacroNutrient> data, int fromIndex, int endIndex) {

        /*
        * Check if sum of elements stored in Stack is equal to the expected
        * target sum.
        * 
        * If so, call print method to print the candidate satisfied result.
        */
        if (sumInStack == NewYear.targetValues[currentCol]) {
            print(stack);
        }

        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

            if (sumInStack + data.get(currentIndex).value <= NewYear.targetValues[currentCol]) {
                stack.push(data.get(currentIndex));
                sumInStack += data.get(currentIndex).value;

                /*
                * Make the currentIndex +1, and then use recursion to proceed
                * further.
                */
                populateSubset(data, currentIndex + 1, endIndex);
                sumInStack -= ((MacroNutrient) stack.pop()).value;
            }
        }
    }

    private void print(Stack<MacroNutrient> stack) {
        StringBuilder sb = new StringBuilder();
        sb.append(NewYear.targetValues[currentCol]).append(" = ");
        ArrayList<Food> subCombinationByColumn = new ArrayList<Food>();
        for (MacroNutrient i : stack) {
            sb.append(i.value).append("["+i.getFoodID()+"]").append("+");
           for (int v=0;v<currentTestCase.size();v++){
        	   if (currentTestCase.get(v).getId()==i.getFoodID()){
            	   subCombinationByColumn.add(currentTestCase.get(v));
        	   }
           }
      
         //   subCombinationByColumn.add(NewYear.testCase.get(i.getFoodID()));
            		
        }
        
        if (subCombinationByColumn.size()>0){
        	hasCombinations=true;
        	
        	combinationsFound.add(subCombinationByColumn);
        }
      
    }
    
    
   
class MacroNutrient{
	int value;
	int foodID;
	
	public MacroNutrient(int value, int foodID) {
		// TODO Auto-generated constructor stub
		this.foodID=foodID;
		this.value=value;
	}
	
	public int getValue() {
		return value;
	}
	public void setValue(int value) {
		this.value = value;
	}
	public int getFoodID() {
		return foodID;
	}
	public void setFoodID(int foodID) {
		this.foodID = foodID;
	}
	
}


    
    
}
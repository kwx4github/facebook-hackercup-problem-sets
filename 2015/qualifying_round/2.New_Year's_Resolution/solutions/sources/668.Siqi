#include <iostream>
#include <tuple>
#include <vector>

using namespace std;

int int_power(int base, int exponent) {
    int result = 1;

    for (int i = 0; i < exponent; ++i) {
        result *= base;
    }

    return result;
}

int main(int argc, char* argv[]) {
    int T;
    cin >> T;

    for (int t = 1; t <= T; ++t) {
        int G_P;
        cin >> G_P;
        int G_C;
        cin >> G_C;
        int G_F;
        cin >> G_F;

        int N;
        cin >> N;

        vector<tuple<int, int, int>> foods;

        for (int n = 0; n < N; ++n) {
            int P;
            cin >> P;
            int C;
            cin >> C;
            int F;
            cin >> F;

            foods.push_back(make_tuple(P, C, F));
        }

        vector<tuple<int, int, int>> totals;
        totals.reserve(int_power(2, 20));
        totals.push_back(make_tuple(0, 0, 0));
        bool possible = false;
        for (int i = 0; i < N; ++i) {
            for (int j = 0, end = totals.size(); j < end; ++j) {
                int new_P = get<0>(foods[i]) + get<0>(totals[j]);
                int new_C = get<1>(foods[i]) + get<1>(totals[j]);
                int new_F = get<2>(foods[i]) + get<2>(totals[j]);
                if (new_P == G_P && new_C == G_C && new_F == G_F) {
                    possible = true;
                    goto loop_end;
                } else {
                    totals.push_back(make_tuple(new_P, new_C, new_F));
                }
            }
        }
        loop_end:
        cout << "Case #" << t << ": " << (possible ? "yes" : "no");
        if (t != T) {
            cout << "\n";
        }
    }

    return 0;
}
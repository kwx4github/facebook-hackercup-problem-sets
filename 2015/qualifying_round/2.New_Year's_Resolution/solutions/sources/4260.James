import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.*;

/**
 * Created by James on 1/8/2015.
 */
public class NewYears {
    private static Scanner scanner;
    private static Food [] foods;
    private static PrintWriter output;

    public static void main(String [] args) throws FileNotFoundException {
        scanner = new Scanner(new FileReader("./src/new_years_example_input.txt"));
        output = new PrintWriter(new File("./src/output.txt"));

        int T = scanner.nextInt();

        for (int i = 0; i < T; ++i) {
            System.out.printf("Case #%d: %s%s", i + 1, canEat() ? "yes" : "no", i == T - 1 ? "" : "\n");
        }
    }

    private static boolean canEat() {
        Food maxFood = new Food(scanner.nextInt(), scanner.nextInt(), scanner.nextInt());
        int n = scanner.nextInt();

        foods = new Food[n];

        for (int i = 0; i < n; ++i) {
            foods[i] = new Food(scanner.nextInt(), scanner.nextInt(), scanner.nextInt());
        }

        return canEat(n, maxFood);
    }

    private static boolean canEat(int n, Food sum) {
        if (sum.getGP() == 0 && sum.getGC() == 0 && sum.getGF() == 0) {
            return true;
        } else if (n == 0) {
            return false;
        }

        if (foods[n - 1].getGP() > sum.getGP() || foods[n - 1].getGC() > sum.getGC() || foods[n - 1].getGF() > sum.getGF()) {
            return canEat(n - 1, sum);
        } else {
            return canEat(n - 1, sum) || canEat(n - 1, new Food(sum.getGP() - foods[n - 1].getGP(), sum.getGC() - foods[n - 1].getGC(), sum.getGF() - foods[n - 1].getGF()));
        }
    }

    private static class Food {
        private int GP, GC, GF;
        private boolean marked;

        @Override
        public String toString() {
            return String.format("%d %d %d", this.GP, this.GC, this.GF);
        }

        public Food(int GP, int GC, int GF) {
            this.GP = GP;
            this.GC = GC;
            this.GF = GF;
            this.marked = false;
        }

        public int getGP() {
            return GP;
        }

        public void setGP(int GP) {
            this.GP = GP;
        }

        public int getGC() {
            return GC;
        }

        public void setGC(int GC) {
            this.GC = GC;
        }

        public int getGF() {
            return GF;
        }

        public void setGF(int GF) {
            this.GF = GF;
        }

        public boolean isMarked() {
            return marked;
        }

        public void setMarked(boolean marked) {
            this.marked = marked;
        }
    }
}
#include <iostream>
#include <vector>

using namespace std;

class range {
private:
  struct Iterator {
    int val;
    int operator*() {return val;}
    bool operator!=(Iterator& itr) {return val < itr.val;}
    void operator++() {++val;}
  };
  Iterator i, n;
public:
  range(int n) : i({0}), n({n}) {}
  range(int i, int n) : i({i}), n({n}) {}
  Iterator& begin() {return i;}
  Iterator& end() {return n;}
};

template<class T> inline T at(const vector<T> &v, int i) {return v[(i % (int)v.size() + v.size()) % v.size()];}

template<class T> inline bool is_max(T &a, const T &b) {return a < b ? a = b, true : false;}
template<class T> inline bool is_min(T &a, const T &b) {return a > b ? a = b, true : false;}

int main() {
  int t;
  cin >> t;
  for (int _ : range(t)) {
    cout << "Case #" << _ + 1 << ": ";
    int gp, gc, gf;
    cin >> gp >> gc >> gf;
    int n;
    cin >> n;
    int p[n], c[n], f[n];
    for (int i : range(n)) cin >> p[i] >> c[i] >> f[i];
    for (int bit : range(1 << n)) {
      int pp = 0, cc = 0, ff = 0;
      for (int i : range(n)) if (bit & 1 << i) {
        pp += p[i];
        cc += c[i];
        ff += f[i];
      }
      if (pp == gp && cc == gc && ff == gf) {
        cout << "yes" << endl;
        goto next;
      }
    }
    cout << "no" << endl;
  next:;
  }
}

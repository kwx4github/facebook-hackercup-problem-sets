const fi=''; fo=''; maxn=22;

type food=record
	x,y,z:longint;
    end;

var goal:food;
	list:array[0..maxn]of food;
	a:array[0..1 shl (maxn div 2)] of food;
    n,n1:longint;

function getbit(no_bit,n:longint):longint;
begin
	exit((n shr no_bit)and 1);
end;

procedure init;
var i,j:longint;
begin
	n1:= n div 2;
    for i:=0 to (1 shl n1)-1 do with a[i] do begin x:=0; y:=0; z:=0; end;
    for i:=1 to (1 shl n1)-1 do
    begin
    	for j:=0 to n1-1 do
        if getbit(j,i)=1 then
        with a[i] do
        begin
            x:=x+list[j+1].x; y:=y+list[j+1].y; z:=z+list[j+1].z;
        end;
    end;
end;

function cmp(a,b:food):longint;
begin
	if a.x<b.x then exit(-1);
    if a.x>b.x then exit(1);
    if a.y<b.y then exit(-1);
    if a.y>b.y then exit(1);
    if a.z<b.z then exit(-1);
    if a.z>b.z then exit(1);
    exit(0);
end;

procedure sort(l,r:longint);
var i,j:longint; k,tmp:food;
begin
	if l>r then exit;
	i:=l; j:=r; k:=a[l+random(r-l+1)];
    repeat
        while cmp(a[i],k)<0 do inc(i);
        while cmp(a[j],k)>0 do dec(j);
        if i<=j then
        begin
        	tmp:=a[i]; a[i]:=a[j]; a[j]:=tmp;
            inc(i); dec(j);
        end;
    until i>j;
    if i<r then sort(i,r);
    if l<j then sort(l,j);
end;

function find(tar:food):boolean;
var l,r,mid,tmp:longint;
begin
	l:=0; r:=(1 shl n1)-1;
    while (l<=r) do
    begin
    	mid:=(l+r) shr 1;
        tmp:=cmp(a[mid],tar);
        if tmp=0 then exit(true)
        else if tmp<0 then l:=mid+1
        else r:=mid-1;
    end;
    exit(false);
end;

function work:boolean;
var i,j:longint; tar:food;
begin
    init;
    sort(1,(1 shl n1)-1);
    for i:=0 to (1 shl (n-n1))-1 do
    begin
    	tar:=goal;
        for j:=0 to n-n1-1 do
        if getbit(j,i)=1 then
        with list[j+1+n1] do
        begin
        	tar.x:=tar.x-x; tar.y:=tar.y-y; tar.z:=tar.z-z;
        end;
        with tar do if (x<0)or(y<0)or(z<0) then continue;
        if find(tar) then exit(true);
    end;
    exit(false);
end;

procedure process;
var f,g:text; i,t,test:longint;
begin
	assign(f,fi); reset(f); assign(g,fo); rewrite(g);
    readln(f,t);
    for test:=1 to t do
    begin
    	with goal do readln(f,x,y,z);
        readln(f,n);
        for i:=1 to n do with list[i] do readln(f,x,y,z);
        if work then writeln(g,'Case #',test,': yes')
        else writeln(g,'Case #',test,': no');
    end;
    close(f); close(g);
end;
begin
	process;
end.

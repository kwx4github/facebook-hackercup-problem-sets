#include <iostream>
using namespace std;

struct diet{
	int p;
	int c;
	int f;
};

int isSubsetSumDP(int set[],int n,int sum){
	bool arr[sum+1][n+1];
	for(int i=0;i<=n;i++){
		arr[0][i] = true;
	}
	for(int i=1;i<=sum;i++){
		arr[i][0] = false;
	}
	for(int i=1;i<=sum;i++){
		for(int j=1;j<=n;j++){
			arr[i][j] = arr[i][j-1];
			if(i>=set[j-1]){
				arr[i][j] = arr[i][j-1]||arr[i-set[j-1]][j-1];
			}
		}
	}
	return arr[sum][n];
}

int main() {
	int t;
	cin >> t;
	for(int i=1;i<=t;i++){
		cout<<"Case #"<<i<<": ";
		diet req;
		int n;
		cin>>req.p;
		cin>>req.c;
		cin>>req.f;
		cin>>n;
		diet *arr = new diet[n];
		for(int j=0;j<n;j++){
			cin>>arr[j].p;
			cin>>arr[j].c;
			cin>>arr[j].f;
		}
		if(
			isSubsetSumDP(&arr[0].p,n,req.p)&&
			isSubsetSumDP(&arr[0].f,n,req.f)&&
			isSubsetSumDP(&arr[0].c,n,req.c)
		)cout<<"yes"<<endl;
		else cout<<"no"<<endl;
	}
	return 0;
}

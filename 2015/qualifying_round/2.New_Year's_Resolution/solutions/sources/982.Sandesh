#include <bits/stdc++.h>
#define make_it_fast ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

typedef long long int lli;
typedef unsigned long long ull;

#define ff first
#define ss second
#define pb push_back
#define mkp make_pair
#define lpu(i,s,e) for(i=s;i<e;i++)
#define lpd(i,s,e) for(i=s;i>e;i--)
#define rep(i,n) for(i=0;i<n;i++)
#define all(v) v.begin(), v.end()
#define dpl fprintf(stderr, "\n");
#define db(x) cerr << x << endl; // DEBUG PRIMITIVE
#define dbp(p) cerr << '(' << p.ff << ',' << p.ss << ") " << endl;
#define dbn(A,N) for(int __I=0; __I<N; __I++) cerr << A[__I] << " "; dpl; // DEBUG 1-D ARRAY
#define dbnm(A,N,M) for(int __I=0; __I<N; __I++) { for(int __J=0; __J<M; __J++) cerr << A[__I][__J] << " "; dpl; } // DEBUG 2-D ARRAY
#define dbvp(v) for(auto __Velem : v) cerr << '(' << __Velem.ff << ',' << __Velem.ss << ") " ; cerr << endl; // DEBUG VECTOR PAIRS
#define dbv(v) for(auto __Velem : v) cerr << __Velem << ' '; cerr << endl; // DEBUG VECTOR PRIMITIVE
#define gi2(_A,_B) inp(_A); inp(_B);
#define gi3(_A,_B,_C) inp(_A); inp(_B); inp(_C);

class TimeTracker {
  clock_t start, end;
public:
  TimeTracker() {
    start = clock();
  }
  ~TimeTracker() {
    end = clock();
    fprintf(stderr, "RunTime : %.3lf s\n", (double)(end - start) / CLOCKS_PER_SEC);
  }
};

# define getcx getchar

template <class T>
void inp(T& n)//fast input function
{
  n=0;
  int ch=getcx();
  int sign=1;
  while( ch < '0' || ch > '9' )
    {if(ch=='-')sign=-1; ch=getcx();}
  while( ch >= '0' && ch <= '9' )
    n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
  n=n*sign;
}

template <class T>
void oup(T x)
{
  if(x<0)
  {
    putchar('-');
    x=-x;
  }
  int len=0,data[25];
  while(x)
  {
    data[len++]=x%10;
    x/=10;
  }
  if(!len)
    data[len++]=0;
  while(len--)
    putchar(data[len]+48);
  putchar('\n');
}

struct node
{
  lli x, y, z;
};

int main()
{
  #ifdef LOCAL
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
    TimeTracker trk;
  #endif

  lli t; inp(t);
  for(int _tc = 1; _tc <= t; _tc++)
  {
    printf("Case #%d: ", _tc);
    lli n, bm, i;
    node r;
    vector< node > v; v.clear();
    bool flg = false;
    gi3(r.x, r.y, r.z);
    inp(n);
    rep(i, n) 
    { 
      node nd;
      gi3(nd.x, nd.y, nd.z);
      v.push_back(nd);
    }
    rep(bm, 1<<n)
    { 
      node s;
      s.x = s.y = s.z = 0;
      rep(i, n)
      {
        if(bm & (1<<i))
        {
          s.x += v[i].x; 
          s.y += v[i].y;
          s.z += v[i].z;
        }
      }
      if(s.x == r.x && s.y == r.y && s.z == r.z) flg = true;
      if(flg) break;
    }
    if(flg) printf("yes\n");
    else printf("no\n");
  }
  return 0;
}
#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>

using namespace std;

int total(int n, vector<vector<int> > given, vector<int> brute, int type){
    int add = 0;
    for(int x=0; x<n; x++)
        add += brute[x]*given[x][type];
    return add;
}

void updateB(vector<int>& sent){
    sent[0]++;
    for(int x=0; x<sent.size(); x++){
        if(sent[x] == 2){
            sent[x] = 0;
            sent[x+1]++;
        }
    }
}

string solve(){
    int GP, GC, GF;
    cin >> GP >> GC >> GF;
    vector<int> brute;
    int n; 
    cin >> n;
    brute.resize(0); brute.resize(n+1, 0);
    vector<vector<int> > given;
    vector<vector<int> > ans;
    ans.resize(0);
    given.resize(0);
    vector<int> temp;
    temp.resize(3, 0);
    given.resize(n, temp);
    //take in given vals
    for(int x=0; x<n; x++){
        cin >> given[x][0] >> given[x][1] >> given[x][2];
    }
    while(brute[n] == 0){
        if(total(n, given, brute, 0) == GP)
            ans.push_back(brute);
        updateB(brute);
    }
    //ok so we now have a list of answers for protein, now just check if they will work for carbs and fats.
    for(int x=0; x<ans.size(); x++){
        if(total(n, given, ans[x], 1) != GC){
            ans.erase(ans.begin() + x);
            x=0; 
        }
    }
    
    for(int x=0; x<ans.size(); x++){
        if(total(n, given, ans[x], 2) != GF){
            ans.erase(ans.begin() + n);
            x=0;
        }
    }
    if(ans.size() == 0) return "no";
    return "yes";
}

int main(){
    int T;
    cin >> T;
    string ans;
    for(int x = 0; x<T; x++){
        ans = solve();
        cout << "Case #" << x+1 << ": " << ans << endl;
    }
    return 0;
}

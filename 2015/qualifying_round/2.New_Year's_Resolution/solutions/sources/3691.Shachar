#include <stdio.h>
#include <assert.h>

#define MAX_FOODS 20

struct ntr_values {
  int p;
  int c;
  int f;
};


int can_feed(struct ntr_values *target_values,
	     struct ntr_values *possible_foods, int num_foods)
{
  int foods_selector;
  for (foods_selector = 0; foods_selector < (1<<num_foods); foods_selector++) {
    int i;
    struct ntr_values total_values = {0};
    for (i=0; i < num_foods; ++i) {
      if (foods_selector & (1<<i)) {
	total_values.p += possible_foods[i].p;
	total_values.c += possible_foods[i].c;
	total_values.f += possible_foods[i].f;
      }
    }
    if (total_values.p == target_values->p &&
	total_values.c == target_values->c &&
	total_values.f == target_values->f)
      return 1;
  }
  return 0;
}

void read_ntr_values(struct ntr_values *target_values)
{
  int scan = scanf("%d %d %d", &(target_values->p),
		   &(target_values->c),
		   &(target_values->f));
  assert(scan == 3);
}

int read_problem(struct ntr_values *target_values,
		 struct ntr_values *possible_foods)
{
  int scan, i, num_foods = 0;
  read_ntr_values(target_values);
  scan = scanf("%d", &num_foods);
  assert(scan == 1);
  for (i=0 ;i < num_foods; ++i) {
    read_ntr_values(&possible_foods[i]);
  }
  return num_foods;
}

int main()
{
  int scan,i,num_cases = 0;
  struct ntr_values target_values, possible_foods[MAX_FOODS];
  scan = scanf("%d",&num_cases);
  assert(scan == 1);
  for (i = 0; i < num_cases; ++i) {
    int num_foods = read_problem(&target_values, possible_foods);
    printf("Case #%d: %s\n",
	   i+1, can_feed(&target_values, possible_foods, num_foods)?"yes":"no");
  }
  return 0;
}

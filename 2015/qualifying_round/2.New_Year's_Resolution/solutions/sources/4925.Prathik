import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;


public class NewYear {
	public static void main(String[] args) throws NumberFormatException, IOException {
		  BufferedReader reader = new BufferedReader(new FileReader(new File("new_years_resolution.txt")));
		  PrintWriter writer = new PrintWriter(new File("result.txt"));
		  int t = Integer.parseInt(reader.readLine());
		  for(int i=0; i<t; i++) {
			  String[] reqs = reader.readLine().split(" ");
			  int gp = Integer.parseInt(reqs[0]);
			  int gc = Integer.parseInt(reqs[1]);
			  int gf = Integer.parseInt(reqs[2]);
			  int n = Integer.parseInt(reader.readLine());
			  Food[] foods = new Food[n];
			  for(int j=0; j<n; j++) {
				  String[] f = reader.readLine().split(" ");
				  foods[j] = new Food(Integer.parseInt(f[0]), Integer.parseInt(f[1]), Integer.parseInt(f[2]));
			  }
			  boolean[] sums = new boolean[gp + 1];
			  int[][] vals = new int[n][gp+1];
			  for(int h=0; h<n; h++) {
				  Arrays.fill(vals[h], -1);
			  }
			  go(foods, sums, vals);
			  int[] res = new int[n];
			  if(!sums[gp]) {
				 writer.write("Case #"+(i+1)+": no\n"); 
			  } else if(verify(foods, vals, 0, gp, 0, 0, gc, gf, res, 0)){
				 writer.write("Case #"+(i+1) + ": yes\n");
			  } else {
				  writer.write("Case #"+(i+1) + ": no\n");
			  }
		  }
		  writer.close();
		  reader.close();
	}
	
	public static boolean verify(Food[] foods, int[][] vals, int start, int sum, int tgc, int tgf, int gc, int gf, int[] res, int i) {
		if(sum ==0) {
			for(int j=0; j<i; j++) {
				System.out.print(res[j] + " ");
			}
			System.out.println();
			if(tgc==gc && tgf == gf) {
				return true;
			} else {
				return false;
			}
		} else {
			for(int j=start; j<foods.length; j++) {
				if(vals[j][sum] != -1) {
					int cp = foods[j].a;
					int cc = foods[j].b;
					int cf = foods[j].c;
					res[i] = vals[j][sum];
					boolean result = verify(foods, vals, j+1, sum - vals[j][sum], tgc + cc, tgf+cf, gc, gf, res, i+1);
					if(result) return result;
				}
			}
		}
		return false;
	}
	
	public static void go(Food[] foods, boolean[] sums, int[][] vals) {
		sums[0] = true;
		for(int i=foods.length-1; i>=0; i--) {
			for(int j=sums.length-1; j>=0; j--) {
				int cur = foods[i].a;
				if(j-cur>=0 && sums[j-cur]) {
					sums[j] = true;
					vals[i][j] = cur;
				}
			}
		}
	}
	
	public static class Food {
		int a, b, c;
		public Food(int a, int b, int c) {
			this.a = a;
			this.b = b;
			this.c = c;
		}
	}
}

#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
ll pwr(ll a,ll b,ll mod)
{
  ll ans=1;
  while(b)
  {
    if(b&1)
      ans=(ans*a)%mod;
    a=(a*a)%mod;
    b/=2;
  }
  return ans;
}
ll pwr(ll a,ll b)
{
  ll ans=1;
  while(b)
  {
    if(b&1)
      ans*=a;
    a*=a;
    b/=2;
  }
  return ans;
}
ll gcd(ll a,ll b)
{
  while(b)
    {
      ll temp=a;
      a=b;
      b=temp%b;
    }
  return a;
}
ll lcm(ll a,ll b)
{  
  return (a/gcd(a,b))*b;
}
ll modularInverse(ll a,ll m)
{     
      /*reminder: make sure m is prime*/
      assert(false);
      return pwr(a,m-2,m);
}
const int mod=1000000007;

int R[3];
int r[21][3];
int DP[1<<20][3];
int main()
{
  std::ios::sync_with_stdio(false);
  
  int t;
  cin>>t;
  int tt=0;
  while(t--)
  {
    cout<<"Case #"<<++tt<<": ";
    cin>>R[0]>>R[1]>>R[2];
    int n;
    cin>>n;
    for(int i=0;i<n;++i)
    {
      cin>>r[i][0]>>r[i][1]>>r[i][2];
    }
    bool flag=false;
    for(int mask=1;mask<(1<<n);++mask)
    {

      int index=__builtin_ctz(mask);
        if( (mask&(mask-1))==0 )
        {
          DP[mask][0]=r[index][0];
          DP[mask][1]=r[index][1];
          DP[mask][2]=r[index][2];
        }
        else
        {
          int newMask=mask^(1<<index);
          DP[mask][0]=r[index][0]+DP[newMask][0];
          DP[mask][1]=r[index][1]+DP[newMask][1];
          DP[mask][2]=r[index][2]+DP[newMask][2];
        }


      bool o0= (DP[mask][0]==R[0]);
      bool o1= (DP[mask][1]==R[1]);
      bool o2= (DP[mask][2]==R[2]);

      if(o0 && o2 && o0)
      {
        flag=true;
        break;
      }

      
    }
    if(flag)
        cout<<"yes\n";
      else
        cout<<"no\n";
  }
   


}
package hackercup.y2015.qualification;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

/**
 * @author Oleg Aravin
 */
public class NewYearsResolution {

    public static void main(String[] args) {
        final Food[] foods = testCase("/facebook/y2015/new_years_resolution.txt");
        for (int i = 0; i < foods.length; i++) {
            final ArrayList<List<Short>> shorts = new ArrayList<>();
            for (short j = 0; j < foods[i].getProteinArr().length; j++) {
                final ArrayList<Short> list = new ArrayList<>();
                list.add(j);
                shorts.add(list);
            }
            System.out.println("Case #" + (i + 1) + ": " + (checkFood(foods[i]) ? "yes" : "no"));
        }
    }


    private static boolean checkFood(Food food) {
        final List<Short> path = new ArrayList<>();
        final List<Short> val = new ArrayList<>();
        final Map<Short, Set<Short>> usedPaths = new HashMap<>();
        short targetVal = food.getProtein();
        short currentVal = 0;
        short currentLevel = 0;

        // init used paths
        for (short i = 0; i < food.getProteinArr().length; i++) {
            usedPaths.put(i, new HashSet<>());
        }

        while(true) {
            short delta = Short.MAX_VALUE;
            short index = -1;
            for (short i = 0; i < food.getProteinArr().length; i++) {
                final short dynamicDelta = (short) (targetVal - (currentVal + food.getProteinArr()[i]));
                final short ii = i;
                if (dynamicDelta <= delta && dynamicDelta >= 0 && !usedPaths.values().stream().anyMatch(s -> s.contains(ii))) {
                    delta = dynamicDelta;
                    index = i;
                    currentVal = food.getProteinArr()[i];
                }
            }
            if (index != -1) {
                path.add(index);
                if (val.isEmpty()) {
                    val.add(currentVal);
                } else {
                    val.add( (short) (val.get(val.size() - 1) + currentVal));
                }
                usedPaths.get(currentLevel).add(index);
//                currentVal = (short) (targetVal - delta);
                if (val.get(val.size() - 1) == targetVal && checkIndexes(food, path.toArray(new Short[path.size()])) == 1) {
                    return true;
                }
                if (currentLevel + 1 >= food.getProteinArr().length) {
                    path.remove(path.size() - 1);
//                    usedPaths.get(currentLevel).clear();
                    val.remove(val.size() - 1);
//                    currentLevel--;
                } else {
                    currentLevel++;
                }
            } else {
                if (path.isEmpty()) {
                    return false;
                } else {
                    path.remove(path.size() - 1);
                    usedPaths.get(currentLevel).clear();
                    val.remove(val.size() - 1);
                    currentLevel--;
                }
            }
        }
    }

    private static byte checkIndexes(Food food, Short[] indexes) {
        short protein = 0;
        short carbohydrates = 0;
        short fat = 0;
        for (short index : indexes) {
            protein += food.getProteinArr()[index];
            carbohydrates += food.getCarbohydratesArr()[index];
            fat += food.getFatArr()[index];
        }
        if (food.getProtein() == protein && food.getCarbohydrates() == carbohydrates && food.getFat() == fat) {
            return 1;
        } else if (food.getProtein() < protein || food.getCarbohydrates() < carbohydrates || food.getFat() < fat) {
            return -1;
        }
        return 0;
    }

    private static Food[] testCase(String inputFilePath) {
        final Scanner scanner = new Scanner(NewYearsResolution.class.getResourceAsStream(inputFilePath));
        final int solutionSize = scanner.nextInt();
        final Food[] solutions = new Food[solutionSize];
        for (int i = 0; i < solutionSize; i++) {
            final short protein = scanner.nextShort();
            final short carbohydrates = scanner.nextShort();
            final short fat = scanner.nextShort();
            final short foodsSize = scanner.nextShort();
            final short[] proteinArr = new short[foodsSize];
            final short[] carbohydratesArr = new short[foodsSize];
            final short[] fatArr = new short[foodsSize];
            for (int j = 0; j < foodsSize; j++) {
                proteinArr[j] = scanner.nextShort();
                carbohydratesArr[j] = scanner.nextShort();
                fatArr[j] = scanner.nextShort();
            }
            solutions[i] = new Food(protein, carbohydrates, fat, proteinArr, carbohydratesArr, fatArr);
        }
        return solutions;
    }

    private static class Food {
        final short protein;
        final short carbohydrates;
        final short fat;

        final short[] proteinArr;
        final short[] carbohydratesArr;
        final short[] fatArr;

        private Food(short protein, short carbohydrates, short fat, short[] proteinArr,
                     short[] carbohydratesArr, short[] fatArr) {
            this.protein = protein;
            this.carbohydrates = carbohydrates;
            this.fat = fat;
            this.proteinArr = proteinArr;
            this.carbohydratesArr = carbohydratesArr;
            this.fatArr = fatArr;
        }

        public short getProtein() {
            return protein;
        }

        public short getCarbohydrates() {
            return carbohydrates;
        }

        public short getFat() {
            return fat;
        }

        public short[] getProteinArr() {
            return proteinArr;
        }

        public short[] getCarbohydratesArr() {
            return carbohydratesArr;
        }

        public short[] getFatArr() {
            return fatArr;
        }
    }

}

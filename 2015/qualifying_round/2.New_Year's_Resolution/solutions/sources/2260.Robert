#include <tuple>
#include <iostream>
#include <vector>

using namespace std;



bool possible(const vector<tuple<int, int, int> > & menu,
	      const tuple<int, int, int> desired) {
  int select_all = (1 << menu.size()) - 1;
  for (int i= 0; i<=select_all; ++i){
    tuple< int, int, int> sum = {0, 0, 0};
    for (int j = 0; j < menu.size(); j++) {
      if ((1 << j) & i) {
	get<0>(sum) = get<0>(sum) + get<0>(menu[j]);
	get<1>(sum) = get<1>(sum) + get<1>(menu[j]);
	get<2>(sum) = get<2>(sum) + get<2>(menu[j]);
      }
    }
    if (get<0>(sum) == get<0>(desired) &&
	get<1>(sum) == get<1>(desired) &&
	get<2>(sum) == get<2>(desired)){
      return true;
    }
  }
  return false;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int T;
  cin >> T;
  for (int i=1; i<=T; ++i){
    int GP, GC, GF;
    cin >> GP >> GC >> GF;
    tuple<int, int, int> desired = {GP, GC, GF};
    int N;
    cin >> N;
    auto menu = vector<tuple<int, int, int> >(N);
    for (int j=0; j<N; ++j){
      int P, C, F;
      cin >> P >> C >> F;
      get<0>(menu[j]) = P;
      get<1>(menu[j]) = C;
      get<2>(menu[j]) = F;
    }
    cout << "Case #" << i << ": ";
    if (possible(menu, desired)){
      cout << "yes\n";
    } else {
      cout << "no\n";
    }
  }


  return 0;
}

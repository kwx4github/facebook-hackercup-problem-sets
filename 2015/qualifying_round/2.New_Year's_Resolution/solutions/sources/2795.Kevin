# -*- coding: utf-8 -*-
"""
Alex's New Year's resolution for 2015 is to eat healthier foods.
He's done some research and has found out that calories come from three main sources,
called macronutrients: protein, carbohydrates, and fat. Alex wants to get the right
balance of protein, carbohydrates, and fat to have a balanced diet. For each available food,
Alex can only choose to eat it or not eat it. He can't eat a certain food more than once,
and he can't eat a fractional amount of a food.

Input
Input begins with an integer T, the number of test cases.
For each test case, the first line consists of three space-separated integers: GP, GC, and GF,
which represent the amount of protein, carbohydrates, and fat that Alex wants to eat.
The next line has the number of foods for that test case, an integer N.
The next N lines each consist of three space-separated integers: P, C, and F,
which represent the amount of protein, carbohydrates, and fat in that food, respectively.

Output
For each test case i, print a line containing "Case #i: "
followed by either "yes" if it is possible for Alex to eat the exact
amount of each macronutrient, or "no" if it is not possible.

Constraints
1 ≤ T ≤ 20
1 ≤ N ≤ 20
10 ≤ GP, GC, GF ≤ 1000
10 ≤ P, C, F ≤ 1000
"""
def calculate(i, GP, GC, GF, foods):
    def _calculate(GP_partial, GC_partial, GF_partial, iterfoods):
        if not iterfoods:
            return False
        p, c, f = iterfoods[0]
        _GP, _GC, _GF = GP_partial + p, GC_partial + c, GF_partial + f
        if _GP == GP and _GC == GC and _GF == GF:
            return True
        if len(foods) == 1:
            return False
        if _GP > GP or _GC > GC or _GF > GF:
            return _calculate(GP_partial, GC_partial, GF_partial, iterfoods[1:])
        else:
            return _calculate(_GP, _GC, _GF, iterfoods[1:]) or _calculate(GP_partial, GC_partial, GF_partial, iterfoods[1:])

    posible = _calculate(0, 0, 0, foods)
    print "Case #{}: {}".format(i+1, "yes" if posible else "no")

if __name__=="__main__":
    T = input()
    cases = []
    for j in range(T):
        first_line = raw_input()
        GP, GC, GF = first_line.split()
        N = input()
        foods = []
        for i in range(N):
            _foods = raw_input()
            P, C, F = _foods.split()
            foods.append((int(P), int(C), int(F)))
        cases.append((j, int(GP), int(GC), int(GF), foods))
    for case in cases:
        calculate(*case)

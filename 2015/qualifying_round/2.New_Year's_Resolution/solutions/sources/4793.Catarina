package com.interview.code;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class NewYearResolution {
	
    public static void solve(int p, int c, int f, int arrayProt[], int arrayCarb[], int arrayFat[], PrintWriter pw) {
    	if (permutations(p, c, f, arrayProt, arrayCarb, arrayFat, 0, 0, 0, 0)){
    		pw.println("yes");
    		System.out.println("yes");
    	}else{
    		pw.println("no");
    		System.out.println("no");
    	}
    }

    public static boolean permutations (int p, int c, int f, int arrayProt[], int arrayCarb[], int arrayFat[],int sumProt, int sumCarb, int sumFat, int pos ){
    	if(sumProt == p && sumCarb == c && sumFat == f){
    		return true;    		
    	}
    	
    	if(sumProt > p || sumCarb > c || sumFat > f)
    		return false;
    	
    	if(pos >= arrayCarb.length){
    		return false;
    	}
    	int newPos= pos+1;
    	boolean call1 = permutations(p, c, f, arrayProt, arrayCarb, arrayFat, sumProt, sumCarb, sumFat, newPos);
    	if(call1){
    		return true;
    	}
    	
    	sumCarb += arrayCarb[pos] ;
    	sumFat += arrayFat[pos];
    	sumProt += arrayProt[pos];
    	
    	
    	boolean call2 = permutations(p, c, f, arrayProt, arrayCarb, arrayFat, sumProt, sumCarb, sumFat,  newPos);
    	if (call2){
    		return true;
    	}	
    	
    	return false;
    }
    
	public static void main(String[] args) {
	
		
			Scanner scanner=null;
			
			try {
				
				scanner = new Scanner(new File(args[0]));
				PrintWriter pw = new PrintWriter(new File(args[1]));
				int nCases = scanner.nextInt();
				int i=1,gp,gc,gf, nFoods;
				
				while(nCases>0 && scanner.hasNextInt()){
					pw.print("Case #" + i + " : ");
					gp = scanner.nextInt();
					gc = scanner.nextInt();
					gf = scanner.nextInt();
					nFoods = scanner.nextInt();
					int arrayProt[] = new int[nFoods];
					int arrayCarb[] = new int[nFoods];
					int arrayFat[] = new int[nFoods];
					
					for (int j = 0; j < nFoods; j++) {
						arrayProt[j] = scanner.nextInt();
						arrayCarb[j] = scanner.nextInt();
						arrayFat[j] = scanner.nextInt();
					}
					solve(gp, gc, gf, arrayProt, arrayCarb, arrayFat, pw);
					nCases--;
					i++;
				}
				pw.flush();
		        pw.close();
			} catch (FileNotFoundException e) {
				System.out.println("File not found. Please pass a valid file as an argument.");
				System.exit(1);
			}finally{
				if(scanner != null){
					scanner.close();
					
				       
				}
			}
	
			System.exit(0);
	
		}
	

}

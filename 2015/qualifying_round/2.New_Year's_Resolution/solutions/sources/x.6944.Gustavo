#!/usr/bin/env python

import collections
import functools

class memoized(object):
    '''Decorator. Caches a function's return value each time it is called.
    If called later with the same arguments, the cached value is returned
    (not reevaluated).
    '''
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value
    def __repr__(self):
        return self.func.__doc__
    def __get__(self, obj, objtype):
        return functools.partial(self.__call__, obj)


if __name__ == '__main__':
    t = int(raw_input().strip())
   
    for i in range(1, t + 1):        
        params = raw_input().strip().split()
        total_weight = int(params[0].rjust(4, "0") 
                               + params[1].rjust(4, "0") 
                               + params[2].rjust(4, "0")) 
        
        n_foods = int(raw_input().strip())
        weights = []
        summed_weight = 0
        for j in range(0, n_foods):
            result = False
            food_params = raw_input().strip().split()
            weight = int(food_params[0].rjust(4, "0") 
                               + food_params[1].rjust(4, "0") 
                               + food_params[2].rjust(4, "0"))

            summed_weight += weight
            
            # Ignore 'FAT' foods, checks for simple results            
            if weight == total_weight:
                result = True                
            elif weight < total_weight:
                weights.append(weight)
    
        @memoized
        def check_sum(j, w):
            if j == 0:
                return weights[j] == total_weight or weights[j] == w
            
            if w == 0:
                return True
            if w < 0:
                return False
                
            return check_sum(j - 1, w) or check_sum(j - 1, w - weights[j]) or weights[j] == w   

        if not result:
            for j in range(1, len(weights)):
                if check_sum(j, total_weight):
                    result = True
                    break
        
        answer = "yes" if result else "no"    
        print "Case #{0}: {1}".format(i, answer)

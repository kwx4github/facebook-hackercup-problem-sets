import java.io.*;
import java.nio.file.*;
import java.nio.charset.*;
import java.util.*;

public class qual2 {
	public static void main(String[] args){
		Path file = Paths.get("qual2.in");
		try {
			String[] lines = Files.readAllLines(file, StandardCharsets.UTF_8).toArray(new String[0]);
			int cases = Integer.parseInt(lines[0]);
			int i = 1;
			for (int t=1; t<= cases; t++) {
				int[] diet = getTriplet(lines[i]);
				int N = Integer.parseInt(lines[i+1]);
				Set<int[]> foods = new HashSet<int[]>();
				for (int j=0; j<N; j++) {
					int[] food = getTriplet(lines[i+2+j]);
					foods.add(food);
				}
				if (isPossible(diet, foods)) {
					System.out.println("Case #"+t+": yes");
				} else {
					System.out.println("Case #"+t+": no");
				}
				i += N + 2;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}   
	}
	
	public static int[] getTriplet(String line) {
		int[] t = new int[3];
		String[] split = line.split(" ");
		for (int j=0; j<3; j++) {
			t[j] = Integer.parseInt(split[j]);
		}
		return t;
	}

	public static boolean isPossible(int[] diet, Set<int[]> foods) {
		Set<Set<int[]>> possibilities = powerSet(foods);
		for (Set<int[]> choice : possibilities) {
			int [] total = totalAmounts(choice);
			if ((total[0] == diet[0]) && (total[1] == diet[1]) && (total[2] == diet[2])) return true;
		}
		return false;
	}
	
	public static int[] totalAmounts(Set<int[]> foods) {
		int[] total = {0,0,0};
		for (int[] food : foods) {
			total[0] += food[0];
			total[1] += food[1];
			total[2] += food[2];
		}
		return total;
	}

	public static <T> Set<Set<T>> powerSet(Set<T> originalSet) {
		Set<Set<T>> sets = new HashSet<Set<T>>();
		if (originalSet.isEmpty()) {
			sets.add(new HashSet<T>());
			return sets;
		}
		List<T> list = new ArrayList<T>(originalSet);
		T head = list.get(0);
		Set<T> rest = new HashSet<T>(list.subList(1, list.size())); 
		for (Set<T> set : powerSet(rest)) {
			Set<T> newSet = new HashSet<T>();
			newSet.add(head);
			newSet.addAll(set);
			sets.add(newSet);
			sets.add(set);
		}		
		return sets;
	}
}   

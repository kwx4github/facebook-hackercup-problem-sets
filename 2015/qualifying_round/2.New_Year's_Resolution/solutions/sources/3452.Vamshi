import java.io.File;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    static Scanner in;
    static FileWriter out;
    static int n;
    static food all[],tar;
    public static void main(String[] args) {
        try {
            precompute();
            String ip = "new_years_resolution";
            in = new Scanner(new File(ip+".txt"));
            out = new FileWriter(ip+"-op.txt");
            int t = in.nextInt();
            for (int i = 1; i <= t; i++) {
                solve(i);
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void solve(int i) throws Exception {
        out.write("Case #" + i + ": ");
        tar= new food(in.nextInt(),in.nextInt(),in.nextInt());
        n = in.nextInt();
        all = new food[n];
        for (int j = 0; j < n; j++) {
            all[j] = new food(in.nextInt(),in.nextInt(),in.nextInt());
        }
        food have= new food(0,0,0);
        boolean res = can(0,have);
        out.write((res == true ? "yes" : "no") + "\n");
    }

    private static boolean can(int i, food have) {
        if (have.equals(tar)) return true;
        else if(have.greater(tar)) return false;
        if (i<n)
        return can(i+1,have.add(all[i])) || can(i+1,have);
        return false;
    }

    static void precompute() {

    }

}
class food {
    public int p,c,f;

    public food(int p, int c, int f) {
        this.p = p;
        this.c = c;
        this.f = f;
    }
    public boolean equals(food o) {
        return c==o.c && f==o.f && p==o.p;
    }
    public food add(food o) {
        return new food(p+o.p,c+o.c,f+o.f);
    }
    public  boolean greater(food o) {
        return p>o.p || c>o.c || f>o.f;
    }
    public int hashCode() {
        return 0;
    }
}
/*
 Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some research and has found out that calories come from three main sources, called macronutrients: protein, carbohydrates, and fat. Alex wants to get the right balance of protein, carbohydrates, and fat to have a balanced diet. For each available food, Alex can only choose to eat it or not eat it. He can't eat a certain food more than once, and he can't eat a fractional amount of a food.
Input

Input begins with an integer T, the number of test cases. For each test case, the first line consists of three space-separated integers: GP, GC, and GF, which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. The next line has the number of foods for that test case, an integer N. The next N lines each consist of three space-separated integers: P, C, and F, which represent the amount of protein, carbohydrates, and fat in that food, respectively.
Output

For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for Alex to eat the exact amount of each macronutrient, or "no" if it is not possible.
Constraints

1 ≤ T ≤ 20
1 ≤ N ≤ 20
10 ≤ GP, GC, GF ≤ 1000
10 ≤ P, C, F ≤ 1000
Example input · Download
Example output · Download

5
100 100 100
1
100 100 100
100 100 100
3
10 10 40
10 30 10
10 60 50
100 100 100
5
40 70 30
30 10 40
20 20 50
10 50 90
40 10 20
292 264 512
20
909 302 261
705 597 823
291 51 126
28 697 57
593 31 826
311 256 57
292 14 47
29 730 716
12 529 146
768 16 439
37 472 15
350 192 34
163 468 238
69 173 10
203 72 690
424 875 213
223 593 292
151 46 10
88 90 16
773 653 711
991 827 352
20
29 560 929
139 681 102
144 853 10
84 729 80
218 20 67
140 80 901
428 20 500
520 970 128
422 419 30
413 101 192
467 448 501
32 939 684
34 20 38
251 317 132
588 437 10
648 21 79
391 25 14
499 22 24
854 77 361
405 25 20
Case #1: yes
Case #2: no
Case #3: yes
Case #4: no
Case #5: yes
*/
#include<iostream>
#include<stdio.h>
using namespace std;
int mat[25][3],n;
int find(int n,int p,int c,int f)
{
	if(p==0 && c==0 && f==0)
	return 1;
	else if(n==0)
	return 0;
	else if(mat[n-1][0]>p||mat[n-1][1]>c||mat[n-1][2]>f)
	return find(n-1,p,c,f);
	return find(n-1,p,c,f)||find(n-1,p-mat[n-1][0],c-mat[n-1][1],f-mat[n-1][2]);
}
int main()
{
	int test,t;
	scanf("%d",&test);
	for(t=1;t<=test;t++)
	{
		int p,c,f,ans;
		scanf("%d%d%d",&p,&c,&f);
		scanf("%d",&n);
		int i,j;
		for(i=0;i<n;i++)
		{
			for(j=0;j<3;j++)
			{
				scanf("%d",&(mat[i][j]));
			}
		}
		ans=find(n,p,c,f);	
		if(ans==1)
		printf("Case #%d: yes\n",t);
		else
		printf("Case #%d: no\n",t);
	}
	return 0;
}






























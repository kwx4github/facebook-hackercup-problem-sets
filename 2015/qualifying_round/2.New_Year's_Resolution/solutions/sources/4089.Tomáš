<?php

function transposeMatrix($matrix) {
	array_unshift($matrix, NULL);
	return call_user_func_array('array_map', $matrix);
}

function isSolvable($matrix, $solution) {
	$rows = count($matrix);
	$cols = count($matrix[0]);

	$pows = array(1);
	for ($i = 1; $i <= $rows + 1; $i++) {
		$pows[$i] = $pows[$i - 1] << 1;
	}

	$sums = array_fill(0, $cols, 0);

	for ($i = $pows[$rows] + 1; $i < $pows[$rows + 1]; $i++) {
		for ($j = 0; $j < $rows; $j++) {
			if (($i & $pows[$j]) === $pows[$j]) {
				for ($k = 0; $k < $cols; $k++) {
					$sums[$k] += $matrix[$j][$k];

					if ($sums[$k] > $solution[$k]) {
						break 2;
					}
				}
			}
		}

		if ($sums === $solution) {
			return TRUE;
		} else {
			for ($j = 0; $j < $cols; $j++) {
				$sums[$j] = 0;
			}
		}
	}

	return FALSE;
}

$file = $argv[1];
$lines = array_map('trim', file($file));

$cases = (int) array_shift($lines);

$fh = fopen('output2.txt', 'w');

for ($i = 0; $i < $cases; $i++) {
	$expectedSolution = array_map('intval', explode(' ', array_shift($lines)));

	$foodsCount = (int) array_shift($lines);
	$foods = array();
	for ($j = 0; $j < $foodsCount; $j++) {
		$foods[] = array_map('intval', explode(' ', array_shift($lines)));
	}

	$start = microtime(TRUE);
	$isSolvable = isSolvable($foods, $expectedSolution);

	print 'Case #' . ($i + 1) . ': ' . ($isSolvable ? 'yes' : 'no') . "\n";
	print round(microtime(TRUE) - $start, 2) . 's' . "\n";

	fwrite($fh, 'Case #' . ($i + 1) . ': ' . ($isSolvable ? 'yes' : 'no') . "\n");
}

fclose($fh);

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by jacob on 1/10/15.
 */
public class NewYearsResolution
{
    public static void main(String args[])
    {
        try
        {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(new File("new_years_resolution.txt")));

            PrintWriter writer = new PrintWriter("output2.txt");

            int cases = Integer.parseInt(bufferedReader.readLine().trim());

            for(int i = 1; i <= cases; i++)
            {
                NutrientInfo nutrientGoals = parseNutrientInfo(bufferedReader.readLine().trim());

                int numberOfFoods = Integer.parseInt(bufferedReader.readLine().trim());
                List<NutrientInfo> foods = new ArrayList<NutrientInfo>();

                for(int j = 0; j < numberOfFoods; j++)
                {
                    foods.add(parseNutrientInfo(bufferedReader.readLine().trim()));
                }

                writer.println("Case #" + i + ": " + verifyFoods(nutrientGoals, foods));
            }

            bufferedReader.close();
            writer.close();
        }
        catch(Exception ex)
        {
            System.out.println("ERROR");
        }
    }

    private static String verifyFoods(NutrientInfo nutrientGoals, List<NutrientInfo> foods)
    {
        for(NutrientInfo currentFood : foods)
        {
            if(testTree(nutrientGoals, currentFood, foods, foods.indexOf(currentFood) + 1))
            {
                return "yes";
            }
        }

        return "no";
    }

    private static boolean testTree(NutrientInfo goal, NutrientInfo currentFood, List<NutrientInfo> remainingFoods, int index)
    {
        if(goal.equals(currentFood))
        {
            return true;
        }

        if(index >= remainingFoods.size())
        {
            return false;
        }
        else if(currentFood.isLessThan(goal))
        {
            while(index < remainingFoods.size())
            {
                if(testTree(goal, add(currentFood, remainingFoods.get(index)), remainingFoods, index + 1))
                {
                    return true;
                }

                index++;
            }
        }

        return false;
    }

    private static NutrientInfo add(NutrientInfo first, NutrientInfo second)
    {
        return new NutrientInfo(first.getProteins() + second.getProteins(),
                                first.getCarbohydrates() + second.getCarbohydrates(),
                                first.getFats() + second.getFats());
    }

    private static NutrientInfo parseNutrientInfo(String rawValues)
    {
        String[] arrayOfValues = rawValues.split("\\s+");

        return new NutrientInfo(Integer.parseInt(arrayOfValues[0]), Integer.parseInt(arrayOfValues[1]), Integer.parseInt(arrayOfValues[2]));
    }

    private static class NutrientInfo
    {
        int proteins;
        int carbohydrates;
        int fats;

        public NutrientInfo(int proteins, int carbohydrates, int fats)
        {
            this.proteins = proteins;
            this.carbohydrates = carbohydrates;
            this.fats = fats;
        }

        public int getCarbohydrates()
        {
            return this.carbohydrates;
        }

        public int getProteins()
        {
            return this.proteins;
        }

        public int getFats()
        {
            return this.fats;
        }

        public boolean isLessThan(NutrientInfo info)
        {
            return this.proteins < info.getProteins() && this.carbohydrates < info.getCarbohydrates() && this.getFats() < info.getFats();
        }

        @Override
        public boolean equals(Object obj)
        {
            if(obj instanceof  NutrientInfo)
            {
                NutrientInfo info = (NutrientInfo)obj;
                return this.proteins == info.getProteins() && this.carbohydrates == info.getCarbohydrates() && this.fats == info.getFats();
            }

            return false;
        }

        @Override
        public int hashCode()
        {
            return 0;
        }
    }
}

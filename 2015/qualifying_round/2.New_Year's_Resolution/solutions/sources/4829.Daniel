#include <iostream>
#include <vector>

using namespace std;

struct Food {
   int gp, gc, gf;

   Food() : gp(0), gc(0), gf(0) {}

   bool operator==(const Food& other) const {
      return gp == other.gp && gc == other.gc && gf == other.gf;
   }
};

vector<Food> foods;
Food target;

bool is_possible(int start, Food current) {
   if (current == target)
      return true;
   if (start >= foods.size())
      return false;

   Food next;
   next.gp = current.gp + foods[start].gp;
   next.gc = current.gc + foods[start].gc;
   next.gf = current.gf + foods[start].gf;

   return is_possible(start + 1, current) || is_possible(start + 1, next);
}

int main() {
   ios_base::sync_with_stdio(false);

   int t;
   cin >> t;

   for(int i = 1; i <= t; ++i) {
      int n;
      cin >> target.gp >> target.gc >> target.gf >> n;

      foods = vector<Food>(n);

      for(int j = 0; j < n; ++j) {
         cin >> foods[j].gp >> foods[j].gc >> foods[j].gf;
      }

      cout << "Case #" << i << ": " << 
         (is_possible(0, Food()) ? "yes\n" : "no\n");
   }
}

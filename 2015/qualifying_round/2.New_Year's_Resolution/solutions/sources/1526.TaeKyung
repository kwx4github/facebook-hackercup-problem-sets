import com.sun.tools.doclets.formats.html.SourceToHTMLConverter;

import javax.xml.bind.SchemaOutputResolver;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;


/**
 * Created by bistros on 15. 1. 9..
 */
public class Main2 {

    public static void main(String args[]) throws IOException {

        Main2 main = new Main2();

        List<Model> list = main.getData();
        for(int i=0; i<list.size(); i++){
            main.calc(i, list.get(i));
        }

    }

    void calc(int sequence, Model model) {
        model.sort();

        boolean[] used = new boolean[model.foods.size()];
        Arrays.fill(used, false);

        boolean b = process(-1, used.clone(), model);
        System.out.printf("Case #%s: %s%n", (sequence+1) , (b ? "yes" : "no") );
    }





    boolean process(int idx, boolean[] used, Model model){
        if( sumCheck(used, model) ){
            return true;
        }

        if( idx+ 1 < used.length){
            if ( process(idx+1, used, model)){
                return true;
            }else{
                boolean[] used2 = used.clone();
                used2[idx+1] = true;
                if ( process(idx+1, used2, model)){
                    return true;
                }
            }
        }


        return false;
    }

    boolean sumCheck(boolean[] used, Model model){
        int tP=0, tC=0, tF=0;
        for(int i=0; i<used.length; i++){
            if(used[i]){
                Food f = model.foods.get(i);
                tP += f.GP;
                tC += f.GC;
                tF += f.GF;
            }
        }

        if(model.C == tC && model.F == tF && model.P == tP){
           return true;
        }
        return false;

    }


    private List<Model> getData() throws IOException {
        List<Model> list = new ArrayList<>();

        BufferedReader in = new BufferedReader(new FileReader("/Users/bistros/project/untitled/src/data2.txt"));
        String line = in.readLine();

        while ((line = in.readLine()) != null) {

            Model model = new Model();
            String[] PCF = line.split(" ");

            model.P = Integer.parseInt(PCF[0] );
            model.C = Integer.parseInt(PCF[1] );
            model.F = Integer.parseInt(PCF[2] );

            int foodCnt = Integer.parseInt(in.readLine() );
            for(int i=0; i<foodCnt; i++){
                Food food = new Food();
                String data = in.readLine();

                String[] foodPCF = data.split(" ");
                food.GP = Integer.parseInt(foodPCF[0] );
                food.GC = Integer.parseInt(foodPCF[1] );
                food.GF = Integer.parseInt(foodPCF[2] );


                model.foods.add(food);
            }
            list.add(model);
        }

        return list;

    }


    class Model {
        int P, C, F;
        List<Food> foods = new ArrayList<>();

        public void sort(){
            Collections.sort(foods);
        }
        public int getSumP(){
            int sum = 0;
            for(Food food : foods){
                sum+=food.GP;
            }
            return sum;
        }
        public int getSumC() {
            int sum = 0;
            for(Food food : foods){
                sum+=food.GC;
            }
            return sum;
        }
        public int getSumF(){
            int sum =0;
            for(Food food: foods){
                sum+=food.GF;
            }
            return sum;
        }



    }
    class Food implements Comparable<Food> {
        int GP, GC, GF;

        @Override
        public int compareTo(Food f) {
            if(this.GP > f.GP) {
                return 1;
            }
            if(this.GP == f.GP && this.GC >  f.GC) {
                return 1;
            }
            if(this.GP == f.GP && this.GC == f.GC && this.GF > f.GF){
                return 1;
            }
            return -1;
        }
    }
}

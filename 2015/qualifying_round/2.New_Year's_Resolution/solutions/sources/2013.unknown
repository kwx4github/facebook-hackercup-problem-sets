 /*
 * File:   CRC.cpp
 * Author: Varsha
 *
 * Created on October 7, 2014, 12:20 PM
 */

#include <cstdlib>
#include<iostream>
#include<string.h>

using namespace std;

/*
 * Program for cyclic redundancy check
 */


void strXOR(char* str, int start, int end, char* divisor);
char* encrypt(char* divident, char* divisor);
bool check(char* divident, char* divisor);

int main(int argc, char** argv) {
	char message[50];
	char divisor[10];
	cout<<"Enter the message string - ";
	cin>>message;
	cout<<"Enter the divisor string - ";
	cin>>divisor;
	char* encrypted=encrypt(message, divisor);
	cout<<"Transmitted message is - "<<encrypted;
	char received[60];
	cout<<"\nEnter the received message - ";
	cin>>received;
	if(check(received, divisor))
		cout<<"Message is error-free";
	else
		cout<<"Message is corrupt";
	cout<<endl;
	return 0;
}

void strXOR(char* str, int start, char* divisor){
	for(int i=0,j=start;divisor[i];i++,j++) {
		if(!str[j])
			break;
		if(str[j]==divisor[i])
			str[j]='0';
		else
			str[j]='1';
	}
}

char* encrypt(char* divident, char* divisor) {
	int dd=strlen(divident);
	int ds=strlen(divisor);
	int m=dd+ds;
	char* message=new char[m];
	strcpy(message, divident);
	for(int i=dd;i<m-1;i++) {
		message[i]='0';
	}
	message[m-1]='\0';
	for(int i=0;i<dd;i++) {
		while(message[i]=='0')
			i++;
		strXOR(message, i, divisor);
	}
	for(int i=0;divident[i];i++) {
		message[i]=divident[i];
	}
	return message;
}

bool check(char* message, char* divisor) {
	int m=strlen(message);
	int ds=strlen(divisor);
	int dd=m-ds+1;
	char divident[m+1];
	strcpy(divident, message);
	divident[m-1]='\0';
	for(int i=0;i<dd;i++) {
		while(divident[i]=='0')
			i++;
		strXOR(divident, i, divisor);
	}
	for(int i=dd;i<m;i++) {
		if(divident[i]=='1')
			return false;
	}
	return true;
}

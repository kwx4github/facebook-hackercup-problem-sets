module B where

import Control.Applicative
import Control.Monad

solveB :: IO ()
solveB = do
  t <- read <$> getLine
  forM_ [1..t] (\x -> do
    (a1:b1:c1:[]) <- map read <$> (words <$> getLine)
    let v = (a1, b1, c1)
    n <- read <$> getLine
    xs <- forM [1..n] (\y -> do
                         str <- getLine
                         let (a:b:c:[]) = map read $ words str
                         return (a, b, c))
    let res = isValid v xs
        ans = if res then "yes" else "no"
    putStrLn $ "Case #" ++ (show x) ++ ": " ++ ans)

isValid :: (Int, Int, Int) -> [(Int, Int, Int)] -> Bool
isValid x xs = x `elem` (enumPossibleValues xs)

enumPossibleValues :: [(Int, Int, Int)] -> [(Int, Int, Int)]
enumPossibleValues xs = map sumUp allPat
  where allPat = enumAll' xs
        sumUp vs = foldr (\(x, y, z) (ax, ay, az) -> (ax+x, ay+y, az+z)) (0, 0, 0) vs

enumAll :: [(Int, Int, Int)] -> [[(Int, Int, Int)]]
enumAll [] = [[]]
enumAll (x:xs) = concat [[(x:ys), ys] | ys <- enumAll xs]

enumAll' :: [(Int, Int, Int)] -> [[(Int, Int, Int)]]
enumAll' [] = [[]]
enumAll' (x:xs) = all' ++ (map (x:) all')
  where all' = enumAll' xs
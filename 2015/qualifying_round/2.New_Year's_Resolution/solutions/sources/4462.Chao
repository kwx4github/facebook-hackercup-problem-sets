#!/usr/bin/python

import sys

NUM_MACS = 3


#
# a recursive function
#
def possible(res, foods, numfds):
    if numfds < 1:
        return False

    for i in range(0, numfds):
        if res[0] == foods[i][0] and res[1] == foods[i][1] and res[2] == foods[i][2]:
            return True
        elif res[0] >= foods[i][0] and res[1] >= foods[i][1] and res[2] >= foods[i][2]:
            newres = [res[0] - foods[i][0], res[1] - foods[i][1], res[2] - foods[i][2]]
            if possible(newres, foods[0:i] + foods[i+1:numfds], numfds-1):
                return True

    return False
    

def getMac(line, lenm):
    mac = line.split()
    for i in range(0, lenm):
        mac[i] = int(mac[i])

    return mac 

    
def main(argv):
    # check argument
    if len(argv) != 2:
        print "Usage: ", argv[0], " [input_file]"
        return -1

    # oepn and read file
    with open(argv[1]) as f:
        lines = f.readlines()

    # get number of test cases
    numcases = int(lines[0])

    i = 1
    for case in range(1, numcases+1):
        # get resolution
        res = getMac(lines[i], NUM_MACS)
        i   = i + 1

        # get number of foods
        numfds  = int(lines[i])
        i       = i + 1

        # get mac for each food
        macs = []
        for k in range(0, numfds):
            mac = getMac(lines[i], NUM_MACS)
            # filt out mac which is larger than res
            if mac[0] <= res[0] and mac[1] <= res[1] and mac[2] <= res[2]:
                macs.append(getMac(lines[i], NUM_MACS))
            else:
                numfds = numfds - 1
            i = i + 1

        if possible(res, macs, numfds):
            ans = 'yes'
        else:
            ans = 'no'

        print "Case #%d: %s" % (case, ans)
    

if __name__ == "__main__":
    main(sys.argv)



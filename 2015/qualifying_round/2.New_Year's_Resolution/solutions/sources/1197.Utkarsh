#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

string out[2] = { "no", "yes"};

inline int power(int base, int exponent) {
	return (exponent == 0)     ? 1 :
           (exponent % 2 == 0) ? power(base, exponent/2)*power(base, exponent/2) :
           base * power(base, (exponent-1)/2) * power(base, (exponent-1)/2);
}

class Diet {
public:
	int Gp; int Gc; int Gf;

	Diet(int p = 0, int c = 0, int f = 0): Gp(p), Gc(c), Gf(f) {};

	void addDiet( const Diet& that ) {
		Gp += that.Gp;
		Gc += that.Gc;
		Gf += that.Gf;
	}

	int compareDiet(const Diet& that) {
		return ( Gp == that.Gp and Gc == that.Gc and Gf == that.Gf);
	}

	void readDiet() {
		scanf("%d %d %d", &Gp, &Gc, &Gf);
	}

	void printDiet() {
		printf("%d %d %d\n", Gp, Gc, Gf);
	}

	int checkAllSubsets( const vector< Diet >& V) {
		int N = sz(V);
		
		rep(i, power(2, N) ) {
			Diet p;
			rep(j, N) {
				if( ( i & (1 << j) ) >> j ) {
					p.addDiet(V[j]);
				}
			}

			if( compareDiet(p) == 1)
				return 1;
		}

		return 0;
	}
};


int main() {
	int T;
	gi(T);

	fore(t,1,T) {

		Diet base;
		base.readDiet();

		int N;
		gi(N);

		vector< Diet > V;
		rep(i, N) {
			Diet t;
			t.readDiet();
			V.pb(t);
		}

		int result = base.checkAllSubsets(V);
		printf("Case #%d: %s\n",t ,out[result].c_str());
	}

	return 0;

}
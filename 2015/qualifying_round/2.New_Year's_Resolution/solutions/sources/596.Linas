import scala.collection._

object B extends App {

  @inline def tokenizeLine = new java.util.StringTokenizer(readLine)
  def readInts(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toInt) }
  def readLongs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toLong) }
  def readBigs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(BigInt(tl.nextToken)) }

  case class Food(p: Int, c: Int, f: Int)

  def solve(test: Int): Unit = {

    val Array(p, c, f) = readInts(3)
    val goal = Food(p, c, f)

    val n = readInt
    val meals = Array.fill(n) {
      val Array(p, c, f) = readInts(3)
      Food(p, c, f)
    }
    
    var res = "no"
    for {
      i <- 1 to n
      comb <- meals.combinations(i)
    } if (comb.map(_.p).sum == goal.p && comb.map(_.c).sum == goal.c && comb.map(_.f).sum == goal.f) res = "yes"
    
    println(s"Case #$test: $res")
  }

  Console.setIn(new java.io.BufferedInputStream(new java.io.FileInputStream("src/B/B.in")))
  Console.setOut(new java.io.BufferedOutputStream(new java.io.FileOutputStream("src/B/B.out")))
  for (test <- 1 to readInt) {
    solve(test)
    Console.flush
  }
}

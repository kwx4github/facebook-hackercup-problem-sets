#!/usr/bin/env python2.7
import sys
import itertools

try:
  file_input = open(sys.argv[1]).read()
except:
  exit('Bad input -- python resolution.py input_file')

first = lambda x: x[0]
second = lambda x: x[1]

def foods_matching_total(lst, total):
  possibles = []
  for i in xrange(1, len(lst)+1):
    for e in itertools.combinations(lst, i):
      if sum(map(second, e)) == total:
        possibles.append(e)
  return possibles

def food_sets(lst):
  sets = []
  for group in lst:
    sets.append(set(tuple(map(first, group))))
  return sets

def case(givens, foods):
  given_p, given_c, given_f = givens
  tag_food = lambda v: (v[0], v[1])
  poss_p, poss_c, poss_f = map(lambda food: map(tag_food, enumerate(food)), zip(*foods))
  poss_p = foods_matching_total(poss_p, given_p)
  poss_c = foods_matching_total(poss_c, given_c)
  poss_f = foods_matching_total(poss_f, given_f)
  food_sets_p = food_sets(poss_p)
  food_sets_c = food_sets(poss_c)
  food_sets_f = food_sets(poss_f)
  for food_set in food_sets_p:
    if food_set in food_sets_c and food_set in food_sets_f:
      return True
  return False

file_input = file_input.split('\n')
num_cases = int(file_input[0])

reader = iter(file_input[1:])

for case_num in xrange(1, num_cases+1):
  givens = map(int, reader.next().split(' '))
  foods = []
  for food in xrange(int(reader.next())):
    foods.append(map(int, reader.next().split(' ')))
  print 'Case #%d: %s' % (case_num, 'yes' if case(givens, foods) else 'no')

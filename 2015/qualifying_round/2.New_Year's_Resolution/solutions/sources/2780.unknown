// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}

int N;
int C[3];
int A[20][3];
bool rec(int idx) {
    if(C[0] == 0 && C[1] == 0 && C[2] == 0) return true;
    if(idx == N) return false;
    bool ok = true;
    REP(i, 3) if(C[i] - A[idx][i] < 0) ok = false;
    if(ok){
        REP(i, 3) C[i] -= A[idx][i];
        if(rec(idx+1)) return true;
        REP(i, 3) C[i] += A[idx][i];
    }
    return rec(idx+1);
}
int main(){
    iostream_init();
    int T;
    cin >> T;
    int casenum = 0;
    while(T--) {
        cout << "Case #" << ++casenum << ": ";
        REP(i, 3) cin >> C[i];
        cin >> N;
        REP(i, N) {
            REP(j, 3) cin >> A[i][j];
        }
        bool res = rec(0);
        cout << (res ? "yes" : "no") << endl;
    }
    return 0;
}

/* vim:set foldmethod=marker: */


import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "new.*year.*s.*resolution.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("newyearsresolution.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NewYearsResolution solver = new NewYearsResolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class NewYearsResolution {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int[] target = new int[3];
        for (int i = 0; i < 3; ++i)
            target[i] = in.nextInt();
        int n = in.nextInt();
        int[][] have = new int[n][3];
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < 3; ++j)
                have[i][j] = in.nextInt();
        String res = "no";
        for (int set = 0; set < (1 << n); ++set) {
            int[] got = new int[3];
            for (int i = 0; i < n; ++i) if ((set & (1 << i)) != 0) {
                for (int j = 0; j < 3; ++j) got[j] += have[i][j];
            }
            boolean ok = true;
            for (int j = 0; j < 3; ++j) if (got[j] != target[j]) ok = false;
            if (ok) res = "yes";
        }
        out.println("Case #" + testNumber + ": " + res);
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


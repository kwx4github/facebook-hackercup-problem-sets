def check_food(target, food):
    return food[0] <= target[0] and food[1] <= target[1] and food[2] <= target[2]


def eat(target, food):
    return [target[i] - food[i] for i in range(3)]


def solve(target, foods):
    if target == [0, 0, 0]:
        return True
    elif not foods:
        return False
    food = foods[0]
    if check_food(target, food) and solve(eat(target, food), foods[1:]):
        return True
    return solve(target, foods[1:])


f = open('b.in', 'r')
ff = f.read()
lines = ff.split('\n')


for case in range(int(lines.pop(0))):
    target = map(lambda x: int(x), lines.pop(0).split(' '))
    entries = int(lines.pop(0))
    foods = []
    for entry in range(entries):
        food = map(lambda x: int(x), lines.pop(0).split(' '))
        if check_food(target, food):
            foods.append(food)
    # print foods
    foods.sort(key=lambda x: x[0])
    res = 'yes' if solve(target, foods) else 'no'
    print 'Case #' + str(case + 1) + ': '+ res

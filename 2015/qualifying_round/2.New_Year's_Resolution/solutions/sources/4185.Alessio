#include <iostream>
#include <vector>
using namespace std;

struct Food
{
    int P, C, F;
};

int Gp, Gc, Gf;

bool subsets (const std::vector<Food>& v, int i, Food& current)
{
    if (i == v.size())
    {
        return (current.P == Gp and current.C == Gc and current.F == Gf);
    }
    else
    {
        if (subsets(v, i+1, current))
            return true;
        current.P += v[i].P;
        current.C += v[i].C;
        current.F += v[i].F;
        if (subsets(v, i+1, current))
            return true;
        current.P -= v[i].P;
        current.C -= v[i].C;
        current.F -= v[i].F;
        return false;
    }
}

int main()
{
    int N;
    cin >> N;
    for (int case_id = 0; case_id < N; ++case_id)
    {
        cin >> Gp >> Gc >> Gf;
        int n;
        cin >> n;
        vector<Food> foods;
        for (int i = 0; i < n; ++i)
        {
            Food f;
            cin >> f.P >> f.C >> f.F;
            foods.push_back(f);
        }
        Food f;
        f.P = 0;
        f.C = 0;
        f.F = 0;
        cout << "Case #" << case_id+1 << ": ";
        if (subsets(foods, 0, f))
            cout << "yes";
        else
            cout << "no";
        cout << endl;
    }
    return 0;
}

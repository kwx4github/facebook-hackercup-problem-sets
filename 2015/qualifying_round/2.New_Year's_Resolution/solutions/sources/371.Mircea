#include<algorithm>
#include<bitset>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque>
#include<fstream>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<vector>

using namespace std;

typedef long long int lld;
typedef pair<int, int> PII;
typedef pair<int, lld> PIL;
typedef pair<lld, int> PLI;
typedef pair<lld, lld> PLL;

const int INF = (1LL << 31) - 1;
const lld LINF = (1LL << 62) - 1;
const int dx[] = {1, 0, -1, 0, 1, -1, 1, -1};
const int dy[] = {0, 1, 0, -1, 1, -1, -1, 1};
const int MOD = (int)(1e9) + 7;

const int NMAX = 1000 + 5;
const int MMAX = 100000 + 5;
const int KMAX = 100000 + 5;
const int PMAX = 100000 + 5;
const int LMAX = 100000 + 5;
const int VMAX = 100000 + 5;

int N, P;
int target[10];
int T[10];
int food[NMAX][10];
set<pair<PII, int> > H;

void solve() {
    int i, j, ok, mask;

    memset(T, 0, sizeof(T));
    memset(target, 0, sizeof(target));
    memset(food, 0, sizeof(food));
    H.clear();

    for(i = 0; i < 3; i++)
        scanf("%d", &target[i]);

    scanf("%d", &N);

    for(i = 0; i < N; i++)
        for(j = 0; j < 3; j++)
            scanf("%d", &food[i][j]);

    P = (1 << (N / 2)) - 1;

    for(mask = 0; mask <= P; mask++) {
        for(j = 0; j < 3; j++)
            T[j] = 0;

        for(i = 0; i < N / 2; i++)
            if(mask & (1 << i))
                for(j = 0; j < 3; j++)
                    T[j] += food[i][j];

        if(T[0] <= target[0] && T[1] <= target[1] && T[2] <= target[2])
            H.insert(make_pair(make_pair(target[0] - T[0], target[1] - T[1]), target[2] - T[2]));
    }

    P = (1 << (N - N / 2)) - 1;

    for(mask = 0; mask <= P; mask++) {
        for(j = 0; j < 3; j++)
            T[j] = 0;

        for(i = N / 2; i < N; i++)
            if(mask & (1 << (i - N / 2)))
                for(j = 0; j < 3; j++)
                    T[j] += food[i][j];

        if(H.count(make_pair(make_pair(T[0], T[1]), T[2]))) {
            printf("yes\n");
            return;
        }
    }

    printf("no\n");
}

int main() {
    int number_of_tests, test_case;

    scanf("%d", &number_of_tests);

    for(test_case = 1; test_case <= number_of_tests; test_case++) {
        printf("Case #%d: ", test_case);

        solve();
    }

    return 0;
}

import sys

def subset_sum(numbers, target):

  solutions = []

  def f(numbers, target, partial=[]):
    s = sum(partial)

    # check if the partial sum is equals to target
    if s == target: 
        solutions.append(partial)
    if s >= target:
        return # if we reach the number why bother to continue

    for i in range(len(numbers)):
        n = numbers[i]
        remaining = numbers[i+1:]
        f(remaining, target, partial + [n]) 

  f(numbers, target)
  return solutions
  
 

with sys.stdin as fp:
  records = fp.readline().rstrip()
  #print records
  xi=1
  while True:
    summary = fp.readline()
    if not summary: break
    #print summary.rstrip()

    [Gp,Gc,Gf] = map(lambda x: int(x), summary.split(' ')) # Goals
    TC = {'p':[], 'c': [], 'f': []} # Test Cases

    foods = int(fp.readline().rstrip())
    #print foods

    #print "-----------"
    while foods > 0:
      foods = foods - 1;
      calories = fp.readline().rstrip()
      #print calories
      [P,C,F] = map(lambda x: int(x), calories.split(' ')) 
      if P > Gp or C > Gc or F > Gf:
        continue 
      TC['p'].append(int(P))
      TC['c'].append(int(C))
      TC['f'].append(int(F))

    results = {}
    results['p'] = subset_sum(TC['p'], Gp)
    results['c'] = subset_sum(TC['c'], Gc)
    results['f'] = subset_sum(TC['f'], Gf)

    # find the smallest result set
    minimal = len(results['p']);
    smallest = None
    for k,r in results.items():
      if len(r) > minimal:
        continue
      minimal = len(r);
      smallest = k
    

    totals={'p':0,'c':0,'f':0}
    for grp in results[smallest]:
      dups={}
      vals={}
      for val in grp:
        for k,v in enumerate(TC[smallest]):
            if v == val:
              candidate = {'p':TC['p'][k], 'c':TC['c'][k], 'f':TC['f'][k]}
              if TC[smallest].count(val) > 1:
                # deal with these later
                dups[k] = candidate
              else:
                vals[k] = candidate
                totals['p'] += TC['p'][k]
                totals['c'] += TC['c'][k]
                totals['f'] += TC['f'][k]

      for k,v in dups.items():
        if Gp - totals['p'] == v['p'] and \
          Gc - totals['c'] == v['c'] and \
          Gf - totals['f'] == v['f']: 
          vals[k] = candidate
          totals['p'] += v['p']
          totals['c'] += v['c']
          totals['f'] += v['f']


    #print TC['p'], Gp, totals['p']
    #print TC['c'], Gc, totals['c']
    #print TC['f'], Gf, totals['f']

    res = "no"
    if Gp == totals['p'] and \
      Gc == totals['c'] and \
      Gf == totals['f']: 
      res = "yes"

    print "Case #%d: %s" % (xi, res)
    xi+=1

    #print "-----------"
    


#include <bits/stdc++.h>

#define pb                 push_back
#define VISITED            1
#define UNVISITED          0
#define all(x)             (x).begin(), (x).end()
#define rall(x)            (x).rbegin(), (x).rend()
#define inttochar(x)       (char(x + '0'))
#define chartoint(x)       (int(x - '0'))
#define sqr(x)             (x)*(x)
#define mset0(a)           memset(a, 0, sizeof a)
#define mset1(a)           memset(a, 1, sizeof a)
#define msetm1(a)          memset(a, -1, sizeof a)
#define inrange(lo,i,hi)   ((lo) <= (i) && (i) <= (hi))
#define inrangex(lo,i,hi)  ((lo) < (i) && (i) < (hi))
#define sz(x)              (int)(x).size()
#define fastio             ios::sync_with_stdio(false); cin.tie(0);
#define foreach(it,A)      for(__typeof((A).begin())it=(A).begin();it!=(A).end();it++)
#define hashit(x)          (char(x) - char('a') + 1)
#define read(file)         freopen(file, "r", stdin);
#define write(file)        freopen(file, "w", stdout);


using namespace std;

const int inf = int(1e9+7);
typedef long long          i64;
typedef unsigned long long u64;

struct food
{
	int a, b, c;
	food(){}

	food(int _a, int _b, int _c){a = _a, b = _b, c = _c;}
};

bool bitmask(vector <food> &vec, food lim)
{
	int len = sz(vec);

	for(int i = 0; i < (1 << len); i++)
	{
		int x, y, z;
		x = y = z = 0;

		for(int j = 0; j < len; j++)
		{
			if(i & (1 << j))
			{
				x += vec[j].a;
				y += vec[j].b;
				z += vec[j].c;
			}
		}
		if(x == lim.a && y == lim.b && z == lim.c)
			return true;
	}
	return false;
}

int main()
{
	#ifndef ONLINE_JUDGE
		read("new_years_resolution.txt");
		write("new_years_resolution_out.txt");
	#endif

	int cases, d, e, f, len, reps = 1; cin >> cases;

	vector <food> vec;

	while(cases--)
	{
		food lim;
		cin >> d >> e >> f;

		lim = food(d,e,f);
		cin >> len;

		vec.resize(len);
		for(int i = 0; i < len; i++)
		{
			cin >> d >> e >> f;

			vec[i] = food(d,e,f);
		}

		cout << "Case #" << reps << ": ";
		reps++;
		if(bitmask(vec,lim))
			cout << "yes\n";
		else
			cout << "no\n";
	}
	return 0;
}
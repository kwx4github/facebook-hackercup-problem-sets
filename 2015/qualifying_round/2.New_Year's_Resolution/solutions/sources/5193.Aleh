package aleh.atsman.fhc.qualification;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Stream;

/**
 * Created by Aleh_Atsman on 1/10/2015.
 */
public class NewYearResolution {

    static Input read() {
        Path path = Paths.get("/Users/alehatsman/Projects/hackathon/fhc/new_years_resolution.txt");
        try (Stream<String> stream = Files.lines(path)) {
            String[] lines = stream.toArray(String[]::new);
            int numberOfCases = Integer.parseInt(lines[0]);
            Case[] cases = new Case[numberOfCases];
            int icase = 0;
            for(int i = 0; i < lines.length-2; i++) {
                int[] elems = parceElems(lines[i+1]);
                int numberOfFood = Integer.parseInt(lines[i+2]);
                i+=3;
                int[][] foods = new int[numberOfFood][3];
                for(int j = 0; j < numberOfFood; j++) {
                    foods[j] = parceElems(lines[i+j]);
                }
                i+=numberOfFood-2;
                cases[icase] = new Case(elems, foods);
                icase++;
            }
            return new Input(numberOfCases, cases);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    static void write(String res) {
        Path path = Paths.get("output");
        try {
            Files.write(path, res.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static int[] parceElems(String elems) {
        String[] arr = elems.split(" ");
        int[] mass = new int[3];
        for(int i=0; i<3; i++) {
            mass[i] = Integer.parseInt(arr[i]);
        }
        return mass;
    }

    static final class Input {
        public final int numberOfCases;
        public final Case[] cases;

        Input(int numberOfCases, Case[] cases) {
            this.numberOfCases = numberOfCases;
            this.cases = cases;
        }
    }

    static final class Case {
        public final int[] elements;

        public final int[][] foods;

        Case(int[] elements, int[][] foods) {
            this.elements = elements;
            this.foods = foods;
        }
    }

    public static void main(String[] args) {
        Input input = read();
        StringBuilder sb = new StringBuilder();

        for(int i = 0; i < input.cases.length; i++) {
            Case caze = input.cases[i];
            sb.append("Case #");
            sb.append(i+1);
            sb.append(": ");
            if(isGoodCase(caze)) {
                sb.append("yes");
            } else {
                sb.append("no");
            }
            sb.append("\n");
        }

        System.out.println(sb.toString());
        write(sb.toString());
    }



    static boolean isGoodCase(Case caze) {
        List<Integer> foodNumbers = createList(caze.foods.length);

        for(int i = foodNumbers.size(); i > 0; i--) {
            Combination.combinations = new ArrayList<>();
            Combination.combination(foodNumbers.toArray(), i);
            List<Object[]> combinations = Combination.combinations;

            for(Object[] combination : combinations) {
                if(isGoodCombination(caze.elements, combination, caze.foods)) {
                    return true;
                }
            }

        }

        return false;
    }

    static boolean isGoodCombination(int[] elements, Object[] combination, int[][] foods) {
        int[] sum = new int[3];
        for (Object i : combination) {
            for(int j = 0; j < 3; j++) {
                sum[j] += foods[(Integer)i][j];
            }
        }
        boolean isGood = true;
        for(int j = 0; j < 3; j++) {
            if(sum[j] != elements[j]) {
                isGood = false;
            }
        }
        return isGood;
    }

    static List<Integer> createList(int size) {
        List<Integer> list = new ArrayList<>(size);
        for(int i = 0; i < size; i++) {
            list.add(i);
        }
        return list;
    }

    public static class Combination {

        public static List<Object[]> combinations = new ArrayList<>();

        public static void combination(Object[]  elements, int K){

            // get the length of the array
            // e.g. for {'A','B','C','D'} => N = 4
            int N = elements.length;

            if(K > N){
                System.out.println("Invalid input, K > N");
                return;
            }
            // calculate the possible combinations
            // e.g. c(4,2)
            c(N,K);

            // get the combination by index
            // e.g. 01 --> AB , 23 --> CD
            int combination[] = new int[K];

            // position of current index
            //  if (r = 1)              r*
            //  index ==>        0   |   1   |   2
            //  element ==>      A   |   B   |   C
            int r = 0;
            int index = 0;

            while(r >= 0){
                // possible indexes for 1st position "r=0" are "0,1,2" --> "A,B,C"
                // possible indexes for 2nd position "r=1" are "1,2,3" --> "B,C,D"

                // for r = 0 ==> index < (4+ (0 - 2)) = 2
                if(index <= (N + (r - K))){
                    combination[r] = index;

                    // if we are at the last position print and increase the index
                    if(r == K-1){

                        //do something with the combination e.g. add to list or print
                        print(combination, elements);
                        index++;
                    }
                    else{
                        // select index for next position
                        index = combination[r]+1;
                        r++;
                    }
                }
                else{
                    r--;
                    if(r > 0)
                        index = combination[r]+1;
                    else
                        index = combination[0]+1;
                }
            }
        }
        public static int c(int n, int r){
            int nf=fact(n);
            int rf=fact(r);
            int nrf=fact(n-r);
            int npr=nf/nrf;
            int ncr=npr/rf;

            System.out.println("C("+n+","+r+") = "+ ncr);

            return ncr;
        }

        public static int fact(int n)
        {
            if(n == 0)
                return 1;
            else
                return n * fact(n-1);
        }


        public static void print(int[] combination, Object[] elements){
            Object[] comb = new Object[combination.length];

            for(int z = 0 ; z < combination.length;z++){
                comb[z] = elements[combination[z]];
            }

            combinations.add(comb);
        }
    }

}

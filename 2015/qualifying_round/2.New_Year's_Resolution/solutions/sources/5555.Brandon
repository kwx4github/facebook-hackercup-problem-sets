#include<iostream>
#include<vector>
#include<queue>

using namespace std;

bool subsum(vector<int> &v, vector<int> &v2, vector<int> &v3, int n, int sum, int sum2, int sum3){
    if (sum == 0 && sum2 == 0 && sum3 == 0)
        return true;
    if (n == 0 && (sum != 0 || sum2 != 0 || sum3 != 0))
        return false;

    if (v[n-1] > sum)
        return subsum(v, v2, v3, n-1, sum, sum2, sum3);
    return subsum(v, v2, v3, n-1, sum, sum2, sum3) 
        || subsum(v, v2, v3, n-1, sum - v[n-1], sum2 - v2[n-1], sum3 - v3[n-1]);
}

int main(){

    queue<string> solution;
    int num, num2, tp, tc, tf, cp, cc, cf;
    
    cin>>num;
    for (int i = 0; i < num; i++){
        cin>>tp>>tc>>tf;
        cin>>num2;
        vector<int> p;
        vector<int> c;
        vector<int> f;
        for (int j = 0; j < num2; j++){
            cin>>cp>>cc>>cf;
            if (cp<=tp && cc<=tc && cf<=tf){
                p.push_back(cp);
                c.push_back(cc);
                f.push_back(cf);
            }
        }
        if (subsum(p,c,f,num2,tp,tc,tf) == true)
            solution.push("yes");
        else
            solution.push("no");
    }
    int counter = 1;
    while(!solution.empty()){
        cout<<"Case #"<<counter<<": "<<solution.front()<<endl;
        solution.pop();
        counter++;
    }
    return 0;
}

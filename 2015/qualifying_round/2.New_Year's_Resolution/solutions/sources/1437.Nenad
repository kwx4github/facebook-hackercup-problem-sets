/*
ID: nenad.11
PROG: ttwo
LANG: C++11
*/
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include <queue>
#include <assert.h>
#include <algorithm>
#include <set>
#include <utility>
#include <functional>
#include <map>
#include <limits>
#include <sstream>
#include <iterator>
#include <cmath>
#include <typeinfo>
#include <fstream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
using namespace std;

#define endl "\n"
#define inf 1000000001
#define trace(x) cout << (x) << endl;
#define trace2(x,y) cout << (x) << " " << (y) << endl;
#define trace3(x,y,z) cout << (x) << " " << (y) << " " << (z) <<  endl;
#define trace4(x,y,z,q) cout << (x) << " " << (y) << " " << (z) << " " << (q) <<  endl;
#define trace5(x,y,z,q,w) cout << (x) << " " << (y) << " " << (z) << " " << (q) << " " << (w) <<  endl;
#define trace6(x,y,z,q,w,e) cout << (x) << " " << (y) << " " << (z) << " " << (q) << " " << (w) << " " << (e) <<  endl;
#define max3(x,y,z) max( (x), max( (y), (z)  )   )
#define max4(x,y,z,q) max( max( (x), (q) ), max( (y), (z)  )   )
#define all(x) (x).begin(),(x).end()
#define pb push_back
#define mp make_pair
#define mpp(one,two,three) make_pair( one,  make_pair( two, three ) )
#define tp(one) cout << (one).first << " " << (one).second << endl;
#define tpp(one) cout << (one).first << " " << (one).second.first << " " << (one).second.second << endl;
#define ms(thing, val) memset( (thing), (val), sizeof(thing) )
#define mt make_tuple
#define x first
#define y second
#define mod 9901
#define fori(lim) for(int (i) = (0); (i) < (lim);(i)++ )
#define forj(lim) for(int (j) = (0); (j) < (lim);(j)++ )
typedef pair<int, int> pii;
//typedef pair<int, pair<int, int> > piii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef long long ll;
struct piii{
	int x, y, z;

	piii(int a, int b, int c)
	{
		x = a; y = b; z = c;
	}
};
int n, m, t, t1, t2, t3, t4, f;/*
void pvi(vector<int>& thinger){ for (int q = 0; q < thinger.size(); q++) cout << thinger[q] << ", "; cout << endl; }
void pvc(vector<char>& thinger){ for (int q = 0; q < thinger.size(); q++) cout << thinger[q] << ", "; cout << endl; }
void pvs(vector<string>& thinger){ for (int q = 0; q < thinger.size(); q++) cout << thinger[q] << ", "; cout << endl; }
void pvb(vector<bool>& thinger){ for (int q = 0; q < thinger.size(); q++) cout << thinger[q] << ", "; cout << endl; }
void pvvi(vector<vector<int> >& t){ for (auto q : t)  pvi(q); }
void pvll(vector<ll>& thinger){ for (int q = 0; q < thinger.size(); q++) cout << thinger[q] << ", "; cout << endl; }
void pvpii(vector<pii>& thinger){ for (auto q : thinger) cout << q.x << " " << q.y << ", "; cout << endl; }
void pvvll(vector<vector<ll> >& t){ for (auto q : t)  pvll(q); }
vector<string> split(string s, char l)
{
	vector<string> temp;
	stringstream ss(s);
	string t;

	while (getline(ss, t, l)) {
		temp.pb(t);
	}
	return temp;
}*/
int gcf(ll a, ll b)
{
	if (b == 0) return a;
	return gcf(b, a%b);
}
int lcm(ll a, ll b){ return (a*b) / gcf(a, b); }
//MAKE INPUT WAY FASTER, BUT ONLY IF YOURE USING C++ I/O ONLY --> ios::sync_with_stdio(false);
bool isprime(int k)
{
	if (k <= 1) return 0;
	if (k == 2) return 1;
	if (k % 2 == 0) return 0;
	for (int i = 3; i*i <= k; i += 2)
		if (k % i == 0) return 0;

	return 1;

}


/*------------------------------------------------THE END-----------------------------------------------------------*/
#define MAX 21
int x[MAX], y[MAX], z[MAX];
int one, two, three;
bool can = 0;


void recurse(int a, int b, int c, int k)
{
	if (k == n){
		if (a == one && b == two && c == three)
			can = 1;
		return;
	}
	recurse(a, b, c, k + 1);
	recurse(a + x[k], b + y[k], c + z[k], k + 1);


}

int main()
{

	ifstream in("test.txt");
	ofstream out("out.txt");

	in >> t;

	forj(t){
		can = 0;
		in >> one >> two >> three;
		in >> n;
		fori(n)
			in >> x[i] >> y[i] >> z[i];

		
		recurse(0, 0, 0, 0);
		string s = "no";
		if (can) s = "yes";

		out << "Case #" << j + 1 << ": " << s << endl;

	}
	


	cin.get();
	return 0;
}

// Find minumum possible value
// Sqaure root search on all of them
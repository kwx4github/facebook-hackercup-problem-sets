#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cassert>

using namespace std;

const long long INF = 1e9 * 1LL * 1e9;

struct Food {
    Food() {
        elements[0] = 0;
        elements[1] = 0;
        elements[2] = 0;
    }

    Food(int P, int C, int F) {
        elements[0] = P;
        elements[1] = C;
        elements[2] = F;
    }

    bool hasNegative() const {
        for (int i = 0; i < 3; ++i) {
            if (elements[i] < 0) {
                return true;
            }
        }
        return false;
    }

    bool isZero() const {
        for (int i = 0; i < 3; ++i) {
            if (elements[i] != 0) {
                return false;
            }
        }
        return true;
    }

    void print() const {
        for (int i = 0; i < 3; ++i) {
            cout << elements[i] << " ";
        }
        cout << endl;
    }

    int elements[3];
};

bool dfs(Food need, int currentDish, const vector<Food>& dishes) {
    if (need.isZero()) {
        return true;
    }

    if (currentDish == dishes.size() || need.hasNegative()) {
        return false;
    }

    Food newNeed = need;
    for (int i = 0; i < 3; ++i) {
        newNeed.elements[i] -= dishes[currentDish].elements[i];
    }
    if (dfs(newNeed, currentDish + 1, dishes)) {
        return true;
    }

    if (dfs(need, currentDish + 1, dishes)) {
        return true;
    }

    return false;
}

bool solve(Food need, vector<Food> dishes) {
    return dfs(need, 0, dishes);
}

struct Test {
    Test(Food need, vector<Food> dishes, bool answer)
        : need(need)
        , dishes(dishes)
        , answer(answer)
    { }

    Food need;
    vector<Food> dishes;
    bool answer;
};

void testSolve() {
    vector<Test> tests;
    {
        Food need(10, 10, 10);
        vector<Food> dishes = {Food(10, 0, 0), Food(0, 10, 0), Food(0, 0, 10)};
        tests.push_back(Test(need, dishes, true));
    }
    {
        Food need(10, 10, 11);
        vector<Food> dishes = {Food(10, 0, 0), Food(0, 10, 0), Food(0, 0, 10)};
        tests.push_back(Test(need, dishes, false));
    }
    {
        Food need(10, 10, 11);
        vector<Food> dishes = {Food(10, 0, 1), Food(0, 10, 0), Food(0, 0, 10)};
        tests.push_back(Test(need, dishes, true));
    }
    {
        Food need(10, 10, 11);
        vector<Food> dishes = {Food(10, 0, 10), Food(0, 10, 1), Food(0, 10, 10)};
        tests.push_back(Test(need, dishes, true));
    }
    {
        Food need(0, 0, 11);
        vector<Food> dishes = {Food(10, 0, 10), Food(0, 10, 1), Food(0, 10, 10)};
        tests.push_back(Test(need, dishes, false));
    }
    {
        Food need(1, 0, 11);
        vector<Food> dishes = {Food(1, 0, 0), Food(0, 0, 1), Food(0, 0, 11)};
        tests.push_back(Test(need, dishes, true));
    }

    {
        Food need(1000, 1000, 1000);
        vector<Food> dishes;
        for (int i = 0; i < 20; ++i) {
            dishes.push_back(Food(10 + rand() % 990, 10 + rand() % 990, 10 + rand() % 990));
        }
        tests.push_back(Test(need, dishes, false));

        dishes.push_back(Food(1000, 1000, 1000));
        tests.push_back(Test(need, dishes, true));
    }

    for (const auto& test : tests) {
        if (solve(test.need, test.dishes) != test.answer) {
            cerr << "testSolve failed" << endl;
            cerr << "Need: " << endl;
            test.need.print();
            cerr << "Dishes: " << endl;
            for (int i = 0; i < test.dishes.size(); ++i) {
                test.dishes[i].print();
            }
            cerr << "Answer: " << endl;
            cerr << test.answer << endl;
        }
    }

    cerr << "testSolve passed" << endl;
}

void unitTests() {
    testSolve();
}

int main() {
    unitTests();
    // freopen("input.txt", "r", stdin);
    freopen("new_years_resolution.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    freopen("new_years_resolution_out.txt", "w", stdout);
    int T;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        int N;
        int Gp, Gc, Gf;
        cin >> Gp >> Gc >> Gf;
        Food need(Gp, Gc, Gf);

        vector<Food> dishes;
        cin >> N;
        for (int i = 0; i < N; ++i) {
            int P, C, F;
            cin >> P >> C >> F;
            dishes.push_back(Food(P, C, F));
        }
        bool answer = solve(need, dishes);
        cout << "Case #" << (t + 1) << ": " << (answer ? "yes" : "no") << endl;
    }
    return 0;
}

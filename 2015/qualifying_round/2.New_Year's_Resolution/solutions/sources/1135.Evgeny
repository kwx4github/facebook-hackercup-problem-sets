#include <iostream>
#include <vector>

using namespace std;

struct Item {
  int a, b, c;
};

Item operator - (const Item& i1, const Item& i2)
{
  Item res;
  res.a = i1.a - i2.a;
  res.b = i1.b - i2.b;
  res.c = i1.c - i2.c;
  return res;
}

istream& operator >> (istream& ist, Item& item) {
  ist >> item.a >> item.b >> item.c;
  return ist;
}

template<class Iterator>
bool search(Item req, const vector<Item>& items, Iterator it)
{
  if( req.a == 0 && req.b == 0 && req.c == 0 ) {
    return true;
  }
  if( it == items.end() ) {
    return false;
  }
  return search(req - *it, items, it + 1) || search(req, items, it + 1);
}

void solveTest(int tn)
{
  Item req;
  cin >> req;
  int n;
  cin >> n;
  vector<Item> items(n);
  for( int i = 0; i < n; i++ ) {
    cin >> items[i];
  }
  cout << "Case #" << tn << ": ";
  cout << (search(req, items, items.begin()) ? "yes" : "no") << "\n";
}

int main()
{
  int tn;
  cin >> tn;
  for( int i = 0; i < tn; i++ ) {
    solveTest(i+1);
  }
  return 0;
}

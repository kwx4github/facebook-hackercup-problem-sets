import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class NewYear {
	static List<Set<String>> solutions = new ArrayList<Set<String>>();

	public static void main(String[] args) throws NumberFormatException,
			IOException {
		BufferedReader reader = new BufferedReader(new FileReader(
				"new_years_resolution.txt"));
		int t = Integer.parseInt(reader.readLine());

		for (int i = 0; i < t; i++) {
			solutions = new ArrayList<Set<String>>();
			int[] goal = toInt(reader.readLine().split(" "));

			int m = Integer.parseInt(reader.readLine());
			int[][] meals = new int[3][m];
			for (int j = 0; j < m; j++) {
				int[] row = toInt(reader.readLine().split(" "));
				meals[0][j] = row[0];
				meals[1][j] = row[1];
				meals[2][j] = row[2];
			}

			// solve the sum problem for each dimension
			for (int j = 0; j < 3; j++) {
				solutions.add(new HashSet<String>());
				solve(j, meals[j], goal[j], new boolean[m]);
			}
			boolean solved = false;
			for (String solution : solutions.get(0)) {
				if (solutions.get(1).contains(solution)
						&& solutions.get(2).contains(solution)) {
					//System.out.println(solution);
					solved = true;
					break;
				}
			}
			if (solved) {
				System.out.printf("Case #%d: yes\n", i + 1);
			} else {
				System.out.printf("Case #%d: no\n", i + 1);
			}

		}
	}

	static int[] toInt(String[] array) {
		int[] ret = new int[array.length];
		for (int i = 0; i < array.length; i++) {
			ret[i] = Integer.parseInt(array[i]);
		}
		return ret;
	}

	static int[] remove(int[] array, int index) {
		int[] ret = new int[array.length - 1];
		for (int i = 0; i < array.length; i++) {
			if (i > index) {
				ret[i - 1] = array[i];
			} else if (i < index) {
				ret[i] = array[i];
			}
		}
		return ret;
	}

	public static void solve(int id, int[] numbers, int sum, boolean[] used) {
		used = used.clone();
		if (sum == 0) {
			String sol = "";
			for (int i = 0; i < used.length; i++) {
				if (used[i]) {
					sol += (i + " ");
				}
			}
			solutions.get(id).add(sol.trim());
			return;
		} else if (sum < 0) {
			return;
		} else if (numbers.length == 0) {
			return;
		} else {
			solve(id, remove(numbers, numbers.length - 1), sum, used);
			used = used.clone();

			used[numbers.length - 1] = true;
			solve(id, remove(numbers, numbers.length - 1), sum
					- numbers[numbers.length - 1], used);
		}
	}
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class NewYearsResolution {
    
    public static final String YES = "yes";
    public static final String NO = "no";

    public static void main(String[] args) {
        NewYearsResolution nyr = new NewYearsResolution();
        nyr.go();
    }

    private void go() {

        try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {

            int T = Integer.parseInt(br.readLine());

            for (int t = 0; t < T; t++) {

                String[] params = br.readLine().split(" ");

                int gp = Integer.parseInt(params[0]);
                int gc = Integer.parseInt(params[1]);
                int gf = Integer.parseInt(params[2]);

                int N = Integer.parseInt(br.readLine());
                String response = "";
                boolean solutionFound = false;
                ArrayList<Food> foodList = new ArrayList<>();

                int sumP = 0;
                int sumC = 0;
                int sumF = 0;

                for (int i = 0; i < N; i++) {
                    params = br.readLine().split(" ");

                    int p = Integer.parseInt(params[0]);
                    int c = Integer.parseInt(params[1]);
                    int f = Integer.parseInt(params[2]);

                    if (p == gp && c == gc && f == gf) {
                        response = YES;
                        solutionFound = true;
                        i++;

                        while (i < N) {
                            br.readLine();
                            i++;
                        }
                        break;
                    }

                    if ((p > gp - 10) || (c > gc - 10) || (f > gf - 10)) {
                        continue;
                    } else {
                        foodList.add(new Food(p, c, f));
                        sumP += p;
                        sumC += c;
                        sumF += f;
                    }
                }

                if (!solutionFound && (sumP < gp || sumC < gc || sumF < gf)) {
                    solutionFound = true;
                    response = NO;
                }

                if (!solutionFound) {
                    Collections.sort(foodList, new FoodReverseComparator());
                    
                    if (checkSum(foodList, 0, new ArrayList<Food>(), 0,
                            gp, gc, gf)) {
                        response = YES;
                        solutionFound = true;
                    }
                }
                
                if (!solutionFound) {
                    response = NO;
                }

                System.out.println("Case #" + (t + 1) + ": " + response);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private boolean checkSum(final ArrayList<Food> data, int fromIndex, 
            final ArrayList<Food> stack, final int stacklen,
            final int targetP, final int targetC, final int targetF) {
        
        if (targetP < 0 || targetC < 0 || targetF < 0) {
            return false;
        }
        
        if (targetP == 0 && targetC == 0 && targetF == 0) {
            return true;
        }

        while (fromIndex < data.size() && data.get(fromIndex).getP() > targetP) {
            fromIndex++;
        }

        while (fromIndex < data.size() && data.get(fromIndex).getP() <= targetP) {
            stack.add(stacklen, data.get(fromIndex));
            boolean solutionFound = checkSum(data, fromIndex + 1, stack, stacklen + 1,
                    targetP - data.get(fromIndex).getP(),
                    targetC - data.get(fromIndex).getC(),
                    targetF - data.get(fromIndex).getF());
            if (solutionFound) {
                return true;
            }
            fromIndex++;
        }
        return false;
    }

    private class Food {
        private int p;
        private int c;
        private int f;

        public Food(int p, int c, int f) {
            this.p = p;
            this.c = c;
            this.f = f;
        }

        public int getP() {
            return p;
        }

        public int getC() {
            return c;
        }

        public int getF() {
            return f;
        }
    }

    class FoodReverseComparator implements Comparator<Food> {

        @Override
        public int compare(Food food1, Food food2) {
            return food2.getP() - food1.getP();
        }

    }
}

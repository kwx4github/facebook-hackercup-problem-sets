import sys

FILE_INPUT = 'new_years_resolution_example_input.txt'

PROTEIN, CARBOHYDRATES, FAT = (0, 1, 2)


def combinations(iterable, r):
	# combinations('ABCD', 2) --> AB AC AD BC BD CD
	# combinations(range(4), 3) --> 012 013 023 123
	pool = tuple(iterable)
	n = len(pool)
	if r > n:
		return
	indices = range(r)
	yield tuple(pool[i] for i in indices)
	while True:
		for i in reversed(range(r)):
			if indices[i] != i + n - r:
				break
		else:
			return
		indices[i] += 1
		for j in range(i+1, r):
			indices[j] = indices[j-1] + 1
		yield tuple(pool[i] for i in indices)
		
def unique(iterable, key=lambda x: x):
	seen = set()
	for elem, ekey in ((e, key(e)) for e in iterable):
		if ekey not in seen:
			yield elem
			seen.add(ekey)


with open(FILE_INPUT, 'r') as f:
	T = int(f.readline())

	for i in range(T):
		nutrients = []
		found = False
		G = f.readline().split()
		Gp, Gc, Gf = map(int, G)
		N = int(f.readline())
		
		for j in range(N):
			PCF = f.readline().split()
			nutrients.append(map(int, PCF))
		
		# Basic search
		for j in nutrients:
			if j == [Gp, Gc, Gf]:
				found = True
		
		# Deep search
		for j in range(N):
			candidates = combinations(nutrients, j)
			for k in candidates:				
				if [sum(l) for l in zip(*k)] == [Gp, Gc, Gf]:
					found = True
					break
			if found == True:
				break
		
		if found == True:
			print 'Case #{}: yes'.format(i+1)
		else:
			print 'Case #{}: no'.format(i+1)
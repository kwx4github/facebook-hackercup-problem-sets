#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>

using namespace std;

typedef long long LL;

const int maxn = 233;

struct Food{
	int p, c, f;
}fo[maxn], G;

Food operator + (Food u, const Food &v){
	u.p += v.p;
	u.c += v.c;
	u.f += v.f;
	return u;
}

Food operator - (Food u, const Food &v){
	u.p -= v.p;
	u.c -= v.c;
	u.f -= v.f;
	return u;
}

bool operator < (const Food &u, const Food &v){
	if (u.p != v.p) return u.p < v.p;
	if (u.c != v.c) return u.c < v.c;
	return u.f < v.f;
}

set<Food> chk;

int N;

void dfs1(int u, Food v){
	if (u > N){
		chk.insert(v);
		return ;
	}
	dfs1(u + 1, v);
	dfs1(u + 1, v + fo[u]);
	return ;
}

bool dfs2(int u, Food v){
	if (u > N)
		return chk.find(G - v) != chk.end();
	if (dfs2(u + 1, v)) return 1;
	if (dfs2(u + 1, v + fo[u])) return 1;
	return 0;
}

int main(){
	int T;
	scanf("%d", &T);
	for (int TI = 1; TI<=T; ++TI){
		scanf("%d%d%d", &G.p, &G.c, &G.f);
		int n;
		scanf("%d", &n);
		for (int i = 1; i<=n; ++i)
			scanf("%d%d%d", &fo[i].p, &fo[i].c, &fo[i].f);
		Food u;
		u.f = u.p = u.c = 0;
		chk.clear();
		chk.insert(u);
		N = n >> 1;
		dfs1(1, u);
		N = n;
		bool ans = dfs2((n >> 1) + 1, u);
		printf("Case #%d: %s\n", TI, ans? "yes": "no");
	}
	return 0;
}

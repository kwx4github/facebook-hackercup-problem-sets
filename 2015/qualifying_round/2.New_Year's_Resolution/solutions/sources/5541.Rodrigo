#include <algorithm>
#include <bitset>
#include <deque>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define fst first
#define snd second
#define all(x) (x).begin(), (x).end()
#define clr( a , v ) memset( a , v , sizeof(a) )
#define pb push_back
#define mp make_pair
#define sz size()
#define FORN( i , s , n ) for( int i = s ; i < (int)(n) ; i++ )
#define FOR( i , n ) FORN( i , 0 , n )
#define FORIT(i,x) for( typeof x.begin() i = x.begin() ; i != x.end() ; i++ )
#define trace(x)    cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define read ios::sync_with_stdio(false)

using namespace std;

typedef long long int64;
typedef vector <int> vi;
typedef pair <int,int> ii;
typedef vector <string> vs;
typedef vector <ii> vii;


int MCD (int x,int y){
        return (y==0 ? x:MCD(y,x%y));
}
 
int MCM(int x ,int y){
        return (x*y/MCD(x,y));
}
int P,C,F;
bool dp[1005][1005][1005];
int cant;
vi pro,car,fat;

bool ks(int tot , int prot ,int carb , int fats){
    if(prot>P || carb>C || fats>F) return false;
    if(dp[prot][carb][fats]==true) return true;
    if(prot==P && carb==C && fats==F) return (dp[prot][carb][fats]=true);
    if(tot==cant) return false;
    bool valor = (ks(tot+1,prot , carb,fats)  || ks(tot+1,prot+pro[tot],carb+car[tot] ,fats+fat[tot]  ) ); 
    return (dp[prot][carb][fats]=valor);
}

int main() {
	int T;
	cin>>T;
	FOR(i,T){
		cin>>P>>C>>F;
                cin>>cant;
		FOR(j,cant){
			int ap,ac,af;
			cin>>ap>>ac>>af;
			pro.pb(ap);car.pb(ac);fat.pb(af);
		}
                FOR(j,1000){
                   FOR(k,1000){
                       FOR(l,1000){
                           dp[j][k][l]=false;
                       }
                   } 
                }
                bool poder=ks(0,0,0,0);
                pro.clear();car.clear();fat.clear(); 
                cout<<"Case #"<<i+1<<": ";
                if(poder)   cout<<"yes"<<endl;
                else        cout<<"no"<<endl;
	}
	return 0;
}
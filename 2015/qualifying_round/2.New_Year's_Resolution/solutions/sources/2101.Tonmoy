
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <string.h>
#include <stdlib.h>
#include <iterator>
#include <sstream>
#include <numeric>
#include <fstream>
#include <numeric>
#include <vector>
#include <cctype>
#include <math.h>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
//#include <windows.h>
using namespace std;

#define FRE(i,a,b)  for(i = a; i <= b; i++)
#define FRL(i,a,b)  for(i = a; i < b; i++)
#define mem(t, v)   memset ((t) , v, sizeof(t))
#define sqr(x)      (x)*(x)
#define all(x)      x.begin(),x.end()
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c) scanf("%d %d %d", &a, &b, &c)
#define D(x)        cout<<#x " = "<<(x)<<endl
#define pf          printf
#define VI          vector <int>
#define pii         pair <int, int>
#define pll         pair <LL, LL>
#define pb          push_back
#define mp          make_pair
#define sz          size()
#define ins         insert
#define fi          first
#define se          second
#define xx          first
#define yy          second
#define inf         (1<<29)
#define MOD         100007
#define eps         1e-8
#define MAX         20

typedef long long int LL;
typedef double db;

//int dx[] = {+0,+1,+0,-1};
//int dy[] = {+1,+0,-1,+0};
//int dx[] = {-1,-1,-1,+0,+0,+1,+1,+1};
//int dy[] = {-1,+0,+1,-1,+1,-1,+0,+1};
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int Set(int n, int pos) {return n | (1<<pos); }

int p[MAX+5], c[MAX+5], f[MAX+5], n;
bool psbl;

void backtrack(int idx, int cur_p, int cur_c, int cur_f)
{
    if(!(cur_p || cur_c || cur_f))
    {
        psbl = true;
        return;
    }
    if(idx > n) return;
    if(psbl) return;
    if(cur_p < 0 || cur_c < 0 || cur_f < 0) return;

    backtrack(idx+1, cur_p, cur_c, cur_f);
    backtrack(idx+1, cur_p - p[idx], cur_c - c[idx], cur_f - f[idx]);
}


int main()
{
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);

    int i, j, k, t, cs, gp, gc, gf;

    sf(t);
    FRE(cs,1,t)
    {
        sfff(gp, gc, gf);
        sf(n);
        FRE(i,1,n)
            sfff(p[i], c[i], f[i]);

        psbl = 0;
        backtrack(1, gp, gc, gf);
        pf("Case #%d: %s\n", cs, psbl? "yes":"no");
    }

    return 0;
}


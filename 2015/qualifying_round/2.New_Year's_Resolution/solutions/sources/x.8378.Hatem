package HackerCup;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;

public class NewYearSResolution {
	static int[][] foods;
	static int[] proteins = new int[3];
    static boolean[][][][] states;
    
	public static boolean canEat(int food, int p, int c, int f) {
		if (food >= foods.length || p <= 0 || c <= 0 || f <= 0) {
			if (p == 0 && c == 0 && f == 0) {
				return true;
			}

			return false;
		}

		return canEat(food + 1, p - foods[food][0], c
				- foods[food][1], f - foods[food][2])
				|| canEat(food + 1, p, c, f);

	}
	
	public static boolean canEat2(int food, int p, int c, int f) {
		if (food >= foods.length || p <= 0 || c <= 0 || f <= 0) {
			if (p == 0 && c == 0 && f == 0) {
				return true;
			}

			return false;
		}
			
		return  canEat(food + 1, p - foods[food][0], c
				- foods[food][1], f - foods[food][2])
				|| canEat(food + 1, p, c, f);

	} 

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("input2.txt"));
		PrintWriter pw = new PrintWriter(new File("src/output2.txt"));
		int counter = 1;
		String line = "";
		line = br.readLine();
        int testCases = Integer.parseInt(line);
		for (int i = 0; i < testCases; i++) {
			line = br.readLine();
			String[] calories = line.split(" ");
			proteins[0] = Integer.parseInt(calories[0]);
			proteins[1] = Integer.parseInt(calories[1]);
			proteins[2] = Integer.parseInt(calories[2]);
			line = br.readLine();
			foods = new int [Integer.parseInt(line)][3];
			int noFoods = Integer.parseInt(line);
			for (int j = 0; j < noFoods; j++) {
				line = br.readLine();
				String[] foodProteins = line.split(" ");
				foods[j][0] = Integer.parseInt(foodProteins[0]);
				foods[j][1] = Integer.parseInt(foodProteins[1]);
				foods[j][2] = Integer.parseInt(foodProteins[2]);
			}
			
			pw.println("Case #"+(i+1)+": " +canEat(0 , proteins[0],proteins[1],proteins[2]));
//			System.out.println(canEat(0 , proteins[0],proteins[1],proteins[2]));
		}
		pw.close();
	}

}

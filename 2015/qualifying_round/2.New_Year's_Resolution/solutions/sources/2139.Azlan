local floor, insert, concat = math.floor, table.insert, table.concat
local countmax, countmeal, target, g, gp, gc, gf, results
local chk1, chk2, success

function split(str)
  ret = {}
  for word in string.gmatch(str, '([^ ]+)') do
    insert(ret, tonumber(word))
  end
  return ret
end

function num2bin(num, maxmeal)
  local num2binr = {}
  while maxmeal > 0 do
    insert(num2binr, 1, num % 2)
    num = floor(num /2)
    maxmeal = maxmeal - 1
  end
  return concat(num2binr)
end

function findTotal(tab, bin)
  local total = 0
  local index = 0
  for bit in string.gmatch(bin, '(.)') do
    index = index + 1
    if bit == "1" then
      total = total + tab[index]
    end
  end
  return total
end

function findAllTotals(ltarget, tab, maxmeal)
  retFound = {}
  for j = 1, 2^maxmeal - 1 do
    if findTotal(tab, num2bin(j, maxmeal)) == ltarget then
      insert(retFound, j)
    end
  end
  return retFound
end

file = io.open("new_years_resolution.txt", "r")
io.input(file)

countmax = tonumber(io.read())

for i = 1, countmax do
  target = split(io.read())
  countmeal = tonumber(io.read())

  gp = {}
  gc = {}
  gf = {}

  for j = 1, countmeal do
    g = split(io.read())
    gp[j] = g[1]
    gc[j] = g[2]
    gf[j] = g[3]
  end

  results = findAllTotals(target[1], gp, countmeal)

  success = false
  if #results > 0 then
    for k,v in pairs(results) do
      chk1 = findTotal(gc, num2bin(v, countmeal))
      chk2 = findTotal(gf, num2bin(v, countmeal))
      success = (chk1 == target[2]) and (chk2 == target[3])
      if success then break end
    end
  end

  if success then
    print("Case #" .. i .. ": yes")
  else
    print("Case #" .. i .. ": no")
  end
end

io.close(file)

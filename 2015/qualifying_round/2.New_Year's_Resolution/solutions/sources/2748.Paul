#!/usr/bin/env python


#
# Helper Functions
#

# Performs recursive nutrition value trials on the given food list to see if the
# specified nutrition goals can be exactly met
def goalsAreDoable( pGoal, cGoal, fGoal, foodList, startPos ):
   # We're done if the residual goal for each nutrition category is zero.
   if ( pGoal == 0 ) and ( cGoal == 0 ) and ( fGoal == 0 ):
      return True
   # Try out each remaining entry in the food list.
   numFood = len( foodList )
   for idx in range( startPos, numFood ):
      pValue, cValue, fValue = foodList[ idx ]
      # Skip food options that cause any residual goal to be exceeded.
      if ( pValue > pGoal ) or ( cValue > cGoal ) or ( fValue > fGoal ):
         continue
      # Perform a recursive call to handle the remaining nutrition goals.
      goalsMet = goalsAreDoable(
         pGoal - pValue, cGoal - cValue, fGoal - fValue, foodList, idx + 1 )
      # We're done if the chain of food choices eventually leads to the
      # nutrition goals being exactly met.
      if goalsMet:
         return True
   # If this point is reached, it means that this particular chain of choices
   # did not lead to the nutrition goals being exactly met.
   return False

#
# Main Function
#

def main():
   T = int( raw_input() )
   for i in range( 1, T + 1 ):
      Gp, Gc, Gf = raw_input().split()
      Gp = int( Gp )
      Gc = int( Gc )
      Gf = int( Gf )
      foods = []
      N = int( raw_input() )
      for j in range( 0, N ):
         P, C, F = raw_input().split()
         foods.append( ( int( P ), int( C ), int( F ) ) )
      possible = goalsAreDoable( Gp, Gc, Gf, foods, 0 )
      print( "Case #%d: %s" % ( i, "yes" if possible else "no" ) )


if __name__ == "__main__":
   main()



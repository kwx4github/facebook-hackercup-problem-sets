#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <ctime>
#include <fstream>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <vector>

using namespace std;

struct food {
	int P, C, F;
	food(int p, int c, int f) : P(p), C(c), F(f) {}
};

bool operator<(const food& a, const food& b) {
	return a.P < b.P || (a.P == b.P && (a.C < b.C || (a.C == b.C && a.F < b.F)));
}

int main() {
#ifdef TESTING
	ifstream cin("input.txt");
	ofstream cout("output.txt");
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int T, N, GP, GC, GF;
	cin >> T;
	for (int caso = 1; caso <= T; caso++) {
		cin >> GP >> GC >> GF >> N;
		set<food> values;
		set<food>::iterator it;
		food f(0,0,0);
		values.insert(f);
		bool found = false;
		for (int i = 0; i < N; i++) {
			cin >> f.P >> f.C >> f.F;
			set<food> nvalues;
			for (it = values.begin(); it != values.end() && !found; it++) {
				if (it->P + f.P == GP && it->C + f.C == GC && it->F + f.F == GF)
					found = true;
				else if (it->P + f.P <= GP && it->C + f.C <= GC && it->F + f.F <= GF)
					nvalues.insert(food(it->P + f.P, it->C + f.C, it->F + f.F));
			}
			values.insert(nvalues.begin(), nvalues.end());
		}
		cout << "Case #" << caso << ": " << (found ? "yes" : "no") << endl;
	}

	return 0;
}

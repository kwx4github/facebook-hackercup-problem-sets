#include<iostream>
#include<cstdio>
#include <string>
using namespace std;
struct data {
	int a;
	int b;
	int c;
};
// Returns true if there is a subset of set[] with sun equal to given sum
bool isSubsetSum(data set[], int n, int sum1, int sum2, int sum3) {
	// Base Cases
	bool c = (sum1 == 0 && sum2 == 0 && sum3 == 0);
	if (c)
		return true;

	if (n == 0 && !c)
		return false;

	// If last element is greater than sum, then ignore it
	if (set[n - 1].a > sum1)
		return isSubsetSum(set, n - 1, sum1, sum2, sum3);

	if (set[n - 1].b > sum2)
		return isSubsetSum(set, n - 1, sum1, sum2, sum3);

	if (set[n - 1].c > sum3)
		return isSubsetSum(set, n - 1, sum1, sum2, sum3);

	/* else, check if sum can be obtained by any of the following
	 (a) including the last element
	 (b) excluding the last element   */
return isSubsetSum(set, n-1, sum1,sum2,sum3) || isSubsetSum(set, n-1, sum1-set[n-1].a,sum2-set[n-1].b,sum3-set[n-1].c);
}

int main() {
int T;
int GP, GC, GF;
int N;
data set[20];
scanf("%d", &T);
int i = 0;
while (i != T) {
	cin >> GP >> GC >> GF;
	cin >> N;
	cout << "Case #" << i + 1 << ": ";
	for (int j = 0; j < N; j++) {
		cin >> set[j].a >> set[j].b >> set[j].c;
	}
	if(isSubsetSum(set,N,GP,GC,GF))
	{
		cout<<"yes"<<endl;
	}
	else
	{
		cout<<"no"<<endl;
	}
	i++;
}

return 0;
}


#include <iostream> 
#include <cstdio> 
#include <fstream>
#include <functional>
#include <set> 
#include <map> 
#include <vector> 
#include <queue> 
#include <stack> 
#include <cmath> 
#include <algorithm> 
#include <cstring> 
#include <bitset> 
#include <ctime> 
#include <sstream>
#include <stack> 
#include <cassert> 
#include <list> 
#include <deque>
//#include <unordered_set> 
using namespace std;
typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pi;

#define mp make_pair 
#define pb push_back
#define y1 botva
#define all(s) s.begin(), s.end() 
void solve();

#define NAME "changemeplease"
int main() {
#ifdef YA 
	//cerr << NAME << endl;
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout); 
	clock_t start = clock();
#else 
	freopen("input.txt", "r", stdin); 
	freopen("output.txt", "w", stdout); 
#endif 
	ios_base::sync_with_stdio(false);
	cout << fixed;
	cout.precision(10);
	int t = 1;
	cin >> t;  
	for (int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
#ifdef YA 
	//cout << "\n\n\nTime:" << ((clock() - start) / 1.0 / CLOCKS_PER_SEC);
#endif 
	return 0;
}

struct gg {
	int x, y, z;
	void scan() {
		cin >> x >> y >> z;
	}
	gg():x(0), y(0), z(0) {}
	gg(int x, int y, int z) :x(x), y(y), z(z){}
	gg operator +(const gg& oth) const {
		return gg(x + oth.x, y + oth.y, z + oth.z);
	}
	bool operator == (const gg& oth) const {
		return x == oth.x && y == oth.y && z == oth.z;
	}
};

void solve() {
	int n;
	
	gg need;
	need.scan();
	cin >> n;
	vector <gg> a(n);
	for (int i = 0; i < n; ++i) {
		a[i].scan();
	}
	bool f = false;

	for (int mask = 0; mask < (1 << n); ++mask) {
		gg tmp;
		for (int j = 0; j < n; ++j) {
			if (mask & (1 << j)) {
				tmp = tmp + a[j];
			}
		}
		if (tmp == need) {
			f = true;
			break;
		}
	}
	if (f) {
		cout << "yes\n";
	}
	else {
		cout << "no\n";
	}
}
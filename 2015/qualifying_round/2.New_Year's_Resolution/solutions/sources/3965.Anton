import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Locale;
import java.util.Queue;
import java.util.StringTokenizer;

public class NewYearsResolution {

  private void solve() {
    int Gp = ni();
    int Gc = ni();
    int Gf = ni();
    int n = ni();
    int P[] = new int[n];
    int C[] = new int[n];
    int F[] = new int[n];

    for (int i = 0; i < n; ++i) {
      P[i] = ni();
      C[i] = ni();
      F[i] = ni();
    }

    for (int i = 1; i < p2(n); i++) {
      int p, c, f;
      p = c = f = 0;

      for (int j = 1, k = 0; j < p2(n); j <<= 1, k++) {
        if ((i & j) != 0) {
          p += P[k];
          c += C[k];
          f += F[k];
        }
      }

      if (p == Gp && c == Gc && f == Gf) {
        prln("yes");
        return;
      }

    }

    prln("no");
  }

  private int p2(int n) {
    if (n == 1) return 2;
    return 2 * p2(n - 1);
  }

  public static void main(String ... args) throws FileNotFoundException {
    new NewYearsResolution().run();
  }

  private PrintWriter pw;
  private BufferedReader br;
  private StringTokenizer st;

  private void run() throws FileNotFoundException {
    Locale.setDefault(Locale.US);
    pw = new PrintWriter(new File("new_years_resolution_output.txt"));
    br = new BufferedReader(new FileReader("new_years_resolution.txt"));
    int T = ni();
    for (int i = 1; i <= T; ++i) {
      pr("Case #" + i + ": ");
      solve();
    }
    pw.close();
    try {
      br.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  private void pr(Object o) { pw.print(o); }
  private void prln(Object o) {pw.println(o);}

  private int ni() { return Integer.parseInt(nt()); }

  private String nt() {
    if (st == null || !st.hasMoreTokens())
      try {
        st = new StringTokenizer(br.readLine());
      } catch (IOException e) {
        System.exit(666);
      }
    return st.nextToken();
  }
}

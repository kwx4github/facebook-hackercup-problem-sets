#include <algorithm>
#include <iostream>
#include <vector>

using std::cin;
using std::cout;
using std::endl;

struct Food {
  Food(int P, int C, int F) : pr(P), ca(C), fa(F) {}
  int pr;
  int ca;
  int fa;
};

int g_pr, g_ca, g_fa;
std::vector<Food> g_foods;

inline bool TryAllComb(int new_item, int cur_pr, int cur_ca, int cur_fa) {
  if (new_item >= g_foods.size()) {
    return (g_pr == cur_pr && g_ca == cur_ca && g_fa == cur_fa);
  }
  if (cur_pr > g_pr || cur_ca > g_ca || cur_fa > g_fa) {
    return false;
  }

  const Food& food = g_foods[new_item];
  return TryAllComb(new_item + 1, cur_pr, cur_ca, cur_fa) ||
      TryAllComb(new_item + 1, cur_pr + food.pr, cur_ca + food.ca, cur_fa + food.fa);
}

int main() {
  int T = 0;
  cin >> T;
  for (int t = 1; t <= T; ++t) {
    cin >> g_pr >> g_ca >> g_fa;

    int N = 0;
    cin >> N;
    g_foods.clear();
    g_foods.reserve(N);

    for (int i = 0; i < N; ++i) {
      int p = 0, c = 0, f = 0;
      cin >> p >> c >> f;
      g_foods.push_back(Food(p, c, f));
    }

    const bool possible = TryAllComb(0, 0, 0, 0);
    cout << "Case #" << t << ": " << (possible ? "yes" : "no") << endl;
  }
  return 0;
}

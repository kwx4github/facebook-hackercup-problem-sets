// @author vudduu
// dedicated to my wife Susana
var AClass = (function(){
	var T,
		G,
		N,
		V;

	var getFullComb = function(list) {
		var v = [{p:0,c:0,f:0}];
		list.forEach(function(it){
			var w = [];
			v.forEach(function(vit) {
				w.push({
					p: vit.p + it.p,
	    			c: vit.c + it.c,
	    			f: vit.f + it.f
				});
			});
			v = v.concat(w);
		});
		return v;
	};

	var solve = function() {
		var mid = parseInt( N / 2 ),
			// v1 = getFullComb( V.slice(0, mid) ), // faster implementation
			// you can create two arrays one from 0 to mid and the other from mid to N
			// combine these brute force arrays using two pointers
			v2 = getFullComb( V ),
			flag = false;
		v2.forEach(function(item){
			if(item.p == G.p && item.c == G.c && item.f == G.f)
				flag = true;
		});

		return flag;
	}

	return {
		processDataAndSolve: function(input) {
			var inArray = input.split('\n'),
				v = [],
				itl = 1;
		    T = parseInt(inArray[0]);
		    for(var it=1; it<=T ;it++) {
		    	v = inArray[itl++].split(' ');
		    	G = {
		    		p: parseInt(v[0]),
		    		c: parseInt(v[1]),
		    		f: parseInt(v[2])
		    	};
		    	N = parseInt(inArray[itl++]);
		    	V = [];
		    	for(var i=0; i<N ;i++) {
		    		v = inArray[itl++].split(' ');
		    		V.push({
		    			p: parseInt(v[0]),
		    			c: parseInt(v[1]),
		    			f: parseInt(v[2])
		    		});
		    	}
		    	var val = solve();
		    	if(val) console.log("Case #"+ it +": yes");
		    	else console.log("Case #"+ it +": no");
		    }
		}
	}
})();

process.stdin.resume();
process.stdin.setEncoding("ascii");
var _input = "";
process.stdin.on("data", function (input) {
    _input += input;
});
process.stdin.on("end", function () {
   AClass.processDataAndSolve(_input);
});

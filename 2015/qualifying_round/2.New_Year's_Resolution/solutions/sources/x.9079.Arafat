#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define bool int
#define true 1
#define false 0
// Returns true if there is a subset of set[] with sun equal to given sum
bool isSubsetSum(long long set[], long long n, long long sum)
{
	// The value of subset[i][j] will be true if there is a subset of set[0..j-1]
	//  with sum equal to i
	bool subset[sum + 1][n + 1]; long long i, j;

	// If sum is 0, then answer is true
	for (i = 0; i <= n; i++)
		subset[0][i] = true;

	// If sum is not 0 and set is empty, then answer is false
	for (i = 1; i <= sum; i++)
		subset[i][0] = false;

	// Fill the subset table in botton up manner
	for (i = 1; i <= sum; i++)
	{
		for (j = 1; j <= n; j++)
		{
			subset[i][j] = subset[i][j - 1];
			if (i >= set[j - 1])
				subset[i][j] = subset[i][j] || subset[i - set[j - 1]][j - 1];
		}
	}

	/* // uncomment this code to print table
	for (long long i = 0; i <= sum; i++)
	{
	for (long long j = 0; j <= n; j++)
	printf ("%4d", subset[i][j]);
	printf("\n");
	} */

	return subset[sum][n];
}

// Driver program to test above function
int main()
{
	long long T, a, b, c, d, e,f,g,h,i;
	FILE *fp;
	fp=fopen("input.txt","r");
	fscanf(fp,"%lld\n", &T);
	for (a = 0; a < T; a++)
	{
		fscanf(fp,"%lld %lld %lld\n", &b, &c, &d);
		fscanf(fp,"%lld\n", &e);
		long long *z = (long long *)malloc(e*sizeof(long long));
		long long *y = (long long *)malloc(e*sizeof(long long));
		long long *v = (long long *)malloc(e*sizeof(long long));
		for (f = 0; f < e; f++)
			fscanf(fp,"%lld %lld %lld\n", &z[f], &y[f], &v[f]);
		
		
		if ((isSubsetSum(z, e, b) == true) && (isSubsetSum(y, e, c) == true) &&(isSubsetSum(v, e, d) == true))
			printf("Case #%d: yes\n",(a+1));
		else
			printf("Case #%d: no\n",(a+1));
		
	}
}

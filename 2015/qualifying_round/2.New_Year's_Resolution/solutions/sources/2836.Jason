/*******************************************************************************
New Year's Resolution
30 points

Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some
research and has found out that calories come from three main sources, called
macronutrients: protein, carbohydrates, and fat. Alex wants to get the right
balance of protein, carbohydrates, and fat to have a balanced diet. For each
available food, Alex can only choose to eat it or not eat it. He can't eat a
certain food more than once, and he can't eat a fractional amount of a food.

Input
Input begins with an integer T, the number of test cases. For each test case,
the first line consists of three space-separated integers: GP, GC, and GF, which
represent the amount of protein, carbohydrates, and fat that Alex wants to eat.
The next line has the number of foods for that test case, an integer N. The next
N lines each consist of three space-separated integers: P, C, and F, which
represent the amount of protein, carbohydrates, and fat in that food,
respectively.

Output
For each test case i, print a line containing "Case #i: " followed by either
"yes" if it is possible for Alex to eat the exact amount of each macronutrient,
or "no" if it is not possible.

Constraints
1 <= T <= 20 
1 <= N <= 20 
10 <= GP, GC, GF <= 1000 
10 <= P, C, F <= 1000 
*******************************************************************************/

#include <fstream>
#include <iostream>
#include <string>
#include <sstream>
#include <algorithm>
#include <functional>

bool Search(int foods[][3], int num, int gpGoal, int gcGoal, int gfGoal, int p, int tp, int tc, int tf)
{
	if (tp == gpGoal && tc == gcGoal && tf == gfGoal) return true;

	for (int i(p); i < num; ++i)
	{
		if (Search(foods, num, gpGoal, gcGoal, gfGoal, i + 1, tp + foods[i][0], tc + foods[i][1], tf + foods[i][2])) return true;
	}

	return false;
}

int main(int argc, char* argv[])
{
	if (argc < 2) return 1;

	std::ifstream in(argv[1]);
	
	std::string line;
	std::getline(in, line);
	int count;
	std::stringstream(line) >> count;
	
	for (int n(0); n < count; ++n)
	{
		std::cout << "Case #" << (n + 1) << ": ";

		int gpGoal, gcGoal, gfGoal;
		std::getline(in, line);
		std::stringstream(line) >> gpGoal >> gcGoal >> gfGoal;

		int num;
		std::getline(in, line);
		std::stringstream(line) >> num;

		auto foods = new int[num][3];
		for (int i(0); i < num; ++i)
		{
			std::getline(in, line);
			std::stringstream(line) >> foods[i][0] >> foods[i][1] >> foods[i][2];
		}

		std::cout << (Search(foods, num, gpGoal, gcGoal, gfGoal, 0, 0, 0, 0) ? "yes" : "no");

		delete[] foods;
		std::cout << std::endl;
	}

	return 0;
}

using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    public static IEnumerable<IEnumerable<T>> GetPowerSet<T>(List<T> list)
    {
        return from m in Enumerable.Range(0, 1 << list.Count)
               select
                   from i in Enumerable.Range(0, list.Count)
                   where (m & (1 << i)) != 0
                   select list[i];
    }

    static void Main(string[] args)
    {
        var T = int.Parse(Console.ReadLine());

        for (var t = 0; t < T; t++)
        {
            var r1 = Console.ReadLine().Trim().Split().Select(int.Parse).ToArray();
            var gp = r1[0];
            var gc = r1[1];
            var gf = r1[2];
            var N = int.Parse(Console.ReadLine());

            var foodList = new List<Tuple<int, int, int>>();
            for (var i = 0; i < N; i++)
            {
                var r2 = Console.ReadLine().Trim().Split().Select(int.Parse).ToArray();
                foodList.Add(Tuple.Create(r2[0], r2[1], r2[2]));
            }

            bool found = false;
            foreach (var subset in GetPowerSet(Enumerable.Range(0, N).ToList()))
            {
                if (subset.Sum(ee => foodList[ee].Item1) != gp) continue;
                if (subset.Sum(ee => foodList[ee].Item2) != gc) continue;
                if (subset.Sum(ee => foodList[ee].Item3) != gf) continue;

                found = true;
                break;
            }

            if (found)
            {
                Console.WriteLine("Case #{0}: yes", t + 1);
            }
            else
            {
                Console.WriteLine("Case #{0}: no", t + 1);
            }
        }

    }
}

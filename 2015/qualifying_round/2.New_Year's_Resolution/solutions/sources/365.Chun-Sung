#include<stdio.h>
#include<unordered_set>
using namespace std;

int T, N;
long long G, GP, GC, GF, A[32], Q[1048576];

unordered_set<long long> S;

inline long long takeP(long long t) { return t>>32; }
inline long long takeC(long long t) { return (t>>16) & 0xffff; }
inline long long takeF(long long t) { return t & 0xffff; }

inline long long readTuple() {
	int p, c, f;
	scanf("%d %d %d", &p, &c, &f);
	long long r = (p<<16) | c;
	return (r<<16) | f;
}

inline bool bad(long long v) {
	return takeP(v) > GP || takeC(v) > GC || takeF(v) > GF;
}

int main() {
	scanf("%d", &T);
	for(int tt = 1; tt <= T; ++tt) {
		G = readTuple();
		GP = takeP(G), GC = takeC(G), GF = takeF(G);
		scanf("%d", &N);
		for(int i = 0; i < N; ++i) A[i] = readTuple();
		S.clear();
		Q[0] = 0;
		S.insert(0);
		int qn = 1;
		bool good = false;
		for(int i = 0; i < N && !good; ++i) {
			for(int j = qn-1; j >= 0; --j) {
				long long v = Q[j] + A[i];
				if(bad(v) || S.find(v) != S.end()) continue;
				if(v == G) {
					good = true;
					break;
				}
				Q[qn++] = v;
				S.insert(v);
			}
		}
		printf("Case #%d: ", tt);
		puts(good?"yes":"no");
	}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace New_Year_s_Resolution
{
    class Program
    {
        static bool test(int[] desired, int[][] available, int[] current, int index, int N)
        {
            // Return at leaves of recursion tree
            if (index >= N)
                return false;

            int[] newValue = current.Zip(available[index], (x, y) => x + y).ToArray();

            bool solution = true;

            // Check if solved
            for (var i = 0; i < 3; ++i )
            {
                if (newValue[i] > desired[i])
                    return false;
                if (newValue[i] != desired[i])
                    solution = false;
            }

            if (solution)
                return true;

            // Recurse down to all combos
            for (var i = index + 1; i < N; ++i)
            {
                if (test(desired, available, newValue, i, N))
                    return true;
            }
            return false;
        }
        static bool test(int[] desired, int[][] available, int N)
        {
            // Non-recursive helper
            for (var i=0; i<N; ++i)
            {
                if (test(desired, available, new int[] { 0, 0, 0 }, i, N))
                    return true;
            }
            return false;
        }

        static void Main(string[] args)
        {
            // Read T
            int T = Convert.ToInt32(Console.ReadLine());

            bool[] results = new bool[T];

            // Read and test
            for (var i=0; i<T; i++)
            {
                int[] desired = Console.ReadLine().Split(' ').Select(x => int.Parse(x)).ToArray();
                int N = Convert.ToInt32(Console.ReadLine());
                int[][] available = new int[N][];
                for (var j=0; j<N; ++j)
                {
                    available[j] = Console.ReadLine().Split(' ').Select(x => int.Parse(x)).ToArray();
                }

                results[i] = test(desired, available, N);
            }

            // Output results
            for (var i = 0; i < T; i++)
            {
                Console.WriteLine("Case #{0}: {1}", i + 1, results[i] ? "yes" : "no");
            }
        }
    }
}

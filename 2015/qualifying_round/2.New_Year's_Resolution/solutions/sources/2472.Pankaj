
import java.io.BufferedReader;
import java.io.InputStreamReader;


public class Hackercup2 {

    static boolean isavailable = false;
    static int counter = -1;
static int cumulative[][] = new int[5000000][3];
    static int newyearesoltion(int arr[][], int n, int cumulative[][]) {
        //printf("\ncounter:%d",counter);

        int q = 0;
        if (n == 0) {
            return arr[0][0];
        }
        q = newyearesoltion(arr, n - 1, cumulative);
        cumulative[++counter][0] = q;
        cumulative[counter][1] = arr[n - 1][1];

        cumulative[counter][2] = arr[n - 1][2];
//printf("\nstart %d %d %d end\n",cumulative[counter][0],cumulative[counter][1],cumulative[counter][2]);
//place[counter++]=n-1;

        int i = 0, tmp = counter;
        for (i = 0; i <= tmp; ++i) {
            cumulative[++counter][0] = cumulative[i][0] + arr[n][0];
            cumulative[counter][1] = cumulative[i][1] + arr[n][1];
            cumulative[counter][2] = cumulative[i][2] + arr[n][2];

    //place[counter++]=
//    printf("\n%d %d n=%d",counter,cumulative[counter],n);
        }
        //printf("\ncounter=%d", counter);
        return arr[n][0];
    }

    public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int test = Integer.parseInt(reader.readLine());
        
        int k = 1;
        int require[] = new int[3];
        while ((k) <= test) {

            counter = -1;
            isavailable = false;
            String side[] = reader.readLine().split(" ");

            int i = 0, j = 0,t;

            require[0] = Integer.parseInt(side[0]);
            require[1] = Integer.parseInt(side[1]);
            require[2] = Integer.parseInt(side[2]);
        
            int count = Integer.parseInt(reader.readLine());

            int arr[][] = new int[count][3];
            for (i = 0; i < count; ++i) {
                side = reader.readLine().split(" ");
                arr[i][0] = Integer.parseInt(side[0]);
                arr[i][1] = Integer.parseInt(side[1]);
                arr[i][2] = Integer.parseInt(side[2]);

            }
            int q = newyearesoltion(arr, count - 1, cumulative);
            cumulative[++counter][0] = q;
            cumulative[counter][1] = arr[count - 1][1];

            cumulative[counter][2] = arr[count - 1][2];
            
        for(t=0; t<=counter; ++t)
        {//printf("\nt start %d %d %d\n",cumulative[t][0],cumulative[t][1],cumulative[t][2]);
            if((cumulative[t][0]==require[0])&&(cumulative[t][1]==require[1])&&(cumulative[t][2]==require[2]))
                isavailable=true;
        }
            
            if (isavailable==true) {
                System.out.println("Case #" + k + ": " + "yes");
            } else {
                System.out.println("Case #" + k + ": " + "no");
            }
            k++;
        }

    }
}

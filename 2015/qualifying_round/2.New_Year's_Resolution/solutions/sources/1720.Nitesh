import java.io.InputStreamReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		NewYearsRevolution solver = new NewYearsRevolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class NewYearsRevolution {
    public void solve(int testNumber, InputReader in, OutputWriter out) {
        int gp=in.nextInt(),gc=in.nextInt(),gf=in.nextInt();
        int n=in.nextInt();
        int ar[][]=new int [n][3];
        for(int i=0;i<n;i++){
            ar[i][0]=in.nextInt();
            ar[i][1]=in.nextInt();
            ar[i][2]=in.nextInt();
        }
        boolean st=false;
        for(int i=0;i<(1<<n);i++){
            int p=0,c=0,f=0;
            for(int j=0;j<n;j++){
                if((i&(1<<j))>0){
                    p+=ar[j][0];
                    c+=ar[j][1];
                    f+=ar[j][2];
                }
            }
            if(p==gp&&c==gc&&f==gf){
                st=true;break;
            }
        }
        if(st){
            out.printLine("Case #"+testNumber+": "+"yes");
        }
        else out.printLine("Case #"+testNumber+": "+"no");
    }
}

class InputReader {
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }
    public String next()
    {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }
    public int nextInt()
    {
        return Integer.parseInt(next());
    }
}

class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

    public void print(Object...objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void printLine(Object...objects) {
            print(objects);
            writer.println();
        }

        public void close() {
            writer.close();
        }
}


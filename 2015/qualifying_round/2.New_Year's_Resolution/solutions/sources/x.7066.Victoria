#include <iostream>
#include <fstream>
#include <string>
#include <vector>


struct triple{
    int first;
    int second; 
    int third;
    
    triple(int a, int b, int c){first = a; second = b; third = c;}
    triple operator=(const triple atriple){first = atriple.first; second = atriple.second; third = atriple.third;}
    bool operator==(const triple atriple)const{
        if(first==atriple.first && second==atriple.second && third==atriple.third)
            return true;
        else
            return false;
    }
    
};

bool ifSumF(std::vector<triple> triples, int n, int sum);
bool ifSumS(std::vector<triple> triples, int n, int sum);
bool ifSumT(std::vector<triple> triples, int n, int sum);
triple parseStringtoTrip(std::string input);

int main() {
    std::ifstream input;
    input.open("test.txt");
    
    std::ofstream output;
    output.open("output.txt");
    
    std::string temp;
    getline(input, temp);
    int numCases = stoi(temp);
    int iter = 1;
    
    while(numCases != 0){
        std::string goal;
        getline(input, goal); 
        triple goals = parseStringtoTrip(goal); 
        
        std::string temp; 
        getline(input, temp);
        int numFood = stoi(temp); 
        
        std::vector<triple> foods;
        while(numFood != 0){
            getline(input, temp);  
            triple tempTrip = parseStringtoTrip(temp);
            foods.push_back(tempTrip);
            
            numFood--;
        }
        //comparing time!!
    
        if(ifSumF(foods, foods.size(), goals.first) == true 
            && ifSumS(foods, foods.size(), goals.second) == true 
            && ifSumT(foods, foods.size(), goals.third) == true)
            output<<"Case #"<<iter<<": yes"<<'\n';
        else
            output<<"Case #"<<iter<<": no"<<'\n';
        
        
        numCases--;
        iter++;
    }
}


//subset sum algorithms
bool ifSumF(std::vector<triple> triples, int n, int sum){ 
    //base cases
    if(sum == 0)
        return true;
    if (n == 0 && sum != 0)
        return false;
    
    if (triples[n-1].first > sum)
        return ifSumF(triples, n-1, sum);
    return ifSumF(triples, n-1, sum) || ifSumF(triples, n-1, sum-triples[n-1].first);
}  

bool ifSumS(std::vector<triple> triples, int n, int sum){ 
    //base cases
    if(sum == 0)
        return true;
    if (n == 0 && sum != 0)
        return false;
    
    if (triples[n-1].second > sum)
        return ifSumS(triples, n-1, sum);
    return ifSumS(triples, n-1, sum) || ifSumS(triples, n-1, sum-triples[n-1].second);
} 
bool ifSumT(std::vector<triple> triples, int n, int sum){ 
    //base cases
    if(sum == 0){
        return true;
    }
    if (n == 0 && sum != 0){
        return false;
    }
    if (triples[n-1].third > sum)
        return ifSumT(triples, n-1, sum);
    return ifSumT(triples, n-1, sum) || ifSumT(triples, n-1, sum-triples[n-1].third);
} 

triple parseStringtoTrip(std::string input){
    int start = 0;
    std::vector<int> ints;
    std::string temp; 
    
    for(int i = 0; i<input.length(); i++){
        if(input[i] == ' '){
            temp = input.substr(start,i-start);
            ints.push_back(stoi(temp));
            start = i + 1;
        }
    }
    temp = input.substr(start, (input.length()-start));
    ints.push_back(stoi(temp)); 
    
    triple atrip(ints[0], ints[1], ints[2]);
    
    return atrip;
}
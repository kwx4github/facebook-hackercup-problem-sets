//	Facebook Hacker Cup 2015
//	Qualification Round
//	Problem B
//	New Year's Resolution (30 points / 100)

const bool debug=true;

#include <iostream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cstring>
#include <cstdlib>
#include <cstdarg>
#include <utility>
#include <cassert>
#include <ctime>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <deque>
#include <queue>
#include <stack>

#define TIMES(n) for (int i=0; i<(n); ++i)
#define FOR(i,s,t) for (int (i)=(s); (i)<=(t); ++(i))
#define RESET(a) memset((a), 0, sizeof((a)))
#define P(x, ...) printf((x), ##__VA_ARGS__)
#define D(x, ...) if (debug) printf((x), ##__VA_ARGS__)
#define MP(x, y) make_pair((x), (y))

const int INF = 0x7F7F7F7F; // or (unsigned)(-1)>>1
int caseI = 0, caseD = -1;

using namespace std;

//void P(char *f, ...) {va_list v; va_start(v, f); vprintf(f, v); va_end(v);}
//void D(char *f, ...) {if (!debug) return; va_list v; va_start(v, f); vprintf(f, v); va_end(v);}


/*

Sample Input:



Sample Output:


*/

const int maxN = 1005, maxM = 1005;

typedef pair<int, int> ii;
typedef vector<vector<ii> > graph;

typedef struct Food {
	int p, c, f;

	Food() {}
	Food(int pp, int cc, int ff) : p(pp), c(cc), f(ff) {}

	bool operator<(const Food &fd) const { return p < fd.p || c < fd.c || f < fd.f; }
};

class Qs {
	int n, m, k;
	int gp, gc, gf;
	map<Food, bool> dp;
	Food food[maxN];

public:
	Qs() {
		
	}

	bool input() {

		if (scanf("%d%d%d", &gp, &gc, &gf) != 3)
			return false;

		scanf("%d", &n);

		TIMES(n)
			scanf("%d%d%d", &food[i].p, &food[i].c, &food[i].f);
		



		return true;
	}

	bool isPossible(int idx, Food fd) {
		if (dp.count(fd))
			return dp[fd];
		int p = fd.p;
		int c = fd.c;
		int f = fd.f;
		if (p < 0 || c < 0 || f < 0)
			return false;

		FOR(i, idx, n-1)
			if (isPossible(i+1, Food(p - food[i].p, c - food[i].c, f - food[i].f)))
				return dp[fd] = true;

		return dp[fd] = false;
	}

	void solve() {

		dp.clear();
		dp[Food(0, 0, 0)] = true;

		bool result = isPossible(0, Food(gp, gc, gf));

		printf("Case #%d: %s\n", caseI, result ? "yes" : "no");


	}
};

void pre_process() {
	//freopen("A.in", "r", stdin);
	//freopen("A.out", "w", stdout);
	scanf("%d%*c", &caseD);
}

int main() {
	Qs *p = new Qs;
	pre_process();
	while ((++caseI|1) && caseD-- && p->input()) {
		p->solve();
		delete p;
		p = new Qs;
	}
	delete p;
	return 0;
}

#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

struct Nutrients
{
    Nutrients()
        : protein(0)
        , carb(0)
        , fat(0)
    {}
    
    Nutrients(int protein, int carb, int fat)
        : protein(protein)
        , carb(carb)
        , fat(fat)
    {}
    
    Nutrients& operator+=(const Nutrients& other)
    {
        protein += other.protein;
        carb += other.carb;
        fat += other.fat;
    }
    
    Nutrients& operator-=(const Nutrients& other)
    {
        protein -= other.protein;
        carb -= other.carb;
        fat -= other.fat;
    }
    
    Nutrients operator-(const Nutrients& other)
    {
        Nutrients ret = *this;
        ret -= other;
        return ret;
    }
    
    bool operator==(const Nutrients& other)
    {
        return (protein == other.protein) && (carb == other.carb) && (fat == other.fat);
    }
    
    int protein;
    int carb;
    int fat;
};

Nutrients read()
{
    Nutrients ret;
    cin >> ret.protein >> ret.carb >> ret.fat;
    return ret;
}

template <typename ForwardIterator>
bool caneat(Nutrients required, ForwardIterator foodsBegin, ForwardIterator foodsEnd)
{
    if(foodsBegin == foodsEnd)
    {
        return required == Nutrients();
    }
    
    Nutrients afterEating = required - *foodsBegin;
    return caneat(required, foodsBegin + 1, foodsEnd) || caneat(afterEating, foodsBegin + 1, foodsEnd);
}

int main()
{
    int t;
    cin >> t;
    for(int lp=1;lp<=t;++lp)
    {
        auto required = read();
        int n;
        cin >> n;
        vector<Nutrients> foods(n);
        for(auto&& food : foods)
        {
            food = read();
        }
        
        bool resp = caneat(required, foods.begin(), foods.end());
        cout << "Case #" << lp << ": " << (resp ? "yes" : "no") << "\n";
    }
    return 0;
}
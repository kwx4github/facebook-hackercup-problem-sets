#include <bits/stdc++.h>
#include <string>
using namespace std;
//defines-general
typedef long long ll;
typedef long double ld;
#define to(a) typeof(a)
#define fill(a,val) memset(a,val,sizeof(a))
#define repi(i,a,b) for(typeof(b) i = a;i<b;i++)
//defines-pair
typedef pair<int, int> pii;
typedef pair<long long, long long> pll;
#define ff first
#define ss second
#define mp make_pair
//defines-vector
typedef vector<int> vi;
typedef vector<long long> vll;
#define all(vec) vec.begin(),vec.end()
#define tr(vec,it) for(typeof(vec.begin()) it = vec.begin();it!=vec.end();++it)
#define pb push_back
#define contains(vec,x) (find(vec.begin(),vec.end(),x)!=vec.end())
#define MOD 1000000007
int inline absolute1(int a)
{
    if(a>0)
        return a;
    else
        return -a;
}
// increasing order for pairs
bool compareF(pii a,pii b)
{
    if(a.first!=b.first)
        return a.first<b.first;
    return a.second<b.second;
}
struct diet{
    int p,c,f;
};
int main()
{
   freopen("new_years_resolution.txt","r",stdin);
   freopen("New_Year_Resolution_Ans.txt","w",stdout);
   int t;
   int n;
   
   diet dn[21];
   cin>>t;
   repi(i,1,t+1)
   {
        diet reqd;
        cin>>reqd.p>>reqd.c>>reqd.f;
        cin>>n;
        int till=0;
        bool flag=0;
        repi(j,0,n)
        {
            cin>>dn[j].p>>dn[j].c>>dn[j].f;
            till=till<<1;
            till=till|1;
        }
        int mask=0;

        for(mask=1;mask<=till;mask++)
        {
            diet cur;
            cur.p=cur.f=cur.c=0;
            for(int j=0;j<n;j++)
            {
                 if( (1<<j)&mask )
                {
                    cur.p += dn[j].p;
                    cur.f += dn[j].f;
                    cur.c += dn[j].c;
                }
            }
            if((cur.p==reqd.p)&&(cur.f==reqd.f)&&(cur.c==reqd.c))
            {
                cout<<"Case #"<<i<<":"<<" yes"<<endl;
                flag=1;
                break;
            }
        }
        if(!flag)
        {
            cout<<"Case #"<<i<<":"<<" no"<<endl;
        }

   }
   return 0;
}
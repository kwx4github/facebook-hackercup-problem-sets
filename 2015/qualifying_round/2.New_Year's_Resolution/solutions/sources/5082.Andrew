#Polynomial time approximate algorithm
def sum_problem(nums, sum):
    P = 32
    c = 2**-P
    #initialize a list S to contain one element 0.
    S = [0]
    N = len(nums)

    #for each i from 1 to N do
    for i in range(N):
        #let T be a list consisting of xi + y, for all y in S
        T = [nums[i] + y for y in S]
        #let U be the union of T and S
        U = T + S
        #sort U
        U.sort()
        #make S empty 
        S = []
        #let y be the smallest element of U
        y = min(U)
        #add y to S
        S.append(y)
        #for each element z of U in increasing order do
        for z in U:
            #trim the list by eliminating numbers close to one another
            #and throw out elements greater than s
            #if y + cs/N < z ? s, set y = z and add z to S
            if y + c * sum / N < z and z <= sum:
                y = z
                S.append(z)
    #if S contains a number between (1 ? c)s and s, output yes, otherwise no
    return any(s for s in S if (1 - c) * sum <= s and s <= sum)

#dynamic algorithm
def sum_problem_dyn(nums, sum, cache):
    N = len(nums)
    for i in range(N):
        sum_sub = sum - nums[i]
        if sum_sub < 0:
            continue
        if sum_sub == 0:
            return True

        nums_sub = list(nums)
        nums_sub.remove(nums[i])

        #skip variations that we are already processing
        nums_sub.sort()
        nums_hash = hash(tuple(nums_sub))
        if nums_hash in cache:
            continue
        else:
            cache.add(nums_hash)

        if sum_problem_dyn(nums_sub, sum_sub, cache):
            return True

    return False

f = open('C:\\temp\\new_years_resolution.txt')
out = open('C:\\temp\\new_years_resolution_output.txt', 'w')
T = int(f.readline().strip())

for t in range(1, T + 1):    
    sums = [int(i) for i in f.readline().strip().split(' ')]
    sum = sums[0] * 10**8 + sums[1] * 10**4 + sums[2]
    N = int(f.readline().strip())
    nums = []
    for n in range(N):
        num = [int(i) for i in f.readline().strip().split(' ')]
        nums.append(num[0] * 10**8 + num[1] * 10**4 + num[2])
    
    result = "Case #{0}: {1}".format(t, "yes" if sum_problem_dyn(nums, sum, set()) else "no")
    print result

    result = "Case #{0}: {1}".format(t, "yes" if sum_problem(nums, sum) else "no")
    out.write(result + "\n")
    print result
out.close()








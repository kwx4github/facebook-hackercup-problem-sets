// A Dynamic Programming solution for subset sum problem
#include <bits/stdc++.h>
using namespace std;
  int s1[100],s2[100],s3[100];
// Returns true if there is a subset of set[] with sun equal to given sum

    bool subset[1000][1000];
bool isSubsetSum(int set1[], int n, int sum)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
for(int i=0;i<1000;i++)
    for(int j=0;j<1000;j++)
    subset[i][j]=0;

    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
      subset[0][i] = true;

    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
      subset[i][0] = false;

     // Fill the subset table in botton up manner
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set1[j-1])
           subset[i][j] = subset[i][j] || subset[i - set1[j-1]][j-1];
       }
     }
/*
    // uncomment this code to print table
     for (int i = 0; i <= sum; i++)
     {
       for (int j = 0; j <= n; j++)
          printf ("%4d", subset[i][j]);
       printf("\n");
     }*/

     return subset[sum][n];
}
int h1[100000],h2[1000000],h3[1000000],s4[10000];
// Driver program to test above function
int main()
{
 freopen("kk.in", "r", stdin);
freopen("kk.out", "w", stdout);
int t,cs=0;
cin>>t;
while(t--)
{


  int n;

  int a1,a2,a3,i;
  cin>>a1>>a2>>a3;
  cin>>n;

  for(i=0;i<n;i++)
  {


    cin>>s1[i]>>s2[i]>>s3[i];
    s4[i]=s1[i]+s2[i]+s3[i];
  /*
    if(h1[s1[i]])
    {
        s1[i]=0;
    }

    else if(h1[s1[i]]==0)
    {
        h1[s1[i]]++;
    }

    if(h2[s2[i]])
    {
        s2[i]=0;
    }
    else if(h2[s2[i]]==0)
    {
        h2[s2[i]]++;
    }

    if(h3[s3[i]])
    {
        s3[i]=0;
    }
    else if(h3[s3[i]]==0)
    {
        h3[s3[i]]++;
    }
*/
  }
printf("Case #%d: ",++cs);

  if (isSubsetSum(s4, n, a1+a2+a3) == true)
     printf("yes");
  else
     printf("no");



     cout<<endl;

}
return 0;
}


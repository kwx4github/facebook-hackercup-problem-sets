#!/usr/bin/python
'''
Facebook Hacker Cup 2015
Qualification Round
New Year's Resolution
2015-01-09
Tyrus Tenneson
'''

import fileinput
import operator

def search(goal, foods):
    '''
    Search tree choices are whether you eat next food.  Worst case
    will be 2^len(foods) steps.  Since that max is 20, this is ok.

    Returns True if you can hit goal.
    '''
    if goal == (0, 0, 0):
        return True
    if not foods or goal[0] < 0 or goal[1] < 0 or goal[2] < 0:
        # Don't keep eating if you're already fat.
        return False
    new_goal = tuple(map(operator.sub, goal, foods[0]))
    rest = foods[1:]
    return search(goal, rest) or search(new_goal, rest)

def solve(case):
    goal, foods = case
    if search(goal, foods):
        return 'yes'
    return 'no'

def main():
    lines = [l for l in fileinput.input()]
    T = int(lines[0])
    lines = lines[1:]
    cases = []
    i = 0
    while i < len(lines):
        goal = tuple(map(int, lines[i].split()))
        N = int(lines[i+1])
        foods = []
        for f in range(N):
            foods.append(tuple(map(int, lines[i+2+f].split())))
        cases.append((goal, tuple(foods)))
        i += 2 + f + 1
    for idx, case in enumerate(cases):
        print "Case #{}: {}".format(idx + 1, solve(case))

if __name__ == "__main__":
    main()

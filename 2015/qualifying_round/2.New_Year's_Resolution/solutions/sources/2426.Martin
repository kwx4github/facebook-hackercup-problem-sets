#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cmath>
#include <limits>
#include <string>
#include <cstring> // memset
#include <iostream> // cin, cout
#include <fstream>

#include <sstream> // topcoder testcase

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;

#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define REP(i, a, b) for (int i = int(a); i < int(b); i++) // a to b, and variable i is local!

#define DEBUG(x) do { std::cerr << #x << ": " << x << std::endl; } while (0)

int main()
{
    ifstream arq(getenv("INPUT"));
    cin.rdbuf(arq.rdbuf());
    
    ofstream brq(getenv("OUTPUT"));
    cout.rdbuf(brq.rdbuf());
    
    // Number of Testcases
    int T;
    cin >> T;
    
    for(int i=0;i<T;i++){
        
        int g[3];
        int p[20][3];
        int n;
        
        // reading input
        cin >> g[0] >> g[1] >> g[2];
        cin >> n;
        for(int i=0;i<n;i++){
            cin >> p[i][0] >> p[i][1] >> p[i][2];
        }
        
        bool possible = false;
        
        // iterating over all subsets
        for(int i=0;i<1<<20;i++){
            int test[3] = {g[0],g[1],g[2]};
            for(int j=0;j<n;j++){
                if((i & 1 << j) != 0){
                    test[0]-=p[j][0];
                    test[1]-=p[j][1];
                    test[2]-=p[j][2];
                }
            }
            
            if(test[0]==0 && test[1]==0 && test[2]==0){
                possible = true;
                break;
            }
        }
        cout << "Case #" << (i+1) << ": " <<  (possible? "yes":"no")<< endl;
    }
    return 0;
}

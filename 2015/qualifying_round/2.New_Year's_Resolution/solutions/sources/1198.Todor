import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

public class QU2 {

	private final static String INPUT_FILE_NAME = "input.in";
	private final static String OUTPUT_FILE_NAME = "output.out";

	private String solveCase() throws Exception {
		int prots, carbs, fats;
		prots = readNextUInt();
		carbs = readNextUInt();
		fats = readNextUInt();
		int n = readNextUInt();
		int p, c, f;
		ArrayList<Object> can = new ArrayList<Object>();
		can.add(new int[] { 0, 0, 0 });
		boolean res = false;
		for (int i = 0; i < n; ++i) {
			p = readNextUInt();
			c = readNextUInt();
			f = readNextUInt();
			ArrayList<Object> forAdd = new ArrayList<Object>();
			for (Object o : can) {
				int[] realO = (int[]) o;
				int pp = realO[0] + p;
				int cc = realO[1] + c;
				int ff = realO[2] + f;
				if (pp == prots && cc == carbs && ff == fats) {
					res = true;
				}
				if (pp <= prots && cc <= carbs && ff <= fats) {
					forAdd.add(new int[] { pp, cc, ff });
				}
			}
			can.addAll(forAdd);
		}
		return res ? "yes" : "no";
	}

	private void solve() throws Exception {
		int tests = readNextUInt();
		for (int test = 1; test <= tests; test++) {
			write(String.format("Case #%d: %s\n", test, solveCase()));
		}
	}

	private InputStream inputStream;
	private BufferedInputStream bufferedInputStream;

	private OutputStream outputStream;
	private BufferedOutputStream bufferedOutputStream;

	protected QU2() throws Exception {
		File outputFile = new File(OUTPUT_FILE_NAME);
		outputFile.createNewFile();
		outputStream = new FileOutputStream(outputFile);
		bufferedOutputStream = new BufferedOutputStream(outputStream);
		inputStream = new FileInputStream(INPUT_FILE_NAME);
		bufferedInputStream = new BufferedInputStream(inputStream);
	}

	public static void main(String[] args) throws Exception {
		QU2 solver = new QU2();
		solver.solve();
		solver.closeFiles();

	}

	private void closeFiles() {
		Closeable[] streams = new Closeable[4];
		streams[0] = bufferedInputStream;
		streams[1] = inputStream;
		streams[2] = bufferedOutputStream;
		streams[3] = outputStream;
		for (int i = 0; i < 4; ++i) {
			try {
				streams[i].close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private int readUInt() throws Exception {
		int c;
		int res = 0;
		boolean hasNum = false;
		while ((c = bufferedInputStream.read()) >= '0' && c <= '9') {
			hasNum = true;
			res *= 10;
			res += c - '0';
		}
		if (!hasNum && c == -1) {
			throw new Exception("EOF");
		}
		return hasNum ? res : -1;
	}

	protected int readNextUInt() throws Exception {
		int r;
		while ((r = readUInt()) == -1) {
		}
		return r;
	}

	protected void write(String str) throws Exception {
		bufferedOutputStream.write(str.getBytes());
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	private String readStr() throws Exception {
		StringBuilder strB = new StringBuilder();
		int c;
		boolean hasChars = false;
		while (((c = bufferedInputStream.read()) >= 'a' && c <= 'z')
				|| (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
			hasChars = true;
			strB.append((char) c);
		}
		if (!hasChars && c == -1) {
			throw new Exception("EOF");
		}
		return hasChars ? strB.toString() : null;
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	protected String readNextStr() throws Exception {
		String s;
		while ((s = readStr()) == null) {
		}
		return s;
	}

}

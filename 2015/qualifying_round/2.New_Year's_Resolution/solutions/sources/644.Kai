#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#include <vector>
#include <utility>
#include <set>
#include <map>
#include <queue>
#include <functional>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
using namespace std;

template<typename T>inline string to_str(const T& v) {
    ostringstream os; os << v; return os.str();
}
template<typename T>inline T to_obj(const string& v) {
    istringstream is(v); T r; is>>r; return r;
}
template<class T>inline int cMin(T& a, T b) {return b<a ? a=b,1 : 0;}
template<class T>inline int cMax(T& a, T b) {return a<b ? a=b,1 : 0;}

#define CLR(A,v) memset(A, v, sizeof(A))
#define MP(a,b)  make_pair(a, b)
#define F0(i, n) for(int i=0; i<(n); ++i)
#define F1(i, n) for(int i=1; i<=(n); ++i)

const int NN = 21;
int  N;
int  Gp, Gc, Gf;
int  P[NN], C[NN], F[NN];
int  PMask[1<<NN]={0}, CMask[1<<NN]={0}, FMask[1<<NN]={0};
int  PP[1<<NN]={0};

int isOK() {
    PMask[0] = CMask[0] = FMask[0] = 0;
    for(int bit=1, bitEnd=1<<N; bit<bitEnd; ++bit) {
        int i = PP[bit & (bit^(bit - 1))];
        int k = bit - (1<<i);
        PMask[bit] = PMask[k] + P[i];
        CMask[bit] = CMask[k] + C[i];
        FMask[bit] = FMask[k] + F[i];
        if (PMask[bit]==Gp && CMask[bit]==Gc && FMask[bit]==Gf)
            return 1;
    }
    return 0;
}

int main(int argc, char *argv[]) {
    F0(i, NN) PP[1<<i] = i;
    int caseNum=0;
    scanf("%d", &caseNum);
    F1(caseIdx, caseNum) {
        scanf("%d%d%d", &Gp, &Gc, &Gf);
        scanf("%d", &N);
        F0(i, N) scanf("%d%d%d", P+i, C+i, F+i);
        printf("Case #%d: %s\n", caseIdx, isOK() ? "yes" : "no");
    }
    return 0;
}

def getComb(headidx, head, xs, constraint):
    if sum(head) + sum(x[1] for x in xs) < constraint:
        return [], []
    combs = []
    idxs = []
    if len(xs) == 0:
        return[], []
    for i in range(len(xs)):
        if sum(head) + xs[i][1] == constraint:
            combs.append(head + [xs[i][1]])
            idxs.append(headidx + [xs[i][0]])
        elif sum(head) + xs[i][1] < constraint:
            idxtemp, combtemp = getComb(headidx + [xs[i][0]], head + [xs[i][1]], xs[i+1:], constraint)
            idxs.extend(idxtemp)
            combs.extend(combtemp)
    return idxs, combs

def parseInput(lns):
    allfoods = []
    foods = []
    constraint = []
    isfood = False
    nfoods = 0
    for ln in lns[1:]:
        if ln.strip() == '': continue
        if ' ' not in ln.strip():
            nfoods = int(ln.strip())
            isfood = True
            foods = []
        elif isfood:
            food = [int(nut) for nut in ln.strip().split(' ')]
            foods.append(food)
            if len(foods) == nfoods:
                isfood = False
                allfoods.append(foods)
        else:
            constraint.append([int(nut) for nut in ln.strip().split(' ')])
    return allfoods, constraint

def stringifylist(xs):
    xlist = list(xs)
    xlist.sort()
    return '#'.join(str(x) for x in xlist)

def ispossible(foods, constraints):
    choices = {}
    for i in range(3):
        nutrients = [(idx, food[i]) for idx, food in enumerate(foods)]
        constraint = constraints[i]
        indices, combs = getComb([], [], nutrients, constraint)
        choices[i] = set([stringifylist(idx) for idx in indices])
    return len(choices[0].intersection(choices[1]).intersection(choices[2])) > 0

if __name__ == '__main__':
    allfoods, allconstraints = parseInput(open('new_years_resolution.txt').readlines())
    for i in range(len(allfoods)):
        ans_bool = ispossible(allfoods[i], allconstraints[i])
        ans = 'yes' if ans_bool else 'no'
        print 'Case #' + str(i+1) + ': ' + ans
#    idx,dt = getComb([],[], [(0,1), (1,2), (2,3), (3,4), (4,5)], 5)
#    print [stringifylist(d) for d in dt]

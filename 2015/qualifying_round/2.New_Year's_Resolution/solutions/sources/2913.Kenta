class MainManager
  def self.execute
    test_cases = gets.to_i
    test_cases.times do |i|
      can_eat = TestCaseManager.execute
      puts "Case ##{i+1}: #{can_eat ? 'yes' : 'no'}"
    end
  end
end

class TestCaseManager
  def self.execute
    target_pcf = gets.chomp.split(" ").map{|i| i.to_i}
    foods_count = gets.to_i
    foods = []
    foods_count.times do
      foods << gets.chomp.split(" ").map{|i| i.to_i}
    end
    Calc.new(target_pcf, foods).can_eat?
  end
end

class Calc
  def initialize(target, foods)
    @target = target
    @foods = foods
  end

  def can_eat?
    @foods.size.times do |i|
      can_go_next = false
      @foods.combination(i+1) do |combination|
        result = add_combination combination
        return true if @target == result
        can_go_next = true if is_smaller_than_1000?(result)
      end

      return false unless can_go_next
    end
    false
  end

  private
  def add_combination(combination)
    combination.reduce([0,0,0]){|n, k| [n[0] + k[0], n[1] + k[1], n[2] + k[2]]}
  end

  def is_smaller_than_1000?(result)
    result.all?{|i| i <= 1000}
  end
end

MainManager.execute


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;


public class NewYearRes {

    public static final int TMIN=1;
    public static final int TMAX=20;
    public static final int NMIN=1;
    public static final int NMAX=20;
    public static final int MIN_WANTED_MACRONUTRIENTS=10;
    public static final int MAX_WANTED_MACRONUTRIENTS=1000;
    public static final int MIN_FOOD_MACRONUTRIENTS=10;
    public static final int MAX_FOOD_MACRONUTRIENTS=1000;
    public static final int NUMBER_MACRONUTRIENTS=3;

    public static final int PROTEIN=0;
    public static final int CARBOHYDRATES=1;
    public static final int FAT=2;

    private static int numberOfTestCases;
    private static Integer[] wanted;
    private static boolean[] results;

    public static void readInput() throws Exception {
        BufferedReader br = new BufferedReader( new InputStreamReader(System.in));
        String s = br.readLine();

        if(!isTOk(Integer.valueOf(s))){
            throw new Exception("The number of test cases is invalid");
        }

        numberOfTestCases=Integer.valueOf(s);
        results = new boolean[numberOfTestCases];
        int i=0;

        while(i<numberOfTestCases){
            String[] values = br.readLine().split(" ");

            for(int j=0;j<NUMBER_MACRONUTRIENTS;j++)
                wanted[j]=Integer.valueOf(values[j]);

            if(!isWantedMacronutrientsOk(wanted))
                throw new Exception("The amount of macronutrients is invalid");

            int numberOfFood=Integer.valueOf(br.readLine());

            if(!isnumberOfFoodOk(numberOfFood))
                throw new Exception("The amount of food is invalid");

            Food[] food = new Food[numberOfFood];
         

            for(int k=0;k<numberOfFood;k++){
                String[] foodValues = br.readLine().split(" ");
                food[k] = new Food();
                food[k].macronutrients[PROTEIN]=Integer.valueOf(foodValues[PROTEIN]);
                food[k].macronutrients[CARBOHYDRATES]=Integer.valueOf(foodValues[CARBOHYDRATES]);
                food[k].macronutrients[FAT]=Integer.valueOf(foodValues[FAT]);
            }

            checkValues(food);
            compute(food,i);
            
            i++;
        }

    }

    public static boolean subSetSumRecur(int [] mySet, int n, int goal, ArrayList<Integer> index){
        if (goal ==0)
            return true;

        if ((goal<0)|(n<0))
            return false;

        if (subSetSumRecur(mySet,n-1,goal - mySet[n],index)){
            index.add(n);
            return true;

        }
        return  (subSetSumRecur(mySet,n-1,goal,index));   
    }


    private static void compute(Food[] food, int n) {
        ArrayList<Integer> indexProtein = new ArrayList<>();
        ArrayList<Integer> indexCarbohydrates = new ArrayList<>();
        ArrayList<Integer> indexFat = new ArrayList<>();
        int[] protein = new int[food.length];
        int[] carbohydrates = new int[food.length];
        int[] fat = new int[food.length];
        
        for(int i=0;i<food.length;i++){
          protein[i]=food[i].macronutrients[PROTEIN];
          carbohydrates[i]=food[i].macronutrients[CARBOHYDRATES];
          fat[i]=food[i].macronutrients[FAT];
        }
       
       subSetSumRecur(protein, protein.length-1,wanted[PROTEIN],indexProtein);
       subSetSumRecur(carbohydrates, carbohydrates.length-1,wanted[CARBOHYDRATES],indexCarbohydrates);
       subSetSumRecur(fat, fat.length-1,wanted[FAT],indexFat);
       
       for(int index : indexProtein){
           if(indexCarbohydrates.contains(index) && indexFat.contains(index)){
               results[n]=true;
               return;
           }
       }

    }


    private static void checkValues(Food[] food) throws Exception {
        for(Food f : food)
            if(!isFoodMacronutrientsOk(f.macronutrients))
                throw new Exception("The amount of macronutrients is invalid");

    }


    private static boolean isnumberOfFoodOk(int number){
        return NMIN <= number && NMAX >= number;
    }

    private static boolean isTOk(int t){
        return (TMIN<=t && TMAX>=t);
    }

    private static boolean isWantedMacronutrientsOk(Integer[] values){
        boolean proteinOk=(values[PROTEIN] >= MIN_WANTED_MACRONUTRIENTS) && (values[PROTEIN] <= MAX_WANTED_MACRONUTRIENTS);
        boolean carhohydratesOk=(values[CARBOHYDRATES] >= MIN_WANTED_MACRONUTRIENTS) && (values[CARBOHYDRATES] <= MAX_WANTED_MACRONUTRIENTS);
        boolean fatOk=(values[FAT] >= MIN_WANTED_MACRONUTRIENTS) && (values[FAT] <= MAX_WANTED_MACRONUTRIENTS);

        return proteinOk && carhohydratesOk && fatOk;
    }

    private static boolean isFoodMacronutrientsOk(Integer[] values){
        boolean proteinOk=(values[PROTEIN] >= MIN_FOOD_MACRONUTRIENTS) && (values[PROTEIN] <= MAX_FOOD_MACRONUTRIENTS);
        boolean carhohydratesOk=(values[CARBOHYDRATES] >= MIN_FOOD_MACRONUTRIENTS) && (values[CARBOHYDRATES] <= MAX_FOOD_MACRONUTRIENTS);
        boolean fatOk=(values[FAT] >= MIN_FOOD_MACRONUTRIENTS) && (values[FAT] <= MAX_FOOD_MACRONUTRIENTS);

        return proteinOk && carhohydratesOk && fatOk;
    }

    public static void main(String[] args) throws Exception {
        wanted = new Integer[NUMBER_MACRONUTRIENTS];
        readInput();
        printResults();

    }

    public static void printResults() {
        for(int i=0;i<numberOfTestCases;i++){
            System.out.print("Case #"+(i+1)+": ");
            System.out.println(results[i] ? "yes" : "no");
        }
    }

    public static class Food {
        Integer[] macronutrients = new Integer[NUMBER_MACRONUTRIENTS];
    }

}

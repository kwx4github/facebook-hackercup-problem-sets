import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("newyear'sresolution.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NewYearsResolution solver = new NewYearsResolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class NewYearsResolution {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int []ingr = new int[3];
        for (int i = 0; i < 3; i++) {
            ingr[i] = in.nextInt();
        }
        int m = in.nextInt();
        int [][]value = new int[m][3];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 3; j++) {
                value[i][j] = in.nextInt();
            }
        }
        int len = 1 << m;
        for (int i = 0; i < len; i++) {
            int []ck = new int[3];
            for (int j = 0; j < m; j++) {
                if((i & (1 << j)) > 0){
                    ck[0] += value[j][0];
                    ck[1] += value[j][1];
                    ck[2] += value[j][2];
                    if(ck[0] > ingr[0] || ck[1] > ingr[1] || ck[2] > ingr[2])break;
                }
            }
            if (ck[0] == ingr[0] && ck[1] == ingr[1] && ck[2] == ingr[2]){
                out.print("Case #"+testNumber+": yes\n");
                return;
            }
        }
        out.print("Case #"+testNumber+": no\n");;
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }


}


import java.util.ArrayList;
import java.util.Arrays;
import java.io.BufferedReader;
//import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Resolution{
       static Integer p[];
       static Integer c[];
       static Integer f[];
       static int done;
       static int target,target1,target2;
        
    static void sum_up_recursive(ArrayList<Integer> numbers,ArrayList<Integer> numbers1,ArrayList<Integer> numbers2, int target, ArrayList<Integer> partial,ArrayList<Integer> partial1,ArrayList<Integer> partial2) {
       int s = 0;
       if(done==1)
           return;
       for (int x: partial) s += x;
       if (s == target)
       {
           if(check(partial1,partial2))
           {
               done=1;
               return;
           }
       }
       if (s >= target)
       {  return;}
       for(int i=0;i<numbers.size();i++) {
             ArrayList<Integer> remaining = new ArrayList<Integer>();
             ArrayList<Integer> remaining1 = new ArrayList<Integer>();
             ArrayList<Integer> remaining2= new ArrayList<Integer>();
             int n = numbers.get(i);
             int l = numbers1.get(i);
             int m = numbers2.get(i);
             for (int j=i+1; j<numbers.size();j++){
                 remaining.add(numbers.get(j));
                 remaining1.add(numbers1.get(j));
                 remaining2.add(numbers2.get(j));
             }
             ArrayList<Integer> partial_rec = new ArrayList<Integer>(partial);
             ArrayList<Integer> partial_rec1 = new ArrayList<Integer>(partial1);
             ArrayList<Integer> partial_rec2 = new ArrayList<Integer>(partial2);
             partial_rec.add(n);
             partial_rec1.add(l);
             partial_rec2.add(m);
             sum_up_recursive(remaining,remaining1,remaining2,target,partial_rec,partial_rec1,partial_rec2);
       }
    }
    static void sum_up(ArrayList<Integer> numbers,ArrayList<Integer> numbers1,ArrayList<Integer> numbers2, int target) {
        sum_up_recursive(numbers,numbers1,numbers2,target,new ArrayList<Integer>(),new ArrayList<Integer>(),new ArrayList<Integer>());
    }
    public static void main(String args[]) throws IOException{
//        Integer[] numbers = {3,3};
//        int target = 10;
//        sum_up(new ArrayList<Integer>(Arrays.asList(numbers)),target);
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //BufferedReader br = new BufferedReader(new FileReader("E:\\in.txt"));
        int foodn;
        String s[];
        int t= Integer.parseInt(br.readLine());
        for(int i=0;i<t;i++)
        {
            int temp=i+1;
            done=0;
            s=br.readLine().split(" ");
            target=Integer.parseInt(s[0]);
            target1=Integer.parseInt(s[1]);
            target2=Integer.parseInt(s[2]);
            foodn=Integer.parseInt(br.readLine());
            p=new Integer[foodn];
            c=new Integer[foodn];
            f=new Integer[foodn];
            for(int k=0;k<foodn;k++)
            {
                s=br.readLine().split(" ");
                p[k]=Integer.parseInt(s[0]);
                c[k]=Integer.parseInt(s[1]);
                f[k]=Integer.parseInt(s[2]);
            }
            sum_up(new ArrayList<Integer>(Arrays.asList(p)),new ArrayList<Integer>(Arrays.asList(c)),new ArrayList<Integer>(Arrays.asList(f)),target);
            if(done==1)
                System.out.println("Case #"+temp+": yes");
            else
            {
                System.out.println("Case #"+temp+": no");
            }
        }
    }

    private static boolean check(ArrayList<Integer> partial1,ArrayList<Integer> partial2) {
        int t1=0,t2=0;
       for(int x:partial1)
           t1+=x;
       for(int x:partial2)
           t2+=x;
       
        if(t1==target1 && t2==target2)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
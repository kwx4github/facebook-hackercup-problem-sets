import java.io.*;
import java.util.*;
public class qual_new {
    public static void main (String[] args) throws IOException {
        File file = new File(args[0]);;
        BufferedReader buffer = new BufferedReader(new FileReader(file));
        String line;

	int l = -2;
	int cases = -1;
	int [] target = new int [3];
	ArrayList <int[]> opts = new ArrayList<int[]>();
	int op = -1;
	int c = 1;

        while ((line = buffer.readLine()) != null) {
	    if (l == -2) {
		cases = Integer.parseInt(line);
	    } else if (l == -1) {
		target = makeIntArr(line);
	    } else if (l == 0) {
		op = Integer.parseInt(line);
	    } else if (l == op) {
		int[] t = makeIntArr(line);
		if (shadd(target,t)){
		    opts.add(t);
		}
		System.out.print("Case #"+c+":");
		parse (target,opts);
		c++;
		opts = new ArrayList<int[]>();
		l = -2;
	    } else {
	        int[] t = makeIntArr(line);
		if (shadd(target,t)){
		    opts.add(t);
		}
	    }
	    l++;
        }/*
	for (int j=0;j<20;j++){
	    for (int i=0; i<1048576; i++) {
		System.out.println(i);
	    }
	    }*/
    }

    public static int[] incBin (int[] bin) {
	bin[0]++;
	for (int i=0;i<bin.length;i++) {
	    if(bin[i] > 1){
		bin[i+1]++;
		bin[i]=0;
	    }
	}
	return bin;
    }

    public static boolean shadd (int[]t, int[]m) {
	for (int i=0;i<3;i++){
	    if (m[i] > t[i])
		return false;
	}
	return true;
    }

    public static void parse (int[] t, ArrayList<int[]> o) {
	//System.out.println(arrStr(t));
	//System.out.println(arrarrStr(o));
	/*Collections.sort(o, new Comparator<int[]>() {
		public int compare (int[]a, int[]b) {
		    if (a[0] < b[0])
			return -1;
		    else if (a[0] > b[0])
			return 1;
		    else {
			if (a[1] < b[1])
			    return -1;
			else if (a[1] > b[1])
			    return 1;
			else {
			    if (a[2] < b[2])
				return -1;
			    else if (a[2] > b[2])
				return 1;
			    else {
				return 0;
			    }
			}
		    }
		}
		});*/
	//System.out.println(arrarrStr(o));
	//System.out.println();

	//o is now sorted. now to find if there is a possible combination... how to?
	int [] bin = new int[o.size()];
	int c = (int) Math.pow(2,o.size());
	for (int i=0;i<c;i++) {
	    int [] sum = sumd(bin,o);
	    if (eq(sum,t)) {
		//System.out.println(arrStr(bin));
		System.out.println(" yes");
	        return;
	    }
	    if (i != c-1)
		bin = incBin(bin);
	}
	System.out.println(" no");
    }

    public static int[] sumd (int[] bin, ArrayList <int[]> opts) {
	int [] ret = new int [3];
	for (int i=0;i<bin.length;i++) {
	    if (bin[i]==1)
		ret = sum(ret,opts.get(i));
	}
	return ret;
    }

    public static int[] sum (int[]a, int[]b) {
	int[]ret = new int[a.length];
	for (int i =0;i<a.length;i++) {
	    ret[i] = a[i]+b[i];
	}
	return ret;
    }

    public static boolean eq (int[]a, int[]b){
	for(int i=0;i<a.length;i++){
	    if (a[i] != b[i])
		return false;
	}
	return true;
    }

    public static String arrStr (int[] p) {
	String ret = "[";
	for (int i = 0; i < p.length; i++) {
	    ret+=p[i]+",";
	}
	ret+="]";
	return ret;
    }

    public static String arrarrStr (ArrayList<int[]> p) {
	String ret = "[";
	for (int i=0;i<p.size();i++){
	    ret+=arrStr(p.get(i))+",";
	}
	ret+="]";
	return ret;
    }

    public static int[] makeIntArr (String s) {
	int [] ret = new int [3];
	String [] sp = s.split(" ");
	for (int i=0; i<3; i++) {
	    ret[i] = Integer.parseInt(sp[i]);
	}
	return ret;
    }
}

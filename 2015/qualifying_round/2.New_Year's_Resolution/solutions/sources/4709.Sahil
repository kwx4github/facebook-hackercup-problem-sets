#include<stdio.h>
#include<algorithm>

#define MAX 30

using namespace std;

typedef struct cal
{
    int prot,carb,fats;
}CAL;

int compare(CAL a, CAL b)
{
    return a.carb+a.fats+a.prot<b.carb+b.fats+b.prot;
}

int backtrack(CAL *food, int rprot, int rcarb, int rfats, int sumprot, int sumcarb, int sumfats, int last,int n)
{
    int i;

    if(last==n-1)
        return -1;

    for(i=last+1;i<n;i++)
    {
        sumprot+=food[i].prot;
        sumcarb+=food[i].carb;
        sumfats+=food[i].fats;

        //printf("%d %d %d\n",sumprot,sumcarb,sumfats);

        if((sumprot+sumcarb+sumfats)>(rprot+rcarb+rfats))
            return -1;

        if(sumprot==rprot&&sumcarb==rcarb&&sumfats==rfats)
            return 1;

        if(backtrack(food,rprot,rcarb,rfats,sumprot,sumcarb,sumfats,i,n)==1)
            return 1;

        sumprot-=food[i].prot;
        sumcarb-=food[i].carb;
        sumfats-=food[i].fats;
    }

    return -1;
}

int main()
{
    int test,n,tcase,rcarb,rprot,rfats,i;
    CAL food[MAX];

    scanf("%d",&test);

    for(tcase=1;tcase<=test;tcase++)
    {
        scanf("%d %d %d",&rprot,&rcarb,&rfats);

        scanf("%d",&n);

        for(i=0;i<n;i++)
            scanf("%d %d %d",&food[i].prot,&food[i].carb,&food[i].fats);

        sort(food,food+n,compare);

        if(backtrack(food,rprot,rcarb,rfats,0,0,0,-1,n)==1)
            printf("Case #%d: yes\n",tcase);

        else
            printf("Case #%d: no\n",tcase);
    }

    return 0;
}

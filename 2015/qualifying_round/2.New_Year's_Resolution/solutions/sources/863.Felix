#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

struct food
{
	int p,c,f;

	

};
vector <struct food> dinner;
int numFoods;
bool works;
int reqP, reqC, reqF;
struct food totalFood;
struct food operator + (const struct food &a, const struct food &b)
{
	struct food newFood={a.p+b.p,a.c+b.c,a.f+b.f};
	return newFood;
}
struct food operator - (const struct food &a, const struct food &b)
{
	struct food newFood={a.p-b.p,a.c-b.c,a.f-b.f};
	return newFood;
}
bool createCombination(char indexes[], int indexToStart,int currLevel,int maxLevel)
{
	for (int aa=indexToStart; aa<numFoods-(maxLevel+1-currLevel);aa++)
	{
		indexes[currLevel]=aa;
		if (currLevel==maxLevel)
		{
			struct food foodCounter={0,0,0};
			for (int a=1; a<=maxLevel; a++)
			{
				foodCounter=foodCounter+dinner[indexes[a]];
			}
			if ((foodCounter.c==reqC)&&(foodCounter.f==reqF)&&(foodCounter.p==reqP))
			{
				works=true;
				return true;
			}
			struct food other=totalFood-foodCounter;
			if ((other.c==reqC)&&(other.f==reqF)&&(other.p==reqP))
			{
				works=true;
				return true;
			}
		}
		else
		{
			createCombination(indexes,aa+1,currLevel+1,maxLevel);
			if (works) return true;
		}


	}
	if (works) return true;
	else return false;
}
bool foodlesser(const struct food &a, const struct food &b)
{
	if (a.p<b.p) return true;
	else return false;
}
int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int testCases;
	cin >> testCases;
	for (int a=0; a<testCases; a++)
	{
		printf("Case #%d: ",a+1);
	  works=false;
		
	    totalFood.p=0;
		totalFood.c=0;
		totalFood.f=0;
		long long int foodsUsed=0;
		
		cin >> reqP >> reqC >> reqF;

		cin >> numFoods;
		if (reqP+reqC+reqF==0)
		{
			printf("yes\n");
			continue;
		}
		char indexArray[22];
		dinner=vector<struct food> (numFoods);
		int qq,ww,ee;
		for (int aa=0;aa<numFoods;aa++)
		{
			cin >> dinner[aa].p;
			cin >> dinner[aa].c;
			cin >> dinner[aa].f;
			totalFood=totalFood+dinner[aa];
		}
		sort(dinner.begin(),dinner.end(),foodlesser);
		struct food miniCounter={0,0,0};
		if (numFoods==1)
		{
			if ((dinner[0].c==reqC)&&(dinner[0].f==reqF)&&(dinner[0].p==reqP))
			{
				works=true;
				
			}
		}
		for (int add=1; add<=numFoods/2; add++)
		{
			miniCounter=miniCounter+dinner[add-1];
			if (miniCounter.p>reqP) break;
			if (createCombination(indexArray,0,1,add)) break;
		}
		/* non recursive way
		long long int maxInt=1;
		for (int cc=1; cc<numFoods; cc++)
		{
			maxInt<<=1;
			maxInt|=1;
		}
		for (long long int gg=0; gg<=maxInt; gg++)
		{
			long long int cd=gg;
			struct food foodCounter={0,0,0};
			for (int dd=0; dd<numFoods;dd++)
			{
				if(cd&1!=0)
				{
					foodCounter=foodCounter+dinner[dinner.size()-1-dd];
				}
				cd>>=1;
			}
			if ((foodCounter.c==reqC)&&(foodCounter.f==reqF)&&(foodCounter.p==reqP))
			{
				works=true;
				break;
			}
		}*/
		if (works) printf("yes\n");
		else printf("no\n");
		

	}



}
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

public class NewYearResolution {
    private static final String NEW_YEAR_RESOLUTION_OUT = "new_years_resolution_out.txt";
    int P, C, F, Gp, Gc, Gf;
    boolean found = false;
    static final String NEW_YEAR_RESOLUTION_IN = "new_years_resolution.txt";

    public static void main(String[] args) {
        Object[] lines = getFileContent();
        NewYearResolution newYearResolution = new NewYearResolution();
        if (lines == null) {
            return;
        }
        int cases = Integer.parseInt((String) lines[0]);
        int lastIndex = 1;
        String result = "";
        for (int i = 1; i <= cases; i++) {
            String line = lines[lastIndex].toString();
            String[] goals = line.split("\\s+");
            newYearResolution.Gp = Integer.parseInt(goals[0]);
            newYearResolution.Gc = Integer.parseInt(goals[1]);
            newYearResolution.Gf = Integer.parseInt(goals[2]);
            int foodsNumber = Integer.parseInt((String) lines[lastIndex + 1]);
            int[][] a = new int[foodsNumber][3];
            int k = 0;
            for (int j = lastIndex + 2; j < foodsNumber + lastIndex + 2; j++) {
                String food = lines[j].toString();
                String[] foods = food.split("\\s+");
                a[k][0] = Integer.parseInt(foods[0]);
                a[k][1] = Integer.parseInt(foods[1]);
                a[k][2] = Integer.parseInt(foods[2]);
                k++;
            }
            lastIndex += foodsNumber + 2;
            newYearResolution.find(a, 0);
            if (i < cases) {
                if (newYearResolution.found) {
                    result += String.format("Case #%d: %s\n", i, "yes");
                } else {
                    result += String.format("Case #%d: %s\n", i, "no");
                }
            } else {
                if (newYearResolution.found) {
                    result += String.format("Case #%d: %s", i, "yes");
                } else {
                    result += String.format("Case #%d: %s", i, "no");
                }
            }
            printToFile(result);
            newYearResolution.found = false;
            newYearResolution.P = 0;
            newYearResolution.C = 0;
            newYearResolution.F = 0;
        }
    }

    private void find(int[][] a, int i) {
        if (P == Gp && C == Gc && F == Gf) {
            found = true;
            return;
        }
        if (P > Gp || C > Gc || F > Gf) {
            return;
        }
        for (int k = i; k < a.length; k++) {
            P += a[k][0];
            C += a[k][1];
            F += a[k][2];
            find(a, i + 1);
            P -= a[k][0];
            C -= a[k][1];
            F -= a[k][2];
        }
    }

    private static Object[] getFileContent() {
        Object[] lines = null;
        try {
            lines = Files.lines(Paths.get(NEW_YEAR_RESOLUTION_IN)).toArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return lines;
    }

    private static void printToFile(String result) {
        PrintWriter writer = null;
        try {
            writer = new PrintWriter(NEW_YEAR_RESOLUTION_OUT);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        writer.print(result);
        writer.close();
    }
}
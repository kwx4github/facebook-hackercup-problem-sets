/**
 * Created by helfper on 09/01/2015.
 */
object NewYearsResolution {
  def main(args: Array[String]) {
    val t = io.StdIn.readInt
    1.to(t).foreach(solve)
  }

  def solve(i: Int) {
    val gpcf = io.StdIn.readLine.split(" ").map(_.toInt)
    val n = io.StdIn.readInt
    val pcfs = List.range(0, n).map(_ => io.StdIn.readLine.split(" ").map(_.toInt))
    val answer = if (balanced(gpcf, pcfs)) "yes" else "no"

    println(s"Case #$i: $answer")
  }

  def balanced(gpcf: Array[Int], pcfs: List[Array[Int]]): Boolean = {
    if (gpcf.forall(_ == 0)) true
    else if (pcfs.isEmpty) false
    else {
      val eat = diff(gpcf, pcfs(0))
      (eat.nonEmpty && balanced(eat.get, pcfs.tail)) || balanced(gpcf, pcfs.tail)
    }
  }

  def diff(pcf1: Array[Int], pcf2: Array[Int]): Option[Array[Int]] = {
    if (0.until(pcf1.length).exists(i => pcf1(i) < pcf2(i))) None
    else Some(Array.range(0, pcf1.length).map(i => pcf1(i) - pcf2(i)))
  }
}

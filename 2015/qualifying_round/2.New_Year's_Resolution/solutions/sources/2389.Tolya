import java.io.FileInputStream;
import java.util.InputMismatchException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "new.*year.*s.*resolution.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("newyear'sresolution.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NewYearsResolution solver = new NewYearsResolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class NewYearsResolution {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int Gp = in.nextInt();
        int Gc = in.nextInt();
        int Gf = in.nextInt();
        int n = in.nextInt();
        int[] p = new int[n];
        int[] c = new int[n];
        int[] f = new int[n];
        for (int i = 0; i < n; ++i) {
            p[i] = in.nextInt();
            c[i] = in.nextInt();
            f[i] = in.nextInt();
        }

        boolean ans = false;
        int p2 = 1 << n;
        for (int mask = 1; mask < p2; ++mask) {
            int CURp = 0;
            int CURc = 0;
            int CURf = 0;
            for (int i = 0; i < n; ++i)
                if ((mask & (1 << i)) != 0) {
                    CURp += p[i];
                    CURc += c[i];
                    CURf += f[i];
                }
            if (CURp == Gp && CURc == Gc && CURf == Gf) {
                ans = true;
                break;
            }
        }

        out.print("Case #" + testNumber + ": ");
        if (ans) out.println("yes");
        else out.println("no");
    }
}

class InputReader {
    BufferedReader in;
    StringTokenizer st;

    public InputReader(InputStream stream) {
        in = new BufferedReader(new InputStreamReader(stream));
        eat("");
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public String next() {
        while (!st.hasMoreTokens())
            eat(nextLine());
        return st.nextToken();
    }

    public String nextLine() {
        try {
            return in.readLine();
        } catch (IOException e) {
            throw new InputMismatchException();
        }
    }

    public void eat(String str) {
        if (str == null) throw new InputMismatchException();
        st = new StringTokenizer(str);
    }
}


#include <bits/stdc++.h>
using namespace std;

struct triplet
{
    int one, two, three;
    triplet(int a, int b, int c) : one(a) , two(b) , three(c) {}
};

bool possible(vector<triplet> v, triplet G)
{
    vector<triplet>  a;
    int n = (int) v.size();
    
    for (int i = 0; i < (1<<n); i++) 
    {
        a.push_back(triplet(0,0,0));
        for (int j = 0; j<n; j++)
        {
            if ((i >> j) & 1)  {
                a[a.size() - 1].one += v[j].one;
                a[a.size() - 1].two += v[j].two;
                a[a.size() - 1].three += v[j].three;
            }
        }
        if (a[i].one == G.one && a[i].two == G.two && a[i].three == G.three) {
            //cout << "bit = " << (bitset<20>) i << endl;
            return true;
        }
    }
    return false;
}

int main()
{
    int TC, n, Gp, Gc, Gf, P, C, F;
    vector<triplet> food;

    ofstream myfile;
    myfile.open ("new_years_resolution_output.txt");
    
    cin >> TC;

    int k=1;
    while( TC-- )
    {
        food.clear();
        cin >> Gp >> Gc >> Gf >> n;
        triplet G(Gp, Gc, Gf);

        for (int i = 0; i < n; ++i) {
            cin >> P >> C >> F;
            food.push_back(triplet(P, C, F));
        }

        myfile << "Case #" << k++ << ": ";

        if (possible(food, G)) myfile << "yes" << endl;
        else myfile << "no" << endl;
    }

    myfile.close();
    return 0;
}

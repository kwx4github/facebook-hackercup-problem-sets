#include <iostream>
#include <vector>

using namespace std;

bool solve_rec(int pos, int p, int c, int f, const vector<int> &pp, const vector<int> &cc, const vector<int> &ff) {
	if (pos == pp.size()) {
		return p == 0 && c == 0 && f == 0;
	}

	if (solve_rec(pos + 1, p, c, f, pp, cc, ff)) {
		return true;
	}

	return solve_rec(pos + 1, p - pp[pos], c - cc[pos], f - ff[pos], pp, cc, ff);
}

bool solve(int p, int c, int f, const vector<int> &pp, const vector<int> &cc, const vector<int> &ff) {
	return solve_rec(0, p, c, f, pp, cc, ff);
}

int main() {
	int cases;
	cin >> cases;
	for (int caseN = 0; caseN < cases; ++ caseN) {
		int n, p, c, f;
		cin >> p >> c >> f >> n;
		
		vector<int> pp, cc, ff;
		for (int food = 0; food < n; ++food) {
			int ppp, ccc, fff;
			cin >> ppp >> ccc >> fff;
			pp.push_back(ppp);
			cc.push_back(ccc);
			ff.push_back(fff);
		}

		bool result = solve(p, c, f, pp, cc, ff);
		cout << "Case #" << caseN + 1 << ": " << (result ? "yes" : "no") << endl;
	}

	return 0;
}
package main

import "fmt"

var cache [2000000]Food

func main() {
	var T int
	fmt.Scan(&T)
	for t := 1; t <= T; t++ {
		G := readFoodItem()
		var N int
		fmt.Scan(&N)
		foods := make([]Food, N)
		for i := 0; i < N; i++ {
			foods[i] = readFoodItem()
		}
		ans := "no"
		if possible(foods, G) {
			ans = "yes"
		}
		fmt.Printf("Case #%d: %s\n", t, ans)
	}
}

func possible(foods []Food, G Food) bool {
	lim := uint(uint(1) << uint(len(foods)))
	cache[0] = Food{0, 0, 0}
	for s := uint(0); s < lim; s++ {
		v := cache[s]
		for i := uint(0); i < uint(len(foods)); i++ {
			foodBit := uint(1)<<i
			if (s & foodBit) != 0 {
				continue
			}
			sum := addFoods(v, foods[i])
			if foodsEqual(sum, G) {
				return true
			}
			cache[s+foodBit] = sum
		}
	}
	return false
}

func addFoods(f1, f2 Food) Food {
	return Food{f1.p + f2.p, f1.c + f2.c, f1.f + f2.f}
}

func foodsEqual(f1, f2 Food) bool {
	return f1.p == f2.p && f1.c == f2.c && f1.f == f2.f
}

func readFoodItem() Food {
	f := Food{}
	fmt.Scan(&f.p)
	fmt.Scan(&f.c)
	fmt.Scan(&f.f)
	return f
}

type Food struct {
	p int
	c int
	f int
}

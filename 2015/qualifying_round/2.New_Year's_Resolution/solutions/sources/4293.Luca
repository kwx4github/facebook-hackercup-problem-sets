import std.stdio, std.conv;

class Food{

    int p = -1;
    int c = -1;
    int f = -1;

    this(int p, int c, int f){
        this.p = p;
        this.c = c;
        this.f = f;
    }

    override string toString(){
        return to!string(p) ~ " " ~ to!string(c) ~ " " ~ to!string(f);
    }

    Food sub(Food food){
        return new Food(p-food.p, c-food.c, f-food.f);
    }

    bool isEmpty(){
        if(p == 0 && c == 0 && f == 0){
            return true;
        } else {
            return false;
        }
    }

    bool isNegative(){
        if(p < 0 || c < 0 || f < 0){
            return true;
        } else {
            return false;
        }
    }
}

void main(){
    auto input = File("new_years_resolution.txt", "r");
    auto output = File("output.txt", "w");

    int n = -1;
    input.readf("%d", &n);

    
    input.byLine();
    int i = 1;
    while(i <= n){
        
        auto goal = readFood(input);
        int nFoods;
        input.readf("%d", &nFoods);
        input.byLine();
        Food[] foods;
        for(auto j = 0; j < nFoods; j++){
            foods ~= readFood(input);
        }
        foods = removeBigger(goal, foods);
        
        if(tryEat(goal, foods))
            output.writeln("Case #", i, " yes");
        else
            output.writeln("Case #", i, " no");

        i++;
    }
    
}

Food readFood(File input){
    int p,c,f;
    input.readf("%d %d %d", &p, &c, &f);
    input.byLine();
    
    return new Food(p, c , f);
}

Food[] removeBigger(Food goal, Food[] foods){

    Food[] good;
    foreach(Food food; foods){

        if(food.p > goal.p || food.c > goal.c || food.f > goal.f){
            if(foods.length == 1)
                return null;
        } else {
            good ~= food;
        }
    }
    return good;
}

bool tryEat(Food goal, Food[] list){

    if(goal.isEmpty()){
        return true;
    } else if(goal.isNegative()){
        return false;
    }

    for(int i=0; i < list.length; i++){
        
        if(tryEat(goal.sub(list[i]), list[i+1 .. $])){
            return true;
        }
    }
    return false;
}
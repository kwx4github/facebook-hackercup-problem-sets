/*
Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some research and has found out that calories come from three main sources, called macronutrients: protein, carbohydrates, and fat. Alex wants to get the right balance of protein, carbohydrates, and fat to have a balanced diet. For each available food, Alex can only choose to eat it or not eat it. He can't eat a certain food more than once, and he can't eat a fractional amount of a food.

Input
Input begins with an integer T, the number of test cases. For each test case, the first line consists of three space-separated integers: GP, GC, and GF, which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. The next line has the number of foods for that test case, an integer N. The next N lines each consist of three space-separated integers: P, C, and F, which represent the amount of protein, carbohydrates, and fat in that food, respectively.

Output
For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for Alex to eat the exact amount of each macronutrient, or "no" if it is not possible.

Constraints
1 ≤ T ≤ 20 
1 ≤ N ≤ 20 
10 ≤ GP, GC, GF ≤ 1000 
10 ≤ P, C, F ≤ 1000  
 */
namespace NewYearsResolution
{
    using System;
    using System.IO;
    using System.Linq;

    public class Program
    {
        public static void Main(string[] args)
        {
            using (var input = new StreamReader("new_years_resolution.txt"))
            using (var output = new StreamWriter("output.txt"))
            {
                var T = ReadSingleInt(input);
                Console.WriteLine("T = {0}", T);
                for (int i = 1; i <= T; i++)
                {
                    Console.WriteLine("i = {0}", i);
                    var goals = ReadArrayOfInts(input);
                    var n = ReadSingleInt(input);

                    var amounts = new int[n][];

                    for (int j = 0; j < n; j++)
                        amounts[j] = ReadArrayOfInts(input);

                    output.WriteLine("Case #{0}: {1}", i, Process(goals, amounts));
                }

            }

            Console.WriteLine("Finished");
            Console.ReadLine();
        }

        private static int ReadSingleInt(StreamReader reader)
        {
            return int.Parse(reader.ReadLine());
        }

        private static int[] ReadArrayOfInts(StreamReader reader)
        {
            return reader.ReadLine().Split(' ').Select(x => int.Parse(x)).ToArray();
        }

        private static string Process(int[] goals, int[][] amounts)
        {
            var n = amounts.Length;

            var use = new bool[n];

            var finished = false;

            while(!finished)
            {
                // test
                //PrintValue(use);
                
                // check if this is ok
                var sums = new int[3];
                for(int i = 0; i < n; i++)
                {
                    if(use[i])
                    {
                        for (int j = 0; j < 3; j++)
                            sums[j] += amounts[i][j];
                    }
                }

                if (sums.SequenceEqual(goals))
                    return "yes";

                // move along
                int k = n - 1;
                while (use[k])
                {
                    use[k] = false;
                    k--;
                    if(k < 0)
                    {
                        finished = true;
                        break;
                    }
                }

                if (k >= 0)
                    use[k] = true;

                // test
                
            }

            return "no";
        }

        private static void PrintValue(bool[] use)
        {
            for (int i = 0; i < use.Length; i++)
                System.Diagnostics.Debug.Write(use[i] ? 1 : 0);

            int value = 0;
            int pow = 1;

            for (int i = use.Length - 1; i >= 0; i--)
            {
                if (use[i])
                    value += pow;

                pow *= 2;
            }

            System.Diagnostics.Debug.WriteLine(", " + value);
        }
    }
}

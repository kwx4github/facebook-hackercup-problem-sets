//package Qual;

import java.util.*;
import java.io.*;

public class P2 {

	public void run() throws IOException {
		in = new FastScanner(new FileInputStream("new_years_resolution.txt"));
		out = new PrintWriter(new FileOutputStream("new_years_resolution.out"));

		int tn = in.nextInt();
		for (int test = 1; test <= tn; test++) {

			int Gp = in.nextInt();
			int Gc = in.nextInt();
			int Gf = in.nextInt();

			int n = in.nextInt();
			int foods[][] = new int[3][n];
			for (int food = 0; food < n; food++) {
				foods[0][food] = in.nextInt();
				foods[1][food] = in.nextInt();
				foods[2][food] = in.nextInt();
			}
			boolean ans = shouldIEatTheseFoods(foods, n, Gp, Gc, Gf);
			out("Case #%d: %s\n", test, (ans ? "yes" : "no"));
		}

		out.close();
    }
	
	private boolean shouldIEatTheseFoods(int[][] foods, int n, int gp, int gc, int gf) {
		   if (gp == 0 && gc ==0 && gf == 0)
		     return true;
		   if (n == 0 && (gp != 0 || gc !=0 || gf != 0))
		     return false;
		 
		   if (foods[0][n-1] > gp || foods[1][n-1] > gc || foods[2][n-1] > gf)
		     return shouldIEatTheseFoods(foods, n-1, gp, gc, gf);
		 
		   return shouldIEatTheseFoods(foods, n-1, gp, gc, gf) || shouldIEatTheseFoods(foods, n-1, gp-foods[0][n-1], gc-foods[1][n-1], gf-foods[2][n-1]);
	}

	private String replaceChars(String n, int i, int j) {
		char[] tmp = n.toCharArray();
        char tc = tmp[j];
        tmp[j] = tmp[i];
        tmp[i] = tc;

        return new String(tmp);
	}

	private boolean isLower(String n, int li, int i) {
		return n.charAt(i) != '0' && (n.charAt(i) - '0') <= (n.charAt(li) - '0');
	}
	
	void out(String format, Object... args) {
        out.printf(format, args);
        System.out.printf(format, args);
    }

    FastScanner in;
    PrintWriter out;

    public static void main(String[] args) throws IOException {
        new P2().run();
    }

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(InputStream in) throws IOException {
            br = new BufferedReader(new InputStreamReader(in));
        }

        String next() {
            try {
                while (st == null || !st.hasMoreTokens()) {
                    st = new StringTokenizer(br.readLine());
                }
            } catch (IOException e) {
                System.err.println(e);
                System.exit(1);
            }
            return st.nextToken();
       }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }
}

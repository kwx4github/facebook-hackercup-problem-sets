#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys
import os

def can_eat_food(objective, accumulated, foods):
    result = False
    can_eat_more = all(map(lambda (x, y): x < y, zip(accumulated, objective)))
    if can_eat_more:
        for i, food in enumerate(foods):
            new_accumulated = map(lambda (x, y): x + y, zip(accumulated, food))
            if new_accumulated == objective:
                result = True
            elif (i < len(foods) - 1):
                result = can_eat_food(objective, new_accumulated, foods[i + 1:])
            else:
                result = can_eat_food(objective, accumulated, foods[i + 1:])
            if result:
                break
    return result


def main(args):
    input_file_path = args[0]

    input_data = []
    with open(input_file_path, 'r') as f:
        input_data = [line.replace('\n','') for line in f]

    T = int(input_data[0])
    test_cases = []
    input_rest = input_data[1:]
    while len(test_cases) < T:
        test_case = {
            'PCF' : [],
            'foods' : [],
            'eat' : False
        }
        test_case['PCF'] = map(int, input_rest[0].split(' '))
        N = int(input_rest[1])
        test_case['foods'] = [map(int,x.split(' ')) for x in input_rest[2:2 + N]]
        test_cases.append(test_case)
        input_rest = input_rest[2 + N:]
        
    for test_case in test_cases:
        test_case['eat'] = can_eat_food(test_case['PCF'], [0, 0, 0], test_case['foods'])

    
    out_lines = []
    for i, test_case in enumerate(test_cases):
        out_line = 'Case #{0}: {1}'.format((i + 1), ('yes' if test_case['eat'] else 'no'))  
        out_lines.append(out_line)
        print out_line


    script_path = os.path.dirname(os.path.realpath(__file__))
    with open(os.path.join(script_path, 'output.txt'), 'w') as f:
        f.write('\n'.join(out_lines))


if __name__ == '__main__':
    script, args = sys.argv[0], sys.argv[1:]
    main(args)
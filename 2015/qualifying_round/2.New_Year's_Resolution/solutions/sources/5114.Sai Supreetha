import sys

answer = set()

def sum_of_subset(items, value,indices,partial=[],result=[]):
        global answer
        s = sum(partial)
        if s==value:
                answer.add(tuple(result))
        if s>value:
                return
        for i in range(len(items)):
                       n =items[i]
                       remaining = items[i+1:]
                       sum_of_subset(remaining, value,indices[i+1:],partial + [n],result+[indices[i]])
        

def solve():
        global answer
        T=int(sys.stdin.readline())
        #print(T)
        for t in range(T):
                max_values = sys.stdin.readline().split()
                Gp = int(max_values[0])
                Gc = int(max_values[1])
                Gf = int(max_values[2])
                N = int(sys.stdin.readline())
                #print(N)
                P = []
                C = []
                F = []
                indices = []
                for i in range(N):
                        case = sys.stdin.readline().split()
                        indices += [i]
                        P += [int(case[0])]
                        C += [int(case[1])]
                        F += [int(case[2])]
                sum_of_subset(P,Gp,indices)
                indexP = answer
                answer = set()
                sum_of_subset(C,Gc,indices)
                indexC = answer
                answer = set()
                sum_of_subset(F,Gf,indices)
                indexF = answer
##                print(indexP)
##                print("**********************")
##                print(indexC)
##                print("**********************")
##                print(indexF)
                print('Case #',end='')
                print(t+1,end='')
                if(len(indexP & indexC & indexF)==0):
                        print(": no")
                else:
                        print(": yes")
                

if __name__ == "__main__":
        solve()
        

                
            

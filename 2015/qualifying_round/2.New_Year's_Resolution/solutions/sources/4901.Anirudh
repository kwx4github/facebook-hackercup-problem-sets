import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class NewYears {

	public static void main(String[] args) throws Exception {
		long startTime = System.currentTimeMillis();
		BufferedReader bf = new BufferedReader(new FileReader("new_years.in"));
		PrintWriter out   = new PrintWriter(new FileWriter("new_years.out"));
		
		int totalCases;
		totalCases = Integer.parseInt(bf.readLine());
		StringTokenizer str, str2;
		int gp, gc, gf;
		int foods;
		int[][] arr;
		//System.out.println("totalCases " + totalCases);
		for(int i = 0; i < totalCases; i++) {
			//System.out.println("Testcase " + i);
			str = new StringTokenizer(bf.readLine());
			gp = Integer.parseInt(str.nextToken());
			gc = Integer.parseInt(str.nextToken());
			gf = Integer.parseInt(str.nextToken());
			foods = Integer.parseInt(bf.readLine());
			arr = new int[foods][3];
			for(int j = 0; j < foods; j++) {
				str2 = new StringTokenizer(bf.readLine());
				for(int k = 0; k < 3; k++) {
					arr[j][k] = Integer.parseInt(str2.nextToken());
				} 
			}

			validity(arr, gp, gc, gf, i, out);
			
		}
		out.close();
		long endTime = System.currentTimeMillis();
		tr(endTime - startTime + "ms");	
	}

	private static void tr(Object... o) {
		System.out.println(Arrays.deepToString(o));
	}

	public static void validity(int[][] arr, int gp, int gc, int gf, int caseno, PrintWriter out) {
		int maxsize = 1 << arr.length;

		for(int i = 1; i < maxsize; i++) {
			if(isValidSubset(arr, i, gp, gc, gf)) {
				out.println("Case #" + (caseno + 1) + ": " + "yes");
				return;
			}
		}
		out.println("Case #" + (caseno + 1) + ": " + "no");
		
	}
	
	public static boolean isValidSubset(int[][] arr, int x, int gp, int gc, int gf) {
		int index = 0;
		int sum = gp;
		int sum1 = gc;
		int sum2 = gf;
		for(int k = x; k > 0; k >>= 1) {
			if((k & 1) == 1) {
				sum = sum - arr[index][0];
				sum1 = sum1 - arr[index][1];
				sum2 = sum2 - arr[index][2];	
			}
			if(sum < 0 || sum1 < 0 || sum2 < 0)
				break;
			if(sum == 0 && sum1 == 0 && sum2 == 0)
				return true;	
			index++;
		}
		return false;
	}
}

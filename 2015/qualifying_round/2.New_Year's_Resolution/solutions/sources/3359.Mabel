#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
#include <cstring>
#include <map>
#include <bitset>
#include <string>
#include <cmath>

using namespace std;

const int INF = 1000000009;
const int MOD = 1000000007;

typedef long long LL;
typedef unsigned long long ULL;
typedef priority_queue <int> PQ;
typedef pair <int, int> II;
typedef priority_queue <II> PQII;
typedef map <int, int> MI;
typedef map <string, int> MSI;
typedef vector <int> VI;
typedef vector <VI> VVI;
typedef vector <LL> VL;
typedef vector <VL> VVL;
typedef vector <string> VS;
typedef vector < II > VII;

#define PB push_back;
#define MP make_pair;

string n, n2;

bool ex(int i, int j)
{
    if(n[i]==n[j]) {
        return false;
    }
    int temp = n[i];
    n[i] = n[j];
    n[j] = temp;
    return true;
}

int miniSinCero(int in)
{
    int pos = in;
    char mini = n[in];
    for(int j=in; j<n.size(); j++) {
        if(n[j]!='0')
            if(n[j] <= mini) {
                mini = n[j];
                pos = j;
            }
    }
    return pos;
}

int minimo(int in)
{
    int pos = in;
    char mini = n[in];
    for(int j=in; j<n.size(); j++) {
        if(n[j] <= mini) {
            mini = n[j];
            pos = j;
        }
    }
    return pos;
}

int maxSinCero(int in)
{
    int pos = in;
    char maxi = n[in];
    for(int j=in; j<n.size(); j++) {
        if(n[j]!='0')
            if(n[j] >= maxi) {
                maxi = n[j];
                pos = j;
            }
    }
    return pos;
}

int maximo(int in)
{
    int pos = in;
    char maxi = n[in];
    for(int j=in; j<n.size(); j++) {
        if(n[j] >= maxi) {
            maxi = n[j];
            pos = j;
        }
    }
    return pos;
}

string res1()
{
    string c = n;
    int dst = 0;
    int p = miniSinCero(dst);
    while(dst<n.size() && !ex(dst, p)) {
        dst++;
        p = minimo(dst);
    }
    c = min(n, c);
    return c;
}

string res2()
{
    string c = n;
    int dst = 0;
    int p = maxSinCero(dst);
    while(dst<n.size() && !ex(dst, p)) {
        dst++;
        p = maximo(dst);
    }
    c = max(n, c);
    return c;
}

//string toString(int a){
//    string res = "";
//    while(a>0){
//        res += (a%10)+'0';
//        a/=10;
//    }
//    reverse(res.begin(), res.end());
//    return res;
//}

int main()
{
    ios_base::sync_with_stdio(false);
    //
    int t;
    cin >> t;
    //srand(123456789);
    for(int i=1; i<=t; i++) {
        cin >> n;
//        int k = rand();
//        n = toString(k);
//        cout << k<<" " << n << endl;
        if(n.size()==1) {
            cout << "Case #" << i << ": " <<n << " " << n << endl;
            continue;
        }
        n2 = n;
        cout << "Case #" << i << ": " << res1() << " ";
        n = n2;
        cout << res2() << endl;
    }
    return 0;
}

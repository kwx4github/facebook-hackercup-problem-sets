#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
using namespace std;


bool possible(int,vector<int> &);

int main()
{
	ifstream input("input.txt");
	ofstream output("output.txt");

	int T;
	input >> T;

	for (int i = 0; i < T; i++)
	{
		int p, c, f;
		int n;

		input >> p >> c >> f;
		input >> n;

		vector<int> vec;

		for (int j = 0; j < n; j++)
		{
			int a, b, c;
			input >> a >> b >> c;
			vec.push_back(a + b + c);
		}

		output << "Case #" << i+1 << ": ";
		possible(p+c+f,vec) ? output << "yes" << endl : output << "no" << endl;

	}
	input.close();
	output.close();

	return 0;
}
bool possible(int sum, vector<int> &vec)
{
	vector<int> previous;
	previous.push_back(0);

	for (auto i = vec.begin(); i != vec.end(); i++)
	{
		vector<int> temp(previous);
		for (auto j = temp.begin(); j != temp.end(); j++)
			*j += *i;

		for (auto k = temp.begin(); k != temp.end(); k++)
		{
			if (*k <= sum)
				previous.push_back(*k);
		}
	}
	sort(previous.begin(), previous.end());
	return binary_search(previous.begin(), previous.end(), sum);
}
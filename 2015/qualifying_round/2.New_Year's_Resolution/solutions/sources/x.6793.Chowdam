#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;
bool found = false;

bool check_soln(int *food[3], int *path, int ps, int C, int F) {
	int sum1 = 0, sum2 = 0;
	for(int i=0; i<ps; i++) {
		//printf("path i = %d ", path[i]);
		sum1 += food[path[i]][1];
		sum2 += food[path[i]][2];
	}
	//printf("\n");
	//printf("sum1 = %d, sum2 = %d\n", sum1, sum2);
	//printf("C = %d, F = %d\n", C, F);
	if(sum1 == C && sum2 == F) {
		//printf("I'm here man\n");
		return true;
	}
	else {
		return false;
	}
}

void find_soln(int *food[3], int *path, int ps, int sf, int it, int N, int P, int C, int F) {
	//printf("ps = %d, sf = %d, it = %d\n", ps, sf, it);
	if (sf == P) {
		bool tf = check_soln(food, path, ps, C, F);
		if( tf ) {
			found = true;
			return;
		}
		else {
			find_soln(food, path, ps-1, sf-food[it][0], it+1, N, P, C, F);
		}
		return;
	}
	else {
		for(int i=it+1; i < N; i++) {
			if ( food[i][0] > P ) {
				continue;
			}
			else {
				path[ps] = i;
				find_soln(food, path, ps+1, sf + food[i][0], i, N, P, C, F);
			}
		}
	}
	return;
}

void solution(int *food[3], int P, int C, int F, int N) {
	int *path = new int[20];
	int sf = food[0][0];
	find_soln(food, path, 0, 0, -1, N, P, C, F);
}

void print(int *food[3], int N) {
	int i, j;
	for(i=0; i<N; i++) {
		for(j=0; j<3; j++) {
			printf("%d ", food[i][j]);
		}
		printf("\n");
	}
}

int main() {
	int T, N,  P, C, F;
	int Fp, Fc, Ff, i, j;
	scanf("%d", &T);
	int **food = new int*[20];
	for(int i=0; i<20; i++) {
		food[i] = new int[3];
	}
	int x = 1;
	while(T--) {
		found = false;
		scanf("%d%d%d",&P, &C, &F);
		scanf("%d", &N);
		for(i=0; i<N; i++) {
			for(j=0; j<3; j++) {
				scanf("%d", &food[i][j]);
			}
		}
		//print(food, N);
		solution(food, P, C, F, N);
		if(found) {
			printf("Case #%d: yes\n", x++);
		}
		else {
			printf("Case #%d: no\n", x++);
		}
	}
	return 0;
}
/*
 * main.cpp
 *
 *  Created on: Jan 11, 2015
 *      Author: Khanh
 */

#include <iostream>
#include <cstring>
#include <cstdlib>

#define MAXN 1001

using namespace std;

typedef struct {
	int p, c, f;
} VALUE;

typedef struct {
	int i, p, c, f;
} VALUED;

VALUE a[MAXN];
VALUED d[MAXN][MAXN];
int szd[MAXN];
int n, gp, gc, gf;

int compare(const void *a, const void *b) {
	VALUE va = *(VALUE*) a;
	VALUE vb = *(VALUE*) b;
	if (va.p != vb.p) {
		return va.p - vb.p;
	}
	if (va.c != vb.c) {
		return va.c - vb.c;
	}
	return va.f - vb.f;
}

int solve() {
	qsort(a, n, sizeof(VALUE), compare);
	memset(szd, 0, MAXN * sizeof(int));

	int sz = 0, i, j, tp, tc, tf;
	for (i = 0; i < n; ++i) {
		szd[a[i].p] = 1;
		d[a[i].p][0].i = 0;
		d[a[i].p][0].p = a[i].p;
		d[a[i].p][0].c = a[i].c;
		d[a[i].p][0].f = a[i].f;
		if (a[i].p == gp && a[i].c == gc && a[i].f == gf) {
			return 1;
		}
	}
	while (sz < gp) {
		if (szd[sz] > 0) {
			for (i = 0; i < szd[sz]; ++i) {
				for (j = d[sz][i].i + 1; j < n; ++j) {
					tp = d[sz][i].p + a[j].p;
					tc = d[sz][i].c + a[j].c;
					tf = d[sz][i].f + a[j].f;
					if (tp == gp && tc == gc && tf == gf) {
						return 1;
					}
					if (tp > gp) {
						break;
					}
					if (tc <= gc && tf <= gf) {
						d[tp][szd[tp]].i = j;
						d[tp][szd[tp]].p = tp;
						d[tp][szd[tp]].c = tc;
						d[tp][szd[tp]].f = tf;
						++szd[tp];
					}
				}
			}
		}
		++sz;
	}
	return 0;
}

int main() {
	// your code goes here
	int t, k, i, result;
	cin >> t;
	for (k = 1; k <= t; ++k) {
		cout << "Case #" << k << ": ";
		cin >> gp >> gc >> gf;
		cin >> n;
		for (i = 0; i < n; ++i) {
			cin >> a[i].p >> a[i].c >> a[i].f;
		}
		result = solve();
		if (result == 0) {
			cout << "no";
		} else {
			cout << "yes";
		}
		cout << endl;
	}
	return 0;
}

import java.util.Scanner;
import java.util.Stack;

public class newyear{
    
public static int TARGET_SUM;
public static int  indexes[][]=new int[1000][21];
public static int chk_p[]=new int[20];

    public static int k=0;
    /** Set a value for target sum */
    

    public static Stack<Integer> stack = new Stack<Integer>();
    public static Stack<Integer> stindex = new Stack<Integer>();
    
    
    /** Store the sum of current elements stored in stack */
    public static int sumInStack = 0;
    public static int temp = 0;


public static void main(String[] args) {
    Scanner in = new Scanner(System.in);
    int cases=in.nextInt();
    int no=1;
    while(no<=cases){
        k=0;
        temp=0;
        sumInStack=0;
        for(int i=0;i<indexes.length;i++){
        for(int j=0;j<21;j++){
            indexes[i][j]=-1;
        }}
        for(int i=0;i<chk_p.length;i++){
        chk_p[i]=-1;
        }
        int gp= in.nextInt();
        TARGET_SUM = gp;
        int gc= in.nextInt();
        int gf= in.nextInt();
        int n = in.nextInt();
        int foods[][]=new int[n][3];
        
        
        for(int i=0;i<n;i++){
        foods[i][0]=in.nextInt();
        chk_p[i]=foods[i][0];
        foods[i][1]=in.nextInt();
        foods[i][2]=in.nextInt();
        //System.out.println("food for test case "+no+"  is i ="+i+"pro "+foods[i][0]+" carb "+foods[i][1]+" fat "+foods[i][2]);
        }
        //GetAllSubsetByStack get = new GetAllSubsetByStack();
        populateSubset(chk_p, 0, n);
        int complete =0;
        for(int indouter=0;indouter<k;indouter++){
            int sump=0,sumc=0,sumf=0;
        for(int indinner=0;indexes[indouter][indinner]!=-1;indinner++){
        sump += foods[indexes[indouter][indinner]][0];
        sumc += foods[indexes[indouter][indinner]][1];
        sumf += foods[indexes[indouter][indinner]][2];
        }
        if(sump==gp&&sumc==gc&&sumf==gf){
                complete=1;
            }
            
        }
        if(complete==1){
                System.out.println("Case #"+no+": yes");
        }else{
                System.out.println("Case #"+no+": no");
            
        }
        no++;
    }
    
    }





    public static void populateSubset(int[] data, int fromIndex, int endIndex) {

        /*
        * Check if sum of elements stored in Stack is equal to the expected
        * target sum.
        * 
        * If so, call print method to print the candidate satisfied result.
        */
        if (sumInStack == TARGET_SUM) {
            //System.out.println("\n target matched now printing sum \n");
            computeindexes(stack,stindex);
        }

        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

            if (sumInStack + data[currentIndex] <= TARGET_SUM) {
                stack.push(data[currentIndex]);
                stindex.push(currentIndex);
                sumInStack += data[currentIndex];
                temp += currentIndex;
                //System.out.println("pushed "+data[currentIndex]+"  the current sum in stack of "+sumInStack);
                //System.out.println("pushed "+currentIndex+"  the current sum in stackindex of "+temp);
                /*
                * Make the currentIndex +1, and then use recursion to proceed
                * further.
                */
                populateSubset(data, currentIndex + 1, endIndex);
                //System.out.print(" removed this from stack  :"+(Integer) stack.peek());
                //System.out.print(" removed this from stackindex  :"+(Integer) stindex.peek());
                temp -= stindex.pop();
                sumInStack -= (Integer) stack.pop();
                //System.out.print("  now sum is "+sumInStack+"\n");
            }
        }
    }

    /**
    * Print satisfied result. i.e. 15 = 4+6+5
    */

    public static void computeindexes(Stack<Integer> stack,Stack<Integer> stindex) {
        //StringBuilder sb = new StringBuilder();
        //StringBuilder sbindex = new StringBuilder();
        //sb.append(TARGET_SUM).append(" = ");
        //sbindex.append("i").append(":");
        
        //for (Integer i : stack) {
         //   sb.append(i).append("+");                       
        //}
        
        int f=0;
        for (Integer i : stindex) {
            //sbindex.append(i).append(" ");
            int m = i;
            indexes[k][f]=i;
            f++;
        }
        k++;
        
        //System.out.println("completed appending now printing");
        //System.out.println(sb.deleteCharAt(sb.length() - 1).toString());
        //System.out.println(sbindex.deleteCharAt(sbindex.length() - 1).toString());
    }



}
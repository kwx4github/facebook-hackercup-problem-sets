import sys
import operator
import collections

def readint():
    i = sys.stdin.readline()
    i = i.strip().split()
    i = map(int, i)
    if len(i) == 1:
        return i[0]
    else:
        return tuple(i)


def main():
    t = readint()
    for i in xrange(t):
        d = {}
        r = readint()
        n = readint()
        for j in xrange(n):
            d[j] = readint()
        print "Case #{0}: {1}".format(i+1, is_optimal(d,r))

def add(a,b):
    return tuple(map(operator.add, a,b))

def sub(a,b):
    return tuple(map(operator.sub, a,b))

def is_optimal(d,r):
    q = {}

    def Q(i,s):
        if i == 1:
            return d[0] == s
        elif (s[0] < 0 or s[1] < 0 or s[2] < 0):
                return False
        else: 
            if not (i,s) in q.keys():
                # print "Q({4},{5}) = Q({0},{2}) , ({1} == {2}) , Q({0},{3}))".format(i-1, d[i-1],s,sub(s,d[i-1]),i,s)
                q[i,s] = Q(i-1,s) or (d[i-1] == s) or Q(i-1,sub(s,d[i-1]))
            return q[i,s]


    n = len(d.values())

    for i in xrange(2,n+1):
        # print "Q({4}) = Q({0},{2}) , ({1} == {2}) , Q({0},{3}))".format(i-1, d[i-1],r,sub(r,d[i-1]),i)
        q[i,r] = Q(i-1,r) or (d[i-1] == r) or Q(i-1,sub(r,d[i-1]))

    return Q(n,r)

main()

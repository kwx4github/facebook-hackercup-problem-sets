#include <bits/stdc++.h>

using namespace std;


class food
{
	public:
	int p,f,c;
	food(){
	}
	food(int _p,int _f,int _c)
	{
		p = _p;
		f = _f;
		c = _c;
	}
};

pair<pair<int,int> , pair<int,int> > make_key(int p,int f,int c,int i)
{
	pair<int,int> p1(p,f),p2(c,i);
	pair<pair<int,int> , pair<int,int> > elem(p1,p2);
	return elem;
}

map< pair<pair<int,int>,pair<int,int> >,bool> dp;
vector<food> foo;

bool cal(int p,int c,int f,int i)
{
	// p c | f i	
	if(p==0 && c==0 && f==0)
	return 1;
	else if(p<0 || c<0 ||f<0)
	return 0;
	if(i==foo.size())
	return 0;
	
	map< pair<pair<int,int>,pair<int,int> >,bool> :: iterator it = dp.find(make_key(p,c,f,i));
	if(it!=dp.end())
	{
		return it->second;
	}
	
	int _p = foo[i].p;
	int _c = foo[i].c;
	int _f = foo[i].f;
	bool v =  cal(p-_p,c-_c,f-_f,i+1)+cal(p,c,f,i+1);
	dp[make_key(p,c,f,i)] = v;
	return  v;
}


int main(int argc, char** argv) {
	freopen("in2.txt","r",stdin);
	freopen("out2.txt","w",stdout);
	int cases;
	int c_n=1;
	cin>>cases;
	while(cases--)
	{
		int p,c,f;
		cin>>p>>c>>f;
		int n;
		cin>>n;
		int _p,_c,_f;
		while(n--)
		{
			cin>>_p>>_c>>_f;
			foo.push_back(*(new food(_p,_f,_c)));
		}
		cout<<"Case #"<<c_n++<<": ";
		if(cal(p,c,f,0))
		cout<<"yes\n";
		else
		cout<<"no\n";
		foo.clear();
		dp.clear();
	}
	return 0;
}


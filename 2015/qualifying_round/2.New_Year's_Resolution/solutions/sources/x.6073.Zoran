#include <iostream>
#include <fstream>
#include <set>
using namespace std;

class Food {
    public:
    int p, c, f;
    bool operator<(const Food& rhs) const {
        if (p < rhs.p ||
            p == rhs.p && c < rhs.c ||
            p == rhs.p && c == rhs.c && f < rhs.f)
            return true;
        return false;
    };
    Food(int pi, int ci, int fi) { p = pi; c = ci; f = fi; };
    Food() { Food(0, 0, 0); };
};

int main() {
    cin.sync_with_stdio(false);
    //std::ifstream in("in1");
    //std::cin.rdbuf(in.rdbuf());

    int T;
    cin >> T;
    for (int cas = 1; cas <= T; ++cas) {
        int Gp, Gc, Gf;
        cin >> Gp >> Gc >> Gf;

        int N;
        cin >> N;

        set<Food> cmb;
        cmb.insert(Food(0, 0, 0));
        bool sol = false;
        for (int i = 0; i < N && !sol; ++i) {
            int p, c, f;
            cin >> p >> c >> f;

            set<Food> nwc;
            for (auto const &sf: cmb) {
                int np = p + sf.p;
                int nc = c + sf.c;
                int nf = f + sf.f;
                if (np == Gp &&
                    nc == Gc &&
                    nf == Gf) {
                    sol = true;
                    break;
                }
                
                if (np <= Gp - 10 &&
                    nc <= Gc - 10 &&
                    nf <= Gf - 10) {
                    nwc.insert(Food(np, nc, nf));
                }

            }
            cmb.insert(nwc.begin(), nwc.end());
        }
        cout << "Case #" << cas << ": " << (sol ? "yes" : "no") << endl;
    }
}

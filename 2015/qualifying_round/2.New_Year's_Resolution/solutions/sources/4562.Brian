canAdd = (nums, target, printSuccess=false)->
  # console.log 'can add ', nums, target

  combinationOfIndexes = []
  for num, i in nums
    
    if num > target
      continue

    if num is target
      combinationOfIndexes.push [i]
      continue

    newTarget = target - num
    newNums = nums[i+1..]
    if combinations = canAdd newNums, newTarget
      combinations = combinations.map (c)-> c.map (x)-> x + i + 1
      combinations.forEach (c)-> c.push i
      combinationOfIndexes.push indexes for indexes in combinations

  return combinationOfIndexes

readline = require 'readline'

rl = readline.createInterface
  input: process.stdin
  output: process.stdout

fs = require 'fs'
lines = []
index = 0
fs.readFile 'new_years_resolution.txt', {encoding:'utf8'}, (err, content)->
  lines = content.split '\n'

  testCaseCount = lines[index]
  index++

  for i in [1..testCaseCount]
    possible = if runTestCase() then "yes" else "no"
    console.log "Case ##{i}: #{possible}"

runTestCase =->
  [targetP, targetC, targetF] = lines[index].split(' ').map (s)-> parseInt s
  index++

  foodCount = parseInt lines[index]
  index++
  allP = []
  allC = []
  allF = []
  
  for [1..foodCount]
    [p, c, f] = lines[index].split ' '
    index++
    allP.push parseInt p
    allC.push parseInt c
    allF.push parseInt f

  pOkCombinations = canAdd allP, targetP
  if not pOkCombinations.length
    # console.log 'p not ok'
    return false

  # console.log 'p is:'
  # pOkCombinations.forEach (indexes)->
  #   thisPs = allP.filter (v, i)-> i in indexes
  #   console.log thisPs.join('+') + '=' + targetP

  # console.log 'c is:'
  cOkCombinations = pOkCombinations.filter (indexes)->
    thisCs = allC.filter (v, i)-> i in indexes
    thisSum = thisCs.reduce (t,l)-> t+l
    isOk = thisSum is targetC
    # if isOk
    #   console.log thisCs.join('+') + '=' + targetC
    return isOk

  if not cOkCombinations.length
    # console.log 'c not ok'
    return false

  # console.log 'f is:'
  fOkCombinations = cOkCombinations.filter (indexes)->
    thisFs = allF.filter (v, i)-> i in indexes
    thisSum = thisFs.reduce (t,l)-> t+l
    isOk = thisSum is targetF
    # if isOk
    #   console.log thisFs.join('+') + '=' + targetF
    return isOk

  # if not fOkCombinations.length
  #   console.log 'f not ok'
  #   return false

  return true
#include<iostream>
using namespace std;
struct vals {
	int p;
	int c;
	int f;
};
bool isSubsetSum(vals *set, int n, vals sum)
{
   // Base Cases
   if (sum.p==0 && sum.c==0 && sum.f==0)
     return true;
   if (n == 0 && (sum.p!=0 || sum.c!=0 || sum.f!=0))
     return false;
 
   // If last element is greater than sum, then ignore it
   if (set[n-1].p > sum.p || set[n-1].c > sum.c || set[n-1].f > sum.f)
     return isSubsetSum(set, n-1, sum);
 
   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
   vals summ;
   summ.p=sum.p-set[n-1].p;
   summ.f=sum.f-set[n-1].f;
   summ.c=sum.c-set[n-1].c;
   //printf("%d %d %d %d\n",n-1,set[n-1].p,set[n-1].c,set[n-1].f);
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, summ);
}
// Driver program to test above function
int main()
{
  int t;
  scanf("%d",&t);
  for(int j=0;j<t;j++){
  	vals sum;
  	scanf("%d %d %d",&sum.p,&sum.c,&sum.f);
  	int n;
  	scanf("%d",&n);
  	vals set[n];
  	for(int i=0;i<n;i++)
  		scanf("%d %d %d",&set[i].p,&set[i].c,&set[i].f);
  	printf("Case #%d: ",j+1);
  	if (isSubsetSum(set, n, sum))
     printf("yes\n");
    else
     printf("no\n");
  }
  
  return 0;
}
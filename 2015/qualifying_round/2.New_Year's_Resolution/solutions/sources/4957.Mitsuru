#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;

class Nutrients {
public:
    int p, c, f; //protein, carbs, fat
    Nutrients() {
        p = 0;
        c = 0;
        f = 0;
    }
    bool operator==(const Nutrients &a) const {
        return p == a.p && c == a.c && f == a.f;
    }
    void operator+=(const Nutrients &a) {
        p += a.p;
        c += a.c;
        f += a.f;
    }
    friend istream &operator>>(istream &is, Nutrients &nutrients) {
        is >> nutrients.p >> nutrients.c >> nutrients.f;
        return is;
    }
} diet;

bool checkpossible(vector<Nutrients> list, Nutrients sum, int index) {
    if (sum == diet) return true;
    if (index >= list.size()) return false;

    Nutrients incremented;
    incremented += sum;
    incremented += list[index];
    return checkpossible(list, incremented, index + 1) || checkpossible(list, sum, index + 1);
}

int main() {
    int N;
    cin >> N;
    for (int counter = 0; counter < N; counter++) {
        cout << "Case #" << counter + 1 << ": "; //print solution next
        cin >> diet;
        int food_count;
        cin >> food_count;
        vector<Nutrients> list;
        for (int i = 0; i < food_count; i++) {
            Nutrients tmp;
            cin >> tmp;
            list.push_back(tmp);
        }
        Nutrients sum;
        if (checkpossible(list, sum, 0)) {
            cout << "yes" << "\n";
        } else {
            cout << "no" << "\n";
        }
    }
}
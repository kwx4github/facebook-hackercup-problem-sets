#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <iostream>
#include <queue>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <cstring>
#include <vector>

#define MAX 100005

#define REPN(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define REP(i,n) REPN(i,0,n)

#define CLR(cont, a) memset(cont, a, sizeof cont)

#define dbg(x) cout << #x << " = " << x << "\n";
#define dbg2(x, y) cout << #x << " = " << x << " " << #y << " = " << y << "\n";
#define dbg3(x, y, z) cout << #x << " = " << x << " " << #y << " = " << y << " " << #z << " = " << z << "\n";
#define dbg4(x, y, z, w) cout << #x << " = " << x << " " << #y << " = " << y << " " << #z << " = " << z << " " << #w << " = " << w << "\n";

#define pb push_back
#define mp make_pair
#define oo (1<<30)
#define ALL(x) (x).begin(),(x).end()

using namespace std;

int S[3], A[30][3], sum[3];

int main() {
    int T, n;
    cin >> T;
    REP(tc, T) {
        REP(i, 3) cin >> S[i];
        cin >> n;
        REP(i, n) {
            REP(j, 3) cin >> A[i][j];
        }

        bool bo = false;
        REPN(i, 1, (1<<n)) {
            REP(k, 3) sum[k] = 0;
            REP(j, n) if ((1<<j) & i) {
                REP(k, 3) sum[k] += A[j][k];
            }
            bo = true;
            REP(k, 3) if (sum[k] != S[k]) bo = false;
            if (bo) {
                break;
            }
        }
        if (bo)
            cout << "Case #" << tc+1 << ": yes\n";
        else 
            cout << "Case #" << tc+1 << ": no\n";
    }
    return 0;
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class B {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    public void solveCase() throws IOException {
        int[] requirement = new int[] {nextInt(), nextInt(), nextInt()};
        int N = nextInt();
        int[][] food = new int[N][];
        for (int i = 0; i < N; i++) {
            food[i] = new int[] {nextInt(), nextInt(), nextInt()};
        }

        int maxMask = (1 << N);
        for (int i = 0; i < maxMask; i++) {
            int[] cur = new int[3];
            for (int j = 0; j < N; j++) {
                if ((i & (1 << j)) != 0) {
                    for (int k = 0; k < 3; k++) {
                        cur[k] += food[j][k];
                    }
                }
            }
            boolean meet = true;
            for (int k = 0; k < 3; k++) {
                if (cur[k] != requirement[k]) meet = false;
            }
            if (meet) {
                out.print("yes");
                return;
            }
        }
        out.print("no");

    }

    public void solve() throws IOException {
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            out.print("Case #" + t + ": ");
            solveCase();
            out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new B().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

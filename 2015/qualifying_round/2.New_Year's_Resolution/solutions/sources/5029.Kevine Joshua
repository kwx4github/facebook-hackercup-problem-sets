import java.util.*;
import java.io.*;

public class problem2 {
    
    public void generate(String str, int pos, int length, ArrayList<String> PC, int[] intset )
    {
        if (length == 0) {
            //System.out.println(str);
            PC.add(str);
        } else {
            for (int i = pos; i < intset.length; i++) {
                generate(str  + " " + intset[i], (i+1), length - 1, PC, intset);
            }
        }
    }

    public static void main(String[] args)
    {
        Generator test = new Generator();
        
        int[] foodGoal = new int[3];						//0,1,2 for the goal nutrient
        String[] answers;
        int[] intset = new int[5];
        Scanner sc = new Scanner(System.in);				//get no of cases
        int cases = Integer.parseInt(sc.nextLine());
        answers = new String[cases];						//Answer List
        
        for (int c=0;c<cases;c++){
        	
	        //GET GOAL HERE===========================================================
        	boolean largeFood = false;
        	ArrayList<int[]> foodList = new ArrayList<int[]>(); //0,1,2 per each food set
        	ArrayList<String> possibleCombination = new ArrayList<String>();
        	foodList.clear();
        	//System.out.println("SET GOAL CASE : " + (c+1));
        	String goal = sc.nextLine();
        	StringTokenizer gST = new StringTokenizer(goal);
        	int ctr=0;
        	while(gST.hasMoreTokens()){
        		foodGoal[ctr] = Integer.parseInt(gST.nextToken());
        		ctr++;
        	}
        	for(int test_=0;test_<foodGoal.length;test_++){
        		//System.out.println("G : " + foodGoal[test_]);
        		int tmpInt = foodGoal[test_];
        		if (tmpInt > 1000){
        			largeFood = true;
        		}
        	}
        	
        	if (largeFood == true){
        		answers[c] = "no";
        		break;
        	}
        	
        	//SET UP AVAILABLE FOOD=====================================================
        	int foodSize = Integer.parseInt(sc.nextLine()); //number of food available
        	intset = new int[foodSize];
        	//sc.nextLine();
        	for(int f=0;f<intset.length;f++){
            	intset[f] = (f+1);
            	int[] tmpFoodSet = new int[3]; 
            	String tmpFood = sc.nextLine();
            	StringTokenizer tfST = new StringTokenizer(tmpFood);
            	int _ctr =0;
            	while(tfST.hasMoreTokens()){
            		tmpFoodSet[_ctr] = Integer.parseInt(tfST.nextToken());
            		_ctr++;
            	}
            	foodList.add(tmpFoodSet);
            }
        	//System.out.println();
        	
	
        	//GENERATE COMBINATIONS====================================================
	        for (int length = 1;  length <= intset.length ; length++) // 
	            test.generate("", 0, length, possibleCombination, intset);
	        
	        //COMPUTE FOR POSSIBLE COMBINATION
	        //System.out.println("Possible Combination");
	        for (int i=0;i<possibleCombination.size();i++){
	        	//System.out.print("- ");
	        	//System.out.println("PC #"+(i+1) + " : " + possibleCombination.get(i));
	        	StringTokenizer st = new StringTokenizer(possibleCombination.get(i));
	        	
	        	ArrayList<Integer> indexList = new ArrayList<Integer>();		//indeces to add
	        	indexList.clear();
	        	indexList.removeAll(indexList);
	        	String currString = possibleCombination.get(i);
	        	int[] tmpGoal = new int[3];
	        	tmpGoal[0] = 0;	//Protein
        		tmpGoal[1] = 0; //Carbo
        		tmpGoal[2] = 0; //Fat
	        	while(st.hasMoreTokens()){	//we get combinations here then add them
	        		String tmpStr = st.nextToken();
	        		//System.out.print(tmpStr + " ");
	        		indexList.add(Integer.parseInt(tmpStr));
	        	}
	        	
	        	//System.out.println("No. of items are : " + indexList.size());
	        	
	        	//System.out.println();
	        	for (int x = 0; x<indexList.size();x++){
	        		//System.out.print(indexList.get(x)+ ",");
	        		boolean breakMe = false;
	        		int currIndex = indexList.get(x);
	        		try{
		        		int[] foodSet = foodList.get((currIndex-1));		        		
		        		tmpGoal[0] += foodSet[0];
		        		tmpGoal[1] += foodSet[1];
		        		tmpGoal[2] += foodSet[2];
	        		}catch (Exception ex){
	        			System.out.println("error : " + ex.getMessage());
	        			breakMe = true;
	        		}finally{
	        			
	        		}
	        		if (breakMe == true){
	        			break;
	        		}
	        		
	        	}
	        	//System.out.println();
	        	
	        	if ((tmpGoal[0] == foodGoal[0]) && (tmpGoal[1] == foodGoal[1]) && (tmpGoal[2] == foodGoal[2])){
	        		answers[c] = "yes";
	        		break;
	        	}else{
	        	}
	        	
	        	if (i == (possibleCombination.size() -1)){
	        		/*System.out.println("No answer was Found Sorry");*/
	        		answers[c] = "no";
	        		break;
	        	}
	        	//System.out.println("Case #"+(c+1)+" " + answers[c]);
	        }
	        if (c == (cases-1)){
	        	break;
	        }
	        
        }
        
        for (int x=0;x<answers.length;x++){
        	System.out.println("Case #"+(x+1)+" " + answers[x]);
        }
        
    }

}
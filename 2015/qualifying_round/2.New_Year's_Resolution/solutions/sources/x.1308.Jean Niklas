#!/usr/bin/env clojure
(require '[clojure.string :as s])

(defn combinations [mfn [f & r]]
  (if-not (seq r)
    (list f)
    (let [rcomb (combinations mfn r)]
      (concat rcomb (map #(mfn f %) rcomb)))))

(defn solve [[goal foods]]
  (let [c (combinations #(mapv + %1 %2) foods)]
    (boolean (some #(= goal %) c))))

(def read3 (juxt read read read))
(defn read-input []
  (let [goal (read3)
        food-count (read)
        foods (vec (repeatedly food-count read3))]
    [goal foods]))

(defn pprint-result [idx x]
  (format "Case #%d: %s" (inc idx) (if x "yes" "no")))

(defn main []
  (let [T (read)
        inputs (doall (repeatedly T read-input))
        results (map solve inputs)]
    (->> (map-indexed pprint-result results)
         (s/join "\n")
         (println))
    (flush)
    (System/exit 0)))

(main)

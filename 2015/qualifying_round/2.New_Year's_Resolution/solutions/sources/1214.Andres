#include<bits/stdc++.h>
using namespace std;

#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define mp make_pair
#define pb push_back
#define fi first
#define se second

#define clr( A , val ) memset( A  , val , sizeof( A ) )
#define SZ( v ) (( int ) v.size() )

#define look1( v , n ) REP( i , n ) cout<<v[ i ]<<char( i + 1 == n ? 10 : 32 )
#define look2( v , n , m ) REP( i , n ) REP( j , m ) cout<<v[ i ][ j ]<<char( j + 1 == m ? 10 : 32 )

#define mi (( a + b ) >> 1 )
#define v1 ( ( node<<1 ) + 1 )
#define v2 v1 + 1 
#define LEFT v1 , a , mi
#define RIGHT v2 , mi + 1 , b 
#define N 1000000

typedef vector< int > vi;
typedef long long ll;
typedef vector< vi > vii;
struct comida{
	int P,C,F;
	comida(){ P = 0; C = 0 , F = 0;}
	comida( int x , int y , int z ){ P = x , C = y,F = z;}
};
bool operator ==( const comida &a , const comida &b ){
	if( a.P == b.P && a.C == b.C && a.F == b.F ) return 1;
	return 0;
}
bool operator != ( const comida &a , const comida &b ){
	return !(a == b );
}
comida operator +( const comida &a , const comida &b ){
	comida c;
	c.P = a.P + b.P;
	c.C = a.C + b.C;
	c.F = a.F + b.F;
	return c;
}
comida memo[ N ] , A[ N ];

comida dp( int mask  ){
	if( mask == 0 ) return comida();
	if( memo[ mask ] != comida() ) return memo[ mask ];
	int i = 31 - __builtin_clz( mask );
	return memo[ mask ] = dp( mask ^ ( 1<< i ) ) + A[ i ];
}

int main(){
	int cases;
	cin>>cases;
	REP( k , cases ){
		int P, C ,F, n;
		cin>>P>>C>>F;
		cin>>n;
		REP( i , N ) memo[ i ] = comida();
		REP( i , n ){
			int x, y ,z;
			cin>>x>>y>>z;
			A[ i ] = comida( x , y , z );
		}
		bool b = 0;
		for( int mask = 0 ; mask < ( 1 << n ) ; mask++ ){
			comida ans = dp( mask );
			if( ans.P == P && ans.C == C && ans.F == F ){ b = 1; break;}
		}
		if( b == 1 ) printf("Case #%d: yes\n", k + 1 );
		else  printf("Case #%d: no\n", k + 1 );
	}
}

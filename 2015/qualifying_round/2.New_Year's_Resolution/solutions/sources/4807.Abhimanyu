'''
Created on 10-Jan-2015

@author: abhimanyu
'''
import sys
import numpy as np

class CookingTheBooks(object):
    '''
    HackerCup 2015 Question No. 1 is Cooking the Books.
    '''
    def __init__(self, inpFile, outFile):
        '''
        Constructor Takes INputfile name as input.
        '''
        self._inpfile = inpFile
        self._outfile = outFile
    
    def findMinimumFromNum(self,strval):
        retval = list(strval.rstrip('\n'))
        strlen = len(retval)
        minval=''
        try:
            minval = retval[0]
        except IndexError:
            print 'Input value length should be at least in One Digit'
            sys.exit(0)
        curr_index = 0
        for i in range(strlen):
            if ((retval[i]<=minval) and (retval[i]!= '0')) :
                minval = retval[i]
                curr_index = i
        temp = retval[0]
        retval[0] = retval[curr_index]
        retval[curr_index] = temp
        return ''.join(retval)
    
    def findMaximumFromNum(self,strval):
        retval = list(strval.rstrip('\n'))
        strlen = len(retval)
        maxval=''
        try:
            maxval = retval[0]
        except IndexError:
            print 'Input value length should be at least in One Digit'
            sys.exit(0)
        curr_index = 0
        for i in range(strlen):
            if ((retval[i]>=maxval) and (retval[i]!= '0')) :
                maxval = retval[i]
                curr_index = i
        temp = retval[0]
        retval[0] = retval[curr_index]
        retval[curr_index] = temp
        return ''.join(retval)
    
    def solveProblem(self):
        inpfile = open(self._inpfile,'r')
        outfile = open(self._outfile,'w')
        ttc = int(inpfile.readline())
        for i in range(ttc):
            moneyval = inpfile.readline()
            outfile.write("Case #{0}: {1} {2}\n".format(i+1,self.findMinimumFromNum(moneyval),self.findMaximumFromNum(moneyval)))
        inpfile.close()
        outfile.close()
        print "Finished .."

class NewYearResolution(object):
    '''2nd Problem of the Hackercup 2015'''
    def __init__(self, inpFile, outFile):
        '''Take input and output file as initial parameters.'''
        self._inpfile = inpFile
        self._outfile = outFile
        self._sumexists = False
    
    def isCurSumLessEqualsTargetSum(self,curList, targetList):
        for i in range(len(curList)):
            if curList[i] > targetList[i]:
                return False
        return True 
    
    def isListEqual(self, fList, secList):
        for i in range(len(fList)):
            if fList[i]!=secList[i]:
                return False
        return True
    
    def getAddedList(self, fList, secList):
        addedList = list(np.array(fList) + np.array(secList))
        return addedList
    
    def findWhetherFoodEatable(self, inpFoodList, foodListLen, curindex, cur_sum, target_sum):
        if self.isListEqual(cur_sum, target_sum):
            self._sumexists = True
            return
        else:
            for i in range(curindex,foodListLen):
                if self.isCurSumLessEqualsTargetSum(self.getAddedList(cur_sum,inpFoodList[i]), target_sum):
                    self.findWhetherFoodEatable(inpFoodList, foodListLen, i+1, self.getAddedList(cur_sum,inpFoodList[i]), target_sum)
    
    def isResolutionOk(self,inpFoodList, target_quantity):
        curSum = [0,0,0]
        self.findWhetherFoodEatable(inpFoodList, len(inpFoodList), 0, curSum, target_quantity)
        if(self._sumexists):
            self._sumexists = False
            return True
        else:
            return False
        
    def solveProblem(self):
        inpfile = open(self._inpfile,'r')
        outfile = open(self._outfile,'w')
        ttc = int(inpfile.readline())
        for i in range(ttc):
            input_required_str = (inpfile.readline().rstrip('\n')).split()
            input_required = [int(input_required_str[k]) for k in range(len(input_required_str))]
            noOfFoods = int(inpfile.readline())
            inpFoodProteins = []
            for j in range(noOfFoods):
                inpFoodProteins_str = (inpfile.readline().rstrip('\n')).split()
                inpFoodProteins.append([int(inpFoodProteins_str[k]) for k in range(len(inpFoodProteins_str))])
                print j
            if self.isResolutionOk(inpFoodProteins, input_required):
                outfile.write('Case #{0:d}: yes'.format(i+1))
            else:
                outfile.write('Case #{0:d}: no'.format(i+1))
            outfile.write('\n')
        print "Finished ..."

def main():
    inpfile = "new_years_resolution.txt"
    outfile = "b.txt"
    #ctb = CookingTheBooks(inpfile,outfile)
    nyr = NewYearResolution(inpfile, outfile)
    nyr.solveProblem()

if __name__ == '__main__':
    main()
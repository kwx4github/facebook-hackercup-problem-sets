//package hackercup2015

import scala.collection.mutable.{ListBuffer, HashSet}

/**
 * Created by dimitar on 1/9/15.
 */
object Resolution {

  def main(args: Array[String]) {
    val cases = readInt()

    for (i<-1 to cases) {
      val food = readLine().split(" ")
      val target = (food(0).toInt, food(1).toInt, food(2).toInt)

      val foods = new ListBuffer[(Int, Int, Int)]
      val numOfFoods = readInt()
      for (j <-0 until numOfFoods) {
        val f = readLine().split(" ")
        foods.append((f(0).toInt, f(1).toInt, f(2).toInt))
      }

      val result = new HashSet[String]
      possible(target, foods, result)

      if (result.isEmpty) {
        println("Case #"+i+": no")
      } else {
        println("Case #"+i+": yes")
      }

    }
  }

  private def possible(target: (Int,Int,Int), foods: ListBuffer[(Int, Int,Int)],
                       result: HashSet[String]): Unit = {
    if (target._1 < 0 || target._2 < 0 || target._3 < 0) {
      return
    } else if (target._1 == 0 && target._2 == 0 && target._3 == 0) {
      result.add("yes")
      return
    } else {
      for (i<- 0 until foods.size) {
        val f = foods(i)
        val newList = foods.clone()
        newList.remove(i)
        possible((target._1 - f._1, target._2 - f._2, target._3 - f._3), newList, result)
      }
    }
  }
}

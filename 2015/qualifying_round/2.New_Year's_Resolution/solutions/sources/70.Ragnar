#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <bitset>
#include <stack>
#include <string>
#include <sstream>
#include <math.h>

#define REP(i,n) for(int i = 0; i<(n); i++)
#define ITER(i,v) for(auto i : v)
#define INF 1000000000

using namespace std;

template <class T>
using priority_queue_asc =  priority_queue<T,vector<T>, greater<T> >;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
typedef vector<bool> vb;
struct S{int p,c,f;
	S operator+(const S rhs) const;
	int test();
};
S target;
S S::operator+(const S rhs) const{
	S result = *this;
	result.p += rhs.p;
	result.c += rhs.c;
	result.f += rhs.f;
	return result;
}

int S::test(){
	if(p == target.p && c == target.c && f == target.f)
		return 1;
	if(p <= target.p && c <= target.c && f <= target.f)
		return 0;
	return -1;
}

vector<S> g;
int N;

bool test(int i, S done){
	S s = done + g[i];
	if(s.test()==1)
		return true;
	if(i==N-1)
		return false;
	if(s.test()==0)
		if(test(i+1, s)) return true;
	if(test(i+1,done)) return true;
	return false;
}

int main(){
	int TC;
	cin >> TC;
	REP(tc,TC){
		cin >> target.p >> target.c >> target.f >> N;
		g.resize(N);
		REP(i,N)
			cin >> g[i].p >> g[i].c >> g[i].f;
		bool possible = test(0,{0,0,0});

		cout << "Case #"<<tc+1<<": "<<(possible?"yes":"no")<<"\n";
	}
	return 0;
}



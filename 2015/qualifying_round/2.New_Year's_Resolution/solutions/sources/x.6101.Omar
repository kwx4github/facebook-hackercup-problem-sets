/* 
 * File:   main.cpp
 * Author: Rechard3
 *
 * Created on January 9, 2015, 3:27 PM
 */

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>

#define repi(i,f,l) for(int i=f ; i<(l) ; ++i)
#define repd(i,f,l) for(int i=f ; i>=(l) ; --i)
#define CONCAT(x,y) x##y
#define UNIQUENAME(x, y) CONCAT(x, y)
#define forall(i,n) int UNIQUENAME(_size_,__LINE__) = (n).size(); repi(i,0,UNIQUENAME(_size_,__LINE__))
#define all(s) (s).begin(), (s).end()
#define OO 0x7fffffff
#define clr(memory, val) memset(memory,val, sizeof(memory))
#define read(file) freopen(file, "r", stdin)
#define write(file) freopen(file, "w", stdout)
#define IO(In, Out) freopen(In, "r", stdin); freopen(Out, "w", stdout)
#define xx first
#define yy second


using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<pair<int, int> >  vii;


#define setBit(x,i)  ((x)|=(1<<i))
#define clrBit(x,i)  ((x)&=(~(1<<i)))
#define chkBit(x,i)  ((x)&(1<<i))

struct calory
{
    int gp, gc, gf;
};

int n;
calory target = {0,0,0};
calory food[22];
bool check(int x)
{
    calory curCal = {0,0,0};
    repi(i,0,n)
    {
        if(chkBit(x, i))
        {
            curCal.gc += food[i].gc;
            curCal.gf += food[i].gf;
            curCal.gp += food[i].gp;
        }
    }
    if((curCal.gc==target.gc)&&(curCal.gf==target.gf)&&(curCal.gp == target.gp))
    {
        return true;
    }
    
    return false;
}


int main(int argc, char** argv) {

    freopen("new_years_resolution.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    
    clr(food, 0);
    int cc = 0; cin >> cc;
    cc++;
    repi(c,1,cc)
    {
        // Extract target info :
        cin >> target.gp >> target.gc >> target.gf;
        
        // Extract food info :
        cin >> n;
        repi(i,0,n)
        {
            cin >> food[i].gp >> food[i].gc >> food[i].gf;
        }
        
        // Algorithm :
        cout << "Case #" << c << ": ";
        int upperLimit = 1<<n;
        bool good = false;
        repi(i,0,upperLimit)
        {
            if(check(i))
            {
                cout << "Yes" << endl;
                good = true;
                break;
            }
        }
        
        if(!good)
        {
            cout << "No" << endl;
        }
    }
    
    
    return 0;
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NewYear
{
    class Program
    {
        static void Main(string[] args)
        {
            int T;
            int N;
            T = int.Parse(Console.ReadLine());
            for (int i = 1; i <= T; i++)
            {
                Food objective = Program.ReadFood();
                N = int.Parse(Console.ReadLine());
                Food[] foods = new Food[N];
                Stack<Item> stack = new Stack<Item>();
                bool found = false;
                for (int j = 0; j < N; j++)
                {
                    foods[j] = Program.ReadFood();
                    stack.Push(new Item()
                    {
                        Indexes = new List<int>() { j },
                        Total = new Food()
                        {
                            GP = foods[j].GP,
                            GC = foods[j].GC,
                            GF = foods[j].GF
                        }
                    });
                }
                while (stack.Count > 0)
                {
                    Item item = stack.Pop();
                    if (
                        (item.Total.GP == objective.GP) &&
                        (item.Total.GC == objective.GC) &&
                        (item.Total.GF == objective.GF))
                    {
                        found = true;
                        break;
                    }
                    else if (
                        (item.Total.GP > objective.GP) ||
                        (item.Total.GC > objective.GC) ||
                        (item.Total.GF > objective.GF))
                    {
                        continue;
                    }

                    for (int j = item.Indexes.Max()+1; j < N; j++)
                    {
                        Item newItem = new Item(){
                            Indexes = new List<int>(),
                            Total = item.Total
                        };
                        newItem.Indexes.AddRange(item.Indexes);
                        newItem.Indexes.Add(j);
                        Food total = newItem.Total;
                        total.GP += foods[j].GP;
                        total.GC += foods[j].GC;
                        total.GF += foods[j].GF;
                        newItem.Total = total;
                        stack.Push(newItem);
                    }
                }
                Console.WriteLine(string.Format("Case #{0}: {1}", i, found ? "yes" : "no"));
            }
        }

        private static Food ReadFood()
        {
            string[] Gx = Console.ReadLine().Split(' ');
            return new Food()
            {
                GP = int.Parse(Gx[0]),
                GC = int.Parse(Gx[1]),
                GF = int.Parse(Gx[2])
            };
        }

        private struct Food
        {
            public int GP { get; set; }
            public int GC { get; set; }
            public int GF { get; set; }
        }
        private struct Item
        {
            public List<int> Indexes { get; set; }
            public Food Total { get; set; }
        }
    }
}

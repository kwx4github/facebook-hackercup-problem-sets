#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <iterator>
#include <list>
#include <set>
#include <queue>
#include <numeric>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <valarray>
#include <cassert>

#define all(c) (c).begin(), (c).end()

using namespace std;

typedef long long lli;
typedef long li;

template <class T>
bool Maximize (T &v, T nv) { if (nv > v) return v = nv, 1; return 0; }

template <class T>
bool Minimize (T &v, T nv) { if (nv < v) return v = nv, 1; return 0; }

template <class T>
T Mod (T &v, T mod) { return v = (v % mod + mod) % mod; }

const lli INFLL = numeric_limits<lli>::max();
const li INF = numeric_limits<li>::max();
const li di[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

void solve ()
{
	li tests;
	scanf("%ld", &tests);
	for (li test = 1; test <= tests; ++ test)
	{
		valarray <li> need(3);
		for (li i = 0; i < 3; ++ i)
			scanf("%ld", &need[i]);
		li n;
		scanf("%ld", &n);
		vector<valarray<li> > a(n, valarray<li>(3));
		for (li i = 0; i < n; ++ i)
			for (li j = 0; j < 3; ++ j)
				scanf("%ld", &a[i][j]);
		bool ok = 0;
		for (li i = 0; i < (1 << n); ++ i)
		{
			valarray <li> s(0L, 3);
			for (li j = 0; j < n; ++ j)
			{
				if (i >> j & 1) s += a[j];
			}
			ok |= !(s != need).sum();
		}
		printf("Case #%ld: %s\n", test, ok ? "yes" : "no");
	}
}

void init ()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

int main()
{
	init();
	solve();
	return 0;
}

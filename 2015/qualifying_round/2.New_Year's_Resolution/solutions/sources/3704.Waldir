#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>

using namespace std;

#define pb push_back
#define mp make_pair

#define ALL(x) (x).begin(),(x).end()
#define CLR(a,b) memset(a,b,sizeof(a))
#define REPN(x,a,b) for (int x=a; x<b;++x)
#define REP(x,a,b) for(x = a; x < b; ++x)

#define dbg(x) cout << #x << " = " << x << endl;
#define dbg2(x, y) cout << #x << " = " << x << "  " << #y << " = " << y << endl;
#define dbg3(x, y, z) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << endl;
#define dbg4(x, y, z, w) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << "  " << #w << " = " << w <<  endl;
#define MAXN 1<<28

/* {{{ FAST integer input */
#define X10(n)    ((n << 3) + (n << 1))
#define RdI        readint
const int MAXR = 65536;
char buf[MAXR], *lim = buf + MAXR - 1, *now = lim + 1;
bool adapt(){ // Returns true if there is a number waiting to be read, false otherwise
    while(now <= lim && !isdigit(*now)) ++now;
    if(now > lim){
        int r = fread(buf, 1, MAXR-1, stdin);
        buf[r] = 0;
        lim = buf + r - 1;
        if(r == MAXR - 1){
            while(isdigit(*lim)) ungetc(*lim--, stdin);
            if(*lim == '-') ungetc(*lim--, stdin);
        }
        now = buf;
    }
    while(now <= lim && !isdigit(*now)) ++now;
    return now <= lim;
}
bool readint(int& n){ // Returns true on success, false on failure
    if(!adapt()) return false;
    bool ngtv = *(now - 1) == '-';
    for(n = 0; isdigit(*now); n = X10(n) + *now++ - '0');
    if(ngtv) n = -n;
    return true;
}
/* }}} end FAST integer input */

int t, cas, i, P, C, F, N, p[21], c[21], f[21];
int dp[21][1 << 21];

int possible(int cur, int bitmask, int tP, int tC, int tF){
    if(tP > P || tC > C || tF > F) return 2;
    if(tP == P && tC == C && tF == F) return 1;
    if(cur >= N) return 2;
    if(dp[cur][bitmask] != 0) return dp[cur][bitmask];

    int ans = possible(cur + 1, bitmask, tP, tC, tF);
    if(((1 << cur) & bitmask) == 0){
        int temp = possible(cur + 1, bitmask | (1 << cur), tP + p[cur], tC + c[cur], tF + f[cur]);
        if(temp == 1) ans = temp;
    }
    return dp[cur][bitmask] = ans;
}

int main() {
    RdI(t);
    t++;
    REP(cas, 1, t){
        RdI(P); RdI(C); RdI(F); RdI(N);
        REP(i, 0, N){
            RdI(p[i]); RdI(c[i]); RdI(f[i]);
        }
        memset(dp, 0, sizeof dp);
        if(possible(0, 0, 0, 0, 0) == 1) printf("Case #%d: yes\n", cas);
        else printf("Case #%d: no\n", cas);
    }
	return 0;
}
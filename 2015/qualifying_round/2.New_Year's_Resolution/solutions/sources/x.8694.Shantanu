#include<bits/stdc++.h>

using namespace std;

long long GP[101],GC[101],GF[101];
long long p,c,f;
//long long p1,c1,f1;

bool isSubsetSum( long long n, long long p1,long long c1,long long f1 )
{
   // Base Cases
   if (p1== 0)
     {if(c1==c&&f1==f)return true;
     else return false;
     }

   if (n == 0 && p1 != 0)
     return false;

   // If last element is greater than sum, then ignore it
   if (GP[n-1] > p1)
     return isSubsetSum( n-1, p1,c1,f1);

   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
   return (isSubsetSum(n-1,p1,c1,f1) || isSubsetSum(n-1, p1-GP[n-1],c1+GC[n-1],f1+GF[n-1]));
}


int main()
{
int t,ca=1;

cin>>t;

while(t--)
{
    long long n,i,j,k;
    //long long p,c,f;



    cin>>p>>c>>f;
     cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>GP[i]>>GC[i]>>GF[i];
    }
if(isSubsetSum(n,p,0,0))
    cout<<"Case #"<<ca<<": "<<"yes\n";
else
    cout<<"Case #"<<ca<<": "<<"no\n";
    ca++;



}
}

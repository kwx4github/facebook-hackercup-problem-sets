//Tuan Tran
//1/11/15
#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <complex>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <sstream>
#include <vector>
using namespace std;


#define FLUSH while(getchar() != '\n')

struct calories{
	vector<int> P, C, F;
	vector<bool> eaten;
};

void calculate(calories &s, int i, int GP, int GC, int GF, bool &canEat){
	if (GP >= 0 || GC >= 0 || GF >= 0){
		if (GP == 0 && GC == 0 && GF == 0){
			canEat = true;
		}else if (i < s.P.size() && !canEat){
			s.eaten[i] = true;
			calculate(s, i + 1, GP - s.P[i], GC - s.C[i], GF - s.F[i], canEat);

			s.eaten[i] = false;
			calculate(s, i + 1, GP, GC, GF, canEat);			
		}
	}
}


int main() {	
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	int numCases, GP, GC, GF, numFoods, amount;
	deque<int> P, C, F;
	bool canEat;
	calories s;

	cin >> numCases; FLUSH;
	
	for (int i = 1; i <= numCases; i++) {
		canEat = false;
		cout << "Case #" << i << ": ";
		s.P.clear(); s.C.clear(); s.F.clear();

		cin >> GP >> GC >> GF; FLUSH;
		cin >> numFoods; FLUSH;

		s.eaten = vector<bool>(numFoods, false);
		for (int j = 0; j < numFoods; j++){
			cin >> amount; s.P.push_back(amount);
			cin >> amount; s.C.push_back(amount);
			cin >> amount; s.F.push_back(amount);
			FLUSH;
		}
		calculate(s, 0, GP, GC, GF, canEat);
		cout << (canEat ? "Yes" : "No") << endl;
	}

	system("pause");
}




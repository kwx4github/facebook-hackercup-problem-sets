import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;

public class HackerCup2015NewYearResolution {
	public static void main(String[] args) throws FileNotFoundException {
		// InputStream inputStream = System.in;
		InputStream inputStream = new FileInputStream(new File("new_years_resolution.txt"));
//		OutputStream outputStream = System.out;
		OutputStream outputStream = new FileOutputStream(new File("output.txt"));
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Solver solver = new Solver();
		solver.solve(in, out);
		out.close();
	}
}

class Solver {
	int p[], c[], f[];

	private boolean canConsume(int gp, int gc, int gf, int index) {
		if(gp == 0 && gc == 0 && gf ==0) {
			return true;
		}
		if(index == p.length || gp < 0 || gc < 0 || gf < 0)
			return false;
		else {
			return canConsume(gp - p[index], gc - c[index], gf - f[index], index + 1) || canConsume(gp, gc, gf, index+1);
		}
	}

	public void solve(InputReader in, OutputWriter out) {
		int t = in.readInt();
		int gp, gc, gf, n;
		for (int m = 0; m < t; ++m) {
			gp = in.readInt();
			gc = in.readInt();
			gf = in.readInt();
			n = in.readInt();
			p = new int[n];
			c = new int[n];
			f = new int[n];
			for (int i = 0; i < n; i++) {
				p[i] = in.readInt();
				c[i] = in.readInt();
				f[i] = in.readInt();
			}
			boolean can = canConsume(gp, gc, gf, 0);
			if (can) {
				out.printLine("Case #" + (m+1) + ": " + "yes");
			} else {
				out.printLine("Case #" + (m+1) + ": " + "no");
			}
		}
	}

}

class InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public static boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
}

class OutputWriter {
	private final PrintWriter writer;

	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
				outputStream)));
	}

	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}

	public void print(Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}

	public void printLine(Object... objects) {
		print(objects);
		writer.println();
	}

	public void close() {
		writer.close();
	}
}

class IOUtils {
	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

	public static void readIntArrays(InputReader in, int[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readInt();
		}
	}
}
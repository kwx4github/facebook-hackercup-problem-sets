#include <iostream>
#include <math.h>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <sstream>
#include <bitset>
#include <fstream>
#include <iostream>

#define REP(i,n)  for(int i = 0; i<(n); i++)
#define REPR(i,n) for(int i = (n)-1; i>=0; i--)
#define ITER(i,v) for(auto i : (v))
#define INF 1000000000

using namespace std;

typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef vector<vii> vvii;

typedef long long ll;

int TC,N, P,C,F,t, size;
vi foodP, foodC, foodF;



int main() {
	ifstream in;
	in.open( "Fin.txt" );
	in >> TC;
	t = 0;
	
	ofstream out;
	out.open( "Fout.txt" );
	while (TC--) {
		t++;				
		in >> P >> C >> F;	
				
		in >> N;
		foodP.clear();
		foodP.resize(N);
		foodC.clear();
		foodC.resize(N);
		foodF.clear();
		foodF.resize(N);
		
		REP(a, N)
		{
			in >> foodP[a] >> foodC[a] >> foodF[a];
			//cout << foodP[a] << foodC[a] << foodF[a] << "\n";
		}
			
		int m = 0;
		int curP, curC, curF;
		bool reached = false;
		REP(count, pow(2,N))
		{
			curP = 0; curC = 0; curF = 0;
			m = count;
			REP(i, N)
			{
				if(((m >> i) & 1) == 1)
				{
					curP += foodP[i];
					curC += foodC[i];
					curF += foodF[i];
				}
			}
			if(curP == P && curC == C && curF == F)
			{
				reached = true;
				break;
			}
		}
		out << "Case #" << t << ": ";
		if(reached)
			out << "yes";
		else out << "no";
		out << "\n";
					
		
		
	}
	out.close();
	return 0;
}




ans=[]
def subset_sum(p,numbers, target, partial=[]):
    s =0
    for i in range(len(partial)):
        s=s+p[partial[i]]

    # check if the partial sum is equals to target
    if s == target: 
        ans.append(partial)
    if s >= target:
        return  # if we reach the number why bother to continue

    for i in range(len(numbers)):
        n  = numbers[i]
        remaining = numbers[i+1:]
        subset_sum(p,remaining, target, partial + [n]) 


if __name__ == "__main__":
    f1=open('3.txt','r')
    f2=open('4.txt','w',newline="\r\n")
    t=int(f1.readline())
    for y in range(1,t+1):
        s=f1.readline()
        ans=[]
        a=[]
        for str in s.split():
            a.append(int(str))
        n=int(f1.readline())
        p=[]
        c=[]
        f=[]
        flag=0
        for i in range(0,n):
            s=f1.readline()
            s=s.split()
            p.append(int(s[0]))
            c.append(int(s[1]))
            f.append(int(s[2]))
            
        subset_sum(p,list(range(len(p))),a[0])
        for i in range(len(ans)):
            if(flag==1):
                break
            s1=0
            s2=0
            for j in range(len(ans[i])):
                s1=s1+c[ans[i][j]]
                s2=s2+f[ans[i][j]]
            if(s1==a[1] and s2==a[2]):
                flag=1
                break
        s="Case #"+repr(y)+": "
        f2.write(s)
        if(flag==1):
            f2.write('yes')
        else:
            f2.write('no')
        f2.write("\n")
    f2.close()
    f1.close()

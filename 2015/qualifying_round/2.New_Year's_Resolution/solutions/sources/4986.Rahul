#include<stdio.h>
#include <stdlib.h>
 
#define ARRAYSIZE(a) (sizeof(a))/(sizeof(a[0]))
 
static int total_nodes;
int c,p,f,n,times,times1=0,flag=0;
int *arr[3];

// prin ts subset found
int printSubset(int A[], int size)
{
	int i,sum_c=0,sum_f=0;
    for(i = 0; i < size; i++)
    {
       // printf("%d ",A[i]);
        sum_c=sum_c+arr[1][A[i]];
        sum_f=sum_f+arr[2][A[i]];
    }
 
   // printf("\n");
    if(sum_c==c && sum_f==f)
    return 1;
    else 
    return 0;
}
 
// inputs
// s            - set vector
// t            - tuplet vector
// s_size       - set size
// t_size       - tuplet size so far
// sum          - sum so far
// ite          - nodes count
// target_sum   - sum to be found
void subset_sum( int t[],
                int s_size, int t_size,
                int sum, int ite,
                int const target_sum)
{
	int i;
    total_nodes++;
    if( target_sum == sum )
    {
        // We found subset
      
        if(printSubset(t, t_size))
        {
        	flag=1;
        
        printf("Case #%d: yes",times1);
        }
         // Exclude previously added item and consider next candidate
        else
        subset_sum(t, s_size, t_size-1, sum - arr[0][ite], ite + 1, target_sum);
        return;
    }
    else
    {
        // generate nodes along the breadth
        
        for(i = ite; i < s_size; i++ )
        {
            t[t_size] =i;
            // consider next level node (along depth)
            subset_sum( t, s_size, t_size + 1, sum + arr[0][i], i + 1, target_sum);
        }
    }
}
 
// Wrapper to print subsets that sum to target_sum
// input is weights vector and target_sum
void generateSubsets(int size, int target_sum)
{
    int *tuplet_vector = (int *)malloc(size * sizeof(int));
 
    subset_sum(tuplet_vector, size, 0, 0, 0, target_sum);
 
    free(tuplet_vector);
}
 
int main()
{
	int i,j;

scanf("%d",&times);
	while(times--)
	{
		times1++;
		flag=0;
	scanf("%d",&p);
	scanf("%d",&c);
	scanf("%d",&f);
	scanf("%d",&n);
	 arr[0]=(int *)malloc(sizeof(int)*n);
	  arr[1]=(int *)malloc(sizeof(int)*n);
	   arr[2]=(int *)malloc(sizeof(int)*n);
	for(i=0;i<n;i++)
	for(j=0;j<3;j++)
	scanf("%d",&arr[j][i]);
	generateSubsets(n,p);
	if(!flag)
	 printf("Case #%d: no",times1);
	printf("\n");
	}
	
    //int weights[] = {10, 7, 5, 18, 12, 20, 15};
    //int size = ARRAYSIZE(weights);
 
    //generateSubsets(weights, size, 35);
    printf("Nodes generated %d\n", total_nodes);
    return 0;
}
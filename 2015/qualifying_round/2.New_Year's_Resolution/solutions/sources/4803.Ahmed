//////////////////////////////////////////////////////
//
//  New Year's Resolution
//  30 points
//  Facebook Hacker Cup 2015
//  Created by Moussa on 11-JAN-2015 12:35 AM
//  Copyright (c) 2014 Ahmsayat. All rights reserved.
//
//////////////////////////////////////////////////////
/*
 New Year's Resolution
 30 points
 Download Input File
 Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some research and has found out that calories come from three main sources, called macronutrients: protein, carbohydrates, and fat. Alex wants to get the right balance of protein, carbohydrates, and fat to have a balanced diet. For each available food, Alex can only choose to eat it or not eat it. He can't eat a certain food more than once, and he can't eat a fractional amount of a food.
 Input
 Input begins with an integer T, the number of test cases. For each test case, the first line consists of three space-separated integers: GP, GC, and GF, which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. The next line has the number of foods for that test case, an integer N. The next N lines each consist of three space-separated integers: P, C, and F, which represent the amount of protein, carbohydrates, and fat in that food, respectively.
 
 Output
 For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for Alex to eat the exact amount of each macronutrient, or "no" if it is not possible.
 
 Constraints
 1 ≤ T ≤ 20
 1 ≤ N ≤ 20
 10 ≤ GP, GC, GF ≤ 1000
 10 ≤ P, C, F ≤ 1000
 */

//New Year's Resolution

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <stdio.h>
#include <math.h>

using namespace std;

int protein, carbohydrates, fat;
int P[20], C[20], F[20];
bool final_solution_true;

// A Dynamic Programming botton up manner solution for subset sum problem
// Returns true if there is a subset of set[] with sun equal to given sum
bool isSubsetSum0(int set[], int n, int sum)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    bool subset[sum+1][n+1];
    
    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
        subset[0][i] = true;
    
    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
        subset[i][0] = false;
    
    // Fill the subset table in botton up manner
    for (int i = 1; i <= sum; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            subset[i][j] = subset[i][j-1];
            if (i >= set[j-1])
                subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
        }
    }
    
    /* // uncomment this code to print table
     for (int i = 0; i <= sum; i++)
     {
     for (int j = 0; j <= n; j++)
     printf ("%4d", subset[i][j]);
     printf("\n");
     } */
    
    return subset[sum][n];
}

// A recursive solution for subset sum problem
bool isSubSetSum1(int set[], int n, int sum)
{
    // Base Cases
    if (sum == 0)
        return true;
    if (n == 0 && sum != 0)
        return false;
    
    //If last element is greater than sum, then ignore it
    if (set[n-1] > sum) return isSubSetSum1(set, n-1, sum);
    
    /* else, check if sum can be obtained by any of the following
     (a) including the last element
     (b) excluding the last element   */
    return isSubSetSum1(set, n-1, sum) || isSubSetSum1(set, n-1, sum-set[n-1]);
}

// A recursive solution for subset sum problem
bool Moussa_isSubSetSum2(int set[], int n, int sum, vector<int> solution)
{
    // Base Cases
    if (sum == 0)
    {
        for(int i=0; i< solution.size(); i++)
            cout << solution[i] << " ";
        cout << endl;
        return true;
    }
    
    if (n == 0 && sum != 0)
        return false;
    
    //If last element is greater than sum, then ignore it
    //if (set[n-1] > sum) return Moussa_isSubSetSum2(set, n-1, sum);
    
    /* else, check if sum can be obtained by any of the following
     (a) including the last element
     (b) excluding the last element   */
    bool a_include_last = Moussa_isSubSetSum2(set, n-1, sum-set[n-1], solution);
    if (a_include_last == true)
        solution.push_back(n-1);
    
    return Moussa_isSubSetSum2(set, n-1, sum, solution) || a_include_last;
}

// Exponential
// A recursive solution for 3 subset sum problem
bool Moussa_isSubSetSum0(int set1[], int set2[], int set3[], int n, int sum1, int sum2, int sum3)
{
    // Base Cases
    if (sum1 == 0 && sum2 == 0 && sum3 == 0)
        return true;
    
    if (n < 0 && (sum1 != 0 || sum2 != 0 || sum3 != 0))
        return false;
    
    // If last element is greater than sum, then ignore it
    if (set1[n-1] > sum1 && set2[n-1] > sum2 && set3[n-1] > sum3)
        return Moussa_isSubSetSum0(set1, set2, set3, n-1, sum1, sum2, sum3);
    
    /* else, check if sum can be obtained by any of the following
     (a) including the last element
     (b) excluding the last element   */
    return Moussa_isSubSetSum0(set1, set2, set3, n-1, sum1, sum2, sum3) || Moussa_isSubSetSum0(set1, set2, set3, n-1, sum1-set1[n-1], sum2-set1[n-1], sum3-set1[n-1]);
}

// Pseudo-polynomial time using Dynamic programming
// Time complexity of the solution is O(sum*n).
// A Dynamic Programming botton up manner solution for subset sum problem
// Returns true if there is a subset of set[] with sun equal to given sum
bool Moussa_isSubSetSum1(int set1[], int set2[], int set3[], int n, int sum1, int sum2, int sum3)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    bool subset[sum1+1][n+1];
    
    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
        subset[0][i] = true;
    
    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum1; i++)
        subset[i][0] = false;
    
    // Fill the subset table in botton up manner
    for (int i = 1; i <= sum1; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            subset[i][j] = subset[i][j-1];
            if (i >= set1[j-1])
                subset[i][j] = subset[i][j] || subset[i - set1[j-1]][j-1];
        }
    }
    
    
    // uncomment this code to print table
    for (int i = 0; i <= sum1; i++)
    {
        for (int j = 0; j <= n; j++)
            printf ("%4d", subset[i][j]);
        printf("\n");
    }
    
    
    if(subset[sum1][n] == true)
    {
        int i = sum1;
        int j = n;
        
        while(i > 0 && n >= 0)
        {
            if(subset[i][j] == true)
            {
                i = i - set1[j-1];
                cout << j << " ";
            }
            
            j--;
        }
        
        cout << endl;
    }
    
    return subset[sum1][n];
}

string bitmask(int n)
{
    string s = "";
    while(n > 0)
    {
        if(n%2 == 0)
            s = '0' + s;
        else
            s = '1' + s;
        
        n = n / 2;
    }
    return s;
}

void brutforce(int N)
{
    for(int i=0; i<(int)pow(2.0, (double)N); i++)
        cout << bitmask(i) << endl;
}

//Working correctly
//void combine(int[] set, vector<int> sol, int index)
void combine(int set[], int N, vector<int> sol, int index, int goal)
//void combine(int[] a, List<int> outstr, int index)
{
    for (int i = index; i < N; i++)
    {
        int count = 0;
        for(int j = 0; j < sol.size(); j++)
            count += set[sol[j]];
        
        if ((set[i] + count) == goal)
        {
            bool fats = false; bool carb = false;
            
            //carbohydrates
            int carb_cnt = 0; int fat_cnt = 0;
            for(int j = 0; j < sol.size(); j++)
            {
                carb_cnt+= C[sol[j]];
                fat_cnt+= F[sol[j]];
            }
            
            carb_cnt+= C[i];
            fat_cnt+= F[i];
            
            if(carb_cnt == carbohydrates && fat_cnt == fat)
            {
             			/*
                         for(int j = 0; j < sol.size(); j++)
                         cout << set[sol[j]] << " ";
                         cout << set[i] << endl;
                         */
                final_solution_true = true;
                //cout << "YEEEES" << endl;
            }
        }
        
        sol.push_back(i);
        
        combine(set, N, sol, i + 1, goal);
        
        sol.pop_back();
    }
}

void findNumbers(int set[], int N, int index, int current, int goal, vector<int> sol)
{
    if (N < index || current > goal)
        return;
    
    for (int i = index; i < N; i++)
    {
        if (current + set[i] == goal)
        {
            bool fats = false; bool carb = false;
            
            //carbohydrates
            int carb_cnt = 0; int fat_cnt = 0;
            
            for(int j = 0; j < sol.size(); j++)
            {
                carb_cnt+= C[sol[j]];
                fat_cnt+= F[sol[j]];
            }
            
            carb_cnt+= C[i];
            fat_cnt+= F[i];
            
            if(carb_cnt == carbohydrates && fat_cnt == fat)
            {
             			//cout << fat_cnt << " " << fat << endl;
                /*for(int j = 0; j < sol.size(); j++)
                 cout << set[sol[j]] << " ";
                 cout << set[i] << endl;*/
                final_solution_true = true;
                //cout << "YEEES" << endl;
            }
        }
        else if (current + set[i] < goal)
        {
            sol.push_back(i);
            findNumbers(set, N,  i + 1, current + set[i], goal, sol);
            sol.pop_back();
        }
    }
}

int main()
{
    //ifstream cin("/Ahmsayat/1/facebook/hacker cup/2015/Qualification Round/problem 2/2.input");
    
    int T; cin>>T;
    for (int t = 1; t<=T; t++)
    {
        
        cin >> protein >> carbohydrates >> fat;
        //cout << fat << endl;
        int N;
        cin >> N;
        
        for(int i=0; i<N; i++)
            cin >> P[i] >> C[i] >> F[i];
        
        vector<int> sol;
        sol.clear();
        final_solution_true = false;
        string result = "";
        findNumbers(P, N, 0, 0, protein, sol);
        //combine(P, N, sol, 0, protein);
        if(final_solution_true == true)
            cout << "Case #" << t << ": " << "yes" << endl;
        else
            cout << "Case #" << t << ": " << "no" << endl;
        /*	
         
         
         //if(Moussa_isSubSetSum0(P, C, F, N, protein, carbohydrates, fat) == true)
         if(Moussa_isSubSetSum2(P, N, protein, sol) == true)
         cout << "Case #" << t << ": " << "yes" << endl;
         else
         cout << "Case #" << t << ": " << "no" << endl;
         */	
    }
    return 0;
}

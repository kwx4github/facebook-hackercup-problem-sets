#include <iostream>
#include <algorithm>
#include <string>

#define all(x) x.begin(), x.end()
using namespace std;

struct portion {
    short proteins,
          carbs,
          fats;
};

typedef vector<portion> food;

bool recurse(short p, short c, short f, food fs, int i) {
    if (!p && !c && !f) {
        return true;
    }
    if (p < 0 || c < 0 || f < 0 || i < 0) {
        return false;
    }
    short np = p - fs[i].proteins,
          nc = c - fs[i].carbs,
          nf = f - fs[i].fats;
    return recurse(p, c, f, fs, i-1) ||
            recurse(np, nc, nf, fs, i-1);
}

bool solve(portion amount, food& foods) {
    return recurse(amount.proteins,
            amount.carbs,
            amount.fats,
            foods,
            foods.size());
}

int main() {
    short t;
    cin >> t;

    portion amount;
    food foods;
    int n;

    for (int i = 1; i <= t; ++i) {
        cin >> amount.proteins
                >> amount.carbs
                >> amount.fats
                >> n;

        foods.clear();
        foods.resize(n);

        for (int j = 0; j < n; ++j) {
            cin >> foods[j].proteins
                    >> foods[j].carbs
                    >> foods[j].fats;
        }
        cout << "Case #" << i << ": "
                << (solve(amount, foods) ? "yes" : "no")
                << endl;
    }

    return 0;
}

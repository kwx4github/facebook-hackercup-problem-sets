
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/**
 * Created by Leny on 10-Jan-15.
 *
 * Facebook HackerCup 2015 Qualification Round
 */
public class NewYearsResolution
{
/*
    static boolean[][][] x=new boolean[1000][1000][1000];
    static boolean[][][] filled=new boolean[1000][1000][1000];*/
    static short a[][]=new short[20][3];

    public static void main(String args[]) throws IOException
	{
		InputStreamReader isr = new InputStreamReader(System.in);
		BufferedReader br = new BufferedReader(isr);
        StringTokenizer st;
		int t = Integer.parseInt(br.readLine());
        int n,gp,gc,gf,i,j,k;
        for(i=1;i<=t;i++)
        {
            st=new StringTokenizer(br.readLine());
            gp=Integer.parseInt(st.nextToken());
            gc=Integer.parseInt(st.nextToken());
            gf=Integer.parseInt(st.nextToken());

            n=Integer.parseInt(br.readLine());
            for(j=0;j<n;j++)
            {
                st=new StringTokenizer(br.readLine());
                a[j][0]=Short.parseShort(st.nextToken());
                a[j][1]=Short.parseShort(st.nextToken());
                a[j][2]=Short.parseShort(st.nextToken());
            }
/*
            for(i=0;i<1001;i++)
                for(j=0;j<1001;j++)
                    for(k=0;k<1001;k++)
                        filled[i][j][k]=false;*/
            System.out.println("Case #"+i+": "+(canFill(0, n, gp, gc, gf)?"yes":"no"));
        }
	}
    static boolean canFill(int i,int n,int gp,int gc,int gf)
    {
        if(gp<0||gc<0||gf<0||i>n)
            return false;
        else if(gp==0&&gc==0&&gf==0)
            return true;
        /*
        else if(!filled[gp][gc][gf])
            x[gp][gc][gf]=canFill(i+1,n,gp-a[i][0],gc-a[i][1],gf-a[i][2])||canFill(i+1,n,gp,gc,gf);
        return x[gp][gc][gf];*/
        else if(i<n)
            return canFill(i+1,n,gp-a[i][0],gc-a[i][1],gf-a[i][2])||canFill(i+1,n,gp,gc,gf);
        else
            return false;
    }

}

#!/usr/bin/env python

import sys
from itertools import combinations

def main():
  fi = sys.stdin
  fo = sys.stdout
  caseCount = int(fi.readline().strip())
  for i in range(1, caseCount+1):
    gp, gc, gf, ps, cs, fs = readInput(fi)
    solution = solve(gp, gc, gf, ps, cs, fs)
    displayAndClear(fo, i, solution)

def readInput(f):
  gp, gc, gf = [int(arg) for arg in f.readline().split()]
  count = int(f.readline().strip())
  ps = []
  cs = []
  fs = []
  for i in range(count):
    p, c, fat = [int(arg) for arg in f.readline().split()] 
    ps.append(p)
    cs.append(c)
    fs.append(fat)
  return gp, gc, gf, ps, cs, fs

def displayAndClear(f, i, ok):
  f.write('Case #%d: %s\n' % (i, 'yes' if ok else 'no'))
  f.flush()

def solve(gp, gc, gf, ps, cs, fs):
  count = len(fs)
  indices = range(count)
  for i in range(count+1):
    for comb in combinations(indices, i):
      if satisfies(comb, gp, gc, gf, ps, cs, fs):
        return True
  return False

def satisfies(comb, gp, gc, gf, ps, cs, fs):
  tp = sum([ps[i] for i in comb])
  if tp != gp: return False
  tc = sum([cs[i] for i in comb])
  if tc != gc: return False
  tf = sum([fs[i] for i in comb])
  if tf != gf: return False
  return True

if __name__ == '__main__':
  main()


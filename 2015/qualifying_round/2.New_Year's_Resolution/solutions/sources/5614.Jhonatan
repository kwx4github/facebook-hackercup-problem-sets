#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

typedef struct Food{
    int p, c, f;
}food;

vector<food> getCombinations(vector<food> amount) {
    vector<food> results;
    for (int i = 0; i < amount.size() ; i++) {
        // Record size as we will be adding to the list
        int resultsLength = results.size();
        for (int j = 0; j < resultsLength; j++) {
            food sum;
            //amount[i] + results[j];
            sum.p = amount[i].p + results[j].p;
            sum.c = amount[i].c + results[j].c;
            sum.f = amount[i].f + results[j].f;

            results.push_back(sum);
        }
        results.push_back(amount[i]);
    }
    return results;
}

int main(){
    int t, gp, gc, gf, n, p, c, f, cases = 1;
    bool isPossible;
    vector<food> amount, results;

    scanf("%d", &t);

    while(t--){
        scanf("%d %d %d", &gp, &gc, &gf);
        scanf("%d", &n);
        for(int i = 0 ; i < n ; i++){
            scanf("%d %d %d", &p, &c, &f);
            food aux;
            aux.p = p;
            aux.c = c;
            aux.f = f;
            amount.push_back(aux);
        }

        isPossible = false;
        results = getCombinations(amount);
        for(int i = 0 ; i < ((results.size())) ; i++){
            if((results[i].p == gp) && (results[i].c == gc) && (results[i].f == gf))
                isPossible = true;
        }

        if(isPossible){
            printf("Case #%d: yes\n", cases++);
        }
        else{
            printf("Case #%d: no\n", cases++);
        }
        amount.clear();
        results.clear();
    }

    return 0;
}


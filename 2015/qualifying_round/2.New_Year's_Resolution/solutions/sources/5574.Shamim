#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<cmath>
#include<map>
#include<iostream>
#include<cstdlib>
#include<queue>
#include<sstream>
#include<queue>
#include<ctype.h>
#include<cstring>


using namespace std;

#define re return
#define co continue
#define pb push_back
#define br break
#define sz size


#define pf printf
#define sf scanf

struct Food {
    int prot, carb, fat;

    Food() {
        this->prot = this->carb = this->fat = 0;
    }
    bool operator==(const Food& rSide) {
        if ( this->prot == rSide.prot && this->carb == rSide.carb && this->fat == rSide.fat)
            return true;
        return false;
    }
};

class Solution {
    vector<Food> foods;
    Food need;
    int n;

    bool heCan;

public:
    void takeInput() {
        cin>>need.prot>>need.carb>>need.fat;
        cin>>n;
        int i;
        foods.clear();
        foods.resize(n);
        for ( i=0; i<n; i++)
            cin>>foods[i].prot>>foods[i].carb>>foods[i].fat;
    }
    bool solve() {
        Food cumSelected;
        heCan = false;
        tryAllCombination(0, cumSelected);
        return heCan;
    }
    void tryAllCombination( int cur, Food cumSelected) {
        if ( cumSelected == this->need) {
                heCan = true;
                return ;
            }
        if ( cur == n)
            return ;
        tryAllCombination(cur+1, cumSelected);
        // choose this food
        cumSelected.prot += foods[cur].prot;
        cumSelected.fat += foods[cur].fat;
        cumSelected.carb += foods[cur].carb;
        return tryAllCombination(cur+1, cumSelected);
    }
};

int main()
{
    freopen("new_years_resolution.txt","r",stdin);
    freopen("ans.txt","w",stdout);

    int T;
    cin>>T;
    int kase=1;
    while ( T--) {
        Solution solve;
        solve.takeInput();
        bool heCan = solve.solve();
        cout<<"Case #"<<kase++<<": "<<(heCan?"yes":"no")<<endl;
    }
    return 0;
}

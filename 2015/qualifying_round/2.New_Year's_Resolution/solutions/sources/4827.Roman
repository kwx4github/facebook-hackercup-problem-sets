using System;
using System.Collections.Generic;
using System.IO;

class Solution
{
    static List<int> p, c, f;
    static int gp, gc, gf;
    static int n;

    static void Main(String[] args)
    {
        Console.SetIn(new StreamReader(@"..\..\in.txt"));
        var sw = new StreamWriter(@"..\..\out.txt");
        Console.SetOut(sw);
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
        int t = int.Parse(Console.ReadLine());
        for (int i = 0; i < t; i++)
        {
            string[] gp_gc_gf = Console.ReadLine().Split(' ');
            gp = int.Parse(gp_gc_gf[0]);
            gc = int.Parse(gp_gc_gf[1]);
            gf = int.Parse(gp_gc_gf[2]);

            n = int.Parse(Console.ReadLine());
			p = new List<int>();
			c = new List<int>();
			f = new List<int>();
            for (int j = 0; j < n; j++)
            {
                string[] p_c_f = Console.ReadLine().Split(' ');
                p.Add(int.Parse(p_c_f[0]));
                c.Add(int.Parse(p_c_f[1]));
                f.Add(int.Parse(p_c_f[2]));
            }

            Console.WriteLine("Case #{0}: {1}", i +1, Solve(gp, gc, gf, p, c, f));		
        }
        sw.Close();
    }

	private static string Solve(int gp, int gc, int gf, List<int> p, List<int> c, List<int> f)
    {
		// Filter out wrong triplets
        int j = 0;
        for (int i = 0; i < p.Count; i++)
        {
			if (p[j] > gp || c[j] > gc || f[j] > gf)
            {
                p.RemoveAt(j);
                c.RemoveAt(j);
                f.RemoveAt(j);
            }
			else
            {
                j++;
            }
        }
		if (p.Count == 0)
        {
			return "no";
		}

		// Check for quick "no" answer
        int sumP = 0, sumC = 0, sumF = 0;
        for (int i = 0; i < p.Count; i++)
        {
            sumP += p[i];
            sumC += c[i];
            sumF += f[i];
        }
		if (sumP < gp || sumC < gc || sumF < gf)
        {
			return "no";
		}

        // Check for quick "yes" answer
        if (sumP == gp && sumC == gc && sumF == gf)
        {
            return "yes";
        }

		// Try to solve to find out "yes" or "no"
        bool yes = Search(gp, gc, gf, 0);

        return yes ? "yes" : "no";
    }

    private static bool Search(int gp, int gc, int gf, int start)
    {
        if (gp == 0 && gc == 0 && gf == 0)
        {
            return true;
        }
        if (gp < 0 || gc < 0 || gf < 0)
        {
            return false;
        }

        for (int i = start; i < p.Count; i++)
        {

            bool yes = Search(gp - p[i], gc - c[i], gf - f[i], start + 1);
            if (yes)
            {
                return yes;
            }
        }

        return false;
    }
}
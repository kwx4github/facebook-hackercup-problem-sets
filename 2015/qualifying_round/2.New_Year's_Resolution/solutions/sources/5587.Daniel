__author__ = 'setevik'


def eat_this(p_sum, c_sum, f_sum, p_req, c_req, f_req, other_food):
    if c_sum == c_req and p_sum == p_req and f_sum == f_req:
        return True
    if c_sum > c_req or p_sum > p_req or f_sum > f_req:
        return False
    if c_sum < c_req or p_sum < p_req or f_sum < f_req:
        if len(other_food) == 0:
            return False
        if not eat_this(p_sum + int(other_food[0][0]), c_sum + int(other_food[0][1]), f_sum + int(other_food[0][2]),
                        p_req, c_req, f_req, other_food[1:]):
            other_food = other_food[1:]
            return eat_this(p_sum, c_sum, f_sum, p_req, c_req, f_req, other_food)
        else:
            return True


INPUT = open("new_years_resolution.txt")
f = open('qual_2_out.txt', 'w')
T = int(INPUT.readline().strip())
for testNum in range(1, T + 1):
    reqs = INPUT.readline().strip().split()
    foodNum = int(INPUT.readline().strip())
    foods = list()
    for fNum in range(0, foodNum):
        fields = INPUT.readline().strip().split()
        foods.append(fields)
    result = eat_this(0, 0, 0, int(reqs[0]), int(reqs[1]), int(reqs[2]), foods)
    print("Case #%i: %s" % (testNum, "yes" if result else "no"))
    f.write("Case #%i: %s\n" % (testNum, "yes" if result else "no"))
f.close()
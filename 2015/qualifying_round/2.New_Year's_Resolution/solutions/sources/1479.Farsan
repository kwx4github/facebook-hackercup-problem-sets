//#include <bits/stdc++.h>
#include<cstdio>
#include<sstream>
#include<cstdlib>
#include<cctype>
#include<cmath>
#include<algorithm>
#include<set>
#include<queue>
#include<stack>
#include<list>
#include<iostream>
#include<fstream>
#include<numeric>
#include<string>
#include<vector>
#include<cstring>
#include<map>
#include<iterator>
#include<limits>
#include<iomanip>
#define inf 10000000
#define Max(v) *max_element(v.begin(),v.end())
#define Min(v) *min_element(v.begin(),v.end())
#define inp1(x) scanf("%d",&x)
#define inp2(x,y) scanf("%d %d",&x,&y)
#define Unique(v) v.resize(unique(v.begin(),v.end())-v.begin())
#define Sort(v) sort(v.begin(),v.end(),greater<int>());
#define fread() freopen("inp.txt","r",stdin)
#define fwrite() freopen("out.txt","w",stdout)
#define mem(n,m) memset(n,m,sizeof n)
int Set(int N,int pos){return N=N | (1<<pos);}
int reset(int N,int pos){return N= N & ~(1<<pos);}
bool check(int N,int pos){return (bool)(N & (1<<pos));}
int cnt_leading_zero_bits(int N){return __builtin_clz(N);}
int cnt_trailing_zero_bits(int N){return __builtin_ctz(N);}
int cnt_no_of_bits_on(int N){return __builtin_popcount(N);}
int mod_of_negative_number(int n,int m){return ((n%m)+m)%m;}
int a_to_the_power_b_mod_c(int a,int b,int c){if(b==0)return 1;if(b%2==0){int mx=a_to_the_power_b_mod_c(a,b/2,c);return (mx*mx)%c;} return ((a%c)*a_to_the_power_b_mod_c(a,b-1,c))%c;}
// solvability of a puzzle board( (grid width odd) && (#inversions even) )  ||  ( (grid width even) && ((blank on odd row from bottom) == (#inversions even)) )
//catalan(n+1)=(2*(2*n+1)*catalan(n))/(n+2) ... catalan(0)=1
//priority_queue< int, vector<int>, greater<int> > PQ;// keeps in ascending order
// bool operator < ( const node& b ) const


using namespace std;


int dp[1<<21],n,protein,carbo,fattt;
int p[1001],c[1001],f[1001];


int solve(int msk,int pro,int car,int fat)
{
    if(dp[msk]!=-1)
        return dp[msk];
    int i,j;
    /*for(i=1;i<=n;i++)
    {
        if(check(msk,i))
        {
            pro=pro+p[i];
            car=car+c[i];
            fat=fat+f[i];
        }
    }*/
    if(pro==protein&&car==carbo&&fat==fattt)
        return 1;
    for(i=1,j=0;i<=n&&j==0;i++)
    {
        if(check(msk,i)==0)
        {
            if(pro+p[i]<=protein&&car+c[i]<=carbo&&fat+f[i]<=fattt)
            {
                j=solve(Set(msk,i),pro+p[i],car+c[i],fat+f[i]);
            }
        }
    }
    return dp[msk]=j;
}

int main()
{
    int i,j,k,m,t,cs=0;
    fwrite();
    cin>>t;
    while(t--)
    {
        cin>>protein>>carbo>>fattt;
        cin>>n;
        for(i=1;i<=n;i++)
        {
            cin>>p[i]>>c[i]>>f[i];
        }
        mem(dp,-1);
        cout<<"Case #"<<++cs<<": ";
        if(solve(0,0,0,0))
        cout<<"yes\n";
        else
        cout<<"no\n";
    }
    return 0;
}

package Round1_2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;


public class B {
		static boolean isPossible=false;
public static void main(String args[]) throws NumberFormatException,IOException {
		
		Stdin in = new Stdin();
		PrintWriter out = new PrintWriter("out.txt");
		int t=in.readInt();
		int n,gp,gc,gf,sum0,sum1,sum2,pos;
		int [] p,c,f;
		for(int i=1;i<=t;i++){
			gp=in.readInt();
			gc=in.readInt();
			gf=in.readInt();
			n=in.readInt();
			p=new int[n];
			c=new int[n];
			f=new int[n];
			sum0=0;
			sum1=0;
			sum2=0;
			pos=0;
			for(int j=0;j<n;j++){
				p[pos]=in.readInt();
				c[pos]=in.readInt();
				f[pos]=in.readInt();				
				if(p[pos]>gp||c[pos]>gc||f[pos]>gf)
					continue;
				sum0+=p[pos];
				sum1+=c[pos];
				sum2+=f[pos];
				pos++;
			}
			if(sum0<gp||sum1<gc||sum2<gf){
				print(out,"no",i);
			}else{
				isPossible=false;
				solve(p,c,f,gp,gc,gf,pos,0);
				if(isPossible)
					print(out,"yes",i);
				else
					print(out,"no",i);
			}
		}
		out.flush();
		out.close();

	}
	private static void solve(int[]p,int []c,int []f,int gp,int gc,int gf,int pos,int start){
		if((gp==0&&gc==0&&gf==0)||isPossible){
			isPossible=true;
			return;
		}
		if(start>=pos||gp<0||gc<0||gf<0){
			return;
		}		
		solve(p,c,f,gp-p[start],gc-c[start],gf-f[start],pos,start+1);
		solve(p,c,f,gp,gc,gf,pos,start+1);
	}
	private static void print(PrintWriter out,Object t,int cases){
		out.println("Case #"+cases+": "+t);
	}

	private static class Stdin {
		BufferedReader br;

		StringTokenizer st = new StringTokenizer("");

		private Stdin() throws FileNotFoundException {
			br = new BufferedReader(new FileReader("in.txt"));

		}

		private String readNext() throws IOException {

			while (!st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		private int readInt() throws IOException, NumberFormatException {

			return Integer.parseInt(readNext());

		}

		private long readLong() throws IOException, NumberFormatException {

			return Long.parseLong(readNext());

		}
		private double readDouble() throws IOException, NumberFormatException {

			return Double.parseDouble(readNext());

		}
	}
}

/************************************************************/
// 	Author  : Krishna Vedulla
//	College : Army Institute of Technology, Pune
/************************************************************/

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <limits.h>
#include <algorithm>
#include <math.h>
#include <map>
#include <bitset>
#include <set>
#include <fstream>
#include <string.h>


#define MAX 25
#define MOD 1000000007
#define LL long long
#define ULL unsigned long long


#define FOR(i,a,b) for(int i=a; i<b; i++)
#define FOR_(i,a,b) for(int i=a-1; i>=b; i--)
#define NODE pair<int, int>
#define SQR(a) ((a)*(a))
#define VI vector<int>
#define MII map<int, int>

#define SI(n) scanf("%d", &n)
#define SS(r) scanf("%s", r)
#define PI(n) printf("%d\n", n)
#define PS(r) printf("%s\n", r)

using namespace std;

/*********************************************************************************/
const int cnt = 3;

struct diet
{
  int p,c,f;  
};

bool isSubsetSum(diet *a, int n, diet sum)
{
    if(sum.p == 0 && sum.c == 0 && sum.f==0)
    return true;
    
    if(n==-1 && (sum.p!=0 || sum.c!=0|| sum.f!=0))
    return false;
    
    if((a[n].p > sum.p) || (a[n].c > sum.c) || (a[n].f > sum.f))
    return isSubsetSum(a,n-1,sum);
    diet ans = sum;
    ans.p -= a[n].p; ans.c -= a[n].c; ans.f -= a[n].f;
    
    return isSubsetSum(a,n-1,sum) || isSubsetSum(a,n-1,ans);
}

bool solve(diet *a, int n, int gp, int gc, int gf)
{
	// processing
	diet sum;
	sum.p = gp; sum.c = gc; sum.f = gf;
    return isSubsetSum(a,n-1,sum);
}

int main()
{
	int t, n, gp, gc, gf;
	diet a[MAX];
	bool ans;
	ifstream in; ofstream out;
	in.open("two15-ip.txt");
	out.open("two15-op.txt");
	in>>t;
	FOR(j,1,t+1)
	{
	    in>>gp>>gc>>gf;
		in>>n;
		FOR(i,0,n)
		{
			in>>a[i].p>>a[i].c>>a[i].f;
		}
		ans = solve(a,n,gp,gc,gf);
		if(ans)
			out<<"Case #"<<j<<": yes" <<endl;
		else
			out<<"Case #"<<j<<": no" <<endl;
	}

	return 0;
}
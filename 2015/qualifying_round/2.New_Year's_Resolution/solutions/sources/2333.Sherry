module Main (main) where

import Control.Monad

dfs :: Int -> Int -> Int -> [(Int, Int, Int)] -> Bool
dfs 0 0 0 [] = True
dfs _ _ _ [] = False
dfs gp gc gf ((p,c,f):xs) = (dfs (gp-p) (gc-c) (gf-f) xs) || (dfs gp gc gf xs)

solve :: Int -> (Int, Int, Int, [(Int, Int, Int)]) -> IO ()
solve x (gp, gc, gf, l) =
    case (dfs gp gc gf l) of
        True -> putStrLn $ "Case #" ++ (show x) ++ ": yes"
        False -> putStrLn $ "Case #" ++ (show x) ++ ": no"

readInt :: IO Int
readInt = readLn

readInput :: IO (Int, Int, Int, [(Int, Int, Int)])
readInput =
    do  (gp, gc, gf) <- readTriple
        n <- readInt
        l <- replicateM n readTriple
        return (gp, gc, gf, l)
    where readTriple :: IO (Int, Int, Int)
          readTriple =
              do  (a:b:c:_) <- fmap words getLine
                  return (read a::Int, read b::Int, read c::Int)

main :: IO ()
main =
    do  t <- readInt
        mapM_ (\x -> (readInput >>= solve x)) [1..t]

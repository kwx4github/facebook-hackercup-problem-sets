from collections import defaultdict
import sys


def findCombinations(target, options):
    sums = defaultdict(set)
    sums[0] = {0}
    for i, value in enumerate(options):
        mask = 2 ** i
        applyValue(sums, value, mask)

    return sums[target]

def applyValue(sums, value, mask):
    for partialSum in list(sums.keys()):
        masks = sums[partialSum]
        masks = [x | mask for x in masks if (mask & x)==0]
        sums[partialSum+value].update(masks)


class Case:
    @classmethod
    def parse(cls, stream):
        targetValues = next(stream).strip().split(" ")
        targetValues = [int(x) for x in targetValues]

        foodCound = int(next(stream).strip())
        foodList = []
        for x in range(foodCound):
            food = next(stream).strip().split(" ")
            food = [int(x) for x in food]
            foodList.append(food)

        return Case(targetValues, foodList)

    def __init__(self, targetValues, foodList):
        self.targetValues = targetValues
        self.foodList = foodList

    def solve(self):
        proteins = [food[0] for food in self.foodList]
        targetProtein = self.targetValues[0]
        proteinCombinations = findCombinations(targetProtein, proteins)
        if len(proteinCombinations) == 0:
            return False

        carbos = [food[1] for food in self.foodList]
        targetCarbo = self.targetValues[1]
        carboCombinations = findCombinations(targetCarbo, carbos)
        if len(carboCombinations) == 0:
            return False

        fats = [food[2] for food in self.foodList]
        targetFat = self.targetValues[2]
        fatCombinations = findCombinations(targetFat, fats)
        if len(fatCombinations) == 0:
            return False

        return len(proteinCombinations & carboCombinations & fatCombinations) > 0

def main(fin, fout):
    fin = open(fin)
    fout = open(fout, 'w')
    count = int(next(fin).strip())
    for i in range(count):
        case = Case.parse(fin)
        solution = "yes" if case.solve() else "no"
        out_line = "Case #" + str(i+1) + ": " + solution
        print(out_line, file=fout)
        print(out_line)

if __name__ == '__main__':
    #print(findCombinations(20, [10, 10, 10]))
    #exit()
    if len(sys.argv)<3:
        print("Usage:", __file__, "<input file> <output file>")
        exit()
    main(sys.argv[1], sys.argv[2])
    print("Done!")

#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iterator>
#include <utility>
using namespace std;


#define mem(p,v) memset(p, v, sizeof(p))
#define SET(p) 	  memset(p, -1, sizeof(p))
#define CLR(p)    memset(p, 0, sizeof(p))


#define    getI(a) 	         scanf("%d", &a)
#define    getII(a,b) 	     scanf("%d%d", &a, &b)
#define    getIII(a,b,c)     scanf("%d%d%d", &a, &b, &c)
#define    getL(n)           scanf("%lld",&n)
#define    getF(n)           scanf("%lf",&n)

#define    debug(a)     { cout << a <<endl; }
#define    debugI()     { cout << "*" <<endl; }

#define rep(i,n) for( i = 1 ; i<=(n) ; i++)

#define ALL(p)  p.begin(),p.end()
#define ALLR(p) p.rbegin(),p.rend()
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)
#define pb(x) push_back(x)

#define    vi 	 vector < int >
#define    vii 	 vector < vector < int > >
#define    pii 	 pair< int, int >
#define    psi 	 pair< string, int >
#define    ff 	 first
#define    ss 	 second
#define    ll	 long long
#define    ull 	 unsigned long long
#define    ui    unsigned int
#define    ld 	 long double


const double EPS = 1e-9;
const int INF = 0x7f7f7f7f;
const double PI=acos(-1.0);

template< class T > inline T _abs(T n) { return ((n) < 0 ? -(n) : (n)); }
template< class T > inline T _max(T a, T b) { return (!((a)<(b))?(a):(b)); }
template< class T > inline T _min(T a, T b) { return (((a)<(b))?(a):(b)); }
template< class T > inline T gcd(T a, T b) { return (b) == 0 ? (a) : gcd((b), ((a) % (b))); }
template< class T > inline T lcm(T a, T b) { return ((a) / gcd((a), (b)) * (b)); }

struct data
{
    int p,c,f;
};



//int coin[]={5,8,11,15,18}; //value of coins available
data make; //our target value
data coin[20];
int dp[20][1010],n;
int call(int i,int amount,int cr,int ft)
{
	if(i>=n) {   //All coins have been taken
        if(amount==0&&cr==0&&ft==0)return 1;
        else return 0;
    }
    if(dp[i][amount]!=-1) return dp[i][amount]; //no need to calculate same state twice
    int ret1=0,ret2=0;
    if(amount-coin[i].p>=0&&cr-coin[i].c>=0&&ft-coin[i].f>=0) ret1=call(i,amount-coin[i].p,cr-coin[i].c,ft-coin[i].f); //try to take coin i
    ret2=call(i+1,amount,cr,ft); //dont take coin i
    return dp[i][amount]=ret1|ret2; //storing and returning
}
int main()
{
//	freopen("in","r",stdin);
//	while(cin>>make)
//	{
//		memset(dp,-1,sizeof(dp));
//		cout<<call(0,0)<<endl;
//	}
    READ("in.txt");
   WRITE("out.txt");
    int t;
    getI(t);
    for(int cs=1;cs<=t;cs++)
    {
        memset(dp,-1,sizeof(dp));
        cin>>make.p>>make.c>>make.f;
        getI(n);
        for(int i=0;i<n;i++)
        {
            cin>>coin[i].p>>coin[i].c>>coin[i].f;
        }
        int ret=call(0,make.p,make.c,make.f);
        printf("Case #%d: ",cs);
        if(ret==1)
            printf("yes\n");
        else
            printf("no\n");
    }
    return 0;
}

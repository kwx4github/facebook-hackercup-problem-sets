import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
class Year
{
	public static int x=0;
	public static void main(String args[])throws IOException
	{
		int i,j,t,gp,gc,gf,n,k;
		String gpcf;
		String pcf[];
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		t=Integer.parseInt(br.readLine());
		int z[]=new int[t];
		if(t>=1&&t<=20)
		{
			for(i=0;i<t;i++)
			{
				x=0;
				gpcf=br.readLine();
				pcf=gpcf.split(" ");
				gp=Integer.parseInt(pcf[0]);
				gc=Integer.parseInt(pcf[1]);
				gf=Integer.parseInt(pcf[2]);
				n=Integer.parseInt(br.readLine());
				if(n<1&&n>20)
					break;
				int a[][]=new int[n][3];
				for(j=0;j<n;j++)
				{
					gpcf=br.readLine();
					pcf=gpcf.split(" ");
					for(k=0;k<3;k++)
					{
						a[j][k]=Integer.parseInt(pcf[k]);
					}
				}
				Integer[] numbers1=new Integer[n];
				Integer[] numbers2=new Integer[n];
				Integer[] numbers3=new Integer[n];
				for(j=0;j<n;j++)
					numbers1[j]=a[j][0];
				for(j=0;j<n;j++)
					numbers2[j]=a[j][1];
				for(j=0;j<n;j++)
					numbers3[j]=a[j][2];
				int target1 = gp,target2 = gc,target3 = gf;
				sum_up(new ArrayList<Integer>(Arrays.asList(numbers1)),target1,new ArrayList<Integer>(Arrays.asList(numbers2)),target2,new ArrayList<Integer>(Arrays.asList(numbers3)),target3);
				z[i]=x;
			}
		}
		for(i=0;i<t;i++)
		{
			x=z[i];
			System.out.print("Case #"+(i+1)+": ");
			if(x==1)
				System.out.println("yes");
			else
				System.out.println("no");
		}
	}
	static void sum_up(ArrayList<Integer> numbers1, int target1,ArrayList<Integer> numbers2, int target2,ArrayList<Integer> numbers3, int target3)
	{
        sum_up_recursive(numbers1,target1,new ArrayList<Integer>(),numbers2,target2,new ArrayList<Integer>(),numbers3,target3,new ArrayList<Integer>());
    }
	static void sum_up_recursive(ArrayList<Integer> numbers1, int target1, ArrayList<Integer> partial1,ArrayList<Integer> numbers2, int target2, ArrayList<Integer> partial2,ArrayList<Integer> numbers3, int target3, ArrayList<Integer> partial3) 
	{
		int s1 = 0,s2 = 0,s3 = 0;
		for (int x: partial1)
			s1 += x;
		for (int x: partial2)
			s2 += x;
		for (int x: partial3)
			s3 += x;
		if (s1 == target1&&s2 == target2&&s3 == target3)
		{
            x=1;
			return;
		}
		if (s1 >= target1||s2 >= target2||s3 >= target3)
		    return;
		for(int i=0;i<numbers1.size();i++)
		{
			ArrayList<Integer> remaining1 = new ArrayList<Integer>();
			ArrayList<Integer> remaining2 = new ArrayList<Integer>();
			ArrayList<Integer> remaining3 = new ArrayList<Integer>();
            int n1 = numbers1.get(i);
			int n2 = numbers2.get(i);
			int n3 = numbers3.get(i);
            for (int j=i+1; j<numbers1.size();j++)
			{
				remaining1.add(numbers1.get(j));
				remaining2.add(numbers2.get(j));
				remaining3.add(numbers3.get(j));
			}
            ArrayList<Integer> partial_rec1 = new ArrayList<Integer>(partial1);
			ArrayList<Integer> partial_rec2 = new ArrayList<Integer>(partial2);
			ArrayList<Integer> partial_rec3 = new ArrayList<Integer>(partial3);
            partial_rec1.add(n1);
			partial_rec2.add(n2);
			partial_rec3.add(n3);
            sum_up_recursive(remaining1,target1,partial_rec1,remaining2,target2,partial_rec2,remaining3,target3,partial_rec3);
		}
	}
}
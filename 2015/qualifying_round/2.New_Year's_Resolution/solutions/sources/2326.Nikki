#include<stdio.h>

struct Point {
	int x, y, z;
};

struct Point *make_Point()	{
	struct Point *p = malloc( sizeof(struct Point) );
	scanf( "%d %d %d", &p->x, &p->y, &p->z );
	return	p;
}
struct Point *new_Point(int x, int y, int z)	{
	struct Point *p = malloc( sizeof(struct Point) );
	p->x = x;
	p->y = y;
	p->z = z;
	return	p;
}

struct Point **make_array_Point(int N)	{
	struct Point **points = malloc( sizeof(struct Point) * N );
	int k = 0;
	for (k = 0; k < N; k++)	{
		points[k] = make_Point();
	}
	return points;
}

void destroy_Point(struct Point *p)	{
	free(p);
}

void add_Point(struct Point *a, struct Point *b)	{
	a->x += b->x;
	a->y += b->y;
	a->z += b->z;
}
int equals_Point(struct Point *a, struct Point *b)	{
	return	a->x == b->x && a->y == b->y && a->z == b->z;
}

char *solve()	{
	struct Point *required = make_Point();
	int N;
	scanf( "%d", &N );
	struct Point **points = make_array_Point(N);

	struct Point *current;
	int mask, k;
	int ok = 0;
	
	for (mask = 0; !ok && mask < (1 << N); mask++)	{
		current = new_Point(0, 0, 0);
		
		for (k = 0; k < N; k++)	{
			if	( (mask&(1 << k)) )	{
				add_Point( current, points[k] );
			}
		}
		
		ok |= equals_Point(current, required);
		
		destroy_Point(current);
	}
	
	destroy_Point(required);
	
	for (k = 0; k < N; k++)	{
		destroy_Point( points[k] );
	}
	
	free(points);
	
	return	ok ? "yes" : "no";
}

int main(int argc, char *argv[])	{
	int CASES;
	scanf("%d", &CASES);
	int k = 1;
	for (k = 1; k <= CASES; k++)	{
		printf("Case #%d: %s\n", k, solve() );
	}


    return 0;
}



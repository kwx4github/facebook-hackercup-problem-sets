import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		try {
			inputStream = new FileInputStream("a.in");
			outputStream = new FileOutputStream("a.out");
		} catch (FileNotFoundException e) {
			System.err.println("File not found");
			return;
		}
		
		
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		int T = in.nextInt();
		for (int i = 0; i < T; i++) {
			Solver solver = new Solver();
			out.format("Case %d: ", i + 1);
			solver.solve(in, out);
		}
		
		out.close();
	}
}

class Solver {
	
	public void solve(InputReader in, PrintWriter out) {
		int gp = in.nextInt();
		int gc = in.nextInt();
		int gf = in.nextInt();
		int n = in.nextInt();
		int[] c = new int[n], p = new int[n], f = new int[n];
		for (int i = 0; i < n; i++) {
			p[i] = in.nextInt();
			c[i] = in.nextInt();
			f[i] = in.nextInt();
		}
		for (int i = 0; i < 1 << n; i++) {
			int cp = 0, cc = 0, cf = 0;
			for (int j = 0; j < n; j++) {
				if ((i & (1 << j)) != 0) {
					cp += p[j];
					cc += c[j];
					cf += f[j];
				}
			}
			if (cp == gp && cc == gc && cf == gf) {
				out.println("yes");
				return;
			}
		}
		out.println("no");
	}
}

class InputReader {
	private BufferedReader reader;
	private StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream));
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}

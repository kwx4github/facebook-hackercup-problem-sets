package com.yuzbasioglu;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Nutrition {

	public Nutrition() {
		this.fat = 0;
		this.protein = 0;
		this.carbs = 0;
	}

	public Nutrition(int protein, int carbs, int fat) {
		this.fat = fat;
		this.protein = protein;
		this.carbs = carbs;
	}

	public static boolean groupSum(int start, Nutrition[] nums, Nutrition target) {
		// Base case: if there are no numbers left, then there is a
		// solution only if target is 0.
		if (start >= nums.length)
			return (target.equalsToZero());

		if (target.lessThanZero())
			return false;

		// Key idea: nums[start] is chosen or it is not.
		// Deal with nums[start], letting recursion
		// deal with all the rest of the array.

		// Recursive call trying the case that nums[start] is chosen --
		// subtract it from target in the call.
		target.subtract(nums[start]);
		if (groupSum(start + 1, nums, target))
			return true;

		// Recover previous value
		target.add(nums[start]);
		// Recursive call trying the case that nums[start] is not chosen.
		if (groupSum(start + 1, nums, target))
			return true;

		// If neither of the above worked, it's not possible.
		return false;
	}

	public void subtract(Nutrition other) {
		this.fat -= other.fat;
		this.carbs -= other.carbs;
		this.protein -= other.protein;
	}

	public void add(Nutrition other) {
		this.fat += other.fat;
		this.carbs += other.carbs;
		this.protein += other.protein;
	}

	public boolean equalsToZero() {
		return (this.fat == 0 && this.carbs == 0 && this.protein == 0);
	}

	public boolean equals(Nutrition other) {
		return (fat == other.fat && carbs == other.carbs && protein == other.protein);
	}

	public boolean lessThanZero() {
		return (protein < 0 || carbs < 0 || fat < 0);
	}

	private int fat;
	private int protein;
	private int carbs;

	public static void main(String[] args) {

		Scanner scanner = null;
		try {
			scanner = new Scanner(new File("test.txt"));
		} catch (FileNotFoundException e) {
			System.out.println(e.getMessage());
		}

		// read file content for each test case
		int numberOfTests = scanner.nextInt();
		for (int i = 0; i < numberOfTests && scanner.hasNextInt(); ++i) {

			Nutrition target = new Nutrition(scanner.nextInt(),
					scanner.nextInt(), scanner.nextInt());

			int numberOfFoods = scanner.nextInt();
			Nutrition[] foods = new Nutrition[numberOfFoods];
			for (int j = 0; j < numberOfFoods; ++j) {
				foods[j] = new Nutrition(scanner.nextInt(), scanner.nextInt(),
						scanner.nextInt());
			}

			// solve
			boolean sumFound = Nutrition.groupSum(0, foods, target);

			// report to output
			if (sumFound) {
				System.out.println("Case #" + (i + 1) + ": yes");
			} else {
				System.out.println("Case #" + (i + 1) + ": no");
			}
		}
	}
}

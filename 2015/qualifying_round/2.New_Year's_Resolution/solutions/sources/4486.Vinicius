package newyearsresolution;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class NewYearsResolution {

    public static void main(String args[]) throws IOException, InterruptedException {
        StringScanner scanner;
        FileWriter out = new FileWriter("src/newyearsresolution/output.txt");

        try {
            scanner = new StringScanner(new FileInputStream("src/newyearsresolution/input.txt"));
            int cases = scanner.nextInt();

            for (int i = 1; i <= cases; i++) {
                int wantedProtein = scanner.nextInt();
                int wantedCarbs = scanner.nextInt();
                int wantedFat = scanner.nextInt();

                int meals = scanner.nextInt();

                List<Integer> availableProtein = new ArrayList<>();
                List<Integer> availableCarbs = new ArrayList<>();
                List<Integer> availableFat = new ArrayList<>();

                for (int z = 0; z < meals; z++) {
                    int protein = scanner.nextInt();
                    int carbs = scanner.nextInt();
                    int fat = scanner.nextInt();


                    if (protein <= wantedProtein && carbs <= wantedCarbs && fat <= wantedFat) {
                        availableProtein.add(protein);
                        availableCarbs.add(carbs);
                        availableFat.add(fat);
                    }
                }

                PossibleToFindTheSum  possibleToFindTheSum = new PossibleToFindTheSum(availableProtein, availableCarbs, availableFat, wantedProtein, wantedCarbs, wantedFat);
                Thread threadProtein = new Thread(possibleToFindTheSum);
                threadProtein.run();

                while (!possibleToFindTheSum.isFinish()) {
                    Thread.sleep(1000);
                }
                out.write("Case #" + i + ": " + (possibleToFindTheSum.canEat() ? "yes" : "no"));
                if (i != cases) {
                    out.write(System.lineSeparator());
                }
            }

        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

    static class PossibleToFindTheSum implements Runnable {

        private  List<Integer> availableProtein;
        private List<Integer> availableCarbs;
        private List<Integer> availableFat;
        int wantedProtein;
        int wantedCarbs;
        int wantedFat;

        private boolean eat = false;
        private boolean finish = false;

        public PossibleToFindTheSum(List<Integer> availableProtein, List<Integer> availableCarbs, List<Integer> availableFat, int wantedProtein, int wantedCarbs, int wantedFat) {
            this.availableProtein = availableProtein;
            this.availableCarbs = availableCarbs;
            this.availableFat = availableFat;
            this.wantedProtein = wantedProtein;
            this.wantedCarbs = wantedCarbs;
            this.wantedFat = wantedFat;
        }

        @Override
        public void run() {
            findPossibleSum(availableProtein, availableCarbs, availableFat, wantedProtein, wantedCarbs, wantedFat, 0, 0, 0, 0);
            finish = true;
        }

        private void findPossibleSum(List<Integer> availableProtein, List<Integer> availableCarbs,
                                     List<Integer> availableFat, int wantedProtein, int wantedCarbs, int wantedFat,
                                     int start, int proteinSum, int carbsSum, int fatSum) {

            if (availableProtein.size() == start) return;

            int proteinVal = proteinSum + availableProtein.get(start);
            int carbsVal = carbsSum + availableCarbs.get(start);
            int fatVal = fatSum + availableFat.get(start);

            if (proteinVal == wantedProtein && carbsVal == wantedCarbs && fatVal == wantedFat ) {
                eat = true;
                return;
            }

            findPossibleSum(availableProtein, availableCarbs, availableFat, wantedProtein, wantedCarbs, wantedFat, start + 1, proteinVal, carbsVal, fatVal);
            findPossibleSum(availableProtein, availableCarbs, availableFat, wantedProtein, wantedCarbs, wantedFat, start + 1, proteinSum, carbsSum, fatSum);
        }

        public boolean isFinish() {
            return finish;
        }

        public boolean canEat() {
            return eat;
        }
    }

    static class StringScanner {
        BufferedReader bufferedReader;
        StringTokenizer stringTokenizer;

        StringScanner(InputStream in) throws IOException {
            bufferedReader = new BufferedReader(new InputStreamReader(in));
        }

        String next() throws IOException {

            while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
                stringTokenizer = new StringTokenizer(bufferedReader.readLine());
            }

            return stringTokenizer.nextToken();
        }

        int nextInt() throws IOException {
            return Integer.parseInt(next());
        }
    }
}

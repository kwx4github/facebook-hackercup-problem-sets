// Round 1A 2012
// Problem X.

#ifdef _MSC_VER
	#define _CRT_SECURE_NO_WARNINGS
#endif

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <iostream>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <deque>
#include <vector>
#include <algorithm>
#include <iterator>
#include <cassert>

using namespace std;

typedef unsigned long long llong;
typedef long double ldouble;
typedef pair<int, int> pint;
typedef pair<double, double> pdouble;
typedef vector<int> vint;
typedef vint::iterator vit;
typedef vector<double> vdouble;
typedef vdouble::iterator vdit;
typedef vector<ldouble> vldouble;
typedef vector<string> vstring;
typedef vector<llong> vllong;
typedef vector<vint> graph;

#define FOR(v,p,k) for(int v=p;v<=k;++v)
#define FORD(v,p,k) for(int v=p;v>=k;--v)
#define REP(i,n) for(int i=0;i<(n);++i)
#ifdef _MSC_VER
	#define VAR(v,i) auto v=(i)
#else
	#define VAR(v,i) __typeof(i) v=(i)
#endif
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define SIZE(x) (int)x.size()
#define ALL(c) c.begin(),c.end()

#define ADD_EDGE(g,u,v) g[u].push_back(v),g[v].push_back(u)

#define ST first
#define ND second
#define INF 1000000000
#define INFL 1000000000000000000LL
#define EPS 1e-5

struct food
{
	int P, C, F;
};

bool solve(food A, vector<food> data, int index)
{
	if(A.P == 0 && A.C == 0 && A.F == 0)
		return true;
	if(index >= data.size())
		return false;
	if(solve(A, data, index + 1))
		return true;
	
	A.P -= data[index].P, A.C -= data[index].C, A.F -= data[index].F;
	if(A.P < 0 && A.C < 0 && A.F < 0)
		return false;
	return solve(A, data, index + 1);
}

int main()
{
	int T;
	
	cin >> T;
	REP(t, T)
	{
		food A;
		cin >> A.P >> A.C >> A.F;
		
		int N;
		cin >> N;
		vector<food> data(N);
		for(int i = 0; i < N; i++)
			cin >> data[i].P >> data[i].C >> data[i].F;

		printf("Case #%d: %s\n", t + 1, solve(A, data, 0) ? "yes" : "no");
	}
	
	return 0;
}

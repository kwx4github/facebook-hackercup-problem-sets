#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <math.h>
#include <fstream>
#include <iostream>
#include <vector>
#include <deque>
#include <map>
#include <set>
#include <list>
#include <cstdlib>
#include <time.h>
#include <algorithm>
using namespace std;

//2015 Hacker Cup Qualification, New Year's Resolution
//www.facebook.com/hackercup/problems.php?pid=1036037553088752
//Disable warning messages C4996.
#pragma warning(disable:4996)

#define INPUT_FROM 0
#if INPUT_FROM
#define fromc from
#else
#define fromc cin
#endif

const int MAXN = 25;

typedef struct item * pitem;
struct item{
	int k, h, t;
	char buf[MAXN];
};

bool pr(pitem p0, pitem p1){
        if(p0->k == p1->k) return p0->h > p1->h;
        return p0->k > p1->k;
}


//bool pr1(pitem p0, pitem p1){
//        if(p0->t == p1->t) return pr(p1, p0);
//        return p0->t > p1->t;
//}
//long long fr(vector<long long>&, long long);

int main(int argc, char **argv)
{
	//ifstream from;
	const int nmin=1, nmax=30, msize=3;
	int cases, n, m, mt, res, rt, i, j, k, t, ax, bx, cx;
	int i0, i1, j0, j1, p;
	int n0, n1;
	//char ch, ch0;
	string sres[2]={"no", "yes"};
	//string s, st, s0, s1, s2, sx;
	//long double dt;

	//if(INPUT_FROM) from.open("test.txt");
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);

	//static int v[nmax];
	//vector<int> v, v0, v1;
	//vector<string> vs;
	//deque<vector<long long> > dq;
	//typedef map<string, long long>::const_iterator CI;
	//pitem root, p0, p1, p2, pt0, pt1, pt, pMemory;
	//vector<pitem> vp, vp0, vp1;


	//fromc>>cases;
	scanf("%d\n", &cases);
	//ch = fgetc(stdin);
	for(int test=1;test <= cases;++test){

		//fromc>>n>>m>>p;
		vector<int> v3(msize);
		vector<vector<int> > vv;
		map<vector<int>, int> mv;

		scanf("%d %d %d\n", &v3[0], &v3[1], &v3[2]);
		scanf("%d\n", &n);

		//cout << v3[0] << ' ' << v3[1] << ' ' << v3[2] <<endl;

		vv.resize(n);
		for(int i=0;i<n;++i){
			vv[i].resize(msize);
			scanf("%d %d %d\n", &vv[i][0], &vv[i][1], &vv[i][2]);
		}

		//pMemory = pt = (pitem)calloc(n + 1, sizeof(item));

		int m0 = (n+1)/2;
		int q = (1<<m0);

		for(int i=0;i<q;++i){
			int rt = i;
			vector<int> vt3;
			vt3.resize(msize,0);

			for(int j=0;j<m0;++j){
				if(rt & 1){
					for(int k=0;k<msize;++k) vt3[k] += vv[j][k];
				}
				rt >>= 1;
			}
			mv[vt3] = 1;
			vt3.clear();
		};

		//sort(vp.begin(), vp.end(), pr);

		int m1 = n - m0;
		q = (1<<m1);

		int ax = 0;
		for(int i=0;(i<q)&&(ax == 0);++i){
			int rt = i;
			vector<int> vt3 = v3;

			for(int j=m0;j<n;++j){
				if(rt & 1){
					for(int k=0;k<msize;++k) vt3[k] -= vv[j][k];
				}
				rt >>= 1;
			}
			if(mv.count(vt3)) ax = 1;
			vt3.clear();
		};
		
		cout<<"Case #"<<test<<": "<<sres[ax]<<endl;
		//free(pMemory);
		vv.clear();
		v3.clear();
		mv.clear();
	}

	return 0;
}
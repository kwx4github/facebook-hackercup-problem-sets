#include <fstream>

using namespace std;

int t, gp, gc, gf, n, p[20], c[20], f[20], sp, sc, sf;
bool possible;

void backtrack(int k) {
  if (possible) return;

  sp += p[k];
  sc += c[k];
  sf += f[k];

  if (sp == gp && sc == gc && sf == gf) {
    possible = true;
    return;
  }

  if (k < n - 1 && !(sp > gp || sc > gc || sf > gf)) backtrack(k + 1);

  sp -= p[k];
  sc -= c[k];
  sf -= f[k];

  if (sp == gp && sc == gc && sf == gf) {
    possible = true;
    return;
  }

  if (k < n - 1) backtrack(k + 1);
}

int main() {
  ifstream fi("p2.in");
  ofstream fo("p2.out");

  fi >> t;

  for (int i = 1; i <= t; ++i) {
    fi >> gp >> gc >> gf;
    fi >> n;
    for (int j = 0; j < n; ++j)
      fi >> p[j] >> c[j] >> f[j];

    possible = false;
    sp = sc = sf = 0;
    backtrack(0);

    fo << "Case #" << i << ": ";
    if (possible) fo << "yes";
    else fo << "no";
    fo << endl;
  }

  fo.close();
  fi.close();

  return 0;
}

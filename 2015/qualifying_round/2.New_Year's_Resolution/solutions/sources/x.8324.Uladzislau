import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

public class NewYearsResolution {
    private static BufferedReader in;
    private static BufferedWriter out;

    public static void main(String[] args) {
        try {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new BufferedWriter(new OutputStreamWriter(System.out));
            final int T = Integer.parseInt(in.readLine());

            for (int i = 1; i <= T; i++) {
                int[] needPCF = getPCF(in.readLine());
                int N = Integer.parseInt(in.readLine());
                ArrayList<int[]> availablePCF = new ArrayList<>();

                for (int j = 0; j < N; j++) {
                    int[] cur = getPCF(in.readLine());
                    
                    if (cur[0] <= needPCF[0] && cur[1] <= needPCF[1] && cur[2] <= needPCF[2])
                        availablePCF.add(cur);
                }

                System.out.println("Case #" + i + ": " + (available(availablePCF, needPCF, new int[3], 0) ? "yes" : "no"));
            }

            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static int[] getPCF(String s) {
        String[] PCF_s = s.split(" ");
        int[] PCF = new int[3];

        for (int j = 0; j < PCF.length; j++) {
            PCF[j] = Integer.parseInt(PCF_s[j]);
        }

        return PCF;
    }

    private static boolean available(ArrayList<int[]> available, int[] need, int[] current, int k) {
        current[0] += available.get(k)[0];
        current[1] += available.get(k)[1];
        current[2] += available.get(k)[2];

        if ((current[0] == need[0]) && (current[1] == need[1]) && (current[2] == need[2])) {
            return true;
        } else if ((current[0] > need[0]) || (current[1] > need[1]) || (current[2] > need[2])) {
            return false;
        }

        for (int i = k + 1; i < available.size(); i++) {
            if (available(available, need, Arrays.copyOf(current, current.length), i))
                return true;
        }
        return false;
    }
}

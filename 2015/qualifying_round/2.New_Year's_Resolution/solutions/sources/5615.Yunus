import copy
from collections import deque

def eat(goal, available, soFar):
   if(goal[0] == soFar[0] and
      goal[1] == soFar[1] and
      goal[2] == soFar[2]):
      return True
   while(len(available) > 0):
      item = available.popleft()
      # print 'so far: ' + str(soFar)
      # print 'eating: ' + str(item)
      newP = soFar[0] + item[0]
      newC = soFar[1] + item[1]
      newF = soFar[2] + item[2]
      # print 'total: ' + str((newP, newC, newF))
      if(newP > goal[0] or newC > goal[1] or newF > goal[2]):
         # print 'over\n\n'
         continue
      elif(newP == goal[0] and newC == goal[1] and newF == goal[2]):
         # print 'match\n\n'
         return True
      else:
         # print 'eat again \n\n'
         newAvailable = copy.deepcopy(available)
         newSoFar = (newP, newC, newF)
         result = eat(goal, newAvailable, newSoFar)

      if(result):
         return True
      #else we continue
   return False



fin = open('input_real.txt', 'r')
fout = open('output.txt', 'w')
cases = int(fin.readline(),10)
for i in range(0, cases):
   goals = fin.readline().split(' ')
   protein = int(goals[0], 10)
   carbon = int(goals[1], 10)
   fat = int(goals[2], 10)
   goal = (protein, carbon, fat)
   # print 'Goal: ' + str(goal)
   foodNum = int(fin.readline(),10)
   q = deque()
   for j in range(0, foodNum):
      contents = fin.readline().split(' ')
      p = int(contents[0], 10)
      c = int(contents[1], 10)
      f = int(contents[2], 10)
      contents = (p, c, f)
      # print str(contents)
      q.append(contents)

   result = eat(goal, q, (0, 0, 0))
   if(result):
      output = 'Case #'+str(i+1)+': yes\n'
   else:
      output = 'Case #'+str(i+1)+': no\n'

   print output
   fout.write(output)
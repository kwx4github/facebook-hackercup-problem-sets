

#define DEBUG       //comment when you have to disable all debug macros.
//#define LOCAL     //uncomment for testing from local file
#define NDEBUG    //comment when all assert statements have to be enabled.
//#define GRAPH
#include <iostream>
#include <cstring>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <climits>
#include <ctime>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <sys/time.h>
#include <iomanip>
#include <cstdarg>
#include <utility> //std::pair
#include <cassert>

#define fd(i,a) for(i=1;i<=a;i++)
#define fa(i,a,b) for(i=a;i<=b;i++)
#define fs(i,a,b,c) for(i=a;i<=b;i+=c)
#define tr(c,i) for(typeof(c.begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define all(x) x.begin(), x.end()
#define clr(x,y) memset(x,y,sizeof x)
#define log2(x) (log(x)/log(2))
#define ARRAY_SIZE(arr) (1[&arr]-arr)      
#define INDEX(arr,elem)        (lower_bound(all(arr),elem)-arr.begin())
#define equals(a,b) (a.compareTo(b)==0)    //for strings only
template<class P, class Q> inline void smin(P &a, Q b) { if (b < a) a = b; }
template<class P, class Q> inline void smax(P &a, Q b) { if (a < b) a = b; }

#define pb push_back
#define mp make_pair
#define lld long long int
#define MOD 1000000007
#define gcd __gcd

using namespace std;


#ifdef DEBUG
#define debug(args...)            {dbg,args; cerr<<endl;}
#else
#define debug(args...)              // Just strip off all debug tokens
#endif

#ifdef GRAPH
#include "drawGraph.cpp"
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }

}dbg;

typedef struct n{
	lld p,c,f;
}node;

lld P,C,F,n;
node arr[21];

bool solve(){
	lld i, lim = (1<<n)-1,pv,cv,fv,k,j;
	for(i=1;i<=lim;i++){
		pv=cv=fv=0;
		bitset<21> b(i);
		for(j=20;j>=0;j--){
			k = 20-j;
			if(b[k]){
				pv+=arr[k].p;
				cv+=arr[k].c;
				fv+=arr[k].f;
			}
			if(pv>P || cv>C || fv>F)break;
		}
		if(pv==P && cv==C && fv==F)return true;
	}
	return false;
}

int main()
{
#ifdef LOCAL
    freopen("input.in","r",stdin);
#endif
	 lld t,i,j=0;
	 scanf("%lld",&t);
	 while(t--){
		 scanf("%lld %lld %lld",&P,&C,&F);
		 scanf("%lld",&n);
		 for(i=n-1;i>=0;i--)scanf("%lld %lld %lld",&arr[i].p, &arr[i].c,&arr[i].f);
		 j++;
		 printf("Case #%lld: ",j);
		 cout<<(solve()?"yes":"no")<<"\n";
	 }
}


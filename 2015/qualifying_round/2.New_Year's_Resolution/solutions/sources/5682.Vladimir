import sys

class Input:
	@staticmethod
	def read_numbers():
		return list(map(int, sys.stdin.readline().strip().split(' ')))

class Macronutrients:
	def __init__(self, prots, carbs, fat):
		self.prots = prots
		self.carbs = carbs
		self.fat = fat
	@classmethod
	def read(cls):
		(prots, carbs, fat) = Input.read_numbers()
		return cls(prots, carbs, fat)
	def __add__(self, other):
		return Macronutrients(self.prots + other.prots, self.carbs + other.carbs, self.fat + other.fat)
	def __iadd__(self, other):
		self.prots += other.prots
		self.carbs += other.carbs
		self.fat += other.fat
	def __str__(self):
		return '(' + ' '.join(map(str, (self.prots, self.carbs, self.fat))) + ')'
	__repr__ = __str__

class Entry:
	def __init__(self):
		self.goal = None
		self.meals = []
	@classmethod
	def read(cls):
		e = cls()
		e.goal = Macronutrients.read()
		nb_meals = Input.read_numbers()[0]
		for i in range(nb_meals):
			e.meals.append(Macronutrients.read())
		return e
	def __str__(self):
		return str(self.goal) + '\n' + str(self.meals)
	def compute(self):
		todo = [(Macronutrients(0, 0, 0), i) for i in range(len(self.meals))]
		while len(todo) > 0:
			(msum, i) = todo.pop()
			msum = msum + self.meals[i]
			if msum.prots == self.goal.prots and msum.carbs == self.goal.carbs and msum.fat == self.goal.fat:
				return True
			if msum.prots < self.goal.prots and msum.carbs < self.goal.carbs and msum.fat < self.goal.fat:
				todo.extend([(msum, i) for i in range(i + 1, len(self.meals))])
		return False

def read_input():
	entries = []
	nb_entries = Input.read_numbers()[0]
	for i in range(nb_entries):
		entries.append(Entry.read())
	return entries

if __name__ == '__main__':
	entries = read_input()
	for i in range(len(entries)):
		print("Case #%d: %s" % (i + 1, "yes" if entries[i].compute() else "no"))

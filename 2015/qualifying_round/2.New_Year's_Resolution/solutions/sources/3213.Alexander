/*
ID: espr1t
LANG: C++
TASK: Demo
KEYWORDS: 
*/

#include <cstdio>
#include <ctime>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>

#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

const int MAX = 1002;

using namespace std;
FILE *in; FILE *out;

int n;
int a[MAX][3];
char dyn[MAX][MAX][MAX];

char recurse(int cur, int p, int c, int f) {
    if (p == 0 && c == 0 && f == 0)
        return 1;
    if (cur >= n)
        return 0;
    if (dyn[p][c][f] != -1)
        return dyn[p][c][f];
    
    char ans = 0;
    // Use
    if (p >= a[cur][0] && c >= a[cur][1] && f >= a[cur][2]) {
        ans = recurse(cur + 1, p - a[cur][0], c - a[cur][1], f - a[cur][2]);
    }
    // Don't use
    if (!ans)
        ans = recurse(cur + 1, p, c, f);
    
    return dyn[p][c][f] = ans;
}

void solveTest(int testCase) {
	memset(dyn, -1, sizeof(dyn));
	int rp, rc, rf;
	fscanf(in, "%d %d %d", &rp, &rc, &rf);
	fscanf(in, "%d", &n);
	for (int i = 0; i < n; i++)
	    fscanf(in, "%d %d %d", &a[i][0], &a[i][1], &a[i][2]);
    fprintf(out, "Case #%d: %s\n", testCase, recurse(0, rp, rc, rf) ? "yes" : "no");
}

int main(void) {
	in = stdin; out = stdout;
	in = fopen("NewYearsResolution.in", "rt"); out = fopen("NewYearsResolution.out", "wt");
	
	unsigned sTime = clock();

	int numTests;
	fscanf(in, "%d", &numTests);
	char buff[32768]; fgets(buff, 32768, in);
	
	for (int testCase = 1; testCase <= numTests; testCase++) {
		unsigned tTime = clock();
		fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
		solveTest(testCase);
		fprintf(stderr, "  -- execution time: %.3lfs\n", (double)(clock() - tTime) / CLOCKS_PER_SEC);
	}
	fprintf(stderr, "Finished with all testcases!\n");
	fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);
	return 0;
}

#include <vector>
#include <queue>
#include <climits>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
 
using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define REP(i,n) FOR(i,0,n)
#define RREP(i,n) for(int i=n-1;i>=0;--i)
#define EACH(it,v) for(typeof(v.begin()) it=v.begin();it!=v.end();++it)
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define CLEAR(x,with) memset(x,with,sizeof(x))
#define sz size()
#define mkp make_pair
typedef long long LL;
typedef vector <int> VI;
typedef vector <VI> VVI;
typedef pair <int, int> PI;
typedef vector <PI> VPI;

int main()
{
	ios::sync_with_stdio(0);
	int T; cin >> T;
	REP(c, T)
	{
		int rP, rC, rF; cin >> rP >> rC >> rF;
		int N; cin >> N;

		vector < pair < int, PI > > food( N, mkp (0, mkp(0,0)) );

		REP(i, N)
		cin >> food[i].first >> food[i].second.first >> food[i].second.second;

		bool found = false;
		for(int mask = 0; mask < (1 << N); mask++)
		{
			int sc = 0, sp = 0, sf = 0;
			for(int i = 0; i < food.sz; i++)
			{
				if(mask & (1 << i))
				{
					sp += food[i].first;
					sc += food[i].second.first;
					sf += food[i].second.second;
				}
			}
			if(sc == rC && sp == rP && sf == rF)
			{
				found = true;
				cout << "Case #" << c+1 << ": " << "yes\n";
				break;
			}
		}

		if(!found)
		cout << "Case #" << c+1 << ": " << "no\n";
	}

	return 0;
}

#include<iostream>
#include<cstdio>

using namespace std;

struct macronutrients
{
	int protein;
	int carbohydrates;
	int fat;
};

bool ZeroOneKnapsack(struct macronutrients items[], struct macronutrients sum, int idx, int arr_size)
{
	//cout<<sum.protein<<" "<<sum.carbohydrates<<" "<<sum.fat<<"\t"<<idx<<endl;
	if(sum.protein == 0 && sum.carbohydrates == 0 && sum.fat == 0)
		return true;
	if(idx >= arr_size)
		return false;
	struct macronutrients newSum;
	newSum.protein = sum.protein - items[idx].protein;
	newSum.carbohydrates = sum.carbohydrates - items[idx].carbohydrates;
	newSum.fat = sum.fat - items[idx].fat;
	idx++;
	//cout<<"\t"<<newSum.protein<<" "<<newSum.carbohydrates<<" "<<newSum.fat<<endl;
	if(newSum.protein >= 0 && newSum.carbohydrates >= 0 && newSum.fat >= 0)
	{
		return (ZeroOneKnapsack(items, newSum, idx, arr_size) || ZeroOneKnapsack(items, sum, idx, arr_size));
	}
	else
	{
		return ZeroOneKnapsack(items, sum, idx, arr_size);
	}
}



int main()
{
	int t,kase=1;
	scanf("%d",&t);
	while(t--)
	{
		struct macronutrients required;
		scanf("%d %d %d",&(required.protein),&(required.carbohydrates),&(required.fat));
		int n,i;
		scanf("%d",&n);
		struct macronutrients foodItems[n];
		for(i=0;i<n;i++)
		{
			scanf("%d %d %d",&(foodItems[i].protein),&(foodItems[i].carbohydrates),&(foodItems[i].fat));
		}
		bool isPossible = ZeroOneKnapsack(foodItems, required, 0, n);
		printf("Case #%d: %s\n",kase, isPossible?"yes":"no");
		kase++;
	}
	return 0;
}

//template
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <utility>
#include <cstdio>
#include <cmath>
#include <cstring>                                                                                      
#include <queue>
#include <sstream>
#include <iomanip>
#include <limits>
using namespace std;
//cout << fixed << setprecision(4);
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef istringstream iss; // >>
typedef ostringstream oss; //<<
#define geti(n) int n;scanf("%d",&n)
#define getl(n) long long n;cin >> n
#define getc(c) char c;cin >> c
#define rep(i,n) for(int i=0;i<n;i++)
#define puti(n) printf("%d\n",n)
#define putl(n) cout << n << endl
#define ll long long
#define pb push_back
#define mem(p,q) memset(p,q,sizeof(p))
#define fu(i,a,n) for(int i=a;i<n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define mp make_pair
#define popcount __builtin_popcount
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()


int main(){
    //freopen("input.txt", "r", stdin);

    geti(T);
    rep(i,T){
    	geti(P);
    	geti(C);
    	geti(F);
    	geti(N);
    	int food[N][3];

    	rep(j,N){
    		geti(p);
    		geti(c);
    		geti(f);
    		food[j][0]=p;
    		food[j][1]=c;
    		food[j][2]=f;

    	}


    	
    	bool flag=false;
        //cout << "ji " << endl;
        
    	fu(j,1,(1<<N)){
            int dp[3];

            mem(dp,0);


    		rep(k,N){
    			if((j &(1<<k)) !=0){
    				dp[0]+=food[k][0];
    				dp[1]+=food[k][1];
    				dp[2]+=food[k][2];
    			}
    		}
            //cout <<" j " << j << "P " <<  dp[0] << endl;
         

    		if((dp[0]==P) && (dp[1]==C) && (dp[2]==F)){
    			flag=true;
    			//cout << "Hey !! " << endl;
    			break;

    		}


    	}
          // cout << "yum" << endl;

    	if(flag){
    		printf("Case #%d: yes",i+1);
    	}
    	else{
    		printf("Case #%d: no",i+1);

    	}
    	printf("\n");
    }

	return 0;

}
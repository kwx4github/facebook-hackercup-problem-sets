import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


class Diet {

	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t,p,f,c,n,i,k=1;
		try {
			t = Integer.parseInt(br.readLine());
			while(t-- > 0){
				String s[] = br.readLine().split(" ");
				p = Integer.parseInt(s[0]);
				c = Integer.parseInt(s[1]);
				f = Integer.parseInt(s[2]);
				n = Integer.parseInt(br.readLine());
				i=0;
				int[] gp = new int[n];
				int[] gc = new int[n];
				int[] gf = new int[n];
				while(n-- >0){
					s = br.readLine().split(" ");
					gp[i] = Integer.parseInt(s[0]);
					gc[i] = Integer.parseInt(s[1]);
					gf[i] = Integer.parseInt(s[2]);
					++i;
				}
				if(isSubsetSum(gp,i,p)&&isSubsetSum(gc,i,c)&&isSubsetSum(gf,i,f)){
					System.out.println("Case #"+k+": yes");
				}else{
					System.out.println("Case #"+k+": no");
				}
				
				++k;
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/*private static boolean isthere(int[] gp, int p) {
		
		return false;
	}*/
	
	private static boolean isSubsetSum(int set[], int n, int sum)
	{ // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
	    //  with sum equal to i
	    boolean[][] subset = new boolean[sum+1][n+1];
	 
	    // If sum is 0, then answer is true
	    for (int i = 0; i <= n; i++)
	      subset[0][i] = true;
	 
	    // If sum is not 0 and set is empty, then answer is false
	    for (int i = 1; i <= sum; i++)
	      subset[i][0] = false;
	 
	     // Fill the subset table in bottom up manner
	     for (int i = 1; i <= sum; i++)
	     {
	       for (int j = 1; j <= n; j++)
	       {
	         subset[i][j] = subset[i][j-1];
	         if (i >= set[j-1])
	           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
	       }
	     }
	 
	     /* //uncomment this code to print table
	     for (int i = 0; i <= sum; i++)
	     {
	       for (int j = 0; j <= n; j++)
	          System.out.print(subset[i][j]+"  ");
	       System.out.println("\n");
	     } */
	 
	     return subset[sum][n];}

}
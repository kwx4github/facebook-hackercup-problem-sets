#include <iostream>

#include <fstream>
#include <sstream>
#include <math.h>

using namespace std;



int main()
{
    string inputFile = "new_years_resolution.txt";
    string outputFile = "output.txt";
    ifstream infile(inputFile.c_str());
    ofstream out(outputFile.c_str());
    if (!out.is_open()) {
        cout << "Cannot save " << outputFile << endl;
        return false;
    }
    string line;
    getline(infile, line);
    istringstream iss(line);
    unsigned int zero = 0;
    int size, items;
	int gp, gc, gf;
	int itemP, itemC, itemF;
	unsigned int confNumber, caseNumber(0);
    unsigned short* p;
    unsigned short* c;
    unsigned short* f;
    unsigned short* itp;
    unsigned short* itc;
    unsigned short* itf;
    bool result;
    unsigned int op = 0;

    if (!(iss >> size)) { return 0; }

    while (getline(infile, line))
    {
        // Getting the nutrition goal
        istringstream iss(line);
		if (!(iss >> gp >> gc >> gf)) { return 0; }
        getline(infile, line);
        istringstream iss2(line);
        if (!(iss2 >> items)) { return 0; }
        // Getting the items
        delete itp;
        itp = new unsigned short[items];
        delete itc;
        itc = new unsigned short[items];
        delete itf;
        itf = new unsigned short[items];
        for (int k = 0; k < items; k++) {
            getline(infile, line);
            istringstream iss3(line);
            if (!(iss3 >> itemP >> itemC >> itemF)) { return 0; }
            itp[k] = itemP;
            itc[k] = itemC;
            itf[k] = itemF;
        }

        // Computing the confs
        confNumber = ((~zero) >> (32-items)) + 1;
        p = new unsigned short [confNumber];
        c = new unsigned short [confNumber];
        f = new unsigned short [confNumber];
        for (unsigned int conf = 0; conf < confNumber; conf++) {
            p[conf] = 0;
            c[conf] = 0;
            f[conf] = 0;
        }
        op = 1;
        for (unsigned int i = 0; i<items; i++) {
            for (unsigned int conf = 0; conf < confNumber; conf++) {
                if (conf & op) {
                    p[conf] += itp[i];
                    c[conf] += itc[i];
                    f[conf] += itf[i];
                }
            }
            op *= 2;
        }

        // Searching for a valid one
        result = false;
        for (unsigned int conf = 0; conf < confNumber; conf++) {
            if (p[conf] == gp && c[conf] == gc && f[conf] == gf) {
                result = true;
                break;
            }
        }

        // Outputing
        if (result)
            out <<  "Case #" << (++caseNumber) << ": yes" << endl;
        else
            out <<  "Case #" << (++caseNumber) << ": no" << endl;

    }

}

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Stack;

public class Prob2 {

    static String input_filename = "new_years_resolution.txt";
    static String output_filename = "new_years_resolution_output.txt";

    static int no_of_cases;

    public static void main(String[] args) throws FileNotFoundException, IOException {
        String output_data[] = new String[20];
        String str_data;
        int gc, gp, gf;

        File inputFileObj = new File(input_filename);
        FileReader fr = new FileReader(inputFileObj);
        BufferedReader br = new BufferedReader(fr);

        if (!inputFileObj.exists()) {
            System.out.println("Error: '" + input_filename + "' not found!!");
            System.exit(0);
        }

        //read process
        no_of_cases = Integer.parseInt(br.readLine());
        int n;
        Stack<Integer> p = new Stack<Integer>();
        Stack<Integer> c = new Stack<Integer>();
        Stack<Integer> f = new Stack<Integer>();

        for (int i = 0; i < no_of_cases; i++) {
            str_data = br.readLine();
            gp = Integer.parseInt(str_data.split("\\s+")[0]);
            gc = Integer.parseInt(str_data.split("\\s+")[1]);
            gf = Integer.parseInt(str_data.split("\\s+")[2]);

            n = Integer.parseInt(br.readLine());
            for (int j = 0; j < n; j++) {
                str_data = br.readLine();
                p.push(Integer.parseInt(str_data.split("\\s+")[0]));
                c.push(Integer.parseInt(str_data.split("\\s+")[1]));
                f.push(Integer.parseInt(str_data.split("\\s+")[2]));
            }
            //process program
            output_data[i] = processResult(gp, gc, gf, n, p, c, f);
            p.clear();
            c.clear();
            f.clear();
        }

        writeToOutputFile(output_filename, output_data);
        System.out.println("'" + output_filename + "' file created successfully");
    }

    public static String processResult(int gp, int gc, int gf, int n, Stack<Integer> p, Stack<Integer> c, Stack<Integer> f) {
        Stack<Integer> temp_p = new Stack<Integer>();
        Stack<Integer> temp_c = new Stack<Integer>();
        Stack<Integer> temp_f = new Stack<Integer>();
        int sum_temp_p, sum_temp_c, sum_temp_f;
        int next = 0;
        Stack<Integer> backtrack_aux_index = new Stack<Integer>();
        while (true) {
            for (int i = next; i < n; i++) {
                temp_p.push(p.get(i));
                temp_c.push(c.get(i));
                temp_f.push(f.get(i));
                backtrack_aux_index.push(i);

                sum_temp_p = 0;
                sum_temp_c = 0;
                sum_temp_f = 0;
                for (int j = 0; j < backtrack_aux_index.size(); j++) {
                    sum_temp_p += (int) temp_p.get(j);
                    sum_temp_c += (int) temp_c.get(j);
                    sum_temp_f += (int) temp_f.get(j);
                }
                if (sum_temp_p == gp && sum_temp_c == gc && sum_temp_f == gf) {
                    return "yes";
                } else if (sum_temp_p > gp || sum_temp_c > gc || sum_temp_f > gf) {
                    temp_p.pop();
                    temp_c.pop();
                    temp_f.pop();
                    backtrack_aux_index.pop();
                }
//                System.out.println("gf:" + gf + ", temp_f:" + temp_f + ", sum_temp_f:" + sum_temp_f + ",   auxIndex:" + backtrack_aux_index);
            }
            if (backtrack_aux_index.size() == 0) {
                return "no";
            }
            temp_p.pop();
            temp_c.pop();
            temp_f.pop();
            next = Integer.parseInt(backtrack_aux_index.pop().toString()) + 1;
            if (backtrack_aux_index.isEmpty() && next >= n) {
                return "no";
            }
            if (next >= n) {
                next = Integer.parseInt(backtrack_aux_index.pop().toString()) + 1;
                temp_p.pop();
                temp_c.pop();
                temp_f.pop();
            }
        }
    }

    public static void writeToOutputFile(String output_filename, String output_data[]) {
        try {
            File outputFileObj = new File(output_filename);
            FileWriter fw = new FileWriter(outputFileObj);
            BufferedWriter bw = new BufferedWriter(fw);
            for (int i = 0; i < no_of_cases; i++) {
                bw.write("Case #" + (i + 1) + ": " + output_data[i]);
                bw.newLine();
            }
            bw.flush();
            fw.flush();
        } catch (IOException e) {
            System.out.println(e);
        }
    }
}

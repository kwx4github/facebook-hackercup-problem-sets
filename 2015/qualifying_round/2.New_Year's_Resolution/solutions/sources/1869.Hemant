
import java.util.Scanner;
import java.util.Stack;

public class New_years_resolution{
    
public static int TARGET_SUM;
public static int  index[][]=new int[1000][21];
public static int chk_p[]=new int[20];

    public static int k=0;
    public static Stack<Integer> stack = new Stack<Integer>();
    public static Stack<Integer> stindex = new Stack<Integer>();
    public static int sumInStack = 0;
    public static int temp = 0;


public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int cases=sc.nextInt();
    int count=1;
    while(count<=cases){
        k=0;
        temp=0;
        sumInStack=0;
        for(int i=0;i<index.length;i++){
        for(int j=0;j<21;j++){
            index[i][j]=-1;
        }}
        for(int i=0;i<chk_p.length;i++){
        chk_p[i]=-1;
        }
        int gp= sc.nextInt();
        int gc= sc.nextInt();
        int gf= sc.nextInt();
        int n = sc.nextInt();
		TARGET_SUM = gp;
        int foods[][]=new int[n][3];
        
        
        for(int i=0;i<n;i++){
        foods[i][0]=sc.nextInt();
        chk_p[i]=foods[i][0];
        foods[i][1]=sc.nextInt();
        foods[i][2]=sc.nextInt();
        
        }
        
        populateSubset(chk_p, 0, n);
        int found =0;
        for(int i=0;i<k;i++){
            int sump=0,sumc=0,sumf=0;
        for(int j=0;index[i][j]!=-1;j++){
        sump += foods[index[i][j]][0];
        sumc += foods[index[i][j]][1];
        sumf += foods[index[i][j]][2];
        }
        if(sump==gp&&sumc==gc&&sumf==gf){
                found=1;
            }
            
        }
        if(found==1)
		{
                System.out.println("Case #"+count+": yes");
                }
		else
		{
                System.out.println("Case #"+count+": no");
            
                }
        count++;
    }
    
    }
    public static void populateSubset(int[] data, int fromIndex, int endIndex) {

       
        if (sumInStack == TARGET_SUM) {
            
            find_indeces(stack,stindex);
        }

        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

            if (sumInStack + data[currentIndex] <= TARGET_SUM) {
                stack.push(data[currentIndex]);
                stindex.push(currentIndex);
                sumInStack += data[currentIndex];
                temp += currentIndex;
               
                populateSubset(data, currentIndex + 1, endIndex);
                
                temp -= stindex.pop();
                sumInStack -= (Integer) stack.pop();
                
            }
        }
    }

    public static void find_indeces(Stack<Integer> stack,Stack<Integer> st_index) {
        int f=0;
        for (Integer i : st_index) {
            
            int m = i;
            index[k][f]=i;
            f++;
        }
        k++;
    }
}
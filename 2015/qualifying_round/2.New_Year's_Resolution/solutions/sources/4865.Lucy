import java.util.*;
import java.io.*;

public class NewYearResolution{	
	public static void main(String[] args) throws IOException{
		NewYearResolution resolution = new NewYearResolution();
		resolution.newYearResolution(resolution.parseFile("new_years_resolution.txt"));
	}

	private void newYearResolution(List<ProblemSet> problems) throws IOException{
		PrintWriter writer = new PrintWriter("output.txt", "UTF-8");
		for(int index = 0; index < problems.size(); index++){
			ProblemSet problem = problems.get(index);
			int count = index+1;
			String res = "no";
			if(solve(problem)){
				res = "yes";
			}
			writer.println("Case #" + count + ": " + res);			
		}
		writer.close();
	}

	private boolean solve(ProblemSet problem){
		int numOfChoices = problem.numOfChoices;
		for(int i = 1; i < (1<<numOfChoices); i++){
			List<Integer> picks = getPicks(i, numOfChoices);
			if(isFeasible(picks, problem.choices, problem.goal)){
				return true;
			}
		}
		return false;
	}

	private List<Integer> getPicks(int num, int length){
        List<Integer> ret = new ArrayList<Integer>();
        int index = 0;
        for(int k = length-1; k>=0; k--){
            int temp = num>>k;
            if((temp & 1) == 1){
                ret.add(index);
            }
            index++;
        }        
        return ret;
    }

    private boolean isFeasible(List<Integer> picks, List<List<Integer>> choices, List<Integer> goal){
    	for(int i = 0; i<goal.size(); i++){
    		int sum = 0;
    		for(int pick : picks){
    			sum += choices.get(pick).get(i);
    		}
    		if(sum != goal.get(i)){
    			return false;
    		}
    	}
    	return true;
    }

    private List<ProblemSet> parseFile(String path){
		BufferedReader br = null;
 		List<ProblemSet> list = new ArrayList<ProblemSet>();

		try { 
			br = new BufferedReader(new FileReader(path));
			String firstLine = br.readLine();
			int countOfProblems = Integer.parseInt(firstLine);
			while (countOfProblems>0) {
				List<Integer> goal = parseLine(br.readLine());
				int numOfChoices = Integer.parseInt(br.readLine());
				List<List<Integer>> choices = new ArrayList<List<Integer>>(numOfChoices);
				for(int i = 0; i < numOfChoices; i++){
					choices.add(parseLine(br.readLine()));
				}
				list.add(new ProblemSet(numOfChoices, goal, choices));
				countOfProblems--;
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (br != null) br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		return list;
	}	

	private List<Integer> parseLine(String line){
		List<Integer> result = new ArrayList<Integer>();
		String[] parts = line.split(" ");
		for(String part : parts){
			result.add(Integer.parseInt(part));
		}
		return result;
	}

	class ProblemSet{
		int numOfChoices;
		List<Integer> goal;
		List<List<Integer>> choices;

		public ProblemSet(int numOfChoices, List<Integer> goal, List<List<Integer>> choices){
			this.numOfChoices = numOfChoices;
			this.goal = goal;
			this.choices = choices;
		}
	}
}

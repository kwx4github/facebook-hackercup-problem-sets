#include <bits/stdc++.h>
using namespace std;

struct food
{
	int p, c, f;
	food() {p=c=f=0;}
	food(int a, int b, int h) : p(a), c(b), f(h) {}

	bool operator==(const food& x) const {
		return (p==x.p and c==x.c and f==x.f);
	}
};

void addOne(string& b) {
	string ones = "00000000000000000001";
	for(int i=b.size()-1; i>=0; i--) {
		if(b[i] != ones[i])
			b[i] = '1';
		else {
			b[i] = '0';
			if(i != 0 && ones[i]=='1') {
				ones[i-1] = '1';
			}
		}
	}
}

int main() {
	int T;
	cin >> T;
	
	int n;
	food wish;

	vector<food> A;
	string b;
	for(int k=1; k<=T; k++) {
		cin >> wish.p >> wish.c >> wish.f;
		cin >> n;
		A.assign(n, food());
		b = "00000000000000000000";

		for(int i=0; i<n; i++)
			cin >> A[i].p >> A[i].c >> A[i].f;

		bool can = false;
		for(int cm=0; cm<pow(2,n); cm++) {
			food act;

			for(int i=0; i<n; i++) {
				if(b[b.size()-1-i] == '1') {
					act.p += A[i].p;
					act.c += A[i].c;
					act.f += A[i].f;
				}
			}

			if(act == wish) {
				can = true;
				break;
			}

			addOne(b);
		}

		if(can)
			cout << "Case #" << k << ": yes" << endl;
		else
			cout << "Case #" << k << ": no" << endl;
	}
	return 0;
}
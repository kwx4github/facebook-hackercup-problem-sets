#include <iostream>
#include <fstream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cstring>
#include <string>
#include <cmath>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <functional>
#include <limits>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef pair<int,int> pii;
typedef vector<vector<int> > graph;

const double pi = acos(-1.0);

#define oned(a, x1, x2) { cout << #a << ":"; for(int _i = (x1); _i < (x2); _i++){ cout << " " << a[_i]; } cout << endl; }
#define twod(a, x1, x2, y1, y2) { cout << #a << ":" << endl; for(int _i = (x1); _i < (x2); _i++){ for(int _j = (y1); _j < (y2); _j++){ cout << (_j > y1 ? " " : "") << a[_i][_j]; } cout << endl; } }

#define mp make_pair
#define pb push_back
#define fst first
#define snd second

#define endl '\n'

const int MAXN = 21;

int g[3], n, f[MAXN][3];

void solve() {
    for(int msk = 0; msk < (1<<n); msk++) {
        int sum[3];
        memset(sum,0,sizeof(sum));
        for(int i = 0; i < n; i++) {
			if(msk&(1<<i)) {
                for(int j = 0; j < 3; j++) {
					sum[j] += f[i][j];
                }
			}
        }
        bool good = true;
        for(int j = 0; j < 3; j++) {
			if(sum[j] != g[j]) {
				good = false;
				break;
			}
        }
        if(good) {
			cout << "yes\n";
			return;
        }
    }
    cout << "no\n";
}

int main() {
	freopen("input.in", "r", stdin);
	freopen("output.out", "w", stdout);
	int T; cin >> T;
	for(int C = 1; C <= T; C++) {
        for(int i = 0; i < 3; i++) {
			cin >> g[i];
        }
        cin >> n;
        for(int i = 0; i < n; i++) {
			for(int j = 0; j < 3; j++) {
				cin >> f[i][j];
			}
        }
        cout << "Case #" << C << ": ";
        solve();
	}
}

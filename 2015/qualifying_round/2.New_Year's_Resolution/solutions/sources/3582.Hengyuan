#include <iostream>
#include <vector>
using namespace std;

struct food {
  int p, c, f;
};

bool solve(int gp, int gc, int gf, int idx, const vector<food>& foods)
{
  if(gp == 0 && gc == 0 && gf == 0) {
    return true;
  }
  if(gp < 0 || gc < 0 || gf < 0) {
    return false;
  }
  if(idx >= foods.size()) {
    return false;
  }

  return solve(gp - foods[idx].p, gc - foods[idx].c, gf - foods[idx].f, idx+1, foods)
      || solve(gp, gc, gf, idx+1, foods);
}

int main()
{
  int n_cases;
  cin >> n_cases;
  for(int i = 0; i < n_cases; ++i) {
    cout << "Case #" << i+1 << ": ";
    int gp, gc, gf;
    cin >> gp >> gc >> gf;
    int n_food;
    cin >> n_food;
    vector<food> foods;
    bool dang = false;
    for(int j = 0; j < n_food; ++j) {
      food f;
      cin >> f.p >> f.c >> f.f;
      if(f.p == gp && f.c == gc && f.f == gf) {
        cout << "yes" << endl;
        dang = true;
        break;
      } else if(f.p >= gp || f.c >= gc || f.f >= gf) {
        continue;
      } else {
        foods.push_back(f);
      }
    }
    if(dang) {
      continue;
    }
    if(solve(gp, gc, gf, 0, foods)) {
      cout << "yes" << endl;
    } else {
      cout << "no" << endl;
    }
  }
  return 0;
}
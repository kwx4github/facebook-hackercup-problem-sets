void Main()
{
	int T = 0;
	string basepath = "C:\\Users\\sgarg\\Documents\\LINQPad Queries\\Contests\\hackercup2015\\";
	string[] input = File.ReadAllLines(basepath + "new_years_resolution.txt");
	for (int i = 1; i<input.Length;)
	{
		Item goal 	 = new Item(input[i++].Split(' ').Select (r => int.Parse(r)).ToArray());
		int N = int.Parse(input[i++]);
		Item[] items = new Item[N];
		
		for(int j=0; j<N; j++)
			items[j] = new Item(input[i++].Split(' ').Select (r => int.Parse(r)).ToArray());
		
		Console.WriteLine("Case #{0}: {1}", ++T, canMeetGoal(goal, items, items.Length) ? "yes" : "no");
	}
}


public bool canMeetGoal(Item goal, Item[] items, int size)
{
	if(size == 0)
	{
		if(goal.protein == 0 && goal.carbs == 0 && goal.fat == 0)
			return true;
		else
			return false;
	}
	else
	{
		Item curr = items[size-1];
		Item newGoal = new Item(goal.protein - curr.protein, goal.carbs - curr.carbs, goal.fat - curr.fat);		
		//goal can be met with or without the current item. If chosen, run for remaining items with reduced goal. If not, run with same goal.
		return canMeetGoal(newGoal, items, size-1) || canMeetGoal(goal, items, size-1);
	}	
}

// Define other methods and classes here
public class Item
{
	public int protein, carbs, fat;
	public Item(params int[] args)
	{
		protein = args[0];
		carbs   = args[1];
		fat     = args[2];
	}
}
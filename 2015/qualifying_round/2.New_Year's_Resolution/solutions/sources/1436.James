import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.*;

public class Eating{
	private static String OUTFILE = "eatingout.txt";
	private static String INFILE = "eatingin.txt";
	private static BufferedReader br;
	private static BufferedWriter wr;
	public static void main(String args[]){
		try{
			br = new BufferedReader(new FileReader(INFILE));
			wr = new BufferedWriter(new FileWriter(OUTFILE));
		} catch (IOException e){
			System.out.println("IO Error");
		}
		int t = Integer.parseInt(next());
		for (int i = 0; i < t; i++){
			String ans = "Case #"+(i+1)+": ";
			int[] needs = new int[3];
			needs[0] = Integer.parseInt(next());
			needs[1] = Integer.parseInt(next());
			needs[2] = Integer.parseInt(next());
			int n = Integer.parseInt(next());
			int foods[][] = new int[n][3];
			boolean a;
			for (int j = 0; j < n; j++){
				foods[j][0] = Integer.parseInt(next());
				foods[j][1] = Integer.parseInt(next());
				foods[j][2] = Integer.parseInt(next());
			}
			a = solve(0, foods, needs);
			if (a){
				ans = ans + "yes";
			} else {
				ans = ans + "no";
			}
			write(ans);
		}
		try{
			wr.close();
		} catch (IOException e){
			System.out.println("Error Closing");
		}
	}

	private static boolean solve(int checking, int[][] foods, int[] needs){
		if (checking == foods.length -1){
			return ((foods[checking][0] == needs[0])&&(foods[checking][1] == needs[1])&&(foods[checking][2] == needs[2]));
		}
		int[] newNeeds = new int[3];
		newNeeds[0] = needs[0] - foods[checking][0];
		newNeeds[1] = needs[1] - foods[checking][1];
		newNeeds[2] = needs[2] - foods[checking][2];
		if (newNeeds[0] == 0 && newNeeds[1] == 0 && newNeeds[2] == 0){
			return true;
		}
		return (solve(checking + 1, foods, needs) || solve(checking + 1, foods, newNeeds));
	}

	private static StringTokenizer st;

	private static String next(){
		while (st == null || !st.hasMoreElements()){
			String str;
			try{
				str = br.readLine();
			} catch (IOException e){
				return null;
			}
			st = new StringTokenizer(str);
		}
		return st.nextToken();
	}

	private static void write(String str){
		try{
			wr.write(str, 0, str.length());
			wr.newLine();
		} catch (IOException e){
			System.out.println("Problem writing");
		}
	}
}
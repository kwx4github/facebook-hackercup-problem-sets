package y2015.qualification;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

public class B {
    private static final String inputFileName = "input/2015/qualification/b/new_years_resolution.txt";
    private static final String outputFileName = "output.txt";

    public static void main(String[] args) throws Exception {
        File inputFile = new File(inputFileName);
        Scanner scanner = new Scanner(inputFile);

        File outputFile = new File(outputFileName);
        outputFile.delete();
        outputFile.createNewFile();
        FileWriter fw = new FileWriter(outputFile);
        BufferedWriter bw = new BufferedWriter(fw);

        int numOfTestCases = scanner.nextInt();

        for (int i = 1; i <= numOfTestCases; i++) {

            int desiredP = scanner.nextInt();
            int desiredC = scanner.nextInt();
            int desiredF = scanner.nextInt();

            int n = scanner.nextInt();
            ArrayList<Product> products = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                products.add(new Product(scanner.nextInt(),scanner.nextInt(),scanner.nextInt()));
            }

            Problem problem = new Problem(desiredP, desiredC, desiredF, products);

            String testCase = "Case #" + i + ": " + problem.solve();
            bw.append(testCase + "\n");
            System.out.println(testCase);
        }

        bw.flush();
        fw.flush();

        bw.close();
        fw.close();
    }

    private static class Product {
        private int p;
        private int c;
        private int f;

        public Product(int p, int c, int f) {
            this.p = p;
            this.c = c;
            this.f = f;
        }

        public int getP() {
            return p;
        }

        public int getC() {
            return c;
        }

        public int getF() {
            return f;
        }
    }

    private static class Problem {
        private int desiredP;
        private int desiredC;
        private int desiredF;
        private ArrayList<Product> allProducts = new ArrayList<>();

        public Problem(int desiredP, int desiredC, int desiredF, ArrayList<Product> allProducts) {
            this.desiredP = desiredP;
            this.desiredC = desiredC;
            this.desiredF = desiredF;
            this.allProducts = allProducts;
        }

        public String solve() {
            int sumP = 0;
            int sumC = 0;
            int sumF = 0;
            for (Product product : allProducts) {
                sumP += product.getP();
                sumC += product.getC();
                sumF += product.getF();
            }

            if (sumP < desiredP || sumC < desiredC || sumF < desiredF)
                return "no";

            sortAllProducts();
            ArrayList<Integer> indexes = getIndexes();
            return find(0, 0, 0, indexes) ? "yes" : "no";
        }

        private void sortAllProducts() {
            Collections.sort(allProducts, new Comparator<Product>() {
                @Override
                public int compare(Product o1, Product o2) {
                    return getRatio(o2) - getRatio(o1);
                }

                private int getRatio(Product product) {
                    return (1000*product.getC()/desiredC) + (1000*product.getP()/desiredP) + (1000*product.getF()/desiredF);
                }
            });
        }

        private ArrayList<Integer> getIndexes() {
            ArrayList<Integer> indexes = new ArrayList<>(allProducts.size());
            for (int i = 0; i < allProducts.size(); i++) {
                indexes.add(i);
            }
            return indexes;
        }

        private boolean find(int p, int c, int f, ArrayList<Integer> indexes) {
            if (p==desiredP && c==desiredC && f==desiredF)
                return true;

            if (p>desiredP || c>desiredC || f>desiredF || indexes.isEmpty())
                return false;

            ArrayList<Integer> newIndexes;
            for (int i = 0; i < indexes.size(); i++) {
                Product product = allProducts.get(indexes.get(i));
                newIndexes = new ArrayList<>(indexes);
                newIndexes.remove(i);
                if (find(p + product.getP(), c + product.getC(), f + product.getF(), newIndexes)) {
                    return true;
                }
            }

            return false;
        }
    }
}

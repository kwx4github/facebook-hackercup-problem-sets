#!/usr/bin/python

import sys

class Problem(object):
	def __init__(self,target,foods):
		self.target = target
		self.foods = foods

	def solve(self):
		sum_idx = range(len(self.foods))
		if self.is_possible((0, 0, 0), sum_idx):
			return "yes"
		else:
			return "no"

	def is_possible(self,current_tuple,sum_idx):
		condition = is_ok(current_tuple, self.target)
		if condition == -1:
			return False		
		elif condition == 1:
			return True
		else:
			answer_vec = []
			for idx in sum_idx:
				answer_vec.append(self.is_possible(add_tuple(current_tuple, self.foods[idx]), [x for x in sum_idx if x != idx]))
			if True in answer_vec:
				return True
			else:
				return False

def add_tuple(t1, t2):
	return (t1[0]+t2[0], t1[1]+t2[1], t1[2]+t2[2])

def is_ok(t, target):
	if t[0]>target[0] or t[1]>target[1] or t[2]>target[2]:
		return -1	#no
	if t[0]==target[0] and t[1]==target[1] and t[2]==target[2]:	
		return 1	#yes
	return 0		#continue

def read_input(fpath):
	with open(fpath,'r') as fstream:
		content = []
		lines = [x.strip('\n') for x in fstream.readlines()]
		T = int(lines[0])
		pt = 1
		for prblm_idx in xrange(T):
			target = tuple([int(x) for x in lines[pt].split()])
			N = int(lines[pt+1])
			foods = []
			for idx in xrange(N):
				foods.append(tuple([int(x) for x in lines[pt+2+idx].split()]))
			pt += N+2
			content.append(Problem(target,foods))
		return content
			

if __name__=="__main__":

	fpath = sys.argv[1]

	problems = read_input(fpath)

	for idx,problem in enumerate(problems):
		print "Case #"+str(idx+1)+": "+problem.solve()



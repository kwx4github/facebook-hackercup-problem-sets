/*ckpeteryu*/
#include<iostream>
#include<iomanip>
#include<sstream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<climits>
#include<cmath>
#include<bitset>
#include<string>
#include<ctime>
#include<functional>
#include<map>
#include<set>
#include<vector>
#include<stack>
#include<queue>
#include<algorithm>
using namespace std;
#define FOR(i,s,e) for(int i=(s);i<(int)(e);i++)
#define FOE(i,s,e) for(int i=(s);i<=(int)(e);i++)
#define FOD(i,s,e) for(int i=(s);i>=(int)(e);i--)
#define FORVEC(i,a) for(int i=0;i<(int)((a).size());i++)
#define pb push_back
#define mp make_pair
#define CLR(s,x) memset(s,x,sizeof(s))
#define LL long long int
#define L long int

int nt,gp,gc,gf,N,p,c,f;

struct food{
	int p,c,f;
	food(){}
	food(int p, int c, int f):p(p),c(c),f(f){}
};

vector<food> v;

int main(int argc, char **argv){
	//ios_base::sync_with_stdio(false);	
	#ifdef FHC
		freopen("b1.txt","w",stdout);
		//freopen("b2.txt","w",stdout);
	#endif		
		
	scanf("%d",&nt);
	FOE(k,1,nt){
		scanf("%d%d%d%d",&gp,&gc,&gf,&N);
		FOR(i,0,N){
			scanf("%d%d%d",&p,&c,&f);
			v.pb(food(p,c,f));
		}
		int n = (1<<N)-1;		
		bool good=false;
		FOD(i,n,1){			
			p=c=f=0;
			FOD(j,N-1,0){
				if (i & (1<<j)){
					p+=v[j].p;
					c+=v[j].c;
					f+=v[j].f;
				}
			}
			if (p==gp && c==gc && f==gf){
				good=true;
				break;
			}
		}
		if (good) printf("Case #%d: yes\n",k); else printf("Case #%d: no\n",k);
		v.clear();
	}

	return 0;
}
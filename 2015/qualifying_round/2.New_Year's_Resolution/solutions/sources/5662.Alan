/*
 * Alan Wright
 */


import java.util.*;

public class newyear {

	public static int[][] vals;
	public static boolean found = false;
	public static int targetx = 0;
	public static int targety = 0;
	public static int targetz = 0;
	
	public static void main(String[] args){

		Scanner in = new Scanner(System.in);
		int cases = in.nextInt();
		
		for(int caseNum = 0; caseNum < cases; ++caseNum){
			
			targetx = in.nextInt();
			targety = in.nextInt();
			targetz = in.nextInt();

			int numFoods = in.nextInt();
			vals = new int[numFoods][3];
			for(int i = 0; i < numFoods; ++i) {
				for(int j = 0; j < 3; ++j) {
					vals[i][j] = in.nextInt();
				}
			}

			found = false;
			System.out.print("Case #" + (caseNum + 1) + ": ");
			combinate(new boolean[numFoods], 0, numFoods, 0, 0, 0);
			if(!found){
				System.out.println("no");
			}
		}	
	}
	
	//Combinates integer indices which reference the array we want to permute
	public static void combinate(boolean[] used, int k, int end, int x, int y, int z){
		//found a match
		if(x == targetx && y == targety && z == targetz){
			System.out.println("yes");
			found = true;
			return;
		}
		//already broke our rule
		else if(x > targetx || y > targety || z > targetz) {
			return;
		}

		// Base Case
		if(k == end){
			return;
		}

		used[k] = true;
		combinate(used, k+1, end, x + vals[k][0], y + vals[k][1], z + vals[k][2]); //try with
		used[k] = false;
		combinate(used, k+1, end, x, y, z); //try without	
	}
}
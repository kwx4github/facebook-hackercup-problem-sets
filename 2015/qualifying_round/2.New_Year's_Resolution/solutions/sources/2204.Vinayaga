import java.io.*;
import java.util.*;

public class NewYear {


	public static List<Integer> getCombination(int []arr, int n, int r) {
		int []data = new int[r];

		List<Integer> fullData = new ArrayList<Integer>();
		combinationUtil(arr, data, fullData, 0, n - 1, 0, r);

		return fullData;	

	}

	public static void combinationUtil(int []arr, int []data, List<Integer> fullData, int start, int end, int index, int r) {
		if (index == r) {
			for (int p = 0; p < r; p++) {
				fullData.add(data[p]);
			}
			return;
		}

		for (int i = start; i <= end && end -i + 1 >= r - index; i++) {
			data[index] = arr[i];

			combinationUtil(arr, data, fullData, i + 1, end , index + 1, r);
		}
	}

	public static void main(String []args) {
		File inputFile = new File("testcase.txt");
		File outputFile = new File("output.txt");

		int i, j, k, l;

		try {

			if (!outputFile.exists()) {
				outputFile.createNewFile();
			}

			BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile)));
			BufferedWriter bw = new BufferedWriter(new FileWriter(outputFile.getAbsolutePath()));

			int noOfTestCase = Integer.parseInt(br.readLine());

			for (i = 0; i < noOfTestCase; i++) {

				int displayValue = i + 1;
				int gp, gc, gf;

				String []reqNutriString = br.readLine().split(" ");

				

				gp = Integer.parseInt(reqNutriString[0]);
				gc = Integer.parseInt(reqNutriString[1]);
				gf = Integer.parseInt(reqNutriString[2]);

				int noOfFoodItems = Integer.parseInt(br.readLine());

				int [][]healthNutri = new int[noOfFoodItems][3];

				int []limitArray = new int[noOfFoodItems];

				for (j = 0; j < noOfFoodItems; j++) {
					String []gnNutriString = br.readLine().split(" ");

					healthNutri[j][0] = Integer.parseInt(gnNutriString[0]);
					healthNutri[j][1] = Integer.parseInt(gnNutriString[1]);
					healthNutri[j][2] = Integer.parseInt(gnNutriString[2]);

					limitArray[j] = j;
				}

				boolean isHealth = false;

				if (noOfFoodItems == 1) {
					if (healthNutri[0][1] == gc && healthNutri[0][1] == gp && healthNutri[0][2] == gf) {
						bw.write("Case #" + displayValue + ": yes\n");
					} else {
						bw.write("Case #" + displayValue + ": no\n");
					}
					continue;
				}
				
				for (k = 0; k < noOfFoodItems; k++) {


					int divideKey = k + 1;

					if (divideKey > noOfFoodItems) {
						break;
					}	
					

					List<Integer> combinationList = NewYear.getCombination(limitArray, limitArray.length, divideKey);


					Integer [] combinationArr = combinationList.toArray(new Integer[] {});

					int []results = new int[3];

					results[0] = 0;
					results[1] = 0;
					results[2] = 0;

					int loopStop =  divideKey;


					

					for (int m = 0; m < combinationArr.length; m++) {
						if (m < loopStop) {
							results[0] += healthNutri[combinationArr[m]][0];
							results[1] += healthNutri[combinationArr[m]][1];
							results[2] += healthNutri[combinationArr[m]][2];
						} else {
							//System.out.println("Results : " + results[0] + " " + results[1] + " " + results[2]);
							if (results[0] == gp && results[1] == gc && results[2] == gf) {
								isHealth = true;
								break;
							}

							results[0] = 0;
							results[1] = 0;
							results[2] = 0;							

							loopStop +=  divideKey;

							--m;
						}
					}
					
				}

				

				if (isHealth) {
					bw.write("Case #" + displayValue + ": yes\n");
				} else {
					bw.write("Case #" + displayValue + ": no\n");
				}
			}

			bw.close();


		} catch (Exception ex) {
			System.out.println(ex.toString());
		}
	}
}
import java.io.*;
import java.util.ArrayList;

public class Main {

    public static void main(String[] args) {
        try {
            BufferedReader br = new BufferedReader(new FileReader("input.txt"));
            BufferedWriter bw = new BufferedWriter(new FileWriter("output.txt"));

            int testCase = Integer.parseInt(br.readLine());

            for (int i = 1; i <= testCase; i++) {
                String [] wantedPCFString = br.readLine().split("\\s+");
                int [] wantedPCF = {Integer.parseInt(wantedPCFString[0]), Integer.parseInt(wantedPCFString[1]), Integer.parseInt(wantedPCFString[2])};

                int foodNumber = Integer.parseInt(br.readLine());

                ArrayList<int[]> foodArray = new ArrayList<int[]>();

                for (int j = 0; j < foodNumber; j++) {
                    String [] foodPCFString = br.readLine().split("\\s+");
                    int [] foodPCF = {Integer.parseInt(foodPCFString[0]), Integer.parseInt(foodPCFString[1]), Integer.parseInt(foodPCFString[2])};

                    if (foodPCF[0] > wantedPCF[0] || foodPCF[1] > wantedPCF[1] || foodPCF[2] > wantedPCF[2]) {
                        continue;
                    }

                    else if ((foodPCF[0] == wantedPCF[0] && (foodPCF[1] != wantedPCF[1] || foodPCF[2] != wantedPCF[2]))
                            || (foodPCF[1] == wantedPCF[1] && (foodPCF[0] != wantedPCF[0] || foodPCF[2] != wantedPCF[2]))
                            || (foodPCF[2] == wantedPCF[2] && (foodPCF[0] != wantedPCF[0] || foodPCF[1] != wantedPCF[1]))) {
                        continue;
                    }

                    else if ((foodPCF[0] > wantedPCF[0]-10 && foodPCF[0] < wantedPCF[0]) || (foodPCF[1] > wantedPCF[1]-10 && foodPCF[1] < wantedPCF[1]) || (foodPCF[2] > wantedPCF[2]-10 && foodPCF[2] < wantedPCF[2])) {
                        continue;
                    }

                    else {
                        foodArray.add(foodPCF);
                    }
                }

                if (isSumSubset(foodArray, wantedPCF))
                    bw.write("Case #" + i + ": yes\n");
                else
                    bw.write("Case #" + i + ": no\n");


            }

            br.close();
            bw.close();
        }

        catch (Exception e) {
            if (e instanceof FileNotFoundException) {
                System.out.println("File not found!");
            }

            else if (e instanceof ArrayIndexOutOfBoundsException) {
                System.out.println("smt different!");
            }
        }
    }

    public static boolean isSumSubset (ArrayList<int[]> _foodArray, int[] _desiredSum) {
        ArrayList<int[]> tempArray = new ArrayList<int[]>();
        int [] initial = new int[3];
        initial[0] = 0;
        initial[1] = 0;
        initial[2] = 0;
        tempArray.add(initial);

        for (int i = 0; i < _foodArray.size(); i++) {
            ArrayList<int[]> tempTwo = new ArrayList<int[]>();

            for (int j = 0; j < tempArray.size(); j++) {
                int [] temp = new int[3];
                temp[0] = tempArray.get(j)[0] + _foodArray.get(i)[0];
                temp[1] = tempArray.get(j)[1] + _foodArray.get(i)[1];
                temp[2] = tempArray.get(j)[2] + _foodArray.get(i)[2];
                tempTwo.add(temp);
            }

            tempArray.removeAll(tempTwo);
            tempArray.addAll(tempTwo);

            int counter = 0;

            while (counter < tempArray.size()) {
                if (tempArray.get(counter)[0] > _desiredSum[0] || tempArray.get(counter)[1] > _desiredSum[1] || tempArray.get(counter)[2] > _desiredSum[2]) {
                    tempArray.remove(counter);
                }

                else {
                    counter++;
                }
            }
        }

        for (int i = 0; i < tempArray.size(); i++) {
            if (tempArray.get(i)[0] == _desiredSum[0] && tempArray.get(i)[1] == _desiredSum[1] && tempArray.get(i)[2] == _desiredSum[2])
                return true;
        }

        return false;
    }
}

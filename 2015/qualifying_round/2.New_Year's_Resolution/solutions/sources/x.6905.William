package facebook;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;

/**
 * Created by slowbro on 1/8/2015. Code below has the error of treating each nutrient independently.
 */
public class resolution {


    public static int sumarray(int[] values)
    {
        int sum=0;
        for(int num : values)
            sum+= num;
        return sum;

    }

    public static boolean solve(int[] numbers, int target)
    {
        if ((target < 0) || (sumarray(numbers) < target))
        {
            return false;
        }

        boolean [][] table = new boolean [target + 1] [numbers.length + 1]  ;

        for (int i = 0; i <= numbers.length; ++i) {
            table[0][i] = true;
        }

        for (int m = 1; m <= target; ++m)
        {
            for (int j = 1; j <= numbers.length; ++j)
            {
                table [m][j] = table[m][j-1];
                if (m >= numbers[j-1])
                {
                    table[m][j] = table[m][j] || table[m - numbers[j-1]] [j-1];
                }
            }
        }

        return table[target][numbers.length];
    }




    public static void main(String args[]) throws FileNotFoundException {
        int N; int T;


        Scanner inFile = new Scanner (new FileReader("C:\\Users\\slowbro\\Google Drive\\Comp Sci\\5050 Algorithms\\src\\facebook\\new_years_resolution.txt"));      //Creates instance of the file reader
        PrintWriter outFile =  new PrintWriter("C:\\Users\\slowbro\\Google Drive\\Comp Sci\\5050 Algorithms\\src\\facebook\\output.txt");            //Creates outFile instance writing to C:\

        T = inFile.nextInt();

        int GP = 0, GC = 0,GF = 0;

        for(int i = 0; i<T; i++) {
            GP = inFile.nextInt();
            GC = inFile.nextInt();
            GF = inFile.nextInt();

            N = inFile.nextInt();

            int[][] PCF = new int[N][3];
            boolean flag1, flag2 = false, flag3 = false;

            int[] P = new int[N];
            int[] C = new int[N];
            int[] F = new int[N];
            System.out.printf("GP = %d GC = %d GF = %d and N = %d%n", GP, GC, GF, N);

            for (int x = 0; x < N; x++) {
                for (int y = 0; y < 3; y++) {
                    PCF[x][y] = inFile.nextInt();
                }
            }
            java.util.Arrays.sort(PCF, new java.util.Comparator<int[]>(){
                public int compare(int[] a, int[] b) {
                    return Integer.compare(a[0], b[0]);
                }
            } );
            for(int s = 0; s < N; s++)
            {
                P[s] = PCF[s][0];
            }
            flag1 = solve(P, GP);
            if(flag1)
            {
                //sort 2
                java.util.Arrays.sort(PCF, new java.util.Comparator<int[]>(){
                    public int compare(int[] a, int[] b) {
                        return Integer.compare(a[1], b[1]);
                    }
                } );
                for(int s = 0; s < N; s++)
                {
                    C[s] = PCF[s][1];
                }
                flag2 = solve(C, GC);
            }
            if(flag2)
            {
                //sort 3
                java.util.Arrays.sort(PCF, new java.util.Comparator<int[]>(){
                    public int compare(int[] a, int[] b) {
                        return Integer.compare(a[2], b[2]);
                    }
                } );
                for(int s = 0; s < N; s++)
                {
                    F[s] = PCF[s][2];
                }
                flag3 = solve(F, GF);
            }
            if(flag3)
            {
                outFile.printf("Case %d: yes%n", i+1);
            }
            else {
                outFile.printf("Case %d: no%n", i+1);
            }
            flag2 = flag3 = false;





        }



        inFile.close();
        outFile.close();
    }

}

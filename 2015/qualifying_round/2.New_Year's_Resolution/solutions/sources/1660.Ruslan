#include<iostream>
#include<cstdio>
#include<vector>
#include<stack>
#include<list>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<functional>
#include<string>
#include<cmath>
#include<tuple>
using namespace std;

struct item
{
	int p;
	int c;
	int f;

	item() {}
	item(int pp, int cc, int ff) : p(pp), c(cc), f(ff) {}
};

vector< item > foods;

bool calc(int n, int p, int c, int f)
{
	if (p < 0 || c < 0 || f < 0)
	{
		return false;
	}
	if (p == 0 && c == 0 && f == 0)
	{
		return true;
	}
	if (n == 0)
	{
		return false;
	}
	return calc(n - 1, p - foods[n - 1].p, c - foods[n - 1].c, f - foods[n - 1].f) || calc(n - 1, p, c, f);
}

int main()
{
	freopen("30.in.txt", "r", stdin);
	freopen("30.out.txt", "w", stdout);

	int t;
	int n;
	int gp, gc, gf;

	scanf("%d", &t);

	for (int st = 0; st < t; st++)
	{
		scanf("%d%d%d", &gp, &gc, &gf);
		scanf("%d", &n);
		foods.clear();
		foods.resize(n);
		for (int i = 0; i < n; i++)
		{
			scanf("%d%d%d", &foods[i].p, &foods[i].c, &foods[i].f);
		}
		bool answer = calc(n, gp, gc, gf);
		printf("Case #%d: %s", st + 1, answer ? "yes" : "no");
		if (st < t - 1)
		{
			printf("\n");
		}
	}

	return 0;
}
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <vector>
using namespace std;

bool possible(const vector<vector<int>>& food, int i, int P, int C, int F) {
    if (P == 0 && C == 0 && F == 0)
        return true;
    if (i == food.size() || P < 0 || C < 0 || F < 0)
        return false;
    if (possible(food, i+1, P - food[i][0], C - food[i][1], F - food[i][2]))
        return true;
    return possible(food, i+1, P, C, F);
}

int main(int argc, char *argv[]) {
    int T;
    scanf("%d", &T);
    assert(1 <= T && T <= 20);

    for (int t = 1; t <= T; ++t) {
        int P, C, F, N;
        scanf("%d%d%d%d", &P, &C, &F, &N);
        assert(10 <= P && P <= 1000);
        assert(10 <= C && C <= 1000);
        assert(10 <= F && F <= 1000);
        assert(1 <= N && N <= 20);

        // matrix of size Nx3 -> food[N][3]
        vector<vector<int>> food(N, vector<int>(3, 0));
        for (int i = 0; i < N; ++i)
            scanf("%d%d%d", &food[i][0], &food[i][1], &food[i][2]);

        printf("Case #%d: %s\n", t, possible(food, 0, P, C, F)? "yes" : "no");
    }
    return EXIT_SUCCESS;
}


#include <iostream>
using namespace std;

const int MAX_NUM_FOODS = 20;

class Food
{
private:
   int protein, carbs, fat;

public:
   static int desiredP, desiredC, desiredF;
   Food( int inProtein, int inCarbs, int inFat );
   const Food operator+(Food & f) const;
   bool CompletesDaily()
   { return (protein == desiredP && carbs == desiredC &&
             fat == desiredF);}
   int getProtein() { return protein; }
   int getCarbs() { return carbs; }
   int getFat() { return fat; }
};

Food::Food( int inProtein = 0, int inCarbs = 0, int inFat = 0 )
{
   protein = inProtein;
   carbs = inCarbs;
   fat = inFat;
}

const Food Food::operator+(Food & f) const
{
   Food temp( protein + f.getProtein(), carbs + f.getCarbs(),
              fat + f.getFat() );
   return temp;
}

bool Possible( Food f, int numFoods, Food foodArray[],
               int numFoodsChecked = 0 )
{
   if (f.CompletesDaily())
      return true;

   if (numFoodsChecked >= numFoods)
      return false;

   return Possible(f + foodArray[numFoodsChecked], numFoods, foodArray,
           numFoodsChecked + 1) ||
          Possible(f, numFoods, foodArray, numFoodsChecked + 1);
}

int Food::desiredP, Food::desiredC, Food::desiredF;

void main()
{
   int numCases = 0;
   cin >> numCases;

   for (int j = 1; j <= numCases; j++)
   {
      Food foodArray[MAX_NUM_FOODS];

      cin >> Food::desiredP >> Food::desiredC >> Food::desiredF;

      int numFoods;
      cin >> numFoods;

      for (int i = 0; i < numFoods; i++)
      {
         int tempProtein, tempCarbs, tempFat;
         cin >> tempProtein >> tempCarbs >> tempFat;
         foodArray[i] = Food(tempProtein, tempCarbs, tempFat);
      }

      for (int i = numFoods; i < MAX_NUM_FOODS; i++)
      {
         foodArray[i] = NULL;
      }

      cout << "Case #" << j << ": ";

      Food temp;
      if (Possible(temp, numFoods, foodArray))
         cout << "yes" << endl;
      else
         cout << "no" << endl;
   }
}
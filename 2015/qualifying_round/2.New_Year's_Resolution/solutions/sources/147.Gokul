def soln():
	with open ("new_years_resolution.txt", "r") as myfile:
	    data=myfile.readlines()
	new_data=[]
	for i in xrange(int(data.pop(0))):
		out = tuple(data.pop(0).split())
		out_tmp = []
		for i in xrange(3):
			out_tmp.append(int(out[i]))
		out = tuple(out_tmp)
		vals = []
		for j in xrange(int(data.pop(0))):
			val = tuple(data.pop(0).split())
			val_tmp = []
			for i in xrange(3):
				val_tmp.append(int(val[i]))
			vals.append(val_tmp)
		new_data.append([out, vals])
	open('soln.txt', 'w').close()
	with open('soln.txt', 'a') as f:
		for i in xrange(len(new_data)):
			match, vals = new_data[i]
			stop = False
			f.write("Case #" + str(i+1) + ": ")
			for food in vals:
				if food[0] > match[0] or food[1] > match[1] or food[2] > match[2]:
					vals.remove(food)
				if food[0] == match[0] and food[1] == match[1] and food[2] == match[2]:
					f.write('yes\n')
					stop = True
			if not stop:
				poss = vals[:]
			count = 0 
			while not stop:
				if count == 1:
				count += 1
				out = helper(match, poss, vals)
				if type(out) == list:
					if len(out) == 0:
						f.write('no\n')
						stop = True
					else:
						poss = out[:]
				else:
					f.write('yes\n')
					stop = True

def helper(match, ls, vals):
	out = []
	for food1 in vals:
		for food2 in ls:
			food = (food1[0]+food2[0], food1[1]+food2[1], food1[2]+food2[2])
			if food[0] <= match[0] and food[1] <= match[1] and food[2] <= match[2]:
				out.append(food)
			if food[0] == match[0] and food[1] == match[1] and food[2] == match[2]:
				return True
	return out



soln()

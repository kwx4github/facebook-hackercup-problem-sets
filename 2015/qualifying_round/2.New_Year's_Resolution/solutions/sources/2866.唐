#include <iostream>
#include <unordered_map>
#include <utility>
#include <string>
using namespace std;
int T, N, gp, gc, gf;
int pcf[25][3];
typedef pair<int,int> PII;
struct pairhash {
public:
  template <typename T, typename U>
  std::size_t operator()(const std::pair<T, U> &x) const
  {
    return std::hash<T>()(x.first) ^ std::hash<U>()(x.second);
  }
};
bool solve(int idx, unordered_map<pair<int,int>,bool, pairhash> &m, 
		int cgp, int cgc, int cgf){
	if(cgp == 0 && cgc == 0 && cgf == 0) return true;
	if (idx == -1) {
		return false;//cgp == pcf[idx][0] && cgc == pcf[idx][1] &&
			//cgf == pcf[idx][2] ? true : false;
	}
	auto curKey = PII{idx, cgp | (cgc << 10) | (cgf << 20)};
	if(m.count(curKey)){
		return m[curKey];
	}
	if (cgp >= pcf[idx][0] && cgc >= pcf[idx][1] &&
			cgf >= pcf[idx][2]) {
		bool res = solve(idx-1, m, cgp, cgc, cgf) || 
			solve(idx-1, m, cgp - pcf[idx][0], cgc - pcf[idx][1],
			cgf - pcf[idx][2]);
		m[curKey] = res;
		return res;
	} else {
		m[curKey] = solve(idx-1, m, cgp, cgc, cgf);
		return m[curKey];
	}
}
int main(int argc, const char *argv[])
{
	cin >> T;
	for (int te = 1; te <= T; te++) {
		cin >> gp >> gc >> gf;
		cin >> N;
		for (int i = 0; i < N; i++) {
			cin >> pcf[i][0] >> pcf[i][1] >> pcf[i][2];
		}
		unordered_map<pair<int,int>, bool, pairhash> m;
		cout << "Case #" << te << ": " <<
            (solve(N-1, m, gp, gc, gf) ? "yes" : "no") << endl;
	}
	return 0;
}

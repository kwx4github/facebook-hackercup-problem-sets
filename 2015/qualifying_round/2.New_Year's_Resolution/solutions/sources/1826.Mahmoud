import java.io.OutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		ProbB solver = new ProbB();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class ProbB {
    public void solve(int testNumber, InputReader jin, PrintWriter jout) {
        int gp = jin.int32();
        int gc = jin.int32();
        int gf = jin.int32();

        int n = jin.int32();
        int[] p = new int[n];
        int[] c = new int[n];
        int[] f = new int[n];
        for(int i = 0; i < n; i++) {
            p[i] = jin.int32();
            c[i] = jin.int32();
            f[i] = jin.int32();
        }


        boolean valid = false;
        for(int mask = 1; !valid && (mask < (1 << n)); mask++) {
            int ap = 0;
            int ac = 0;
            int af = 0;
            for(int i = 0; i < n; i++) {
                if((mask & (1 << i)) > 0) {
                    ap += p[i];
                    ac += c[i];
                    af += f[i];
                    if(ap > gp || ac > gc || af > gf)
                        break;
                }
            }
            valid = ap == gp && ac == gc && af == gf;
        }
        jout.print("Case #" + testNumber + ": ");
        jout.println(valid? "yes" : "no");
    }
}

class InputReader {
    private static final int bufferMaxLength = 1024;
    private InputStream in;
    private byte[] buffer;
    private int currentBufferSize;
    private int currentBufferTop;
    private static final String tokenizers = " \t\r\f\n";

    public InputReader(InputStream stream) {
        this.in = stream;
        buffer = new byte[bufferMaxLength];
        currentBufferSize = 0;
        currentBufferTop = 0;
    }

    private boolean refill() {
        try {
            this.currentBufferSize = this.in.read(this.buffer);
            this.currentBufferTop = 0;
        } catch(Exception e) {}
        return this.currentBufferSize > 0;
    }


    public Byte readChar() {
        if(currentBufferTop < currentBufferSize) {
            return this.buffer[this.currentBufferTop++];
        } else {
            if(!this.refill()) {
                return null;
            } else {
                return readChar();
            }
        }
    }

    public String token()  {
        StringBuffer tok = new StringBuffer();
        Byte first;
        while((first = readChar()) != null && (tokenizers.indexOf((char) first.byteValue()) != -1));
        if(first == null) return null;
        tok.append((char)first.byteValue());
        while((first = readChar()) != null && (tokenizers.indexOf((char) first.byteValue()) == -1)) {
            tok.append((char)first.byteValue());
        }
        return tok.toString();
    }


    public String next() {
        return token();
    }

    public Integer int32() throws NumberFormatException {
        String tok = token();
        return tok == null? null : Integer.parseInt(tok);
    }

}


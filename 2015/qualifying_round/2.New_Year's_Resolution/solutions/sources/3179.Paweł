#include <iostream>
#include <vector>

#ifdef DEBUG_MODE
#define print(x) cout << #x << " = " << x << endl
#define debug(x) x
#else
#define print(x)
#define debug(x)
#endif

typedef short int int16;
typedef unsigned short int uint16;
typedef int int32;
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;

using namespace std;

class Application
{
public:
    inline void Run();
private:
    // Methods
    inline void LoadData();
    inline void Solve();
    bool IsPossible(int n);
    
    // Fields
    int test_number_;
    int a, b, c;
    int t_a, t_b, t_c;
    int product_number_;
    vector <int> a_;
    vector <int> b_;
    vector <int> c_;
};

int main()
{
    ios_base::sync_with_stdio(false);
    Application app;
    app.Run();
}

inline void Application::LoadData()
{
    cin >> a >> b >> c;
    
    cin >> product_number_;
    a_.resize(product_number_);
    b_.resize(product_number_);
    c_.resize(product_number_);
    
    for(int i = 0; i < product_number_; ++i)
    {
        cin >> a_[i] >> b_[i] >> c_[i];
    }
    t_a = 0;
    t_b = 0;
    t_c = 0;
}

inline void Application::Solve()
{
    bool success = false;
    
    
    for(int i = 0; i < product_number_; ++i)
    {
        if(IsPossible(i))
        {
            success = true;
            cout << "yes\n";
            break;
        }
    }
    
    if(!success)
        cout << "no\n";
}

bool Application::IsPossible(int n)
{
    t_a += a_[n];
    t_b += b_[n];
    t_c += c_[n];
    
    if(t_a > a || t_b > b || t_c > c)
    {
        t_a -= a_[n];
        t_b -= b_[n];
        t_c -= c_[n];
        return false;
    }
    
    if(t_a == a && t_b == b && t_c == c)
        return true;
    
    
    for(int i = n + 1; i < product_number_; ++i)
    {
        if(IsPossible(i))
            return true;
    }
    
    t_a -= a_[n];
    t_b -= b_[n];
    t_c -= c_[n];

    return false;
}

inline void Application::Run()
{
    cin >> test_number_;
    
    for(int i = 0; i < test_number_; ++i)
    {
        cout << "Case #" << i + 1 << ": ";
        LoadData();
        Solve();
    }
}



package main

import (
	"fmt"
)

type MacroNutrients struct {
	Protein int
	Carbs int
	Fat int
}

func ReadMacroNutrients() MacroNutrients {
	m := MacroNutrients{}
	fmt.Scanln(&m.Protein, &m.Carbs, &m.Fat)
	return m
}

func (m *MacroNutrients) String() string {
	return fmt.Sprintf("%d %d %d\n", m.Protein, m.Carbs, m.Fat)
}

func (m MacroNutrients) Plus(other MacroNutrients) MacroNutrients {
	return MacroNutrients{m.Protein + other.Protein, m.Carbs + other.Carbs, m.Fat + other.Fat}
}

func (m MacroNutrients) Minus(other MacroNutrients) MacroNutrients {
	return MacroNutrients{m.Protein - other.Protein, m.Carbs - other.Carbs, m.Fat - other.Fat}
}

func (m MacroNutrients) Busts(limit MacroNutrients) bool {
	return m.Protein > limit.Protein || m.Carbs > limit.Carbs || m.Fat > limit.Fat
}

func (m MacroNutrients) Equals(other MacroNutrients) bool {
	return m.Protein == other.Protein && m.Carbs == other.Carbs && m.Fat == other.Fat
}

func (m MacroNutrients) Negative() bool {
	return m.Protein < 0 || m.Carbs < 0 || m.Fat < 0
}

func prune(limit MacroNutrients, foods []MacroNutrients) []MacroNutrients {
	pruned := []MacroNutrients{}
	for i := range foods {
		if !foods[i].Busts(limit) {
			pruned = append(pruned, foods[i])
		}
	}
	return pruned
}

func search(limit MacroNutrients, foods []MacroNutrients) bool {
	if len(foods) == 0 {
		return false
	}
	if limit.Negative() {
		return false
	}
	for i := range foods {
		if foods[i].Equals(limit) {
			return true
		}
		if search(limit.Minus(foods[i]), foods[1:]) {
			return true
		}
	}
	return false
}

func main() {
	var count, T int
	fmt.Scanln(&T)
	for t := 1; t <= T; t++ {
		limit := ReadMacroNutrients()
		fmt.Scanln(&count)
		foods := make([]MacroNutrients, count, count)
		for i := 0; i < count; i++ {
			foods[i] = ReadMacroNutrients()
		}
		possible := search(limit, prune(limit, foods))
		if possible {
			fmt.Printf("Case #%d: yes\n", t)
		} else {
			fmt.Printf("Case #%d: no\n", t)
		}
	}
}

#include<bits/stdc++.h>
using namespace std;
class nut
{
    public:
    int a,b,c;
    nut()
    {
        a=b=c=0;
    }
    bool operator==(nut b)
    {
        return (this->a==b.a)&&(this->b==b.b)&&(this->c==b.b);
    }
    bool operator!=(nut b)
    {
        return (this->a!=b.a)||(this->b!=b.b)||(this->c!=b.b);
    }
    bool operator>(nut b)
    {
        return (this->a>b.a)||(this->b>b.b)||(this->c>b.b);
    }
    nut operator-(nut b)
    {
        nut c;
        c.a=this->a-b.a;
        c.b=this->b-b.b;
        c.c=this->c-b.c;

        //cout<<b.a<<" "<<b.b<<" "<<b.c;
        //cout<<c.a<<" "<<c.b<<" "<<c.c;
        return c;

    }
};
bool isSubsetSum(nut set[], int n, nut sum)
{

   // Base Cases
   nut z;
   if (sum == z)
     return true;
   if (n == 0 && sum != z)
     return false;

   // If last element is greater than sum, then ignore it
   if (set[n-1] > sum)
     return isSubsetSum(set, n-1, sum);

   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sum-set[n-1]);
}
int main()
{
    int t,n;
    nut sum,set[22];
    scanf("%d",&t);int j=0;
    while(--t>=0)
    {
        j++;
        scanf("%d %d %d",&sum.a,&sum.b,&sum.c);
        scanf("%d",&n);
        for(int i=0;i<n;i++)
        {
            scanf("%d %d %d",&set[i].a,&set[i].b,&set[i].c);
        }
        printf("Case #%d: ",j);
        if(isSubsetSum(set,n,sum))
            printf("yes\n");
        else
            printf("no\n");
    }
}

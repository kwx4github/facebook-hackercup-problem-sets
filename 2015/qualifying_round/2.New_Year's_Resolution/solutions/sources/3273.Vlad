import java.io.*;
import java.util.Locale;
import java.util.StringTokenizer;

public class ProblemB {

    public static void main(String[] args) throws Exception {
        Locale.setDefault(Locale.UK);
        new ProblemB();
    }

    private BufferedReader in = null;
    private PrintWriter out = null;
    private StringTokenizer tok = new StringTokenizer("");
    private String fileName = "#IOtxt";

    public ProblemB() throws Exception {
        init();
        solve();
        in.close();
        out.close();
    }

    private void solve() throws Exception {
      int T = nextInt();
      test:
      for (int tt = 1; tt <= T; tt++) {
        int[] b = new int[]{nextInt(), nextInt(), nextInt()};
        int n = nextInt();
        int[][] a = new int[n][3];
        for (int i = 0; i < n; i++) {
          a[i][0] = nextInt();
          a[i][1] = nextInt();
          a[i][2] = nextInt();
        }
        for (int m = 1; m < (1 << n); m++) {
          int[] c = new int[3];
          for (int i = 0; i < n; i++) {
            if (((m >> i) & 1) == 1) {
              for (int j = 0; j < 3; j++) {
                c[j] += a[i][j];
              }
            }
          }
          boolean ok = true;
          for (int i = 0; i < 3; i++) {
            if (c[i] != b[i]) {
              ok = false;
              break;
            }
          }
          if (ok) {
            out.println("Case #" + tt + ": yes");
            continue test;
          }
        }
        out.println("Case #" + tt + ": no");
      }
    }


    private void init() throws FileNotFoundException {
        if (fileName.equals("#Console")) {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
        } else if (fileName.equals("#IOtxt")) {
            in = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
        } else {
            in = new BufferedReader(new FileReader(fileName + ".in"));
            out = new PrintWriter(fileName + ".out");
        }
    }


    private int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    private long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }


    private String nextToken() throws IOException {
        while (!tok.hasMoreTokens()) {
            String s = in.readLine();
            if (s == null) {
                return null;
            }
            tok = new StringTokenizer(s);
        }
        return tok.nextToken();
    }

}
            
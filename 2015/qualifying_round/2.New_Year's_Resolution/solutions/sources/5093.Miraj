/*
 Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some research and has found out that calories come from three main sources, called macronutrients: protein, carbohydrates, and fat. Alex wants to get the right balance of protein, carbohydrates, and fat to have a balanced diet. For each available food, Alex can only choose to eat it or not eat it. He can't eat a certain food more than once, and he can't eat a fractional amount of a food.

Input
Input begins with an integer T, the number of test cases. For each test case, the first line consists of three space-separated integers: GP, GC, and GF, which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. The next line has the number of foods for that test case, an integer N. The next N lines each consist of three space-separated integers: P, C, and F, which represent the amount of protein, carbohydrates, and fat in that food, respectively.

Output
For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for Alex to eat the exact amount of each macronutrient, or "no" if it is not possible.


*/
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author miraj 
 * backtracking approach
 */
class Subset {
    
        int total_nodes = 0;
         int index[];
         List<List> sequence = new ArrayList<List>();
         List<Integer> list = new ArrayList<Integer>();
         int sequence_size=0;
   
    public boolean first(int[] ip1,int[] ip2,int[] ip3,int[] target_sums) throws IOException{
        // TODO code application logic here
        
        //int ip[] = new int[size];
        int n= 3;
        /*int ip[] = new int[args.length];
        int ip[] = {40,30,20,10,40};
        int ip2[] = {70,10,20,50,10};
        int ip3[] = {30,40,50,90,20};*/
        boolean possible =false;
        int ip_size = ip1.length;
        //int target_sums[] = new int[n];
        //int[] target_sums = {100,100,100};
        sequence = new ArrayList();
        index = new int[ip_size];
        for(int k=0;k<ip_size;k++)
            index[k] = k;
        int ip[] = sorting(ip1);
        //System.out.println("Sorted");
        //print(ip,ip_size,0);
        //print(index,ip_size,0);
        //Arrays.sort(ip);
        int target_sum = target_sums[0];
        int subset[] = new int[ip_size];
        int subset_index[] = new int[ip_size];
        //compare(ip,ip_size,0,subset,0,target_sum);
        if(ip[0]<=target_sum)
            compare(ip,ip_size,0,subset,0,target_sum,0,subset_index);
            //System.out.println(" Total traversal " + total_nodes);
            if(sequence_size>0){
                for(int s=0;s<sequence_size;s++){
                    //System.out.println("Sequence "+s);
                    possible = false;
                    int len = sequence.get(s).size();
                    int sum_arrays[]=new int[n-1];
                    //System.out.println("Len = "+len);
                    
                    for(int x=0;x<len;x++){
                        
                        int temp  = ip2[((int)sequence.get(s).get(x))];
                        sum_arrays[0] +=temp;
                        temp  = ip3[((int)sequence.get(s).get(x))];
                        sum_arrays[1] +=temp;
                        if(sum_arrays[0]>target_sums[1] && sum_arrays[1]>target_sums[2]){
                            break;
                        }
                        else if(sum_arrays[0]==target_sums[1] && sum_arrays[1]==target_sums[2]){
                            possible = true;
                            return true;
                            //break;
                        }
                        
                    }
                    if(possible){
                        return true;
                    }
                }
                
            }
            return false;
        }
      
    private void compare(int[] ip, int ip_size,int current,int[] subset,int subset_size, int target_sum, int cur_sum,int[] subset_index) {
        total_nodes++;
        if(target_sum == cur_sum){
            //print(subset,subset_size,cur_sum);
            //print(subset_index,subset_size,cur_sum);
            addlist(subset_index,subset_size);
            //System.out.println("In");
            //compare(ip,ip_size,current,subset,subset_size,target_sum);
            //break or stop this level
            if(current + 1<ip_size && (cur_sum - ip[current] + ip[current+1] <= target_sum))
                compare(ip,ip_size,current+1,subset,subset_size-1,target_sum,cur_sum - ip[current],subset_index);
        }
        else{
            /*if(target_sum - ip[current]>=0){
                if(subset_size>0)
                 System.out.println(""+current + " "+subset[subset_size-1]);
                    for(int i=current;i<ip_size;i++){

                        subset[subset_size] = ip[current];

                        System.out.println("Before");
                         print(subset,subset_size);
                         if(current<ip_size && (target_sum - ip[current]) >= 0){
                             //target_sum -= ip[current];
                             compare(ip,ip_size,current+1,subset,subset_size+1,target_sum - ip[current]);
                         }

                        //System.out.println(" Loop "+i);
                        System.out.println("After");
                        print(subset,subset_size);
                    }
                
                    
            }*/
            if(current < ip_size && cur_sum + ip[current] <= target_sum){
                for(int i=current; i<ip_size; i++){
                    subset[subset_size] = ip[i];
                    subset_index[subset_size] = index[i];
                    if(cur_sum + ip[current] <= target_sum){
                        //print(subset,subset_size+1,cur_sum + ip[i]);
                        compare(ip,ip_size,i+1,subset,subset_size+1,target_sum,cur_sum + ip[i],subset_index);
                    }
                }
            }
                
        }
    }
    
    private void print(int[] sub,int size,int tsum){
        System.out.println("Answer");
        for(int i =0;i<size;i++){
            System.out.print(sub[i]+" ");
        }
        System.out.print(" "+tsum+"\n");
    }
    
    private void addlist(int[] list_ind,int size){
        for(int i=0;i<size;i++)
            list.add(list_ind[i]);
        
        sequence_size++;
        sequence.add(list);
        list = new ArrayList<Integer>();
    }
    
    public int[] sorting(int[] arr){
        boolean swap = true;
        if(arr.length > 2){
            for(int i=0;i<arr.length-1;i++){
               
                for(int j=i+1;j<arr.length;j++){
                    if(arr[i]>arr[j]){
                        int temp = arr[i];
                        arr[i] = arr[j];
                        arr[j] = temp;
                        
                        temp = index[i];
                        index[i] = index[j];
                        index[j]=temp;
                        swap = true;
                    }
                }
            }
            
        }
        return arr;
    }
    
}
public class new_year{
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new FileReader("G:\\project\\testing.txt"));
        int n = Integer.parseInt(br.readLine());
         Subset[] ss = new Subset[n];
        for(int i=0;i<n;i++){
            ss[i] = new Subset();
            String weights = br.readLine();
            String[] temp = weights.split(" ");
            int mweights[] = new int[3];
            mweights[0] = Integer.parseInt(temp[0]);
            mweights[1] = Integer.parseInt(temp[1]);
            mweights[2] = Integer.parseInt(temp[2]);
            
            int nitems = Integer.parseInt(br.readLine());
            
            int ip[] = new int[nitems];
            int ip2[] = new int[nitems];
            int ip3[] = new int[nitems];
            String reads="";
            
            for(int t=0;t<nitems;t++){
                reads = br.readLine();
                String spl[] = reads.split(" ");
                ip[t] = Integer.parseInt(spl[0]);
                ip2[t] = Integer.parseInt(spl[1]);
                ip3[t] = Integer.parseInt(spl[2]);
            }
            if(ss[i].first(ip,ip2,ip3,mweights)){
                System.out.println("Case #"+ (i+1)+": yes");
            }
            else{
             System.out.println("Case #"+ (i+1)+": no");   
            }
        }
        
    }
}
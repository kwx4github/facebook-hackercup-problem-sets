//
//  main.cpp
//  hacker
//
//  Created by jnozsc on 1/8/15.
//  Copyright (c) 2015 jnozsc. All rights reserved.
//

#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

class Nutrient {
  public:
    int p;
    int c;
    int f;
    Nutrient(int p, int c, int f) {
        this->p = p;
        this->c = c;
        this->f = f;
    }
};

void eatDFS(bool& eat, Nutrient* tmp, vector<Nutrient*> foods, vector<bool> used, Nutrient* total) ;

int main(int argc, const char* argv[]) {
    // insert code here...
    //std::cout << "Hello, World!\n";
    //string file = "new_years_resolution_example_input.txt";
    ifstream infile(argv[1]);
    //ifstream infile(file);
    int n;
    infile >> n;
    for (int i = 0; i < n; ++i) {
        int pTotal, cTotal, fTotal;
        infile >> pTotal >> cTotal >> fTotal;
        Nutrient* total = new Nutrient(pTotal, cTotal, fTotal);
        int foodSize;
        infile >> foodSize;
        vector<Nutrient*> foods(foodSize, NULL);
        vector<bool> used(foodSize, false);
        for (int j = 0; j < foodSize; ++j) {
            int p, c, f;
            infile >> p >> c >> f;

            foods[j] = new Nutrient(p, c, f);
        }
        bool eat = false;
        Nutrient* tmp = new Nutrient(0, 0, 0);
        eatDFS(eat, tmp, foods, used, total);
        string result;
        if (eat) {
            result = "yes";
        } else {
            result = "no";
        }
        cout << "Case #" << i + 1 << ": " << result << endl;
        foods.clear();
        used.clear();
    }
    return 0;
}

void eatDFS(bool& eat, Nutrient* tmp, vector<Nutrient*> foods, vector<bool> used, Nutrient* total) {
    if (eat) {
        return;
    }
    if (tmp->p == total->p && tmp->c == total->c && tmp->f == total->f) {
        eat = true;
        return;
    }
    for (int i = 0; i < foods.size(); i++) {
        Nutrient* current = foods[i];
        if (used[i] == false && current->p + tmp->p <= total->p && current->c + tmp->c <= total->c && current->f + tmp->f <= total->f) {
            used[i] = true;
            tmp->p += current->p;
            tmp->c += current->c;
            tmp->f += current->f;
            eatDFS(eat, tmp, foods, used, total);
            if (eat) return;
            tmp->p -= current->p;
            tmp->c -= current->c;
            tmp->f -= current->f;
            used[i] = false;
        }
    }
}

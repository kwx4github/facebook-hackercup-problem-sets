def eatX(pp, cc, ff, x)
  # pp += @p[i]
  # cc += @c[i]
  # ff += @f[i]
  return true if pp == @gp and cc == @gc and ff == @gf
  return false unless pp <= @gp and cc <= @gc and ff <= @gf
  (x).upto(@n-1) do |i| #add another dish
    return true if (eatX(pp+@p[i],cc+@c[i],ff+@f[i],i+1))
  end
  return false
end

def solve(str)
  @p = [] 
  @c = []
  @f = [] 
  @gp, @gc, @gf = @input.readline.strip.split(/\s+/).map(&:to_i)
  @n = @input.readline.to_i
  @n.times do 
    tp, tc, tf = @input.readline.strip.split(/\s+/).map(&:to_i)
    @p.push(tp)
    @c.push(tc)
    @f.push(tf)
  end

  if eatX(0,0,0,0) 
    return "yes"
  else
    return "no"
  end
end


@input=File.open(ARGV[0] || "input", 'r')
total = @input.readline.to_i
(1..total).each do |i|
  res = solve("#{i}")
  out = 'Case #' + "#{i}: #{res}"
  puts out
  $stderr.puts "------>: #{out}"
end
@input.close

#include <iostream>
#include <vector>

using namespace std;

struct Food {
  int p, c, f;

  Food(int p, int c, int f) : p(p), c(c), f(f) {}
};

typedef vector<Food> VF;

bool goal(Food G, Food sum) {
  return G.p == sum.p and G.c == sum.c and G.f == sum.f;
}

bool over(Food G, Food sum) {
  return G.p < sum.p or G.c < sum.c or G.f < sum.f;
}

bool bruteResolution(Food G, const VF &meal, Food &sum, int pos) {
  if (goal(G,sum)) return true;
  if (over(G,sum)) return false;
  for (int i = pos; i < (int)meal.size(); i++) {
    sum.p += meal[i].p;
    sum.c += meal[i].c;
    sum.f += meal[i].f;
    bool aux = bruteResolution(G,meal,sum,i+1);
    if (aux) return true;
    sum.p -= meal[i].p;
    sum.c -= meal[i].c;
    sum.f -= meal[i].f;
    aux = bruteResolution(G,meal,sum,i+1);
    if (aux) return true;
  }
  return false;
}

int main() {
  int T;
  cin >> T;
  for (int t = 1; t <= T; t++) {
    Food G(0,0,0);
    cin >> G.p >> G.c >> G.f; 
    int N; 
    cin >> N;
    VF meal;
    for (int i = 0; i < N; i++) {
      int p, c, f;
      cin >> p >> c >> f;
      meal.push_back(Food(p,c,f));
    }
    Food sum(0,0,0);
    bool ans = bruteResolution(G, meal, sum, 0);
    cout << "Case #" << t << ": " << (ans? "yes":"no") << endl;
  }
}
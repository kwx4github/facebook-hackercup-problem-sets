#pragma comment (linker, "/STACK:128000000")
#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>

#define mp make_pair
#define pb push_back
#define sz(x) ((int)(x).size())
#define forn(i, n) for(int i=0;i<(n);++i)
#define clr(ar, val) memset(ar, val, sizeof(ar))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> point;

const int N = 1e5 + 200;
const int INF = int(1e9);
const ll LINF = 1ll * INF * INF;
const int md = int(1e9) + 7;
const ld eps = 1e-9;
const ld PI = 3.1415926535897932384626433832795l;

int n, test, iter;
int dp[1 << 20][3];
int c[20][3];
int need[3];
string s;
int main()
{
    //ios_base::sync_with_stdio(false);
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
    cin >> test;
    for (iter = 1; iter <= test; iter++) {
        clr(dp, 0);
        cin >> need[0] >> need[1] >> need[2];
        cin >> n;
        for (int i = 0; i < n; i++) cin >> c[i][0] >> c[i][1] >> c[i][2];
        for (int mask = 1; mask < (1 << n); mask++)
            for (int j = 0; j < 3; j++) {
                int cur = 0;
                for (int i = 0; i < n; i++)
                if (mask & (1 << i)) {
                    cur = dp[mask ^ (1 << i)][j] + c[i][j];
                    break;
                }
                dp[mask][j] = cur;
            }
        s = "no";
        for (int mask = 0; mask < (1 << n); mask++) {
            bool ok = true;
            for (int j = 0; j < 3; j++)
            if (need[j] != dp[mask][j]) ok = false;
            if (ok) {
                s = "yes";
                break;
            }
        }
        cout << "Case #" << iter << ": " << s << endl;
    }
    return 0;
}

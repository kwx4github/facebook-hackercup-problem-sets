
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;


class newyear {
    static class FastScanner{
        BufferedReader s;
        StringTokenizer st;
        
        public FastScanner(){
            st = new StringTokenizer("");
            s = new BufferedReader(new InputStreamReader(System.in));
        }
        
        public FastScanner(File f) throws FileNotFoundException{
            st = new StringTokenizer("");
            s = new BufferedReader (new FileReader(f));
        }
        
        public int nextInt() throws IOException{
            if(st.hasMoreTokens())
                return Integer.parseInt(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextInt();
            }
        }
        
      public double nextDouble() throws IOException{
            if(st.hasMoreTokens())
                return Double.parseDouble(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextDouble();
            }
        }
      
        public long nextLong() throws IOException{
            if(st.hasMoreTokens())
                return Long.parseLong(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextLong();
            }
        }
        
        public String nextString() throws IOException{
            if(st.hasMoreTokens())
                return st.nextToken();
            else{
                st = new StringTokenizer(s.readLine());
                return nextString();
            }
            
        }
        public String readLine() throws IOException{
            return s.readLine();
        }
        
        public void close() throws IOException{
            s.close();
        }
        
    }
      private static FastScanner s = new FastScanner();   
      private static PrintWriter ww = new PrintWriter(new OutputStreamWriter(System.out));
    
     public static void main(String[] args) throws IOException 
     {
       int test=s.nextInt();int prasa =1;
       while(test-->0)
       { 
           int p1=s.nextInt();int c1=s.nextInt();int f1=s.nextInt();boolean arc=false;
           int t1=s.nextInt();
           int a[][] = new int[t1][3];
           int fst[]=new int[t1];
        for(int i=0;i<t1;i++)
        {
            fst[i]=s.nextInt();
           a[i][0]=fst[i]; a[i][1]=s.nextInt();a[i][2]=s.nextInt();
        }
         
          arc=prasang(fst,a,p1,c1,f1);
          if(arc)
               System.out.println("Case #"+prasa+":"+" yes");
          else
             System.out.println("Case #"+prasa+":"+" no"); 
          prasa++;
       }
         s.close();
         ww.close();
     }
  private static boolean prasang(int array[],int a[][],int target0,int target1,int target2)
{
  int numOfSubsets = 1 << array.length;boolean flag=false; ArrayList<Integer> ar= new ArrayList<>(); ArrayList<Integer> ar1= new ArrayList<>(); ArrayList<Integer> ar2= new ArrayList<>();

  for(int i = 0; i < numOfSubsets; i++)
 {
    int pos = array.length - 1;                                /////bitmask to find all sub sets
   int bitmaskk = i;
   int sum=0;int sum2=0;int sum3=0;ar.clear();ar1.clear();ar2.clear();

  // System.out.print("{");
   while(bitmaskk > 0)
   {
    if((bitmaskk & 1) == 1)
    {
        sum+=array[pos];ar.add(array[pos]);
        sum2+=a[pos][1];sum3+=a[pos][2];ar1.add(a[pos][1]);ar2.add(a[pos][2]);
        if(sum==target0)
        {
            if(sum2==target1 && sum3==target2)
            {
              flag=true;break;   
            }
        }
    
    }
    
    bitmaskk >>= 1;
    pos--;
   }
   if(flag)break;
 }
  return flag;
}

}

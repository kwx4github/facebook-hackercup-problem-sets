package org.onja.algo.facebook.hackercup2015;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PrintStream;
import java.util.Arrays;

/**
 * NewYearsResolution
 * */
public class NewYearsResolution {

    public static int[] iObjectives; 
    public static int[][] rFoods;
    public static boolean[] results; 
    public static int currentTestCase; 
    
    /***/
    public static void main(String[] args) 
            throws IOException {

        // Input File.
        LineNumberReader reader=new LineNumberReader(
                new FileReader(new File(args[0])));
        
        // Output File.
        PrintStream printer=new PrintStream(new File(args[1])); 
        
        // TestCases [1 ≤ T ≤ 20] 
        results = new boolean[Integer.valueOf(reader.readLine())];
        for (int nTestCase = 0; nTestCase != results.length; nTestCase++){            
            currentTestCase = nTestCase; 
            
            // Objectives [10 ≤ GP, GC, GF ≤ 1000] 
            String[] objectives = reader.readLine().split(" ");
            iObjectives = new int[3];
            for( int i = 0; i != iObjectives.length; i++)
                iObjectives[i] = Integer.valueOf(objectives[i]); 

            // Foods [1 ≤ N ≤ 20] 
            rFoods = new int[Integer.valueOf(reader.readLine()).intValue()][3];  
            for (int i = 0; i != rFoods.length; i++) {
                
                // Foods [10 ≤ P, C, F ≤ 1000]
                String[] strFoods = reader.readLine().split(" ");
                for (int u = 0; u != 3; u++)
                    rFoods[i][u] = Integer.valueOf(strFoods[u]); 
            } 
            
            // Main processing
            int cObjectives[] = new int[3];
            doRound(0, cObjectives);

            //
            System.err.println("Case #" + (nTestCase + 1) + ": " + (results[currentTestCase] ? "yes" : "no")); 
            printer.println("Case #" + (nTestCase + 1) + ": " + (results[currentTestCase] ? "yes" : "no"));
        }
        
        printer.close();
        reader.close();
    }

    /**
     * @param index
     * @param cObjectives
     * */
    private static void doRound(int index, int[] cObjectives) {
        if (!results[currentTestCase]) { // No need to process if case is already OK.
            
            if (Arrays.equals(cObjectives, iObjectives)) {
                results[currentTestCase] = true;
                return; 
            }
            
            if ((index < rFoods.length) 
                    && canContinue(cObjectives)) {
                
                int[] nObjectives = Arrays.copyOf(cObjectives, cObjectives.length);
                for (int i = 0; i != 3; i++)
                    nObjectives[i] += rFoods[index][i];
                doRound(index + 1, nObjectives); // Continues including this Food.
                doRound(index + 1, cObjectives); // Continues excluding this Food.                    
            }
            
        }
    }
    
    /**
     * canContinue
     * @param cObjectives
     * */
    public static boolean canContinue(int[] cObjectives) {
        for (int i = 0; i != cObjectives.length; i++)
            if (cObjectives[i] > iObjectives[i])
                return false; 
        return true;
    }
    
}

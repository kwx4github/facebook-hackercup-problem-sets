#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<algorithm>
#include<bitset>
#include<list>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<cmath>
#include<string>
#include<cstring>
#include<sstream>
#include<climits>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;

#define S(x) scanf("%d",&x)
#define SD(x) scanf("%lf",&x)
#define SL(x) scanf("%lld",&x)
#define pb(x) push_back(x)
#define mp make_pair
#define F(i, a, b) for (int i = int(a); i < int(b); i++)
#define forit(it, a) for (it = (a).begin(); it != (a).end(); it++)
#define M(x,i) memset(x,i,sizeof(x))

/* -------------------CODE GOES HERE---------------------- */

struct food {

	int P;
	int C;
	int F;
};

vector<food> arr;

bool Recursion(int gp, int gc, int gf, int n){

	if((!gp) && (!gf) && (!gc)) return true;
	if((!n) && ((gp > 0) || (gc > 0) || (gf > 0))) return false;

	bool rt;

	if(n > 0){
		rt = Recursion(gp,gc,gf,n-1);
		if((gp - arr[n-1].P >= 0) && (gc - arr[n-1].C >= 0) && (gf - arr[n-1].F >= 0)){
			rt = ((rt) || (Recursion((gp-arr[n-1].P),(gc-arr[n-1].C),(gf-arr[n-1].F),n-1)));
		}
			return rt;
	}
}

int main(){
	
	int T, gp, gc, gf, N; S(T);
	int t = 1;

	food temp;
	bool ans;

	while(T--){

		arr.clear();
		S(gp); S(gc); S(gf);
		S(N);

		F(i,0,N){
			S(temp.P); S(temp.C); S(temp.F);
			arr.pb(temp);
		}

		ans = Recursion(gp,gc,gf,N);
		ans ? printf("Case #%d: yes\n", t++) : printf("Case #%d: no\n", t++);
	}

}
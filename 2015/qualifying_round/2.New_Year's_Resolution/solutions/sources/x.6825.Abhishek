import java.util.*;
import java.lang.*;
import java.io.*;


public class SubsetSum 
{
	public static void main(String args[]) throws java.lang.Exception
	{
		String fileName = args[0];
		List<String> inputLines = readLines(fileName);
		
		FileOutputStream f = new FileOutputStream("subsetSum_result.txt");
		PrintStream ps = new PrintStream(f);
		
		List<KeyValue> inputs = new ArrayList<KeyValue>();
		
		//System.out.println(inputLines.size());
		
		for(int i=1; i<inputLines.size();)
		{
			String totalRequiredCalsStr =inputLines.get(i);
			//System.out.println(totalRequiredCalsStr);
			
			i++;
			int totalFoodItems = Integer.parseInt(inputLines.get(i));
			
			//System.out.println(totalFoodItems);
			i++;
			
			List<String> foodWithCalsStr = new ArrayList<String>();
			int j = 0;
			for(;j < totalFoodItems ;j++)
			{
				foodWithCalsStr.add(inputLines.get(i+j));
				//System.out.println(inputLines.get(i+j));
			}
			
			i +=j;

			KeyValue k = new KeyValue(totalRequiredCalsStr,totalFoodItems,foodWithCalsStr);
			inputs.add(k);		
		}
		
		for(int i=0; i<inputs.size(); i++)
    	{
			Boolean retval = isSubsetSum(inputs.get(i));
			String str = "no";
			if(retval) str = "yes";
			
			ps.printf("Case #%d %s",i+1,str);
			ps.println(); //this writes your new line
			//System.out.println(inputs.get(i).Count);
		}
		
		ps.close();
	}
	
	static Boolean isSubsetSum(KeyValue kv)
	{
		Boolean retval = false;;
		String[] reqStr = kv.Required.split("\\s+");
		
		int[] req = stringArrayToIntArray(reqStr);
		
		List<int[]> givenArrayList = new ArrayList<int[]>();
		
		for(int i=0; i<kv.Given.size(); i++)
		{
			givenArrayList.add(stringArrayToIntArray(kv.Given.get(i).split("\\s+")));
		}
		
		int arrIndex =0;
		ArrayList<String> strArrListPrev= new ArrayList<String>();
		ArrayList<String> strArrListNew= new ArrayList<String>();
		//ArrayList<String> strArrList= new ArrayList<String>();
		
		//array 1
		
		ArrayList<String> strArrList1= new ArrayList<String>();
		VerifyForOnecolumn(req[0],kv,givenArrayList,strArrList1,arrIndex);
		arrIndex++;
		
		if(strArrList1.size() >0)
		{
			ArrayList<String> strArrList2= new ArrayList<String>();
			VerifyForOnecolumn(req[1],kv,givenArrayList,strArrList2,arrIndex);
			arrIndex++;
			
			strArrList1.retainAll(strArrList2);
			if(strArrList1.size() >0)
			{
				ArrayList<String> strArrList3= new ArrayList<String>();
				VerifyForOnecolumn(req[2],kv,givenArrayList,strArrList3,arrIndex);
				
				strArrList1.retainAll(strArrList3);
				
				if(strArrList1.size() >0)
					retval = true;
				
			}
		}
		
		return retval;
	}
	
	static Boolean VerifyForOnecolumn(int s, KeyValue kv,List<int[]> givenArrayList,ArrayList<String> strArrList, int arrIndex)
	{
			Boolean retval = false;
			int[] givenFirsts= new int[kv.Count];
			for(int i=0; i<givenArrayList.size(); i++)
			{
				givenFirsts[i] = givenArrayList.get(i)[arrIndex];
			}
			
			arrIndex++;
			//come back to using this.
			
			//Boolean v = isSubsetSum(givenFirsts,kv.Count,s);
			
			//if(!v)
			{
				retval = false;
				//break;
			}
			//else
			{
				//System.out.println("y");
			}
			
			ArrayList<IntWithIndex> intList = new ArrayList<IntWithIndex>();
			for (int index = 0; index < givenFirsts.length; index++)
			{
				intList.add(new IntWithIndex(givenFirsts[index],index));
			}
			
			
			TrySum(intList,s,strArrList);
			
			return retval;
	}
	
	// Returns true if there is a subset of set[] with sun equal to given sum
	static Boolean isSubsetSum(int set[], int n, int sum)
	{
	   // Base Cases
	   if (sum == 0)
		 return true;
	   if (n == 0 && sum != 0)
		 return false;
	 
	   // If last element is greater than sum, then ignore it
	   if (set[n-1] > sum)
		 return isSubsetSum(set, n-1, sum);
	 
	   /* else, check if sum can be obtained by any of the following
		  (a) including the last element
		  (b) excluding the last element   */
	   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sum-set[n-1]);
	}
	
	public static List<String> readLines(String filename)  throws IOException 
	{
        FileReader fileReader = new FileReader(filename);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        List<String> lines = new ArrayList<String>();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            lines.add(line);
        }
        bufferedReader.close();
        return lines;//.toArray(new Integer[lines.size()]);
    }
	
	static int[] stringArrayToIntArray(String[] numberStrs)
	{
		int[] numbers = new int[numberStrs.length];
		for(int i = 0;i < numberStrs.length;i++)
		{
		   numbers[i] = Integer.parseInt(numberStrs[i]);
		}
		
		return numbers;
	}
	
	 private static class KeyValue
	 {
		public String Required ;
		public int Count;
		public List<String> Given;
		
		public KeyValue(String k, int c ,List<String> v)
		{
			Required = k;
			Count = c;
			Given = v;
		}
	 }
	 
	 private static class IntWithIndex
	 {
		public int Value;
		public int Index;
		
		public IntWithIndex(int v, int ind)
		{
			Value = v;
			Index = ind;
		}
	 }
	 
	 
	 static void TrySum(ArrayList<IntWithIndex> numbers, int target, ArrayList<String>indexedInteger  ) 
	{
        GetSum(numbers,target,new ArrayList<IntWithIndex>(), indexedInteger);
    }
	
	static void GetSum(ArrayList<IntWithIndex> fullSet, int target, ArrayList<IntWithIndex> partialSet, ArrayList<String>indexedInteger) 
	{
		Boolean retval = false;
       int sum = 0;
       for (IntWithIndex x: partialSet) 
	   {
			sum += x.Value;
	   }
       if (sum == target)
	   {
			//use a global variable here
			StringBuffer result = new StringBuffer();
			//StringBuffer result2 = new StringBuffer();
			for (int i = 0; i < partialSet.size(); i++) 
			{
				result.append( partialSet.get(i).Index );
				//result2.append( partialSet.get(i).Value );
			}
			String mynewstring = result.toString();
			indexedInteger.add(mynewstring);
			
			//System.out.println(mynewstring);
			
			//String mynewstring2 = result2.toString();
			//System.out.println(mynewstring2);
			
            //System.out.println("sum("+Arrays.toString(partialSet.toArray())+")="+target);
			retval = true;
			return ;
		}	
       
	   if (sum > target)
	   {
			retval = false;
            return ;
		}
			
       for(int i=0;i<fullSet.size();i++) 
	   {
             ArrayList<IntWithIndex> remaining = new ArrayList<IntWithIndex>();
             IntWithIndex n = fullSet.get(i);
			 
             for (int j=i+1; j<fullSet.size();j++) 
			 {
				remaining.add(fullSet.get(j));
			}
             ArrayList<IntWithIndex> partialRemaining = new ArrayList<IntWithIndex>(partialSet);
             partialRemaining.add(n);
             GetSum(remaining,target,partialRemaining,indexedInteger);
			 
       }
	   
	   //return retval;
    }
	
	static Boolean haveCommonString(ArrayList<String> a, ArrayList<String> b)
	{
		a.retainAll(b);
		
		if(a.size() > 0) return true;
		else return false;
	}
}

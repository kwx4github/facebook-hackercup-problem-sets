#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <string>
#include <stdio.h>
#include <locale>
#include <codecvt>
#include <sstream>

#pragma execution_character_set("utf-8")

using namespace std;





bool check_foods(std::vector< std::vector<int> > &foods, std::vector<int> &totval, std::vector<int> &target, int sn)
{
	bool ret = true;

	for (int i = 0; i < totval.size(); i++)   {
		if (target[i] != totval[i])
			ret = false;
		if (totval[i] > target[i])
			return false;
	}

	if (ret)
		return true;


	for (int nn = sn + 1; nn < foods.size(); nn++)
	{
		std::vector<int> newsum = totval;
		for (int i = 0; i < totval.size(); i++)
			newsum[i] = totval[i] + foods[nn][i];
		
		bool valid = check_foods(foods, newsum, target, nn);
		if (valid)
			return true;
	}
	return false;
}


void main(void)
{
	ifstream fin("new_years_resolution.txt");
	
	//ofstream fout();

	FILE* fp;
	fopen_s(&fp,"new_years_resolution_out.txt", "w");






	int N;
	fin >> N;


	for (int i = 0; i < N; i++)
	{
		std::vector<int> tar(3);
		fin >> tar[0] >> tar[1] >> tar[2];

		int Nfood;
		fin >> Nfood;

		std::vector< std::vector<int> > foodvals;
		for (int j = 0; j < Nfood; j++)
		{
			std::vector<int> tmp(3);
			fin >> tmp[0] >> tmp[1] >> tmp[2];
			foodvals.push_back(tmp);
		}


		bool possible = false;
		for (int sn = 0; sn < foodvals.size(); sn++)
		{
			std::vector<int> thisfood = foodvals[sn];

			possible = possible | check_foods(foodvals, thisfood, tar, sn);
			if (possible)
				break;
		}

		if (possible)  {
			std::cout << "Case #" << i + 1 << ": yes" << "\n";
			//fout << "Case #" << i + 1 << ": yes" << "\n";
			
			std::stringstream os;
			os << "Case #" << i + 1 << ": yes";
			string tmp;
			tmp=os.str();
			
			fwrite(&tmp[0], tmp.size(), 1, fp);
			char c = 0xA;
			fwrite(&c, 1, 1, fp);
		}
		else
		{
			std::cout << "Case #" << i + 1 << ": no" << "\n";
			//fout << "Case #" << i + 1 << ": no" << "\n";
			std::stringstream os;
			os << "Case #" << i + 1 << ": no";
			string tmp;
			tmp = os.str();
			fwrite(&tmp[0], tmp.size(), 1, fp);
			char c = 0xA;
			fwrite(&c, 1, 1, fp);
		}

	}
	fclose(fp);

	return;
}

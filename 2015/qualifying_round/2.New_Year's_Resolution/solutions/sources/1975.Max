#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <string>
#include <string.h>
#include <cstdio>
#include <cmath>
#include <stack>
#include <vector>
#include <cctype>
#include <set>

using namespace std;

#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back

set< pair<int, int> > myset[2005];

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int T;
    cin >> T;
    for (int t=0; t<T; t++)
    {
        set< pair<int, int> >::iterator it;
        for(int i=0; i<2005; i++)
            myset[i].clear();
        int p[22], c[22], f[22];
        int gp, gc, gf, n;
        bool go = false;
        cin >> gp >> gc >> gf;
        cin >> n;
        for (int i=0; i<n; i++)
        {
            cin >> p[i] >> c[i] >> f[i];
            if ((p[i]==gp) && (c[i]==gc) && (f[i]==gf))
                go = true;
            myset[p[i]].insert(mp(c[i], f[i]));
        }
        for (int i=0; i<=gp; i++)
        {
            if (go)
                break;
            if (!(myset[i].empty()))
            {
                for (it=myset[i].begin(); it!=myset[i].end(); it++)
                {
                    if (go)
                        break;
                    for (int j=0; j<n; j++)
                    {
                        if ((i+p[j]==gp) && ((*it).first+c[j]==gc) && ((*it).second+f[j]==gf))
                        {
                            go = true;
                            break;
                        }
                        else if ((i+p[j]<=gp) && ((*it).first+c[j]<=gc) && ((*it).second+f[j]<=gf))
                            myset[i+p[j]].insert(mp((*it).first+c[j], (*it).second+f[j]));
                    }
                }
            }
        }
        if (go)
            cout << "Case #" << t+1 << ": " << "yes" << endl;
        else
            cout << "Case #" << t+1 << ": " << "no" << endl;
    }


    return 0;
}



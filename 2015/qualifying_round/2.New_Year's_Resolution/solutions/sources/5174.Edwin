#include <stdio.h>
#include <string.h>
#include <iostream>
using namespace std;

int T, N;
int Gp, Gc, Gf;
int Rp, Rc, Rf;
bool r = false;

bool solve (int foods[][3], int i);

int main () {
	cin >> T;
	
	for (int i = 0; i < T; i++) {
		r = false;
		Rp = Rc = Rf = 0;
		
		scanf("%d %d %d", &Gp, &Gc, &Gf);
		scanf("%d", &N);
		
		int foods[N][3];
		for (int j = 0; j < N; j++) {
			// Store foods
			scanf("%d %d %d", &foods[j][0], &foods[j][1], &foods[j][2]);
		}
		
		// Check for each food
		for (int  j = 0; j < N; j++) {
			if (foods[j][0] == Gp && foods[j][1] == Gc && foods[j][2] == Gf) {
				r = true;
				break;
			}
		}
		
		solve(foods, 0);
		printf("Case #%d: ", i + 1);
		if (r) {
			printf("yes");
		} else {
			printf("no");
		}
		
		if (i != T - 1) {
			printf("\n");
		}
	}
	
	return 0;
}

bool solve (int foods[][3], int i) {
	//cout << Rp << "  " << Rc << "  " << Rf << endl;
	if (Rp == Gp && Rc == Gc && Rf == Gf) return true;
	if (Rp > Gp || Rc > Gc || Rf > Gf) {
		//cout << "OVER\n" << endl;
		return false;
	}
	if (i == N - 1) return false;
		
	for (int j = i; j < N; j++) {
		Rp += foods[j][0];
		Rc += foods[j][1];
		Rf += foods[j][2];
		
		r = solve(foods, i + 1);
		if (r) {
			return true;
		}
		
		Rp -= foods[j][0];
		Rc -= foods[j][1];
		Rf -= foods[j][2];
	}
	
	return false;
}

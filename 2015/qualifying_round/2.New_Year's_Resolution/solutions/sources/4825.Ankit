#include <iostream>
#include <vector>
#include <string>
#include <climits>
#include <algorithm>
#include <fstream>

using namespace std;

vector<vector<int> > subset;

bool findSubset(vector<vector<int> > elems, int GP, int GC, int GF, int n) {
    bool result1 = false, result2 = false;
    if(GP == 0 && GC == 0 && GF == 0)
        return true;
    if(n == -1 || GP <= 0 || GC <= 0 || GF <= 0 )
        return false;
    result1 = findSubset(elems, GP, GC, GF, n - 1);
    if(GP >= elems[n][0] && GC >= elems[n][1] && GF >= elems[n][2])
        result2 = findSubset(elems, GP - elems[n][0], GC - elems[n][1], GF - elems[n][2], n - 1);
    return result1 || result2;
}
int main()
{
    int t, GP, GC, GF, N, P, C, F, n, i = 1;
    vector<int> v1;
    vector<vector<int> > v2;
    ifstream infile("new_years_resolution.txt");
    ofstream outfile("output2.txt");
    infile >> t;
    while(t--) {
        v2.clear();
        infile >> GP >> GC >> GF;
        infile >> N;
        n = N;
        while(N--) {
            v1.clear();
            infile >> P >> C >> F;
            v1.push_back(P);
            v1.push_back(C);
            v1.push_back(F);
            v2.push_back(v1);
        }
        string result = (findSubset(v2, GP, GC, GF, n-1))? "yes" : "no";
        outfile << "Case #" << i++ << ": " << result << endl;
//        cout << result << endl;
    }
    return 0;
}

def eat(a,b):
	return [a[i]+b[i] for i in range(3)]
def possible(g,r):
	return g[0]>=r[0] and g[1]>=r[1] and g[2]>=r[2]
def solve():
	Goal =map(int,raw_input().split(' '))
	fcount=input()
	fruits=[]
	for i in range(fcount):
		fruits.append(map(int,raw_input().split(' ')))
	pSet=[[0,0,0]]
	if Goal==[0,0,0]: return "yes"
	for fruit in fruits:
		eSet=[]
		for val in pSet:
			r=eat(val,fruit)
			if r==Goal:
				return "yes"
			if possible(Goal,r):
				eSet.append(r)
		pSet.extend(eSet)
	return "no"

times=input()
for i in range(times):
	print "Case #"+str(i+1)+": "+solve()

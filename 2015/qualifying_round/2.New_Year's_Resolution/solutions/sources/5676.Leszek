#!/usr/bin/env python
desc="""

"""
epilog="""
11/01/2015 by lpryszcz
"""

import argparse, os, sys
from datetime import datetime
from itertools import combinations

def check_combinations(pcf, meals):
    """Return True if sum of combinations of meals sum to gP, gC and Gf"""
    # combinations
    for i in range(len(meals)):
        for combination in combinations(meals, i+1):
            # sum up the P, C and G for give combination of meals
            pcfSum = [sum(c[j] for c in combination) for j in range(len(combination[0]))]
            if pcfSum == pcf:
                print pcf, pcfSum, combination
                return True

def resolution(input, output):
    """ """
    t = int(input.readline())
    answers = []
    for i in range(t):
        pcfExp = map(int, input.readline().split())
        n = int(input.readline())
        # pfc
        meals = [map(int, input.readline().split()) for i in range(n)]
        #
        if check_combinations(pcfExp, meals):
            answers.append("yes")
        else:
            answers.append("no")
            
    #report
    for i, answer in enumerate(answers, 1):
        output.write("Case #%s: %s\n"%(i, answer))
            
def main():
    usage   = "%(prog)s -v" 
    parser  = argparse.ArgumentParser(description=desc, epilog=epilog, \
                                      formatter_class=argparse.RawTextHelpFormatter)
    
    parser.add_argument('--version', action='version', version='1.0b')   
    parser.add_argument("-v", "--verbose", default=False, action="store_true",
                        help="verbose")    
    parser.add_argument("-i", "--input",  default=sys.stdin, type=file, 
                        help="input stream    [stdout]")
    #parser.add_argument("-o", "--output", default=sys.stdout, type=argparse.FileType('w'), 
    #                    help="output stream   [stdout]")

    o = parser.parse_args()
    if o.verbose:
        sys.stderr.write("Options: %s\n"%str(o))

    #resolution(o.input, o.output)
    output = open(o.input.name+"_out.txt", "w")
    resolution(o.input, output)

if __name__=='__main__': 
    t0 = datetime.now()
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("\nCtrl-C pressed!      \n")
    except IOError as e:
        sys.stderr.write("I/O error({0}): {1}\n".format(e.errno, e.strerror))
    dt = datetime.now()-t0
    sys.stderr.write("#Time elapsed: %s\n"%dt)

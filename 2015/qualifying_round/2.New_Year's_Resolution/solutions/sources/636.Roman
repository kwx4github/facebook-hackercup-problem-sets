import java.io.*;
import java.util.StringTokenizer;

/**
 * Created by rubanenko on 1/10/15.
 */
public class Main implements Runnable {

    class Pair implements Comparable<Pair> {
        int x, y;
        public int compareTo(Pair rhs) {
            return x > rhs.x ? 1 : x == rhs.x ? 0 : -1;
        }
        public Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    void swap(StringBuilder s, int i, int j) {
        char tmp = s.charAt(i);
        s.setCharAt(i, s.charAt(j));
        s.setCharAt(j, tmp);
    }


    public void solve() throws IOException {
        int testCases = in.nextInt();
        int[] deg = new int[22];
        for (int i = 0; i < 22; i++) {
            deg[i] = 1 << i;
        }
        for (int test = 1; test <= testCases; test++) {
            int need1 = in.nextInt();
            int need2 = in.nextInt();
            int need3 = in.nextInt();
            int n = in.nextInt();
            int[][] a = new int[n][3];
            for (int i = 0; i < n; i++) {
                a[i][0] = in.nextInt();
                a[i][1] = in.nextInt();
                a[i][2] = in.nextInt();
            }
            boolean can = false;
            for (int mask = 0; mask < deg[n]; mask++) {
                int sum1 = 0, sum2 = 0, sum3 = 0;
                for (int i = 0; i < n; i++) {
                    if ((mask & deg[i]) > 0) {
                        sum1 += a[i][0];
                        sum2 += a[i][1];
                        sum3 += a[i][2];
                    }
                }
                if (sum1 == need1 && sum2 == need2 && sum3 == need3) {
                    can = true;
                    break;
                }
            }
            out.printf("Case #%d: ", test);
            out.println(can ? "yes" : "no");
        }
    }

    public static void main(String[] args) {
        //	long startTime = System.currentTimeMillis();
        new Main().run();
        //	long finishTime = System.currentTimeMillis();
        //	System.err.println(finishTime - startTime + "ms.");
    }

    public Scanner in;
    public PrintWriter out;

    @Override
    public void run() {
        try {
            in = new Scanner(new FileInputStream("input.txt"));
            out = new PrintWriter(new FileOutputStream("output.txt"));
            solve();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public static class Scanner {
        private BufferedReader reader;
        private StringTokenizer tokenizer;
        public boolean hasMoreTokens() throws IOException{
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String s = nextLine();
                if (s == null) return false;
                tokenizer = new StringTokenizer(s);
            }
            return true;
        }
        Scanner(InputStream inputStream) {
            reader = new BufferedReader(new InputStreamReader(inputStream));
        }

        public String nextLine() throws IOException {
            return reader.readLine();
        }

        public String nextToken() throws IOException {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
                tokenizer = new StringTokenizer(nextLine());
            return tokenizer.nextToken();
        }

        public int nextInt() throws NumberFormatException, IOException {
            return Integer.parseInt(nextToken());
        }
        public long nextLong() throws NumberFormatException, IOException {
            return Long.parseLong(nextToken());
        }


        public double nextDouble() throws NumberFormatException, IOException {
            return Double.parseDouble(nextToken());
        }

    }
}/*
    void swap(StringBuilder s, int i, int j) {
        char tmp = s.charAt(i);
        s.setCharAt(i, s.charAt(j));
        s.setCharAt(j, tmp);
    }

    // a[i] a[j]



    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int testCases = in.nextInt();
        for (int test = 1; test <= testCases; test++) {
            StringBuilder s = new StringBuilder(in.next());
            int min = Integer.parseInt(s.toString());
            int max = min;
            for (int i = 0; i < s.length(); i++) {
                for (int j = i + 1; j < s.length(); j++) {
                    swap(s, i, j);
                    if (s.charAt(0) == '0') {
                        swap(s, i, j);
                        continue;
                    }
                    int n = Integer.parseInt(s.toString());
                    if (n > max) {
                        max = n;
                    }
                    if (n < min) {
                        min = n;
                    }
                    swap(s, i, j);
                }
            }
            out.printf("Case #%d: %d %d\n", test, min, max);
        }


    }
*/

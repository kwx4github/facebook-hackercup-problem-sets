/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hc2015.qualification;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class NewYearsResolution {

    private static class GetAllSumSubset {

        private Stack<Integer> stack = new Stack<Integer>();
        private Stack<Integer> stack2 = new Stack<Integer>();
        private int sum = 0;
        private ArrayList<Integer[]> possibles = new ArrayList<Integer[]>();

        public void populate(int[] data, int a, int b, int target) {
            if (sum == target) {
                Integer[] ret = new Integer[stack2.size()];
                stack2.toArray(ret);
                possibles.add(ret);
            }
            for (int i = a; i < b; i++) {
                if (sum + data[i] <= target) {
                    stack.push(data[i]);
                    stack2.push(i);
                    sum += data[i];
                    populate(data, i + 1, b, target);
                    sum -= (Integer) stack.pop();
                    stack2.pop();
                }
            }
        }

        public ArrayList<Integer[]> getResult() {
            return possibles;
        }
    }

    public static void main(String[] args) throws FileNotFoundException, IOException {
        Scanner sc = new Scanner(new File("new_years_resolution.txt"));
        FileOutputStream fos = new FileOutputStream(new File("new_years_resolution_output.txt"));
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));
        int tests = Integer.parseInt(sc.nextLine());
        for (int i = 1; i <= tests; i++) {
            String[] data = sc.nextLine().split(" ");
            //g[0] - protein
            //g[1] - carbohydrates
            //g[2] - fat
            int[] G = new int[3];
            G[0] = Integer.parseInt(data[0]);
            G[1] = Integer.parseInt(data[1]);
            G[2] = Integer.parseInt(data[2]);
            int N = Integer.parseInt(sc.nextLine());
            int[] P = new int[N];
            int[] C = new int[N];
            int[] F = new int[N];
            for (int a = 1; a <= N; a++) {
                String[] data2 = sc.nextLine().split(" ");
                P[a - 1] = Integer.parseInt(data2[0]);
                C[a - 1] = Integer.parseInt(data2[1]);
                F[a - 1] = Integer.parseInt(data2[2]);
            }
            out.write("Case #" + i + ": " + process(G, P, C, F) + "\n");
        }
        out.close();
        System.out.println("DONE!");
    }

    private static String process(int[] G, int[] P, int[] C, int[] F) {
        ArrayList<Integer[]> possibilities;
        GetAllSumSubset get = new GetAllSumSubset();
        get.populate(P, 0, P.length, G[0]);
        possibilities = get.getResult();
        for (Integer[] indexs : possibilities) {
            if (can(indexs, G[1], C) && can(indexs, G[2], F))
                return "yes";
        }
        return "no";
    }

    private static boolean can(Integer[] indexs, int target, int[] test) {
        int sum = 0;
        for (Integer i : indexs) {
            sum += test[i];
        }
        return sum == target;
    }

}

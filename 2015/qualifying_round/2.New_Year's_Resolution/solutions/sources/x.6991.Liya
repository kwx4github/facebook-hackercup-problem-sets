INPUT_FILE = '../new_years_resolution.txt'
OUTPUT_FILE = '../new_years_resolution_out.txt'

#section_pos = [0,0,0,0]
section_pos = '0000'
current_case = 0
output = open(OUTPUT_FILE,'w')

def compute_calory(expect,foods):

  # scan each food first
  #possible_foods = []

  sum0,sum1,sum2 = 0,0,0

  for i,item in enumerate(foods):
    if item[0] == expect[0] and item[1] == expect[1] and item[2] == expect[2]:
      #print 'Food %d match:' % i
      return 1
    elif item[0] > expect[0] or item[1] > expect[1] or item[2] > expect[2]:  
      foods.pop(i)
      continue
    else:
      #possible_foods.append(item)  
      sum0 = sum0 + item[0]
      sum1 = sum1 + item[1]
      sum2 = sum2 + item[2]
      continue

  diff0 = sum0 - expect[0]
  diff1 = sum1 - expect[1]    
  diff2 = sum2 - expect[2]
  
  #print expect
  #print 'sum:%d, %d, %d' % (sum0,sum1,sum2)
  if diff0 < 0 or diff1 < 0 or diff2 < 0:
    #print 'total invalid'
    return 0
  elif (diff0,diff1,diff2) == (0,0,0):
    #print 'total match'
    return 1 
  elif (diff0 != 0 or diff1 != 0 or diff2 != 0) and diff0*diff1*diff2 == 0:
    return 0
      
  quantity = len(foods)

  
  # process all possibilities binary 
  
  for item in range(1,2 ** quantity-1): # each item is a possibility of combination
    food_option = []
    food_option = list(str(bin(item))[2:])

    food_total = [0,0,0]

    for i,food_item in enumerate(food_option):
      if food_item == '1':
        #print 'food_item', food_option, foods[i]
        food_total[0] = foods[i][0] + food_total[0]
        food_total[1] = foods[i][1] + food_total[1]
        food_total[2] = foods[i][2] + food_total[2]

        # in the process of computing calary sum, if one item exceeds expectation, exit  
        if food_total[0] > expect[0] or food_total[1] > expect[1] or food_total[2] > expect[2]:
          #print 'break here',food_total,expect,food_option
          food_total = [0,0,0]
          food_option = []
          break

    if not food_option:
      continue
    #print 'possibility',item, 'sum:',food_total
    if food_total[0] == expect[0] and food_total[1] == expect[1] and food_total[2] == expect[2]:
      #print 'yes!',food_total,expect
      #print 'Item combination match:', food_option, food_total,expect
      return 1
  #print 'no!',food_total,expect 
  return 0    


with open (INPUT_FILE,'r') as input:
  for i,line in enumerate(input):
    if i == 0:
      total_case = int(line.strip())

      if total_case > 20 or total_case < 1:
        print 'Case # incorrect!'
        break

      continue
    if current_case > total_case:
      break

    # identify section position

    #if section_pos.index(0) == 0:
    if section_pos == '0000':
      current_case = current_case + 1
      expected = []
      expected = [int(x) for x in line.strip().split()]

      #section_pos[0] = 1
      section_pos = '1000'
      continue

    #if section_pos.index(0) == 1:  
    if section_pos == '1000':
      food_qty = int(line.strip())
      all_food = []
      #section_pos[1] = 1
      section_pos = '1100'
      continue

    #if section_pos.index(0) == 2:
    if section_pos == '1100':
      if food_qty > 0:
        food_qty = food_qty - 1  
        food_item = []
        food_item = [int(x) for x in line.strip().split()]
        all_food.append(food_item)
          
        # reach the end of the section
        if food_qty == 0:
          #section_pos = [0,0,0,0]
          section_pos = '0000'
          # process all food items
          
          if compute_calory(expected,all_food):
            result_line = 'Case #' + str(current_case) + ': yes\n'
            print 'current_case:', current_case, 'yes!'
          else:
            result_line = 'Case #' + str(current_case) + ': no\n'
            print 'current_case:', current_case, 'no!'  
          output.write(result_line)

          # clean up food[], expected[]
          expected = []
          all_food = []

output.close()          

    



        
    
 



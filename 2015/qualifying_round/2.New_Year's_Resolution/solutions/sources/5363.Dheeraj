def nsum(arr, n, val):
    if len(arr) < n:
        return [] 
    # first sort the array by indice, so that we can search sequentially
    # with early stopping
    sorted_indice = sorted(xrange(len(arr)), key=lambda i: arr[i])
    size = len(arr)
    def nsum_recursive(arr, prev_indice, prev_sum, result):
        if len(prev_indice) == n:
            if prev_sum == val:
                result.append([sorted_indice[i] for i in prev_indice])
        else:
            current_count = len(prev_indice)
            # depth-first search
            for idx in range(0 if not prev_indice else prev_indice[-1]+1, size-(n-current_count-1)):
                current_sum = prev_sum + arr[sorted_indice[idx]]
                # early stopping (pruning of branches)
                if current_sum>val and idx+1<size and arr[sorted_indice[idx+1]]>=0:
                    break
                nsum_recursive(arr, prev_indice+[idx], current_sum, result)
    result = []
    nsum_recursive(arr, [], 0, result)
    return result

test=input()
for i in range(test):
    p=[];g=[]
    g=map(int,raw_input().split())
    no=input()
    p=[map(int,raw_input().split()) for j in range(no)]
    s=[];q=[];r=[]
    [s.append(j[0]) for j in p]
    [q.append(j[1]) for j in p]
    [r.append(j[2]) for j in p]
    temp=0
    for j in range(1,no+1):
        res=nsum(s,j,g[0])
        res1=nsum(q,j,g[1])
        res2=nsum(r,j,g[2])
        s3=[sorted(plk) for plk in res]
        s1=[sorted(plk) for plk in res1]
        s2=[sorted(plk) for plk in res2]
        for val in s3:
            if val in s1:
                if val in s2:
                    print 'Case #'+str(i+1)+': yes'
                    temp=1
                    break
        if temp==1:
            break
    if temp==0:
        print 'Case #'+str(i+1)+': no'
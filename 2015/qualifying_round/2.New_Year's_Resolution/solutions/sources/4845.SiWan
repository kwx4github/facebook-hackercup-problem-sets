package facebookHC;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

public class NewYearResolution {
	
	public static void main(String args[]) {
		// read input file
		BufferedReader br = null;
		 
		try {
 
			String sCurrentLine;
			String firstLine;
			int totalTestCases = 0;
			List<String> numbersToSwap = new ArrayList<String>();
 
			br = new BufferedReader(new FileReader("new_years_resolution.txt"));
			
			// read the first line and determine total numbers to swap
			if((firstLine = br.readLine()) != null) {
				totalTestCases = Integer.parseInt(firstLine);				
			}
			
			File file = new File("new_years_resolution_output.txt");
			 
			// if file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}
 
			// file writer
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			
			// make test cases from input file
			List<TestCase> testCases = new ArrayList<TestCase>();
			for(int i=0; i< totalTestCases; i++) {
				testCases.add(readTestCases(br));
			}
			
			List<Boolean> testResults = new ArrayList<Boolean>();
			// now figure out if test cases are either yes or no
			for(TestCase tc: testCases) {
				testResults.add(isAchievable(tc));
			}
			printSolution(testResults, bw);
			
 			
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (br != null)br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
										
	}
	
	private static TestCase readTestCases(BufferedReader br) {
		Set<Food> foods = new HashSet<Food>();		
		try {
			String macroLine = br.readLine();
			if(macroLine != null) {
				String[] macro = macroLine.split(" ");
				Macronutrients goodStuff = new Macronutrients(Integer.parseInt(macro[0]), 
						Integer.parseInt(macro[1]), Integer.parseInt(macro[2]));
				String foodNumberLine = br.readLine();
				int numberOfFood = Integer.parseInt(foodNumberLine);
				for(int i=0; i<numberOfFood; i++) {
					String foodNutrients = br.readLine();
					String[] nutrientFacts = foodNutrients.split(" ");
					Food food = new Food(Integer.parseInt(nutrientFacts[0]), 
							Integer.parseInt(nutrientFacts[1]), Integer.parseInt(nutrientFacts[2]));
					foods.add(food);					
				}
				return new TestCase(foods, goodStuff);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private static boolean isAchievable(TestCase tc) {
		return findRightFoodCombo(tc.getFoods(), tc.getMac());		
	}
	
	private static boolean findRightFoodCombo(Set<Food> foods, Macronutrients goal) {
		boolean result = false;
		Set foodSets = Sets.powerSet(foods);
		List<Set<Food>> powerFoods = new ArrayList<Set<Food>>();
		powerFoods.addAll(foodSets);
		powerFoods.remove(0);
		for(int i=0; i< powerFoods.size(); i++) {
			Macronutrients currentSums = new Macronutrients(0, 0, 0);
			for(Food f: powerFoods.get(i)) {
				currentSums.protein += f.getProtein();
				currentSums.carb += f.getCarb();
				currentSums.fat += f.getFat();
				if(goal.equals(currentSums)) {
					return true;
				}
			}
		}

		return result;
	}		

	private static void printSolution(List<Boolean> solution,BufferedWriter bw) {
		try {
			for(int i=0; i< solution.size(); i++) {
				String answer;
				if(solution.get(i) == true) {
					answer = "yes";
				} else {
					answer = "no";
				}
				bw.write(String.format("Case #%d: %s", i+1, answer));
				if(i+1 != solution.size()){
					bw.write(System.getProperty("line.separator"));
				}
			}
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

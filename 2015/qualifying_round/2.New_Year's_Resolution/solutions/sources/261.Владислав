#include <fstream>
#include <string>

using namespace std;

bool isPossible(int, int, int, int**, int);

int main()
{
    ifstream fin ("in.txt");
    ofstream fout ("out.txt");
    int t;
    fin >> t;
    for (int i = 0; i < t; i++)
    {
        int gp, gc, gf, n;
        fin >> gp >> gc >> gf >> n;
        int* arr[n];
        for (int j = 0; j < n; j++)
        {
            arr[j] = new int[3];
            fin >> arr[j][0] >> arr[j][1] >> arr[j][2];
        }
        fout << "Case #" << i + 1 << ": " << (isPossible(gp, gc, gf, arr, n) ? "yes" : "no") << endl;

        for (int j = 0; j < n; j++)
            delete [] arr[j];
    }


    return 0;
}

bool fits(int gp, int gc, int gf, int** arr, int n, bool* eat)
{
    int x = 0, y = 0, z = 0;
    for (int i = 0; i < n; i++)
        if (eat[i])
        {
            x += arr[i][0];
            y += arr[i][1];
            z += arr[i][2];
        }

    return (x == gp && y == gc && z == gf);
}

void nextState(bool* eat, int n)
{
    for (int i = n - 1; i >= 0; i--)
        if (eat[i])
            eat[i] =false;
        else
        {
            eat[i] = true;
            break;
        }
}

bool isTerminate(bool* eat, int n)
{
    for (int i = 0; i < n; i++)
        if (!eat[i])
            return false;
    return true;
}

bool isPossible(int gp, int gc, int gf, int** arr, int n)
{
    bool eat[n];
    for (int i = 0; i < n; i++)
        eat[i] = false;

    do {
        nextState(eat, n);
        if (fits(gp, gc, gf, arr, n, eat))
            return true;
    } while (!isTerminate(eat, n));

    return false;
}


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.math.BigInteger;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Scanner;

public class NewYearsResolution {

    private static final Path INPUT = Paths.get("C:\\Users\\Terje\\Downloads\\new_years_resolution_example_input.txt");
    private static final Path OUTPUT = Paths.get("C:\\Users\\Terje\\Downloads\\new_years_resolution_output.txt");

    private static class Food {

        public static Food valueOf(String value) {
            try (Scanner in = new Scanner(value)) {
                return new Food(in.nextInt(), in.nextInt(), in.nextInt());
            }
        }

        public static Food valueOf(List<Food> foods) {
            return foods.stream().reduce(new Food(), Food::new);
        }

        private final int protein;
        private final int carbohydrates;
        private final int fat;

        private Food() {
            this(0, 0, 0);
        }

        private Food(Food f1, Food f2) {
            this(f1.protein + f2.protein, f1.carbohydrates + f2.carbohydrates, f1.fat + f2.fat);
        }

        private Food(int protein, int carbohydrates, int fat) {
            this.protein = protein;
            this.carbohydrates = carbohydrates;
            this.fat = fat;
        }

        private boolean exceeds(Food other) {
            return protein > other.protein || carbohydrates > other.carbohydrates || fat > other.fat;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (obj instanceof Food) {
                Food other = (Food) obj;
                return protein == other.protein && carbohydrates == other.carbohydrates && fat == other.fat;
            } else {
                return false;
            }
        }

        @Override
        public int hashCode() {
            return Objects.hash(protein, carbohydrates, fat);
        }

        @Override
        public String toString() {
            return String.format("%d %d %d", protein, carbohydrates, fat);
        }

    }

    public static void main(String[] args) throws IOException {
        try (BufferedReader in = Files.newBufferedReader(INPUT, UTF_8); BufferedWriter out = Files.newBufferedWriter(OUTPUT, UTF_8)) {
            int nbTestCases = Integer.parseInt(in.readLine());
            for (int i = 1; i <= nbTestCases; i++) {
                Food goal = Food.valueOf(in.readLine());
                int nbFoods = Integer.parseInt(in.readLine());
                List<Food> allFoods = new ArrayList<>();
                for (int j = 0; j < nbFoods; j++) {
                    Food food = Food.valueOf(in.readLine());
                    if (!food.exceeds(goal)) {
                        allFoods.add(food);
                    }
                }

                boolean possible = false;
                for (int j = 0; j < BigInteger.valueOf(2).pow(allFoods.size()).intValueExact(); j++) {
                    String bits = new StringBuilder(Integer.toBinaryString(j)).reverse().toString();
                    List<Food> selectedFoods = new ArrayList<>();
                    for (int k = 0; k < allFoods.size(); k++) {
                        if (k < bits.length() && bits.charAt(k) == '1') {
                            selectedFoods.add(allFoods.get(k));
                        }
                    }
                    if (goal.equals(Food.valueOf(selectedFoods))) {
                        possible = true;
                        break;
                    }
                }
                System.out.format("Case#%d: %s%n", i, (possible) ? "yes" : "no");
            }
        }
    }

}

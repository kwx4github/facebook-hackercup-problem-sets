import java.util.*;
import java.io.*;

public class resolution {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("resolution.in"));
        PrintWriter pw = new PrintWriter(new FileWriter("resolution.out"));

        int T = Integer.parseInt(br.readLine());
        for (int caseNum = 1; caseNum <= T; caseNum++) {
            StringTokenizer tok = new StringTokenizer(br.readLine());
            int p = Integer.parseInt(tok.nextToken());
            int c = Integer.parseInt(tok.nextToken());
            int f = Integer.parseInt(tok.nextToken());

            int numFoods = Integer.parseInt(br.readLine());
            int fp[] = new int[numFoods];
            int fc[] = new int[numFoods];
            int ff[] = new int[numFoods];
            for (int i = 0; i < numFoods; i++) {
                tok = new StringTokenizer(br.readLine());
                fp[i] = Integer.parseInt(tok.nextToken());
                fc[i] = Integer.parseInt(tok.nextToken());
                ff[i] = Integer.parseInt(tok.nextToken());
            }

            boolean visited[] = new boolean[numFoods];
            boolean result = dfs(p, c, f, fp, fc, ff, visited);

            String answer = result ? "yes" : "no";
            pw.println("Case #" + caseNum + ": " + answer);
        }

        pw.flush();
    }

    private static boolean dfs(int p, int c, int f, int fp[], int fc[],
                               int ff[], boolean visited[]) {
        if (p < 0 || c < 0 || f < 0) {
            return false;
        }
        if (p == 0 && c == 0 && f == 0) {
            return true;
        }
        for (int i = 0; i < visited.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                if (dfs(p - fp[i], c - fc[i], f - ff[i], fp, fc, ff, visited)) {
                    return true;
                }
                visited[i] = false;
            }
        }
        return false;
    }
}

package cw.hack15.r1

import cw.puzzle.util.PuzzleIO

class B_NewYearResolution {
    final static def idxArr = [0,1,2]

    static main(def args){
        PuzzleIO io = new PuzzleIO()
        def answers = []

        def input = io.read()
        def T = input.remove(0).toInteger()
        T.times {
            def macros = input.remove(0).split().toList().collect { it.toInteger()}
            List<List<Integer>> foods = []

            int numFoods = input.remove(0).toInteger()
            numFoods.times {
                foods << input.remove(0).split().toList().collect { it.toInteger()}
            }
            def str = solve(macros, foods) ? "yes" : "no"
            println str
            answers += str
        }

        io.write(answers)
    }

    static boolean solve(List<Integer> marcos, ArrayList<List<Integer>> foods) {

        //prune foods that can't fit our remaining macros
        foods.removeAll { food->
            idxArr.any{ idx-> food[idx] > marcos[idx] }
        }

        //any foods left?
        if(foods.empty){
            return false
        }

        //any exact matches?
        def exactMatch = foods.find { food -> idxArr.every { food[it] == marcos[it] } }
        if(exactMatch){
            return true
        }

        //not an exact match with only 1 food left won't work
        if(foods.size() == 1){
            return false
        }

        //else recurse to eat smaller foods
        for(def i=0; i<foods.size() -1 ; i++){
            def food = foods[i]

            if(fitsMacros(marcos, food)){
                //try eating the food
                def remainingMacros = new ArrayList(marcos)
                idxArr.each { idx-> remainingMacros[idx] = remainingMacros[idx] - food[idx] }

                def remainingFoods = new ArrayList(foods[i+1 ..-1])
                def canEat = solve(remainingMacros, remainingFoods)
                if(canEat){
                    return true
                }
            }
        }
        return false
    }

    private static boolean fitsMacros(List<Integer> marcos, List<Integer> food) {
        return idxArr.every { food[it] < marcos[it] }
    }
}

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cctype>
#include <utility>
#include <functional>
#include <list>
#include <deque>
#include <stack>
#include <queue>
#include <complex>

using namespace std;

#define INF 0x3f3f3f3f
#define PI M_PI
#define mp make_pair

#define MAXN 24
#define MAXG 1024

typedef long long ll;
typedef unsigned long long ull;

const double inf = 1. / 0.;

int cmp_double(double a, double b, double eps = 1e-9) {
    return a + eps > b? b + eps > a ? 0 : 1 : -1;
}

struct Val {
    int p, c, f;

    Val(int p, int c, int f) : p(p), c(c), f(f) {}
    bool operator <(const Val& v) const {
        if (p != v.p) return p < v.p;
        if (c != v.c) return c < v.c;
        return f < v.f;
    }
};

int p[MAXG], c[MAXG], f[MAXG];
set<Val> pd;

int main () {
    int n;
    int gp, gc, gf;
    int cases;
    scanf("%d", &cases);

    for (int test = 1; test <= cases; ++test) {
        printf("Case #%d: ", test);
        scanf("%d %d %d", &gp, &gc, &gf);
        scanf("%d", &n);
        for (int i = 0; i < n; ++i) {
            scanf("%d %d %d", &p[i], &c[i], &f[i]);
        }
        pd.clear();
        pd.insert(Val(gp, gc, gf));

        for (int i = 0; i < n; ++i) {
            for (set<Val>::iterator it = pd.begin(); it != pd.end(); ++it) {
                int j = it->p,
                    k = it->c,
                    l = it->f;
                if (j - p[i] < 0 || k - c[i] < 0 || l - f[i] < 0) continue;
                pd.insert(Val(j-p[i], k-c[i], l-f[i]));
                if (j - p[i] == 0 && k - c[i] == 0 && l - f[i] == 0) goto X;
            }
        }

X:
        if (pd.find(Val(0, 0, 0)) != pd.end()) printf("yes\n");
        else printf("no\n");
    }

    return 0;
}

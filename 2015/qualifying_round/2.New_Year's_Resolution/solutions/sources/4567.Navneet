#include<bits/stdc++.h>
#define gcc getchar//_unlocked
#define pc putchar//_unlocked
#define sz(a) int((a).size())
#define pb push_back
#define pob pop_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define SWAP(x,y) x^=y^=x^=y
#define MOD 1000000009
using namespace std;
inline long long readInt(){
long long n = 0, c = gcc(), f = 1;
while(c != '-' && (c < '0' || c > '9')) c = gcc();
if(c == '-') f = -1, c = gcc();
while(c >= '0' && c <= '9')
n = (n<<3) + (n<<1) + c - '0', c = gcc();
return n * f;
}

inline void writeInt(long long a)
{
    char snum[20];
    int i=0;
    do  {
        snum[i++]=a%10+48;
        a=a/10;
    }while(a!=0);
    i=i-1;
    while(i>=0)
    pc(snum[i--]);
    pc('\n');
}

vector<int> p,f,c;
int gp,gc,gf;
bool subsetSum(int n , int sum , int *result , int index , int i){
	
	if( sum < 0)
		return false;
	if(index<=n && sum==0){
		int x1=0 , x2=0;
		for(int z=0;z<i;z++){
			x1 = f[result[z]] + x1;
			x2 = c[result[z]] + x2;
		}
		return (x1==gf && x2==gc);
	}
	if(index==n)
		return false;
	result[i] = index; 
	if(subsetSum(n,sum-p[index],result,index+1,i+1)){
		return true;
	} 
	return subsetSum(n,sum,result,index+1,i);
	
}


int main()
{
	#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    
    int t;
    t = readInt();
    for(int z = 1 ; z <=t;z++){
    	gp=readInt(),gc = readInt(),gf=readInt();
    	int n = readInt();
    	
    	for(int i=0;i<n;i++){
    		p.pb(readInt());
    		c.pb(readInt());
    		f.pb(readInt());
    	}
    	
    	int *result = (int*)calloc(20,sizeof(int));
    	
    	if(subsetSum(n,gp,result,0,0)){
    		printf("Case #%d: yes",z);
    	}else{
    		printf("Case #%d: no",z);
    	}
       	cout<<endl;
    	p.clear();
    	f.clear();
    	c.clear();
    }
    
	return 0;
}


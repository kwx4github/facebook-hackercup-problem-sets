/**
 * 
 */
package algorithm;

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

/**
 * @author qili
 * 
 */
public class NewYearResolution {
	Triple target;
	int N;
	Triple[] foods;

	public NewYearResolution(Triple target, int n, Triple[] allFoods) {
		this.target = target;
		// filter out the large food to save time
		N = 0;
		foods = new Triple[n];
		for (int i = 0; i < n; i++) {
			if (allFoods[i].largerThan(target))
				continue;
			foods[N++] = allFoods[i];// add in the in scope food
		}
	}

	public boolean run() {
		Set<Triple> all = new HashSet<Triple>();
		if (target.x == 0 && target.y == 0 && target.z == 0)
			return true;
		for (int i = 0; i < N; i++) {
			if (i == 0) {
				if (target.equals(foods[i]))
					return true;
				all.add(foods[i]);
			} else {
				if (target.equals(foods[i]))
					return true;
				Triple[] newFoods = new Triple[all.size()];
				int idx = 0;
				for (Triple f : all) {
					Triple t = f.add(foods[i]);
					if (target.equals(t))
						return true;
					if (t.largerThan(target))
						continue;
					else
						newFoods[idx++] = t; // we only add in the smaller
												// options
				}
				for (int idx2 = 0; idx2 < idx; idx2++)
					all.add(newFoods[idx2]);
				all.add(foods[i]);// Add the current one
			}
		}
		return false;
	}

	public static class Triple {
		int x, y, z;

		@Override
		public String toString() {
			return "Triple [x=" + x + ", y=" + y + ", z=" + z + "]";
		}

		public Triple(int x, int y, int z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}

		public Triple add(Triple other) {
			return new Triple(x + other.x, y + other.y, z + other.z);
		}

		@Override
		public int hashCode() {
			return x * 1000000 + y * 1000 + z;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj) {
				return true;
			}
			if (obj == null) {
				return false;
			}
			if (!(obj instanceof Triple)) {
				return false;
			}
			Triple other = (Triple) obj;
			return x == other.x && y == other.y && z == other.z;
		}

		public boolean largerThan(Triple other) {
			return x > other.x || y > other.y || z > other.z;
		}

		public static Triple parse(String input) {
			String[] ins = input.split(" ");
			return new Triple(Integer.parseInt(ins[0]), Integer.parseInt(ins[1]), Integer.parseInt(ins[2]));
		}
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int T = Integer.parseInt(s.nextLine());
		for (int i = 0; i < T; i++) {
			Triple target = Triple.parse(s.nextLine());
			int N = Integer.parseInt(s.nextLine());
			Triple[] foods = new Triple[N];
			for (int j = 0; j < N; j++)
				foods[j] = Triple.parse(s.nextLine());
			NewYearResolution resolution = new NewYearResolution(target, N, foods);
			System.out.println("Case #" + (i + 1) + ": " + (resolution.run() ? "yes" : "no"));
		}
	}
}

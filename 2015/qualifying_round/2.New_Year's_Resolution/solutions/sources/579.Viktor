#include <iostream>
#include <vector>
#include <iomanip>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <list>
#include <algorithm>
#include <stdlib.h>
#include <stdio.h>
#include <cstring>
#include <ctime>
#include <string>
#include <sstream>
#include <math.h>

using namespace std;

struct Tuple {
	int first, second, third;
	Tuple () : first(0), second(0), third(0) {}
	Tuple (int f, int s, int t) : first(f), second(s), third(t) {}

	Tuple& operator += (const Tuple& other) {
		first += other.first;
		second += other.second;
		third += other.third;
		return (*this);
	}

	bool operator == (const Tuple& other) const {
		return first == other.first && second == other.second && third == other.third;
	}
};

bool bit(int x, int id) {
	return x & (1 << id);
}

bool solve(const Tuple& required, const vector<Tuple>& items) {
	int n = items.size();
	Tuple current, zero;
	for (int mask = 0; mask < (1 << n); ++mask) {
		for (int i = 0; i < n; ++i) {
			if (bit(mask, i)) {
				current += items[i];
			}
		}
		if (current == required) {
			return true;
		}
		current = zero;
	}

	return false;
}

int main() {
	
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int T; cin >> T;
	for (int test = 1; test <= T; ++test) {

		Tuple required;
		cin >> required.first >> required.second >> required.third;		

		int n; 
		cin >> n;
		
		vector<Tuple> items(n);
		for (int i = 0; i < n; ++i) {
			cin >> items[i].first >> items[i].second >> items[i].third;
		}

		string answer;
		if (solve(required, items)) {
			answer = "yes";
		} else {
			answer = "no";
		}

		cout << "Case #" << test << ": " << answer << "\n";
		cerr << "Case #" << test << ": " << answer << "[" << 1. * clock() / CLOCKS_PER_SEC << "]\n";
	}
	
	return 0;
}
package com.misc.hackercup;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Stack;

public class NewYearResolution {

	static Stack<Integer> stack = new Stack<Integer>(); // To Store the sum of
														// current elements
	private static int sumInStack = 0;
	static int sumP = 0;
	static int sumC = 0;
	static int sumF = 0;
	static int i = 0;
	static int counter = 0;

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int cases = scn.nextInt();
		for (i = 0; i < cases; i++) {
			sumP = scn.nextInt(); // Protein
			sumC = scn.nextInt(); // Carbs
			sumF = scn.nextInt(); // Fats
			int foodItems = scn.nextInt();
			int[] dataP = new int[foodItems];
			int[] dataC = new int[foodItems];
			int[] dataF = new int[foodItems];
			ArrayList<Integer> listP = new ArrayList<Integer>();
			for (int j = 0; j < foodItems; j++) {
				dataP[j] = scn.nextInt();
				dataC[j] = scn.nextInt();
				dataF[j] = scn.nextInt();
				listP.add(dataP[j]);
			}
			counter = 0;
			Arrays.sort(dataP);
			populateSubset(dataP, 0, dataP.length, dataP, dataC, dataF, listP);
			if (counter == 0) {
				System.out.print("\nCase #" + (i + 1) + ":" + " " + "no");
			}

		}
		scn.close();
	}

	public static void populateSubset(int[] data, int fromIndex, int endIndex,
			int[] dataP, int[] dataC, int[] dataF, ArrayList<Integer> listP) {
		// if sum of elements in Stack equals sum then print
		if (sumInStack >= sumP) {
			if (sumInStack == sumP && counter == 0) {
				print(stack, dataP, dataC, dataF, listP);
			}
			return;
		}

		for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

			if (sumInStack + data[currentIndex] <= sumP) {
				stack.push(data[currentIndex]);
				sumInStack += data[currentIndex];
				// Recursively calling the method to populate the subset
				populateSubset(data, currentIndex + 1, endIndex, dataP, dataC,
						dataF, listP);
				sumInStack -= (Integer) stack.pop();
			}
		}
	}

	private static void print(Stack<Integer> stack, int[] dataP, int[] dataC,
			int[] dataF, ArrayList<Integer> listP) {
		ArrayList<Integer> al = new ArrayList<Integer>();
		int valueF = 0;
		int valueC = 0;
		for (Integer i : stack) {
			if (!al.contains(listP.indexOf(i))) {
				al.add(listP.indexOf(i));
			} else if (al.contains(listP.indexOf(i))) {
				al.add(listP.lastIndexOf(i));
			}
		}
		for (int j = 0; j < al.size(); j++)
			valueF = valueF + dataF[al.get(j)];
		if (valueF == sumF) {
			for (int j = 0; j < al.size(); j++)
				valueC = valueC + dataC[al.get(j)];
			if (valueC == sumC) {
				System.out.print("\nCase #" + (i + 1) + ":" + " " + "yes");
				counter = 1;
			}
		}
	}

}

#include <iostream>
#include<fstream>
using namespace std;

int main()
{
   //ifstream input("input.txt");
   int g[3],n,**a,i,j,*c, cs[3], level,t,v=1,flag;
   cin>>t;
   while(v<=t){
   		flag=0;
   		cout<<"Case #"<<v<<": ";
	   cin>>g[0];
	   cin>>g[1];
	   cin>>g[2];
	   cin>>n;
	   a=new int*[n];
	   for(i=0;i<n;i++)
	   {
	       a[i]=new int[3];
	   }
	   for(i=0;i<n;i++)
	   {
	       for(j=0;j<3;j++)
	       {
	           cin>>a[i][j];
	       }
	       if(a[i][0]==g[0]&&a[i][1]==g[1]&&a[i][2]==g[2])
	       {
	       	 flag=1;
	       }
	       else if(a[i][0]+10>g[0]||a[i][1]+10>g[1]||a[i][2]+10>g[2])
	       {
	               i--;
	               n--;
	       }
	   }
	   if(flag==1)
	   {
	   	cout<<"yes"<<endl;
	   	goto f;
	   }
	   //starting tree traversal of n levels 
	   // init all eles in c to 0
	   c=new int[n];
	   for(j=0;j<n;j++)
	   {
	       c[j]=0;
	   }
	   // set sums at current node cs to 0
	   cs[0]=0;
	   cs[1]=0;
	   cs[2]=0;
	   //set level =0
	   level=0;
	   while(1)
	   {
	       //solved?= solved (sum of attributes= balancet attributes)
	       if(cs[0]==g[0]&&cs[1]==g[1]&&cs[2]==g[2])
	       {
	           cout<<"yes"<<endl;
	           
	           break;
	       }
	       // bad node.? backtrack by finding a previous index which is 1(finding a node which is a left child)
	       else if((cs[0]+10>g[0]||cs[1]+10>g[1]||cs[2]+10>g[2])||level==n)
	       {
	       		
	           
	       		if((cs[0]+10<=g[0]&&cs[1]+10<=g[1]&&cs[2]+10<=g[2])&&level==n)
	       		level--;
	           while(c[level]!=1&&(level>=0))
	           {
	               level--;
	           }
	           if(level<0)
	           {
	               cout<<"no"<<endl;
	               break;
	           }
	           else{
	               c[level]=0;
	               cs[0]-=a[level][0];
	               cs[1]-=a[level][1];
	               cs[2]-=a[level][2];
	               level++;
	               
	           }
	           
	       }
	       //next step (got to left child and add attributes)
	       else if(level<=n-1){
	           
	           c[level]=1;
	           cs[0]+=a[level][0];
	           cs[1]+=a[level][1];
	           cs[2]+=a[level][2];
	           level++;
	       }
	       else{
	           cout<<"what condition is this?"<<endl;
	           cout<<"n,level, c, cs: "<<n<<","<<level<<",";
	           for(i=0;i<n;i++)
	            {
	               cout<<c[i];
	            }
	            cout<<","<<cs[0]<<" "<<cs[1]<<" "<<cs[2]<<endl;
	           break;
	       }
	   }
	   f:v++;
   }
   //input.close();
   
      return 0;
}

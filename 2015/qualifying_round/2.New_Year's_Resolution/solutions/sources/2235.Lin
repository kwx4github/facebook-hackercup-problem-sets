/**
 * Created by jian on 2015/1/4.
 */
object Solution {
  def main(args: Array[String]): Unit = {
    def solve = {
      val lines = io.Source.stdin.getLines()
      val T = lines.next.toInt
      for (i <- 1 to T) {
        val Array(gp, gc, gf) = lines.next.split(" ").map(_.toInt)
        val n = lines.next.toInt
        val foods = lines.take(n).toList.map(_.split(" ").map(_.toInt))

        def plan(foods: List[Array[Int]], n: Int, remain: (Int,Int,Int)): Boolean = {
          if(remain == (0, 0, 0)) return true
          if(n == 0) return false
          val Array(p,c,f) = foods.head
          if(p > remain._1 || c > remain._2 || f > remain._3)
            plan(foods.tail, n-1, remain)
          else
            plan(foods.tail, n-1, remain) || plan(foods.tail, n-1, (remain._1-p, remain._2-c, remain._3-f))
        }
        if(plan(foods, n, (gp, gc, gf)))
          println("Case #"+i+": yes")
        else
          println("Case #"+i+": no")
      }
    }
    solve
  }
}

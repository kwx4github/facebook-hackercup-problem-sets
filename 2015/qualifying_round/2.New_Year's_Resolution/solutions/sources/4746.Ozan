#include <iostream>
#include <stdio.h>
using namespace std;

struct Food
{
	int carbohydrate;
	int fat;
	int protein;
	Food()
	{
		carbohydrate = 0;
		fat = 0;
		protein = 0;
	}
	Food(int c, int f, int p)
	{
		carbohydrate = c;
		fat = f;
		protein = p;
	}
	bool operator ==(Food& rhs)
	{
		return this->carbohydrate == rhs.carbohydrate && this->protein == rhs.protein && this->fat == rhs.fat;
	}
	Food operator +(Food& rhs)
	{
		return Food(this->carbohydrate + rhs.carbohydrate, this->fat + rhs.fat, this->protein + rhs.protein);
	}
};


int T;
int N;
bool used[30];
Food foods[30];
Food goal;

bool dfs(int no)
{
	if (no == N)
	{
		Food total;
		for (int i = 0; i < N; i ++)
		{
			if (used[i])
			{
				total = total + foods[i];
			}
		}
		if (total == goal)
		{
			return true;
		}
		else return false;
	}

	used[no] = true;
	if (dfs(no + 1))
	{
		return true;
	}
	used[no] = false;
	if (dfs(no + 1))
	{
		return true;
	}
	return false;
}

bool search_all_possibilities()
{
	return dfs(0);
}

int main()
{
	FILE* in = fopen("input", "r");
	fscanf(in, " %d", &T);
	FILE* out = fopen("output", "w");
	for(int t = 0; t < T; t++)
	{
		fscanf(in, " %d %d %d", &goal.carbohydrate, &goal.fat, &goal.protein);
		fscanf(in, " %d", &N);
		for (int i = 0; i < N; i++)
		{
			fscanf(in, " %d %d %d",&foods[i].carbohydrate, &foods[i].fat, &foods[i].protein);
		}

		if (search_all_possibilities())
		{
			fprintf(out, "Case #%d: yes\n", t+1);
		}
		else
		{
			fprintf(out, "Case #%d: no\n", t+1);
		}

	}

	fclose(in);
	fclose(out);
	return 0;
}

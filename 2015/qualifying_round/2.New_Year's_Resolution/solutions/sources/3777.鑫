#include <iostream>
#include <algorithm>

using namespace std;

const int MAX_FOOD_NUM = 21;

struct Food{
	int p, c, f;
}food[MAX_FOOD_NUM + 1];

bool DFS(int Gp, int Gc, int Gf, int k, int n){
	if(Gp == 0 && Gc == 0 && Gf == 0)
		return true;

	if(Gp <= 0 || Gc <= 0 || Gf <= 0)
		return false;

	for(int i = k; i < n; ++i){

		if(Gp - food[i].p < 0) return false;

		if(DFS(Gp - food[i].p, Gc - food[i].c, Gf - food[i].f, i + 1, n)) return true;
	}

    return false;

}

int main(){
	freopen("new_years_resolution.txt", "r", stdin);
	freopen("out_new_years_resolution.txt", "w", stdout);
	int cases, Gp, Gc, Gf, n;
	cin >> cases;
	for(int c = 1; c <= cases; ++c){
		scanf("%d %d %d", &Gp, &Gc, &Gf);
		scanf("%d", &n);

		int sum_p, sum_c, sum_f;
		sum_p = sum_c = sum_f = 0;

		for(int j = 0; j < n; ++j){
			scanf("%d %d %d", &food[j].p, &food[j].c, &food[j].f);
			sum_f += food[j].f;
			sum_c += food[j].c;
			sum_p += food[j].p;
		}
		if(sum_f < Gf || sum_p < Gp || sum_c < Gc){
			cout << "Case #" << c << ": no" << endl;
			continue;
		}
		sort(food, food + n, [&](const Food &a, const Food &b){
			return a.p < b.p;
		});

		if(DFS(Gp, Gc, Gf, 0, n))
			cout << "Case #" << c << ": yes" << endl;
		else
			cout << "Case #" << c << ": no" << endl;

	}
	return 0;
}
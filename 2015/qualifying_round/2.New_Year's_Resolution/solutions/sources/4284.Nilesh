#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<utility> //pair
#include<map>
#include<climits>
#include<fstream>
#define ll long long
using namespace std;
typedef pair<int,int> intPair;
struct node{
	int p;int c;int f;
};
bool isPoss(node a[], int index, int size, node goal, node curr){
	if(index == size){
		if(curr.p == goal.p && curr.c==goal.c && curr.f == goal.f)
			return true;
		else
			return false;
	}

	if(curr.p == goal.p && curr.c==goal.c && curr.f == goal.f)
		return true;
	if(curr.p > goal.p || curr.c > goal.c || curr.f > goal.f)
		return false;
	bool isPoss1 = isPoss(a,index+1,size,goal,curr );
	if(isPoss1)
		return true;
	curr.p+=a[index].p;
	curr.c+=a[index].c;
	curr.f+=a[index].f;
	bool isPoss2 = isPoss(a,index+1,size,goal,curr);
	return isPoss2;
}
int main(){
	node goal;
	vector<string> output;
	int n;
	#ifdef fileC
		string s1;
		ifstream iFile("./input/nyr.txt");
		ofstream oFile("./output/nyr.txt");	
		iFile>>s1;
		n = atoi(&s1[0]);
	#else
		cin>>n;
	#endif
	int k = 1;
	int a,b,c;
	int t;
	node curr;
	while(k<=n){
		#ifdef fileC
			iFile>>goal.p>>goal.c>>goal.f;
			iFile>>t;
		#else
			cin>>goal.p>>goal.c>>goal.f;
			cin>>t;
		#endif
		node * a = new node[t];
		int i = 0;
		while(i<t){
			#ifdef fileC
				iFile>>a[i].p>>a[i].c>>a[i].f;
			#else
				cin>>a[i].p>>a[i].c>>a[i].f;
			#endif
			i++;
		}	
		curr.p = 0;
		curr.c = 0;
		curr.f = 0;
		if(isPoss(a,0,t,goal,curr))
			output.push_back("yes");
		else
			output.push_back("no");	
		delete [] a;
		k++;
	}
	for(int i = 0;i<output.size();i++){
		#ifdef fileC
			oFile<<"Case #"<<i+1<<": "<<output[i]<<endl;	
		#else
			cout<<"Case #"<<i+1<<": "<<output[i]<<endl;	
		#endif
	}
	return 0;
}

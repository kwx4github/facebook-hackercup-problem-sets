import java.util.*;
import java.io.*;

public class Diet
{
	static boolean rek(final int[][] v, final int i, final int p, final int c, final int f)
	{
		if(p+c+f==0) return true;
		if(i<0) return false;
//System.err.println(i + " pick " + Arrays.toString(v[i]));
		if(v[i][0]<=p && v[i][1]<=c && v[i][2]<=f && rek(v,i-1,p-v[i][0],c-v[i][1],f-v[i][2])) return true;
//System.err.println(i + " diss " + Arrays.toString(v[i]));
		return rek(v,i-1,p,c,f);
	}
	public static void main(String[] klein)
	{
		final Kattio in = new Kattio(System.in);
		final PrintWriter out = new PrintWriter(System.out);

		final int T = in.getInt();
		for(int t = 1; t<=T; t++)
		{
			final int p = in.getInt(), c = in.getInt(), f = in.getInt();
			final int N = in.getInt();
			final int[][] v = new int[N][];
			for(int i = 0; i<N; i++) v[i] = new int[]{in.getInt(),in.getInt(),in.getInt()};

			out.println("Case #"+t+": " + (rek(v,N-1,p,c,f) ? "yes" : "no")); //System.err.println(System.currentTimeMillis()-tid);
		}

		out.flush();
	}

	private static class Kattio
	{
		public Kattio(final InputStream i)
		{
			r = new BufferedReader(new InputStreamReader(i));
		}

		public boolean hasMoreTokens() {
			return peekToken() != null;
		}

		public int getInt() {
			return Integer.parseInt(nextToken());
		}

		public double getDouble() {
			return Double.parseDouble(nextToken());
		}

		public float getFloat()
		{
			return Float.parseFloat(nextToken());
		}

		public long getLong() {
			return Long.parseLong(nextToken());
		}

		public String getWord() {
			return nextToken();
		}



		private BufferedReader r;
		private String line;
		private StringTokenizer st;
		private String token;

		private String peekToken() {
		if (token == null)
			try {
			while (st == null || !st.hasMoreTokens()) {
				line = r.readLine();
				if (line == null) return null;
				st = new StringTokenizer(line);
			}
			token = st.nextToken();
			} catch (IOException e) { }
		return token;
		}

		private String nextToken() {
		String ans = peekToken();
		token = null;
		return ans;
		}
	}
}

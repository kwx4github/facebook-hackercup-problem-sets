#include <cstdio>

struct food { int P, C, F; } req;
food min = {30, 30, 30};
food dishes[1000];
int L;

food operator-(food from, food sub) {
    food res =  {from.P - sub.P, from.C - sub.C, from.F - sub.F};
    return res;
}

bool operator==(food A, food B) {
    return (A.P == B.P && A.C == B.C && A.F == B.F);
}

bool operator>(food A, food B) {
    return (A.P > B.P || A.C > B.C || A.F > B.F);
}

bool getRequired(food need, int pos = 0) {
    if(min > need) return false;
    for(food* dish = dishes+pos; dish < dishes+L; ++dish) {
        if(need == *dish)   return true;
        if(*dish > need)     continue;
        else                { if(getRequired(need - *dish, (dish - dishes) + 1)) return true; }
    }

    return false;
}

int main() {
    int N, T;
    scanf("%d", &T);
    for(int i = 1; i <= T; ++i) {
        scanf("%d %d %d", &req.P, &req.C, &req.F);
        scanf("%d", &N);
        L = N;
        while(N--)
            scanf("%d %d %d", &((dishes+N)->P), &((dishes+N)->C), &((dishes+N)->F));
        if(getRequired(req))    printf("Case #%d: yes\n", i);
        else                    printf("Case #%d: no\n", i);
    }

    return 0;
}

package cs5050_facebook_q2;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class Q2 {

	private Scanner fin = null;
	private PrintWriter fout = null;
	private ArrayList<Integer> possibleFoods = null;
	private int realP = 0;
	private int realC = 0;
	private int realF = 0;
	
	public static void main(String[] args)
	{
		Q2 mainAlgorithm = new Q2();
		
		mainAlgorithm.newYearResolution();
		mainAlgorithm.fin.close();
		mainAlgorithm.fout.close();
	}

	public Q2()
	{
		try 
		{
			fin = new Scanner(new FileReader("new_years_resolution.txt"));
			fout = new PrintWriter("q2_output.txt");
		} 
		catch (FileNotFoundException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		this.possibleFoods = new ArrayList<Integer>();
	}
	
	public void newYearResolution()
	{
		int numCount = Integer.parseInt(fin.nextLine());
		
		for(int n=0; n<numCount; n++)
		{
			int desiredP = fin.nextInt();
			int desiredC = fin.nextInt();
			int desiredF = fin.nextInt();
			int numFoods = fin.nextInt();
			ArrayList<Integer> listP = new ArrayList<Integer>();
			ArrayList<Integer> listC = new ArrayList<Integer>();
			ArrayList<Integer> listF = new ArrayList<Integer>();
			
			for(int i=0; i<numFoods; i++)
			{
				listP.add(fin.nextInt());
				listC.add(fin.nextInt());
				listF.add(fin.nextInt());
			}
			
			fout.print("Case #" + (n+1) + ": ");
			
			clearAll();
			if(sumUp(listP, desiredP))
			{
				for(int x : this.possibleFoods)
				{
					this.realC += listC.get(listP.indexOf(x));
					this.realF += listF.get(listP.indexOf(x));
				}
				
				if(this.realC == desiredC && this.realF == desiredF)
				{
					fout.print("yes\n");
					continue;
				}
				clearAll();
				
				if(sumUp(listC, desiredC))
				{
					for(int x : this.possibleFoods)
					{
						this.realP += listP.get(listC.indexOf(x));
						this.realF += listF.get(listC.indexOf(x));
					}
					
					if(this.realP == desiredP && this.realF == desiredF)
					{
						fout.print("yes\n");
						continue;
					}
					clearAll();
					
					if(sumUp(listF, desiredF))
					{
						for(int x : this.possibleFoods)
						{
							this.realP += listP.get(listF.indexOf(x));
							this.realC += listC.get(listF.indexOf(x));
						}
						
						if((this.realP == desiredP && this.realC == desiredC))
						{
							fout.print("yes\n");
							continue;
						}
					}
				}
			}
				
			fout.print("no\n");
		}
		
	}
	
	public void clearAll()
	{
		this.possibleFoods.clear();
		this.realP = 0;
		this.realC = 0;
		this.realF = 0;
	}
	
	public boolean sumUpRecursive(ArrayList<Integer> numbers, int target, ArrayList<Integer> partial) 
	{
       int s = 0;
       for (int x: partial) 
    	   s += x;
       
       if (s == target)
       {
    	   for(int x: partial)
    		   possibleFoods.add(x);
    	   
    	   return true;
       }
       
       if (s >= target || (numbers.size() == 0 && s < target))
    	   return false;
       
       for(int i=0; i<numbers.size(); i++) 
       {
	       ArrayList<Integer> remaining = new ArrayList<Integer>();
	       int n = numbers.get(i);
	         
	       for (int j=i+1; j<numbers.size();j++) 
	    	   remaining.add(numbers.get(j));
	         
	       ArrayList<Integer> partial_rec = new ArrayList<Integer>(partial);
	       partial_rec.add(n);
	       if(sumUpRecursive(remaining, target, partial_rec))
	    	   return true;
       }
       
       return false;
    }
	
    public boolean sumUp(ArrayList<Integer> numbers, int target) 
    {
        return sumUpRecursive(numbers, target, new ArrayList<Integer>());
    }
}

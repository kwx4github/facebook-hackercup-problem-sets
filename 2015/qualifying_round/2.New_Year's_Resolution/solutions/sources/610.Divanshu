/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
#endif
}

/* Input opener ends */

int GP, GC, GF;
int P[22], C[22], F[22];

vector<int> v[1<<20];

int main() {
    // input();

    F(i,0,(1<<20)) {
        F(j,0,20) {
            if ( (i&(1<<j)) ) {
                v[i].pb(j);
            }
        }
    }
    
    int t; cin >> t;
    int tst = 1;
    while (t-- ) {
        
        cin >> GP >> GC >> GF;
        int n; cin >> n;
        F(i,0,n) {
            cin >> P[i] >> C[i] >> F[i];
        }

        bool yes = 0;
        int mx = (1<<n);
        F(i,0,mx) {

            int SP = 0, SC = 0, SF = 0;
            F(j,0,v[i].size()) {
                int x = v[i][j];
                SP += P[x]; SC += C[x]; SF += F[x];
            }
            if ( SP == GP && SC == GC && SF == GF ) {
                yes = 1;
                break;
            }
        }

        cout << "Case #" << tst++ << ": ";
        if ( yes ) printf("yes\n");
        else printf("no\n");

    }
    return 0;
}


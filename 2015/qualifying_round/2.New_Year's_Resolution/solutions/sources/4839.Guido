#include <iostream>
#include <fstream>
#include <stack>

using namespace std ;

ifstream in ("new_years_resolution.txt");
ofstream out ("NewYearsResolution.txt");

struct totalnutrients
{
  int p,f,c;
};

struct meal
{
  int p, c, f, index;
  totalnutrients previousPCF;
};

bool diet (int n, meal goal, meal (*food))
{
    bool result = false;
    stack<meal> meals;
    meal m;
    meals.push(food[0]);

    while(!meals.empty()&&result == false)
    {
        m = meals.top();
        meals.pop();
        if( (m.previousPCF.c==goal.c && m.previousPCF.f == goal.f && m.previousPCF.p == goal.p) || (m.previousPCF.c+m.c == goal.c && m.previousPCF.f+m.f == goal.f && m.previousPCF.p+m.p == goal.p) )
        {
            result = true;
        }
        else if(m.index!=n-1)
        {
            meal next;
            int newindex = m.index+1;
            next = food[newindex];
            next.index = newindex;
            next.previousPCF = m.previousPCF;
            meals.push(next);//ignores the nutrients of M
            next.previousPCF.c += m.c;
            next.previousPCF.f += m.f;
            next.previousPCF.p += m.p;
            meals.push(next);//takes into account the values of M
        }

    }

    return result;
}
int main ()
{
    int T, N, casenum = 1;
    meal goal;

    in >> T ;

    for (int i = 0; i < T ; i++)
    {
        in >> goal.p >> goal.c >> goal.f ;
        in >> N;

        meal food[N];
        for (int j = 0; j < N ; j++)
        {
            in >> food[j].p >> food[j].c >> food[j].f;
            food[j].index = j;
            food[j].previousPCF.p = 0;
            food[j].previousPCF.c = 0;
            food[j].previousPCF.f = 0;
        }

        out << "Case #" << casenum++ << ": " << (diet(N, goal, food) == true ? "yes" : "no") << endl;

    }
    return 0;
}

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <complex>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <complex>
#include <stdio.h>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <stack>
#ifdef SAMMAX
#include <ctime>
clock_t beg;
#endif

const double pi = 3.1415926535897932384626433832795;
double EPS = 10e-9;
const int INF = 1000000000;

#pragma comment(linker, "/stack:1500000000")
#define sz size()
#define mp make_pair
#define pb push_back
#define ALL(a) (a).begin(), (a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define MEMS(a,b) memset(a,b,sizeof(a))
#define sqr(a) ((a)*(a))
#define HAS(a,b) ((a).find(b)!=(a).end())
#define MAX(a,b) ((a>=b)?a:b)
#define MIN(a,b) ((a<=b)?a:b)
#define ABS(a) ((a<0)?-(a):a)
#define FOR(i,a,b) for (int i=(a);i<(b);++i)
#define FORD(i,a,b) for (int i=(a);i>(b);--i)
#define VVI vector < vector <int> >
#define VI vector <int>
#define LL long long
#define U unsigned
#define pnt pair <int,int>
LL gcd(LL a, LL b){ if (a == 0) return b; return gcd(b%a, a); }
LL lcm(LL a, LL b){ return a / gcd(a, b) * b; }

using namespace std;

int need[3];
int n;
bool res;
vector<vector <int> > val;
void dp(int p, int sum[3]) {
    int cnt = 0;
    for (int i = 0; i < 3; ++i) {
        if (sum[i] == need[i]) {
            cnt++;
        }
    }
    if (cnt == 3) {
        res = true;
        return;
    }
    
    if (p >= n) {
        return;
    }
    
    
    dp(p + 1, sum);
    int sum2[3] = {sum[0], sum[1], sum[2]};
    for (int i = 0; i < 3; ++i) {
        sum2[i] += val[p][i];
    }
    dp(p + 1, sum2);
}



int main() {
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    int T;
    cin >> T;
    for (int p = 0; p < T; p++) {
        val.clear();
        res = false;
        
        cin >> need[0] >> need[1] >> need[2] >> n;
        val.resize(n);
        for(int i = 0; i < n; ++i) {
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                val[i].push_back(x);
            }
        }
        
        int sum[3] = {0, 0, 0};
        dp(0, sum);
        
        cout << "Case #" << p+1 << ": ";
        cout << (res ? "yes" : "no") << endl;
    }
    return 0;
}




























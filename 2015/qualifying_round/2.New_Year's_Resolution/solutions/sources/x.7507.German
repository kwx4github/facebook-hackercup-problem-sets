using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace NewYear
{
    class Program
    {
        public static IEnumerable<string> GetCalories(List<int> lstFood, int intCalories, string strMoreCalories)
        {
            for (int i = 0; i < lstFood.Count; i++)
            {
                int intCaloriesLeft = intCalories - lstFood[i];
                string intTotalCalories = lstFood[i] + " " + strMoreCalories;

                if (intCaloriesLeft == 0) yield return intTotalCalories;
                else
                {
                    List<int> lstPossibleCalories = lstFood.Take(i).Where(n => n <= intCalories).ToList();
                    if (lstPossibleCalories.Count > 0)
                    {
                        foreach (string item in GetCalories(lstPossibleCalories, intCaloriesLeft, intTotalCalories))
                        {
                            yield return item;
                        }
                    }
                }
            }
        }

        static void Main(string[] args)
        {
            //  Reading File
            //string[] strFile = File.ReadAllLines(@"C:\downloads\new_years_resolution_example_input.txt");
            string[] strFile = File.ReadAllLines(@"C:\downloads\new_years_resolution.txt");
            List<string> strLines = new List<string>();
            int intCases = 0;
            int intLines = 0;
            int[] intCaloriesToConsume;
            int[] intLineProcessed;
            List<int> intP = new List<int>();
            List<int> intC = new List<int>();
            List<int> intF = new List<int>();
            List<string> strResultFile = new List<string>();

            strLines = strFile.ToList();

            if (strLines.Count > 0)
            {
                intCases = int.Parse(strLines[0]);
                strLines.RemoveAt(0);
            }

            if (intCases <= 20 && intCases >= 1)
                for (int i = 0; i < intCases; i++)
                {
                    //  Calories to Consume
                    intCaloriesToConsume = Array.ConvertAll(strLines[0].Split(null), int.Parse);
                    strLines.RemoveAt(0);

                    bool booValidCalories = true;
                    
                    if (intCaloriesToConsume[0] < 10 || intCaloriesToConsume[0] > 1000) booValidCalories = false;
                    if (intCaloriesToConsume[1] < 10 || intCaloriesToConsume[1] > 1000) booValidCalories = false;
                    if (intCaloriesToConsume[2] < 10 || intCaloriesToConsume[2] > 1000) booValidCalories = false;

                    //  Lines to Process
                    intLines = int.Parse(strLines[0]);
                    strLines.RemoveAt(0);
                    //if (intLines < 1 || intLines > 20) booValidCalories = false; 

                    //  Clearing Lists
                    intP.Clear();
                    intC.Clear();
                    intF.Clear();

                    //  Filling Lists
                    for (int j = 0; j < intLines; j++)
                    {
                        intLineProcessed = Array.ConvertAll(strLines[0].Split(null), int.Parse);
                        intP.Add(intLineProcessed[0]);
                        intC.Add(intLineProcessed[1]);
                        intF.Add(intLineProcessed[2]);

                        if (intLineProcessed[0] < 10 || intLineProcessed[0] > 1000) booValidCalories = false;
                        if (intLineProcessed[1] < 10 || intLineProcessed[1] > 1000) booValidCalories = false;
                        if (intLineProcessed[2] < 10 || intLineProcessed[2] > 1000) booValidCalories = false;

                        strLines.RemoveAt(0);
                    }

                    //  Getting rid of Bigger Values
                    int h = 0;
                    bool booEncontrado = false;
                    while (h < intP.Count)
                    {
                        if (intP[h] > intCaloriesToConsume[0]) booEncontrado = true;
                        if (intC[h] > intCaloriesToConsume[1]) booEncontrado = true;
                        if (intF[h] > intCaloriesToConsume[2]) booEncontrado = true;

                        if (booEncontrado)
                        {
                            intP.RemoveAt(h);
                            intC.RemoveAt(h);
                            intF.RemoveAt(h);
                            booEncontrado = false;
                        }
                        else h++;
                    }

                    bool booPossibleP = false;
                    bool booPossibleC = false;
                    bool booPossibleF = false;
                    foreach (string item in GetCalories(intP, intCaloriesToConsume[0], ""))
                    {
                        booPossibleP = true;
                    }

                    foreach (string item in GetCalories(intC, intCaloriesToConsume[1], ""))
                    {
                        booPossibleC = true;
                    }

                    foreach (string item in GetCalories(intF, intCaloriesToConsume[2], ""))
                    {
                        booPossibleF = true;
                    }


                    strResultFile.Add("Case #" + (i + 1).ToString() + ": " + (booPossibleP && booPossibleC && booPossibleF && booValidCalories? "yes" : "no"));
                }

            string strPath = @"C:\downloads\new_years_resolution.txt";
            if (File.Exists(strPath)) File.Delete(strPath);
            File.WriteAllLines(strPath, strResultFile.ToArray());
        }
    }
}

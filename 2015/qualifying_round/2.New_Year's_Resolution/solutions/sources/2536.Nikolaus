//
//  main.c
//  NewYearsResolution
//
//  Created by Nikolaus Grogger on 10/01/15.
//  Copyright (c) 2015 Nikolaus Grogger. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define MAX_NUMBER_FOODS 20

void intToBinary(int n, int binary[], int bits);

int main(int argc, const char * argv[]) {
    
    // get handle to input file
    FILE *input_file;
    input_file = fopen("new_years_resolution.txt", "r");
    if (input_file == NULL) {
        printf("error reading input.\n");
        return -1;
    }
    
    // get handle to ouput file
    FILE *output_file;
    output_file = fopen("output.txt", "w");
    if (output_file == NULL) {
        printf("error opening output.\n");
        return -1;
    }
    
    char read[5];

    int caseNumber = 0;
    int numberOfCases = 0;
    
    int maxP = 0;
    int maxC = 0;
    int maxF = 0;
    
    int numberOfFoods = 0;
    
    int p[MAX_NUMBER_FOODS];
    int c[MAX_NUMBER_FOODS];
    int f[MAX_NUMBER_FOODS];
    
    int countP = 0;
    int countC = 0;
    int countF = 0;
    
    int possibleFlag = 0;
    
    int binary[MAX_NUMBER_FOODS];
    
    // read file line by line
    while (!feof(input_file)) {
        
        // one line is read into variable read
        int n = fscanf(input_file, "%s", read);
        // handle empty line at end of file
        if (n == EOF) break;

        // read number of cases
        if (caseNumber == 0) {
            numberOfCases = atoi(read);
        }
        else {
            
            printf("Case #%d: ", caseNumber);
            fprintf(output_file, "Case #%d: ", caseNumber);
            
            // read p, c, f
            maxP = atoi(read);
            fscanf(input_file, "%s", read);
            maxC = atoi(read);
            fscanf(input_file, "%s", read);
            maxF = atoi(read);
            
            //printf("\nmax: %d-%d-%d\n", maxP, maxC, maxF);
            
            // read number of foods
            fscanf(input_file, "%s", read);
            numberOfFoods = atoi(read);
            //printf("number of foods: %d\n", numberOfFoods);
            
            // read numberOfFood lines (numberOfFood * 3 values) into p, c, f arrays
            for (int i = 0; i < numberOfFoods; i++) {
                for (int j = 0; j < 3; j++) {
                    fscanf(input_file, "%s", read);
                    switch (j) {
                        case 0:
                            p[i] = atoi(read);
                            break;
                        case 1:
                            c[i] = atoi(read);
                            break;
                        case 2:
                            f[i] = atoi(read);
                            break;
                        default:
                            printf("an unexpected error occurred");
                            break;
                    }
                }
            }
            
            // check if there is a possibility for p, c, f
            for (int i = 1; i <= (pow(2, numberOfFoods) - 1); i++) {
                // reset vars
                countP = 0;
                countC = 0;
                countF = 0;
                possibleFlag = 0;
                
                // convert number to binary for all possible combinations of foods
                intToBinary(i, binary, numberOfFoods);
                
                // add up p, c, f values
                for (int j = 0; j < numberOfFoods; j++) {
                    if (binary[j] == 1) {
                        countP += p[j];
                        countC += c[j];
                        countF += f[j];
                        // if p, c, f exceeds the maximum, go to next combination
                        if (countP > maxP) break;
                        if (countC > maxC) break;
                        if (countF > maxF) break;
                    }
                }
                if (countP == maxP && countC == maxC && countF == maxF) {
                    possibleFlag = 1;
                    break;
                }
            }
            
            if (possibleFlag) {
                printf("yes\n");
                fprintf(output_file, "yes\n");
            }
            else {
                printf("no\n");
                fprintf(output_file, "no\n");
            }
            
        }
        caseNumber++;
    }
    
    // check if correct number of cases were processed
    caseNumber--;
    if (numberOfCases != caseNumber) {
        printf("\nshould: %d, is: %d\n", numberOfCases, caseNumber);
    }
    
    // close files and return
    fclose(input_file);
    fclose(output_file);
    return 0;
}

void intToBinary(int n, int binary[], int bits) {
    
    int i = 0;
    int k = 0;
    
    int work[bits];
    
    // convert to binary, destination: work, reverse order
    while (n > 0) {
        if (n & 1) work[i] = 1;
        else work[i] = 0;
        
        n >>= 1;
        i++;
    }
    
    // insert zeros if binary number doesnt need the right amount of bits
    if (i < bits) {
        while (k < (bits - i)) {
            binary[k] = 0;
            k++;
        }
    }
    
    // reverse work into binary
    for (int j = i - 1; j >= 0; j--) {
        binary[k] = work[j];
        k++;
    }
}

#include <bits/stdc++.h>
using namespace std;
int node = 0;
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // Pointer to an array containing adjacency lists
    int DFSUtil(int v, bool visited[]);  // A function used by DFS
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void DFS();    // DFS traversal of the vertices reachable from v
};

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v’s list.
}

int Graph::DFSUtil(int v, bool visited[])
{
    // Mark the current node as visited and print it
    visited[v] = true;
        node++ ;

    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for(i = adj[v].begin(); i != adj[v].end(); ++i)
        if(!visited[*i])
            DFSUtil(*i, visited);

    return node;
}

// DFS traversal of the vertices reachable from v. It uses recursive DFSUtil()
void Graph::DFS()
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    for(int i = 0; i < V; i++)
        visited[i] = false;
    // Call the recursive helper function to print DFS traversal
    for(int i= 1 ; i < V ; i++)
      {
          int node = DFSUtil(i, visited);
          cout<<node<<" ";
          node = 0 ;
      }
}
int main()
{
int t,n,m,i,j;
 freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
cin>>t;
while(t--)
{
cin>>n>>m;
Graph g(n);
while(m--)
{
    cin>>i>>j;
    g.addEdge(i,j);
    g.addEdge(j,i);
}
g.DFS();
}
return 0;
}

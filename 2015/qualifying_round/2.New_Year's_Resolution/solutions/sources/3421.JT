#include <cstdio>
#include <iostream>
#include <map>
using namespace std;

const int N = 20, M = 1000;
struct diet {
	short p, c, f;
	diet(short P=0, short C=0, short F=0) : p(P), c(C), f(F) {}
	bool operator<(const diet & rhs) const {
		if (p < rhs.p) return true;
		if (p > rhs.p) return false;
		if (c < rhs.c) return true;
		if (c > rhs.c) return false;
		return (f < rhs.f);
	}
};

int main(){
	int run, cnt, prev, cur; diet goal, meal[N], tmp;
	map<diet, bool> poss[2]; map<diet, bool>::iterator it;
	FILE * fin, * fout;
	freopen_s(&fin, "resolution.test", "r", stdin);
	freopen_s(&fout, "resolution.out", "w", stdout);
	cin >> run;
	for (int a = 1; a <= run; ++a){
		cin >> goal.p >> goal.c >> goal.f >> cnt;
		for (int x = 0; x < cnt; ++x)
			cin >> meal[x].p >> meal[x].c >> meal[x].f;
		poss[0].clear();
		poss[0][diet(0, 0, 0)] = true;
		for (int choose = 1; choose <= cnt; ++choose){
			cur = choose % 2; prev = 1 - cur;
			poss[cur].clear();
			for (it = poss[prev].begin(); it != poss[prev].end(); ++it){
				for (int x = 0; x < cnt; ++x){
					tmp = diet(it->first.p+meal[x].p, it->first.c+meal[x].c, it->first.f+meal[x].f);
					if (tmp.p > M || tmp.c > M || tmp.f > M) continue;
					poss[cur][tmp] = true;
				}
			}
			if (poss[cur][goal]) break;
		}
		cout << "Case #" << a << ": " << (poss[cur][goal] ? "yes" : "no") << endl;
	}
	return 0;
}

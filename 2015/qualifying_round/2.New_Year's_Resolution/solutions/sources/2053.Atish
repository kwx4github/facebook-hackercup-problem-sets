package fb_r1_q1;

import java.util.ArrayList;
import java.util.Scanner;

public class fb_r1_q2 {

	static int[] array = new int[(int) Math.pow(2, 21)];

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		array[0] = 0;
		boolean foundArray[] = new boolean[20];
		int foundCount = 0;
		Scanner s = new Scanner(System.in);
		int t = s.nextInt();
		for (int i = 0; i < t; i++) {
			int gp = s.nextInt();
			int gc = s.nextInt();
			int gf = s.nextInt();
			int n = s.nextInt();
			int[] p = new int[n];
			int[] c = new int[n];
			int[] f = new int[n];
			int len = (int) Math.pow(2, n + 1);
			int parentIndex = (int) Math.pow(2, n);
			for (int j = 0; j < n; j++) {
				p[j] = s.nextInt();
				c[j] = s.nextInt();
				f[j] = s.nextInt();
			}
			populate(p, 0, 1);
			ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
			for (int j = parentIndex; j < len; j++) {
				if (array[j] == gp) {
					ArrayList<Integer> temp = new ArrayList<Integer>();
					int l = j, count = n - 1;
					do {
						if (l % 2 == 0) {
							temp.add(count);
						}
						l /= 2;
						count--;
					} while (l != 0 && count >= 0);
					list.add(temp);
				}
			}
			boolean found = false;
			for (ArrayList<Integer> tempList : list) {
				int sum2 = 0, sum3 = 0;
				for (Integer in : tempList) {
					sum2 += c[in];
					sum3 += f[in];
				}
				if (sum2 == gc && sum3 == gf) {
					found = true;
					break;
				}
			}
			foundArray[foundCount++] = found;
		}
		for (int i = 0; i < t; i++) {
			if (foundArray[i]) {
				System.out.printf("Case #%d: yes\n", i + 1);
			} else {
				System.out.printf("Case #%d: no\n", i + 1);
			}
		}
	}

	static void populate(int[] p, int start, int a) {
		if (start == p.length) {
			return;
		}
		array[a] = 0;
		lchild(p, start, a * 2);
		rchild(p, start, a * 2 + 1);
	}

	static void lchild(int[] p, int start, int a) {
		if (start == p.length) {
			return;
		}
		array[a] = p[start] + array[a / 2];
		lchild(p, start + 1, a * 2);
		rchild(p, start + 1, a * 2 + 1);
	}

	static void rchild(int[] p, int start, int a) {
		if (start == p.length) {
			return;
		}
		array[a] = array[a / 2];
		lchild(p, start + 1, a * 2);
		rchild(p, start + 1, a * 2 + 1);
	}

}

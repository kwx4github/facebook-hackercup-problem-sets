def solve(target, foods)
  
  return "yes" if foods.include?(target)
  return "no" if foods.size == 1
  
  main_index = target.index(target.min)
  target_w = target[main_index]
  w = Array.new(target_w + 1)
  
  foods.delete_if{|f| !not_exceed(f, target)}
  return "no" if foods.size == 1
  foods.sort!
  
  foods.size.times{|i|
    f=foods[i]
    q=f[main_index]
    w[q] ||= []
    w[q] << [f, [i]]
  }
  
  (foods[0][main_index] + foods[1][main_index]).upto(target_w){|x|
    foods.size.times{|i|
      f=foods[i]
      px = x-f[main_index]
      next if px<0 || !w[px]
      w[px].each{|g|
        if g[1][-1] < i
          nw=add(g[0], f)
          next unless not_exceed(nw, target)
          ng=[nw, g[1].clone]
          ng[1]<<i
          w[x] ||= []
          w[x] << ng
        end
      }
    }
  }

  if w[target_w]
    w[target_w].each{|g|
      return "yes" if g[0]==target
    }
  end 
  return "no"
  
end

def add(f1, f2)
  [f1[0] + f2[0], f1[1] + f2[1], f1[2] + f2[2]]
end

def not_exceed(f1, f2)
  f1[0]<=f2[0] && f1[1] <= f2[1] && f1[2] <= f2[2]
end


gets.to_i.times{|t|
  target = gets.split.map{|e|e.to_i}
  f=[]
  gets.to_i.times{
    f<<gets.split.map{|e|e.to_i}
  }
  puts "Case ##{t+1}: #{solve(target, f)}"
}


program q_2;
type r=record
      p: longint;
      c: longint;
      f: longint;
     end;
const e: r=(p:0; c:0; f:0);
var t, tout: text;
    i, x, n, i2: longint;
    target: r;
    food: array [1..20] of r;
    flag: boolean;
procedure try(k: longint; val: r);
 begin
  if flag then exit();
  if k<>n then
   try(k+1, val);
  val.p:=val.p+food[k].p;
  val.c:=val.c+food[k].c;
  val.f:=val.f+food[k].f;
  if k=n then begin
   if (val.p=target.p) and (val.f=target.f) and (val.c=target.c) then flag:=true
  end else
   try(k+1, val);
 end;
begin
 assign(t, 'q_2.inp');
 reset(t);
 assign(tout, 'q_2.out');
 rewrite(tout);
 readln(t, x);
 for i:=1 to x do begin
  fillchar(food, sizeof(food), 0);
  with target do
   readln(t, p, c, f);
  readln(t, n);
  for i2:=1 to n do
   with food[i2] do
    readln(t, p, c, f);
  flag:=false;
  try(1, e);
  if flag then
   writeln(tout, 'Case #', i, ': yes')
  else
   writeln(tout, 'Case #', i, ': no');
 end;
 close(t);
 close(tout);
end.
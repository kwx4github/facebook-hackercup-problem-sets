import java.io.*;
import java.util.*;
import java.math.*;


public class Main {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	
	
	static void solve() throws Exception {
		int t = nextInt();
		for (int tt = 1; tt <= t; ++tt) {
			int p = nextInt();
			int c = nextInt();
			int f = nextInt();
			int n = nextInt();
			Food[] a = new Food[n];
			for (int i = 0; i < n; ++i) {
				a[i] = new Food(nextInt(), nextInt(), nextInt());
			}
			boolean res = false;
			for (int mask = 0; mask < (1 << n); ++mask) {
				int sumP = 0;
				int sumC = 0;
				int sumF = 0;
				for (int i = 0; i < n; ++i) {
					if ((mask & (1 << i)) != 0) {
						sumP += a[i].p;
						sumC += a[i].c;
						sumF += a[i].f;
					}
				}
				if (sumP == p && sumC == c && sumF == f) {
					res = true;
					break;
				}
			}
			out.println("Case #" + tt + ": " + (res ? "yes" : "no"));
		}
	}
	
	static class Food {
		int p, c, f;
		
		Food(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}
	}
	
	static long sqr(int x) {
		return (long)x * x;
	}
	
	static int gcd(int a, int b) {
		if (b == 0) {
			return a;
		}
		return gcd(b, a % b);
	}
	
	static long lcm(int a, int b) {
		return (long)a / gcd(a, b) * b;
	}
	
	static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	static long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	static double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	static BigInteger nextBigInteger() throws IOException {
		return new BigInteger(next());
	}
	
	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}
	
	static String nextLine() throws IOException {
		tok = new StringTokenizer("");
		return in.readLine();
	}

	static boolean hasNext() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			String s = in.readLine();
			if (s == null) {
				return false;
			}
			tok = new StringTokenizer(s);
		}
		return true;
	}

	public static void main(String args[]) {
		try {
			//in = new BufferedReader(new InputStreamReader(System.in));
			//out = new PrintWriter(new OutputStreamWriter(System.out));
			in = new BufferedReader(new FileReader("input.in"));
			out = new PrintWriter(new FileWriter("output.out"));
			solve();
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			java.lang.System.exit(1);
		}
	}
}
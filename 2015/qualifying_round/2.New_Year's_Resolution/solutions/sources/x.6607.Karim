

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

public class new_year_resolution {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(new File("new_years_resolution.txt")));
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("new_years_resolution_output.txt")));
		int tests = Integer.valueOf(br.readLine());
		for(int i=1; i<=tests; i++)
		{
			String temp_string = br.readLine();
			int protein = Integer.valueOf(temp_string.split(" ")[0]), carbs = Integer.valueOf(temp_string.split(" ")[1]),
					fat = Integer.valueOf(temp_string.split(" ")[2]);
			
			int foods = Integer.valueOf(br.readLine());
			ArrayList<Integer> prot_list = new ArrayList<Integer>();
			ArrayList<Integer> carb_list =new ArrayList<Integer>();
			ArrayList<Integer> fat_list = new ArrayList<Integer>();
			
			for(int j=0; j<foods; j++)
			{
				temp_string = br.readLine();
				prot_list.add(Integer.valueOf(temp_string.split(" ")[0]));
				carb_list.add(Integer.valueOf(temp_string.split(" ")[1]));
				fat_list.add(Integer.valueOf(temp_string.split(" ")[2]));	
			}
			boolean eatable = false;
			for(int j=0; j<prot_list.size();j++)
			{
				int rem_prot = prot_list.get(j),rem_carbs = carb_list.get(j), rem_fat = fat_list.get(j);
				
				if(rem_prot == protein && rem_carbs == carbs && rem_fat==fat)
				{
						eatable = true;
						break;
				}
				else if(rem_prot > protein || rem_carbs > carbs || rem_fat > fat)
				{
					continue;
					
				}
				for(int k = j+1; k < prot_list.size() ;k++)
				{
					
					eatable = rec(prot_list,carb_list,fat_list,protein,carbs,fat,rem_prot,rem_carbs,rem_fat,k,1);
					
					
					if(eatable)
						break;
						
				}//*/
				if(eatable)
					break;
			}
			bw.write("Case #"+i+": "+((eatable)?"yes":"no")+"\n");
		}
		br.close();
		bw.flush();
		bw.close();
	}
	public static boolean rec(ArrayList<Integer> prot_list,ArrayList<Integer> carb_list,ArrayList<Integer> fat_list,int protein,int carbs, int fat, int rem_prot,
			int rem_carbs,int rem_fat,int index,int depth)
	{
		boolean returnValue = false;
		if(index == prot_list.size()) 
		{
			if(rem_prot == protein && rem_carbs == carbs && rem_fat==fat) 
				return true;
			else
			{
	
				return false;
			}
		}
		
		rem_prot += prot_list.get(index);
		rem_carbs += carb_list.get(index);
		rem_fat += fat_list.get(index);
		if(rem_prot == protein && rem_carbs == carbs && rem_fat==fat) returnValue=true; 
		else if(rem_prot >= protein || rem_carbs >= carbs || rem_fat >= fat){
			rem_prot -= prot_list.get(index);
			rem_carbs -= carb_list.get(index);
			rem_fat -= fat_list.get(index);
	
			returnValue= rec(prot_list,carb_list,fat_list,protein,carbs,fat,rem_prot,rem_carbs, rem_fat,index+1,depth);
			
		}
		else if(rem_prot < protein && rem_carbs < carbs && rem_fat < fat) returnValue= rec(prot_list,carb_list,fat_list,protein,carbs,fat,rem_prot,rem_carbs, rem_fat,index+1,depth+1);
		
		return returnValue;
				
				
	}
}

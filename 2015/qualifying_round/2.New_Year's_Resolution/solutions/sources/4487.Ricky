#include <cstdio>
#include <algorithm>
#include <queue>
using namespace std;

struct F {
	F() {
		p = c = f = 2000000000;
	}
	int p, c, f;
};

struct B {
	int index, pro, car, fat;
};

bool conf(F left, F right) {
	if (left.p != right.p)
		return left.p < right.p;
	else if (left.c != right.c)
		return left.c < right.c;
	return left.f < right.f;
}

int main() {
	int t;
	
	freopen("out2.txt", "w", stdout);
	freopen("in2.txt", "r", stdin);
	scanf("%d", &t);
	for (int tc = 1; tc <= t; tc++) {
		int n, p, c, f;
		F food[25];
		queue<B> bfs;
		B temp, temp2;
		bool is_exact;
		
		printf("Case #%d: ", tc);
		scanf("%d %d %d", &p, &c, &f);
		scanf("%d", &n);
		for (int i = 0; i <= n - 1; i++)
			scanf("%d %d %d", &food[i].p, &food[i].c, &food[i].f);
		sort(food, food + n, conf);
		is_exact = false;
		temp.index = temp.pro = temp.car = temp.fat = 0;
		bfs.push(temp);
		while (! bfs.empty()) {
			temp = bfs.front();
			temp2 = temp;
			bfs.pop();
			if ((temp2.pro == p) && (temp2.car == c) && (temp2.fat == f)) {
				is_exact = true;
				break;
			}
			if ((temp2.index >= n) || (temp2.pro > p) || (temp2.car > c) || (temp2.fat > f))
				continue;
			// take
			temp2.pro += food[temp2.index].p;
			temp2.car += food[temp2.index].c;
			temp2.fat += food[temp2.index].f;
			temp2.index++;
			bfs.push(temp2);
			// not take
			temp.index++;
			bfs.push(temp);
		}
		if (is_exact)
			puts("yes");
		else
			puts("no");
	}
	fclose(stdout);
	fclose(stdin);
	return 0;
}

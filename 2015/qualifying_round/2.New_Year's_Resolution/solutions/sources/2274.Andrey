using System;
using System.IO;
using System.Linq;

namespace IntervalTreeTest
{
    class Program
    {
	    private static int gp;
	    private static int gc;
	    private static int gf;
	    private static StreamWriter sw;
        static void Main(string[] args)
        {
	        sw = new StreamWriter(new FileStream("output.txt", FileMode.Create));
	        Solution(new StreamReader(new FileStream("input.txt", FileMode.Open)));
        }

	    static void Solution(TextReader sr)
	    {
		    var tests = Int32.Parse(sr.ReadLine());
		    for (int i = 0; i < tests; i++)
		    {
			    var input = sr.ReadLine().Split(new[] {' '}, StringSplitOptions.RemoveEmptyEntries);
			    gp = Int32.Parse(input[0]);
			    gc = Int32.Parse(input[1]);
			    gf = Int32.Parse(input[2]);
			    var n = Int32.Parse(sr.ReadLine());
			    var arr = new Tuple<int, int, int>[n];
			    for (int j = 0; j < n; j++)
			    {
					input = sr.ReadLine().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
					arr[j] = new Tuple<int, int, int>(Int32.Parse(input[0]), Int32.Parse(input[1]), Int32.Parse(input[2]));
			    }
			    Sol(arr, (i + 1));
		    }
			sw.Close();
	    }

	    static void Sol(Tuple<int, int, int>[] array, int i)
	    {
		    if (!Sol(array, -1, new bool[array.Length], i))
		    {
			    sw.WriteLine("Case #{0}: no", i);
		    }
	    }

	    static bool Sol(Tuple<int, int, int>[] array, int k, bool[] inSol, int i)
	    {
		    if (IsSolution(array, k, inSol))
		    {
			    return ProcessSolution(array, inSol, i);
		    }
		    k++;
		    inSol[k] = true;
		    if (Sol(array, k, inSol, i))
		    {
			    return true;
		    }
		    inSol[k] = false;
		    return Sol(array, k, inSol, i);
	    }

	    static bool ProcessSolution(Tuple<int, int, int>[] array, bool[] inSol, int i)
	    {
		    var sum1 = Sum1(array, inSol);
		    var sum2 = Sum2(array, inSol);
		    var sum3 = Sum3(array, inSol);

		    if (sum1 == gp && sum2 == gc && sum3 == gf)
		    {
			    sw.WriteLine("Case #{0}: yes", i);

			    return true;
		    }

		    return false;
	    }

	    static int Sum1(Tuple<int, int, int>[] array, bool[] inSol)
	    {
		    int result = 0;
		    for (int i = 0; i < array.Length; i++)
		    {
			    if (inSol[i])
			    {
				    result += array[i].Item1;
			    }
		    }

		    return result;
	    }

		static int Sum2(Tuple<int, int, int>[] array, bool[] inSol)
		{
			int result = 0;
			for (int i = 0; i < array.Length; i++)
			{
				if (inSol[i])
				{
					result += array[i].Item2;
				}
			}

			return result;
		}

		static int Sum3(Tuple<int, int, int>[] array, bool[] inSol)
		{
			int result = 0;
			for (int i = 0; i < array.Length; i++)
			{
				if (inSol[i])
				{
					result += array[i].Item3;
				}
			}

			return result;
		}

	    static bool IsSolution(Tuple<int, int, int>[] array, int k, bool[] inSol)
	    {
			var sum1 = Sum1(array, inSol);
			var sum2 = Sum2(array, inSol);
			var sum3 = Sum3(array, inSol);

			if (sum1 == gp && sum2 == gc && sum3 == gf)
			{
				return true;
			}

		    return array.Length - 1 == k;
	    }
    }
}

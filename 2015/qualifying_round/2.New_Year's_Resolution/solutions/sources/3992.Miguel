import sys
import gc
import math
from collections import defaultdict
from itertools import *

gc.disable()

def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

def is_solution(foodset, gp, gc, gf):
    p = 0
    c = 0
    f = 0
    for food in foodset:
        p += food[0]
        c += food[1]
        f += food[2]
    return p == gp and c == gc and f == gf


def solve(gp, gc, gf, foods):
    for f in powerset(foods):
        if is_solution(f, gp, gc, gf):
            return True
    return False

def main():
    t = int(sys.stdin.readline().strip())
    for i in xrange(t):
        (gp, gc, gf) = [int(x) for x in sys.stdin.readline().strip().split(" ")]
        n = int(sys.stdin.readline().strip())
        foods = []
        for j in xrange(n):
            (p, c, f) = [int(x) for x in sys.stdin.readline().strip().split(" ")]
            foods.append((p, c, f))
        res = solve(gp, gc, gf, foods)
        print "Case #%d: %s" % (i + 1, 'yes' if res else 'no')

main()

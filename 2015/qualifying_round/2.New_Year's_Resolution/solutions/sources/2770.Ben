#include <iostream>
#include <vector>
#include <utility>
#include <functional>

std::vector<std::tuple<int, int, int>> foods;
int tP, tC, tF;

template <typename T>
std::tuple<T, T, T> operator+(const std::tuple<T, T, T>& a,
                              const std::tuple<T, T, T>& b) {
   return std::make_tuple(std::get<0>(a) + std::get<0>(b),
                          std::get<1>(a) + std::get<1>(b), 
                          std::get<2>(a) + std::get<2>(b));
}

bool dp(int idx, std::tuple<int, int, int> current) {
    if (std::get<0>(current) > tP ||
        std::get<1>(current) > tC ||
        std::get<2>(current) > tF)
        return false;
    if (std::get<0>(current) == tP &&
        std::get<1>(current) == tC &&
        std::get<2>(current) == tF)
        return true;
    if (idx == foods.size())
        return false;
    return dp(idx+1, current) || dp(idx+1, current + foods[idx]);
}
    


int main() {
    int cases;
    std::cin >> cases;
    std::cin.get();
    for (int z = 0; z < cases; z++) {
        std::cin >> tP >> tC >> tF;
        int n;
        std::cin >> n;
        foods.clear(); foods.reserve(n);
        for (int i = 0; i < n; i++) {
            int P, C, F;
            std::cin >> P >> C >> F;
            foods.push_back(std::make_tuple(P, C, F));
        }

        bool possible = dp(0, std::make_tuple(0, 0, 0));
        std::cout << "Case #" << z+1 << ": " << (possible ? "yes" : "no") << "\n";
    }
    return 0;
}

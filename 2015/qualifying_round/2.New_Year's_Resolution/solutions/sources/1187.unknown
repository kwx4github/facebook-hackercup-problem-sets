#include <cstdio>
#include <algorithm>
using namespace std;

struct _inpt{
	int a,b,c;
	_inpt(int a=0, int b=0, int c=0) : a(a),b(b),c(c) {}
};

struct _dt{
	int prt;
	bool can;
	_dt(int prt=-1, bool can=false) : prt(prt),can(can) {}
};

_inpt inpt[1005];
_dt dp[1005][1005];

int main(){
	freopen("NewYearResolution_in.txt","r",stdin);
	freopen("NewYearResolution_out.txt","w",stdout);
	int t;
	scanf("%d",&t);
	for(int tc = 1; tc <= t; tc++ ){
		bool done = false;
		int a,b,c,n;
		scanf("%d%d%d",&a,&b,&c);
		scanf("%d",&n);
		for(int i = 0; i < n; i++ ) scanf("%d%d%d",&inpt[i].a,&inpt[i].b,&inpt[i].c);
		for(int z = 0; z < 100; z++ ){
			random_shuffle(inpt,inpt+n);
			for(int i = 0; i <= 1000; i++ ) for(int j = 0; j <= 1000; j++ ) dp[i][j] = _dt(-1,false);
			for(int i = 0; i <= a; i++ ) dp[0][i] = _dt(-1,true);
			for(int i = 1; i <= a; i++ ) dp[i][0] = _dt(-1,false);
			for(int i = 1; i <= a; i++ ) for(int j = 1; j <= a; j++ ){
				if(dp[i][j-1].can) dp[i][j] = dp[i][j-1];
				else if(inpt[j-1].a<=i) if(dp[i-inpt[j-1].a][j-1].can) dp[i][j] = _dt(j,true);
			}
			int fd = -1;
			for(int i = 0; i <= a; i++ ) if(dp[a][i].can){
				fd = i;
				break;
			}
			if(fd!=-1){
				int t1 = fd, t2=a, cb=0, cc=0;
				while(t1>0){
					cb += inpt[t1-1].b;
					cc += inpt[t1-1].c;
					t2 -= inpt[t1-1].a;
					t1 = dp[t2][t1-1].prt;
				}
				if(cb==b && cc==c){
					printf("Case #%d: yes\n",tc);
					done = true;
					break;
				}
			}
		}
		if(!done) printf("Case #%d: no\n",tc);
	}
}

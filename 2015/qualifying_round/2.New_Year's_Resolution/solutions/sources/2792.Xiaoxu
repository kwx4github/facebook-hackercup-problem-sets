import Control.Monad

type Tuple = (Int, Int, Int)

getInt :: IO Int
getInt = read `liftM` getLine

getTuple :: IO Tuple
getTuple = getLine >>= \line ->
           let [a, b, c] = map read . words $ line in
           return (a, b, c)

main :: IO ()
main = do
       t <- getInt
       mapM_ work [1..t]

work :: Int -> IO ()
work t = do
         goal <- getTuple
         n <- getInt
         food <- replicateM n getTuple
         let result = solve food goal
         putStrLn ("Case #" ++ (show t) ++ ": " ++ (if result then "yes" else "no"))

solve :: [Tuple] -> Tuple -> Bool
solve [] (a, b, c) = a == 0 && b == 0 && c == 0
solve ((x, y, z):rs) (a, b, c) = solve rs (a, b, c) || solve rs (a - x, b - y, c - z)

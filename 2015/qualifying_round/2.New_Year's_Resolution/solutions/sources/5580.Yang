package pracice;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class NewYearResolution {
	class FoodCalorie {
		int p = 0, c = 0, f = 0;
		public FoodCalorie(int _p, int _c, int _f) {
			p = _p;
			c = _c;
			f = _f;
		}
		public FoodCalorie(FoodCalorie food) {
			p = food.p;
			c = food.c;
			f = food.f;
		}
		
		public FoodCalorie addFood(FoodCalorie newFood, FoodCalorie totalAmount) {
			int newp = p+newFood.p;
			int newc = c+newFood.c;
			int newf = f+newFood.f;
			if (newp <= totalAmount.p && 
					newc <=totalAmount.c &&
						newf <=totalAmount.f)
				return new FoodCalorie(newp, newc, newf);
			else
				return null;
		}
		
		public boolean sat(FoodCalorie totalAmount) {
			return p == totalAmount.p && c == totalAmount.c && f == totalAmount.f;
		}
		
		public boolean valid(FoodCalorie totalAmount) {
			return p <= totalAmount.p && c <= totalAmount.c && f <= totalAmount.f;
		}
	}
	public void readAndWrite(String file, String out) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(file));
		String line;
		BufferedWriter writer = new BufferedWriter( new FileWriter( out));
		int counter = 0;
		while ((line = br.readLine()) != null) {
			if (counter == 0) {
				counter++;
				continue;
			}
		   FoodCalorie totalFood = parseLine(line);
		   line = br.readLine();
		   int numFoods = Integer.parseInt(line);
		   FoodCalorie[] allFoods = new FoodCalorie[numFoods];
		   for (int i = 0; i < numFoods; i++) {
			   allFoods[i] = parseLine(br.readLine());
		   }
		   boolean sat = possible(totalFood, allFoods);
		   StringBuilder str = new StringBuilder();
		   str.append("Case #").append(counter).append(": ");
		   if (sat)
			   str.append("yes");
		   else
			   str.append("no");
		   str.append("\r\n");
		   writer.write(str.toString());
		   counter++;
		}
		br.close();
		writer.close( );
	}
	
	private boolean possible(FoodCalorie totalAmount, FoodCalorie[] allFoods) {
		List<FoodCalorie> subsets = new ArrayList<FoodCalorie>();
		subsets.add(new FoodCalorie(0,0,0));
		for (FoodCalorie food : allFoods) {
			if (!food.valid(totalAmount))
				continue;
			int total = subsets.size();
			for (int i = 0; i < total; i++) {
				FoodCalorie tmp = food.addFood(subsets.get(i), totalAmount);
				if (tmp == null)
					continue;
				if (tmp.sat(totalAmount))
					return true;
				subsets.add(tmp);
			}
		}
		return false;
	}

	private FoodCalorie parseLine(String line) {
		int[] total = new int[3];
		String[] each = line.split(" ");
		for(int i = 0; i < 3; i++)
			total[i] = Integer.parseInt(each[i]);
		return new FoodCalorie(total[0], total[1], total[2]);
	}

}

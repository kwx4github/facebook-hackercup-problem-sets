import java.io.*;
import java.util.*;
import java.lang.*;

public class NewYearResolution{
    int p[], c[], f[];
    int g_p, g_c, g_f;
    HashMap table;

    NewYearResolution( int g_p, int g_c, int g_f, int p[], int c[], int f[] ){
	this.g_p = g_p;
	this.g_c = g_c;
	this.g_f = g_f;
	this.p = p.clone();
	this.c = c.clone();
	this.f = f.clone();
	table = new HashMap();
    }
    public String isPossible(){
	String res;
	if( t( p.length-1, g_p, g_c, g_f ) ) res = "yes"; else res = "no";
	return res;
    }
    private boolean t( int n, int sp, int sc, int sf ){
	boolean res = false;
	if( get_from_hash( sp, sc, sf ) != null ){
	    Boolean temp = get_from_hash( sp, sc, sf );
	    res = temp.booleanValue();
	}
	else if( sp == p[n] && sc == c[n] && sf == f[n] ) res = true;
	else if( n == 0 ) res = false;
	else if( sp < 0 || sc < 0 || sf < 0 ) return false;
	else{
	    res = t( n-1, sp, sc, sf ) || t( n-1, sp-p[n], sc-c[n], sf-f[n] );
	}
	add_to_hash( sp, sc, sf, res );
	return res;
    }
    
    private void add_to_hash( int sp, int sc, int sf, boolean value ){
	String hash_code = String.valueOf( sp ) + "#" + String.valueOf( sc ) + "#" + String.valueOf( sf );
	table.put( hash_code, new Boolean( value ) );
    }
    private Boolean get_from_hash( int sp, int sc, int sf ){
	String hash_code = String.valueOf( sp ) + "#" + String.valueOf( sc ) + "#" + String.valueOf( sf );
	return( (Boolean) table.get( hash_code ) );
    }
}

class Test{
    public static void main( String args[] ) throws IOException{
	BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );
	StringTokenizer st;
	int t = Integer.parseInt( br.readLine() );
	String res[] = new String[t];
	for( int i=0; i<t; i++ ){
	    st = new StringTokenizer( br.readLine() );
	    int g_p = Integer.parseInt( st.nextToken() );
	    int g_c = Integer.parseInt( st.nextToken() );
	    int g_f = Integer.parseInt( st.nextToken() );
	    int n = Integer.parseInt( br.readLine() );
	    int p[] = new int[n]; int c[] = new int[n]; int f[] = new int[n];
	    for( int j=0; j<n; j++ ){
		st = new StringTokenizer( br.readLine() );
		p[j] = Integer.parseInt( st.nextToken() );
		c[j] = Integer.parseInt( st.nextToken() );
		f[j] = Integer.parseInt( st.nextToken() );
	    }
	    NewYearResolution temp = new NewYearResolution( g_p, g_c, g_f, p, c, f );
	    res[i] = "Case #"+ String.valueOf( i+1 ) + ": " + temp.isPossible();
	}
	for( int i=0; i<t; i++ )
	    System.out.println( res[i] );
    }
}

#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;

struct macro_nutrient {
    int protein;
    int carbohydrates;
    int fat;
};

vector<macro_nutrient> foods;
macro_nutrient goal;

bool dfs(int food, macro_nutrient intake) {
    intake.protein += foods[food].protein;
    intake.carbohydrates += foods[food].carbohydrates;
    intake.fat += foods[food].fat;

    if (goal.protein < intake.protein ||
        goal.carbohydrates < intake.carbohydrates ||
        goal.fat < intake.fat) {
        return false;
    }
    if (goal.protein == intake.protein &&
        goal.carbohydrates == intake.carbohydrates &&
        goal.fat == intake.fat) {
        return true;
    }

    for (int f = food + 1; f < foods.size(); f++) {
        if (dfs(f, intake)) {
            return true;
        }
    }

    return false;
}

bool satisfiable() {
    macro_nutrient init = { 0, 0, 0 };
    for (int food = 0; food < foods.size(); food++) {
        if (dfs(food, init)) {
            return true;
        }
    }
    return false;
}

int main() {
    // freopen("new_years_resolution.txt", "r", stdin);
    // freopen("new_years_resolution_output.txt", "w", stdout);

    int T;
    cin >> T;
    for (int t = 1; t <= T; t++) {
        foods.clear();
        cin >> goal.protein >> goal.carbohydrates >> goal.fat;
        int N;
        cin >> N;
        for (int i = 0; i < N; i++) {
            macro_nutrient food;
            cin >> food.protein >> food.carbohydrates >> food.fat;
            foods.push_back(food);
        }

        printf("Case #%d: %s\n", t, satisfiable() ? "yes" : "no");
    }
}
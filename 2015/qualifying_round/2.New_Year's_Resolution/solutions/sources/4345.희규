import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.*;
import java.io.InputStream;

public class Main {

    public static void main(String[] args) throws Exception {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);


        FaceBook solver = new FaceBook();

        //while (solver.solve(1, in, out)) {

        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            solver.solve(i+1, in, out);
        }

        out.close();

    }
}

class FaceBook {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + testNumber + ": ");
        int gp = in.nextInt();
        int gc = in.nextInt();
        int gf = in.nextInt();
        int N = in.nextInt();
        int[][] pcf = new int[N][3];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < 3; j++) {
                pcf[i][j] = in.nextInt();
            }
        }
        for (int i = 1; i < (1<<N); i++) {
            int[] sum = new int[3];
            for (int j = 0; j < N; j++) {
                if (((1<<j) & i) > 0) {
                    for (int k = 0; k < 3; k++) {
                        sum[k] += pcf[j][k];
                    }
                }
            }
            if (sum[0] == gp && sum[1] == gc && sum[2] == gf) {
                out.println("yes");
                return;
            }
        }
        out.println("no");
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

    public double nextDouble() {
        return Double.parseDouble(next());
    }
}
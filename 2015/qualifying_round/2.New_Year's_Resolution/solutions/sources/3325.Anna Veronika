#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <limits>
#include <numeric>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define MP make_pair
#define all(v) (v).begin(), (v).end()
#define PROBLEM_ID "2"

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef long long ll;
typedef pair<int, int> pii;

struct Food {
	int p;
	int c;
	int f;
};

bool CanSum(
	vector<Food>::const_iterator foods_begin,
	vector<Food>::const_iterator foods_end,
	Food result) {
	if (result.p == 0 && result.c == 0 && result.f == 0) {
		return true;
	}

	if (result.p < 0 || result.c < 0 || result.f < 0) {
		return false;
	}

	if (foods_begin == foods_end) {
		return false;
	}

	
	if (CanSum(foods_begin + 1, foods_end, result))
		return true;

	result.p -= foods_begin->p;
	result.c -= foods_begin->c;
	result.f -= foods_begin->f;
	
	return CanSum(foods_begin + 1, foods_end, result);
}


Food ReadFood() {
	Food f;
	cin >> f.p;
	cin >> f.c;
	cin >> f.f;
	return f;
}

string GetTextAnswer(bool f) {
	return f ? "yes" : "no";
}

int main() {
  freopen(PROBLEM_ID".in", "r", stdin);
  freopen(PROBLEM_ID".out", "w", stdout);
  int tests;
  cin >> tests;
  for (int test_index = 0; test_index < tests; ++test_index) {
	  auto result_food = ReadFood();
	  int foods_count;
	  cin >> foods_count;
	  vector<Food> foods(foods_count);
	  for (int i = 0; i < foods_count; ++i) {
		  foods[i] = ReadFood();
	  }
      cout << "Case #" << test_index + 1 << ": "
		  << GetTextAnswer(CanSum(foods.begin(),
								  foods.end(),
								  result_food)) << endl;
  }
  return 0;
}

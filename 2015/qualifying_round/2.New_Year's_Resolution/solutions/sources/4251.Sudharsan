
// om sayee sri sayee jay jay sayee satguru sayee...

#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<ctime>
#include<cctype>
#include<cassert>
#include<climits>
#include<cerrno>
#include<cfloat>
#include<ciso646>
#include<clocale>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<cwchar>
#include<cwctype>
#include<vector>
#include<list>
#include<map>
#include<queue>
#include<deque>
#include<set>
#include<complex>
#include<string>
#include<stack>
#include<bitset>
#include<istream>
#include<valarray>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<fstream>
#include<exception>
#include<ios>
#include<iosfwd>
#include<ostream>
#include<iterator>
#include<stdexcept>
#include<streambuf>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<limits>
#include<locale>
#include<memory>
#include<new>
using namespace std;


int main()
{
	FILE *jsr;
	jsr=fopen("ip.txt","r");
	freopen("output2.txt","w",stdout);
	int u,i;
	fscanf(jsr,"%d",&u);
//	printf("hello1\n");
	for(i=1;i<=u;i++)
	{
		int x,y,z;
		fscanf(jsr,"%d%d%d",&x,&y,&z);
		int n;	fscanf(jsr,"%d",&n);
	//	printf("%d %d %d ",x,y,z);
//		printf("case %d \n%d %d %d %d\n",i,n,x,y,z);
		int kp[x+1][30];
		for(int q=0;q<=x;q++)
			for(int j=0;j<30;j++)
				kp[q][j]=0;
		int j,a[21],b[21],c[21];
		for(j=1;j<=n;j++)
//		{
			fscanf(jsr,"%d%d%d",&a[j],&b[j],&c[j]);
//			printf("%d %d %d\n",a[j],b[j],c[j]);
//		}
		vector<pair<int,int> > akp[1010][25];
		for(int k=10;k<=x;k++)
		{
		for(j=1;j<=n;j++)
		{
			if((a[j]<=k) && (a[j]+kp[k-a[j]][j-1])>kp[k][j-1])
			{
//					printf("inout %d %d\n",k,j);
				kp[k][j]=a[j]+kp[k-a[j]][j-1];
				int temp=akp[k-a[j]][j-1].size();
				for(int o=0;o<temp;o++)
						akp[k][j].push_back(make_pair(b[j]+akp[k-a[j]][j-1][o].first,c[j]+akp[k-a[j]][j-1][o].second));
				akp[k][j].push_back(make_pair(b[j],c[j]));
//					printf("inoutend %d %d\n",k,j);
			}
			else if((a[j]>k) || ((a[j]+kp[k-a[j]][j-1])<kp[k][j-1]))
			{
//								printf("inside %d %d\n",k,j);
				kp[k][j]=kp[k][j-1];
				int temp=akp[k][j-1].size();
				for(int o=0;o<temp;o++)
						akp[k][j].push_back(make_pair(akp[k][j-1][o].first,akp[k][j-1][o].second));
			}
			else if((a[j]<=k))
			{
//				printf("%d %d outside\n",k,j);
			
				if((a[j]+kp[k-a[j]][j-1])==kp[k][j-1])
				{
//					printf("outin %d %d %d\n",k,j,k-a[j]);
				kp[k][j]=kp[k][j-1];
				int temp=akp[k-a[j]][j-1].size();
				if(temp==0)
					akp[k][j].push_back(make_pair(b[j],c[j]));
				else
					for(int o=0;o<temp;o++)
						akp[k][j].push_back(make_pair(b[j]+akp[k-a[j]][j-1][o].first,c[j]+akp[k-a[j]][j-1][o].second));
				temp=akp[k][j-1].size();
				for(int o=0;o<temp;o++)
						akp[k][j].push_back(make_pair(akp[k][j-1][o].first,akp[k][j-1][o].second));
//					printf("outinend %d %d\n",k,j);
				}
			}
		}
		}
//		printf("hello2\n");
		if(kp[x][n]!=x)
//		{
			printf("Case #%d: no\n",i);
//			printf("hCase #%d: no\n\n",i);
//		}
		else
		{
//		printf("hello3\n");
			int flag=0;
			int temp=akp[x][n].size();
			for(int u=0;u<temp;u++)
				if((akp[x][n][u].first!=y) || (akp[x][n][u].second!=z))
					flag++;
			if(flag==temp)
				printf("Case #%d: no\n",i);
			else
				printf("Case #%d: yes\n",i);
		}
	}
	return 0;
}


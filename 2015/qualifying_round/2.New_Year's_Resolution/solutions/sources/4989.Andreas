import sys;
sys.setrecursionlimit(2**21);

from bisect import *;
import sys;
from math import *;
from fractions import *;
from itertools import *;
import io;
import re;

INF = 987654321987654321987654321;

def readint(delimiter=' ') :
    return map(int, raw_input().split(delimiter));

def readstr(delimiter=' ') :
    return raw_input().split(delimiter);

def readfloat(delimiter=' ') :
    return map(float, raw_input().split(delimiter));

def index(a, x):
    'Locate the leftmost value exactly equal to x'
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    raise ValueError

def find_lt(a, x):
    'Find rightmost value less than x'
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_le(a, x):
    'Find rightmost value less than or equal to x'
    i = bisect_right(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_gt(a, x):
    'Find leftmost value greater than x'
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

def find_ge(a, x):
    'Find leftmost item greater than or equal to x'
    i = bisect_left(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

def bin_search(a, x, left, right) :

    while left<=right :
        mid = (left + right)//2;

        if a[mid] == x :
            return mid;
        elif a[mid] < x :
            left = mid + 1;
        elif a[mid] > x :
            right = mid - 1;

        pass

    return -1;
    pass

def printf(format, *args):
    """Format args with the first argument as format string, and write.
    Return the last arg, or format itself if there are no args."""
    sys.stdout.write(str(format) % args)
    pass

if __name__ == '__main__':

    T = readint()[0];
    for tt in xrange(T) :
        g = readint();
        N = readint()[0];
        arr = [];
        for nn in xrange(N) :
            arr.append(readint());
            pass

        def recdp(n, gx, gy, gz) :
            if gx == 0 and gy == 0 and gz == 0 :
                return True;
            if n == N :
                return False;
            return recdp(n+1, gx-arr[n][0], gy-arr[n][1], gz-arr[n][2]) or recdp(n+1, gx, gy, gz);
            pass
        print ("Case #%d: %s")%(tt+1, "yes" if recdp(0, g[0], g[1], g[2]) else "no");
    pass

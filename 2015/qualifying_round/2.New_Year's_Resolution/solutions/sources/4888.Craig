import java.util.LinkedList;
import java.util.Scanner;


public class resolution {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		for (int i = 1; i <= t; i++) {
			// Desired amounts
			int gp = sc.nextInt();
			int gc = sc.nextInt();
			int gf = sc.nextInt();
			int n = sc.nextInt();
			LinkedList<Food> foods = new LinkedList<Food>();
			for (int j = 0; j < n; j++) {
				foods.add(new Food(sc.nextInt(), sc.nextInt(), sc.nextInt()));			
			}
			// find if any combination of foods can make gp, gc, gf equal to
			// the amount of respective nutreints		
			if (foodCombination(foods, gp, gc, gf)) System.out.println("Case #" + i + ": yes");
			else System.out.println("Case #" + i + ": no");
		}
	}

	private static boolean foodCombination(LinkedList<Food> foods, int gp,
			int gc, int gf) {
		if (gp == 0 && gc == 0 && gf == 0) return true;
		// for each food try if possible
		for (int i = 0; i < foods.size(); i++) {
			Food j = foods.pop();
			if (j.possible(gp, gc, gf)) {
				// could be part of solution, remove from nutrition
				if (foodCombination(new LinkedList<Food>(foods), gp-j.protein, gc-j.carbs, gf-j.fat)) return true;
			}
			// do not include as solution, do not remove from nutrition
			else if (foodCombination(new LinkedList<Food>(foods), gp, gc, gf)) return true;
		}
		return false;
	}
}
class Food {
	int protein;
	int carbs;
	int fat;
	
	public Food(int p, int c, int f) {
		protein = p;
		carbs = c;
		fat = f;
	}
	
	public boolean possible(int p, int c, int f) {
		if (this.protein <= p && this.carbs <= c && this.fat <= f) return true;
		return false;
	}
}

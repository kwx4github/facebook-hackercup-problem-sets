package fb2014_qual;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class B {
    public static void main(String[] args) throws FileNotFoundException {
        Kattio io;

//        io = new Kattio(System.in, System.out);
//        io = new Kattio(new FileInputStream("fb2014_qual/B-sample.in"), System.out);
        io = new Kattio(new FileInputStream("fb2014_qual/new_years_resolution.txt"), new FileOutputStream("fb2014_qual/B.out"));
//        io = new Kattio(new FileInputStream("fb2014_qual/B-large-0.in"), new FileOutputStream("fb2014_qual/B-large-0.out"));

        int cases = io.getInt();
        for (int i = 1; i <= cases; i++) {
            io.print("Case #" + i + ": ");
            new B().solve(io);
        }
        io.close();
    }

    private void solve(Kattio io) {
        int gp = io.getInt(), gc = io.getInt(), gf = io.getInt();
        int n = io.getInt();
        int p[] = new int[n], c[] = new int[n], f[] = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = io.getInt();
            c[i] = io.getInt();
            f[i] = io.getInt();
        }
        boolean possible = false;
        for (int i = 0; i < (1 << n); i++) {
            int tp = 0, tc = 0, tf = 0;
            for (int j = 0; j < n; j++) {
                if (((1<<j)&i)>0) {
                    tp += p[j];
                    tc += c[j];
                    tf += f[j];
                }
            }
            if (tp == gp && tc == gc && tf == gf) {
                possible = true;
            }
        }
        if (possible) {
            io.println("yes");
        } else {
            io.println("no");
        }
    }

    public static class Kattio extends PrintWriter {
        public Kattio(InputStream i) {
            super(new BufferedOutputStream(System.out));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public Kattio(InputStream i, OutputStream o) {
            super(new BufferedOutputStream(o));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public boolean hasMoreTokens() {
            return peekToken() != null;
        }

        public int getInt() {
            return Integer.parseInt(nextToken());
        }

        public double getDouble() {
            return Double.parseDouble(nextToken());
        }

        public long getLong() {
            return Long.parseLong(nextToken());
        }

        public String getWord() {
            return nextToken();
        }


        private BufferedReader r;
        private String line;
        private StringTokenizer st;
        private String token;

        private String peekToken() {
            if (token == null)
                try {
                    while (st == null || !st.hasMoreTokens()) {
                        line = r.readLine();
                        if (line == null) return null;
                        st = new StringTokenizer(line);
                    }
                    token = st.nextToken();
                } catch (IOException e) {
                }
            return token;
        }

        private String nextToken() {
            String ans = peekToken();
            token = null;
            return ans;
        }
    }
}

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

/**
 * Created by Ozan on 9.1.2015.
 */
public class Solution {
    private Scanner in = new Scanner(System.in);

    class Combination {
        private int n, r;
        private int[] index;
        private boolean hasNext = true;

        public Combination(int n, int r) {
            this.n = n;
            this.r = r;
            index = new int[r];
            for (int i = 0; i<r; i++) index[i] = i;
        }

        public boolean hasNext() { return hasNext; }

        // Based on code from KodersCode:
        // The algorithm is from Applied Combinatorics, by Alan Tucker.
        // Move the index forward a notch. The algorithm finds the rightmost
        // index element that can be incremented, increments it, and then
        // changes the elements to the right to each be 1 plus the element on their left.
        //
        // For example, if an index of 5 things taken 3 at a time is at {0 3 4}, only the 0 can
        // be incremented without running out of room. The next index is {1, 1+1, 1+2) or
        // {1, 2, 3}. This will be followed by {1, 2, 4}, {1, 3, 4}, and {2, 3, 4}.

        private void moveIndex() {
            int i = rightmostIndexBelowMax();
            if (i >= 0) {
                index[i] = index[i]+1;
                for (int j = i+1; j<r; j++)
                    index[j] = index[j-1] + 1;
            }
            else hasNext = false;
        }

        public int[] next() {
            if (!hasNext) return null;
            int[] result = new int[r];
            for (int i = 0; i < r; i++) result[i] = index[i];
            moveIndex();
            return result;
        }

        // return int,the index which can be bumped up.
        private int rightmostIndexBelowMax() {
            for (int i = r-1; i>=0; i--)
                if (index[i] < n - r + i) return i;
            return -1;
        }
    }

    private void startSolution(){
        int T = in.nextInt();

        for(int i=0 ; i<T ; i++){
            Boolean finishFlag = false;
            List<Integer> listBase = new ArrayList<Integer>();
            List<List<Integer>> listCase = new ArrayList<List<Integer>>();

            listBase.add(in.nextInt());
            listBase.add(in.nextInt());
            listBase.add(in.nextInt());

            int N = in.nextInt();

            for(int j=0 ; j<N ; j++){
                ArrayList<Integer> listCurrent = new ArrayList<Integer>();
                listCurrent.add(in.nextInt());
                listCurrent.add(in.nextInt());
                listCurrent.add(in.nextInt());
                listCase.add(listCurrent);
            }


            for(int j=1 ; j<=N ; j++){
                Combination c = new Combination(N,j);
                while (c.hasNext()) {
                    int[] combArr = c.next();
                    int totalP=0,totalC=0,totalF=0;

                    for(int k=0 ; k<combArr.length ; k++){
                        totalP += listCase.get(combArr[k]).get(0);
                        totalC += listCase.get(combArr[k]).get(1);
                        totalF += listCase.get(combArr[k]).get(2);
                    }

                    if(totalP == listBase.get(0)
                        && totalC == listBase.get(1)
                        && totalF == listBase.get(2)) {
                        System.out.println("Case #"+(i+1)+": yes");

                        finishFlag = true;
                        break;
                    }
                }
                if(finishFlag){
                    break;
                }
            }

            if(!finishFlag){
                System.out.println("Case #"+(i+1)+": no");
            }
        }

    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        solution.startSolution();
    }
}

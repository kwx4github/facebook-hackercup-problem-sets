#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>

using namespace std;

ifstream Input("/Users/khhan1993/Desktop/input.txt");
ofstream Output("/Users/khhan1993/Desktop/output.txt");

class Nutrient
{
public:
    int protein;
    int carbohydrates;
    int fat;
};

void inputfunc(void);
bool process(Nutrient target, int N, Nutrient *food);
void loopproc(Nutrient target, int N, Nutrient *food, bool **Grid, Nutrient Sum, int point, bool *check);

int main(void)
{
    int T;
    Input >> T;
    
    for (int i = 0; i < T; i++)
    {
        Output << "Case #" << i + 1 << ": ";
        inputfunc();
    }
    
    return 0;
}

void inputfunc(void)
{
    Nutrient target;
    Input >> target.protein >> target.carbohydrates >> target.fat;
    
    int N;
    Input >> N;
    
    Nutrient *food = new Nutrient[N];
    for (int i = 0; i < N; i++)
        Input >> food[i].protein >> food[i].carbohydrates >> food[i].fat;
    
    if (process(target, N, food))
    {
        Output << "yes" << endl;
    }
    else
    {
        Output << "no" << endl;
    }
    
    delete(food);
}

bool process(Nutrient target, int N, Nutrient *food)
{
    bool **Grid = new bool*[N];
    for (int i = 0; i < N; i++)
    {
        Grid[i] = new bool[N];
        memset(Grid[i], 0, sizeof(bool)*(N + 1));
    }
    
    for (int i = 0; i < N; i++)
    {
        for (int j = i + 1; j < N; j++)
        {
            Grid[i][j] = true;
        }
    }
    
    Nutrient Sum;
    memset(&Sum, 0, sizeof(Nutrient));
    
    bool check = false;
    
    for (int i = 0; i < N; i++)
    {
        Sum.carbohydrates += food[i].carbohydrates;
        Sum.protein += food[i].protein;
        Sum.fat += food[i].fat;
        
        loopproc(target, N, food, Grid, Sum, i, &check);
        memset(&Sum, 0, sizeof(Nutrient));
    }
    
    for(int i = 0; i < N; i++)
        delete(Grid[i]);
    delete(Grid);
    
    return check;
}

void loopproc(Nutrient target, int N, Nutrient *food, bool **Grid, Nutrient Sum, int point, bool *check)
{
    if (target.carbohydrates == Sum.carbohydrates && target.protein == Sum.protein && target.fat == Sum.fat)
    {
        *check = true;
        return;
    }
    
    for (int i = 0; i < N; i++)
    {
        if (Grid[point][i])
        {
            Sum.carbohydrates += food[i].carbohydrates;
            Sum.protein += food[i].protein;
            Sum.fat += food[i].fat;
            
            loopproc(target, N, food, Grid, Sum, i, check);
            
            Sum.carbohydrates -= food[i].carbohydrates;
            Sum.protein -= food[i].protein;
            Sum.fat -= food[i].fat;
        }
    }
}
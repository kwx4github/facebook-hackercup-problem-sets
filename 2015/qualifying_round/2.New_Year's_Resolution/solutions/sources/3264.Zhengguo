#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <algorithm>
using namespace std;

struct Food
{
	int P;
	int C;
	int F;
	Food(int p, int c, int f) :P(p), C(c), F(f) {}
};

bool solve(int pos, vector<Food>& vf, int target[3], int cur[3])
{
	if (pos == vf.size())
		return false;

	int tmp[3] = { 0 };

	// choose
	tmp[0] = cur[0] + vf[pos].P;
	tmp[1] = cur[1] + vf[pos].C;
	tmp[2] = cur[2] + vf[pos].F;

	if (tmp[0] == target[0] && tmp[1] == target[1] && tmp[2] == target[2])
		return true;

	bool res = false;
	if (tmp[0] < target[0] && tmp[1] < target[1] && tmp[2] < target[2])
		res = solve(pos + 1, vf, target, tmp);

	return res || solve(pos + 1, vf, target, cur); // don't choose
}

int main()
{
	int T;
	cin >> T;

	for (int i = 1; i <= T; ++i)
	{
		int target[3] = { 0 };
		cin >> target[0] >> target[1] >> target[2];

		int N;
		cin >> N;

		vector<Food> vf;
		for (int j = 0; j < N; ++j)
		{
			int p, c, f;
			cin >> p >> c >> f;
			vf.push_back(Food(p, c, f));
		}

		int cur[3] = { 0 };
		bool res = solve(0, vf, target, cur);

		cout << "Case #" << i << ": ";
		if (res)
			cout << "yes" << endl;
		else
			cout << "no" << endl;
	}
}
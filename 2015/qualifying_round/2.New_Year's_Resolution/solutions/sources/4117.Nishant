//NEw year resolution
#include<stdio.h>
int main()
{
    int a[30]={1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,
    2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912};

    int t,i,j,k;
     #ifndef ONLINE_JUDGE
     freopen("input.txt","r",stdin);
     freopen("output.txt","w",stdout);
     #endif
    scanf("%d",&t);
    for(i=1;i<=t;i++)
    {
        int Gp,Gc,Gf;
        scanf("%d%d%d",&Gp,&Gc,&Gf);
        int sum_p=0,sum_c=0,sum_f=0;
        int cnt=0,flag=0;
        int n,mat[21][3];
        scanf("%d",&n);
        for(j=0;j<n;j++)
        {
            for(k=0;k<3;k++)
            {
                scanf("%d",&mat[j][k]);
                switch(k)
                {
                    case 0:sum_p+=mat[j][k];
                           break;
                    case 1:sum_c+=mat[j][k];
                           break;
                    case 2:sum_f+=mat[j][k];
                           break;
                }

            }
            //checking if indivitual is eqal to actual
            if(mat[j][0]==Gp && mat[j][1]==Gc && mat[j][2]==Gf)
            {
                //found a solution
                flag=1;
            }
        }
        if((flag==1)||(sum_p==Gp && sum_c==Gc && sum_f==Gf))
        {
            printf("Case #%d: yes\n",i);
        }
        else
        {
            if(sum_p < Gp || sum_c<Gc || sum_f < Gf)
            {
               // printf("All sum up\n");
                printf("Case #%d: no\n",i);
            }
            else
            {
                sum_p=sum_c=sum_f=0;
                int p,bit,temp,q;
                //finding the subset
                int s;
                //set having 1 element have been checked
                //set having all element have .also been checked
                for(s=2;s<n;s++)
                {
                   // printf("Subset of %d elements:\n",s);
                    int set=(1<<s)-1;
                    int limit=(1<<n);
                   // printf("set = %d limit = %d\n",set,limit);
                    while(set<limit)
                    {
                        //Idea is we shift right bit by bit and correspondinly sum up values if bit is one
                        //shifting se better hai least significant bit lo use it then
                        //set it to zero as in original word
                       // printf("inside loop set= %d \n",set);
                        temp=set;
                        sum_p=sum_c=sum_f=0;
                      //  for(p=1;p<=n;p++)
                       // {

                            do
                            {
                                //separting the most significant bit
                               // printf("Checking for sum :\n");
                                bit=temp & (~temp+1);
                               // printf("Isolating right most bit:= %d \n",bit);

                               // printf("\n@ ke power = %d\n",bit);
                                 //searching which power of 2
                                      for(q=0;q<30;q++)
                                       {
                                          if(a[q]==bit)
                                             {
                                                break;
                                             }
                                        }
                                        sum_p+=mat[q][0];
                                        sum_c+=mat[q][1];
                                        sum_f+=mat[q][2];

                                       // printf("P=%d C=%d F=%d \n",sum_p,sum_c,sum_f);

                               //off this bit
                                temp=temp^bit;
                                //printf("Eliminated this bie from set:=%d \n",temp);
                            }while(temp);

                            if((sum_p==Gp && sum_c==Gc && sum_f==Gf))
                              {
                                   flag=1;
                                   break;
                              }
                      //  }

                        if(flag==1)
                        {
                            break;
                        }

                        //hack
                        int c=set & -set;
                        int r=set+c;
                        set=(((r^set)>>2)/c)|r;

                }
                if(flag==1)
                {
                    break;
                }
            }

            //finally
            if(flag==1)
            {
                printf("Case #%d: yes\n",i);
            }
            else
            {
                printf("Case #%d: no\n",i);
            }
        }
    }
    }
    return 0;
}

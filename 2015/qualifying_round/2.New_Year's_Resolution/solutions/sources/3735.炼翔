#include <cstdio>
#include <stack>
#include <list>
#include <set>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <functional>
#include <cstring>
#include <iomanip>
#include <algorithm>
#include <cctype>
#include <string>
#include <map>
#include <cmath>
using namespace std;
#define LL long long
#define ULL unsigned long long
#define SZ(x) (int)x.size()
#define Lowbit(x) ((x) & (-x))
#define MP(a, b) make_pair(a, b)
#define MS(arr, num) memset(arr, num, sizeof(arr))
#define PB push_back
#define F first
#define S second
#define ROP freopen("input.txt", "r", stdin);
#define MID(a, b) (a + ((b - a) >> 1))
#define LC rt << 1, l, mid
#define RC rt << 1|1, mid + 1, r
#define LRT rt << 1
#define RRT rt << 1|1
#define BitCount(x) __builtin_popcount(x)
#define BitCountll(x) __builtin_popcountll(x)
#define LeftPos(x) 32 - __builtin_clz(x) - 1
#define LeftPosll(x) 64 - __builtin_clzll(x) - 1
const double PI = acos(-1.0);
const int INF = 0x3f3f3f3f;
const double eps = 1e-8;
const int MAXN = 1000 + 10;
const int MOD = 1000007;
const int dir[][2] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
typedef pair<int, int> pii;
typedef vector<int>::iterator viti;
typedef vector<pii>::iterator vitii;

struct POINT
{
	int a, b, c;
}pit[MAXN];

bool flag;
int depth, ta, tb, tc, n;

bool DFSID(int aSum, int bSum, int cSum, int cur, int curDep)
{
	if (curDep == depth)
	{
		if (aSum == ta && bSum == tb && cSum == tc) return flag = true;
		else return false;
	}
	for (int i = cur; i < n; i++)
	{
		if (curDep != depth - 1 && (aSum + pit[i].a >= ta || bSum + pit[i].b >= tb || cSum + pit[i].c >= tc)) continue;
		if (DFSID(aSum + pit[i].a, bSum + pit[i].b, cSum + pit[i].c, i + 1, curDep + 1)) return true;
	}
	return false;
}

int main()
{
    ROP;
    freopen("out.txt", "w", stdout);
	int T, i, j, cases = 0;
	scanf("%d", &T);
	while (T--)
	{
		flag = false;
		scanf("%d%d%d", &ta, &tb, &tc);
		scanf("%d", &n);
		for (i = 0; i < n; i++) scanf("%d%d%d", &pit[i].a, &pit[i].b, &pit[i].c);
		depth = 1;
		while (!DFSID(0, 0, 0, 0, 0))
        {
            depth++;
            if (depth > 20) break;
        }
		printf("Case #%d: %s\n",  ++cases, flag ? "yes" : "no");
	}
	return 0;
}

import           Control.Applicative
import           Control.Monad
import           Data.List
import           Text.Printf

main :: IO ()
main = do
  cases <- readLn
  forM_ [1..cases::Int] $ \cn -> do
    gs <- map read . words <$> getLine
    n <- readLn
    as <- replicateM n $ map read . words <$> getLine
    let ans = elem gs $ do
          sel <- map concat $ sequence [ [[a], []] | a <- as ]
          return $ foldl' (zipWith (+)) [0,0,0::Int] sel
    printf "Case #%d: %s\n" cn (if ans then "yes" else "no")

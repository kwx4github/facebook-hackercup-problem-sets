import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class NewYearRevolution {
	public static class PCF {
		final int p, c, f;

		public PCF(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}

		public PCF(String line) {
			String pcfArray[] = line.split(" ");
			p = Integer.parseInt(pcfArray[0]);
			c = Integer.parseInt(pcfArray[1]);
			f = Integer.parseInt(pcfArray[2]);

		}

		public boolean find(PCF want) {
			if (want.p == p && want.c == c && want.f == f) {
				return true;
			}
			return false;
		}

		public boolean exceed(PCF want) {
			if (want.p < p || want.c < c || want.f < f) {
				return true;
			}
			return false;
		}

		public String toString() {
			return "P:" + p + " C: " + c + " F:" + f;
		}

		public PCF weight(PCF base) {
			int p = base.p * this.p;
			int c = base.c * this.c;
			int f = base.f * this.f;
			return new PCF(p, c, f);
		}

		public PCF add(PCF add) {
			int p = add.p + this.p;
			int c = add.c + this.c;
			int f = add.f + this.f;
			return new PCF(p, c, f);
		}
	}

	public static void main(String args[]) {
		try {
			BufferedReader reader = new BufferedReader(new FileReader(
					"input.txt"));

			FileWriter writer = new FileWriter("output.txt");
			int data = Integer.parseInt(reader.readLine());
			for (int i = 0; i < data; i++) {
				PCF base = new PCF(reader.readLine());
				int num = Integer.parseInt(reader.readLine());
				PCF valueArray[] = new PCF[num];
				for (int j = 0; j < num; j++) {
					valueArray[j] = new PCF(reader.readLine());
				}
				String result = new NewYearRevolution().solve(i + 1, base,
						valueArray);
				writer.write(result + "\n");
				
			}
			writer.flush();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private String solve(int caseIndex, PCF want, PCF[] valueArray) {

		boolean find = dfs(want, valueArray, 0, new PCF(0, 0, 0));
		return String.format("Case #%d: %s", caseIndex, find ? "yes" : "no");
	}

	public boolean dfs(PCF want, PCF[] valueArray, int index, PCF prev) {
		if (prev.find(want)) {
			return true;
		} else if (prev.exceed(want)) {
			return false;
		}
		if (index >= valueArray.length) {
			return false;
		}
		// use it
		PCF current = valueArray[index];
		boolean find = dfs(want, valueArray, index + 1, prev.add(current));
		if (!find) {
			find = dfs(want, valueArray, index + 1, prev);
		}
		return find;
	}
}

#include <iostream>
#include <array>
#include <vector>
#include <algorithm>

using namespace std;

typedef array<int, 3> vec;

bool isSubsetSum(const std::vector<vec>& set, int n, vec sum)
{
   if (sum[0] == 0 && sum[1] == 0 && sum[2] == 0)
     return true;
   if (n == 0 && (sum[0] != 0 || sum[1] != 0 || sum[2] != 0)) 
     return false;
 
   if (set[n-1][0] > sum[0] || set[n-1][1] > sum[1] || set[n-1][2] > sum[2])
     return isSubsetSum(set, n-1, sum);
 
   vec tmpSum;
   tmpSum[0] = sum[0] - set[n-1][0];
   tmpSum[1] = sum[1] - set[n-1][1];
   tmpSum[2] = sum[2] - set[n-1][2];

   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, tmpSum);
}

int main()
{
	size_t T;

	cin >> T;

	for(size_t i=1; i <= T; ++i)
	{
		size_t N;
		vec G;
		vec tmp;

		cin >> G[0];
		cin >> G[1];
		cin >> G[2];

		cin >> N;

		std::vector<vec> foods;

		for(int k=0; k < N; ++k)
		{
			cin >> tmp[0];
			cin >> tmp[1];
			cin >> tmp[2];

			foods.push_back(tmp);
		}

		cout << "Case #" << i << ": " << (isSubsetSum(foods, foods.size(), G) ? "yes" : "no") << endl;
	}

	return 0;
}
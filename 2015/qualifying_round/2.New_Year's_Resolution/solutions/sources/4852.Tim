import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Scanner;

public class Main {
	
	public static BufferedWriter writer;
	public static BufferedReader reader;
	
	public static void main(String [] args) {
		
		try {
			reader = new BufferedReader(new FileReader("res/input.txt"));
			writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("res/output.txt"), "utf-8"));
			int t = Integer.parseInt(reader.readLine());
			int n;
			Food target;
			Food[] foods;
		    for(int i = 1; i <= t; i++) {
		    	target = Food.parseFood(reader.readLine());
		    	n = Integer.parseInt(reader.readLine());
		    	foods = new Food[n];
		    	for (int j = 0; j < n; j++) foods[j] = Food.parseFood(reader.readLine());
		    	if (checkPosRec(new Food(0, 0, 0), target, foods, 0, n)) {
		    		writer.write("Case #" + i + ": yes\n");
		    	} else writer.write("Case #" + i + ": no\n");
		    }
		} catch (IOException exception) {
			exception.printStackTrace();
		} finally {
			try {reader.close();} catch (Exception ex) {}
			try {writer.close();} catch (Exception ex) {}
		}
	}
	
	private static boolean checkPosRec(Food currFood, Food target, Food[] foods, int currDepth, int maxDepth) {
		Food newFood = new Food(currFood, foods[currDepth]);
		Food oldFood = new Food(currFood.p, currFood.c, currFood.f);
		if (newFood.equals(target)) return true;
		currDepth++;
		if (currDepth == maxDepth) return false;
		else return (checkPosRec(oldFood, target, foods, currDepth, maxDepth) || 
				    (newFood.p < target.p && newFood.c < target.c && newFood.f < target.f && checkPosRec(newFood, target, foods, currDepth, maxDepth)));
	}
	
	private static class Food {
		
		public int p, c, f;
		
		public Food(int p, int c, int f) {
			this.p = p; this.c = c; this.f = f;
		}
		
		public Food(Food f1, Food f2) {
			this.p = f1.p + f2.p;
			this.c = f1.c + f2.c;
			this.f = f1.f + f2.f;
		}
		
		@SuppressWarnings("resource")
		public static Food parseFood(String input) {
			Scanner parser = new Scanner(input).useDelimiter(" ");
			return new Food(parser.nextInt(), parser.nextInt(), parser.nextInt());
		}
		
		@Override
		public boolean equals(Object object) {
			if (object instanceof Food) {
				Food food = (Food)object;
				if (food.p == this.p && food.c == this.c && food.f == this.f) return true;
			} return false;
		}
	}
}
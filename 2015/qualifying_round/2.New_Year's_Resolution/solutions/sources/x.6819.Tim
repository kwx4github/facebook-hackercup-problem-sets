/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hackercup2015;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;

/**
 *
 * @author user
 */
public class NewYearsResolution {

    static File file = new File("new_years_resolution.txt");
    static int TARGET_SUM = 0;
    static List pArr = new ArrayList<>();
    static List cArr = new ArrayList<>();
    static List fArr = new ArrayList<>();
    
    //cooking_the_books_example_output.txt
    public static void main(String[] args) throws FileNotFoundException, IOException, InterruptedException {
        PrintWriter writer = new PrintWriter("new_years_resolution_output.txt", "UTF-8");
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String N;
            String gPCF;
            String[] PCFArr = null;
            String T;
            T = br.readLine();
            //System.err.println(T);
            for (int i = 0; i < Integer.valueOf(T); i++) {
                gPCF = br.readLine();
                N = br.readLine();
                //System.err.println(gPCF);
                //System.err.println(N);
                PCFArr = new String[Integer.valueOf(N)];
                for (int j = 0; j < Integer.valueOf(N); j++) {
                    PCFArr[j] = br.readLine();
                    //System.err.println(PCFArr[j]);
                }
                writer.print("Case #" + (i + 1) + ": ");
                //writer.println(function(gPCF, PCFArr));
                function(gPCF, PCFArr);

                if (!pArr.isEmpty() && !cArr.isEmpty() && !fArr.isEmpty()) {
                    writer.println("yes");
                } else {
                    writer.println("no");
                }
                pArr.clear();
                cArr.clear();
                fArr.clear();
            }

            writer.close();
            br.close();
        }
    }

    private static String function(String gPCF, String[] PCFArr) throws InterruptedException {
        int N = PCFArr.length;
        final int iP = 0, iC = 1, iF = 2;
        String[] temp = gPCF.split("\\s");
        int gP = Integer.valueOf(temp[0]), gC = Integer.valueOf(temp[1]), gF = Integer.valueOf(temp[2]);
        int[][] PCF = new int[N][3];
        for (int i = 0; i < N; i++) {
            temp = PCFArr[i].split("\\s");
            PCF[i][iP] = Integer.valueOf(temp[iP]);
            PCF[i][iC] = Integer.valueOf(temp[iC]);
            PCF[i][iF] = Integer.valueOf(temp[iF]);
        }
        //Proteins
        TARGET_SUM = gP;
        int[] data = new int[PCF.length];
        for (int i = 0; i < N; i++) {
            data[i] = PCF[i][iP];
        }

        populateSubsetP(data, 0, new int[data.length], 0, TARGET_SUM);

        TARGET_SUM = gC;
        data = new int[PCF.length];
        for (int i = 0; i < N; i++) {
            data[i] = PCF[i][iC];
        }

        populateSubsetC(data, 0, new int[data.length], 0, TARGET_SUM);

        TARGET_SUM = gF;
        data = new int[PCF.length];
        for (int i = 0; i < N; i++) {
            data[i] = PCF[i][iF];
        }

        populateSubsetF(data, 0, new int[data.length], 0, TARGET_SUM);

        /*for (int k = 0; k < pArr.size(); k++) {
            int[] tmp = (int[]) pArr.get(k);
            for (int j = 0; j < tmp.length; j++) {
                System.err.print(tmp[j] + " + ");
            }
            System.err.println();
        }
        pArr.clear();*/

        //Thread.sleep(3000);

        //recursiveAppendP(PCF, gP);
        return "no";
    }

    private static void populateSubsetP(final int[] data, int fromIndex, final int[] stack, final int stacklen, final int target) {
        if (target == 0) {
            // exact match of our target. Success!
            printResult(Arrays.copyOf(stack, stacklen));
            pArr.add(Arrays.copyOf(stack, stacklen));
            return;
        }

        while (fromIndex < data.length && data[fromIndex] > target) {
            // take advantage of sorted data.
            // we can skip all values that are too large.
            fromIndex++;
        }

        while (fromIndex < data.length && data[fromIndex] <= target) {
            // stop looping when we run out of data, or when we overflow our target.
            stack[stacklen] = fromIndex; //data[fromIndex];
            populateSubsetP(data, fromIndex + 1, stack, stacklen + 1, target - data[fromIndex]);
            fromIndex++;
        }
    }

    private static void populateSubsetC(final int[] data, int fromIndex, final int[] stack, final int stacklen, final int target) {
        if (target == 0) {
            // exact match of our target. Success!
            printResult(Arrays.copyOf(stack, stacklen));
            cArr.add(Arrays.copyOf(stack, stacklen));
            return;
        }

        while (fromIndex < data.length && data[fromIndex] > target) {
            // take advantage of sorted data.
            // we can skip all values that are too large.
            fromIndex++;
        }

        while (fromIndex < data.length && data[fromIndex] <= target) {
            // stop looping when we run out of data, or when we overflow our target.
            stack[stacklen] = fromIndex; //data[fromIndex];
            populateSubsetC(data, fromIndex + 1, stack, stacklen + 1, target - data[fromIndex]);
            fromIndex++;
        }
    }

    private static void populateSubsetF(final int[] data, int fromIndex, final int[] stack, final int stacklen, final int target) {
        if (target == 0) {
            // exact match of our target. Success!
            printResult(Arrays.copyOf(stack, stacklen));
            fArr.add(Arrays.copyOf(stack, stacklen));
            return;
        }

        while (fromIndex < data.length && data[fromIndex] > target) {
            // take advantage of sorted data.
            // we can skip all values that are too large.
            fromIndex++;
        }

        while (fromIndex < data.length && data[fromIndex] <= target) {
            // stop looping when we run out of data, or when we overflow our target.
            stack[stacklen] = fromIndex; //data[fromIndex];
            populateSubsetF(data, fromIndex + 1, stack, stacklen + 1, target - data[fromIndex]);
            fromIndex++;
        }
    }

    private static void printResult(int[] stack) {
        StringBuilder sb = new StringBuilder();
        sb.append(TARGET_SUM).append(" = ");
        for (Integer i : stack) {
            sb.append(i).append("+");
        }
        System.err.println(sb.deleteCharAt(sb.length() - 1).toString());
    }
}

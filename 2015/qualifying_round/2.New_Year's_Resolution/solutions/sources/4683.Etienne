#!/usr/bin/env python

import string, sys, copy

def protein_carbohydrates_fat_from(food):
    return map(int, string.split(food, ' '))

class State:
    def __init__(self, P=0, C=0, F=0):
        self.P = P
        self.C = C
        self.F = F

    def eat(self, food):
        P,C,F=food
        self.P += P
        self.C += C
        self.F += F

    def __cmp__(self, other):
        cmp_p = cmp(self.P, other.P)
        if cmp_p > 0:
            return cmp_p
        cmp_c = cmp(self.C, other.C)
        if cmp_c > 0:
            return cmp_c
        cmp_f = cmp(self.F, other.F)
        if cmp_f > 0:
            return cmp_f
        return 0 if cmp_p == 0 and cmp_c == 0 and cmp_f == 0 else -1

    def __copy__(self):
        return State(self.P, self.C, self.F)

    def __str__(self):
        return '%d %d %d' % (self.P, self.C, self.F)

if __name__ == '__main__':
    filename = sys.argv[1]
    with open(filename, 'r') as reader:
        T = int(next(reader))
        with open('output2.txt', 'w') as writer:
            for i in xrange(T):
                Gp, Gc, Gf = protein_carbohydrates_fat_from(next(reader).strip())
                N = int(next(reader).strip())
                final = State(Gp, Gc, Gf)
                states = [State(0,0,0)]
                match = final in states
                for x in xrange(N):
                    food = protein_carbohydrates_fat_from(next(reader).strip())
                    if not match:
                        new_states = []
                        for state in states:
                            new_states.append(state)
                            new_state = copy.copy(state)
                            new_state.eat(food)
                            if new_state <= final:
                                new_states.append(new_state)
                        states = new_states
                        match = final in states
                writer.write("Case #%d: %s\n" % (i+1, 'yes' if match else 'no'))

def new_years_resolution_test():

    """Tests new years resolution for input from file"""

    f = open(sys.argv[1], 'r')
    out = open('output.txt', 'a')

    res = []
    for line in f:
        res.append(line)
    test_cases, current = [], []

    i = 1
    while i < len(res):
        current.append(tuple(map(lambda x: int(x), res[i].split())))
        j = i + 1
        current.append(int(res[j]))
        items = []
        for k in range(1, int(res[j]) + 1):
            items.append(tuple(map(lambda x: int(x), res[j + k].split())))
        current.append(tuple(items))
        test_cases.append(tuple(current))
        items = []
        current = []
        i = j + k + 1
    f.close()

    for i in range(0, len(test_cases)):
        test_case = test_cases[i]
        req = test_case[0]
        foods = test_case[2]
        result = check_foods(0, req, foods)
        result_string = ""
        if result:
            result_string = "yes"
        else:
            result_string = "no"
        out.write("Case #{0}: {1}\n".format(i + 1, result_string))

    out.close()


def take_nutrition(req, intake):

    """Calculates remainder of required nutrition"""

    x = map(lambda y: y, req)

    if len(x) == len(intake):
        for i in range(0, len(req)):
            x[i] = x[i] - intake[i]

    return tuple(x)

def is_satisfied(req):

    """Checks if nutrition requirements have been met"""

    for i in req:
        if i != 0:
            return False

    return True

def check_foods(index, req, foods):

    """Checks if a set of foods can satisfy the nutrition requirement"""

    if is_satisfied(req):
        return True

    if index >= len(foods):
        return is_satisfied(req)

    if check_foods(index + 1, take_nutrition(req, foods[index]), foods):
        return True

    if check_foods(index + 1, req, foods):
        return True

    return False

if __name__ == "__main__":
    import sys
    new_years_resolution_test()
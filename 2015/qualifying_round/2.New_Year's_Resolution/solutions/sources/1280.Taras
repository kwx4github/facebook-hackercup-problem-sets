using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

namespace FacebookHackercup2015
{
    public class NewYearResolution
    {
        public static void Main(string[] args)
        {
            Run(args[0]);
            //RunTest();
        }

        private static void Run(string fileName)
        {
            StreamReader sr = new StreamReader(fileName);
            int cases = int.Parse(sr.ReadLine().Trim());
            for (int i = 0; i < cases; i++)
            {
                RunCase(i + 1, sr);
            }

            sr.Close();
        }

        private static void RunCase(int i, StreamReader sr)
        {
            Food goal = ParseFood(sr.ReadLine().Trim());
            int fn = int.Parse(sr.ReadLine().Trim());
            Food[] foods = new Food[fn];
            for (int j = 0; j < fn; j++)
            {
                Food f = ParseFood(sr.ReadLine().Trim());
                foods[j] = f;
            }

            bool b = CanSumExact(goal, foods);
            Console.WriteLine("Case #{0}: {1}", i, b ? "yes" : "no");
        }

        private static Food ParseFood(string input)
        {
            string[] parts = input.Split(' ');
            return new Food(int.Parse(parts[0]), int.Parse(parts[1]), int.Parse(parts[2]));
        }

        private static void RunTest() 
        {
            Food goal = new Food(100, 100, 100);
            
            Food[] foods = new Food[] 
            { 
                new Food(40, 70, 30),
                new Food(30, 10, 40),
                new Food(20, 20, 50),
                new Food(10, 50, 90),
                new Food(40, 10, 20)
            };

            Food goal2 = new Food(292, 264, 512);
            Food[] foods2 = new Food[]
            {
                new Food(909, 302, 261),
                new Food(705, 597, 823),
                new Food(291, 51, 126),
                new Food(28, 697, 57),
                new Food(593, 31, 826),
                new Food(311, 256, 57),
                new Food(292, 14, 47),
                new Food(29, 730, 716),
                new Food(12, 529, 146),
                new Food(768, 16, 439),
                new Food(37, 472, 15),
                new Food(350, 192, 34),
                new Food(163, 468, 238),
                new Food(69, 173, 10),
                new Food(203, 72, 690),
                new Food(424, 875, 213),
                new Food(223, 593, 292),
                new Food(151, 46, 10),
                new Food(88, 90, 16),
                new Food(773, 653, 711),
                new Food(991, 827, 352)
            };

            //Console.WriteLine(HasGoal(goal, foods));
            Console.WriteLine(CanSumExact(goal2, foods2));

        }

        // shame on me - I'm implementing it with brute-force
        private static bool CanSumExact(Food goal, Food[] foods)
        {
            int values = (int) Math.Pow(2, foods.Length);
            for (int i = 0; i < values; i++)
            {
                BitArray ba = new BitArray(BitConverter.GetBytes(i));
                Food f = new Food(0, 0, 0);
                for (int j = 0; j < ba.Count; j++)
                {
                    if (ba.Get(j))
                    {
                        f = f + foods[j];
                    }
                }

                if (f == goal)
                {
                    return true;
                }
                
            }

            return false;
        }

        private class Food
        {
            public Food(int p, int g, int f)
            {
                P = p;
                G = g;
                F = f;
            }

            public static IComparer<Food> CompareByProtein = new ProteinComparer();  

            public int P { get; private set; }
            
            public int G { get; private set; }
            
            public int F { get; private set; }

            public override string ToString()
            {
                return string.Format("P={0} G={1} F={2}", P, G, F);
            }

            public override int GetHashCode()
            {
                unchecked
                {
                    int hashCode = P.GetHashCode();
                    hashCode = (hashCode * 397) ^ G.GetHashCode();
                    hashCode = (hashCode * 397) ^ F.GetHashCode();
                    return hashCode;
                }                
            }

            public override bool Equals(object obj)
            {
                if (ReferenceEquals(obj, null))
                {
                    return false;
                }
                if (ReferenceEquals(this, null))
                {
                    return false;
                }
                if(obj.GetType() != typeof(Food))
                {
                    return false;
                }
                
                return Comparison(this, (Food)obj) == 0;
            }

            public Food Clone()
            {
                return new Food(P, G, F);
            }

            public static Food operator -(Food x, Food y)
            {
                return new Food(x.P - y.P, x.G - y.G, x.F - y.F);
            }

            public static Food operator +(Food x, Food y)
            {
                return new Food(x.P + y.P, x.G + y.G, x.F + y.F);
            }

            public static bool operator==(Food x, Food y) {
                return Comparison(x, y) == 0;
            }

            public static bool operator !=(Food x, Food y)
            {
                return !(x == y);
            }

            public static int Comparison(Food x, Food y) {
                if (x.P != y.P)
                {
                    return x.P - y.P;
                }
                else if(x.G != y.G) 
                {
                    return x.G - y.G;
                }
                else
                {
                    return x.F - y.F;
                }
            }

            private class ProteinComparer : IComparer<Food>
            {
                public int Compare(Food x, Food y)
                {
 	                return x.P - y.P;
                }
            }
        }

    }
}

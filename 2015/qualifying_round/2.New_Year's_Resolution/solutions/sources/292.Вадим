import java.io.*;
import java.math.BigInteger;
import java.util.*;


public class NYR {

    void solve() throws IOException {
        int t=nextInt();
        for(int testCase=0;testCase<t;testCase++){
            int ga=nextInt();
            int gb=nextInt();
            int gc=nextInt();
            int n=nextInt();
            int[] a=new int[n];
            int[] b=new int[n];
            int[] c=new int[n];
            for(int i=0;i<n;i++){
                a[i]=nextInt();
                b[i]=nextInt();
                c[i]=nextInt();
            }
            int maxMask=1<<n;
            boolean good=false;
            for(int i=0;i<maxMask;i++){
                int ca=0;
                int cb=0;
                int cc=0;
                for(int j=0;j<n;j++)
                    if((i&(1<<j))!=0){
                        ca+=a[j];
                        cb+=b[j];
                        cc+=c[j];
                    }
                if(ca==ga&&cb==gb&&cc==gc){
                    good=true;
                    break;
                }

            }
            out.printf("Case #%d: ",testCase+1);
            if(good)out.println("yes");
            else out.println("no");
        }
    }

    public static void main(String[] args) throws IOException {
        new NYR().run();
    }

    void run() throws IOException {
        reader = new BufferedReader(new InputStreamReader(System.in));
		reader = new BufferedReader(new FileReader("input.txt"));
        tokenizer = null;
        out = new PrintWriter(new OutputStreamWriter(System.out));
		out = new PrintWriter(new FileWriter("output.txt"));
        solve();
        reader.close();
        out.flush();

    }

    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }
}

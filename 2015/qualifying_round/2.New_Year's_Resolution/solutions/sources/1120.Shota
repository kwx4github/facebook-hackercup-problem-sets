#if defined(__clang__)
#include <algorithm>
#include <array>
#include <bitset>
#include <cmath>
#include <complex>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
#endif

#define inf(T) (numeric_limits<T>::min())
#define sup(T) (numeric_limits<T>::max())
#define rep(i,n) for (int i = 0; i < (n); i++)
#define asc(c) (c).begin(), (c).end()
#define desc(c) (c).rbegin(), (c).rend()
#define ascend(l,r) l = max(l, r)
#define descend(l,r) l = min(l, r)
#define mp(...) make_pair(__VA_ARGS__)
#define mt(...) make_tuple(__VA_ARGS__)

using namespace std;

using ll = long long;
using ld = long double;

template <class Key>          using uset = unordered_set<Key>;
template <class Key, class T> using umap = unordered_map<Key, T>;

int main()
{
  cin.tie(0);
  ios::sync_with_stdio(false);

  int T;
  cin >> T;

  rep(i,T) {
    vector<int> g(3);
    rep(j,3) cin >> g[j];
    int N;
    cin >> N;
    vector<vector<int>> foods(N, vector<int>(3));
    rep(j,N) rep(k,3) cin >> foods[j][k];

    vector<int> patterns;
    rep(j, 1 << N) patterns.push_back(j);

    auto result = any_of(asc(patterns), [&](int pattern){
      vector<int> sum(3, 0);
      rep(j,N) {
        if (pattern & (1 << j)) {
          rep(k,3) sum[k] += foods[j][k];
        }
      }
      return g == sum;
    });

    cout << "Case #" << i + 1 << ": " << (result ? "yes" : "no") << endl;
  }

  return 0;
}

import java.util.*;

public class Main
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		int cases = sc.nextInt();
		for (int cNum = 1; cNum <= cases; cNum++)
		{
			Food goal = new Food(sc.nextInt(), sc.nextInt(), sc.nextInt());
			//System.out.println(goal);
			Stack<Food> avail = new Stack<Food>();
			int n = sc.nextInt();
			for (int i = 0; i < n; i++)
			{
				Food f = new Food(sc.nextInt(), sc.nextInt(), sc.nextInt());
				//System.out.println(f.toString());
				avail.push(f);
			}
			
			System.out.println( "Case #" + cNum + ": " + ((isPossible(goal, avail, 0)) ? "yes" : "no"));
		}
	}
	
	public static boolean isPossible(Food goal, Stack<Food> avail, int level)
	{
		if (goal.isZero()) return true;
		if (goal.isNeg()) return false;
		if (avail.empty()) return false;
		
		Food thisFood = avail.pop();
		 
		boolean dontUse = false;
		boolean use = isPossible(goal.subtract(thisFood), avail, level+1);
		
		if (!use) 
		{
			dontUse = isPossible(goal, avail, level+1);
		}
		
		avail.push(thisFood);
		return use || dontUse;
	}
	
	static class Food
	{
		int protein, carbs, fat;
		
		public Food(int p, int c, int f)
		{
			protein = p;
			carbs = c;
			fat = f;
		}
		
		Food subtract( Food that )
		{
			return new Food(this.protein - that.protein, this.carbs - that.carbs, this.fat - that.fat);
		}
		
		boolean isZero()
		{
			return this.protein == 0 && this.carbs == 0 && this.fat == 0;
		}
		
		boolean isNeg()
		{
			return this.protein < 0 || this.carbs < 0 || this.fat < 0;
		}
		
		public String toString()
		{
			return "protein: " + this.protein + " carbs: " + this.carbs + " fat: " + this.fat;
		}
	}	
}
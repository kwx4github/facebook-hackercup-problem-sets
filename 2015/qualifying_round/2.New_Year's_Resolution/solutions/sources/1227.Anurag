import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;


public class NewYearResolution {

	public static void main(String[] args) throws IOException {
		Scanner s = null;
		try {
			s = new Scanner(new BufferedReader(new FileReader("C:/anurag/work/java/src/anu/src/input.txt")));
	        int T = s.nextInt();
	        int i = 1, j = 0;
	        int GP = 0, GC = 0, GF = 0;
	        int totalP = 0, totalC = 0, totalF = 0;
	        PCF[] pcf = null;
	        int N = 0;
	        while (i <= T) {
	        	System.out.print("Case #" + i + ": ");
	        	GP = s.nextInt();
	        	GC = s.nextInt();
	        	GF = s.nextInt();
	        	N = s.nextInt();
	        	if(N == 1)
	        	{
	        		if(GP == s.nextInt() && GC == s.nextInt() && GF == s.nextInt())
	        			System.out.println("yes");
	        		else
	        			System.out.println("no");
	        	}
	        	else
	        	{
	        		j=0;
	        		pcf = new PCF[N];
	        		
	        		totalP = 0;
        			totalC = 0;
        			totalF = 0;
        			
	        		while(j < N)
	        		{
	        			pcf[j] = new PCF(s.nextInt(), s.nextInt(), s.nextInt());
	        			
	        			totalP += pcf[j].P;
	        			totalC += pcf[j].C;
	        			totalF += pcf[j].F;
	        			j++;
	        		}

	        		if(totalP >= GP && totalC >= GC && totalF >= GF)
	        		{
		        		Arrays.sort(pcf);
		        		if(pcf[0].P <= GP)
		        			System.out.println(SubsetSum(pcf, 0, 0, 0, GP, GC, GF, 0) ? "yes" : "no");
		        		else
		        			System.out.println("no");
	        		}
	        		else
	        			System.out.println("no");
	        	}
	        	i++;
	        }
		} finally {
            if (s != null) {
                s.close();
            }
        }

	}
	
	static boolean SubsetSum(PCF[] pcf, int sumSoFarP, int sumSoFarC, int sumSoFarF, int GP, int GC, int GF, int idx)
	{
		if( sumSoFarP == GP && sumSoFarC == GC && sumSoFarF == GF)
	    {
			return true;
	    }
		else if( sumSoFarP == GP)
		{
			if( ((idx + 1) < pcf.length) && ((sumSoFarP - pcf[idx].P + pcf[idx+1].P) <= GP))
			{
				return SubsetSum(pcf, sumSoFarP - pcf[idx].P, sumSoFarC - pcf[idx].C, sumSoFarF - pcf[idx].F, GP, GC, GF, idx+1);
			}
		}
		else
		{
			if( (idx < pcf.length) && ((sumSoFarP + pcf[idx].P) <= GP))
			{
				for( int m = idx; m < pcf.length; m++ )
				{
					if(sumSoFarP + pcf[m].P <= GP)
					{						
						if(SubsetSum(pcf, sumSoFarP + pcf[m].P, sumSoFarC + pcf[m].C, sumSoFarF + pcf[m].F, GP, GC, GF, m+1))
							return true;
					}
				}
			}
		}
		return false;
	}

}

class PCF implements Comparable<PCF> {
	int P;
	int C;
	int F;
	public PCF(int P, int C, int F)
	{
		this.P = P;
		this.C = C;
		this.F = F;
	}
	public int compareTo(PCF a)
	{
			return this.P - a.P;
	}
}

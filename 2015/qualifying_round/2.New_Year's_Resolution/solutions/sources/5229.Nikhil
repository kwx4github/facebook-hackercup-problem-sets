#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>

using namespace std;

#define fori(i,a,b) for(int i=a; i<=b; ++i)
#define ford(i,a,b) for(int i=a; i>=b; --i)
#define rep(i,n) for(int i=0; i<n; ++i)
#define dbg(str) //cout << str << endl

typedef long long ll;

class food {

public:
	// init
	food() {
		p = 0;
		c = 0;
		f = 0;
	}
	food (int p, int c, int f) {
		this->p = p;
		this->c = c;
		this->f = f;
	}

	// operator overloading
	void operator- (const food &b) {
		this->p -= b.p;
		this->c -= b.c;
		this->f -= b.f;
	}

	bool operator< (const food &b) {
		if (this->p <= b.p && this->c <= b.c && this->f <= b.f) {
			dbg("value is less than or equal to passed");
			return true;
		}
		else {
			dbg("value is greater than passed")
			return false;
		}
	}

	bool operator> (const food &b) {
		if (this->p >= b.p && this->c >= b.c && this->f >= b.f) {
			dbg("value is greater than or equal to passed");
			return true;
		}
		else {
			dbg("value is less than passed")
			return false;
		}
	}

	bool operator== (const food &b) {
		if (this->p == b.p && this->c == b.c && this->f == b.f) {
			dbg("value is equal to passed");
			return true;
		}
		else {
			dbg("value is not equal to passed")
			return false;
		}
	}
	// END - operator overloading


	// Other functions
	bool isZero() {
		if (0 == this->p && 0 == this->c && 0 == this->f) {
			dbg("value is zero");
			return true;
		}
		return false;
	}

	void Print() {
		cout << "p = " << this->p << " c = " << this->c << " f = " << this->f << endl;
	}

	void Subtract(const food &b) {
		this->p -= b.p;
		this->c -= b.c;
		this->f -= b.f;
	}

public:
	int p;
	int c;
	int f;
};

food food_array[20];


bool canMeet(int pos, int n, food *calorie_left) {
	if (true == calorie_left->isZero()) {
		return true;
	}
	if (n == pos)
		return false;

	bool result = false;

	//pos consumed
	if (food_array[pos] < *calorie_left) {
		food *new_calorie_left = new food(calorie_left->p, calorie_left->c, calorie_left->f);
		new_calorie_left->Subtract(food_array[pos]);
		dbg("new calorie_left = " << new_calorie_left->Print());
		result |= canMeet(pos+1, n, new_calorie_left);
	}

	//pos skipped
	result |= canMeet(pos+1, n, calorie_left);
	dbg("result = " << result << calorie_left->Print());
	return result;
}

int main(int argc, char *argv[]) {
	ifstream fin;
	fin.open(argv[1]);

	ofstream fout;
	fout.open("result.out", ios::out);

	int t;
	fin >> t;

	rep (i, t) {
		int tmp_p, tmp_c, tmp_f, n;
		fin >> tmp_p >> tmp_c >> tmp_f;
		food *calorie_left = new food(tmp_p, tmp_c, tmp_f);
		
		fin >> n;
		rep(j, n) {
			fin >> tmp_p >> tmp_c >> tmp_f;
			food_array[j].p = tmp_p;
			food_array[j].c = tmp_c;
			food_array[j].f = tmp_f;
		}

		// debug print
		#if 0
		dbg("debug print parsing");
		calorie_left->Print();
		rep (j, n) {
			food_array[j].Print();
		}
		#endif

		cout << "Case #" << (i+1) << ": ";
		fout << "Case #" << (i+1) << ": ";
		if (true == canMeet(0, n, calorie_left)) {
			cout << "yes" << endl;
			fout << "yes" << endl;
		}
		else {
			cout << "no" << endl;
			fout << "no" << endl;
		}
	}
}
/*
 *
 * @author Mukesh Singh
 *
 */

/* Finding_the_Minimum_Window_in_S_which_Contains_All_Elements_from_T */

import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
@SuppressWarnings("unchecked")
public class ABC
{	
	int ar[] ;
	//solve test cases
	void solve() throws Exception 
	{
		int T = in.nextInt();
		for(int i = 1 ; i <= T ; i++)		
			solveTest(i);
	}
	void solveTest(int tid) throws Exception
	{
		out.print("Case #"+tid+": ");
		int gp = in.nextInt();
		int gc = in.nextInt();
		int gf = in.nextInt();
		int n = in.nextInt();
		int ar[][] = new int[n][3] ;
		for(int i = 0 ; i< n ; i++ )
		{
			ar[i][0]= in.nextInt();
			ar[i][1] = in.nextInt();
			ar[i][2] = in.nextInt();
		}
		for(int i = 0 ; i < (0x1<<n ) ; i++)
		{
			int p , c , f ;
			p = 0 ; c = 0 ;f = 0 ;
			int a = i ;
			int idx = 0;
			while(a>0)
			{
				if(a%2== 1 )
				{
					p += ar[idx][0];
					c += ar[idx][1];
					f += ar[idx][2];
				}
				a = a/2 ;
				idx++ ;
			} 
			if(p==gp && c == gc && f==gf)
			{
				out.println("yes");
				return ;
			}
		}
		out.println("no");
	}
	//@ main function
	public static void main(String[] args) throws Exception 
	{
		new ABC();
	}
	
	InputReader in;
	PrintStream out ;
	DecimalFormat df ;
	ABC() 
	{
		try 
		{
			File defaultInput = new File("file.in");
			if (defaultInput.exists()) 
				in = new InputReader("file.in");
			else 
				in = new InputReader();
			defaultInput = new File("file.out");
			if (defaultInput.exists()) 
				out = new PrintStream(new FileOutputStream("file.out"));
			else
				out = new PrintStream(System.out);
			df = new DecimalFormat("######0.00");
			solve();
			out.close();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
			System.exit(261);
		}
	}
	
	class InputReader {
		BufferedReader reader;
		StringTokenizer tokenizer;
		
		InputReader() {
			reader = new BufferedReader(new InputStreamReader(System.in));
		}
		
		InputReader(String fileName) throws FileNotFoundException {
			reader = new BufferedReader(new FileReader(new File(fileName)));
		}
		
		String readLine() throws IOException {
			return reader.readLine();
		}
		
		String nextToken() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens())
				tokenizer = new StringTokenizer(readLine());
			return tokenizer.nextToken();
		}
		
		boolean hasMoreTokens() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				String s = readLine();
				if (s == null)
					return false;
				tokenizer = new StringTokenizer(s);
			}
			return true;
		}
		
		int nextInt() throws NumberFormatException, IOException {
			return Integer.parseInt(nextToken());
		}
		
		long nextLong() throws NumberFormatException, IOException {
			return Long.parseLong(nextToken());
		}
		
		double nextDouble() throws NumberFormatException, IOException {
			return Double.parseDouble(nextToken());
		}
	}
}

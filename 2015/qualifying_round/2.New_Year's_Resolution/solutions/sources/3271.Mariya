#include <algorithm>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <sstream>

using namespace std;

class FoodItem {
public:
  vector<int> amt;
  FoodItem(int n1 = 0, int n2 = 0, int n3 = 0) {
    amt.resize(3);
    amt[0] = n1;
    amt[1] = n2;
    amt[2] = n3;
  }
  void Read() {
    cin >> amt[0] >> amt[1] >> amt[2];
  }
};

bool operator<(const FoodItem& a, const FoodItem& b) {
  return a.amt[0] < b.amt[0] || a.amt[0] == b.amt[0] && (a.amt[1] < b.amt[1] || a.amt[1] == b.amt[1] && a.amt[2] < b.amt[2]);
}

FoodItem operator+(const FoodItem& a, const FoodItem& b) {
  return FoodItem(a.amt[0] + b.amt[0], a.amt[1] + b.amt[1], a.amt[2] + b.amt[2]);
}

bool not_greater(const FoodItem& a, const FoodItem& mx) {
  return (a.amt[0] <= mx.amt[0] && a.amt[1] <= mx.amt[1] && a.amt[2] <= mx.amt[2]);
}

void solve(int ind) {
    // input
    FoodItem total;
    total.Read();
    int N;
    cin >> N;
    vector<FoodItem> items(N);
    for (int i = 0; i < N; ++i) {
      items[i].Read();
    }
    
    set<FoodItem> sums, new_sums;
    sums.insert(FoodItem(0,0,0));
    for (int i = 0; i < N; ++i) {
      new_sums.clear();
      for (set<FoodItem>::iterator it = sums.begin(); it != sums.end(); ++it) {
	FoodItem new_item = items[i] + *it;
	if (not_greater(new_item, total))
	  new_sums.insert(new_item);
      }
      sums.insert(new_sums.begin(), new_sums.end());
    }
    // output
    cout << "Case #" << ind << ": " << ((sums.find(total) != sums.end()) ? "yes" : "no") << endl;
}

int main() {
    int T;
    cin >> T;
    for (int i = 1; i <= T; ++i) {
        solve(i);
    }
}
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <string>
using namespace std;

int A[32];
int B[32];
int C[32];
int AT, BT, CT;
int T;
int N;

// TODO Make a backtrack recursive version to verify
bool backtrack(int ax, int bx, int cx, int i) {
    if (i == N) {
        if (ax == AT && bx == BT && cx == CT) {
            return true;
        } else {
            return false;
        }
    } else {
        return backtrack(ax + A[i], bx + B[i], cx + C[i], i + 1) || backtrack(ax, bx, cx, i + 1);
    }
}

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cin >> T;
    for (int t = 0; t < T; ++t) {
        cin >> AT >> BT >> CT;
        cin >> N;
        for (int i = 0; i < N; ++i) {
            cin >> A[i] >> B[i] >> C[i];
        }
        bool OK = false;
        for (int i = 0; i < (1 << N); i++) {
            int AX = 0;
            int BX = 0;
            int CX = 0;
            int x = i;
            for (int j = N - 1; j >= 0; j--) {
                AX += (x % 2) * A[j];
                BX += (x % 2) * B[j];
                CX += (x % 2) * C[j];
                x /= 2;
            }
            if (AX == AT && BX == BT && CX == CT) {
                OK = true;
            }
        }
        if (OK) {
            cout << "Case #" << (t + 1) << ": yes" << endl;
        } else {
            cout << "Case #" << (t + 1) << ": no" << endl;
        }
        /*if (backtrack(0, 0, 0, 0)) {
            cout << "Case #" << (t + 1) << ": yes" << endl;
        } else {
            cout << "Case #" << (t + 1) << ": no" << endl;
        }*/
    }
}

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <tuple>
#include <vector>
using namespace std;

typedef tuple<int, int, int> Eat;

int main() {
//  std::freopen("/Users/kuznetsovs/Hobby/qt-creator/Console/1.txt", "rb", stdin);
  std::freopen("/Users/kuznetsovs/Hobby/qt-creator/Console/new_years_resolution.txt", "rb", stdin);
  std::freopen("/Users/kuznetsovs/Hobby/qt-creator/Console/new_years_resolution.out", "wb", stdout);
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int T;
  cin >> T;
  for (int tc = 0; tc < T; ++tc) {
    Eat dst;
    cin >> get<0>(dst) >> get<1>(dst) >> get<2>(dst);

    int N;
    cin >> N;

    vector<Eat> eats(N);
    for (Eat& eat : eats) {
      cin >> get<0>(eat) >> get<1>(eat) >> get<2>(eat);
    }

    bool ok = false;
    int NN = 1 << N;
    for (int mask = 0; mask < NN; ++mask) {
      Eat cand = {0, 0, 0};
      for (int i = 0; i < N; ++i) {
        if ((1 << i) & mask) {
          get<0>(cand) += get<0>(eats[i]);
          get<1>(cand) += get<1>(eats[i]);
          get<2>(cand) += get<2>(eats[i]);
        }
      }

      if (cand == dst) {
        ok = true;
        break;
      }
    }

    cout << "Case #" << tc + 1 << ": ";
    cout << (ok ? "yes" : "no");
    cout << '\n';
  }

  return 0;
}

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <map>

using namespace std;

typedef pair< int, pair< int, int > > foodtype;

bool is_good(foodtype food) {
	return (food.first <= 1000 && food.second.first <= 1000 && food.second.second <= 1000);
}

foodtype plus_food(foodtype a, foodtype b) {
	return make_pair(a.first + b.first, make_pair(a.second.first + b.second.first, a.second.second + b.second.second));
}


int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	ios_base::sync_with_stdio(false);


	foodtype need;

	int T;
	int n;

	cin >> T;


	for (int TT = 0; TT < T; ++TT) {
		cin >> need.first >> need.second.first >> need.second.second;
		bool can = false;

		int n;
		cin >> n;

		map<foodtype, int> foods;

		for (int i = 0; i < n; ++i) {
			foodtype now;
			cin >> now.first >> now.second.first >> now.second.second;

			vector<foodtype> add_food;

			for (auto& cc : foods) {
				if (is_good(plus_food(cc.first, now))) {
					add_food.push_back(plus_food(cc.first, now));
				}
			}

			for (int j = 0; j < add_food.size(); ++j) {
				foods[add_food[j]] = 1;
				if (add_food[j] == need) {
					can = true;
				}
			}

			foods[now] = 1;
			if (now == need) {
				can = true;
			}
		}

		cout << "Case #" << (TT + 1) << ": " << (can ? "yes" : "no") << endl;
	}
}
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Formatter;
import java.util.Scanner;

class Node implements Comparable<Node>{

	int p,c,f;
	Node(int p,int c,int f){
		this.p = p;
		this.c = c;
		this.f = f;
	}
	
	@Override
	public int compareTo(Node node) {
		if(this.p-node.p==0){
			if(this.c-node.c==0)
				return this.f - node.f;
			return this.c - node.c;
		}
		return this.p-node.p;
	}
}

public class Sol2 {
	static int gp ;
	static int gc ;
	static int gf ;
	static boolean found = false;
	
	public static void main(String args[]) throws FileNotFoundException{
		Scanner scanner = new Scanner(new File("new_years_resolution.txt"));
		Formatter formatter = new Formatter("output");
		formatter.flush();
		int total = scanner.nextInt();
		Node[] node;
		for(int i=0;i<total;i++){
			gp = scanner.nextInt();
			gc = scanner.nextInt();
			gf = scanner.nextInt();
			int cases = scanner.nextInt();
			node = new Node[cases];
			for(int j=0;j<cases;j++){
				node[j] = new Node(scanner.nextInt(),scanner.nextInt(),scanner.nextInt());
			}
			Arrays.sort(node);
			found = false;
			boolean isIt = isAvailable(node,gp,gc,gf);
			formatter.format("Case #%d: %s\n", i+1,isIt?"yes":"no");
		}
		formatter.close();
		scanner.close();
	}

	private static boolean isAvailable(Node[] node, int gp, int gc, int gf) {
		int tempP = 0, tempC = 0, tempF = 0;
		for(int i=0;i<node.length;i++){
			tempP+=node[i].p;
			tempC+=node[i].c;
			tempF+=node[i].f;
		}
		Node myNode = new Node(0,0,0);
		if(tempP<gp||tempC<gc||tempF<gf)
			return false;
		new Sol2().finder(node,myNode,0,node.length-1);
		return found;
	}

	private void finder(Node[] node, Node myNode, int start,int end) {
		for(int i=end;i>=start;i--){
			if(myNode.p+node[i].p>gp||myNode.c+node[i].c>gc||myNode.f+node[i].f>gf){
				end--;
			}else if(myNode.p+node[i].p<gp||myNode.c+node[i].c<gc||myNode.f+node[i].f<gf){
				break;
			}else{
				found = true;
				return;
			}
		}
		for(int i=start;i<=end;i++){
			myNode.p += node[i].p;
			myNode.c += node[i].c;
			myNode.f += node[i].f;
			new Sol2().finder(node, myNode, i+1, end);
			if(found){
				return;
			}else{
				myNode.p -= node[i].p;
				myNode.c -= node[i].c;
				myNode.f -= node[i].f;
			}
		}
	}

}

#include<iostream>
#include<vector>

using namespace std;

struct food {
	int p;
	int c;
	int f;
};

int n;
food goal;

bool f(vector<food>& rest, vector<food>& v, int p, food& act)
{
	if (act.p+rest[p].p < goal.p || act.c+rest[p].c < goal.c || act.f+rest[p].f < goal.f) return false;
	if (act.p > goal.p || act.c > goal.c || act.f > goal.f) return false;
	if (act.p == goal.p && act.c == goal.c && act.f == goal.f) return true;
	if (p == n) return false;
	
	act.p+=v[p].p;
	act.c+=v[p].c;
	act.f+=v[p].f;
	if (f(rest, v, p+1, act)) return true;
	act.p-=v[p].p;
	act.c-=v[p].c;
	act.f-=v[p].f;
	return f(rest, v, p+1, act);
}

int main(){
	int T;
	cin >> T;
	for (int c = 1; c <= T; c++)
	{
		cin >> goal.p >> goal.c >> goal.f;
		cin >> n;
		vector<food> v (n);
		vector<food> rest (n);
		food total;
		total.p = total.c = total.f = 0;
		for (int i = 0; i < n; i++)
		{
			cin >> v[i].p >> v[i].c >> v[i].f;
			total.p += v[i].p;
			total.c += v[i].c;
			total.f += v[i].f;
		}
		rest[0] = total;
		for (int i = 1; i < n; i++)
		{
			rest[i].p = rest[i-1].p-v[i-1].p;
			rest[i].c = rest[i-1].c-v[i-1].c;
			rest[i].f = rest[i-1].f-v[i-1].f;
		}
		food act;
		act.p = act.c = act.f = 0;
		bool res = f(rest, v, 0, act);
		cout << "Case #" << c << ": ";
		if (res) cout << "yes";
		else cout << "no";
		cout << endl;
	}
}

import Data.List.Split

data Food = Food { protein :: Int, carbs :: Int, fat :: Int } deriving (Show)

instance Num Food where
	Food a1 b1 c1 + Food a2 b2 c2 = Food (a1+a2) (b1+b2) (c1+c2)

readFood :: IO Food
readFood = do x <- getLine
	      let f = map (read :: String -> Int) $ splitOn " " x in return $ Food (f !! 0) (f !! 1) (f !! 2)

allSums :: Num a => [a] -> [a]
allSums [x] = [x]
allSums (x:xs) = [x] ++ allSums xs ++ map (x+) (allSums xs)


solveProblem i = do req <- readFood
		    x <- getLine
		    num <- readIO x :: IO Int
		    foods <- mapM (const readFood) [1..num]
		    fitfoods <- return $ filter (\x -> protein x <= protein req && carbs x <= carbs req && fat x <= fat req) foods
		    combos <- return $ allSums fitfoods
		    goodcombos <- return $ filter (\x -> protein x == protein req && carbs x == carbs req && fat x == fat req) combos
		    if length goodcombos > 0 then putStrLn $ "Case #"++show i++": yes" else putStrLn $ "Case #"++show i++": no"

runTimes n f = runTimes' [1..n] f
	where
		runTimes' [] _ = return ()
		runTimes' (n:xs) f = f n >> runTimes' xs f

main = do x <- getLine
	  num <- readIO x :: IO Int
	  runTimes num $ solveProblem

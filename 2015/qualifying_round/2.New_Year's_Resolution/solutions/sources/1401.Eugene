#define _CRT_SECURE_NO_WARNINGS

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include "stdio.h"
using namespace std;

const int MAX = 1000;
vector<int> a[20][MAX + 10][MAX + 10];

void solve_case(int tc)
{
	bool ans = false;
	int g1, g2, g3;
	cin >> g1 >> g2 >> g3;
	int n;
	cin >> n;
	memset(a, 0, sizeof(a));
	for (int i = 0; i < n; ++i)
	{
		int v1, v2, v3;
		cin >> v1 >> v2 >> v3;

		a[i][v1][v2].push_back(v3);

		if (i > 0)
		for (int j = 0; j < MAX + 1; ++j)
			for (int k = 0; k < MAX + 1; ++k)
			{
				int t1 = j - v1;
				int t2 = k - v2;
				for (int r = 0; r < a[i - 1][j][k].size(); ++r)
					a[i][j][k].push_back(a[i - 1][j][k][r]);

				if (t1 >= 0 && t2 >= 0)
				{
					for (int tt = 0; tt < a[i - 1][t1][t2].size(); ++tt)
					{
						a[i][j][k].push_back(a[i - 1][t1][t2][tt] + v3);
					}
				}
			}
	}
	for (int i = 0; i < a[n - 1][g1][g2].size(); ++i)
		if (a[n - 1][g1][g2][i] == g3)
			ans = true;
	cout << "Case #" << tc << ": " << (ans ? "yes" : "no")  << endl;
}

int main()
{

#ifndef __OLIMP__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int T;
	scanf("%d", &T);

	for (int tc = 1; tc <= T; tc++)
		solve_case(tc);

	return 0;
}
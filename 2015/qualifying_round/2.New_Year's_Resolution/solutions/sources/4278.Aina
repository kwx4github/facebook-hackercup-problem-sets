#include <iostream>
#include <vector>
using namespace std;

bool posible;

void backtrack (int q, int n, vector<int> & nutrients, vector < vector <int> > & aliments, vector<bool> & eating){
	//If has solution cut
	if (posible) return;
	//Base case
	if (q == n){
		int nut0 = 0;
		int nut1 = 0;
		int nut2 = 0;
		for (int i = 0; i < n; ++i){
			if (eating[i]){
				nut0 = nut0 + aliments[i][0];
				nut1 = nut1 + aliments[i][1];
				nut2 = nut2 + aliments[i][2];
			}
		}
		if ((nut0 == nutrients[0]) and (nut1 == nutrients[1]) and (nut2 == nutrients[2])) posible = true;
	}
	//Recursive case
	else{
			eating[q] = true;
			backtrack (q+1, n, nutrients, aliments, eating);
			eating[q] = false;
			backtrack (q+1, n,nutrients, aliments, eating);
	}
}

int main(){
	int T;
	cin >> T;
	for (int i = 1; i<= T; ++i){
		posible = false;
		vector<int> nutrients (3);
		for (int j = 0; j < 3 ; ++j) cin >> nutrients[j];
		int n;
		cin >> n;
		vector < vector <int> > aliments (n, vector<int> (3)); //Files -> aliments // Columnes -> Nutrients
		for (int j = 0; j < n; ++j){
			for (int k = 0; k < 3; ++k){
				cin >> aliments[j][k];
			}
		}
		vector<bool> eating (n);
		backtrack (0, n, nutrients, aliments, eating);
		if (posible) cout << "Case #" << i << ": yes" << endl;
		else cout << "Case #" << i << ": no" << endl;
	}

}
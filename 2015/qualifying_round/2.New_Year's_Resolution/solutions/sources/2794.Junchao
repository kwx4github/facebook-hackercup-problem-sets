#include <stdio.h>
#include <math.h>
#include <assert.h>

#include <string.h>
#include <set>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <algorithm>
#include <string>
#include <iostream>
using namespace std;

struct ft
{
	int p,f,c;
	ft():p(0),f(0),c(0){}
	ft(int p, int f, int c):p(p),f(f),c(c){}
	bool operator< ( const ft & x )const
	{
		return x.p < p || x.p == p && x.f < f || x.p ==p && x.f == f && x.c < x.c;
	}
};

int p[1000],c[1000],f[1000];
		int n;
int gp,gc,gf;
set< ft > id;
int solve()
{

	id.clear();
	vector< ft > q;
	q.push_back( ft(0,0,0) );
	for( int i = 0; i < n; ++i)
	{
		int cnt = q.size();
		for( int j = 0; j < cnt; ++j )
		{
			ft x;
			x.p = q[j].p + p[i];
			x.c = q[j].c + c[i];
			x.f = q[j].f + f[i];
			if( id.find( x ) == id.end() )
			{
				id.insert( x );
				q.push_back( x );
		//		printf("get p %d c %d f %d\n",x.p,x.c,x.f);
				if( x.p == gp && x.c == gc && x.f == gf )
				{
					return 1;
				}
			}
		}
	}
	return 0;
}

int main()
{
	int T;
	scanf("%d",&T);
	for( int C= 0; C < T; ++C )
	{
		scanf("%d%d%d",&gp,&gc,&gf);
		scanf("%d",&n);
		for( int i = 0; i < n ;++i )
		{
			scanf("%d%d%d",&p[i],&c[i],&f[i]);
		}

		int ans = solve();
		
		printf("Case #%d: %s\n", C + 1, ans == 1?"yes":"no" );
	}
}

import java.io.*;
import java.math.BigInteger;
import java.util.*;
import java.util.List;
import java.util.regex.Matcher;

public class Main {
    private static StringTokenizer st;
    private static BufferedReader br;
    public static long MOD = 1000000007;

    public static void print(Object x) {
        System.out.println(x + "");
    }
    public static void printArr(long[] x) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < x.length; i++) {
            s.append(x[i] + " ");
        }
        print(s);
    }
    public static void printArr(int[] x) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < x.length; i++) {
            s.append(x[i] + " ");
        }
        print(s);
    }
    public static String join(Collection<?> x, String space) {
        if (x.size() == 0) return "";
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (Object elt : x) {
            if (first) first = false;
            else sb.append(space);
            sb.append(elt);
        }
        return sb.toString();
    }

    public static String nextToken() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String line = br.readLine();
            st = new StringTokenizer(line.trim());
        }
        return st.nextToken();
    }
    public static int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }
    public static long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }
    public static List<Integer> nextInts(int N) throws IOException {
        List<Integer> ret = new ArrayList<Integer>();
        for (int i = 0; i < N; i++) {
            ret.add(nextInt());
        }
        return ret;
    }

    private static int[] prot;
    private static int[] carb;
    private static int[] fat;

    public static boolean possible(int pTarget, int cTarget, int fTarget, int i) {
        if (pTarget < 0) return false;
        if (cTarget < 0) return false;
        if (fTarget < 0) return false;
        if (i < 0) return (pTarget == 0 && cTarget == 0 && fTarget == 0);
        return possible(pTarget, cTarget, fTarget, i - 1) ||
                possible(pTarget-prot[i], cTarget-carb[i], fTarget-fat[i], i - 1);
    }

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));

        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            int pTarg = nextInt();
            int cTarg = nextInt();
            int fTarg = nextInt();
            int n = nextInt();
            prot = new int[n];
            carb = new int[n];
            fat = new int[n];
            for (int i = 0; i < n; i++) {
                prot[i] = nextInt();
                carb[i] = nextInt();
                fat[i] = nextInt();
            }
            System.out.printf("Case #%d: %s%n", t, possible(pTarg, cTarg, fTarg, n - 1) ? "yes" : "no");
        }
    }
}

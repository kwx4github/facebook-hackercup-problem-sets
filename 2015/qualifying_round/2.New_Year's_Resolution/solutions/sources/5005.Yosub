import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(new File(args[0]));
        int count = scanner.nextInt();

        for (int i = 1; i <= count; i++) {
            int gp = scanner.nextInt();
            int gc = scanner.nextInt();
            int gf = scanner.nextInt();
            int numFood = scanner.nextInt();
            int[] p = new int[numFood];
            int[] c = new int[numFood];
            int[] f = new int[numFood];
            for (int j = 0; j < numFood; j++) {
                p[j] = scanner.nextInt();
                c[j] = scanner.nextInt();
                f[j] = scanner.nextInt();
            }

            boolean result = solve(gp, gc, gf, 0, p, c, f);
            memoize.clear();
            System.out.println(String.format("Case #%d: %s", i, result? "yes" : "no"));
        }
    }

    private static Map<String, Boolean> memoize = new HashMap<>();

    private static boolean solve(int gp, int gc, int gf, int i, int[] p, int[] c, int[] f) {
        if (memoize.containsKey(buildKey(gp, gc, gf, i))) {
            return memoize.get(buildKey(gp, gc, gf, i));
        }

        if (gp == 0 && gc == 0 && gf == 0) {
            memoize.put(buildKey(gp, gc, gf, i), true);
            return true;
        } else if (gp < 10 || gc < 10 || gf < 10) { // Min p, c, f are 10
            memoize.put(buildKey(gp, gc, gf, i), false);
            return false;
        }

        if (i >= p.length) {
            memoize.put(buildKey(gp, gc, gf, i), false);
            return false;
        }
        
        // Skip i'th food OR include i'th food
        boolean result = solve(gp, gc, gf, i + 1, p, c, f) || 
                         solve(gp - p[i], gc - c[i], gf - f[i], i + 1, p, c, f);
        memoize.put(buildKey(gp, gc, gf, i), result);
        return result;
    }

    private static String buildKey(int gp, int gc, int gf, int i) {
        return String.format("%d %d %d %d", gp, gc, gf, i);
    }
}

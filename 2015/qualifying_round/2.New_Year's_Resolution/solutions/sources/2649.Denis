#include <iostream>
#include <vector>
using namespace std;

struct CAL
{
	int p, c, f;
};

bool check(CAL target, vector<CAL> data)
{
	CAL min, sum;
	min.p = min.c = min.f = 10000;

	for (vector<CAL>::iterator it=data.begin(); it!=data.end(); ++it)
	{
		if ((*it).p < min.p) min.p = (*it).p;
		if ((*it).c < min.c) min.c = (*it).c;
		if ((*it).f < min.f) min.f = (*it).f;

		sum.p += (*it).p;
		sum.c += (*it).c;
		sum.f += (*it).f;
	}

	return (sum.p >= target.p) || (sum.c >= target.c) || (sum.f >= target.f) || (min.p <= target.p) || (min.c <= target.c) || (min.f <= target.f);
}

bool solve(CAL target, vector<CAL> data)
{
	if (!check(target, data)) return false;

	for (vector<CAL>::iterator it=data.begin(); it!=data.end(); ++it)
	{
		if ((*it).p == target.p && (*it).c == target.c && (*it).f == target.f)
			return true;

		if ((*it).p < target.p && (*it).c < target.c && (*it).f < target.f)
		{
			CAL t;
			t.p = target.p - (*it).p;
			t.c = target.c - (*it).c;
			t.f = target.f - (*it).f;

			vector<CAL> d(it, data.end());

			if (solve(t, d))
				return true;
		}
	}

	return false;
}

int main() {
	int T;
	cin >> T;

	for (int t=1; t<=T; t++)
	{
		CAL target;
		cin >> target.p >> target.c >> target.f;

		int N;
		cin >> N;

		vector<CAL> data;
		vector<CAL>::iterator it;
		for (int i=0; i<N; i++)
		{
			CAL z;
			cin >> z.p >> z.c >> z.f;

			bool b = false;
			for (it=data.begin(); it!=data.end(); ++it)
			{
				if (z.p > (*it).p)
				{
					data.insert(it, z);
					b = true;
					break;
				}
				else if (z.p == (*it).p)
				{
					if (z.c > (*it).c)
					{
						data.insert(it, z);
						b = true;
						break;
					}
					else if (z.p == (*it).p)
					{
						if (z.f > (*it).f)
						{
							data.insert(it, z);
							b = true;
							break;
						}
					}
				}
			}
			if (!b) data.push_back(z);
		}

		bool res = solve(target, data);
		cout << "Case #" << t << ": " << ((res) ? "yes" : "no") << endl;
	}
	return 0;
}


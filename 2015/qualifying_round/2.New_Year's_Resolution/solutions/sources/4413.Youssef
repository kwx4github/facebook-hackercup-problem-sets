import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

public class NewYearsResolution {

	public static void main(String[] args) {
		try {
			BufferedReader br = new BufferedReader(
					new FileReader(
							"/Users/youssefhassan/Documents/workspace/HiredInTech/src/new_years_resolution.txt"));

			String line = br.readLine();

			StringBuilder outputBuilder = new StringBuilder();
			int T = Integer.parseInt(line);
			for (int t = 0; t < T; t++) {
				String[] nutr = br.readLine().split(" ");
				int pReq = Integer.parseInt(nutr[0]);
				int cReq = Integer.parseInt(nutr[1]);
				int fReq = Integer.parseInt(nutr[2]);
				
				int foodsNum = Integer.parseInt(br.readLine());
				int[] proteins = new int[foodsNum];
				int[] carbs = new int[foodsNum];
				int[] fat = new int[foodsNum];
				
				for(int i = 0; i < foodsNum; i++){
					nutr = br.readLine().split(" ");
					proteins[i] = Integer.parseInt(nutr[0]);
					carbs[i] = Integer.parseInt(nutr[1]);
					fat[i] = Integer.parseInt(nutr[2]);
				}
				
				boolean feasible = sumsTo(proteins, fat,carbs, pReq, fReq, cReq);
				outputBuilder.append("Case #" + (t + 1));
				outputBuilder.append(" " + (feasible?"yes":"no"));
				outputBuilder.append("\n");
			}

			BufferedWriter writer = new BufferedWriter(
					new FileWriter(
							new File(
									"/Users/youssefhassan/Documents/workspace/HiredInTech/src/out.txt")));
			// for (line : aLines) {
			writer.write(outputBuilder.toString());
			writer.close();
			// writer.newLine();
			// }

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	public static boolean sumsTo(int[] array1, int[] array2, int[] array3, int target1, int target2, int target3)
	{
		int curSum1;
		int curSum2;
		int curSum3;
		for(int i = 1; i < (1<<array1.length); i++){
			curSum1 = curSum2 = curSum3 = 0;
			
			int n = i;
			int curbit = 0;
			while(n > 0){
				if((n & (1<<curbit)) != 0){
					curSum1 += array1[curbit];
					curSum2 += array2[curbit];
					curSum3 += array3[curbit];
				}
				n &= ~(1 << curbit);
				curbit++;
			}
			if(curSum1 == target1 && curSum2 == target2 && curSum3 == target3) {
				return true;
			}
		}
		return false;
	}

}

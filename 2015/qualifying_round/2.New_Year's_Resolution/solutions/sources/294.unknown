import org.omg.CORBA.IRObject;

import java.io.*;
import java.util.*;

/**
 * Created by shamir0xe on 1/5/2015 AD.
 */

public class Solution {

    public static void main(String[] args) {
        MyInput in;
        try {
            in = new MyInput(new FileInputStream(new File("input.txt")));
        }
        catch (IOException e) {
            throw new UnknownError();
        }
        PrintWriter out;
        try {
            out = new PrintWriter(new FileOutputStream(new File("output.txt")));
        }
        catch (IOException e) {
            throw new UnknownError();
        }

//        MyInput in = new MyInput(System.in);
//        PrintWriter out = new PrintWriter(System.out);

        int test = in.nextInt();
        for (int testCase = 0; testCase < test; testCase++) {
            int Gp = in.nextInt();
            int Gc = in.nextInt();
            int Gf = in.nextInt();
            int n = in.nextInt();
            int[][] foods = new int[n][];
            for (int i = 0; i < n; i++) {
                int p = in.nextInt();
                int c = in.nextInt();
                int f = in.nextInt();
                foods[i] = new int[] {p, c, f};
            }

            boolean can = false;
            for (int mask = 0; mask < (1 << n); mask++) {
                int[] cur = new int[3];
                for (int i = 0; i < n; i++) {
                    if ((mask >> i & 1) == 1) {
                        for (int j = 0; j < 3; j++) {
                            cur[j] += foods[i][j];
                        }
                    }
                }
                if (cur[0] == Gp && cur[1] == Gc && cur[2] == Gf) {
                    can = true;
                    break;
                }
            }
            out.println("Case #" + (testCase + 1) + ": " + (can ? "yes" : "no"));
        }

        out.flush();
    }
}

class MyInput {
    private BufferedReader br;
    private StringTokenizer st;

    MyInput (InputStream inputStream) {
        br = new BufferedReader(new InputStreamReader(inputStream));
        st = null;
    }

    public String next() {
        if (st == null || !st.hasMoreElements()) {
            try {
                String line = br.readLine();
                while (line == null || line.equals("")) {
                    throw new UnknownError();
                }
                st = new StringTokenizer(line);
            } catch (IOException e) {
                throw new UnknownError();
            }
        }
        return st.nextToken();
    }

    public String nextLine() {
        try {
            return br.readLine();
        }
        catch (IOException e) {
            throw new UnknownError();
        }
    }

    public void readEmptyLine() {
        try {
            br.readLine();
        }
        catch (IOException e) {
            throw new UnknownError();
        }
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

}


// Dark Side of Elephant
// Askar

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <cstring>
#include <algorithm>
#include <utility>
#include <tuple>
#include <complex>
#include <cmath>
#include <sys/types.h>
#include <unistd.h>
#include <cassert>

using namespace std;

#define FOR(i, N) for(auto i=(N)-(N); i<(N); i++)
#define FOR1(i, N) for(auto i=(N)-(N)+1; i<=(N); i++)
#define FOREACH(it, a) for(auto it=(a).begin(); it!=(a).end(); it++)
#define MAXIM(a,b) a=max(a, static_cast<__typeof__(a)>(b))
#define MINIM(a,b) a=min(a, static_cast<__typeof__(a)>(b))
#define beginend(a) (a).begin(), (a).end()
#define pf printf
#define sf scanf
#define mp make_pair
#define mt make_tuple
#define pass
#define sqr(x) ((x)*(x))
typedef long long ll;
typedef pair<long long, long long> pll;
typedef pair<int, int> pii;
const long long INF = 1e9;
const double EPS = 1e-9;

#define dbg if(false)
#ifdef EBUG
    #undef dbg
    #define dbg if(true)
#endif

#define epf(...) fprintf(stderr, __VA_ARGS__)
#define dpf(...) dbg epf(__VA_ARGS__)
#define db(x) dbg cerr << #x << ":\t" << (x) << endl 

inline void ans(const int t, const bool val){
    cout << "Case #" << t << ": " << (val?"yes":"no") << endl;
}

struct food{
    int p, c, f;

    food(){
        p = c = f = 0;
    }

    food(const int _p, const int _c, const int _f){
        p = _p;
        c = _c;
        f = _f;
    }

    food operator+(const food b) const{
        return food(this->p + b.p, this->c + b.c, this->f + b.f);
    }

    bool operator==(const food b) const{
        return this->p == b.p && this->c && b.c && this->f == b.f;
    }

    bool operator>(const food b) const{
        return this->p > b.p || this->c > b.c || this->f > b.f;
    }
};

ll total_calls;

bool is_possible(const vector<food> &foods, const int n, const food prev, 
        const food &goal){
    dbg total_calls++;
    if(n == (int)foods.size()) return prev == goal;
    if(prev == goal) return true;
    if(prev > goal) return false;

    return is_possible(foods, n+1, prev, goal) || 
        is_possible(foods, n+1, prev + foods[n], goal);
}

int main(){
    int T;
    cin >> T;
    FOR1(t, T){
        dbg total_calls = 0;
        food goal;
        cin >> goal.p >> goal.c >> goal.f;
        int N;
        cin >> N;
        vector<food> foods(N);
        FOR(i, N){
            int p, c, f;
            cin >> p >> c >> f;
            foods[i] = food(p, c, f);
        }

        ans(t, is_possible(foods, 0, food(0, 0, 0), goal));
        db(total_calls);
    }
}

#include<vector>
#include<cstdio>
using namespace std; 



vector<short> table[ 1 << 20 ] ; 
vector<short> zero ; 

vector< vector < short> > items; 
vector<short> target; 
bool result ; 

void zerothetable(){
	for ( int i = 0 ; i < ( 1 << 20 ) ; i++)
		table[i] = zero; 
}
void is_possible(short item_count , int added, int check_item, vector<short> current_nutrients){

	vector<short> temp_nut; 
	
	if ( current_nutrients == target ) {
		result = true; 
		return ; 
	}


	for ( int i = 0 ; i < 3 ; i++)
	{
		short val = current_nutrients[i] + items[check_item][i];
		temp_nut.push_back(val);
	}


	if ( temp_nut == target ) {
		result = true; 
		return ; 
	}

	if ( check_item == item_count -1 )
		return; 

	if (!( temp_nut[0] > target[0] || temp_nut[1] > target[1] || temp_nut[2] > target[2] ))
	{
		added = added | ( 1 << check_item) ; 
		is_possible(item_count, added,check_item + 1 , temp_nut) ;  
	}
	if ( result ) 
		return; 

	
	// without 
	
	is_possible(item_count, added, check_item + 1 , current_nutrients) ; 

}
int main()
{

	int test_cases; 
	int item_count; 
	short c , p , f; 
	int case_count = 0 ; 
	scanf("%d", &test_cases); 

	
	while ( test_cases) {
		test_cases --; 
		case_count ++; 
		items.clear();

		// read the target 
		scanf("%hu%hu%hu", &c, &p, &f);
		target.clear();
		target.push_back(c);
		target.push_back(p);
		target.push_back(f);
		// read no of items 
		scanf("%d", &item_count);
		while(item_count){

			item_count--; 
			vector<short> it; 
			scanf("%hu%hu%hu", &c, &p, &f);
			it.clear();
			it.push_back(c);
			it.push_back(p);
			it.push_back(f);

			items.push_back(it);
		}

		// zero the table 
		//zerothetable();
		// call the logic
		result = false; 
		vector<short> nutrients ; 

		nutrients.push_back(0);
		nutrients.push_back(0);
		nutrients.push_back(0);

		is_possible(items.size(), 0, 0, nutrients);
		if ( result) 
			printf("Case #%d: yes\n", case_count);
		else
			printf("Case #%d: no\n", case_count);
	}



	return 0 ; 
}

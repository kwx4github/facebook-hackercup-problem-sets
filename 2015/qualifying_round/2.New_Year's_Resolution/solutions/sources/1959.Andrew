#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <memory.h>
#include <string.h>
#include <sstream>
#include <queue>
#include <bitset>

#pragma comment(linker,"/STACK:16777216")
using namespace std;

//Loops
#define FOR(i,a,b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(int (i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int (i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (int (i) = 0; (i) < int((a).size()); ++(i))
#define MEM(a,b) memset((a),(b),sizeof(a))

//Constants
#define inf 1000000000
#define pi 2*acos(0.0)
#define eps 1e-12
#define N 100010
#define M 2010

//Functions
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sz(x) int((x).size())

//Pairs
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second

//Input-Output
#define FREOPEN(a,b) freopen(a,"r",stdin); freopen(b,"w",stdout);

typedef vector<int> vint;
typedef long long ll;
typedef pair<int, int> pii;

const int mod = int(1e7) + 7;

struct data{
	int prot, fat, carbo;
	data() : prot(0), fat(0), carbo(0) {};
	void add(data that){
		prot += that.prot;
		fat += that.fat;
		carbo += that.carbo;
	}
	bool operator==(const data &that){
		return prot == that.prot && fat == that.fat && carbo == that.carbo;
	}
};

string Solve(data need, vector<data> v){
	int n = sz(v); 
	int MAX = 1 << n;
	for (int msk = 0; msk < MAX; msk++){
		data cur;
		for (int i = 0; i < n; i++)
			if (msk & (1 << i)){
				cur.add(v[i]);
			}
			if (cur == need)return "yes";
	}
	return "no";
}
int main()
{
	FREOPEN("input.txt", "output.txt");
	int test, n;
	data cur, need;
	vector<data> v;
	scanf("%d", &test);
	for (int t = 0; t < test; t++){
		scanf("%d%d%d", &need.prot, &need.carbo, &need.fat);
		scanf("%d", &n);
		v.clear();
		for (int i = 0; i < n; i++){
			scanf("%d%d%d", &cur.prot, &cur.carbo, &cur.fat);
			v.push_back(cur);
		}
		cout << "Case #" << t + 1 << ": ";
		cout << Solve(need, v) << endl;
	}
	return 0;
}
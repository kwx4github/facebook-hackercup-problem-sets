#include<iostream>
#include<string>
#include<cstdio>
#include<cstring>
#include<fstream>
#include<algorithm>
#include<map>
#include<climits>
#include<stdlib.h>
#include<vector>
#include<stack>
#include<queue>
#include<bitset>
#include<set>
#include<cmath>
#include<list>
#include<sstream>
using namespace std;
const int M = 110;
const int N = 10;
const double eps = 1e-5;
const double dinf = 1e15;
const int MOD = 1000000007;
const int inf = INT_MAX;
const int ninf = INT_MIN;
struct food{
    int p,c,f;
};
int n;
int gp,gc,gf;
vector<food> fd;

bool dfs(int idx, int p, int c, int f){
    if(p == gp && gc == c && gf == f)
        return true;
    if(p > gp || c > gc || f > gf)
        return false;
    for(int i = idx + 1; i < n; ++ i){
        int tp = p + fd[i].p, tc = c + fd[i].c, tf = f + fd[i].f;
        if(tp == gp && gc == c && gf == f)
            return true;
        if(tp > gp || tc > gc || tf > gf)
            continue;
        if(dfs(i, tp, tc, tf))
            return true;
    }
    return false;
}

int main(){
    freopen("new_years_resolution.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int T;
    scanf("%d",&T);
    int cas = 1;
    while(T --){
        scanf("%d%d%d",&gp,&gc,&gf);
        scanf("%d",&n);
        fd.resize(n);
        for(int i = 0; i < n; ++ i){
            scanf("%d%d%d",&fd[i].p,&fd[i].c,&fd[i].f);
        }
//        printf("%d\n",fd.size());
        bool isfind = false;
        for(int i = 0; i < n; ++ i){
            if(dfs(i,fd[i].p,fd[i].c,fd[i].f)){
                isfind = true;
                break;
            }
        }
        printf("Case #%d: ",cas++);
        if(isfind)
            puts("yes");
        else
            puts("no");
    }
    return 0;
}


/*
int main(){
//    freopen("cooking_the_books.txt","r",stdin);
//    freopen("out.txt","w",stdout);
    int T;
    cin>>T;
    int cas = 1;
    while(T --){
        string inpt, min_s, max_s;
        cin>>inpt;
        set<string> chk_set;
        vector<string> vec_set;
        if(inpt.size() < 2 || (inpt.size() == 2 && inpt[1] == '0')){
            min_s = inpt;
            max_s = inpt;
        }else{
            vec_set.push_back(inpt);
            chk_set.insert(inpt);
            for(int i = 0; i < inpt.size(); ++ i){
                for(int j = i + 1; j < inpt.size(); ++ j){
                    if(inpt[i] != inpt[j]){
                        string tmp_s = inpt;
                        char tmp;
                        if((i == 0 && inpt[j] != '0') || i > 0){
                            tmp = tmp_s[i];
                            tmp_s[i] = tmp_s[j];
                            tmp_s[j] = tmp;
                        }
                        if(chk_set.find(tmp_s) == chk_set.end() && tmp_s[0] != '0'){
                            chk_set.insert(tmp_s);
                            vec_set.push_back(tmp_s);
                        }
                    }
                }
            }
            sort(vec_set.begin(), vec_set.end());
            min_s = vec_set[0];
            max_s = vec_set[vec_set.size() - 1];
        }
        cout<<"Case #"<<cas++<<": "<<min_s<<" "<<max_s<<endl;
    }
    return 0;
}
*/

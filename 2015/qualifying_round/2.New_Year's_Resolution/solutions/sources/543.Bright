#include <cstdio>
#include <iostream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <complex>
#define pb push_back
#define mp make_pair
#define esp 1e-6
#define Esp 1e-14
#define lson   l, m, rt<<1
#define rson   m+1, r, rt<<1|1
#define sz(x) ((int)((x).size()))
#define pf(x) ((x)*(x))
#define pb push_back
#define pi acos(-1.0)
#define in freopen("solve_in.txt", "r", stdin);
#define out freopen("solve_out.txt", "w", stdout);

#define bug(x) cerr << "Line : " << (x) <<  " >>>>>>\n";
#define TL cerr << "Time elapsed: " << (double)clock() / CLOCKS_PER_SEC * 1000 << " ms" << endl;
#define inf 0x0f0f0f0f

using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef map<LL, int> MPS;
typedef pair<int, int> PII;
typedef MPS::iterator IT;

const int maxn = 22;
struct Node{
    int a, b, c;
    Node(){}
    Node(int a, int b, int c):a(a), b(b), c(c){}
    bool operator < (const Node &o)const{
        if(a == o.a){
            if(b == o.b)
                return c < o.c;
            return b < o.b;
        }return a < o.a;
    }
}ba[maxn];
int A, B, C, n;
bool dfs(int pos, int nowa, int nowb, int nowc){
    if(nowa == A && nowb == B && nowc == C)
        return true;
    if(pos == n || nowa > A || nowb > B || nowc > C) return false;
//    if(nowa+ba[pos].a > A) return false;
    if(dfs(pos+1, nowa+ba[pos].a, nowb+ba[pos].b, nowc+ba[pos].c) || dfs(pos+1, nowa, nowb, nowc))
        return true;
    return false;
}
int main(){
////    in
////    out
    int T;
    for(int t = scanf("%d", &T); t <= T; t++){
        printf("Case #%d: ", t);
        scanf("%d%d%d", &A, &B, &C);
        int cnt = 0;
        for(int i = scanf("%d", &n)-1; i < n; i++){
            int a, b, c;
            scanf("%d%d%d", &a, &b, &c);
            if(a > A || b > B || c > C)
                continue;
            ba[cnt++] = Node(a, b, c);
        }
        n = cnt;
        sort(ba, ba+n);
        if(dfs(0, 0, 0, 0))
            puts("yes");
        else puts("no");
    }
    return 0;
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hackercup;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author David
 */
public class PSet2 {

    public static void main(String[] args) {
        String inputFile = "e:/temp/new_years_resolution.txt";
        String outputFile = "e:/temp/output.txt";
        
        try {
            PSet2 obj = new PSet2();
            obj.processFile(inputFile, outputFile);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void processFile(String inputFile, String outputFile) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(inputFile));
        BufferedWriter bw = new BufferedWriter(new FileWriter(outputFile));
        int numberOfCases = Integer.parseInt(br.readLine());
        for (int i=0; i<numberOfCases; i++) {
            Case obj = new Case();
            obj.wantsToEat = parseFood(br.readLine());
            int availableFoods = Integer.parseInt(br.readLine());
            for (int j=0; j<availableFoods; j++) {
                obj.available.add(parseFood(br.readLine()));
            }
            boolean result = processCase(obj);
            bw.write("Case #" + (i+1) + ": " + (result ? "yes" : "no"));
            bw.write("\n");
        }        
        br.close();
        bw.flush();
        bw.close();
    }
    
    private boolean processCase(Case obj) {
        List<PItem> items = new ArrayList<PItem>();
        for (int i=0; i<obj.available.size(); i++) {
            PItem item = new PItem();
            item.value = obj.available.get(i).p;
            item.indexList.add(i);
            items.add(item);
        }
        for (int i=0; i<obj.available.size(); i++) {
            List<PItem> newItems = new ArrayList<PItem>();
            for (PItem item : items) {
                if (!item.indexList.contains(i)) {
                    PItem newItem = new PItem();
                    newItem.value = item.value + obj.available.get(i).p;
                    for (Integer index : item.indexList) {
                        newItem.indexList.add(index);
                    }
                    newItem.indexList.add(i);
                    newItems.add(newItem);
                }
            }
            for (PItem item : newItems) {
                items.add(item);
            }
            List<PItem> filteredItems = new ArrayList<PItem>();
            for (PItem item : items) {
                if (item.value <= obj.wantsToEat.p) {
                    filteredItems.add(item);
                }
            }
            items = filteredItems;
        }
        
        for (PItem item : items) {
            if (item.value == obj.wantsToEat.p) {
                int c = 0;
                int f = 0;
                for (Integer index : item.indexList) {
                    c += obj.available.get(index).c;
                    f += obj.available.get(index).f;
                }
                if (c == obj.wantsToEat.c && f == obj.wantsToEat.f) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private Food parseFood(String food) {
        Food result = new Food();
        result.p = Integer.parseInt(food.split(" ")[0]);
        result.c = Integer.parseInt(food.split(" ")[1]);
        result.f = Integer.parseInt(food.split(" ")[2]);
        return result;
    }
    
    class Case {
        Food wantsToEat;
        List<Food> available = new ArrayList<Food>();
    }
    
    class Food {
        int p, c, f;
    }
    
    class PItem {
        int value;
        List<Integer> indexList = new ArrayList<Integer>();
    }
}

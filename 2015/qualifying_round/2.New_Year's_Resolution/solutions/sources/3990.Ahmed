import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;
import java.util.Scanner;


class B {

	int N, Gp, Gc, Gf, D[][], sol[];
	boolean ans;
	
	public B() {
		Scanner in = new Scanner(System.in);
//		PrintWriter out = null;

//		try {
//			in = new Scanner(new File("in"));
//		} catch (Exception e) {}
		
		sol = new int[3];
	
		for (int caseID = 1, T = in.nextInt(); caseID <= T; caseID++) {
			ans = false;
			Arrays.fill(sol, 0);
			Gp = in.nextInt();
			Gc = in.nextInt();
			Gf = in.nextInt();
			N = in.nextInt();
			D = new int[N][3];
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < 3; j++) {
					D[i][j] = in.nextInt();
				}
			}
			bt(Gp, new ArrayDeque<Integer>(), 0);
			System.out.println(String.format("Case #%d: %s", caseID, ans ? "yes" : "no"));
		}
		
		in.close();
	}
	
	void bt(int n , Deque<Integer> d, int i){
		if(ans) return;
		if(n == 0){
			check(d);
		}
		if(n < 0 || i >= D.length) return;
		d.addLast(i);
		bt(n-D[i][0], d, i+1);
		d.removeLast();
		bt(n, d, i+1);
	}
	
	private void check(Deque<Integer> d) {
		int _Gc = 0, _Gf = 0;
		for (Integer pos : d) {
			_Gc += D[pos][1];
			_Gf += D[pos][2];
		}
		if(_Gc == Gc && _Gf == Gf){
			ans = true;
		}
	}

	public static void main(String[] args) {
		new B();
	}

}

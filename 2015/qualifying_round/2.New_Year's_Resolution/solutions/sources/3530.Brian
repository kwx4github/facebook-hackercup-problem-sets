#include <vector>
#include <algorithm>
#include <fstream>
#include <stdlib.h> 
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <sstream>
#include <map>
#include <queue>
#include <set> 
#include <deque> 
#include <bitset> 

using namespace std;

struct nut{
	int P;
	int C; 
	int F;
};

bool exists(vector<nut> vect, int n, nut sum)
{
   if (sum.P == 0 && sum.C==0 && sum.F==0)
     return true;
   if (n == 0 && !(sum.P == 0 && sum.C==0 && sum.F==0))
     return false;
     
   if (vect.at(n-1).P > sum.P || vect.at(n-1).C > sum.C || vect.at(n-1).F > sum.F)
     return exists(vect, n-1, sum);
    
    nut newsum;
    newsum.P=sum.P-vect.at(n-1).P;
    newsum.C=sum.C-vect.at(n-1).C;
    newsum.F=sum.F-vect.at(n-1).F;
 
   return exists(vect, n-1, sum) || exists(vect, n-1, newsum);
}

int main()
{
	freopen("new_years_resolution.txt","r",stdin);
    freopen("new_years_resolution_output.txt","w",stdout);
	int i, numCase, GP, GC, GF, N, P, C, F;
	cin>>numCase;
	for(i=0; i<numCase; i++){
		nut sum;
		cin>>GP>>GC>>GF;
		sum.P=GP;
		sum.C=GC;
		sum.F=GF;
		cin>>N;
		vector<nut> vect;
		int validnum=0;
		while(N--){
			cin>>P>>C>>F;
			if(!(P > GP || C > GC || F > GF)){
				nut valid;
				valid.P=P;
				valid.C=C;
				valid.F=F;
				vect.push_back(valid);
				validnum++;
			}
		}
		cout << "Case #" << (i+1) << ": ";
		if(exists(vect, validnum, sum)){
			cout<<"yes"<<endl;
		}
		else{
			cout<<"no"<<endl;
		}
	}
	return 0;
}

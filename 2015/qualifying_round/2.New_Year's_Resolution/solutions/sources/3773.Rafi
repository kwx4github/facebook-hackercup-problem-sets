#include <bits/stdc++.h>

#define INF 2147483647
#define LLD int
#define clr(a) memset(a,0,sizeof(a))
#define reset(a) memset(a,-1,sizeof(a))

#define PRINT(X) (cout << #X << " -> " << X << endl)
#define PI acos(0)
#define MAX_INT 2147483647
#define SIZE 100005
#define MOD 1000000007

using namespace std;

class FoodValue {
public:
	int p, c, f;
	FoodValue(int p, int c, int f) : p(p), c(c), f(f) {}
	
	bool operator <(const FoodValue& other) const {
		return p < other.p
			|| (p == other.p && c < other.c)
			|| (p == other.p && c == other.c && f < other.f);
	}
};

bool subSetSumPossible(FoodValue n, vector<FoodValue>& numbers) {
	set<FoodValue> sum;
	
	sum.insert(FoodValue(0, 0, 0));
	for (int i = 0; i < numbers.size(); i++) {
		vector<FoodValue> temp;
		for (set<FoodValue>::iterator it = sum.begin(); it != sum.end(); it++) {
			FoodValue value(numbers[i].p + it->p, numbers[i].c + it->c, numbers[i].f + it->f);
			temp.push_back(value);
		}
		copy(temp.begin(), temp.end(), inserter(sum, sum.end()));
	}
	
//	for (set<int>::iterator it = sum.begin(); it != sum.end(); it++) {
//		cout << *it << ' ';
//	}
//	cout << endl;
	
	return sum.find(n) != sum.end();
}

int main()
{
    int t, tc, x, y, z;
    int i, j, k, l, h, n, pos;
    char ch;

#ifndef ONLINE_JUDGE
    freopen("new_years_resolution.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
#endif

	cin >> tc;
	for (t = 1; t <= tc; t++) {
		int P, C, F;
		cin >> P >> C >> F;
		FoodValue ideal(P, C, F);
		
		vector<FoodValue> values;
		int pVal, cVal, fVal;
		
		cin >> n;
		for (i = 0; i < n; i++) {
			cin >> pVal >> cVal >> fVal;
			values.push_back(FoodValue(pVal, cVal, fVal));
		}
		
		bool possible = subSetSumPossible(ideal, values);
		
		printf("Case #%d: %s\n", t, (possible ? "yes" : "no"));
	}
	
	
    return 0;
}
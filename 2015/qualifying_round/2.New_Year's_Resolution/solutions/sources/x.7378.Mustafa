// All important imports
 
import static java.lang.System.in;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.Vector;
 
 
/**
 * 
 * @author Mustafa Filmwala
 * Built using Netbeans IDE 8.0.1
 */
 

class haha {
       
           public static int bruteforce(int p,int c,int f,int pa[],int ca[],int fa[],int n)
            {   // works for n<105
            long ansp,ansc,ansf;
            long pow=(long)Math.pow(2,n);
            int i,j,index,possible=0;
            int tarr[],t,count;
            for(i=1;i<pow;i++)
            {
                
                ansp=0;
                ansc=0;
                ansf=0;
                
                tarr=new int[n];
                for(t=0;t<n;t++)
                {   
                   if( (i&(1<<t))!=0){ansp+=pa[t]; ansc+=ca[t];ansf+=fa[t];}
                }
                
                if(ansp==p && ansc==c && ansf==f)
                {
                    possible=1;
                    break;
                }
            }
            if(possible==1)
            return 1;
            else return 0;
            
            
            }
       public static void solve() throws IOException
        {
          int tc,i;
          char s[],s1[],aa;
          int p,c,f,n;
          int pa[],ca[],fa[];
          //System.out.println(arr.get(900));
          tc=ni();
          for(int j=1;j<=tc;j++)
          {
              
            p=ni(); c=ni(); f=ni();
            n=ni();
            pa=new int[n];
            ca=new int[n];
            fa=new int[n];
            for(i=0;i<n;i++)
            {
                pa[i]=ni();
                ca[i]=ni();
                fa[i]=ni();
            }
            i=bruteforce(p,c,f,pa,ca,fa,n);
            out.print("Case #"+j+": ");if(i==0)out.println("no"); else out.println("yes");
                            
          }
          
          
        }
       
      
       

        
  
        
        
        static String TESTCASES;
        static PrintWriter out;
	public static void main(String[] args) throws Exception {
                long endTime,startTime=System.currentTimeMillis();
                
                out=new PrintWriter(System.out);
                InputStream myinp=System.in;
                init(myinp);
                solve();
                out.close();
                endTime=System.currentTimeMillis();
                
                  }
        
        static InputStream is;
        static BufferedReader brr;
        public static void init(InputStream input) {
        is=input;
        brr=new BufferedReader(new InputStreamReader(input));
        }
    	
	
	protected static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	protected static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
        
        protected static String readline() throws IOException
        {
            return brr.readLine();
        }
                
	
	
	// extras
	protected static double nd() { return Double.parseDouble(ns()); }
	protected static char nc() { return (char)skip(); }
	protected static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	protected static int skip() { 
            int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; 
        }
        
        
	protected static String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	protected static char[] nca(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	
	protected static int[] nia(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
        
        protected static long[] nla(int n)
	{
		long[] a = new long[n];
		for(int i = 0;i < n;i++)a[i] = nl();
		return a;
	}
        
        protected static double[] nda(int n)
	{
		double[] a = new double[n];
		for(int i = 0;i < n;i++)a[i] = nd();
		return a;
	}
	
	protected static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	protected static long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
 
 
}
 
 
 
 
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class NewYearsResolution {
	public static void main(String[] args) {
		NewYearsResolution n = new NewYearsResolution();
		String path = "/Users/wish/Desktop/new_years_resolution_example_input.txt";
		String output = "/Users/wish/Desktop/newyearresolution_output.txt";
		n.solution(path, output);
	}
	public void solution(String path, String output){
		try{
			BufferedReader br = new BufferedReader(new FileReader(new File(path)));
			FileWriter fw = new FileWriter(new File(output));
			String s = br.readLine();
			int caseNumber = Integer.valueOf(s);
			String data = null;
			int i = 1;
			while((data = br.readLine()) != null && i <= caseNumber && !data.equals("")){
				String[] amount = data.split(" ");
				int numOfFood = Integer.valueOf(br.readLine());
				List<String[]> list = new ArrayList<String[]>();
				while(numOfFood > 0){
					list.add(br.readLine().split(" "));
					numOfFood--;
				}
				StringBuilder result = new StringBuilder();
				result.append("Case #" + i++ + ": "+(helper(amount, list) == true ? "yes" : "no") + "\n");
				fw.write(result.toString());
			}
			fw.close();
			br.close();
			
		}catch(FileNotFoundException e){
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}catch(NumberFormatException e){
			System.out.println("Invalid number");
		}
		
	}
	
	public boolean helper(String[] amount, List<String[]> list){
		List<List<String[]>> l = new ArrayList<List<String[]>>();
		boolean[] result = new boolean[1];
		sum(list, Integer.valueOf(amount[0]), l, new ArrayList<String[]>(), result, amount);
		return result[0] == true;
	}
	
	/* calculate all possible solutions of the first column */
	public boolean sum(List<String[]> list, int target,List<List<String[]>> l,List<String[]> partial, boolean[] result, String[] amount) {
	       int sum = 0;
	       for (String[] arr: partial) sum += Integer.valueOf(arr[0]);
	       if (sum == target){
	    	   l.add(partial);
	    	   if(check(partial, amount)){
	    		   result[0] = true;
	    		   return true;
	    	   }
	       }
	       if (sum >= target)
	            return false;
	       for(int i=0;i<list.size();i++) {
	    	   	 ArrayList<String[]> remaining = new ArrayList<String[]>();
	             for (int j=i+1; j<list.size();j++) remaining.add(list.get(j));
	             ArrayList<String[]> temp = new ArrayList<String[]>(partial);
	             temp.add(list.get(i));
	             if (sum(remaining,target,l,temp, result, amount))
	             	return true;
	       }
	       return false;
	 }
	
	public boolean check(List<String[]> partial, String[] amount){
		int sum1 = 0;
		int sum2 = 0;
		for(int i = 0; i < partial.size(); i++){
			sum1 += Integer.valueOf(partial.get(i)[1]);
			sum2 += Integer.valueOf(partial.get(i)[2]);
			if(sum1 > Integer.valueOf(amount[1]) || sum2 > Integer.valueOf(amount[2])) return false; 
		}
		return sum1 == Integer.valueOf(amount[1]) && sum2 == Integer.valueOf(amount[2]);
	}

	
}

/* 

  New Year's Resolution - Facebook Hacker Cup 2015 Qualification Round in Picat.

  https://www.facebook.com/hackercup/problems.php?pid=1036037553088752&round=742632349177460
  """
  New Year's Resolution

  Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some 
  research and has found out that calories come from three main sources, 
  called macronutrients: protein, carbohydrates, and fat. Alex wants to get the 
  right balance of protein, carbohydrates, and fat to have a balanced diet. 
  For each available food, Alex can only choose to eat it or not eat it. 
  He can't eat a certain food more than once, and he can't eat a fractional 
  amount of a food.

  Input

  Input begins with an integer T, the number of test cases. For each test case, 
  the first line consists of three space-separated integers: GP, GC, and GF, 
  which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. 
  The next line has the number of foods for that test case, an integer N. 
  The next N lines each consist of three space-separated integers: P, C, and F, 
  which represent the amount of protein, carbohydrates, and fat in that food, respectively.

  Output

  For each test case i, print a line containing "Case #i: 2 followed by either 
  "yes" if it is possible for Alex to eat the exact amount of each macronutrient, 
  or "no" if it is not possible.

  Constraints

  1 ≤ T ≤ 20
  1 ≤ N ≤ 20
  10 ≤ GP, GC, GF ≤ 1000
  10 ≤ P, C, F ≤ 1000 
  """

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import util.
import cp.

main => go.


go =>
  % File = "facebook_hacker_cup_2015_qualification_round.txt",
  File = "new_years_resolution.txt",
  Data = read_file_lines(File),

  % Input begins with an integer T, the number of test cases. 
  NumTests = Data[1].to_integer(),
  Line = 2, 
  foreach(T in 1..NumTests)
    % first line consists of three space-separated integers: GP, GC, and GF, 
    % which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. 
  
    PCF = [I.to_integer() : I in Data[Line].split(" ")],
    Line := Line + 1,

    % next line has the number of foods for that test case, an integer N. 
    N = Data[Line].to_integer(),
    Line := Line + 1,

    % next N lines each consist of three space-separated integers: P, C, and F, 
    % which represent the amount of protein, carbohydrates, and fat in that food, 
    % respectively.
    Food = [   [J.to_integer() : J in Data[Line+I].split(" ")] : I in 0..N-1],
    Line := Line + N,
    printf("Case #%d: ", T),
    if solveit(PCF,Food, _X) then
      println("yes")
    else
      println("no")
    end
  end,

  nl.

% test
go2 => 
  foreach(T in 1..5)
    println(t=T),
    test(T,PCF,Food),
    if solveit(PCF,Food,X) then
      println(pcf=PCF),
      Ix = [I : I in 1..X.length, X[I] = 1],
      println(selected_food_ix=Ix),
      println(selected_food=[Food[I] : I in Ix])
    else
      println("No")
    end,
    nl
  end,
  nl.

go3 =>
  PCF = [100,100,100],
  Food = [[100,100,100]],
  if solveit(PCF,Food,_X) then
    println(yes)
  else
    println(no)
  end,

  nl.

solveit(PCF,Food, X) =>

  N = Food.length,

  X = new_list(N),
  X :: 0..1,
  
  foreach(J in 1..3)
     PCF[J] #= sum([X[I]*Food[I,J] : I in 1..N])
  end,

  solve(X).


test(1,PCF,Food) =>
  PCF = [100, 100, 100],
  Food = [
          [100, 100, 100]
         ].

test(2,PCF,Food) =>
  PCF = [100, 100, 100],
  Food = [
           [10, 10, 40],
           [10, 30, 10],
           [10, 60, 50]
         ].

test(3,PCF,Food) =>
  PCF = [100, 100, 100],
  Food = [
         [40, 70, 30],
         [30, 10, 40],
         [20, 20, 50],
         [10, 50, 90],
         [40, 10, 20]
         ].

test(4, PCF, Food) =>
  PCF = [292,264,512],
  Food = [
[909,302,261],
[705,597,823],
[291,51,126],
[28,697,57],
[593,31,826],
[311,256,57],
[292,14,47],
[29,730,716],
[12,529,146],
[768,16,439],
[37,472,15],
[350,192,34],
[163,468,238],
[69,173,10],
[203,72,690],
[424,875,213],
[223,593,292],
[151,46,10],
[88,90,16],
[773,653,711]
         ].

test(5,PCF,Food) =>
  PCF = [991,827,352],
  Food = [
[29, 560, 929],
[139,681,102],
[144,853,10],
[84,729,80],
[218,20,67],
[140,80,901],
[428,20,500],
[520,970,128],
[422,419,30],
[413,101,192],
[467,448,501],
[32,939,684],
[34,20,38],
[251,317,132],
[588,437,10],
[648,21,79],
[391,25,14],
[499,22,24],
[854,77,361],
[405,25,20]
         ].

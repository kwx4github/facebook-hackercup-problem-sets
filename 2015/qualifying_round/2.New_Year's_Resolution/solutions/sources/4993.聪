#include <unordered_set>
#include <iostream>

using namespace std;
struct state {
    state(int a = 0, int b = 0, int c = 0):
        a(a), b(b), c(c)
    { }

    bool operator == (const state& rhs) const {
        return a == rhs.a && b == rhs.b && c == rhs.c;
    }

    int a,b,c;
};

long long hasher(const state& s) {
    return s.a * 1000000ll + s.b * 1000ll + s.c;
}
int main() {
    int t;
    cin>>t;
    for (int nc = 1; nc <= t; nc++) {
        unordered_set<state, decltype(hasher)*>ss(0, hasher);
        state initalState(0, 0, 0);
        state targetState;
        ss.insert(initalState);
        cin>>targetState.a>>targetState.b>>targetState.c;
        int n;
        cin>>n;
        bool succ = false;
        for (int i = 0; i < n; i++) {
            int ta, tb, tc;
            cin>>ta>>tb>>tc;
            if (succ)
                continue;
            unordered_set<state, decltype(hasher)*> news(ss);
            for (state ts: news) {
                state ns = ts;
                ns.a += ta;
                ns.b += tb;
                ns.c += tc;
                ss.insert(ns);
                if (ns == targetState) {
                    succ = true;
                }
            }
        }
        if (succ)
            cout << "Case #" << nc << ": yes" << endl;
        else
            cout << "Case #" << nc << ": no" << endl;
    }    
    return 0;
}

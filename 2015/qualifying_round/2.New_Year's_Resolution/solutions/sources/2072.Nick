#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct food {
	int p;
	int c;
	int f;
};

bool sortByP(food food1, food food2) {
	return food1.p < food2.p;
}
bool sortByC(food food1, food food2) {
	return food1.c < food2.c;
}
bool sortByF(food food1, food food2) {
	return food1.f < food2.f;
}

bool findSolution(vector<food>& foodList, vector<bool> chosen, int psum, int csum, int fsum, int gp, int gc, int gf) {
	if (psum > gp || csum > gc || fsum > gf)
		return false;
	else if (psum == gp && csum == gc && fsum == gf) 
		return true;
	else if (foodList.size() == chosen.size())
		return false;
	else {
		vector<bool> choseCopy = chosen;
		choseCopy.push_back(true);
		int newp, newc, newf;
		newp = psum + foodList[chosen.size()].p;
		newc = csum + foodList[chosen.size()].c;
		newf = fsum + foodList[chosen.size()].f;
		chosen.push_back(false);
		return findSolution(foodList, choseCopy, newp, newc, newf, gp, gc, gf) || findSolution(foodList, chosen, psum, csum, fsum, gp, gc, gf);
	}
}

int main() {
	int t;
	cin >> t;
	for (int i = 0; i < t; i++) {
		int gp, gc, gf, n;
		cin >> gp >> gc >> gf >> n;

		int psum = 0; 
		int csum = 0;
		int fsum = 0;
		vector<food> foodList;
		for (int i = 0; i < n; i++) {
			int p, c, f;
			cin >> p >> c >> f;
			if (p <= gp && c <= gc & f <= gf) {
				food newFood;
				newFood.p = p;
				newFood.c = c;
				newFood.f = f;
				psum += p;
				csum += c;
				fsum += f;
				foodList.push_back(newFood);
			}
		}

		if (psum < gp || csum < gc || fsum < gf) {
			cout << "Case #" << i + 1 << ": no" << endl;
			continue;
		}
		sort(foodList.begin(), foodList.end(), sortByF);
		sort(foodList.begin(), foodList.end(), sortByC);
		sort(foodList.begin(), foodList.end(), sortByP);
		reverse(foodList.begin(), foodList.end());

		vector<bool> chosen;
		bool possible = findSolution(foodList, chosen, 0, 0, 0, gp, gc, gf);

		if (possible)
			cout << "Case #" << i + 1 << ": yes" << endl;
		else
			cout << "Case #" << i + 1 << ": no" << endl;
	}

	return 0;
}

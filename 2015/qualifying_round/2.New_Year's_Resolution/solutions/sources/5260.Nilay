import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;

public class NewYearsResolution {

	private static final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
	private static final PrintWriter printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

	public static void main(String[] args) throws IOException {
		int testCount = Integer.parseInt(bufferedReader.readLine());
		for (int caseNumber = 1; caseNumber <= testCount; caseNumber++) {
			String[] inputConstraints = bufferedReader.readLine().split(" ");
			long p = Long.parseLong(inputConstraints[0]);
			long c = Long.parseLong(inputConstraints[1]);
			long f = Long.parseLong(inputConstraints[2]);

			int n = Integer.parseInt(bufferedReader.readLine());
			Food[] foods = new Food[n];
			String[] input;
			for (int i = 0; i < n; i++) {
				input = bufferedReader.readLine().split(" ");
				foods[i] = new Food(Long.parseLong(input[0]), Long.parseLong(input[1]), Long.parseLong(input[2]));
			}

			if (canEatProperly(p, c, f, n, foods)) {
				printWriter.println("Case #" + caseNumber + ": yes");
			} else {
				printWriter.println("Case #" + caseNumber + ": no");
			}
		}

		printWriter.flush();
	}

	private static boolean canEatProperly(long p, long c, long f, int n, Food[] foods) {
		if (n == 1) {
			if (foods[0].getCarbohydrates() == c && foods[0].getFat() == f && foods[0].getProtein() == p) {
				return true;
			} else {
				return false;
			}
		}

		boolean take0 = r(p, c, f, n, foods, 1, foods[0].getCarbohydrates(), foods[0].getFat(), foods[0].getProtein());
		boolean dontTake0 = r(p, c, f, n, foods, 1, 0, 0, 0);

		return take0 || dontTake0;
	}

	private static boolean r(long gp, long gc, long gf, int n, Food[] foods, int current, long c, long f, long p) {
		if (c > gc || f > gf || p > gp) {
			return false;
		}

		if (current >= n) {
			if (p == gp && c == gc && f == gf) {
				return true;
			} else {
				return false;
			}
		}

		if (p == gp && c == gc && f == gf) {
			return true;
		} else {
			return r(gp, gc, gf, n, foods, current + 1, c, f, p)
					|| r(gp, gc, gf, n, foods, current, c + foods[current].getCarbohydrates(), f + foods[current].getFat(), p + foods[current].getProtein());
		}

	}
}

class Food {

	private long protein, carbohydrates, fat;

	public Food(long protein, long carbohydrates, long fat) {
		this.protein = protein;
		this.carbohydrates = carbohydrates;
		this.fat = fat;
	}

	public long getProtein() {
		return protein;
	}

	public long getCarbohydrates() {
		return carbohydrates;
	}

	public long getFat() {
		return fat;
	}
}

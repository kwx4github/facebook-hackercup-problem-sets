package com.test.fbhc;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.*;

/**
 * Created by r0h17 on 1/9/15.
 */
public class NewYear {

    public static void main(String[] args) throws FileNotFoundException {
        Integer[] test = new Integer[]{1,3,4};
        Scanner sc = new Scanner(new FileReader("resources/newyear.txt"));
        PrintWriter pw = new PrintWriter(System.out);

        new NewYear().solve(sc, pw);

        pw.flush();
        pw.close();
        sc.close();

        //System.out.println(r(100, new int[] { 0, 4, 2, 8, -1 }));
    }

    static void sum_up_recursive(List<Food> numbers, int target, ArrayList<Food> partial, List<List<Food>> resultArray) {
        int s = 0;
        for (Food x: partial) s += x.getP();
        if (s == target) {
            //System.out.println("sum(" + Arrays.toString(partial.toArray()) + ")=" + target);
            resultArray.add(partial);
        }
        if (s >= target)
            return;
        for(int i=0;i<numbers.size();i++) {
            ArrayList<Food> remaining = new ArrayList<Food>();
            Food n = numbers.get(i);
            for (int j=i+1; j<numbers.size();j++) remaining.add(numbers.get(j));
            ArrayList<Food> partial_rec = new ArrayList<Food>(partial);
            partial_rec.add(n);
            sum_up_recursive(remaining,target,partial_rec, resultArray);
        }
    }
    static List<List<Food>> sum_up(List<Food> numbers, int target) {
        List<List<Food>> resultArray = new ArrayList<List<Food>>();
        sum_up_recursive(numbers,target,new ArrayList<Food>(), resultArray);
        return resultArray;
    }

    private void solve(Scanner sc, PrintWriter pw) {
        int t = sc.nextInt();
        for (int j = 0; j < t; j++) {

            int gp = sc.nextInt(), gc = sc.nextInt(), gf = sc.nextInt();

            int totalFood = sc.nextInt();

            List<Food> foods = new ArrayList<Food>();
            for (int i = 0; i < totalFood; i++) {
                foods.add(new Food(sc.nextInt(), sc.nextInt(), sc.nextInt(), gp, gc, gf));
            }



            List<List<Food>> pPairs = sum_up(foods, gp);

            boolean madePossible = false;
            for (List<Food> combinations : pPairs) {

                int totalProtein = 0;
                int totalCarbo = 0;
                int totalFat = 0;
                for (Food indiFood : combinations) {
                    totalProtein += indiFood.getP();
                    totalCarbo += indiFood.getC();
                    totalFat += indiFood.getF();
                }
                if (totalProtein == gp && totalCarbo == gc && totalFat == gf) {
                    madePossible = true;
                    System.out.println("Case #"+(j+1)+": yes");
                    break;
                } else {

                }
            }
            if (!madePossible) {
                System.out.println("Case #"+(j+1)+": no");
            }

        }
    }

    public static class Food implements Comparable{
        int p;
        int c;
        int f;
        int gc;
        int gp;
        int gf;

        public Food(int p, int c, int f, int gp, int gc, int gf) {
            this.p = p;
            this.c = c;
            this.f = f;
            this.gp = gp;
            this.gc = gc;
            this.gf = gf;
        }

        public int getGc() {
            return gc;
        }

        public int getGp() {
            return gp;
        }

        public int getGf() {
            return gf;
        }

        public int getP() {
            return p;
        }

        public int getC() {
            return c;
        }

        public int getF() {
            return f;
        }

        @Override
        public String toString() {
            return this.getP()+"";
        }

        @Override
        public int compareTo(Object o) {
            Food f1 = (Food) o;
            if(f1.getP()==this.getP()) return 0;
            else if(f1.getP()<this.getP()) return 1;
            else if(f1.getP()>this.getP()) return -1;
            else return -1;
        }
    }

}
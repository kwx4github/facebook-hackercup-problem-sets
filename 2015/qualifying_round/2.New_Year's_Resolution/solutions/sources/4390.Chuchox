#include <stdio.h>

int main(void){
    int cases, casos, i, j, tempcomidas;
    int pro, car, gra, comidas;
    int totp, totc, totg, tempp, tempc, tempg;
    int com[3][20];
    int fin[20];

    scanf("%d\n",&cases);
    for(casos=1;casos<=cases;casos++){
        //Primero leemos los datos
        scanf("%d %d %d\n%d",&pro, &car, &gra, &tempcomidas);
        comidas = totp = totc = totg = 0;
        for(i = 0;i<tempcomidas;i++){
            scanf("%d %d %d\n", &tempp, &tempc, &tempg);
            if((tempp <= pro)&&(tempc <= car)&&(tempg <= gra)){
                com[0][comidas] = tempp;
                com[1][comidas] = tempc;
                com[2][comidas] = tempg;
                comidas++;
                totp += tempp;
                totc += tempc;
                totg += tempg;
            }
        }
        //Salidas obvias
        if((comidas == 0)||(totp < pro)||(totc < car)||(totg < gra)){
            printf("Case #%d: no\n",casos);
            continue;
        }
        if((totp == pro)&&(totc == car)&&(totg == gra)){
            printf("Case #%d: yes\n",casos);
            continue;
        }
        //Analisis completo: Preparamos e inicializamos vectores
        /*printf("Case #%d:\n",casos);
        printf("    Comidas=%d\n",comidas);
        for(i=0;i<comidas;i++){
            fin[i] = 0;
            printf("    %d %d %d\n",com[0][i],com[1][i],com[2][i]);
        }*/
        fin[0] = 1;
        totp = com[0][0];
        totc = com[1][0];
        totg = com[2][0];
        //haciendo bucle
        int salida=0;
        int encontrado=0;
        int current=0;
        long contador = 1;
        while(!salida){
            if((totp == pro)&&(totc == car)&&(totg == gra)){
                encontrado = salida = 1;
            }else if((totp < pro)&&(totc < car)&&(totg < gra)){
                if(current < (comidas-1)){
                    current++;
                    totp += com[0][current];
                    totc += com[1][current];
                    totg += com[2][current];
                    fin[current] = 1;
                }else{
                    totp -= com[0][current];
                    totc -= com[1][current];
                    totg -= com[2][current];
                    fin[current] = 0;
                    while((fin[current] == 0)&&(!salida)){
                        current--;
                        if(current == -1){
                            salida = 1;
                        }
                    }
                    if(!salida){
                        totp -= com[0][current];
                        totc -= com[1][current];
                        totg -= com[2][current];
                        fin[current] = 0;
                        current++;
                        totp += com[0][current];
                        totc += com[1][current];
                        totg += com[2][current];
                        fin[current] = 1;
                    }
                }
            }else{
                totp -= com[0][current];
                totc -= com[1][current];
                totg -= com[2][current];
                fin[current] = 0;
                if(current < (comidas-1)){
                    current++;
                    totp += com[0][current];
                    totc += com[1][current];
                    totg += com[2][current];
                    fin[current] = 1;
                }else{
                    while(fin[current] == 0){
                        current--;
                    }
                    totp -= com[0][current];
                    totc -= com[1][current];
                    totg -= com[2][current];
                    fin[current] = 0;
                    current++;
                    totp += com[0][current];
                    totc += com[1][current];
                    totg += com[2][current];
                    fin[current] = 1;
                }
            }
            /*printf("\t");
            for(i=0;i<comidas;i++){
                printf("%d ",fin[i]);
            }
            printf(" %d %d %d\n",totp,totc,totg);*/
        }
        if(encontrado){
            printf("Case #%d: yes\n",casos);
        }else{
            printf("Case #%d: no\n",casos);
        }
    }
    return(0);
}

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;


public class NewYearResolution {
	static PrintWriter writer;

	public static boolean tryEat2(int[]p , int[] c, int[] f, int n, int p1, int c1, int f1){
		if (p1 == 0 && c1 == 0 && f1==0){
			return true;
		}
		if (n == 0 && (p1 != 0 || c1 != 0 || f1 != 0)){
			return false;
		}
		
		if (p1 - p[n-1 ] < 0 || c1 - c[n-1] < 0 || f1 - f[n-1] < 0){
			return tryEat2(p,c,f,n-1,p1,c1,f1);
		}
		return tryEat2(p,c,f,n-1,p1,c1,f1) || tryEat2(p,c,f,n-1,p1 - p[n-1],c1 - c[n-1],f1 - f[n-1]);
	}
	public static boolean tryEat(int[] a, int[]p , int[] c, int[] f, int n){
		int p1 = a[0];
		int p2 = a[1];
		int p3 = a[2];
		boolean[][][][] bp = new boolean[p1+1][p2+1][p3+1][n+1];
		//System.out.format("p1 %d p2 %d p3 %d \n",p1,p2,p3);

		for (int i = 0; i < n ; i++){
			bp[0][0][0][i] = true;
		}

		for (int i = 1; i <= p1; i++ ){
			for (int j = 1; j <= p2; j++ ){
				for (int k = 1; k <= p3; k++ ){
					bp[i][j][k][0] = false;
				}
			}
		}

		for (int i = 1; i <= p1; i++ ){
			for (int j = 1; j <= p2; j++ ){
				for (int k = 1; k <= p3; k++ ){
					for (int x = 1; x <= n; x++){
						bp[i][j][k][x] = bp[i][j][k][x-1];
						if (  i >= p[x-1] && j >=c[x-1] && k >= f[x-1]){
							//System.out.format("i%d j%d k%d x%d\n",i,j,k,x);
//							System.out.println("zozozo");
//							System.out.println(bp[0][0][0][0]);
							bp[i][j][k][x] = bp[i][j][k][x] || bp[i-p[x-1]][j-c[x-1]][k-f[x-1]][x-1] ;
							//System.out.println(bp[i][j][k][x]);
							//System.out.println("fofofo");

						}
					}
				}
			}
		}

		return  bp[p1][p2][p3][n] ; 

	}
	public static void main(String[] args) throws IOException {
		//System.out.println(tryEat( new int[]{100,100,100},new int[]{100},new int[]{100},new int[]{100},1));
		//System.out.println(tryEat( new int[]{100,100,100},new int[]{10,10,40},new int[]{10,30,10},new int[]{10,60,50},3));
		//System.out.println(tryEat( new int[]{100,100,100},new int[]{40,30,20,10,40},new int[]{70, 10, 20, 50, 10},new int[]{30, 40, 50, 90, 20},5));

		int n;
		BufferedReader br = new BufferedReader(new FileReader("new_years_resolution.txt"));
		writer = new PrintWriter("outputnewyear.txt", "UTF-8");
		try {
			StringBuilder sb = new StringBuilder();
			String x = br.readLine();
			n = Integer.parseInt(x);
			for (int i = 0; i < n ; i++){
				String pcq = br.readLine();
				String[] a = pcq.split(" ");

				int [] com = new int[3];
				com[0] = Integer.parseInt(a[0]);
				com[1] = Integer.parseInt(a[1]);
				com[2] = Integer.parseInt(a[2]);
		
				String tmp = br.readLine();
				int food = Integer.parseInt(tmp);
				int [] p = new int[food];
				int [] c = new int[food];
				int [] f = new int[food];

				for (int j = 0; j < food; j++){
					String res = br.readLine();
					String[] newpcf = res.split(" ");
					p[j] = Integer.parseInt(newpcf[0]);
					c[j] = Integer.parseInt(newpcf[1]);
					f[j] = Integer.parseInt(newpcf[2]);
				}
				StringBuffer gg = new StringBuffer();

				if (tryEat2(p,c,f,food,com[0],com[1],com[2])){
					System.out.format("Case #%d: yes\n",i+1);
					gg.append("Case #");
					gg.append(Integer.toString(i+1));
					gg.append(": ");
					gg.append("yes\n");
				}
				else {
					System.out.format("Case #%d: no\n",i+1);
					gg.append("Case #");
					gg.append(Integer.toString(i+1));
					gg.append(": ");
					gg.append("no\n");
				}
				//cooking(input,i);
				//System.out.println(result);
				writer.write(gg.toString()
						);
			}
			writer.close();
		} finally {
			br.close();
		}
//		100 100 100
//		5
//		40 70 30
//		30 10 40
//		20 20 50
//		10 50 90
//		40 10 20
	}
}

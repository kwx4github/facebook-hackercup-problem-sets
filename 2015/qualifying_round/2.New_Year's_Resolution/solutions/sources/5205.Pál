#include <stdio.h>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <iostream>

struct Food
{
	int P;
	int C;
	int F;
};

int main()
{
	int T;
	scanf("%d", &T);

	int caseNo = 1;

	while(T > 0)
	{
		bool result = false;
		
		std::vector<Food> foods;

		int GP, GC, GF;
		std::cin >> GP >> GC >> GF;

		int N;
		std::cin >> N;

		for (int n = 0; n < N; n++)
		{
			Food f;
			std::cin >> f.P >> f.C >> f.F;
			foods.push_back(f);
		}

		long long numOfSubsets = powl(2, N);
		
		for(int subsetPattern = 0; subsetPattern < numOfSubsets; subsetPattern++)
		{
			int Psum = 0;
			int Csum = 0;
			int Fsum = 0;
			for(unsigned int idx = 0; idx < N ; idx++)
			{
				int mask = 1; 
				mask <<= idx;
				if (mask & subsetPattern)
				{
					Psum += foods[idx].P;
					Csum += foods[idx].C;
					Fsum += foods[idx].F;
				}
			}

			if (Psum == GP && Csum == GC && Fsum == GF)
			{
				result = true;
				break;
			}
		}

		std::cout << "Case #" << caseNo << ": ";
		if (result)
			 std::cout << "yes" << std::endl;
		else
			 std::cout << "no" << std::endl;

		caseNo++;
		T--;
	}
	return 0;
} 
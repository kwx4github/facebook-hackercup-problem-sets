#include<stdio.h>
#include<iostream>
#include<vector>
using namespace std;
#define TRUE 1
#define FALSE 0

  	
int promising(int i,int wt,int total,int sum,int* w) {
	return(((wt+total)>=sum)&&((wt==sum)||(wt+w[i+1]<=sum)));
}

void mysort(int* arr1,int* arr2,int* arr3,int n)
{
	for(int i=0;i<n;i++)
	{
		for(int j=0;j+1<n;j++)
		{
			if(arr1[j]>arr1[j+1])
			{
				int temp1=arr1[j];
				arr1[j]=arr1[j+1];
				arr1[j+1]=temp1;
				
				
				int temp2=arr2[j];
				arr2[j]=arr2[j+1];
				arr2[j+1]=temp2;
				
				
				int temp3=arr3[j];
				arr3[j]=arr3[j+1];
				arr3[j+1]=temp3;
				
				
			
			
			}
		
		}

	}	


}
void sumset(int i,int wt,int total,int* inc,int sump,int* w,int* w2,int* w3,int* flag,int sumc,int sumf);
int main() 
{
freopen("new_years_resolution.txt","r",stdin);
freopen("new_year.out","w",stdout);
int tt;
cin>>tt;
for(int ii=1;ii<=tt;ii++)
{
	int FLAG=0;
  	int flagF=0,flagP=0,flagC=0;
  	int sump,sumc,sumf,total=0;
  	cin>>sump>>sumc>>sumf;
	int n;
  	cin>>n;

int inc[n+2];
int setP[n+7],setC[n+7],setF[n+7];
  	
for(int i=0;i<n;i++)
  	{
  		cin>>setP[i]>>setC[i]>>setF[i];		
  		total+=setP[i];
  	}
  
  		mysort(setP,setC,setF,n);
  	
	  cout<<"Case #"<<ii<<": ";
	  
	
	if((total<sump))
	  {
	  FLAG=0;
	  
	  
	  } else {
		for (int i=0;i<n;i++)
		   inc[i]=0;
		sumset(-1,0,total,inc,sump,setP,setC,setF,&FLAG,sumc,sumf);
		}
		if(FLAG==1)
		{
		cout<<"yes\n";
		}
		if(FLAG==0)
		{
		cout<<"no\n";
		}
	
}

return 0;
}
 void sumset(int i,int wt,int total,int* inc,int sum,int* w,int* w2,int* w3,int* FLAG,int sumc,int sumf) {
 
	int j;
	if(promising(i,wt,total,sum,w)) 
	{
		if(wt==sum) 
		{
			int sum2=0,sum3=0;
			for (j=0;j<=i;j++)
			    if(inc[j])
			     {
				 	sum2+=w2[j];
				 	sum3+=w3[j];
				 }
				 
			     if(sumc==sum2&&sumf==sum3)
			     {
				 	*FLAG=1;
				 }
			     
			
		}
		 else 
		 {
			inc[i+1]=TRUE;
			sumset(i+1,wt+w[i+1],total-w[i+1],inc,sum,w,w2,w3,FLAG,sumc,sumf);
			inc[i+1]=FALSE;
			sumset(i+1,wt,total-w[i+1],inc,sum,w,w2,w3,FLAG,sumc,sumf);
		}
	
	}
	
}

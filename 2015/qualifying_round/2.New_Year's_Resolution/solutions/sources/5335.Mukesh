//!!!!!!!!!	NEVER GIVE UP !!!!! NEVER !!!!!!!! 
/*
USER: Mukesh 
TASK: 
ALGO: 
*/
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <utility>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <queue>
#include <sstream>
#include <iomanip>
#include <limits>
using namespace std;
//cout << fixed << setprecision(4);
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef istringstream iss; // >>
typedef ostringstream oss; //<<
#define geti(n) int n;scanf("%d",&n)
#define getl(n) long long n;cin >> n
#define getc(c) char c;cin >> c
#define rep(i,n) for(int i=0;i<n;i++)
#define puti(n) printf("%d\n",n)
#define ll long long
#define pb push_back
#define mem(p,q) memset(p,q,sizeof(p))
#define fu(i,a,n) for(int i=a;i<n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define mp make_pair
#define popcount __builtin_popcount
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
//#define d vector< vector< vector<vector<int> > > >  
typedef struct{
	int p ;
	int c ; 
	int f ; 	
}p1;
p1 food[2000];
int n ; 

int solve(int gp,int gc,int gf,int i )
{
	if(i>=n)
	{
       if(gp==0 && gc==0 && gf==0)
       	  return 1 ; 
     return -1 ;   	
	}
return max(solve(gp-food[i].p,gc-food[i].c,gf-food[i].f,i+1) , solve(gp,gc,gf,i+1)) ;   
}

int main()
{ 
   #ifdef _WIN32 
    {freopen("input.txt", "r", stdin);
     freopen("output.txt","w",stdout);}
   #endif // LOCAL_USER

geti(t);
int count = 1 ; 
while(count <= t)
{   int gp,gc,gf;

	scanf("%d %d %d %d",&gp,&gc,&gf,&n);
	int i =0 ; 
	while(i<n)
	{
      scanf("%d %d %d",&food[i].p,&food[i].c,&food[i].f);     
      i++;         
	}  
     if(solve(gp,gc,gf,0) == 1 )
     	cout<<"Case #"<<count<<": "<<"yes"<<endl ;
     else
        cout<<"Case #"<<count<<": "<<"no"<<endl;
count++;
}
}
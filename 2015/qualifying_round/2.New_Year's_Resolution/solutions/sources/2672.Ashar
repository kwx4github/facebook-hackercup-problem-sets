from itertools import chain, combinations

for tc in range(int(input())):
	GP, GC, GF = map(int, input().split())
	N = int(input())
	P, C, F = [0] * N, [0] * N, [0] * N
	for i in range(N):
		P[i], C[i], F[i] = map(int, input().split())

	print('Case #{}: '.format(tc + 1), end='')

	def valid(comb, nutrient, expected):
		return sum(map(lambda i: nutrient[i], comb)) == expected

	def possible(comb):
		return valid(comb, P, GP) and valid(comb, C, GC) and valid(comb, F, GF)
	
	print('yes' if any(map(possible, chain.from_iterable(combinations(range(N), r) for r in range(N + 1)))) else 'no')

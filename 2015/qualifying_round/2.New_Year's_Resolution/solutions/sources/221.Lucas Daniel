#include <iostream>
#include <cmath>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <utility>
#include <string>
#include <cstring>
#include <sstream>

using namespace std;

#define FOR(i, a, b) for(int i = a; i < b; ++i)
#define FORR(i, n) FOR(i, 0, n)
#define sz(a) int((a).size())
#define all(v) (v).begin(),(v).end()
#define pb push_back

typedef vector<int> vi;
typedef long long ll;

bool ok;
struct food {
	int p, c, f;
	food(int p = 0, int c = 0, int f = 0) : p(p), c(c), f(f) {}
};

food comidas[25];
bool used[25];
int gp, gc, gf;
void check(const int& n) {
	int sump, sumc, sumf;
	sump = sumc = sumf = 0;
	FORR(i, n) {
		if(used[i]) {
			sump += comidas[i].p;
			sumc += comidas[i].c;
			sumf += comidas[i].f;
		}
	}
	if(sump == gp && sumc == gc && sumf == gf) {
		ok = true;
		return;
	}
}
//Mais eficiente
void allCombination2(int pos, const int& n) {
	FOR(i, pos, n) {
		if(ok) return;
		used[i] = true;
		check(n);
		allCombination2(i+1, n);
		used[i] = false;
	}
}

int main() {
	int t, n;
	scanf(" %d", &t);
	FOR(k, 1, t+1) {
		scanf(" %d %d %d", &gp, &gc, &gf);
		scanf(" %d", &n);
		FORR(i, n) {
			scanf(" %d %d %d", &comidas[i].p, &comidas[i].c, &comidas[i].f);
			used[i] = false;
		}
		
		ok = false;
		allCombination2(0, n);
		printf("Case #%d: ", k);
		if(ok) printf("yes\n");
		else printf("no\n");
	}
	
}

#include <iostream>
#include <vector>
#include <set>
using namespace std;

set<int> dp, tmpSet;
#define BASE 1001

int encode(int a, int b, int c){
    return a*BASE*BASE + b*BASE + c;
}

vector<int> decode(int v){
    int c = v % BASE;
    v /= BASE;
    int b = v % BASE;
    v /= BASE;
    int a = v;
    vector<int> ve;
    ve.push_back(a);
    ve.push_back(b);
    ve.push_back(c);
    return ve;
}

void calDP(int t, int target[], vector<vector<int> > &items){
    dp.clear();
    dp.insert(0);
    bool found = false;
    int a,b,c;
    int na, nb, nc;
    vector<int> tmp;
    for(int i = 0; i < items.size() && !found ; i ++){
        tmpSet.clear();
        for(auto it = dp.begin(); it != dp.end() && !found ; it ++){
            tmp = decode(*it);
            na = items[i][0] + tmp[0];
            nb = items[i][1] + tmp[1];
            nc = items[i][2] + tmp[2];
            int cur = encode(na, nb, nc);
            if(na <= target[0] && nb <= target[1] && nc <= target[2] && dp.find(cur) == dp.end())
                tmpSet.insert(cur);
            if(na == target[0] && nb == target[1] && nc == target[2])
                found = true;
        }
        if(!found)
            dp.insert(tmpSet.begin(), tmpSet.end());
            //merge tmpSet and dp;
    }
    cout << "Case #" << t << ": ";
    if(found)
        cout << "yes";
    else
        cout << "no";
    cout << "\n";
}

int main(){
    int T;
    cin >> T;
    int target[3];
    for(int t = 0; t < T; t ++){
        cin >> target[0] >> target[1] >> target[2];
        int numItems;
        cin >> numItems;
        vector<vector<int> > items;
        for(int i = 0; i < numItems; i ++){
            vector<int> item;
            int tmp;
            for(int j = 0; j < 3; j ++){
                cin >> tmp;
                item.push_back(tmp);
            }
            items.push_back(item);
        }
        calDP(t+1, target, items);
    }
    return 0;
}

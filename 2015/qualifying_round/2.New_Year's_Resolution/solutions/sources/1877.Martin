def readClean(f):
	return f.readline().strip()

def parseTup(st):
	ls = []
	for e in st.split():
		ls.append(int(e))
	return tuple(ls)
def solve(workFile):
	outString = ""
	with open(workFile, 'r') as f:
		for i in range(0, int(readClean(f))):
			goal = parseTup(readClean(f))
			cases = list()
			for k in range(0, int(readClean(f))):
				cases.append(parseTup(readClean(f)))
			outString +="Case #" +str(i+1)+": " +consumable(goal, cases)+"\n"
	with open("R1P2Out.txt", 'w') as o:
		o.write(outString[:-1])

def subT(goal, c):
	ls = []
	for i in range(0, len(goal)):
		ls.append(goal[i]-c[i])
	return tuple(ls)

def rSolve(goal, cases):
	zeros = True
	for e in goal:
		if e < 0:
			return False
		zeros = zeros and (e==0)
	if zeros:
		return True
	for c in cases:
		if(rSolve(subT(goal, c), cases)):
			return True
	return False

def consumable(goal, cases):
	if(rSolve(goal, cases)):
		return "yes"
	return "no"

solve("R1P2In.txt")
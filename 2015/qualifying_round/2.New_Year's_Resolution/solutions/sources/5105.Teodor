#include<bits/stdc++.h>
using namespace std;

struct Food {
  int protein, carbs, fat;
  bool eaten;

  Food(int p = 0, int c = 0, int f = 0) {
    protein = p, carbs = c, fat = f;
    eaten = false;
  }

  bool operator==(const Food &other) const {
    return protein == other.protein && carbs == other.carbs && fat == other.fat;
  }
  Food operator+(const Food &other) const {
    Food sum;
    sum.protein = protein + other.protein;
    sum.carbs = carbs + other.carbs;
    sum.fat = fat + other.fat;

    return sum;
  }
};

bool answer;

void bkt(int pos, vector<Food> &foods, const Food &diet) {
  if (answer)
    return;

  if (pos == (int)foods.size()) {
    Food dietSum;
    for (auto food : foods)
      if (food.eaten)
        dietSum = dietSum + food;

    if (dietSum == diet)
      answer = true;
  } else {
    for (int i = 0; i < 2; ++i) {
      foods[pos].eaten = i;
      bkt(pos + 1, foods, diet);
    }
  }
}

int main() {
  FILE *fin, *fout;
  fin = fopen("input.txt", "r");
  fout = fopen("output.txt", "w");

  int t;
  fscanf(fin, "%d", &t);

  for (int T = 1; T <= t; ++T) {
    int protein, carbs, fat;
    fscanf(fin, "%d%d%d", &protein, &carbs, &fat);
    Food diet(protein, carbs, fat);

    int n;
    fscanf(fin, "%d", &n);
    vector<Food> foods;
    for (int i = 0; i < n; ++i) {
      int p, c, f;
      fscanf(fin, "%d%d%d", &p, &c, &f);
      foods.push_back(Food(p, c, f));
    }

    answer = false;
    bkt(0, foods, diet);

    fprintf(fout, "Case #%d: ", T);
    if (answer)
      fprintf(fout, "yes\n");
    else
      fprintf(fout, "no\n");
  }

  fclose(fin);
  fclose(fout);
}

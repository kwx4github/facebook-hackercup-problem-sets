import static java.lang.Integer.parseInt;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.StringTokenizer;


public class NewYearsResolution {

	static int MB = 1 << 20;
	static BufferedReader br = new BufferedReader( new InputStreamReader(System.in, StandardCharsets.US_ASCII), 10*MB);
	static StringTokenizer st;
	
	static void NL() throws Exception {
		st = new StringTokenizer(br.readLine());
	}
	
	static String NT() {
		return st.nextToken();
	}
	
	public static void main(String[] args) throws Exception {
		NL();
		int T = parseInt(NT());
		for (int ii = 1; ii <= T; ii++) {
			NL();
			int[] G = new int[3];
			for (int i = 0; i < 3; i++) G[i] = parseInt(NT());				
			
			NL();
			int N = parseInt(NT());
			int[][] C = new int[N][3];
			for (int i = 0; i < N; i++) {
				NL();
				for (int j = 0; j < 3; j++) C[i][j] = parseInt(NT());				
			}
			
			System.out.printf("Case #%d: %s%n", ii, solve(G, N, C) ? "yes" : "no");
		}
	}

	private static boolean solve(int[] G, int N, int[][] C) {
		int[] S = { 0, 0, 0 };
		for (int mask = 0; mask < 1 << N; mask++) {
			S[0] = 0; S[1] = 0; S[2] = 0;
			for (int i = 0; 1 << i <= mask; i++) 
				if ( ((1 << i) & mask) > 0)
					for (int j = 0; j < 3; j++) S[j] += C[i][j];
			if (S[0] == G[0] && S[1] == G[1] && S[2] == G[2]) return true;
		}
		return false;
	}
	
}

#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <cmath>

using namespace std;

struct food{
	int p, c, f;
	food(int p, int c, int f):p(p), c(c), f(f){}
};

bool solve(vector<food> List, food G, int i, int vP, int vC, int vF){
	if(i==List.size()){
		return vP==G.p&&vC==G.c&&vF==G.f;
	}
	int np=vP+List[i].p, nc=vC+List[i].c, nf=vF+List[i].f;
	return solve(List, G, i+1, vP, vC, vF)||solve(List, G, i+1, np, nc, nf);
}

int main(){
	int t=0;
	scanf("%d", &t);
	int m=0;
	while(t--){
		vector<food> foodList;
		int p, c, f;
		scanf("%d%d%d", &p, &c, &f);
		food target=food(p, c, f);
		int n=0;
		scanf("%d", &n);
		for(int i=0; i<n; i++){
			scanf("%d%d%d", &p, &c, &f);
			foodList.push_back(food(p, c, f));
		}
		printf("Case #%d: %s\n", ++m, solve(foodList, target, 0, 0, 0, 0)? "yes":"no");
	}
	return 0;
}


var fs = require('fs'),
    sys = require("sys"),
    bigint = require('../../../node_modules/bigint');

fs.readdir('.', function (err, data) {
    if (err) throw err;
    for (var i = 0, len = data.length; i < len; i++) {

        if (data[i].indexOf('input') !== -1) {
            fs.readFile('./'+data[i], {encoding: 'utf-8'}, function (err, data) {
                if (err) throw err;
                start(data.split("\n"));
            });            
        }
    }
});

function start(data) {

    var res = ''; var k = 1;
    for (var j = 1; j <= 1*data[0]; j++) {

        var goals = data[k].split(' ').map(function(v) {return 1*v});
        var N = 1*data[k+1];

        var items = [];

        for (var o = k+2; o < k+2+N; o++) {
            items.push(data[o].split(' ').map(function(v) {return 1*v}));
        }

        k += N+2;

        tmp = 'Case #' + j + ': ' + solve(goals, items);

        console.log(tmp);

        res += tmp + "\n";
    }
    fs.writeFileSync('./out.txt', res);
}

function solve(goals, items) {
    return iter('0,0,0', goals, items, 0, '');
}


function iter(currents, goals, items, index, checker) {
    //console.log(arguments);
    if (currents == goals.join(',')) {
        return 'yes';// - ' + checker;
    }
    if (index >= items.length) {
        return 'no';
    }
    var currentsEAT = currents.split(',').map(function(v) {return 1*v});
    var item = items[index];

    currentsEAT[0] += item[0];
    currentsEAT[1] += item[1];
    currentsEAT[2] += item[2];

    //console.log(currentsEAT);

    if (currentsEAT[0] <= goals[0] && currentsEAT[1] <= goals[1] && currentsEAT[2] <= goals[2]) {
        //lets eat
        var try2 = iter(currentsEAT.join(','), goals, items, index+1, checker + 'X')
        if (try2.indexOf('yes') != -1) return try2;
    }

    //not to eat
    return iter(currents, goals, items, index+1, checker + '.');

}
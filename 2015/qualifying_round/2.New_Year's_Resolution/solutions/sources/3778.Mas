import Control.Monad
import Control.Applicative
import Data.List
import Data.Maybe
import qualified Data.ByteString as B
import qualified Data.ByteString.Char8 as S

intc = fst . fromJust . S.readInt
getInt =  intc <$> B.getLine
getIList = map intc . S.words <$> B.getLine

solve (0,0,0) [] = True
solve (a,b,c) _  | any (< 0) [a,b,c] = False
solve (_,_,_) [] = False
solve (a,b,c) ((x,y,z):rest) = solve (a',b',c') rest || solve (a,b,c) rest
                             where a' = a - x
                                   b' = b - y
                                   c' = c - z

main = do
    t <- getInt
    forM_ [1..t] $ \i -> do
        [a,b,c] <- getIList
        n <- getInt
        xs <- replicateM n $ do
            [x,y,z] <- getIList
            return (x,y,z)
        printCase i $ solve (a,b,c) xs

printCase i b = if b then putStrLn $ go i "yes"
                     else putStrLn $ go i "no"
              where go i yn = "Case #" ++ show i ++ ": " ++ yn

#include <iostream>
#include <unordered_set>
#include <cstdlib>
#include <vector>
#include <algorithm>

using namespace std;

// typedef unordered_set set;

struct triple{
	int p, c, f;
};

struct triple_hash{
	size_t operator()(const triple& t) const {
		return t.p+t.c+t.f;
	}
};

struct triple_equal{
	
	bool operator()(const triple& x, const triple& y) const {
		return x.p == y.p && x.c == y.c && x.f == y.f;
	}
};

const string yes("yes");
const string no("no");

string ny(){
	int n;
	unordered_set< triple, triple_hash, triple_equal > s;
	triple_equal eq;
	
	triple target;
	cin >> target.p >> target.c >> target.f;
	cin >> n;

	s.insert(triple { 0, 0, 0} );
	
	for(int i = 0; i < n; ++i){
		int p, c, f;
		cin >> p >> c >> f;
		vector< triple > newt;
		for(triple t: s){
			t.p += p;
			t.c += c;
			t.f += f;
			if (t.p > target.p || t.c > target.c || t.f > target.f)
				continue;
			if (eq(t, target))
				return yes;
			newt.push_back(t);
		}
		s.insert(begin(newt), end(newt));
	}

	return no;
}


int main(){
	int t;
	cin >> t;
	for(int i = 0; i < t; ++i){
		cout << "Case #" << i + 1 << ": " << ny() << endl;
	}
	return 0;
}


#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
#include <cstdlib>
using namespace std;

struct Node{
    int p,c,f;
    bool operator<(const Node& b) const{
        if( p==b.p ){
            if( c==b.c ) return f<b.f;
            else return c<b.c;
        }
        return p<b.p;
    }
    bool operator==(const Node& b){
        return p==b.p&&c==b.c&&f==b.f;
    }
    friend Node operator+(const Node& a,const Node& b);
};

Node operator+(const Node& a,const Node& b){
    Node res;
    res.p = a.p+b.p;
    res.c = a.c+b.c;
    res.f = a.f+b.f;
    return res;
}

const int MAX_N = 22;
int T,N;
Node mat[MAX_N],stand;
bool hasAns;

void dfs(int x,Node now){
    if(hasAns) return;
    if( x>N ) return;
    if( stand<now ) return;
    if( now==stand ){
        hasAns = true;
        return;
    }
    dfs(x+1,now+mat[x]);
    dfs(x+1,now);
}

int main(){
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    scanf("%d",&T);
    for(int cases = 1 ; cases<=T ; cases++){
        scanf("%d%d%d",&stand.p,&stand.c,&stand.f);
        scanf("%d",&N);
        for(int i=0;i<N;i++){
            scanf("%d%d%d",&mat[i].p,&mat[i].c,&mat[i].f);
        }
        sort(mat,mat+N);
        hasAns = false;
        Node tmp;
        tmp.c = tmp.f = tmp.p = 0;
        dfs(0,tmp);
        if( hasAns ) printf("Case #%d: yes\n",cases);
        else printf("Case #%d: no\n",cases);
    }
    return 0;
}

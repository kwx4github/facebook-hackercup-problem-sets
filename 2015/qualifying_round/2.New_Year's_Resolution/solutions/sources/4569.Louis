#include <iostream>
#include <vector>
using namespace std;

struct Food {
    int p, c, f;
};

bool ended(const Food& goal) {
    return (goal.p == 0 and goal.c == 0 and goal.f == 0);
}

bool invalid(const Food& goal) {
    return (goal.p < 0 or goal.c < 0 or goal.f < 0);
}

Food new_goal(const Food& goal, const Food& meal) {
    Food nGoal = goal;
    nGoal.p -= meal.p;
    nGoal.c -= meal.c;
    nGoal.f -= meal.f;
    return nGoal;
}

void print(const vector<Food> meals) {
    for (unsigned int i = 0; i < meals.size(); ++i) {
        cout << "meal" << i << endl;
        cout << meals[i].p << ',' << meals[i].c << ',' << meals[i].f << endl;
    }
}

bool possible(const vector<Food> meals, Food goal) {
    //Backtracking
    if (ended(goal)) return true;
    else if (invalid(goal)) return false;
    else {
        int n = meals.size();
        vector<Food> aux = meals;
        for (int i = 0; i < n; ++i) {
            Food n_goal = new_goal(goal, aux[0]);
            aux.erase(aux.begin());
            if (possible(aux, n_goal)) return true;
        }
    }
    return false;
}

int main() {
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        Food goal;
        cin >> goal.p >> goal.c >> goal.f;
        int m;
        cin >> m;
        vector<Food> meals(m);
        for (int j = 0; j < m; ++j) {
            cin >> meals[j].p >> meals[j].c >> meals[j].f;
        }
        cout << "Case #" << i << ": ";
        if (possible(meals, goal)) cout << "yes" << endl;
        else cout << "no" << endl;
    }
}

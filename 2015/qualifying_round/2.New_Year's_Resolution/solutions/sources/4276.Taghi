package Qualification;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class NewYearResolution {

	public static void main(String[] args) throws FileNotFoundException {
		FileInputStream stream = new FileInputStream(
				new File(
						"C:\\Users\\tagi1_000\\Downloads\\new_years_resolution.txt"));
		Scanner scanner = new Scanner(stream);

		PrintWriter outFile = new PrintWriter(
				"C:\\Users\\tagi1_000\\Downloads\\solutions2.txt");
		int numberOfCases = scanner.nextInt();

		for (int i = 0; i < numberOfCases; i++) {
			// Gotta reach those
			int protein = scanner.nextInt();
			int carbo = scanner.nextInt();
			int fat = scanner.nextInt();
			boolean possible = false;
			int amountOfPossibleFood = scanner.nextInt();
			Tuple[] tuples = new Tuple[amountOfPossibleFood];
			int[] binaries = new int[amountOfPossibleFood];
			for (int j = 0; j < amountOfPossibleFood; j++) {
				int p = scanner.nextInt();
				int c = scanner.nextInt();
				int f = scanner.nextInt();
				if (p == protein && carbo == c && fat == f)
					possible = true;
				Tuple tuple = new Tuple(p, c, f);
				tuples[j] = tuple;
			}

			// Solve it here.
			if (!possible)
				possible = solve(protein, carbo, fat, tuples, binaries);

			if (possible)
				outFile.println("Case #" + (i + 1) + ": yes");
			else
				outFile.println("Case #" + (i + 1) + ": no");
		}
		outFile.close();
		scanner.close();
	}

	public static boolean solve(int p, int c, int f, Tuple[] tuples,
			int[] binaries) {
		if (p == 0 && c == 0 && f == 0)
			return true;
		// Smart search for all possibilities.
		boolean done = true;
		for (int i = 0; i < tuples.length; i++) {
			if (binaries[i] == 0) {
				done = false;
				int p2 = tuples[i].p;
				int c2 = tuples[i].c;
				int f2 = tuples[i].f;
				binaries[i] = 1;
				// recursive call
				if (p2 <= p && c2 <= c && f2 <= f) {
					boolean possible = solve(p - p2, c - c2, f - f2, tuples,
							binaries);
					if (possible)
						return true;
				}
				binaries[i] = 0;

			}
		}
		
		return false;
	}

	public static class Tuple {
		int p, c, f;

		public Tuple(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}

		public int getP() {
			return p;
		}

		public int getC() {
			return c;
		}

		public int getF() {
			return f;
		}
	}

}

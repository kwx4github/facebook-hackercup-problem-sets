#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

struct power{
	int Gp, Gc, Gf;
	
	power(){
		Gp = Gc = Gf = 0;
	}

	void set(int A, int B, int C){
		Gp = A;
		Gc = B;
		Gf = C;
	}

	int operator -(power oper){
		return (Gp - oper.Gp) + (Gc - oper.Gc) + (Gf - oper.Gf);
	}

};

vector<power> list;


bool solve(power inst, int index){

	int diff = inst - list[index];
	
	if (diff == 0)
		return true;
	else if (diff < 0)
		return false;


	power new_pow;
	new_pow.set(inst.Gp - list[index].Gp, inst.Gc - list[index].Gc, inst.Gf - list[index].Gf);

	for (int i = index+1; i < list.size(); i++){
		if (solve(new_pow, i))
			return true;
	}
	return false;
}




int main(){

	freopen("input.in", "r", stdin);
	freopen("output.out", "w", stdout);
	
	power initial;
	int T, N;
	bool b = false;
	cin >> T;
	
	for (int i = 1; i <= T; i++){
		cin >> initial.Gp >> initial.Gc >> initial.Gf >> N;
		list.resize(N);
		for (int j = 0; j < N; j++){
			cin >> list[j].Gp >> list[j].Gc >> list[j].Gf;
		}

		for (int j = 0; j < N; j++){
			if (solve(initial, j)){
				cout << "Case #" << i << ": yes\n";
				b = true;
				break;
			}
		}

		if (!b)
			cout << "Case #" << i << ": no\n";

		b = false;
		list.clear();
	}



	return 0;
}
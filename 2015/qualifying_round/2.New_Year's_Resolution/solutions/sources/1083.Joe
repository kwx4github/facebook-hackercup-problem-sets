#include<fstream>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<string>
#include<vector>
#include<list>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<functional>
#include<numeric>
using namespace std;
typedef pair<int, int> pii;
typedef long long ll;

namespace
{
	struct point
	{
		point(int _p=0, int _c=0, int _f=0)
			: p(_p), c(_c), f(_f) {}

		bool operator==(const point& rhs)
		{
			return p == rhs.p && c == rhs.c && f == rhs.f;
		}
		int p, c, f;
	};

	point operator+(const point& l, const point& r)
	{
		return point(l.p + r.p, l.c + r.c, l.f + r.f);
	}

	int whichBit(int x)
	{
		int ret(0);
		while ((x & 1) == 0)
			++ret, x /= 2;
		return ret;
	}

	int N;
	point target;
	point ap[20];
	point mem[1 << 20];
}

//int mainFHC15_Q_NYR()
int main()
{
	ifstream fin("FHC\\new_years_resolution.txt");
	ofstream fout("FHC\\new_years_resolution_out.txt");

	unsigned int numberOfCases;
	fin >> numberOfCases;

	for (unsigned int zz = 1; zz <= numberOfCases; ++zz)
	{
		fin >> target.p >> target.c >> target.f;
		
		fin >> N;
		for (int i = 0; i < N; ++i)
			fin >> ap[i].p >> ap[i].c >> ap[i].f;

		string ret = "no";
		memset(mem, 0, sizeof(mem));

		for (int m = 1; m < (1 << N); ++m)
		{
			int b = whichBit(m);
			point last = mem[m - (1 << b)];
			point add = ap[b];

			mem[m] = last + add;
			if (mem[m] == target)
				ret = "yes";
		}
		
		fout << "Case #" << zz << ": " << ret << endl;
	}

	return 0;
}
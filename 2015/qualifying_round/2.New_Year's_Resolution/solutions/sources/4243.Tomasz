#include <iostream>
#include <vector>
#include <bitset>
using namespace std;

struct food {
    int p,c,f;
};

struct perm {
    bool * x;
    int N;
};

perm * firstPerm(int n) {
    perm * p = new perm;
    p->N = n;
    p->x = new bool [n];
    for (int i = 0; i < n; i++) p->x[i] = false;
    p->x[0] = true;
    return p;
}

void nextPerm(perm * p) {
    bool rem = true;
    for (int i = 0; i < p->N; i++) {
	if (p->x[i]) {
	    if (rem) {
		p->x[i]=false;
		rem=true;
	    } // else nothing
	} else if (rem) {
	    p->x[i] = true;
	    rem = false;
	}
    }
}

bool isLastPerm(perm * p) {
    bool foo = true;
    for (int i = 0; i < p->N; i++) {
	foo = foo && p->x[i];
    }
    return foo;
}

void killPerm(perm * p) {
    delete [] p->x;
    delete p;
}

void coutPerm(perm * p) {
    char c;
    cout << "Perm: ";
    for (int i = 0; i < p->N; i++) {
	c = (p->x[i]) ? '1' : '0' ;
	cout << c;
    }
    cout << endl;
}

food newFood(int p, int c, int f) {
    food foo;
    foo.p = p;
    foo.c = c;
    foo.f = f;
    return foo;
}

bool testPerm(vector<food> foods, perm * p, int P, int C, int F) {
    int sum[3];
    sum[0] = sum[1] = sum[2] = 0;
    for (int i = 0; i < p->N; i++) {
	if (p->x[i]) {
	    sum[0] += foods[i].p;
	    sum[1] += foods[i].c;
	    sum[2] += foods[i].f;
	}
    }
    return sum[0] == P && sum[1] == C && sum[2] == F;
}

int main() {
    int T, i, j, P, C, F, p, c, f, N, sum[3];
    bool possible;
    vector<food> foods;
    perm * per;

    cin >> T;
    for (i = 0; i < T; i++) {
	possible = false;
	cin >> P >> C >> F >> N;
	sum[0] = sum[1] = sum[2] = 0;
	foods.clear();
	for (j = 0; j < N; j++) {
	    cin >> p >> c >> f;
	    sum[0] += p;
	    sum[1] += c;
	    sum[2] += f;
	    foods.push_back(newFood(p, c, f));
	}
	cout << "Case #" << i+1 << ": ";
	
	if (P == sum[0] && C == sum[1] && F == sum[2]) possible = true;
	else if (P <= sum[0] && C <= sum[1] && F <= sum[2]) {
	    //cout << " foo ";
	    per = firstPerm(N);
	    do {
		possible = testPerm(foods, per, P, C, F);
		nextPerm(per);
	    } while (! isLastPerm(per) && ! possible);
	    killPerm(per);
	}

	if (possible) cout << "yes\n";
	else cout << "no\n";
	//cout << sum[0] << " " << sum[1] << " " << sum[2] << endl;
    }

    return 0;
}

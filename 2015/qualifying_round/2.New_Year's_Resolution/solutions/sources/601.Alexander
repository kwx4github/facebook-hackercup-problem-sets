#include <iostream>
#include <fstream> 
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cassert>
#include <complex>
#include <bitset>
#include <map>
#include <set>
#include <ctime>
#include <cfloat>

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i, k, n) for (int i = (int)(k); i < (int)(n); i++)
#define forba(i, n, k) for (int i = (int)(n) - 1; i >= (int)(k); i--)

#define vi vector<int>
#define pii pair<int, int>
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x)*(x))
#define X first
#define Y second
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef double ld; 

const ld pi = acos(-1.0);
const ld eps = 1e-8;
const int INF = 1E9;
const ll LINF = 1E18;		
const int MAXN = 20;
const int MAXM = 1 << MAXN;

int t, n;
int res[3];
int a[MAXN][3], sum[MAXM][3];
bool f;
           
int main() {
	
	cin >> t;
	forn(tt, t) {
		printf("Case #%d: ", tt + 1);
		
		forn(i, 3)
			cin >> res[i];
		cin >> n;
		forn(i, n)
			forn(j, 3)
				cin >> a[i][j];
				
		forn(i, n)
			sum[0][i] = 0;	
			
		f = 0;
		for (int i = 1; i < (1 << n); i++) {
			forn(j, n)
				if ((i >> j) & 1) {
					forn(k, 3)
						sum[i][k] = sum[i - (1 << j)][k] + a[j][k];
					f |= (sum[i][0] == res[0] && sum[i][1] == res[1] && sum[i][2] == res[2]);
					break;
				}		}			
		cout << (f ? "yes" : "no") << '\n';
	}   
							   		
	return 0;
}
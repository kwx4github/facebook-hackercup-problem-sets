import itertools
import time

def proceed(alex_requirement, foods):
    p_req = int(alex_requirement[0])
    c_req = int(alex_requirement[1])
    f_req = int(alex_requirement[2])

    p_foods = []
    c_foods = []
    f_foods = []

    for food in foods:
        p_foods.append(int(food[0]))
        c_foods.append(int(food[1]))
        f_foods.append(int(food[2]))

    if sum(p_foods) < p_req or sum(c_foods)<c_req or sum(f_foods)<f_req:
        return "no"
    p_dict = {}
    p_list = []
    for p_i in xrange(len(p_foods) + 1):
            for subset in itertools.combinations(p_foods, p_i):
               p_list.append(subset)
    p_dict.update(enumerate(p_list))
    
    c_dict = {}
    c_list = []
    for c_i in xrange(len(c_foods) + 1):
            for subset in itertools.combinations(c_foods, c_i):
               c_list.append(subset)
    c_dict.update(enumerate(c_list))
    
    f_dict = {}
    f_list = []
    for f_i in xrange(len(f_foods) + 1):
            for subset in itertools.combinations(f_foods, f_i):
               f_list.append(subset)
    f_dict.update(enumerate(f_list))

    for k in p_dict.keys():
        if sum(p_dict[k]) == p_req and sum(f_dict[k])==f_req and sum(c_dict[k])==c_req:
            return "yes"
    return "no"



if __name__ == '__main__':
    start = time.time()
    with open('new_years_resolution.txt') as f:
        with open('output', 'w') as output:
            tests_count = int(f.readline())
            for test_number in xrange(1, tests_count + 1):
                alex_requirement = f.readline().rstrip("\n").split(" ")
                foods_count = int(f.readline())
                # print foods_count
                foods = []
                for i in xrange(foods_count):
                    food = f.readline().rstrip("\n").split(" ")
                    foods.append(food)
                result = proceed(alex_requirement, foods)
                output.write("Case #{number}: {result}\n".format(number=test_number, result=result))

    end = time.time()
    print end-start

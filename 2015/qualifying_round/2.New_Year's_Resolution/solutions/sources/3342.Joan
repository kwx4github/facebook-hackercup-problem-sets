#!/usr/bin/env python


# Backtracking schema 
class Healthy():
  def __init__(self, food, calories):
    # Init the backtracking
    self.N = len(food)
    self.food = food
    self.calories = calories
    self.sol = [False for _ in range(self.N)]

  def is_promising(self, p): 
    if p == 0:
        return True
    current = [0, 0, 0]
    for i in range(p):
        if self.sol[i]:
            for c in range(3):
                current[c] += self.food[i][c]
                if current[c] > self.calories[c]:
                    return False
    if p == self.N:
        for c in range(3):
            if current[c] != self.calories[c]:
                return False

    return True
   
  def backtracking(self, p):
    if p == self.N:
      return self.is_promising(p)
    if not self.is_promising(p):
		  return False

    self.sol[p] = True
    if self.backtracking(p+1):
      return True
    self.sol[p] = False

    return self.backtracking(p+1)

  def solve(self):
    return self.backtracking(0)

if __name__ == "__main__":
    T =  int(raw_input())
    for t in range(T):
        Gp, Gc, Gf = map(int, raw_input().split())
        n = int(raw_input())
        food = []
        for i in range(n):
            food.append(map(int, raw_input().split()))
        healthy = Healthy(food, [Gp, Gc, Gf])
        sol = healthy.solve()
        print "Case #%d:" % (t+1),
        if sol:
          print "yes"
        else:
          print "no"

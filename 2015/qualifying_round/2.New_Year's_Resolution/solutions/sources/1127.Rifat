//#include <bits/stdc++.h>

#include <iostream>
#include <algorithm>
#include <vector>
#include <sstream>
#include <fstream>
#include <string>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <numeric>
#include <stack>
#include <functional>
#include <bitset>
#include <iomanip>

#include <ctime>
#include <cassert>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <climits>
#include <cstring>
#include <cstdlib>

#define _ ios_base::sync_with_stdio(0);
#define ms(ar,val) memset(ar,val,sizeof(ar))
#define all(s) (s).begin(),(s).end()
#define rp1(i,s,n) for(int i=s;i<n;++i)
#define rp(i,n) rp1(i,0,n)
#define abs(x) (((x)< 0) ? (-(x)) : (x))
#define pb push_back
#define LL long long
#define Read(x) freopen(x,"r",stdin)
#define Write(x) freopen(x,"w",stdout)
#define st(N,pos) (sts[N]=sts[N] | (1<<pos))
#define check(N,pos) ((bool)(sts[N] & (1<<pos)))
#define i_s(num)  static_cast<ostringstream*>( &(ostringstream() << num) )->str();
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define PQ priority_queue
#define GSORT(x) sort(ALL(x), greater<typeof(*((x).begin()))>())
#define UNIQUE(v) sort(all(v)); (v).resize(unique(all(v)) - (v).begin())
#define F first
#define S second
#define bits(n) __builtin_popcount(n)
#define EPS 1e-11
#define PI (atan(1)*4)
///int month[]={31,28,31,30,31,30,31,31,30,31,30,31}; //month


using namespace std;
int gcd(int a, int b)
{
    while(b) b ^= a ^= b ^= a %= b;
    return a;
}
#define maxn 25
int n,ar[maxn][3],P,C,F;
bool yes;
vector <int> ans[3];
void fun(int id,int p,int c,int f){
    if(id==n){
      if(p==P && c==C && f==F)yes=1;
      return ;
    }
    fun(id+1,p+ar[id][0],c+ar[id][1],f+ar[id][2]);
    fun(id+1,p,c,f);
    return ;
}
int main()
{
     #if defined( rifat_pc )
        Write("out.txt");
        Read("new_years_resolution.txt");
    #endif
    int tst,cnt=1;
    cin>>tst;
    while(tst--){
        rp(i,3)ans[i].clear();
        cin>>P>>C>>F;
        cin>>n;
        rp(i,n){
            cin>>ar[i][0]>>ar[i][1]>>ar[i][2];
        }
        yes = 0;
        fun(0,0,0,0);
        if(yes)printf("Case #%d: yes\n",cnt++);
        else printf("Case #%d: no\n",cnt++);
    }

    return 0;

}



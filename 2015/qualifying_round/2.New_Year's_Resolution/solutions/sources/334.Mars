// mars.ma
#include <iostream>
#include <vector>
#include <bitset>
#include <tuple>

using namespace std;

int main(void)
{
  int testcase;  cin >> testcase;
  for (int tc = 0; tc < testcase; ++tc) {
    int protein, carbohydrates, fat;
    cin >> protein >> carbohydrates >> fat;
    auto sum = make_tuple(protein, carbohydrates, fat);

    int n;  cin >> n;
    vector<tuple<int, int, int> > foods;
    for (int j = 0; j < n; j++) {
      cin >> protein >> carbohydrates >> fat;
      foods.push_back(make_tuple(protein, carbohydrates, fat));
    }

    bool result = false;
    int limit = 1<<n;
    for (int i = 1; i < limit; ++i) {
      bitset<20> bset(i);
      auto combine = make_tuple(0, 0, 0);
      for (int bit = 0; bit < n; ++bit) {
        if (bset.test(bit)) {
          std::get<0>(combine) += std::get<0>(foods[bit]);
          std::get<1>(combine) += std::get<1>(foods[bit]);
          std::get<2>(combine) += std::get<2>(foods[bit]);
        }
      }

      if (combine == sum) {
        result = true;
        break;
      }
    }

    cout << "Case #" << tc+1 << ": " << (result ? "yes" : "no") << endl;
  }

  return 0;
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Qual2
{
	class Program
	{
		static void Main(string[] args)
		{
			var cases = Read.Int();

			using (var s = new StreamWriter(@"c:\users\krox\Downloads\HackerCup\Qual2.out", false))
			{
				for (var t = 0; t < cases; t++)
				{
					var answer = "Case #" + (t + 1) + ": " + Solve() + "\n";
					Console.Write(answer);
					s.Write(answer);
				}
			}

			Console.ReadLine();
		}

		private static IList<int[]> Fruits;

		private static string Solve()
		{
			var targets = new[] { Read.Int(), Read.Int(), Read.Int() };
			var c = Read.Int();
			Fruits = new List<int[]>();

			for(int i=0; i < c; i++)
			{
				Fruits.Add(new[] { Read.Int(), Read.Int(), Read.Int() });
			}

			return Rec(0, targets) ? "yes" : "no";
		}

		private static bool Rec(int ndx, int[] left)
		{
			if (left.Any(t => t < 0))
			{
				return false;
			}

			if (left.All(t => t == 0))
			{
				return true;
			}

			if (ndx >= Fruits.Count)
			{
				return false;
			}

			return
				Rec(ndx + 1, left.Select((t, i) => t - Fruits[ndx][i]).ToArray())
				||
				Rec(ndx + 1, left);
		}
	}

	public static class Read
	{
		private static string[] input = ReadAllText().Split(new[] { ' ', '\r', '\n', '\t' }, StringSplitOptions.RemoveEmptyEntries);

		private static int indexer = 0;

		public static int Int()
		{
			return int.Parse(input[indexer++]);
		}

		public static long Long()
		{
			return long.Parse(input[indexer++]);
		}

		public static string String()
		{
			return input[indexer++];
		}

		private static string ReadAllText()
		{
			return File.ReadAllText(@"c:\users\krox\Downloads\HackerCup\Qual2.in");
		}
	}
}

#include<iostream>
#include<cstdio>
#include<cstdlib>

using namespace std;

typedef long long ll;

struct Node {
	int x,y,z;
};

int compareX(const void *a, const void *b) {
	Node *p1 = (Node *)a;
	Node *p2 = (Node *)b;
	return (p1->x - p2->x);
}

int compareY(const void *a, const void *b) {
	Node *p1 = (Node *)a;
	Node *p2 = (Node *)b;
	return (p1->y - p2->y);
}

int compareZ(const void *a, const void *b) {
	Node *p1 = (Node *)a;
	Node *p2 = (Node *)b;
	return (p1->z - p2->z);
}

int gp,gc,gf;
bool ans;

void recur(Node *node, Node update, int start, int end) {
	for(int i=end;i>=start;i--) {
		if( (update.x + node[i].x) > gp || (update.y + node[i].y) > gc || (update.z + node[i].z) > gf ) {
			end--;
		}
		else if ( (update.x + node[i].x) < gp || (update.y + node[i].y) < gc || (update.z + node[i].z) < gf ) {
			break;
		}
		else {
			ans = true;
			return;
		}
	}
	for(int i=start;i<=end;i++) {
		update.x += node[i].x;
		update.y += node[i].y;
		update.z += node[i].z;
		recur(node,update,i+1,end);
		if(ans == true)
			return;
		update.x -= node[i].x;
		update.y -= node[i].y;
		update.z -= node[i].z;
	}
}

int main() {
	int t,k=1;
	scanf("%d",&t);
	while(t--) {
		scanf("%d %d %d",&gp,&gc,&gf);
		int n;
		scanf("%d",&n);
		Node P[n];
		for(int i=0;i<n;i++) {
			scanf("%d %d %d",&P[i].x,&P[i].y,&P[i].z);
		}
		/*Solve*/
		qsort(P,n,sizeof(Node),compareZ);
		qsort(P,n,sizeof(Node),compareY);
		qsort(P,n,sizeof(Node),compareX);
		
		ans = false;
		
		Node update;
		update.x = 0;
		update.y = 0;
		update.z = 0;
		
		recur(P,update,0,n-1);
		
		if(ans) {
			cout << "Case #" << k++ << ": yes\n";
		}
		else {
			cout << "Case #" << k++ << ": no\n";
		}
	}
	return 0;
}

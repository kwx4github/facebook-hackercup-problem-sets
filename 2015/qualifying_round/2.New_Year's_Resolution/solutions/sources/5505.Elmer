#include <bits/stdc++.h>
using namespace std;
#define input freopen("in.txt","r",stdin)
#define output freopen("ride.out","w",stdout)
#define FOR(i,a,b) for(int i=a;i<b;i++)
  #define FORD(i,a,b) for(int i=a;i>=b;i--)
  #define REP(i,n) FOR(i,0,n)
  #define PB push_back
  #define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)
  #define mod 1000000007
  #define MAXN 1000010
  #define EPS 1e-8
  #define PI acos(-1)
  #define Vector Point
  struct alimento{
	int x,y,z;
	alimento resta(alimento a,alimento b)
	{
	    a.x=a.x-b.x;
	    a.y=a.y-b.y;
	    a.z=a.z-b.z;
	    return a;
	}
};
  bool isSubsetSum2(int set[], int n, int sum)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    bool subset[sum+1][n+1];

    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
      subset[0][i] = true;

    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
      subset[i][0] = false;

     // Fill the subset table in botton up manner
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
     }
/*    for (int i = 0; i <= sum; i++)
     {
       for (int j = 0; j <= n; j++)
          printf ("%4d", subset[i][j]);
       printf("\n");
     }

*/
     return subset[sum][n];
}
bool isSubsetSum(alimento set[], int n, alimento sum)
{
   // Base Cases
   if (sum.x == 0 && sum.y==0 && sum.z==0)
     return true;
   if (n == 0 && (sum.x != 0 || sum.y!=0 || sum.z!=0))
     return false;

   // If last element is greater than sum, then ignore it
   if (set[n-1].x > sum.x && set[n-1].y > sum.y && set[n-1].z > sum.z)
     return isSubsetSum(set, n-1, sum);

   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */

   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1,sum.resta(sum,set[n-1]));
}
int main()
{   input;
output;
   // alimento xx;
   // xx.x=222;
    //xx.y=33;
    //cout<<xx.x<<xx.y;
    int t;
    cin>>t;
    int n;
    alimento a;
    FOR(i,0,t)
    {cin>>a.x>>a.y>>a.z;

    cin>>n;
    //vector<int>a1(n);vector<int>b1(n);vector<int>c1(n);

    alimento a1[n];
  //  if(i==1)cout<<"asdas"<<a1[0].x<<endl;
     FOR(j,0,n)
        {/*cin>>x>>y>>z;
        if(x<=a.x && y<=a.y && z<=a.z)
            {
            a.x=x;a.y=y;a.z=z;
            }*/
            cin>>a1[j].x>>a1[j].y>>a1[j].z;
        }

        if(isSubsetSum(a1,n,a))cout<<"Case #"<<i+1<<": "<<"yes"<<endl;

        else cout<<"Case #"<<i+1<<": "<<"no"<<endl;
    }


    return 0;
}

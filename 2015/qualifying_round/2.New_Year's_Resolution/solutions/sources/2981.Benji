def driver():
	input = readInput()
	input = formatInput(input)
	
	output = processInput(input)
	writeOutput(output)
	
def readInput():
	f = open("in.txt", "r")
	input = f.readlines()
	f.close()
	return input
	
def writeOutput(output):

	f = open("out.txt", "w")
	for line in output:
		f.write(line + "\n")
		
	
def formatInput(input):
	numCases = int(input[0])
	formattedInput = []
	lineIndex = 1
	
	for i in range(numCases):
		case = [ lineToIntList(input[lineIndex]) ]
		lineIndex += 1
		numFoods = int(input[lineIndex])
		lineIndex += 1
		
		for j in range(numFoods):
			foodLine = input[lineIndex]
			foodInts = lineToIntList(foodLine)
				
			case += [foodInts]
			lineIndex += 1
			
		formattedInput += [case]
		
	return formattedInput
	
def lineToIntList(line):
	ints = []
	strings = line.split()
	for string in strings:
		ints += [int(string)]
	return ints
		
def processInput(input):
	output = []
	for caseNum in range(len(input)):
		case = input[caseNum]
		answer = processCase(case)
		output += ["Case #" + str(caseNum + 1) + ": " + answer]
		
	return output
	
def processCase(case):
	target = case[0]
	foods = case[1:]
	choices = [[0, 0, 0]]
	
	for food in foods:
		for choice in choices:
			newChoice = addNutrients(food, choice)
			
			if choiceLegal(target, newChoice):
				choices += [newChoice]
				
			if choicesEqual(target, newChoice):
				return "yes"
				
	return "no"
	
def addNutrients(foodA, foodB):
	nutA = foodA[0] + foodB[0]
	nutB = foodA[1] + foodB[1]
	nutC = foodA[2] + foodB[2]
	return [nutA, nutB, nutC]
	
def choicesEqual(foodA, foodB):
	return (foodA[0] == foodB[0]
	and foodA[1] == foodB[1]
	and foodA[2] == foodB[2])
	
def choiceLegal(max, choice):
	return (max[0] >= choice[0]
	and max[1] >= choice[1]
	and max[2] >= choice[2])
		
driver()
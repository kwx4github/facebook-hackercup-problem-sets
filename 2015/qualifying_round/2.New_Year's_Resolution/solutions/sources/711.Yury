module Main where

import Control.Monad
import Text.Printf

type Triple = (Int, Int, Int)

add :: Triple -> Triple -> Triple
add (a, b, c) (x, y, z) = (a + x, b + y, c + z)

readInt :: IO Int
readInt = liftM read getLine

readTriple :: IO Triple
readTriple =
    do (p:c:f:_) <- liftM (map read . words) getLine
       return (p, c, f)

subseq :: [a] -> [[a]]
subseq [] = [[]]
subseq (x:xs) = xss ++ map (x:) xss
    where xss = subseq xs

dietPossible :: Triple -> [Triple] -> Bool
dietPossible target foods = any ((==) target . foldl add empty) $ subseq foods
    where empty = (0, 0, 0)

main :: IO ()
main = do
  numTests <- readInt
  forM_ [1 .. numTests] $ \testNum -> do
         target   <- readTriple
         numFoods <- readInt
         foods    <- replicateM numFoods readTriple
         let result = if dietPossible target foods then "yes" else "no"
         printf "Case #%d: %s\n" testNum result

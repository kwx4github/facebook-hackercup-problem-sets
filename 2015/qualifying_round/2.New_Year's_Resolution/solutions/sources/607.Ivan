#include <algorithm>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int MAXN = 21;
int n;
int V[MAXN][3];
int need[3];
int cur[3];
bool can(int at) {
    for (int i=0; i<3; ++i) {
        if (cur[i] > need[i]) {
            return false;
        }
    }
    if (at == n) {
        for (int i=0; i<3; ++i) {
            if (cur[i] != need[i]) {
                return false;
            }
        }
        return true;
    } else {
        if (can(at+1)) {
            return true;
        }
        for (int i=0; i<3; ++i) {
            cur[i] += V[at][i];
        }
        if (can(at+1)) {
            return true;
        }
        for (int i=0; i<3; ++i) {
            cur[i] -= V[at][i];
        }
        return false;
    }
}
bool solve() {
    for (int i=0; i<3; ++i) {
        cin >> need[i];
    }
    cin >> n;
    for (int i=0; i<n; ++i) {
        for (int j=0; j<3; ++j) {
            cin >> V[i][j];
        }
    }
    memset(cur, 0, sizeof cur);
    return can(0);
}
int main() {
    int T;
    cin >> T;
    for (int i=1; i<=T; ++i) {
        cout << "Case #" << i << ": " << (solve() ? "yes" : "no") << '\n';
    }
}

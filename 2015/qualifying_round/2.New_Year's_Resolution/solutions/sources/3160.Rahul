import java.io.BufferedReader;
import java.io.FileReader;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Protein {

  public static void main(String[] args) throws Exception {

  	String FILE_NAME = "new_years_resolution_example_input.txt";
  	BufferedReader br = null;
    try {

    	br = new BufferedReader(new FileReader(FILE_NAME));
      int numberOfTestCases = Integer.parseInt(br.readLine());

      int caseNumber = 1;

      while (numberOfTestCases-- > 0) {

        String totalNutrientsLine = br.readLine();
        String[] totalNutrientsLineSplit = totalNutrientsLine.split("\\s+");
        int gp = Integer.parseInt(totalNutrientsLineSplit[0]);
        int gc = Integer.parseInt(totalNutrientsLineSplit[1]);
        int gf = Integer.parseInt(totalNutrientsLineSplit[2]);

        int testFoodLines = Integer.parseInt(br.readLine());

        ArrayList<Integer> pList = new ArrayList<Integer>();
        ArrayList<Integer> cList = new ArrayList<Integer>();
        ArrayList<Integer> fList = new ArrayList<Integer>();

        while ( testFoodLines-- > 0) {
          String nutrientsLine = br.readLine();
          String[] nutrientsLineSplit = nutrientsLine.split("\\s+");
          pList.add(Integer.parseInt(nutrientsLineSplit[0]));
          cList.add(Integer.parseInt(nutrientsLineSplit[1]));
          fList.add(Integer.parseInt(nutrientsLineSplit[2]));
        }
        System.out.println("Case #" + caseNumber++ + ": " + getSubsetSumsAllNutrients(pList, cList, fList, gp, gc, gf) );
      }

    } finally { br.close(); }
  }
  
  //2^20 + 2^20 + 2^20 order
  private static final String getSubsetSumsAllNutrients(ArrayList<Integer> pList, ArrayList<Integer> cList, ArrayList<Integer> fList, int gp, int gc, int gf) {


    ArrayList<ArrayList<Integer>> subsetSumsPList = new ArrayList<ArrayList<Integer>>();
    ArrayList<ArrayList<Integer>> subsetSumsCList = new ArrayList<ArrayList<Integer>>();
    ArrayList<ArrayList<Integer>> subsetSumsFList = new ArrayList<ArrayList<Integer>>();

    getSubsetSums(pList, gp, new ArrayList<Integer>(), new ArrayList<Integer>(), 0, subsetSumsPList);
    getSubsetSums(cList, gc, new ArrayList<Integer>(), new ArrayList<Integer>(), 0, subsetSumsCList);
    getSubsetSums(fList, gf, new ArrayList<Integer>(), new ArrayList<Integer>(), 0 , subsetSumsFList);

    // find matching subsets, if one match found all 3 return yes
    ArrayList<ArrayList<Integer>> matching =  matchingSubsetsExist(subsetSumsPList, subsetSumsCList);
    matching =  matchingSubsetsExist(matching, subsetSumsFList);

    if (matching.size() > 0 ) {
      return "yes";
    }
    return "no";
  }

  private static final void getSubsetSums(ArrayList<Integer> numbers, int target, ArrayList<Integer> partialNumbers,  ArrayList<Integer> partialIndex, int index, ArrayList<ArrayList<Integer>> subsets) {
    
    int runningSum = 0;

    for (int num : partialNumbers)  { runningSum += num; }
    if (runningSum == target) {  Collections.sort(partialIndex); subsets.add(partialIndex); }
    if (runningSum >= target) { return; }

    for(int i = 0; i < numbers.size(); i++) {

       ArrayList<Integer> remainingNumbers = new ArrayList<Integer>();
       int n = numbers.get(i);

       for (int j= i + 1 ; j < numbers.size() ; j++) {
        remainingNumbers.add(numbers.get(j));
       } 

       ArrayList<Integer> partialList = new ArrayList<Integer>(partialNumbers);
       ArrayList<Integer> partialListIndex = new ArrayList<Integer>(partialIndex);
       partialList.add(n);
       partialListIndex.add(index+i);

       getSubsetSums(remainingNumbers, target, partialList, partialListIndex,  index + i + 1, subsets);
    }
  }

  private static final ArrayList<ArrayList<Integer>> matchingSubsetsExist(ArrayList<ArrayList<Integer>> subsets1, ArrayList<ArrayList<Integer>> subsets2) {

    ArrayList<ArrayList<Integer>> matching = new ArrayList<ArrayList<Integer>>(); 
    for (ArrayList<Integer> subset1 : subsets1 ) {
        for (ArrayList<Integer> subset2 : subsets2 ) {
          if (subset1.size() == subset2.size()) {
            if (subset1.equals(subset2)) {
              matching.add(subset1);
            }
          }
        }
    }
    return matching;
  }

}
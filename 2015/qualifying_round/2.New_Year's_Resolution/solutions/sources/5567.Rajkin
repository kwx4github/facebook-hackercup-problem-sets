import java.io.*;
import java.util.*;

public class B{
	
	public static int pro,car,fat,N;
	public static int [] proA;
	public static int [] carA;
	public static int [] fatA;
	public static boolean ok;
	
	
	
	
	
	
	
	public static boolean call(int i,int a1,int a2,int a3)
	{
		
		if(i>=N) {
			if(a1==pro && a2==car && a3==fat){
				return true; 
			}
			else{
				return false;
			}
		}
		boolean ret1=false,ret2=false;
		if(a1+proA[i]<=pro && a2+carA[i]<=car && a3+fatA[i]<=fat) ret1=call(i+1,a1+proA[i],a2+carA[i],a3+fatA[i]);
		ret2=call(i+1,a1,a2,a3);
		return ret1 || ret2;
		
	}
	

	
	

	
	public static void main(String[] args){
		
		//Scanner k = new Scanner(new File("E:/new_years_resolution.txt"));
		FI k = new FI(System.in);
		FO z = new FO();
		//PrintWriter z = new PrintWriter(new FileWriter("E:/output.txt"));
		
		
		int T = k.nextInt();
		int test = 1;
		while(T-->0){
			pro = k.nextInt();
			car = k.nextInt();
			fat = k.nextInt();
			N = k.nextInt();
			
			proA = new int[N];
			carA = new int[N];
			fatA = new int[N];
			

			
			for(int c = 0;c<N;c++){
				proA[c] = k.nextInt();
				carA[c] = k.nextInt();
				fatA[c] = k.nextInt();
			}
			
			ok = false; 
			if(call(0,0,0,0)){
				ok = true;
			}
			
			if(ok){
				z.println("Case #"+(test++)+": yes");
			}
			else{
				z.println("Case #"+(test++)+": no");
			}
			
			
			
				
				
				
		}
			
		z.flush();

	
	
	
	
	}
	

	
    public static class FI{
        InputStream in; byte b; byte[] buf; int bi, bz;
        FI(InputStream I) { in=I; buf=new byte[65536]; bi=bz=0; read(); }
        void skip() { while (b >= 0 && b <= 32) read(); }
        void read() {
            if (bi==bz) {
                bi=0; try { bz=in.read(buf); } catch(Exception e) { bz=-1; } }
            b = bz == -1 ? -1 : buf[bi++];  }
        // Optional methods
        boolean hasNext() { skip(); return b >= 0; }
        String next() {
            StringBuilder sb = new StringBuilder();
            for (skip(); b > 32; read()) sb.append((char)b);
            return sb.length() == 0 ? null : sb.toString(); }
        int nextInt() {
            int i=0; boolean s=false; skip();
            if (b == '-') { s=true; read(); }
            for (; b > 32; read()) i = i*10 + b-48; return s ? -i : i; }
        long nextLong() {
            long i=0; boolean s=false; skip();
            if (b == '-') { s=true; read(); }
            for (; b > 32; read()) i = i*10 + b-48; return s ? -i : i; }
        String nextLine() {
            StringBuilder sb = new StringBuilder();
            for (; b != 10 && b != 13; read()) sb.append((char)b);
            while (b == 10 || b == 13) read(); return sb.toString(); }
        String nextRealLine() {
            StringBuilder sb = new StringBuilder();
            for (; b != 10 && b != 13; read()) sb.append((char)b);
            byte p = b; read();
            if ((p == 10 && b == 13) || (p == 13 && b == 10)) read();
            return sb.toString(); }
    }
    
    public static class FO extends PrintWriter {
        FO() { super(new BufferedOutputStream(System.out)); }
    }
   



}
#include <iostream>
#include <algorithm>
#include <vector>
#include <string.h>
#include <cstdio>
using namespace std;
typedef int lld;

struct FoodInfo
{
    lld p, c, f;

    FoodInfo operator+(const FoodInfo& other)const
    {
        FoodInfo ret;
        ret.p = p+other.p;
        ret.c = c+other.c;
        ret.f = f+other.f;
        return ret;
    }
};

lld n;
FoodInfo food[1002], target;

FoodInfo CatchFI()
{
    FoodInfo ret;
    scanf("%d %d %d", &ret.p, &ret.c, &ret.f);
    return ret;
}

bool Possible(lld lim, FoodInfo have)
{
    if (have.p > target.p || have.c > target.c || have.f > target.f) return false;
    if (have.p == target.p && have.c == target.c && have.f == target.f) return true;

    lld i;
    for (i=lim; i>=1; i--)
    {
        if (Possible(i-1, have+food[i])) return true;
    }

    return false;
}

bool Magic()
{
    lld i;

    target = CatchFI();
    scanf("%d", &n);

    for (i=1; i<=n; i++)
    {
        food[i] = CatchFI();
    }

    return Possible(n, {0, 0, 0});
}

int main ()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    lld i, j;
    lld tests, t;
    bool res;

    scanf("%d", &tests);
    for (t=1; t<=tests; t++)
    {
        res = Magic();

        printf("Case #%d: ", t);
        if (res)
        {
            printf("yes\n");
        }
        else
        {
            printf("no\n");
        }
    }
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;

import javax.swing.border.Border;

public class a {

	public static long mod = (long) Math.pow(10, 9) + 7;
	public static int k = 0;

	private static class node {
		int a;
		int b;
		int c;

		node(int m, int n, int g) {
			a = m;
			b = n;
			c = g;
		}

	}

	public static class point implements Comparable<point> {
		long x;
		long y;
		long b;

		point(long x, long y, long b) {
			this.x = x;
			this.y = y;
			this.b = b;
		}

		@Override
		public int compareTo(point o) {
			if (k == 0)
				return (int) (o.x - x);
			else
				return (int) (y - o.y);

		}
	}

	public static int ch(long y) {
		int r = Long.bitCount(y);
		return r;
	}

	public static long gcd(long x, long y) {
		if (y == 0)
			return x;

		return gcd(y, x % y);
	}

	public static boolean ch[];
	public static ArrayList<Integer> prime;
	public static Queue<Integer> pp;

	public static void sieve(int k) {
		ch[0] = ch[1] = true;

		for (int i = 2; i <= k; i++) {
			if (!ch[i]) {
				prime.add(i);
				pp.add(i);
				for (int j = i + i; j <= k; j += i) {
					ch[j] = true;
				}
			}
		}

	}

	public static long pw(int x, int power, int mod) {
		if (power == 1)
			return x % mod;
		else if (power % 2 == 0)
			return pw((x % mod * x % mod) % mod, power / 2, mod);
		else
			return (pw(x, power - 1, mod) % mod * x % mod) % mod;

	}

	public static int swap[][];
	public static int parent[];

	public static boolean graph(int s, int e, int n) {
		boolean ch[] = new boolean[400];
		Arrays.fill(parent, -1);
		Queue<Integer> q = new LinkedList<>();
		ch[s] = true;
		if (s == e)
			return true;
		q.add(s);
		while (!q.isEmpty()) {
			int r = q.poll();

			if (r == e)
				return true;

			for (int i = 0; i < n; i++) {
				if (!ch[i] && swap[r][i] == 1) {
					q.add(i);
					parent[i] = r;
					ch[i] = true;

				}
			}
		}

		return false;

	}

	public static long dp[][];
	public static int a;
	public static int b;
	public static int c;
	public static int n;
	public static node[] food;

	public static int ch(int mask) {
		int a1 = 0;
		int b1 = 0;
		int c1 = 0;
		for (int i = 0; i < n; i++) {
			if (((1 << i) & mask) != 0) {
				a1 += food[i].a;
				b1 += food[i].b;
				c1 += food[i].c;
			}
		}

		if (a1 == a && b1 == b && c1 == c)
			return 0;
		else if (a1 > a || b1 > b || c1 > c)
			return -1;
		return 1;
	}

	public static boolean flag;

	public static long solve(int i, int mask) {
		int r = ch(mask);
		if (r == 0) {
			flag = true;
			return 0;
		} else if (r == -1 || i == n)
			return 0;
		if (dp[i][mask] != -1)
			return dp[i][mask];
		long one = solve(i + 1, mask | (1 << i));
		long two = solve(i + 1, mask);
		return one + two;

	}

	public static void main(String[] args) throws IOException {
		//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		 BufferedReader in = new BufferedReader(new FileReader(
		 "new_years_resolution.txt"));
		StringBuilder qq = new StringBuilder();
		//PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		 PrintWriter out = new PrintWriter(new FileWriter("out.txt"));

		int t = Integer.parseInt(in.readLine());
		for (int i = 0; i < t; i++) {
			flag = false;
			String y[] = in.readLine().split(" ");
			a = Integer.parseInt(y[0]);
			b = Integer.parseInt(y[1]);
			c = Integer.parseInt(y[2]);
			n = Integer.parseInt(in.readLine());
			food = new node[n];
			for (int j = 0; j < n; j++) {
				y = in.readLine().split(" ");
				food[j] = new node(Integer.parseInt(y[0]),
						Integer.parseInt(y[1]), Integer.parseInt(y[2]));
			}

			dp = new long[n][(1 << n) + 5];
			for (int j = 0; j < n; j++) {
				Arrays.fill(dp[j], -1);
			}
			solve(0, 0);
			out.print("Case #" + (i + 1) + ": ");
			if (flag)
				out.println("yes");
			else
				out.println("no");
		}

		out.close();

	}
}
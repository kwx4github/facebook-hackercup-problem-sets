#include<stdio.h>
using namespace std;

typedef struct {
	int a;
	int b;
	int c;
} Three;

Three food[30];
int C, L, P;

bool subSetSum(int n)
{
	int flg=0;
	bool subsetC[C+1][n+1];
	bool subsetL[L+1][n+1];
	bool subsetP[P+1][n+1];
	for(int i=0; i<=n; i++)
		subsetC[0][i] = subsetL[0][i] = subsetP[0][i] = true;
	for(int i=1; i<=C; i++)
		subsetC[i][0] = false;
	for(int i=1; i<=L; i++)
		subsetL[i][0] = false;	
	for(int i=1; i<=P; i++)
		subsetP[i][0] = false;
	for(int i=1; i<=C; i++)
	{
		for(int j=1; j<=n; j++)
		{
			subsetC[i][j]=subsetC[i][j-1];
			if(i>=food[j-1].a)
				subsetC[i][j] = subsetC[i][j] || subsetC[i-food[j-1].a][j-1];
		}
	}	
	flg+=subsetC[C][n];
	for(int i=1; i<=L; i++)
	{
		for(int j=1; j<=n; j++)
		{
			subsetL[i][j]=subsetL[i][j-1];
			if(i>=food[j-1].b)
				subsetL[i][j] = subsetL[i][j] || subsetL[i-food[j-1].b][j-1];
		}
	}
	flg+=subsetL[L][n];

	for(int i=1; i<=P; i++)
	{
		for(int j=1; j<=n; j++)
		{
			subsetP[i][j]=subsetP[i][j-1];
			if(i>=food[j-1].c)
				subsetP[i][j] = subsetP[i][j] || subsetP[i-food[j-1].c][j-1];
		}
	}
	flg+=subsetP[P][n];
	
	if(flg==3)
		return true;
	else
		return false;
}

main()
{
	int TC, n, c, l, p, num; 
	scanf("%d", &TC);
	for(int k=1; k<=TC; k++)
	{
		scanf("%d %d %d", &C, &L, &P);
		scanf("%d", &n);
		num=0;
		while(n--)
		{
			scanf("%d %d %d", &c, &l, &p);
			if(c>C || l>L || p>P)
				continue;
			food[num].a=c;
			food[num].b=l;	
			food[num].c=p;
			num++;
		}	
		if(subSetSum(num)==true)
			printf("Case #%d: yes\n", k);
		else
			printf("Case #%d: no\n", k);
	}
	return 0;
}
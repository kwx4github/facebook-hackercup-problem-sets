#include <stdio.h>
#include <stdlib.h>
#include<iostream>
using namespace std;

//Referred geeksforgeeks

bool found = false;

void subset_sum(int p[], int c[], int f[], int t[],
                int s_size, int t_size,
                int sum1, int sum2, int sum3, int ite,
                int const gp, int const gc, int const gf)
{
    if(!found)
    {
    if( sum1 == gp && sum2 == gc && sum3 == gf )
    {
        // We found subset
        found = true;
        return;
    }
    else
    {
        for( int i = ite; i < s_size; i++ )
        {
            t[t_size] = i;
            subset_sum(p, c, f, t, s_size, t_size + 1, sum1 + p[i], sum2 + c[i], sum3 + f[i], i + 1, gp, gc, gf);
        }
    }
    }
}

void genSubsets(int p[], int c[], int f[], int size, int gp, int gc,int gf)
{
    int *tuplet_vector = (int *)malloc(size * sizeof(int));

    subset_sum(p, c, f, tuplet_vector, size, 0, 0, 0, 0, 0, gp, gc, gf);

    free(tuplet_vector);
}

int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int t;
    cin>>t;
    for(int j=0;j<t;j++)
    {
    int p[21], c[21], f[21], gp, gc, gf, n;
    found = false;
    cin>>gp>>gc>>gf;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>p[i]>>c[i]>>f[i];
    }
    genSubsets(p, c, f, n, gp, gc, gf);
    if(!found)
        printf("Case #%d: no\n", j+1);
    else
        printf("Case #%d: yes\n", j+1);
}
    return 0;
}

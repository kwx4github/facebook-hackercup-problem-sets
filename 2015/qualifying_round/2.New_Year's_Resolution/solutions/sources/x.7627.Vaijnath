#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#define ARRAYSIZE(a) (sizeof(a))/(sizeof(a[0]))
using namespace std;
static int total_nodes;
static int giField = 0;
vector <int *> iDynamicMemory;
vector <int *> iProteinsDynamicMemory;
vector <int *> iCarboDynamicMemory;
vector <int *> iFatsDynamicMemory;
class Food_Info{
  
  public :
//     static bool isSubsetSum(vector <int> &iSet, int iCount, int iSum);
    int iG_Proteins,iG_Carbohydrates,iG_Fats;
    int iFoods;
    int * ivProteins;
    int * ivCarbohydrates;
    int * ivFats;
    
 void setValues(){
    int iTemp, iTemp1, iTemp2;
    
    //get Gp, Gc, Gf
    cin >> iTemp >> iTemp1 >> iTemp2;
    this->iG_Proteins = iTemp;
    this->iG_Carbohydrates = iTemp1;
    this->iG_Fats = iTemp2;
    
    //Number of foods
    cin >> iTemp;
    this->iFoods = iTemp;
    
    this->ivProteins = new int[iTemp];
    this->ivCarbohydrates = new int[iTemp];
    this->ivFats = new int[iTemp];
    
    //Food_Info
    for(int iCounter = 0 ; iCounter < this->iFoods ; iCounter++){
	cin >> iTemp >> iTemp1 >> iTemp2;
	this->ivProteins[iCounter] = iTemp;
	this->ivCarbohydrates[iCounter] = iTemp1;
	this->ivFats[iCounter] = iTemp2;
    }
  }
  
  void func_Resolution(int iTestCaseNum){
    /* Output --  
    * cout << "Case #"<< iTestCaseNum <<": yes"<< endl;
    * cout << "Case #"<< iTestCaseNum <<": no"<< endl;    
    */
    //
    
      this->generateSubsets(this->ivProteins,this->ivCarbohydrates,this->ivFats, this->iFoods, this->iG_Proteins, this->iG_Carbohydrates,this->iG_Fats);
      iProteinsDynamicMemory.clear();
      iDynamicMemory.swap(iProteinsDynamicMemory);
      iDynamicMemory.clear();
            
      if(iProteinsDynamicMemory.size() == 0)
	cout << "Case #"<< iTestCaseNum <<": no"<< endl;    
      else {
	cout << "Case #"<< iTestCaseNum <<": yes"<< endl;
      }
      
  }
   
  // prints subset found
  void printSubset(int A[], int size)
  {
      int *prt;
      int iSize;
      iDynamicMemory.push_back(prt);
      iSize = iDynamicMemory.size();
      iDynamicMemory[iSize-1] = new int[size+1];
      iDynamicMemory[iSize-1][0] = size;
      for(int i = 0; i < size; i++)
      {
	iDynamicMemory[iSize-1][i+1] = A[i];
// 	printf("%*d", 5, A[i]);
      }
  
//       printf("\n");
  }
  
  // qsort compare function
  static int comparator(const void *pLhs, const void *pRhs)
  {
      int *lhs = (int *)pLhs;
      int *rhs = (int *)pRhs;
  
      return *lhs > *rhs;
  }
  
  // inputs
  // s            - set vector
  // t            - tuplet vector
  // s_size       - set size
  // t_size       - tuplet size so far
  // sum          - sum so far
  // ite          - nodes count
  // target_sum   - sum to be found
  void subset_sum(int s[],int s2[],int s3[],
		  int t[],int t2[],int t3[],
		  int s_size, 
		  int t_size, int sum, int ite,
		  int t_size2, int sum2, int ite2,
		  int t_size3, int sum3, int ite3,
		  int const target_sum,int const target_sum2,int const target_sum3)
  {
//     if( target_sum2 == sum2 ){
//      cout << "target_sum 1 : " << sum << endl;
//      cout << "target_sum 2 : " << sum2 << endl;
//      cout << "target_sum 3 : " << sum3 << endl;
//      cout << "---------------------------------------"<< endl;}
      if( target_sum == sum && target_sum2 == sum2 && target_sum3 == sum3 )
      {
	  // We found sum
	  printSubset(t, t_size);
	  
	  // constraint check
	  if( (ite + 1 < s_size && sum - s[ite] + s[ite+1] <= target_sum) && (ite2 + 1 < s_size && sum2 - s2[ite2] + s2[ite2+1] <= target_sum2) && (ite3 + 1 < s_size && sum3 - s3[ite3] + s3[ite3+1] <= target_sum3))
	  {
	    
	      // Exclude previous added item and consider next candidate
	    subset_sum(s,s2,s3, t,t2,t3, s_size, t_size-1, sum - s[ite], ite + 1,
		       t_size2-1, sum2 - s2[ite2], ite2 + 1,
		       t_size3-1, sum3 - s3[ite], ite3 + 1,
		       target_sum,target_sum2,target_sum3);
	  }
	  return;
      }
      else
      {
	  // constraint check
	if( (ite < s_size && sum + s[ite] <= target_sum) || (ite2 < s_size && sum2 + s2[ite2] <= target_sum2 ) || (ite3 < s_size && sum3 + s3[ite3] <= target_sum3) )
	  {
	      // generate nodes along the breadth
	      for( int i = ite; i < s_size; i++ )
	      {
		  t[t_size] = s[i];
		  t2[t_size2] = s2[i];
		  t3[t_size3] = s3[i];
		  
		  if( (sum + s[i] <= target_sum) || (sum2 + s2[i] <= target_sum2) || (sum3 + s3[i] <= target_sum3) )
		  {
		      // consider next level node (along depth)
		      subset_sum(s,s2,s3, t,t2,t3, s_size, 
				 t_size + 1, sum + s[i], i + 1, 
				 t_size2 + 1, sum2 + s2[i], i + 1, 
				 t_size3 + 1, sum3 + s3[i], i + 1, 
				 target_sum,target_sum2,target_sum3);
		  }
	      }
	  }
      }
  }
  
  // Wrapper that prints subsets that sum to target_sum
  void generateSubsets(int s[],int s2[],int s3[], int size, int target_sum,int target_sum2,int target_sum3)
  {
      int *tuplet_vector = (int *)malloc(size * sizeof(int));
      int *tuplet_vector2 = (int *)malloc(size * sizeof(int));
      int *tuplet_vector3 = (int *)malloc(size * sizeof(int));
  
      int total  = 0;
      int total2 = 0;
      int total3 = 0;
      // sort the set
 /*     qsort(s, size, sizeof(int), &comparator);
      qsort(s2, size, sizeof(int), &comparator);
      qsort(s3, size, sizeof(int), &comparator);
 */ 
      for( int i = 0; i < size; i++ )
      {
	  total  += s[i];
	  total2  += s2[i];
	  total3  += s3[i];
      }
  
//     if( (s[0] <= target_sum && total >= target_sum) && (s2[0] <= target_sum2 && total2 >= target_sum2) && (s3[0] <= target_sum3 && total3 >= target_sum3 ))
//      {
	subset_sum(s,s2,s3, tuplet_vector,tuplet_vector2,tuplet_vector3, size, 0, 0, 0, 0, 0, 0, 0, 0, 0, target_sum, target_sum2, target_sum3);
//     }
  
      free(tuplet_vector);
      free(tuplet_vector2);
      free(tuplet_vector3);
  }

  
  
};

//Program Start
int main(void) {
    
    int iTestcases;
    vector <Food_Info> clsFood_Info;
    cin >> iTestcases;
    
    for(int iCounter = 0 ; iCounter < iTestcases; iCounter++){
      Food_Info clsTemp;
      clsTemp.setValues();
      clsFood_Info.push_back(clsTemp);
    }
    
    //Calc Food Logic
    
     for(int iCounter = 0 ; iCounter<clsFood_Info.size();iCounter++){
//	cout<< "Test Sub Sets : " << iCounter+1 << endl;
	clsFood_Info[iCounter].func_Resolution(iCounter+1);
//	cout<< "----------------------------------------------------------" << endl;
	iDynamicMemory.clear();
	iProteinsDynamicMemory.clear();
	iCarboDynamicMemory.clear();
	iFatsDynamicMemory.clear();
     }
    
    return 0;
}
#include <bits/stdc++.h>
#include<vector>
#include<string>
#include<stack>
#include<queue>
#include<map>
#include<sstream>
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<vector>
#include<string>
#include<stack>
#include<queue>
#include<map>
#include<sstream>
#define FOR(i, s, e) for(int i=s; i<e; i++)
#define loop(i, n) for(int i=0; i<n; i++)
#define getint(n) scanf("%d", &n)
#define pb(a) push_back(a)
#define ll long long
#define SZ(a) int(a.size())
#define read() freopen("input.txt", "r", stdin)
#define write() freopen("output.txt", "w", stdout)
#define mem(a, v) memset(a, v, sizeof(a))
#define all(v) v.begin(), v.end()
#define pi acos(-1.0)
#define check printf("t\n")
#define mod abs
#define pf(k) printf("%d\n",k)
#define sf(k) scanf("%d",&k)
#define llpf(k)  printf("%lld\n",k)
#define llsf(k) scanf("%lld",&k)
#define double_sf(k,t) scanf("%d %d",&k,&t)
#define double_pf(k,t) printf("%d %d\n",k,t)
#define Fors(i, sz) for( size_t i = 0; i < sz.size (); i++ )
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define pi acos(-1.0)
#define N 1000
using namespace std;
bool find(int gp, int gc, int gf, int values[][3], int index, int n)
{
    if(!(gp || gc || gf))
        return true;
    else if(gp < 0 || gc < 0 || gf < 0 || index == n )
        return false;
    else return (find(gp - values[index][0], gc - values[index][1], gf - values[index][2], values, index+1, n) || find(gp, gc, gf, values, index + 1, n));
}
int main()
{
    int t, n,c;
    freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
    scanf("%d", &t);
    for(c = 1; c <= t; c++)
    {
        int protein,carbo,fat;
        //for(int i = 0; i < 3; i++)
            scanf("%d %d %d", &protein,&carbo,&fat);
        scanf("%d", &n);
        int values[n][3];
        for(int i = 0; i < n; i++)
            for(int j = 0; j < 3; j++)
                scanf("%d", &values[i][j]);
        bool ans = find(protein, carbo, fat, values, 0, n);
        printf("Case #%d: ", c);
        if(ans)
            printf("yes\n");
        else
            printf("no\n");

    }
    return 0;
}

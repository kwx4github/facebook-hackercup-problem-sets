#!/usr/bin/env ruby

def recur(given, list, now, sum)
  if now == list.count
    if given == sum
      return true
    else
      return false
    end
  else
    if recur(given, list, now + 1, sum)
      return true
    else
      if recur(given, list, now + 1, [sum, list[now]].transpose.collect {|x| x.reduce(:+)})
        return true
      else
        return false
      end
    end
  end
end

if ARGV.count != 2
  puts 'invalid'
else
  fi = File.open(ARGV[0], 'r')
  fo = File.open(ARGV[1], 'w')
  s = fi.readline.to_i
  s.times do |i|
    g = fi.readline.split(' ').collect do |e|
      e.to_i
    end
    puts "Given: #{g}"
    d = fi.readline.to_i
    dl = []
    d.times do |j|
      dl << fi.readline.split(' ').collect do |e|
        e.to_i
      end
      puts "Diet: #{dl.last}"
    end
    fo.write "Case ##{i + 1}: "
    if recur(g, dl, 0, [0, 0, 0])
      fo.write "yes\n"
    else
      fo.write "no\n"
    end
  end
  fi.close
  fo.close
end
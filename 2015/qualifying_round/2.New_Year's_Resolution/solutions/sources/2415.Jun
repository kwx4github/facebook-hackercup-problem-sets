{-# OPTIONS_GHC -O2 -funbox-strict-fields #-}
{-# LANGUAGE BangPatterns, ViewPatterns, TupleSections #-}

import Control.Applicative
import Control.Monad
import Data.Fixed
import Data.List
import Data.Time.Clock
import Data.Time.Clock.POSIX
import System.IO

runGCJ :: IO () -> IO ()
runGCJ main_ = do
  t <- readLn
  forM_ [1..t] $ \i -> do
    putStr $ "Case #" ++ shows i ": "
    hPutStr stderr $ shows i "/" ++ shows t ": "
    hFlush stderr
    start <- getPOSIXTime
    main_
    end <- getPOSIXTime
    hPutStrLn stderr $ (shows.msec) (end - start) "ms"
    hFlush stderr

msec :: NominalDiffTime -> Int
msec s = let t = realToFrac s :: Milli in fromEnum t

bool :: a -> a -> Bool -> a
bool t f b = if b then t else f

main :: IO ()
main = runGCJ $ do
  gpgcgf <- toTriple.map read.words <$> getLine
  n <- readLn
  pcfs <- replicateM n $ do
    toTriple.map read.words <$> getLine
  putStrLn.bool"yes""no" $ solve gpgcgf pcfs

data Triple = T {-# UNPACK #-} !Int
                {-# UNPACK #-} !Int
                {-# UNPACK #-} !Int
                deriving Eq

toTriple [x, y, z] = T x y z

plus :: Triple -> Triple -> Triple
plus (T x0 y0 z0) (T x1 y1 z1) = T (x0 + x1) (y0 + y1) (z0 + z1)

solve :: Triple -> [Triple] -> Bool
solve gpgcgf pcfs = elem gpgcgf . map (foldl' plus (T 0 0 0)) $ subsequences pcfs

#include <iostream>
#include <stdio.h>
#include <fstream>
#include <vector>
#include <math.h>
#include <bitset>

using namespace std;
ofstream outfile;
char ch;

struct foodNut {
    int p,c,f;
};
vector<foodNut> *foods;

char* readLine(fstream *fin,int startindex,int maxCharSize);
void writePossibility(vector<foodNut> *foods,int testCase,int Ap,int Ac,int Af);

int main(int argc, const char * argv[]){
    foods = new vector<foodNut>();
    outfile.open("/Users/vivekshivam/Desktop/DecietfulWar.txt");
    fstream fin("/Users/vivekshivam/Desktop/new_years_resolution.txt", fstream::in);
    int startIndex = 0,testCase = 0;
    char *ch1 = readLine(&fin,startIndex,3);
    testCase = atoi(ch1);
    printf("\n testCase %d ",testCase);
    delete [] ch1;
    int Ap = 0,Ac = 0,Af = 0;
    for(int i = 0; i < testCase; i++){
        printf("\n testCase %d ",i);
        Ap = atoi(readLine(&fin,0,10));
        Ac = atoi(readLine(&fin,0,10));
        Af = atoi(readLine(&fin,0,10));
        int totalFoods = atoi(readLine(&fin,0,10));
        for(int f = 0; f < totalFoods;f++){
            foodNut *fn = new foodNut();
            fn->p = atoi(readLine(&fin,0,10));
            fn->c = atoi(readLine(&fin,0,10));
            fn->f = atoi(readLine(&fin,0,10));
            foods->push_back(*fn);
        }
        writePossibility(foods,i,Ap,Ac,Af);
        foods->clear();
    }
    return 0;
}
string getBinaryOfValue(int value){
    std::string s = std::bitset<32>(value).to_string();
    return s;
}
void writePossibility(vector<foodNut> *foods,int testCase,int Ap,int Ac,int Af){
    int totFoods = foods->size();
    int sumP = 0, sumC = 0, sumF = 0, foodIndex = 0;
    for(int i = 1; i < pow(2,totFoods);i++){
        string combinations = getBinaryOfValue(i);
        sumP = 0, sumC = 0, sumF = 0, foodIndex = 0;
        int endloop = combinations.length()  - totFoods;
        for(int c = combinations.length() - 1 ; c >= endloop;c--){
            if(combinations[c] == '1'){
                sumP += (*foods)[foodIndex].p;
                sumC += (*foods)[foodIndex].c;
                sumF += (*foods)[foodIndex].f;
            }
            foodIndex++;
        }
        if(sumP == Ap && sumC == Ac && sumF == Af){
            char *data = new char[100];
            sprintf(data, "Case #%d: yes",(testCase+1));
            outfile << data << endl;
            return;
        }
    }
    char *data = new char[100];
    sprintf(data, "Case #%d: no",(testCase+1));
    outfile << data << endl;
    return;
}
char* readLine(fstream *fin,int startIndex,int maxCharSize){
    char *ch1 = new char[maxCharSize];
    bool nullTerminated = false;
    while (*fin >> noskipws >> ch) {
        if(ch == ' ' || ch == '\n'){
            ch1[startIndex] = '\0';
            nullTerminated = true;
            break;
        }
        else{
            ch1[startIndex] = ch;
            startIndex++;
        }
    }
    if(!nullTerminated)
        ch1[startIndex] = '\0';
    return ch1;
}

import java.util.*;

class Que2 {
	public static void main(String args[]) {
		Scanner yo = new Scanner(System.in);
		
		int T, GP[], GC[], GF[];
		int local[], lp[][], lc[][], lf[][];
		T = yo.nextInt();
		
		GP = new int[T];
		GC = new int[T];
		GF = new int[T];
		
		local = new int[T];
		
		lp = new int[T][];
		lc = new int[T][];
		lf = new int[T][];
		
		for(int i=0; i<T; i++) {
			GP[i] = yo.nextInt();
			GC[i] = yo.nextInt();
			GF[i] = yo.nextInt();
			
			local[i] = yo.nextInt();
			
			lp[i] = new int[local[i]];
			lc[i] = new int[local[i]];
			lf[i] = new int[local[i]];
			
			for(int j=0; j<local[i]; j++) {
				lp[i][j] = yo.nextInt();
				lc[i][j] = yo.nextInt();
				lf[i][j] = yo.nextInt();
			}			
		}
		
		for(int i=0; i<T; i++){
			if(i!=0) System.out.println();
			System.out.print("Case #" + (i+1) + ": ");
			System.out.print( helper(GP[i],GC[i],GF[i],local[i],lp[i],lc[i],lf[i]) );
			
		}
		
	}
	
	public static String helper(int GP, int GC, int GF, int local, int lp[], int lc[], int lf[]) {
		int elements[] = new int[local];
		for(int i=0; i<local; i++) elements[i] = i;
		for(int i=1; i<=local; i++) {
			String result = printCombination(elements, local, i, GP, GC, GF, lp, lc, lf);
			if(result.equals("yes")) return result;
		}
		return "no";
	}
	
	public static String printCombination(int arr[], int n, int r, int GP, int GC, int GF, int lp[], int lc[], int lf[]) {
		
		int size = arr.length;
		int data[] = new int[size];

		
		return combinationUtil(arr, data, 0, n-1, 0, r, GP, GC, GF, lp, lc, lf);
	}

	
	public static String combinationUtil(int arr[], int data[], int start, int end, int index, int r, int GP, int GC, int GF, int lp[], int lc[], int lf[]) {
	
		if (index == r)	{
			
			int tGP=GP;
			int tGC=GC;
			int tGF=GF;
			
			for (int j=0; j<r; j++){
				int cool = data[j];
				
				tGP -= lp[cool];
				tGC -= lc[cool];
				tGF -= lf[cool];
				
				
			}
			
			if(tGC==0 && tGP==0 && tGF==0){
				return "yes";
			}
			return "no";
		}

	
		for (int i=start; i<=end && end-i+1 >= r-index; i++) {
			data[index] = arr[i];
			String result = combinationUtil(arr, data, i+1, end, index+1, r, GP, GC, GF, lp, lc, lf);
			if(result.equals("yes")) return result;
		}
		return "no";
	}
	
}
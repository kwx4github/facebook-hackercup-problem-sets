import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Vector;

//to run the program, give the input file as a command line argument
public class NewYearsResolution {

	public static void main(String[] args) {
		Scanner s = null;
		try {
			s = new Scanner(new File(args[0]));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		int testCases = s.nextInt();
		for(int i = 0; i < testCases; ++i)
		{
			int gp = s.nextInt();
			int gc = s.nextInt();
			int gf = s.nextInt();
			int numFoods = s.nextInt();
			s.nextLine();
			Vector<Food> foods = new Vector<Food>();
			for(int j = 0; j < numFoods; ++j)
			{
				int g = s.nextInt();
				int c = s.nextInt();
				int f = s.nextInt();
				foods.add(new Food(g, c, f));
			}
			System.out.println("Case #" + (i + 1) + ": " + checkCombinations(foods, gp, gc, gf));
		}
	}
	
	public static String checkCombinations(Vector<Food> foods, int gp, int gc, int gf)
	{
		for(int i = 0; i < Math.pow(2, foods.size()); ++i)
		{
			int sumP = 0, sumC = 0, sumF = 0;
			for(int j = foods.size() - 1; j >= 0; --j)
			{
				if((i >> j) % 2 == 1)
				{
					sumP += foods.get(j).p;
					sumC += foods.get(j).c;
					sumF += foods.get(j).f;
				}
				if(sumP > gp || sumC > gc || sumF > gf)
					break;
				if(sumP == gp && sumC == gc && sumF == gf)
					return "yes";
			}
		}
		return "no";
	}
	
	static class Food
	{
		public int p, c, f;
		
		public Food(int p, int c, int f)
		{
			this.p = p;
			this.c = c;
			this.f = f;
		}
	}

}

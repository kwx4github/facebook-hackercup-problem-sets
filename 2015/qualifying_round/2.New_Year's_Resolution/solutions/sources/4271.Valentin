import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class BResolution {

	public static void main(String[] args) {
		try (Scanner input = new Scanner(new File("new_years_resolution.txt"))){
			try (PrintStream output = new PrintStream(new File("new_years_resolution_output.txt"))) {
				int testCases = input.nextInt();
				for (int caseNumber = 1; caseNumber <= testCases; caseNumber++) {
					int P = input.nextInt();
					int C = input.nextInt();
					int F = input.nextInt();
					int numFoods = input.nextInt();
					
					int[][] foods = readCase(input, numFoods);
					output.print("Case #" + caseNumber + ": ");
					output.print(isPossible(foods, P, C, F) ? "yes" : "no");
					output.println();
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private static int[][] readCase(Scanner input, int numFoods) {
		int[][] foods = new int[numFoods][3];
		for (int i = 0; i < numFoods; i++) {
			for (int j = 0; j < 3; j++) {
				foods[i][j] = input.nextInt();
			}
		}
		
		return foods;
	}
	
	private static boolean isPossible(int[][] foods, int P, int C, int F) {
		Set<Set<Integer>> possibleCompositions = new HashSet<Set<Integer>>();
		Set<Set<Integer>> levelCompositions = new HashSet<Set<Integer>>();
		for (int i = 0; i < foods.length; i++) {
			if (foods[i][0] == P && foods[i][1] == C && foods[i][2] == F) {
				return true;
			}
			Set<Integer> currComposition = new HashSet<Integer>();
			levelCompositions.add(currComposition);
			currComposition.add(i);
		}
		
		for (int level = 1; level < foods.length; level++) {
			Set<Set<Integer>> nextLevelCompositions = new HashSet<Set<Integer>>();
			for (Set<Integer> currComposition : levelCompositions) {
				int currP = 0;
				for (int currFood : currComposition) {
					currP += foods[currFood][0];
				}
				for (int currFood = 0; currFood < foods.length; currFood++) {
					if (!currComposition.contains(currFood)) {
						int sumP = currP + foods[currFood][0];
						if (sumP < P) {
							Set<Integer> newComposition = new HashSet<Integer>(currComposition);
							newComposition.add(currFood);
							nextLevelCompositions.add(newComposition);
						} else if (sumP == P) {
							Set<Integer> newComposition = new HashSet<Integer>(currComposition);
							newComposition.add(currFood);
							possibleCompositions.add(newComposition);
						}
					}
				}
			}
			levelCompositions = nextLevelCompositions;
		}
		
		for (Set<Integer> currComposition : possibleCompositions) {
			int sumC = 0;
			int sumF = 0;
			for (int currFood : currComposition) {
				sumC += foods[currFood][1];
				sumF += foods[currFood][2];
			}
			
			if (sumC == C && sumF == F) {
				return true;
			}
		}
		return false;
	}

}

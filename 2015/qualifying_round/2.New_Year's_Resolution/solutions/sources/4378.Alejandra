import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;


public class NewYearsResolution {

	static int [][] macronutrients;
	
	public static void main(String [] args)throws IOException
	{
		//BufferedReader br = new BufferedReader(new FileReader("input.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw=new PrintWriter(new File("output.txt"));
		
		int t = Integer.parseInt(br.readLine());
		for(int i=1; i<=t; i++)
		{	
			StringTokenizer st = new StringTokenizer(br.readLine());
			
			int protein = Integer.parseInt(st.nextToken());
			int carbohydrates = Integer.parseInt(st.nextToken());
			int fat = Integer.parseInt(st.nextToken());
			
			int n = Integer.parseInt(br.readLine());
			
			macronutrients = new int [n][3];
			
			for(int j=0; j<n; j++)
			{
				st = new StringTokenizer(br.readLine());
				macronutrients [j][0] = Integer.parseInt(st.nextToken());
				macronutrients [j][1] = Integer.parseInt(st.nextToken());
				macronutrients [j][2] = Integer.parseInt(st.nextToken());
			}
			
			if(isSubsetSum(n, protein, carbohydrates, fat))
				pw.println("Case #"+i+": yes");
			else
				pw.println("Case #"+i+": no");
		}
		
		pw.flush();
		pw.close();
		
	}
	private static boolean isSubsetSum(int n, int sum1, int sum2, int sum3)
	{
	   if(sum1 == 0 && sum2 == 0 && sum3 == 0) return true;
	   
	   if(n == 0 && (sum1 != 0 || sum2 != 0 || sum3 != 0)) return false;
	   
	   if(macronutrients[n-1][0] > sum1 || macronutrients[n-1][1] > sum2 || macronutrients[n-1][2] > sum3)
		   return isSubsetSum(n-1, sum1, sum2, sum3);
	   
	   return isSubsetSum(n-1, sum1, sum2, sum3) || isSubsetSum(n-1, sum1-macronutrients[n-1][0], sum2-macronutrients[n-1][1], sum3-macronutrients[n-1][2]);
	}
	
	private static boolean isSubsetSum1(int set[], int n, int sum)
	{
	   if (sum == 0)
	     return true;
	   if (n == 0 && sum != 0)
	     return false;

	   if (set[n-1] > sum)
	     return isSubsetSum1(set, n-1, sum);
	 
	   return isSubsetSum1(set, n-1, sum) || isSubsetSum1(set, n-1, sum-set[n-1]);
	}

}

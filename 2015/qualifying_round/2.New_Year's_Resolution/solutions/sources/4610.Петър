
class Food

  def initialize(idx, prt, crb, fat)
    @idx = idx
    @protein = prt.to_i
    @carbs = crb.to_i
    @fat = fat.to_i
  end

  def sum
    @protein + @carbs + @fat
  end

  def idx
    @idx
  end

  def protein
    @protein
  end

  def carbs
    @carbs
  end

  def fat
    @fat
  end

  def display
    print "Food #{@protein}, #{@carbs}, #{@fat}"
  end

  def to_s
    @idx
  end

  def inspect
    @idx
  end

end

class Main

  def initialize(input)
    @inputFile = input
    @currentLine = 0
    @lines = []
  end

  def readFile
    File.open("#{@inputFile}", "r") do |f|
      f.each_line do |line|
        @lines<<line
      end
    end
  end

  def nextLine
    @currentLine = @currentLine + 1
    @lines[@currentLine - 1].gsub("\n", "")
  end

  def run
    cases = nextLine.to_i
    cases.times do |c|

      food_array = []
      prt, crb, fat = nextLine.split(" ")
      limit = Food.new(-1, prt, crb, fat)

      count = nextLine.to_i
      count.times do |cnt|
        f_prt, f_crb, f_fat = nextLine.split(" ")
        f = Food.new(food_array.length, f_prt, f_crb, f_fat)
        food_array << f
      end

      solve c + 1, limit, food_array
    end
  end

  def solve(idx, limit, food_array)
    solution = false
    max = limit.sum

    subsets_that_sum_to(food_array, max).each do |subset|
      # puts "The subset #{subset} sums to #{max}!"
      prt = limit.protein
      crb = limit.carbs
      fat = limit.fat

      subset.each do |f|
        prt = prt - f.protein
        crb = crb - f.carbs
        fat = fat - f.fat
      end

      if (prt == 0 and crb == 0 and fat == 0)
        solution = true
        break
      end
    end

    puts "Case ##{idx}: #{bool_str(solution)}"
  end

  def powerset(array)
    if array.empty?
      [[]]
    else
      first_elem, *rest_elems = array
      subsets = []
      powerset(rest_elems).each do |subset|
        subsets.push(subset)
        subsets.push(subset.clone.push(first_elem))
      end
      subsets
    end
  end

  def sums_to?(array, limit)
    sums = []
    array.each do |f|
      sums << f.sum
    end
    sums.reduce(:+) == limit
  end

  def subsets_that_sum_to(array, limit)
    powerset(array).select { |subset| sums_to?(subset, limit) }
  end

  def bool_str(b)
    b ? "yes" : "no"
  end

end

# input argument
input = ARGV[0]
m = Main.new(input)
m.readFile
m.run

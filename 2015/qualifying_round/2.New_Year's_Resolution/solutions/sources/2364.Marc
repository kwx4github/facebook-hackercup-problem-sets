//
// FbTwo.js - FaceBook "Cooking the Books" Challenge
// Marc Alexander
//


//	console.log ('\nFbTwo\n');

	var fs	= require ('fs');													// File System helper
	
//	var fileName 	= 'new_years_resolution_example_input.txt'					// Just the file name
	var fileName 	= 'new_years_resolution.txt'								// Just the file name
//	var fileName 	= 'foo.txt'													// Just the file name
	var fileSpec	= __dirname + '/' + fileName;								// Complete file spec

	fs.readFile (fileSpec, 'utf8', function (err, data) {
		
		if (err) {

			console.log(' Error loading ' + fileName + ': ' + err);				// File Error

		} // Error reading in file from local file system
		
		else {
			
//			console.log(' Success loading ' + fileName);						// File Read Success

			var lines = data.split("\n")										// Split input into lines

//			console.log ('[' + lines + ']');

			doIt (lines)														// Process all lines

		} // Success reading file from local file system
 
	});

//----------------------------------------------------------------------

function doIt (lines) {
	
	var t = lines.splice(0, 1)													// Number of test cases

//	console.log ('test Case Count: ' + t);
		

	
	for (var i=0; i<t; i++) {													// ForEach test case
		
//		console.log ('')
//		console.log ('***********')
//		console.log ('')
		
		var wants		= lines.splice(0, 1).toString().split(" ")				// What he wants
		var wantProtein	= wants[0]
		var wantCarb	= wants[1]
		var wantFat		= wants[2]
		
		var match 		= false													// Assume the worst

//		console.log ('Test #' + (i+1))
//		console.log ('Wants: ' + wantProtein + ', ' + wantCarb + ', ' + wantFat)
		
		var foodCnt		= lines.splice(0, 1)									// Number of food items in this test case
		
//		console.log ('Food Item Count: ' + foodCnt);

		var foodList 	= []													// Array of potential food items

//		console.log ('**' + foodList.length)

		for (var j=0; j<foodCnt; j++) {											// ForEach Food Item in this Test Case
			
			var food	= lines.splice(0, 1).toString().split(" ")				// Read in another food item
			
			foodList.push(food)													// Add food item to array
			
//			console.log ('Adding Food Item: ' + food);
//			console.log ('Adding Food Item: ' + food[0] + ', ' + food[1] + ', ' + food[2]);
		
		} // j - foreach food item in this test case
		
//		console.log ('FoodList: (' + foodList.length + ' items)' + foodList)
		
		
		var permutations = Math.pow(2, parseInt(foodCnt))						// Number of possible permutations
		
//		console.log ('Permutation Count: ' + permutations)
		
		
		
		for (var k=0; k<permutations; k++) {									// ForEach Permutation
			
			var accumProtein	= 0												// Reset accumulators for this permutation
			var accumCarb 		= 0
			var accumFat 		= 0
			
//			console.log ('')
//			console.log ('Permutation: ' + k)
			
//			if (k > 1024) break													// For Development only!!!
			
			for (var m=0; m<foodCnt; m++) {
				
				var p = k & (1 << m)											// isolate bit position (non-zero indicates bit set)
				var q = (p > 0)													// set if TRUE
				
				if (q) {
					
					var food		= foodList[m]								// This food item (3 element array)
					
					accumProtein	+= parseInt(food[0])
					accumCarb		+= parseInt(food[1])
					accumFat		+= parseInt(food[2])
					
				} // if (q)
				
				if ((accumProtein == wantProtein) && (accumCarb == wantCarb) && (accumFat == wantFat)) {
					
					match = true;
					
					break;
					
				} // Match!
				
//				console.log ('* ' + k + ', ' + m + ', ' + p + ', ' + q + ' | ' + accumProtein + ', ' + accumCarb + ', ' + accumFat + ' : ' + match)

			} // m - number of food items
			
			if (match) break;
				
		} // k - foreach permutations
		
		console.log ('Case #' + (i+1) + ": " + ((match) ? 'yes' : 'no'))
		
		
	} // t - foreach test case
	
} // doIt


//----------------------------------------------------------------------



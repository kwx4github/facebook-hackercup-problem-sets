#include <bits/stdc++.h>
using namespace std;
struct S{
	int x, y, z;
	S(int _x, int _y, int _z) : x(_x), y(_y), z(_z){}
	S(){}
	S operator+(const S &b){
		return S(x+b.x, y+b.y, z+b.z);
	}
	bool operator==(const S &b){
		return x == b.x && y == b.y && z == b.z;
	}
};
S tar;
vector<S> ele;
bool DFS(int n, S now){
	if(n == ele.size())
		return now == tar;
	return DFS(n+1, now+ele[n]) || DFS(n+1, now);

}
void Solve(int cases){
	int x, y, z;
	cin >> x >> y >> z;
	tar = S(x, y, z);
	ele.clear();
	int n;
	cin >> n;
	while(n--){
		cin >> x >> y >> z;
		ele.push_back(S(x, y, z));
	}
	cout << "Case #" << cases << ": ";
	if(DFS(0, S(0, 0, 0)))
		cout << "yes" << endl;
	else
		cout << "no" << endl;
}


int main()
{
	int n;
	cin >> n;
	for(int i = 1 ; i <= n ; i++){
		Solve(i);
	}
}
#include<stdio.h>
#include<stdlib.h>

typedef struct Food
{
    int P,C,F;
}Food;

void print(Food *item)
{
    printf("%d %d %d\n",item->P,item->C,item->F);
}

int subset(Food a[], int N, int i, Food *curr, Food *sum)
{
    if(curr->P==sum->P && curr->C==sum->C && curr->F==sum->F)
        return 1;
    else if(curr->P>sum->P || curr->C>sum->C > curr->F==sum->F)
        return 0;
    if(i==N)
        return 0;
    Food *t=(Food*)calloc(1,sizeof(Food));
    t->P=curr->P+a[i].P;
    t->C=curr->C+a[i].C;
    t->F=curr->F+a[i].F;
    int ret=(subset(a,N,i+1,curr,sum) | subset(a,N,i+1,t,sum));
    return ret;
}

int main()
{
    int T,N,K,i,j,cnt,sl;
    Food *a,*sum,*zero;
    a=(Food*)calloc(20,sizeof(Food));
    sum=(Food*)calloc(1,sizeof(Food));
    zero=(Food*)calloc(1,sizeof(Food));
    scanf("%lld",&T);
    for(sl=1;sl<=T;sl++)
    {
        scanf("%d%d%d",&(sum->P),&(sum->C),&(sum->F));
        scanf("%d",&N);
        for(i=0;i<N;i++)
        {
            scanf("%d%d%d",&(a[i].P),&(a[i].C),&(a[i].F));
        }
        zero->P=zero->C=zero->F=0;
        K=subset(a,N,0,zero,sum);
        printf("Case #%d: %s\n",sl,(K?"yes":"no"));
    }
    return 0;
}

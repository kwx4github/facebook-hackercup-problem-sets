#include <bits/stdc++.h>
using namespace std;

typedef tuple<int, int, int> prod;
vector<prod> givens;

prod operator+(const prod& x, const prod& y) {
    return prod(get<0>(x) + get<0>(y), get<1>(x) + get<1>(y), get<2>(x) + get<2>(y));
}

bool check(const prod& trg) {
    int n = givens.size();
    int brute = (1 << n);
    for (int i = 0; i < brute; ++i) {
        prod sum(0, 0, 0);
        for (int use = 0; use < n; ++use) {
            if (i & (1 << use)) {
                sum = sum + givens[use];
            }
        }
        if (sum == trg) return true;
    }
    return false;
}

int main() {
    int T; scanf("%d", &T);
    for (int _ = 1; _ <= T; ++_) {
        int p, c, f; scanf("%d%d%d", &p, &c, &f);
        tuple<int, int, int> trg = make_tuple(p, c, f);
        int n; scanf("%d", &n); givens.clear();
        for (int i = 0; i < n; ++i) {
            int p, c, f;
            scanf("%d%d%d", &p, &c, &f);
            givens.push_back(make_tuple(p, c, f));
        }
        cout << "Case #" << _ << ": ";
        if (check(trg)) {
            cout << R"(yes)" << endl;
        } else {
            cout << R"(no)" << endl;
        }
    }
    return 0;
}

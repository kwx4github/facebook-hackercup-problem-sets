let rec resoudre = function
	| (0,0,0),_		-> true
	| (a,b,c),(d,e,f)::q	-> if d > a || e > b || f > c
					then resoudre ((a,b,c),q)
					else (resoudre ((a,b,c),q)) || (resoudre ((a-d,b-e,c-f),q))
	| _		-> false;;

let final entree sortie =
	let ic = open_in ("/home/guilaub/Documents/" ^ entree) and l = ref [] in
	let n= Scanf.fscanf ic "%d " (fun i -> i) in
		for i=1 to n do
			let (a,b,c) = Scanf.fscanf ic "%d %d %d " (fun x y z -> (x,y,z)) in
			let m = Scanf.fscanf ic "%d " (fun x -> x)
			and test_case = ref [] in
			for j = 1 to m do
				test_case := (Scanf.fscanf ic "%d %d %d " (fun x y z ->(x,y,z)))::(!test_case);
			done;
			l := (i,(a,b,c),!test_case)::(!l);
		done;
	let oc = open_out ("/home/guilaub/Documents/" ^ sortie ^ ".txt") in
	List.iter 
		(fun (i,triplet,test_case) -> Printf.fprintf oc "Case #%d: %s\n" i (if resoudre (triplet,test_case) then "yes" else "no"))
		(List.rev (!l));
		flush oc;;
				
final "a" "b";;

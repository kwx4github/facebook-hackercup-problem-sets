def isBalanced(foods, goal, current):
	if (goal == current):
		return True
	elif (len(foods) == 0):
		return False
	elif isTooMuch(goal, current):
		return False
	else:
		return isBalanced(foods[1:], goal, combine(current, foods[0])) or isBalanced(foods[1:], goal, current)

def combine(a, b):
	return tuple(x + y for x, y in zip(a, b))

def isTooMuch(goal, current):
	return reduce(lambda x, y: x or y, [a < b for a, b in zip(goal, current)])

def evaluateBalance(foods, goal, current):
	if isBalanced(foods, goal, current):
		return "yes"
	else: 
		return "no"

cases = int(raw_input())
for case in range(cases):
	goal = tuple(int(n) for n in raw_input().split())
	foods = []
	numberOfFoods = int(raw_input())
	for food in range(numberOfFoods):
		food = tuple(int(n) for n in raw_input().split())
		foods.append(food)
	print("Case #" + str(case + 1) + ": " + evaluateBalance(foods, goal, (0, 0, 0)))
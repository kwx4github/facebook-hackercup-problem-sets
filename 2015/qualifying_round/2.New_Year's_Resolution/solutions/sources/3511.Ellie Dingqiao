import java.io.*;
import java.util.*;

public class ASH2 {

    public static void main(String[] args) {
    	parseFile(args[0]);
    }
    
    private static void parseFile(String file) {
		try{
			BufferedReader infile = new BufferedReader(new FileReader(file));		
			int T = Integer.parseInt(infile.readLine());
			for(int i = 0; i < T; i++) {
				String[] s = infile.readLine().split("\\s+");
				int[] mag = new int[3];
				mag[0] = Integer.parseInt(s[0]); mag[1] = Integer.parseInt(s[1]); mag[2] = Integer.parseInt(s[2]);
				int n = Integer.parseInt(infile.readLine());
				int[][] foods = new int[n][3];
				for(int j = 0; j < n; j++) {
					s = infile.readLine().split("\\s+");
					foods[j][0] = Integer.parseInt(s[0]); 
					foods[j][1] = Integer.parseInt(s[1]); 
					foods[j][2] = Integer.parseInt(s[2]);
				}
				String result = getRes(mag, n, foods, i+1);
				int id = i + 1;
		        System.out.printf("Case #" + id + ": %s\n", result);

	        }
			infile.close();
		}catch(IOException e){
			e.printStackTrace();
		}		
	}
    
    private static String getRes(int[] mag, int n, int[][] foods, int id) {
    	Map<Integer, Set<Set<Integer>>> map = new HashMap<Integer, Set<Set<Integer>>>();
    	for(int i = 0; i < n; i++) {
    		if(foods[i][0] > mag[0] || foods[i][1] > mag[1] || foods[i][2] > mag[2]) continue;
    		int food = foods[i][0];
    		Map<Integer, Set<Set<Integer>>> addmap = new HashMap<Integer, Set<Set<Integer>>>();
    		
    		for(Integer in : map.keySet()) {
    			int key = in + food;
    			if(key > mag[0]) continue;
    			
    			Set<Set<Integer>> setSet = new HashSet<Set<Integer>>(); 
    			for(Set<Integer> inte : map.get(in)) {
					Set<Integer> newadd = new HashSet<Integer>();
					newadd.addAll(inte);
					newadd.add(i);
					setSet.add(newadd);
				}
    			if(addmap.containsKey(key)) {  				
    				addmap.get(key).addAll(setSet);
    			} else {
    				addmap.put(key, setSet);
    			}
    		}    		
    		
    		for(Integer key : addmap.keySet()) {
    			if(map.containsKey(key)) {  				
    				map.get(key).addAll(addmap.get(key));
    			} else {
    				map.put(key, addmap.get(key));
    			}
    		}
    		
    		Set<Integer> set = new HashSet<Integer>();
			set.add(i);
    		if(map.containsKey(food)) {
    			map.get(food).add(set);
    		} else {
    			Set<Set<Integer>> setSet = new HashSet<Set<Integer>>();
    			setSet.add(set);
    			map.put(food, setSet);
    		}
    	}
    	
    	if(map.containsKey(mag[0])) {
        	Set<Set<Integer>> setSet = map.get(mag[0]);
        	for(Set<Integer> set : setSet) {
        		int tot1 = mag[1], tot2 = mag[2];
        		for(Integer i : set) {
        			tot1 -= foods[i][1];
        			tot2 -= foods[i][2];
        		}
        		if(tot1 == 0 && tot2 == 0) return "yes";
        	}
    	}
    	return "no";

    }
}

def nsum(arr, n, val):        
    if arr is None or len(arr) < n:
        return []        
    sorted_indice = sorted(xrange(len(arr)), key=lambda i: arr[i])
    size = len(arr)

    def nsum_recursive(arr, prev_indice, prev_sum, result):
        
        if len(prev_indice) == n:
            if prev_sum == val:
                result.append(list(sorted_indice[i] for i in prev_indice))
        else:
            current_count = len(prev_indice)
            for idx in range(
                    0 if not prev_indice else prev_indice[-1]+1, 
                    size-(n-current_count-1)):
                current_sum = prev_sum + arr[sorted_indice[idx]]
                if current_sum>val and idx+1<size and arr[sorted_indice[idx+1]]>=0:
                    break
                nsum_recursive(arr, prev_indice+[idx], 
                               current_sum, result)
    result = []
    nsum_recursive(arr, [], 0, result)  
    return result

t=input()
for q in xrange(t):
    b=map(int,raw_input().split())
    qp=b[0]
    qc=b[1]
    qf=b[2]
    n=input()
    p=[]
    c=[]
    f=[]
    for i in xrange(n):
        b=map(int,raw_input().split())
        p.append(b[0])
        c.append(b[1])
        f.append(b[2])

    for i in range(1,len(p)+1):
        l= nsum(p,i,qp)
        flag=0
        if l:
            for e in xrange(len(l)):
                x=l[e]
                #print x
                sumc=sumf=0
                for i in x:
                    sumc=sumc+c[i]
                    sumf=sumf+f[i]
               # print sumf,sumc
                if sumc==qc and sumf==qf:
                    print "Case #"+str(q+1)+": yes"
                    flag=1
                    break
            if flag==1:
                break
    if flag==0:
        print "Case #"+str(q+1)+": no"

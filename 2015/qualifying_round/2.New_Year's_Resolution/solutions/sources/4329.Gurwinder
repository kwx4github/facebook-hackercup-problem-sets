def cook_books(input_file, output_file):
	fin = open(input_file, 'r')
	fout = open(output_file, 'w')

	line_no = 1
	fin.readline()
	for line in fin:
		line = line[:-1]
		digits = [int(num) for num in line]

		small = [num for num in digits]
		min_index = 0
		for i, d in enumerate(small):
			if d > 0 and d < small[min_index]:
				min_index = i
		small[min_index], small[0] = small[0], small[min_index]

		big = [num for num in digits]
		min_index = 0
		for i, d in enumerate(big):
			if d > big[min_index]:
				min_index = i
		big[min_index], big[0] = big[0], big[min_index]

		fout.write("Case #")
		fout.write(str(line_no))
		fout.write(": ")
		for num in small:
			fout.write(str(num))
		fout.write(' ')
		for num in big:
			fout.write(str(num))
		fout.write('\n')

		line_no += 1

def read_int(fin):
	return int(fin.readline()[:-1])

def read_ss_ints(fin):
	return [int(i) for i in fin.readline()[:-1].split()]

def goal_find(goals, foods):
	goal_met = True
	for g in goals:
		if g != 0:
			goal_met = False
			break
	if goal_met:
		return True

	num_goals = len(goals)
	for food in foods:
		can_eat = True

		for i, c in enumerate(food):
			if goals[i] < c:
				can_eat = False
				break

		if can_eat:
			new_goals = [goals[i] - food[i] for i in range(num_goals)]
			result = goal_find(new_goals, foods)
			if result:
				return True

	return False

def resolution(input_file, output_file):
	fin = open(input_file, 'r')
	fout = open(output_file, 'w')

	test_cases = read_int(fin)

	for test_case_no in range(1, test_cases + 1):
		goals = read_ss_ints(fin)
		num_foods = read_int(fin)
		foods = [read_ss_ints(fin) for i in range(num_foods)]

		can_solve = goal_find(goals, foods)

		fout.write("Case #")
		fout.write(str(test_case_no))
		fout.write(": ")
		fout.write("yes" if can_solve else "no")
		fout.write('\n')

resolution("resolution_input_final.txt", "resolution_output_final.txt")
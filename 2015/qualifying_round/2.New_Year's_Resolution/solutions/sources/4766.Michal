#!/usr/bin/python3
import sys
# import math
import fractions
sys.setrecursionlimit(1000000)
DEBUG = 0


def rl(convert='', a=False):
    line = sys.stdin.readline().split()
    for i, c in enumerate(convert):
        if c == 'i':
            line[i] = int(line[i])
        elif c == 's':
            pass
        elif c == 'f':
            line[i] = float(line[i])
    if not a and len(line) == 1:
        return line[0]
    return line


def gcd(*args):
    if len(args) == 0:
        return 0
    g = args[0]
    for i in range(1, len(args)):
        g = fractions.gcd(g, args[i])
    return g


def lcm(*args):
    if len(args) == 0:
        return 0
    g = args[0]
    for i in range(1, len(args)):
        g *= args[i]
    return g / gcd(*args)


def avg(a):
    return sum(a) / len(a)


def debug(*args, **kwargs):
    level = 1
    if 'level' in kwargs:
        level = kwargs.pop('level')
    if DEBUG >= level:
        print(*args, **kwargs)
        # pass


def yesno(val):
    return 'yes' if val else 'no'
# --------------------------------------------------------------------#

t = rl('i')

for tc in range(1, t + 1):
    gp, gc, gf = rl('iii')
    n = rl('i')
    foodp = []
    foodc = []
    foodf = []
    for i in range(n):
        p, c, f = rl('iii')
        foodp.append(p)
        foodc.append(c)
        foodf.append(f)

    ok = False
    for i in range(2**n):
        bi = bin(i)[2:]
        bi = '0' * (n - len(bi)) + bi
        sp = sum(x for j, x in enumerate(foodp) if bi[j] == '1')
        sc = sum(x for j, x in enumerate(foodc) if bi[j] == '1')
        sf = sum(x for j, x in enumerate(foodf) if bi[j] == '1')
        if sp == gp and sc == gc and sf == gf:
            ok = True
            break
    print('Case #%d: %s' % (tc, yesno(ok)))

#include <iostream>
#include <sstream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#include <cmath>
#include <climits>
#include <cfloat>
using namespace std;

const double PI = std::atan(1.0)*4;

inline bool check(vector<int> &a, vector<int> &b)
{
    for(int i=0;i<3;++i)
        if(a[i] != b[i])
            return false;
    return true;
}
inline void zero(vector<int> &a)
{
    for(int i=0;i<3;++i)
        a[i] = 0;
}

int main(int argc, char* argv[]){
    int T,N;
    cin >>T;
    for(int t=1;t<=T;++t)
    {
        vector<int> G(3,0);
        for(int i=0;i<3;++i)
            cin >> G[i];
        cin >> N;
        vector<int> elems(3,0);
        int actual = 0;
        vector<vector<int> > P(N, vector<int>(3, 0));
        for(int i=0;i<N;++i){
            bool insert = true;
            for(int j=0;j<3;++j){
                cin >> elems[j];
                if(elems[j] > G[j])
                    insert = false;
            }
            if(insert)
            {
                for(int j=0;j<3;++j)
                    P[actual][j] = elems[j];
                ++actual;
            }
        }
        N = actual;
        int vmax = pow(2,20)-1;
        vector<int> sums(3, 0);
        bool found = true;
        for(int i=0;i<vmax;++i)
        {
            zero(sums);
            int s = 1;
            for(int k = 0 ; k<N; ++k)
            {
                if( (i & s) == pow(2,k))
                    for(int x=0;x<3;++x)
                        sums[x] += P[k][x];
                s = s << 1;
            }
            found = check(G, sums);
            if(found)
            {
                cout << "Case #"<<t<<": yes" << endl;
                break;
            }
        }

        if(!found)
            cout << "Case #"<<t<<": no" << endl;
    }

    return EXIT_SUCCESS;
}



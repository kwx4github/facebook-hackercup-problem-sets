/* 
 * Author yuc@fb
 * 2015 Hacker Cup Rd. Qual.
 * New Year's Resolution
 */

#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

struct Food {
    int P;
    int C;
    int F;
    Food(int p, int c, int f) {
        P = p;
        C = c;
        F = f;
    }
    bool operator< (const Food& in) {
        return P < in.P || C < in.C || F < in.F;
    }
    bool operator== (const Food& in) {
        return P == in.P && C == in.C && F == in.F;
    }
    bool operator<= (const Food& in) {
        return *this < in || *this == in;
    }
    Food operator- (const Food& in) {
        return Food(P - in.P, C - in.C, F - in.F);
    }
};

bool findMatch(const vector<Food>& foods, Food target, int index) {
    if (target <= Food(0, 0, 0)) {
        return target == Food(0, 0, 0);
    }
    for (size_t i = index; i < foods.size(); i++) {
        if (findMatch(foods, target, i + 1) 
         || findMatch(foods, target - foods[i], i + 1)) {
            return true;
        } 
    }
    return false;
}

int main(int argc, char** argv) {
    if (argc < 2) {
        cout << "Usage: ./NewYearsResolution [filename]\n";
        return 1;
    }
    char* filename = argv[1];
    ifstream infile(filename);
    ofstream outfile("output_yuc.txt");
    if (infile.is_open() && outfile.is_open()) {
        int totalCount = 0;
        infile >> totalCount;
        for (int i = 0; i < totalCount; i++) {
            outfile << "Case #" << i + 1 << ": ";
            int goalP = 0, goalC = 0, goalF = 0;
            infile >> goalP >> goalC >> goalF;
            Food goal(goalP, goalC, goalF);
            int numFood = 0;
            infile >> numFood;
            vector<Food> foods;
            bool possible = false;
            for (int j = 0; j < numFood; j++) {
                int currP = 0, currC = 0, currF = 0;
                infile >> currP >> currC >> currF;
                Food entry(currP, currC, currF);
                if (goal < entry) {
                    continue;
                }
                foods.push_back(entry);
            }
            possible = findMatch(foods, goal, 0);
            outfile << (possible ? "yes\n" : "no\n");
        }
    } else {
        cout << "Can't open input or output files\n";
        return 1;
    }
    return 0;
}

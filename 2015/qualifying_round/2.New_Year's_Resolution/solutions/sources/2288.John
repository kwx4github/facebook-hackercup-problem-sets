#include <iostream>
#include <vector>
using namespace std;

struct Macronutrients {
    int protein, carbohydrates, fat;
};

Macronutrients& operator += (Macronutrients& lhs, const Macronutrients& rhs) {
    lhs.protein += rhs.protein;
    lhs.carbohydrates += rhs.carbohydrates;
    lhs.fat += rhs.fat;
    return lhs;
}

bool operator == (const Macronutrients& lhs, const Macronutrients& rhs) {
    return lhs.protein == rhs.protein && lhs.carbohydrates == rhs.carbohydrates && lhs.fat == rhs.fat;
}

istream& operator >> (istream& in, Macronutrients& x) {
    return in >> x.protein >> x.carbohydrates >> x.fat;
}

int main(){
    int t;
    cin >> t;
    for(int case_id = 1; case_id <= t; case_id++) {
        Macronutrients x;
        int n;
        cin >> x >> n;
        vector<Macronutrients> v(n);
        for(int i = 0; i < n; i++)
            cin >> v[i];
        bool ok = false;
        for(int i = 0; i < (1 << n); i++) {
            Macronutrients y = {0, 0, 0};
            for(int j = 0; j < n; j++)
                if((i >> j) & 1)
                    y += v[j];
            if(y == x) {
                ok = true;
                break;
            }
        }
        cout << "Case #" << case_id << ": " << (ok ? "yes" : "no") << endl;
    }
}

#include <iostream>
#include <algorithm>
#include <vector>
#include <tuple>
using namespace std;

typedef tuple<int, int, int> triple;

triple subTriple (triple a, triple b)
{
	int Pa, Ca, Fa, Pb, Cb, Fb;
	tie(Pa, Ca, Fa) = a;
	tie(Pb, Cb, Fb) = b;
	return make_tuple(Pa - Pb, Ca - Cb, Fa - Fb);
}

bool isPossible (triple needed, vector<triple>::iterator givenStart, vector<triple>::iterator givenEnd)
{
	if (needed == *givenStart)
		return true;
	else if (givenStart >= givenEnd)
		return false;
	else
		return (isPossible(needed, givenStart + 1, givenEnd) ||
				isPossible(subTriple(needed, *givenStart), givenStart + 1, givenEnd));
}

int main ()
{
	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		int N, tP, tC, tF;
		bool possible;
		triple needed;
		vector<triple> given;
		cin >> tP >> tC >> tF >> N;
		needed = make_tuple(tP, tC, tF);
		for (int j = 0; j < N; j++) {
			
			cin >> tP >> tC >> tF;
			given.push_back(make_tuple(tP, tC, tF));
		}
		possible = isPossible(needed, given.begin(), given.end());
		cout << "Case #" << i + 1 << ": " << (char *)(possible?"yes":"no") << endl;
	}
	return 0;
}


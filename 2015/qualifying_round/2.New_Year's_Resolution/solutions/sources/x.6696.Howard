#include <iostream>
#include <vector>
#include <map>
#include <stdio.h>

using namespace std;



struct food {
	int _a;
	int _b;
	int _c;
	int _i;

	bool operator=(const food &f) {
		return _a == f._a && _b == f._b && _c == f._c;
	}
	
} ;

bool operator<(const food &a, const food &f) {
		if(a._a == f._a) {
			if (a._b == f._b) {
				return a._c < f._c;
			}
			return a._b < f._b;
		}
		return a._a < f._a;
}
	

vector<food> foods;
food goal;
int n;
map<food, bool> f_;

bool f(int a, int b, int c, int i) {

//	cout << a << " " << b << " " << c << " " << i << " " << endl;

	int ai = foods[i]._a;
	int bi = foods[i]._b;
	int ci = foods[i]._c;

	if (i == n-1) {
		bool aeq = a == ai;
		bool beq = b == bi;
		bool ceq = c == ci;
		return aeq && beq && ceq;
	}

	bool skip = false;

	if (a - ai < 0 || b - bi < 0 || c - ci < 0) 
		skip = true;
 
	food tf;
	tf._a = a;
	tf._b = b;
	tf._c = c;
	tf._i = i;
	
	// if couldn't find tf
	if (f_.find(tf) == f_.end()) {
		bool include;
		if (skip) 
			include = false;
		else
			include =  f(a-ai, b-bi, c-ci, i+1);
		bool exclude = f(a, b, c, i+1);
		f_[tf] = include || exclude;
	}
	
	return f_[tf];
	
}

int main() {	
	int t;
	cin >> t;
	for (int i = 1; i <= t; i++) {
		f_.clear();
		foods.clear();
		int goala, goalb, goalc;
		cin >> goala >> goalb >> goalc;

		cin >> n;
		for(int j = 0; j < n; j++) {
			food newf;
			cin >> newf._a >> newf._b >> newf._c;
			foods.push_back(newf);
		}	
		cout << "Case #" << i << ": " << (f(goala, goalb, goalc, 0)? "yes" : "no") << endl;
	}
		
	
}

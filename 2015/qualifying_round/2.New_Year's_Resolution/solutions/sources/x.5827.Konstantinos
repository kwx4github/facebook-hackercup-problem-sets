#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <fstream>

using namespace std;

vector<int> PW;
vector<int> CW;
vector<int> FW;
vector<bool> vis;
int P,C,F,N;


bool dfs(int cur, int LP, int LC, int LF){

  if(LP == P && LC == C && LF == F) return true;

  if(LP > P || LC > C || LF > F) return false;
  
  vis[cur] = true;
    
  for(int i = 0; i < N; i++){
  
    if(!vis[i]){
     
      if(dfs(i, LP + PW[i], LC + CW[i], LF + FW[i])) return true;
      
    }
  
  }
  
  return false;

}


int main(){
  
  int t, T;
  ifstream fin;
  ofstream fout;
  fin.open("in", ios_base::in);
  fout.open("out", ios_base::out);
  
  fin>>T;
  for(t=0;t<T;t++){
  
    fin>>P>>C>>F;
    fin>>N;
    PW.resize(N);
    CW.resize(N);
    FW.resize(N);
    int i;
    for(i=0;i<N;i++)
      fin>>PW[i]>>CW[i]>>FW[i];
    
    bool found = false;
    for(i=0;i<N;i++){
      vis.clear();
      vis.resize(N, false);
      found = dfs(i, PW[i], CW[i], FW[i]);
      if(found) break;
    }
    
    if(found) fout<<"Case #"<<t+1<<": "<<"yes"<<endl;
    else fout<<"Case #"<<t+1<<": "<<"no"<<endl;
  }
  fin.close();
  fout.close();
  
  return 0;
}
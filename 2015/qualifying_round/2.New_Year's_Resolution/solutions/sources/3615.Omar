def remove_exceeding_foods(needed, foods)
	good = []
	foods.each do |food|
		next if food[0] > needed[0]
		next if food[1] > needed[1]
		next if food[2] > needed[2]
		good << food
	end
	return good
end

def get_nut_array(foods, index)
	nut_array = []
	foods.each do |food|
		nut_array << food[index]
	end
	return nut_array
end

def sum_multiplied_arrays(arr1, arr2)
	return (0...arr1.count).inject(0) {|r, i| r + arr1[i]*arr2[i]}
end

def get_matches(needed, foods)
	matches = []
	for i in 0..((2**foods.length)-1)
		matches << i.to_s(2).rjust(foods.length, '0').split('').map(&:to_i)
	end

	for c in 0..2
		nut_array = get_nut_array(foods, c)
		possible = []
		matches.each do |bin_code|
			possible << bin_code if needed[c] == sum_multiplied_arrays(nut_array, bin_code)
		end
		matches = possible
	end
	return matches
end

def solve_case(needed, foods)
	filtered_foods = remove_exceeding_foods(needed, foods)
	matches = get_matches(needed, filtered_foods)
	return "no" if matches.length == 0
	return "yes"
end

input_file = 'new_years_resolution.txt'
output_file = 'new_years_resolution_output.txt'

contents = File.read(input_file)
lines = contents.split("\n")

result = ''
i=0
count = lines[0].to_i
puts count
pointer = 0
for i in 1..count
	pointer += 1
	needed_cals = lines[pointer].split(' ').map(&:to_i)
	pointer += 1
	foods_count = lines[pointer].to_i
	foods_cals = []
	for j in 1..foods_count
		pointer += 1
		foods_cals << lines[pointer].split(' ').map(&:to_i)
	end
	ans = solve_case(needed_cals, foods_cals)
	out = "Case ##{i}: #{ans}\n"
	puts out
	result = result + out
end

File.open(output_file, 'w') { |f| f.write('') }
File.open(output_file, 'a') { |f| f.write(result) }
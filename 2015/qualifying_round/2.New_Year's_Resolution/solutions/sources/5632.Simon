

namespace Contest
{
    using System;
    using System.IO;

    public class Program
    {
        static void Main(string[] args)
        {
            Wrapper.Solve(new ProblemB(), Console.In, Console.Out);
        }
    }

    public class Wrapper
    {
        public static void Solve(IProblem problem, TextReader input, TextWriter output)
        {
            var parser = new InputParser(input);
            int T = parser.GetInt();

            for (int i = 0; i < T; i++)
            {
                output.WriteLine(string.Format("Case #{0}: {1}", i + 1, problem.SolveOneCase(parser)));
            }
        }
    }

    public interface IProblem
    {
        string SolveOneCase(InputParser input);
    }
}﻿


namespace Contest
{
    public class ProblemB : IProblem
    {
        private int N;
        private int[] f;
        private int[] c;
        private int[] p;
        private int Gp;
        private int Gc;
        private int Gf;

        public string SolveOneCase(InputParser input)
        {
            Gp = input.GetInt();
            Gc = input.GetInt();
            Gf = input.GetInt();

            N = input.GetInt();

            p = new int[N];
            c = new int[N];
            f = new int[N];

            for (int i = 0; i < N; i++)
            {
                p[i] = input.GetInt();
                c[i] = input.GetInt();
                f[i] = input.GetInt();
            }

            var ee = eat(0, 0, 0, 0);

            return ee ? "yes" : "no";
        }

        private bool eat(int i, int tp, int tc, int tf)
        {
            // eat
            tp += p[i];
            tc += c[i];
            tf += f[i];

            if (tp == Gp && tc == Gc && tf == Gf)
                return true;

            if( i+1 == N)
                return false;

            if( tp <= Gp && tc <= Gc && tf <= Gf)
            {
                var rr = eat(i + 1, tp, tc, tf);
                if (rr == true)
                    return true;
            }

            tp -= p[i];
            tc -= c[i];
            tf -= f[i];

            return eat(i + 1, tp, tc, tf);
        }
    }
}﻿

namespace Contest
{
    using System.Collections;
    using System;
    using System.IO;

    public class InputParser
    {
        private readonly TextReader _textReader;

        private IEnumerator _enumerator;

        public InputParser(TextReader textReader)
        {
            this._textReader = textReader;
            this._enumerator = (new string[0]).GetEnumerator();
        }

        public string ReadLine()
        {
            return _textReader.ReadLine();
        }

        public string[] GetStringArray()
        {
            return ReadLine().Split(new string[0], StringSplitOptions.RemoveEmptyEntries);
        }

        public int[] GetIntArray()
        {
            string[] tokens = GetStringArray();
            int length = tokens.Length;

            var values = new int[length];

            for (int i = 0; i < length; i++)
            {
                values[i] = int.Parse(tokens[i]);
            }

            return values;
        }

        public long[] GetLongArray()
        {
            string[] tokens = GetStringArray();
            int length = tokens.Length;

            var values = new long[length];

            for (int i = 0; i < length; i++)
            {
                values[i] = long.Parse(tokens[i]);
            }

            return values;
        }

        public string GetString()
        {
            while (_enumerator.MoveNext() == false)
            {
                _enumerator = GetStringArray().GetEnumerator();
            }

            return (string)_enumerator.Current;
        }

        public int GetInt()
        {
            return int.Parse(GetString());
        }

        public long GetLong()
        {
            return long.Parse(GetString());
        }
    }
}
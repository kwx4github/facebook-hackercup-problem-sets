#pragma comment(linker, "/STACK:1267777216")
#include<iostream>
#include<vector>
#include<string>
#include<sstream>
#include<cmath>
#include<iomanip>
#include<ctime>
#include<cctype>
#include<fstream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<cstdio>
#include<cstdlib>
#include<utility>
#include<algorithm>
#include<functional>
#include<cassert>
//#include<unordered_map>
#define ll long long
#define ull unsigned long long
#define Inf (1000*1000*1000 + 7)
#define InfL (ll)((ll)1000*1000*1000*1000*1000*1000 + 7)
#define pii pair < ll , ll >
#define mp make_pair
#define all(x) x.begin() , x.end()
#define sbstr(s, i, j) s.substr(i, j - i + 1)
#define in(n) ll (n); cin >> n
#define sqr(x) ((double)(x)*(x))
#define PI 3.14159265358979
#define EPS 1e-6
#define all(x) x.begin() , x.end()
#define so(x) sort(all(x))
#define re(x) reverse(all(x))
using namespace std;
namespace Lev
{
	struct node
	{
		int p , c , f;
		node( int p = 0 , int c = 0 , int f = 0 ) : p(p) , c(c) , f(f){}
		bool equal ( const node & a )
		{
			return ( a.p == p && a.c == c && a.f == f ) ;
		}
	};
	void run()
	{
		int T;
		cin >> T;
		for ( int i = 1 ; i <= T ; i++ )
		{
			node all;
			cin >> all.p >> all.c >> all.f;
			int n;
			cin >> n;
			vector < node > vec ( n );
			for ( int i = 0 ; i < n ; i++ )
				cin >> vec [ i ].p >> vec [ i ].c >> vec [ i ].f ;
			bool b = false;
			for ( int mask = 1 ; mask < ( 1 << n ) ; mask++ )
			{
				node temp;
				for ( int j = 0 ; j < n ; j++ )
					if ( mask & ( 1 << j ) )
					{
						temp.p += vec [ j ].p;
						temp.f += vec [ j ].f;
						temp.c += vec [ j ].c;
					}
				if ( temp.equal ( all ) )
				{
					b = true;
					break;
				}
			}
			if ( b ) 
				printf ( "Case #i: yes\n" );
			else
				printf ( "Case #i: no\n" );
		}


	}
}
int main()
{
	ios_base::sync_with_stdio( 0 );
#ifdef Levon
    freopen ( "in.txt" , "r" , stdin );
    freopen ( "out.txt" , "w" , stdout );
#endif
	cout << fixed << setprecision(13);
    Lev::run(); return 0;
}
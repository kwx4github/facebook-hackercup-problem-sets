//#New Year's Resolution

//Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some
//research and has found out that calories come from three main sources, called
//macronutrients: protein, carbohydrates, and fat. Alex wants to get the right
//balance of protein, carbohydrates, and fat to have a balanced diet. For each
//available food, Alex can only choose to eat it or not eat it. He can't eat a
//certain food more than once, and he can't eat a fractional amount of a food.

//##Input

//Input begins with an integer T, the number of test cases. For each test case,
//the first line consists of three space-separated integers: GP, GC, and
//GF, which represent the amount of protein, carbohydrates, and fat that
//Alex wants to eat. The next line has the number of foods for that test
//case, an integer N. The next N lines each consist of three
//space-separated integers: P, C, and F, which represent the amount of
//protein, carbohydrates, and fat in that food, respectively.

//##Output

//For each test case i, print a line containing "Case #i: " followed by either
//"yes" if it is possible for Alex to eat the exact amount of each macronutrient,
//or "no" if it is not possible.

//##Constraints
//1 ≤ T ≤ 20 
//1 ≤ N ≤ 20 
//10 ≤ GP, GC, GF ≤ 1000 
//10 ≤ P, C, F ≤ 1000 

//##Example input
//5
//100 100 100
//1
//100 100 100
//100 100 100
//3
//10 10 40
//10 30 10
//10 60 50
//100 100 100
//5
//40 70 30
//30 10 40
//20 20 50
//10 50 90
//40 10 20
//292 264 512
//20
//909 302 261
//705 597 823
//291 51 126
//28 697 57
//593 31 826
//311 256 57
//292 14 47
//29 730 716
//12 529 146
//768 16 439
//37 472 15
//350 192 34
//163 468 238
//69 173 10
//203 72 690
//424 875 213
//223 593 292
//151 46 10
//88 90 16
//773 653 711
//991 827 352
//20
//29 560 929
//139 681 102
//144 853 10
//84 729 80
//218 20 67
//140 80 901
//428 20 500
//520 970 128
//422 419 30
//413 101 192
//467 448 501
//32 939 684
//34 20 38
//251 317 132
//588 437 10
//648 21 79
//391 25 14
//499 22 24
//854 77 361
//405 25 20

//##example output
//Case #1: yes
//Case #2: no
//Case #3: yes
//Case #4: no
//Case #5: yes
//
//started 11/01/2015 7:30:25 AM
//I don't have much idea on this problem.. so far the only
//way I can think of is backtrack.. not sure if backtrack
//will take too long time to run..
//it also feels like a bit of knapsack problem but not exactly..
//or maybe it's set cover problem
//
//let's give a try anyway
//for backtrack, how do we know we had a solution?
//I think we can pass three argument in which is for GP, GC, GF
//if all those of value are zero, then which means we find an answer
//although the problem only ask yes or no so it feels a bit overkill
//with backtrack because it actually gives us the combination.
//we don't really need that but no better idea at the moment..
//
//next question is how do we choose candidates?
//we should sort the food however there are three fields so which field
//should we use to sort?
//maybe we don't sort so when we choose candidate we just compare the left
//target value with the food and only choose the one food <= left target

// * introduce notation
// - target - an instance of food type , represent the target
// - foods - vector of food type
// - sol - solution vector, NOTE: this one stores the index into foods vector,
// not the food object

// coding started 11/01/2015 7:44:51 AM
#include <vector>
#include <iostream>
#include <fstream>
#include <algorithm>
using namespace std;

struct Food
{
    int p;
    int c;
    int f;
};

bool CompareFood(const Food& left, const Food& right)
{
    if (left.p == right.p)
    {
        if (left.c == right.c)
        {
            return left.p < right.p;
        }
        return left.c < right.c;
    }

    return left.f < right.f;
}

void ChooseCandidates(const vector<Food>& foods, const vector<int>& solution,
                      vector<int>& candidates, const Food& target)
{
    vector<int> chosen(foods.size());
    for (int i = 0; i < solution.size(); ++i)
    {
        chosen[solution[i]] = 1;
    }

    for (int i = 0; i < foods.size(); ++i)
    {
        if (chosen[i] == 0 && foods[i].p <= target.p &&
            foods[i].c <= target.c && foods[i].f <= target.f)
        {
            candidates.push_back(i);
        }
    }
}

void Backtrack(const vector<Food>& foods, vector<int>& solution,
               Food& target, bool& found)
{
    ////cout << "target now is:" << target.p << " " << target.c << " "
        //<< target.f << endl;
    if (found || (target.p == 0 && target.c == 0 && target.f == 0))
    {
        //cout << "answer found, return" << endl;
        //cout << "food chosen are: " << endl;
        //for (auto s : solution)
            //cout << foods[s].p << " " << foods[s].c << " " << foods[s].f << endl;
        found = true;
        return;
    }

    if (target.p < 0 || target.c < 0 || target.f < 0)
    {
        //cout << "not possible, back" << endl;
        return;
    }

    vector<int> candidates;
    ChooseCandidates(foods, solution, candidates, target);

    for (int i = 0; i < candidates.size(); ++i)
    {
        solution.push_back(candidates[i]);
        Food food = foods[candidates[i]];
        target.p -= food.p;
        target.c -= food.c;
        target.f -= food.f;
        //cout << "choose food: " << candidates[i] << " which is: "
            //<< food.p << " " << food.c << " " << food.f << endl;
        Backtrack(foods, solution, target, found);
        solution.pop_back();
        target.p += food.p;
        target.c += food.c;
        target.f += food.f;
        if (found)
            break;
    }
}

bool Resolution(const vector<Food>& foods, Food target)
{
    bool possible = false;
    vector<int> solution;
    Backtrack(foods, solution, target, possible);

    return possible;
}

int main(int argc, char *argv[])
{
    ifstream input("input.txt");
    int nCases = 0;
    input >> nCases;
    ofstream output("out.txt");
    for (int i = 0; i < nCases; ++i)
    {
        Food target;
        int numFoods = 0;
        input >> target.p >> target.c >> target.f >> numFoods;
        vector<Food> foods(numFoods);
        //cout << "numFoods:" << numFoods << endl;
        //cout << "target:" << target.p << " " << target.c << " " << target.f << endl;

        for (int i = 0; i < numFoods; ++i)
        {
            Food food;
            input >> food.p >> food.c >> food.f;
            //cout << "add food:" << food.p << " " << food.c << " " << food.f << endl;
            foods[i] = food;
        }
        sort(foods.begin(), foods.end(), CompareFood);

        output << "Case #" << i + 1 << ": "
            << (Resolution(foods, target) ? "yes" : "no") << endl;
    }

    return 0;
}

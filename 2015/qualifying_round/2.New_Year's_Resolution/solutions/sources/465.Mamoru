import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.InputMismatchException;

public class Main {
	public static void main(String[] args) {
		new Main().run();
	}

	void run() {
		InputReader in = new InputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		int T = in.nextInt();
		for (int t = 0; t < T; t++) {
			gp = in.nextInt();
			gc = in.nextInt();
			gf = in.nextInt();
			n = in.nextInt();
			P = new int[n];
			C = new int[n];
			F = new int[n];
			for (int i = 0; i < n; i++) {
				P[i] = in.nextInt();
				C[i] = in.nextInt();
				F[i] = in.nextInt();
			}
			out.println("Case #" + (t + 1) + ": " + (dfs(0, 0, 0, 0) ? "yes" : "no"));
		}
		out.flush();
	}

	int gp, gc, gf, n;
	int P[], C[], F[];

	boolean dfs(int i, int p, int c, int f) {
		if (p >= gp || c >= gc || f >= gf)
			return p == gp && c == gc && f == gf;
		if (i == n)
			return false;
		if (dfs(i + 1, p + P[i], c + C[i], f + F[i]))
			return true;
		if (dfs(i + 1, p, c, f))
			return true;
		return false;
	}

	static class InputReader {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int next() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = next();
			while (isSpaceChar(c))
				c = next();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = next();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = next();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long nextLong() {
			int c = next();
			while (isSpaceChar(c))
				c = next();
			long sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = next();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = next();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
}
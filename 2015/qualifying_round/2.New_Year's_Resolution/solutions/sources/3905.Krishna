#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long long unsigned int llu;
typedef pair<int, int> pii;
typedef map<int, int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;

#define tr(c,i) for(auto i=(c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define rep(i,n) for(int i=0;i<(n);i++)
#define fu(i,a,b) for(int i=(a);i<=(b);i++)
#define fd(i,a,b) for(int i=(a);i>=(b);i--)
#define clr(x) memset(x, 0, sizeof x);
#define perm(x) next_permutation(all(x))
#define all(x) x.begin(),x.end()
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
#define rdarr(a,n) rep(i,n) cin >> a[i];
#define rdmat(a,n,m) rep(i,n) rep(j,m) cin >> a[i][j];
int tcs, tc;
#define tcsolve() cin >> tcs; for(tc=0; tc<tcs; ++tc) solve();

const int MAXN = 20;
int n;
bool found;
int gp, gc, gf;
int p[MAXN];
int c[MAXN];
int f[MAXN];

// Recursively iterate over subsets 
void rec(int i, int cp, int cc, int cf) {
	if (found) return;
	if (i == n) {
		if (cp == gp && cc == gc && cf == gf)
			found = true;
		return;
	}
	rec(i+1, cp, cc, cf);
	int np = cp + p[i];
	int nc = cc + c[i];
	int nf = cf + f[i];
	if (np <= gp && nc <= gc && nf <= gf)
		rec(i+1, np, nc, nf);
}

void solve() {
	found = false;
	cin >> gp >> gc >> gf >> n;
	rep (i, n) cin >> p[i] >> c[i] >> f[i];
	rec(0, 0, 0, 0);
	cout << "Case #" << tc+1 << ": " << (found?"yes\n":"no\n");
}

int main () {
	std::ios::sync_with_stdio(false);
	tcsolve();
	return 0;
}

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.HashSet;
import java.util.Scanner;

public class Solution {
	class Food{
		public int P;
		public int C;
		public int F;
		Food(int P, int C, int F) {
			this.P = P;
			this.C = C;
			this.F = F;
		}
	}
	
    void run() throws IOException {
    	File output = new File(".\\output.txt");
    	File input = new File(".\\input.txt");
    	PrintStream printStream = new PrintStream(output);
    	System.setOut(printStream);
        Scanner scanner = new Scanner(input);
        int T = scanner.nextInt();
        
        for (int i = 0; i < T; i++) {
        	System.out.print("Case #" + (i + 1) + ": ");
        	int targetP, targetC, targetF;
        	targetP = scanner.nextInt();
        	targetC = scanner.nextInt();
        	targetF = scanner.nextInt();
        	int n = scanner.nextInt();
        	
        	Food[] foods = new Food[n];
        	
        	for (int j = 0; j < n; j++) {
        		int P = scanner.nextInt();
        		int C = scanner.nextInt();
        		int F = scanner.nextInt();
        		
        		foods[j] = new Food(P, C, F);
        	}

        	if (canDo(new Food(targetP, targetC, targetF), foods)) {
        		System.out.println("yes");
        	} else {
        		System.out.println("no");
        	}
        }
    }

	private boolean canDo(Food food, Food[] foods) {
		for (int i = 0; i < (1 << foods.length); i++) {
			int nowP = 0, nowC = 0, nowF = 0;
			for (int j = 0; j < foods.length; j++) {
				if ((i & (1 << j)) != 0) {
					nowP += foods[j].P;
					nowC += foods[j].C;
					nowF += foods[j].F;
				}
			}
			
			if (nowP == food.P && nowC == food.C && nowF == food.F) {
				return true;
			}
		}
		
		return false;
	}

	private long getMax(String input) {
		long ret = Long.parseLong(input);
		char[] str = input.toCharArray();
		for (int i = 0; i < str.length; i++) {
			for (int j = i + 1; j < str.length; j++) {
				if (i == 0 && str[j] == '0') continue;
				char[] newStr = str.clone();
				char tmp = newStr[i];
				newStr[i] = newStr[j];
				newStr[j] = tmp;
				
				long now = Long.parseLong(new String(newStr));
				
				ret = Math.max(ret, now);
			}
		}
		
		return ret;
	}

	private long getMin(String input) {
		long ret = Long.parseLong(input);
		char[] str = input.toCharArray();
		for (int i = 0; i < str.length; i++) {
			for (int j = i + 1; j < str.length; j++) {
				if (i == 0 && str[j] == '0') continue;
				char[] newStr = str.clone();
				char tmp = newStr[i];
				newStr[i] = newStr[j];
				newStr[j] = tmp;
				
				long now = Long.parseLong(new String(newStr));
				
				ret = Math.min(ret, now);
			}
		}
		
		return ret;
	}

	public static void main(String[] args) throws IOException {
        (new Solution()).run();
    }
}

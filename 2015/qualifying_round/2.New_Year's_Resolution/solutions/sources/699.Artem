import java.io.*;
import java.util.*;

public class NewYearsResolution {

	FastScanner in;
	PrintWriter out;

	void solve() {
		int a = in.nextInt(), b = in.nextInt(), c=  in.nextInt();
		
		int curA = 0, curB = 0, curC = 0;
		int n = in.nextInt();
		int[] as = new int[n], bs=  new int[n], cs=  new int[n];
		for (int i = 0; i < n; i++) {
			as[i] = in.nextInt();
			bs[i] = in.nextInt();
			cs[i] = in.nextInt();
		}
		
		for (int i = 1; i < 1 << n; i++) {
			int code = i ^ (i >>> 1);
			int prevCode = (i - 1) ^ ((i - 1) >>> 1);
			int bit = Integer.bitCount((code ^ prevCode)- 1);
			if ((code & (1 << bit)) != 0) {
				curA += as[bit];
				curB += bs[bit];
				curC += cs[bit];
			} else {
				curA -= as[bit];
				curB -= bs[bit];
				curC -= cs[bit];
			}
			
			if (curA == a && curB == b && curC == c) {
				out.println("yes");
				return;
			}
		}
		out.println("no");
	}

	void run() {
		try {
			in = new FastScanner("input.txt");
			out = new PrintWriter("output.txt");
			int T = in.nextInt();
			for (int test = 1; test <= T; test++) {
				out.print(String.format("Case %d: ", test));
				solve();
			}
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		public FastScanner(String s) {
			try {
				br = new BufferedReader(new FileReader(s));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String nextToken() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(nextToken());
		}

		long nextLong() {
			return Long.parseLong(nextToken());
		}

		double nextDouble() {
			return Double.parseDouble(nextToken());
		}
	}

	public static void main(String[] args) {
		new NewYearsResolution().run();
	}
}

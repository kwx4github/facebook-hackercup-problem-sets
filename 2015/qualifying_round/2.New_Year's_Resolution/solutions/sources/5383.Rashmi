import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;

public class ProblemTwo {

	public static boolean canbeDone(ArrayList<Food> foods,Food eatFood){
		boolean canBedone=false;
		int[] foodp=convertFoodToArray(foods,"P");
		int[] foodc=convertFoodToArray(foods,"C");
		int[] foodf=convertFoodToArray(foods,"F");
		
		GetAllSubsetByStack get = new GetAllSubsetByStack(eatFood.protein);
		get.populateSubset(foodp, 0, foodp.length);
		 ArrayList<List> possibleComb=get.allPossibleComb;	
		 if(possibleComb.size()>0){
			 boolean cPoss=checkSumAgainstIndex(possibleComb, foodc, eatFood.carb);
			 boolean fPass=checkSumAgainstIndex(possibleComb, foodf, eatFood.fat);
			 if(cPoss && fPass){
				 canBedone=true;
			 }
		 }
		return canBedone;
	}
	
	public static boolean checkSumAgainstIndex(ArrayList<List> indices,int[] foodt,int size){
		boolean possible=false;
		int sum=0;
		for(List eachComb:indices){
			sum=0;
	        for (Object i : eachComb) {
	        	int index=(Integer)i;
	            sum=sum+foodt[index];
	        }
	        if(sum==size){
	        	possible=true;
	        	break;
	        }
	       
		}
		
		return possible;
	}
	
	public static int[] convertFoodToArray(ArrayList<Food> foods,String type){
		int[] array=new int[foods.size()];
	
		int i=0;
		for(Food food:foods){
			switch (type) {
			case "P":
				array[i]=food.protein;				
				break;
			case "C":
				array[i]=food.carb;				
				break;
			case "F":
				array[i]=food.fat;				
				break;	

			}
			i++;
		}
		
		return array;
	}
	
	public static Food convertStringToFood(String input) {
		Food food = null;
		input=input.replace(" ", ",");
		String array[] = input.split(",");
		food = new Food(Integer.parseInt(array[0]), Integer.parseInt(array[1]),
				Integer.parseInt(array[2]));
		return food;
	}

	public static void main(String args[]) throws IOException {
		String thisLine = null;
		try {

			BufferedReader br = new BufferedReader(new FileReader(
					"new_years_resolution.txt"));
			BufferedWriter br1 = new BufferedWriter(new FileWriter(
					"new_years_resolution_output.txt"));

			TestInput testInput = null;
			String number = br.readLine();
			if (number != null) {
				testInput = new TestInput(Integer.parseInt(number));
				ArrayList<TestCase> testCases = new ArrayList<TestCase>();
				testInput.testCases=testCases;
				for (int i = 0; i < Integer.parseInt(number); i++) {
					String eatFood = br.readLine();
					int noAvailableFood = Integer.parseInt(br.readLine());
					TestCase testCase = new TestCase(noAvailableFood,
							convertStringToFood(eatFood));
					testCases.add(testCase);
					ArrayList<Food> foodMap = new ArrayList<Food>();
					for (int j = 1; j <=noAvailableFood; j++) {
							String eachFood=br.readLine();
							foodMap.add(convertStringToFood(eachFood));
					}
					testCase.setFoodMap(foodMap);

				}

			}
			
			ArrayList<TestCase> inputs=testInput.testCases;
			int i=1;
			for(TestCase testCase:inputs){
				String out="";
				if(canbeDone(testCase.foodMap, testCase.eatFood)){
					out="yes";
				}
				else{
					out="no";
				}
				
				br1.write("Case #"+i+": "+out);
				br1.newLine();
				i++;
				//System.out.println(canbeDone(testCase.foodMap, testCase.eatFood));
			}
			br1.flush();
			br1.close();
			
			 int[] DATA = { 40,30,20,10,40};
			//output
			 

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}

class TestInput {
	int size;
	ArrayList<TestCase> testCases;

	public TestInput(int size) {
		testCases = new ArrayList<TestCase>(size);
	}
}

class TestCase {
	Food eatFood;
	int size;
	ArrayList<Food> foodMap;

	public TestCase(int size, Food eatFood) {
		foodMap = new ArrayList<Food>(size);
		this.eatFood = eatFood;
	}

	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	public ArrayList<Food> getFoodMap() {
		return foodMap;
	}

	public void setFoodMap(ArrayList<Food> foodMap) {
		this.foodMap = foodMap;
	}

	public Food getEatFood() {
		return eatFood;
	}

	public void setEatFood(Food eatFood) {
		this.eatFood = eatFood;
	}

}

class Food {
	int protein;
	int carb;
	int fat;

	public Food(int protein, int carb, int fat) {
		super();
		this.protein = protein;
		this.carb = carb;
		this.fat = fat;
	}

	public int getProtein() {
		return protein;
	}

	public void setProtein(int protein) {
		this.protein = protein;
	}

	public int getCarb() {
		return carb;
	}

	public void setCarb(int carb) {
		this.carb = carb;
	}

	public int getFat() {
		return fat;
	}

	public void setFat(int fat) {
		this.fat = fat;
	}

}

class GetAllSubsetByStack {

    /** Set a value for target sum */
    public  int targetSum =0;

   
	public ArrayList<List> allPossibleComb=new ArrayList<List>();
	public  Stack<Integer> stack = new Stack<Integer>();
	public Stack<Integer> indexStack = new Stack<Integer>();
    
    /** Store the sum of current elements stored in stack */
    private int sumInStack = 0;
    
    public GetAllSubsetByStack(int targetSum) {
		this.targetSum=targetSum;
	}

    public void populateSubset(int[] data, int fromIndex, int endIndex) {

        if (sumInStack == targetSum) {
            allPossibleComb.add(Arrays.asList(indexStack.toArray()));
        }

        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

            if (sumInStack + data[currentIndex] <= targetSum) {
                stack.push(data[currentIndex]);
                indexStack.push(currentIndex);
                sumInStack += data[currentIndex];

                populateSubset(data, currentIndex + 1, endIndex);
                sumInStack -= (Integer) stack.pop();
                indexStack.pop();
            }
        }
    }

 
    
 
}

#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <utility>
#include <cmath>
#include <queue>
#include <stack>
#include <cassert>
#include <cstring>
#include <climits>
#include <functional>
#define VAR(i,v) __typeof(v) i = (v)
#define SIZE(x) ((int)(x).size())
#define ALL(x) (x).begin(), (x).end()
#define REP(i,b) for(int i=0; i<(b); ++i)
#define FOR(i,a,b) for(int i=(a); i<=(b); ++i)
#define FORD(i,a,b) for(int i=(a); i>=(b); --i)
#define FOREACH(i,c) for(VAR(i,(c).begin()); i != (c).end(); ++i)
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define NL printf("\n")

using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef long long LL;

const int INF = 2147483640;
const int MAXN = 1000005;

struct Food {
	int p, c, f;
	Food(int p=0, int c=0, int f=0) : p(p), c(c), f(f) { };
};

int main() {
	int t;
	scanf("%d", &t);
	REP(i,t) {
		int p, c, f;
		scanf("%d %d %d", &p, &c, &f);
		int n;
		scanf("%d", &n);
		vector<Food> g(n);
		REP(i,n) scanf("%d %d %d", &g[i].p, &g[i].c, &g[i].f);
		bool res = 0;
		int s = 1 << n;
		REP(i,s) {
			int pos = n-1;
			int b = i;
			int sp = 0, sc = 0, sf = 0;
			while(b > 0) {
				if((b&1)==1) {
					sp += g[pos].p;
					sc += g[pos].c;
					sf += g[pos].f;
				}
				b >>= 1;
				pos--;
			}
			if(sp == p && sc == c && sf == f) res = 1;
		}
		printf("Case #%d: %s\n", i+1, (res) ? "yes" : "no");
	}
	return 0;
}

import java.util.Scanner;

final class Food
{
	public final int p, c, f;
	
	public Food(int p, int c, int f)
	{
		this.p = p;
		this.c = c;
		this.f = f;
	}
}

public class Resolution
{
	
	public static void main(String[] args)
	{
		Scanner in = new Scanner(System.in);
		
		int testCases = Integer.parseInt(in.nextLine());
		int[] lookingFor = new int[3];
		
		for (int i = 0; i < testCases; i++)
		{
			String[] lookingForString = in.nextLine().split(" ");
			lookingFor[0] = Integer.parseInt(lookingForString[0]);
			lookingFor[1] = Integer.parseInt(lookingForString[1]);
			lookingFor[2] = Integer.parseInt(lookingForString[2]);
			
			int foods = Integer.parseInt(in.nextLine());
			Food[] possibleFoods = new Food[foods];
			
			for (int j = 0; j < foods; j++)
			{
				String[] foodVals = in.nextLine().split(" ");
				possibleFoods[j] = new Food(Integer.parseInt(foodVals[0]), Integer.parseInt(foodVals[1]), Integer.parseInt(foodVals[2]));
			}
			
			boolean possible = isPossible(lookingFor, possibleFoods, 0, 0, 0, 0);
			
			System.out.println("Case #" + (i+1) + ": " + (possible?"yes":"no"));
		}
		
		in.close();
	}
	
	public static boolean isPossible(int[] lookingFor, Food[] foods, int index, int p, int c, int f)
	{
		if (lookingFor[0] == p && lookingFor[1] == c && lookingFor[2] == f)
		{
			return true;
		}
		
		if (index >= foods.length || lookingFor[0] < p || lookingFor[1] < c || lookingFor[2] < f)
		{
			return false;
		}
		
		return isPossible(lookingFor, foods, index+1, p+foods[index].p, c+foods[index].c, f+foods[index].f)
			|| isPossible(lookingFor, foods, index+1, p, c, f);
	}
	
}

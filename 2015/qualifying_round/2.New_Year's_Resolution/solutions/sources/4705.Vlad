sol_found = False

def subsetsum(numbers, targets, partials=[[], [], []]):
    global sol_found
    s0, s1, s2 = sum(partials[0]), sum(partials[1]), sum(partials[2])
    
    if (s0 == targets[0] and s1 == targets[1] and s2 == targets[2]):
        sol_found = True
        #print partials
        #print "Is acceptable for "
        #print targets
        
    if s0 > targets[0] or s1 > targets[1] or s2 > targets[2]:
        return # no more need for search

    for i in range(len(numbers[0])):
        n0, n1, n2 = numbers[0][i], numbers[1][i], numbers[2][i]
        r0, r1, r2 = numbers[0][i+1:], numbers[1][i+1:], numbers[2][i+1:]
        subsetsum([r0, r1, r2], targets, [partials[0] + [n0], partials[1] + [n1], partials[2] + [n2]])
            

def process(arrays, targets):
    global sol_found
    sol_found = False
    subsetsum(arrays, targets)
    return "yes" if sol_found else "no"


T = int(raw_input())
for t in xrange(T):
    Gs = map(int, raw_input().split())
    N = int(raw_input())

    P = []
    C = []
    F = []
    for n in xrange(N):
        p, c, f = raw_input().split()
        P.append(p)
        C.append(c)
        F.append(f)

    P, C, F = map(int, P), map(int, C), map(int,F)

    print "Case #%i: %s" % (t+1, process([P, C, F], Gs))

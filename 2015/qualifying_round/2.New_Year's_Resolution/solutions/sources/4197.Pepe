#!/usr/bin/php
<?php
$fReader = new FileReader('php://stdin');
$tCases = (int) $fReader->getLine();
$i = 0;
while ($i++ < $tCases) {
    $board = new FoodCounter($fReader);
    echo "Case #$i: {$board->getSolution()}" . PHP_EOL;
}

class FoodCounter {
    protected $alex;
    
    protected $nFood;
    
    protected $foods = [];
    
    public function __construct(FileReader $fReader) {
        $this->alex = $this->processFood($fReader->getLine());
        $this->nFood = (int) $fReader->getLine();
        for ($i = 0; $i < $this->nFood; ++$i) {
            $this->foods[] = $this->processFood($fReader->getLine());
        }
    }

    protected function processFood($data) {
        return explode(' ', $data);
    }
    
    public function getSolution() {
        return $this->combine($this->foods, [0, 0, 0]) === true ? 'yes' : 'no';
    }

    protected function combine(array &$foods, array $amount) {
        $compare = $this->compareWithAlex($amount);
        if ($compare !== null) {
            return $compare;
        }

        for ($i = 0, $t = count($foods); $i < $t; ++$i) {
            $auxFoods = $foods;
            array_splice($auxFoods, $i, 1);
            
            $result = $this->combine($auxFoods, [
                $amount[0] + $foods[$i][0],
                $amount[1] + $foods[$i][1],
                $amount[2] + $foods[$i][2]
                    ]);
            if ($result === true) {
                return true;
            }
        }
        return false;
    }
    
    protected function compareWithAlex(array $amount) {
        $return = true;
        for ($i = 0; $i < 3; ++$i) {
            if ($amount[$i] > $this->alex[$i]) {
                $return = false;
                break;
            } elseif ($amount[$i] != $this->alex[$i]) {
                $return = null; 
            }
        }
        return $return;
    }
}

class FileReader {
    protected $handle;

    protected $_file;

    public function __construct($filename) {
        $this->_file = $filename;
        $this->open();
    }

    public function getLine() {
        return trim(fgets($this->handle));
    }

    public function open() {
        $this->handle = fopen($this->_file, 'r');
    }

    public function close() {
        fclose($this->handle);
    }

}
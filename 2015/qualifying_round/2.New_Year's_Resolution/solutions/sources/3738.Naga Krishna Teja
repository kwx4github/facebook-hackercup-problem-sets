
#include <cstdlib>
#include <iostream>

using namespace std;

class Food {
	public:
	 	static int Gp, Gc, Gf;

	 	int P, C, F;
	 	int currentIndex;
	 	bool success;

	 	Food() {
	 		P = C = F = 0;
	 		success = false;
	 	}
		void print() {
			cout << Gp << " " << Gc << " " << Gf << " " << P << " " << C << " " << F << endl;
		}
		bool canCombine(const Food &f) const {
			return ((f.P + this->P <= Gp) && (f.C + this->C <= Gc) && (f.F + this->F <= Gf));
		}
		bool checkSuccess() {
			success = ((P == Gp) && (C == Gc) && (F == Gf));
			return success;
		}
		Food *add(const Food &f) const {
			Food *totalF = NULL;
			if (canCombine(f)) {
				totalF = new Food();
				totalF->P = this->P + f.P;
				totalF->C = this->C + f.C;
				totalF->F = this->F + f.F;
				totalF->currentIndex = f.currentIndex;
				totalF->checkSuccess();
			}
			return totalF;
		}
};

bool solve (const Food *foods, int N, const Food &currentFood) {
	//cout << "solve called " << N << endl;
	bool ret = currentFood.success;
	for (int i=currentFood.currentIndex+1; i<N; ++i) {
		Food *combined = currentFood.add(foods[i]);
		if (combined) {
			if (combined->success) {
				return true;
			} else {
				ret = ret || solve(foods, N, *combined);
			}
		}
	}
	return ret;
}

int Food::Gp, Food::Gc, Food::Gf;

int main(int argc, char **argv) {
	int T;
	cin >> T;
	for (int j = 1; j <= T; ++j) {
		int ret = false;
		int N;
		cin >> Food::Gp >> Food::Gc >> Food::Gf;
		cin >> N;
		Food *foods = new Food[N];
		for (int i = 0; i < N; ++i) {
			cin >> foods[i].P >> foods[i].C >> foods[i].F;
			foods[i].currentIndex = i;
			ret = ret || foods[i].checkSuccess();
		}
		/*cout << "output:" << endl;
		for (int i = 0; i < N; ++i) {
			foods[i].print();
		}*/
		
		for (int i = 0; !ret && i < N; ++i) {
			ret = ret || solve(foods, N, foods[i]);
		}
		cout << "Case #" << j << ": " << (ret?"yes":"no") << endl;
	}
}
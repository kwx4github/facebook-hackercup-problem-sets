T = int(raw_input())

def findSubsets(subset, goal, arr, i):
	if goal == 0: return [[]]
	if i == 0: return []
	if not subset[goal][i]: return []
	ans = []
	if subset[goal][i-1]: 
		ans = findSubsets(subset, goal, arr, i-1)
	if goal-arr[i-1] >= 0 and subset[goal-arr[i-1]][i-1]: 
		moreans = findSubsets(subset, goal-arr[i-1], arr, i-1)
		for a in moreans:
			a.append(i-1)
		ans += moreans
	return ans

def sumById(array,ids):
	s = 0
	for i in ids: s += array[i]
	return s

for t in range(T):
	Gp, Gc, Gf = map(int, raw_input().strip().split())
	N = int(raw_input())
	P = []; C = []; F = []
	for i in range(N):
		p,c,f = map(int, raw_input().strip().split())
		P.append(p); C.append(c); F.append(f)
	subset = [[True for i in range(N+1)]] + [[False for i in range(N+1)] for s in range(Gp)]
	for s in range(1,Gp+1):
		for i,n in enumerate(P):
			if subset[s][i]: 
				subset[s][i+1] = subset[s][i] # sum of 0,..,i-1 is s
			if s >= n and subset[s-n][i]: 
				subset[s][i+1] = subset[s-n][i]		
	if not subset[Gp][N]: 
		print "Case #%d:"%(t+1), "no"
		continue
	possible = findSubsets(subset, Gp, P, N)
	#print possible
	found = False
	for ans in possible:
		if sumById(C,ans) == Gc and sumById(F,ans) == Gf:
			print "Case #%d:"%(t+1), "yes"
			found = True
			break
	if not found: print "Case #%d:"%(t+1), "no"	

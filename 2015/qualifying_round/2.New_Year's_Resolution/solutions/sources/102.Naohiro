using System;
using System.Collections.Generic;
using System.Linq;

class Myon
{
    public Myon() { }
    public static void Main()
    {
        new Myon().run2();
    }

    Scanner cin;
    public void run2()
    {
        cin = new Scanner();
        int T = cin.nextInt();
        for (int i = 0; i < T; i++)
        {
            Console.Write("Case #{0}: ", i + 1);

            run();
        }
    }

    void run()
    {
        int gp = cin.nextInt();
        int gc = cin.nextInt();
        int gf = cin.nextInt();
        int N = cin.nextInt();
        int[] p = new int[N];
        int[] c = new int[N];
        int[] f = new int[N];
        for (int i = 0; i < N; i++)
        {
            p[i] = cin.nextInt();
            c[i] = cin.nextInt();
            f[i] = cin.nextInt();
        }

        for (int i = 0; i < (1<<N); i++)
        {
            int np = 0;
            int nc = 0;
            int nf = 0;
            for (int j = 0; j < N; j++)
            {
                if ((i >> j) % 2 == 0) continue;
                np += p[j];
                nc += c[j];
                nf += f[j];
            }
            if (gp == np && gc == nc && gf == nf)
            {
                Console.WriteLine("yes");
                return;
            }
        }

        Console.WriteLine("no");
    }

    //swap
    void swap<T>(ref T a, ref T b)
    {
        T c = a;
        a = b;
        b = c;
    } 










}

class Scanner
{
    string[] s;
    int i;

    char[] cs = new char[] { ' ' };

    public Scanner()
    {
        s = new string[0];
        i = 0;
    }

    public string next()
    {
        if (i < s.Length) return s[i++];
        string st = Console.ReadLine();
        while (st == "") st = Console.ReadLine();
        s = st.Split(cs, StringSplitOptions.RemoveEmptyEntries);
        i = 0;
        return s[i++];
    }

    public int nextInt()
    {
        return int.Parse(next());
    }

    public long nextLong()
    {
        return long.Parse(next());
    }

    public double nextDouble()
    {
        return double.Parse(next());
    }

}

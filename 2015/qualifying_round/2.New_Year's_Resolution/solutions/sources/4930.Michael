def doit(k, p, c, f, a):
  if k == len(a):
    if p == 0 and c == 0 and f == 0:
      return 1
    return 0
  return doit(k + 1, p, c, f, a) + doit(k + 1, p - a[k][0], c - a[k][1], f - a[k][2], a)

def solve():
  br = open('b.txt')
  f = lambda: br.readline().strip()
  t = int(f())

  for i in range(t):
    a = []
    gp, gc, gf = map(int, f().split())
    n = int(f().strip())

    for j in range(n):
      a.append(map(int, f().split()))
    print 'Case #%d: %s' % (i + 1, ['no', 'yes'][doit(0, gp, gc, gf, a)])

solve()

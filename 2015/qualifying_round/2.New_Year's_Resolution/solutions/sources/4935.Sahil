#include<iostream>
#include<algorithm>
using namespace std;

/*
bool isSubsetSum(int set[], int n, int sum)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    bool subset[sum+1][n+1];
 
    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
      subset[0][i] = true;
 
    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
      subset[i][0] = false;
 
     // Fill the subset table in botton up manner
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
     }
     
     return subset[sum][n];
}
*/
bool isSubsetSum(int set1[],int set2[],int set3[], int n, int sum1,int sum2,int sum3)
{
   // Base Cases
   if (sum1 == 0&&sum2==0&&sum3==0)
     return true;
   if (n == 0 && (sum1 != 0||sum2!=0||sum3!=0))
     return false;
 
   // If last element is greater than sum, then ignore it
   if (set1[n-1] > sum1||set2[n-1] > sum2||set3[n-1] > sum3)
     return isSubsetSum(set1,set2,set3, n-1, sum1,sum2,sum3);
 
   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
   return isSubsetSum(set1,set2,set3, n-1, sum1,sum2,sum3) || isSubsetSum(set1,set2,set3, n-1, sum1-set1[n-1],sum2-set2[n-1],sum3-set3[n-1]);
}


int main()
{
	freopen("new_years_resolution.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int t;
	cin>>t;
	int l=t;
	while(t--)
	{
		int gp,gc,gf;
		cin>>gp>>gc>>gf;
		
		int n;
		cin>>n;
		
		int pro[n],carbo[n],fat[n];
		
		
		for(int i=0;i<n;i++)
		{
			cin>>pro[i]>>carbo[i]>>fat[i];
//			cin>>carbo[i];
//			cin>>fat[i];
		}
		n=sizeof(pro)/sizeof(pro[0]);
		
		if(isSubsetSum(pro,carbo,fat,n,gp,gc,gf))
		{
			cout<<"Case #"<<l-t<<": yes"<<endl;	
		}
		else
		{
			cout<<"Case #"<<l-t<<": no"<<endl;	
		}
	}
}

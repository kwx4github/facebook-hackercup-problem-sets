import Control.Applicative ((<$>))
import Control.Monad (replicateM)
import Data.List (transpose, foldl1', intersect)
import Text.Printf (printf)

main :: IO ()
main = do
  t <- read <$> getLine
  ys <- replicateM t $ do
    g <- map read . words <$> getLine
    n' <- read <$> getLine
    xs <- replicateM n' $ map read . words <$> getLine
    return $ solve $ zipWith f g $ map (zip [1 ..]) $ transpose xs

  mapM_ putStrLn $ zipWith p [1..] ys

p :: Int -> Bool -> String
p n True = printf "Case #%d: yes" n
p n _    = printf "Case #%d: no" n

f :: Int -> [(Int,Int)] -> [[Int]]
f i l = f' l [] 0
  where
    f' :: [(Int,Int)] -> [Int] -> Int -> [[Int]]
    f' [] c sm | sm == i = [c]
               | otherwise = []
    f' (x:xs) c sm
      | sm > i = []
      | sm == i = [c]
      | otherwise = f' xs (fst x:c) (snd x+sm) ++
                    f' xs c sm

solve :: [[[Int]]] -> Bool
solve xs | null $ foldl1' intersect xs = False
         | otherwise = True

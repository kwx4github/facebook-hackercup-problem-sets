#lang racket

(struct tuple (a b c) #:transparent)

(define (tuple-minus t1 t2)
  (tuple (- (tuple-a t1) (tuple-a t2))
         (- (tuple-b t1) (tuple-b t2))
         (- (tuple-c t1) (tuple-c t2))))

(define (solve final-sum choices)
  (cond
    [(empty? choices) (equal? final-sum (tuple 0 0 0))]
    [(cons? choices)
     (or (solve (tuple-minus final-sum (first choices)) (rest choices))
         (solve final-sum (rest choices)))]))

(define (main)
  (for ([i (in-range (read))])
    (define final-sum (tuple (read) (read) (read)))
    (define choices (for/list ([j (in-range (read))])
                      (tuple (read) (read) (read))))
    (display "Case #")
    (display (+ 1 i))
    (display ": ")
    (display (if (solve final-sum choices) "yes" "no"))
    (newline)))

(main)
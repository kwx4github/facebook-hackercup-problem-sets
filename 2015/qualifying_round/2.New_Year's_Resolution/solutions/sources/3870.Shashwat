import numpy as np
import math
import sys
from itertools import chain, combinations
import time
time_now = time.time()

def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

T = int(raw_input())
for t in xrange(1,T+1):
    ans = "no"
    #sys.stderr.write(str(t)+",")

    tl = raw_input()
    while len(tl.strip()) == 0:
        tl = raw_input()
    GP,GC,GF = [int(k) for k in tl.strip().split()]
    N = int(raw_input())
    
    vals = []
    for _ in range(N):
        vals.append([int(k) for k in raw_input().strip().split()])
    
    for ss in powerset(vals):
        if [GP,GC,GF] == reduce(lambda x,y: [x[0]+y[0], x[1]+y[1], x[2]+y[2]], ss,[0,0,0]):
            ans = "yes"
            break
    #sys.stderr.write(str(ans)+"\n")
    
    print "Case #{}: {}".format(t,ans)

time_end = time.time()
sys.stderr.write("Time Elapsed: "+str(time_end - time_now)+"\n")
#include <fstream>
#include <string>
#include <vector>
using namespace std;

int gp, gc, gf, food_qty;
vector<int> p, c, f, s;

bool possible(int);

int main() {
	ifstream ifile("input.txt");
	ofstream ofile("output.txt");

	int T; ifile >> T;
	for (int tc = 1; tc <= T; tc++)
	{
		ifile >> gp;
		ifile >> gc;
		ifile >> gf;
		ifile >> food_qty;
		p.clear();
		c.clear();
		f.clear();
		for (int i = 0; i < food_qty; i++) {
			int n;
			ifile >> n; p.push_back(n);
			ifile >> n; c.push_back(n);
			ifile >> n; f.push_back(n);
		}
		s.clear();

		bool result = false;
		for (int i = 0; i < food_qty; i++) {
			result = possible(i);
			if (result) break;
		}

		ofile << "Case #" << tc << ": ";
		if (result) ofile << "yes";
		else ofile << "no";
		ofile << endl;
	}
}

int get_count() {
	int c = 0;
	for (int i = 0; i < s.size(); i++)
		c += p[s[i]];
	return c;
}

bool verify_cf(int n) {
	s.push_back(n);
	int c_count = 0;
	int f_count = 0;
	for (int i = 0; i < s.size(); i++) {
		c_count += c[s[i]];
		f_count += f[s[i]];
	}
	s.pop_back();
	if (c_count == gc && f_count == gf) return true;
	return false;
}

bool possible(int n) {
	int current_count = get_count();
	int new_count = current_count + p[n];
	if (new_count > gp) return false;
	if (new_count == gp) return verify_cf(n);
	
	s.push_back(n);
	for (int i = n + 1; i < food_qty; i++)
		if (possible(i))
			return true;
	s.pop_back();
	return false;
}
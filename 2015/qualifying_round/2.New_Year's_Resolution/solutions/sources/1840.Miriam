#include <list>              // [PRIMES]                           1777 ~2^10.80
#include <map>               //                                   10333 ~2^13.33
#include <set>               // seq 1 128 | factor               100333 ~2^16.61
#include <stack>             //   | grep -v ' .* '              1300111 ~2^20.31
#include <queue>             //                                10300777 ~2^23.30
#include <algorithm>         //  2 3 5 7 11 13 17 19 23       100400999 ~2^26.58
#include <sstream>           // 29 31 37 41 43 47 53 59      1300400999 ~2^30.28
#include <iostream>          // 61 67 71 73 79 83 89 97     10200500333 ~2^33.25
#include <cstdio>            // 101 103 107 109 113 127    100200400777 ~2^36.54
#include <cmath>             //                           1200300700111 ~2^40.13
#include <cstdlib>           //                          10200300500777 ~2^43.21
#include <cstring>           //                         100200300400777 ~2^46.51
#include <climits>           //                        1200300400600999 ~2^50.09
#include <cfloat>            //                       10200300400600111 ~2^53.18
#include <numeric>           //                      100200300400600333 ~2^56.48
#include <iomanip>           //                     1200300400500800999 ~2^60.06
#include <cassert>
#include <unordered_set> // C++11
#include <unordered_map> // C++11
#include <tuple>         // C++11
#include <bitset>

using namespace std;
 
typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;
 
const int oo = 0x3f3f3f3f;
const double eps = 1e-9;
 
#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for(__typeof__((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define mp make_pair
#define pb push_back
#define mt make_tuple
#define has(c,i) ((c).find(i) != (c).end())
#define DBG(...) { if(1) fprintf(stderr, __VA_ARGS__); }
#define DBGDO(X) { if(1) cerr << "DBGDO: " << (#X) << " = " << (X) << endl; }
 
 
tuple<int, int, int> operator-(const tuple<int, int, int> &t1, const tuple<int, int, int> &t2){
  return mt(get<0>(t1)-get<0>(t2), get<1>(t1)-get<1>(t2), get<2>(t1)-get<2>(t2));
}

bool poss(tuple<int, int, int> state, vector<tuple<int, int, int>> &s, int idx){
  if(idx == s.size())
    return false;
  bool p = poss(state, s, idx+1);
  tuple<int, int, int> nstate = state - s[idx];
  if(get<0>(nstate) < 0 || get<1>(nstate) < 0 || get<2>(nstate) <0)
    return p;
  else if(get<0>(nstate) == 0 && get<1>(nstate) == 0 && get<2>(nstate) == 0)
    return true;
  return p || poss(nstate, s, idx+1);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int TC;
  cin >> TC;
  FOR(tc, 0, TC){
    int P, C, F;
    cin >> P >> C >> F;
    int N;
    cin >> N;
    vector<tuple<int, int, int>> s(N);
    FOR(i,0,N){
      int p, c, f;
      cin >> p >> c >> f;
      s[i] = make_tuple(p, c, f);
    }
    if(poss(mt(P,C,F),s,0)){
      cout << "Case #" << tc+1<< ": yes" << endl;
    }
    else
      cout << "Case #" << tc+1<< ": no" << endl;
  }
}

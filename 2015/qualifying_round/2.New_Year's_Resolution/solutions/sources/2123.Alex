import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class QualB implements Runnable {
    public void run() {
        int test = nextInt();
        for (int testCase = 1; testCase <= test; ++testCase) {
            int gp = nextInt();
            int gc = nextInt();
            int gf = nextInt();
            int n = nextInt();
            int[] pp = new int[n];
            int[] cc = new int[n];
            int[] ff = new int[n];

            for (int i = 0; i < n; ++i) {
                pp[i] = nextInt();
                cc[i] = nextInt();
                ff[i] = nextInt();
            }

            boolean ans = false;

            for (int i = 1; i < (1 << n); ++i) {
                int p = 0;
                int c = 0;
                int f = 0;
                for (int j = 0; j < n; ++j) {
                    if ((i & (1<<j)) != 0) {
                        p += pp[j]; c += cc[j]; f += ff[j];
                    }
                }
                if (p == gp && c == gc && f == gf) {
                    ans = true;
                    break;
                }

            }
            out.println("Case #"+testCase+": " + (ans ? "yes" : "no"));
        }
        out.flush();
    }

    private static BufferedReader br;
    private static StringTokenizer stk;
    private static PrintWriter out;
    public static void main(String[] args) throws FileNotFoundException {
        out = new PrintWriter("Bout.txt");
        br = new BufferedReader(new InputStreamReader(new FileInputStream("B.txt")));
        (new QualB()).run();
    }

    public void loadLine() {
        try {
            stk = new StringTokenizer(br.readLine());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String nextLine() {
        try {
            return br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public int nextInt() {
        while (stk == null || !stk.hasMoreElements()) loadLine();
        return Integer.parseInt(stk.nextToken());
    }
    public long nextLong() {
        while (stk == null || !stk.hasMoreElements()) loadLine();
        return Long.parseLong(stk.nextToken());
    }


}

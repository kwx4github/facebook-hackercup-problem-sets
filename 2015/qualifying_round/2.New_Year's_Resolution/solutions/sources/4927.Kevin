#include<iostream>
#include<string>
#include<stdio.h>
#include<vector>

int testCount;
int testsTotal;
int gp,gc,gf;
bool isAchievable=false;

class Meal{
public:
	Meal(int,int,int);
	int p,c,f;
};

std::vector<Meal> combination;

Meal::Meal(int pIn, int cIn, int fIn){
	p=pIn;
	c=cIn;
	f=fIn;
}

void checkCombinations(std::vector<Meal> vec){
	int totalX=0;
	int totalY=0;
	int totalZ=0;
	for (int i = 0; i < vec.size(); ++i) { 
		totalX+=vec[i].p;
		totalY+=vec[i].c; 
		totalZ+=vec[i].f; 
	}
	if(totalX==gp&&totalY==gc&&totalZ==gf) isAchievable=true;
}

void checkVector(int offset,int n, std::vector<Meal> vec){
  if (n == 0) {
    checkCombinations(combination);
    return;
  }
  for (int i = offset; i <= vec.size() - n; ++i) {
    combination.push_back(vec[i]);
    checkVector(i+1, n-1,vec);
    combination.pop_back();
  }
}

int main(){
	int p,c,f;
	int n;
	std::vector<Meal> mealVector;
	std::cin>>testCount;
	testsTotal=testCount;
	while(testCount--){
		std::cin>>gp;
		std::cin>>gc;
		std::cin>>gf;
		std::cin>>n;
		for (int i = 0; i < n; ++i)
		{
			std::cin>>p;
			std::cin>>c;
			std::cin>>f;
			Meal newMeal = Meal(p,c,f);
			mealVector.push_back(newMeal);
		}
		for (int i = 1; i <= n; ++i)
		{
			checkVector(0,i,mealVector);
		}
		std::cout<<"Case #"<<testsTotal-testCount<<": ";
		if(isAchievable) std::cout<<"yes"<<std::endl;
		else std::cout<<"no"<<std::endl;
		mealVector.clear();
		isAchievable=false;
	}
}
#include <iostream>
#include <list>
#include <vector>
#include <algorithm>
#include <numeric>
#include <map>
#include <set>
#include <stack>
#include <cmath>
#include <queue>
#include <deque>
#include <string>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <climits>

#define gc getchar_unlocked
#define pc(x) putchar_unlocked(x)
#define Si(x) scanf("%d",&x)
#define Sii(x,y) scanf("%d %d",&x,&y)
#define Pi(x) printf("%d\n",x)
#define sz(a) int((a).size()) 
#define all(c) (c).begin(),(c).end() 
#define revall(c) (c).rbegin(),(c).rend()
#define tr(c,it) for(typeof((c).begin()) it = (c).begin() ; (it)!=(c).end() ; ++(it))
#define newread freopen("newin","r",stdin)
#define newwrite freopen("newout","w",stdout)

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vpii;
typedef vector<ll> vll;
typedef vector<ull> vull;

inline int readInt(){
	
	char c;
	int ans=0;
	do{
		c=gc();
	}while(c<'0' || c>'9');
	do{
		ans = (ans<<3) + (ans<<1) + (c-48);
		c=gc();
	}while(c>='0' && c<='9');
	return ans;
	
}
int cnt;

struct food{
	int p,c,f;
};

typedef struct food nut;

typedef vector<nut> vnut;

bool solve(vnut &a , nut &soFar , int i)
{
	
	cnt++;
	//printf("Current Config : %d %d %d , index = %d \n",soFar.p,soFar.c,soFar.f,i);
	
	if(soFar.p == 0 && soFar.f ==0 && soFar.c == 0)
		return true;
	if(i==sz(a) || soFar.p < 0 || soFar.f < 0 || soFar.c < 0)
		return false;
	
	nut newSoFar=soFar;
	newSoFar.p -= a[i].p;
	newSoFar.c -= a[i].c;
	newSoFar.f -= a[i].f;
	
	return (solve(a,newSoFar,i+1) || solve(a,soFar,i+1));
	
}


int main(int argc, char **argv)
{
	int t;
	newread;
	newwrite;
	t=readInt();
	for (int i = 0; i < t; i++)
	{
		cnt = 0;
		nut target;
		target.p=readInt();
		target.c=readInt();
		target.f=readInt();
		int n=readInt();
		vnut a(n);
		while(n--)
		{
			nut temp;
			temp.p=readInt();
			temp.c=readInt();
			temp.f=readInt();
			a.push_back(temp);
		}
		
	if(solve(a,target,0))
		printf("Case #%d: yes\n",i+1);
	else
		printf("Case #%d: no\n",i+1);
		
	//printf("Total steps = %d",cnt);
	}
	
	return 0;
}

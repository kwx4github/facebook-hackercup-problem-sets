package main;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Knapsack {

    public static void main(String[] args) {
        
        int count = 2, foods = 0, step = 0;
        
        List<Integer> goal1 = new ArrayList<Integer>();
        List<Integer> goal2 = new ArrayList<Integer>();
        List<Integer> goal3 = new ArrayList<Integer>();
        
        List<int[]> food1 = new ArrayList<int[]>();
        List<int[]> food2 = new ArrayList<int[]>();
        List<int[]> food3 = new ArrayList<int[]>();
        
    	//reading file line by line in Java using BufferedReader       
        FileInputStream fis = null;
        BufferedReader reader = null;
      
        try {
            fis = new FileInputStream("input.txt");
            reader = new BufferedReader(new InputStreamReader(fis));
          
            step = Integer.parseInt( reader.readLine() ); // first line
            String line = reader.readLine(); // second line
            while(line != null){
            	
            	if (count == 2)
            	{
            		String[] goal = line.split(" ");
                	
                	goal1.add(Integer.parseInt(goal[0]));
                	goal2.add(Integer.parseInt(goal[1]));
                	goal3.add(Integer.parseInt(goal[2]));
            	} else if (count == 3)
            	{
            		foods = Integer.parseInt(line);
            		
            		food1.add(new int[foods]);
            		food2.add(new int[foods]);
            		food3.add(new int[foods]);
            	} else if (count >= 4)
            	{	
            		String[] food = line.split(" ");
                	
            		food1.get(food1.size()-1)[count - 4] = Integer.parseInt(food[0]);
            		food2.get(food2.size()-1)[count - 4] = Integer.parseInt(food[1]);
            		food3.get(food3.size()-1)[count - 4] = Integer.parseInt(food[2]);
            		
            		if (count - 3 == foods)
            			count = 1;
            	}
            	
            	line = reader.readLine();
            	count++;
            }           
          
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {          
        } finally {
            try {
                reader.close();
                fis.close();
            } catch (IOException ex) {
            }
        }
        
        boolean take1[];
        boolean take2[];
        boolean take3[];
        
        boolean first, second, third;
        
        for (int i = 0; i < step; i++) {
        	
        	boolean temp[] = new boolean[food1.get(i).length+1];       	
        	for (int j = 0; j < food1.get(i).length+1; j++)
				temp[j] = true;
        	
			take1 = CalcKnapsack(food1.get(i).length, goal1.get(i), food1.get(i), temp);
			
			int total1 = 0, total2 = 0, total3 = 0;
			
			for (int j = 1; j < take1.length; j++) {
				if (take1[j])
					total1 += food1.get(i)[j-1];
			}
        	
        	if (total1 == goal1.get(i))
        	{
        		if(Check(take1,food2.get(i).length, goal2.get(i), food2.get(i), food3.get(i).length, goal3.get(i), food3.get(i)))
        		{
        			System.out.println("Case #"+ (i + 1) +": true");
        			continue;
        		} else if (Check(take1,food3.get(i).length, goal3.get(i), food3.get(i), food2.get(i).length, goal2.get(i), food2.get(i)))
            	{
        			System.out.println("Case #"+ (i + 1) +": true");
        			continue;
            	} else {
            		first = true;
            	}
        	} else {
        		
        		System.out.println("Case #"+ (i + 1) +": false");
        		continue;
        	}
        		
        	take2 = CalcKnapsack(food2.get(i).length, goal2.get(i), food2.get(i), temp);
			
			total1 = total2 = total3 = 0;
			
			for (int j = 1; j < take2.length; j++) {
				if (take2[j])
					total2 += food2.get(i)[j-1];
			}
        	
        	if (total2 == goal2.get(i))
        	{
        		if(Check(take2,food1.get(i).length, goal1.get(i), food1.get(i), food3.get(i).length, goal3.get(i), food3.get(i)))
        		{
        			System.out.println("Case #"+ (i + 1) +": true");
        			continue;
        		} else if (Check(take2,food3.get(i).length, goal3.get(i), food3.get(i), food1.get(i).length, goal1.get(i), food1.get(i)))
            	{
        			System.out.println("Case #"+ (i + 1) +": true");
        			continue;
            	} else {
            		second = true;
            	}
        	} else {
        		
        		System.out.println("Case #"+ (i + 1) +": false");
        		continue;
        	}
        	
    		take3 = CalcKnapsack(food3.get(i).length, goal3.get(i), food3.get(i), temp);
			
			total1 = total2 = total3 = 0;
			
			for (int j = 1; j < take3.length; j++) {
				if (take3[j])
				{
					//System.out.println(total3 + " " + food3.get(i)[j-1]);
					total3 += food3.get(i)[j-1];
				}
			}

			if (total3 == goal3.get(i))
        	{
				if(Check(take3,food1.get(i).length, goal1.get(i), food1.get(i), food2.get(i).length, goal2.get(i), food2.get(i)))
        		{
					System.out.println("Case #"+ (i + 1) +": true");
					continue;
        		} else if (Check(take3,food2.get(i).length, goal2.get(i), food2.get(i), food1.get(i).length, goal1.get(i), food1.get(i)))
            	{
        			System.out.println("Case #"+ (i + 1) +": true");
        			continue;
            	} else {
            		third = true;
            	}
        	} else {
        		
        		System.out.println("Case #"+ (i + 1) +": false");
        		continue;
        	}	
			
			if (first && second && third)
			{
				System.out.println("Case #"+ (i + 1) +": false");
			}
		}
    }
    
    public static boolean Check(boolean[] check, int N1, int W1, int[] weights1, int N2, int W2, int[] weights2)
    {
    	boolean take1[];
        boolean take2[];
        
    	take1 = CalcKnapsack(N1, W1, weights1, check);
		
		int total1 = 0, total2 = 0;
		
		for (int j = 1; j < take1.length; j++) {
			if (take1[j])
				total1 += weights1[j-1];
		}
    	
    	if (total1 == W1)
    	{
    		take2 = CalcKnapsack(N2, W2, weights2, take1);
    		
    		for (int j = 1; j < take2.length; j++) {
    			if (take2[j])
    				total2 += weights2[j-1];
    		}
        	
        	if (total2 == W2)
        	{
        		return true;
        	}
        	else
        		return false;
    	}
    	else
    		return false;
    }
    
    public static boolean[] CalcKnapsack(int N, int W, int[] weights, boolean[] check)
    {
        int[] profit = new int[N+1];
        int[] weight = new int[N+1];

        // generate random instance, items 1..N
        for (int n = 1; n <= N; n++) {
        	if (check[n]){
        		weight[n] = weights[n-1];
                profit[n] = weights[n-1];
        	}
        }

        // opt[n][w] = max profit of packing items 1..n with weight limit w
        // sol[n][w] = does opt solution to pack items 1..n with weight limit w include item n?
        int[][] opt = new int[N+1][W+1];
        boolean[][] sol = new boolean[N+1][W+1];

        for (int n = 1; n <= N; n++) {
            for (int w = 1; w <= W; w++) {

                // don't take item n
                int option1 = opt[n-1][w];

                // take item n
                int option2 = Integer.MIN_VALUE;
                if (weight[n] <= w) option2 = profit[n] + opt[n-1][w-weight[n]];

                // select better of two options
                opt[n][w] = Math.max(option1, option2);
                sol[n][w] = (option2 > option1);
            }
        }

        // determine which items to take
        boolean[] take = new boolean[N+1];
        for (int n = N, w = W; n > 0; n--) {
            if (sol[n][w]) { take[n] = true;  w = w - weight[n]; }
            else           { take[n] = false;                    }
        }

        // print results
        /*System.out.println("item" + "\t" + "profit" + "\t" + "weight" + "\t" + "take");
        for (int n = 1; n <= N; n++) {
            System.out.println(n + "\t" + profit[n] + "\t" + weight[n] + "\t" + take[n]);
        }*/
        
        return take;
    }
}
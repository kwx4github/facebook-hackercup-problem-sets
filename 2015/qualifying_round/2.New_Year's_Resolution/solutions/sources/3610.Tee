def backtracking(partialSolution,possibleSolution,P,C,F):
    if partialSolution[0]==P and partialSolution[1]==C and partialSolution[2]==F:
        return 'yes'
    elif len(possibleSolution)==0:
        return 'no'
    elif partialSolution[0]<P:
        for i in range(len(possibleSolution)):
            partialSolution[0]+=int(possibleSolution[i][0])
            partialSolution[1]+=int(possibleSolution[i][1])
            partialSolution[2]+=int(possibleSolution[i][2])
            if backtracking(partialSolution,possibleSolution[i+1:],P,C,F)=='yes':
                return 'yes'
            partialSolution[0]-=int(possibleSolution[i][0])
            partialSolution[1]-=int(possibleSolution[i][1])
            partialSolution[2]-=int(possibleSolution[i][2])
        return 'no'
    else:
        return 'no'


file=open('input.txt','r')
result=''
amount=int(file.readline())
for i in range(amount):
    need=(file.readline().split())
    P=int(need[0])
    C=int(need[1])
    F=int(need[2])
    MacList=[]
    food=int(file.readline().replace('\n',''))
    for k in range(food):
        MacList.append(file.readline().split())
    result+='Case #'+str(i+1)+': '
    result+=str(backtracking([0,0,0],MacList,P,C,F).replace("\n",'')+'\n')
file.close()
file=open('output','w',encoding='utf-8')
file.write(result)
file.close()
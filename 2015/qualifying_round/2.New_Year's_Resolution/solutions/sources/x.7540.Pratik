#include <cstdio> 
#include <algorithm> 
#include <utility> 
#include <vector> 
#include <cstring> 
#include <string> 
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
#define INF                         (int)1e9
#define EPS                         1e-9
#define bitcount                    __builtin_popcount
#define gcd                         __gcd
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((int)(a.size()))
#define mp                          make_pair
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)                ( (n >> b) & 1)
using namespace std ; 

class tup
{
	public:
		int p,c,f ; 
		void reset()
		{
			p = 0 ; c = 0 ; f = 0 ; 
		}
		tup()
		{
			p = 0 ; c = 0 ; f = 0 ;
		}
		bool operator < (tup t2)
		{
			if(p < t2.p)
				return true ; 
			else if(c < t2.c)
				return true ; 
			else if(f < t2.f)
				return true ; 
			return false ; 
		}
		bool operator  == (tup t2)
		{
			if(p != t2.p) return false ; 
			else if(c != t2.c) return false ; 
			else if(f != t2.f) return false ; 
			return true ; 
		}
} ;
vector<tup> food ; 
vector<bool> val ; 
inline void toggle(int n, int r)
{
	for(int i=0; i<n-r; i++)
		val[i] = false ; 
	for(int i=n-r; i<n;i++)
		val[i] = true ; 
}
int main()
{
	int tc,n ,maxi; 
	s(tc) ; 
	maxi = tc ; 
	tup target ; 
	tup temp ; 
	for(int i=0; i<20; i++)
		val.pb(false) ; 
	while(tc--)
	{
		food.clear() ; 
		s(target.p) ; s(target.c) ; s(target.f) ; 
		s(n) ; 
		forall(i,0,n)
		{
			s(temp.p) ; s(temp.c) ; s(temp.f) ; 
			food.pb(temp) ; 
		}
		bool flag = false ; 
		for(int r = 1; r <=n; r++)
		{
			flag = false ; 
			vector<bool>::iterator it = val.begin() ; 
			advance(it, n-1); 
			toggle(n,r) ; 
			do
			{
				temp.reset() ; 
				//forall(i,0,n)	printf( val[i] ? "1" : "0") ;
				//printf("\n") ; 
				forall(i,0,n)
				{
					if(val[i] == true)
					{
						temp.p += food[i].p ;
						temp.c += food[i].c ; 
						temp.f += food[i].f ; 
					}
				}
				if(temp == target)
				{
					flag =  true ; 
					break ; 
				}
			}
			while(next_permutation(val.begin(), it)) ; 
			if(flag == true)
				break ; 
		}
		if(flag == true)
			printf("Case #%d: yes\n", maxi -tc) ; 
		else
			printf("Case #%d: no\n", maxi - tc) ; 
	}
}

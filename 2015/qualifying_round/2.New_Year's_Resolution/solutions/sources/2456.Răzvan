#include <cstdio>

int t, gp, gc, gf, n;
bool solutionFound;

struct recipe{
    int p = 0, c = 0, f = 0;

    recipe operator+(recipe a) {
        recipe r;
        r.p = this -> p + a.p;
        r.c = this -> c + a.c;
        r.f = this -> f + a.f;
        return r;
    }

    recipe operator-(recipe a) {
        recipe r;
        r.p = this -> p - a.p;
        r.c = this -> c - a.c;
        r.f = this -> f - a.f;
        return r;
    }
    bool operator<=(recipe a) {
        return this -> p <= a.p && this -> c <= a.c && this -> f <= a.f;
    }
    bool operator==(recipe a) {
        return this -> p == a.p && this -> c == a.c && this -> f == a.f;
    }
}food[20], sum, x;

void backtracking(int i)
{
    if (solutionFound)
        return;
    if (sum == x)
    {
        solutionFound = true;
        return;
    }
    for (; i < n; i ++)
        if (sum + food[i] <= x)
        {
            sum = sum + food[i];
            backtracking(i+1);
            sum = sum - food[i];
        }
}

void print(int i)
{
    printf("Case #%d: ", i);
    backtracking(0);
    if(solutionFound)
        printf("yes\n");
    else
        printf("no\n");
}

void read()
{
    scanf("%d", &t);
    for(int k = 1; k <= t; k++)
    {
        solutionFound = false;
        sum = recipe();
        scanf("%d %d %d %d", &gp, &gc, &gf, &n);
        x.p = gp;
        x.c = gc;
        x.f = gf;
        for(int i = 0; i < n; i++)
            scanf("%d %d %d", &food[i].p, &food[i].c, &food[i].f);
        print(k);
    }
}

int main()
{
    freopen("data.in", "r", stdin);
    freopen("data.out", "w", stdout);
    read();
    return 0;
}

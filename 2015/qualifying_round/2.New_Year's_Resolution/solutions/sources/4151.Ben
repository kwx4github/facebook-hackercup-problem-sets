
cases = dict()

def createcombination(tp,tc,tf,cp,cc,cf,e,rangemax):
	if tp == cp and tc == cc and tf == cf:
		return True
	elif (tp < cp and tc < cc and tf < cf) or e > rangemax:
		return False
	elif tp > cp and tc > cc and tf > cf :
		currp = int(cases[i][e]["p"])
		currc = int(cases[i][e]["c"])
		currf = int(cases[i][e]["f"])
		return createcombination(tp,tc,tf,cp+currp,cc+currc,cf+currf,e+1,rangemax) or createcombination(tp,tc,tf,cp,cc,cf,e+1,rangemax) 



if __name__ == '__main__':
	fname = "new_years_resolution.txt"
	ofile = "results2.txt"
	outfile = open(ofile,'w')
	infile = open(fname,'r')
	totalcases = infile.readline()
	totalcases = totalcases.strip('n')
	for i in range(1,int(totalcases)+1):
		cases[i] = dict()
	casecount = 1
	while True:
		line  = infile.readline()
		if len(line) < 1:
			break
		line = line.strip('\n')
		tg = dict()
		goals  = line.split(" ")
		tg["p"] = goals[0]
		tg["c"] = goals[1]
		tg["f"] = goals[2]
		cases[casecount]["target"] = tg
		caselines = infile.readline()
		caselines = caselines.strip('\n')
		for i in range(1,int(caselines)+1):
			fnut = dict()
			food  = infile.readline()
			food = food.strip('\n')
			foodv = food.split(" ")
			fnut["p"] = foodv[0]
			fnut["c"] = foodv[1]
			fnut["f"] = foodv[2]
			cases[casecount][i] = fnut
		casecount += 1
	for i in range(1,int(totalcases)+1):
		tp = int(cases[i]["target"]["p"])
		tc = int(cases[i]["target"]["c"])
		tf = int(cases[i]["target"]["f"])
		totfood = len(cases[i]) - 1
		combofound = False
		for e in range(1,totfood+1):
			eatp = int(cases[i][e]["p"])
			eatc = int(cases[i][e]["c"])
			eatf = int(cases[i][e]["f"])
			if createcombination(tp,tc,tf,eatp,eatc,eatf,e+1,totfood) :
				combofound = True
				break
		if combofound:
			ans = "Case #%d: yes\n" % i
			outfile.write(ans)
		else:
			ans = "Case #%d: no\n" % i
			outfile.write(ans)



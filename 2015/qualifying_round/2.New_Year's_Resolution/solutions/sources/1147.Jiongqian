package NewYearResolution;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashSet;

public class NewYearResolution {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		File outFile = new File("./newyearresolution.txt");
		PrintWriter writer = new PrintWriter(outFile);
		int num = Integer.parseInt(reader.readLine());
		for(int i=0; i<num; i++){
			int sum[] = new int[3];
			String strSplit[] = reader.readLine().split(" ");
			for(int j=0; j<3; j++)
				sum[j] = Integer.parseInt(strSplit[j]);
			int len = Integer.parseInt(reader.readLine());
//			System.out.println(len);
			int val[][] = new int[3][len];
			for(int j=0; j<len; j++){
				strSplit = reader.readLine().split(" ");
//				System.out.println(strSplit[0]);
				for(int k=0; k<3; k++)
					val[k][j] = Integer.parseInt(strSplit[k]);
			}
			boolean flag = false;
			ArrayList<HashSet<ArrayList<Integer>>> sets = new ArrayList<HashSet<ArrayList<Integer>>>();
			for(int j=0; j<3; j++){
				boolean dp[][] = getDP(val[j], sum[j]);
				if(dp[sum[j]][len] == false){
					writer.println("Case #" + (i+1) +": no");
					flag = true;
					break;
				}
				ArrayList<ArrayList<Integer>> result = getCombinations(dp, sum[j], len, val[j]);
				sets.add( new HashSet<ArrayList<Integer>>(result) );
			}
			if(flag) continue;
			sets.get(0).retainAll(sets.get(1));
			sets.get(0).retainAll(sets.get(2));
			if(sets.get(0).size()!=0)
				writer.println("Case #" + (i+1) +": yes");
			else writer.println("Case #" + (i+1) +": no");
		}
		writer.flush();
		writer.close();
		reader.close();
		
	}
	public static boolean[][] getDP(int arr[], int sum){
//		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		boolean dp [][] = new boolean[sum+1][arr.length+1];
		for(int i=0; i<arr.length+1; i++)
			dp[0][i] = true;
		for(int s=1; s<sum+1; s++)
			dp[s][0] = false;
		for(int s=1; s<sum+1; s++){
			for(int i=1; i<arr.length+1; i++){
				if(s-arr[i-1]>=0)
					dp[s][i] = dp[s][i-1] || dp[s-arr[i-1]][i-1];
				else dp[s][i] = dp[s][i-1];
			}
		}
		return dp;
	}
	public static ArrayList<ArrayList<Integer>> getCombinations(boolean dp[][], int sum, int len, int arr[]){
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		if(len == 0)
			return result; 
		if(dp[sum][len-1]){
			result.addAll(getCombinations(dp,sum, len-1, arr));
		}
		if(sum-arr[len-1]>=0 && dp[sum-arr[len-1]][len-1]){
			ArrayList<ArrayList<Integer>> tmp = getCombinations(dp, sum-arr[len-1], len-1, arr);
			for(ArrayList<Integer> list: tmp){
				list.add(len-1);
				result.add(list);
			}
			if(tmp.size() == 0){
				ArrayList<Integer> list = new ArrayList<Integer>();
				list.add(len-1);
				result.add(list);
			}
		}
		return result; 
	}
}

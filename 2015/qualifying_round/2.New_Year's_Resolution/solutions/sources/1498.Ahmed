#include<bits/stdc++.h>
using namespace std;
/** Ahmed Atef **/

struct food {
int p, c, f;
};

int main() {
freopen("new_years_resolution.txt", "r", stdin);
freopen("new_years_resolution.txt_output.txt", "w", stdout);

int TC, cases = 1;
cin >> TC;
food req;
vector<food> food_list;
while(TC--) {

    cin >> req.p >> req.c >> req.f;
    int n;
    cin >> n;
    food_list.clear();
    int min_p = 77777, min_c = 77777, min_f = 77777;
    int sum_p = 0, sum_c = 0, sum_f = 0;
    for(int i = 0, p, c, f; i < n; ++i) {
        cin >> p >> c >> f;
        food new_food = {p, c, f};
        food_list.push_back(new_food);
        min_p = min(min_p, food_list[i].p);
        min_c = min(min_c, food_list[i].c);
        min_f = min(min_f, food_list[i].f);

        sum_p += food_list[i].p;
        sum_c += food_list[i].c;
        sum_f += food_list[i].f;
    }

    if (sum_p < req.p || sum_c < req.c || sum_f < req.f ||
        min_p > req.p || min_c >req.c || min_f > req.f) {
        cout << "Case #" << cases++ << " no" << endl;
        continue;
    }
    bool found = false;
    for (int i = 0; i < (1 << n); ++i) {
        food this_food = {};
        for (int k = 0; k < n; ++k) {
            if ((1 << k) & i) {
                this_food.p += food_list[k].p;
                this_food.c += food_list[k].c;
                this_food.f += food_list[k].f;
            }
            if (this_food.p > req.p || this_food.c > req.c || this_food.f > req.f) break;
        }
        if (this_food.p == req.p && this_food.c == req.c && this_food.f == req.f) {
            found = true;
        }
    }
    if(found) cout << "Case #" << cases++ << " yes" << endl;
    else cout << "Case #" << cases++ << " no" << endl;
}

return 0;
}

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import java.util.ArrayList;
import java.util.List;

class Food implements Comparable<Food> {
	int P, C, F;
	
	public Food(int P, int C, int F) {
		this.P = P;
		this.C = C;
		this.F = F;
	}
	
	@Override
    public int hashCode() {
		return P;
    }

	@Override
	public int compareTo(Food o) {
		if (this.P == o.P && this.C == o.C && this.F == o.F) {
			return 0;
		}
		
		if (this.P <= o.P && this.C <= o.C && this.F <= o.F) {
			return -1;
		}
		
		return 1;
	}
	
	public void add(Food o) {
		this.P += o.P;
		this.C += o.C;
		this.F += o.F;
	}

	public void subtract(Food o) {
		this.P -= o.P;
		this.C -= o.C;
		this.F -= o.F;
	}
}

class Solution {
	private Food solution;
	private List<Food> foods;
	private Food food;
	
	private boolean isPossible(int index, int length) {
		if (index >= length) {
			return solution.compareTo(food) == 0;
		}
		
		if (solution.compareTo(food) > 0) {
			return false;
		}
		
		// Do not use the food
		boolean isPossibleWithout = isPossible(index + 1, length);
		
		if (isPossibleWithout) {
			return true;
		}
		
		// Do use the food
		solution.add(foods.get(index));
		boolean isPossibleWith = isPossible(index + 1, length);
		solution.subtract(foods.get(index));
		
		return isPossibleWith;
	}
	
	public boolean isPossible(Food food, List<Food> foods) {
		this.food = food;
		this.foods = foods;
		this.solution = new Food(0, 0, 0);
		
		return isPossible(0, foods.size());
	}
}

public class Main {

	public static void main(String[] args) throws FileNotFoundException {
		Scanner scanner = new Scanner(new File("input.txt"));
		
		int T = scanner.nextInt();
		
		for (int t = 1; t <= T; ++t) {
			Solution solution = new Solution();
			Food food = new Food(scanner.nextInt(), scanner.nextInt(), scanner.nextInt());
			
			List<Food> foods = new ArrayList<Food>();
			for (int N = scanner.nextInt(); N > 0; --N) {
				foods.add(new Food(scanner.nextInt(), scanner.nextInt(), scanner.nextInt()));
			}
			
			boolean result = solution.isPossible(food, foods); 
			
			if (result == false) {
				System.out.println(String.format("Case #%d: no", t));
			} else {
				System.out.println(String.format("Case #%d: yes", t));
			}
		}
		
		scanner.close();
	}
}

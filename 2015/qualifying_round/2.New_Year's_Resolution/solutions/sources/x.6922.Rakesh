#include <iostream>
#include <fstream>


using namespace std;

bool checkReqiureRange( int arr[]){

	for (int i = 0; i < 3; i++)
	{
		if (arr[i] < 10 || arr[i] > 1000)
			return false;
	}
	return true;
}


int main()
{

	ifstream inputFile;
	ofstream outFile;

	int testCases = 0;
	int iaRequireCal[3];
	int iFood = 0;
	int iaFoodCal[20][3];
	int caseId = 0;
	
	inputFile.open("new_years_resolution.txt",ios::in);
	outFile.open("new_years_resolution_out.txt", ios::out);
	
	inputFile >> testCases;
	if (testCases <= 20 && testCases >= 1)
	{
		while (testCases != 0)
		{
			for (int i = 0; i < 3; i++)
			{
				inputFile >> iaRequireCal[i];
			}

			if (checkReqiureRange(iaRequireCal))
			{
				inputFile >> iFood;

				if (iFood <= 20 && iFood >= 1)
				{
					// initialise array with default value 

					for (int k = 0; k < 20; k++)
					{
						for (int x = 0; x < 3; x++)
						{
							iaFoodCal[k][x] = 0;
						}						
					}

					for (int i = 0; i < iFood; ++i)
					{
						for (int j = 0; j < 3; ++j)
						{
							inputFile >> iaFoodCal[i][j];
						}						
					}

					// started the main logic of selection
					int pSum = 0;
					int cSum = 0;
					int fSum = 0;
					int index = 0;
					int resval[] = { 0, 0, 0 };
					for (int i = 0; i < iFood; ++i)
					{	
						index = i;
						for (int j = i; j < iFood; ++j)
						{								   
								if (pSum + iaFoodCal[j][0] <= iaRequireCal[0])
								{
									pSum += iaFoodCal[j][0];		
								}
								if (pSum == iaRequireCal[0])
								{
									resval[0] = 1;
									break;
								}
								if (j == iFood - 1 && index != j)
								{									
									j = index;
									index++;
									pSum = iaFoodCal[i][0];
								}
						}
						index = i;
						for (int j = i; j < iFood; ++j)
						{							
							if (cSum + iaFoodCal[j][1] <= iaRequireCal[1])
							{
								cSum += iaFoodCal[j][1];
							}
							if (cSum == iaRequireCal[1])
							{
								resval[1] = 1;
								break;
							}
							if (j == iFood - 1 && index != j)
							{								
								j = index;
								index++;
								cSum = iaFoodCal[i][0];
							}
						}
						index = i;
						for (int j = i; j < iFood; ++j)
						{
							
							if (fSum + iaFoodCal[j][2] <= iaRequireCal[2])
							{
								fSum += iaFoodCal[j][2];
							}

							if (fSum == iaRequireCal[2])
							{
								resval[2] = 1;
								break;
							}
							if (j == iFood - 1 && index != j)
							{								
								j = index;
								index++;
								fSum =  iaFoodCal[i][0];
							}
						}						
						pSum = cSum = fSum = 0;
					}

					if (resval[0] == 1 && resval[1] == 1 && resval[2] == 1)
					{
						outFile << "Case #" << ++caseId << ": yes" << endl;
					}
					else
					{
						outFile << "Case #" << ++caseId << ": no" << endl;
					}

				}
				else
				{
					outFile << "Food quantity is out of range" << endl;
				}
			}
			else
			{
				outFile << "require calories out of range" << endl;
			}

			testCases--;
		}

	}
	else
	{
		outFile << "test cases are out of range" << endl;
	}
	return 0;
}
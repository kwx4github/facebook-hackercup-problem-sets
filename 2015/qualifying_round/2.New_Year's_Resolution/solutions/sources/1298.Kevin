#include <cstring>
#include <map>
#include <numeric>
#include <sstream>
#include <cmath>
#include <stack>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
#include <set>
#include <queue>
#include <string>
#include <cctype>

using namespace std;

#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb(x) push_back((x))
#define REP(i,x,y) for(int i = x; i < int(y); i++)
#define FOR(it,A) for(typeof (A.begin()) it = A.begin(); it!= A.end(); it++)
#define CUA(x) (x) * (x)
#define mp(x,y) make_pair((x),(y))
#define clr(x, y) memset(x, y, sizeof x)
#define fst first
#define snd second
#define I (1LL << 40)
#define sz size()
#define oo (1<<30)
#define EPS (1e-9)

typedef vector<int> vi;

struct food{
	int p,c,f;
	food(){
		p=c=f=0;
	}
	food(int x,int y,int z){
		p=x;
		c=y;
		f=z;
	}
};

int main(){
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif	
	int TT;
	cin >> TT;
	REP(caso,0,TT){
		int Gp,Gc,Gf;
		cin >> Gp >> Gc >> Gf;
		int N;
		cin >> N;
		vector<food> vf;
		REP(i,0,N){
			int a,b,c;
			cin >> a >> b >> c;
			vf.pb(food(a,b,c));
		}
		int cp,cc,cf;
		bool can = false;

		for(int mask = 1; mask < (1<<N); mask++){
			cp=cc=cf=0;
			REP(i,0,N){
				if ( mask & (1<<i) ){
					cp += vf[i].p;
					cc += vf[i].c;
					cf += vf[i].f;
				}
				if (cp > Gp or cc > Gc or  cf > Gf) break;
			}
			if(cp==Gp and cc==Gc and cf==Gf){
				can=true;
				break;
			}
		}

		if(can) printf("Case #%d: yes\n",caso+1);
		else printf("Case #%d: no\n",caso+1);
	}
	
		
	return 0;
}







// Prob2 project main.go
package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

// readLines reads a whole file into memory
// and returns a slice of its lines.
func readLines(path string) ([]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	return lines, scanner.Err()
}

// writeLines writes the lines to the given file.
func writeLines(lines []string, path string) error {
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	w := bufio.NewWriter(file)
	for _, line := range lines {
		fmt.Fprintln(w, line)
	}
	return w.Flush()
}

func parseAtoi(line string) []int {
	//var input []string
	input := strings.Split(line, " ")

	num := make([]int, len(input))
	for i := 0; i < len(input); i++ {
		n, err := strconv.Atoi(input[i])
		num[i] = n
		if err != nil {
			// Invalid string
			log.Fatalf("Invalid string: %s", err)
		}
	}
	return num
}

//func test(set []int, n int, sum int, target int) bool {
//	if sum == target {
//		return true
//	}

//	if n == 0 && sum != 0 {
//		return false
//	}

//	// If last element is greater than sum, then ignore it
//	if set[n-1] > sum {
//		return test(set, n-1, sum, target)
//	}

//	/* else, check if sum can be obtained by any of the following
//	   (a) including the last element
//	   (b) excluding the last element   */
//	return test(set, n-1, sum, target) || test(set, n-1, sum-set[n-1], target)
//}

//func test(d []int, sum int, st int, target int) bool {

//	isCheck := false

//	if sum == target {
//		isCheck = true
//	}

//	for i := st; i < len(d); i++ {

//		plus := sum + d[i]
//		if plus <= target && test(d, i+1, target, plus) {
//			isCheck = true
//		}
//	}
//	return isCheck
//}

//private static void subset(int sum, int index, String output){
//		if (sum > targetVal)
//			return;

//		if (sum == targetVal){
//			System.out.println(output);
//			return;
//		}
//		for(int i=index;i<input.length;i++)
//			subset(sum+input[i],i+1, output + " " +  input[i] + " ");
//	}

//func test(input []int, sum int, index int, target int) int {

//	if sum > target {
//		return 0
//	}

//	if sum == target {
//		return 1
//	}

//	for i := index; i < len(input); i++ {
//		test(input, sum+input[i], i+1, target)
//	}

//	return 0
//}

//func test(d []int, st int, target int, sum int) bool {

//	if sum == target {
//		return true
//		fmt.Println("Found!")
//	}

//	for i := st; i < len(d); i++ {
//		plus := sum + d[i]

//		if plus <= target {
//			test(d, i+1, target, plus)
//		}

//	}
//	return false
//}

//func check(d []int, st int, target int, sum int) int {

//	if sum == target {
//		return 1
//	}

//	for i := st; i < len(d); i++ {

//		plus := sum + d[i]
//		if plus <= target {
//			check(d, i+1, target, plus)
//		}
//	}
//	return 0
//}

func check(d []int, st int, target int, sum int) bool {

	if sum == target {
		return true
	}

	for i := st; i < len(d); i++ {

		plus := sum + d[i]
		if plus <= target && check(d, i+1, target, plus) {
			return true
		}
	}
	return false
}

func main() {

	// read from input file to string slice
	lines, err := readLines("input.txt")
	if err != nil {
		log.Fatalf("readLines: %s", err)
	}

	// number of  test cases

	test_num, err := strconv.Atoi(lines[0])

	if err != nil {
		log.Fatalf("Invalid number: %s", err)
	}

	fmt.Println(test_num)

	var wr_lines []string
	var index = 1
	var str string

	for i := 0; i < test_num; i++ {

		// for each test case, read the first line to get GP, GC, GF
		fix_num1 := parseAtoi(lines[index])

		GP := fix_num1[0]
		GC := fix_num1[1]
		GF := fix_num1[2]

		fmt.Println(fix_num1)
		fmt.Println(GP, GC, GF)

		index++
		fmt.Println(index)

		// next, read line with number of food
		food_num1 := parseAtoi(lines[index])
		fmt.Println(food_num1)
		index++

		fmt.Println(index)

		// next, read line with amount PCF
		// loop for number of food
		// create 3 slice to store P F C
		P := make([]int, food_num1[0])
		C := make([]int, food_num1[0])
		F := make([]int, food_num1[0])

		for i := 0; i < food_num1[0]; i++ {
			var nu_amount = parseAtoi(lines[i+index])
			fmt.Println(nu_amount)

			P[i] = nu_amount[0]
			C[i] = nu_amount[1]
			F[i] = nu_amount[2]
		}

		// check if it is ok

		// sort
		//fmt.Println(P, C, F)
		//sort.Sort(sort.IntSlice(P))
		//sort.Sort(sort.IntSlice(C))
		//sort.Sort(sort.IntSlice(F))
		//fmt.Println(P, C, F)

		checkP := check(P, 0, GP, 0)
		checkC := check(C, 0, GC, 0)
		checkF := check(F, 0, GF, 0)

		fmt.Println(checkP, checkC, checkF)

		if checkP == true && checkC == true && checkF == true {
			str = "Case #" + strconv.Itoa(i+1) + ":" + " " + "yes"
			wr_lines = append(wr_lines, str)
		} else {
			str = "Case #" + strconv.Itoa(i+1) + ":" + " " + "no"
			wr_lines = append(wr_lines, str)
		}

		fmt.Println(wr_lines)

		index += food_num1[0]
	}

	if err := writeLines(wr_lines, "output.txt"); err != nil {
		log.Fatalf("writeLines: %s", err)
	}
}

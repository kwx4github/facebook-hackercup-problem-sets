#include <stdio.h>
#include <stdlib.h>

int hasExactSameAmount(int gp, int gc, int gf, int n, int *p, int *c, int *f, int *items, int i) {
    if (gp == 0) {
        int j;
        int gcFromItems = 0;
        int gfFromItems = 0;
        
        for (j = 0; j < i; j++) {
            gcFromItems += items[j]*c[j];
            gfFromItems += items[j]*f[j];
        }
        
        return ((gcFromItems == gc) && (gfFromItems == gf));
    }
    
    if (gp < 0)
        return 0;
    
    if (i == n)
        return 0;
    
    items[i] = 1;
    if (hasExactSameAmount(gp-p[i], gc, gf, n, p, c, f, items, i+1) == 1)
        return 1;
    
    items[i] = 0;
    return hasExactSameAmount(gp, gc, gf, n, p, c, f, items, i+1);
}

int main() {
    int i, j, t, gp, gc, gf, n, *p, *c, *f;
    
    scanf("%d", &t);

    for (i = 1; i <= t; i++) {
        scanf("%d %d %d", &gp, &gc, &gf);
        scanf("%d", &n);
        p = (int *)malloc(n*sizeof(int));
        c = (int *)malloc(n*sizeof(int));
        f = (int *)malloc(n*sizeof(int));
        for (j = 0; j < n; j++) {
            scanf("%d %d %d", &p[j], &c[j], &f[j]);
        }
        
        int *items = (int *)malloc(n*sizeof(int));
        
        printf("Case #%d: %s\n", i, hasExactSameAmount(gp, gc, gf, n, p, c, f, items, 0) ? "true" : "false");
        
        free(items);
        
        free(p);
        free(c);
        free(f);
    } 
}
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class NYResolution {

	public static void main(String[] args) {

		//long time = System.currentTimeMillis();

		NYResolution instance = new NYResolution();

		BufferedReader bfr;
		int t = -1;
		try {
			bfr = new BufferedReader(new InputStreamReader(System.in));
			String line = "";
			if ((line = bfr.readLine()) != null) {
				t = Integer.parseInt(line);
			}
			int countT = 0;
			List<Tuple> tList = new ArrayList<Tuple>();

			while (countT<t && (line = bfr.readLine()) != null) {
				countT++;
				if (countT > t) {
					throw new Exception("Too many inputs");
				}

				// Gp, Gc,Gf
				Tuple tG = readTuples(line);

				int n = -1;
				if ((line = bfr.readLine()) != null) {
					n = Integer.parseInt(line);
				}
				int countN = 0;
				tList = new ArrayList<Tuple>();

				while (countN < n && (line = bfr.readLine()) != null) {
					countN++;
					if (countN > n) {
						throw new Exception("Too many inputs");
					}
					Tuple tuple = readTuples(line);
					tList.add(tuple);
				}
				if (countN < n) {
					throw new Exception("Too less inputs");
				}

				instance.process(countT, tG, tList);

			}
			if (countT < t) {
				throw new Exception("Too less inputs");
			}

		} catch (Throwable th) {
			th.printStackTrace();
			System.exit(-1);
		}
		//long delta = System.currentTimeMillis() - time;
		//System.out.println("Time in millis:" + delta);
	}

	private void process(int i, Tuple tG, List<Tuple> tList) {
		System.out.println("Case #" + i + ": "
				+ (isPossible(tG, tList) ? "yes" : "no"));

	}

	private boolean isPossible(Tuple tG, List<Tuple> tList) {
		if (tList.size() == 0)
			return false;
		if (tList.size() == 1) {
			Tuple tuple = tList.get(0);
			if (tuple.equals(tG))
				return true;
			else
				return false;
		}
		int n1 = tList.size() / 2;
		HashSet<Tuple> set1 = new HashSet<Tuple>();
		HashSet<Tuple> set2 = new HashSet<Tuple>();

		set1 = union(tList.subList(0, n1), set1);
		set2 = union(tList.subList(n1, tList.size()), set2);

		return search(tG, set1, set2);
	}

	private HashSet<Tuple> union(List<Tuple> list, HashSet<Tuple> set) {
		HashSet<Tuple> result = new HashSet<Tuple>();
		if (list.size() > 0) {
			Tuple first = list.get(0);
			if (set.size() == 0) {
				Tuple z = new Tuple(0, 0, 0);
				result.add(z);
				result.add(first);
			} else {
				for (Tuple e : set) {
					Tuple t1 = new Tuple(first.getP() + e.getP(), first.getC()
							+ e.getC(), first.getF() + e.getF());
					result.add(e);
					result.add(t1);

				}
			}
		}
		if (list.size() == 1) {
			return result;
		} else {
			return union(list.subList(1, list.size()), result);
		}
	}

	private boolean search(Tuple g, HashSet<Tuple> set1, HashSet<Tuple> set2) {
		for (Tuple e : set1) {
			Tuple t = new Tuple(g.getP() - e.getP(), g.getC() - e.getC(),
					g.getF() - e.getF());
			if (set2.contains(t)) {
				return true;
			}
		}
		return false;
	}

	private static Tuple readTuples(String line) {
		String[] temp = line.trim().split(" ");
		int p = Integer.parseInt(temp[0]);
		int c = Integer.parseInt(temp[1]);
		int f = Integer.parseInt(temp[2]);
		return new Tuple(p, c, f);
	}

	static class Tuple implements Comparable<Tuple> {
		int p;
		int c;
		int f;

		public Tuple(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}

		public int getP() {
			return p;
		}

		public void setP(int p) {
			this.p = p;
		}

		public int getC() {
			return c;
		}

		public void setC(int c) {
			this.c = c;
		}

		public int getF() {
			return f;
		}

		public void setF(int f) {
			this.f = f;
		}

		@Override
		public boolean equals(Object obj) {
			if (obj == null)
				return false;
			if (!(obj instanceof Tuple))
				return false;
			Tuple t = (Tuple) obj;
			if (t.getP() == p && t.getC() == c && t.getF() == f)
				return true;
			return false;
		}

		@Override
		public int hashCode() {
			int hash = 5;
			hash = 89 * hash + p;
			hash = 89 * hash + c;
			hash = 89 * hash + f;
			return hash;
		}

		@Override
		public int compareTo(Tuple o) {
			if (o == null)
				return 1;
			if (this.p < o.p)
				return -1;
			if (this.p > o.p)
				return 1;
			if (this.c < o.c)
				return -1;
			if (this.c > o.c)
				return 1;
			if (this.f < o.f)
				return -1;
			if (this.f > o.f)
				return 1;
			return 0;
		}
	}
}

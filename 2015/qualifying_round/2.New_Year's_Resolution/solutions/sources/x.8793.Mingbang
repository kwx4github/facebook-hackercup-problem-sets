#include<stdio.h>
#include<limits.h>
typedef struct{
short p,c,f;
}food;
void merge(food A[],short p,short q,short r);
void mergesort(food A[],short p,short r);
short bsearch(food A[],short E,short p,short r);
short answer(short d,short e,short f,food F[],short N);
int main(){
    FILE *in,*out;
    short T,i,j,k,l,m,a,b,c,N;
    food G,F[20];
    in=fopen("new_years_resolution.txt","r");
    out=fopen("output.txt","w");
    fscanf(in,"%hd",&T);
    for(i=1;i<=T;i++){
        fscanf(in,"%hd%hd%hd",&G.p,&G.c,&G.f);
        fscanf(in,"%hd",&N);
        for(j=0;j<N;j++)
            fscanf(in,"%hd%hd%hd",&F[j].p,&F[j].c,&F[j].f);
        mergesort(F,0,N-1);
        j=answer(G.p,G.c,G.f,F,N);
        fprintf(out,"Case #%hd: %s\n",i,j?"yes":"no");
    }
    return 0;
}
short answer(short d,short e,short f,food F[],short N){
    short i,j=0,k,t=0,a,b,c;
    k=bsearch(F,d,0,N);
    for(a=b=c=0,j=0;j<=k&&a<d;j++){
        a+=F[j].p;
        b+=F[j].c;
        c+=F[j].f;
    }
    printf("%hd\t%hd\t%hd\t%hd\t%hd\n",j,k,a,b,c);
    if(a==d&&b==e&&c==f)
        return 1;
    for(i=k;i!=0&&i>=j-1&&t==0;i--)
        t=answer(d-F[i].p,e-F[i].c,f-F[i].f,F,i);
    return t;
}


void mergesort(food A[],short p,short r){
    short q;
    if(p<r){
        q=(p+r)/2;
        mergesort(A,p,q);
        mergesort(A,q+1,r);
        merge(A,p,q,r);
    }
}
void merge(food A[],short p,short q,short r){
    short n1=q-p+1,n2=r-q,i,j,k;
    food L[n1+1],R[n2+1];
    for(i=0;i<n1;i++)
        L[i]=A[p+i];
    for(j=0;j<n2;j++)
        R[j]=A[q+j+1];
    L[n1].p=R[n2].p=SHRT_MAX;
    for(i=j=0,k=p;k<=r;k++){
        if(L[i].p<=R[j].p){
            A[k]=L[i];
            i++;
        }
        else{
            A[k]=R[j];
            j++;
        }
    }
}
short bsearch(food A[],short E,short p,short r){
    short m=(p+r)/2;
    if(A[m].p==E)
        return m;
    if(p>=r)
        return m==0?0:m-1;
    A[m].p<E?bsearch(A,E,m+1,r):bsearch(A,E,p,m);
}

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		TaskB solver = new TaskB();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class TaskB {
    static int protein;
    static int carbohydrates;
    static int fat;
    static int n;
    static int[] pFoods;
    static int[] cFoods;
    static int[] fFoods;

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        protein = in.nextInt();
        carbohydrates = in.nextInt();
        fat = in.nextInt();
        n = in.nextInt();
        pFoods = new int[n];
        cFoods = new int[n];
        fFoods = new int[n];
        for (int i = 0; i < n; i++) {
            pFoods[i] = in.nextInt();
            cFoods[i] = in.nextInt();
            fFoods[i] = in.nextInt();
        }
        out.print("Case #" + testNumber + ": ");
        for (int i = 0; i < n; i++) {
            int curP = 0;
            int curC = 0;
            int curF = 0;
            if (dfs(i, curP, curC, curF)) {
                out.println("yes");
                return;
            }
        }
        out.println("no");
    }

    private boolean dfs(int cur, int curP, int curC, int curF) {
        curP += pFoods[cur];
        curC += cFoods[cur];
        curF += fFoods[cur];
        if (curP == protein && curC == carbohydrates && curF == fat) {
            return true;
        }
        int p = curP;
        int c = curC;
        int f = curF;
        for (int i = cur + 1; i < n; i++) {
            if (dfs(i, p, c, f)) {
                return true;
            }
        }
        return false;
    }


}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }


}


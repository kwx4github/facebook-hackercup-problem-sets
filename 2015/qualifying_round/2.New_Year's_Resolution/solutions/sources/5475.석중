using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    class Program
    {


        struct energy
        {
            public int g;
            public int f;
            public int c;
         
            public energy(int p1, int p2, int p3)
            {
                g = p1;
                f = p2;
                c = p3;
            }

        }



        bool YesOrNo(List<energy> eList)
        {
            int wg = eList[0].g;
            int wf = eList[0].f;
            int wc = eList[0].c;
            List<energy> eListAll = new List<energy>();
            for(int i = 1; i < eList.Count; ++ i)
            {
                if (wg < eList[i].g || wf < eList[i].f || wc < eList[i].c)
                    continue;
                eListAll.Add(eList[i]);
            }

            for (int i = 0; i < Math.Pow(2, eListAll.Count); i++)
            {
                energy[] combination = new energy[eListAll.Count];
                for (int j = 0; j < eListAll.Count; j++)
                {
                    if ((i & (1 << (eListAll.Count - j - 1))) != 0)
                    {
                        combination[j] = eListAll[j];
                    }
                    else
                        combination[j] = new energy(0, 0, 0);
                }
                int tg = 0;
                int tf = 0;
                int tc = 0;
                for (int j = 0; j < eListAll.Count; ++j )
                {
                    tg += combination[j].g;
                    tf += combination[j].f;
                    tc += combination[j].c;
                }
                if (tg == wg && tf == wf && tc == wc)
                    return true;
            }

            return false;
        }

        void Solve(List<String> Lines)
        {
            int Linecount = 0;
            List<energy> eList = new List<energy>();
            int ListCount = 0;
            int kCount = 1;
            for (int i = 0; i < Lines.Count; ++i)
            {
                String sr = Lines[i];
                if (i == 0)
                {
                    Linecount = int.Parse(sr);
                    continue;
                }

                int temp = sr.IndexOf(" ");
                if (temp < 0)
                {
                    ListCount = int.Parse(sr);
                    continue;
                }
                int temp2 = temp + 1 + sr.Substring(temp + 1, sr.Length - temp - 1).IndexOf(" ");
                StringBuilder sb = new StringBuilder(sr);
                string a = "";
                string b = "";
                string c = "";
                for (int j = 0; j < temp; ++j )
                {
                    a += sb[j].ToString();
                }
                for (int j = temp+1; j < temp2; ++j )
                {
                    b += sb[j].ToString();
                }
                for (int j = temp2+1; j < sb.Length; ++j)
                {
                   c += sb[j].ToString();
                }

                eList.Add(new energy(int.Parse(a), int.Parse(b), int.Parse(c)));
                ListCount--;
                if (ListCount == 0)
                {
                    using (StreamWriter writer = new StreamWriter(@"outfile.txt", true))
                    {
                        if (YesOrNo(eList))
                            writer.WriteLine("Case #{0}: yes", kCount);
                        else
                            writer.WriteLine("Case #{0}: no", kCount);
                    }
                    eList.Clear();
                    kCount++;
                }

                /*
                    using (StreamWriter writer = new StreamWriter(@"outfile.txt", true))
                    {
                        writer.WriteLine("Case #{0}: Yes", i);
                    }
                 */
            }
        }

        static void Main(string[] args)
        {
             Program p = new Program();
            List<String> Lines = new List<String>();
            try
            {
                using (StreamReader sr = new StreamReader("new_years_resolution.txt"))
                {

                    string temp;
                    //String line = sr.ReadToEnd();
                    while (true)
                    {
                        temp = sr.ReadLine();
                        if (temp  == null)
                            break;
                        Lines.Add(temp);
                    }
                }
                p.Solve(Lines);

            }
            catch (Exception e)
            {
                Console.WriteLine("The file could not be read:");
                Console.WriteLine(e.Message);
            }
        }
    }
}

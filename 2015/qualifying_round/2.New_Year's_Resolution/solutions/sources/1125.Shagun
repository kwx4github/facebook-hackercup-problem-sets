#include <stdio.h>
#include<iostream>
#include<stdlib.h>
#include<fstream>
using namespace std;
struct bal{
	int p;
	int c;
	int f;
};
// Returns true if there is a subset of set[] with sun equal to given sum
bool isSubsetSum(struct bal set[], int n, struct bal sum)
{
   // Base Cases
   if (sum.p == 0&&sum.c==0&&sum.f==0)
     return true;
   if (n == 0 && (sum.p != 0||sum.f!=0||sum.c!=0))
     return false;
 
   // If last element is greater than sum, then ignore it
   if (set[n-1].p > sum.p||set[n-1].c>sum.c||set[n-1].f>sum.f)
     return isSubsetSum(set, n-1, sum);
 
   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
      struct bal newsum;
      newsum.p=sum.p-set[n-1].p;
      newsum.c=sum.c-set[n-1].c;
      newsum.f=sum.f-set[n-1].f;
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, newsum);
}
 
// Driver program to test above function
int main()
{
	ofstream myfile3;
	ifstream in("in.txt");
	myfile3.open("out.txt");
	int t;
	int c;
	in>>t;
	for(c=0;c<t;c++){
		myfile3<<"Case #"<<c+1<<": ";
	struct bal sum;
	in>>sum.p;
	in>>sum.c;
	in>>sum.f;
	int n;
	in>>n;
	
	
  struct bal set[n];
  int i,j,k;
  for(i=0;i<n;i++){
  	
	  in>>set[i].p>>set[i].c>>set[i].f;
  }
  if (isSubsetSum(set, n, sum) == true)
     myfile3<<"yes"<<endl;
  else
     myfile3<<"no"<<endl;	
	}
	
  return 0;
}

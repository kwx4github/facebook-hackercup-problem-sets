import java.io.*;
import java.util.ArrayList;

/**
 * Created by kjs8469 on 15. 1. 12..
 */
public class Resolution {
    final static int NMAX = 20;

    public static ArrayList<String> contents = new ArrayList<String>();
    public static int resolutionIdx = 1, lineLengthIdx = 2, listStartIdx = 3;
    public static int gp,gc,gf;
    public static boolean result = false;

    public static void main(String[] args){
        BufferedReader br = null;
        InputStreamReader isr = null;
        FileInputStream fis = null;
        File file = new File("new_years_resolution_example_input.txt");

        String temp = "";

        try {
            fis = new FileInputStream(file);
            isr = new InputStreamReader(fis, "UTF-8");
            br = new BufferedReader(isr);

            while( (temp = br.readLine()) != null) {
                contents.add(temp);
            }

            int T = Integer.parseInt(contents.get(0));

            for (int i = 0; i < T; i++){
                int lineLength = Integer.parseInt(contents.get(lineLengthIdx));

                //set goal
                String[] g = contents.get(resolutionIdx).split(" ");
                gp = Integer.parseInt(g[0]);
                gc = Integer.parseInt(g[1]);
                gf = Integer.parseInt(g[2]);

                generateSubsets(i, lineLength);
                resolutionIdx = resolutionIdx + lineLength + 2;
                lineLengthIdx = lineLengthIdx + lineLength + 2;
                listStartIdx = listStartIdx + lineLength + 2;
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                fis.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                isr.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    public static void generateSubsets(int i, int n){
        int[] a = new int[NMAX];
        result = false;
        backtrack(a, 0, n);
        System.out.println("Case #" + (i+1) + ": " + ((result)?"yes":"no"));
    }
    public static void backtrack(int[] a, int k, int input){
        int[] c = {0,1};
        if( isSolution(a, k, input) ){
            processSolution(a, k);
        } else {
            k++;
            for(int i=0 ; i<c.length ; i++)
            {
                a[k-1] = c[i];
                backtrack(a, k, input);
            }
        }
    }
    public static boolean isSolution(int[] a, int k, int n){
        return (k==n);
    }
    public static void processSolution(int[] a, int k){
        int t1 = 0,t2 = 0,t3 = 0;

        for(int i = 0, len = k; i < len; i++ ){
            if(a[i]==1) {
                String[] ts = contents.get(i + listStartIdx).split(" ");
                t1 += Integer.parseInt(ts[0]);
                t2 += Integer.parseInt(ts[1]);
                t3 += Integer.parseInt(ts[2]);
            }
        }

        if(t1 == gp && t2 == gc && t3 == gf){
            result = true;
        }
    }
}

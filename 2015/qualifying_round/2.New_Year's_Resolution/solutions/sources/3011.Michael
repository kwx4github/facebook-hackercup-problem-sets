#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <math.h>
#include <algorithm>
#include <bitset>
#include <set>
#include <sstream>
#include <stdlib.h>
#include <map>
#include <queue>
#include <stack>
#include <assert.h>
// #include <unordered_set>
#include <iomanip>

using namespace std;

#define sz(x) ((int)x.size())
#define all(x) (x).begin(), (x).end()
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

#define forit(X,Y) for(typeof((Y).begin()) X = (Y).begin(); X != (Y).end(); ++X)

#define mplus(x, y) ((x) == -1 || (y) == -1) ? -1 : ((x) + (y))
#define mmax(x, y) ((x) == -1 || (y) == -1) ? -1 : max((x), (y))
#define mmin(x, y) ((x) == -1) ? (y) : ((y) == -1) ? (x) : min((x), (y))

#define checkbit(n, k) (((1L << (k)) & (n)) != 0)

#define debug(x) cerr << '>' << #x << ':' << x << endl;

typedef long long int64;

typedef vector <int> vi;
typedef vector < vi > vvi;


bool get_bit(int n, int k) {
    return ((1L << k) & n) != 0;
}

bool can(int p, int c, int f, vector<int> pp, vector<int> cc, vector<int> ff) {
    int n = pp.size();
    for (int m = 0; m < (1 << n); ++m) {
        int p1 = 0, c1 = 0, f1 = 0;
        for (int i = 0; i < n; ++i) {
            if (get_bit(m, i)) {
                p1 += pp[i];
                c1 += cc[i];
                f1 += ff[i];
            }
        }
        if (p1 == p && c1 == c && f1 == f)
            return true;
    }
    return false;
}

int main() {
    int T;
    cin >> T;
    for (int tt = 1; tt <= T; ++tt) {
        int p, c, f;
        cin >> p >> c >> f;
        int n;
        cin >> n;
        vector<int> pp(n), cc(n), ff(n);
        for (int i = 0; i < n; ++i)
            cin >> pp[i] >> cc[i] >> ff[i];
        bool res = can(p, c, f, pp, cc, ff);
        cout << "Case #" << tt << ": " << (res ? "yes" : "no") << endl;
    }
}

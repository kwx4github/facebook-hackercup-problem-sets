import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;


public class Solution {

  private static void updateSubsets(Set<Set<Integer>> subsets, boolean[][] memo, int[] set,
      int sum, Set<Integer> currentSubset) {
    if (sum == 0) {
      subsets.add(currentSubset);
    }
    for (int i = 0; i < memo.length; i++) {
      if (set[i] > sum) {
        continue;
      }
      if (memo[i][sum] == true && !currentSubset.contains(i)) {
        Set<Integer> subset = new HashSet<Integer>(currentSubset);
        subset.add(i);
        updateSubsets(subsets, memo, set, sum - set[i], subset);
      } else {
        continue;
      }
    }
  }

  private static HashSet<Set<Integer>> getSubsets(int[] set, int sum) {

    boolean[][] memo = new boolean[set.length][sum + 1];
    if (set[0] <= sum) {
      memo[0][set[0]] = true;
    }
    for (int row = 1; row < set.length; row++) {
      for (int col = 1; col <= sum; col++) {
        memo[row][col] =
            (col == set[row]) || (memo[row - 1][col] == true)
                || (col - set[row] > 0 && (memo[row - 1][col - set[row]] == true));
      }
    }
    HashSet<Set<Integer>> subsets = new HashSet<Set<Integer>>();
    updateSubsets(subsets, memo, set, sum, new HashSet<Integer>());
    return subsets;


  }

  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new FileReader(args[0]));
    int numberOfTestCases = Integer.parseInt(br.readLine());
    for (int testCase = 0; testCase < numberOfTestCases; testCase++) {
      String[] planned = br.readLine().split(" ");
      int gp = Integer.parseInt(planned[0]);
      int gc = Integer.parseInt(planned[1]);
      int gf = Integer.parseInt(planned[2]);
      int foodCount = Integer.parseInt(br.readLine());
      int[] protein = new int[foodCount];
      int[] carb = new int[foodCount];
      int[] fat = new int[foodCount];
      for (int i = 0; i < foodCount; i++) {
        String[] data = br.readLine().split(" ");
        protein[i] = Integer.parseInt(data[0]);
        carb[i] = Integer.parseInt(data[1]);
        fat[i] = Integer.parseInt(data[2]);
      }
      Set<Set<Integer>> enoughProtein = getSubsets(protein, gp);
      Set<Set<Integer>> enoughCarb = getSubsets(carb, gc);
      Set<Set<Integer>> enoughFat = getSubsets(fat, gf);
      enoughProtein.retainAll(enoughCarb);
      enoughProtein.retainAll(enoughFat);
      System.out.printf("Case #%d: %s%n", testCase + 1, enoughProtein.isEmpty() ? "no" : "yes");
    }
    br.close();
  }
}

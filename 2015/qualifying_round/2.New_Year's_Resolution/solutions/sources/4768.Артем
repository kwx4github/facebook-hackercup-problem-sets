#include <iostream>
#include <fstream>
#include <cstdio>
#include <iomanip>
#include <cassert>
#include <climits>
#include <cmath>
#include <ctime>
#include <vector>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <time.h>
#include <stack>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <functional>
#include <algorithm>
#include <bitset>
using namespace std;

#pragma comment(linker, "/STACK:256000000")

#define sqr(x) ((x) * (x))
typedef long long llong;
typedef unsigned long long ullong;
typedef pair < int, int > pii;

int cntp, cntc, cntf;

struct food
{
	int p, c, f;

	food(){}
	food(int p, int c, int f) : p(p), c(c), f(f) {}
};

vector < food > havka;

bool check(int sump = 0, int sumc = 0, int sumf = 0, int pos = 0)
{
	if (sump == cntp && sumc == cntc && sumf == cntf) 
		return true;
	if (sump > cntp || sumc > cntc || sumf > cntf) return false;

	for (int i = pos; i < havka.size(); i++)
	{
		food lol = havka[i];
		if (check(sump + lol.p, sumc + lol.c, sumf + lol.f, i + 1))
			return true;
	}

	return false;
}

int main() {
#ifdef ARTEM_PSKOV
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif;

	
	int test; cin >> test;
	for (int tt = 0; tt < test; tt++)
	{
		cin >> cntp >> cntc >> cntf;
		int n; cin >> n;
		for (int i = 0; i < n; i++)
		{
			int a, b, c; cin >> a >> b >> c;
			havka.push_back(food(a, b, c));
		}

		printf("Case #%d: ", tt + 1);
		if (check()) cout << "yes";
		else		 cout << "no";
		cout << endl;

		havka.clear();
	}

    return 0;
}
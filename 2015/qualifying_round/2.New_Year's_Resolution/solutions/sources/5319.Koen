package com.kbasten.fbhackercup;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

public class NYR {
	
	public int[] shit;

	public NYR() throws IOException {
		String inputFile = "nyr.txt";
		
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("nyrout.txt")));
		
		Scanner s = new Scanner(new File(inputFile));
		int numProblems = s.nextInt();
		
		System.out.println(numProblems);
		
		shit = new int[numProblems];
		
		int[] goal = new int[3];
		for (int i = 0; i < numProblems; i++){
			shit[i] = 0;
			for (int j = 0; j < 3; j++){
				goal[j] = s.nextInt();
			}
			
			int foodNum = s.nextInt();
			
			ArrayList<Integer[]> foods = new ArrayList<Integer[]>();
			
			for (int j = 0; j < foodNum; j++){
				foods.add(new Integer[3]);
				for (int k = 0; k < 3; k++){
					foods.get(j)[k] = s.nextInt();
				}
			}
			
			boolean solution = false;
			solution |= m(i, goal, foods);
			System.out.println("S " + Boolean.toString(solution));
			for (int j = 1; j < foods.size() && !solution; j++){
				System.out.println("Checking problem " + i + " with food nr " + j + " " + Boolean.toString(solution));
				foods.remove(0);
				solution |= m(i, goal, foods);
			}
			
			System.out.println("Solution for " + i + " : " + Boolean.toString(solution));
			
			// print
			StringBuilder sb = new StringBuilder();
			sb.append("Case #").append(i + 1).append(": ");
				sb.append(shit[i] == 1 ? "yes" : "no");
			bw.write(sb.toString());
			bw.newLine();
			System.out.println(sb.toString());
		}
		
		bw.close();
	}
	
	private boolean m(int problemNr, int[] goals, ArrayList<Integer[]> left){
		//System.out.println("     Checking problem " + problemNr);
		if (left.size() == 0){
			//System.err.println("                   No solutions yet for " + problemNr + " ...");
			return false;
		}
		//System.out.print("    Goal: " );
		for (int i = 0; i < 3; i++){
			//System.out.print(goals[i] + " .. ");
		}
		//System.out.println();
		

		
		
		
		ArrayList<Integer[]> possibles = new ArrayList<Integer[]>(left);
		
		Iterator<Integer[]> it = possibles.iterator();
		while (it.hasNext()){
			Integer[] next = it.next();

			boolean skip = false;
			for (int j = 0; j < 3 && !skip; j++){
				int wouldBe = goals[j] - next[j];
				if (wouldBe < 0){
					skip = true;
				}
			}
		}
		
		if (possibles.size() == 0){
			//System.out.println("  No more possibilities!");
			return false;
		}
		
		it = possibles.iterator();
		while (it.hasNext()){
			int[] newGoals = new int[3];
			System.arraycopy(goals, 0, newGoals, 0, 3);
			Integer[] next = possibles.remove(0);
			int zeroes = 0;
			for (int i = 0; i < 3; i++){
				newGoals[i] -= next[i];
				if (newGoals[i] == 0){
					zeroes++;
				}
			}
			
			if (zeroes == 3){
				System.err.println("Solution found for " + problemNr);
				System.out.println("returning true");
				shit[problemNr] = 1;
				return true;
			}
			
			
			// zeroes is not 3, keep looking...
			m(problemNr, newGoals, new ArrayList<Integer[]>(possibles));			
		}
		
		return false;
	}
}

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

public class Qualification {

	private static Stack<Integer> stack = new Stack<Integer>();

	public static void main(String[] args) throws Exception {

		File f = new File("c:\\input.txt");
		Scanner in = new Scanner(f);
		int num = in.nextInt();
		for (int i = 1; i <= num; i++) {
			int targetP = in.nextInt();
			int targetC = in.nextInt();
			int targetF = in.nextInt();
			int numFood = in.nextInt();

			boolean result = false;

			int proteinArr[] = new int[numFood];
			int carbArr[] = new int[numFood];
			int fatArr[] = new int[numFood];

			for (int j = 0; j < numFood; j++) {

				proteinArr[j] = in.nextInt();
				carbArr[j] = in.nextInt();
				fatArr[j] = in.nextInt();

			}

			result = checkSolved(proteinArr, carbArr, fatArr, numFood,
						targetP, targetC, targetF);

			if (result)
				System.out.println("Case #" + i + ": yes");
			else
				System.out.println("Case #" + i + ": no");

		}

	}

	private static boolean checkSolved(int proteinArr[], int carbArr[], int fatArr[], int n, int targetP, int targetC, int targetF)
	{
	   // Base Cases
	   if (targetP == 0 && targetC == 0 && targetF == 0)
	     return true;
	   if (n == 0 && (targetP != 0 || targetC != 0 || targetF != 0))
	     return false;
	 
	   // If last element is greater than sum, then ignore it
	   if ((proteinArr[n-1] > targetP) || carbArr[n-1] >  targetC || fatArr[n-1] >  targetF)
	     return checkSolved(proteinArr, carbArr, fatArr, n-1, targetP, targetC, targetF);
	 
	   return checkSolved(proteinArr, carbArr, fatArr, n-1, targetP, targetC, targetF) || checkSolved(proteinArr, carbArr, fatArr, n-1, targetP-proteinArr[n-1], targetC-carbArr[n-1], targetF-fatArr[n-1]);
	}
}

package facebook.new_year_resolution;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Stack;

public class NewYearResolution {
	
	static class FileStuff {
		private String fileInput;
		private String fileOutput;
		private String path;
		
		public FileStuff(String fileInput, String fileOutput, String path)
		{
			this.fileInput = fileInput;
			this.fileOutput = fileOutput;
			String pathTemp = System.getProperty("user.dir");
			pathTemp += "/src/facebook/" + path + "/";
			this.path = pathTemp;
		}
		
		public ArrayList<String> ReadFromFile() throws IOException
		{
			InputStream input = new FileInputStream(path + this.fileInput);
			BufferedReader br = new BufferedReader(new InputStreamReader(input));
			String strLine;
			ArrayList<String> arrRes = new ArrayList<String>();
			while ((strLine = br.readLine()) != null)
			{
				arrRes.add(strLine);
			}
			br.close();
			input.close();
			return arrRes;
		}
		
		public boolean WriteToFile(ArrayList<String> arrOut) throws IOException
		{
			OutputStream output = new FileOutputStream(path + this.fileOutput);
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(output));
			
			for (int i=0;i<arrOut.size();i++)
			{
				bw.write(arrOut.get(i));
				bw.newLine();
			}
			bw.close();
			output.close();
			return true;
		}

	}

	public static void main(String[] args) throws IOException {
		FileStuff fs = new FileStuff("input.in", "output.out", "new_year_resolution");
		ArrayList<String> input = new ArrayList<String>();
		input = fs.ReadFromFile();
		
		long startTime = System.currentTimeMillis();
		
		ArrayList<String> output = new ArrayList<String>();
		
		int xCase = Integer.valueOf(input.get(0));
		int xPointer = 1;
		
		for (int i=1;i<=xCase;i++)
		{
			String strOut = "Case #" + String.valueOf(i) + ":";
			String strLine = input.get(xPointer);
			xPointer++;
			String[] arrLine = strLine.split(" ");
			int[] t = new int[3];
			for (int a=0;a<3;a++) t[a] = Integer.parseInt(arrLine[a]);
			int n = Integer.parseInt(input.get(xPointer));
			xPointer++;
			int[] p = new int[n];
			int[] c = new int[n];
			int[] f = new int[n];
			for (int a=0;a<n;a++) {
				strLine = input.get(xPointer);
				xPointer++;
				arrLine = strLine.split(" ");
				p[a] = Integer.parseInt(arrLine[0]);
				c[a] = Integer.parseInt(arrLine[1]);
				f[a] = Integer.parseInt(arrLine[2]);
			}
			
			boolean isFound = false;
			GetAllSubsetByStack subsetStack = new GetAllSubsetByStack(t[0]);
			subsetStack.populateSubset(p, 0, p.length);
			ArrayList<Stack<Integer>> stacks = subsetStack.result;
			for (int a=0;a<stacks.size();a++) {
				int cSum = 0;
				int fSum = 0;
				for (int b=0;b<stacks.get(a).size();b++) {
					cSum += c[stacks.get(a).get(b)];
					fSum += f[stacks.get(a).get(b)];
				}
				if (cSum == t[1] && fSum == t[2]) {
					isFound = true;
					break;
				}
			}
			
			strOut += " ";
			if (isFound) {
				strOut += "yes";
			} else {
				strOut += "no";
			}
			output.add(strOut);
		}
		fs.WriteToFile(output);
		
		long endTime = System.currentTimeMillis();
		System.out.print(endTime - startTime);
	}
	
	static class GetAllSubsetByStack {

	    private Stack<Integer> stack = new Stack<Integer>();
	    private Stack<Integer> stackIndex = new Stack<Integer>();
	    private int target;
	    public ArrayList<Stack<Integer>> result;

	    /** Store the sum of current elements stored in stack */
	    private int sumInStack = 0;
	    
	    public GetAllSubsetByStack(int target) {
	    	this.target = target;
	    	result = new ArrayList<Stack<Integer>>();
	    }

	    public void populateSubset(int[] data, int fromIndex, int endIndex) {

	        /*
	        * Check if sum of elements stored in Stack is equal to the expected
	        * target sum.
	        * 
	        * If so, call print method to print the candidate satisfied result.
	        */
	        if (sumInStack == target) {
	        	Stack<Integer> saveStackIndex = new Stack<Integer>();
	        	saveStackIndex.addAll(stackIndex);
	            result.add(saveStackIndex);
	        }

	        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

	            if (sumInStack + data[currentIndex] <= target) {
	                stack.push(data[currentIndex]);
	                stackIndex.push(currentIndex);
	                sumInStack += data[currentIndex];

	                /*
	                * Make the currentIndex +1, and then use recursion to proceed
	                * further.
	                */
	                populateSubset(data, currentIndex + 1, endIndex);
	                sumInStack -= (Integer) stack.pop();
	                stackIndex.pop();
	            }
	        }
	    }
	}


}

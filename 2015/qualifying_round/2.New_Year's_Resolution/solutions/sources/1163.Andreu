#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

class Tri {
public:
  int p, c, f;
  
  Tri() {}
};
Tri operator-(const Tri& a, const Tri& b) {
  Tri r = a;
  r.p -= b.p;
  r.c -= b.c;
  r.f -= b.f;
  return r;
}

bool is_possible(Tri g, int n, const vector<Tri>& food) {
  vector<Tri> list(0);
  list.push_back(g);
  for (int i = 0; i < n; ++i) {
    for (int k = 0; k < list.size(); ++k) {
      Tri r = list[k] - food[i];
      if (r.p == 0 and r.c == 0 and r.f == 0) return true;
      if (r.p >= 0 and r.c >= 0 and r.f >= 0) list.push_back(r);
    }
  }
  return false;
}

int main() {
  int t;
  cin >> t;
  for (int cas = 1; cas <= t; ++cas) {
    cout << "Case #" << cas << ": ";
    Tri g;
    cin >> g.p >> g.c >> g.f;
    int n;
    cin >> n;
    vector<Tri> food(n);
    for (int i = 0; i < n; ++i) {
      cin >> food[i].p >> food[i].c >> food[i].f;
    }
    if (is_possible(g, n, food)) cout << "yes";
    else cout << "no";
    cout << endl;
  }
}

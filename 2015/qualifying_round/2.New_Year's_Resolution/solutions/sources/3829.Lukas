package de.luk.fb.HC2015.challenge;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class NewYearsResolution {
	private BufferedReader reader;
	private BufferedWriter writer;
	private int testCases;
	private int currentOutput = 1;

	public void solve(File input, File output) throws FileNotFoundException,
			IOException {
		try (BufferedReader reader = new BufferedReader(new FileReader(input));
				BufferedWriter writer = new BufferedWriter(new FileWriter(
						output))) {
			this.reader = reader;
			this.writer = writer;
			this.testCases = Integer.parseInt(readNextLine());
			for (int i = 0; i < testCases; i++) {
				Foot toEat = new Foot(readNextLine());
				int footCount = Integer.parseInt(readNextLine());
				writeOutput(solveProblem(
						toEat,
						IntStream.range(0, footCount)
								.mapToObj(index -> new Foot(readNextLine()))
								.collect(Collectors.toList())));
			}
		}
	}

	private String solveProblem(Foot toEat, List<Foot> foots) {
		return hasSolution(toEat, foots) ? "yes" : "no";
	}

	private boolean hasSolution(Foot toEat, List<Foot> foots) {
		if (toEat.isEmpty()) {
			return true;
		}
		int size = foots.size();
		for (int i = 0; i < size; i++) {
			if (!toEat.canEat(foots.get(i))) {
				continue;
			}
			Foot foot = foots.remove(i);
			if (hasSolution(toEat.eat(foot), foots)) {
				return true;
			}
			foots.add(i, foot);
		}
		return false;
	}

	public static void main(String[] args) throws FileNotFoundException,
			IOException {
		File inputFile = new File("/home/lukas/Downloads/new_years_resolution.txt");
		File outputFile = new File("/home/lukas/Downloads/new_years_resolution_solv.txt");
		NewYearsResolution challenge = new NewYearsResolution();
		challenge.solve(inputFile, outputFile);
	}

	private void writeOutput(String output) {
		try {
			writer.write("Case #" + currentOutput++ + ": " + output);
			writer.newLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private String readNextLine() {
		try {
			return reader.readLine();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	private class Foot implements Cloneable {
		public int p;
		public int c;
		public int f;

		public Foot(int p, int c, int f) {
			super();
			this.p = p;
			this.c = c;
			this.f = f;
		}

		public Foot(String line) {
			String[] parts = line.split(" ");
			this.p = Integer.parseInt(parts[0]);
			this.c = Integer.parseInt(parts[1]);
			this.f = Integer.parseInt(parts[2]);
		}

		public boolean canEat(Foot foot) {
			return p - foot.p >= 0 && c - foot.c >= 0 && f - foot.f >= 0;
		}

		public Foot eat(Foot foot) {
			return new Foot(p - foot.p, c - foot.c, f - foot.f);
		}

		public boolean isEmpty() {
			return p + c + f == 0;
		}

		@Override
		public Foot clone() {
			return new Foot(p, c, f);
		}

		@Override
		public String toString() {
			return "Foot [p=" + p + ", c=" + c + ", f=" + f + "]";
		}

	}
}

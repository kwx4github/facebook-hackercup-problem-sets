//
//  main.cpp
//  Coding
//
//  Created by Hao Wu on 1/9/15.
//  Copyright (c) 2015 Hao Wu. All rights reserved.
//

#include<iostream>
#include<fstream>

using namespace std;



void qsort(int q[], int c[], int f[], int start, int end){
    if (start<end) {
        int tmp;
        int s = start;
        int t = end;
        while (s<t) {
            while (s<t && q[s]<q[t]) s++;
            if (s<t) {
                tmp = q[s];
                q[s] = q[t];
                q[t] = tmp;
                
                tmp = c[s];
                c[s] = c[t];
                c[t] = tmp;
                
                tmp = f[s];
                f[s] = f[t];
                f[t] = tmp;
                
                t--;
            }
            
            while (s<t && q[s]<q[t]) t--;
            if (s<t) {
                tmp = q[s];
                q[s] = q[t];
                q[t] = tmp;
                
                tmp = c[s];
                c[s] = c[t];
                c[t] = tmp;
                
                tmp = f[s];
                f[s] = f[t];
                f[t] = tmp;
                
                s++;
            }
            
        }
        qsort(q,c,f,start,s-1);
        qsort(q,c,f,s+1,end);
    }
    
}

bool search(int p[], int c[], int f[], int N, int k, int tp, int tc, int tf){
    if (k==N) {

 //       cout<<"At last level, "<<tp<<","<<tc<<","<<tf<<"\n";
   //     getchar();
        if (tp==0 && tc == 0 && tf == 0) {
            return true;
        } else {
            return false;
        }
    
    } else {
 //       getchar();
        //cout<<"At level k == "<<k<<", judging ("<<p[k]<<','<<c[k]<<','<<f[k]<<"), with "<<tp<<","<<tc<<","<<tf<<"\n";


        if (tp-p[k]>=0) {
            if (tc-c[k]>=0 && tf-f[k]>=0) {
                return search(p,c,f,N,k+1,tp-p[k],tc-c[k],tf-f[k]) || search(p,c,f,N,k+1,tp,tc,tf);
            } else {
                return search(p, c, f, N, k+1, tp, tc, tf);
            }
        } else {
            if (tp==0 && tc == 0 && tf == 0) {
                return true;
            } else {
                return false;
            }
            
        }
    }
}


int main(){
    int T;
    int N;
    int tp, tc, tf;
    int p[21],c[21],f[21];
    ifstream inf;
    ofstream outf;
    inf.open("res.txt");
    outf.open("output.txt");
    inf>>T;
    int count = 1;
    while (T>0){
        T--;
        inf>>tp>>tc>>tf;
        inf>>N;
        for (int i=0;i<N;i++){
            inf>>p[i]>>c[i]>>f[i];
        }		
        
        qsort(p,c,f,0,N-1);



        if (search(p,c,f,N,0,tp,tc,tf)) {
            outf<<"Case #"<<count<<": yes\n";
        } else {
            outf<<"Case #"<<count<<": no\n";
        }
        count ++;
        
    }
    inf.close();
    
    outf.close();
    
    
}

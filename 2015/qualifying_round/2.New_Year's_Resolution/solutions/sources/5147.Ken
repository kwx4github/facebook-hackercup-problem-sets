#!/usr/bin/env python

from operator import attrgetter

class Food:
    def __init__ (self, p, c, f):
        self.p = p
        self.c = c
        self.f = f
        self.accessed = False

    def set_accessed (self):
        self.accessed = True

    def get_all (self):
        return self.p, self.c, self.f

    def __repr__ (self):
        return "{%d, %d, %d}" % (self.p, self.c, self.f)

def sum_of_foods (foods):
    Sp, Sc, Sf = 0, 0, 0
    for f in foods:
        Sp += f.p
        Sc += f.c
        Sf += f.f
    return Sp, Sc, Sf

can_exact_match = False
def subset_sum (foods, Gp, Gc, Gf, partial=[]):
    global can_exact_match
    Sp, Sc, Sf = sum_of_foods(partial)

    if can_exact_match:
        return
    if Sp == Gp and Sc == Gc and Sf == Gf:
        can_exact_match = True
        return
    if Sp > Gp or Sc > Gc or Sf > Gf: # too large
        return

    for i in range(len(foods)):
        f = foods[i]
        remaining = foods[i+1:]
        subset_sum(remaining, Gp, Gc, Gf, partial + [f])


if __name__ == '__main__':
    no_of_tests = int(raw_input())

    for test_case_id in range(1, no_of_tests+1):
        Gp, Gc, Gf = [int(x) for x in raw_input().split()]
        no_of_foods = int(raw_input())
        list_of_foods = []
        for i in range(no_of_foods):
            p, c, f = [int(x) for x in raw_input().split()]
            if p <= Gp and c <= Gc and f <= Gf:
                list_of_foods.append(Food(p, c, f))
        #list_of_foods = sorted(list_of_foods, key=attrgetter('p'))

        can_exact_match = False
        subset_sum(list_of_foods, Gp, Gc, Gf)
        #print list_of_foods

        if can_exact_match:
            print "Case #%d: yes" % (test_case_id)
        else:
            print "Case #%d: no" % (test_case_id)

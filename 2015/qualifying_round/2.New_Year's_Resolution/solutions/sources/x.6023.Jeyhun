package Main;

import java.io.*;
import java.lang.reflect.Array;
import java.util.*;


public class Main {
    Parser in;
    PrintWriter out;

    public static void main(String ... args) throws IOException {
        new Main().run();
    }

    public void run() throws IOException {
        in = new Parser(new FileInputStream("new_years_resolution.txt"));
        out = new PrintWriter(new FileOutputStream("new_years_resolution_output.txt"));
        int T;
        int N;
        T = in.nextInt();

        for (int test = 1; test <= T; ++test) {
            int GP = in.nextInt();
            int GC = in.nextInt();
            int GF = in.nextInt();
            N = in.nextInt();
            Integer[] array1 = new Integer[N];
            Integer[] array2 = new Integer[N];
            Integer[] array3 = new Integer[N];
            for (int i = 0; i < N; ++i) {
                array1[i] = new Integer(in.nextInt());
                array2[i] = new Integer(in.nextInt());
                array3[i] = new Integer(in.nextInt());
            }

            if (isGP(array1, GP) && isGC(array2, GC) && isGF(array3, GF)) {
                out("Case #%d: %s\n", test, "yes");
            } else {
                out("Case #%d: %s\n", test, "no");
            }

            /*
            if (isGP(array1, GP)) {
                out("Case #%d: %s\n", test, "yes");
            } else {
                out("Case #%d: %s\n", test, "no");
            }
            */

        }
        out.close();
    }

    void out(String format, Object... args) {
        out.printf(format, args);
        System.out.printf(format, args);
    }

    public boolean isGP(Integer[] array, int GP) {
        ArrayList<Integer> arrayList = new ArrayList<Integer>(Arrays.asList(array));
        Collections.sort(arrayList);
        //System.out.println(arrayList.toString());
        for (int i = arrayList.size()-1; i >= 0; --i) {
            if (arrayList.get(i) == GP) return true;
            if (arrayList.get(i) > GP) arrayList.remove(i);
        }

        arrayList.trimToSize();
        int arrayLength = arrayList.size();
        //System.out.println(arrayList.toString());

        int sum = 0;
        for(int i = 0; i < arrayLength; ++i) {
            sum += arrayList.get(i);
            if (sum  == GP) return true;
            if (sum > GP) break;
        }


        for (int i = 0; i < arrayLength - 1; ++i) {
            for(int j = i+1; j < arrayLength; ++j) {
                if ((arrayList.get(i) + arrayList.get(j) == GP)) return true;
            }
        }

        if (rec1(arrayList, GP)) return true;

        while (arrayList.size() > 1) {
            if (rec(arrayList, GP)) return true;
            arrayList.remove(0);
            arrayList.trimToSize();
            arrayLength = arrayList.size();
        }

        return false;
    }

    public boolean rec(ArrayList<Integer> array, int GP) {
        for (int i = 1; i < array.size()-1; ++i) {
            int sum1 = array.get(0) + array.get(i);
            if (array.size()-1 >= i+1) {
                int j = i+1;
                while (j < array.size()) { if ((sum1 + array.get(j)) == GP) {
                    //System.out.println(sum1 + " " + array.get(j) + " i=" + i + " j=" + j);
                    //System.out.println(array.toString());
                    return true;
                }
                    else ++j;
                }
            }
        }

        return false;
    }

    public boolean rec1(ArrayList<Integer> array, int GP) {
        for (int k = 0; k < array.size()-2; ++k) {
            int sum1 = array.get(k);
            for (int i = k+1; i < array.size() - 1; ++i) {
                sum1 += array.get(i);
                for (int j = i + 1; j < array.size(); ++j) {
                    if ((sum1 + array.get(j)) == GP) return true;
                }
            }
        }

        return false;
    }


    public boolean isGC(Integer[] array, int GC) {
        ArrayList<Integer> arrayList = new ArrayList<Integer>(Arrays.asList(array));
        Collections.sort(arrayList);
        //System.out.println(arrayList.toString());
        for (int i = arrayList.size()-1; i >= 0; --i) {
            if (arrayList.get(i) == GC) return true;
            if (arrayList.get(i) > GC) arrayList.remove(i);
        }

        arrayList.trimToSize();
        int arrayLength = arrayList.size();
        //System.out.println(arrayList.toString());

        int sum = 0;
        for(int i = 0; i < arrayLength; ++i) {
            sum += arrayList.get(i);
            if (sum  == GC) return true;
            if (sum > GC) break;
        }


        for (int i = 0; i < arrayLength - 1; ++i) {
            for(int j = i+1; j < arrayLength; ++j) {
                if ((arrayList.get(i) + arrayList.get(j) == GC)) return true;
            }
        }

        if (rec1(arrayList, GC)) return true;

        while (arrayList.size() > 1) {
            if (rec(arrayList, GC)) return true;
            arrayList.remove(0);
            arrayList.trimToSize();
            arrayLength = arrayList.size();
        }

        return false;
    }

    public boolean isGF(Integer[] array, int GF) {
        ArrayList<Integer> arrayList = new ArrayList<Integer>(Arrays.asList(array));
        Collections.sort(arrayList);
        //System.out.println(arrayList.toString());
        for (int i = arrayList.size()-1; i >= 0; --i) {
            if (arrayList.get(i) == GF) return true;
            if (arrayList.get(i) > GF) arrayList.remove(i);
        }

        arrayList.trimToSize();
        int arrayLength = arrayList.size();
        //System.out.println(arrayList.toString());

        int sum = 0;
        for(int i = 0; i < arrayLength; ++i) {
            sum += arrayList.get(i);
            if (sum  == GF) return true;
            if (sum > GF) break;
        }

        for (int i = 0; i < arrayLength - 1; ++i) {
            for(int j = i+1; j < arrayLength; ++j) {
                if ((arrayList.get(i) + arrayList.get(j) == GF)) return true;
            }
        }

        if (rec1(arrayList, GF)) return true;

        while (arrayList.size() > 1) {
            if (rec(arrayList, GF))            return true;

            arrayList.remove(0);
            arrayList.trimToSize();
            arrayLength = arrayList.size();
        }

        return false;
    }
}



class Parser {
    final private int BUFFER_SIZE = 1 << 16;
    private DataInputStream din;
    private byte[] buffer;
    private int bufferPointer, bytesRead;

    public Parser(InputStream in) {
        din = new DataInputStream(in);
        buffer = new byte[BUFFER_SIZE];
        bufferPointer = bytesRead =  0;
    }

    public int nextInt() {
        int ret =  0;
        boolean neg;
        try {
            byte c = read();
            while (c <= ' ')
                c = read();
            neg = c == '-';
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');

            if (neg) return -ret;
        } catch (Exception e) {}
        return ret;
    }

    private void fillBuffer() {
        try {
            bytesRead = din.read(buffer, bufferPointer =  0, BUFFER_SIZE);
        } catch (Exception e) {}
        if (bytesRead == -1) buffer[ 0] = -1;
    }

    private byte read() {
        if (bufferPointer == bytesRead) fillBuffer();
        return buffer[bufferPointer++];
    }
}
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Scanner;

class NewYearResolution2 {

	class Food {
		public int p;
		public int c;
		public int f;
	}

	public static void main(String[] args) {
		String inputFilePath = args[0];
		String outputFilePath = args[1];
		NewYearResolution2 nyr = new NewYearResolution2();
		try {
			InputStream is = new FileInputStream(inputFilePath);
			// Scanner in = new Scanner(System.in);
			Scanner in = new Scanner(is);
			OutputStream os = new FileOutputStream(outputFilePath);
			// OutputStreamWriter os = new OutputStreamWriter(System.out);
			PrintWriter pw = new PrintWriter(os);
			// Retrieve the number of test cases
			int t = in.nextInt();
			for (int k = 0; k < t; k++) {
				int gp = in.nextInt();
				int gc = in.nextInt();
				int gf = in.nextInt();
				int n = in.nextInt();
				boolean balancedFood = false;
				Food[] foodArray = new Food[n];
				// For each food check if it can satisfy the requirements alone
				// by itself
				for (int r = 0; r < n; r++) {
					Food food = nyr.new Food();
					food.p = in.nextInt();
					food.c = in.nextInt();
					food.f = in.nextInt();
					if (gp == food.p && gc == food.c && gf == food.f) {
						balancedFood = true;
						break;
					}
					foodArray[r] = food;
				}
				// If it was not able to satisfy the requirements by itself
				// We can solve it as a Subset Sum Problem which is a Dynamic
				// Programming NP-Complete problem.
				// But since we have three elements to match simultaneously, we
				// will solve it by recursion even though it's extremely slow.
				// See link for more details<br>
				// http://en.wikipedia.org/wiki/Subset_sum_problem
				if (!balancedFood) {
					balancedFood = nyr.isSubsetSum(foodArray, n, gp, gc, gf);
				}
				String balanced = "";
				if (balancedFood) {
					balanced = "yes";
				} else {
					balanced = "no";
				}
				// Print the output
				String outputString = "Case #" + (k + 1) + ": " + balanced;
				pw.println(outputString);
			}

			in.close();
			pw.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	boolean isSubsetSum(Food[] foodArray, int n, int gp, int gc, int gf) {
		// Base Cases
		if (gp == 0 && gc == 0 && gf == 0)
			return true;
		if (n == 0 && (gp != 0 || gc != 0 || gf != 0))
			return false;

		// If last element is greater than sum, then ignore it
		if (foodArray[n - 1].c > gc || foodArray[n - 1].f > gf
				|| foodArray[n - 1].p > gp)
			return isSubsetSum(foodArray, n - 1, gp, gc, gf);

		/*
		 * else, check if sum can be obtained by any of the following (a)
		 * including the last element (b) excluding the last element
		 */
		return isSubsetSum(foodArray, n - 1, gp, gc, gf)
				|| isSubsetSum(foodArray, n - 1, gp - foodArray[n - 1].p, gc
						- foodArray[n - 1].c, gf - foodArray[n - 1].f);
	}
}

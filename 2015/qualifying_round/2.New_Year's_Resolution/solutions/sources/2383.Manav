#include <iostream>
#include <stdio.h>
#include <string>
#include <ctype.h>
#include <stdlib.h>
#include <math.h>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <utility>
#include <map>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <climits>
#include <limits.h>

#define MOD 1000000007

typedef unsigned long long ull;
typedef long long LL;

using namespace std;

// A utility function to get minimum of two numbers
int minVal(int x, int y) { return (x < y)? x: y; }

// A utility function to get the middle index from corner indexes.
int getMid(int s, int e) {  return s + (e -s)/2; }

int gcd(int u, int v)
{
    return (v != 0)?gcd(v, u%v):u;
}

//Change this #define while submitting
#define GETCHAR getchar_unlocked
inline int read()
{
    int n=0;char c;
    int sign=1;
    c=GETCHAR();
    while(c!='-' && (c<48||c>57))
    {
        c=GETCHAR();
    }
    if(c=='-')sign=-1;
    while((c<48||c>57))
    {
        c=GETCHAR();
    }
    while(c>=48&&c<=57)
    {
        n=n*10+c-48;
        c=GETCHAR();
    }
    return n*sign;
}

int dp1[(1<<20)+5], dp2[(1<<20)+5], dp3[(1<<20)+5];
int main()
{
    int t;
    scanf("%d",&t);
    for(int tc=1;tc<=t;++tc)
    {
        int gp,gc,gf,n;
        scanf("%d %d %d",&gp,&gc,&gf);

        scanf("%d",&n);
        int p[25], c[25], f[25];

        int i;
        for(i=0;i<n;++i)
        {
            scanf("%d %d %d", &p[i], &c[i], &f[i]);
        }

        dp1[0] = 0;dp2[0] = 0;dp3[0] = 0;
        for(i=1;i<1<<n;++i)
        {
            int old = i & (i-1);
            int index = (int)(log(i & ~(i-1))/log(2));

            dp1[i] = dp1[old] + p[index];
            dp2[i] = dp2[old] + c[index];
            dp3[i] = dp3[old] + f[index];

            if(dp1[i]==gp && dp2[i]==gc && dp3[i] == gf)break;
        }

        cout<<"Case #"<<tc<<": ";
        if(i==1<<n)cout<<"no"<<endl;
        else cout<<"yes"<<endl;
    }
    return 0;
}

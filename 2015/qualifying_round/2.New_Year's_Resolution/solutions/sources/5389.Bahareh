# include <iostream>
# include <string>
# include <math.h>
# include <vector>

using namespace std;

vector <string> Binaries;

class Food
{
    public:
        int P;
        int C;
        int F;
        
        Food ()
        {
            ;
        }
        Food (int p, int c, int f)
        {
            P = p;
            C = c;
            F = f;
        }
};

void Dec2Bin () // Change it to calculate and store all binary numbers for i = 0 ; i <= 2 ^ 20
{
    int i, j, m, l, n, nn;
    int MAX = 1 << 20;
    char Bin[25];
    
    for (n = 0; n < MAX; n++)
    {
        nn = n;
        
        for (i = 0; i < 20; i++)
            Bin[i] = '0';
        Bin[i] = '\0';
       
       l = 19;
        i = l;
        
        while (n > 0)
        {
            m = n % 2;
            Bin[i] = m + '0';
            //cout << n << " - " << m << " - " << Bin[i] << " - " << i << endl;
            n /= 2;
            i--;
        }

        string S (Bin);
     
        Binaries.push_back(S);
        n = nn;
    }
}


int main()
{
    int i, j, k, T, N, max;
    int P, C, F, Sum_p, Sum_c, Sum_f;
    bool possible = false;
    string S;
    Food Foods[25];
    
    Dec2Bin ();
    
    cin >> T;
    for (i = 1; i <= T; i++)
    {
        cin >> P >> C >> F;
        cin >> N;
        for (j = 0; j < N; j++)
        {
            cin >> Foods[j].P >> Foods[j].C >> Foods[j].F;
        }
        max = 1 << N;
        Sum_p = Sum_c = Sum_f = 0;
        possible = false;
        for (j = 1; j < max; j++)
        {
            for (k = 19; k > (19 - N); k--)
            {
                if (Binaries[j][k] == '1')
                {
                    Sum_p += Foods[19 - k].P;
                    Sum_c += Foods[19 - k].C;
                    Sum_f += Foods[19 - k].F;
                }
            }
            if (Sum_p == P && Sum_f == F && Sum_c == C)
            {
                cout << "Case #" << i << ": yes" << endl;
                possible = true;
                break;
            }
            Sum_p = Sum_c = Sum_f = 0;
        }
        if (!possible)
            cout << "Case #" << i << ": no" << endl;
    }
    
    return 0;
}
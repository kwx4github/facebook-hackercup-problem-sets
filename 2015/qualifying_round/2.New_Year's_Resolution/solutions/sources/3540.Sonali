#include<iostream>
#include<cstdio>
#include<list>
#include<string>
#include<cstring>
#include<sstream>
#include<cctype>
#include<string.h>
#include<algorithm>
#include<cmath>
#include<stack>
#include<fstream>
#include<cstdlib>
#include<vector>
#include<map>
#include<set>
#include<utility>
#include<iomanip>
#include<queue>
#include<deque>
#include<iterator>
#include<assert.h>
#include<bitset>
#include<climits>
#include<ctime>
#include<complex>

using namespace std;

#define SET(a) memset(a,-1,sizeof(a))
#define ALL(a) a.begin(),a.end()
#define CLR(a) memset(a,0,sizeof(a))
#define PB push_back
#define PI acos(-1.0)
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c))
#define READ freopen("input.txt", "r", stdin)
#define WRITE freopen("output.txt", "w", stdout)
#define LL long long

#define S(a) scanf("%d",&a)
#define S2(a,b) scanf("%d%d",&a,&b)
#define KS printf("Case %d: ",kk++)

#define MOD 1000000007
#define MX 100010

bool vis[100001];
vector<int>adj[2001];
int h1[2001][2001];
int max(int a, int b) { return (a > b)? a : b; }
int knapSack(int x,int y,int z, int a[], int b[],int c[], int n)
{
   if (n == 0)
   {
   if( x == 0 && y==0 && z==0) 
       return 1;
       else
       return 0;
       }
       
   if (a[n-1] > x || b[n-1]>y || c[n-1]>z)
       return knapSack(x,y,z,a,b,c, n-1);
 
   // Return the maximum of two cases: (1) nth item included (2) not included
   else return max(knapSack(x-a[n-1],y-b[n-1],z-c[n-1],a,b,c, n-1),
                   knapSack(x,y,z,a,b,c, n-1)
                  );
}
int main()
{
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
#endif

freopen("out.txt" , "w" , stdout );
int tc,t=1,w,x,y,z,n,m,u,v,cnt,max_pos,min_pos,p,q,r,i,j,max,min,rem,tmp;
 int l;
	 int a[10001],b[10001],c[10001];
	cin>>tc;
	//scanf("\n");
	while(tc--)
	{
		long long int res=0;
		min=10;
		max=-1;
		i=0;
		x=0;
		min_pos=0;
		max_pos=0;
			scanf("%d%d%d",&x,&y,&z);
			scanf("%d",&l);
			for(i=0;i<l;i++)
			{
			scanf("%d%d%d",&a[i],&b[i],&c[i]);
			}
			cout <<"Case #"<<t<<": "; 
			if(knapSack(x,y,z,a,b,c,l)==1)
			cout << "yes"<<endl;
			else
			cout << "no"<<endl;
			t++;
			
	}		
	return 0;
}

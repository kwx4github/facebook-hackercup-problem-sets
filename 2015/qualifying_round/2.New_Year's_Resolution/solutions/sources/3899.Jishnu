#include <stdio.h>
#include <string.h>
#include <utility>
#include <vector>
#include <map>
using namespace std;

//int dp [20][1000][1000][1000];
//unsigned long long dp_val [1000][1000][1000];
//unsigned long long dp_set [1000][1000][1000];
map<vector<int>, bool> dp;
int T, n;
int gP, gC, gF;
int p_arr [20];
int c_arr [20];
int f_arr [20];

bool check(int currFood, int currP, int currC, int currF){
    //printf("At %d is %d %d %d\n", currFood, currP, currC, currF);
    vector<int> key_vector (3, 0);
    key_vector[0] = currP;
    key_vector[1] = currC;
    key_vector[2] = currF;
    if(currFood >= n){
        return false;
    } else if (dp.count(key_vector) == 1){
        return dp[key_vector];
    } else {
        int nextP, nextC, nextF;
        bool ans;
        nextP = currP - p_arr[currFood];
        nextC = currC - c_arr[currFood];
        nextF = currF - f_arr[currFood];
        if(nextP==0&&nextC==0&&nextF==0){
            //dp_val[currP][currC][currF] = dp_val[currP][currC][currF] | (1 << currFood);
            //dp_set[currP][currC][currF] = dp_set[currP][currC][currF] | (1 << currFood);
            dp.insert(pair<vector<int>,bool>(key_vector, true));
            return true;
        } else if (nextP<0||nextC<0||nextF<0){
            //dp_set[currP][currC][currF] = dp_set[currP][currC][currF] | (1 << currFood);
            ans = check(currFood+1, currP, currC, currF);
        } else {
            ans = check(currFood+1, currP, currC, currF) ||
                    check(currFood+1, nextP, nextC, nextF);
        }
        if(ans){
            //dp_val[currP][currC][currF] = dp_val[currP][currC][currF] | (1 << currFood);
            //dp_set[currP][currC][currF] = dp_set[currP][currC][currF] | (1 << currFood);
            dp.insert(pair<vector<int>,bool>(key_vector, true));
            return true;
        } else {
            //dp_set[currP][currC][currF] = dp_set[currP][currC][currF] | (1 << currFood);
            dp.insert(pair<vector<int>,bool>(key_vector, false));
            return false;
        }            
    }
}

int main(){
    scanf("%d\n", &T);
    for(int i=1; i<=T; i++){
        scanf("%d %d %d\n", &gP, &gC, &gF);
        scanf("%d\n", &n);
        //memset(dp_val, 0, sizeof dp_val);
        //memset(dp_set, 0, sizeof dp_set);
        dp.clear();
        for(int j=0; j<n; j++){
            scanf("%d %d %d\n", &p_arr[j], &c_arr[j], &f_arr[j]); 
        }
        if(check(0,gP,gC,gF)){
            printf("Case #%d: yes\n", i);
        } else {
            printf("Case #%d: no\n", i);
        }
    }
}


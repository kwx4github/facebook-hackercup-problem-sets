//	Problem X

const bool debug=true;

#include <iostream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cstring>
#include <cstdlib>
#include <cstdarg>
#include <utility>
#include <cassert>
#include <ctime>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <deque>
#include <queue>
#include <stack>

#define TIMES(n) for (int i=0; i<(n); ++i)
#define FOR(i,s,t) for (int (i)=(s); (i)<=(t); ++(i))
#define RESET(a) memset((a), 0, sizeof((a)))
#define P(x, ...) printf((x), ##__VA_ARGS__)
#define D(x, ...) if (debug) printf((x), ##__VA_ARGS__)
#define MP(x, y) make_pair((x), (y))

const int INF = 0x7F7F7F7F; // or (unsigned)(-1)>>1
int caseI = 0, caseD = -1;

using namespace std;

//void P(char *f, ...) {va_list v; va_start(v, f); vprintf(f, v); va_end(v);}
//void D(char *f, ...) {if (!debug) return; va_list v; va_start(v, f); vprintf(f, v); va_end(v);}


/*

Sample Input:



Sample Output:


*/

const int maxN = 1005, maxM = 1005;

typedef pair<int, int> ii;
typedef vector<vector<ii> > graph;

struct food
{
    int p, c, f;
};

bool comparefoods(food f1, food f2){
	if(f1.p != f2.p)
		return f1.p > f2.p;
	if(f1.c != f2.c)
		return f1.c > f2.c;
	return f1.f > f2.f;
}

class Qs {
	int p, c, f;
	int n;
	vector<food> foods;
	vector<food> foodsP;
	vector<food> foodsC;
	// vector<food> foodsF;
	//int e_n[maxN];

public:
	Qs() {
		
	}

	bool input() {
		foods.clear();
		foodsP.clear();
		foodsC.clear();
		scanf("%d%d%d", &p, &c, &f);
		scanf("%d", &n);
		for(int i = 0; i < n; i++){
			food f;
			scanf("%d%d%d", &f.p, &f.c, &f.f);
			foods.push_back(f);
		}
		return true;
	}

	bool checkOK_F(int posI, int remF){
		// printf("Enter checkOK_F %d %d\n", posI, remF);
		if(posI >= foodsC.size() && remF == 0)
			return true;
		if(posI >= foodsC.size())
			return false;
		bool ok = false;
		if(remF - foodsC[posI].f >= 0){
			// foodsF.push_back(foodsC[posI]);
			ok = checkOK_F(posI + 1, remF - foodsC[posI].f);
			// if(!ok)
				// foodsF.erase(foodsF.begin() + posI);
		}
		if(ok)
			return ok;
		bool ok2 = checkOK_F(posI + 1, remF);
		return ok2;
	}

	bool checkOK_C(int posI, int remC){
		// printf("foodsC.size()%d\n", (int)foodsC.size());
		// for(int i = 0; i < foodsC.size(); i++){
		// 	printf("%d %d %d\n", foodsC[i].p, foodsC[i].c, foodsC[i].f);
		// }
		// printf("Enter checkOK_C %d %d\n", posI, remC);
		if(posI >= foodsP.size() && remC == 0)
			return checkOK_F(0, f);
		if(posI >= foodsP.size())
			return false;
		bool ok = false;
		if(remC - foodsP[posI].c >= 0){
			foodsC.push_back(foodsP[posI]);
			ok = checkOK_C(posI + 1, remC - foodsP[posI].c);
			if(!ok)
				foodsC.pop_back();
		}
		if(ok)
			return ok;
		bool ok2 = checkOK_C(posI + 1, remC);
		return ok2;
	}

	bool checkOK_P(int posI, int remP){
		// for(int i = 0; i < foodsP.size(); i++){
		// 	printf("%d %d %d\n", foodsP[i].p, foodsP[i].c, foodsP[i].f);
		// }
		// printf("Enter checkOK_P %d %d\n", posI, remP);
		if(posI >= n && remP == 0)
			return checkOK_C(0, c);
		// printf("1\n");
		if(posI >= n)
			return false;
		// printf("2\n");
		bool ok = false;
		if(remP - foods[posI].p >= 0){
			foodsP.push_back(foods[posI]);
			// printf("with\n");
			ok = checkOK_P(posI + 1, remP - foods[posI].p);
			if(!ok)
				foodsP.pop_back();
		}
		// printf("without\n");
		if(ok)
			return ok;
		bool ok2 = checkOK_P(posI + 1, remP);
		return ok2;
	}

	void solve() {

		sort(foods.begin(), foods.end(), comparefoods);
		// for(int i = 0; i < n; i++){
		// 	printf("%d %d %d\n", foods[i].p, foods[i].c, foods[i].f);
		// }
		bool ok = checkOK_P(0, p);
		if(ok)
			printf("Case #%d: yes\n", caseI);
		else
			printf("Case #%d: no\n", caseI);

	}
};

void pre_process() {
	//freopen("A.in", "r", stdin);
	//freopen("A.out", "w", stdout);
	scanf("%d%*c", &caseD);
}

int main() {
	Qs *p = new Qs;
	pre_process();
	while ((++caseI|1) && caseD-- && p->input()) {
		p->solve();
		delete p;
		p = new Qs;
	}
	delete p;
	return 0;
}

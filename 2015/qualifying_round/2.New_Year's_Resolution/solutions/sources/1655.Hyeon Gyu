
f = open('input','r')
f2 = open('output.txt','w')
T = int(f.readline().replace('\n',''))

def isNeed_More_Food(Current, Goal):
    if Current[0] < Goal[0] and Current[1] < Goal[1] and Current[2] < Goal[2]: return True
    return False

def isGood_to_eat(Current, New_Food, Goal):
    if Current[0] + New_Food[0] <= Goal[0] and Current[1]+ New_Food[1] <= Goal[1] and Current[2]+ New_Food[2] <= Goal[2]: return True

def isRemainEnough(Current, Remain_Food, Goal):
    if Current[0] + Remain_Food[0] >= Goal[0] and Current[1]+ Remain_Food[1] >= Goal[1] and Current[2]+ Remain_Food[2] >= Goal[2]: return True

def get_Sum(Current, New_Food):
    Value = Current[:]
    for i in xrange(3): Value[i] += New_Food[i]
    return Value



for i in range(T): # Main Entry
    Goal = f.readline().replace('\n','').split(' ') # Get Goal
    for j in range(3): Goal[j] = int(Goal[j]) # Convert to Int
    N = int(f.readline().replace('\n','')) # Get Number of Food

    F_List = [] # Get Food Info
    for j in range(N):
        F_List.append(f.readline().replace('\n','').split(' '))
        for k in range(3): F_List[j][k] = int(F_List[j][k]) # Convert to Int
    F_List.sort()

    Total_Sum = [0,0,0] # Entire Sum of Food
    Sum_List = [] # Sum of Remaining Food
    for j in range(N): # Setting Data
        Sum_List.append([])
        for k in range(3):
            Total_Sum[k] += F_List[j][k]
            Sum_List[j].append(Total_Sum[k])
    Sum_List.reverse()
    F_List.reverse()

    # Search Tree Structure
    # [[Current_Index, Current_Sum_List]]
    Search_List = [[-1, [0,0,0]]]
    isPossible = "no\n"
    while len(Search_List) != 0: # Queue Searching
        Index = Search_List[0][0]
        Current_Sum = Search_List[0][1]

        if(Current_Sum == Goal): # find fit Method
            isPossible = "yes\n"
            break

        if isNeed_More_Food(Current_Sum, Goal) == True: # Need More Food
            for j in range(Index + 1, N):
                if isRemainEnough(Current_Sum, Sum_List[j], Goal) == True and isGood_to_eat(Current_Sum, F_List[j], Goal) == True:
                    Search_List.append([j, get_Sum(Current_Sum, F_List[j])]) # Append
        del Search_List[0] # Del Current Object

    f2.write("Case #" + str(i+1) + ": " + isPossible)

f.close()
f2.close()
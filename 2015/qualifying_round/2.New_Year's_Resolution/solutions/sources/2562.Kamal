import java.io.FileInputStream;
import java.util.Arrays;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "new.*year.*s.*resolution.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("newyear'sresolution.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NewYearsResolution solver = new NewYearsResolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class NewYearsResolution {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + (testNumber) + ": ");
        int a[] = in.parseInt1D(3);
        int n = in.nextInt();
        int b[][] = in.parseInt2D(n, 3);
        for (int i = 0;i <= (1 << n);i++) {
            int sum[] = new int[3];
            for (int j = 0;j < n;j++) {
                if ((i & (1 << j)) != 0) {
                    sum[0] += b[j][0];
                    sum[1] += b[j][1];
                    sum[2] += b[j][2];
                }
            }
            if (Arrays.equals(a, sum)) {
                out.println("yes");
                return;
            }
        }
        out.println("no");
    }
}

class InputReader {
	private BufferedReader br;
	private StringTokenizer st;
	public InputReader(InputStream in) {
		br=new BufferedReader(new InputStreamReader(in));
		try {
			st=new StringTokenizer(br.readLine());
		} catch (IOException ignored) {

		}
	}

	public boolean readLine() {
		try {
			st=new StringTokenizer(br.readLine());
		} catch (IOException e) {
			return false;
		}
		return true;
	}
	public int nextInt(){
		if(!st.hasMoreTokens()) readLine();
		return Integer.parseInt(st.nextToken());
	}

	public String next(){
		if(!st.hasMoreTokens()) readLine();
		return st.nextToken();
	}

	/**
	 * Parse 1D array from current StringTokenizer
	 */
	public int[] parseInt1D(int n){
		readLine();
		int r[]=new int[n];
		for(int i=0;i<n;i++){
			r[i]=nextInt();
		}
		return r;
	}

	public int[][] parseInt2D(int n,int m)  {
		int r[][]=new int[n][m];
		for(int i=0;i<n;i++){
			readLine();
			for(int j=0;j<m;j++){
				r[i][j]=nextInt();
			}
		}
		return r;
	}

}


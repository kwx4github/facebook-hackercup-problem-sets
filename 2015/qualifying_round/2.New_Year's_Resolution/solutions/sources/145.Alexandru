//
//  main.cpp
//  facebook_new_year_resolution
//
//  Created by Alexandru Andronache on 09/01/15.
//  Copyright (c) 2015 Alexandru Andronache. All rights reserved.
//

#include <iostream>
#include <vector>

using namespace std;

FILE *f = fopen("input.in", "r");
FILE *g = fopen("output.out", "w");

struct food
{
    food(int _p, int _c, int _f) : p(_p), c(_c), f(_f) {}
    int p, c, f;
};

int N;
int P, C, F;
int a, b, c;
int nr;

vector<food> foods;
vector<food> posible_foods;

bool remove_function(food n)
{
    return (n.p > P || n.c > C || n.f > F);
}

bool find_function(food n)
{
    if (n.p == P && n.c == C && n.f == F)
    {
        return true;
    }
    return false;
//    return (n.p == P && n.c == C && n.f == F);
}

int main(int argc, const char * argv[])
{
    fscanf(f, "%d", &N);
    for (int n = 1; n <= N; ++n)
    {
        foods.clear();
        posible_foods.clear();
        fscanf(f, "%d %d %d", &P, &C, &F);
        fscanf(f, "%d", &nr);
        for (int i = 0; i < nr; ++i)
        {
            fscanf(f, "%d %d %d", &a, &b, &c);
            foods.push_back(food(a, b, c));
        }
        
        bool found = false;
        for (int i = 0; i < foods.size(); ++i)
        {
            unsigned int t = posible_foods.size();
            for (int j = 0; j < t; ++j)
            {
                posible_foods.push_back(food(posible_foods[j].p + foods[i].p, posible_foods[j].c + foods[i].c, posible_foods[j].f + foods[i].f));
            }
            posible_foods.push_back(food(foods[i].p, foods[i].c, foods[i].f));
            remove_if(posible_foods.begin(), posible_foods.end(), remove_function);
            auto it = find_if(posible_foods.begin(), posible_foods.end(), find_function);
            if (it != posible_foods.end())
            {
                if (n != N) fprintf(g, "Case #%d: yes\n", n);
                else fprintf(g, "Case #%d: yes", n);
                found = true;
                i = foods.size();
            }
        }
        if (!found)
        {
            if (n != N) fprintf(g, "Case #%d: no\n", n);
            else fprintf(g, "Case #%d: no", n);
        }
    }
    
    
    return 0;
}

#!/usr/bin/env python3

__author__ = 'Yatharth Agarwal <yatharth999@gmail.com>'

from itertools import compress

def positiveSubsetSumMasks(A, x):
    l = len(A)

    assert 0 not in A

    if x == 0:
        yield [False] * l
    if x <= 0 or x > sum(A):
        raise StopIteration()

    sub_sum = [set() for i in range(x + 1)]
    sub_sum[0].add((False,) * l)
    p = 0

    while p < l:
        a = A[p]
        q = x
        while q >= a:
            for poss in sub_sum[q - a]:
                poss = list(poss)
                poss[p] = True
                poss = tuple(poss)

                if poss not in sub_sum[q]:
                    sub_sum[q].add(poss)

                    if q == x:
                        yield poss
            q -= 1
        p += 1


def process(foods, targets):
    food = foods[0]
    target = targets[0]

    for mask in positiveSubsetSumMasks(food, target):
        if sum(compress(foods[1], mask)) == targets[1] and sum(compress(foods[2], mask)) == targets[2]:
            return "yes"
    return "no"


def main():

    with open("real.in") as infile:
        with open("real.out", 'w') as outfile:

            no = int(infile.readline())
            for i in range(1, no+1):

                targets = [int(x) for x in infile.readline().split()]

                foods = []
                for j in range(int(infile.readline())):
                    foods.append([int(x) for x in infile.readline().split()])

                output = process(list(zip(*foods)), targets)
                outfile.write("Case #{}: {} \n".format(i, output))

if __name__ == '__main__':
    main()
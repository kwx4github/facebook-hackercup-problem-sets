import sys, copy

def main(argv):
	# read data in
	input_file_name = argv[0]
	#print(input_file_name)
	g = open(input_file_name, 'r')
	lines_ary = g.readlines()
	output_ary = []
	i = 0
	# GET THE TOTAL COUNT
	count = int(lines_ary[0])
	i += 1
	test_case_index = 0
	for test_case_index in range(count):
		t_count = int(lines_ary[i+1])
		res = process_test_case(i, t_count, lines_ary)
		if res:
			output_ary += "Case #" + str(test_case_index+1) + ": " + "yes" + "\n"
		else:
			output_ary += "Case #" + str(test_case_index+1) + ": " + "no" + "\n"
		i += t_count + 2
	
	# write data out
	o = open("output_q2.txt", 'w')
	for line in output_ary:
		o.write(line)
	o.close()

# inputs: the current index, the array of lines
# outputs: the new current index
def process_test_case(i, item_count, lines):
	totals = row_to_array(lines[i])
	def helper(x, used_so_far, item_count):
		print(str(used_so_far) + str(totals))
		if vector_comp(totals, used_so_far):
			return True 
		if item_count == 0:
			return False
		current_row = row_to_array(lines[x])
		if len(current_row) == 1 or not all_a_less_than_or_equal_to_b(used_so_far, totals):
			return False
		else:
			item_count -= 1
			return helper(x+1, vector_add(used_so_far, current_row), item_count) or helper(x+1, used_so_far, item_count) 
	return helper(i+2, [0,0,0], item_count)
		
def all_a_less_than_or_equal_to_b(a, b):
	return a[0] <= b[0] and a[1] <= b[1] and a[2] <= b[2]

def row_to_array(row):
	return list(map(lambda x: int(x), list(row.split(" "))))

def vector_add(a, b):
	assert len(a) == len(b) and len(a) == 3
	return [(a[0] + b[0]), (a[1] + b[1]), (a[2] + b[2])]

def vector_comp(a, b):
	assert len(a) == len(b) and len(a) == 3
	return a[0] == b[0] and a[1] == b[1] and a[2] == b[2] 

if __name__ == "__main__":
	main(sys.argv[1:])
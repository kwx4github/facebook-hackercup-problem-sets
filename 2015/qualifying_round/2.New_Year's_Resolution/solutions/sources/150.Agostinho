import java.io.*;
import java.math.*;
import java.util.*;
import java.util.regex.*;

public class Main {
	private static StringTokenizer tokens = new StringTokenizer("");
	private static BufferedReader in;
	private static BufferedWriter out;
	
	public static void main(String[] args) throws Exception {
        in = new BufferedReader(new InputStreamReader(System.in));
        out = new BufferedWriter(new OutputStreamWriter(System.out));
		int T = nextInt();
		for (int t = 1; t <= T; t++) {
			int gp = nextInt();
			int gc = nextInt();
			int gf = nextInt();
			int n = nextInt();
			int[] p = new int[n];
			int[] c = new int[n];
			int[] f = new int[n];
			for (int i = 0; i < n; i++) {
				p[i] = nextInt();
				c[i] = nextInt();
				f[i] = nextInt();
			}
			printfln("Case #%d: %s", t, getAns(n, gp, gc, gf, p, c, f));
		}
        out.close();
    }
	
	private static String getAns(int n, int gp, int gc, int gf, int[] p, int[] c, int[] f) {
		for (int i = 0; i < 1 << n; i++) {
			int totalP = 0;
			int totalC = 0;
			int totalF = 0;
			for (int j = 0; j < n; j++) if ((i & (1 << j)) > 0) {
				totalP += p[j];
				totalC += c[j];
				totalF += f[j];
			}
			if (totalP == gp && totalC == gc && totalF == gf) {
				return "yes";
			}
		}
		return "no";
	}
	
	private static double nextDouble() throws Exception {
		return Double.parseDouble(next());
	}
	private static int nextInt() throws Exception {
		return Integer.parseInt(next());
	}
	private static long nextLong() throws Exception {
		return Long.parseLong(next());
	}
	private static String next() throws Exception {
		fill();
		return tokens.nextToken();
	}
	private static String readLine() throws IOException {
		return in.readLine();
	}
	
	private static void fill() throws Exception {
		if (!tokens.hasMoreTokens()) {
			tokens = new StringTokenizer(in.readLine());
		}
	}
	private static void print(Object o) throws Exception {
		out.append(o.toString());
	}
	private static void printf(String format, Object... args) throws Exception {
		out.append(String.format(format, args));
	}
	private static void printfln(String format, Object... args) throws Exception {
		printf(format + "\n", args);
	}
	private static void println(Object o) throws Exception {
		out.append(o + "\n");
	}
	private static void println() throws Exception {
		out.append("\n");
	}
}
#include<cstdio>
#include<cstring>
#include<vector>
#include<map>
#include<algorithm>
using namespace std;

struct food
{
  int A,B,C;
  food(int _A, int _B, int _C): A(_A), B(_B), C(_C) {}
  bool operator<(const food &o)  const {
    if(A != o.A) return A < o.A;
    if(B != o.B) return B < o.B;
    return C < o.C;
  }
};

void add(food &op1, food &op2)
{
  op1.A += op2.A;
  op1.B += op2.B;
  op1.C += op2.C;
}

bool is_equal(food &op1, food &op2)
{
  if(op1.A != op2.A) return false;
  if(op1.B != op2.B) return false;
  if(op1.C != op2.C) return false;
  return true;
}

int main()
{
  int T, N;
  int GP, GC, GF;
  scanf("%d", &T);
  
  for(int i=1;i<T+1;++i) {
    scanf("%d%d%d", &GP, &GC, &GF);
    scanf("%d", &N);
    vector<food> fds(N, food(0,0,0));
    for(int j=0;j<N;++j) {
      scanf("%d%d%d", &fds[j].A, &fds[j].B, &fds[j].C);
    }
    bool answer = false;
    int sz = (1<<N);
    food target = food(GP, GC, GF);
    for(int k=0; k<sz; ++k) {
      food sum = food(0,0,0);
      for(int j=0;j<N;++j) {
	if(k & (1<<j))
	  add(sum, fds[j]);
      }
      if(is_equal(sum, target)) {
	answer = true;
	break;
      }
    }
    printf("Case #%d: %s\n", i, answer?"yes":"no");
  }
  return 0;
}

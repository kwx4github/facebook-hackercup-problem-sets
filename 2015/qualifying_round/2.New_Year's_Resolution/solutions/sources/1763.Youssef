#include<iostream>
#include<map>
#include<string>
#include<vector>
#include<algorithm>
#include<string.h>
#include<stdio.h>
#include<cmath>
#include<utility>
using namespace std;
struct Triplet{
	int p, c, f;
	bool isValid(){
		return (p >= 0 && c >= 0 && f >= 0);
	}
	Triplet subtract(Triplet t){
		Triplet ret;
		ret.p = p - t.p;
		ret.c = c - t.c;
		ret.f = f - t.f;
		return ret;
	}
	bool done(){
		return (f == 0 && c == 0 && p == 0);
	}
};
bool generateAllCombinations(int ind, const vector<Triplet>& foods, Triplet state){
	if(!state.isValid()) return false;
	if(state.done())
		return true;
	if(ind >= foods.size()) return false;
	return generateAllCombinations(ind + 1, foods, state.subtract(foods[ind]))
		   ||generateAllCombinations(ind + 1, foods, state);
}
int main(){
	int t, val, n;
	Triplet reader, state;
	cin >> t;
	for(int z = 1; z <= t; ++ z){
		cin >> state.p >> state.c >> state.f >> n;
		vector<Triplet> foods;
		for(int i = 0; i < n; ++ i){
			cin >> reader.p >> reader.c >> reader.f;
			foods.push_back(reader);
		}
		if(generateAllCombinations(0, foods, state))
			printf("Case #%d: yes\n", z);
		else
			printf("Case #%d: no\n", z);
	}
	return 0;
}
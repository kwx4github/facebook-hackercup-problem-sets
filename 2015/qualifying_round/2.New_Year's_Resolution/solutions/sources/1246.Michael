import itertools

def sum_foods(foods):
  return tuple(sum(x) for x in zip(*foods)) 

def filter_foods(Gp,Gc,Gf,foods):
  ret = []
  for food in foods:
   if food[0] <= Gp and food[1] <= Gc and food[2] <= Gf:
     ret.append(food)

  return ret
  

def can_get_macro(Gp,Gc,Gf, foods):
  foods = filter_foods(Gp,Gc,Gf,foods)
  consume_foods = [[(0,0,0),food] for food in foods]
  for foods_perm in itertools.product(*consume_foods):
    if sum_foods(foods_perm) == (Gp,Gc,Gf):
     return True
  return False

if __name__ == '__main__':
  T = int(raw_input())
  for i in xrange(T):
    Gp, Gc, Gf = tuple(int(x) for x in raw_input().split())
    N = int(raw_input())
    foods = []
    for j in xrange(N):
      P,C,F = tuple(int(x) for x in raw_input().split())
      foods.append((P,C,F))
    
    if can_get_macro(Gp,Gc,Gf,foods):
      print "Case #%s: yes" % (i+1)
    else:
      print "Case #%s: no" % (i+1)

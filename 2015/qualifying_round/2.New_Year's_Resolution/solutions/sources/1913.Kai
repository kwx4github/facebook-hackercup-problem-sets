/**
 * User: kh
 * Date: 09.01.15
 * Time: 11:06
 */

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class ProblemSolver2
{
    public static void main(String[] args) throws IOException
    {
        if(args.length != 1)
        {
            printUsage();
            return;
        }

        ArrayList<String> inputData = null;

        File output = new File("output2.txt");
        FileWriter writer = new FileWriter(output);

        File in = new File(args[0]);
        BufferedReader rd = new BufferedReader(new FileReader(in));
        String line;
        while((line = rd.readLine()) != null)
        {
            if(inputData == null)
            {
                inputData = new ArrayList<String>();
            }
            inputData.add(line);
        }
        List<String> outputData = handleInputData(inputData);
        for(String outputLine : outputData)
        {
            writer.append(outputLine);
            writer.flush();
        }

        rd.close();
        writer.close();

    }

    private static List<String> handleInputData(ArrayList<String> inputData)
    {
        ArrayList<String> ret = new ArrayList<String>();
        List<Problem> problems = createProblemList(inputData);
        for(int i = 0; i < problems.size(); i++)
        {
           String yesNo = "no";
           if(problems.get(i).isSolvable())
           {
               yesNo = "yes";
           }
           ret.add("Case #" + (i+1) + ": " + yesNo + "\n");
        }
        return ret;
    }

    private static List<Problem> createProblemList(ArrayList<String> inputData)
    {
        ArrayList<Problem> problems = new ArrayList<Problem>();
        for(int i = 1; i < inputData.size();)
        {
            Food goal = new Food(inputData.get(i));
            int numberOfMeals = Integer.parseInt(inputData.get(i + 1));
            int firstFoodIdx = i + 2;
            ArrayList<Food> foodList = new ArrayList<Food>();
            for(int j = firstFoodIdx; j < firstFoodIdx+numberOfMeals; j++)
            {
                foodList.add(new Food(inputData.get(j)));
            }
            Problem problem = new Problem();
            problem.foodList = foodList;
            problem.goal = goal;
            problems.add(problem);

            i = firstFoodIdx + numberOfMeals;
        }
        return problems;
    }

    private static void printUsage()
    {
        System.out.println("Usage: ProblemSolverMaster <INPUT_FILE_NAME>");
    }


    public static class Food
    {
        int protein;
        int carbohydrate;
        int fat;


        public Food(String foodString)
        {
            String[] pcf = foodString.split(" ");
            protein = Integer.parseInt(pcf[0]);
            carbohydrate = Integer.parseInt(pcf[1]);
            fat = Integer.parseInt(pcf[2]);
        }
    }

    public static class Meal
    {
        List<Food> foods;

        public int fat()
        {
            int fat = 0;
            for(Food food : foods)
            {
                fat += food.fat;
            }
            return fat;
        }

        public int carbohydrate()
        {
            int carbohydrate = 0;
            for(Food food : foods)
            {
                carbohydrate += food.carbohydrate;
            }
            return carbohydrate;
        }

        public int protein()
        {
            int protein = 0;
            for(Food food : foods)
            {
                protein += food.protein;
            }
            return protein;
        }

        public boolean matches(Food goal)
        {
            return this.fat() == goal.fat && this.carbohydrate() == goal.carbohydrate && this.protein() == goal.protein;
        }
    }

    public static class Problem
    {
        Food goal;
        List<Food> foodList;

        public boolean isSolvable()
        {
            List<Meal> allMeals = allMeals(foodList);
            for(Meal meal : allMeals)
            {
                if(meal.matches(goal))
                {
                    return true;
                }
            }
            return false;
        }

        private List<Meal> allMeals(List<Food> foodList)
        {
            ArrayList<Meal> ret = new ArrayList<Meal>();
            int allMasks = (1 << foodList.size());
            for(int i = 1; i < allMasks; i++)
            {
                Meal meal = new Meal();
                meal.foods = new ArrayList<Food>();
                for(int j = 0; j < foodList.size(); j++)
                {
                    if((i & (1 << j)) > 0)
                    {
                        meal.foods.add(foodList.get(j));
                    }
                }
                ret.add(meal);
            }
            return ret;
        }

    }
}

import scala.collection.GenIterable
import scala.io.{Source, BufferedSource}

object App2 {

  class Task(target: Vector[Int], available: Set[Vector[Int]]) {
    override def toString = {
      s"Task($target$available)"
    }

    def checkSet(x: Set[Vector[Int]]) = {
      x.fold(Vector(0,0,0))(add) == target
    }

    def add (a: Vector[Int], b: Vector[Int]): Vector[Int] = {
      a.zip(b).map(x=>x._1+x._2)
    }

    def canComply: Boolean = {
      available.subsets.exists(x=>checkSet(x))
    }
  }

  def parseTask(number: Int, strings: Iterator[String]): (Int, Task) = {
    val target = strings.next().split(" ").map(_.toInt).toVector
    val numComps = strings.next().toInt
    val available = strings.take(numComps).map(_.split(" ").map(_.toInt).toVector).toSet
    (number, new Task(target, available))
  }

  def main(args: Array[String]) {
    val file: BufferedSource = Source.fromFile("task2.txt")
    val src = file.getLines()
    val n = Integer.parseInt(src.next())
    val tasks = (1 to n).map(n => parseTask(n, src))
    val start = System.currentTimeMillis()
    println(tasks.par.map(x=>(x._1, x._2.canComply)).map(x=>{s"Case #${x._1}: ${if(x._2) "yes" else "no"}"}).mkString("\n"))
    println(System.currentTimeMillis() - start)
  }
}

#!/usr/bin/ruby
# require 'matrix'
# require 'set'

class Object
  def in?(container)
    container.include?(self)
  end
end

class Array
  def clip(n = 1)
    take size - n
  end

  def sum
    inject(:+)
  end
end

class IO
  def rl
    readline.chomp
  end

  def read_integer
    rl.to_i
  end

  def read_float
    rl.to_f
  end

  def read_array
    rl.split ' '
  end

  def read_array_integers
    read_array.map(&:to_i)
  end

  def read_array_floats
    read_array.map(&:to_f)
  end

  def read_matrix(rows, cols)
    lines = 1.upto(rows).map do |i|
      read_array_integers
    end

    Matrix.build(rows, cols) do |row, col|
      lines[row][col]
    end
  end
end

class FacebookHackerCupSolver
  def solve
    1.upto(STDIN.read_integer) do |test|
      STDOUT << "Case ##{test}: #{solve_test}\n"
    end
  end

  def solve_test
    target_p, target_c, target_f = STDIN.read_array_integers
    result = false

    foods = 1.upto(STDIN.read_integer).map do
      food = STDIN.read_array_integers

      food if food[0] <= target_p && food[1] <= target_c && food[2] <= target_f
    end.compact

    1.upto(foods.size).each do |n|
      break if result
      foods.combination(n).each do |combination|
        sum = combination.reduce([0, 0, 0]) do |sum, food|
          sum[0] += food[0]
          sum[1] += food[1]
          sum[2] += food[2]

          sum
        end

        result = true if sum[0] == target_p && sum[1] == target_c && sum[2] == target_f
        break if result
      end
    end

    result ? 'yes' : 'no'
  end
end

FacebookHackerCupSolver.new.solve

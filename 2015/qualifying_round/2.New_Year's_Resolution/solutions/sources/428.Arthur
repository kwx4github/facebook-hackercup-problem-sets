#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 20;

int gp, gc, gf;
int n;
int p[N];
int c[N];
int f[N];

inline bool read() {
	if (scanf("%d%d%d", &gp, &gc, &gf) != 3)
		return false;
	assert(scanf("%d", &n) == 1);
	forn(i, n) {
		assert(scanf("%d%d%d", &p[i], &c[i], &f[i]) == 3);	
	}
    return true;
}

inline void solve(int test) {
	printf("Case #%d: ", test + 1);
	bool ok = false;
	forn(mask, 1 << n) {
		int cp = 0, cc = 0, cf = 0;
		forn(i, n) {
			if ((mask & (1 << i)) == 0)
				continue;
			cp += p[i];
			cc += c[i];
			cf += f[i];
		}
		if (cp == gp && cc == gc && cf == gf) {
			ok = true;
			break;
		}
	}
	puts(ok ? "yes" : "no");
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
#endif

    cout << setprecision(25) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));
	int n;
	assert(scanf("%d", &n) == 1);
	forn(i, n) {
	    assert(read());
    	solve(i);
    }

#ifdef SU2_PROJ
    cerr << "TIME: " << clock() << endl;
#endif

    return 0;
}
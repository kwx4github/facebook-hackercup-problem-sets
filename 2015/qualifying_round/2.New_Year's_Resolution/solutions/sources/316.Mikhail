#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <numeric>

#define mp make_pair
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;

template<class T>
bool uin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool uax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

struct TTriple {
    int a, b, c;

    TTriple(int a = 0, int b = 0, int c = 0)
        : a(a)
        , b(b)
        , c(c)
    {
    }

    void read() {
        cin >> a >> b >> c;
    }

    TTriple operator+(const TTriple &t) const {
        return TTriple(a + t.a, b + t.b, c + t.c);
    }

    bool operator==(const TTriple &t) const {
        if (a * t.b != b * t.a) return false;
        if (a * t.c != c * t.a) return false;
        if (b * t.c != c * t.b) return false;
        return true;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    int T;
    cin >> T;
    for1(tt, T) {
        TTriple g;
        g.read();
        int N;
        cin >> N;
        vector<TTriple> t(N);
        forn(i, N) t[i].read();
        bool ok = false;
        forn(m, (1 << N)) {
            if (!m) continue;
            TTriple s;
            forn(i, N) {
                if ((m >> i) & 1) s = s + t[i];
            }
            if (s == g) ok = true;
        }
        cout << "Case #" << tt << ": " << (ok ? "yes" : "no") << '\n';
    }

#ifdef LOCAL_DEFINE
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}

/**
 * Created by mikey on 9/01/15.
 */

import java.io.File

import scala.collection.mutable.ListBuffer
import scala.io.Source

object NewYearResolution extends App {

  var caseCount = 1
  val lines = Source.fromFile(new File("src/main/resources/new_years_resolution.txt")).getLines.drop(1)
  while (lines.hasNext) {
    val tLine = lines.next.split(" ")
    val target = (tLine(0).toInt, tLine(1).toInt, tLine(2).toInt)
    val n = lines.next.toInt
    val inputBuffer = new ListBuffer[(Int, Int, Int)]
    (1 to n).foreach { _ =>
      val iLine = lines.next.split(" ")
      inputBuffer += ((iLine(0).toInt, iLine(1).toInt, iLine(2).toInt))
    }
    val input = inputBuffer.toList
    val result = new ListBuffer[List[(Int, Int, Int)]]
    subSum(result, input, target)
    val yesNoResult = if (!result.isEmpty) "yes" else "no"
    println(s"Case #$caseCount: $yesNoResult")
    caseCount += 1
  }

  def subSum(result: ListBuffer[List[(Int, Int, Int)]], numbers: List[(Int, Int, Int)], target: (Int, Int, Int), partial: List[(Int, Int, Int)] = List()): Unit = {
    val sum = partial.foldLeft((0, 0, 0))((x, y) => (x._1 + y._1, x._2 + y._2, x._3 + y._3))
    if (sum == target) result += partial
    else if (sum._1 <= target._1 && sum._2 <= target._2 && sum._3 <= target._3) {
      for (i <- 0 until numbers.size) {
        val n = numbers(i)
        val remaining = numbers.drop(i + 1)
        val newPartial = partial :+ n
        subSum(result, remaining, target, newPartial)
      }
    }
  }
}

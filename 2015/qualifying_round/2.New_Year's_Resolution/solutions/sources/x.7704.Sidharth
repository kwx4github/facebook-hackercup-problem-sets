//
//  P2.cpp
//  HackerCup
//
//  Created by Sid on 11/01/15.
//  Copyright (c) 2015 whackylabs. All rights reserved.
//

#include <cassert>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>

static const char *kFileIn = "/Volumes/DrivePlusPlus/Languages/c-cpp/Projects/fb_hack_cup/2015/HackerCup/HackerCup/2015/P2/new_years_resolution.txt";
static const char *kFileOut = "/Volumes/DrivePlusPlus/Languages/c-cpp/Projects/fb_hack_cup/2015/HackerCup/HackerCup/2015/P2/out.txt";

namespace fb2015 {

    int ReadInt(std::ifstream &fin)
    {
        std::string word;
        fin >> word;
        return std::stoi(word);
    }

    struct Nutrients {
        int protien;
        int carb;
        int fat;
        
        Nutrients(int p = 0, int c = 0, int f = 0) :
        protien(p),
        carb(c),
        fat(f)
        {}
        
        Nutrients(std::ifstream &fin)
        {
            protien = ReadInt(fin);
            carb = ReadInt(fin);
            fat = ReadInt(fin);
        }
    };
//
//    Nutrients operator+(const Nutrients &a, const Nutrients &b)
//    {
//        return Nutrients(a.protien+b.protien,
//                    a.carb+b.carb,
//                    a.fat+b.fat);
//    }
//    
//    Nutrients operator-(const Nutrients &a, const Nutrients &b)
//    {
//        return Nutrients(a.protien-b.protien,
//                    a.carb-b.carb,
//                    a.fat-b.fat);
//    }
//
//    bool operator<(const Nutrients &a, const Nutrients &b)
//    {
//        return (a.protien < b.protien &&
//                a.carb < b.carb &&
//                a.fat < b.fat);
//    }
//    
//    bool operator==(const Nutrients &a, const Nutrients &b)
//    {
//        return (a.protien == b.protien &&
//                a.carb == b.carb &&
//                a.fat == b.fat);
//    }
//    
//    bool operator!=(const Nutrients &a, const Nutrients &b)
//    {
//        return !(a==b);
//    }
//    
//    bool operator>(const Nutrients &a, const Nutrients &b)
//    {
//        return !(a<b) && a!=b;
//    }
//    
//    bool operator>=(const Nutrients &a, const Nutrients &b)
//    {
//        return ((a > b) || (a == b));
//    }
//
//    bool operator<=(const Nutrients &a, const Nutrients &b)
//    {
//        return ((a < b) || (a == b));
//    }
//
//    
//    std::ostream &operator<<(std::ostream &os, const Nutrients &n)
//    {
//        os << "{ " << n.protien << ", " << n.carb << ", " << n.fat << "}";
//        return os;
//    }
    
    
//    struct Food {
//        Nutrients nutrients;
//        bool consumed;
//        
//        Food(const Nutrients &n, bool c = false) :
//        nutrients(n),
//        consumed(c)
//        {}
//    };
    
//    std::ostream &operator<<(std::ostream &os, const Food &f)
//    {
//        os << "{ " << f.nutrients << ", " << std::boolalpha << f.consumed << "}";
//        return os;
//    }
//
//    void Consume(Nutrients target, std::vector<Food> & items, int nutrient)
//    {
//        
//    }
    
    
    int Sum(const std::vector<int> indexes, const std::vector<int> &num)
    {
        int s = 0;
        for (std::vector<int>::const_iterator it = indexes.begin(); it != indexes.end(); ++it) {
            s += num[*it];
        }
        return s;
    }
    
    void Combinations(const int index,
                      const std::vector<int> &group,
                      const std::vector<int> &nums,
                      const int target,
                      std::vector<std::vector<int>> &final)
    {
        for (int i = index; i < nums.size(); ++i) {
            std::vector<int> subGroup = group;
            subGroup.push_back(i);

            int sum = Sum(subGroup, nums);
            if (sum == target) {
                final.push_back(subGroup);
            } else if (sum > target) {
                return;
            }
            Combinations(i+1, subGroup, nums, target, final);
        }
    }

    std::vector<std::vector<int>> Combinations(const std::vector<int> &nums, const int target)
    {
        std::vector<std::vector<int>> final;
        
        for (int i = 0; i < nums.size(); ++i) {
            std::vector<int> group;
            group.push_back(i);

            int sum = Sum(group, nums);
            if (sum == target) {
                final.push_back(group);
            } else if (sum > target) {
                break;
            }
            Combinations(i + 1, group, nums, target, final);
        }
        
        return final;
    }

    void PrintList(const std::vector<std::vector<int>> &final)
    {
        for (std::vector<std::vector<int>>::const_iterator it = final.begin(); it != final.end(); ++it) {
            std::copy(it->begin(), it->end(), std::ostream_iterator<int>(std::cout, " "));
            std::cout << std::endl;
        }
    }

    bool ProcessCase(Nutrients target, const std::vector<Nutrients> & items)
    {
        
        std::vector<int> protienVals;
        std::vector<int> carbVals;
        std::vector<int> fatVals;
       
        for (std::vector<Nutrients>::const_iterator it = items.begin(); it != items.end(); ++it) {
            protienVals.push_back(it->protien);
            carbVals.push_back(it->carb);
            fatVals.push_back(it->fat);
        }
        
        std::vector<std::vector<int>> protienIndexes = Combinations(protienVals, target.protien);
        std::vector<std::vector<int>> carbIndexes = Combinations(carbVals, target.carb);
        std::vector<std::vector<int>> fatIndexes = Combinations(fatVals, target.fat);
        
        for (std::vector<std::vector<int>>::iterator pIt = protienIndexes.begin(); pIt != protienIndexes.end(); ++pIt) {
            for (std::vector<std::vector<int>>::iterator cIt = carbIndexes.begin(); cIt != carbIndexes.end(); ++cIt) {
                for (std::vector<std::vector<int>>::iterator fIt = fatIndexes.begin(); fIt != fatIndexes.end(); ++fIt) {
                    if ((*pIt == *cIt) && (*cIt == *fIt)) {
                        return true;
                    }
                }
            }
        }
        
        return false;
    }

    
    int P2_main(int argc, const char * argv[])
    {
        
        std::ifstream fin(kFileIn);
        assert(fin.is_open());
        
        std::ofstream fout(kFileOut);
        assert(fout.is_open());
        
        int cases = ReadInt(fin);
        for (int c = 0; c < cases; ++c) {
            Nutrients target(fin);
            int totalItems = ReadInt(fin);
            std::vector<Nutrients> items;
            for (int i = 0; i < totalItems; ++i) {
                items.push_back(Nutrients(fin));
            }
            
            fout << "Case #" << c+1 << ": " << (ProcessCase(target, items)?"yes":"no") << std::endl;
        }
        
        return 0;
    }
}
#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <utility>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <climits>

using namespace std;

struct Food {
	int gp, gc, gf;
	Food(): gp(0), gc(0), gf(0) {}
	Food(int p, int c, int f) : gp(p), gc(c), gf(f) {}
	Food operator+(const Food f) const {
		return Food(gp + f.gp, gc + f.gc, gf + f.gf);
	}
	Food operator+=(const Food f) {
		gp += f.gp;
		gc += f.gc;
		gf += f.gf;
	}
	bool operator==(const Food f) const {
		return (gp == f.gp && gc == f.gc && gf == f.gf);
	}
};

bool compFood(const Food &a, const Food &b){
	return (a.gp == b.gp && ((a.gc == b.gc && a.gf < b.gf) || a.gc < b.gc)) || a.gp < b.gp;
}

Food food[20], foodFinal;

int t, n;

int main(){
	cin >> t;

	for(int ti = 1; ti <= t; ti++){
		
		cin >> foodFinal.gp >> foodFinal.gc >> foodFinal.gf;
		cin >> n;
		
		for(int ni = 0; ni < n; ni++){
			cin >> food[ni].gp >> food[ni].gc >> food[ni].gf;
		}
		sort(food, food+n, compFood);
		// checked!
		// for(int ni = 0; ni < n; ni++){
		// 	cout << "(" << food[ni].gp << " " <<  food[ni].gc << " " <<  food[ni].gf << ")\n";
		// }
		
		bool win = false;
		// cout << "iVecMax + 1 = " << (1 << n) << "\n";
		for(int iVec = 0; iVec < (1 << n); iVec++){
			Food foodSum(0,0,0);
			for(int ni = 0; ni < n; ni++){
				// cout << "(1 << ni) = " << (1 << ni) << "\n";
				// cout << "condition: " << ((1 << ni) & iVec) << "\n";
				// cout << "food[1 << ni] = " << food[1 << ni].gp << " " << food[1 << ni].gc << " " << food[1 << ni].gf << "\n";
				if((1 << ni) & iVec){
					foodSum += food[ni];
					// cout << "food += OK\n";
				}
				if(foodSum.gp >= 1000000000 || foodSum.gc >= 1000000000 || foodSum.gf >= 1000000000){
					break;
				}
				// cout << "foodSum = " << foodSum.gp << ", " << foodSum.gc << ", " << foodSum.gf << "\n";
			}
			if(foodFinal == foodSum){
				// cout << "win <- true\n";
				win = true;
				break;
			}
		}
		
		cout << "Case #" << ti << ": ";
		if(win){
			cout << "yes\n";
		}
		else {
			cout << "no\n";
		}
	}
	return 0;
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        Program obj = new Program();

        StreamReader reader = new StreamReader("new_years_resolution.txt");
        StreamWriter writer = File.CreateText("new_years_resolution_op.txt");

        int T = Int32.Parse(reader.ReadLine());

        for (int i = 1; i <= T; i++)
        {
            string[] GpGcGf = reader.ReadLine().Split(' ');
            int Gp = Int32.Parse(GpGcGf[0]);
            int Gc = Int32.Parse(GpGcGf[1]);
            int Gf = Int32.Parse(GpGcGf[2]);

            int N = Int32.Parse(reader.ReadLine());

            List<int[]> food = new List<int[]>();

            for (int ii = 0; ii < N; ii++)
            {
                GpGcGf = reader.ReadLine().Split(' ');
                int[] tmp = new int[3];
                tmp[0] = Int32.Parse(GpGcGf[0]);
                tmp[1] = Int32.Parse(GpGcGf[1]);
                tmp[2] = Int32.Parse(GpGcGf[2]);
                food.Add(tmp);
            }

            String ans = obj.Solve(Gp,Gc,Gf,N,food);

            writer.WriteLine("Case #" + i + ": " + ans);
        }

        reader.Close();
        writer.Close();
    }

    string Solve(int Gp, int Gc, int Gf, int N, List<int[]> food)
    {
        int tmpSumP = 0, tmpSumC = 0, tmpSumF = 0;

        for (int i = 0; i < food.Count; i++)
        {
            if (food[i][0] > Gp || food[i][1] > Gc || food[i][2] > Gf)
            {
                food.RemoveAt(i);
                i--;
                continue;
            }
            tmpSumP += food[i][0];
            tmpSumC += food[i][1];
            tmpSumF += food[i][2];
        }

        if (tmpSumP < Gp || tmpSumC < Gc || tmpSumF < Gf)
        {
            return "no";
        }
        if (tmpSumP == Gp && tmpSumC == Gc && tmpSumF == Gf)
        {
            return "yes";
        }

        tmpSumP = 0;
        tmpSumC = 0;
        tmpSumF = 0;

        List<List<int>> combOfPossibleComb = new List<List<int>>();
        List<int> stk = new List<int>();

        //int pop = 1;
        for (int j = 0; j < food.Count; j++)
        {
            stk.Add(j);
            tmpSumP += food[j][0];

            if (tmpSumP > Gp)
            {
                tmpSumP -= food[stk[stk.Count - 1]][0];
                stk.RemoveAt(stk.Count - 1);
            }
            else if(tmpSumP==Gp)
            {
                List<int> tmp = new List<int>(stk);
                combOfPossibleComb.Add(tmp);
                tmpSumP -= food[stk[stk.Count - 1]][0];
                j = stk[stk.Count - 1];
                stk.RemoveAt(stk.Count - 1);

                /*for (int i = pop; i > 0; i--)
                {
                    tmpSumP -= food[stk[stk.Count - 1]][0];
                    j = stk[stk.Count - 1] + 1;
                    stk.RemoveAt(stk.Count - 1);
                    if (stk.Count == 0)
                    {
                        j = pop;
                        break;
                    }
                }*/
            }

            while (j+1 >= food.Count && stk.Count>0)
            {
                tmpSumP -= food[stk[stk.Count - 1]][0];
                j = stk[stk.Count - 1];
                stk.RemoveAt(stk.Count - 1);
                /*pop++;
                j = 0;
                stk = new List<int>();
                if (pop == food.Count)
                {
                    break;
                }*/
            }
        }


        if (combOfPossibleComb.Count == 0)
        {
            return "no";
        }

        for (int i = 0; i < combOfPossibleComb.Count; i++)
        {
            tmpSumC = 0;
            tmpSumF = 0;
            for (int j = 0; j < combOfPossibleComb[i].Count; j++)
            {
                tmpSumC += food[combOfPossibleComb[i][j]][1];
                tmpSumF += food[combOfPossibleComb[i][j]][2];
            }
            if (tmpSumC == Gc && tmpSumF == Gf)
            {
                return "yes";
            }
        }

        return "no";
    }
}
import java.io.File;
import java.util.HashMap;
import java.util.Scanner;
import java.util.TreeSet;
 
public class NewYear {
    public static void main(String args[]) {
        new NewYear().solveAll();
    }
     
    public void solveAll() {
    	Scanner sc = new Scanner(System.in);
		int T = sc.nextInt(); sc.nextLine();
		
		for(int i = 0; i < T; i++) {
			int Gp = sc.nextInt();
			int Gc = sc.nextInt();
			int Gf = sc.nextInt();
			
			sc.nextLine();
			
			int N = sc.nextInt(); sc.nextLine();
			int[][]food = new int[N][];
			for(int j = 0; j < N; j++) {
				food[j] = new int[3];
				food[j][0] = sc.nextInt();
				food[j][1] = sc.nextInt();
				food[j][2] = sc.nextInt();
				sc.nextLine();
			}
			
			System.out.println("Case #" + (i + 1) + ":" + (solve(Gp, Gc, Gf, food) ? "yes" : "no"));
		}
    }
    
    private boolean solve(int gP, int gC, int gF, int[][]food) {
    	return solveRec(gP, gC, gF, food, 0, 0, 0, 0);
    }
    
    private boolean solveRec(int gP, int gC, int gF, int[][]food, int index, int aP, int aC, int aF) {
    	if(index == food.length) return false;
    	
    	if(aP + food[index][0] == gP && aC + food[index][1] == gC && aF + food[index][2] == gF) {
    		return true;
    	}
    	
    	boolean with = false;
    	if(aP + food[index][0] <= gP && aC + food[index][1] <= gC && aF + food[index][2] <= gF) {
    		with = solveRec(gP, gC, gF, food, index + 1, aP + food[index][0], aC + food[index][1], aF + food[index][2]);
    	}
    	
    	return with | solveRec(gP, gC, gF, food, index + 1, aP, aC, aF);
    }
}
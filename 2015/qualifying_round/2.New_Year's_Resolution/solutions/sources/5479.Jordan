#include<cstdio>
#include<iostream>
#include<queue>
#include<algorithm>

using namespace std;

typedef struct {
	int p;
	int c;
	int f;
} nut;

typedef struct {
	int p;
	int c;
	int f;
	long used;
} path;

bool cf(nut nut1, nut nut2) {
	if (nut1.p == nut2.p) {
		if (nut1.c == nut2.c) {
			return nut1.f < nut2.f;
		}
		return nut1.c < nut2.c;
	}
	return nut1.p < nut2.p;
}

int main() {
	int T;
	scanf("%d", &T);
	for (int i=1;i<=T;++i) {
		int x, y, z;
		scanf("%d %d %d", &x, &y, &z);
		int N;
		scanf("%d", &N);
		nut nutri[N];
		int sumP = 0, sumC = 0, sumF = 0;;
		for (int j=0;j<N;++j) {
			int a, b, c;
			scanf("%d %d %d", &a, &b, &c);
			nutri[j].p = a;
			nutri[j].c = b;
			nutri[j].f = c;
			sumP += a;
			sumC += b;
			sumF += c;
		}
		bool answer = true;
		if ((sumP < x) || (sumF < y) || (sumC < z)) {
			answer = false;
		}
		if (answer) {
			answer = false;
			sort(nutri, nutri + N, cf);
			path first;
			first.p = x;
			first.c = y;
			first.f = z;
			first.used = 0;

			queue<path> q;
			q.push(first);
			while((!answer) && (!q.empty())) {
				path p = q.front();
				q.pop();
				int j = 1;
				while ((!answer) && (j<=N)) {
					if (((p.used & (1 << j))==0) && 
						(((p.p - nutri[j-1].p >= 10) &&
						  (p.c - nutri[j-1].c >= 10) &&
						  (p.f - nutri[j-1].f >= 10)) || 
						 ((p.p - nutri[j-1].p == 0) &&
						  (p.c - nutri[j-1].c == 0) &&
						  (p.f - nutri[j-1].f == 0)))) {
					  	if ((p.p - nutri[j-1].p == 0) &&
						  (p.c - nutri[j-1].c == 0) &&
						  (p.f - nutri[j-1].f == 0)) {
					  		answer = true;
					  	} else {
							path newPath;
							newPath.p = p.p - nutri[j-1].p;
							newPath.f = p.f - nutri[j-1].f;
							newPath.c = p.c - nutri[j-1].c;
							newPath.used = p.used ^ (1 << j);
							q.push(newPath);
						}
					}
					++j;
				}
			}
		}

		if (answer) {
			printf("Case #%d: yes\n", i);
		} else {
			printf("Case #%d: no\n", i);
		}
	}
	return 0;
}
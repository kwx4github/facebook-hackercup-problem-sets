#include <iostream>
#include <utility>
#include <algorithm>
#include <vector>

using namespace std;


bool CanEat(int Gp, int Gc, int Gf, const vector<int>& P, const vector<int>& C, const vector<int>& F)
{
    int bound = 1 << P.size();

    for (int i = 0; i < bound; ++i)
    {
        int tryGp = 0;
        int tryGc = 0;
        int tryGf = 0;

        int index = 0;
        int mask = i;
        while (mask)
        {
            if (mask & 1)
            {
                tryGp += P[index];
                tryGc += C[index];
                tryGf += F[index];
            }

            mask >>= 1;
            ++index;
        }

        if ((tryGp == Gp) && (tryGc == Gc) && (tryGf == Gf))
        {
            return true;
        }
    }

    return false;
}


int main()
{
    int T;
    cin >> T;

    for (int c = 1; c <= T; ++c)
    {
        int Gp, Gc, Gf;
        cin >> Gp >> Gc >> Gf;

        int N;
        cin >> N;

        vector<int> P(N, 0);
        vector<int> C(N, 0);
        vector<int> F(N, 0);

        for (int i = 0; i < N; ++i)
        {
            cin >> P[i] >> C[i] >> F[i];
        }

        bool answer = CanEat(Gp, Gc, Gf, P, C, F);

        cout << "Case #" << c << ": " << (answer ? "yes" : "no") << endl;
    }

    return 0;
}

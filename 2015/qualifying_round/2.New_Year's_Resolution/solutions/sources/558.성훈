# We are brothers
inputfile = open(__file__.replace('.py', '.txt'), 'r')
outputfile = open(__file__.replace('.py', '_result.txt'), 'w')

def readline():
  global inputfile
  return inputfile.readline().strip()

def get_locations(max_cases):
  arr = []
  n = 1
  while n < max_cases:
    arr.append(n)
    n = n << 1
  return arr

def eat(score, food):
  score[0] += food[0]
  score[1] += food[1]
  score[2] += food[2]
  return score

def is_overeat(score, want_score):
  if score[0] > want_score[0] or score[1] > want_score[1] or score[2] > want_score[2]:
    return True
  else:
    return False

case_length = int(readline())
for case_num in xrange(case_length):
  # score = [ int, int, int ]
  want_score = map(lambda x: int(x), readline().split(' '))
  is_found = 'no'
  food_n = int(readline())
  food = []
  for i in xrange(food_n):
    food.append(map(lambda x: int(x), readline().split(' ')))
  max_cases = pow(2, food_n)
  locations = get_locations(max_cases)

  # loop all case
  for i in xrange(max_cases):
    cur_score = [0, 0, 0]

    # loop all food
    for location_key, location in enumerate(locations):

      # eat food
      if location & i != 0:
        cur_score = eat(cur_score, food[location_key])

      if is_overeat(cur_score, want_score):
        break


    if cur_score == want_score:
      is_found = 'yes'
      break;

  print_string = 'Case #%d: %s' % ((case_num +1), is_found)
  print print_string
  outputfile.write(print_string + "\n")

inputfile.close()
outputfile.close()
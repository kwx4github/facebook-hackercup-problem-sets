package fb.hacker_cup;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;

public class NewYearsResolution {
	
	public static void main(String[] args) throws FileNotFoundException {
		
		Scanner in = new Scanner(new File("new_years_resolution.txt"));
		PrintWriter out = new PrintWriter(new File("nyr_real_solution.txt"));
		int T = in.nextInt();
		
		for(int t=0;t<T;t++){
			
			int pt = in.nextInt();
			int ct = in.nextInt();
			int ft = in.nextInt();
			int n = in.nextInt();
			
			
			
			ArrayList<Meal> meals = new ArrayList<>();
			for (int i = 0;i<n;i++){
				int pn = in.nextInt();
				int cn = in.nextInt();
				int fn = in.nextInt();
				
				meals.add(new Meal(pn,cn,fn));
			}
			
			int firstCount = n/2;

			HashSet<Meal> firstSet = getAllPossibilities(meals.subList(0, firstCount));
			HashSet<Meal> secondSet = getAllPossibilities(meals.subList(firstCount, meals.size()));
			boolean exists = false;
			for(Meal current :firstSet){
				Meal lookingFor = new Meal(pt-current.p, ct-current.c,ft-current.f);
				if(secondSet.contains(lookingFor)){
					exists = true;
					break;
				}
			}
			
			if(exists){
				out.println(String.format("Case %d: Yes",(t+1)));
				continue;
			}

			out.println(String.format("Case %d: No",(t+1)));
			
		}
		in.close();
		out.close();
	}
	
	private static HashSet<Meal> getAllPossibilities(List<Meal> subList) {
		int t= 1<< subList.size();
		HashSet<Meal> result = new HashSet<>();
		for (int i = 0;i<t;i++){
			int p = 0;
			int c = 0;
			int f = 0;
			for (int bit = 0;bit < subList.size();bit++){
				int isOne = i & (1 << bit);
				if(isOne == 0){
					continue;
				}
				Meal current = subList.get(subList.size()-1 - bit);
				p+=current.p;
				c+=current.c;
				f+=current.f;
			}
			result.add(new Meal(p, c, f));
		}
		return result;
	}

	static class Meal{
		int p;
		int c;
		int f;
		public Meal(int p, int c, int f) {
			super();
			this.p = p;
			this.c = c;
			this.f = f;
		}
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + c;
			result = prime * result + f;
			result = prime * result + p;
			return result;
		}
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Meal other = (Meal) obj;
			if (c != other.c)
				return false;
			if (f != other.f)
				return false;
			if (p != other.p)
				return false;
			return true;
		}
		
	}
}

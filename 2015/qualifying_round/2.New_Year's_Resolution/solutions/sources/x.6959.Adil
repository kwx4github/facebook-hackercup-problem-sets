package javaapplication9;

import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;

public class JavaApplication9 {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        for (int I = 0; I < N; I++) {
            int gp = in.nextInt(), gc = in.nextInt(), gf = in.nextInt();
            int n = in.nextInt();
            List<Integer> l = new ArrayList<>();
                    

            for (int i = 0; i < n; i++) {
                int p = in.nextInt();
                int c = in.nextInt();
                int f = in.nextInt();
                l.add(p+c+f);
            }
//            p = new ArrayList<Integer>(new HashSet<Integer>(p));
//            c = new ArrayList<Integer>(new HashSet<Integer>(c));
//            f = new ArrayList<Integer>(new HashSet<Integer>(f));
            boolean isBalanced = getBalance(gp+gc+gf, l);
            //boolean isBalanced = getBalance(gp, p);
            System.out.println("Case #"+(I+1)+": " + (isBalanced?"yes":"no"));
        }
    }

    public static boolean getBalance(int nominal, List<Integer> l) {
        int sum = knapsack(l, nominal);


        return sum == nominal;
    }

    /** From Sedgewick's book
     * http://introcs.cs.princeton.edu/java/96optimization/Knapsack.java.html     
     */
    public static int knapsack(List<Integer> l, int W) {
        int N = l.size();
        int k = 1;
        int[] profit = new int[N + 1];
        int[] weight = new int[N + 1];
        for (Integer i : l) {
            profit[k] = i.intValue();
            weight[k] = i.intValue();
            k++;
        }

        // opt[n][w] = max profit of packing items 1..n with weight limit w
        // sol[n][w] = does opt solution to pack items 1..n with weight limit w include item n?
        int[][] opt = new int[N + 1][W + 1];
        boolean[][] sol = new boolean[N + 1][W + 1];

        for (int n = 1; n <= N; n++) {
            for (int w = 1; w <= W; w++) {

                // don't take item n
                int option1 = opt[n - 1][w];

                // take item n
                int option2 = Integer.MIN_VALUE;
                if (weight[n] <= w) {
                    option2 = profit[n] + opt[n - 1][w - weight[n]];
                }

                // select better of two options
                opt[n][w] = Math.max(option1, option2);
                sol[n][w] = (option2 > option1);
            }
        }

        // determine which items to take
        boolean[] take = new boolean[N + 1];
        for (int n = N, w = W; n > 0; n--) {
            if (sol[n][w]) {
                take[n] = true;
                w = w - weight[n];
            } else {
                take[n] = false;
            }
        }

        // print results
        //System.out.println("item" + "\t" + "profit" + "\t" + "weight" + "\t" + "take");
        int sum = 0;
        for (int n = 1; n <= N; n++) {
            if (take[n]) {
                sum += profit[n];
            }
            //System.out.println(n + "\t" + profit[n] + "\t" + weight[n] + "\t" + take[n]);
        }
        return sum;
    }

}

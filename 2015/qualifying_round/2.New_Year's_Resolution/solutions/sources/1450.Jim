import java.util.*;
import java.io.*;
import java.lang.reflect.Array;

public class New_years_resolution {
	public static void main(String args[]) throws Exception {
		Scanner input = new Scanner(new File("new_years_resolution.txt"));
		int N = input.nextInt();
		for (int loopvar = 0; loopvar < N; loopvar++) {
			// Code
			Triplets goal = new Triplets(input.nextInt(), input.nextInt(), input.nextInt());
			int numFood = input.nextInt();
			ArrayList<Triplets> foodList = new ArrayList<New_years_resolution.Triplets>();
			for (int i = 0; i < numFood; i++) {
				Triplets tempFood = new Triplets(input.nextInt(), input.nextInt(), input.nextInt());
				if (!tempFood.moreThan(goal)) {
					foodList.add(tempFood);
				}
			}
			
			boolean yes = solve(new Triplets(), goal, 0, foodList);
			System.out.printf("Case #%d: %s\n", loopvar + 1, yes ? "yes" : "no");
		}
		input.close();
	}
	
	public static boolean solve(Triplets accu, Triplets goal, int index, ArrayList<New_years_resolution.Triplets> foodList) {
		if (accu.equals(goal)) {
			return true;
		}
		if (index >= foodList.size()) {
			return false;
		}
		if (accu.moreThan(goal)) {
			return false;
		}
		
		return solve(accu, goal, index + 1, foodList) ||
				solve(accu.add(foodList.get(index)), goal, index + 1, foodList);
	}
	
	static class Triplets {
		int P, C, F;
		
		public Triplets() {
			this(0, 0, 0);
		}
		
		public Triplets(int p, int c, int f) {
			P = p;
			C = c;
			F = f;
		}
		
		public boolean moreThan(Triplets other) {
			return this.P > other.P ||
					this.C > other.C ||
					this.F > other.F;
		}
		
		public Triplets add(Triplets other) {
			int newP = this.P + other.P;
			int newC = this.C + other.C;
			int newF = this.F + other.F;
			return new Triplets(newP, newC, newF);
		}
		
		@Override
		public boolean equals(Object other) {
			return this.P == ((Triplets)(other)).P &&
					this.C == ((Triplets)(other)).C &&
					this.F == ((Triplets)(other)).F;
		}
		
		@Override
		public int hashCode() {
			return P + C * 5 + F * 3;
		}
		
		@Override
		public String toString() {
			return String.format("P:%d C:%d F:%d", P, C, F);
		}
	}
}

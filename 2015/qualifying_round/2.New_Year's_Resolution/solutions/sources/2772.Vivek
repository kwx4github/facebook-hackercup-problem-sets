//
//  main.cpp
//
//  Created by Vichare, Vivek on 4/12/14.
//

#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <stdio.h>

using namespace std;
typedef vector <int> vi;
typedef vector<vi> vvi;
typedef long long ll;


template <typename T>
T minIndexOfThree(T a, T b, T c) {
    if ( (a <= b) && (a <= c) ) {
        return 0;
    }
    if ( (b <= a) && (b <= c) ) {
        return 1;
    }
    
    return 2;
}



ll process_testcase()
{
    ll GP, GC, GF;
    cin >> GP >> GC >> GF;
    
    ll numFoods;
    cin >> numFoods;

    vector<vector<ll>> foods;
    for (auto i = 0LL; i < numFoods; ++i) {
        ll p, c, f;
        cin >> p >> c >> f;
        if ( (p <= GP) && (c <= GC) && (f <= GF) ) {
            vector<ll> oneFood;
            oneFood.push_back(p);
            oneFood.push_back(c);
            oneFood.push_back(f);
            foods.push_back(oneFood);
        }
    }
    
    ll minIndex = minIndexOfThree(GP, GC, GF);
    auto pred = [minIndex](vector<ll> a, vector<ll> b) -> bool {
        return a[minIndex] < b[minIndex];
    };
    sort(begin(foods), end(foods), pred);
    
    /*
    cout << endl << minIndex << " [[[\n";
    for ( auto item: foods) {
        cout << "[ ";
        cout << item[0] << " ";
        cout << item[1] << " ";
        cout << item[2] << " ]\n";
    }
    cout << "]]] "<< endl;
    */
    
    bool solved = false;
    function<void (ll rp, ll rc, ll rf, ll i)> backtrack = [&foods, &solved, &backtrack](ll rp, ll rc, ll rf, ll i) -> void {
        if (solved) {
            return;
        }
        if ( (rp < 0) || (rc < 0) || (rf < 0) ) {
            return;
        }
        if ( (rp == 0) && (rc == 0) && (rf == 0) ) {
            solved = true;
            return;
        }
        if (i == foods.size()) {
            return;
        }
        // solve with i
        backtrack(rp - foods[i][0], rc - foods[i][1], rf - foods[i][2], i + 1);
        // solve without i
        backtrack(rp, rc, rf, i + 1);
    };
    backtrack(GP, GC, GF, 0);
    
    cout << (solved ? "yes" : "no");
    
    return 0;
}

int main(int argc, char*argv[]) {
    int tc = 0;
    freopen(((argc == 1) ? "inp.txt" : argv[1]), "r", stdin);
    
    // find total number of testcases
    cin >> tc;
    
    // for every testcase
    for(int i = 1; i <= tc; i++)
    {
        printf("Case #%d: ",i);
        process_testcase();
        cout << endl;
    }
    
    return 0;
}


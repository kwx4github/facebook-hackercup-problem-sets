#!/usr/bin/env python3

def solve(GP, GC, GF, items):
  reachable_states = {(0, 0, 0)}
  for dP, dC, dF in items:
    # Save newly reachable states in a new set and merge after iteration.
    new_states = set()
    for P0, C0, F0 in reachable_states:
      P1, C1, F1 = P0 + dP, C0 + dC, F0 + dF
      new_states.add((P1, C1, F1))
    reachable_states |= new_states
  if (GP, GC, GF) in reachable_states:
    return "yes"
  else:
    return "no"

T = int(input())
for i in range(T):
  GP, GC, GF = map(int, input().split())
  N = int(input())
  items = []
  for j in range(N):
    P, C, F = map(int, input().split())
    items.append((P, C, F))
  solution = solve(GP, GC, GF, items)
  print("Case #%d: %s" % (i + 1, solution))

#include <iostream>
#include <vector>
using namespace std;

struct Food {
	int p, c, f;
	Food() {
		p = 0; c = 0; f = 0;
	}
	Food operator+(const Food& food) {
		Food ret;
		ret.p = p + food.p;
		ret.c = c + food.c;
		ret.f = f + food.f;
		return ret;
	}
	bool operator==(const Food& food) {
		return p == food.p &&
			c == food.c &&
			f == food.f;
	}
	bool operator>(const Food& food) {
		return p > food.p ||
			c > food.c ||
			f > food.f;
	}
};

int T, N;
Food G;
Food food_list[20];

bool can_eat(int idx = 0, Food f = Food()) {
	if (idx >= N || f > G) {
		return false;
	}
	Food f2 = f + food_list[idx];
	if (f2 == G) {
		return true;
	}
	return can_eat(idx+1, f) || can_eat(idx+1, f2);
}

int main() {
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		cin >> G.p >> G.c >> G.f;
		cin >> N;
		for (int i = 0; i < N; ++i) {
			cin >> food_list[i].p >> food_list[i].c >> food_list[i].f;
		}
		cout << "Case #" << t << ": ";
		if (can_eat()) {
			cout << "yes" << endl;
		} else {
			cout << "no" << endl;
		}
	}
	return 0;
}

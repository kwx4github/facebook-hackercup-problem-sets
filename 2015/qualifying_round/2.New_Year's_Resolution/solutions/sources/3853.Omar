#include <iostream>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <cstdio>
#include <vector>
#include <map>
#include <sstream>
#include <queue>
#include <set>
#include <string>
#include <string.h>
using namespace std;
#define all(x) x.begin(),x.end()
typedef long long ll;
typedef unsigned long long ull;
int gcd(int a, int b) {
	while (a %= b ^= a ^= b ^= a);
	return b;
}
ll power(ll a, ll b) {
	if (b == 0) {
		return 1;
	}
	if (b == 1) {
		return a;
	}
	if (b % 2 == 0) {
		return power(a*a, b / 2);
	}
	else {
		return (a * power(a*a, (b - 1) / 2));
	}
}
ull choose(ull n, ull k) {
	if (k > n) {
		return 0;
	}
	ull r = 1;
	for (ull d = 1; d <= k; ++d) {
		r *= n--;
		r /= d;
	}
	return r;
}
pair<int, pair<int, int> > meal[21];
int n;
bool solve(int a, int b, int c, int index) {
	if (index == n) {
		if (!a && !b && !c) {
			return true;
		}
		return false;
	}
	return solve(a - meal[index].first, b - meal[index].second.first, c - meal[index].second.second, index + 1) | solve(a, b, c, index + 1);
}
int main() {
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w",stdout);
	int t, cases = 1;
	cin >> t;
	while (t--) {
		int gp, gc, gf;
		cin >> gp >> gc >> gf;
		cin >> n;
		for (int i = 0; i < n; i++) {
			cin >> meal[i].first >> meal[i].second.first >> meal[i].second.second;
		}
		string ans;
		if (solve(gp, gc, gf,0)) {
			ans = "yes";
		}
		else {
			ans = "no";
		}
		cout << "Case #" << cases++ << ": " << ans << endl;
	}
	return 0;
}
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Stack;
import java.util.StringTokenizer;

class GetAllSubsetByStack1 
{
private int TARGET_SUM1;
private int TARGET_SUM2 ;
private int TARGET_SUM3 ;
int flag=0;
public GetAllSubsetByStack1(int m1,int m2,int m3){
    TARGET_SUM1=m1;
    TARGET_SUM2=m2;
    TARGET_SUM3=m3;
}

    private Stack<Integer> stack1 = new Stack<Integer>();
    private Stack<Integer> stack2 = new Stack<Integer>();
    private Stack<Integer> stack3 = new Stack<Integer>();
    StringBuilder ssb=new StringBuilder();
    
    private int sumInStack1 = 0;
    private int sumInStack2 = 0;
    private int sumInStack3 = 0;
   

    public void populateSubset(int[] data1,int[] data2,int[] data3, int fromIndex, int endIndex) {

       
        if (sumInStack1 == TARGET_SUM1&&sumInStack2 == TARGET_SUM2 && sumInStack3 == TARGET_SUM3 ) {
          
            flag=1;
           return;
        }

        for (int currentIndex = fromIndex; currentIndex < endIndex; currentIndex++) {

            if (sumInStack1 + data1[currentIndex] <= TARGET_SUM1) {
                stack1.push(data1[currentIndex]);
                stack2.push(data2[currentIndex]);
                stack3.push(data3[currentIndex]);
               // ssb.append(currentIndex);
                sumInStack1 += data1[currentIndex];
                sumInStack2 += data2[currentIndex];
                sumInStack3 += data3[currentIndex];

                populateSubset(data1,data2,data3, currentIndex + 1, endIndex);
                
                sumInStack1 -= (Integer) stack1.pop();
                sumInStack2 -= (Integer) stack2.pop();
                sumInStack3 -= (Integer) stack3.pop();
               // ssb.deleteCharAt(ssb.length() - 1);
                
            }
        }
    }
    public int acget(){
        return flag;
    }
}


public class p1 {
     public static void main(String[] args) throws IOException {
   
    BufferedReader br = new BufferedReader (new FileReader("C:/Users/prakhar agrawal/Dropbox/NetBeansProjects/tc/src/test2.in"));
    PrintWriter pw = new PrintWriter (new BufferedWriter (new FileWriter("C:/Users/prakhar agrawal/Dropbox/NetBeansProjects/tc/src/test22.out")));
    int t = Integer.parseInt(br.readLine());
    StringTokenizer st,sst;
    //String ss="";
   // int flag=0;
    int ans=0;
    int count=1;
    while(t-->0)
    {
       st=new StringTokenizer(br.readLine()); 
       int P=Integer.parseInt(st.nextToken());
       int C=Integer.parseInt(st.nextToken());
       int F=Integer.parseInt(st.nextToken());
       int N=Integer.parseInt(br.readLine());
       int p[]=new int[N];
       int c[]=new int[N];
       int f[]=new int[N];
        
       for (int i = 0; i < N; i++) {
            sst=new StringTokenizer(br.readLine());
            p[i]=Integer.parseInt(sst.nextToken());
            c[i]=Integer.parseInt(sst.nextToken());
            f[i]=Integer.parseInt(sst.nextToken());
            
        }
         GetAllSubsetByStack1 get = new GetAllSubsetByStack1(P,C,F);
         get.populateSubset(p, c, f, 0, N);
        ans=get.acget();
        if(ans==1)
            pw.println("Case #"+count+": yes");
        else
            pw.println("Case #"+count+": no");
        count++;
}
    pw.close();
    System.exit(0);
     }}
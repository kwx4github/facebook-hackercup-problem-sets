import sys, traceback, time

def isPossible(target, vectors):
    if (target[0] == target[1] == target[2] == 0): return True
    if (len(vectors) == 0): return False
    if (len(vectors) == 1):
        vec = vectors[0]
        return (target[0] / vec[0] == target[1] / vec[1] == target[2] / vec[2]) and (target[0] % vec[0] == target[1] % vec[1] == target[2] % vec[2] == 0)
    
    vec = vectors[0]
    nMax = target[0] / vec[0]
    for i in range(nMax+1):
        target2 = [target[0] - i*vec[0], target[1] - i*vec[1], target[2] - i*vec[2]]
        result = isPossible(target2, vectors[1:])
        if (result == True): return True
    return False

def main():
    # ##################### take the input #####################
    # file name parameters
    fin = r'\\ppfs6.physics.ox.ac.uk\Particle\kasim\Others\CodeJam\FB2015\qualification\B.in'
    fout = r'\\ppfs6.physics.ox.ac.uk\Particle\kasim\Others\CodeJam\FB2015\qualification\B.out'
    
    # read the input file
    f = open(fin, 'r')
    s = f.read()
    f.close()
    lines = s.split('\n')
    
    # #################### parse the input and process the input #######################
    answers = []
    T = eval(lines.pop(0))
    for i in range(T):
        t1 = time.clock()
        print i+1,
        
        target = [eval(p) for p in lines.pop(0).split()]
        N = eval(lines.pop(0))
        vectors = []
        for i in range(N):
            vectors.append([eval(p) for p in lines.pop(0).split()])
        
        # sort based on the first element of the vectors from the highest to the smallest
        sortFunc = lambda x,y: y[0]-x[0]
        vectors.sort(cmp=sortFunc)
        
        answer = isPossible(target, vectors)
        answers.append("yes" if answer == True else "no")
        
        t2 = time.clock()
        print "in " + str(round((t2-t1)*1000)/1000.) + "s"
    
    # #################### write the output ####################
    s = []
    for j in range(1, T+1):
        strAns = "Case #" + str(j) + ": " + str(answers[j-1])
        s.append(strAns)
    
    s = "\n".join(s)
    f = open(fout, 'w')
    f.write(s)
    f.close()

try:
    main()
    print "Finish"
    raw_input()
except:
    traceback.print_exc()
    raw_input()

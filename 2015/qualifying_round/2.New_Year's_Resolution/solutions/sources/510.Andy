import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;


public class NewYearsResolution {
	
	private static final int P = 0, C = 1, F = 2;
	
	public static void main (String [] args) throws IOException {

		BufferedReader f = new BufferedReader(new FileReader("new_years_resolution.txt"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("new_years_resolution_solution.txt")));

		StringTokenizer st = new StringTokenizer(f.readLine());
		int numCases = Integer.parseInt(st.nextToken());
		
		for(int i = 0; i < numCases; i++){
			int[] goal = new int[3];
			st = new StringTokenizer(f.readLine());
			
			for(int j = 0; j < goal.length; j++){
				goal[j] = Integer.parseInt(st.nextToken());
			}
			
			int numFoods = Integer.parseInt(f.readLine());
			int[][] foods = new int[numFoods][3];
			
			for(int j = 0; j < numFoods; j++){
				st = new StringTokenizer(f.readLine());
				for(int k = 0; k < foods[0].length; k++){
					foods[j][k] = Integer.parseInt(st.nextToken());
				}
			}

			int[] current = new int[3];
			boolean exact = thing(current, goal, foods, 0);
			String s;
			if(exact){
				s = "yes";
			}else{
				s = "no";
			}
			out.println("Case #" + (i+1) + ": " + s);
		}
		out.close();		
	}
	
	private static boolean thing(int[] current, int[] goal, int[][] foods, int index){
		if(overate(current, goal)){
			return false;
		}
		if(perfect(current, goal)){
			return true;
		}
		if(index >= foods.length){
			return false;
		}
		//underate
		return thing(add(current, foods[index]), goal, foods, index+1) || thing(current, goal, foods, index+1);
	}

	private static int[] add(int[] a, int[] b) {
		int[] c = new int[a.length];
		for(int i = 0; i < a.length; i++){
			c[i] = a[i]+b[i];
		}
		return c;
	}

	private static boolean perfect(int[] current, int[] goal) {
		return current[P] == goal[P] && current[C] == goal[C] && current[F] == goal[F];
	}

	private static boolean overate(int[] current, int[] goal) {
		return current[P] > goal[P] || current[C] > goal[C] || current[F] > goal[F];
	}
	
	private static boolean underate(int[] current, int[] goal) {
		return current[P] < goal[P] && current[C] < goal[C] && current[F] < goal[F];
	}
}

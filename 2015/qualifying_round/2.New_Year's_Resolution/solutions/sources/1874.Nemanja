#include<fstream>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>

using namespace std;

ifstream fin;
ofstream fout;
bool possible;

struct food {
    int i;
    int P;
    int C;
    int F;
};

food sum(food a, food b) {
    food result;
    result.P = a.P + b.P;
    result.C = a.C + b.C;
    result.F = a.F + b.F;
    return result;
}

bool equals(food a, food b) {
    return (a.P == b.P && a.C == b.C && a.F == b.F);
}

bool _greater(food a, food b) {
    return (a.P > b.P || a.C > b.C || a.C > b.C);
}

food read() {
    food item;
    fin >> item.P >> item.C >> item.F;
    return item;
}

void print(food a) {
    cout << "P " << a.P << " C " << a.C << " F " << a.F << endl;
}

void eat(vector<food> items, vector<int> visited, food eaten, food total) {
    if(equals(eaten, total)) {
        possible = true;
        return;
    }
    if(_greater(eaten, total)) {
        return;
    }
    for(vector<food>::iterator it = items.begin(); it != items.end(); it++) {
        if(find(visited.begin(), visited.end(), it->i) != visited.end()) {
            return;
        }
        vector<int> nv = visited;
        food ne = sum(eaten, *it);
        nv.push_back(it->i);
        eat(items, nv, ne, total);
    }
}

void solve(int k) {
    food total = read();
    food _empty;
    _empty.P = 0; _empty.C = 0; _empty.F = 0;
    int items;
    fin >> items;
    vector<food> vf;
    vector<int> ef;
    for(int i = 0; i < items; i++) {
        food item = read();
        item.i = i;
        vf.push_back(item);
    }
    possible = false;
    eat(vf, ef, _empty, total);
    fout << "Case #" << (k + 1) << ": " << (possible ? "yes" : "no") << endl;
}

int main() {
    int T;

    fin.open("input2.txt");
    fout.open("output2.txt");
    fin >> T;
    for(int i = 0; i < T; i++) {
        solve(i);
    }
    fin.close();
    fout.close();

    return 0;
}


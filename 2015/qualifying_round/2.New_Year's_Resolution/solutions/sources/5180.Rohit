import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;


public class NewYears {
	
	public static void main(String args[]) throws IOException {
		
	
		//String fileName = "C:\\Users\\rohit\\Documents\\newYears.txt";
		String fileName = "C:\\Users\\rohit\\Documents\\new_years_resolution.txt";
		
		BufferedReader br = new BufferedReader(new FileReader(fileName));
		String line;
		
		line = br.readLine();
		
		int testCases = Integer.parseInt(line);
		
		for(int i = 1; i<= testCases; i++){
			
			// Read total line
			line = br.readLine();
			//System.out.println("Total nutrients:" + line);
			
			String[] totals = line.split("\\s");
			
			int gP = Integer.parseInt(totals[0]);
			int gC = Integer.parseInt(totals[1]);
			int gF = Integer.parseInt(totals[2]);

			
			boolean result = false;
			
			line = br.readLine();
			//System.out.println("Total food items:" + line);
			
			int totalLines = Integer.parseInt(line);
			//System.out.println("Total food items(Int):" + totalLines);
			
			ArrayList<FoodItem> foodItems = new ArrayList<FoodItem>();

			for(int t =1;t<=totalLines;t++){
				
				line = br.readLine();
				//System.out.println("Food Item:" + line);

				String[] curr = line.split("\\s");							

				int curr_gP = Integer.parseInt(curr[0]);
				int curr_gC = Integer.parseInt(curr[1]);
				int curr_gF = Integer.parseInt(curr[2]);
				
				// Validate if current food item violates the requirements
				// i.e. If any of the food component is greater than the required diet, it will not be eaten.
				if(curr_gP > gP || curr_gC > gC || curr_gF > gF) {
					continue;
				}
				
				FoodItem foodItem = new FoodItem();
				
				foodItem.g_P = curr_gP;
				foodItem.g_C = curr_gC;
				foodItem.g_F = curr_gF;
				
				foodItems.add(foodItem);		
				
				//totalLines -- ;
			}
			
			// All lines have been processed.
			
			int items = foodItems.size();
			//System.out.println(items);
					
			int t_gP = 0;
			int t_gC = 0;
			int t_gF = 0;
			
			//System.out.println("Items:" + items);
			
			// Generate binary numbers for no. of items and calculate the cumulative nutrients 
			for(int j =0; j < Math.pow(2, items);j++) {
				
				if(result) {	// Already found a positive combination. No need to try remaining combinations
					break;
				}
				
				//System.out.println(items + " " + j);
				
				String convertedBinary = Integer.toString(j, 2);
				
				String zeroes = "";
				for(int p=0;p<(items-convertedBinary.length());p++) {
					zeroes+= "0";
				}
				
				String format = zeroes + convertedBinary;
				
				// Java Integer has limits [Integer.MAX_VALUE], had to manually prefix zeroes instead of using String.format ( :-P )
				//String format = String.format( "%0"+ items +"d",Integer.parseInt(Integer.toString(j, 2)));
				
				//System.out.println("Binary Number:" + format);
				
				t_gP = 0;
				t_gC = 0;
				t_gF = 0;
				
				for(int k=0; k<items; k++) {
					
					if(format.charAt(k) == '1'){
						FoodItem foodItem = foodItems.get(k);
						
						t_gP += foodItem.g_P;
						t_gC += foodItem.g_C;
						t_gF += foodItem.g_F;
						
						if(gP < t_gP || gC < t_gC || gF < t_gF) {
							break;	// nutrient composition violated [One of the components exceeds the total]
						}
					}
					
					// Check if the requirements were met
					if(gP == t_gP && gC == t_gC && gF == t_gF) {
						result = true;	// Aha !! found the exact combination
						break;
					}
				}
				
			}	
			
			foodItems.clear(); 
			foodItems = null; // Although it depends when the GC is invoked (May help)
			
			System.out.println("Case #" + i + " " + (result ? "yes" : "no"));
		}

		br.close();
		
	}
}

class FoodItem {
	
	int g_P;
	int g_C;
	int g_F;
	
}

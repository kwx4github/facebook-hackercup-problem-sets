#!/usr/bin/python

import sys
import readline


class Macronutrients:

	def __init__(self, P, C, F):
		self.P = int(P)
		self.C = int(C)
		self.F = int(F)

	def __add__(self, other):
		return Macronutrients(self.P + other.P, self.C + other.C, self.F + other.F)

	def __sub__(self, other):
		return Macronutrients(self.P - other.P, self.C - other.C, self.F - other.F)

	def __eq__(self, other):
		return (self.P, self.C, self.F) == (other.P, other.C, other.F)

	def __ne__(self, other):
		return not self == other

	def __gt__(self, other):
		return (self.P, self.C, self.F) > (other.P, other.C, other.F)

	def __lt__(self, other):
		return (self.P, self.C, self.F) < (other.P, other.C, other.F)

	def __ge__(self, other):
		return (self > other) or (self == other)

	def __le__(self, other):
		return (self < other) or (self == other)

class Const:

	ZERO = Macronutrients("0", "0", "0")



def isSubsetSum(set, n, target):

	if target == Const.ZERO:
		return True
	if n == 0 and target != Const.ZERO:
		return False

	if set[n - 1] > target:
		return isSubsetSum(set, n - 1, target)
	 
	return isSubsetSum(set, n - 1, target) or isSubsetSum(set, n - 1, target - set[n - 1])

	
def solve(input):
	line = input.readline().strip();
	l = line.split()
	target = Macronutrients(l[0], l[1], l[2])
	line = input.readline().strip();
	nfoods = int(line)
	foods = []
	for i in range(nfoods):
		line = input.readline().strip();

		l = line.split()
		foods.append(Macronutrients(l[0], l[1], l[2]))

	if isSubsetSum(foods, nfoods, target):
		return "yes"

	return "no"



input = sys.stdin

ncases = int(input.readline().strip())

for caseno in range(ncases):
	solution = solve(input)
	print('Case #{}: {}'.format(caseno + 1, solution))
	sys.stdout.flush()

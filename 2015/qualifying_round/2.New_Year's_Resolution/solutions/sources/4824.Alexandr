#include <iostream>
#include <algorithm>
#include <conio.h>
#include <cstdio>
#include <vector>
#include <stack>
#include <deque>
#include <queue>
#include <ctime>
#include <set>

#define ll long long 
#define ull unsigned long long 
#define mp make_pair
#define INF 1 << 60
#define eb emplace_back

using namespace std;

//static class taskA
//{
//public:
//	static int number;
//
//	static void taskA::run()
//	{
//		int tests;
//		scanf("%d", &tests);
//
//
//		for (int t = 1; t <= tests; t++)
//		{
//			int n;
//			scanf("%d", &n);
//			if (!n)
//			{
//				cout << "Case #" << t << ": " << n << endl;
//				continue;
//			}
//			int minN = n, maxN = n;
//
//			vector <int> a = getN(n);
//			vector <int> minA = a, maxA = a;
//
//			for (int i = 0; i < a.size(); i++)
//			{
//				for (int j = i + 1; j < a.size(); j++)
//				{
//					if ((!i && !a[j])) continue;
//					swap(a[i], a[j]);
//					int nn = getN(a);
//					if (nn > maxN) {
//						maxN = nn; maxA = a;
//					}
//					if (nn < minN) {
//						minN = nn; minA = a;
//					}
//					swap(a[i], a[j]);
//				}
//			}
//			printAns(t, minA, maxA);
//			if (t < tests) printf("\n");
//		}
//	}
//
//	static vector <int> getN(int n)
//	{
//		int index = 0;
//		vector <int> a;
//		while (n)
//		{
//			a.eb(n % 10);
//			n /= 10;
//		}
//		reverse(a.begin(), a.end());
//		return a;
//	}
//
//	static int getN(vector <int> a)
//	{
//		int n = 0;
//		for (int i = 0; i < a.size(); i++)
//		{
//			n = n * 10 + a[i];
//		}
//		return n;
//	}
//
//	static void printN(vector <int> a)
//	{
//		for (int i = 0; i < a.size(); i++)
//		{
//			printf("%d", a[i]);
//		}
//	}
//
//	static void printAns(int t, vector <int> minN, vector <int > maxN)
//	{
//		printf("Case #%d: ", t);
//		printN(minN);
//		printf(" ");
//		printN(maxN);
//	}
//};

class taskB
{
public:

	struct food
	{
		int p, c, f;
		food(int p, int c, int f) : p(p), c(c), f(f) {}
		food() {}

		food operator + (food other)
		{
			return food(p + other.p, c + other.c, f + other.f);
		}

		food operator += (food other)
		{
			return *this + other;
		}

		food operator - (food other)
		{
			return food(p - other.p, c - other.c, f - other.f);
		}

		food operator -= (food other)
		{
			return *this - other;
		}
	};

	int gp, gc, gf;
	food cur;
	int test;
	food a[22];

	taskB()	{	}

	void go()
	{
		int tests;
		cin >> tests;
		for (test = 1; test <= tests; test++)
		{
			scanf("%d %d %d", &gp, &gc, &gf);
			int n;
			cur.c = 0;
			cur.p = 0;
			cur.f = 0;
			scanf("%d", &n);

			for (int i = 0; i < n; i++)
			{
				int p, c, f;
				scanf("%d %d %d", &p, &c, &f);
				a[i] = food(p, c, f);
			}
			a[n] = food(0, 0, 0);
			bool flag = false;
			for (int i = 0; i < (1 << (n)) && !flag; i++)
			{
				cur = food(0, 0, 0);
				for (int j = 0; j < n && !flag && check() >= 0; j++)
				{

					if ((1 << j & i) || (!i && !j))
					{
						cur = cur + a[j];
						if (!check()) 
							flag = true;
						if (check() == -1) 
							break;
					}
				}
			}
			printAns(flag);
			if (test < tests) printf("\n");
		}
	}

	void printAns(bool ok)
	{
		printf("Case #%d: ", test);
		ok ? printf("yes") : printf("no");
	}

	int check()
	{
		if (cur.c == gc && cur.f == gf && cur.p == gp)
			return 0;
		if (cur.c > gc || cur.f > gf || cur.p > gp)
			return -1;
		return 1;
	}
};

//int check()
//{
//	if (cur.c == gc && cur.f == gf && cur.p == gp)
//		return 0;
//	if (cur.c > gc || cur.f > gf || cur.p > gp)
//		return -1;
//	return 1;
//}
//
//bool comparator(food first, food second)
//{
//	return first.c < second.c;
//}
//
//void printAns(bool ok)
//{
//	printf("Case #%d: ", test);
//	ok ? printf("yes") : printf("no");
//}
//
//bool start(queue <int> q)
//{
//	if (q.empty()) return false;
//	int pos = q.front();
//	cur.c += a[pos].c;
//	cur.p += a[pos].p;
//	cur.f += a[pos].f;
//	if (!check()) return true;
//	if (check() == -1) return false;
//	q.pop();
//	if (pos != q.front() && start(q)) return true;
//	cur.c -= a[pos].c;
//	cur.p -= a[pos].p;
//	cur.f -= a[pos].f;
//}
//
//void run()
//{
//	int tests;
//	cin >> tests;
//	for (test = 1; test <= tests; test++)
//	{
//		scanf("%d %d %d", &gp, &gc, &gf);
//		int n;
//		cur.c = 0;
//		cur.p = 0;
//		cur.f = 0;
//		scanf("%d", &n);
//		a.clear();
//		for (int i = 0; i < n; i++)
//		{
//			int p, c, f;
//			scanf("%d %d %d", &p, &c, &f);
//			a.eb(food(p, c, f));
//		}
//		sort(a.begin(), a.end(), comparator);
//		queue <int> q;
//		for (int i = 0; i < a.size(); i++)
//			q.push(i);
//
//		printAns(start(q));
//		if (test < tests) printf("\n");
//	}
//}


void getTest()
{
	freopen("input.txt", "w", stdout);
	cout << 20 << endl;
	for (int j = 0; j < 20; j++)
	{
		printf("1000 1000 1000\n");
		printf("20\n");
		for (int i = 0; i < 20; i++)
		{
			printf("%d %d %d\n", i + 40, i + 45, i + 50);
		}
	}
}

int main()
{
	freopen("new_years_resolution.txt", "r", stdin);
	freopen("new_years_resolution_output.txt", "w", stdout);
	//getTest(); return 0;
	//test(); return 0;
	//taskA::run(); return 0;
	taskB* t = new taskB();
	t->go();
	//cout << (double)clock() / CLOCKS_PER_SEC << endl;
	return 0;
}
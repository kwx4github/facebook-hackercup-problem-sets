#include <iostream>
#include <fstream>

using namespace std;

// Food Macronutrients
struct Macronutrients {
	int P = 0;
	int C = 0;
	int F = 0;
};

bool checkCombinations(Macronutrients *foodList, Macronutrients *collectedFood, Macronutrients *goalFood,
                          int n, int start, int max) {
  bool found = false;
  if (start >= max) {
    if(collectedFood->P == goalFood->P && collectedFood->C == goalFood->C && collectedFood->F == goalFood->F)
      return true;
    return false;
  } else {
    for (int i = start; i < n; i++) {
      collectedFood->P += foodList[i].P;
      collectedFood->C += foodList[i].C;
      collectedFood->F += foodList[i].F;
      found = checkCombinations (foodList, collectedFood, goalFood, n, i+1, max);
      collectedFood->P -= foodList[i].P;
      collectedFood->C -= foodList[i].C;
      collectedFood->F -= foodList[i].F;

      if(found)
        return true;
    }
  }
  return found;
}

string getAnswer(Macronutrients *foodList, int n, Macronutrients *goalFood) {
  for(int i = 1; i <= n; i++) {
    Macronutrients collectedFood;
    if(checkCombinations(foodList, &collectedFood, goalFood, n, 0, i))
      return "yes";
  }
  return "no";
}

int main() {
  ifstream in("new_years_resolution.txt");
  ofstream out("out.txt");

  int t;
  in >> t; // Number of test cases

  int n; // Number of foods
  Macronutrients goalFood;// Goal Macronutrients

  for(int i = 0; i < t; i++) {
  	// Goal
    in >> goalFood.P;
    in >> goalFood.C;
    in >> goalFood.F;


  	// Number of foods
    in >> n;

    Macronutrients foodList[n];

    for(int j = 0; j < n; j++) {
    	Macronutrients food;
    	in >> food.P;
    	in >> food.C;
    	in >> food.F;

    	foodList[j] = food;
    }

    out << "Case #" << (i+1) << ": " << getAnswer(foodList, n, &goalFood) << endl;
  }

  in.close();
  out.close();
  return 0;
}


import java.io.IOException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.util.List;
import java.util.ArrayList;

public class ResolutionCalculator {
	
	public static void main(String[] args) throws IOException{
		
		FileWriter fw = new FileWriter("Output.txt");
		BufferedWriter writer = new BufferedWriter(fw);
		
		String caseLabel = "Case #";
		List<Case> cases = ParseCases();
		
		for(int i = 0; i < cases.size(); ++i){
			
			int caseNumber = i + 1;
			if(FindMatch(new Food(0,0,0), cases.get(i).GetTestFoods(), 0, cases.get(i).GetGoal())){
				writer.write(caseLabel + caseNumber + ": yes");
			}
			else{
				writer.write(caseLabel + caseNumber + ": no");
			}
			if(caseNumber != cases.size())
			{
				writer.newLine();
			}
		}
		
		writer.close();
		fw.close();
	}
	
	private static boolean FindMatch(Food totalFood, List<Food> testFoods, int index, Food goal){
		if(index >= testFoods.size()){
			return false;
		}

		for(int i = index; i < testFoods.size(); ++i)
		{
			if(totalFood.AddFood(testFoods.get(i)).equals(goal)){
				return true;
			}
			else if(totalFood.AddFood(testFoods.get(i)).IsLessThan(goal)){
				if (FindMatch(totalFood.AddFood(testFoods.get(i)), testFoods, i + 1, goal)){
					return true;
				}
			}
		}
		return false;
	}
	
	private static List<Case> ParseCases() throws IOException{
		FileReader fr = new FileReader("new_years_resolution.txt");
		BufferedReader reader = new BufferedReader(fr);
		
		int numberOfCases = Integer.parseInt(reader.readLine());
		List<Case> cases = new ArrayList<Case>();
		
		for(int i = 0; i < numberOfCases; ++i){
			String[] tokens = reader.readLine().split("[ ]+");
			cases.add(new Case(new Food(Integer.parseInt(tokens[0]), Integer.parseInt(tokens[1]), Integer.parseInt(tokens[2]))));
			int possibleFoods = Integer.parseInt(reader.readLine());
			
			for(int j = 0; j < possibleFoods; ++j){
				String[] foodTokens = reader.readLine().split("[ ]+");
				cases.get(i).AddTestFood(new Food(Integer.parseInt(foodTokens[0]), Integer.parseInt(foodTokens[1]), Integer.parseInt(foodTokens[2])));
			}
		}
		
		reader.close();
		fr.close();
		return cases;
	}
	
	private static class Case{
		private Food _goal;
		private List<Food> _foods;
		
		public Case(Food goal){
			_goal = goal;
			_foods = new ArrayList<Food>();
		}
		
		public Food GetGoal(){
			return _goal;
		}
		
		public List<Food> GetTestFoods(){
			return _foods;
		}
		
		public void AddTestFood(Food food){
			_foods.add(food);
		}
	}
	
	private static class Food{
		private int _protein;
		private int _carbs;
		private int _fat;
		
		public Food(int protein, int carbs, int fat){
			_protein = protein;
			_carbs = carbs;
			_fat = fat;
		}
		
		public int GetProtein(){
			return _protein;
		}
		
		public int GetCarbs(){
			return _carbs;
		}
		
		public int GetFat(){
			return _fat;
		}
		
		public Food AddFood(Food food)
		{
			return new Food(food.GetProtein() + _protein, food.GetCarbs() + _carbs, food.GetFat() + _fat);
		}
		
		public Food SubtractFood(Food food)
		{
			return new Food(food.GetProtein() - _protein, food.GetCarbs() - _carbs, food.GetFat() - _fat);
		}
		
		public boolean IsGreaterThan(Food food){
			return _protein > food.GetProtein() && _carbs > food.GetCarbs() && _fat > food.GetFat();
		}
		
		public boolean IsLessThan(Food food){
			return _protein < food.GetProtein() && _carbs < food.GetCarbs() && _fat < food.GetFat();
		}
		
		@Override
		public boolean equals(Object o)
		{
			if(o == this){
				return true;
			}
			
			if(!(o instanceof Food)){
				return false;
			}
			
			Food food = (Food) o;
			
			return food.GetProtein() == _protein && food.GetCarbs() == _carbs && food.GetFat() == _fat;
		}
	}
}


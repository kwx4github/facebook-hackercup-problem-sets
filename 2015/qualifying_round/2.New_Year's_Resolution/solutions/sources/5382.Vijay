// Problem 1
#include<stdio.h>
struct food
{
    int f,c,p;
};

int isSum(struct food Foods[],int N,int C,int P,int F)
{
    int Fc,Fp,Ff;
    if(C==0 && P==0 && F==0)
         return 1;
    if(N==0 && (C!=0 || P!=0 || F!=0))
         return 0;
    Fc=Foods[N-1].c;
    Fp=Foods[N-1].p;
    Ff=Foods[N-1].f;
    if(C<Fc || P<Fp || F<Ff) return isSum(Foods,N-1,C,P,F);
    if(C==Fc && P==Fp && F==Ff) return 1;
    
    return isSum(Foods,N-1,C-Fc,P-Fp,F-Ff) || isSum(Foods,N-1,C,P,F);
}
void solve()
{
     int N,Gc,Gp,Gf,c,p,f,ans_flag=0,N_i=0,i;
     struct food foods[21];
     scanf("%d%d%d",&Gp,&Gc,&Gf);
     scanf("%d",&N);
     for(i=0,N_i=0;i<N;i++)
     {
        scanf("%d%d%d",&p,&c,&f);
        if(Gc==c && Gp==p && Gf==f)
        {
           ans_flag=1;
           i++;
           while(i<N)
           {
             scanf("%d%d%d",&p,&c,&f);
             i++;
           }
        }
        else if(Gc>c && Gp>p && Gf>f)
        {
           foods[N_i].f=f;
           foods[N_i].c=c;
           foods[N_i].p=p;
           N_i++;
        }
     }
     if(ans_flag)
     {
        printf("yes\n");
        return;
     }
     if(N_i==0)
     {
        printf("no\n");
        return;
     }
     if(isSum(foods,N_i,Gc,Gp,Gf)==1)
        printf("yes\n");
     else
        printf("no\n");
}
int main(void)
{
    int T,t;
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    /*freopen("sample_input.txt","r",stdin);
    freopen("sample_output.txt","w",stdout);*/
    scanf("%d",&T);
    for(t=1;t<=T;t++)
    {
      printf("Case #%d: ",t);
      solve();
    }
    return 0;
}

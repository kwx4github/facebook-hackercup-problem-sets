#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <fstream>
#include <istream>
#include <vector>

using namespace std;

bool is_subset_sum(vector<int>,int);
void Tokenize(const string&,vector<string>&,const string& delimiters = " ");

int main(int argc,char* argv[])
{
  ifstream infile;
  infile.open(argv[1]);
  string cases;
  getline(infile,cases);
  int count = atoi(cases.c_str());
  
  for(int i=0;i<count;i++)
  {
    string line;
    getline(infile,line);

    vector<string> tokens;
    Tokenize(line,tokens);
    int sum = 0;
    
    for(int i=0;i<tokens.size();i++)
    {
      sum += atoi(tokens[i].c_str());
    }

    getline(infile,line);
    int food_count = atoi(line.c_str());

    vector<int> food_data;
    for(int i=0;i<food_count;i++)
    {
      getline(infile,line);
      tokens.clear();
      Tokenize(line,tokens);
      int food_calories = 0;
      for(int i=0;i<tokens.size();i++)
      {
        food_calories += atoi(tokens[i].c_str());
      }
      food_data.push_back(food_calories);
    }

    bool result = is_subset_sum(food_data,sum);
    string yes_or_no = (result)?"yes":"no";
    cout<<"Case "<<i+1<<": "<<yes_or_no<<endl;
  }
}

bool is_subset_sum(vector<int> inputset,int sum)
{
    bool subset[sum+1][inputset.size()+1];
 
    for (int i = 0; i <= inputset.size(); i++)
      subset[0][i] = true;
 
    for (int i = 1; i <= sum; i++)
      subset[i][0] = false;
 
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= inputset.size(); j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= inputset[j-1])
           subset[i][j] = subset[i][j] || subset[i - inputset[j-1]][j-1];
       }
     }

     return subset[sum][inputset.size()];
}

void Tokenize(const string& str,
                      vector<string>& tokens,
                      const string& delimiters)
{
    // Skip delimiters at beginning.
    string::size_type lastPos = str.find_first_not_of(delimiters, 0);
    // Find first "non-delimiter".
    string::size_type pos     = str.find_first_of(delimiters, lastPos);

    while (string::npos != pos || string::npos != lastPos)
    {
        // Found a token, add it to the vector.
        tokens.push_back(str.substr(lastPos, pos - lastPos));
        // Skip delimiters.  Note the "not_of"
        lastPos = str.find_first_not_of(delimiters, pos);
        // Find next "non-delimiter"
        pos = str.find_first_of(delimiters, lastPos);
    }
}

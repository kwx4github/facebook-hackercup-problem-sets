#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Food {
    int p, c, f;
};

Food operator-(const Food& a, const Food& b) {
    return
    {
        a.p - b.p, a.c - b.c, a.f - b.f
    };
}

bool isPossible(vector<Food>& mask, Food goal, int index = 0) {
    if (goal.c == 0 && goal.p == 0 && goal.f == 0)
        return true;
    else if (goal.c < 0 || goal.p < 0 || goal.f < 0)
        return false;
    else if (index >= int(mask.size()))
        return false;
    else {
        bool a = isPossible(mask, goal - mask[index], index + 1);
        bool b = isPossible(mask, goal, index + 1);
        return (a || b);
    }
}

int main() {
    ifstream input("b_input.txt");
    ofstream output("b_output.txt");
    int testCases;
    input >> testCases;
    for (int caseCount = 1; caseCount <= testCases; caseCount++) {
        int a, b, c, n;
        vector<Food> mask;
        input >> a >> b >> c >> n;
        Food goal = {a, b, c};
        while (n--) {
            input >> a >> b >> c;
            Food temp = {a, b, c};
            mask.push_back(temp);
        }
        output << "Case #" << caseCount << ": " << ((isPossible(mask, goal)) ? "yes" : "no") << endl;

    }
    input.close();
    output.close();
    return 0;
}


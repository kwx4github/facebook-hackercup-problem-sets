/////////////////////////////////////////////////   IN THE NAME OF GOD
#include <bits/stdc++.h>
using namespace std;

//#pragma comment(linker, "/STACK:1024000000,1024000000")

#define     For(i,a,b)        for (int i=a; i<b; i++)
#define     Rep(i,a)          for (int i=0; i<a; i++)
#define     ALL(v)            (v).begin(),(v).end()
#define     Set(a,x)          memset((a),(x),sizeof(a))
#define     EXIST(a,b)        find(ALL(a),(b))!=(a).end()
#define     Sort(x)           sort(ALL(x))
#define     UNIQUE(v)         Sort(v); (v).resize(unique(ALL(v)) - (v).begin())
#define     SF                scanf
#define     PF                printf
#define     timestamp(x)      printf("Time : %.3lf s.\n", clock()*1.0/CLOCKS_PER_SEC)
#define     INF               1e11
#define     pii               pair < int , int >
#define     MP                make_pair
#define     MOD               1000000007
#define     EPS               1e-9
#define     ll                long long
#define     MAXN              300000+10
#define     Dbug              cout<<""
#define     PI                3.1415926535897932384626433
//int month[]={0,31,28,31,30,31,30,31,31,30,31,30,31};

vector < pair < pii , int > > food ;

int main(){
    ios::sync_with_stdio(false);
#ifndef ONLINE_JUDGE
    freopen ( "input.txt" , "r" , stdin ) ;
    freopen ( "output.txt" , "w" , stdout ) ;
#endif
    int n , tc , tcc = 1 ;
    int gp , gc , gf , p , c , f , can ;
    cin >> tc ;
    while ( tc-- ){
    	food.clear() ;
    	can = 0 ;
    	cin >> gp >> gc >> gf ;
    	cin >> n ;
    	Rep ( i , n ){
    		cin >> p >> c >> f ;
    		food.push_back( MP ( MP ( p , c ) , f ) ) ;
    	}
    	int z = 1 << n ;
    	Rep ( i , z ){
    		p = c = f = 0 ;
    		Rep ( j , n ){
    			if ( i & ( 1 << j ) ){
    				p += food[j].first.first ;
    				c += food[j].first.second ;
    				f += food[j].second ;
    			}
    		}
    		if ( p == gp && c == gc && f == gf ) can = 1 ;
    	}
    	cout << "Case " << tcc++ << ": " ;
    	if ( can ) cout << "yes" << endl ;
    	else cout << "no" << endl ;
    }
    return 0 ;
}

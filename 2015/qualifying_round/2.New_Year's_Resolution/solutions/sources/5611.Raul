#include <cmath>
#include <cstdio>
#include <vector>
#include <queue>
#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;

typedef long long LL;
typedef double DB;
typedef unsigned UINT;
typedef unsigned long long ULL;

#define min(a, b)  a < b ? a : b
#define max(a, b)  a > b ? a : b

#define rep(i,n) for(int i=0;i<n;++i)
#define rep1(i,n) for(int i=1;i<=n;++i)
#define repab(i,a,b) for(int i=a;i<=b;++i)
#define dwn(i,n) for (int i=n-1;i>-1;--i)
#define dwn1(i,n) for (int i=n;i>0;--i)
#define dwnab(i,a,b) for(int i=a;i>=b;--i)
#define each(it, A) for (__typeof(A.begin()) it=A.begin(); it != A.end(); ++it)

#define pair pii<int, int>
#define all(v) (v).begin(), (v).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define sortv(v) sort(all(v))

#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)

#define mset(m) memset(m,0,sizeof(m))

#define sz(c) (int)c.size()
#define ff first
#define ss second

#define MAX 500001

struct diet
{
	int p, c, f, l;	
}a[32];

int t, n;
int gp, gc, gf;

bool found()
{
	int n1 = n-1;
	queue <diet> q;
	diet d = {0, 0, 0, 0};
	
	q.push(d);
	
	while(!q.empty())
	{
		d = q.front();
		int from = d.l;
		repab(i, from, n1)
		{
			diet ds = a[i];
			ds.p += d.p; ds.c += d.c; ds.f += d.f;
			if (ds.p <= gp && ds.c <= gc && ds.f <= gf)
			{
				if (ds.p == gp && ds.c == gc && ds.f == gf)
					return 1;
				if (i != n1)
				{
					ds.l = i+1;
					q.push(ds);
				}
			}
		}
		q.pop();
	}
	
	return 0;
}

int main() {
	READ("new_years_resolution.txt");
	WRITE("nyr.out");
	scanf("%d", &t);
	rep1(k, t)
	{
		scanf("%d %d %d", &gp, &gc, &gf);
		scanf("%d", &n);

		rep(i, n)
			scanf("%d %d %d", &a[i].p, &a[i].c, &a[i].f);
			
		if (found())
			printf("Case #%d: yes\n", k);				
		else
			printf("Case #%d: no\n", k);				

	}
    return 0;
}


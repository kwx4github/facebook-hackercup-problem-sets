import java.io.*;
import java.util.*;

public class NYE
{
    public static void main(String[] args)
    {
        // need a file name
        if (args.length != 1)
        {
            System.err.println("I need an input file!!");
            System.exit(1);
        }

        // open the file for reading
        BufferedReader br = null;
        try
        {
            br = new BufferedReader(new FileReader(args[0]));
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
            System.exit(1);
        }

        try
        {
            String line = br.readLine();
            PrintWriter writer = new PrintWriter("output.txt", "UTF-8");
            for (int i = 0; i < Integer.parseInt(line); i++)
            {
                String result = "Case #" + (i + 1) + ": " + processTestCase(br);
                System.out.println(result);
                writer.println(result);
            }
            writer.close();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                br.close();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }
    }

    public static String processTestCase(BufferedReader br)
    {
        try
        {
            String input1 = br.readLine();
            String[] input1Split = input1.split(" ");
            int gp = Integer.parseInt(input1Split[0]);
            int gc = Integer.parseInt(input1Split[1]);
            int gf = Integer.parseInt(input1Split[2]);

            String input2 = br.readLine();
            int n = Integer.parseInt(input2);

            Set<Triplet> triplets = new HashSet<>();
            List<Triplet> toAdd = new ArrayList<>();
            boolean done = false;

            for (int i=0; i<n; i++)
            {
                String[] foodSplit = br.readLine().split(" ");
                if (done)
                    continue;

                int p = Integer.parseInt(foodSplit[0]);
                int c = Integer.parseInt(foodSplit[1]);
                int f = Integer.parseInt(foodSplit[2]);

                Triplet newT = new Triplet(gp, gc, gf);
                newT.add(p, c, f);
                if (newT.goalAchieved())
                {
                    done = true;
                    continue;
                }
                if (!newT.busted())
                    toAdd.add(newT);

                for (Triplet triplet : triplets)
                {
                    Triplet clone = new Triplet(triplet);
                    clone.add(p, c, f);
                    if (clone.goalAchieved())
                    {
                        done = true;
                        continue;
                    }
                    if (!clone.busted())
                        toAdd.add(clone);
                }

                triplets.addAll(toAdd);
                toAdd.clear();
            }

            if (done)
                return "yes";

            return "no";
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return "";
    }

    public static class Triplet
    {
        public int p;
        public int c;
        public int f;

        public Triplet(Triplet triplet)
        {
            this(triplet.p, triplet.c, triplet.f);
        }

        public Triplet(int p, int c, int f)
        {
            this.p = p;
            this.c = c;
            this.f = f;
        }

        public void add(Triplet t)
        {
            add(t.p, t.c, t.f);
        }

        public void add(int p, int c, int f)
        {
            this.p -= p;
            this.c -= c;
            this.f -= f;
        }

        public boolean goalAchieved()
        {
            return p == 0 && c == 0 && f == 0;
        }

        public boolean busted()
        {
            return p < 0 || c < 0 || f < 0;
        }

        @Override
        public boolean equals(Object o)
        {
            if (this == o)
            {
                return true;
            }
            if (o == null || getClass() != o.getClass())
            {
                return false;
            }

            Triplet triplet = (Triplet) o;

            if (c != triplet.c)
            {
                return false;
            }
            if (f != triplet.f)
            {
                return false;
            }
            if (p != triplet.p)
            {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            int result = p;
            result = 31 * result + c;
            result = 31 * result + f;
            return result;
        }
    }
}
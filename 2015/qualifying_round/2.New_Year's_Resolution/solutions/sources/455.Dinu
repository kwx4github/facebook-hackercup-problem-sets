package hackercode;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Locale;
import java.util.StringTokenizer;

/**
 *
 * @author Dinnot
 */
public class HackerCode implements Runnable{

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        new Thread(null, new HackerCode(), "", 256 * (1L << 20)).start();
    }
    
    BufferedReader in;
    PrintWriter out;
    StringTokenizer tok = new StringTokenizer("");
    
    public void run() {
        try {
            long t1 = System.currentTimeMillis();
            in = new BufferedReader(new FileReader("E:\\xampp\\htdocs\\HackerCode\\src\\hackercode\\input.txt"));
            out = new PrintWriter("E:\\xampp\\htdocs\\HackerCode\\src\\hackercode\\output.txt");
            Locale.setDefault(Locale.US);
            int T = readInt();
            for(int i = 0; i < T; i++)
                solve(i+1);
            in.close();
            out.close();
            long t2 = System.currentTimeMillis();
            System.err.println("Time = " + (t2 - t1));
        } catch (Throwable t) {
            t.printStackTrace(System.err);
            System.exit(-1);
        }
    }
    
    String readString() throws IOException {
            while (!tok.hasMoreTokens()) {
                    tok = new StringTokenizer(in.readLine());
            }
            return tok.nextToken();
    }

    int readInt() throws IOException {
            return Integer.parseInt(readString());
    }

    long readLong() throws IOException {
            return Long.parseLong(readString());
    }

    double readDouble() throws IOException {
            return Double.parseDouble(readString());
    }

    // solution

    void solve(int caseNr) throws IOException {
        int tp = readInt();
        int tc = readInt();
        int tf = readInt();
        
        int n = readInt();
        boolean found = false;
        
        ArrayList<Product> products = new ArrayList<Product>();
        
        for(int i = 0; i < n; i++) {
            int p = readInt();
            int c = readInt();
            int f = readInt();
            Product prod = new Product(p, c, f);
            if(prod.IsGoal(tp, tc, tf)) {
                found = true;
            } else if(!found && prod.Valid(tp, tc, tf)) {
                int size = products.size();
                products.add(prod);
                for(int j = 0; j < size && !found; j++) {
                    Product newprod = products.get(j).Add(p, c, f);
                    if(newprod.IsGoal(tp, tc, tf))
                        found = true;
                    else if(newprod.Valid(tp, tc, tf))
                        products.add(newprod);
                }
            }
        }
        
        out.print("Case #");
        out.print(caseNr);
        out.print(": ");
        if(found) out.println("yes");
        else out.println("no");
    }
    
    public class Product {
        
        private int protein;
        private int carbo;
        private int fat;
        
        public Product(int p, int c, int f) {
            protein = p;
            carbo = c;
            fat = f;
        }
        
        public Product Add(int p, int c, int f) {
            return new Product(p+protein, c+carbo, f+fat);
        }
        
        public boolean Valid(int tp, int tc, int tf) {
            return tp >= protein && tc >= carbo && tf >= fat;
        }
        
        public boolean IsGoal(int tp, int tc, int tf) {
            return tp == protein && tc == carbo && tf == fat;
        }
    }
}

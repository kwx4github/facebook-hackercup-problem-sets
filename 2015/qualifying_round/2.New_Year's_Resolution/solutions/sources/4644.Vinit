import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Created by vinit.bothra on 1/11/15.
 */
public class FacebookNewYearResolutionSolution {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		int numberOfTests = scanner.nextInt();
		boolean[] compats = new boolean[numberOfTests];
		for (int j = 0; j < numberOfTests; j++) {

			int GP = scanner.nextInt();
			int GC = scanner.nextInt();
			int GF = scanner.nextInt();

			int n = scanner.nextInt();

			List<Food> foods = new ArrayList<>();

			for (int i = 0; i < n; i++) {
				int p = scanner.nextInt();
				int c = scanner.nextInt();
				int f = scanner.nextInt();
				Food food = new Food(p, c, f);
				foods.add(food);
			}

			List<List<Food>> allSubsets = getAllSubsets(foods, 0);
			boolean compat = false;
			for (List<Food> foodList : allSubsets) {
				compat = isCompatible(foodList, GP, GC, GF);
				if (compat)
					break;
			}
			compats[j] = compat;
		}

		for(int j =0 ;j<numberOfTests;j++)
			System.out.println(MessageFormat.format("Case #{0}: {1}",j+1,compats[j] ? "yes" : "no"));
//		String[] numbers = {"3152","1452","10","101","1021","123","321",};

	}


	private static boolean isCompatible(List<Food> foodList, int gp, int gc, int gf) {
		int sumP = 0, sumC = 0, sumF = 0;

		for (Food food : foodList) {
			sumP += food.p;
			sumC += food.c;
			sumF += food.f;
		}

		return sumP == gp && sumC == gc && sumF == gf;
	}

	static class Food {
		int p;
		int c;
		int f;

		public Food(int p, int c, int f) {
			this.p = p;
			this.c = c;
			this.f = f;
		}
	}

	private static <T> List<List<T>> getAllSubsets(List<T> set, int index) {
		List<List<T>> allSubsets = new ArrayList<>();

		if (index == set.size()) {
			allSubsets.add(new ArrayList<T>());
			return allSubsets;
		}

		allSubsets = getAllSubsets(set, index + 1);
		T currentElement = set.get(index);
		List<List<T>> newSubsets = new ArrayList<>();

		for (List<T> subset : allSubsets) {
			List<T> newSubset = new ArrayList<>();
			newSubset.addAll(subset);
			newSubset.add(currentElement);
			newSubsets.add(newSubset);
		}

		allSubsets.addAll(newSubsets);
		return allSubsets;
	}

}

//#define DEBUG       //comment when you have to disable all debug macros.
#include <iostream>
#include <cstring>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <climits>
#include <ctime>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <sys/time.h>
#include <iomanip>
#include <cstdarg>
#include <utility> //std::pair
#include <cassert>

using namespace std;

// Input macros
#define s(n)    scanf("%d",&n)
#define sc(n)   scanf("%c",&n)
#define sl(n)   scanf("%lld",&n)
#define sf(n)   scanf("%lf",&n)
#define ss(n)   scanf("%s",n)

//Pair macros
#define mp make_pair // useful for working with pairs
#define fi first
#define se second

#define ll long long //data types used often, but you don't want to type them time by time_t

// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back

#ifdef DEBUG
     #define debug(args...)            {cerr << #args << ": ";dbg,args; cerr<<endl;}
#else
    #define debug(args...)              // Just strip off all debug tokens
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }
} dbg;

typedef struct food{
    int p;
    int c;
    int f;
    food(int x, int y, int z){
        p = x;
        c = y;
        f = z;
    }
    bool operator==(const food &rhs){
        if(p == rhs.p && c == rhs.c && f == rhs.f)
            return true;
        return false;
    }
}food;

int main()
{
    int cases;
    cin >> cases;
    forall(t,0,cases){
        int gp,gc,gf;
        s(gp);s(gc);s(gf);
        food req = food(gp,gc,gf);
        int n;
        s(n);
        vector<food> items;
        forall(i,0,n){
            int x,y,z;
            s(x);s(y);s(z);
            items.pb(food(x,y,z));
        }
        ll int psize = pow(2,n);
        forall(counter,0,psize){
            food sum = food(0,0,0);
            forall(j,0,n){
                if(counter & (1<<j)){
                    sum.p += items[j].p;
                    sum.c += items[j].c;
                    sum.f += items[j].f;
                }
                if(sum == req){
                    goto finish;
                }
            }
        }
        cout << "Case #" << t+1 << ": " << "no";
        if(t != cases-1)
            cout << endl;
        continue;
finish:
        cout << "Case #" << t+1 << ": " << "yes";
        if(t != cases-1)
            cout << endl;
    }
}


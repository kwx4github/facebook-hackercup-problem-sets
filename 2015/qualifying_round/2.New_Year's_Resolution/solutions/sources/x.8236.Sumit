import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;


class NewYearsResolution {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(System.out, true);

	public static void main(String[] args) throws NumberFormatException, IOException {
		
		int t = Integer.parseInt(br.readLine());
		
		for(int i=1; i<=t; i++){
			String[] a = br.readLine().split(" ");
			int gp = Integer.parseInt(a[0]);
			int gc = Integer.parseInt(a[1]);
			int gf = Integer.parseInt(a[2]);
			
			
			int n = Integer.parseInt(br.readLine());
			  
			int[][] set = new int[n][3];
			for(int ii=0; ii<n; ii++){
				a = br.readLine().split(" ");
				set[ii][0] = Integer.parseInt(a[0]);
				set[ii][1] = Integer.parseInt(a[1]);
				set[ii][2] = Integer.parseInt(a[2]);
			}
			
			String prin = "";
			if(isSubset(set, n, gp, gc, gf))
		{
				prin = "yes"; }
			else
			{	prin = "no"; }
			
		    out.println("Case #"+i+": "+prin);
		}
	}
	
	public static boolean isSubset(int[][] set, int n, int p, int c, int f)
	{
	   
	   if (p == 0 && c == 0 && f == 0)
	     return true;
	   if (n == 0 && (p != 0 || c != 0 || f != 0))
	     return false;
	 
	   
	   if (set[n-1][0] > p && set[n-1][1] > c && set[n-1][2] > f)
	     return isSubset(set, n-1, p, c, f);
	 
	   
	   return isSubset(set, n-1, p, c, f) || isSubset(set, n-1, p-set[n-1][0],c- set[n-1][1], f- set[n-1][2]);
	}
	
	
}

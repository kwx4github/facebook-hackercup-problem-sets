#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <fstream>
using namespace std;

// use global vectors instead
vector<int> req; // 3
vector<int> temp;
vector<vector<int> > matrix; // up to 20 x 3

bool work(int n) {
  if (n >= (int)matrix.size()) {
    return false;
  }
  bool ok = true;
  for (int i = 0; i < 3; i++) {
    temp[i] += matrix[n][i];
    if (temp[i] != req[i])
      ok = false;
  }
  if (ok)
    return true;
  else {
    bool valOne = work(n + 1);
    for (int i = 0; i < 3; i++) {
      temp[i] -= matrix[n][i];
    }
    bool valTwo = work(n + 1);
    return valOne || valTwo;
  }
}

int main() {
  ifstream fin("30data.txt");
  ofstream fout("30ans.txt");
  int t;
  fin >> t;
  for (int i = 0; i < t; i++) {
    // start with clean slate for global variables
    vector<int> tmpOne;
    req = tmpOne;
    temp = tmpOne;
    vector<vector<int> > tmpTwo;
    matrix = tmpTwo;
    // reqs
    for (int j = 0; j < 3; j++) {
      int tmp;
      fin >> tmp;
      req.push_back(tmp);
      temp.push_back(0); // flood with zeros
    }
    int n;
    fin >> n;
    for (int j = 0; j < n; j++) {
      vector<int> tmpV;
      for (int k = 0; k < 3; k++) {
        int tmp;
        fin >> tmp;
        tmpV.push_back(tmp);
      }
      matrix.push_back(tmpV);
    }

    bool val = work(0);
    if (val) 
      fout << "Case #" << i + 1 << ": yes" << endl;
    else
      fout << "Case #" << i + 1 << ": no" << endl;
  }
  return 0;
}

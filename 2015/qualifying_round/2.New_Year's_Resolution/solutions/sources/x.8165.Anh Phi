#include <iostream>
#include <iomanip>
#include <cstdio>
#include <stack>
#include <queue>
#include <vector>
#include <cmath>
#include <string>
#include <cstring>
#include <algorithm>
#include <climits>
#include <set>
#include <map>
using namespace std;

#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define FOD(i,a,b) for(int i = (a);i > (b); --i)
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FO(i,a,b)  for(int i = (a);i < (b); ++i)
#define PI M_PI
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define FILEIN freopen("test.inp", "r", stdin)
#define FILEOUT freopen("test.out", "w", stdout)
#define OUT(v) {FO(i,0,v.size()) cout << v[i] << " "; cout << endl;}
#define DEBUG(i) {cout << "YES " << i << endl;}
typedef pair<int, int> II;
typedef long long LL;
typedef unsigned long long ULL;

struct FOOD{
	int P, C, F;
};
int a[22], p, c, f;
int n;
FOOD food[22];
int test;
bool ok;

void Try(int i) {
	FOR(j,0,1) {
		a[i] = j;
		if(i == n) {
			int sumP = 0, sumC = 0, sumF = 0;
			FOR (k, 1, n) {
				sumP += a[k] * food[k].P;
				sumC += a[k] * food[k].C;
				sumF += a[k] * food[k].F;
			}
			if(sumP == p && sumC == c && sumF == f) {
				ok = true;
				return;
			}
		} else Try(i+1);
	}
}

void solve(){
	ok = false;
	cin >> p >> c >> f;
	cin >> n;
	FOR(i,1,n)
		cin >> food[i].P >> food[i].C >> food[i].F;
	Try(1);
	cout << "Case #" << test << ": ";
	if(ok) cout << "yes" << endl;
	else cout << "no" << endl;
}

int main(){
    FILEIN;
    FILEOUT;
	int nTests;
	cin >> nTests;
	for(test = 1; test <= nTests; ++test)
    solve();
    return 0;
}


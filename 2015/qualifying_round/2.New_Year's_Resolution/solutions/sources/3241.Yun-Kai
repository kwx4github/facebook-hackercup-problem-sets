// Template.cpp by kevinptt 20140714
// #include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cmath>

#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <list>
#include <map>
#include <set>

#include <iostream>
using namespace std;

#ifdef _WIN32 // for fucking Windows
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

#define REP(I, N) for(int I=0; I<(N); ++I)
#define REP1(I, N) for(int I=1; I<=(N); ++I)
#define REPP(I, A, B) for(int I=(A); I<(B); ++I)
#define REPR(I, N) for(int I=N-1; I>=0; --I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int X; scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define MP make_pair
#define PB push_back
#define MSET(x, y) memset(x, y, sizeof(x))
#define F first
#define S second
typedef long long ll;
typedef pair<int,int> pii;

/***************************************************************/

struct xd {
	int n[3];
	bool operator<(const xd& rhs) const {
		for(int i=0; i<3; ++i) if( n[i]^rhs.n[i] ) return n[i]<rhs.n[i];
		return false;
	}
	xd operator-(const xd& rhs) const {
		xd tmp;
		tmp.n[0] = n[0]-rhs.n[0];
		tmp.n[1] = n[1]-rhs.n[1];
		tmp.n[2] = n[2]-rhs.n[2];
		return tmp;
	}
};

bool solve(int now, int st, xd s, xd all[], int sz) {
	if( !s.n[0] && !s.n[1] && !s.n[2] ) return true;
	if( s.n[0]<0 || s.n[1]<0 || s.n[2]<0 ) return false;
	for(int i=st; i<sz; ++i)
		if( solve(now-1, i+1, s-all[i], all, sz) ) return true;
	return false;
}

int main() {
#ifdef KEVINPTT
	//freopen("a.in", "r", stdin);
	//freopen("a.ans", "w", stdout);
#endif
	DRI(T);
	REP1(casen, T) {
		xd s, all[25];
		RIII(s.n[0], s.n[1], s.n[2]);
		DRI(n);
		REP(i, n)
			RIII(all[i].n[0], all[i].n[1], all[i].n[2]);
		sort(all, all+n);
		printf("Case #%d: %s\n", casen, solve(n, 0, s, all, n)?"yes":"no");
	}
	
	return 0;
}


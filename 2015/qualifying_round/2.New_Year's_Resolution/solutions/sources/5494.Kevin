#include <bits/stdc++.h>

using namespace std;
int p, c, f;

bool recurse(const vector<tuple<int, int, int>>* vec, int prev, int pc, int cc, int fc) {
	if (pc == p && cc == c && fc == f)
		return true;
	if (pc + 10 > p || cc + 10 > c || fc + 10 > f)
		return false;

	for (int i = prev + 1; i < vec->size(); i++) {
		auto tup = (*vec)[i];
		if (recurse(vec, i, pc + get<0>(tup), cc + get<1>(tup), fc + get<2>(tup)))
			return true;
	}
	return false;
}

int main() {
	int t; cin >> t;
	for (int i = 0; i < t; i++) {
		cout << "Case #" << (i + 1) << ": ";

		cin >> p >> c >> f;

		int n; cin >> n;
		vector<tuple<int, int, int>> foods(n);
		for (int o = 0; o < n; o++) {
			int pf, cf, ff; cin >> pf >> cf >> ff;
			foods[o] = make_tuple(pf, cf, ff);
		}

		cout << (recurse(&foods, -1, 0, 0, 0) ? "yes" : "no") << endl;
	}
}

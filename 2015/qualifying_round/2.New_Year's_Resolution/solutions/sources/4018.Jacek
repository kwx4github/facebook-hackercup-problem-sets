from itertools import chain, combinations

from time import time
start_time = int(time() * 1000)

t = int(raw_input())
for _ in xrange(t):

    g = raw_input()
    gp, gc, gf = map(int, g.split())
    n = int(raw_input())
    meals = []
    for i in xrange(n):
        meals.append(map(int, raw_input().split()))

    cmbs = list(chain.from_iterable(combinations(meals, jj) for jj in xrange(0, n+1)))
    sums = []
    abort = False
    for cmb in cmbs:
        psum, csum, fsum = 0, 0, 0
        for meal in cmb:
            psum += meal[0]
            if psum > gp:
                abort = True
                break
            csum += meal[1]
            if csum > gc:
                abort = True
                break
            fsum += meal[2]
            if fsum > gf:
                abort = True
                break

        if abort:
            abort = False
            continue

        sums.append([psum, csum, fsum])

    # fail faster if p, c or f dont sum

    if [gp, gc, gf] in sums:
        print "Case #%s: yes" % (_ + 1,)
    else:
        print "Case #%s: no" % (_ + 1,)
    
end_time = int(time() * 1000)
print end_time - start_time

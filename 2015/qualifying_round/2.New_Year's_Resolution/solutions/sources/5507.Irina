T = int(raw_input())



def subset_sum(numbers, target, output, partial=[], inds=[], old_i=0):
    s = sum(partial)

    if s == target: 
        output.append(inds)
    if s >= target:
        return

    for i in range(len(numbers)):
        n = numbers[i]
        remaining = numbers[i+1:]
        subset_sum(remaining, target, output, partial + [n], inds + [old_i+i], old_i+i+1) 


for t in xrange(T):
    Gp, Gc, Gf = map(int, raw_input().split())
    N=int(raw_input())

    P=[]
    C=[]
    F=[]
    for n in xrange(N):
        nutrition = map(int, raw_input().split())
        
        if(nutrition[0]<=Gp and nutrition[1]<=Gc and nutrition[2]<=Gf):
            P.append(nutrition[0])
            C.append(nutrition[1])
            F.append(nutrition[2])

    ans = "no"
    if(sum(P)<Gp or sum(C)<Gc or sum(F)<Gf):
        ans = "no"	
    else:
        ans_inds=[]
        subset_sum(P, Gp, ans_inds)
        
        for i in xrange(len(ans_inds)):
            C_data=[C[j] for j in ans_inds[i]]
            F_data=[F[j] for j in ans_inds[i]]
            if(sum(C_data)==Gc and sum(F_data)==Gf):
                ans="yes"
                break
                
    print "Case #%d: %s" % (t+1, ans)
  
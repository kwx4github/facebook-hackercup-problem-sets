#include <iostream>

using namespace std;

class vector3d {
	int v[3];

	inline const int operator [] (int ind) const {
		return v[ind];
	}

	inline int& operator [] (int ind) {
		return v[ind];
	}
public:
	vector3d(int p = 0, int c = 0, int f = 0) {
		v[0] = p;
		v[1] = c;
		v[2] = f;
	}

	inline const vector3d& operator -= (const vector3d& other) {
		for (int i = 0; i < 3; i++)
			(*this)[i] -= other[i];
		return *this;
	}

	inline const bool operator == (const vector3d& other) {
		bool match = true;
		for (int i = 0; i < 3; i++)
			match &= ((*this)[i] == other[i]);
		return match;
	}
};

int main() {
	int T;

	cin >> T;

	for (int t = 1; t <= T; t++) {
		int p, c, f;
		int N;

		cin >> p >> c >> f;
		vector3d target(p, c, f);

		cin >> N;
		vector3d food[20];
		for (int j = 0; j < N; j++) {
			cin >> p >> c >> f;
			food[j] = vector3d(p, c, f);
		}

		bool possible = false;
		for (int i = 0; i < (1 << N); i++) {
			vector3d targetLeft = target;

			for (int j = 0; j < N; j++) {
				if (i & (1 << j))
					targetLeft -= food[j];
			}

			if (vector3d() == targetLeft)
				possible = true;

			if (possible)
				break;
		}

		cout << "Case #" << t << ": " << (possible?"yes":"no") << endl;
	}

	return 0;
}

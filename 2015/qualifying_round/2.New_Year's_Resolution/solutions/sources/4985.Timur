#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
using namespace std;

typedef struct macro {
	int gp;
	int gc;
	int gf;
};

macro food[21];
macro m, sum;
vector<int> ans;
bool v[21];
int n;
bool f;

void find(int p) {
	v[p] = 1;
	ans.push_back(p);
	sum.gp += food[p].gp;
	sum.gc += food[p].gc;
	sum.gf += food[p].gf;
	if (sum.gp > m.gp || sum.gc > m.gc || sum.gf > m.gf) {
		v[p] = 0;
		ans.pop_back();
		sum.gp -= food[p].gp;
		sum.gc -= food[p].gc;
		sum.gf -= food[p].gf;
		return;
	}
	if (sum.gp == m.gp && sum.gc == m.gc && sum.gf == m.gf) {
		f = 1;
		return;
	}
	int i, j;
	for (i = p + 1; i < n; ++i) {
		if (!v[i]) find(i);
		if (f) return;
	}
	v[p] = 0;
	ans.pop_back();
	sum.gp -= food[p].gp;
	sum.gc -= food[p].gc;
	sum.gf -= food[p].gf;
}

int main() {
	freopen("new_years_resolution.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int i, j, T, p, q, t;
	string s[2] = { "no", "yes" };
	cin >> T;
	for (t = 0; t < T; ++t) {
		cin >> m.gp >> m.gc >> m.gf;
		cin >> n;

		for (i = 0; i < n; ++i) cin >> food[i].gp >> food[i].gc >> food[i].gf;
		for (i = 0; i < n - 1; ++i)
			for (j = i + 1; j < n; ++j)
				if (food[j].gp < food[i].gp || food[j].gp == food[i].gp && food[j].gc < food[i].gc ||
					food[j].gp == food[i].gp && food[j].gc == food[i].gc && food[j].gf < food[i].gf)
					swap(food[i], food[j]);

		for (i = 0; i < n; ++i) v[i] = 0;
		sum = { 0, 0, 0 };
		f = 0;
		ans.clear();
		for (i = 0; i < n; ++i) {
			find(i);
			if (f) break;
		}

		cout << "Case #" << t + 1 << ": " << s[f] << endl;
	}

	return 0;
}
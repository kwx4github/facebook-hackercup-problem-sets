#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

// compare the pair of <value, index> according to the value.
bool compare(const pair<int, int> &a, const pair<int, int> &b) {
  return a.first < b.first;
}
// Recursive function to find all the combination of a sum.
void helper(const vector<int> &v, int start_index, int remaining_to_eat,
            vector<int> head, vector<vector<int> > &output) {
  if (remaining_to_eat == 0) {
    output.push_back(head);
    return;
  }
  if (start_index == v.size())
    return;
  if (remaining_to_eat < v[start_index])
    return;
  helper(v, start_index + 1, remaining_to_eat, head, output);
  head.push_back(start_index);
  helper(v, start_index + 1, remaining_to_eat - v[start_index], head, output);
}
// Check if a combination gives the sum.
bool check_sum(const vector<int> &v, const vector<int> &index, int sum) {
  for (int i = 0; i < index.size(); ++i)
    sum -= v[index[i]];
  return sum == 0;
}
int main() {
  int T;
  cin >> T;
  for (int i = 1; i <= T; ++i) {
    int GP, GC, GF;
    cin >> GP >> GC >> GF;
    int N;
    cin >> N;
    vector<int> P;
    vector<int> C;
    vector<int> F;
    for (int j = 1; j <= N; ++j) {
      int p, c, f;
      cin >> p >> c >> f;
      if (p > GP || c > GC || f > GF) {
        continue;
      }
      P.push_back(p);
      C.push_back(c);
      F.push_back(f);
    }
    if (P.size() == 0) {
      cout << "Case #" << i << ": " << "no" <<endl;
      continue;
    }
    vector<pair<int, int> > value_index_collection(P.size());
    for (int j = 0; j < P.size(); ++j) {
      value_index_collection[j] = make_pair(P[j], j);
    }
    sort(value_index_collection.begin(), value_index_collection.end(), compare);
    vector<int> v(P.size());
    for (int j = 0; j < P.size(); ++j) {
      v[j] = value_index_collection[j].first;
    }
    vector<vector<int> > output;
    helper(v, 0, GP, vector<int>(), output);
    bool yes_to_balance = false;
    for (int j = 0; j < output.size(); ++j) {
      vector<int> original_index(output[j].size());
      for (int k = 0; k < output[j].size(); ++k) {
        original_index[k] = value_index_collection[output[j][k]].second;
      }
      if (check_sum(C, original_index, GC) && check_sum(F, original_index, GF)) {
        yes_to_balance = true;
        break;
      }
    }
    if (yes_to_balance) {
      cout << "Case #" << i << ": " << "yes" <<endl;
    } else {
      cout << "Case #" << i << ": " << "no" <<endl;
    }
  }
}

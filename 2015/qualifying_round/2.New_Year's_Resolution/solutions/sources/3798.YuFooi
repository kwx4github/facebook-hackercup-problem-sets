## python 2.7.6
## written by Y.F.L.

def sumOfSubset(lst, goal, pos, pathlst, path):
    if goal==0:
        pathlst.append(list(path))
        ##return True
    if pos >= len(lst):
        return
    val = lst[pos]
    if val > goal:
        return sumOfSubset(lst,goal,pos+1,pathlst,path)
    ##print type(path)
    newpath = list(path)
    newpath.append(pos)
    return sumOfSubset(lst,goal,pos+1,pathlst,path) or sumOfSubset(lst,goal-val,pos+1,pathlst,newpath)

    
ifname = raw_input("Input File path = ")
f = open(ifname)
linelst = f.readlines()
f.close()
ofname = raw_input("Output File path = ")
f = open(ofname, "w")
T = int(linelst[0])
L = 0
for i in range(T):
    Glst = linelst[L+1].split()
    Gp = int(Glst[0])
    Gc = int(Glst[1])
    Gf = int(Glst[2])
    Gt = Gp + Gc + Gf
    L = L+1
    N = int(linelst[L+1])
    L = L+1
    foodlst = linelst[(L+1):(L+1+N)]
    L = L+N
    Fp = []
    Fc = []
    Ff = []
    ##Ft = []
    pathP = []
    pathC = []
    pathF = []
    pathlstP = []
    pathlstC = []
    pathlstF = []
    minPart = "X"
    result = "no"
    ##print "Case"+str(i)
    for j in range(len(foodlst)):
        ##print "food"+str(j)
        tmplst = foodlst[j].split()
        Fp.append(int(tmplst[0]))
        Fc.append(int(tmplst[1]))
        Ff.append(int(tmplst[2]))
        ##Ft.append(Fp[j]+Fc[j]+Ff[j])
    sumOfSubset(Fp,Gp,0,pathlstP,pathP)
    if len(pathlstP)!=0:
        sumOfSubset(Fc,Gc,0,pathlstC,pathC)
        if len(pathlstC)!=0:
            sumOfSubset(Ff,Gf,0,pathlstF,pathF)
            if len(pathlstF)!=0:
                if len(pathlstP)<=len(pathlstC) and len(pathlstP)<=len(pathlstF):
                    minPart = "P"
                elif len(pathlstC)<=len(pathlstP) and len(pathlstC)<=len(pathlstF):
                    minPart = "C"
                elif len(pathlstF)<=len(pathlstP) and len(pathlstF)<=len(pathlstC):
                    minPart = "F"
    if minPart == "P":
        for k in range(len(pathlstP)):
            comb = pathlstP[k]
            if pathlstC.count(comb)>0 and pathlstF.count(comb)>0:
                result = "yes"
                break
    elif minPart == "C":
        for k in range(len(pathlstC)):
            comb = pathlstC[k]
            if pathlstP.count(comb)>0 and pathlstF.count(comb)>0:
                result = "yes"
                break
    elif minPart == "F":
        for k in range(len(pathlstF)):
            comb = pathlstF[k]
            if pathlstP.count(comb)>0 and pathlstC.count(comb)>0:
                result = "yes"
                break
    f.write("Case #"+str(i+1)+": "+result+"\n")   
f.close()

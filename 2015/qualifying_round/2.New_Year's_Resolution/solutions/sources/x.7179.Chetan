/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package tweakingnumber;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 *
 * @author chetan
 */
public class NewYear {
    public static void main(String[] args) throws FileNotFoundException{
        Scanner scanner=new Scanner(new File("C:\\Users\\chetan\\Downloads\\new_years_resolution.txt"));
        int ntc=scanner.nextInt();
        scanner.nextLine();
        for(int testcase=1;testcase<=ntc;testcase++){
            
            int gp=scanner.nextInt();int gc=scanner.nextInt();int gf=scanner.nextInt();
            scanner.nextLine();
            int totalfood=scanner.nextInt();
            scanner.nextLine();
            int[] setp=new int[totalfood];int[] setc=new int[totalfood];int[] setf=new int[totalfood]; 
            for(int j=0;j<totalfood;j++){
                setp[j]=scanner.nextInt();setc[j]=scanner.nextInt();setf[j]=scanner.nextInt();scanner.nextLine();
            }
            
            //System.out.println(isSubsetSum(setp, totalfood, gp));
            //System.out.println(isSubsetSum(setc, totalfood, gc));
           // System.out.println(isSubsetSum(setf, totalfood, gf));
            
            if(isSubsetSum(setp, totalfood, gp)&&isSubsetSum(setc, totalfood, gc)&&isSubsetSum(setf, totalfood, gf)){
            //if(hasSum(setp, gp)&&hasSum(setc, gc)&&hasSum(setf, gf)){
                System.out.println("Case #"+testcase+": yes");
            }else{
                System.out.println("Case #"+testcase+": no");
            }
            
                    
            
        }
       //
        
    }
    
    
    //

public static boolean isSubsetSum(int set[], int n, int sum){
    
    
// Base Cases
   if (sum == 0)
     return true;
   if (n == 0 && sum != 0)
     return false;
 
   // If last element is greater than sum, then ignore it
   if (set[n-1] > sum)
     return isSubsetSum(set, n-1, sum);
 
   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sum-set[n-1]);
}
///

 public static boolean hasSum(int [] array, int sum)
    {
        int len = array.length;
        boolean[][] table = new boolean[sum+1][len+1];
        
        int i;
        
        //If sum is zero; empty subset always has a sum 0; hence true
        for( i = 0; i <= len; i++ )
            table[0][i] = true;
        
        //If set is empty; no way to find the subset with non zero sum; hence false
        for( i = 1; i <= sum; i++ )
            table[i][0] = false;
        
        //calculate the table entries in terms of previous values
        for( i = 1; i <= sum; i++ )
        {
            for( int j = 1; j <= len; j++ )
            {
                table[i][j] = table[i][j-1]; 
                
                if( !table[i][j] && i >= array[j-1] )
                    table[i][j] = table[i-array[j-1]][j-1];
            }
        }        
        
        return table[sum][len];
    }
    
    
}


 
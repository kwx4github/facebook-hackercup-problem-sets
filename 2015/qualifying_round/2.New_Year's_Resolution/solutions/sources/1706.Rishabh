#include<iostream>
#include<string.h>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<cmath>
#include<map>
#include<bitset>
using namespace std;
#define ll long long
#define MOD 1000000009
#define infi (int)1e9
#define FOR(i,a,b) for(i = a; i < b; i++)
#define FORD(i,a,b) for(i = a; i >= b; i--)
#define REP(i,a) for(i = 0;i <= a; i++)
#define REPD(i,a) for(i = a; i >= 0; i--)
#define s(n)  scanf("%d", &n)
#define sc(n)  scanf("%c", &n)
#define sl(n) scanf("%lld", &n)
#define sf(n) scanf("%f", &n)
#define ss(n) scanf("%s", n);
#define all(a) a.begin(), a.end()
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define fill(a, v) memset(a, v, sizeof(a))
#define PI 3.1415926535897932384626

int main()
{
    FILE *fp = fopen("new_years_resolution.txt", "r");
    FILE *fo = fopen("output.txt", "w");

    int t, index = 1;
    fscanf(fp, "%d", &t);
    while(t--) {
        fprintf(fo, "Case #%d: ", index);
        index++;
        int n, gp, gc, gf;
        fscanf(fp, "%d%d%d%d",  &gp, &gc, &gf, &n);
        //cout <<"   |  "<< n <<endl;
        int i, j, k;
        int a[n][3];
        FOR(i, 0, n) {
            fscanf(fp, "%d%d%d", &a[i][0], &a[i][1], &a[i][2]);
        }
        //int dp[1 << n];
        int flag = 0;
        FOR(i, 1, (1 << n)) {

            int p , c, f;
            p = c = f = 0;
            FOR(j, 0, n) {
                int mask = (1 << j);
                if((mask & i) != 0) {
                    p += a[j][0];
                    c += a[j][1];
                    f += a[j][2];
                }

            }
           // if(t == 0)
           // cout << i << "     "<< p <<"    "<< c <<"     "<<f <<endl;
            if(p == gp && c == gc && f == gf) {
                fprintf(fo, "yes\n");
              //  cout << "yes\n";
                flag = 1;
                break;
            }
        }
        if(!flag) {
          //  cout << "no\n";
            fprintf(fo, "no\n");
        }
    }
    return 0;
}

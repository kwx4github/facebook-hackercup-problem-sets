#include <iostream>
#include <vector>

struct Food {
	int p;
	int c;
	int f;

	Food( int np, int nc, int nf ): p(np), c(nc), f(nf) {}
};

bool compute( int rp, int rc, int rf, int i, std::vector<Food> &ls ) {
	// std::cout << rp << " " << rc <<  " " << rf << std::endl;
	if ( rp == 0 && rc == 0 && rf == 0 ) return true;
	if ( rp < 0 || rc < 0 || rf < 0 ) return false;

	for ( int j = i; j < ls.size(); ++j )
		if ( compute( rp-ls[j].p, rc-ls[j].c, rf-ls[j].f, j+1, ls ) )
			return true;

	return false;
}

int main() {
	int cases, test = 1;
	std::cin >> cases;

	while ( test <= cases ) {
		int p, c, f, num;
		std::cin >> p >> c >> f;
		Food goal = Food( p, c, f );

		std::vector<Food> ls;
		std::cin >> num;
		while ( num-- ) {
			std::cin >> p >> c >> f;
			ls.push_back( Food( p, c, f ) );
		}

		std::cout << "Case #" << test << ": ";
		bool res = false;
		for ( int i = 0; i < ls.size(); ++i ) {
			res = compute( goal.p, goal.c, goal.f, i, ls );
			if ( res ) {
				std::cout << " yes" << std::endl;
				break;
			}
		}

		if ( !res ) std::cout << " no" << std::endl;
		++test;
	}
}

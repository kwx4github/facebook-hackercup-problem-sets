package main

import "fmt"

type Food struct {
	p int
	c int
	f int
}

func recurse(gp, gc, gf, i int, food []Food, consumed []bool, match *bool) {
	if *match {
		return
	}

	if consumed[i] {
		return
	}

	consumedCopy := make([]bool, len(consumed))
	copy(consumedCopy, consumed)
	consumedCopy[i] = true

	gp -= food[i].p
	if gp < 0 {
		return
	}

	gc -= food[i].c
	if gc < 0 {
		return
	}

	gf -= food[i].f
	if gf < 0 {
		return
	}

	if gp == 0 && gc == 0 && gf == 0 {
		*match = true
		return
	}

	for j := 0; j < len(food); j++ {
		recurse(gp, gc, gf, j, food, consumedCopy, match)
	}
}

func solve(n int) {
	var gp, gc, gf int
	fmt.Scanf("%d %d %d\n", &gp, &gc, &gf)

	var foods int
	fmt.Scanf("%d\n", &foods)

	food := make([]Food, foods)
	for i := 0; i < foods; i++ {
		fmt.Scanf("%d %d %d\n", &food[i].p, &food[i].c, &food[i].f)
	}

	consumed := make([]bool, foods)

	match := false
	for i := 0; i < foods; i++ {
		recurse(gp, gc, gf, i, food, consumed, &match)
	}

	if match {
		fmt.Printf("Case #%d: yes\n", n)
	} else {
		fmt.Printf("Case #%d: no\n", n)
	}
}

func main() {
	var N int
	fmt.Scanf("%d\n", &N)
	for i := 1; i <= N; i++ {
		solve(i)
	}
}

#include <iostream>
#include <vector>

using namespace std;

struct Food {
    int p, c, f;
};

bool operator==(const Food& f1, const Food& f2)
{
    return f1.p == f2.p && f1.c == f2.c && f1.f == f2.f;
}

bool operator<(const Food& f, const int n)
{
    return f.p < n || f.c < n || f.f < n;
}

Food operator-(const Food& f1, const Food& f2)
{
    return Food {
        f1.p - f2.p,
        f1.c - f2.c,
        f1.f - f2.f,
    };
}

template <typename T>
bool canMakeSum(vector<T>& x, T target)
{
    function<bool(int, T)> Q = [&](int i, T s) {
        if (s < 0)
            return false;

        if (i == 0)
            return x[i] == s;

        return x[i] == s || Q(i - 1, s) || Q(i - 1, s - x[i]);
    };

    return Q(x.size(), target);
}

int main()
{
    int T;
    cin >> T;

    for (int c = 1; c <= T; ++c) {
        Food target;
        scanf("%d %d %d", &target.p, &target.c, &target.f);

        int N;
        cin >> N;
        vector<Food> foods;
        for (int i = 0; i < N; ++i) {
            Food food;
            scanf("%d %d %d", &food.p, &food.c, &food.f);
            foods.push_back(food);
        }

        printf("Case #%d: %s\n", c, canMakeSum(foods, target) ? "yes" : "no");
    }

    return 0;
}


#include <iostream>
#include <stdio.h>
#include <vector>

using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

struct Triple {
	int a;
	int b;
	int c;
};

//Triple::Triple(int a = 0, int b =0, int c = 0):a(a),b(b),c(c){}; 

bool compFunc(Triple &first, Triple &second)
{
	return first.a < second.a;
}

bool recur(int curIndex, Triple prevSum, vector<Triple> &food, Triple &goal)
{
	if(curIndex >= food.size())
		return false;
	
	Triple curSum;
	curSum.a = prevSum.a + food[curIndex].a;
	curSum.b = prevSum.b + food[curIndex].b;
	curSum.c = prevSum.c + food[curIndex].c;
	
	if(curSum.a == goal.a && curSum.b == goal.b && curSum.c == goal.c )
		return true;
	else if(curSum.a >= goal.a || curSum.b >= goal.b || curSum.c >= goal.c)
	{
		for(int x = 1; curIndex + x < food.size() ; ++x)
			if(recur(curIndex + x, prevSum, food, goal ))
				return true;
	}
	else
	{
		for(int x = 1; curIndex + x < food.size() ; ++x)
			if(recur(curIndex + x, curSum, food, goal ))
				return true;
	}
	
	return false;
}

int main(int argc, char** argv) {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	
	int t = 0;
	cin >> t;
	
	for(int x = 0; x < t; ++x)
	{
		if(x!=0)
			cout << '\n';
		
		int n;
		Triple goal;
		cin >> goal.a >> goal.b >> goal.c >> n;
		
		vector<Triple> food(n);
		
		for(int y = 0; y < n; ++y)
			cin >> food[y].a >> food[y].b >> food[y].c;
			
		Triple prevSum;
		if(recur(0,prevSum, food, goal))
			cout << "Case #" << x+1 << ": yes";
		else
			cout << "Case #" << x+1 << ": no";
	}
}

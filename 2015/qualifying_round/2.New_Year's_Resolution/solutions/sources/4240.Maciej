#include <stdio.h>

#define MAX_N 20

void nextPerm (int *perm, int k)
{
	int i;
	bool tmpBool = true;
	for (int i=0; i!=k; i++)
	{
		if (tmpBool)
		{
			if (perm[i] == 0)
			{
				perm[i] = 1;
				tmpBool = false;
			}
			else if (perm[i] == 2)
			{
				tmpBool = false;
				perm[i] = 0;
				perm[i+1] = perm[i+1] + 1;
			}
			else
				perm[i] = 0;
		}
	}
}

bool validate (int P, int C, int F, int k, int kcal[][3])
{
	int perm[k];
	int tmpINT;
	int Gp, Gc, Gf;
	bool tmpBool = false;
	for (int i=0; i!=k; ++i)
		perm[i] = 0;
	
	while (!tmpBool)
	{
		Gp = Gc = Gf = 0;
		tmpINT = 1;
		
		for (int i=0; i!=k; ++i)
		{
			if (perm[i] == 1)
			{
				Gp += kcal[i][0];
				Gc += kcal[i][1];
				Gf += kcal[i][2];
			}
		}
		
		if (Gp == P && Gc == C && Gf == F)
			return true;
		
		for (int i=0; i!=k; ++i)
			if (perm[i] == 0)
				tmpINT = 0;

		if (tmpINT == 1)
			tmpBool = true;
		
		nextPerm (perm, k); // it's possible to add at least 1
	}
	return false;
}

int main()
{
	int T, N;
	int Gp, Gc, Gf;
	int P, C, F;
	int i, j, k; // Iterators. k is for optimalization
	int kcal[MAX_N][3];
	
	
	scanf("%d", &T);
	
	for (i=0; i!=T; ++i)
	{
		for (j=0; j!=MAX_N; ++j)
		{
			kcal[j][0] = 0;
			kcal[j][1] = 0;
			kcal[j][2] = 0;
		}
		k = 0;
		scanf("%d %d %d", &Gp, &Gc, &Gf);
		scanf("%d", &N);
		

		for (j=0; j!=N; ++j)
		{
			scanf("%d %d %d", &P, &C, &F);
			if (P <= Gp && C <= Gc && F <= Gf)
			{
				kcal[k][0] = P;
				kcal[k][1] = C;
				kcal[k][2] = F;
				k++;             // k is always in range 0-20
			}
		}
		
		if (k == 0)
			printf("Case #%d: no\n", i+1);
		else
		{
			if (validate(Gp, Gc, Gf, k, kcal))
				printf("Case #%d: yes\n", i+1);
			else
				printf("Case #%d: no\n", i+1);
		}
	}
}
#include <stdio.h>
#include <stdlib.h>

typedef struct
{
	int C;
	int P;
	int F;
}Components;

Components add(Components a, Components b)
{
	Components r;
	r.C = a.C + b.C;
	r.P = a.P + b.P;
	r.F = a.F + b.F;
	return r;
}

int cmp(Components a, Components b)
{
	if (b.C > a.C || b.P > a.P || b.F > a.F)
		return 1;
	if (b.C == a.C && b.P == a.P && b.F == a.F)
		return 0;
	return -1;
}

int isDiet(Components needed, Components currentComponents,
	Components available[], int N, int currentIndex)
{
	int cmpResult = cmp(needed, currentComponents);
	if (cmpResult == 0)
		return 1;
	if (cmpResult > 0 || currentIndex >= N)
		return 0;
	return isDiet(needed, add(currentComponents, available[currentIndex]),
			available, N, currentIndex + 1) ||
		isDiet(needed, currentComponents, available, N, currentIndex + 1);
	
}

int main()
{
	int N;
	int T;
	Components needed;
	Components blank;
	Components available[20];
	blank.C = 0;
	blank.P = 0;
	blank.F = 0;
	scanf("%d", &N);
	for (int i = 0; i < N; i ++)
	{
		scanf("%d %d %d %d", &needed.C, &needed.P, &needed.F, &T);
		for (int j = 0; j < T; j ++)
			scanf("%d %d %d", &available[j].C, &available[j].P,&available[j].F);
		printf("Case #%d: %s\n",i + 1, isDiet(needed, blank, available, T, 0) ?
			"yes" : "no");
	}
	return 0;
}

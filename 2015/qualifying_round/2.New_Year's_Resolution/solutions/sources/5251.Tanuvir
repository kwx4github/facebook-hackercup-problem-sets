import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;


public class NewYears {
	
	public static void main(String args[]) throws IOException {
		
	
		String path = "/Users/tanuvir_singh/new_years_resolution.txt";
		
		BufferedReader br = new BufferedReader(new FileReader(path));
		String line;
		line = br.readLine();
		
		int total = Integer.parseInt(line);
		
		for(int i = 1; i<= total; i++){
			line = br.readLine();
			
			String[] finalScores = line.split("\\s");
			
			int p = Integer.parseInt(finalScores[0]);
			int c = Integer.parseInt(finalScores[1]);
			int f = Integer.parseInt(finalScores[2]);

			boolean result = false;
			
			line = br.readLine();
			int totalLines = Integer.parseInt(line);
			
			ArrayList<FoodItem> foodItems = new ArrayList<FoodItem>();

			for(int t =1;t<=totalLines;t++){
				
				line = br.readLine();

				String[] curr = line.split("\\s");							

				int curr_p = Integer.parseInt(curr[0]);
				int curr_c = Integer.parseInt(curr[1]);
				int curr_f = Integer.parseInt(curr[2]);
				
				// Validate if current food item violates the requirements
				// i.e. If any of the food component is greater than the required diet, it will not be eaten.
				if(curr_p > p || curr_c > c || curr_f > f) {
					continue;
				}
				
				FoodItem foodItem = new FoodItem();
				
				foodItem.g_P = curr_p;
				foodItem.g_C = curr_c;
				foodItem.g_F = curr_f;
				
				foodItems.add(foodItem);		
				
			}
			
			int items = foodItems.size();
		
			int t_p = 0;
			int t_c = 0;
			int t_f = 0;
			
			// Generate binary numbers for no. of items and calculate the cumulative nutrients 
			for(int j =0; j < Math.pow(2, items);j++) {
				
				if(result) {	// Already found a positive combination. No need to try remaining combinations
					break;
				}
				
				//System.out.println(items + " " + j);
				
				String convertedBinary = Integer.toString(j, 2);
				
				String zeroes = "";
				for(int l=0;l<(items-convertedBinary.length());l++) {
					zeroes+= "0";
				}
				
				String format = zeroes + convertedBinary;
							
				t_p = 0;
				t_c = 0;
				t_f = 0;
				
				for(int k=0; k<items; k++) {
					
					if(format.charAt(k) == '1'){
						FoodItem foodItem = foodItems.get(k);
						
						t_p += foodItem.g_P;
						t_c += foodItem.g_C;
						t_f += foodItem.g_F;
						
						if(p < t_p || c < t_c || f < t_f) {
							break;	
						}
					}
					
					if(p == t_p && c == t_c && f == t_f) {
						result = true;	//found a valid combination 
						break;
					}
				}
				
			}	
			
			foodItems.clear(); 
			foodItems = null; 
			
			System.out.println("Case #" + i + " " + (result ? "yes" : "no"));
		}

		br.close();
		
	}
}

class FoodItem {
	
	int g_P;
	int g_C;
	int g_F;
	
}

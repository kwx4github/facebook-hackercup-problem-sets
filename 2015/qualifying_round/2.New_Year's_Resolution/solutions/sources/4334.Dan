<?php
/**
 * Alex's New Year's resolution for 2015 is to eat healthier foods. He's done some research and has found out that calories come from three main sources, called macronutrients: protein,
 * carbohydrates, and fat. Alex wants to get the right balance of protein, carbohydrates, and fat to have a balanced diet. For each available food,
 * Alex can only choose to eat it or not eat it. He can't eat a certain food more than once, and he can't eat a fractional amount of a food.
 *
 * Input
 *
 * Input beings with an integer T, the number of test cases. For each test case, the first line consists of three space-separated integers: GP, GC, and GF,
 * which represent the amount of protein, carbohydrates, and fat that Alex wants to eat. The next line has the number of foods for that test case, an integer N.
 * The next N lines each consist of three space-separated integers: P, C, and F, which represent the amount of protein, carbohydrates, and fat in that food, respectively.
 *
 * Output
 *
 * For each test case i, print a line containing "Case #i: " followed by either "yes" if it is possible for Alex to eat the exact amount of each macronutrient, or "no" if it is not possible.
 *
 * Constraints
 *
 * 1 ≤ T ≤ 20
 * 1 ≤ N ≤ 20
 * 10 ≤ GP, GC, GF ≤ 1000
 * 10 ≤ P, C, F ≤ 1000
 */

ini_set("memory_limit","1024M");
ini_set('auto_detect_line_endings', true);
set_time_limit(0);

$start = microtime(true);
$file = "input.txt";
$output = "output.txt";
$debug = true;

$input = file($file);
$total = array_shift($input);
$gcount = 0;

if ($debug === true){
	print_r('Test cases: '. $total);
	// print_r($input);
}

// Open output file
$fp = fopen($output, 'w');

// Start solving here ---
for ($i = 0; $i < $total; $i++)
{
	list($GP, $GC, $GF) = explode(' ', array_shift($input));
	$GP = intval($GP);
	$GC = intval($GC);
	$GF = intval($GF);
	$totalFoods = intval(array_shift($input));

	$foods = [
		0 => [],
		1 => [],
		2 => [],
	];

	for ($j = 0; $j < $totalFoods; $j++)
	{
		$values = explode(' ', array_shift($input));

		$foods[0][] = intval($values[0]);
		$foods[1][] = intval($values[1]);
		$foods[2][] = intval($values[2]);
	}

	$solutions = [];
	$possible = hasSolutions($foods, [
		$GP, $GC, $GF
	]);

	output($fp, $i + 1, $possible ? 'yes' : 'no');
}

// Close output file...
fclose($fp);

// ------- Functions
function hasSolutions($numbers, $sums)
{
	// The total numbers in the list
	$num = count($numbers[0]);

	// The total number of combinations
	$total = pow(2, $num);

	// Loop through each combination
	for ($i = 0; $i < $total; $i++)
	{
		$seriesSum = [0 => 0, 1 => 0, 2 => 0];

		// Combine each number
		for ($j = 0; $j < $num; $j++)
		{
			if (pow(2, $j) & $i)
			{
				// GP
				$seriesSum[0] += $numbers[0][$j];

				// GC
				$seriesSum[1] += $numbers[1][$j];

				// GF
				$seriesSum[2] += $numbers[2][$j];

				if ( $seriesSum[0] == $sums[0]
						&& $seriesSum[1] == $sums[1]
						&& $seriesSum[2] == $sums[2])
					return true;

				if ($seriesSum[0] > $sums[0] || $seriesSum[1] > $sums[1] || $seriesSum[2] > $sums[2]) break;
			}
		}
	}

	return false;
}

function output($fp, $case, $value)
{
	$out = sprintf("Case #%d: %s\n", $case, $value);
	print_r($out);
	fwrite($fp, $out);
}

// ------- Execution time
if ($debug) {
	$time_taken = microtime(true) - $start;
	print_r("\n".'Total time: '. $time_taken . "\n");
}
#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)
#define SZ(v)					(int) v.size()
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 1e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

struct food {
	int p, c, f;
	food() {

	}
	food(int pp, int cc, int ff) {
		p = pp, c = cc, f = ff;
	}
};

int main() {
	freopen("in2.txt", "rt", stdin);
	freopen("out2.txt", "wt", stdout);
	int t, n;
	cin >> t;
	int gp, gc, gf;
	int p, c, f;
	for (int tt = 1; tt <= t; tt++) {
		scanf("%d %d %d", &gp, &gc, &gf);
		scanf("%d", &n);
		vector<food> foods(n);
		for (int i = 0; i < n; i++) {
			scanf("%d %d %d", &p, &c, &f);
			foods[i] = food(p, c, f);
		}
		bool canEat = false;
		for (int msk = 0; msk < (1 << n); msk++) {
			p = 0, c = 0, f = 0;
			for (int i = 0; i < n; i++)
				if (msk & (1 << i))
					p += foods[i].p, c += foods[i].c, f += foods[i].f;
			if (gp == p && gc == c && gf == f) {
				canEat = true;
				break;
			}
		}
		printf("Case #%d: ", tt);
		if (canEat)
			printf("yes\n");
		else
			printf("no\n");
	}
	return 0;
}

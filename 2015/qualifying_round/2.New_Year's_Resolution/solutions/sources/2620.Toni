using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;

namespace NewYearsResolution
{
	class MainClass
	{
		public static void Main (string[] args)
		{
			using (var file = File.OpenText ("input.txt")) {
				var cases = file.ReadLine ().ToLong ();
				for (var i = 0; i < cases; ++i) {
					var g = file.ReadLine()
						.Split(new []{" "}, StringSplitOptions.RemoveEmptyEntries)
						.Select(s=>s.ToLong())
						.ToList();

					long gp = g[0], gc=g[1], gf=g[2];

					var n = file.ReadLine ().ToLong ();
					 food =
						Enumerable.Range (0, (int)n)
							.Select (j => file.ReadLine ()
								.Split (new []{ " " }, StringSplitOptions.RemoveEmptyEntries)
								.Select (s => s.ToLong ())
								.ToArray ())
							.ToList ();

					food.Sort ((l,r)=>l[0].CompareTo(r[0]));

					bool can = false;
					for (var index = 0; index < food.Count; ++index) {
						if (can = Can (new List<int>{ index }, food[index],index+1,g)) {
							break;
						}
					}

					Console.WriteLine ("Case #{0} {1}", i + 1, can ? "yes" : "no");
				}
			}
		}

		private static List<long[]> food;

		private static bool Can(List<int> indices, long[] total, int next, List<long> g){
			if (total [0] == g [0] &&
			    total [1] == g [1] &&
			    total [2] == g [2])
				return true;
			if (total [0] > g [0] ||
			    total [1] > g [1] ||
			    total [2] > g [2])
				return false;

			for (var index = next; index < food.Count; ++index) {
				indices.Add (index);
				if (Can (indices, sum (total, food [index]), index + 1, g))
					return true;
					indices.RemoveAt(indices.Count - 1);
			}

			return false;
		}

		static long[] sum(long[] l, long[] r)
		{
			var result = new long[Math.Min (l.Length, r.Length)];
			for (var i = 0; i < result.Length; ++i) {
				result [i] = l [i] + r [i];
			}
			return result;
		}
	}

	public static class Extensions
	{
		public static long ToLong(this string text)
		{
			return long.Parse (text);
		}
	}
}

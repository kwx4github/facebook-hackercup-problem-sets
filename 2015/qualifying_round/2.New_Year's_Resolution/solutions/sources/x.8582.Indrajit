#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int isSubsetSum(int set[], int n, int sum)
{
   // Base Cases
   if (sum == 0)
     return 1;
   if (n == 0 && sum != 0)
     return 0;

   // If last element is greater than sum, then ignore it
   if (set[n-1] > sum)
     return isSubsetSum(set, n-1, sum);

   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sum-set[n-1]);
}


void merge(int *ele,int l1,int u1,int l2,int u2)
{
    int i,j,k,arr[90];
    k = 0;
    i = l1;
    j = l2;

    while(i <= u1 && j <= u2)
    {
        if(ele[i] <= ele[j])
            arr[k++] = ele[i++];
        else
            arr[k++] = ele[j++];
    }

    while(j <= u2)
        arr[k++] = ele[j++];
    while(i <= u1)
        arr[k++] = ele[i++];

    j = l1;
    for(i=0;i<k;i++)
        ele[j++] = arr[i];

}


void merge_sort(int *ele,int lower,int upper)
{
    int mid;
    if(lower < upper)
    {
        mid = (lower + upper)/2;
        merge_sort(ele,lower,mid);
        merge_sort(ele,mid+1,upper);
        merge(ele,lower,mid,mid+1,upper);
    }
}



int main()
{
    FILE *question;
    FILE *solution;
    int t,n,g_p,g_c,g_f,p,c,f,i,j,k,total_needed,ele[30];
    question = fopen("new_years_resolution.txt","r");
    solution = fopen("solution.txt","w");

    fscanf(question,"%d",&t);
    k = 1;
    while(t--)
    {
        fscanf(question,"%d",&g_p);
        fscanf(question,"%d",&g_c);
        fscanf(question,"%d",&g_f);

        total_needed = g_p + g_c + g_f;

        fscanf(question,"%d",&n);
        for(i=0;i<n;i++)
        {
            fscanf(question,"%d",&p);
            fscanf(question,"%d",&c);
            fscanf(question,"%d",&f);

            ele[i] = p + c + f;
        }

        //merge_sort(ele,0,n-1);
        if(isSubsetSum(ele,n,total_needed) == 1)
            fprintf(solution,"Case #%d: yes\n",k);
        else
            fprintf(solution,"Case #%d: no\n",k);

        k++;
    }


    return 0;
}

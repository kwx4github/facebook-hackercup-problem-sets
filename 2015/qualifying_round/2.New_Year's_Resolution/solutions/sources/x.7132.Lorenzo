#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

int ind_max(int A[], int b, int n){
    int i, max=A[b], i_max=-1;
    for (i=b; i<n; i++){
        if (A[i]>max){
            max=A[i];
            i_max=i;
        }
    }
    return i_max;
}

void sort(int P[], int C[], int F[], int b, int n, char a){
    int i, tmp[3], i_max;
    for (i=b; i<n-1; i++){
        tmp[0]=P[i];
        tmp[1]=C[i];
        tmp[2]=F[i];
        if (a=='P') i_max=ind_max(P, i, n);
        else if (a=='C') i_max=ind_max(C, i, n);
        else if (a=='F') i_max=ind_max(F, i, n);
        if (i_max>=0){
            P[i]=P[i_max];
            C[i]=C[i_max];
            F[i]=F[i_max];
            P[i_max]=tmp[0];
            C[i_max]=tmp[1];
            F[i_max]=tmp[2];
        }
    }

}

int possibilities(int G[], int P[], int C[], int F[], int b, int n, int sum[], int first_call, int* p){
    int i;
    for (i=b; i<n && !(*p); i++){
        if (first_call){
            sum[0]=P[i];
            sum[1]=C[i];
            sum[2]=F[i];
        } else {
            sum[0]+=P[i];
            sum[1]+=C[i];
            sum[2]+=F[i];
        }
        if (sum[0]==G[0] && sum[1]==G[1] && sum[2]==G[2]){
             *p=1;
        }
        if (sum[0]<G[0] && sum[1]<G[1] && sum[2]<G[2]){
            while (sum[0]+P[i+1]>G[0] || sum[1]+C[i+1]>G[1] || sum[2]+F[i+1]>G[2])
                i++;
            if (sum[0]+P[i+1]<=G[0] && sum[1]+C[i+1]<=G[1] && sum[2]+F[i+1]<=G[2]);
                possibilities(G, P, C, F, i+1, n, sum, 0, p);
        }
    }
}

int main(){
    FILE *fin, *fout;
    int tests, i, j, n, G[3], P[20], C[20], F[20], X[20], to_visit[20], ok, sum[3]={0, 0, 0};
    fin=fopen("input.txt", "r");
    fout=fopen("output.txt", "w");
    fscanf(fin, "%i", &tests);
    for (i=0; i<tests; i++){
        for (j=0; j<3; j++)
            fscanf(fin, "%i", &G[j]);
        fscanf(fin, "%i", &n);
        for (j=0; j<n; j++){
            fscanf(fin, "%i", &P[j]);
            fscanf(fin, "%i", &C[j]);
            fscanf(fin, "%i", &F[j]);
        }
        ok=0;
        sort(P, C, F, 0, n, 'P');
        for (j=0; j<n; j++){
            possibilities(G, P, C, F, j, n, sum, 1, &ok);
        }
        fprintf(fout, "Case #%i: %s\n", i+1, (ok==1 ? "yes" : "no"));
    }
    return 0;
}

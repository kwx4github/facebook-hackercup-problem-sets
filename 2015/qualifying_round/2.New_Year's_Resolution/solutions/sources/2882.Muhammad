#include <iostream>
#include <vector>
#include <cstdio>
#include <bitset>
#include <utility>

using namespace std;

class macronutrient {
public:
    macronutrient(int p, int c, int f) {
        this->p = p;
        this->c = c;
        this->f = f;
    }
    macronutrient() {
        this->p = 0;
        this->c = 0;
        this->f = 0;   
    }
    macronutrient(const macronutrient& b) {
        this->p = b.p;
        this->c = b.c;
        this->f = b.f;
    }
    int p;
    int c;
    int f;
    bool equal(const macronutrient& b) const{
        return p == b.p && c == b.c && f == b.f;
    }
    macronutrient add(const macronutrient& b) {
        return macronutrient(p+b.p, c+b.c, f+b.f);
    }
};

unsigned long find(const vector<macronutrient>& data, int depth, macronutrient state, const macronutrient& goal) {
    if (depth == data.size()) {
        return goal.equal(state);
    } else {
        bool found = false;
        found |= find(data, depth+1, state.add(data[depth]), goal);
        found |= find(data, depth+1, state, goal);
    }
}

void execute(int tc){
    macronutrient goal;
    scanf ("%d %d %d", &goal.p, &goal.c, &goal.f);
    int N;
    cin >> N;
    vector<macronutrient> data(N, macronutrient());
    for (int i=0; i<N; i++) {
        scanf("%d %d %d", &data[i].p, &data[i].c, &data[i].f);
    }
    vector<macronutrient*> saved(bitset<20>().set().to_ulong(), NULL);
    bool result = find(data, 0, macronutrient(), goal);
    if (result) {
        printf("Case #%d: yes\n", tc);
    } else {
        printf("Case #%d: no\n",tc);
    }
}

int main() {
    
    int TC;
    cin >> TC;
    for (int i=1; i<=TC; i++) {
        execute(i);
    }
}
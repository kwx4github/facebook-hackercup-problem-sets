#include <bits/stdc++.h>

using namespace std;

#define rep(i,n) for(int i=0;i<n;++i)
#define Rep(i,n) for(int i=1;i<=n;++i)
#define rrep(i,n) for(int i=n-1;0<=i;--i)
#define rRep(i,n) for(int i=n;0<i;--i)
#define range(i,a,b) for(int i=(a);i<(b);++i)
#define scani(a) scanf("%d",&a)
#define scanr(a) scanf("%lf",&a)
#define scans(s) scanf("%s",s)
#define printi(a) printf("%d",a)
#define printr(a) printf("%lf",a)
#define prints(s) printf("%s",s)
#define is_odd(n) (n&1)
#define is_even(n) ((n+1)&1)
#define mp make_pair
#define pb push_back
#define fst first
#define snd second
#define all(x) x.begin(), x.end()
#define EPS 1e-8
#define INF 1e8
#define PI acos(-1.0)

typedef double Real;
typedef int Int;
typedef vector<Int> vi;
typedef vector<vector<Int> > vvi;
typedef pair<Int,Int> pii;

inline Real sr(Real a) {return sqrt(max(a, (Real)0));}
template <typename T> inline T sq(T a) {return a * a;}
const vi dy = {-1, 0, 1, 0}, dx = {0, -1, 0, 1};
vector<string> split(const string &s, char d) {vector<string> r;stringstream t(s);string x;while(getline(t,x,d))if(!x.empty())r.push_back(x);return r;}

typedef tuple<Int, Int, Int> tiii;

void solve()
{
  Int T; scani(T);
  rep(case_num, T)
  {
    Int Gp, Gc, Gf; scani(Gp); scani(Gc); scani(Gf);
    Int N; scani(N);

    vi P(N), C(N), F(N);
    rep(n, N) { scani(P[n]); scani(C[n]); scani(F[n]); }

    vector<tiii> vec, tmp;
    vec.push_back(make_tuple(0,0,0));

    bool ok = false;
    
    rep(i, N)
    {
      // uniq
      sort(all(vec)); vec.erase(unique(all(vec)), vec.end());

      tmp = vector<tiii>();
      copy(all(vec), back_inserter(tmp));

      for(auto curr_t = vec.begin(); curr_t != vec.end(); ++curr_t)
      {
        Int c_p, c_c, c_f; tie(c_p, c_c, c_f) = *curr_t;
        tiii new_t = make_tuple(c_p + P[i], c_c + C[i], c_f + F[i]);
        if(get<0>(new_t) == Gp && get<1>(new_t) == Gc && get<2>(new_t) == Gf)
        {
          ok = true;
        }
        else if(get<0>(new_t) > Gp && get<1>(new_t) > Gc && get<2>(new_t) > Gf) continue;
        if(ok) break;

        tmp.push_back(new_t);
      }
      if(ok) break;

      swap(tmp, vec);
    }

    if(ok)
      printf("Case #%d: yes\n", case_num+1);
    else
      printf("Case #%d: no\n", case_num+1);
  }
}

int main()
{
  cin.tie(0);
  ios::sync_with_stdio(false);
  cout << fixed << setprecision(9);

  solve();

  return 0;
}

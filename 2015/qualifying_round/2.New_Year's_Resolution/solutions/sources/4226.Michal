/* 
 * File:   HC15QNewYearsResolution.cpp
 * Author: Michal Soucha
 *
 * Created on 9. ledna 2015, 20:34
 */

#include <cstdlib>
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

struct Food {
    int p, c, f;
};

int main(int argc, char** argv) {
    int T, N, idx;
    bool possible;
    vector<Food> food;
    vector<int> eaten;
    Food quota, act;
    ifstream fin("tmp");
    ofstream fout("out.txt");
    fin >> T;
    for (int t = 1; t <= T; t++) {
        fin >> quota.p >> quota.c >> quota.f >> N;
        food.clear();
        for (int i = 0; i < N; i++) {
            Food f;
            fin >> f.p >> f.c >> f.f;
            food.push_back(f);
        }
        possible = false;
        eaten.clear();
        idx = 0;
        act.p = act.c = act.f = 0;
        do {
            if ((act.p + food[idx].p < quota.p) &&
                    (act.c + food[idx].c < quota.c) &&
                    (act.f + food[idx].f < quota.f)) {
                if (idx + 1 == N) {
                    if (eaten.empty()) {
                        break;
                    }
                    idx = eaten.back();
                    eaten.pop_back();
                    act.p -= food[idx].p;
                    act.c -= food[idx].c;
                    act.f -= food[idx].f;
                } else {
                    act.p += food[idx].p;
                    act.c += food[idx].c;
                    act.f += food[idx].f;
                    eaten.push_back(idx);
                }
            } else if ((act.p + food[idx].p == quota.p) &&
                    (act.c + food[idx].c == quota.c) &&
                    (act.f + food[idx].f == quota.f)) {
                possible = true;
                break;
            }
            if (idx + 1 == N) {
                if (eaten.empty()) {
                    break;
                }
                idx = eaten.back();
                eaten.pop_back();
                act.p -= food[idx].p;
                act.c -= food[idx].c;
                act.f -= food[idx].f;
            }
            idx++;
        } while (idx < N);
        fout << "Case #" << t << ": " << (possible ? "yes" : "no") << endl;
    }
    return 0;
}


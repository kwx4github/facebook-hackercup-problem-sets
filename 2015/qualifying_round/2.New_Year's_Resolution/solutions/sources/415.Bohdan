import java.io.*;
import java.util.*;

class Node implements Comparable<Node>{
    int p,c,f;
    public Node(int p, int c, int f){
        this.p=p;
        this.c=c;
        this.f=f;
    }
    @Override 
    public boolean equals(Object o){
        if (!(o instanceof Node) ) return false;
        Node other=(Node)o;
        return (other.p==p && other.c==c && other.f==f);        
    }
    @Override
    public int compareTo(Node o){
        if (p<o.p) return -1;       
        if (p>o.p) return 1;       
        if (c<o.c) return -1;       
        if (c>o.c) return 1;       
        if (f<o.f) return -1;       
        if (f>o.f) return 1;
        return 0;
    }
    @Override
    public String toString(){
        return p+" "+c+" "+f;
    }
}

public class cup2 {

    public static void main(String[] args) throws IOException{
        InputStream in=System.in;
        PrintStream out=System.out;
        
        in =new FileInputStream("new_years_resolution.txt");
        out =new PrintStream("out2.txt");
        
               
         
        Scanner sc=new Scanner(in);
        //out.println(sc.nextInt()+" "+sc.nextInt());
        int T=sc.nextInt();
        for (int t=0;t<T;t++){
            int gp=sc.nextInt(),
                gc=sc.nextInt(),
                gf=sc.nextInt();
            
            TreeSet<Node> curr=new TreeSet<>();
            curr.add(new Node(0,0,0));
            
            int N=sc.nextInt();
            for (int k=0;k<N;k++){
                int p=sc.nextInt(),
                    c=sc.nextInt(),
                    f=sc.nextInt();
                TreeSet<Node> nextStep=new TreeSet<>(curr);
                for (Node v:curr){
                    Node cand=new Node(v.p+p, v.c+c, v.f+f);
                    if (cand.p>gp || cand.c>gc || cand.f>gf) continue;
                    nextStep.add(cand);
                }
                curr=nextStep;           
            }
            //System.out.println(new Node(gp,gc,gf));
          
            //System.out.println(curr);
          
            
            out.println("Case #"+(t+1)+": "+(curr.contains(new Node(gp,gc,gf))?"yes":"no"));
        }
         
        //System.out.println((new int[]{0,4,0}).equals(new int[]{0,4,0}));
        //System.out.println(new Node(0,4,0).equals(new Node(0,4,0)));
        
        
        
// TODO code application logic here
    }
    
}

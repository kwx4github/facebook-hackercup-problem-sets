#define _CRT_SECURE_NO_DEPRECATE
#include <algorithm>
#include <bitset>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <functional>
#include <hash_map>
#include <iostream>
#include <iomanip>
#include <list>
#include <deque>
#include <queue>
#include <math.h>
#include <map>
#include <numeric>
#include <set>
#include <stack>
#include <stdio.h>
#include <string>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
#define debug(x) cerr<<#x<<" = "<<(x)<<endl;
bool test = false;
const double pi=acos(-1.0);
const double eps=1e-11;
int breakpoint = 0;

const char rootdir[] = "C:\\HackerCup\\NewYearResolution";
void reopen(char* a) {
	char input[256], output[256];
	sprintf(input, "%s\\%s", rootdir, a);
	sprintf(output, "%s\\%s", rootdir, a);
	char *p = strstr(output, ".in");
	if (p) sprintf(p, ".out"); 
	else sprintf(&output[strlen(output)], ".out");
	debug(input);
	freopen(input, "r", stdin);
	if (!test) {
    debug(output);
    freopen(output,"w",stdout);
  }
}

int T;
int N;
int GP;
int GC;
int GF;
int P[32];
int C[32];
int F[32];

void showin() {
  printf("%d %d %d\n", GP, GC, GF);
  printf("%d\n", N);
  for (int i = 0; i < N; i++) {
    printf("%d %d %d\n", P[i], C[i], F[i]);
  }
}

int main(int argc, char* argv[]) {
  test = false;
	// reopen("new_years_resolution_example_input.txt");
  reopen("new_years_resolution.txt");
	scanf("%d\n", &T);
	for(int t=1; t<=T; t++) {
    scanf("%d %d %d\n", &GP, &GC, &GF);
    scanf("%d\n", &N);
    for (int i = 0; i < N; i++) {
      scanf("%d %d %d\n", &P[i], &C[i], &F[i]);
    }
    // if (test) showin();
    bool ok = false;
    for (int k = 1; k < (1 << N); k++) {
      int sp = 0;
      int sc = 0;
      int sf = 0;
      for (int i = 0; i < N; i++) {
        if ((k & (1 << i)) != 0) {
          sp += P[i];
          sc += C[i];
          sf += F[i];
        }
      }
      if (sp == GP && sc == GC && sf == GF) {
        ok = true;
        break;
      }
    }
    printf("Case #%d: %s\n", t, ok? "yes":"no");
  }
 	return 0;
}
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class NewYears {

	
	
	public static void main(String[] args) throws Exception {

		String path = "C:/Users/Youssef/Desktop/new_years_resolution.txt";	//enter different path if needed
		FileReader y = new FileReader(path);
		BufferedReader a = new BufferedReader(y);
		String p = a.readLine();
		int totalNumofCases = Integer.parseInt(p);


	for(int i =0; i<totalNumofCases; i++){
		
			
			int [] wanted = stringtoArray((a.readLine()).split(" "));		//the amount of proteins,carbs and fat WANTED
			int numofFoods = Integer.parseInt(a.readLine());				//for each test case
			Stack allfoodinfo = new Stack();
			
			
			
			
			
			for(int k = 0; k<numofFoods; k++){							//puts all *valid* foods in a stack
				int [] current = stringtoArray( a.readLine().split(" ")); 		//current food row
				if(current[0] <= wanted[0] && current[1] <= wanted[1] && current[2] <= wanted[2]){
					allfoodinfo.push(current);	
				}
				}
			
			
			
			boolean comb = true;
		loop:	
			for(int v = 0; v<allfoodinfo.size(); v++){
				for(int u = 0; u<3; u++){
					
				if(!    ( combinationFound(allfoodinfo,u, wanted[u]) )      ){
					comb= false;
					System.out.println("yaaa");
					break loop;
				}
			}
			}
			if(allfoodinfo.isEmpty() || isNotEnough(wanted, allfoodinfo) || !comb) {
				System.out.println("Case #" + (i+1) +":" + " no");
			}
			else{
				System.out.println("Case #" + (i+1) +	":" + " yes");
			}
			
	}
	}
	
	
	public static boolean isNotEnough(int [] wanted, Stack y){
		
		boolean isNotEnough = false;
		Stack copy = new Stack();
		copy.addAll(y);
		int prot = 0;
		int carb = 0;
		int fat = 0;
		
		while(!copy.isEmpty()){
			
		int [] top = (int [])copy.pop();
		prot+=top[0];
		carb+= top[1];
		fat+= top[2];
		
		}
		
		if(prot < wanted[0] || carb<wanted[1] || fat< wanted[2]){
			isNotEnough = true;
		
	}
	
		return isNotEnough;
	}
	
	
	
	
	
	
	public static void printStack(Stack a){		//prints a stack
		Stack x = new Stack();
		while(!a.isEmpty()){
		int [] y = (int[]) a.pop();
		System.out.println(Arrays.toString(y));
		x.push(y);}
		while(!x.isEmpty()){
			a.push(x.pop());}}
	
	
	
	
	
public static int [] stringtoArray(String [] w){ 		//converts array of strings to array of ints
		
		int [] ArrayofInts = new int [w.length];
		
		for(int i = 0; i<ArrayofInts.length; i++){
			ArrayofInts[i] = Integer.parseInt(w[i]);
		}
		
		return ArrayofInts;
	}
		
	
	public static boolean combinationFound(Stack x, int col ,int target){
		
		boolean combinationFound = true;
		int [] y = new int [x.size()];
		Stack copy = new Stack();
		copy.addAll(x);
		
		int size  = copy.size();
		for(int i = 0; i<size; i++){	//put all of one column in an array;
			
			int [] currentPopped = (int [])copy.pop();
			y[i] = currentPopped[col];
			
		}
		Arrays.sort(y);

		if(oneByOne(y, target)){
			return true;
		}
		
		
		if(y.length != 1){
			
			int sumofFirstTwo = y[0] + y[1];
			
			if(sumofFirstTwo > target ){
				combinationFound = false;
				
			}
		}
			
			
			
		
	return combinationFound;
	}
	
	
	
	public static boolean oneByOne(int [] x, int target){
		

		Arrays.sort(x);
	
		for(int i = 0; i<x.length; i++){
			
			int current = x[i];
			
			for(int j = i+1; j<x.length-1; j++){
				
				if( (current + x[j]) == target){
					
					return true;
					
				}
					
			}
			
		}
	return false;
	}
	  
	
	
	
	
	
	
	
	
}

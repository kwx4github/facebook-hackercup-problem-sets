/*
 * Ex2.cpp
 *
 *  Created on: Jan 9, 2015
 *      Author: rafael
 */
#include <iostream>
#include <vector>
using namespace std;

/**
 * 	function that makes all possible combinations of sum on a vector
 **/
void subsetSum(vector<int> nutrient0, int target0, vector<int> partial0, vector<int> nutrient1, int target1, vector<int> partial1, vector<int> nutrient2, int target2, vector<int> partial2, bool& shouldSayYes){
	if(!shouldSayYes){
		int sum0 = 0;
		int sum1 = 0;
		int sum2 = 0;

		for(unsigned i = 0; i < partial0.size(); i++){
			sum0 += partial0[i];
			sum1 += partial1[i];
			sum2 += partial2[i];
		}

		if(sum0 == target0 && sum1 == target1 && sum2 == target2){
			shouldSayYes = true;
		}

		if(sum0 >= target0 || sum1 >= target1 || sum2 >= target2){
			return;
		}

		for(unsigned i = 0; i < nutrient0.size(); i++){
			int n0 = nutrient0[i];
			int n1 = nutrient1[i];
			int n2 = nutrient2[i];

			vector<int> remaining0;
			vector<int> remaining1;
			vector<int> remaining2;

			for(unsigned j = i + 1; j < nutrient0.size(); j++){
				remaining0.push_back(nutrient0[j]);
				remaining1.push_back(nutrient1[j]);
				remaining2.push_back(nutrient2[j]);
			}

			vector<int> partial_rec0(partial0);
			vector<int> partial_rec1(partial1);
			vector<int> partial_rec2(partial2);

			partial_rec0.push_back(n0);
			partial_rec1.push_back(n1);
			partial_rec2.push_back(n2);

			subsetSum(remaining0, target0, partial_rec0, remaining1, target1, partial_rec1, remaining2, target2, partial_rec2, shouldSayYes);
		}
	}
}

bool goodToEat(const vector<vector<int> >& foods, int gp, int gc, int gf){
	vector<int> nutrient0 = foods[0]; // array with the nutrients for i nutrient
	vector<int> partial0;

	vector<int> nutrient1 = foods[1];
	vector<int> partial1;

	vector<int> nutrient2 = foods[2];
	vector<int> partial2;

	bool isGoodToEat = false;
	subsetSum(nutrient0, gp, partial0, nutrient1, gc, partial1, nutrient2, gf, partial2, isGoodToEat);

	return isGoodToEat;
}

int main(){
	int T;
	cin >> T; //Number of test cases
	for (int i = 0; i < T; i++){
		int gp, gc, gf;
		cin >> gp >> gc >> gf; //amount of protein, carbohydrates, and fat that Alex wants to eat.
		int numberOfFoods;
		cin >> numberOfFoods;
		vector<vector<int> > foods(3, vector<int>(numberOfFoods));
		for(int j = 0; j < numberOfFoods; j++){
			cin >> foods[0][j] >> foods[1][j] >> foods[2][j]; //Now the vector contain all the foods
		}

		if(goodToEat(foods, gp, gc, gf)){
			cout << "Case #" << i + 1<< ": yes" << endl;
		}
		else{
			cout << "Case #" << i + 1<< ": no" << endl;
		}

	}
	return 0;
}




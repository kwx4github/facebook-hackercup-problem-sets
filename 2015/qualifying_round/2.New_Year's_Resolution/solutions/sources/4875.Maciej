package com.koziel;

import java.util.ArrayList;
import java.util.Scanner;

public class Problem2 {
    private static int caseSize;
    private static int v1, v2,v3;
    private static int[] v1s, v2s, v3s;
    private static Scanner in;

    public static void main(String[] args) {
        in = new Scanner(System.in);
        int cases = in.nextInt();

        for (int i = 0; i < cases; i++) {
            v1 = in.nextInt();
            v2 = in.nextInt();
            v3 = in.nextInt();
            caseSize = in.nextInt();
            solveCase(i+1);
        }
    }

    private static void solveCase(int caseNum) {
        v1s = new int[caseSize];
        v2s = new int[caseSize];
        v3s = new int[caseSize];

        ArrayList<Integer> seq = new ArrayList<Integer>(caseSize);
        for (int i = 0; i < caseSize; i++) {
            v1s[i] = in.nextInt();
            v2s[i] = in.nextInt();
            v3s[i] = in.nextInt();
            seq.add(i);
        }

        boolean res;

        if (v1 == 0 && v2 == 0 && v3 == 0) {
            res = true;
        }
        else {
            res = findSolution(0, 0, 0, seq);
        }

        if (res) {
            System.out.println("Case #" + caseNum + ": yes");
        }
        else {
            System.out.println("Case #" + caseNum + ": no");
        }
    }

    private static boolean findSolution(int cv1, int cv2, int cv3, ArrayList<Integer> set) {
        boolean res = false;

        int cvp1, cvp2, cvp3;
        for (int i = 0; i < set.size(); i++) {
            cvp1 = cv1 + v1s[set.get(i)];
            cvp2 = cv2 + v2s[set.get(i)];
            cvp3 = cv3 + v3s[set.get(i)];

            if (cvp1 == v1 && cvp2 == v2 && cvp3 == v3) {
                return true;
            }
            else if (set.size() > 0 && i < set.size()-1 && cvp1 <= v1 && cvp2 <= v2 && cvp3 <= v3) {
                boolean found = findSolution(cvp1, cvp2, cvp3, new ArrayList<Integer>(set.subList(i+1, set.size())));
                if (found) {
                    res = true;
                    break;
                }
            }
        }

        return res;
    }
}

package qualification2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.StringTokenizer;

public class NewYearsResolution {
	public static void main(String[] args) throws NumberFormatException,
			IOException {
		FileWriter writer = new FileWriter(
				"C:\\Users\\mchang\\workspace\\Facebook Hacker Cup\\src\\output.txt");
		String filename = "C:\\Users\\mchang\\workspace\\Facebook Hacker Cup\\src\\input.txt";
		long startTime = System.currentTimeMillis();
		try {
			BufferedReader br = new BufferedReader(new FileReader(filename));
			int numCases = Integer.parseInt(br.readLine());
			for (int caseNum = 1; caseNum <= numCases; caseNum++) {
				System.out.println("Processing Case: " + caseNum);
				String target = br.readLine();
				StringTokenizer st = new StringTokenizer(target);
				int[] targets = new int[3];
				targets[0] = Integer.parseInt(st.nextToken());
				targets[1] = Integer.parseInt(st.nextToken());
				targets[2] = Integer.parseInt(st.nextToken());
				int numFoods = Integer.parseInt(br.readLine());
				int[][] foods = new int[numFoods][3];
				for(int foodNum = 0; foodNum < numFoods; foodNum++){
					String foodString = br.readLine();
					st = new StringTokenizer(foodString);
					foods[foodNum][0] = Integer.parseInt(st.nextToken());
					foods[foodNum][1] = Integer.parseInt(st.nextToken());
					foods[foodNum][2] = Integer.parseInt(st.nextToken());
				}
				if(isPossible(foods, targets, 0)){
					printAnswer("yes", caseNum, writer);
				} else {
					printAnswer("no", caseNum, writer);
				}
			}
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		writer.close();
		System.out.println(System.currentTimeMillis() - startTime);
	}

	public static void printAnswer(String answer, int caseNumber,
			FileWriter writer) throws IOException {
		writer.write("Case #" + caseNumber + ": " + answer + "\n");
	}

	public static boolean isPossible(int[][] foods, int[] remaining, int index) {
		boolean done = true;
		for(int i = 0; i < remaining.length; i++){
			if(remaining[i] != 0){
				done = false;
				break;
			}
		}
		if(done) return true;
		if(index >= foods.length) return false;
		if(isPossible(foods, remaining, index + 1)) return true;
		boolean possible = true;
		for(int i = 0; i < remaining.length; i++){
			if(foods[index][i] > remaining[i]){
				possible = false;
				break;
			}
		}
		if(possible){
			int[] newRemaining = new int[remaining.length];
			for(int i = 0; i < remaining.length; i++){
				newRemaining[i] = remaining[i] - foods[index][i];
			}
			if(isPossible(foods, newRemaining, index + 1)) return true;
		}
		return false;
	}
}

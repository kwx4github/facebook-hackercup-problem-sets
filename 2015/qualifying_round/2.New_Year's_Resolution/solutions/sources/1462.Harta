#include <bits/stdc++.h>
using namespace std;

#define MAXN 20
#define pb push_back
#define sz size()
int t, n;
vector<int> supply[MAXN], goal;

vector<vector<int> > generate(vector<vector<int> > half) {
	int n = half.size();
	vector<vector<int> > res;
	for (int i = 0; i < (1 << n); i++) {
		vector<int> sum = {0, 0, 0};
		for (int j = 0; j < n; j++) {
			if (i & (1 << j)) {
				for (int k = 0; k < 3; k++) {
					sum[k] += half[j][k];
				}
			}
		}
		res.pb(sum);
	}
	return res;
}

bool cf(vector<int> a, vector<int> b) {
	int len = a.size();
	for (int i = 0; i < len; i++) {
		if (a[i] < b[i]) return 1;
		if (b[i] < a[i]) return 0;
	}
	return 1;
}

int main() {
	scanf("%d", &t);
	int xx = 1;
	while (t--) {
		goal.resize(3);
		for (int i = 0; i < 3; i++) scanf("%d", &goal[i]);
		scanf("%d", &n);
		for (int i = 0; i < n; i++) {
			supply[i].resize(3);
			for (int j = 0; j < 3; j++) {
				scanf("%d", &supply[i][j]);
			}
		}
		bool possible = false;
		vector<vector<int> > first_half, second_half;
		for (int i = 0; i < n; i++) {
			if (i < n / 2) {
				first_half.pb(supply[i]);
			} else second_half.pb(supply[i]);
		}
		vector<vector<int> > first_comb = generate(first_half);
		map<vector<int>, bool> mp;
		int len = first_comb.size();
		for (int i = 0; i < len; i++) mp[first_comb[i]] = 1;
		
		vector<vector<int> > second_comb = generate(second_half);
		len = second_comb.size();
		for (int i = 0; i < len; i++) {
			vector<int> rem = {0, 0, 0};
			bool has_neg = false;
			for (int j = 0; j < 3; j++) {
				rem[j] = goal[j] - second_comb[i][j];
				has_neg |= (rem[j] < 0);
			}
			if (has_neg) continue;
			if (mp.find(rem) != mp.end()) {
				possible = true;
				break;
			}
		}
		printf("Case #%d: %s\n", xx++, possible ? "yes": "no");
	}
	return 0;
}

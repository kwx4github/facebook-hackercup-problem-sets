import itertools
# take a variable ' line ' of type String
# adds each word or number to parsed_List
# identifies numbers by spaces
# stops parsing when the program reaches the character "\n"
# '\n' signifies a new line and end of line
# returns the parsed line as a list of ints
def parse_Line(line):
	parsed_List = []
	temp_Num = ""
	for character in line:
		if(character == "\n"):
			parsed_List.append(int(temp_Num))
			return parsed_List
		elif(character == " "):
			parsed_List.append(int(temp_Num))
			temp_Num = ""
		else:
			temp_Num += character

# returns -1 if not enough
# returns 0 if perfect
# returns 1 if too much
def check_Sum(requirements, partial_Nutr_List):
	count = 0
	lst = [0,0,0]
	for dish in partial_Nutr_List:
		for nutrient in xrange(3):
			lst[nutrient] += dish[nutrient]
			if(requirements[nutrient] < lst[nutrient]):
				return 1
	for req in xrange(3):
		if(requirements[req] < lst[req]):
			return 1
		if(requirements[req] > lst[req]):
			return -1
		if(requirements[req] == lst[req]):
			count += 1
	if(count == 3):
		return 0
	else:
		return -1

# returns list
def set_Test_Case(num_tests_foods, file):
	requirements = parse_Line(file.readline())
	num_Foods = parse_Line(file.readline())[0]
	nutrient_List = []
	count = 0
	boolean = False
	while(count < num_Foods):
		nutrient_List.append(parse_Line(file.readline()))	
		count += 1

	for num in xrange(1, num_Foods+1):
		combinations = itertools.combinations(nutrient_List, num)
		for combs in combinations:
			if(check_Sum(requirements, combs) == 0):
				return True
	return False
	

def Q2():
	f = open('new_years_resolution.txt', 'r')
	num_cases = parse_Line(f.readline())[0]
	for num in xrange(num_cases):
		if(set_Test_Case(0,f)):
			print("Case #" + str(num+1) + ": yes")
		else:
			print("Case #" + str(num+1) + ": no")








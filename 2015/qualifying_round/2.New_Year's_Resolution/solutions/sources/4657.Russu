#include <fstream>
std::ifstream fin("new_years_resolution.txt");
std::ofstream fout("new_years_resolution.out");

struct food
{
    int p, c, f;
    food operator+(food ad)
    {
        food rs;
        rs.p = this->p + ad.p;
        rs.c = this->c + ad.c;
        rs.f = this->f + ad.f;
        return rs;
    }
    bool operator==(food ad)
    {
        return (ad.p == this->p && ad.c == this->c && ad.f == this->f);
    }

    bool operator> (food ad)
    {
        return (this->p > ad.p || this->c > ad.c || this->f > ad.f);
    }
    bool operator>= (food ad)
    {
        return (this->p >= ad.p || this->c >= ad.c || this->f >= ad.f);
    }
    bool operator< (food ad)
    {
        return (this->p < ad.p || this->c < ad.c || this->f < ad.f);
    }
    bool operator<= (food ad)
    {
        return (this->p <= ad.p || this->c <= ad.c || this->f <= ad.f);
    }
    bool operator> (int ad)
    {
        return (this->p > ad || this->c > ad || this->f > ad);
    }
    bool operator>= (int ad)
    {
        return (this->p >= ad || this->c >= ad || this->f >= ad);
    }
    bool operator< (int ad)
    {
        return (this->p < ad || this->c < ad || this->f < ad);
    }
    bool operator<= (int ad)
    {
        return (this->p <= ad || this->c <= ad || this->f <= ad);
    }
    void show()
    {
        fout << this->p << " " << this->c << " " << this->f << " " << std::endl;
    }
    void init()
    {
        p = c = f = 0;
    }
};

int a[23];
int b[23];
food fd[23];
food rsp;
bool boo;
void back(int k, int len, int max)
{
	if(boo){return;}
    if (k - 1 == max) //afisam solutia
    {
        food sum;
        sum.init();
        for (int i = 1; i <= max; i++)
        {
            sum = sum + fd[a[i]];
        }
        //sum.show();
        if (sum == rsp)
        {
            boo = 1;
            return;
        }
    }
    else
    {
        for (int  i = 1; i <= len; i++)
            if (!b[i] && a[k - 1] < i) //ne asiguram ca generam solutiile crescatoare si unice
            {
                a[k] = i;
                b[i] = 1; //o folosim
                back(k + 1, len, max); //trecem la pasul urmator
                b[i] = 0;   //o eliberam
            }
    }
}
int main()
{
    int Tnr;
    fin >> Tnr;
    for (int T = 1; T <= Tnr; ++T)
    {
        /* code */

        boo = 0;
        int n, k;
        int f, p, c;
        fin >> p >> c >> f >> n;
        rsp.p = p;
        rsp.c = c;
        rsp.f = f;
        for (int i = 1; i <= n ; ++i)
        {
            fin >> p >> c >> f;
            fd[i].p = p;
            fd[i].c = c;
            fd[i].f = f;
        }
        for(int pussy=1;pussy<=n;pussy++){
        back(1, n, pussy);}
        fout << "Case #" << T << ": " << ( boo ? "yes" : "no" ) << "\n";
    }
    return 0;
}
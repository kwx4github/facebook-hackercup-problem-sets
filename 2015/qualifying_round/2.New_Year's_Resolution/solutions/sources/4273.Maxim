#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cmath>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

//typedef pair <pair <int, int>, int> Food_T;

struct Food_T
{
	int p, c, f;
	Food_T()
	{
		p = 0;
		c = 0;
		f = 0;
	}
	Food_T(int p_, int c_, int f_)
	{
		p = p_;
		c = c_;
		f = f_;
	}
	Food_T operator+ (Food_T second)
	{
		Food_T res(0, 0, 0);
		res.p = p + second.p;
		res.c = c + second.c;
		res.f = f + second.f;
		return res;
	}
};


bool operator< (Food_T first, Food_T second)
{
	if (first.p < second.p)
	{
		return true;
	}
	else if (first.p == second.p && first.c < second.c)
	{
		return true;
	}
	else if (first.p == second.p && first.c == second.c && first.f == second.f)
	{
		return true;
	}
	return false;
}

bool operator== (Food_T first, Food_T second)
{
	if (first.p == second.p && first.c == second.c && first.f == second.f)
		return true;
	return false;
}



int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int t;
	cin >> t;
	for (int e = 0; e < t; e++)
	{
		int p, c, f;
		cin >> p >> c >> f;
		Food_T need(p, c, f);
		//Food_T need;
		//need.first.first = p;
		//need.first.second = c;
		//need.second = f;
		int n;
		cin >> n;
		vector <Food_T> food;
		vector <Food_T> cur;
		map <Food_T, int> m;
		int x, y, z;
		for (int i = 0; i < n; i++)
		{
			cin >> x >> y >> z;
			Food_T h(x, y, z);
			//Food_T h;
			//h.first.first = x;
			//h.first.second = y;
			//h.second = z;
			food.push_back(h);
		}
		Food_T nol;
		m[nol] = 1;
		cur.push_back(nol);
		bool ok = false;
		for (int i = 0; i < n; i++)
		{
			int size = cur.size();
			for (int j = 0; j < size; j++)
			{
				Food_T temp = food[i] + cur[j];
				//Food_T temp;
				//Food_T temp.first.first = food[i].first.first + cur[j].first.first;
				//Food_T temp.first.second = food[i].first.second + cur[j].first.second;
				//Food_T temp.second = food[i].second + cur[j].second;
				if (m.count(temp) == 0)
				{
					m[temp]++;
					cur.push_back(temp);
				}
				if (temp == need)
				{
					ok = true;
					break;
				}
			}
			if (ok)
				break;
		}
		cout << "Case #" << e + 1 << ": ";
		if (ok)
		{
			cout << "yes" << endl;
		}
		else
		{
			cout << "no" << endl;
		}
	}
	//for (;;);
	return 0;
}
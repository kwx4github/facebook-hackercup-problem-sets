
import java.util.*;

/**
 *
 * @author Hisham Ramadan
 */
public class NewYearResolution {

    public static List<List<Integer>> powerSet(List<Integer> originalSet) {
        List<List<Integer>> sets = new ArrayList();
        if (originalSet.isEmpty()) {
            sets.add(new ArrayList<Integer>());
            return sets;
        }
        List<Integer> list = new ArrayList(originalSet);
        int head = list.get(0);
        List<Integer> rest = new ArrayList(list.subList(1, list.size()));
        for (List<Integer> set : powerSet(rest)) {
            List<Integer> newSet = new ArrayList();
            newSet.add(head);
            newSet.addAll(set);
            sets.add(newSet);
            sets.add(set);
        }
        return sets;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt(); // Testcases...
        List<String> results = new ArrayList();

        List<Integer> foodsSet;
        List<List<Integer>> allComb, pLists, cLists, fLists;
        int GP, GC, GF, foods, p, c, f, pTotal, cTotal, fTotal;

        for (int t = 0; t < T; t++) {
            GP = in.nextInt();
            GC = in.nextInt();
            GF = in.nextInt();
            foods = in.nextInt();

            foodsSet = new ArrayList();
            pLists = new ArrayList();
            cLists = new ArrayList();
            fLists = new ArrayList();

            // Take input for each food
            for (int food = 0; food < foods; food++) {
                foodsSet.add(food);

                p = in.nextInt();
                pLists.add(new ArrayList());
                pLists.get(food).add(p);

                c = in.nextInt();
                cLists.add(new ArrayList());
                cLists.get(food).add(c);

                f = in.nextInt();
                fLists.add(new ArrayList());
                fLists.get(food).add(f);
            }

            allComb = new ArrayList();
            allComb = powerSet(foodsSet);
            allComb.remove(allComb.size() - 1);
            // End: get all combinations of foods
            

            boolean foodGood = false;
            for (List<Integer> comb : allComb) {
                pTotal = 0;
                cTotal = 0;
                fTotal = 0;
                for (Integer food : comb) {
                    pTotal += pLists.get(food).get(0);
                    cTotal += cLists.get(food).get(0);
                    fTotal += fLists.get(food).get(0);
                }

                if (pTotal == GP && cTotal == GC && fTotal == GF) {
                    foodGood = true;
                    break;
                }
            }

            if (foodGood) {
                results.add("yes");
            } else {
                results.add("no");
            }

        }

        for (int r = 0; r < results.size(); r++) {
            System.out.println("Case #" + (r + 1) + ": " + results.get(r));
        }

    }

}

package c2014_c.c2014_round2;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.*;

public class z2 {

    private static int i;

    public static void main(String[] args) throws Exception {
        FileWriter fw = new FileWriter("C:\\output.txt");
        BufferedWriter out = new BufferedWriter(fw);
        //String pathname = "C:\\Users\\YC14rp1\\Downloads\\z4.txt";
        String pathname = "C:\\Users\\YC14rp1\\Downloads\\new_years_resolution.txt";
        //String pathname = "C:\\Users\\YC14rp1\\Downloads\\A-large.in";
        Scanner scanner = new Scanner(new File(pathname));
        int tn = scanner.nextInt();
        scanner.nextLine();
        for (int ti = 1; ti <= tn; ti++) {
            int gp = scanner.nextInt();
            int gc = scanner.nextInt();
            int gf = scanner.nextInt();
            int n = scanner.nextInt();
            int [] p = new int[n];
            int [] c = new int[n];
            int [] f = new int[n];
            for (int i=0;i<n;i++) {
                p[i] = scanner.nextInt();
                c[i] = scanner.nextInt();
                f[i] = scanner.nextInt();
            }
            int [][][] x = new int[100][100][100];
            boolean res = check(gp,gc,gf,p,c,f,0);
            String rs = res?"yes":"no";
            String s = "Case #" + ti + ": "+rs;
            System.out.println(s);
            out.write(s);
            out.write("\n");
        }
        out.close();
    }

    private static boolean check(int gp, int gc, int gf, int[] p, int[] c, int[] f, int x) {
        //System.out.println(i++);
//        if (x[gp][gc][gf]==0) {
            for (int i=x;i<p.length;i++) {
                int np = gp - p[i];
                int nc = gc - c[i];
                int nf = gf - f[i];
                if ((np==0) && (nc==0) && (nf==0)) {
                    return true;
                }
                if ((np<=0) || (nc<=0) || (nf<=0)) {
                    continue;
                }
                boolean d = check(np,nc,nf,p,c,f,i+1);
                if (d) {
                    //x[gp][gc][gf]=1;
                    return true;
                } else {
                    //x[gp][gc][gf]=-1;
                }
            }
            return false;
//        }
  //      return x[gp][gc][gf]==1;
    }

    private static int[][] read2DArray(Scanner scanner, int n, int m) {
        int [][]m1 = new int[n][m];
        for (int i=0;i<n;i++) {
            for (int j=0;j<m;j++) {
                m1[i][j] = scanner.nextInt();
            }
        }
        return m1;
    }

    // 1 0 1 -> [1,0,1]
    private static List<Integer> readIntList(Scanner scanner, int n) {
        List<Integer> l = new ArrayList<Integer>(n);
        for (int i=0;i<n;i++) {
            l.add( scanner.nextInt());
        }
        return l;
    }

    // 1 2/ 2 3 -> [[0 1 0],[1 0 1],[0 1 0]]
    private static void readGraphAsMatrix(Scanner scanner, int n, int[][] matrix) {
        for (int i=0;i<n-1;i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            matrix[x-1][y-1] = 1;
            matrix[y-1][x-1] = 1;
        }
    }

    // sdf ssf ggg -> [3]
    private static String[] readArray(Scanner scanner, int n) {
        String[] l2 = new String[n];
        for (int i=0;i<n;i++) {
            l2[i] = scanner.next();
        }
        return l2;
    }

    // 1 2 3 4 5 - > (1,2,3,4,5)
    private static HashSet<String> readSet(Scanner scanner, int n) {
        String[] l1 = new String[n];
        HashSet<String> set1 = new HashSet<String>();
        for (int i=0;i<n;i++) {
            l1[i] = scanner.next();
            set1.add(l1[i]);
        }
        return set1;
    }

    public static class MinMax {
        private String n;
        private String mx;
        private String mn;

        public MinMax(String n) {
            this.n = n;
        }

        public String getMx() {
            return mx;
        }

        public String getMn() {
            return mn;
        }

        public MinMax invoke() {
            int [] digits = new int [10];
            for (int i=0;i<n.length();i++) {
                Integer d = Character.getNumericValue(n.charAt(i));
                if (digits[d]==0) {
                    digits[d] = i+1;
                }
            }
            // find max
            int idx2chk = 0;
            int dc = 9;
            boolean c = true;
            mx = n;
            while(c) {
                int x = n.substring(idx2chk).lastIndexOf(Character.forDigit(dc, 10));
                if (dc>Character.getNumericValue(n.charAt(idx2chk)) && x > -1) {
                    char[] chars = n.toCharArray();
                    char ch = chars[idx2chk];
                    chars[idx2chk] = chars[idx2chk+ x];
                    chars[idx2chk+ x] = ch;
                    mx = String.valueOf(chars);
                    c = false;
                } else {
                    if (dc>1) {
                        dc--;
                    } else {
                        if (idx2chk<n.length()-1) {
                            idx2chk++;
                            dc=9;
                        } else {
                            c = false;
                        }
                    }
                }
            }
            // find min
            idx2chk = 0;
            dc = 1;
            c = true;
            mn = n;
            while(c) {
                int x = n.substring(idx2chk).lastIndexOf(Character.forDigit(dc,10));
                if (dc<Character.getNumericValue(n.charAt(idx2chk)) && x>-1) {
                    char[] chars = n.toCharArray();
                    char ch = chars[idx2chk];
                    chars[idx2chk] = chars[idx2chk + x];
                    chars[idx2chk + x] = ch;
                    mn = String.valueOf(chars);
                    c = false;
                } else {
                    if (dc<9) {
                        dc++;
                    } else {
                        if (idx2chk<n.length()-1) {
                            idx2chk++;
                            dc=0;
                        } else {
                            c = false;
                        }
                    }
                }
            }
            return this;
        }
    }
}

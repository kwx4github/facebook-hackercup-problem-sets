#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <iostream>
#include <queue>
#include <stack>
#include <utility>
#include <vector>
using namespace std;

struct trip{
    int n;
    int a;
    int b;
    int c;
    trip(){}
    ~trip(){}
    trip(int m, int x, int y, int z): n(m), a(x), b(y), c(z) {}
};

typedef long long ll;
typedef pair<int, int> pr;

int main(){
    int T;
    scanf("%d", &T);
    for(int i = 1; i <= T; i++){
        int N;
        int gp, gc, gf;
        int p[25], c[25], f[25];
        scanf("%d%d%d%d", &gp, &gc, &gf, &N);
        for(int j = 0; j < N; j++){
            scanf("%d%d%d", p + j, c + j, f + j);
        }
        queue<trip> que;
        que.push(trip(0, 0, 0, 0));
        bool possible = false;
        while(!que.empty()){
            trip t = que.front(); que.pop();
            if(t.n == N){
                if(t.a == gp && t.b == gc && t.c == gf){
                    possible = true;
                    break;
                }
                continue;
            }
            que.push(trip(t.n + 1, t.a, t.b, t.c));
            que.push(trip(t.n + 1, t.a + p[t.n],
                                   t.b + c[t.n],
                                   t.c + f[t.n]));
        }
        cout << "Case #" << i << ": ";
        if(possible){
            cout << "yes" << endl;
        }else{
            cout << "no" << endl;
        }
    }
    
    return 0;
}

#include<iostream>
#include<vector>

using namespace std;

struct triple {
  int P;
  int C;
  int F;
};

bool canMakeIt(vector<triple> &foods, int iter, int n, int p, int c, int f, int gP, int gC, int gF) {
  if ((iter < n) && (p <= gP) && (c <= gC) && (f <= gF)) {
    triple next = foods[iter];
    int newP = p + next.P;
    int newC = c + next.C;
    int newF = f + next.F;
    
    if ((newP == gP) && (newC == gC) && (newF == gF)) {
      return true;
    } else {
      bool result1, result2;
      result1 = canMakeIt(foods, iter + 1, n, p, c, f, gP, gC, gF);
      result2 = canMakeIt(foods, iter + 1, n, newP, newC, newF, gP, gC, gF);
      return result1 || result2;
    }
  } else {
    return false;
  }
}

int main () {
  int T;
  
  cin >> T;
  for (int i = 0; i < T; ++i) {
    int gP, gC, gF, N;
    
    cin >> gP >> gC >> gF >> N;
   
    vector<triple> foods;
    for (int j = 0; j < N; ++j) {
      triple newFood;
      cin >> newFood.P >> newFood.C >> newFood.F;
      foods.push_back(newFood);
    }
    
    cout << "Case #" << (i + 1) << ": ";
    if (canMakeIt(foods, 0, N, 0, 0, 0, gP, gC, gF)) {
      cout << "yes";
    } else {
      cout << "no";
    }
    cout << endl;
  }
}
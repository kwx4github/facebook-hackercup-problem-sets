

#if 1

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <array>
#include <valarray>
#include <queue>
#include <map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cassert>
#include <fstream>
using namespace std;
typedef int64_t int64;

typedef pair<int,int> pii;
typedef pair<double,double> pdd;

static void solve();

int main() {
	freopen("B.in.txt","r",stdin);
	freopen("B.out.txt","w",stdout);
	int test_case;
	cin >> test_case;
	for (int t = 1; t <= test_case; ++t) {
		cout << "Case #" << t << ": ";
		solve();
		cout << '\n';
	}
	return 0;
}

namespace std {
template<typename T> struct hash<valarray<T>> {
		size_t operator () (const valarray<T> &a) const {
			size_t h = 0;
			for (auto x : a) {
				h = (h << 2) ^ hash<T>()(x);
			}
			return h;
		}
	};
}

namespace std {
template<typename T, std::size_t N> struct hash<array<T, N>> {
		size_t operator () (const array<T, N> &a) const {
			size_t h = 0;
			for (auto x : a) {
				h = (h << 2) ^ hash<T>()(x);
			}
			return h;
		}
	};
}

static void solve() {
	array<int, 3> goal;
	cin >> goal[0] >> goal[1] >> goal[2];
	bool good = false;
	int n;
	cin >> n;
	unordered_set<array<int, 3>> a(2 << n);
	unordered_set<array<int, 3>> b(2 << n);
	unordered_set<array<int, 3>> * cur = &a;
	unordered_set<array<int, 3>> * next = &b;
	array<int, 3> x;
	array<int, 3> y;
	cur->insert({0,0,0});
	for (int i = 0; i < n; ++i) {
		cin >> x[0] >> x[1] >> x[2];
		*next = *cur;
		for (auto & s : *cur) {
			y[0] = x[0] + s[0];
			y[1] = x[1] + s[1];
			y[2] = x[2] + s[2];
			if (y[0] > goal[0] || y[1] > goal[1] || y[2] > goal[2])
				continue;
			#if 1
			if (y == goal) {
				good = true;
				goto done;
			}
			#else
			valarray<bool> r = y == goal;
			if (all_of(begin(r), end(r), [](bool p){return p;})) {
				good = true;
				goto done;
			}
			#endif
			next->insert(y);
		}
		swap(cur, next);
	}
	done:
	cout << (good ? "yes" : "no");
}

#endif


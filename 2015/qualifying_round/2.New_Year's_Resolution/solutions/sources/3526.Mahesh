#include<iostream>
#include<string>
#include<map>
#include<vector>
#include<algorithm>
#include<cmath>
#include<climits>
#include<queue>
#include<set>

#define VI vector<int>
#define PII pair<int,int>
#define mp make_pair
#define rep(i,a,b) for(i=(a); i<(b); i++)
#define repI(i,a,b) for(i=(a); i<=(b); i++)

using namespace std;
typedef unsigned long long int ulli;
typedef long long int lli;

bool all(vector<int>& flag)
{
    int N = flag.size();
    for(int i=0; i<N; i++)
    {
        if(flag[i]==0) return 0;
    }
    return 1;
}

void nextCombination(vector<int>& flag)
{
    int N = flag.size();
    int carry = 0;
    int sum = 1;
    for(int i=N-1; i>=0; i--)
    {
        flag[i] = flag[i] + carry + sum;
        if(flag[i]==2)
        {
            flag[i]=0;
            carry = 1;
        }
        else
        {
            carry = 0;
        }
        sum = 0;
    }
}

bool satisfies(vector<int>& flag, vector<vector<int> >& diet, int& Gp, int& Gc,int& Gf)
{
    int N = flag.size();
    int p=0,c=0,f=0;
    for(int i=0; i<N; i++)
    {
        if(flag[i]==1)
        {
             p += diet[i][0];
             c += diet[i][1];
             f += diet[i][2];
        }
    }
    if(p==Gp && c==Gc && f==Gf)
        return 1;
    else 
        return 0;
}

main()
{
    int T, N, Gp, Gc, Gf, P, C, F;
    cin >> T;
    for(int test=1; test<=T; test++)
    {
        cin >> Gp >> Gc >> Gf;
        cin >> N;
        vector< vector<int> > diet(N,vector<int>(3,0));
        vector<int> flag(N,0);
        bool valid = 0;
        for(int food=0; food<N; food++) cin >> diet[food][0] >> diet[food][1] >> diet[food][2];
        cout << "Case #" << test << ": ";
        while(!all(flag))
        {
            nextCombination(flag);
            if (satisfies(flag,diet,Gp,Gc,Gf))
            {
                cout << "yes" << endl; 
                valid = 1;
                break;
            }
        }
        if(!valid)
            cout << "no" << endl;
        flag.clear();
        diet.clear();
    }
}


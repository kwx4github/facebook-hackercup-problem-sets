import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
	static boolean FacebookHackerCup = true;

	public static void main(String[] args) throws FileNotFoundException {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		if (FacebookHackerCup) {
			inputStream = new FileInputStream("new_years_resolution.txt");
			outputStream = new FileOutputStream("out.txt");
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NewYearsResolution solver = new NewYearsResolution();
		solver.solve(1, in, out);
		out.close();
	}
}

class NewYearsResolution {
	int[] p;
	int[] c;
	int[] f;
	int n;
	boolean can;

	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int numberOfTest = in.nextInt();
		for (int it = 1; it <= numberOfTest; ++it) {
			int gp = in.nextInt();
			int gc = in.nextInt();
			int gf = in.nextInt();
			n = in.nextInt();
			p = new int[n];
			c = new int[n];
			f = new int[n];
			for (int i = 0; i < n; i++) {
				p[i] = in.nextInt();
				c[i] = in.nextInt();
				f[i] = in.nextInt();
			}
			for (int i = 0; i < n; i++) {
				can = false;
				cal(i, gp, gc, gf);
				if (can) {
					break;
				}
			}
			if (can) {
				out.printf("Case #%d: %s\n", it, "yes");
			} else {
				out.printf("Case #%d: %s\n", it, "no");
			}
		}
	}

	private void cal(int index, int gp, int gc, int gf) {
		int curp, curc, curf;
		curp = gp - p[index];
		curc = gc - c[index];
		curf = gf - f[index];
		if (curp == 0 && curc == 0 && curf == 0) {
			can = true;
			return;
		}
		if (curp < 0 || curc < 0 || curf < 0) {
			return;
		}
		for (int i = index + 1; i < n; ++i) {
			cal(i, curp, curc, curf);
		}
	}
}

class InputReader {
	public BufferedReader reader;
	public StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream), 32768);
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

}
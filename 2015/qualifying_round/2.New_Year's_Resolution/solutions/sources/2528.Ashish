#include <iostream>
#include <vector>
using namespace std;

vector<int> operator - (vector<int> &a, vector<int> &b){
	vector<int> c;
	for(int i=0; i<a.size(); i++){
		c.push_back(a[i]-b[i]);
	}
	return c;
}

bool isnil(vector<int> &v){
	for(int i=0; i<v.size(); i++){
		if(v[i]!=0) return 0;
	}
	return 1;
}

bool possible(vector<int> sum, vector<vector<int> > &food, int n){
	if(isnil(sum)) return 1;
	if(n==0) return 0;
	if(food[n-1][0]>sum[0] || food[n-1][1]>sum[1] || food[n-1][2]>sum[2]){
		return possible(sum, food, n-1);
	}
	return possible(sum, food, n-1) || possible(sum-food[n-1], food, n-1);
}

int main(){
	int t, n, p, c, f;
	vector<int> sum;
	cin>>t;
	for(int i=0; i<t; i++){
		cin>>p>>c>>f;
		//cout<<"*"<<n<<"*"<<p<<"*"<<c<<"*"<<f<<endl;
		sum.push_back(p);
		sum.push_back(c);
		sum.push_back(f);
		cin>>n;
		vector<vector<int> > food(n);
		for(int j=0; j<n; j++){
			cin>>p>>c>>f;
			food[j].push_back(p);
			food[j].push_back(c);
			food[j].push_back(f);
		}
		if(possible(sum, food, n)){
			cout<<"Case #"<<i+1<<": yes"<<endl;
		}
		else{
			cout<<"Case #"<<i+1<<": no"<<endl;
		}
		sum.clear();
		food.clear();
	}
}
			

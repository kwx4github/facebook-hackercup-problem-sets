import sys

test_cases = int(sys.stdin.readline())
global mem
global q

def isPossible(i, s):
    global q
    global mem
    if (s[0] < 0 or s[1] < 0 or s[2] < 0):
        return False
    if (i == 0):
        if (s[0] == q[i][0] and s[1] == q[i][1] and s[2] == q[i][2]):
            return True
        return False
    try:
        return mem[str(i) + "_" + str(s)]
    except:
        result = isPossible(i-1, s) or isPossible(i-1, [s[0] - q[i][0], s[1] - q[i][1], s[2] - q[i][2]]) or (s[0] == q[i][0] and s[1] == q[i][1] and s[2] == q[i][2])
        mem[str(i) + "_" + str(s)] = result
        return result
def solve_test_case(i):
    global q
    global mem
    s = [int(x) for x in sys.stdin.readline().strip().split()]
    len_q = int(sys.stdin.readline())
    q = []
    for qi in range(len_q):
        q.append([int(x) for x in sys.stdin.readline().strip().split()])
    to_print = "Case #" + str(i) + ": "
    mem = dict()
    if (isPossible(len_q - 1, s)):
        to_print += "yes"
    else:
        to_print += "no"
    print to_print

for i in range(test_cases):
    solve_test_case(i+1)

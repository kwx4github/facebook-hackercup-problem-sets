using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FCB_NewYearsResolution
{
	class Test
	{
		public int N { get; set; }
		public List<int> Proteins { get; set; }
		public List<int> Carbohydrates { get; set; }
		public List<int> Fat { get; set; }
		public int ExpectedProteins { get; set; }
		public int ExpectedCarbohydrates { get; set; }
		public int ExpectedFat { get; set; }

		public Test()
		{
			this.Proteins = new List<int>();
			this.Carbohydrates = new List<int>();
			this.Fat = new List<int>();
		}
	}
	class Input
	{
		public int NumberOfTests { get; set; }
		public List<Test> Tests { get; set; }
		public Input()
		{
			this.Tests = new List<Test>();
		}
	}
	class InputParser
	{
		public string FilePath { get; set; }
		public InputParser(string FilePath)
		{
			this.FilePath = FilePath;
		}
		public Input Parse()
		{
			Input input = new Input();

			StreamReader sr = new StreamReader(this.FilePath);
			input.NumberOfTests = int.Parse(sr.ReadLine());

			for (int i = 0; i < input.NumberOfTests; i++)
			{
				Test test = new Test();
				// read the expected values
				string[] temp = sr.ReadLine().Split(' ');
				test.ExpectedProteins = int.Parse(temp[0]);
				test.ExpectedCarbohydrates = int.Parse(temp[1]);
				test.ExpectedFat = int.Parse(temp[2]);

				// read N number
				test.N = int.Parse(sr.ReadLine());

				for (int j = 0; j < test.N; j++)
				{
					temp = sr.ReadLine().Split(' ');
					test.Proteins.Add(int.Parse(temp[0]));
					test.Carbohydrates.Add(int.Parse(temp[1]));
					test.Fat.Add(int.Parse(temp[2]));
				}

				input.Tests.Add(test);
			}

			return input;
		}
	}
	class Program
	{
		static void Main(string[] args)
		{
			Input input = (new InputParser("input.txt")).Parse();

			for (int t = 0; t < input.NumberOfTests; t++)
			{
				bool solutionFound = false;
				// generate the subsets
				List<int> subset;
				int lim = 1 << input.Tests[t].N;
				for (int i = 1; i < lim; i++)
				{
					subset = new List<int>();
					for (int j = 1; j <= input.Tests[t].N; j++)
					{
						int r = i & (1 << (j - 1));
						if (r != 0)
						{
							subset.Add(j - 1);
						}
					}
					// evaluate solution

					int prot = 0, carb = 0, fat = 0;
					for (int j = 0; j < subset.Count; j++)
					{
						prot += input.Tests[t].Proteins[subset[j]];
						carb += input.Tests[t].Carbohydrates[subset[j]];
						fat += input.Tests[t].Fat[subset[j]];
					}
					if ((prot == input.Tests[t].ExpectedProteins) &&
						(carb == input.Tests[t].ExpectedCarbohydrates) &&
						(fat == input.Tests[t].ExpectedFat))
					{
						solutionFound = true;
						break;
					}
				}

				if (solutionFound)
				{
					Console.WriteLine("Case #{0}: yes", t + 1);
				}
				else
				{
					Console.WriteLine("Case #{0}: no", t + 1);
				}
			}
		}
	}
}

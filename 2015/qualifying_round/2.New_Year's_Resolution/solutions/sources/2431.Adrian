#include <iostream>

struct Conf {
  int p, c, f;

  Conf() : p(0), c(0), f(0) {}
  Conf(int p, int c, int f) : p(p), c(c), f(f) {}
};

Conf operator+ (const Conf& left, const Conf& right) {
  return Conf(left.p + right.p, left.c + right.c, left.f + right.f);
}

bool operator== (const Conf& left, const Conf& right) {
  return left.p == right.p && left.c == right.c && left.f == right.f;
}

std::istream& operator>> (std::istream& in, Conf& conf) {
  in >> conf.p >> conf.c >> conf.f;
  return in;
}

std::ostream& operator<< (std::ostream& out, Conf& conf) {
  out << conf.p << " " << conf.c << " " << conf.f;
  return out;
}

int main()
{
  int ntests;
  std::cin >> ntests;

  for (int test = 1; test <= ntests; ++test) {
    Conf target;
    std::cin >> target;
    int n;
    std::cin >> n;
    Conf conf[n];
    for (int i = 0; i < n; ++i) {
      std::cin >> conf[i];
    }

    bool found = false;
    for (int i = 0; i < (1 << n); ++i) {
      Conf sum;
      for (int j = 0; j < n; ++j) {
        if (i & (1 << j)) {
          sum = sum + conf[j];
        }
      }
      if (target == sum) {
        found = true;
        std::cerr << "Case #" << test << " breakdown: " << std::endl;
        for (int j = 0; j < n; ++j) {
          if (i & (1 << j)) {
            std::cerr << conf[j] << " +" << std::endl;
          }
        }
        std::cerr << " == " << target << std::endl;
        std::cerr << " --------------------------------------------" <<
            std::endl;
        break;
      }
    }

    std::cout << "Case #" << test << ": ";
    if (found) {
      std::cout << "yes" << std::endl;
    } else {
      std::cout << "no" << std::endl;
    }
  }

  return 0;
}

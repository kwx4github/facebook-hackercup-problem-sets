/* ¹®Á¦
	2015.

*/


#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <functional>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <iostream>

#define ENP 	printf("**Entry Point**\n")
#define A		first
#define B		second
#define MP		make_pair

using namespace std;

typedef long long ll;
typedef vector 	<double> 			vec_d;
typedef vector 	<vec_d>				vvec_d;
typedef vector 	<int>				vec_i;
typedef vector 	<vec_i>				vvec_i;
typedef pair 	<int, int> 			pair_i;
typedef pair 	< pair_i, pair_i > 	pp_i;

const int INF = 0x7fffffff;
const int MINF = 0x80000000;
const int mod = 1000000007;
const int cons = 100001;

typedef struct _dat
{
	int p;
	int c;
	int f;
}dat;

dat goal;
vector <dat> food;
int chksum[3][22];
int n;

bool dfs(int st, int psum, int csum, int fsum)
{
//	printf("%d\n", st);

	if (st == n)
		return false;
	if (psum + chksum[0][n] - chksum[0][st] < goal.p)
		return false;
	if (csum + chksum[1][n] - chksum[1][st] < goal.c)
		return false;
	if (fsum + chksum[2][n] - chksum[2][st] < goal.f)
		return false;

	for (int i = st; i < n; i++)
	{
		int tp = psum + food[i].p;
		int tc = csum + food[i].c;
		int tf = fsum + food[i].f;

		if (tp > goal.p || tc > goal.c || tf > goal.f)
			continue;

		if (tp == goal.p && tc == goal.c && tf == goal.f)
		{
			return true;
		}

		if (dfs(i + 1, tp, tc, tf) == true)
			return true;
	}

	return false;
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("new_years_resolution.txt", "r", stdin);
	freopen("output.txt","w", stdout);
#endif

	int TestNum;
	scanf("%d", &TestNum);
	
	char * ans[2] = { "no", "yes" };

	for(int TestCase = 1; TestCase <= TestNum; TestCase++)
	{
		bool judge;

		scanf("%d%d%d", &goal.p, &goal.c, &goal.f);
		scanf("%d", &n);

		for (int i = 0; i < n; i++)
		{
			dat tmp;
			scanf("%d%d%d", &tmp.p, &tmp.c, &tmp.f);

			chksum[0][i + 1] = chksum[0][i] + tmp.p;
			chksum[1][i + 1] = chksum[1][i] + tmp.c;
			chksum[2][i + 1] = chksum[2][i] + tmp.f;

			food.push_back(tmp);
		}


		judge = dfs(0,0,0,0);

		printf("Case #%d: %s\n", TestCase ,ans[judge]);

		food.clear();
		memset(chksum, 0, sizeof(chksum));
	}

	return 0;
}
import java.util.*;
import java.io.*;

public class NewYears {
	public static void main(String[] args) throws Exception {
		Scanner in = new Scanner(new File("new_years_resolution.txt"));
		int T = in.nextInt();
		PrintWriter out = new PrintWriter(new FileWriter("new_years_resolution_output.txt"));
		for(int loop = 1; loop <= T; loop++) {
			int[] g = {in.nextInt(), in.nextInt(), in.nextInt()};
			int N = in.nextInt();
			int[] min = Arrays.copyOf(g, 3);
			int[][] foods = new int[N][3];
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < 3; j++) {
					foods[i][j] = in.nextInt();
					if(foods[i][j] < min[j]) {
						min[j] = foods[i][j];
					}
				}
			}
			boolean possible = recurse(g, min, foods, 0);
			System.out.printf("Case #%d: %s\n", loop, possible ? "yes" : "no");
			out.printf("Case #%d: %s\n", loop, possible ? "yes" : "no");
		}

		out.close();
	}

	private static boolean recurse(int[] g, int[] min, int[][] foods, int ind) {
		if(g[0] == 0 && g[1] == 0 && g[2] == 0) {
			return true;
		}
		if(g[0] < min[0] || g[1] < min[1] || g[2] < min[2] || ind >= foods.length) {
			return false;
		}
		boolean possible = recurse(g, min, foods, ind + 1);
		if(possible) {
			return true;
		}
		for(int i = 0; i < 3; i++) {
			g[i] -= foods[ind][i];
		}
		possible = recurse(g, min, foods, ind + 1);
		for(int i = 0; i < 3; i++) {
			g[i] += foods[ind][i];
		}
		return possible;
	}
}
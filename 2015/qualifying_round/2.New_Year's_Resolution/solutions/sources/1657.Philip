#include <iostream>
#include <vector>
#include <tuple>
using namespace std;

tuple<int,int,int> goal;
vector<tuple<int,int,int> > foods;

bool recurse(tuple<int,int,int> current, int index, bool take){
	if(index >= foods.size()) return false;
	if(!take) return recurse(current, index+1, true) || recurse(current, index+1, false);
	get<0>(current) += get<0>(foods[index]);
	get<1>(current) += get<1>(foods[index]);
	get<2>(current) += get<2>(foods[index]);
	if(current == goal) return true;
	return recurse(current, index+1, true) || recurse(current, index+1, false);
}

int main(){
	int t, gp, gc, gf, n, tp, tc, tf;
	cin >> t;
	for (int i = 0; i < t; ++i){
		cin >> gp >> gc >> gf >> n;
		goal = make_tuple(gp,gc,gf);
		for (int j = 0; j < n; ++j){
			cin >> tp >> tc >> tf;
			foods.push_back(make_tuple(tp,tc,tf));
		}
		cout << "Case #" << i+1 << ": ";
		cout << ((recurse(make_tuple(0,0,0), 0, true) || recurse(make_tuple(0,0,0), 0, false)) ? "yes" : "no");
		cout << endl;
		foods.clear();
	}
}
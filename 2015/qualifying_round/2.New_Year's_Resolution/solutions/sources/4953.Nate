
# Nate Collings - Facebook Hacker Cup 2015

# This is essentially the "knapsack problem" with a twist.
# Here's a messy (but working) solution.

class TestCase
  def initialize(desired, foods)
    @protein = desired[0]
    @carbs = desired[1]
    @fat = desired[2]
    @foods = set_foods(foods)
  end

  def set_foods(foods)
    foods.map { |food| { :protein => Integer(food[0]), :carbs => Integer(food[1]), :fat => Integer(food[2]) } }
  end

  def diet
    proteins = @foods.map { |food| food[:protein] }
    carbs = @foods.map { |food| food[:carbs] }
    fats = @foods.map { |food| food[:fat] }

    desired = {:protein => @protein, :carb => @carbs, :fat => @fat}
    food_options = {:protein => proteins, :carb => carbs, :fat => fats}

    if knapsack(desired, food_options)
      "yes"
    else
      "no"
    end
  end

  def false_case(desired, opt)
    if desired[:protein] < 0 || desired[:carb] < 0 || desired[:fat] <  0
      return true
    elsif opt[:protein].length == 0 || opt[:protein].length < 0 || opt[:carb].length == 0 || opt[:fat].length == 0
      return true
    else
      return false
    end
  end

  def knapsack(desired, food_options)
    if desired[:protein] == 0 && desired[:carb] == 0 && desired[:fat] == 0
      return true
    elsif false_case(desired, food_options)
      return false
    end

    new_desired_protein = desired[:protein] - food_options[:protein][0]
    new_desired_carb = desired[:carb] - food_options[:carb][0]
    new_desired_fat = desired[:fat] - food_options[:fat][0]
    new_desired = {:protein => new_desired_protein, :carb => new_desired_carb, :fat => new_desired_fat}

    rest_of_protein = food_options[:protein][1..-1]
    rest_of_carb = food_options[:carb][1..-1]
    rest_of_fat = food_options[:fat][1..-1]

    rest = {:protein => rest_of_protein, :carb => rest_of_carb, :fat => rest_of_fat}

    throw_away = knapsack(desired, rest)
    use = knapsack(new_desired, rest)

    return use || throw_away
  end

  attr_reader :protein, :carbs, :fat
end

def convert(food)
  food.split(" ").map { |f| Integer(f) }
end

def parse_input(file)
  data = File.open(file, 'r').each_line.map { |line| line.gsub("\n", "") }[1..-1]
  pos = 0
  cases = []
  while pos < data.length do
    desired = convert(data[pos])
    num_cases = Integer(data[pos+1])
    foods = data[pos+2..pos+1+num_cases].map { |food| convert(food) }
    cases << TestCase.new(desired, foods)
    pos += (num_cases+2)
  end
  cases
end


def correct_output
  <<-HERE
Case #1: yes
Case #2: no
Case #3: yes
Case #4: no
Case #5: yes
  HERE
end

def main
  cases = []
  test_cases = parse_input('input.txt')
  test_cases.each_with_index do |test, index|
    cases << "Case ##{index+1}: #{test.diet}\n"
  end

  output = cases.join("")
  puts output
  # puts "Result: #{output == correct_output}"
end

main()

//#include<bits/stdc++.h>
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <stack>
#include <cmath>
#include <queue>
#include <string>
#include<climits>
#include<set>
#include<list>
#include<sstream>
using namespace std;

#define MOD 1000000007
#define tr(c,i) for(auto i=(c).begin(); i != (c).end(); i++)
#define rep(i,n) for(int i=0;i<(n);i++)
#define forup(i,a,b) for(int i=(a);i<=(b);i++)
#define tcsolve() int tcs; cin >> tcs; forup(tc, 1, tcs) solve();



inline void gi(int &x) {
	register int c = getchar();
	x = 0;
	int neg = 0;

	for (; ((c<48 || c>57) && c != '-'); c = getchar());

	if (c == '-') {
		neg = 1;
		c = getchar();
	}

	for (; c>47 && c<58; c = getchar()) {
		x = (x << 1) + (x << 3) + c - 48;
	}

	if (neg)
		x = -x;
}
inline void print(int a){ char s[20]; int i = 0; do{ s[i++] = a % 10 + '0'; a /= 10; } while (a); i--; while (i >= 0)putchar(s[i--]); putchar('\n'); }

struct prod
{
	int p;
	int c;
	int f;
	prod()
	{

	}
	prod(int pp, int cc, int ff)
	{
		p = pp;
		c = cc;
		f = ff;
	}
};
int gp, gc, gf,n,p1,c1,f1;
prod prods[21];
bool isPossible(int i, int p, int c, int f)
{
	if ((p == gp) && (c == gc) && (f == gf))
		return true;

	if (i >= n || p > gp || c > gc || f > gf)
		return false;

	return isPossible(i + 1, p + prods[i].p, c + prods[i].c, f + prods[i].f) ||  isPossible(i+1, p, c, f);
}

void solve(int tcs)
{
	gi(gp);
	gi(gc);
	gi(gf);
	cin >> n;
	rep(i, n)
	{
		gi(p1);
		gi(c1);
		gi(f1);
		prods[i] = prod(p1, c1, f1);
	}
	cout << "Case #" << tcs << ": " << (isPossible(0,0,0,0) ? "yes" : "no") << "\n";
}

int main()
{
	int t;
	gi(t);
	forup(i, 1, t)
	{
		solve(i);
	}
}
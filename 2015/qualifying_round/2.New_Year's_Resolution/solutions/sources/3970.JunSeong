//TAG : 

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<string>
#include<cstring>
#include<cmath>
#include<vector>
#include<stack>
#include<map>
#include<queue>
#include<algorithm>
#include <climits>
using namespace std;

#define rep(i,n)	for(int (i)=0;(i)<(n);(i)++)
#define repd(i,n)	for(int (i)=(n)-1;(i)>=0;(i)--)
#define REP(i,n) for (int (i)=0,_n=(n); (i) < _n; (i)++)
#define FOR(i,a,b) for (int _b=(b), (i)=(a); (i) <= _b; (i)++)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)
#define ALL(c) (c).begin(), (c).end()
#define SORT(c) sort(ALL(c))

#define CLEAR(x) memset((x),0,sizeof(x));
#define CLEARA(x) memset(&(x),0,sizeof(x));
#define FILL(x,v) memset((x),(v),sizeof(x));
#define FILLA(x,v) memset(&(x),(v),sizeof(x));

#define REVERSE(c) reverse(ALL(c))
#define UNIQUE(c) SORT(c),(c).resize(unique(ALL(c))-(c).begin())
#define X first
#define Y second
#define pb push_back
#define MP make_pair
#define EPS 1e-9

#define PII pair<int,int> 
#define VI vector<int>
#define LL long long

#define MAXN	(1<<20)
int A[MAXN][3];

int main()
{
	int TC;
	int needs[3],input[3],n;

	scanf("%d",&TC);
	FOR(T,1,TC)
	{
		scanf("%d %d %d",&needs[0],&needs[1],&needs[2]);
		scanf("%d",&n);
		bool found=false;
		int cnt=0;
		rep(i,n){
			scanf("%d %d %d",&input[0],&input[1],&input[2]);
			if(found)continue;//no need process.
			int hit=0;
			rep(j,3){
				if(input[j]==needs[j])hit++;
				else if(input[j]> needs[j]){hit=-1;break;}
			}
			if(hit==3){found=true;continue;}
			else if(hit==-1)continue;
			REP(k,cnt){
				hit=0;
				rep(j,3){
					A[cnt][j]=A[k][j]+input[j];
					if(A[cnt][j]==needs[j])hit++;
					else if(A[cnt][j]> needs[j]){hit=-1;break;}
				}
				if(hit==3){found=true;break;}
				else if(hit==-1)continue;
				cnt++;//Save in array.
			}
			if(found)continue;
			memcpy(A[cnt++],input,sizeof(input));//save one.
		}
		if(found)printf("Case #%d: yes\n",T);
		else printf("Case #%d: no\n",T);
	}
	
	return 0;
}
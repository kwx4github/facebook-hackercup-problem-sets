#include<iostream>
using namespace std;

typedef long int ll;

bool findsum(ll pro[], ll gp, ll n)
{
	bool dp[gp+2][n+2];
	ll i,j;
	for(i=0;i<=n;i++)
	 dp[0][i]=1;
	 
for(i=1;i<=gp;i++)
 dp[i][0]=0;
	 
	for(i=1;i<=gp;i++)
	{
		for(j=j=1;j<=n;j++)
		{
			dp[i][j]= dp[i][j-1];
			if(i>= pro[j-1])
			 dp[i][j]= (dp[i][j]|| dp[i-pro[j-1]][j-1]);
		}
	}
	
//	for(i=0;i<=gp;i++)
//	 cout<<dp[i]<<" ";
	
	return dp[gp][n];
}

int main()
{
	ll gp,gc,gf,i,test;
	cin>>test;
	for(int t=1;t<=test;t++)
	{
		cout<<"Case #"<<t<<": ";
	cin>>gp>>gc>>gf;
	ll s= gp+gc+gf;
	ll n;
	cin>>n;
	ll pro[n+1],carbo[n+1], fat[n+1];
	for(i=0;i<n;i++)
	{
		cin>>pro[i]>>carbo[i]>>fat[i];
		pro[i]= pro[i]+ carbo[i] + fat[i];
	}
	
	bool flag1 = findsum(pro, s, n);
	if(flag1)
	cout<<"yes\n";
	else
	cout<<"no\n";
	}
	return 0;
}
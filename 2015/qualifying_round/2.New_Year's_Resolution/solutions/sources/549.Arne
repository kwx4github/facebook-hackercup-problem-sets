#include <iostream>
#include <algorithm>
using namespace std;

void printSolution( int testCase, bool balanced )
{
	cout << "Case #" << testCase << ": " << ( balanced ? "yes" : "no" ) << endl;
}

bool hasSubSum( int rP, int rC, int rF, 
   		int* P, int* C, int* F,
   		int current, int size )
{
  	if ( rP == 0 && rC == 0 && rF == 0 )
	{
		return true;
	} else if ( rP < 0 || rC < 0 || rF < 0 )
	{
		return false;
	} else if ( current == size )
	{
	  	return false;
	} else 
	{
		if ( hasSubSum( rP - P[current],
		      		rC - C[current],
				rF - F[current],
				P, C, F,
				current + 1, size
			      ) )
		{
			return true;
		} else
		{
			return hasSubSum( rP, rC, rF,
		    			  P, C, F,
					  current + 1, size
					);
		}
	}
}

void balanced( int testCase )
{
	int Gp, Gc, Gf;
	cin >> Gp >> Gc >> Gf;

	int N;
	cin >> N;

	int P[N], C[N], F[N];
	for ( int f = 0; f < N; ++f )
	{
		cin >> P[f] >> C[f] >> F[f];
	}
	
	printSolution( testCase, hasSubSum( Gp, Gc, Gf, P, C, F, 0, N ) );
}


int main( int argc, char** argv )
{
	int T;
	cin >> T;

	for ( int i = 1; i <= T; ++i ) balanced( i );
	return 0;
}

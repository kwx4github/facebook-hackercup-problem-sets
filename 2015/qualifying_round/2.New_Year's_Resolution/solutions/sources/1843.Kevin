/*Alexdiet 1-8-15

*/

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <algorithm>
#include <math.h>

#define f0(i, N) for (int i = 0; i < N; i++)
#define f1(i, N) for (int i = 1; i < N; i++)

typedef long long ll;

using namespace std;

struct food {
	int p, c, f;
};

bool getans(food total, food current, int index, food menu [], int N) {
	if (current.p == total.p && current.c == total.c && current.f == total.f)
		return 1;
	if (current.p >= total.p || current.c >= total.c || current.f >= total.f)
		return 0;
	if (index >= N)
		return 0;

	cout << index << ": " << current.p << " " << current.c << " " << current.f << endl;
	bool nochoose = getans(total, current, index + 1, menu, N);
	
	current.p += menu[index].p;
	current.c += menu[index].c;
	current.f += menu[index].f;
	
	cout << index << ": " << current.p << " " << current.c << " " << current.f << endl;
	bool yeschoose = getans(total, current, index + 1, menu, N);
	
	return nochoose || yeschoose;
}

int main() {
	ifstream fin ("alexdiet.in");
	ofstream fout ("alexdiet.out");
	
	int T;
	fin >> T;
	
	f0(caseno, T) {
		cout << "CASE " << (caseno + 1) << endl;
		food total;
		fin >> total.p >> total.c >> total.f;
		int N;
		fin >> N;
		food menu[N];
		f0(i, N)
			fin >> menu[i].p >> menu[i].c >> menu[i].f;
		
		//dp [current protein in knapsack][
		//Screw DP Brute force
		food current;
		current.p = 0;
		current.c = 0;
		current.f = 0;
		fout << "Case #" << (caseno + 1) << ": ";
		fout << ((getans(total, current, 0, menu, N)) ? "yes" : "no" ) << endl;
		
	}
	
	return 0;
}



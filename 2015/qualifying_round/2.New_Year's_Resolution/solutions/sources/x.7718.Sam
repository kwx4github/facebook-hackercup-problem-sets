#include<iostream>
#include<stdio.h>
using namespace std;
/*int partition(int a[],int beg,int end)
{
	int p=beg, pivot=a[beg];
	for(int loc=beg+1; loc<end; loc++)
	{
		if(pivot>a[loc])
		{
			a[p]=a[loc];
			a[loc]=a[p+1];
			a[p+1]=pivot;
			p=p+1;
		}
	}
	return p;
}

void qsort(int a[],int p, int r)
{	
	if(p< r)
	{	
		int q = partition(a,p,r);
		qsort(a,p,q-1);
		qsort(a,q+1,r);				
	}
}*/
bool is_possible(int Gp, int Gc, int Gf, int A[3][1000], int n)
{

	if(n==0)
		return ( Gp==0 && Gc==0 && Gf==0);
	if(A[0][n-1] > Gp || A[1][n-1] > Gc || A[2][n-1] > Gf)
		return is_possible(Gp, Gc, Gf, A, n-1);

	return (is_possible(Gp, Gc, Gf, A, n-1) || is_possible(Gp-A[0][n-1], Gc-A[1][n-1], Gf-A[2][n-1], A, n-1));     
}
int main()
{
   int Gp,Gc,Gf,n,i,t,j,A[3][1000];
   cin>>t;
   i = 0;
   while(i<t)
   {
     cin>>Gp>>Gc>>Gf;
     cin>>n;
     for(j=0;j<n;j++)
     	cin>>A[0][j]>>A[1][j]>>A[2][j];
     bool possible = is_possible(Gp, Gc, Gf, A, n);
     cout<<"Case #"<<i+1<<": "<<((possible==true)?"Yes":"No")<<endl;
     i++;
   }
}

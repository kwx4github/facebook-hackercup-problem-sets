//package facebookhackercup2015;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

class NewYearsResolution {
        BufferedReader br; PrintWriter out; StringTokenizer tk; boolean eof, submit;
        public static void main(String args[]) throws IOException { new NewYearsResolution(); }
        
        String ntk() { while (tk == null || !tk.hasMoreTokens()) { try { tk = new StringTokenizer(br.readLine()); } catch (Exception e) { eof = true; return null; } } return tk.nextToken(); }
        String nln() { try { return br.readLine(); } catch (IOException e) { eof = true; return null; } }
        String ns() { return ntk(); }
        int ni() throws IOException { return Integer.parseInt(ntk()); }
        long nl() throws IOException { return Long.parseLong(ntk()); }
        float nf() throws IOException { return Float.parseFloat(ntk()); }
        double nd() throws IOException { return Double.parseDouble(ntk()); }
        void debug(Object... o) { if(!submit) { System.out.println(Arrays.deepToString(o)); } }
        
        public NewYearsResolution() throws IOException {
                long start = System.currentTimeMillis();
                submit = !false;
                if(submit == false) br = new BufferedReader(new InputStreamReader(new FileInputStream("D:\\input.txt")));
                else br = new BufferedReader(new InputStreamReader(System.in));
                out = new PrintWriter(System.out);
                
                int T = ni();
                for(int t=1; t<=T; t++)
                        solve(t);
                
                long end = System.currentTimeMillis();
                debug(end - start, " ms");
                out.close();
        }
        
        int N, G, F[];
        void solve(int t) throws IOException {
                out.print("Case #" + t + ": ");
                
                G = ni() + ni() + ni();
                N = ni();
                F = new int[N];
                for(int i=0; i<N; i++) {
                        F[i] = ni()+ ni() + ni();
                }
                
                boolean can = false;
                for(int bitmask=0; bitmask<Math.pow(2, N); bitmask++) {
                        int sum = 0;
                        for(int i=0; i<N; i++) {
                                if((bitmask & (1<<i)) > 0) {
                                        sum += F[i];
                                }
                        }
                        if(sum == G) {
                                can = true;
                                break;
                        }
                }
                
                if(can) {
                        out.println("yes");
                } else {
                        out.println("no");
                }
        }
}

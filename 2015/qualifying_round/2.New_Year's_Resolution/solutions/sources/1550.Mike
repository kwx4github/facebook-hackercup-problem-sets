#include <iostream>
#include <vector>
using namespace std;

struct mn
{
    int p, c, f;
    mn() : p(), c(), f() { }
    mn& operator+=(const mn& mn2) { p += mn2.p; c += mn2.c; f += mn2.f; return *this; }
    bool operator==(const mn& mn2) { return p == mn2.p && c == mn2.c && f == mn2.f; }
};
istream& operator>>(istream& is, mn& mn1) { return is >> mn1.p >> mn1.c >> mn1.f; }

bool tc()
{
    mn g;
    int n;
    cin >> g >> n;
    vector<mn> mnv(n);
    for (int i = 0; i < n; i++)
        cin >> mnv[i];
    for (int i = 0; i < (1 << n); i++) {
        mn cur;
        for (int j = 0; j < n; j++)
            if (i & (1 << j))
                cur += mnv[j];
        if (cur == g)
            return true;
    }
    return false;
}

int main()
{
    ios::sync_with_stdio(false);
    int t;
    cin >> t;
    for (int i = 1; i <= t; i++)
        cout << "Case #" << i << ": " << (tc() ? "yes\n" : "no\n");
}

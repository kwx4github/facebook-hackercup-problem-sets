#include "fstream"
#include "iostream"
#include "string"
#include <iostream>
#include <complex>
#include <cmath>
#include <iomanip>
#include <memory>
#include <algorithm>
#include <cstdio>
#include <utility>
#include <iostream>
#include <conio.h>
#include <vector>
using namespace std;
ifstream fin("input.txt");
ofstream fout("output.txt");
const int N_MAX = 100;
class Complex
	{
	private:
		int a;	
		int b;	
		int c;
	public:
		Complex() {};
		~Complex() {}
		Complex operator+(Complex &);
		bool operator==(Complex &);
		friend ostream &operator<<(ostream &, Complex &);
		friend istream &operator>>(istream &, Complex &);
		Complex(int a_, int b_, int c_){
			a = a_;
		  	b = b_;
			c = c_;
		}
	};

Complex a[N_MAX];

bool check();
bool sum(int, Complex);
bool main_2(int, int, Complex);

int main(){
	int t;
	fin >> t;
	for (int i = 0; i < t; i++){
		fout << "Case #" << i+1 << ": ";
		if (check()) fout << "yes" << endl;
		else fout << "no" << endl;
	}
	return 0;
}

Complex Complex::operator+(Complex &fp1){
	fp1.a = a + fp1.a;
	fp1.b = b + fp1.b;
	fp1.c = c + fp1.c;
	return fp1;
	} 
bool Complex::operator==(Complex &fp1){
	if (a == fp1.a &&  b == fp1.b && c == fp1.c) return true;
	else return false;
	} 
ostream &operator<< (ostream &fo, Complex &fp){
	fo << fp.a << fp.b << fp.c << "\n";
	return fo;
	}
istream &operator>>(istream &fi, Complex &fp){
	fi >> fp.a >> fp.b >> fp.c;
	return fi;
	}

bool check(){
	Complex delux;
	int n;
	fin >> delux;
	fin >> n;
	for (int i = 0; i < n; i++){
		fin >> a[i];
	}
	for (int i = 1; i <= n; i++){
		if (main_2(i, n, delux)) return true;
	}
	return false;
}

bool getNextCombin(int *a, int k, int n)
{
	//checking of the input arguments
 
	if (k > n || k <= 0 || n <= 0)
		return false;
 
 
	//set it to the last position
	//in the array (the last column)
	int i = k - 1;	 
	int col = 0;
 
 
	//find the first column in which
	//the (value+1) does not exceed (n-col_num)
	while (i >= 0)
	{
		if (++a[i] <= n - col)
			break;
 
		--i;
		++col;
	}
 
	//if no combinations remain
	if (i<0)
		return false;
 
	//increase the next right-hand combinations
	for ( ; i < k-1; ++i)
	{
		a[i + 1] = a[i]+1;		
	}
 
	return true;
}

Complex Sum(int *arr, int size);
 
bool main_2(int k, int n, Complex delux)
{
	int *index_arr = new int[k];
 
	// creation of the initial combination 1,2,3, ....
	for (int i = 0 ; i< k ; ++i)
	{
		index_arr[i] = i+1;
	}
 
 
	int num = 1; // the number of a combination
 
	// print the initial combination
	if (Sum(index_arr, k) == delux) return true;
 
	//while there is a combination
	while (getNextCombin(index_arr, k, n)){
		if (Sum(index_arr, k) == delux) return true;
	}
 
	delete[] index_arr;
 
	//_getch();
	return false;
}
 
 
Complex Sum(int *arr, int size)
{
	Complex s(0, 0, 0), b;
	for (int i = 0; i < size; ++i){
		b = a[arr[i]-1];
		s = s + b;
	}
	return s;
}
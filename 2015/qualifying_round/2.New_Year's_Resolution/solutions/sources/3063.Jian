import java.io.*;
import java.util.*;

public class P2 {

 
	static HashSet<String> foodbook ;
	static boolean can_eat=false;	
	static Food target;
	static ArrayList <Food> foodlist;

	public static void main (String [] args) throws IOException {
		    int N,p,c,f;
		    
			FileReader fileReader = new FileReader(new File("new_years_resolution.txt"));
			BufferedReader bufferedReader = new BufferedReader(fileReader); 
			FileWriter fileWriter = new FileWriter(new File("s2.txt"));
			StringTokenizer st;
			
			int T;
	  
			T=Integer.parseInt(bufferedReader.readLine());
			int case_count=1;
			 
			while (case_count<=T)
			{   can_eat=false;  	 
				foodbook = new HashSet<String>();
				 
				st=new StringTokenizer(bufferedReader.readLine());
				p=Integer.parseInt(st.nextToken());
				c=Integer.parseInt(st.nextToken());
				f=Integer.parseInt(st.nextToken());
				target = new Food(p,c,f);
				
				foodlist= new ArrayList <Food>();
				
				N=Integer.parseInt(bufferedReader.readLine());
				int itemcount=0;
				
				while (itemcount<N)
				{		
					st=new StringTokenizer(bufferedReader.readLine());
					p=Integer.parseInt(st.nextToken());
					c=Integer.parseInt(st.nextToken());
					f=Integer.parseInt(st.nextToken());
					Food fd=new Food(p,c,f);
					
					int compresult=target.compare(fd);
					if(compresult==0) can_eat=true;
					if(compresult>0) 
					{
						foodbook.add(fd.toString());
						foodlist.add(fd);
					}
					itemcount++;
					  
				}  
				if (!can_eat) 
				{
					HashSet<Food> foodset= new  HashSet<Food>(foodlist);
					powerSet(foodset);
				}
				fileWriter.write("Case #"+case_count+": ");
				if (can_eat) fileWriter.write("yes\n");
				   else  fileWriter.write("no\n");
				   
				case_count++;
			  } 
			  fileReader.close();
			  fileWriter.close();
			 
		}  
		
public static Food comboFood(HashSet<Food> fdset)		{
	int p=0,c=0,f=0;
 	for (Food fd: fdset)
 	{
	    p+=fd.P;
		c+=fd.C;
		f+=fd.F;
	}
	return new Food(p,c,f);
}

public static HashSet<HashSet<Food>> powerSet(HashSet<Food> originalSet) {
	HashSet<HashSet<Food>> sets = new HashSet<HashSet<Food>>();
	if (P2.can_eat) return sets;
    if (originalSet.isEmpty()) {
        sets.add(new HashSet<Food>());
        return sets;
    }
    List<Food> list = new ArrayList<Food>(originalSet);
    Food head = list.get(0);
    HashSet<Food> rest = new HashSet<Food>(list.subList(1, list.size()));
    for (HashSet<Food> set : powerSet(rest)) {
    	HashSet<Food> newSet = new HashSet<Food>();
   
    newSet.add(head);
    newSet.addAll(set);
    
 	int comp_result=P2.comboFood(newSet).compare(P2.target);
    if (comp_result==0) P2.can_eat=true;
    if (comp_result<0)  sets.add(newSet);
    sets.add(set);
   }
   return sets;
  }
}

class Food {
	public int P;
	public int C;
	public int F;
	
	public Food(int p,int c,int f)
	{
		this.P=p;
		this.C=c;
		this.F=f;
	}
	 
	public int compare(Food f)
	{
		if (this.P>f.P || this.C>f.C || this.F>f.F) return 1;
		if (this.P==f.P && this.C==f.C && this.F==f.F) return 0;
		return -1;
	}
	public String toString(){
		return Integer.toString(P)+"-"+Integer.toString(C)+"-"+Integer.toString(F);
	}
}
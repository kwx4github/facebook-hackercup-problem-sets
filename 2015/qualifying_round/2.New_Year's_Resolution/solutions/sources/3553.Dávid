
def add(item1, item2):
    """Adds the 3-vectors elementwise, returns a new vector with the result."""
    return [ item1[i]+item2[i] for i in range(len(item1)) ]
    
def judge(item, goal):
    """ return 0 if item is equal to goal elementwise, 
        a positive number if item <= goal elementwise,
        otherwise a negative number."""
    res = 0 # so far equal
    l = len(item)
    for i in range(l):
        if item[i] < goal[i]:
            res += 1
        elif item[i] > goal[i]:
            res -= (l+1)
    return res

def solve(G, foods):
    prevList = [ [0, 0, 0] ]
    # always build curList from prevList, by adding (or not) the next food item
    for food in foods:
        curList = list(prevList)
        # now add the current food item to each element of the list
        for item in prevList:
            newItem = add(item, food)
            resp = judge(newItem, G)
            if resp == 0:
                # got the answer
                return 'yes'
            elif resp > 0:
                curList.append(newItem)
            # otherwise don't add it
        prevList = curList
    # if we get here we failed
    return 'no'


T = int(raw_input())
for t in range(1, T+1):
    G = map(int, raw_input().split())
    N = int(raw_input())
    foods = []
    for n in range(N):
        foods.append( map(int, raw_input().split()) )
    print 'Case #{0}: {1}'.format(t, solve(G, foods) )

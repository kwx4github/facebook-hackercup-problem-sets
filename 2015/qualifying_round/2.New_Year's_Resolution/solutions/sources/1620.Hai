#include <bits/stdc++.h>

using namespace std;

struct ti{
    int x, y, z;
    ti(int _x = 0, int _y = 0, int _z = 0) : x(_x), y(_y), z(_z){}
    bool operator < (const ti &op)const{
        if (x != op.x) return x < op.x;
        if (y != op.y) return y < op.y;
        return z < op.z;
    }
    ti operator + (const ti &op)const{
        return ti(x + op.x, y + op.y, z + op.z);
    }
} a[22];

set<ti> myset;

bool solve(){
    myset.clear();
    int p, c, f, n;
    cin >> p >> c >> f;
    ti need = ti(p, c, f);

    cin >> n;
    for(int i = 0; i < n; ++i)
        cin >> a[i].x >> a[i].y >> a[i].z;
    int l = n/2;
    int r = n - l;
    for(int s = 0; s < (1<<l); ++s){
        ti here = ti(0, 0, 0);
        for(int i = 0; i < l; ++i)
            if ((s>>i) & 1) here = here + a[i];
        myset.insert(here);
    }
    for(int s = 0; s < (1<<r); ++s){
        ti here = ti(0, 0, 0);
        for(int i = 0; i < r; ++i)
            if ((s>>i) & 1) here = here + a[i + l];
        if (myset.count(ti(p - here.x, c - here.y, f - here.z))) return true;
    }
    return false;
}

int main(){
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int tc;
    cin >> tc;
    for(int i = 1; i <= tc; ++i){
        cout << "Case #" << i << ": ";
        bool ok = solve();
        cout << (ok ? "yes" : "no") << endl;
    }
    return 0;
}

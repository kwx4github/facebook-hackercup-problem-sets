#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <stdio.h>
#include <queue>

using namespace std;

pair <int, pair<int, int> > tbl[2000100];
pair <int, pair<int, int> > ings[25];
bool vis[2000100];
int N;

pair <int, pair<int, int> > calc(int mask)
{
	if (vis[mask])
		return tbl[mask];
	vis[mask] = 1;
	for (int i = 0; i < N; i++)
	{
		if (mask&(1 << i))
		{
			auto cv = calc(mask&(~(1 << i)));
			cv.first += ings[i].first;
			cv.second.first += ings[i].second.first;
			cv.second.second += ings[i].second.second;
			return tbl[mask] = cv;
		}
	}
}

int main()
{
	int T, tt = 1;
	pair <int, pair<int, int> > needs;
	cin >> T;
	while (T--)
	{
		cin >> needs.first>>needs.second.first>>needs.second.second;
		cin >> N;
		int i;
		for (i = 0; i < N; i++)
			cin >> ings[i].first >> ings[i].second.first >> ings[i].second.second;
		for (i = 0; i < (1 << N); i++)
			vis[i] = 0;
		vis[0] = 1;
		tbl[0] = { 0, { 0, 0 } };
		for (i = 0; i < (1 << N); i++)
		{
			auto cur = calc(i);
			if (cur == needs)
				break;
		}
		printf("Case #%d: %s\n", tt++, (i < (1 << N) ? "yes": "no"));
	}
	return 0;
}

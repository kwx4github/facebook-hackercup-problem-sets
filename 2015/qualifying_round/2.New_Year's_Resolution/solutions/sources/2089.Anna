#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys


class SolutionFound(Exception):
    pass


def test_combo(wants, food_combination):
    p = c = f = 0

    for food in food_combination:
        p += food[0]
        c += food[1]
        f += food[2]

    return wants == (p, c, f)


def get_answer(wants, food):
    source = food
    items_count = len(food)

    def check(combo, idx):
        if test_combo(wants, combo):
            raise SolutionFound()

    def go_next_collection(collection, tail_index):
        """ tail_index - index of collection's tail item in source
        """

        for i in range(items_count):

            if i == tail_index or i < tail_index:
                continue

            tail_item = source[i]

            new_collection = collection + [tail_item]
            check(new_collection, i)
            if len(new_collection) < items_count:
                # Walk next combinations started with this
                # new collection.
                go_next_collection(new_collection, i)

    try:
        for i in range(items_count):
            check([source[i]], i)
            go_next_collection([source[i]], i)
    except SolutionFound:
        return True
    return False


def _main():
    case_count = T = int(sys.stdin.readline()[:-1])

    for i in range(1, case_count + 1):
        Gs = tuple([int(x)
                    for x in sys.stdin.readline().strip("\n ").split(" ")])
        N = int(sys.stdin.readline().strip("\n "))

        PCFs = []
        for i2 in range(0, N):
            PCF = tuple([int(x)
                         for x in sys.stdin.readline().strip("\n ").split(" ")])
            PCFs.append(PCF)

        answer = "yes" if get_answer(Gs, PCFs) else "no"

        print "Case #{}: {}".format(
            i,
            answer,
        )


if __name__ == '__main__':
    _main()

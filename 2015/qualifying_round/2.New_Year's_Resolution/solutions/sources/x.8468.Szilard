import java.io.*;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solution sol = new Solution();
        int testCount = Integer.parseInt(in.next());
        for (int i = 1; i <= testCount; i++)
            sol.solve(i, in, out);
        out.close();
    }
}

class Solution {
    int[] p;
    int[] c;
    int[] f;

    public void solve(int test, InputReader in, PrintWriter out) {
        int gP = in.nextInt();
        int gC = in.nextInt();
        int gF = in.nextInt();

        int n = in.nextInt();

        p = new int[n];
        c = new int[n];
        f = new int[n];

        for (int i=0; i<n; i++){
            p[i] = in.nextInt();
            c[i] = in.nextInt();
            f[i] = in.nextInt();
        }

        // create dp
        boolean[][] dp = new boolean[n][gP+1];
        dp[0][0] = true;

        if (p[0] <= gP){
            dp[0][p[0]] = true;
        }

        for (int i=1; i<n; i++){
            for (int j=0; j<Math.min(p[i], gP); j++){
                dp[i][j] = dp[i-1][j];
            }

            for (int j=p[i]; j<=gP; j++){
                dp[i][j] = dp[i-1][j] || dp[i][j - p[i]];
            }
        }

        if (!dp[n-1][gP]){
            printSol(out, false, test);
        } else {
            if (possible(dp, n-1, gP, gP, gC, gF)){
                printSol(out, true, test);
            } else {
                printSol(out, false, test);
            }
        }
    }

    private boolean possible(boolean[][] dp, int i, int j, int pVal, int cVal, int fVal) {
        if (j == 0){
            return pVal == 0 && cVal == 0 && fVal == 0;
        }

        if (i < 0 || j < 0 || !dp[i][j] || pVal < 0 || cVal < 0 || fVal < 0){
            return false;
        }

        return possible(dp, i-1, j, pVal, cVal, fVal)
                || possible(dp, i-1, j - p[i], pVal - p[i], cVal - c[i], fVal - f[i]);
    }

    private void printSol(PrintWriter out, boolean b, int test) {
        if (b){
            out.println(String.format("Case #%d: yes", test));
        } else {
            out.println(String.format("Case #%d: no", test));
        }
    }

}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;


    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException("FATAL ERROR", e);
            }
        }

        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.valueOf(next());
    }

}


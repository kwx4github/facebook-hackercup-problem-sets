#include <iostream>
#include <vector>

using namespace std;

struct ingredient{
  unsigned long p;
  unsigned long c;
  unsigned long f;
};

void debugPrint(int c[],int k){
  cout<<"[";
  for(int i=0; i<k; i++){
    cout<<c[i]<<" ";
  }
  cout<<"]"<<endl;
}

bool nextCombination(int c[],int k, int n){
  int i=k-1;
  ++c[i];
  while((i>=0)&&(c[i]>=n-k+1+i)){
    --i;
    ++c[i];
  }
  if(c[0]>n-k)
    return false;
  
  for(i=i+1; i<k; ++i){
    c[i] = c[i-1]+1;
  }

  return true;
}



bool findGoodMix(vector<ingredient> *foods, ingredient *goal){

  for(int k=1; k<foods->size(); k++){
    ingredient tmp={0,0,0};
    int n=foods->size();
    int c[21];
    int i;
    for(i=0; i<k; ++i){
      c[i]=i;
    }
    //debugPrint(c,k);

    for(i=0; i<k; i++){
      tmp.p+=foods->at(c[i]).p;
      tmp.c+=foods->at(c[i]).c;
      tmp.f+=foods->at(c[i]).f;
    } 
    if(tmp.p==goal->p &&
       tmp.c==goal->c &&
       tmp.f==goal->f){
      return true;
    }
    
    while(nextCombination(c,k,n)){
      tmp.p=0;
      tmp.c=0;
      tmp.f=0; 
      //debugPrint(c,k);
      for(i=0; i<k; i++){
	tmp.p+=foods->at(c[i]).p;
	tmp.c+=foods->at(c[i]).c;
	tmp.f+=foods->at(c[i]).f;
      } 
      if(tmp.p==goal->p&&
	 tmp.c==goal->c&&
	 tmp.f==goal->f){
	return true;
      }
    }
  }
  return false;
}


int main(){
  //cout<<"Facebook hackercup problem 2."<<endl;
  int t;
  cin>>t;  
  //cout<<t<<endl;

  int ri=0;
  bool result[t];
  
  while(t--){
    int gp,gc,gf;
    ingredient goal;
    cin>>gp>>gc>>gf;
    goal.p = gp;
    goal.c = gc;
    goal.f = gf;
    //cout<<"GP:"<<gp<<" GC:"<<gc<<" GF:"<<gf<<endl;
    int n;
    cin>>n;
    //cout<<"N:"<<n<<endl;
    int i=0;
    //int ri=0;
    vector<ingredient> food;
    bool found = false;
    
    while(i!=n){
      int p,c,f;
      cin>>p>>c>>f;

      if(p>goal.p || c>goal.c || f>goal.f){
	//cout<<"high ingredient food!"<<endl;
	//cout<<goal.p<<" "<<goal.c<<" "<<goal.f<<endl;
	//cout<<p<<" "<<c<<" "<<f<<endl;
      }else if(p==goal.p && c==goal.c && f==goal.f){
	//cout<<"prefect ingredient food!"<<endl;
	found = true;
      }else{
	//cout<<"Add food!"<<endl;
	food.push_back((ingredient){p,c,f});
      }
      i++;
    }
    //cout<<"Total food:"<<food.size()<<endl;

    if(found){
      //cout<<"It was easy!"<<endl;
      result[ri] = true;
    }else{
      //cout<<"Lets try to make mix!"<<endl;
      if(findGoodMix(&food, &goal))
	result[ri] = true;
      else
	result[ri] = false;
	
    }
    ri++;
  }

  for(int i=0; i<ri; i++){
    cout<<"Case #"<<(i+1)<<": ";
    if(result[i])
      cout<<"yes";
    else
      cout<<"no";
    cout<<endl;
  }
  
  return 0;
}

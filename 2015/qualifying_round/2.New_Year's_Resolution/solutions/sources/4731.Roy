#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <utility>
#include <algorithm>

using namespace std;

class source{
public:
  int gp,gc,gf;
};

bool sortftn(source s1, source s2){
  return s1.gp+s1.gc+s1.gf<s2.gp+s2.gc+s2.gf;
}

int main(void){
  int t,n,i,j,out;
  source s,alls,tmp,tmp1;
  pair<source,int> p;
  cin>>t;
 
  for(i=1; i<=t; i++){
    cout << "Case #" << i << ": ";
	out = 0;
	cin>>s.gp>>s.gc>>s.gf;
	cin>>n;
	vector<source> v;
	for (j=0; j<n; j++){
	  source ss;
	  cin>>ss.gp>>ss.gc>>ss.gf;
	  if (ss.gp<=s.gp && ss.gc<=s.gc && ss.gf<=s.gf) v.push_back(ss);
	}
	sort(v.begin(),v.end(),sortftn);
	n = v.size();
	alls.gp=alls.gc=alls.gf=0;
	for (j=0; j<n; j++){
	  alls.gp+=v[j].gp;
	  alls.gc+=v[j].gc;
	  alls.gf+=v[j].gf;
	  //cout << v[j].gp << ' ' << v[j].gc << ' ' << v[j].gf << endl;
	}
	if (alls.gp<s.gp || alls.gc<s.gc || alls.gf<s.gf) out = -1;
	else if (alls.gp==s.gp && alls.gc==s.gc && alls.gf==s.gf) out = 1;
    else{
	  queue<pair<source,int> > q;
	  q.push(make_pair(alls,-1));
	  while(!q.empty() && out==0){
	    p = q.front();
		q.pop();
		tmp = p.first;
		j = p.second;
		for (j=j+1; j<n; j++){
		  tmp1.gp = tmp.gp-v[j].gp;
		  tmp1.gc = tmp.gc-v[j].gc;
		  tmp1.gf = tmp.gf-v[j].gf;
		  if (tmp1.gp==s.gp && tmp1.gc==s.gc && tmp1.gf==s.gf){
		    out = 1;
			break;
		  }
		  else if (tmp1.gp>s.gp && tmp1.gc>s.gc && tmp1.gf>s.gf){
		    q.push(make_pair(tmp1,j));
		  }
		  if (tmp1.gp+tmp1.gc+tmp1.gf < s.gp+s.gc+s.gf) break;
		}
	  }
    }    
	if (out==1) cout << "yes";
	else cout << "no";
	if (i!=t) cout << endl;
  }
  
  return 0;
}
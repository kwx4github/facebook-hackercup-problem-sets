#!/usr/bin/python

class Solve:
    def __init__(self):
        self.solutions = []

    def parseNode(self, i, T, L, j, c, path):
        if j >= len(L) or c > T[i]:
            return

        # print i, T, L, j, c, path

        if c + L[j][i] == T[i]:
            self.solutions.append(path + [j])
            return

        self.parseNode(i, T, L, j + 1, c + L[j][i], path + [j])
        self.parseNode(i, T, L, j + 1, c, path)


def solvePart(i, T, L):
    A = sorted(L, key=lambda k: -k[i])
    solver = Solve()
    solver.parseNode(i, T, A, 0, 0, [])

    # print solver.solutions
    for j in solver.solutions:
        if i >= 2:
            return True
        p = []
        for k in j:
            p.append(A[k])

        # print p
        if solvePart(i + 1, T, p) == True:
            return True
    return False


T = int(raw_input().strip())
for Ti in xrange(T):
    (Gp, Gc, Gf) = [ int(i) for i in raw_input().strip().split() ]
    N = int(raw_input().strip())

    A = []
    for _ in xrange(N):
        (P, C, F) = [ int(i) for i in raw_input().strip().split() ]
        A.append((P, C, F))

    # print (Gp, Gc, Gf), A

    if solvePart(0, (Gp, Gc, Gf), A) == True:
        print "Case #%d: yes" % (Ti + 1)
    else:
        print "Case #%d: no" % (Ti + 1)

    # print " --- "
    # if Ti > 1: break


#include "stdafx.h"
#include <iostream>
#include <ctime>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <fstream>
#include <unordered_map>
#include <bitset>

using namespace std;

struct food
{
	int p, c, f;
};

bool CanFit(vector<food> & foods, food & canEat, size_t combinations)
{
	for (size_t comb = 1; comb <= combinations; comb++)
	{
		size_t bit = 1;
		food tmp = canEat;
		for (size_t j = 0; j < foods.size(); j++)
		{
			bool isSet = ((comb & bit) == bit);
			if (isSet)
			{
				tmp.p -= foods[j].p;
				tmp.c -= foods[j].c;
				tmp.f -= foods[j].f;
				if (tmp.c == 0 && tmp.f == 0 && tmp.p == 0)
					return true;
			}
			if (tmp.c < 0 || tmp.f < 0 || tmp.p < 0)
				break;
			bit <<= 1;
		}
		//printf("%d %d %d", tmp.c, tmp.f, tmp.p);
	}
	return false;
}

int main()
{
	FILE *in, *out;
	freopen_s(&in, "new_years_resolution.txt", "r", stdin);
	freopen_s(&in, "out.txt", "w", stdout);

	int t;
	cin >> t;
	for (int i = 1; i <= t; i++)
	{
		food fit;
		cin >> fit.p >> fit.c >> fit.f;
		int n;
		cin >> n;
		vector<food> foods;
		size_t combinations = 0;
		while (n-- > 0)
		{
			food f;
			cin >> f.p >> f.c >> f.f;
			foods.push_back(f);
			combinations <<= 1;
			combinations += 1;
		}
		cout << "Case #" << i << ": " << (CanFit(foods, fit, combinations) ? "yes" : "no") << endl;
	}

	return 0;
}
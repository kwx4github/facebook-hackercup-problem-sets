#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;

bool isSubsetSum(vector<vector<int> > A, int N, vector<int> G) {
	long long gSum = accumulate(G.begin(), G.end(), 0);
	if (gSum == 0) {
		return true;
	}
	if (N == 0 && gSum != 0) {
		return false;
	}
	bool flag = false;
	for (int i = 0; i < 3; ++i) {
		if (A[N - 1][i] > G[i]) {
			flag = true;
			break;
		}
	}
	if (flag) {
		return isSubsetSum(A, N - 1, G);
	}
	vector<int> temp(3, 0);
	for (int i = 0; i < 3; ++i) {
		temp[i] = G[i] - A[N - 1][i];
	}
	return isSubsetSum(A, N - 1, G) || isSubsetSum(A, N - 1, temp);
}

int main() {
	int T;
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		vector<int> G(3);
		cin >> G[0] >> G[1] >> G[2];
		int N;
		cin >> N;
		vector<vector<int> > A(N, vector<int> (3));
		for (int i = 0; i < N; ++i) {
			cin >> A[i][0] >> A[i][1] >> A[i][2];
		}
		cout << "Case #" << t << ": " << (isSubsetSum(A, N, G) ? "yes" : "no") << "\n";
	}
	return 0;
}
#include <iostream>
#include <string>
#include <vector>
#include <map>

using namespace std;

struct GG{
	short p,c,f;
	long long k(short n) const {
		return ((long long) n << 48) | ((long long)p << 32) |  ((long long)c << 16) |  ((long long)f);
	}
};

map<long long, bool> memo;
int scount;

bool solv(int n, const GG &r, const vector<GG> &gs) {
	if (memo.count(r.k(n))) return memo[r.k(n)];
	if (n < 0) {
		return r.p == 0 && r.c == 0 && r.f == 0;
	}
	if (r.p < 0 || r.c < 0 || r.f < 0) {
		return false;
	}
	scount ++;
	// cout << n << " : " <<  r.p << "," << r.c << "," << r.f << endl;

	if (solv(n-1, r, gs)){
		memo[r.k(n)] = true;
		return true;
	}
	GG r2 = r;
	r2.p -= gs[n].p;
	r2.c -= gs[n].c;
	r2.f -= gs[n].f;
	if (solv(n-1, r2, gs)) {
		memo[r.k(n)] = true;
		return true;
	}
	memo[r.k(n)] = false;
	return false;
}

int main() {
	int T;
	cin >> T;
	for (int t = 0; t < T; t++) {
		int GP, GC, GF;
		GG gg;
		cin >> gg.p >> gg.c >> gg.f;
		int N;
		cin >> N;
		vector<GG> gs;
		for (int n = 0; n < N; n++) {
			GG g;
			cin >> g.p >> g.c >> g.f;
			gs.push_back(g);
		}
		memo.clear();
		scount = 0;
		bool r = solv(N-1, gg, gs);
		// cerr << scount << endl;
		cout << "Case #" << (t+1) << ": " << (r?"yes":"no") << endl;
	}
	return 0;
}

#include <algorithm>
#include <iostream>
#include <bitset>
#include <sstream>
#include <fstream>
#include <map>
#include <string>
#include <set>
#include <queue>
#include <vector>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
using namespace std;


typedef long long int64;
typedef unsigned long long uint64;
typedef unsigned int uint;
#define sz(X) ((int)(X).size())
#define foreach(i,c) for(__typeof((c).begin()) i=((c).begin());i!=(c).end();++i)
#define EXISTS(x, s) ( (s).find((x)) != (s).end() )
template<class T> vector<T> tokenize_to(const string &str) { vector<T> r; T x; istringstream is(str); while (is >> x) r.push_back(x); return r; }
template<typename T> string v_2_s(vector<T> &a) { stringstream sb; __typeof(a.begin()) i = a.begin(); if (i!=a.end()) { sb << *i; ++i; } for (; i!=a.end();++i) { sb << " " << *i; } return sb.str(); }

struct triplet {
  int a, b, c;
  friend bool operator< (const triplet &x, const triplet &y) {
    if (x.a != y.a) return x.a < y.a;
    if (x.b != y.b) return x.b < y.b;
    return x.c < y.c;
  }
  friend bool operator== (const triplet &x, const triplet &y) {
    return (x.a == y.a && x.b == y.b && x.c == y.c);
  }
  friend triplet operator+ (const triplet &x, const triplet &y) {
    return triplet(x.a + y.a, x.b + y.b, x.c + y.c);
  }
  const bool minor(const triplet &y) const {
    return (a <= y.a && b <= y.b && c <= y.c);
  }
  triplet() {}
  triplet(int _a, int _b, int _c) : a(_a), b(_b), c(_c) {}
};

void solve() {
  int N;
  triplet G;
  cin >> G.a >> G.b >> G.c;
  cin >> N;
  vector<triplet> V(N);
  for (int i = 0; i < N; ++i){
    cin >> V[i].a >> V[i].b >> V[i].c;
  }
  set<triplet> S, S2;
  for (int i = 0; i < N; ++i){
    S2.clear();
    foreach(X, S) {
      S2.insert(*X + V[i]);
    }
    foreach(X, S2) {
      if (X->minor(G)) S.insert(*X);
    }
    S.insert(V[i]);
  }

  bool ret = S.find(G) != S.end();
  cout << (ret?"yes\n":"no\n");


}

void init() {

}

int main (int argc, char *argv[]) {
  cin.sync_with_stdio(0);
  clock_t c_init = clock();
  init();
  cerr << "Init Elapsed: " << double(clock()-c_init) / CLOCKS_PER_SEC << " seconds\n";
  clock_t c_solve = clock();
  int t = 1;
  cin >> t;
  for(int c = 1; c <= t; ++c) {
    cout << "Case #" << c << ": ";
    solve();
  }
  cerr << "Solve Elapsed: " << double(clock()-c_solve) / CLOCKS_PER_SEC << " seconds\n";
  cerr << "Total Elapsed: " << double(clock()-c_init) / CLOCKS_PER_SEC << " seconds\n";
  return 0;
}

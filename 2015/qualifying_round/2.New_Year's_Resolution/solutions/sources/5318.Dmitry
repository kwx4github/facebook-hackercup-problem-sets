#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
#include <set>
#include <string>
#include <fstream>

using namespace std;

bool solve()
{
	int xx, yy, zz;
	cin >> xx >> yy >> zz;

	int n; cin >> n;
	vector<int> x(n), y(n), z(n);
	for (int i = 0; i < n; ++i)
		cin >> x[i] >> y[i] >> z[i];

	for (int i = 0; i < (1 << n); ++i)
	{
		int xc = 0, yc = 0, zc = 0;
		for (int j = 0; j < n; ++j)
			if ((i & (1 << j)) > 0)
				xc += x[j], yc += y[j], zc += z[j];

		if (xc == xx && yc == yy && zc == zz)
			return true;
	}
	return false;
}

int main()
{
	freopen("new_years_resolution.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int t; cin >> t;
	for (int i = 0; i < t; ++i)
		cout << "Case #" << i + 1 << ": " << (solve() ? "yes" : "no") << endl;
	/*

	ifstream input;
	ofstream output("output.txt");
	string filename;
	cin >> filename;
	input.open(filename);
	string line;
	int case_num = 0;
	int t;
	State state = State::read_params;
	int p, c, f;
	int food_count;
	int ctc = 0;
	vector<int> pn, cn, fn;
	if (input.is_open()) {
		while (!input.eof()) {
			input >> line;
			if (case_num == 0)
			{
				t = stoi(line);
				case_num++;
			}
			else
			{				
				switch (state)
				{
				case read_params:
					input >> p >> c >> f;
					state = read_tests_count;
					break;
				case read_tests_count:
					input >> food_count;
					state = read_test_case;
					pn.resize(food_count);
					cn.resize(food_count);
					fn.resize(food_count);
					break;
				case read_test_case:
					input >> pn[ctc] >> cn[ctc] >> fn[ctc];
					ctc++;
					bool yes = false;
					if (ctc == food_count - 1)
					{
						int pall = 0, call = 0, fall = 0;
						for (int mask = 0; mask < (1 << food_count); mask++)
						{
							for (int i = 0; i < food_count; i++)
							{
								if (mask & (1 << i) > 0)
								{
									pall += pn[i];
									call += cn[i];
									fall += fn[i];
								}
							}
							if (pall == p && call == c && fall == f)
							{
								output << "Case #" << case_num << ": " << "yes" << endl;
								yes = true;
								break;
							}
						}
						if (!yes)
							output << "Case #" << case_num << ": " << "no" << endl;
						state = read_params;
						case_num++;
						pn.resize(0);
						cn.resize(0);
						fn.resize(0);
					}						
					break;
				}
			}
		}
	}
	input.close();*/
	return 0;
}




#include <algorithm>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
using namespace std;

typedef vector<int> VI;
#define FOR(i, f, t) for (int i = (f); i < (t); i++)
#define REP(i, n) FOR(i,0,(n))
#define SZ(v) ((int)(v).size())
#define ALL(v) (v).begin(), (v).end()
#define X first
#define Y second
#define pb push_back

// BEGIN CUT HERE
template<class T, class V>
ostream& operator<<(ostream &out, const pair<T, V> &p) {
    out << '(' << p.X << ',' << p.Y << ')';
    return out;
}

template<class T>
ostream& operator<<(ostream &out, const vector<T> &v) {
    REP(i,SZ(v)) {
        out << v[i] << ' ';
    }
    return out;
}
string getName(const char *&argument) {
    const char *from = argument;
    int d = 0;
    while ((*argument != 0) && !(*argument == ',' && d == 0)) {
        if (*argument == '(' || *argument == '[' || *argument == '<') {
            d++;
        }
        if (*argument == ')' || *argument == ']' || *argument == '>') {
            d--;
        }
        argument++;
    }
    string res(from, argument-from);
    argument++;
    return res;
}
void print(const char *arguments)
{
    cout << endl;
}
template<typename T, typename... Args>
T print(const char *arguments, T t, Args... args)
{
    string name = getName(arguments);
    cout << name << '=' << t << ' ';
    print(arguments, args...);
    return t;
}
#define SP(...) print(#__VA_ARGS__,__VA_ARGS__)
// END CUT HERE

int main(int argc, char *argv[]) {
    ifstream in("/Users/roman/Documents/topcoder/facebook/b.in");
    ofstream out("/Users/roman/Documents/topcoder/facebook/b.out");
    int t;
    in >> t;
    REP(caseId,t) {
        int xt, yt, zt;
        in >> xt >> yt >> zt;
        int n;
        in >> n;
        VI x(n), y(n), z(n);
        REP(i, n) {
            in >> x[i] >> y[i] >> z[i];
        }
        
        bool good = false;
        REP(i,1<<n) {
            int xc = 0;
            int yc = 0;
            int zc = 0;
            REP(j,n) {
                if (i & (1<<j)) {
                    xc += x[j];
                    yc += y[j];
                    zc += z[j];
                }

            }
            if (xc == xt && yc == yt && zc == zt) {
                good = true;
            }
        }
        out << "Case #" << caseId+1 << ": " << (good ? "yes" : "no") << endl;
    }
    out.close();
}
// END CUT HERE

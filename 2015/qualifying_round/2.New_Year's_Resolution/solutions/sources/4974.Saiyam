#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

typedef struct
{
    int p;
    int c;
    int f;
}nutrition;


nutrition food[20];
//int each_total[20];

nutrition alex;
FILE *fp, *fo;
int out,T,N,sum;

int checkBoundry(int val,int min, int max)
{
    if(val < min || val > max)
        return 1;
    else
        return 0;
}

int main(int args, char **argv)
{
    int i=0,j,tmp,count=0,total=0,index,p,c,f;

    if(2 != args)
    {
        exit(-1);
    }

    fp = fopen(argv[1],"r");
    if(!fp)
    {
        exit(-1);
    }

    fo = fopen("new_years_resolution_output.txt","w");
    if(!fo)
    {
        exit(-1);
    }

    fscanf(fp,"%d",&T);
    if(checkBoundry(T,1,20)) exit(-1);

    while(!feof(fp))
    {
        out = 0;
        total = 0;
        count++;
        memset(&food,0,sizeof(food));
        memset(&alex,0,sizeof(nutrition));
        //memset(&each_total,0,sizeof(each_total));

        fscanf(fp,"%d %d %d",&alex.p,&alex.c,&alex.f);
        if(checkBoundry(alex.p,10,1000)) goto label;
        if(checkBoundry(alex.c,10,1000)) goto label;
        if(checkBoundry(alex.f,10,1000)) goto label;

        fscanf(fp,"%d",&N);
        if(checkBoundry(N,1,20)) goto label;


        i = 0;
        tmp = N;

        while(tmp)
        {
            fscanf(fp,"%d %d %d",&food[i].p,&food[i].c,&food[i].f);
            //each_total[i] = food[i].p + food[i].c + food[i].f;
            //total += each_total[i];
            ++i;
            --tmp;
        }

        if(N == 1)
        {
            if( (alex.p == food[0].p) &&
                (alex.f == food[0].f) &&
                (alex.c == food[0].c) )
            {
                out = 1;
            }
        }
        else
        {
            for (i=	1; i < (( pow(2.0,N) - 1)); i++) /*Iterate through all possible values in array */
            {
                sum = 0;
                j = i; 
                index = N-1; 
                while( j!=0 )
                {
                    if(j & 0x1) /* check set bit */
                    {
                        sum = sum + food[index].p; /* add them all */
                    }
                    j = j >> 1; 
                    index--;
                    if(sum > alex.p) /* sum is large, break here */
                        break;
                }

                if(sum == alex.p) /* match */
                {
                    p=f=c=0;
                    //printf("For %d\n",alex.p);
                    j = i;
                    index = N-1; 
                    //printf("Array Indexes are\n");
                    while(j!=0)
                    {
                        if(j & 0x1) /* check set bit and find index */
                        {
                            //printf("%d ",index);
                            p += food[index].p;
                            f += food[index].f;
                            c += food[index].c;
                            //printf("p:%d,f:%d,c:%d\n",p,f,c);
                        }
                        j = j >> 1;
                        index--;
                    }

                    if( (alex.p == p) && (alex.c == c) && (alex.f == f) )
                    {
                        //printf("p:%d:%d \t,f:%d:%d\t,c:%d:%d\n",p,alex.p,f,alex.f,c,alex.c);
                        out = 1;
                        break;
                    }

                    //printf("\n");
                }
            }
        }

label:
        fprintf(fo,"case %d#: %s\n",count,out ? "yes" : "no");

        if(count == T) break;
    }

    fclose(fp);
    fclose(fo);
}

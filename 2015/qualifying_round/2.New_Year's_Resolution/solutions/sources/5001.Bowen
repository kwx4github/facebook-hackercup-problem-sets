import os
import sys
import math
from collections import defaultdict


sys.setrecursionlimit(10**9)

problem_id = os.path.splitext(os.path.basename(__file__))[0]

input_path = '%s.in' % problem_id
output_path = '%s.out' % problem_id

input_file = open(input_path, "r")
output_file = open(output_path, "w+")


def read_line():
    line = ''
    while len(line) == 0:
        line = input_file.readline().strip()
    return line


def write_line(line):
    print line
    return output_file.write(line + os.linesep)


##################################################################################################################
# solution begin
##################################################################################################################

def solve():
    gP, gC, gF = map(int, read_line().split(' '))
    n = int(read_line())
    foods = [map(int, read_line().split(' ')) for i in xrange(n)]
    feasible = set([(0, 0, 0)])
    for fP, fC, fF in foods:
        add_feasible = []
        for pP, pC, pF in feasible:
            add_feasible.append((pP + fP, pC + fC, pF + fF))
        feasible |= set(add_feasible)
    if (gP, gC, gF) in feasible:
        return 'yes'
    else:
        return 'no'

##################################################################################################################
# solution end
##################################################################################################################

if __name__ == "__main__":
    T = int(read_line())
    for case_id in xrange(1, T + 1):
        write_line("Case #%d: %s" % (case_id, solve()))
    input_file.close()
    output_file.close()

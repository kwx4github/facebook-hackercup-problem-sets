//TC

#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>

#define forn(a,b,c) for(int (a)=(b);(a)<=(c);(a)++)
#define forr(a,b,c) for(int (a)=(b);(a)>=(c);(a)--)
#define foreach(a,b) for( typeof( (b).begin() ) a=(b).begin(); (a)!=(b).end() ; (a)++ )
#define foreachr(a,b) for( typeof( (b).rbegin() ) a=(b).rbegin(); (a)!=(b).rend() ; (a)++ )
#define dg(x)  cerr <<#x<<':'<<x<<" "
#define dbg(x)  cerr <<#x<<':'<<x<<endl
#define SET(A,b) memset(A,b,sizeof (A) )
#define SIZE(A) ((int)(A).size())
#define ALL(A) (A).begin(),(A).end()
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define num(a) (1LL<<(a))
using namespace std;

typedef double dbl;
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;

const Lint mod = 1e9+7;

const int MAXN = 10010;

const int inf = 1e9;

struct node{
	int P,C,F;
};

node ar[MAXN];

int n;

bool check(int j,int P,int C,int F){
	
	forn(i,0,n-1)
		if(num(i)&j)
			P-=ar[i].P,
			C-=ar[i].C,
			F-=ar[i].F;
	
	return !P && !F && !C;
	
}

int main(){
	
	int Task,P,C,F;
	
	scanf(" %d",&Task);
	
	forn(task,1,Task){
		
		scanf("%d %d %d",&P,&C,&F);
		
		scanf(" %d",&n);
		
		forn(j,0,n-1)
			scanf("%d %d %d",&ar[j].P,&ar[j].C,&ar[j].F);
		
		string res="no";
		
		forn(j,0,num(n)-1)
			if(check(j,P,C,F))
				res="yes";
		cout << "Case #" << task <<": " << res << endl;
		
	}
	
	return 0;
		
}

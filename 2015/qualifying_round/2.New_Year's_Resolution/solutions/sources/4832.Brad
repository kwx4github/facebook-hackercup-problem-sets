package com.brad;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;

/**
 * Created by Brad on 1/8/2015.
 */
public class NewYearsResolution {

    final String inputFile = "new_years_resolution_input.txt";
    final String outputFile = "new_years_resolution_output.txt";
    int numberTests;

    public NewYearsResolution () {
        try {
            Scanner inputScanner = new Scanner(new File(inputFile));
            PrintWriter writer = null;
            try {
                writer = new PrintWriter(outputFile, "UTF-8");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            numberTests = inputScanner.nextInt();
            int count = 1;
            while (inputScanner.hasNextInt()) {
                int currP, currC, currF;
                int numFoods;
                currP = inputScanner.nextInt();
                currC = inputScanner.nextInt();
                currF = inputScanner.nextInt();
                numFoods = inputScanner.nextInt();
                int[][] foods = new int[numFoods][3];
                for (int i = 0; i < numFoods; i++) {
                    foods[i][0] = inputScanner.nextInt();
                    foods[i][1] = inputScanner.nextInt();
                    foods[i][2] = inputScanner.nextInt();
                }
                Diet diet = new Diet(currP, currC, currF, foods);
                String result = "";
                if (diet.isPossible())
                    result = "yes";
                else
                    result = "no";

                writer.println("Case #" + count + ": " + result);
                count++;
            }
            inputScanner.close();
            writer.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }


    private class Diet {
        int totalProtein, totalCarbs, totalFat;
        int[][] foods;
        public Diet(int totalProtein, int totalCarbs, int totalFat, int[][] foods) {
            this.totalProtein = totalProtein;
            this.totalCarbs = totalCarbs;
            this.totalFat = totalFat;
            this.foods = foods;
        }

        public boolean isPossible() {

            //based on size, loop through all possible combinations
            //if a combination is found that matches total protein, etc, return true
            int[] comb = new int[foods.length];
            for(int i = 0; i < comb.length; ++i) {
                comb[i] = 0;
            }

            boolean done = false;
            while(!done) {
                int currProtein, currCarbs, currFat;
                currProtein = currCarbs = currFat = 0;
                for (int i = 0; i < comb.length; ++i) {
                    if(comb[i] == 1) {
                        currProtein += foods[i][0];
                        currCarbs += foods[i][1];
                        currFat += foods[i][2];
                    }
                }
                if(currProtein == totalProtein && currCarbs == totalCarbs && currFat == totalFat) {
                    return true;
                }

                //increment by one
                int carry = 1;
                for (int i = comb.length - 1; i >=0; i--) {
                    //nothing left to add
                    if(carry == 0) {
                        break;
                    }

                    comb[i] += carry;
                    carry = 0;
                    if(comb[i] == 2) {
                        comb[i] = 0;
                        carry = 1;
                    }
                }
                for (int i = 0; i < comb.length; i++) {
                    if(comb[i] == 1) {
                        break;
                    }
                    if(i == comb.length-1 && comb[i] == 0) {
                        done = true;
                        break;
                    }
                }
            }

            return false;
        }
    }
}

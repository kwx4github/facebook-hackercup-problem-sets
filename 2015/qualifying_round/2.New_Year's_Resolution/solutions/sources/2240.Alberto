#include <cstdio>
#include <vector>

using namespace std;

typedef struct S{
    int p, c, f;
}food;

food operator +(food &a, food &b){
    food fo;
    fo.p = a.p + b.p;
    fo.c = a.c + b.c;
    fo.f = a.f + b.f;
    return fo;
}

bool operator ==(food &a, food &b){
    return ( (a.p == b.p) && (a.c == b.c) && (a.f == b.f)); 
}

food createFood(int p, int c, int f){
    food fo;
    fo.p = p;
    fo.c = c;
    fo.f = f;
    return fo;
}

vector<food> foods;
food expected;
int N;

bool evaluate(int index, food acum){
    if(acum == expected) return true;
    if(index >= N) return false;
    food acum2 = acum + foods[index];
    return (evaluate(index + 1, acum) || evaluate(index + 1, acum2));
}

int main(){
    int T;
    int p, c, f;
    
    scanf("%d", &T);
    for(int i = 1; i <= T; i++){
        foods.clear();
        scanf("%d%d%d", &p, &c, &f);
        expected = createFood(p, c, f);
        scanf("%d", &N);
        for(int j = 0; j < N; j++){
            scanf("%d%d%d", &p, &c, &f);
            foods.push_back(createFood(p, c, f));
        }
        bool b = evaluate(0, createFood(0, 0, 0)); 
        if(b){
            printf("Case #%d: yes\n", i);
        } else {
            printf("Case #%d: no\n", i);
        }
    }
    
    return 0;
}



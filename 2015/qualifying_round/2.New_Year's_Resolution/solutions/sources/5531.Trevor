#!/usr/bin/env ruby

class Food
  attr_accessor :protein, :carbohydrates, :fat

  def initialize(protein, carbohydrates, fat)
    @protein = protein
    @carbohydrates = carbohydrates
    @fat = fat
  end

  def self.sum_nutrients(foods)
    totals = {
      protein: 0,
      carbohydrates: 0,
      fat: 0
    }

    foods.each do |food|
      totals[:protein] += food.protein
      totals[:carbohydrates] += food.carbohydrates
      totals[:fat] += food.fat
    end

    totals
  end
end

class Array
  def power_set
    inject([[]]) do |cur, item|
      cur + cur.map do |e|
        e + [item]
      end
    end
  end
end

def get_target(line)
  protein, carbohydrates, fat = line.split(/ /).map(&:to_i)
  {
    protein: protein,
    carbohydrates: carbohydrates,
    fat: fat
  }
end

def get_possible_sums(foods)
  mat = foods.map { |food_line| food_line.split(/ /).map(&:to_i) }
  food_objs = mat.map do |mn|
    p, c, f = mn
    Food::new p, c, f
  end

  possible_sums = food_objs.power_set.map do |ps|
    Food::sum_nutrients ps
  end

  possible_sums
end

def nutrients_match?(food_sums, target)
  matches = food_sums.select do |sum|
    sum == target
  end

  not matches.empty?
end

lines = ARGF.read.split(/\n/).select { |line| line[0] != '#' }
n_cases = lines.shift
c = 1
until lines.empty?
  mn_line = lines.shift
  target = get_target mn_line

  n_foods = lines.shift.to_i
  foods = lines.shift n_foods
  possible_nutrient_sums = get_possible_sums foods
  match = nutrients_match? possible_nutrient_sums, target

  result = match ? 'yes' : 'no'

  puts "Case \##{c}: #{result}"
  c += 1
end

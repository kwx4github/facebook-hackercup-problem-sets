import Control.Monad

sumItem :: [(Int, Int, Int)] -> (Int, Int, Int)
sumItem = foldl sum3 (0, 0, 0)
    where sum3 = \(x, y, z) (x', y', z') -> (x + x', y + y', z + z')

solve :: (Int, Int, Int) -> [(Int, Int, Int)] -> Bool
solve target item = let pset = filterM (\x -> [True, False]) item
                        value = map sumItem pset
                    in elem target value

readItem :: String -> (Int, Int, Int)
readItem s = let [x, y, z] = map read . words $ s in (x, y, z)

batch :: Int -> [String] -> [String]
batch _ [] = []
batch tid (s : s' : xs) = let [x, y, z] = map read . words $ s
                              n = read s'
                              buff = take n xs
                              next = drop n xs
                              target = (x, y, z)
                              item = map readItem buff
                              format = "Case #" ++ show tid ++ ": " ++ case solve target item of False -> "no"
                                                                                                 True -> "yes"
                          in format : batch (tid + 1) next
main = do
    getContents >>= mapM putStrLn . batch 1 . tail . lines


#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<numeric>
#include<utility>
#include<functional>
#include<stdio.h>
#include<assert.h>
#include<memory.h>
#include<bitset>
using namespace std;

#define all(v)				((v).begin()), ((v).end())
#define sz(v)				((int)((v).size()))
#define clr(v, d)			memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lp(i, n)		for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;

const double EPS = (1e-7);
int dcmp(double x, double y) {	return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1;	}

#define pb					push_back
#define MP					make_pair
#define P(x)				cout<<#x<<" = { "<<x<<" }\n"
typedef long double   	  ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;

const int MAX = 100;
bool valid(int i, int j) { 	return 1;	}
char maze[MAX][MAX];
bool vis[MAX][MAX];


vector<int>b(1000);
vector<int>c(1000);
vector<int>f(1000);

 bool  knapsack(int i, int n ,int b1 ,int c1 ,int f1 , bool lol )	
{

	if(b1==0 && c1==0 && f1==0)
	{
		lol=1;
		return lol;
	}
	if(i == n)
		return lol;
	

	  lol= knapsack(i+1,n, b1 , c1 ,f1 ,lol);
	if(b1>=b[i] && c1 >= c[i] && f1>= f[i])
		lol=knapsack(i+1, n ,b1 - b[i] , c1 - c[i] ,f1 - f[i] ,lol ) ;

	return lol;
}


int main()
{
	//freopen("cooking_the_books_example_input.txt" , "r",stdin);
	//freopen("cooking_the_books_example_output.txt" , "w",stdout);
	int t ,b1,c1,f1 ,n ; cin>>t;
	lp(i , t)
	{
		cin>>b1>>c1>>f1;
		cin>>n;
		lp(i,n)
			cin>>b[i]>>c[i]>>f[i];
		bool res =knapsack(0 , n , b1 ,c1 ,f1 , false);
		if(res)
			cout<<"Case #"<<i+1<<": yes"<<endl;
		else
			cout<<"Case #"<<i+1<<": no"<<endl;

	}
}
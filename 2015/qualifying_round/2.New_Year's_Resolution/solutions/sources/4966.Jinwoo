using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NYR
{
    class Program
    {
        static void Main(string[] args)
        {
            int T = int.Parse(Console.ReadLine());
            for (int t = 0; t < T; t++)
            {
                var need = Console.ReadLine().Split().Select(e => int.Parse(e)).ToArray();
                int N = int.Parse(Console.ReadLine());
                List<food> foods = new List<food>();
                
                    for (int n = 0; n < N; n++)
                    {
                        var temfood = Console.ReadLine().Split().Select(e => int.Parse(e)).ToArray();
                        foods.Add(new food(temfood[0], temfood[1], temfood[2]));
                    }
                    bool tf = iSS(foods, N, need);
                    if (tf == true)
                        Console.WriteLine("Case #{0}: yes", t + 1);
                    else
                        Console.WriteLine("Case #{0}: no", t + 1);

            }
        }

        static bool iSS(List<food> k, int n, int[] need){
            if (need[0] == 0 && need[1] == 0 && need[2] == 0)
                return true;
            if (n == 0 && (need[0] != 0 || need[1] != 0 || need[2] != 0))
                return false;

            if ((k[n - 1].P > need[0]) && (k[n - 1].C > need[1]) && (k[n - 1].F > need[2]))
                return iSS(k, n - 1, need);

            return iSS(k,n-1,need)||iSS(k,n-1,new int[]{need[0]-k[n-1].P,need[1]-k[n-1].C,need[2]-k[n-1].F});
        }
    }
    public class food{
        public int P, C, F;
        public food(int p,int c,int f){
            this.P=p;
            this.C=c;
            this.F=f;
        }
    }
}

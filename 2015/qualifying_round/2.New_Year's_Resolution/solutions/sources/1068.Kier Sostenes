#include <iostream>
#include <vector>
#include <iomanip>
#include <map>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <set>
#include <queue>
#include <stack>
#include <cstdio>
#include <fstream>
#include <cstring>

#define F(i,a,b) for(int i = a; i < b; i++)
#define pb push_back
#define mp make_pair
#define all(a) a.begin(), a.end()


using namespace std;

typedef vector<int> vi;
typedef vector<vi> vii;
typedef pair<int,int> pii;
typedef vector<pii> vpii;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef long long ll;

#define gc getchar_unlocked
void scanint(ll &x)
{
    register ll c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

struct STR
{
	int G,C,F;
	
	STR(int a,int b,int c)
	{
		G = a;
		C = b;
		F = c;
	}
};
int G,C,F,N;

void backtrack(STR ans,int ind,vector <STR> &V,bool &isFound)
{
	if(ans.G == G && ans.C == C && ans.F == F)
	{
		isFound = true;
		return;
	}
	if(ans.G > G || ans.C  > C || ans.F > F)
		return;
	for(int i = ind; i < V.size(); i++)
	{
		STR temp = ans;
		temp.G += V[i].G;
		temp.C += V[i].C;
		temp.F += V[i].F;
		backtrack(temp,ind+1,V,isFound);
		if(isFound)
			return;
	}
}

int main()
{
	std::ios_base::sync_with_stdio(false);
	int T;
	cin >> T;
	int a,b,c;
	F(i,0,T)
	{
		cout << "Case #" << i + 1 << ": ";
		cin >> G >> C >> F;
		cin >> N;
		
		vector  <STR> V;
		for(int k = 0; k < N; k++)
		{
			cin >> a >> b >> c;
			V.pb(STR(a,b,c));
		}
		STR ans(0,0,0);
		bool isFound = false;
		backtrack(ans,0,V,isFound);
		if(isFound)
			cout << "yes" << endl;
		else
			cout << "no" << endl;
	}
	
	return 0;
}

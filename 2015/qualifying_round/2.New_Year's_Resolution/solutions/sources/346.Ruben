package FBHackerCup;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class NewYearResolution {
static int n;
static int[] Gp = new int[20];
static int[] Gc = new int[20];
static int[] Gf = new int[20];
static HashMap<Values, Boolean> din = new HashMap<Values, Boolean>();

public static void main(String[] args) throws IOException {
    
    final Scanner sc = new Scanner(new File("/usr/local/google/home/rglez/Desktop/input.txt"));
    
    final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
              new FileOutputStream("/usr/local/google/home/rglez/Desktop/output.txt")));
    
    final int t = sc.nextInt();
    int P, C, F;
    
    for (int c = 1; c <= t; c++) {
      P = sc.nextInt();
      C = sc.nextInt();
      F = sc.nextInt();
      
      // Read input
      n = sc.nextInt();
      for (int i = 0; i < n; i++) {
        Gp[i] = sc.nextInt();
        Gc[i] = sc.nextInt();
        Gf[i] = sc.nextInt();
      }
    

      // Clear
      din.clear();
      
      // Solve problem
      final boolean sol = solve(0, P, C, F);
      
      writer.write("Case #" + c + ": " + (sol ? "yes" : "no"));
      writer.newLine();
    }
    
    sc.close();
    writer.close();
  }

  public static boolean solve(int index, int p, int c, int f) {
    if (index == n) {
      return p == 0 && c == 0 && f == 0;
    }
    
    final Values v = new Values(index, p, c, f);
    if (din.containsKey(v)) {
      return din.get(v);
    }
    
    boolean result = solve(index + 1, p, c, f);
    if (!result && Gp[index] <= p && Gc[index] <= c && Gf[index] <= f) {
      result = solve(index + 1, p - Gp[index], c - Gc[index], f - Gf[index]);
    }
    
    din.put(v, result);
    return result;
  }
  
  public static class Values {
    int mI, mP, mC, mF;
    public Values(int i, int p, int c, int f) {
      mI = i;
      mP = p;
      mC = c;
      mF = f;
    }
    
    @Override
    public int hashCode() {
      return mI*mP*mC*mF;
    }
    
    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Values)) {
        return false;
      }
      
      final Values other = (Values) obj;
      return other.mI == mI && other.mP == mP && other.mC == mC 
          && other.mF == mF;
    }
  }
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.StringTokenizer;

/**
 *
 * @author bassem
 */
public class Q2 {

    public static int FLAG[];
    public static int FOOD[][];

    public static void main(String[] args) throws IOException {
        int cases = 1;
        BufferedReader input = new BufferedReader(new FileReader("Q2.in"));
        try (FileWriter file = new FileWriter("Q2.out")) {
            int testcases = Integer.parseInt(input.readLine());
            while (testcases-- > 0) {
                StringTokenizer line = new StringTokenizer(input.readLine());
                int flag[] = {Integer.parseInt(line.nextToken()),
                    Integer.parseInt(line.nextToken()), Integer.parseInt(line.nextToken())};
                FLAG = Arrays.copyOf(flag, 3);
                int N = Integer.parseInt(input.readLine());
                FOOD = new int[N][3];
                for (int i = 0; i < N; i++) {
                    line = new StringTokenizer(input.readLine());
                    FOOD[i][0] = Integer.parseInt(line.nextToken());
                    FOOD[i][1] = Integer.parseInt(line.nextToken());
                    FOOD[i][2] = Integer.parseInt(line.nextToken());
                }
                if (find(new boolean[N], new int[3], 0)) {
                    file.append("Case #" + (cases++) + ": " + "yes" + "\n");
                } else {
                    file.append("Case #" + (cases++) + ": " + "no" + "\n");
                }
            }
        }
    }

    public static boolean find(boolean[] used, int[] sum, int start) {
        if (sum[0] == FLAG[0]) {
            return (sum[1] == FLAG[1] && sum[2] == FLAG[2]);
        } else if (sum[0] > FLAG[0]) {
            return false;
        }
        boolean done = false;
        for (int i = start; i < FOOD.length; i++) {
            if (!used[i]) {
                boolean temp_used[] = Arrays.copyOf(used, used.length);
                temp_used[i] = true;
                int temp_sum[] = Arrays.copyOf(sum, sum.length);
                temp_sum[0] += FOOD[i][0];
                temp_sum[1] += FOOD[i][1];
                temp_sum[2] += FOOD[i][2];
                done = done || find(temp_used, temp_sum, i + 1);
            }
            if (done) {
                break;
            }
        }
        return done;
    }
}

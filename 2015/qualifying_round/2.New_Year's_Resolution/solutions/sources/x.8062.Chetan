#include <stdio.h>
#include <stdlib.h>
#define max 20

int N,d;
//int x[max];
int food[max][3];
int w[max];

int isSubsetSum(int set[], int n, int sum)
{
    int i,j;
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    int subset[sum+1][n+1];
 
    // If sum is 0, then answer is true
    for ( i = 0; i <= n; i++)
      subset[0][i] = 1;
 
    // If sum is not 0 and set is empty, then answer is false
    for ( i = 1; i <= sum; i++)
      subset[i][0] = 0;
 
     // Fill the subset table in botton up manner
     for ( i = 1; i <= sum; i++)
     {
       for ( j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
     }
 
    /* // uncomment this code to print table
     for (int i = 0; i <= sum; i++)
     {
       for (int j = 0; j <= n; j++)
          printf ("%4d", subset[i][j]);
       printf("\n");
     } */
 
     return subset[sum][n];
}

/*
int isSubsetSum(int set[], int n, int sum)
{
   // Base Cases
   if (sum == 0)
     return 1;
   if (n == 0 && sum != 0)
     return 0;
 
   // If last element is greater than sum, then ignore it
   if (set[n-1] > sum)
     return isSubsetSum(set, n-1, sum);
 
   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sum-set[n-1]);
}
*/
int main(){
	int i,j,k,n,flag=0;
	int tc;
	int wants[3];

	scanf("%d",&tc);
	
	for(k=0;k<tc;k++){
		for(i = 0; i < 3; i++)
		scanf("%d",&wants[i]);
		
		scanf("%d",&N);
		
		for(i = 0; i < N; i++){
			for(j = 0; j < 3; j++){
				scanf("%d",&food[i][j]);
			}
		}
		
		for(j = 0; j < 3; j++){
			d = wants[j];
				for(i = 0; i < N; i++){
					w[i] = food[i][j];
				}
				
		n = sizeof(w)/sizeof(w[0]);
		
		if (isSubsetSum(w, n, d) == 1)
			flag++;
		}
			
		if(flag==3)
		printf("Case #%d: Yes\n",k+1);
		else
		printf("Case #%d: no\n",k+1);
		
		flag=0;
	}
	return 0;
}

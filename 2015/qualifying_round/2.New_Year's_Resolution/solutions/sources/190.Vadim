import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.math.BigInteger;
import java.io.PrintStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Vadim Semenov
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "new.*year.*s.*resolution.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("newyear'sresolution.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NewYearsResolution solver = new NewYearsResolution();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class NewYearsResolution {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + testNumber + ": ");
        int P = in.nextInt();
        int C = in.nextInt();
        int F = in.nextInt();
        int counter = in.nextInt();
        int[] p = new int[counter];
        int[] c = new int[counter];
        int[] f = new int[counter];
        for (int i = 0; i < counter; ++i) {
            p[i] = in.nextInt();
            c[i] = in.nextInt();
            f[i] = in.nextInt();
        }
        int[] pp = new int[1 << counter];
        int[] cc = new int[1 << counter];
        int[] ff = new int[1 << counter];
        for (int mask = 1; mask < (1 << counter); ++mask) {
            int bit = Integer.bitCount(Integer.highestOneBit(mask) - 1);
            assert bit < counter : mask + " " + bit;
            pp[mask] = p[bit] + pp[mask ^ (1 << bit)];
            cc[mask] = c[bit] + cc[mask ^ (1 << bit)];
            ff[mask] = f[bit] + ff[mask ^ (1 << bit)];
        }
        for (int mask = 0; mask < (1 << counter); ++mask) {
            if (pp[mask] == P && cc[mask] == C && ff[mask] == F) {
                out.println("yes");
                System.err.println("yes");
                return;
            }
        }
        out.println("no");
        System.err.println("no");
    }
}

class InputReader {
    private final BufferedReader reader;
    private StringTokenizer tokenizer;

    public InputReader(InputStream in) {
        reader = new BufferedReader(new InputStreamReader(in));
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(readLine());
        }
        return tokenizer.nextToken();
    }

    public String readLine() {
        String line = null;
        try {
            line = reader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return line;
    }
}


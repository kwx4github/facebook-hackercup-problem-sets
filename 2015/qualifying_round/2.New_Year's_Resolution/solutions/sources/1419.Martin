#include <iostream>
#include <map>
using namespace std;

int P[20], C[20], F[20];
int T, Gp, Gc, Gf, N;
map<unsigned int, map<int, bool> > Mf;

bool isPossible(unsigned int flag, int i, int p, int c, int f) {
  if (p == Gp && c == Gc && f == Gf) return true;
  if (i >= N) return false;
  if (Mf[flag][i]) {
    return false;
  } else {
    Mf[flag][i] = true;
  }
  return (isPossible(flag, i + 1, p, c, f) || isPossible(flag | (1U << i), i + 1, p + P[i], c + C[i], f + F[i]));
}

int main() {
  cin >> T;
  for (int t = 1; t <= T; t++) {
    Mf.clear();
    cin >> Gp >> Gc >> Gf >> N;
    for (int n = 0; n < N; n++) {
      cin >> P[n] >> C[n] >> F[n];
    }
    cout << "Case #" << t << ": " << (isPossible(0U, 0, 0, 0, 0) ? "yes" : "no") << "\n";
  }
  cout << flush;
  return 0;
}
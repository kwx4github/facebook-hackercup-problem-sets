import java.io.*;
import java.util.Arrays;
import java.util.Locale;
import java.util.StringTokenizer;

public class B {
    FastScanner in;
    PrintWriter out;

    public class Dish {
        int gp, gc, gf;

        public Dish(int gp, int gc, int gf) {
            this.gp = gp;
            this.gc = gc;
            this.gf = gf;
        }

        public void add(Dish x) {
            gp += x.gp;
            gc += x.gc;
            gf += x.gf;
        }

        public boolean equals(Dish x) {
            return gp == x.gp && gc == x.gc && gf == x.gf;
        }
    }

    public void solve() throws IOException {
        int t = in.nextInt();
        for (int h = 0; h < t; h++) {
            out.print("Case #" + (h + 1) + ": ");
            Dish ideal = new Dish(in.nextInt(), in.nextInt(), in.nextInt());
            int n = in.nextInt();
            Dish[] a = new Dish[n];
            Arrays.setAll(a, i -> new Dish(in.nextInt(), in.nextInt(), in.nextInt()));
            boolean ok = false;
            for (int mask = 0; mask < (1 << n); mask++) {
                Dish sum = new Dish(0, 0, 0);
                for (int i = 0; i < n; i++) {
                    if ((mask & (1 << i)) != 0) {
                        sum.add(a[i]);
                    }
                }
                if (ideal.equals(sum)) {
                    ok = true;
                    break;
                }
            }
            out.println(ok ? "yes" : "no");
        }
    }

    public void run() {
        try {
            in = new FastScanner(new File("new_years_resolution.txt"));
            out = new PrintWriter(new File("new_years_resolution_ans.txt"));
            Locale.setDefault(Locale.US);

            solve();

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

    public static void main(String[] arg) {
        new B().run();
    }
}
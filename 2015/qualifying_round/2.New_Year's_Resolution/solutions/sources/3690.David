import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;


public class NewYearsResolution {
	static BufferedReader br;
	public static void main (String args[]) throws Exception{
		br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		for (int i = 1; i <= n; i++) {
			System.out.println("Case #" + i + ": " + (solveTC()? "yes" : "no"));
		}
	}
	static class State {
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + gc;
			result = prime * result + gf;
			result = prime * result + gp;
			result = prime * result + n;
			return result;
		}
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			State other = (State) obj;
			if (gc != other.gc)
				return false;
			if (gf != other.gf)
				return false;
			if (gp != other.gp)
				return false;
			if (n != other.n)
				return false;
			return true;
		}
		int gp;
		int gc;
		int gf;
		int n;
		
	}
	static Map<State, Boolean> NGpGcGf;
	static int[][] numbers;
	private static boolean solveTC() throws Exception{
		String line = br.readLine();
		StringTokenizer st = new StringTokenizer(line);
		int GP = Integer.parseInt(st.nextToken());
		int GC = Integer.parseInt(st.nextToken());
		int GF = Integer.parseInt(st.nextToken());
		int N = Integer.parseInt(br.readLine());
		numbers = new int[N][3];
		read(N);
		NGpGcGf = new HashMap<State, Boolean>();
		return topDownDP(GP, GC, GF, N - 1);
	}
	private static void read(int n) throws Exception{
		for (int i = 0; i < n ; i++) {
			String line = br.readLine();
			StringTokenizer st = new StringTokenizer(line);
			int GP = Integer.parseInt(st.nextToken());
			int GC = Integer.parseInt(st.nextToken());
			int GF = Integer.parseInt(st.nextToken());
			numbers[i][0] = GP;
			numbers[i][1] = GC;
			numbers[i][2] = GF;
		}
	}
	private static boolean topDownDP(int gP, int gC, int gF, int n) throws Exception {
		boolean ans = false;
		if (n == -1) {
			return false;
		} else if (numbers[n][0] == gP && numbers[n][1] == gC && numbers[n][2] == gF) { //If i'm the answer
			return true;
		} else if (n == 0) {
			return false;
		} else {
			State s = new State();
			s.gc = gC;
			s.gf = gF;
			s.gp = gP;
			s.n = n-1;
			Boolean stateAnswer = NGpGcGf.get(s);
			if (stateAnswer == null) {
				ans = topDownDP(gP, gC, gF, n-1); //answer might be without considering me.
				NGpGcGf.put(s, ans);
			}
		}
		if (!ans) {
			int ngP = gP - numbers[n][0];
			int ngC = gC - numbers[n][1];
			int ngF = gF - numbers[n][2];
			if (ngP < 0 || ngC < 0 || ngF < 0) {
				return false;
			} else {
				State s = new State();
				s.gc = gC - numbers[n][1];
				s.gf = gF - numbers[n][2];
				s.gp = gP - numbers[n][0];
				s.n = n - 1;
				Boolean stateAnswer = NGpGcGf.get(s);
				if (stateAnswer != null) {
					return stateAnswer;
				} else {
					ans = topDownDP(gP - numbers[n][0], gC - numbers[n][1], gF - numbers[n][2], n - 1);
					NGpGcGf.put(s, ans);
					return ans;
				}
				
				
			}
		} else {return ans;}
	}
}

/*
*/
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <queue>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <unordered_map>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
#include <cstdlib>
#define INF 1000000000
#define FOR(i, a, b) for(int i=int(a); i<int(b); i++)
#define FORC(cont, it) for(typeof((cont).begin()) it=(cont).begin(); it!=(cont).end(); it++)
#define pb push_back
#define mp make_pair
typedef int mint;
#define int ll
using namespace std; typedef long long ll; typedef pair<int, int> ii; typedef vector<int> vi; typedef vector<ii> vii; typedef vector<vi> vvi;
typedef pair<ii, ii> iiii; 

int pcf[21][3];
int N;


bool solver(int i, int p, int c, int f);
bool solve(int i, int p, int c, int f) {
	return !(p || c || f) ||
		(i < N && (
			   solver(i + 1, p - pcf[i][0], c - pcf[i][1], f - pcf[i][2]) 
			|| solver(i + 1, p, c, f)));
}

unordered_map<int, bool> memo;

bool solver(int i, int p, int c, int f) {
	int index = i;
	index = (index * 20001) + p;
	index = (index * 20001) + c;
	index = (index * 20001) + f;
	if(!memo.count(index))
		memo[index] = solve(i, p, c, f);
	return memo[index];
}

mint main() {
	int T; cin >> T;

	FOR(cs, 1, T+1) {
		int P, C, F;
		cin >> P >> C >> F;
		cin >> N;
		memo.clear();

		FOR(i, 0, N) 
			cin >> pcf[i][0] >> pcf[i][1] >> pcf[i][2];
		
		cout << "Case #" << (cs) << ": " << 
			(solver(0, P, C, F) ? "yes" : "no") << endl; 
	}
}

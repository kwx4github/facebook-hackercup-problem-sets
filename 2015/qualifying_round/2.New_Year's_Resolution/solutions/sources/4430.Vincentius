// INCLUDE LIST
#include <cstdio>
#include <bitset>
#include <iostream>
#include <queue>
#include <stack>
#include <string>
#include <cstring>
#include <algorithm>
#include <map>
#include <set>
#include <list>
#include <vector>
#include <cstdlib>
#include <cctype>
#include <cmath>
using namespace std;

// DEFINE LIST
#define REP(_I, _J, _K) for(_I = (_J) ; _I < (_K) ; _I++)
#define input(_A)       freopen(_A, "r", stdin);
#define output(_A)      freopen(_A, "w", stdout);
#define INPUT           input("in.txt");
#define OUTPUT          output("out.txt");
#define CASE_LEFT(_A)   fprintf(stderr, "Cases left: %d\n", R);
#define hold            {fflush(stdin); getchar();}
#define reset(_A, _B)   memset((_A), (_B), sizeof (_A));
#define debug           printf("<<TEST>>\n");
#define eps             1e-11
#define f_cmp(_A, _B)   (fabs((_A) - (_B)) < eps)
#define phi             acos(-1)
#define pb              push_back
#define value(_A)       cout << "Variabel -> " << #_A << " -> " << _A << endl;
#define st              first
#define nd              second

// TYPEDEF LIST
typedef pair<int, int>  ii;
typedef vector<int>     vi;
typedef vector<ii>      vii;
typedef long long       LL;

// VAR LIST
int MAX =               1000000;
int MIN =               -1000000;
int INF =               1000000000;
int x4[4] =             {0, 1, 0, -1};
int y4[4] =             {1, 0, -1, 0};
int x8[8] =             {0, 1, 1,  1,  0, -1, -1, -1};
int y8[8] =             {1, 1, 0, -1, -1, -1,  0,  1};
int i, j, k;

// MAIN CODE
int main () {
	input("new_years_resolution.txt");
	output("out.txt");
	int t, n, Gp, Gc, Gf, kasus = 0;
	int P[1000], C[1000], F[1000];
    cin >> t;
    while (t--) {
    	cin >> Gp >> Gc >> Gf;
    	cin >> n;
    	for(int i=0;i<n;i++) cin >> P[i] >> C[i] >> F[i];
    	
    	int mask = (1 << n);
    	bool found = false;
    	for(int i=0;i<mask && !found;i++) {
    		int p = 0, c = 0, f = 0;
    		for(int j=0;j<n && !found;j++) {
    			if ((i & (1 << j)) > 0) {
    				p += P[j];
    				c += C[j];
    				f += F[j];
    			}
    		}
    		
    		if (p == Gp && c == Gc && f == Gf) {
    			found = true;
    		}
    	}
    	
    	cout << "Case #" << ++kasus << ": ";
    	if (found) cout << "yes" << endl;
    	else cout << "no" << endl;
    }
    return 0;
}


/**
 * Created by rohangarg on 1/12/15.
 */
import java.io.*;
import java.util.*;
public class Qual15_Cooking {

    public static void main(String[] args) throws Exception {
        input();
    }

    public static void input() throws Exception {
        InputReader in = new InputReader(new FileInputStream("input.txt"));
        //PrintWriter out = new PrintWriter(System.out);
        FileWriter out = new FileWriter("output.txt");

        int t= in.readInt();
        for(int tn=1;tn<=t;tn++) {
            out.write("Case #"+tn+": ");
            long n=in.readLong(), num=n;
            if(n==0) { out.write(0 + " " + 0 + "\n"); continue; }

            int len=0; while(num>0) { num/=10; len++; }
            long[] arr = new long[len];
            len--; num=n; while(num>0) { arr[len--]=num%10; num/=10; }

            long min=n, max=n; len=arr.length;
            for(int i=0;i<len;i++)
                for(int j=0;j<len;j++) {
                    long val=arr[i];
                    arr[i]=arr[j];
                    arr[j]=val;
                    long cand = getNum(arr);
                    if(arr[0]!=0) { min=Math.min(min, cand);  max=Math.max(max, cand); }
                    val=arr[i];
                    arr[i]=arr[j];
                    arr[j]=val;
                }
            out.write(min + " " + max + "\n");
        }
        out.flush(); out.close();
    }

    static long getNum(long[] num) {
        long res=0;
        for(int i=num.length-1,j=0;i>=0;i--,j++) res+=num[i]*Math.pow(10, j);
        return res;
    }

    public static class InputReader {

        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1)
                throw new InputMismatchException();
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }

        public int readInt() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public long readLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            long sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }

        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public String next() {
            return readString();
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }
}

package facebookHackerQualifier;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Scanner;

/*Create largest and smallest possible integers
 * by making one swap of digits.  (Don't swap first digit with zero)
 */

public class CookingBooks {
	
	static int findLeadDigitIndex(int[] num)
	{
		for(int i=0; i<num.length; i++)
		{
			if(num[i] > 0)
				return i;
		}
		
		return num.length-1;
	}
	
	static int[] swapDigits(int[] original, int i1, int i2)
	{
		if(i1==i2)
			return original;
		if(i1 < 0 || i2 < 0 || i1 > original.length-1 || i2 > original.length-1)
		{
			System.out.println("Index out of bounds.");
			return original;
		}
		
		int[] swappedInt = original.clone();
		swappedInt[i1] = original[i2];
		swappedInt[i2] = original[i1];
		
		return swappedInt;
	}
	
	static int[] makeBestMinSwap(int[] digits, int leadDigitIndex)
	{
		//Try to swap first digit if not minimized, then try second...
		for(int i=leadDigitIndex; i<digits.length; i++)
		{
			int digitToBeat = digits[i];
			int swapIndex = -1;
			//Find best swap for current digit[i] (if one exists)
			for(int j=digits.length-1; j>i; j--)
			{
				if(i==leadDigitIndex && digits[j]==0)
					continue;
				if(digits[j] < digitToBeat)
				{
					digitToBeat = digits[j];
					swapIndex = j;
				}
			}
			//Swap if found, else continue to next digit[i]
			if(swapIndex > -1)
			{
				return swapDigits(digits, i, swapIndex);
			}
		}
		return digits;
	}
	
	static int[] makeBestMaxSwap(int[] digits, int leadDigitIndex)
	{
		//Try to swap first digit if not maximized, then try second...
		for(int i=leadDigitIndex; i<digits.length; i++)
		{
			int digitToBeat = digits[i];
			int swapIndex = -1;
			//Find best swap for current digit[i] (if one exists)
			for(int j=digits.length-1; j>i; j--)
			{
				if(digits[j] > digitToBeat)
				{
					digitToBeat = digits[j];
					swapIndex = j;
				}
			}
			//Swap if found, else continue to next digit[i]
			if(swapIndex > -1)
			{
				return swapDigits(digits, i, swapIndex);
			}
		}
		return digits;
	}
	
	public static void main(String[] args) throws FileNotFoundException {
		//Open file
		Scanner inFile = new Scanner(new FileReader("cooking_the_books.txt"));
		PrintWriter outFile = new PrintWriter("output.txt");
		
		//Read in number of integers
		int numInts = inFile.nextInt();
		
		int currInt = -1;
		int[] currIntDigits = new int[9];
		int[] temp;
		int leadDigitIndex = -1;
		int min = 0;
		int max = 0;
		
		for(int i=1; i<=numInts; i++)
		{
			currInt = inFile.nextInt();
			
			//Copy digits into array
			for(int j=8; j>=0; j--)
			{
				currIntDigits[j] = currInt % 10;
				currInt /= 10;
			}

			leadDigitIndex = findLeadDigitIndex(currIntDigits);

			//Find min	
			temp = makeBestMinSwap(currIntDigits, leadDigitIndex);
			min = 0;
			for(int j=0; j<9; j++)
			{
				min *= 10;
				min += temp[j];
			}
			
			//Find max
			temp = makeBestMaxSwap(currIntDigits, leadDigitIndex);
			max = 0;
			for(int j=0; j<9; j++)
			{
				max *= 10;
				max += temp[j];
			}
			
			System.out.println("Case #" + i + ": " + min + " " + max);
			outFile.println("Case #" + i + ": " + min + " " + max);
		}

		outFile.close();
	}

}

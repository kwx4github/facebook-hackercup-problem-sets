using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cooking_the_books
{
    public struct OutputElement
    {
        public long smallesNumber;
        public long biggestNumber;
    }

    class Program
    {
        static void Main(string[] args)
        {
            string inFile = "data\\in.txt";
            string outFile = "data\\out.txt";

            List<long> numbers = ReadData(inFile);
            List<OutputElement> result = ProcessData(numbers);
            PrintData(outFile, result);
        }

        private static List<long> ReadData(string inFile)
        {
            List<long> numbers = new List<long>();

            using (StreamReader reader = new StreamReader(inFile))
            {
                string line = reader.ReadLine();
                int n = Convert.ToInt32(line);
                for (int i = 0; i < n; i++)
                {
                    line = reader.ReadLine();
                    long number = Convert.ToInt64(line);
                    numbers.Add(number);
                }
            }

            return numbers;
        }

        private static void PrintData(string outputFile, List<OutputElement> result)
        {
            using (StreamWriter writer = new StreamWriter(outputFile))
            {
                for (var i = 0; i < result.Count; i++)
                {
                    writer.WriteLine("Case #{0}: {1} {2}", i + 1, result[i].smallesNumber, result[i].biggestNumber);
                }
            }
        }

        private static List<OutputElement> ProcessData(List<long> numbers)
        {
            List<OutputElement> result = new List<OutputElement>();

            foreach (var number in numbers)
            {
                short[] strippedNumber = StripNumber(number);

                OutputElement element = new OutputElement()
                {
                    smallesNumber = GetSmallestNumber(strippedNumber),
                    biggestNumber = GetBiggestNumber(strippedNumber)
                };

                result.Add(element);
            }

            return result;
        }

        private static long GetBiggestNumber(short[] input)
        {
            short[] strippedNumber = CopyArray(input);
            bool found = false;
            int poz = 0, swapPoz;

            while (!found && poz < strippedNumber.Length)
            {
                swapPoz = -1;
                for (int i = strippedNumber.Length - 1; i > poz; i--)
                {
                    if (strippedNumber[poz] < strippedNumber[i]
                        && (swapPoz == -1 || strippedNumber[i] > strippedNumber[swapPoz]))
                    {
                        swapPoz = i;
                    }
                }

                if (swapPoz != -1)
                {
                    found = true;
                    // swap
                    short aux = strippedNumber[poz];
                    strippedNumber[poz] = strippedNumber[swapPoz];
                    strippedNumber[swapPoz] = aux;
                }

                poz++;
            }

            return BuildNumber(strippedNumber);
        }

        private static long GetSmallestNumber(short[] input)
        {
            short[] strippedNumber = CopyArray(input);

            bool found = false;
            int poz = 0;
            int swapPoz;

            while (!found && poz < strippedNumber.Length)
            {
                swapPoz = -1;
                for (int i = strippedNumber.Length - 1; i > poz; i--)
                {
                    if (poz == 0 && strippedNumber[i] == 0) continue;

                    if (strippedNumber[poz] > strippedNumber[i] 
                        && (swapPoz == -1 || strippedNumber[i] < strippedNumber[swapPoz]))
                    {
                        swapPoz = i;
                    }
                }

                if (swapPoz != -1)
                {
                    found = true;
                    // swap
                    short aux = strippedNumber[poz];
                    strippedNumber[poz] = strippedNumber[swapPoz];
                    strippedNumber[swapPoz] = aux;
                }

                poz++;
            }

            return BuildNumber(strippedNumber);
        }

        private static short[] CopyArray(short[] input)
        {
            short[] copy = new short[input.Length];
            Array.Copy(input, copy, input.Length);
            return copy;
        }

        private static long BuildNumber(short[] strippedNumber)
        {
            long nr = 0;
            for (int i = 0; i < strippedNumber.Length; i++)
            {
                nr *= 10;
                nr += strippedNumber[i];
            }

            return nr;
        }

        private static short[] StripNumber(long number)
        {
            int length = GetNoOfDigits(number);
            short[] strippedNumber = new short[length];

            int count = 1;
            while (count <= length)
            {
                strippedNumber[length - count] = (short)(number % 10);
                number = number / 10;
                count++;
            }
            return strippedNumber;
        }

        private static int GetNoOfDigits(long number)
        {
            if (number == 0)
            {
                return 1;
            }

            int nrOfDigits = 0;
            while (number > 0)
            {
                nrOfDigits++;
                number = number / 10;
            }

            return nrOfDigits;
        }
    }
}

import sys

def find_max(number):
	max = -1
	maxIdx = -1
	
	for idx, val in enumerate(number):
		intValue = int(val)
		if intValue >= max:
			max = intValue
			maxIdx = idx
		
	return maxIdx
	
def find_min(number):
	min = 10
	minIdx = -1
	minZeroIdx = -1

	for idx, val in enumerate(number):
	    intValue = int(val)
	    if intValue <= min:
			if intValue == 0:
				minZeroIdx = idx
			else:
				min = intValue
				minIdx = idx
	
	return minIdx, minZeroIdx
	
def generate_highest_number(number, maxIdx):
	tmpMax = swap_chars(number, 0, maxIdx)
	if int(tmpMax) == int(number) and len(number) > 1:
		swap_to = first_smaller_than(number, int(number[maxIdx]))
		if swap_to != -1 and (maxIdx != 0 or number[swap_to] != '0'):
			return swap_chars(number, swap_to, maxIdx)
		else:
			return number
	return tmpMax
	
def first_smaller_than(number, value):
	for idx, val in enumerate(number):
		if int(val) < value:
			return idx
	
	return -1
	
def generate_smallest_number(number, minIdx, zeroIdx):
	tmpMin = swap_chars(number, 0, minIdx)
	if int(tmpMin) == int(number) and len(number) > 1:
		if zeroIdx != -1:
			return swap_chars(number, 1, zeroIdx)
	return tmpMin
	
def swap_chars(stringToSwap, idx1, idx2):
	if idx1 == idx2:
		return stringToSwap
		
	stringChars = list(stringToSwap)
	stringChars[idx1], stringChars[idx2] = stringChars[idx2], stringChars[idx1]
	return ''.join(stringChars)

filename = sys.argv[1]
lines = [line.strip() for line in open(filename)]
rows = int(lines[0])

for iteration in range(1, rows + 1):
	number = lines[iteration]
	maxIdx = find_max(number)
	minIdx, minZeroIdx = find_min(number)
	output1 = generate_smallest_number(number, minIdx, minZeroIdx)
	output2 = generate_highest_number(number, maxIdx)
	print 'Case #' + str(iteration) + ': ' + output1 + ' ' + output2
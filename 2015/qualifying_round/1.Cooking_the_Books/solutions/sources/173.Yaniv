#include <iostream>
#include <string>

using namespace std;

size_t get_max_char(const string& s, int offset, char excluding='\x00') {
	size_t max_pos = -1;
	for (size_t i = offset; i < s.size(); ++i) {
		if (s[i] != excluding) {
			if ((max_pos == -1) || (s[max_pos] <= s[i])) { // <= is important
				max_pos = i;
			}
		}
	}
	return max_pos;
}

size_t get_min_char(const string& s, int offset, char excluding='\x00') {
	size_t min_pos = -1;
	for (size_t i = offset; i < s.size(); ++i) {
		if (s[i] != excluding) {
			if ((min_pos == -1) || (s[min_pos] >= s[i])) { // >= is important
				min_pos = i;
			}
		}
	}
	return min_pos;
}

int main() {
	int T;
	cin >> T;
	for (int t = 0; t < T; ++t) {
		string N, largest, smallest;
		bool largest_set = false, smallest_set = false;
		cin >> N;
		largest = N;
		smallest = N;
		
		for (size_t i = 0; (i+1) < N.size(); ++i) {
			size_t max_pos = get_max_char(N, i+1);
			
			size_t min_pos = get_min_char(N, i+1);
			if (i == 0) {
				min_pos = get_min_char(N, i+1, '0');
			}
			if (max_pos != -1) {
				if ((!largest_set) && (N[max_pos] > N[i])) {
					largest_set = true;
					swap(largest[i], largest[max_pos]);
				}
			}
			if (min_pos != -1) {
				if ((!smallest_set) && (N[min_pos] < N[i])) {
					smallest_set = true;
					swap(smallest[i], smallest[min_pos]);
				}
			}
		}

		cout << "Case #" << (t+1) << ": " << smallest << " " << largest << endl;
	}
	return 0;
}
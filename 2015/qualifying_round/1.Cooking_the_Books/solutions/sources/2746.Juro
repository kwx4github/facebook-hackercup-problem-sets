import 'dart:io';
import 'package:useful/useful.dart';

void main() {

  File input = new File("input.txt");

  List inp = input.readAsLinesSync().map((String s) => s.split("").map((int.parse)).toList()).toList();

  inp.removeAt(0);

  getBestFromNum(List x, bool isMin) {
    if (x.length == 1) return new List.from(x);
    List sorted = new List.from(x);
    sort(sorted, asc: isMin);
    num unevenPos = -1;
    for (int i = 0; i < x.length; i++) {
      if (sorted[i] != x[i]) {
        unevenPos = i;
        break;
      }
    }
    if (unevenPos == -1) return new List.from(x);
    num toFind = sorted[unevenPos];
    for (int i = x.length-1; i >= 0; i--) {
      if (x[i] == toFind) {
        List y = new List.from(x);
        num tmp = y[i];
        y[i] = y[unevenPos];
        y[unevenPos] = tmp;
        return y;
      }
    }
  }

  getMinFromNum(List x) {
    if (x.length == 1) return new List.from(x);
    num minim = 10;
    for (int i = 0; i < x.length; i++) (x[i] < minim) && (x[i] != 0) ? minim = x[i] : null;
    if (minim != x[0]) {
      for (int i = x.length-1; i > 0; i--) {
        if (x[i] == minim) {
          List y = new List.from(x);
          num tmp = y[i];
          y[i] = y[0];
          y[0] = tmp;
          return y;
        }
      }
    }

    List trimmed = new List.from(x);
    trimmed.removeAt(0);
    return getBestFromNum(trimmed, true)..insert(0, x[0]);
  }

  for (int i = 0; i < inp.length; i++) {
    print("Case #${i+1}: ${getMinFromNum(inp[i]).reduce((x,y) => "$x$y")} ${getBestFromNum(inp[i], false).reduce((x,y) => "$x$y")}");
  }

}

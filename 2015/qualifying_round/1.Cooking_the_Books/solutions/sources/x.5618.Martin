import Data.Array

swaps n  =  [ (x,y) | x <- [1..n], y <- [x..n], x/=y ]


toStrArray :: String -> Array Int Char
toStrArray n = listArray (1,length nstr) nstr
    where nstr = n

swap i j a 
    | (a!j /= '0') && (a!i /= '0') = a // [(i, a!j),(j,a!i)]
    | otherwise = a


allSwaps :: String -> [Integer]
allSwaps n 
    | length n > 1 = map (\(i,j) -> (read $ elems $ swap i j nstr)::Integer ) (swaps $ length $ n)
    | otherwise    = [read n]
                     where nstr = toStrArray n

main = interact solveAll

solveAll input = unlines $ map (solve) ((flip $ zip . (tail. lines)) [1..] input)
    where 
        solve (s,i) = "Case #" ++ (show i) ++ ": " ++ (show minN) ++ " " ++ (show maxN)
                      where minN =  minimum $ allSwaps s
                            maxN =  maximum $ allSwaps s

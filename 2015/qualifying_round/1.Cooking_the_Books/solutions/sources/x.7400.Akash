#include<stdio.h>

int noOfDigits(long int);
void putNoToArray(int[],int[] ,  long int, int);
int findSmallest(int [], int);
int findLargest(int [], int);
void swap(int*, int*);

int main()
{
	int test_cases;
	int i;
	scanf("%d",&test_cases);
	for(i=0;i<test_cases;i++)
	{
	   long int n;
	   scanf("%ld",&n);
	   if(n==0){ printf("Case #%d: 0 0\n",i+1); continue;}
	   int digits=noOfDigits(n);
	   int number_arr1[9], number_arr2[9];
	   putNoToArray(number_arr1,number_arr2,n,digits);
	   int smallest=findSmallest(number_arr1,digits);
	   swap(&number_arr1[digits-1],&number_arr1[smallest]);

           printf("Case #%d: ",i+1);

           int j; for(j=digits-1;j>=0;j--) printf("%d",number_arr1[j]);   
           printf(" ");

	   int largest=findLargest(number_arr2,digits);
	   swap(&number_arr2[digits-1],&number_arr2[largest]);

           for(j=digits-1;j>=0;j--) printf("%d",number_arr2[j]);
           printf("\n");

   	}
	return 0;
}

int findSmallest(int arr[], int digits)
{
   int min=arr[digits-1];
   int min_index=digits-1;
   int i;
   for(i=0;i<digits;i++)
   {
     if(min > arr[i] && arr[i]!=0)
     {
        min=arr[i];
        min_index=i;
     }
   }
   return min_index;
}

int findLargest(int arr[], int digits)
{
   int max=arr[digits-1];
   int max_index=digits-1;
   int i;
   for(i=0;i<digits;i++)
   {
     if(max < arr[i] && arr[i]!=0)
     {
        max=arr[i];
        max_index=i;
     }
   }
   return max_index;
}


int noOfDigits(long int n)
{
  int no=0;
  while(n>0)
  {
    n/=10;
    no++;
  }
  return no;
}

void putNoToArray(int number_arr1[] , int number_arr2[] ,long int no, int digits)
{
  //int *number_arr=(int *)malloc(digits*sizeof(int));
  int i=0;
  while(i<digits)
  {
    int x=no%10;
    number_arr1[i]=x;
    number_arr2[i]=x;
    no=no/10;
    i++;
  }
  //return number_arr;
}


void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

int nextNonZeroPlace(int arr[],int digits)
{
   int i=1;
   int non_zero=-1;
   while(i<=digits-1)
   {
     if(arr[i]!=0)
     {
        non_zero=i;
        break;
     }
     i++;
   }
   return non_zero;
}

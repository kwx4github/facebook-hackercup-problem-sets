

def find(elems, start, func):
    """
    Return an (index, value) pair of the minimum or maximum element of
    `elems`, ignoring the first `start` elements. `func` is assumed to
    be either the min or max function.
    """
    return func(list(enumerate(elems))[start:], key=lambda x: x[1])

def swap(n, func):
    """
    Given a positive integer `n`, find the minimum or maximum integer
    which can be obtained by swapping two digits (or none). `func` is
    assumed to be either the min or max function.
    """

    # break integer into digits
    digits = map(int, str(n))
    
    for i in range(0, len(digits) - 1):
        # find the min or max element in the rest of the integer
        j, value = find(digits, i + 1, func)
        
        # if the min or max value is better, we can swap it now
        # this is necessarily the best possible swap to perform
        if func(value, digits[i]) == value:
            # special case: we cannot swap 0 into the first position
            if value == i == 0:
                continue
            
            t = digits[i]
            digits[i] = digits[j]
            digits[j] = t
            break
        
    # no swaps possible
    return ''.join(map(str, digits))

def cook_the_books(filename):
    with open(filename) as f:
        lines = f.readlines()

    T = int(lines[0])

    for i in range(0, T):
        n = int(lines[i + 1])
        print 'Case #{0}: {1} {2}'.format(i + 1, swap(n, func=min), swap(n, func=max))

cook_the_books('cooking_the_books.txt')

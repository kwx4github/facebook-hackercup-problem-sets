import Control.Monad

swaps :: String -> [String] 
swaps str = filter (\x -> x !! 0 /= '0' || (length x == 1)) [ swap str a b | a <- [0.. (length str - 1)], b <- [0..(length str - 1)]] 
	where
		swap l a b =  if a == b then l 
					else (take i l) ++ [(l !! j)] ++ (take (j-i-1) (drop (i+1) l)) ++ [(l !! i)] ++ (drop (j+1) l) 
			where 
				i = min a b
				j = max a b
makeOutput :: [String] -> String
makeOutput l =	foldr (++) "" $map (\(a,b,c) -> "Case #" ++ (show a) ++ ": " ++ (show b) ++ " " ++ (show c) ++ "\n") out
	where
		out :: [(Int, Integer, Integer)]
		out = zip3 [1..(length intlist)] (map minimum intlist) (map maximum intlist)
		intlist = (map ((map read) . swaps) l) 
main = do
	n <- getLine
	inputs <- replicateM (read n) getLine
	putStr $makeOutput inputs

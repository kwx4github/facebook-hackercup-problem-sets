//Jeevanraj Angamuthu
//Cooking the Books
//Facebook Hacker Cup 2015

#define DEBUG 0
#define DEEP_DEBUG 0
#define SMALL_DEBUG 0
#define LARGE_DEBUG 0
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

void solve(int i);

int main()
{
#if DEBUG
    cout << "Cooking the Books" << endl;
#endif
    
    //get number of cases
    int T;
    cin >> T;
#if DEBUG
    cout << "Number of Cases T: <" << T << ">." << endl;
#endif
    
    //solve smallest and largest for each case
    for(int i = 0; i < T; i++)
        solve(i);
    
    return 0;
}

void solve(int i)
{
    //get number
    int N;
    cin >> N;
#if DEBUG
    cout << "DEBUG: Case #" << (i+1) << ": Number N to be tweaked: <" << N << ">." << endl;
#endif
    
    //check to see if number is less than 12
    if(N < 12)
    {
        //print numbers
        cout << "Case #" << (i+1) << ": " << N << " " << N << endl;
    }
    else
    {
        //store digits into vector
        vector<int> digits;
        int N1 = N;
        for(; N1 > 0; N1 /= 10)
            digits.push_back(N1%10);
        reverse(digits.begin(), digits.end());
        int number_length = digits.size();
#if DEEP_DEBUG
        cout << "DEEP_DEBUG: Unmodified number stored in vector: <";
        for(vector<int>::iterator it = digits.begin(); it != digits.end(); ++it)
            cout << *it;        
        cout << "> with length: <" << number_length << ">." << endl;
#endif
        
        //_____________________________________________________________________________________________________________________________        
        
        
        //get smallest number
        vector<int> smallest_number_vector = digits;
        int smallest_digit_index=0;
        int smallest_digit=smallest_number_vector[0];
        for(vector<int>::iterator it = smallest_number_vector.begin(); it != smallest_number_vector.end(); ++it)
        {
            if(*it < smallest_digit)
            {
                smallest_digit = *it;
                smallest_digit_index = it - smallest_number_vector.begin();
            }
        }
        
#if SMALL_DEBUG
        cout << "SMALL_SMALL_DEBUG: Smallest digit on 1st Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
        //if first digit smallest, go to second iteration
        if(smallest_digit_index == 0 && number_length > 2)
        {
            //find next smallest digit
            smallest_digit = smallest_number_vector[++smallest_digit_index];
            for(vector<int>::iterator it = smallest_number_vector.begin()+1; it != smallest_number_vector.end(); ++it)
            {
                if(*it < smallest_digit)
                {
                    smallest_digit = *it;
                    smallest_digit_index = it - smallest_number_vector.begin();
                }
            }
#if SMALL_DEBUG
            cout << "SMALL_SMALL_DEBUG: Smallest digit on 2nd Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
            if(smallest_digit_index == 1 && number_length > 3)
            {
                //find next smallest digit
                smallest_digit = smallest_number_vector[++smallest_digit_index];           
                for(vector<int>::iterator it = (smallest_number_vector.begin()+2); it != smallest_number_vector.end(); ++it)
                {
                    if(*it < smallest_digit)
                    {
                        smallest_digit = *it;
                        smallest_digit_index = it - smallest_number_vector.begin();
                    }
                }
#if SMALL_DEBUG
                cout << "SMALL_SMALL_DEBUG: Smallest digit on 3rd Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                if(smallest_digit_index == 2 && number_length > 4)
                {
                    //find next smallest digit
                    smallest_digit = smallest_number_vector[++smallest_digit_index];           
                    for(vector<int>::iterator it = (smallest_number_vector.begin()+3); it != smallest_number_vector.end(); ++it)
                    {
                        if(*it < smallest_digit)
                        {
                            smallest_digit = *it;
                            smallest_digit_index = it - smallest_number_vector.begin();
                        }
                    }
#if SMALL_DEBUG
                    cout << "SMALL_DEBUG: Smallest digit on 4th Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                    if(smallest_digit_index == 3 && number_length > 5)
                    {
                        //find next smallest digit
                        smallest_digit = smallest_number_vector[++smallest_digit_index];           
                        for(vector<int>::iterator it = (smallest_number_vector.begin()+4); it != smallest_number_vector.end(); ++it)
                        {
                            if(*it < smallest_digit)
                            {
                                smallest_digit = *it;
                                smallest_digit_index = it - smallest_number_vector.begin();
                            }
                        }
#if SMALL_DEBUG
                        cout << "SMALL_DEBUG: Smallest digit on 5th Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                        if(smallest_digit_index == 4 && number_length > 6)
                        {
                            //find next smallest digit
                            smallest_digit = smallest_number_vector[++smallest_digit_index];           
                            for(vector<int>::iterator it = (smallest_number_vector.begin()+5); it != smallest_number_vector.end(); ++it)
                            {
                                if(*it < smallest_digit)
                                {
                                    smallest_digit = *it;
                                    smallest_digit_index = it - smallest_number_vector.begin();
                                }
                            }
#if SMALL_DEBUG
                            cout << "SMALL_DEBUG: Smallest digit on 6th iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                            if(smallest_digit_index == 5 && number_length > 7)
                            {
                                //find next smallest digit
                                smallest_digit = smallest_number_vector[++smallest_digit_index];           
                                for(vector<int>::iterator it = (smallest_number_vector.begin()+6); it != smallest_number_vector.end(); ++it)
                                {
                                    if(*it < smallest_digit)
                                    {
                                        smallest_digit = *it;
                                        smallest_digit_index = it - smallest_number_vector.begin();
                                    }
                                }
#if SMALL_DEBUG
                                cout << "SMALL_DEBUG: Smallest digit on 7th Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                if(smallest_digit_index == 6 && number_length > 8)
                                {
                                    //find next smallest digit
                                    smallest_digit = smallest_number_vector[++smallest_digit_index];           
                                    for(vector<int>::iterator it = (smallest_number_vector.begin()+7); it != smallest_number_vector.end(); ++it)
                                    {
                                        if(*it < smallest_digit)
                                        {
                                            smallest_digit = *it;
                                            smallest_digit_index = it - smallest_number_vector.begin();
                                        }
                                    }
#if SMALL_DEBUG
                                    cout << "SMALL_DEBUG: Smallest digit on 8th iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                    
                                    //find next smallest lsd & swap
                                    smallest_digit = smallest_number_vector[smallest_digit_index];           
                                    for(vector<int>::iterator it = (smallest_number_vector.begin()+7); it != smallest_number_vector.end(); ++it)
                                    {
                                        if(*it <= smallest_digit)
                                        {
                                            smallest_digit = *it;
                                            smallest_digit_index = it - smallest_number_vector.begin();
                                        }
                                    }
                                    swap(smallest_number_vector[7], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                                    cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                }
                                else
                                {
                                    //find next smallest lsd & swap
                                    smallest_digit = smallest_number_vector[smallest_digit_index];           
                                    for(vector<int>::iterator it = (smallest_number_vector.begin()+6); it != smallest_number_vector.end(); ++it)
                                    {
                                        if(*it <= smallest_digit)
                                        {
                                            smallest_digit = *it;
                                            smallest_digit_index = it - smallest_number_vector.begin();
                                        }
                                    }
                                    swap(smallest_number_vector[6], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                                    cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                }
                                
                            }
                            else
                            {
                                //find next smallest lsd & swap
                                smallest_digit = smallest_number_vector[smallest_digit_index];           
                                for(vector<int>::iterator it = (smallest_number_vector.begin()+5); it != smallest_number_vector.end(); ++it)
                                {
                                    if(*it <= smallest_digit)
                                    {
                                        smallest_digit = *it;
                                        smallest_digit_index = it - smallest_number_vector.begin();
                                    }
                                }
                                swap(smallest_number_vector[5], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                                cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                            }
                            
                        }
                        else
                        {
                            //find next smallest lsd & swap
                            smallest_digit = smallest_number_vector[smallest_digit_index];           
                            for(vector<int>::iterator it = (smallest_number_vector.begin()+4); it != smallest_number_vector.end(); ++it)
                            {
                                if(*it <= smallest_digit)
                                {
                                    smallest_digit = *it;
                                    smallest_digit_index = it - smallest_number_vector.begin();
                                }
                            }
                            swap(smallest_number_vector[4], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                            cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                        }
                        
                    }
                    else
                    {
                        //find next smallest lsd & swap
                        smallest_digit = smallest_number_vector[smallest_digit_index];           
                        for(vector<int>::iterator it = (smallest_number_vector.begin()+3); it != smallest_number_vector.end(); ++it)
                        {
                            if(*it <= smallest_digit)
                            {
                                smallest_digit = *it;
                                smallest_digit_index = it - smallest_number_vector.begin();
                            }
                        }
                        swap(smallest_number_vector[3], smallest_number_vector[smallest_digit_index]);
                        
#if SMALL_DEBUG
                        cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << "> with digit <" << smallest_number_vector[3] << "> at index 3." << endl;
#endif
                    }
                    
                }
                else
                {
                    //find next smallest lsd & swap
                    smallest_digit = smallest_number_vector[smallest_digit_index];           
                    for(vector<int>::iterator it = (smallest_number_vector.begin()+2); it != smallest_number_vector.end(); ++it)
                    {
                        if(*it <= smallest_digit)
                        {
                            smallest_digit = *it;
                            smallest_digit_index = it - smallest_number_vector.begin();
                        }
                    }
                    swap(smallest_number_vector[2], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                    cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                }
            }
            else
            {
                //find next smallest lsd & swap
                smallest_digit = smallest_number_vector[smallest_digit_index];           
                for(vector<int>::iterator it = (smallest_number_vector.begin()+1); it != smallest_number_vector.end(); ++it)
                {
                    if(*it <= smallest_digit)
                    {
                        smallest_digit = *it;
                        smallest_digit_index = it - smallest_number_vector.begin();
                    }
                }
                swap(smallest_number_vector[1], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
            }
        }
        //else if smallest digit 0 && number length > 2, go to second iteration
        else if(smallest_digit == 0 && number_length > 2)
        {
            //find next smallest digit bigger than zero
            int smallest_non_zero_digit_index;
            smallest_digit = smallest_number_vector[0];
            for(vector<int>::iterator it = smallest_number_vector.begin()+1; it != smallest_number_vector.end(); ++it)
            {
                if(*it < smallest_digit && *it !=0)
                {
                    smallest_digit = *it;
                    smallest_non_zero_digit_index = it - smallest_number_vector.begin();
                }
            }
#if SMALL_DEBUG
            cout << "SMALL_DEBUG: Smallest non-zero digit on 2nd Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_non_zero_digit_index << ">." << endl;
#endif
            //if next smallest lsd smaller than 1st digit, swap with first digit
            if(smallest_digit < smallest_number_vector[0])
            {
                for(vector<int>::iterator it = smallest_number_vector.begin()+1; it != smallest_number_vector.end(); ++it)
                {
                    if(*it <= smallest_digit && *it !=0)
                    {
                        smallest_digit = *it;
                        smallest_non_zero_digit_index = it - smallest_number_vector.begin();
                    }
                }
                
                swap(smallest_number_vector[0], smallest_number_vector[smallest_non_zero_digit_index]);
                
#if SMALL_DEBUG
                cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_non_zero_digit_index << ">." << endl;
#endif
            }
            //else
            else
            {
                //find next smallest digit
                smallest_digit = smallest_number_vector[++smallest_digit_index];
                for(vector<int>::iterator it = smallest_number_vector.begin()+1; it != smallest_number_vector.end(); ++it)
                {
                    if(*it < smallest_digit)
                    {
                        smallest_digit = *it;
                        smallest_digit_index = it - smallest_number_vector.begin();
                    }
                }
#if SMALL_DEBUG
                cout << "SMALL_DEBUG: Smallest digit on 2nd Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                if(smallest_digit_index == 1 && number_length > 3)
                {
                    //find next smallest digit
                    smallest_digit = smallest_number_vector[++smallest_digit_index];           
                    for(vector<int>::iterator it = (smallest_number_vector.begin()+2); it != smallest_number_vector.end(); ++it)
                    {
                        if(*it < smallest_digit)
                        {
                            smallest_digit = *it;
                            smallest_digit_index = it - smallest_number_vector.begin();
                        }
                    }
#if SMALL_DEBUG
                    cout << "SMALL_DEBUG: Smallest digit on 3rd Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                    if(smallest_digit_index == 2 && number_length > 4)
                    {
                        //find next smallest digit
                        smallest_digit = smallest_number_vector[++smallest_digit_index];           
                        for(vector<int>::iterator it = (smallest_number_vector.begin()+3); it != smallest_number_vector.end(); ++it)
                        {
                            if(*it < smallest_digit)
                            {
                                smallest_digit = *it;
                                smallest_digit_index = it - smallest_number_vector.begin();
                            }
                        }
#if SMALL_DEBUG
                        cout << "SMALL_DEBUG: Smallest digit on 4th Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                        if(smallest_digit_index == 3 && number_length > 5)
                        {
                            //find next smallest digit
                            smallest_digit = smallest_number_vector[++smallest_digit_index];           
                            for(vector<int>::iterator it = (smallest_number_vector.begin()+4); it != smallest_number_vector.end(); ++it)
                            {
                                if(*it < smallest_digit)
                                {
                                    smallest_digit = *it;
                                    smallest_digit_index = it - smallest_number_vector.begin();
                                }
                            }
#if SMALL_DEBUG
                            cout << "SMALL_DEBUG: Smallest digit on 5th Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                            if(smallest_digit_index == 4 && number_length > 6)
                            {
                                //find next smallest digit
                                smallest_digit = smallest_number_vector[++smallest_digit_index];           
                                for(vector<int>::iterator it = (smallest_number_vector.begin()+5); it != smallest_number_vector.end(); ++it)
                                {
                                    if(*it < smallest_digit)
                                    {
                                        smallest_digit = *it;
                                        smallest_digit_index = it - smallest_number_vector.begin();
                                    }
                                }
#if SMALL_DEBUG
                                cout << "SMALL_DEBUG: Smallest digit on 6th iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                if(smallest_digit_index == 5 && number_length > 7)
                                {
                                    //find next smallest digit
                                    smallest_digit = smallest_number_vector[++smallest_digit_index];           
                                    for(vector<int>::iterator it = (smallest_number_vector.begin()+6); it != smallest_number_vector.end(); ++it)
                                    {
                                        if(*it < smallest_digit)
                                        {
                                            smallest_digit = *it;
                                            smallest_digit_index = it - smallest_number_vector.begin();
                                        }
                                    }
#if SMALL_DEBUG
                                    cout << "SMALL_DEBUG: Smallest digit on 7th Iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                    if(smallest_digit_index == 6 && number_length > 8)
                                    {
                                        //find next smallest digit
                                        smallest_digit = smallest_number_vector[++smallest_digit_index];           
                                        for(vector<int>::iterator it = (smallest_number_vector.begin()+7); it != smallest_number_vector.end(); ++it)
                                        {
                                            if(*it < smallest_digit)
                                            {
                                                smallest_digit = *it;
                                                smallest_digit_index = it - smallest_number_vector.begin();
                                            }
                                        }
#if SMALL_DEBUG
                                        cout << "SMALL_DEBUG: Smallest digit on 8th iteration: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                        
                                        //find next smallest lsd & swap
                                        smallest_digit = smallest_number_vector[smallest_digit_index];           
                                        for(vector<int>::iterator it = (smallest_number_vector.begin()+7); it != smallest_number_vector.end(); ++it)
                                        {
                                            if(*it <= smallest_digit)
                                            {
                                                smallest_digit = *it;
                                                smallest_digit_index = it - smallest_number_vector.begin();
                                            }
                                        }
                                        swap(smallest_number_vector[7], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                                        cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                    }
                                    else
                                    {
                                        //find next smallest lsd & swap
                                        smallest_digit = smallest_number_vector[smallest_digit_index];           
                                        for(vector<int>::iterator it = (smallest_number_vector.begin()+6); it != smallest_number_vector.end(); ++it)
                                        {
                                            if(*it <= smallest_digit)
                                            {
                                                smallest_digit = *it;
                                                smallest_digit_index = it - smallest_number_vector.begin();
                                            }
                                        }
                                        swap(smallest_number_vector[6], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                                        cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                    }
                                    
                                }
                                else
                                {
                                    //find next smallest lsd & swap
                                    smallest_digit = smallest_number_vector[smallest_digit_index];           
                                    for(vector<int>::iterator it = (smallest_number_vector.begin()+5); it != smallest_number_vector.end(); ++it)
                                    {
                                        if(*it <= smallest_digit)
                                        {
                                            smallest_digit = *it;
                                            smallest_digit_index = it - smallest_number_vector.begin();
                                        }
                                    }
                                    swap(smallest_number_vector[5], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                                    cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                                }
                                
                            }
                            else
                            {
                                //find next smallest lsd & swap
                                smallest_digit = smallest_number_vector[smallest_digit_index];           
                                for(vector<int>::iterator it = (smallest_number_vector.begin()+4); it != smallest_number_vector.end(); ++it)
                                {
                                    if(*it <= smallest_digit)
                                    {
                                        smallest_digit = *it;
                                        smallest_digit_index = it - smallest_number_vector.begin();
                                    }
                                }
                                swap(smallest_number_vector[4], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                                cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                            }
                            
                        }
                        else
                        {
                            //find next smallest lsd & swap
                            smallest_digit = smallest_number_vector[smallest_digit_index];           
                            for(vector<int>::iterator it = (smallest_number_vector.begin()+3); it != smallest_number_vector.end(); ++it)
                            {
                                if(*it <= smallest_digit)
                                {
                                    smallest_digit = *it;
                                    smallest_digit_index = it - smallest_number_vector.begin();
                                }
                            }
                            swap(smallest_number_vector[3], smallest_number_vector[smallest_digit_index]);
                            
#if SMALL_DEBUG
                            cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << "> with digit <" << smallest_number_vector[3] << "> at index 3." << endl;
#endif
                        }
                        
                    }
                    else
                    {
                        //find next smallest lsd & swap
                        smallest_digit = smallest_number_vector[smallest_digit_index];           
                        for(vector<int>::iterator it = (smallest_number_vector.begin()+2); it != smallest_number_vector.end(); ++it)
                        {
                            if(*it <= smallest_digit)
                            {
                                smallest_digit = *it;
                                smallest_digit_index = it - smallest_number_vector.begin();
                            }
                        }
                        swap(smallest_number_vector[2], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                        cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                    }
                }
                else
                {
                    //find next smallest lsd & swap
                    smallest_digit = smallest_number_vector[smallest_digit_index];           
                    for(vector<int>::iterator it = (smallest_number_vector.begin()+1); it != smallest_number_vector.end(); ++it)
                    {
                        if(*it <= smallest_digit)
                        {
                            smallest_digit = *it;
                            smallest_digit_index = it - smallest_number_vector.begin();
                        }
                    }
                    swap(smallest_number_vector[1], smallest_number_vector[smallest_digit_index]);
#if SMALL_DEBUG
                    cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
                }
            }
        }
        //else find lsd to replace first digit
        else if(number_length > 2)
        {
            //find next smallest lsd & swap
            smallest_digit = smallest_number_vector[smallest_digit_index];           
            for(vector<int>::iterator it = (smallest_number_vector.begin()); it != smallest_number_vector.end(); ++it)
            {
                if(*it <= smallest_digit)
                {
                    smallest_digit = *it;
                    smallest_digit_index = it - smallest_number_vector.begin();
                }
            }
            swap(smallest_number_vector[0], smallest_number_vector[smallest_digit_index]);
            
#if SMALL_DEBUG
            cout << "SMALL_DEBUG: Smallest digit swapped: <" << smallest_number_vector[smallest_digit_index] << "> at index <" << smallest_digit_index << ">." << endl;
#endif
        }
        
        
        
        //save smallest number
        vector<int> smallest_number = smallest_number_vector;
        
        //______________________________________________________________________________________________________________________________
        
        
        //get largest number
        vector<int> largest_number_vector = digits;
        int largest_digit_index=0;
        int largest_digit=largest_number_vector[0];
        for(vector<int>::iterator it = largest_number_vector.begin(); it != largest_number_vector.end(); ++it)
        {
            if(*it > largest_digit)
            {
                largest_digit = *it;
                largest_digit_index = it - largest_number_vector.begin();
            }
            
        }
#if LARGE_DEBUG
        cout << "LARGE_LARGE_DEBUG: Largest digit on 1st Iteration: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
        
        //if first digit is largest, go to second iteration
        if(largest_digit_index == 0 && number_length > 2)
        {
            //find next largest digit
            largest_digit = largest_number_vector[++largest_digit_index];           
            for(vector<int>::iterator it = (largest_number_vector.begin()+1); it != largest_number_vector.end(); ++it)
            {
                if(*it > largest_digit)
                {
                    largest_digit = *it;
                    largest_digit_index = it - largest_number_vector.begin();
                }
            }
#if LARGE_DEBUG
            cout << "LARGE_LARGE_DEBUG: Largest digit on 2nd Iteration: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
            if(largest_digit_index == 1 && number_length > 3)
            {
                //find next largest digit
                largest_digit = largest_number_vector[++largest_digit_index];           
                for(vector<int>::iterator it = (largest_number_vector.begin()+2); it != largest_number_vector.end(); ++it)
                {
                    if(*it > largest_digit)
                    {
                        largest_digit = *it;
                        largest_digit_index = it - largest_number_vector.begin();
                    }
                }
#if LARGE_DEBUG
                cout << "LARGE_DEBUG: Largest digit on 3rd Iteration: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                if(largest_digit_index == 2 && number_length > 4)
                {
                    //find next largest digit
                    largest_digit = largest_number_vector[++largest_digit_index];           
                    for(vector<int>::iterator it = (largest_number_vector.begin()+3); it != largest_number_vector.end(); ++it)
                    {
                        if(*it > largest_digit)
                        {
                            largest_digit = *it;
                            largest_digit_index = it - largest_number_vector.begin();
                        }
                    }
#if LARGE_DEBUG
                    cout << "LARGE_DEBUG: Largest digit on 4th Iteration: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                    if(largest_digit_index == 3 && number_length > 5)
                    {
                        //find next largest digit
                        largest_digit = largest_number_vector[++largest_digit_index];           
                        for(vector<int>::iterator it = (largest_number_vector.begin()+4); it != largest_number_vector.end(); ++it)
                        {
                            if(*it > largest_digit)
                            {
                                largest_digit = *it;
                                largest_digit_index = it - largest_number_vector.begin();
                            }
                        }
#if LARGE_DEBUG
                        cout << "LARGE_DEBUG: Largest digit on 5th Iteration: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                        if(largest_digit_index == 4 && number_length > 6)
                        {
                            //find next largest digit
                            largest_digit = largest_number_vector[++largest_digit_index];           
                            for(vector<int>::iterator it = (largest_number_vector.begin()+5); it != largest_number_vector.end(); ++it)
                            {
                                if(*it > largest_digit)
                                {
                                    largest_digit = *it;
                                    largest_digit_index = it - largest_number_vector.begin();
                                }
                            }
#if LARGE_DEBUG
                            cout << "LARGE_DEBUG: Largest digit on 6th iteration: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                            if(largest_digit_index == 5 && number_length > 7)
                            {
                                //find next largest digit
                                largest_digit = largest_number_vector[++largest_digit_index];           
                                for(vector<int>::iterator it = (largest_number_vector.begin()+6); it != largest_number_vector.end(); ++it)
                                {
                                    if(*it > largest_digit)
                                    {
                                        largest_digit = *it;
                                        largest_digit_index = it - largest_number_vector.begin();
                                    }
                                }
#if LARGE_DEBUG
                                cout << "LARGE_DEBUG: Largest digit on 7th Iteration: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                                if(largest_digit_index == 6 && number_length > 8)
                                {
                                    //find next largest digit
                                    largest_digit = largest_number_vector[++largest_digit_index];           
                                    for(vector<int>::iterator it = (largest_number_vector.begin()+7); it != largest_number_vector.end(); ++it)
                                    {
                                        if(*it > largest_digit)
                                        {
                                            largest_digit = *it;
                                            largest_digit_index = it - largest_number_vector.begin();
                                        }
                                    }
#if LARGE_DEBUG
                                    cout << "LARGE_DEBUG: Largest digit on 8th iteration: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                                    
                                    //find next largest lsd & swap
                                    largest_digit = largest_number_vector[largest_digit_index];           
                                    for(vector<int>::iterator it = (largest_number_vector.begin()+7); it != largest_number_vector.end(); ++it)
                                    {
                                        if(*it >= largest_digit)
                                        {
                                            largest_digit = *it;
                                            largest_digit_index = it - largest_number_vector.begin();
                                        }
                                    }
                                    swap(largest_number_vector[7], largest_number_vector[largest_digit_index]);
#if LARGE_DEBUG
                                    cout << "LARGE_DEBUG: Largest digit swapped: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                                }
                                else
                                {
                                    //find next largest lsd & swap
                                    largest_digit = largest_number_vector[largest_digit_index];           
                                    for(vector<int>::iterator it = (largest_number_vector.begin()+6); it != largest_number_vector.end(); ++it)
                                    {
                                        if(*it >= largest_digit)
                                        {
                                            largest_digit = *it;
                                            largest_digit_index = it - largest_number_vector.begin();
                                        }
                                    }
                                    swap(largest_number_vector[6], largest_number_vector[largest_digit_index]);
#if LARGE_DEBUG
                                    cout << "LARGE_DEBUG: Largest digit swapped: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                                }
                                
                            }
                            else
                            {
                                //find next largest lsd & swap
                                largest_digit = largest_number_vector[largest_digit_index];           
                                for(vector<int>::iterator it = (largest_number_vector.begin()+5); it != largest_number_vector.end(); ++it)
                                {
                                    if(*it >= largest_digit)
                                    {
                                        largest_digit = *it;
                                        largest_digit_index = it - largest_number_vector.begin();
                                    }
                                }
                                swap(largest_number_vector[5], largest_number_vector[largest_digit_index]);
#if LARGE_DEBUG
                                cout << "LARGE_DEBUG: Largest digit swapped: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                            }
                            
                        }
                        else
                        {
                            //find next largest lsd & swap
                            largest_digit = largest_number_vector[largest_digit_index];           
                            for(vector<int>::iterator it = (largest_number_vector.begin()+4); it != largest_number_vector.end(); ++it)
                            {
                                if(*it >= largest_digit)
                                {
                                    largest_digit = *it;
                                    largest_digit_index = it - largest_number_vector.begin();
                                }
                            }
                            swap(largest_number_vector[4], largest_number_vector[largest_digit_index]);
#if LARGE_DEBUG
                            cout << "LARGE_DEBUG: Largest digit swapped: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                        }
                        
                    }
                    else
                    {
                        //find next largest lsd & swap
                        largest_digit = largest_number_vector[largest_digit_index];           
                        for(vector<int>::iterator it = (largest_number_vector.begin()+3); it != largest_number_vector.end(); ++it)
                        {
                            if(*it >= largest_digit)
                            {
                                largest_digit = *it;
                                largest_digit_index = it - largest_number_vector.begin();
                            }
                        }
                        swap(largest_number_vector[3], largest_number_vector[largest_digit_index]);
                        
#if LARGE_DEBUG
                        cout << "LARGE_DEBUG: Largest digit swapped: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << "> with digit <" << largest_number_vector[3] << "> at index 3." << endl;
#endif
                    }
                    
                }
                else
                {
                    //find next largest lsd & swap
                    largest_digit = largest_number_vector[largest_digit_index];           
                    for(vector<int>::iterator it = (largest_number_vector.begin()+2); it != largest_number_vector.end(); ++it)
                    {
                        if(*it >= largest_digit)
                        {
                            largest_digit = *it;
                            largest_digit_index = it - largest_number_vector.begin();
                        }
                    }
                    swap(largest_number_vector[2], largest_number_vector[largest_digit_index]);
#if LARGE_DEBUG
                    cout << "LARGE_DEBUG: Largest digit swapped: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
                }
            }
            else
            {
                //find next largest lsd & swap
                largest_digit = largest_number_vector[largest_digit_index];           
                for(vector<int>::iterator it = (largest_number_vector.begin()+1); it != largest_number_vector.end(); ++it)
                {
                    if(*it >= largest_digit)
                    {
                        largest_digit = *it;
                        largest_digit_index = it - largest_number_vector.begin();
                    }
                }
                swap(largest_number_vector[1], largest_number_vector[largest_digit_index]);
#if LARGE_DEBUG
                cout << "LARGE_DEBUG: Largest digit swapped: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
            }
        }
        //else find lsd to replace first digit
        else
        {
            //find next largest lsd & swap
            largest_digit = largest_number_vector[largest_digit_index];           
            for(vector<int>::iterator it = (largest_number_vector.begin()); it != largest_number_vector.end(); ++it)
            {
                if(*it >= largest_digit)
                {
                    largest_digit = *it;
                    largest_digit_index = it - largest_number_vector.begin();
                }
            }
            swap(largest_number_vector[0], largest_number_vector[largest_digit_index]);
            
#if LARGE_DEBUG
            cout << "LARGE_DEBUG: Largest digit swapped: <" << largest_number_vector[largest_digit_index] << "> at index <" << largest_digit_index << ">." << endl;
#endif
        }
        
        //save largest number
        vector<int>largest_number = largest_number_vector;
        
        //print numbers
        cout << "Case #" << (i+1) << ": ";
        for(vector<int>::iterator it = smallest_number.begin(); it != smallest_number.end(); ++it)
            cout << *it;        
        cout << " ";
        for(vector<int>::iterator it = largest_number.begin(); it != largest_number.end(); ++it)
            cout << *it;        
        cout << endl;
    }
    
    //return 0;
}


package competition.yr2015;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;

public class CookingBooks {
	
	private static PrintWriter writer;
	private static int testCaseCounter = 0;
	
	public static void main(String[] args) throws Exception {
		int T;
		System.out.println("current dir = " + System.getProperty("user.dir"));
		BufferedReader reader = new BufferedReader(new FileReader("./input/cooking_the_books.txt"));
		writer = new PrintWriter(new File("./output/cooking_the_books.txt"));
		
		T = Integer.parseInt(reader.readLine());
		int n, l, sl, s;
		for(int t = 0; t < T; t++) { 
			String numberString = reader.readLine();
			n = Integer.parseInt(numberString);
			printDigitsV2(n, numberString.length());
		}
		writer.close();
	}
	
	private static void printDigitsV2(int number, int numberOfDigits) {
		int base = (int)Math.pow(10, numberOfDigits-1);
		int numberTwo = number;
		int minNumber = Integer.MAX_VALUE, maxNumber = 0;
		int minIndex = -1, maxIndex = -1;
		int index = 0;
		int[] storageMin = new int[numberOfDigits];
		int[] storageMax = new int[numberOfDigits];
		int counter = 0;
		while(counter < numberOfDigits) {
			counter++;
			int n = (number - (number%base))/base;
			int n2 = (numberTwo%10);
			numberTwo/=10;
			storageMin[index] = n;
			storageMax[numberOfDigits - 1 -index] = n2;
			
			if(numberOfDigits - 1 - index < numberOfDigits - 1) {
				if(storageMax[numberOfDigits - 1 - index] > storageMax[numberOfDigits - index] || 
						maxNumber > -1) {
					if(n2 >= maxNumber) {
						maxNumber = n2;
						maxIndex = numberOfDigits - 1 - index;
					}
				}
			} else if(index == 0 && storageMax[numberOfDigits - 1] > 0){
				maxNumber = storageMax[numberOfDigits - 1];
				maxIndex = numberOfDigits - 1;
			}
			
			if(index > 0) {
				if(storageMin[index - 1] > n || minNumber < Integer.MAX_VALUE) {
					//You can assign the min value
					if(n <= minNumber) {
						minNumber = n;
						minIndex = index;
					}
				}
			}
			
			number-=(n*base);
			base/=10;
			index ++;
			
		}
		
		if(storageMax[0] == 0) {
			storageMax[0] = numberTwo;
			if(numberTwo > maxNumber) {
				maxNumber = numberTwo;
				maxIndex = 0;
			}
		}
		
		int newMinNumber = 0;
		int newMaxNumber = 0;
		base = (int)Math.pow(10, numberOfDigits-1);
		boolean minSwapPerformed = false;
		boolean maxSwapPerformed = false;
		for(int i = 0; i<numberOfDigits; i++) {
			
			if(storageMax[i] < maxNumber && maxIndex > i && !maxSwapPerformed) {
				//swap the number
				int tmp = storageMax[i];
				storageMax[maxIndex] = tmp;
				storageMax[i] = maxNumber;
				maxSwapPerformed = true;
			}
			
			newMaxNumber += base * storageMax[i];
			if(storageMin[i] > minNumber && !minSwapPerformed && (i>0 || minNumber > 0)) {
				int tmp = storageMin[i];
				storageMin[minIndex] = tmp;
				storageMin[i] = minNumber;
				minSwapPerformed = true;
			}
			
			newMinNumber += base * storageMin[i];
			
			base/=10;
		}
		
		writer.println("Case #" + (++testCaseCounter) + ": " + newMinNumber + " " + newMaxNumber);
		//System.out.println("Min number: " + minNumber + "@" + minIndex + " and max number: " + maxNumber + "@" + maxIndex);
	}
	
	private static void printDigits(int number, int numberOfDigits) {
		int base = (int)Math.pow(10, numberOfDigits-1);
		int numberTwo = number;
		int minNumber = Integer.MAX_VALUE, maxNumber = 0;
		int minIndex = -1, maxIndex = -1;
		int index = 0;
		int[] storageMin = new int[numberOfDigits];
		int[] storageMax = new int[numberOfDigits];
		while(number > 0) {
			int n = (number - (number%base))/base;
			int n2 = (numberTwo%10);
			numberTwo/=10;
			System.out.println("...Num 2: " + numberTwo);
			storageMin[index] = n;
			storageMax[numberOfDigits - 1 -index] = n2;
			
			if(numberOfDigits - 1 - index < numberOfDigits - 1) {
				if(storageMax[numberOfDigits - 1 - index] > storageMax[numberOfDigits - index] || 
						maxNumber > -1) {
					if(n2 >= maxNumber) {
						maxNumber = n2;
						maxIndex = numberOfDigits - 1 - index;
					}
				}
			} else if(index == 0 && storageMax[numberOfDigits - 1] > 0){
				maxNumber = storageMax[numberOfDigits - 1];
				maxIndex = numberOfDigits - 1;
			}
			
			if(index > 0) {
				if(storageMin[index - 1] > n || minNumber < Integer.MAX_VALUE) {
					//You can assign the min value
					if(n <= minNumber) {
						minNumber = n;
						minIndex = index;
					}
				}
			}
			
			number-=(n*base);
			base/=10;
			index ++;
			
		}
		
		if(storageMax[0] == 0) {
			storageMax[0] = numberTwo;
			if(numberTwo > maxNumber) {
				maxNumber = numberTwo;
				maxIndex = 0;
			}
		}
		
		int newMinNumber = 0;
		int newMaxNumber = 0;
		base = (int)Math.pow(10, numberOfDigits-1);
		boolean minSwapPerformed = false;
		boolean maxSwapPerformed = false;
		for(int i = 0; i<numberOfDigits; i++) {
			
			if(storageMax[i] < maxNumber && maxIndex > i && !maxSwapPerformed) {
				//swap the number
				int tmp = storageMax[i];
				storageMax[maxIndex] = tmp;
				storageMax[i] = maxNumber;
				maxSwapPerformed = true;
			}
			
			newMaxNumber += base * storageMax[i];
			if(storageMin[i] > minNumber && !minSwapPerformed && (i>0 || minNumber > 0)) {
				int tmp = storageMin[i];
				storageMin[minIndex] = tmp;
				storageMin[i] = minNumber;
				minSwapPerformed = true;
			}
			
			newMinNumber += base * storageMin[i];
			
			base/=10;
		}
		
		writer.println("Case #" + (++testCaseCounter) + ": " + newMinNumber + " " + newMaxNumber);
		//System.out.println("Min number: " + minNumber + "@" + minIndex + " and max number: " + maxNumber + "@" + maxIndex);
	}
}

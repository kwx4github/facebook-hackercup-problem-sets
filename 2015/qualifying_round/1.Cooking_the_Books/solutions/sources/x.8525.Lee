#include <stdio.h>
#include <math.h>
int DIGIT;
int QUO[10], RMD[10], N[10];
int FIRST_digit;
int CHECK_0;
int CHECK;

void breaker_digit(int n){ //n(54321)의 자릿수(5) 설정해주고  5 4 3 2 1 을 배열에 저장
   int i = 0;
   DIGIT = 0; //초기화
   
   QUO[0] = n / 10;
   RMD[0] = n % 10;
   N[0] = RMD[0];
   DIGIT++;
   if(RMD[0] == 0) {
         CHECK_0 = 1;
         CHECK = 0;
      }
      if(QUO[0]==0) 
         return ;
   for(i=1;i<9;i++){
      QUO[i] = QUO[i-1] / 10;
      RMD[i] = QUO[i-1] % 10;
      N[i] = RMD[i];
      if(RMD[i] == 0) {
         CHECK_0 = 1;
         CHECK = i;
      }
      DIGIT++;

      if(QUO[i]==0){
         break;
      }
   }   
}

void initialize_rmd(){
   int i;
   for(i=0 ; i<DIGIT ; i++){
      RMD[i] = N[i];
   }
   
}

int max_digit(){//RMD 배열 중 가장 큰 수의 자릿수
   int max,i,max_d;
   max = RMD[FIRST_digit];
   max_d = FIRST_digit;

   for(i=0 ; i <FIRST_digit ; i++){
      if(max<RMD[i]){
         max = RMD[i];
         max_d = i;
      }
   }
   return max_d;
}

int min_digit()
{ //RMD 배열 중 가장 작은 수의 자릿수 
   int min,i,min_d;
   
   min = RMD[FIRST_digit];
   min_d = FIRST_digit;   

   for(i=0 ; i <FIRST_digit ; i++){
      if(RMD[i] !=0){
         if(min>RMD[i]){
            min = RMD[i];
            min_d = i;
         }   
      }
   }
   
   
   return min_d;
}

void swap(int a, int b){ //RMD함수 a자릿수와 b자릿수에 있는 수 변경 5 4 3 2 1  => 4 5 3 2 1
   int temp;

   temp = RMD[a];
   RMD[a] = RMD[b];
   RMD[b] = temp;
}

int print(){
   int i, sum = 0;

   for(i=FIRST_digit; i>=0 ; i--){
      sum += (RMD[i] * pow(10.0, i));
   }

   return sum;
}

int main(){
   int t,n,i,nump;
   FILE *f;
     FILE *f2;

   f=fopen("input.txt","r+");
   f2=fopen("output.txt","w+");
   fscanf(f,"%d", &t);

   for(i=0;i<t;i++){
   
      fscanf(f,"%d", &n);
      CHECK_0 = 0; //초기화
      breaker_digit(n);
      FIRST_digit = DIGIT-1 ; // 3124에서 3의 자리수인 [3]

      fprintf(f2,"Case #%d: ", i+1);
      if(RMD[FIRST_digit] > RMD[min_digit()]){
         swap(FIRST_digit, min_digit());
      }
      nump=print();
     fprintf(f2,"%d ",nump);
      initialize_rmd();
      if(RMD[FIRST_digit] < RMD[max_digit()]){
         swap(FIRST_digit, max_digit());
      }
      nump=print();
     fprintf(f2,"%d ",nump);
      fprintf(f2,"\n");

   }
   
   return 0;
}
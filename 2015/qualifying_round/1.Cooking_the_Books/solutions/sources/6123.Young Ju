package org.sven

import scala.io.Source
import java.io.File
import java.io._

object CookingTheBooks {
  val inputPath = List("org", "sven", "real_input.txt")

  // def subFile(file: File, children: String*) = {
  //   children.foldLeft(file)((file, child) => new File(file, child))
  // }

  // def resourceAsStreamFromSrc(resourcePath: List[String]): Option[java.io.InputStream] = {
  //   val classesDir = new File(getClass.getResource(".").toURI)
  //   val projectDir = classesDir.getParentFile.getParentFile.getParentFile.getParentFile
  //   val resourceFile = subFile(projectDir, ("src" :: "main" :: "resources" :: resourcePath): _*)
  //   if (resourceFile.exists)
  //     Some(new java.io.FileInputStream(resourceFile))
  //   else
  //     None
  // }

  // def loadInput = {
  //   val wordstream = Option {
  //     getClass.getClassLoader.getResourceAsStream(inputPath.mkString("/"))
  //   } orElse {
  //     resourceAsStreamFromSrc(inputPath)
  //   } getOrElse {
  //     sys.error("Could not load word list, dictionary file not found")
  //   }
  //   try {
  //     val s = io.Source.fromInputStream(wordstream)
  //     s.getLines.toList
  //   } catch {
  //     case e: Exception =>
  //       println("Could not load word list: " + e)
  //       throw e
  //   } finally {
  //     wordstream.close()
  //   }
  // }
  // loadInput map (println)

  val stream = getClass.getClassLoader.getResourceAsStream(inputPath.mkString("/"))
  val str = Source.fromInputStream(stream).getLines.toList.tail

  val ans = ((str map (x => Solver(x).solution)).zipWithIndex map {case(e, i) => ("Case #" + (i+1) + ": " + e._1 + " " + e._2)}).mkString("\n")

  val writer = new PrintWriter(new File("/Users/LeDief/Documents/coding/scala/hackercup2015/src/main/resources/org/sven/output.txt"))
  writer.write(ans)
  writer.close()
}

case class Solver(x: String) {
  def pairs: List[(Int, Int)] =
    (for(i <- (0 until x.size); j <- (0 until x.size) if i < j) yield (i,j)).toList

  def swap(p: (Int, Int)): Int = {
    val result = x.updated(p._1, x(p._2)).updated(p._2, x(p._1))
    if(result.head == '0') x.toInt
    else result.toInt
  }

  val swappedPairs = (pairs map swap)

  def solution: (Int, Int) = {
    if(x.size == 1) (x.toInt, x.toInt)
    else (swappedPairs.min, swappedPairs.max)
  }
}


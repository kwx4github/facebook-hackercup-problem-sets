//package Qual;

import java.util.*;
import java.io.*;

public class P1 {

	public void run() throws IOException {
        in = new FastScanner(new FileInputStream("cooking_the_books.txt"));
        out = new PrintWriter(new FileOutputStream("cooking_the_books.out"));

        int tn = in.nextInt();
        for (int test = 1; test <= tn; test++) {
            String low = "", high = "";

            String n = in.next();
            int li = 0, hi = 0;
            for(int i = 0; i < n.length(); i++){
            	if(isLower(n, li, i)){
            		li = i;
            	}
            	if(isLower(n, i, hi)){
            		hi = i;
            	}
            }
            low = replaceFirstChar(n, li);
            high = replaceFirstChar(n, hi);

            out("Case #%d: %s %s\n", test, low, high);
        }

        out.close();
    }
	
	private String replaceFirstChar(String n, int i) {
		char[] tmp = n.toCharArray();
        char tc = tmp[0];
        tmp[0] = tmp[i];
        tmp[i] = tc;

        return new String(tmp);
	}

	private boolean isLower(String n, int li, int i) {
		return n.charAt(i) != '0' && (n.charAt(i) - '0') <= (n.charAt(li) - '0');
	}
	
	void out(String format, Object... args) {
        out.printf(format, args);
        System.out.printf(format, args);
    }

    FastScanner in;
    PrintWriter out;

    public static void main(String[] args) throws IOException {
        new P1().run();
    }

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(InputStream in) throws IOException {
            br = new BufferedReader(new InputStreamReader(in));
        }

        String next() {
            try {
                while (st == null || !st.hasMoreTokens()) {
                    st = new StringTokenizer(br.readLine());
                }
            } catch (IOException e) {
                System.err.println(e);
                System.exit(1);
            }
            return st.nextToken();
       }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }
}

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Arrays;

public class CookingTheBooks {

	private static final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
	private static final PrintWriter printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

	public static void main(String[] args) throws IOException {
		int testCount = Integer.parseInt(bufferedReader.readLine());
		for (int caseNumber = 1; caseNumber <= testCount; caseNumber++) {
			char[] n = bufferedReader.readLine().trim().toCharArray();
			char[] m = Arrays.copyOf(n, n.length);
			printWriter.println("Case #" + caseNumber + ": " + getSmallest(n) + " " + getLargest(m));
		}
		printWriter.flush();
	}

	private static String getLargest(char[] n) {
		if (n[0] == '0') {
			return "0";
		}

		for (int i = 0; i < n.length; i++) {
			int max = i;
			for (int j = i; j < n.length; j++) {
				if (n[j] - n[max] > 0) {
					max = j;
				}
			}
			if (max != i) {
				swap(n, max, i);
				break;
			}
		}

		return new String(n);
	}

	private static String getSmallest(char[] n) {
		if (n[0] == '0') {
			return "0";
		}

		for (int i = 0; i < n.length; i++) {
			int min = i;
			for (int j = i; j < n.length; j++) {
				if (n[j] - n[min] < 0) {
					min = j;
				}
			}
			if (min != i) {
				if (i == 0 && n[min] == '0') {
					continue;
				}
				swap(n, min, i);
				break;
			}
		}

		return new String(n);
	}

	private static void swap(char[] n, int i, int j) {
		char swapSpace = n[i];
		n[i] = n[j];
		n[j] = swapSpace;
	}
}


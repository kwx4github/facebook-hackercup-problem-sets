
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Edison
 */

public class CookingBooks {
    
    public static void Solution(int n, int value[]) throws IOException{
        long[] resultMax = new long[n];
        long[] resultMin = new long[n];
        FileWriter fw = new FileWriter("/Users/Edison/Desktop/output1.txt");
        for (int i = 0 ;i< value.length; i++){
            fw.write("Case #"+(i+1)+": ");
            System.out.println(value[i]);
            resultMax[i] = value[i];
            resultMin[i] = value[i];
            char[] array = String.valueOf(value[i]).toCharArray();
            boolean flagMax = false;
            boolean flagMin = false;
            for (int j = 0; j< array.length; j++){
                char max = array[j];
                int maxIndex = j;
                int k ;
                int minIndex = j;
                char min = array[j];
                
                
                for (k = j+1; k< array.length;k++){
                    if (array[k] >= max){
                        max = array[k];
                        maxIndex = k;
                    }
                    if (array[k]<= min){
                        if (j==0 && array[k]=='0'){
                            continue;
                        }else{
                            min = array[k];
                            minIndex = k;
                        }
                    }
                }
                if (min != array[j] && flagMin ==false){
                    char temp = array[j];
                    array[j]=array[minIndex];
                    array[minIndex] =temp;
                    resultMin[i] = Long.valueOf(new String(array));
                    array[minIndex]= array[j];
                    array[j] = temp;
                    flagMin = true;
                }
                
                if(max != array[j] && flagMax == false){
                    char temp = array[j];
                    array[j] = array[maxIndex];
                    array[maxIndex]=temp;
                    resultMax[i] = Long.valueOf(new String(array));
                    array[maxIndex] =array[j];
                    array[j] =temp;
                    flagMax = true;
                    
                }
                if (flagMax && flagMin){
                    break;
                }
            }
            fw.write(resultMax[i]+" ");
            fw.write(resultMin[i]+"\n");
            System.out.println("max: "+resultMax[i]);
            System.out.println("min: "+resultMin[i]);
        }
        fw.flush();
        fw.close();
    }
    
    
    public static void main(String[] args) throws FileNotFoundException, IOException {
        
        
        
        String fileName = "/Users/Edison/Desktop/cooking_the_books.txt";
        FileReader fReader = new FileReader(fileName);
        Scanner scan = new Scanner(fReader);
        
        int n = scan.nextInt();
        int[] value = new int[n];
        int i = 0;
        while (scan.hasNext()){
           value[i++] = scan.nextInt();
        }
        Solution(n,value);
        /*
        long[] resultMax = new long[n];
        long[] resultMin = new long[n];
        int i =0;
        while (scan.hasNext()){
           value[i++] = scan.nextInt();
        }
       
        for (i = 0; i< value.length; i++){
            int cur = value[i];
            int digit = 0;
            int maxDigit = -1;
            int minDigit = 10;
            int minIndex = -1;
            int maxIndex = -1;
            int curIndex = -1;
            Stack<Integer> digitStack = new Stack<Integer>();
            System.out.print("Valeu:"+cur+" MaxDigit:");
            while(cur > 0){
                curIndex++;
                digit = cur%10;
                cur = cur/10;
                digitStack.push(digit);
                if (digit > maxDigit){
                    maxDigit = digit;
                    maxIndex = curIndex;
                }
                if (digit < minDigit){
                    minDigit = digit;
                    minIndex = curIndex;
                }
            }
            System.out.print(maxDigit+" Maxindex:"+maxIndex);
            System.out.print(" minDigit:"+minDigit+" minIndex:"+minIndex+" TotalIndex:"+curIndex);
            System.out.println();
            
            while (!digitStack.isEmpty()){
                int curDigit = digitStack.pop();
                if (curDigit < maxDigit){
                    resultMax[i] = value[i]+(maxDigit-curDigit) * (long)Math.pow(10, curIndex)-(maxDigit-curDigit)*(long)Math.pow(10, maxIndex);
                    break;
                }
                curIndex--;
            }
        }
        for (int j = 0; j< resultMax.length;j++){
            System.out.println(resultMax[j]);
        }*/
    
    }
    
}



 /*
        380045476
        331343270
        877115755
        999999999
        342244656
        0
        155530534
        444558727
        5
        983606612
        197557112
        763307818
        315466572
        344115361
        9990999
        408886824
        32753219
        393698191
        469689830
        10
        */
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

using namespace std;

int main()
{
    FILE *f, *g;
    f = fopen("cooking_the_books.txt", "rw");
    g = fopen("output.out", "w");
//    f = stdin;
//    g = stdout;

    int n, l = -1, h = -1;
    char lc[200], hc[200];
    int slen, pom, lfreq[10], hfreq[10], mostL[10], mostR[10], lsort[10], lind[10];
    int sndMostLFstPos;
//    int sndNum;

    fscanf(f, "%d", &n);


    for(int i = 1; i <= n; i++){
        fscanf(f, "%s", lc);
        slen = strlen(lc);
        //cout << lc << "  ";

        l = -1;
        h = -1;
        sndMostLFstPos = -1;
        for(int j = 0; j < 10; j++){
            mostL[j] = -1;
            mostR[j] = -1;
        }

        for(int j = 0; j < slen; j++){
            lc[j] -= 48;
        }

        for(int j = 0; j < 10; j++) lfreq[j] = 0;
        for(int j = 0; j < slen; j++){
            lfreq[lc[j]]++;
            if(mostL[lc[j]] == -1) mostL[lc[j]] = j;
            if(sndMostLFstPos == -1 && mostL[lc[j]] == -1){
                sndMostLFstPos = j;
//                sndNum = lc[j];
            }
            mostR[lc[j]] = j;
        }
        memcpy(hfreq, lfreq, 10*sizeof(int));
        memcpy(hc, lc, 200*sizeof(char));

        /*for(int j = 0; j < 10; j++){
            for(int k = 0; k < slen; k++){
                hfreq[hc[k]]--;
                if(hc[k]<9-j && mostR[j]>k){
                    hc[mostR[9-j]] = hc[k];
                    hc[k] = 9-j;
                    h = -2;
                    break;
                }

            }
            if(h != -1) break;
        }*/

        memcpy(lind, mostL, 10*sizeof(int));
        //for(int j = 0; j < 9; j++) cout <<  lind[j] << " ";
        for(int j = 0; j < 10; j++) lsort[j] = j;
        for(int j = 0; j < 10; j++){
            for(int k = 0; k < 9; k++){
                if(lind[k] > lind[k+1]){
                   pom = lsort[k];
                   lsort[k] = lsort[k+1];
                   lsort[k+1] = pom;

                   pom = lind[k];
                   lind[k] = lind[k+1];
                   lind[k+1] = pom;
                }
            }
        }

        for(int j = 0; j < 10; j++){
            if(lind[j] == -1) continue;
            for(int k = 9; k > lsort[j]; k--){
                if(mostR[k] > lind[j]){
                    hc[mostR[k]] = lsort[j];
                    hc[lind[j]] = k;
                    //cout << " k je " << k << " a " << lsort[j] << " ";
//                    pom = mostR[k];
//                    mostR[k] = lsort[j];
//                    lsort[j] = pom;

                    h = -2;
                    break;
                }
            }
            if(h != -1) break;
        }

        /*for(int j = 0; j < 10; j++){
            if(lind[j] == -1) continue;
            for(int k = 0; k < lsort[j]; k++){
                if(mostR[k] > lind[j]){
                    lc[mostR[k]] = lsort[j];
                    lc[lind[j]] = k;
//                    pom = mostR[k];
//                    mostR[k] = lsort[j];
//                    lsort[j] = pom;

                    l = -2;
                    break;
                }
            }
            if(l != -1) break;
        }*/

        for(int j = 0; j < 10; j++){
            if(lind[j] == -1) continue;
            for(int k = 0; k < lsort[j]; k++){
                if(mostR[k] > lind[j]){
                    if(k == 0) continue;
                    lc[mostR[k]] = lsort[j];
                    lc[lind[j]] = k;
    //                    pom = mostR[k];
    //                    mostR[k] = lsort[j];
    //                    lsort[j] = pom;

                    l = -2;
                    break;
                }
            }
            break;
        }



        if(l != -2){
            for(int j = 0; j < 10; j++){
                if(lind[j] == -1) continue;
                if(sndMostLFstPos != -1) lind[j] = sndMostLFstPos;
                else lind[j] = -1;
                break;
            }

            for(int j = 0; j < 10; j++){
                for(int k = 0; k < 9; k++){
                    if(lind[k] > lind[k+1]){
                       pom = lsort[k];
                       lsort[k] = lsort[k+1];
                       lsort[k+1] = pom;

                       pom = lind[k];
                       lind[k] = lind[k+1];
                       lind[k+1] = pom;
                    }
                }
            }

            for(int j = 0; j < 10; j++){
                if(lind[j] == -1) continue;
                for(int k = 0; k < lsort[j]; k++){
                    if(mostR[k] > lind[j]){
                        lc[mostR[k]] = lsort[j];
                        lc[lind[j]] = k;
    //                    pom = mostR[k];
    //                    mostR[k] = lsort[j];
    //                    lsort[j] = pom;

                        l = -2;
                        break;
                    }
                }
                if(l != -1) break;
            }
        }


        //l = atoi(lc);
        //h = atoi(hc);
        fprintf(g, "Case #%d: ", i);
        for(int j = 0; j < slen; j++) fprintf(g, "%c", lc[j] + 48);
        fprintf(g, " ");
        for(int j = 0; j < slen; j++) fprintf(g, "%c", hc[j] + 48);
        fprintf(g, "\n");
    }

    fclose(f);
    fclose(g);

    return 0;
}

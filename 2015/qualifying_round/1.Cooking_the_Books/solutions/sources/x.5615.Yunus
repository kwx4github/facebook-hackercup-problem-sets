import copy

# def findMaxNumber(number):

def findSwapForMin(numberString):
   zeroAllowed = False
   for i in range(0, len(numberString)):
      minFoundSoFar = int(numberString[i], 10)
      indexMin = i
      for j in range(i+1, len(numberString)):
         asInt = int(numberString[j], 10)
         if(asInt < minFoundSoFar):
            if(asInt == 0 and not zeroAllowed):
               continue
            minFoundSoFar = asInt;
            indexMin = j;
      if(minFoundSoFar < int(numberString[i], 10)):
         return (i, indexMin)#swap i with j
      zeroAllowed = True;
   return (0, 0)

def findSwapForMax(numberString):
   for i in range(0, len(numberString)):
      maxFoundSoFar = int(numberString[i], 10)
      indexMax = i
      for j in range(i+1, len(numberString)):
         asInt = int(numberString[j], 10)
         if(asInt > maxFoundSoFar):
            maxFoundSoFar = asInt;
            indexMax = j;
      if(maxFoundSoFar > int(numberString[i], 10)):
         return (i, indexMax)#swap i with j
   return (0, 0)


inFile = open('input_real.txt', 'r')
outfile = open('output.txt', 'w')

num = int(inFile.readline(), 10)
# print num
numbers = [];
for i in range(0, num):
   numbers.append(list(inFile.readline().strip('\n')))

for i in range(0, len(numbers)):
   number = numbers[i]
   swapIndex = findSwapForMax(number)
   # print 'max swap ' + str(swapIndex)
   biggerNumber = copy.deepcopy(number)
   biggerNumber[swapIndex[0]] = number[swapIndex[1]]
   biggerNumber[swapIndex[1]] = number[swapIndex[0]]
   biggerNumber = ''.join(biggerNumber)

   swapIndex = findSwapForMin(number)
   # print 'min swap ' + str(swapIndex)
   smallerNumber = copy.deepcopy(number)
   smallerNumber[swapIndex[0]] = number[swapIndex[1]]
   smallerNumber[swapIndex[1]] = number[swapIndex[0]]
   smallerNumber = ''.join(smallerNumber)
   output = 'Case #'+str(i+1)+': '+ smallerNumber+' '+biggerNumber+'\n'
   # print output
   outfile.write(output)


# print numbers
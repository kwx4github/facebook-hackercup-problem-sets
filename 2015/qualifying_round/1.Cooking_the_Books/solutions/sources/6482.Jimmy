#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>

using namespace std;

string findMinAndMax(string input);

int main(){
	
	int lines;
	int input;
	vector<int> vi;
	vector<string> vs;
	
	ifstream fin;
	fin.open("Input.txt");

	// read in number of lines in file
	fin >> lines;

	cout << "Numbers in file: " << lines << endl;
	cout << "Input numbers:" << endl;

	// read input numbers and push into integer vector
	for (int i = 0; i < lines; i++){
		fin >> input;
		vi.push_back(input);
	}
	
	// convert integers to strings and push into a new vector
	for (int i = 0; i < vi.size(); i++){
		cout << vi[i] << endl;
		
		ostringstream os;
		os << vi[i];
		string num = os.str();
		vs.push_back(num);
	}

	cout << "---END OF FILE---" << endl << endl;
	
	//// Prints formatted output to Output.txt by looping through string vector
	ofstream fout;
	fout.open("Output.txt");
	for (int i = 0; i < vs.size(); i++){
		fout << "Case #" << i + 1 << ": " << findMinAndMax(vs[i]) << endl;
	}
	fout.close();
	/////////////////////////////////////////

	cout << "Output has been generated to file Output.txt. Operation complete." << endl;
	cout << endl << endl;
	system("PAUSE");
}

string findMinAndMax(string input){
	
	vector<string> v;
	char t1 = ' ';
	char t2 = ' ';
	string max = "0";
	string min = "999999999";

	if (input == "0"){
		return "0	0";
	}

	// find every possible resulting string from any combination of single swap operations
	for (int i = 0; i < input.length(); i++){
		for (int j = 0; j < input.length(); j++){
			string temp = input;
			t1 = temp.at(i);
			t2 = temp.at(j);
			temp.at(j) = t1;
			temp.at(i) = t2;
			v.push_back(temp);
		}
	}

	for (int k = 0; k < v.size(); k++){
	
		char minDigit = '9';
		for (int j = 0; j < v[k].length(); j++){
			if (v[k].at(j) != '0' && v[k].at(j) < minDigit){
				minDigit = v[k].at(j);
			}
		}

		if (v[k] > max){
			max = v[k];
		}
		if (v[k] < min && v[k].at(0) == minDigit){
			min = v[k];
		}
	}
	
	return min + " " + max;
}
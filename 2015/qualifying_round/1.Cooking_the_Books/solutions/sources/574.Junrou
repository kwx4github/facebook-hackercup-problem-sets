module A where

import Control.Applicative
import Control.Monad

solveA :: IO ()
solveA = do
  n <- read <$> getLine
  forM_ [1..n] (\x -> do
    v <- read <$> getLine
    let (a, b) = calcMaxMin v
    putStrLn $ "Case #" ++ (show x) ++ ": " ++ (show a) ++ " " ++ (show b))

calcMaxMin :: Int -> (Int, Int)
calcMaxMin n = (minimum candidates, maximum candidates)
  where candidates = enumCandidate n

enumCandidate :: Int -> [Int]
enumCandidate n = filter (\v -> len == (length $ show v))
                         [if x == y then n else swapDigits n (x, y) | x <- [0..(len-1)], y <- [0..(len-1)]]
  where len = length $ show n

swapDigits :: Int -> (Int, Int) -> Int
swapDigits n (x, y) = read $ pre ++ [(str !! y)] ++ mid ++ [(str !! x)] ++ suf
  where str = show n
        pre = take x str
        mid = drop (x+1) $ take y str
        suf = drop (y+1) str
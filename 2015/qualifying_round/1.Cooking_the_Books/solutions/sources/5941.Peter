package me.pstakoun.facebookhackercup.qualificationround.cookingthebooks;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Main
{
	static FileReader fr;
	static FileWriter fw;
	static BufferedReader reader;
	static BufferedWriter writer;
	int[] number;
	
	public static void main(String[] args)
	{
		Main main = new Main();
	}
	
	public Main()
	{
		try {
			getInput();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		try {
			fw = new FileWriter("output.txt");
		} catch (IOException e) {
			e.printStackTrace();
		}
		writer = new BufferedWriter(fw);
		
		for (int i = 0; i < number.length; i++) {
			String small = getSmallest(number[i]);
			String large = getLargest(number[i]);
			try {
				writer.write("Case #" + (i+1) + ": " + small + " " + large);
				writer.newLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		try {
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private String getSmallest(int n)
	{
		int[] d = getDigits(n);
		int l = d.length;
		int[] smallest = new int[l];
		int[] smallestIndex = new int[l];
		
		System.arraycopy(d, 0, smallest, 0, l);
		for (int i = 0; i < l; i++) {
			smallestIndex[i] = i;
		}
		
		for (int i = 0; i < l; i++) {
			for (int j = 1; j < (l-i); j++) {
				if (smallest[j-1] > smallest[j]) {
                    int temp = smallest[j-1];
                    smallest[j-1] = smallest[j];
                    smallest[j] = temp;
                    int temp2 = smallestIndex[j-1];
                    smallestIndex[j-1] = smallestIndex[j];
                    smallestIndex[j] = temp2;
				}
			}
		}
		
		for (int i = 0; i < l; i++) {
			for (int j = 0; j < l; j++) {
				if (smallest[j] >= d[i]) { break; }
				if (i == 0 && smallest[j] == 0) { continue; }
				if (smallest[j] == smallest[j+1]) { continue; }
				
				int temp = d[i];
				d[i] = smallest[j];
				d[smallestIndex[j]] = temp;
				if (Integer.parseInt(makeInt(d)) > n) {
                	return (Integer.toString(n));
                }
				return makeInt(d);
			}
		}
		return makeInt(d);
	}
	
	private String getLargest(int n)
	{
		int[] d = getDigits(n);
		int l = d.length;
		int[] largest = new int[l];
		int[] largestIndex = new int[l];
		
		System.arraycopy(d, 0, largest, 0, l);
		for (int i = 0; i < l; i++) {
			largestIndex[i] = i;
		}
		
		for (int i = 0; i < l; i++) {
			for (int j = 1; j < (l-i); j++) {
				if (largest[j-1] < largest[j]) {
                    int temp = largest[j-1];
                    largest[j-1] = largest[j];
                    largest[j] = temp;
                    int temp2 = largestIndex[j-1];
                    largestIndex[j-1] = largestIndex[j];
                    largestIndex[j] = temp2;
				}
			}
		}
		

		for (int i = 0; i < l; i++) {
			if (!(largestIndex[i] == i)) {
				int j = i;
				while (j < largest.length-1 && largest[j] == largest[j+1]) { j++; }
				int temp = d[i];
                d[i] = largest[j];
                d[largestIndex[j]] = temp;
                if (Integer.parseInt(makeInt(d)) < n) {
                	return (Integer.toString(n));
                }
                return makeInt(d);
			}
		}
		return makeInt(d);
	}
	
	private int[] getDigits(int n)
	{
		char[] num = String.valueOf(n).toCharArray();
		int[] digits = new int[num.length];
		
		int i = 0;
		for (char c : num) {
			digits[i] = Integer.parseInt(String.valueOf(c));
			i++;
		}
		
		return digits;
	}
	
	private String makeInt(int[] digits)
	{
		String num = "";
		for (int i = 0; i < digits.length; i++) {
			num += String.valueOf(digits[i]);
		}
		return num;
	}
	
	private void getInput() throws IOException
	{
		fr = new FileReader("input.txt");
		reader = new BufferedReader(fr);
		
		int l = Integer.parseInt(reader.readLine());
		number = new int[l];
		
		for (int i = 0; i < l; i++) {
			number[i] = Integer.parseInt(reader.readLine());
		}
	}

}

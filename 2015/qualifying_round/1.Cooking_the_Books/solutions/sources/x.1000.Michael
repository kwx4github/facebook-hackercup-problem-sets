require 'pp'

# returns nil if empty line
def input_line
  # if not defined, set to nil and read from stdinput
  # @input_filename ||= 'cooking_the_books_example_input.txt'
  @input_filename ||= 'cooking_the_books.txt'

  if @input_filename
    @lines ||= File.read(@input_filename).each_line.map(&:chomp)
    # read from file line by line
    @lines.shift
  else
    # read from stdin
    $stdin.read
  end
end

def letter?(char)
  char =~ /[a-z]/
end

def min_without_zero(digits)
  min = nil
  min_idx = -1
  digits.each_with_index do |d, idx|
    if (d > 0) && (min.nil? || d < min)
      min = d
      min_idx = idx
    end
  end
  [min, min_idx]
end

def find_extreme(numstr)
  if numstr == "0"
    [0, 0]
  else
    digits = numstr.chars.map(&:to_i)
    num_digits = digits.size

    min = max = numstr
    if num_digits <= 1
      [min, max]
    else
      # find min
      min_digits = digits.clone
      (0..num_digits-2).each do |idx|
        current_digit = min_digits[idx]
        if (idx == 0)
          min_with_idx = min_without_zero(min_digits[1..num_digits-1])
        else
          min_with_idx = min_digits[idx+1..num_digits-1].each_with_index.min
        end
        if !min_with_idx[0].nil? && current_digit > min_with_idx[0]
          min_digits[idx] = min_with_idx[0]
          min_digits[min_with_idx[1]+idx+1] = current_digit
          min = min_digits.map(&:to_s).join
          break
        end
      end

      # find max
      (0..num_digits-2).each do |idx|
        current_digit = digits[idx]
        max_with_idx = digits[idx+1..num_digits-1].each_with_index.max
        if current_digit < max_with_idx[0]
          digits[idx] = max_with_idx[0]
          digits[max_with_idx[1]+idx+1] = current_digit
          max = digits.map(&:to_s).join
          break
        end
      end

      [min, max]
    end
  end
end

num_cases = input_line.to_i

(1..num_cases).each do |case_num|
  (small, large) = find_extreme(input_line)
  puts "Case ##{case_num}: #{small} #{large}"
end
namespace fb
{
    using System.IO;
    using System;
    using System.Collections.Generic;

    class main
    {
        public static int[] digitArr(int n)
        {
            if (n == 0) return new int[1] { 0 };

            var digits = new List<int>();

            for (; n != 0; n /= 10)
                digits.Add(n % 10);

            var arr = digits.ToArray();
            Array.Reverse(arr);
            return arr;
        }

        public static int arrInt(int[] n)
        {
            int tmp = 0;

            for (int i = 0; i < n.Length; i++)
                tmp = tmp * 10 + n[i];

            return tmp;
        }


        static int[] lines = new int[6];

        static void Main()
        {
            string pattern;
            int rowNumber = 0;

            // Read in every line in the file.
            using (StreamReader reader = new StreamReader("../../cooking_the_books.txt"))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    Array.Resize(ref lines, rowNumber + 1);
                    lines[rowNumber] = int.Parse(line);
                    rowNumber++;
                }
            }
            // Loop Through Read Lines
            int lineNum = 0;
            int endOfPic = 0;

            for (int i = 0; i < Convert.ToInt32(lines[0]); i++)
            {
                lineNum++;
                Console.Write("Case #" + (i + 1) + ": " + small(lines[lineNum]) + " " + large(lines[lineNum]));
                Console.WriteLine();
            }
            Console.ReadLine();
        }

        static int small(int input)
        {
            int[] intArr = digitArr(input);

            int highi;
            int highv;

            int lowi;
            int lowv;

            for (int i = 0; i < intArr.Length; i++)
            {
                highi = i;
                highv = intArr[i];

                lowi = i;
                lowv = intArr[i];

                for (int j = i + 1; j < intArr.Length; j++)
                {
                    if (intArr[j] <= lowv)
                    {
                        if (!(i == 0 & intArr[j] == 0))
                        {
                            lowi = j;
                            lowv = intArr[j];
                        }
                    }
                }

                if (highv != lowv)
                {
                    intArr[highi] = lowv;
                    intArr[lowi] = highv;
                    return arrInt(intArr);
                }
            }
            return arrInt(intArr);
        }

        static int large(int input)
        {
            int[] intArr = digitArr(input);

            int highi;
            int highv;

            int lowi;
            int lowv;

            for (int i = 0; i < intArr.Length; i++)
            {
                highi = i;
                highv = intArr[i];

                lowi = i;
                lowv = intArr[i];

                for (int j = i + 1; j < intArr.Length; j++)
                {
                    if (intArr[j] > lowv)
                    {
                        if (!(i == 0 & intArr[j] == 0))
                        {
                            lowi = j;
                            lowv = intArr[j];
                        }
                    }
                }

                if (highv != lowv)
                {
                    intArr[highi] = lowv;
                    intArr[lowi] = highv;
                    return arrInt(intArr);
                }
            }
            return arrInt(intArr);
        }
    }
}

#include <cstdio>
#include <cstring>

using namespace std;

void findMinimum (char *s, int sn) {
  // Try to get the rightmost lowest number (> 0), that is lower than the one in the starting position
  // If impossible, move the starting position one to the right
  for (int i = 0; i < sn; ++i) {
    char X = s[i];
    int pos = i;
    for (int j = i+1; j < sn; ++j) {
      if (s[j] == '0' && i == 0)
	continue;
      if (pos == i) {
	if (s[j] < X) {
	  X = s[j];
	  pos = j;
	}
      }
      else {
	if (s[j] <= X) {
	  X = s[j];
	  pos = j;
	}
      }
    }
    // There's something to swap!
    if (pos != i) {
      char aux = s[i];
      s[i] = s[pos];
      s[pos] = aux;
      return;
    }
    // If not, do another round
  }   
}


void findMaximum (char *s, int sn) {
  // Try to get the rightmost greatest number (> 0), that is greater than the one in the starting position
  // If impossible, move the starting position one to the right
  for (int i = 0; i < sn; ++i) {
    char X = s[i];
    int pos = i;
    for (int j = i+1; j < sn; ++j) {
      if (pos == i) {
	if (s[j] > X) {
	  X = s[j];
	  pos = j;
	}
      }
      else {
	if (s[j] >= X) {
	  X = s[j];
	  pos = j;
	}
      }
    }
    // There's something to swap!
    if (pos != i) {
      char aux = s[i];
      s[i] = s[pos];
      s[pos] = aux;
      return;
    }
    // If not, do another round
  }   
}


int main () {

  int T;  // # of testcases
  scanf ("%d", &T);

  for (int t = 1; t <= T; ++t) {
    char N [25];
    scanf ("%s", N);
    int sn = strlen (N);

    // If there is just one digit, there's nothing to do
    if (sn == 1)  {
      printf ("Case #%d: %s %s\n", t, N, N);
      continue;
    }
    
    char minimum [25];
    strcpy (minimum, N);
    findMinimum (minimum, sn);

    char maximum[25];
    strcpy (maximum, N);
    findMaximum (maximum, sn);

    printf ("Case #%d: %s %s\n", t, minimum, maximum);
  }
  
  return 0;
}

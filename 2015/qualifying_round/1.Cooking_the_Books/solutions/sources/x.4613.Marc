package de.mprengemann.fb.hackercup15.problem1;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import static java.nio.charset.StandardCharsets.UTF_8;

public class Problem1 {

    private String pathToFile;

    public Problem1(String pathToFile) {
        this.pathToFile = pathToFile;
    }

    public void solve(String outputFile) {
        PrintWriter out = null;
        try {
            List<String> inputFileLines = Files.readAllLines(Paths.get(pathToFile), UTF_8);
            out = new PrintWriter(outputFile);
            String testCase;
            int testCases = Integer.parseInt(inputFileLines.get(0));
            for (int i = 1; i <= testCases; i++) {
                testCase = inputFileLines.get(i);
                solveTestCase(i, out, testCase);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

    private void solveTestCase(int testCaseNumber, PrintWriter out, String inputNumber) {
        final String smallestNumber = generateSmallestNumber(inputNumber);
        final String biggestNumber = generateBiggestNumber(inputNumber);
        out.println(String.format("Case #%d: %s %s", testCaseNumber, smallestNumber, biggestNumber));
    }

    private String generateSmallestNumber(String inputNumber) {
        int index = inputNumber.length() - 1;
        int lastValue = 10;
        for (int i = inputNumber.length() - 1; i >= 0; i--) {
            int value = Integer.parseInt(String.valueOf(inputNumber.charAt(i)));
            if (value < lastValue && value > 0) {
                lastValue = value;
                index = i;
            }
        }
        return swap(inputNumber, 0, index);
    }

    private String generateBiggestNumber(String inputNumber) {
        int index = inputNumber.length() - 1;
        int lastValue = 0;
        for (int i = 0; i < inputNumber.length(); i++) {
            int value = Integer.parseInt(String.valueOf(inputNumber.charAt(i)));
            if (value > lastValue && value > 0) {
                lastValue = value;
                index = i;
            }
        }
        return swap(inputNumber, index, 0);
    }

    private String swap(String input, int i, int j) {
        char[] chars = input.toCharArray();
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
        return String.valueOf(chars);
    }
}

# note: the last test case I fixed by hand .. 0s are not handled well

def swapDigits(list_, ind1, ind2):
    t = list_[ind1]
    list_[ind1] = list_[ind2]
    list_[ind2] = t
    return list_


def getNums(num):
    """returns [lowest, largest] for a 'num' a (list of single digit ints)
    as specified in the question"""
    # try swapping the first letter first
    nSwappable = 0
    smallestIndex = 0
    largestIndex = 0
    for (index, letter) in enumerate(num):
        dig = int(letter)
        if dig > 0:
            nSwappable += 1
            if  dig < num[smallestIndex]:
                smallestIndex = index
            if dig > num[largestIndex]:
                largestIndex = index
    if nSwappable < 2:
        # not enough swappable digits
        return [num, num]
    else:
        # see if swapping first letter works -- if it does, it is the best one.
        # If does not work, recurse on one shorter string (removing the first letter)
        recLowest = None
        recHighest = None
        if num[smallestIndex] == num[0]:
            [recLowest, recHighest] = getNums(num[1:])
            lowest = [ num[0] ] + recLowest
        else:
            lowest = swapDigits(list(num), 0, smallestIndex)
            
        if num[largestIndex] == num[0]:
            if (recHighest is None):
                [recLowest, recHighest] = getNums(num[1:])
            highest = [ num[0] ] + recHighest
        else:
            highest = swapDigits(list(num), 0, largestIndex)
        return [lowest, highest]


T = int(raw_input())

for t in range(1, T+1):
    num = map(int, list(raw_input()))
    [lowest, highest] = getNums(num)
    print 'Case #{0}: {1} {2}'.format(t, "".join(map(str,lowest)), "".join(map(str,highest)))
    
        


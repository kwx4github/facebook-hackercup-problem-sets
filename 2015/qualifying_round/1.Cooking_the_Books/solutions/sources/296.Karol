#include <string>
#include <iostream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <cassert>
#include <stack>
using namespace std;

/*PREWRITTEN CODE BEGINS HERE*/
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define SIZE(x) ( (int)((x).size()) )
#define CS c_str()
#define EL printf("\n")

#define ALL(v) (v).begin(), (v).end()
#define REP(i,n) for(int i=0,_n=(n); i<_n; ++i)
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; ++i)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; --i)
#define VAR(a,b) __typeof (b) a=b
#define FORE(i,a)  for(VAR(i,a.begin()); i!=a.end(); ++i)

typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long long> VLL; 
typedef vector<vector<int> > VVI;
typedef vector<vector<string> > VVS;
/*PREWRITTEN CODE ENDS HERE*/
inline int RI() { int xx; scanf("%d",&xx); return xx; }
typedef long double LD;
const int INF = 1010000000;
const double EPS = 1e-9;
/*SOLUTION BEGINS HERE*/

int value(const vector<int>& vec) {
	int ret = 0;
	REP(i, SIZE(vec)) {
		ret = 10 * ret + vec[i];
	}
	return ret;
}

void solve(void)
{
	int N;
	scanf("%d", &N);
	int mn = N, mx = N;
	if (N < 10) { printf("%d %d\n", mn, mx); return; }
	
	stack<int> st;
	while (N > 0) {
		st.push(N % 10);
		N /= 10;
	}
	vector<int> digits;
	while (!st.empty()) {
		digits.push_back(st.top());
		st.pop();
	}
	
	assert(SIZE(digits) > 0);
	FOR(i, 0, SIZE(digits)-1) FOR(j, i+1, SIZE(digits)-1) {
		if (digits[i] != digits[j] && (i > 0 || digits[j] != 0)) {
			vector<int> vec(digits);
			swap(vec[i], vec[j]);
			int val = value(vec);
			mx = max(val, mx);
			mn = min(val, mn);
		}
	}

	printf("%d %d\n", mn, mx);
}

int main(void)
{
	int T, C = 1;
	scanf("%d", &T);
	while(T--) { printf("Case #%d: ",C++); solve(); }
	return (0);
}

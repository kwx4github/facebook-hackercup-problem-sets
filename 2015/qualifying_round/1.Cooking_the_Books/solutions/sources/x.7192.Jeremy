#!/usr/bin/ruby

# ruby 2.1.5

# Largest: Search for the highest digit, from the _right_ (since it will be decreasing)
# Smallest: lowest digit, from the _right_ (will increase, minimize impact
#
# 31521
# 1?52?
# 11523 or 13521
#
# 31525
# 51325 vs 51523

# (low only)
# exclude 0 from the swap
# So a leading 1 can be ignored
# In which case, perform the swap from the 2nd digit but _don't_ ignore 0s
#
# Leading 9 -> can't do anything
# it's actually not 9, it's _is there something higher than the lead in the string_
# So... scan right, look for something higher

def debug(x)
    puts x
end

def maximize(number)
    return number if number.size < 2
    (lead, *rest) = number
    highest = rest.max
    if highest <= lead
        return [lead] + maximize(rest)
    end

    # Swap to the highest rightmost number
    loc = rest.rindex(highest)
    rest[loc] = lead
    ([highest] + rest)
end

# zero: Allow zero swaps (i.e. is leading digit)
def minimize(number, zero = false)
    return number if number.size < 2
    (lead, *rest) = number
    lowest = rest.min
    if lowest >= lead || (zero && lowest == '0')
        return [lead] + minimize(rest)
    end

    # Swap to the lowest rightmost number
    loc = rest.rindex(lowest)
    rest[loc] = lead
    ([lowest] + rest)
end

count = STDIN.readline().to_i # Case count

count.times do |x|
    line = STDIN.readline().chomp()
    number = line.chars
    puts "Case ##{x+1}: #{minimize(number, true).join('')} #{maximize(number).join('')}"
end


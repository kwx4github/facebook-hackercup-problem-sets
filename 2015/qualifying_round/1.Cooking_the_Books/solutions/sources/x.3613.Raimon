import java.io.File;
import java.util.HashMap;
import java.util.Scanner;
import java.util.TreeSet;
 
public class Cooking {
    public static void main(String args[]) {
        new Cooking().solveAll();
    }
     
    public void solveAll() {
    	Scanner sc = new Scanner(System.in);
		int T = sc.nextInt(); sc.nextLine();
		
		for(int i = 0; i < T; i++) {
			String number = sc.nextLine();
			System.out.println("Case #" + (i + 1) + ":" + getMinNumber(number) + " " + getMaxNumber(number));
		}
    }
    
    private static String getMaxNumber(String number) {
    	if(number.length() == 1) return number;
    	
    	char[] charArray = number.toCharArray();
    	
    	int maxDigitPos = -1;
    	int maxDigit = -1;
    	
    	for(int i = charArray.length - 1; i >= 0; i--) {
    		char c = charArray[i];
    		if(c > maxDigit && c != '0') {
    			maxDigit = c;
    			maxDigitPos = i;
    		}
    	}
    	
    	if(maxDigitPos != -1) {
    		int index = 0;
    		while(index < charArray.length && charArray[index] == maxDigit) index++;
    		if(index < charArray.length) {
    			if(index > 0) index--;
		    	char tmp = charArray[maxDigitPos];
		    	charArray[maxDigitPos] = charArray[index];
		    	charArray[index] = tmp;
    		}
    	}
    	return new String(charArray);
    }
    
    private static String getMinNumber(String number) {
    	if(number.length() == 1) return number;
    	
    	char[] charArray = number.toCharArray();
    	
    	int minDigitPos = -1;
    	int minDigit = Integer.MAX_VALUE;
    	
    	for(int i = charArray.length - 1; i >= 0; i--) {
    		char c = charArray[i];
    		if(c < minDigit && c != '0') {
    			minDigit = c;
    			minDigitPos = i;
    		}
    	}
    	
    	if(minDigitPos != -1) {
			int index = 0;
			while(index < charArray.length && charArray[index] == minDigit) index++;
			if(index < charArray.length) {
				if(index > 0) index--;
				char tmp = charArray[minDigitPos];
				charArray[minDigitPos] = charArray[index];
				charArray[index] = tmp;
			}
    	}
    	
    	return new String(charArray);
    }
}
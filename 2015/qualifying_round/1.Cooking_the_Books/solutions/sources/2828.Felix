#include <cstdio>
#include <vector>

int main(void) {
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    int N;
    scanf("%d", &N);
    // get the digits in the number and their weights
    int temp_N = N;
    int weight = 1;
    std::vector<int> digits, weights;
    while (temp_N) {
      digits.push_back(temp_N % 10);
      weights.push_back(weight);
      temp_N /= 10;
      weight *= 10;
    }
    int len = digits.size(); // number of digits
    // get the smallest number
    int min_num = N;
    for (int i = len-1; i >= 0; --i) {
      int min_digit = digits[i];
      int min_weight = weights[i];
      for (int j = i-1; j >= 0; --j) {
        if (digits[j] <= min_digit) {
          if ( (i == len-1 && digits[j] != 0) ||
               (i < len-1) ) {
            min_digit = digits[j];
            min_weight = weights[j];
          }
        }
      }
      if (min_digit < digits[i]) {
        min_num = N - digits[i]*weights[i] - min_digit*min_weight
          + min_digit*weights[i] + digits[i]*min_weight;
        break;
      }
    }
    // get the biggest number
    int max_num = N;
    for (int i = len-1; i >= 0; --i) {
      int max_digit = digits[i];
      int max_weight = weights[i];
      for (int j = i-1; j >= 0; --j) {
        if (digits[j] >= max_digit) {
          max_digit = digits[j];
          max_weight = weights[j];
        }
      }
      if (max_digit > digits[i]) {
        max_num = N - digits[i]*weights[i] - max_digit*max_weight
          + max_digit*weights[i] + digits[i]*max_weight;
        break;
      }
    }
    printf("Case #%d: %d %d\n", t, min_num, max_num);
  }
  return 0;
}

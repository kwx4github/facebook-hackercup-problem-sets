#include<iostream>
#include<string>
#include<vector>
#include<stack>
#include<algorithm>
#include <map>
#include <queue>
#include <string.h>
#include <fstream>
#include <cmath>
#include <set>
#include <limits.h>
using namespace std;

vector<int> getvec(long long n)
{
	vector<int> v;
	while (n >= 0)
	{
		v.push_back(n % 10);
		n /= 10;

		if (n == 0)
			break;
	}

	reverse(v.begin(), v.end());
	return v;

}

long long getnum(vector<int> v)
{
	long long r = 0;
	for (int i = 0; i < v.size(); i++)
	{
		r *= 10;
		r += v[i];
		
	}
	return r;
}

int main(void)
{

	ofstream cout("out.txt");
	ifstream cin("cooking_the_books.txt");

	int t;
	cin >> t;

	for (int ti = 1; ti <= t; ti++)
	{
		long long n;
		cin >> n;

		vector<int> vec = getvec(n);
		vector<int> small = vec;
		vector<int> large = vec;

		bool smallFound = false;
		bool largeFound = false;

		for (int i = 0; i < vec.size(); i++)
		{
			int mn = vec[i];
			int mnj = -1;
			int mx = vec[i];
			int mxj = -1;

			for (int j = i + 1; j < vec.size(); j++)
			{
				if (vec[j] != 0 && vec[j] < mn && !smallFound)
				{
					mnj = j;
					mn = min(mn, vec[j]);
				}
				if (vec[j] != 0 && vec[j] > mx && !largeFound)
				{
					mxj = j;
					mx = max(mx, vec[j]);
				}
					
			}
			if (mn != vec[i] && !smallFound)
			{
				int t = small[i];
				small[i] = small[mnj];
				small[mnj] = t;

				smallFound = true;
				
			}
			if (mx != vec[i] && !largeFound)
			{
				int t = large[i];
				large[i] = large[mxj];
				large[mxj] = t;
				largeFound = true;
			
			}

		}

		cout << "Case #" << ti << ": " << getnum(small) << " " << getnum(large) << endl;

	}
	

}
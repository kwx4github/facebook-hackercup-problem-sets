package main;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Driver {
	
	public static void main(String[] args) throws FileNotFoundException {
		
		List<String> stringList = new ArrayList<String>();
		
		FileReader cookbook_input = new FileReader("cooking_the_books_input.txt");
		Scanner scan = new Scanner(cookbook_input);
		int testCases = Integer.parseInt(scan.nextLine());
		
		while(scan.hasNextLine()) {
			String line = scan.nextLine();
			stringList.add(line);
		}
		
		/**
		 * Let's do this.
		 */
		for(int k = 0; k < testCases; k++) {
				
			int length = stringList.get(k).length();
			int[] temp = new int[length];
			int[] temp2 = new int[length];
			
			// Fill array
			for(int i = 0; i < length; i++) {
				temp[i] = Character.getNumericValue(stringList.get(k).charAt(i));
				temp2[i] = Character.getNumericValue(stringList.get(k).charAt(i));
			}
			
			int maxPos = 0;
			int minPos = 0;
			int max = 0;
			int min = Character.getNumericValue(stringList.get(k).charAt(0));

			// get max position
			for(int n = 0; n < length; n++) {
				if(temp[n] >= max) {
					max = temp[n];
					maxPos = n;
				}
			}
			
			// get min position
			for(int n = 0; n < length; n++) {
				if(temp2[n] <= min) {
					min = temp2[n];
					minPos = n;
				}
			}
			
			int[] minArray = swapMin(temp2, minPos, min);
			int[] maxArray = swap(temp, maxPos);
			
			print(minArray, maxArray, k+1);
		}	
	}
		
	/**
	 * Swap Functions
	 */
	public static int[] swap(int[] array, int swapPosition) {
		int temp = array[0];
		array[0] = array[swapPosition];
		array[swapPosition] = temp;
		return array;
	}
	
	public static int[] swapMin(int[] array, int minPosition, int minValue) {
		int temp = 0;
		if(minValue == 0) {
			if(array.length <= 2) {
				return array;
			}
			int secondLowest = array[0];
			int secondLowestPos = 0;
			int thirdLowest = 9; //largest single digit to compare against
			int thirdLowestPos = 0;
			for(int i = 0; i < array.length; i++) {
				if(array[i] <= secondLowest && array[i] != 0) {
					secondLowest = array[i];
					secondLowestPos = i;
				}
			}
			
			if(array[0] == secondLowest) {
				for(int i = 0; i < array.length; i++) {
					if(array[i] <= thirdLowest && array[i] > secondLowest) {
						thirdLowest = array[i];
						thirdLowestPos = i;
					}
				}
				for(int k = 1; k < array.length; k++) {
					if(array[k] != 0) {
						temp = array[k];
						array[k] = minValue;
						array[minPosition] = temp;
						return array;
					}
				}
			}
			temp = array[0];
			array[0] = array[secondLowestPos];
			array[secondLowestPos] = temp;
		}
		else {
			temp = array[0];
			array[0] = array[minPosition];
			array[minPosition] = temp;
			return array;
		}
		return array;
	}
	
	/**
	 * Print function
	 */
	public static void print(int[] minArray, int[] maxArray, int currentIteration) {
		int length = minArray.length;
		System.out.print("Case #" + currentIteration + ": ");
		for(int k = 0; k < length; k++) {
			System.out.print(minArray[k]);
		}
		System.out.print(" ");
		for(int k = 0; k < length; k++) {
			System.out.print(maxArray[k]);
		}
		System.out.println("");
	}		
}

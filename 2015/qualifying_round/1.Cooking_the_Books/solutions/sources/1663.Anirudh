import sys

def find_lowest(num, digits):
	non_zero = filter(lambda x : x>0, digits)
	if non_zero == [] : return 0
	if num[0] != str(non_zero[0]):
		return swap_frm_right(num,0,non_zero[0])
	digits.remove(int(num[0]))
	digits.insert(0,int(num[0]))
	for i in range(1,len(num)):
		if num[i] != str(digits[i]):
			return swap_frm_right(num,i,digits[i])
	return num
		
def find_highest(num, digits):
	for i in range(len(num)):
		if num[i] != str(digits[i]):
			return swap_frm_right(num,i,digits[i])
	return num

def swap_frm_right(num, index,  d):
	swap_index = None
	for i in range(len(num)-1, -1, -1):
		if num[i] == str(d):
			swap_index = i
			break
	
	if not swap_index : return num
	num = list(num)	
	# Swap the digits
	num[index], num[swap_index] = num[swap_index], num[index]
	return "".join(num)	



#------_RUN_----------#
input_file = sys.argv[1]
input_fh = open(input_file, 'r')
T = int(input_fh.readline())

for i in range(1,T+1):
	num = input_fh.readline()
	num = num.strip()
	digits = [ int(x) for x in num ]
	# Digits are sorted in ascending order
	digits = sorted(digits)
	output = "Case #"+str(i)+": "+str(find_lowest(num, digits))
	digits = sorted(digits, reverse=True)
	output += " "+str(find_highest(num,digits))
	print output

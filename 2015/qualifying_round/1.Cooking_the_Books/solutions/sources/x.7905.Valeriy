import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class CookingTheBooks {
    Scanner in;
    PrintWriter out;

    public static void main(String[] args) throws FileNotFoundException {
        new CookingTheBooks().launch(args[0]);

    }

    private void launch(String args) throws FileNotFoundException {
        in = new Scanner(new File(args));
        out = new PrintWriter(System.out);
        try {
            solve();
        } finally {
            out.close();
        }
    }

    /**
     * 1 ≤ T ≤ 100
     * 0 ≤ N ≤ 999999999
     * N will never begin with a leading 0 unless N = 0
     */
    private void solve() {
        int T = in.nextInt();
        int[] result;
        StringBuilder sb = new StringBuilder();
        for (int t = 1; t <= T; t++) {
            result = process(in.nextInt());
            out.printf("Case #%d: %s %s\n", t, result[0], result[1]);
            sb.append("Case #")
                    .append(t)
                    .append(": ")
                    .append(result[0])
                    .append(" ")
                    .append(result[1])
                    .append("\n");
            fileWriter(sb.toString());
        }
    }

    int[] process(int input) {
        int[] answer = new int[2];
        String temp = Integer.toString(input);
        int[] arraysOfDigit = new int[temp.length()];
        List<Integer> swaped = new ArrayList<Integer>();
        int[] tmp = new int[temp.length()];
        for (int i = 0; i < temp.length(); i++) {
            arraysOfDigit[i] = temp.charAt(i) - '0';
        }
        if (arraysOfDigit.length <= 1) {
            answer[0] = input;
            answer[1] = input;
            return answer;
        }
        swaped.add(input);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < arraysOfDigit.length; i++) {
            System.arraycopy(arraysOfDigit,0,tmp,0, arraysOfDigit.length);
            int a = tmp[i];
            int k = i + 1;
            while (k <= tmp.length - 1) {
                int b = tmp[k++];
                if (b == 0) {
                    swaped.add(input);
                    break;
                }
                tmp[--k] = a;
                tmp[i] = b;
                for (int x : tmp) {
                    sb.append(x);
                }
                swaped.add(Integer.parseInt(sb.toString()));
                sb.setLength(0); //clear StringBuilder
                //if (k >= tmp.length - 1) k--;
                System.arraycopy(arraysOfDigit,0,tmp,0, arraysOfDigit.length);
                k++;
            }
        }
        Object[] res = swaped.toArray();
        Arrays.sort(res);
        answer[0] = (Integer) res[0];
        answer[1] = (Integer) res[swaped.size() - 1];
        return answer;
    }

    void fileWriter(String content) {
        Writer out = null;
        try {
            FileOutputStream outputFile = new FileOutputStream("output.txt");
            out = new BufferedWriter(new OutputStreamWriter(
                    outputFile,
                    "UTF-8"
            ));
            out.write(content);
        } catch (IOException e1) {
            e1.printStackTrace();
        } finally {
            try {
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

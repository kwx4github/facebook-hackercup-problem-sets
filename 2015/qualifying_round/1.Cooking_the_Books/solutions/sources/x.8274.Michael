#include <iostream>
#include <vector>
#include <string>
#include <stdlib.h>
#include <algorithm>

using namespace std;

vector<int> digits;
vector<int> digits2;
vector<int> mindisplace;
vector<int> maxdisplace;

void build(string number){
  digits.empty();
  for (int i = 0; i < number.length(); i++){
    string s = string(1, number[i]);
    digits.push_back(atoi(s.c_str()));
    digits2.push_back(atoi(s.c_str()));
  }
}

int smallest(){
  int mini = 10;
  int minii;
  for (int i = 0; i < digits2.size(); i++){
    if (digits2[i] < mini && digits2[i] != 0){
      mini = digits2[i];
      minii = i;
    }
  }
  if (minii == 0){
    mindisplace.push_back(digits2[minii]);
    digits2.erase(digits2.begin()+minii);
    if (digits2.size() == 1) return 0;
    else return smallest();
  } else return minii;
}

int largest(){
  int maxi = 0;
  int maxii;
  for (int i = 0; i < digits.size(); i++){
    if (digits[i] > maxi){
      maxi = digits[i];
      maxii = i;
    }
  }
  if (maxii == 0){
    maxdisplace.push_back(digits[maxii]);
    digits.erase(digits.begin()+maxii);
    if (digits.size() == 1) return 0;
    else return largest();
  } else return maxii;
}

int main(){
  int T;
  string N;
  vector<string> numbers;
  cin >> T;
  for (int i = 0; i < T; i++){
    cin >> N;
    numbers.push_back(N);
  }
  for (int i = 0; i < numbers.size(); i++){
    cout << "Case #" << i + 1 << ": ";
    if (numbers[i].length() == 1) {
      cout << numbers[i] << ' ' << numbers[i] << endl;
    } else {
    build(numbers[i]);
    
    int small = smallest();
    swap(digits2[small], digits2[0]);
    for (int i = 0; i < mindisplace.size(); i++){
      cout << mindisplace[i];
    }
    for (int i = 0; i < digits2.size(); i++){
      cout << digits2[i];
    }
    cout << ' ';
    int big = largest();
    swap(digits[big], digits[0]);
    for (int i = 0; i < maxdisplace.size(); i++){
      cout << maxdisplace[i];
    }
    for (int i = 0; i < digits.size(); i++){
      cout << digits[i];
    }
    digits.clear();
    digits2.clear();
    mindisplace.clear();
    maxdisplace.clear();
    cout << endl;
    }
  }
  return 0;
}
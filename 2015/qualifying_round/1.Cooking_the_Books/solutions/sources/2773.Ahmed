use strict;
use warnings;
use List::Util qw( max min );

my $tc = <>;
for my $T ( 1..$tc ){
	my $n = <>;
	chomp $n;
	my ( $mn, $mx );
	$mn = $mx = int $n;
	my @n = split "", $n;
	
	###############################################################
	#	Solution one C++ Style
	###############################################################
	# for my $i ( 0..$#n ){
	#	for my $j ( ($i+1)..$#n ){
	#		next if ( $n[ $j ] eq '0' and !$i );
	#		( $n[ $i ], $n[ $j ] ) = ( $n[ $j ], $n[ $i ] );
	#		$n = int ( join "", @n );
	#		$mx = max $mx, $n;
	#		$mn = min $mn, $n;
	#		( $n[ $i ], $n[ $j ] ) = ( $n[ $j ], $n[ $i ] );
	#	}
	# }
	###############################################################
	

        ####################################################################################
        #       Solution two Perl Style
        ####################################################################################
	my @all = map { my $i = $_; map ( [ ( $i, $_ ) ] , ( ( $i + 1 )..$#n ) ) } ( 0..$#n ) ;
	@n = map {
		( $n[ $_->[0] ], $n[ $_->[1] ] ) = ( $n[ $_->[1] ], $n[ $_->[0] ] );
		$n = int ( join "", @n );
		( $n[ $_->[0] ], $n[ $_->[1] ] ) = ( $n[ $_->[1] ], $n[ $_->[0] ] );
		( $n[ $_->[1] ] eq '0' and !$_->[0] ) ? $mx : $n ;
        } @all;
	push @n, $n if $#n;
	$mx = max @n;
	$mn = min @n;
	####################################################################################

	##########################################################
	# BTW C++ style code is faster than the perl style code  #
	# I have no idea why someone would write such an ugly    #
	# and low performance code like the Perl Style one       #
	#                  BUT                                   #
	#      I will submit the Perl Style code, who cares?!    #
	##########################################################

	# No need to say that C++ code ( code not style ) is the fastest
	
	print "Case #$T: $mn $mx\n";
}


#include <iostream>
#include <fstream>
#include <vector>
#include <cstdlib>
#include <string>
using namespace std ;

void explode ( int argv ,vector <int> & returnBag );
int posOfLargest ( vector <int> & bag );
long ten_raised_to_power ( int exp );
long generateInt ( vector <int> & bag  ,  int swap );
int posOfSmallest ( vector <int> & bag) ;

int main ( int argc , char* argv[] )
{
	if ( argc !=3 ) exit (1) ;
	
	string iName = argv[1]; 
	string oName =argv[2] ;
	ifstream inFile ( iName.c_str() ) ;
	ofstream outFile ( oName.c_str()) ;
	if (!inFile || !outFile ) exit (1) ;
	
	string str_T ;
	getline ( inFile , str_T ) ;
	int T = atoi ( str_T.c_str()) ;
	
	string str_curr_int;
	int currentInteger ;
	long  largest;
	long smallest ;
	for ( int i = 1; i<= T ; i++ )
		{
		    
		   getline ( inFile , str_curr_int ) ;
		   currentInteger = atoi  ( str_curr_int.c_str() ) ;
		   //explode integer to individual digits
		   vector <int> bagOfDigits  ;
		   explode ( currentInteger , bagOfDigits ) ;
		   // find position of largest and generate the integer the max possible integer integer
		   
		   largest  = generateInt ( bagOfDigits , posOfLargest( bagOfDigits ) ) ;
		   smallest = generateInt ( bagOfDigits , posOfSmallest ( bagOfDigits ) ) ;  
		   
		   outFile<<"case #"<<i<<" "<<smallest<<" "<<largest<<endl;
		 
		 }
 return 0 ;
 }		   			
void explode ( int argv ,vector <int> & returnBag )
{ 
	if ( argv != 0 ) 
	{
	   int aDigit;
	    do 
	    {   
	       	aDigit = argv%10 ;
	       	argv=(int)argv/10 ;
	       	
	       	returnBag.push_back(aDigit) ;
	    } while ( argv  != 0 ) ;
	}
	else { 
	    returnBag.push_back( 0 ) ;
	     }	
}
int posOfLargest ( vector <int> & bag )
{
	int positionOfLargest = bag.size()-1 ;
	for( int i = 0 ; i < bag.size() ; i++ )
	{ 
		if ( bag[i] > bag[positionOfLargest] )
		    positionOfLargest = i ;
	} 
	return positionOfLargest ;
}
long ten_raised_to_power ( int exp )
{
	if ( exp == 0 ) return 1;
	else return 10*ten_raised_to_power(exp-1);
}	
long generateInt ( vector <int> & bag , int swap )
{
	int result ;
	if ( swap != (bag.size ()-1)  ) 
	{  result =0 ;
		for ( int c = 0 ; c< bag.size () ; c++ )
		{ 
			if ( c!= swap && c!=(bag.size()-1) )
			result += ((long)bag [c]) * ten_raised_to_power ( c ) ;
			
			else if ( c == swap )
			result+= ((long) bag[bag.size()-1]) * ten_raised_to_power ( c );  
			
			else if ( c==(bag.size()-1))
			result+= ((long) bag[swap] ) * ten_raised_to_power ( c ) ;
		}
		
	}
	 else { 
	 	
	result= 0 ;
	for ( int c = 0; c < bag.size () ; c++ )
	{
		result += ((long) bag[c] )* ten_raised_to_power ( c ) ;
	} 
	   }

  return result ;
  }	
int posOfSmallest ( vector <int> & bag) 
{ 
 	int positionOfSmallest = bag.size()-1 ;
	for( int i = 0 ; i < bag.size() ; i++ )
	{ 
		if ( bag[i]!=0 && bag[i] < bag[positionOfSmallest] )
		    positionOfSmallest = i ;
	} 
	return positionOfSmallest ;
}				    

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cooking_the_Books
{
    class Program
    {
        static void Main(string[] args)
        {
            // Read T
            int numTweaks = Convert.ToInt32(Console.ReadLine());
            List<string> originals = new List<string>();

            // Read N
            for (var i = 1; i <= numTweaks; ++i)
            {
                originals.Add(Console.ReadLine());
            }

            for (var i = 1; i <= numTweaks; ++i)
            {
                List<int> digits = new List<int>();
                string original = originals[i - 1];

                // Convert digits to array
                for (var j = 0; j < original.Count(); ++j)
                {
                    digits.Add((int)Char.GetNumericValue(original[j]));
                }

                // Order digits forward and backward
                List<int> smallest = new List<int>(digits), largest = new List<int>(digits), stl, lts;
                stl = (from n in digits
                      orderby n ascending
                      select n).ToList();
                lts = (from n in digits
                       orderby n descending
                       select n).ToList();

                // Special case for 0s
                // Puts the first non-zero number in front
                if (stl.Count > 1 && stl.Contains(0))
                {
                    var index = stl.FindIndex(x => x != 0);
                    stl[0] = stl[index];
                    stl[index] = 0;
                }

                // Compare largest list to sorted list, swap the first non-matching numbers
                for (var j = 0; j < digits.Count; ++j)
                {
                    if (largest[j] != lts[j])
                    {
                        var index = largest.FindLastIndex(x => x == lts[j]);
                        int temp = largest[j];
                        largest[j] = largest[index];
                        largest[index] = temp;

                        break;
                    }
                }

                // Compare smallest list to sorted list, swap the first non-matching numbers
                for (var j = 0; j < digits.Count; ++j)
                {
                    if (smallest[j] != stl[j])
                    {
                        var index = smallest.FindLastIndex(x => x == stl[j]);
                        int temp = smallest[j];
                        smallest[j] = smallest[index];
                        smallest[index] = temp;

                        break;
                    }
                }

                // Output to console
                Console.WriteLine(String.Format("Case #{0}: {1} {2}", i, String.Join("", smallest), String.Join("", largest)));
            }
            Console.Read();
        }
    }
}

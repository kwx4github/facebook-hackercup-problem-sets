class Cook
  attr_reader :numbers

  def initialize(number)
    @numbers = number.to_s.split(//)
  end

  def min
    swap_numbers(numbers, 0, min_index).join.to_i
  end

  def max
    swap_numbers(numbers, 0, max_index).join.to_i
  end

  private

  def min_index
    min = numbers.each_with_index.reject { |n, i| n == '0' }.min
    return 0 if min.nil?
    numbers.rindex(min[0])
  end

  def max_index
    max_index = numbers.each_with_index.max[1]
  end

  def swap_numbers(array, index1, index2)
    return array if index1 == index2
    array.take(index1) + [array[index2]] + array[(index1.next)...index2] + [array[index1]] + array.drop(index2.next)
  end

end

if __FILE__ == $0
  file = ARGV[0] || "input.txt"
  fs = open(file)
  count = fs.readline.to_i

  fs.each_with_index do |line, index|
    break if index >= count
    cook = Cook.new(line.to_i)
    puts "Case ##{index.next}: #{cook.min} #{cook.max}"
  end
end

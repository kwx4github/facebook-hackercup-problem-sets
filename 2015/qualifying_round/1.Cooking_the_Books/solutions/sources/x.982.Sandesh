#include <bits/stdc++.h>
#define make_it_fast ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

typedef long long int lli;
typedef unsigned long long ull;

#define ff first
#define ss second
#define pb push_back
#define mkp make_pair
#define lpu(i,s,e) for(i=s;i<e;i++)
#define lpd(i,s,e) for(i=s;i>e;i--)
#define rep(i,n) for(i=0;i<n;i++)
#define all(v) v.begin(), v.end()
#define dpl fprintf(stderr, "\n");
#define db(x) cerr << x << endl; // DEBUG PRIMITIVE
#define dbp(p) cerr << '(' << p.ff << ',' << p.ss << ") " << endl;
#define dbn(A,N) for(int __I=0; __I<N; __I++) cerr << A[__I] << " "; dpl; // DEBUG 1-D ARRAY
#define dbnm(A,N,M) for(int __I=0; __I<N; __I++) { for(int __J=0; __J<M; __J++) cerr << A[__I][__J] << " "; dpl; } // DEBUG 2-D ARRAY
#define dbvp(v) for(auto __Velem : v) cerr << '(' << __Velem.ff << ',' << __Velem.ss << ") " ; cerr << endl; // DEBUG VECTOR PAIRS
#define dbv(v) for(auto __Velem : v) cerr << __Velem << ' '; cerr << endl; // DEBUG VECTOR PRIMITIVE
#define gi2(_A,_B) inp(_A); inp(_B);
#define gi3(_A,_B,_C) inp(_A); inp(_B); inp(_C);

class TimeTracker {
  clock_t start, end;
public:
  TimeTracker() {
    start = clock();
  }
  ~TimeTracker() {
    end = clock();
    fprintf(stderr, "RunTime : %.3lf s\n", (double)(end - start) / CLOCKS_PER_SEC);
  }
};

# define getcx getchar

template <class T>
void inp(T& n)//fast input function
{
  n=0;
  int ch=getcx();
  int sign=1;
  while( ch < '0' || ch > '9' )
    {if(ch=='-')sign=-1; ch=getcx();}
  while( ch >= '0' && ch <= '9' )
    n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
  n=n*sign;
}

template <class T>
void oup(T x)
{
  if(x<0)
  {
    putchar('-');
    x=-x;
  }
  int len=0,data[25];
  while(x)
  {
    data[len++]=x%10;
    x/=10;
  }
  if(!len)
    data[len++]=0;
  while(len--)
    putchar(data[len]+48);
  putchar('\n');
}

lli get_num(vector<lli>& v)
{
  lli a = 0, tenPow = 1, i;
  rep(i, v.size())
  {
    a += v[i]*tenPow;
    tenPow *= 10;
  }
  return a;
}

int main()
{
  #ifdef LOCAL
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
    TimeTracker trk;
  #endif

  lli t; inp(t);
  for(lli _i = 1; _i <= t; _i++)
  {
    printf("Case #%lld: ", _i);
    lli n, x, mx, mn; inp(n); mx = mn = n;
    vector<lli> v; v.clear();
    lli temp = n;
    while(temp)
    {
      v.pb(temp%10);
      temp /= 10;
    }
    lli k = v.size();
    for(lli i = 0; i < k-1; i++)
    {
      if(v[i] != 0)
      {
        swap(v[i], v[k-1]);
        x = get_num(v);
        swap(v[i], v[k-1]);
        if(x > mx) mx = x;
        if(x < mn) mn = x;
      }
    }
    printf("%lld %lld\n", mn, mx);
  }
  return 0;
}
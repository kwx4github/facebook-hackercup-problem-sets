#include <algorithm>
#include <cassert>
#include <fstream>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <utility>
#include <vector>

using namespace std;

pair<string, string> solve(const string& N)
{
	string minval = N;
	for (size_t i = 0; i < minval.size() - 1; ++i) {
		char l = minval[i];

		char r = minval[i + 1];
		for (size_t j = i + 2; j < minval.size(); ++j) {
			if (r == '0' || (minval[j] < r && (i != 0 || minval[j] > '0'))) {
				r = minval[j];
			}
		}

		if (r < l && r != '0') {
			size_t k = minval.rfind(r);
			if (k > i) {
				minval[i] = r;
				minval[k] = l;
				break;
			}
		}
	}

	string maxval = N;
	for (size_t i = 0; i < maxval.size() - 1; ++i) {
		char l = maxval[i];
		if (l == '0')
			continue;

		auto iter = max_element(begin(maxval) + i, end(maxval));
		if (iter != maxval.end() && *iter > l) {
			maxval[i] = *iter;
			*iter = l;
			break;
		}
	}

	return make_pair(minval, maxval);
}

int main(int argc, char** argv)
{
	if (argc < 2) {
		std::cerr << "Need an input file" << std::endl;
	}
	else {
		std::fstream input;
		input.open(argv[1], std::fstream::in);

		if (!input.is_open())
			return -1;

		unsigned T;
		input >> T;

		for (unsigned i = 1; i <= T; ++i) {
			/* Input begins with an integer T, the number of numbers that need tweaking.
			 * Each of the next T lines contains a integer N.
			 */
			string N;
			input >> N;

			pair<string, string> retval = solve(N);

			std::cout << "Case #" << i << ": ";
			std::cout << retval.first << " " << retval.second << std::endl;
		}
	}
	return 0;
}


#include <cstdio>
#include <cstring>
#include <utility>

using namespace std;

int T;
char N[10];

int find_index_min(int lower_index_bound, int length)
{
    char minimum = ':';
    int pos = 0;
    for(int i = lower_index_bound; i < length; i++)
        if(lower_index_bound != 0)
        {
            if(minimum >= N[i])
            {
                minimum = N[i];
                pos = i;
            }
        }
        else if(lower_index_bound == 0)
           if(minimum >= N[i] && N[i] != '0')
           {
               minimum = N[i];
               pos = i;
           }
    return pos;
}

char *smallest(int length)
{
    char *aux = new char[10];
    strcpy(aux, N);
    for(int i = 0; i < length - 1; i++)
    {
        if(i == 0 && N[find_index_min(i, length)] != N[i])
        {
            swap(aux[i], aux[find_index_min(0, length)]);
            break;
        }
        else if(i != 0 && N[find_index_min(i, length)] != N[i])
        {
            swap(aux[i], aux[find_index_min(i, length)]);
            break;
        }
    }
    return aux;
}

int find_index_max(int lower_index_bound, int length)
{
    char maximum = '/';
    int pos = 0;
    for(int i = lower_index_bound; i < length; i++)
        if(lower_index_bound != 0)
        {
            if(maximum <= N[i])
            {
                maximum = N[i];
                pos = i;
            }
        }
        else if(lower_index_bound == 0)
           if(maximum <= N[i] && N[i] != '0')
           {
               maximum = N[i];
               pos = i;
           }
    return pos;
}

char *largest(int length)
{
    for(int i = 0; i < length - 1; i++)
        if(i == 0 && N[find_index_max(0, length)] != N[i])
        {
            swap(N[i], N[find_index_max(0, length)]);
            break;
        }
        else if(i != 0 && N[find_index_max(i, length)] != N[i])
        {
            swap(N[i], N[find_index_max(i, length)]);
            break;
        }
    return N;
}

void print(int i)
{
    int length = strlen(N);
    printf("Case #%d: ", i);
    printf("%s ", smallest(length));
    printf("%s\n", largest(length));
}

void read()
{
    scanf("%d", &T);
    for(int i = 1; i <= T; i++)
    {
        scanf("%s", N);
        print(i);
        memset(N, 0, sizeof(N));
    }
}

int main()
{
    freopen("data.in", "r", stdin);
    freopen("data.out", "w", stdout);
    read();

    return 0;
}

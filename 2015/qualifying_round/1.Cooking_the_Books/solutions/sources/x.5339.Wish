import java.io.*;
import java.util.*;
import java.util.Map.Entry;

public class CookingTheBooks {
	public static void main(String[] args) {
		CookingTheBooks c = new CookingTheBooks();
		String path = "/Users/wish/Desktop/cooking_the_books_example_input1.txt";
		String output = "/Users/wish/Desktop/cookings_output.txt";
		c.solution(path, output);
	}
	public void solution(String path, String output){
		try{
			BufferedReader br = new BufferedReader(new FileReader(new File(path)));
			FileWriter fw = new FileWriter(new File(output));
			String s = br.readLine();
			int caseNumber = Integer.valueOf(s);
			String data = null;
			int i = 1;
			while((data = br.readLine()) != null && i <= caseNumber){
				if(data.equals("")) break;
				StringBuilder result = new StringBuilder();
				result.append("Case #" + i++ + ": "+helper(data) + "\n");
				fw.write(result.toString());
			}
			fw.close();
			br.close();
			
		}catch(FileNotFoundException e){
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}catch(NumberFormatException e){
			System.out.println("Invalid number");
		}
		
	}
	
	public String helper(String data){
		if(data.length() <= 1)
			return data + " " + data;
		
		char[] chars = data.toCharArray();
		Map<Integer, Character> map = new HashMap<Integer, Character>();
		for(int i = 0; i < chars.length; i++) map.put(i, chars[i]);
		List<Entry<Integer, Character>> list = new LinkedList<Entry<Integer, Character>>(map.entrySet());
		Collections.sort(list, new Comparator<Entry<Integer, Character>>(){
        	@Override
        	public int compare(Entry<Integer, Character> arg0, Entry<Integer, Character> arg1){
        		if(arg0.getValue()  ==  arg1.getValue()) return arg0.getKey() - arg1.getKey();
        		return arg0.getValue()  -  arg1.getValue();
        	}
        });
		
		/* calculate smaller */
		int pos1 = 0;
		int pos2 = 0;
		for(int i = 0; i < list.size() && pos1 <= list.size()-1; i++){
			if(list.get(i).getValue() == '0') continue;
			if(i > 0 && list.get(i-1).getValue() == '0' && list.get(i).getValue() == chars[pos1]){
				for(int j = 0; j < chars.length; j++){
					if(chars[j] != '0' && j != 0) {
						pos1 = j;
						break;
					}
				}
				pos2 = list.get(i-1).getKey();
				if(pos1>pos2) pos2 = 0;
				break;
			}
			if(list.get(i).getValue() == chars[pos1]){
				pos1++;
				continue;
			}
			pos2 = list.get(i).getKey();
			break;
		}
		
		/* calculate larger */
		Collections.sort(list, new Comparator<Entry<Integer, Character>>(){
        	@Override
        	public int compare(Entry<Integer, Character> arg0, Entry<Integer, Character> arg1){
        		if(arg0.getValue()  ==  arg1.getValue()) return arg1.getKey() - arg0.getKey();
        		return arg0.getValue()  -  arg1.getValue();
        	}
        });
		int pos3 = 0;
		int pos4 = 0;
		for(int i = list.size()-1; i >= 0; i--){
			if(list.get(i).getValue() == chars[pos3]){
				pos3++;
				continue;
			}
			pos4 = list.get(i).getKey();
			break;
		}
		
		return swap(data, pos1, pos2, 's') + " " + swap(data, pos3, pos4, 'l');
	}
	
	public String swap(String s, int i, int j, char flag){
		if(((j == 0 || (s.charAt(j) == '0' && i == 0)) && flag == 's') || i >= s.length())  return s;
		char[] chars = s.toCharArray();
		char temp = chars[i];
		chars[i] = chars[j];
		chars[j] = temp;
		return new String(chars);
	}
}

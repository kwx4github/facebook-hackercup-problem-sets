#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<vector>
#include<string>
#include<queue>
#include<stack>

using namespace std;								/****JOYDEEP MONDAL****/
										/****IIT - R ****/

#define ll  int
#define ld double
#define pb push_back
#define bigger(a,b) (a>b?a:b)
#define smaller(a,b) (a<b?a:b)
#define o_di vector<int>
#define o_dl vector<ll>
#define o_dd vector<ld>
#define o_dc vector<stair>
#define loop(i,s,n) for(ll i=s;i<n;i++)
#define loope(i,s,n) for(ll i=s;i<=n;i++)
#define loopd(i,n,s) for(ll i=n-1;i>=s;i--)
#define loopde(i,n,s) for(ll i=n;i>=s;i--)
#define infinity 9999999

ld power(ld m,int n)
{	
	ld result = 1;
	if(!n)
	return 1;
	ld temp=power(m,n/2);
	result=temp*temp;
	if(n&1)
	result*=m;
	return result;
}

ll gcd(ll a,ll b)
{
	if(!b)
	return a;
	if(!a)
	return b;
	if(a>b)
	return (gcd(b,a%b));
	return (gcd(a,b%a));
}

ll power_mod(ll m,ll n,ll mod)
{
	if(n>=mod)
	n%=mod;
	ll result =1;
	if(!n)
	return 1;
	ll temp;
	temp = power_mod(m,n/2,mod);
	if(temp>=mod)
	temp%=mod;
	result = temp*temp;
	if(result>=mod)
	result %= mod;
	if(n&1)
	result*=n;
	if(result>=mod)
	result%=mod;
	return result;
}	

ll lcm(ll a,ll b)
{
	ll result;
	result = (a*b)/gcd(a,b);
	return result;
}

class stair
{
	public:
	int d,p;
	bool operator<(const stair&) const;
	
};

bool stair :: operator<(const stair& m) const
{
	return ( d < m.d) ;
}

/***************relevant code starts here******************/



int main()
{
	int test;
	scanf("%d",&test);
	loope(k,1,test)
	{
		string s;
		cin>>s;
		int len = s.length();
		vector<char> a;
		char my_min='0'+10;
		loop(i,0,len)
		{
			a.pb(s[i]);
			if(s[i]!='0' && s[i]<my_min)
			{
				my_min = s[i];
			}
		}
		sort(a.begin(),a.end());
		loopd(i,len,0)
		{
			s[len-i-1] = a[i];
		}
		int flag = 0;
		loop(i,0,len)
		{
			if(a[i] == my_min)
			{
				a.erase(a.begin()+i);
				flag = 1;
				break;
			}
		}
		printf("Case #%d: ",k);
		if(flag)
		printf("%c",my_min);
		len = a.size();
		loop(i,0,len)
		{
			printf("%c",a[i]);
		}
		printf(" ");
		cout<<s<<endl;
		
	}
return 0;

}

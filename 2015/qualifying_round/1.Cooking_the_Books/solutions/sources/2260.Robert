from operator import lt, gt



def swap(str, i, j):
    '''Returns the string which results from swapping the chars
    at indices i and j'''
    s1 = min(i, j)
    s2 = max(i, j)
    return str[:s1] + str[s2] + str[s1+1:s2] + str[s1] + str[s2+1:]


def embiggen(str, ensmallen=False):
    '''By default returns the largest string that can be
    made by exchanging two digits (and not placing a zero in the
    leading position).  If ensmallen is true, returns the smallest
    string that can be so made.'''
    comp = gt if ensmallen else lt
    best = str
    for i in xrange(len(str) - 1):
        for j in xrange(i + 1, len(str)):
            swapped = swap(str, i, j)
            if comp(best, swapped) and (swapped[0] != '0'):
                best = swapped
    return best


T = int(raw_input())

for i in xrange(1, T + 1):
    N = raw_input()
    print 'Case #' + str(i) + ':', embiggen(N, True), embiggen(N, False)
    


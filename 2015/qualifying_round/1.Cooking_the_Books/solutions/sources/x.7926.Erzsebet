using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace CookingTheBooks
{
    class Program
    {
        private const string InputFileName = "cooking_the_books.txt";
        private const string OutputFileName = "cooking_the_books_output.txt";

        private int[] numbers;


        static void Main(string[] args)
        {
            var program = new Program();
            program.ReadInputFile();
            program.WriteOutputFile();
        }

        private void ReadInputFile()
        {
            using (TextReader reader = File.OpenText(InputFileName))
            {
                int numberOfNumbers = int.Parse(reader.ReadLine());
                this.numbers = new int[numberOfNumbers];
                for (var i = 0; i < numberOfNumbers; i++)
                {
                    this.numbers[i] = int.Parse(reader.ReadLine());
                }
            }
        }

        private void WriteOutputFile()
        {
            using (System.IO.StreamWriter file = new System.IO.StreamWriter(OutputFileName))
            {
                for (var i = 0; i < this.numbers.Length; i++)
                {
                    var line = i + 1;
                    file.Write("Case #" + line + ": " + this.GetMinNumber(this.numbers[i]) + " " + this.GetMaxNumber(this.numbers[i]) + '\n');
                }
            }
        }

        private int GetMaxNumber(int number)
        {
            string numberString = number.ToString();
            if (numberString.Length == 1)
            {
                return number;
            }

            int[] digits = new int[numberString.Length];
            for (int i = 0; i < numberString.Length; i++)
            {
                digits[i] = numberString[i] - '0';
            }

            var maxNumberArray = this.SwapDigitsToMaxNumber(digits, 0);
            int maxNumber = 0;
            for (int i = 0; i < maxNumberArray.Length; i++)
            {
                maxNumber = maxNumber * 10 + maxNumberArray[i]; 
            }

            return maxNumber;
        }

        private int[] SwapDigitsToMaxNumber(int[] digits, int beginIndex)
        {
            if (beginIndex >= digits.Length)
            {
                return digits;
            }

            var maxNumber = digits[beginIndex];
            var list = new List<int>();
            list.Add(beginIndex);
            for (var i = beginIndex + 1; i < digits.Length; i++)
            {
                if (digits[i] > maxNumber)
                {
                    maxNumber = digits[i];
                    list.Clear();
                    list.Add(i);
                }
                else if (digits[i] == maxNumber)
                {
                    list.Add(i);
                }
            }

            var descending = true;
            int index = beginIndex;
            while (descending && (index + 1) < list.Count)
            {
                if (!(list[index + 1] == (list[index] + 1)))
                {
                    descending = false;
                    break;
                }
                index++;
            }

            // not the first number was the biggest
            if (index == beginIndex)
            {
                var lastIndex = list[list.Count - 1];
                var aux = digits[beginIndex];
                digits[beginIndex] = digits[lastIndex];
                digits[lastIndex] = aux;
                return digits;
            }
            else
            {
                var newBeginIndex = index + 1 < list.Count ? list[index + 1] : list[index] + 1;
                return this.SwapDigitsToMaxNumber(digits, newBeginIndex);
            }
        }

        private int GetMinNumber(int number)
        {
            string numberString = number.ToString();
            if (numberString.Length == 1)
            {
                return number;
            }

            int[] digits = new int[numberString.Length];
            for (int i = 0; i < numberString.Length; i++)
            {
                digits[i] = numberString[i] - '0';
            }

            var minNumberArray = this.SwapDigitsToMinNumber(digits, 0);
            int minNumber = 0;
            for (int i = 0; i < minNumberArray.Length; i++)
            {
                minNumber = minNumber * 10 + minNumberArray[i];
            }

            return minNumber;
        }

        private int[] SwapDigitsToMinNumber(int[] digits, int beginIndex)
        {
            if (beginIndex >= digits.Length)
            {
                return digits;
            }

            var minNumber = digits[beginIndex];
            var list = new List<int>();
            list.Add(beginIndex);
            for (var i = beginIndex + 1; i < digits.Length; i++)
            {
                if (digits[i] < minNumber)
                {
                    minNumber = digits[i];
                    list.Clear();
                    list.Add(i);
                }
                else if (digits[i] == minNumber)
                {
                    list.Add(i);
                }
            }

            var descending = true;
            int index = beginIndex;
            while (descending && (index + 1) < list.Count)
            {
                if (!(list[index + 1] == (list[index] + 1)))
                {
                    descending = false;
                    break;
                }
                index++;
            }

            // not the first number was the lowest
            if (index == beginIndex)
            {
                var lastIndex = list[list.Count - 1];
                
                if (digits[lastIndex] == 0)
                {
                    beginIndex++;
                }

                var aux = digits[beginIndex];
                digits[beginIndex] = digits[lastIndex];
                digits[lastIndex] = aux;
                return digits;
            }
            else
            {
                var newBeginIndex = index + 1 < list.Count ? list[index + 1] : list[index] + 1;
                return this.SwapDigitsToMinNumber(digits, newBeginIndex);
            }
        }
    }
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <cctype>
#define SZ(x) ( (int) (x).size() )
#define me(x,a) memset(x,a,sizeof(x))
#define FN(a,n) for(int a=0;a<n;a++)
#define FOR(a,ini,fin) for(int a=(ini);a<(fin);a++)
#define ull unsigned long long
#define sc1(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d %d",&x,&y)
#define sc3(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define endl "\n"
#define MOD 1000000007
#define MAXN 100005
using namespace std;

string toStr(int x){
    stringstream ss;
    ss<<x;
    string s;
    ss>>s;
    return s;
}

int main(){
    int t;
    cin >> t;
    FN(i,t){
        int n;
        cin>> n;
        printf("Case #%d: ",i+1);
        if( n== 0){
            puts("0 0");
            continue;
        }
        string val = toStr(n);
        string orig = toStr(n);
        sort(all(val));
        FN( j, SZ(val)){
            if(val[j] != '0'){
                swap( val[j], val[0] );
                break;
            }
        }
        FN( j, SZ(val)){
            if( orig[j] != val[j]){
                FN(k,SZ(val)) if( val[j] == orig[k]) {
                    orig[k] = orig[j];
                    break;
                }
                orig[j] = val[j];
                break;
            }
        }
        cout<<orig<<" ";
        orig = toStr(n);
        sort(all(val));
        for(int j=SZ(val) - 1; j>=0; j-- ){
            int ind = SZ(val) - j - 1;
            if( orig[ind] != val[j]){
                FN(k,SZ(val)) if( val[j] == orig[k]) {
                    orig[k] = orig[ind];
                    break;
                }
                orig[ind] = val[j];
                break;
            }
        }
        cout<<orig<<endl;
    }
}

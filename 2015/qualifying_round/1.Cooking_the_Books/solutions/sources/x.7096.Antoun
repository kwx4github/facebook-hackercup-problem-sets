#include<iostream>
#include<string>
#include<fstream>
using namespace std;
void Findlargest (string,int&,int&);//return the index of largest bit
void swap(string&,int,int);
int CharToInt( char );
int main()
{
	ifstream x;
	x.open("input.txt");

	ofstream y;
	char path[] = "out.txt";
	y.open(path, ios::out);


	int n;
	x >> n;
	string *c = new string [n];
	for (int i = 0; i < n; i++)
		x >> c[i];
	int *largestnum = new int[n];
	int *smallestnum = new int[n];
	for (int i = 0; i < n; i++)
	{
		Findlargest(c[i], largestnum[i], smallestnum[i]);
	}

		for (int i = 0; i < n; i++)
	{
			y << "Case #" << i+1 << ": ";
			if (smallestnum[i]!=-1)
			swap(c[i],smallestnum[i], 0);
		y << c[i] << ' '; 
		if (smallestnum[i] != -1)
		swap(c[i],0, smallestnum[i]);
		swap(c[i],largestnum[i], 0);
		y << c[i] << endl;
	}
}


void Findlargest(string c, int& lar_index, int& small_index)
{

	 lar_index=0;
	 small_index = 0;
	int smallest = CharToInt(c[0]);;
	int largest = CharToInt(c[0]);
	for (int i = 0; i < c.size(); i++)
		if (CharToInt(c[i]) > largest)
		{
		largest = CharToInt(c[i]);
		lar_index = i;
		}
		else if (CharToInt(c[i]) < smallest)
		{
			smallest = CharToInt(c[i]);
			small_index = i;
		}
	if (CharToInt(c[small_index]) == 0)
		small_index = -1;
}
void swap(string&c, int x, int y)
{
	char temp;
	temp=c[x];
	c[x] = c[y];
	c[y] = temp;
}


int CharToInt(char c)
{
	switch (c)
	{
	case '0':
		return 0;
	case '1':
		return 1;
	case '2':
		return 2;
	case '3':
		return 3;
	case '4':
		return 4;
	case '5':
		return 5;
	case '6':
		return 6;
	case '7':
		return 7;
	case '8':
		return 8;
	case '9':
		return 9;
	default:
		return 0;
	}
}
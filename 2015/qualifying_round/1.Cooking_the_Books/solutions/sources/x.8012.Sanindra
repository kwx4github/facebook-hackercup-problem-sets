using System;
using System.IO;
using System.Collections;
using System.Linq;
class Fudge
{
    static void Main(string[] args)
    {
        int val = 0;
        StreamReader file = new StreamReader("fxinput.txt");
       
        val = Convert.ToInt32(file.ReadLine());
        using (StreamWriter output = new StreamWriter("fxoutput.txt"))
        {

        for (int i = 0; i < val; i++)
        {
            string s = file.ReadLine();
            int[] fudge = new int[s.Length];

            
            int Max = 0;
            int Min = 0;
            bool maxFlag = false;
            bool minFlag = false;
            string best = "";
            string less = "";

            for (int j = 0; j < s.Length; j++)
            {
                fudge[j] = (int)Char.GetNumericValue(s[j]);
            }
            int[] temp = new int[s.Length];
            Array.Copy(fudge, temp, s.Length);
            for (int j = 1; j < s.Length; j++)
            {
                
                Max = fudge[j - 1];
                Min = fudge[j - 1];
                string p = s.Substring(j - 1, s.Length - j+1);
                
                int []Maxp;
                int []Minp;
                Maxp = findMax(p);
                Minp = findMin(p,j);
                //Console.WriteLine(Minp[0]+" " + Minp[1]);
                if (Max != Maxp[0] && maxFlag == false)
                {    
                    best = Conv(temp, Maxp[1]+j-1,j-1);
                    maxFlag = true;
                }
                //Console.WriteLine(best);
                    if (Min != Minp[0] && minFlag == false)
                    {                        
                            less = Conv(fudge, Minp[1]+j-1,j-1);
                            minFlag = true;
                    }
                    //Console.WriteLine(j + " " +Minp[1]);
                }
            if (less == "")
                less = s;
            if (best == "")
                best = s;
           
                output.WriteLine("case #{0}: {1} {2}", i + 1, less, best);
            }
        }

            //Console.ReadLine();
        }

    private static int[] findMin(string p, int a)
    {
        int[] f = new int[p.Length];
        int Min = (int)Char.GetNumericValue(p[0]);
        int[] x = new int[2];
        for (int j = 1; j < p.Length; j++)
        {
            f[j] = (int)Char.GetNumericValue(p[j]);
            if (a == 1)
            {
                if (Min > f[j] && f[j] != 0)
                    Min = f[j];
            }
            else
            {
                if (Min > f[j])
                    Min = f[j];
            }
        }
        x[0] = Min;
        x[1] = Array.LastIndexOf(f,Min);
        return x;
        
    }

    static int[] findMax(string p)
    {
        int[] f = new int[p.Length];
        int Max = 0;
        int[] x = new int[2];
        for (int j = 0; j < p.Length; j++)
        {
            f[j] = (int)Char.GetNumericValue(p[j]);
            if (Max < f[j])
                Max = f[j];
        }
        x[0] = Max;
        x[1] = Array.IndexOf(f, x[0]); 
        return x;
        
    }
    static string Conv(int [] temp, int a, int j)
    {
            int y = temp[j];
            temp[j] = temp[a];
            temp[a] = y;
            string best = string.Join("", temp);
        return best;
    }

  
}
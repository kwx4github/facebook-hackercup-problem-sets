#!/usr/bin/env python3
#  Every business can make use of a good accountant and, if they're not big on following the law, sometimes a bad one. Bad accountants try to make more money for their employers by fudging numbers without getting caught.

#Sometimes a bad accountant wants to make a number larger, and sometimes smaller. It is widely known that tax auditors will fail to notice two digits being swapped in any given number, but any discrepancy more egregious will certainly be caught. It's also painfully obvious when a number has fewer digits than it ought to, so a bad accountant will never swap the first digit of a number with a 0.

#Given a number, how small or large can it be made without being found out? 

# Input begins with an integer T, the number of numbers that need tweaking. Each of the next T lines contains a integer N. 

# Output

# For the ith number, print a line containing "Case #i: " followed by the smallest and largest numbers that can be made from the original number N, using at most a single swap and following the rules above.
# Constraints

# 1 ≤ T ≤ 100
# 0 ≤ N ≤ 999999999
# N will never begin with a leading 0 unless N = 0

import fileinput, sys, math

def test_if_int(string):
    try:
        int(string)
        return True
    except ValueError:
        return False

def write_out(buff, case, smallest, largest):
    """
    Write to output file case number, smallest, and largest numbers possible
    """
    buff.write("Case #{}: {} {}\n".format(case, smallest, largest))

def find_min(number, num_digits):
    """
    Return smallest digit and place of in number
    >>> find_min(123, 2)
    2
    >>> find_min(5233, 3)
    2
    >>> find_min(987, 2)
    0
    """
    if number < 10:
        return number, 0
    else:
        min_dig = 10
        factor = 0
        for i in range(num_digits + 1):
            if (number % 10) < min_dig and \
               (number % 10) != 0:
                min_dig = number % 10
                factor = i
            number = number // 10
    return min_dig, factor

def find_max(number, num_digits):
    """
    Return largest digit and place of in number
    >>> find_max(123, 2)
    0
    >>> find_max(5233, 3)
    3
    >>> find_max(987, 2)
    2
    """
    if number < 10:
        return number, 0
    else:
        max_dig = 0
        factor = 0
        for i in range(num_digits + 1):
            if (number % 10) > max_dig:
                max_dig = number % 10
                factor = i
            number = number // 10
    return max_dig, factor

def create_min(number, num_digits, min_digit, min_factor):
    """
    Create smallest number from digits with single swap
    """
    return number + \
        ((min_digit * 10 ** num_digits) - ((number // (10 ** num_digits)) * (10 ** num_digits))) + \
        (((number // (10 ** num_digits)) * (10 ** min_factor)) - (min_digit * 10 ** min_factor))

def create_max(number, num_digits, max_digit, max_factor):
    """
    Create largest number from digits with single swap
    """
    return number + \
        ((max_digit * 10 ** num_digits) - ((number // (10 ** num_digits)) * (10 ** num_digits))) + \
        (((number // (10 ** num_digits)) * (10 ** max_factor)) - (max_digit * 10 ** max_factor))


file_input = open(sys.argv[1])
file_output = open(sys.argv[2], "w")

#file_input = open('test_in.txt')
#file_output = open('test_out.txt', "w")

line = file_input.readline()[:-1]

num_lines = int(line)
for case in range(num_lines):
    iput = file_input.readline()[:-1] # exclude \n
    number = int(iput)
    if number == 0:
        write_out(file_output, case + 1, 0, 0)
    else:
        num_digits = int(math.log(number, 10))
        min_digit, min_factor = find_min(number, num_digits)
        max_digit, max_factor = find_max(number, num_digits)
        min_num = create_min(number, num_digits, min_digit, min_factor)
        max_num = create_max(number, num_digits, max_digit, max_factor)
    
        write_out(file_output, case + 1, min_num, max_num)

file_output.close()
exit()

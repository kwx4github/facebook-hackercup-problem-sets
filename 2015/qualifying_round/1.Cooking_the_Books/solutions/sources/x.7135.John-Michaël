package Qualifications;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import java.util.StringTokenizer;

public class CookingTheBooks
{
	static DecimalFormat DF = new DecimalFormat("0.000",new DecimalFormatSymbols(Locale.ENGLISH));
	
	public static void run() throws Exception
	{
		init("cooking_the_books");
		
		int cases = INT();
		for(int cc = 1; cc <= cases; cc++)
		{
			print("Case #" + cc + ": ");
			// ******************************************************************************
			int input = INT();
			String number = Integer.toString(input);
			
			int small_index = 0, large_index = 0;
			
			for(int i = 1; i < number.length(); i++)
			{
				int value = Character.getNumericValue(number.charAt(i));
				
				if(value < Character.getNumericValue(number.charAt(small_index)))
				{
					if(value != 0) small_index = i;
				}
				if(value > Character.getNumericValue(number.charAt(large_index)))
				{
					large_index = i;
				}
			}

			char[] small = number.toCharArray();
			char[] large = number.toCharArray();
			
			char temp = small[small_index];
			small[small_index] = small[0];
			small[0] = temp;
			
			temp = large[large_index];
			large[large_index] = large[0];
			large[0] = temp;
			
			int small_val = Integer.parseInt(new String(small));
			int large_val = Integer.parseInt(new String(large));
			
			println(small_val + " " + large_val);
			// ******************************************************************************
		}
	}
	
	// *************************************************************************************
	// *********************************** FRAMEWORK ***************************************
	// *************************************************************************************
	
	public static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
	public static boolean isStandardInput = false;
	
	public static File input;
	public static FileReader inputreader;
	public static BufferedReader in;
	
	public static File output;
	public static FileWriter outputwriter;
	public static BufferedWriter out;
	
	public static StringTokenizer st;
	
	public static void main(String[] args) throws Exception
	{
		doSTDIN(true);
		setOutput("test.out");
		run();
		close();
	}
	
	public static void init(String problemName) throws Exception
	{
		doSTDIN(false);
		setInput(problemName+".txt");
		setOutput(problemName+".out");
	}
	
	// **************** PRINT METHODS **********************
	
	public static void println() throws IOException
	{
		out.write("\n");
		System.out.println();
	}
	
	public static void println(Object obj) throws IOException
	{
		out.write(obj.toString());
		out.write("\n");
		System.out.println(obj.toString());
	}
	
	public static void print(Object obj) throws IOException
	{
		out.write(obj.toString());
		System.out.print(obj.toString());
	}
	
	public static void println(long number) throws IOException
	{
		out.write(Long.toString(number));
		out.write("\n");
		System.out.println(number);
	}
	
	public static void print(long number) throws IOException
	{
		out.write(Long.toString(number));
		System.out.print(number);
	}
	
	public static void println(char c) throws IOException
	{
		out.write(Character.toString(c));
		out.write("\n");
		System.out.println(c);
	}
	
	public static void print(char c) throws IOException
	{
		out.write(Character.toString(c));
		System.out.print(c);
	}
	
	public static void println(String line) throws IOException
	{
		out.write(line);
		out.write("\n");
		System.out.println(line);
	}
	
	public static void print(String line) throws IOException
	{
		out.write(line);
		System.out.print(line);
	}
	
	// ******************** INPUT DECLARATION ******************
	
	public static void doSTDIN(boolean standard)
	{
		isStandardInput = standard;
	}
	
	public static void setInput(String filename) throws IOException
	{
		input = new File(filename);
		inputreader = new FileReader(input);
		in = new BufferedReader(inputreader);
	}
	
	public static void setOutput(String filename) throws IOException
	{
		output = new File(filename);
		outputwriter = new FileWriter(output);
		out = new BufferedWriter(outputwriter);
	}
	
	public static void close() throws IOException
	{
		if(in != null) in.close();
		if(inputreader != null) inputreader.close();
		
		if(out != null) out.flush();
		if(out != null) out.close();
		if(outputwriter != null) outputwriter.close();
	}
	
	// ************************** INPUT READING *****************
	
	static String LINE() throws IOException { return isStandardInput ? stdin.readLine() : in.readLine(); }
	static String TOKEN() throws IOException
	{
		while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(LINE());
		return st.nextToken();
	}
	static int INT() throws IOException { return Integer.parseInt(TOKEN()); }
	static long LONG() throws IOException { return Long.parseLong(TOKEN()); }
	static double DOUBLE() throws IOException { return Double.parseDouble(TOKEN()); }
	static BigInteger BIGINT() throws IOException { return new BigInteger(TOKEN()); }
}

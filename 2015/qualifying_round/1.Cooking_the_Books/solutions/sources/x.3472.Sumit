import java.util.*;

class CookingTheBooks {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int testCase = 0; testCase < T; testCase++){
            int N = sc.nextInt();
            int smallest = getSmallest(N);
            int largest = getLargest(N);
            System.out.println("Case #" + (testCase + 1) + ": " + smallest
            + " " + largest);
        }
    }

    private static int getSmallest(int num){
        if (num < 10) return num;
        int[] digits = getDigits(num);
        int smallestDigPos = -1;
        int smallestDig = digits[0];
        int zeroPos = -1;
        for(int i = 1; i < digits.length; i++){
            if (digits[i] < smallestDig){
                if(digits[i] != 0){
                    smallestDigPos = i;
                    smallestDig = digits[i];
                } else {
                    zeroPos = i;
                }
            }
        }
        if(smallestDigPos != -1) {
            exch(digits, 0, smallestDigPos);
        } else if (zeroPos != -1){
            int temp = 1;
            while (digits[temp] == 0) {
                temp++;
                if (temp >= digits.length) break;
            }
            if(temp != digits.length)
                exch(digits, temp, zeroPos);
        }

        num = getNumFromDigits(digits);
        return num;
    }

    private static int getLargest(int num){
        if (num < 10) return num;
        int[] digits = getDigits(num);
        int largestDigPos = -1;
        int largestDig = digits[0];
        int zeroPos = -1;
        for(int i = digits.length - 1; i > 0; i--){
            if (digits[i] > largestDig || digits[i] == 0){
                if(digits[i] != 0){
                    largestDigPos = i;
                    largestDig = digits[i];
                } else {
                    zeroPos = i;
                }
            }
        }
        if(largestDigPos != -1) {
            exch(digits, 0, largestDigPos);
        } else if (zeroPos != -1){
            int temp = zeroPos;
            int maxAfter0Pos = -1;
            int maxAfter0 = 0;
            while (true) {
                if(digits[temp] > maxAfter0){
                    maxAfter0Pos = temp;
                    maxAfter0 = digits[temp];
                }
                temp++;
                if (temp >= digits.length) break;
            }
            if(maxAfter0Pos != -1)
                exch(digits, maxAfter0Pos, zeroPos);
        }

        num = getNumFromDigits(digits);
        return num;
    }

    private static void exch(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private static int getNumFromDigits(int[] digits){
        int num = 0;
        for(int i = 0; i < digits.length; i++) {
            num = num * 10 + digits[i];
        }
        return num;
    }

    private static int[] getDigits(int num){
        int len = (""+num).length();
        int[] digits = new int[len];
        int pos = len - 1;
        while(num > 0){
            int rem = num % 10;
            digits[pos--] = rem;
            num = num / 10;
        }
        return digits;
    }
}

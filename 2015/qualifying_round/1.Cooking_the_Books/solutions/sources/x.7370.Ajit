//
//  main.cpp
//  FB_HackerCup
//
//  Created by Ajit on 10/01/15.
//  Copyright (c) 2015 Ajit. All rights reserved.
//

#include <iostream>
#include <fstream>
#include <string>
using namespace std;

string getSmallest(string number) {
    int i = 0, first = 0, last = 0;
    int size = (int)number.length();
    string smallest;
    char *data = (char *)number.data();
    char c = data[0];
    if (c == '1') {
        i = first = last = 1;
    }
    for (i = i + 1; i < size; i++) {
        c = data[i];
        if (c < data[last]) {
            if (c == '0') {
                if (first != 0) {
                    last = i;
                }
            } else {
                last = i;
            }
        }
    }
    if (first != last) {
        c = data[first];
        data[first] = data[last];
        data[last] = c;
    }
    smallest = smallest.append(data);
    return smallest;
}

string getLargest(string number) {
    string largest;
    int i = 0, first = 0, last = 0;
    int size = (int)number.length();
    char *data = (char *)number.data();
    char c;
    for (i = i + 1; i < size; i++) {
        c = data[i];
        if (c >= data[last]) {
            last = i;
        }
    }
    if (first != last) {
        c = data[first];
        data[first] = data[last];
        data[last] = c;
    }
    largest = largest.append(data);
    return largest;
}

int main(int argc, const char * argv[]) {
    std::ofstream output("/Users/ajit/Desktop/FB-HackerCup/FB_HackerCup/output.txt");
    std::ifstream input("/Users/ajit/Desktop/FB-HackerCup/FB_HackerCup/input.txt");
    int testCases = 0;
    string number;
    if (input.is_open() == false) {
        cout<<"Failed to open input!!\n";
        return 0;
    }
    if (output.is_open() == false) {
        cout<<"Failed to open input!!\n";
        return 0;
    }
    input>>testCases;
    getline(input, number);
    for (int i = 1; i <= testCases; i++) {
        if (getline(input, number)) {
            if (number.length() == 1) {
                output<<"Case #"<<i<<": "<<number<<" "<<number<<endl;
                continue;
            }
            output<<"Case #"<<i<<": "<<getSmallest(number)<<" "<<getLargest(number)<<endl;
        }
    }
    input.close();
    output.close();
    return 0;
}

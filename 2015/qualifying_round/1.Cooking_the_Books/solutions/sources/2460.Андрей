#include <cstdio>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <cinttypes>
#include <iostream>
#include <vector>
#include <algorithm>

bool non_zero(int32_t x) {
  return x > 0;
}

int32_t make_number(const std::vector<int32_t> &digits) {
  int32_t answer = 0;
  for (size_t i = 0; i < digits.size(); ++i)
    answer = (answer * 10) + digits[i];
  return answer;
}

std::pair<int32_t, int32_t> solve(int32_t n) {
  if (n == 0) {
    return std::make_pair(0, 0);
  } else {
    int32_t small = n;
    int32_t large = n;

    std::vector<int32_t> digits;
    while (n > 0) {
      digits.push_back(n % 10);
      n /= 10;
    }
    std::reverse(digits.begin(), digits.end());

    for (size_t i = 0; i < digits.size(); ++i)
      for (size_t j = i + 1; j < digits.size(); ++j) {
        if ((i == 0) && (digits[j] == 0))
          continue;

        std::swap(digits[i], digits[j]);
        auto number = make_number(digits);

        if (number < small)
          small = number;
        else if (number > large)
          large = number;

        std::swap(digits[i], digits[j]);
      }

    return std::make_pair(small, large);
  }
}

int main() {
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);

  int32_t t, n;
  std::scanf("%" SCNd32, &t);
  for (int32_t i = 0; i < t; ++i) {
    scanf("%" SCNd32, &n);
    auto answer = solve(n);
    std::printf("Case #%" PRId32 ": %" PRId32 " %" PRId32 "\n", i + 1, answer.first, answer.second);
  }

  return 0;
}

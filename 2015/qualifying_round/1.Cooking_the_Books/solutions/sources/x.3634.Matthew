#!/usr/bin/python3
# Cooking the Books.py
# Created by Matthew Cole on 1/8/15.
import sys

def swap_for_max(number):
	#INPUT: string representation of a number
	#OUTPUT: string representation of the largest number that can be created
	#		 by swapping one digit from the input number with any other digit in input number
	if (number == 0): return 0
	#Generate a list of numbers from the original number
	number = str(number)
	original = [int(n) for n in number]
	
	#Sort the digits in original from largest to smallest
	copy = original.copy()
	copy.sort(reverse=True)

	#While the sorted digits match the original digits, append them to output
	#Until either all digits but one have been appended, or a mismatch occurs
	output = []
	while((original[0] == copy[0]) and (len(original) > 1)):
		output.append(original.pop(0))
		copy.pop(0)
	
	#Find the item at copy[0] at max index in original,
	#Swap that digit in original with the first digit in original
	max_index = len(original) - 1
	while (original[max_index] != copy[0]): 
		max_index -= 1
	temp = original[0]
	original[0] = copy[0]
	original[max_index] = temp
	
	#Append the now single-digit-swapped original substring to output
	for item in original:
		output.append(item)
	
	#Return a string of all items in output joined
	output = [str(n) for n in output]
	return ("".join(output))

def swap_for_min(number):
	#INPUT: string representation of a number
	#OUTPUT: string representation of the largest number that can be created
	#		 by swapping one digit from the input number with any other digit in the input number
	if (number == 0): return 0
	#Generate a list of numbers from the original number
	number = str(number)
	original = [int(n) for n in number]
	
	#Sort the digits in copy from smallest to largest
	#and find the first non-zero in copy
	copy = original.copy()
	copy.sort()
	non_zero_copy = copy.copy()
	while (non_zero_copy[0] == 0):
		non_zero_copy = non_zero_copy[1:]
	
	#Determine output
	output = []
	#If there are no 0 in copy, swap using copy 
	if (0 not in copy):
		#Pop to output until there's a digit mismatch or original is empty
		while(original[0] == copy[0]) and (len(original) -1 > 0):
			output.append(original.pop(0))
			copy.pop(0)
		#Conduct the swap
		min_index = original.index(copy[0])
		temp = original[0]
		original[0] = original[min_index]
		original[min_index] = temp
		#Pop from original until it's empty
		while (len(original) > 0):
			output.append(original.pop(0))
	#If there is a zero in copy,
	else:
		#if the first digit is the smallest non_zero_copy digit, pop it from original and copy.
		if (original[0] == non_zero_copy[0]):
			output.append(original.pop(0))
			copy.pop(copy.index(non_zero_copy[0]))
		#Pop to output until there's a digit mismatch or the original is empty
		while(original[0] == copy[0]) and (len(original) - 1 > 0):
			output.append(original.pop(0))
			copy.pop(0)
		#Conduct the swap
		min_index = original.index(copy[0])
		temp = original[0]
		original[0] = original[min_index]
		original[min_index] = temp
		#Pop from original until it's empty
		while (len(original) > 0):
			output.append(original.pop(0))
		
	#Return a string of all items in output joined
	output = [str(n) for n in output]
	return("".join(output))
		
#Collect inputs
_ = input()
cases = [int(n) for n in sys.stdin]
i = 1

#Print outputs
for case in cases:
	big = swap_for_max(case)
	small = swap_for_min(case)
	print("Case #%i: %s %s" %(i, small, big))
	i += 1
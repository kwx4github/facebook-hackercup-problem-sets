import java.io.File;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    static Scanner in;
    static FileWriter out;

    public static void main(String[] args) {
        try {
            precompute();
            String ip = "cooking_the_books";
            in = new Scanner(new File(ip+".txt"));
            out = new FileWriter(ip+"-op.txt");
            int t = in.nextInt();
            for (int i = 1; i <= t; i++) {
                solve(i);
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void solve(int i) throws Exception {
        out.write("Case #" + i + ": ");
        long n = in.nextInt();
        int j,k;
        char[] ns =new String(n+"").toCharArray();
        long maxYet= n,minYet = n;
        for(j=0;j<ns.length;++j) {
            for(k=j+1;k<ns.length;++k) {
                if (j!=ns.length-1 && ns[k] != '0') {
                    long res = calc(j, k, ns);
                    maxYet = Math.max(maxYet, res);
                    minYet = Math.min(minYet, res);
                }
            }
        }
        out.write(minYet+" "+maxYet+"\n");
    }

    private static long calc(int j, int k, char[] ns) {
        swap(ns,j,k);
        long res =0;
        for (int i = 0; i < ns.length; i++) {
            res = (res*10) + (ns[i]-'0');
        }
        swap(ns,j,k);
        return res;
    }
    static void swap(char ns[],int j,int k) {
        char tmp =ns[j];
        ns[j] =ns[k];
        ns[k] =tmp;
    }
    static void precompute() {

    }

}
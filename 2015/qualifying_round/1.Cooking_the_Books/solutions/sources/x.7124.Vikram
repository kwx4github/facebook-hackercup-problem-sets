#include <string>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <sstream>
#include <cstddef>
#include <algorithm>
#include <utility>
#include <iterator>
#include <numeric>
#include <list>
#include <complex>
#include <cstdio>
#include <climits>
#include <iostream>
#include <fstream>

using namespace std;

int main()
{
	freopen("Input.txt", "r", stdin);
	freopen("Output.txt", "w", stdout);
	int t;

	scanf("%d", &t);
	int count = 0;
	while (t--)
	{
		char inp[15];
		scanf("%s", &inp);
		count++;
		int maxValue = -1;
		int minValue = 14;
		int minIndex = 0;
		int maxIndex = -1;
		int maxSetIndex = 0;
		int minSetIndex = 0;

		for (int i = 0; i < strlen(inp); i++)
		{
			maxValue = max(inp[i] - '0', maxValue);
			if (maxValue == inp[i] - '0')
				maxIndex = i;

			if (inp[i] == '0')
				continue;

			minValue = min(inp[i] - '0', minValue);
			if (minValue == inp[i] - '0')
				minIndex = i;
		}

		if (maxValue == inp[0]-'0')
		{
			int x = 0;
			while (inp[x] - '0' == maxValue)
				x++;
			maxValue = -1;
			for (int i = x; i < strlen(inp); i++)
			{
				if (maxSetIndex == 0)
					maxSetIndex = i;
				maxValue = max(inp[i] - '0', maxValue);
				if (maxValue == inp[i] - '0')
					maxIndex = i;
			}
		}
			

		if (minValue == inp[0]-'0')
		{
			minValue = 10;
			for (int i = 1; i < strlen(inp); i++)
			{
				if (minSetIndex == 0)
					minSetIndex = i;
				minValue = min(inp[i] - '0', minValue);
				if (minValue == inp[i] - '0')
					minIndex = i;
			}
		}
			
		char maxNumber[15];
		char minNumber[15];

		strcpy(maxNumber, inp);
		strcpy(minNumber, inp);

		maxNumber[maxSetIndex] = inp[maxIndex];
		maxNumber[maxIndex] = inp[maxSetIndex];

		minNumber[minSetIndex] = inp[minIndex];
		minNumber[minIndex] = inp[minSetIndex];

		printf("Case #%d: %s %s\n", count, minNumber, maxNumber);
	}

	return 0;
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class CookBook {

    public static void main(String[] args) {
        
        try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {
            
            int T = Integer.parseInt(br.readLine().toString());
            
            for (int i = 0; i < T; i++) {
                
                StringBuilder sb = new StringBuilder("Case #" + (i + 1) + ": ");
                
                String number = br.readLine();
                Integer N = Integer.parseInt(number);
                String min = "";
                String max = "";
                
                if (N < 10) {
                    min = number;
                    max = number;
                    
                } else if (N < 100){
                    if (N % 10 == 0) {
                        min = number;
                        max = number;
                    } else {
                        String[] digits = number.split("(?!^)");
                        if (Integer.parseInt(digits[0]) >= Integer.parseInt(digits[1])) {
                            min = digits[1] + digits[0];
                            max = number;
                        } else {
                            min = number;
                            max = digits[1] + digits[0];
                        }
                    }
                
                } else {
                    String[] digits = number.split("(?!^)");
                    int[] intDigits = new int[digits.length];
                    
                    for (int j = 0; j < digits.length; j++) {
                        intDigits[j] = Integer.parseInt(digits[j]);
                    }
                    
                    int[] sortedDigits = Arrays.copyOf(intDigits, intDigits.length);
                    Arrays.sort(sortedDigits);
                    
                    boolean maxFound = false;
                    boolean minFound = false;
                    for (int j = 0; j < intDigits.length; j++) {
                        if (intDigits[j] < sortedDigits[sortedDigits.length -1 -j]) {
                            String key = ((Integer) sortedDigits[sortedDigits.length - 1 - j]).toString();

                            max = swapDigits(digits, key, j);
                            maxFound = true;
                            break;
                        }
                    }

                    if (!maxFound) {
                        max = number;
                    }
                    
                    digits = number.split("(?!^)");
                    if (sortedDigits[0] != 0) {
                        for (int j = 0; j < sortedDigits.length; j++) {
                            if (sortedDigits[j] < intDigits[j]) {
                                String key = ((Integer) sortedDigits[j]).toString();
                                
                                min = swapDigits(digits, key, j);
                                minFound = true;
                                break;
                            }
                        }
                    } else {
                        int minDigitIndex = Arrays.binarySearch(sortedDigits, 1);
                        
                        if (minDigitIndex < 0) {
                            minDigitIndex = -minDigitIndex - 1;
                        }
                        
                        int diff = 1;
                        for (int j = 0; j < sortedDigits.length; j++) {

                            if (j == minDigitIndex + 1) {
                                diff = 0;
                            }

                            if (j == 0) {
                                if (sortedDigits[minDigitIndex] < intDigits[j]) {
                                    String key = ((Integer) sortedDigits[minDigitIndex]).toString();
                                    
                                    min = swapDigits(digits, key, 0);
                                    minFound = true;
                                    break;
                                }
                            } else {
                                if (sortedDigits[j - diff] < intDigits[j]) {
                                    String key = ((Integer) sortedDigits[j - diff]).toString();
                                    
                                    min = swapDigits(digits, key, j);
                                    minFound = true;
                                    break;
                                }
                            }
                        }
                        
                    }

                    if (!minFound) {
                        min = number;
                    }
                    
                }
                
                sb.append(min + " " + max);
                System.out.println(sb);
            }
            
        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }

    private static String swapDigits(String[] digits, String key, int index) {
        int swapIndex = -1;

        for (int i = digits.length -1; i > 0; i--) {
            if (digits[i].equals(key)) {
                swapIndex = i;
                break;
            }
        }

        String temp = digits[swapIndex];
        digits[swapIndex] = digits[index];
        digits[index] = temp;

        StringBuilder sb = new StringBuilder();
        for (String s : digits) {
            sb.append(s);
        }

        return sb.toString();
    }

}

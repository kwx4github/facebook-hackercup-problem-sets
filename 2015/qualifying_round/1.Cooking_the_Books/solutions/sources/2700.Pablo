#!/usr/bin/ruby
# require 'matrix'
# require 'set'

class Object
  def in?(container)
    container.include?(self)
  end
end

class Array
  def clip(n = 1)
    take size - n
  end

  def sum
    inject(:+)
  end
end

class IO
  def rl
    readline.chomp
  end

  def read_integer
    rl.to_i
  end

  def read_float
    rl.to_f
  end

  def read_array
    rl.split ' '
  end

  def read_array_integers
    read_array.map(&:to_i)
  end

  def read_array_floats
    read_array.map(&:to_f)
  end

  def read_matrix(rows, cols)
    lines = 1.upto(rows).map do |i|
      read_array_integers
    end

    Matrix.build(rows, cols) do |row, col|
      lines[row][col]
    end
  end
end

class FacebookHackerCupSolver
  def solve
    1.upto(STDIN.read_integer) do |test|
      STDOUT << "Case ##{test}: #{solve_test}\n"
    end
  end

  def solve_test
    number = STDIN.rl

    min_idx = nil
    min_idx_xch = nil

    max_idx = nil
    max_idx_xch = nil

    number.chars.each_with_index do |digit, idx|
      digit = digit.to_i

      if min_idx_xch.nil?
        number.chars.each_with_index do |xch_digit, xch_idx|
          next if xch_idx <= idx
          xch_digit = xch_digit.to_i

          if xch_digit < digit && (idx > 0 || xch_digit != 0) && (min_idx_xch.nil? || xch_digit <= number[min_idx_xch].to_i)
            min_idx = idx
            min_idx_xch = xch_idx
          end
        end
      end

      if max_idx_xch.nil?
        number.chars.each_with_index do |xch_digit, xch_idx|
          next if xch_idx <= idx
          xch_digit = xch_digit.to_i

          if xch_digit > digit && (max_idx_xch.nil? || xch_digit >= number[max_idx_xch].to_i)
            max_idx = idx
            max_idx_xch = xch_idx
          end
        end
      end
    end

    min_number = number.dup
    min_number[min_idx], min_number[min_idx_xch] = min_number[min_idx_xch], min_number[min_idx] if min_idx_xch

    max_number = number.dup
    max_number[max_idx], max_number[max_idx_xch] = max_number[max_idx_xch], max_number[max_idx] if max_idx_xch

    "#{min_number} #{max_number}"
  end
end

FacebookHackerCupSolver.new.solve

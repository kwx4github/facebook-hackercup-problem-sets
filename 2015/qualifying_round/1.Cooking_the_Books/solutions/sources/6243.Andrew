import itertools

def gen_swaps(num):
    if num == 0:
        return [0]
    digits = list(str(num))
    swaps = set()
    for i in range(len(digits)):
        for j in range(i, len(digits)):
            swap = digits[:]
            swap[i], swap[j] = swap[j], swap[i]
            swaps.add(tuple(swap))
    return [int(''.join(swap)) for swap in swaps if swap[0] != '0']

def assert_swapped(a, b):
    s1, s2 = str(a), str(b)
    if len(s1) != len(s2):
        raise ValueError("Undefined for sequences of unequal length")
    return sum(ch1 != ch2 for ch1, ch2 in zip(s1, s2)) in (0, 2)

def main():
    T = int(raw_input())
    for case in range(T):
        N = int(raw_input())
        swaps = gen_swaps(N)
        print "Case #{}: {} {}".format(case + 1, min(swaps), max(swaps))

if __name__ == "__main__":
    main()

import javax.imageio.IIOException;
import java.io.*;
import java.util.Arrays;

public class Main {

    public static char[] swapNumbers(char[] inputArray, int firstIndex, int secondIndex) {
        if (inputArray[secondIndex] == '0') {
            return inputArray;
        }
        char[] resultArray = Arrays.copyOf(inputArray,inputArray.length);
        char temp = resultArray[firstIndex];
        resultArray[firstIndex] = resultArray[secondIndex];
        resultArray[secondIndex] = temp;
        return resultArray;
    }

    public static void findBounds(long number, int iteration, StringBuilder strBuilder) {
        char[] digitSeq = Long.toString(number).toCharArray();
        long[] minmax = findBounds(digitSeq, 0, 1, new long[]{number,number});
        strBuilder.append("Case #");
        strBuilder.append((iteration + 1));
        strBuilder.append(": ");
        strBuilder.append(minmax[0]);
        strBuilder.append(" ");
        strBuilder.append(minmax[1]);
        strBuilder.append("\n");
    }

    public static long[] findBounds(char[] array, int fixedIndex, int floatIndex, long[] minmax) {
        if (fixedIndex == array.length - 1) {
            return minmax;
        } else if (floatIndex > array.length - 1) {
            return findBounds(array,fixedIndex + 1, fixedIndex + 2, minmax);
        } else {
            long number = Long.parseLong(new String(swapNumbers(array, fixedIndex, floatIndex)));
            if (number < minmax[0]) {
                minmax[0] = number;
            }
            if (number > minmax[1]) {
                minmax[1] = number;
            }
            return findBounds(array,fixedIndex, floatIndex + 1, minmax);
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(args[0]));
        int numberToProcess = Integer.parseInt(reader.readLine().toString());
        StringBuilder strBuilder = new StringBuilder();
        for (int i = 0; i < numberToProcess; i++) {
            long number = Long.parseLong(reader.readLine());
            findBounds(number,i,strBuilder);
        }
        BufferedWriter writer = new BufferedWriter(new FileWriter(args[1]));
        writer.write(strBuilder.toString());
        writer.flush();
        reader.close();
    }
}

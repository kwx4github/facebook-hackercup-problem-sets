#include <iostream>
#include <vector>

#ifdef DEBUG_MODE
#define print(x) cout << #x << " = " << x << endl
#define debug(x) x
#else
#define print(x)
#define debug(x)
#endif

typedef short int int16;
typedef unsigned short int uint16;
typedef int int32;
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;

using namespace std;

class Application
{
public:
    inline void Run();
private:
    //methods
    inline void LoadData();
    inline void Solve();
    //fields
    string number_;
};

int main()
{
    ios_base::sync_with_stdio(false);
    Application app;
    app.Run();
}

inline void Application::LoadData()
{
    cin >> number_;
}

inline void Application::Solve()
{
    vector <vector <uint32> > pos(10);
    
    for(int i = 0; i < number_.size(); ++i)
    {
        pos[number_[i] - '0'].push_back(i);
    }
    
    // Find Min
    // pos_[0]
    
    bool min_founded = false;
   
    for(int i = 1; i < number_[0] - '0'; ++i)
    {
        if(pos[i].size() > 0)
        {
            min_founded = true;
            char temp = number_[0];
            number_[0] = number_[pos[i].back()];
            number_[pos[i].back()] = temp;
            
            cout << number_ << ' ';
            
            temp = number_[0];
            number_[0] = number_[pos[i].back()];
            number_[pos[i].back()] = temp;
            break;
        }
    }
    
    
    if(!min_founded)
    {
        for(int i = 1; i < number_.size(); ++i)
        {
            for(int j = 0; j < number_[i] - '0'; ++j)
            {
                if(pos[j].size() > 0 && pos[j].back() > i)
                {
                    min_founded = true;
                    char temp = number_[i];
                    number_[i] = number_[pos[j].back()];
                    number_[pos[j].back()] = temp;
                    cout << number_ << ' ';
                    
                    temp = number_[i];
                    number_[i] = number_[pos[j].back()];
                    number_[pos[j].back()] = temp;
                    break;
                }
            }
                        
            if(min_founded)
                break;
        }
    }
    
    if(!min_founded)
        cout << number_ << ' ';
    
    
    
    bool max_founded = false;
    
    for(int i = 0; i < number_.size(); ++i)
    {
        for(int j = 9; j > number_[i] - '0'; --j)
        {
            if(pos[j].size() > 0 && pos[j].back() > i)
            {
                max_founded = true;
                char temp = number_[i];
                number_[i] = number_[pos[j].back()];
                number_[pos[j].back()] = temp;
                
                cout << number_ << "\n";
                
                temp = number_[i];
                number_[i] = number_[pos[j].back()];
                number_[pos[j].back()] = temp;
                
                break;
            }
           
        }

             if(max_founded)
                break;
    }
    
    if(!max_founded)
        cout << number_ << "\n";
    
}

inline void Application::Run()
{
    int test_number_;
    cin >> test_number_;
    
    for(int i = 0; i < test_number_; ++i)
    {
        cout << "Case #" << i + 1 << ": ";
        LoadData();
        Solve();
    }

}

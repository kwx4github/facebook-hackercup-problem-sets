#include <cstdio>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

void make_smaller(
    vector<int>* smaller,
    int pos,
    bool first) {
  if (pos == 0) {
    return;
  }
  int s = (*smaller)[pos];
  int p = pos;
  for (int j = 0; j < pos; ++j) {
    if ((*smaller)[j] < s) {
      if ((*smaller)[j] != 0 || !first) {
        s = (*smaller)[j];
        p = j;
      }
    }
  }
  if (p != pos) {
    swap((*smaller)[p], (*smaller)[pos]);
  } else {
    make_smaller(smaller, pos - 1, false);
  }
}

void make_larger(vector<int>* larger, int pos) {
  if (pos == 0) {
    return;
  }
  int s = (*larger)[pos];
  int p = pos;
  for (int j = 0; j < pos; ++j) {
    if ((*larger)[j] > s) {
      s = (*larger)[j];
      p = j;
    }
  }
  if (p != pos) {
    swap((*larger)[p], (*larger)[pos]);
  } else {
    make_larger(larger, pos - 1);
  }
}

int main() {
  int T;
  scanf("%d", &T);
  for (int t = 0; t < T; ++t) {
    int n;
    scanf("%d", &n);
    if (n == 0) {
      printf("Case #%d: 0 0\n", t + 1);
      continue;
    }
    vector<int> num;
    while (n > 0) {
      num.push_back(n%10);
      n /= 10;
    }
    vector<int> smaller = num, larger = num;
    make_smaller(&smaller, num.size() - 1, true);
    make_larger(&larger, num.size() - 1);

    int smaller_output = 0, larger_output = 0;
    for (int i = (int)smaller.size() - 1; i >= 0; --i) {
      smaller_output = 10*smaller_output + smaller[i];
      larger_output = 10*larger_output + larger[i];
    }
    printf("Case #%d: %d %d\n", t + 1, smaller_output, larger_output);
  }
  return 0;
}

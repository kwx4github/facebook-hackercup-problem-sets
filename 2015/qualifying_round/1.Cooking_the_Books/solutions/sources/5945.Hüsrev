import scala.io.Source
import java.io.File

object FBHC1 extends App {
  val values = Source.fromFile("/home/husrev/Downloads/cooking_the_books.txt").getLines.drop(1).toList.map(_.toInt)
  val results = values map maxAndMinFor
  val resultsWithIndexes = results zipWithIndex;
  val resultLines = resultsWithIndexes map { case ((max,min),index) => s"Case #${index+1}: $min $max"}
  val output = printToFile(new File("/home/husrev/fbhc1.txt")) { pw => 
    resultLines.foreach(pw.println(_))
  }
  def maxAndMinFor(a: Int) = if (a < 10) (a, a) else {
    val aString = a.toString
    val digits = aString.length
    //since max number is 9 digits, there is only 36 possibilities, so brute force is very efficient :) 
    val combinationsOfSwaps = for (i <- 0 until digits; j <- 0 until i) yield (i, j)
    val combinations = aString :: combinationsOfSwaps.map {
      case (a, b) =>
        aString.zipWithIndex.map {
          case (letter, index) =>
            if (index == a) aString(b)
            else if (index == b) aString(a)
            else letter
        }.mkString("")
    }.toList

    val validCombinations = combinations.filterNot(_(0) == '0').map(_.toInt)
    val max = validCombinations.max
    val min = validCombinations.min
    (max, min)
  }
  def printToFile(f: java.io.File)(op: java.io.PrintWriter => Unit) {
  val p = new java.io.PrintWriter(f)
  try { op(p) } finally { p.close() }
}
}


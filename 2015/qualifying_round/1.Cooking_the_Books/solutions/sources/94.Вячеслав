#undef NDEBUG
#ifdef _DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define y1 __y1
#define endl '\n'
#define sqr(x) (x) * (x)

typedef long long li;
typedef long double ld;
typedef pair<ld, ld> pt;

const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);

bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}

inline int myrand()
{
    return rand() ^ (rand() << 15);
}

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int dxh[] = {-2, -1, 1, 2, 2, 1, -1, -2};
const int dyh[] = {1, 2, 2, 1, -1, -2, -2, -1};

const int N = 2e5;

int n;

inline bool read()
{
	return (cin >> n);
}

inline void solve()
{
	vector<int> digs;
	int nn = n;
	while(nn > 0)
	{
		digs.pb(nn % 10);
		nn /= 10;
	}

	if(n == 0)
		digs.pb(0);

	reverse(all(digs));
	
	int ansmin = 2 * INF, ansmax = -2 * INF;

	forn(i, sz(digs))
	{
		forn(j, sz(digs))
		{
			//cerr << "i j == " << i << ' ' << j << endl;
			vector<int> d = digs;
			swap(d[i], d[j]);
			if(d[0] == 0 && sz(d) > 1)
				continue;

			//cerr << "WTF" << endl;
			int cur = 0, ppow = 1;
			for(int k = sz(d) - 1; k >= 0; k--)
			{
				cur += d[k] * ppow;
				ppow *= 10;
			}

			/*cerr << "vec == " << sz(d) << endl;
			forn(k, sz(d))
				cerr << d[k] << ' ';
			cerr << endl;*/

			ansmax = max(ansmax, cur);
			ansmin = min(ansmin, cur);
		}
	}

	cout << ansmin << ' ' << ansmax << endl;
	return;
}

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    cout << setprecision(15) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

	int T;
	cin >> T;

	forn(tt, T)
	{
		assert(read());
		cout << "Case #" << tt + 1 << ": ";
		solve();
	}

    cerr << "TIME == " << clock() << " ms" << endl;
    return 0;
}
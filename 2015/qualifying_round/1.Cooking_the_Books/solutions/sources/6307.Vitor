#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>

void CookTheBooksMax(std::string& num, const std::vector<int>& ls_pos)
{
    for(int i = 0; i < num.size(); i++)
    {
        int digit = num[i] - '0';
        for(int d = 9; d > digit; d--)
        {
            if(ls_pos[d] != -1 && ls_pos[d] > i){
                char buffer = num[i];
                num[i] = num[ls_pos[d]];
                num[ls_pos[d]] = buffer;
                return;
            }
        }
    }
}

void CookTheBooksMin(std::string& num, const std::vector<int>& ls_pos)
{
    for(int i = 0; i < num.size(); i++)
    {
        int digit = num[i] - '0';
        for(int d = 0; d < digit; d++)
        {
            if(ls_pos[d] != -1 && ls_pos[d] > i){
                if(d == 0 && i == 0){
                    continue;
                }
                char buffer = num[i];
                num[i] = num[ls_pos[d]];
                num[ls_pos[d]] = buffer;
                return;
            }
        }
    }
}

int main()
{

    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int t;
    std::cin >> t;

    for(int i = 1; i <= t; i++){
        std::string n;
        std::cin >> n;


        std::vector<int> ls_pos;
        ls_pos.resize(10,-1);

        std::string max = n;
        std::string min = n;
        for(int k=0; k < n.size(); k++){
            int digit = n[k] - '0';
            if(ls_pos[digit] < k || ls_pos[digit]==-1){ //Least significant position for each digit
                ls_pos[digit] = k;
            }
        }

        CookTheBooksMax(max, ls_pos);
        CookTheBooksMin(min, ls_pos);
        std::cout << "Case #" << i << ": " << min << " " << max << std::endl;
    }
    return 0;
}


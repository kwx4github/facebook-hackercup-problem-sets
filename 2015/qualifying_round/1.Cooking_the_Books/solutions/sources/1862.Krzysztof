
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <string>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define SIZE(c) (int) (c).size()
#define FOREACH(i,c) FOR(i,0,SIZE(c)-1)
#define FORDEACH(i,c) FORD(i,SIZE(c)-1,0)
#define MIN(x,y) ( ((x) < (y))? (x) : (y) )
#define MAX(x,y) ( ((x) > (y))? (x) : (y) )
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define INF 1000000001

using namespace std;

typedef pair < int , int > PII;
typedef long long int LLI;

typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < PII > VP;
typedef vector < LLI > VL;

typedef vector < VI > VVI;
typedef vector < VL > VVL;
typedef vector < VB > VVB;

bool is_good(VI &V)
    { return (V[0] != 0); }

int eval(VI &V)
{
    int ans = 0;

    FOREACH(i,V)
        ans = (ans * 10 + V[i]);

    return ans;
}

/*************************************************************************/

int main()
{
    ios_base::sync_with_stdio(0);

    int z;
    cin >> z;

    FOR(test,1,z)
    {
        string s;
        cin >> s;

        VI V;
        FOREACH(i,s) V.PB(s[i] - '0');

        int n = SIZE(V), min_val, max_val;

        min_val = max_val = eval(V);

        FOR(i,0,n-1) FOR(j,i+1,n-1)
        {
            swap(V[i], V[j]);

            if (is_good(V))
            {
                int val = eval(V);

                min_val = MIN(min_val,val);
                max_val = MAX(max_val,val);
            }

            swap(V[i], V[j]);
        }

        cout << "Case #" << test << ": "
             <<  min_val << ' ' << max_val << '\n';
    }

    return 0;
}

/*************************************************************************/

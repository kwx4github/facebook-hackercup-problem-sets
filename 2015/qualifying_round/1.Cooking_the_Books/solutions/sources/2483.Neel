#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<long long> digarr(long long n){

	vector<long long> v;

	while(n != 0){
		int r = n%10;
		v.push_back(r);

		n=n/10;
	}

	reverse(v.begin(), v.end());

	return v;
}

long long getint(vector<long long> v){

	long long num = v[0];

	for(int i=1;i<v.size();i++){
		num = 10*num + v[i];
	}


	return num;
}


long long smallestnum(long long n){

	std::vector<long long> v = digarr(n);

	int min, minid;

	for(int i=0;i<v.size();i++){
		min =   v[i];
		minid = i;
		for(int j=i+1;j<v.size();j++){
			if(v[j] == 0 && i == 0)
				continue;

			if( v[j] <= min){
				min = v[j];
				minid = j;
			}
		}

		if(v[minid] != v[i]){
			swap(v[i],v[minid]);
			return getint(v);
		}
	}

	return n;
}

long long biggestnum(long long n){
	std::vector<long long> v =  digarr(n);

	int min, minid;
	for(int i=0;i<v.size();i++){
		min =   v[i];
		minid = i;
		for(int j=i+1;j<v.size();j++){
			if(v[j] == 0 && i == 0)
				continue;

			if( v[j] >= min){
				min = v[j];
				minid = j;
			}
		}

		if(v[minid] != v[i]){
			swap(v[i],v[minid]);
			return getint(v);
		}
	}

	return n;
}

int main(){
	int t;
	cin >> t;
	for(int tt=1;tt<=t;tt++){

		long long n;
		cin >> n;
		cout << "Case #" << tt << ":" << smallestnum(n) << " " << biggestnum(n) << endl;
	}
}
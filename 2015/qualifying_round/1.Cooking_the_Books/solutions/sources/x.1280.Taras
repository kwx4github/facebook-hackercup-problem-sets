using System;
using System.IO;
using System.Text;

namespace FacebookHackercup2015
{
    public class CookingBooks
    {
        public static void Main(string[] args)
        {
            string inputFilePath = args[0];
            
            StreamReader file = new StreamReader(inputFilePath);
            int testCases = int.Parse(file.ReadLine());
            for (int i = 0; i < testCases; i++)
			{
			    string number = file.ReadLine().Trim();
                RunCase(i + 1, number);
			}            
            
            file.Close();
        }

        private static void RunCase(int caseNumber, string number) 
        {
            byte[] array = ToArray(number);
            string maxNumber = MakeMaxNumber(array);
            string minNumber = MakeMinNumber(array);
            Console.WriteLine("Case #{0}: {1} {2}", caseNumber, minNumber, maxNumber);            
        }              
                
        private static string MakeMinNumber(byte[] array)
        {
            byte[] minNumber = MakeNumber(array, (x, y) => { return x != 0 && x < y; });
            return ToString(minNumber);
        }
                
        private static string MakeMaxNumber(byte[] array)
        {
            byte[] maxNumber = MakeNumber(array, (x, y) => { return x > y; });
            return ToString(maxNumber);
        }

        private static byte[] MakeNumber(byte[] array, Func<byte, byte, bool> criteria)
        {
            byte[] copy = CopyArray(array);
            
            for (int i = 0; i < copy.Length; i++)
            {
                int index = FindIndex(copy, i, criteria);
                if (index != i)
                {
                    Exch(copy, i, index);
                    break;
                }
            }

            return copy;
        }
        
        private static int FindIndex(byte[] array, int from, Func<byte, byte, bool> criteria)
        {
            byte value = array[from];
            int index = from;

            for (int i = from + 1; i < array.Length; i++)
            {
                if (criteria(array[i], value))
                {
                    value = array[i];
                    index = i;
                }
            }

            return index;
        }

        // utils
        private static byte[] ToArray(string number)
        {
            byte[] array = new byte[number.Length];
            for (int i = 0; i < number.Length; i++)
            {
                array[i] = CharToByte(number[i]);
            }

            return array;
        }

        private static string ToString(byte[] array)
        {
            return string.Join(string.Empty, array);
        }

        private static byte CharToByte(char c)
        {
            return (byte)(c - '0');
        }

        private static byte[] CopyArray(byte[] array)
        {
            byte[] copy = new byte[array.Length];
            array.CopyTo(copy, 0);
            return copy;
        }

        private static void Exch(byte[] array, int i, int j)
        {
            byte temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }        
    }
}

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Problem1 {

	public int n;
	public List<String> inputs;

	public Problem1 () {
		inputs = new ArrayList<String>();
	}

	/**
	 * Considering a provided integer, sorts all the digits within this integer in order to find the
	 * biggest or smallest integer that can be built based on these digits.
	 * @param input the initial integer
	 * @param direction 1 or -1, respectively specifies whether we want to find the smallest possible integer or the biggest one
	 * @return
	 */
	private static String findBoundary(String input, int direction) {
		List<Integer> digits = getNumberAsCollection(input);
		switch (direction) {
			case 1: Collections.sort(digits); break;
			default: Collections.sort(digits, Collections.reverseOrder()); break;
		}
		StringBuilder builder = new StringBuilder();
		for (Integer d : digits) {
			builder.append(d);
		}
		String preResult = builder.toString();
		return flushZeroes(preResult);
	}

	private static String flushZeroes(String preResult) {
		String withoutZeroes = preResult.replace("0", "");
		int zeroes = preResult.length() - withoutZeroes.length();
		StringBuilder builder = new StringBuilder();
		builder.append(withoutZeroes);
		for (int i=0; i<zeroes; ++i) {
			builder.append("0");
		}
		return builder.toString();

	}

	private static List<Integer> getNumberAsCollection(String input) {
		List<Integer> digits = new ArrayList<Integer>();
		for (int i=0; i<input.length(); ++i) {
			digits.add(Character.getNumericValue(input.charAt(i)));
		}
		return digits;
	}

	private static Problem1 readInputFile(String fileName) {
		BufferedReader in = null;
		try {
			in = new BufferedReader(new FileReader(fileName));
			Problem1 problem1 = new Problem1();
			if (in.ready()) {
				problem1.n = Integer.parseInt(in.readLine());
				while (in.ready()) {
					String s = in.readLine();
					problem1.inputs.add(s);
				}
			}
			return problem1;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			assert in != null;
			try {
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	public static void main(String[] args) {

		String fileName = "D:\\Downloads\\cooking_the_books.txt";
		Problem1 problem1 = readInputFile(fileName);
		int counter = 1;

		for (String s : problem1.inputs) {
			System.out.println("Case #"+counter+": " + findBoundary(s, 1) + " " + findBoundary(s, -1));
			counter++;
		}
	}
}

// Prob1 project main.go
package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"sort"
	"strconv"
	"strings"
)

func order(s []int, i bool) []int {

	if i == true { // ascending
		sort.Sort(sort.Reverse(sort.IntSlice(s)))
	} else {
		sort.Sort(sort.IntSlice(s))
		//check if the first elem if 0
		if s[0] == 0 && len(s) > 1 {
			//fmt.Println("There is 0 elemt")
			//swap the first two elem
			sort.IntSlice.Swap(s, 0, 1)
		}
	}
	return s
}

func toString(s []int) string {
	var str string
	for _, value := range s {
		str += strconv.Itoa(value)
	}
	return str
}

// readLines reads a whole file into memory
// and returns a slice of its lines.
func readLines(path string) ([]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	return lines, scanner.Err()
}

// writeLines writes the lines to the given file.
func writeLines(lines []string, path string) error {
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	w := bufio.NewWriter(file)
	for _, line := range lines {
		fmt.Fprintln(w, line)
	}
	return w.Flush()
}

func parseAtoi(line string) []int {
	var input []string
	input = strings.Split(line, "")

	num := make([]int, len(input))
	for i := 0; i < len(input); i++ {
		n, err := strconv.Atoi(input[i])
		num[i] = n
		if err != nil {
			// Invalid string
			log.Fatalf("Invalid string: %s", err)
		}
	}
	return num
}

func main() {

	// read from input file to string slice
	lines, err := readLines("input.txt")
	if err != nil {
		log.Fatalf("readLines: %s", err)
	}

	// loop from lines[1] to end, store each line to int slice, process then return
	// result is int slice, convert to string and print to output file

	var wr_lines []string

	for i := 1; i < len(lines); i++ {
		//fmt.Println(lines[i])

		// store each line -> int slice
		num := parseAtoi(lines[i])
		fmt.Println(num)

		// process
		max := order(num, true)
		fmt.Println(max)

		str_max := toString(max)
		fmt.Println(str_max)

		min := order(num, false)
		fmt.Println(min)

		str_min := toString(min)
		fmt.Println(str_min)

		// create string
		var str string
		str = str + "Case #" + strconv.Itoa(i) + ":" + " " + str_min + " " + str_max

		fmt.Println(str)

		wr_lines = append(wr_lines, str)
	}

	fmt.Println(wr_lines)

	if err := writeLines(wr_lines, "output.txt"); err != nil {
		log.Fatalf("writeLines: %s", err)
	}
}

#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>

using namespace std;

#define ll long long
#define vi vector<int>
#define pi pair<int,int>
#define pb push_back
#define mp make_pair
#define forn(i,n) for (size_t i = 0; i < n; ++i)
#define forb(i,n) for (int i = n - 1; i >= 0; --i)
                              
const double EPS = 1e-9;
const int MAXN = 666666;
const int MOD = 1e9 + 7;
const int MOD1 = 1e9 + 35011;
const int MOD2 = 1e9 + 18169;
const int INF = (1 << 30);
const long long INFl = 1e18;
                                     
char s[12];
int T, place, num, n;

int GetMinPos(int cc) {
	num = s[cc] - '0', place = cc;
	for (int i = n - 1; i >= cc; --i) {
		int cur = s[i] - '0';
		if (cc == 0 && cur == 0) continue;
		if (cur < num) {
			num = cur;
			place = i;
		}
	}
	return place;
}

int GetMaxPos(int cc) {
	num = s[cc] - '0', place = cc;
	for (int i = n - 1; i >= cc; --i) {
		int cur = s[i] - '0';
		if (cc == 0 && cur == 0) continue;
		if (cur > num) {
			num = cur;
			place = i;
		}
	}
	return place;
}

int main() {
#ifdef F0X
	freopen("input.in", "r", stdin);
	freopen("output.out", "w", stdout);
	double st = clock();
#endif

	scanf("%d\n", &T);
	for (int test = 1; test <= T; ++test) {
		gets(s);
      n = strlen(s);

		printf("Case #%d: ", test);
		//printf("Case #%d(%s): ", test, s);
		forn(i,n) {
			place = GetMinPos(i);
			if (i < place) {
				swap(s[i], s[place]);
				printf("%s ", s);
				swap(s[i], s[place]);
				break;
			}
			if (i == n - 1) {
				printf("%s ", s);
				break;
		  	}
		}
      
      forn(i,n) {
			place = GetMaxPos(i);
			if (i < place) {
				swap(s[i], s[place]);
				printf("%s\n", s);
				swap(s[i], s[place]);
				break;
			}
			if (i == n - 1) {
				printf("%s\n", s);
				break;
		  	}
		}
	}

      
                                  
#ifdef F0X
	cerr << "Time is " << (clock() - st) / CLOCKS_PER_SEC << endl;
#endif
	return 0;
}
#include <stdio.h>
#include <assert.h>

void get_vector (int *v, int n)
{
  int aux[20] = {0};

  int i;
  for (i = 0; n != 0; ++i)
    {
      aux[i] = n % 10;
      n /= 10;
    }

  v[0] = i;
  int j;
  for (j = 1; j <= i; ++j)
    v[j] = aux [i - j];
}

long long to_number (int *v)
{
  long long rez = 0;
  
  int i;
  for (i = 1; i <= v[0]; ++i)
    rez = rez * 10 + v[i];

  return rez;
}

void swap (int *a, int *b)
{
  int tmp = *a;
  *a = *b;
  *b = tmp;
}

long long brut_min (int *v)
{
  int n = v[0];

  long long min = to_number (v);
  
  int i, j;
  for (i = 1; i <= n; ++i)
    {
      for (j = i + 1; j <= n; ++j)
	{
	  if (i == 1 && v[j] == 0)
	    continue;
	  
	  swap (&v[i], &v[j]);
	  
	  if (min > to_number (v))
	    min = to_number (v);

	  swap (&v[i], &v[j]);	    
	}
    }

  return min;
}

long long brut_max (int *v)
{
  int n = v[0];

  long long max = to_number (v);
  
  int i, j;
  for (i = 1; i <= n; ++i)
    {
      for (j = i + 1; j <= n; ++j)
	{
	  if (i == 1 && v[j] == 0)
	    continue;
	  
	  swap (&v[i], &v[j]);
	  
	  if (max < to_number (v))
	    max = to_number (v);

	  swap (&v[i], &v[j]);	    
	}
    }

  return max;
}

int main ()
{
  int t;
  assert (scanf ("%d", &t) == 1);

  int nr_of_test;
  for (nr_of_test = 1; nr_of_test <= t; ++nr_of_test)
    {
      long long n;
      assert (scanf ("%lld", &n) == 1);

      if (n == 0)
	{
	  printf ("Case #%d: 0 0\n", nr_of_test);
	  continue;
	}

      int v[20];
      get_vector (v, n);

      printf ("Case #%d: %lld %lld\n", nr_of_test, brut_min (v), brut_max(v));
    }
  
  return 0;
}

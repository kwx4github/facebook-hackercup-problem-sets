import sys


def lastIndexOf(lst, item):
    lstlen = len(lst)
    return lstlen - 1 - list(reversed(lst)).index(item)

class Case:
    @classmethod
    def parse(cls, line):
        return Case(line.strip())

    def __init__(self, number):
        self.number = number

    def solve(self):
        digs = list(map(int, self.number))
        if len(digs)<=1:
            return [self.number, self.number]

        min_dig = min([x for x in digs if x > 0])
        if min_dig == digs[0]:
            min_number = self.number
        else:
            idx = lastIndexOf(digs, min_dig)
            min_number = digs[:]
            min_number[0] = min_dig
            min_number[idx] = digs[0]
            min_number = ''.join(map(str, min_number))

        max_dig = max(digs)
        if max_dig == digs[0]:
            max_number = self.number
        else:
            idx = lastIndexOf(digs, max_dig)
            max_number = digs[:]
            max_number[0] = max_dig
            max_number[idx] = digs[0]
            max_number = ''.join(map(str, max_number))

        return [min_number, max_number]

def main(fin, fout):
    fin = open(fin)
    fout = open(fout, 'w')
    count = int(next(fin).strip())
    for i in range(count):
        case = Case.parse(next(fin))
        solution = case.solve()
        print("Case #", i+1, ": ", solution[0], " ", solution[1], file=fout, sep='')
        print("Case #", i+1, ": ", solution[0], " ", solution[1], sep='')

if __name__=='__main__':
    if len(sys.argv)<3:
        print("Usage:", __file__, "<input file> <output file>")
        exit()
    main(sys.argv[1], sys.argv[2])
    print("Done!")

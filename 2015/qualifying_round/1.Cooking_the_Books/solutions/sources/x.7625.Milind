
#include<bits/stdc++.h>
using namespace std;
void merge(int a[],int lo,int mid,int hi)
{
	int k=0;
	int b[hi-lo+1];
	int i=lo;
	int j=mid+1;
	while(i<= mid && j <= hi)
	{
		if(a[i] < a[j]) 
		{		
			b[k++]=a[i++];
		}
		else
		{
			b[k++]=a[j++];
		}
	}
	while(i<=mid)
	{
		b[k++]=a[i++];
	}
	while(j<=hi)
	{
		
		b[k++]=a[j++];
	}
	for(int q=hi;q>=lo;q--)
	{
		a[q]=b[--k];
	}	
}
void mergesort(int a[],int lo,int hi)
{
	if(lo < hi)
	{
		int mid=(lo+hi)/2;
		mergesort(a,lo,mid);
		mergesort(a,mid+1,hi);
		merge(a,lo,mid,hi);	
	}
}
void max_num(int a[],int ans_max[],int ans_min[],int pos[],int pos_max[],int len,int t)
{
	int temp_value;
	int temp_pos;
	int tt=0;
	for(int x=len-1;x>=0;x--)
	{
		if(ans_max[tt]==a[x])
		{
			tt++;
			//x=len;
			//continue;
		}
		else if(ans_max[tt]<a[x])
		{
			temp_value=ans_max[tt];
			temp_pos=x;
			ans_max[tt]=a[x];
			ans_max[pos_max[x]]=temp_value;	
			break;	
		}
		
	}
	tt=0;
	for(int x=0;x<len;x++)
	{
		if(a[x]==0 && tt==0)
		{
			tt++;
			x=0;
		}
		else
		{
			if(ans_min[tt]>a[x])
		{	
			if(x <len-1)
			{
				if(a[x+1]==a[x])
				{
					continue;
				}
				else
				{
				temp_value=ans_min[tt];
				temp_pos=x;
				ans_min[tt]=a[x];
				ans_min[pos[x]]=temp_value;
				break;
				}		
			}
			else
			{
				temp_value=ans_min[tt];
				temp_pos=x;
				ans_min[tt]=a[x];
				ans_min[pos[x]]=temp_value;
				break;
			}	
		}
		else if(ans_min[tt]==a[x])
		{
			tt++;
		}
		else
		{
			continue;
		}
		}
	}
	long long int sum_max=0;
	long long int pro_max=1;
	long long int sum_min=0;
	long long int pro_min=1;
	for(int i2=len-1;i2>=0;i2--)
	{
		sum_max=sum_max+ans_max[i2]*pro_max;
		pro_max=pro_max*10;
	}	
	for(int i2=len-1;i2>=0;i2--)
	{
		sum_min=sum_min+ans_min[i2]*pro_min;
		pro_min=pro_min*10;
	}
	if(t==1)
	{
		cout<<"Case #"<<t<<":"<<" "<<sum_min<<" "<<sum_max;
	}
	else
	{
		cout<<endl<<"Case #"<<t<<":"<<" "<<sum_min<<" "<<sum_max;
	}
}
int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int t;
	scanf("%d",&t);
	long long int n;
	long long int temp;
	int i1;
	int len;
	for(int i=0;i<t;i++)
	{
		scanf("%d",&n);
		temp=n;
		len=0;
		while(temp!=0)
		{
			len++;
			temp=temp/10;	
		}
		temp=n;
		int a[len];
		int ans_max[len];
		int ans_min[len];
		int pos_max[len];
		int pos[len];
		i1=len-1;
		while(temp!=0)
		{
			a[i1--]=temp%10;
			temp=temp/10;
		}
		int pos_help[len];
		int pos_help1[len];
		for(int k=0;k<len;k++)
		{
			ans_max[k]=a[k];
			ans_min[k]=a[k];
			pos_help1[k]=a[k];
			pos_help[k]=a[k];	
		}
		mergesort(a,0,len-1);
		for(int k=0;k<len;k++)
		{			
		}
		for(int x1=0;x1<len;x1++)
		{
			for(int x2=0;x2<len;x2++)
			{
				if(a[x1]==pos_help[x2])
				{	
					pos_help[x2]=-1;
					pos[x1]=x2;
					break;		
				}
	
			}
		}
		
		for(int x1=0;x1<len;x1++)
		{
			for(int x2=len-1;x2>=0;x2--)
			{
				if(a[x1]==pos_help1[x2])
				{	
					pos_help1[x2]=-1;
					pos_max[x1]=x2;
					break;		
				}
	
			}
		}
		
		max_num(a,ans_max,ans_min,pos,pos_max,len,i+1);
		
		
	}
	return 0;
}

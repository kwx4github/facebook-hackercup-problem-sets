
def swap_front(in_list, pos):
    temp = in_list[0]
    in_list[0] = in_list[pos]
    in_list[pos] = temp
    return in_list

def solve_min(in_str):
    # find minimum value that should be in front
    min_val = "0"
    for item in sorted(in_str):
        if item == "0":
            continue
        min_val = item
        break
    # find last index of solution
    index = in_str.rfind(min_val)
    return "".join(
        swap_front(list(in_str), index)
    )

def solve_max(in_str):
    # find max value that should be in front
    max_val = "0"
    for item in sorted(in_str, reverse=True):
        if item == "0":
            continue
        max_val = item
        break
    # find first index of solution
    index = in_str.find(max_val)
    return "".join(
        swap_front(list(in_str), index)
    )

def solve_all(filepath):
    with open(filepath, "r") as fp:
        num_lines = int(fp.readline().strip())
        for i in xrange(0, num_lines):
            input_string = fp.readline().strip()
            print "Case #{0}: {1} {2}".format(
                i+1,
                solve_min(input_string).strip(),
                solve_max(input_string).strip()
            )

<?php
/**
 * Facebook Hacker Cup 2015 Qualification Round
 * Cooking the Books
 * @see https://www.facebook.com/hackercup/problems.php?pid=582062045257424&round=742632349177460
 */

ini_set('memory_limit', 0);
set_time_limit(0);

$input = new SplFileObject('input.txt');
$caseCount = (int) $input->fgets();

ob_start();

// Challenge
for ($case = 1; $case <= $caseCount; $case++ ) {
    $number = trim($input->fgets());

    $result = swapToLowest($number) . ' ' . swapToHighest($number);

    printf("Case #%d: %s\n", $case, $result);
}

// Resolver
function swapToLowest($number)
{
    $lowToHigh = str_split($number);
    sort($lowToHigh);

    return swap($number, $lowToHigh);
}

function swapToHighest($number)
{
    $highToLow = str_split($number);
    rsort($highToLow);

    return swap($number, $highToLow);
}

function swap($number, $order)
{
    $numbersCount = strlen($number);
    // Swap the highest with the first. If the highest is already first, try the 2nd highest as 2nd, etc
    for ($pos = 0; $pos < $numbersCount; $pos++) {
        // Number is already on the right position
        if ($order[$pos] == $number[$pos]) {
            continue;
        }

        // Find where this number now is
        $swap = strrpos($number, $order[$pos]);

        // Refuse to move a zero to first position.
        if ($pos == 0 && $number[$swap] == 0) {
            $pos = 1;
        }

        // Swap 2 numbers
        $tmp = $number[$pos];
        $number[$pos] = $number[$swap];
        $number[$swap] = $tmp;

        // Stop trying
        break;
    }


    return $number;
}

// Save and display output
file_put_contents('output.txt', ob_get_flush());

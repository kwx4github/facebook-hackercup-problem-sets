#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <algorithm>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <limits.h>
 
using namespace std;
 
// Constants
#define					HODOR unsigned long long
// Loop Macros
#define rep(i, a, b)	for(int i = (a); i < (b); ++i)
#define dwn(i, a, b)	for(int i = (a); i >= (b); --i)
#define repi(v, c)		for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define dwni(v, c) 		for( typeof( (c).end()) v = (c).end()-1;  v >= (c).begin(); --v)
// Input Macros
#define s(n)			scanf("%d",&n)
#define sc(n)			scanf("%c",&n)
#define sl(n)			scanf("%lld",&n)
#define ss(n)			scanf("%s",n)
// STL Macros
#define pb 				push_back
#define mp              make_pair
#define all(v)          v.begin(), v.end()
#define gc 				getchar_unlocked
#define pc 				putchar_unlocked
 
//	Functions
#define testcases()		int t; for(inp(t);t;--t)
 
template<typename X> inline void inp(X &n ) {
    register int ch=gc();int sign=1;n=0;
    while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=gc();}
    while(  ch >= '0' && ch <= '9' ) n = (n<<3)+(n<<1) + ch-'0', ch=gc();
    n=n*sign;
}
 
template<typename X> inline void out(X a) {
    char snum[20]; int i=0;
    do {snum[i++]=a%10+48; a=a/10; }while(a!=0);
    i=i-1;
    while(i>=0) pc(snum[i--]);
}
 
 
 
int main() {
	char ip[20], ans[20], mx, mn;
	int len, c = 0, mxi, mni;
	testcases() {
		ss(ip), c++, len = strlen(ip);
		if ( len <= 1 )	printf("Case #%d: %s %s\n", c, ip, ip);
		else {
			strcpy(ans, ip);
			rep(i, 0, len) {
				mn = ip[i], mni = i;
				rep(j, i+1, len) {
					if ( mn >= ip[j] && (ip[j] != 48 || i > 0) )  mn = ip[j], mni = j;
				}
				if ( mn < ip[i] ) {
					ans[mni] = ans[i], ans[i] = mn;
					break;
				}
			}
			rep(i, 0, len) {
				mx = ip[i], mxi = i;
				rep(j, i+1, len) {
					if ( mx <= ip[j] ) 	mx = ip[j], mxi = j;
				}
				if ( mx > ip[i] ) {
					ip[mxi] = ip[i], ip[i] = mx;
					break;
				}
			}
			printf("Case #%d: %s %s\n", c, ans, ip);
		}
	}
	return 0;
}
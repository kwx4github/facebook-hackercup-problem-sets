import java.util.Arrays;
import java.util.Optional;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;


public class FHC2015QualA {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int i = 1; i <= numCases; i++) {
            System.out.format("Case #%d: %s%n", i, new FHC2015QualA().solve(sc));
        }
    }

    private String solve(Scanner sc) {
        int[] ns = sc.next().chars().map(c -> c - '0').toArray();
        int len = ns.length;
        return Stream.<Stream<Optional<IntStream>>> of(
                IntStream.range(0, len).mapToObj(
                        i -> IntStream.range(i, len).filter(
                                j -> (i != 0 || ns[j] > 0) && ns[i] > ns[j]).boxed().reduce(
                                (ii, t) -> ns[t] <= ns[ii] ? t : ii).map(
                                ii -> IntStream.range(0, len).map(
                                        jj -> jj == i ? ns[ii] : jj == ii
                                                ? ns[i] : ns[jj]))),
                IntStream.range(0, len).mapToObj(
                        i -> IntStream.range(i, len).filter(j -> ns[i] < ns[j]).boxed()
                                .reduce((ii, t) -> ns[t] >= ns[ii] ? t : ii).map(
                                        ii -> IntStream.range(0, len).map(
                                                jj -> jj == i ? ns[ii] : jj == ii
                                                        ? ns[i] : ns[jj])))).map(
                str -> str.filter(Optional::isPresent).map(Optional::get).findFirst()
                        .orElse(Arrays.stream(ns)).mapToObj(i -> String.valueOf(i))
                        .collect(Collectors.joining())).collect(Collectors.joining(" "));
    }

}

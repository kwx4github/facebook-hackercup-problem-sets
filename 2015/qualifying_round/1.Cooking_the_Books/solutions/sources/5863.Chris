import java.util.*;
import java.io.*;
import java.math.*;
import java.lang.*;

public class ProblemA {
	
	public static void main(String[] args){

		String readLine = "";
		int t = 0;
		ArrayList<String> cases = new ArrayList<String>();

		try {
      		BufferedReader br = new BufferedReader(new FileReader("cooking_the_books.txt"));
      		t = Integer.parseInt(br.readLine());
      		while ((readLine = br.readLine()) != null) { 
        		cases.add(readLine);
      		}
    	} catch (IOException e) {
      		System.err.println("Error Happened: " + e);
    	}

		String[] answers = new String[t];

		for (int i = 0; i < t; i++) {

			String n = cases.get(i);
			int smallest = Integer.parseInt(n);
			int largest = Integer.parseInt(n);

			// find the largest
			for (int j = 0; j < n.length()-1; j++) {
				int base = Character.getNumericValue(n.charAt(j));

				for (int k = 9; k > base; k--) {
					if (n.substring(j+1).contains(Integer.toString(k))) {
						int index = n.substring(j).lastIndexOf(Integer.toString(k)) + j;
						//System.out.println(n.substring(j+1, index));
						String lar = n.substring(0, j) + Integer.toString(k) + n.substring(j+1, index) + n.substring(j, j+1);
						if (index != n.length()) {
							lar = lar + n.substring(index+1);
						}
						largest = Integer.parseInt(lar);
						break;
					}
				}
				if (largest > Integer.parseInt(n)) {
					break;
				}
			}

			// find the smallest
			for (int j = 0; j < n.length()-1; j++) {
				int base = Character.getNumericValue(n.charAt(j));

				int start = 0;
				if (j == 0) {
					start = 1;
				}
				for (int k = start; k < base; k++) {
					if (n.substring(j+1).contains(Integer.toString(k))) {
						int index = n.substring(j).lastIndexOf(Integer.toString(k)) + j;
						//System.out.println(n.substring(j+1, index));
						String sma = n.substring(0, j) + Integer.toString(k) + n.substring(j+1, index) + n.substring(j, j+1);
						if (index != n.length()) {
							sma = sma + n.substring(index+1);
						}
						smallest = Integer.parseInt(sma);
						break;
					}
				}
				if (smallest < Integer.parseInt(n)) {
					break;
				}
			}

			answers[i] = ("Case #" + (i+1) + ": " + smallest + " " + largest + "\n");
		}

        try {
         	File file = new File("ProblemA-Output.txt");
          	BufferedWriter output = new BufferedWriter(new FileWriter(file));
          	for (String line : answers) {
          		output.write(line);
          	}
          	output.close();
        } catch ( IOException e ) {
           	e.printStackTrace();
        }
	}
	
}

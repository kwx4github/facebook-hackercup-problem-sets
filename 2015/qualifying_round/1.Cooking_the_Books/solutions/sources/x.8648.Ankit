
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;
 
 
 class ankit {
 
    static class FastScanner{
        BufferedReader s;
        StringTokenizer st;
 
        public FastScanner(){
            st = new StringTokenizer("");
            s = new BufferedReader(new InputStreamReader(System.in));
        }
 
 
        public int nextInt() throws IOException{
            if(st.hasMoreTokens())
                return Integer.parseInt(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextInt();
            }
        }
 
      public double nextDouble() throws IOException{
            if(st.hasMoreTokens())
                return Double.parseDouble(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextDouble();
            }
        }
 
 
 
        public String nextString() throws IOException{
            if(st.hasMoreTokens())
                return st.nextToken();
            else{
                st = new StringTokenizer(s.readLine());
                return nextString();
            }
 
        }
        public String readLine() throws IOException{
            return s.readLine();
        }
 
        public void close() throws IOException{
            s.close();
        }
 
    }
      private static FastScanner s = new FastScanner();   
      private static PrintWriter ww = new PrintWriter(new OutputStreamWriter(System.out));
 
     public static void main(String[] args) throws IOException 
     {
 
         int tstcase=s.nextInt();int cas=1;
         while(tstcase-->0)
         {     
             String ss= s.nextString();long in=Long.parseLong(ss);long a[] = new long[ss.length()];int i=0;int iteration=0;
             String arc=ss;
               while (in>0)
               {
                 long lastdigit = in%10;
                 a[i]=lastdigit;
                 in =in/10;
                 i++;
               }
               for( i=0;i<ss.length()-1;i++)
               {
                   int h = Integer.parseInt(ss.substring(i, i+1));int v=h;int index=-1;
                   
                   for(int j=i+1;j<ss.length();j++)
                   {
                   
                       iteration++;
                       if(v<=Integer.parseInt(ss.substring(j,j+1)))
                       {
                           v=Integer.parseInt(ss.substring(j,j+1));
                           index=j;
                       }
                   }
                   if(v>h && index!=-1)
                   {
                       char p = ss.charAt(index);
                       char q = ss.charAt(i);
                       StringBuilder st = new StringBuilder(ss);
                       st.setCharAt(i, p);
                       st.setCharAt(index, q);
                       ss=st.toString();
                       break;
                   }
 
               }
                for( i=0;i<arc.length()-1;i++)
               {
                   int h = Integer.parseInt(arc.substring(i, i+1));int v=h;int index=-1;
                  
                   for(int j=i+1;j<arc.length();j++)
                   {
                      
                       iteration++;
                       if(v>=Integer.parseInt(arc.substring(j,j+1)) )
                       {
                           if(Integer.parseInt(arc.substring(j,j+1))!=0)
                           { v=Integer.parseInt(arc.substring(j,j+1));
                             index=j;}
                           else if(Integer.parseInt(arc.substring(j,j+1))==0 && i!=0)
                           {
                                v=Integer.parseInt(arc.substring(j,j+1));
                                index=j;
                           }
                       }
                   }
                   if(v<h && index!=-1)
                   {
                       char p = arc.charAt(index);
                       char q = arc.charAt(i);
                       StringBuilder st = new StringBuilder(arc);
                       st.setCharAt(i, p);
                       st.setCharAt(index, q);
                       arc=st.toString();
                      break;
                   }
 
               }
               System.out.println("Case #"+cas+": "+arc+" "+ss);//+"  iteration "+iteration);cas++;
               cas++;
 
 
         }
         s.close();
         ww.close();
 
     }
     public static int gcdankit(int a, int b){
        return b == 0 ? a : gcdankit(b,a%b);
    }
 
}
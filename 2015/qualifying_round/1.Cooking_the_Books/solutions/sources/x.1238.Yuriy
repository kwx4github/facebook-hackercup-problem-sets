#include "stdafx.h"

#include <iostream>
#include <string>
#include <functional>
#include <algorithm>

template <class Iter, class Cmp>
Iter extreme_element(Iter begin, Iter end, Cmp comparator)
{
    const char exclude = '0';

    // find first non-excluded element
    Iter pos;
    for (pos = begin; pos != end && *pos == exclude; ++pos)
    {
    }

    if (pos == end)
    {
        return pos;
    }

    for (auto it = pos + 1; it != end; ++it)
    {
        if (*it != exclude && !comparator(*pos, *it))
        {
            pos = it;
        }
    }

    return pos;
}

template <class Iter, class Cmp>
void find_extremum(Iter begin, Iter end, Cmp comparator)
{
    Iter extremeEl = begin;
    while (begin != end)
    {
        if (extremeEl == begin)
        {
            extremeEl = extreme_element(begin + 1, end, comparator);
        }

        if (extremeEl == end)
        {
            // number consists of excluded elements only, nothing to do here anymore
            break;
        }

        if (comparator(*extremeEl, *begin))
        {
            // found it!
            std::iter_swap(extremeEl, begin);
            break;
        }

        ++begin;
    }
}

void get_minmax(const std::string& number, std::string& min, std::string& max)
{
    // the minimum number is the one which has it smalles digit on a highest position (except of 0)
    min = number;
    find_extremum(min.begin(), min.end(), std::less<>());

    max = number;
    find_extremum(max.begin(), max.end(), std::greater<>());
}

int main()
{
    std::string min, max;

    std::string line;
    std::getline(std::cin, line);   // discard the lines count

    int lineNo = 1;
    while (std::getline(std::cin, line))
    {
        get_minmax(line, min, max);

        std::cout << "Case #" << lineNo << ": " << min << ' ' << max << '\n';

        ++lineNo;
    }
}

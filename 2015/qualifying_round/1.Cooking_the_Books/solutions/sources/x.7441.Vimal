

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Collections;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

public class Solution {

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new FileReader(new File("/home/vimalbera92/Downloads/cooking_the_books_example_input.txt")));
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("/home/vimalbera92/Downloads/cooking_the_books_example_output.txt")));
		int no = Integer.parseInt(br.readLine());
		for (int i = 1; i <= no; i++) {
			String max = br.readLine();
			String min = max;
			max = getMaxNumber(max);
			min = getMinNumber(min);
			String out = "Case #" + i + ": " + min + " " + max + "\n";
			bw.write(out);
		}
		br.close();
		bw.close();
	}

	private static String getMinNumber(String num) {
		Map<Integer, Integer> indexMap = new TreeMap<Integer, Integer>();
		char[] number = num.toCharArray();
		int k = 0;
		for (int i = 0; i < num.length(); i++) {
			indexMap.put(Integer.parseInt(Character.toString(number[i])), i);
		}
		for (Entry<Integer, Integer> entrySet : indexMap.entrySet()) {
			for (int i = 0 + k; i < number.length; i++) {
				if (Integer.parseInt(Character.toString(number[i])) > entrySet.getKey()) {
					if ((i < entrySet.getValue()) && (i != 0 || entrySet.getKey() != 0)) {
						number[entrySet.getValue()] = number[i];
						number[i] = (char) (((int) '0') + entrySet.getKey());
						return new String(number);
					}
				}
			}
		}
		return num;
	}

	private static String getMaxNumber(String num) {
		Map<Integer, Integer> indexMap = new TreeMap<Integer, Integer>(Collections.reverseOrder());
		char[] number = num.toCharArray();
		int k = 0;
		for (int i = 0; i < num.length(); i++) {
			indexMap.put(Integer.parseInt(Character.toString(number[i])), i);
		}
		for (Entry<Integer, Integer> entrySet : indexMap.entrySet()) {
			for (int i = 0 + k; i < number.length; i++) {
				if (Integer.parseInt(Character.toString(number[i])) < entrySet.getKey()) {
					if (i < entrySet.getValue()) {
						number[entrySet.getValue()] = number[i];
						number[i] = (char) (((int) '0') + entrySet.getKey());
						return new String(number);
					}
				}
			}
		}
		return num;
	}
}


import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CookingTheBook {

	public CookingTheBook() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Integer> integers = new ArrayList<Integer>();
		try {
			for (String line : Files.readAllLines(Paths.get("/home/ramya/Downloads/cooking_the_books.txt"))) {
			    for (String part : line.split("\\s+")) {
			        Integer i = Integer.valueOf(part);
			        integers.add(i);
			    }
			}
		} 
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		int T = integers.get(0);
		for(int i=1;i<=T;i++){
			int N = integers.get(i);
			String SN;
			String LN;
			int swapDigit = N;
			int numOfDigits = Integer.toString(N).length();
			int[] iarray = new int[numOfDigits];
			int[] sArray = new int[numOfDigits];
			for (int index = 0; index < numOfDigits; index++) {
				iarray[index] =swapDigit % 10;
				sArray[index] =iarray[index];
				swapDigit /= 10;
			}
			LN= largestNumber(numOfDigits,N,iarray);
			SN= smallestNumber(numOfDigits,N,sArray,sArray);
			System.out.println("Case #"+i+":"+SN+" "+LN);
		}
	}

	public static String largestNumber(int nDigits,int N,int[] iarray){
		if(nDigits == 1){
			return String.valueOf(N);
		}
		String maxNumber="0";
		int maxdigit = 0;
		int maxindex = 0;
		for (int index = 0; index < nDigits; index++) {
			if(iarray[index] > maxdigit){
				maxdigit = iarray[index];
				maxindex = index;
			}	
		}
			if((iarray[nDigits-1] == maxdigit) && (nDigits > 2)) {
			int[] iDigitsArray = Arrays.copyOfRange(iarray,0,nDigits-1);
			maxNumber = String.valueOf(iarray[nDigits-1]) + largestNumber(nDigits-1,N,iDigitsArray);
		}
		else {
			iarray[maxindex]=iarray[nDigits-1];
			iarray[nDigits-1]=maxdigit;
			for (int j=iarray.length-1;j>=0;j--) {
				maxNumber = String.valueOf(Integer.parseInt(maxNumber)*10+iarray[j]);
			}
		}
		return maxNumber;
	}
	
	public static String smallestNumber(int nDigits,int N,int[] iarray, int[] orgArray){
		int flag =0;
		if(nDigits == 1){
			return String.valueOf(N);
		}
		if (nDigits == orgArray.length){
			flag = 1;
		}
		String minNumber="0";
		int minIndex=0;
		int mindigit = 10;
		for (int index = 0; index < nDigits; index++) {
			if(flag==1){
				if((iarray[index] < mindigit)&&(iarray[index]!=0)){
					mindigit = iarray[index];
					minIndex = index;
				}
			}
			else{
				if(iarray[index] < mindigit) {
					mindigit = iarray[index];
					minIndex = index;
				}
			}
		}
		if((iarray[nDigits-1] == mindigit) && (nDigits > 2)) {
			int[] iDigitsArray = Arrays.copyOfRange(iarray,0,nDigits-1);
			minNumber = String.valueOf(iarray[nDigits-1]) + smallestNumber(nDigits-1,N,iDigitsArray, orgArray);
		}
		else {
			iarray[minIndex]=iarray[nDigits-1];
			iarray[nDigits-1]=mindigit;
			for (int j=iarray.length-1;j>=0;j--) {
				minNumber = String.valueOf(Integer.parseInt(minNumber)*10+iarray[j]);
			}
		}		
		return minNumber;
	}	
}

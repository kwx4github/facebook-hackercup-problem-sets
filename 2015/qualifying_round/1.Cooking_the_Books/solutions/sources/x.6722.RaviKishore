package FirstProblem;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class CookingTheBooks {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

	public static void main(String args[]) throws NumberFormatException, IOException{
		int _T; 
		String input_number;
		_T = Integer.parseInt(br.readLine());		

		for(int i = 0; i < _T; i++){
			input_number = br.readLine();
			int len =  input_number.length();
			

			char[] sorted_chars = input_number.toCharArray();
			char[] smallestCase_original_chars = input_number.toCharArray();
			char[] largestCase_original_chars = input_number.toCharArray();

			quickSort(sorted_chars, 0, len-1); 			//SORT THE INPUT

			char[] smallestcase_sorted_chars = sorted_chars;
			char[] largestcase_sorted_chars = sorted_chars;

			int small_digit_index = 0;
			int large_digit_index = 0;
			int small_exchange_index = 0;
			int large_exchange_index = 0;
			
			//FINDING SMALLEST CASE
			for(int j = 0; j < len; j++){

				small_digit_index = input_number.lastIndexOf(smallestcase_sorted_chars[j]);


				if(smallestCase_original_chars[small_digit_index] == smallestCase_original_chars[small_exchange_index]){
					swap(smallestcase_sorted_chars, small_exchange_index, j);
					small_exchange_index++;
					j = small_exchange_index - 1;
				}
				else
				{
					if(small_exchange_index == 0 && smallestCase_original_chars[small_digit_index] == '0'){
						continue;
					}else{
						swap(smallestCase_original_chars, small_exchange_index, small_digit_index);
						break;
					}
				}
			}
			
			//FINDING LARGEST CASE
			for(int j = 0; j < len; j++){
				large_digit_index = input_number.lastIndexOf( largestcase_sorted_chars[len - (j+1)]);

				if(largestCase_original_chars[large_digit_index] == largestCase_original_chars[large_exchange_index]){
					swap(smallestcase_sorted_chars, large_exchange_index, len - (j+1));
					small_exchange_index++;
					j = small_exchange_index - 1;
				}
				else
				{
					if(large_exchange_index == 0 && largestCase_original_chars[large_digit_index] == '0'){
						continue;
					}else{
						swap(largestCase_original_chars, large_exchange_index, large_digit_index);
						break;
					}
				}
			}

			System.out.print("Case #"+(i+1)+": ");
			System.out.print(smallestCase_original_chars);

			System.out.print(" ");

			System.out.println(largestCase_original_chars);


		}
	}
	//SWAPPING FUNCTION 
	static void swap(char[] array,int firstIndex,int secondIndex){
		char temp = array[firstIndex];
		array[firstIndex] = array[secondIndex];
		array[secondIndex] = temp;
	}
	
//QUICKSORT
	static int partition(char arr[], int left, int right)
	{
		int i = left, j = right;
		char tmp;
		int pivot = arr[(left + right) / 2];

		while (i <= j) {
			while (((int)arr[i]) < pivot)
				i++;
			while (((int)arr[j]) > pivot)
				j--;
			if (i <= j) {
				tmp = arr[i];
				arr[i] = arr[j];
				arr[j] = tmp;
				i++;
				j--;
			}
		};

		return i;
	}

	static void quickSort(char arr[], int left, int right) {
		int index = partition(arr, left, right);
		if (left < index - 1)
			quickSort(arr, left, index - 1);
		if (index < right)
			quickSort(arr, index, right);
	}
}
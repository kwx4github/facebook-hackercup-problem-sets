def swap(number, from, to)
  copy = number.dup
  copy[from], copy[to] = copy[to], copy[from]
  copy
end

def find_min(digits, from)
  return digits if from == digits.size

  min_index = from
  digits[from..-1].each_with_index do |digit, index|
    if from == 0
      min_index = from + index if digits[min_index] >= digit && digit != "0" && digits[from] != digit
    else
      min_index = from + index if digits[min_index] >= digit && digits[from] != digit
    end
  end

  if min_index == from
    find_min(digits, from + 1)
  else
    swap(digits, from, min_index)
  end
end

def find_max(digits, from)
  return digits if from == digits.size

  max_index = from
  digits[from..-1].each_with_index do |digit, index|
    max_index = from + index if digits[max_index] <= digit && digits[from] != digit
  end

  if max_index == from
    find_max(digits, from + 1)
  else
    swap(digits, from, max_index)
  end
end

File.open('cooking_the_books.txt', 'r') do |reader|
  File.open('output_cooking_the_books.txt', 'w') do |writer|
    t = reader.readline.to_i
    t.times do |i|
      input = reader.readline.strip.split(//)
      writer.write("Case #{i+1}: #{find_min(input,0).join} #{find_max(input, 0).join}\n")
    end
  end
end

# TESTING
#def brutforce_check
  #r = Random.new
  #100_000.times do
    #input = r.rand(999999999)
    #digits = input.to_s.split(//)
    #unless find_min(digits,0).join.to_i <= input && input <= find_max(digits, 0).join.to_i
      #puts "Wrong Input: #{digits} > #{find_min(digits,0).join.to_i}  > #{find_max(digits, 0).join.to_i}"
    #end
  #end
#end
#brutforce_check


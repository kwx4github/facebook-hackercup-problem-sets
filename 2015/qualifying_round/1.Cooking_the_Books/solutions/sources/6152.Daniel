/*
 * p1.cpp
 *
 *  Created on: 10 Jan 2015
 *      Author: Clem
 */

#include <string>
#include <iostream>
#include <list>
#include <map>
#include <vector>
#include <utility>
#include <algorithm>
#include <cstdio>
#include <math.h>


using namespace std;

typedef std::map<int, int>::iterator it_type;


int main() {

	int T, N;

	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	cin>>T;

	for (int i=0;i<T;++i) {
		cin>>N;

		if (N == 0) {
			cout<<"Case #"<<i+1<<": "<<0<<" "<<0<<endl;
			continue;
		}

		int temp = N;
		int dig;
		int pos = 0;
		map <int,int> m;
		string smallest="", largest="";

		while (temp != 0) {
			dig = temp % 10;
			smallest = (char)(((int)'0')+dig) + smallest;

			if (m.find(dig) == m.end()) {
				m[dig] = pos;
			}

			temp = temp/10;
			pos++;
		}

		largest = smallest;
		temp = N;

		bool first = true;
		int k;

		for (int j=0;j<pos;++j) {

			if (first) {
				k=1;
				first = false;
			}else {
				k=0;
			}

			for (;k<(int)(smallest[j]-'0');++k) {

				if (m.find(k) != m.end()) {
					if (pos-m[k]-1 > j) {
						break;
					}
				}
			}

			if (k != ((int)(smallest[j]-'0'))) {
				char c = smallest[j];
				smallest[j] = char(k+'0');
				smallest[pos-m[k]-1] = c;
				//cout<<"sol: "<<smallest<<endl;
				break;
			}

		}

		for (int j=0;j<pos;++j) {

			for (k=9;k>(int)(largest[j]-'0');--k) {

				if (m.find(k) != m.end()) {
					if (pos-m[k]-1 > j) {
						break;
					}
				}
			}

			if (k != ((int)(largest[j]-'0'))) {
				char c = largest[j];
				largest[j] = char(k+'0');
				largest[pos-m[k]-1] = c;
				//cout<<"sol: "<<largest<<endl;
				break;
			}
		}

		cout<<"Case #"<<i+1<<": "<<smallest<<" "<<largest<<endl;
	}

	return 0;
}




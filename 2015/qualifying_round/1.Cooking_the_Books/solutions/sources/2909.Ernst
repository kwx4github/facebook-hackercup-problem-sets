using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace FacebookHackerCup2015
{
	internal class Program
	{
		private static void Main(string[] args)
		{
			Stopwatch sw = new Stopwatch(); sw.Start();
			// 1: cooking the books

			// vars
			string inputFile = @"E:\Ernst\Code Projects\FacebookHackerCup2015\FacebookHackerCup2015\files\qual-1-sample.txt";
			string outputFile = @"E:\Ernst\Code Projects\FacebookHackerCup2015\FacebookHackerCup2015\files\qual-1-sample-output.txt";

			List<string> output = new List<string>();
			// read inputfile
			string[] lines = System.IO.File.ReadAllLines(inputFile);
			int testCases = Convert.ToInt32(lines[0]);
			
			// do some voodoo
			for (int i = 1; i <= testCases; i++)
			{
				// 1 char == instant output, go to next
				if (lines[i].Length == 1) { output.Add(String.Format("Case #{0}: {1} {1}", i, lines[i])); continue; }
				char[] line = lines[i].ToCharArray();
				int curHigh = Convert.ToInt32(lines[i]), curLow = Convert.ToInt32(lines[i]);
				for (int j = 0; j < line.Length; j++)
				{
					for (int k = j+1; k < line.Length; k++)
					{
						if (line[j] == line[k]) { continue; }			// dont swap if both digits are the same
						if (j == 0 && line[k] == '0') { continue; }	// dont swap ZERO's to the first place
						// swap
						char tmp = line[j];
						line[j] = line[k]; line[k] = tmp;
						int curNumber = Convert.ToInt32(String.Join("", line));
						if (curNumber > curHigh) { curHigh = curNumber; }
						if (curLow > curNumber) { curLow = curNumber; }

						// swap back
						line[k] = line[j]; line[j] = tmp;
					}
				}

				output.Add(String.Format("Case #{0}: {1} {2}", i, curLow, curHigh));
				Console.Out.WriteLine(String.Format("Case #{0}: {1} {2}", i, curLow, curHigh));
			}

			// write outputfile
			System.IO.File.WriteAllLines(outputFile, output);

			// End program
			sw.Stop(); Console.Out.WriteLine("DONE! in {0} ms, written {1} lines", sw.ElapsedMilliseconds, output.Count()); Console.ReadLine();
		}


		/* first try
		 for (int i = 1; i <= testCases; i++)
			{
				// 1 char == instant output, go to next
				if (lines[i].Length == 1) { output.Add(String.Format("Case #{0}: {1} {1}", i, lines[i])); continue; }

				// biggest number = last highest number FIRST
				// smallest number = last lowest number first
				char[] line = lines[i].ToCharArray(), high = lines[i].ToCharArray(), low = lines[i].ToCharArray();
				int highPos = -1, highSwap=0, lowPos = -1, lowSwap=0; char lowNumber = '0', highNumber = '/'; // '0'-1 = '/'
				for (int j = line.Length - 1; j >= 0; j--)
				{	// determine highest and lowest number
					if (line[j] > highNumber) { highNumber = line[j]; highPos = j; }
					if (line[j] < lowNumber) { lowNumber = line[j]; lowPos = j; }
				}
				// determine if the FIRST should be swapped
				if (highPos!=-1 && high[highPos] == high[highSwap]) { 
					// uh-oh -> we are NOT swapping the same element! instead swap the first non-matching
					while (high[highPos] == high[highSwap] && highSwap<high.Length) { highSwap++; }
				}

				if (lowPos!=-1 && low[lowPos] == low[lowSwap])
				{
					// uh-oh -> we are NOT swapping the same element! instead swap the first non-matching
					while (low[lowPos] == low[lowSwap] && lowSwap < low.Length) { lowSwap++; }
				}

				// swapping
				if (highPos != -1) { high[highPos] = high[highSwap]; high[highSwap] = highNumber; }
				if (lowPos != -1) { low[lowPos] = low[lowSwap]; low[lowSwap] = lowNumber; }

				output.Add(String.Format("Case #{0}: {1} {2}", i, String.Join("", low), String.Join("", high)));
				Console.Out.WriteLine(String.Format("Case #{0}: {1} {2}", i, String.Join("", low), String.Join("", high)));
			}
		 */ 
	}
}
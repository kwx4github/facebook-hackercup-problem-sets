import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.lang.Long;

public class Test {
	static long Mod = 1000000007;
	static int[][] dp;

	static int bit = 20;

	public static void main(String[] args) throws FileNotFoundException {
		PrintWriter out = new PrintWriter(new FileOutputStream(new File(
				"output.txt")));
		// PrintWriter out = new PrintWriter(System.out);
		Scanner in = new Scanner();
		int t = in.nextInt();
		for (int z = 0; z < t; z++) {
			char[] tmp = in.next().toCharArray();
			String min = new String(tmp), max = new String(tmp);
			for (int i = 0; i < tmp.length; i++) {

				int index = -1;
				for (int j = i + 1; j < tmp.length; j++) {
					if (tmp[j] != '0' || i != 0) {
						if (index == -1 || tmp[index] >= tmp[j]) {
							index = j;
						}
					}
				}
				if (index != -1) {
					if (tmp[i] > tmp[index]) {
						char c = tmp[i];
						tmp[i] = tmp[index];
						tmp[index] = c;
						min = new String(tmp);
						c = tmp[i];
						tmp[i] = tmp[index];
						tmp[index] = c;
						break;
					}
				}
			}
			for (int i = 0; i < tmp.length; i++) {

				int index = -1;
				for (int j = i + 1; j < tmp.length; j++) {
					if (tmp[j] != '0' || i != 0) {
						if (index == -1 || tmp[index] <= tmp[j]) {
							index = j;
						}
					}
				}
				if (index != -1) {
					if (tmp[i] < tmp[index]) {
						char c = tmp[i];
						tmp[i] = tmp[index];
						tmp[index] = c;
						max = new String(tmp);
						c = tmp[i];
						tmp[i] = tmp[index];
						tmp[index] = c;
						break;
					}
				}
			}
			out.println("Case #" + (z + 1) + ": " + min + " " + max);
		}
		out.close();
	}

	public static int[] KMP(String val) {
		int i = 0;
		int j = -1;
		int[] result = new int[val.length() + 1];
		result[0] = -1;
		while (i < val.length()) {
			while (j >= 0 && val.charAt(j) != val.charAt(i)) {
				j = result[j];
			}
			j++;
			i++;
			result[i] = j;
		}
		return result;

	}

	static int find(int index, int[] u) {
		if (u[index] != index) {
			return u[index] = find(u[index], u);
		}
		return index;
	}

	static int crossProduct(Point a, Point b) {
		return a.x * b.y + a.y * b.x;
	}

	static long squareDist(Point a) {
		long x = a.x;
		long y = a.y;
		return x * x + y * y;
	}

	static Point minus(Point a, Point b) {
		return new Point(a.x - b.x, a.y - b.y);
	}

	public static boolean nextPer(int[] data) {
		int i = data.length - 1;
		while (i > 0 && data[i] < data[i - 1]) {
			i--;
		}
		if (i == 0) {
			return false;
		}
		int j = data.length - 1;
		while (data[j] < data[i - 1]) {
			j--;
		}
		int temp = data[i - 1];
		data[i - 1] = data[j];
		data[j] = temp;
		Arrays.sort(data, i, data.length);
		return true;
	}

	static class Point {
		int x, y;

		public Point(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}

		public String toString() {
			return "{" + x + " " + y + "}";
		}

	}

	static int gcd(int a, int b) {
		if (b == 0) {
			return a;
		}
		return gcd(b, a % b);
	}

	static class Scanner {

		BufferedReader br;
		StringTokenizer st;

		public Scanner() throws FileNotFoundException {
			// System.setOut(new PrintStream(new
			// BufferedOutputStream(System.out), true));
			// br = new BufferedReader(new InputStreamReader(System.in));
			br = new BufferedReader(new InputStreamReader(new FileInputStream(
					new File("input.txt"))));
		}

		public String next() {

			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (Exception e) {
					throw new RuntimeException();
				}
			}
			return st.nextToken();
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public double nextDouble() {
			return Double.parseDouble(next());
		}

		public String nextLine() {
			st = null;
			try {
				return br.readLine();
			} catch (Exception e) {
				throw new RuntimeException();
			}
		}

		public boolean endLine() {
			try {
				String next = br.readLine();
				while (next != null && next.trim().isEmpty()) {
					next = br.readLine();
				}
				if (next == null) {
					return true;
				}
				st = new StringTokenizer(next);
				return st.hasMoreTokens();
			} catch (Exception e) {
				throw new RuntimeException();
			}
		}
	}
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

class CookingtheBooks {

	static CookingtheBooks.MyScanner sc = new CookingtheBooks.MyScanner();
	static PrintWriter out = new PrintWriter(System.out);

	// static PrintStream out = System.out;

	public static void main(String[] args) {
		int t = sc.nextInt();
		int count = 1;
		while(count <= t){
			String s = sc.nextLine();
			String max = s, min = s;
			int l = s.length();
			for(int i=0; i<l; i++){
				for(int j=0; j<l; j++){
					char[] c = s.toCharArray();
					char temp = c[i];
					c[i] = c[j];
					c[j] = temp;

					String cTemp = new String(c);
					if(cTemp.charAt(0) != '0'){
						if(max.compareTo(cTemp) > 0)
							max = cTemp;
						else if(min.compareTo(cTemp) < 0)
							min = cTemp;
					}
				}
			}
			System.out.println("Case #"+count+": "+max+" "+min);
			count++;
		}
		out.close();
	}

	static private class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		public int mod(long x) {
			// TODO Auto-generated method stub
			return (int) x % 1000000007;
		}

		public int mod(int x) {
			return x % 1000000007;
		}

		boolean hasNext() {
			if (st.hasMoreElements())
				return true;
			try {
				st = new StringTokenizer(br.readLine());
			} catch (IOException e) {
				e.printStackTrace();
			}
			return st.hasMoreTokens();
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

		public long nextLong() {
			return Long.parseLong(next());
		}
	}

}

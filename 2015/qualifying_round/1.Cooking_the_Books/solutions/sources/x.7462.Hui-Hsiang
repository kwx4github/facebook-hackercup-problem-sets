import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

public class CookingTheBook {

	private static final String INPUT = "cooking_the_books.txt";
	private static final String OUTPUT = "Output.txt";
	private static final String LINE_FORMAT = "Case #%d: %s %s";
	
	public static void main(String[] args) {
		CookingTheBook ctb = new CookingTheBook();
		CookingTheBook.writeToFile(ctb.run(CookingTheBook.readFile(INPUT)));
	}
	
	public static List<String> readFile(String filename) {
		List<String> lines = null;
		try {
			lines = Files.readAllLines(Paths.get(filename), Charset.defaultCharset());
		} catch (IOException e) {
			e.printStackTrace();
		}
		return lines;
	}
	
	public static void writeToFile(String text) {
		File file = new File(OUTPUT);
		BufferedWriter writer = null;
		try {
			writer = new BufferedWriter(new FileWriter(file));
	        writer.write(text);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				writer.close();
			} catch (IOException e) {
			}
		}
	}
	
	public String run(List<String> lines) {
		StringBuilder sb = new StringBuilder();
		int numOfLines = Integer.parseInt(lines.remove(0));
		for (int i = 0; i < numOfLines; i++) {
			String val = lines.get(i);
			String max = getMax(lines.get(i));
			sb.append(String.format(LINE_FORMAT, (i+1), val, max));
			if (i < numOfLines - 1) {
				sb.append("\n");
			}
		}
		return sb.toString();
	}
	
	public String getMax(String value) {
		if (value.length() < 2) {
			return value;
		}
		int max = Integer.parseInt(value);
		char[] chars = value.toCharArray();
		int index = 0;
		for (int i = 1; i < chars.length; i++) {
			index = (chars[i] > chars[index]) ? i : index;
		}
		if (index == 0) {
			char[] sub = Arrays.copyOfRange(chars, 1, chars.length);
			max = Integer.valueOf(chars[0] + getMax(new String(sub)));
		} else {
			if (index == 1 && chars.length > 2 && chars[2] > chars[0]) {
				String newValue = value.substring(1) + value.charAt(0);
				max = Integer.valueOf(newValue);
			} else {
				swap(chars, 0, index);
				max = Integer.valueOf(new String(chars));
			}
		}
		return String.valueOf(max);
	}
	
	private void swap(char[] chars, int i, int j) {
		char tmp = chars[i];
		chars[i] = chars[j];
		chars[j] = tmp;
	}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace FBHC_CookingTheBooks
{
    class Program
    {
        static void Main(string[] args)
        {
            StreamReader sr = new StreamReader("cooking_the_books_example_input.txt");
            StreamWriter sw = new StreamWriter("output.txt");
            int T = Convert.ToInt32(sr.ReadLine());
            for (int t = 0; t < T; t++)
            {
                Int64 N = Convert.ToInt64(sr.ReadLine());
                Int64 min = N;
                Int64 max = N;
                if (N > 0)
                {
                    String str = N.ToString();
                    if (str.Contains('0')) // Has zero; replace with 1 index
                    {
                        int minIndex = str.Length - str.Reverse().ToString().IndexOf('0') - 1;
                        str = str[0].ToString() + '0' + str.Substring(1);
                    }
                    else
                    {
                        int minIndex = findMinIndex(str);
                        if (minIndex > 0) minIndex = findMinIndex(str, false);
                        int i = 0;
                        for (int c = str.Length - 1; c >= 0; c--, i++)
                        {

                            if ((str[c] != '0' || minIndex > 0) && minIndex > c)
                            {
                                if (Convert.ToInt32(str[c]) < Convert.ToInt32(str[minIndex]))
                                {
                                    char ch = str[minIndex];
                                    str = str.Substring(0, minIndex) + str[c].ToString() + str.Substring(minIndex + 1);
                                    break;
                                }
                            }
                        }
                    }
                    //int i = 0;
                    //int minIndex = minIndex = findMinIndex(str);
                    //int replaceableIndex = findMinReplIndex(str.Substring(minIndex+1), str[minIndex]) + minIndex +1;
                    //if (minIndex > replaceableIndex)
                    //{
                    //    char c = str[replaceableIndex];
                    //    str = str.Substring(0, replaceableIndex) + str[minIndex].ToString() + str.Substring(replaceableIndex + 1);
                    //    str = str.Substring(0, minIndex) + c.ToString() + str.Substring(minIndex + 1);
                    //    min = Convert.ToInt64(str);
                    //}
                    max = findMinIndex(N.ToString());
                }
                Console.WriteLine("Case #{2}: {0} {1}", Math.Min(min, N), max, t+1);
            }
            sw.Close();
        }

        private static int findMinReplIndex(string str, char p)
        {
            for (int c = 0; c < str.Length; c++)
            {
                if (str[c] != '0')
                {
                    if (Convert.ToInt32(str[c]) > Convert.ToInt32(p))
                        return c;
                }
            }
            return 0;
        }

        private static int findMinIndex(string str, bool NZ = true)
        {
            int minDigit = Convert.ToInt32(str[0]);
            int minIndex = 0;
            for (int c = 1; c < str.Length; c++)
            {
                int cN = Convert.ToInt32(str[c]);
                if (cN > 48 || !NZ)
                {
                    if (cN < minDigit)
                    {
                        minDigit = cN;
                        minIndex = c;
                    }
                }
            }
            return minIndex;
        }
        private static int findMaxIndex(string str, bool NZ = true)
        {
            int maxDigit = Convert.ToInt32(str[0]);
            int maxIndex = 0;
            for (int c = 1; c < str.Length; c++)
            {
                int cN = Convert.ToInt32(str[c]);
                if (cN > 48 || !NZ)
                {
                    if (cN > maxDigit)
                    {
                        maxDigit = cN;
                        maxIndex = c;
                    }
                }
            }
            return maxIndex;
        }
    }
}

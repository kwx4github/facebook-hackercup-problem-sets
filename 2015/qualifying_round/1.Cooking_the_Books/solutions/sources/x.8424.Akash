
import java.util.Scanner;

public class FacebookCookBook {
	static int smallNext = -1;
	static int largeNext = -1;
	public static void main(String [] args){
		
	
		try {
				Scanner sc = new Scanner(System.in);				
			 	int total  = sc.nextInt();			 	
				int k = 0;			   
			   int largeIndex; int smallIndex;String [] num;
			   int [] largeNumber;int [] smallNumber;
			   num = new String[total];
			   while(k<total){	
				   if(sc.hasNext())
				   {num[k] = sc.next();}
				   k++;
				  
			   }
			   sc.close();
			  
			   for(int p=0;p<total;p++){
				   int [] number = new int [num[p].length()];
				   for(int i = 0;i<num[p].length();i++){
					   number[i] = Character.getNumericValue(num[p].charAt(i));						  
				   }
				   largeNumber = number.clone();smallNumber = number.clone();
				   largeIndex = findLargest(number);
				   smallIndex =  findSmallest(number);
				   int temp;
				   Boolean flag = false,flag1 = false;
				   if (largeNumber[largeIndex]!=0&&largeNumber[largeIndex]>largeNumber[0]){
					   temp = largeNumber[0];
					   largeNumber[0] = largeNumber[largeIndex];
					   largeNumber[largeIndex] = temp;
					   flag = true;
				   }
				   
				   if (smallNumber[smallIndex]!=0&&smallNumber[smallIndex]<smallNumber[0]){
					   temp = smallNumber[0];
					   smallNumber[0] = smallNumber[smallIndex];
					   smallNumber[smallIndex] = temp;
					   flag1 = true;
				   }	
				   if (flag1==false){
					   if(smallNext!=-1){
						   int j = 1;
						   while(j<smallNext&&j<smallNumber.length){
							   if(smallNumber[j]>smallNumber[smallNext])
							   {
								   temp = smallNumber[j];
								   smallNumber[j] = smallNumber[smallNext]; 
								   smallNumber[smallNext] = temp;
								   break;
							   }
							   j = j+1;
						   }
					   }
				   }
				   if (flag==false){
					   int j = 0;
					   while(j<largeNext&&j<largeNumber.length){
						   if(largeNumber[j]<largeNumber[largeNext])
						   {
							   temp = largeNumber[j];
							   largeNumber[j] = largeNumber[largeNext]; 
							   largeNumber[largeNext] = temp;
							   break;
						   }
						   j = j+1;
					   }
				   }
				  System.out.print("Case #"+(p+1)+": ");
				   for(int i=0;i<num[p].length();i++){
					   System.out.print(smallNumber[i]);}
				   System.out.print(" ");
				   for(int i=0;i<num[p].length();i++){
					   System.out.print(largeNumber[i]);
				   }
				   System.out.println(" ");		
				 
				   k = k+1;	
			   
			   }
			  
			  
		   
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
	}
	static int findSmallest( int [] arr){
		int small = arr[0];
		int index = 0;
		smallNext = -1;
		for (int i = 0; i < arr.length; i++)
		{ if (arr[i] < small&&arr[i]!=0)
		    {				
		        small = arr[i];
		        smallNext = index;
		        index = i;		      
		    }	
			if(arr[i]==0){
				smallNext = i;
			}
		 
		}	
		return index;
	}
	static int findLargest( int [] arr){
		int large = arr[0];
		int index = 0;largeNext = -1;
		for (int i = 0; i <arr.length; i++)
		{ 
			if (arr[i] > large)
		    {
		    	large = arr[i];
		    	largeNext = index;
		        index = i;		        
		    }	
			if(arr[i]==large&&index!=i&&largeNext!=i){
				largeNext=i;
			}
		}
		return index;
	}
}

//////////////////////////////////////////////////////
//
//  Cooking the Books
//  15 points
//  Facebook Hacker Cup 2015
//  Created by Moussa on 11-JAN-2015 12:41 AM
//  Copyright (c) 2014 Ahmsayat. All rights reserved.
//
//////////////////////////////////////////////////////
/*
 Cooking the Books
 15 points
 Download Input File
 Every business can make use of a good accountant and, if they're not big on following the law, sometimes a bad one. Bad accountants try to make more money for their employers by fudging numbers without getting caught.
 
 Sometimes a bad accountant wants to make a number larger, and sometimes smaller. It is widely known that tax auditors will fail to notice two digits being swapped in any given number, but any discrepancy more egregious will certainly be caught. It's also painfully obvious when a number has fewer digits than it ought to, so a bad accountant will never swap the first digit of a number with a 0.
 
 Given a number, how small or large can it be made without being found out?
 
 Input
 Input begins with an integer T, the number of numbers that need tweaking. Each of the next T lines contains a integer N.
 
 Output
 For the ith number, print a line containing "Case #i: " followed by the smallest and largest numbers that can be made from the original number N, using at most a single swap and following the rules above.
 
 Constraints
 1 ≤ T ≤ 100
 0 ≤ N ≤ 999999999
 N will never begin with a leading 0 unless N = 0
 */

//Cooking the Books

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>

using namespace std;

int main()
{
    //ifstream cin("/Ahmsayat/1/facebook/hacker cup/2015/Qualification Round/problem 1/1.input");
    
    int T; cin>>T;
    for (int t = 1; t<=T; t++)
    {
        int num; cin >> num;
        stringstream ss;
        ss << num;
        string s;
        ss >> s;
        
        //find min
        char min = ':';
        int min_i = -1;
        for (int i=0; i<s.length(); i++)
            if(s[i] != '0' && s[i] < min)
            {
                min = s[i];
                min_i = i;
            }
        
        //swap
        if(min_i != -1 && min != ':')
        {
            char temp = s[0];
            s[0] = 	s[min_i];
            s[min_i] = temp;
        }
        
        string min_num = s;
        
        //cout << s << " " << num << endl;
        stringstream ss2;
        ss2 << num;
        ss2 >> s;
        
        //find max
        char max = '/';
        int max_i = -1;
        for (int i=0; i<s.length(); i++)
            if(s[i] != '0' && s[i] > max)
            {
                max = s[i];
                max_i = i;
            }
        
        //swap
        if(max_i != -1 && max != '/')
        {
            char temp = s[0];
            s[0] = 	s[max_i];
            s[max_i] = temp;
        }
        
        string max_num = s;
        
        //cout << s << " " << num << endl;
        
        cout << "Case #" << t << ": " << min_num << " " << max_num << endl;
    }
    return 0;
}

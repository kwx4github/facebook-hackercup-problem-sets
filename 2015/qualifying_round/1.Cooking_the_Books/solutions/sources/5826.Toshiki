{-# LANGUAGE ScopedTypeVariables #-}
-- {-# LANGUAGE Rank2Types #-}
-- {-# LANGUAGE BangPatterns #-}
import Control.Monad
import Control.Applicative
import Data.List
import Data.Bits
import Data.Char
import Data.Ord
import Data.Maybe
import Data.Tuple
import qualified System.IO
import qualified Data.Map as M
import qualified Data.ByteString.Char8 as B
import Control.DeepSeq
import qualified Data.Sequence as Seq
import Data.Sequence ((<|),(|>),(><),viewl,viewr,ViewL(..),ViewR(..))
import qualified Data.Vector as V
import Data.Vector ((!),(//))

main = gcj $ do
  nStr <- getLine
  return . unwords . map show $ solve nStr

solve :: S -> [Z]
solve s
  | s == "0"  = [0,0]
  | otherwise = minMax $ [read t | t <- swaps s, head t /= '0']

swaps s' = let
  s = V.fromList s'
  ixs = [0 .. V.length s - 1]
  in  s' : [V.toList $ s//[(j,s!i),(i,s!j)] | i<-ixs, j<-ixs, i/=j]

minMax xs = [minimum xs, maximum xs]

type Z = Integer
type Q = Rational
type R = Double
type S = String

fint :: (Integral a, Num b) => a -> b
fint = fromIntegral

yesno :: Bool -> S
yesno True = "yes"
yesno False = "no"

gcj solver = do
  System.IO.hSetBuffering System.IO.stdout System.IO.NoBuffering
  t <- read <$> getLine
  forM_ [1..t] $ \num -> solver >>= \ans ->
    putStrLn $ "Case #"++show num++": "++ans
    -- putStrLn ("Case #"++show num++":") >> mapM_ putStrLn ans

import sys

def menor(num, a, ind):
    menor = a
    index = -1
    for i in range(len(num)):
        if int(num[i]) < int(menor):
            if ind == 0:
                if int(num[i]) != 0:    #validate to cero ---> refactor
                    menor = num[i]
                    index = i
            else:
                menor = num[i]
                index = i
    return [int(menor),index]

def mayor(num, a, ind):
    menor = a
    index = -1
    for i in range(len(num)):
        if int(num[i]) > int(menor):
                menor = num[i]
                index = i
    return [int(menor),index]


def render(val):
    st = ''
    for i in val:
        st = st + str(i)
    return st

def popNumber(val, cas):
    index = 0
    for l in range(len(val)):
        if cas == 1:
            men = menor(val[l:], val[l], index)
            if men[0] != int(val[l]):
                list1 = list(val)
                list1[l] = men[0]
                list1[men[1] + l] = val[l]
                val = render(list1)
                return val
            index = index + 1
        else:
            may = mayor(val[l:], val[l], index)
            if may[0] != int(val[l]):
                list1 = list(val)
                list1[l] = may[0]
                list1[may[1] + l] = val[l]
                val = render(list1)
                return val
            index = index + 1
    return val

def solve(line):
    row = str(int(line))

    if int(row) == 0:
        return ['0','0']
    if len(str(row)) == 1:
        return [row,row]
    #case dos digits
    if len(row) == 2:
        if (row[1] == '0'):
            return [row,row]
    #case all cero
    hold = row
    if len(hold.replace('0','')) == 1:
        return [row,row]
    return [popNumber(row, 1),popNumber(row, 0)]

def readData():
    i = 0
    for line in sys.stdin:
        i = i + 1
        if i != 1:
            response = solve(line)
            print (("Case #%i: %s %s") % (i-1, response[0], response[1]))

def main():
    readData()

main()
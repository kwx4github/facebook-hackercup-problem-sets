import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Books {

	private static BufferedReader br;
	private static StringTokenizer st;
	private static PrintWriter pw;

	public static void main(String[] args) throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

		final int MAX_NUM_CASE = readInt();
		for (int qq = 1; qq <= MAX_NUM_CASE; qq++) {
			pw.print("Case #" + qq + ": ");
			
			char[] ch = nextToken().toCharArray();
			if (ch.length == 1) {
				pw.println(ch[0] + " " + ch[0]);
				continue;
			}

			int minid = ch.length - 1;
			while (ch[minid] == '0') minid --;
			int maxid = ch.length - 1;
			while (ch[maxid] == '0') maxid --;
			for (int i = ch.length-1; i >= 0; i--) {
				minid = (ch[i] < ch[minid] && ch[i] > '0') ? i : minid;
				maxid = (ch[i] > ch[maxid] && ch[i] > '0') ? i : maxid;
			}
			
			// swap
			char temp;
			temp = ch[0];
			ch[0] = ch[minid];
			ch[minid] = temp;
			String minS = "";
			for (char c : ch) minS += c;
			pw.print( minS + " ");
			// reswap
			temp = ch[0];
			ch[0] = ch[minid];
			ch[minid] = temp;
			// swap again
			temp = ch[0];
			ch[0] = ch[maxid];
			ch[maxid] = temp;
			String maxS = "";
			for (char c : ch) maxS += c;
			pw.println(maxS);
		}
		pw.close();
	}

	private static long readLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private static double readDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}

	private static int readInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private static String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			if (!br.ready()) {
				pw.close();
				System.exit(0);
			}
			st = new StringTokenizer(br.readLine().trim());
		}
		return st.nextToken();
	}

}

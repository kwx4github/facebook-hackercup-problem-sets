let rec decompose = function
  |0 -> []
  |n -> (n mod 10) :: (decompose (n/10))

let rec recompose = function
  |[] -> 0
  |t::q -> t + (10 * (recompose q))

let split l n = 
  let rec split_aux l n = 
    match (l,n) with
    |([],_) -> failwith "error"
    |(t::q,0) -> ([],t,q)
    |(t::q,n) -> 
      let (l1,a,l2) = split_aux q (n-1) in
      (t::l1,a,l2)
  in split_aux l n

let invert l a b = 
  let (l1,m,l2) = split l a in 
  let (l2,m',l3) = split l2 (b-a-1) in
  l1 @ [m'] @ l2 @ [m] @ l3

let answer_aux nb = 
  let l = decompose nb in
  let n = List.length l in
  let mi, ma = ref nb, ref nb in
  for i = 0 to (n-2) do 
    for j = (i+1) to (n-1) do 
      let v = invert l i j in
      let v' = recompose v in
      if v' < !mi && List.nth v (n-1) <> 0 then
        mi := v';
      if v' > !ma && List.nth v (n-1) <> 0 then
        ma := v'
    done;
  done;
  (!mi,!ma)
      
let answer n = 
  if n < 10  then (n,n)
  else answer_aux n

let solve_file filename outname = 
  let input = open_in filename in
  let output = open_out outname in
  let n = int_of_string (input_line input) in
  for i = 1 to n do 
    let v = int_of_string (input_line input) in
    let (a,b) = answer v in
    Printf.fprintf output "Case #%i: %i %i\n" i a b
  done

let _ = 
  solve_file Sys.argv.(1) "answer"




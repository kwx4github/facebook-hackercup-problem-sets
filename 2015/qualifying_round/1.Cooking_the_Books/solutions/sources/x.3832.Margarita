#include<bits/stdc++.h>

using namespace std;

// Template
#define mp(a, b) make_pair(a, b)
#define pb(x) push_back(x)
#define ALL(X) X.begin(), X.end()
#define SORT(x) sort(ALL(x))
#define next ___next
#define hash ___hash
#define rank ___rank
#define get _____get
#define count __count
#ifdef _DEBUG_
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...)
#endif
#if((_WIN32 || __WIN32__) && __cplusplus < 201103L)
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

const double EPS = 1e-9;
const int IINF = 1000000000;
const double PI = acos(-1.0);
const long long LINF = 6000000000000000000LL;

// End of template

int main() {
#ifdef _DEBUG_
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int test_cases;
    scanf("%d", &test_cases);
    for(int test_id = 1; test_id <= test_cases; ++test_id) {
        string s;
        cin >> s;
        printf("Case #%d: ", test_id, s.c_str());
        if(s.size() == 1) {
            printf("%s %s\n", s.c_str(), s.c_str());
        }
        else {
            string answer = s;
            vector<string> output;
            for(int i = 0; i < s.size(); ++i) {
                int pos = -1;
                for(int j = i + 1; j < s.size(); ++j) {
                    if(s[j] > s[i]) {
                        if(pos == -1 || s[pos] < s[j]) {
                            pos = j;
                        }
                    }
                }
                if(pos == -1) continue;
                string tmp = s;
                swap(tmp[i], tmp[pos]);
                answer = max(answer, tmp);
            }
            output.pb(answer);
            eprintf("%s ", answer.c_str());
            answer = s;
            for(int i = 0; i < s.size(); ++i) {
                int pos = -1;
                for(int j = i + 1; j < s.size(); ++j) {
                    if(s[j] < s[i]) {
                        if(i == 0 && s[j] == '0') continue;
                        if(pos == -1 || s[pos] > s[j]) {
                            pos = j;
                        }
                    }
                }
                if(pos == -1) continue;
                string tmp = s;
                swap(tmp[i], tmp[pos]);
                answer = min(answer, tmp);
            }
            eprintf("%s\n", answer.c_str());
            output.pb(answer);
            SORT(output);
            for(int i = 0; i < output.size(); ++i) {
                printf("%s", output[i].c_str());
                if(!i) printf(" ");
            }
            printf("\n");
        }
    }

    return 0;
}

#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <stack>
#include <string.h>
#include <stdio.h>
#include <iomanip>
using namespace std;

#define REP(i,N) for (int i = 0; i < (N); ++i)

typedef unsigned int ui;
typedef long long ll;

typedef vector<int> vi;
typedef vector<ll> vll;

template<class T> void printImpl(const vector<T> & coll) { copy(coll.begin(), coll.end(), ostream_iterator<T>(cout, " ")); cout << endl; }
template<class T, int N> void printImpl(T (&coll)[N]) { copy(coll, coll + N, ostream_iterator<T>(cout, " ")); cout << endl; }
template<class Key, class Value> void printImpl(const map<Key, Value> & data) { typename map<Key, Value>::const_iterator it; for (it = data.begin(); it != data.end(); ++it) { cout << it->first << ":" << it->second << endl; } }
template <class T> void printImpl(const T & data) { cout << data << endl; }

#define DEBUGPRINT
#ifdef DEBUGPRINT
#define print(x) cout << #x" = "; printImpl(x);
#else
#define print(x) ;
#endif

int main()
{
    int caseCount;
    cin >> caseCount;

    for (int csIx = 1; csIx <= caseCount; ++csIx)
    {
        cout << "Case #" << csIx << ": ";

        string N;
        cin >> N;
        if (N.length() == 1)
        {
            cout << N << " " << N << endl;
            continue;
        }

        string minN = N, maxN = N;
        for (int i = 0; i < N.length() - 1; ++i)
        {
            for (int j = i + 1; j < N.length(); ++j)
            {
                string newN = N;
                swap(newN[i], newN[j]);
                if (newN[0] == '0')
                {
                    continue;
                }

                minN = min(minN, newN);
                maxN = max(maxN, newN);
            }
        }

        cout << minN << " " << maxN << endl;
    }

    
    return 0;
}
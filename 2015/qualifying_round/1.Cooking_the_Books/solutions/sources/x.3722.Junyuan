import Control.Monad
import Data.List
import Text.Printf;

infinity :: Int
infinity = 0x3f3f3f3f

gao :: String -> (Int, Int)
gao s = (smallest, largest)
  where
    n = length s
    vs = filter (/= infinity) $ (read s) : (map gao' [(i, j) | i <- [0 .. n - 1], j <- [i + 1 .. n - 1]])
    smallest = minimum vs
    largest = maximum vs

    gao' :: (Int, Int) -> Int
    gao' (i, j) | (s!!j) == '0' = infinity
    gao' (i, j) = read $ (take i s) ++ [s!!j] ++ (drop (i + 1) $ take j s) ++ [s!!i] ++ (drop (j + 1) s)

main = do
  t <- fmap read getLine :: IO Int
  forM_ [1 .. t] $ \i -> do
    s <- getLine
    let (smallest, largest) = gao s
    printf "Case #%d: %d %d\n" i smallest largest

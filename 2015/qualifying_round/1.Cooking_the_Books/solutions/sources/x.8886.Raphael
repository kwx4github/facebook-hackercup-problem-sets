/*
 * Cooking the Books
 * Raphael S. Carvalho <raphael.scarv@gmail.com>
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <string.h>

#define MAX_DIGITS 9
#define MAX_NUMBER 999999999

inline void swap(int *a, int *b)
{
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

inline void print_corner_cases(int case_id, int small, int large)
{
    printf("Case #%d: %d %d\n", case_id, small, large);
}

inline void print_number(int *array, int digits)
{
    int i;
    for (i = 0; i < digits; i++) {
        assert(array[i] >= 0 && array[i] <= 9);
        putchar(array[i] + '0');
    }
}

int store_digits(int *array, int number)
{
    int i;
    int digits;
    int tmp_array[MAX_DIGITS];

    digits = 0;
    for (i = 0; i < MAX_DIGITS && number > 0; i++) {
        tmp_array[i] = number % 10;
        number /= 10;
        digits++;
    }
    // reverse array
    for (i = 0; i < digits; i++) {
        array[digits - (i + 1)] = tmp_array[i];
    }
    assert(digits >= 1 && digits <= 9);
    return digits;
}

void create_smallest(const int *c_array, int digits)
{
    int array[MAX_DIGITS];
    int smallest_number_idx;
    int i, j;

    memcpy(array, c_array, digits * sizeof(int));

    for (i = 0; i < digits - 1; i++) {
        smallest_number_idx = i;

        for (j = i + 1; j < digits; j++) {
            if (i == 0 && array[j] == 0) {
                continue;
            }
            if (array[j] < array[smallest_number_idx]) {
                smallest_number_idx = j;
            }
        }

        if (smallest_number_idx != i) {
            swap(&array[i], &array[smallest_number_idx]);
            break;
        }
    }
    print_number(array, digits);
}

void create_largest(const int *c_array, int digits)
{
    int array[MAX_DIGITS];
    int largest_number_idx;
    int i, j;

    memcpy(array, c_array, digits * sizeof(int));

    for (i = 0; i < digits - 1; i++) {
        largest_number_idx = i;

        for (j = i + 1; j < digits; j++) {
            if (i == 0 && array[j] == 0) {
                continue;
            }
            if (array[j] > array[largest_number_idx]) {
                largest_number_idx = j;
            }
        }

        if (largest_number_idx != i) {
            swap(&array[i], &array[largest_number_idx]);
            break;
        }
    }
    print_number(array, digits);
}

void process_number(int case_id, int number)
{
    int array[MAX_DIGITS];
    int digits;

    if (number == 0 || number == 999999999) {
        print_corner_cases(case_id, number, number);
        return;
    }

    digits = store_digits(array, number);
    if (digits == 1) {
        print_corner_cases(case_id, number, number);
        return;
    }

    printf("Case #%d: ", case_id);
    create_smallest(array, digits);
    putchar(' ');
    create_largest(array, digits);
    putchar('\n');
}

int main(int argc, char **argv)
{
    int T;
    int N;

    scanf("%d", &T);
    if (T < 1 || T > 100) {
        return -1;
    }

    int i;
    for (i = 0; i < T; i++) {
        scanf("%d", &N);
        if (N < 0 || N > MAX_NUMBER) {
            return -1;
        }
        process_number(i+1, N);
    }

    return 0;
}
import java.io.*;
import java.util.*;
public class P1 {
	static String smallest;
	static String biggest;
	
	public static void main (String [] args) throws IOException {
		FileReader fileReader = new FileReader(new File("cooking_the_books.txt"));
		BufferedReader bufferedReader = new BufferedReader(fileReader); 
		FileWriter fileWriter = new FileWriter(new File("out1.txt"));
		int T=Integer.parseInt(bufferedReader.readLine());
	    int count=1;
	    while (count<=T)
	    {
	    	 String N= bufferedReader.readLine();
	    	 calc(N);
	    	 fileWriter.write("Case #"+count+": "+smallest+" "+biggest+"\n"); 
	    	 count++;
	    }
	    fileReader.close();
	    fileWriter.close();
	}
	static void  calc(String N)
	{   if (N.length()==1){
			smallest=N;
			biggest=N;
			return;
		}
	   	char[] num=N.toCharArray();
    	char[] numsorted=(char[]) num.clone();
    	char[] numclone;
    	Arrays.sort(numsorted);
 
    
    	int index1=-1;
    	int index2=-1;
    	char max_bit='\0';
    	char min_bit='\0';
    	for (int i=0;i<num.length;i++)
    	{  
           	 if(num[i]!=numsorted[num.length-i-1]) {
           		 index1=i;
    			 max_bit=numsorted[num.length-i-1];
    			 break;
    		 }
    	 }

    	 if (index1==-1) biggest=new String(num);
    	 else {
    		 for (int i=num.length-1;i>=0;i--){
    			 if(num[i]==max_bit) {
    				 index2=i;
    				 break;
    			 }
    		 }
    		 numclone=(char[]) num.clone();
    		 swap(numclone,index1,index2);
    		 biggest=new String(numclone);
    	 }
 
    	 if ( numsorted[0]!='0'){
    		 index1=-1;
    		 index2=-1;
        	 for (int i=0;i<num.length;i++)
        	 {  
        		 if(num[i]!=numsorted[i]) {
        			 index1=i;
        			 min_bit=numsorted[i];
        			 break;
        		 }
        	 }
 
         	 if (index1==-1) smallest=new String(num);
        	 else {
        		 for (int i=num.length-1;i>=0;i--){
        			 
        			 if(num[i]==min_bit) {
        				 index2=i;
        				 break;
        			 }
        		 }
        	  	 numclone=(char[]) num.clone();
        		 swap(numclone,index1,index2);
        		 smallest=new String(numclone);
        	 } 
      
 
    		 return;
    
    	 }
    	 char small2=' ';
    	 for (int i=0;i<numsorted.length;i++)
    	 {
    		 if (numsorted[i]!='0') {
    			 small2=numsorted[i];
    			 break;
    		 }
    	 }
    	 if (small2!=num[0]){
     		 for (int i=num.length-1;i>=0;i--){
    			 
    			 if(num[i]==small2) {
    				 index2=i;
    				 break;
    			 }
    		 }
     	  	 numclone=(char[]) num.clone();
    		 swap(numclone,0,index2);
    		 smallest=new String(numclone); 
    		 return;
    	 } 
 
 		 for (int i=num.length-1;i>=0;i--){
			 if(num[i]=='0') {
				 index2=i;
				 break;
			 }
		 }
 		 index1=1;
    	 for (int i=1;i<num.length;i++)
    	 {
    		 if (num[i]!='0') {
    			 index1=i;
    			 break;
    		 }
    	 }
    
 	  	 numclone=(char[]) num.clone();
		 swap(numclone,index1,index2);
		 smallest=new String(numclone); 
		 return;
	}
	static void swap(char[] numstr,int idx1,int idx2){
		char temp=numstr[idx1];
		numstr[idx1]=numstr[idx2];
		numstr[idx2]=temp;
		return;
	}
}
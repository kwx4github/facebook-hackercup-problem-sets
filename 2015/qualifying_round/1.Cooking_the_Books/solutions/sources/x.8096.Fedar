#include <iostream>
#include <vector>
#include <utility>

using namespace std;

int IntFromDigits(vector<int>);

pair<int, int> MinMaxTweaks(int a)
{
	int ora = a;
	vector<int> split;
	int min = 10, smin =10, max = -1, smax = -1, szero = -1;
	int tmp = 0, step = 0;
	bool hasZero = false;
	while(a > 0)
	{
		tmp = a % 10;
		split.push_back(tmp);
		//cout << "Pushed " << tmp << endl;
		a /= 10;

		if(tmp == 0)
		{
			if(!hasZero)
				szero = step;
			hasZero = true;
		}
//		if(step > 0)
//		{
			if (tmp > max) {
				smax = step;
				max = tmp;
			}
//		}
		
		if (tmp < min && tmp > 0)
		{
			min = tmp;
			smin = step;
		}
		++step;
	}


	//cout << "min = "<< min << endl;
	//cout << "has zero = " << hasZero <<endl;
	
	if (step <= 1)
	{
		return pair<int, int>(ora, ora);
	}
	else
	{
		vector<int> minS(split);
		vector<int> maxS(split);

		for(int i = split.size() - 1; i != -1; --i)
		{
			if(minS[i] > min)
			{
				if (i <= smin)
					break;
				minS[smin] = minS[i];
				minS[i] = min;
				break;
			}
			min = hasZero ? (smin = szero, 0) : min;
		}   
		
		for(int i = split.size() - 1; i != -1; --i)	   
		{
			if(maxS[i] < max)
			{
				if (i <= smax)
					break;
				maxS[smax] = maxS[i];
				maxS[i] = max;
				break;
			}
		}
		return pair<int, int>(IntFromDigits(minS), IntFromDigits(maxS));
	}
					
}

int IntFromDigits(vector<int> digits)
{
	int result = 0;
	for(int i = digits.size() - 1; i != -1; --i)
	{
		result *= 10;
		//cout << "Adding " << digits[i] << endl;
		result += digits[i];
	}
	//cout << "Result is " << result << endl;
	return result;
}

int main(int argc, char* args[])
{
	int T;
	cin >> T;
	long long int minR = 0, maxR = 0;
	for (int t = 0; t != T; ++t)
	{
		int curNum;
		cin >> curNum;
		pair<int, int> ans = MinMaxTweaks(curNum);
		cout << "Case #" << t+1 << ": " << ans.first << " " << ans.second <<endl;
	}

	
	return 0;
}

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;

// Written by Daniel Dmytriw for the Facebook Hacker Cup 2015 Qualification Round
// ddmytriw@gmail.com
public class CookingTheBooks  implements Runnable {
	static String INPUT_FILE = "cooking_the_books.txt";
	//static String INPUT_FILE = "cooking_the_books_example_input.txt";
	static String OUTPUT_FILE = "cooking_the_books_output.txt";
	private ProblemInput input = null;

	/**
	 * @param args
	 */
	public static void main(String[] args) {
        new CookingTheBooks().run();
	}

	@Override
	public void run() {
		BufferedReader br;
		BufferedWriter bw;
		try 
		{
			br = new BufferedReader(new FileReader(INPUT_FILE));
			bw = new BufferedWriter(new FileWriter(OUTPUT_FILE));
		    String line = br.readLine();
		    int num_test_cases = Integer.parseInt(line);		    
		    for(int i = 0; i < num_test_cases; i++)
		    {
				long start = System.nanoTime();
				input = new ProblemInput(br.readLine());
				String result = solveProblem();
				long end = System.nanoTime();			
				printOutput(bw, i, result);
				//System.out.println("time elapsed: " + (end-start) * 0.000000001f);
		    }
		    
		    /*for(int k = 0; k < 100; k++)
		    {
				long start = System.nanoTime();
				int random = Math.round((float)Math.random() * 10000000f);
				input = new ProblemInput(Integer.toString(random));
				String result = solveProblem();
				long end = System.nanoTime();			
				printOutput(bw, k, result);
				//System.out.println("time elapsed: " + (end-start) * 0.000000001f);
		    }*/
		    br.close();
		    bw.close();
		    
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	private class ProblemInput
	{
		String value;
		
		public ProblemInput(String input) {
			StringTokenizer st = new StringTokenizer(input);
			this.value = st.nextToken();	
		}
	}

	private String solveProblem() 
	{
		String lowest = swap_lowest(input.value.toCharArray(), 0);
		String highest = swap_highest(input.value.toCharArray(), 0);
		
		String result_string = String.format("%s %s", lowest, highest);
		return result_string;
	}
	
	private String swap_highest(char[] value, int start_index) {
		if(start_index >= value.length - 1)
			return new String(value);
		
		//find highest (last) digit and swap with first
		int swap_index = start_index;
		for(int i = start_index + 1; i < value.length; i++)
		{
			if(value[i] >= value[swap_index]
					&& value[i] > value[start_index])
			{
				swap_index = i;
			}
		}
		
		if(swap_index != start_index)
		{
			char temp = value[start_index];
			value[start_index] = value[swap_index];
			value[swap_index] = temp;
			return new String(value);
		}
		else {
			//if no swap try again with substring
			return swap_highest(value, start_index + 1);
		}
	}

	private String swap_lowest(char[] value, int start_index) {
		if(start_index >= value.length - 1)
			return new String(value);
		
		//find highest (last) digit and swap with first
		int swap_index = start_index;
		for(int i = start_index + 1; i < value.length; i++)
		{
			if(value[i] <= value[swap_index]
				&& value[i] < value[start_index]
				&& !(value[i] == '0' && start_index == 0))
			{
				swap_index = i;
			}
		}
		
		if(swap_index != start_index)
		{
			char temp = value[start_index];
			value[start_index] = value[swap_index];
			value[swap_index] = temp;
			return new String(value);
		}
		else {
			//if no swap try again with substring
			return swap_lowest(value, start_index + 1);
		}
	}


	private void printOutput(BufferedWriter bw, int test_id, String result) throws IOException 
	{
		test_id++;
		//String result_string = "Case " + input.value + ": " + result;
		String result_string = "Case #" + test_id + ": " + result;
		bw.write(result_string);
		bw.newLine();
		System.out.println(result_string);
	}
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>

typedef long long int lint;

using namespace std;

vector<int> to_digits(lint n) {
  if(n == 0) return vector<int> { 0 };

  vector<int> digits;
  while(n != 0) {
    digits.push_back(n % 10);
    n /= 10;
  }
  reverse(digits.begin(), digits.end());
  return digits;
}

lint to_number(vector<int> digits) {
  int n = 0;
  for(int d : digits) {
    n = n * 10 + d;
  }
  return n;
}

pair<lint, lint> solve(lint n) {
  lint smin = n, smax = n;

  vector<int> digits = to_digits(n);

  for(int i = 0; i < digits.size(); i++) {
    for(int j = i; j < digits.size(); j++) {
      if(i == 0 && digits[j] == 0) continue;

      vector<int> swapped_digits(digits);
      swapped_digits[i] = digits[j];
      swapped_digits[j] = digits[i];
      lint m = to_number(swapped_digits);

      smin = min(smin, m);
      smax = max(smax, m);
    }
  }

  return make_pair(smin, smax);
}

int main() {
  int T;

  cin >> T;
  for(int t = 1; t <= T; t++) {
    lint n;
    cin >> n;

    pair<lint, lint> solution = solve(n);

    cout << "Case #" << t << ": "
         << solution.first << " "
         << solution.second << endl;
  }

  return 0;
}

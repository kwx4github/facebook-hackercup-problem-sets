#include        <cstdio>
#include        <algorithm>
#include        <map>
#include        <vector>
#include        <iostream>
#include        <stack>
#include        <queue>
#include        <bitset>
#include        <cstring>
#include        <cctype>
#include        <bitset>

#define         rep(i,a,b) for(int i=a;i<=b;i++)
#define         repp(i,a,b) for(int i=a;i>=b;i--)
#define         mset(x,val) memset(x,val,sizeof x)

#define         pb pushback
#define         st first
#define         sc second

using namespace std;

typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

int main()
{
    freopen("cooking_the_books.txt","r",stdin);
    freopen("cooking_the_books.o","w",stdout);
    int tc;
    string n,s1,s2;
    scanf("%d",&tc);
    rep(nc,1,tc)
    {
        cin>>n;
        int idx=0,xx=0;
        s1=s2=n;
        bool notsame=false;
        //find smallest number
        while(!notsame && xx!=n.size()-1)
        {
            idx=xx;
            rep(i,idx+1,n.size()-1)
            {
                if(xx==0)
                {
                    if(n[i]<n[idx] && n[i]!='0')
                        idx=i;
                }
                else
                {
                    if(n[i]<n[idx])
                        idx=i;
                }
            }
            if(xx!=idx)
            {
                notsame=true;
                break;
            }
            else
                xx++;
        }
        if(notsame)
        {
            string tmp=n; string tmp2=n;
            if(n[idx]=='0')
            {
                rep(i,1,n.size()-1)
                {
                    swap(tmp2[i],tmp2[idx]);
                    tmp = min(tmp,tmp2);
                    tmp2 = n;
                }
            }
            else
            {
                rep(i,0,n.size()-1)
                {
                    swap(tmp2[i],tmp2[idx]);
                    tmp = min(tmp,tmp2);
                    tmp2 = n;
                }
            }
            s1=tmp;
        }
        //find largest number
        idx=0;
        rep(i,1,n.size()-1)
        {
            if(n[i]>n[idx])
                idx=i;
        }
        swap(s2[0],s2[idx]);
        cout<<"Case #"<<nc<<": "<<s1<<" "<<s2<<endl;
    }
}

#include <bits/stdc++.h>

using namespace std;

string best_dumb(const string &number) {
    string str = number;
    string best = number;
    for (int i = 0; i < str.length(); ++i) {
        for (int j = i + 1; j < str.length(); ++j) {
            swap(str[i], str[j]);
            if (str[0] != '0' && str > best) {
                best = str;
            }
            swap(str[i], str[j]);
        }
    }
    return best;
}

string best(string number) { // as dumb as previous
    vector<int> r_max;
    r_max.resize(number.length());
    r_max[r_max.size() - 1] = number.length() - 1;
    for (int i = r_max.size() - 2; i >= 0; --i) {
        r_max[i] = (number[i] > number[r_max[i + 1]]) ? i : r_max[i + 1];
    } 
    bool changed = false;
    int i = 0;
    while (!changed && i < number.length() - 1) {
        if (number[r_max[i + 1]] > number[i]) {
            swap(number[i], number[r_max[i + 1]]);
            changed = true;
        }
        ++i;
    }
    return number;
}

string worst_dumb (const string &number) {
    string str = number;
    string worst = number;
    for (int i = 0; i < number.length(); ++i) {
        for (int j = i + 1; j < number.length(); ++j) {
            swap(str[i], str[j]);
            if (str[0] != '0' && str < worst) {
                worst = str;
            }
            swap(str[i], str[j]);
        }
    }
    return worst;
}

string worst (string number) {
    vector<int> r_min;
    int not_zero_min = number[number.length() - 1] == '0' ? -1 : number.length() - 1;
    r_min.resize(number.length());
    r_min[r_min.size() - 1] = number.length() - 1;
    for (int i = number.length() - 2; i >= 0; --i) {
        if (number[i] != '0') {
            not_zero_min = (not_zero_min == -1 || number[i] < number[not_zero_min]) ? i : not_zero_min;
        }
        r_min[i] = (number[i] < number[r_min[i + 1]]) ? i : r_min[i + 1]; 
    }
    bool changed = false;
    int i = 0;
    if (not_zero_min > 0 && number[not_zero_min] < number[0]) {
        swap(number[0], number[not_zero_min]);
        changed = true;
    }
    while (!changed && i < number.length() - 1) {
        if (number[i] > number[r_min[i + 1]]) {
            swap(number[i], number[r_min[i + 1]]);
            if (number[0] != '0') {
                changed = true;
            } else {
                swap(number[i], number[r_min[i + 1]]);
            }
        }
        ++i;
    }
    return number;
}



int main() {
#ifdef _DEBUG
    freopen("cooking_the_books.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#define DEBUG(x) do { cerr << x << endl; } while (0)
#else
#define DEBUG(x)
#endif
    int T;
    cin >> T;
    for (int i = 0; i < T; ++i) {
        string str[3];
        cin >> str[0];
        str[1] = worst(str[0]);
        str[2] = best(str[0]);
        cout << "Case #" << i + 1 << ": " << str[1] << " " << str[2] << "\n";
        if (str[1] != worst_dumb(str[0])) {
            DEBUG(i + 1);
            DEBUG("error worst");
        }
        if (str[2] != best_dumb(str[0])) {
            DEBUG(i + 1);
            DEBUG("error best");
        }
    }
}

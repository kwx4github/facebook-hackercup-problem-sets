#include<iostream>
#include<vector>
#include<map>
#include<string>
#include<algorithm>
#include <stdio.h>
#include <string.h>


using namespace std;

int main()
{
	int t;
	string nums,maxx,minn="";
	vector<int>num;
	cin >> t;
	for (int i = 1; i <= t; i++)
	{
		cin >> nums;
		//maxdigit = nums[0]-'0';
		int mindigit = nums[0]-'0';
		for (int j = 0; j < nums.size(); j++)
		{
			num.push_back((nums[j])-'0');
			/*if (num[j]>maxdigit)
				maxdigit = num[j];
			else if (num[j] < mindigit)
				mindigit = num[j];*/
			if (num[j] < mindigit && num[j] != 0)
				mindigit = num[j];
		}
		vector<int>maxnum(num.begin(),num.end()), minnum(num.begin(),num.end());
		//cout << maxdigit << endl << mindigit << endl;
		copy(num.begin(),num.end(), maxnum.begin());
		copy(num.begin(),num.end(), minnum.begin());
		
		//int x =distance(*maxnum.begin(), *max_element(maxnum.begin(), maxnum.end()));
		vector<int>::iterator it1,it2,it3;
		it1 = max_element(maxnum.begin(), maxnum.end());
		it2 = min_element(minnum.begin(), minnum.end());
		it3 = find(minnum.begin(), minnum.end(), mindigit);

		int mx = distance(maxnum.begin(), it1);
		int mn = distance(minnum.begin(), it2);
		int _mn = distance(minnum.begin(), it3);

		//cout << mx << endl << mn << endl<<_mn<<endl;
		swap(maxnum[0], maxnum[mx]);
		if (*it2 == 0 && *it3 != 0)
			swap(minnum[0], minnum[_mn]);
		else if (*it2 != 0)
			swap(minnum[0], minnum[mn]);

		for (int x = 0; x < num.size(); x++)
		{
			maxx += to_string(maxnum[x]);
			minn += to_string(minnum[x]);
		}
		cout << "Case #" << i << ": " << minn << " " << maxx << endl;
		minn = maxx = "";
		minnum.clear();
		maxnum.clear();
		num.clear();
	}

	return 0;
}
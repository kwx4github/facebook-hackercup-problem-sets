using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CookingTheBooks {
    class Program {
        static void Main(string[] args) {
            new Worker().Run();
        }
    }

    class Worker {
        const string input = @"C:\HackerCup\cooking_the_books.txt";
        const string output = @"C:\HackerCup\output.txt";
        public void Run() {
            using (FileStream inStream = new FileStream(input, FileMode.Open, FileAccess.Read, FileShare.Read))
            using (StreamReader reader = new StreamReader(inStream))
            using (FileStream outStream = new FileStream(output, FileMode.Create, FileAccess.Write))
            using (StreamWriter writer = new StreamWriter(outStream)) {
                int T = int.Parse(reader.ReadLine());

                for (int i = 0; i < T; i++) {
                    int N = int.Parse(reader.ReadLine());

                    if(N < 10) {
                        writer.WriteLine(string.Format("Case #{0}: {1} {2}", i + 1, N, N));
                        continue;
                    }

                    List<int> bitList = new List<int>();
                    while (N > 0) {
                        int lastBit = N % 10;
                        bitList.Add(N % 10);
                        N = N / 10;
                    }

                    List<int> maxList = new List<int>(bitList);
                    ArrangeToMax(maxList);

                    List<int> minList = new List<int>(bitList);
                    ArrangeToMin(minList);

                    writer.WriteLine(string.Format("Case #{0}: {1} {2}", i + 1, ListToInt(minList), ListToInt(maxList)));
                }
            }
        }

        void ArrangeToMax(List<int> list) {
            int currBitIndex = list.Count - 1;
            int maxIndex = currBitIndex;

            while (currBitIndex > 0) {
                for (int i = 0; i < currBitIndex; i++) {
                    if (list[i] > list[maxIndex]) {
                        maxIndex = i;
                    }
                }
                if (maxIndex != currBitIndex) {
                    Swap(list, maxIndex, currBitIndex);
                    break;
                }

                currBitIndex--;
                maxIndex = currBitIndex;
            }
        }

        void ArrangeToMin(List<int> list) {
            int currBitIndex = list.Count - 1;
            int minIndex = currBitIndex;

            while (currBitIndex > 0) {
                for (int i = 0; i < currBitIndex; i++) {
                    if (list[i] < list[minIndex] && !(list[i] == 0 && currBitIndex == list.Count - 1)) {
                        minIndex = i;
                    }
                }
                if (minIndex != currBitIndex) {
                    Swap(list, minIndex, currBitIndex);
                    break;
                }

                currBitIndex--;
                minIndex = currBitIndex;
            }
        }

        int ListToInt(List<int> list) {
            int result = 0;
            int k = 1;
            for (int i = 0; i < list.Count; i++) {
                result += list[i] * k;
                k *= 10;
            }
            return result;
        }

        void Swap(List<int> list, int i, int j) {
            int temp = list[i];
            list[i] = list[j];
            list[j] = temp;
        }
    }
}

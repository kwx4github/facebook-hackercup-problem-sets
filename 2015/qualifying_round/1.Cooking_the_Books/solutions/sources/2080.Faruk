def max_right(arr):
    cur_max = -1
    cur_max_index = -1
    for i, item in enumerate(arr):
        if int(item) >= int(cur_max):
            cur_max = item
            cur_max_index = i
    return cur_max_index


def get_max(num):
    if num == '0':
        return 0

    n = len(num)
    cur_pos = 0

    while cur_pos < n:
        cur_item = num[cur_pos]
        max_r = cur_pos + max_right(num[cur_pos + 1:]) + 1
        if num[max_r] > cur_item:
            return num[:cur_pos] + num[max_r] + num[cur_pos + 1: max_r] + num[cur_pos] + num[max_r + 1:]
        cur_pos += 1

    return num


def min_right(arr, zero_ok):
    cur_min = 10
    cur_min_index = -1
    for i, item in enumerate(arr):
        if int(item) <= int(cur_min):
            if item == '0' and zero_ok == False:
                continue
            cur_min = item
            cur_min_index = i
    return cur_min_index



def get_min(num):
    if num == '0':
        return 0

    n = len(num)
    cur_pos = 0

    while cur_pos < n:
        cur_item = num[cur_pos]
        zero_ok = cur_pos != 0
        max_r = cur_pos + min_right(num[cur_pos + 1:], zero_ok) + 1
        if num[max_r] < cur_item:
            return num[:cur_pos] + num[max_r] + num[cur_pos + 1: max_r] + num[cur_pos] + num[max_r + 1:]
        cur_pos += 1

    return num



with open('cooking_the_books.txt', 'r') as f:
    input = f.readlines()

output = []

T = int(input[0])
for i in xrange(T):
    c = input[1 + i].rstrip()
    res = "Case #%d: %s %s\n" % (i + 1, get_min(c), get_max(c))
    output.append(res)

with open('output.txt', 'w') as f:
    f.writelines(output)



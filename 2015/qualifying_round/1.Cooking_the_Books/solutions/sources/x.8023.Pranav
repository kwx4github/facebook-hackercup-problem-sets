#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
using namespace std;


long convert_to_number(vector<int> digitized){
	long answer = 0;
	for (int i = 0; i < digitized.size(); ++i)
	{
		answer*= 10;
		answer+= digitized[i];
	}
	return answer;
}

long find_max(vector<int> digitized){
	vector<int> sorted_digitized = digitized;
	sort(sorted_digitized.begin(), sorted_digitized.end(), greater<int>());
	vector<int> final_answer = digitized;
	for (int i = 0; i < digitized.size(); ++i)
	{
		if (sorted_digitized[i] == digitized[i])
		{
			continue;
		}
		else{
			// Note that i will never be the last digit
			/// exchange the ith digit (farthest to the right) with the maximum after ith (the max digit will provably be larger)
			int max_index = i+1;
			int max_digit = 0;
			for (int j = i+1; j < digitized.size(); ++j)
			{
				if (digitized[j]>=max_digit)
				{
					max_digit = digitized[j];
					max_index = j;
				}
			}
			//swap ith and max_index th digits
			final_answer[max_index] = final_answer[i];
			final_answer[i] = max_digit;
			break;
		}
	}
	return convert_to_number(final_answer);
}

long find_min(vector<int> digitized){
	vector<int> sorted_digitized = digitized;
	sort(sorted_digitized.begin(), sorted_digitized.end(), less<int>());
	vector<int> final_answer = digitized;
	for (int i = 0; i < digitized.size(); ++i)
	{
		if (sorted_digitized[i] == digitized[i])
		{
			continue;
		}
		else{
			// Note that i will never be the last digit
			/// exchange the ith digit (farthest to the right) with the minimum after ith (the max digit will provably be larger)
			int min_index = i;
			int min_digit = digitized[i];
			for (int j = i+1; j < digitized.size(); ++j)
			{
				if (digitized[j]<=min_digit && digitized[j]!=0)
				{
					min_digit = digitized[j];
					min_index = j;
				}
			}
			//swap ith and min_index th digits
			final_answer[min_index] = final_answer[i];
			final_answer[i] = min_digit;
			break;
		}
	}
	return convert_to_number(final_answer);
}



int main(){
	int T;
	scanf("%d",&T);
	for (int i = 1; i <= T; ++i)
	{
		long min_answer, max_answer;
		long n;
		scanf("%ld",&n);
		vector<int> digitized;
		stack<int> temp_digitized;
		long temp_n = n;
		while(temp_n>0){
			int last_digit = temp_n%10;
			temp_n /= 10;
			temp_digitized.push(last_digit);
		}
		while(temp_digitized.size()!=0){
			int top_digit = temp_digitized.top();
			temp_digitized.pop();
			digitized.push_back(top_digit);
		}

		min_answer = find_min(digitized);
		max_answer = find_max(digitized);
		printf("Case #%d: %ld %ld\n", i, min_answer, max_answer);
	}
	return 1;
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HackerCupEx1
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args[0] == String.Empty)
            {
                Console.WriteLine("No input file, exiting");
                Environment.Exit(1);
            }
            
            if (File.Exists(args[0]) == false)
            {
                Console.WriteLine("File does not exist, exiting");
                Environment.Exit(1);
            }
            
            string[] inputFileLines = File.ReadAllLines(args[0]);
            
            if (inputFileLines.Length == 0)
            {
                Console.WriteLine("Empty File, Exiting");
                Environment.Exit(1);
            }
            int numberOfNumbers = getNumber(inputFileLines[0], 1, 100);
            if (numberOfNumbers == -1)
            {
                Environment.Exit(1);
            }

            string[] outputFileLines = new string[numberOfNumbers];
            int numberToManipulate = 0;
            int maxNumber = 0;
            int minNumber = 0;

            for (int i = 1; i <= numberOfNumbers; i++)
            {
                numberToManipulate = getNumber(inputFileLines[i], 0, 999999999);
                if (numberToManipulate == -1)
                {
                    break;
                }

                manipulateNumber(numberToManipulate, out maxNumber, out minNumber);
                outputFileLines[i - 1] = String.Format(@"Case #{0}: {1} {2}", i, minNumber, maxNumber);
            }

            File.WriteAllLines("output.txt", outputFileLines);
        }

        private static void manipulateNumber(int numberToManipulate, out int maxNumber, out int minNumber)
        {
           
            maxNumber = 0;
            minNumber = 0;

            if (numberToManipulate == 0)
            {
                return;
            }

            int currentMaxNumber = 0;
            int currentMinNumber = 9;
            int positionForMax = 0;
            int positionForMin = 0;
            int numberLength = 0;

            int currentNumber = 0;
            int manipulatedNumber = numberToManipulate;
            int firstNumber = 0;
            
            List<int> maxNumberArray = new List<int>();
            List<int> minNumberArray = new List<int>();

            while (manipulatedNumber > 0)
            {
                currentNumber = manipulatedNumber % 10;
                if (currentNumber > currentMaxNumber)
                {
                    currentMaxNumber = currentNumber;
                    positionForMax = numberLength;
                }
                if (currentNumber < currentMinNumber && currentNumber != 0)
                {
                    currentMinNumber = currentNumber;
                    positionForMin = numberLength;
                }
                manipulatedNumber /= 10;

                firstNumber = currentNumber;
                numberLength += 1;
                maxNumberArray.Add(currentNumber);
                minNumberArray.Add(currentNumber);
            }

            maxNumberArray[maxNumberArray.Count - 1] = currentMaxNumber;
            maxNumberArray[positionForMax] = firstNumber;
            maxNumberArray.Reverse();

            minNumberArray[minNumberArray.Count - 1] = currentMinNumber;
            minNumberArray[positionForMin] = firstNumber;
            minNumberArray.Reverse();

            for (int i = 0; i < maxNumberArray.Count; i++)
            {
                maxNumber *= 10;
                maxNumber += maxNumberArray[i];

                minNumber *= 10;
                minNumber += minNumberArray[i];
            }
               
        }

        private static int getNumber(string i_Number, int i_Min, int i_Max)
        {
            int result = 0;

            try
            {
                result = Int32.Parse(i_Number);
            }
            catch (Exception)
            {
                Console.WriteLine("Error! Input is not a number");
                result = -1;
                return result;
            }

            if (result < 0 || result > 999999999)
            {
                Console.WriteLine("Error! Number out of bounds");
                result = -1;
            }

            return result;
        }

        public static int currentMaxNumber { get; set; }

        public static int currentMinNumber { get; set; }
    }
}

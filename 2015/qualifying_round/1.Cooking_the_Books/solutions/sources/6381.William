#!/usr/bin/env python

def getMin(minNumbers):
  
  minVal, minIdx = min((minVal, minIdx) for (minIdx, minVal) in enumerate(minNumbers))
  for idx, n in enumerate(minNumbers):
    if n > minVal:
      numbersLessThan = [i for i in minNumbers[idx:] if (i < n)]
      if idx == 0:
        numbersLessThan = [value for value in numbersLessThan if value != 0]
      if len(numbersLessThan) > 0:
        nextSmallest = min(numbersLessThan)
        nextSmallestIdx = (len(minNumbers) - 1) - minNumbers[::-1].index(nextSmallest)
        minNumbers[idx], minNumbers[nextSmallestIdx] = minNumbers[nextSmallestIdx], minNumbers[idx]
        break
  return l2Number(minNumbers)
  

def getMax(maxNumbers):
  maxVal = max(val for val in enumerate(maxNumbers))
  for idx, n in enumerate(maxNumbers):
    if n < maxVal:
      numbersGreaterThan = [i for i in maxNumbers[idx:] if (i > n)]
      if len(numbersGreaterThan) > 0:
        nextLargest = max(numbersGreaterThan)
        nextLargestIdx = (len(maxNumbers) - 1) - maxNumbers[::-1].index(nextLargest)
        maxNumbers[idx], maxNumbers[nextLargestIdx] = maxNumbers[nextLargestIdx], maxNumbers[idx]
        break
  return l2Number(maxNumbers)

def l2Number(l):
  number = lambda l: int(''.join(str(i) for i in l))
  return number(l)

def printResult(i, minN, maxN):
  print "Case #{0}: {1} {2}".format(i, minN, maxN)

f = open('example.out')
for i, line in enumerate(f):
  if i != 0:
    num = line.rstrip('\n')
    nS = []
    for n in num:
      nS.append(int(n))

    nMin, nMax = list(nS), list(nS)
    if len(nS) == 1:
      printResult(i, nS[0], nS[0])
    else:
      printResult(i, getMin(nMin), getMax(nMax))

f.close()
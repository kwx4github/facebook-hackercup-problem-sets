using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CookTheBooks
{
    class Program
    {
        static void Main(string[] args)
        {
            string inFilePath = args[0];
            string outFilePath = args[1];

            File.WriteAllText(outFilePath, string.Empty);

            using (var fileReader = new StreamReader(inFilePath))
            {
                int numCases = int.Parse(fileReader.ReadLine());
                using (var fileWriter = new StreamWriter(outFilePath))
                {
                    for (int n = 0; n < numCases; n++)
                    {
                        string numbers = fileReader.ReadLine();
                        if (String.IsNullOrWhiteSpace(numbers))
                        {
                            continue;
                        }
                        if (int.Parse(numbers) == 0)
                        {
                            fileWriter.WriteLine("Case #{0}: 0 0", n+1);
                            continue;
                        }
                        string maxVal = numbers;
                        string minVal = numbers;
                        FindMinMaxInSingleSwap(numbers, ref minVal, ref maxVal);

                        fileWriter.WriteLine("Case #{0}: {1} {2}", n + 1, minVal, maxVal);
                    }
                }
            }
        }

        private static void FindMinMaxInSingleSwap(string numbers, ref string minVal, ref string maxVal)
        {

            if (numbers.Length == 1)
            {
                maxVal = numbers;
                minVal = numbers;
                return;
            }

            char maxDigit, minDigit;
            maxDigit = '0';
            minDigit = '9';
            int maxPos, minPos, firstZeroPos;
            maxPos = -1;
            minPos = -1;
            firstZeroPos = -1;

            bool initializedMax = false;
            bool initializedMin = false;

            // skip all numbers same as starting number..
            for (int i = 1; i < numbers.Length; i++)
            {
                if (numbers[i] == numbers[0]  && (!initializedMin && !initializedMax)) // nonzero
                {
                    continue;
                }
                char c = numbers[i];
                if (!initializedMax)
                {
                    maxPos = i;
                    maxDigit = c;
                    initializedMax = true;
                }
                if (!initializedMin && c != '0')
                {
                    minPos = i;
                    minDigit = c;
                    initializedMin = true;
                }
                if (initializedMax)
                {
                    if (c >= maxDigit)
                    {
                        maxDigit = c;
                        maxPos = i;
                    }
                }
                if (initializedMin)
                {
                    if (c <= minDigit && c != '0')
                    {
                        minDigit = c;
                        minPos = i;
                    }
                }
                if (c == '0')
                {
                    firstZeroPos = i;
                }

                // find 0 pos.. if min digit is greater than 0, and 1st digit is >= min, put 0 only.. else 1st and min swap
            }


            //Compute Max
            if (initializedMax)
            {
                for (int i = 0; (i < numbers.Length) && (i < maxPos); i++)
                {
                    if (numbers[i] < maxDigit)
                    {
                        var maxValArray = maxVal.ToCharArray();

                        char temp = maxVal[i];
                        maxValArray[i] = maxDigit;
                        maxValArray[maxPos] = temp;
                        maxVal = new string(maxValArray);
                        break;
                    }
                }
            }

            // compute min
            if (firstZeroPos < 0)
            {
                if (initializedMin)
                {
                    for (int i = 0; (i < numbers.Length) && (i < minPos); i++)
                    {
                        if (numbers[i] > minDigit)
                        {
                            var minValArray = minVal.ToCharArray();

                            char temp = minVal[i];
                            minValArray[i] = minDigit;
                            minValArray[minPos] = temp;
                            minVal = new string(minValArray);
                            break;
                        }
                    }
                }
            }
            else
            {
                if (numbers[0] == minDigit || !initializedMin)
                {
                    var minValArray = minVal.ToCharArray();

                    char temp = minVal[1];
                    minValArray[1] = '0';
                    minValArray[firstZeroPos] = temp;
                    minVal = new string(minValArray);
                }
                else
                {
                    var minValArray = minVal.ToCharArray();

                    char temp = minVal[0];
                    minValArray[0] = minDigit;
                    minValArray[minPos] = temp;
                    minVal = new string(minValArray);
                }
            }
        }
    }
}

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class CookFile {
	public static void main(String[] args) throws FileNotFoundException {
		InputStream inputStream = new FileInputStream("cooking_the_books.txt");;
		OutputStream outputStream = new FileOutputStream("cooking_the_books_out.txt");
		InputReaderCook in = new InputReaderCook(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		int t = in.nextInt();
		for (int i = 1; i <= t; i++) {
			int[] arr = solve(in, out);
			out.println("Case #" + i +": " + arr[0] + " " + arr[1]);
		}
		out.close();
	}
	
	public static int[] solve(InputReaderCook in, PrintWriter out) {
		int n = in.nextInt();
		int max = n;
		int min = n;
		String number = String.valueOf(n);
		for (int i = 0; i < number.length(); i++) {
			for (int j = i + 1; j < number.length(); j++) {
				if (i == 0 && number.charAt(j) == '0') {
					continue;
				} else {
					StringBuilder pres = new StringBuilder(number);
					pres.insert(j, number.charAt(i));
					pres.deleteCharAt(i);
					pres.insert(i, number.charAt(j));
					pres.deleteCharAt(j+1);
					int res = Integer.valueOf(pres.toString());
					max = res > max ? res : max;
					min = res < min ? res : min;
				}
			}
		}
		int arr[] = {min, max};
		return arr;
	}
}

class InputReaderCook {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReaderCook(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}
package main;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Ex1Ib {

	private static String fileName = "cooking_the_books.txt";

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new FileReader(fileName));

		String line = br.readLine();
		int counter = 1;
		while (line != null) {

			String max = GetLargestNumberPossible(line, 0);
			String min = GetLowestNumberPossible(line, 0);

			System.out.println("Case #" + counter + ": " + min + " " + max);
			line = br.readLine();
			counter++;
		}
	}

	private static String GetLargestNumberPossible(String number, int startPos) {

		int largestPos = GetLargestDigitPos(number, startPos);
		char[] numberChar = number.toCharArray();
		if (numberChar[startPos] < numberChar[largestPos]) {
			// swap
			char[] digits = number.toCharArray();
			char StartDigit = digits[startPos];
			digits[startPos] = digits[largestPos];
			digits[largestPos] = StartDigit;
			number = new String(digits);

		} else {
			if (startPos != numberChar.length - 1)
				number = GetLargestNumberPossible(number, startPos + 1);
		}

		return number;
	}

	private static int GetLargestDigitPos(String number, int startPos) {
		int largestPos = startPos;
		char[] numberChar = number.toCharArray();

		for (int i = startPos; i < numberChar.length; i++) {
			if (numberChar[i] >= numberChar[largestPos]) {
				largestPos = i;
			}
		}
		return largestPos;
	}

	private static String GetLowestNumberPossible(String number, int startPos) {

		int smallestPos = GetLowestDigitPos(number, startPos);
		char[] numberChar = number.toCharArray();
		if ((startPos == 0 && numberChar[smallestPos] != '0') || startPos > 0) {
			if (numberChar[startPos] > numberChar[smallestPos]) {
				// swap
				char[] digits = number.toCharArray();
				char StartDigit = digits[startPos];
				digits[startPos] = digits[smallestPos];
				digits[smallestPos] = StartDigit;
				number = new String(digits);

			}
			 else {
					if (startPos != numberChar.length - 1)
						number = GetLowestNumberPossible(number, startPos + 1);
				}
		} else {
			if (startPos != numberChar.length - 1)
				number = GetLowestNumberPossible(number, startPos + 1);
		}

		return number;
	}

	private static int GetLowestDigitPos(String number, int startPos) {
		int smallestPos = startPos;
		char[] numberChar = number.toCharArray();

		for (int i = startPos; i < numberChar.length; i++) {
			if (numberChar[i] <= numberChar[smallestPos]) {
				smallestPos = i;
			}
		}
		return smallestPos;
	}

}

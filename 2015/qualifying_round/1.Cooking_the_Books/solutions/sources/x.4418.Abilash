#include <string>
#include <iostream>

using namespace std;

int main()
{
	ios_base :: sync_with_stdio(false);
    int min, len, t, i, z = 0, minIndex, max, maxIndex, j, temp;

    cin >> t;
    while(t--)
    {
		++z;	//	for printing case num
		int countArray[10] = {0};
		int countArray2[10] = {0};
		int lastIndex[10] = {0};
		string input, input2;
        cin >> input;
		input2 = input;
		len = input.length();
		
		//	if length is 1, then print as is
		if(len == 1)
		{
			cout << "Case #" << z << ": " << input << " " << input << endl;
			continue;
		}
		else
			cout << "Case #" << z << ": ";
		
		min = input[0] - '0';
		minIndex = 0;
		max = input[0] - '0';
		maxIndex = 0;
		
		//	count array
		for(i = 0; i < len; ++i)
		{
			++countArray[input[i] - '0'];
			++countArray2[input[i] - '0'];
			
			//	store the last index of this type of number
			if(i > lastIndex[input[i] - '0'])
				lastIndex[input[i] - '0'] = i;
		}
		
		
		//	MIN NUMBER
		
		//	edge case for first number
		//	find min element > 0
		for(i = 1; i < 10; ++i)
			if(countArray[i])
			{
				min = i;
				break;
			}
		
		//	check if the min element is not present in the index 0
		if( (input[0] - '0') != min)
		{
			temp = input[0] - '0';
			//cout << temp << endl;
			input[0] = '0' + min;
			//cout << input[0] << endl;
			input[lastIndex[min]] = temp + '0';
			//cout << input[lastIndex[min]] << endl << lastIndex[min] << endl;
			cout << input;
		}
		else
		{
			--countArray[max];
			
			//	traverse thru the entire number
			i = 1;
			while(i < len)
			{
				//	find the min element
				for(j = 0; j < 10; ++j)
					if(countArray[j])
					{
						min = j;
						--countArray[j];
						break;
					}
				
				//	check if the next element in the input is not the min
				if(input[i] != min)
				{
					temp = input[i] - '0';
					input[i] = '0' + min;
					input[lastIndex[min]] = temp + '0';
					//cout << input;
					break;
				}
				
				//	else move to the next index
				++i;
			}
			cout << input;				//	
		}
		
		
		
		//	MAX NUMBER
		
		for(i = 9; i > 0; --i)
			if(countArray2[i])
			{
				max = i;
				break;
			}

		//	check if the max element is not present in the index 0
		if( (input2[0] - '0') != max)
		{
			temp = input2[0] - '0';
			//cout << temp << endl;
			input2[0] = '0' + max;
			//cout << input[0] << endl;
			input2[lastIndex[max]] = temp + '0';
			//cout << input[lastIndex[min]] << endl << lastIndex[min] << endl;
			cout << " " << input2 << endl;
		}
		else
		{
			--countArray2[max];
			
			//	traverse thru the entire number
			i = 1;
			while(i < len)
			{
				//	find the max element
				for(j = 9; j >= 0; --j)
					if(countArray2[j])
					{
						max = j;
						--countArray2[j];
						break;
					}
					
				//	check if the next element in the input is not the max
				if(input2[i] != max)
				{
					temp = input2[i] - '0';
					input2[i] = '0' + max;
					input2[lastIndex[max]] = temp + '0';
					//cout << " " << input2 << endl;
					break;
				}
					
				//	else move to the next index
				++i;
			}
			cout << " " << input2 << endl;			//	
			
		}
    }
    return 0;
}

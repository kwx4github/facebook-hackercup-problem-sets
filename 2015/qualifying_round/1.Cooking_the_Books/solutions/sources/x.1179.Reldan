package hackercup

import scala.io.Source

object Cooking extends App {
  val source = Source.fromURL(getClass.getResource("/cooking.txt")).getLines().toList.map(_.dropWhile(_ == '0'))

  def findSmallStr(str: String) = {
    str.tail.find(el => el < str.head && el != '0') match {
      case Some(x) => swap(str, 0, str.lastIndexOf(x))
      case None =>
        val pairSmall = str.tail.zip(str.tail.sorted).find {
          case(original, s) => s < original
        }
        if (pairSmall.isEmpty) str
        else {
          val i1 = str.tail.indexOf(pairSmall.get._1) + 1
          val i2 = str.lastIndexOf(pairSmall.get._2)
          swap(str, i1, i2)
        }
    }

  }

  val res = source.tail.map {
    case (str) if str.size != 0 =>
      val sorted = str.sorted

      val pairLarge = str.zip(sorted.reverse).find {
        case(original, s) => s > original
      }

      val strLarge = if (pairLarge.isEmpty) str
      else {
        val i1 = str.indexOf(pairLarge.get._1)
        val i2 = str.lastIndexOf(pairLarge.get._2)
        swap(str, i1, i2)
      }

      val strSmall = findSmallStr(str)

      (strSmall, strLarge)
    case str => (0, 0)

  }

  def swap(str: String, ind1: Int, ind2: Int) = {
    val i1 = Math.min(ind1, ind2)
    val i2 = Math.max(ind1, ind2)
    str.take(i1) + str.charAt(i2) + str.drop(i1 + 1).take(i2 - i1 - 1) + str.charAt(i1) + str.drop(i2 + 1)
  }

  println(res.zipWithIndex.map{
    case ((small, large), index) => s"Case #${index + 1}: $small $large"
  }.mkString("\n"))

}

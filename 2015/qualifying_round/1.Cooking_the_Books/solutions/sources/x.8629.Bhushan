import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.InputMismatchException;

class CookingTheBooks {
	public static void main(String[] args) throws NumberFormatException,
			IOException {
		InputReader in = new InputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);

		int T = in.readInt();
		for(int t = 1; t <= T; t++) {
			String input = in.readString();
			out.println("Case #" + t + ": " + min(input) + " " + max(input));
		}

		out.flush();
	}

	public static String min(String input) {
		char[] min = input.toCharArray();

		for (int i = 0; i < min.length - 1; i++) {
			if(min[i] == 0)
				continue;
			int minI = i;
			for (int j = i + 1; j < min.length; j++) {
				if (i == 0 && min[j] == '0') // for 1st digits ignore 0s
					continue;
				if (min[j] < min[minI]) {
					minI = j;
				}
			}
			if (minI != i) {
				char temp = min[minI];
				min[minI] = min[i];
				min[i] = temp;
				return new String(min);
			}
		}

		return new String(min);
	}

	public static String max(String input) {
		char[] max = input.toCharArray();

		for (int i = 0; i < max.length - 1; i++) {
			if(max[i] == 9)		// can't be increased further
				continue;
			int maxI = i;
			for (int j = max.length - 1; j > i; j--) {
				if (max[j] > max[maxI]) {
					maxI = j;
				}
			}

			if (maxI != i) {
				char temp = max[maxI];
				max[maxI] = max[i];
				max[i] = temp;
				return new String(max);
			}
		}

		return new String(max);
	}

	static class InputReader {

		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int readInt() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long readLong() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public double readDouble() {
			char c = (char) read();
			StringBuilder sb = new StringBuilder("");
			while (!isSpaceChar(c)) {
				if (c == '.')
					;
				else if (c < '0' || c > '9')
					throw new InputMismatchException();
				sb.append(c);
				c = (char) read();
			}
			return Double.parseDouble(sb.toString());
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				if (Character.isValidCodePoint(c))
					res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return isWhitespace(c);
		}

		public static boolean isWhitespace(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public String next() {
			return readString();
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
}

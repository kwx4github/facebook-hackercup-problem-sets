//package facebookhackercup2015;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

class CookingTheBooks2 {
        BufferedReader br; PrintWriter out; StringTokenizer tk; boolean eof, submit;
        public static void main(String args[]) throws IOException { new CookingTheBooks2(); }
        
        String ntk() { while (tk == null || !tk.hasMoreTokens()) { try { tk = new StringTokenizer(br.readLine()); } catch (Exception e) { eof = true; return null; } } return tk.nextToken(); }
        String nln() { try { return br.readLine(); } catch (IOException e) { eof = true; return null; } }
        String ns() { return ntk(); }
        int ni() throws IOException { return Integer.parseInt(ntk()); }
        long nl() throws IOException { return Long.parseLong(ntk()); }
        float nf() throws IOException { return Float.parseFloat(ntk()); }
        double nd() throws IOException { return Double.parseDouble(ntk()); }
        void debug(Object... o) { if(!submit) { System.out.println(Arrays.deepToString(o)); } }
        
        public CookingTheBooks2() throws IOException {
                long start = System.currentTimeMillis();
                submit = !false;
                if(submit == false) br = new BufferedReader(new InputStreamReader(new FileInputStream("D:\\input.txt")));
                else br = new BufferedReader(new InputStreamReader(System.in));
                out = new PrintWriter(System.out);
                
                int T = ni(); 
                for(int t=1; t<=T; t++)
                        solve(t);
                
                long end = System.currentTimeMillis();
                debug(end - start, " ms");
                out.close();
        }
        
        String S;
        Long N;
        int NL;
        void solve(int t) throws IOException {
                out.print("Case #" + t + ": ");
                S = nln();
                N = Long.parseLong(S);
                NL = S.length();
                
                if(N < 10) {
                        out.println(N + " " + N);
                        return;
                }
                
                int min = Integer.parseInt(S.charAt(NL-1)+""), minp = NL-1;
                long minN = N;
                for(int i=NL-1; i>=0; i--) {
                        for(int j=0; j<i; j++) {
                                StringBuffer temp = new StringBuffer(S);
                                char tc = temp.charAt(i);
                                temp.replace(j, j+1, tc+"");
                                temp.replace(i, i+1, S.charAt(j)+"");
                                if(temp.charAt(0) == '0') {
                                        continue;
                                }
                                if(minN > Long.parseLong(temp.toString())) {
                                        minN = Long.parseLong(temp.toString());
                                        //break outer;
                                }
                        }
                }
                out.print(minN + " ");
                
                int max = Integer.parseInt(S.charAt(NL-1)+""), maxp = NL-1;
                long maxN = N;
                for(int i=NL-1; i>=0; i--) {
                        for(int j=0; j<i; j++) {
                                StringBuffer temp = new StringBuffer(S);
                                char tc = temp.charAt(i);
                                temp.replace(j, j+1, tc+"");
                                temp.replace(i, i+1, S.charAt(j)+"");
                                if(temp.charAt(0) == '0') {
                                        continue;
                                }
                                if(maxN < Long.parseLong(temp.toString())) {
                                        maxN = Long.parseLong(temp.toString());
                                        //break outer;
                                }
                        }
                }
                out.println(maxN);
        }
}

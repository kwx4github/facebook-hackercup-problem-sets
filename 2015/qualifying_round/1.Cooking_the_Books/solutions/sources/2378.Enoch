import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Books {

    public static void main(String[] args) {
        BufferedReader br = null;
        PrintWriter out = null;
        int T;
        int[] inputs;
        try {
            br = new BufferedReader(new FileReader("cooking_the_books.txt"));
            out
                    = new PrintWriter(new BufferedWriter(new FileWriter("cooking_the_books_output.txt")));

            T = Integer.valueOf(br.readLine());
            inputs = new int[T];
            for (int i=0;i<T;i++) {
                String N = br.readLine();
                if (N.equals("0")) {
                    out.println("Case #"+(i+1)+": 0 0");
                } else {
                    out.println("Case #" + (i+1) + ": " + low(N,false) + " " + high(N));
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            out.close();
        }


    }

    private static String high(String N) {
        if (N.length()<=1) {
            return N;
        }
        final char[] charArray = N.toCharArray();
        final int[] intArray = new int[charArray.length];
        for (int i=0;i<charArray.length;i++) {
            intArray[i]=Character.getNumericValue(charArray[i]);
        }

        int highestLeftmostIndex = 0;
        int highestRightmostIndex = 0;
        for (int i=0; i<intArray.length;i++) {
            if (intArray[highestLeftmostIndex]< intArray[i]) {
                highestLeftmostIndex=i;
            }
            if (intArray[highestRightmostIndex]<= intArray[i]){
                highestRightmostIndex=i;
            }
        }

        if (highestLeftmostIndex!=0){
            // solution switches 0 and highestRightmost
            int[] solutionIntArray = new int[intArray.length];
            System.arraycopy(intArray,0, solutionIntArray,0,intArray.length);
            solutionIntArray[0]=intArray[highestRightmostIndex];
            solutionIntArray[highestRightmostIndex]=intArray[0];

            String solution="";
            for (int n : solutionIntArray){
                solution+= n;
            }
            return solution;
        } else {
            return N.charAt(0)+high(N.substring(1));
        }
    }

    private static String low(String N, boolean lead0) {
        // lead0 true if allow for leading 0
        if (N.length()<=1) {
            return N;
        }
        final char[] charArray = N.toCharArray();
        final int[] intArray = new int[charArray.length];
        for (int i=0;i<charArray.length;i++) {
            intArray[i]=Character.getNumericValue(charArray[i]);
        }

        int lowestLeftmostIndex = 0;
        int lowestRightmostIndex = 0;
        // above allows for 0 depending on lead0

        for (int i=0; i<intArray.length;i++) {
            if ((lead0 || intArray[i]!=0)&& intArray[lowestLeftmostIndex]> intArray[i]) {
                lowestLeftmostIndex=i;
            }
            if ((lead0 || intArray[i]!=0)&& intArray[lowestRightmostIndex]>= intArray[i]){
                lowestRightmostIndex=i;
            }
        }

        if (lowestLeftmostIndex!=0){
            // solution switches 0 and highestRightmost
            int[] solutionIntArray = new int[intArray.length];
            System.arraycopy(intArray,0, solutionIntArray,0,intArray.length);
            solutionIntArray[0]=intArray[lowestRightmostIndex];
            solutionIntArray[lowestRightmostIndex]=intArray[0];

            String solution="";
            for (int n : solutionIntArray){
                solution+= n;
            }
            return solution;
        } else {
            return N.charAt(0)+low(N.substring(1),true);
        }
    }

}

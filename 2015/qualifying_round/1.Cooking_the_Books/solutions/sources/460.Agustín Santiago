module Main where

import Control.Monad

-- Specific problem solution code, used in general hackercup-like code.

type Input = String
type Solution = (String, String)

solveCase :: Input -> Solution
solveCase x = (minimum options, maximum options)
                  where k       = length x
                        options = x : [swapDigits i j x | i <- [0..k-1], j <- [0..i-1], not (j == 0 && x !! i == '0')]

readCase :: IO Input
readCase = getLine
             
solutionToString :: Solution -> String
solutionToString (a,b) = a ++ " " ++ b

-- Solution's helper functions

swapDigits :: Int -> Int -> String -> String
swapDigits i j x = replace j (x !! i) $ replace i (x !! j) x

replace :: Int -> a -> [a] -> [a]
replace pos newVal list = l1 ++ newVal : l2
                           where (l1, _:l2) = splitAt pos list

-- General hackercup-like-problem code

timesDo :: Int -> IO a -> IO [a]
t `timesDo` action = sequence $ replicate t action

timesDo_ :: Int -> IO () -> IO ()
t `timesDo_` action = sequence_ $ replicate t action


readLine :: Read a => IO a
readLine = fmap read getLine

main :: IO ()
main = do
         t <- readLine
         forM_ [1..t] (\caseNumber -> readCase >>= printSolution caseNumber . solutionToString . solveCase)


printSolution :: Int -> String -> IO ()
printSolution caseNumber solution = putStrLn $ "Case #" ++ show caseNumber ++ ": " ++ solution

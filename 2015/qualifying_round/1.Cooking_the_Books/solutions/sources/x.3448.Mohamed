import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;

import javax.swing.border.Border;

public class a {

	public static long mod = (long) Math.pow(10, 9) + 7;
	public static int k = 0;

	private static class node {
		long min;
		long num;
		long gcd;

		node(long m, long n, long g) {
			min = m;
			num = n;
			gcd = g;
		}

	}

	public static class point implements Comparable<point> {
		long x;
		long y;
		long b;

		point(long x, long y, long b) {
			this.x = x;
			this.y = y;
			this.b = b;
		}

		@Override
		public int compareTo(point o) {
			if (k == 0)
				return (int) (o.x - x);
			else
				return (int) (y - o.y);

		}
	}

	public static int ch(long y) {
		int r = Long.bitCount(y);
		return r;
	}

	public static long gcd(long x, long y) {
		if (y == 0)
			return x;

		return gcd(y, x % y);
	}

	public static boolean ch[];
	public static ArrayList<Integer> prime;
	public static Queue<Integer> pp;

	public static void sieve(int k) {
		ch[0] = ch[1] = true;

		for (int i = 2; i <= k; i++) {
			if (!ch[i]) {
				prime.add(i);
				pp.add(i);
				for (int j = i + i; j <= k; j += i) {
					ch[j] = true;
				}
			}
		}

	}

	public static long pw(int x, int power, int mod) {
		if (power == 1)
			return x % mod;
		else if (power % 2 == 0)
			return pw((x % mod * x % mod) % mod, power / 2, mod);
		else
			return (pw(x, power - 1, mod) % mod * x % mod) % mod;

	}

	public static int swap[][];
	public static int parent[];

	public static boolean graph(int s, int e, int n) {
		boolean ch[] = new boolean[400];
		Arrays.fill(parent, -1);
		Queue<Integer> q = new LinkedList<>();
		ch[s] = true;
		if (s == e)
			return true;
		q.add(s);
		while (!q.isEmpty()) {
			int r = q.poll();

			if (r == e)
				return true;

			for (int i = 0; i < n; i++) {
				if (!ch[i] && swap[r][i] == 1) {
					q.add(i);
					parent[i] = r;
					ch[i] = true;

				}
			}
		}

		return false;

	}

	public static int a[];
	public static long dp[];
	public static int n;

	public static long solve(int i, int mask) {
		if (i == n) {
			System.out.println(mask);
			return 0;
		}

		long a1 = 0;
		long b = 0;
		long c = 0;
		if (mask == -1) {
			// if (dp[mask] == -1)
			b = solve(i + 1, a[i]) + 1;
			// else
			// b = solve(i + 1, a[i]);
			c = solve(i + 1, mask);
		} else {
			int m = mask | a[i];

			if (m == mask)
				a1 = solve(i + 1, mask);
			else {
				if (dp[mask] == -1)
					a1 = solve(i + 1, m) + 1;
				else
					a1 = solve(i + 1, m);
			}

			if (dp[mask] == -1)
				b = solve(i + 1, a[i]) + 1;
			else
				b = solve(i + 1, a[i]);

		}
		if (mask != -1)
			dp[mask] = a1 + b + c;
		return a1 + b + c;

	}

	public static int getmin(String y, int k) {
		int index = k;
		int min = y.charAt(k);

		for (int i = k + 1; i < y.length(); i++) {
			if (y.charAt(i) < min) {
				if (k == 0 && y.charAt(i) == '0')
					continue;
				min = y.charAt(i);
				index = i;
			}
		}
		return index;
	}

	public static int getmax(String y, int k) {
		int index = k;
		int max = y.charAt(k);
		for (int i = k + 1; i < y.length(); i++) {
			if (y.charAt(i) > max) {
				max = y.charAt(i);
				index = i;
			}
		}
		return index;
	}

	public static void main(String[] args) throws IOException {
		//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		 BufferedReader in = new BufferedReader(new FileReader("cooking_the_books.txt"));
		StringBuilder qq = new StringBuilder();
		//PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		 PrintWriter out = new PrintWriter(new FileWriter("out.txt"));

		int t = Integer.parseInt(in.readLine());
		for (int i = 0; i < t; i++) {
			out.print("Case #" + (i + 1) + ": ");
			String y = in.readLine();
			char e[] = y.toCharArray();
			char k[] = y.toCharArray();
			int index1;
			int index2;
			for (int j = 0; j < k.length; j++) {
				index1 = getmax(y, j);
				if (index1 != j) {
					char temp = e[j];
					e[j] = e[index1];
					e[index1] = temp;
					break;
				}
			}
			for (int j = 0; j < k.length; j++) {
				index2 = getmin(y, j);
				if (index2 != j) {
					char temp = k[j];
					k[j] = k[index2];
					k[index2] = temp;
					break;
				}
			}

			for (int j = 0; j < k.length; j++) {
				out.print(k[j]);
			}
			out.print(" ");
			for (int j = 0; j < e.length; j++) {
				out.print(e[j]);
			}
			out.println();

		}

		out.close();

	}
}
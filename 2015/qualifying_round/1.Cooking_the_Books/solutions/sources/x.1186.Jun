//c++ standard libraries
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
//#include <ios_base>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <string>
#include <typeinfo>
#include <utility>
#include <vector>
#include <limits>

//c standard libraries
#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <float.h> 
#include <limits.h>
#include <locale.h> 
#include <math.h> 
#include <setjmp.h>
#include <signal.h> 
#include <stdarg.h> 
#include <stddef.h> 
#include <stdio.h>
#include <stdlib.h> 
#include <string.h> 
#include <time.h>

void cookingTheBooks()
{
	int T;
	std::string str;
	std::cin >> T;
	for (int t = 1; t <= T; ++t)
	{
		std::cin >> str;
		int len = static_cast<int>(str.size());
		int largestDigit;
		int largestDigitIndex = -1;
		int smallestDigit;
		int smallestDigitIndex = -1;

		for (int i = len - 1; i >= 0; --i)
		{
			if (str[i] != '0')
			{
				if (largestDigitIndex == -1 || largestDigit < str[i] - '0')
				{
					largestDigit = str[i] - '0';
					largestDigitIndex = i;
				}

				if (smallestDigitIndex == -1 || smallestDigit > str[i] - '0')
				{
					smallestDigit = str[i] - '0';
					smallestDigitIndex = i;
				}
			}
		}

		std::string smallest = str;
		if (smallestDigitIndex != -1)
			std::swap(smallest[0], smallest[smallestDigitIndex]);

		std::string largest = str;
		if (largestDigitIndex != -1)
			std::swap(largest[0], largest[largestDigitIndex]);

		std::cout << "Case #" << t << ": " << smallest << " " << largest << "\n";
	}	
}

int main()
{
	freopen("cooking_the_books.txt", "r", stdin);
	freopen("cooking_the_books_output.txt", "w", stdout);

	cookingTheBooks();
}

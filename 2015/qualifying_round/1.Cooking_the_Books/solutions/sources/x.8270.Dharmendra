/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cooking.the.books;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Arrays;
import java.util.InputMismatchException;

/**
 *
 * @author jigsaw
 */
public class CookingTheBooks {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        InputStream inputstream = System.in;
        OutputStream outputstream = System.out;
        InputReader in = new InputReader(inputstream);
        OutputWriter outt = new OutputWriter(outputstream);
        int T = in.readInt();
        for(int t=1;t<=T;t++){
            int N = in.readInt();
            int i = 0;
            int arr[] = new int[10];
            if(N==0)
                outt.print("Case #"+t+": 0 0");
            else{
            while(N>0){
                arr[i++] = N%10;
                N = N/10;
            }
            int min = 0;
            while(min<i&&arr[min]==0)
                min++;
            for(int j=0;j<i;j++)
                if(arr[min]>arr[j]&&arr[j]!=0)
                    min = j;
            int max = 0;
            for(int j=0;j<i;j++)
                if(arr[max]<arr[j])
                    max = j;
            outt.print("Case #"+t+": ");
            
            swap(arr, i-1, min);
            for(int j=i-1;j>=0;j--)
                outt.print(arr[j]);
            swap(arr, i-1, min);
            swap(arr, i-1, max);
            outt.print(" ");
            for(int j=i-1;j>=0;j--)
                outt.print(arr[j]);
            }
            outt.printLine();
        }
        outt.close();
    }
    static void swap(int arr[],int a,int b){
        int t = arr[a];
        arr[a] = arr[b];
        arr[b] = t;
    }
}
class InputReader {
 
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private InputReader.SpaceCharFilter filter;
 
    public InputReader(InputStream stream) {
        this.stream = stream;
    }
 
    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }
 
    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
 
    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
 
    public boolean isSpaceChar(int c) {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
 
    public String next() {
        return readString();
    }
 
    public interface SpaceCharFilter {
        public boolean isSpaceChar(int ch);
    }
}
 
class OutputWriter {
    private final PrintWriter writer;
 
    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }
 
    public OutputWriter(Writer writer) {
        this.writer = new PrintWriter(writer);
    }
 
    public void print(Object...objects) {
        for (int i = 0; i < objects.length; i++) {
            if (i != 0)
                writer.print(' ');
            writer.print(objects[i]);
        }
    }
 
    public void printLine(Object...objects) {
        print(objects);
        writer.println();
    }
 
    public void close() {
        writer.close();
    }}



#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int findMin(vector <int> digits);
int findMax(vector <int> digits);
int toInt(vector<int> V);
void printVector(vector<int> V);

int main(){
	int T;
	cin >> T;
	for(int i=0; i<T; i++){
		int N;
		vector<int> digits;
		cin >> N;
		while(N!=0){
			digits.push_back(N%10);
			N/=10;
		}
		reverse(digits.begin(),digits.end());
		int min = findMin(digits);
		int max = findMax(digits);
		cout<<"Case #"<< i+1 <<": " << min << " " << max << endl;
	}	
	return 0;
}

int findMin(vector <int> digits){
	vector<int> sorted = digits;
	sort(sorted.begin(),sorted.end());
	int nonzeroIndex = -1;
	for(int i=0; i<sorted.size(); i++){
		if(sorted.at(i) != 0){
			nonzeroIndex = i;
			break;
		}
	}
	if(nonzeroIndex != -1 && nonzeroIndex != 0){
		sorted.at(0) = sorted.at(nonzeroIndex);
		sorted.at(nonzeroIndex) = 0;
	}

	int minIndex = -1;	
	int i;
	for(i=0; i< digits.size(); i++){
		if(digits.at(i) != sorted.at(i))
			break;		
	}
	for(int j = i; j < digits.size(); j++){
		if(digits.at(j) == sorted.at(i)){
			minIndex = j;
		}			
	}
	if(minIndex != -1 ){
		digits.at(minIndex) = digits.at(i);
		digits.at(i) = sorted.at(i);			
	}	
	return toInt(digits);
}

int findMax(vector <int> digits){
	vector<int> sorted = digits;
	sort(sorted.begin(),sorted.end());
	reverse(sorted.begin(),sorted.end());
	int maxIndex = -1;	
	int i;
	for(i=0; i< digits.size(); i++){
		if(digits.at(i) != sorted.at(i))
			break;		
	}
	for(int j = i; j < digits.size(); j++){
		if(digits.at(j) == sorted.at(i)){
			maxIndex = j;
		}			
	}
	if(maxIndex != -1 ){
		digits.at(maxIndex) = digits.at(i);
		digits.at(i) = sorted.at(i);			
	}	
	return toInt(digits);

}

void printVector(vector<int> V){	
	for(int i=0; i< V.size(); i++){
		cout<< V.at(i)<<" ";
	}
	cout<<endl;
}
int toInt(vector<int> V){
	int num = 0;
	for(int i = 0; i < V.size(); i++){
		num *= 10;
		num += V.at(i);
	}
	return num;
}
import java.util.Scanner;

/**
 * Solution for Facebook Hacker Cup 2013, qualification round problem
 * "Cooking The Books"
 * https://www.facebook.com/hackercup/problems.php?pid=582062045257424
 * &round=742632349177460
 * 
 * @author Luis E. Argote Bolio luis@argote.mx
 */
public class CookingTheBooks {
	private static Scanner in = new Scanner(System.in);

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		long casesT = in.nextLong();
		for (int i = 0; i < casesT; i++) {
			long numberToCook = in.nextLong();
			System.out.println("Case #" + (i + 1) + ": " + findMin(numberToCook) + " " + findMax(numberToCook));
		}
	}
	
	private static String findMin(long numberToCook) {
		long[] numberArray = longToArray(numberToCook);
		int smallestNonZeroPosition = 0;
		int smallestPosition = 0;
		for (int i = 1; i < numberArray.length; i++) {
			if (numberArray[i] != 0 && numberArray[smallestNonZeroPosition] > numberArray[i]) {
				smallestNonZeroPosition = i;
			}
			if (numberArray[smallestPosition] > numberArray[i]) {
				smallestPosition = i;
			}
		}
		if (numberArray[0] > numberArray[smallestNonZeroPosition]) {
			long tmp = numberArray[smallestNonZeroPosition];
			numberArray[smallestNonZeroPosition] = numberArray[0];
			numberArray[0] = tmp;
		} else {
			for (int i = 1; i < smallestPosition; i++) {
				if (numberArray[i] > numberArray[smallestPosition]) {
					long tmp = numberArray[smallestPosition];
					numberArray[smallestPosition] = numberArray[i];
					numberArray[i] = tmp;
					break;
				}
			}
		}
		return numberArrayToString(numberArray);
	}
	
	private static String findMax(long numberToCook) {
		long[] numberArray = longToArray(numberToCook);
		int largestPosition = numberArray.length - 1;
		for (int i = largestPosition - 1; i >= 0; i--) {
			if (numberArray[largestPosition] < numberArray[i]) {
				largestPosition = i;
			}
		}
		for (int i = 0; i < largestPosition; i++) {
			if (numberArray[i] < numberArray[largestPosition]) {
				long tmp = numberArray[largestPosition];
				numberArray[largestPosition] = numberArray[i];
				numberArray[i] = tmp;
				break;
			}
		}
		return numberArrayToString(numberArray);
	}
	
	private static long[] longToArray(long number) {
		long[] numberArray = new long[Long.toString(number).length()];
		for (int i = numberArray.length - 1; i >= 0 ; i--) {
			numberArray[i] = number % 10;
			number /= 10;
		}
		return numberArray;
	}
	
	private static String numberArrayToString(long[] numberArray) {
		StringBuilder sb = new StringBuilder();
		for (long number : numberArray) {
			sb.append(number);
		}
		return sb.toString();
	}
}

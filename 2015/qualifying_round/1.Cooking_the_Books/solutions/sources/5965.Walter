// Writed using C# in MS VS Express 2010
// Walter F. Capelo (wcapelo@gmail.com) / wcapelo on Facebook
//
// Can be easyly compiled with command line: CSC <filename.cs>
//
//Console aplication
//
//Usage: ProgramName.exe <InputFileName> <OutPutFileName>
//
//      <InputFileName>  - specify the name of input file (plain txt, where each line will be one input
//                         if not specified the default name will be "input.txt"
//      <OutPutFileName> - Specify the name of output file that will be generated.
//                         if not specified the default name will be "output.txt"
//                         Obs.: The output also will be showed in console
//       
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace HackerCupBase
{
    class HCupBase
    {        
        //Problem solution
        static void Solution(string strInput, string strOutPut)
        {
            StreamReader objInput = new StreamReader(strInput, Encoding.ASCII);
            StreamWriter sw = new StreamWriter(strOutPut, false, Encoding.ASCII);
            int T = 0;
            string sLine = "";
            string sMin="";
            string sMax="";
            sLine = objInput.ReadLine();
            T = Convert.ToInt16(sLine.Trim());

            
            for (int iCase = 0; iCase < T; iCase++)
            {
                sLine = objInput.ReadLine().Trim();

                //Min
                int PosMostSig = 0;
                do
                {
                    int PosMin = PosMostSig;
                    for (int i = PosMostSig + 1; i < sLine.Length; i++)
                    {
                        if ((valChar(sLine[i]) < valChar(sLine[PosMin]) || 
                            (valChar(sLine[i]) == valChar(sLine[PosMin]) && valChar(sLine[PosMin]) != valChar(sLine[PosMostSig])  ) ) && !( valChar(sLine[i]) == 0 && PosMostSig == 0))
                            PosMin = i;
                    }
                    if (PosMin == PosMostSig)
                    {
                        if (PosMostSig < sLine.Length - 1)
                            PosMostSig++;
                        else
                        {
                            sMin = sLine;
                            break;
                        }
                    }
                    else
                    {
                        StringBuilder sb = new StringBuilder(sLine);
                        sb[PosMostSig] = sLine[PosMin];
                        sb[PosMin] = sLine[PosMostSig];
                        sMin = sb.ToString();
                        break;
                    }
                } while (true);

                //Max
                PosMostSig = 0;
                do
                {
                    int PosMax = PosMostSig;
                    for (int i = PosMostSig + 1; i < sLine.Length; i++)
                    {
                        if (valChar(sLine[i]) > valChar(sLine[PosMax]) ||
                            (valChar(sLine[i]) == valChar(sLine[PosMax]) && valChar(sLine[PosMax]) != valChar(sLine[PosMostSig])  ) )
                            PosMax = i;
                    }
                    if (PosMax == PosMostSig)
                    {
                        if (PosMostSig < sLine.Length - 1)
                            PosMostSig++;
                        else
                        {
                            sMax = sLine;
                            break;
                        }
                    }
                    else
                    {
                        StringBuilder sb = new StringBuilder(sLine);
                        sb[PosMostSig] = sLine[PosMax];
                        sb[PosMax] = sLine[PosMostSig];
                        sMax = sb.ToString();
                        break;
                    }
                } while (true);
                

                string sResult = "Case #" + (iCase + 1).ToString().Trim() + ": "+sMin+" "+sMax;
                Console.WriteLine(sResult);
                sw.WriteLine(sResult);
            }
            objInput.Close();
            sw.Close();

        }

        static byte valChar(char c)
        {
            return (byte) ((byte)c - 48);
        }


        static void Main(string[] args)
        {
            string strInputFile = "";
            string strOutPutFile = "output.txt";
            StreamReader objInput;

            if (args.Length < 1)
            {
                Console.WriteLine("Input file not informed, trying using 'input.txt'");
                strInputFile = "input.txt";
            }
            else
                strInputFile = args[0];

            if (args.Length > 1)
                strOutPutFile = args[1];

            try
            {
                objInput = new StreamReader(strInputFile);
                objInput.Close();
            }
            catch
            {
                Console.WriteLine("File '" + strInputFile + "' not found!");
                strInputFile = "";
            }

            if (strInputFile.Trim() == "")
            {
                Console.WriteLine("Is necessary a input file !");
                Console.WriteLine("Program halted!");
            }
            else
            {
                //Here call the problem solution procedure
                Solution(strInputFile, strOutPutFile);
            }
        }
    }
}
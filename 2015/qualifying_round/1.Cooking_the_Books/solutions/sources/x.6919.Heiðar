import sys, operator


def withIndex(n, f):
    if len(n) == 1:
        return n
    theone, index = (n[0], 0)
    for i, x in enumerate(n[1:], 1):
        if not f(theone, x) and x != 0:
            theone = x
            index = i
    return theone, index


def flerp(n, op):
    if len(n) == 1:
        return n
    first = n[0]
    theone, i = withIndex(n, op)
    if op(theone, first):
        new = n[:]
        new[0], new[i] = new[i], new[0]
        return new
    else:
        return [first] + flerp(n[1:], op)


def toSingleNum(n):
    return int(''.join(map(str, n)))


def solve(n):
    big = flerp(n, operator.gt)
    small = flerp(n, operator.lt)
    return "%d %d" % (toSingleNum(small), toSingleNum(big))


if __name__ == '__main__':
    lines = sys.stdin.readlines()
    for case, line in enumerate(lines[1:], 1):
        ans = solve(map(int, line.strip()))
        print "Case #%d: %s" % (case, ans)

#include <iostream>
#include <vector>
#include <cstdio>
#include <string>
#include <algorithm>
#include <set>
#include <queue>
#include <iomanip>
using namespace std;

#define forn(i,n) for(int i = 0; i < (int)n; ++i)
#define mins(x,y) x = min(x,y)
#define maxs(x,y) x = max(x,y)

typedef long long ll;
typedef pair<int, int> pii;

vector<int> get_vector(int n)
{
    vector<int> ret;
    while (n)
    {
        ret.push_back(n%10);
        n /= 10;
    }
    reverse(ret.begin(), ret.end());
    return ret;
}

int get_number(vector<int> const& arr)
{
    int ret = 0;
    forn(i, arr.size())
    {
        ret *= 10;
        ret += arr[i];
    }
    return ret;
}

int main() {

//    ios_base::sync_with_stdio(false);
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);

    int T = 0;
    cin >> T;
    forn(test, T)
    {
        int n = 0;
        cin >> n;
        vector<int> arr = get_vector(n);
        vector<int> cpy = arr;
        for(int from = 0; from < arr.size(); ++from)
        {
            int nmin = from;
            for(int to = from+1; to < arr.size(); ++to)
                if (arr[nmin] >= arr[to] && (arr[to] + from > 0))
                    nmin = to;
            if (arr[nmin] < arr[from])
            {
                swap(arr[nmin], arr[from]);
                break;
            }
        }
        cout << "Case #" << test+1 << ": " << get_number(arr);

        arr = cpy;
        for(int from = 0; from < arr.size(); ++from)
        {
            int nmax = from;
            for(int to = from+1; to < arr.size(); ++to)
                if (arr[nmax] <= arr[to])
                    nmax = to;
            if (arr[nmax] > arr[from])
            {
                swap(arr[nmax], arr[from]);
                break;
            }
        }
        cout << " " << get_number(arr) << "\n";

    }

    return 0;
}

#include <fstream>
#include <vector>

using namespace std;

ifstream input;
ofstream output;

void printDigits(vector<int> & v)
{
	for (int i=v.size()-1; i>=0; i--)
		output << v[i];
}

void singleCase(int case_num)
{
	int N;
	input >> N;

	output << "Case #" << case_num << ": ";

	vector<int> d;
	while (N)
	{
		d.push_back(N % 10);
		N  /= 10;
	}

	int D = d.size();
	int i;

	int minIdx = D - 1;
	for (i=D-2; i>=0; i--)
		if (d[i] && d[i] < d[minIdx]) minIdx = i;
	if (minIdx != D - 1)
	{
		swap(d[D-1], d[minIdx]);
		printDigits(d);
		swap(d[D-1], d[minIdx]);
	}
	else
	{
		for (i=D-2; i>=0; i--)
		{
			minIdx = i;
			for (int j=i-1; j>=0; j--)
				if (d[j] < d[minIdx]) minIdx = j;
			if (minIdx != i)
			{
				swap(d[i], d[minIdx]);
				printDigits(d);
				swap(d[i], d[minIdx]);
				break;
			}
		}
		if (i < 0)
			printDigits(d);
	}

	output << ' ';

	//printDigits(d); output << ' ';

	for (i=D-1; i>=0; i--)
	{
		int maxIdx = i;
		for (int j=i-1; j>=0; j--)
			if (d[maxIdx] < d[j]) maxIdx = j;
		if (maxIdx != i)
		{
			swap(d[maxIdx], d[i]);
			printDigits(d);
			swap(d[maxIdx], d[i]);
			break;
		}
	}
	if (i < 0) printDigits(d);

	output << endl;
}

int main()
{
	input.open("cooking_the_books.txt");
	output.open("cooking.out");
	int T;
	input >> T;
	for (int i=0; i<T; i++)
		singleCase(i+1);

	return 0;
}
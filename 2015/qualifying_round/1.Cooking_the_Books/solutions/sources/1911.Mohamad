#include<iostream>
#include<vector>
#include<string.h>
using namespace std;


int getanotherMinimum(vector<int> arr)
{
	if (arr.size() == 1)
		return arr[0];
	int mindigit = 10;
	int index = -1;
	for (int i = 0; i < arr.size(); i++)
	{
		if (arr[i] < mindigit)
			mindigit = arr[i], index = i;
	}

	if (arr[arr.size()-1]> mindigit)
	{
		int temp = arr[index];
		arr[index] = arr[arr.size() - 1];
		arr[arr.size() - 1] = temp;
		reverse(arr.begin(), arr.end());
		int result = arr[0];
		for (int i = 1; i < arr.size(); i++)
		{
			result *= 10;
			result += arr[i];
		}
		return result;
	}
	else
	{

		int f = arr[arr.size() - 1];
		for (int i = 1; i < arr.size(); i++)
			f *= 10;
		arr.pop_back();
		return f + getanotherMinimum(arr);
	}

}
int getanotherMaximum(vector<int> arr)
{
	if (arr.size() == 1)
		return arr[0];
	int maxdigit = -1;
	int index = -1;
	for (int i = 0; i < arr.size(); i++)
	{
		if (arr[i] > maxdigit)
			maxdigit = arr[i], index = i;
	}

	if (arr[arr.size() - 1]< maxdigit)
	{
		int temp = arr[index];
		arr[index] = arr[arr.size() - 1];
		arr[arr.size() - 1] = temp;
		reverse(arr.begin(), arr.end());
		int result = arr[0];
		for (int i = 1; i < arr.size(); i++)
		{
			result *= 10;
			result += arr[i];
		}
		return result;
	}
	else
	{

		int f = arr[arr.size() - 1];
		for (int i = 1; i < arr.size(); i++)
			f *= 10;
		arr.pop_back();
		return f + getanotherMaximum(arr);
	}

}
int getMaximum(int n)
{
	if (n/10 == 0)
		return n;

	vector<int> arr;	
	int maxdigit = -1;
	int index = -1;
	int temp = n;
	while (temp != 0)
	{
		arr.push_back(temp % 10);
		if (temp % 10 > maxdigit)
			index = arr.size() - 1,maxdigit = temp%10;
		temp /= 10;
	}
	if (maxdigit > arr[arr.size() - 1])
	{
		temp = arr[index];
		arr[index] = arr[arr.size() - 1];
		arr[arr.size() - 1] = temp;
		reverse(arr.begin(), arr.end());
		int result = arr[0];
		for (int i = 1; i < arr.size(); i++)
		{
			result *= 10;
			result += arr[i];
		}
		return result;
	}
	else
	{
		
		int f = arr[arr.size() - 1];
		for (int i = 1; i < arr.size(); i++)
			f *= 10;
		arr.pop_back();
		return f + getanotherMaximum(arr);
	}
}
int getMinimum(int n)
{
	if (n / 10 == 0)
		return n;

	vector<int> arr;
	int mindigit = 10;
	int index = -1;
	int temp = n;
	while (temp != 0)
	{
		arr.push_back(temp % 10);
		if (temp % 10 < mindigit && temp % 10 != 0)
			index = arr.size() - 1, mindigit = temp % 10;
		temp /= 10;
	}
	if (mindigit < arr[arr.size() - 1])
	{
		temp = arr[index];
		arr[index] = arr[arr.size() - 1];
		arr[arr.size() - 1] = temp;
		reverse(arr.begin(), arr.end());
		int result = arr[0];
		for (int i = 1; i < arr.size(); i++)
		{
			result *= 10;
			result += arr[i];
		}
		return result;
	}
	else
	{
		int f = arr[arr.size()-1];
		for (int i = 1; i < arr.size(); i++)
			f *= 10;
		arr.pop_back();		
		return f+getanotherMinimum(arr);
		
		
	}

}



int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	cin >> t;
	int count = 0;
	while (t--)
	{ 
		count++;
		int n,maxx,minn=0; 
		cin >> n;
		if (n == 0)
		{
			cout << "Case #" << count << ": 0 0" << endl;
			continue;
		}
		maxx= getMaximum(n);
		minn = getMinimum(n);
		cout << "Case #" << count << ": "<< minn << " " << maxx << endl;
	}
	return 0;
}
#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz size()
#define For(i, st, en)  for(int i=(st); i<=(int)(en); i++)
#define Forn(i, st, en) for(int i=(st); i<=(int)(en); i++)
#define Ford(i, st, en) for(int i=(st); i>=(int)(en); i--)
#define forn(i, n) for(int i=0; i<(int)(n); i++)
#define ford(i, n) for(int i=(n)-1; i>=0; i--)
#define fori(it, x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)

template <class _T> inline _T sqr(const _T& x) { return x * x; }
template <class _T> inline string tostr(const _T& a) { ostringstream os(""); os << a; return os.str(); }
template <class _T> inline istream& operator << (istream& is, const _T& a) { is.putback(a); return is; }

typedef long double ld;

// Constants
const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-11;

// Types
typedef signed   long long i64;
typedef unsigned long long u64;
typedef set < int > SI;
typedef vector < ld > VD;
typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < string > VS;
typedef map < string, int > MSI;
typedef pair < int, int > PII;

string findMax(string s) {
  int N = s.length();
  for (int i = 0; i < N-1; ++i) {
    // find right most, largest.
    int maxDigit = s[N-1];
    int maxj = N-1;
    for (int j = N-2; j > i; --j) {
      if (s[j] > maxDigit) {
        maxDigit = s[j];
        maxj = j;
      }
    }

    if (maxDigit > s[i]) {
      swap(s[i], s[maxj]);
      break;
    }
  }
  return s;
}

string findMin(string s) {
  int N = s.length();
  for (int i = 0; i < N-1; ++i) {
    // find right most, smallest.
    int minDigit = s[N-1];
    int minj = N-1;
    for (int j = N-2; j > i; --j) {
      if (s[j] < minDigit && (i != 0 || s[j] != '0')) {
        minDigit = s[j];
        minj = j;
      }
    }

    if (minDigit < s[i]) {
      swap(s[i], s[minj]);
      break;
    }
  }
  return s;
}

int main() {
  int caseN;
  cin >> caseN;

  string s;
  for (int cc = 1; cc <= caseN; ++cc) {
    cin >> s;
    cout << "Case #" << cc << ": ";
    cout << findMin(s);
    cout << " ";
    cout << findMax(s);
    cout << endl;
  }

  return 0;
}

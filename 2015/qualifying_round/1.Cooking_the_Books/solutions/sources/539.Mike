package main

import (
	"os"
	"bufio"
	"strconv"
	"fmt"
  "sort"
)

func scanInt(scanner *bufio.Scanner) int {
	scanner.Scan()
	x, _ := strconv.Atoi(scanner.Text())
	return x
}

type SliceInt64 []int64
func (slice SliceInt64) Len() int {
  return len(slice)
}
func (slice SliceInt64) Less(i, j int) bool {
  return slice[i] < slice[j]
}
func (slice SliceInt64) Swap(i, j int) {
  slice[i], slice[j] = slice[j], slice[i]
}

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Split(bufio.ScanWords)
	writer := bufio.NewWriter(os.Stdout)
	defer writer.Flush()
	numCases := scanInt(scanner)
  for caseIndex := 1; caseIndex <= numCases; caseIndex++ {
    scanner.Scan()
    s := scanner.Text()
    digits := []rune{}
    for _, ch := range s {
      digits = append(digits, ch)
    }
    n, _ := strconv.ParseInt(s, 10, 64)
    numbers := []int64{ n }

    for i := range digits {
      for j := i+1; j < len(digits); j++ {
        if digits[j] == '0' && i == 0 {
          continue
        }
        digits[i], digits[j] = digits[j], digits[i]
        m, _ := strconv.ParseInt(string(digits), 10, 64)
        numbers = append(numbers, m)
        digits[i], digits[j] = digits[j], digits[i]
      }
    }

    sort.Sort(SliceInt64(numbers))
    writer.WriteString(fmt.Sprintf("Case #%d: %d %d\n", caseIndex,
      numbers[0], numbers[len(numbers)-1]))
  }
}

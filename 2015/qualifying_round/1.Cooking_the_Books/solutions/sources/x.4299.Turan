import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;

public class CookingBooks {
	public static int[] getDigits(int num){
		int length = Integer.toString(num).length();
		int[] digits = new int[length];
		int idx = 0;
		while(num != 0){
			digits[length - 1 - idx] = num % 10;
			num /= 10;
			idx++;
		}
		return digits;
	}
	
	public static String toString(int[] digits){
		StringBuffer sb = new StringBuffer(digits.length);
		for(int i = 0; i < digits.length; i++)
			sb.append(digits[i]);
		return sb.toString();
	}
	
	
	public static int[] findBiggest(int[] digits, int maxIdx){
		int[] result = new int[digits.length];
		System.arraycopy(digits, 0, result, 0, digits.length);
		int targetIdx = 0;
		while(result[maxIdx] == result[targetIdx]){
			targetIdx++;
		}

		swap(result, targetIdx, maxIdx);
		return result;
	}
	
	public static int[] findSmallest(int[] digits, int minIdx){
		int[] result = new int[digits.length];
		System.arraycopy(digits, 0, result, 0, digits.length);
		int targetIdx = 0;
		if(result[minIdx] == 0){
			do{
				targetIdx++;
			}while(result[targetIdx] == 0 && targetIdx < result.length - 1);
				
		} else {
			while(result[targetIdx] == result[minIdx])
				targetIdx++;
		}
		if(targetIdx < minIdx)
			swap(result, targetIdx, minIdx);
		return result;
	}
	
	
	public static void swap(int[] array, int pos1, int pos2){
		int temp = array[pos1];
		array[pos1] = array[pos2];
		array[pos2] = temp;
	}
	
	public static void process(int number, PrintWriter writer, int idx){
		int[] digits = getDigits(number);
		boolean allEqual = true;
		boolean ascending = true;
		boolean descending = true;
		int min = 9, max = 0;
		int minIdx = 0, maxIdx = 0;
		int minNum = 0, maxNum = 0;
		for(int i = 0; i < digits.length - 1; i++){
			if(digits[i] != digits[i + 1]){
				allEqual = false;
				if(digits[i] < digits[i + 1]){
					descending = false;
				} else {
					ascending = false;
				}
				if(digits[i] >= max){
					max = digits[i];
					maxIdx = i;
				}
				if(digits[i] <= min){
					min = digits[i];
					minIdx = i;
				}
			}
		}
		if(digits[digits.length - 1] >= max){
			max = digits[digits.length - 1];
			maxIdx = digits.length - 1;
		}
		if(digits[digits.length - 1] <= min){
			min = digits[digits.length - 1];
			minIdx = digits.length - 1;
		}
		if(allEqual){
			minNum = Integer.valueOf(toString(digits));
			maxNum = Integer.valueOf(toString(digits));
		} else if (ascending) {
			minNum = Integer.valueOf(toString(digits));
			maxNum = Integer.valueOf(toString(findBiggest(digits, maxIdx)));
		} else if (descending) {
			minNum = Integer.valueOf(toString(findSmallest(digits, minIdx)));
			maxNum = Integer.valueOf(toString(digits));
		} else {
			minNum = Integer.valueOf(toString(findSmallest(digits, minIdx)));
			maxNum = Integer.valueOf(toString(findBiggest(digits, maxIdx)));
		}
		writer.println("Case #" + idx + ": " + minNum + " " + maxNum);
	}
	
	
	
	public static void readAndProcess(String fileName) throws IOException{
		BufferedReader reader = new BufferedReader(new FileReader(fileName));
		PrintWriter writer = new PrintWriter(new File("output.txt"));
		String line = reader.readLine();
		int numLines = Integer.valueOf(line);
		for(int i = 0; i < numLines; i++){
			int num = Integer.valueOf(reader.readLine());
			process(num, writer, i+1);
		}
		reader.close();
		writer.close();
	}
	
	public static void main(String[] args) throws IOException{
		int a = 111101;
		readAndProcess(args[0]);
	}
}

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.SortedSet;
import java.util.TreeSet;

public class CookingTheBooks {

	private static class StdIn {

		// assume Unicode UTF-8 encoding
		private String charsetName = "UTF-8";

		// the scanner object
		private Scanner scanner = new Scanner(new BufferedInputStream(System.in), charsetName);

		public StdIn() {
			
		}
		
		public StdIn(InputStream in) {
			scanner = new Scanner(in, charsetName);
		}

		/**
		 * Is there only whitespace left on standard input?
		 */
		public  boolean isEmpty() {
			return !scanner.hasNext();
		}

		/**
		 * Return next string from standard input
		 */
		public String readString() {
			return scanner.next();
		}

		/**
		 * Return next int from standard input
		 */
		public int readInt() {
			return scanner.nextInt();
		}

		/**
		 * Return next double from standard input
		 */
		public double readDouble() {
			return scanner.nextDouble();
		}

		/**
		 * Return next float from standard input
		 */
		public float readFloat() {
			return scanner.nextFloat();
		}

		/**
		 * Return next short from standard input
		 */
		public short readShort() {
			return scanner.nextShort();
		}

		/**
		 * Return next long from standard input
		 */
		public long readLong() {
			return scanner.nextLong();
		}

		/**
		 * Return next byte from standard input
		 */
		public byte readByte() {
			return scanner.nextByte();
		}

		/**
		 * Return next boolean from standard input, allowing "true" or "1" for true,
		 * and "false" or "0" for false
		 */
		public boolean readBoolean() {
			String s = readString();
			if (s.equalsIgnoreCase("true"))
				return true;
			if (s.equalsIgnoreCase("false"))
				return false;
			if (s.equals("1"))
				return true;
			if (s.equals("0"))
				return false;
			throw new java.util.InputMismatchException();
		}

		/**
		 * Does standard input have a next line?
		 */
		public boolean hasNextLine() {
			return scanner.hasNextLine();
		}

		/**
		 * Return rest of line from standard input
		 */
		public String readLine() {
			return scanner.nextLine();
		}

		/**
		 * Return next char from standard input
		 */
		// a complete hack and inefficient - email me if you have a better
		public char readChar() {
			// (?s) for DOTALL mode so . matches a line termination character
			// 1 says look only one character ahead
			// consider precompiling the pattern
			String s = scanner.findWithinHorizon("(?s).", 1);
			return s.charAt(0);
		}

		/**
		 * Return rest of input from standard input
		 */
		public String readAll() {
			if (!scanner.hasNextLine())
				return null;

			// reference: http://weblogs.java.net/blog/pat/archive/2004/10/stupid_scanner_1.html
			return scanner.useDelimiter("\\A").next();
		}

		/**
		  * Read rest of input as array of ints
		  */
		public int[] readInts() {
			String[] fields = readAll().trim().split("\\s+");
			int[] vals = new int[fields.length];
			for (int i = 0; i < fields.length; i++)
				vals[i] = Integer.parseInt(fields[i]);
			return vals;
		}

		/**
		  * Read rest of input as array of doubles
		  */
		public double[] readDoubles() {
			String[] fields = readAll().trim().split("\\s+");
			double[] vals = new double[fields.length];
			for (int i = 0; i < fields.length; i++)
				vals[i] = Double.parseDouble(fields[i]);
			return vals;
		}

		/**
		  * Read rest of input as array of strings
		  */
		public String[] readStrings() {
			String[] fields = readAll().trim().split("\\s+");
			return fields;
		}
	}
	
	private static class Permutations {
		
		// print N! permutation of the characters of the string s (in order)
		public static List<String> orderedPermutations(String s) {
			List<String> permutations = new ArrayList<String>();
			orderedPermutations("", s, permutations);
			return permutations;
		}

		private static void orderedPermutations(String prefix, String s, List<String> permutations) {
			int N = s.length();
			if (N == 0) {
				permutations.add(prefix);
			} else {
				for (int i = 0; i < N; i++) {
					String nextPrefix = prefix + s.charAt(i);
					String nextString = s.substring(0, i) + s.substring(i + 1, N);
					orderedPermutations(nextPrefix, nextString, permutations);
				}
			}
		}
	}
	
	public static void main(String [] args) throws FileNotFoundException {
		StdIn in = new StdIn(new FileInputStream(new File("/Users/nacho/Development/playus-git/playus_server/mx.com.playus.algorithms/cooking_the_books.txt")));
		int cases = in.readInt();
		
		int current = 0;
		while (in.hasNextLine() && current < cases) {
			current++;
			int nextCase = in.readInt();
			String nextCaseChars = String.valueOf(nextCase);
			
			List<String> orderedPermutations = Permutations.orderedPermutations(nextCaseChars);
			SortedSet<Integer> pq = new TreeSet<Integer>();
			
			Iterator<String> iterator = orderedPermutations.iterator();
			while(iterator.hasNext()) {
				String next = iterator.next();
				if (next == null)
					continue;
				pq.add(Integer.valueOf(next));
			}
			
			System.out.println(MessageFormat.format("Case #{0}: {1} {2}", String.valueOf(current), String.valueOf(pq.first()), String.valueOf(pq.last())));
		}
	}
}
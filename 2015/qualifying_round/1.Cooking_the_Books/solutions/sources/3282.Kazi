#include <iostream>
#include <cstdio>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <fstream>
#include <sstream>

using namespace std;

/*
bool areSame(double a, double b)
{
    return fabs(a - b) < 0.0000001;
}
*/

long power(int n,int power)
{
        long result = 1;

        for(int index=0;index<power;index++)
            result *= n;
        return result;
}


long findLargest(int arr[],int nSize)
{
    int swapIndex1 = -1;
    int swapIndex2;
    int index,index2;
    for(index = nSize-1;index>=0;index--)
    {
        for(index2=index-1;index2>=0;index2--)
        {
            if(arr[index] < arr[index2])
            {
               swapIndex1 = index;
               index2 = -1;
               index = -1;
            }
        }
    }
    if(swapIndex1 != -1)
    {

        int curMax = arr[swapIndex1];
        for(index2=swapIndex1-1;index2>=0;index2--)
        {
            if(curMax <= arr[index2])
            {
                curMax = arr[index2];
                swapIndex2 = index2;
            }
        }


        int temp = arr[swapIndex1];
        arr[swapIndex1] = arr[swapIndex2];
        arr[swapIndex2] = temp;


    }
    long output = 0;



    for(index=0;index<nSize;index++)
    {
       output = output + arr[index]*power(10,index);

    }


    return output;
}


long findSmallestWithoutZero(int arr[],int nSize)
{

    int swapIndex1 = -1;
    int swapIndex2;
    int index,index2;
    for(index = nSize-1;index>=0;index--)
    {
        for(index2=index-1;index2>=0;index2--)
        {
           if(arr[index] > arr[index2])
            {
               swapIndex1 = index;
               index2 = -1;
               index = -1;
            }
        }
    }
    if(swapIndex1 != -1)
    {

        int curMin = arr[swapIndex1];
        for(index2=swapIndex1-1;index2>=0;index2--)
        {
            if(curMin >= arr[index2])
            {
                curMin = arr[index2];
                swapIndex2 = index2;
            }
        }


        int temp = arr[swapIndex1];
        arr[swapIndex1] = arr[swapIndex2];
        arr[swapIndex2] = temp;

    }


    long output = 0;
    for(index=0;index<nSize;index++)
    {
       output = output + arr[index]*power(10,index);
   }


    return output;
}


long findSmallestWithZero(int arr[],int nSize)
{

    int swapIndex1 = -1;
    int swapIndex2;
    int index,index2;

    index = nSize-1;

    for(index2=index-1;index2>=0;index2--)
    {

        if(arr[index] > arr[index2] && arr[index2] != 0)
        {
           swapIndex1 = index2;
           index2 = -1;

        }
    }

    if(swapIndex1 != -1)   // there exists a non-zero digit less than first digit
    {

        int curMin = arr[swapIndex1];
        swapIndex2 = swapIndex1;
        for(index2=swapIndex1-1;index2>=0;index2--)
        {
            if(curMin >= arr[index2] && arr[index2] != 0)
            {
                curMin = arr[index2];
                swapIndex2 = index2;
            }
        }

        int temp = arr[swapIndex2];
        arr[swapIndex2] = arr[index];
        arr[index] = temp;

   }

    else    // find first zero from right and first non-zero from 2nd digit
    {
        for(index=nSize-2;index>=0;index--)
        {
        //    cout << arr[index];
            if(arr[index] != 0)
            {
                swapIndex1 = index;
                index = -1;
            }
        }

        for(index2=0;index2<nSize;index2++)
        {
      //      cout << arr[index2];
            if(arr[index2] == 0)
            {
                swapIndex2 = index2;
                index2 = nSize;
            }
        }

       if(swapIndex1 != -1 && swapIndex2 < swapIndex1)
        {

        int temp = arr[swapIndex2];
        arr[swapIndex2] = arr[swapIndex1];
        arr[swapIndex1] = temp;
        }
    }
    long  output = 0;


    for(index=0;index<nSize;index++)
    {
       output = output + arr[index]*power(10,index);
   }

   return output;
}


int main()
{
    //double input = 2354 ;

    long testCase,curTestCase;
    //cin >> testCase;
    std::string line;
    std::istringstream iss;

    ifstream myfile;
    //myfile.open("cooking_the_books.txt",ios::in);
    myfile.open("cooking_the_books.txt",ios::in);

    ofstream outfile;
    outfile.open("out.txt");

    if (std::getline(myfile, line)) {
    iss.str(line);
    iss >> testCase;
    }

   for(curTestCase=0;curTestCase<testCase;curTestCase++)
    {

    long input;
    std::string line;
    std::istringstream iss;

    if (std::getline(myfile, line))
            {
        //        cout << line;
            iss.str(line);
            iss >> input;
            }
    bool bIsContainZero = false;
    int index;

    for(index=0;;index++)
    {
        if(input <= power(10,index))
            break;
    }

   //if(!areSame(power(10,index),input))
   if(power(10,index) != input)
        index--;
 //   cout << index << " ";
    int totaldigit = index+1;
    int res;
    long rem = input;
    int inArr[totaldigit],inArr2[totaldigit];

    while(index>=0)
    {
       res = (floor)(rem/power(10,index));
       inArr[index] = res;
        if(res == 0)
            bIsContainZero = true;
       rem = rem % (power(10,index));
       index--;
    }

    for(index=0;index<totaldigit;index++)
    {
        inArr2[index] = inArr[index];
    }

    long lLargest2;
    lLargest2 = findLargest(inArr2,totaldigit);


     long lSmallest;
    //double dSmallest;
    if(bIsContainZero)
        lSmallest = findSmallestWithZero(inArr,totaldigit);
    else
        lSmallest = findSmallestWithoutZero(inArr,totaldigit);

    outfile << "Case #"<<curTestCase+1<<": "<<lSmallest<<" "<<lLargest2<<endl;

    }

    myfile.close();
    outfile.close();

    return 0;
}

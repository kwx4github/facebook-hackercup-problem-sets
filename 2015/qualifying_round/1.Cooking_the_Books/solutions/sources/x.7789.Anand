#include<iostream.h>
#include<conio.h>

void main()
{
 int numberOfTestCases,testCase[99],i,j,temprory,temp,ten,currentTestCase,currentTestCaseArray[99],currentDigit,MSBloc,maxDigitLocation,minDigitLocation,numberOfDigit,smallest,largest,maxDigit,minDigit,small[99],large[99];
 clrscr();
// cout<<"\n\n Enter number of test cases : ";
 cin>>numberOfTestCases;
// cout<<"\n\n Enter Test Cases : ";
 for(i=1;i<=numberOfTestCases;i++)
 {
	cin>>testCase[i];
	//currentTestCase = testCase[i];
 }

// cout<<"\n\n Output : \n\n";

 for(i=1;i<=numberOfTestCases;i++)
 {
  currentTestCase = testCase[i];
  MSBloc=0;
  maxDigit=0;
  minDigit=9;
  numberOfDigit=0;

	  while(currentTestCase > 0)
	  {
	   currentDigit = currentTestCase % 10;
	   currentTestCaseArray[numberOfDigit] = currentDigit;
	   currentTestCase = currentTestCase / 10;
	   if(currentDigit > maxDigit)
	   {
		maxDigit = currentDigit;
		maxDigitLocation = numberOfDigit;
	   }
	   if(currentDigit < minDigit)
	   {
		minDigit = currentDigit;
		minDigitLocation = numberOfDigit;
	   }
	   numberOfDigit++;
	  }
	  MSBloc = numberOfDigit-1;

	  if(numberOfDigit<=1)
	  {
		smallest = testCase[i];
		largest = testCase[i];
	  }
	  else
	  {
		if(MSBloc==minDigitLocation)
			smallest = testCase[i];
		else if(minDigit==0)
			smallest=testCase[i];
		else
		{
			for(j=0;j<numberOfDigit;j++)
				small[j]=currentTestCaseArray[j];
			temprory = small[MSBloc];
			small[MSBloc] = small[minDigitLocation];
			small[minDigitLocation] = temprory;
			smallest = 0;
			for(j=0,ten=1;j<numberOfDigit;j++)
			{
				smallest = smallest + small[j]*ten;
				ten = ten * 10;
			}
		}

		if(MSBloc==maxDigitLocation)
			largest = testCase[i];
		else
		{
			for(j=0;j<numberOfDigit;j++)
				large[j]=currentTestCaseArray[j];
			temprory = large[MSBloc];
			large[MSBloc] = large[maxDigitLocation];
			large[maxDigitLocation] = temprory;
			largest = 0;
			for(j=0,ten=1;j<numberOfDigit;j++)
			{
				largest = largest + large[j]*ten;
				ten = ten * 10;
			}
		}
	  }

//  cout<<"MSBloc : "<<MSBloc<<" max : "<<maxDigitLocation<<" min : "<<minDigitLocation<<" N : "<<numberOfDigit;
  cout<<"\nCase #"<<i<<": "<<smallest<<" "<<largest;
 }
 getch();
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CookingTheBooks {
	
	private static final String TEMPLATE = "Case #%d: %s";
	
	private Output solve(Input input) {
		char[] number = input.number.toCharArray();
		if (number.length <= 1) {
			return new Output(input.number, input.number);
		}
		
		char[] smallest = min(number);
		char[] largest = max(number);
		
		return new Output(new String(smallest), new String(largest));
	};
	
	private char[] max(char[] chars) {
		for (int i = 0; i < chars.length -1; i++) {
			char[] max = max(chars, i);
			if (max != null) return max;
		}
		return chars;
	}
	
	private char[] max(char[] chars, int start) {
		char max = chars[start];
		int index = start;
		
		for (int i = start + 1; i < chars.length; i++) {
			char candidate = chars[i];
			if (candidate > max || (candidate == max && index != start)) {
				max = candidate;
				index = i;
			}
		}
		
		if (index == start) return null;
		
		char[] maxNumber = Arrays.copyOf(chars, chars.length);
		maxNumber[index] = chars[start];
		maxNumber[start] = max;
		
		return maxNumber;
	}
	
	private char[] min(char[] chars) {
		for (int i = 0; i < chars.length -1; i++) {
			char[] min = min(chars, i);
			if (min != null) return min;
		}
		return chars;
	}
	
	private char[] min(char[] chars, int start) {
		char min = chars[start];
		int index = start;
		
		for (int i = start + 1; i < chars.length; i++) {
			char candidate = chars[i];
			if (start == 0 && candidate == '0') continue;
			if (candidate < min || (candidate == min && index != start)) {
				min = candidate;
				index = i;
			}
		}
		
		if (index == start) return null;
		
		char[] minNumber = Arrays.copyOf(chars, chars.length);
		minNumber[index] = chars[start];
		minNumber[start] = min;
		
		return minNumber;
	}
	
	public static List<Input> readInput(BufferedReader reader) throws IOException {
		String numOfLines = reader.readLine();
		int n = Integer.parseInt(numOfLines);

		List<Input> input = new ArrayList<>();

		for (int i = 0; i < n; i++) {
			String line = reader.readLine();
			Input in = new Input(line);
			input.add(in);
		}

		return input;
	}
	
	private static class Input {

		public final String number;
		
		public Input(String number) {
			this.number = number;
		}

	}

	private static class Output {

		private final String smallest;
		private final String biggest;

		public Output(String smallest, String biggest) {
			this.smallest = smallest;
			this.biggest = biggest;
		}

		@Override
		public String toString() {
			return this.smallest + " " + this.biggest;
		}
	}
	
	/**************************************************************************/

	public static void main(String[] args) {
		CookingTheBooks.start();
	}
		
	private static List<Output> solve(List<Input> input) {
		List<Output> output = new ArrayList<>(input.size());
		for (Input in : input) output.add((new CookingTheBooks()).solve(in));
		return output;
	}
		
	public static void start() {
		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			PrintWriter writer = new PrintWriter(System.out);

			List<Input> input = readInput(reader);
			List<Output> output = solve(input);
			writeOutput(output, writer);

			reader.close();
			writer.close();

		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
		
	private static void writeOutput(List<Output> output, PrintWriter writer) {
		for (int i = 0; i < output.size(); i++) {
			String line = String.format(TEMPLATE, i + 1, output.get(i));
			writer.println(line);
		}
	}
}

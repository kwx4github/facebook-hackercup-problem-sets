
//#define DEBUG       //comment when you have to disable all debug macros.
#include <iostream>
#include <cstring>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <climits>
#include <ctime>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <sys/time.h>
#include <iomanip>
#include <cstdarg>
#include <utility> //std::pair
#include <cassert>

using namespace std;

// Input macros
#define s(n)    scanf("%d",&n)
#define sc(n)   scanf("%c",&n)
#define sl(n)   scanf("%lld",&n)
#define sf(n)   scanf("%lf",&n)
#define ss(n)   scanf("%s",n)

//Pair macros
#define mp make_pair // useful for working with pairs
#define fi first
#define se second

#define ll long long //data types used often, but you don't want to type them time by time_t

// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back

#ifdef DEBUG
     #define debug(args...)            {cerr << #args << ": ";dbg,args; cerr<<endl;}
#else
    #define debug(args...)              // Just strip off all debug tokens
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }
} dbg;

string swapc(string str, int i, int j){
    char temp = str[i];
    str[i] = str[j];
    str[j] = temp;
    return str;
}

int main()
{
    int cases;
    cin >> cases;
    forall(t,0,cases){
        ll int n;
        cin >> n;
        stringstream ss;
        ss << n;
        string str = ss.str();
        int maxd = -1, mind = 10, maxd_i, mind_i, count=0;
        forall(i,0,str.length()){
            if(str[i] - '0' > maxd){
                maxd = str[i] - '0';
                maxd_i = i;
            }
            if(str[i] - '0' < mind && str[i] - '0' != 0){
                mind = str[i] - '0';
                mind_i = i;
            }
            count++;
        }
        string maxstr = swapc(str,0,maxd_i);
        string minstr;
        if(mind < 10)
            minstr = swapc(str,0,mind_i);
        else
            minstr = str;
        cout << "Case #" << t+1 << ": " << minstr << " " << maxstr;
        if(t!=cases-1)
            cout << endl;
    }
}


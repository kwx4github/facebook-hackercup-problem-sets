import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.StringWriter;
import java.util.Scanner;

public class CookingBooks {

	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
			int T;
			Scanner scanIn = new Scanner(System.in);
			T=scanIn.nextInt();
			if (T<1 || T>100) return ;
			int N[][]=new int[T][10];
			int j;
			String tmp;
			for (int i=0; i<T;i++)
			{
				tmp=scanIn.next();
				if ((Integer.parseInt(tmp)>999999999||Integer.parseInt(tmp)<0) || (tmp.substring(0, 1).equals("0") && tmp.length()>1)) return;
				j=1;
				do{
				    N[i][j]=Integer.parseInt( tmp.substring(j-1,j));
				    j=j+1;
				}while (j<= tmp.length());
				N[i][0]=tmp.length();
			}
			int maxDigit,minDigit,maxDigitIndex,minDigitIndex,x;
			for (int i=0; i<T;i++)
			{
				maxDigit=N[i][1];
				minDigit=N[i][1];
				maxDigitIndex=1;
				minDigitIndex=1;
				for (j=2;j<=N[i][0];j++)
				{
					if (maxDigit<N[i][j])
					{
						maxDigitIndex=j;
						maxDigit=N[i][j];
					}
					if (minDigit>N[i][j])
					{
						minDigitIndex=j;
						minDigit=N[i][j];
					}
				}
				if(minDigitIndex>1)
				{
					x=N[i][1];
					N[i][1]=N[i][minDigitIndex];
					N[i][minDigitIndex]=x;
				}
				System.out.print("Case #"+(i+1) +" : " );
				for( j=1; j<=N[i][0];j++)
					{ 
					   System.out.print(N[i][j]);
					}
				if(minDigitIndex>1)
				{
					x=N[i][1];
					N[i][1]=N[i][minDigitIndex];
					N[i][minDigitIndex]=x;
				}
				if(maxDigitIndex>1)
				{
					x=N[i][1];
					N[i][1]=N[i][maxDigitIndex];
					N[i][maxDigitIndex]=x;
				}
				System.out.print("   ");
				for( j=1; j<=N[i][0];j++)
					{
					   System.out.print(N[i][j]);
					}
				System.out.print("\n");
			}
			}
	}



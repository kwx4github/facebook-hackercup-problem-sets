#include<iostream>
#include<cmath>

using namespace std;

 int main() {
	long int T;
	cin >> T;

	for(long int i=0;i<T;++i) {
		long int N;
		cin >> N;

		// find size
		long int M=N;
		long int size=0;
		while(M>0) {
			size++;
			M=M/10;
		}

		// create array to store digits
		M=N;
		long int tSize=size;
		long int arr[size];
		long int ctr=size-1;
		while(M>0) {
			arr[ctr--]=M%10;
			M=M/10;
		}
		
		// Find minimum
		long int minimum = INT_MAX;
		long int minPos = -1;
		long int k1=-1;
		for(k1=0;k1<size-1;++k1) {
			minimum = arr[k1];
			minPos = -1;
			for(long int k2=k1+1;k2<size;++k2) {
				if(arr[k2]<=minimum && ((k1==0 && arr[k2]!=0)||k1!=0)) {
					minimum = arr[k2];
					minPos = k2;
				}
			}
			if(minimum !=arr[k1]) {
				long int temp = arr[k1];
				arr[k1]=arr[minPos];
				arr[minPos]=temp;
				break;
			}
		}
		
		cout <<"Case #" <<i+1<<": "; 
		for(long int i=0;i<size;++i)
			cout <<arr[i];
		cout <<" ";
		if(minPos !=-1) {
			long int temp = arr[k1];
			arr[k1]=arr[minPos];
			arr[minPos]=temp;
		}
		
		// Find maximum
		long int maximum = -1;
		long int maxPos = -1;
		k1 = -1;
		for(k1=0;k1<size-1;++k1) {
			maximum = arr[k1];
			maxPos = -1;
			for(long int k2=k1+1;k2<size;++k2) {
				if(arr[k2]>=maximum) {
					maximum = arr[k2];
					maxPos = k2;
				}
			}
			if(maximum !=arr[k1]) {
				long int temp = arr[k1];
				arr[k1]=arr[maxPos];
				arr[maxPos]=temp;
				break;
			}
		}
		for(long int i=0;i<size;++i)
			cout <<arr[i];
		cout << endl;
	}
	return 0;
}

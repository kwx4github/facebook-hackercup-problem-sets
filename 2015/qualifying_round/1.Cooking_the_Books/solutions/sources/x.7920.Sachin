#include<iostream>
#include<algorithm>
using namespace std;

struct digit
{
  int nVal, nPos;
};

bool myCompare(digit a, digit b)
{
  if(a.nVal == b.nVal)
    return a.nPos > b.nPos;
  return a.nVal < b.nVal;
}

long long fraud(long long nNum)
{
  digit digits[10];
  int nCount = 0, nDigits[10];
  long long nNumBak = nNum;
  while(nNumBak)
    {
      nDigits[nCount] = digits[nCount].nVal = nNumBak%10;
      digits[nCount].nPos = nCount;      
      nNumBak /= 10;
      nCount++;
    }
  sort(digits, digits + nCount, myCompare);
  for(int i = nCount - 1; i >= 0; i--)
    {
      if(digits[i].nVal > nDigits[i] && digits[i].nPos < i)
	{
	  swap(nDigits[i], nDigits[digits[i].nPos]);
	  break;
	}      
    }
  for(int i = nCount - 1; i >= 0; i--)
    nNumBak = nNumBak*10 + nDigits[i];
  return nNumBak;      
}



int main()
{
  int T;
  long long nNum;
  cin>>T;
  for(int x = 1; x <= T; x++)
    {
      cin>>nNum;
      cout<<"Case #"<<x<<": "<<nNum<<" ";
      cout<<fraud(nNum)<<endl;      
    }
  return 0;
}

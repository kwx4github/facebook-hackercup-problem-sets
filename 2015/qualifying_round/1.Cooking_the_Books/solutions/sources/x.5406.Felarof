import java.io.*;
import java.util.*;

public class CookingtheBooks{
    int sorted_d[], sorted_a[], pos_d[], pos_a[];
    int digits[];
    int n_len;
    String n_str;
    int n;
    CookingtheBooks( int n ){
	this.n = n;
	sorted_d = new int[9];
	sorted_a = new int[9];
	pos_d = new int[9];
	pos_a = new int[9];
	
	n_str = String.valueOf( n );
	n_len = n_str.length();
	digits = new int[ n_len ];
	for( int i=0; i<n_len; i++ )
	    digits[i] = n_str.charAt( i ) - '0';

	sort();
    }
    public static void main( String args[] ) throws IOException{
	BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );
	StringTokenizer st;
	int t = Integer.parseInt( br.readLine() );
	for( int i=0; i<t; i++ ){
	    int n = Integer.parseInt( br.readLine() );
	    CookingtheBooks temp = new CookingtheBooks( n );
	    System.out.println( "Case #"+ String.valueOf( i+1 ) + ": " + String.valueOf( temp.findSmallest() ) + " " + String.valueOf( temp.findLargest() ) );
	}
    }
    public int findLargest(){
	int res=n;
	if( n==0 || n_str.length() == 1 ) res = n;
	for( int i=0; i<n_len; i++){
	    if( digits[i] != get_largest( i )[0] ){
		res = swap( i, get_largest( i )[1] );
		break;
	    }
	}
	return res;
	
    }
    public int findSmallest(){
	int res=n;
	if( n==0 || n_str.length() == 1 ) res = n;

	if( get_smallest( 0 )[0] == 0 ){
	    int pos=-1;
	    for( int j = n_len-1; j>0; j-- ){
		if( digits[j] == 0 ){
		    pos = j;
		}
	    }
	    for( int k=1; k<pos && k<n_len; k++ )
		if( digits[k] != 0 ){
		    res = swap( k, pos );
		    break;
		}
	}
	else{
	    outer: for( int i=0; i<n_len; i++){
		if( digits[i] != get_smallest( i )[0] && get_smallest( i )[0] != 0 ){
		    res = swap( i, get_smallest( i )[1] );
		    break outer;
		}
		else
		    continue;
	    }
	}
	return res;
	
    }
    private int swap( int p1, int p2 ){
	int a[] = digits.clone();
	int temp = a[p1];
	a[p1] = a[p2];
	a[p2] = temp;
	int num=0;
	for( int i=0; i<n_len; i++ )
	    num = num*10 + a[i];
	return num;
    }
    private int[] get_largest( int pos ){
	int res[] = new int[2];
	res[0] = sorted_d[pos];
	res[1] = pos_d[pos];
	return res;
    }
    private int[] get_smallest( int pos ){
	int res[] = new int[2];
	res[0] = sorted_a[pos];
	res[1] = pos_a[pos];
	return res;
    }
    // returns the array containing the positions require
    private void sort(){
	int a[] = digits.clone();
	int pos[] = new int[ n_len ];
	for( int i=0; i<n_len; i++ )
	    pos[i] = i;

	for( int i=0; i<n_len; i++ )
	    for( int j=i+1; j< n_len; j++ ){
		if( a[j] < a[i] ){
		    int temp = a[i];
		    int temp_pos = pos[i];
		    a[i] = a[j];
		    pos[i] = pos[j];
		    a[j] = temp;
		    pos[j] = temp_pos;
		}
	    }
	this.sorted_a = a.clone();
	this.pos_a = pos.clone();
	this.sorted_d = reverse( sorted_a );
	this.pos_d = reverse( pos_a );
    };
    private int[] reverse( int a[] ){
	int temp[] = new int[ a.length ];
	for( int i=a.length-1; i>=0; i-- )
	    temp[ a.length - 1 - i ] = a[i];
	return temp;
    }
}

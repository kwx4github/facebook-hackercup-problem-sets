import Control.Applicative ((<$>))
import Text.Printf (printf)
import Data.List (inits, tails)

main :: IO ()
main = do
  _ <- getLine
  ns <- lines <$> getContents
  mapM_ (putStrLn . p) $ zip [1..] $ map f ns

p :: (Int,(Int,Int)) -> String
p (a,(b,c)) = printf "Case #%d: %d %d" a b c


-- |
-- >>> f "12"
-- (12,21)
f :: String -> (Int,Int)
f n | null x = (read n,read n)
    | otherwise = (minimum x, maximum x)
  where
    x :: [Int]
    x = map read $
        filter (\(s:_) -> s /= '0') $
        zipWith (++) (tails n) (inits n)

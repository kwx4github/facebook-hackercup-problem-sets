#include<cstdio>
#include<sstream>
#include<cstdlib>
#include<cctype>
#include<cmath>
#include<algorithm>
#include<set>
#include<queue>
#include<deque>
#include<stack>
#include<list>
#include<iostream>
#include<fstream>
#include<numeric>
#include<string>
#include<vector>
#include<cstring>
#include<map>
#include<iterator>
#include<iomanip>

#define leapYear(year) (((year%4==0)&&(year%100!=0))||(year%400==0))
#define validMove(x,y) ((x>=0 && x<col) && (y>=0 && y<row))
#define mod(n,m) (!(n%m))
#define bit(n,m) (n&m?1:0)
#define LOOP_REV(i,end,start,decrement) for(__typeof(end) i=end;i>=start;i-=decrement)
#define LOOP(i,start,end,increment) for(__typeof(start) i=start;i<=end;i+=increment)
#define ScanInt(n) scanf("%d",&n)
#define ScanDouble(n) scanf("%lf",&n)
#define ScanWord(n) scanf("%s",n)
#define ScanLine(n) gets(n)

#define INF_MAX 2147483647
#define INF_MIN -2147483647.00
#define LIMIT 20
#define MASK 48
#define SIZE 100001
typedef long long int int64;

const int fx[]={0,0,1,-1,-1,1,-1,1}; /* for direction, x-axis */
const int fy[]={1,-1,0,0,1,1,-1,-1}; /* for direction, y-axis */

const int BLACK=2,GRAY=1,WHITE=0;

const int knightx[8]= {-2,-1,1,2,2,1,-1,-2};
const int knighty[8]= {1,2,2,1,-1,-2,-2,-1};

/* lets start coding */
using namespace std;

inline bool getMax(int a,int b) {return a>b;}
inline bool getMin(int a,int b) {return a<b;}

FILE *input,*output;
char num[LIMIT],copy_num[LIMIT];

void printNumber(bool flagging=false) {
	int i,temp,index;
	bool flag;
	
	temp=num[0]-MASK;
	flag=false;
	
	for(i=1;num[i];i++) {
		if(flagging==false) {
			if(getMin(temp,num[i]-MASK)) {
				temp=num[i]-MASK;
				index=i;
				flag=true;
			}
		} else if(flagging) {
			if(getMax(temp,num[i]-MASK)) {
				temp=num[i]-MASK;
				index=i;
				flag=true;
			}
		}
	}
	strcpy(copy_num,num);
	if(flag && temp!=0) {
		copy_num[0]^=copy_num[index]^=copy_num[0]^=copy_num[index];
	}
	printf(" %s",copy_num);
	
}

int main() {
	input=fopen("cooking_the_books.txt","r");
	output=fopen("cooking_the_books_output.txt","w");
	
	if(input==NULL) exit(1);
	if(output==NULL) exit(1);
	int i,t,case_no;
	fscanf(input,"%d",&t);
	for(case_no=1;case_no<=t;case_no++) {
		fscanf(input,"%s",num);
		fprintf(output,"Case #%d:",case_no);
		printNumber(true);
		fprintf(output," %s",copy_num);
		printNumber();
		fprintf(output," %s\n",copy_num);
	}
	fclose(input);
	fclose(output);
	
	return 0;
}
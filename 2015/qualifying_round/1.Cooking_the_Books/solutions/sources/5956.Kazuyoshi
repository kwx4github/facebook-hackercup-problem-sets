import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;
import java.lang.*;
import java.math.*;
import java.io.*;
import java.util.*;

public class CookingTheBooks {

	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;

	static void solve() throws Exception {
		String input = next();
		//System.err.println("input=" + input);
		int length = input.length();
		char[] cArray = input.toCharArray();
		int[] iArray = new int[length];
		int max = -1;
		int min = -1;

		if(length==1){
		    printCase();
		    out.println(input+ " " +input);
		    out.flush();
		    return;
		}
		for (int i=0; i< length; i++){
		    iArray[i] = cArray[i] - '0';
		}
		if(length==2){
		    max = Math.max(iArray[0], iArray[1]);
		    min = Math.min(iArray[0], iArray[1]);
		    printCase();
		    if(min == 0){
			out.println(input+ " " +input);
		    } else {
			StringBuffer sb = new StringBuffer();
			sb.append(min);	sb.append(max);
			sb.append(" ");
			sb.append(max);	sb.append(min);
			out.println(sb.toString());
		    }
		    out.flush();
		    return;
		}

		int[] sorted = Arrays.copyOf(iArray, length);
		Arrays.sort(sorted);
		int[] minArray = Arrays.copyOf(iArray, length);
		int[] maxArray = Arrays.copyOf(iArray, length);
		int minLeft=-1, minRight=-1;
		int maxLeft=-1, maxRight=-1;

		// search not maximum point
		for (int i=0; i< length; i++){
		    if(iArray[i] < sorted[length -1 - i] && maxLeft==-1){
			maxLeft=i;
			max = sorted[length -1 - i];
			//System.err.println("maxLeft=" + maxLeft);
		    }
		}
		if(maxLeft != -1){
		    for (int j=length-1; j>=0 ; j--){
			if(iArray[j] == max && maxRight==-1){
			    maxRight=j;
			    //System.err.println("maxRight=" + maxRight);
			}
		    }
		}
		
		if(sorted[0] == 0){ // includes 0
		    int numZero=1;// count #0
		    while(sorted[numZero] == 0){ numZero++; }
		    min = sorted[numZero];
		    if(iArray[0]>min){// iArray[0] > minimum of non zero
			minLeft=0;
			for (int j=length-1; j>=0 ; j--){
			    if(iArray[j] == min && minRight==-1){
				minRight=j;
			    }
			}
		    } else { // iArray[0] == minimum of non zero
			for (int i=1; i <= numZero; i++){// check m000xyz0abc?
			    if(iArray[i] != 0 && minLeft==-1){
				minLeft=i;
				for (int j=length-1; j>=0 ; j--){
				    if(iArray[j] == 0 && minRight==-1){
					minRight=j;
				    }
				}
			    }
			}
			if(minLeft==-1){// minimize substring iArray[numZero + 1 ] ... iArray[length-1]
			    //System.err.println("numZero = " + numZero + ", length = " + length);
			    if(numZero + 1 >= length-1){
				minLeft=0;
				minRight=0;
			    } else {
				int[] sorted2 = Arrays.copyOfRange(iArray, numZero+1, length);
				Arrays.sort(sorted2);

				//System.err.println("sorted2 = " + Arrays.toString(sorted2));
				
				for(int i=0; i <= length-1 - (numZero+1) ; i++){
				    if(iArray[i + numZero + 1] > sorted2[i] && minLeft==-1){
					minLeft=i+numZero+1;
					min=sorted2[i];
				    }
				}
				if(minLeft != -1){
				    for(int j=length-1; j>=0; j--){
					if(iArray[j] == min && minRight==-1){
					    minRight=j;
					}
				    }
				} else {
				    minLeft=0; minRight=0;
				}
			    }
			}
		    }
		} else {
		    for (int i=0; i< length; i++){
			if(iArray[i] > sorted[i] && minLeft==-1){
			    minLeft=i;
			    min=sorted[i];
			}
		    }
		    if(minLeft != -1){
			for (int j=length-1; j>=0 ; j--){
			    if(iArray[j] == min && minRight==-1){
				minRight=j;
			    }
			}
		    } else {
			minLeft=0; minRight=0;
		    }
		}

		//System.err.println("minLeft=" + minLeft);
		//System.err.println("minRight=" + minRight);

		int tmp;
		if(minLeft != -1){
		    tmp = minArray[minLeft];
		    minArray[minLeft] = minArray[minRight];
		    minArray[minRight] = tmp;
		}
		if(maxLeft != -1){
		    tmp = maxArray[maxLeft];
		    maxArray[maxLeft] = maxArray[maxRight];
		    maxArray[maxRight] = tmp;
		}

		printCase();
		for(int i=0; i<length; i++){
		    out.print(minArray[i]);
		}
		out.print(" ");
		for(int i=0; i<length; i++){
		    out.print(maxArray[i]);
		}
		out.println();
		out.flush();
	}

	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int T = nextInt();
			for (test = 1; test <= T; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}

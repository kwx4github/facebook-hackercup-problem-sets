import java.io.*;

public class Accountant {
	String inputFile = "cooking_the_books.txt";
	String outputFile = "output.txt";
	
	int findmaxinteger(String line, int startpos){
		int max = Integer.MIN_VALUE;
		int maxpos = -1;
		for(int i = startpos; i < line.length(); i++){
			char c = line.charAt(i);
			int tmp = c - '0';
			if (tmp > max){
				max = tmp;
				maxpos = i;
			}
		}
		return maxpos;
	}
	
	int findminnonzerointeger(String line, int startpos){
		int min = Integer.MAX_VALUE;
		int minpos = -1;
		for(int i = line.length()-1; i >= 0; i--){
			char c = line.charAt(i);
			if(c == '0')
				continue;
			int tmp = c - '0';
			if (tmp < min){
				min = tmp;
				minpos = i;
			}
		}
		return minpos;
	}
	
	int findmax(String line){
		int startpos = 0;
		int maxpos = -1;
		int maxnum = Integer.parseInt(line);
		while( startpos < line.length()){
			maxpos = findmaxinteger(line, startpos);
			if(line.charAt(maxpos) == '0')
				break;
			if(maxpos != startpos){
				char[] tmpChars = line.toCharArray();
				char t = tmpChars[maxpos];
				tmpChars[maxpos] = tmpChars[startpos];
				tmpChars[startpos] = t;
				String newvalue = String.valueOf(tmpChars);
				maxnum = Integer.parseInt(newvalue);
				break;
			}
			startpos++;
		}
		return maxnum;
	}
	
	int iszeropresent(String line){
		int ispresent = -1;
		for(int i = line.length()-1; i >= 0; i--){
			if(line.charAt(i) == '0'){
				ispresent = i;
				break;
			}
		}
		return ispresent;
	}
	
	int findmin(String line){
		int iszero = iszeropresent(line);
		int minnumber = Integer.parseInt(line);
		int startpos = 0;
		
		while( startpos < line.length()){
			int minpos = findminnonzerointeger(line, startpos);
			if(minpos == -1)
				break;
			if(minpos == 0 && iszero != -1){
				char[] tmpChars = line.toCharArray();
				char t = tmpChars[1];
				tmpChars[1] = tmpChars[iszero];
				tmpChars[iszero] = t;
				String newvalue = String.valueOf(tmpChars);
				minnumber = Integer.parseInt(newvalue);
				break;
			}
			if(minpos != startpos){
				char[] tmpChars = line.toCharArray();
				char t = tmpChars[minpos];
				tmpChars[minpos] = tmpChars[startpos];
				tmpChars[startpos] = t;
				String newvalue = String.valueOf(tmpChars);
				minnumber = Integer.parseInt(newvalue);
				break;
			}
			startpos++;
		}
		return minnumber;
	}
	
	void writeToFile(int minnumber, int maxnumber, int casenumber){
		try{
			//PrintWriter pw = new PrintWriter("out.txt", "UTF-8");
			PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(outputFile, true)));
			pw.println("Case #"+casenumber +": "+minnumber+" "+maxnumber);
			pw.close();
		}
		catch(IOException e){
			e.printStackTrace();
		}
		
	}
	
	void process(String line, int casenumber){
		int maxnumber = findmax(line);
		int minnumber = findmin(line);
		
		writeToFile(minnumber, maxnumber, casenumber);
		//System.out.println("Case#"+casenumber +": "+minnumber+" "+maxnumber);
	}
	
	void startwork(){
		BufferedReader br = null;
		try {
	    	br = new BufferedReader(new FileReader(inputFile));
	        String line = br.readLine();
	        int num = Integer.parseInt(line);
	        int casenumber = 1;
	        while (casenumber <= num ) {
	            line = br.readLine();
	            //System.out.println(line);
	        	process(line, casenumber);
	            casenumber++;
	        }
	    } catch(IOException e) {
	    	e.printStackTrace();
	    }
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub	
		Accountant acct = new Accountant();
	    acct.startwork();
	}

}

#define Yamatan_Debug 0
//#define BAYAN
#ifdef BAYAN
#	define BAYAN_NUM "E"
#endif
#if Yamatan_Debug == 1
#	include <conio.h>
#endif

#include <list>
#include <map>
#include <set>
#include <bitset>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional> 
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <bitset>
#include <string.h>

//#pragma region macros and consts

using namespace std;

#define STR(X) #X

#define ABS(a)		((a>0)?a:-(a))
#define MIN(a,b)	((a<b)?(a):(b))
#define MAX(a,b)	((a<b)?(b):(a))
#define FOR(i,a,n)	for(int i=(a);i<(n);++i)
#define FORI(n)		for(int i = 0; i < n; ++i)
#define MEMS(a,b)	memset(a,b,sizeof(a))

#define MP(p1, p2)		std::make_pair(p1, p2)
#define VI				std::vector<int>
#define SI				std::set<int>
#define RNG(container)	container.begin(), container.end()

typedef long long L2;

const int		MOD = 10000007;
const double	EXP = 2.7182818284590452;
const double	Pi	= 3.1415926358979323;
const double	EPS = 1e-4; //1e-11;

//#pragma endregion

// O(sqrt(n))
bool prime(L2 n)
{ 
	if(n == 1) return false;

    for(L2 i = 2; i <= sqrt( n ); i++)
        if(n % i == 0)
            return false;
   
	return true;
}

L2 gcd(L2 a, L2 b)
{
	while(a*b)
	{
		if(a > b)
			a %= b;
		else
			b %= a;
	}
 	return a + b;
}

L2 lcm(L2 a, L2 b)
{
	return a / gcd(a, b) * b;
}

L2 exgcd (L2 a, L2 b, L2 & x, L2 & y) 
{
	if (a == 0) 
	{
		x = 0; y = 1;
		return b;
	}

	L2 x1, y1;
	L2 d = exgcd (b%a, a, x1, y1);

	x = y1 - (b / a) * x1;
	y = x1;
	return d;
}

L2 poww(L2 val, L2 p, L2 mod)
{
//	if(p < 0)
//		int l = 0;
	if(p == 1) return val % mod;
	if(p == 0) return 1;

	L2 res;

	if(p & 1)
	{
		res = (val % mod) * poww(val, p-1, mod);
	}
	else
	{
		L2 t = poww(val, p/2, mod);
		res = t * t;
	}

	return res % mod;
}

/*
bool isprime[100010];
vector<int> primes;
void findprime(int num)
{
	MEMS (isprime, true);

	isprime[1] = false;
	isprime[2] = true;

	int size = num;

	for(int i = 2; i <= sqrt(size) + 1; ++i)
	{
		if(isprime[i])
		{
			for(long long j = i*i; j <= size; j += i)
				isprime[j] = false;
		}
	}

	FOR(i,2,size)
	{
		if(isprime[i]) primes.push_back(i);
	}
}
*/
 
//////////////////
//////////////////

#define MAXNUM 100005

int t;
string n, maxx, minn; 
string::iterator iter, cur;

bool isf = false;

int main(void)
{
//#pragma region macros
#if Yamatan_Debug == 2 
	freopen("input.txt", "r", stdin); 
	freopen("output.txt", "w", stdout);
#endif
	
#if Yamatan_Debug == 0
#	if defined( BAYAN )
	freopen((string(BAYAN_NUM) + string(".in")).c_str(), "r", stdin);
	freopen((string(BAYAN_NUM) + string(".txt")).c_str(), "w", stdout);
#	endif
#endif
//#pragma endregion
	
	freopen("input_A.txt", "r", stdin); 
	freopen("output.txt", "w", stdout);

	// < Code here>

	cin >> t;

	FOR(i,0,t)
	{
		cin >> n; maxx = minn = n;
		cur = maxx.begin();
		isf = true;

		while(cur != maxx.end())
		{
			iter = max_element(cur, maxx.end());
			if(*cur != *iter)
			{
				if(*iter == '0' && isf)
					isf = false;
				else
				{
					swap(*cur, *iter);
					break;	
				}
			}

			++cur;
		}

		cur = minn.begin();
		isf = true;

		while(cur != minn.end())
		{
			iter = min_element(cur, minn.end());
			if(*cur != *iter)
			{
				if(*iter == '0' && isf)
					isf = false;
				else
				{
					swap(*cur, *iter);
					break;
				}
			}

			++cur;
		}

		printf("Case #%d: %s %s\n", i+1, minn.c_str(), maxx.c_str());
	}

	// </ Code here>
 
#if Yamatan_Debug == 1
	_getch();
#endif

	return 0;
} 



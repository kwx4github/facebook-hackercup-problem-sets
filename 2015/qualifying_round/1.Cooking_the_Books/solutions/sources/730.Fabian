import java.io.File;
import java.io.PrintStream;
import java.util.Scanner;

/**
 * Cooking the Books entry for Facebook Hacker Cup - Janurary 2015
 * 
 * @author Fabian Thielisch (fthielisch@gmail.com)
 */
public class CookingTheBooks {

	public static void main(String[] args) throws Exception {		
		String inputFileName = "input.txt";
		String outputFileName = "output.txt";
		
		if (args.length > 0) {
			inputFileName = args[0];
			if (args.length > 1) {
				outputFileName = args[1];
			}
		}
		
		try (Scanner s = new Scanner(new File(inputFileName))) {
			try (PrintStream ps = new PrintStream(outputFileName)) {
				int totalTestCases = s.nextInt();
				
				s.nextLine();
				
				for (int i = 0; i < totalTestCases; i++) {
					ps.print("Case #" + (i + 1) + ": ");
					new CookingTheBooks().runTestCase(s, ps);
				}
			}
		}
	}
	
	private void runTestCase(Scanner s, PrintStream ps) {
		String line = s.nextLine();

		ps.print(findSmallest(line));
		ps.print(" ");
		ps.println(findLargest(line));
	}
	
	private String findLargest(String input) {
		if (input == null) {
			return null;
		}
		if (input.length() <= 1) {
			return input;
		}
		
		return switchLargest(input);
	}
	
	private String switchLargest(String input) {
		char firstCharacter = input.charAt(0);
		
		int swapPos = findLargestCharacter(input, 1);
		if (swapPos == -1) {
			return input;
		}
		
		char swapChar = input.charAt(swapPos);
		
		if (firstCharacter >= swapChar) {
			return firstCharacter + switchLargest(input.substring(1));
		}
		
		char[] ret = input.toCharArray();
		ret[0] = swapChar;
		ret[swapPos] = firstCharacter;
		
		return new String(ret);
	}
	
	private int findLargestCharacter(String search, int leftMostIndex) {
		int ret = -1;
		int largestValue = -1;
		
		for(int i = search.length() - 1; i >= leftMostIndex; i--) {
			int value = search.charAt(i) - '0';
			
			if (value > largestValue) {
				ret = i;
				largestValue = value;
			}
		}
		
		return ret;
	}
	
	public String findSmallest(String input) {
		if (input == null) {
			return null;
		}
		if (input.length() <= 1) {
			return input;
		}
		
		return switchSmallest(input, false);
	}
	
	private String switchSmallest(String input, boolean allowZero) {
		char firstCharacter = input.charAt(0);
		
		int swapPos = findSmallestCharacter(input, 1, allowZero);
		if (swapPos == -1) {
			return input;
		}
		
		char swapChar = input.charAt(swapPos);
		
		if (firstCharacter <= swapChar) {
			return firstCharacter + switchSmallest(input.substring(1), true);
		}
		
		char[] ret = input.toCharArray();
		ret[0] = swapChar;
		ret[swapPos] = firstCharacter;
		
		return new String(ret);
	}
	
	private int findSmallestCharacter(String search, int startIndex, final boolean allowZero) {
		int ret = -1;
		int smallestValue = 10;
		
		for(int i = startIndex; i < search.length(); i++) {
			int value = search.charAt(i) - '0';
			
			if (!allowZero && value == 0) {
				continue;
			}
			
			if (value <= smallestValue) {
				ret = i;
				smallestValue = value;
			}
		}
		
		return ret;
	}
}

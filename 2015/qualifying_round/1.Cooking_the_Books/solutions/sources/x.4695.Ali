
def findSmallest(digits):
	"""
		1- get smaller digits from first digit
		2- 	if there are none OR there is only zeros
				than first digit stays dont change! try second digit, and so on...
		3-  else swap with min one
	"""

	min_changed = []
	for j, val in enumerate(digits):

		lhs = int(val) # lhs is left-most-digit
		
		# find min from lhs
		if not min_changed:
			mindigits = []
			i=j+1
			while i<len(digits):
				d = int(digits[i])
				if d < lhs:
					mindigits.append([d, i])
				i = i+1

			#find min to swap
			for d,i in mindigits:
				if not j and not d: # in first digit & have zeros
					continue

				#print "d",d,"at",i,"should be swapped with",val,"at",j
				min_changed.append([i,j])
				return min_changed
				#break		# remove break if you want to know all possible swaps
			#else lhs stays, try second!
		
	return min_changed


def findLargest(digits):
	max_changed = []

	for j, val in enumerate(digits):

		lhs = int(val) # lhs is left-most-digit
		
		if not max_changed:
			maxdigits = []
			i=j+1
			while i<len(digits):
				d = int(digits[i])
				if d > lhs:
					maxdigits.append([d, i])
				i = i+1
		
			if maxdigits:
				maxone, index = max(maxdigits)
				max_changed.append([index,j])
				break
			#else lhs stays, try others!
	
	return max_changed


def swapLocs(locs, digits):
	minloc = int(min(locs))
	maxloc = int(max(locs))
	return digits[:minloc]+digits[maxloc]+digits[minloc+1:maxloc]+digits[minloc]+digits[maxloc+1:]


def read_inps(inps):
	caseno = 0
	with open('cooking_the_books.txt','r') as f:
		
		caseno = int(f.readline().strip())
		for i in range(caseno):
			inps.append( str(f.readline().strip()) )
		#print "inps:",inps


def write_outs(inps):
	for case, number in enumerate(inps):
		swpMin = findSmallest(number)
		if swpMin:	smallest = swapLocs(swpMin[0],number)
		else:	smallest = number
		
		swpMax = findLargest(number)
		if swpMax:	largest = swapLocs(swpMax[0], number)
		else: largest = number
		print "Case #"+str(case+1)+": "+str(smallest)+" "+str(largest)


inps = []

read_inps(inps)
write_outs(inps)
	

"""
	tricky example:
		110  --> 101 110
		210
		122 ---> 122 221
		132

"""

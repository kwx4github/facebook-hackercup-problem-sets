#include <bits/stdc++.h>
using namespace std;

typedef long long int lli;

void addOne(string& b) {
	string ones;
	for(int i=0; i<b.size()-1; i++)
		ones += '0';
	ones += '1';

	for(int i=b.size()-1; i>=0; i--) {
		if(b[i] != ones[i])
			b[i] = '1';
		else {
			b[i] = '0';
			if(i != 0 && ones[i]=='1') {
				ones[i-1] = '1';
			}
		}
	}
}

bool isValid(string& b, int& l, int& r) {
	int c = 0;
	bool f1=false, f2=false;
	for(int i=0; i<b.size(); i++) {
		if(b[i] == '1') {
			c++;
			if(!f1) {
				f1 = true;
				l = i;
				continue;
			}
			if(f1 and !f2) {
				f2 = true;
				r = i;
			}
		}
	}

	return c==2;
}

lli stol(string& s) {
	stringstream ss(s);
	lli x;
	ss >> x;
	return x;
}

int main() {
	int T;
	cin >> T;

	string n, b, act;
	for(int k=1; k<=T; k++) {
		cin >> n;

		b = "";
		for(int i=0; i<n.size(); i++)
			b += '0';

		int l, r;
		lli nmin = stol(n), nmax = stol(n);

		for(int cm=0; cm<pow(2,n.size()); cm++) {
			if(!isValid(b,l,r)) {
				addOne(b);
				continue;
			}
			//cout << b << "-" << l << " " << r;
			act = n;

			swap(act[l], act[r]);
			if(act[0] == '0')
				continue;

			//cout << " -> " << act << "="<<stol(act) <<endl;

			nmax = max(nmax, stol(act));
			nmin = min(nmin, stol(act));

			addOne(b);
		}

		cout << "Case #" << k << ": " << nmin << " " << nmax << endl;
	}

	return 0;
}
<?php

$input = "20
999999999
731407053
314146739
23734873
331343270
339027548
691917617
444558727
181355259
0
67954827
134351747
9990999
621007349
123
10
287689159
344115361
31524
728154034
";

/*
$input = "1
66114
661141
7";
*/
function orderDigits($value)
{	
	$response = '';
	$reorder = true;
	$stringLength = strlen($value);
	
	// Check if swith needed
	if($stringLength==1)
	{
		$reorder = false;
	}
	
	// count string. Check if string is 2 or less characters.
	if($stringLength==2)
	{
		if(substr($value, 2)==0)
		{
			$reorder = false;
		}
		if(substr($value, 2)==substr($value, 1))
		{
			$reorder = false;
		}
	}
	
	// Check if characters are the same
	$response = '';
	$array = str_split($value);
	$charactersAreSame = true;
	foreach($array as $key => $numbers)
	{
		if($key>0 && ($numbers != $array[$key-1]))
		{
			$charactersAreSame = false;
		}
	}
	if($charactersAreSame)
	{
		$reorder = false;
	}
	// parse through each value and check if 
	if($reorder)
	{
		$response .= getSmallNumber($array);
		$response .= ' ';
		$response .= getLargeNumber($array);
	}
	else
	{
		$response .= $value.' '.$value;
	}
	return $response;
}

function switchPosition($array,$key1,$key2)
{
    $newArray = array();
    foreach ($array as $key => $value) {
        if ($key == $key1) {
            $newArray[$key2] = $array[$key2];
        } elseif ($key == $key2) {
            $newArray[$key1] = $array[$key1];
        } else {
            $newArray[$key] = $value;
        }
    }
    return $newArray;
}

/**
 * Get the larget position as long as it is not the first position
 **/
function getLargestPosition($array,$startPosition=0)
{
	$length = count($array)-1;
	$retry = false;
	$i = 0;
	$largestPosition = $startPosition;
	foreach($array as $key => $number)
	{
		if($i>$startPosition)
		{
			if($number >= $array[$largestPosition])
			{
				// Needed to make loop work right
				$largestPosition = $key;
			}
		}
		$i++;
	}
	
	if(($length > $startPosition) && ($largestPosition==$startPosition))
	{
		$retry = true;
	}
	else if(($length > $startPosition))
	{
		# Quick test that number is the next one.
		$previousNumber = 0;
		foreach($array as $key => $value)
		{
			if($key <= $largestPosition)
			{
				if($key == 0)
				{
					$previousNumber = $value;
				}
				else if($value < $previousNumber)
				{
					$previousNumber = $value;
				}
			}
		}
		if($previousNumber >= $array[$largestPosition])
		{
			$retry = true;
		}
	}
	
	if($retry)
	{
		// Get next largest position
		$startPosition++;
		$largestPosition = getLargestPosition($array,$startPosition);
	}
	return $largestPosition;
}
function getSmallestPosition($array,$startPosition=0)
{
	$smallestPosition = $startPosition;
	foreach($array as $key => $number)
	{
		if($key > $startPosition)
		{
			if($number <= $array[$smallestPosition])
			{
				$smallestPosition = $key; 
			}
		}
	}
	
	return $smallestPosition;
}

/**
 * Switch two characters to get largest possible value
 **/
function getLargeNumber($array,$startInt=0)
{
	$largestPosition = getLargestPosition($array,$startInt);
	$charactersAreSame = true;
	
	# Get the first value smaller than the largestPosition
	$i=0;
	foreach($array as $key => $value)
	{
		if($value < $array[$largestPosition])
		{
			$smallestPosition = $key;
			break;
		}
		$i++;
	}
	
	$array = switchPosition($array,$largestPosition,$smallestPosition);	
	
	foreach($array as $key => $value)
	{
		$response .= $value;
	}
	return $response;
}

function getSmallNumber($array)
{
	$response = '';
	$smallestPosition = getSmallestPosition($array);
	$largestPosition = 0;
	foreach($array as $key => $value)
	{
		if($value > $array[$smallestPosition] && $key < $smallestPosition)
		{
			$largestPosition = $key;
			break;
		}
	}
	//echo $smallestPosition.' '.$largestPosition.' ';
	if($largestPosition < $smallestPosition)
	{
		$array = switchPosition($array,$largestPosition,$smallestPosition);	
	}
	foreach($array as $key => $value)
	{
		$response .= $value;
	}
	return $response;
}

?>
<pre>
<?php
$i = 0;
$t = 0;
foreach(preg_split("/((\r?\n)|(\r\n?))/", $input) as $line)
{    
   	// remove white space from line
   	$n = preg_replace('/\s+/', ' ', $line);
   	$n = (int) $n;
    // get number of lines to process
    if($i==0)
    {
		$t = $n;	   	
    }
    else if($i <= $t)
    {
		// do stuff with $line
	    echo 'Case #'.$i.': ';
	    echo orderDigits($n);
	    echo "\n";
    }
    $i++;
} 
?>
</pre>
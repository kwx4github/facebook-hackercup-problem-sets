import java.util.*;
import java.io.*;

public class Cooking
{
	static int smallest(final int[] num)
	{
		final int n = num.length;
		for(int i = 0; i<n; i++)
		{
			int min = num[i], bi = i;
			for(int j = i+1; j<n; j++)
				if(num[j]<=min && num[j]<num[i] && (i!=0 || num[j]!=0))
				{
					min = num[j]; bi = j;
				}
			num[bi] = num[i];
			num[i] = min;//System.err.println(i+" "+bi+" - "+min);
			if(bi!=i) break;
		}

		int ans = 0;
		for(int i = 0; i<n; i++) ans = ans*10 + num[i];
		return ans;
	}
	static int largest(final int[] num)
	{
		final int n = num.length;
		for(int i = 0; i<n; i++)
		{
			int min = num[i], bi = i;
			for(int j = i+1; j<n; j++)
				if(num[j]>=min && num[j]>num[i])
				{
					min = num[j]; bi = j;
				}
			num[bi] = num[i];
			num[i] = min;
			if(bi!=i) break;
		}

		int ans = 0;
		for(int i = 0; i<n; i++) ans = ans*10 + num[i];
		return ans;
	}
	public static void main(String[] klein)
	{
		final Kattio in = new Kattio(System.in);
		final PrintWriter out = new PrintWriter(System.out);

		final int[] num = new int[10];

		final int T = in.getInt();
		for(int t = 1; t<=T; t++)
		{
			int N = in.getInt();
			int small = N, large = N;
			if(N>10)
			{
				int back = 10;
				for(; N>0; N/=10) num[--back] = N%10;
				small = smallest(Arrays.copyOfRange(num,back,10));
				large = largest(Arrays.copyOfRange(num,back,10));
			}

			out.println("Case #"+t+": "+small+" "+large); //System.err.println(System.currentTimeMillis()-tid);
		}

		out.flush();
	}

	private static class Kattio
	{
		public Kattio(final InputStream i)
		{
			r = new BufferedReader(new InputStreamReader(i));
		}

		public boolean hasMoreTokens() {
			return peekToken() != null;
		}

		public int getInt() {
			return Integer.parseInt(nextToken());
		}

		public double getDouble() {
			return Double.parseDouble(nextToken());
		}

		public float getFloat()
		{
			return Float.parseFloat(nextToken());
		}

		public long getLong() {
			return Long.parseLong(nextToken());
		}

		public String getWord() {
			return nextToken();
		}



		private BufferedReader r;
		private String line;
		private StringTokenizer st;
		private String token;

		private String peekToken() {
		if (token == null)
			try {
			while (st == null || !st.hasMoreTokens()) {
				line = r.readLine();
				if (line == null) return null;
				st = new StringTokenizer(line);
			}
			token = st.nextToken();
			} catch (IOException e) { }
		return token;
		}

		private String nextToken() {
		String ans = peekToken();
		token = null;
		return ans;
		}
	}
}

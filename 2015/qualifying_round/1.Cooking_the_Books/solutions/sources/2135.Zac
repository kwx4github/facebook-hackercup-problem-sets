#!/usr/bin/python

#from __future__ import print_function

def initialSmallest(numArray):
	#print "Getting initial smallest"
	smallest = 999999999
	for number in numArray:
		num = int(number)
		if num < smallest and num != 0:
			smallest = num
	return smallest

def Smallest(numArray):
	#print "Getting non-initial smallest"
	smallest = 999999999
	for number in numArray:
		num = int(number)
		if num < smallest:
			smallest = num
	return smallest

def Largest(numArray):
	largest = 0
	for number in numArray:
		num = int(number)
		if num > largest:
			largest = num
	return largest
	
def getIndexFromRight(largestNum, array):
	return ''.join(array).rfind(str(largestNum))

def getLargestNumber(largest, lIndex, array):
	#print "Getting Largest"
	swapIndex = 0
	notSwapped = True
	arrayLength = len(array)
	while notSwapped:
		if swapIndex == len(array):
			#print "	Reached end of array"
			break
		if swapIndex == lIndex:
#			if swapIndex == 0:
#				return ''.join(array)
#			else:
			return ''.join(array[0:swapIndex+1]) + solveLargest(''.join(array[swapIndex+1:len(array)]))
		#print "	array[swapIndex]: %s, largest: %s" % (array[swapIndex], largest)
		if int(array[swapIndex]) < largest:
			swap(swapIndex, lIndex, array)
			notSwapped = False
		else:
			swapIndex+=1
	return ''.join(array)

def getSmallestNumber(smallest, sIndex, array):
	#print "Getting Smallest"
	swapIndex = 0
	notSwapped = True
	arrayLength = len(array)
	while notSwapped:
		if swapIndex == len(array):
			#print "	Reached end of array"
			break 
		if swapIndex == sIndex:
			#print "Reached sIndex %r" % sIndex
			return ''.join(array[0:swapIndex+1]) + solveSmallest(''.join(array[swapIndex+1:len(array)]), False)
		#print "	array[swapIndex]: %s, smallest: %s" % (array[swapIndex], smallest)
		if int(array[swapIndex]) > smallest:			
			array = swap(swapIndex, sIndex, array)
			notSwapped = False
		else:
			swapIndex+=1
	return ''.join(array)

def swap(index, otherindex, array):
	#print "	Swapping %r with %r" % (array[index], array[otherindex])
	holder = array[index]
	array[index] = array[otherindex]
	array[otherindex] = holder
	return array

def solveLargest(case):
	testArray = list(case)
	#print testArray
	if len(testArray) == 0 or len(testArray) == 1:
		return ''.join(testArray)
	largest = Largest(testArray)
	#print "Largest: %r" % largest
	lIndex = getIndexFromRight(largest, testArray)
	largestPossible = getLargestNumber(largest, lIndex, testArray)
	#print "Largest Possible: %s" % largestPossible
	return largestPossible

def solveSmallest(case, initial):
	testArray = list(case)
	#print testArray
	if len(testArray) == 0 or len(testArray) == 1:
		return ''.join(testArray)
	if initial:
		smallest = initialSmallest(testArray)
		if(int(testArray[0]) == smallest):
			return testArray[0] + solveSmallest(testArray[1:len(testArray)], False)
	else:
		smallest = Smallest(testArray)
	#print "Smallest: %r" % smallest
	sIndex = getIndexFromRight(smallest, testArray)
	smallestPossible = getSmallestNumber(smallest, sIndex, testArray)
	#print "Smallest Possible: %s" % smallestPossible
	return smallestPossible

def writeFile(lineArray):
	f = open('output.txt', 'w')
	for line in lineArray:
		f.write(line + "\n")
	f.close

testCases = []
with open("cooking_the_books.txt", 'r') as inFile:
	cases = int(inFile.readline().strip('\n'))
	i=0
	while i<cases:
		i+=1
		testCases.append((inFile.readline().strip('\n')))
#		print "Read test case"

#print cases
#print testCases

answerArray = []

k=0
for case in testCases:
	k+=1
	totalLargest = solveLargest(case)
	#print "\n\n\nFinal Largest: " + totalLargest
	totalSmallest = solveSmallest(case, True)
	#print "\n\n\nFinal Smallest: " + totalSmallest
	answerArray.append('Case #' + str(k) + ": " + totalSmallest + ' ' + totalLargest)
	
writeFile(answerArray)

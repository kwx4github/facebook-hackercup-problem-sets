import java.io.*;
import java.util.*;
public class Solution1 {
  /**
    * Main method takes in Strings from Stdin and feeds necessary input into Run method to solve the problem.
    */
  public static void main(String args[] ) throws Exception {
    BufferedReader br = new BufferedReader(new FileReader("input1.txt"));
    final int T = Integer.parseInt(br.readLine());
    for (int i = 1; i <= T; i += 1) {
      String inp = br.readLine();
      System.out.println("Case #" + i + ": " + minSwap(inp) + " " + maxSwap(inp));
    }
  }

  static int minSwap(String inp) {
    char[] arr = inp.toCharArray();
    ArrayList<Character> digits = new ArrayList<Character>();
    int min_elem = 10;
    for (char elem : arr) {
      int digit = Character.getNumericValue(elem);
      min_elem = Math.min(digit, min_elem); 
      digits.add(elem);
    }
    for (int i = 0; i < digits.size(); i += 1) {
      int digi = Character.getNumericValue(digits.get(i));
      if (min_elem == digi || digi == 0) {
        continue;
      }
      int min_val = 10;
      int min_off = -1;
      boolean flag = true;
      for (int j = i + 1; j < digits.size(); j += 1) {
        int dig = Character.getNumericValue(digits.get(j));
        if (j != i && dig != 0) {
          if (digi > dig && min_val > dig ) {
            min_val = dig;
            min_off = j;
            flag = false;
          }
        }
      }
      if (flag) continue;
      char temp = digits.get(i);
      digits.set(i, Character.forDigit(min_val, 10));
      digits.set(min_off, temp);
      char[] char_arr = new char[digits.size()];
      for (int a = 0; a < digits.size(); a += 1) {
        char_arr[a] = digits.get(a);
      }
      String out = new String(char_arr);
      return Integer.parseInt(out);
    }
    return Integer.parseInt(inp);
  }
  
  static int maxSwap(String inp) {
    char[] arr = inp.toCharArray();
    ArrayList<Character> digits = new ArrayList<Character>();
    int max_elem = -1;
    for (char elem : arr) {
      int digit = Character.getNumericValue(elem);
      max_elem = Math.max(max_elem, digit);
      digits.add(elem);
    }
    for (int i = 0; i < digits.size(); i += 1) {
      int digi = Character.getNumericValue(digits.get(i));
      if (max_elem == digi || digi == 0) {
        continue;
      }
      int max_val = 0;
      int max_off = -1;
      boolean flag = true;
      for (int j = i + 1; j < digits.size(); j += 1) {
        int dig = Character.getNumericValue(digits.get(j));
        if (j != i && dig != 0) {
          if (digi < dig && max_val < dig) {
            max_val = dig;
            max_off = j;
            flag = false;
          }
        }
      }
      if (flag) continue;
      char temp = digits.get(i);
      digits.set(i, Character.forDigit(max_val, 10));
      digits.set(max_off, temp);
      char[] char_arr = new char[digits.size()];
      for (int a = 0; a < digits.size(); a += 1) {
        char_arr[a] = digits.get(a);
      }
      String out = new String(char_arr);
      return Integer.parseInt(out);
    }
    return Integer.parseInt(inp);
  }
}

#!/usr/bin/php
<?php
$fReader = new FileReader('php://stdin');
$tCases = (int) $fReader->getLine();
$i = 0;
while ($i++ < $tCases) {
    $board = new NumberSwapper($fReader);
    echo "Case #$i: {$board->getSolution()}" . PHP_EOL;
}

class NumberSwapper {
    protected $iNumber;

    protected $min;

    protected $max;

    public function __construct(FileReader $fReader) {
        $this->iNumber = $fReader->getLine();
        $this->min = $this->max = $this->iNumber;
        $this->process();
    }

    protected function process() {
        $min = $max = null;
        $minPos = $maxPos = null;
        $minDone = $maxDone = true;
        for ($i = 1, $l = strlen($this->iNumber); $i < $l; ++$i) {
            if (($min !== null && $this->iNumber{$i} <= $min) || ($min === null && $this->iNumber{$i} <= $this->iNumber{$i - 1})) {
                $min = $this->iNumber{$i};
                $minPos = $i;
                $minDone = false;
            }
            if (($max !== null && $this->iNumber{$i} > $max) || ($max === null && $this->iNumber{$i} > $this->iNumber{$i - 1})) {
                $max = $this->iNumber{$i};
                $maxPos = $i;
                $maxDone = false;
            }
        }

        for ($i = 0; $i < $l; ++$i) {
            if ($maxDone === false && $max > $this->iNumber{$i}) {
                $aux = $this->iNumber{$i};
                $this->max{$i} = $max;
                $this->max{$maxPos} = $aux;
                $maxDone = true;
            }

            if ($minDone === false && $min < $this->iNumber{$i} && ($min != 0 || $i != 0)) {
                $aux = $this->iNumber{$i};
                $this->min{$i} = $min;
                $this->min{$minPos} = $aux;
                $minDone = true;
            }

            if ($minDone && $maxDone) {
                break;
            }
        }
    }

    public function getSolution() {
        return $this->min . ' ' . $this->max;
    }

}

class FileReader {
    protected $handle;

    protected $_file;

    public function __construct($filename) {
        $this->_file = $filename;
        $this->open();
    }

    public function getLine() {
        return trim(fgets($this->handle));
    }

    public function open() {
        $this->handle = fopen($this->_file, 'r');
    }

    public function close() {
        fclose($this->handle);
    }

}
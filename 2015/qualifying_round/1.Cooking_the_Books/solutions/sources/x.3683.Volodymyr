#include <iostream>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <string.h>
#include <utility>
#include <queue>
#include <stack>
#include <iomanip>
#include <ctype.h>
#include <sstream>
#include <map>
#include <set>
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
 
using namespace std;

typedef long long LL;

#define FOR(i,n) for(int i = 0;i < n;i++)
#define MP make_pair
#define PB push_back
#define ALL(a) (a).begin(),(a).end()
#define PII pair<int, int>
#define CLEAR(a) memset(a, 0, sizeof(a))
#define INF 2000000000
const double EPS = 1E-8;
 
using namespace std;

const LL mod = 1000000007;

int n;
vector<int> a;

int getl(vector<int> d) {
  int r = 0;
  for (int i = d.size() - 1; i >= 0; i--) {
    int bst = d[i];
    int id = -1;
    for (int j = i-1; j >= 0; j--) {
      if (d[j] >= bst) {
        bst = d[j];
        id = j;
      }
    }

    if (id != -1) {
      r = d[i];
      d[i] = d[id];
      d[id] = r;
      break;
    }
  }

  r = 0;
  for (int i = d.size() - 1; i >= 0; i--) {
    r = 10*r + d[i];
  }
  return r;
}


int gets(vector<int> d) {
  int r = 0;
  for (int i = d.size() - 1; i >= 0; i--) {
    int bst = d[i];
    int id = -1;
    for (int j = i-1; j >= 0; j--) {
      if (d[j] <= bst && (i != d.size() - 1 || d[j] != 0)) {
        bst = d[j];
        id = j;
      }
    }

    if (id != -1) {
      r = d[i];
      d[i] = d[id];
      d[id] = r;
      break;
    }
  }

  r = 0;
  for (int i = d.size() - 1; i >= 0; i--) {
    r = 10*r + d[i];
  }
  return r;

}

void solve(int t) {
  cin >> n;
  a.clear();

  while (n) {
    a.push_back(n%10);
    n/=10;
  }
  cout << "Case #" << t << ": ";

  cout << gets(a) << ' ' << getl(a) << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  int t;
  cin >> t;
  FOR(i, t) {
    solve(i+1);
  }
  while(1);

  return 0;
}

#include <algorithm>
#include <bitset>
#include <cstring>
#include <cmath>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

long long minNumber, maxNumber;

vector<int> getDigits(long long n) {
    vector<int> digits;
    while (n > 0) {
        digits.push_back(n % 10);
        n /= 10;
    }
    reverse(digits.begin(), digits.end());

    return digits;
}

long long getNumber(vector<int> digits) {
    long long number = 0;
    for (unsigned int i = 0; i < digits.size(); ++i) {
        number = number * 10 + digits[i];
    }

    return number;
}

void backtracking(int index, vector<int> digits, bool switched) {
    long long number;

    if (digits.size() == index) {
        if (0 == digits[0]) {
            return;
        }

        number = getNumber(digits);

        minNumber = min(minNumber, number);
        maxNumber = max(maxNumber, number);

        return;
    }

    backtracking(index + 1, digits, switched);

    if (true == switched) {
        return;
    }

    for (unsigned int i = index + 1; i < digits.size(); ++i) {
        swap(digits[index], digits[i]);
        backtracking(index + 1, digits, true);
        swap(digits[index], digits[i]);
    }
}

int main() {
    ifstream fin("stdin.input");
    ofstream fout("stdout.output");

    int t;
    long long n;
    vector<int> digits;

    fin >> t;
    for (int i = 1; i <= t; ++i) {
        fin >> n;

        if (0 == n) {
            minNumber = 0;
            maxNumber = 0;
        } else {
            minNumber = 1LL << 60;
            maxNumber = 0;

            digits = getDigits(n);
            backtracking(0, digits, false);
        }

        fout << "Case #" << i << ": ";
        fout << minNumber << " " << maxNumber << "\n";
    }

    return 0;
}

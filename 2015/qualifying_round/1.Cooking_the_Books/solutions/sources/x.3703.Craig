#!/usr/bin/env node

var Promise = require('bluebird');
var fs = Promise.promisifyAll(require('fs'));

var T;

fs.readFileAsync('./cooking_the_books.txt', {encoding: 'utf-8' })
.then(function (input) {
    var lines = input.split(/\r\n?|\n/);
    var inputs = lines.splice(1).filter(Boolean);
    var T = +lines[0];

    var results = inputs.map(function (input, index) {
        var digits = input.split('')
        .map(function (digit) {
            return +digit;
        });

        var validDigits = digits
        .filter(function (digit) {
            return digit !== 0;
        });

        var max = Math.max.apply(Math, validDigits);
        var min = Math.min.apply(Math, validDigits);

        var maxIndex = digits.lastIndexOf(max);
        var minIndex = digits.lastIndexOf(min);

        var smaller = swapIndexWithFirstInArray(copyArray(digits), minIndex).join('');
        var larger = swapIndexWithFirstInArray(copyArray(digits), maxIndex).join('');

        return 'Case #' + (index + 1) + ': ' + smaller + ' ' + larger;
    });

    return results.join('\n');
})
.then(function (result) {
    return fs.writeFileAsync('./cooking_the_books_result.txt', result)
})
.then(function () {
    console.log('yay!');
})
.catch(function (e) {
    console.log(e, 'oh no.');
});

function copyArray (array) {
    return array.slice(0);
}

function swapIndexWithFirstInArray (array, index) {
    var atIndex = array.splice(index, 1, array[0]);
    var rest = array.splice(1);
    return atIndex.concat(rest);
}

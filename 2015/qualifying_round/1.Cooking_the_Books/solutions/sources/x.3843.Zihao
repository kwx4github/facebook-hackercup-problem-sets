#include <cstdio>
#include <cstdlib>
#include <cstring>
using namespace std;

typedef struct _result{
	int firsti;
	int i;
} result;

result findSmallIndex(int numArr[9], int num, int NUM){
	if(num == 1){
		result r = {num - 1, num - 1};
		return r;
	}
	int s = 10, si = -1;
	for(int i = num - 1; i >= 0; i--){
		if((numArr[i] < s && num != NUM) || (numArr[i] < s && numArr[i] != 0 && num == NUM)){
			s = numArr[i];
			si = i;
		}	
	}
	if(si != num - 1){
		result r = {num - 1, si};
		return r;
	} 
	return findSmallIndex(numArr, num - 1, NUM);
}

result findLargeIndex(int numArr[9], int num, int NUM){
	if(num == 1){
		result r = {num - 1, num - 1};
		return r;
	}
	int l = -1, li = -1;
	for(int i = num - 1; i >= 0; i--){
		if((numArr[i] > l && num != NUM) || (numArr[i] > l && numArr[i] != 0 && num == NUM)){
			l = numArr[i];
			li = i;
		}	
	}
	if(li != num - 1){
		result r = {num - 1, li};
		return r;
	} 
	return findLargeIndex(numArr, num - 1, NUM);
}

void swap(int arr[9], int i, int j){
	int temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
}

void solve(int numArr[9], int num){
	int max[9];
	int min[9];
	memcpy(max, numArr, 9 * sizeof(int));
	memcpy(min, numArr, 9 * sizeof(int));
	result maxi = findLargeIndex(numArr, num, num);
	result mini = findSmallIndex(numArr, num, num);
	swap(max, maxi.firsti, maxi.i);
	swap(min, mini.firsti, mini.i);
	for(int i = num - 1; i >= 0; i--){
		printf("%d", min[i]);
	}
	printf(" ");
	for(int i = num - 1; i >= 0; i--){
		printf("%d", max[i]);
	}
	printf("\n");
}

int main(int argc, char const *argv[])
{
	int T, N, n;
	scanf("%d", &T);
	for (int i = 0; i < T; ++i)
	{
		scanf("%d", &N);
		int M = N;
		int index = 0;
		int numArr[9];
		while(N != 0){
			int curr = N % 10;
			numArr[index++] = curr;
			N /= 10;
		}
		printf("Case #%d: ", i + 1);
		if(M == 0){
			printf("0 0\n");
		} else {
			solve(numArr, index);		
		}
	}
	return 0;
}
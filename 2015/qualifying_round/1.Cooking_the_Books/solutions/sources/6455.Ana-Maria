#include <iostream>
#include <fstream>

using namespace std;

#define NUM_FIGURES 10
#define NUM_LENGTH 10
void make_all_zeros(int v[], int length)
{
	for (int i = 0; i < length; i++)
	{
		v[i] = 0;
	}
}

int get_figures(int v[], long number)
{
	int length = 0;

	do
	{
		v[length] = number % 10;
		length++;
		number = number / 10;
	} while (number > 0);
	return length;
}

int find_position(int v[], int start, int change_unit, int figure)
{
	while (v[start] != figure)
	{
		start += change_unit;
	}
	return start;
}

void mark_apparitions(int v[], int length, int mark[])
{
	for (int i = 0; i < length; i++)
	{
		mark[v[i]] += 1;
	}
}

int find_apparition(int position, int v[], int change_unit)
{
	while (!v[position])
	{
		position += change_unit;
	}
	return position;
}

void swap(int v[], int pos1, int pos2)
{
	int aux;
	aux = v[pos1];
	v[pos1] = v[pos2];
	v[pos2] = aux;
}

void print_number(int v[], int length)
{
	for (int i = length - 1; i >= 0; i--)
	{
		std::cout << v[i];
	}
}

void find_number(long test_number, int test_case)
{
	int apparitions[NUM_FIGURES];
	int number[NUM_LENGTH];
	int length;
	int figure_position;
	int change_unit;

	make_all_zeros(apparitions, NUM_FIGURES);
	make_all_zeros(number, NUM_LENGTH);
	length = get_figures(number, test_number);
	mark_apparitions(number, length, apparitions);


	if (test_case == 1)
	{
		figure_position = 9;
		change_unit = -1;
	}
	else
	{
		figure_position = 1;
		change_unit = 1;
	}

	for (int pos = length - 1; pos >= 0; pos--)
	{

		figure_position = find_apparition(figure_position, apparitions, change_unit);
		if (figure_position != number[pos])
		{
			int change_position = find_position(number, 0, 1, figure_position);
			swap(number, pos, change_position);
			break;
		}
		else
		{
			apparitions[figure_position]--;
			if ((test_case == 2) && (pos == (length - 1)))
			{
				figure_position = 0;
			}
		}
	}

	print_number(number, length);
}

int main()
{
	long test_number = 0;
	int t = 10;

	std::cin >> t;

	for (int test = 0; test < t; test++)
	{
		std::cin >> test_number;
		if (test_number == 0)
		{
			std::cout << "Case #" << (test + 1) << ": " << 0 << " " << 0 << "\n";
			continue;
		}

		std::cout << "Case #" << (test + 1) << ": ";
		find_number(test_number, 2);
		std::cout << " ";
		find_number(test_number, 1);
		std::cout << "\n";
	}
	
    return 0;
}

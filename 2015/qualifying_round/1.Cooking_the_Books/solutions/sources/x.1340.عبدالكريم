#include <fstream>
#include <algorithm>
#include <utility>
#include <vector>
#include <string>

const int NMAXLENGTH = 9;
std::vector< std::pair <char, int> >	vecSortedNumbers(NMAXLENGTH, std::make_pair<char, int> ('0', 0));

bool CMP_Min(const std::pair<char, int>& left, const std::pair<char, int>& right)
{
	return (left.first < right.first);
}

void Make_Smallest(std::string& strInput, std::string& strSmallest)
{
	for (int i = 0; i < strInput.length(); ++i)
	{	
		vecSortedNumbers[i].first = strInput[i];
		vecSortedNumbers[i].second = i;
	}

	std::stable_sort(vecSortedNumbers.begin(), vecSortedNumbers.begin() + strInput.length(), CMP_Min);

	for (int i = 0, iSorted = 0; i < strInput.length(); ++i)
	{
		if (strInput[i] > vecSortedNumbers[iSorted].first)
		{
			if ((vecSortedNumbers[iSorted].first != '0') || (i != 0))
			{
				while (((iSorted + 1) < strInput.length()) && (vecSortedNumbers[iSorted].first == vecSortedNumbers[iSorted + 1].first))++iSorted;
				std::swap(strSmallest[i], strSmallest[vecSortedNumbers[iSorted].second]);
				return;
			}
		}
		else
		{
			++iSorted;
		}
	}

	return;
}

void Make_Greatest(std::string& strInput, std::string& strGreatest)
{
	std::reverse(vecSortedNumbers.begin(), vecSortedNumbers.begin() + strInput.length());

	for (int i = 0, iSorted = 0; i < strInput.length(); ++i)
	{
		if (strInput[i] < vecSortedNumbers[iSorted].first)
		{
			while (((iSorted - 1) >= 0) && (vecSortedNumbers[iSorted - 1].first == vecSortedNumbers[iSorted].first))--iSorted;
			std::swap(strGreatest[i], strGreatest[vecSortedNumbers[iSorted].second]);
			return;
		}
		else
		{
			++iSorted;
		}
	}

	return;
}

int main()
{
	std::ifstream	InFile("cooking_the_books.txt");
	std::ofstream	OutFile("cooking_the_books_example_output.txt", std::ios_base::ate || std::ios_base::out);
	std::string		strInput;
	std::string		strSmallest;
	std::string		strGreatest;
	int				iCase = 0;
	int				T;

	InFile >> T;

	while (T--)
	{
		InFile >> strInput;

		strSmallest = strGreatest = strInput;
		Make_Smallest(strInput, strSmallest);
		Make_Greatest(strInput, strGreatest);

		OutFile << "Case #" << ++iCase << ": " << strSmallest << " " << strGreatest << "\n";
	}

	return 0;
}
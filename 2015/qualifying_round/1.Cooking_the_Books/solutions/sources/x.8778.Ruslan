package com.github.rd;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CookingBooks {

	public static void main(String[] args) throws FileNotFoundException, IOException {
		String inputPath = "src/main/resources/";
		String outputPath = "src/main/resources/";

		String inputFilePath = inputPath + "cooking_the_books.txt";
		String outputFilePath = outputPath + "cooking_the_books.out.txt";

		List<String> pairs = findNumbers(new File(inputFilePath));
		int testIndex = 1;

		try (BufferedWriter writer = new BufferedWriter(new FileWriter(new File(outputFilePath)))) {
			for (String pair : pairs) {
				writer.write(getResultString(testIndex++, pair));

				if (testIndex <= pairs.size()) {
					writer.write('\n');
				}
			}
		}
	}

	private static List<String> findNumbers(File file) throws IOException {
		List<String> numbers = new ArrayList<>();

		try (BufferedReader in = new BufferedReader(new FileReader(file))) {
			int testsNumber = Integer.parseInt(in.readLine());

			for (int test = 0; test < testsNumber; test++) {
				char[] number = in.readLine().toCharArray();
				numbers.add(genMinMax(number));
			}
		}
		return numbers;
	}

	private static String genMinMax(char[] num) {
		int minIndex = 0;
		char min = num[minIndex];

		int maxIndex = 0;
		char max = num[maxIndex];

		for (int i = 1; i < num.length; i++) {
			if (num[i] != '0') {
				if (num[i] < min) {
					min = num[i];
					minIndex = i;
				}

				if (num[i] > max) {
					max = num[i];
					maxIndex = i;
				}
			}
		}
		swap(num, 0, minIndex);
		String resMin = String.valueOf(num);
		swap(num, 0, minIndex);

		swap(num, 0, maxIndex);
		String resMax = String.valueOf(num);
		swap(num, 0, maxIndex);

		return resMin + " " + resMax;
	}

	private static void swap(char[] num, int i, int j) {
		char tmp = num[i];
		num[i] = num[j];
		num[j] = tmp;
	}

	private static String getResultString(int testCaseId, String res) {
		StringBuilder builder = new StringBuilder("Case #").append(testCaseId).append(": ").append(res);
		return builder.toString();
	}
}

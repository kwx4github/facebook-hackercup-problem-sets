#include <bits/stdc++.h>
using namespace std;

int n;
struct Food {
    int Gp, Gc, Gf;
    Food operator + (const Food &f) const {
        Food sum;
        sum.Gp = f.Gp + Gp;
        sum.Gc = f.Gc + Gc;
        sum.Gf = f.Gf + Gf;
        return sum;
    }
    bool operator == (const Food &f) const {
        if(f.Gp == Gp && f.Gc == Gc && f.Gf == Gf) return true;
        return false;
    }
    bool operator <= (const Food &f) const {
        if(f.Gp <= Gp && f.Gc <= Gc && f.Gf <= Gf) return true;
        return false;
    }
    void print(){
        cout << Gc << " " << Gp << " " << Gf << endl;
    }
};
Food want;
vector<Food> foods;

int calc(int i, Food current){
   //cout << "In " << i << " ";
    //current.print();
    if(current == want) return 1;
    if(i >= n) return 0;
    int ans1 = 0, ans2 = 0;
    if(want+foods[i] <= current)
        ans1 = calc(i+1, current+foods[i]);
    ans2 = calc(i+1, current);
    //cout << ans1 << " " << ans2 << endl;
    return (ans1 | ans2);
}

int main(){
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    int t, cases = 0;
    scanf("%d", &t);
    while(t--){
        scanf("%d %d %d", &want.Gp, &want.Gc, &want.Gf);
        scanf("%d", &n);
        foods.clear();
        for(int i = 0; i<n; i++){
            Food food;
            scanf("%d %d %d", &food.Gp, &food.Gc, &food.Gf);
            foods.push_back(food);
        }
        Food ansFood;
        ansFood.Gc = 0;
        ansFood.Gf = 0;
        ansFood.Gp = 0;
        int ans = calc(0, ansFood);
        if(ans) printf("Case #%d: yes\n", ++cases);
        else printf("Case #%d: no\n", ++cases);
    }
    return 0;
}

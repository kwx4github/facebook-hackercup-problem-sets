
def fun1(n):
    _min = min(n)    
    _minpos = -1 - n[::-1].index(_min)    
    return _minpos

def fun2(n):
    _max = max(n)
    _maxpos = -1 - n[::-1].index(_max)
    return _maxpos

t = input()

for x in range(t):
    n = raw_input()
    n1 = n2 = n
    _minpos = fun1(n)
    res1 = ''
    while(n1[0]==n1[_minpos]):
        res1 += n1[0]
        n1 = n1[1:]
        if not n1:
            break
        _minpos = fun1(n1)        
    
    if len(res1)!=len(n):
        tmp1 = ('',n1[_minpos+1:])[_minpos!=-1]        
        if n1[_minpos]!='0':
            res1 = res1 + n1[_minpos] + n1[1:_minpos] + n1[0] + tmp1
        else:
            if len(n1) == 2:
                res1 = res1 + n1[0] + n1[_minpos] + tmp1
            
            else:                
                a = res1                
                res1 = res1 + n1[0] + n1[_minpos] + n1[2:_minpos] + n1[1] + tmp1
                m = n1.replace(n1[_minpos],'a')
                _minpos = fun1(m)
                tmp1 = ('',n1[_minpos+1:])[_minpos!=-1]                
                tmp2 = a + n1[_minpos] + n1[1:_minpos] + n1[0] + tmp1                
                res1 = (tmp2,res1)[res1<tmp2]
        
    _maxpos = fun2(n2)
    res2 = ''    
    while(n2[0]==n2[_maxpos]):
        res2 += n2[0]
        n2 = n2[1:]
        if not n2:
            break
        _maxpos = fun2(n2)
    
    if len(res2)!=len(n):
        tmp = ('',n2[_maxpos+1:])[_maxpos!=-1]
        res2 = res2 + n2[_maxpos] + n2[1:_maxpos] + n2[0] + tmp    
    
    print "Case #" + str(x+1) + ": " + res1 + " "+ res2
    

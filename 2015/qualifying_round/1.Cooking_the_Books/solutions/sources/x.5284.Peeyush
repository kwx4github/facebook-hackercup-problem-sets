#include <iostream>
#include <math.h>

using namespace std;

int calcNumDigits(int N){
	int count=0;
	while(N>0){
		N=N/10;
		count++;
	}
	return count;
}

int digitAt(int N, int index){
	N = N/pow(10, index);
	return N%10;
}

int setDigit(int N, int pos, int val){
	int prevDigit = digitAt(N, pos);
	return N + (val-prevDigit)*pow(10,pos);
}

int swap(int N, int pos1, int pos2){
	int d1 = digitAt(N, pos1);
	int d2 = digitAt(N, pos2);
	return setDigit( setDigit(N, pos1, d2), pos2, d1);
}

int main(){
	int T, i;
	cin >> T;
	for(int i=1; i<=T; i++){
		int N, numDigits, NClone;
		cin >> N;
		NClone = N;
		numDigits = calcNumDigits(N);
		if (numDigits <= 1){
			cout << "Case #" << i << ": " << N << " " << N << endl;
		}else{
			int maxVal = 0, minVal = 9;
			int maxEndIndex = -1, minEndIndex = -1;
			int maxStartIndex = numDigits-1, minStartIndex = numDigits-1;
			int maxNum = N, minNum = N;

			for(int j=numDigits-1; j>=0; j--){
				if (maxVal <= digitAt(N,j)){
					maxVal = digitAt(N,j);
					maxEndIndex = j;
				}
			}
			for(int j=numDigits-1;j>=maxEndIndex;j--){
				if(digitAt(N,j) < maxVal){
					maxStartIndex = j;
					break;
				}
			}
			maxNum = swap(N, maxStartIndex,maxEndIndex);
			
			for(int j=numDigits-1; j>=0; j--){
				if(digitAt(N,j) != 0 && minVal >= digitAt(N,j)){
					minVal = digitAt(N,j);
					minEndIndex = j;
				}
			}
			for(int j=numDigits-1;j>=minEndIndex;j--){
				if(digitAt(N,j) > minVal){
					minStartIndex = j;
					break;
				}
			}
			minNum = swap(N, minStartIndex, minEndIndex);

			cout << "Case #" << i << ": " <<  minNum << " " <<  maxNum << endl;
		}
	}
	return 0;
}

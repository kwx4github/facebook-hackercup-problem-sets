#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <map>

using namespace std;

#if 1

int fd_max_pos(string st, int n) {
	int ans = -1;

	for (int i = st.length() - 1; i >= n; --i) {
		if (ans == -1 && st[i] != '0') {
			ans = i;
		}
		else if (ans != -1 && st[i] > st[ans]) {
			ans = i;
		}
	}

	return ans;
}

int fd_min_pos(string st, int n) {
	int ans = -1;

	for (int i = st.length() - 1; i >= n; --i) {
		if (ans == -1) {
			ans = i;
		}
		else if (st[i] < st[ans]) {
			ans = i;
		}
	}

	return ans;
}

int fd_min_pos_non_zero(string st, int n) {
	int ans = -1;

	for (int i = st.length() - 1; i >= n; --i) {
		if (ans == -1 && st[i] != '0') {
			ans = i;
		}
		else if (ans != -1 && st[i] < st[ans]) {
			ans = i;
		}
	}

	return ans;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int T;
	cin >> T;

	for (int TT = 0; TT < T; ++TT) {
		string nnmb, max_nmb, min_nmb;
		cin >> nnmb;

		max_nmb = nnmb;

		bool fl = true;
		for (int i = 1; i < max_nmb.length(); ++i) {
			
			fl &= max_nmb[i - 1] >= max_nmb[i];
		}

		if (!fl) {
			int x = fd_max_pos(max_nmb, 0);

			int n = 0;
			while (max_nmb[x] == max_nmb[n]) {
				++n;
				x = fd_min_pos(max_nmb, n);
			}

			char buf;
			buf = max_nmb[x];
			max_nmb[x] = max_nmb[n];
			max_nmb[n] = buf;
		}


		// MIN
		min_nmb = nnmb;

		fl = true;
		for (int i = 1; i < min_nmb.length(); ++i) {
			fl &= min_nmb[i - 1] <= min_nmb[i];
		}

		bool fl2 = true;
		for (int i = 1; i < min_nmb.length(); ++i) {
			fl2 &= min_nmb[i] == '0';
		}

		if (!(fl || fl2)) {
			int x = fd_min_pos_non_zero(min_nmb, 0);

			int n = 0;
			while (min_nmb[x] == min_nmb[n]) {
				++n;
				x = fd_min_pos(min_nmb, n);
			}

			char buf;
			buf = min_nmb[x];
			min_nmb[x] = min_nmb[n];
			min_nmb[n] = buf;
		}
		
		cout << "Case #" << (TT + 1) << ": " << min_nmb << " " << max_nmb << endl;
	}
}
#endif
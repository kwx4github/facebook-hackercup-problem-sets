import java.io.*;
import java.util.*;
class Solution {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(System.out,true); 
	public static void main(String[] args)throws IOException{
		int T=Integer.parseInt(br.readLine());
		for(int k=1;k<=T;k++){
			String in=br.readLine();
			int minArr[]=new int[in.length()];
			int maxArr[]=new int[in.length()];
			Digit sorted[]=new Digit[in.length()]; 
			for(int i=0;i<in.length();i++){ //store the input string into arrays of digits , sorted array to encapsulate digit along with index
				minArr[i]=maxArr[i]=Integer.parseInt(in.substring(i,i+1));				
				Digit d=new Digit();
				d.digit=minArr[i];
				d.index=i;
				sorted[i]=d;
			}
			//next is sorting the sorted table
			Digit temp,min;
			for(int i=0;i<in.length();i++){
				for(int j=i+1;j<in.length();j++){
				
					min=sorted[i];
					if(min.digit>sorted[j].digit){
						temp=sorted[i];
						sorted[i]=sorted[j];
						sorted[j]=temp;
					}
				}
			}
		/*	System.out.println(Arrays.toString(minArr));
			System.out.println(Arrays.toString(maxArr));
			for(Digit g : sorted){
				System.out.println(g.digit);
				System.out.println(g.index);
			}*/
			//now do one swap to get biggest or smallest number
			boolean minFlag=false;
			boolean maxFlag=false;
			List<Integer> excludedMin=new ArrayList<Integer>();
			List<Integer> excludedMax=new ArrayList<Integer>();
			for(int i=0;i<in.length();i++){
			
				if(minFlag && maxFlag){
					break;
				}
				if(!minFlag){
					for(int j=0;j<in.length();j++){
						if(!excludedMin.contains(j)){
							if(minArr[i]==sorted[j].digit){
								excludedMin.add(j);
								break;
							}
							else if(i==0 && sorted[j].digit==0){
								continue;
							}
							else if(minArr[i]>sorted[j].digit){
								minArr[sorted[j].index]=minArr[i];
								minArr[i]=sorted[j].digit;
								minFlag=true;
								break;
							}
							else{
								break;
							}
						}
					}
				}
				if(!maxFlag){
					for(int j=in.length()-1;j>=0;j--){
						if(!excludedMax.contains(j)){
							if(maxArr[i]==sorted[j].digit){
								excludedMax.add(j);
								break;
							}
							else if(i==0 && sorted[j].digit==0){
								continue;
							}
							else if(maxArr[i]<sorted[j].digit){
								maxArr[sorted[j].index]=maxArr[i];
								maxArr[i]=sorted[j].digit;
								maxFlag=true;
								break;
							}
							else{
								break;
							}
						}
					}
				}
				/*
				if(!minFlag){
					if(minArr[i]>sorted[i].digit && (sorted[i].digit!=0 || i!=0) && !excluded.contains(i)){
						while(sorted[i+minOffset].digit==0){
							minOffset++;
						}
						minArr[sorted[i].index]=minArr[i];
							minArr[i]=sorted[i].digit;
							minFlag=true;
					}
					else{
						excludedMin.add(j);
					}	
				}
				if(!maxFlag){
					if(maxArr[i]<sorted[in.length()-1-i].digit && !){
						maxArr[sorted[in.length()-1-i].index]=maxArr[i];
						maxArr[i]=sorted[in.length()-1-i].digit;
						maxFlag=true;
					}
					else{
						excludedMax.add(j);
					}
				}*/
			}

			out.print("Case #"+k+": ");
			for(int x: minArr){
				out.print(x);
			}
			out.print(" ");
			for(int x: maxArr){
				out.print(x);
			}
			out.println();
						
		}
		out.close();
	}
		
	
}
class Digit{
	public int digit,index;
}

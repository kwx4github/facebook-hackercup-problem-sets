import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;


public class CookingTheBooks {
	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new FileReader("cooking_the_books.txt"));
		int t = Integer.parseInt(in.readLine());
		PrintWriter out = new PrintWriter(new FileWriter("output.txt")); 
		for(int i = 0; i < t; i++)
		{
			String str = in.readLine();
			char[] smallNumArray = str.toCharArray();
			char[] bigNumArray = str.toCharArray();
			int bigNum = performBigSwap(bigNumArray);
			int smallNum = performSmallSwap(smallNumArray);
			out.println("Case #" + (i+1) + ": " + smallNum + " " + bigNum);
		}
		in.close();
		out.close();
	}
	static int performBigSwap(char[] num)
	{
		if(num.length > 1)
		{
			int bigDigitPos = 0;
			int k = 0;
			int bigDigit = 0;
			boolean biggestFound=false;
			while( !biggestFound && k < num.length)
			{
				bigDigit = Integer.parseInt(Character.toString(num[k]));
			    bigDigitPos = k;
				for(int i = num.length - 1; i > k; i--)
				{
					if(Integer.parseInt(Character.toString(num[i])) > bigDigit)
					{
						bigDigit = Integer.parseInt(Character.toString(num[i]));
						bigDigitPos = i;
						biggestFound = true;
					}
				}
				k++;
			}
			if(bigDigitPos != -1)
			{
				char temp = num[bigDigitPos];
				num[bigDigitPos] = num[k-1];
				num[k-1] = temp;
			}
		}
		return Integer.parseInt(new String(num));
	}
	
	static int performSmallSwap(char[] num)
	{
		if(num.length > 1)
		{
			int smallDigitPos = 0;
			int k = 0;
			int smallDigit = 0;
			boolean smallestFound = false;
			while( !smallestFound && k < num.length)
			{
				smallDigit = Integer.parseInt(Character.toString(num[k]));
			    smallDigitPos = k;
				for(int i = num.length - 1; i > k; i--)
				{
					if(Integer.parseInt(Character.toString(num[i])) < smallDigit && !(Integer.parseInt(Character.toString(num[i])) == 0 && k==0))
					{
						smallDigit = Integer.parseInt(Character.toString(num[i]));
						smallDigitPos = i;
						smallestFound = true;
					}
				}
				k++;
			}
			
			if(smallDigitPos != -1)
			{
				char temp = num[smallDigitPos];
				num[smallDigitPos] = num[k-1];
				num[k-1] = temp;
			}
		}
		return Integer.parseInt(new String(num));
	}
}

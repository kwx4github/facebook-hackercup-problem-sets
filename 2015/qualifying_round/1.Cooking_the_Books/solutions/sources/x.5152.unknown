import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

public class CookingBooks {

    public static final String COOKING_THE_BOOKS_INPUT = "cooking_the_books.txt";
    public static final String COOKING_THE_BOOKS_OUTPUT = "cooking_the_books_out.txt";

    public static void main(String[] args) {
        Object[] lines = getFileContent();
        if (lines == null) {
            return;
        }
        String result = "";
        for (int i = 1; i < lines.length; i++) {
            String current = lines[i].toString();
            int[] n = new int[current.length()];
            for (int j = 0; j < n.length; j++) {
                n[j] = Character.getNumericValue(current.charAt(j));
            }
            String minOverall = findMinOrMax(n, true);
            String maxOverall = findMinOrMax(n, false);
            if (i < lines.length - 1) {
                result += String.format("Case #%d: %s %s\n", i, minOverall, maxOverall);
            } else {
                result += String.format("Case #%d: %s %s", i, minOverall, maxOverall);
            }
        }
        printToFile(result);
    }

    private static String findMinOrMax(int[] n, boolean minCase) {
        int[] copy = Arrays.copyOf(n, n.length);
        boolean maxOrMinFound = false;
        for (int i = 0; i < n.length; i++) {
            int max = 0, indexI = 0, indexJ = 0;
            for (int j = i + 1; j < n.length; j++) {
                if (isMin(n[i], n[j], max, minCase)) {
                    max = n[i] - n[j];
                    indexI = i;
                    indexJ = j;
                    maxOrMinFound = true;
                }
            }
            if (maxOrMinFound) {
                swap(copy, indexI, indexJ);
                return stringify(copy);
            }
        }
        return stringify(n);
    }

    private static void swap(int[] copy, int i, int j) {
        int temp = copy[i];
        copy[i] = copy[j];
        copy[j] = temp;
    }

    private static boolean isMin(int a, int b, int max, boolean min) {
        int diff = a - b;
        if (min) {
            return diff > 0 && b > 0 && diff >= max;
        }
        return diff < 0 && b > 0 && diff <= max;
    }

    private static String stringify(int[] n) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < n.length; i++) {
            stringBuilder.append(n[i]);
        }
        return stringBuilder.toString();
    }

    private static Object[] getFileContent() {
        Object[] lines = null;
        try {
            lines = Files.lines(Paths.get(COOKING_THE_BOOKS_INPUT)).toArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return lines;
    }

    private static void printToFile(String result) {
        PrintWriter writer = null;
        try {
            writer = new PrintWriter(COOKING_THE_BOOKS_OUTPUT);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        writer.print(result);
        writer.close();
    }
}

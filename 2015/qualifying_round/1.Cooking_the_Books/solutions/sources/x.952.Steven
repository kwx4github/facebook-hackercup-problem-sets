import Data.List
main = interact $ unlines . zipWith h [1..] . f . tail . words
f :: [String] -> [[String]]
f [] = []
f (a:b) = [g minimum a, g maximum a]:f b
g :: (String -> Char) -> String -> String
g _ [a] = [a]
g f x | head x == f x = x
g f x = case splitAt (head $ elemIndices (f $ filter (/='0') x) x) x of
  ([],c) -> c
  (a,[]) -> a
  (a:b,c:d) -> (c:b) ++ (a:d)
h :: Int -> [String] -> String
h k x = "Case #" ++ show k ++ ": " ++ unwords x

def cook(N):
	M = sorted(N, key = lambda i: -int(i)) # target (min or max value)

	for i in xrange(len(N)):
		if N[i] != M[i]:
			m = max(xrange(i + 1, len(N)), key = lambda j: (int(N[j]), j))
			N[i], N[m] = N[m], N[i]
			return int("".join(N))

	return int("".join(N))

def cook2(N):
	M = sorted(N, key = lambda i: int(i))
	small = min(xrange(len(M)), key = lambda i: int(M[i]) if M[i] != '0' else 10)

	M[0], M[small] = M[small], M[0]
	# print M

	if N[0] != M[0]:
		m = max(xrange(1, len(N)), key = lambda j: ((-int(N[j]) if N[j] != '0' else -10), j))
		N[0], N[m] = N[m], N[0]
		return int("".join(N))

	for i in xrange(1, len(N)):
		if N[i] != M[i]:
			m = max(xrange(i + 1, len(N)), key = lambda j: (-int(N[j]), j))
			N[i], N[m] = N[m], N[i]
			return int("".join(N))

	return int("".join(N))


if __name__ == '__main__':
	from sys import stdin

	input = stdin.read().split('\n')

	for t in xrange(int(input[0])):
		N = input[t + 1]

		print "Case #{0}: {1} {2}".format(t + 1, cook2(list(N)), cook(list(N)))

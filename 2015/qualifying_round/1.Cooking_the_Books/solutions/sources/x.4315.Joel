//---------------------------------------------------------------------
// Name:    Joel Keyser
// Project: Hacker Cup 2015 Cooking The Books Problem
//---------------------------------------------------------------------

#include <iostream>
using namespace std;

const int MAX_NUM_DIGITS = 9;

char* TweakLower(char* numToTweak)
{
   // Starting from the first nonzero digit to the right of position
   // zero, scans each digit of numToTweak from left to right until
   // a digit is smaller than one of the numbers already scanned or in
   // position zero.
   int posNonZeroStart = 1;
   bool found = false;
   while ((posNonZeroStart < strlen(numToTweak)) && !found)
   {
      if (numToTweak[posNonZeroStart] == '0')
         posNonZeroStart++;
      else
         found = true;
   }
   if (!found)
      return numToTweak;

   int posSmallerDigit = posNonZeroStart;
   found = false;
   while ((posSmallerDigit < strlen(numToTweak)) && !found)
   {
      if (numToTweak[posSmallerDigit] < numToTweak[0])
         found = true;
      int scanner = posNonZeroStart;
      while ((scanner < posSmallerDigit) && !found)
      {
         if (numToTweak[posSmallerDigit] < numToTweak[scanner])
            found = true;
         else
            scanner++;
      }
      if (!found)
         posSmallerDigit++;
   }
   if (!found)
      return numToTweak;

   // Starting from the position of the last digit of numToTweak,
   // scans from right to left for the smallest digit of the
   // remaining numbers of numToTweak.
   int posSmallestDigit = strlen(numToTweak) - 1;
   for (int i = posSmallestDigit - 1; i >= posSmallerDigit; i--)
   {
      if (numToTweak[i] < numToTweak[posSmallestDigit])
         posSmallestDigit = i;
   }

   // If the smallest digit is zero, swap it with the position of the
   // smaller digit.
   // Otherwise, starting from position zero, scans from left to right
   // until a number larger than the smallest digit is found. That
   // number will then be swapped with the position of the smallest
   // digit.   
   if (numToTweak[posSmallestDigit] == '0')
   {
      char temp = numToTweak[posSmallestDigit];
      numToTweak[posSmallestDigit] = numToTweak[posNonZeroStart];
      numToTweak[posNonZeroStart] = temp;
   }
   else
   {
      int posLargerThanSmallest = 0;
      found = false;
      while ((posLargerThanSmallest < strlen(numToTweak)) && !found)
      {
         if (numToTweak[posLargerThanSmallest] > numToTweak[posSmallestDigit])
         {
            found = true;
            char temp = numToTweak[posSmallestDigit];
            numToTweak[posSmallestDigit] = numToTweak[posLargerThanSmallest];
            numToTweak[posLargerThanSmallest] = temp;
         }
         else
            posLargerThanSmallest++;
      }
   }
   return numToTweak;
}

char* TweakHigher(char* numToTweak)
{
   // Starting from the first nonzero digit to the right of position
   // zero, scans each digit of numToTweak from left to right until
   // a digit is larger than one of the numbers already scanned or in
   // position zero.
   int posNonZeroStart = 1;
   bool found = false;
   while ((posNonZeroStart < strlen(numToTweak)) && !found)
   {
      if (numToTweak[posNonZeroStart] == '0')
         posNonZeroStart++;
      else
         found = true;
   }
   if (!found)
      return numToTweak;

   int posLargerDigit = posNonZeroStart;
   found = false;
   while ((posLargerDigit < strlen(numToTweak)) && !found)
   {
      if (numToTweak[posLargerDigit] > numToTweak[0])
         found = true;
      int scanner = posNonZeroStart;
      while ((scanner < posLargerDigit) && !found)
      {
         if (numToTweak[posLargerDigit] > numToTweak[scanner])
            found = true;
         else
            scanner++;
      }
      if (!found)
         posLargerDigit++;
   }
   if (!found)
      return numToTweak;

   // Starting from the position of the last digit of numToTweak,
   // scans from right to left for the largest digit of the
   // remaining numbers of numToTweak.
   int posLargestDigit = strlen(numToTweak) - 1;
   for (int i = posLargestDigit - 1; i >= posLargerDigit; i--)
   {
      if (numToTweak[i] > numToTweak[posLargestDigit])
         posLargestDigit = i;
   }

   // Starting from position zero, scans from left to right
   // until a number smaller than the largest digit is found. That
   // number will then be swapped with the position of the largest
   // digit.
   int posSmallerThanLargest = 0;
   found = false;
   while ((posSmallerThanLargest < strlen(numToTweak)) && !found)
   {
      if (numToTweak[posSmallerThanLargest] < numToTweak[posLargestDigit])
      {
         found = true;
         char temp = numToTweak[posLargestDigit];
         numToTweak[posLargestDigit] = numToTweak[posSmallerThanLargest];
         numToTweak[posSmallerThanLargest] = temp;
      }
      else
         posSmallerThanLargest++;
   }
   return numToTweak;
}

void main()
{
   int numInts = 0;
   char * numToTweak = 0;

   cin >> numInts;

   // Loop to tweak each input
   for (int i = 1; i <= numInts; i++)
   {
      // Get the input and put it into a char array
      char tempInput[MAX_NUM_DIGITS];
      cin >> tempInput;

      numToTweak = new char[strlen(tempInput) + 1];
      strcpy(numToTweak, tempInput);

      cout << "Case #" << i << ": ";
      cout << TweakLower(numToTweak) << " ";

      // Reinitialize numToTweak because TweakLower changes it.
      delete numToTweak;
      numToTweak = new char[strlen(tempInput) + 1];
      strcpy(numToTweak, tempInput);

      cout << TweakHigher(numToTweak) << endl;

      // Deallocate memory
      delete numToTweak;
   }
}
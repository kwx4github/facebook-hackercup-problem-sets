#include <iostream>
#include <string>

using namespace std;

void swap (string &str, int i, int j) {
	str[i] = str[i] ^ str[j];
	str[j] = str[i] ^ str[j];
	str[i] = str[i] ^ str[j];
}

int has_greater (char counts[], int ind) {
	for (int i = 9; i > ind; i--) {
		if (counts[i] > 0) {
			return i;
		}
	}
	return -1;
}

int has_smaller (char counts[], int ind, bool zero_allowed) {
	int begin = zero_allowed ? 0 : 1;

	for (int i = begin; i < ind; i++) {
		if (counts[i] > 0) {
			return i;
		}
	}
	return -1;
}

bool check_done (int max_swap, int min_swap) {
	if (max_swap != -1 && min_swap != -1) {
		return true;
	}
	return false;
}

void solve (string &str) {
	int min_ind = 0, min_swap = 0, max_ind = 0, max_swap = 0;

	char counts[10] = {0};
	int len, index;

	len = str.size();
	for (int i = 0; i < len; i++) {
		index = str[i] - '0';
		counts[index]++;
	}

	index = str[0] - '0';
	max_swap = has_greater(counts, index);
	min_swap = has_smaller(counts, index, false);
	counts[index]--;

	for (int i = 1; i < len; i++) {
		index = str[i] - '0';
		counts[index]--;

		if (check_done(max_swap, min_swap)) {
			break;
		}

		if (max_swap == -1) {
			max_swap = has_greater(counts, index);
			max_ind = i;
		}

		if (min_swap == -1) {
			min_swap = has_smaller(counts, index, true);
			min_ind = i;
		}
	}

	if (min_swap != -1) {
		min_swap = str.find_last_of(min_swap + '0');
		swap (str, min_ind, min_swap);
		cout << str << " ";
		swap (str, min_ind, min_swap);
	} else {
		cout << str << " ";
	}

	if (max_swap != -1) {
		max_swap = str.find_last_of(max_swap + '0');
		swap (str, max_ind, max_swap);
	}
	cout << str << endl;
}

int main () {
	string str;
	int T;

	cin >> T;
	for (int i = 0; i < T; i++) {
		cin >> str;
		cout << "Case #" << (i + 1) << ": ";
		solve(str);
	}
	return 0;
}
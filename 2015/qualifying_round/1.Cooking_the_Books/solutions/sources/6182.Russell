package competitionScaffold;

import java.io.*;

public class Driver {
	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException
	{
		// File input example: https://www.caveofprogramming.com/java/java-file-reading-and-writing-files-in-java.html
		String fileName = "/Users/russellmaxfield/Documents/school/codeingComp/cooking_the_books_input.txt";
		PrintWriter writer = new PrintWriter("/Users/russellmaxfield/Documents/school/codeingComp/cooking_the_books_output.txt", "UTF-8");
		
		try {
            FileReader fileReader = 
                new FileReader(fileName);

            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);
            
            int lineCount = Integer.parseInt(bufferedReader.readLine());

            for (int i = 1; i <= lineCount; i++) {
            	String answer = strategy(bufferedReader.readLine());
            	System.out.println("Case #" + i + ": " + answer);
            	writer.println("Case #" + i + ": " + answer);
            }    
            writer.close();
            bufferedReader.close();            
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + fileName + "'");                   
        }
	}
	
	// Is going to accept a single number string
	public static String strategy (String string) {
			String highest = createHighest(string);
			
			String lowest = createLowest(string, '1');
			
			return lowest + ' ' + highest;
		
	}
	
	private static String createLowest(String string, char min) {
		//Will use the same sort of algorithm as highest but finding min
		//We pass in a min value becuase the main string cannot start with 0
		//if string is only one digit just return it (Base Case)
		if (string.length() == 1) 
			return string;
		
		//Break string into Char array:
		char[] charString = string.toCharArray();
		
		//Find lowest right number:
		char lowestRightNumber = '9';
		int lowestRightPosition = 0;
		
		for (int pos = 0; pos < charString.length; pos++){
		    char current = charString[pos];
		    if (current >= min) {
			    if (current <= lowestRightNumber) {
			    	lowestRightNumber = current;
			    	lowestRightPosition = pos;
			    }
		    }
		}
		
		//If lowest number position is the first position, repeat without pos 0 and return
		if (lowestRightPosition == 0 || lowestRightNumber == charString[0]) {
			StringBuilder tempString = new StringBuilder(charString.length-1);
			for (int i = 1; i < charString.length; i++) {
				tempString.append(charString[i]);
			}
			String newString = tempString.toString();
			String result = createLowest(newString, '0');
			
			return (charString[0] + result);
		}
		
		//If we get this far it means that we can swap the highestRightNumber with
		//The farthest left without swapping the same number.
		
		//find farthest left position to swap with without swapping same number
		for (int k = 0; k < charString.length; k++) {
			if (charString[k] != lowestRightNumber) {
				//Swap the two:
				charString[lowestRightPosition] = charString[k];
				charString[k] = lowestRightNumber;
				break;
			}
		}
		
		//Convert the char array to string and return it:
		return makeString(charString);
		
	}

	public static String createHighest (String string) {
		//if string is only one digit just return it (Base Case)
		if (string.length() == 1) 
			return string;
		
		//Break string into Char array:
		char[] charString = string.toCharArray();
		
		//Find highest right number:
		char highestRightNumber = '0';
		int highestRightPosition = 0;
		
		for (int pos = 0; pos < charString.length; pos++){
		    char current = charString[pos];
		    if (current != '0') {
			    if (current >= highestRightNumber && current != '0') {
			    	highestRightNumber = current;
			    	highestRightPosition = pos;
			    }
		    }
		}
				
		//If highest number is 0 return string - means the string is all 0's
		if (highestRightNumber == '0')
			return string;
		
		//If highest number position is the first position, repeat without pos 0 and return
		if (highestRightPosition == 0 || highestRightNumber == charString[0]) {
			StringBuilder tempString = new StringBuilder(charString.length-1);
			for (int i = 1; i < charString.length; i++) {
				tempString.append(charString[i]);
			}
			String newString = tempString.toString();
			String result = createHighest(newString);
			
			return (charString[0] + result);
		}
		
		//If we get this far it means that we can swap the highestRightNumber with
		//The farthest left without swapping the same number.
		
		//find farthest left position to swap with without swapping same number
		for (int k = 0; k < charString.length; k++) {
			if (charString[k] != highestRightNumber) {
				//Swap the two:
				charString[highestRightPosition] = charString[k];
				charString[k] = highestRightNumber;
				break;
			}
		}
		
		//Convert the char array to string and return it:
		return makeString(charString);
	}
	
	public static String makeString (char[] arry) {
		StringBuilder tempString = new StringBuilder(arry.length-1);
		for (int i = 0; i < arry.length; i++) {
			tempString.append(arry[i]);
		}
		String newString = tempString.toString();
		return newString;
	}
}

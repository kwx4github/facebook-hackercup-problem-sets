#include <iostream>
#include <cmath>
#include <string>
#include <cstring>
#include <sstream>
#include <algorithm>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <fstream>
#include <climits>

using namespace std;

int main(int argc, char* argv[])
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w+", stdout);

	int T;
	cin >> T;

	for(int c = 1; c <= T; ++c)
	{
		string line;
		cin >> line;

		string min = line;
		string max = line;

		int mmin = INT_MAX;
		for(int j = 0; j < line.size() - 1; ++j)
		{
			mmin = int(line[j] - '0');
			bool f = false;
			for(int i = line.size() - 1; i > j; --i)
			{
				if(j == 0)
				{
					if(int(line[i] - '0') != 0 && int(line[i]-'0') < mmin)
					{
						min = line;
						mmin =  int(line[i]-'0');
						string res = line;
						res[i] = line[j];
						res[j] = line[i];
						min = res;
						f = true;
					}
				}
				else
				{
					if(int(line[i]-'0') < mmin)
					{
						min = line;
						mmin =  int(line[i]-'0');
						string res = line;
						res[i] = line[j];
						res[j] = line[i];
						min = res;
						f = true;
					}
				}
			}
			if(f)
				break;
		}

		int mmax = INT_MIN;
		for(int j = 0; j < line.size() - 1; ++j)
		{
			mmax = int(line[j] - '0');
			bool f = false;
			for(int i = line.size() - 1; i > j; --i)
			{
				if(j == 0)
				{
					if(int(line[i] - '0') != 0 && int(line[i]-'0') > mmax)
					{
						max = line;
						mmax = int(line[i]-'0');
						string res = line;
						res[i] = line[j];
						res[j] = line[i];
						max = res;
						f = true;
					}
				}
				else
				{
					if(int(line[i]-'0') >= mmax)
					{
						max = line;
						mmax = int(line[i]-'0');
						string res = line;
						res[i] = line[j];
						res[j] = line[i];
						max = res;
						f = true;
					}
				}
			}
			if(f)
				break;
		}

		cout << "Case #" << c << ": " << min << " " << max << endl;
	}
	return 0;
}
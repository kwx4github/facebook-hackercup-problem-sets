#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int return_digit(long n, int q)
{
	int i, digit;
	for(i = 1; i <= q; i++)
	{
		digit = n%10;
		n = n/10;
	}
	return (digit);
}

long swap_digits(long n, int to_remove, int to_place, int count)
{
	long m = 0;
	int p, q;
	for(p = 1; p <= count; p++)
	{
		q = p;
		if(p == to_place)
			q = to_remove;
		else if(p == to_remove)
			q = to_place;
		m = m + (return_digit(n, q)*(long)pow((double)10, (double)p-1));
	}
	return m;
}

int main()
{
	long N, N1, N2, max_number, min_number;
	int T, i, j, d1, d, d2, count=0, max_found = 0, min_found = 0, zero_exist = 0, count2, max, min, remove_max, count_max, count_min, remove_min;
	scanf("%d", &T);
    long *number, *minimum, *maximum;
	number = (long *)calloc(T, sizeof(long));
	minimum = (long *)calloc(T, sizeof(long));
	maximum = (long *)calloc(T, sizeof(long));
    for(j = 0; j < T; j++)
	{
		count_max = count_min = 0;
		remove_max = remove_min = 0;
		scanf("%ld", &N);
		number[j] = N;
		N1 = N;
		count = 0;
		min_found = 0;
		max_found = 0;
		zero_exist = 0;
		while(N1 != 0)           // Calculation of number of digits
		{
			d1 = N1 % 10;
			count++;
			N1 = N1/10;
		}
		max = min = d1;
		d = d1;
		count2 = count;
		N1 = N2 = N;
		// Preparation for maximum
		do
		{
			for(i = 1; i < count2; i++)
			{
				d2 = N1%10;
				N1 = N1/10;
				if(d2 == 0)
					zero_exist = 1;
				else
				{
					if(d2 > max)
					{
						max = d2;
						remove_max = count2;
						count_max = i;
						max_found = 1;
					}
				}
			}
			if(max == d)
			{
				N2 = N2 - d * (long)pow((double)10, (double)(count2 - 1));
				N1 = N2;
				d = return_digit(N, count2 - 1);
				max = d;
				count2--;
			}
		}while((max_found == 0) && (N1 != 0));
		// Preparation for minimum
		N1 = N2 = N;
		count2 = count;
		d = d1;
		do
		{
			for(i = 1; i < count2; i++)
			{
				d2 = N1 % 10;
				N1 = N1 / 10;
				if(d2 == 0 && count2 < count)
				{
					zero_exist = 1; 
					min = 0;
					count_min = i;
					min_found =1;
					remove_min = count2;
				}
				if(d2 == 0)
					zero_exist = 1;
				else
				{
					if(d2 < min)
					{
						min = d2;
						count_min = i;
						min_found = 1;
						remove_min = count2;
					}
				}
			}
			if(min == d)
			{
				N2 = N2 - d * (long)pow((double)10,(double)(count2 - 1));
				N1 = N2;
				d = return_digit(N, count2 - 1);
				count2--;
				min = d;
			} 
		}while((min_found == 0) && (N1 != 0));
		max_number = swap_digits(N, remove_max, count_max, count);
		min_number = swap_digits(N, remove_min, count_min, count);
		minimum[j] = min_number;
		maximum[j] = max_number;
	}
	printf("Case #1: %ld %ld", minimum[0], maximum[0]);
	for(i = 1; i < T; i++)
	{
       printf("\nCase #%d: %ld %ld",(i + 1), minimum[i], maximum[i]);
	}

	return 0;
}
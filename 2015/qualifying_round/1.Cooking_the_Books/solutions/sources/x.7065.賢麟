#include <stdlib.h>
#include <stdio.h>
#include <string.h>


#define MAX_MEM_SIZE 1*1024*1024*1024
char buffer[MAX_MEM_SIZE];
char* residue;

char smallest[10];
char largest[10];
int case_num=0;

void swaped_number(char* unswap_number,int max_pos,int min_pos){
    int i;
    memcpy(largest,unswap_number,10);
    for(i=0 ; unswap_number[i]==unswap_number[max_pos] && i != max_pos ; i++);
    largest[i]=unswap_number[max_pos];
    largest[max_pos]=unswap_number[i];
    
    memcpy(smallest,unswap_number,10);
    if(unswap_number[min_pos]=='0'){i=1;}else{i=0;}
    for( ; unswap_number[i]==unswap_number[min_pos] && i != min_pos ; i++);
    smallest[i]=unswap_number[min_pos];
    smallest[min_pos]=unswap_number[i];
    if(case_num!=0){
        printf("Case #%d: %d %d\n",case_num,atoi(smallest),atoi(largest));}
    case_num++;
}


void find_max_min(char* number){
    int i,j;
    int max_pos[10],min_pos[10];
    int max,min;
    memset(smallest,0,sizeof(smallest));
    memset(largest,0,sizeof(largest));
    max=0;min=9;
    for( i=0; number[i]!='\n' && i<10 ;++i ){
        //printf("%c",number[i]);
        if((int)number[i]-'0'>=max){
            max=(int)number[i]-'0';
            //printf("%d\t",number[i]);
            memset(max_pos,-1,sizeof(max_pos));
            max_pos[0]=i;
        }
        //else if(((int)number[i]-'0')==max){
        //
        //    for(j=0;max_pos[j]>0;j++);
        //    max_pos[j]=i;
        //}
        //printf("%c",number[i]);
        //printf("%d",min);
        if((int)number[i]-'0'<=min){
            min=(int)number[i]-'0';
            //printf("%d\t",number[i]);
            memset(min_pos,-1,sizeof(min_pos));
            min_pos[0]=i;
        }
        //else if(((int)number[i]-'0')==min){
        //    for(j=0;min_pos[j]>0;j++);
        //    min_pos[j]=i;
        //}
        //printf("%d",min);
        //printf("%c",number[i]);
    }
    swaped_number(number,max_pos[0],min_pos[0]);
    
    
//    printf("max : %d\n", max);
//    for(i=0;max_pos[i]>-1;++i){
//        printf("%d\t",max_pos[i]);
//    }
//    printf("\n");
//    printf("min : %d\n",min);
//    for(i=0;min_pos[i]>-1;++i){
//        printf("%d\t",min_pos[i]);
//    }
//    printf("\n");
    
}

void processing_buffer(){
    long i;
    long previous=-1;
    long end;
    char temp[10];
    for(i=0;buffer[i]!=0;++i){
        //printf("%c %ld ",buffer[i],i);
        //printf("%d",(int)buffer[i]);
        if(buffer[i] == '\n'){
            end = i ;
            //temp = realloc(temp,(end-previous));
            memcpy(temp,buffer+previous+1,(end-previous));
            //printf("%s",temp);
            find_max_min(temp);
            previous=end;
            memset(temp,0,sizeof(temp));
        }
    }
    printf("%d",(int)buffer[i]);
}

int main(int argc, char** argv ){
    FILE * input;
    long size;
    long size_to_read;
    if(argc > 1){
        input = fopen (argv[1],"r");
    }
    
    if(input != NULL){
        fseek(input,0L,SEEK_END);
        size = ftell(input);
        //printf("my size is %ld\n",size);
        fseek(input,0,SEEK_SET);
        while(size > 0){
            if(size < (long)MAX_MEM_SIZE){
                size_to_read= size;
            }else{size_to_read=MAX_MEM_SIZE;}
            memset(buffer,0,sizeof(buffer));
            fread(buffer,size_to_read,1,input);
            //printf("what i read : %s\n",buffer);
            processing_buffer();
            size-=size_to_read;
        }
    }
    return 0;

}
import java.io.OutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Numbers solver = new Numbers();
		solver.solve(1, in, out);
		out.close();
	}
}

class Numbers {

    private String getSmallest(String s) {
        char[] c= s.toCharArray();
        int min = Integer.parseInt(s);
        for(int i=0;i<c.length;i++) {
            for(int j=i+1;j<c.length;j++) {
                if(c[j]=='0' && i==0)continue;
                char buf = c[i];
                c[i] = c[j];
                c[j] = buf;
                String s1 =  new String(c);
                if(Integer.parseInt(s1)<min)
                    min = Integer.parseInt(s1);
                 buf = c[i];
                c[i] = c[j];
                c[j] = buf;
            }
        }
        return Integer.toString(min);
    }

    private String getLargest(String s) {
        char[] c= s.toCharArray();
        int max = Integer.parseInt(s);
        for(int i=0;i<c.length;i++) {
            for(int j=i+1;j<c.length;j++) {
                if(c[j]=='0' && i==0)continue;
                char buf = c[i];
                c[i] = c[j];
                c[j] = buf;
                String s1 =  new String(c);
                if(Integer.parseInt(s1)>max)
                    max = Integer.parseInt(s1);
                buf = c[i];
                c[i] = c[j];
                c[j] = buf;
            }
        }
        return Integer.toString(max);
    }
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int n = in.nextInt();
        for(int i=0;i<n;i++) {
            String s = in.nextToken();
            out.println("Case #"+(i+1)+": "+getSmallest(s) + " "+ getLargest(s));
        }
    }
}

class InputReader {

    private InputStream stream;
    int curCharIndex = 0;
    int charsInBuf = 0;
     byte buf[] = new byte[16*1024];

    public InputReader(InputStream stream) {
        this.stream = stream;
    }


    public int readChar() {

        if (curCharIndex >= charsInBuf) {
            curCharIndex = 0;
            try {
                charsInBuf = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (charsInBuf <= 0)
                return -1;
        }
        return buf[curCharIndex++];
    }


    public int nextInt() {

        int c;
        do {
            c = readChar();
        }while(isWhitespace(c));

        int sign = 1;
        if (c == '-') {
            c = readChar();
            sign = -1;

        }
        int res = 0;
        do {
            res *= 10;
            res += c - '0';
            c = readChar();
        } while (!isWhitespace(c) && c!=-1);
        return sign * res;
    }


    public String nextToken() {
        int c;
        do {
            c = readChar();
        }while(isWhitespace(c));

        StringBuilder res = new StringBuilder();
        do {
            res.appendCodePoint(c);
            c = readChar();
        } while (!isWhitespace(c) && c!=-1);
        return res.toString();
    }

    /*
    * For the purpose of compatibilty with Chelper Chrome extension
     */


    private boolean isWhitespace(int c) {
        return  c==' ' || c=='\n'|| c=='\r' || c=='\t';
    }
}


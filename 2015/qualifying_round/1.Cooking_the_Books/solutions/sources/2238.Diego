import itertools

def number_of_missplaced_digits_between(number_1, number_2):
    count = 0
    for d1, d2 in zip(number_1, number_2):
        if d1 != d2:
            count += 1
    return count

def is_valid_permutation(p):
    return not p.startswith('0') and number_of_missplaced_digits_between(number, p) <= 2

def sorted_permutations(number):
    if len(number) == 1:
        return number
    permutations = sorted([''.join(p) for p in itertools.permutations(number)], key=int)
    valid_permutations = [p for p in permutations if is_valid_permutation(p)]
    return valid_permutations

def transformations_of(number):
    permutations = sorted_permutations(number)
    smallest = permutations[0]
    largest = permutations[-1]
    return smallest, largest

T = int(input())
for t in range(1, T + 1):
    number = str(input())
    smallest, largest = transformations_of(number)
    print 'Case #{}: {} {}'.format(t, smallest, largest)
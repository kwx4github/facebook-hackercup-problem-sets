package facebook_01;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;


public class Main {
	private static int smallestArray[] = new int[9];
	private static int highestArray[] = new int[9];
	private static int size = 0;
	
	public static int findSmallest(int startPosition) {
		int position = startPosition;
		int smallest = smallestArray[startPosition];
		for (int i = startPosition; i < size; i++) {
			if (smallestArray[i] <= smallest && (smallestArray[i] != 0 || startPosition != 0)) {
				smallest = smallestArray[i];
				position = i;
			}
		}
		return position;
	}
	
	public static int findHighest(int startPosition) {
		int position = startPosition;
		int highest = highestArray[startPosition];
		for (int i = startPosition; i < size; i++) {
			if (highestArray[i] >= highest && highestArray[i] != 0) {
				highest = highestArray[i];
				position = i;
			}
		}
		return position;
	}
	
	public static void swapSmallest() {
		int position;
		for (int i = 0; i < size; i++) {
			position = findSmallest(i);
			if (position != i) {
				int temp = smallestArray[i];
				smallestArray[i] = smallestArray[position];
				smallestArray[position] = temp;
				break;
			}
		}
	}
	
	public static void swapHighest() {
		int position;
		for (int i = 0; i < size; i++) {
			position = findHighest(i);
			if (position != i) {
				int temp = highestArray[i];
				highestArray[i] = highestArray[position];
				highestArray[position] = temp;
				break;
			}
		}
	}
	
	public static void printArray(int caseNumber) {
		System.out.print("Case #" + caseNumber + ": ");
		for (int i = 0; i < size; i++) {
			System.out.print(smallestArray[i]);
		}
		System.out.print(" ");
		for (int i = 0; i < size; i++) {
			System.out.print(highestArray[i]);
		}
		System.out.println("");
	}
	
	public static void main(String[] args) throws IOException {
		File file = new File("/home/honza/Desktop/cooking_the_books.txt");
		InputStream in = new FileInputStream(file);
		Reader reader = new InputStreamReader(in);
        Reader buffer = new BufferedReader(reader);
        
        int c = 0;
        while(c != '\n') {
        	c = reader.read();
        }
        
        int caseNumber = 1;
        while((c = reader.read()) != -1) {
        	char character = (char) c;
        	if (character == '\n') {
        		swapSmallest();
        		swapHighest();
        		printArray(caseNumber++);
        		size = 0;
        	}
        	else {
        		smallestArray[size] = character - '0';
        		highestArray[size++] = character - '0';
        	}
    	}
	}
}

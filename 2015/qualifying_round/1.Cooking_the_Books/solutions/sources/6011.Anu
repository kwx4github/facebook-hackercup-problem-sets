#include<cstdio>
#include<cmath>
#include<ctime>
#include<cstring>
#include<cstdlib>
#include<climits>
#include<cfloat>
#include<cassert>
#include<cctype>
#include<iostream>
#include<vector>
#include<list>
#include<queue>
#include<set>
#include<map>
#include<string>
#include<sstream>
#include<algorithm>
#include<complex>
#include<bitset>

#define db(x) cerr<<#x<<" = "<<(x)<<endl
#define FOR(i,a,b) for(int i=int(a);i<int(b);i++)
#define RFOR(i,a,b) for(int i=int(a);i<int(b);i--)
#define CLR(a) memset((a),0,sizeof(a))
#define VAR(a,b) __typeof(b) a=(b)
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();it++)
#define RFOREACH(it,c) for(VAR(it,(c).rbegin());it!=(c).rend();it++)
#define SQ(x) ((x)*(x))
#define DIV(n,k) ((n)%(k)==0)
#define X real()
#define Y imag()

using namespace std;
typedef complex<double> point;
typedef long long ll;
typedef unsigned long long ull;
const double eps = 1e-8;

/*----------CODE STARTS----------*/
int t,tt,n,m,a,b;

#define L 20
char s[L], small[L], large[L];

int main(){
  cin >> n;
  FOR(i,0,n){
    cin >> s;
    int l = strlen(s);
    strcpy(small, s);
    strcpy(large, s);

    bool smallDone = false, largeDone= false;
    int smallest = -1, largest = -1;
    FOR(offset,0,l){
      char smallVal = s[offset], largeVal = s[offset];
      for(int index = l-1; index > offset; index--){
        char v = s[index];
        if(offset == 0 && v == '0')
          continue;
        if(v < smallVal){
          smallVal = v;
          smallest = index;
        }
        if(v > largeVal){
          largeVal = v;
          largest = index;
        }
      }
      if(!smallDone && smallest >= 0){
        swap(small[offset], small[smallest]);
        smallDone = true;
      }
      if(!largeDone && largest >= 0){
        swap(large[offset], large[largest]);
        largeDone = true;
      }
    }

    printf("Case #%d: %s %s\n", i+1, small, large);
  }

  return 0;
}

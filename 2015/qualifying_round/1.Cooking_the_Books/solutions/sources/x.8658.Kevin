#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <algorithm>

using namespace std;

vector<string> ReadFrom(string filename);
int WriteTo(string filename, string data);
int WriteOutput(vector<int> result);
vector<int> ParseInt(string data);
vector<int> GetData();
vector<int> GetDigitsFromInt(int n);
void PrintVectorInt(vector<int> & vec);

int main() {

	vector<int> input = GetData();

	//printf("Test input: \n");
	//PrintVectorInt(input);
	//printf("\n");

	if (input.size() < 2) {
		printf("ERROR: Invalid input.\n");
		getchar();
		return  -1;
	}

	vector<int> digits = GetDigitsFromInt(input[1]);

	//printf("Test digits: \n");
	//PrintVectorInt(digits);
	//printf("\n");

	//getchar();

	vector<int> result = vector<int>();
	for (vector<int>::const_iterator it = input.begin() + 1; it != input.end(); ++it) {
		vector<int> tmp = GetDigitsFromInt((*it));

		int maxVal = 0, maxPos = 0, minVal = 9, minPos = 0;
		for (unsigned int i = 0; i < tmp.size(); i++) {
			if (tmp[i] >= maxVal && tmp[i] > 0) {
				maxPos = i;
				maxVal = tmp[i];
			} 

			if (tmp[i] <= minVal && tmp[i] > 0) {
				minPos = i; 
				minVal = tmp[i];
			}
		}

		vector<int> minVec = tmp;
		vector<int> maxVec = tmp;

		iter_swap(minVec.begin(), minVec.begin() + minPos);
		iter_swap(maxVec.begin(), maxVec.begin() + maxPos);

		int numMin = 0, numMax = 0;
		for (unsigned int i = 0; i < minVec.size(); i++) {
			numMin = numMin + minVec[i] * pow(10, minVec.size() - 1 - i);
		}

		for (unsigned int i = 0; i < minVec.size(); i++) {
			numMax = numMax + maxVec[i] * pow(10, maxVec.size() - 1 - i);
		}

		//cout << "Max: " << numMax << " Min: " << numMin << endl;

		result.push_back(numMin); result.push_back(numMax);

	}

	WriteOutput(result);
	
	//getchar();

	return 0;
}


vector<string> ReadFrom(string filename) {

	ifstream myfile;
	myfile.open(filename.c_str());
	vector<string> result = vector<string>();

	if (myfile) {
		string line;
		while (getline(myfile, line)) {
			result.push_back(line);
		}
		myfile.close();
	}

	return result;
}

vector<int> ParseInt(string data) {

	vector<int> result = vector<int>();
	stringstream ss(data);
	int i = 0;
	while (ss >> i) {
		result.push_back(i);

		if (ss.peek() == ',' || ss.peek() == ' ') {
			ss.ignore();
		}
	}

	return result;

}

vector<int> GetData() {

	string filename = "cooking_the_books.txt";

	vector<string> raw = ReadFrom(filename);

	vector<int> input = vector<int>();
	for (vector<string>::const_iterator it = raw.begin(); it != raw.end(); ++it) {
		vector<int> tmp = ParseInt((*it));
		for (vector<int>::const_iterator it = tmp.begin(); it != tmp.end(); ++it) {
			input.push_back((*it));
		}
	}

	return input;

}

vector<int> GetDigitsFromInt(int n) {
	vector<int> digits = vector<int>();

	while (n > 9) {
		digits.push_back(n % 10);
		n = n / 10;
	}
	digits.push_back(n);
	reverse(digits.begin(), digits.end());

	return digits;
}

void PrintVectorInt(vector<int> & vec) {
	for (vector<int>::const_iterator it = vec.begin(); it != vec.end(); ++it) {
		printf("%d\n", (*it));
	}
}

int WriteTo(string filename, string data) {
	ofstream myfile;
	myfile.open(filename);

	if (myfile) {
		myfile << data;
		myfile.close();
		return 0;
	}

	return -1;
}

int WriteOutput(vector<int> result) {

	string filename = "output.txt";

	stringstream ss;
	
	int count = 1;
	for (unsigned int i = 0; i < result.size(); i++) {
		ss << "Case #" << count << ": " << result[i] << " " << result[i + 1] << endl;
		i++; count++;
	}

	WriteTo(filename, ss.str());

	return 0;
}
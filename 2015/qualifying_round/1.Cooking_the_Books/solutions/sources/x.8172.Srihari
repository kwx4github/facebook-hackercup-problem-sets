package com.example;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

public class CookingTheBooks {
    int n;
    List<String> numbers;

    void readFile(String file) {
        try {
            Path inputPath = Paths.get("/Users/sriharimurali25/fbhack2015/", file);
            List<String> input = Files.readAllLines(inputPath, StandardCharsets.US_ASCII);
            n = Integer.parseInt(input.get(0));
            numbers = input.subList(1, n + 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        CookingTheBooks m = new CookingTheBooks();
        m.readFile("cooking_the_books.txt");
        System.out.println("n = " + m.n + "; numbers: " + m.numbers);
        m.printMinMaxFoNumbers();
        m.findMin("10", new StringBuffer("10"));
    }

    private void printMinMaxFoNumbers() {
        int line = 0;
        for (String num : numbers) {
            System.out.println(findMinAndMax(++line, num));
        }
    }

    public String findMinAndMax(int line, final String num) {
        StringBuffer min = new StringBuffer(num);
        StringBuffer max = new StringBuffer(num);

        if (num.length() == 1) {
            return formatOutput(line, min, max);
        }

        findMin(num, min);
        findMax(num, max);
        return formatOutput(line, min, max);
    }

    private void findMin(String num, StringBuffer min) {
        for (int i = 0; i < num.length() - 1; i++) {
            int f = Integer.parseInt(num.charAt(i) + "");

            // Find smaller than f
            int smallerThanF = f;
            int pos = i;
            for (int j = i+1; j < num.length(); j++) {
                int cand = Integer.parseInt(num.charAt(j) + "");
                if (i == 0 && cand == 0) {
                    // We can't swap '0' onto the first position
                    continue;
                }
                if (cand < smallerThanF) {
                    smallerThanF = cand;
                    pos = j;
                }
            }


            if (smallerThanF != i) {
                swap(min, i, pos);
                return;
            }
        }
    }

    private void findMax(String num, StringBuffer max) {
        for (int i = 0; i < num.length() - 1; i++) {
            int f = Integer.parseInt(num.charAt(i) + "");

            // Find larger than f
            int largerThanF = f;
            int pos = i;
            for (int j = i+1; j < num.length(); j++) {
                int cand = Integer.parseInt(num.charAt(j) + "");
                if (cand > largerThanF) {
                    largerThanF = cand;
                    pos = j;
                }
            }
            if (largerThanF != i) {
                swap(max, i, pos);
                return;
            }
        }
    }

    private void swap(StringBuffer buf, int i, int j) {
        char charAtI = buf.charAt(i);
        buf.setCharAt(i, buf.charAt(j));
        buf.setCharAt(j, charAtI);
    }

    private String formatOutput(int line, StringBuffer min, StringBuffer max) {
        return "Case #" + line + ": " + min + " " + max;
    }

}

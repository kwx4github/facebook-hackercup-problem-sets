package live;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {
	
	public static void main(String[] args) {
		
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks problem = new CookingTheBooks();
		int testcase = Integer.parseInt(in.scanInput());
		for (int i = 1; i <= testcase; i++) {
			problem.solve(i, in, out);
		}
		
		out.close();
		
	}

}

class CookingTheBooks {
	
	public void solve(int testcase, InputReader in, PrintWriter out) {
		String text = in.scanInput();
		char min[] = text.toCharArray();
		char max[] = text.toCharArray();
		int index = 0;
		char temp = '\0';
		
		// Minimum
		temp = min[0];
		for (int i = 1; i < min.length; i++) {
			if (temp > min[i] && min[i] != '0') {
				index = i;
				temp = min[i];
			}
		}
		if (temp == min[0] && min.length > 1) {
			temp = min[1];
			index = 1;
			for (int i = 2; i < min.length; i++) {
				if (temp > min[i]) {
					index = i;
					temp = min[i];
				}
			}
			min[index] = min[1];
			min[1] = temp;
		} else {
			min[index] = min[0];
			min[0] = temp;
		}
		
		// Maximum
		temp = max[0];
		index = 0;
		for (int i = max.length - 1; i > 0; i--) {
			if (temp < max[i]) {
				index = i;
				temp = max[i];
			}
		}
		max[index] = max[0];
		max[0] = temp;
		
		out.println("Case #" + testcase + ": " + String.valueOf(min) + " " + String.valueOf(max));
		
		
	}
	
}

class InputReader {
	
	private BufferedReader mReader;
	private  StringTokenizer mTokenizer;
	
	public InputReader(InputStream inputStream) {
		mReader = new BufferedReader(new InputStreamReader(inputStream));
		mTokenizer = null;
	}
	
	public String scanInput() {
		while (mTokenizer == null || !mTokenizer.hasMoreTokens()) {
			try {
				mTokenizer = new StringTokenizer(mReader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return mTokenizer.nextToken();
	}
	
}

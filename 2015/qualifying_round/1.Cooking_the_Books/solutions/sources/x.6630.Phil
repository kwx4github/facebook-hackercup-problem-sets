//  cooking.cpp
//  FacebookHackerCup
//
//  Created by Phillip Hunt on 1/10/15.
//  Copyright (c) 2015 Phillip Hunt. All rights reserved.

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <algorithm>

std::string fudgeMe(std::string);

int main ()
{
    std::string line;
    std::string toOut;
    int todo = 0;
    
    std::ifstream inputFile;
    inputFile.open ("input.txt");
    
    std::ofstream outputFile;
    outputFile.open("output.txt");

    getline(inputFile, line);
    todo = atoi(line.c_str());
    
    for(int i = 1; i <= todo; i++)
    {
        getline(inputFile, line);
        toOut = "Case #" + std::to_string(i) + ": " + fudgeMe(line) + "\n";
        outputFile << toOut;
    }
    
    inputFile.close();
    outputFile.close();
    
    return 0;
}

std::string fudgeMe(std::string value)
{
    std::string smallest = value;
    std::string largest = value;
    
    if((value != "0") && (value.length() != 1))
    {
        int minVal = value[0];
        int maxVal = value[0];

        for(int i = 0; i < value.length()-1; i++)
        {
            if((minVal > std::min(value[i], value[i+1])) && (std::min(value[i], value[i+1]) != '0'))
            {
                minVal = std::min(value[i], value[i+1]);
            }
            
            if(maxVal < std::max(value[i], value[i+1]))
            {
                maxVal = std::max(value[i], value[i+1]);
            }
        }
        
        std::swap(smallest[0], smallest[smallest.find_last_of(minVal)]);
        std::swap(largest[0], largest[largest.find_last_of(maxVal)]);
    }
    
    return smallest + " " + largest;
};
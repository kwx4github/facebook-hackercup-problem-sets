import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Created by sergiysi on 1/9/2015.
 */
public class ProblemA {

    private long mults[] = {1l, 10l, 100l, 1000l, 10_000l, 100_000l, 1000_000l, 10_000_000l, 1000_000_000l, 10_000_000_000l};

    private int getLenghtOfNumber(long number) {
        int res = 0;
        for (; number > 0; number /= 10, res++) ;
        return res;
    }

    private int getDigit(int index, long number) {
        return (int) (number / mults[index] % 10);
    }


    private long setDigitForNumber(int digitIndex, int digitValue, long number) {
        long buffer = 0;
        long multiplay = 1;
        int curIndex = 0;
        while (curIndex <= digitIndex) {
            if (curIndex < digitIndex)
                buffer = buffer + (number % 10) * mults[curIndex];
            number /= 10;
            curIndex++;
            multiplay *= 10;
        }
        return (number * 10 + digitValue) * (multiplay / 10) + buffer;

    }

    private long swapDigitsForNumber(int firstIndex, int secnondIndex, long number) {
        int fDigit = getDigit(firstIndex, number);
        int sDigit = getDigit(secnondIndex, number);
        number = setDigitForNumber(firstIndex, sDigit, number);
        number = setDigitForNumber(secnondIndex, fDigit, number);
        return number;
    }


    public String solve(long number) {
        long minNumber = number;
        long maxNumber = number;
        int lenght = getLenghtOfNumber(number);
        for (int i = 0; i < lenght; i++) {
            for (int j = i + 1; j < lenght; j++) {
                if (j == lenght - 1 && getDigit(i, number) == 0) continue;
                long buffer = swapDigitsForNumber(i, j, number);
               // System.out.println(buffer);
                minNumber = Math.min(minNumber, buffer);
                maxNumber = Math.max(maxNumber, buffer);
            }
        }
        return minNumber + " " + maxNumber;
    }


    public static void main(String[] args) throws IOException {
        ProblemA solver = new ProblemA();
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int testCount = Integer.parseInt(in.readLine());
        for (int i = 0; i < testCount; i++) {
            long value = Long.parseLong(in.readLine());
            System.out.println("Case #" + (i + 1)+" "+solver.solve(value));
        }
    }
}

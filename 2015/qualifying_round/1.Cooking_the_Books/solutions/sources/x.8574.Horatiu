/*
Programming competition file template
Made by Horatiu Lazu
*/
import java.io.*;
import java.util.*;
import java.lang.*;
import java.awt.*;



class Problem{
	int leastMoves = 10000;
	int attempts = 0;
	
	int h;
	int w;
	
	boolean hasMovedpX = false;
	boolean hasMovednX = false;
	boolean hasMovedpY = false;
	boolean hasMovednY = false;
	
	int sX = 0;
	int sY = 0;
	
	
	public static void main (String [] args){
		new Problem();
	}
	
	public String[][] updateMap(String map[] []){
		//System.out.println("x: " + map.length + " | " + map[0].length);
		for(int i =0; i < w; i++){
			for(int y = 0; y < h; y++){
				if (map[i][y].equals("^"))
					map[i][y] = ">";
				else if (map[i][y].equals(">"))
					map[i][y] = "v";
					else if (map[i][y].equals("v"))
						map[i][y] = "<";
					else if (map[i][y].equals("<")){
						//System.out.println("Replaced");
						map[i][y] = "^";	
						}		
			}	
		}
		return map;
	}
	
	/*
	1
	1 5
	S..G<
	*/
	
	public int moveMap(String map [][] , int moves, int cX, int cY, int mX, int mY, boolean pX, boolean pY, boolean nX, boolean nY){
		if (cX == sX + 1)
			pX = true;
		
		
		attempts++;
		//System.out.println("ATTEMPTS: " + attempts);
		if (attempts > 10000) //TO END!
			return 0;
		
		if (moves > 40)
			return 0;
		if (cX >= mX || cX < 0)
			return 0;
		if (cY >= mY || cY < 0)
			return 0;
		if (!(map[cX][cY].equals(".") || map[cX][cY].equals("S") || map[cX][cY].equals("G")))
			return 0;
		//Check up
		
		
		
		if (attempts != 1) { //attempts != 1
		for(int i =cY; i >= 0; i--){
			if (map[cX][i].equals("v")){
				return 0;	//check this
			}	
			if (map[cX][i].equals("#") || map[cX][i].equals(">") || map[cX][i].equals("<") || map[cX][i].equals("^"))
				break;
		}
		for(int i = cY; i <mY; i++){
			if (map[cX][i].equals("^"))
				return 0;
			if (map[cX][i].equals("#") || map[cX][i].equals(">") || map[cX][i].equals("<") || map[cX][i].equals("v"))
				break;
		}
		for(int x = cX; x < mX; x++){
			if (map[x][cY].equals("<"))
				return 0;
			if (map[x][cY].equals("#") || map[x][cY].equals(">") || map[x][cY].equals("^") || map[x][cY].equals("v"))
				break;
		}
		for (int x = cX; x >= 0; x--){
			if (map[x][cY].equals(">"))
				return 0;
			if (map[x][cY].equals("#") || map[x][cY].equals("<") || map[x][cY].equals("^") || map[x][cY].equals("v")) //! before..
				break;
		}
		}
		
		
		
		if (map[cX][cY].equals("G")){
			if (moves < leastMoves)
				leastMoves = moves;
			//System.out.println("DONE!");
			return moves;	
		}
		//moves++;
		map = updateMap(map);
		
		return (moveMap(map, moves + 1, cX, cY + 1, mX,  mY, false, true, false, false) + moveMap(map , moves + 1, cX, cY - 1, mX, mY, false, false, false, true) + moveMap(map , moves + 1, cX + 1, cY, mX,  mY, true, false, false, false) + moveMap(map , moves + 1, cX - 1, cY, mX,  mY, false, true, false, false));
		
		
		
	}

	public Problem(){
		try{
			BufferedReader in;
			in = new BufferedReader (new InputStreamReader (System.in)); //Used for CCC
			//in = new BufferedReader(new FileReader("A.in")); //Used for JDCC & others
			
			PrintWriter out = new PrintWriter(new FileWriter("Answers3.txt"));
			int testCases = Integer.parseInt(in.readLine());
			for(int qq = 0; qq < testCases; qq++){
				StringTokenizer st = new StringTokenizer(in.readLine());
				int height = Integer.parseInt(st.nextToken());
				int width = Integer.parseInt(st.nextToken());
				String [] [] map = new String[width][height];
				for(int i =0; i < height; i++){
					String row = in.readLine();
					for(int x =0; x < row.length(); x++)
						map[x][i] = row.charAt(x) + "";
				}
				
				for(int i =0; i < width; i++){
					for(int x = 0; x < height; x++){
						if (map[i][x].equals("S")){
							sX = i;
							sY = x;	
						}
							
					}	
				}
				//map = updateMap(map);
				h = height;
				w = width;
				moveMap((map) , 0, sX, sY, width, height, true, true, true, true);
	
				
				out.println("Case #" + (qq + 1) + ": " +  ((leastMoves == 10000) ? ("impossible") : (leastMoves + "")));
				leastMoves = 10000;
				attempts = 0;
			}
			
			out.close();
			
		}
		catch(IOException e){
			System.out.println("IO: General");
		}
	}
}
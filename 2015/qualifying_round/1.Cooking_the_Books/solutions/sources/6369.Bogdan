package problems;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Created by Bohdan on 10.01.2015.
 */
public class CookingTheBooks {

    private static int n;

    private int indexOfMinValueNotZero = 0;

    public String getAnswer(String value){
        int values[] = new int[value.length()];
        for (int i = 0; i < values.length; i++) {
            values[i] = Integer.parseInt(String.valueOf(value.charAt(i)));
        }
         if(values.length == 1 ||
                indexOfMaxValue(values)==indexOfMinValue(values) )
            return " " + value + " " + value;
        indexOfMinValueNotZero = 0;
        return " " + getMinNumber(values) + " " +
                getMaxNumber(values);
    }

    private String getMinNumber(int a[]){
        int min = indexOfMinValue(a);
        String s="";
            for (int i = 0; i <a.length ; i++) {
                s+=a[i];
            }

        StringBuilder minValue1 = new StringBuilder();
        int replaceVlaue = -1;
        boolean flag = false;

        for (int i = 0; i < a.length; i++) {
            if(a[i] > a[min] & !flag) {
                if(a[min]!=0 ) {
                    minValue1.append(a[min]);
                    replaceVlaue = a[i];
                    flag = true;
                    continue;
                }else {
                    if(i!=0){
                        minValue1.append(a[min]);
                        replaceVlaue = a[i];
                        flag = true;
                        continue;
                    }
                }
            }
            minValue1.append(a[i]);
        }
        if(replaceVlaue!=-1)
                 minValue1.replace(min,min+1,String.valueOf(replaceVlaue));

        StringBuilder minValue2 = new StringBuilder();
        replaceVlaue = -1;
        flag = false;
        for (int i = 0; i < a.length; i++) {
            if(a[i] > a[indexOfMinValueNotZero] & !flag) {
                if(a[indexOfMinValueNotZero]!=0 ) {
                    minValue2.append(a[indexOfMinValueNotZero]);
                    replaceVlaue = a[i];
                    flag = true;
                    continue;
                }else {
                    if(i!=0){
                        minValue2.append(a[indexOfMinValueNotZero]);
                        replaceVlaue = a[i];
                        flag = true;
                        continue;
                    }
                }
            }
            minValue2.append(a[i]);
        }
        min = indexOfMinValueNotZero;
        if(replaceVlaue != -1)
                    minValue2.replace(min,min+1,String.valueOf(replaceVlaue));
        indexOfMinValueNotZero = 0;

        int v1 = Integer.parseInt(minValue1.toString());
        int v2 = Integer.parseInt(minValue2.toString());
        int v3 = Integer.parseInt(s);

        return String.valueOf(Math.min(v1,Math.min(v2,v3))) ;
    }

    private String getMaxNumber(int a[]){
        int max = indexOfMaxValue(a);
        StringBuilder maxValue = new StringBuilder();
        boolean flagForInc = false;
        if(max==0){
            int buf[] = new int[a.length-1];
            for (int i = 0; i < buf.length; i++) {
                buf[i] = a[i+1];
            }
            max = indexOfMaxValue(buf);
            maxValue.append(a[0]);
            a=buf;
            flagForInc = true;
        }

        boolean flag = false;
        int replaceValue = -1;
        for (int i = 0; i < a.length; i++) {
            if(a[max] > a[i] & !flag & i <= max){
                replaceValue = a[i];
                flag = true;
                maxValue.append(a[max]);
                continue;
            }
            maxValue.append(a[i]);
        }
        if (flagForInc) max++;
        if(replaceValue!=-1)
              maxValue.replace(max,max+1,String.valueOf(replaceValue));

        return maxValue.toString();
    }

    private int indexOfMaxValue(int a[]){
        int max = a[0];
        int index = 0;
        for (int i = 1; i < a.length; i++) {
            if( max <= a[i] ){
                    max = a[i];
                    index = i;
            }
        }
       // System.out.println("index= "+index+" max= "+a[index]);
        return index;
    }

    private int indexOfMinValue(int a[]){
        int min = a[0];
        int index = 0;
        int minNotZero = a[0];
        for (int i = 1; i < a.length; i++) {
            if( min >= a[i] ){
                    min = a[i];
                    index = i;
            }
            if(minNotZero >= a[i] & a[i]!=0){
                minNotZero = a[i];
                indexOfMinValueNotZero = i;
            }
        }
        /* System.out.println("index= "+index+" min= "+a[index]);
         System.out.println("indexNotZero= "+indexOfMinValueNotZero+
                " min= "+a[indexOfMinValueNotZero]);*/
        return index;
    }

    public static void main(String[] args) {

        BufferedReader bfr = new BufferedReader(new InputStreamReader(System.in));
        try {
             n = Integer.parseInt(bfr.readLine().trim());
        } catch (IOException e) {
            e.printStackTrace();
        }

        String values[] = new String[n];

        for (int i = 0; i < n; i++) {
            try {
                values[i] = bfr.readLine().trim();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        CookingTheBooks obj = new CookingTheBooks();
        for (int i = 0; i < n; i++) {
            System.out.println("Case #" + (i+1)+":"+obj.getAnswer(values[i]));
        }
    }
}

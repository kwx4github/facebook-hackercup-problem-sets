using System;
using System.IO;
using System.Text;

public class TaskA {
	static void Main(string[] args) {
		TextReader ins = Console.In;
		InputReader ir = new InputReader(ins);
		Solve(ir);

	}

	delegate bool Decider(char current, int at, char testChar);

	static string Run(string original, Decider verdict) {
		char[] arr = original.ToCharArray();
		int len = original.Length;
		int foundat = -1;

		for (int i = 0; i < len; ++i) {
			char ch = arr[i];
			for (int j = i + 1; j < len; ++j) {
				if (verdict(ch, i, arr[j])) {
					foundat = j;
					ch = arr[j];
				}
			}
			if (foundat != -1) {
				char och = arr[i];
				arr[i] = ch;
				arr[foundat] = och;
				break;
			}
		}
		return new string(arr);
	}
	static void Solve(InputReader ir) {
		int N = ir.ReadInt();
		for (int tc = 1; tc <= N; ++tc) {
			String orig = ir.ReadLine();
			string lesser = Run(orig,
			 delegate(char current, int at, char testChar) {
			 	return (testChar < current) && (at > 0 || at == 0 && testChar != '0');
			 	});
			string greater = Run(orig,
				delegate(char current, int at, char testChar) {
					return testChar > current;
				});
			Console.WriteLine("Case #{0}: {1} {2}", tc, lesser, greater);
		}
	}
}

class InputReader {
	private TextReader inputStream;

	public InputReader(TextReader inputStream) {
		this.inputStream = inputStream;
	}

	public string ReadLine() {
		StringBuilder sb = new StringBuilder();
		int c = inputStream.Read();
		while (c != '\n' && c != -1) {
            if (c != '\r')
                sb.Append((char) c);
            c = inputStream.Read();
        }
        return sb.ToString();
	}

	public int ReadInt() {
		int c = inputStream.Read();
		while (IsWhitespace(c))
			c = inputStream.Read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = inputStream.Read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new Exception();
			res *= 10;
			res += c - '0';
			c = inputStream.Read();
		} while (!IsWhitespace(c));
		return res * sgn;
	}

	public static bool IsWhitespace(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
}
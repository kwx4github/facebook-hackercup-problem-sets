
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int minPos(vector<int> & coll, int l, int r) {
	if (coll.size() < r + 1) {
		return -1;
	}
	int index = l;
	int m = coll[l];
	for (int i = l + 1; i <= r; i++) {
		if (m > coll[i]) {
			index = i;
			m = coll[i];
		}
	}
	return index;
}

int maxPos(vector<int> & coll, int l, int r) {
	if (coll.size() < r + 1) {
		return -1;
	}
	int index = l;
	int m = coll[l];
	for (int i = l + 1; i <= r; i++) {
		if (m < coll[i]) {
			index = i;
			m = coll[i];
		}
	}
	return index;
}

int getMin(int x) {
	if (x < 12) {
		return x;
	}
	vector<int> coll;
	while (x > 0) {
		coll.push_back(x % 10);
		x /= 10;
	}
	for (int i = coll.size() - 1; i >= 0; i--) {
		int j = minPos(coll, 0, i);
		if (j != i && (i != coll.size() - 1 || coll[j] != 0) ) {
			int tmp = coll[i];
			coll[i] = coll[j];
			coll[j] = tmp;
			break;
		}
	}
	for (int i = coll.size() - 1; i >= 0; i--) {
		x *= 10;
		x += coll[i];
	}
	return x;
}

int getMax(int x) {
	if (x < 12) {
		return x;
	}
	vector<int> coll;
	while (x > 0) {
		coll.push_back(x % 10);
		x /= 10;
	}
	for (int i = coll.size() - 1; i >= 0; i--) {
		int j = maxPos(coll, 0, i);
		if (j != i) {
			int tmp = coll[i];
			coll[i] = coll[j];
			coll[j] = tmp;
			break;
		}
	}
	for (int i = coll.size() - 1; i >= 0; i--) {
		x *= 10;
		x += coll[i];
	}
	return x;
}

int main () {
	cout<<"Hello World!\n";
	//cout<<INT_MAX<<endl;
	int T;
	cin>>T;
	for(int i = 1; i <= T; i ++) {
		int x;
		cin>>x;
		cout<<"Case #"<<i<<": "<<getMin(x)<<" "<<getMax(x)<<endl;
	}
	return 0;
}

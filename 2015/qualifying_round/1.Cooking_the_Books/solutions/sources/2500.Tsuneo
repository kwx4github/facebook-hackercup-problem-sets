//
//  main.cpp
//  facebookhackercup
//
//  Created by Yoshioka Tsuneo on 2015/01/10.
//  Copyright (c) 2015å¹´ Yoshioka Tsuneo. All rights reserved.
//

#include <fstream>
#include <iostream>
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <numeric>
#include <algorithm>
#include <sstream>
#include <queue>
#include <stdexcept>

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <cassert>
#include <unistd.h>
#include <string.h>

#include <stack>

// #define MULTI_THREAD

#ifdef MULTI_THREAD
#include <thread>
#endif

#define decltype(X) __typeof(X)
#define REP(i, n) for(int i=0; i<(int)n; i++)
#define FOR(it, c) for(decltype((c).begin()) it = (c).begin(); it!=(c).end(); it++)
#define ALL(c) (c).begin(), (c).end()

#define EPS 0.000001
using namespace std;

typedef long long ll;




// int testcase_itr(const string &A, const string &B, const string &S)
int testcase_itr(int N)
{
    // solution start

    vector<int> digits;
    if(N==0){
        cout << "0 0" << endl;
        return N;
    }
    while(N>0){
        digits.push_back(N%10);
        N/=10;
    }
    reverse(digits.begin(), digits.end());

    {
        vector<int> digits2 = digits;
        int places = (int)digits2.size();
        for(int i=0;i<places;i++){
            int minpos = -1;
            int minval = digits2[i];
            for(int j=places-1;j>i;j--){
                if(digits2[j]<minval && (i!=0 || digits2[j]!=0)){
                    // printf("i=%d, j=%d, digits2[i]=%d, digits2[j]=%d\n", i, j, digits2[i], digits2[j]);
                    minpos = j;
                    minval = digits2[j];
                }
            }
            if(minpos != -1){
                swap(digits2[i], digits2[minpos]);
                break;
            }
        }
        for(int i=0;i<places;i++){
            cout << digits2[i];
        }
    }
    cout << " ";
    {
        vector<int> digits2 = digits;
        int places = (int)digits2.size();
        for(int i=0;i<places;i++){
            int maxpos = -1;
            int maxval = digits2[i];
            for(int j=places-1;j>i;j--){
                if(digits2[j]>maxval && (i!=0 || digits2[j]!=0)){
                    // printf("i=%d, j=%d, digits2[i]=%d, digits2[j]=%d\n", i, j, digits2[i], digits2[j]);
                    maxpos = j;
                    maxval = digits2[j];
                }
            }
            if(maxpos != -1){
                swap(digits2[i], digits2[maxpos]);
                break;
            }
        }
        for(int i=0;i<places;i++){
            cout << digits2[i];
        }
    }
    cout << endl;
    
    // solution end
    
    return 12345;
}
void testcase(istream &in)
{
    int T;
    in >> T;
    for(int i=0;i<T;i++){
        int N;
        in >> N;
        cout << "Case #" << i+1 << ": ";
        testcase_itr(N);
    }
    // string A, B, S;
    // in >> A >> B >> S;
    // return testcase_itr(A, B, S);
}

#ifdef MULTI_THREAD
semaphore sem(6);
vector< pair<bool, double> > g_results;

void testcase_for_multithread(int t, double C, double F, double X)
{
    g_results[t].second = testcase_itr(C, F, X);
    g_results[t].first = true;
    // sleep(rand()/(RAND_MAX/3.0));
    sem.notify();
}
#endif

int main(int argc, const char * argv[])
{
    // sleep(1000);
    // insert code here...
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.precision(15);
    string fname = "/dev/stdin";
    if(argc>=2){
        fname = argv[1];
        ifstream in(fname, ifstream::in);
        if(!in){
            cout << "File open error:" << fname << endl;
            exit(1);
        }
        testcase(in);
        /*
        int result = testcase(in);
        cout << result << endl;
         */
    }else{
        testcase(cin);
        /*
        int result = testcase(cin);
        cout << result << endl;
         */
        
    }
#ifdef MULTI_THREAD
        
    vector<thread> threads;
    g_results.resize(T);
    int cur_result = 0;
    for(int t=0;t<T;t++){
        sem.wait();
        while(g_results[cur_result].first == true){
            cout << "Case #" << cur_result+1 << ": " << g_results[cur_result].second << endl;
            cur_result++;
        }
        double C, F, X;
        
        in >> C >> F >> X;
        
        threads.push_back(thread(testcase_for_multithread, t, C, F, X ));
    }
    while(cur_result<T){
        sem.wait();
        while(g_results[cur_result].first == true){
            cout << "Case #" << cur_result+1 << ": " << g_results[cur_result].second << endl;
            cur_result ++;
        }
    }
    for(int t=0;t<T;t++){
        threads[t].join();
    }
#endif
    return 0;
}




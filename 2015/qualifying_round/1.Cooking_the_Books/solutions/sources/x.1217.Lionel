object CookingTheBooks extends App {
  import scala.io.StdIn._
  import scala.util.control.Breaks._
  
  val T = readInt
  
  for (caseNb <- 1 to T) {
    
    val N = readLine
    
    def comp(arr: Array[Int], i: Int, ord: Ordering[Int], canTakeZero: Boolean = true) {
      val indexes = arr.iterator.zipWithIndex.drop(i+1).filter(canTakeZero || _._1 != 0)
      
      if (!indexes.isEmpty) {
        val (swapv, swapi) = indexes.minBy(_._1)(ord)
        if (ord.lt(swapv, arr(i))) {
          val t = arr(i); arr(i) = arr(swapi); arr(swapi) = t
          return
        }}
      
      if (i+1 < arr.size) comp(arr, i + 1, ord)
    }
    
    val min, max = N.toCharArray map {_.toInt - '0'.toInt}
    
    comp(min, 0, implicitly[Ordering[Int]], false)
    comp(max, 0, implicitly[Ordering[Int]].reverse, false)
    
    println(s"Case #$caseNb: ${min.mkString} ${max.mkString}")
    
  }
  
  
}


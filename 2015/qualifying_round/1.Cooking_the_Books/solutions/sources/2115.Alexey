import java.io.*;
import java.util.*;
import java.math.*;

public class Cooking implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st;
	static Random rnd;

	private void solveOne() throws IOException {
		String digits = nextToken();
		long minValue = Long.parseLong(digits), maxValue = Long
				.parseLong(digits);
		for (int i = 0; i < digits.length(); i++) {
			for (int j = i + 1; j < digits.length(); j++) {
				if (i == 0 && digits.charAt(j) == '0') {
					continue;
				}
				long value = Long.parseLong(swap(digits, j, i));
				minValue = Math.min(minValue, value);
				maxValue = Math.max(maxValue, value);
			}
		}
		out.println(minValue + " " + maxValue);
	}

	private String swap(String digits, int i, int j) {
		char[] letters = digits.toCharArray();
		char c = letters[i];
		letters[i] = letters[j];
		letters[j] = c;
		// out.println(Arrays.toString(letters));
		if (letters[0] == '0')
			throw new AssertionError();
		return new String(letters);
	}

	private void solve() throws IOException {
		int tests = nextInt();
		for (int test = 0; test < tests; test++) {
			out.print("Case #" + (test + 1) + ": ");
			solveOne();
		}
	}

	public static void main(String[] args) {
		new Cooking().run();
	}

	public void run() {
		try {
			final String className = this.getClass().getName().toLowerCase();

			try {
				in = new BufferedReader(new FileReader(className + ".in"));
				out = new PrintWriter(new FileWriter(className + ".out"));
				// in = new BufferedReader(new FileReader("input.txt"));
				// out = new PrintWriter(new FileWriter("output.txt"));
			} catch (FileNotFoundException e) {
				in = new BufferedReader(new InputStreamReader(System.in));
				out = new PrintWriter(System.out);
			}

			rnd = new Random();

			solve();

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String line = in.readLine();

			if (line == null)
				return null;

			st = new StringTokenizer(line);
		}

		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
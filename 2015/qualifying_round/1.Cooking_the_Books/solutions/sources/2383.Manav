#include <iostream>
#include <stdio.h>
#include <string>
#include <ctype.h>
#include <stdlib.h>
#include <math.h>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <utility>
#include <map>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <climits>
#include <limits.h>

#define MOD 1000000007

typedef unsigned long long ull;
typedef long long LL;

using namespace std;

// A utility function to get minimum of two numbers
int minVal(int x, int y) { return (x < y)? x: y; }

// A utility function to get the middle index from corner indexes.
int getMid(int s, int e) {  return s + (e -s)/2; }

int gcd(int u, int v)
{
    return (v != 0)?gcd(v, u%v):u;
}

//Change this #define while submitting
#define GETCHAR getchar_unlocked
inline int read()
{
    int n=0;char c;
    int sign=1;
    c=GETCHAR();
    while(c!='-' && (c<48||c>57))
    {
        c=GETCHAR();
    }
    if(c=='-')sign=-1;
    while((c<48||c>57))
    {
        c=GETCHAR();
    }
    while(c>=48&&c<=57)
    {
        n=n*10+c-48;
        c=GETCHAR();
    }
    return n*sign;
}

int main()
{
    int t;
    scanf("%d",&t);
    for(int tc=1;tc<=t;++tc)
    {
        string n, mini, maxi, temp;
        cin>>n;

        mini = n;
        maxi = n;

        int len = n.length();
        int i, j;
        for(i=0;i<len;++i)
        {
            // cout<<"temp is "<<temp<<endl;
            char ch1 = n[i];
            for(j=i+1;j<len;++j)
            {
                char ch2 = n[j];

                temp = n;
                temp[i] = ch2;
                temp[j] = ch1;
                // cout<<"temp is "<<temp<<endl;
                if(temp[0]=='0')continue;

                if(temp > maxi)maxi = temp;
                if(temp < mini)mini = temp;
            }
        }

        cout<<"Case #"<<tc<<": "<<mini<<" "<<maxi<<endl;
    }
    return 0;
}

#pragma comment(linker, "/STACK:16777216")
#include <iostream>
#include <climits>
#include <fstream>
#include <cstring>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <iomanip>
#include <cstdio>
#include <ctime>
#include <functional>
#include <iterator>
#include <complex>
#include <queue>
#include <cassert>
#include <sstream>
#include <cstdlib>

#define PROBLEM_ID "FHC_2015_A"

using namespace std;

double pi = acos((double) -1);
const int MOD = 1000000007;
const int INF = 2147483647;
const long long LLONG_INF = 9223372036854775807LL;

bool is_greater(deque<int>& a, deque<int>& b) {
    for (int i = 0; i < a.size(); i++) {
        if (a[i] < b[i])
            return false;
        else if (a[i] > b[i])
            return true;
    }

    return false;
}

string number_to_s(deque<int>& number) {
    string s = "";
    for (int i = 0; i < number.size(); i++) {
        s += number[i] + '0';
    }
    return s;
}

int main() {
    clock_t tStart = clock();
    //freopen(PROBLEM_ID".in", "r", stdin);
    freopen("output.txt", "w", stdout);
    int tests;
    cin >> tests;
    for (int test = 1; test <= tests; test++) {
        int n;
        cin >> n;
        deque<int> number, best_max, best_min;

        if (n > 0) {
            while (n > 0) {
                number.push_front(n % 10);
                n /= 10;
            }
        }
        else {
            number.push_back(0);
        }

        best_max = number, best_min = number;
        for (int i = 0; i < number.size(); i++) {
            for (int j = i + 1; j < number.size(); j++) {
                if (i == 0 && number[j] == 0) {
                    continue;
                }

                swap(number[i], number[j]);

                if (is_greater(number, best_max)) {
                    best_max = number;
                }
                if (is_greater(best_min, number)) {
                    best_min = number;
                }

                swap(number[i], number[j]);
            }
        }

        cout << "Case #" << test << ": " << number_to_s(best_min) << " " << number_to_s(best_max) << endl;
    }
    //printf("Time taken: %.2fs\n", (double)(clock() - tStart)/CLOCKS_PER_SEC);
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CookingTheBooks
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            ofd.ShowDialog();

            List<string> lines = System.IO.File.ReadAllLines(ofd.FileName).ToList();
            List<string> output = new List<string>();
            for(int i = 1 ; i < lines.Count ; i++)
            {
                output.Add("Case #" + i.ToString() + ": " + Generate(lines[i]));
            }

            System.IO.File.WriteAllLines(@"D:\output.txt", output);
        }

        private string Generate(string input)
        {
            if (input.Length == 1)
                return input + " " + input;

            List<int> array1 = new List<int>();
            List<int> array2 = new List<int>();
            for (int i = 0; i < input.Length; i++)
            {
                array1.Add(Convert.ToInt32(input[i].ToString()));
                array2.Add(Convert.ToInt32(input[i].ToString()));
            }

            var min = GenerateMin(array1);
            var max = GenerateMax(array2);

            return ConvertToNo(min) + " " + ConvertToNo(max);
        }

        private string ConvertToNo(List<int> array)
        {
            string retVal = string.Empty;

            foreach (var item in array)
                retVal += item.ToString();

            return retVal;
        }

        private List<int> GenerateMax(List<int> input)
        {
            if (input.Count == 1)
                return input;

            int maxIdx = 0;
            int maxNo = -1;

            for(int i = 1 ; i < input.Count ; i++)
                if(input[i] >= maxNo)
                {
                    maxIdx = i;
                    maxNo = input[i];
                }

            if(maxIdx != 0 && input[0] < input[maxIdx])
            {
                int tmp = input[0];
                input[0] = input[maxIdx];
                input[maxIdx] = tmp;

                return input;
            }
            else
            {
                List<int> retVal = new List<int>();
                retVal.Add(input[0]);
                retVal.AddRange(GenerateMax(input.GetRange(1, input.Count - 1)));
                return retVal;
            }
        }

        private List<int> GenerateMin(List<int> input, bool first = true)
        {
            if (input.Count == 1)
                return input;
            
            int minIdx = 0;
            int minNo = 100;

            for(int i = 1 ; i < input.Count ; i++)
                if(input[i] <= minNo)
                {
                    if(first == true && input[i] == 0)
                        continue;
                    minIdx = i;
                    minNo = input[i];
                }

            if (minIdx != 0 && input[0] > input[minIdx])
            {
                int tmp = input[0];
                input[0] = input[minIdx];
                input[minIdx] = tmp;
                return input;
            }
            else
            {
                List<int> retVal = new List<int>();
                retVal.Add(input[0]);
                retVal.AddRange(GenerateMin(input.GetRange(1, input.Count - 1), false));
                return retVal;
            }
        }
    }
}

#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <vector>
#include <set>
#include <string>
#include <map>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <list>
#include <deque>
#include <algorithm>

using namespace std;

class Solution
{
	int Result;
    int N;
    int Min, Max;
public:
    void Work()
	{
        int i, j, k;
        Min = Max = 0;

        vector< int > x, d;

        for( i = N; i != 0; i /= 10 )
            x.push_back( i % 10 );

        d.push_back( 1 );
        for( i = 1; i < ( int )x.size(); ++i )
            d.push_back( d.back() * 10 );

        for( i = 0; i < ( int )x.size(); ++i )
        {
            for( j = i + 1; j < ( int )x.size(); ++j )
            {
                if( j == ( int )x.size() - 1 && x[ i ] == 0 )
                    continue;
                k = x[ i ] * d[ j ] + x[ j ] * d[ i ] - x[ j ] * d[ j ] - x[ i ] * d[ i ];
                if( Max < k )
                    Max = k;
                if( Min > k )
                    Min = k;
            }
        }
	}
	
	void Read()
	{
        scanf( "%d", &N );
	}

	void Write( int t )
	{
		printf( "Case #%d: %d %d\n", t, N + Min, N + Max );
	}
};

vector< Solution > solution;

int main()
{
	int i, t;
	scanf( "%d", &t );
	solution.resize( t );
	for( i = 0; i < t; ++i )
		solution[ i ].Read();
#pragma omp parallel for schedule(dynamic, 1)
	for( i = 0; i < t; ++i )
		solution[ i ].Work();
	for( i = 0; i < t; ++i )
		solution[ i ].Write( i + 1 );
	return 0;
}

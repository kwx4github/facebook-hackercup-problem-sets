import Control.Monad

replaceLastOccur :: Char -> Char -> String -> String
replaceLastOccur origChar newChar str = reverse $ h ++ (newChar : tail t)
    where (h, t) = span (/= origChar) . reverse $ str

lmax :: String -> String
lmax = scanr1 max

f :: String -> String -> (Char -> Char -> Bool) -> String
f [x] _ _ = [x]
f (x:xs) (y:ys) pred
    | pred x y = y : replaceLastOccur y x xs
    | otherwise = x : f xs ys pred

smax :: String -> String
smax xs = f xs (lmax xs) (<)

lmin :: String -> String
lmin xs = (foldl1 min . filter (/= '0') $ xs) : (tail . scanr1 min $ xs)

smin :: String -> String
smin "0" = "0"
smin xs = f xs (lmin xs) (>)

main = do
    t <- liftM (read :: String -> Int) getLine
    forM_ [1..t] (\i -> do
      str <- getLine
      putStrLn $ "Case #" ++ (show i) ++ ": " ++ (smin str) ++ " " ++ (smax str))

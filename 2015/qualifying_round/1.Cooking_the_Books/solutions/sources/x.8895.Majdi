#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

typedef unsigned long long ull;
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int ,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;

const int MAX = 1001;
const int MAX_INT = 1000000000;
ull RES[2] ;

ull PosMax(vector<ull> v)
{
	ull max = v[0];
	int index = 0;
	for(int i=1;i<v.size();i++)
	{
		if(max < v[i])
		{
			max = v[i];
			index = i;
		}
	}
	return index;
}

ull PosMin(vector<ull> v)
{
	ull min = 10;
	int index = 0;
	for(int i=0;i<v.size();i++)
	{
		if( min > v[i])
		{
			min = v[i];
			index= i;
		}
	}
	return index;
}

ull fun(vector<ull> v)
{
	ull x = 0 ;
	for(int i = 0;i<v.size();i++)
		x += v[i] * pow(10,(double)i);
	return x;
}

int main()
{
	freopen("A.in","rw",stdin);
	freopen("A.out","w",stdout);
	int T;
	ull n;
	cin >> T;
	for(int i = 1;i<=T;i++)
	{
		cin >> n ;
		if(n % 10 == 0 || n < 10) RES[0] = RES[1] = n;
		else
		{
			vector<ull> v;
			while(n)
			{
				v.push_back(n % 10);
				n /= 10;
			}
			reverse(v.begin(),v.end());
			vector<ull> vv(v.size()) ;
			vv = v;
			
			int ii = PosMin(v);
			if(v[ii] != 0)
			{
				int x = v[0];
				v[0] = v[ii];
				v[ii] = x;
				reverse(v.begin(),v.end());
				RES[0] = fun(v);
			}
			else
			{
				reverse(v.begin(),v.end());
				RES[0] = fun(v);
			}	
			
			int o = PosMax(vv);
			int xx = vv[0];
			vv[0] = vv[o];
			vv[o] = xx;
			reverse(vv.begin(),vv.end());
			RES[1] = fun(vv);
			
		/*	for(int j=0;j<v.size();j++)
				cout << v[j] ;
			cout << " " << PosMax(v) <<" " << PosMin(v) << endl; */
		}
		printf("Case #%d: %d %d\n",i,RES[0],RES[1]);
	}
	return 0;
}

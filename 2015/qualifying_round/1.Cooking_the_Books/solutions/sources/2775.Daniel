#define _CRT_SECURE_NO_DEPRECATE
#include <algorithm>
#include <bitset>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <functional>
#include <hash_map>
#include <iostream>
#include <iomanip>
#include <list>
#include <deque>
#include <queue>
#include <math.h>
#include <map>
#include <numeric>
#include <set>
#include <stack>
#include <stdio.h>
#include <string>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
#define debug(x) cerr<<#x<<" = "<<(x)<<endl;
bool test = false;
const double pi=acos(-1.0);
const double eps=1e-11;
int breakpoint = 0;

const char rootdir[] = "C:\\HackerCup\\CookingTheBooks";
void reopen(char* a) {
	char input[256], output[256];
	sprintf(input, "%s\\%s", rootdir, a);
	sprintf(output, "%s\\%s", rootdir, a);
	char *p = strstr(output, ".in");
	if (p) sprintf(p, ".out"); 
	else sprintf(&output[strlen(output)], ".out");
	debug(input);
	freopen(input, "r", stdin);
	if (!test) {
    debug(output);
    freopen(output,"w",stdout);
  }
}

int T;
char N[16];
char S[16];
char L[16];

int main(int argc, char* argv[]) {
  test = false;
	// reopen("cooking_the_books_example_input.txt");
  reopen("cooking_the_books.txt");
	scanf("%d\n", &T);

	for(int t=1; t<=T; t++) {
    scanf("%s\n", N);
    strcpy(S, N);
    strcpy(L, N);

    int len = strlen(N);
    if (len <= 1) {
      printf("Case #%d: %s %s\n", t, N, N);
      continue;
    }

    // N will never begin with a leading 0 unless N = 0
    assert(N[0] != '0');

    // Get smallest number
    for (int i = 0; i < len; i++) {
      // evaluate whether N[i] should be swapped
      int dmin = N[i];
      int imin = -1;
      for (int j = len -1 ; j >= i; j--) {
        // skip digit 0 if N[i] is leading digit
        if (i == 0 && N[j] == '0') continue;
        if (N[j] < dmin) {
          dmin = N[j];
          imin = j;
        }
      }
      if (imin > i) {
        assert(S[i] > S[imin]);
        swap(S[i], S[imin]);
        break;
      }
    }

    // Get largest number
    for (int i = 0; i < len; i++) {
      // evaluate whether N[i] should be swapped
      int dmax = N[i];
      int imax = -1;
      for (int j = len -1 ; j >= i; j--) {
        // skip digit 0 if N[i] is leading digit
        if (i == 0 && N[j] == '0') continue;
        if (N[j] > dmax) {
          dmax = N[j];
          imax = j;
        }
      }
      if (imax > i) {
        assert(L[i] < L[imax]);
        swap(L[i], L[imax]);
        break;
      }
    }

    printf("Case #%d: %s %s\n", t, S, L);
  }
 	return 0;
}
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))
#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)

#define CLEAR(v) memset((v),0,sizeof(v));

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

const int MAXL = 20;

char number[MAXL];

int main() {
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    scanf("%s", number);
    int len = strlen(number);
    int mmin = atoi(number), mmax = atoi(number);
    FOR(i, 0, len) {
      FOR(j, i + 1, len) if (i || number[j] != '0') {
        swap(number[i], number[j]);
        mmin = min(mmin, atoi(number));
        mmax = max(mmax, atoi(number));
        swap(number[i], number[j]);
      }
    }
    printf("Case #%d: %d %d\n", taskIdx, mmin, mmax);
  }
  return 0;
}

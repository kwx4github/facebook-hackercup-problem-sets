import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;


public class Accountant {

	/**
	 * @param args
	 */
	
	static int[] numberAsArray;
	public static void main(String[] args) {
		Scanner in = null;
		try {
			in = new Scanner(new FileReader(new File("cooking_the_books.txt")));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		int T = Integer.parseInt(in.nextLine());
		int i = 1;
		int[] nums = new int[T];
		for (int count = 0; count < T; count++) {
			int n = Integer.parseInt(in.nextLine());
			nums[count] = n;
		}
		
		BufferedWriter writer = null;
		try {
			File file = new File("output.txt");
			file.createNewFile();
			FileWriter fileWriter = new FileWriter(file);
			writer = new BufferedWriter(fileWriter);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		for (int count = 0; count < nums.length; count++) {
			int num = nums[count];
			int index = String.valueOf(num).length()-1;
			numberAsArray = new int[index+1];
			while (num > 0) {
				int digit = num % 10;
				numberAsArray[index] = digit;
				num /= 10;
				index--;
			}
			
			String largest = getLargestNum(numberAsArray);
			String smallest = getSmallestNum(numberAsArray); //10101, 1000101
			System.out.println("Case #" + i + ": " + smallest + " " + largest);
		    try {
				writer.write("Case #" + i + ": " + smallest + " " + largest);;
				writer.newLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			i++;
		}
		
		try {
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static String getLargestNum(int[] array) {
		int largestLeftDigit = 0;
		int largestRightDigit = 0;
		int largestLeftIndex = 0;
		int largestRightIndex = 0;
		String arrayStr = "";
		
		for (int i = 0; i < array.length; i++) {
			int digit = array[i];
			if (digit > largestLeftDigit) {
				largestLeftDigit = digit;
				largestLeftIndex = i;
			}
		}
		for (int i = array.length-1; i >= 0; i--) {
			int digit = array[i];
			if (digit > largestRightDigit) {
				largestRightDigit = digit;
				largestRightIndex = i;
			}
		}
		
		int[] copy = array.clone();
		if (largestRightIndex == largestLeftIndex) {
			if (largestLeftIndex != 0) {
				int temp = copy[0];
				copy[0] = copy[largestLeftIndex];
				copy[largestLeftIndex] = temp;
				for (int i = 0; i < copy.length; i++) {
					arrayStr += copy[i];
				}
				return arrayStr;
			} else {
				if (array.length == 1) {
					return array[0] + "";
				}
				else {
					int zeroCount = 0;
					arrayStr += array[0];
					for (int i = 1; i < array.length; i++) {
						if (array[i] == 0) {
							zeroCount++;
						}
						arrayStr += array[i];
					}
					if (zeroCount != array.length-1)
						return array[0] + getLargestNum(Arrays.copyOfRange(copy, 1, array.length));
					else
						return arrayStr;
				}
			}
		} else {
			if (largestLeftIndex == 0) {
				int swapIndex = 1;
				while (swapIndex < array.length-1 && largestLeftDigit == array[swapIndex]) {
					swapIndex++;
				}
				if (swapIndex >= largestRightIndex) {
					for (int i = 0; i < swapIndex; i++) {
						arrayStr += array[i];
					}
					if (swapIndex != array.length)
						return arrayStr + getLargestNum(Arrays.copyOfRange(copy, swapIndex, array.length));
					else
						return arrayStr;
				} else {
					int temp = copy[largestRightIndex];
					copy[largestRightIndex] = copy[swapIndex];
					copy[swapIndex] = temp;
					for (int i = 0; i < copy.length; i++) {
						arrayStr += copy[i];
					}
					return arrayStr;
				}
			} else {
				int temp = copy[0];
				copy[0] = copy[largestRightIndex];
				copy[largestRightIndex] = temp;
				for (int i = 0; i < copy.length; i++) {
					arrayStr += copy[i];
				}
				return arrayStr;
			}
		}
	}
	
	public static String getSmallestNum(int[] array) {
		//System.out.println("getSmallestNum " + Arrays.toString(array));
		int smallestLeftDigit = Integer.MAX_VALUE;
		int smallestRightDigit = Integer.MAX_VALUE;
		int smallestLeftIndex = array.length;
		int smallestRightIndex = array.length;
		int nextSmallestDigit = array[0];
		int nextSmallestIndex = 0;
		String arrayStr = "";
		
		for (int i = 0; i < array.length; i++) {
			int digit = array[i];
			if (digit < smallestLeftDigit) {
				smallestLeftDigit = digit;
				smallestLeftIndex = i;
			}
			if (digit <= nextSmallestDigit && digit != 0) {
				nextSmallestDigit = digit;
				nextSmallestIndex = i;
			}
		}
		for (int i = array.length-1; i >= 0; i--) {
			int digit = array[i];
			if (digit < smallestRightDigit) {
				smallestRightDigit = digit;
				smallestRightIndex = i;
			}
		}
		
		//System.out.println("a is : " + smallestLeftDigit + " at " + smallestLeftIndex);
		//System.out.println("b is : " + smallestRightDigit + " at " + smallestRightIndex);
		//System.out.println("next smallest is: " + nextSmallestDigit + " at " + nextSmallestIndex);
		
		int[] copy = array.clone();
		if (smallestRightIndex == smallestLeftIndex) {
			if (smallestLeftIndex != 0) {
				if (nextSmallestIndex != 0 && nextSmallestDigit != copy[0]) {
					int temp = copy[0];
					copy[0] = copy[nextSmallestIndex];
					copy[nextSmallestIndex] = temp;
				} else {
					int swapIndex = 0;
					if (array.length == numberAsArray.length) {
						swapIndex = 0;
						if (copy[smallestLeftIndex] == 0) {
							swapIndex = 1;
							while (swapIndex < array.length
									&& array[swapIndex] == 0)
								swapIndex++;
						}
					}
					if (swapIndex < array.length - 1) {
						int temp = copy[swapIndex];
						copy[swapIndex] = copy[smallestLeftIndex];
						copy[smallestLeftIndex] = temp;
					}
				}
				for (int i = 0; i < copy.length; i++) {
					arrayStr += copy[i];
				}
				return arrayStr;
			} else {
				if (array.length == 1) {
					return array[0] + "";
				}
				else {
					int zeroCount = 0;
					arrayStr += array[0];
					for (int i = 1; i < array.length; i++) {
						if (array[i] == 0) {
							zeroCount++;
						}
						arrayStr += array[i];
					}
					if (zeroCount != array.length-1)
						return array[0] + getSmallestNum(Arrays.copyOfRange(copy, 1, array.length));
					else
						return arrayStr;
				}
			}
		} else {
			if (smallestLeftIndex == 0) {
				int swapIndex = 1;
				while (swapIndex < array.length-1 && smallestLeftDigit == array[swapIndex]) {
					swapIndex++;
				}
				if (swapIndex >= smallestRightIndex) {
					for (int i = 0; i < swapIndex; i++) {
						arrayStr += array[i];
					}
					if (swapIndex != array.length)
						return arrayStr + getSmallestNum(Arrays.copyOfRange(copy, swapIndex, array.length));
					else
						return arrayStr;
				} else {
					int temp = copy[smallestRightIndex];
					copy[smallestRightIndex] = copy[swapIndex];
					copy[swapIndex] = temp;
					for (int i = 0; i < copy.length; i++) {
						arrayStr += copy[i];
					}
					return arrayStr;
				}
			} else {
				if (nextSmallestIndex != 0 && nextSmallestDigit != copy[0]) {
					int temp = copy[0];
					copy[0] = copy[nextSmallestIndex];
					copy[nextSmallestIndex] = temp;
				} else {
					int swapIndex = 0;
					if (array.length == numberAsArray.length) {
						swapIndex = 0;
						if (copy[smallestLeftIndex] == 0) {
							swapIndex = 1;
							while (swapIndex < array.length && array[swapIndex] == 0)
								swapIndex++;
						}
					}
					if (swapIndex < array.length-1) {
						int temp = copy[swapIndex];
						copy[swapIndex] = copy[smallestRightIndex];
						copy[smallestRightIndex] = temp;
					}
				}
				for (int i = 0; i < copy.length; i++) {
					arrayStr += copy[i];
				}
				return arrayStr;
			}
		}
	}

}

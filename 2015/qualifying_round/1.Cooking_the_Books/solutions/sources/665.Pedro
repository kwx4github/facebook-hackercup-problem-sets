#include <stdio.h>
#include <stdlib.h>

int    *v = NULL;
int *vMax = NULL;
int *vMin = NULL;
int tamVet;

int tamanhoNumero(int n)
{
	int aux = n; int count=0;
	
	do{	
		count ++;
		aux = aux/10;
	}while(aux!=0);
	
	tamVet = count;
	return count;
}

int posicaoNoVetor(int tam,int pos)
{
  return tam-(pos+1);
}

int capturaMaiorDigito(int n,int tam,int *posMaior,int *maior)
{
	if(tam<=1)
	{	*posMaior = -1 ; return -1;}

	int aux = n; int resto;
	int m = -1;
	int p = -1;

	int count=0;
	while((aux!=0)&&(count<tam))
	{
		resto = aux%10;

		if(resto>m)
		{
			m=resto;
			p=count;
		}

		count++;
		aux=aux/10;
	}

	*posMaior=p; 
	*maior=m;

	if(m==v[tamVet-tam])
		return	capturaMaiorDigito(n,tam-1,posMaior,maior);
	else
	{	
		*posMaior=p;
		*maior=m;
		return tamVet-tam;
	}
}

int capturaMenorDigito(int n,int tam,int *posMenor,int *menor)
{
	if(tam<=1)
	{	*posMenor = -1 ; return-1;}

	int aux = n; int resto;
	int m = 10;
	int p = -1;

	int count=0;
	while((aux!=0)&&(count<tam))
	{
		resto = aux%10;
		
		if(tamVet==tam)
		{
			if((resto<m)&&(resto!=0))
			{
				m=resto;
				p=count;
			}
		}
		else
		{
			if(resto<m)
			{
				m=resto;
				p=count;
			}
		}
		count++;
		aux=aux/10;
	}

	*posMenor=p; //Estas funcoes devem ser recursivas ;)
	*menor=m;

	if(*menor==v[tamVet-tam])
		return capturaMenorDigito(n,tam-1,posMenor,menor);
	else
	{
		*posMenor=p; 
		*menor=m;
		return tamVet-tam;
	}
}


int pot(int b,int e)
{
	if(e<=0)
		return 1;
	
	return b*pot(b,e-1);
}

int geraNumero(int *v,int tam)
{
	int num=0;
	int b = pot(10,tam-1);

	int i=0;
	for(i=0;i<tam;i++)
	{
		num = num + v[i]*b;
		b=b/10;
	}

	return num;
}

void resulta(int n,int tam,int *min,int *max)
{ 
	*min=0;*max=0;

	if(tam == 1)
	{
		*min = n; *max = n; return;	
	}		

	int posMenor,menor;
	int indiceMenor = capturaMenorDigito(n,tam,&posMenor,&menor);
	//printf("indice Menor = %d Menor digito = %d , posicao = %d\n",indiceMenor,menor,posicaoNoVetor(tam,posMenor));
	int posMaior,maior;
	int indiceMaior = capturaMaiorDigito(n,tam,&posMaior,&maior);
	//printf("indice Maior = %d Maior digito = %d , posicao = %d\n",indiceMaior,maior,posicaoNoVetor(tam,posMaior));


	int aux = n;
	int i;
	for(i=tam-1;i>=0;i--)
	{	
		vMax[i]=aux%10;
		vMin[i]=vMax[i]; 
		aux=aux/10; 
	}
		/*

			Estes indice podem ser diferente para o caso de 
		o maior digito ou menor estejam na frente do número.
		Possivelmente uma recursão na busca do maior e menor
		digito pode retornar a posição do maior/menor digito 
		diferente, para enfim tratar este problema.

		*/
	if(indiceMenor!=-1)
	{
		int x = posicaoNoVetor(tam,posMenor);
		int troca = vMin[indiceMenor]; 
		vMin[indiceMenor]=menor;
		vMin[x]=troca;
	}

	*min = geraNumero(vMin,tam);

	if(indiceMaior!=-1)
	{
		int y = posicaoNoVetor(tam,posMaior); 
		int troca = vMax[indiceMaior];
		vMax[indiceMaior] = maior; 
		vMax[y]=troca;
	}

	*max = geraNumero(vMax,tam);
}

main()
{
	v    = (int *)malloc(sizeof(int)*9);
	vMax = (int *)malloc(sizeof(int)*9);
	vMin = (int *)malloc(sizeof(int)*9);

	int T,n;
	scanf("%d",&T);

	int min,max,tam,aux;
	int count = 1;
	while(count<=T)
	{
		scanf("%d",&n);
		tam = tamanhoNumero(n);
		
		int i;
		aux = n;
		for(i=tam-1;i>=0;i--)
		{	
			v[i]=aux%10;	
			aux=aux/10; 
		}

		resulta(n,tam,&min,&max);
		printf("Case #%d: %d %d\n",count,min,max);
		count++;
	}
	free(v);free(vMax);free(vMin);
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CookingBook
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var writer = new StreamWriter("Output.txt"))
            using (var reader = new StreamReader("cooking_the_books.txt"))
            {
                var T = int.Parse(reader.ReadLine());
                for (var i = 0; i < T; ++i)
                {
                    var number = reader.ReadLine();
                    var caseNumber = i + 1;
                    writer.WriteLine("Case #" + caseNumber + ": " + GetSmallestNumber(number) + " " + GetLargestNumber(number));
                }
            }
        }

        public static string GetLargestNumber(string number)
        {
            
            if(Int64.Parse(number) <= 11)
            {
                return number;
            }
            Data bestSwitch = new Data(10, 10, 10);

            for(var i = 1; i < number.Length; ++i)
            {
                var numberInQuestion = int.Parse(number[i].ToString());
                for(var j = 0; j < i; ++j)
                {
                    if(int.Parse(number[j].ToString()) < numberInQuestion)
                    {
                        if((j < bestSwitch.SwitchIndex)||(j == bestSwitch.SwitchIndex && numberInQuestion >= bestSwitch.Number))
                        {
                            bestSwitch = new Data(j, i, numberInQuestion);
                        }
                        break;
                    }
                }
            }
            if (bestSwitch.Number == 10) return number;
            number = number.Remove(bestSwitch.CurrentIndex, 1);
            number = number.Insert(bestSwitch.CurrentIndex, number[bestSwitch.SwitchIndex].ToString());
            number = number.Remove(bestSwitch.SwitchIndex, 1);
            number = number.Insert(bestSwitch.SwitchIndex, bestSwitch.Number.ToString());
            return number;

        }

        public static string GetSmallestNumber(string number)
        {
            if (Int64.Parse(number) <= 11)
            {
                return number;
            }

            Data bestSwitch = new Data(10, 10, 10);

            for (var i = 1; i < number.Length; ++i)
            {
                var numberInQuestion = int.Parse(number[i].ToString());
                var startIndex = numberInQuestion == 0 ? 1 : 0;
                for (var j = startIndex; j < i; ++j)
                {
                    if (int.Parse(number[j].ToString()) > numberInQuestion)
                    {
                        if ((j < bestSwitch.SwitchIndex) || (j == bestSwitch.SwitchIndex && numberInQuestion <= bestSwitch.Number))
                        {
                            bestSwitch = new Data(j, i, numberInQuestion);
                        }
                        break;
                    }
                }
            }
            if (bestSwitch.Number == 10) return number;
            number = number.Remove(bestSwitch.CurrentIndex, 1);
            number = number.Insert(bestSwitch.CurrentIndex, number[bestSwitch.SwitchIndex].ToString());
            number = number.Remove(bestSwitch.SwitchIndex, 1);
            number = number.Insert(bestSwitch.SwitchIndex, bestSwitch.Number.ToString());

            return number;
        }
    }

    public class Data
    {
        public Data(int switchIndex, int currentIndex, int number)
        {
            SwitchIndex = switchIndex;
            CurrentIndex = currentIndex;
            Number = number;
        }

        public int SwitchIndex { get; set; }
        public int CurrentIndex { get; set; }
        public int Number { get; set; }
    }
}

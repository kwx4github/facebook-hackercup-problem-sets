#include <iostream>
#include <vector>
using namespace std;

long long max_element(const vector<long long> &vec) {
    long long ret = vec[0];
    for (int i = 1; i < vec.size(); i++) {
        if (ret < vec[i]) ret = vec[i];
    }
    return ret;
}

long long min_element(const vector<long long> &vec) {
    long long ret = vec[0];
    for (int i = 1; i < vec.size(); i++) {
        if (ret > vec[i]) ret = vec[i];
    }
    return ret;
}

long long swap(long long num, int i, int j) {
    long long pow_i = 1ll, pow_j = 1ll, digit_i, digit_j;
    while (i--) pow_i *= 10ll;
    while (j--) pow_j *= 10ll;
    digit_i = (num / pow_i) % 10ll;
    digit_j = (num / pow_j) % 10ll;

    return num - (digit_i * pow_i + digit_j * pow_j) 
        + (digit_i * pow_j + digit_j * pow_i);
}

int main() {
    freopen("cooking_the_books.txt", "r", stdin);
    freopen("cooking_the_book_out.txt", "w", stdout);

    int T;
    cin >> T;
    for (int t = 1; t <= T; t++) {
        long long N;
        cin >> N;

        long long len = 1ll, sup = 10ll, inf = 1ll;
        while (sup < N) {
            len++;
            sup *= 10ll;
            inf *= 10ll;
        }

        vector<long long> numbers = { N };
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                long long num = swap(N, i, j);
                if (num >= inf) {
                    numbers.push_back(num);
                }
            }
        }

        printf("Case #%d: %lld %lld\n", t, 
            min_element(numbers), max_element(numbers));
    }
}
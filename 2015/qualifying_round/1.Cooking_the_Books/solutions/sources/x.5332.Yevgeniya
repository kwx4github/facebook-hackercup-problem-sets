#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <complex>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <complex>
#include <stdio.h>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <stack>
#ifdef SAMMAX
#include <ctime>
clock_t beg;
#endif

const double pi = 3.1415926535897932384626433832795;
double EPS = 10e-9;
const int INF = 1000000000;

#pragma comment(linker, "/stack:1500000000")
#define sz size()
#define mp make_pair
#define pb push_back
#define ALL(a) (a).begin(), (a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define MEMS(a,b) memset(a,b,sizeof(a))
#define sqr(a) ((a)*(a))
#define HAS(a,b) ((a).find(b)!=(a).end())
#define MAX(a,b) ((a>=b)?a:b)
#define MIN(a,b) ((a<=b)?a:b)
#define ABS(a) ((a<0)?-(a):a)
#define FOR(i,a,b) for (int i=(a);i<(b);++i)
#define FORD(i,a,b) for (int i=(a);i>(b);--i)
#define VVI vector < vector <int> >
#define VI vector <int>
#define LL long long
#define U unsigned
#define pnt pair <int,int>
LL gcd(LL a, LL b){ if (a == 0) return b; return gcd(b%a, a); }
LL lcm(LL a, LL b){ return a / gcd(a, b) * b; }

using namespace std;

void ifd() {
#ifdef SAMMAX
//    freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    beg = clock();
#else
    //freopen("kimbits.in", "r", stdin);
    //freopen("kimbits.out", "w", stdout);
#endif
}
void tme() {
#ifdef SAMMAX
    fprintf(stderr, "*** Total time: %.3lf ***\n", 1.0*(clock() - beg) / CLOCKS_PER_SEC);
#endif
}




int main() {
    int T;
    cin >> T;
    for (int p = 0; p < T; p++) {
        stringstream ss;
        LL n;
        cin >> n;
        if (n > 10) {
            ss << n;
            string num = ss.str(), sm = ss.str(), larg = ss.str();
            
            for (int i = 0; i < num.size() - 1; i++) {
                if(num[i + 1] > num[i]) {
                    swap(num[i], num[i+1]);
                    break;
                }
            }
            larg = num;
            num = ss.str();
            
            for (int i = 0; i < num.size() - 1; i++) {
                if(num[i+1] == '0' && i == 0)
                    continue;
                if(num[i + 1] < num[i]) {
                    swap(num[i], num[i+1]);
                    break;
                }
            }
            sm = num;
            cout << "Case #" << p+1 << ": " << sm << " " << larg << endl;
        } else {
            printf("Case #%d: %lld %lld\n", p+1, n, n);
        }
    }
    
    return 0;
}



























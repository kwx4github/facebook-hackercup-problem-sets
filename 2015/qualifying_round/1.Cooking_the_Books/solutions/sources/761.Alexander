#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cassert>

template <class Comparator>
std::string Min(const std::string& n, const Comparator& comp)
{
    size_t minI = 0; 
    size_t minJ = 0;
    std::string min = n;
    std::string newMin = n;
        
    const auto TEST_LESS = [&](size_t newMinI, size_t newMinJ, size_t minI, size_t minJ) {
        std::swap(min[minI], min[minJ]);
        std::swap(newMin[newMinI], newMin[newMinJ]);
        bool res = comp(newMin, min);
        std::swap(min[minI], min[minJ]);
        std::swap(newMin[newMinI], newMin[newMinJ]);
        return res;
    };

    for (size_t i = 0; i < n.size(); ++i) {
        for (size_t j = i + 1; j < n.size(); ++j) {
            if (i != 0 || n[j] != '0') {
                if (TEST_LESS(i, j, minI, minJ)) {
                    minI = i;
                    minJ = j;
                }
            }
        }
    }
    std::swap(min[minI], min[minJ]);
    return min;
}

int main()
{
    size_t T = 0;
    std::cin >> T;
    for (size_t t = 0; t < T; ++t) {
        std::string n;
        std::cin >> n;
        std::cout << "Case #" << (t + 1) << ": " 
             << Min(n, std::less<std::string>()) << " " 
             << Min(n, std::greater<std::string>()) << std::endl;
    }
    return 0;
}



package cookingthebooks;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class CookingBooks {

   private static int skippedNumbersMax = 0;
   private static int skippedNumbersMin = 0;

   public static void main(String args[]) throws IOException {
      List<String> in;
      FileWriter out = new FileWriter("src/cookingthebooks/output.txt");

      try {
         in = Files.readAllLines(Paths.get("src/cookingthebooks/input.txt"));
         int lines = Integer.parseInt(in.get(0));

         for (int i = 1; i <= lines; i++) {
            String normalValue = in.get(i);

            String minorValue = getMinorValue(normalValue);
            String maxValue = getMaxValue(normalValue);

            out.write("Case #" + i + ": " + minorValue + " " + maxValue);
            System.out.println(("Case #" + i + ": " + minorValue + " " + maxValue));
            if (i != lines){
               out.write(System.lineSeparator());
            }
         }
      }finally {
         if (out != null) {
            out.close();
         }
      }
   }

   private static String getMinorValue(String normalValue) {
      if (normalValue.length() == 1) {
         return normalValue;
      }

      if (normalValue.length() <= 2) {
         if (normalValue.contains("0")){
            return normalValue;
         }else {
            String inverse = new StringBuilder(normalValue).reverse().toString();
            return Integer.parseInt(normalValue) > Integer.parseInt(inverse)? normalValue : inverse;
         }
      }

      skippedNumbersMin = 0;
      String smallestToSwap = findSmallestToSwap(normalValue);
      if (smallestToSwap == null) {
         return normalValue;
      }
      int offset = normalValue.lastIndexOf(smallestToSwap);

      String swap = String.valueOf(normalValue.charAt(skippedNumbersMin));
      StringBuilder result = new StringBuilder(normalValue);

      result.deleteCharAt(skippedNumbersMin);
      result.insert(skippedNumbersMin, smallestToSwap);

      result.deleteCharAt(offset);
      result.insert(offset, swap);

      return result.toString();
   }

   private static String getMaxValue(String normalValue) {
      if (normalValue.length() == 1) {
         return normalValue;
      }

      if (normalValue.length() <= 2) {
         String inverse = new StringBuilder(normalValue).reverse().toString();
         return Integer.parseInt(normalValue) > Integer.parseInt(inverse)? normalValue : inverse;
      }

      skippedNumbersMax = 0;
      String biggerToSwap = findBiggerToSwap(normalValue);
      int offset = normalValue.lastIndexOf(biggerToSwap);

      String swap = String.valueOf(normalValue.charAt(skippedNumbersMax));
      StringBuilder result = new StringBuilder(normalValue);

      result.deleteCharAt(skippedNumbersMax);
      result.insert(skippedNumbersMax, biggerToSwap);

      result.deleteCharAt(offset);
      result.insert(offset, swap);

      return result.toString();
   }

   private static String findSmallestToSwap(String normalValue) {
      String smallest = null;
      int index = 0;

      for (int i = 0; i < normalValue.length(); i++) {
         String number = String.valueOf(normalValue.charAt(i));
         if (!"0".equals(number) && (smallest == null || Integer.parseInt(smallest) > Integer.parseInt(number))) {
            smallest = number;
            index = i;
         }
      }
      if (index == 0 && normalValue.length() > 1) {
         skippedNumbersMin++;
         return findSmallestToSwap(normalValue.substring(1));
      } else {
         return smallest;
      }
   }

   private static String findBiggerToSwap(String normalValue) {
      String bigger = null;
      int index = 0;

      for (int i = 0; i < normalValue.length(); i++) {
         String number = String.valueOf(normalValue.charAt(i));
         if (bigger == null || Integer.parseInt(bigger) < Integer.parseInt(number)) {
            bigger = number;
            index = i;
         }
      }
      if (index == 0 && normalValue.length() > 1) {
         skippedNumbersMax++;
         return findBiggerToSwap(normalValue.substring(1));
      } else {
         return bigger;
      }
   }
}

/**
 *
 */
package fb2015;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;

/**
 * @author dattran
 *
 */
public class CookingTheBooks {

	/**
	 * @param args
	 * @throws FileNotFoundException
	 * @throws UnsupportedEncodingException
	 */
	public static void main(final String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		String inputFileName = "/home/dattran/Downloads/cooking_the_books.txt";
		String outputFileName = "/home/dattran/Downloads/output.txt";
		Scanner in = new Scanner(new FileReader(inputFileName));
		PrintWriter writer = new PrintWriter(outputFileName, "UTF-8");
		in.next();
		int caseNr = 1;
		CookingTheBooks cb = new CookingTheBooks();
		while (in.hasNext()) {
			String string = in.next();
			String outputLine = cb.printLineOutput(caseNr, string);
			writer.println(outputLine);
			caseNr = caseNr + 1;
		}
		writer.close();

	}

	private String arrayToString(final int[] arr) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < arr.length; i++) {
			sb.append(arr[i]);
		}
		return sb.toString();
	}

	private String printLineOutput(final int caseNr, final String line) {
		StringBuilder sb = new StringBuilder("Case #");
		sb.append(caseNr);
		sb.append(": ");
		int[] maxArr = stringToArray(line);
		int[] minArr = new int[maxArr.length];
		System.arraycopy(maxArr, 0, minArr, 0, maxArr.length);
		sb.append(arrayToString(swapMin(minArr, 0)));
		sb.append(" ");
		sb.append(arrayToString(swapMax(maxArr, 0)));
		return sb.toString();

	}

	private int[] stringToArray(final String line) {
		int[] arr = new int[line.length()];
		for (int i = 0; i < line.length(); i++) {
			arr[i] = Character.digit(line.charAt(i), 10);
		}
		return arr;
	}

	private int[] swapMax(final int[] arr, final int sourceIndex) {
		if (sourceIndex == (arr.length - 1)) {
			return arr;
		}
		int maxElement = arr[sourceIndex];
		int targetIndex = sourceIndex;
		for (int i = sourceIndex; i < arr.length; i++) {
			if (maxElement <= arr[i]) {
				maxElement = arr[i];
				targetIndex = i;
			}
		}
		if (maxElement == arr[sourceIndex]) {
			return swapMax(arr, sourceIndex + 1);
		}
		arr[targetIndex] = arr[sourceIndex];
		arr[sourceIndex] = maxElement;
		return arr;
	}

	private int[] swapMin(final int[] arr, final int sourceIndex) {
		if (sourceIndex == (arr.length - 1)) {
			return arr;
		}
		int minElement = arr[sourceIndex];
		int targetIndex = sourceIndex;
		for (int i = sourceIndex; i < arr.length; i++) {
			if ((minElement > arr[i]) && (arr[i] > 0)) {
				minElement = arr[i];
				targetIndex = i;
			}
		}
		if (minElement == arr[sourceIndex]) {
			return swapMin(arr, sourceIndex + 1);
		}
		arr[targetIndex] = arr[sourceIndex];
		arr[sourceIndex] = minElement;
		return arr;
	}

}

#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <map>
#include <cmath>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define FOR(i, A, B) for(int i=(A); i<(B); i++)
#define REP(i, N) for(int i=0; i<(N); i++)
#define SZ(v) ((int)(v).size())
#define ALL(v) (v).begin(), (v).end()
#define SORT(v) sort(ALL(v))
#define MP make_pair
#define PB push_back
#define VI vector<int>
#define VS vector<string>
#define PII pair<int, int>
#define X first
#define Y second
#define LL long long

int aabs(int a) { return (a<0)?-a:a; }
int mmax(int a, int b) { return (a>b)?a:b; }
int mmin(int a, int b) { return (a<b)?a:b; }

int N, M, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
int B1[1000100], B2[1000100];
int mapa1[2000100], mapa2[2000100];
map<int, int> m;


int main()
{
	int T;
	cin >> T;
	string n;
	
	REP(caso, T) {
		cin >> n;
		
		// the smaller
		string smaller = n;
		REP(i, SZ(n)) {
			int k = i;
			FOR(j, i+1, SZ(n)) {
				if(n[j] != '0' and n[j] < n[k]) k = j;
			}
			
			if(n[k] < n[i]) {
				smaller[i] = n[k];
				smaller[k] = n[i];
				break;
			}
		}
		
		// the bigger
		string bigger = n;
		REP(i, SZ(n)) {
			int k = i;
			FOR(j, i+1, SZ(n)) {
				if(n[j] != '0' and n[j] > n[k]) k = j;
			}
			
			if(n[k] > n[i]) {
				bigger[i] = n[k];
				bigger[k] = n[i];
				break;
			}
		}
		
		cout << "Case #" << caso+1 << ": " << smaller << " " << bigger << endl;
	}
	
}










#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys, os, shutil
import subprocess
import time
import math
import random

TESTGROUPS = 1

def uniSolve(N, c):
  digits = list(map(lambda c: int(c), str(N)))
  
  for p0 in range(len(digits)):
    p1 = None
    for p1c in range(len(digits) - 1, p0 - 1, -1):
      if digits[p1c] == 0: continue
      if p1 == None or c(digits[p1c], digits[p1]): p1 = p1c
    if p1 != None:
      digits[p0], digits[p1] = digits[p1], digits[p0]
      return int(''.join(map(str, digits)))
  
  return N

def solve(iData):
  N = iData[0]
  
  lo = uniSolve(N, lambda a, b: a < b)
  hi = uniSolve(N, lambda a, b: a > b)
  
  return [lo, hi]

def readTestInput(IN):
  N = int(IN.readline())
  return [N]

def writeTestInput(OUT, iData):
  N = iData[0]
  OUT.write('%d\n' % N)

def readTestOutput(IN):
  lo, hi = map(int, IN.readline().strip().split())
  return [lo, hi]

def writeTestOutput(OUT, oData):
  lo, hi = oData
  OUT.write('%d %d\n' % (lo, hi))

def readAllTests(inputFileName):
  IN = open(inputFileName, 'rt')
  T = int(IN.readline())
  allTests = []
  for i in range(T): allTests.append(readTestInput(IN))
  IN.close()
  return allTests

def prepareInputParts():
  inputFileName = testName + '.in'
  
  if not os.path.exists(subtestsDir):
    os.mkdir(subtestsDir)
    enumeratedTests = list(enumerate(readAllTests(inputFileName)))
    for i in range(TESTGROUPS):
      testGroupFileName = os.path.join(subtestsDir, '%s_%.1d.in' % (testName, i))
      OUT = open(testGroupFileName, 'wt')
      OUT.write('%d\n' % len(enumeratedTests[i::TESTGROUPS]))
      for testId, iData in enumeratedTests[i::TESTGROUPS]:
        OUT.write('%d\n' % testId)
        writeTestInput(OUT, iData)
      OUT.close()

def runAllTests():
  processes = []
  for i in range(TESTGROUPS): processes.append(subprocess.Popen(sys.argv + [str(i)]))
  for i in range(TESTGROUPS): processes[i].wait()

def solveGroup(testGroupFileName):
  testGroupOutputFileName = testGroupFileName[:-3] + '.out'
  IN = open(testGroupFileName, 'rt')
  OUT = open(testGroupOutputFileName, 'wt')
  testsInGroup = int(IN.readline())
  OUT.write('%d\n' % testsInGroup)
  for i in range(testsInGroup):
    testId = int(IN.readline())
    iData = readTestInput(IN)
    oData = solve(iData)
    OUT.write('%d\n' % testId)
    writeTestOutput(OUT, oData)
  IN.close()

def mergeOutputs():
  outputs = []
  for i in range(TESTGROUPS):
    testGroupOutputFileName = os.path.join(subtestsDir, '%s_%.1d.out' % (testName, i))
    IN = open(testGroupOutputFileName, 'rt')
    testsInGroup = int(IN.readline())
    for i in range(testsInGroup):
      testId = int(IN.readline())
      oData = readTestOutput(IN)
      while testId >= len(outputs): outputs.append(None)
      outputs[testId] = oData
    IN.close()
  outputFileName = testName + '.out'
  OUT = open(outputFileName, 'wt')
  for testId, oData in enumerate(outputs):
    OUT.write('Case #%d: ' % (testId + 1))
    writeTestOutput(OUT, oData)
  OUT.close()

os.chdir(os.path.dirname(sys.argv[0]))

assert __name__ == '__main__'
assert len(sys.argv) in (2, 3)

testName = sys.argv[1]
subtestsDir = testName + '-testgroups'

if len(sys.argv) == 2:
  if os.path.exists(subtestsDir): shutil.rmtree(subtestsDir)
  prepareInputParts()
  runAllTests()
  mergeOutputs()
elif len(sys.argv) == 3:
  testGroupFileName = os.path.join(subtestsDir, '%s_%.1d.in' % (testName, int(sys.argv[2])))
  solveGroup(testGroupFileName)

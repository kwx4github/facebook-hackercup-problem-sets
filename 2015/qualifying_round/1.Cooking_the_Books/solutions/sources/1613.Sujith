//
//  main.m
//  Problem_1
//
//  Created by Sujith Achuthan on 1/8/15.
//  Copyright (c) 2015 Sujith Achuthan. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface Utility : NSObject

@end

@implementation Utility : NSObject

+ (NSDictionary*)findLargest:(NSArray*)numberBig
{
    NSNumber *max = numberBig[0];
    int index = 0;
    
    for (int i=1;i<numberBig.count;i++)
    {
        if (max<numberBig[i])
        {
            max = numberBig[i];
            index = i;
        }
    }
    
    NSDictionary *returnValue = [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInt:index],@"index",max,@"value", nil];
    
    return returnValue;
}

+ (NSDictionary*)findLowest:(NSArray*)numberSmall acceptZero:(BOOL)acceptZero
{
    NSNumber *min = numberSmall[0];
    int index = 0;
    
    for (int i=1;i<numberSmall.count;i++)
    {
        if (min>numberSmall[i] && [[numberSmall objectAtIndex:i] intValue] != 0 && acceptZero == NO)
        {
            min = numberSmall[i];
            index = i;
        }
        else if(min>numberSmall[i] && acceptZero == YES)
        {
            min = numberSmall[i];
            index = i;
        }

    }
    
    NSDictionary *returnValue = [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInt:index],@"index",min,@"value", nil];
    
    return returnValue;

}

@end


int main(int argc, const char * argv[]) {
    @autoreleasepool {
        int n;
        scanf("%d",&n);
        for(int i=0;i<n;i++)
        {
            long int tempVar;
            
            scanf("%ld", &tempVar);
            
            NSMutableArray *numberSmall = [[NSMutableArray alloc] init];
            NSMutableArray *numberBig = [[NSMutableArray alloc] init];
            
            NSString *tempString = [NSString stringWithFormat:@"%ld", tempVar];
            
            
            for(int k=0;k<tempString.length;k++)
            {
                [numberBig addObject:[NSString stringWithFormat:@"%c", [tempString characterAtIndex:k]]];
                [numberSmall addObject:[NSString stringWithFormat:@"%c", [tempString characterAtIndex:k]]];
            }
            
            NSNumber *lowest = 0;
            NSInteger lowestIndex = 0;
            NSInteger lowestPosition = -1;
            NSNumber *largest = 0;
            NSInteger largestIndex = 0;
            NSInteger largestPosition = -1;
            
            //Finding Lowest
            for (int j=0;j<numberSmall.count;j++)
            {
                NSArray *subArray = [numberSmall subarrayWithRange:NSMakeRange(j, numberSmall.count-j)];
                NSDictionary *result = [Utility findLowest:subArray acceptZero:(j==0)?NO:YES];
                
                if ([[result valueForKey:@"value"] intValue] != 0 || j!=0)
                {
                    lowest = [result valueForKey:@"value"];
                    
                    int index = [[result valueForKey:@"index"] intValue];
                    
                    if (index != 0)
                    {
                        lowestPosition = j;
                        break;
                    }
                }
            }
            
            //Finding Lowest Index
            for(int k=(int)numberSmall.count-1;k>=0;k--)
            {
                NSString *temp12 = [numberSmall objectAtIndex:k];
                
                if ([temp12 intValue] == [lowest intValue])
                {
                    lowestIndex = k;
                    break;
                }
            }
            
            //Finding Largest
            for (int j=0;j<numberBig.count;j++)
            {
                NSArray *subArray = [numberBig subarrayWithRange:NSMakeRange(j, numberBig.count-j)];
                NSDictionary *result = [Utility findLargest:subArray];
                
                largest = [result valueForKey:@"value"];
                
                int index = [[result valueForKey:@"index"] intValue];
                
                if (index != 0)
                {
                    largestPosition = j;
                    break;
                }
            }
            
            //Finding Largest Index
            for(int k=(int)numberBig.count-1;k>=0;k--)
            {
                NSString *temp12 = [numberBig objectAtIndex:k];
                
                if ([temp12 intValue] == [largest intValue])
                {
                    largestIndex = k;
                    break;
                }
            }
            
            NSNumber *temp123 =0;
            
            if (lowestPosition >= 0)
            {
                temp123 =numberSmall[lowestIndex] ;
                numberSmall[lowestIndex] = numberSmall[lowestPosition];
                numberSmall[lowestPosition] = temp123;
            }
            
            if (largestPosition>=0)
            {
                temp123 =numberBig[largestIndex] ;
                numberBig[largestIndex] = numberBig[largestPosition];
                numberBig[largestPosition] = temp123;
            }
            
            NSString *lowestString = [numberSmall componentsJoinedByString:@""];
            NSString *largestString = [numberBig componentsJoinedByString:@""];
            
            if (i==n-1)
            {
                printf("Case #%d: %s %s", i+1, [lowestString UTF8String], [largestString UTF8String]);
            }
            else
            {
                printf("Case #%d: %s %s\n", i+1, [lowestString UTF8String], [largestString UTF8String]);
            }

        }
    }
    return 0;
}

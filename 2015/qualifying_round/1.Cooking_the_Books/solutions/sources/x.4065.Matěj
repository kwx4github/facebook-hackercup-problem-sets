{-# OPTIONS_GHC -Wall #-}
module Main where

import Control.Applicative ((<$>))

swap :: Char -> String -> String
swap _ []     = []
swap m (x:xs) = m : (reverse . f . reverse) xs
    where
        f :: String -> String
        f [] = []
        f (y:ys) = if y == m
                        then x : ys
                        else y : f ys

minMax :: String -> (Char, Char)
minMax []     = (undefined, undefined)
minMax [x]    = (x, x)
minMax (x:xs) = foldr (\c (min', max') ->
                    if c == '0'
                        then (min', max')
                        else (min c min', max c max')) (x, x) xs

compute :: String -> IO (String, String)
compute s@"0" = return (s, s)
compute s = do
        let (minDigit, maxDigit) = minMax s
        return (swap minDigit s, swap maxDigit s)

printResult :: Int -> (String, String) -> IO ()
printResult casen (min', max') =
        putStrLn $ "Case #" ++ show casen ++ ": " ++ min' ++ " " ++ max'

main :: IO ()
main = do
        cases <- read <$> getLine :: IO Int
        mapM_ (\i -> getLine >>= compute >>= printResult i) [1..cases]
        return ()


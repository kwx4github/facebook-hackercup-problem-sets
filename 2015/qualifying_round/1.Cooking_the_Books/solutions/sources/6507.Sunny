// profile : sunnyO4
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <cstdio>
#include <cmath>
#include <bitset>
#include <cassert>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <ctime>
// Include all header files
// #include <bits/stdc++.h>

using namespace std;

#define DEBUG

#ifdef DEBUG

    #define debug(args...)     (Debugger()) , args

    class Debugger
    {
        public:
        Debugger(const std::string& _separator = ", ") :
        first(true), separator(_separator){}

        template<typename ObjectType>
        Debugger& operator , (const ObjectType& v)
        {
            if(!first)
                std:cerr << separator;
            std::cerr << v;
            first = false;
            return *this;
        }
        ~Debugger() {  std:cerr << endl;}

        private:
        bool first;
        std::string separator;
    };
#else
    #define debug(args...)                  // Just strip off all debug tokens
#endif

// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd
#define checkbit(n,b)                ( (n >> b) & 1)

// Useful constants
#define INF         (int)1E9
#define EPS         1.0E-8
#define eql(a,b)    fabs(a-b) < EPS
#define mp          make_pair
#define pb          push_back
#define ppb         pop_back
#define sd          second
#define fs          first

// Useful container manipulation / traversal macros
#define FOR(i,a,b)                  for(int i=a;i<b;i++)
#define RFOR(i,a,b)                 for(int i=a;i>=b;i--)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define fill(a,v)                   memset(a, v, sizeof(a))
#define foreach(v, c)               for(typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)


// Input macros
#define s(n)                        scanf("%d",&n)
#define su(n)                       scanf("%u",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define sc(n)                       scanf("%c",&n)
#define ss(n)                       scanf("%s",&n)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<int,int> pint;
typedef vector<string> vs;
typedef vector<int> vi;

/*--------------- Main Code here  -------------------------------*/


#define SIZE        40000
#define nmax        100010
#define mmax        100010

struct Num{
    int n,pos;
};

Num digit[10];
int arr[10];
int posholder[10][2];

bool cmp(Num a, Num b){
    return a.n < b.n;
}

int main()
{

    //freopen("cooking_the_books.txt","r",stdin); freopen("out.in","w",stdout);

    int tc,n;
    s(tc);
    FOR(i,1, tc+1){

        s(n);
        printf("Case #%d: ",i);
        int pos=0, temp;

        temp = n;
        if (n == 0)
            printf("%d %d\n",n,n);
        else if(n/10 == 0)
                printf("%d %d\n",n,n);
        else{

            while(n/10 != 0){
                arr[pos++] = n % 10;
                n = n/10;
            }
            arr[pos++] = n % 10;

            //debug(temp,pos);
            int ind = 0;
            FOR(t,0,10)
            {
                posholder[arr[t]][0] = 0;
                posholder[arr[t]][1] = 0;
            }

            RFOR(j,pos-1,0){
                digit[ind].n = arr[j];
                digit[ind].pos = ind;
                ind++;
                posholder[arr[j]][0] = pos-j;
                posholder[arr[j]][1]++;
            }

            sort(digit, digit+pos, cmp);


            int min[10], max[10];

            int ti= 0;
            RFOR(k,pos-1,0){
                min[ti] = max[ti] = arr[k];
                ti++;
            }

            bool flagmin = true, flagmax =  true;

            if (flagmin)
            {
                int step,zeropos,tempos, numpos=0;
                // if first min element is less than 1st digit of n
                if (digit[0].n < min[0] && digit[0].n != 0)
                {
                    step = posholder[digit[0].n][0];
                    int t = min[0];
                    min[0] = digit[0].n;
                    min[step-1] = t;
                    flagmin = false;
                }
                else if (digit[0].n == 0)
                {
                    zeropos = posholder[digit[0].n][0];
                    tempos = 1;
                    while(digit[tempos].n == 0)
                        tempos++;

                    if (digit[tempos].n < min[0])
                    {
                        step = posholder[digit[tempos].n][0];
                        int t = min[0];
                        min[0] = digit[tempos].n;
                        min[step-1] = t;
                        flagmin = false;
                    }
                    else{
                        numpos++; step = 0;
                        //debug(numpos,min[numpos],step, digit[step].n);
                        if (digit[step].pos == 0)
                            step++;
                        if (min[numpos] > digit[step].n)
                        {
                                int t_step = posholder[digit[step].n][0];
                                int t = min[numpos];
                                min[numpos] = digit[step].n;
                                min[t_step-1] = t;
                                flagmin = false;
                        }
                        else{
                            //debug(numpos,min[numpos],step, digit[step].n);
                            numpos++; step++;
                            while(numpos < pos && step < pos){
                               //debug(numpos,min[numpos],step, digit[step].n);
                                if(digit[step].pos == 0)
                                    step++;
                                if (min[numpos] > digit[step].n)
                                {
                                    int t_step = posholder[digit[step].n][0];
                                    int t = min[numpos];
                                    min[numpos] = digit[step].n;
                                    min[t_step-1] = t;
                                    flagmin = false;
                                    break;
                                }
                                numpos++; step++;
                            }
                        }
                    }
                } // end else if for zero case
                else{
                    numpos=1; step=1;
                    while(numpos < pos){
                       //debug(numpos,min[numpos],step, digit[step].n);
                        if (min[numpos] > digit[step].n)
                        {
                            int t_step = posholder[digit[step].n][0];
                            int t = min[numpos];
                            min[numpos] = digit[step].n;
                            min[t_step-1] = t;
                            flagmin = false;
                            break;
                        }
                        numpos++; step++;
                    }
                }
            } // end flagmin
            if (flagmax)
            {
                int numpos = 0, step = pos-1;
                 //debug(numpos,max[numpos],step, digit[step].n);
                if (max[numpos] < digit[step].n)
                {
                    int t_step = posholder[digit[step].n][0];
                    int t = max[numpos];
                    max[numpos] = digit[step].n;
                    max[t_step-1] = t;
                    flagmin = false;
                }
                else{
                    numpos++; step--;
                    while(numpos < pos){
                       //debug(numpos,max[numpos],step, digit[step].n);
                        if (max[numpos] < digit[step].n)
                        {
                            int t_step = posholder[digit[step].n][0];
                            int t = max[numpos];
                            max[numpos] = digit[step].n;
                            max[t_step-1] = t;
                            flagmin = false;
                            break;
                        }
                        numpos++; step--;
                    }
                }
            } // end flagmax

            //printf("Min num::\n");
            FOR(k,0,pos)
                printf("%d",min[k]);
            printf(" ");
            FOR(k,0,pos)
                printf("%d",max[k]);
            printf("\n");
        }

    }

    return 0;
}

#include <iostream>

using namespace std;


bool SwapForSmaller(int a,int b){
	if(b<a)
		return true;
}


int main(){

	int T;
	int N;

	int Min;
	int Max;

	cin >> T;
	for(int t=1;t<=T;++t){
		cin >> N;
		Min = N;
		int digits[64];
		int digitsMin[64];
		int digitsMax[64];
		int d=0;
		while( N>0 ){
			d++;
			N /= 10;
		}
		N = Min;
		for(int i=d;i>0;i--){
			digits[i-1] = N-10*(N/10);
			digitsMin[i-1] = digits[i-1];
			digitsMax[i-1] = digits[i-1];
			N /= 10;
		}

		//For Min: if first digit  = 1, try 1st non-0 digit with later smallest digit.
    //         if first digit != 1, try it with later smaller digit  
		
		if(Min!=0){
			bool swap_success = false;
			if(digits[0]>1){
				int s=0;
				for(int i=1;i<d;i++){
					if(digits[i]!=0 && digits[i]<digits[s])
						s=i;
				}
				if(s>0){
					swap_success = true;
					digitsMin[0] = digits[s];
					digitsMin[s] = digits[0];
				}
			}
			if(digits[0]==1 || !swap_success){
				//Try find smaller than d
				int swap1 = 0;
				int swap2 = 0;
				for(int i=1;i<d;i++){
					swap2=i;
					for(int j=i+1;j<d;j++){
						if(digits[j]<digits[swap2]){
							swap2 = j;
							swap1 = i;
						}
					}
					if(swap1>0)
						break;
				}
				if(swap1>0){
					digitsMin[swap1] = digits[swap2];
					digitsMin[swap2] = digits[swap1];
					swap_success = true;
				}
			}

			//Max

			int swap1 = d;
			int swap2 = d;
			for(int i=0;i<d;i++){
				swap2=i;
				for(int j=i+1;j<d;j++){
					if(digits[j]>digits[swap2]){
						swap2 = j;
						swap1 = i;
					}
				}
				if(swap1<d)
					break;
			}
			if(swap1<d){
				digitsMax[swap1] = digits[swap2];
				digitsMax[swap2] = digits[swap1];
			}

		}

		cout<<"Case #"<<t<<": ";
		for(int i=0;i<d;i++){
			cout<<digitsMin[i];
		}
		if(d==0)
			cout<<0;
		cout<<" ";
		for(int i=0;i<d;i++){
			cout << digitsMax[i];
		}
		if(d==0)
			cout<<0;
		cout << endl;
	}

	return 0;
}

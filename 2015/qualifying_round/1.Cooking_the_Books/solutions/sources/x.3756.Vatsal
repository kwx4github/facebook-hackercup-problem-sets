//
//  main.cpp
//  hackerrcup
//
//  Created by Vatsal Chanana on 09/01/15.
//  Copyright (c) 2015 VC. All rights reserved.
//

#include<iostream>
#include<vector>
#include<cstdio>
#include<algorithm>
#include<utility>
#include<set>
#include<map>
#include<cstring>
#include<cmath>
#include<string>
#include<cstdlib>

using namespace std;


static struct IO {
    char tmp[1 << 10];
    
    // fast input routines
    char cur;
    
    //#define nextChar() (cur = getc_unlocked(stdin))
    //#define peekChar() (cur)
    inline char nextChar() { return cur = getc_unlocked(stdin); }
    inline char peekChar() { return cur; }
    
    inline operator bool() { return peekChar(); }
    inline static bool isBlank(char c) { return (c < '-' && c); }
    inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
    
    inline IO& operator >> (char & c) { c = nextChar(); return *this; }
    
    inline IO& operator >> (char * buf) {
        if (skipBlanks()) {
            if (peekChar()) {
                *(buf++) = peekChar();
                while (!isBlank(nextChar())) *(buf++) = peekChar();
            } *(buf++) = 0; } return *this; }
    
    inline IO& operator >> (string & s) {
        if (skipBlanks()) {	s.clear(); s += peekChar();
            while (!isBlank(nextChar())) s += peekChar(); }
        return *this; }
    
    inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
    
#define defineInFor(intType) \
inline IO& operator >>(intType & n) { \
if (skipBlanks()) { \
int sign = +1; \
if (peekChar() == '-') { \
sign = -1; \
n = nextChar() - '0'; \
} else \
n = peekChar() - '0'; \
while (!isBlank(nextChar())) { \
n += n + (n << 3) + peekChar() - 48; \
} \
n *= sign; \
} \
return *this; \
}
    
    defineInFor(int)
    defineInFor(unsigned int)
    defineInFor(long long)
    
    // fast output routines
    
    //#define putChar(c) putc_unlocked((c), stdout)
    inline void putChar(char c) { putc_unlocked(c, stdout); }
    inline IO& operator << (char c) { putChar(c); return *this; }
    inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
    
    inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
    
    char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
    inline IO& operator << (double d) { return (*this) << toString(d); }
    
    
#define defineOutFor(intType) \
inline char * toString(intType n) { \
char * p = (tmp + 30); \
if (n) { \
bool isNeg = 0; \
if (n < 0) isNeg = 1, n = -n; \
while (n) \
*--p = (n % 10) + '0', n /= 10; \
if (isNeg) *--p = '-'; \
} else *--p = '0'; \
return p; \
} \
inline IO& operator << (intType n) { return (*this) << toString(n); }
    
    defineOutFor(int)
    defineOutFor(long long)
    
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;


int main()
{
    int t;
    cin>>t;
    for(int i=1;i<=t;i++)
    {
        string s,maxs,mins;
        cin>>s;
        int l=s.length();
        int minv=100000000;
        int pos=0;
        int maxv=-1;
        int mpos=0;
        for(int j=0;j<l;j++)
        {
            if(s[j]=='0')
            {
                continue;
            }
            if(s[j]<=minv)
            {
                pos=j;
                minv=s[j];
            }
            if(s[j]>=maxv)
            {
                mpos=j;
                maxv=s[j];
            }
        }
        mins=s;
        if(minv!=100000000)
        {
            char t=mins[0];
            mins[0]=mins[pos];
            mins[pos]=t;
        }
        maxs=s;
        if(maxv!=-1)
        {
        char t=maxs[0];
        maxs[0]=maxs[mpos];
            maxs[mpos]=t;}
        cout<<"Case #"<<i<<": "<<mins<<" "<<maxs<<endl;
    }
}

/*
 Case #1: 13524 51324
 Case #2: 798 987
 Case #3: 123 321
 Case #4: 10 10
 Case #5: 5 5

 Case #1: 13524 51324
 Case #2: 798 987
 Case #3: 123 321
 Case #4: 10 10
 Case #5: 5 5
*/
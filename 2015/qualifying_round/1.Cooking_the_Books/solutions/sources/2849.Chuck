/*
ID: j316chuck
PROG: relay
LANG: C++
 */
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <ctime>
#include <climits>

const double Pi=acos(-1.0);
typedef long long LL;

#define Set(a, s) memset(a, s, sizeof (a))
#define Rd(r) freopen(r, "r", stdin)
#define Wt(w) freopen(w, "w", stdout)
using namespace std;

vector<string> mygraph;
string Reverse(string a)
{
    string k;
    for(int i=a.size()-1; i>=0; i--)
    {
        k=k+a[i];
    }
    return k;
}

/*string Swap(string a)
{
   string k=a[1]+a[0];
   return k;

}*/

int main()
{
    Rd("book.in");
    Wt("book.out");
     int N;
    cin>>N;
    for(int z=0; z <N; z++)
    {
        string a;
        cin>>a;
        /*int maximum=0;
        int minimum=11;
        for(int k=0; k<a.size(); k++)
        {

            maximum=max(a[k],maximum);
            minimum=min(minimum,a[k]);
        }
        cout<<maximum<<' '<<minimum<<endl;
        for(int k=0; k<a.size(); k++)
        {
            if(a[k]==maximum&&k!=0)
            {

            }
        }*/
        if(a=="0")
         {
            cout<<"Case #"<<z+1<<": 0 0"<<endl;
            continue;
         }

        string maximum=a;
        string minimum=a;
        for(int i=0; i <a.size(); i++)
        {
            for(int j=0; j<a.size(); j++)
            {
                string k=a;
                if(i!=j)
                {

                   swap(k[i], k[j]);
                   //cout<<k<<endl;
                   maximum=max(k,maximum);
                   if(k[0]!='0')
                   {
                    minimum=min(k,minimum);
                   }
                }
            }
        }

        cout<<"Case #"<<z+1<<": "<<minimum<<' '<<maximum<<endl;

    }


}

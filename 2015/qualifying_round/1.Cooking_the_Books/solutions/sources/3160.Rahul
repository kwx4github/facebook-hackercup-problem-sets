import java.io.BufferedReader;
import java.io.FileReader;

public class Cook {

  public static void main(String[] args) throws Exception {

  	String FILE_NAME = "cooking_the_books_example_input.txt";
  	BufferedReader br = null;
    try {
    	br = new BufferedReader(new FileReader(FILE_NAME));
        int numberOfLines = Integer.parseInt(br.readLine());

        String line = br.readLine();
        int caseNumber = 1;
        while (numberOfLines-- > 0) {
            System.out.println("Case #" + caseNumber++ + ": " + getSmallestOrLargestNumberSingleSwap(line, 1) + " " + getSmallestOrLargestNumberSingleSwap(line, 0));
            line = br.readLine();
        }

    } finally { br.close(); }
  }

  private static String getSmallestOrLargestNumberSingleSwap(String number, int getSmallest) {

  	int[] digitPositionarray = new int[10];

  	// make digit array
  	for (int i = 0; i < number.length(); i++){   
	    int digit = Character.getNumericValue(number.charAt(i));
	    int digitPosition = i + 1 ;
	    digitPositionarray[digit] = digitPosition;
	    //print(digit);
	}

	if (getSmallest == 1) {
		// find min
		for (int i = 0; i < number.length(); i++){  

			int j = (i == 0) ? 1 : 0;
			for (; j < digitPositionarray.length; j++) {
				int currentPosition = i + 1;
				int digit = Character.getNumericValue(number.charAt(i));

				// value in number greater that index of digitPositionarray and currentPosition smaller than digitPositionarray position
				if (digit > j && currentPosition < digitPositionarray[j]) {
					number = changeCharInPosition(currentPosition-1, Integer.toString(j).charAt(0)  , number);
					number = changeCharInPosition(digitPositionarray[j] - 1 , Integer.toString(digit).charAt(0)  , number);
					return number;
				}
			}

		}		
	} else {
		// find max
		for (int i = 0; i < number.length(); i++){  

			for (int j = digitPositionarray.length - 1; j > 0; j--) {
				int currentPosition = i + 1;
				int digit = Character.getNumericValue(number.charAt(i));

				// value in number smaller that index of digitPositionarray and currentPosition smaller than digitPositionarray position
				if (digit < j && currentPosition < digitPositionarray[j]) {
					number = changeCharInPosition(currentPosition-1, Integer.toString(j).charAt(0)  , number);
					number = changeCharInPosition(digitPositionarray[j] - 1 , Integer.toString(digit).charAt(0)  , number);
					return number;
				}
			}
		}	
	}
  	return number;
  }

  private static String changeCharInPosition(int position, char ch, String str){
    char[] charArray = str.toCharArray();
    charArray[position] = ch;
    return new String(charArray);
  }
}
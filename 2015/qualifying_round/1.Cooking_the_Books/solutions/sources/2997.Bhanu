import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;

public class CookingTheBooks {
	public static void main(String[] args) throws FileNotFoundException {
		// InputStream inputStream = System.in;
		InputStream inputStream = new FileInputStream(new File("cooking_the_books.txt"));
//		OutputStream outputStream = System.out;
		OutputStream outputStream = new FileOutputStream(new File("output.txt"));
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Solver solver = new Solver();
		solver.solve(in, out);
		out.close();
	}
}

class Solver {
	private OutputWriter out;
	
	private void swap(int a[], int i, int j) {
		int t= a[j];
		a[j] = a[i];
		a[i] = t;
	}
	
	private int getIntArray(int n, int a[]) {
		int size = 0, cur = 9;
		if(n==0)
			size = 1;
		while(n > 0) {
			size++;
			a[cur--] = n%10;
			n = n/10;
		}
		return size;
	}
	
	private void printArray(int a[], int size) {
		for(int j=10-size;j<10;j++) {
			out.print(a[j]);
		}
	}
	
	private void printGreaterAndSmaller(int n) {
		int i, j, min = 999999999, max = 0, minIndex = -1, size = 0, min1=999999999, max1=0, maxIndex = -1;
		int a[] = new int[10];
		size = getIntArray(n, a);
		for(i=10-size;i<10;i++) {
			if(a[i] > max) {
				max = a[i];
			}
			else if(a[i] <= min) {
				min = a[i];
				minIndex = i;
			}
			
			if(a[i] < min1) {
				min1=a[i];
			}
			else if(a[i] >= max1) {
				max1 = a[i];
				maxIndex = i;
			}
		}
		if(min == 0) {
			int newMin = 999999999;
			for(i=10-size+1;i<10;i++) {
				if(a[i] > 0 && a[i] < a[10-size] && a[i] <= newMin) {
					newMin = a[i];
					minIndex = i;
				}
			}
			if(newMin < 999999999)
				min = newMin;
		}
		boolean swapped = false;		
		if(minIndex != -1) {
			for(i=10-size;i<minIndex;i++) {
				if(i==10-size && min == 0)
					continue;
				
				if(a[i] > min) {
					swapped = true;
					swap(a, minIndex, i);
					break;
				}
			}
		}
		printArray(a, size);
		out.print(" ");
		
		if(swapped) {
			swap(a, i, minIndex);
		}
		if(maxIndex != -1) {
			for(i=10-size;i<maxIndex;i++) {
				if(a[i] < max1) {
					swap(a, maxIndex, i);
					break;
				}
			}
		}
		printArray(a, size);
		out.printLine();
	}

	public void solve(InputReader in, OutputWriter out) {
		this.out = out;
		int t = in.readInt();
		int n;
		for (int m = 0; m < t; ++m) {
			n = in.readInt();
//			out.printLine(n);
			out.print("Case #" + (m+1) + ": ");
			printGreaterAndSmaller(n);
		}
	}

}

class InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public static boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
}

class OutputWriter {
	private final PrintWriter writer;

	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
				outputStream)));
	}

	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}

	public void print(Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}

	public void printLine(Object... objects) {
		print(objects);
		writer.println();
	}

	public void close() {
		writer.close();
	}
}

class IOUtils {
	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

	public static void readIntArrays(InputReader in, int[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readInt();
		}
	}
}
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;

/**
 * Using Java 1.7
 * @author Sam Schwartz
 *
 */
public class CookingTheBooks {
	public static void main(String[] args) throws Exception{

		//File inputFile = new File("cooking_the_books_example_input.txt");
		//File outputFile = new File("cooking_the_books_example_output.txt");
		
		File inputFile = new File("cooking_the_books.txt");
		File outputFile = new File("output.txt");

		Integer[] cases = CookingTheBooks.getCases(inputFile);
		String output = "";

		for(int i=0; i<cases.length; i++){
			String small = CookingTheBooks.getSmallestValue(cases[i]).toString();
			String large = CookingTheBooks.getLargestValue(cases[i]).toString();
			String finalString = "Case #"+(i+1)+": "+small+" "+large;
			System.out.println(finalString);
			output += finalString+"\n";
		} 
		output = output.trim();
		CookingTheBooks.writeToFile(outputFile, output);

	}
	
	public static Integer getSmallestValue(Integer i){
		return Integer.parseInt(getSmallestValue(i.toString()));
	}
	public static Integer getLargestValue(Integer i){
		return Integer.parseInt(getLargestValue(i.toString()));
	}
	
	private static String getSmallestValue(String d){
		if(d.length()<=1){
			return d;
		}
		Character[] sortedChars = sortDistinctSmallToLarge(d);

		char smallestValue = sortedChars[0];
		int posOfSmallestValue = d.indexOf(smallestValue);
		String toReturn;
		if(d.charAt(0)==sortedChars[0]){
			String sub = d.substring(1);
			toReturn = d.substring(0, 1)+getSmallestValue(sub);
		}
		else{
			toReturn= swap(0, posOfSmallestValue, d);
		}

		if(areSameScale(Integer.parseInt(toReturn), Integer.parseInt(d))){
			return toReturn;
		}
		else{
			toReturn = d;
			int curMin = Integer.parseInt(toReturn);
			String temp = "";
			for(int index =1; index<sortedChars.length; index++){
				temp =swap(0, d.lastIndexOf(sortedChars[index]), d);
				int tempIntForm = Integer.parseInt(temp);
				if(tempIntForm<curMin){
					curMin = tempIntForm;
					toReturn = temp;
				}
			}
			if(toReturn.compareTo(d)!=0){
				return toReturn;
			}
			else{
				String sub = d.substring(1);
				String revSub = new StringBuilder(sub).reverse().toString();
				String sortSub = getLargestValue(revSub);
				revSub = new StringBuilder(sortSub).reverse().toString();
				toReturn = d.substring(0, 1)+revSub;
				return toReturn;
			}
		}
	}
	private static String getLargestValue(String d){
		if(d.length()<=1){
			return d;
		}
		Character[] sortedChars = sortDistinctSmallToLarge(d);

		char largestValue = sortedChars[sortedChars.length-1];
		int posOfLargestValue = d.lastIndexOf(largestValue);
		String toReturn;
		if(d.charAt(0)==sortedChars[sortedChars.length-1]){
			String sub = d.substring(1);
			toReturn = d.substring(0, 1)+getLargestValue(sub);
		}
		else{
			toReturn= swap(0, posOfLargestValue, d);
		}
		return toReturn;
	}
	private static String swap(int posA, int posB, String s){
		char[] raw = s.toCharArray();
		char temp = raw[posA];
		raw[posA] = raw[posB];
		raw[posB] = temp;
		return new String(raw);
	}
	private static Character[] sortDistinctSmallToLarge(String s){
		TreeSet<Character> chars = new TreeSet<Character>();
		char[] rawData = s.toCharArray();
		for(char c : rawData){
			chars.add(c);
		}
		return chars.toArray(new Character[chars.size()]);
	}
	private static boolean areSameScale(int a, int b){
		return String.valueOf(a).length() == String.valueOf(b).length();
	}
	private static Integer[] getCases(File f){
		try{
			List<String> lines = fileToStringList(f);
			List<Integer> cases = new ArrayList<Integer>();
			//ignore the first line
			for(int i=1; i<lines.size(); i++){
				cases.add(new Integer(lines.get(i)));
			}
			return cases.toArray(new Integer[cases.size()]);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
	private static List<String> fileToStringList(File f) throws Exception{
		List<String> linesInFile = new ArrayList<String>();

		BufferedReader reader = new BufferedReader(new FileReader(f));
		String line = null;
		while ((line = reader.readLine()) != null)
		{
			linesInFile.add(line);
		}
		reader.close();

		return linesInFile;
	}
	private static void writeToFile(File f, String content) throws Exception{
		PrintWriter pw = new PrintWriter(f);
		pw.println(content);
		pw.close();
	}
}

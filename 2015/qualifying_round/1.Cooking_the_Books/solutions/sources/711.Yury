(defun zero-digit-p (digits index)
  (char= #\0 (aref digits index)))

(defun swap (sequence i j)
  (let ((new-sequence (copy-seq sequence)))
    (setf (elt new-sequence i) (elt sequence j)
          (elt new-sequence j) (elt sequence i))
    new-sequence))

(defun get-min-max-cheat (n)
  (when (zerop n)
    (return-from get-min-max-cheat (values 0 0)))
  (let* ((digits (write-to-string n))
         (num-digits (length digits))
         (permutations
          (mapcar #'parse-integer
           (cons digits
                 (loop for i from 0 to (1- num-digits)
                    appending (loop for j from (1+ i) to (1- num-digits)
                                 unless (or (and (zerop i)
                                                 (zero-digit-p digits j))
                                            (and (zerop j)
                                                 (zero-digit-p digits i)))
                                 collecting (swap digits i j)))))))
    (values (reduce #'min permutations)
            (reduce #'max permutations))))

(defparameter *num-tests* (read))
(dotimes (test-num *num-tests*)
  (multiple-value-bind (min max) (get-min-max-cheat (read))
    (format t "Case #~a: ~a ~a~%" (1+ test-num) min max)))

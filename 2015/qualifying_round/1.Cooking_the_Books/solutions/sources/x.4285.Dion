package qualification;

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class CookingTheBooks {

	public static void main(String[] args) {
		int[] values = loadFile(args[0]);
		File outputFile = new File("output.txt");
		try {
			PrintWriter out = new PrintWriter(outputFile);
			for (int i = 0; i < values.length; i++) {
				int number = values[i];
				int smallest = findSmallest(number);
				int largest = findLargest(number);
				out.printf("Case #%s: %s %s\n", i + 1, smallest, largest);
			}
			out.close();
		} catch (Exception e) {

			e.printStackTrace();
		}

	}

	public static int[] loadFile(String fileName) {
		File inputFile = new File(fileName);
		int number = 0;
		int[] values;
		try {
			Scanner in = new Scanner(inputFile);
			number = in.nextInt();
			values = new int[number];

			for (int i = 0; i < values.length; i++) {
				values[i] = in.nextInt();
			}
			in.close();

			return values;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public static ArrayList<Integer> separateDigits(int number) {
		int tempNumber = number;
		ArrayList<Integer> digits = new ArrayList<Integer>();
		boolean done = false;
		while (!done) {
			digits.add(tempNumber % 10);
			tempNumber = tempNumber / 10;
			if (tempNumber <= 0) {
				done = true;
			}
		}
		return digits;
	}

	public static int findSmallest(int number) {
		return findSmallest(separateDigits(number), 0, number);
	}

	public static int findSmallest(ArrayList<Integer> list, int currentNumber,
			int smallestNumber) {
		if (list.size() == 0) {
			return currentNumber;
		}
		int currentSmallest = 0;
		for (int i = 0; i < list.size(); i++) {
			int current = list.get(i);
			ArrayList<Integer> tempList = (ArrayList<Integer>) list.clone();
			tempList.remove(i);
			int tempNumber = currentNumber;
			int result = findSmallest(tempList, tempNumber * 10 + current,
					smallestNumber);
			if (i == 0) {
				currentSmallest = result;
			} else if (currentSmallest > result) {
				currentSmallest = result;
			}
		}
		if (String.valueOf(currentSmallest).length() == String.valueOf(
				smallestNumber).length()) {
			return currentSmallest;
		} else {
			return smallestNumber;
		}
	}

	public static int findLargest(int number) {
		return findLargest(separateDigits(number), 0, number);
	}

	public static int findLargest(ArrayList<Integer> list, int currentNumber,
			int largestNumber) {
		if (list.size() == 0) {
			return currentNumber;
		}
		int currentLargest = 0;
		for (int i = 0; i < list.size(); i++) {
			int current = list.get(i);
			ArrayList<Integer> tempList = (ArrayList<Integer>) list.clone();
			tempList.remove(i);
			int tempNumber = currentNumber;
			int result = findLargest(tempList, tempNumber * 10 + current,
					largestNumber);
			if (i == 0) {
				currentLargest = result;
			} else if (currentLargest < result) {
				currentLargest = result;
			}
		}
		if (String.valueOf(currentLargest).length() == String.valueOf(
				largestNumber).length()) {
			return currentLargest;
		} else {
			return largestNumber;
		}
	}
}

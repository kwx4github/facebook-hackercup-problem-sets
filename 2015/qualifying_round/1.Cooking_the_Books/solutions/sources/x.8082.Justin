/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hackercup;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

/**
 *
 * @author x
 */
public class HackerCup {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        File inputFile = new File("C:/Hacker cup/1/input.txt");
        try {
            BufferedReader br = new BufferedReader(new FileReader(inputFile));
            String line;
            List<String> lines;
            lines = new ArrayList();
            while ((line = br.readLine()) != null) {
                lines.add(line);
            }

            br.close();
            PrintWriter writer = new PrintWriter(
                    "C:/Hacker cup/1/output.txt", "UTF-8");

            for (int i = 1; i <= Integer.parseInt(lines.get(0)); i++) {
                String number = lines.get(i);
                writer.println("Case #" + Integer.toString(i)
                        + ": " + getMin(number) + " " + getMax(number));
            }

            writer.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private static String getMax(String number) {
        if (number.length() == 1) {
            return number;
        }
        String result = "";
        int max = Character.getNumericValue(number.charAt(0));
        int maxPosition = 0;
        for (int i = 1; i < number.length(); i++) {
            int curent = Character.getNumericValue(number.charAt(i));
            if (curent > max) {
                max = curent;
                maxPosition = i;
            }
        }
        if (maxPosition == 0) {
            result = number.charAt(0) + getMax(number.substring(1));
        } else {
            result = number.charAt(maxPosition)
                    + number.substring(1, maxPosition)
                    + number.charAt(0)
                    + number.substring(maxPosition + 1);
        }

        return result;
    }

    private static String getMin(String number) {
        if (number.length() == 1) {
            return number;
        }
        String result = "";
        int min = Character.getNumericValue(number.charAt(0));
        int minPosition = 0;
        for (int i = 1; i < number.length(); i++) {
            int curent = Character.getNumericValue(number.charAt(i));
            if (curent < min && curent != 0) {
                min = curent;
                minPosition = i;
            }
        }
        if (minPosition == 0) {
            result = number.charAt(0) + getMin(number.substring(1));
        } else {
            result = number.charAt(minPosition)
                    + number.substring(1, minPosition)
                    + number.charAt(0)
                    + number.substring(minPosition + 1);
        }

        return result;
    }

}

import sys
def main():
	test_cases = int(sys.stdin.readline())
	for i in range(test_cases):
		param = int(sys.stdin.next())
		print "Case #%s:"%(i+1), retmin(str(param),''),retmax(str(param),'')

def retmax(number,retstring):
	numberlist = []
	ret = retstring
	newnumber = number
	for ai in range(len(newnumber)):
		numberlist.append(int(newnumber[ai]))
	maxdigit = max(numberlist)
	extralist = list(numberlist)
	if extralist[0] == maxdigit:
		if len(number[1:]) == 0:
			return retstring + str(extralist[0])
		else:
			return retmax(number[1:],ret + str(extralist[0]))
	else:
		numberlist.reverse()
		maxindex =	len(numberlist) + (-(numberlist.index(maxdigit))-1)
		numberlist.reverse()
		switchindex = 0
		maxnumber = retstring

		for check in range(len(numberlist)):
			if numberlist[check] != 0 | numberlist[check] < maxdigit:
				switchindex = check
				break
		for maxprint in range(len(numberlist)):
			if maxprint == switchindex:
				maxnumber += str(numberlist[maxindex])
			elif maxprint == maxindex:
				maxnumber += str(numberlist[switchindex])
			else:
				maxnumber += str(numberlist[maxprint])
		return maxnumber

def retmin(number,retstring):
	numberlist = []

	ret = retstring
	newnumber = number
	for ai in range(len(newnumber)):
		numberlist.append(int(newnumber[ai]))

	extralist = list(numberlist)
	extralist.sort()
	mindigit = 0
	for air in range(len(extralist)):
		if extralist[air] != 0:
			mindigit = extralist[air]
			break
	if numberlist[0] == mindigit:
		if len(number[1:]) == 0:
			return retstring + str(numberlist[0])
		else:
			return retmin(number[1:],ret + str(numberlist[0]))
	else:
		numberlist.reverse()
		minindex =	len(numberlist) + (-(numberlist.index(mindigit))-1)
		numberlist.reverse()
		switchindex = 0
		minnumber = retstring

		for check in range(len(numberlist)):
			if numberlist[check] > mindigit:
				switchindex = check
				break
		for minprint in range(len(numberlist)):
			if minprint == switchindex:
				minnumber += str(numberlist[minindex])
			elif minprint == minindex:
				minnumber += str(numberlist[switchindex])
			else:
				minnumber += str(numberlist[minprint])
		return minnumber
if __name__ == '__main__':
	main()
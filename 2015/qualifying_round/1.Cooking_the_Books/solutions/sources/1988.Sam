using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace HackerCupCooking
{
   class Program
   {

      private static string[] GetInputFileLines(string nameToFilter = "example")
      {

         var localExampleFile = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.txt").FirstOrDefault(t => t.Contains(nameToFilter));

         if (localExampleFile == null)
         {
            throw new FileNotFoundException("No file has been found containing {0} as part of its filename.");
         }

         return File.ReadAllLines(localExampleFile, Encoding.UTF8);
      }

      private static StringBuilder sb;

      public const char LF = '\n';

      private static void SetCaseResult(int caseNumber, int smallestNumber, int largestNumber)
      {
         if (sb == null)
         {
            sb = new StringBuilder();
         }

         sb.Append(string.Format("Case #{0}: {1} {2}", caseNumber, smallestNumber, largestNumber));
         sb.Append(LF);
      }

      static void Main(string[] args)
      {

         var lines = GetInputFileLines("LIVE");

         var numberOfTestCases = int.Parse(lines.First());
         lines = lines.Skip(1).ToArray();

         for (var caseNumber = 1; caseNumber <= numberOfTestCases; caseNumber++)
         {
            var lineString = lines[caseNumber - 1];
            var testItem = int.Parse(lineString);

            var resultSmallestNumber = testItem;
            var resultLargestNumber = testItem;

            if (testItem <= 0)
            {
               SetCaseResult(caseNumber, 0, 0);
               continue;
            }

            var lineChars = lineString.ToCharArray();
            var numberOrCharacters = lineChars.Length;

            if (numberOrCharacters == 1)
            {
               resultLargestNumber = testItem;
               resultSmallestNumber = testItem;
               SetCaseResult(caseNumber, resultSmallestNumber, resultLargestNumber);
               continue;
            }

            for (var currentCharIndex = 1; currentCharIndex <= numberOrCharacters; currentCharIndex++)
            {
               var currentCharacter = lineChars[currentCharIndex - 1];

               for (var replacementCharIndex = 1; replacementCharIndex <= numberOrCharacters; replacementCharIndex++)
               {
                  if (replacementCharIndex == currentCharIndex)
                  {
                     continue;
                  }

                  var replacementCharacter = lineChars[replacementCharIndex - 1];

                  //if (currentCharIndex == 1 && int.Parse(replacementCharacter.ToString(CultureInfo.InvariantCulture)) == 0)
                  //{
                  //   // We're on the first character, and it's being replaced by a zero. Not allowed.
                  //   continue;
                  //}

                  Console.WriteLine("Procssing swapping {0} with {1}", currentCharacter, replacementCharacter);

                  var replacementChars = new char[numberOrCharacters];

                  System.Array.Copy(lineChars, replacementChars, numberOrCharacters);

                  replacementChars[currentCharIndex - 1] = replacementCharacter;
                  replacementChars[replacementCharIndex - 1] = currentCharacter;

                  if (int.Parse(replacementChars[0].ToString(CultureInfo.InvariantCulture)) == 0)
                  {
                     // The first character has been replaced with a zero. Not allowed.
                     continue;
                  }

                  var fullNumberString = new StringBuilder().Append(replacementChars).ToString();

                  var fullValue = int.Parse(fullNumberString);

                  if (fullValue < resultSmallestNumber)
                  {
                     resultSmallestNumber = fullValue;
                  }

                  if (fullValue > resultLargestNumber)
                  {
                     resultLargestNumber = fullValue;
                  }
               }


            }


            SetCaseResult(caseNumber, resultSmallestNumber, resultLargestNumber);

         }

         var result = sb.ToString();
         File.WriteAllText(Directory.GetCurrentDirectory() + "/result.txt", result, Encoding.ASCII);

         Console.WriteLine(result);

         Console.WriteLine("Finished");
         Thread.Sleep(5000);

      }
   }
}

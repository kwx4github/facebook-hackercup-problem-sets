#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

struct mycomp {
	bool operator () (const pair<char, int> &p1, const pair<char, int> &p2) {
		if (p1.first == p2.first) {
			return p1.second > p2.second;
		} else {
			return p1.first < p2.first;
		}
	}
} myobj;

int main() {
	int T;
	cin >> T;
	for (int i=0; i<T; ++i) {
		string s;
		cin >> s;
		cout << "Case #" << i+1 << ": ";
		if (s.size() == 1) {
			cout << s << " " << s << endl;
			continue;
		}
		int num_of_zeros = 0;
		vector<pair<char, int>> sorted_s;
		for (int j=0; j<s.size(); ++j) {
			sorted_s.push_back(pair<char, int>(s[j], j));
			if (s[j] == '0') {
				++ num_of_zeros;
			}
		}
		sort(sorted_s.begin(), sorted_s.end());

		int tmp_i = sorted_s[num_of_zeros].second;
		char tmp_c = sorted_s[num_of_zeros].first;
		for (int j=num_of_zeros; j>=0; --j) {
			sorted_s[j].first = sorted_s[j-1].first;
			sorted_s[j].second = sorted_s[j-1].second;
		}
		sorted_s[0].first = tmp_c;
		sorted_s[0].second = tmp_i;

		string min_s = s;
		int pos = 0;
		while (pos < s.size()) {
			if (min_s[pos] != sorted_s[pos].first) {
				break;
			}
			++ pos;
		}
		int pos1;
		if (pos < s.size()) {
		if (pos == 0) {
			if (sorted_s[num_of_zeros+1].first == sorted_s[0].first) {
				pos1 = num_of_zeros+1;
				while (sorted_s[pos1].first == sorted_s[pos].first) {
					++ pos1;
				}
			-- pos1;
			} else {
				pos1 = 0;
			}
		} else {
			pos1 = pos;
			while (sorted_s[pos1].first == sorted_s[pos].first) {
				++ pos1;
			}
			-- pos1;
		}
		
		char c_tmp = min_s[pos];
		min_s[pos] = sorted_s[pos1].first;
		min_s[sorted_s[pos1].second] = c_tmp;

		}
		cout << min_s << " ";

		sort(sorted_s.begin(), sorted_s.end(), myobj);

		string max_s = s;
		pos = s.size()-1;
		while (pos >= 0) {
			if (max_s[s.size()-1-pos] != sorted_s[pos].first) {
				break;
			}
			-- pos;
		}
		if (pos >= 0) {

		pos1 = pos;
		while (sorted_s[pos1].first == sorted_s[pos].first) {
			-- pos1;
		}
		++ pos1;
		
		tmp_c = max_s[s.size()-1-pos];
		max_s[s.size()-1-pos] = sorted_s[pos1].first;
		max_s[sorted_s[pos1].second] = tmp_c;

		}
		cout << max_s << endl;
	}

	return 0;
}
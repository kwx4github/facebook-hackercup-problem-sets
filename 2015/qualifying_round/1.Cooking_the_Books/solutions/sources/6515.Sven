import numpy as np

def get_digits(number):
    number_str = str(number)
    digits = []
    for digit in number_str:
        digits.append(int(digit))
    return np.array(digits, dtype=np.int)


def swap_digits(digits, pos_1, pos_2):
    #print digits, pos_1, pos_2
    store = digits[pos_1]
    digits[pos_1] = digits[pos_2]
    digits[pos_2] = store
    return digits


def digits_to_number(digits):
    number = 0
    for ii in range(len(digits)):
        number += digits[ii]*10**(len(digits)-ii-1)
    return number


def make_max(number):
    digits = get_digits(number)
    if len(digits) == 1:
        return number

    max_digit = 10
    end = False
    while max_digit > 0:
        max_digit -= 1
        if max_digit in digits:
            pos_equal = []
            pos_smaller = []
            pos_larger = []
            for ii in range(len(digits)):
                if digits[ii] < max_digit:
                    pos_smaller.append(ii)
                elif digits[ii] == max_digit:
                    pos_equal.append(ii)
                else:
                    pos_larger.append(ii)

            if len(pos_smaller) > 0:
                for ii in range(len(pos_smaller)):
                    if pos_equal[-1] > pos_smaller[ii]:
                        digits = swap_digits(digits,
                                             pos_equal[-1],
                                             pos_smaller[0])
                        end = True
                        break
            if end:
                break

    return digits_to_number(digits)


def make_min(number):
    digits = get_digits(number)
    if len(digits) == 1:
        return number

    digits_pre = np.copy(digits)
    digits_pre[digits_pre == 0] = 10

    if np.min(digits_pre[1:]) < digits[0]:
        min_digit = 0
    else:
        min_digit = -1

    end = False
    while min_digit < 9:
        min_digit += 1
        if min_digit in digits:
            pos_equal = []
            pos_smaller = []
            pos_larger = []
            for ii in range(len(digits)):
                if digits[ii] < min_digit:
                    pos_smaller.append(ii)
                elif digits[ii] == min_digit:
                    pos_equal.append(ii)
                else:
                    pos_larger.append(ii)

            if min_digit == 0:
                pos_larger = pos_larger[1:]

            if len(pos_larger) > 0:
                for ii in range(len(pos_larger)):
                    if pos_equal[-1] > pos_larger[ii]:
                        digits = swap_digits(digits,
                                             pos_equal[-1],
                                             pos_larger[0])
                        end = True
                        break
            if end:
                break

    return digits_to_number(digits)

### INPUT ######################################################################

input_path = "cooking_the_books.txt"
output_path = "cooking_the_books_out.txt"

################################################################################

numbers = [line.strip() for line in open(input_path)]
numbers = np.array(numbers, dtype=np.int)
nb_lines = numbers[0]
numbers = numbers[1:]

f = open(output_path, "w")

for ii in range(len(numbers)):
    number = numbers[ii]
    f.write("Case #%d: %d %d\n" % (ii+1, make_min(number),
                                  make_max(number)))

f.close()
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Main {
	
	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String line;
		
		
		int n = Integer.valueOf(reader.readLine());
		for (int i=1; i<=n; ++i) {
			int[] lastIndexes = new int[10];
			String number = reader.readLine();
			int len = number.length();
			
			// Calculate first and last positions (1-based) of all digits
			for (int j=0; j<len; ++j) {
				int currentDigit = number.charAt(j) - '0';
				lastIndexes[currentDigit] = j + 1;
			}
			
			// Find maximum
			String max = null;
			for (int j=9; j>0; --j) {
				if (lastIndexes[j] == 0) {
					continue;
				}
				for (int k=0; k<lastIndexes[j]-1; ++k) {
					if (number.charAt(k) - '0' < j) {
						max = swapChars(number, lastIndexes[j] - 1, k); 
						break;
					}
				}
				if (max != null) {
					break;
				}
			}
			
			if (max == null) {
				max = number;
			}
			
			// Find minimum
			int startingDigit = 0;
			String min1 = getMin(number, lastIndexes, startingDigit);
			
			startingDigit = 1;
			String min2 = getMin(number, lastIndexes, startingDigit);
			
			String min = min1.compareTo(min2) <= 0 ? min1 : min2;
			
			System.out.println("Case #" + i + ": " + min + " " + max);
		}

		while ((line = reader.readLine()) != null && line.length() != 0) {
			System.out.println(line);
		}
	}
	private static String swapChars(String str, int i, int j) {
		char[] arr = str.toCharArray();
		char tmp = arr[i];
		arr[i] = arr[j];
		arr[j] = tmp;
		
		return new String(arr);
	}
	
	private static String getMin(String number, int[] lastIndexes, int startingDigit) {
		String min = null; 
		for (int j=startingDigit; j<9; ++j) {
			if (lastIndexes[j] == 0) {
				continue;
			}
			for (int k=0; k<lastIndexes[j]-1; ++k) {
				if (number.charAt(k) - '0' > j && (j != 0 || k != 0)) {
					min = swapChars(number, lastIndexes[j] - 1, k); 
					break;
				}
			}
			if (min != null) {
				break;
			}
		}
		if (min == null) {
			min = number;
		}

		return min;
	}

	/* (non-Java-doc)
	 * @see java.lang.Object#Object()
	 */
	public Main() {
		super();
	}

}
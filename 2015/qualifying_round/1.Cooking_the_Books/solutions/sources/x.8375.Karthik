package com.examples;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Arrays;
import java.util.InputMismatchException;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		/*
		 * Solver solver = new Solver(); solver.check();
		 */
		HackerCup hc = new HackerCup();
		InputStream inputStream = new FileInputStream(new File(
				"/home/karthik/Desktop/hc/cooking_the_books_example_input.txt"));
		//InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		hc.solveCookingBooks(in, out);
		/*
		 * InputStream inputStream = System.in; //InputStream inputStream = new
		 * FileInputStream(new
		 * File("/home/karthik/Desktop/chef/segments"));//System.in;
		 * OutputStream outputStream = System.out; InputReader in = new
		 * InputReader(inputStream); OutputWriter out = new
		 * OutputWriter(outputStream); Solver solver = new Solver();
		 * solver.solveChefSegments(in, out); //solver.solve(out); out.close();
		 */
	}
}

class HackerCup {

	public void solveCookingBooks(InputReader in, OutputWriter out) {
		int t = in.readInt();
		for (int i = 0; i < t; i++) {
			int input = in.readInt();
			int number = input;
			int min = Integer.MAX_VALUE;
			int max = Integer.MIN_VALUE;
			int max2 = Integer.MIN_VALUE;

			int minIndex = -1;
			int maxIndex = -1;
			int max2Index=-1;
			int minZeroIndex = -1;
			int len;
			int[] arr;
			if (number > 0) {
				int k = 1;
				len = (int) Math.log10(number) + 1;
				arr = new int[len];
				while (number > 0) {
					int digit = number % 10;
					int indx = len - k;
					arr[len - k] = digit;
					if (digit > max) {
						max2 = max;
						max2Index = maxIndex;
						max = digit;
						maxIndex = indx;
					}
					if (digit < max && digit>max2) {
						max2 = digit;
						max2Index = indx;
					}
					if (digit < min) {
						if (digit > 0) {
							min = digit;
							minIndex = indx;
						} else if (minZeroIndex == -1) {
							minZeroIndex = indx;

						}
					}
					number = number / 10;
					k++;
				}
				int[] smallArr = Arrays.copyOf(arr, len);
				int minSkip = 0;
				for (int j = 0; j < arr.length; j++) {
					// smallest
					if (minZeroIndex == -1) {
						if (smallArr[j] == smallArr[minIndex]) {
							minSkip = j + 1;
							continue;
						}
						int temp = smallArr[minSkip];
						smallArr[minSkip] = smallArr[minIndex];
						smallArr[minIndex] = temp;
						break;
					} else if (smallArr[j] > 0) {
						if (smallArr[0] > smallArr[minIndex]) {
							int temp = smallArr[minIndex];
							smallArr[minIndex] = smallArr[j];
							smallArr[j] = temp;
							break;
						} else if (j != 0) {
							int temp = smallArr[j];
							smallArr[j] = 0;
							smallArr[minZeroIndex] = temp;
							break;

						}
					}
				}
				// largest
				boolean largestDone=false;
				for (int j = 0; j < arr.length; j++) {
					if (arr[maxIndex] > arr[j] && maxIndex>j) {
						int temp = arr[j];
						if (temp != arr[maxIndex]) {
							arr[j] = arr[maxIndex];
							arr[maxIndex] = temp;
							largestDone=true;
							break;
						}
					}
				}
				for (int j = 0; j < arr.length && !largestDone && max2Index!=-1; j++) {
					if (arr[max2Index] > arr[j] && max2Index>j) {
						int temp = arr[j];
						if (temp != arr[max2Index]) {
							arr[j] = arr[max2Index];
							arr[max2Index] = temp;
							break;
						}
					}
					
				}
				System.out.println("Case #" + (i + 1) + ": " + Arrays.toString(smallArr).replaceAll("[\\[\\], ]", "")
						+ " " + Arrays.toString(arr).replaceAll("[\\[\\], ]", ""));
				// out.printLine(Arrays.toString(smallArr)+" "+Arrays.toString(arr));
			} else {
				System.out.println("Case #" + (i + 1) + ": " + "0 0");
				// out.printLine("0 0");
			}
		}

	}
}

class Solver {

	public void solveChefSegments(InputReader in, OutputWriter out) {
		// FileInputStream f = new
		// FileInputStream(newFile("/home/karthik/Desktop/prplin.txt"));
		// BufferedReader br = new BufferedReader(new InputStreamReader(f));
		// BufferedReader br = new BufferedReader(new
		// InputStreamReader(System.in));
		int t = in.readInt();
		for (int i = 0; i < t; i++) {
			long x = in.readInt();
			long k = in.readInt();
			int h = (int) (Math.log(k) / Math.log(2.0));
			double fp = Math.pow(0.5, h + 1) * x;
			long dist = (long) (k - Math.pow(2, h));
			double kth_position = (1 + dist * 2) * fp; // ((k-Math.pow(2,
														// logk))*2+1)*Math.pow(0.5*x,
														// logk+1);
			// out.printLine(kth_position);
			System.out.printf("%.15f", kth_position);
			System.out.println();
		}
	}

	public void check() {
		Integer i = 5;
		callByref(i);
		System.out.println("class -" + i);
	}

	public void callByref(Integer i) {
		i = 10;
		System.out.println("method - " + i);
	}

	public void solve(OutputWriter out) throws NumberFormatException, IOException {
		// FileInputStream f = new FileInputStream(new
		// File("/home/karthik/Desktop/prplin.txt"));
		// BufferedReader br = new BufferedReader(new InputStreamReader(f));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.valueOf(br.readLine());
		for (int i = 0; i < t; ++i) {
			char[] s = br.readLine().toCharArray();
			Bounds b = new Bounds(-1, s.length);

			if (checkPalin(s, b)) {
				out.printLine("YES");
				continue;
			}
			Bounds b1 = new Bounds(b);
			b1.lo--;
			if (checkPalin(s, b1)) {
				out.printLine("YES");
				continue;
			}
			Bounds b2 = new Bounds(b);
			b2.hi++;
			if (checkPalin(s, b2)) {
				out.printLine("YES");
				continue;
			}
			out.printLine("NO");
		}

	}

	class Bounds {
		int lo, hi;

		Bounds(int lo, int hi) {
			this.lo = lo;
			this.hi = hi;
		}

		public Bounds(Bounds b) {
			this.lo = b.lo;
			this.hi = b.hi;
		}
	}

	private boolean checkPalin(char[] arr, Bounds b) {

		while (arr[++b.lo] == arr[--b.hi]) {
			if (b.lo >= b.hi) {
				return true;
			}
		}
		return false;
	}

	public void solvePetersen() throws NumberFormatException, IOException {
		Node nodeA = new Node(0, 'A');
		Node nodeB = new Node(1, 'B');
		Node nodeC = new Node(2, 'C');
		Node nodeD = new Node(3, 'D');
		Node nodeE = new Node(4, 'E');
		Node nodea = new Node(5, 'A');
		Node nodeb = new Node(6, 'B');
		Node nodec = new Node(7, 'C');
		Node noded = new Node(8, 'D');
		Node nodee = new Node(9, 'E');
		nodeA.setNodes(nodeE, nodeB, nodea);
		nodeB.setNodes(nodeA, nodeC, nodeb);
		nodeC.setNodes(nodeB, nodeD, nodec);
		nodeD.setNodes(nodeC, nodeE, noded);
		nodeE.setNodes(nodeD, nodeA, nodee);

		nodea.setNodes(noded, nodec, nodeA);
		nodeb.setNodes(nodee, noded, nodeB);
		nodec.setNodes(nodea, nodee, nodeC);
		noded.setNodes(nodea, nodeb, nodeD);
		nodee.setNodes(nodeb, nodec, nodeE);

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.valueOf(br.readLine());
		for (int i = 0; i < t; i++) {
			String s = br.readLine();

		}

	}

	class Node {
		Node right;
		Node left;
		Node middle;
		int index;
		char val;

		Node(int index, char val) {
			this.index = index;
			this.val = val;
		}

		public void setNodes(Node left, Node right, Node middle) {
			this.left = left;
			this.right = right;
			this.middle = middle;
		}
	}

}

class InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public static boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
}

class OutputWriter {
	private final PrintWriter writer;

	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
	}

	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}

	public void print(Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}

	public void printLine(Object... objects) {
		print(objects);
		writer.println();
	}

	public void close() {
		writer.close();
	}
}

class IOUtils {
	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

	public static void readIntArrays(InputReader in, int[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readInt();
		}
	}
}
import java.io.*;
import java.util.LinkedList;

/**
 * Facebook Hacker Cup 2015
 * @author Cosmin Dumitrache (cosmin.m.dumitrache@gmail.com)
 */
public class CookingTheBooks {

    static LinkedList<Integer> getDigits(int n) {
        LinkedList<Integer> digits = new LinkedList<Integer>();
        if (n==0) {
            digits.add(0);
        } else {
            while (n != 0) {
                digits.add(n%10);
                n /= 10;
            }
        }
        return digits;
    }

    static int findSmallest(int n) {
        LinkedList<Integer> digits = getDigits(n);
        int firstDigit = digits.removeLast();
        int swapCandidateIndex = -1;
        int swapCandidate = Integer.MAX_VALUE;
        int i = 0;
        for (int digit : digits) {
            if (digit > 0 && digit < firstDigit && digit < swapCandidate) {
                swapCandidate = digit;
                swapCandidateIndex = i;
            }
            i++;
        }
        if (swapCandidateIndex != -1) {
            int result = 0;
            digits.set(swapCandidateIndex, firstDigit);
            digits.add(swapCandidate);
            for (int j=digits.size()-1; j>=0; j--)
                result = result*10 + digits.get(j);
            return result;
        }
        return n;
    }

    static int findLargest(int n) {
        LinkedList<Integer> digits = getDigits(n);
        int firstDigit = digits.removeLast();
        int swapCandidateIndex = -1;
        int swapCandidate = Integer.MIN_VALUE;
        int i = 0;
        for (int digit : digits) {
            if (digit > firstDigit && digit > swapCandidate) {
                swapCandidate = digit;
                swapCandidateIndex = i;
            }
            i++;
        }
        if (swapCandidateIndex != -1) {
            int result = 0;
            digits.set(swapCandidateIndex, firstDigit);
            digits.add(swapCandidate);
            for (int j=digits.size()-1; j>=0; j--)
                result = result*10 + digits.get(j);
            return result;
        }
        return n;
    }

    public static void main(String[] args) throws IOException {
        if (args.length != 2) {
            System.err.printf("Usage: java %s <input file> <output file>\n", CookingTheBooks.class.getCanonicalName());
            System.exit(1);
        }
        String inputFile = args[0];
        String outputFile = args[1];
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile)));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile)));
        int t = Integer.parseInt(reader.readLine());
        for (int i=1; i<=t; i++) {
            int n = Integer.parseInt(reader.readLine());
            int smallest = findSmallest(n);
            int largest = findLargest(n);
            writer.write(String.format("Case #%d: %d %d\n", i, smallest, largest));
        }
        reader.close();
        writer.close();
    }

}

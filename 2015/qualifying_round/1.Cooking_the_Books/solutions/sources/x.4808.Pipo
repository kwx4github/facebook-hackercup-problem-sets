
class Calcul {

	void Main () {
		int nombreLigne ;

		Ligne lign = new Ligne() ;

		Interface inter = new Interface(
				"/home/professionnel/Documents/Programmation/Global/Concours programmation Groovy/src/",
				"input.txt",'output.txt') ;
		inter.CreationFichier();
		List ligne = inter.ChargementDonnees();

		nombreLigne = ligne[0].toInteger() ;

		int i ;
		for(i=1;i<nombreLigne+1;i++) {
			lign.SetNombre(ligne[i]) ;
			lign.Total() ;
			lign.Afficher(i) ;
			lign.Ecrire(inter,i) ;
		}
	}
}


class Ligne {

	// http://www.tutorialspoint.com/java/java_string_tochararray.htm
	// http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#compareTo(java.lang.Character)

	int nombreValeurs;
	String nombreString ;
	char[] nombre ;

	int IndexMin ;
	int IndexMinNonNul ;
	char ValeurMin ;
	char ValeurMinNonNul ;
	int IndexMinFinal ;
	char valeurMinSecondaire ;
	int IndexMinSecondaire ;

	int IndexMax ;
	//int IndexMaxNonNul ;
	char ValeurMax ;
	//int ValeurMaxNonNul ;
	char valeurMaxSecondaire ;
	int IndexMaxSecondaire ;
	int IndexMaxFinal ;

	int IndexPremierMin ;
	int IndexPremierMax ;

	char[] nombreMin ;
	char[] nombreMax ;
	String nombreMinString ;
	String nombreMaxString ;

	void SetNombre (String chaine) {
		nombreString = chaine ;
	}

	void DecouperChaine (){
		nombre = nombreString.toCharArray() ;
	}

	/*int Get (int signe) {
	 char valeur;
	 int index ;
	 index = 0 ;
	 if (signe == 1) {
	 valeur = '9' ;
	 } else {
	 valeur = '1' ;
	 }
	 int i;
	 for (i=0; i<nombre.size(); i++) {
	 // a > b   a.compareTo(b) > 0 
	 //if ((nombre[i].compareTo(valeur) == signe || nombre[i].compareTo(valeur) == 0)&&
	 if ((signe == 1 && nombre[i] != '0' && nombre[i] <= valeur)|| 
	 (signe == -1 && nombre[i] != '0' && nombre[i] > valeur)) {
	 index = i ;
	 valeur = nombre[i];
	 }
	 }
	 return index ;
	 }*/

	void SetMin () {
		//IndexMin = this.Get(1) ;

		/*char valeur;
		 char valeurNonNul;
		 int index ;
		 int indexNonNul ;*/

		IndexMin = 0 ;
		IndexMinNonNul = 0 ;
		IndexMinSecondaire = 0 ;
		ValeurMin = nombre[0] ;
		ValeurMinNonNul = nombre[0] ;
		valeurMinSecondaire = nombre[0] ;

		int i;
		for (i=0; i<nombre.size(); i++) {
		//if (signe == 1 && nombre[i] != '0' && nombre[i] <= valeur) {
		if ( nombre[i] <= ValeurMin) {
			IndexMin = i ;
			ValeurMin = nombre[i];
		}
		if (nombre[i] != '0' && nombre[i] <= ValeurMinNonNul) {
			IndexMinNonNul = i ;
			ValeurMinNonNul = nombre[i];
		}
		if((nombre[i] <= valeurMinSecondaire && nombre[i] > ValeurMin) || (ValeurMin == valeurMinSecondaire))
		{	IndexMinSecondaire  = i ;
			valeurMinSecondaire = nombre[i];}
	}

	}

	void SetMax () {
		//IndexMax = this.Get(-1) ;

		IndexMax = 0 ;
		IndexMaxSecondaire = 0 ;
		ValeurMax = nombre[0] ;
		valeurMaxSecondaire = nombre[0] ;

		int i;
		for (i=0; i<nombre.size(); i++) {
			//if (signe == 1 && nombre[i] != '0' && nombre[i] <= valeur) {
			if ( nombre[i] >= ValeurMax) {
				IndexMax = i ;
				ValeurMax = nombre[i];
			}
			if((nombre[i] >= valeurMaxSecondaire && nombre[i] < ValeurMax)|| (ValeurMax == valeurMaxSecondaire))
			{
				IndexMaxSecondaire  = i ;
				valeurMaxSecondaire = nombre[i];
			}
			/*if (nombre[i] != '0' && nombre[i] >= ValeurMaxNonNul) {
			 IndexMaxNonNul = i ;
			 ValeurMaxNonNul = nombre[i];
			 }*/
		}
	}

	/*int GetPremier (int placeRef) {
	 char valeur;
	 int index ;
	 index = 0 ;
	 valeur = nombre[0] ;
	 char ref = nombre[placeRef] ;
	 int i;
	 for (i=0; i<nombre.size() && nombre[i] >= ref; i++) {
	 }
	 return index ;
	 }*/

	void SetPremierMin () {
		// IndexPremierMin = this.GetPremier(IndexMin) ;

		char valeur;
		int index ;
		int i;

		//println "" + ValeurMinNonNul +" " +nombre[0]+" "+ IndexMinNonNul ;
		//println "" + ValeurMin +" " +nombre[0]+" "+ IndexMin ;
		//println "" + valeurMinSecondaire +" " + IndexMinFinal ;
		if(IndexMin == 0)
		{
			//IndexPremierMin = 0 ;
			//IndexMinFinal = IndexMin ;
			//IndexMinSecondaire = nombre[i];
			for (i=1; i<nombre.size() && nombre[i] == valeurMinSecondaire; i++) {
			}
			IndexMinFinal = IndexMinSecondaire ;
			//println "" + i +" " +IndexMinFinal ;
			IndexPremierMin = i > IndexMinFinal ? IndexMinFinal : i ;
		} else {
			if(ValeurMinNonNul == nombre[0] ) {
				for (i=1; i<nombre.size() && nombre[i] == ValeurMin; i++) {
				}
				IndexMinFinal = IndexMin ;
				IndexPremierMin = i > IndexMinFinal ? IndexMinFinal : i ;

			} else {
				IndexMinFinal = IndexMinNonNul ;
				IndexPremierMin = 0 ;
			}
		}

		//println "" + IndexPremierMin +" " +nombre.size()+" "+ IndexMinFinal ;
		IndexPremierMin = IndexPremierMin >= nombre.size() ? IndexMinFinal :  IndexPremierMin ;
	}

	void SetPremierMax () {
		//IndexPremierMax = this.GetPremier(IndexMax) ;
		int i ;

		//println "" + IndexMax +" " +ValeurMax+" "+ IndexMaxSecondaire+" "+ valeurMaxSecondaire ;
		if(IndexMax == 0)
		{
			for (i=1; i<nombre.size() && nombre[i] == valeurMaxSecondaire; i++) {
			}
			IndexMaxFinal = IndexMaxSecondaire ;
			//println "" + i +" " +IndexMaxFinal+" "+ valeurMaxSecondaire ;
			IndexPremierMax = i > IndexMaxFinal ? IndexMaxFinal : i ;
		}
		else{
			for (i=0; i<nombre.size() && nombre[i] == ValeurMax; i++) {
			}
			IndexMaxFinal = IndexMax ;
			IndexPremierMax = i > IndexMaxFinal ? IndexMaxFinal : i ;
		}

		//println "" + IndexPremierMax +" " +nombre.size()+" "+ IndexMaxFinal ;
		IndexPremierMax = IndexPremierMax >= nombre.size() ? IndexMaxFinal :  IndexPremierMax ;
	}

	char[] Intervertir (int position1, int position2) {
		char[] resultat = nombre.clone() ;
		char temporaire

		temporaire = resultat[position1] ;
		resultat[position1] = resultat[position2] ;
		resultat[position2] = temporaire ;

		return resultat ;
	}

	void SetNombreMin () {
		nombreMin = this.Intervertir(IndexMinFinal,IndexPremierMin) ;
	}

	void SetNombreMax () {
		nombreMax = this.Intervertir(IndexMaxFinal,IndexPremierMax) ;
	}

	void SetNombreMinString () {
		nombreMinString = new String(nombreMin);
	}

	void SetNombreMaxString () {
		nombreMaxString = new String(nombreMax);
	}

	void Total () {
		this.DecouperChaine();

		this.SetMin();
		this.SetPremierMin();
		this.SetNombreMin();
		this.SetNombreMinString();

		this.SetMax();
		this.SetPremierMax();
		this.SetNombreMax();
		this.SetNombreMaxString();
	}

	void Afficher(int cas) {
		println "Case #" + cas + ": " + nombreMinString + " " + nombreMaxString ;
	}

	void Ecrire(Interface inter, int cas) {
		if(cas == 1) {
			inter.Ecriture("Case #" + cas + ": " + nombreMinString + " " + nombreMaxString + "\n") ;
		} else {
			inter.EcritureAppend("Case #" + cas + ": " + nombreMinString + " " + nombreMaxString + "\n") ;
		}

	}

}

class Interface {

	// http://stackoverflow.com/questions/12260849/read-values-from-formatted-string-java-groovy
	// http://groovy.codehaus.org/Reading+Files+Line+by+Line
	// http://groovy.codehaus.org/Input+Output
	// http://groovy.codehaus.org/groovy-jdk/java/io/File.html

	String dossier;
	String nomFichierIn ;
	String nomFichierOut ;

	File fichierIn ;
	File fichierOut ;

	Interface(String dossierString , String nomFichierInString, String nomFichierOutString){
		dossier = dossierString ;
		nomFichierIn = nomFichierInString ;
		nomFichierOut = nomFichierOutString ;
	}

	void CreationFichier ()
	{
		fichierIn = new File(dossier + nomFichierIn) ;
		fichierOut = new File(dossier + nomFichierOut) ;
	}

	List ChargementDonnees ()
	{
		return fichierIn.readLines() ;
	}

	void Ecriture (String chaine) {
		fichierOut.write(chaine) ;
	}

	void EcritureAppend (String chaine) {
		fichierOut.append(chaine) ;
	}


}


Calcul programme = new Calcul() ;
programme.Main();









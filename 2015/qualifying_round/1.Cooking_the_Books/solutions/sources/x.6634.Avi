#include<stdio.h>
#include<stdlib.h>
#include<math.h>

void printOutput(long i, long min, long max)
{
    printf("Case #%ld: %ld %ld\n", i+1, min, max);
}
int main(void)
{
    // Take input
    long N;
    long i;
    long num,max,min;
    int maxDig  = -1; // so it will always be less than any first digit
    int minDig = 10;
    int maxPos = 1;
    int minPos = 1;
    char minBuf[10];
    char maxBuf[10];
    int len = 0;
    scanf("%ld", &N);
    
    for(i = 0; i < N; i++)
    {
        maxDig  = -1; // so it will always be less than any first digit
        minDig = 10;
        scanf("%ld", &num);
        if(num == 0)
        {
            max = 0;
            min = 0;
            printOutput(i,min,max);
        }  
        else
        {
            len = floor(log10(abs(num))) + 1;

            sprintf(maxBuf,"%ld",num);
            sprintf(minBuf,"%ld",num);
        
            int x = num; 
            int counter=1;
            while (x > 0)
            {
                int digit = x %10; //grab last digit
                x = x / 10;        //throw last digit away
                if (digit!=0 && maxDig < digit)       //if this digit is grater than current max...
                {
                    maxDig = digit;       //... update it!
                    maxPos = len - counter + 1;
                }
                if (digit!=0 && minDig > digit)
                {
                    minPos = len - counter + 1;
                    minDig = digit;
                }
                counter++;
            }
            //printf("minPos=%d,maxPos=%d\n",minPos,maxPos);
            
            // Update the number
            char c = maxBuf[0];
            int firstDigPos = 0;
            int dig;
            int j;
            for(j = 0; c!='\0'; j++)
            {
                c = maxBuf[j];
                dig = atoi(&c);
                //printf("%d\n",dig);
                if (dig != 0)
                {
                    firstDigPos= j;
                    break;
                }
            }
            
            //printf("maxBuf=%s\n",maxBuf);
            if(dig!=maxDig)
            {
                //sprintf(&maxBuf[maxPos-1],"%d", dig);
                maxBuf[maxPos-1] = dig+'0';
                maxBuf[firstDigPos] = maxDig+'0';
            }
            max = atoi(maxBuf);
            //printf("maxBuf=%s\n",maxBuf);
            //printf("max=%ld\n",max);
            
            
                if(dig!=minDig)
                {
                    minBuf[minPos-1] = dig+'0';
                    minBuf[firstDigPos] = minDig+'0'; 
                }
            
                min = atoi(minBuf);
                printOutput(i,min,max);
                
            
        }
        //printf("%ld\n", num);
      
    }
    return 0;
}


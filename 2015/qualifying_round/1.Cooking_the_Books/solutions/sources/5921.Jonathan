using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace Test_template_1
{
     class Program
    {
       

        static void Main(string[] args)
        {
            string line = "";
            string big = "";
            string small = "";
            NumberOperators myOPs = new NumberOperators();
            StreamReader file = new StreamReader(@"D:\Projects\Facebook Hacker Cup 2015\Test template 1\cooking_the_books.txt");
            int numberOfLines = Convert.ToInt32(file.ReadLine());

            StreamWriter fileOut = new StreamWriter(@"D:\Projects\Facebook Hacker Cup 2015\Test template 1\ctb_Solution.txt");

            for (int i = 0; i < numberOfLines; i++ )
            {
                line = file.ReadLine();
                char[] cArrayB = line.ToCharArray();
                big = myOPs.makeBig(cArrayB);
                char[] cArrayS = line.ToCharArray();
                small = myOPs.makeSmall(cArrayS, true);
                //Console.WriteLine(line + "\t\t Case #{0}: {1} {2}", i + 1, small, big);
                fileOut.WriteLine("Case #{0}: {1} {2}", i + 1, small, big);
            }
            fileOut.Close();
            file.Close();

            //Console.ReadLine();
        }
    }

    public class NumberOperators
    {
        public string makeBig(char[] inputArray)
        {
            if (inputArray.Count() == 0)
            {
                return "";
            }

            string bigOut = "";
            char holder;
            int biggestValue = -1;
            int biggestValueIndex = 0;
            int currentValue = 0;
            for (int s = 0; s < inputArray.Count(); s++)
            {
                currentValue = (int)Char.GetNumericValue(inputArray[s]);
                if (currentValue >= biggestValue)
                {
                    biggestValue = currentValue;
                    biggestValueIndex = s;
                }

            }

            if ((int)Char.GetNumericValue(inputArray[0]) == biggestValue)
            {
                char[] subArray = new char[inputArray.Count() - 1];
                for (int i = 1; i < inputArray.Count(); i++)
                {
                    subArray[i - 1] = inputArray[i];
                }
                bigOut = inputArray[0] + makeBig(subArray);
            }
            else
            {
                holder = inputArray[biggestValueIndex];
                inputArray[biggestValueIndex] = inputArray[0];
                inputArray[0] = holder;
                bigOut = new string(inputArray);
            }


            return bigOut;
        }



        public string makeSmall(char[] inputArray, bool firstCall)
        {
            if (inputArray.Count() == 0)
            {
                return "";
            }


            string smallOut = "";
            char holder;
            int smallestValue = 10;
            int smallestValueIndex = 0;
            int smallestNZ = 10; //smallest non-zero
            int smallestNZIndex = 0;

            int currentValue = 0;
            for (int s = 0; s < inputArray.Count(); s++)
            {
                currentValue = (int)Char.GetNumericValue(inputArray[s]);
                if (currentValue <= smallestValue)
                {
                    smallestValue = currentValue;
                    smallestValueIndex = s;
                }
                if ((currentValue != 0) && (currentValue <= smallestNZ))
                {
                    smallestNZ = currentValue;
                    smallestNZIndex = s;
                }

            }


            if (firstCall)
            {
                if ((int)Char.GetNumericValue(inputArray[0]) == smallestNZ)
                {
                    char[] subArray = new char[inputArray.Count() - 1];
                    for (int i = 1; i < inputArray.Count(); i++)
                    {
                        subArray[i - 1] = inputArray[i];
                    }

                    smallOut = inputArray[0] + makeSmall(subArray, false);
                }
                else
                {
                    holder = inputArray[smallestNZIndex];
                    inputArray[smallestNZIndex] = inputArray[0];
                    inputArray[0] = holder;
                    smallOut = new string(inputArray);
                }
            }
            else
            {
                if ((int)Char.GetNumericValue(inputArray[0]) == smallestValue)
                {
                    char[] subArray = new char[inputArray.Count() - 1];
                    for (int i = 1; i < inputArray.Count(); i++)
                    {
                        subArray[i - 1] = inputArray[i];
                    }

                    smallOut = inputArray[0] + makeSmall(subArray, false);
                }
                else
                {
                    holder = inputArray[smallestValueIndex];
                    inputArray[smallestValueIndex] = inputArray[0];
                    inputArray[0] = holder;
                    smallOut = new string(inputArray);
                }
            }


            return smallOut;
        }
    }
}

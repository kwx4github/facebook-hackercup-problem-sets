var path = require('path');
var fs = require('fs');



/*
Find lowest digit other than 0 and swap it with the first digit
if the number didin't change
	from the slice 1, find the lowest digit and swap it with the second digit

1312 -> 1132

*/
var tweaking = function(sNumber){
	var findLowestDigitLastPosition = function(sDigits, bDifferentFromZero){
		var aDigits = sDigits.split(''); //['1','2','6']
		if(bDifferentFromZero){
			aDigits = aDigits.filter(function(sDigit){
				return sDigit !== '0';
			});
		}
		aDigits.sort(function(s1, s2){
			return parseInt(s1) - parseInt(s2);
		});
		return sDigits.lastIndexOf(aDigits[0]);
	};
	var findLargestDigitFirstPosition = function(sDigits){
		var aDigits = sDigits.split(''); //['1','2','6']
		aDigits.sort(function(s1, s2){
			return parseInt(s2) - parseInt(s1);
		});
		return sDigits.indexOf(aDigits[0]);
	};
	var swap = function(nPosition1, nPosition2){
		var aSwapped = sNumber.split(''); //['1','2','6']
		var sFirst = aSwapped[nPosition1];
		aSwapped[nPosition1] = aSwapped[nPosition2];
		aSwapped[nPosition2] = sFirst;
		return aSwapped.join('');
	};
	var findSmallest = function(){
		var sLowestDigitPosition, sSmallest;
		//for each digit except the last one:
		for (var i = 0; i <= sNumber.length - 2; i++) {
			sLowestDigitPosition = i + findLowestDigitLastPosition(sNumber.slice(i), i === 0); //find the lowest digit stating from the counter [different from zero]
			sSmallest = swap(sLowestDigitPosition, i);
			if(sSmallest !== sNumber){
				return sSmallest;
			}
		}
		return sNumber;
	};
	var findLargest = function(){
		var sLargestDigitPosition, sLargest;
		//for each digit except the last one:
		for (var i = 0; i <= sNumber.length - 2; i++) {
			sLargestDigitPosition = i + findLargestDigitFirstPosition(sNumber.slice(i), i === 0); //find the lowest digit stating from the counter [different from zero]
			sLargest = swap(sLargestDigitPosition, i);
			if(sLargest !== sNumber){
				return sLargest;
			}
		}
		return sNumber;
	};
	return {
		smallest: findSmallest(),
		largest: findLargest()
	};
};


//Main:

var sFileName = process.argv[2];
var sFile = path.resolve(__dirname, sFileName);
var sInput = fs.readFileSync(sFile, {encoding: 'utf8'});
var aLines = sInput.split('\n').slice(1); //it doesn't need the first line
var nCounter = 1;
aLines.forEach(function(sLine){
	if(!sLine.length){
		return;
	}
	var oResult = tweaking(sLine); //{smallest, largest}
	console.log('Case #'+nCounter+': '+oResult.smallest+' '+oResult.largest);
	nCounter++;
});


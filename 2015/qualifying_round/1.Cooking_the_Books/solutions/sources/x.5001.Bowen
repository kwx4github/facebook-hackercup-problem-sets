import os
import sys
import math
from collections import defaultdict
from segmenttree import SegmentTree


sys.setrecursionlimit(10**9)

problem_id = os.path.splitext(os.path.basename(__file__))[0]

input_path = '%s.in' % problem_id
output_path = '%s.out' % problem_id

input_file = open(input_path, "r")
output_file = open(output_path, "w+")


def read_line():
    line = ''
    while len(line) == 0:
        line = input_file.readline().strip()
    return line


def write_line(line):
    print line
    return output_file.write(line + os.linesep)


##################################################################################################################
# solution begin
##################################################################################################################

def swap_min(num, allow_zero=True):
    if len(num) == 1:
        return num
    min_index = 0
    for i in range(1, len(num)):
        if (allow_zero or num[i] != '0') and num[i] < num[min_index]:
            min_index = i
    if min_index == 0:
        return [num[0]] + swap_min(num[1:])
    else:
        t = num[0]
        num[0] = num[min_index]
        num[min_index] = t
        return num

def swap_max(num):
    if len(num) == 1:
        return num
    max_index = 0
    for i in range(1, len(num)):
        if num[i] > num[max_index]:
            max_index = i
    if max_index == 0:
        return [num[0]] + swap_max(num[1:])
    else:
        t = num[0]
        num[0] = num[max_index]
        num[max_index] = t
        return num


def solve():
    num = list(read_line())
    min_num = swap_min(num[:], False)
    max_num = swap_max(num[:])
    return ''.join(min_num) + ' ' + ''.join(max_num)

##################################################################################################################
# solution end
##################################################################################################################

if __name__ == "__main__":
    T = int(read_line())
    for case_id in xrange(1, T + 1):
        write_line("Case #%d: %s" % (case_id, solve()))
    input_file.close()
    output_file.close()

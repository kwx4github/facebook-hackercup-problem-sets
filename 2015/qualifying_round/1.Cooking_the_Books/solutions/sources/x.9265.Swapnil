using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ConsoleApplication2
{
    class Program
    {
        static void Main(string[] args)
        {
           string[] alllines = System.IO.File.ReadAllLines(@"E:\cooking_the_books.txt");

            Int32 number = Convert.ToInt32(alllines[0]);
            Boolean invalid = false;
            string[] finaloutput = new string[number];
            if (number >= 1 || number <= 100)
            {
                List<Int32> myList = new List<Int32>();
                List<Int32> myListSmall = new List<Int32>();
                List<Int32> myListLarge = new List<Int32>();

                for (int i = 1; i <= number; i++)
                {
                    myList.Add(Convert.ToInt32(alllines[i]));
                    if (myList[i-1] > 999999999 || myList[i-1] < 0)
                    {
                        invalid = true;
                        break;
                    }
                    myListSmall.Add(makeSmallLarge(myList[i - 1], "min"));
                    myListLarge.Add(makeSmallLarge(myList[i - 1], "max"));
                    Console.WriteLine("Case #" + i + ": " + myListSmall[i - 1].ToString() + " " + myListLarge[i - 1].ToString());
                    finaloutput[i-1] = "Case #" + i + ": " + myListSmall[i - 1].ToString() + " " + myListLarge[i - 1].ToString();
                }

                System.IO.File.WriteAllLines(@"E:\cooking_the_books_output.txt",finaloutput);
                System.Console.ReadKey();
            }
            else { invalid = true; }
                
            if(invalid)
            {
                Console.WriteLine("Invalid range");
            }
        }

        public static Int32 makeSmallLarge(Int32 num, String minmax)
        {
            if (num != 0)
            {
                Int32 temp = num;
                List<int> x = new List<int>();
                while (temp != 0)
                {
                    x.Add(temp % 10);
                    temp = temp / 10;
                }

                x.Reverse();

                int indexOfMinMax;
                int replacewith = 0;

                if (minmax.Equals("min")) 
                { indexOfMinMax = IndexOfMin(x);
                    
                }
                else { indexOfMinMax = IndexOfMax(x); }

                foreach (int var in x)
                {
                    if (x[indexOfMinMax] == var && x.Count>1)
                    {
                        replacewith++;
                    }
                    else break;
                }

                if (x[indexOfMinMax] == 0 && x.Count>1)
                { replacewith = 1; }

                
 if (replacewith != x.Count)
                {
                    if (x[replacewith] == 0 && indexOfMinMax == 0)
                    { }
                    else
                    {
                        temp = x[replacewith];
                        x[replacewith] = x[indexOfMinMax];
                        x[indexOfMinMax] = temp;
                    }
                }

                temp = 0;

                for (int i = 0; i < x.Count; i++)
                {
                    temp = temp + Convert.ToInt32((x[i] * Math.Pow(10.00, (x.Count - i - 1.00))));
                }
                return temp;
            }
            else
                return 0;
        }
        public static Int32 makeLarge(Int32 num)
        {

            return 0;
        }

        public static int IndexOfMin(List<int> self)
        {
            int min = self[0];
            int minIndex = 0;

            for (int i = 1; i < self.Count; ++i)
            {
                if (self[i] <= min && self[i]!=0)
                {
                    
                    min = self[i];
                    minIndex = i;
                }
            }

            if (min == self[0] && self.Contains(0))
            { return self.LastIndexOf(0); }

            return minIndex;
        }

        public static int IndexOfMax(List<int> self)
        {
            int max = self[0];
            int maxIndex = 0;

            for (int i = 1; i < self.Count; ++i)
            {
                if (self[i] >= max && self[i] != 0)
                {

                    max = self[i];
                    maxIndex = i;
                }
            }

            return maxIndex;
        }
    }
}

package com.fb_qual_1;
import java.io.*;
import java.util.Arrays;

/**
 * Created by hapunawej on 1/9/2015.
 */
public class Fb1 {
    public static void main(String[] args)throws IOException {
        FileReader ins = null;
        FileWriter outs = null;

        try {
            ins = new FileReader("cooking_the_books.txt");
            outs = new FileWriter("output.txt");
            BufferedReader br = new BufferedReader(ins);
            String line;
            int c = 0;
            while ((line = br.readLine()) != null) {
                if(c > 0) {
                    //System.out.println("Case #" + (c) + ": " + lesser(line) + " " + greater(line));
                    outs.write("Case #" + (c) + ": " + lesser(line) + " "  +  greater(line) + "\n");
                }
                c++;
            }
            br.close();

        } finally {
            if (ins != null) {
                ins.close();
            }
            if (outs != null) {
                outs.close();
            }
        }
    }
    public static int lesser(String s) {
        //return the smallest value with one digit swap, except 0
        if(Integer.parseInt(s) < 1) {
            return 0;
        }
        String[] scut = s.split("");//(?!^)
        //System.out.println("\n"+Arrays.toString(scut)+"\n"); //working
        int min = 10;
        int min_temp = 0;
        int min_swap = 999999999;
        String temp = "";

        //determine the smallest integer, cannot be 0
        for(int i = 0; i < scut.length; i++) {
            int t = Integer.parseInt(scut[i]);
            if (t<min && t!=0) {
                min = t;
            }
        }
        //System.out.println("\nMinimum = "+min+"\n");

        //determine the smallest value with one swap
        for(int i = 0; i < scut.length; i++) {
            int t = Integer.parseInt(scut[i]);
            if (t == min) {
                temp = scut[0];
                scut[0] = scut[i];
                scut[i] = temp;
                StringBuilder builder = new StringBuilder();
                for(String s2 : scut) {
                    builder.append(s2);
                }
                min_temp = Integer.parseInt(String.valueOf(builder));
                if(min_temp < min_swap) {
                    min_swap = min_temp;
                }
                //put humpty stringy back again
                temp = scut[i];
                scut[i] = scut[0];
                scut[0] = temp;
            }
        }
        //System.out.println("\nMinimum with one swap = "+min_swap+"\n");
        return min_swap;
    }

    public static int greater(String s) {
        //return the greatest value with one digit swap, except 0
        if(Integer.parseInt(s) < 1) {
            return 0;
        }
        String[] scut = s.split("");//(?!^)
        //System.out.println("\n"+Arrays.toString(scut)+"\n"); //working
        int max = 0;
        int max_temp = 0;
        int max_swap = 0;
        String temp = "";

        //determine the largest integer, cannot be 0
        for(int i = 0; i < scut.length; i++) {
            int t = Integer.parseInt(scut[i]);
            if (t>max && t!=0) {
                max = t;
            }
        }
        //System.out.println("\nMaximum = "+max+"\n");

        //determine the largest value with one swap
        for(int i = 0; i < scut.length; i++) {
            int t = Integer.parseInt(scut[i]);
            if (t == max) {
                temp = scut[0];
                scut[0] = scut[i];
                scut[i] = temp;
                StringBuilder builder = new StringBuilder();
                for(String s2 : scut) {
                    builder.append(s2);
                }
                max_temp = Integer.parseInt(String.valueOf(builder));
                if(max_temp > max_swap) {
                    max_swap = max_temp;
                }
                //put humpty stringy back again
                temp = scut[i];
                scut[i] = scut[0];
                scut[0] = temp;
            }
        }
        //System.out.println("\nMaximum with one swap = "+max_swap+"\n");
        return max_swap;
    }
}



function cookBook()
% obtain the location of test file
[fileName,pathName] = uigetfile('*.txt','Select the test file');
tic
% open the test file
try
    fid = fopen([pathName,fileName],'r');
catch ME
    error('Error Opening Test File!');
end

% open the solution file
try
    sid = fopen(['Solution_',fileName],'w');
catch ME
    error('Error Opening Solution file!');
end

% obtain the number of test cases
numTestCase = str2double(fgetl(fid));
% loop through each test case
for i = 1:numTestCase
    % write the header of the soluton file
    fprintf(sid,'Case #%d: ',i);
    value = readTestCase(fid);
    [small,big]=solveCookBook(value);
    fprintf(sid,'%d %d',small,big);
    fprintf(sid,'\n');
end
% close the file
fclose(fid);
fclose(sid);
toc

%% Sub-Function goes here
    function value = readTestCase(fid)
       % get the value
       value = str2double(fgetl(fid));
    end

    function [smallVal, bigVal] = solveCookBook(value)
        % default value
        smallVal = value;
        bigVal = value;
        % check if 0;
        if(value==0)
            return;
        end
        
        % store value in matrix to solve easily
        strValue = num2str(value);
        [~,nCol] = size(strValue);
        strMat = zeros(1,nCol);
        for ii=1:nCol
            strMat(1,ii) = str2double(strValue(1,ii));
        end
        
        % solve for small
        for ii=1:nCol
            currMinVal = strMat(1,ii);
            currMinIdx = 0;
            if(ii==1)
                % special case which don't include 0
                for jj=ii+1:nCol
                    if(strMat(1,jj)>0 && strMat(1,jj)<=currMinVal)
                        currMinVal = strMat(1,jj);
                        currMinIdx = jj;
                    end
                end
            else
                for jj=ii+1:nCol
                    if(strMat(1,jj)<=currMinVal)
                        currMinVal = strMat(1,jj);
                        currMinIdx = jj;
                    end
                end
            end
            if(currMinIdx~=0)
                % do the swap
                smallStr = strValue;
                smallStr(1,ii) = strValue(1,currMinIdx);
                smallStr(1,currMinIdx) = strValue(1,ii);
                smallVal = str2double(smallStr);
                break;
            end
        end
        
        % solve biggest
        for ii=1:nCol
            currMaxVal = strMat(1,ii);
            currMaxIdx = 0;
            if(currMaxVal==9)
                continue;
            end
            % check for the swap index
            for jj=nCol:-1:ii+1
                if(strMat(1,jj)>currMaxVal)
                    currMaxVal = strMat(1,jj);
                    currMaxIdx = jj;
                end
            end
            if(currMaxIdx~=0)
                % do the swap
                bigStr = strValue;
                bigStr(1,ii) = strValue(1,currMaxIdx);
                bigStr(1,currMaxIdx) = strValue(1,ii);
                bigVal = str2double(bigStr);
                break;
            end
        end
    end
end


import java.util.*;
import java.io.*;

public class CookingTheBooks {
	private Scanner s;
	private PrintWriter output;
	
	public static void main(String[] args){
		CookingTheBooks t = new CookingTheBooks();
		t.start();
	}
	
	private void start(){
		try{
			s = new Scanner(new File("C:/Users/turtle/Downloads/cooking_the_books.txt"));
			output = new PrintWriter(new File("C:/Users/turtle/Downloads/cooking_the_books_output1.txt"));
			
			int testCaseNum = s.nextInt();
			s.nextLine();
			
			for(int i=0; i<testCaseNum; i++){	
				String line = s.nextLine();
				String smallest; String largest;
				
				if(line.length()==1){
					smallest = line+"";
					largest = line+"";
				}
				
				smallest = findSmallest(line);
				largest = findBiggest(line);

				output.printf("Case #%d: %s %s\n", i+1, smallest, largest);
			}
		
		} catch(Exception e){
			System.out.println(e.toString());
		}
		
		s.close();
		output.close();
	}
	
	//find the smallest num in the last position that isnt zero
	private String findSmallest(String line) {
		// TODO Auto-generated method stub
		int firstNum = Integer.parseInt(line.charAt(0)+"");
		String smallest = line;
		String numbers = "123456789";
		
		for(int i=0; i<numbers.length(); i++){
			
			if(firstNum<=Integer.parseInt(numbers.charAt(i)+"")){
				break;
			}
			
			int index = line.lastIndexOf(numbers.charAt(i));
			if(index!=-1){
				char[] c = smallest.toCharArray();
				char temp = c[0];
				c[0] = c[index];
				c[index] = temp;
				
				smallest = new String(c);
				break;
			}
		}
		return smallest;
	}
	
	//largest big number

	private String findBiggest(String line) {
		int firstNum = Integer.parseInt(line.charAt(0)+"");
		String largest = line;
		String numbers = "987654321";
		
		for(int i=0; i<numbers.length(); i++){

			if(firstNum>=Integer.parseInt(numbers.charAt(i)+"")){
				break;
			}
			
			int index = line.lastIndexOf(numbers.charAt(i));
			if(index!=-1){
				char[] c = largest.toCharArray();
				char temp = c[0];
				c[0] = c[index];
				c[index] = temp;
				
				largest = new String(c);
				break;
			}
		}
		return largest;
	}
}


import java.io.IOException;
import java.io.File;
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.util.ArrayList;

public class bookCooking
{

    public static void main (String [] args) throws IOException
    {
        File src = new File("cooking_the_books.txt");
        Scanner in = new Scanner(src);
        PrintWriter out = new PrintWriter(new FileWriter("cooking_the_books_output.txt"));

        int times = in.nextInt();
        for (int i = 1; i<= times; i++)
        {
            int num = in.nextInt();

            if (num / 10 == 0) // one digit num
            {
                out.println("Case #" + i + ": " + num + " " + num);
                continue;
            }

            ArrayList<Integer> max = new ArrayList<Integer>();
            ArrayList<Integer> min = new ArrayList<Integer>();
            while (num != 0)
            {
                max.add(num%10);
                min.add(num%10);
                num /= 10;
            }

            int size = max.size();
            int maxDig = maxDigit(max, size);
            while (size > 0 && maxDig == max.get(size-1))
            {
                size--;
                maxDig = maxDigit(max, size);
            }
            if (size > 0)
                swap(max, size-1, maxDig);
            int maxNum = calculate(max);

            size = min.size();
            int minDig = minDigitNo0(min, size);
            while (size > 0 && minDig == min.get(size-1))
            {
                size--;
                minDig = minDigit(min, size);
            }
            if (size > 0)
                swap(min, size-1, minDig);
            int minNum = calculate(min);

            out.println("Case #" + i + ": " + minNum + " " + maxNum);
        }

        out.close();                                  // close the output file
        System.exit(0);                               // don't omit this!
    }

    private static int maxDigit (ArrayList<Integer> digits, int end)
    {
        int max = -1;
        for (int j = 0; j < end; j++)
        {
            if (digits.get(j) > max)
                max = digits.get(j);
        }
        return max;
    }

    private static int minDigit (ArrayList<Integer> digits, int end)
    {
        int min = 10;
        for (int j = 0; j < end; j++)
        {
            if (digits.get(j) < min)
                min = digits.get(j);
        }
        return min;
    }

    private static int minDigitNo0 (ArrayList<Integer> digits, int end)
    {
        int min = 10;
        for (int j = 0; j < end; j++)
        {
            if (digits.get(j) < min && digits.get(j) != 0)
                min = digits.get(j);
        }
        return min;
    }

    private static void swap (ArrayList<Integer> digits, int index, int digit)
    {
        int tmp = digits.get(index);
        int ind = 0;
        while (digits.get(ind) != digit) {
            ind++;
        }
        digits.set(index, digits.get(ind));
        digits.set(ind, tmp);
    }

    private static int calculate (ArrayList<Integer> digits)
    {
        int sum = 0;
        for(int i = digits.size() - 1; i >= 0; i--)
            sum = 10 * sum + digits.get(i);
        return sum;
    }

}
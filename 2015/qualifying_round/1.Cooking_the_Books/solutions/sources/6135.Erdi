#!/usr/bin/env python

import sys

BASE = 10

def main():
  fi = sys.stdin
  fo = sys.stdout
  caseCount = int(fi.readline().strip())
  for i in range(1, caseCount+1):
    inputs = readInput(fi)
    smallest, largest = solve(inputs)
    displayAndClear(fo, i, smallest, largest)

def readInput(f):
  s = f.readline().strip()
  ds = [int(ch) for ch in s]
  return ds

def displayAndClear(f, i, smallest, largest):
  f.write('Case #%d: %d %d\n' % (i, smallest, largest))
  f.flush()

def solve(ds):
  minInt = int(''.join([str(d) for d in cookMin(ds)]))
  maxInt = int(''.join([str(d) for d in cookMax(ds)]))
  return minInt, maxInt

def cookMax(ds):
  mxs = findMaximums(ds)
  found = False
  for i, d in enumerate(ds):
    if d != ds[mxs[i]]:
      found = True
      break

  if found:
    return swapDigits(ds, i, mxs[i])
  else:
    return ds

def findMaximums(ds):
  mxs = []
  mx = -1
  mxInd = -1
  for i in range(len(ds) -1, -1, -1):
    if ds[i] > mx:
      mx = ds[i]
      mxInd = i
    mxs.append(mxInd)
  return mxs[::-1]

def swapDigits(ds, i1, i2):
  return ds[:i1] + [ds[i2]] + ds[i1+1:i2] + [ds[i1]] + ds[i2+1:]

def cookMin(ds):
  mns = findMinimums(ds)
  found = False
  for i, d in enumerate(ds):
    if d != ds[mns[i]]:
      found = True
      break
  if found:
    return swapDigits(ds, i, mns[i])
  else:
    return ds

def findMinimums(ds):
  mns = []
  mn = BASE
  mnInd = -1
  for i in range(len(ds) -1, 0, -1):
    if ds[i] < mn:
      mn = ds[i]
      mnInd = i
    mns.append(mnInd)

  # non-zero min for the first digit
  mnFirst = BASE
  mnFirstInd = -1
  for i, d in enumerate(ds):
    if d <= mnFirst and d != 0:
      mnFirst = d
      mnFirstInd = i

  mns.append(mnFirstInd)
  return mns[::-1]

if __name__ == '__main__':
  main()


#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstring>

#define vi   vector<int>
#define pb   push_back
#define vvi  vector<vector<int> >
#define pii  pair<int,int>
#define ll   long long 
#define vl   vector<ll>
#define vvl  vector<vector<ll> > 
#define mii  map<int,int> 
#define msi  map<string,int> 
#define vpii vector<pair<int,int> >
#define mp   make_pair
#define all(a)  a.begin(), a.end()
#define s(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define k(a,b) scanf("%d %d",&a,&b)
#define n(a) scanf("%d",&a)
#define ll long long


using namespace std;
ll bit[100001];
bool cmp(pair<string,int> p1,pair<string,int> p2)
{
    return p1.first<p2.first;
}
void build_bit(int *arr,int n)
{
    memset(bit,0,400000);
    int idx;
    for (int i = 1; i <=n ; ++i)
    {
        idx=i;
        while(idx<=n)
        {
            bit[idx]+=arr[i-1];
            idx+=(idx&-idx);
        }

    }
}
ll query(int n)
{
    ll sum=0;
    int idx=n;
    while(idx>0)
    {
        sum+=bit[idx];
        idx-=(idx&-idx);
    }
    return sum;
}
void update_point(int idx,int k,int n)
{
    while(idx<=n)
    {
        bit[idx]+=k;
        idx+=(idx&-idx);
    }
}
void range_update(int low,int high ,int key,int n)
{
    update_point(low,key,n);
    update_point(high+1,-key,n);
}
int main()
{
    ios_base::sync_with_stdio(0) ; 
   // freopen("i.txt","r",stdin);
    //freopen("o.txt","w",stdout);
    int t;
    cin>>t;
   for (int k = 0; k < t; ++k)
   {
       int n;
       cin>>n;
       cout<<"Case #"<<k+1<<": ";
       if(n/10==0)
       {
        cout<<n<<" "<<n<<"\n";
        continue;
       }
        int size=1;
        int a=n;
        while(a/10!=0)
        {
            a=a/10;
            size++;
        }
        a=n;
        int arr[size];
        int brr[size];
        for (int i = 0; i < size; ++i)
        {
            brr[size-i-1]=a%10;
            arr[size-i-1]=a%10;
            a=a/10;
        }
        for (int i = 0; i < size; ++i)
        {
            if(arr[i]==*max_element(arr+i,arr+size))
            {
                continue;
            }
            else{
                swap(arr[i],*max_element(arr+i,arr+size));
                break;

            }
        }int mins=99;
        int ptr;
        for (int i = 0; i < size; ++i)
        {
            if(brr[i]<mins&&brr[i]!=0)
            {
                mins=brr[i];
                ptr=i;
            }
        }
        if(mins==brr[0])
        {for (int i = 1; i < size; ++i)
        {
            if(brr[i]==*min_element(brr+i,brr+size))
            {
                continue;
            }
            else{
                swap(brr[i],*min_element(brr+i,brr+size));
                break;

            }
        }

    }
    else{
        swap(brr[ptr],brr[0]);
    }
   
    
    for (int i = 0; i < size; ++i)
    {
        cout<<brr[i];
    }cout<<" ";
     for (int i = 0; i < size; ++i)
    {
        cout<<arr[i];
    }
    cout<<"\n";







   }



    
    
}

#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <iterator>
#include <set>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <list>
#include <sstream>
#include <ctype.h>
#include <utility>
#include <cstdlib>
#include <functional>
#include <numeric>


using namespace std;

#define LL long long
#define linf 998877665544332211ll
#define inf 987654321ll
#define MOD 1000000007ll
#define ADD(v) accumulate(v.begin(),v.end(), 0)
#define PRO(v) accumulate(v.begin(),v.end(), 1,multiplies <int>())
LL POS(LL x) { if (x > 0)  return x; else return 0; }
#define maxe(v) max_element(v.begin(),v.end())
#define mine(v) min_element(v.begin(),v.end())
#define rep(k,a,b) for(int k=(a); k < (b); ++k)
#define per(k,a,b) for(int k=(b-1); k >= (a); --k)
#define all(ctnr) (ctnr).begin(),(ctnr).end()
struct ysh {
	long double z, y, x;
	ysh() {}
	ysh(long double z, long double y, long double x) : z(z), y(y), x(x) {}
	ysh operator + (const ysh &p) const { return ysh(z + p.z, y + p.y, x + p.x); }
	ysh operator - (const ysh &p)  const { return ysh(z - p.z, y - p.y, x - p.x); }
	ysh operator * (long double con)     const { return ysh(z*con, y*con, x*con); }
	ysh operator / (long double con)     const { return ysh(z / con, y / con, x / con); }
	bool operator<(const ysh &rhs) const { return make_pair(z, make_pair(y, x)) < make_pair(rhs.z, make_pair(rhs.y, rhs.x)); }
	bool operator==(const ysh &rhs) const { return make_pair(z, make_pair(y, x)) == make_pair(rhs.z, make_pair(rhs.y, rhs.x)); }
};
int dx[] = { 1, 0, -1, 0, 1, 1, -1, -1 };
int dy[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

//conversion functions
string atob(const int a) {
	stringstream os;
	string b;
	os << a;
	os >> b;
	return b;
}
long long atob(const string a) {
	stringstream os;
	long long b;
	os << a;
	os >> b;
	return b;
}
int main() {
	LL n, m;
	int t;
	cin >> t;
	m = 1;
	while (t--){
		cin >> n;
		LL l;
		string s, smx, smn;
		s= atob(n);
		l = s.size();
		smx = s;
		smn = s;
		for (int i = 0; i < l; i++){
			char mx = s[i];
			int pos = i;
			bool flag = 0;
			for (int j = i+1; j < l; j++){
				if (s[j]>=mx){
					mx = s[j];
					pos = j;
					flag = 1;
				}
			}
			if (flag == 1){
				swap(smx[i], smx[pos]);
				break;
			}
		}
		for (int i = 0; i < l; i++){
			char mn = s[i];
			int pos = i;
			bool flag = 0;
			for (int j = i + 1; j < l; j++){
				if (s[j]<mn && s[j]!='0'){
					mn = s[j];
					pos = j;
					flag = 1;
				}
			}
			if (flag == 1){
				swap(smn[i], smn[pos]);
				break;
			}
		}
		cout << "Case #" << m << ": " << smn << " " << smx << endl;
		m++;
	}

	return 0;
}
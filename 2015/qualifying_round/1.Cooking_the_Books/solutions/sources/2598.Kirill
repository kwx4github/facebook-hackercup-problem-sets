import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		try {
			inputStream = new FileInputStream("a.in");
			outputStream = new FileOutputStream("a.out");
		} catch (FileNotFoundException e) {
			System.err.println("File not found");
			return;
		}
		
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		int T = in.nextInt();
		for (int i = 0; i < T; i++) {
			Solver solver = new Solver();
			out.format("Case %d: ", i + 1);
			solver.solve(in, out);
		}
		
		out.close();
	}
}

class Solver {
	int swap(int n, int i, int j) {
		StringBuilder s = new StringBuilder(Integer.toString(n));
		if (i == 0 && s.charAt(j) == '0')
			return n;
		char t = s.charAt(i);
		s.replace(i, i + 1, Character.toString(s.charAt(j)));
		s.replace(j, j + 1, Character.toString(t));
		return Integer.parseInt(s.toString());
	}
	public void solve(InputReader in, PrintWriter out) {
		int n = in.nextInt();
		int l = Integer.toString(n).length();
		TreeSet<Integer> set = new TreeSet<>();
		set.add(n);
		for (int i = 0; i < l; i++) {
			for (int j = i + 1; j < l; j++) {
				set.add(swap(n, i, j));
			}
		}
		out.println(set.first() + " " + set.last());
	}
}

class InputReader {
	private BufferedReader reader;
	private StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream));
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}

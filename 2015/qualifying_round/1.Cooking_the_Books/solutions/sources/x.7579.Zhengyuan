package ProblemsOnTheFly;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;

import java.util.Scanner;

public class fb_2015_qual_1 {
    public static String txt = "C:\\Users\\zhengyuanzhou\\Desktop\\test.txt";
    public static String output = "C:\\Users\\zhengyuanzhou\\Desktop\\output.txt";
    public static void main(String[] args){
        //Scanner scanner = new Scanner(System.in);
        Scanner scanner = null;
        try {
            FileInputStream fis = new FileInputStream(txt);
            scanner = new Scanner(fis);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        try {
            File file = new File(output);
            BufferedWriter output1 = new BufferedWriter(new FileWriter(file));
                 
        int numOfCases = Integer.parseInt(scanner.nextLine());
        for(int i=0; i<numOfCases; i++){
            String currentS = scanner.nextLine();
            String small = computeSmall(currentS);
            String large = computeLarge(currentS);
            System.out.println("Case #" + (i+1) + ": " + small + " " + large);
            output1.write("Case #" + (i+1) + ": " + small + " " + large + "\n");
        }
        output1.close();
    } catch ( IOException e ) {
        e.printStackTrace();
    }
        System.exit(0);
    }
    
    private static String computeSmall(String s) {
        char[] small = s.toCharArray();
        int min_so_far = Integer.MAX_VALUE;
        int position = 0;
        for (int i = 0; i < small.length; i++){
            if (!(Character.getNumericValue(small[i]) > min_so_far) && (Character.getNumericValue(small[i]) != 0)) {
                min_so_far = Character.getNumericValue(small[i]);
                position = i;
            }
        }
        char tmp = small[0];
        small[0] = small[position];
        small[position] = tmp;
        return String.valueOf(small);
    }
    private static String computeLarge(String s) {
        char[] large = s.toCharArray();
        int max_so_far = Integer.MIN_VALUE;
        int position = 0;
        for (int i = 0; i < large.length; i++){
            if (!(Character.getNumericValue(large[i]) < max_so_far)) {
                max_so_far = Character.getNumericValue(large[i]);
                position = i;
            }
        }
        char tmp = large[0];
        large[0] = large[position];
        large[position] = tmp;
        return String.valueOf(large);
    }
}

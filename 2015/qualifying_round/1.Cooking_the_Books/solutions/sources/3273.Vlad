import java.io.*;
import java.util.Arrays;
import java.util.Locale;
import java.util.StringTokenizer;

public class ProblemA {

    public static void main(String[] args) throws Exception {
        Locale.setDefault(Locale.UK);
        new ProblemA();
    }

    private BufferedReader in = null;
    private PrintWriter out = null;
    private StringTokenizer tok = new StringTokenizer("");
    private String fileName = "#IOtxt";

    public ProblemA() throws Exception {
        init();
        solve();
        in.close();
        out.close();
    }

    private void solve() throws Exception {
      int T = nextInt();
      for (int t = 0; t < T; t++) {
        out.print("Case #" + (t + 1) + ": ");
        char[] a = nextToken().toCharArray();
        int cur = Integer.parseInt(new String(a));
        int max = cur, min = cur;
        for (int i = 0; i < a.length; i++) {
          for (int j = i + 1; j < a.length; j++) {
            if (i == 0 && a[j] == '0') {
              continue;
            }
            a[i] ^= a[j];
            a[j] ^= a[i];
            a[i] ^= a[j];

            int c = Integer.parseInt(String.valueOf(a));
            if (c > max) {
              max = c;
            }
            if (c < min) {
              min = c;
            }

            a[i] ^= a[j];
            a[j] ^= a[i];
            a[i] ^= a[j];
          }
        }
        out.println(min + " " + max);

      }
    }


    private void init() throws FileNotFoundException {
        if (fileName.equals("#Console")) {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
        } else if (fileName.equals("#IOtxt")) {
            in = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
        } else {
            in = new BufferedReader(new FileReader(fileName + ".in"));
            out = new PrintWriter(fileName + ".out");
        }
    }


    private int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    private long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }


    private String nextToken() throws IOException {
        while (!tok.hasMoreTokens()) {
            String s = in.readLine();
            if (s == null) {
                return null;
            }
            tok = new StringTokenizer(s);
        }
        return tok.nextToken();
    }

}
            
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <functional>

using namespace std;

struct NoPossible{};

string smallest(string num)
{
	string small = num;
	vector<int> vec;

	for (int i = 0; i < num.size(); i++)
		vec.push_back(num[i] - '0');

	vector<pair<int, int>> vec_sort;
	for (int i = num.size()-1; i >= 0; i--)
		vec_sort.push_back(make_pair(vec[i], i));

	stable_sort(vec_sort.begin(), vec_sort.end(),
		[](const pair<int, int>& i, const pair<int, int>& j) 
	{ return i.first < j.first; });

	auto loop = [&](){
		for (int i = 0; i < vec.size(); i++)
		{
			for (int j = 0; j < vec_sort.size(); j++)
			{
				if (i >= vec_sort[j].second) continue;
				if (i == 0 && vec_sort[j].first == 0) continue;
				if (vec[i] <= vec_sort[j].first) break;

				return make_pair(i, vec_sort[j].second);
			}
		}
		throw NoPossible();
	};

	try {
		auto p = loop();
		swap(vec[p.first], vec[p.second]);
	}
	catch (const NoPossible&)
	{
	}

	string ret;
	for (int i = 0; i < vec.size(); i++)
		ret += vec[i] + '0';
	return ret;
}

string largest(string num)
{
	string large = num;
	vector<int> vec;

	for (int i = 0; i < num.size(); i++)
		vec.push_back(num[i] - '0');

	vector<pair<int, int>> vec_sort;
	for (int i = num.size()-1; i >= 0; i--)
		vec_sort.push_back(make_pair(vec[i], i));

	stable_sort(vec_sort.begin(), vec_sort.end(),
		[](const pair<int, int>& i, const pair<int, int>& j) 
	{ return i.first > j.first; });

	auto loop = [&](){
		for (int i = 0; i < vec.size(); i++)
		{
			for (int j = 0; j < vec_sort.size(); j++)
			{
				if (i >= vec_sort[j].second) continue;
				// if (i == 0 && vec_sort[j].first == 0) continue;
				if (vec[i] >= vec_sort[j].first) break;

				return make_pair(i, vec_sort[j].second);
			}
		}
		throw NoPossible();
	};

	try {
		auto p = loop();
		swap(vec[p.first], vec[p.second]);
	}
	catch (const NoPossible&)
	{
	}

	string ret;
	for (int i = 0; i < vec.size(); i++)
		ret += vec[i] + '0';
	return ret;
}

int main()
{
	int n;
	auto in = ifstream(L"in2.txt");
	auto out = ofstream(L"out.txt");

	in >> n;

	for (int i = 1; i <= n; i++)
	{
		string num, large, small;
		in >> num;
		large = small = num;

		small = smallest(num);
		large = largest(num);

		out << "Case #" << i << ": " << small << " " << large << endl;
	}
}
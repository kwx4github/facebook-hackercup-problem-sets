using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace R0A1___Cooking_the_Books
{
    /// <summary>
    /// Interaktionslogik für MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            wuala();
        }

        private void wuala()
        {

            String line;

            System.IO.StreamReader fileIn = new System.IO.StreamReader(@"c:\HackerCup\in.txt");
            line = fileIn.ReadLine();
            System.IO.StreamWriter fileOut = new System.IO.StreamWriter(@"c:\HackerCup\out.txt");

            String maxStr;
            String minStr;

            int anzTestfaelle = Convert.ToInt32(line);

            for (int testfall = 0; testfall < anzTestfaelle; testfall++)
            {
                // einlesen
                line = fileIn.ReadLine();
                System.Console.WriteLine("Eingelesen: " + line);
                
                char[] ausgang = line.ToCharArray();

                maxStr = wualaMax(ausgang);

                minStr = wualaMin(ausgang);
                


                //schreiben

                fileOut.WriteLineAsync("Case #" + (testfall + 1) + ": " + minStr + " " + maxStr);
            }

            fileIn.Close();
            fileOut.Flush();
            fileOut.Close();

        }

        private String wualaMin(char[] ausgang)
        {
            if (ausgang.Length == 1 && ausgang[0] == '0')
            {
                return "0";
            }
            int ab = getStelleNiedrigsterWertUeber(ausgang, '0');

            String ergebnis = new String(berechneMax(ausgang, ausgang[ab], 0, false));

            if (ausgang.Min() == '0')
            {
                String tmp = new String(berechneMax(ausgang, '0', 1, false));

                if (Convert.ToInt32(tmp) < Convert.ToInt32(ergebnis))
                {
                    ergebnis = tmp;
                }

            }


            return ergebnis;
        }

        private String wualaMax(char[] ausgang)
        {
            
            return new String(berechneMax(ausgang, ausgang.Max(), 0, true));
            
        }

        //private char[] berechneMin(char[] ausgang, char gesuchtesMin, int ab)
        //{

        //    int stelle = -1;
        //    for (int i = ab; i < ausgang.Length; i++)
        //    {
        //        if (ausgang[i] == gesuchtesMin)
        //        {
        //            stelle = i;
        //        }
        //    }

        //    int tauschstelle = ab;

        //    while (tauschstelle < stelle && ausgang[tauschstelle] == gesuchtesMin)
        //    {
        //        tauschstelle++;
        //    }

        //    if (tauschstelle == stelle)
        //    {

        //        // SCHEI?E!
        //        // nächsthöchste Zahl finden

        //        int stelleNaechsterMaxWert = getStelleHoechstenWertUnter(ausgang, gesuchtesMax);

        //        if (stelleNaechsterMaxWert < 0)
        //        {
        //            // nichts möglich, sollte also passen
        //            return ausgang;
        //        }
        //        else
        //        {
        //            // neue Betrachtung
        //            char naechsterMaxWert = ausgang[stelleNaechsterMaxWert];

        //            return berechneMax(ausgang, /*max*/ naechsterMaxWert, /*betrachten ab*/tauschstelle);
        //        }


        //    }
        //    else
        //    {

        //        char[] ergebnis = (char[])ausgang.Clone();
        //        ergebnis[stelle] = ergebnis[tauschstelle];
        //        ergebnis[tauschstelle] = gesuchtesMin;


        //        return ergebnis;
        //    }

        //    return ausgang;
        //}

        private char[] berechneMax(char[] ausgang, char gesuchtesMax, int ab, bool maxGesucht)
        {
            int stelle = -1;
            for (int i = ab; i < ausgang.Length; i++)
            {
                if (ausgang[i] == gesuchtesMax)
                {
                    stelle = i;
                }
            }

            int tauschstelle = ab;

            while (tauschstelle < stelle && ausgang[tauschstelle] == gesuchtesMax)
            {
                tauschstelle++;
            }

            if (tauschstelle == stelle)
            {

                // SCHEI?E!
                // nächsthöchste Zahl finden

                int stelleNaechsterMaxWert;

                if (maxGesucht)
                {
                    stelleNaechsterMaxWert = getStelleHoechstenWertUnter(ausgang, gesuchtesMax);
                }
                else
                {
                    stelleNaechsterMaxWert = getStelleNiedrigsterWertUeber(ausgang, gesuchtesMax);
                }

                if (stelleNaechsterMaxWert < 0)
                {
                    // nichts möglich, sollte also passen
                    return ausgang;
                }
                else
                {
                    // neue Betrachtung
                    char naechsterMaxWert = ausgang[stelleNaechsterMaxWert];
                    char[] ergebnis;
                    if (maxGesucht)
                    {
                        ergebnis = berechneMax(ausgang, /*max*/ naechsterMaxWert, /*betrachten ab*/stelle + 1, true);
                    }
                    else
                    {
                        ergebnis = berechneMax(ausgang, /*max*/ naechsterMaxWert, /*betrachten ab*/stelle + 1, false);
                    }
                    return ergebnis;
                }


            }
            else
            {

                char[] ergebnis = (char[]) ausgang.Clone();

                if (tauschstelle < ausgang.Length)
                {
                    ergebnis[stelle] = ergebnis[tauschstelle];
                    ergebnis[tauschstelle] = gesuchtesMax;
                }
                

                return ergebnis;
            }

        }

        private int getStelleNiedrigsterWertUeber(char[] ausgang, char grenze)
        {
            int stelle = -1;
            char min = char.MaxValue;
            for (int i = 0; i < ausgang.Length; i++)
            {
                if (ausgang[i] <= min && ausgang[i] > grenze)
                {
                    min = ausgang[i];
                    stelle = i;
                }
            }

            return stelle;
        }

        private int getStelleHoechstenWertUnter(char[] ausgang, char grenze)
        {
            int stelle = -1;
            char max = char.MinValue;
            for (int i = 0; i < ausgang.Length; i++)
            {
                if (ausgang[i] >= max && ausgang[i] < grenze)
                {
                    max = ausgang[i];
                    stelle = i;
                }
            }

            return stelle;
        }

    }
}
///**
//* min finden
//**/

//char minErstes = Char.MaxValue;
//int stelleErstesMin = -1;

//// erstes Min
//for (int i = 0; i < ausgang.Length; i++)
//{
//    if (ausgang[i] < minErstes && ausgang[i] != '0')
//    {
//        minErstes = ausgang[i];
//        stelleErstesMin = i;
//    }

//}

//if (stelleErstesMin == -1)
//{
//    System.Console.WriteLine("Fehler in Zeile " + testfall + " bei Zahl " + line);
//    minStr = "0";
//}
//else
//{
//    tmpArray = (char[])ausgang.Clone();


//    tauschstelle = 0;
//    while (tauschstelle < stelleErstesMin && tmpArray[tauschstelle] <= minErstes)
//    {
//        tauschstelle++;
//    }

//    tmpArray[stelleErstesMin] = ausgang[tauschstelle];
//    tmpArray[tauschstelle] = minErstes;

//    minStr = new String(tmpArray);
//}
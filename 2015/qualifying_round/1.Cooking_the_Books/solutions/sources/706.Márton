import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Scanner;

class Main {

	/**
	 * Extracts digits of a number
	 * 
	 * @return: byte array where i th element contains the digit on the 10^i
	 */
	public static int[] extractDigits(int number) {
		int[] digits = new int[9];
		int place = 0;
		while (number > 0) {
			int digit = number % 10;
			digits[place] = digit;
			place++;
			number /= 10;
		}
		int[] returnDigits = new int[place];
		for (int i = 0; i < place; i++) {
			returnDigits[i] = digits[i];
		}
		return returnDigits;
	}

	public static int buildNumber(int[] digits) {
		int number = 0;
		for (int i = digits.length - 1; i >= 0; --i) {
			number *= 10;
			number += digits[i];
		}
		return number;
	}

	public static void main(String[] args) throws FileNotFoundException {
		Scanner scanner = new Scanner(new FileReader(
				"cooking_the_books_example_input.txt"));
		PrintWriter printWriter = new PrintWriter(new FileOutputStream(
				"output.txt"));

		int inputNum = scanner.nextInt();
		for (int caseNum = 1; caseNum <= inputNum; ++caseNum) {

			int originalNumber = scanner.nextInt();

			int[] originalDigits = extractDigits(originalNumber);
			int length = originalDigits.length;

			int[] minDigits = originalDigits.clone();

			for (int i = length - 1; i >= 0; i--) {
				int minDigit = minDigits[0];
				int minPlace = 0;
				for (int j = 1; j <= i; j++) {
					if ((minDigit > minDigits[j] && (minDigits[j] != 0 || i != length-1))
							|| (minDigit == 0 && i == length-1)) {
						minDigit = minDigits[j];
						minPlace = j;
					}
				}
				if (minDigit != minDigits[i] && (minDigit != 0 || i != length-1)) {
					minDigits[minPlace] = minDigits[i];
					minDigits[i] = minDigit;
					break;
				}
			}

			int minNumber = buildNumber(minDigits);

			int[] maxDigits = originalDigits.clone();

			for (int i = length - 1; i >= 0; i--) {
				int maxDigit = maxDigits[0];
				int maxPlace = 0;
				for (int j = 1; j <= i; j++) {
					if (maxDigit < maxDigits[j]) {
						maxDigit = maxDigits[j];
						maxPlace = j;
					}
				}
				if (maxDigit != maxDigits[i]) {
					maxDigits[maxPlace] = maxDigits[i];
					maxDigits[i] = maxDigit;
					break;
				}
			}

			int maxNumber = buildNumber(maxDigits);

			printWriter.println("Case #" + caseNum + ": " + minNumber + " "
					+ maxNumber);
		}
		scanner.close();
		printWriter.close();
	}

}
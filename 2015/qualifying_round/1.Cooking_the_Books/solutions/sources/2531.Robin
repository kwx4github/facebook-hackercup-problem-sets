#include <iostream>
#include <string>

using namespace std;

void tweak(int n){
	if(n==0){
		cout<<0; cout<<" "; cout<<0;
		return;
	}
	int dg=0;		//number of digits
	int d[9], D[9];	//digits of n in reverse order
	int m[9], mpos[9];	//m[i]/M[i] - minimum/maximum among first i digits
	int M[9], Mpos[9];	//mpos[i]/Mpos[i] - position of min/max
	int nzm, nzmpos;	//non zero minimum and its position
	while(n!=0){
		d[dg]=n%10;
		D[dg]=n%10;
		n=n/10;
		dg++;
	}
	m[1]=d[0];
	mpos[1]=0;
	M[1]=d[0];
	Mpos[1]=0;
	for(int i=2; i<dg; i++){	//calculate min- and maximums
		m[i]=m[i-1];
		mpos[i]=mpos[i-1];
		if(d[i-1]<m[i-1]){
			m[i]=d[i-1];
			mpos[i]=i-1;
		}
		M[i]=M[i-1];
		Mpos[i]=Mpos[i-1];
		if(d[i-1]>M[i-1]){
			M[i]=d[i-1];
			Mpos[i]=i-1;
		}
	}
	int k=0;	//position of first non zero digit
	while(d[k]==0)	//calculate non zero minimum
		k++;
	nzm=d[k];
	nzmpos=k;
	for(int i=k+1; i<dg; i++){
		if(d[i]!=0&&d[i]<nzm){
			nzm=d[i];
			nzmpos=i;
		}
	}
	for(int i=dg-1; i>1; i--){	//switch to minimize
		if(i==dg-1){
			if(d[i]>nzm){
				d[nzmpos]=d[i];
				d[i]=nzm;
				break;
			}
		}
		else{
			if(d[i]>m[i]){
				d[mpos[i]]=d[i];
				d[i]=m[i];
				break;
			}
		}
	}
	for(int j=dg-1; j>=0; j--){
		cout<<d[j];
		}
	cout<<" ";
	for(int i=dg-1; i>1; i--){	//switch to maximize
		if(D[i]<M[i]){
			D[Mpos[i]]=D[i];
			D[i]=M[i];
			break;
		}
	}
	for(int j=dg-1; j>=0; j--){
		cout<<D[j];
		}
}

int main(){
	int T,N;
	cin>>T;
	for(int i=1; i<=T; i++){
		cin>>N;
		cout<<"Case #"; cout<<i; cout<<": ";
		tweak(N);
		if(i!=T)
			cout<<"\n";
	}
}
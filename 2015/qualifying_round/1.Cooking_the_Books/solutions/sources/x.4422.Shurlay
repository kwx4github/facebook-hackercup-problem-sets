import sys
import copy

def secSm (s):
    for i in s:
        if i != 0:
            return i

def makeSm (n, s):
    if s[0] == s[-1]:
        return "".join(map(str,s))

    # 0 smallest
    if s[0] == 0:
       # print "smallest"
        sec = secSm(s)
        secI = n.index(sec)
        zeroI = n.index(0)
        # 2nd smallest in first slot. 0 swap with 1st
        if secI  == 0:
       #     print " 2nd in first"
            n[1], n[zeroI] = 0, n[1]
      #      print(n)
        # 2nd smallest not in first slot. 2ndSm swap with 0th
        else:
     #       print " 2nd not first"
            n[0],n[secI] = sec,n[0]
    #        print(n)
    # 0 not smallest
    else:
#        print "0 not smallest"
        # smallest in 0th
        if n.index(s[0]) == 0:
 #           print " in 0"
            n.pop(0)
            return str(s.pop(0))+makeSm(n,s)
        # smallest not in 0th
        else:
  #          print " not in 0"
            ind = findLast(n,s[0])
           # print str(s[0])+" "+str(ind)
            n[ind],n[0] = n[0],s[0]
   #         print(n)
    
    # return swapped number
    return "".join(map(str,n))

def findLast (lst, i):
    s = len(lst) -1
    l = copy.deepcopy(lst)
    l.reverse()
    return s - l.index(i)

def makeLg (n, s):
    if s[0] == s[-1]:
        return "".join(map(str,s))

    m = copy.deepcopy(n)
    mI = m.index(s[-1])
    # swap 1st and greatest
    m[0],m[mI] = s[-1],m[0]
    one = int("".join(map(str,m)))

    # swap last and smallest
    n[-1],n[n.index(s[0])] = s[0],n[-1]
    two = int("".join(map(str,n)))
    return str(max([one,two]))

def process (i,str):
    n = map(int,list(str))
    n_sort = copy.deepcopy(n)
    n_sort.sort()
    m = copy.deepcopy(n)
    m_sort = copy.deepcopy(n)
    m_sort.sort()
#    print(n)
#   print(n_sort)
    print("Case #"+i+": "+makeSm(n,n_sort)+" "+makeLg(m,m_sort))

if __name__ == '__main__':
    test_cases = open(sys.argv[1], 'r')
    begin = False
    cases = []
    for test in test_cases:
        if not begin:
            begin = True
        else:
            cases.append(test[:-1])

    test_cases.close()

    output = open(sys.argv[2], 'w')
    i = 1
    for c in cases:
#        output.write(process(c))
        process(str(i),c)
        i+=1
    output.close()

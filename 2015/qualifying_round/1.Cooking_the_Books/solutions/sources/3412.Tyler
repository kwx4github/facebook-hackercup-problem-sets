using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace FacebookHackerCup2015
{
    class Program
    {
        static void Main(string[] args)
        {
            const string inputFile = @"E:\Downloads\foo.in";
            const string outputFile = @"E:\Downloads\foo.out";

            var sr = new StreamReader(inputFile);
            var sw = new StreamWriter(outputFile);

            int testCases = int.Parse(sr.ReadLine());
            for (int i = 1; i <= testCases; i++)
            {
                var testCase = CookingTheBooks.ParseCase(sr);
                var result = "Case #" + i + ": " + testCase.SolveCase();
                sw.WriteLine(result);
            }
            sw.Flush();
            sw.Close();
        }
    }
    public class CookingTheBooks
    {
        public List<int> Number { get; set; }

        public static CookingTheBooks ParseCase(TextReader sr)
        {
            var parameters = sr.ReadLine().Select(c => int.Parse(c.ToString())).ToList();
            return new CookingTheBooks { Number = parameters };
        }

        public String SolveCase()
        {
            var b = Biggest();
            var s = Smallest();
            return s + " " + b;
        }

        public String Biggest()
        {
            var goingUp = Number.Select((n, i) => new { Index = i, Digit = n }).OrderByDescending(o => o.Digit).ThenByDescending(o => o.Index).ToList();

            for (int i = 0; i < Number.Count; i++)
            {
                foreach (var candidate in goingUp)
                {
                    if (i == 0 && candidate.Digit == 0)
                        continue;
                    if (i >= candidate.Index)
                        continue;
                    if (Number[i] >= candidate.Digit)
                        continue;
                    var res = Number.Take(i).ToList();
                    res.Add(candidate.Digit);
                    res.AddRange(Number.Skip(i+1).Take(candidate.Index-i-1));
                    res.Add(Number[i]);
                    res.AddRange(Number.Skip(candidate.Index+1));
                    return String.Join("", res.Select(n => n.ToString()));
                }
            }
            return String.Join("", Number.Select(n => n.ToString()));
        }

        public String Smallest()
        {
            var goingDown = Number.Select((n, i) => new { Index = i, Digit = n }).OrderBy(o => o.Digit).ThenByDescending(o => o.Index).ToList();
            for (int i = 0; i < Number.Count; i++)
            {
                foreach (var candidate in goingDown)
                {
                    if (i == 0 && candidate.Digit == 0)
                        continue;
                    if (i >= candidate.Index)
                        continue;
                    if (Number[i] <= candidate.Digit)
                        continue;
                    var res = Number.Take(i).ToList();
                    res.Add(candidate.Digit);
                    res.AddRange(Number.Skip(i + 1).Take(candidate.Index - i - 1));
                    res.Add(Number[i]);
                    res.AddRange(Number.Skip(candidate.Index + 1));
                    return String.Join("", res.Select(n => n.ToString()));
                }
            }
            return String.Join("", Number.Select(n => n.ToString()));
        }
    }

    [TestFixture]
    public class CookingTheBooksTest
    {
        [Test]
        public void GivenTests()
        {

            var tests = new List<Tuple<String,String>>
                            {
                                new Tuple<string, string>("31524", "13524 51324"),
                                new Tuple<string, string>("897", "798 987"),
                                new Tuple<string, string>("123", "123 321"),
                                new Tuple<string, string>("10", "10 10"),
                                new Tuple<string, string>("5", "5 5")
                            };
            foreach (var test in tests)
            {
                StringReader sr = new StringReader(test.Item1);
                var ctb = CookingTheBooks.ParseCase(sr);
                var solution = ctb.SolveCase();
                Assert.AreEqual(test.Item2, solution);
            }
        }

        [Test]
        public void EdgeCases()
        {

            var tests = new List<Tuple<String, String>>
                            {
                                new Tuple<string, string>("0", "0 0"),
                                new Tuple<string, string>("2111", "1112 2111"),
                                new Tuple<string, string>("1230", "1032 3210"),
                                new Tuple<string, string>("1222", "1222 2221"),
                                new Tuple<string, string>("5504", "4505 5540"),
                                new Tuple<string, string>("310285765", "130285765 810235765")
                            };
            foreach (var test in tests)
            {
                StringReader sr = new StringReader(test.Item1);
                var ctb = CookingTheBooks.ParseCase(sr);
                var solution = ctb.SolveCase();
                Assert.AreEqual(test.Item2, solution);
            }
        }
    }
}
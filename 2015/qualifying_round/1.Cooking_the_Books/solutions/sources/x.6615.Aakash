import sys, operator
from collections import defaultdict
from itertools import dropwhile

def rindex(lst, item):
    def index_ne(x):
        return lst[x] != item
    try:
        return dropwhile(index_ne, reversed(xrange(len(lst)))).next()
    except StopIteration:
        raise ValueError, "rindex(lst, item): item not in list"

def list_swaped(orig_lst, r, l):
    lst = orig_lst[:]
    temp = lst[r]
    lst[r] = lst[l]
    lst[l] = temp
    return lst

def list_int_string(lst):
    str_list = [str(x) for x in lst]
    return "".join(str_list)

f_input = sys.stdin
all_lines = f_input.readlines()[1:]

j = 1
for line in all_lines:
    num_arr = [int(x) for x in line.strip()]
    num_max = max(num_arr)
    arr_no_zero = [i for i in num_arr if i is not 0]
    if(len(arr_no_zero) == 0):
        num_min = 0
    else:
        num_min = min(arr_no_zero)
    index_max = num_arr.index(num_max)
    index_min = rindex(num_arr, num_min)

    print "Case #{0}: {2} {1}".format(j, list_int_string(list_swaped(num_arr, 0, index_max)), list_int_string(list_swaped(num_arr, 0, index_min)))
    j += 1

#include <iostream>
#include <math.h>
#include<cstdio>
#include<string>
#include<algorithm>
using namespace std;
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)

int main(){
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    CASET{
        string s;
		cin >> s;
		string s1 = s,s2 = s;
		for(int i = 0 ;i<s.size();i++)
		{
			for(int j = 0;j<s.size();j++)
			{
				swap(s[i],s[j]);
				if(s < s1 && s[0] != '0')
					s1 = s;
				if(s > s2)
					s2 = s;
				swap(s[i],s[j]);
			}
		}
        printf("Case #%d: ",case_n++);
        cout<<s1<<" "<<s2<<endl;
    }
	return 0;
}


































/*
#include <iostream>
#include <math.h>
#include<cstdio>
using namespace std;
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MAX 1048576
int A[MAX][3];
int main(){
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    CASET{
        printf("Case #%d: ", case_n++);
        long long int flag = 0,gp,gc,gf,n,tc,tp,tf;
		scanf("%lld%lld%lld",&gp,&gc,&gf);
		for (long long int i=0;i<MAX;i++) {
			A[i][0]=0; A[i][1]=0; A[i][2]=0;
		}
        scanf("%lld",&n);
        for (long long int i=0;i<n;i++) {
            scanf("%lld%lld%lld", &tp,&tc,&tf);
            for (long long int x = pow(2,i); x < pow(2,n); x += pow(2,i+1)) {
                for (long long int k = 0;k < pow(2,i); k++) {
                    A[x+k][0] += tp;
                    A[x+k][1] += tc;
                    A[x+k][2] += tf;
                    if (A[x+k][0] == gp && A[x+k][1] == gc) {
                        if(A[x+k][2] == gf){
                            flag = 1;
                            break;
                        }
                    }
                }
                if (flag) break;
            }
            if (flag) break;
        }
        if (flag)
            printf("yes\n");
        else
            printf("no\n");
    }
	return 0;
}
*/

#include <iostream>
#include <vector>

using namespace std;


struct fb{
  unsigned long min;
  unsigned long max;
};


void numberToDigs(unsigned long in, vector<int> *digits){
  if(in==0){
    digits->push_back(0);
    return;
  }
  while(in){
    digits->push_back(in%10);
    in=in/10;
  }
}



unsigned long swapAndGenerateNum(vector<int> *digits, int si1, int si2){
  unsigned long r=0;
  unsigned long q=1;

  //fix si1,si2
  si1 = digits->size()-si1-1;
  si2 = digits->size()-si2-1;
  
  for(int i=0; i<digits->size(); i++){
    if(si1==i){
      r+= digits->at(si2)*q;
    }else if(si2==i){
      r+= digits->at(si1)*q;
    }else{
      r+=digits->at(i)*q;
    }
    q*=10;
  }
  return r;
}

void fbProblem(unsigned long *in, unsigned long *min, unsigned long *max){
  vector<int> digits;
  *min = *in;
  *max = *in;
  
  numberToDigs(*in,&digits);

  if(digits.size()==1){
    return;
  }

  //to do swap all possiblities
  for(int i=0; i<digits.size(); i++){
    for(int s=i+1; s<digits.size(); s++){
      //check zero swap
      if(i==0 && digits.at(digits.size()-s-1)==0)
	continue;
	
      unsigned long sn = swapAndGenerateNum(&digits,i,s);
      if(*min>sn){
	*min = sn;
      }else if(*max<sn){
	*max = sn;
      }
    }
  }  
}

int main(){

  //cases
  int t;
  cin>>t;

  //input
  fb results[t];
  int i=0;
  while(i!=t){
    unsigned long c,min,max;
    cin>>c;
    fbProblem(&c,&min,&max);
    
    results[i].min = min;
    results[i].max = max;
    i++;
  }

  //output
  i=0;
  while(i!=t){
    cout<<"Case #"<<(i+1)<<": "<<results[i].min<<" "<<results[i].max<<endl;
    i++;
  }
  
  return 0;
}

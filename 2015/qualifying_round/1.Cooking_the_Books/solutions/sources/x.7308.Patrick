
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <vector>
#include <fstream>

std::vector<int> 
split_digits( int n );

int 
merge_digits( std::vector<int> digits );

std::vector<int> 
min_value( std::vector<int> digits );

std::vector<int> 
max_value( std::vector<int> digits );

std::vector<int> 
minmax_value( int n );

int 
max_index( std::vector<int> v, int start, int end );

int 
min_index( std::vector<int> v, int start, int end );

int 
main(int argc, char **argv)
{
	char filename[100];
	
	printf( "enter file path for input...\n ");
	scanf( "%s", filename );
	printf( "\n" );

	std::fstream file(filename);
	
	std::vector<int> input_vector;
	int input;
	
	while( file >> input )
	{
		input_vector.push_back( input );
	}
	
	for ( int i = 1; i < input_vector.size(); i++ )
	{
		std::vector<int> output_vector = minmax_value( input_vector[i] );
		printf( "Case #%d: %d %d\n", i, output_vector[1], output_vector[2] );
		
	}
}

std::vector<int> 
minmax_value( int n )
{
	std::vector<int> digits = split_digits( n );
	
	int min = merge_digits( min_value( digits ) );
	int max = merge_digits( max_value( digits ) );
	
	std::vector<int> values;
	values.push_back( n );
	values.push_back( min );
	values.push_back( max );
	
	return values;
}

std::vector<int>
split_digits( int n )
{
	int d = log10( n );
	std::vector<int> digits;
	
	for ( int i = 0; i <= d; i++ )
	{
		int div = pow( 10, i );
		if ( div%10 != 0 && div != 1 )div += 1;
		digits.push_back( n/div % 10 );
	}
	
	return digits;
}

int 
merge_digits( std::vector<int> digits )
{
	int d = digits.size() - 1;
	int n = 0;
	
	for ( int i = d; i >= 0; i--)
	{
		int mul = pow( 10, i );
		if ( mul%10 != 0&& mul != 1 ) mul += 1;
		n += digits[i] * mul;
	}
	
	return n;
}

std::vector<int> 
max_value( std::vector<int> digits )
{
	int max_ind = 0;
	int min_ind = 0;
	
	for ( int i = digits.size() - 1; i > 0 && min_ind < 1; i-- )
		for ( int j = i - 1; j >= 0 && min_ind < 1; j-- )
			if ( digits[i] < digits[j] ) 
				min_ind = i;
				
	if ( min_ind == 0 )
		return digits;
		
	max_ind = max_index( digits, 0, min_ind );
	
	int tmp = digits[min_ind];
	digits[min_ind] = digits[max_ind];
	digits[max_ind] = tmp;
	
	return digits;
}

std::vector<int> 
min_value( std::vector<int> digits )
{
	int max_ind = 0;
	int min_ind = 0;
	
	for ( int i = digits.size() - 1; i > 0 && max_ind < 1; i-- )
		for ( int j = i - 1; j >= 0 && max_ind < 1; j-- )
		{
			if ( digits[i] > digits[j] ) 
				max_ind = i;
		}
				
	if ( max_ind == 0 )
		return digits;
		
	min_ind = min_index( digits, 0, max_ind );
	
	if ( max_ind == digits.size() - 1 && digits[min_ind] == 0 && digits.size() > 1)
	{
		int lower = min_index( digits, 0, min_ind );
		min_ind = min_index( digits, min_ind+1, max_ind );
		if ( digits[lower] < digits[min_ind] )
			min_ind = lower;
	}
	int tmp = digits[min_ind];
	digits[min_ind] = digits[max_ind];
	digits[max_ind] = tmp;
	
	return digits;
}

int 
max_index( std::vector<int> v, int start, int end )
{
	int ind = 0;
	for ( int i = 0; i < end; i++ )
		if ( v[i] > v[ind] )
			ind = i;
	return ind;
}

int 
min_index( std::vector<int> v, int start, int end )
{
	int ind = max_index( v, start, end );
	for ( int i = 0; i < end; i++ )
		if ( v[i] < v[ind] )
			ind = i;
	return ind;
}
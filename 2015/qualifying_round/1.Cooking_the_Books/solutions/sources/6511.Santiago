/*Santiago Zubieta*/
#include <iostream>
#include <numeric>
#include <fstream>
#include <climits>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stack>
#include <deque>
#include <vector>
#include <string>
#include <cstdlib>
#include <cassert>
#include <sstream>
#include <iterator>
#include <algorithm>

using namespace std;

void swap(char *a, char *b) {
    char temp;
    temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    string a, b, n;
    int T;
    cin >> T;
    bool swapped;
    for(int z = 1; z <= T; z++) {
        cin >> n;
        a = b = n;
        swapped = false;
        // So we only perform a single swap, anything more than that will be
        // noticed by an auditor, and we will be put into jail!
        // ...
        // Lets first find the swap that yields the smallest value possible
        // We'll go on storing the position with the lowest value (and its 
        // index) so we find the overall smaller value compared to the cur-
        // rent value and perform a swap.
        int index;
        int val;
        for(int i = 0; i < a.length(); i++) {
            val = a[i];
            index = -1;
            for(int j = i + 1; j < a.length(); j++) {
                if(a[j] < a[i] && a[j] <= val) {
                // If we found a smaller value ahead of the current comparisson
                // place, we would want to swap this pair of values so that the
                // smaller value takes a position closest to the top.
                    if(i == 0 && a[j] == '0') {
                    // Ignore the case when we may bring a 0 value to the lead
                    // position creating a number with a lower amount of digits
                        continue;
                    }
                    index = j;
                    val = a[j];
                }
            }
            if(index != -1) {
                swap(&a[index], &a[i]);
                break;
            }
        }
        for(int i = 0; i < b.length(); i++) {
            val = b[i];
            index = -1;
            for(int j = i + 1; j < b.length(); j++) {
                if(b[j] > b[i] && b[j] >= val) {
                // If we found a bigger value ahead of the current comparisson
                // place, we would want to swap this pair of values so that the
                // bigger value takes a position closest to the top.
                    index = j;
                    val = b[j];
                }
            }
            if(index != -1) {
                swap(&b[index], &b[i]);
                break;
            }
        }
        printf("Case #%d: %s %s\n", z, a.c_str(), b.c_str());
    }
}
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <sstream>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <utility>
#include <algorithm>
#include <limits>
#include <iomanip>

#define INF 1000000000
#define Inf 1000000000000000000

using namespace std;

typedef long long ll;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vii> vvii;


int main() {
  //freopen("in","r",stdin);
  //freopen("out15","w",stdout);
  int t,menorind,maiorind,sz;
  char s[100],menor,maior;
  scanf("%d",&t);
  getchar();
  for(int i = 1; i <= t; ++i) {
    scanf("%s",s);
    int sz = strlen(s);
    printf("Case #%d: ",i);
    int found = false;
    for(int k = 0; k < sz - 1; ++k) {
      menor = s[k];
      for(int l = k + 1; l < sz; ++l) {
        if (s[l] < menor && (s[l] != '0' || k > 0)) {
          menor = s[l];
          menorind = l;
        }
      }
      if (menor != s[k]) {
        found = true;
        char aux = s[k];
        s[k] = s[menorind];
        s[menorind] = aux;
        printf("%s ",s);
        aux = s[k];
        s[k] = s[menorind];
        s[menorind] = aux;
        break;
      }
    }
    if (!found) {
      printf("%s ",s);
      if (s[sz-1] == '0') printf("%s\n",s);
      else {
        char aux = s[0];
        s[0] = s[sz - 1];
        s[sz - 1] = aux;
        printf("%s\n",s);
      }
    } else {
      found = false;
      for(int k = 0; k < sz - 1; ++k) {
        maior = s[k];
        for(int l = sz - 1; l > k; l--) {
          if (s[l] > maior) {
            maior = s[l];
            maiorind = l;
          }
        }
        if (maior != s[k]) {
          found = true;
          char aux = s[k];
          s[k] = s[maiorind];
          s[maiorind] = aux;
          printf("%s\n",s);
          break;
        }
      }
      if (!found) printf("%s\n",s);
    }

  }
  return 0;
}

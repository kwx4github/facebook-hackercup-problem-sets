import java.io.*;

// bydlocode
public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(new File("input.txt")));
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("output.txt")));
		int t = Integer.parseInt(br.readLine());
		for (int i = 0; i < t; i++) {
			String number = br.readLine();
			bw.write("Case #" + (i + 1) + ": ");

			if (number.length() == 1) {
				bw.write(number + " " + number);
				bw.newLine();
			} else {
				int[] lastPos = new int[10];
				int[] count = new int[10];
				int minDigit = 9;
				int maxDigit = 0;
				for (int j = 0; j < number.length(); j++) {
					int digit = number.charAt(j) - '0';
					if (digit > 0 && digit < minDigit) {
						minDigit = digit;
					}
					if (digit > maxDigit) {
						maxDigit = digit;
					}
					lastPos[digit] = j;
					count[digit]++;
				}

				if (minDigit == (number.charAt(0) - '0')) {
					count[number.charAt(0) - '0']--;
					int[] order = new int[number.length() - 1];
					int curr = 0;
					for (int j = 0; j < 10; j++) {
						while (count[j] > 0) {
							order[curr] = j;
							count[j]--;
							curr++;
						}
					}

					int k = 1;
					while ((k < number.length()) && ((number.charAt(k) - '0') == order[k - 1])) {
						k++;
					}
					if (k == number.length()) {
						bw.write(number);
					} else {
						char[] res = number.toCharArray();
						res[lastPos[order[k - 1]]] = res[k];
						res[k] = (char) (order[k - 1] + '0');
						bw.write(res);
					}
				} else {
					char[] res = number.toCharArray();
					res[lastPos[minDigit]] = res[0];
					res[0] = (char) (minDigit + '0');
					bw.write(res);
				}
				bw.write(" ");

				if (maxDigit == (number.charAt(0) - '0')) {
					count[number.charAt(0) - '0']--;
					int[] order = new int[number.length() - 1];
					int curr = 0;
					for (int j = 9; j >= 0; j--) {
						while (count[j] > 0) {
							count[j]--;
							order[curr] = j;
							curr++;
						}
					}

					int k = 1;
					while ((k < number.length()) && ((number.charAt(k) - '0') == order[k - 1])) {
						k++;
					}
					if (k == number.length()) {
						bw.write(number);
					} else {
						char[] res = number.toCharArray();
						res[lastPos[order[k - 1]]] = res[k];
						res[k] = (char) (order[k - 1] + '0');
						bw.write(res);
					}
				} else {
					char[] res = number.toCharArray();
					res[lastPos[maxDigit]] = res[0];
					res[0] = (char) (maxDigit + '0');
					bw.write(res);
				}
				bw.newLine();
			}
		}
		bw.close();
	}
}

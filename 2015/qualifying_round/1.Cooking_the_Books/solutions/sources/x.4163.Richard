import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * Created by Richard Zhang on 1/8/15.
 */
public class CookingTheBooks {
    public static void main(String[] args) throws Exception {
        if (args.length < 1) {
            log("Please provide input file");
            System.exit(0);
        }

        String[] numbers = readNumbers(args[0]);
        for (int i = 0; i < numbers.length; i++) {
            Tuple<char[], char[]> tuple = locateOne(numbers[i].toCharArray(), numbers[i].length() - 1);
            log("Case #" + (i+1) + ": " + new String(tuple.first) + " " + new String(tuple.second));
        }
    }

    private static Tuple<char[], char[]> locateOne(char[] number, int index) {
        char[] smallest = number;
        char[] largest = number;
        for (int i = index; i > 0; i--) {
            if (i == 1 && number[i] == '0') {
                continue;
            }
            if (number[i] == number[i - 1]) {
                continue;
            }

            char[] new_number = new String(number).toCharArray();
            char temp = new_number[i];
            new_number[i] = new_number[i - 1];
            new_number[i - 1] = temp;
            if (number[i] > number[i - 1]) {
                largest = new_number;
            } else {
                smallest = new_number;
            }
        }

        if (index > 0) {
            Tuple<char[], char[]> nextOne = locateOne(number, index-1);
            if (Integer.parseInt(new String(nextOne.first)) < Integer.parseInt(new String(smallest))) {
                smallest = nextOne.first;
            }
            if (Integer.parseInt(new String(nextOne.second)) > Integer.parseInt(new String(largest))) {
                largest = nextOne.second;
            }
        }
        return new Tuple<char[], char[]>(smallest, largest);
    }

    private static String[] readNumbers(String path) {
        try {
            FileReader fileReader = new FileReader(path);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            String line = bufferedReader.readLine();
            int n = Integer.parseInt(line);
            if (n < 1 || n > 100) {
                log("Invalid number of numbers " + n);
                System.exit(0);
            }

            String[] numbers = new String[n];

            line = bufferedReader.readLine();
            int i = 0;
            while (line != null) {
                Integer.parseInt(line);
                numbers[i++] = line;
                line = bufferedReader.readLine();
            }

            return numbers;
        } catch (FileNotFoundException e) {
            log("File not found");
            System.exit(0);
        } catch (IOException e) {
            log("Error in reading file " + path);
            System.exit(0);
        } catch (Exception e) {
            log("error in reading file " + e.getMessage());
        }

        return null;
    }

    private static void log(String line) {
        System.out.println(line);
    }

    private static class Tuple<T1, T2> {
        public final T1 first;
        public final T2 second;

        public Tuple(T1 first, T2 second) {
            this.first = first;
            this.second = second;
        }
    }
}


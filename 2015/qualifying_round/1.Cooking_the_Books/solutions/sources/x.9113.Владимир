package hello
import scala.io
import scala.io.Source
import java.io._

object CookingTheBooks {

 val path = "C:\\Users\\Robert\\workspace\\hello\\src\\hello\\"
                                                  //> path  : String = C:\Users\Robert\workspace\hello\src\hello\
  val src = Source.fromFile(path.concat("cooking_the_books.txt"))
                                                  //> src  : scala.io.BufferedSource = non-empty iterator
  val fw = new FileWriter(path.concat("result.txt"), true) ;
                                                  //> fw  : java.io.FileWriter = java.io.FileWriter@26ba2a48
  
  val lines = src.getLines.toList                 //> lines  : List[String] = List(20, 796888162, 422931895, 999999999, 820715607,
                                                  //|  218198062, 764921681, 92106130, 571198404, 731407053, 729970282, 9990999, 1
                                                  //| 0, 31524, 621007349, 474867873, 442015041, 155530534, 32753219, 0, 314138255
                                                  //| )
  val T: Int = lines.head.toInt                   //> T  : Int = 20
  (1 to T).foreach { index =>
    val lst =  lines.tail(index - 1).toList
    val str =lst.mkString
    val maxChar = lst.max.toString
    val minChar = str.map(_.toString).filter { x => x != 0 }.toList.min.toString
    val length = str.length()
    var maximum: Long = str.toLong
    var minimum: Long = str.toLong
    if (maxChar == minChar) {}
    else {
      for (i <- lst.indices) {
        val char = lst(i).toString
        if ((char == maxChar) && (i > 0)) {
          var newNumber: Long = (maxChar + str.substring(1, i) + str.take(1) + str.takeRight(length - i - 1)).toLong
          if (maximum < newNumber) {
            maximum = newNumber
          }
        } else if ((char == minChar) && (i > 0)) {
          var newNumber2: Long = (minChar + str.substring(1, i) + str.take(1) + str.takeRight(length - i - 1)).toLong
          if (minimum > newNumber2) {
            minimum = newNumber2
          }
        }
      }
    }
    fw.write(s"Case #$index: $minimum $maximum\n")
  }
  fw.close()
  src.close
  println("That's all!")                          //> That's all!
}
#include <string>
#include <iostream>
#include <algorithm>
#include <utility>

using namespace std;

template <typename MaxElementFunc>
string findmax(const string& s, char ignoredDigit, MaxElementFunc MaxElement)
{
    if(s.size() <= 1)
    {
        return s;
    }
    
    auto resp = s; 
    char maxd = *MaxElement(resp.begin(), resp.end());
    
    auto firstnonmax = find_if(resp.begin(), resp.end(), [&](char c) -> bool { return c != maxd;});
    if(firstnonmax == resp.end())
    {
        return resp;
    }
    
    string validmax;
    copy_if(firstnonmax + 1, resp.end(), back_inserter(validmax), [&](char c) -> bool { return c != ignoredDigit;});
    
    char maxafter = *MaxElement(validmax.begin(), validmax.end());
    
    auto lastmax = find(resp.rbegin(), resp.rend(), maxafter);
    auto firstnonmaxpos = firstnonmax - resp.begin();
    auto lastmaxpos = resp.rend() - lastmax - 1;
    if(firstnonmaxpos >= lastmaxpos)
    {
        return resp;
    }
    
    swap(*firstnonmax, *lastmax);
    return resp;
}

string findmax(const string& s)
{
    return findmax(s, 0, max_element<string::iterator>);
}

string findmin(const string& s)
{  
    auto ignoreZero = findmax(s, '0', min_element<string::iterator>);
    
    auto nonfirst = s.substr(1);
    auto ignoreFirst = s[0] + findmax(nonfirst, 0, min_element<string::iterator>);
    
    return min(ignoreZero, ignoreFirst);
}

pair<string, string> solve(const string& s)
{
    return make_pair(findmin(s), findmax(s));
}

int main()
{
    int t;
    cin >> t;
    for(int lp=1;lp<=t;++lp)
    {
        string s;
        cin >> s;
        auto resp = solve(s);
        cout << "Case #" << lp << ": " << resp.first << " " << resp.second << "\n";
    }
}
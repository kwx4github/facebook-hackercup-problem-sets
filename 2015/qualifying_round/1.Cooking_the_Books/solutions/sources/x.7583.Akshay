package main

import "fmt"
import "os"
import "bufio"

func MaxNum(num []int) {
	l := len(num)

	currMax := make([]int, l)

	for i := range currMax {
		currMax[i] = i
	}

	i := l - 2
	for ; i >= 0; i-- {
		if num[i] < num[currMax[i+1]] {
			currMax[i] = currMax[i+1]
		}
	}

	for j := 0; j < l; j++ {
		if currMax[j] != j {
			num[j], num[currMax[j]] = num[currMax[j]], num[j]
			break
		}
	}
}

func MinNum(num []int) {
	l := len(num)

	currMin := make([]int, l)

	for i := range currMin {
		currMin[i] = i
	}

	i := l - 2
	for ; i >= 0; i-- {
		if num[i] > num[currMin[i+1]] {
			currMin[i] = currMin[i+1]
		}
	}

	if currMin[0] != 0 && num[currMin[0]] == 0 {
		till := 0
		for j := 1; j < l; j++ {
			if num[j] > 0 && num[j] < num[till] {
				till = j
			}
		}
		num[0], num[till] = num[till], num[0]
		return
	}

	for j := 0; j < l; j++ {
		if currMin[j] != j {
			num[j], num[currMin[j]] = num[currMin[j]], num[j]
			break
		}
	}
}
func stringFromInts(arr []int) string {
	out := make([]rune, len(arr))
	for i, a := range arr {
		out[i] = rune(a) + '0'
	}
	return string(out)
}

func main() {
	scanner := bufio.NewScanner(os.Stdin)

	scanner.Scan()

	n := 1

	for scanner.Scan() {
		numstr := scanner.Text()
		num := make([]int, len(numstr))
		for i, r := range numstr {
			num[i] = int(r - '0')
		}

		min_num, max_num := make([]int, len(numstr)), make([]int, len(numstr))
		copy(min_num, num)
		MinNum(min_num)
		copy(max_num, num)
		MaxNum(max_num)

		fmt.Printf("Case #%d: %s %s\n", n, stringFromInts(min_num), stringFromInts(max_num))
		n++
	}
}

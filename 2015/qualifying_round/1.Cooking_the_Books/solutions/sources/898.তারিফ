#include <bits/stdc++.h>

using namespace std ; 

bool ok( vector<int> digs , vector<int> org ) {
	int diff = 0 ; 

	for( int i = 0 ; i < digs.size() ; i ++ ) {
		if( digs[ i ] != org[ i ] ) diff ++ ; 
	}
	
	if( diff == 2 && digs[ 0 ] != 0 ) {
		return true ;
	} 
	return false ; 
}

int getNum( vector<int> v ) {
	int ret = 0 ; 

	for( int i = 0 ; i < v.size() ; i ++ ) {
		ret *= 10 ; 
		ret += v[ i ] ; 
	}
	
	return ret ; 
}

pair<int,int> getMinMax( int N ) {
	vector<int> digs ; 

	int tmp = N ; 
	int retmin = N ; 
	int retmax = N ; 

	pair<int,int> result ; 
	result.first = result.second = 0 ;

	if( N == 0 ) return result ; 

	while( tmp != 0 ) {
		digs.push_back( tmp % 10 ) ; 
		tmp /= 10 ; 
	}

	vector<int> org = digs ; 
	reverse( org.begin() , org.end() ) ; 
	sort( digs.begin() , digs.end() ) ; 
	
	for( int i = 0 ; i < org.size() ; i ++ ) {
		//cout << org[ i ] << endl ; 
	}

	do {
		if( ok( digs , org ) ) {
			int curnum = getNum( digs ) ; 

			if( curnum < retmin ) {
				retmin = curnum ; 
			}

			if( curnum > retmax ) {
				retmax = curnum ; 
			}
		}
		
	}while(next_permutation(digs.begin(),digs.end()));

	result.first = retmin ; 
	result.second = retmax ; 
	return result ; 
}


pair<int,int> solve( int N ) {
	pair<int,int> ret = getMinMax( N ) ; 
	//ret.first = getMin( N ) ; 
	//ret.second = getMax( N ) ; 

	return ret ; 
}

int main() {
	
	int N , T ; 

	
	cin >> T ; 

	for( int i = 0 ; i < T ; i ++ ) {
		cin >> N ; 

		pair<int,int> res = solve( N ) ; 

		cout << "Case #" << i + 1 << ": " << res.first << " " << res.second << "\n" ; 
	}
	
	return 0 ; 
}

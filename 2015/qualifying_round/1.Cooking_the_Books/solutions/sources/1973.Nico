import java.util.Scanner;
import java.io.*;
class CookingTheBooks {
	public static void main(String[] args) {
		try {
			Scanner in = new Scanner(new File("cooking_the_books.txt"));
			int numCases = in.nextInt();
			for (int caseNum = 1; caseNum <= numCases; caseNum++) {
				String number = in.next();
				System.out.println("Case #" + caseNum + ": " + getSmallest(number) + " " + getLargest(number));	
			}
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	
	private static String getSmallest(String number) {
		// Check that swaps are indeed possible
		if (number.length() == 1) {
			return number;
		}
		// Check most significant digit (ignoring 0's);
		char digit = number.charAt(0);
		int lowestIndex = 0;
		for (int j = 1; j < number.length(); j++) {
			if ((number.charAt(j) <= number.charAt(lowestIndex))&& number.charAt(j) != '0') {
				lowestIndex = j;
			}
		}
		if (digit != number.charAt(lowestIndex)) {
			return swap(number, 0, lowestIndex);
		}
		// Check remaining digits 
		for (int i = 1; i < number.length() - 1; i++) {
			digit = number.charAt(i);
			lowestIndex = i;
			for (int j = i + 1; j < number.length(); j++) {
				if (number.charAt(j) <= number.charAt(lowestIndex)) {
					lowestIndex = j;
				}
			}
			if (digit != number.charAt(lowestIndex)) {
				return swap(number, i, lowestIndex);
			}
		}
		// No smaller digits to the right. Number is the smallest.
		return number;
	}
	
	private static String getLargest(String number) {
		// Check that swaps are indeed possible
		if (number.length() == 1) {
			return number;
		}
		// Check most significant digit (ignoring 0's);
		char digit = number.charAt(0);
		int largestIndex = 0;
		for (int j = 1; j < number.length(); j++) {
			if (number.charAt(j) >= number.charAt(largestIndex)){
				largestIndex = j;
			}
		}
		if (digit != number.charAt(largestIndex)) {
			return swap(number, 0, largestIndex);
		}
		// Check remaining digits 
		for (int i = 1; i < number.length() - 1; i++) {
			digit = number.charAt(i);
			largestIndex = i;
			for (int j = i + 1; j < number.length(); j++) {
				if (number.charAt(j) >= digit) {
					largestIndex = j;
				}
			}
			if (digit != number.charAt(largestIndex)) {
				return swap(number, i, largestIndex);
			}
		}
		// No smaller digits to the right. Number is the smallest.
		return number;
	}
	
	private static String swap(String number, int a, int b) {
		char[] numberAsArray = number.toCharArray();
		char temp = numberAsArray[a];
		numberAsArray[a] = numberAsArray[b];
		numberAsArray[b] = temp;
		String result = new String(numberAsArray);
		return result;
	}
}
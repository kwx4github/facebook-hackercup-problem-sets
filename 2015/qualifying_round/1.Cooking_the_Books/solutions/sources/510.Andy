import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;


public class CookingTheBooks2 {
	
	private final static int valI = 0;
	private final static int minI = 1;
	private final static int maxI = 2;
	
	public static void main (String [] args) throws IOException {

		BufferedReader f = new BufferedReader(new FileReader("cooking_the_books.txt"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("ctb.txt")));

		StringTokenizer st = new StringTokenizer(f.readLine());
		int numOfInts = Integer.parseInt(st.nextToken());
				
		int[][] fudge = new int[numOfInts][3];
		
		for(int i = 0; i < fudge.length; i++){
			fudge[i] = findMinMax(Integer.parseInt(f.readLine()));
		}
		
		for(int i = 0; i < fudge.length; i++){
			out.write("Case #" + (i+1) + ": " + fudge[i][minI] + " " + fudge[i][maxI] + "\n");
		}
		out.close();
	}

	private static int[] findMinMax(int n) {
		int[] ret = new int[3];
		ret[0] = n;
		ret[1] = n;
		ret[2] = n;
		
		if(n == 0)
			return ret;
		
		int length = (int) Math.floor(Math.log10(n))+1;
		int m;
		
		//left to right
		for(int i = 0; i < length; i++){
			for(int j = i+1; j < length; j++){
				if(i != 0 || (i == 0 && digitAt(n, length - j - 1) != 0)){
					m = swap(n, length - 1 - i, length - 1 - j);
					if(m < ret[1]){
						ret[1] = m;
					}
					if(m > ret[2]){
						ret[2] = m;
					}
				}
			}
		}
		return ret;
	}

	private static int swap(int n, int i, int j) {
		int a = digitAt(n, i), b = digitAt(n, j);
		return (int) (n - (a-b)*Math.pow(10, i) - (b-a)*Math.pow(10, j));
	}

	private static int digitAt(int n, int j) {
		return (int) ((n/(Math.pow(10, j)))%10);
	}
}

/*******************************************************************************
* Author       : Aman Taneja
* email        : aman (dot) taneja (dot) 2008 (at) gmail (dot) com
* copyright    : 2014 - 2015
* date         : 12 - 1 - 2015
* 
* file name    : 2015_Qualifiers_A.cpp 
* version      : 1.0
******************************************************************************/

/*******************************************************************************
* some pointers on the logic/idea - 
*
* .............
*******************************************************************************/

#pragma once
#ifndef _QL_PRECOMPILATION_BARE_MINIMUM_HPP_
#define _QL_PRECOMPILATION_BARE_MINIMUM_HPP_

// Include file for std::cout, std::cin
#include<iostream>
#include <fstream>
#include <cstdlib>
// for getch()
#include<stdio.h>

// For clock time and time duration stats
#include <time.h>

#include <map>
#include <vector>
#include <string>
#include <cstring>

#include <set>
#include <algorithm>
#include <utility>
#include <list>
#include <queue>
#include <stack>
#include <limits.h>
#include <iomanip>
#include <math.h>
#include <cmath>
#include <assert.h>
#include <complex>
#include <valarray>

using namespace std;

namespace QoE_Library{

	namespace QL_Bare_Minimum{

		const double PI = 3.141592653589793238460;
		const long double E= 2.7182818284590452353;

		// check whether indices in range of an array/matrix
#define in_bounds(x, y, r, c) (x < r && y < c && x >= 0 && y >= 0)

		// get min of 3 values
#define min3(a,b,c)	(a<min(b,c))?a:min(b,c)


		// convert char into index
#define CHAR_TO_INDEX(c,startC) ((int)c - (int)startC)

		// Array size
#define SZ_ARR(A) sizeof(A)/sizeof(A[0])
		// STL MACROS -
#define SZ(C) C.size()

		//pair 
#define MKP(i,j) make_pair(i,j)
		// Map
#define M_Ins(m,i,j) m.insert(make_pair(i,j))

		// vector
#define PB(A,B) A.push_back(B);

		// STL sort()
#define SORT(A) sort( A.begin(),A.end() )


		// For loop
#define FOR(i, first, last, increment) for (int i = (first); i < (last); i = i + (increment))
#define QL_FOR FOR

#define DEBUGGING 1

		// Default For loop with variable name "i", first = 0, increment = 1
#define FOR_DEF(i, last) QL_FOR(i, 0, last, 1)
#define QL_FOR_DEF FOR_DEF


		// Dont care about the looping variable name
		// TODO : Need to solve the problem of generating a unique temp loop var, for now __i__ suffices
#define REPEAT(N) for (int __i__ = 0; __i__ < (N); ++__i__)



		// Reverse For loop
#define R_FOR(i, first, last, increment) for (int i = ((first) - 1); i >= (last); i = i - (increment))
#define QL_R_FOR R_FOR



		// Default For loop with variable name "i", first = 0, increment = 1
#define R_FOR_DEF(i, first) QL_R_FOR(i, first, 0, 1)
#define QL_R_FOR_DEF R_FOR_DEF


		// For loop for map
#define QL_M_FOR(m,it) for(map<int,int>::iterator it=m.begin();it!=m.end();++it)
#define QL_M_R_FOR(m,rit) for(map<int,int>::reverse_iterator rit=m.rbegin();rit!=m.rend();++rit)


		typedef unsigned long long int ulli_t;
		typedef ulli_t ULLI;
		typedef vector<ulli_t> uivector_t;
		typedef uivector_t::iterator uivector_it_t;
		typedef uivector_t::const_iterator uivector_cit_t;


		typedef long long int lli_t;
		typedef lli_t LLI;
		typedef vector<lli_t> ivector_t;
		typedef ivector_t::iterator ivector_it_t;
		typedef ivector_t::const_iterator ivector_cit_t;


		// pair
		typedef pair<int,int> p_ii_t;
		typedef p_ii_t P_II;
		typedef pair<LLI,LLI> p_llilli_t;
		typedef p_llilli_t P_LLILLI;

		// vector
		typedef vector<int> v_i_t;
		typedef v_i_t V_I;
		typedef vector<LLI> v_lli_t;
		typedef v_lli_t V_LLI;
		typedef vector<ULLI> v_ulli_t;
		typedef v_ulli_t V_ULLI;

		typedef vector<p_ii_t> v_p_ii_t;
		typedef v_p_ii_t V_P_II;

		typedef vector<v_i_t> vv_i_t;
		typedef vv_i_t VV_I;
		typedef vector<v_p_ii_t> vv_p_ii_t;
		typedef vv_p_ii_t VV_P_II;

		//map
		typedef map<int,int> M_II;
		typedef map<int,int>::iterator M_II_IT;

		//queue
		typedef queue<int> q_i_t;
		typedef q_i_t Q_I;

		typedef long double ld_t;
		typedef ld_t LD;


		/*	-------	BEWARE -	macros can't be overloaded i.e. both the 'read's below	
		can't have the same name	---------- */
#define read1(n) cin >> n;
#define read2(m, n) cin >> m >> n;
#define read3(m, n, o) cin >> m >> n >> o;
		// #define readArr(n, size) QL_FOR_DEF(i, size) { cin >> n[i]; } 
#define readArr1D(n, size)	QL_FOR_DEF(i, size)	\
		{					\
		cin >> n[i];	\
		} 

#define write1(n) cout << n;
#define write2(m, n) cout << m << n;
#define write3(m, n, o) cout << m << n << o;
#define writeArr1D(n, size)	QL_FOR_DEF(i, size)	\
		{					\
		cout << n[i];	\
		} 

#define DBG(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define DBG2(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define DBG3(x, y, z)       cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<" | "<<#z<<": "<<z<<endl;
#define DBG4(a, b, c, d)    cout<<__LINE__<<" :: "<<#a<< ": "<<a<<" | "<<#b<< ": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl;



		// const values
		const long double pi=10000*acos(-1.0L);

		inline void inpS(char *a){
			scanf("%s", a);
		}

		inline int inpLLI(LLI& lld){
			return scanf("%lld", &lld);
		}
		inline int inpULLI(ULLI& ulli){
			return scanf("%llu", &ulli);
		}

		// Fast reading Integer from stdin.
		inline int inpI(/*int &n*/) {
			int n = 0;
			int ch = getchar();
			// int ch = getchar_unlocked();
			int sign = 1;
			while(ch < '0' || ch > '9') {
				if (ch == '-') sign = -1; 
				ch = getchar();
				// ch = getchar_unlocked();
			}
			while(ch >= '0' && ch <= '9')
				n = (n<<3) + (n<<1) + ch - '0', ch = getchar();
			// n = (n<<3) + (n<<1) + ch - '0', ch = getchar_unlocked();
			n = n*sign;

			return n;
		}

		inline double inpD() {
			double res = 0.0;
			char c;
			while(1) {
				c = getchar();
				// c = getchar_unlocked();
				if(c == ' ' || c == '\n') continue;
				else break;
			}
			res = c - '0';
			while(1) {
				c = getchar();
				// c = getchar_unlocked();
				if(c >= '0' && c <= '9') res = 10 * res + c - '0';
				else break;
			}
			if(c == '.') {
				double decimal = 0.0, divi = 1.0;
				while(1) {
					c = getchar();
					// c = getchar_unlocked();
					if(c >= '0' && c <= '9') decimal += (c - '0') / (divi *= 10.0);
					else break;
				}
				res += decimal;
			}
			return res;
		}

		inline void outpD(double N) {
			char buff[24],sz=0;
			int integer = N;
			int decimal = (N - integer) * 10000000;
			int tmp = decimal;

			while(decimal) {
				buff[sz++] = '0' + decimal % 10;
				decimal /= 10;
			}
			for(int decimal2 = 1000000; decimal2 > tmp; decimal2 /= 10) {
				buff[sz++] = '0';
			}
			buff[sz++] = '.';
			if(integer == 0) buff[sz++] = '0';
			while(integer) {
				buff[sz++] = '0' + integer % 10;
				integer /= 10;
			}
			while(--sz>=0)
				putchar(buff[sz]);
			// putchar_unlocked(buff[sz]);
			putchar(10);
			// putchar_unlocked(10);
		}
		inline int outpULLI(ULLI u){
			return printf("%llu\n",u);
		}
		inline int outpLLI(LLI lli){
			return printf("%lld\n",lli);
		}
		inline void outpI(int a) {
			char c;
			char snum[20];
			int i=0;
			int sign = 0;
			if(a < 0) sign = 1;
			a = abs(a);
			do {
				snum[i++]=a%10+48;
				a=a/10;
			} while(a!=0);
			i=i-1;
			if(sign) 
				putchar('-');
			// putchar_unlocked('-');

			while(i>=0)
				putchar(snum[i--]);
			// putchar_unlocked(snum[i--]);
			putchar('\n');
			// putchar_unlocked('\n');
		}
		inline void outpI2(int a,int b){
			printf("%d ",a);
			outpI(b);
		}
		inline int outpS(char *s){
			return printf("%s\n",s);
		}
		/*  // Giving 'function defined twice' error while running Graph.cpp Code
		void reorderLLI(LLI &x, LLI& y){
		LLI xCopy, yCopy;
		if (x < y){
		y = xCopy;
		x = yCopy;
		}
		}

		void reorderI(int &x, int& y){
		int xCopy, yCopy;
		if (x < y){
		y = xCopy;
		x = yCopy;
		}
		}
		*/
		template<typename T1> void swap(T1 &x, T1 &y){
			x = x+y;
			y = x-y;
			x = x-y;
		}
		void swapChars(char *a,char *b){
			char tmp=*a;
			*a=*b;
			*b=tmp;
		}


		/*	Note - Lesson Learnt - return type should also be promoted while overloading the operator,
		otherwise buggy code.
		Also, if a & b have return type ULLI and LLI, we'll get ambiguity error. Both types 
		should be unsigned in order to make it unambiguous.
		As if int is promoted to ULLI, both would be promoted or both would not be.
		*/
		/*	NOTE - gcd{a,b} = gcd{|a|, b} = gcd{a,|b|} = gcd{|a|, |b|}
		And gcd(a,0) = a.
		*/
		template<typename T1> T1 gcd(T1 a, T1 b) {
			if (!b)
				return a;
			else 
				return gcd(b, a%b);
		}
	}
}
#endif  // _QL_PRECOMPILATION_BARE_MINIMUM_HPP_

#if 01
using namespace QoE_Library::QL_Bare_Minimum;

#define PRINT_TIME 0
#define GEN_TEST_CASES 0

/*	Test cases -
input-
36
0
1
2
3
4
10
11
12
13
14
15
20
21
30
31
99
100
123
897
12345
15234
31524
51423
54321
99998
99999
100000
9999998
9999999
10000000
99999998
99999999
100000000
999999998
999999999
1000000000

output-
Case #1: 0 0
Case #2: 1 1
Case #3: 2 2
Case #4: 3 3
Case #5: 4 4
Case #6: 10 10
Case #7: 11 11
Case #8: 12 21
Case #9: 13 31
Case #10: 14 41
Case #11: 15 51
Case #12: 20 20
Case #13: 12 21
Case #14: 30 30
Case #15: 13 31
Case #16: 99 99
Case #17: 100 100
Case #18: 123 321
Case #19: 798 987
Case #20: 12345 52341
Case #21: 12534 51234
Case #22: 13524 51324
Case #23: 15423 54123
Case #24: 14325 54321
Case #25: 89999 99998
Case #26: 99999 99999
Case #27: 100000 100000
Case #28: 8999999 9999998
Case #29: 9999999 9999999
Case #30: 10000000 10000000
Case #31: 89999999 99999998
Case #32: 99999999 99999999
Case #33: 100000000 100000000
Case #34: 899999999 999999998
Case #35: 999999999 999999999
Case #36: 1000000000 1000000000

*/
int main(){
#if PRINT_TIME
	clock_t t = clock();
#endif

#if 0
	FILE *fIn = freopen("D:\\DUMP\\input.in", "r", stdin);
	FILE *fOut = freopen("D:\\DUMP\\output.out", "w", stdout);
	assert(fIn&&fOut);
#endif
	int T = inpI();
	int tc=T;

	while (T--){
		char a[11],ac[11];
		inpS(a);
		strcpy(ac,a);
		char less='9'+1,more='0';
		int lessIdx=-1,lessReplacement=-1,moreIdx=-1,moreReplacement=-1,n=strlen(a),k=0;
		while(k<n-1){
			if(-1==moreIdx){
				more=a[k];
				QL_FOR(i,k+1,n,1){
					if(a[i]>more){
						more=a[i];
						moreIdx=k;
						moreReplacement=i;
					}
				}
			}
			if(-1==lessIdx){
				less=a[k];
				QL_FOR(i,k+1,n,1){
					if(a[i]<less && (a[i]-'0' || k) ){
						less=a[i];
						lessIdx=k;
						lessReplacement=i;
					}
				}
			}
			++k;
		}
		if(-1!=lessIdx)swapChars(&a[lessIdx],&a[lessReplacement]);
		if(-1!=moreIdx)swapChars(&ac[moreIdx],&ac[moreReplacement]);
		printf("Case #%d: %s %s\n",tc-T,a,ac);
	}
#if PRINT_TIME
	t = clock() - t;
	// printf("time = %Ld", (double)t/CLOCKS_PER_SEC);
	cout << "time = " << (double)t/CLOCKS_PER_SEC;
#endif
}
#endif
// Facebook Hacker Cup 2015

#include <string>
#include <vector>
#include <fstream>

using namespace std;

void
solvemin(vector<int> &minprt,int i)
{
    // base case
    if(i==minprt.size())return;
    if(minprt[i]==0)
    {
        solvemin(minprt,i+1);
        return;
    }
    // recursive case

    // find min swappable digit
    int mind=10,minx=-1;
    for(int j=i+1;j<minprt.size();j++)
    {
        int curd=minprt[j];
        if(curd<=mind&&curd!=0)
        {
            mind=curd;
            minx=j;
        }
    }
    // swap if possible
    if(mind<minprt[i]&&minx!=-1)
    {
        int temp=minprt[i];
        minprt[i]=mind;
        minprt[minx]=temp;
    } else solvemin(minprt,i+1);
}

void
solvemax(vector<int> &maxprt,int i)
{
    // base case
    if(i==maxprt.size())return;
    if(maxprt[i]==0)
    {
        solvemax(maxprt,i+1);
        return;
    }
    // recursive case

    // find min swappable digit
    int maxd=-1,maxx=-1;
    for(int j=i+1;j<maxprt.size();j++)
    {
        int curd=maxprt[j];
        if(curd>=maxd&&curd!=0)
        {
            maxd=curd;
            maxx=j;
        }
    }
    // swap if possible
    if(maxd>maxprt[i]&&maxx!=-1)
    {
        int temp=maxprt[i];
        maxprt[i]=maxd;
        maxprt[maxx]=temp;
    } else solvemax(maxprt,i+1);
}

int
main()
{
    ifstream cin;
    cin.open("ctb_in.txt");
    ofstream cout;
    cout.open("ctb_out.txt");
    // test cases
    int T;
    cin>>T;
    for(int t=1;t<=T;t++)
    {
        // store the input
        string s;
        cin>>s;
        cout<<"Case #"<<t<<": ";
        // base case
        if(s=="0")
        {
            cout<<"0 0"<<endl;
            continue;
        }
        // solve
        vector<int> minprt(s.size());
        vector<int> maxprt(s.size());
        for(int i=0;i<s.size();i++)
        {
            minprt[i]=s[i]-48;
            maxprt[i]=s[i]-48;
        }
        // a-min
        solvemin(minprt,0);
        for(int i=0;i<minprt.size();i++)
            cout<<minprt[i];
        cout<<" ";
        // b-max
        solvemax(maxprt,0);
        for(int i=0;i<maxprt.size();i++)
            cout<<maxprt[i];
        cout<<endl;
    }

    return 0;
}

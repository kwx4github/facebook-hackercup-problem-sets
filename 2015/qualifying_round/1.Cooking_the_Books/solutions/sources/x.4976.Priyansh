# include <iostream>
# include <vector>
# include <algorithm>
# include <cmath>
using namespace std;

vector<int> digit(long long n)
{

	vector<int> v;
	if(n == 0) {
		v.push_back(0);
	}
	while(n != 0){

		v.push_back(n%10);
		n = n/10;
	}

	reverse(v.begin(),v.end());
	return v;
}


long long make_number(vector<int> v)
{
	long long n = 0;
	for(int i = 0; i < v.size(); i++){
		n= n + (v[i] * pow(10,v.size()-i-1));
	}

	return n;
}

long long small(vector<int> v)
{
	if(v[0] == 0) return 0;
	int p = v.size();

	int min = v[0];
	int pos = 0;
	int cur = 0;
	


	while(true){
		if(cur == p) break;
		for(int i = cur+1; i < v.size(); i++){
			if(v[i] < min) {
				min = v[i];
				pos = i;
			}
		}

		if(cur == 0 && min == 0){
			min = v[0];
			pos = 0;
			for(int i = 1; i < v.size(); i++){
				if(v[i] < min && v[i] != 0){
					min = v[i];
					pos = i;
				} 
			}

			if(pos != cur && v[pos] != v[cur]){
				swap(v[pos],v[cur]);
				return make_number(v);
			} else {
				cur++;
				pos = cur;
				continue;
			}	
		}

		if(pos != cur && v[pos] != v[cur]){
			swap(v[pos],v[cur]);
			return make_number(v);
		} else {
			cur++;
			pos = cur;	
			min = v[cur];
		}
	}
	return make_number(v);
}

long long large(vector<int> v)
{
	if(v[0] == 0) return 0;
	int p = v.size();

	int max = v[0];
	int pos = 0;
	int cur = 0;
	


	while(true){
		if(cur == p) break;
		for(int i = cur+1; i < v.size(); i++){
			if(v[i] > max && v[i] != 0) {
				max = v[i];
				pos = i;
			}
		}

		if(pos != cur && v[pos] != v[cur]){
			swap(v[pos],v[cur]);
			return make_number(v);
		} else {
			cur++;
			pos = cur;	
			max = v[cur];
		}
	}
	return make_number(v);
}






int main()
{
	int t;
	cin >> t;

	for (int i = 0; i < t; i++){
		long long n;
		cin >> n;
		vector<int> v;
		v = digit(n);
		long long s =small(v);
		long long l = large(v);
		//long long l = 0;
		cout << "Case #"<<i+1<<": " << s <<" "<<l << endl;
	}

	return 0;
}
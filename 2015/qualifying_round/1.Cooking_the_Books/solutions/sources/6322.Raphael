//
// Facebook Hacker Cup
// Qualification Round
// Cooking the Books
//

#include <cassert>
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void testcase()
{
    int num;
    cin >> num;

    // convert number to array of digits
    int digits[9];
    int tmp = num;
    int num_digits = 0;

    do {
	++num_digits;
	tmp /= 10;
    } while (tmp != 0);
    assert(num_digits > 0 && num_digits <= 9);

    tmp = num;
    for (int idx = num_digits - 1; idx >= 0; --idx) {
	digits[idx] = tmp % 10;
	tmp /= 10;
    }

    vector<int> candidates;
    candidates.push_back(num);

    for (int i = 0; i < num_digits; i++) {
	for (int j = i + 1; j < num_digits; j++) {
	    // swap i and  j and construct number
	    int cand = 0;

	    // don't swap if first number would become 0
	    if (i == 0 && digits[j] == 0) {
		continue;
	    }
	    
	    for (int k = 0; k < num_digits; k++) {
		if (k == i) {
		    cand += digits[j];
		} else if (k == j) {
		    cand += digits[i];
		} else {
		    cand += digits[k];
		}
		if (k < num_digits - 1) {
		    cand *= 10;
		}
	    }
	    candidates.push_back(cand);
	}
    }
    auto smallest = min_element(candidates.begin(), candidates.end());
    auto largest = max_element(candidates.begin(), candidates.end());
    cout << *smallest << " " << *largest << endl;
}

int main()
{
    ios_base::sync_with_stdio(false);

    int cases;
    cin >> cases;

    for (int i = 1; i <= cases; i++) {
	cout << "Case #" << i << ": ";
	testcase();
    }
}

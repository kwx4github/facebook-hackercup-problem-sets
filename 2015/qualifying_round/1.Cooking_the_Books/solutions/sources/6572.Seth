#define CookingTheBooks
#ifdef CookingTheBooks
#include <iostream>
#include <string>
#include <cstdint>
#include <deque>
#include <algorithm>    // std::next_permutation, std::sort

using namespace std;

uint32_t digitsToNum(deque<uint8_t> digits)
{
   uint32_t result = *(digits.begin());
   for (deque<uint8_t>::iterator iter = digits.begin() + 1; iter != digits.end(); iter++)
   {
      result *= 10;
      result += *iter;
   }
   return result;
}

deque<uint8_t> getDigits(uint32_t num)
{
   deque<uint8_t> digits;
   uint32_t temp = num;
   while (temp > 0)
   {
      digits.push_front(temp % 10);
      temp /= 10;
   }
   return digits;
}

void findMinMax(uint32_t num)
{
   deque<uint8_t> digits = getDigits(num);
   deque<uint8_t> tempDigits;
   uint32_t min, max, temp;
   uint8_t tempDigit;
   min = max = num;
   
   for (size_t i = 0; i < digits.size(); i++)
   {
      for (size_t j = i+1; j < digits.size(); j++)
      {
         tempDigits = digits;
         tempDigit = tempDigits[i];
         tempDigits[i] = tempDigits[j];
         tempDigits[j] = tempDigit;
         if (tempDigits[0] == 0)
            continue;
         temp = digitsToNum(tempDigits);
         if (temp < min)
            min = temp;
         if (temp > max)
            max = temp;
      }
   }
   cout << min << " " << max << endl;
}



int main() {
   int T, currentT = 0;
   uint32_t currentValue;
   cin >> T;
   while (currentT++ < T) {
      cin >> currentValue;
      cout << "Case #" << currentT << ": ";
      findMinMax(currentValue);
   }
   return 0;
}
#endif
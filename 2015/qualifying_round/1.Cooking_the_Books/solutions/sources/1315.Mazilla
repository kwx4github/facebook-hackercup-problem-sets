#include <QFile>
#include <QDir>
#include <QtDebug>
#include <QCoreApplication>

QByteArray getMin(const QByteArray &zahl_)
{
    QByteArray zahl = zahl_;

    for(int i = 0; i + 1 < zahl.size(); i++)
    {
        int firstNumber = QChar(zahl.at(i)).digitValue();

        int swapNumber = 10;
        int platz = -1;

        for(int j = i + 1; j < zahl.size(); j++)
        {
            int secNumber = QChar(zahl.at(j)).digitValue();
            if(secNumber == 0 && i == 0)
                continue;

            if(secNumber <= swapNumber)
            {
                swapNumber = secNumber;
                platz = j;
            }
        }

        if(swapNumber < firstNumber)
        {
            char temp = zahl.at(i);
            zahl[i] = zahl.at(platz);
            zahl[platz] = temp;
            return zahl;
        }
    }

    return zahl;
}

QByteArray getMax(const QByteArray &zahl_)
{
    QByteArray zahl = zahl_;

    for(int i = 0; i + 1 < zahl.size(); i++)
    {
        int firstNumber = QChar(zahl.at(i)).digitValue();

        int swapNumber = -1;
        int platz = -1;

        for(int j = i + 1; j < zahl.size(); j++)
        {
            int secNumber = QChar(zahl.at(j)).digitValue();

            if(swapNumber <= secNumber)
            {
                swapNumber = secNumber;
                platz = j;
            }
        }

        if(firstNumber < swapNumber)
        {
            char temp = zahl.at(i);
            zahl[i] = zahl.at(platz);
            zahl[platz] = temp;
            return zahl;
        }
    }

    return zahl;
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    QFile file(QDir::homePath() + "/Documents/Hackercup/cooking_the_books.txt");
    file.open(QIODevice::ReadOnly);

    QFile outputFile(QDir::homePath() + "/Documents/Hackercup/output.txt");
    outputFile.open(QIODevice::WriteOnly);

    int test = file.readLine().simplified().toInt();

    for(int i = 1; i <= test; i++)
    {
        QByteArray fileLine = file.readLine().simplified();
        outputFile.write(QString("Case #%1: ").arg(i).toLatin1() + getMin(fileLine) + " " + getMax(fileLine) + "\n");
    }
    file.close();
    return 0;
}

#include<algorithm>
#include<bitset>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque>
#include<fstream>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<vector>

using namespace std;

typedef long long int lld;
typedef pair<int, int> PII;
typedef pair<int, lld> PIL;
typedef pair<lld, int> PLI;
typedef pair<lld, lld> PLL;

const int INF = (1LL << 31) - 1;
const lld LINF = (1LL << 62) - 1;
const int dx[] = {1, 0, -1, 0, 1, -1, 1, -1};
const int dy[] = {0, 1, 0, -1, 1, -1, -1, 1};
const int MOD = (int)(1e9) + 7;

const int NMAX = 100000 + 5;
const int MMAX = 100000 + 5;
const int KMAX = 100000 + 5;
const int PMAX = 100000 + 5;
const int LMAX = 100000 + 5;
const int VMAX = 100000 + 5;

int N;
vector<int> A, B, C, D;

void solve() {
    int i, j;

    scanf("%d", &N);

    A.resize(0);

    while(N) {
        A.push_back(N % 10);
        N /= 10;
    }

    if(A.empty())
        A.push_back(0);

    reverse(A.begin(), A.end());

    B = C = A;

    for(i = 0; i < A.size(); i++)
        for(j = i + 1; j < A.size(); j++) {
            if(i == 0 && A[j] == 0)
                continue;
            D = A;
            swap(D[i], D[j]);
            B = min(B, D);
            C = max(C, D);
        }

    for(auto x : B)
        printf("%d", x);

    printf(" ");

    for(auto x : C)
        printf("%d", x);

    printf("\n");
}

int main() {
    int number_of_tests, test_case;

    scanf("%d", &number_of_tests);

    for(test_case = 1; test_case <= number_of_tests; test_case++) {
        printf("Case #%d: ", test_case);

        solve();
    }

    return 0;
}

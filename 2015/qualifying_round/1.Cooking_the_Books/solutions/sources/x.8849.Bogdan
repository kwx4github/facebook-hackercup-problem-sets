#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int T;
int N;
int cache[2][100000];
int a[100000];

int optimal(int start, int player) {
    if (start >= N)
        return 0;
    int result = 0;
    if (cache[player][start] != -1)
        return cache[player][start];
    if (player == 0) {
        result = optimal(start + 1, 1) + a[start];
        if (start + 1 < N)
            result = max(result, optimal(start + 2, 1) + a[start] + a[start + 1]);
        if (start + 2 < N)
            result = max(result, optimal(start + 3, 1) + a[start] + a[start + 1] + a[start + 2]);
    } else {
        result = optimal(start + 1, 0);
        result = min(result, optimal(start + 2, 0));
        result = min(result, optimal(start + 3, 0));
    }
    cache[player][start] = result;
    return result;
}

int main() {
    cin >> T;
    for (int t = 0; t < T; t++) {
        cin >> N;
        for (int i = 0; i < N; i++) {
            cin >> a[i];
            cache[0][i] = cache[1][i] = -1;
        }
        int result = optimal(0, 0);
        cout << result << endl;
    }
    return 0;
}

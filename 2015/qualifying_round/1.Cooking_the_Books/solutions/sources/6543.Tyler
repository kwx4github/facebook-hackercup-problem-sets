/**
 * Tyler Lofgren
 * Facebook Hacker Cup 2015: Qualification Round
 * Problem 1: Cooking the Books
 * CookingBooksProblem.java
 */

package qualification_round;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Scanner;

public class CookingBooksProblem
{
	public static void swap2Digits(LinkedList<Integer> l, int index1, int index2)
	{
		int temp = l.get(index1);
		l.set(index1, l.get(index2));
		l.set(index2, temp);
	}
	
	public static int convertListToInt(LinkedList<Integer> l)
	{
		int result = 0;
		double exp = l.size()-1;		//exponent
		for (int i = 0; i < l.size(); i++)
		{
			result = (int) (result + ( l.get(i) * Math.pow(10.0, exp-i) ));
		}
		return result;
	}

	public static void main(String[] args) throws FileNotFoundException
	{
		Scanner sc = new Scanner(new FileReader("cooking_the_books.txt"));
		int t = sc.nextInt();		//first line
		int n;						//next number
		LinkedList<Integer> nList = new LinkedList<Integer>();	//digits of n
		PrintWriter writer = new PrintWriter("cooking_books_output_official.txt");
		
		int smPossible;		//smallest possible
		int lgPossible;		//largest possible
		
		for (int i = 0; i < t; i++)
		{
			smPossible = 0;
			lgPossible = 0;
			LinkedList<Integer> l2 = new LinkedList<Integer>();
			n = sc.nextInt();
			while (n > 0)
			{
				nList.addFirst(n % 10);
				n /= 10;
			}
			
			//make copy of original
			for (Integer el : nList)
			{
				l2.add(el);
			}
			
			smPossible = convertListToInt(nList);
			lgPossible = smPossible;
			int numDigits = Integer.toString(smPossible).length();	//number of digits in n
			int converted;
			
			for (int j = 0; j < l2.size(); j++)
			{
				for (int swapInd = 0; swapInd < l2.size(); swapInd++)
				{
					if (swapInd == j)
						continue;
					swap2Digits(l2, j, swapInd);
					converted = convertListToInt(l2);
					if (Integer.toString(converted).length() == numDigits)
					{
						if (converted < smPossible)
						{
							smPossible = converted;
						}
						if (converted > lgPossible)
						{
							lgPossible = converted;
						}
					}
					swap2Digits(l2, j, swapInd);
				}
			}
			
			writer.printf("Case #%d: %d %d", i+1, smPossible, lgPossible);
			if (i < t-1)
				writer.println();
			
			nList.clear();
		}
		sc.close();
		writer.close();
	}
}

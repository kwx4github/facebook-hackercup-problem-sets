import fileinput

def brute_force_solve(num):
    min_val = num
    max_val = num
    s = str(num)
    for i in range(len(s)):
        for j in range(i+1,len(s)):
            if s[j] == '0' and i == 0:
                continue
            new_s = s[:i]+ s[j] + s[i+1:j] + s[i] + s[j+1:]
            new_val = int(new_s)
            min_val = min(min_val, new_val)
            max_val = max(max_val, new_val)
    return (min_val,max_val)

def efficient_solve(num):
    s = str(num)
    s_digits = sorted(set(s))
    min_val = num
    max_val = num
    for i in range(len(s)):
        for target_index in range(len(s_digits)):
            if i == 0 and s_digits[target_index] == '0':
                continue
            if s[i] <= s_digits[target_index]:
                break
            # We now have a replacement winner, figure out where it came from
            j = s.rindex(s_digits[target_index])
            if j <= i:
                continue
            new_s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:] 
            new_val = int(new_s)
            min_val = min(min_val, new_val)
            break
        if min_val != num:
            break
    s_digits = list(reversed(s_digits))
    for i in range(len(s)):
        for target_index in range(len(s_digits)):
            if i == 0 and s_digits[target_index] == '0':
                continue
            if s[i] >= s_digits[target_index]:
                break
            # We now have a replacement winner, figure out where it came from
            j = s.rindex(s_digits[target_index])
            if j <= i:
                continue
            new_s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:] 
            new_val = int(new_s)
            max_val = max(max_val, new_val)
            break
        if max_val != num:
            break
    return (min_val,max_val)


def solve():
    it = fileinput.input()
    num_cases = it.next()
    for i,l in enumerate(it):
        (min_val,max_val) = efficient_solve(int(l))
        #(min_val_2,max_val_2) = brute_force_solve(int(l))
        #assert(min_val_2 == min_val)
        #assert(max_val_2 == max_val)
        print "Case #%d: %d, %d" %(i+1, min_val, max_val)

if __name__ == "__main__":
    solve()

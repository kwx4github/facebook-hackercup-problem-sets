using System;
using System.IO;

namespace CookingTheBooks
{
    internal class CookingTheBooks
    {
        //CookingTheBooks <path\to\input>
        private static void Main(string[] args)
        {
            var lines = File.ReadAllLines(args[0]);

            var numOfTestCases = int.Parse(lines[0]);

            for (var t = 1; t <= numOfTestCases; t++)
            {
                var testcase = lines[t];

                var smallestDigitIndexToSwap = 0;
                var smallestDigitIndex = 0;
                var largestDigitIndexToSwap = 0;
                var largestDigitIndex = 0;
                var getMinIndex = true;
                var getMaxIndex = true;

                for (var i = 0; i < testcase.Length - 1; i++) //stop one before the end, no point in searching a 1 char string
                {
                    var num = testcase.Substring(i);
                    var minDigit = num[0];
                    var maxDigit = num[0];

                    //if we're still looking, reset swap indexes to be equal
                    if (getMinIndex)
                        smallestDigitIndex = smallestDigitIndexToSwap = i;

                    if (getMaxIndex)
                        largestDigitIndex = largestDigitIndexToSwap = i;

                    for (var j = 1; j < num.Length; j++)
                    {
                        if (getMinIndex && num[j] <= minDigit && (num[j] != '0' || i > 0)) // check if char is less than or equal to (cause we want the farthest right min char) and ignore 0's on the first iteration
                        {
                            minDigit = num[j];
                            smallestDigitIndex = j + i;
                            smallestDigitIndexToSwap = i;
                        }

                        if (getMaxIndex && num[j] >= maxDigit)// check if char is greater than or equal to (cause we want the farthest right max char)
                        {
                            maxDigit = num[j];
                            largestDigitIndex = j + i;
                            largestDigitIndexToSwap = i;
                        }
                    }

                    //Check if we're good or still looking
                    getMinIndex = smallestDigitIndex == smallestDigitIndexToSwap;
                    getMaxIndex = largestDigitIndex == largestDigitIndexToSwap;

                    //if we're good, stop wasting iterations
                    if (!getMinIndex && !getMaxIndex)
                        break;
                }

                var smallest = SwapChar(testcase, smallestDigitIndex, smallestDigitIndexToSwap);
                var largest = SwapChar(testcase, largestDigitIndex, largestDigitIndexToSwap);

                Console.WriteLine("Case #{0}: {1} {2}", t, smallest, largest);
            }
        }

        /// <summary>
        /// Swaps two chars in a string
        /// </summary>
        /// <param name="num">string to swap chars in</param>
        /// <param name="swap1">index of char in string</param>
        /// <param name="swap2">index of char in string</param>
        /// <returns></returns>
        private static string SwapChar(string num, int swap1, int swap2)
        {
            //return if the same char (covers same location too)
            if (num[swap1] == num[swap2])
                return num;

            var numChars = num.ToCharArray();
            var temp = numChars[swap1];
            numChars[swap1] = numChars[swap2];
            numChars[swap2] = temp;

            return string.Join("", numChars);
        }
    }
}
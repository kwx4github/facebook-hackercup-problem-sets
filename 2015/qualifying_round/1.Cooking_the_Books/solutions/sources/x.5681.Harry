#include <iostream>
#include <math.h>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <sstream>
#include <bitset>
#include <fstream>
#include <iostream>

#define REP(i,n)  for(int i = 0; i<(n); i++)
#define REPR(i,n) for(int i = (n)-1; i>=0; i--)
#define ITER(i,v) for(auto i : (v))
#define INF 1000000000

using namespace std;

typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef vector<vii> vvii;

typedef long long ll;

int TC,N,t, size;
vi bitstr;


int main() {
	ifstream in;
	in.open( "Cin.txt" );
	in >> TC;
	t = 0;
	
	ofstream out;
	out.open( "Cout.txt" );
	while (TC--) {
		t++;
				
		in >> N;
		
		out << "Case #" << t << ": ";
		if(N == 0)
		{
			out << "0 0";
			if(TC != 0)
				out << "\n";
		}		
		else
		{
			size = floor(log10(N)) + 1;
			//out << size << "\n";
			bitstr.clear();
			bitstr.resize(size);
			REPR(i, size)
			{
				bitstr[i] = N % 10;
				N = N / 10;
			}
			
			//REP(i, 10)
			//	cout << bitstr[i];			
			//cout << "\n";
			
			int swap1 = -1, swap2 = -1;
			int low = bitstr[0];
			int lowpos = 0;
			for(int j = size - 1; j > 0; j--)
				if(bitstr[j] < low && bitstr[j] != 0)
				{
					low = bitstr[j];
					lowpos = j;
				}
			if(lowpos != 0)
			{
				swap1 = 0;
				swap2 = lowpos;				
			}
			else
			{
				for(int i = 1; i < size; i++)
				{
					low = bitstr[i];
					lowpos = i;
					for(int j = size - 1; j > i; j--)
						if(bitstr[j] < low)
						{
							low = bitstr[j];
							lowpos = j;
						}
					if(lowpos != i)
					{
						swap1 = i;
						swap2 = lowpos;
						break;
					}
				}
			}
			
			REP(i, size)
			{
				if(i == swap1)
					out << bitstr[swap2];
				else 
				{
					if(i == swap2)
						out << bitstr[swap1];
					else out << bitstr[i];
				}
			}
			
			out << " ";
			//Now high.
			
			swap1 = -1, swap2 = -1;
			int high = bitstr[0] + 1;
			int highpos = 0;
			for(int j = size - 1; j > 0; j--)
				if(bitstr[j] >= high)
				{
					high = bitstr[j];
					highpos = j;
				}
			if(highpos != 0)
			{
				swap1 = 0;
				swap2 = highpos;				
			}
			else
			{
				for(int i = 1; i < size; i++)
				{
					high = bitstr[i] + 1;
					highpos = i;
					for(int j = size - 1; j > i; j--)
						if(bitstr[j] >= high)
						{
							high = bitstr[j];
							highpos = j;
						}
					if(highpos != i)
					{
						swap1 = i;
						swap2 = highpos;
						break;
					}
				}
			}
			
			REP(i, size)
			{
				if(i == swap1)
					out << bitstr[swap2];
				else if(i == swap2)
					out << bitstr[swap1];
				else out << bitstr[i];
			}
			
			
			if(TC != 0)
				out << "\n";
		}
	}
	out.close();
	return 0;
}
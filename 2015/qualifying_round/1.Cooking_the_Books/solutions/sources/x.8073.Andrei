import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * Created by Andrei on 1/10/2015.
 */
public class CookingTheBooks {

    public static void main(String[] args) throws IOException {

        List<String> list = readFromFile();
        String output = "";
        int step = 1;
        boolean shouldSkip = true;
        for(String item : list){
            if(shouldSkip){
                shouldSkip=false;
                continue;
            }
            System.out.println(item);

            output += "Case #" + step + ": " + getMin(item) + " " +getMax(item) + "\n";
            step++;
        }

        output = output.substring(0, output.length()-1);

        System.out.println();
        System.out.println(output);
        saveToFile(output);

    }

    public static List<String> readFromFile() throws IOException {
        return FileUtils.readLines(new File("C:\\Users\\Andrei\\Desktop\\cooking_the_books.txt"));
    }

    public static void saveToFile(String s) throws IOException {
        FileUtils.writeStringToFile(new File("C:\\Users\\Andrei\\Desktop\\cooking_the_books_output.txt"), s);
    }

    public static String getMin(String number){

        boolean shouldChange = false;
        int position = 0;
        int position2 = 0;
        int min = Integer.MAX_VALUE;

        for(int j= 0 ; j<=number.length()-1 ; j++) {
            int first = Integer.parseInt(String.valueOf(number.charAt(j)));
            for (int i = j+1; i < number.length(); i++) {
                int now = Integer.parseInt(String.valueOf(number.charAt(i)));
                if ((now > 0 || j > 0) && now < min && now <first) {
                    shouldChange = true;
                    min = now;
                    position = i;
                    position2 = j;
                }
            }

            if (shouldChange) {
                char[] charArray = number.toCharArray();
                char temp = number.charAt(position);
                charArray[position] = number.charAt(position2);
                charArray[position2] = temp;
                number = String.valueOf(charArray);
                break;
            }
        }

        return number;
    }


    public static String getMax(String number){
        boolean shouldChange = false;
        int position = 0;
        int position2 = 0;
        int max = Integer.MIN_VALUE;

        for(int j= 0 ; j<=number.length()-1 ; j++) {
            int first = Integer.parseInt(String.valueOf(number.charAt(j)));
            for (int i = j+1; i < number.length(); i++) {
                int now = Integer.parseInt(String.valueOf(number.charAt(i)));
                if ((now > 0 || j > 0) && now > max && now > first) {
                    shouldChange = true;
                    max = now;
                    position = i;
                    position2 = j;
                }
            }

            if (shouldChange) {
                char[] charArray = number.toCharArray();
                char temp = number.charAt(position);
                charArray[position] = number.charAt(position2);
                charArray[position2] = temp;
                number = String.valueOf(charArray);
                break;
            }
        }

        return number;
    }

}

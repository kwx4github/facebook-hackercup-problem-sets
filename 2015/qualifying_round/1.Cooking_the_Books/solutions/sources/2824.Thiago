#include <fstream>
#include <string>
using namespace std;

string get_min(string);
string get_max(string);
bool try_swap_min(string*, int);
bool try_swap_max(string*, int);

int main() {
	ifstream ifile("input.txt");
	ofstream ofile("output.txt");

	int T; ifile >> T;
	for (int tc = 1; tc <= T; tc++)
	{
		string N; ifile >> N;
		ofile << "Case #" << tc << ": " << get_min(N) << " " << get_max(N) << endl;
	}
}

string get_min(string N) {
	if (N.length() == 1) return N;
	
	if (N[0] != '1')
		if (try_swap_min(&N, 0))
			return N;

	for (int p = 1; p < N.length(); p++)
		if (try_swap_min(&N, p))
			return N;

	return N;
}

string get_max(string N) {
	if (N.length() == 1) return N;

	if (N[0] != '9')
		if (try_swap_max(&N, 0))
			return N;

	for (int p = 1; p < N.length(); p++)
		if (try_swap_max(&N, p))
			return N;

	return N;
}

bool try_swap_min(string* N, int p) {
	int swap_pos = p;

	for (int i = p + 1; i < (*N).length(); i++) {
		int base = (*N)[swap_pos] - '0';
		int comp = (*N)[i] - '0';
		if (comp <= base) {
			if (p == 0 && comp == 0)
				continue;
			swap_pos = i;
		}
	}

	if ((*N)[p] == (*N)[swap_pos])
		return false;

	char tmp = (*N)[p];
	(*N)[p] = (*N)[swap_pos];
	(*N)[swap_pos] = tmp;
	return true;
}

bool try_swap_max(string* N, int p) {
	int swap_pos = p;

	for (int i = p + 1; i < (*N).length(); i++) {
		int base = (*N)[swap_pos] - '0';
		int comp = (*N)[i] - '0';
		if (comp >= base) {
			swap_pos = i;
		}
	}

	if ((*N)[p] == (*N)[swap_pos])
		return false;

	char tmp = (*N)[p];
	(*N)[p] = (*N)[swap_pos];
	(*N)[swap_pos] = tmp;
	return true;
}
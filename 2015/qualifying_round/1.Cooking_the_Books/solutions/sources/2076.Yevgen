#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#pragma comment(linker, "/STACK:256000000")
#include <iostream>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <ctime>
#include <cmath>
#include <stdio.h>
#include <cassert>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
#include <iomanip>
#include <fstream>

#define SZ(x) (int((x).size()))
#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i, a, b) for(int (i) = (a); (i) >= (b); --(i))
#define REP(i, n) for (int (i) = 0; (i) < (n); ++(i))
#define REPD(i, n) for (int (i) = (n); (i)--; )
#define FE(i, a) for (int (i) = 0; (i) < (int((a).size())); ++(i))
#define MEM(a, val) memset((a), val, sizeof(a))
#define INF 1000000000
#define LLINF 1000000000000000000LL
#define PB push_back
#define PPB pop_back
#define ALL(c) (c).begin(), (c).end()
#define SQR(a) ((a)*(a))
#define MP(a,b) make_pair((a), (b))
#define XX first
#define YY second

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef long double dbl;
typedef pair<int, int> pii;
typedef vector<int> vint;
typedef vector<LL> vLL;

string my_to_string(LL n) {
	string ans;
	while (n > 0) {
		ans += (n % 10) + '0';
		n /= 10;
	}
	reverse(ALL(ans));
	return ans;
}

LL my_to_integer(const string &s) {
	LL ans = 0;
	FE(i, s) {
		ans = ans * 10 + (s[i] - '0');
	}
	return ans;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif

	int T;
	cin >> T;
	REP(test, T) {
		LL n;
		cin >> n;
		string s = my_to_string(n);
		LL mn = n, mx = n;
		FE(i, s) {
			FE(j, s) {
				swap(s[i], s[j]);
				if (s[0] != '0') {
					LL cur = my_to_integer(s);
					mn = min(mn, cur);
					mx = max(mx, cur);
				}
				swap(s[i], s[j]);
			}
		}
		cout << "Case #" << test + 1 << ": " << mn << " " << mx << endl;
	}

	return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// facebook hacker cup 2015: problem 15
// copyright 2015 nikolaus grogger

#define MAX_LINE_LENGTH 10

void swapForSmallest(char *array);
void swapForLargest(char *array);
void swap(char *array, int pos1, int pos2);

int main(int argc, char const *argv[]) {
		
	// get handle to input file
	FILE *input_file;
	input_file = fopen("cooking_the_books.txt", "r");
	if (input_file == NULL) {
		printf("error reading input.\n");
		return -1;
	}
	// get handle to ouput file
	FILE *output_file;
	output_file = fopen("output.txt", "w");
	if (output_file == NULL) {
		printf("error opening output.\n");
		return -1;
	}

	char read[MAX_LINE_LENGTH];
	char work[MAX_LINE_LENGTH];

	int lineNumber = 0;
	int numberOfLines = 0;

	// read file line by line
	while (!feof(input_file)) {

		// one line is read into variable read
		int n = fscanf(input_file, "%s", read);
		// handle empty line at end of file
		if (n == EOF) break;

		if (lineNumber == 0) {
			numberOfLines = atoi(read);
		}
		else {
			// print start of line
			printf("Case #%d: ", lineNumber);
			fprintf(output_file, "Case #%d: ", lineNumber);
			
			// print smallest
			strcpy(work, read);
			swapForSmallest(work);
			printf("%s ", work);
			fprintf(output_file, "%s ", work);
			
			// print largest
			strcpy(work, read);
			swapForLargest(work);
			printf("%s\n", work);
			fprintf(output_file, "%s\n", work);
		}

		lineNumber++;
	}

	// check if correct number of lines were processed
	lineNumber--;
	if (numberOfLines != lineNumber) {
		printf("\nshould: %d, is: %d\n", numberOfLines, lineNumber);
	}

	// close files and return
	fclose(input_file);
	fclose(output_file);
	return 0;
}

// swaps element at pos1 with element at pos2 in array
void swap(char *array, int pos1, int pos2) {
	char tmp = array[pos1];
	array[pos1] = array[pos2];
	array[pos2] = tmp;
}


void swapForSmallest(char *array) {

	int len = strlen(array);
	int smallest = 0;
	int virtualStart = 0;

	while (1) {

		smallest = array[virtualStart];
		// find smallest number in array
		for (int i = virtualStart; i < len; i++) {
			if (array[i] < smallest) {
				// cant swap zero to start
				if (virtualStart == 0) {
					if (array[i] > '0') smallest = array[i];
				}
				else smallest = array[i];
			}
		}

		// is already sorted
		if (virtualStart == len) {
			break;
		}
	
		// check if smallest number is at beginning
		if (array[virtualStart] == smallest) {
			virtualStart++;
		}
		else break;
	}

	// actually do swapping
	for (int i = len - 1; i >= virtualStart; i--) {
		if (array[i] == smallest) {
			swap(array, i, virtualStart);
			break;
		}
	}

	return;
}


void swapForLargest(char *array) {
	int len = strlen(array);
	int largest = 0;
	int virtualStart = 0;

	while (1) {

		largest = array[virtualStart];
		// find largest number in array
		for (int i = virtualStart; i < len; i++) {
			if (array[i] > largest) largest = array[i];
		}

		// is already sorted
		if (virtualStart == len) {
			break;
		}
	
		// check if largest number is at beginning
		if (array[virtualStart] == largest) {
			virtualStart++;
		}
		else break;
	}

	// actually do swapping
	for (int i = len - 1; i >= virtualStart; i--) {
		if (array[i] == largest) {
			swap(array, i, virtualStart);
			break;
		}
	}

	return;

}

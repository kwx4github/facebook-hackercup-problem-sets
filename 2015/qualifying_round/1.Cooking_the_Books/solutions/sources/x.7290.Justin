#!/usr/bin/env ruby

def smallest_number (line, indexed_numbers)
	line = line.strip
	
	indexed = indexed_numbers.map{|e| e.to_i}.each_with_index.sort_by{|e| [e[1], e[0]]}

	number_to_replace_with = [-1, -1]
	number_to_replace = [-1, -1]
	min_number = []
	indexed.each do |int|
		index = int[1]

		
		next if int[0] == 1 && index == 0
		next if int[0] == 0
		sub = indexed[index, (indexed.length - index)]
		
		sub.each do |sub_int|
			next if sub_int[0] == 0 && number_to_replace[1] == 0
			if sub_int[0] < int[0]
				number_to_replace_with = sub_int
				number_to_replace = int
				if min_number.empty?
					min_number = sub_int
				else
					if sub_int[0] <= min_number[0] 
						if sub_int[1] > min_number[1]
							min_number = sub_int
						end
					end
				end
			end
		end
		break if number_to_replace_with[0] > -1
	end
	return line if number_to_replace[0] == -1

	indexed_numbers[number_to_replace[1]] = min_number[0]
	indexed_numbers[min_number[1]] = number_to_replace[0]
	return indexed_numbers.join.strip
	
end
def biggest_number(line, indexed_numbers)
		indexed = indexed_numbers
	
		sorted_with_index = indexed.each_with_index.sort_by{|e| [e[0], e[1]]}

		index_to_swap_with = -1

		
		most_optimal_number =  sorted_with_index.pop
		if(most_optimal_number[1] == 0)
			most_optimal_number = sorted_with_index.pop
		end


		swap_with = -1
		indexed.each_with_index do |i, index|
			break if most_optimal_number.nil?
			if(most_optimal_number[0] > i)
				index_to_swap_with = index
				swap_with = i
				break
			end
		end

		if swap_with > -1
			indexed[index_to_swap_with] = most_optimal_number[0]
			indexed[most_optimal_number[1]] = swap_with
		end
		return indexed.join
end

counter = 1
t = nil

while a = gets
  if t.nil? 
  	t = a.to_i
  	next
  end
  indexed_numbers = a.strip.scan(/./).map{|e|e.to_i}
  puts "Case ##{counter}: #{smallest_number(a.strip, indexed_numbers.dup)} #{biggest_number(a.strip, indexed_numbers.dup)}"
  counter = counter + 1
end
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cooking_the_Books
{
    class Program
    {
        static void Main(string[] args)
        {
            List<int> list = new List<int>();
            /*
             * i want to generate every possible permutation 
             * and get the higest and lowerst value
            */
            string[] lines = System.IO.File.ReadAllLines(@"C:\Users\SAi\Documents\FacebookHackerCup\2015\Qualifcation round\Cooking the Books\Cooking the Books\p1.txt");
            string[] ans = new string[lines.Length - 1];
            int n = Convert.ToInt32(lines[0]);
            for(int i = 1; i <= n;i++)
            {
                ans[i-1] = string.Format("Case #{0}: {1}", i, getLowAndHigh(lines[i]));
                Console.WriteLine(ans[i-1]);
                
            }
            System.IO.File.WriteAllLines(@"C:\Users\SAi\Documents\FacebookHackerCup\2015\Qualifcation round\Cooking the Books\Cooking the Books\p2out.txt", ans);
        }

        public static string getLowAndHigh(string p)
        {
            long low = long.MaxValue;
            long high = long.MinValue;
            HashSet<long> set = new HashSet<long>();
            set.Add(Convert.ToInt32(p));

            for (int i = 0; i < p.Length; i++)
            {
                for(int j = i+1; j< p.Length;j++)
                {

                    set.Add(Convert.ToInt32(swap(p, i, j)));
                }
            
            }

            foreach (long k in set)
            {
                if (k > high && k.ToString().Length == p.Length)
                {
                    high = k;
                }
                if (k < low && k.ToString().Length == p.Length)
                {
                    low = k;
                }
            }

           return string.Format("{0} {1}", low, high);
        }

        public static string swap(string p, int i, int j)
        {
            StringBuilder s = new StringBuilder(p);
            s[i] = p[j];
            s[j] = p[i];
            return s.ToString();
        }
    }
}

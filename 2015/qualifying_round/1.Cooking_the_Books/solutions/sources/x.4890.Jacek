using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Q_Cooking
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] lines = null;
            if (args == null || args.Length == 0)
            {
                lines = System.IO.File.ReadAllLines(@"example.txt");
            }
            else
            {
                if (args.Length > 0)
                {
                    if (System.IO.File.Exists(args[0]))
                    {
                        lines = System.IO.File.ReadAllLines(@args[0]);
                    }
                }
            }

            if (lines != null)
            {
                int i = 0;
                int t = 0;
                int n = 0;
                foreach (string line in lines)
                {
                    //Console.WriteLine(line);
                    if (i == 0)
                    {
                        t = int.Parse(line);
                        i++;
                    }
                    else if(t > 0)
                    {
                        n = int.Parse(line);
                        int min = 0;
                        int max = 0;
                        if (n < 12)
                        {
                            min = max = n;
                        }
                        else
                        {
                            min = Minimum(line.Trim());
                            max = Maximum(line.Trim());
                        }
                        Console.WriteLine(String.Format("Case #{0}: {1} {2}", i, min, max));
                        i++;
                        t--;
                    }
                }
            }
            Console.ReadLine();
        }

        protected static int Minimum(string value)
        {
            int index = 0;
            int firstIndex = 0, secondIndex = 0;
            for (int i = 0; i < value.Length; i++)
            {
                index = GetMinimum(value, i);
                if (index > 0)
                {
                    firstIndex = i;
                    secondIndex = index;
                    break;
                }
            }

            return PrepareValue(value, firstIndex, secondIndex);
        }

        protected static int GetMinimum(string value, int index)
        {
            int ind = -1;
            int min = value[index];
            for (int i = index + 1; i < value.Length; i++)
            {
                if (value[i] < min)
                {
                    if (index == 0 && value[i] == 0)
                    {
                        continue;
                    }

                    min = value[i];
                    ind = i;
                }
            }
            return ind;
        }

        protected static int Maximum(string value)
        {
            int index = 0;
            int firstIndex = 0, secondIndex = 0;
            for (int i = 0; i < value.Length; i++)
            {
                index = GetMaximum(value, i);
                if (index > 0)
                {
                    firstIndex = i;
                    secondIndex = index;
                    break;
                }
            }

            return PrepareValue(value, firstIndex, secondIndex);
        }

        protected static int GetMaximum(string value, int index)
        {
            int ind = -1;
            int max = value[index];
            for (int i = index + 1; i < value.Length; i++)
            {
                if (value[i] > max)
                {
                    if (index == 0 && value[i] == 0)
                    {
                        continue;
                    }

                    max = value[i];
                    ind = i;
                }
            }
            return ind;
        }

        protected static int PrepareValue(string value, int firstIndex, int secondIndex)
        {
            if (firstIndex != secondIndex)
            {
                string newValue = "";
                for (int i = 0; i < value.Length; i++)
                {
                    if (i == firstIndex)
                    {
                        newValue += value[secondIndex].ToString();
                    }
                    else if (i == secondIndex)
                    {
                        newValue += value[firstIndex].ToString();
                    }
                    else
                    {
                        newValue += value[i].ToString();
                    }
                }
                return int.Parse(newValue);
            }

            return int.Parse(value);
        }
    }
}

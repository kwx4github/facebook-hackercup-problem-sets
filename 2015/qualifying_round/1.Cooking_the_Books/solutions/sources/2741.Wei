#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int Convert(vector<int> &digits) {
    int ret = 0;
    for (int d : digits) {
        ret = 10 * ret + d;
    }
    return ret;
}

void PrintVector(const vector<int> &vec) {
    for (auto &v : vec) cout << v << " ";
    cout << endl;
}

void Cook(int N, int &minV, int &maxV) {
    minV = N, maxV = N;
    if (N < 10) return;

    vector<int> digits;
    for (int v = N; v > 0; v /= 10) {
        digits.push_back(v%10);
    }
    reverse(digits.begin(), digits.end());

    // find min
    int i = 0, fIdx = -1;
    for (i = 0; i < digits.size() - 1; ++i) {
        int minFind = 10;
        for (int j = digits.size() - 1; j > i; --j) {
            if (digits[j] < digits[i] && digits[j] < minFind) {
                if (i > 0 || digits[j] > 0) {
                    fIdx = j;
                    minFind = digits[j];
                }
            }
        }
        if (fIdx >= 0) break;
    }
    minV = N;
    if (fIdx > 0) {
        vector<int> tmp = digits;
        swap(tmp[i], tmp[fIdx]);
        minV = Convert(tmp);
    }
    
    // find max
    fIdx = -1;
    for (i = 0; i < digits.size() - 1; ++i) {
        int maxFind = 0;
        for (int j = digits.size() - 1; j > i; --j) {
            if (digits[j] > digits[i] && digits[j] > maxFind) {
                fIdx = j;
                maxFind = digits[j];
            }
        }
        if (fIdx > 0) break;
    }
    maxV = N;
    if (fIdx > 0) {
        vector<int> tmp = digits;
        swap(tmp[i], tmp[fIdx]);
        maxV = Convert(tmp);
    }
}

int main(int argc, char *argv[])
{
    int T = 0, N = 0;
    cin >> T;
    for (int idx = 0; idx < T; ++idx) {
        cin >> N; 
        int minV, maxV;
        Cook(N, minV, maxV);
        cout << "Case #" << idx + 1 << ": " << minV << " " << maxV << endl; 
    }

    return 0;
}

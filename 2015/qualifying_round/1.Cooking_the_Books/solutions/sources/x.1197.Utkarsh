#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

inline ll power(ll base, ll exponent) {
	return (exponent == 0)     ? 1 :
           (exponent % 2 == 0) ? power(base, exponent/2)*power(base, exponent/2) :
           base * power(base, (exponent-1)/2) * power(base, (exponent-1)/2);
}

void getMaxMinBySwap(ll N, ll& max, ll& min) {
	vi digits;
	vector< pii > digit_pos_pair;

	max = N;
	min = N;

	int pos = 0;
	while(N > 0) {
		int digit = N % 10;
		N /= 10;

		digits.pb(digit);
		digit_pos_pair.pb( mp(digit, pos) );

		pos++;
	}

	sort(all(digit_pos_pair));

	int i1 = pos - 1;
	ford(i2, pos - 1, 0) {
		int d = digit_pos_pair[i2].ff;
		int p = digit_pos_pair[i2].ss;

		if( digits[i1] == d ) {
			i1--;
		}
		else {
			// cout << d << " " << p << " " << digits[i1] << " " << i1 << endl;
			max = max - ( d * power(10,p)) - ( digits[i1] * power(10,i1) ) + ( d * power(10,i1)) + ( digits[i1] * power(10,p) );
			break;
		}
	}

	i1 = pos - 1;
	rep(i2, pos) {
		int d = digit_pos_pair[i2].ff;
		int p = digit_pos_pair[i2].ss;

		if( digits[i1] == d ) {
			i1--;
		}
		else if( d == 0 and  i1 == (pos - 1) )
			continue;
		else {
			// cout << d << " " << p << " " << digits[i1] << " " << i1 << endl;
			min = min - ( d * power(10,p)) - ( digits[i1] * power(10,i1) ) + ( d * power(10,i1)) + ( digits[i1] * power(10,p) );
			break;
		}
	}


}

int main() {
	int T;
	gi(T);

	fore(i, 1, T) {
		ll N;
		gl(N);

		ll max, min;
		getMaxMinBySwap(N, max, min);
		printf("Case #%d: %lld %lld\n", i, min, max);
	}

	return 0;
}
import java.io.*;
import java.util.Scanner;
public class BadAccountant {
	public static void main(String[] args) throws IOException {
		Scanner in = new Scanner(new File("cooking_the_books.txt"));
		int numAccounts = in.nextInt();
		in.nextLine();
		for(int i = 0; i < numAccounts; i++) {
			String input = in.nextLine();
			int[] digits = getDigits(input);
			int[] transforms = getDigitSwaps(digits);
			System.out.println("Case #" + (i+1) +": " + 
				transforms[0] + " " + transforms[1]);

		}
	}

	public static int[] getDigits(String num) {
		int[] digits = new int[num.length()];
		for(int i = 0; i < digits.length; i++) {
			digits[i] = num.charAt(i) - 48; //convert ascii char to digit
		}

		return digits;
	}

	public static int[] getDigitSwaps(int[] digits) {
		if(digits.length == 1) { 
			return new int[] {digits[0], digits[0]};
		}

		int counter = 0;
		boolean foundLarge = false;
		boolean foundSmall = false;
		int num = getIntFromArray(digits);
		int[] returns = new int[] {num, num};
		while(!(foundLarge && foundSmall) && counter < digits.length) {
			int pivotPosition = digits[counter];

			if(!foundLarge) {
				int maxPosition = findMaxPast(digits, counter);
				if(digits[maxPosition] > pivotPosition) {
					swap(digits, counter, maxPosition);
					returns[1] = getIntFromArray(digits);
					swap(digits, counter, maxPosition);
					foundLarge = true;
				}
			}

			if(!foundSmall) {
				int minPosition;
				if(counter == 0) {
					minPosition = findMinPast(digits, counter, 1);
				} else {
					minPosition = findMinPast(digits, counter, 0);
				}
				if(digits[minPosition] < pivotPosition) {
					
					swap(digits, counter, minPosition);
					returns[0] = getIntFromArray(digits);
					swap(digits, counter, minPosition);
					foundSmall = true;
				}
			}
			counter ++;
		}
		return returns;
	}

	public static void swap(int[] arr, int pos1, int pos2) {
		int temp = arr[pos1];
		arr[pos1] = arr[pos2];
		arr[pos2] = temp;
	}

	public static int getIntFromArray(int[] digits) {
		String number = "";
		for(int i = 0; i < digits.length; i++) {
			number += digits[i];
		}
		return Integer.parseInt(number);
	}

	public static int findMaxPast(int[] digits, int past) {
		int max = 0;
		int position = past;
		for(int i = past+1; i < digits.length; i++) {
			if(digits[i] >= max) {
				max = digits[i];
				position = i;
			}
		}
		return position;
	}

	public static int findMinPast(int[] digits, int past, int minValue) {
		int min = 10;
		int position = past;
		for(int i = past+1; i < digits.length; i++) {
			if(digits[i] <= min && digits[i] >= minValue) {
				min = digits[i];
				position = i;
			}
		}
		return position;
	}
}
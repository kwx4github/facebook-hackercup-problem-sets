#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <sstream>
#include <utility>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
#define all(c) (c).begin(), (c).end()
#define loop(i,a,b) for(ll i=a; i<ll(b); i++)
#define rep(i,b) loop(i,0,b)
#define each(e,c) for(auto&e:c)
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define lb lower_bound
#define ub upper_bound
#ifdef DEBUG
#define dump(...) (cerr<<#__VA_ARGS__<<" = "<<(DUMP(),__VA_ARGS__).str()<<" ["<<__LINE__<<"]"<<endl)
struct DUMP:ostringstream{template<class T>DUMP &operator,(const T&t){if(this->tellp())*this<<", ";*this<<t;return *this;}};
#else
#define dump(...)
#endif
template<class T> ostream& operator<<(ostream& os, vector<T> const& v){
    rep(i,v.size()) os << v[i] << (i+1==v.size()?"":" ");
    return os;
}

#ifdef LOCAL
string to_string(ll n){
    stringstream s;
    s << n;
    return s.str();
}
#endif

pair<ll,ll> solve(ll N){
    string s = to_string(N);
    vector<string> v{s};
    rep(i,s.size())rep(j,i){
        swap(s[i],s[j]);
        v.eb(s);
        swap(s[i],s[j]);
    }
    vector<ll> u;
    rep(i,v.size()){
        string & t = v[i];
        if(t.size()==1 || t[0]!='0'){
            u.eb(atoll(t.c_str()));
        }
    }
    sort(all(u));
    u.erase(unique(all(u)),u.end());
    return mp(u[0],u.back());
}

int main(){
    int T;
    cin >> T;
    rep(i,T){
        ll N; cin >> N;
        ll a,b;
        tie(a,b) = solve(N);
        printf("Case #%d: %lld %lld\n", (int)i+1, a, b);
    }
}

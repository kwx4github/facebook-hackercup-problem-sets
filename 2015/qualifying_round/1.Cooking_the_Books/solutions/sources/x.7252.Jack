import java.nio.charset.CharacterCodingException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Scanner;
import java.nio.*;
import java.nio.file.*;
import java.util.List;
import java.io.*;
/**
 * @author: main
 * @version: 09/01/15
 * insert comment here
 */
public class accountants
{

    public static List<String> openFile(String fileName)
    {
        Path myPath = Paths.get(fileName);
        try
        {
            List<String> lines = Files.readAllLines(myPath);
            return lines;
        }
        catch (IOException e)
        {
            System.out.println(e );
            e.printStackTrace();
        }
       return null;
    }

    public  static int getUserNumber(String stringRep)
    {

        try
        {
           return Integer.parseInt(stringRep);
        }
        catch (NumberFormatException error)
        {
            System.out.println(error);
            error.printStackTrace();
        }
        return 0;
    }

    public static   void swapArrayElements(char [] dataArray, int first, int second)
    {
        char temp = dataArray[first];
        dataArray[first] = dataArray[second];
        dataArray[second] = temp;
    }

    private static int getMaxedOutNumber(String number,boolean weNeedToGoBig)
    {
        int numRep = getUserNumber(number);
        if(numRep <= 10)
        {
            return numRep;
        }
        int closest = numRep;
        char [] dataArray = number.toCharArray();
        boolean isFirst = true;
        for (int index = 0; index < dataArray.length; index++)
        {
            for (int posToSwap = index+1; posToSwap < dataArray.length ; posToSwap++)
            {

                int num = Character.getNumericValue(dataArray[posToSwap]);
                if(num != 0)
                {
                    swapArrayElements(dataArray,index,posToSwap);
                    int newInt = getUserNumber(new String(dataArray));
                    closest = findClosestNumber(closest,newInt,weNeedToGoBig);
                    swapArrayElements(dataArray,index,posToSwap);
                }
            }
        }
       return closest;
    }

    public static int findClosestNumber(int oldNum, int newNum, boolean needBigger)
    {
        if(needBigger)
        {
            return  Math.max(oldNum,newNum);
        }
        else
        {
            return Math.min(oldNum,newNum);
        }
    }


    public static void runProgram(String fileName)
    {
       List<String> input = openFile(fileName);
      int numberOfJobs = getUserNumber(input.get(0));
        input.remove(0);
       int taskNumber = 1;
       for(String item : input)
       {
           int biggest =   getMaxedOutNumber(item,true);
           int smallest = getMaxedOutNumber(item, false);
           System.out.println("Case #" + taskNumber + " " + smallest + " " + biggest);
           taskNumber++;
       }
    }

    public static void main(String[] args)
    {
       runProgram("/Users/main/Documents/newtests/src/cooking_the_books.txt");
    }

}

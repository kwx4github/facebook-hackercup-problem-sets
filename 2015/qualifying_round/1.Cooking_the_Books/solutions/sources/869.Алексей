#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>

#define pb push_back
#define ll long long
#define pll pair<ll, ll>
#define mp make_pair
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define _MOD 1000000007LL
#define MOD(x) (((x) + 2LL * (_MOD)) % (_MOD))
#define INF (1e9)
#define LINF (1e16)
#define EPS (1e-8)
#define PI (3.1415926535897932384626433832795)
#define y1 asdf_1
#define y0 asdf_2
#define j0 jj0
typedef unsigned long long ull;
typedef long double ldd;

using namespace std;

int n;
int d[100];

int get_d()
{
	int res = 0, p = 1;
	bool was = false;
	for (int i = 0; i < n; i++)
	{
		res += p * d[i];
		p *= 10;
		was = (d[i] == 0);
	}
	if (was)
		res = -1;
	return res;
}

int minsolve()
{
	if (n == 1)
		return d[0];
	int res = get_d();
	for (int i = 0; i < n; i++)
	{
		for (int j = i + 1; j < n; j++)
		{
			swap(d[i], d[j]);
			int t = get_d();
			if (t != -1 && t < res)
				res = t;
			swap(d[i], d[j]);
		}
	}
	return res;
}

int maxsolve()
{
	if (n == 1)
		return d[0];
	int res = get_d();
	for (int i = 0; i < n; i++)
	{
		for (int j = i + 1; j < n; j++)
		{
			swap(d[i], d[j]);
			int t = get_d();
			if (t != -1 && t > res)
				res = t;
			swap(d[i], d[j]);
		}
	}
	return res;
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
	freopen ("input.txt","r",stdin);freopen ("output.txt","w",stdout);

	int tt;
	cin >> tt;
	string s;
	for (int ttt = 0; ttt < tt; ttt++)
	{
		cout << "Case #" << ttt + 1 << ": ";
		cin >> s;
		n = s.size();
		for (int i = n - 1; i >= 0; i--)
			d[n - i - 1] = s[i] - '0';
		cout << minsolve() << " " << maxsolve() << endl;
	}

	return 0;
}
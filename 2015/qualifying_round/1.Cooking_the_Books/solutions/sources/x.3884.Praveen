#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<iomanip>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<sstream>
#define sp(z) setprecision(z)
#define sv(z) sort(z.begin(),z.end())
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double 
#define si(z) scanf("%d",&z)
#define sl(z) scanf("%Ld",&z)
#define sd(z) scanf("%Lf",&z)
#define sc(z) scanf("%c",&z)
#define fr(y,q,s) for(int y=q;y<s;y++)
#define f(y,z) for(int y=0;y<z;y++)
#define fe(y,z) for(int y=1;y<=z;y++)
using namespace std;
ll min(ll a,ll b){ return (a<b)?a:b; }
ll max(ll a,ll b){ return (a>b)?a:b; }
ll gcd(ll a,ll b){ return (b==0)?a:gcd(b,a%b); }
ll modpow(ll a, ll n, ll mod){ ll res=1; while(n){ if(n&1)res=(res*a)%mod; a=(a*a)%mod; n>>=1; } return res; }
ll lpow(ll a, ll n){ ll res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
ld dpow(ld a, ll n){ ld res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
 
int main()
{
	int t;
	si(t);
	fe(tc,t)
	{
		printf("Case #%d: ",tc);
		ll n;
		sl(n);
		if(n==0)
		{
			printf("0 0\n");
			continue;
		}

		vector<int> digs;
	
		ll tmp = n;
		while(tmp)
		{
			digs.pb(tmp%10);
			tmp/=10;
		}

		if(digs.size()==1)
		{
			printf("%lld %lld\n",n,n);
			continue;
		}
	
		int mn = 10,mx=-1,mnid,mxid;
		f(i,digs.size())
		{
			if(digs[i]>mx) 
			{
				mx = digs[i];
				mxid = i;
			}
			if(digs[i]<mn && digs[i]!=0) 
			{
				mn = digs[i];
				mnid = i;
			}
		}

//		cout<<"extraction done"<<endl;
//		cout<<digs.size()<<" "<<mxid<<" "<<mnid<<endl;

		int temp = digs[digs.size()-1];
		digs[digs.size()-1]=digs[mxid];
		digs[mxid] = temp;

		ll maxim = 0;
		for(int i=digs.size()-1;i>=0;i--)
			maxim = maxim*10 + digs[i];

		temp = digs[digs.size()-1];
		digs[digs.size()-1]=digs[mxid];
		digs[mxid] = temp;

		temp = digs[digs.size()-1];
		digs[digs.size()-1]=digs[mnid];
		digs[mnid]=temp;

		ll minim=0;
		for(int i=digs.size()-1;i>=0;i--)
			minim = minim*10 + digs[i];

		printf("%lld %lld\n",minim,maxim);
	}
	return 0;
}

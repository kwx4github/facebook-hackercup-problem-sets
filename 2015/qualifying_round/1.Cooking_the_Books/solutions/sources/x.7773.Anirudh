import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Anirudh Rayabharam
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("in.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CookingTheBooks {
    void swap(char[] str, int i, int j) {
        char temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        char[] s = in.next().toCharArray();
        int n = s.length;
        char smallest, largest;
        int a = 0, b = 0;
        String ans1, ans2;
        ans1 = String.valueOf(s);
        ans2 = ans1;
        for (int i = 0; i < n; ++i) {
            a = i; smallest = s[i];
            for (int j = i + 1; j < n; ++j) {
                if (s[j] < smallest) {
                    if (i == 0 && s[j] == '0') continue;
                    smallest = s[j];
                    a = j;
                }
            }
            if (a != i) {
                char[] temp = new char[n];
                System.arraycopy(s, 0, temp, 0, n);
                swap(temp, i, a);
                ans1 = String.valueOf(temp);
                break;
            }
        }
        for (int i = 0; i < n; ++i) {
            b = i; largest = s[i];
            for (int j = i + 1; j < n; ++j) {
                if (s[j] > largest) {
                    largest = s[j];
                    b = j;
                }
            }
            if (b != i) {
                swap(s, i, b);
                ans2 = String.valueOf(s);
                break;
            }
        }
        out.printf("Case #%d: %s %s\n", testNumber, ans1, ans2);
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

}


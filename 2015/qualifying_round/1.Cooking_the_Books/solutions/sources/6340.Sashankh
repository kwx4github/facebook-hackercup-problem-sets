package fbHackerCup;
import java.io.*;
import java.util.*;

public class cookingBooks {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
	            StringBuilder sb = new StringBuilder();
	            String line = br.readLine();
	            int i = 0;
	            int num = Integer.parseInt(line);
	            boolean min_br = false, max_br = false;

	            while (i < num) {
	            String mins = null, maxs = null;
	            	line = br.readLine();
	            	if (line == null) {
	            		return;
	            	}
	            	char b[] = line.toCharArray();
	            	int len = b.length;
	            	int bnn1[] = new int[len];
	            	int bnn2[] = new int[len];
	            	int bnx[] = new int[len];
	            	int bns[] = new int[len];
	            	int temp = 0;
	            	boolean swap_done = false;
	            	for (int k = 0; k < len; k++) {
	            		bnn1[k] = Character.getNumericValue(b[k]);
	            		bnn2[k] = Character.getNumericValue(b[k]);
	            		bnx[k] = Character.getNumericValue(b[k]);
	            		bns[k] = Character.getNumericValue(b[k]);
	            	}
	            	for (int k = 0; k < len; k++) {
	            		if (bns[k] == bnn1[k] && min_br != true) {
	            			if (k == len) {
	            				mins = java.util.Arrays.toString(bnn1).replaceAll("[\\,\\[\\]\\ ]", "");
	            				break;
	            			}
	            		} else {
	            			min_br = true;
	            		}
	            		if (bns[len-k-1] == bnx[k] && max_br != true) {
	            			if (k == len) {
	            				maxs = java.util.Arrays.toString(bnx).replaceAll("[\\,\\[\\]\\ ]", "");
	            				break;
	            			}
	            		} else {
	            			max_br = true;
	            		}
	            	}
	            	if (mins != null && maxs != null ) {
	            		int a = i+1;
	            		System.out.println("Case #"+a+": "+mins+" "+ maxs);
	            		i++;
	            	} else {
	            		Arrays.sort(bns);
	            		//get minimum
	            		if (bns[0] == 0) {
	            			//find the first non-zero min
	            			int y = 0, z = 0;
	            			while (y < len && z < len) {
	            				swap_done = false;
	            				
	            				if (bns[y] == 0) {
	            					if (y < len-1) {
	            						y++;
	            					}
	            				}
	            				if (bnn1[z] == 0) {
	            					if (z < len-1) {
	            						z++;
	            					}
	            				}
	            				if (bns[y] != 0 && bnn1[z] != 0) {
	            					if (bns[y] < bnn1[z]) {
	            						//swap
	            						int swap = bns[y]; 
	            						for (int m = len-1; m > 0; m--) {
	            							if(swap == bnn1[m]) { 
	            								bnn1[m] = bnn1[z];
	            								bnn1[z] = swap;
	            								swap_done = true;
	            							}
	            						}
	            					} else if (bns[y] == bnn1[z]){
	            						if (y < len-1) {
	            							y++;
	            						}
	            						if (z < len-1) {
	            							z++;
	            						}

	            					} else {
	            						break;
	            					}
	            				}
	            				
	            				
	            				/*
	            				if (bns[y] == 0) {
	            					if ( y < len-1) {
	            						y++;
	            					}
	            				} else if (bnn1[z] != 0 && bnn1[z] > bns[y]) {
	            						int swap = bns[y];
	            						for (int m = len-1; m > 0; m--) {
	            							if (bnn1[m] == swap) {
	            								temp = bnn1[m];
	            								bnn1[m] = bnn1[z];
	            								bnn1[z] = temp;
	            								swap_done = true;
	            								break;
	            							}
	            						}
	            				}
	            					else {
	            					if (z < len - 1) {
	            						z++;
	            					}
	            				}
	            			*/
	            				if (z == len-1 || y == len-1 || swap_done == true) {
	            					break;
	            				}
	            			}
	            			z = 0; y = 0;

	            			while(y < len && z < len) {
	            				swap_done = false;
	            				if (bns[y] == 0) {
	            					if ( y < len-1) {
	            						y++;
	            					}
	            				} else if (z > 0 && bnn2[z] !=0 ) {
	            					if (z > 0 && bnn2[z]!=0) {
	            						//find the farthest zero
	            						for (int m = len-1; m > 0; m--) {
	            							if (bnn2[m] == 0) {
	            								if (m > z) {
	            								temp = bnn2[z];
	            								bnn2[z] = 0;
	            								bnn2[m] = temp;
	            								swap_done = true;
	            								break;
	            								} else {
	            									if ( z < len-1) {
	            										z++;
	            									}
	            									break;
	            								}
	            							}
	            						}
	            					} 
	            				}

	            					else {
	            					if (z < len - 1) {
	            						z++;
	            					}
	            				}
	            				if (z == len-1 || y == len-1 || swap_done == true) {
	            					break;
	            				}
	            				
	            			}
	            			for (int c = 0 ; c < len; c++) {
	            				if (bnn1[c] != bnn2[c]) {
	            					if (bnn1[c] < bnn2[c]) {
	            						if (mins == null) {
	            							mins = java.util.Arrays.toString(bnn1).replaceAll("[\\,\\[\\]\\ ]", "");
	            						}
	            						break;
	            					} else {
	            						if (mins == null) {
	            							mins = java.util.Arrays.toString(bnn2).replaceAll("[\\,\\[\\]\\ ]", "");
	            						}
	            						break;
	            					}
	            				} else {
	            					continue;
	            				}
	            			}
	            			
	            			
	            			/*
	            			if (len > 1 && bns[1] < bnn[0]) {
	            				int swap = bnn[1];
	            				//find the farther index of bns[1]
	            				for (int m = len-1; m > 0; m--) {
	            					if (swap == bnn[m]) {
	            						temp = bnn[m];
	            						bnn[m] = bnn[0];
	            						bnn[0] = temp;
	            					}
	            				}
	            			} else {
	            				//find the farthest zero and put it at first non-zero index starting from 2nd
	            				for (int m = 1; m < len ; m++) {
	            					if (bnn[m] != 0) {
	            						for (int n = len-1; n > m; n--) {
	            							if (bnn[n] == 0) {
	            								temp = bnn[m];
	            								bnn[m] = 0;
	            								bnn[n] = temp; 
	            							}
	            						}
	            					} else {
	            						continue;
	            					}
	            				}
	            			}
	            			*/

	            		} else {
	            			for (int k = 0; k < len; k++) {
	            				if (swap_done == true) {
	            					break;
	            				}
	            				if (bnn1[k] > bns[k]) {
	            					//get the farthest index of bns[k]
	            					int swap = bns[k];
	            					for (int m = len-1; m > 0; m--) {
	            						if (bnn1[m] == swap) {
	            							//swap with m
	            							if (k == 0 && bnx[m] == 0) {
	            								continue;
	            							}
	            							temp = bnn1[k];
	            							bnn1[k] = bnn1[m];
	            							bnn1[m] = temp;
	            							swap_done = true;
	            							break;
	            						}
	            					}
	            				}
	            			}
	            		}

	            		swap_done = false;
	            		//get maximum
	            		for (int k = 0; k < len; k++) {
	            			if (swap_done == true) {
	            				break;
	            			}
	            			if (bnx[k] < bns[len-k-1]) {
	            				//get the farthest index of bns[k]
	            				int swap = bns[len-k-1];
	            				for (int m = len-1; m > 0; m--) {
	            					if (bnx[m] == swap) {
	            						//swap with m
	            						if (k == 0 && bnx[m] == 0) {
	            							continue;
	            						} 
	            						temp = bnx[k];
	            						bnx[k] = bnx[m];
	            						bnx[m] = temp;
	            						swap_done = true;
	            						break;
	            					}
	            				}
	            			}
	            		}
	            		if (mins == null) {
	            			mins = java.util.Arrays.toString(bnn1).replaceAll("[\\,\\[\\]\\ ]", "");
	            		}
	            		if (maxs == null) {
	            			maxs = java.util.Arrays.toString(bnx).replaceAll("[\\,\\[\\]\\ ]", "");
	            		}
	            		int a = i+1;
	            		System.out.println("Case #"+a+": "+mins+" "+ maxs);
	            		i++;
	            	}
	            }
	        }
		 catch (IOException e) {
			 e.printStackTrace();
		 }
	}

}

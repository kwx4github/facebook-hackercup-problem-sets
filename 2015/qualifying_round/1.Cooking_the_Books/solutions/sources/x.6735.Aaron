using System;
using System.IO;
using System.Text.RegularExpressions;

namespace CookingTheBooks
{
    class MainClass
    {
        public static String[] inputStrings;
        public static string returnString;

        public static void Main(string[] args)
        {
            //get input file
            try
            {
                using (StreamReader sr = new StreamReader("C:\\Users\\Aaron\\documents\\visual studio 2013\\Projects\\ConsoleApplication1\\ConsoleApplication1\\cooking_the_books.txt"))
                {
                    string line = sr.ReadToEnd();
                    inputStrings = Regex.Split(line, "\n");
                }
                for (int i = 0; i < inputStrings.Length; i++)
                {
                    inputStrings[i] = CleanString(inputStrings[i]);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("The file could not be read:");
                Console.WriteLine(e.Message);
            }

            //for each number calculate lowest and highest

            for(int i = int.Parse(inputStrings[0]); i > 0; i--)
            {
                returnString = "Case #"+ i.ToString() + ": "+ GetLowAndHigh(inputStrings[i])+ "\n" + returnString;
            }

            Console.WriteLine(returnString);

            // Write the string to a file.
            System.IO.StreamWriter file = new System.IO.StreamWriter("C:\\Users\\Aaron\\documents\\visual studio 2013\\Projects\\ConsoleApplication1\\ConsoleApplication1\\cooking_the_books_RESULTS.txt");
            file.WriteLine(returnString);

            file.Close();
        }


        public static string GetLowAndHigh(string number)
        {
            Char currentHighest = number[number.Length-1];
            int highPos = number.Length - 1;

            Char currentLowest = number[number.Length-1];
            int lowPos = number.Length - 1;

            for (int i = number.Length-1; i >= 0; i--)
            {
                //Get highest number's position
                if ((int)Char.GetNumericValue(number[i]) > (int)Char.GetNumericValue(currentHighest))
                {
                    currentHighest = number[i];
                    highPos = i;
                }
                //Get lowest number's position
                else if ((int)Char.GetNumericValue(number[i]) < (int)Char.GetNumericValue(currentLowest))
                {
                    currentLowest = number[i];
                    lowPos = i;
                }
            }

            //Swap first char for highest
            Char[] highestNumber = number.ToCharArray();
            highestNumber[0] = currentHighest;
            highestNumber[highPos] = number[0];

            Char[] lowestNumber = number.ToCharArray();
            lowestNumber[0] = currentLowest;
            lowestNumber[lowPos] = number[0];

            return new string(lowestNumber) + " " + new string(highestNumber);
        }

        public static string CleanString(string input)
        {
            Regex digitsOnly = new Regex(@"[^\d]");
            return digitsOnly.Replace(input, "");
        }
    }
}


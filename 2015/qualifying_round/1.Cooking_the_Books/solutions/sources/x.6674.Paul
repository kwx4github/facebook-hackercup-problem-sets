import fileinput

def optimal_swap(digits, key):
	for (hpos, hdigit) in enumerate(digits):
		hkey = key(hdigit)
		digitpos = [(key(ldigit), hpos + diff + 1)  for (diff, ldigit) in enumerate(digits[hpos+1:]) if ldigit > 0]
		if digitpos:
			(lkey, lpos) = max(digitpos)
			if lkey > hkey:
				return digits[:hpos] + [digits[lpos]] + digits[hpos+1:lpos] + [digits[hpos]] + digits[lpos+1:]
	return digits


def solve_one(digits, key):
	m = optimal_swap(digits, key)
	return int("".join(map(str,m)))
	

def solve(s):
	digits = [int(digit) for digit in str(s)]
	m = solve_one(digits, lambda a:-a)
	M = solve_one(digits, lambda a:a)
	return m,M
	

lines = (line.strip() for line in fileinput.input())
lines.next()
for (i, line) in enumerate(lines):
	val = int(line)
	m, M = solve(val)
	print "Case #%s: %i %i" % (i+1, m, M)


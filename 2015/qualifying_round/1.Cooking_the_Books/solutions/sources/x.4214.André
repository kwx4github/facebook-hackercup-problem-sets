/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hc2015.qualification;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

/**
 *
 * @author Andr√©
 */
public class CookingBooks {

    public static void main(String[] args) throws FileNotFoundException, IOException {
        Scanner sc = new Scanner(new File("cooking_the_books.txt"));
        FileOutputStream fos = new FileOutputStream(new File("cooking_the_books_output.txt"));
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));
        int tests = Integer.parseInt(sc.nextLine());
        for (int i = 1; i <= tests; i++) {
            String data = sc.nextLine();
            int N = Integer.parseInt(data);
            out.write("Case #" + i + ": " + process(N) + "\n");
        }
        out.close();
        System.out.println("DONE!");
    }

    private static String process(int N) {
        int length = (int) (Math.log10(N) + 1);
        if (length > 1) {
            Integer[] digits = getDigits(N);
            ArrayList<Integer> numbers = new ArrayList<Integer>();
            numbers.add(N);
            for (int i = 0; i < digits.length; i++) {
                if (digits[i] > 0) {
                    numbers.addAll(allSwaps(i, digits));
                }
            }
            Integer max = Collections.max(numbers);
            Integer min = Collections.min(numbers);
            
            return min + " " + max;
        } else {
            return N + " " + N;
        }
    }

    public static Integer[] getDigits(int num) {
        List<Integer> digits = new ArrayList<Integer>();
        collectDigits(num, digits);
        return digits.toArray(new Integer[]{});
    }

    public static Integer getNumber(Integer[] digits) {
        StringBuilder sb = new StringBuilder();
        for (Integer n : digits) {
            sb.append(n);
        }
        return new Integer(sb.toString());
    }

    private static void collectDigits(int num, List<Integer> digits) {
        if (num / 10 > 0) {
            collectDigits(num / 10, digits);
        }
        digits.add(num % 10);
    }

    private static ArrayList<Integer> allSwaps(int start, Integer[] digits) {
        ArrayList<Integer> ret = new ArrayList<Integer>();
        for (int i = start + 1; i < digits.length; i++) {
            if (digits[i] > 0) {
                ret.add(getNumber(swap(start, i, digits)));
            }
        }
        return ret;
    }

    public static Integer[] swap(int a, int b, Integer[] array) {
        Integer[] newArray = new Integer[array.length];
        System.arraycopy(array, 0, newArray, 0, array.length);
        int t = newArray[a];
        newArray[a] = newArray[b];
        newArray[b] = t;
        return newArray;
    }
}

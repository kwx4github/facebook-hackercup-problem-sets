import scala.collection.GenIterable
import scala.io.{BufferedSource, Source}

object App1 {

  def parseArr(s: String) = {
    s.map(_.asDigit).toVector
  }

  def toInteger(ints: IndexedSeq[Int]) = {
    ints.mkString("").toInt
  }

  def optimize(unit: Vector[Int], function: (Int, Int) => Boolean)(skip: Integer = 0): Int = {
    if(skip >= unit.size)
      toInteger(unit)
    else {
      val el = unit.drop(skip).min(Ordering.fromLessThan(function))
      val idx = unit.drop(skip).indexOf(el)+skip
      if(idx == skip || el == unit(skip))
        optimize(unit, function)(skip + 1)
      else {
        val cur = unit(skip)
        toInteger(unit.updated(skip, el).updated(idx, cur))
      }
    }
  }

  def findMaxes(value: String) = {
    val arr = parseArr(value)
    (optimize(arr, (i, i1) => {i != 0 && i < i1})(0), optimize(arr, (i, i1) => {i1!= 0 && i > i1})(0))
  }

  def main(args: Array[String]) {
    val file: BufferedSource = Source.fromFile("task1.txt")
    val src = file.getLines().toList
    val number = Integer.parseInt(src.head)
    val tasks = (1 to number).zip(src.drop(1))
    println(tasks.par.map(x=>{(x._1, findMaxes(x._2))}).toList.sortBy(_._1).map(x=>{
      s"Case #${x._1}: ${x._2._1} ${x._2._2}"
    }).mkString("\n"))
  }
}

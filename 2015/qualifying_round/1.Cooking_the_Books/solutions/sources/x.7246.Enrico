/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cookingthebooks;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Enrico
 */
public class CookingTheBooks {

    static int T;
    static List<Integer> params;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        args = new String[6];
        args[0] = "5";
        args[1] = "999121";
        args[2] = "897";
        args[3] = "11320";
        args[4] = "10";
        args[5] = "5";
        
        Scanner in = null;
        
        try {
            in = new Scanner(new File("cooking_the_books.txt"));
        } catch (FileNotFoundException ex) {
             System.out.println(ex.getMessage() + "");
             return;
        }
        
        /*
        if(in.hasNextInt()) {
             System.out.println("\nWrong input");
        }*/
        
        params = new ArrayList<>();
        
        while(in.hasNextLine() && in.hasNextInt())
        {
            int temp = in.nextInt();
            params.add(temp);
        }
        
        if((params.isEmpty()) || (params.size() < params.get(0))) {
             System.out.println("Wrong input");
             return;
        }
        
        try {
            T = params.get(0);
        } catch (NumberFormatException e) {
             System.out.println("\nThe first parameter must be an integer");
             return;
        }
                
        PrintWriter out = null;
        
        try {
            out = new PrintWriter("cooking_the_books_example_output.txt");
        } catch (FileNotFoundException e) {
            
        }
         
        for (int i = 1 ; i <= T; i++) {
            int number = 0;
            try {
                number = params.get(i);
            } catch (NumberFormatException e) {
                System.out.println("\nThe "+i+"th parameter must be an integer");
                continue;
            }
            String result = "Case #" + i + ": " + generateMinMaxWithOneSwap(number);
            if( i < T)
                result += "\n";
            out.append(result);
        }
        out.flush();
        in.close();
        out.close();

    }

    private static String generateMinMaxWithOneSwap(int number) {
        int min = number, 
                max = number;
        
        String result = min + " " + max, 
                temp = number + "";
        
        char[] numberString = (number + "").toCharArray();
                 
        if(numberString.length == 1) {
            return result;
        }
            
        for(int i = 0 ; i < numberString.length; i++) {
            if( i > 0) {
                char c = numberString[i];
                if(i == 1 && c == '0') {
                    break;
                }
                if(i == T - 1) {
                    break;
                }
                for (int j = 0; j < numberString.length; j++) {
                    for (int k = 0; k < numberString.length - 1; k++) {
                        temp  = swapChars(temp, j, k);
                        int tempInt = Integer.valueOf(temp);
                        if((tempInt + "").length() != (number + "").length()) {
                            break;
                        }
                        if(tempInt < min) {
                            min = tempInt;
                        }
                        if(tempInt > max) {
                            max = tempInt;
                        }
                        result = min + " " + max;
                        temp = number + "";
                    }
                }
            }
        }
        return result;
    }
    
    private static String swapChars(String str, int lIdx, int rIdx) {
        StringBuilder sb = new StringBuilder(str);
        char l = sb.charAt(lIdx), r = sb.charAt(rIdx);
        sb.setCharAt(lIdx, r);
        sb.setCharAt(rIdx, l);
        return sb.toString();
    }
    
}

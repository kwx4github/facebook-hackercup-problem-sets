#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;


long long get_low(vector<int>& num){
	long long low = 0;

	int k, low_idx;
	int last = num.size() - 1;
	for(k = num.size() - 1; k > 0; k--){
		low_idx = k;
		for(int m = k - 1; m >= 0; m--){
			if(num[m] <= num[low_idx]) {
				if(num[m] == 0){
					if(k != last) low_idx = m;
				} else {
					low_idx = m;	
				}
			}
		}

		if(low_idx != k) break;
	}
	if(k == 0) k++;

	//swap.
	swap(num[low_idx], num[k]);

	int ten = 1;
	for(vector<int>::iterator it = num.begin(); it < num.end(); it++){
		low += ten*(*it);
		ten *= 10;	
	}

	//unswap.
	swap(num[low_idx], num[k]);

	return low;
}

long long get_high(vector<int>& num){
	long long high = 0;

	int k, high_idx;
	int last = num.size() - 1;
	for(k = num.size() - 1; k > 0; k--){
		high_idx = k;
		for(int m = k - 1; m >= 0; m--){
			if(num[m] >= num[high_idx]) high_idx = m;
		}

		if(high_idx != k) break;
	}
	if(k == 0) k++;

	//swap.
	swap(num[high_idx], num[k]);

	int ten = 1;
	for(vector<int>::iterator it = num.begin(); it < num.end(); it++){
		high += ten*(*it);
		ten *= 10;	
	}

	//unswap.
	swap(num[high_idx], num[k]);

	return high;
}


int main(){
	
	int T;
	long long n;
	vector<int> num;

	scanf("%d", &T);
	for(int i = 0; i < T; i++){
		scanf("%lld", &n);
		while(n > 0){
			num.push_back(n%10);
			n /= 10;
		}

		long long low = 0, high = 0;
		if(num.size() == 1){
			low = num[0];
			high = num[0];
		} else {

			//get lowest num.
			low  = 	get_low(num);
			high = 	get_high(num);
		}

		printf("Case #%d: %d %d\n", i+1, low, high);

		num.clear();
	}
	



	
}
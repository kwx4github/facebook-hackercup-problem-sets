
#include <vector>
#include <math.h>
#include <fstream>
#include <iostream>
#include <algorithm>

using namespace std;



int main()
{
	ifstream fin("cooking_the_books.txt");
	ofstream fout("cooking_the_books_output.txt");
	unsigned int n;
	int num;
	int min;
	int max;
	int minIndex;
	unsigned int maxIndex = 0;
	unsigned int currentIndex = 0;
	vector<int> minVec;
	vector<int> maxVec;
	int tempNum;
	vector<int> numVector;
	fin >> n;
	for (unsigned int i = 0; i < n; i++)
	{
		fin >> num;
		min = 10;
		max = -1;
		currentIndex = 0;
		if (num < 10)
		{
			fout << "Case #" << i + 1 << ": " << num << " " << num << endl;
		}
		else
		{
			while (num > 0)
			{
				tempNum = num % 10;
				numVector.push_back(tempNum);
				if (tempNum >= max)
				{
					max = tempNum;
					maxIndex = currentIndex;
				}
				if (tempNum <= min && tempNum != 0)
				{
					minIndex = currentIndex;
					min = tempNum;
				}
				num = num / 10;
				currentIndex += 1;
			}
			fout << "Case #" << i + 1 << ": "; 
			maxVec = numVector;
			minVec = numVector;
			int temp = numVector[numVector.size() - 1];
			maxVec[maxVec.size() - 1] = maxVec[maxIndex];
			maxVec[maxIndex] = temp;
			minVec[minVec.size() - 1] = minVec[minIndex];
			minVec[minIndex] = temp;

			for (unsigned int j = numVector.size(); j > 0; j--)
			{
				fout << minVec[j - 1];
			}
			fout << " "; 
			for (unsigned k = numVector.size(); k > 0; k--)
			{
				fout << maxVec[k - 1];
			}
			numVector.resize(0);
			fout << endl;
		}
	
	}
	getchar();
	getchar();
	return 0;
}

leftToTweak = parseint(readline(STDIN))

#it will always assume that dgt[1] is the element we want to swap
#order should be greater than 0 for GreaterThan and less than 0 for LesserThan
#if you input order = 0 then it will throw an error
#offset is used to offset the index
function swappable(dgt, order, offset)
  if order == 0 error("order cannot be 0") end
  if length(dgt) <= 1
    return -1
  end

  findFunction = order > 0 ? findmax : findmin
  (value, idx) = findFunction(dgt[2:end])
  if sign(cmp(value, dgt[1])) == sign(order)
    #the index returned by findFunction is skewed because we called it on a subarray
    idx + 1 + offset
  else
    -1
  end
end

#same thing here
function swap(dgt, canSwap)
  i = 1
  dgtRet = copy(dgt)
  while i <= length(dgt)
    idx = swappable(dgt[i:end], canSwap, i - 1)
    if idx > i
      if i == 1 && dgt[idx] == 0
        i += 1
        continue
      end
      (dgtRet[i], dgtRet[idx]) = (dgtRet[idx], dgtRet[i])
      break
    end
    i += 1
  end

  dgtRet
end

printdigits(dgt) = map(print, dgt)

for i in 1:leftToTweak
  N = parseint(readline(STDIN))

  dgt = reverse(digits(N))

  dec = swap(dgt, -1)
  inc = swap(dgt, 1)

  print("Case #", i, ": ")
  printdigits(dec)
  print(" ")
  printdigits(inc)
  if i == leftToTweak break end
  println()
end

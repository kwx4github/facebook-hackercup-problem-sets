#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>

using namespace std;

int solveL (int sent){
    int arr[9];
    int count = 0;
    int temp;
    int swap;
    int total= 0;
    for(int x=0; x<9; x++) arr[x]=0;
    while(sent > 0){
        arr[count] = sent%10;
        sent /= 10;
        count++;
    }
    count--;
    for(int z=0; z<1; z++){
        //set compare to head
        temp = count;
        //find lowest val
        for(int x=count; x>=0; x--){
            if((arr[x] < arr[temp]) && arr[x] != 0)
                temp = x;
        }
        //swap count with lowest found val
        swap = arr[count];
        arr[count] = arr[temp];
        arr[temp] = swap;
        //drop the head by one.
        count--;
        if(count == -1) count = 0;        
    }
    //recompile to an int again.
    for(int x=0; x<9; x++) total += (arr[x] * (pow(10, x)));
    return total;
}

int solveH (int sent){
    int arr[9];
    int count = 0;
    int temp;
    int swap;
    int total = 0;
    for(int x=0; x<9; x++) arr[x]=0;
    while(sent > 0){
        arr[count] = sent%10;
        sent /= 10;
        count++;
    }
    count--;
    for(int z=0; z<1; z++){
        //set compare to head
        temp = count;
        //find highest val
        for(int x=count; x>=0; x--){
            if((arr[x] > arr[temp]) && arr[x] != 0)
                temp = x;
        }
        //swap count with highest found val
        swap = arr[count];
        arr[count] = arr[temp];
        arr[temp] = swap;
        //drop the head by one.
        count--;
        if(count == -1) count = 0;        
    }
    //recompile to an int again.
    for(int x=0; x<9; x++) total += (arr[x] * (pow(10, x)));
    return total;
}

int main(){
    int T;
    cin >> T;
    int low, high, sent;
    for(int x = 0; x<T; x++){
        cin >> sent;
        low = solveL(sent);
        high = solveH(sent);
        cout << "Case #" << x+1 << ": " << low << " " << high << endl;
    }
        
    return 0;
}

#include "stdio.h"
#include "math.h"
#include "stdlib.h"
#include <stdio.h>

#define OUT
#define TRUE 1
#define FALSE 0

int calc_min_max_with_idx(int _num, OUT int* _min, OUT int* _max, OUT int* _min_idx, OUT int* _max_idx)
{
	int curr_max = -1;
	int curr_min = 9;
	int max_idx = 0;
	int min_idx = 0;
	int curr_idx = 0;
	int tmp = 0;
	int num = _num;
	
	if(!_min || !_max || !_max_idx || !_min_idx)
	{
		printf("bad args. _min (%p), _max(%p), _max_idx(%p), _min_idx(%p)\n", _min, _max, _max_idx, _min_idx);
		return FALSE;
	}
	
	while(num != 0)
	{
		tmp = num % 10;
		if(tmp > curr_max && tmp != 0)
		{
			curr_max = tmp;
			max_idx = curr_idx;
		}
		
		if(tmp < curr_min && tmp != 0)
		{
			curr_min = tmp;
			min_idx = curr_idx;
		}
		
		curr_idx += 1;
		num /= 10;
	}
	
	*_min = curr_min;
	*_max = curr_max;
	*_max_idx = max_idx;
	*_min_idx = min_idx;
	
	return TRUE;
}

int calc_last(int _num, OUT int* _last_idx, OUT int* _last_idx_val)
{
	int num = _num;
	int last_idx = 0;
	int last_idx_val = 0;
	
	if( !_last_idx || !_last_idx_val)
	{
		printf("bad args. _last_idx (%p), _last_idx_val(%p)\n", _last_idx, _last_idx_val);
		return FALSE;
	}
	
	while(num != 0)
	{
		last_idx++;
		last_idx_val = num % 10;
		num /= 10;
	}
	
	*_last_idx = last_idx -1;
	*_last_idx_val = last_idx_val;
	return TRUE;
}

int math_swap(int _num, int _idx1, int _idx1_val, int _idx2, int _idx2_val, OUT int* _swapped)
{
	int swapped = 0;
	int num = _num;
	int curr_idx = 0;
	
	if(_idx1 < 0 || _idx2 < 0 || !_swapped)
	{
		printf("bad args. _idx1 (%d), _idx2(%d), _swapped(%p)\n", _idx1, _idx2, _swapped);
		return FALSE;
	}
	
	while(num != 0)
	{
		if(curr_idx == _idx1)
			swapped += _idx2_val * (int) pow((double) 10.0,curr_idx);
		else if(curr_idx == _idx2)
			swapped += _idx1_val * (int) pow((double) 10.0,curr_idx);
		else
			swapped += (num % 10) * (int) pow((double) 10.0,curr_idx);
		
		curr_idx++;	
		num /= 10;
	}
	
	*_swapped = swapped;
	return TRUE;
}


void read_nums(OUT int** _nums_arr, int* _sz)
{
   FILE* fp;
   char* line = NULL;
   size_t len = 0;
   ssize_t read;
   int first = TRUE;
   int nums_size = 0;
   int idx = 0;

   fp = fopen("/root/Desktop/test", "r");
   if (fp == NULL)
	   exit(-1);

	while ((read = getline(&line, &len, fp)) != -1) 
	{
		if(first)
		{
			nums_size = atoi(line);
			*_sz = nums_size;
			*_nums_arr = malloc(sizeof(int) * nums_size);
			if(!*_nums_arr)
			{
				printf("failed to allocate nums_arr\n");
				return;
			}
			first = FALSE;
			if(line)
			{
				free(line);
				line = NULL;
			}
			continue;
		}
		
		(*_nums_arr)[idx] = atoi(line);
		idx++;
		
		if(line)
		{
			free(line);
			line = NULL;
		}
	}

   fclose(fp);
   if (line)
	   free(line);
   
   return;
}

int main()
{	
	int arr_size = 0;
	int* num_arr = NULL;
	int i;
	
	
	read_nums(&num_arr, &arr_size);
	for(i = 0; i < arr_size; i++)
	{
		int num = num_arr[i];
	
		int min = 0;
		int max = 0;
		
		int min_idx = 0;
		int max_idx = 0;
		
		int last_digit_val = 0;
		int last_digit_idx = 0;
		
		int swapped_min = 0;
		int swapped_max = 0;
		
		if (num ==  0)
		{
			printf("Case #%d: %d %d\n", i+1, 0, 0);
			continue;
		}
				
		if(!calc_min_max_with_idx(num, &min, &max, &min_idx, &max_idx))
		{
			printf("calc_min_max_with_idx() failed\n");
			return -1;
		}
		
		if(!calc_last(num, &last_digit_idx, &last_digit_val))
		{
			printf("calc_last() failed\n");
			return -1;
		}
		
		
		if(!math_swap(num, min_idx, min, last_digit_idx, last_digit_val, &swapped_min))
		{
			printf("math_swap() failed\n");
			return -1;
		}
		
		if(!math_swap(num, max_idx, max, last_digit_idx, last_digit_val, &swapped_max))
		{
			printf("math_swap() failed\n");
			return -1;
		}
		
		printf("Case #%d: %d %d\n", i+1, swapped_min, swapped_max);
	}
	
	
	
	
	
	
	return 0;

}



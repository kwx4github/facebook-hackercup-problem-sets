/**
 * Created by nitin.s on 09/01/15.
 */
import java.io.*;
import java.util.*;
public class FacebookHackerCupP1 {

    public static void main(String[] args) {
        InputStream inputStream;
        try {
            inputStream = new FileInputStream("/Users/nitin.s/IdeaProjects/helloworld/out/production/helloworld/cooking_the_books.txt");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        OutputStream outputStream;
        try {
            outputStream = new FileOutputStream("output.txt");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        FastScanner in = new FastScanner(inputStream);
        FastPrinter out = new FastPrinter(outputStream);
        FacebookHackerCupP1 solver = new FacebookHackerCupP1();
        int testCount = Integer.parseInt(in.next());
        for (int i = 1; i <= testCount; i++)
            solver.solve(i, in, out);
        out.close();
    }

    public void solve(int test, FastScanner in, FastPrinter out) {
        int n = in.nextInt();

        String s = Integer.toString(n);

        StringBuilder minAnswer = new StringBuilder(s);
        StringBuilder maxAnswer = new StringBuilder(s);


        for (int i = 0; i < s.length(); ++i) {
            for (int j = 0; j < s.length(); ++j) {
                if (i == j) continue;
                StringBuilder strBuilder = new StringBuilder(s);

                char ch = strBuilder.charAt(i);
                strBuilder.setCharAt(i, strBuilder.charAt(j));
                strBuilder.setCharAt(j, ch);
                if (strBuilder.charAt(0) == '0') continue;
                if (strBuilder.toString().compareTo(minAnswer.toString()) < 0) {
                    minAnswer = strBuilder;
                }
                if (strBuilder.toString().compareTo(maxAnswer.toString()) > 0) {
                    maxAnswer = strBuilder;
                }
            }
        }

        out.print("Case #" + test + ": ");
        out.print(minAnswer + " ");
        out.println(maxAnswer);
    }


}


class FastScanner extends BufferedReader {

    boolean isEOF;

    public FastScanner(InputStream is) {
        super(new InputStreamReader(is));
    }

    public int read() {
        try {
            int ret = super.read();
            if (isEOF && ret < 0) {
                throw new InputMismatchException();
            }
            isEOF = ret == -1;
            return ret;
        } catch (IOException e) {
            throw new InputMismatchException();
        }
    }

    public String next() {
        StringBuilder sb = new StringBuilder();
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        while (!isWhiteSpace(c)) {
            sb.appendCodePoint(c);
            c = read();
        }
        return sb.toString();
    }

    static boolean isWhiteSpace(int c) {
        return c >= -1 && c <= 32;
    }

    public int nextInt() {
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int ret = 0;
        while (!isWhiteSpace(c)) {
            if (c < '0' || c > '9') {
                throw new NumberFormatException("digit expected " + (char) c
                        + " found");
            }
            ret = ret * 10 + c - '0';
            c = read();
        }
        return ret * sgn;
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

}

class FastPrinter extends PrintWriter {

    public FastPrinter(OutputStream out) {
        super(out);
    }

    public FastPrinter(Writer out) {
        super(out);
    }


}


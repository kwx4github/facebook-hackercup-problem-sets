/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cooking.the.books;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class CookingProblem {

    public static void main(String[] args) {

        System.out.println("Insert input filepath:");
        Scanner scanner = new Scanner(System.in);        
        String inputFilepath = scanner.nextLine();
        
        Scanner in;
        try {
            in = new Scanner(new FileReader(inputFilepath));
            int nTestCases = Integer.parseInt(in.nextLine());
            System.out.println("Insert output filepath:");
            String outputFilepath = scanner.nextLine();
            PrintWriter writer = new PrintWriter(outputFilepath, "UTF-8");
            for (int i = 1; i <= nTestCases; i++)
            {                
                String number = in.nextLine();                
                String greatest = getGreatest(number);
                String lowest = getLowest(number);
                String line = "Case #" + i + ": " + lowest + " " + greatest;
                writer.println(line);
                System.out.println(line);
            }
            writer.close();
            
        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        } catch (UnsupportedEncodingException ex) {
            System.out.println("Unsupported Encoding");
        }                      
    }
    
    public static String getGreatest(String number)
    {        
        String greatest = number;
        int size = number.length();
        for (int k = 0; k < size; k++)
        {            
            int maxNumber = Integer.parseInt(number.substring(k,k+1));    
            int maxIndex = k;
            if (maxNumber != 0)
            {                
                for (int i = k+1; i < size; i++)
                {
                    int currentNumber = Integer.parseInt(number.substring(i, i+1));
                    if (currentNumber > maxNumber)
                    {                                
                        maxNumber = currentNumber;
                        maxIndex = i;                        
                    }
                }
                
                if (maxNumber != Integer.parseInt(number.substring(k, k + 1)))
                {
                    greatest = swapCharacters(greatest, k, maxIndex);
                    return greatest;
                }                                                    
            }
        }
        
        return greatest;
    }
    
    public static String getLowest(String number)
    {
        String lowest = number;
        int size = number.length();
        for (int k = 0; k < size; k++)
        {            
            int minNumber = Integer.parseInt(number.substring(k,k+1));    
            int minIndex = k;
            if (minNumber != 0)
            {                
                for (int i = k+1; i < size; i++)
                {
                    int currentNumber = Integer.parseInt(number.substring(i, i+1));
                    if (currentNumber < minNumber && currentNumber != 0)
                    {                                
                        minNumber = currentNumber;
                        minIndex = i;                        
                    }
                }
                
                if (minNumber != Integer.parseInt(number.substring(k, k + 1)))
                {
                    lowest = swapCharacters(lowest, k, minIndex);
                    return lowest;
                }                                                    
            }
        }
        
        return lowest;
        
    }
    
    public static String swapCharacters(String originalString, int i, int j)
    {
        char[] c = originalString.toCharArray();       
        char temp = c[i];
        c[i] = c[j];
        c[j] = temp;
        
        return String.valueOf(c);
    }        
}

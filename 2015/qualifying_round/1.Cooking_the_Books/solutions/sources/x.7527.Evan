import java.io.*;
import java.nio.Buffer;
import java.nio.file.Path;
import java.util.ArrayList;

/**
 * Created by Evan on 1/11/2015.
 */
public class HackerCupAccountant {
    public static void main(String[] args) {
        HackerCupAccountant hackerCup = new HackerCupAccountant();
        hackerCup.execute();
    }

    public HackerCupAccountant() {

    }

    public void execute() {
        String number;
        int counter = 1;
        try {
            BufferedReader reader = new BufferedReader(new FileReader("C:/input.txt"));
            PrintWriter writer = new PrintWriter(new FileWriter("C:/output.txt"));
            while((number = reader.readLine()) != null) {


                writer.print("Case #" + Integer.toString(counter) + " ");

                writer.print(findSmallest(number) + " ");

                writer.println(findLargest(number));
                counter++;
            }
            reader.close();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String findLargest(String number) {
        int largestNumber = Integer.parseInt(number);
        int first;
        int second;
        String newString;

        for(int i = 0; i < number.length(); i++) {
            first = Character.getNumericValue(number.charAt(i));
            for(int j = i + 1; j < number.length(); j++) {
                second = Character.getNumericValue(number.charAt(j));
                if(first < second && second != 0) {
                    newString = swap(number, i, j);
                    if(Integer.parseInt(newString) > largestNumber) {
                        largestNumber = Integer.parseInt(newString);
                    }
                }
            }
        }

        return Integer.toString(largestNumber);
    }

    private String findSmallest(String number) {
        int smallestNumber = Integer.parseInt(number);
        int first;
        int second;
        String newString;

        for(int i = 0; i < number.length(); i++) {
            first = Character.getNumericValue(number.charAt(i));
            for(int j = i + 1; j < number.length(); j++) {
                second = Character.getNumericValue(number.charAt(j));
                if(first > second && second != 0) {
                    newString = swap(number, i, j);
                    if(Integer.parseInt(newString) < smallestNumber) {
                        smallestNumber = Integer.parseInt(newString);
                    }
                }
            }
        }

        return Integer.toString(smallestNumber);
    }

    private String swap(String number, int indexOne, int indexTwo) {
        StringBuilder newNumber = new StringBuilder(number);
        newNumber.setCharAt(indexOne, number.charAt(indexTwo));
        newNumber.setCharAt(indexTwo, number.charAt(indexOne));
        return newNumber.toString();
    }


}

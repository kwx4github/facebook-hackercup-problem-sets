file_name = "problem1.txt"

def smallest(num):
    if num <= 10:
        return num
    num_lst = [int(digit) for digit in str(num)]
    for pos, digit in enumerate(num_lst):
        if pos + 1 < len(num_lst):
            if pos == 0:
                swap_pos, min_in_rest = min(list(enumerate(num_lst))[pos+1:], key=lambda tup: (tup[1] if tup[1] != 0 else 100, -tup[0]))
                if min_in_rest == 0:
                    continue
            else:
                swap_pos, min_in_rest = min(list(enumerate(num_lst))[pos+1:], key=lambda tup: (tup[1], -tup[0]))
            if digit > min_in_rest:
                num_lst[pos], num_lst[swap_pos] = num_lst[swap_pos], num_lst[pos]
                return int(''.join(str(digit) for digit in num_lst))
    return num

def biggest(num):
    if num <= 10:
        return num
    num_lst = [int(digit) for digit in str(num)]
    for pos, digit in enumerate(num_lst):
        if pos + 1 < len(num_lst):
            if pos == 0:
                swap_pos, min_in_rest = max(list(enumerate(num_lst))[pos+1:], key=lambda tup: (tup[1] if tup[1] != 0 else -100, tup[0]))
                if min_in_rest == 0:
                    continue
            else:
                swap_pos, min_in_rest = max(list(enumerate(num_lst))[pos+1:], key=lambda tup: (tup[1], tup[0]))
            if digit < min_in_rest:
                num_lst[pos], num_lst[swap_pos] = num_lst[swap_pos], num_lst[pos]
                return int(''.join(str(digit) for digit in num_lst))
    return num

with open(file_name, 'r') as f:
    num_of_cases = next(f)
    for case, num in enumerate(f):
        num = int(num)
        print "Case #{0}: {1} {2}".format(case + 1, smallest(num), biggest(num))




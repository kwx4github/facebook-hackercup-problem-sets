package zhang.kevin;

import java.io.File;
import java.io.IOException;
import java.util.List;

import com.google.common.base.Charsets;
import com.google.common.base.Throwables;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.io.Files;

public class CookingTheBooks {

    private static final String IN = "a.in";
    private static final String OUT = "a.out";

    public static void main(String[] args) throws IOException {
        List<String> inLines = readLines(IN);
        List<String> outLines = Lists.newArrayList();

        int caseNum = 0;
        for (String inLine : Iterables.skip(inLines, 1)) {
            int minIdx = findMinNonZeroCharIdx(inLine);
            int maxIdx = findMaxCharIdx(inLine);
            String minValue = swapWithFirst(inLine, minIdx);
            String maxValue = swapWithFirst(inLine, maxIdx);
            Long minLong = Long.parseLong(minValue);
            Long maxLong = Long.parseLong(maxValue);
            outLines.add("Case #" + (++caseNum) + ": " + minLong + " " + maxLong);
        }

        System.out.println(outLines);
        writeLines(outLines, OUT);
    }

    private static String swapWithFirst(String s, int idx) {
        char[] chars = s.toCharArray();
        char first = chars[0];
        chars[0] = chars[idx];
        chars[idx] = first;
        return new String(chars);
    }

    private static int findMinNonZeroCharIdx(String s) {
        char[] chars = s.toCharArray();
        int minIdx = 0;
        for (int i = 1; i < s.length(); i++) {
            if ((chars[i] < chars[minIdx]) && (chars[i] != '0')) {
                minIdx = i;
            }
        }
        return minIdx;
    }

    private static int findMaxCharIdx(String s) {
        char[] chars = s.toCharArray();
        int maxIdx = 0;
        for (int i = 1; i < s.length(); i++) {
            if (chars[i] > chars[maxIdx]) {
                maxIdx = i;
            }
        }
        return maxIdx;
    }

    private static List<String> readLines(String path) {
        try {
            return Files.readLines(new File(path), Charsets.UTF_8);
        } catch (IOException e) {
            throw Throwables.propagate(e);
        }
    }

    private static void writeLines(List<String> lines, String path) {
        try {
            StringBuilder fileContents = new StringBuilder();
            for (String line : lines) {
                fileContents.append(line + "\n");
            }
            Files.write(fileContents.toString(), new File(path), Charsets.UTF_8);
        } catch (IOException e) {
            throw Throwables.propagate(e);
        }
    }
}

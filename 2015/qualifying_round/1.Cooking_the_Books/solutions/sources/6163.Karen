import sys

inFile = sys.argv[1]


def run(x):
	f = open(x)
	g = open('output.txt','w')
	count = count_tracker(int(f.readline()))

	for lines in f:
		curr = count()
		if curr:
			g.write("Case #" + str(curr) + " " + final_solution(int(lines)) + '\n')
		elif curr == False:
			nextline = f.readline()
			if nextline == "":
				break
			else:
				count = count_tracker(int(nextline()[0]))
	
	if count() != False:
		g.write("fewer number than indicated.")

	g.close()
	return g


def count_tracker(first):
	init = 1
	def gen():
		nonlocal init
		if init <= first:
			ret =  init	
			init += 1
			return ret
		return False
			
	return gen


def final_solution(currint):
	if currint <= 10:
		return str(currint) + " " + str(currint)
	integerlst = inte_to_lst(currint)
	
	max_index = find_num(max(integerlst), integerlst, 0, max)
	min_index = find_num(min_no_zero(integerlst, 10), integerlst, 0, min)
	maximum = max([back_to_integer(switch(each[0], each[1], integerlst)) for each in max_index])
	minimum = min([back_to_integer(switch(each[0], each[1], integerlst)) for each in min_index])
	return str(minimum) + " " + str(maximum)


def find_num(num, lst, currindex, func):
	newlst = lst[1:]
	if len(lst) == 1 and lst[0] == num:
		return [(currindex, currindex)]
	if lst[0] == num:
		
		return find_num(func(newlst), newlst, currindex + 1, func)

	else:
		candidate_index = []
		new_index = currindex + 1
		while newlst != []:
			if newlst[0] == num:
				candidate_index.append((currindex, new_index))
			new_index += 1
			newlst = newlst[1:]
		return candidate_index


def min_no_zero(lst, mini):
	if lst == []:
		return mini
	if lst[0] < mini and lst[0] != 0:
		return min_no_zero(lst[1:], lst[0])
	return min_no_zero(lst[1:], mini)



def switch(index1, index2, lst):
	newlst = lst[:]
	newlst[index1], newlst[index2] = newlst[index2], newlst[index1]
	return newlst
		

def inte_to_lst(inte):
	if inte < 10:
		return [inte]
	return  inte_to_lst(inte//10) + [inte%10] 

def back_to_integer(lst):
	inte = 0
	while lst != []:
		inte = inte*10 + lst.pop(0)
	return inte








run(inFile)
#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <fstream>
using namespace std;

bool comp(const pair<int,int> &x,const pair<int,int> &y)
{
    if(x.first<y.first)
    {
        return true;
    }
    return false;
}

int main()
{
    int T,N,temp,x,pos;
    ofstream myFile;
    myFile.open("cooking_the_booksOut.txt");
    vector<int> actualNumL,actualNumH;vector<pair<int,int> > sortedNum;
    cin>>T;

    for(int iter=1;iter<=T;iter++)
    {
        actualNumL.clear();
        actualNumH.clear();
        sortedNum.clear();
        pos=0;
        cin>>N;
        temp=N;
        while(temp)
        {
            x=temp%10;
            actualNumL.push_back(x);
            actualNumH.push_back(x);
            sortedNum.push_back(std::make_pair(x,pos));
            temp/=10;
            pos++;
        }
        reverse(sortedNum.begin(),sortedNum.end());
        reverse(actualNumL.begin(),actualNumL.end());
        reverse(actualNumH.begin(),actualNumH.end());

        for(int i=pos;i>=0;i--)
        {
            sortedNum[i].second=i;
        }

        sort(sortedNum.begin(),sortedNum.end(),comp);

        myFile<<"Case #"<<iter<<": ";
        if(sortedNum[0].first != 0 && sortedNum[0].first < actualNumL[0])
        {
            temp=actualNumL[0];
            actualNumL[0]=sortedNum[0].first;
            actualNumL[sortedNum[0].second]=temp;
        }
        else
        {
            pos=1;
            while(1)
            {
                if(pos>=actualNumL.size())
                {
                    break;
                }

                if(sortedNum[pos].first < actualNumL[pos])
                {
                    temp=actualNumL[pos];
                    actualNumL[pos]=sortedNum[pos].first;
                    actualNumL[sortedNum[pos].second]=temp;
                    break;
                }

                pos++;
            }
        }

        for(int i=0;i<actualNumL.size();i++)
        {
            myFile<<actualNumL[i];
        }

        myFile<<" ";

        reverse(sortedNum.begin(),sortedNum.end());

        pos=0;
        while(1)
        {
            if(pos>=sortedNum.size())
            {
                break;
            }
            if(sortedNum[pos].first>actualNumH[pos])
            {
                temp=actualNumH[pos];
                actualNumH[pos]=sortedNum[pos].first;
                actualNumH[sortedNum[pos].second]=temp;
                break;
            }
            pos++;
        }

        for(int i=0;i<actualNumH.size();i++)
        {
            myFile<<actualNumH[i];
        }

        myFile<<endl;
    }
    return 0;
}

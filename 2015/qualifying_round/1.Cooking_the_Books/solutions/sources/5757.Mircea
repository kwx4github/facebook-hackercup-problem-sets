#!/usr/bin/env ruby
def fudge_me_not(number, fn, initial)
	return '' if number.length == 0
	digits = number.split('')
	dd = nil
	case fn
	when "max"
		dd = digits.max
	when "min"
		if initial 
			dd = digits.reject{|x| x.eql?("0")}.min
		else
			dd = digits.min
		end
	end
	return "#{digits.join('')}" unless dd
	if (digits[0].eql?(dd))
		return "#{dd}#{fudge_me_not(digits.slice(1..-1).join(''),fn, false)}"
	else
		swap_pos = digits.size - 1 - digits.reverse.index(dd)
		digits[0], digits[swap_pos] = digits[swap_pos], digits[0]
		return "#{digits.join('')}"
	end
end

first = nil
caseno = 1
ARGF.each do |line|
	unless first
		first = true
		next
	end	
	puts "Case ##{caseno}: #{fudge_me_not(line.chomp, "min", true)} #{fudge_me_not(line.chomp, "max", true)}"
	caseno += 1
end
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
#include <cstring>
#include <climits>

#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     (A).begin(), (A).end()
#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define DEBUG 1

using namespace std;


int main()
{
	int tc,count=0;
	cin>>tc;
	while(tc--)
	{
		count++;
		int n;
		cin>>n;
		int orig_num=n;
		int digits[12]={0};
		int num_digits=0;

		do
		{
			digits[num_digits++]=n%10;
			n/=10;
		}
		while(n!=0);
		

		int min_val=INT_MAX,min_index=0,max_val=INT_MIN,max_index=0;
		
		//min
		int found=0,i,j;
		for( i=num_digits-1;i>0;i--)
		{
			for( j=0;j<i;j++)
			{
				if( (i!=num_digits-1||digits[j]!=0) && digits[j]<min_val)
				{
					min_val=digits[j];
					min_index=j;
				}
				
			}
			if(min_val<digits[i]&&(i!=num_digits-1||min_val!=0))
			{
				found=1;
				break;
			}
			min_val=INT_MAX,min_index=0;
		}

		if(found==1)
		{
			//swap both digits
			int temp=digits[i];
			digits[i]=min_val;
			digits[min_index]=temp;

			min_val=0;

			for(j=num_digits-1;j>=0;j--)
			{
				min_val=min_val*10 + digits[j];
			}

			//swap again
			temp=digits[i];
			digits[i]=digits[min_index];
			digits[min_index]=temp;

		}
		else
		{
			min_val=orig_num;
		}
		//max
		 found=0;
		for( i=num_digits-1;i>0;i--)
		{
			for( j=0;j<i;j++)
			{
				if( digits[j]>max_val)
				{
					max_val=digits[j];
					max_index=j;
				}
				
			}
			if(max_val>digits[i])
			{
//				cout<<digits[i]<<" at "<<i<<" with "<<max_val<<" at "<<max_index<<endl;
				found=1;
				break;
			}
			max_val=INT_MIN,max_index=0;
		}

		if(found==1)
		{
			//swap both digits
			int temp=digits[i];
			digits[i]=max_val;
			digits[max_index]=temp;

			max_val=0;

			for(j=num_digits-1;j>=0;j--)
			{
				max_val=max_val*10 + digits[j];
			}

			//swap again
			temp=digits[i];
			digits[i]=digits[max_index];
			digits[max_index]=temp;

		}
		else
		{
			max_val=orig_num;
		}
		cout<<"Case #"<<count<<": "<<min_val<<" "<<max_val<<endl;
		
	}
	return 0;
}

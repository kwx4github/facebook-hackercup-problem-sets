#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void swap(char *a, char *b)
{
    char t = *a;
    *a = *b;
    *b = t;
}
int findMinDigit(unsigned long in, int *index) 
{
    int min = 999999999;
    int r = 0;
    int count = *index;

    while(in) {

	r = in % 10;
	if(r <= min) {
	    min = r;
	    *index = count;
	}
	count ++;
	in = in / 10;
    }

    return min;
}

int findMaxDigit(unsigned long in, int *index) 
{
    int max = 0;
    int r = 0;
    int count = *index;

    while(in) {

	r = in % 10;
	if(r >= max) {
	    max = r;
	    *index = count;
	}
	count ++;
	in = in / 10;
    }

    return max;
}

int main(int argc, char *argv[])
{
    FILE *fp_in = NULL;
    FILE *fp_out = NULL;

    char inBuff[11];
    char outBuff[11];

    int T = 0;
    unsigned long N = 0UL;

    fp_in = fopen(argv[1], "r+");

    if(fp_in == NULL) {
	printf("Failed to open input file: %s", argv[1]);
	exit (1);
    }

    fp_out = fopen("output.txt", "w+");
    if(fp_out == NULL) {
	printf("Failed to open output file: output.txt");
	exit (1);
    }

    if(fgets(inBuff, 11, fp_in) != NULL) {
	T = atol(inBuff);
    }

    int count = 0;
    int pos = 1;
    int max = 0;
    int min = 0;

    while(count < T) {
	pos = 1;

	if(fgets(inBuff, 11, fp_in) != NULL) {

	    strcpy(outBuff, inBuff);

	    N = atol(inBuff);
	    min = findMinDigit(N, &pos);
	    if(min) {
	    	  swap(&outBuff[(strlen(outBuff)-1) - pos], &outBuff[0]);
	    }
	    else {
	    	  swap(&outBuff[(strlen(outBuff)-1) - pos], &outBuff[1]);
	    }
	    outBuff[(strlen(outBuff))-1] = '\0';
	    fprintf(fp_out, "case #%d: %s ", count+1, outBuff);

	    strcpy(outBuff, inBuff);
	    pos = 1;
	    
	    max = findMaxDigit(N, &pos);
	    swap(&outBuff[(strlen(outBuff)-1) - pos], &outBuff[0]);
	    
	    
	    fprintf(fp_out, "%s", outBuff);
	}
	count ++;
    }

    fclose(fp_in);
    fclose(fp_out);
    return 0;
}

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;

public class ProblemOne {
	public final static BigInteger MAX_VAL=new BigInteger("999999999");
	
	public static int findIndex(char numArray[], int num) {
		int index = 0;

		for (int i = 0; i < numArray.length; i++) {
			if (num == numArray[i]) {
				index = i;
			}
		}
		return index;
	}
	
	public static Index findIndexToReplaceBig(char numArray[],char[] numsortedArrayDesc) {
	Index index=new Index();	
		 a:
		for(int ii=(numsortedArrayDesc.length-1);ii>=0;ii--){
		for (int i = 0; i < numArray.length; i++) {
			if (numsortedArrayDesc[ii] != numArray[i] && numsortedArrayDesc[ii]>numArray[i] && findIndex(numArray,numsortedArrayDesc[ii])>i) {
				int fromIndex=findIndex(numArray,numsortedArrayDesc[ii]);
				index.setFromIndex(fromIndex);
				index.setToIndex(i);
				break a;
			}
		}
		}

		return index;
	}
	
	
	public static Index findIndexToReplaceSmall(char numArray[],char[] numsortedArrayDesc) {
		Index index=new Index();	
			 a:
			for(int ii=0;ii<numsortedArrayDesc.length;ii++){
			for (int i = 0; i < numArray.length; i++) {
				if (numsortedArrayDesc[ii] != numArray[i] && numsortedArrayDesc[ii]<numArray[i] && '0'!=numsortedArrayDesc[ii] && findIndex(numArray,numsortedArrayDesc[ii])>i) {
					int fromIndex=findIndex(numArray,numsortedArrayDesc[ii]);
					index.setFromIndex(fromIndex);
					index.setToIndex(i);
					break a;
				}
			}
			}

			return index;
		}

	public static BigInteger generateBigNumber(String number) {
		BigInteger genNumber = null;
		if(validNumber(number)){
		char numArrayInit[] = number.toCharArray();
		char numSortArray[] = number.toCharArray();
		
		Arrays.sort(numSortArray);
		
		Index index=findIndexToReplaceBig(numArrayInit, numSortArray);
			
		char temp = numArrayInit[index.fromIndex];
		numArrayInit[index.fromIndex] = numArrayInit[index.toIndex];
		numArrayInit[index.toIndex] = temp;

		
		StringBuffer returnVal=new StringBuffer();	
		returnVal=returnVal.append(numArrayInit);	
		genNumber=new BigInteger(returnVal.toString());
		}
		return genNumber;
	}

	public static BigInteger generateSmallNumber(String number) {
		BigInteger genNumber = null;
		if(validNumber(number)){
		char numArrayInit[] = number.toCharArray();
		char numSortArray[] = number.toCharArray();
		
		Arrays.sort(numSortArray);
		
		Index index=findIndexToReplaceSmall(numArrayInit, numSortArray);
			
		char temp = numArrayInit[index.fromIndex];
		numArrayInit[index.fromIndex] = numArrayInit[index.toIndex];
		numArrayInit[index.toIndex] = temp;	
		StringBuffer returnVal=new StringBuffer();	
		returnVal=returnVal.append(numArrayInit);	
		genNumber=new BigInteger(returnVal.toString());
		}
		
		return genNumber;
	}
	
	public static boolean validNumber(String number){
		boolean valid=false;
		if(number!=null){
			number=number.trim();
			try{
				BigInteger b=new BigInteger(number);
				if(b.compareTo(MAX_VAL)<=0 && b.compareTo(BigInteger.ZERO)>=0){
					valid=true;
				}
				
			}
			catch(Exception e){
				valid=false;
			}
		}
		
		return valid;
	}
	
	public static void main(String args[]) throws IOException {
		String thisLine = null;
		try {

			BufferedReader br = new BufferedReader(new FileReader(
					"cooking_the_books.txt"));
			BufferedWriter br1 = new BufferedWriter(new FileWriter(
					"cooking_the_books_output.txt"));
			
			ArrayList<String> list = new ArrayList<String>();
			int i=1;
			String num=br.readLine();
			if(num!=null){
				
			while (i<=Integer.parseInt(num)) {
				thisLine = br.readLine();
				list.add(thisLine);
				i++;
			}
			i=1;
			if(list.size()<=100){
			for(String input:list) {
				System.out.println(input);
				BigInteger smallNo=generateSmallNumber(input);
				BigInteger bigNo=generateBigNumber(input);
				if(smallNo!=null && bigNo!=null){			
			    br1.write("Case #"+i+": "+smallNo+" "+bigNo);
			    br1.newLine();	
			    i++;
				}
							
			}
			}}
			br1.flush();
			br1.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

class Index{
	int fromIndex;
	int toIndex;
	
	public Index() {
	}
	
	public int getFromIndex() {
		return fromIndex;
	}
	
	public void setFromIndex(int fromIndex) {
		this.fromIndex = fromIndex;
	}
	
	public int getToIndex() {
		return toIndex;
	}
	
	public void setToIndex(int toIndex) {
		this.toIndex = toIndex;
	}
	
}

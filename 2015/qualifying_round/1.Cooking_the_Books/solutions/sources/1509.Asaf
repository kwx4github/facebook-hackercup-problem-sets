using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CookingTheBooks
{
    public class Program
    {
        static void Main(string[] args)
        {
            string[] rows = GetRows(args);
            int numRows = int.Parse(rows[0]);

            for (int i = 1; i <= numRows; i++)
            {
                Console.WriteLine(string.Format("Case #{0}: {1} {2}", i, GetMin(rows[i]), GetMax(rows[i])));
            }
        }

        public static string[] GetRows(string[] args)
        {
            var s = File.ReadAllText(args[0]);
            var rows = s.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
            return rows;
        }

        public static string GetMax(string p)
        {
            if (p.Length == 1)
            {
                return p;
            }

            var chars = p.ToCharArray();

            var largest = chars.OrderByDescending(t => Convert.ToInt32(t)).First();
            int indexOfBiggest = p.LastIndexOf(largest);

            if (chars[indexOfBiggest] == chars[0])
            {
                return chars[0] + GetMax(new string(chars.Skip(1).ToArray()));
            }
            else
            {
                chars[indexOfBiggest] = p[0];
                chars[0] = p[indexOfBiggest];
            }
            return new string(chars);
        }

        public static string GetMin(string p, bool allowZeros = false)
        {
            if (p.Length == 1)
            {
                return p;
            }

            var chars = p.ToCharArray();

            char smallest;
            if (allowZeros)
            {
                smallest = chars.OrderBy(t => Convert.ToInt32(t)).First();
            }
            else
            {
                smallest = chars.Where(x => x != '0').OrderBy(t => Convert.ToInt32(t)).First();
            }

            int indexOfSmallest = p.LastIndexOf(smallest);

            if (chars[indexOfSmallest] == chars[0])
            {
                return chars[0] + GetMin(new string(chars.Skip(1).ToArray()), true);
            }
            
            chars[indexOfSmallest] = p[0];
            chars[0] = p[indexOfSmallest];

            return new string(chars);
        }
    }
}

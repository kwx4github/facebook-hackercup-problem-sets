#!/usr/bin/env python2.7

import sys

def parseLineTypes (line, types):
    result = []
    elements = line.strip("\n").split(" ")
    if len(elements) != len(types):
        print ("Error: Diferent number elements between line and types_list")
        return None
    for i in range(len(elements)):
        result.append(types[i](elements[i]))
    return result

def getDigits (num):
    digits = [];
    for i in range(len(num)):
        digits.append(int(num[i]))
    return digits
    
def changeDigits (num, d1, d2):
    #num is string
    res = list(num)
    tmp = res[d1]
    res[d1] = res[d2]
    res[d2] = tmp
    return int(''.join(res))
        
def getMaxCooking (num):
    digits = getDigits(num)
    N = int(num)
    maxCooking = N
    for i in range(len(num)-1):
        maxDigit = i
        #The biggest change is between the most significative digit  and the least one
        for j in range(len(num)-1,i,-1):
            if (digits[j] > digits[maxDigit]):
                maxDigit = j
        if (maxDigit != i):
            print("Maximum found changing %d-%d" % (i,maxDigit))
            maxCooking = changeDigits(num, i, maxDigit)
            break
    return maxCooking
    
def getMinCooking (num):
    digits = getDigits(num)
    N = int(num)
    minCooking = N
    for i in range(len(num)-1):
        minDigit = i
        #The biggest change is between the most significative digit  and the least one
        for j in range(len(num)-1,i,-1):
            if (digits[j] < digits[minDigit]) and ((digits[j] > 0) or (i > 0)):
                minDigit = j
        if (minDigit != i):
            print("Minimum found changing %d-%d" % (i,minDigit))
            minCooking = changeDigits(num, i, minDigit)
            break
    return minCooking
    
#input_file_path = "cooking_the_books_example_input2.txt"
input_file_path = "cooking_the_books.txt"
#output_file_path = "cooking_the_books_example_output2.txt"
output_file_path = "cooking_the_books_output.txt"

input_file = open(input_file_path, 'r')
input_file_lines = input_file.readlines()
output_file = open(output_file_path, 'w')

T = int(input_file_lines[0])

numero_linea = 1;
case = 0;

while (numero_linea <= T):
    N = input_file_lines[numero_linea].strip("\n")
    numero_linea += 1
    case += 1
    maxCook = getMaxCooking(N)
    minCook = getMinCooking(N)
    output_file.write ("Case #%d: %d %d\n" % (case, minCook, maxCook))
    print ("Case #%d: %d %d (%s)" % (case, minCook, maxCook, N))


#include <fstream>
#include <string>
#include <cmath>
using namespace std;

int main()
{
	string in = "cooking_the_books.txt";
	string out = "out.txt";
	ifstream input;
	ofstream output;
	input.open(in.c_str());
	output.open(out.c_str());

	class node
	{
	public:
		int num;
		int org_pos;
	};

	int num;
	int num_sep[9];
	node sorted[9];
	
	int N;
	input >> N;
	
	int i = 1;
	while (i <= N)
	{
		input >> num;

		int num_saved = num;

		int min = 0, max = 0;

		int digit;
		int visited = 9;

		while (num_saved != 0)
		{
			visited--;
			digit = num_saved % 10;
			num_sep[visited] = digit;
			sorted[visited].num = digit;
			sorted[visited].org_pos = visited;
			num_saved = num_saved / 10;
		}
	
		if (num>9)
		{
			for (int j = visited; j < 8; j++)
			{
				int min_sort_pos = j;
				for (int k = min_sort_pos + 1; k < 9; k++)
				{
					if (sorted[k].num < sorted[min_sort_pos].num)
					{
						min_sort_pos = k;
					}
				}
				if (min_sort_pos != j)
				{
					node temp = sorted[j];
					sorted[j] = sorted[min_sort_pos];
					sorted[min_sort_pos] = temp;
				}
			}

			bool swapped = false;
			for (int j = visited; (j < 9) && (swapped==false); j++)
			{
				int temp;
				for (int k = 8; (k >= visited) && (swapped == false); k--)
				{
					if ((sorted[k].num > num_sep[j]) && (sorted[k].org_pos > j))
					{
						temp = num_sep[j];
						num_sep[j] = sorted[k].num;
						num_sep[sorted[k].org_pos] = temp;
						swapped = true;

						for (int l = visited; l < 9; l++)
						{
							max = num_sep[l] * pow(10, 8 - l) + max;
						}

						temp = num_sep[j];
						num_sep[j] = num_sep[sorted[k].org_pos];
						num_sep[sorted[k].org_pos] = temp;
					}
				}
			}

			if (swapped == false)
			{
				max = num;
			}

			swapped = false;
			for (int j = visited; (j < 9) && (swapped == false); j++)
			{
				int temp;
				for (int k = visited; (k < 9) && (swapped == false); k++)
				{
					if ((sorted[k].num < num_sep[j]) && (sorted[k].org_pos > j))
					{
						if (!((j == visited) && (sorted[k].num == 0)))
						{
							temp = num_sep[j];
							num_sep[j] = sorted[k].num;
							num_sep[sorted[k].org_pos] = temp;
							swapped = true;

							for (int l = visited; l < 9; l++)
							{
								min = num_sep[l] * pow(10, 8 - l) + min;
							}
						}

					}
				}
			}

			if (swapped == false)
			{
				min = num;
			}

		}
		else
		{
			min = num;
			max = num;
		}

		output << "Case #" << i << ": " << min << " " << max << endl;
		i++;
	}
	
	input.close();
	output.close();

	return 0;
}
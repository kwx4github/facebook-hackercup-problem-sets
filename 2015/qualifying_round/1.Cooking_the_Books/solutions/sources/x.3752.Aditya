#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <climits>
#include <vector>
#include <map>
#include <utility>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
const int MAX_SIZE = 100005;
const int MOD = 1000000007;

vector<int> v;
int dig[10];

void splitNum(int n){
	int idx = 0;
	while (n){
		v.push_back(n % 10);
		
		if (dig[n % 10] == -1){
			dig[n % 10] = idx;
		}

		n /= 10;
		idx++;
	}
}

int formNum(){
	int num = 0;

	for (int i = v.size() - 1; i > -1; i--){
		num = num * 10 + v[i];
	}

	return num;
}

int main(){
	ios_base::sync_with_stdio (false);

	int t, n;

	cin >> t;
	for (int tc = 1; tc <= t; tc++){
		fill (dig, dig + 10, -1);
		v.clear();

		cin >> n;

		cout << "Case #" << tc << ": ";

		if (n == 0){
			cout << 0 << " " << 0 << endl;
			continue;
		}

		splitNum(n);

		// for (int i = 0; i < v.size(); i++){
		// 	cout << v[i] << endl;
		// }

		// for (int i = 0; i < 10; i++){
		// 	cout << i << " " << dig[i] << endl;
		// }

		bool printed = false;		
		for (int i = 0; i < 10; i++){
			if (dig[i] != -1){
				bool flag = false;

				for (int j = (i == 0)? v.size() - 2 : v.size() - 1; j > dig[i]; j--){
					if (v[j] > i){
						swap(v[j], v[dig[i]]);
						cout << formNum() << " ";
						swap(v[j], v[dig[i]]);
						flag = true;
						break;
					}
				}

				if (flag){
					printed = true;
					break;
				}
			}
		}

		if (!printed){
			cout << n << " ";
		}

		printed = false;
		for (int i = 9; i > 0; i--){
			if (dig[i] != -1){
				bool flag = false;

				for (int j = v.size() - 1; j > dig[i]; j--){
					if (v[j] < i){
						swap(v[j], v[dig[i]]);
						cout << formNum() << endl;
						swap(v[j], v[dig[i]]);
						flag = true;
						break;
					}
				}

				if (flag){
					printed = true;
					break;
				}
			}
		}

		if (!printed){
			cout << n << endl;
		}

	}

	return  0;
}
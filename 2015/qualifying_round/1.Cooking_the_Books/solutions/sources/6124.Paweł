#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

string solvemin(string s) {
	vector<pair<int, int> > smallest(s.length());
	int curmin = 9;
	int curminpos = s.length() - 1;
	int firstzeropos = -1;
	for (int i = s.length() - 1; i >= 0; --i) {
		if (s[i] - '0' == 0) {
			if (firstzeropos == -1)
				firstzeropos = i;
		}
		else if (s[i] - '0' < curmin) {
			curmin = s[i] - '0';
			curminpos = i;
		}

		smallest[i] = make_pair(curminpos, curmin);
	}

	for (int i = 0; i < s.length(); ++i) {
		pair<int, int> small = smallest[i];
		if (i > 0 && firstzeropos > i) {
			swap(s[i], s[firstzeropos]);
			break;
		}
		if (small.second == s[i] - '0' || s[i] == '0')
			continue;
		swap(s[i], s[small.first]);
		break;
	}

	return s;	
}

string solvemax(string s) {
	vector<pair<int, int> > largest(s.length());
	int curmax = 0;
	int curmaxpos = s.length() - 1;
	for (int i = s.length() - 1; i >= 0; --i) {
		if (s[i] - '0' > curmax) {
			curmax = s[i] - '0';
			curmaxpos = i;
		}
		largest[i] = make_pair(curmax, curmaxpos);
	}

	for (int i = 0; i < s.length(); ++i) {
		pair<int, int> l = largest[i];
		if (l.first == s[i] - '0')
			continue;
		if (l.first == 0)
			break;
		swap(s[i], s[l.second]);
		break;
	}

	return s;
}

int main() {
	int t;
	cin >> t;
	int counter = 0;
	while (t--) {
		string s;
		cin >> s;
		cout << "Case #" << ++counter << ": " << solvemin(s) << " " << solvemax(s) << endl;
	}
}

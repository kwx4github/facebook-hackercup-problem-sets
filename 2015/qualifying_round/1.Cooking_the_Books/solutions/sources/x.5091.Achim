package de.ateda.hackercup2015;

import java.io.*;

import sun.audio.ContinuousAudioDataStream;

public class Cooking {

	public static void main(String[] args) throws Exception {
		try (BufferedReader in = new BufferedReader(new FileReader("src/de/ateda/hackercup2015/Cooking.in"))) {
			try (PrintWriter out = new PrintWriter(new FileWriter("src/de/ateda/hackercup2015/Cooking.out"))) {
				int T = readInt(in);
				for (int t = 1; t <= T; t++) {
					String N = in.readLine();
					String solution = low(N) + " " + high(N);
					System.out.printf("%s -> %s\n", N, solution);
					out.printf("Case #%s: %s\n", t, solution);
				}
			}
		}
	}

	private static String high(String s) {
		for (int i = 9; i >= 0; i--) {
			int lastIndex = s.lastIndexOf(String.valueOf(i));
			if (lastIndex > 0) {
				// try to move a i to the front
				for (int j = i == 0 ? 1 : 0; j < lastIndex; j++) {
					if (Character.getNumericValue(s.charAt(j)) >= i) {
						continue;
					} else {
						return s.substring(0, j) + s.charAt(lastIndex) + s.substring(j + 1, lastIndex) + s.charAt(j) + s.substring(lastIndex + 1);
					}
				}

			}
		}
		return s;
	}

	private static String low(String s) {
		for (int i = 0; i <= 9; i++) {
			int lastIndex = s.lastIndexOf(String.valueOf(i));
			if (lastIndex > 0) {
				// try to move a i to the front
				for (int j = i == 0 ? 1 : 0; j < lastIndex; j++) {
					if (Character.getNumericValue(s.charAt(j)) <= i) {
						continue;
					} else {
						return s.substring(0, j) + s.charAt(lastIndex) + s.substring(j + 1, lastIndex) + s.charAt(j) + s.substring(lastIndex + 1);
					}
				}

			}
		}
		return s;
	}

	private static int readInt(BufferedReader in) throws NumberFormatException, IOException {
		return Integer.parseInt(in.readLine());
	}

}

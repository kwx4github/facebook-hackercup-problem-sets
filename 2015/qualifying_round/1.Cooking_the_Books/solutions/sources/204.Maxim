//
//  main.cpp
//  Problem1
//
//  Created by Maxim Piskunov on 1/9/15.
//  Copyright (c) 2015 Maxim Piskunov. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <string>

using namespace std;

struct input {
    int N;
};

struct output {
    int min;
    int max;
};

void read(ifstream &in, input &test) {
    in >> test.N;
}

void write(ofstream &out, output test) {
    out << test.min << " " << test.max;
}

vector <int> toDigits(int N) {
    string number = to_string(N);
    vector <int> result(number.size());
    for (int i = 0; i < number.size(); i++) {
        result[i] = number[i] - '0';
    }
    return result;
}

int fromDigits(vector <int> number) {
    string str;
    str.resize(number.size(), '0');
    for (int i = 0; i < number.size(); i++) {
        str[i] += number[i];
    }
    return (int)strtol(str.c_str(), NULL, 0);
}

int swap(int N, int i1, int i2) {
    vector <int> number = toDigits(N);
    swap(number[i1], number[i2]);
    return fromDigits(number);
}

int digitCountFor(int N) {
    return (int)toDigits(N).size();
}

output solve (input test) {
    output result;
    
    int digitCount = digitCountFor(test.N);
    
    vector <vector <int> > possibleNumbers;
    
    possibleNumbers.resize(digitCount);
    for (int i = 0; i < digitCount; i++) {
        possibleNumbers[i].resize(digitCount);
        for (int j = 0; j < digitCount; j++) {
            possibleNumbers[i][j] = swap(test.N, i, j);
        }
    }
    
    result.min = 999999999 + 1;
    result.max = -1;
    
    for (int i = 0; i < digitCount; i++) {
        for (int j = 0; j < digitCount; j++) {
            if (digitCountFor(test.N) != digitCountFor(possibleNumbers[i][j])) continue;
            result.min = min(result.min, possibleNumbers[i][j]);
            result.max = max(result.max, possibleNumbers[i][j]);
        }
    }
    
    return result;
}

void readAll(vector <input> &tests) {
    ifstream in("../../../../../input.txt");
    
    int T;
    in >> T;
    tests.resize(T);
    for (int i = 0; i < T; i++) {
        read(in, tests[i]);
    }
    
    in.close();
}

void writeAll(vector <output> &results) {
    ofstream out("../../../../../output.txt");
    
    out << "Case #1: ";
    write(out, results[0]);
    for (int i = 1; i < results.size(); i++) {
        out << endl << "Case #" << i+1 << ": ";
        write(out, results[i]);
    }
    
    out.close();
}

void solveAll(vector <input> &tests, vector <output> &results) {
    results.resize(tests.size());
    for (int i = 0; i < tests.size(); i++) results[i] = solve(tests[i]);
}

int main(int argc, const char * argv[]) {
    vector <input> tests;
    vector <output> results;
    
    readAll(tests);
    solveAll(tests, results);
    writeAll(results);
    
    return 0;
}
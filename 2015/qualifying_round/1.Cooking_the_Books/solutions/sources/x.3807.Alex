# -*- coding: utf-8 -*-

# This library is available online and free to use:
# https://github.com/yanatan16/pycodejam
from codejam.parsers import iter_parser


def _format_output(min_num, max_num):
    return '{} {}'.format(min_num, max_num)


def _swap_digits(number, i, j):
    digits = list(number)
    digits[i], digits[j] = digits[j], digits[i]
    return ''.join(digits)


def solve(*digits):
    digits = map(int, digits)
    number = ''.join(map(str, digits))
    max_num = number
    min_num = number
    if len(number.rstrip('0')) < 2:
        return _format_output(number, number)
    max_digit = max(digits)
    i = number.rfind(str(max_digit))
    for j in xrange(0, i):
        if max_digit > digits[j]:
            max_num = _swap_digits(number, j, i)
            break
    min_digit = min(x for x in digits if x != 0)
    if min_digit < digits[0]:
        i = number.rfind(str(min_digit))
        min_num = _swap_digits(number, 0, i)
    j = number.rfind('0')
    if j != -1:
        # find first non-zero digit except at the beginning
        for i in xrange(1, len(digits)):
            if digits[i] > 0:
                min_num_tmp = _swap_digits(number, i, j)
                min_num = min(int(min_num), int(min_num_tmp))
                break
    return _format_output(min_num, max_num)


@iter_parser
def parse(nxtline):
    return nxtline()


if __name__ == "__main__":
    from codejam import CodeJam
    CodeJam(parse, solve).main()

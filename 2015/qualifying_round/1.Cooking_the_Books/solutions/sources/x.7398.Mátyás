import Control.Monad
import Data.Monoid
import Data.Foldable
import Data.Sequence
import System.IO
import Text.Printf

main :: IO ()
main = do
    hSetBuffering stdout LineBuffering
    [t] <- getInts
    Control.Monad.forM_ [1..t] $ \n -> do
        putStr $ printf "Case #%d: " n
        doCase

doCase :: IO ()
doCase = do
    [n] <- getInts
    putStrLn $ (show $ smallest n) <> " " <> (show $ biggest n)

smallest :: Int -> Int
smallest n = fromDigits . update 0 s $ update si first digitsN
  where
    digitsN = digits n
    first = index digitsN 0
    (s, si) = findSmallest digitsN

biggest :: Int -> Int
biggest n = fromDigits . update 0 s $ update si first digitsN
  where
    digitsN = digits n
    first = index digitsN 0
    (s, si) = findBiggest digitsN

findSmallest :: Seq Int -> (Int, Int)
findSmallest = foldlWithIndex (\(s,i) k n -> if n < s && n /= 0 then (n, k) else (s,i)) (10,0)

findBiggest :: Seq Int -> (Int, Int)
findBiggest = foldlWithIndex (\(s,i) k n -> if n > s then (n, k) else (s,i)) (0,0)

digits :: Int -> Seq Int
digits = fromList . map (read :: String -> Int) . map (:[]) . show

fromDigits :: Seq Int -> Int
fromDigits = read . join . map show . toList

getInts :: IO [Int]
getInts = (map read . words) `fmap` getLine
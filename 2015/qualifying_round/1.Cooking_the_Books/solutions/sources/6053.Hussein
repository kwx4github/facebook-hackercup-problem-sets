import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

/**
 * Created by hussein on 10/01/15.
 */
public class CookingBooks {

    public static void main(String[] args)
    {
        if(args.length < 1)
            return;
        try {
            List<String> lines = Files.readAllLines(Paths.get(args[0]), Charset.defaultCharset());

            PrintWriter writer = new PrintWriter("output.txt");
            for(int i =1; i<lines.size(); i++)
            {
                String line = lines.get(i);
                writer.println("Case #"+i+": "+getMinNumber(line.toCharArray()) + " " + getMaxNumber(line.toCharArray()));
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public static String getMinNumber(char[] s)
    {
        boolean swapFound = false;
        int maxNumberPosition = 0;
        int minNumberPosition = 0;

        for(int i=0; i < s.length; i++)
        {
            if((i == 0 && s[i] == '1') || s[i] == '0' || (i == s.length-1))
                continue;

            char minNumber = s[s.length-1];
            int position = s.length-1;
            for(int x = s.length-2; x > i; x--)
            {
            	if(i == 0 && s[x] == '0')
                    continue;
                
                if(s[x] < minNumber)
                {
                    minNumber = s[x];
                    position = x;
                }
            }

            if(s[i] > minNumber) {
                maxNumberPosition = i;
                minNumberPosition = position;
                swapFound = true;
                break;
            }
        }

        if(swapFound)
        {
            char large = s[maxNumberPosition];

            s[maxNumberPosition] = s[minNumberPosition];
            s[minNumberPosition] = large;
        }

        return arrayToString(s, "");
    }


    public static String getMaxNumber(char[] s)
    {
        boolean swapFound = false;
        int maxNumberPosition = 0;
        int minNumberPosition = 0;

        for(int i=0; i < s.length; i++)
        {
            if(i == s.length-1)
                break;

            char maxNumber = s[s.length-1];
            int position = s.length-1;
            for(int x = s.length-2; x > i; x--)
            {
                if(s[x] > maxNumber)
                {
                    maxNumber = s[x];
                    position = x;
                }
            }

            if(s[i] < maxNumber) {
                maxNumberPosition = position;
                minNumberPosition = i;
                swapFound = true;
                break;
            }
        }

        if(swapFound)
        {
            char large = s[maxNumberPosition];
            s[maxNumberPosition] = s[minNumberPosition];
            s[minNumberPosition] = large;
        }

        return arrayToString(s, "");
    }

    public static String arrayToString(char[] a, String splitter) {
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "";

        StringBuilder b = new StringBuilder();
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.toString();
            b.append(splitter);
        }
    }
}

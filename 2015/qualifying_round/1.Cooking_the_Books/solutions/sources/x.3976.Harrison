#include <iostream>
#include <fstream>
#include <stdio.h>
#include <cstdlib>
#include <vector>
#include <iosfwd>
#include <sstream>
#include <algorithm>
#include <utility>
#include <map>
using namespace std;

//vector<vector<int> > total;
//void combinations (int v[], int start, int n, int k, int maxk) {
//        int     i;
//
//        /* k here counts through positions in the maxk-element v.
//         * if k > maxk, then the v is complete and we can use it.
//         */
//        if (k > maxk) {
//                /* insert code here to use combinations as you please */
////                for (i=1; i<=maxk; i++) {
////                	printf ("%i ", v[i]);
////                	c.push_back(v[i]);
////
////                }
//                std::vector<int> c(v+1, v+1+ maxk);
//        		total.push_back(c);
////                printf ("\n");
//                return;
//        }
//
//        /* for this k'th element of the v, try all start..n
//         * elements in that position
//         */
//        for (i=start; i<=n; i++) {
//
//                v[k] = i;
//
//                /* recursively generate combinations of integers
//                 * from i+1..n
//                 */
//                combinations (v, i+1, n, k+1, maxk);
//        }
//}

string swap(string s, int pos){
	char temp = s[0];
	s[0] = s[pos];
	s[pos] = temp;

	string final = s;
	return final;
}

int main(){
	int t = 0;

	string line;
	ifstream myfile ("input.txt");

	if (myfile.is_open())
	{
		int count = 0;
		getline(myfile, line);
		t = atoi(line.c_str());
		count++;

		int c_case = 0;
		while ( getline (myfile,line) )
		{
			c_case++;
			int max = -1;
			int min = 999999999 + 100;
			int maxpos = -1, minpos = -1;
			for(int i=0; i<line.length(); i++){
				if(((int)line[i] - 48 )> max){
					max = ((int)line[i] - 48);
					maxpos = i;
				}
				if(((int)line[i] - 48) < min && ((int)line[i] - 48)!=0){
//					cout << "min: " << ((int)line[i] - 48) << '\n';
					min = ((int)line[i] - 48);
					minpos = i;
				}
			}
			string newminstr = minpos != -1 ? swap(line, minpos) : line;
			string newmaxstr = maxpos != -1 ? swap(line, maxpos) : line;
			cout << "Case #" << c_case <<": "<< newminstr << " " << newmaxstr << '\n';

			count++;
		}
		myfile.close();
	}

//	else cout << "Unable to open file";

	return 0;
}



#include<iostream>
#include<math.h> 
#include<algorithm>
using namespace std;
int main(){
	int t,t1;
	cin>>t;
	t1=t;
	while(t--){
	unsigned long int n;	
	cin>>n;
	int output1=0;
	int output2=0;
	if(n!=0){
	int totnumbers,i;
	totnumbers= floor(log10(n))+1;
	int number=n;	
	int digits[totnumbers],digits1[totnumbers],high,low,high_index,low_index,k=0,l=0;
	for(i=0;i<totnumbers;i++){
		digits[i]=number%10;
		digits1[i]=number%10;
		number=number/10;	
		}
	
	sort(digits1,digits1+totnumbers);
	int non_zero,min_zero,max_zero,max_nonzero=0,min_nonzero,zeros=0,flag=0,flag2=0,trig1=0,trig2=0,flag3=0;
	for(i=0;i<totnumbers;i++){		
		if(digits1[i]&&!flag2){
			non_zero=i;
			flag2++;		
		}
		if(!digits1[i])
		zeros++;	

	}		
	
	for(i=0;i<totnumbers;i++){
			if(digits[i]==digits1[totnumbers-1]&&!l)
			{
				high=digits[i];
				high_index=i;	
				l++;
			}
			if(digits[i]==digits1[non_zero]&&!k)
			{
				low=digits[i];
				low_index=i;
				k++;			
			}

		}
				if(zeros){	
				if(digits[low_index]==digits[totnumbers-1]){
				for(i=0;i<totnumbers;i++){
					if(!flag){
						if(!digits[i]){
						min_zero=i;					
						flag++;					
					}
					}else{
						if(digits[i]&&i<totnumbers-1){
						max_nonzero=i;					
						}					
						if(!max_nonzero&&i==totnumbers-1){
						max_nonzero=min_zero;
						}					
					}
				
					}
				
				trig2++;
				}
				if(digits[high_index]==digits[totnumbers-1]){
				for(i=0;i<totnumbers;i++){
					if(!digits[i]){
					max_zero=i;				
					}				
					if(digits[i]&&!flag3){
					min_nonzero=i;					
					flag3++;
					}
			
				
				}				
				if(max_zero>min_nonzero)
				trig1++;					
				}
				}
			

		output1=n-digits[totnumbers-1]*pow(10,totnumbers-1)+ digits[totnumbers-1]*pow(10,high_index)-digits[high_index]*pow(10,high_index)+digits[high_index]*pow(10,totnumbers-1);
		output2=n-digits[totnumbers-1]*pow(10,totnumbers-1)+ digits[totnumbers-1]*pow(10,low_index)-digits[low_index]*pow(10,low_index)+digits[low_index]*pow(10,totnumbers-1);
	if(trig1){
	output1=n-digits[min_nonzero]*pow(10,min_nonzero)+digits[min_nonzero]*pow(10,max_zero);
	}				
	if(trig2){
	output2=n-digits[max_nonzero]*pow(10,max_nonzero)+ digits[max_nonzero]*pow(10,min_zero);
}				
		
}

cout<<"Case #"<<t1-t<<": "<<output2<<" "<<output1<<"\n";
}
return 0;
}

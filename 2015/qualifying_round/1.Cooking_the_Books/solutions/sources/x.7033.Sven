//
//  main.c
//  FacebookHackerCup
//
//  Created by Sven Jansen on 11.01.15.
//  Copyright (c) 2015 AppDesign. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void swap(char *a, char *b )
{
    char temp = *a;
    *a = *b;
    *b = temp;
}

void sort(char *word, int asc)
{
    if (asc == 1) {
        for (unsigned int i = 0; i < strlen(word) - 1; i++)
            for (unsigned int j = i + 1; j < strlen(word); j++)
                if (word[i] > word[j])
                    swap(&word[i], &word[j]);

    }
    else {
        for (unsigned int i = 0; i < strlen(word) - 1; i++)
            for (unsigned int j = i + 1; j < strlen(word); j++)
                if (word[i] < word[j])
                    swap(&word[i], &word[j]);
    }
}

int main(int argc, const char * argv[]) {
    FILE *infile, *outfile;
    char line_buffer[BUFSIZ];
    char line_number;
    infile = fopen("cooking_the_books.txt", "r");
    outfile = fopen("output.txt", "w");
    if (!infile) {
        printf("Couldn't open file for reading.\n");
        return 0;
    }
    line_number = 0;
    while (fgets(line_buffer, sizeof(line_buffer), infile)) {
        if (line_number > 0) { // ignore first line
            
            line_buffer[strlen(line_buffer) - 1] = 0;
            char sortedSmallest[sizeof(line_buffer)], sortedBiggest[sizeof(line_buffer)];
            strcpy(sortedSmallest, line_buffer);
            sort(sortedSmallest, 1);
            printf("sorted: %s\n", sortedSmallest);
            strcpy(sortedBiggest, line_buffer);
            sort(sortedBiggest, 0);
            printf("sorted: %s\n", sortedBiggest);
            
            char smallestNummer[sizeof(line_buffer)], biggestNummer[sizeof(line_buffer)];
            
            strcpy(smallestNummer, line_buffer);
            strcpy(biggestNummer, line_buffer);
            
            if (strlen(line_buffer) == 1 || (strlen(line_buffer) == 2 && line_buffer[strlen(line_buffer) - 1] == '0')) {
                fprintf(outfile, "Case #%d: %s %s\n", line_number, smallestNummer, biggestNummer);
            }
            else {
                
                char smallest = '9';
                char highest = '0';
                int smallestIndex = 0, highestIndex = 0;
                for (int i = 0; i < strlen(line_buffer); i++) {
                    printf("char: %c\n", line_buffer[i]);
                    if (line_buffer[i] < smallest && line_buffer[i] != sortedSmallest[i]) {
                        smallest = line_buffer[i];
                        smallestIndex = i;
                    }
                    if (line_buffer[i] > highest && line_buffer[i] != sortedBiggest[i]) {
                        highest = line_buffer[i];
                        highestIndex = i;
                    }
                }
                printf("smallest: %c, highest: %c\n", smallest, highest);
                char tmpSmallest = line_buffer[smallestIndex];
                for (int i = 0; i < strlen(smallestNummer); i++) {
                    if (smallestNummer[i] > smallest &&
                        smallestNummer[i] > '0' &&
                        smallestNummer[smallestIndex] > '0') {
                        smallestNummer[smallestIndex] = smallestNummer[i];
                        smallestNummer[i] = tmpSmallest;
                        break;
                    }
                }
                char tmpHighest = line_buffer[highestIndex];
                for (int i = 0; i < strlen(biggestNummer); i++) {
                    if (biggestNummer[i] < highest &&
                        biggestNummer[i] > '0' &&
                        biggestNummer[highestIndex] > '0') {
                        biggestNummer[highestIndex] = biggestNummer[i];
                        biggestNummer[i] = tmpHighest;
                        break;
                    }
                }
                
                fprintf(outfile, "Case #%d: %s %s\n", line_number, smallestNummer, biggestNummer);
            }
            
        }
        ++line_number; /* note that the newline is in the buffer */

    }
    fclose(outfile);
    return 0;
}

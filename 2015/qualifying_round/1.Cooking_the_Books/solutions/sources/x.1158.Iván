#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))
#define SQR(a) ((a)*(a))
#define INF 10000000

int itov(int N, int * digits) {
	int d = 0;
	while (N > 0) {
		digits[d++] = N % 10;
		N /= 10;
	}
	return d;
}

int vtoi(int * digits, int nd) {
	int N = 0, pos = 1, i;
	for (i = 0; i < nd; i++, pos *= 10)
		N += digits[i] * pos;
	return N;
}

int find_min(int * digits, int nd) {
	if (nd == 0) return -1;
	int minimo = 0, i;
	for (i = 1; i < nd; i++)
		if ((digits[i] > 0 && digits[i] < digits[minimo]) || digits[minimo] == 0)
			minimo = i;
	if (minimo == nd - 1) return find_min(digits, nd-1);
	return minimo;
}

int find_max(int * digits, int nd) {
	if (nd == 0) return -1;
	int maximo = 0, i;
	for (i = 1; i < nd; i++)
		if (digits[i] > digits[maximo])
			maximo = i;
	if (maximo == nd - 1) return find_max(digits, nd-1);
	return maximo;
}

int main(void) {
#ifdef TESTING
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
	int T, N, digits[10], nd, lowest, greatest, i;
	scanf("%d ", &T);
	for (i = 1; i <= T; ++i) {
		scanf("%d ", &N);
		nd = itov(N, digits);
		/* Lowest number */
		int low_pos = find_min(digits, nd);
		if (low_pos < 0) lowest = N;
		else {
			int aux = digits[nd-1];
			digits[nd-1] = digits[low_pos];
			digits[low_pos] = aux;
			lowest = vtoi(digits, nd);
			digits[low_pos] = digits[nd-1];
			digits[nd-1] = aux;
		}
		/* Greatest number */
		int great_pos = find_max(digits, nd);
		if (great_pos < 0) greatest = N;
		else {
			int aux = digits[nd-1];
			digits[nd-1] = digits[great_pos];
			digits[great_pos] = aux;
			greatest = vtoi(digits, nd);
		}
		printf("Case #%d: %d %d\n", i, lowest, greatest);
	}

	return 0;
}

package classsss;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

public class CookingTheBooks {

	public static void main(String[] args) {
		try {
			BufferedReader br = new BufferedReader(new FileReader(
					"cooking_the_books.txt"));
			String t = null;

			if ((t = br.readLine()) != null) {

				int i = Integer.parseInt(t);
				for (int j = 1; j <= i; j++) {
					if (t.length() < 10) {
						try {
							int k = Integer.parseInt(br.readLine());
							if (k >= 12 && k < 1000000000) {
								System.out.println("Case #" + j + ": "
										+ findMin(k) + " " + findMax(k));
							} else if (k >= 0 && k <= 11) {
								System.out.println("Case #" + j + ": " + k
										+ " " + k);
							}
						} catch (NumberFormatException e) {
							System.out
									.println("Number exceeded the integer range or is not a number");
						}
					}
				}
			}
		} catch (FileNotFoundException e) {
			System.out.println("File not found");
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public static ArrayList<Integer> breakInteger(int k) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		while (k > 0) {
			list.add(k % 10);
			k = k / 10;
		}
		Collections.reverse(list);
		return list;
	}

	public static int findMax(int k) {
		ArrayList<Integer> list = breakInteger(k);

		int max = 0;
		int j = 0;
		for (int i : list) {
			if (max < i) {
				max = i;
			}
		}
		// System.out.println("Before swap " + list);
		Collections.swap(list, 0, list.lastIndexOf(max));
		// System.out.println("After swap " + list);
		for (int m : list) {
			j = j * 10 + m;
		}

		return j;
	}

	public static int findMin(int k) {
		ArrayList<Integer> list = breakInteger(k);
		int min = 999999999;
		int j = 0;
		for (int i : list) {
			if (min > i && i != 0) {
				min = i;
			}
		}
		// System.out.println("Before swap " + list);
		Collections.swap(list, 0, list.lastIndexOf(min));
		// System.out.println("After swap " + list);
		for (int m : list) {
			j = j * 10 + m;
		}

		return j;
	}

}

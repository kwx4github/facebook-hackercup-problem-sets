import java.util.*;
import java.io.*;


class CookingTheBooks 
{

	public static void main(String args[])
	{

		// Set up buffered reader to read in input numbers
		FileReader fr = null;
		BufferedReader br = null;
		try
		{
			fr = new FileReader("cooking_the_books.txt");	
			br = new BufferedReader(fr);
		} catch (FileNotFoundException e) {

		}
		int numOfInputs = 0;
		try
		{
			numOfInputs = Integer.parseInt(br.readLine());	
		} catch (IOException e) {

		}
			
		LinkedList<Integer> inputNums = new LinkedList<Integer>();
	
		// Read the input numbers into a linked list
		for (int i = 0; i < numOfInputs; i++)
		{
			try 
			{
				int currNum = Integer.parseInt(br.readLine());
				inputNums.add(currNum);
			} catch (IOException e) {

			}
			
		}		

		Iterator<Integer> iterator = inputNums.iterator();

		// Calculate and print the min/max of each input
		for (int i = 0; i < numOfInputs; i++)
		{
			int inputNumber = iterator.next();
			int minFudge = findMinFudge(inputNumber);
			int maxFudge = findMaxFudge(inputNumber);

			System.out.println("Case #" + (i+1) + ": " + minFudge + " " + maxFudge);
		}



	}

	private static int findMinFudge(int inputNumber)
	{
		String numString = Integer.toString(inputNumber);
		char[] numChars = numString.toCharArray();

		int minNumPosition = 0;

		// Find the minimum element (or take the right most if repeated elements)
		for (int i = 0; i < numChars.length; i++)
		{
			if (numChars[i] <= numChars[minNumPosition])
			{
				minNumPosition = i;
			}
		}

		// Run through list and replace with first number that is strictly greater than min
		for (int i = 0; i < minNumPosition; i++)
		{
			if (numChars[i] > numChars[minNumPosition])
			{
				if (numChars[minNumPosition] == '0' && i == 0)
				{
					continue;
				}
				numChars = swapElements(numChars, i, minNumPosition);
				String minFudgeString = new String(numChars);
				int minFudge = Integer.parseInt(minFudgeString);
				return minFudge;
			}
		}

		// Return the original number if it's already the min number
		return inputNumber;
	}

	private static int findMaxFudge(int inputNumber)
	{
		String numString = Integer.toString(inputNumber);
		char[] numChars = numString.toCharArray();

		int maxNumPosition = 0;

		// Find the largest element (or take first instance if multiple)
		for (int i = 0; i < numChars.length; i++)
		{
			if (numChars[i] > numChars[maxNumPosition])
			{
				maxNumPosition = i;
			}
		}

		for (int i = 0; i < maxNumPosition; i++)
		{
			if (numChars[i] < numChars[maxNumPosition])
			{
				if (numChars[maxNumPosition] == '0' && i == 0)
				{
					continue;
				}
				numChars = swapElements(numChars, i, maxNumPosition);
				String maxFudgeString = new String(numChars);
				int maxFudge = Integer.parseInt(maxFudgeString);
				return maxFudge;

			}
		}


		return inputNumber;
	}

	private static char[] swapElements(char[] array, int posOne, int posTwo)
	{
		char posOneChar = array[posOne];
		char posTwoChar = array[posTwo];

		array[posOne] = posTwoChar;
		array[posTwo] = posOneChar;

		return array;
	}
}
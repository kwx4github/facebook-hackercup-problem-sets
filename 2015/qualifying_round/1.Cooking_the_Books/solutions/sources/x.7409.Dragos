#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>

#define SWAP(a,b) {int temp; temp=a; a=b; b=temp;}

using namespace std;

void get_max(const char* N, int start, int end, int* max, int* max_pos) {
    *max = N[start];
    *max_pos = start;
    for (int i = start; i < end; i++) {
        if (N[i] > *max) {
            *max = N[i];
            *max_pos = i;
        }
    }
}

void get_min(const char* N, int start, int end, int* min, int* min_pos, bool non_zero) {
    *min = 500;
    *min_pos = -1;
    for (int i = start; i < end; i++) {
        if (non_zero && N[i] == '0')
            continue;

        if (N[i] < *min) {
            *min = N[i];
            *min_pos = i;
        }
    }
}

int main(int argn, char** argv) {
    int T;

    scanf("%d", &T);
    for (int i = 0; i < T; i++) {
        long long tmp;
        string N_str;
        string max_str, min_str;
        scanf("%lld", &tmp);
        N_str = to_string(tmp);
        max_str = N_str;
        min_str = N_str;
        const char* N = N_str.c_str();

        size_t N_size = N_str.size();

        for (int j = 0; j < N_size - 1; j++) {
            int max_val, max_pos;
            get_max(N, j + 1, N_size, &max_val, &max_pos);
            if (max_val > N[j]) {
                swap(N_str[j], N_str[max_pos]);
                max_str = N_str;
                swap(N_str[j], N_str[max_pos]);
                break;
            }
        }

        for (int j = 0; j < N_size - 1; j++) {
            int min_val, min_pos;
            get_min(N, j + 1, N_size, &min_val, &min_pos, j == 0);
            if (min_val < N[j]) {
                swap(N_str[j], N_str[min_pos]);
                min_str = N_str;
                swap(N_str[j], N_str[min_pos]);
                break;
            }
        }

        printf("Case #%d: %s %s\n", i + 1, min_str.c_str(), max_str.c_str());
    }

    return 0;
}

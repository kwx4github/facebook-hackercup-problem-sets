

#include <fstream>
#include <vector>

using namespace std;

void toVector(int num, vector<int>& nums)
{
	while (num > 0)
	{
		nums.push_back(num % 10);
		num = num / 10;
	}
	reverse(nums.begin(), nums.end());
}

int getNextS(vector<int> &nums, int pos)
{
	int min = -1;
	for (int i = pos; i < nums.size(); i++)
	{
		if (nums[i] == 0 && pos == 1) continue;
		if ( min == -1 || nums[i] <= nums[min]) min = i;
	}
	return min;
}

int getNextL(vector<int> &nums, int pos)
{
	int max = -1;
	for (int i = pos; i < nums.size(); i++)
	{
		if (max == -1 || nums[i] >= nums[max]) max = i;
	}
	return max;
}

void swap(vector<int> &nums, int s, int e)
{
	int t = nums[s];
	nums[s] = nums[e];
	nums[e] = t;
}

int getSmallest(int num)
{
	if (num < 10) return num;
	vector<int> nums;
	toVector(num, nums);
	int cur = 0;
	while (cur+1 < nums.size())
	{
		int rep = getNextS(nums, cur+1);
		if (rep != -1 && nums[cur] > nums[rep])
		{
			swap(nums, cur, rep);
			break;
		}
		cur++;
	}

	int res = 0;
	for (int i = 0; i < nums.size(); i++)
		res = res * 10 + nums[i];
	return res;
}

int getLargest(int num)
{
	if (num < 10) return num;
	vector<int> nums;
	toVector(num, nums);
	int cur = 0;
	while (cur + 1 < nums.size())
	{
		int rep = getNextL(nums, cur + 1);
		if (nums[cur] < nums[rep])
		{
			swap(nums, cur, rep);
			break;
		}
		cur++;
	}

	int res = 0;
	for (int i = 0; i < nums.size(); i++)
		res = res * 10 + nums[i];
	return res;
}

int main()
{
	int N; 
	fstream fin;
	fin.open("cooking_the_books.txt", fstream::in);

	fstream fout;
	fout.open("output.txt", fstream::out);
	fin >> N;
	for (int i = 0; i < N; i++)
	{
		int num;
		fin >> num;
		fout << "Case #" << i + 1 << ": ";

		fout << getSmallest(num) << " ";
		fout << getLargest(num) << endl;
	}
	return 0;
}
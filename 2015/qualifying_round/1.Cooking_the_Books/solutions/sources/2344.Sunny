//	Facebook Hacker Cup 2015
//	Qualification Round
//	Problem A
//	Cooking the Books (15 points / 100)

const bool debug=true;

#include <iostream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cstring>
#include <cstdlib>
#include <cstdarg>
#include <utility>
#include <cassert>
#include <ctime>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <deque>
#include <queue>
#include <stack>

#define TIMES(n) for (int i=0; i<(n); ++i)
#define FOR(i,s,t) for (int (i)=(s); (i)<=(t); ++(i))
#define RESET(a) memset((a), 0, sizeof((a)))
#define P(x, ...) printf((x), ##__VA_ARGS__)
#define D(x, ...) if (debug) printf((x), ##__VA_ARGS__)
#define MP(x, y) make_pair((x), (y))

const int INF = 0x7F7F7F7F; // or (unsigned)(-1)>>1
int caseI = 0, caseD = -1;

using namespace std;

//void P(char *f, ...) {va_list v; va_start(v, f); vprintf(f, v); va_end(v);}
//void D(char *f, ...) {if (!debug) return; va_list v; va_start(v, f); vprintf(f, v); va_end(v);}


/*

Sample Input:



Sample Output:


*/

const int maxN = 1005, maxM = 1005;

typedef pair<int, int> ii;
typedef vector<vector<ii> > graph;

class Qs {
	int n, m, k;
	//int e[maxN][maxN];
	string s;

public:
	Qs() {
		
	}

	bool input() {

		char ss[maxN];
		if (scanf("%[0-9] ", ss) != 1)
			return false;
		
		s = string(ss);
		n = strlen(ss);



		return true;
	}

	// string swapForExtreme(function<bool(int, int)> cmp) {
	// 	string r = s;
	// 	int extremePos;
	// 	FOR(i, 0, n-2) {
	// 		extremePos = i;
	// 		FOR(j, i+1, n-1) {
	// 			if (i == 0 && s[j] == '0')
	// 				continue;
	// 			if (cmp(s[j], s[extremePos])) {
	// 				extremePos = j;
	// 			}
	// 		}
	// 		D("> %d %d \n", i, extremePos);
	// 		if (extremePos != i) {
	// 			r[extremePos] = s[i];
	// 			r[i] = s[extremePos];
	// 			break;
	// 		}
	// 	}
	// 	return r;
	// }

	// string smallest() {
	// 	return swapForExtreme(less<int> ());
	// }

	// string largest() {
	// 	return swapForExtreme(greater<int> ());
	// }

	string swapForExtreme(function<bool(string, string)> cmp) {
		string r = s;
		FOR(i, 0, n-2) {
			FOR(j, i+1, n-1) {
				if (i == 0 && s[j] == '0')
					continue;
				string t = s;
				t[i] = s[j];
				t[j] = s[i];
				if (cmp(t, r))
					r = t;
			}
		}
		return r;
	}

	string smallest() {
		return swapForExtreme(less<string> ());
	}

	string largest() {
		return swapForExtreme(greater<string> ());
	}

	void solve() {

		printf("Case #%d: %s %s\n", caseI, smallest().c_str(), largest().c_str());



	}
};

void pre_process() {
	//freopen("A.in", "r", stdin);
	//freopen("A.out", "w", stdout);
	scanf("%d%*c", &caseD);
}

int main() {
	Qs *p = new Qs;
	pre_process();
	while ((++caseI|1) && caseD-- && p->input()) {
		p->solve();
		delete p;
		p = new Qs;
	}
	delete p;
	return 0;
}

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.Scanner;


public class CookingBooks {

    static int N, t;
    public static void main(String[] args) {
        Scanner scan;
        
        try {
            FileWriter fstream = new FileWriter("out.txt");
              BufferedWriter out = new BufferedWriter(fstream);
            scan = new Scanner(new File("input.txt"));

            t = Integer.parseInt(scan.nextLine());
            for (int i = 0; i<t; i++) {
                String s = scan.nextLine();
                
                if (s.length() == 1) {
                    out.write("Case #"+(i+1) + ": " + s + " " + s + "\n");
                    out.flush();
                    continue;
                }

                String min = s;
                String max = s;
                char[] digits = s.toCharArray();

                for (int j=0;j< s.length();j++) {
                    if (findSmallest(digits, j)) {
                        min = charArrayToString(digits);
                        break;
                    }
                }
                
                digits = s.toCharArray();
                for (int j=0;j< s.length();j++) {
                    if (findBiggest(digits, j)) {
                        max = charArrayToString(digits);
                        break;
                    }
                }
                out.write("Case #"+(i+1) + ": " + min + " " + max + "\n");
                out.flush();
            }
            
            out.close();

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    }

    static private boolean findSmallest(char[] digits, int ind) {

        int min = 11;
        int minIndex = -1;
        
        for (int i=digits.length - 1; i>ind;i--) {
            
            if (ind == 0 && digits[i] == '0') {
                continue;
            }
            
            if ((digits[i] - '0') < min) {
                min = digits[i] - '0';
                minIndex = i;
            }
        
        }
        if ((min != 11) && (min < (digits[ind] - '0')) ) {
            char tmp  = digits[ind];
            digits[ind] = (char)(min + '0');
            digits[minIndex] = tmp;
            return true;
        }
        return false;
        
    }
    
    static private boolean findBiggest(char[] digits, int ind) {
        int max = -1;
        int maxIndex = -1;
        
        
        for (int i=digits.length - 1; i>ind;i--) {
            
            if (ind == 0 && digits[i] == '0') {
                continue;
            }
            
            if ((digits[i] != '0') && ((digits[i] - '0') > max)) {
                max = digits[i] - '0';
                maxIndex = i;
            }
        }
        if ((max != -1) && (max > (digits[ind] - '0')) ) {
            char tmp  = digits[ind];
            digits[ind] = (char)(max + '0');
            digits[maxIndex] = tmp;
            return true;
        }
        return false;

    }
    
    static private String charArrayToString(char[] cArr) {
        String result = "";
        
        for (char c : cArr) {
            result += c;
        }
        
        return result;
    }
}

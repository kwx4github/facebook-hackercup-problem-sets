#include <iostream>
#include <algorithm>
#include <math.h>

using namespace std;

int numDigits(long long N){
	int num=0;
	while(N>0){
	  num++;
	  N=N/10;
	}
	return num;
}

void getDigits(long long N, long long *arr, int num){
	int i=num-1;
	while(N>0){
		arr[i]=N%10;
		N/=10;
		i--;
	}
}

long long getLeast(long long N){
	int i,j,k;
	long long *arr;
	long long min;
	int num=numDigits(N);
	if(num==1)
	  return N;
	arr=new long long[num];
	getDigits(N, arr, num);
	for(i=0;i<num;i++){
		min=i;
		for(j=i+1;j<num;j++){
		  if(i==0 && arr[j]==0)
		    continue;
		  if(min==i && arr[i]>arr[j])
		    min=j;
		  else if(min != i && arr[min]>=arr[j])
		    min=j;
		}
		swap(arr[i],arr[min]);
		if(min != i)
		  break;
	}
	N=arr[0];
	i=1;
	while(i<num){
		N=N*10+arr[i];
		i++;
	}
	return N;
}

long long getGreatest(long long N){
	int i,j,k;
	long long *arr;
	long long min;
	int num=numDigits(N);
	if(num==1)
	  return N;
	arr=new long long[num];
	getDigits(N, arr, num);
	for(i=0;i<num;i++){
		min=i;
		for(j=i+1;j<num;j++){
		  if(i==0 && arr[j]==0)
		    continue;
		  if(min==i && arr[i]<arr[j])
		    min=j;
		  else if(min != i && arr[min]<=arr[j])
		    min=j;
		}
		swap(arr[i],arr[min]);
		if(min != i)
		  break;
	}
	N=arr[0];
	i=1;
	while(i<num){
		N=N*10+arr[i];
		i++;
	}
	return N;
}


int main(){
	int i,j,T;
	long long N;
	cin>>T;
	for(i=0;i<T;i++){
	  cin>>N;
	  cout<<"Case #"<<i+1<<": ";
	  if(N==0)
	  {
	    cout<<0<<" "<<0<<"\n";
	  }
	  else
	  	cout<<getLeast(N)<<" "<<getGreatest(N)<<"\n";
	}
	return 0;
}
#include <iostream>
#include <cmath>
using namespace std;

long long int maxpos[10], minpos[10], maxans[100][10], minans[100][10];

long long int findDig(long long int a){
	long long int x = 10, count = 1;
	while(true){
		if(a/x == 0) return count;
		else{
			x = x*10;
			count++;
		}
	}
}

void fillInArr(long long int n, long long int *A, long long int num){
	long long int i, num1 = num;
	for(i = (n-1); i>=0; i--){
		A[i] = num1%10;
		num1 = (num1-A[i])/10;
	}
}

void assignMax(long long int *A, long long int n){
	long long int i,j,temp;
	for(i=0; i<n-1; i++){
		for(j=i+1; j<n; j++){
			if(maxpos[j]>maxpos[i]){
				temp = maxpos[j];
				maxpos[j] = maxpos[i];
				maxpos[i] = temp;
			}
		}
	}
}

void assignMin(long long int *A, long long int n){
	long long int i, j, temp;
	for(i=0; i<n-1; i++){
		for(j=i+1; j<n; j++){
			if(minpos[j]<minpos[i]){
				temp = minpos[j];
				minpos[j] = minpos[i];
				minpos[i] = temp;
			}
		}
	}
}

bool checkEqual(int c, long long int *B, long long int n){
	long long int i,count=0;
	if(c==1){
		for(i=0; i<n; i++){
			if(maxpos[i]==B[i]) count++;
		}
	}
	else {
		for(i=0; i<n; i++){
			if(minpos[i]==B[i]) count++;
		}
	}
	if(count==n)return true;
	return false;
}

void doEqual(int c, long long int n,long long int pos){
	long long int i;
	if(c==1) for(i=0; i<n; i++) maxans[pos][i] = maxpos[i];
	else if(c==0) for(i=0; i<n; i++) minans[pos][i] = minpos[i];
}

long long int tweak(long long int *A, long long int n, long long int dig){
	long long int count = n+1;
	for(long long int i=n; i<dig-1; i++) {
		if(A[i+1]+1 == A[i]) count++;
		else break;
	}
	if (count == dig) return -1;
	else{
		long long int min = n;
		for(long long int i=n; i<dig; i++) {
			if(A[i]<=A[min]) min = i;
		}
		return min;
	}
}

int main() {
	// your code goes here
	long long int t, i, j, k, l, temp=0, arr[10];
	cin>>t;
	long long int dig[t], n[t];
	for(i=0; i<t; i++){
		temp=0;
		cin >> n[i];
		if(n[i]!=0){
			dig[i] = findDig(n[i]);
			fillInArr(dig[i],arr,n[i]);
			for(int e=0;e<dig[i];e++){
				maxpos[e] = arr[e];
				minpos[e] = arr[e];
				maxans[i][e] = arr[e];
				minans[i][e] = arr[e];
			}
			assignMax(arr,dig[i]);
			assignMin(arr,dig[i]);
			bool a = (checkEqual(1,arr,dig[i]));
			bool b = (checkEqual(0,arr,dig[i]));
			if(a==true && arr[dig[i]-1]!=0) doEqual(0,dig[i],i);
			else if(a==true && arr[dig[i]-1]==0){}
			else if(b==true && arr[dig[i]-1]!=0) doEqual(1,dig[i],i);
			else if(b==true && arr[dig[i]-1]==0){}
			else{
				k=0, l= dig[i]-1;
				while(maxpos[k] == arr[k] && k<dig[i]-1) k++;
				while(maxpos[k] != arr[l] && l>=0) l--;
				maxans[i][k] = arr[l];
				maxans[i][l] = arr[k];
				A:
				k=0, l=0;
				if(temp!=0 && temp!=dig[i]){
					int z = temp-dig[i];
					while(minpos[z] == arr[k] && k<(dig[i]-z) && z<dig[i]-1){
						k++;
                        z++;
					}
					while(minpos[z] != arr[l] && l<dig[i]-1) l++;
					goto B;
				}
				while(minpos[k] == arr[k] && k<dig[i]-1) k++;
				while(minpos[k] != arr[l] && l<dig[i]-1) l++;
				temp = dig[i];
				if(arr[l]==0 && l!=dig[i]-1){
					while(arr[l]==0) l++;
					k=l;
					l--;
					int f=dig[i]-1;
					while(arr[f]!=0) f--;
					if(arr[1]!=0){
						k=1;
						l = f;
					}
					else{
						if(l!=f) l = f;
						else{
							l++;
							l = tweak(arr,l,dig[i]);
							if(l==-1) l=k;
						}
					}
					goto B;
				}
				else if(arr[dig[i]-1]==0){
					int p = 0;
					while(arr[dig[i]-1-p]==0) p++;
					dig[i] = dig[i]-p;
					if(temp!=dig[i]) goto A;
				}
				B:
				dig[i]=temp;
				minans[i][k] = arr[l];
				minans[i][l] = arr[k];
			}
		}
		else {
			dig[i] = 1;
			minans[i][0] = 0;
			maxans[i][0] = 0;
		}
	}
	for(i=0;i<t;i++){
		cout << "Case #"<<i+1<<": ";
		for(j=0;j<dig[i]; j++) cout<<minans[i][j];
		cout<<" ";
		for(j=0;j<dig[i]; j++) cout<<maxans[i][j];
		cout << endl;
	}
	return 0;
}



package acookingproblem;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ACookingProblem {
    
    public static void main(String[] args) {
        
        String inputFilepath = "Insert Input Filepath here";
        String outputFilepath = "Insert Output Filepath here";
                                
        Scanner in;
        try {
            in = new Scanner(new FileReader(inputFilepath));
            int testCaseQuantity = Integer.parseInt(in.nextLine());          
            PrintWriter writer = new PrintWriter(outputFilepath, "UTF-8");
            for (int i = 1; i <= testCaseQuantity; i++)
            {                
                String number = in.nextLine();                
                String greatest = findGreatest(number);
                String lowest = findLowest(number);
                String line = "Case #" + i + ": " + lowest + " " + greatest;
                System.out.println(line);
                writer.println(line);                
            }
            writer.close();
            
        } catch (FileNotFoundException ex) {} catch (UnsupportedEncodingException ex) {}                      
    }
    
    public static String findGreatest(String number)
    {        
        String greatest = number;
        int size = number.length();
        for (int k = 0; k < size; k++)
        {            
            int maxNumber = Integer.parseInt(number.substring(k,k+1));    
            int maxIndex = k;
            if (maxNumber != 0)
            {                
                for (int i = k+1; i < size; i++)
                {
                    int currentNumber = Integer.parseInt(number.substring(i, i+1));
                    if (currentNumber > maxNumber)
                    {                                
                        maxNumber = currentNumber;
                        maxIndex = i;                        
                    }
                }
                
                if (maxNumber != Integer.parseInt(number.substring(k, k + 1)))
                {
                    greatest = swapCharacters(greatest, k, maxIndex);
                    return greatest;
                }                                                    
            }
        }
        
        return greatest;
    }
    
    public static String findLowest(String number)
    {
        String lowest = number;
        int size = number.length();
        for (int k = 0; k < size; k++)
        {            
            int minNumber = Integer.parseInt(number.substring(k,k+1));    
            int minIndex = k;
            if (minNumber != 0)
            {                
                for (int i = k+1; i < size; i++)
                {
                    int currentNumber = Integer.parseInt(number.substring(i, i+1));
                    if (currentNumber < minNumber && currentNumber != 0)
                    {                                
                        minNumber = currentNumber;
                        minIndex = i;                        
                    }
                }
                
                if (minNumber != Integer.parseInt(number.substring(k, k + 1)))
                {
                    lowest = swapCharacters(lowest, k, minIndex);
                    return lowest;
                }                                                    
            }
        }
        
        return lowest;
        
    }
    
    public static String swapCharacters(String originalString, int i, int j)
    {
        char[] charArray = originalString.toCharArray();       
        char temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
        
        return String.valueOf(charArray);
    }        
}
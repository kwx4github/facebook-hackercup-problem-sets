package cw.hack15.r1

import cw.puzzle.util.PuzzleIO

class A_CookingBooks {
    static main(def args){
        PuzzleIO io = new PuzzleIO()
        def answers = []

        def input = io.read()
        def T = input.remove(0).toInteger()
        T.times {
            def intList = input.remove(0).toCharArray().collect { it.toString().toInteger()}
            def str = solve(intList)
            answers += str
        }

        io.write(answers)
    }

    static def solve(List<Integer> list) {
        def min, max
        def minVal = list.first()

        if (list.size() == 1){
            (min, max) = [minVal, minVal]
        } else {
            def minList = list.clone()
            min = swapMin(minList).join('')

            def maxList = list.clone()
            max = swapMax(maxList).join('')
        }

        return "$min $max"
    }

    private static List swapMin(List<Integer> list) {
        for (def i = 0; i < list.size() - 1; i++) {
            def curVal = list[i]
            for (def j = i + 1; j < list.size(); j++) {
                def tempVal = list[j]
                def canSwap = (i == 0 ? tempVal != 0 : true)
                def test = tempVal < curVal
                if (test && canSwap) {
                    list.set(i, tempVal)
                    list.set(j, curVal)
                    return list
                }
            }
        }
        return list
    }

    private static List swapMax(List<Integer> list) {
        def sortedList = new ArrayList<>(list).sort().reverse()
        for (def i = 0; i < list.size() - 1; i++) {
            def curVal = list[i]
            def tempVal = sortedList[i]

            def test = tempVal != curVal
            if (test) {
                int j = list.indexOf(tempVal)
                list.set(i, tempVal)
                list.set(j, curVal)
                return list
            }
        }
        return list
    }
}

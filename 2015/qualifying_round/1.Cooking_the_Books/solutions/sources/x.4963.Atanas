#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;

void calculate(ifstream *in, ofstream *out);
void numberToDigits(long long number, vector<char> *digits);
long long digitsToNumber(vector<char> *digits);
long long find(long long number, bool smallest);

#define SMALLEST(X) find((X), true)
#define LARGEST(X) find((X), false)

int main(int argc, char **argv)
{
    if (argc != 3)
    {
        return 1;
    }

    ifstream input(argv[1], ifstream::in);
    if (!input.is_open())
    {
        return 2;
    }

    ofstream output(argv[2], ofstream::out | ofstream::trunc);
    if (!output.is_open())
    {
        input.close();
        return 3;
    }

    calculate(&input, &output);

    input.close();
    output.close();

    return 0;
}

void calculate(ifstream *in, ofstream *out)
{
    int count;
    long long number;

    *in >> count;
    for (int i = 0; i < count; i++)
    {
        *in >> number;
        *out << "Case #" << i + 1 << ": " << SMALLEST(number) << " " << LARGEST(number) << '\n';
    }
}

void numberToDigits(long long number, vector<char> *digits)
{
    while (number > 0)
    {
        digits->push_back((char) (number % 10));
        number /= 10;
    }

    reverse(digits->begin(), digits->end());
}

long long digitsToNumber(vector<char> *digits)
{
    vector<char>::iterator it = digits->begin(), end = digits->end();
    long long number = *it;

    for (++it; it != end; it++)
    {
        number *= 10;
        number += *it;
    }

    return number;
}

long long find(long long number, bool smallest)
{
    if (number < 10 && number > -1)
    {
        return number;
    }

    int pos = 0;
    vector<char> digits;
    numberToDigits(number, &digits);
    int size = digits.size();

    if (smallest)
    {
        for (int i = 1; i < size; i++)
        {
            if (digits[i] <= digits[pos] && digits[i] != 0)
            {
                pos = i;
            }
        }
    }
    else
    {
        for (int i = 1; i < size; i++)
        {
            if (digits[i] >= digits[pos])
            {
                pos = i;
            }
        }
    }

    if (digits[0] != digits[pos])
    {
        char temp = digits[0];
        digits[0] = digits[pos];
        digits[pos] = temp;
    }

    return digitsToNumber(&digits);
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Facebook
{
    class CookingTheBooks
    {
        static int FindStartingIndex(char[] array)
        {
            int returnVal = -1;

            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array.Length; j++)
                {
                    if (i == j)
                        continue;

                    if (j > i && array[j] < array[i])
                    {
                        return i;
                    }
                }
            }

            return returnVal;
        }

        static int FindStartingBiggestIndex(char[] array)
        {
            int returnVal = -1;

            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array.Length; j++)
                {
                    if (i == j)
                        continue;

                    if (j > i && array[j] > array[i])
                    {
                        return i;
                    }
                }
            }

            return returnVal;
        }

        static bool IsSmallest(int index, int currVal, char[] array)
        {
            bool result = true;
            for (int i = index; i < array.Length; i++ )
            {
                int intChar = int.Parse(array[i].ToString());

                if (intChar < currVal)
                {
                    return false;
                }
            }

            return result;
        }

        static bool IsBiggest(int index, int currVal, char[] array)
        {
            bool result = true;
            for (int i = index; i < array.Length; i++)
            {
                int intChar = int.Parse(array[i].ToString());

                if (intChar > currVal)
                {
                    return false;
                }
            }

            return result;
        }

        static int CheckSpecial(char[] array)
        {
            int k = -1;
            int kVal = int.Parse(array[0].ToString());

            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array.Length; j++)
                {
                    if (i == j)
                        continue;

                    int val = int.Parse(array[j].ToString());

                    if (j > i && array[j] < array[i] && val > 0)
                    {
                        int specialK = int.Parse(array[j].ToString());
                        if (specialK < kVal)
                        {
                            kVal = specialK;
                            k = j;
                        }
                    }
                }
            }

            return k;
        }

        static string Smallest(string input)
        {
            string output;
            int intInput = int.Parse(input);

            if (intInput <= 10)
                return input;

            char[] array = input.ToArray();
            int index = 0, smallIndex = 0, bigIndex = -1, nextZeroIndex = -1;

            int startIndex = FindStartingIndex(array);

            if (startIndex == -1)
            {

            }
            else
            {
                foreach (char val in array)
                {
                    if (index >= startIndex)
                    {
                        int intChar = int.Parse(val.ToString());

                        if (IsSmallest(startIndex, intChar, array))
                        {
                            smallIndex = index;
                        }
                    }

                    index++;
                }

                // Console.WriteLine(array[smallIndex]);

                index = 0;

                foreach (char val in array)
                {
                    int intChar = int.Parse(val.ToString());
                    int smallChar = int.Parse(array[smallIndex].ToString());

                    if (intChar > smallChar)
                    {
                        if (smallChar == 0 && index == 0)
                        {
                            nextZeroIndex = CheckSpecial(array);

                            if (nextZeroIndex > -1)
                            {
                                int specialVal = int.Parse(array[nextZeroIndex].ToString());

                                if (specialVal < intChar)
                                {
                                    bigIndex = index;
                                    smallIndex = nextZeroIndex;
                                    break;
                                }                                
                            }
                        }
                        else
                        {
                            bigIndex = index;
                            break;
                        }
                    }

                    index++;
                }

                if (bigIndex > -1)
                {
                    if (bigIndex < smallIndex)
                    {
                        char temp = array[smallIndex];

                        array[smallIndex] = array[bigIndex];

                        array[bigIndex] = temp;
                    }
                    else
                    {

                    }
                }
            }

            output = new string(array);
            int outputVal = int.Parse(output);


            if (outputVal > intInput)
            {

            }

            
            return output;
        }

        static string Biggest(string input)
        {
            string output;
            int intInput = int.Parse(input);

            if (intInput <= 10)
                return input;

            char[] array = input.ToArray();
            int index = 0, smallIndex = 0, bigIndex = -1;

            int startIndex = FindStartingBiggestIndex(array);

            if (startIndex == -1)
            {

            }
            else
            {
                foreach (char val in array)
                {
                    if (index >= startIndex)
                    {
                        int intChar = int.Parse(val.ToString());
                                                
                        if (IsBiggest(startIndex, intChar, array))
                        {
                            smallIndex = index;
                        }
                    }

                    index++;
                }

                // Console.WriteLine(int.Parse(array[smallIndex].ToString()));

                index = 0;

                foreach (char val in array)
                {
                    int intChar = int.Parse(val.ToString());
                    int bigChar = int.Parse(array[smallIndex].ToString());

                    if (intChar < bigChar)
                    {
                        bigIndex = index;
                        break;
                    }

                    index++;
                }

                if (bigIndex > -1)
                {
                    char temp = array[smallIndex];

                    array[smallIndex] = array[bigIndex];

                    array[bigIndex] = temp;
                }
            }

            output = new string(array);

            int outputVal = int.Parse(output);


            if (outputVal < intInput)
            {

            }

            return output;
        }

        static void Main(string[] args)
        {
            int T = -1;
            int total = 0;
            string[] fileContents = File.ReadAllLines("input.txt");
            string[] fileOutContents = new string[fileContents.Length - 1];

            foreach(string nStr in fileContents)
            {
                T++;
                if (T == 0)
                {
                    total = int.Parse(nStr);
                    continue;
                }
                
                string caseOutput = "Case #" + T + ": ";

                caseOutput += Smallest(nStr);

                caseOutput += " ";

                caseOutput += Biggest(nStr);

                fileOutContents[T - 1] = caseOutput;
            }

            File.WriteAllLines("output.txt", fileOutContents);

            Console.WriteLine("Completed Total = {0} Processed = {1}", total, fileOutContents.Length);

            Console.ReadLine();
        }
    }
}

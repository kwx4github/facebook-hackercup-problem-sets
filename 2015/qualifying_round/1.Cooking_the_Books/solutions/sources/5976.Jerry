import string

inputFile = open('cooking_the_books.txt', 'r')
inputData = inputFile.read()

numCases  = string.split(inputData)[0]
cases     = string.split(inputData)[1:]

# This method is going to be slow, lazy, and easy to read / understand :P
def getPermutation(num, func):
  for index in xrange(len(num)-1): # first dig to swap
    if index == 0:
      nonZeroDig = filter(lambda x: x != '0', num[index+1:])
      if len(nonZeroDig) is 0:
        return num
      digToSwap  = func([int(x) for x in nonZeroDig])
    else:
      digToSwap  = func([int(x) for x in num[index+1:]])
    if int(num[index]) == func(int(num[index]), digToSwap):
      # bigger than all trailing digits, do nothing
      continue
    indexOfSwap = num.rfind(str(digToSwap))
    newNum = num[:index] + num[indexOfSwap] + num[index+1:indexOfSwap] + num[index] + num[indexOfSwap+1:]
    return newNum

  # The digits are in descending order, so no swap will increase the size
  return num

def computeMinPossible(num):
  return getPermutation(num, min)

def computeMaxPossible(num):
  return getPermutation(num, max)

def computeMaxMinPossible(num, index):
  maxResult = computeMaxPossible(num)
  minResult = computeMinPossible(num)
  return "Case #" + str(index) + ": " + minResult + " " + maxResult

for index in xrange(1, len(cases) + 1):
  number = cases[index-1]
  output = computeMaxMinPossible(number, index)
  print output

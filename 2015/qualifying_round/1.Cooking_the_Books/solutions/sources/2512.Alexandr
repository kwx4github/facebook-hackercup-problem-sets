// Facebook_Hacker_cup.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
#include <string>

using namespace std;

template <typename T>
T StringToNumber (const std::string& Text )
{
	std::istringstream ss(Text);
	T result;
	return ss >> result ? result : -1;
}

vector<string> InputToStringVector(const char* fileName)
{
	ifstream fileStream;
	fileStream.open(fileName);
	short lineNumber = 0;
	string sLineNumber;
	std::getline(fileStream, sLineNumber);
	
	if((lineNumber = StringToNumber<short>(sLineNumber)) == -1)
	{
		std::cerr<<"there's no cases";
		return vector<string>();
	}

	vector<string> result;
	result.reserve(lineNumber);
	string currString;
	for(short i = 0; i < lineNumber; ++i)
	{
		if(fileStream.eof())
		{
			std::cerr<<"wrong number of cases";
			return vector<string>();
		}
		std::getline(fileStream, currString);
		result.push_back(currString);
	}
	fileStream.close();
	return result;
}

void StringVectorToOutput(const vector<string>& output, const char* fileName)
{
	ofstream fileStream;
	fileStream.open(fileName, ofstream::out);
	for(size_t i = 0; i < output.size(); ++i) {
		fileStream << "Case #"<< (i + 1) << ": " << output[i] << '\n';
	}
	fileStream.close();
}

string getSwap(const string& input, size_t i, size_t j) {
	if(i == 0 && input[j] == '0')
		return input;
	string result = input;
	std::swap(result[i], result[j]);
	return result;
}

string getMin(const string& input) {
	string minimum = input;
	for (size_t i = 0; i < input.size(); ++i) {
		for(size_t j = i + 1; j < input.size(); ++j) {
			string current = getSwap(input, i, j);
			if (current < minimum)
				minimum = current;
		}
	}
	return minimum;
}

string getMax(const string& input) {
	string maximum = input;
	for (size_t i = 0; i < input.size(); ++i) {
		for(size_t j = i + 1; j < input.size(); ++j) {
			string current = getSwap(input, i, j);
			if (current > maximum)
				maximum = current;
		}
	}
	return maximum;
}

void algorithm(const vector<string>& input, vector<string>& output){
	output.clear();
	output.reserve(input.size());
	for (size_t i = 0; i < input.size(); ++i)
		output.push_back(getMin(input[i]) + " " + getMax(input[i]));
}




int _tmain(int argc, _TCHAR* argv[])
{
	vector<string> input = InputToStringVector("cooking_the_books.txt");
	vector<string> output;
	algorithm(input, output);
	StringVectorToOutput(output, "cooking_the_books_out.txt");
	return 0;
}


import Control.Monad
import Text.Printf
import Data.Function
import Control.Applicative
import Control.Arrow
import Data.List

main :: IO ()
main = do
    t <- readLn :: IO Int
    forM_ [1..t] $ \i -> do
        s <- getLine
        let (a,b) = solve s
        printf "Case #%d: %s %s\n" i a b

solve :: String -> (String,String)
solve s = (a,b) where
    f :: String -> Integer
    f = read
    a = minimumBy (compare `on` f) cands
    b = maximumBy (compare `on` f) cands
    cands = pure s <|> [ s' | s' <- swaps s, head s' /= '0' ]

swaps :: [a] -> [[a]]
swaps [] = empty
swaps (x:xs) = (x:) <$> swaps xs <|> (uncurry (:)) <$> sub xs where
    sub []     = empty
    sub (y:ys) = pure (y,x:ys) <|> second (y:) <$> sub ys


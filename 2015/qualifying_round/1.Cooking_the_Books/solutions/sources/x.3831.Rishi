import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader (new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for (int caseNum=1; caseNum<=T; caseNum++) {
			int N = Integer.parseInt(br.readLine());
			System.out.println("Case #"+ caseNum +": "+ getSmallest(N) + " " +getLargest(N));
		}
		br.close();
	}

	public static int getSmallest(int N) {
		if (N==0) return 0;
		int temp = N;
		int length = String.valueOf(N).length();
		int smallestdigit = 9;
		int smallestpos = 0;
		int digit=9;
		for (int i=0; i<length; i++) {
			digit = temp%10;
			temp = (int)temp/10;
			//Update smallestdigit
			if ((digit<=smallestdigit) && (digit>0)) {
				smallestdigit = digit;
				smallestpos = i;
			}
		}
		if (digit!=smallestdigit) {
			return swap(N,smallestpos);
		}
		else {
			return digit*(int)Math.pow(10,length-1)+getSmallest((int)N%(int)(Math.pow(10,length-1)));
		}
	}

	public static int getLargest(int N) {
		if (N==0) return 0;
		int temp = N;
		int length = String.valueOf(N).length();
		int largestdigit = 0;
		int largestpos = 0;
		int digit=9;
		for (int i=0; i<length; i++) {
			digit = temp%10;
			temp = (int)temp/10;
			//Update largestdigit
			if ((digit>largestdigit)) {
				largestdigit = digit;
				largestpos = i;
			}
		}
		if (digit!=largestdigit) {
			return swap(N,largestpos);
		}
		else {
			return digit*(int)Math.pow(10,length-1)+getLargest((int)N%(int)(Math.pow(10,length-1)));
		}
	}

	

	public static int swap(int number, int pos) {
		int length = String.valueOf(number).length();
		int firstdigit = (int)number/(int)(Math.pow(10,length-1));
		int temp = number%(int)(Math.pow(10,pos+1));
		int posdigit = (int)temp/(int)(Math.pow(10,pos));
		return number + (posdigit-firstdigit) * ((int)Math.pow(10,length-1))
		- (posdigit-firstdigit) * ((int)Math.pow(10,pos));
		
	}
}

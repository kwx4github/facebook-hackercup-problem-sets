import java.io.*;
import java.util.HashSet;
import java.util.InputMismatchException;

class Quall
{


    public static InputReader in = new InputReader();
    public static OutputWriter out = new OutputWriter();
    public static void main(String[] args)
    {
        Quall dec_1 = new Quall();
        dec_1.solve();
        out.flush();
        out.close();
    }
    public void solve() {
        int t = in.nextInt();
        int a[] = new int[10];
        for (int i = 0; i < t; i++) {
            int n = in.nextInt();
            int temp =n;
            int len =0;
            int largest=0,smallest=0;
            while(temp!=0){
                a[len] = temp %10;
                temp/=10;
                len++;
            }
            largest = n;
            smallest =n;

            for (int j = len-1; j >=0;j--) {
                int maxpos = max(a,0,j);
                if(a[j]==a[maxpos]){
                    continue;
                }
                else{
                    int tem = a[maxpos];
                    a[maxpos] =a[j];
                    a[j] = tem;
                    largest=0;
                    for (int k = len-1; k >=0; k--) {
                        largest =largest*10+a[k];
                    }
                    a[j] =a[maxpos];
                    a[maxpos] =tem;
                    break;
                }
            }
            for (int j = len-1; j >=0 ; j--) {
                int minpos = min(a,0,j);
                if(a[j]==a[minpos]||(j==len-1 && a[minpos]==0))
                    continue;
                else{
                    int tem = a[minpos];
                    a[minpos] =a[j];
                    a[j] = tem;
                    smallest=0;
                    for (int k = len-1; k >=0; k--) {
                        smallest =smallest*10+a[k];
                    }
                    break;
                }
            }

            out.println("Case #"+(i+1)+": "+smallest+" "+largest);
        }


    }

    public int max(int[]a,int i,int j){
        int max = -1;
        if(i==j)
            return i;
        int maxpos=0;
        for (int k = i; k <=j ; k++) {
            if(a[k]>max){
                max = a[k];
                maxpos  =k;
            }
        }
        return maxpos;
    }


    //1088 ,1100,1011
    public int min(int[]a,int i,int j){
        int min = 11;
        if(i==j)
            return i;

        int minpos= 0;
        for (int k = i; k <=j; k++) {
            if(a[k]<min){
                min = a[k];
                minpos = k;
            }
        }
        return minpos;
    }


    static class InputReader
    {
        private InputStream	inputStream;
        private byte[]		buf	= new byte[1024];
        private int			curChars;
        private int			numChars;

        public InputReader()
        {
            this(System.in);
        }

        public InputReader(InputStream iStream)
        {
            inputStream = iStream;
        }

        public int read()
        {
            if (numChars == -1) throw new InputMismatchException();
            if (curChars >= numChars) {
                curChars = 0;
                try {
                    numChars = inputStream.read(buf);
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
                if (numChars <= 0) return -1;
            }
            return buf[curChars++];
        }

        public String next()
        {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }

            StringBuilder builder = new StringBuilder();
            do {
                builder.appendCodePoint(c);
                c = read();
            }
            while (!isEndOfLine(c));
            return builder.toString();
        }

        public String nextLine()
        {
            int c = read();
            StringBuilder builder = new StringBuilder();
            while (!isEndOfLine(c)) {
                builder.appendCodePoint(c);
                c = read();
            };
            if (c == '\r') read();
            return builder.toString();
        }

        public String nextString()
        {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder builder = new StringBuilder();
            do {
                builder.appendCodePoint(c);
                c = read();
            }
            while (!isSpaceChar(c));
            return builder.toString();
        }

        public int nextInt()
        {
            int res = 0;
            int sgn = 1;
            int c = read();
            while (isSpaceChar(c))
                c = read();
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            do {
                if (c < '0' || c > '9') throw new InputMismatchException();
                res = res * 10 + (c - '0');
                c = read();
            }
            while (!isSpaceChar(c));
            return res * sgn;
        }

        public double nextDouble()
        {
            double ip = 0.0, dp = 0.0, res = 0.0, track = 1;
            int c = read();
            int sgn = 1;
            boolean dpDetect = false;
            while (isSpaceChar(c))
                c = read();
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            do {
                if (!((c >= '0' && c <= '9') || (c == '.' && !dpDetect)))
                    throw new InputMismatchException();
                if (!dpDetect) {
                    if (c == '.') dpDetect = true;
                    else ip = ip * 10 + (c - '0');
                }
                else {
                    dp = dp * 10 + (c - '0');
                    track *= 10;
                }
                c = read();
            }
            while (!isSpaceChar(c));
            res = (dp / track) + ip;
            return res * sgn;
        }

        public Long nextLong()
        {
            long res = 0;
            int sgn = 1;
            int c = read();
            while (isSpaceChar(c))
                c = read();
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            do {
                if (c < '0' || c > '9') throw new InputMismatchException();
                res = res * 10 + (c - '0');
                c = read();
            }
            while (!isSpaceChar(c));
            return res * sgn;
        }

        public boolean isSpaceChar(int c)
        {
            return c == ' ' || c == '\n' || c == '\t' || c == '\r' || c == -1;
        }

        public boolean isEndOfLine(int c)
        {
            return c == '\n' || c == '\r' || c == -1;
        }
    }

    static class OutputWriter
    {
        private PrintWriter	printWriter;

        public OutputWriter()
        {
            this(System.out);
        }

        public OutputWriter(OutputStream outputStream)
        {
            printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer)
        {
            printWriter = new PrintWriter(writer);
        }

        public void print(Object... objects)
        {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0) printWriter.print(' ');
                printWriter.print(objects[i]);
            }
        }

        public void println(Object... objects)
        {
            print(objects);
            printWriter.println();
        }

        public void close()
        {
            printWriter.close();
        }

        public void flush()
        {
            printWriter.flush();
        }

    }
}
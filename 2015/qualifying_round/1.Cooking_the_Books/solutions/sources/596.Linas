import scala.collection._

object A extends App {
  
  @inline def tokenizeLine = new java.util.StringTokenizer(readLine)
  def readInts(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toInt) }
  def readLongs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toLong) }
  def readBigs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(BigInt(tl.nextToken)) }

  def solve(test: Int): Unit = {

    val n = readLine
    var min, max = n
    
    for {
      i <- 0 until n.length
      j <- i + 1 until n.length
      if i > 0 || n(j) != '0'
    } {
      val m = n.toCharArray.clone
      m(i) = n(j)
      m(j) = n(i)
      val mm = m.mkString
      if (mm < min) min = mm
      if (mm > max) max = mm
    }
    
    println(s"Case #$test: $min $max")
  }

  Console.setIn(new java.io.BufferedInputStream(new java.io.FileInputStream("src/A/A.in")))
  Console.setOut(new java.io.BufferedOutputStream(new java.io.FileOutputStream("src/A/A.out")))
  for (test <- 1 to readInt) {
    solve(test)
    Console.flush
  }
}

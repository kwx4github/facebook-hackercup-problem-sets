def find_all_indices(needle, haystack):
    indices = []
    for i in range(len(haystack)):
        if haystack[i] == needle:
            indices.append(i)
    return indices

def swap_to_first(indices, input):
    for i in indices:
        ip = list(input)
        tmp = ip[0]
        ip[0] = ip[i]
        ip[i] = tmp
        yield ''.join(ip)

def find_min_for_search(input):
    if input == '0':
        return '0'
    return min(input.replace('0', ''))

def find_max_for_search(input):
    return max(input)


def min_max(input):
    test = str(input)
    minno = find_min_for_search(test)
    maxno = find_max_for_search(test)
    min_indices = find_all_indices(minno, test)
    max_indices = find_all_indices(maxno, test)
    return [min(swap_to_first(min_indices, test)), max(swap_to_first(max_indices, test))]

with open('out.txt', 'w') as fout:
    with open('cooking_the_books.txt', 'r') as f:
        n = -1
        lineno = -1
        for line in f:
            line = line.strip()
            if n == -1:
                n = int(line)
                lineno = 0
                continue
            lineno += 1
            if lineno > n:
                break
            result = min_max(line)
            #print 'Case #%d: %s %s' % (lineno, result[0], result[1])
            s = 'Case #%d: %s %s' % (lineno, result[0], result[1])
            fout.write(s + "\n")

'''
tests = ['31524', '897', '123', '10', '5']
for i in xrange(len(tests)):
    result = min_max(tests[i])
    print 'Case #%d: %s %s' % (i + 1, result[0], result[1])
'''

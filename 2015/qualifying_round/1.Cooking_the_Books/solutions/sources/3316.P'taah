import Data.List (span, sort)

main :: IO ()
main = interact solution

solution :: String -> String
solution input =
  let (t:ns) = lines input
      ins = take (read t) ns
  in unlines $ map (\(n, i) -> "Case #" ++ show i ++ ": " ++ solve n ++ " " ++ solve2 n) (zip ins [1..])

solve :: String -> String
solve "0" = "0"
solve n =
  let sorted = sort n
      (zs, (nz:nzs)) = span (== '0') sorted
      mm = nz : (zs ++ nzs)
      (prefix, s) = span (\(x, y) -> x == y) $ zip n mm
      l = fst (head s)
      rs = map snd s
      r = head $ if null prefix then filter (/= '0') rs else rs
      (r1, (_:r2)) = span (/= r) $ reverse (tail (map fst s))
      res = r : (reverse r2 ++ [l] ++ reverse r1)
  in map fst prefix ++ if null s then "" else res

solve2 :: String -> String
solve2 "0" = "0"
solve2 n =
  let sorted = reverse $ sort n
      (prefix, s) = span (\(x, y) -> x == y) $ zip n sorted
      l = fst (head s)
      rs = map snd s
      r = head $ if null prefix then filter (/= '0') rs else rs
      (r1, (_:r2)) = span (/= r) $ reverse (tail (map fst s))
      res = r : (reverse r2 ++ [l] ++ reverse r1)
  in map fst prefix ++ if null s then "" else res


def get_smallest_largest_digit(number)
  digits = number.split('').map {|d| d = d.to_i}
  largest = digits.max
  largest_indexes = digits.each_index.select {|i| digits[i] == largest}
  largest_swap_index = 0
  digits.each_with_index do |d, index|
    if d < largest or index == largest_indexes[-1]
      largest_swap_index = index
      break
    end
  end

  _digits = digits[0..-1]
  smallest = _digits.min
  smallest_indexes = digits.each_index.select {|i| digits[i] == smallest}
  if smallest > 0
    smallest_swap_index = 0
    digits.each_with_index do |d, index|
      if d > smallest or index == smallest_indexes[-1]
        smallest_swap_index = index
        break
      end
    end
  else
    _digits.map! {|d| d = d == 0 ? 99 : d }
    if _digits.min >= _digits[0]
      smallest_swap_index = 1
    else
      smallest = _digits.min
      smallest_indexes = digits.each_index.select {|i| digits[i] == smallest}
      smallest_swap_index = 0
      digits.each_with_index do |d, index|
        if d > smallest or index == smallest_indexes[0]
          smallest_swap_index = index
          break
        end
      end
    end
  end

  return digits, smallest, largest, smallest_indexes, largest_indexes, smallest_swap_index, largest_swap_index
end


def swap(v, si, i)
  t = v[si]
  v[si] = v[i]
  v[i] = t
  v
end


def solve_problem(number)

  digits, smallest, largest, smallest_indexes, largest_indexes, smallest_swap_index, largest_swap_index = get_smallest_largest_digit(number)
  puts [digits.to_s, smallest.to_s, largest.to_s, smallest_indexes.to_s, largest_indexes.to_s, smallest_swap_index.to_s, largest_swap_index.to_s].to_s, "\n\n"
  smallest_out = swap(digits[0..-1], smallest_swap_index, smallest_indexes[-1]).join('')
  largest_out = swap(digits[0..-1], largest_swap_index, largest_indexes[-1]).join('')
  return [smallest_out, largest_out]

end


def main()
  problems  = File.read('input.txt').split("\n")[1..-1]

  output = File.open('output.txt', 'w')

  problems.each_with_index do |problem, index|
    output.puts("Case ##{index + 1}: #{solve_problem(problem).join(' ')}")
  end
  output.close

end



main()

#include <iostream>
#include <limits>

using namespace std;

void swap(string &s, unsigned a, unsigned b)
{
    char temp = s[a];
    s[a] = s[b];
    s[b] = temp;
}

int main()
{
    //unsigned max_size = std::numeric_limits<unsigned>::max();
    //cout << max_size << endl;
    unsigned T;
    cin >> T;

    for (unsigned i = 1; i <= T; i++)
    {
        string N;
        cin >> N;
        
        string min = N;
        string max = N;

        char min_val = N[0];
        char min_nat_val = N[0];
        char max_val = N[0];

        // Get abs min/max first
        for (unsigned j = 1; j < N.size(); j++)
        {
            if (min_val > N[j])
                min_val = N[j];
            if (min_nat_val > N[j] && N[j] != '0')
                min_nat_val = N[j];
            if (max_val < N[j])
                max_val = N[j];
        }

        unsigned min_idx = 0;
        unsigned min_n_idx = 0;
        unsigned max_idx = 0;
        unsigned max_n_idx = 0;

        // Get smallest number
        for (unsigned j = 1; j < N.size(); j++)
        {
            if (N[min_idx] >= N[j])
                min_idx = j;
            if (N[min_n_idx] >= N[j] && N[j] != '0')
                min_n_idx = j;
            if (max_idx == 0 && N[max_idx] == min_nat_val && min_val == '0')
                max_idx = 1;
            else if (N[max_idx] == min_nat_val && min_val != '0')
                max_idx = j;
        }
        if (min_idx > max_idx && !(min_val == '0' && max_idx == 0))
            swap(min, min_idx, max_idx);
        else if (min_n_idx > max_idx)
            swap(min, min_n_idx, max_idx);

        min_idx = 0;
        min_n_idx = 0;
        max_idx = 0;
        max_n_idx = 0;

        // Get largest number
        for (unsigned j = 1; j < N.size(); j++)
        {
            if (N[max_idx] == max_val)
                max_idx = j;
            if (N[min_idx] <= N[j])
                min_idx = j;
        }
        if (max_idx < min_idx)
            swap(max, min_idx, max_idx);

        cout << "Case #" << i << ": " << min << " " << max << endl;
    }

    return 0;
}

import Control.Monad
import Data.List

isGood [] = True
isGood [_, _] = True
isGood (_ : (_ : (_ : _))) = False

validPermutations :: Int -> [Int]
validPermutations input =
  let inputStr = show input in
  map read . filter (isGood . filter id . map (\(a, b) -> a /= b) . zip inputStr) $ filter ((/= '0') . head) $ permutations inputStr

minMax :: Int -> (Int, Int)
minMax n =
  let p = validPermutations n in
  case p of
    [] -> (0, 0)
    _ -> (minimum p, maximum p)

solveCase test = do
  (mn, mx) <- fmap (minMax . read) getLine
  putStrLn $ "Case #" ++ show test ++ ": " ++ (show mn) ++ " " ++ (show mx)
  
main = do
  numTests <- fmap read getLine
  forM_ [1..numTests] $ \test -> do
    solveCase test

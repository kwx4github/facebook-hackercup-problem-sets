#include <iostream>
#include <string>
#include <queue>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include <map>
#include <cstdio>
#include <numeric>
#include <cstdlib>
#include <set>
#include <fstream>
#include <ctime>
#include <stack>
#include <cstring>
#include <sstream>
#include <ctype.h>
typedef long long ll;
typedef unsigned long long ull;
using namespace std;
#pragma comment(linker, "/STACK:16777216")
template<typename T> T fac(T a){ return a ? a*fac(a-1) : 1; }
template<typename T> T power(T a, int p){ return !p?1:(p&1?a*power(a, p-1):power(a*a,p>>1)); }
template<typename T> T gcd(T a, T b){ return b ? gcd(b, a%b) : a; }
template<typename T> T lcm(T a, T b){ return b / gcd(a, b) * a; }
template<typename T> T next(){ T _; cin >> _; return _; }
template<> int next<int>(){int _; scanf("%d", &_); return _; }
template<> double next<double>(){ double _; scanf("%lf", &_); return _; }
template<> ll next<ll>(){ ll _; scanf("%lld", &_); return _; }
template<> char next<char>(){char _[2]; scanf("%s", _); return _[0]; }
template<typename E> vector<E> next(int n){ vector<E> res(n); for(int i = 0; i < n; i++) res[i] = next<E>(); return res;}
template<class C, class E> int count(const C &c, const E &e){return count(c.begin(), c.end(), e);}
template<class C, class E> bool has(const C &c, const E &e){return find(c.begin(), c.end(), e) != c.end();}
template<class C, class E> int find(const C &c, const E &e){return find(c.begin(), c.end(), e) - c.begin();}
template<class E> bool binary_has(const vector<E> &c, const E &e){return binary_search(c.begin(), c.end(), e);}
template<class E> int binary_find(const vector<E> &c, const E &e){return lower_bound(c.begin(), c.end(), e) - c.begin();}
template<typename T> T dist2(T i1, T j1, T i2, T j2){return (i1-i2)*(i1-i2) + (j1-j2)*(j1-j2);}
template <typename T>T qpow(T a, T b, T p){T res=1;while(b)if(b&1)res=res*a%p,--b;else a=a*a%p,b>>=1;return res;}
inline bool ok(int i, int j, int n, int m){return 0<=i&&i<n&&0<=j&&j<m;}
inline bool ok(int i, int n){return 0<=i&&i<n;}

const double PI = acos(-1.0);
const double EPS = 1e-9;

template<typename T> inline bool LE(T a, T b){return a <= b;}
template<typename T> inline bool BE(T a, T b){return a >= b;}
template<typename T> inline bool EQ(T a, T b){return a == b;}
template<typename T> inline bool LESS(T a, T b){return a < b;}
template<typename T> inline bool BIGG(T a, T b){return a > b;}

template<> inline bool LE(double a, double b){return b-a > -EPS;}
template<> inline bool BE(double a, double b){return a-b > -EPS;}
template<> inline bool EQ(double a, double b){return fabs(a-b) < EPS;}
template<> inline bool LESS(double a, double b){return b-a > EPS;}
template<> inline bool BIGG(double a, double b){return a-b > EPS;}

template<typename T>struct complex
{
    T re, im;
    complex operator+(const complex &c){return complex{re+c.re, im+c.im};}
    complex operator-(const complex &c){return complex{re-c.re, im-c.im};}
    complex operator*(const complex &c){return complex{re*c.re - im*c.im, re*c.im + im*c.re};}
};

int main()
{
    freopen("/Users/ibra/Downloads/cooking_the_books.txt", "r", stdin);
    freopen("/Users/ibra/Downloads/cooking_the_books_out.txt", "w", stdout);
    int t = next<int>();
    for(int test = 1; test <= t; test++)
    {
        string s = next<string>();
        if(s == "0")
        {
            cout << "Case #" << test << ": 0 0" << endl;
            continue;
        }
        vector<string> vs;
        for(int i = 0; i < s.size(); i++)
        {
            for(int j = 0; j < s.size(); j++)
            {
                string t = s;
                swap(t[i], t[j]);
                if(t[0] != '0')
                    vs.push_back(t);
            }
        }
        cout << "Case #" << test << ": " << *min_element(vs.begin(), vs.end()) << " " << *max_element(vs.begin(), vs.end()) << endl;
    }
    
    
    
    return 0;
}
#include <bits/stdc++.h>
using namespace std ;

struct Solve {
    
vector< int > masks ;

Solve(){
    for ( int i = 0, mask = 1 ; i < 9 ; ++i ){
        masks.push_back( mask ) ;
        mask *= 10 ;
    }
}

void solveOne( ifstream &in, ofstream &out ){
    int n ; in >> n ;
    if ( n == 0 ){
        out << "0 0" ;
        return ;
    }
    int digitsCount = 0 ;
    for ( int nTemp = n ; nTemp > 0 ; nTemp /= 10 ){
        digitsCount += 1 ;
    }
    int nMax = n, nMin = n ;
    for ( int index1 = 0 ; index1 < digitsCount - 1 ; ++index1 ){
        for ( int index2 = index1 + 1 ; index2 < digitsCount ; ++index2 ){
            int digit1 = ( n / masks[ index1 ] ) % 10 ;
            int digit2 = ( n / masks[ index2 ] ) % 10 ;
            int nNew = n + ( digit2 - digit1 ) * masks[ index1 ] + ( digit1 - digit2 ) * masks[ index2 ] ;
            nMax = max( nMax, nNew ) ;
            if ( nNew >= masks[ digitsCount - 1 ] ){
                nMin = min( nMin, nNew ) ;
            }
        }
    }
    out << nMin << " " << nMax ;
}

void solveAll(){
    ifstream in( "C:\\data\\in.txt", ios::in ) ;
    ofstream out( "C:\\data\\out.txt", ios::out ) ;
    int tasksCount ; in >> tasksCount ;
    for ( int task = 1 ; task <= tasksCount ; ++task ){
        out << "Case #" << task << ": " ;
        solveOne( in, out ) ;
        out << endl ;
    }
}

} ;

int main(){ 
    Solve solve ;
   solve.solveAll() ;
   return 0 ;
}












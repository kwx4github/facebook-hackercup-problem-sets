import java.io.FileInputStream;
import java.util.Arrays;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("cooking.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("cooking.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Reader in = new Reader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		cooking solver = new cooking();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class cooking {
    char[] minimum(char[] n) {
        char[] res = n.clone();
        Arrays.sort(res);
        int i = 0;
        while (i < n.length && res[i] == '0') i++;
        if (i > 0 && i < n.length) {
            res[0] = res[i];
            res[i] = '0';
        }
        return res;
    }
    char[] maximum(char[] n) {
        char[] res = new char[n.length];
        char[] tm = n.clone();
        Arrays.sort(tm);
        for (int i = 0; i < n.length; i++) res[i] = tm[n.length - i - 1];
        return res;
    }
    String sol(char[] ao, char[] b) {
        char[] a = ao.clone();
        int i = 0;
        while (i < a.length && a[i] == b[i]) i++;
        if (i < a.length) {
            int j = a.length - 1;
            while (a[j] != b[i]) j--;
            char t = a[j]; a[j] = a[i]; a[i] = t;
        }
        StringBuffer sb = new StringBuffer();
        for (i = 0; i < a.length; i++) sb.append(a[i]);
        return sb.toString();
    }
    public void solve(int testNumber, Reader in, PrintWriter out) {
        char[] n = in.next().toCharArray();
        char[] minn = minimum(n);
        char[] maxn = maximum(n);
        out.printf("Case #%d: %s %s\n", testNumber, sol(n, minn), sol(n, maxn));
    }
}

class Reader {
    private BufferedReader in;
    private StringTokenizer st;
    public Reader(InputStream is) {
        in = new BufferedReader(new InputStreamReader(is));
    }
    public String next() {
        try {
            while (st == null || !st.hasMoreTokens()) {
                st = new StringTokenizer(in.readLine());
            }
            return st.nextToken();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}


from collections import Counter, defaultdict
from itertools import cycle, product as prod, permutations as perm, combinations as comb, combinations_with_replacement as combr
from sys import stdin, stdout
read_ints = lambda: map(int, raw_input().split())
read_floats = lambda: map(float, raw_input().split())

def conv_percent(v):
    return (int)(float(v) * 1000 + 0.5)

def main():
    t = read_ints()[0]
    for i in xrange(t):
        cas = i + 1
        num = raw_input().strip()
        min_ans = max_ans = int(num)
        for i in xrange(len(num)):
            for j in xrange(len(num)):
                tnum = list(num)
                tnum[i] = num[j]
                tnum[j] = num[i]
                tnum = ''.join(tnum)
                if len(num) > 1 and tnum.startswith('0'):
                    continue
                tnum = int(tnum)
                min_ans = min(min_ans, tnum)
                max_ans = max(max_ans, tnum)
        print "Case #%d: %s %s" % (cas,  min_ans, max_ans)

if __name__ == '__main__':
    main()

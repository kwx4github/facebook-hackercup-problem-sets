# require 'minitest/autorun'

# Convert the strings into an array of single digit integers
def int_array_for(number)
  number.each_char.map { |letter| Integer(letter) }
end

# Convert a number into the biggest possible from swapping two integers
# i.e., 31524 becomes 51324
def make_biggest(number)
  max_pos = number.each_with_index.max[1]
  number[0], number[max_pos] = number[max_pos], number[0]
  number
end

# Find the position of the smallest number in an array, unless that value is 0
def smallest_pos(arr)
  smallest = arr[0]
  smallest_pos = 0
  arr.each_with_index do |num, index|
    if num < smallest
      unless num == 0
        smallest = num
        smallest_pos = index
      end
    end
  end
  smallest_pos
end

# Convert a number into the smallest possible from swapping two integers
# i.e., 31524 becomes 13524
def make_smallest(number)
  min_pos = smallest_pos(number)
  number[0], number[min_pos] = number[min_pos], number[0]
  number
end

def parse_input(file)
  data = File.open(file, 'r').each_line.map { |line| line.gsub("\n", "") }
  data[1..-1].map { |number| int_array_for(number) }
end

def create_output(biggest, smallest)
  all = []
  biggest.each_with_index do |val, index|
    small_num = smallest[index].join("")
    big_num = biggest[index].join("")
    all << "Case ##{index+1}: #{small_num} #{big_num}\n"
  end
  all.join("")
end


def main
  numbers = parse_input('input.txt')
  smallest = numbers.map { |number| make_smallest(number.dup) }
  biggest = numbers.map { |number| make_biggest(number.dup) }
  output = create_output(biggest, smallest)
  puts output
end

main


# Test cases
# class BugTest < Minitest::Test
#   def test_cooked_books
#     numbers = parse_input('input.txt')
#     smallest = numbers.map { |number| make_smallest(number.dup) }
#     biggest = numbers.map { |number| make_biggest(number.dup) }

#     output = create_output(biggest, smallest)
#     puts output
#     assert_equal(output, correct_output)
#   end


#   def correct_output
#     <<-HERE
# Case #1: 13524 51324
# Case #2: 798 987
# Case #3: 123 321
# Case #4: 10 10
# Case #5: 5 5
#     HERE
#   end
# end

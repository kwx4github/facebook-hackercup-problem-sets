import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;


public class Cooking_the_Books {

	/**
	 * @param args
	 * @throws NumberFormatException, IOException, InterruptedException 
	 */
	private static int val_max =0;
	private static int val_min =0;
	public static void main(String[] args) throws NumberFormatException, IOException, InterruptedException {
		// TODO Auto-generated method stub
		
		FileInputStream fstream = new FileInputStream("cooking_the_books.txt");
		DataInputStream entrada = new DataInputStream(fstream);
	    BufferedReader buffer = new BufferedReader(new InputStreamReader(entrada));
	    
	   	int t = Integer.parseInt(buffer.readLine());
	   	
	    for (int i = 0; i < t; i++) {
	    	
	    	String n1=buffer.readLine();
	    	String n2=n1;
	    	StringBuffer n_1 = new StringBuffer(n1);
	    	StringBuffer n_2 = new StringBuffer(n2);
	    	Cooking_the_Books obj = new Cooking_the_Books();
	    	
	    	
	    	StringBuffer max = obj.Method_max(n_1);
	    	StringBuffer min = obj.Method_min(n_2,0);
	    	
	    	if(val_max!=1){
		    	while (n_1.substring(0, n_1.length()).equalsIgnoreCase(max.substring(0,max.length()))){
		    		max = obj.Method_max(max.deleteCharAt(0));
		    		max.replace(0, 0, (char)n_1.charAt(0)+"");
		    		
		    	}
	    	}
	    	if(val_min !=1){
		    	while (n_2.substring(0, n_2.length()).equalsIgnoreCase(min.substring(0,min.length()))){
		    		min = obj.Method_min(min.deleteCharAt(0),1);
		    		min.replace(0, 0, (char)n_2.charAt(0)+"");
		    	}
	    	}
			
			System.out.println("Case #"+(i+1)+": "+ min + " " +max);
			
			
		}
	            
	    entrada.close();

	}
	
	public StringBuffer Method_max (StringBuffer stringBuffer){
		int max=0;
		
	   	int y_max=0;
	   	val_max=0;
		int index_max=0;
		for (int j = 0; j < stringBuffer.length(); j++) {
			if(j!=0){
				if(max<=Integer.parseInt(""+(char)stringBuffer.charAt(j))){
					max=Integer.parseInt(""+(char)stringBuffer.charAt(j));
					index_max=j;
					
				}
			} else{
				max=Integer.parseInt(""+(char)stringBuffer.charAt(j));
				
			}
		}
		

		if(index_max != 0 && max==Integer.parseInt(""+(char)stringBuffer.charAt(0)) ){
			for (int j = 0; j < stringBuffer.length(); j++) {
				if(max==Integer.parseInt(""+(char)stringBuffer.charAt(j))){
					y_max++;
				}else{
					break;
				}
			}
			if(y_max == stringBuffer.length()){
				y_max=0;
				val_max=1;
			}
			
				
		}
		
		
		StringBuffer n_max = new StringBuffer(stringBuffer);
		
		
		if(stringBuffer.length()>2){
		
	
			
			
			int temp1 = n_max.charAt(y_max);
			n_max.deleteCharAt(y_max);
			if(index_max != 0){
				n_max.replace(y_max, y_max, (char)n_max.charAt(index_max-1)+"");
			}else{
				n_max.replace(y_max, y_max, (char)n_max.charAt(index_max)+"");
			}
			n_max.deleteCharAt(index_max);
			n_max.replace(index_max, index_max, (char)temp1+"");
		}else{
			val_max=1;
		}
		return n_max;
		
	}

	public StringBuffer Method_min (StringBuffer n, int w){
	
		int min=0;
		
		int y_min=0;
	   	val_min=0;
		int index_min=0;
		for (int j = 0; j < n.length(); j++) {
			if(j!=0){
				if(w==0){
					if(min>=Integer.parseInt(""+(char)n.charAt(j)) && Integer.parseInt(""+(char)n.charAt(j))!=0){
						min=Integer.parseInt(""+(char)n.charAt(j));
						index_min=j;
						
					}
				}else{
					if(min>=Integer.parseInt(""+(char)n.charAt(j))){
						min=Integer.parseInt(""+(char)n.charAt(j));
						index_min=j;
						
					}
				}
				
			} else{
				
				min=Integer.parseInt(""+(char)n.charAt(j));
				
			}
		}
		
		if(index_min != 0 && min==Integer.parseInt(""+(char)n.charAt(0))){
			for (int j = 0; j < n.length(); j++) {
				if(w==0 && Integer.parseInt(""+(char)n.charAt(j))==0){
					y_min++;
				}else if(min==Integer.parseInt(""+(char)n.charAt(j))){
					y_min++;
				}else{
					break;
				}
			}
			if(y_min == n.length()){
				y_min=0;
				val_min=1;
			}
				
		}
		
		
		StringBuffer n_min = new StringBuffer(n);
		
		
		if(n.length()>2){
		
			int temp = n_min.charAt(y_min);
			n_min.deleteCharAt(y_min);
			if(index_min != 0){
				n_min.replace(y_min, y_min, (char)n_min.charAt(index_min-1)+"");
			}else{
				n_min.replace(y_min, y_min, (char)n_min.charAt(index_min)+"");
			}
			n_min.deleteCharAt(index_min);
			n_min.replace(index_min, index_min, (char)temp+"");
			
		}else{
			val_min=1;
		}
		return n_min;
		
	}

}

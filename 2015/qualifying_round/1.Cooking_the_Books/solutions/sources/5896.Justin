import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;

public class CookingTheBooks {
  
  public static void main(String[] args) throws IOException {
    // TODO Auto-generated method stub
    File file = new File(args[0]);
    BufferedReader reader = new BufferedReader(new FileReader(file));
    String line = reader.readLine();
    
    File output = new File(
        "C:\\Users\\Justin\\Desktop\\FacebookHackerCup\\CookingTheBooksOutput.txt");
    PrintWriter writer = new PrintWriter(new FileWriter(output));
    while (line != null) {
      
      //System.out.println(line);
      int nums = Integer.parseInt(line);
      
      for (int i = 0; i < nums; i ++) {
        line = reader.readLine();
        System.out.println("line = " + line);
        
        String smallest = line;
        String largest = line;
              
        int length = line.length();
        
        if (length == 1) {
          System.out.println("Case #" + (i + 1) + ": " + smallest + " " + largest);
          writer.println("Case #" + (i + 1) + ": " + smallest + " " + largest);
        }
        
        else {
                  
//          int num = Integer.parseInt(line);
//          
//          int smallestNum = 10;
//          int largestNum = -1;
//          
//          ArrayList<Integer> smallestIndices = new ArrayList<>();
//          ArrayList<Integer> largestIndices = new ArrayList<>();
          
          int[] digits = new int[length];
                 
          for (int j = 0; j < length; j++) {
            digits[j] = Integer.parseInt(line.substring(j, j+1));
          }
          
          int[] sortedDigits = new int[digits.length];
          
          System.arraycopy(digits, 0, sortedDigits, 0, digits.length);
          
          Arrays.sort(sortedDigits);
          
//          int smallestDigit = sortedDigits[0];
//          int largestDigit = sortedDigits[digits.length - 1];
          
          for (int j = 0; j < length; j++) {
            if (hasGreater(digits[j], j, digits)) {
              int value = getGreatest(j, digits);
              System.out.println("Largest Value = " + value);
              ArrayList<Integer> indices = getIndices(value, j, digits);
              ArrayList<Integer> newCandidates = new ArrayList<Integer>();
              for (Integer number : indices) {
                String newNumber = "";
                int originalNumber = digits[j];
                int[] dummyDigits = new int[digits.length];              
                System.arraycopy(digits, 0, dummyDigits, 0, digits.length);
                dummyDigits[number] = originalNumber;
                dummyDigits[j] = value;
                for (int numb : dummyDigits) {
                  newNumber += numb;
                }
                newCandidates.add(Integer.parseInt(newNumber));
              }
              int largestCandidate = newCandidates.get(0);
              for (int k = 0; k < newCandidates.size(); k++) {
                if (newCandidates.get(k) > largestCandidate) 
                  largestCandidate = newCandidates.get(k);
              }
              largest = "" + largestCandidate;
              break;
            }
          } // end for
          
          if (hasSmallerNot0(digits[0], digits)) {
            int value = getSmallestNot0(digits);
            System.out.println("Smallest Value = " + value);
            ArrayList<Integer> indices = getIndices(value, 0, digits);
            ArrayList<Integer> newCandidates = new ArrayList<Integer>();
            for (Integer number : indices) {
              String newNumber = "";
              int originalNumber = digits[0];
              int[] dummyDigits = new int[digits.length];              
              System.arraycopy(digits, 0, dummyDigits, 0, digits.length);
              dummyDigits[number] = originalNumber;
              dummyDigits[0] = value;
              for (int numb : dummyDigits) {
                newNumber += numb;
              }
              newCandidates.add(Integer.parseInt(newNumber));
            }
            int smallestCandidate = newCandidates.get(0);
            for (int k = 0; k < newCandidates.size(); k++) {
              if (newCandidates.get(k) < smallestCandidate) 
                smallestCandidate = newCandidates.get(k);
            }
            smallest = "" + smallestCandidate;     
          }
          else {
            for (int j = 1; j < length; j++) {
              if (hasSmaller(digits[j], j, digits)) {
                int value = getSmallest(j, digits);
                System.out.println("Smallest Value = " + value);
                ArrayList<Integer> indices = getIndices(value, j, digits);
                ArrayList<Integer> newCandidates = new ArrayList<Integer>();
                for (Integer number : indices) {
                  String newNumber = "";
                  int originalNumber = digits[j];
                  int[] dummyDigits = new int[digits.length];              
                  System.arraycopy(digits, 0, dummyDigits, 0, digits.length);
                  dummyDigits[number] = originalNumber;
                  dummyDigits[j] = value;
                  for (int numb : dummyDigits) {
                    newNumber += numb;
                  }
                  newCandidates.add(Integer.parseInt(newNumber));
                }
                int smallestCandidate = newCandidates.get(0);
                for (int k = 0; k < newCandidates.size(); k++) {
                  if (newCandidates.get(k) < smallestCandidate) 
                    smallestCandidate = newCandidates.get(k);
                }
                smallest = "" + smallestCandidate;
                break;
              }
            }
          }
          
          System.out.println("Case #" + (i + 1) + ": " + smallest + " " + largest);
          writer.println("Case #" + (i + 1) + ": " + smallest + " " + largest);
          
        }
      }

      line = reader.readLine();
    }
    writer.close();
  }
  
  public static boolean hasGreater(int value, int index, int[] array) {
    for (int i = index; i < array.length; i++) {
      if (array[i] > value) return true;
    }
    return false;
  }
  
  public static int getGreatest(int index, int[] array) {
    int greatest = array[index];
    for (int i = index + 1; i < array.length; i++) {
      if (array[i] > greatest) greatest = array[i];
    }
    return greatest;   
  }
  
  public static boolean hasSmaller(int value, int index, int[] array) {
    for (int i = index; i < array.length; i++) {
      if (array[i] < value) return true;
    }
    return false;
  }
  
  public static int getSmallest(int index, int[] array) {
    int smallest = array[index];
    for (int i = index + 1; i < array.length; i++) {
      if (array[i] < smallest) smallest = array[i];
    }
    return smallest;   
  }
  
  public static boolean hasSmallerNot0(int value, int[] array) {
    for (int i = 1; i < array.length; i++) {
      if (array[i] < value && array[i] != 0) return true;
    }
    return false;
  }
  
  public static int getSmallestNot0(int[] array) {
    int smallest = array[0];
    for (int i =  1; i < array.length; i++) {
      if (array[i] < smallest && array[i] != 0) smallest = array[i];
    }
    return smallest;   
  }
  
  public static ArrayList<Integer> getIndices(int value, int index, int[] array) {
    ArrayList<Integer> indices = new ArrayList<>();
    for (int i = index; i < array.length; i++) {
      if (array[i] == value) indices.add(i);  
    }
    return indices;
  }
  
}
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


public class CookingTheBooks {

	public static void main(String[] args) throws FileNotFoundException {
		Scanner s = null;

        try {
            s = new Scanner(new BufferedReader(new FileReader("test.txt")));

            int testCases = Integer.parseInt(s.nextLine());
            

            
            for (int i = 0; i < testCases; i++) {
            	

            	int numberToCook = s.nextInt();
            	
            	String temp = Integer.toString(numberToCook);

            	 int highestPossibleNumber = findHighestNumber(temp.toCharArray());
//            	 System.out.println(highestPossibleNumber);
            	 
            	 int lowestPossibleNumber = findLowestNumber( temp.toCharArray());
//            	 System.out.println("LOWEST: " + numberToCook + " => " + lowestPossibleNumber);
            	 // 
            	 
            	 System.out.println("Case #" +(i+1) +  ": " + lowestPossibleNumber + " " + highestPossibleNumber);
            	
            		
            }
        } finally {
            if (s != null) {
                s.close();
            }
        }

	}

	private static int findLowestNumber(char[] numberToCookArray) {
		int lowestNumberInArrayIndex = 0;
		
		for (int i = numberToCookArray.length-1; i >= 0; i--) {
			
			if (numberToCookArray[i] < numberToCookArray[lowestNumberInArrayIndex]) {
				lowestNumberInArrayIndex = i;
			}
		}
		
//		String originalNumber = new String(numberToCookArray);
//		System.out.println(originalNumber + " lowest number in array is " + numberToCookArray[lowestNumberInArrayIndex] + " at index " + lowestNumberInArrayIndex);

		for (int i = 0; i < lowestNumberInArrayIndex; i ++) {

			if ( numberToCookArray[lowestNumberInArrayIndex] < numberToCookArray[i] ) {
				
				if (i == 0 && numberToCookArray[lowestNumberInArrayIndex]  == '0') {
					;
				}
				else {
					//swap
//					System.out.println("swapping numbers " + numberToCookArray[lowestNumberInArrayIndex] + " " + numberToCookArray[i]);
					char temp = numberToCookArray[lowestNumberInArrayIndex];
					numberToCookArray[lowestNumberInArrayIndex] = numberToCookArray[i];
					numberToCookArray[i] = temp;
					break;
				}
			}			
		}
		
		String newNumber = new String(numberToCookArray);
//		System.out.println(newNumber);
		return Integer.parseInt(newNumber);

		
	}

	private static int findHighestNumber(char[] numberToCookArray) {

		int lowestNumberInArrayIndex = 0;
		
		for (int i = numberToCookArray.length-1; i >= 0; i--) {
			
			if (numberToCookArray[i] > numberToCookArray[lowestNumberInArrayIndex]) {
				lowestNumberInArrayIndex = i;
			}
		}
		
		String originalNumber = new String(numberToCookArray);
//		System.out.println(originalNumber + " highest number in array is " + numberToCookArray[lowestNumberInArrayIndex] + " at index " + lowestNumberInArrayIndex);

		for (int i = 0; i < lowestNumberInArrayIndex; i ++) {

			if ( numberToCookArray[lowestNumberInArrayIndex] > numberToCookArray[i] ) {
				
//				if (i == 0 && numberToCookArray[lowestNumberInArrayIndex]  == '0') {
//					;
//				}
//				else {
					//swap
//					System.out.println("swapping numbers " + numberToCookArray[lowestNumberInArrayIndex] + " " + numberToCookArray[i]);
					char temp = numberToCookArray[lowestNumberInArrayIndex];
					numberToCookArray[lowestNumberInArrayIndex] = numberToCookArray[i];
					numberToCookArray[i] = temp;
					break;
//				}
			}			
		}
		
		String newNumber = new String(numberToCookArray);
//		System.out.println(newNumber);
		return Integer.parseInt(newNumber);


	}

}

#include <cstdio>
#include <iostream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <complex>
#define pb push_back
#define mp make_pair
#define esp 1e-6
#define Esp 1e-14
#define lson   l, m, rt<<1
#define rson   m+1, r, rt<<1|1
#define sz(x) ((int)((x).size()))
#define pf(x) ((x)*(x))
#define pb push_back
#define pi acos(-1.0)
#define in freopen("solve_in.txt", "r", stdin);
#define out freopen("solve_out.txt", "w", stdout);

#define bug(x) cerr << "Line : " << (x) <<  " >>>>>>\n";
#define TL cerr << "Time elapsed: " << (double)clock() / CLOCKS_PER_SEC * 1000 << " ms" << endl;
#define inf 0x0f0f0f0f

using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef map<LL, int> MPS;
typedef pair<int, int> PII;
typedef MPS::iterator IT;
const int maxn = 20;
int dig[maxn];
int len;
int getDig(int n){
    len = 0;
    memset(dig, 0, sizeof dig);
    while(n){
        dig[len++] = n%10;
        n /= 10;
    }
    if(len == 0)
        len++;
    return len;
}
int pw[10];
void pre(){
    pw[0] = 1;
    for(int i = 1; i < 10; i++)
        pw[i] = pw[i-1]*10;
}
int n;

int getAns(int x, int y){
    if(dig[x] == 0 && y == len-1)
        return -1;
////    cout << x << y << endl;
    return 0LL+n+(1LL*dig[y]*pw[x]-1LL*dig[x]*pw[x])+(1LL*dig[x]*pw[y]-1LL*dig[y]*pw[y]);
}
int main(){
//    in
//    out
    int T;
    pre();
    for(int t = scanf("%d", &T); t <= T; t++){
        printf("Case #%d: ", t);
        scanf("%d", &n);
        len = getDig(n);
        if(len <= 1)
           printf("%d %d\n", n, n);
        else{
            int mx = n, mi = n;
            for(int i = 0; i < len; i++)
            for(int j = i+1; j < len; j++){
                int tmp = getAns(i, j);
                if(tmp == -1) continue;
                mx = max(mx, tmp);
                mi = min(mi, tmp);
            }
            printf("%d %d\n", mi, mx);
        }
    }
    return 0;
}

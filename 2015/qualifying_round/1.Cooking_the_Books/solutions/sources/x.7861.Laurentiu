#include<fstream>
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

void print(int x) {
  cout << x << '\n';
}

void printVector(const vector<int>& x){
  for(int i = 0; i < x.size(); ++i) {
    cout << x[i];
  }
  cout << '\n';
}

long long swapDigits(long long N) {
  vector<int> digits;
  //  cout << "N:"; print(N);
  while(N) {
    digits.push_back(N % 10);
    N /= 10;
  }
  int len = digits.size();
  bool isSwapped = false;

  //  cout << "len:"; print(len);
  
  for(int i = len - 1; i >= 0 && !isSwapped; --i) {
    //    cout << "before:"; printVector(digits);
    int maxDigit = digits[i];
    int maxPosition = i;
    for(int j = i; j >=0; --j) {
      if(maxDigit <= digits[j]) {
	maxDigit = digits[j];
	maxPosition = j;
      }
    }
    //    cout << "maxDigit:"; print(maxDigit);
    //    cout << "maxPosition:"; print(maxPosition);
    
    if(maxDigit > digits[i]) {
      swap(digits[i], digits[maxPosition]);
      isSwapped = true;
    }
    //    cout << "after:"; printVector(digits);
  }

  long long retNum = 0;
  
  for(int i = len - 1; i >= 0; --i) {
    retNum = (retNum * 10) + digits[i];
  }

  digits.empty();
  return retNum;
}

int main(int argc, char** argv) {
  ifstream inFile(argv[1]);
  ofstream outFile(argv[2]);
  int T; inFile >> T;
  for(int k = 0; k < T; ++k) {
    long long N; inFile >> N;
    long long maxNumber = swapDigits(N);
    outFile << "Case #" << k + 1 << ": "
	    << N << " " << maxNumber << '\n';
  }
  return 0;
}

#include<iostream>
#include<cstdio>
#include<algorithm>

using namespace std;

long long int digit[20];

long long int small(long long int len)
{
	int pos;
	long long int ind;
	bool sw = false;
	for(pos = len-1; pos >= 1; pos--){
		ind = 100;
		long long int minima = digit[pos];
		for(int p = pos-1; p >= 0; p--){
			if(digit[p] < minima){
				if(digit[p] != 0 || pos < len-1){
					minima = digit[p];
					ind = p;
				}
			}
		}
		if(ind < 100){
			swap(digit[pos], digit[ind]);
			sw = true;
			break;
		}
	}
	long long int num = 0, mp;
	for(int i = 0, mp = 1; i < len; i++, mp *= 10){
		num += mp*digit[i];
	}
	if(sw) swap(digit[pos], digit[ind]);
	return num;
}

long long int large(long long int len)
{
	for(int pos = len-1; pos >= 1; pos--){
		long long int ind = 100;
		long long int maxima = digit[pos];
		for(int p = pos-1; p >= 0; p--){
			if(digit[p] > maxima){
				maxima = digit[p];
				ind = p;
			}
		}
		if(ind < 100){
			swap(digit[pos], digit[ind]);
			break;
		}
	}
	long long int num = 0, mp;
	for(int i = 0, mp = 1; i < len; i++, mp *= 10){
		num += mp*digit[i];
	}
	return num;	
}

int main(){
	long long int T;
	cin>>T;
	for(int i = 1; i <= T; i++){
		long long int N;
		cin>>N;
		long long int len;
		long long int Ncopy = N;
		for(len = 0; Ncopy > 0; len++, Ncopy/=10){
			digit[len] = Ncopy%10;
		}
		if(len <= 1) printf("Case #%d: %lld %lld\n", i, N, N);
		else printf("Case #%d: %lld %lld\n", i, small(len), large(len));
	}
	return 0;
}


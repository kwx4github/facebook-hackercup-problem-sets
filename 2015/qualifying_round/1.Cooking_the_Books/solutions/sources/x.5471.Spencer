#!/usr/bin/env ruby

def improve_number!(num)
  candidate = num

  0.upto(num.length-2) do |start|
    (start+1).upto(num.length-1) do |finish|
      if yield(num, start, finish, candidate)
        candidate = swap(num, start, finish)
      end
    end

    return candidate if candidate != num
  end

  num
end

def small_swap?(num, i, j, curr)
  new = swap(num, i, j)
  (num[j].to_i != 0) &&
    (curr.nil? || (new.to_i < curr.to_i))
end

def large_swap?(num, i, j, curr)
  new = swap(num, i, j)

  (num[j].to_i != 0) &&
    (curr.nil? || (new.to_i > curr.to_i))
end

def swap(num, i, j)
  num = num.dup
  temp = num[i]
  num[i] = num[j]
  num[j] = temp

  num
end

def cook(filename)
  inputs = File.read(filename).each_line.map { |n| n.strip! }
  total = inputs.shift.to_i
  numbers = inputs

  output = File.open('my_out.txt', 'w+')

  1.upto(total) do |i|
    num = numbers[i-1]
    smallest = improve_number!(num.dup) { |n, s, f, c| small_swap?(n, s, f, c) }
    largest  = improve_number!(num.dup) { |n, s, f, c| large_swap?(n, s, f, c) }

    output.write("Case ##{i}: #{smallest} #{largest}\n")
  end
end

cook(ARGV[0])

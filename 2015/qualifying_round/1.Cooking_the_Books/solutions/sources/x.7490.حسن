import std.stdio;
import std.conv;
import std.string;
import std.algorithm;
import std.array;
import std.range;

int main(string[] args)
{
	int T = readln.strip.to!int;
	foreach(i; 0 .. T)
	{
		char[] entry = readln.strip.dup;
		int[] digits = entry.map!(x => x.to!(string).to!int).array;
		auto N = entry.to!int;
		int min = N, max = N;
		computeLimits(digits, min, max);
		writefln("Case #%d: %d %d", i + 1, min, max);
	}

	return 0;
}

void computeLimits(int[] digits, ref int min, ref int max)
{
	int[] original = digits.dup;
	foreach(i; 0 .. digits.length)
	{
		foreach(j; 0 .. digits.length)
		{
			if(i == j)
				continue;
			
			swap(digits[i], digits[j]);
			if(digits[0] == 0)
				continue;

			auto N = buildInt(digits);
			if(N < min)
				min = N;
			if(N > max)
				max = N;

			digits = original.dup;
		}
	}
}

int buildInt(int[] digits)
{
	int N;
	foreach(i, digit; digits.retro.array)
		N += digit * 10 ^^ i;
	return N;
}

unittest
{
	static assert(buildInt([1, 2, 3, 4]) == 1234);
	static assert(buildInt([7, 1, 2]) == 712);
	static assert(buildInt([5]) == 5);
	static assert(buildInt([1, 0]) == 10);
	static assert(buildInt([0, 2]) == 2);
}

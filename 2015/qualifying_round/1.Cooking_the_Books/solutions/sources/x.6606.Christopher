import sys

def do_swap(N, do_max=True):
    # make sure we have str here
    N = str(N)
    # No swap possible
    if len(N) <= 1:
        return N

    # Can't swap if we've make it to the last char
    for i in range(len(N) - 1):
        current = int(N[i])
        max_next = int(current)
        max_ind = i
        # we want the subsequent digit larger than the current one
        for j in range(i + 1, len(N)):
            # and we want the last time it occurs to maximize the impact
            comp = int(N[j]) >= max_next if do_max else int(N[j]) <= max_next
            if comp:
                max_next = int(N[j])
                max_ind = j

        if i == 0 and int(max_next) == 0:
            continue
        else:
            comp = max_next > current if do_max else max_next < current
            if comp:
                N = N[:i] + str(max_next) + N[i+1:max_ind] + str(current) + N[max_ind+1:]
                break

    return N

def get_both_cases(N):
    max_swap = do_swap(N, do_max=True)
    min_swap = do_swap(N, do_max=False)

    return min_swap, max_swap

def main(input_file):
    with open(input_file) as f:
        T = int(f.readline().strip())
        N_list = []
        for i in range(T):
            N_list.append(f.readline().strip())

    results = []
    for i, N in enumerate(N_list):
         results.append((i, get_both_cases(N)))

    with open('output.txt', 'w') as f:
        for result in results:
            i, n = result
            min_n, max_n = n
            f.write('Case #{}: {} {}\n'.format(i + 1, min_n, max_n))

if __name__ == '__main__':
    main(sys.argv[1])

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class QualA implements Runnable {
    int[] p = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};
    public void run() {
        int test = nextInt();
        for (int testCase = 1; testCase <= test; ++testCase) {
            int val = nextInt();


            ArrayList<Integer> ans = new ArrayList<Integer>();
            for (int i = 0; i < digitCnt(val); ++i) {
                for (int j = i; j < digitCnt(val); ++j) {
                    int swapRes = swap(val, i, j);
                    if (digitCnt(val) == digitCnt(swapRes)) {
                        ans.add(swapRes);
                    }
                }
            }
            Collections.sort(ans);
            out.println("Case #"+testCase+": "+ans.get(0) + " " + ans.get(ans.size()-1));
        }
        out.flush();
    }

    private int swap(int val, int i, int j) {
        int ith = (val/p[i])%10;
        int jth = (val/p[j])%10;
        return val - ith*p[i] - jth*p[j] + ith*p[j] + jth*p[i];
    }

    private int digitCnt(int val) {
        int digitCnt = 1;

        int tmpVal = val;
        while (tmpVal / 10 != 0) {
            ++digitCnt;
            tmpVal /= 10;
        }
        return digitCnt;
    }

    private static BufferedReader br;
    private static StringTokenizer stk;
    private static PrintWriter out;
    public static void main(String[] args) throws FileNotFoundException {
        out = new PrintWriter("Aout.txt");
        br = new BufferedReader(new InputStreamReader(new FileInputStream("A.txt")));
        (new QualA()).run();
    }

    public void loadLine() {
        try {
            stk = new StringTokenizer(br.readLine());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String nextLine() {
        try {
            return br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public int nextInt() {
        while (stk == null || !stk.hasMoreElements()) loadLine();
        return Integer.parseInt(stk.nextToken());
    }
    public long nextLong() {
        while (stk == null || !stk.hasMoreElements()) loadLine();
        return Long.parseLong(stk.nextToken());
    }


}

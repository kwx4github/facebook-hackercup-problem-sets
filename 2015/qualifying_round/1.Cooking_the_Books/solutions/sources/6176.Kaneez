#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

void swap(vector<int> &V, int Ind, int Ind2)
{
  int temp=V[Ind];
  V[Ind]=V[Ind2];
  V[Ind2]=temp;
}

void intToVec(long long x, vector<int> &V)
{
 while(x>0)
 {
   V.push_back(x%10);
   x=x/10;
 }
}

long long vecToInd(vector<int> &V)
{
 long long x=0;
 long long p=1;
 for(int i=0;i<V.size();i++)
 {
  x=x+V[i]*p;
  p=p*10;
 }
 return x;
}

/*void findMinMaxIndex(vector<int> &V, int &minInd, int &maxInd)
{
 minInd=0,maxInd=0;
 int min=10, max=-1;
 for(int i=0;i<V.size();i++)
 {
  if(V[i]>max) 
  {
    max=V[i];
    maxInd=i;
  }
  if((V[i]<min) && (V[i]!=0))
  {
    min=V[i];
    minInd=i;
  }
 }
 if(min==10)
  minInd=V.size()-1;
}*/

void findMinMaxIndex(vector<int> &V, long long &minx, long long &maxx)
{
 vector<int> V2(V.size());
 copy(V.begin(),V.end(),V2.begin());
 int minInd, maxInd;
 for(int i=V.size()-1;i>=0;i--)
 {
  int min=V[i];
  for(int j=i-1;j>=0;j--) 
  {
    if((V[j]<=min) && ((V[j]!=0)|| (i!=(V.size()-1))))
    {
      min=V[j];
      minInd=j;
    }
  }
  if(min!=V[i])
  {
    swap(V,i,minInd);
    break;
  }  
 }
 
 for(int i=V2.size()-1;i>=0;i--)
 {
  int max=V2[i];
  for(int j=i-1;j>=0;j--) 
  {
    if((V2[j]>=max) && ((V2[j]!=0)|| (i!=(V2.size()-1))))
    {
      max=V2[j];
      maxInd=j;
    }
  }
  if(max!=V2[i])
  {
    swap(V2,i,maxInd);
    break;
  }
 }  
 minx=vecToInd(V); 
 maxx=vecToInd(V2);
}

void getMinMax(long long x, long long &minx, long long &maxx)
{
 if(x==0)
 {
  minx=0;
  maxx=0;
  return;
 }
 vector<int> V;
 intToVec(x,V);
 findMinMaxIndex(V,minx,maxx);
}

main() {
 long long minx;
 long long maxx;
 long long N;
 int T;
 cin>>T;
 for (int i=0;i<T;i++)
 {
  cin>>N;
  getMinMax(N,minx,maxx);
  cout<<"Case #"<<i+1<<": "<<minx<<" "<<maxx<<endl;
 }
}

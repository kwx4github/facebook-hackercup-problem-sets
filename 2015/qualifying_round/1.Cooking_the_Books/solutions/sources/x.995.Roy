using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestCode
{
    public static class Case1
    {
        public static void Solve(string inputFile, string outputFile)
        {
            using (var reader = new StreamReader(File.OpenRead(inputFile)))
            {
                using (var writer = new StreamWriter(outputFile))
                {
                    int numCases = Int32.Parse(reader.ReadLine());

                    for (int i = 1; i <= numCases; i++)
                    {
                        string input = reader.ReadLine();

                        writer.WriteLine("Case #{0}: {1} {2}", i, GetSmallest(input), GetLargest(input));
                    }
                }
            }
        }

        private static string GetSmallest(string input)
        {
            if (input == "0")
                return "0";

            var chars = input.ToCharArray();
            
            for (int charToSwap = 0; charToSwap < chars.Length - 1; charToSwap++)
            {
                var minCharIndex = charToSwap;

                for (int i = charToSwap + 1; i < chars.Length; i++)
                {
                    if (chars[minCharIndex] > chars[i] && (charToSwap > 0 || chars[i] > '0'))
                        minCharIndex = i;
                }

                if (minCharIndex != charToSwap)
                {
                    char temp = chars[minCharIndex];
                    chars[minCharIndex] = chars[charToSwap];
                    chars[charToSwap] = temp;
                    break;
                }
            }
            

            return new string(chars);
        }

        private static string GetLargest(string input)
        {
            if (input == "0")
                return "0";

            if (input == "0")
                return "0";

            var chars = input.ToCharArray();

            for (int charToSwap = 0; charToSwap < chars.Length - 1; charToSwap++)
            {
                var maxCharIndex = charToSwap;

                for (int i = charToSwap + 1; i < chars.Length; i++)
                {
                    if (chars[maxCharIndex] < chars[i])
                        maxCharIndex = i;
                }

                if (maxCharIndex != charToSwap)
                {
                    char temp = chars[maxCharIndex];
                    chars[maxCharIndex] = chars[charToSwap];
                    chars[charToSwap] = temp;
                    break;
                }
            }

            return new string(chars);
        }
    }
}

package hackercup.qual2015.cookingbooks;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {

    static String BASE = "/Users/chandangiri/contest/src/main/java/hackercup/qual2015/cookingbooks/";
    public static void main(String args[]) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(new File(BASE + "in.txt"));;
        OutputStream outputStream = new FileOutputStream(new File(BASE + "out.txt"));
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        int testCount = in.nextInt();
        for (int i = 1; i <= testCount; i++) {
            out.printf("Case #%d: ", i);
            solver.solve(in, out);
        }
        out.close();
    }

    private static class Solver {

        public void solve(InputReader in, PrintWriter out) {
            int n = in.nextInt();

            String s = String.valueOf(n);
            char ca[] = s.toCharArray();

            int min = n;
            int max = n;

            for (int i=0; i<ca.length; i++) {
                for (int j=i+1; j<ca.length; j++) {
                    if (!(i == 0 && ca[j] == '0')) {
                        int x = swap(ca, i, j);
                        min = Math.min(x, min);
                        max = Math.max(x, max);
                    }
                }
            }

            out.println(min + " " + max);
        }

        private int swap(final char[] ca, final int x, int y) {
            int val = 0;

            for (int i=0; i<ca.length; i++) {
                int v = ca[i] - '0';
                if (i == x) {
                    v = ca[y] - '0';
                } else if (i == y) {
                    v = ca[x] - '0';
                }
                val = val * 10 + v;
            }
            return val;
        }
    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
    }
}


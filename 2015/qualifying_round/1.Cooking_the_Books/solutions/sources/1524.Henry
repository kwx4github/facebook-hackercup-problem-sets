#include <stdio.h>


int get_digit(int n,int d)
{
	int base=1,i;
	
	for (i=0; i < d-1; i++)
	base *= 10;

	return (n / base) % 10;
}

int get_base(int d)
{
	int base=1,i;
	
	for (i=0; i < d-1; i++)
	base *= 10;

	return base;
}

int count_digit(int n)
{
	int c=0;
	while (n > 0)
	{
		n /= 10;
		c++;
	}
	return c;
}


int swap(int n,int d1,int d2)
{
	int num1=get_digit(n,d1);
	int num2=get_digit(n,d2);
	int base1=get_base(d1);
	int base2=get_base(d2);
	
	int expected;

	expected= n - num1*base1 - num2*base2 + num1*base2 + num2*base1;

	if (count_digit(expected) != count_digit(n))
	{
		return n;
	}
	else
	{
		return expected;
	}
}

void get_small_large(int n,int *s,int *l)
{
	int min=n;
	int max=n;
	int i,j;
	int num_digit = count_digit(n);
	int swaped_n;

	for (i=1; i <= num_digit; i++)
	for (j=i; j <= num_digit; j++)
	{
		swaped_n = swap(n,i,j);

		if (swaped_n > max)
		max = swaped_n;
		if (swaped_n < min)
		min = swaped_n;
	}

	*s = min;
	*l = max;

}


int main()
{
	int i,t,n,max,min;

	//printf("%d\n",swap(12345,1,2));
	//printf("%d\n",count_digit(1234));

	scanf("%d",&t);
	
	for (i=0; i < t; i++)
	{
		scanf("%d",&n);
		get_small_large(n,&min,&max);
		printf("Case #%d: %d %d\n",1+i,min,max);
	}

	return 0;
}

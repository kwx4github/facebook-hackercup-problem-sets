//Rupinder :D

#include <iostream>
#include <sstream>
#include <cstring>
#include <stack>
#include <cmath>
#include <map>
#include <set>
#include <string>
#include <string.h>
#include <stdio.h>
#include <vector>
#include <math.h>
#include <string>
#include <algorithm>
#include <iterator>
#include <iomanip>
#include <limits.h>
#include <numeric>
#include <queue>
#include <bitset>
using namespace std;

#define Pi 3.14159265358979323846264338327950288419716939937510582
typedef long long int lld;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef pair<lld,lld> pll;
typedef pair<double, double> pdd;

#define sz size()
#define MOD 1000000007
#define pb push_back
#define mp make_pair
#define pf push_front
#define ppb pop_back
#define ff first
#define ss second
#define rep(i,n) for(i=0;i<n;i++)
#define repn(i,n) for(i=1;i<=n;i++)
#define FOR(i,a,b) for(i=a;i<=b;i++)
#define AUTO(it, a) for (__typeof(a.begin()) it=a.begin();it!=a.end();it++)
#define all(a) a.begin(),a.end()
lld modpow(lld a,lld n,lld temp){lld res=1,y=a;while(n>0){if(n&1)res=(res*y)%temp;y=(y*y)%temp;n/=2;}return res%temp;}
lld gcd(lld a,lld b){if(a==0)return(b);else return(gcd(b%a,a));}
lld conv (string &s) {
	lld res = 0, mult = 1;
	for (int i = s.size() - 1; i >= 0; i--) {
		res += (s[i] - '0')*mult;
		mult *= 10;
	}
	return res;
}

int main()
{
	std::ios_base::sync_with_stdio( false );
	int t, n = 1, i;
	cin>>t;
	while (t--) {
		string s;
		cin>>s;
		lld rmax = conv(s), rmin = conv(s), max1 = 0, maxid = s.size() - 1,min1 = INT_MAX, minid = s.size() - 1,nzmin1 = INT_MAX, nzminid = s.size() - 1;
		for (i = s.size() - 1; i >= 0; i--) {
			if (s[i] < max1) {
				swap (s[i], s[maxid]);
				rmax = max (rmax, conv(s));
				swap (s[i], s[maxid]);
			}

			if (s[i] > min1 && (!(i == 0 && min1 == '0'))) {
				swap (s[i], s[minid]);
				rmin = min (rmin, conv(s));
				swap (s[i], s[minid]);
			}
			if (s[i] > nzmin1) {
				swap (s[i], s[nzminid]);
				rmin = min (rmin, conv(s));
				swap (s[i], s[nzminid]);
			}
			
			if (s[i] < nzmin1 && (s[i] != '0')) {
				nzmin1 = s[i];
				nzminid = i;
			}
			if (s[i] < min1) {
				min1 = s[i];
				minid = i;
			}
			if (s[i] > max1) {
				max1 = s[i];
				maxid = i;
			}
		}
		cout<<"Case #"<<(n++)<<": "<<rmin<<" "<<rmax<<"\n";
	}
	return 0;
}

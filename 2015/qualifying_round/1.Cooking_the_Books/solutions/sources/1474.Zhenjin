package Round1_2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;


public class A {
public static void main(String args[]) throws NumberFormatException,IOException {
		
		Stdin in = new Stdin();
		PrintWriter out = new PrintWriter("out.txt");
		int t=in.readInt();
		String n;
		for(int i=1;i<=t;i++){
			n=in.readNext();
			print(out,i);
			out.print(" "+getMin(n.toCharArray()));
			out.println(" "+getMax(n.toCharArray()));
		}
		out.flush();
		out.close();

	}
	private static String getMin(char[]n){
		if(n.length==1)
			return new String(n);
		int pos;
		for(int i=0;i<n.length;i++){
			pos=i;
			for(int j=i+1;j<n.length;j++){
				if(i==0){
					if(n[j]!='0'){
						if(pos==i){
							if(n[pos]>n[j])
								pos=j;
						}else{
							if(n[pos]>=n[j]){
								pos=j;
							}
						}
					}
				}else{
					if(pos==i){
						if(n[pos]>n[j])
							pos=j;
					}else{
						if(n[pos]>=n[j]){
							pos=j;
						}
					}
				}
			}
			if(pos!=i){
				swap(pos,i,n);
				break;
			}
		}
		return new String(n);
	} 
	private static String getMax(char[]n){
		if(n.length==1)
			return new String(n);
		int pos;
		for(int i=0;i<n.length;i++){
			pos=i;
			for(int j=i+1;j<n.length;j++){
				if(pos==i){
					if(n[pos]<n[j])
						pos=j;
				}else{
					if(n[pos]<=n[j]){
						pos=j;
					}
				}
			}
			if(pos!=i){
				swap(pos,i,n);
				break;
			}
		}
		return new String(n);
	}
	private static void swap(int i,int j,char[]n){
		char t=n[i];
		n[i]=n[j];
		n[j]=t;
	}
	private static void print(PrintWriter out,int cases){
		out.print("Case #"+cases+":");
	}
	private static class Stdin {
		BufferedReader br;

		StringTokenizer st = new StringTokenizer("");

		private Stdin() throws FileNotFoundException {
			br = new BufferedReader(new FileReader("in.txt"));

		}

		private String readNext() throws IOException {

			while (!st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		private int readInt() throws IOException, NumberFormatException {

			return Integer.parseInt(readNext());

		}

		private long readLong() throws IOException, NumberFormatException {

			return Long.parseLong(readNext());

		}
		private double readDouble() throws IOException, NumberFormatException {

			return Double.parseDouble(readNext());

		}
	}
}

#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstring>
#include <cstdarg>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <complex>
#include <numeric>
#include <vector>
#include <string>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <thread>
#include <mutex>

using namespace std;

#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define FOR(i, a, b) for (int i(a), _b(b); i < _b; ++i)
#define REP(i, n) FOR(i, 0, n)
#define FORD(i, a, b) for (int i(a), _b(b); i >= _b; --i)
#define FORE(e, v) for (int e = head[v]; e >= 0; e = E[e].next)
#define UNIQUE(a) sort(all(a)), (a).erase(unique(all(a)), (a).end())
#define CL(a, v) memset(a, v, sizeof a)
#define pb push_back
#define X first
#define Y second

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;

const int INF = 1000000000;
const ll INF_LL = 1000000000000000000LL;
const double pi = 2 * acos(0.0);

template<class T> void smin(T& a, const T& b) { if (a > b) a = b; }
template<class T> void smax(T& a, const T& b) { if (a < b) a = b; }
template<class T> T gcd(T a, T b) {
  while (a & b) { if (a >= b) a %= b; else b %= a; } return a + b; }
template<class T> T sqr(const T& a) { return a * a; }

template<typename Iterator> void print(const char* fmt,
    Iterator begin, Iterator end, const char* separator = " ") {
  for (Iterator it = begin; it != end; ++it) {
    if (it != begin) printf("%s", separator);
    printf(fmt, *it);
  }
  printf("\n");
}



int main() {
  cin.tie(NULL);
  //ios_base::sync_with_stdio(false);
  freopen("cooking_the_books.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  int ntest, itest = 1;
  for (scanf("%d", &ntest); itest <= ntest; ++itest) {
    int n;
    scanf("%d", &n);
    vi d;
    int a = n, b = n;
    while (n) d.pb(n % 10), n /= 10;
    REP(i, sz(d)) FOR(j, i+1, sz(d)) if (d[i] != 0 || j+1 < sz(d)) {
      swap(d[i], d[j]);
      int m = 0;
      FORD(u, sz(d)-1, 0) m = 10 * m + d[u];
      smin(a, m);
      smax(b, m);
      swap(d[i], d[j]);
    }
    printf("Case #%d: %d %d\n", itest, a, b);
  }
  cerr << endl << endl << "TIME: " << clock() << endl;
  return 0;
}

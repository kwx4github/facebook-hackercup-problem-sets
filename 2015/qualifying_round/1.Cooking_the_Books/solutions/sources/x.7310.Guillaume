using System;
using System.IO;


namespace FBHacker.Selections
{
    /// <summary>
    /// Every business can make use of a good accountant and, if they're not big on following the law, sometimes a bad one. 
    /// Bad accountants try to make more money for their employers by fudging numbers without getting caught.
    /// Sometimes a bad accountant wants to make a number larger, and sometimes smaller. It is widely known that tax auditors 
    /// will fail to notice two digits being swapped in any given number, but any discrepancy more egregious will certainly be caught. 
    /// It's also painfully obvious when a number has fewer digits than it ought to, so a bad accountant will never swap the first digit of a number with a 0.
    /// Given a number, how small or large can it be made without being found out?
    /// 
    /// Input
    /// Input begins with an integer T, the number of numbers that need tweaking. Each of the next T lines contains a integer N.
    /// 
    /// Output
    /// For the ith number, print a line containing "Case #i: " followed by the smallest and largest numbers that can be made from the original 
    /// number N, using at most a single swap and following the rules above.
    /// 
    /// Constraints
    /// 1 ≤ T ≤ 100 
    /// 0 ≤ N ≤ 999999999 
    /// N will never begin with a leading 0 unless N = 0
    /// </summary>
    public class CookingTheBooks : IProblemSolver
    {
        #region IProblemSolver
        public void Solve(StreamReader input, StreamWriter output)
        {
            string line = input.ReadLine();
            int T = 0;
            try
            {
                T = Int32.Parse(line);
                if (T < 1 || T > 100) throw new ArgumentOutOfRangeException("T must be [1,100].");
            }
            catch (FormatException) 
            {
                throw new ArgumentException(string.Format("Invalid T : {0}", line));
            }

            for(int i=1; i <= T ; i++)
            {
               line = input.ReadLine();
               if (line == null) throw new ArgumentException(string.Format("Unexpected End Of File on line {0}.", i));
               output.WriteLine(Process(line, i));
            }
        }
        #endregion

        private string Process(string input, int index)
        {
            string outputTemplate = "Case #{0}: {1} {2}";

            char[] numbers = input.ToCharArray();
            bool neg = numbers[0] == 0x2D; // integer could be negative !! 
            int offset = neg ? 1 : 0; // avoid minus char if present

            // looking for the greater and smaller
            char minc = numbers[offset];
            char maxc = numbers[offset];
            int mini = offset;
            int maxi = offset;
            for (int i = offset + 1; i < numbers.Length; i++ )
            {
                char c = numbers[i];
                if (c == 0x30) continue; // avoid zero ASCII char.
                if (minc >= c)  // we want the last minimum -> '>='
                {
                    minc = c;
                    mini = i;
                }
                if (maxc < c)  // we want the first maximum -> '<'
                {
                    maxc = c;
                    maxi = i;
                }
            }

            char leadc = numbers[offset]; 

            // for the min, swap 0 and mini
            numbers[mini] = leadc;
            numbers[offset] = minc;
            string min = new string(numbers);

            // reset the buffer
            numbers[mini] = minc;

            // for the max, swap 0 and maxi
            numbers[maxi] = leadc;
            numbers[offset] = maxc;
            string max = new string(numbers);

            return neg ? string.Format(outputTemplate, index, max, min) : string.Format(outputTemplate, index, min, max);
        }
    }
}

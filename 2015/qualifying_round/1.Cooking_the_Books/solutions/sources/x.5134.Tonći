/*

Every business can make use of a good accountant and, if they're not big on following the law, sometimes a bad one. Bad accountants try to make more money for their employers by fudging numbers without getting caught.

Sometimes a bad accountant wants to make a number larger, and sometimes smaller. It is widely known that tax auditors will fail to notice two digits being swapped in any given number, but any discrepancy more egregious will certainly be caught. It's also painfully obvious when a number has fewer digits than it ought to, so a bad accountant will never swap the first digit of a number with a 0.

Given a number, how small or large can it be made without being found out?

Input
Input begins with an integer T, the number of numbers that need tweaking. Each of the next T lines contains a integer N.

Output
For the ith number, print a line containing "Case #i: " followed by the smallest and largest numbers that can be made from the original number N, using at most a single swap and following the rules above.

Constraints
1 ≤ T ≤ 100 
0 ≤ N ≤ 999999999 
N will never begin with a leading 0 unless N = 0

Example input:

5
31524
897
123
10
5

Example output:

Case #1: 13524 51324
Case #2: 798 987
Case #3: 123 321
Case #4: 10 10
Case #5: 5 5
*/
namespace CookingTheBooks
{
    using System;
    using System.IO;
    using System.Linq;

    public class Program
    {
        static void Main(string[] args)
        {
            using (var input = new StreamReader("cooking_the_books.txt"))
            using(var output = new StreamWriter("output.txt"))
            {
                var T = int.Parse(input.ReadLine());

                for(int i = 1; i <= T; i++)
                {
                    var n = input.ReadLine();
                    output.WriteLine("Case #{0}: {1} {2}", i, GetMin(n), GetMax(n));
                }
            }
        }

        private static string GetMax(string n)
        {
            if (n.Length == 1)
                return n;

            int biggestDigit = int.MinValue;
            int lastApp = -1;

            for (int i = n.Length - 1; i >= 0; i--)
            {
                var digit = (int)Char.GetNumericValue(n[i]);
                if (digit > biggestDigit)
                {
                    biggestDigit = digit;
                    lastApp = i;
                }
            }

            return SwapCharacters(n, 0, lastApp);
        }

        private static string GetMin(string n)
        {
            if (n.Length == 1)
                return n;

            int smallestPosDigit = int.MaxValue;
            int lastApp = -1;

            for (int i = n.Length - 1; i >= 0; i--)
            {
                var digit = (int)Char.GetNumericValue(n[i]);
                if (digit > 0 && digit < smallestPosDigit)
                {
                    smallestPosDigit = digit;
                    lastApp = i;
                }
            }

            return SwapCharacters(n, 0, lastApp);
        }


        static string SwapCharacters(string value, int position1, int position2)
        {
            //
            // Swaps characters in a string. Must copy the characters and reallocate the string.
            //
            char[] array = value.ToCharArray(); // Get characters
            char temp = array[position1]; // Get temporary copy of character
            array[position1] = array[position2]; // Assign element
            array[position2] = temp; // Assign element
            return new string(array); // Return string
        }
    }
}

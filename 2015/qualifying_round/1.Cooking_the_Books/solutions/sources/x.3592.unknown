import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class Cooking {

	static int min, max;
	static int Nmin, Nmax;

	public static void main(String[] args) throws FileNotFoundException {
		int t, n, p;
		int[] arr = new int[9];
		Scanner sc = new Scanner(new File("cooking_the_books.txt"));
		PrintWriter pw= new PrintWriter(new File("output.txt"));
		t = sc.nextInt();
		int x=0;
		while (x< t) {
			n = sc.nextInt();
			p = (int) (Math.log10(n) + 1);
			buildArr(arr, n, p);

			int j = 0;

			while (j < p && (min = searchMin(arr, j, p)) == j) {
				j++;
			}
			if (j >= p) {
				Nmin = n;
			} else {
				swap(arr, min, j);
				Nmin = build(arr, p);
				swap(arr, min, j);
			}

			j = 0;
			while (j < p && (max = searchMax(arr, j, p)) == j) {
				j++;
			}
			if (j >= p) {
				Nmax = n;
			} else {
				swap(arr, max, j);
				Nmax = build(arr, p);
				swap(arr, max, j);

			}

			pw.println("Case #"+(x+++1)+": "+ Nmin+" "+Nmax);
			
		}
		pw.close();
		sc.close();
	}

	private static void buildArr(int[] a, int nm, int pp) {
		for (int i = 0; i < pp; i++) {
			a[pp - i - 1] = nm % 10;
			nm = nm / 10;
		}
		// for (int i = 0; i < pp; i++) {
		// System.out.print(a[i]+"-");
		// }
		// System.out.println();
	}

	private static int build(int[] a, int pp) {
		int s = 0;
		for (int i = 0; i < pp; i++) {
			s = s * 10 + a[i];
		}

		// for (int i = 0; i < pp; i++) {
		// System.out.print(a[i]+"-");
		// }
		// System.out.println();
		return s;

	}

	private static void swap(int[] a, int k, int l) {
		int tmp = a[k];
		a[k] = a[l];
		a[l] = tmp;

	}

	static int searchMin(int[] a, int pos, int fin) {

		int m = pos;
		for (int i = pos + 1; i < fin; i++) {
			if (a[i] != 0 && a[i] < a[m])
				m = i;
		}
		return m;
	}

	static int searchMax(int[] a, int pos, int fin) {
		int m = pos;
		for (int i = pos + 1; i < fin; i++) {
			if (a[i]!=a[pos]&&a[i] >= a[m])
				m = i;
		}
		return m;
	}
}

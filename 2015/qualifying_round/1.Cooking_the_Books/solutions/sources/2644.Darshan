package Hackercup;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class CookingTheBooks {
	public static void main(String[] args) throws NumberFormatException,
			IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		int T = 1;
		String n;

		int a2[], a1[];

		while (T <= t) {

			n = br.readLine();

			if (n.length() == 1) {
				System.out.println("Case #" + T + ": " + n + " " + n);
				T++;
				continue;
			}

			a1 = new int[n.length()];
			a2 = new int[n.length()];
			for (int i = 0; i < n.length(); i++) {
				a2[i] = n.charAt(i) - '0';
				a1[i] = n.charAt(i) - '0';
			}

			System.out.print("Case #" + T + ": ");
			calculateMin(a1, 0);
			System.out.print(" ");
			calculateMax(a2, 0);
			System.out.println();
			T++;
		}
	}

	private static void calculateMax(int[] a2, int start) {
		int max = maximum(a2, start);
		int maxpos = -1, t2 = 0;
		for (int i = a2.length - 1; i >= 0; i--) {
			if (a2[i] == max && t2 == 0) {
				maxpos = i;
				t2 = 1;
			}
		}

		if (maxpos != start) {
			if (a2[start] < max) {
				a2[maxpos] = a2[start];
				a2[start] = max;

				for (int j = 0; j < a2.length; j++) {
					System.out.print(a2[j]);
				}

				return;
			} else if (a2[start] == max) {
				calculateMax(a2, start + 1);
			} else {
				System.out.println(":/");
			}
		} else {
			if (maxpos + 1 == a2.length) {

				for (int j = 0; j < a2.length; j++) {
					System.out.print(a2[j]);
				}

				return;
			}
			calculateMax(a2, maxpos + 1);
		}

	}

	private static void calculateMin(int[] a1, int start) {
		int min;
		if (start == 0)
			min = minimum(a1, start, 1);
		else
			min = minimum(a1, start, 0);
		int minpos = -1, t2 = 0;
		for (int i = a1.length - 1; i >= 0; i--) {
			if (a1[i] == min && t2 == 0) {
				minpos = i;
				t2 = 1;
			}
		}

		if (minpos != start) {
			if (a1[start] > min) {
				a1[minpos] = a1[start];
				a1[start] = min;

				for (int j = 0; j < a1.length; j++) {
					System.out.print(a1[j]);
				}

				return;
			} else if (a1[start] == min) {
				calculateMin(a1, start + 1);
			} else {
				System.out.println(":/");
			}
		} else {
			if (minpos + 1 == a1.length) {

				for (int j = 0; j < a1.length; j++) {
					System.out.print(a1[j]);
				}

				return;
			}
			calculateMin(a1, minpos + 1);
		}

	}

	static int minimum(int[] in, int start, int firsttime) {
		if (firsttime == 1) {
			int m = 9;
			for (int i = start; i < in.length; i++) {
				if (in[i] < m && in[i] != 0) {
					m = in[i];
				}
			}
			return m;
		} else {
			int m = 9;
			for (int i = start; i < in.length; i++) {
				if (in[i] < m) {
					m = in[i];
				}
			}
			return m;
		}
	}

	static int maximum(int[] in, int start) {
		int m = 0;
		for (int i = start; i < in.length; i++) {
			if (in[i] > m) {
				m = in[i];
			}
		}
		return m;
	}

}

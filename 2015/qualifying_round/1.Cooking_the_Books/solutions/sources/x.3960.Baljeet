import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("cookingthebooks.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("cookingthebooks.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CookingTheBooks {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        String n = String.valueOf(in.next());
        int []cnt = new int[26];
        String min = "", max = "";
        String te = new String(n);
        for (int i = 0; i < n.length(); i++) {
            int ind = i;
            for (int j = i + 1; j < n.length(); j++) {
                if ((n.codePointAt(ind) - 48) < (n.codePointAt(j) - 48)) {
                    ind = j;
                }
            }
            if (ind == i)continue;
            StringBuilder sb = new StringBuilder();
            sb.append(n.substring(0, i) + n.charAt(ind) + n.substring(i + 1, ind) + n.charAt(i) + n.substring(ind + 1));
            n = sb.toString();
            if (ind != i)break;
        }
        max = new String(n);
        n = new String(te);
        for (int i = 0; i < n.length(); i++) {
            int ind = i;
            for (int j = i + 1; j < n.length(); j++) {
                if ((n.codePointAt(ind) - 48) > (n.codePointAt(j) - 48)){
                    if (n.charAt(j) == '0'){
                        if (i != 0)ind = j;
                        continue;
                    }
                    ind = j;
                }
            }
            if (ind == i)continue;
            StringBuilder sb = new StringBuilder();
            sb.append(n.substring(0, i) + n.charAt(ind) + n.substring(i + 1, ind) + n.charAt(i) + n.substring(ind + 1));
            n = sb.toString();
            if (ind != i)break;
        }
        min = n;
        out.print("Case #"+testNumber+": "+min+" "+max+"\n");
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }


}


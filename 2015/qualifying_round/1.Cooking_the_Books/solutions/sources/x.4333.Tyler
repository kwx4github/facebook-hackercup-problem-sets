//
//  main.c
//  Cooking the Books
//
//  Created by Tyler Crompton on 1/9/15.
//  Copyright (c) 2015 Tyler Crompton. All rights reserved.
//

#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
#include <tgmath.h>

unsigned int falsifyLarge(unsigned int number)
{
	if (number == 0)
	{
		return 0;
	}

	const unsigned int numberOfDigits = log10(number) + 1;

	unsigned int left;
	unsigned int right;
	unsigned int maximumIndex;
	unsigned int maximum;

	for (unsigned int leftIndex = numberOfDigits - 1; leftIndex > 1; --leftIndex)
	{
		left = (unsigned char) (number / pow(10, leftIndex)) % 10;
		maximumIndex = leftIndex;
		maximum = left;

		for (int rightIndex = 0; rightIndex < leftIndex; ++rightIndex)
		{
			right = number / (unsigned int) pow(10, rightIndex) % 10;

			if (right > maximum)
			{
				maximumIndex = rightIndex;
				maximum = right;
			}
		}

		if (maximum != left)
		{
			// swap the digits
			number -= (left - maximum) * pow(10, leftIndex);
			number += (left - maximum) * pow(10, maximumIndex);

			break;
		}
	}

	return number;
}

unsigned int falsifySmall(unsigned int number)
{
	if (number == 0)
	{
		return 0;
	}

	const unsigned int numberOfDigits = log10(number) + 1;

	unsigned int left;
	unsigned int right;
	unsigned int minimumIndex;
	unsigned int minimum;

	for (unsigned int leftIndex = numberOfDigits - 1; leftIndex > 1; --leftIndex)
	{
		left = (unsigned char) (number / pow(10, leftIndex)) % 10;
		minimumIndex = leftIndex;
		minimum = left;

		for (int rightIndex = leftIndex - 1; rightIndex >= 0; --rightIndex)
		{
			right = number / (unsigned int) pow(10, rightIndex) % 10;

			if (right < minimum && (leftIndex == numberOfDigits - 1 ? right != 0 : true))
			{
				minimumIndex = rightIndex;
				minimum = right;
			}
		}

		if (minimum != left)
		{
			// swap the digits
			number -= (left - minimum) * pow(10, leftIndex);
			number += (left - minimum) * pow(10, minimumIndex);

			break;
		}
	}

	return number;
}

int main()
{
	unsigned char numberOfInputs;
	unsigned int input;

	scanf("%hhu", &numberOfInputs);

	for (unsigned char i = 1; i <= numberOfInputs; ++i)
	{
		scanf("%d", &input);

		printf("Case #%hhu: %u %u\n", i, falsifySmall(input), falsifyLarge(input));
	}
	
	return 0;
}

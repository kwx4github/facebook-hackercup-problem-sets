package com.hulzenga.facebook.hackercup2015.qualifier;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**
 * Created by jouke on 1/11/15.
 */
public class CookingTheBooks {

  public interface TriplePredicate {
    public boolean test(char front, char best, char current);
  }

  public static String swapWithPredicate(String original, char start, TriplePredicate predicate) {
    char[] split = original.toCharArray();
    int n = split.length;

    boolean possibleSwap = false;
    char best = start;
    int swapI = 0, swapJ = 0;

    for (int i = 0; i < n - 1; i++) {
      for (int j = i + 1; j < n; j++) {

        //not possible to swap '0' with leading char
        if (i == 0 && split[j] == '0') continue;

        //predicate test
        if (predicate.test(split[i], best, split[j])) {
          possibleSwap = true;
          best = split[j];
          swapI = i;
          swapJ = j;
        }
      }

      if (possibleSwap) break;
    }

    char tmp = split[swapI];
    split[swapI] = split[swapJ];
    split[swapJ] = tmp;

    return new String(split);
  }

  public static void main(String[] args) {

    String inputPath = "files/CookingTheBooks/cooking_the_books.txt";
    String outputPath = "files/CookingTheBooks/cooking_the_books_output.txt";

    try (Scanner s = new Scanner(new File(inputPath));
         BufferedWriter writer = new BufferedWriter(new FileWriter(outputPath))) {
      int n = Integer.parseInt(s.nextLine());

      for (int i = 1; i <= n; i++) {
        String original = s.nextLine();

        String small = swapWithPredicate(original, '9', (front, best, current) -> (current < front && current <= best));
        String big = swapWithPredicate(original, '0', (front, best, current) -> (current > front && current >= best));

        String result = String.format("Case #%d: %s %s", i, small, big);

        //print for console reading
        System.out.println(result);

        writer.write(result);
        writer.newLine();
      }

    } catch (IOException e) {
      //handle exception
    }
  }
}

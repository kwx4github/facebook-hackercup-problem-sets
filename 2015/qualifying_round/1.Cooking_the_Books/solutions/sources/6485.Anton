/**
 * main.cpp
 * Anton Dukeman
 *
 * Solver for Cooking the Books problem for Facebook Hacker Cup 2015
 */

#include <iostream>
#include <sstream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cstring>

using std::vector;
using std::ifstream;
using std::cout;
using std::endl;
using std::max_element;

int create_num(const char* num, const size_t magnitude)
{
  int ret = 0;
  for(size_t i = 0; i < magnitude; ++i)
  {
    ret *= 10;
    ret += num[i];
  }
  return ret;
}

void num_swap(const int& i, int& min, int& max)
{
  size_t magnitude = 0;
  int temp = i;
  int rem;
  while(temp > 0)
  {
    ++magnitude;
    temp /= 10;
  }

  temp = i;
  char* num = new char[magnitude + 1];
  num[magnitude] = 0;
  for(size_t i = 0; i < magnitude; ++i)
  {
    num[magnitude - i - 1] = (temp % 10);
    temp /= 10;
  }

  std::vector<int> possible;
  char* temp_num = new char[magnitude + 1];
  temp_num[magnitude] = 0;
  possible.push_back(create_num(num, magnitude));
  for(size_t i = 0; i < magnitude; ++i)
  {
    for(size_t j = i + 1; j < magnitude; ++j)
    {
      memcpy(temp_num, num, sizeof(char) * magnitude);
      char swap = temp_num[i];
      temp_num[i] = temp_num[j];
      temp_num[j] = swap;
      if(temp_num[0] != 0)
        possible.push_back(create_num(temp_num, magnitude));
    }
  }

  min = *(min_element(possible.begin(), possible.end()));
  max = *(max_element(possible.begin(), possible.end()));

  delete [] num;
  delete [] temp_num;
}

int main(int argc, char** argv)
{
  ifstream input(argv[1]);
  
  int num_input;
  input >> num_input;

  int idx = 0;
  int value, min, max;
  for(size_t i = num_input; i != 0; --i)
  {
    input >> value;
    num_swap(value, min, max);
    cout << "Case #" << ++idx << ": " << min << " " << max << endl;
  }

  return 0;
}

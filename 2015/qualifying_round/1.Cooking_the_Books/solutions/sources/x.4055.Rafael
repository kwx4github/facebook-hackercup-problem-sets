/*
 * Ex1.cpp
 *
 *  Created on: Jan 9, 2015
 *      Author: rafael
 */

#include <iostream>
#include <vector>
#include <math.h>

using namespace std;

//Definitions

//Implementations

//Common functions
vector<int> intToVector(const int& number){
	vector<int> vectNumber;
	int auxNumber = number;
	for(int i = 0; auxNumber != 0; i++){
		vectNumber.push_back(auxNumber % 10);
		auxNumber /= 10;
	}
	return vectNumber;
}

vector<int> swap(const vector<int>& vectNumber, int digit1, int digitIndex1, int digit2, int digitIndex2){
	int vectNumberSize = (int)vectNumber.size();
	if(digitIndex1 >= 0 && digitIndex2 >= 0 && !(digit1 == 0 && digitIndex2 == vectNumberSize - 1) && !(digit2 == 0 && digitIndex1 == vectNumberSize - 1)){
		vector<int> toReturn = vectNumber;
		toReturn[digitIndex1] = digit2;
		toReturn[digitIndex2] = digit1;
		return toReturn;
	}
	else
		return vectNumber;
}

//Larger number functions
void findLargerDigit(const vector<int>& vectNumber, int& largerDigit, int& largerDigitIndex){
	largerDigit = -1;
	int vectNumberSize = (int)vectNumber.size();
	for(int i = 0; i < vectNumberSize; i++){
		if(vectNumber[i] > largerDigit){
			largerDigit = vectNumber[i];
			largerDigitIndex = i;
		}
	}
}

void findDigitsToSwapLarger(const vector<int>& vectNumber, int& largerDigit, int& largerDigitIndex, int& firstLargerDigit, int& firstLargerDigitIndex){
	if (vectNumber.size() != 0){
		vector<int> aux = vectNumber;
		findLargerDigit(aux, largerDigit, largerDigitIndex);
		if(!(largerDigit == firstLargerDigit)){
			int auxSize = aux.size();
			firstLargerDigit = aux[auxSize - 1];
			firstLargerDigitIndex = auxSize - 1;
		}
		else{
			aux.pop_back();
			int auxSize = aux.size();
			firstLargerDigit = aux[auxSize - 1];
			firstLargerDigitIndex = auxSize - 1;
			findDigitsToSwapLarger(aux, largerDigit, largerDigitIndex, firstLargerDigit, firstLargerDigitIndex);
		}
	}
}


int findLarger(const vector<int>& vectNumber){
	int largerDigit;
	int largerDigitIndex;

	int vectNumberSize = vectNumber.size();
	int firstLargerDigit = vectNumber[vectNumberSize - 1];
	int firstLargerDigitIndex = vectNumberSize - 1;

	//find the correct number to swap;
	findDigitsToSwapLarger(vectNumber, largerDigit, largerDigitIndex, firstLargerDigit, firstLargerDigitIndex);

	//Do swap
	vector<int> afterSwap = swap(vectNumber, largerDigit, largerDigitIndex, firstLargerDigit, firstLargerDigitIndex);

	int smaller = 0;
	for(int i = vectNumberSize - 1; i >= 0; i--){
		smaller += afterSwap[i] * pow(10, i);
	}

	return smaller;

}

//Smaller number functions
void findSmallerDigit(const vector<int>& vectNumber, int& smallerDigit, int& smallerDigitIndex){
	smallerDigit = 10;
	int vectNumberSize = (int)vectNumber.size();
	for(int i = 0; i < vectNumberSize; i++){
		if(vectNumber[i] < smallerDigit){
			smallerDigit = vectNumber[i];
			smallerDigitIndex = i;
		}
	}
}

void findDigitsToSwapSmaller(const vector<int>& vectNumber, vector<int> aux, int& smallerDigit, int& smallerDigitIndex, int& firstSmallerDigit, int& firstSmallerDigitIndex){
	if (aux.size() != 0){
		findSmallerDigit(aux, smallerDigit, smallerDigitIndex);
		if(!(smallerDigit == firstSmallerDigit) && !(smallerDigit == 0 && firstSmallerDigitIndex == vectNumber.size() - 1)){
			int auxSize = aux.size();
			firstSmallerDigit = aux[auxSize - 1];
			firstSmallerDigitIndex = auxSize - 1;
		}
		else{
			aux.pop_back();
			int auxSize = aux.size();
			firstSmallerDigit = aux[auxSize - 1];
			firstSmallerDigitIndex = auxSize - 1;
			findDigitsToSwapSmaller(vectNumber, aux, smallerDigit, smallerDigitIndex, firstSmallerDigit, firstSmallerDigitIndex);
		}
	}

}

int findSmaller(const vector<int>& vectNumber){
	int smallerDigit;
	int smallerDigitIndex;

	int vectNumberSize = vectNumber.size();
	int firstSmallerDigit = vectNumber[vectNumberSize - 1];
	int firstSmallerDigitIndex = vectNumberSize - 1;

	//find the correct number to swap;
	vector<int> aux = vectNumber;
	findDigitsToSwapSmaller(vectNumber, aux, smallerDigit, smallerDigitIndex, firstSmallerDigit, firstSmallerDigitIndex);

	//Do swap
	vector<int> afterSwap = swap(vectNumber, smallerDigit, smallerDigitIndex, firstSmallerDigit, firstSmallerDigitIndex);

	int smaller = 0;
	for(int i = vectNumberSize - 1; i >= 0; i--){
		smaller += afterSwap[i] * pow(10, i);
	}

	return smaller;
}

void getLargerNumberAndSmallerNumbers(const int& number, int& largerNumber, int& smallerNumber){
	vector<int> vectNumber = intToVector(number);
	smallerNumber = findSmaller(vectNumber);
	largerNumber = findLarger(vectNumber);
}


int main(){
	int T;
	cin >> T;
	for(int i = 0; i < T; i++){
		int N, largerNumber = 0, smallerNumber = 0;
		cin >> N;
		if(N != 0)
			getLargerNumberAndSmallerNumbers(N, largerNumber, smallerNumber);
		cout << "Case #" << i + 1 << ": " << smallerNumber << " " << largerNumber << endl;
	}
	return 0;
}

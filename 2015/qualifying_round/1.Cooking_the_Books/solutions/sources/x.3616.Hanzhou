#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define dbg(x) cout << #x << " = " << x << endl
#define dbg2(x,y) cout << #x << " = " << x << ", " << #y << " = " << y << endl
#define dbg3(x,y,z) cout << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl

#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl;

int d[10], nd;

void init(int n)
{
    nd = 0;
    do {
        d[nd ++] = n % 10;
        n /= 10;
    } while( n );
}

int calc() {
    int res = 0;
    for(int i = nd - 1; i >= 0; i --)
        res = 10 * res + d[i];
    return res;
}

int gao1(int n)
{
    int res = n;
    for(int i = nd - 1; i >= 0; i --) {
        for(int j = i - 1; j >= 0; j --) {
            if( d[j] ) {
                swap(d[i], d[j]);
                int t = calc();
                if( t < res ) res = t;
                swap(d[i], d[j]);
            }
        }
    }
    return res;
}

int gao2(int n)
{
    int res = n;
    for(int i = nd - 1; i >= 0; i --) {
        for(int j = i - 1; j >= 0; j --) {
            if( d[j] ) {
                swap(d[i], d[j]);
                int t = calc();
                if( t > res ) res = t;
                swap(d[i], d[j]);
            }
        }
    }
    return res;
}

int main()
{
    freopen("data.in", "r", stdin);
    freopen("data.out", "w", stdout);
    int nt, idx = 0;
    scanf("%d", &nt);
    for(; nt > 0; nt --) {
        int n;
        cin >> n;
        init(n);
        int n1 = gao1(n);
        int n2 = gao2(n);
        printf("Case #%d: %d %d\n", ++idx, n1, n2);
    }
    return 0;
}

#include <iostream>
#include <cstring>
#include <fstream>
#include <cstdlib>
using namespace std;
const int MAXDIGIT = 11;
#define FILES

int reverse(int digits[], const int size)
{
    for (int i = 0; i < size/2; i++)
        swap(digits[i], digits[size-i-1]);
}

int generate_number(int digits[], const int size)
{
    int result = 0;
    for (int i = 0; i < size; i++)
        result = result * 10 + digits[size-i-1];
    return result;
}

int solve(int n, int& max, int &min)
{
    int digits[MAXDIGIT];
    int ncopy = n;
    int count = 0;
    // Finding digits in wrong order
    while (ncopy)
    {
        digits[count++] = ncopy % 10;
        ncopy /= 10;
    }


    for (int i = 0; i < count; i++)
        for (int j = i + 1; j < count; j++)
        {
            int dcopy[11];

            memcpy(dcopy, digits, sizeof(int)*MAXDIGIT);

            swap(dcopy[i], dcopy[j]);

            if (dcopy[count-1] == 0)
                continue;
            int newn = generate_number(dcopy, count);

            min = (newn < min) ? newn : min;
            max = (newn > max) ? newn : max;
        }


}

/*
5
31524
897
123
10
5
*/
int main()
{
    int t;
    int a[101];

#ifndef FILES
    cin >> t;
    for (int i = 0; i < t; i++)
    {
        int n;
        cin >> n;
        int max =  n, min = n;

        solve(n, max, min);

        cout << "Case #" << i + 1 << ": "
             << min << " " << max << endl;
    }

#else
    fstream fin, fout;
    fin.open("d:\\cooking_the_books.txt", fstream::in);
    fout.open("d:\\output.txt", fstream::out);

    fin >> t;

    for (int i = 0; i < t; i++)
    {
        int n;
        fin >> n;
        int max =  n, min = n;

        solve(n, max, min);

        fout << "Case #" << i + 1 << ": "
             << min << " " << max << endl;
    }

    fin.close();
    fout.close();

    //system("d:\\output.txt");
#endif // FILES

    return 0;
}

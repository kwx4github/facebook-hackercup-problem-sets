/*
 *  Facebook Hacker Cup 2015
 *  Qualification Round - Cooking the Books
 */

#include <cstdio>
#include <vector>

#define INPUT	  "input.txt"
#define OUTPUT	"output.txt"
// MODE 0 -> for submission, 1 -> for local 
#define MODE    1

long N;

void ReadTestData()
{
  scanf("%ld", &N);
}

void NumToVector(long n, std::vector<char> &v)
{
  v.clear();

  while (n > 0)
  {
    v.push_back(n % 10);
    n /= 10;
  }

  std::reverse(v.begin(), v.end());
}

long VectorToNum(std::vector<char> &v)
{
  long n = 0;

  for (int i = 0; i < v.size(); ++i)
  {
    n = n * 10 + v[i];
  }

  return n;
}

void Solve()
{
  long small, large;

  if (N == 0)
  {
    small = large = 0;
  }
  else
  {
    std::vector<char> v;
    int digit = 1000, pos = -1, aux;

    // compute smallest
    NumToVector(N, v);
    // get smallest digit and its last position
    for (int i = 0; i < v.size(); ++i)
    {
      if (v[i] != 0 && (v[i] < digit || (v[i] == digit && i > pos)))
      {
        digit = v[i];
        pos = i;
      }
    }
    // swap it with first digit
    aux = v[0];
    v[0] = v[pos];
    v[pos] = aux;

    small = VectorToNum(v);

    // compute largest
    digit = pos = -1;
    NumToVector(N, v);
    // get largest digit and its first position
    for (int i = 0; i < v.size(); ++i)
    {
      if (v[i] != 0 && v[i] > digit)
      {
        digit = v[i];
        pos = i;
      }
    }
    // swap it with first digit
    aux = v[0];
    v[0] = v[pos];
    v[pos] = aux;

    large = VectorToNum(v);
  }
  printf("%ld %ld\n", small, large);
}

int main()
{
#if MODE
	freopen(INPUT, "r", stdin);
	freopen(OUTPUT, "w", stdout);
#endif

  int nrTests;
  scanf("%d", &nrTests);

  for (int test = 1; test <= nrTests; ++test)
  {
	  ReadTestData();

    printf("Case #%d: ", test);
	  Solve();
  }

	return 0;
}

import java.io.InputStreamReader;
import java.io.IOException;
import java.util.InputMismatchException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Task {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int n = in.nextInt();
        char[] s = Integer.toString(n).toCharArray();
        int x = n;
        int y = n;
        for (int i = 0; i < s.length; ++i) {
            for (int j = i + 1; j < s.length; ++j) {
                if (s[j] == '0') {
                    continue;
                }
                char t;
                t = s[i];
                s[i] = s[j];
                s[j] = t;
                int val = Integer.parseInt(new String(s));
                if (x > val) {
                    x = val;
                }
                if (y < val) {
                    y = val;
                }
                t = s[i];
                s[i] = s[j];
                s[j] = t;
            }
        }
        out.printf("Case #%d: %d %d\n", testNumber, x, y);
    }
}

class InputReader {
    BufferedReader bufReader;
    StringTokenizer stringTokenizer;
    boolean isEof = false;

    public InputReader(InputStream stream) {
        bufReader = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            try {
                String line = bufReader.readLine();
                if (line == null) {
                    isEof = true;
                    return null;
                }
                stringTokenizer = new StringTokenizer(line);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
        }
        return stringTokenizer.nextToken();
    }

    public int nextInt() {
        String s = next();
        if (s == null) {
            return 0;
        }
        return Integer.parseInt(s);
    }

}


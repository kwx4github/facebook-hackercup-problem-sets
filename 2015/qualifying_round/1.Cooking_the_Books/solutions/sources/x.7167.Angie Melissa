
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.StringTokenizer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Melissa
 */
public class Main {
    
    public static void main(String[]args) throws IOException{
        Scanner sc=new Scanner();
        int n=sc.nextInt();
        String a;
        StringBuilder num;
        StringBuilder men;
        int i=1;
        int mayor;
        int menor;
        int indMayor, indMenor, aux;
        char inicio;
        
        while(i<=n){
            a=sc.next();
            num=new StringBuilder(a);
            men=new StringBuilder(a);
            inicio=num.charAt(0);
            mayor=0;
            menor=num.charAt(0)-48;
            indMayor=0;
            indMenor=0;
            for(int j=num.length()-1; j>0; j--){
                aux=num.charAt(j)-48;
                if(aux>mayor){
                    mayor=aux;
                    indMayor=j;
                }
                if(aux<menor && aux>0){
                    menor=aux;
                    indMenor=j;
                }
            }
            
            num.replace(0, 1, mayor+"");
            num.replace(indMayor, indMayor+1, inicio+"");
            
            men.replace(0, 1, menor+"");
            men.replace(indMenor, indMenor+1, inicio+"");

            System.out.println("Case #"+i+": "+men+" "+num);
            i++;
        }
    }
    


    /**
     * Versión sobreescrita con todos los metodos posibles
     */
    static class Scanner{

        InputStreamReader en = new InputStreamReader(System.in);
        BufferedReader in = new BufferedReader(en);
        StringTokenizer st = new StringTokenizer("");

        
        /*---------------------METODOS INDISPENSABLES------------------*/
        
        /**
         * Recibe linea a linea de la entrada estandar
         * @return un string con la linea recibida
         * @throws IOException
         */
        public String nextLine() throws IOException {
             return in.readLine();
        }

        /**
         * Recibe un entero o rompe la ejecución si no hay mas datos
         * @return entero con el numero recibido
         * @throws IOException
         */
        public int nextIntOrQuit() throws IOException {
            Integer n = nextInteger();
            if (n == null) {
                System.exit(0);
            }
            return n.intValue();
        }

        /**
         * Lee una palabra, separada por espacio o salto de linea
         * @return string con la palabra
         * @throws IOException
         */
        public String next() throws IOException{
            while (!st.hasMoreTokens()) {
                String l = nextLine();
                if (l == null) {
                    return null;
                }
                st = new StringTokenizer(l);
            }
            return st.nextToken();
        }
        
        /**
         * Lee una palabra, separada por espacio o salto de linea, rompe la
         * ejecución si no existe la palabra
         * @return string con la palabra
         * @throws IOException
         */
        public String nextOrQuit() throws IOException{
            while (!st.hasMoreTokens()) {
                String l = nextLine();
                if (l == null) {
                    System.exit(0);
                }
                st = new StringTokenizer(l);
            }
            return st.nextToken();
        }
        
        /**
         * Metodo que retorna el siguiente entero recibido por input estandar
         * IMPORTANTE: Retorna el dato con tipo primitivo int
         * @return entero recibido por entrada estandar
         * @throws IOException
         */
        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }
        
        /**
         * Recibe el siguiente entero, no como tipo primitivo sino como tipo
         * Integer
         * @return entero del tipo Integer (no primitivo)
         * @throws IOException
         */
        public Integer nextInteger() throws IOException {
            String s = next();
            if (s == null) {
                return null;
            }
            return Integer.parseInt(s);
        }
        
    }
}


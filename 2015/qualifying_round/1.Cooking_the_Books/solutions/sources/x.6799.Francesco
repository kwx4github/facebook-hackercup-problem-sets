
class P1(object):
    def run(self, input):
        i = 1
        output = []
        for line in input:
            smallest, largest = self.single_number(line)
            output.append("Case #%d: %s %s" % (i, smallest, largest))
            i += 1

        return "\n".join(output)

    def single_number(self, number):
        smallest = self.compute_smallest(number)
        largest = self.compute_largest(number)
        return [smallest, largest]


    def compute_smallest(self, number):
        digits = list(number)
        sorted_digits = sorted(digits)
        smallest_digit = sorted_digits[0]
        least_sign_index = number.rfind(smallest_digit)
        most_sign_index_ne_smallest = 0 if smallest_digit != '0' else 1
        for digit in digits[0:least_sign_index]:
            if digit != smallest_digit:
                break
            most_sign_index_ne_smallest += 1

        if most_sign_index_ne_smallest == len(digits):
            return number

        digits[most_sign_index_ne_smallest], digits[least_sign_index] = digits[least_sign_index], digits[most_sign_index_ne_smallest]
        
        return ''.join(digits)

    def compute_largest(self, number):
        digits = list(number)
        sorted_digits = sorted(digits, reverse=True)
        largest_digit = sorted_digits[0]
        least_sign_index = number.rfind(largest_digit)
        most_sign_index_ne_largest = 0
        for digit in digits[0:least_sign_index]:
            if (digit != largest_digit) and (digit != '0' or most_sign_index_ne_largest > 0):
                break
            most_sign_index_ne_largest += 1

        digits[most_sign_index_ne_largest], digits[least_sign_index] = digits[least_sign_index], digits[most_sign_index_ne_largest]
        
        return ''.join(digits)

if __name__ == '__main__':
    from sys import argv
    filename = argv[1]
    lines = open(filename).readlines()
    lines = map(lambda line: line.strip(), lines)
    p1 = P1()
    print p1.run(lines[1:])

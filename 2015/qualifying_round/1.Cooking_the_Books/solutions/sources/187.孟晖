#include <iostream>
#include <vector>

using namespace std;

long long make(vector<int> digits) {
    long long r = 0;
    while (digits.size() > 0) {
        r = r * 10 + digits.back();
        digits.pop_back();
    }
    return r;
}

long long small(long long n) {
    if (n == 0)
        return 0;
    vector<int> digits;
    while (n > 0) {
        digits.push_back(n % 10);
        n /= 10;
    }
    
    for (int k = 0; k + 1 < digits.size(); ++k) {
        int smallest_i = -1;
        for (int i = 0; i < digits.size() - k; ++i)
            if ((smallest_i == -1 || digits[i] < digits[smallest_i]) && (k > 0 || digits[i] > 0))
                smallest_i = i;
        if (digits[digits.size() - 1 - k] != digits[smallest_i]) {
            swap(digits[digits.size() - 1 - k], digits[smallest_i]);
            break;
        }
    }
    return make(digits);
}

long long big(long long n) {
    if (n == 0)
        return 0;
    vector<int> digits;
    while (n > 0) {
        digits.push_back(n % 10);
        n /= 10;
    }
    
    for (int k = 0; k + 1 < digits.size(); ++k) {
        int biggest_i = -1;
        for (int i = 0; i < digits.size() - k; ++i)
            if (biggest_i == -1 || digits[i] > digits[biggest_i])
                biggest_i = i;
        if (digits[digits.size() - 1 - k] != digits[biggest_i]) {
            swap(digits[digits.size() - 1 - k], digits[biggest_i]);
            break;
        }
    }
    return make(digits);
}

int main() {
    int T;
    cin >> T;
    for (int cs = 1; cs <= T; ++cs) {
        long long n;
        cin >> n;
        cout << "Case #" << cs << ": " << small(n) << " " << big(n) << endl;
    }
    return 0;
}

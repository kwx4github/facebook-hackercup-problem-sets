package qualification_round;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;

public class CookingTheBooks {

	public static void main(String[] args) throws FileNotFoundException {

		String fileIn = "C:/Users/Valentin/workspace/FacebookHackerCup/src/qualification_round/cooking_the_books.txt";
		String fileOut = "C:/Users/Valentin/workspace/FacebookHackerCup/src/qualification_round/test.out";
		System.setIn(new FileInputStream(fileIn));
		System.setOut(new PrintStream(fileOut));

		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		for (int i = 0; i < t; i++) {
			String nb = String.valueOf(sc.nextLong());
			int idxMax = -1;
			int currMax = -1;
			int currMin = 10;
			int idxMin = -1;
			int pred = Character.getNumericValue(nb.charAt(0));
			// for MIN
			for (int j = 1; j < nb.length(); j++) {
				int curr = Character.getNumericValue(nb.charAt(j));
				if (curr < pred) {
					currMin = curr;
					idxMin = j;
					for (int k = j + 1; k < nb.length(); k++) {
						int temp = Character.getNumericValue(nb.charAt(k));
						if (temp < currMin) {
							currMin = temp;
							idxMin = k;
						}
					}
					break;
				}
				pred = curr;

			}

			// for MAX
			pred = Character.getNumericValue(nb.charAt(0));
			for (int j = 1; j < nb.length(); j++) {
				int curr = Character.getNumericValue(nb.charAt(j));
				if (curr > pred) {
					currMax = curr;
					idxMax = j;
					for (int k = j + 1; k < nb.length(); k++) {
						int temp = Character.getNumericValue(nb.charAt(k));
						if (temp > currMax) {
							currMax = temp;
							idxMax = k;
						}
					}
					break;
				}
				pred = curr;

			}
			String minNb = "";
			String maxNb = "";
			boolean done = false;
			// for MIN
			if (idxMin == -1) {
				minNb = nb;
			} else {
				char toReplace = '-';
				for (int j = 0; j < nb.length(); j++) {
					if (currMin < Character.getNumericValue(nb.charAt(j))
							&& !done) {
						if (j == 0 && currMin == 0) {
							minNb += nb.charAt(j);
							continue;
						} else {
							minNb += currMin;
							toReplace = nb.charAt(j);
							done = true;
						}
					} else if (j == idxMin && done) {
						minNb += toReplace;
					} else {
						minNb += nb.charAt(j);
					}
				}
			}

			done = false;
			// for MAX
			if (idxMax == -1) {
				maxNb = nb;
			} else {
				char toReplace = '-';
				for (int j = 0; j < nb.length(); j++) {
					if (currMax > Character.getNumericValue(nb.charAt(j))
							&& !done) {
						maxNb += currMax;
						toReplace = nb.charAt(j);
						done = true;
					} else if (j == idxMax) {
						maxNb += toReplace;
					} else {
						maxNb += nb.charAt(j);
					}
				}
			}

			System.out.println("Case #" + (i+1) + ": " + minNb + " " + maxNb);
		}
	}

}

//
//  main.cpp
//
//  Created by Vichare, Vivek on 4/12/14.
//

#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <stdio.h>

using namespace std;
typedef vector <int> vi;
typedef vector<vi> vvi;
typedef long long ll;


template <typename T>
void printAll(T b, T e) {
    if (b == e) {
        cout << 0;
    }
    for (; b != e; ++b) {
        cout << *b;
    }
}

ll process_testcase()
{
    ll N;
    cin >> N;
    
    // split N into individual digits.
    vector<int> digits;
    for (ll i = N; i != 0; i /= 10) {
        digits.push_back(i%10);
    }
    reverse(begin(digits), end(digits));
    //printAll(begin(digits), end(digits));

    // find max possible permutation with a single swap
    vector<int> larger = digits;
    bool done = false;
    for (size_t i = 0;
         (i < larger.size()) && !done;
         ++i) {
        size_t largerIndex = i;
        for (size_t j = i + 1;
             (j != larger.size()) && !done;
             ++j) {
            if (larger[j] > larger[largerIndex]) {
                largerIndex = j;
            } else if (larger[largerIndex] == larger[j]) {
                if (largerIndex != i) {
                    largerIndex = j; // farthest optimal candidate is best for swap
                }
            }
        }
        if (largerIndex != i) {
            swap(larger[i], larger[largerIndex]);
            done = true;
        }
    }
    
    // find min possible permutation with a single swap
    vector<int> smaller = digits;
    done = false;
    for (size_t i = 0;
         (i < smaller.size()) && !done;
         ++i) {
        auto smallerIndex = i;
        for (size_t j = i + 1;
             (j != smaller.size()) && !done;
             ++j) {
            if ((i == 0) && (0 == smaller[j])) {
                continue;
            }
            if (smaller[smallerIndex] > smaller[j]) {
                smallerIndex = j;
            } else if (smaller[smallerIndex] == smaller[j]) {
                if (smallerIndex != i) {
                    smallerIndex = j; // farthest optimal candidate is best for swap
                }
            }
        }
        if (smallerIndex != i) {
            swap(smaller[i], smaller[smallerIndex]);
            done = true;
        }
    }

    printAll(begin(smaller), end(smaller));
    cout << " ";
    printAll(begin(larger), end(larger));
    
    return 0;
}

int main(int argc, char*argv[]) {
    int tc = 0;
    freopen(((argc == 1) ? "inp.txt" : argv[1]), "r", stdin);
    
    // find total number of testcases
    cin >> tc;
    
    // for every testcase
    for(int i = 1; i <= tc; i++)
    {
        printf("Case #%d: ",i);
        process_testcase();
        cout << endl;
    }
    
    return 0;
}


package aleh.atsman.fhc.qualification;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import static java.lang.System.out;

/**
 * Created by Aleh_Atsman on 1/10/2015.
 */
public class CookingTheBooks {

    static Input read() {
        Path path = Paths.get("D:\\projects\\hackathon\\facebook-hacker-cup\\src\\aleh\\atsman\\fhc\\qualification\\cooking_the_books.txt");
        try(Stream<String> stream = Files.lines(path)){
            String[] lines = stream.toArray(String[]::new);
            int n = Integer.parseInt(lines[0]);
            out.println(n);
            int[] numbers = new int[n];
            for (int i = 0; i < n; i++) {
                numbers[i] = Integer.parseInt(lines[i+1]);
                out.println(numbers[i]);
            }
            return new Input(n, numbers);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    static final class Input {
        public final int n;
        public final int[] numbers;

        public Input(int n, int[] numbers) {
            this.n = n;
            this.numbers = numbers;
        }
    }

    public static void main(String args[]) {
        Input input = read();

        int n = input.n;
        int[] numbers = input.numbers;
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < n; i++) {
            int[] parsed = getNumbers(numbers[i]);
            int min = create(parsed, findMin(parsed));
            int max = create(parsed, findMax(parsed));
            print(sb, i, min, max);
        }
        out.println(sb.toString());
        write(sb.toString());
    }

    static void write(String res) {
        Path path = Paths.get("output");
        try {
            Files.write(path, res.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static void print(StringBuilder sb, int i, int min, int max) {
        sb.append("Case #");
        sb.append(i+1);
        sb.append(": ");
        sb.append(min);
        sb.append(" ");
        sb.append(max);
        sb.append("\n");
    }

    static int create(int[] arr, int index) {
        int[] swapped = swap(arr, index);
        return arrayToNumber(swapped);
    }

    static int[] swap(int[] array, int index) {
        int[] res = new int[array.length];
        System.arraycopy(array, 0, res, 0, array.length);

        int swapped = res[index];
        res[index] = res[0];
        res[0] = swapped;

        return res;
    }

    static int arrayToNumber(int[] array) {
        int res = 0;
        int base = 10;
        for(int i = 0; i < array.length; i++) {
            res = res * base + array[i];
        }
        return res;
    }

    static int findMax(int[] array) {
        int index = 0;
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < array.length; i++) {
            if(array[i] > max) {
                max = array[i];
                index = i;
            }
        }
        return index;
    }

    static int findMin(int[] array) {
        int index = 0;
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < array.length; i++) {
            if(array[i] < min && array[i] != 0) {
                min = array[i];
                index = i;
            }
        }
        return index;
    }

    static int[] getNumbers(int x) {
        int length = countNumbersInNumber(x);
        if(length == 0) {
            length = 1;
        }
        int[] numbers = new int[length];
        for(int i = length - 1; i >= 0; i--) {
            numbers[i] = x % 10;
            x = x / 10;
        }
        return numbers;
    }

    static int countNumbersInNumber(int x) {
        int i = 0;
        while(x > 0) {
            i++;
            x = x / 10;
        }
        return i;
    }

}

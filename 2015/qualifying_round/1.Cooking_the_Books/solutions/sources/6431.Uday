package com.facebook.harckercup15Qaul;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class CookingTheBooks {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(reader.readLine());
		StringBuilder builder = new StringBuilder();
		for(int i=0;i<T;i++) {
			char []input = reader.readLine().toCharArray();
			int numLen = input.length;
			int[] nums = new int[numLen];
			int[] numsMax = new int[numLen];
			for(int j=0;j<numLen;j++) {
				nums[j] = numsMax[j] = input[j]-'0';
			}
			builder.append("Case #"+(i+1)+": ");
			if(numLen == 1) {
				builder.append(nums[0] + " "+nums[0]);
			}
			else {
				for(int j=0;j<numLen;j++) {
					int swapElem = min(nums, j+1);
					if(swapElem < nums[j]) {
						swap(nums, j, swapElem);
						break;
					}
				}
				builder.append(getNumFromArray(nums) + " ");
				for(int j=0;j<numLen;j++) {
					int swapElem = max(numsMax, j+1);
					if(swapElem > numsMax[j]) {
						swap(numsMax, j, swapElem);
						break;
					}
				}
				builder.append(getNumFromArray(numsMax));
			}
			builder.append("\n");
		}
		System.out.println(builder.toString());
	}
	
	private static void swap(int []arr, int swapIdx, int swapNum) {
		int arrLen = arr.length;
		for(int j=arrLen-1;j>=0;j--) {
			if(arr[j] == swapNum) {
				arr[j] = arr[swapIdx];
				arr[swapIdx] = swapNum;
				return;
			}
		}
	}
	
	private static int min(int[] arr, int searchStart) {
		int arrLen = arr.length;
		if(searchStart <= arrLen-1) {
			int min = arr[searchStart];
			if(searchStart == 1) {//getNonZeroMin
				min = min == 0 ? 10 : min;
				for(int j=searchStart+1;j<arrLen;j++) {
					if(arr[j] != 0 && arr[j] < min) {
						min = arr[j];
					}
				}
			}
			else {
				for(int j=searchStart+1;j<arrLen;j++) {
					if(arr[j] < min) {
						min = arr[j];
					}
				}
			}
			return min;
		}
		else {
			return 10;
		}
	}
	
	private static int max(int[] arr, int searchStart) {
		int arrLen = arr.length;
		if(searchStart<=arrLen-1) {
			int max = arr[searchStart];
			for(int j=searchStart+1;j<arrLen;j++) {
				if(arr[j] > max) {
					max = arr[j];
				}
			}
			return max;
		}
		else {
			return -1;
		}
	}
	
	private static int getNumFromArray(int[] arr) {
		int arrLen = arr.length;
		int op = 0;
		for(int j=0;j<arrLen;j++) {
			op = (op*10)+arr[j];
		}
		return op;
	}

}

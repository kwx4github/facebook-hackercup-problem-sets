//
//  main.cpp
//  CookingTheBooks
//
//  Created by Monideep De on 1/8/15.
//  Copyright (c) 2015 Monideep De. All rights reserved.
//

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>

using namespace std;

//const char* input_filename = "/Users/monideepde/Downloads/FB_Challenge/cooking_the_books_example_input.txt";
const char* input_filename = "/Users/monideepde/Downloads/FB_Challenge/cooking_the_books.txt";

void getSmallNumber(string input);
void getLargeNumber(string input);


int main(int argc, const char * argv[]) {
    
    ifstream input_file (input_filename);
    int numCases=0, i=0;
    string line;
    
    if(input_file.is_open()) {
        //Input file is now open
        while (getline(input_file, line)) {

            //When to stop reading the input file
            if(i > numCases) {
                break;
            }

            //Get number of test cases
            if(i == 0) {
                numCases = stoi(line);
                i++;
                continue;
            }
            
            cout << "Case #" << i << ": ";
            //TODO: ??
            getSmallNumber(line);
            cout << " ";
            getLargeNumber(line);
            cout << endl;
            
            i++;
        }
        
    } else {
        //else file could not be open
        cout << "Input file could not be opened" << endl;
    }
    
    //Close the input file
    input_file.close();
    
    return 0;
}


void getSmallNumber(string input) {
    int input_size = (int) input.length();
    
    int small_number_array[input_size];
    int pos_tracker = 0;
    
    //Get input in array form
    for(string::iterator it = input.begin(); it != input.end(); ++it) {
        
        small_number_array[pos_tracker] = *it - 48;

        pos_tracker++;
    }
    
    //Form the small number
    
    for(int pivot_pos = 0; pivot_pos < input_size; pivot_pos ++ ) {
        
        int spos=pivot_pos; //nothing found yet
        
        for(pos_tracker = pivot_pos+1; pos_tracker < input_size; pos_tracker++) {
            if(small_number_array[spos] >= small_number_array[pos_tracker]) {
                if(pivot_pos == 0) {
                    if(small_number_array[pos_tracker] !=0) {
                        spos = pos_tracker;
                    }
                } else {
                    
                    spos = pos_tracker;
                }
            }
        }
        
        //We have got the smallest digit in the rest
        if(spos != pivot_pos) {
                int temp = small_number_array[spos];
                small_number_array[spos] = small_number_array[pivot_pos];
                small_number_array[pivot_pos] = temp;
                break; //one swap done, now stop
        }
        
    }
        
        for(int i = 0; i < input_size; i++){
            cout << small_number_array[i];
        }
        
    
}

void getLargeNumber(string input) {
    int input_size = (int) input.length();
    
    int large_number_array[input_size];
    int pos_tracker = 0;
    
    //Get input in array form
    for(string::iterator it = input.begin(); it != input.end(); ++it) {
        
        large_number_array[pos_tracker] = *it - 48;
        
        pos_tracker++;
    }
    
    //Form the large number
    for(int pivot_pos = 0; pivot_pos < input_size; pivot_pos++) {
        int lpos=pivot_pos;
        
        for(pos_tracker = pivot_pos+1; pos_tracker < input_size; pos_tracker++) {
            if(large_number_array[lpos] <= large_number_array[pos_tracker]) {
                lpos = pos_tracker;
            }
        }
        
        //We have the largest difit in the rest
        if(lpos != pivot_pos) {
            int temp = large_number_array[lpos];
            large_number_array[lpos] = large_number_array[pivot_pos];
            large_number_array[pivot_pos] = temp;
            break; // one swap done, now stop
        }
    }
    
    //print the largest number found
    for(int i = 0; i < input_size; i++){
        cout << large_number_array[i];
    }
    
}




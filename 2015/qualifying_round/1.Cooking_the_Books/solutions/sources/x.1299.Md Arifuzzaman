import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.InputMismatchException;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("cookingthebooks.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("cookingthebooks.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CookingTheBooks {
    public int[] toDigitArray(int n) {
        String temp = Integer.toString(n);
        int[] d = new int[temp.length()];
        for (int i = 0; i < temp.length(); i++)
        {
            d[i] = temp.charAt(i) - '0';
        }
        return d;
    }
    public int toInt(int[] d) {
        int res = 0;
        for (int i = 0; i < d.length; ++i) {
            res = res * 10 + d[i];
        }
        return res;
    }

    public int getMin(int n) {
        int[] d = toDigitArray(n);

        int cur = d[0];
        int curPos = 0;
        for (int i = d.length - 1; i > 0; --i) {
            if (d[i] > 0 && d[i] < cur) {
                cur = d[i];
                curPos = i;
            }
        }
        int temp = d[curPos];
        d[curPos] = d[0];
        d[0] = temp;
        return toInt(d);
    }

    public int getMax(int n) {
        int[] d = toDigitArray(n);

        int cur = d[0];
        int curPos = 0;
        for (int i = d.length - 1; i > 0; --i) {
            if (d[i] > cur) {
                cur = d[i];
                curPos = i;
            }
        }
        int temp = d[curPos];
        d[curPos] = d[0];
        d[0] = temp;
        return toInt(d);
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int n = in.readInt();
        out.printf("Case #%d: %d %d\n", testNumber, getMin(n), getMax(n));
    }
}

class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        // InputMismatchException -> UnknownError
        if (numChars == -1)
            throw new UnknownError();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new UnknownError();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        } else if (c == '+') {
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public static boolean isSpaceChar(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String next() {
        return readString();
    }

}


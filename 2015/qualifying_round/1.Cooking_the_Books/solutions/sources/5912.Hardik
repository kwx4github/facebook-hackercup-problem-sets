#include <vector>/*{{{*/
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define pb push_back
#define rep(Start,start,end) for(int Start=start;Start<end;Start++)
#define REP(Start,start,end) for(int Start=start;Start<=end;Start++)
#define vi vector<int>
#define vit vector<int>::iterator
#define pii pair<int,int>
#define all(c) c.begin(),c.end()
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pv(container) tr(container,it) { cout<<(*it)<<" "; } cout<<"\n";
#define parr(ARR,END) rep(START,0,END) cout<<ARR[START]<<" "; cout<<"\n";
#define llint long long int
#define IOS ios::sync_with_stdio(false); cin.tie(0);
#define dg(args...)            {debg,args; cerr<<endl;}
using namespace std;

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }
} debg;

/*}}}*/
#define MAX 100
#define inf 0x7fffffff
//#define dg(params...) ({})
#define pci pair<char,int>

string swp(string str,int a,int b) {
	char ch=str[a];
	str[a]=str[b];

	str[b]=ch;
	return str;
}

int main() {
	int n;
	string str,small,large,tmp;
	
	cin>>n;
	rep(t,0,n) {
		cin>>str;
		small=str;
		large=str;

		rep(x,0,str.length()) {
			rep(y,x+1,str.length()) {

				//cout<<"Check:"<<str[x]<<" "<<str[y]<<"\n";
				//if(str[y]<str[x]) {
					//cout<<"Smaller!yah\n";
					if(!(str[y]=='0' && x==0)) {
						tmp=swp(str,x,y);
						//cout<<tmp<<" ..\n";
						if(tmp<small) small=tmp;
						if(tmp>large) large=tmp;
					}// else cout<<"Not checking:"<<str[x]<<" "<<str[y]<<" At:"<<x<<","<<y<<"\n";
				}
			//}
		}
	cout<<"Case #"<<t+1<<": "<<small<<" "<<large<<"\n";
	}

return 0;
}

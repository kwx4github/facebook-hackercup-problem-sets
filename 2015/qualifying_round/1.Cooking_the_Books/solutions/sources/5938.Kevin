import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;


public class CookingBooks {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader f = new BufferedReader(new FileReader("cooking_the_books.txt"));
        // input file name goes above
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("cookingbooks.txt")));
// Use StringTokenizer vs. readLine/split -- lots faster
		StringTokenizer st = new StringTokenizer(f.readLine());
// Get line, break into tokens
		int lines = Integer.parseInt(st.nextToken());    // first integer
		for (int i = 0; i < lines; i++)
		{
			st = new StringTokenizer(f.readLine());
			out.println(swap(Integer.parseInt(st.nextToken()), i+1));
		}
		
		out.close();                                  // close the output file
		System.exit(0); 
	}

	public static String swap(int x, int casenum)
	{
		String ret = "Case #" + casenum + ": "; 
		char[] chardigits = (""+x).toCharArray();
		int[] digits = new int[chardigits.length];
		for (int i = 0; i < digits.length; i++)
		{
			digits[i]=Integer.parseInt(""+chardigits[i]);
		}
		int maxIndex = digits.length-1;
		int minIndex = digits.length-1;
		int max1Index = digits.length-1;
		int min1Index = digits.length-1;
		int min2Index = digits.length-1;
		int maxTempIndex = digits.length-1;
		int minTempIndex = digits.length-1;
		int minTemp2Index = digits.length-1;
		for (int i = digits.length-1; i >=0; i--)
		{
			if (digits[i]>digits[maxIndex])
			{
				maxIndex = i;
			}
			if (digits[i]<digits[minIndex])
			{
				minIndex = i;
			}
			if (digits[i]<digits[maxIndex])
			{
				max1Index = i;
				maxTempIndex = maxIndex;
			}
			if (digits[i]>digits[minIndex])
			{
				min2Index = min1Index;
				min1Index = i;
				minTemp2Index = minTempIndex;
				minTempIndex = minIndex;
			}
		}
		if (min1Index==0)
		{
			int minNot0Index = 0;
			for (int i = 0; i < digits.length; i++)
			{
				if (digits[minNot0Index]>=digits[i]&& digits[i]!=0)
				{
					minNot0Index = i;
				}
			}
			if (digits[minNot0Index]==digits[0])
			{
				min1Index = min2Index;
				minTempIndex = minTemp2Index;
			}
			else
			{
				minTempIndex = minNot0Index;
			}
		}
		int[] digitsMax = new int[digits.length];
		int[] digitsMin = new int[digits.length];
		for (int i = 0; i < digits.length; i++)
		{
			digitsMax[i]=digits[i];
			digitsMin[i]=digits[i];
		}
		int a = digitsMax[max1Index];
		int b = digitsMax[maxTempIndex];
		digitsMax[max1Index]=b;
		digitsMax[maxTempIndex]=a;
		a = digitsMin[min1Index];
		b = digitsMin[minTempIndex];
		digitsMin[min1Index]=b;
		digitsMin[minTempIndex]=a;
		String max = "";
		String min ="";
		for (int i = 0; i < digits.length; i++)
		{
			max += digitsMax[i];
			min += digitsMin[i];
		}
		ret += min + " " + max;
		return ret;
	}
}

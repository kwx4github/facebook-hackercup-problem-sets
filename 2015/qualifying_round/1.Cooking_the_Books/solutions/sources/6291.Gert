import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.ArrayList;
import java.util.Collections;


public class CookingBook {
	private static DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	
	
	public static void solveProblem(String inputFile, String outputFile) throws IOException {
		BufferedReader reader = null;
		BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));
		
		try {
			reader = new BufferedReader(new FileReader(inputFile));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		int nbOfCases = 0;
		try {
			nbOfCases = Integer.parseInt(reader.readLine());
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} 
		
		for (int i = 0; i < nbOfCases; i++) {
			solveSubproblem(reader, writer, i+1);
		}
		
		//... Close reader and writer.
        reader.close();  // Close to unlock.
        writer.close();  // Close to unlock and flush to disk.
	}
	
	private static void solveSubproblem(BufferedReader reader, BufferedWriter writer, int caseNb) throws IOException {
		String line = reader.readLine();
		ArrayList<Integer> combinations = getAllCombinations(line);
		Collections.sort(combinations);
		int smallestNumber = combinations.get(0);
		int largestNumber = combinations.get(combinations.size() - 1);
		writer.write("Case #" + caseNb + ": " + smallestNumber + " " +  largestNumber  + "\n");

		Calendar cal = Calendar.getInstance();
		System.out.println(dateFormat.format(cal.getTime()));
		System.out.println("Case " + caseNb + " solved at " + dateFormat.format(cal.getTime()));
		
	}
	
	private static ArrayList<Integer> getAllCombinations(String number) {
		ArrayList<Integer> combinations = new ArrayList<Integer>();
		combinations.add(new Integer(number));
		for (int swapFrom = 1; swapFrom < number.length(); swapFrom++) {
			String digit = number.substring(swapFrom, swapFrom+1);
			for (int swapTo = 0; swapTo < number.length(); swapTo++) {
				if (!(swapTo == 0 && digit.equals("0")) && swapFrom != swapTo) {
					combinations.add(new Integer(swapNumbers(number, swapFrom, swapTo)));
				}
			}
		}
		return combinations;
	}
	
	private static int swapNumbers(String number, int posFrom, int posTo) {
		char[] numberChars = number.toCharArray();
		char digitFrom = numberChars[posFrom];
		char digitTo = numberChars[posTo];
		numberChars[posFrom] = digitTo;
		numberChars[posTo] = digitFrom;
		/*String newNumber = "";
		for (int i = 0; i < number.length(); i++) {
			if (i == posFrom) {
				newNumber = newNumber.concat(number.substring(posTo, posTo+1));
			} else if (i == posTo) {
				newNumber = newNumber.concat(number.substring(posFrom, posFrom+1));
			} else {
				newNumber = newNumber.concat(number.substring(i, i+1));
			}
		}*/
		return Integer.parseInt(new String(numberChars));
	}
	
	public static void main(String[] args) {
		String filePath = "D://Users//Schrijvers//Documents//Gert werk//Competitions//Facebook Hacker Cup 2015//Qualification round//1 Cooking the Books//";
		String fromFile = filePath + "input//cooking_the_books.txt";
		String toFile = filePath + "output//output.txt";
		try {
			Calendar cal = Calendar.getInstance();
			System.out.println(dateFormat.format(cal.getTime()));
			System.out.println("Calculation started at " + dateFormat.format(cal.getTime()));
			solveProblem(fromFile, toFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Problem solved");
	}

}

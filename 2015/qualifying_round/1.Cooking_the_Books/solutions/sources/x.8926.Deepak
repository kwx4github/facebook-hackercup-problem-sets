import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

class ProblemA {

	void solve(Scanner sc, PrintWriter pw) 
	{
		long num=sc.nextLong();
		ArrayList<Long> list=new ArrayList<>();
		
		long temp=num;
		
		while(temp!=0)
		{
			list.add(temp%10);
			temp/=10;
		}

		if(list.size()==1 || num==0)
		{
			pw.println(num+" "+num);
		}
		else
		{
			int minPosition=list.size()-1;
			int maxPosition=list.size()-1;
			long min=list.get(minPosition);
			long max=list.get(maxPosition);
			boolean minSwap=false;
			boolean maxSwap=false;
			
			for(int i=list.size()-1;i>=0;i--)
			{
				if(list.get(i)!=0 && list.get(i)<min)
				{
					minPosition=i;
					min=list.get(i);
					minSwap=true;
				}
				
				if(list.get(i)!=0 && list.get(i)>max)
				{
					maxPosition=i;
					max=list.get(i);
					maxSwap=true;
				}
			}
			
			if(minSwap)
			{
				temp=list.get(minPosition);
				list.set(minPosition, list.get(list.size()-1));
				list.set(list.size()-1, temp);
				min=0;
				
				for(int i=list.size()-1;i>=0;i--)
				{
					min*=10;
					min+=list.get(i);
				}
			}
			else
			{
				min=num;
			}
			
			if(maxSwap)
			{
				list.clear();
				
				temp=num;
				while(temp!=0)
				{
					list.add(temp%10);
					temp/=10;
				}
				
				temp=list.get(maxPosition);
				list.set(maxPosition, list.get(list.size()-1));
				list.set(list.size()-1, temp);
				max=0;
				
				for(int i=list.size()-1;i>=0;i--)
				{
					max*=10;
					max+=list.get(i);
				}
			}
			else
			{
				max=num;
			}
			
			pw.println(min+" "+max);
		}
	}

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(new FileReader("cooking_the_books.in"));
		PrintWriter pw = new PrintWriter(new FileWriter(
				"C:\\Users\\h r srinivasa\\Desktop\\output_ok.out"));
		int testCount = sc.nextInt();

		for (int testCase = 1; testCase <= testCount; testCase++) {
			System.out.println("Processing test case " + testCase);
			pw.print("Case #" + testCase + ": ");
			new ProblemA().solve(sc, pw);
		}

		pw.flush();
		pw.close();
		sc.close();
	}
}

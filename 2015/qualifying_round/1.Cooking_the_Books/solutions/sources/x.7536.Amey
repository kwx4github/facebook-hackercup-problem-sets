package hackercup;

/* ***************************************************************************************************************************
*    Input : Provide input from the console.                                                                                                                                                  *
*    Output: output will be created in a folder HackerCup_AmeyJain and output file name will be output_cookingtheBooks.txt       * 
******************************************************************************************************************************/
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;

public class MinMaxfromNumber {
	public static void main(String[] args) {
		new MinMaxfromNumber().getinput();
	}

	public void getinput() {
		FileInputStream is = null;
		try {
			is = new FileInputStream(new File(
					"../Cracking the Code/src/cooking_the_books.txt"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		PrintWriter out = null;
		Scanner s = new Scanner(System.in);
		int numberofInput = s.nextInt();
		for (int i = 0; i < numberofInput; i++) {
			String num = s.next();
			String min = findMin(num);
			char c[] = num.toCharArray();
			Arrays.sort(c);
			String max = findMax(num);
			File dir = new File("HackerCup_AmeyJain");
			dir.mkdirs();
			File output1 = new File(dir, "output_cookingtheBooks.txt");
			try {
				output1.createNewFile();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			try {
				out = new PrintWriter(new BufferedWriter(new FileWriter(
						output1, true)));
				out.println("Case #" + (i + 1) + ": " + min + " " + max);
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (out != null)
					out.close();
			}
		}
	}

	private String findMax(String num) {
		if (Integer.parseInt(num) == 0)
			return Integer.parseInt(num) + "";
		// eliminating leading zero
		num = Integer.parseInt(num) + "";
		char c[] = num.toCharArray();
		Arrays.sort(c);
		int exchangeIndex = 0;
		int i = c.length - 1;
		char maxNumber = c[c.length - 1];
		if (c[i] == num.charAt(exchangeIndex)) {
			out: while (exchangeIndex < num.length()) {
				// System.out.println("in while exh idx " + exchangeIndex);
				exchangeIndex++;
				if (exchangeIndex == num.length())
					break;
				for (i = 0; i < c.length; i++) {
					// now form the sorted array I have to find the a number
					// smaller
					// than
					// the number at exchangeIndex in original number
					//
					if (c[i] > num.charAt(exchangeIndex)
							&& num.lastIndexOf(c[i]) > exchangeIndex)
						break out;
					if (c[i] > num.charAt(exchangeIndex))
						break;
				}
			}
		}
		if (exchangeIndex == num.length()) {
			return num; // no number smaller than it can be found
		}
		StringBuilder st = new StringBuilder(num);
		int lastIndexofMaxElement = st.lastIndexOf(c[i] + "");

		st.setCharAt(lastIndexofMaxElement, num.charAt(exchangeIndex));
		st.setCharAt(exchangeIndex, c[i]);
		return st.toString();
	}

	// if first position element is equal to the number to be exchanged(greater
	// than zero)
	// then increase the position from first to second and now search for lowest
	// including zero
	private String findMin(String num) {
		if (Integer.parseInt(num) == 0)
			return "0";
		num = Integer.parseInt(num) + "";
		char c[] = num.toCharArray();
		Arrays.sort(c);
		int i = 0;
		// skip the zeros that may have come in front by sorting
		// I have to find next element greater than num[0] and smaller than
		// num[length]
		int exchangeIndex = 0;
		for (i = 0; i < c.length; i++) {
			if (c[i] != '0')
				break;
		}
		// System.out.println("number to be ex " + c[i]);
		// this means that the first position number is smallest except if the
		// number has zero
		// exchangeIndex++;
		if (c[i] == num.charAt(exchangeIndex)) {
			out: while (exchangeIndex < num.length()) {
				// System.out.println("in while exh idx " + exchangeIndex);
				exchangeIndex++;
				if (exchangeIndex == num.length())
					break;
				for (i = 0; i < c.length; i++) {
					// now form the sorted array I have to find the a number
					// smaller
					// than
					// the number at exchangeIndex in original number
					//
					if (c[i] < num.charAt(exchangeIndex)
							&& num.lastIndexOf(c[i]) > exchangeIndex)
						break out;
					if (c[i] > num.charAt(exchangeIndex))
						break;
					// exchangeIndex++;
				}
			}
		}
		if (exchangeIndex == num.length()) {
			return num; // no number smaller than it can be found
		}
		// System.out.println("index of non zero element " + i);
		// c[i] is the minimum element;
		StringBuilder st = new StringBuilder(num);
		int lastIndexofMinimumElement = st.lastIndexOf(c[i] + "");
		char minElement = c[i];
		st.setCharAt(lastIndexofMinimumElement, num.charAt(exchangeIndex));
		st.setCharAt(exchangeIndex, minElement);
		return st.toString();
	}

}
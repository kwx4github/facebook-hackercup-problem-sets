/**
 * Created by helfper on 09/01/2015.
 */
object CookingBooks {
  def main(args: Array[String]) {
    val t = io.StdIn.readInt
    1.to(t).foreach(solve)
  }

  def solve(i: Int) {
    val n = io.StdIn.readLine
    val small = smallest(n)
    val large = largest(n)
    println(s"Case #$i: $small $large")
  }

  def smallest(n: String): String = {
    def smallestAux(n: String, zero: Boolean): String = {
      if (n.isEmpty) n
      else {
        val minn = n.min
        val min = n.lastIndexOf(minn)
        if (min == 0 || (zero == false && n.charAt(min) == '0')) n.head + smallestAux(n.tail, true)
        else n.charAt(min) + n.zipWithIndex.map(p => if (p._2 == min) n.charAt(0) else p._1).tail.mkString
      }
    }

    smallestAux(n, false)
  }

  def largest(n: String): String = {
    def largestAux(n: String, zero: Boolean): String = {
      if (n.isEmpty) n
      else {
        val maxn = n.max
        val max = n.lastIndexOf(maxn)
        if (max == 0 || (zero == false && n.charAt(max) == '0')) n.head + largestAux(n.tail, true)
        else n.charAt(max) + n.zipWithIndex.map(p => if (p._2 == max) n.charAt(0) else p._1).tail.mkString
      }
    }

    largestAux(n, false)
  }
}

//Mario Vivas David
/*
 Every business can make use of a good accountant and, if they're not big on 
 following the law, sometimes a bad one. Bad accountants try to make more money
 for their employers by fudging numbers without getting caught.

Sometimes a bad accountant wants to make a number larger, and sometimes smaller.
 It is widely known that tax auditors will fail to notice two digits being 
 swapped in any given number, but any discrepancy more egregious will certainly
 be caught. It's also painfully obvious when a number has fewer digits than it 
 ought to, so a bad accountant will never swap the first digit of a number with 
 a 0.

Given a number, how small or large can it be made without being found out?
Input

Input begins with an integer T, the number of numbers that need tweaking. Each
 of the next T lines contains a integer N.
Output

For the ith number, print a line containing "Case #i: " followed by the smallest 
and largest numbers that can be made from the original number N, using at most
 a single swap and following the rules above.
 
Constraints

1 ≤ T ≤ 100
0 ≤ N ≤ 999999999
N will never begin with a leading 0 unless N = 0
*/

using System;
using System.IO;
using System.Text;

public class Program
{
	public static int CalculateMax (int n)
	{
		StringBuilder number = new StringBuilder(Convert.ToString(n));
		int major = n;
		char aux;
		
		if (number.Length == 1)
			return Convert.ToInt32(number.ToString());
		
		for ( int i = 0; i < number.Length-1; i++)
		{
			for (int j = i+1; j < number.Length; j++)
			{
				aux = number[i];
				number[i] = number[j];
				number[j] = aux;
				
				if (Convert.ToInt32(number.ToString()) > major)
					major = Convert.ToInt32(number.ToString());
				
				aux = number[i];
				number[i] = number[j];
				number[j] = aux;
			}
		}
		
		return major;
	}
	
	
	public static int CalculateMin (int n)
	{
		StringBuilder number = new StringBuilder(Convert.ToString(n));
		int minor = n;
		char aux;
		
		if (number.Length == 1)
			return Convert.ToInt32(number.ToString());
		
		for ( int i = 0; i < number.Length-1; i++)
		{
			for (int j = i+1; j < number.Length; j++)
			{
				aux = number[i];
				number[i] = number[j];
				number[j] = aux;

				if (number[0] == '0')
				{
					aux = number[i];
					number[i] = number[j];
					number[j] = aux;
					continue;
				}
				
				if (Convert.ToInt32(number.ToString()) < minor)
					minor = Convert.ToInt32(number.ToString());
			}
		}
		
		return minor;
	}
	
	
	public static void Main(string[] args)
	{
		StreamWriter file = File.CreateText("output.txt");
		const byte MIN_CASES = 1;
		const byte MAX_CASES = 100;
		const int MIN_INTEGER = 0;
		const int MAX_INTEGER = 999999999;
		
		int cases;
		int[] numbers;
		
		if ( args.Length > 0)
			Console.SetIn(new StreamReader(args[0]));
		
		cases = Convert.ToInt32(Console.ReadLine());
		if (cases < MIN_CASES || cases > MAX_CASES )
			Environment.Exit(1);
		
		numbers = new int[cases];
		
		for(int i = 0; i<cases; i++)
		{
			numbers[i] = Convert.ToInt32(Console.ReadLine());
			if (numbers[i] < MIN_INTEGER || numbers[i] > MAX_INTEGER)
				Environment.Exit(1);
		}
		
		
		for (int i = 0; i<cases; i++)
			file.WriteLine("Case #{0}: {1} {2}", i+1
				, CalculateMin(numbers[i]), CalculateMax(numbers[i]));
		file.Close();
	}
	
}











import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

public class TestClass 
{

	String output = "";
	
	/**
	 * @param args
	 */
	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		
		TestClass t = new TestClass();
		
		t.fbAlgo1();
	}
	
	void fbAlgo1()
	{
		StringBuffer inputBuffer = readInput("cooking_the_books.txt");
		
		String [] inputNumbers = inputBuffer.toString().split(System.lineSeparator());
		
		for (int i = 1; i <= Integer.parseInt(inputNumbers[0]); i++)
		{
			findLargestAndLowest(i, Integer.parseInt(inputNumbers[i]));
		}
		
		writeOutput(output, "cooking_the_books_output.txt");
	}
	
	void findLargestAndLowest(int index, int number)
	{		
		if(number < 10)
		{
			printOutput(number,index, number, number);
			return;
		}
		
		StringBuffer numS = new StringBuffer(String.valueOf(number));
		
		char firstChar = numS.charAt(0);
	
		int minIndex = 0;
		int maxIndex = 0;

		
		for(int i = 1; i < numS.length(); i++)
		{
			int curN = Character.getNumericValue(numS.charAt(i));
			
			if(curN == 0)
			{
				continue;
			}
			
			if(curN >= Character.getNumericValue(numS.charAt(maxIndex)))
			{
				maxIndex = i;
			}
			
			if(curN <= Character.getNumericValue(numS.charAt(minIndex)))
			{
				minIndex = i;
			}
		}
		
		StringBuffer smallest = new StringBuffer(numS.toString());
		
		StringBuffer largest = new StringBuffer(numS.toString());
		
		if(minIndex != 0)
		{
			char sChar = smallest.charAt(minIndex);			
			smallest.setCharAt(minIndex, firstChar);
			smallest.setCharAt(0, sChar);
		}
		
		if(maxIndex != 0)
		{
			char sChar = largest.charAt(maxIndex);			
			largest.setCharAt(maxIndex, firstChar);
			largest.setCharAt(0, sChar);
			
		}
		
		printOutput(number, index, Integer.parseInt(smallest.toString()), Integer.parseInt(largest.toString()));
		
	}
	
	void printOutput(int number, int index, int smallest, int largest)
	{
		output += "Case #"+index + ": " + smallest + " " + largest + System.lineSeparator();
//		System.out.println("Case #"+number + ": " + smallest + " " + largest + System.lineSeparator());
		
	}
	
	StringBuffer readInput(String filename)
	{		
		BufferedReader br = null;
	    try {
	    	br = new BufferedReader(new FileReader(filename));
	    	StringBuffer sb = new StringBuffer();
	        String line = br.readLine();

	        while (line != null) 
	        {
	            sb.append(line);
	            sb.append(System.lineSeparator());
	            line = br.readLine();
	        }
	       return sb;
	    }
	    catch(Exception ex)
	    {
	    	System.out.println("File Read Error");
	    }
	    finally {
	        try {
				br.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    }
	    return null;
	}
	
	void writeOutput(String out, String filename)
	{
		Writer writer = null;

		try {
		    writer = new BufferedWriter(new OutputStreamWriter(
		          new FileOutputStream(filename), "utf-8"));
		    writer.write(output);
		} catch (IOException ex) {
		  // report
		} finally {
		   try {writer.close();} catch (Exception ex) {}
		}		
	}


}

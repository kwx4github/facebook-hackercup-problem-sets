#include <iostream>
#include <fstream>
#include <sstream>
#include <cstring>

using namespace std;

string outHigh(string number, int j);
string outLow(string number, int j);

int main()
{
    ifstream myfile("cooking_the_books.txt");
    string number;
    int inputsize;
    getline(myfile, number);
    stringstream start;
    start << number;
    start >> inputsize;

    ofstream ofs("output.txt");


    for(int i = 0; i < inputsize; ++i)
    {
        getline(myfile, number);
        stringstream ss;
        ss << number;

        int j = 0;
        string outhigh = outHigh(number, j);
        string outlow = outLow(number, j);
        number.clear();


        ofs << "Case #" << i + 1 << ": " << outlow << " " << outhigh << endl;
    }
}

string outHigh(string number, int j)
{
    int init = j;
    int cursor = j;
    int highloc = 0;
    int highest = 0;
    int second = 0;
    int secloc = 0;
    if (number.size() == 1 || j == number.size()) return number;
    while (cursor < number.size())
    {
        if (number[cursor] > highest)
        {
            highest = number[cursor];
            highloc = cursor;
        }
        ++cursor;
    }
    cursor = j;
    while (cursor < number.size())
    {
        if (number[cursor] < highest)
        {
            if (number[cursor] > second)
            {
                second = number[cursor];
                secloc = cursor;
            }
        }
        ++cursor;
    }
    if (highest == number[j])
    {
        return outHigh(number, j + 1);
    }
    else if (number[highloc] != '0')
    {
        swap(number[highloc], number[j]);
        return number;
    }
    else if (number[secloc] == number[j])
    {
        swap(number[highloc], number[j + 1]);

        return number;
    }
    else
    {
        swap(number[secloc], number[j]);
        return number;
    }
}

string outLow(string number, int j)
{
    int init = j;
    int cursor = j;
    int lowloc = 0;
    int secloc = 0;
    int lowest = number[j];
    int second = number[j];
    if (number.size() == 1 || j == number.size()) return number;
    while (cursor < number.size())
    {
        if (number[cursor] <= lowest)
        {
            lowest = number[cursor];
            lowloc = cursor;
        }
        ++cursor;
    }
    cursor = j;
    while (cursor < number.size())
    {
        if (number[cursor] > lowest)
        {
            if (number[cursor] < second)
            {
                second = number[cursor];
                secloc = cursor;
            }
        }
        ++cursor;
    }
    if (lowest == number[j])
    {
        return outLow(number, j + 1);
    }
    else if (number[lowloc] != '0')
    {
        swap(number[lowloc], number[j]);

        return number;
    }
    else if (number[secloc] == number[j])
    {
        swap(number[lowloc], number[j + 1]);

        return number;
    }
    else
    {
        swap(number[secloc], number[j]);
        return number;
    }
}

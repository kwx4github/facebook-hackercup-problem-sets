import java.util.*;
import java.io.*;

public class A {
    FastScanner in;
    PrintWriter out;

    String findSmallest(String s) {
        char[] c = s.toCharArray();
        for (int i = 0; i < c.length; i++) {
            int mini = i;
            for (int j = i + 1; j < c.length; j++) {
                if (c[j] < c[mini]) {
                    if (c[j] != '0' || i != 0) {
                        mini = j;
                    }
                }
            }
            if (mini != i) {
                char tmp = c[mini];
                c[mini] = c[i];
                c[i] = tmp;
                break;
            }
        }
        return new String(c);
    }

    String findLargest(String s) {
        char[] c = s.toCharArray();
        for (int i = 0; i < c.length; i++) {
            int maxi = i;
            for (int j = i + 1; j < c.length; j++) {
                if (c[j] > c[maxi])
                    maxi = j;
            }
            if (maxi != i) {
                char tmp = c[maxi];
                c[maxi] = c[i];
                c[i] = tmp;
                break;
            }
        }
        return new String(c);
    }

    public void solve() throws IOException {
        String s = in.next();
        out.println(findSmallest(s) + " " + findLargest(s));
    }

    public void run() {
        try {
            in = new FastScanner(new File("a.in"));
            out = new PrintWriter(new File("a.out"));

            int t = in.nextInt();
            for (int i = 0; i < t; i++) {
                out.print("Case #" + (i + 1) + ": ");
                solve();
            }

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

    public static void main(String[] arg) {
        new A().run();
    }
}
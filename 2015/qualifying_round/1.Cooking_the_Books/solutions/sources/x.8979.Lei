package facebook;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class CookieAndBook {
	
	public String deal(int[] num) {
		StringBuilder result = new StringBuilder();
		for (int i = 0; i < num.length; i++) {
			int[] r = findMinMax(num[i]);
			result.append("Case #"+(i+1)+": ").append(r[0]).append(" ").append(r[1]).append("\n");
		}
		return result.toString();
	}
	
	private int[] findMinMax(int num) {
		int[] m = new int[2];
		m[0] = num;
		m[1] = num;
		char[] numstr = (""+num).toCharArray();
		int[] maxarray = new int[numstr.length];
		int[] minarray = new int[numstr.length];
		for (int i = 0; i < numstr.length; i++) {
			maxarray[i] = i;
			minarray[i] = i;
		}
		int maxindex = numstr.length - 1;
		int minindex = maxindex;
		int max = Character.getNumericValue(numstr[maxindex]);
		int min = Character.getNumericValue(numstr[minindex]);
		int minindex2 = minindex;
		int min2 = Integer.MAX_VALUE;
		for (int i = numstr.length - 2; i > -1; i--) {
			int n = Character.getNumericValue(numstr[i]);
			if (n < max) {
				maxarray[i] = maxindex;
			} else if (n > max) {
				maxindex = i;
				max = n;
				maxarray[i] = maxindex;
			}
			
			if (n > min) {
				minarray[i] = minindex;
			} else if (n < min) {
				minindex = i;
				min = n;
				minarray[i] = minindex;
			}
			
			if (n < min2 && n > 0) {
				minindex2 = i;
				min2 = n;
			}
		}
		
		for (int i = 0; i < numstr.length; i++) {
			if (maxarray[i] > i) {
				swap(numstr, i, maxarray[i]);
				m[1] = Integer.parseInt(new String(numstr));
				swap(numstr, i, maxarray[i]);
				break;
			}
		}
		
		for (int i = 0; i < numstr.length; i++) {
//			if (minarray[i] > i) {
				if (i == 0 && numstr[minarray[i]] == '0') {
					if (Character.getNumericValue(numstr[i]) > min2) {
						swap(numstr, i, minindex2);
						m[0] = Integer.parseInt(new String(numstr));
						swap(numstr, i, minindex2);
						break;
					}
				} else if (Character.getNumericValue(numstr[i]) > min){
					swap(numstr, i, minarray[i]);
					m[0] = Integer.parseInt(new String(numstr));
					swap(numstr, i, minarray[i]);
					break;
				}
				
//			} 
		}
		
		return m;
	}
	
	private void swap(char[] array, int i, int j) {
		char c = array[j];
		array[j] = array[i];
		array[i] = c;
	}
	
	public static void main(String[] args) throws IOException {
		String inpath = "";
		String outpath = "";
		if (args.length == 2) {
			inpath = args[0];
			outpath = args[1];
		}
		Scanner scanner = new Scanner(new File(inpath));
		int n = 0;
		if (scanner.hasNext()) {
			n = scanner.nextInt();
		}
		
		int[] nums = new int[n];
		int i = 0;
		for (i = 0; i < n && scanner.hasNext(); i++) {
			 nums[i] = scanner.nextInt();
		}
		if (i < n) {
			return;
		}
		scanner.close();
		
		CookieAndBook cab = new CookieAndBook();
		String result = cab.deal(nums);
		System.out.println(result);
		
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(new FileWriter(new File(outpath)));
			bw.write(result);
			bw.flush();
		} catch(Exception e) {
			e.printStackTrace();
			
		} finally {
			if (bw != null) {
				bw.close();
			}
		}
	}
}

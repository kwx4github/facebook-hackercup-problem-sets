import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;


public class BookCooking {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		File f = new File("cooking_the_books.txt");
		try {
			PrintStream pStream = new PrintStream("output.txt");
			int[] x;
			Scanner in = new Scanner(f);
			int T = in.nextInt();
			int line, k = 0;
			for (int t = 0; t < T; t++) {
				line = in.nextInt();
				x = new int[9];
				k = 9;
				while(line != 0) {
					x[--k] = line % 10;
					line = line / 10;
				}
				pStream.println("Case #" + (t+1) + ": " + smallest(x,k) + " " + largest(x,k));
			}

			in.close();
			pStream.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	public static int largest(int[] x, int k) {
		int n = 0, lr = 0, maxj = 0;
		for (int i = k; i < x.length; i++) {
			maxj = i; lr = x[i];
			for (int j = x.length - 1; j >= i; j--) {
				if (x[j] > lr) {
					lr = x[j];
					maxj = j;
				}
			}
			if (maxj != i) {
				swap(x,i,maxj);
				break;
			}
		}
		for (int i = k; i < x.length; i++) {
			n = n*10 + x[i];
		}
		return n; 
	}
	
	public static int smallest(int[] x, int k) {
		int n = 0, sm = 0, minj = 0, si = -1;
		for (int i = k; i < x.length; i++) {
			minj = i; sm = x[i];
			for (int j = x.length - 1; j >= i; j--) {
				if ((x[j] < sm) && (x[j] != 0 || i != k)) {
					sm = x[j];
					minj = j;
				}
			}
			if (minj != i) {
				si = i;
				swap(x,i,minj);
				break;
			}
			
		}
		for (int i = k; i < x.length; i++) {
			n = n*10 + x[i];
		}
		if (si != -1)
		swap(x,si,minj);
		return n; 
	}
	
	public static void swap(int[] x, int p, int q) {
		int temp = x[p];
		x[p] = x[q];
		x[q] = temp;
	}

}

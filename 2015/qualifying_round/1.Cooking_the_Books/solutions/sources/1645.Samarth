# include <stdio.h>
# include <limits.h>
 
#include <iostream>
using namespace std;
#include <math.h> 
#include <string>
#ifndef ONLINE_JUDGE
    #define getcx getchar
#else
    #define getcx getchar_unlocked
#endif
#define MOD 1000000007

#include <fstream>
 
 
inline int inp ()
{
   int n=0;
   int ch=getcx();
   int sign = 1;
   while( ch < '0' || ch > '9' )
   {
     if(ch=='-')
     {
        sign=-1;
     }
     ch=getcx();
   }
   while(  ch >= '0' && ch <= '9' )
       n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   n=n*sign;
   return n; 
}


inline long long inpLong()
{
   long long n = 0;
   int ch = getcx();
   int sign = 1;
   while( ch < '0' || ch > '9' )
   {
       if(ch=='-')
       {
           sign=-1;
       }
       ch=getcx();
   }
   while(  ch >= '0' && ch <= '9' )
   {
       n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   }
   n=n*sign;
   return n;
}

int getNumberOfDigits(long long number);    

long long getNumber(int* Acopy, int digits);

    
int main()
{
	ifstream fin ("cooking_the_books.txt");
	
	ofstream fout ("output1.txt");
		
	
	if (fin.is_open())
	{
		int T;
		
		long long number;
		
		fin>>T;
		
		int A[10];
		int Acopy[10];
		
	    for (int i = 0; i<T; i++)
        {
        	fin>>number;
        	
        	//Find the number of digits
        	int digits = getNumberOfDigits(number);
        	
        	int digits_orig = digits;
        	
        	long long number_original = number;
        	
        	//Fill the digits
        	while (digits > 0)
        	{
        		A[digits - 1] = number%10;
        		number /= 10;
        		digits--;
			}
			
			for (int k=0; k<digits_orig; k++)
			{
				Acopy[k] = A[k];
			}
			
			
			long long minimum = number_original;
			
			long long maximum = number_original;
			
			// Swap and return minimum number
			for (int m=0; m<(digits_orig-1); m++)
			{
				for (int n=(m+1); n<digits_orig; n++)
				{
					if (m == 0 && Acopy[n] == 0)
					{
					}
					else
					{
						
						int temp = Acopy[m];
						Acopy[m] = Acopy[n];
						Acopy[n] = temp;
						
						//check if this is the minimum
						long long mod_number = getNumber(Acopy, digits_orig);
						
						
						if (mod_number < minimum)
						{
							minimum = mod_number ;
						}
						
						if (mod_number > maximum)
						{
							maximum = mod_number ;
						}
						
						//Revert back
						temp = Acopy[m];
						Acopy[m] = Acopy[n];
						Acopy[n] = temp;
					}
					
					
				}
			}
			
			fout<<"Case #"<<(i+1)<<":"<<" "<<minimum<<" "<<maximum<<endl;        	
        	
        }
    }
    
    else cout << "Unable to open file"; 
  
    fin.close();
    fout.close();
    
    cin.get();
	cin.ignore();
	return 0; 	
}


int getNumberOfDigits(long long number)
{
	int numberOfDigits = 0;
	if (number == 0)
	{
		return numberOfDigits;
	}
	else
	{
		while (number > 0)
		{
			numberOfDigits++;
			number /= 10 ;
		}
	}
	return numberOfDigits;
}


long long getNumber(int* Acopy, int digits)
{
	long long number = 0;
	long long multiplier = 1;
	while (digits > 0)
	{
		number += Acopy[digits-1]*multiplier;
		multiplier *= 10;
		digits--;
	}
	
	return number;
	
}


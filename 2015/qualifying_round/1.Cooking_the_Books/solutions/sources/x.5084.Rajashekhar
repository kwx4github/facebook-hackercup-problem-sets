package com.facebook;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Scanner;

public class CookTheBooks {
    public static void main(String[] args) throws Exception {
        Scanner in = new Scanner(System.in);
        long startTime = System.currentTimeMillis();
        //Scanner in = new Scanner(new FileInputStream("/Users/rajashekhar.c/Downloads/new_years_resolution.txt"));
        //Scanner in = new Scanner(new FileInputStream("/Users/rajashekhar.c/Documents/InterviewFeedbackReview/hackerrank"));
        int t = in.nextInt();
        
        long[] outputArMaximum = new long[t];
        long[] outputArMinimum = new long[t];
        for (int i = 0; i < outputArMaximum.length; i++) {
            long inputN = in.nextLong();
            //System.out.println(inputN);
            outputArMinimum[i] = cookTheBookMinimum(inputN);
            outputArMaximum[i] = cookTheBookMaximum(inputN);
        }
        in.close();
        
        String outputStr = "";
        for (int i = 0; i < outputArMaximum.length; i++) {
            String temp = "Case #" + (i+1) + ": " + outputArMinimum[i] + " " + outputArMaximum[i];
            outputStr += temp + "\n"; 
        }
        //System.out.println(outputStr);
        BufferedWriter writer = new BufferedWriter( new FileWriter( "/Users/rajashekhar.c/Downloads/new_years_resolution_out.txt"));
        writer.write(outputStr);
        writer.close();
        long endTime = System.currentTimeMillis();
        //System.out.println("the total time is " + (endTime-startTime)/1000);
    }
    
    private static long cookTheBookMinimum(long inputN){
        if(inputN/10 == 0){
            return inputN;
        }
        
        long[] tempDigits = new long[20];
        int count = 0;
        
        while(inputN > 0){
            tempDigits[count++] = inputN % 10;
            inputN = inputN / 10;
        }
        
        long[] digits = new long[count];
        for (int i = 0; i < count; i++) {
            digits[i] = tempDigits[count -1 -i];
        }
        
        int minIndex = 0;
        int startIndex = 0;
        for (; startIndex < digits.length - 1; startIndex++) {
            minIndex = startIndex;
            for (int i = startIndex + 1; i < digits.length; i++) {
                if(startIndex == 0 && digits[i] == 0){
                    continue;
                }
                if(digits[minIndex] > digits[i]){
                    minIndex = i;
                }
                
                if(minIndex != startIndex && digits[minIndex] == digits[i]){
                    minIndex = i;
                }
            }
            if(minIndex != startIndex){
                break;
            }
        }
        
        if(startIndex != digits.length - 1){
            if(digits[minIndex] < digits[startIndex]){
                long temp = digits[minIndex];
                digits[minIndex] = digits[startIndex];
                digits[startIndex] = temp;
            }
        }
        
        long outputN = 0;
        for (int i = 0; i < digits.length; i++) {
            outputN = outputN * 10 + digits[i];
        }
        
        //System.out.println(outputN);
        return outputN;
    
    }
    
    private static long cookTheBookMaximum(long inputN){
        if(inputN/10 == 0){
            return inputN;
        }
        
        long[] tempDigits = new long[20];
        int count = 0;
        
        while(inputN > 0){
            tempDigits[count++] = inputN % 10;
            inputN = inputN / 10;
        }
        
        long[] digits = new long[count];
        for (int i = 0; i < count; i++) {
            digits[i] = tempDigits[count -1 -i];
        }
        
        int minIndex = 0;
        int startIndex = 0;
        for (; startIndex < digits.length - 1; startIndex++) {
            minIndex = startIndex;
            for (int i = startIndex + 1; i < digits.length; i++) {
                if(digits[minIndex] < digits[i]){
                    minIndex = i;
                }
            }
            if(minIndex != startIndex){
                break;
            }
        }
        
        if(startIndex != digits.length - 1){
            if(digits[minIndex] > digits[startIndex]){
                long temp = digits[minIndex];
                digits[minIndex] = digits[startIndex];
                digits[startIndex] = temp;
            }
        }
        
        long outputN = 0;
        for (int i = 0; i < digits.length; i++) {
            outputN = outputN * 10 + digits[i];
        }
        
        //System.out.println(outputN);
        return outputN;
    }
}

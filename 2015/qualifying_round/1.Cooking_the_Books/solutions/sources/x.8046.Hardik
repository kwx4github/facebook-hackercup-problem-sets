import java.util.ArrayList;
import java.util.Arrays;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;

/***
 * @author Hardik shah
 * @Email hardik.n.shah60@gmail.com
 * @contact 09426755977
 */
public class cookingBooks {

	public static void main (String[] argv)
	{
		
		ArrayList<String> inPutLines = readInputFilte();
		ArrayList<String> outPutLines = null;
		
		if(inPutLines!=null){
			
			int m = Integer.parseInt(inPutLines.get(0).trim());
			
			if(m>=5 && m<=50)
			{
				outPutLines = new ArrayList<String>();
				for(int i=1;i<=m;i++)
				{
					String tempOutPutLine = new String();
					//System.out.println(inPutLines.get(i).trim().toString());
					
					tempOutPutLine = new String ("Case #"+ (i) +": "+ swapDigit(inPutLines.get(i).trim().toString()));
					System.out.println(tempOutPutLine);
					outPutLines.add(tempOutPutLine);
						
					}
				}
				writeOutPutFile(outPutLines);
			}
			else
			{
				System.out.print("Sorry Constraint for M is not statisfied");
			}
		
	}
	
	//Read Input File
	public static ArrayList<String> readInputFilte ()
	{
		ArrayList<String> strLines = null;
		try{
			FileInputStream fstream = new FileInputStream ("inputFile.txt");
			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			String strLine;
			strLines = new ArrayList<String> ();
//			Read File Line By Line
			while ((strLine = br.readLine()) != null)   {
			  // Print the content on the console
			 // System.out.println (strLine);
			  strLines.add(strLine);
			  }
			//  System.out.print("lenght of Strlines:- "+strLines.size());
			in.close();
			
		}
		catch (Exception e) {
			// TODO: handle exception
			System.err.println("Error: " + e.getMessage());
		}
		return strLines;
	}
	
	public static void writeOutPutFile(ArrayList<String> outPutLines)
	{
		try {
			
			FileWriter fstream = new FileWriter("outputfile.txt");
			BufferedWriter out = new BufferedWriter (fstream);
		
			if(outPutLines != null)
			{
				for(int i=0;i<outPutLines.size();i++)
				{
					out.write(outPutLines.get(i));
					out.newLine();
				}
			}
			else
			{
				out.write("Due to Constraints of M there is no Out Put");
			}
			
			
			out.close();
			
			
		} catch (Exception e) {
			// TODO: handle exception
			System.err.println("Error: " + e.getMessage());
		}
	}
	
	//Real Logic gose here
	public static String swapDigit (String inputString)
	{
//		int originalArray [] = {9,3,5,6,1};
		//int originalArray [] = {5,9,6};
		//int originalArray [] = {1,0,2,3,4};
		//int originalArray [] = {1,2,0};
		//int originalArray [] = {1,0,0,9,1};
		//int originalArray [] = {9,8,7,6,1,1,1,1};
		//int originalArray [] = {3,1,5,2,4};
		//int originalArray [] = {8,9,7};
		//int originalArray [] = {1,2,3};
		//int originalArray [] = {1,0};
		//int originalArray [] = {2,0,0,1};
		
		
		boolean needToSwapMax = false;
		boolean needToSwap = false;
		boolean minSwapDone = false;
		boolean maxSwapDone = false;
		int lastIndexOfMinDigit = 0;
		int firstIndexOfMaxDigit = 0;
		int indexForSwap = 0;
		int indexForSwapMax = 0;
		
		String minNumber  = inputString.toString(); //Integer.parseInt(String.valueOf(minNumber.trim().charAt(i)));
		String maxNumber  = inputString.toString(); //Integer.parseInt(String.valueOf(maxNumber.trim().charAt(i)));
		String sortedArray  =  inputString.toString();
			
		for (int i = 0; i < sortedArray.length(); i++)
		{
			int digitForCompare  = Integer.parseInt(String.valueOf(sortedArray.trim().charAt(i)));
			int digitForCompareMax = Integer.parseInt(String.valueOf(sortedArray.trim().charAt(i)));
			for(int j = i+1; j < sortedArray.length(); j++)
		     {
		    	   		if (i == 0 && minSwapDone == false) 
		    	   		{
		    	   			if(digitForCompare >= Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j))) 
		    	   					&& Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j))) != 0)
		    	   			{
		    	   					//System.out.println(digitForCompare + "<="+Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j))));
		                	        digitForCompare = Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j)));
		                            needToSwap = true;
		                            lastIndexOfMinDigit = j;
		                            indexForSwap = i;
		    	   			}
		    	   		}
		    	   		if (i != 0 && digitForCompare != 0 && minSwapDone == false) 
		    	   		{
		    	   			if(digitForCompare >= Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j))))
		    	   			{
		    	   					//System.out.println("in i is not 0  "+digitForCompare + ">="+Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j))));
		                	        digitForCompare = Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j)));
		                            needToSwap = true;
		                            lastIndexOfMinDigit = j;
		                            indexForSwap = i;
		    	   			}
		    	   		}
		    	   		
		    	   		//For Max Digit Swap
		    	   		
		    	   		if(digitForCompareMax < Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j))) && maxSwapDone == false)
	    	   			{
	    	   					//System.out.println("in i is not 0  "+digitForCompareMax + "<"+ Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j))));
	                	        digitForCompareMax = Integer.parseInt(String.valueOf(sortedArray.trim().charAt(j)));
	                            needToSwapMax = true;
	                            firstIndexOfMaxDigit = i;
	                            indexForSwapMax = j;
	    	   			}
		    	   		
		     }
			//Integer.parseInt(String.valueOf(minNumber.trim().charAt(i)));
			if (needToSwap == true && minSwapDone == false)
			{
				char charNeedToSwap = minNumber.charAt(indexForSwap);
				char charForSwap = minNumber.charAt(lastIndexOfMinDigit);
				char tempArray [] = minNumber.toCharArray();
				tempArray[indexForSwap]=charForSwap;
				tempArray[lastIndexOfMinDigit]=charNeedToSwap;
				minNumber = String.valueOf(tempArray);
				
				/*
				minNumber[indexForSwap] = minNumber[indexForSwap]+minNumber[lastIndexOfMinDigit];
				minNumber[lastIndexOfMinDigit] = minNumber [indexForSwap] - minNumber [lastIndexOfMinDigit];
				minNumber[indexForSwap] = minNumber [indexForSwap] - minNumber [lastIndexOfMinDigit];
				System.out.println("in if before break");
				//break;
				 * */
				minSwapDone = true;
			}
//			Integer.parseInt(String.valueOf(maxNumber.trim().charAt(i)));
			if (needToSwapMax == true && maxSwapDone == false)
			{
				char charNeedToSwap = maxNumber.charAt(indexForSwapMax);
				char charForSwap = maxNumber.charAt(firstIndexOfMaxDigit);
				char tempArray [] = maxNumber.toCharArray();
				tempArray[indexForSwapMax]=charForSwap;
				tempArray[firstIndexOfMaxDigit]=charNeedToSwap;
				maxNumber = String.valueOf(tempArray);
				/*
				maxNumber[indexForSwapMax] = maxNumber[indexForSwapMax]+maxNumber[firstIndexOfMaxDigit];
				maxNumber[firstIndexOfMaxDigit] = maxNumber [indexForSwapMax] - maxNumber [firstIndexOfMaxDigit];
				maxNumber[indexForSwapMax] = maxNumber [indexForSwapMax] - maxNumber [firstIndexOfMaxDigit];
				System.out.println("in if before break to get max Number");
				//break;
				 
				 */
				maxSwapDone = true;
			}
			//System.out.println("after break");
		}
		
		//Print of Resul
		//System.out.print("Min Number after swap:- "+minNumber+"  ");
		/*for (int i = 0; i < minNumber.length; i++)
		{
			System.out.print(minNumber[i]);
		}*/
		
		//System.out.println("Max  Number after swap:- "+maxNumber);
		/*
		for (int i = 0; i < maxNumber.length; i++)
		{
			System.out.print(maxNumber[i]);
		}*/
	
		return minNumber+" "+maxNumber;
	}
}

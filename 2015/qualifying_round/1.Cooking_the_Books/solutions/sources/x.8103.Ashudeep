#include<iostream>
#include<string>
#include<stdio.h>
#include<stdlib.h>
#include<limits>
using namespace std;

int find_pos(int n, int digit,int length, bool ismax)
{
  int temp = n;
  int pos;
  int counter =0;
  while(temp>0)
    {
      int val = temp%10;
      if(val==digit)
      {
	pos = counter;
	break;
      }
      temp = temp/10;
      counter++;
    }
    return pos;
}

int reverse(int num)
{
  int revnum=0;
  while(num>0)
  {
    int temp = num%10;
    revnum = revnum*10+temp;
    num = num/10;
  }
  return revnum;
}

int swap(int n, int pos,int length)
{
  //cout<<"swap"<<n<<" "<<pos<<" "<<length<<"\n";
  if(pos==0)
    return n;
  int rev_num = reverse(n);
  char buff[100];
  int counter=0;
  int returnval=0;
  while(rev_num>0)
  {
    int digit = rev_num%10;
    buff[counter++] = char(digit+48);
    rev_num = rev_num/10;
  }
  int currPos =0;
  //determine currPos
  while(currPos<length)
  {
    if(buff[currPos] == buff[pos])
      currPos++;
    else
      break;
  }
  //cout<<"CurrPos"<<currPos<<"\n";
  if(currPos<length-1)
  {
    char temp = buff[currPos];
    buff[currPos] = buff[pos];
    buff[pos] = temp;

    for(int i=0;i<length;i++)
    {
      returnval =returnval*10+buff[i]-48;
    }
  }
  else
    returnval = n;
  return returnval;
}
int main()
{
  int t;
  cin>>t;
  for(int i=0;i<t;i++)
  {
    int n;
    cin>>n;
    int length=0,min=std::numeric_limits<int>::max(),max=0;
    int mindigit=n%10;
    int maxdigit=0;
    int temp = n;
    bool iterate = true;
    if(n/10==0)
    {
      min = max = n;
      iterate = false;
    }
    if(iterate)
    {
      while(temp>0)
      {
	int digit = temp%10;
	if(digit!=0&&maxdigit<digit)
	  maxdigit = digit;
	if(digit!=0&&mindigit>digit)
	  mindigit = digit;
	temp = temp/10;
	length++;
      }
      int minPos;
      if(mindigit==0)
      {
	min = n;
      }
      else
      {
	minPos = find_pos(n,mindigit,length,false);
	min =swap(n,length-1-minPos,length);
      }
      int maxPos = find_pos(n,maxdigit,length,true);
      
      max = swap(n,length-1-maxPos,length);
      //cout<<minPos<<" "<<maxPos<<" "<<mindigit<<" "<<maxdigit<<"\n";
    }
    
    cout<<"Case #"<<i+1<<": "<<min<<" "<<max<<"\n";
  }
}
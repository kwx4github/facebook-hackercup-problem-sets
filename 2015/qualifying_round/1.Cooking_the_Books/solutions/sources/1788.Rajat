#include <iostream>
#include <vector>
#include <string>
#include <functional>
#include <algorithm>
#define ll long long
using namespace std;
void print(vector<int>v)
{
	for(int i=0;i<v.size();++i)
	{
		cout<<v[i];
	}
}
void searchandreplace(vector<int>v, int index, int num)
{
	for(int i=v.size()-1;i>index;--i)
	{
		if(v[i]==num)
		{
			swap(v[i],v[index]);
			break;
		}
	}
	print(v);
	return;
}

int main(int argc, char const *argv[])
{
	int t;
	cin>>t;
	for(int z=1;z<=t;++z)
	{

		string s;
		cin>>s;
		cout<<"Case #"<<z<<": ";
		int sz=s.size();
		if(s.size()==1)
		{
			cout<<s[0]<<" "<<s[0]<<endl;
			continue;
		}
		vector<int>v1(sz);
		vector<int>v2(sz);
		bool f=0;
		for(int i=0;i<sz;++i)
		{
			v1[i]=s[i]-'0';
			v2[i]=v1[i];
			if(v1[i]==0) f=1;
		}
		int i;
		int index,num;
		bool flag=0;

		sort(v2.begin(), v2.end());
		i=0;
		if(f==1)
		{
			int j=1;
			while(j!=s.size() && v2[j]==0) ++j;
			if(j==s.size())
			{
				print(v1);
			}
			if(v2[j]==v1[0])
			{
				swap(v2[0],v2[j]);
				f=0;
			}
			else
			{
				searchandreplace(v1,0,v2[j]);
			}
		}
		if(f==0)
		{
			for(;i<sz;++i)
			{
				if(v1[i]!=v2[i])
				{
					flag=1;
					index=i;
					num=v2[i];
					searchandreplace(v1,index,num);
					break;
				}
			}
			if(flag==0) print(v1);
		}
		cout<<" ";
		flag=0;
		sort(v2.begin(), v2.end(), greater<int>());
		for(i=0;i<sz;++i)
		{
			if(v1[i]!=v2[i])
			{
				flag=1;
				index=i;
				num=v2[i];
				searchandreplace(v1,index,num);
				break;
			}
		}
		if(flag==0) print(v1);
		cout<<endl;
		/*for(int i=0;i<sz/2;++i)
		{
			s[i]=s[sz-i-1];
		}

		int m1=0,m2=0;//m1=max so far, m2=min so far(indexes)
		int lastindex1=0, lastindex2=0;//lastindex1=current victim
		int lireplacer1=0,lireplacer2=0;//lastindex to be replaced with
		for (int i = 1; i < sz; ++i)
		{
			if(s[i]-'0'<s[m1]-'0')
			{
				lastindex1=i;
				lireplacer1=m1;
			}
			else if(s[i]-'0'>s[m1]-'0') m1=i;
			if(i==sz-1) continue;//handle the case of min of last separately
			if(s[i]-'0'>s[m2]-'0')
			{
				lastindex2=i;
				lireplacer2=m2;
			}
		}*/
	}
	return 0;
}
// require scalac compiler
// compiler command: scalac RoundQ.scala
// Usage
// scala RoundQ <input-file-path> <output-file-path>

import scala.io.Source
import java.io._
import java.nio.file._
import util.control.Breaks._

object RoundQ {
        def main(args: Array[String]) {
                val input = args(0)
                val output = Paths.get(args(1))
                Files.deleteIfExists(output)
                val writer = Files.newBufferedWriter(Files.createFile(output))
                try {
						var idx = 0
						var max = 0
						Source.fromFile(input).getLines().foreach ( line => {
								breakable {
									val num = line.toInt
									if (idx == 0) max = num
									else {
										if (idx <= max) {
											val ints = line.toCharArray()
											val intsm = line.toCharArray()
											var maxi = 0
											var mini = 0
											var zeroi = -1
											var i = 0
											ints.foreach ( char => {
												if (char.asDigit > ints(maxi).asDigit) maxi = i
												if (char.asDigit < ints(mini).asDigit) {
													if (char.asDigit == 0) zeroi = i
													else mini = i
												}
												i = i + 1
											})

											if (ints(mini).asDigit < ints(0).asDigit) {
												var tmp = ints(0)
												ints(0) = ints(mini)
												ints(mini) = tmp
											} else if (ints.length != 1) {
												var tmpi = mini
												if (zeroi != -1) tmpi = zeroi
												var tmp = ints(1)
												ints(1) = ints(tmpi)
												ints(tmpi) = tmp
											}

											var tmp2 = intsm(0)
											intsm(0) = intsm(maxi)
											intsm(maxi) = tmp2
											writer.write("case #" + idx + ": " + new String(ints) + " " + new String(intsm) + "\n")
										} else break
									}
									idx = idx + 1
								}
							})
                 } finally {
                         writer.close();
                 }
        }
}
def swapMin(n)
  ary = n[0].split(//).map(&:to_i)

  i = -1
  swap = nil
  until (i >= ary.length-1) or (i != swap and swap != nil and ary[i] > ary[swap]) do
    i += 1
    if i > 0 
      t = ary[i+1..-1].min
    else #first element, we should ignore zeroes
      t = (ary[i+1..-1].select { |e| e > 0 }).min
    end
    swap = ary[i+1..-1].index(t)
    swap += i+1 unless swap == nil
  end

  if i < ary.length and swap != nil and swap < ary.length
    $stderr.puts "swap #{i} and #{swap}" 
    x = ary[i]
    ary[i] = ary[swap]
    ary[swap] = x
  end

  return ary.join

end

def swapMax(n)
  ary = n[0].split(//).map(&:to_i)

  i = -1
  swap = nil
  until (i >= ary.length-1) or (i != swap and swap != nil and ary[i] < ary[swap]) do
    i += 1
    t = (ary[i+1..-1].select { |e| e > 0 }).max
    swap = ary[i+1..-1].index(t)
    swap += i+1 unless swap == nil
  end

  if i < ary.length and swap != nil and swap < ary.length
    $stderr.puts "swap #{i} and #{swap}" 
    x = ary[i]
    ary[i] = ary[swap]
    ary[swap] = x
  end

  return ary.join

end

def solve(str)
  n = @f.readline.strip.split(/\//) #.map(&:to_i)
  $stderr.puts "n is #{n}"

  return "#{swapMin(n)} #{swapMax(n)}"
end


@f=File.open(ARGV[0] || "input", 'r')
total = @f.readline.to_i
(1..total).each do |i|
  res = solve("#{i}")
  out = 'Case #' + "#{i}: #{res}"
  puts out
  $stderr.puts "------>: #{out}"
end
@f.close

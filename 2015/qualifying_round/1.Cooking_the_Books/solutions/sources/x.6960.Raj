	import java.io.BufferedReader;
	import java.io.InputStreamReader;
	import java.util.StringTokenizer;
	import java.util.*;
	import java.util.Arrays;
	import java.io.BufferedWriter;
	import java.io.IOException;
	import java.io.InputStream;
	import java.io.OutputStream;
	import java.io.OutputStreamWriter;
	import java.io.PrintWriter;
	import java.io.Writer;
	import java.util.ArrayList;
	import java.util.Comparator;
	import java.util.InputMismatchException;
	import java.math.BigDecimal;
    import java.math.BigInteger;

	class Cooking
	{ 
		private static int si[],fi[],pi[];
		public static int length;

		public static void main(String[] args)
		throws Exception
		{
				InputStream inputStream = System.in;
				OutputStream outputStream = System.out;
				FastReader in = new FastReader(inputStream);
				OutputWriter out = new OutputWriter(outputStream);	

			StringBuilder res = new StringBuilder();

			int Z = in.nextInt();

			for(int y=1;y<=Z;y++)
			{
			long N = in.readLong();

			int min=Integer.MAX_VALUE;
			int max=Integer.MIN_VALUE;

			long N2=N;
			int min_index=0, max_index=0;
			int loc = (""+N).length();
			int len= loc;
			loc--;

			while(N2>0)
			{
				int temp= (int)N2%10;

				if(temp!=0)
				{
					if(temp<=min)
					{
						min=temp;
						min_index=loc;
					}

					if(temp>max)
					{
						max=temp;
						max_index=loc;

				
					}
					}

				N2=N2/10;
				loc--;
			}

			//System.out.println("min_index : "+min_index);
			//System.out.println("max_index : "+max_index);

			String str1= N+"";

			if(min_index!=0)
			{
				if(min_index==len-1)
					str1= str1.charAt(min_index)+str1.substring(1,min_index)+str1.charAt(0);
				else
					str1= str1.charAt(min_index)+str1.substring(1,min_index)+str1.charAt(0)+str1.substring(min_index+1);
			}



			String str2= N+"";

			if(max_index!=0)
			{
				if(max_index==len-1)
					str2= str2.charAt(max_index)+str2.substring(1,max_index)+str2.charAt(0);
				else
					str2= str2.charAt(max_index)+str2.substring(1,max_index)+str2.charAt(0)+str2.substring(max_index+1);
			}


			res.append("Case #"+y+": "+str1+" "+str2+"\n");    	
	    }

	    	System.out.print(res);
	    }


	}


	class FastReader {
			private InputStream stream;
			private byte[] buf = new byte[1024];
			private int curChar;
			private int numChars;
			private SpaceCharFilter filter;
	 
			public FastReader(InputStream stream) {
				this.stream = stream;
			}
	 
			public static boolean isWhitespace(int c) {
				return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
			}
	 
			public int read() {
				if (numChars == -1)
					throw new InputMismatchException();
				if (curChar >= numChars) {
					curChar = 0;
					try {
						numChars = stream.read(buf);
					} catch (IOException e) {
						throw new InputMismatchException();
					}
					if (numChars <= 0)
						return -1;
				}
				return buf[curChar++];
			}
	 
			public int nextInt() {
				int c = read();
				while (isSpaceChar(c))
					c = read();
				int sgn = 1;
				if (c == '-') {
					sgn = -1;
					c = read();
				}
				int res = 0;
				do {
					if (c < '0' || c > '9')
						throw new InputMismatchException();
					res *= 10;
					res += c - '0';
					c = read();
				} while (!isSpaceChar(c));
				return res * sgn;
			}
	 
			public String readString() {
				int c = read();
				while (isSpaceChar(c))
					c = read();
				StringBuilder res = new StringBuilder();
				do {
					res.appendCodePoint(c);
					c = read();
				} while (!isSpaceChar(c));
				return res.toString();
			}
	 
			public boolean isSpaceChar(int c) {
				if (filter != null)
					return filter.isSpaceChar(c);
				return isWhitespace(c);
			}
	 
			public String next() {
				return readString();
			}
	 
			public interface SpaceCharFilter {
				public boolean isSpaceChar(int ch);
			}
	 
		public Long readLong() {
			return Long.parseLong(readString());
			}
		 
			public Double readDouble() {
			return Double.parseDouble(readString());
			}
		}
	 
		class OutputWriter {
			private final PrintWriter writer;
	 
			public OutputWriter(OutputStream outputStream) {
				writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
			}
	 
			public OutputWriter(Writer writer) {
				this.writer = new PrintWriter(writer);
			}
	 
			public void print(Object... objects) {
				for (int i = 0; i < objects.length; i++) {
					if (i != 0)
						writer.print(' ');
					writer.print(objects[i]);
				}
			}
	 
			public void println(Object... objects) {
				print(objects);
				writer.println();
			}
	 
			public void close() {
				writer.close();
			}
	 
		} 






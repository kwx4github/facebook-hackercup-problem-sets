#!/usr/bin/python
# Written by CT075

# this entire method is pretty much nothing but string and array hackery;
# I'm not particularly proud of this code but this was the most natural
# way for me to think about it and python was being frustrating in trying
# to make it work (hence all the list() calls, as generators apparently
# don't work in most expressions...). I was considering doing this in
# Haskell or Racket or something, but nah.
# EDIT: so i suck at making things work properly and don't have time
# to fix it - ggwp
def cook_number(n):
    if n == 0: return ('0', '0')
    # Filter out zeroes from eligible swaps
    digs = list((d for d in map(int, (c for c in str(n)))))
    if len(list(d for d in digs if d != 0)) == 1:
        return (str(n), str(n))
    first_num = digs[0]
    swap_big, swap_little = max(digs), min(d for d in digs if d != 0)
    # I could probably have mapped digs[::-1].find to a tuple of
    # swap_big and swap_little, but that's long and difficult to
    # read so I choose not to.
    swap_big_id = len(digs) - digs[::-1].index(swap_big) - 1
    swap_little_id = len(digs) - digs[::-1].index(swap_little) - 1
    big_num = digs[:]
    big_num[0] = swap_big
    big_num[swap_big_id] = first_num
    little_num = digs[:]
    little_num[0] = swap_little
    little_num[swap_little_id] = first_num
    #print(big_num, little_num)
    # asdf python typecasting
    f = lambda x: ''.join(map(str, x))
    return tuple(map(f, (big_num, little_num)))

def main(in_path, out_path):
    # Properly there should be exception handling but meh
    with open(in_path, 'r') as f:
        lines = f.read().split('\n')
    t = int(lines[0])
    with open(out_path, 'w') as f:
        for i in range(1, t+1):
            n = int(lines[i])
            #print(*cook_number(n))
            # This line bothers me so much; why is there no native
            # tuple flattening anywhere???
            #print(cook_number(n))
            f.write('Case #'+str(i)+(': %s %s\n' % cook_number(n)))

if __name__ == '__main__':
    import sys
    main(*sys.argv[1:])

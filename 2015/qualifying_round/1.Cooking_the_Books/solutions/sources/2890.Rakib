#include <bits/stdc++.h>

using namespace std;

typedef unsigned long long  ULL;
typedef long long           LL;
typedef double              DL;
typedef long double         LDL;
typedef vector < int >      vi;
typedef vector < LL >       vLL;
typedef vector < string >   vs;
typedef pair < int, int >   pii;
typedef pair < LL, LL >     pll;
typedef vector < pii >      vpii;
typedef set < int >         si;
typedef map < string, int > msi;
typedef map < int, int >    mii;
typedef map < pii , int >   mpi;
//
#define INF 9999999990
#define eps 1e-9
#define PI acos(-1)
#define sqr(a) ((a)*(a))
#define cube(a) ((a)*(a)*(a))

#define mem(a, n)  memset(a, n, sizeof(a))
#define init_i int i, j, k, l, t, T=1
#define init_L LL i, j, k, l, t, T=1
#define pb push_back
#define ff first
#define ss second

/* ITERATE int: */
#define rep(i, l) for(i=0; i<l; i++)
#define rev(i, x) for(i=x; i>=0; i--)
#define REP(i, a, b) for(int i = int(a); i<=int(b); i++)

/* ITERATE STL: */
#define forall(it, x) for(it=x.begin(); it!=x.end(); it++)
#define all(x) x.begin(), x.end()
#define ff first
#define ss second

/* SCAN */
#define sc scanf
#define pr printf
#define NL printf("\n")
#define BL printf(" ")
#define sci(x) scanf("%d", &x)
#define scii(x, y) scanf("%d %d", &x, &y)
#define sciii(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define sciiii(x, y, z, p) scanf("%d %d %d %d", &x, &y, &z, &p)
#define scL(x) scanf("%lld", &x)
#define scLL(x, y) scanf("%lld %lld", &x, &y)
#define scLLL(x, y, z) scanf("%lld %lld %lld", &x, &y, &z)
#define scf(x) scanf("%lf", &x)
#define scff(x, y) scanf("%lf %lf", &x, &y)
#define scfff(x, y, z) scanf("%lf %lf %lf", &x, &y, &z);
#define scs(a) scanf("%s", a)
#define scss(a, b) scanf("%s %s", a, b)

/* PRINT/DEBUG */
#define prbl(x) cout<<"*"<<x<<"*"
#define pr1(x) cout<<"*"<<x<<"*"<<endl
#define pr2(x, y) cout<<"*"<<x<<" "<<y<<"*"<<endl
#define pr3(x, y, z) cout<<"*"<<x<<" "<<y<<" "<<z<<"*"<<endl
#define pr4(a, x, y, z) cout<<"*"<<a<<" "<<x<<" "<<y<<" "<<z<<"*"<<endl
#define pr5(a, b, x, y, z) cout<<"*"<<a<<" "<<b<<" "<<x<<" "<<y<<" "<<z<<"*"<<endl
#define wait do{cout<<"*...waiting...*"<<endl;} while(getchar()!='\n');

#define READ freopen("in.txt", "r", stdin)
#define WRITE freopen("out.txt", "w", stdout)

/* BASIC FUNCTIONS: */
#define gcd(a,b)    __gcd(a,b)
#define lcm(a,b)    (a*(b/gcd(a,b)))
template < class T > T setBit(T n, T pos){return n = n | (1<<pos);}
template < class T > T clearBit(T n, T pos){return n = n & ~(1<<pos);}
template < class T > bool checkBit(T n, T pos){return n & (1<<pos);}
template < class T > T togleBit (T n, T pos){return n = n^(1<<pos);}
template < class T > T nBitsOn(T n){return ((T)1<<n) -1;}   //turn first 6 bits on
template < class T > T DLtoInt(DL x){return floor(x+eps);}
//template < class T > T GCD (T i, T j){return(j==0)?i:GCD(j, i%j);}
bool isvowel(char x){x=tolower(x);if(x=='a' || x=='e' || x=='i' || x=='o' || x=='u') return 1;return 0;}
LL Pow(LL B,LL P){LL R=1;while(P>0){if(P%2==1) R=(R*B); P/=2; B=(B*B);}return R;}
LL BigMod(LL B, LL P, LL M){LL R=1;while(P>0){if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;}return R;}
//LL DigSum(LL n){LL sum=0;while(n>9){sum=0;while(n){sum+=n%10; n/=10;}n=sum;}return n;}
DL distance(DL x1, DL y1, DL x2, DL y2){return sqrt((sqr(x1-x2)+sqr(y1-y2)));}
//vi primes;
//bool nums[MAX];
//void seive(){for(int i=2; i<MAX; i++){if(!nums[i]){primes.pb(i);for(int j=i; j<MAX; j+=i) nums[j] = 1;}}}


/* TIME AND DAY */
//tm t;
//time_t timer = mktime(&t);
//puts(ctime(&timer));
//string w_day[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
//string m_names[] = {"0", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
//int m_days[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

/* UNION FIND */
//int parent[MAX];
//int n_members[MAX];
//void initSet(int sz){REP(i, 0, sz){ parent[i]=i; n_members[i]=1;}}
//int findSet(int i){return (parent[i]==i)?i : (parent[i]=findSet(parent[i]));}
//void mkSet(int i, int j){n_members[findSet(j)]+=n_members[findSet(i)]; parent[findSet(i)] = findSet(j);}
//bool isSameSet(int i, int j){return findSet(i) == findSet(j);}

/* DIRECTIONS */
//int kx[] = {+2, +1, -1, -2, -2, -1, +1, +2};
//int ky[] = {+1, +2, +2, +1, -1, -2, -2, -1}; //Knight Direction
//int fx[] = {-1, +0, +1, +0, -1, +1, -1, +1};
//int fy[] = {+0, +1, +0, -1, +1, +1, -1, -1};
//char dr[] = {'N', 'E', 'S', 'W'}; //Four & Eight Direction

/* END == A New Beginning... */

LL calc(char x[]){
    LL val = 0;
    for(int i=0; x[i]; i++){
        val=val*10+x[i]-'0';
    }
    return val;
}

int main(){
    freopen("cooking_the_books.txt", "r", stdin);
    WRITE;
    init_L;
    scL(t);
    char a[100];
    char b[100];
    while(t--){
        scs(a);
        mem(b, 0);
        strcpy(b, a);
        LL len = strlen(a);
        LL fmax = 0;
        for(i=0; i<len; i++){
            int maxi = a[i], indx = i;
            for(j=i; j<len; j++){
                if(a[j]>=maxi) {
                    maxi = a[j];
                    indx = j;
                }
            }
            swap(a[i], a[indx]);
            fmax = max(fmax, calc(a));
            strcpy(a, b);
        }

        LL fmin = INF;
        for(i=0; i<len; i++){
            int mini = a[i], indx = i;
            for(j=i; j<len; j++){
                if(i == 0){
                    if(a[j]<=mini && a[j]!='0') {
                        mini = a[j];
                        indx = j;
                    }
                }
                else if(a[j]<=mini) {
                    mini = a[j];
                    indx = j;
                }
            }
            swap(a[i], a[indx]);
            if(a[0]!='0')fmin= min(fmin, calc(a));
            strcpy(a, b);
        }
        if(len == 1 && b[0] == '0') fmin = 0;
        //pr2(len, b);
        pr("Case #%lld: %lld %lld\n", T++, fmin, fmax);
    }


    return 0;
}

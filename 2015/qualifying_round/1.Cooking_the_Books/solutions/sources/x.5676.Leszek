#!/usr/bin/env python
desc="""

"""
epilog="""Author: l.p.pryszcz@gmail.com
Mizerow, 11/01/2015
"""

import argparse, os, sys
from datetime import datetime

def get_max_and_min(i):
    """Return min & max int allowing one digit swap."""
    
    digits = map(int, list(str(i)))
    #get max
    maxd = max(digits)
    maxi = digits.index(maxd)
    if maxi:
        maxdigits = [digits[maxi],] + digits[1:maxi] + [digits[0],] + digits[maxi+1:]
    else:
        maxdigits = digits
    maxint = int("".join(map(str, maxdigits)))
        
    #get min ignoring zero
    if i:
        mind = min(filter(lambda x: x>0, digits))
        mini = digits.index(mind)
        if mini:
            mindigits = [digits[mini],] + digits[1:mini] + [digits[0],] + digits[mini+1:]
        else:
            mindigits = digits
        minint = int("".join(map(str, mindigits)))
    #capture i==0
    else:
        minint = 0
        
    return maxint, minint

def cooking_books(input, output):
    """Get min and max int for int from stream"""
    maxmin = set()
    for line in input:
        i = int(line.strip())
        #get max and min for given int
        mm = get_max_and_min(i)
        if mm[0] != 0:
            maxmin.add(mm)
        
    #report in descending order
    for i, (maxint, minint) in enumerate(sorted(maxmin, reverse=True), 1):
        output.write("Case #%s: %s %s\n"%(i, minint, maxint))
    
def main():
    usage   = "%(prog)s -v" 
    parser  = argparse.ArgumentParser(description=desc, epilog=epilog, \
                                      formatter_class=argparse.RawTextHelpFormatter)
    
    parser.add_argument('--version', action='version', version='1.0b')   
    parser.add_argument("-v", "--verbose", default=False, action="store_true",
                        help="verbose")    
    parser.add_argument("-i", "--input",  default=sys.stdin, type=file, 
                        help="input stream    [stdout]")
    parser.add_argument("-o", "--output", default=sys.stdout, type=argparse.FileType('w'), 
                        help="output stream   [stdout]")

    o = parser.parse_args()
    if o.verbose:
        sys.stderr.write("Options: %s\n"%str(o))

    cooking_books(o.input, o.output)

if __name__=='__main__': 
    t0 = datetime.now()
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("\nCtrl-C pressed!      \n")
    except IOError as e:
        sys.stderr.write("I/O error({0}): {1}\n".format(e.errno, e.strerror))
    dt = datetime.now()-t0
    sys.stderr.write("#Time elapsed: %s\n"%dt)

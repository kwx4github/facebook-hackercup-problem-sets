#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
using namespace std;

int convert_to_num(const vector<int>& nums) {
    int ret = 0;
    for(auto n : nums) ret = ret*10 + n;
    return ret;
}

pair<int,int> cooking_the_books(int num) {
    vector<int> digits;
    digits.reserve(9);
    
    int max_dig = 1, min_dig = 9;
    while (num) {
        int dig = num % 10;
        if(dig != 0) {
            max_dig = max(max_dig, dig);
            min_dig = min(min_dig, dig);
        }
        digits.push_back(dig);
        num /= 10;
    }
    reverse(digits.begin(), digits.end());
    
    int max_id_right = -1, min_id_right = -1;
    for(int i = (int)digits.size()-1; i >= 0; --i) {
        if(max_id_right < 0 && digits[i] == max_dig) max_id_right = i;
        if(min_id_right < 0 && digits[i] == min_dig) min_id_right = i;
    }
    
    int max_id_left = -1, min_id_left = -1;
    for(int i = 0; i < min_id_right; ++i) {
        if(max_id_left < 0 && digits[i] > min_dig) max_id_left = i;
    }
    for(int i = 0; i < max_id_right; ++i) {
        if(min_id_left < 0 && digits[i] < max_dig) min_id_left = i;
    }

    int lower = 0, upper = 0;
    if(min_id_left >= 0) swap(digits[min_id_left], digits[max_id_right]);
    upper = convert_to_num(digits);
    if(min_id_left >= 0) swap(digits[min_id_left], digits[max_id_right]);
    
    if(max_id_left >= 0) swap(digits[max_id_left], digits[min_id_right]);
    lower = convert_to_num(digits);
    if(max_id_left >= 0) swap(digits[max_id_left], digits[min_id_right]);
    
    return {lower, upper};
}

int main() {
	int test_nums = 0;
	cin >> test_nums;
	
	for(int i = 0; i < test_nums; ++i) {
		int num = 0;
		cin >> num;
		
		auto ret = cooking_the_books(num);
		cout << "Case #" << i+1 << ": " << ret.first << " " << ret.second << endl;
	}
	return 0;
}
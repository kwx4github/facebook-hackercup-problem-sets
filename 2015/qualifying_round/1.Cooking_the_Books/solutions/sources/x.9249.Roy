#!/usr/bin/python

import sys

def getDigits(integer):
    digits  = []
    while integer > 0:
        digits.append(integer % 10) 
        integer = integer / 10

    digits.reverse()

    return digits

def newInteger(digits, i, j, lend):
    tmp         = digits[i]
    digits[i]   = digits[j]
    digits[j]   = tmp

    integer = 0
    for i in range(0, lend):
        integer = integer * 10 + digits[i]

    return integer

def cook(n):
    digits  = getDigits(n)

    lend = len(digits)
    minpair = None
    maxpair = None
    foundmax = False
    foundmin = False
    for i in range(0, lend-1):
        maxd = digits[i] + 1
        mind = digits[i] - 1
        _foundmax = False 
        _foundmin = False 
        for j in range(i+1, lend):
            if (not foundmax) and digits[j] >= maxd:
                maxd = digits[j]
                maxpair = [i, j]
                _foundmax = True
                
            if (not foundmin) and digits[j] != 0 and digits[j] <= mind:
                mind = digits[j]
                minpair = [i, j]
                _foundmin = True
                
        foundmax = foundmax or _foundmax
        foundmin = foundmin or _foundmin
        if foundmax and foundmin:
            break
        
    if foundmax:
        maxv = newInteger(digits[:], maxpair[0], maxpair[1], lend)
    else:
        maxv = n
        
    if foundmin:
        minv = newInteger(digits[:], minpair[0], minpair[1], lend)
    else:
        minv = n
        
    return [minv, maxv]
             
def main(argv):
    if len(argv) != 2:
        return False

    with open(argv[1]) as f:
        lines = f.readlines()
    
    numlens = len(lines)
    for i in range(1, numlens):
        res = cook(int(lines[i]))
        print "Case #%d: %d %d" % (i, res[0], res[1])

if __name__ == "__main__":
    main(sys.argv)



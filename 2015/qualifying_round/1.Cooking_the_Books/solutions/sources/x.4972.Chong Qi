#include<iostream>
#include<cmath>
#include<algorithm>
using namespace std;

int main()
{
  //cin in the T
  int T=0;
  cin>>T;
  //loop T times
  for(int i=0;i<T;i++)
    {
  //cin the number
      int N=0,S=0,L=0;
      cin>>N;
  //calculate digit(if 0 set it to one digit)
      int digit=0;
      int temp=N;
      if (temp==0)
	{
	  digit++;
	}
      while(temp)
	{
	  temp=temp/10;
	  digit++;
	}
  //if one digit, do nothing
      if(digit==1)
	{
	  S=N;
	  L=N;
	}
      else
      {	  
  //split the number
	temp=N;
	int *p=new int[digit];
	for(int i=0;i<digit;i++)
	  {
	    int d=(pow(10,digit-i-1));
	    p[i]=temp/d;
	    temp=temp%d;
	  }    
  //sort it (first one non zero) smallest
	int location=0;
	temp=p[0];
	for(int i=1;i<digit;i++)
	  {
	    if(p[i]<=temp)
	      {
		temp=p[i];
		location=i;
	    }
	  }

	for(int i=0;i<digit;i++)
	  {
	    if(p[i]==temp){
	      continue;
	    }
	    else{
	    if(temp==0){
	      if(i==0){
		continue;
	      }
	      else {
	    int  dtemp=p[i];
	    p[i]=p[location];
	    p[location]=dtemp;
	    break;
	      }
	    }
	    else{
	    int  dtemp=p[i];
	    p[i]=p[location];
	    p[location]=dtemp;
	    break;
	    }
	    }
	  }
  //combine it into a new number S
	for(int i=0;i<digit;i++)
	  {
	    S+=p[i]*(pow(10,digit-i-1));
	  }
  //split it again
	temp=N;
        p=new int[digit];
	for(int i=0;i<digit;i++)
	  {
	    int d=(pow(10,digit-i-1));
	    p[i]=temp/d;
	    temp=temp%d;
	  }  
  //sort it (first one non zero) largest
	location=0;
	temp=p[0];
	for(int i=1;i<digit;i++)
	  {
	    if(p[i]==0){
	      continue;
	    }
	    else if(p[i]>=temp)
	      {
		temp=p[i];
		location=i;
	    }
	  }


	for(int i=0;i<digit;i++)
	  {
	    if(p[i]==temp){
	      continue;
	    }
	    else if(location>=i){	   
	    int  dtemp=p[i];
	    p[i]=p[location];
	    p[location]=dtemp;
	    break;
	    }
	  }
  //combine it into a new number L
	for(int i=0;i<digit;i++)
	  {
	    L+=p[i]*(pow(10,digit-i-1));
	  }
      }
      //coutS&l;
      cout<<"Case #"<<i+1<<": "<<S<<" "<<L<<endl;

    } 
  return 0;
}

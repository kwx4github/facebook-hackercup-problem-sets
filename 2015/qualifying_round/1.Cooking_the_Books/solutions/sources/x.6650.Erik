import java.io.*;
import java.util.*;

public class Cooking {
	private static void solve(long i, long num) {
		String str = Long.toString(num);

		Vector<Integer> nums = new Vector<>();
		for (char c : str.toCharArray()) {
			nums.add(c - '0');
		}

		Vector<Integer> low = getLo(nums);
		Vector<Integer> hi = getHi(nums);

		System.out.printf("Case #%d: %s %s\n", i+1, toStr(low), toStr(hi));
	}

	private static Vector<Integer> getLo(Vector<Integer> v) {
		Vector<Integer> out = new Vector<>();
		out.addAll(v);

		for (int i = 0; i < out.size(); i++) {
			int have = out.get(i);
			int top = have;
			int pos = 0;
			for (int j = i+1; j < out.size(); j++) {
				int cur = out.get(j);
				if (cur < top) {
					if (cur == 0 && i == 0)
						continue;
					top=cur;
					pos = j;
				}
			}
			if (top < have) {
				out.set(pos, have);
				out.set(i, top);
				return out;
			}
		}

		return out;
	}

	private static Vector<Integer> getHi(Vector<Integer> v) {
		Vector<Integer> out = new Vector<>();
		out.addAll(v);

		for (int i = 0; i < out.size(); i++) {
			int have = out.get(i);
			int top = have;
			int pos = 0;
			for (int j = i+1; j < out.size(); j++) {
				int cur = out.get(j);
				if (cur > top) {
					top=cur;
					pos = j;
				}
			}
			if (top > have) {
				out.set(pos, have);
				out.set(i, top);
				return out;
			}
		}

		return out;
	}

	private static String toStr(Vector<Integer> v) {
		StringBuffer sb = new StringBuffer();
		for (int i : v) {
			sb.append(i);
		}
		return sb.toString();
	}

	public static void main(String[] args) throws Exception {
		Scanner sc = new Scanner(System.in);
		long n = sc.nextLong();
		for (long i = 0; i < n; i++) {
			solve(i, sc.nextLong());
		}
	}
}

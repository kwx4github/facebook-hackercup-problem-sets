package com.algs.tast1;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Scanner;

class Solution {
	private static final int TEN = 10;

	public static void main(String[] args) throws IOException {

		try (Scanner scanner = new Scanner(new BufferedInputStream(
				new FileInputStream("cooking_the_books.txt")))) {
			int size = scanner.nextInt();
			int[] numbers = new int[size];
			for (int i = 0; i < numbers.length; ++i) {
				numbers[i] = scanner.nextInt();
			}

			for (int i = 0; i < numbers.length; ++i) {
				int[] extremumValues = findExtremums(numbers[i]);
				System.out.println("Case #" + (i + 1) + ": " + extremumValues[0]
						+ " " + extremumValues[1]);
			}
		}

	}

	private static int[] findExtremums(int value) {
		int[] extremumValues = { Integer.MAX_VALUE, Integer.MIN_VALUE };
		int[] positions = { -1, -1 };

		int curPos = 0;
		int prevNumber = 0;
		int number = value;
		while (number > 0) {
			int temp = number % TEN;

			if (temp != 0 && temp < extremumValues[0]) {
				extremumValues[0] = temp;
				positions[0] = curPos;
			}

			if (temp > extremumValues[1]) {
				extremumValues[1] = temp;
				positions[1] = curPos;
			}

			prevNumber = number;
			number /= TEN;
			++curPos;
		}

		for (int i = 0; i < positions.length; ++i) {

			if (value != 0 && positions[i] != 0) {
				int firstPart = value % (int) (Math.pow(10, positions[i]));
				int secondPart = prevNumber
						* (int) (Math.pow(10, positions[i]));
				int thirdPart = value - prevNumber
						* (int) (Math.pow(10, curPos - 1)) - value
						% (int) (Math.pow(10, positions[i] + 1));
				int forthPart = extremumValues[i]
						* (int) (Math.pow(10, curPos - 1));
				extremumValues[i] = firstPart + secondPart + thirdPart
						+ forthPart;
			} else {
				extremumValues[i] = value;
			}
		}

		return extremumValues;
	}
}

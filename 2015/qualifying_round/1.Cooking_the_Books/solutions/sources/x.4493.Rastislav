#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <numeric>
#include <tuple>
#include <climits>

#define INF 1023456789
#define SQR(x) ((x)*(x))
#define INIT(x,y) memset((x),(y),sizeof((x)))
#define SIZE(x) ((int)((x).size()))
#define REP(i, n) for (__typeof(n) i=0;i<(n);++i)
#define FOR(i, a, b) for (unsigned i=(a);i<=(b);++i)
#define FORD(i, a, b) for (__typeof(a) i=(a);i>=(b);--i)
#define FORE(it, c) for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

#define DEBUG
#ifdef DEBUG
#define DBG(x) cerr << #x << ": " << (x) << endl;
#else
#define DBG(x)
#endif

using namespace std;
 
typedef long long LL;
typedef pair<int,int> PI;
typedef tuple<int,int,int>trio;

inline void solve(int t)
{
	string num;
	cin >> num;
	if (num.size()==1)
	{
		cout << "Case #" << t << ": " << num << " " << num << "\n";
		return;
	}

	string small,big;
	small = big = num;
	int pos = 0;
	REP(i,small.size()) 
		if (small[i]<small[pos] && small[i]!='0')  
			pos = i;
	if (pos)
	{
		swap(small[0],small[pos]);
	}
	else
	{
		FOR(i,1,small.size()-1)
		{
			unsigned pos = i;
			FOR(j,i+1,small.size()-1)
				if (small[j]<=small[pos]) pos = j;
			if (pos!=i) 
			{
				swap(small[pos],small[i]);
				break;
			}
		}
	}
	REP(i,big.size())
	{
		unsigned pos = i;
		FOR(j,i+1,big.size()-1)
			if (big[j]>=big[pos]) pos = j;
		if (pos!=i)
		{
			swap(big[pos],big[i]);
			break;
		}
	}
	cout << "Case #" << t << ": " << small << " " << big << "\n";
}

int main()
{
	int T;
	cin >> T;
	REP(i,T) solve(i+1);
        return 0;
}

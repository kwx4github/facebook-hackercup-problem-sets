#include <queue>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <algorithm>
#include <bitset>
#include <cstdlib>
#include <list>
#include <stack>
#include <deque>
#include <cmath>
#include <string>
#include <string.h>
#include <iomanip>
#include <sstream> 
#include <set> 
#include <cassert>
#include <ctype.h> 
using namespace std; 
#define rep(i,n)        for(int i = 0;  i < n ; ++i)
#define REP(i,a,b)      for(int i = a ; i <= b; ++i)
#define s(n)            scanf("%d",&n)
#define rev(i,n)        for(int i = n ; i >= 0 ; --i)
#define REV(i,a,b)      for(int i = a ; i >= b ; --i)
#define INF             1000000000 
#define PP              pair<int,int> 
#define pb(a)           push_back(a)
#define ll              long long
#define VI              vector<int> 
#define MII             map<int,int> 
#define MSI             map<string,int> 
#define VII             vector<vector<int> > 
#define VPP             vector<pair<int,int> > 
#define MOD             1000000007
#define PDD             pair<double,double>
#define VL              vector<long long>
#define PIL             pair<int,long long>
#define PLL             pair<long long,long long>
#define sz(v)           (int)v.size() 
static struct IO {
char tmp[1 << 10];
// fast input routines
char cur;
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
inline char nextChar() { return cur = getc(stdin); }
inline char peekChar() { return cur; }
inline operator bool() { return peekChar(); }
inline static bool isBlank(char c) { return (c < '-' && c); }
inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
inline IO& operator >> (char & c) { c = nextChar(); return *this; }
inline IO& operator >> (char * buf) {
if (skipBlanks()) {
if (peekChar()) {
*(buf++) = peekChar();
while (!isBlank(nextChar())) *(buf++) = peekChar();
} *(buf++) = 0; } return *this; }
inline IO& operator >> (string & s) {
if (skipBlanks()) { s.clear(); s += peekChar();
while (!isBlank(nextChar())) s += peekChar(); }
return *this; }
inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }
#define defineInFor(intType) \
inline IO& operator >>(intType & n) { \
if (skipBlanks()) { \
int sign = +1; \
if (peekChar() == '-') { \
sign = -1; \
n = nextChar() - '0'; \
} else \
n = peekChar() - '0'; \
while (!isBlank(nextChar())) { \
n += n + (n << 3) + peekChar() - 48; \
} \
n *= sign; \
} \
return *this; \
}
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
// fast output routines
//#define putChar(c) putc_unlocked((c), stdout)
inline void putChar(char c) { putc(c, stdout); }
inline IO& operator << (char c) { putChar(c); return *this; }
inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
inline IO& operator << (double d) { return (*this) << toString(d); }
#define defineOutFor(intType) \
inline char * toString(intType n) { \
char * p = (tmp + 30); \
if (n) { \
bool isNeg = 0; \
if (n < 0) isNeg = 1, n = -n; \
while (n) \
*--p = (n % 10) + '0', n /= 10; \
if (isNeg) *--p = '-'; \
} else *--p = '0'; \
return p; \
} \
inline IO& operator << (intType n) { return (*this) << toString(n); }
defineOutFor(int)
defineOutFor(long long)
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
int num(string n)
{
    int ret = 0 ; 
    for(int i = 0 ; i < n.size() ; ++i)
    {
        ret = ret*10 + (n[i] - '0') ; 
    }
    return ret ; 
}
int main()
{
    freopen("cooking_the_books.txt","r",stdin) ; 
    freopen("output.txt","w",stdout) ; 
    int tc,tmp,mini = 1000000000 , maxi = 0; 
    cin >> tc;  
    string n ;  
    REP(t,1,tc)
    { 
        cin >> n ; 
        mini = num(n) , maxi = num(n) ; 
        cout << "Case #"<<t<<": ";
        for(int i = 0 ; i < n.length() ; ++i)
        {
            for(int j = i + 1 ; j < n.length() ; ++j)
            {
                if(i == 0 and n[j] == '0')
                {
                    continue ; 
                }
                swap(n[i],n[j]) ; 
                tmp = num(n) ; 
                if(tmp < mini)mini = tmp ; 
                else if(tmp > maxi)maxi = tmp ; 
                swap(n[i],n[j]) ; 
            }
        }
        if(n[0] == '0')
        {
            mini = 0 ; 
        }
        cout << mini << " " << maxi << "\n" ; 
    }
    return 0 ; 
}
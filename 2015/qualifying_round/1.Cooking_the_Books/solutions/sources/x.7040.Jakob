package Cooking;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 *
 * @author jakobgaardandersen
 */
public class Main {

    public Main(String inputFile) throws FileNotFoundException, IOException {
        FileInputStream fis = new FileInputStream(inputFile);
        DataInputStream dis = new DataInputStream(fis);
        BufferedReader br = new BufferedReader(new InputStreamReader(dis));
        String line = null;
        System.out.println("Total testcases: " + br.readLine());
        // Reading the file line by line
        int count = 0;
        while ((line = br.readLine()) != null) {
            count++;
            int num = Integer.valueOf(line); // this is the number that we need to look through and do a swap
            String numb = line;
            if (numb.equals("0")) {
                System.out.println("Case #" + count + ": " + 0 + " " + 0);
            } else {
                int highestIndex = findHighest(numb);
                String highest = swap(numb, highestIndex);
                int lowestIndex = findLowest(numb);
                String lowest = swap(numb, lowestIndex);
                System.out.println("Case #" + count + ": " + lowest + " " + highest);
            }

        }
        br.close();
    }

    // returns the index for the highest ciffer in the number
    private int findHighest(String number) {
        String[] parts = number.split("");
        int max = 0;
        for (String part : parts) {
            if (Integer.valueOf(part) > max) {
                max = Integer.valueOf(part);
            }
        }
        return number.indexOf(String.valueOf(max));
    }

    // returns the index for the lowest ciffer in the number
    private int findLowest(String number) {
        String[] parts = number.split("");
        int min = Integer.MAX_VALUE;
        for (String part : parts) {
            if (Integer.valueOf(part) < min) {
                if (Integer.valueOf(part) != 0) {
                    min = Integer.valueOf(part);
                }
            }
        }
        return number.indexOf(String.valueOf(min));
    }

    private String swap(String number, int index) {
        // we want to cut out the number on index^ and then prepend it.
        String cut = number.substring(index, index + 1);
        StringBuilder sb = new StringBuilder(number);
        sb.deleteCharAt(index);
        return cut + sb.toString();
    }

    public static void main(String[] args) throws FileNotFoundException, IOException {
        new Main("cooking_the_books.txt");
    }
}

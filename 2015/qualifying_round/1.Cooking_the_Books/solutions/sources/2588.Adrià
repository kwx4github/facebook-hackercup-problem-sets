<?php
set_time_limit(0);
// Facebook Hacker Cup 2015 Qualification Round - Cooking the Books
header("Content-Type: text/plain");
// Below you copy and paste the input:
$input = "20
422931895
71429777
675905967
0
142155100
95124058
472956328
123
442015041
31524
877115755
796888162
621007349
197557112
999999999
102163946
474712259
9990999
10
183177323";

// Common functions for all problems:
function exit_alt($code = 0, $message = "") {
  echo "ERROR ".$code.": '".$message."'";
  exit($code);
}

function parse($input) {
  $lines = explode("\n", $input);
  $return = array();
  $return["lines"] = array();

  foreach ($lines as $i => $line) {
    if ($i == 0) {
      $return["t"] = $line;
    } else {
      if (!empty($line) || $line == 0) {
        $return["lines"][] = trim($line);
      }
    }
  }

  return $return;
}

// Here begins the journey!
function fudge($number) {
	$number_array = str_split($number);

	if (count($number_array) == 1) {
		$small = $number;
		$big = $number;
	} else {
		/*$biggest_digit = -1;
		$smallest_digit = 10;
		$first_digit = $number_array[0];
		foreach ($number_array as $digit) {
			if ($digit > $biggest_digit) {
				$biggest_digit = $digit;
			}
			if ($digit < $smallest_digit && $digit != 0 ) {
				$smallest_digit = $digit;
			}
		}*/

		/*$small_array = $number_array;
		foreach ($small_array as $key => $digit) {
			if ($digit == $smallest_digit) {
				$small_array[0] = $digit;
				$small_array[$key] = $first_digit;
				break;
			}
		}*/

		$small_array = $number_array;
		$array_alreves = array_reverse($number_array, true);
		foreach ($number_array as $key => $digit) {
			if ($key == (count($number_array) - 1)) {
				break;
			}
			$smallest_digit = array("digit" => 10, "key" => null);
			foreach ($array_alreves as $insidekey => $insidedigit) {
				if ($insidekey <= $key) {
					break;
				}
				if ($insidedigit < $digit && $insidedigit < $smallest_digit["digit"]) {
					if ($key == 0 && $insidedigit == 0) {
						continue;
					}
					$smallest_digit["digit"] = $insidedigit;
					$smallest_digit["key"] = $insidekey;
				}
			}
			if ($smallest_digit["digit"] != 10) {
				//echo "PERMUTATING: \nNumber origin: ".$smallest_digit["key"]." -- ".$smallest_digit["digit"]."\nNumber destiny:".$key." -- ".$digit;
				$small_array[$smallest_digit["key"]] = $digit;
				$small_array[$key] = $smallest_digit["digit"];
				break;
			}
		}

		$big_array = array_reverse($number_array, true);
		foreach ($number_array as $key => $digit) {
			if ($key == (count($number_array)-1)) {
				break;
			}
			$biggest_digit = array("digit" => null, "key" => null);
			foreach ($big_array as $insidekey => $insidedigit) {
				if ($insidekey <= $key) {
					break;
				}
				if ($insidedigit > $digit && $insidedigit > $biggest_digit["digit"]) {
					$biggest_digit["digit"] = $insidedigit;
					$biggest_digit["key"] = $insidekey;
				}
			}
			if ($biggest_digit["digit"] != null) {
				$big_array[$biggest_digit["key"]] = $digit;
				$big_array[$key] = $biggest_digit["digit"];
				break;
			}
		}
		$big_array = array_reverse($big_array, true);
		$small = 0;
		$small = implode($small_array);
		$big = implode($big_array);
	}

	return $small." ".$big;
}

$parsed = parse($input);

$testcase = 1;

foreach ($parsed["lines"] as $line) {
	$out = fudge($line);
	echo "Case #".$testcase.": ".$out."\n";
	$testcase++;
}

if (($testcase - 1) != $parsed["t"]) {
  exit_alt(1, "Total number of test cases doesn't match the number in input file");
}
?>
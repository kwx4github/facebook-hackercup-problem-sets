#include <cstring>
#include <string.h>
#include <fstream>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>

using namespace std;

#define pb push_back
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz size()
#define rep(i,s,e) for (int i = int(s); i < int(e); i++)
#define repit(i,c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define mem(a,b) memset(a,b,sizeof(a))
#define mp make_pair

typedef stringstream ss;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const double PI = 2 * acos(0);
const double eps = 1e-9;

int main(int argc, char *args[]) {
	std::ifstream fin;
	std::ofstream fout;
    if (argc == 1) {
        fin.open("cooking_the_books.txt");
        fout.open("cooking_the_books_output.txt");
    } else if  (argc == 2 && strcmp(args[1], "test") == 0) {
    	fin.open("cooking_the_books_example_input.txt");
    	fout.open("cooking_the_books_example_output.txt");
    }
    if(fin.fail()) {
    	cerr << "File do not exist.\n";
    	exit(0);
   	}

    string line;
    getline( fin, line );
    int N = stoi(line);
    vector<int> results_min, results_max;
    results_min.resize(N);
    results_max.resize(N);

    rep(n, 0, N) {
    	getline( fin, line );
    	string strnumber = line;
    	int ndigit = line.size();
    	if( ndigit == 1 ) {
    		results_min[n] = stoi(strnumber);
    		results_max[n] = stoi(strnumber);
    		continue;
    	}
    	vector<int> swapnum;
    	swapnum.push_back(stoi(strnumber));
    	rep(i, 0, ndigit-1) {
    		rep(j, i+1, ndigit) {
    			if( i == 0 && strnumber[j] == '0' ) { continue; }
    			string swapstrnumber;
    			swapstrnumber = strnumber;
    			swapstrnumber.replace(i, 1, strnumber, j, 1);
    			swapstrnumber.replace(j, 1, strnumber, i, 1);
    			swapnum.push_back(stoi(swapstrnumber));
    		}
    	}
    	sort(swapnum.begin(), swapnum.end());
    	results_min[n] = swapnum.front();
    	results_max[n] = swapnum.back();
    }

    rep(n, 0, N) {
        fout << "Case #" << n+1 << ": ";
        fout << results_min[n] << " " << results_max[n];
        fout << endl;
    }

    fin.close();
    fout.close();
    return 0;
}

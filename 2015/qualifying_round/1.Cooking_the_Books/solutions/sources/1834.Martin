package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)

func findMinMax(n []byte) (int, int) {
	switch len(n) {
	case 1:
		nn, err := strconv.Atoi(string(n))
		if err != nil {
			panic(err)
		}
		return nn, nn
	case 2:
		if n[1] == '0' {
			nn, err := strconv.Atoi(string(n))
			if err != nil {
				panic(err)
			}
			return nn, nn
		} else {
			n1, err := strconv.Atoi(string(n))
			if err != nil {
				panic(err)
			}
			n[0], n[1] = n[1], n[0]
			n2, err := strconv.Atoi(string(n))
			if err != nil {
				panic(err)
			}
			if n2 > n1 {
				return n1, n2
			} else {
				return n2, n1
			}
		}
	default:
		norig := make([]byte, len(n))
		copy(norig, n)
		nn, _ := strconv.Atoi(string(norig))
		nl := nn
		nh := nn
		for i := 0; i < len(n); i++ {
			for j := i; j < len(n); j++ {
				if i == j {
					continue
				}
				copy(n, norig)
				n[i], n[j] = n[j], n[i]
				if n[0] == '0' {
					continue
				}
				nnn, _ := strconv.Atoi(string(n))
				if nnn > nh {
					nh = nnn
				}
				if nnn < nl {
					nl = nnn
				}
			}
		}
		return nl, nh
	}
}

func permute(a []byte, i, n int) {
	if i == n {
		fmt.Println(string(a))
	} else {
		for j := i; j <= n; j++ {
			a[i], a[j] = a[j], a[i]
			permute(a, i+1, n)
			a[i], a[j] = a[j], a[i]
		}
	}
}

func main() {
	s := bufio.NewScanner(os.Stdin)
	if !s.Scan() {
		panic("reading first line")
	}
	t, err := strconv.Atoi(s.Text())
	if err != nil {
		panic(err)
	}
	for i := 0; i < t; i++ {
		if !s.Scan() {
			panic("reading line " + strconv.Itoa(i))
		}
		l, h := findMinMax(s.Bytes())
		fmt.Println("Case #"+strconv.Itoa(i+1)+":", l, h)
	}
}

# -*- coding: utf-8 -*-

__author__ = 'mehdy'

import sys


def find_the_x_swap(number_string, x_func):
    """
    find the best and worst swap
    :param number_string: Str
    :param x_func: function
    :return:
    """
    number_set = set(number_string)
    state = 0
    x_item = None
    try:
        number_set.remove('0')
    except KeyError:
        pass
    while number_set:
        if x_func(number_set) != number_string[state]:
            x_item = x_func(number_set)
            break

        state += 1
        number_set.remove(x_func(number_set))

    if x_item is None:
        best = number_string
    else:
        first_part = number_string[:state]
        middle_part = number_string[state + 1:number_string.index(x_item)]
        last_part = number_string[number_string.index(x_item) + 1:]
        best = first_part + x_item + middle_part + number_string[state] + last_part

    return best


def try_to_break_law(input_file, output_file):
    """
    iterate over numbers and invoke swapping function and write the result to output
    :rtype : None
    :param input_file: file
    :param output_file: file
    :return: None
    """

    state = 0

    for item in input_file:

        num_string = item[:-1]
        state += 1

        if len(num_string) < 3:
            output = u'Case #{state}: {best} {worst}\n'.format(state=state,
                                                               best=num_string,
                                                               worst=num_string)

            output_file.write(output)
            print(output[:-1])
            continue

        best = find_the_x_swap(num_string, x_func=min)
        worst = find_the_x_swap(num_string, x_func=max)

        output = u'Case #{state}: {best} {worst}\n'.format(state=state,
                                                           best=best,
                                                           worst=worst)
        output_file.write(output)
        print(output[:-1])


def main():
    """
    main function to process the input file and invoke other functions and generate output file
    :return:
    """

    try:
        path = sys.argv[1]
    except IndexError:
        exit(u'\033[91mError:\033[0m You have to specify an input file like')

    with open(path, 'r') as f:

        f.next()  # escape the length
        output = open(path + '.opf', 'w')

        try_to_break_law(input_file=f, output_file=output)


if __name__ == '__main__':
    main()
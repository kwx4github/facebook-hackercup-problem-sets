# include <iostream>
# include <fstream>
# include <vector>

using namespace std;

int main(){
	int t,caz;
	long long nr;
	ifstream f("input.txt");
	ofstream g("output.txt");

	f>>t;
	caz = t;
	while (t){

		f>>nr;
		vector <int> digits;
		bool sw = false;
		while (nr){
			digits.insert(digits.begin(), nr%10);
			nr /= 10;
		}


		//checking if nr != 0
		if (!digits.size()){
			g<<"Case #"<<caz - t + 1<<": 0 0\n";
			t--;
		}
		else
		{

		//calculating the maximum number
		int npm = -1, pos_max = -1, max;
		for (int  i = 0; i < digits.size() - 1 && !sw; i++){
			max = digits[i];
			for (int j = i + 1; j < digits.size(); j++){
				if (digits[j] > max){
					max = digits[j];
					pos_max = j;
					sw = true;
					npm = i;
				}
			}
		}

		//calculating the minimum number
		sw = false;
		int npmin = -1, pos_min = -1, min;
		for (int  i = 0; i < digits.size() - 1 && !sw; i++){
			min = digits[i];
			for (int j = i; j < digits.size(); j++){
				if (digits[j] < min && digits[j] > 0){
					min = digits[j];
					pos_min = j;
					sw = true;
					npmin = i;
				}
			}
		}

		//print the result 
		g<<"Case #"<<caz - t + 1<<": ";
		for (int i = 0; i < digits.size(); i++){
			if (i == pos_min)
				g<<digits[npmin];
			else if (i == npmin)
				g<<digits[pos_min];
			else
				g<<digits[i];
		}

		g<<" ";

		for (int i = 0; i < digits.size(); i++){
			if (i == pos_max)
				g<<digits[npm];
			else if (i == npm)
				g<<digits[pos_max];
			else
				g<<digits[i];
		}
		g<<endl;
		t--;
	}
	}
	g.close();
	return 0;
}
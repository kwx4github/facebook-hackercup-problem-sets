#include <iostream>
#include <sstream>
#include <fstream>
#include <cstring>

using namespace std;

string getSmallestNumber(std::string num)
{
	int smallestDigit = 9, smallestDigitLocation = 0,  middleZeroLocation;
	bool zeroExistsInTheMiddle = false;

	for(int i=0; i<num.length(); i++)
	{
		if(i!=0 && i!= num.length() && (num[i] - '0') == 0)
		{
			zeroExistsInTheMiddle = true;
			middleZeroLocation = i;
		}
		if((num[i] - '0') <= smallestDigit && (num[i] - '0') != 0)
		{
			smallestDigit = num[i] - '0';
			smallestDigitLocation = i;
		}
	}

	if(smallestDigitLocation == 0 && zeroExistsInTheMiddle && num.length() > 1)
	{
		char temp = num[1];
		num[1] = num[middleZeroLocation];
		num[middleZeroLocation] = temp;
	}
	else
	{
		char temp = num[0];
		num[0] = num[smallestDigitLocation];
		num[smallestDigitLocation] = temp;
	}
	return num;
}
string getLargestNumber(std::string num)
{
	int largestDigit = 1, largestDigitLocation = 0, middleZeroLocation;
	bool zeroExistsInTheMiddle = false;

	for(int i=0; i<num.length(); i++)
	{
		if(i!=0 && i!= num.length() && (num[i] - '0') == 0)
		{
			zeroExistsInTheMiddle = true;
			middleZeroLocation = i;
		}
		if((num[i] - '0') >= largestDigit && (num[i] - '0') != 0)
		{
			largestDigit = num[i] - '0';
			largestDigitLocation = i;
		}
	}
	if(largestDigitLocation == 0 && zeroExistsInTheMiddle && num.length() > 1 && num.length() != 2)
	{
		char temp = num[num.length() - 2];
		num[num.length() - 2] = num[middleZeroLocation];
		num[middleZeroLocation] = temp;
	}
	else
	{
		char temp = num[0];
		num[0] = num[largestDigitLocation];
		num[largestDigitLocation] = temp;
	}
	return num;
}

int main() {
	// your code goes here
	int T;
	ifstream inFile;
	ofstream outFile;
	string line;
    inFile.open ("cooking_the_books.txt");
    outFile.open("output.txt");
    if(inFile.good() && (getline(inFile, line)))
    {
        istringstream iss(line);
        iss >> T;
        std::string numbers[T], smallest[T], largest[T];
        for(int i=0; i<T; i++)
        {
            if(inFile.good() && getline(inFile, line))
            {
                istringstream iss2(line);
                iss2 >> numbers[i];
                smallest[i] = getSmallestNumber(numbers[i]);
                largest[i] = getLargestNumber(numbers[i]);
                if(outFile.is_open())
                {
                    outFile << "Case #" << i+1 << ": " << smallest[i] << " " << largest[i] << endl;
                }
            }
        }
    }
	outFile.close();
	inFile.close();
	return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <stdlib.h>
#include <stdio.h>

using namespace std;
struct node {
    node() {
        val = 0;
        left = NULL;
        right = NULL;
        next = NULL;
    }
    int val;
    struct node *left;
    struct node *right;
    struct node *next;
};

typedef struct node node;
node *root;
node **list;
int max_h = 0;

void insertElement(int val) {
    node *tmp = root, *prev = NULL;
    while (NULL != tmp) {
        prev = tmp;
        if (val < tmp->val)
            tmp = tmp->left;
        else
            tmp = tmp->right;
    }

    node *new_node = new node();
    new_node->val = val;
    
    if (NULL == prev) {
        root = new_node;
    }
    else if(val < prev->val) {
        prev->left = new_node;
    }
    else {
        prev->right = new_node;
    }
}

void insertToList(node *n, int h) {
    if (h > max_h)
        max_h = h;
    int i = h;

    if (list[i] == NULL) {
        list[i] = n;
        return;
    }

    node *tmp = list[i], *prev = NULL;
    while (NULL != tmp) {
        prev = tmp;
        tmp = tmp->next;
    }

    prev->next = n;
}
    

void customInOrder(node *n, int h) {
    if (NULL == n)
        return;
    customInOrder(n->left, h+1);
    insertToList(n, h);
    customInOrder(n->right, h+1);
}


int main() {
    root = NULL;
    list = (struct node **)malloc(sizeof(struct node*)*100);

    insertElement(6);
    insertElement(3);
    insertElement(9);
    insertElement(1);
    insertElement(2);
    insertElement(7);
    insertElement(11);

    //init list
    for(int i=0; i<100; ++i)
        list[i] = NULL;

    customInOrder(root, 0);

    // print list
    for(int i=0; i<= max_h; ++i) {
        node *tmp = list[i];
        while (NULL != tmp) {
            cout << tmp->val << " ";
            tmp = tmp->next;
        }

        cout << endl;
    }
    return 0;
}



    


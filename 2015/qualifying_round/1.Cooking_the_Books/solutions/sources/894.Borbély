using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

namespace CookingTheBooks
{
	class Program
	{
		static void Main(string[] args)
		{
			using (var reader = new StreamReader(args[0]))
			using (var writer = new StreamWriter(args.Length > 1 ? args[1] : args[0].Replace(".in", ".out")))
			{
				var t = reader.Next<int>();
				for (int i = 1; i <= t; i++)
				{
					var n = reader.Next<int>();
					int min, max;
					Solve(n, out min, out max);

					writer.WriteLine("Case #{0}: {1} {2}", i, min, max);
				}
			}
		}

		private static void Solve(int num, out int min, out int max)
		{
			min = num;
			max = num;

			var strNum = num.ToString("D");

			for (int i = 0; i < strNum.Length; i++)
			{
				for (int j = i+1; j < strNum.Length; j++)
				{
					if (i == 0 && strNum[j] == '0') continue;
					
					var chars = strNum.ToCharArray();
					chars[i] = strNum[j];
					chars[j] = strNum[i];
					var swappedNum = int.Parse(new string(chars));

					if (swappedNum < min) min = swappedNum;
					if (swappedNum > max) max = swappedNum;
				}
			}
		}
	}

	public static class StreamReaderExtensions
	{
		private static List<string> currLine;

		public static T Next<T>(this StreamReader reader)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			var res = (T)Convert.ChangeType(currLine[0], typeof(T), CultureInfo.InvariantCulture);
			currLine.RemoveAt(0);
			return res;
		}

		public static T[] Next<T>(this StreamReader reader, int count)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			if (count == 0) count = currLine.Count;
			var res = currLine.Take(count).Select(i => (T)Convert.ChangeType(i, typeof(T), CultureInfo.InvariantCulture)).ToArray();
			currLine.RemoveRange(0, count);
			return res;
		}
	}

}

import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.Collections;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Hamed Valizadeh (havaliza@gmail.com)
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		FastInputReader in = new FastInputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CookingTheBooks {
    public void solve(int testNumber, FastInputReader in, PrintWriter out) {
        String n = in.next();
        ArrayList<Integer> a = new ArrayList<Integer>();
        a.add(Integer.parseInt(n));
        for (int i = 0; i < n.length(); i++)
            for (int j = i + 1; j < n.length(); j++) {
                if (i == 0 && n.charAt(j) == '0')
                    continue;
                String swapped = "";
                for (int k = 0; k < n.length(); k++)
                    swapped += n.charAt(k == i ? j : k == j ? i: k);
                a.add(Integer.parseInt(swapped));
            }
        Collections.sort(a);
        out.printf("Case #%d: %d %d\n", testNumber, a.get(0), a.get(a.size() - 1));
    }
}

class FastInputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public FastInputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


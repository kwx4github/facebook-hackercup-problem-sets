package com.facebook.hackercup2015.qualification;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class CookingTheBooks {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter writer = new PrintWriter(System.out);

    CookingTheBooks() throws IOException {
        reader = new BufferedReader(new FileReader("input.txt"));
        writer = new PrintWriter(new FileWriter("output.txt"));
    }

    StringTokenizer stringTokenizer;

    String next() throws IOException {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            stringTokenizer = new StringTokenizer(reader.readLine());
        }
        return stringTokenizer.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    void solve() throws IOException {
        int t = nextInt();
        for(int i = 1; i <= t; i++) {
            solve(i);
        }
        writer.close();
    }

    private void solve(int testNumber) throws IOException {
        writer.printf("Case #%d: ", testNumber);
        int x = nextInt();
        int[] digits = breakDown(x);
        int minX = x;
        int maxX = x;
        for(int i = 0; i < digits.length; i++) {
            for(int j = i + 1; j < digits.length; j++) {
                final int swapped = swap(Arrays.copyOf(digits, digits.length), i, j);
                maxX = Math.max(maxX, swapped);
                if(i == 0 && digits[j] == 0) continue;
                minX = Math.min(minX, swapped);
            }
        }
        writer.println(minX + " " + maxX);
    }

    private int[] breakDown(int x) {
        int[] result = new int[10];
        int last = result.length;
        for(int y = x; y > 0; y /= 10) {
            result[--last] = y % 10;
        }
        return Arrays.copyOfRange(result, last, result.length);
    }

    int swap(int[] array, int i1, int i2) {
        int t = array[i1];
        array[i1] = array[i2];
        array[i2] = t;
        int result = 0;
        for (int x : array) {
            result *= 10;
            result += x;
        }
        return result;
    }

    public static void main(String[] args) throws IOException {
        new CookingTheBooks().solve();
    }
}

import Control.Monad

swap lst i j = map get $ zip [0..] lst
    where
        get (k, v)
            | k == i = lst !! j
            | k == j = lst !! i
            | otherwise = v

answer :: String -> (Integer, Integer)
answer n = (minimum cands, maximum cands)
    where
        len = length n
        cands = map read $ n : [ swap n i j | i <- [0 .. len - 1], j <- [0 .. i - 1], (j /= 0 || n !! i /= '0') ]

main = readLn >>= flip forM solve . enumFromTo 1
    where
        solve tc = do
            (a, b) <- liftM answer getLine
            putStrLn $ "Case #" ++ show tc ++ ": " ++ show a ++ " " ++ show b

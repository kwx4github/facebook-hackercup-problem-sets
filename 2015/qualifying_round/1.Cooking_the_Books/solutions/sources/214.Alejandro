#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

typedef long long LL;
#define rep(it,s) for(__typeof((s).begin()) it=(s).begin();it!=(s).end();it++)

long long n;

vector<int> decom(long long n) {

    vector<int> p;

    while (n) {
        p.push_back(n%10);
        n /= 10;
    }

    reverse(p.begin(), p.end());

    return p;

}

long long sum(vector<int> p) {

    long long n = 0;

    for (int i=0; i<p.size(); i++) {
        n = n*10LL + p[i];
    }

    return n;

}

long long getMin(long long n) {

    vector<int> p = decom(n);

    long long m = n;

    for (int i=0; i<p.size(); i++) {
        for (int j=i+1; j<p.size(); j++) {

            if (i!=0 || p[j]!=0) {

                swap(p[i], p[j]);

                m = min(m, sum(p));

                swap(p[i], p[j]);

            }

        }
    }

    return m;

}

long long getMax(long long n) {

    vector<int> p = decom(n);

    long long m = n;

    for (int i=0; i<p.size(); i++) {
        for (int j=i+1; j<p.size(); j++) {

            if (i!=0 || p[j]!=0) {

                swap(p[i], p[j]);

                m = max(m, sum(p));

                swap(p[i], p[j]);

            }

        }
    }

    return m;

}

void solve(int cas, long long n) {

    long long l = getMin(n);
    long long r = getMax(n);

    printf("Case #%d: %I64d %I64d\n", cas, l, r);

}

int main() {

    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

    int cases;
    cin>>cases;
    for (int cas=1; cas<=cases; cas++) {

        cin>>n;

        solve(cas, n);

    }


    return 0;

}

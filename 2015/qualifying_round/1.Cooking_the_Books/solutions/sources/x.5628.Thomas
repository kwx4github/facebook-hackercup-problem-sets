#!/usr/bin/env python

def join(number):
	result = 0
	for n in number:
		result *= 10
		result += n
	return result

def max_i(arr):
	index = 0
	maxnum = arr[0]

	for i in xrange(1, len(arr)):
		if (arr[i] > maxnum):
			maxnum = arr[i]
			index = i
			
	return (maxnum, index)

def min_i(arr):
	index = 0
	minnum = arr[0]

	for i in xrange(1, len(arr)):
		if (arr[i] < minnum and arr[i] != 0):
			minnum = arr[i]
			index = i
			
	return (minnum, index)
	
def biggest(number):
	if len(number) == 1:
		return number[0]

	if len(number) == 2:
		if (number[1] != 0):
			return max(join(number), join(number[::-1]))
		return join(number)
		
	(maxnum, maxindex) = max_i(number)

	tmp = number[0]
	number[0] = maxnum
	number[maxindex] = tmp
	
	return join(number)
	
def smallest(number):
	if len(number) == 1:
		return number[0]

	if len(number) == 2:
		if (number[1] != 0):
			return min(join(number), join(number[::-1]))
		return join(number)
		
	(minnum, minindex) = min_i(number)
	
	tmp = number[0]
	number[0] = minnum
	number[minindex] = tmp
	
	return join(number)
	
if __name__ == "__main__":
	
	T = int(raw_input().strip())
	fout = open("cookingbooks.out.txt", "wb")
	#import sys
	
	for t in xrange(T):
		
		N = raw_input().strip()
		parts1 = [int(n) for n in N]
		parts2 = [int(n) for n in N]
		
		big = biggest(parts1)
		small = smallest(parts2)
		
		#sys.stdout.write("Case #%d: %d %d\n" % ((t + 1), small, big))
		fout.write("Case #%d: %d %d\n" % ((t + 1), small, big))
	
	fout.close()


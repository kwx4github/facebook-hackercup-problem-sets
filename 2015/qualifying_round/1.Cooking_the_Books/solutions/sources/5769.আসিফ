/*
ID: Asif Jawad
LANG: C++
TASK:
*/

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <climits>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <iterator>
#include <utility>
#include <sstream>

using namespace std;

#define Read(f) freopen(f,"r",stdin)
#define Write(f) freopen(f,"w",stdout)

#define geti(n) scanf("%d",&n)
#define getll(n) scanf("%lld",&n)
#define getf(n) scanf("%lf",&n);

#define ll long long
#define pii pair<int,int>
#define pdd pair<double,double>
#define ff first
#define ss second
#define vi vector<int>

#define pi acos(-1)
#define inf LONG_MAX
#define eps 1e-9
#define mem(a,n) memset(a,n,sizeof a)
#define countbit(x) __builtin_popcountll(x)

#define rep(i,n) for(int i = 0;i < n;i++)
#define Rep(i,a,n) for(int i = (a) ;i < n;i++)
#define REP(i,a,n) for(int i = (a); i >= n;i--)

#define pb push_back
#define sz size()
#define mp make_pair

inline int Set(int N,int pos){return N = N | (1 << pos);}

inline int Reset(int N,int pos){return N = N & ~ (1 <<pos);}

inline bool check(int N,int pos) {return (bool) (N & (1 << pos) );}

template<class T>
T gcd(T a,T b)
{
    return (a % b == 0) ? b : gcd( b, a%b );
}

template <class T>

T lcm(T a,T b)
{
    return (a / gcd(a,b)) * b;
}

template<class T>

bool is_prime(T n)
{
    if( (n % 2 == 0 && n > 2) || n < 2 )return 0;

    for( T i = 3; i * i <= n ; i = i + 2 ){

        if( n % i == 0 )return 0;
    }

    return 1;
}

//template ends here


int main()
{
    Read("in1.txt");
    Write("out");
	
	int t;

	string n,minimum,maximum;

	cin >> t;

	cin.ignore();

	Rep(cases,1,t+1){
		
		cin >> n;

		if(n.sz == 1){
			
			printf("Case #%d: %s %s\n",cases,n.c_str(),n.c_str());
			continue;
		}

		minimum = maximum = n;
		
		int idx1 = 0,idx2 = 0;
		
		char mn,mx;

		rep(i,n.sz){
			
			mn = minimum[i];

			Rep(j,i+1,n.sz){
				
				if(minimum[i] > minimum[j] && minimum[j] <= mn && (i > 0 || maximum[j] > '0')){
					
					mn = minimum[j];
					idx1 = i,idx2 = j;
				}
			}
			if(idx1 || idx2){
				
				swap(minimum[idx1],minimum[idx2]);
				break;
			}
		}
		
		idx1 = 0,idx2 = 0;

		rep(i,n.sz){
			
			mx = maximum[i];

			Rep(j,i+1,n.sz){
				
				if(maximum[i] < maximum[j] && maximum[j] >= mx){
					
					mx = maximum[j];
					idx1 = i,idx2 = j;
				}
			}
			if(idx1 || idx2){
				
				swap(maximum[idx1],maximum[idx2]);
				break;
			}
		}

		printf("Case #%d: %s %s\n",cases,minimum.c_str(),maximum.c_str());
	}

    return 0;
}


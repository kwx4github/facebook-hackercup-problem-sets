using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Collections;
using System.Linq;

namespace FBHC2015.QR
{
    public class CookingTheBooks
    {
        static class Program
        {
            [STAThread]
            static void Main(string[] args)
            {
                string inpFilePath = "QR\\InputOutputFiles\\cooking_the_books.in";
                if (args.Length > 0) inpFilePath = args[0];
                CookingTheBooks b = new CookingTheBooks(inpFilePath);
                b.Run();
            }
        }

        StreamReader inputFile;
        StreamWriter outPutFile;

        long totalCases, testCase;
        string fileLine, inputFilePath, outputFilePath;

        //Problem Variables 
        string inputNumber;

        public CookingTheBooks(string inputFilePath)
        {
            this.inputFilePath = Path.GetFullPath(inputFilePath);
            this.outputFilePath = Path.Combine(Path.GetDirectoryName(inputFilePath), Path.GetFileNameWithoutExtension(inputFilePath) + ".out");
        }

        public void Run()
        {
            this.inputFile = new StreamReader(this.inputFilePath);
            this.outPutFile = new StreamWriter(this.outputFilePath);

            fileLine = this.inputFile.ReadLine();
            totalCases = Convert.ToInt32(fileLine);

            for (testCase = 0; testCase < totalCases; testCase++)
            {
                InitTestCase();
                RunTestCase();
                this.outPutFile.Flush();
            }

            this.outPutFile.Close();
            this.inputFile.Close();
        }

        private void InitTestCase()
        {
            string line = this.inputFile.ReadLine();
            inputNumber = line;
        }

        private void RunTestCase()
        {
            string minNumber = inputNumber, maxNumber = inputNumber;

            char[] nums = inputNumber.ToCharArray();
            char[] distOrderedNums = nums.Distinct().OrderBy(c => c).ToArray();
            if (distOrderedNums.Length > 1)
            {
                char min = distOrderedNums[0];
                char max = distOrderedNums[distOrderedNums.Length - 1];

                for (int i = (min == '0' ? 1 : 0); i < nums.Length; i++)
                {
                    if (min < nums[i])
                    {
                        int indx = Array.LastIndexOf(nums, min);
                        if (indx > i)
                        {
                            minNumber = getSwappedNumber((char[])nums.Clone(), i, indx);
                            break;
                        }
                    }
                }

                for (int i = 0; i < nums.Length; i ++)
                {
                    if (max > nums[i])
                    {
                        int indx = Array.LastIndexOf(nums, max);
                        if (indx > i)
                        {
                            maxNumber = getSwappedNumber((char[])nums.Clone(), i, indx);
                            break;
                        }
                    }
                }
            }
            this.outPutFile.Write("Case #{0}: {1} {2}\r\n", this.testCase + 1, minNumber, maxNumber);
        }

        private string getSwappedNumber(char[] nums, int indx1, int indx2)
        {
            char x = nums[indx1];
            nums[indx1] = nums[indx2];
            nums[indx2] = x;
            return new string(nums);
        }
    }
}

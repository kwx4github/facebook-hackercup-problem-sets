import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.Calendar;
import java.util.StringTokenizer;


public class f2015Q {

	public static void main(String[] args) throws FileNotFoundException {
		cookingTheBooks("./input/f2015Q/cooking_the_books");
	}

	public static void cookingTheBooks(String filename) throws FileNotFoundException {
		MyScanner scan = new MyScanner(new FileInputStream(filename+".txt"));
		StringBuilder output = null;
		String outputfile = filename + ".out";
		PrintStream out = new PrintStream(new FileOutputStream(outputfile));
		System.out.println(Calendar.getInstance().getTime()+" - Started writing to: "+outputfile);

		int t = scan.nextInt();
		for (int i = 0; i < t; i++) {
			output = new StringBuilder();
			output.append("Case #" + (i+1) + ": ");
			output.append(cookingTheBooks(scan.nextInt()));

			out.println(output.toString());
		}
		scan.close();
		out.close();
		System.out.println(Calendar.getInstance().getTime()+" - Finished writing to: "+outputfile);
	}

	public static String cookingTheBooks(int n) {
		char[] a = Integer.toString(n).toCharArray();
		int min = n;
		int max = n;
		for (int i = 0; i < a.length; i++) {
			for (int j = i+1; j < a.length; j++) {
				int s = swap(a, i, j);
				max = Math.max(max, s);
				min = Math.min(min, s);
			}
		}
		return min + " " + max;
	}

	public static int swap(char[] a_, int i, int j) {
		char[] a = a_.clone();
		char t = a[i];
		a[i] = a[j];
		a[j] = t;
		if (a[0] == '0') {
			return Integer.parseInt(new String(a_));
		}
		return Integer.parseInt(new String(a));
	}

	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner(InputStream in) {
			this.br = new BufferedReader(new InputStreamReader(in));
		}

		public void close() {
			try {
				this.br.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine(){
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}

}

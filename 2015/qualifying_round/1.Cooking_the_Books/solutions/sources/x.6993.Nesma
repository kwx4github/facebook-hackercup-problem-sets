import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;

import javax.swing.border.Border;

public class a {

	public static class point implements Comparable<point> {
		int x;
		int y;
		int dis;

		point(int x, int y, int b) {
			this.x = x;
			this.y = y;
			this.dis = b;
		}

		@Override
		public int compareTo(point o) {
			if (o.dis < dis)
				return 1;
			return -1;

		}
	}

	public static void main(String[] args) throws IOException {
	//	 BufferedReader in = new BufferedReader(new
		// InputStreamReader(System.in));
		BufferedReader in = new BufferedReader(new FileReader("cooking_the_books.txt"));

		 //PrintWriter out = new PrintWriter(new
		// OutputStreamWriter(System.out));
		PrintWriter out = new PrintWriter(new FileWriter("out.txt"));
		int t = Integer.parseInt(in.readLine());
		for (int i = 0; i < t; i++) {
			String s = in.readLine();
			int max=1;
			int min=9;
			int max_index=0;
			int min_index=0;
			for (int j = 0; j < s.length(); j++) {
				if(s.charAt(j)-'0'>max&&s.charAt(j)!='0'){
					max=s.charAt(j)-'0';
					max_index=j;
					
				}
				if(s.charAt(j)-'0'<min&&s.charAt(j)!='0'){
					min=s.charAt(j)-'0';
					min_index=j;
				}
				
			}
			char[] res_min=s.toCharArray();
			char[] res_max=s.toCharArray();
			char temp=res_min[0];
			res_min[0]=res_min[min_index];
			res_min[min_index]=temp;
			
			temp=res_max[0];
			res_max[0]=res_max[max_index];
			res_max[max_index]=temp;
			String n="";
			String x="";
			for (int j = 0; j < s.length(); j++) {
				n+=res_min[j];
				x+=res_max[j];
			}
			out.println("Case #"+(i+1)+": "+n+" "+x);
					

		}
		
		

		out.close();

	}
}

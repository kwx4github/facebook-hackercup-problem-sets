package com.facebook.hackercup.qualification;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class CookingTheBooks {

	static int T = 0;
	static int N = 0;
	static int i = 0;
	static int[] inputNumbers = null;
	
	public static void readFromFile(){
		try {
			 
			BufferedReader br = new BufferedReader(new FileReader("cooking_the_books.txt"));
		    String str;
		    if((str = br.readLine()) != null)
		      T = Integer.parseInt(str);  
		    if(T < 1 || T > 100){
		    	System.out.println("Invalid T value! Exiting...");
		    	System.exit(0);
		    }
		    inputNumbers = new int[T];
		    while(T > 0){
		    	if((str = br.readLine()) != null){
		    		N = Integer.parseInt(str);
		    		if(N < 0 || N > 999999999){
		    			System.out.println("Invalid N value! Exiting...");
		    			System.exit(0);
		    		}
		    		inputNumbers[i++] = N;
		    	}
		    	T--;
		    }
		    br.close();
		} catch (IOException e) {
			System.out.println("Input File Error: " + e.getMessage());
		}
	}
	public static void main(String[] args) {
		readFromFile();
		try{
			File file = new File("OutputFile");
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			int j = 0;
			for( j = 0; j < inputNumbers.length; j++){
				String output = "";
				int temp, rem = 0;
				int maxDigit = 0, maxIndex = 0;
				int minDigit = 9, minIndex = 0;
				int firstDigit;
				int count = 0;
				int intermediateMinNumber = inputNumbers[j];
				int minNumber = inputNumbers[j];
				int intermediateMaxNumber = inputNumbers[j];
				int maxNumber = inputNumbers[j];
				temp = inputNumbers[j];
				while(temp > 0){
					rem = temp % 10;
					count++;
					if(rem > maxDigit){
						maxDigit = rem;
						maxIndex = count;
					}

					if(rem < minDigit){
						minDigit = rem;
						minIndex = count;
					}
					temp = temp / 10;
				}
				firstDigit = rem;
				output += "Case #" + (j+1) + ": ";
				if(minDigit != firstDigit && minDigit != 0){
					intermediateMinNumber = (int) (inputNumbers[j] + ((minDigit - firstDigit) * Math.pow(10, count - 1)));
					minNumber = (int) (intermediateMinNumber - (minDigit - firstDigit) * Math.pow(10, minIndex - 1));
				}
				output += minNumber + " ";
				if(maxDigit != firstDigit){
					intermediateMaxNumber = (int) (inputNumbers[j] + ((maxDigit - firstDigit) * Math.pow(10, count - 1)));
					maxNumber = (int) (intermediateMaxNumber - (maxDigit - firstDigit) * Math.pow(10, maxIndex - 1));
				}
				output += maxNumber;
				if(j != (inputNumbers.length - 1))
					output += "\n";
				bw.write(output);
			}
			bw.close();
		}catch(IOException e){
			System.out.println("Output file error" + e.getMessage());
		}
		System.out.println("Results successfully written into the file!");
	}

}

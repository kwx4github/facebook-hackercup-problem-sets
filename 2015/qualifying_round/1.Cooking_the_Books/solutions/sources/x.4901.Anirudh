import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class CookingTheBooks {
	
	public static void main(String[] args) throws Exception {
		long startTime = System.currentTimeMillis();	
		BufferedReader bf = new BufferedReader(new FileReader("cooking_the_books.in"));
		PrintWriter out   = new PrintWriter(new FileWriter("cooking_the_books.out"));

		int totalTestCases;
		totalTestCases = Integer.parseInt(bf.readLine());
		

		String number;
		for(int i = 0; i < totalTestCases; i++) {
			number = bf.readLine();
			cookIt(out, number, i + 1);
			out.println();
		}
		out.close();
		long endTime = System.currentTimeMillis();
		tr(endTime - startTime + "ms");
	}

	public static void cookIt(PrintWriter out, String number, int index) {
		int[] digits = new int[number.length()];
		
		int zeros = 0;
		for(int i = 0; i < digits.length; i++) {
			digits[i] = number.charAt(i) - '0';
			if(digits[i] == 0) {
				zeros++;
			}
		}
		int[] digits1 = new int[number.length()];
		int[] digits2 = new int[number.length()];

		for(int k = 0; k < digits.length; k++) {
			digits1[k] = digits[k];
			digits2[k] = digits[k];
		}

		
		out.print("Case #" + index + ": "  + findMin(digits1, zeros) + " " + findMax(digits2, zeros));
					
		/*
		Integer[] integerArray = new Integer[digits.length];

		Integer[] integerArrayRev = new Integer[digits.length];

		for(int i = 0; i < digits.length; i++) {
			integerArray[i] = digits[i];
		}

		for(int i = 0; i < digits.length; i++) {
			integerArrayRev[i] = digits[i];
		}

		Arrays.sort(integerArray);
		Arrays.sort(integerArrayRev, Collections.reverseOrder());
		int max = findMax(integerArrayRev, zeros);
		*/
	}

	public static void swap(int[] arr, int a, int b) {
		int temp = arr[a];
		arr[a] = arr[b];
		arr[b] = temp;
	}

	public static int findMax(int[] digits, int zeros) {
		int val;
		int max = Integer.MIN_VALUE;
		int i, j;
		int maxindexj = 0;
		for(i = 0; i < digits.length - 1; i++) {
			val = digits[i];
			max = val;
			for(j = i + 1; j < digits.length; j++) {
				if(digits[j] > max) {
					max = digits[j];
					maxindexj = j;
				}	
			}
			if(max > val) {
				swap(digits, i, maxindexj); 
				return obtainArray(digits);
			}
		}
		return obtainArray(digits);
	}

	public  static int findMin(int[] digits, int zeros) {
		int val;
		int min = Integer.MAX_VALUE;
		int i, j;
		int minindex = 0;
		for(i = 0; i < digits.length - 1; i++) {
			val = digits[i];
			min = val;
			for(j = i + 1; j < digits.length; j++) {
				if(i == 0 && digits[j] == 0) 
					continue;
				if(digits[j] < min) {
					min = digits[j];
					minindex = j;
				}						
			}
			if(min < val) {
				swap(digits, i, minindex);
				return obtainArray(digits);
			}
		}
		return obtainArray(digits);
		
	}

	public static int obtainArray(int[] digits) {
		int temp = 1;
		int sum = 0;
		for(int i = digits.length - 1; i >= 0; i--) {
			sum += temp*digits[i];
			temp = temp*10;
		}

		return sum;
	}

	private static void tr(Object... o) { 
		System.out.println(Arrays.deepToString(o));
	}
}

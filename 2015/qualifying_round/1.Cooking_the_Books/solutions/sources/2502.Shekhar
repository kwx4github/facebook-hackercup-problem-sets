#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <cassert>

using namespace std;

#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define S(x) 			scanf("%d",&x)
#define all(c) 			(c).begin(),(c).end() 
#define sz(c) 			int((c).size())
#define pb 				push_back
#define present(c,x) 	((c).find(x) != (c).end()) 
#define rep(i,x,y) 		for(int i = x; i < y; i++)
#define REV(i,x,y) 		for(int i = x; i >= y; i--)
#define foreach(c,itr)	for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define FILL(a,v) 		memset(a,v,sizeof(a))
#define DB(x)			cerr<<#x<<" = "<<x<<endl
#define debugarr(A,a,b) cerr<<#A<<" : ";rep(i,a,b) cerr<<A[i]<<" ";cerr<<endl;
//#define R(x) 			((rand()%x) + 1)

typedef long long int LL;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;

/* ------------------------Main Code----------------------- */
const int MAX = 100001;

int A[11], cnt, B[11];

int findLargest()
{
	rep(i,0,cnt) B[i] = A[i];
	int res = 0, mx = -1, id;
	rep(j,0,cnt){
		mx = -1, id = j;
		rep(i,j+1,cnt){
			if(mx <= A[i]){
				id = i;
				mx = A[i];
			}
		}
		if(mx > A[j]){swap(A[j],A[id]); break;}
	}
	rep(i,0,cnt) res = 10*res + A[i];
	rep(i,0,cnt) A[i] = B[i];
	return res;
}

int findSmallest()
{
	rep(i,0,cnt) B[i] = A[i];
	if(cnt == 0) return 0;
	int x, mn = 10, id = 0;
	rep(i,1,cnt) if(A[i]){
		if(mn >= A[i]){
			id = i;
			mn = A[i];
		}
	}
	//DB(id);
	if(mn < A[0]) swap(A[0],A[id]);
	else{
		rep(j,1,cnt){
			mn = 10, id = j;
			rep(i,j+1,cnt){
				if(mn >= A[i]){
					id = i;
					mn = A[i];
				}
			}
			if(mn < A[j]){swap(A[j],A[id]); break;}
		}
	}
	int res = 0;
	rep(i,0,cnt) res = 10*res + A[i];
	rep(i,0,cnt) A[i] = B[i];
	return res;
}

void calc(int n)
{
	if(n == 0) return;
	calc(n/10);
	A[cnt++] = n % 10;	
}

int main()
{
	int t;
	S(t);
	rep(tc,1,t+1){
		int n;
		S(n);
		cnt = 0;
		calc(n);
		//debugarr(A,0,cnt);
		printf("Case #%d: %d %d\n",tc,findSmallest(),findLargest());
	}
	return 0;
}
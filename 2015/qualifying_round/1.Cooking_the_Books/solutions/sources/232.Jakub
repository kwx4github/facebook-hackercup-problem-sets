import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CookingTheBooks {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        String number = in.next();
        out.println("Case #" + testNumber + ": " + min(number) + " " + max(number));
    }

    private String max(String number) {
        String max = number;
        char input[] = number.toCharArray();
        int N = input.length;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                swap(input, i, j);
                String tmp = new String(input);
                if (less(max, tmp) && tmp.charAt(0) != '0') {
                    max = tmp;
                }
                swap(input, i, j);
            }
        }
        return max;
    }

    private boolean less(String a, String b) {
        return a.compareTo(b) < 0;
    }

    private void swap(char[] input, int i, int j) {
        char tmp = input[i];
        input[i] = input[j];
        input[j] = tmp;
    }

    private String min(String number) {
        String min = number;
        char input[] = number.toCharArray();
        int N = input.length;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                swap(input, i, j);
                String tmp = new String(input);
                if (less(tmp, min) && tmp.charAt(0) != '0') {
                    min = tmp;
                }
                swap(input, i, j);
            }
        }
        return min;
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

}



package facebook;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class CookingTheBooks {
    public static void main(String[] args) {

        File input = new File("input/cooking_the_books.txt");
        File output = new File("output/cooking_the_books_output.txt");
        BufferedReader br = null;

        try {
            br = new BufferedReader(new FileReader(input));
            int T = Integer.parseInt(br.readLine());
            StringBuilder sb = new StringBuilder();
            for (int i = 1; i <= T; i++) {

                sb.append("Case #" + i + ": ");
                sb.append(findLargeSmall(Long.parseLong(br.readLine())));
                if (i != T) {
                    sb.append("\n");
                }
            }

            PrintWriter pw = new PrintWriter(output);
            pw.write(sb.toString());
            pw.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    public static String findLargeSmall(long N) {

        if (N == 0) {
            return "0 0";
        }

        StringBuilder sb = new StringBuilder();
        List<Integer> digits = new ArrayList<>();

        long N_copy = N;
        while (N_copy != 0) {
            int digit = (int) N_copy % 10;
            digits.add(digit);
            N_copy /= 10;
        }

        // Actual Ordering of Digits in the Number
        Collections.reverse(digits);

        // Copy of the Number, before sorting
        ArrayList<Integer> digit_copy = new ArrayList<>(digits);

        Collections.sort(digits);

        // System.out.println(digits);
        // System.out.println(digit_copy);

        // Find Minimum
        boolean oneSwap = false;
        int swapDigit_added = -1, swapDigit_toadd = -1;
        for (int i = 0; i < digits.size(); i++) {
            if (digit_copy.get(i) > digits.get(i) && digits.get(i) != 0 && !oneSwap) {
                sb.append(digits.get(i));
                swapDigit_added = digits.get(i);
                swapDigit_toadd = digit_copy.get(i);
                oneSwap = true;
            } else {
                if (oneSwap && digit_copy.get(i) == swapDigit_added) {
                    sb.append(swapDigit_toadd);
                } else {
                    sb.append(digit_copy.get(i));
                }
            }
        }

        sb.append(" ");

        // Find Maximum
        oneSwap = false;
        swapDigit_added = -1;
        swapDigit_toadd = -1;
        int last = digits.size() - 1;
        for (int i = 0; i < digits.size(); i++) {
            if (digit_copy.get(i) < digits.get(last - i) && digits.get(last - i) != 0 && !oneSwap) {
                sb.append(digits.get(last - i));
                swapDigit_added = digits.get(last - i);
                swapDigit_toadd = digit_copy.get(i);
                oneSwap = true;
            } else {
                if (oneSwap && digit_copy.get(i) == swapDigit_added) {
                    sb.append(swapDigit_toadd);
                } else {
                    sb.append(digit_copy.get(i));
                }
            }
        }

        return sb.toString();
    }
}

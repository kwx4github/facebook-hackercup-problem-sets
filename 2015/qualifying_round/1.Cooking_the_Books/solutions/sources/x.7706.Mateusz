#include <cstdio>
#include <vector>
#include <algorithm>

std::vector<int> convertToVector(unsigned long long int n) {
    std::vector<int> retVal;
    if (n == 0) retVal.push_back(0);
    else while (n > 0) {
        retVal.push_back(n % 10);
        n /= 10;
    }

    std::reverse(retVal.begin(), retVal.end());

    return retVal;
}

unsigned long long int combine(std::vector<int> v) {
    unsigned long long int n = 0;
    for (auto i : v) {
        n *= 10;
        n += i;
    }

    return n;
}

unsigned long long int findMax(std::vector<int> v) {
    if (v.size() == 1) return v[0];
    for (int i = 0; i < v.size() - 1; i++) {
        int max = *std::max_element(v.begin() + i + 1, v.end());
        if (max > v[i]) {
            int pos = std::find(v.begin() + i + 1, v.end(), max) - v.begin();
            v[pos] = v[i];
            v[i] = max;
            break;
        }
    }

    return combine(v);
}

unsigned long long int findMin(std::vector<int> v) {
    if (v.size() == 1) return v[0];
    
    // special case cannot be swap to 0 on first position
    int min = 10;
    for (auto a = v.begin() + 1; a != v.end(); a++)
        if (*a < min && *a < v[0] && *a != 0)
            min = *a;

    if (min != 10) {
        // first position can be swapped
        int pos = v.size() - 1;
        while (v[pos] != min)
        pos--;

        v[pos] = v[0];
        v[0] = min;

    } else {
        // look for next position to be swapped
        for (int i = 1; i < v.size() - 1; i++) {
            min = *std::min_element(v.begin() + i + 1, v.end());
            if (min < v[i]) {
                int pos = v.size() - 1;
                while (v[pos] != min)
                    pos--;

                v[pos] = v[i];
                v[i] = min;

                break;
            }
        }
    }

    return combine(v);
}

void doSingleCase(int caseNo) {
    unsigned long long int n;
    scanf("%llu", &n);
    std::vector<int> vn = convertToVector(n);

    printf("Case #%d %llu %llu\n", caseNo, findMin(vn), findMax(vn));
}

int main() {
    int cases;
    scanf("%d", &cases);
    for (int i = 0; i < cases; i++)
        doSingleCase(i + 1);
}

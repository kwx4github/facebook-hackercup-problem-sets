#include <bits/stdc++.h>
using namespace std;

#define iota(i,n,b,s) for(int i=int(b);i!=int((b)+(s)*(n));i+=(s))
#define range(i,n,m) iota(i,(((n)>(m))?((n)-(m)):((m)-(n))),(n),((n)>(m)?-1:1))
#define rep(i,n) iota(i,(n),0,1)
#define loop for(;;)

#define INF (1e9)
#define EPS (1e-9)
#define cons(a,b) (make_pair(a,b))
#define car(a) (a.first)
#define cdr(a) (a.second)
#define cadr(a) (car(cdr(a)))
#define cddr(a) (cdr(cdr(a)))
#define all(a) a.begin(), a.end()
#define trace(var) cerr<<">>> "<<#var<<" = "<<var<<endl;

typedef long long Integer;
typedef double Real;
typedef vector<int> vi;
typedef vector<string> vs;
typedef map<string,int> Dictionary;
const Real PI = acos(-1);

template<class S, class T>
ostream& operator<<(ostream& os, pair<S,T> p) {
  os << '(' << car(p) << ", " << cdr(p) << ')';
  return os;
}

template<class T>
ostream& operator<<(ostream& os, vector<T> v) {
  os << v[0];
  for (int i=1, len=v.size(); i<len; ++i) os << ' ' << v[i];
  return os;
}

int dx[] = { -1, 0, 1, 0 };
int dy[] = {  0, -1, 0, 1 };

string swp(string s, int i, int j) {
  if (i == j) return s;
  string r = "";
  for (int k=0; k < s.size(); ++k) {
    r += s[k==i ? j : k==j ? i : k];
  }
  return r;
}

bool allzero(string s, int idx) {
  for (int i = idx; i < s.size(); ++i) {
    if (s[i] != '0') return false;
  }
  return true;
}

string mins(string s) {

  if (s.size() == 1) return s;
  if (allzero(s, 1)) return s;

  // min
  int mi = -1;
  int mc = '9';
  for (int i = s.size() - 1; i>=0; --i) {
    char c = s[i];
    if (c != '0' && mc > c) {
      mc = c;
      mi = i;
    }
  }
  if (s[0] != s[mi]) return swp(s, 0, mi);

  return s[0] + mins(s.substr(1, s.size() - 1));
}

string maxs(string s) {

  if (s.size() == 1) return s;
  if (allzero(s, 1)) return s;

  // max
  int ni = -1;
  int nc = '0';
  for (int i = s.size() - 1; i>=0; --i) {
    char c = s[i];
    if (nc < c) {
      nc = c;
      ni = i;
    }
  }
  if (s[0] != s[ni]) return swp(s, 0, ni);
  return s[0] + mins(s.substr(1, s.size() - 1));
}

int main() {

  int n; cin >> n;
  rep(_, n) {
    string s; cin >> s;
    cout << "Case #" << (_ + 1) << ": ";
    cout << mins(s) << ' ' << maxs(s) << endl;
  }

  return 0;
}

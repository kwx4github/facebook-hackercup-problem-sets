import java.io.*;
import java.util.StringTokenizer;

public class Solution {

    public static void main(String[] args) throws FileNotFoundException {
//        InputStream inputStream = System.in;
//        OutputStream outputStream = System.out;
        InputStream inputStream = new FileInputStream("/Users/roman/Downloads/cooking_the_books.txt");
//        OutputStream outputStream = System.out;
        OutputStream outputStream = new FileOutputStream(new File("/Users/roman/Downloads/cooking_the_books_output.txt"));
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);

        int t = in.nextInt();

        for (int i = 0; i < t; i++) {
            printCase(i + 1, getAnswer(in.nextLong()), out);
        }

        out.close();
    }

    public static void printCase(int number, String ans, PrintWriter out) {
        out.println("Case #" + number + ": " + ans);
    }

    public static String getAnswer(long n) {
        StringBuilder sb = new StringBuilder(String.valueOf(n));

        long min = Long.MAX_VALUE;
        long max = Long.MIN_VALUE;
        for (int i = 0; i < sb.length(); i++) {
            for (int j = i; j < sb.length(); j++) {
                char f = sb.charAt(i);
                char s = sb.charAt(j);

                StringBuilder temp = new StringBuilder(sb);
                temp.replace(i, i + 1, String.valueOf(s));
                temp.replace(j, j + 1, String.valueOf(f));

                long res = Long.valueOf(temp.toString());

                if (String.valueOf(res).length() < sb.length()) continue;

                min = Math.min(min, res);
                max = Math.max(max, res);
            }
        }

        return min + " " + max;
    }

    public static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public int[] nextIntArr(int n) {
            int[] arr = new int[n];
            for (int j = 0; j < arr.length; j++) {
                arr[j] = nextInt();
            }

            return arr;
        }
    }
}

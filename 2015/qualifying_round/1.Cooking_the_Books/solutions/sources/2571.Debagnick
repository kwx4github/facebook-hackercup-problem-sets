#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<vector>
#include<queue>
#include<algorithm>
#define mod 1000000007
typedef long long li;
using namespace std;

typedef struct data
{
	li q;
	li r;
} data;

/*class comparison		//for Priority Queue
{
	public : 
	bool operator()(customer a,customer b)
	{
		int pra=0,prb=0;
		pra=a.next;
		prb=b.next;
		if(pra<prb)
			return true;
		else
			return false;
	}
};

int comp(const void *a, const void *b)
{
	data m = *((data *)a);
	data n = *((data *)b);
	if(m.a>n.a)
		return 1;
	else if(m.a<n.a)
		return -1;
	else if(m.a==n.a)
	{
		if(m.d>n.d)
			return 1;
		else
			return -1;
	}
}

int exp(int x, int y)
{
	if(y==0)
		return 1;
	int z=0;
	z=exp(x,y/2);
	z=z*z;
	if((y%2)==1)
		z=z*x;
	return z;
}*/

/*Disjoint-Set Data Structure*/
/*vector<int> L;
void Make_Set(int N,int S[])
{
	L.resize(N);
	int i=0;
	for(i=0;i<N;i++)
	{
		L[S[i]]=S[i]);
	}
}

void union_set(int x, int y)
{
	L[x]=y;
}

int find_set(int x)		//with path compression
{
	if(x==L[x])
		return x;
	int root;
	root=find_set(L[x]);
	L[x]=root;
	return root;
}*/

char S[1000];
int A[10];
char Max[1000];
char Min[1000];
int main()
{
	int T=0,N=0,R=0,i=0,len=0,end=0,d=0,j=0,k=0,flag=0;
	scanf("%d",&T);
	for(k=1;k<=T;k++)
	{
		for(i=0;i<=9;i++)
		{
			A[i]=-1;
		}
		scanf("%s",S);
		len=strlen(S);
		i=0;
		while(i<len)
		{
			d=S[i]-'0';
			A[d]=max(A[d],i);
			i++;
		}
		strcpy(Min,S);
		strcpy(Max,S);
		i=0;
		flag=0;
		while(i<len)
		{
			d=S[i]-'0';
			for(j=9;j>d;j--)
			{
				if(A[j]!=-1 && A[j]>i)
				{
					Max[i]=S[A[j]];
					Max[A[j]]=S[i];
					flag=1;
					break;
				}
			}
			if(flag==1)
				break;
			i++;
		}
		i=0;
		flag=0;
		while(i<len)
		{
			d=S[i]-'0';
			for(j=0;j<d;j++)
			{
				if(i==0 && j==0)
					continue;
				if(A[j]!=-1 && A[j]>i)
				{
					Min[i]=S[A[j]];
					Min[A[j]]=S[i];
					flag=1;
					break;
				}
			}
			if(flag==1)
				break;
			i++;
			
		}
		printf("Case #%d: %s %s\n",k,Min,Max);		
	}
	return 0;
}

	

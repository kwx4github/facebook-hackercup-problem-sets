#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <math.h>
#include <algorithm>
#include <bitset>
#include <set>
#include <sstream>
#include <stdlib.h>
#include <map>
#include <queue>
#include <stack>
#include <assert.h>
// #include <unordered_set>
#include <iomanip>

using namespace std;

#define sz(x) ((int)x.size())
#define all(x) (x).begin(), (x).end()
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

#define forit(X,Y) for(typeof((Y).begin()) X = (Y).begin(); X != (Y).end(); ++X)

#define mplus(x, y) ((x) == -1 || (y) == -1) ? -1 : ((x) + (y))
#define mmax(x, y) ((x) == -1 || (y) == -1) ? -1 : max((x), (y))
#define mmin(x, y) ((x) == -1) ? (y) : ((y) == -1) ? (x) : min((x), (y))

#define checkbit(n, k) (((1L << (k)) & (n)) != 0)

#define debug(x) cerr << '>' << #x << ':' << x << endl;

typedef long long int64;

typedef vector <int> vi;
typedef vector < vi > vvi;

vector<int> get_digits(int n) {
    vector<int> res;
    while (n > 0) {
        res.push_back(n % 10);
        n /= 10;
    }
    reverse(res.begin(), res.end());
    return res;
}

int get_number(vector<int> digits) {
    int n = 0;
    for (int i = 0; i < digits.size(); ++i) {
        n *= 10;
        n += digits[i];
    }
    return n;
}

pair<int, int> get_min_max(int n) {
    int min_res = n;
    int max_res = n;
    vector<int> digits = get_digits(n);
    int l = digits.size();
    for (int i = 0; i < l; ++i) { 
        for (int j = i + 1; j < l; ++j) {
            if (i != 0 || digits[j] != 0) {
                swap(digits[i], digits[j]);
                int n1 = get_number(digits);
                min_res = min(min_res, n1);
                max_res = max(max_res, n1);
                swap(digits[i], digits[j]);
            }
        }
    }   
    return make_pair(min_res, max_res);
}

int main() {
    int T;
    cin >> T;
    for (int tt = 1; tt <= T; ++tt) {
        int n;
        cin >> n;
        pair<int, int> res = get_min_max(n);
        cout << "Case #" << tt << ": " << res.first << " " << res.second << endl;
    }
}

#include <iostream>
#include <fstream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cstring>
#include <string>
#include <cmath>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <functional>
#include <limits>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef pair<int,int> pii;
typedef vector<vector<int> > graph;

const double pi = acos(-1.0);

#define oned(a, x1, x2) { cout << #a << ":"; for(int _i = (x1); _i < (x2); _i++){ cout << " " << a[_i]; } cout << endl; }
#define twod(a, x1, x2, y1, y2) { cout << #a << ":" << endl; for(int _i = (x1); _i < (x2); _i++){ for(int _j = (y1); _j < (y2); _j++){ cout << (_j > y1 ? " " : "") << a[_i][_j]; } cout << endl; } }

#define mp make_pair
#define pb push_back
#define fst first
#define snd second

#define endl '\n'

const int MAXN = 10;

int n, len, d[MAXN];

void parse() {
	int m = n;
    len = 0;
    while(m > 0) {
        d[len++] = m%10;
        m /= 10;
    }
}

void print() {
    cout << ' ';
    for(int i = len-1; i >= 0; i--) {
		cout << d[i];
    }
}

void solve() {
    parse();
    int mn = d[len-1];
    int pos = len-1;
    for(int i = len-2; i >= 0; i--) {
		if(d[i] && d[i] < mn) {
            mn = d[i];
            pos = i;
		}
    }
    swap(d[pos],d[len-1]);
    print();
    parse();
    int mx = d[len-1];
    pos = len-1;
    for(int i = len-2; i >= 0; i--) {
        if(d[i] > mx) {
            mx = d[i];
            pos = i;
        }
    }
    swap(d[pos],d[len-1]);
    print();
    cout << endl;
}

int main() {
	freopen("input.in", "r", stdin);
	freopen("output.out", "w", stdout);
	int T; cin >> T;
	for(int C = 1; C <= T; C++) {
        cin >> n;
        cout << "Case #" << C << ":";
        solve();
	}
}

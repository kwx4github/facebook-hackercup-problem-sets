#include<stdio.h>
#include<iostream>
#include<set>
#include<algorithm>
#include<stack>
#include<queue>
#include<vector>
#include<cmath>
#include<ctype.h>
#define LL long long
#define h1t35h using
#define rocks namespace
#define theworld std;
#define SI(n) scanf("%d",&n);
#define SF(n) scanf("%lf",&n);
#define SLL(n) scanf("%lld",&n);
#define SC(n) scanf("%c",&n);
#define PC(n) printf("%c",&n);
#define PI(n) printf("%d",n);
#define PF(n) printf("%f",n);
#define PLL(n) printf("%lld",n);
#define FOR(x,n) for(x=0;x<(n);x++)
#define FORL(x,a,b) for(x=a;x<b;x++)
LL gcd(LL a, LL b)
{
    return b?gcd(b,a%b):a;
}
h1t35h rocks theworld;

//Functions
LL findMaximum(LL val);
LL findMinimum(LL val);

int main()
{
    int test,tt=1;
    freopen("cooking_the_books.txt","r",stdin);
    freopen("output","w",stdout);
    SI(test)
    while(tt<=test)
    {
        LL input;
        SLL(input)
        LL maxpos,minpos;
        maxpos=findMaximum(input);
        minpos=findMinimum(input);
        cout<<"Case #"<<tt<<": "<<minpos<<" "<<maxpos<<endl;
        tt++;
    }
    return 0;
}

LL findMaximum(LL val)
{
    LL retval,i,j;
    if(val==0)
    {
        retval=0;
    }
    else
    {
        vector<int> valdiv,valsort;
        while(val!=0)
        {
            valdiv.push_back(val%10);
            valsort.push_back(val%10);
            val=val/10;
        }
        LL len=valdiv.size();
        reverse(valdiv.begin(),valdiv.end());
        sort(valsort.rbegin(),valsort.rend());
        FOR(i,len)
        {
            if(valsort[i]!=valdiv[i])
            {
                j=len-1;
                while(valdiv[j]!=valsort[i])
                {
                    j--;
                }
                valdiv[j]=valdiv[i];
                valdiv[i]=valsort[i];
                break;
            }
        }
        LL tmp=0;
        FOR(i,len)
        {
            tmp*=10;
            tmp+=valdiv[i];
        }
        retval=tmp;
    }
    return retval;
}

LL findMinimum(LL val)
{
    LL retval,i,j;
    if(val==0)
    {
        retval=0;
    }
    else
    {
        vector<int> valdiv;
        while(val!=0)
        {
            valdiv.push_back(val%10);
            val=val/10;
        }
        LL len=valdiv.size();
        reverse(valdiv.begin(),valdiv.end());
        LL cur=valdiv[0];
        LL mn=cur;
        bool flag=false;
        FORL(i,1,len)
        {
            if(mn>valdiv[i] && valdiv[i]!=0)
            {
                mn=valdiv[i];
                flag=true;
            }
        }
        if(flag)
        {
            j=len-1;
            while(valdiv[j]!=mn)
            {
                j--;
            }
            valdiv[j]=valdiv[0];
            valdiv[0]=mn;
        }
        else
        {
            FORL(i,1,len)
            {
                cur=valdiv[i];
                mn=cur;
                flag=false;
                LL pos=i+1;
                FORL(j,i+1,len)
                {
                    if(mn>valdiv[j])
                    {
                        mn=valdiv[j];
                        flag=true;
                    }
                }
                if(flag)
                {
                    pos=len-1;
                    while(valdiv[pos]!=mn)
                    {
                        pos--;
                    }
                    valdiv[pos]=valdiv[i];
                    valdiv[i]=mn;
                    break;
                }
            }
        }
        LL tmp=0;
        FOR(i,len)
        {
            tmp*=10;
            tmp+=valdiv[i];
        }
        retval=tmp;
    }
    return retval;
}

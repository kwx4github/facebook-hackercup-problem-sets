#include <iostream>
#include <cstdlib>
#define SWAP(a,b) ((a)^=(b),(b)^=(a),(a)^=(b))
#define ZERO 100

struct position{
	unsigned int max,min,zero;
};


int swap(std::string number,unsigned char i,unsigned char j){
	SWAP(number[i],number[j]);
	return atoi(number.c_str());
}


int main(int argc, char const *argv[]){
	struct position left,right;
	unsigned int T;
	std::cin >> T;
	for(unsigned int i = 1; i <= T; i++){
		std::string N;
		std::cin >> N;
		unsigned int n = atoi(N.c_str());
		if(n <= 10){
			std::cout << "Case #" << i << ": " << n << " " << n << std::endl;
			continue;
		}
		/**/
		left.max = 0; left.min = 0; left.zero = ZERO;
		right.max = 0; right.min = 0; right.zero = ZERO;
		unsigned char k;
		for(k = 1; k < N.size(); k++){
			if(N[k] >= N[right.max]){
				right.max = k;
				if(N[k] != N[left.max]){
					left.max = k;
				}
			}
			if(N[k] != '0'){
				if(N[k] <= N[right.min]){
					right.min = k;
					if(N[k] != N[left.min]){
						left.min = k;
					}
				}
			}else{
				right.zero = k;
				if(left.zero == ZERO){
					left.zero = k;
				}
			}
		}

		unsigned int l[2] = {n,n},s[3] = {n,n,n};

		for(k = 0; k < right.max; k++){
			if(N[k] != N[right.max]){
				l[0] = swap(N,k,right.max);
				break;
			}
		}
		if(left.zero != ZERO){
			left.min = left.zero;
		}
		for(k = N.size() - 1; k > left.min; k--){
			if(N[k] != N[left.min]){
				l[1] = swap(N,k,left.min);
				break;
			}
		}
		unsigned int larger = (l[0] > l[1] ? l[0] : l[1]);


		for(k = 0; k < right.min && k < right.zero; k++){
			if(N[k] != N[right.min]){
				s[0] = swap(N,k,right.min);
				break;
			}
		}
		if(right.zero != ZERO){
			for(k = 1; k < right.zero; k++){
				if(N[k] != N[right.zero]){
					s[2] = swap(N,k,right.zero);
					break;
				}
			}
		}

		for(k = N.size() - 1; k > left.max; k--){
			if(N[k] != N[left.max]){
				s[1] = swap(N,k,left.max);
				break;
			}
		}
		s[0] = (s[0] < s[1] ? s[0] : s[1]);
		unsigned int smaller = (s[0] < s[2] ? s[0] : s[2]);

		std::cout << "Case #" << i << ": " << smaller << " " << larger << std::endl;
	}

	return 0;
}




/**
1991 9191 9911
33124566
66106 66601 66160
66216 66612 66261
99001 99100


651141


**/
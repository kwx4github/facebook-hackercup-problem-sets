#include <stdio.h>
#include <string.h>
#include <algorithm>

using namespace std;

void minimize(const char *N, char *Nmin, bool allowzero = false)
{
	char dmin = N[0];
	int pmin = 0;

	if(N[1]=='\0') return;

	for(int j=0; N[j]!='\0'; j++) {
		char atual = N[j];
		if(atual <= dmin && (atual!='0'||allowzero)) {
			dmin = atual;
			pmin = j;
		}
	}
	if(dmin!=N[0])
		swap(Nmin[0], Nmin[pmin]);
	else
		minimize(N+1, Nmin+1, true);
}

void maximize(const char *N, char *Nmin)
{
	char dmin = N[0];
	int pmin = 0;

	if(N[1]=='\0') return;

	for(int j=0; N[j]!='\0'; j++) {
		char atual = N[j];
		if(atual >= dmin) {
			dmin = atual;
			pmin = j;
		}
	}
	if(dmin!=N[0])
		swap(Nmin[0], Nmin[pmin]);
	else
		minimize(N+1, Nmin+1);
}

int main()
{
	int i, T;
	scanf("%d", &T);
	for(i=1; i<=T; i++) {
		char N[10];
		char Nmax[10], Nmin[10];
		int pmax;
		char dmax='0';
		scanf("%s", N);
		strcpy(Nmax, N);
		strcpy(Nmin, N);
		/*for(int j=0; N[j]!='\0'; j++) {
			char atual = N[j];
			if(atual >= dmax) {
				dmax = atual;
				pmax = j;
			}
		}
		swap(Nmax[0], Nmax[pmax]);
		*/
		maximize(N, Nmax);
		minimize(N, Nmin);
		printf("Case #%d: %s %s\n", i, Nmin, Nmax);
	}
}

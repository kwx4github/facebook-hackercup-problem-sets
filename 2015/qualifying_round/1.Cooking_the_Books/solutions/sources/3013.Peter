/* Facebook Hackercup 2015 Cooking the books */
import io.
import util.
list2int(N) = Res =>
	N1 = map(to_string,N),
	to_integer(join(N1,'')) = Res.
 
main =>
	Outfile = open("cookingout.txt", write),
	read_file_lines("cooking.txt") = Lines,
	T = to_integer(Lines[1]),
	Idx = 2,
	foreach(I in 1..T)
		N = map(to_integer,Lines[Idx]),
		Cmin = list2int(cookmin(N)),
		Cmax = list2int(cookmax(N)),
	    printf(Outfile,"Case #%d: %w %w%n", I, Cmin, Cmax),
	    Idx := Idx + 1
	end,
	close(Outfile).
	
cookmax(N) = Res, length(N) <= 1 =>  
	Res = N.
	
cookmax(N) = Res =>
    Ns = tail(N),
	Idx := maxpos(Ns),
	if N[1] < N[1+Idx], N[1+Idx]>0 then
		Res := swap(N,1+Idx)
	else
		Res := [N[1] | cookmax(Ns)]
	end.

maxpos(Ns) = Idx =>
	Idx = find_last_of(Ns,max(Ns)).
	
minpos(Ns) = Idx =>
	Ni = [I : I in Ns, I > 0],
	Idx = cond(Ni != [], find_last_of(Ns, min(Ni)), 0).
	
minpos0(Ns) = Idx =>
	Idx = find_last_of(Ns,min(Ns)).
	
swap(N, Idx) = Ns =>
	Ns = [N[Idx] | [cond(J==Idx,N[1],N[J]) : J in 2..length(N)]].

cookmin(N) = Res, length(N) <= 1 =>  
	Res = N.
	
cookmin(N) = Res =>
    Ns = tail(N),
	Idx := minpos(Ns),
	if N[1] > N[1+Idx], N[1+Idx]>0, Idx > 0 then
		Res := swap(N,1+Idx)
	else
		Res := [N[1] | cookmin0(Ns)]
	end.

cookmin0(N) = Res, length(N) <= 1 =>  
	Res = N.
	
cookmin0(N) = Res =>
    Ns = tail(N),
	Idx := minpos0(Ns),
	if N[1] > N[1+Idx] then
		Res := swap(N,1+Idx)
	else
		Res := [N[1] | cookmin0(Ns)]
	end.

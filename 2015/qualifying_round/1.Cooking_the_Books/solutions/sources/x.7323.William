function digitsArray(n) {
  var aux = [];
  while(n !== 0) {
    aux.push(n % 10);
    n = parseInt(n / 10);
  }
  return aux.reverse();
}

// pos start at 0 from left to right
function swapDigits(digits, oldPos, newPos) {
  var temp = digits[oldPos];
  digits[oldPos] = digits[newPos];
  digits[newPos] = temp;
  return digits;
}

function getMinNonZeroOfArray(numArray) {
  var min = numArray[0];
  var curr;
  for(i = 1; i < numArray.length - 1; i++) {
    curr = numArray[i];
    if (curr < min && curr > 0) min = curr;
  } 
  return min;
}

function getMaxOfArray(numArray) {
  return Math.max.apply(null, numArray);
}

function minMax(n) {
  var digits = digitsArray(n);
  var countMin = 0;
  var countMax = 0;
    
  var minIndex = digits.lastIndexOf(this.getMinNonZeroOfArray(digits));
  while (minIndex === 0) { 
    minIndex = digits.lastIndexOf(this.getMinNonZeroOfArray(digits.slice(1)));
    countMin++;
  }
  minIndex += countMin;
  var min = this.swapDigits(digits.slice(0), minIndex, countMin).join('');

  var maxIndex = digits.lastIndexOf(this.getMaxOfArray(digits));
  while (maxIndex === 0) {
    maxIndex = digits.lastIndexOf(this.getMaxOfArray(digits.slice(1)));
    countMax++;  
  }
  maxIndex += countMax;
  var max = this.swapDigits(digits.slice(0), maxIndex, countMax).join('');

  return { min: min, max: max };
}


function cooking(array) {
  var lines = array[0];
  var output = "";
  for (var res, i = 1; i < array.length; i++) { // skip the first element
    res = minMax(array[i]);
    output +="Case #" + i + ": " + res.min + " " + res.max + (i === array.length - 1 ? "": "\n");
  }
  console.log(output);
}

function getFileToArray(e) {
  var files = e.target.files;
  var fr = new FileReader();
  fr.onload = function(e) {
    var txt = fr.result;
    var items = txt.split('\n');
    cooking(items.slice(0, items.length - 1));    
  };
  fr.readAsText(files[0]);
}

document.getElementById('files').addEventListener('change', getFileToArray, false);

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class CookingTheBooks {
  public static void main(String[] args) {
    BufferedReader br = null;
    try {

      String sCurrentLine;
      br = new BufferedReader(new FileReader(
          "test.txt"));
      int tests = 0;
      if ((sCurrentLine = br.readLine()) != null) {
        tests = Integer.parseInt(sCurrentLine);
      }

      for (int i = 0; i < tests; i++) {
        sCurrentLine = br.readLine();
        long num = Long.parseLong(sCurrentLine);
        getSmallestAndLargest(i+1, num, sCurrentLine.length());
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (br != null)
          br.close();
      } catch (IOException ex) {
        ex.printStackTrace();
      }
    }
  }

  private static void getSmallestAndLargest(int caseNum, long num, int len) {
    int[] numbers = new int[len];
    int small = Integer.MAX_VALUE, large = Integer.MIN_VALUE;
    int smallIndex = -1, largeIndex = -1;
    System.out.print("Case #" + caseNum + ": ");    
    if (num == 0 ) {
      System.out.println("0 0");
      return;
    }
    for (int i = 0; i < len; i++) {
      numbers[i] = (int) (num % 10);
      num /= 10;
      if (numbers[i] != 0 && small > numbers[i]) {
        small = numbers[i];
        smallIndex = i;        
      }
      if (large < numbers[i]) {
        large = numbers[i];
        largeIndex = i;
      }
    }       
    int temp;
    temp = numbers[len-1];
    numbers[len-1] = numbers[smallIndex];
    numbers[smallIndex] = temp;
    for(int i = len-1; i >= 0; i--) {        
      System.out.print(numbers[i]);
    }
    temp = numbers[len-1];
    numbers[len-1] = numbers[smallIndex];
    numbers[smallIndex] = temp;
    temp = numbers[len-1];
    numbers[len-1] = numbers[largeIndex];
    numbers[largeIndex] = temp;
    System.out.print(" ");
    for(int i = len-1; i >= 0; i--) {        
      System.out.print(numbers[i]);
    }
    System.out.println();
  }
}

#!/usr/bin/python

import os
import sys
import time
import math
import collections

def Swap(s, a, b):
  if b < a:
    return Swap(s, b, a)
  assert b != a
  return ''.join(s[:a] + s[b:b+1] + s[a+1:b] + s[a:a+1] + s[b+1:])

def FindLast(s, c):
  for i in range(len(s)):
    if s[i] == c:
      c_index = i
  return c_index

def Smallest(s):
  # 0-9
  if len(s) == 1:
    return s
  # Find the smallest possible permutation.
  smallest_sort = sorted(s)
  if smallest_sort[0] == '0':
    for i in range(len(smallest_sort)):
      if smallest_sort[i] != '0':
        smallest_sort = Swap(smallest_sort, 0, i)
        break
  # Now find where this guy deviates from that, and swap the last small number into the first slot.
  for i, (sa, ssa) in enumerate(zip(s, smallest_sort)):
    if sa != ssa:
      # This is what to swap into
      return Swap(s, i, FindLast(s, ssa))
  else:
    return s
  
def Biggest(s):
  # 0-9
  if len(s) == 1:
    return s
  # Find the largest possible permutation.
  biggest_sort = list(reversed(sorted(s)))
  # Now find where this guy deviates from that, and swap the last big number into the first slot.
  for i, (sa, ssa) in enumerate(zip(s, biggest_sort)):
    if sa != ssa:
      # This is what to swap into
      return Swap(s, i, FindLast(s, ssa))
  else:
    return s

def main():
  N = int(sys.stdin.readline())
  for qw in range(1, N+1):
    s = sys.stdin.readline().strip()
    small, big = Smallest(s), Biggest(s)
    print "Case #%d: %s %s" % (qw, small, big)

if __name__ == '__main__':
  main()

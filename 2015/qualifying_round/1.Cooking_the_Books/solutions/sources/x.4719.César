import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class CookingTheBooks {
    public static void main(String[] args) throws IOException {
        final String INPUT_FILE = "input.in";
        final String OUTPUT_FILE = "output.out";
        final Scanner scanner = new Scanner(new File(INPUT_FILE));
        final FileWriter fw = new FileWriter(new File(OUTPUT_FILE));
        try{
            StringBuffer stringBuffer = new StringBuffer();
            int t = scanner.nextInt();
            for(int i = 1; i <= t; i++) {
                stringBuffer.append(String.format("Case #%d: %s\n", i, getOutput(scanner.nextInt())));
            }
            fw.write(stringBuffer.toString());
        }finally{
            fw.close();
            scanner.close();
        }
    }

    private static String getOutput(int n){
        StringBuffer stringBuffer = new StringBuffer();
        int[] digits = getDigits(n);
        int indexOfLatestSmallestDigit = 0;
        int indexOfLatestLargestDigit = 0;
        int latestSmallestDigit = digits[0];
        int latestLargestDigit = digits[0];
        for (int i = 1; i < digits.length; i++){
            if(digits[i] <= latestSmallestDigit && digits[i] != 0){
                latestSmallestDigit = digits[i];
                indexOfLatestSmallestDigit = i;
            }
            if(digits[i] >= latestLargestDigit){
                latestLargestDigit = digits[i];
                indexOfLatestLargestDigit = i;
            }
        }
        int i = 0;
        while(digits[i] == latestSmallestDigit && i < indexOfLatestSmallestDigit) {
            i++;
        }
        digits = swap(i, indexOfLatestSmallestDigit, digits);
        stringBuffer.append(toString(digits));
        stringBuffer.append(" ");
        digits = swap(indexOfLatestSmallestDigit, i, digits);
        i = 0;
        while(digits[i] == latestLargestDigit && i < indexOfLatestLargestDigit){
            i++;
        }
        digits = swap(i, indexOfLatestLargestDigit, digits);
        stringBuffer.append(toString(digits));
        return stringBuffer.toString();
    }

    private static int[] getDigits(int n){
        int digits[] = new int[Integer.toString(n).length()];
        for (int i = 0; i < digits.length; i++) {
            digits[digits.length - i - 1] = n % 10;
            n = n / 10;
        }
        return digits;
    }

    private static int[] swap(int i, int j, int[] array){
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        return array;
    }

    private static String toString(int[] array){
        StringBuffer stringBuffer = new StringBuffer();
        for(int i : array){
            stringBuffer.append(i);
        }
        return stringBuffer.toString();
    }
}

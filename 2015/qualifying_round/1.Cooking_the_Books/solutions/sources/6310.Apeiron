import java.io.*;
import java.util.*;

class cooking_the_books
{
	public static void main(String args[]) throws Exception
	{
		Scanner scanner=new Scanner(System.in);
		int T=scanner.nextInt(); scanner.nextLine();
		String minString, maxString;

		for(int i=0; i<T; i++)
		{
			String str=scanner.nextLine();
			if(str.length()==1) 
			{
				System.out.println("Case #"+(i+1)+": "+str+" "+str);
			}
			else if(isAllCharsSame(str))
			{
				System.out.println("Case #"+(i+1)+": "+str+" "+str);
			}
			else if(isCharsAscending(str))
			{
				System.out.println("Case #"+(i+1)+": "+str+" "+swap(str, 0, str.length()-1));
			}			
			else if(isCharsDescending(str))
			{
				System.out.println("Case #"+(i+1)+": "+swap(str, 0, findMinPosNotZero(str))+" "+str);
			}
			else
			{
				int minPos, maxPos;
				minPos=findMinPosNotZero(str);
				if(str.charAt(minPos)!=str.charAt(0))
				{
					minString=swap(str, 0, minPos);
				}
				else
				{
					String temp=str.substring(1);
					while( temp.charAt(minPos=findMinPosIncZero(temp)) == temp.charAt(0) ) 
						{
						temp=temp.substring(1);
				
						}

					temp=swap(temp, minPos, 0);
					minString=str.substring(0, str.length()-temp.length())+temp;
				}

				String temp=str;
				while( temp.charAt(maxPos=findMaxPos(temp)) == temp.charAt(0) ) 
					{
					temp=temp.substring(1);
			
					}

				temp=swap(temp, maxPos, 0);
				maxString=str.substring(0, str.length()-temp.length())+temp;	

				System.out.println("Case #"+(i+1)+": "+minString+" "+maxString);
			}
		}
	}

	static String swap(String str, int pos1, int pos2)
	{
		if(pos1==pos2) return str;
		if(pos1>pos2)
		{
			int temp=pos1;
			pos1=pos2;
			pos2=temp;
		}
		return str.substring(0, pos1)+str.charAt(pos2)+str.substring(pos1+1, pos2)+str.charAt(pos1)+str.substring(pos2+1);
	}

	static boolean isCharsAscending(String str)
	{
		boolean flag=true;
		for(int i=1; i<str.length(); i++)
		{
			if(str.charAt(i)<str.charAt(i-1))
			{
				flag=false;
				break;
			}
		}
		return flag;
	}
	static boolean isCharsDescending(String str)
	{
		boolean flag=true;
		for(int i=1; i<str.length(); i++)
		{
			if(str.charAt(i)>str.charAt(i-1))
			{
				flag=false;
				break;
			}
		}
		return flag;
	}
	static int findMinPosNotZero(String str)
	{
		if(str.equals("0")) return 0;
		int minPos=0, i=49;
		while((minPos=str.lastIndexOf(i))==-1)
		{
			i++;
		}
		return minPos;
	}
	
	static int findMinPosIncZero(String str)
	{
		if(str.equals("0")) return 0;
		int minPos=0, i=48;
		while((minPos=str.lastIndexOf(i))==-1)
		{
			i++;
		}
		return minPos;
	}	
	static int findMaxPos(String str)
	{
		if(str.equals("0")) return 0;
		int maxPos=0, i=57;
		while((maxPos=str.lastIndexOf(i))==-1)
		{
			i--;
		}
		return maxPos;
	}
	static boolean isAllCharsSame(String str)
	{
		boolean flag=true;
		for(char c: str.toCharArray())
		{
			if(c!=str.charAt(0))
			{
				flag=false;
				break;
			}
		}
		return flag;
	}
}
#include <iostream>
#include <vector>

using namespace std;

class range {
private:
  struct Iterator {
    int val;
    int operator*() {return val;}
    bool operator!=(Iterator& itr) {return val < itr.val;}
    void operator++() {++val;}
  };
  Iterator i, n;
public:
  range(int n) : i({0}), n({n}) {}
  range(int i, int n) : i({i}), n({n}) {}
  Iterator& begin() {return i;}
  Iterator& end() {return n;}
};

template<class T> inline T at(const vector<T> &v, int i) {return v[(i % (int)v.size() + v.size()) % v.size()];}

template<class T> inline bool is_max(T &a, const T &b) {return a < b ? a = b, true : false;}
template<class T> inline bool is_min(T &a, const T &b) {return a > b ? a = b, true : false;}

#include <sstream>

template<class A, class B> B convert(A a) {
  stringstream ss;
  ss << a;
  B b;
  ss >> b;
  return b;
}

int main() {
  int n;
  cin >> n;
  for (int _ : range(n)) {
    cout << "Case #" << _ + 1 << ": ";
    int t;
    cin >> t;
    int mn = t, mx = t;
    string s = convert<int, string>(t);
    for (int i : range(s.size())) for (int j : range(s.size())) {
      string ss = s;
      if (i == 0 && ss[j] == '0') continue;
      if (j == 0 && ss[i] == '0') continue;
      swap(ss[i], ss[j]);
      is_min(mn, convert<string, int>(ss));
      is_max(mx, convert<string, int>(ss));
    }
    cout << mn << " " << mx << endl;
  }
}

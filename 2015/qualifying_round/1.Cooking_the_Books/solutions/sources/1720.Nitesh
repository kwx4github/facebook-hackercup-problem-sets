import java.io.InputStreamReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CookingTheBooks {
    public void solve(int testNumber, InputReader in, OutputWriter out) {
        String s=in.nextString();
        long max,min;
        max=min=Long.parseLong(s);
        //out.printLine(max+" "+min);
        if(s.length()>1){
            int l=s.length();
            for(int i=0;i<(l-1);i++){
                for(int j=i+1;j<l;j++){
                    char ch[]=s.toCharArray();
                    char tmp=ch[i];
                    ch[i]=ch[j];
                    ch[j]=tmp;
                    String s1="";
                    for(int k=0;k<l;k++)
                        s1+=ch[k];
                    if(s1.charAt(0)!='0') {
                        if (Long.parseLong(s1) < min) {
                            min = Long.parseLong(s1);
                        }
                        if (Long.parseLong(s1) > max) {
                            max = Long.parseLong(s1);
                        }
                    }
                }
            }
        }
        out.printLine("Case #"+testNumber+": "+min+" "+max);
    }
}

class InputReader {
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }
    public String next()
    {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }

    public String nextString()
    {
        try {
            return in.readLine();
        }
        catch (Exception e)
        {
            return null;
        }

    }
}

class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

    public void print(Object...objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void printLine(Object...objects) {
            print(objects);
            writer.println();
        }

        public void close() {
            writer.close();
        }
}


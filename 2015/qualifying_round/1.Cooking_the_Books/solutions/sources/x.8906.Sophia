import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;

public class CookingTheBooks {
	public static void main(String[] args) throws FileNotFoundException {
		 FileInputStream input = new FileInputStream("C:\\Users\\danzhi\\workspace\\HackerCup2015\\src\\cooking_the_books.txt");
		 PrintStream output = new PrintStream("C:\\Users\\danzhi\\workspace\\HackerCup2015\\src\\cooking_the_books.out");
		 System.setOut(output);
		 
		 Scanner scan = new Scanner(input);
		 int T = scan.nextInt();
		 
		 for (int i = 0; i < T; i++) {
			 String N = scan.next();
			 
			 System.out.print("Case #" + (i + 1) + ": ");
			 
			 String smallest = "";
				 for (int digit = 0; digit < N.length(); digit++) {
					 if (N.charAt(digit) > smallestAfter(N, digit)) {
						 char replacee = N.charAt(digit); //4
						 char replacer = smallestAfter(N, digit); //2
						 
						 for (int j = 0; j < N.length(); j++) {
							 if (j == digit) {
								 smallest += replacer;
							 } else if (j - digit == N.substring(digit).indexOf(replacer) && j > digit) {
								 smallest += replacee;
							 } else {
								 smallest += N.charAt(j);
							 }
						 }
						 break;
					 }
					 
					 if (digit == N.length() - 1) {
						 smallest = N;
						 break;
					 }
				 }
				 
			 System.out.print(smallest + " ");
			 
			 String largest = "";
				 for (int digit = 0; digit < N.length(); digit++) {
					 if (N.charAt(digit) < largestAfter(N, digit)) {
						 char replacee = N.charAt(digit);
						 char replacer = largestAfter(N, digit);
						 
						 for (int j = 0; j < N.length(); j++) {
							 if (j == digit) {
								 largest += replacer;
							 } else if (j - digit == N.substring(digit).indexOf(replacer) && j > digit) {
								 largest += replacee;
							 } else {
								 largest += N.charAt(j);
							 }
						 }
						 break;
					 }

					 if (digit == N.length() - 1) {
						 largest = N;
						 break;
					 }
				 }
				 
			 System.out.println(largest);
		 }
		 scan.close();
	}
	
	public static char largestAfter(String s, int index) {
		char result = '0';
		for (int i = index + 1; i < s.length(); i++) {
			if (s.charAt(i) > result) {
				result = s.charAt(i);
			}
		}
		return result;
	}
	
	public static char smallestAfter(String s, int index) {
		char result = '9';
		for (int i = index + 1; i < s.length(); i++) {
			if (s.charAt(i) < result && s.charAt(i) != '0') {
				result = s.charAt(i);
			}
		}
		return result;
	}
}
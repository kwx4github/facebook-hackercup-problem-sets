import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

/*
 ID: jamesja2
 LANG: JAVA
 TASK: books
 */

public class books { // TO CHANGE: this class name
	public static int[] digits(int cur) {
		int length = (int) Math.log10(cur) + 1;
		int[] digit = new int[length];
		for (int i = digit.length - 1; i >= 0; i--) {
			digit[i] = cur % 10;
			cur /= 10;
		}
		return digit;
	}
	public static int assemble(int[] digits){
		int count =0;
		int temp =0;
		for(int i =digits.length-1; i>=0; i--){
			temp+=digits[i]*((int)Math.pow(10, count));
			count++;
		}
		return temp;
	}
	public static int maxS(int cur, int[] digit) {
		int maxI = 0;
		int max = digit[0];
		if (cur == 0) {
			return 0;
		} else {
			for (int i = 0; i < digit.length; i++) {
				if(digit[i]>=max){
					max = digit[i];
					maxI = i;
				}
			}
			int temp = digit[0];
			digit[0] = max;
			digit[maxI] = temp;
			return assemble(digit);
		}
		
	}

	public static int minS(int cur, int[] digit) {
		int minI = 0;
		int min = digit[0];
		if (cur == 0) {
			return 0;
		} else {
			for (int i = 0; i < digit.length; i++) {
				if(digit[i]<=min&&digit[i]!=0){
					min = digit[i];
					minI = i;
				}else if(digit[i]==0){
					if(i!=0){
						min = 0;
						minI = i;
					}
				}
			}
			if(min!=0){
			int temp = digit[0];
			digit[0] = min;
			digit[minI] = temp;
			}else{
				int temp = digit[1];
				digit[1] = min;
				digit[minI] = temp;
			}
			return assemble(digit);
		}
	}

	public static void solve() throws IOException {
		int n = nextInt();
		for (int i = 0; i < n; i++) {
			int cur = nextInt();
			if(cur!=0){
			int[] digits = digits(cur);
			int[] tempArray = digits.clone();
			println("Case #" + (i + 1) + ": " + minS(cur, digits) + " " + maxS(cur, tempArray));
			}else{
			println("Case #" + (i + 1) + ": " + 0 + " " + 0);
			}
		}
	}

	public static void main(String[] args) throws Exception { // file loading
																// from
																// Kapparate
		in = new BufferedReader(new FileReader("books.in"));
//		 in = new BufferedReader(new InputStreamReader(System.in));
		// TO CHANGE: the file input output name is not always assign.in /
		// assign.out
		out = new PrintWriter(new BufferedWriter(new FileWriter("books.out")));
		solve();
		in.close();
		out.close();
	}

	public static StringTokenizer tokenizer;
	public static BufferedReader in;
	public static PrintWriter out;

	public static String nextToken() throws IOException {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			tokenizer = new StringTokenizer(in.readLine());
		}
		return tokenizer.nextToken();
	}

	public static String nextString() throws IOException {
		return nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	public static void println(int x) {
		System.out.println(x);
		out.println(x);
	}

	public static void println(String x) {
		System.out.println(x);
		out.println(x);
	}

	public static void print(String x) {
		System.out.print(x);
		out.print(x);
	}

	public static void print(int x) {
		System.out.print(x);
		out.print(x);
	}
}

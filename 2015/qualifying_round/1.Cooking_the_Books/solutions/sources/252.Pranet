#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
ll pwr(ll a,ll b,ll mod)
{
  ll ans=1;
  while(b)
  {
    if(b&1)
      ans=(ans*a)%mod;
    a=(a*a)%mod;
    b/=2;
  }
  return ans;
}
ll pwr(ll a,ll b)
{
  ll ans=1;
  while(b)
  {
    if(b&1)
      ans*=a;
    a*=a;
    b/=2;
  }
  return ans;
}
ll gcd(ll a,ll b)
{
  while(b)
    {
      ll temp=a;
      a=b;
      b=temp%b;
    }
  return a;
}
ll lcm(ll a,ll b)
{  
  return (a/gcd(a,b))*b;
}
ll modularInverse(ll a,ll m)
{     
      /*reminder: make sure m is prime*/
      assert(false);
      return pwr(a,m-2,m);
}
const int mod=1000000007;

string toString(int x)
{
  string ans;

  do
  {
    int dig=x%10;
    ans+=('0'+dig);
    x/=10;
  }
  while(x);
  reverse(ans.begin(),ans.end());
  return ans;

}

int toNum(const string &s)
{
  int ans=0;
  for(int i=0;i<s.size();++i)
  {
    ans=ans*10 + s[i]-'0';
  }
  return ans;
}

int nod(int x)
{
  int ans=0;

  do
  {
    ++ans;
    x/=10;
  }
  while(x);
  return ans;
}

int main()
{
  std::ios::sync_with_stdio(false);
  
  int t;
  cin>>t;
  int tt=0;
  while(t--)
  {
    int n;
    cin>>n;

    int maxm=n;
    int minm=n;

    string s=toString(n);

    for(int i=0;i<s.size();++i)
    {
      for(int j=0;j<s.size();++j)
      {
        swap(s[i],s[j]);

        int tmp=toNum(s);
        
        swap(s[i],s[j]);
        if( nod(tmp)==nod(n) )
        {
          maxm=max(maxm,tmp);
          minm=min(minm,tmp);
        }


      }
    }

    cout<<"Case #"<<++tt<<": "<<minm<<" "<<maxm<<"\n";
  }
   


}
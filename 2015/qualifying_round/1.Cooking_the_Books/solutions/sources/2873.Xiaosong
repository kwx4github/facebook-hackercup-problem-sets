import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * Created by xipan on 1/10/15.
 */
public class A {
    public static Scanner in;
    public static PrintWriter out;
    public static final String IN_FILE = "Facebook-2015-Qualification/cooking_the_books.txt";
    public static final String OUT_FILE = "Facebook-2015-Qualification/output.txt";

    public static void main(String[] args) throws IOException {
        //System.out.println(System.getProperty("user.dir"));
        in = new Scanner(new FileReader(IN_FILE));
        out = new PrintWriter(new FileWriter(OUT_FILE));

        int cases = in.nextInt();
        in.nextLine();

        for (int z = 1; z <= cases; z++) {
            String s = in.nextLine();
            String small = findSmall(s);
            String big = findBig(s);

            out.print(String.format("Case #%d: %s %s%n", z, small, big));
            out.flush();
        }
        out.flush();
        out.close();
        in.close();
    }

    private static String findSmall(String s) {
        if (s.length() == 1) return s;
        char[] ch = s.toCharArray();

        for (int i = 0; i < s.length(); i++) {
            int[] position = new int[10];

            for (int j = s.length() - 1; j > i; j--) {
                int tmp = ch[j] - '0';
                if (ch[j] < ch[i] && position[tmp] == 0) {
                    position[tmp] = j;
                }
            }

            for (int j = 0; j < ch[i] - '0'; j++) {
                if (i == 0 && j == 0) continue;

                if (position[j] != 0) {
                    swap(ch, i, position[j]);
                    return String.valueOf(ch);
                }
            }
        }

        return s;
    }

    private static String findBig(String s) {
        if (s.length() == 1) return s;
        char[] ch = s.toCharArray();

        for (int i = 0; i < s.length(); i++) {
            int[] position = new int[10];
            for (int j = s.length() - 1; j > i; j--) {
                int tmp = ch[j] - '0';
                if (ch[j] > ch[i] && position[tmp] == 0) {
                    position[tmp] = j;
                }
            }

            for (int j = 9; j > ch[i] - '0'; j--) {
                if (position[j] != 0) {
                    swap(ch, i, position[j]);
                    return String.valueOf(ch);
                }
            }
        }

        return s;
    }

    private static void swap(char[] ch, int i, int j) {
        char tmp = ch[i];
        ch[i] = ch[j];
        ch[j] = tmp;
    }
}

//package OC;

import java.io.File;
import java.util.Scanner;

/**
 * Created by poplig on 1/10/15.
 */
public class CookingBooks {

    private int number;

    private int testcase;

    public static void main(String[] args) throws Exception{

//        Scanner scanner = new Scanner(System.in);
        Scanner scanner = new Scanner(new File("/Users/poplig/Documents/java/src/OC/input.txt"));
        int t = scanner.nextInt();
        int testcase = 1;
        while (t-- > 0) {
            int n = scanner.nextInt();
            new CookingBooks(n, testcase).printSmallestAndLargest();
            testcase++;
        }
    }

    public void printSmallestAndLargest() {


        System.out.print("Case #" + testcase +":");

        if (number == 0) {
            System.out.println("0 0");
            return;
        }

        // Placeholder for storing the individual digits of the number.
        int[] hash = new int[11];

        // Placeholder to store proper positions of digits in the number.
        int[] properPosition = new int[10];

        int[] smallestPosn = new int[10];

        int[] largestPosn = new int[10];

        // Size of number.
        int size = Integer.toString(number).length();

        // get individual digits.
        int temp = number;
        int i = size - 1;
        while (temp > 0) {
            int digit = temp % 10;
            temp = temp / 10;
            hash[digit]++;
            properPosition[i] = digit;
            smallestPosn[i] = digit;
            largestPosn[i] = digit;
            i--;
        }

        // See which place digit needs to be replaced.
        for(int posn = 0; posn < size; ++posn) {
            int positionToSwap = findPositionToSwap(posn, size, properPosition, false);
            if(positionToSwap != -1) {
                // case when there is something with which we swap.

                // Swap and break;
                int tmmp = smallestPosn[posn];
                smallestPosn[posn] = smallestPosn[positionToSwap];
                smallestPosn[positionToSwap] = tmmp;

                break;
            }
        }

        // Print the smalles number.
        printNum(smallestPosn, size);

        System.out.print(" ");


        // Do same to get largest number.
        for(int posn = 0; posn < size; ++posn) {
            int positionToSwap = findPositionToSwap(posn, size, properPosition, true);
            if(positionToSwap != -1) {
                // case when there is something with which we swap.

                // Swap and break;
                int tmmp = largestPosn[posn];
                largestPosn[posn] = largestPosn[positionToSwap];
                largestPosn[positionToSwap] = tmmp;

                break;
            }
        }

        printNum(largestPosn, size);
        // Print new line.
        System.out.println();


    }

    private void printNum(int [] positions, int size) {
        for(int i = 0; i < size; ++i) {
            System.out.print(positions[i]);
        }
    }

    private int findPositionToSwap(int posn, int size, int [] properPositions, boolean isMax) {
        if(!isMax) {
            int min = properPositions[posn];
            int loc = -1;
            // Go from back and find the number which is less than the number at position posn and its position.
            for(int i = size-1; i >= posn; --i) {
                if(posn == 0 && properPositions[i] == 0 )
                    continue;
                if(properPositions[i] < min ) {
                    min = properPositions[i];
                    loc = i;
                }
            }
            return loc;
        } else {
            int max = properPositions[posn];
            int loc = -1;
            // Go from back and find the number which is greater than the number at position posn and its position.
            for(int i = properPositions.length-1; i >= posn; --i) {
                if(properPositions[i] > max) {
                    max = properPositions[i];
                    loc = i;
                }
            }
            return loc;
        }
    }

    CookingBooks(int n, int t) {
        number = n;
        this.testcase = t;
    }

}

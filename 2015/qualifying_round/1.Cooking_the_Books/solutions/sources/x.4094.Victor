import java.io.*;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Created by victor on 1/9/15.
 */
public class CookingTheBooks {

    public static int minSwap(int n) {
        byte[] number = digits(n);
        for (int i = 0; i < number.length - 1; i++) {
            int minIndex = minIndex(number, i + 1, number.length);
            if (number[minIndex] > 0 && number[minIndex] < number[i]) {
                swap(number, i, minIndex);
                return number(number);
            }
        }
        return n;
    }

    public static int maxSwap(int n) {
        byte[] number = digits(n);
        for (int i = 0; i < number.length - 1; i++) {
            int maxIndex = maxIndex(number, i + 1, number.length);
            if (number[maxIndex] > number[i]) {
                swap(number, i, maxIndex);
                return number(number);
            }
        }
        return n;
    }

    private static void reverse(byte[] array) {
        for (int i = 0; i < array.length/2; i++)
            swap(array, i, array.length - i - 1);
    }

    private static void swap(byte[] array, int i1, int i2) {
        byte tmp = array[i1];
        array[i1] = array[i2];
        array[i2] = tmp;
    }

    private static int maxIndex(byte[] array, int from, int to) {
        int maxIndex = from;
        for (int i = from; i < to; i++)
            if (array[maxIndex] < array[i])
                maxIndex = i;
        return maxIndex;
    }

    private static int minIndex(byte[] array, int from, int to) {
        int minIndex = from;
        for (int i = from; i < to; i++)
            if (array[i] > 0) {
                minIndex = i;
                break;
            }
        for (int i = from; i < to; i++)
            if (array[minIndex] > array[i] && array[i] > 0)
                minIndex = i;
        return minIndex;
    }

    private static byte[] digits(int n) {
        ByteBuffer buffer = ByteBuffer.allocate(10);
        while(n > 0) {
            buffer.put((byte) (n % 10));
            n = n / 10;
        }
        byte[] digits = new byte[buffer.position()];
        buffer.flip();
        buffer.get(digits);
        reverse(digits);
        return digits;
    }

    private static int number(byte[] digits) {
        int n = 0;
        for (int d : digits) {
            n *= 10;
            n += d;
        }
        return n;
    }

    public static void main(String[] args) throws IOException {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
            int t = Integer.parseInt(reader.readLine());
            for (int i = 1; i <= t; i++) {
                int n = Integer.parseInt(reader.readLine());
                System.out.printf("Case #%d: %d %d%n", i, minSwap(n), maxSwap(n));
            }
        }
    }

    public static class FileRunner {
//        private static final String IN_FILE = Consts.baseDir + "cooking_the_books_example_input.txt";
//        private static final String OUT_FILE = Consts.baseDir + "cooking_the_books_example_output.txt";
        private static final String IN_FILE = Consts.baseDir + "cooking_the_books.txt";
        private static final String OUT_FILE = Consts.baseDir + "cooking_the_books_output.txt";

        public static void main(String[] args) {
            try (FileInputStream inputStream = new FileInputStream(IN_FILE);
                 PrintStream outputStream = new PrintStream(new FileOutputStream(OUT_FILE))) {
                System.setIn(inputStream);
                System.setOut(outputStream);

                CookingTheBooks.main(args);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
}

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class DigitSwap {

	public static void main(String args[]) throws FileNotFoundException {
		File inputFile = new File(args[0]);
		Scanner read = new Scanner(inputFile);
		String numLines = read.nextLine();
		int lines = Integer.parseInt(numLines);

		for (int i = 1; i <= lines; i++) {
			String num = read.nextLine().trim();
			outputOperation(i, num);
		}
		read.close();
	}

	public static void outputOperation(int caseNumber, String number) {		
		System.out.print("Case #" + caseNumber + ": ");
		System.out.print(computeMin(number.getBytes()) + " ");
		System.out.println(computeMax(number.getBytes()));
	}

	public static String computeMin(byte[] digitArray) {
		if (digitArray.length == 1){
			return new String(digitArray);
		}
		int minDigit = Integer.MAX_VALUE;
		int minDigitIndex = 0;
		int swapDigitIndex = -1;
		do{
			minDigit = Integer.MAX_VALUE;
			swapDigitIndex++;
			if (swapDigitIndex == digitArray.length){
				return new String(digitArray);
			}
			for (int i = swapDigitIndex; i < digitArray.length; i++){
				if (digitArray[i] <= minDigit){
					minDigit = digitArray[i];
					minDigitIndex = i;
				}
			}
		} while (minDigit == digitArray[swapDigitIndex] || (minDigit == 48 && swapDigitIndex == 0));		
		
		
		
		digitArray[minDigitIndex] = digitArray[swapDigitIndex];
		digitArray[swapDigitIndex] = (byte) minDigit;
		
		return new String(digitArray);
	}

	public static String computeMax(byte[] digitArray) {
		if (digitArray.length == 1){
			return new String(digitArray);
		}
		int maxDigit = Integer.MIN_VALUE;
		int maxDigitIndex = 0;
		int swapDigitIndex = -1;
		do {				
			maxDigit = Integer.MIN_VALUE;
			swapDigitIndex++;
			if (swapDigitIndex == digitArray.length) {
				return new String(digitArray);
			}
			for (int i = swapDigitIndex; i < digitArray.length; i++){
				if (digitArray[i] >= maxDigit){
					maxDigit = digitArray[i];
					maxDigitIndex = i;
				}
			}			
		} while (maxDigit == digitArray[swapDigitIndex]);	
		
		
		digitArray[maxDigitIndex] = digitArray[swapDigitIndex];
		digitArray[swapDigitIndex] = (byte) maxDigit;
		
		return new String(digitArray);
	}
}

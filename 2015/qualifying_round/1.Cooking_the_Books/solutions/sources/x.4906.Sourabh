//
//  main.cpp
//  CookingBooks
//
//  Created by Sourabh Goel on 1/10/15.
//  Copyright (c) 2015 Adobe Systems. All rights reserved.
//

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

#define DEBUGW  0

struct POS{
    int val;
    int position;
    POS(){}
    POS(int v, int p):val(v), position(p){}
};

bool compMin(const POS& l, const POS& r)
{
    return l.val < r.val;
}
int main(int argc, const char * argv[])
{
    int T;
#if DEBUGW
    T=1;
#else
    scanf("%d\n", &T);
#endif
    
    int count = 0;
    while(T-- > 0)
    {
        count++;
        std::string strTot("Case #");
        char caseNum[4] = "\0";
        sprintf(caseNum, "%d", count);
        strTot += caseNum;
        strTot += ": ";
        
        int totLength = 0;
        char numStrOrig[10] = "\0";
        char numStr[10] = "\0";
        char numStrMax[10] = "\0";
        
        std::vector < POS > minVec;
#if DEBUGW
        //strcpy(numStrOrig, "112");
        //strcpy(numStrOrig, "1040");
        //strcpy(numStrOrig, "140");
        //strcpy(numStrOrig, "23345");
        //strcpy(numStrOrig, "31524");
        //strcpy(numStrOrig, "401");
        //strcpy(numStrOrig, "10013322");
        strcpy(numStrOrig, "300020101");
#else
        scanf("%s\n", &numStrOrig);
#endif
        
        strcpy(numStr, numStrOrig);
        strcpy(numStrMax, numStrOrig);
        
        //if(strcmp(numStr, "0") == 0)
        if(numStr[0] == '0')
        {
            strTot += numStr;
            strTot += " ";
            strTot += numStr;
            printf("%s\n", strTot.c_str());
            continue;
        }
        totLength = strlen(numStr);
        for(int i = 0; i < totLength; i++)
        {
            minVec.push_back(POS(numStr[i]-'0', i));
        }
        std::sort(minVec.begin(), minVec.end(), compMin);
        
        //First calculate min value for one swap
        int i = 0;
        int totZeros = 0;
        bool bInitialZero = false;
        while(minVec[i].val == 0)
        {
            i++;
            totZeros++;
            bInitialZero = true;
        }
        int k = 0;
        int zerosFound = 0;
        for(;(k < totLength) && (i < minVec.size()); k++, i++)
        {
            if(numStr[k] == '0')
            {
                zerosFound++;
                i--;
                continue;
            }
            if(('0' + minVec[i].val) == numStr[k])
            {
                continue;
            }
            if((k != 0) && bInitialZero && (zerosFound < totZeros))
            {
                char c = numStr[k];
                numStr[k] = '0';
                
                int g = 0;
                while((g < minVec.size()) && (minVec[g].val == 0))
                {
                    g++;
                }
                g = (g == 0) ? 0 : g-1;
                
                numStr[minVec[g].position] = c;
            }
            else
            {
                char c = numStr[k];
                numStr[k] = '0' + minVec[i].val;
                
                int g = i;
                while((g < minVec.size()) && (minVec[g].val == minVec[i].val))
                {
                    g++;
                }
                g = (g == i) ? i : g-1;
                numStr[minVec[g].position] = c;
            }
            break;
        }
        
        if((k == totLength) && (i == minVec.size()))
        {
        }
        else if((k == totLength) || (i == minVec.size()))
        {
            for(int i = 1; i < totLength; i++)
            {
                if(numStr[i] == '0')
                    continue;
                char c = numStr[i];
                numStr[i] = '0' + minVec[0].val;
                
                int g = 0;
                while((g < minVec.size()) && (minVec[g].val == 0))
                {
                    g++;
                }
                g = (g == 0) ? 0 : g-1;
                numStr[minVec[g].position] = c;
            }
        }
        
        //Now for max value with one swap
        for(int i = 0; i < totLength; i++)
        {
            if(numStrMax[i] == '0' + minVec[totLength-i-1].val)
                continue;
            
            int g = totLength-i-1;
            while((g < minVec.size()) && (minVec[g].val == minVec[totLength-i-1].val))
            {
                g++;
            }
            g = (g == totLength-i-1) ? totLength-i-1 : g-1;
            
            char c = numStrMax[i];
            numStrMax[i] = '0' + minVec[g].val;
            numStrMax[minVec[g].position] = c;
            break;
        }
        
        strTot += numStr;
        strTot += " ";
        strTot += numStrMax;
        printf("%s\n", strTot.c_str());
    }
    
    return 0;
}


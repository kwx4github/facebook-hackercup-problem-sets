import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class CookingTheBooks {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		try 
		{
			int t = Integer.parseInt(br.readLine());
			long[] n = new long[t];
			int i = 0;
			int maxDigit, minDigit, minDigitIndex, maxDigitIndex, numberLength;
			String number, minNumber, maxNumber;
			
			while(i < t)
			{
				n[i] = Long.parseLong(br.readLine());
				i = i + 1;
			}
			
			i = 0;
			while(i < t)
			{
				number = n[i] + "";
				numberLength = number.length();
				
				//if number is single digit, just print as is
				if (numberLength == 1)
				{
					minNumber = number;
					maxNumber = number;
				}
				// if number is two digits then check as follows
				else if (numberLength == 2)
				{
					int firstDigit = (int) n[i] % 10;
					int secondDigit = (int) n[i] / 10;
					if(secondDigit > firstDigit)
					{
						maxNumber = number;
						if(firstDigit == 0)
						{
							minNumber = number;
						}
						else
						{
							minNumber = firstDigit + "" + secondDigit;
						}
					}
					else
					{
						minNumber = number;
						if(firstDigit == 0)
						{
							maxNumber = number;
						}
						else
						{
							maxNumber = secondDigit + "" + firstDigit;
						}
					}
				}
				// more than 2 digit numbers
				else
				{
					maxDigit = findMaxDigit(n[i]);
					minDigit = findMinDigit(n[i]);
					
					minDigitIndex = number.indexOf("" + minDigit);
					maxDigitIndex = number.lastIndexOf("" + maxDigit);
					
					//System.out.println(number + " " + maxDigit + " : " + maxDigitIndex + " " + minDigit + " : " + minDigitIndex);
					
					minNumber = generateMinNumber(number, minDigit, minDigitIndex);
					maxNumber = generateMaxNumber(number, maxDigit, maxDigitIndex);
					
				}
				
				
				
				//first print case and number
				System.out.print("Case #" + (i+1) + ": ");
				
				//then print minimum number possible
				System.out.print(minNumber + " ");
				System.out.println(maxNumber);
				
				i = i + 1;
			}
			
			
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
//		System.out.println(findMaxDigit(111));
//		System.out.println(findMinDigit(111));
	}
	
	static int findMaxDigit(long n)
	{
		int searchFor = 9;
		String number = n + "";
		
		for(searchFor = 9; searchFor > 0; searchFor--)
		{
			if(number.contains(searchFor + ""))
			{
				break;
			}
		}
		
		return searchFor;
	}

	static int findMinDigit(long n)
	{
		int searchFor = 1;
		String number = n + "";
		
		for(searchFor = 1; searchFor < 10; searchFor++)
		{
			if(number.contains(searchFor + ""))
			{
				break;
			}
		}
		
		return searchFor;
	}
	
	static String generateMaxNumber(String number, int maxDigit, int maxDigitIndex)
	{
		String maxNumber = "";
		
		if(maxDigitIndex == 0)
		{
			maxNumber = number;
		}
		else
		{
			switch(maxDigitIndex - 1)
			{
				case 0:
				{
					maxNumber = "" + maxDigit + number.charAt(0) + number.substring(maxDigitIndex + 1);
					break;
				}
				case 1:
				{
					maxNumber = "" + maxDigit + number.charAt(1) + number.charAt(0) + number.substring(maxDigitIndex + 1);
					break;
				}
				default:
				{
					maxNumber = "" + maxDigit + number.substring(1, maxDigitIndex - 1) + number.charAt(0) + number.substring(maxDigitIndex + 1);
				}
			}
		}
		return maxNumber;
	}
	
	
	static String generateMinNumber(String number, int minDigit, int minDigitIndex)
	{
		String minNumber = "";
		
		if(minDigitIndex == 0)
		{
			minNumber = number;
		}
		else
		{
			switch(minDigitIndex - 1)
			{
				case 0:
				{
					minNumber = "" + minDigit + number.charAt(0) + number.substring(minDigitIndex + 1);
					break;
				}
				case 1:
				{
					minNumber = "" + minDigit + number.charAt(1) + number.charAt(0) + number.substring(minDigitIndex + 1);
					break;
				}
				default:
				{
					minNumber = "" + minDigit + number.substring(1, minDigitIndex - 1) + number.charAt(0) + number.substring(minDigitIndex + 1);
				}
			}
		}
		return minNumber;
	}
}

//5
//31524
//897
//123
//10
//5

package edu.cornell.bookcooking;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;

public class BookCooking {

	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		// inputs
		int T;
		Scanner sc = new Scanner(new File("cooking_the_books.txt"));
		T = sc.nextInt();
		int[] N = new int[T];
		for (int i=0; i<T; i++) {
			N[i] = sc.nextInt();
		}
		sc.close();
		
		// outputs
		PrintWriter writer = new PrintWriter("output.txt", "UTF-8");
		for (int i=0; i<T; i++) {
			String s = "Case #"+(i+1)+": " + minSwap(N[i]) + " " + maxSwap(N[i]);
			writer.println(s);
		}
		writer.close();
	}
	
	private static int maxSwap (int N) {
		if (N <= 10) return N;
		char maxDigit = 0;
		int maxDigitIndex = 0;
		String Nstr = Integer.toString(N);
		
		// find the highest digit in the number
		// if there are duplicates, choose the farthest one to the right
		for (int i=0; i<Nstr.length(); i++) {
			char dig = Nstr.charAt(i);
			if (dig >= maxDigit) {
				maxDigit = dig;
				maxDigitIndex = i;
			}
		}
		
		// swap beginning digit with digit at maxDigitIndex
		return swapDigits(N, 0, maxDigitIndex);
	}
	
	private static int minSwap (int N) {
		if (N <= 10) return N;
		char minDigit = 255;
		int minDigitIndex = 0;
		String Nstr = Integer.toString(N);
		
		// find the lowest digit in the number that isn't 0
		// if there are duplicates, choose the farthest one to the right
		for (int i=0; i<Nstr.length(); i++) {
			char dig = Nstr.charAt(i);
			if (dig <= minDigit && dig != '0') {
				minDigit = dig;
				minDigitIndex = i;
			}
		}
		
		// swap beginning digit with digit at minDigitIndex
		return swapDigits(N, 0, minDigitIndex);
	}
	
	/*
	 * Takes integer N and swaps the digit at location i1 with the digit at location i2.
	 * @precondition i2 > i1; will return N otherwise
	 */
	private static int swapDigits(int N, int i1, int i2) {
		if (i1 >= i2) return N;
		String str = Integer.toString(N);
		char digit1 = str.charAt(i1);
		char digit2 = str.charAt(i2);
		String ans = str.substring(0, i1) + digit2 + str.substring(i1+1, i2) + digit1 + str.substring(i2+1);
		return Integer.parseInt(ans);
	}
	
}

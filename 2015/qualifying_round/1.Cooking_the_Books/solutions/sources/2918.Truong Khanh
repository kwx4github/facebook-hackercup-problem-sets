package tkn.challenge.hackercup2015;

import java.util.Arrays;
import java.util.Scanner;

public class CookingtheBooks {

	static char ZERO = '0';
	static char MAX = 127;
	
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		
		int T = in.nextInt();
		for(int i = 1; i <= T; i++){
			char[] number = in.next().toCharArray();
			handleCase(number, i);
		}
		
		in.close();
	}
	
	public static void handleCase(char[] number, int caseIndex){
		System.out.print("Case #" + caseIndex + ": ");
		System.out.print(getSmallestNumberCanChange(number));
		System.out.print(" ");
		System.out.println(getLargestNumberCanChange(number));
	}
	
	public static char[] getLargestNumberCanChange(char[] number){
		char[] result = Arrays.copyOf(number, number.length);
		
		int numberOfDigits = result.length;
		
		//maxSuffixes[i] is the max digit of digits not equal zero from i to end
		//if all elements are zero, maxSuffixes[i] = 0 and maxSuffixes[i] = i
		char[] max = new char[numberOfDigits];
		
		//maxIndexes[i] is the index of maxSuffixes[i], take largest index as possible
		int[] maxIndexes = new int[numberOfDigits];
		
		//init with suffix from numberOfDigits -1
		int lastIndex = numberOfDigits - 1;
		max[lastIndex] = result[lastIndex];
		maxIndexes[lastIndex] = lastIndex;
		
		
		for(int i = numberOfDigits - 2; i >= 0; i--){
			computeMaxSuffix(result, max, maxIndexes, i);
		}
		
		for(int i = 0; i < numberOfDigits; i++){
			if(result[i] < max[i]){
				swap(result, i, maxIndexes[i]);
				break;
			}
		}
		
		return result;

	}
	
	private static void computeMaxSuffix(char[] number, char[] maxSuffixes, int[] maxIndexes, int i) {
		if(number[i] > maxSuffixes[i+1]){
			maxSuffixes[i] = number[i];
			maxIndexes[i] = i;
		}
		else{
			maxSuffixes[i] = maxSuffixes[i+1];
			maxIndexes[i] = maxIndexes[i+1];
		}
	}

	public static char[] getSmallestNumberCanChange(char[] number){
		int numberOfDigits = number.length;
		
		char[] result = Arrays.copyOf(number, numberOfDigits);
		
		int minIndex = computeNotZeroMin(result);
		
		if(minIndex != -1 && number[0] > number[minIndex]){
			swap(result, 0, minIndex);
			return result;
		}
		
		//min[i] is the min digit of digits from i to end
		char[] min = new char[numberOfDigits];
		
		//index[i] is the index of min[i], take largest index as possible
		int[] index = new int[numberOfDigits];
		
		//init with suffix from numberOfDigits -1
		int lastIndex = numberOfDigits - 1;
		min[lastIndex] = result[lastIndex];
		index[lastIndex] = lastIndex;
		
		
		for(int i = numberOfDigits - 2; i >= 0; i--){
			computeMinSuffix(result, min, index, i);
		}
		
		//swap from the second digit
		for(int i = 1; i < numberOfDigits; i++){
			if(result[i] > min[i]){
				swap(result, i, index[i]);
				break;
			}
		}
		
		return result;

	}

	/**
	 * Return largest index of non zero min
	 * @param result
	 * @return
	 */
	private static int computeNotZeroMin(char[] result) {
		char min = MAX;
		int index = -1;

		for (int i = 1; i < result.length; i++) {
			if (result[i] != ZERO && result[i] <= min) {
				min = result[i];
				index = i;
			}
		}
		return index;
		
	}

	/**
	 * Make sure that minIndexes as largest as possible
	 * @param number
	 * @param min
	 * @param index
	 * @param i
	 */
	private static void computeMinSuffix(char[] number, char[] min, int[] index, int i) {
		
		if(number[i] < min[i+1]){
			min[i] = number[i];
			index[i] = i;
		}
		else{
			min[i] = min[i+1];
			index[i] = index[i+1];
		}
	}

	
	private static void swap(char[] number, int i, int j){
		char temp = number[i];
		number[i] = number[j];
		number[j] = temp;
	}
	
	
}

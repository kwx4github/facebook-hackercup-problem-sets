import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.nio.Buffer;
import java.security.Principal;
import java.util.Arrays;

public class CookingtheBooks {
	static byte[] nums;

	static int min(int from) {
		int min = from;
		for (int j = from + 1; j < nums.length; j++) {
			if (((from == 0 && nums[j] != 0) || from != 0)
					&& (nums[j] < nums[min] || (nums[j] == nums[min] && from != min))) {
				min = j;
			}
		}
		return min;
	}

	static int max(int from) {
		int max = from;
		for (int j = from + 1; j < nums.length; j++) {
			if (nums[j] > nums[max] || (nums[j] == nums[max] && from != max)) {
				max = j;
			}
		}
		return max;
	}

	static void to_array(int n) {
		int len = (int) Math.log10(n);
		nums = new byte[len + 1];
		int ten = (int) Math.pow(10, len);
		for (int j = 0; j <= len; j++) {
			nums[j] = (byte) ((n / ten) % 10);
			ten /= 10;
		}
	}

	public static void main(String[] args) throws NumberFormatException,
			IOException {
		BufferedReader rd = new BufferedReader(new FileReader("A.txt"));
		PrintWriter pw = new PrintWriter(new File("A.out"));
		int t = Integer.parseInt(rd.readLine());

		for (int i = 1; i <= t; i++) {
			int n = Integer.parseInt(rd.readLine());
			if (n == 0) {
				pw.println("Case #" + i + ": " + n + " " + n);
				continue;
			}
			String nS = n + "";
			to_array(n);
			int max = 0;
			int from = -1;
			do {
				from++;
				max = max(from);
			} while (max == from && from < nums.length);
			String maxS = nS;
			if (from < nums.length)
				maxS = nS.substring(0, from) + nums[max]
						+ nS.substring(from + 1, max) + nums[from]
						+ nS.substring(max + 1);

			int min = 0;
			from = -1;
			do {
				from++;
				min = min(from);
			} while (min == from && from < nums.length);
			String minS = nS;
			if (from < nums.length)
				minS = nS.substring(0, from) + nums[min]
						+ nS.substring(from + 1, min) + nums[from]
						+ nS.substring(min + 1);

			pw.println("Case #" + i + ": " + minS + " " + maxS);
		}
		pw.close();
		rd.close();
	}
}

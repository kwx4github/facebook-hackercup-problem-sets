#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;




vector<int> toVector(int i){
	vector<int> *v = new vector<int>();
	while(i>0){
		(*v).push_back(i%10);
		//cout << i%10 << " ";
		i/=10;
	}
	//cout << endl;
	return *v;

}


int fromVector(vector<int> v){
	int res = 0;
	int mul = 1;
	int aux;
	for(vector<int>::iterator it = v.begin(); it != v.end(); it++){
		aux = *it;
		res += aux*mul;
		mul *= 10;
	}
	return res;
}

int main(){
	
	int t;
	vector<int> v;
	long int aux;
	cin >> t;
	
	for(int i = 1; i <= t; ++i){
		cout << "Case #" << i << ": ";
		cin >> aux;
		v = toVector(aux);
		/*for(vector<int>::iterator it = v.begin(); it != v.end(); it++){
			cout << (int)(*it) << " " ;
		}
		cout << endl;

		cout << fromVector(v) << endl;*/
		if(v.size()==1){
//devolver dos veces fromVector(v)
			cout << v[0] << " " << v[0] ;

		}
		else{
			vector<int>::iterator ultimo = v.end();
			ultimo--;
			vector<int>::iterator min_pos = v.end(); //testear q sea un puntero al ultimo
			vector<int>::iterator max_pos = v.end();
			min_pos--;
			max_pos--;

			
			for(vector<int>::iterator it = v.begin(); it != v.end(); it++){
				if( ( ((*it) < (*min_pos)) || ((*it) == (*min_pos) && it < min_pos) ) && (*it)!=0 ){
					min_pos = it;
				}			
				if((((*it) > (*max_pos)) || ((*it) == (*max_pos) && it < max_pos) ) && (*it)!=0){
					max_pos = it;
				}			

			}

			int primer_digito = v.back();
			//cout << (*min_pos) << " " << (*max_pos) << " " << primer_digito << endl;

			(*ultimo) = (*min_pos);
			(*min_pos) = primer_digito;
			int res_min = fromVector(v);
			(*min_pos) = (*ultimo);
			(*ultimo) = primer_digito;

			(*ultimo) = (*max_pos);
			(*max_pos) = primer_digito;
			int res_max = fromVector(v);
			cout << res_min << " " << res_max ;
		}
		cout << endl;
	}
	return 0;
}



import java.io.*;
import java.util.*;
import java.math.*;

public class P1 {

	public static void main(String[] args)throws Exception{
		// TODO Auto-generated method stub
     File file = new File("src/cooking_the_books.txt");
     BufferedReader br = new BufferedReader(new FileReader(file)); 
     String s =null;
     ArrayList data = new ArrayList();
     int i = 0;
     while((s=br.readLine())!=null){
    	 System.out.println(s);
    	 data.add(s);
     }
     System.out.println(data);
     br.close();;
    FileWriter fw = new FileWriter(new File("src/result.txt"));
    BufferedWriter bw = new BufferedWriter(fw);
     
     //All data stored in String array values
     String[] values = new String[data.size()];
     data.toArray(values);
     int T = Integer.parseInt(values[0]);
     String finalmax = new String();
     String finalmin = new String();
     
     
     //start loop
     
     for(int n=1;n<=T;n=n+1){
     
     int k = values[n].length();
     char[] maxvalue = new char[k];
     char[] minvalue = new char[k];
     
   //Make the nth line as a arrary
     int[] temp1 = new int[k];
     for(int j=0;j<k;j=j+1){
    	 temp1[j]=values[n].charAt(j)-'0'; 
     }
     int[] temp11 = new int[k];
     for(int j=0;j<k;j=j+1){
    	 temp11[j]=values[n].charAt(j)-'0'; 
     }
     
     
     int maxx = 0;
     int minn = 0;
     int swap1 =0;
     int swap2 =0;
     
     //MAX
     int h=0;
     //find the segment to play with for max
     tag1:for(;h<k;h=h+1)
     {
    	 int[] temp2 = new int[k-h];
    	 int[] temp3 = new int[k-h];
    	 for(int p=0;p<k-h;p=p+1)
         {
    		 temp2[p]=temp1[p+h];
         }
    	 for(int p=0;p<k-h;p=p+1)
         {
    		 temp3[p]=temp2[p];
         }
    	 Arrays.sort(temp3);
         //minn=temp3[0];
         maxx=temp3[temp3.length-1];
    	 if(maxx!=temp2[0])
    		 break tag1;
         
     }
     
   //in case no swap need
     if(h>=k)
    	 h=h-1;
   
   //find the one need to swap in head
    int o=h;
    
    //find the one need to swap in bud
    int q=k-1;
    tag2:for(;q>0;q=q-1)
    {
    	if(temp1[q]==maxx)
    		break tag2;
    }
    swap1=temp1[o];
    swap2=temp1[q];
    temp1[o]=swap2;
    temp1[q]=swap1;
    
    
    for(int j=0;j<k;j=j+1){
   	 maxvalue[j]=(char)(temp1[j]+48); 
    }
    //Arrays.toString(maxvalue);
    //System.out.println(maxvalue);
    
   //MIN
    h=0;
  //find the segment to play with for min
    
    tag11:for(;h<k;h=h+1)
    {
   	 int[] temp22 = new int[k-h];
   	 int[] temp33 = new int[k-h];
   	 for(int p=0;p<k-h;p=p+1)
        {
   		 temp22[p]=temp11[p+h];
        }
   	 for(int p=0;p<k-h;p=p+1)
        {
   		 temp33[p]=temp22[p];
        }
   	 Arrays.sort(temp33);
        minn=temp33[0];
        //make sure first digit is not 0
        if(h==0)
        {   int a=0;
        	tag111:while(minn==0)
        		{if(a>=temp33.length)
        			break tag111;
        		 minn=temp33[a];
        		 a=a+1;}
        }
        //maxx=temp33[temp33.length-1];
   	 if(minn!=temp22[0])
   		 break tag11;
        
    }
  //in case no swap need
    if(h>=k)
   	 h=h-1;
  //find the one need to swap in head
     o=h;
    
    //find the one need to swap in bud
     q=k-1;
     tag22:for(;q>0;q=q-1)
     {
     	if(temp11[q]==minn)
     		break tag22;
     }
     swap1=temp11[o];
     swap2=temp11[q];
     temp11[o]=swap2;
     temp11[q]=swap1;
     
     for(int j=0;j<k;j=j+1){
    	 minvalue[j]=(char)(temp11[j]+48); 
     }
     //Arrays.toString(minvalue);
     finalmin=String.copyValueOf(minvalue);
     finalmax=String.copyValueOf(maxvalue);
     System.out.println("Case #" + n + ": " + ""+ finalmin + " "+ finalmax);
     bw.write("Case #" + n + ": " + ""+ finalmin + " "+ finalmax + "\n");
     
     //System.out.println("Case #%d: %S %S ",n,minvalue,maxvalue);
     }
     bw.close();
     fw.close();
	}

}

#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <utility>
#include <functional>

#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;


ifstream ifs;
ofstream ofs;
string buf;


int solve(){
	
}


int main(int argc, char **argv){
    ifs.open("cooking_the_books.txt");
    ofs.open("output.txt");

    
	getline(ifs, buf);
	int T = atoi(buf.c_str());

	rep(i, T){
        ofs << "Case #" << i + 1 << ": ";
        
		getline(ifs, buf);
	    long N = atol(buf.c_str());

        std::vector<int> digits;
        int n = N;
        if(n == 0){
            digits.push_back(0);
        }
        else{
            while(n > 0){
                digits.push_back(n % 10);
                n /= 10;
            }
        }

        bool found = false;

        // smaller
        for(int j = digits.size() - 1; j >= 0; j--){
            for(int k = (j == digits.size() - 1)? 1 : 0; k < digits[j]; k++){
                for(int l = 0; l < j; l++){
                    if(digits[l] == k){
                        found = true;
                        int tmp = digits[j];
                        digits[j] = digits[l];
                        digits[l] = tmp;

                        long result = 0;
                        for(int m = digits.size() - 1; m >= 0; m--){
                            result *= 10;
                            result += digits[m];
                        }
                        ofs << result << " ";

                        tmp = digits[j];
                        digits[j] = digits[l];
                        digits[l] = tmp;
                        break;
                    }
                }
                if(found){
                    break;
                }
            }
            if(found){
                break;
            }
        }

        if(!found){
            ofs << N << " ";
        }

        // larger
        found = false;
        for(int j = digits.size() - 1; j >= 0; j--){
            for(int k = 9; k > digits[j]; k--){
                for(int l = 0; l < j; l++){
                    if(digits[l] == k){
                        found = true;
                        int tmp = digits[j];
                        digits[j] = digits[l];
                        digits[l] = tmp;

                        long result = 0;
                        for(int m = digits.size() - 1; m >= 0; m--){
                            result *= 10;
                            result += digits[m];
                        }
                        ofs << result << endl;
                        break;
                    }
                }
                if(found){
                    break;
                }
            }
            if(found){
                break;
            }
        }

        if(!found){
            ofs << N << endl;
        }
	}
	

    ifs.close();
    ofs.close();
    return 0;
}

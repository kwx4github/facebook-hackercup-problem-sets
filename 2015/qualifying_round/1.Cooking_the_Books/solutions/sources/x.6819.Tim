/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hackercup2015;

import java.io.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author user
 */
public class CookingTheBooks {

    static File file = new File("cooking_the_books.txt");

    //cooking_the_books_example_output.txt
    public static void main(String[] args) throws FileNotFoundException, IOException {
        PrintWriter writer = new PrintWriter("cooking_the_books_output.txt", "UTF-8");
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String N;
            String T;
            T = br.readLine();
            for (int i = 0; i < Integer.valueOf(T); i++) {
                N = br.readLine();
                writer.print("Case #" + (i + 1) + ": ");
                writer.println(function(N));
            }
            writer.close();
            br.close();
        }
    }

    private static String function(String X) {
        String min = X, max = X;
        char temp;
        boolean swapped = false;
        //System.err.println(X + " " + min + " " + max);

        //min first digit
        loop1:
        for (int i = X.length() - 1; i > 0; i--) {
            int firstDigit = Character.getNumericValue(X.charAt(0));
            int nextDigit = Character.getNumericValue(X.charAt(i));
            char[] rest = new char[X.length() - 1];
            for (int k = 0; k < rest.length; k++) {
                rest[k] = X.charAt(k + 1);
            }
            int minDigit = getMin(rest);
            if (firstDigit > nextDigit && nextDigit != 0 && nextDigit == minDigit) {
                temp = String.valueOf(firstDigit).charAt(0);
                char[] minArr = min.toCharArray();
                minArr[0] = String.valueOf(nextDigit).charAt(0);
                minArr[i] = temp;
                min = new String(minArr);
                swapped = true;
                break loop1;
            }
        }
        //min rest
        if (swapped == false) {
            outerloop1:
            for (int i = 1; i < X.length() - 1; i++) {
                for (int j = X.length() - 1; j > i; j--) {
                    int firstDigit = Character.getNumericValue(X.charAt(i));
                    int nextDigit = Character.getNumericValue(X.charAt(j));
                    char[] rest = new char[X.length() - i - 1];
                    for (int k = 0; k < rest.length; k++) {
                        rest[k] = X.charAt(k + i + 1);
                    }
                    int minDigit = getMin(rest);
                    if (firstDigit > nextDigit && nextDigit == minDigit) {
                        temp = String.valueOf(firstDigit).charAt(0);
                        char[] minArr = min.toCharArray();
                        minArr[i] = String.valueOf(nextDigit).charAt(0);
                        minArr[j] = temp;
                        min = new String(minArr);
                        break outerloop1;
                    }
                }
            }
        }

        //max
        outerloop2:
        for (int i = 0; i < X.length() - 1; i++) {
            for (int j = X.length() - 1; j > i; j--) {
                int firstDigit = Character.getNumericValue(X.charAt(i));
                int nextDigit = Character.getNumericValue(X.charAt(j));
                char[] rest = new char[X.length() - i - 1];
                for (int k = 0; k < rest.length; k++) {
                    rest[k] = X.charAt(k + i + 1);
                }
                int maxDigit = getMax(rest);
                if (firstDigit < nextDigit && nextDigit == maxDigit) {
                    temp = String.valueOf(firstDigit).charAt(0);
                    char[] maxArr = max.toCharArray();
                    maxArr[i] = String.valueOf(nextDigit).charAt(0);
                    maxArr[j] = temp;
                    max = new String(maxArr);
                    break outerloop2;
                }
            }
        }
        //System.err.println(min + " " + max);
        //System.err.println(X + " " + min + " " + max);
        return min + " " + max;
    }

    private static int getMax(char[] rest) {
        char[] a = rest;
        Character[] b = convert(a);
        return Character.getNumericValue(Collections.max(Arrays.asList(b)));
    }
    
    private static int getMin(char[] rest) {
        char[] a = rest;
        Character[] b = convert(a);
        return Character.getNumericValue(Collections.min(Arrays.asList(b)));
    }

    public static Character[] convert(char[] chars) {
        Character[] copy = new Character[chars.length];
        for (int i = 0; i < copy.length; i++) {
            copy[i] = Character.valueOf(chars[i]);
        }
        return copy;
    }
}

def construct_max(list_n, max_n):
	index = list_n.index(max_n)
	list_n[index] = list_n[0]
	list_n[0] = max_n
	list_n = map(str, list_n)
	return "".join(list_n)

def construct_min(list_n, min_n):
	index = list_n.index(min_n)
	list_n[index] = list_n[0]
	list_n[0] = min_n
	list_n = map(str, list_n)
	return "".join(list_n)

def find_next_min(myList):
	if (len(list_n) != 0):
		return min(myList)
	return 0


with open('input.txt', 'r') as f:
	t = int(f.readline())
	i = 1
	while t:
		n = f.readline().strip()
		print n
		list_n = map(int, list(n))
		min_n = min(list_n)
		max_n = max(list_n)
		list_n.remove(min_n)
		print list_n
		while (min_n == 0 and list_n != None and len(list_n) != 0):
			min_n = find_next_min(list_n)
			list_n.remove(min_n)

		orig_list = map(int, list(n))
		if (min_n == 0):
			max_n_str = construct_max(orig_list, max_n)
			ans_str = "Case #" + str(i) + ": " + n + " " + max_n_str + "\n"
			with open('output.txt', 'a') as w:
				w.write(ans_str)	
			i += 1
			t -= 1
			continue

		max_n_str = construct_max(orig_list, max_n)
		orig_list = map(int, list(n))
		min_n_str = construct_min(orig_list, min_n)
		ans_str = "Case #" + str(i) + ": " + n + " " + max_n_str + "\n"
		with open('output.txt', 'a') as w:
			w.write(ans_str)

		t -= 1
		i += 1

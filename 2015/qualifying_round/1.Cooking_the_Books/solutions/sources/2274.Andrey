using System;
using System.Globalization;
using System.IO;

namespace IntervalTreeTest
{
    class Program
    {
        static void Main(string[] args)
        {
	        Solution(new StreamReader(new FileStream("input.txt", FileMode.Open)), new StreamWriter(new FileStream("output.txt", FileMode.Create)));
        }

		// ReSharper disable AssignNullToNotNullAttribute
	    static void Solution(TextReader sr, TextWriter sw)
	    {
		    var tests = Int32.Parse(sr.ReadLine());
		    var input = new int[tests]; 
		    for (int i = 0; i < tests; i++)
		    {
			    input[i] = Int32.Parse(sr.ReadLine());
		    }
		    for (int i = 0; i < tests; i++)
		    {
			    var next = input[i].ToString(CultureInfo.InvariantCulture);
			    if (next.Length == 1)
			    {
					sw.WriteLine("Case #{0}: {1} {2}", (i + 1), next, next);
			    }
			    else
			    {
				    var maxStr = Max(next);
				    var minStr = Min(next);

					sw.WriteLine("Case #{0}: {1} {2}", (i + 1), minStr, maxStr);
			    }
		    }
			sw.Close();
	    }
		// ReSharper restore AssignNullToNotNullAttribute

	    private static string Max(string str)
	    {
		    for (int i = 0; i < str.Length; i++)
		    {
			    var maxIndx = i;
			    for (int j = i + 1; j < str.Length; j++)
			    {
				    if (str[j] >= str[maxIndx])
				    {
					    maxIndx = j;
				    }
			    }
			    if (str[maxIndx] != str[i])
			    {
				    return Swap(str, i, maxIndx);
			    }
		    }

		    return str;
	    }

	    private static string Min(string str)
	    {
		    for (int i = 0; i < str.Length; i++)
		    {
			    var minIndx = i;
			    for (int j = i + 1; j < str.Length; j++)
			    {
				    if (str[j] <= str[minIndx] && !(i == 0 && str[j] == '0'))
				    {
					    minIndx = j;
				    }
			    }
			    if (str[minIndx] != str[i])
			    {
				    return Swap(str, i, minIndx);
			    }
		    }

		    return str;
	    }

	    private static string Swap(string s, int a, int b)
	    {
		    var arr = s.ToCharArray();
		    var temp = arr[a];
		    arr[a] = arr[b];
		    arr[b] = temp;

		    return new String(arr);
	    }
    }
}

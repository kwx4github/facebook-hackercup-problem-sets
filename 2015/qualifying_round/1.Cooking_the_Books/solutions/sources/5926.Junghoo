def lower(fudged, digits):
    sdigits = sorted(digits)
    first = digits[0]
    i = 0
    while (fudged == 0 and sdigits[i] == 0) and i < len(sdigits)-1:
        i+=1
    small = sdigits[i]
    if small != first:
        fudged = fudged*10 + small
        for j in range(1, len(digits)):
            if digits[j] == small and digits[j] not in digits[j+1::]:
                fudged = fudged*10 + first
            else:
                fudged = fudged*10 + digits[j]
        return fudged
    else:
        if len(digits) <= 1:
            return fudged*10+small
        else:
            return lower(fudged*10+small, digits[1::])                
    
def upper(fudged, digits):
    sdigits = sorted(digits)
    first = digits[0]
    large = sdigits[-1]
    if large != first:
        fudged = fudged*10 + large
        for j in range(1, len(digits)):
            if digits[j] == large and digits[j] not in digits[j+1::]:
                fudged = fudged*10 + first
            else:
                fudged = fudged*10 + digits[j]
        return fudged
    else:
        if len(digits) <= 1:
            return fudged*10+large
        else:
            return upper(fudged*10+large, digits[1::]) 
        return upper(fudged*10+large, digits[1::])
    return fudged


def main():
    import sys
    sys.setrecursionlimit(1000)
    f1 = open('input.txt', 'r')
    f2 = open('output.txt', 'w')
    T = int(f1.readline().rstrip())
    for i in range(T):
        number = int(f1.readline().rstrip())
        digits = []
        for digit in str(number):
            digits.append(int(digit))
        first = digits[0]
        minimum = lower(0, digits)
        maximum = upper(0, digits) 
        f2.write("Case #" + str(i+1) + ": " + str(minimum) + " " + str(maximum) + "\n")

main()

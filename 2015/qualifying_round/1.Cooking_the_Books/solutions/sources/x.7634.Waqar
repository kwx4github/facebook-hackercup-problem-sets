require 'pry'

class BookKeeper

	attr_accessor :number, :orig, :arr, :carr, :min, :max
	def initialize number
		@orig = @number = number
		@arr = []
		while @number > 0 do
			@arr << @number%10
			@number /= 10
		end
		@carr = @arr.reverse!.dup
		@min = number
		@max = number
		@len = @carr.count - 1
	end

	def do_swap!
		return [@orig]*2 unless is_swappable?
		
		for i in 0..@len
			for j in ((i+1)..@len)
				next if zero_swap?(@arr[j], @arr[i])
				@arr = @carr.dup
				@arr[i], @arr[j] = @arr[j], @arr[i]
				_num = @arr.join.to_i
				@min = [@min, _num].min
				@max = [@max, _num].max
			end
		end
		return @min, @max
	end

	def is_swappable?
		@arr.count > 1
	end

	def zero_swap? x, y
		(x * y).zero?
	end
end

file = File.open 'cooking_the_books.txt', 'r'
total_cases = file.readline.to_i
cases = []
total_cases.times { cases << file.readline.to_i }
# cases = [31524, 897, 123, 10, 5]
results = []
cases.each do |cas|
	keeper = BookKeeper.new(cas)
	results << keeper.do_swap!
end

results.each_with_index {|r, i| puts "Case ##{i+1}: #{r[0]} #{r[1]}" }

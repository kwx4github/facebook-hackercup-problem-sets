import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class CookingTheBooks {

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		int T = in.nextInt();
		for (int i = 1; i <= T; i++) {
			int N = in.nextInt();
			String NS = String.valueOf(N);
			String NS1 = String.valueOf(NS.charAt(0));

			// Verificamos si el numero es de un solo digito, en ese caso no es
			// necesario procesar nada
			if (NS.length() == 1) {
				System.out.println("Case #" + i + ": " + N + " " + N);
				continue;
			}

			// Digito mayor en el numero dado
			int DigitLower = minDigit(Integer.valueOf(NS.substring(1)));
			// Digito menor en el numero dado
			int DigitHigher = maxDigit(Integer.valueOf(NS.substring(1)));

			String NumberLowerResult = String.valueOf(DigitLower) + NS.substring(1).replaceFirst(String.valueOf(DigitLower), NS1);
			String NumberHigherResult = String.valueOf(DigitHigher) + NS.substring(1).replaceFirst(String.valueOf(DigitHigher), NS1);

			// Si el digito menor del numero es cero, esto generara un problema
			if (DigitLower == 0) {
				StringBuilder SBNS = new StringBuilder(NS);
				SBNS.setCharAt(NS.indexOf("0"), SBNS.charAt(1));
				SBNS.setCharAt(1, '0');

				NumberLowerResult = SBNS.toString();

				// Nos aseguramos que no exista un digito menor diferente a cero que podamos utilizar
				int DigitLowerNonZero = minDigitNonZero(Integer.valueOf(NS.substring(1)));
				if (Integer.valueOf(String.valueOf(NumberLowerResult.charAt(0))) > DigitLowerNonZero && DigitLowerNonZero > 0) {
					SBNS = new StringBuilder(NS);
					SBNS.setCharAt(NS.indexOf(String.valueOf(DigitLowerNonZero)), SBNS.charAt(0));
					SBNS.setCharAt(0, String.valueOf(DigitLowerNonZero).charAt(0));
				}

				NumberLowerResult = SBNS.toString();
			}

			// Si el digito menor es igual al primer digito el cambio no tendria
			// efecto, entonces situamos el menor digito en la primera posicion
			// diferente al menor digito para obtener el menor numero
			if (String.valueOf(DigitLower).equals(NS1)) {
				StringBuilder SBNS = new StringBuilder(NS);

				// Buscamos el primer digito diferente al digito menor
				int position = 0;
				while (SBNS.charAt(++position) == String.valueOf(DigitLower).charAt(0) && position < NS.length() - 1)
					;

				SBNS.setCharAt(NS.substring(1).indexOf(String.valueOf(DigitLower)) + 1, SBNS.charAt(position < NS.length() ? position : 1));
				SBNS.setCharAt(position < NS.length() ? position : 1, String.valueOf(DigitLower).charAt(0));
				NumberLowerResult = SBNS.toString();
			}

			// Si el digito mayor es igual al primer digito el cambio no tendria
			// efecto, entonces situamos el menor digito en la ultima posicion
			// mayor al menor digito para obtener el mayor numero
			if (String.valueOf(DigitHigher).equals(NS1)) {
				StringBuilder SBNS = new StringBuilder(NS);

				// Buscamos el ultimo digito diferente al digito menor
				DigitLower = minDigit(Integer.valueOf(NS.substring(1)));
				int position = SBNS.length();
				while (SBNS.charAt(--position) == String.valueOf(DigitLower).charAt(0) && position > 0)
					;

				SBNS.setCharAt(NS.indexOf(String.valueOf(DigitLower)), SBNS.charAt(position > 0 ? position : NS.length() - 1));
				SBNS.setCharAt(position > 0 ? position : NS.length() - 1, String.valueOf(DigitLower).charAt(0));
				NumberHigherResult = SBNS.toString();
			}

			// Si el digito mayor es cero entonces no necesitamos modificar el
			// numero mayor
			if (DigitHigher == 0) {
				NumberHigherResult = NS;
			}

			// Verificamos que las deciciones tomadas hayan sido correctas
			NumberLowerResult = (Integer.valueOf(NumberLowerResult) < N) ? NumberLowerResult : NS;
			NumberHigherResult = (Integer.valueOf(NumberHigherResult) > N) ? NumberHigherResult : NS;
			
			System.out.println("Case #" + i + ": " + NumberLowerResult + " " + NumberHigherResult);
		}

		in.close();
	}

	public static int maxDigit(int n) {
		return n == 0 ? 0 : Math.max(n % 10, maxDigit(n / 10));
	}

	public static int minDigit(int n) {
		if (n == 0) {
			return 0;
		}

		List<Integer> list = new ArrayList<Integer>();
		while (n > 0) {
			list.add(n % 10);
			n = n / 10;
		}
		Collections.sort(list);
		return list.get(0);
	}

	public static int minDigitNonZero(int n) {
		if (n == 0) {
			return 0;
		}

		List<Integer> list = new ArrayList<Integer>();
		while (n > 0) {
			list.add(n % 10);
			n = n / 10;
		}

		Collections.sort(list);
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) > 0)
				return list.get(i);
		}
		return list.get(0);
	}
}
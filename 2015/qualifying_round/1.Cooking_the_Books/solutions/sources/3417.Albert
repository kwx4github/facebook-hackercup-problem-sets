#include <iostream>
#include <fstream>
#include <string>
#include <stdlib.h>

using namespace std;

int main () {
    int T, smallest, largest;
    string x;
    ifstream fin("A.in");
    ofstream fout("A.out");
    fin >> T;
    for(int t = 1; t <= T; t++) {
        fin >> x;
        smallest = atoi(x.c_str()); largest = smallest;

        for(int i = 0; i < x.size(); i++) {
            for(int j = i+1; j < x.size(); j++) {
                if(i == 0 && x[j] == '0') continue;
                char temp = x[i]; x[i] = x[j]; x[j] = temp;
                int n = atoi(x.c_str());
                smallest = min(smallest, n);
                largest  = max(largest , n);
                x[j] = x[i]; x[i] = temp;
            }
        }

        /*for(int i = 0; i < largest.size(); i++) {
            char best = largest[i];
            int indJ = i;
            for(int j = largest.size() - 1; j > i; j--) {
                if(best < largest[j]) {
                    best = largest[j];
                    indJ = j;
                }
            }
            if(best == largest[i]) continue;
            largest[indJ] = largest[i];
            largest[i] = best;
            break;
        }
        char best0 = smallest[0];
        int indJ0 = 0;
        for(int j = smallest.size() - 1; j > 0; j--) {
            if(best0 > smallest[j] && smallest[j] != '0') {
                best0 = smallest[j];
                indJ0 = j;
            }
        }
        if(best0 != smallest[0]) {
            smallest[indJ0] = smallest[0];
            smallest[0] = best0;
        } else {
            for(int i = 1; i < smallest.size(); i++) {
                char best = smallest[i];
                int indJ = i;
                for(int j = smallest.size() - 1; j > i; j--) {
                    if(best > smallest[j]) {
                        best = smallest[j];
                        indJ = j;
                    }
                }
                if(best == smallest[i]) continue;
                smallest[indJ] = smallest[i];
                smallest[i] = best;
                break;
            }
        }*/
        fout << "Case #" << t << ": " << smallest << " " << largest << endl;
    }
    fin.close(); fout.close();
    return 0;
}

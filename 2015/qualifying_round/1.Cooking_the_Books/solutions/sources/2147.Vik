#include <fstream>
#include <cassert>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>

#define INPUT_FILE_NAME "test_input.txt"
#define OUTPUT_FILE_NAME "test_output.txt"

int main() {
	std::ifstream inputFile(INPUT_FILE_NAME);
	assert(inputFile);

	std::ofstream outputFile(OUTPUT_FILE_NAME);
	assert(outputFile);

	int numTestCases;
	inputFile >> numTestCases;

	for (int i = 0; i < numTestCases; i++) {
		int input;
		inputFile >> input;

		//NOTE: If input = 0, smallest = largest = 0
		//NOTE: AT MOST 1 swap, 0 swaps may be optimal

		//Algorithm -> try all possible swaps, take min and max

		std::string inputString = std::to_string(input);
		std::vector<int> digits;

		std::vector<int> possible;
		possible.push_back(input);

		for (unsigned int j = 0; j < inputString.length(); j++) {
			digits.push_back(inputString[j] - '0');
		}
		
		int minDigit = digits.size() - 1;

		for (int minOrMax = 0; minOrMax < 2; minOrMax++) {
			int oldDigit = minOrMax ? minDigit : 0;
			int minJ = minOrMax ? 0 : 1;
			int maxJ = minOrMax ? inputString.length() - 1 : inputString.length();
			
			for (int j = minJ; j < maxJ; j++) {
				int newDigit = digits[j];

				digits[j] = digits[oldDigit];
				digits[oldDigit] = newDigit;

				if (digits[0] != 0) {
					int value = 0;

					for (int k = minDigit; k >= 0; k--) {
						value += digits[k] * pow(10, minDigit - k);
					}

					possible.push_back(value);
				}

				digits[oldDigit] = digits[j];
				digits[j] = newDigit;
			}
		}

		for (int j = 0; j < inputString.length(); j++) {
			if (digits.size() < 2 || j == 1) continue;
			int newDigit = digits[j];

			digits[j] = digits[1];
			digits[1] = newDigit;

			if (digits[0] != 0) {
				int value = 0;

				for (int k = minDigit; k >= 0; k--) {
					value += digits[k] * pow(10, minDigit - k);
				}

				possible.push_back(value);
			}

			digits[1] = digits[j];
			digits[j] = newDigit;
		}

		int smallest = *std::min_element(possible.begin(), possible.end());
		int largest = *std::max_element(possible.begin(), possible.end());

		outputFile << "Case #" << (i + 1) << ": " << smallest << " " << largest << "\n";
	}

	inputFile.close();
	outputFile.close();
}
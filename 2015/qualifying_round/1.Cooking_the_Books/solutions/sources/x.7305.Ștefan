package qual

import scala.io.Source
import java.io.PrintWriter
import java.io.File

case class Solution(low: String, high: String)

object CookingTheBooks {
  
  def main(args: Array[String]) {
    val input = Source.fromFile("res/input.txt")
    val output = new PrintWriter("res/output.txt")
    val cases = input.getLines.map(_.toInt).toList
    
    output.print(cases.tail.take(cases.head).map(cookTheBooks(_)).zipWithIndex.map { case (sol, idx) => 
      s"Case #${idx + 1}: ${sol.low} ${sol.high}"
    }.mkString("\n"))
    
    output.close
  }
  
  def cookTheBooks(num: Int): Solution = if (num == 0) Solution("0", "0") else {
    val digits = split(num)
    val digitsWithIndex = digits.zipWithIndex
    
    val maxIdx = digitsWithIndex.maxBy(_._1)._2
    val minIdx = digitsWithIndex.filter(_._1 != 0).minBy(_._1)._2
    
    Solution(swapWithFirst(digits, minIdx).mkString, swapWithFirst(digits, maxIdx).mkString)
  }
  
  def split(n: Int): IndexedSeq[Int] = 
    if (n == 0) IndexedSeq(0) 
    else Stream.iterate(n)( _ / 10).takeWhile(_ != 0).map(_ % 10).toIndexedSeq.reverse
  
  def swapWithFirst[T](ls: Seq[T], idx: Int): Seq[T] = 
    ls.updated(0, ls(idx)).updated(idx, ls(0))

}

import java.io.*;
import java.math.BigInteger;
import java.util.*;


public class CTB {

    void solve() throws IOException {
        int t=nextInt();
        for(int testCase=0;testCase<t;testCase++){
            int x=nextInt();
            int k=0;
            int[] a=new int[10];
            int min=x;
            int max=x;
            while(x!=0){
                a[k++]=x%10;
                x/=10;
            }
            for(int i=0;i<k;i++)
                for(int j=i+1;j<k;j++){
                    if(j==k-1&&a[i]==0)continue;
                    int tmp=a[i];
                    a[i]=a[j];
                    a[j]=tmp;
                    int cur=0;
                    for(int h=k-1;h>=0;h--)cur=cur*10+a[h];
                    max=Math.max(max,cur);
                    min=Math.min(min,cur);
                    tmp=a[i];
                    a[i]=a[j];
                    a[j]=tmp;
                }
            out.printf("Case #%d: %d %d\n",testCase+1,min,max);
        }
    }

    public static void main(String[] args) throws IOException {
        new CTB().run();
    }

    void run() throws IOException {
        reader = new BufferedReader(new InputStreamReader(System.in));
		reader = new BufferedReader(new FileReader("input.txt"));
        tokenizer = null;
        out = new PrintWriter(new OutputStreamWriter(System.out));
		out = new PrintWriter(new FileWriter("output.txt"));
        solve();
        reader.close();
        out.flush();

    }

    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }
}

package fb2014_qual;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class A {
    public static void main(String[] args) throws FileNotFoundException {
        Kattio io;

        io = new Kattio(System.in, System.out);
//        io = new Kattio(new FileInputStream("fb2014_qual/A-sample.in"), System.out);
        io = new Kattio(new FileInputStream("/Users/yarin/Downloads/cooking_the_books.txt"), new FileOutputStream("fb2014_qual/A.out"));
//        io = new Kattio(new FileInputStream("fb2014_qual/A-large-0.in"), new FileOutputStream("fb2014_qual/A-large-0.out"));

        int cases = io.getInt();
        for (int i = 1; i <= cases; i++) {
            io.print("Case #" + i + ": ");
            new A().solve(io);
        }
        io.close();
    }

    private void solve(Kattio io) {
        String s = io.getWord();
        long min = Long.parseLong(s), max = Long.parseLong(s);
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < s.length(); j++) {
                char[] chars = s.toCharArray();
                char tmp = chars[i];
                chars[i] = chars[j];
                chars[j] = tmp;
                if (chars[0] == '0') continue;
                long x = Long.parseLong(new String(chars));
                min = Math.min(min, x);
                max = Math.max(max, x);
            }
        }
        io.println(min + " " + max);

    }

    public static class Kattio extends PrintWriter {
        public Kattio(InputStream i) {
            super(new BufferedOutputStream(System.out));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public Kattio(InputStream i, OutputStream o) {
            super(new BufferedOutputStream(o));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public boolean hasMoreTokens() {
            return peekToken() != null;
        }

        public int getInt() {
            return Integer.parseInt(nextToken());
        }

        public double getDouble() {
            return Double.parseDouble(nextToken());
        }

        public long getLong() {
            return Long.parseLong(nextToken());
        }

        public String getWord() {
            return nextToken();
        }


        private BufferedReader r;
        private String line;
        private StringTokenizer st;
        private String token;

        private String peekToken() {
            if (token == null)
                try {
                    while (st == null || !st.hasMoreTokens()) {
                        line = r.readLine();
                        if (line == null) return null;
                        st = new StringTokenizer(line);
                    }
                    token = st.nextToken();
                } catch (IOException e) {
                }
            return token;
        }

        private String nextToken() {
            String ans = peekToken();
            token = null;
            return ans;
        }
    }

}

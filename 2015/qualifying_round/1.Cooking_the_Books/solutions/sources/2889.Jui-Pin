

#include<algorithm>
#include<iostream>

using namespace std;

void Cook(int t, string org){
    // Small part
    string small = org;
    sort(small.begin(), small.end());
    if(small.size() > 1){
        int first = 0;
        while(small[first] == '0')  first ++;
        swap(small[0], small[first]);
    }
    string small2 = org;
    int mini = -1;
    int minv = INT_MAX;
    int tmpi;
    for(int i = 0; i < org.size(); i ++){
        if(small[i] != small2[i]){
            // find the min one.
            tmpi = i;
            if(i == 0){
                for(++i; i < org.size(); i++){
                    if(small2[i] != '0' && small2[i] - '0' <= minv){
                        mini = i;
                        minv = small2[i] - '0';
                    }
                }
            }
            else{
                for(++i; i < org.size(); i++){
                    if(small2[i] - '0' <= minv){
                        mini = i;
                        minv = small2[i] - '0';
                    }
                }
            }
            if(mini!=-1)
                swap(small2[tmpi], small2[mini]);
            break;
        }
    }

    // Large part
    string large = org;
    sort(large.begin(), large.end(), greater<int>() );
    string large2 = org;
    int maxi = -1;
    int maxv = INT_MIN;
    for(int i = 0; i < org.size(); i ++){
        if(large[i] != large2[i]){
            tmpi = i;
            // find the max one.
            for(++i; i < org.size(); i++){
                if(large2[i] != '0' && large2[i] - '0' >= maxv){
                    maxi = i;
                    maxv = large2[i] - '0';
                }
            }
            if(maxi!=-1)
                swap(large2[tmpi], large2[maxi]);
            break;
        }
    }
    cout << "Case #" << t << ": " << small2 << " " << large2 << "\n";
    return;
}

int main(int argc, const char* argv[]){

    string origin;
    int T;
    cin >> T;
    for(int t = 0; t < T; t ++){
        cin >> origin;
        Cook(t+1, origin);
    }
    return 0;
}



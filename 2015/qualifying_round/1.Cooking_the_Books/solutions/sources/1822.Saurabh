#include <bits/stdc++.h>
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll;
typedef vector<pll> vpll;typedef vector<string> vs; typedef double D; typedef vector<bool> vb;
typedef pair<ll,pll> pip;
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sd(x) scanf("%d", &x)
#define slld(x) scanf("%I64d", &x)
#define present(c,x) ((c).find(x) != (c).end())
#define debug(X) cerr << "	--> " << #X << " = " << X << endl
#define Fill(a, b) memset(a, b, sizeof(a))
#define INF 2000000000LL
#define mod 1000000007LL
FILE * sf = fopen("cooking_the_books.txt","r");
FILE * pf = fopen("output.txt","w");
void solve(int z)
{
	char num[20],large[20],small[20];
	//scanf("%s",num);
	fscanf(sf,"%s",num);
	int len = strlen(num);
	for(int i=0;i<=len;++i)	large[i] = num[i];
	for(int i=0;i<=len;++i)	small[i] = num[i];
	bool swp = false;
	char s = '0'-1;
	int p = 0;
	for(int j=1;j<len;++j)
	{
		if(s<=num[j])
		{
			p = j;
			s = num[j];
		}
	}
	if(s>num[0])
	{
		swap(large[p],large[0]);
		swp = true;
	}
	if(!swp)
	{
		for(int i=1;i<len;++i)
		{
			s = '0' - 1;
			for(int j=i+1;j<len;++j)
			{
				if(s<=num[j])
				{
					p = j;
					s = num[j];
				}
			}
			if(s>num[i])
			{
				swap(large[p],large[i]);
				swp = true;
				break;
			}
		}
	}
	swp = false;
	s = '9'+1;
	for(int j=1;j<len;++j)
	{
		if(s>=num[j]&&num[j]!='0')
		{
			p = j;
			s = num[j];
		}
	}
	if(s<num[0])
	{
		swap(small[p],small[0]);
		swp = true;
	}
	if(!swp)
	{
		for(int i=1;i<len;++i)
		{
			s = '9' + 1;
			for(int j=i+1;j<len;++j)
			{
				if(s>=num[j])
				{
					p = j;
					s = num[j];
				}
			}
			if(s<num[i])
			{
				swap(small[p],small[i]);
				swp = true;
				break;
			}
		}
	}
	//printf("%s %s\n",small,large);
	fprintf(pf,"Case #%d: %s %s\n",z,small,large);

}
int main()
{
	int t = 1;
	//sd(t);
	fscanf(sf,"%d",&t);
	for(int tt=1;tt<=t;++tt)		solve(tt);
	return 0;
}


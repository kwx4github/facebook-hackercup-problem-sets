using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication5
{

	public static class MyExtensions
	{

		public static int computeNum(this IList<int> l)
		{
			int rep = 0;

			for (int i = 0; i < l.Count; ++i)
			{
				rep = rep * 10 + l[i];
			}

			return rep;
		}

		public static IList<T> Swap<T>(this IList<T> l, int indexA, int indexB)
		{
			T tmp = l[indexB];
			l[indexB] = l[indexA];
			l[indexA] = tmp;

			return l;
		}
	}

	class Program
	{
		static void Main(string[] args)
		{
			var stream = new StreamReader(@"c:\users\florin\documents\visual studio 2012\Projects\ConsoleApplication5\ConsoleApplication5\input.in");
			var resultStream = new StreamWriter(@"c:\users\florin\documents\visual studio 2012\Projects\ConsoleApplication5\ConsoleApplication5\output.out");
			
			int n = int.Parse(stream.ReadLine());

			for (int i = 0; i < n; ++i)
			{
				int x = int.Parse(stream.ReadLine());
				var ans = ProduceAnswer(x);
				resultStream.WriteLine("Case #{0}: {1} {2}", i + 1, ans.Item1, ans.Item2);
			}

			resultStream.Close();
			stream.Close();
		}

		static Tuple<int,int> ProduceAnswer(int x)
		{
			int max = x, min = x;

			List<int> builder = new List<int>();
			while (x != 0)
			{
				builder.Add(x % 10);
				x /= 10;
			}

			builder.Reverse();
			for (int i = 0; i < builder.Count; ++i)
			{
				bool found = false;
				for (int j = i + 1; j < builder.Count; ++j)
				{
					if (builder[j] > builder[i])
					{
						int tmp = builder.Swap(i, j).computeNum();
						max = Math.Max(max, tmp);
						builder.Swap(i, j);

						found = true;
					}
				}

				if (found)
				{
					break;
				}
			}

			for (int i = 0; i < builder.Count; ++i)
			{
				bool found = false;
				for (int j = i + 1; j < builder.Count; ++j)
				{
					if (builder[j] < builder[i] && builder[j] > 0) 
					{
						int tmp = builder.Swap(i, j).computeNum();
						min = Math.Min(min, tmp);
						builder.Swap(i, j);

						found = true;
					}
				}

				if (found)
				{
					break;
				}
			}

			return new Tuple<int,int>(min, max);
		}

	}
}

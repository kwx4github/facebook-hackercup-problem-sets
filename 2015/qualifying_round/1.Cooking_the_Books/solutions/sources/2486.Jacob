import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;

/**
 * Created by jacob on 1/8/15.
 */
public class BadAccountant
{
    public static void main(String args[])
    {
        try
        {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(new File("cooking_the_books.txt")));

            PrintWriter writer = new PrintWriter("output.txt");

            String numberOfLines = bufferedReader.readLine().trim();
            int t = Integer.parseInt(numberOfLines);

            String input;

            for(int i = 1; i <= t; i++)
            {
                input = bufferedReader.readLine().trim();

                writer.println("Case #" + i + ": " + getSmallestNumber(input) + " " + getLargestNumber(input));
            }

            bufferedReader.close();
            writer.close();
        }
        catch(Exception ex)
        {
            System.out.println("ERROR");
        }
    }

    private static int intFromChar(char c)
    {
        return (int) c - '0';
    }

    private static String swapDigits(String n, int firstIndex, int secondIndex)
    {
        char[] chars = n.toCharArray();

        char temp = chars[firstIndex];
        chars[firstIndex] = chars[secondIndex];
        chars[secondIndex] = temp;

        return new String(chars);
    }

    private static class NumberInfo
    {
        private int extremeDigit;
        private int extremeIndexOfValue;
        private boolean isExtremeFirst;

        public NumberInfo(){}

        public int getExtremeIndexOfValue()
        {
            return this.extremeIndexOfValue;
        }

        public int getExtremeDigit()
        {
            return this.extremeDigit;
        }

        public boolean getIsFirst()
        {
            return this.isExtremeFirst;
        }

        public void setIsFirst(boolean isFirst)
        {
            this.isExtremeFirst = isFirst;
        }

        public void setExtremeIndexOfValue(int extremeIndexOfValue)
        {
            this.extremeIndexOfValue = extremeIndexOfValue;
        }

        public void setExtremeDigit(int extremeDigit)
        {
            this.extremeDigit = extremeDigit;
        }
    }

    private static NumberInfo getLargestInfo(String n)
    {
        NumberInfo info = new NumberInfo();

        info.setExtremeDigit(intFromChar(n.charAt(0)));
        info.setExtremeIndexOfValue(0);
        info.setIsFirst(true);

        int temp;
        for(int i = 1; i < n.length(); i++)
        {
            temp = intFromChar(n.charAt(i));

            if(temp > info.getExtremeDigit())
            {
                info.setExtremeDigit(temp);
                info.setIsFirst(false);
                info.setExtremeIndexOfValue(i);

            }
            else if(temp == info.getExtremeDigit())
            {
                info.setExtremeIndexOfValue(i);
            }
        }

        return info;
    }

    private static String getLargestNumber(String n)
    {
        if(n.length() == 1)
        {
            return n;
        }

        boolean isDone = false;
        StringBuffer buffer = new StringBuffer();

        while(!isDone)
        {
            if(n.length() == 2)
            {
                if(intFromChar(n.charAt(0)) < intFromChar(n.charAt(1)))
                {
                    buffer.append(swapDigits(n, 0, 1));
                }
                else
                {
                    buffer.append(n);
                }

                isDone = true;
            }
            else
            {
                NumberInfo info = getLargestInfo(n);

                if(!info.getIsFirst())
                {
                    buffer.append(swapDigits(n, 0, info.getExtremeIndexOfValue()));
                    isDone = true;
                }
                else
                {
                    buffer.append(n.charAt(0));
                    n = n.substring(1);
                }
            }
        }

        return buffer.toString();
    }

    private static NumberInfo getSmallestInfo(String n, boolean useZero)
    {
        NumberInfo info = new NumberInfo();

        info.setExtremeDigit(intFromChar(n.charAt(0)));
        info.setExtremeIndexOfValue(0);
        info.setIsFirst(true);

        int temp;
        for(int i = 1; i < n.length(); i++)
        {
            temp = intFromChar(n.charAt(i));

            if(temp < info.getExtremeDigit() && (useZero || temp != 0))
            {
                info.setExtremeDigit(temp);
                info.setIsFirst(false);
                info.setExtremeIndexOfValue(i);
            }
            else if(temp == info.getExtremeDigit())
            {
                info.setExtremeIndexOfValue(i);
            }
        }

        return info;
    }

    private static boolean hasZero(String n)
    {
        if(n.indexOf('0') != -1)
        {
            return true;
        }

        return false;
    }

    private static String getSmallestNumber(String n)
    {
        if(n.length() == 1)
        {
            return n;
        }

        boolean isDone = false;
        StringBuffer buffer = new StringBuffer();

        if(hasZero(n))
        {
            NumberInfo info = getSmallestInfo(n, false);

            if(!info.getIsFirst())
            {
                buffer.append(swapDigits(n, 0, info.getExtremeIndexOfValue()));
                isDone = true;
            }
            else if (n.length() == 2)
            {
                buffer.append(n);
                isDone = true;
            }
            else
            {
                buffer.append(n.charAt(0));
                n = n.substring(1);
            }
        }

        while(!isDone)
        {
            if(n.length() == 2)
            {
                if(intFromChar(n.charAt(1)) < intFromChar(n.charAt(0)))
                {
                    if(buffer.length() > 0 || intFromChar(n.charAt(1)) != 0)
                    {
                        buffer.append(swapDigits(n, 0, 1));
                    }
                }
                else
                {
                    buffer.append(n);
                }

                isDone = true;
            }
            else
            {
                NumberInfo info = getSmallestInfo(n, true);

                if(!info.getIsFirst())
                {
                    buffer.append(swapDigits(n, 0, info.getExtremeIndexOfValue()));
                    isDone = true;
                }
                else
                {
                    buffer.append(n.charAt(0));
                    n = n.substring(1);
                }
            }
        }

        return buffer.toString();
    }



}

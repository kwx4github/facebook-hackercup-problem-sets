#include <bits/stdc++.h>
typedef long long int ll;
//Following macros are by Johnny Ho and Nikhil Garg (Source = http://www.quora.com/Competitive-Programming/What-are-some-macros-that-a...)
#define d(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)
//These don't declare new loop variables
#define rep(i,n) for(i=0; i<(n); ++i)
#define dwn(i,n) for(i=(n); --i>=0; )
#define repr(i,l,r) for(i=(l); i<(r); ++i)
#define dwnr(i,l,r) for(i=(l), _##i=(r); i>=_##i;i-- )
//These do
#define nrep(i,n) for(int i=0, _##i=(n); i<_##i; ++i)
#define ndwn(i,n) for(int i=(n); i>=0;i-- )
#define nrepr(i,l,r) for(int i=(l), _##i=(r); i<_##i; ++i)
#define ndwnr(i,l,r) for(int i=(l), _##i=(r); i>=_##i; i-- )
#define INF (ll)1e9
#define EPS 1e-16
#define mp make_pair
#define pb push_back
#define sz(a) ((int)(a.size()))
#define all(a) a.begin(),a.end()
#define srt(a) sort(all(a))
#define gc getchar_unlocked
#define ruko system("pause")

using namespace std;

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {
        cout<<v<<" ";
        return *this;
    }
} dbg;
using namespace std;

vector <int> calc(int num)
{
    vector <int> res;

}
int main()
{
    freopen("a.in","r",stdin);
    freopen("a.out","w",stdout);
    int t;
    cin>>t;
    int cs = 1;
    while(t--)
    {
        string num;
        cin>>num;
        int mx = -1 , mn = 10,mxpos=0,mnpos=0;
         //d(mx,mn);
        string mxx=num,mnn=num;
        bool mxfnd = false, mnfnd = false;
        nrep(j,sz(num))
        {
            mx = -1;
            mn = 10;
            nrepr(i,j+1,sz(num))
            {
                if(mx < num[i]-'0')
                {
                    mx = num[i] - '0';
                    mxpos = i;
                }

                if(mn > num[i]-'0')
                {
                    mn = num[i] - '0';
                    mnpos = i;
                }
            }
            if(mx > num[j]-'0' && !mxfnd && mx)
            {
                mxfnd = true;
                swap(num[j],num[mxpos]);
                mxx = num;
                swap(num[j],num[mxpos]);
            }

            if(mn < num[j]-'0' && !mnfnd && mn)
            {
                mnfnd = true;
                swap(num[j],num[mnpos]);
                mnn = num;
                swap(num[j],num[mnpos]);
            }

        }
        cout<<"Case #"<<cs++<<": "<<mnn<<" "<<mxx<<endl;
    }
    return 0;
}

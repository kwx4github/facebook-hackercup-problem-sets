#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

void printSolution( const int testCase, const int low, const int high )
{
	cout << "Case #" << testCase << ": " << low << " " << high << endl;
}

string swap( const string& s, size_t pos1, size_t pos2 )
{
	string n = s;
	n[pos1] = s[pos2];
	n[pos2] = s[pos1];
	return n;
}

void tweak( const int testCase )
{
	int N, low, high;
	size_t lastOccurance[10], firstOccurance[10];
	cin >> N;

	if ( N <= 10 )
	{
	  	printSolution( testCase, N, N );
		return;
	}

	const string sN = to_string( N );
	for ( int i = 0; i <=9; ++i )
	{
		firstOccurance[i] = sN.find( to_string( i ) );
		lastOccurance[i] = sN.rfind( to_string( i ) );
	}

	low = N;
	// Highest
	for ( size_t l = 0; l < sN.size() && low == N; l++ )
	{
		int b = sN[l] - '0';
		for ( int i = ( l == 0 ? 1 : 0 ); i < b && low == N; ++i )
		{
			if ( lastOccurance[ i ] != string::npos && lastOccurance[ i ] > l )
			{
				low = stoi( swap( sN, l, lastOccurance[ i ] ) );
			} 
		}
	}

	high = N;
	// Highest
	for ( size_t l = 0; l < sN.size() && high == N; l++ )
	{
		int b = sN[l] - '0';
		for ( int i = 9; i > b && high == N; --i )
		{
			if ( lastOccurance[ i ] != string::npos && lastOccurance[ i ] > l )
			{
				high = stoi( swap( sN, l, lastOccurance[ i ] ) );
			} 
		}
	}

	printSolution( testCase, low, high );
}


int main( int argc, char** argv )
{
	int T;
        cin >> T;

	for ( int i = 1; i <= T; ++i ) tweak( i );

	return 0;
}

import java.util.*;

public class Attempt1 {
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		
		int count = scn.nextInt();
		int min;
		int max;
		int firstNum = 0;
		boolean notConsFirst = false;
		int minDigit = 11;
		int minPos = -1;
		int maxDigit = -1;
		int maxPos = -1;
		int firstZero = -1;
		int lastZero = -1;
		
		for (int i = 0; i < count; i++) {
			String num = Integer.toString(scn.nextInt());
			
			for (int j = 0; j < num.length(); j++) {
				int curNum = Character.getNumericValue(num.charAt(j));
				
				if (j == 0)
					firstNum = curNum;
				
				if (firstNum != curNum && curNum != 0)
					notConsFirst = true;
				
				if (curNum == 0) {
					if (lastZero == -1) 
						firstZero = j;
					lastZero = j;
				}
				
				if (curNum <= minDigit && curNum != 0 && notConsFirst) {
					minDigit = curNum;
					minPos = j;
				}
				
				if (curNum >= maxDigit && notConsFirst) {
					maxDigit = curNum;
					maxPos = j;
				}
			}
			
			// min
			min = Integer.valueOf(num);
			if (minDigit == 11 && lastZero != -1 && num.length() > 1) {
				for (int m = 1; m < num.length(); m++) {
					if (num.charAt(m) != '0') {
						char[] buildMin = num.toCharArray();
						buildMin[lastZero] = buildMin[m];
						buildMin[m] = '0';
						
						min = Integer.parseInt(new String(buildMin));
						break;
					}
				}
			}
			else {
				for (int n = 0; n < num.length(); n++) {
					int curNum = Character.getNumericValue(num.charAt(n));
					
					if (minDigit < curNum) {
						char[] buildMin = num.toCharArray();
						char buf = buildMin[n];
						
						buildMin[n] = buildMin[minPos];
						buildMin[minPos] = buf;
						
						min = Integer.parseInt(new String(buildMin));
						break;
					}
				}
			}
			
			// max
			max = Integer.valueOf(num);
			if (maxDigit == -1 && firstZero != -1 && num.length() > 1) {
				int len = num.length();
				for (int m = 1; m < len; m++) {
					if (num.charAt(len-m) != '0') {
						char[] buildMax = num.toCharArray();
						buildMax[firstZero] = buildMax[len-m];
						buildMax[len-m] = '0';
						
						max = Integer.parseInt(new String(buildMax));
						break;
					}
				}
			}
			else {
				for (int n = 0; n < num.length(); n++) {
					int curNum = Character.getNumericValue(num.charAt(n));
					
					if (maxDigit > curNum) {
						char[] buildMax = num.toCharArray();
						char buf = buildMax[n];
						
						buildMax[n] = buildMax[maxPos];
						buildMax[maxPos] = buf;
						
						max = Integer.parseInt(new String(buildMax));
						break;
					}
				}
			}
			
			
			System.out.println("Case #" + (i+1) + ": " + min + " " + max);
			
			minDigit = 11;
			maxDigit = -1;
			firstZero = -1;
			lastZero = -1;
			notConsFirst = false;
		}
	}
}

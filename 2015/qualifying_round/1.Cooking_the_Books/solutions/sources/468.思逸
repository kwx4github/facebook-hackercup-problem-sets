swapPair :: Int -> Int -> String -> String
swapPair p q s
    | p == q = s
    | p < q  = let cp = s !! p
                   cq = s !! q
                   t1 = take p s
                   t2 = drop (p + 1) . take q $ s
                   t3 = drop (q + 1) s
               in t1 ++ (cq : t2) ++ (cp : t3)

rule :: String -> Bool
rule s = length s == 1 || head s > '0'

solve :: String -> String
solve s = let n = length s
              gen = \x -> zip (repeat x) (takeWhile (< n) [x .. ])
              pairs = concat . map gen $ take n [0 .. ]
              opt = filter rule (map (\(p, q) -> swapPair p q s) pairs)
              minv = minimum opt
              maxv = maximum opt
          in minv ++ " " ++ maxv

batch :: Int -> [String] -> [String]
batch _ [] = []
batch tid (s : xs) = let format = "Case #" ++ show tid ++ ": " ++ solve s
                     in format : batch (tid + 1) xs

main = do
    getContents >>= mapM putStrLn . batch 1 . tail . lines


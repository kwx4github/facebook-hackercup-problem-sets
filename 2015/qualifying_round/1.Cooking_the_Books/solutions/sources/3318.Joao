#include <iostream>
#include <map>
#include <cmath>

using namespace std;

int len(int N) {
    int s = 0;
    while (N) {
        s += 1;
        N /= 10;
    }
    return s;
}

int reverse(int N) {
    int res = 0;
    while (N) {
        res = res * 10 + N % 10;
        N /= 10;
    }
    return res;
}

int swapDigits(int N, int i, int j) {
    int pi = 1;
    for (int k = 0; k < i; k++) pi *= 10;
    int pj = 1;
    for (int k = 0; k < j; k++) pj *= 10;

    int di = (N / pi) % 10;
    int dj = (N / pj) % 10;

    int c = 0;
    int res = 0;
    int p = 1;
    while (N) {
        if (c == i)
            res += dj * p;
        else if (c == j)
            res += di * p;
        else
            res += (N % 10) * p;

        N /= 10;
        c++;
        p *= 10;
    }
    return res;
}

pair<int, int> getSmallerAndLargest(int N) {
    int smaller = N;
    int larger = N;

    int S = len(N);
    for (int i = 0; i < S; i++) {
        for (int j = i + 1; j < S; j++) {
            int res = swapDigits(N, i, j);
            if (len(res) == len(N)) {
                if (res > larger)
                    larger = res;
                if (res < smaller)
                    smaller = res;
            }
        }
    }

    return make_pair(smaller, larger);
}

int main() {
    int T;

    cin >> T;
    for (int i = 1; i <= T; i++) {
        int N;
        cin >> N;
        pair<int, int> sl = getSmallerAndLargest(N);
        cout << "Case #" << i << ": " << sl.first << " " << sl.second << endl;
    }

    return 0;
}

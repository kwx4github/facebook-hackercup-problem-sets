#include <cmath>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>
#include <deque>
#include <queue>
#include <functional>
#include <map>
#include <bitset>
#include <stack>
using namespace std;
#define fr(a,b,c) for(int a=b;a<c;a++)
#define addEdge(a,b) to[z] = b; ant[z] = adj[a]; adj[a] = z++
#define addEdgeC(a,b,c) from[z] = a; to[z] = b; ant[z] = adj[a]; adj[a] = z; cost[z] = c; edges[z] = z; z++;
#define rp(a,b) fr(a,0,b)
#define MP make_pair
#define F first
#define S second
const int infinity = 0x3f3f3f3f;
typedef pair<int,int> pii;
typedef long long ll;

int T,N,t;
int number[100];
int mini,maxi,pMax,pMin,S1,S2,V1,V2,Z;
bool hasZero;

int toI(){
	reverse(number,number+t);
	int m = 1;
	int v = 0;
	rp(p,t){
		v += number[p]*m;
		m *= 10;
	}
	reverse(number,number+t);
	return v;
}

void aller(){
	//mini
	if(!hasZero){
		swap(number[0],number[pMin]);
		S1 = toI();
		swap(number[0],number[pMin]);
	}else{
		swap(number[0],number[pMin]);
		V1 = toI();
		swap(number[0],number[pMin]);
		int pZ = 1;
		while(number[pZ] == 0 && pZ < t) pZ++;
		swap(number[pZ],number[Z]);
		V2 = toI();
		swap(number[pZ],number[Z]);
		S1 = min(V1,V2);
	}
	swap(number[0],number[pMax]);
	S2 = toI();
}

void toN(){
	mini = infinity;
	maxi = -1;
	hasZero = false;

	t = 0;
	do{
		number[t++] = N%10;
		N = N/10;
	}while(N != 0);
	reverse(number,number+t);
	rp(i,t){
		if(number[i] == 0){
			hasZero = true;
			Z = i;
		}
		if(number[i] > maxi){
			pMax = i;
			maxi = number[i];
		}
		if(number[i] < mini && number[i] != 0){
			pMin = i;
			mini = number[i];
		}
	}
}

int main(){
	scanf("%d",&T);
	rp(t,T){
		scanf("%d",&N);
		if(N == 0){
			printf("Case #%d: 0 0\n",t+1);
		}else{
			toN();
			aller();
			printf("Case #%d: %d %d\n",t+1,S1,S2);
		}
	}
}
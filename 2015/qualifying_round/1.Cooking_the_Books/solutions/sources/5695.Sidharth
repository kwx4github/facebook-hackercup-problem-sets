import Data.List (splitAt)

main = do nums <- getContents
          let numbers = map read $ tail $ lines nums
          putStr $ unlines $ zipWith format [1..] (map maxMinIntSwaps numbers)

format :: Integer -> (Integer,Integer) -> String
format i (a,b) = "Case #" ++ (show i) ++ ": " ++ 
                 (show a) ++ " " ++ (show b)

maxMinIntSwaps :: Integer -> (Integer,Integer)
maxMinIntSwaps = maxMin . intSwaps

--swaps :: [a] -> [[a]]
--swaps [x] = [[x]]
--swaps (x:x':xs) = swapFirstTwo:(map (x:) (swaps (x':xs)))
--    where swapFirstTwo = x':x:xs

swaps :: [a] -> [[a]]
swaps xs = xs:[swap xs i j | (i,j) <- indices]
    where l = length xs
          indices = [(i,j) | i <- [0..l-1], j <- [i+1..l-1]]

swap xs i j = a ++ d:c ++ b:ds
    where (a,(b:bs)) = splitAt i     xs
          (c,(d:ds)) = splitAt (j-i-1) bs

intSwaps :: Integer -> [Integer]
intSwaps xs = map read $ filter correctLength $ 
              map doStuff $ swaps str
    where str = show xs
          l = length str
          correctLength xs = l == (length xs)

doStuff ['0'] = ['0']
doStuff xs = dropWhile (=='0') xs

maxMin :: Ord a => [a] -> (a,a)
maxMin xs = (minimum xs, maximum xs)
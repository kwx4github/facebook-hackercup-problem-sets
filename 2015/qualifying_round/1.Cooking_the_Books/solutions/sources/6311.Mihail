package mihailsm;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;

public class CookingTheBoard {
	public static void main(String[] args){
		CookingTheBoard processor = new CookingTheBoard();
		int[] list = processor.readFile(args[0]);
		processor.writeFile(args[1], list);
	}	
	
	private int[] readFile(String fileName) {
		int[] result = null;
		FileReader fr = null;
		BufferedReader br = null;
		try {
			fr = new FileReader(fileName); 
			br = new BufferedReader(fr);
			String s = br.readLine();
			int n = Integer.parseInt(s);
			result = new int[n];
			for (int i = 0; i < n; i++) {
				result[i] = Integer.parseInt(br.readLine());
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (Exception e) {
				}
			}
		}
		
		return result;
	}
	
	private void writeFile(String fileName, int[] list) {
		File fout = new File(fileName);
		FileOutputStream fos;
		BufferedWriter bw = null;
		try {
			fos = new FileOutputStream(fout);
			bw = new BufferedWriter(new OutputStreamWriter(fos));
			CookingTheBoard processor = new CookingTheBoard(); 
			for (int i = 0; i < list.length; i++) {
				MinMax mm = processor.get(list[i]);
				bw.write("Case #" + (i + 1) + ": " + mm.min + " " + mm.max);
				bw.newLine();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (Exception e) {
				}
			}
		}
	}
	
	public MinMax get(int n) {
		String s = String.valueOf(n);
		char[] chars = s.toCharArray();
		int max = getMax(n, chars);
		int min = getMin(n, chars);
		return new MinMax(min, max);
	}

	private int getMax(int n, char[] chars) {
		int[] index = new int[chars.length];
		index[index.length - 1] = index.length - 1;
		for (int i = chars.length - 2; i >= 0; i--) {
			index[i] = chars[i] > chars[index[i + 1]] ? i : index[i + 1]; 
		}
		
		int i = 0;
		while (i < chars.length && chars[index[i]] == chars[i])
			i++;
		
		if (i < chars.length) {
			exchange(chars, i, index[i]);
			int result = Integer.parseInt(new String(chars));
			exchange(chars, i, index[i]);			
			return result;
		}
		
		return n;
	}
	
	private int getMin(int n, char[] chars) {
		int[] index = new int[chars.length];
		int[] nonZeroIndex = new int[chars.length];
		index[index.length - 1] = index.length - 1;
		nonZeroIndex[index.length - 1] = chars[chars.length - 1] == '0' ? -1 : chars.length - 1;
		
		for (int i = chars.length - 2; i >= 0; i--) {
			index[i] = chars[i] < chars[index[i + 1]] ? i : index[i + 1]; 
			if (nonZeroIndex[i + 1] == -1) {
				nonZeroIndex[i] = chars[i] == '0' ? -1 : i;
			} else {
				nonZeroIndex[i] = chars[i] < chars[nonZeroIndex[i + 1]] && chars[i] != '0' ? i : nonZeroIndex[i + 1];
			}
			
		}
		
		index[0] = nonZeroIndex[0];
		int i = 0;
		while (i < chars.length && (index[i] == -1  || chars[index[i]] == chars[i])) {
			i++;
		}

		if (i < chars.length) {
			exchange(chars, i, index[i]);
			return Integer.parseInt(new String(chars));
		}
		
		return n;
	}
	
	private void exchange(char[] chars, int i, int j) {
		char buf = chars[i];
		chars[i] = chars[j];
		chars[j] = buf;
	}

	
	public class MinMax {
		public int max;
		public int min;

		public MinMax(int min, int max) {
			this.min = min;
			this.max = max;
		}
	}
}

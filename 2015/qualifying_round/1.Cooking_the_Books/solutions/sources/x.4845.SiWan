/**
 * Author: Si Wan Kim
 */

package facebookHC;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class CookingTheBook {
	
	public static void main(String[] args) {
				
		// read input file
		BufferedReader br = null;
		 
		try {
 
			String sCurrentLine;
			String firstLine;
			int totalNumbers = 0;
			List<String> numbersToSwap = new ArrayList<String>();
 
			br = new BufferedReader(new FileReader("cooking_the_books.txt"));
			
			// read the first line and determine total numbers to swap
			if((firstLine = br.readLine()) != null) {
				totalNumbers = Integer.parseInt(firstLine);				
			}
			
			File file = new File("cooking_the_books_output.txt");
			 
			// if file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}
 
			// file writer
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);			
			
			// if there isn't any number to swap then write an empty file, and terminate the program.
			if(totalNumbers == 0) {
				bw.write("");
				bw.close();
				System.exit(0);
			}			
 
			while ((sCurrentLine = br.readLine()) != null) {
				numbersToSwap.add(sCurrentLine);
				totalNumbers--;
				if(totalNumbers == 0){
					break;
				}
			}
			
			String[] numbers = parseNumbers(numbersToSwap);
			List<Pair> solutionPairs = doSwappingOp(numbers);
			printOuput(solutionPairs, bw);
			
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (br != null)br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
										
	}
	
	private static String[] parseNumbers(List<String> numbersToSwap) {
		String[] numbers = new String[numbersToSwap.size()];
		for(int i=0; i< numbersToSwap.size(); i++) {
			numbers[i] = numbersToSwap.get(i);
		}
		return numbers;
	}
	
	private static List<Pair> doSwappingOp(String[] numbers) {
		List<Pair> pairs = new ArrayList<Pair>();
		for(String n : numbers) {
			pairs.add(new Pair(findTheSmallestNumber(n), findTheLargestNumber(n)));
		}
		return pairs;		
	}
	
	// swapping logics
	private static int findTheSmallestNumber(String number) {
		if(number.length() == 1) {
			return Integer.parseInt(number);
		}
		char[] numbersByDigits = number.toCharArray();
		int sizeOfNumbers = numbersByDigits.length;
		char smallestNumber = Character.MAX_VALUE;
		Stack<Integer> indexes = new Stack<Integer>();
		for(int i=0; i < sizeOfNumbers; i++) {
			if(numbersByDigits[i] == '0' && i != 1) {
				swap(numbersByDigits, i, 1);
				break;
			}
			
			// updating the smallest number greater than 0
			if(smallestNumber > numbersByDigits[i] && numbersByDigits[i] != '0') {
				smallestNumber = numbersByDigits[i];
			}						
		}
		
		for(int j= 0; j<sizeOfNumbers; j++) {
			if(numbersByDigits[j] == smallestNumber) {
				indexes.push(j);
			}
		}
		
		int correctIndex = indexes.pop();
		if(numbersByDigits[0] == smallestNumber && indexes.size() == 0) {
			return Integer.parseInt(new String(numbersByDigits));
		} else {
			for(int i=0; i < sizeOfNumbers; i++) {
				if(numbersByDigits[i] > smallestNumber) {
					swap(numbersByDigits, correctIndex, i);
					break;
				}
			}
		}

		return Integer.parseInt(new String(numbersByDigits));
	}
	
	private static int findTheLargestNumber(String number) {
		if(number.length() == 1) {
			return Integer.parseInt(number);
		}
		
		char[] numbersByDigits = number.toCharArray();
		int sizeOfNumbers = numbersByDigits.length;
		Stack<Integer> indexes = new Stack<Integer>();
		char largestNumber = Character.MIN_VALUE;
		
		for(int i=0; i < sizeOfNumbers; i++) {			
			// updating the largest number greater than 0
			if(largestNumber < numbersByDigits[i] && numbersByDigits[i] != '0') {
				largestNumber = numbersByDigits[i];
			}
			
		}
		
		for(int j= 0; j<sizeOfNumbers; j++) {
			if(numbersByDigits[j] == largestNumber) {
				indexes.push(j);
			}
		}
		
		int correctIndex = indexes.pop();
		if(numbersByDigits[0] == largestNumber && indexes.size() == 0) {
			return Integer.parseInt(new String(numbersByDigits));
		} else {
			for(int i=0; i < correctIndex; i++) {
				if(numbersByDigits[i] < largestNumber) {
					swap(numbersByDigits, correctIndex, i);
					break;
				}
			}
		}		
		
		return Integer.parseInt(new String(numbersByDigits));
	}
	
	private static void swap(char[] numbers, int from, int to) {
		char temp = numbers[to];
		char swap = numbers[from];
		numbers[from] = temp;
		numbers[to] = swap;
	}
	
	// printing output	
	private static void printOuput(List<Pair> solution, BufferedWriter bw) {		
		try {
			for(int i=0; i< solution.size(); i++) {
				Pair p = solution.get(i);
				bw.write(String.format("Case #%d: %d %d", i+1, p.getSmallest(), p.getLargest()));
				if(i+1 != solution.size()){
					bw.write(System.getProperty("line.separator"));
				}
			}
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	

}

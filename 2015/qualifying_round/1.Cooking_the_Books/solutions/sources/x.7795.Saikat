#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// problem specific function definition
void getOutput(char s[], char* out1, char* out2)
{
	strcpy(out1, s);
	strcpy(out2, s);
	int len = strlen(s);
	if (s[0] == '0' || len == 1)
	{
		return;
	}

	int i = 0, maxs = 0, mins = 0;
	for (i = 0; i < len - 1; i++)
	{
		if (s[i] - '0' < s[i+1] - '0')
		{
			maxs = i;
			break;	
		}
	}
	if (i == len - 1)
		maxs = i;
	for (i = 0; i < len - 1; i++)
	{
		if (s[i] - '0' > s[i+1] - '0')
		{
			mins = i;
			break;	
		}
	}
	if (i == len - 1)
		mins = i;

	int max = s[maxs] - '0', min = s[mins] - '0', maxi = maxs, mini = mins;
	for (i = maxs+1; i < len; i++)
	{
		if (max < s[i] - '0')
		{
			max = s[i] - '0';
			maxi = i;
		}		
	}
	for (i = mins+1; i < len; i++)
	{
		if (min > s[i] - '0')
		{
			min = s[i] - '0';
			mini = i;
		}		
	}
	if (min == 0 && s[0] > 1)
	{
		int smin = s[0] - '0', smini = 0;
		for (i = 1; i < len; i++)
		{
			if (s[i] != '0' && smin > s[i] - '0')	
			{
				smin = s[i] - '0';
				smini = i;
			}
		}
		if (smin < s[0] - '0')
		{
			min = smin;
			mini = smini;
		} 
	}

	if (maxs < len - 1)
	{
		for (i = 0; i < maxi; i++)
		{
			if (max > s[i] - '0')
			{
				out2[maxi] = out2[i];
				out2[i] = max + '0';
				break;
			}
		}	
	}

	if (mins < len - 1)
	{
		if (min == 0)
		{
			for (i = 1; i < mini; i++)
			{
				if (min < s[i] - '0')
				{
					out1[mini] = out1[i];
					out1[i] = min + '0';
					break;
				}
			}	
		}
		else
		{
			for (i = 0; i < mini; i++)
			{
				if (min < s[i] - '0')
				{
					out1[mini] = out1[i];
					out1[i] = min + '0';
					break;
				}
			}	
		}
	}
}

int getLine(FILE* fp, char* buf, int* numOfChar)
{
	char ch;
	*numOfChar = 0;
	while ((ch = fgetc(fp)) != -1)
	{
		if (ch == '\n')
			break;
		buf[*numOfChar] = ch;
		++*numOfChar;
	}
	buf[*numOfChar] = '\0';
	return ch;
}

int main()
{
	char s[10], out1[10], out2[10];
	FILE* fp = fopen("q1.txt", "r");
	char buf[10];
	int charRead = 0, lineLength = 0;
	int inputLineNum = 0;
	int caseNo = 0;

	while ((charRead = getLine(fp, buf, &lineLength)) != -1)
	{
		inputLineNum++;
		if ((strlen(buf) == 0) || (inputLineNum == 1))
		{
			continue;
		}

		strcpy(s, buf);
		caseNo++;

		// problem specific function call
		getOutput(s, out1, out2);
		printf("Case #%d: %s %s\n", caseNo, out1, out2);
	}
	return 0;
}

#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;
void func_CookingBooks(vector<unsigned int>  &ivLines);
//Program Start
int main(void) {
    vector <unsigned int>  ivLines;
    int iTestcases;

    cin >> iTestcases;
    
    for(int iCounter=0; iCounter<iTestcases; iCounter++) {
      unsigned int iTemp;
      cin >> iTemp;
      ivLines.push_back(iTemp);
    }
    func_CookingBooks(ivLines);
    return 0;
}

void func_CookingBooks(vector<unsigned int>  &ivLines){
  //Variables
  int iCounter;
  int iMaxDigit,iMinDigit;
  unsigned int iDigit,iTemp;
  vector <unsigned int>  ivDigits;
  bool bFlag;
  //Functionality
  for(iCounter = 0  ; iCounter < ivLines.size(); iCounter++){
      iMaxDigit = 0;
      iMinDigit = 9;
      
      iDigit = ivLines.at(iCounter);
      ivDigits.clear(); 
      while(iDigit>0){
	
	iTemp = iDigit%10;
	ivDigits.push_back(iTemp);
	
	//get Min Number
	if( iMinDigit > iTemp && iTemp > 0){
	  iMinDigit = iTemp;
	}
	
	if( iMaxDigit < iTemp){
	   iMaxDigit = iTemp;
	}
	iDigit = iDigit / 10;
      }
      
      //get max number
      bFlag = true;
      iTemp = 0;
       if (ivDigits[ivDigits.size()-1] == iMaxDigit){
	 iMaxDigit = ivLines[iCounter];
       }
       else{
	 for(int iCounter2 = 0 ; iCounter2 < ivDigits.size();iCounter2++)
	 {
	   int iCurrentDigit;
	   iCurrentDigit = ivDigits[iCounter2];
	    if( iCurrentDigit == iMaxDigit and bFlag == true){
	      iCurrentDigit = ivDigits[ivDigits.size()-1];
	      bFlag = false;
	    }
	    else if(iCounter2 == ivDigits.size()-1){
	      iCurrentDigit = iMaxDigit;
	    }
	    else{}
	  
	  if (iTemp == 0) { iTemp =  iCurrentDigit;}
	  else { iTemp = iTemp + iCurrentDigit * pow(10,iCounter2); }
	    
	}
	iMaxDigit = iTemp;
      }
      
      //get min number
      bFlag = true;
      iTemp = 0;
      if (ivDigits[ivDigits.size()-1] == iMinDigit){
	iMinDigit = ivLines[iCounter];
      }
       else{
	 for(int iCounter2 = 0 ; iCounter2 < ivDigits.size();iCounter2++)
	 {
	   int iCurrentDigit;
	   iCurrentDigit = ivDigits[iCounter2];
	    if( iCurrentDigit == iMinDigit and bFlag == true){
	      iCurrentDigit = ivDigits[ivDigits.size()-1];
	      bFlag = false;
	    }
	    else if(iCounter2 == ivDigits.size()-1){
	      iCurrentDigit = iMinDigit;
	    }
	    else{}
	  
	  if (iTemp == 0) { iTemp =  iCurrentDigit;}
	  else { iTemp = iTemp + iCurrentDigit * pow(10,iCounter2); }
	    
	}
	iMinDigit = iTemp;
      }
      
      cout << "Case #"<< iCounter+1 <<": " << iMinDigit << " " << iMaxDigit<<endl; 
  }
  
}
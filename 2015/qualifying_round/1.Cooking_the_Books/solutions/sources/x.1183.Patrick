#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <valarray>
#include <vector>
#include <ext/algorithm>
#include <ext/hash_map>
#include <ext/hash_set>
#include <ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define F(i,a,b)for(int i=a;i<b;++i)
#define rep(i,n)F(i,0,n)
#define all(a)a.begin(),a.end()
template<class T>vector<T>&operator<<(vector<T>& v,T t){v.push_back(t);return v;} 

string itos(int x) {
  stringstream ss;
  ss << x;
  return ss.str();
}

string best(string s) {
  rep(i, s.length()) {
    int besti = -1;
    int bestx = s[i];
 
    F(j, i + 1, s.length()) {
     if (s[j] > bestx) {
        besti = j;
        bestx = s[j];
      }
    }
    if (besti != -1) {
      int x = s[i];
      s[i] = s[besti];
      s[besti] = x;
      break;
    }
  }
  return s;
}


string worst(string s) {
  rep(i, s.length()) {
    int besti = -1;
    int bestx = s[i];


    F(j, i + 1, s.length()) {
      if (s[j] < bestx && (i != 0 || s[j] != '0')) {
        besti = j;
        bestx = s[j];
      }
    }
    if (besti != -1) {
      int x = s[i];
      s[i] = s[besti];
      s[besti] = x;
      break;
    }
  }
  return s;
}

int main() {
  int T;
  cin >> T;
  rep(t, T) {
    int x;
    cin >> x;
    printf("Case #%d: %s %s\n", t + 1, worst(itos(x)).c_str(), best(itos(x)).c_str());
  }
}

#include <iostream>
#include <functional>
#include <cstdio>
#include <algorithm>
#include <deque>
#include <cstdlib>

using namespace std;

typedef deque<int> di;
typedef di::iterator di_it;
typedef di::reverse_iterator di_rit;

int main() {
    int t;
    cin >> t;
    for(int tcase = 1; tcase <= t; ++tcase) {
        di digits;

        char c;
        cin >> c;
        while(c != '\n') {
            int n = c - '0';
            digits.push_back(n);
            cin.get(c);
        }

        printf("Case #%i: ", tcase);

        if(digits[0] == 0) {
            cout << "0 0" << endl;
            continue;
        }

        int smallest = digits.size() - 1;
        for(int i = digits.size() - 1; i >= 0; --i)
            if(digits[i] < digits[smallest])
                smallest = i;

        int smNonZero = digits.size() - 1;
        while(smNonZero >= 0 && digits[smNonZero] == 0)
            --smNonZero;
        for(int i = digits.size() - 1; i >= 0; --i)
            if(digits[i] != 0 && digits[i] < digits[smNonZero])
                smNonZero = i;

        if(digits[0] > digits[smNonZero]) {
            swap(digits[0], digits[smNonZero]);
            for(int i = 0; i < digits.size(); ++i)
                cout << digits[i];
            cout << " ";
            swap(digits[0], digits[smNonZero]);
        }
        else {
            int i;
            for(i = 1; i < smallest && digits[i] == digits[smallest]; ++i)
                {}
            if(i < smallest)
                swap(digits[i], digits[smallest]);
            for(int i = 0; i < digits.size(); ++i)
                cout << digits[i];
            cout << " ";
            if(i < smallest)
                swap(digits[i], digits[smallest]);
        }

        int largest = digits.size() - 1;
        for(int i = digits.size() - 1; i >= 0; --i) 
            if(digits[i] > digits[largest])
                largest = i;

        int i = 0;
        while(i < largest && digits[i] == digits[largest])
            ++i;
        
        if(i < largest)
            swap(digits[i], digits[largest]);

        for(int j = 0; j < digits.size(); ++j)
            cout << digits[j];

        cout << endl;
    }

    return 0;
}

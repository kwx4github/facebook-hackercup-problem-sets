# Every business can make use of a good accountant and, if they're not big on following the law, sometimes a bad one.
# Bad accountants try to make more money for their employers by fudging numbers without getting caught.
#
# Sometimes a bad accountant wants to make a number larger, and sometimes smaller.
# It is widely known that tax auditors will fail to notice two digits being swapped in any given number,
# but any discrepancy more egregious will certainly be caught.
# It's also painfully obvious when a number has fewer digits than it ought to,
# so a bad accountant will never swap the first digit of a number with a 0.
#
# Given a number, how small or large can it be made without being found out?
#
# Input
# Input begins with an integer T, the number of numbers that need tweaking. Each of the next T lines contains a integer N.
#
# Output
# For the ith number, print a line containing "Case #i: " followed by the smallest and largest numbers that can be made from the original number N,
# using at most a single swap and following the rules above.
#
# Constraints
# 1 <= T <= 100
# 0 <= N <= 999999999
# N will never begin with a leading 0 unless N = 0

def swap(number_as_bytearray, fst, snd):
    # print("at {0} pos = {1} change to at {2} pos {3}".format(fst, chr(number_as_bytearray[fst]), snd, chr(number_as_bytearray[snd])))
    number_as_bytearray[fst], number_as_bytearray[snd] = number_as_bytearray[snd], number_as_bytearray[fst]
    return number_as_bytearray

with open("cooking_the_books.txt") as f:
    number_of_numbers = int(f.readline())
    for x in range(1, number_of_numbers+1):
        lagest_number_as_string = "0"
        smallest_number_as_string = "999999999"

        number_as_string = f.readline().rstrip()
        number_as_bytearray = bytearray(number_as_string)
        # print("check {0}".format(number_as_bytearray))
        for fst in range(0, len(number_as_bytearray)):
            for snd in range(0, len(number_as_bytearray)):
                number_as_bytearray_after_swap = swap(number_as_bytearray, fst, snd)
                number_as_string_after_swap = str(number_as_bytearray_after_swap)
                if number_as_string_after_swap[0] == '0':
                    continue
                # print("after swap {0}".format(number_as_string_after_swap))
                if smallest_number_as_string > number_as_string_after_swap:
                    # print("smallest {0} > {1} -> replace".format(smallest_number_as_string, number_as_string_after_swap))
                    smallest_number_as_string = number_as_string_after_swap
                if lagest_number_as_string < number_as_string_after_swap:
                    # print("largerst {0} < {1} -> replace".format(lagest_number_as_string, number_as_string_after_swap))
                    lagest_number_as_string = number_as_string_after_swap
        print("Case {0}: {1} {2}".format(x, smallest_number_as_string, lagest_number_as_string))



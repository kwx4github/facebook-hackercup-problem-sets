#include <iostream>
#include <fstream>
#include <string>
#include <vector>

std::vector<int> getSwapped(int num);
std::pair<int,int> minmaxPermute(int num);


int main() {
    std::ifstream input;
    input.open("test.txt");
    
    std::ofstream output;
    output.open("output.txt");
    
    std::string numOfElements;
    getline(input,numOfElements);
    
    std::string lines[stoi(numOfElements)];
    
    for(int i = 0; i<stoi(numOfElements); i++){
        std::string tempString;
        getline(input, tempString);
        std::pair<int,int> minmax = minmaxPermute(stoi(tempString));
        output<<"Case #"<<i+1<<": "<<minmax.first<<" "<<minmax.second<<'\n';
    }
}

std::pair<int,int> minmaxPermute(int num){
    std::vector<int> numbers = getSwapped(num);
    std::pair<int,int> minmax;
    
    int min = num;
    int max = min;
    
    for(int i = 0; i<numbers.size(); i++){
        if(numbers[i]<min)
            min = numbers[i];
        if(numbers[i]>max)
            max = numbers[i];
    }
    
    minmax = std::make_pair(min, max);
    return minmax;
}

std::vector<int> getSwapped(int num){
    std::vector<int> afterOneSwap;
    std::string number = std::to_string(num);
    
    if(number.length() == 1){
        afterOneSwap.push_back(num);
        return afterOneSwap;
    }
    else{
        for(int i = 0; i<number.length(); i++){
            for(int j = i+1; j<number.length(); j++){
                //we assume we've tried all the combos swapping with the numbers prior
                //hence i+1
                std::string tempString = number;
                tempString[i] = number[j];
                tempString[j] = number[i];
                //dont need a temp char because we don't change the value of number
                if(tempString[0] == '0')
                    break;
                afterOneSwap.push_back(stoi(tempString));
            }
        }
    }
}
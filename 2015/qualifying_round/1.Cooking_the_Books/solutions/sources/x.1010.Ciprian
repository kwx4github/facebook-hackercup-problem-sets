#include <fstream>
#include <algorithm>
using namespace std;
int T, n, v[2][20], vsort[20], sol[2];

inline bool Sortare(int a, int b)
{
	if(v[0][a] == v[0][b])
		return a > b;
	return v[0][a] < v[0][b];
}

int main()
{
	int t, x, i, j;
	bool gasit[2];
	ifstream fin("A.in");
	ofstream fout("A.out");
	fin >> T;
	for(t = 1; t <= T; ++t)
	{
		fin >> x;
		sol[0] = sol[1] = 0;
		if(x != 0)
		{
			n = 0;
			while(x)
			{
				v[0][n] = v[1][n] = x % 10;
				vsort[n] = n;
				x /= 10;
				n++;
			}
			sort(vsort, vsort + n, Sortare);
			gasit[0] = gasit[1] = false;
			for(i = n - 1; i >= 0; --i)
			{
				if(!gasit[0])
				{
					for(j = 0; j < n; ++j)
					{
						if(vsort[j] >= i)
							continue;
						if(v[0][vsort[j]] >= v[0][i])
						{
							j = n;
							continue;
						}
						if(v[0][vsort[j]] == 0)
						{
							if(i == n - 1)
								continue;
							gasit[0] = true;
							swap(v[0][i], v[0][vsort[j]]);
							j = n;
						}
						else
						{
							gasit[0] = true;
							swap(v[0][i], v[0][vsort[j]]);
							j = n;
						}
					}
				}
				if(!gasit[1])
				{
					for(j = n - 1; j >= 0; --j)
					{
						if(vsort[j] >= i)
							continue;
						if(v[1][vsort[j]] <= v[1][i])
						{
							j = -1;
							continue;
						}
						gasit[1] = true;
						swap(v[1][i], v[1][vsort[j]]);
						j = -1;
					}
				}
			}
			for(i = n - 1; i >= 0; --i)
			{
				sol[0] = sol[0] * 10 + v[0][i];
				sol[1] = sol[1] * 10 + v[1][i];
			}
		}
		fout << "Case #" << t << ": " << sol[0] << ' ' << sol[1] << "\n";
	}
	fin.close();
	fout.close();
	return 0;
}

#include<iostream>
#include<ifstream>
#include<ofstream>
#include<algorithm>
#include<math.h>

using namespace std;

int* convert_to_array(int, int);
int sz(int);
int find_max_pos(int*, int);
int find_min_pos(int*, int);
int convert_num(int*, int);

int main()
{
  ifstream in("cooking_the_books.txt");
  ofstream out("q1ans.txt");
  int t;
  in >> t;
  int *a = new int[t];
  for(int i = 0; i < t; i++)
    in >> a[i];
  int n;
  int len;
  int max, min;
  int max_val, min_val;
  int maxpos, minpos;
  int *array_number;
 
  // for each number
  for(int i = 0; i < t; i++)
    {
      n = a[i];
      len = sz(n);
      int *maxa = new int[len];
      int *mina = new int[len];
      array_number = convert_to_array(n, len);
      maxpos = find_max_pos(array_number, len);
      minpos = find_min_pos(array_number, len);

      max = a[maxpos];
      min = a[minpos];
      swap(a[0],max);
      maxa = a;
      swap(a[0], max);
      swap(a[0],min);
      mina = a;
      swap(a[0],min);
      max_val = convert_num(maxa, len);
      min_val = convert_num(mina, len);
      of << "Case #" << i+1 <<": " << min_val << " " << max_val << '\n';
    }
}

int convert_num(int *arr, int len)
{
  int ans = 1;
  for(int i = (len-1); i > 0; i--)
    ans = ans + (arr[i]*pow(10,i));
  return ans;
}

int sz(int n)
{
  int len = 0;
  int num = n;
  if (num == 0)
    len = 1;
  else
    {
      while(num)
	{
	  len+=1;
	  num/=10;
	}
    }
  return len;
}
int* convert_to_array(int n, int len)
{
  
  int *arr = new int[len];
  int i = 0;
  while(n>0)
    {
      arr[i] = n%10;
      i+=1;
      n/=10;
    }
  return arr;
}

int find_max_pos_(int* arr, int len)
{
  int max_pos = 0;
  for(int i = 0; i < len; i++)
    {
      if(arr[i] > arr[max_pos])
	max_pos = i;
    }
  return max_pos;
}

int find_min_pos_(int* arr, int len)
{
  int min_pos = 0;
  for(int i = 0; i < len; i++)
    {
      if(arr[i] < arr[min_pos])
	min_pos = i;
    }
  return min_pos;
}

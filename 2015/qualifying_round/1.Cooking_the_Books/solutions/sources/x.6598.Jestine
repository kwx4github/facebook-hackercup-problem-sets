(ns cooking-the-books.core
  (:require [clojure.java.io :as io]
            [clojure.string])
  (:gen-class))

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (println "Hello, World!"))


;5
;31524
;897
;123
;10
;5


(defn swap [v i1 i2]
  (assoc v i2 (v i1) i1 (v i2)))Â­

(defn cook-book [num]
  (if (= num "0")
    "0"

    (let [digits (into [] (map #(Character/getNumericValue %) num))
          smallest (first (filter #(> % 0) (sort digits)))
          smallest-pos (.indexOf digits smallest)
          largest (reduce max digits)
          largest-pos (.lastIndexOf digits largest)]

      (str
        (clojure.string/join (map str (swap digits 0 smallest-pos)))
        " "
        (clojure.string/join (map str (swap digits 0 largest-pos))))
      #_[(clojure.string/join (map str (swap digits 0 smallest-pos)))
       (clojure.string/join (map str (swap digits 0 largest-pos)))])))

(loop [numbers (rest (line-seq
                       (io/reader "resources/cooking_the_books.txt"))), case 1]
  (when (seq numbers)
    (println (str "Case #" case ": " (cook-book (first numbers))))
    (recur (rest numbers) (inc case))))




using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Hackercup
{
	static class Problem1
	{
		static void Main(string[] args)
		{
			List<TestCase> testCases = new List<TestCase>();
			string[] input = File.ReadAllLines("input1.txt");

			for (int i = 1; i <= Int32.Parse(input[0]); i++)
				testCases.Add(new TestCase() { Original = input[i] });

			foreach (TestCase testCase in testCases)
			{
				if (testCase.Original.Length == 1
				|| (testCase.Original.Length == 2 && testCase.Original[1] == '0'))
				{
					testCase.Smallest = testCase.Original;
					testCase.Largest = testCase.Original;
				}

				testCase.Smallest = FindSmallest(testCase.Original);
				testCase.Largest = FindLargest(testCase.Original);
			}

			using (FileStream stream = File.OpenWrite("output1.txt"))
			using (StreamWriter writer = new StreamWriter(stream))
			{
				for (int i = 1; i <= testCases.Count; i++)
				{
					string output = String.Format(
						"Case #{0}: {1} {2}",
						i,
						testCases[i - 1].Smallest,
						testCases[i - 1].Largest
					);
					writer.WriteLine(output);
					writer.Flush();
				}
			}
		}

		static string FindSmallest(string input)
		{
			for (int i = 0; i < 9; i++)
			{
				int sourceIndex = input.IndexOf(i.AsDigit());
				if (sourceIndex < 0)
					continue;

				for (int targetIndex = 0; targetIndex < sourceIndex; targetIndex++)
				{
					if (i == 0 && targetIndex == 0)
						continue;

					if (input[targetIndex].AsInt() > i)
						return input.SwapChars(sourceIndex, targetIndex);
				}
			}
			return input;
		}

		static string FindLargest(string input)
		{
			for (int i = 9; i > 0; i--)
			{
				int sourceIndex = input.LastIndexOf(i.AsDigit());
				if (sourceIndex < 0)
					continue;

				for (int targetIndex = 0; targetIndex < sourceIndex; targetIndex++)
				{
					if (input[targetIndex].AsInt() < i)
						return input.SwapChars(sourceIndex, targetIndex);
				}
			}
			return input;
		}

		static char AsDigit(this int integer)
		{
			return (char)(integer + '0');
		}

		static int AsInt(this char digit)
		{
			return digit - '0';
		}

		static string SwapChars(this string input, int offset1, int offset2)
		{
			char[] buffer = input.ToCharArray();
			buffer[offset1] = input[offset2];
			buffer[offset2] = input[offset1];
			return new string(buffer);
		}

		class TestCase
		{
			public string Original { get; set; }

			public string Smallest { get; set; }

			public string Largest { get; set; }
		}
	}
}

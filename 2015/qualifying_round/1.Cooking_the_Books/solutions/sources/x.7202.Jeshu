#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

vector<int> split (int num)
{
	vector<int> digits;

	while (num)
	{
     	digits.push_back(num % 10);

 	    num /= 10;
	}

	reverse(digits.begin(), digits.end());
	return digits;
}

void swap(int &a, int&b)
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}

int getLargest(vector<int> &num,int j)
{
	int large = -1;
	for (int i = j; i < num.size(); i++)
	{
		if (num[i]>large)
		{
			large = num[i];
		}
	}
	return large;
}

int getSmallest(vector<int> &num,int j)
{
	int small = 10;
	for (int i = j; i < num.size(); i++)
	{
		if (num[i]<small)
		{
			small = num[i];
		}
	}
	return small;
}

int largest(vector<int> &num,int j)
{
	int large = -1;
	int index = j;
	for (int i = j; i < num.size(); i++)
	{
		if (num[i]>large)
		{
			large = num[i];
			index = i;
		}
	}
	return index;
}

int smallest(vector<int> &num,int j)
{
	int small = 10;
	int index=j;
	for (int i = j; i < num.size(); i++)
	{
		if (num[i]<small)
		{
			small = num[i];
			index = i;
		}
	}
	return index;
}

void printv(vector<int> &digits)
{
	for(int i=0;i<digits.size();i++)
	{
		cout<<digits[i];
	}
}

int main()
{
	int num,t,n=0;
	cin>>t;
	while(t--)
	{
	vector<int> digits;
	vector<int> l_no;
	vector<int> s_no;
	cin>>num;
	if(num)
	{
		digits=split(num);
	}
	else
	{
		digits.push_back(0);
	}
	l_no=digits;
	s_no=digits;
	for (int i = 0; i < l_no.size(); i++)
	{
		if (getLargest(l_no, i) > l_no[i])
		{
			int temp=largest(l_no,i);
			swap(l_no[temp], l_no[i]);
			break;
		}
	}
	for (int i = 0; i < s_no.size(); i++)
	{
		if (getSmallest(s_no,0)!=0 && (getSmallest(s_no, i) < s_no[i]))
		{
			int temp=smallest(s_no,i);
			swap(s_no[temp], s_no[i]);
			break;
		}
	}
	cout<<"Case #"<<++n<<": ";
	printv(s_no);
	cout<<" ";
	printv(l_no);
	cout<<endl;
	}
	return 0;
}


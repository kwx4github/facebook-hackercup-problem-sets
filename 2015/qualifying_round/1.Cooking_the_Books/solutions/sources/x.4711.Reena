#include "stdio.h"
#include "stdlib.h"
#include "string.h"

// ---------------------------------------------------------------------------------
// Actual logic
// ---------------------------------------------------------------------------------

void GetMinMax ( char* number, char* min, char* max)
{
	if(strlen(number) <= 2)
		return;

	int arr[9] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};
	for(int i=strlen(number)-1; i>=0; i--)
	{
		if(number[i] == '0')
			continue;

		arr[number[i] - '1'] = i;
	}
	int maxpos = -1, minpos = -1;
	for(int i = 0; i<9; i++)
	{
		if(arr[i] != -1)
		{
			if(minpos == -1)
				minpos = arr[i];
			maxpos = arr[i];
		}
	}
	min[0] = number[minpos];
	min[minpos] = number[0];

	max[0] = number[maxpos];
	max[maxpos] = number[0];

}

// ---------------------------------------------------------------------------------
// This function takes the input file kept in the same dirctory with name "input.txt"
// and processes the input line by line and writes the output file in file
// "output.txt" in the same directory.
// ---------------------------------------------------------------------------------

int ProcessInputFile()
{
	static const char inputfile[] = "C:\\tmp\\input.txt";
	static const char outputfile[] = "C:\\tmp\\output.txt";

	FILE *Ipfile;
	fopen_s(&Ipfile, inputfile, "r" );
	FILE *Opfile; 
	fopen_s(&Opfile, outputfile, "w" );

	if ( Ipfile != NULL && Opfile != NULL)
	{
		char line [ 501 ]; // maximum size of string as given in question is 500.
		int caseNumber = 0, numCases = 0;

		if(fgets ( line, sizeof (line), Ipfile ) != NULL)
		{
			numCases =  atoi (line);
		}

		while ( numCases > 0 ) 
		{
			/* read a line */
			if(fgets ( line, sizeof (line), Ipfile ) != NULL)
			{
				caseNumber++;
				char min[100], max[100];
				strcpy_s(min, line);
				strcpy_s(max, line);
				min[strlen(line)-1] = '\0';
				max[strlen(line)-1] = '\0';
				GetMinMax( line, min, max);
				fprintf(Opfile, "Case #%d: %s %s\n", caseNumber, min, max);				
			}
			else
				break;

			numCases--;
		}
		fclose ( Ipfile );
		fclose ( Opfile );
	}
	else
	{
		if(Ipfile == NULL)
			perror ( inputfile ); /* why didn't the file open? */
		if(Opfile == NULL)
			perror ( outputfile ); /* why didn't the file open? */
	}
	return 0;
}

// ---------------------------------------------------------------------------------
// Main Function
// ---------------------------------------------------------------------------------

int main ( void )
{
   return ProcessInputFile();
}

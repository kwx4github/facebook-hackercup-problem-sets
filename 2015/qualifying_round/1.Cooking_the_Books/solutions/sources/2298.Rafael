import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

//
public class Cooking
{
	public static void main(String[] args)
	{
		long start = System.nanoTime();
		solve();
		long end = System.nanoTime();
//		printTime(start, end);
	}
	
	private static String solve()
	{
		solveCooking();
		return "";
	}
	
	private static void solveCooking()
	{
		Scanner sc = openFileForReading("cooking_the_books.txt");
		PrintWriter pw = openFileForWriting("output.txt");
		int size = sc.nextInt();
		int[] nums = new int[size];
		for(int i = 0; i < size; i++)
			nums[i] = sc.nextInt();
		for(int casenum = 1; casenum <= size; casenum++)
		{
			if(casenum != 1) pw.println();
			int num = nums[casenum-1];
			int maxnum = num;
			int minnum = num;
			String numstr = "" + num;
			for(int i = 0; i < numstr.length()-1; i++) for(int j = i+1; j < numstr.length(); j++)
			{
				int swapnum = swap(numstr, i, j);
				if(swapnum != -1)
				{
					maxnum = Math.max(maxnum, swapnum);
					minnum = Math.min(minnum, swapnum);
				}
			}
			pw.print(("Case #" + casenum + ": " + minnum + " " + maxnum));
		}
		pw.close();
	}
	
	private static int swap(String numstr, int i, int j)
	{
		int digiti = Integer.parseInt(numstr.substring(i, i+1));
		int digitj = Integer.parseInt(numstr.substring(j, j+1));
		if(i == 0 && digitj == 0) return -1;
		return Integer.parseInt(numstr.substring(0, i) + digitj + numstr.substring(i+1, j) + digiti + numstr.substring(j+1));
	}
	
	//Returns a scanner for the file of name fileName
	private static Scanner openFileForReading(String filename)
	{
		Scanner scanner = null;
		try {	scanner = new Scanner(new File(filename));	}
		catch (FileNotFoundException e)
		{
			System.out.println("Could not open " + filename);
			e.printStackTrace();
		}
		return scanner;
	}

	//Returns a writer for a file of name fileName
	private static PrintWriter openFileForWriting(String filename)
	{
		PrintWriter writer = null;
		try {	writer = new PrintWriter(new FileWriter(filename));	}
		catch (IOException e)
		{
			System.out.println("Could not create " + filename);
			e.printStackTrace();
		}
		return writer;
	}

	private static void printTime(long start, long end)
	{
		long time = end - start;
		print("\nTime elapsed: ");
		int seconds = (int)(time/1000000000);
		int minutes = seconds/60;
		seconds%=60;
		int milliseconds = (int)((time/1000000)%1000);
		int microseconds = (int)((time/1000)%1000);
		int nanoseconds = (int)(time%1000);
		if(minutes > 0)			print(minutes + " minutes");
		if(seconds > 0) 		print(seconds + " seconds");
		if(milliseconds > 0)	print(milliseconds + " milliseconds");
		if(microseconds > 0)	print(microseconds + " microseconds");
		if(nanoseconds > 0)		print(nanoseconds + " nanoseconds");
	}
	
	private static void print(Object ob) { System.out.println(ob); }
}
#include<iostream>
#include<cstring>
#include<cstdio>
#include<algorithm>
#include<climits>

using namespace std;

char num[11];
char minNum[11];
char maxNum[11];
/*
    0-9
   48-57
*/
void genMin(int len){

    char minD;
    int minIdx;
    bool done=false;

    for(int i=1;i<len;i++){
        minD=num[i];    minIdx=i;

        for(int j=i+1;j<len;j++){

                if(num[j]<minD){
                    minD=num[j];    minIdx=j;
                }
        }

        if(num[i]!=num[minIdx]){
            minNum[i]=num[minIdx];
            minNum[minIdx]=num[i];
            cout<<minNum<<" ";
            done=true;
            break;
        }
    }

    if(done==false) //then do it
        cout<<minNum<<" ";

}

void genMax(int len){

    char maxD;
    int maxIdx;
    bool done=false;

    for(int i=0;i<len;i++){
            maxD=num[i];    maxIdx=i;

        for(int j=i+1;j<len;j++){

                if(num[j]>=maxD){
                    maxD=num[j];    maxIdx=j;
                }
        }

        if(num[i]!=num[maxIdx]){
            maxNum[i]=num[maxIdx];
            maxNum[maxIdx]=num[i];
            cout<<maxNum<<endl;
            done=true;
            break;
        }
    }

    if(done==false) //then do it
        cout<<maxNum<<endl;

}


int main(){

    int T,len,minIdx,maxIdx;
    char minD,maxD;
    scanf("%d",&T);

    for(int cases=1;cases<=T;cases++){

            //scanf("%s"&num);
            cin>>num;   strcpy(minNum,num); strcpy(maxNum,num);
           // cout<<minNum<<" <==> "<<maxNum<<endl;
            //minNum=num; maxNum=num;
            int len=strlen(num);

            minD=num[0];  minIdx=0;

            for(int i=1;i<len;i++){

                    if(num[i]<=minD && num[i]!='0'){
                        minD=num[i];    minIdx=i;
                    }
            }
            cout<<"Case #"<<cases<<": ";

            if(minIdx!=0){      //make sure 0 doesn't end up at first
                minNum[0]=num[minIdx];
                minNum[minIdx]=num[0];
                cout<<minNum<<" ";
            }
            else{   //min is already at [0]
                    genMin(len);
            }

            /////

            genMax(len);
    }

    return 0;
}

#include<iostream>
#include<string>
#include<algorithm>
#include<queue>

using namespace std;

int main(){
    int num, min, max, minswap, maxswap;
    minswap = maxswap = 0;
    string cur, smin, smax;
    queue<string> solution;
    cin >> num;
    for (int i = 0; i< num; i++){
        cin >> cur;
        int last[10];
        for (int n = 0; n< 10; n++)
            last[n] = -1;
        smin = smax = cur;
        min = cur[0] - '0';
        max = min;
        minswap = maxswap = 0;
        for (int k = 0; k < cur.length(); k++){
            if (last[(cur[k] - '0')] < k)
                last[(cur[k] - '0')] = k;
            if ((cur[k] - '0') > 0){
                if ((cur[k] - '0') > max){
                    max = cur[k] - '0';
                    maxswap = k;
                }
            }
        }
        bool swapped = false;
        for(int j = 0; j < cur.length(); j++){
            if (cur.length() == 1)
                break;
            if (j == 0){
                for (int l = 1; l < 10; l++){
                    if ((cur[j] - '0') > l && last[l] >= j &&last[l]>=0){
                        swap(smin[j], smin[last[l]]);
                        swapped = true;
                        solution.push(smin);
                        break;
                    }
                }
            }
            if (swapped == false && j != 0){
                for (int l = 0; l < 10; l++){
                    if ((cur[j] - '0') > l && last[l] >= j &&last[l]>=0){
                        swap(smin[j], smin[last[l]]);
                        swapped = true;
                        solution.push(smin);
                        break;
                    } 
                }  
            }
        }
        if (swapped == false)
            solution.push(smin);
        bool maxswapped = false;
        int maxcounter = 0;
        while(maxswapped == false && maxcounter < cur.length()){
            if (smax[maxcounter] - '0' < max){
                swap(smax[maxcounter], smax[maxswap]);
                maxswapped = true;
            }
            else{
                maxcounter++;
                max = 0;
                for (int m = maxcounter; m<cur.length(); m++){
                    if ((cur[m] - '0') > max){
                        max = cur[m] - '0';
                        maxswap = m;
                    }
                    
                }
            }
        }
        solution.push(smax);
    }
    int counter = 1;
    while(!solution.empty()){
        cout<<"Case #"<<counter<<": "<<solution.front();
        solution.pop();
        cout<<" "<<solution.front()<<endl;
        solution.pop();
        counter++;
    }

    return 0;
}

#include <iostream>
#include <vector>
#include <fstream>
using namespace std;

vector<int> split(int toSplit) {
	vector<int> list;

	if (toSplit == 0) {
		list.resize(1);
		list[0] = 0;
		return list;
	}

	int remaining = toSplit;
	int size = 0;
	while (remaining > 0) {
		size++; remaining /= 10;
	}

	list.resize(size);
	remaining = toSplit;
	for (int i = size - 1; i >= 0; --i) {
		list[i] = remaining % 10;
		remaining /= 10;
	}

	return list;
}

int combine(vector<int> split) {
	int toReturn = 0;
	for (int i = 0; i < split.size(); ++i) {
		toReturn *= 10;
		toReturn += split[i];
	}
	return toReturn;
}

vector<int> findSwap(vector<int> toSwap, bool larger, bool zero = false) {
	if (toSwap.size() == 0) {
		vector<int> z(1);
		z[0] = 0;
		return z;
	}
	if (toSwap.size() == 1) {
		return toSwap;
	}

	// Find smallest/largest in set...
	int key = toSwap[0];

	if (larger) {
		for (int i = 0; i < toSwap.size(); ++i) {
			if (toSwap[i] > key) key = toSwap[i];
		}
	}
	else {
		for (int i = 0; i < toSwap.size(); ++i){
			if (toSwap[i] < key) {
				if (toSwap[i] == 0 && !zero) {
					continue;
				}
				else {
					key = toSwap[i];
				}
			}
		}
	}

	// If the key is the first element in the set, 
	//  recurse down.
	// Otherwise, 
	if (key == toSwap[0]) {
		vector<int> tr(toSwap.size());
		tr[0] = toSwap[0];
		toSwap.erase(toSwap.begin());
		vector<int> toAppend = findSwap(toSwap, larger, true);
		for (int i = 1; i < tr.size(); i++) {
			tr[i] = toAppend[i - 1];
		}
		return tr;
	}
	else {
		vector<int> tr(toSwap.size());
		tr[0] = key;
		int i = 1;
		bool found = false;
		for (i = 1; i < toSwap.size(); ++i) {
			if (!found && toSwap[i] == key) {
				tr[i] = toSwap[0];
			}
			else {
				tr[i] = toSwap[i];
			}
		}
		return tr;
	}
}

int main() {
	ifstream fin("input.txt");
	ofstream fout("output.txt");

	int nCases = 0;
	fin >> nCases;

	for (int i = 1; i <= nCases; ++i) {
		int input, min, max;
		fin >> input;
		min = -1; max = -1;

		min = combine(findSwap(split(input), false));
		max = combine(findSwap(split(input), true));

		cout << "Input: " << input << ", Min: " << min << ", Max: " << max << endl;
		fout << "Case #" << i << ": " << min << " " << max << endl;
	}

	fin.close();
	fout.close();
}
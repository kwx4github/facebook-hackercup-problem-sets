#include <iostream>

//
//    Program Source:  fb_switchit.cpp
//    Author:          Scarlett J. Davidson
//    Author Email:    scarlett.ibis@gmail.com
//    Date:            1/10/2015


// A is leftmost index, B is righmost index
void swap(std::string& num, int& A, int& B)
{
  // don't swap first digit with 0
  if ((A == 0) && (num[B] == '0'))
    A = A+1;

  char hold = num[A];
  num[A] = num[B];
  num[B] = hold;
  return;
}

// total 
int main ()
{
  int total=0;
  char digit;
  std::cin >> total;

  for (int ln=1; ln <= total; ln++){
    std::string org_num;
    std::string sm_num;
    std::string lg_num; 

    //getnumber
    std::cin >> org_num;

    sm_num = org_num;
    lg_num = org_num;

    int smallest_i = 0;
    int largest_i = 0;

    // Find Largest Number
    if (org_num.length() > 1)
      {
	// Find index if num contains position where
	// digit[curr] < digit[next], mark = curr
	int curr = 0;
	int next = 1;
	int mark = -1;
	int high_i = -1;
	int best_i = -1;
	while (next < lg_num.length())
	  {
	    if (lg_num[curr] < lg_num[next])
	      {
		mark = curr;
		high_i = next;
		break;
	      }
	    ++curr;
	    ++next;
	  }
	//if mark found
	if (mark > -1)
	  {
	    ++next;

	    // find highest val after mark, farthest right
	    while(next < lg_num.length())
	      {
		if (lg_num[next] >= lg_num[high_i])
		  high_i = next;
		++next;
	      }

	    //Find best position to swap (between mark and index 0)
	    best_i = mark;
	    --mark;
	    while( mark >= 0)
	      {
		if (lg_num[mark] >= lg_num[high_i])
		  break;
		best_i = mark;
		--mark;
	      }
	    swap (lg_num, best_i, high_i);
	  }

    
        // Find Smallest Number

	// Find index if num contains position where
	// digit[curr] < digit[next], mark = curr
	curr = 0;
	next = 1;
	mark = -1;
	int small_i = -1;
	best_i = -1;
	while (next < sm_num.length())
	  {
	    if (sm_num[curr] > sm_num[next])
	      {
		mark = curr;
		small_i = next;
		break;
	      }
	    ++curr;
	    ++next;
	  }
	//if mark found
	if (mark > -1)
	  {
	    ++next;

	    // find smallest val after mark, farthest right
	    while(next < sm_num.length())
	      {
		if (sm_num[next] <= sm_num[small_i])
		  small_i = next;
		++next;
	      }

	    //Find best position to swap (between mark and index 0)
	    best_i = mark;
	    --mark;
	    while( mark >= 0)
	      {
		if (sm_num[mark] < sm_num[small_i])
		  break;
		best_i = mark;
		--mark;
	      }
	    swap (sm_num, best_i, small_i);

	  }
      }

    std::cout << "Case #" << ln << ": " << sm_num << " "  << lg_num;
    std::cout << std::endl;
  }
}

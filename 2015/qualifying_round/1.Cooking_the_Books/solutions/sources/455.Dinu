package hackercode;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Locale;
import java.util.StringTokenizer;

/**
 *
 * @author Dinnot
 */
public class HackerCode implements Runnable{

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        new Thread(null, new HackerCode(), "", 256 * (1L << 20)).start();
    }
    
    BufferedReader in;
    PrintWriter out;
    StringTokenizer tok = new StringTokenizer("");
    
    public void run() {
        try {
            long t1 = System.currentTimeMillis();
            in = new BufferedReader(new FileReader("E:\\xampp\\htdocs\\HackerCode\\src\\hackercode\\input.txt"));
            out = new PrintWriter("E:\\xampp\\htdocs\\HackerCode\\src\\hackercode\\output.txt");
            Locale.setDefault(Locale.US);
            int T = readInt();
            for(int i = 0; i < T; i++)
                solve(i+1);
            in.close();
            out.close();
            long t2 = System.currentTimeMillis();
            System.err.println("Time = " + (t2 - t1));
        } catch (Throwable t) {
            t.printStackTrace(System.err);
            System.exit(-1);
        }
    }
    
    String readString() throws IOException {
            while (!tok.hasMoreTokens()) {
                    tok = new StringTokenizer(in.readLine());
            }
            return tok.nextToken();
    }

    int readInt() throws IOException {
            return Integer.parseInt(readString());
    }

    long readLong() throws IOException {
            return Long.parseLong(readString());
    }

    double readDouble() throws IOException {
            return Double.parseDouble(readString());
    }

    // solution

    void solve(int caseNr) throws IOException {
        int n = readInt();
        int len = 0;
        int temp = n;
        while(temp > 0) {
            len++;
            temp /= 10;
        }
        int[] digits_min = new int[len];
        int[] digits_max = new int[len];
        
        temp = n;
        int count = 0;
        while(temp > 0) {
            int d = temp % 10;
            digits_min[count] = d;
            digits_max[count] = d;
            count++;
            temp /= 10;
        }
        
        CalcMin(digits_min, len, false);
        CalcMax(digits_max, len);
        int minNr = 0;
        int maxNr = 0;
        for(int i = len-1; i >= 0; i--) {
            minNr = minNr * 10 + digits_min[i];
            maxNr = maxNr * 10 + digits_max[i];
        }
        out.print("Case #");
        out.print(caseNr);
        out.print(": ");
        out.print(minNr);
        out.print(" ");
        out.println(maxNr);
    }
    
    void CalcMin(int[] digits, int len, boolean allow_zero) {
        if(len == 0)
            return;
        int min = 10;
        int min_pos = -1;
        for(int i = 0; i < len; i++) {
            if(min > digits[i] && (allow_zero || digits[i] != 0)) {
                min = digits[i];
                min_pos = i;
            }
        }
        if(min == digits[len-1]) {
            CalcMin(digits, len-1, true);
        } else {
            digits[min_pos] = digits[len-1];
            digits[len-1] = min;
        }
    }
    
    void CalcMax(int[] digits, int len) {
        if(len == 0)
            return;
        int max = -1;
        int max_pos = -1;
        for(int i = 0; i < len; i++) {
            if(max < digits[i]) {
                max = digits[i];
                max_pos = i;
            }
        }
        if(max == digits[len-1]) {
            CalcMax(digits, len-1);
        } else {
            digits[max_pos] = digits[len-1];
            digits[len-1] = max;
        }
    }
}

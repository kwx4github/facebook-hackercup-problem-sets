#!/usr/bin/python

import sys

class Problem(object):
	def __init__(self,N):
		self.N = N

	def solve(self):
		n_string = [int(x) for x in list(str(self.N))] #list rep of N
		for idx1, num in enumerate(n_string):	#generating the min number
			if idx1 == len(n_string)-1:
				min_list = n_string
				break
			value = n_string[idx1]
			min_val = min(n_string[idx1+1:])
			if idx1 == 0:
				min_val = get_non_zero_min_val(n_string[idx1+1:])
			if min_val >= value:
				continue
			else:
				min_idx = find_latest_idx(n_string,min_val)
				min_list = swap(n_string,idx1,min_idx)
				break
		min_string = ''.join([str(x) for x in min_list])

		for idx1, num in enumerate(n_string): 	#generating the max number
			if idx1 == len(n_string)-1:
				max_list = n_string
				break
			value = n_string[idx1]
			max_val = max(n_string[idx1+1:])
			if max_val <= value:
				continue
			else:
				max_idx = find_latest_idx(n_string,max_val)
				max_list = swap(n_string,idx1,max_idx)
				break
		max_string = ''.join([str(x) for x in max_list])

		return min_string + " "+ max_string
			

def get_non_zero_min_val(seq):
	minimum = 9
	for val in seq:
		if val < minimum and val != 0:
			minimum = val
	return minimum

def find_latest_idx(n_string,min_val):
	for idx, e in enumerate(n_string[::-1]):
		if e == min_val:
			return len(n_string)-idx-1

def swap(l, idx1, idx2):
	out = l[:]
	temp = out[idx1]
	out[idx1] = out[idx2]
	out[idx2] = temp
	return out

def read_input(fpath):
	with open(fpath,'r') as fstream:
		content = []
		lines = [x.strip('\n') for x in fstream.readlines()]
		T = int(lines[0])
		for prblm_idx in xrange(T):
			content.append(Problem(int(lines[1+prblm_idx])))
		return content
			

if __name__=="__main__":

	fpath = sys.argv[1]

	problems = read_input(fpath)

	for idx,problem in enumerate(problems):
		print "Case #"+str(idx+1)+": "+problem.solve()



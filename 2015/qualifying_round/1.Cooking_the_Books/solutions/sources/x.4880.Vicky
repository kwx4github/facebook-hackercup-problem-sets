package com.facebook;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class ProblemMain {
	public static void main(String []args) throws IOException {
		int casenum = 1;
		BufferedReader br = new BufferedReader(new FileReader(new File(args[0])));
		String number = br.readLine();
		number = number.trim();
		while ((number = br.readLine()) != null) {
 			System.out.println("Case #"+ casenum+": " + findIndexOfSmallestNumber(number) + " " + findIndexOfLargestNumber(number));			
			++casenum;
		}
		
		br.close();	
	}
	

	static int findIndexOfLargetDigit(String number, int init) 
	{
		Integer digits[] = new Integer[number.length()];
		for (int index = 0; index < number.length(); ++index) {
			String s = "" + number.charAt(index);
			digits[index] = new Integer(s);
		}
		
		int end = init == 0 ? 1 : 0;
		for (int i = 9 ; i >= end; --i) {
			for (int index = digits.length - 1; index >= 0; --index) {
				if (i == digits[index].intValue() ) {
					return index;
				}
			}
		}
		return -1;
	}
	
	
	static int findIndexOfSmallestDigit(String number , int init) 
	{
		Integer digits[] = new Integer[number.length()];
		for (int index = 0; index < number.length(); ++index) {
			String s = "" + number.charAt(index);
			digits[index] = new Integer(s);
		}
		int start = init == 0 ? 1 : 0;
		for (int i = start ; i < 10; ++i) {
			for (int index = 0; index < digits.length; ++index) {
				if (i == digits[index].intValue()) {
					return index;
				}
			}
		}
		return -1;
	}
	
	static String findIndexOfSmallestNumber(String number) 
	{
		int digits[] = new int[number.length()];
		for (int index = 0; index < number.length(); ++index) {
			String s = "" + number.charAt(index);
			digits[index] = new Integer(s);
		}
		for (int i = 0 ; i < digits.length; ++i) {
			int valLeft = digits[i];
			for (int index = i + 1; index < digits.length; ++index) {
				
				if (valLeft > digits[index]){
					int indexSmall = findIndexOfSmallestDigit(number.substring(i + 1) , i); 
					if (indexSmall != -1 ) {
						digits[i] = digits[indexSmall + i + 1];
						digits[indexSmall + i + 1] = valLeft;
					}
					String newNumber = "";
					for (int num : digits){
						newNumber += num;
					}
					return newNumber;
				}
			}	
		}
		
		return number;
				
	}
	
	
	static String findIndexOfLargestNumber(String number) 
	{
		int digits[] = new int[number.length()];
		for (int index = 0; index < number.length(); ++index) {
			String s = "" + number.charAt(index);
			digits[index] = new Integer(s);
		}
		for (int i = 0 ; i < digits.length; ++i) {
			int valLeft = digits[i];
			for (int index = i + 1; index < digits.length; ++index) {
				
				if (valLeft < digits[index]){
					int indexSmall = findIndexOfLargetDigit(number.substring(i + 1) , i); 
					if (indexSmall != -1 ) {
						digits[i] = digits[indexSmall + i + 1];
						digits[indexSmall + i + 1] = valLeft;
					}
					String newNumber = "";
					for (int num : digits){
						newNumber += num;
					}
					return newNumber;
				}
			}	
		}
		
		return number;
				
	}
}
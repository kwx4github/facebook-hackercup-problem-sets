import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;


public class First {

	public static void main(String[] args) throws IOException{
		int readNumberOfLines = 0;
		
		File inFile = new File("src/cooking_the_books.txt");
		File outputFile = new File("src/cooking_the_books_output.txt");
		FileWriter fWriter = new FileWriter(outputFile);
		PrintWriter pWriter = new PrintWriter(fWriter);
		
		Scanner sc = new Scanner(inFile);
		
		//Get the number of lines that should be read. 
		if(sc.hasNextLine()){
			readNumberOfLines  = Integer.parseInt(sc.nextLine());
		}
		
		int caseNumber = 1;
		while(readNumberOfLines > 0 && sc.hasNextLine()){
			String line = sc.nextLine();
			char[] numChar = line.toCharArray();
			char[] smallest0 = (char[]) numChar.clone();
			char[] largest0 = (char[]) numChar.clone();
			char[] smallest1 = (char[]) numChar.clone();
			char[] largest1 = (char[]) numChar.clone();
			if(numChar.length >= 2){
				int smallValPosition = 0;
				int largeValPosition = 0;
				
				for(int i =1; i<numChar.length; i++){
					if(numChar[i] != '0' && numChar[i] <= numChar[smallValPosition]){
						smallValPosition = i;
					}
					
					if(numChar[i] > numChar[largeValPosition]){
						largeValPosition = i;
					}
					
				}
				
				//Swap for the smallest with position 0
				char smallTemp = smallest0[0];
				smallest0[0] = smallest0[smallValPosition];
				smallest0[smallValPosition] = smallTemp;
				
				//Swap for the largest with position 0
				char largeTemp = largest0[0];
				largest0[0] = largest0[largeValPosition];
				largest0[largeValPosition] = largeTemp;
				
				
				//swap for the smallest with smallest and largest values
				smallTemp = smallest1[largeValPosition];
				smallest1[largeValPosition] = smallest1[smallValPosition];
				smallest1[smallValPosition] = smallTemp;
				
				//swap for the largest with the largest and smallest values
				largeTemp = largest1[smallValPosition];
				largest1[smallValPosition] = largest1[largeValPosition];
				largest1[largeValPosition] = largeTemp;
			}
			
			int cmpValue;
			//Get the smallest value
			String small0 = new String(smallest0);
			String small1 = new String(smallest1);
			String smallest;
			cmpValue = small0.compareTo(small1);
			if(cmpValue <= 0){
				smallest = small0;
			}
			else{
				smallest = small1;
			}
			//Get the largest value
			String large0 = new String(largest0);
			String large1 = new String(largest1);
			String largest;
			cmpValue = large0.compareTo(large1);
			if(cmpValue >= 0){
				largest = large0;
			}
			else{
				largest = large1;
			}
			
			
			pWriter.println("Case #" + caseNumber + ": " + smallest + " " + largest);
			
			caseNumber++;
			readNumberOfLines--;
		}
		
		pWriter.close();
		sc.close();
	}
	
	
	
}

// Round 1A 2012
// Problem X.

#ifdef _MSC_VER
	#define _CRT_SECURE_NO_WARNINGS
#endif

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <iostream>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <deque>
#include <vector>
#include <algorithm>
#include <iterator>
#include <cassert>

using namespace std;

typedef unsigned long long llong;
typedef long double ldouble;
typedef pair<int, int> pint;
typedef pair<double, double> pdouble;
typedef vector<int> vint;
typedef vint::iterator vit;
typedef vector<double> vdouble;
typedef vdouble::iterator vdit;
typedef vector<ldouble> vldouble;
typedef vector<string> vstring;
typedef vector<llong> vllong;
typedef vector<vint> graph;

#define FOR(v,p,k) for(int v=p;v<=k;++v)
#define FORD(v,p,k) for(int v=p;v>=k;--v)
#define REP(i,n) for(int i=0;i<(n);++i)
#ifdef _MSC_VER
	#define VAR(v,i) auto v=(i)
#else
	#define VAR(v,i) __typeof(i) v=(i)
#endif
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define SIZE(x) (int)x.size()
#define ALL(c) c.begin(),c.end()

#define ADD_EDGE(g,u,v) g[u].push_back(v),g[v].push_back(u)

#define ST first
#define ND second
#define INF 1000000000
#define INFL 1000000000000000000LL
#define EPS 1e-5

void solve(string &A, string &low, string &high)
{
	low = high = A;
	if(A.length() == 1)
		return;

	vint right(10, -1);
	for(int i = A.length() - 1; i >= 0; i--)
		if(right[A[i] - '0'] < 0)
			right[A[i] - '0'] = i;
	
	bool found = false;
	for(int i = 0; i < A.length() && !found; i++)
		for(int n = 9; n > A[i] - '0'; n--)
			if(i < right[n])
			{
				found = true;
				swap(high[i], high[right[n]]);
				break;
			}

	found = false;
	for(int i = 0; i < A.length() && !found; i++)
		for(int n = 0; n < A[i] - '0'; n++)
			if(i < right[n] && (i != 0 || n != 0))
			{
				found = true;
				swap(low[i], low[right[n]]);
				break;
			}
}

int main()
{
	int T;
	
	cin >> T;
	REP(t, T)
	{
		string N, low, high;
		cin >> N;
		
		solve(N, low, high);
		
		printf("Case #%d: %s %s\n", t + 1, low.c_str(), high.c_str());
	}
	
	return 0;
}

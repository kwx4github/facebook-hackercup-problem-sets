# read the data first
# record total account number ass first line
# this is a problem testing the order of swapping the digit
# SO split the string type of the number
# and run a O(NlogN) algo to permutate them
# then rejoint them
# but if there exist a 0, then swap it with the least digit


# required library
import copy

# read the data
dataPath = "data/cooking_the_books.txt"
openMode = "r"
nAccounts = 0
lines = []
# openEncoding = "UTF-8"
with open(dataPath, openMode) as f:
    idx = 0
    for line in f:
        # read the string as seperate char,
        # and convert to interger
        if idx is 0:
            nAccounts = int(line.rstrip())
            idx = idx + 1
        else:
            lines.append( list(map(int, line.rstrip())) )

# compare to enumerate [google]
minAccounts = []
maxAccounts = []
for i in range( len(lines) ):
    # magic number that make sure max and min are ok dealing initial case
    maxNum = -1
    maxIdx = 0
    minNum = 10
    minIdx = 0
    maxAccount = []
    minAccount = []
    # actually, two condition check can seperate to two loop
    for j in range( len(lines[i]) ):
        if lines[i][j] > maxNum:
            maxNum = lines[i][j]
            maxIdx = j
        if (lines[i][j] < minNum) and (lines[i][j] is not 0):
            minNum = lines[i][j]
            minIdx = j

    maxAccount = copy.deepcopy(lines[i])
    for (k, e) in enumerate(maxAccount):
        maxAccount[k] = str(e)
    maxAccount[0], maxAccount[maxIdx] = maxAccount[maxIdx], maxAccount[0]
    
    minAccount = copy.deepcopy(lines[i])
    for (k, e) in enumerate(minAccount):
        minAccount[k] = str(e)
    minAccount[0], minAccount[minIdx] = minAccount[minIdx], minAccount[0]

    maxAccounts.append(maxAccount)
    minAccounts.append(minAccount)


# output file
outputPath = "data/acc.output"
writeMode = "w+"

with open(outputPath, writeMode) as f:
    for i in range(len(maxAccounts)):
        leading = ["Case",  "#" + str(i+1) + ":"]
        minAcc = "".join(minAccounts[i])
        maxAcc = "".join(maxAccounts[i])
        output = leading + [minAcc] + [maxAcc]
        output =  " ".join(output)
        f.write(output)
        f.write("\n")
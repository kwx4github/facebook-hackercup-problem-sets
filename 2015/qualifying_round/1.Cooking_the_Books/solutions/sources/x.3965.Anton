import java.io.{File, PrintWriter, FileReader, BufferedReader}
import java.util.StringTokenizer

object Solver {
  import IO._
  def swap(ca: Array[Char], i: Int, j: Int) {
    val t = ca(i)
    ca(i) = ca(j)
    ca(j) = t
  }

  def solve() {
    val ca = nt.toCharArray
    val n = ca.length

    val ls = (for {
      i <- 0 until n
      j <- (i + 1) until n
      if ca(j) != '0'
    } yield {
      swap(ca, i, j)
      val ns = new String(ca)
      swap(ca, i, j)
      ns.toInt
    }) :+ new String(ca).toInt

    prln(s"${ls.min} ${ls.max}")
  }
}

object CookingTheBooks extends App {
  import IO._
  import Solver._
  val T = ni
  for (i <- 1 to T) {
    pr(s"Case #$i: ")
    solve()
  }
  close()
}

object IO {
  val br = new BufferedReader(new FileReader("cooking_the_books.txt"))
  val pw = new PrintWriter(new File("cooking_the_books_output.txt"))
  var st : StringTokenizer = null
  def nt = {
    while (st == null || !st.hasMoreTokens) st = new StringTokenizer(br.readLine())
    st.nextToken()
  }

  def ni = nt.toInt
  def prln(s: Object) { pw.println(s) }
  def pr(s: Object) { pw.print(s) }
  def close() { pw.close() ; br.close() }
}

// Author: Kai Zhao

#include <iostream>
#include <string>

// Declaration
using std::cin;
using std::cout;
using std::endl;
using std::string;


// Defines
#define MAX_SIZE 21


// Global variables
string input;
string small;
string big;

void Clear()
{

}

void Run()
{
  bool has_find_small = false;
  bool has_find_big = false;
  
  small = input;
  big = input;

  for (int i = 0; i < input.size(); ++i)
  {
    const int pos_guard = i;
    const int value_guard = input[i] - '0';

    int pos_small = i;
    int pos_big = i;

    int value_small = value_guard;
    int value_big = value_guard;

    // Traverse
    for (int j = i + 1; j < input.size(); ++j)
    {
      const int value = input[j] - '0';

      if (value_guard != value && value_small >= value)
      {
	if (0 == i && 0 == value)
        {
	  // Ignore it
	}
	else
        {
	  value_small = value;
	  pos_small = j;
	}
      }

      if (value_guard != value && value_big <= value)
      {
	value_big = value;
	pos_big = j;
      }
    }

    if (!has_find_big)
    {
      if (pos_guard != pos_big)
      {
	// Find big

	big[pos_guard] = input[pos_big];
	big[pos_big] = input[pos_guard];
	
	has_find_big = true;
      }
    }

    if (!has_find_small)
    {
      // value_small = 1
      if (pos_guard != pos_small)
      {
	// Find small
	small[pos_guard] = input[pos_small];
	small[pos_small] = input[pos_guard];

	has_find_small = true;
      }
    }

    if (has_find_small && has_find_big)
      break;
  }
}  

int main()
{
  int T;
  cin >> T;

  for (int i = 1; i <= T; ++i)
  {
    cin >> input;

    Clear();

    Run();

    cout << "Case #" << i << ": " << small << " " << big << endl;
  }
  
  return 0;
}

//wawando's template

#include <iostream>
#include <string>
#include <fstream>
#include <functional>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <list>
#include <set>
#include <utility>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>  //clock_t , clock() , CLOCKS_PER_SEC
#include <cstring>
#include <cctype>
#include <climits> // LLONG_MAX , LLONG_MIN , INT_MAX , INT_MIN

//MACROS
#define pb              push_back
#define mp              make_pair
#define INF             1000000000     //1 billion safer for floyd warshall, avoid overflow
		
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;

int getInteger(char str[]){
	int res;
	sscanf(str,"%d",&res);
	return res;
}

int findMin(int num, char s[]){
	int len = strlen(s);
	int ans = num;
	for(int i = 0; i < len-1; i++)
		for(int j = i+1; j < len; j++){
			char sCur[20];
			strcpy(sCur, s);
			if(i == 0 && sCur[j] == '0')
				continue;
			char temp = sCur[i];
			sCur[i] = sCur[j];
			sCur[j] = temp;
			int cur = getInteger(sCur);
			ans = min(ans,cur);
		}
	return ans;
}

int findMax(int num, char s[]){
	int len = strlen(s);
	int ans = num;
	for(int i = 0; i < len-1; i++)
		for(int j = i+1; j < len; j++){
			char sCur[20];
			strcpy(sCur, s);
			if(i == 0 && sCur[j] == '0')
				continue;
			char temp = sCur[i];
			sCur[i] = sCur[j];
			sCur[j] = temp;
			int cur = getInteger(sCur);
			ans = max(ans,cur);
		}
	return ans;
}

int TC,caseNo=1;

int main() {
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	//ios::sync_with_stdio(false);
	scanf("%d\n",&TC);
	while(TC--){
		char sN[20];
		int N,minimum,maximum;

		gets(sN);
		N = getInteger(sN);
		if(N <= 11){
			minimum = N;
			maximum = N;
		}
		else{
			minimum = findMin(N,sN);
			maximum = findMax(N,sN);
		}
		printf("Case #%d: %d %d\n",caseNo++, minimum, maximum);
	}	
    return 0;
}

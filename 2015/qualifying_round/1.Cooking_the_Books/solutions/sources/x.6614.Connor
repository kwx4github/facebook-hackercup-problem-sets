import java.util.Scanner;
import java.io.FileReader;
import java.io.IOException;

public class CookBooks {
    static final String filename = "cooking_the_books.txt";
    
    public static void main(String args[]) throws IOException {
        Scanner reader = new Scanner(new FileReader(filename));
        int numCases = reader.nextInt();

        for(int i = 0; i < numCases; ++i) {
            long number = reader.nextLong();
            System.out.print("Case #" + (i+1) + ": ");
            doCase(number);
        }

        reader.close();
    }

    private static void doCase(long l) {
        System.out.println( getSmallest(l) + " " + getLargest(l) );
    }

    private static String getSmallest(long l) {
        // Swap first digit with the smallest non-zero digit
        // if the first digit is the smallest digit, move on to the next digit
        char[] numStr = Long.toString(l).toCharArray();
        if(numStr.length == 1) { return new String(numStr); }
        int smallest = indexOfSmallestNonZeroDigit(l);
        if(smallest == 0) {
            // Do something hard
            long firstDigitRemoved = stripLeadingDigit(l);
            return numStr[0] + getSmallestWithLeadingZero(firstDigitRemoved);
        } else {
            // swap digits
            numStr[smallest] ^= numStr[0];
            numStr[0] ^= numStr[smallest];
            numStr[smallest] ^= numStr[0];
            return new String(numStr);
        }

    }

    private static String getSmallestWithLeadingZero(long l) {
        char[] numStr = Long.toString(l).toCharArray();
        int smallest = indexOfSmallestDigit(l);
        if(numStr.length == 1) { return new String(numStr); }
        if(smallest == 0) {
            long firstDigitRemoved = stripLeadingDigit(l);
            return numStr[0] + getSmallestWithLeadingZero(firstDigitRemoved);
            // Do something hard
            
        } else {
            // swap digits
            numStr = Long.toString(l).toCharArray();
            numStr[smallest] ^= numStr[0];
            numStr[0] ^= numStr[smallest];
            numStr[smallest] ^= numStr[0];
        }

        return new String(numStr);
    }

    private static String getLargest(long l) {
        // Swap first digit with the largest digit
        // if the first digit is the largest digit, move on to the next digit
        char[] numStr = Long.toString(l).toCharArray();
        if(numStr.length == 1) { return new String(numStr); }
        int largest = indexOfLargestDigit(l);
        if(largest == 0) {
            long firstDigitRemoved = stripLeadingDigit(l);
            return numStr[0] + getLargest(firstDigitRemoved);
            // Do something hard
        } else {
            numStr = Long.toString(l).toCharArray();
            numStr[largest] ^= numStr[0];
            numStr[0] ^= numStr[largest];
            numStr[largest] ^= numStr[0];
        }

        return new String(numStr);
    }

    private static int indexOfSmallestDigit(long l) {
        String s = Long.toString(l);
        int indexOfMinDigit = 0;
        for(int i = 0; i < s.length(); ++i) {
            if(s.charAt(i) < s.charAt(indexOfMinDigit)) {
                indexOfMinDigit = i;
            }
        }
        return indexOfMinDigit;
    }

    private static int indexOfSmallestNonZeroDigit(long l) {
        String s = Long.toString(l);
        int indexOfMinDigit = 0;
        for(int i = 0; i < s.length(); ++i) {
            if(s.charAt(i) < s.charAt(indexOfMinDigit) && s.charAt(i) != '0' ) {
                indexOfMinDigit = i;
            }
        }
        return indexOfMinDigit;
    }

    private static int indexOfLargestDigit(long l) {
        String s = Long.toString(l);
        int indexOfMaxDigit = 0;
        for(int i = 0; i < s.length(); ++i) {
            if(s.charAt(i) > s.charAt(indexOfMaxDigit)) {
                indexOfMaxDigit = i;
            }
        }
        return indexOfMaxDigit;
    }

    private static long stripLeadingDigit(long l) {
        String s = Long.toString(l);
        s = s.substring(1);
        return Long.parseLong(s);
    }


}

#include <algorithm>
#include <cstdio>
#include <stdint.h>
#include <vector>

void print_vec(const std::vector<int>& digits) {
	for (int d : digits) {
		printf("%d", d);
	}
}

// Copy of the vector to allow mutations.
void max_num(std::vector<int> digits, int pre[10]) {
	for (int ix = 0; ix < digits.size(); ++ix) {
		int pos = -1;
		int max = 0;
		for (int jx = ix + 1; jx < digits.size(); ++jx) {
			if (digits[ix] < digits[jx]) {
				if (digits[jx] >= max) {
					max = digits[jx];
					pos = jx;
				}
			}
		}
		if (pos >= 0) {
			std::swap(digits[ix], digits[pos]);
			break;
		}
	}
	print_vec(digits);
}

void min_num(std::vector<int> digits, int pre[10]) {
	for (int ix = 0; ix < digits.size(); ++ix) {
		int pos = -1;
		int min = 10;
		for (int jx = ix + 1; jx < digits.size(); ++jx) {
			if (digits[ix] > digits[jx] && (ix != 0 || digits[jx] != 0)) {
				if (digits[jx] <= min) {
					min = digits[jx];
					pos = jx;
				}
			}
		}
		if (pos >= 0) {
			std::swap(digits[ix], digits[pos]);
			break;
		}
	}
	print_vec(digits);
}

int main() {
	int T;
	scanf("%d", &T);
	for (int ix = 0; ix < T; ++ix) {
		uint64_t N;
		scanf("%llu", &N);
		printf("Case #%d: ", ix + 1);
		std::vector<int> digits;
		int pre[10];
		if (N == 0) { digits.push_back(0); }
		while (N > 0) {
			digits.push_back(N % 10);
			++pre[digits.back()];
			N = N / 10;
		}
		std::reverse(digits.begin(), digits.end());
		min_num(digits, pre);
		printf(" ");
		max_num(digits, pre);
		printf("\n");
	}
	return 0;
}

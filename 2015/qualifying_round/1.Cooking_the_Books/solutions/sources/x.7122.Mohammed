package problem_1;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;

public class CookingTheBooks {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader("inputFile.txt"));
		BufferedWriter bw = new BufferedWriter(new FileWriter("outputFile.txt"));
		//read Number of test cases
		int t = Integer.parseInt(br.readLine());
		StringBuffer out = new StringBuffer("");
		CookingTheBooks ctb = new CookingTheBooks();
		for(int i = 1; i <= t; i++)
		{
			int n = Integer.parseInt(br.readLine());
			int minValue = ctb.findMinimumSwapValue(n);
			int maxValue = ctb.findMaximumSwapValue(n);
			out.append("Case #" + i + ": " + minValue + " " + maxValue + System.lineSeparator());
			//bw.write("ts " + t + " " + minValue + " " + maxValue+"\n");
		}
		//System.out.println(out);
		bw.write(out.toString(), 0, out.length() - 1);
		bw.close();
	}

	private int findMaximumSwapValue(int n) {
		// TODO Auto-generated method stub
		String s = "" + n;
		char [] charArray = s.toCharArray();
		if(s.length() == 1)
		{
			return n;
		}
		else
		{
			if(charArray[0] == 9)
			{
				return n;
			}
			else
			{
				char firstDigit = charArray[0];
				char maxValuedCharacter = charArray[0];
				int position = 0;
				/*
				for(int i=1; i < s.length(); i++)
				{
					if(charArray[i] > charArray[0])
					{
						maxValuedCharacter = charArray[i];
						position = i;
						break;
					}
				}
				*/
				MinMaxFinder mx = new MinMaxFinder(charArray);
				mx.computeMaximum();
				maxValuedCharacter = mx.getMaxValue();
				position = mx.getMaxValuePosition();
				if(position == 0)
				{
					return n;
				}
				else
				{
					charArray[position] = firstDigit;
					charArray[0] = maxValuedCharacter;
				}
				String str = new String(charArray);
				//System.out.println(str);
				return Integer.parseInt(str);
			}
		}
	}

	private int findMinimumSwapValue(int n) {
		// TODO Auto-generated method stub
		String s = "" + n;
		char [] charArray = s.toCharArray();
		if(s.length() == 1)
		{
			return n;
		}
		else
		{
			if(charArray[0] == 1)
			{
				return n;
			}
			else
			{
				char firstDigit = charArray[0];
				char minValuedCharacter = charArray[0];
				int position = 0;
				/*
				for(int i=1; i < s.length(); i++)
				{
					if(charArray[i] > charArray[0])
					{
						maxValuedCharacter = charArray[i];
						position = i;
						break;
					}
				}
				*/
				MinMaxFinder mx = new MinMaxFinder(charArray);
				mx.computeMinimum();
				minValuedCharacter = mx.getMinValue();
				position = mx.getMinValuePosition();
				if(position == 0)
				{
					return n;
				}
				else
				{
					charArray[position] = firstDigit;
					charArray[0] = minValuedCharacter;
				}
				String str = new String(charArray);
				//System.out.println(str);
				return Integer.parseInt(str);
			}
		}
	}

}
class MinMaxFinder
{
	private char minValue;
	private char maxValue;
	private int minValuePosition;
	private int maxValuePosition;
	private char [] charArray;
	public MinMaxFinder(char [] cArray)
	{
		charArray = cArray;
	}
	public char getMinValue() {
		return minValue;
	}
	public char getMaxValue() {
		return maxValue;
	}
	public int getMinValuePosition() {
		return minValuePosition;
	}
	public int getMaxValuePosition() {
		return maxValuePosition;
	}
	public void computeMinimum()
	{
		char min = charArray[0];
		int pos = 0;
		for(int i = 1; i < charArray.length; i++)
		{
			if(charArray[i] < min && charArray[i] != '0')
			{
				min = charArray[i];
				pos = i;
			}
		}
		minValue = min;
		minValuePosition = pos;
	}
	public void computeMaximum()
	{
		char max = charArray[0];
		int pos = 0;
		for(int i = charArray.length - 1; i > 0; i--)
		{
			if(charArray[i] > max)
			{
				max = charArray[i];
				pos = i;
			}
		}
		maxValue = max;
		maxValuePosition = pos;
	}
}

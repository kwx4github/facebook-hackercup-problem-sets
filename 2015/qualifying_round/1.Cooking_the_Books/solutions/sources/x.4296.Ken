/**
 * 
 */
package algorithm;

import java.util.Scanner;

/**
 * @author qili
 * 
 */
public class CookingTheBook {

	int i = 0;
	int N = 0;
	int[] array = new int[9];
	int[] stack = new int[9];

	public String run(int i) {
		this.i = i;
		int tmp = i;
		N = 0;
		// parse the input to store the digits
		while (tmp != 0) {
			stack[N++] = (tmp % 10);
			tmp = tmp / 10;
		}
		// copy the big endian order
		for (int j = 0; j < N; j++)
			array[j] = stack[N - j - 1];
		int maxD = 0;
		int maxIdx = -1;
		int minD = 10;
		int minIdx = -1;
		boolean startMaxSearch = false;
		boolean startMinSearch = false;
		if (N <= 1)
			return i + " " + i;

		// pop the stack and save them into the array, and get max/min meanwhile
		int idx = 0;
		int previous = array[0];
		while (++idx < N) {
			tmp = array[idx];
			// update max
			if (tmp > previous && !startMaxSearch) {
				startMaxSearch = true;
				maxD = tmp;
				maxIdx = idx;
			}
			if (startMaxSearch && tmp > maxD) {
				maxD = tmp;
				maxIdx = idx;
			}
			// update min, ignore 0
			if (tmp < previous && !startMinSearch && tmp != 0) {
				startMinSearch = true;
				minD = tmp;
				minIdx = idx;
			}
			if (startMinSearch && tmp < minD && tmp != 0) {
				minD = tmp;
				minIdx = idx;
			}
			if (tmp != 0)
				previous = tmp;
			// System.out.println(maxD + "," + maxIdx + " - " + minD + "," +
			// minIdx);
		}
		int max = 0;
		if (maxIdx > 0) {
			int swapMaxIdx = 0;
			boolean swapped = false;
			for (int t = 0; t < N; t++) {
				if (array[t] < maxD && !swapped) {
					max = max * 10 + maxD;
					swapMaxIdx = t;
					swapped = true;
				} else if (t == maxIdx)
					max = max * 10 + array[swapMaxIdx];
				else
					max = max * 10 + array[t];
			}
		} else {
			max = i;
		}

		int min = 0;
		if (minIdx > 0) {
			int swapMinIdx = 0;
			boolean swapped = false;
			for (int t = 0; t < N; t++) {
				if (array[t] > minD && !swapped) {
					min = min * 10 + minD;
					swapMinIdx = t;
					swapped = true;
				} else if (t == minIdx)
					min = min * 10 + array[swapMinIdx];
				else
					min = min * 10 + array[t];
			}
		} else
			min = i;

		return min + " " + max;

	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		CookingTheBook cook = new CookingTheBook();
		int T = Integer.parseInt(s.nextLine());
		for (int i = 0; i < T; i++) {
			int input = Integer.parseInt(s.nextLine());
			System.out.println("Case #" + (i + 1) + ": " + cook.run(input));
		}

	}

}

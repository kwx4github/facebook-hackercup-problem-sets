#include <iostream>
#include <vector>
template <typename T>
class irange {
    public:
        class iterator {
            public:
                iterator(T value) : value(value), step(1) {}
                iterator(T value, T step) : value(value), step(step) {}
                bool operator != (const iterator & other) const {
                    return value != other.value;
                }
                T const & operator * () const {
                    return value;
                }
                iterator & operator ++ () {
                    value += step;
                    return *this;
                }
            private:
                T value;
                T step;
        };
    public:
        irange(T last) : first(0), last(last), step(1) {}
        irange(T first, T last) : first(first), last(last), step(1) {}
        irange(T first, T last, T step) : first(first), last(last), step(step) {}
        iterator begin() const {
            return iterator(first, step);
        }
        iterator end() const {
            return iterator(first + ((last - first + step + (0 <= step ? -1 : 1)) / step) * step, step);
        }
    private:
        T const first;
        T const last;
        T const step;
};
irange<int> range(int last) { return irange<int>(last); }
irange<int> range(int first, int last) { return irange<int>(first, last); }
irange<int> range(int first, int last, int step) { return irange<int>(first, last, step); }
template <typename T> irange<int> index(const T & a) { return irange<int>(a.size()); }
irange<int> range(std::istream & input) { int i; input >> i; return range(i); }
using namespace std;
string swap(string s, int i, int j) {
    swap(s[i], s[j]);
    return s;
}
string smallest(const string & s) {
    if (s == "0") return s;
    int a = 0;
    while (a < s.length()) {
        int b = a;
        for (auto i : range(a,s.length())) {
            if (s[i] <= s[b] and not (a == 0 and s[i] == '0')) b = i;
        }
        if (not (a == 0 and s[b] == '0') and s[a] != s[b]) return swap(s,a,b);
        a += 1;
    }
    return s;
}
string largest(const string & s) {
    if (s == "0") return s;
    int a = 0;
    while (a < s.length()) {
        int b = a;
        for (auto i : range(a,s.length())) {
            if (s[b] <= s[i]) b = i;
        }
        if (s[a] != s[b]) return swap(s,a,b);
        a += 1;
    }
    return s;
}
int main() {
    ios_base::sync_with_stdio(false);
    for (auto case_i : range(cin)) {
        string s; cin >> s;
        cout << "Case #" << case_i+1 << ": " << smallest(s) << " " << largest(s) << endl;
    }
    return 0;
}

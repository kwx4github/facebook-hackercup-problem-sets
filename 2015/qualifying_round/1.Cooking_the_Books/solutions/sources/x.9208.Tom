#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <fstream>

std::string makeLargest(std::vector<char> holder)
{
	int tempBig=0;
	std::string returnString;
	for (int j = 1; j<holder.size(); j++)
	{
		if ( holder[j] > holder[0] && holder[j] > holder[tempBig])
			tempBig = j;
	}
	std::swap (holder[0] , holder[tempBig]);
	for (int j = 0; j<holder.size(); j++)
	{
		returnString += holder[j];
	}
	return returnString;
}

std::string makeSmallest(std::vector<char> holder)
{
	int tempSmall=0;
	std::string returnString;
	for (int j = 1; j<holder.size(); j++)
	{
		if ( holder[j] < holder[0] && holder[j] < holder[tempSmall] && holder[j] != '0')
			tempSmall = j;
	}
	std::swap (holder[0] , holder[tempSmall]);
	for (int j = 0; j<holder.size(); j++)
	{
		returnString += holder[j];
	}
	return returnString;
}

int main()
{
	std::ofstream myoutfile ("output.txt");
	if (myoutfile.is_open())
	{

		std::string numString;
		int count = 1;
		std::vector<char> holder; 
		std::ifstream myinfile ("cooking_the_books.txt");
		if (myinfile.is_open())
		{
			while ( std::getline (myinfile,numString) )
			{

				
				if (numString.size() < 10 && count < 101)
				{

					for (int j = 0; j<numString.size(); j++)
					{
						holder.push_back(numString[j]);
					}
					myoutfile << "Case #" << count << ": "; 
					myoutfile << makeSmallest(holder);
					myoutfile << " ";
					myoutfile << makeLargest(holder);
					myoutfile << std::endl;
					count++;
				}
				numString.clear();
				holder.clear();
			}
			myinfile.close();
		}
		else std::cout << "Unable to open in file"; 
		myoutfile.close();
	}
	else std::cout << "Unable to open out file";
	return 0;

}


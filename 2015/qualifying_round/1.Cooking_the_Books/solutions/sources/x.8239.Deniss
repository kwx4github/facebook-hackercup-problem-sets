// node example.js input.io > output.io

var fs = require('fs');
var log = console.log;

function Cooking(data) {

    this.data = data;

    this.init = function () {

        // For each cases
        for (var i = 1; i <= this.data[0]; i++) {
            this.swapNumbers(
                i,
                this.data[i]
            );
        }

    };

    /**
     * Start swapping
     * @param {number} test
     * @param {string} text
     */
    this.swapNumbers = function (test, text) {

        var min = this.swapMinimum(text);
        var max = this.swapMaximum(text);

        log('Case #' + test + ': ' + min.join('') + ' ' + max.join(''));

    };

    /**
     * Swap minimum numbers
     * @param {string} text
     * @return {Array.<number>}
     */
    this.swapMinimum = function (text) {

        var numbers = text.split('').map(Number);
        var numMin = numbers[0];
        var posMin = 0;
        var posMax = null;

        // Find last minimum
        for (var i = 0; i < numbers.length; i++) {

            if (numMin >= numbers[i]) {
                posMin = i;
                numMin = numbers[i];
            }

        }

        if (!posMin) {
            return numbers;
        }

        i = numbers.length - 1;

        // Find first bigger
        for (var j = 0; j < i; j++) {

            if (!numMin && !j) {
                continue;
            }

            if (numMin < numbers[j]) {
                posMax = j;
                break;
            }
        }

        if (posMax === null) {
            return numbers;
        }

        numbers[posMin] = numbers[posMax];
        numbers[posMax] = numMin;

        return numbers;
    };

    /**
     * Swap maximum numbers
     * @param {string} text
     * @return {Array.<number>}
     */
    this.swapMaximum = function (text) {

        var numbers = text.split('').map(Number);
        var numMax = numbers[0];
        var posMax = 0;
        var posMin = null;

        // Find last minimum
        for (var i = 0; i < numbers.length; i++) {

            if (numMax <= numbers[i]) {
                posMax = i;
                numMax = numbers[i];
            }

        }

        if (!posMax) {
            return numbers;
        }

        i = numbers.length - 1;

        // Find first bigger
        for (var j = 0; j < i; j++) {

            if (numMax > numbers[j]) {
                posMin = j;
                break;
            }
        }

        if (posMin === null) {
            return numbers;
        }

        numbers[posMax] = numbers[posMin];
        numbers[posMin] = numMax;

        return numbers;
    };

    this.init();

}

// Read file
fs.readFile(process.argv[2], 'utf8', function (error, data) {

    if (error) {
        throw (error);
    }

    new Cooking(data.split("\n"));

});




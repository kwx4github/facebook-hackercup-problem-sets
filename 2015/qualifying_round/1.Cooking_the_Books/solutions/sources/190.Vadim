import java.io.*;
import java.util.Locale;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Vadim Semenov
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "cooking.*the.*books.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("cookingthebooks.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CookingTheBooks {
    private static final int[] powers = new int[10];
    static {
        powers[0] = 1;
        for (int i = 1; i < powers.length; ++i) {
            powers[i] = powers[i - 1] * 10;
        }
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int initial = in.nextInt();
        int min, max;
        min = max = initial;
        for (int i = 0; i < Integer.toString(initial).length(); ++i) {
            for (int j = 0; j < i; ++j) {
                assert initial >= powers[i] : initial + " " + i + " " + j;
                int a = initial / powers[i] % 10;
                int b = initial / powers[j] % 10;
                if (i == Integer.toString(initial).length() - 1 && b == 0) continue;
                int tmp = initial + (b - a) * powers[i] + (a - b) * powers[j];
                min = Math.min(min, tmp);
                max = Math.max(max, tmp);
            }
        }
        out.printf("Case #%d: %d %d\n", testNumber, min, max);
    }
}

class InputReader {
    private final BufferedReader reader;
    private StringTokenizer tokenizer;

    public InputReader(InputStream in) {
        reader = new BufferedReader(new InputStreamReader(in));
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(readLine());
        }
        return tokenizer.nextToken();
    }

    public String readLine() {
        String line = null;
        try {
            line = reader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return line;
    }
}


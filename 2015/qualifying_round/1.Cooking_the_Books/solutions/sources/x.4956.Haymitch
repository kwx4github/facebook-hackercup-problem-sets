import java.util.*;

public class Accounting {
  public static void main(String[] args) {
    Scanner in = new Scanner(System.in);
    int T = in.nextInt();

badform:
    for (int i = 0; i < T; i++) {
      int n = in.nextInt();
      String pf = "Case #" + (i + 1) + ": ";
      if (n == 0) {
        System.out.println(pf + "0 0");
        continue;
      }

      int[] digits = getDigits(n);
      int[] digits2 = getDigits(n);

      System.out.println(pf + minFudge(digits) + " " + maxFudge(digits2));
    }
  }

  static int reconstruct(int[] n) {
    int result = 0;
    for (Integer i : n) {
      result *= 10;
      result += i;
    }

    return result;
  }
      
  static int maxFudge(int[] digits) {
    int max = digits[0];
    int maxdex = 0;
    for (int i = 1; i < digits.length; i++) {
      if (digits[i] > max) {
        max = digits[i];
        maxdex = i;
      }
    }

    for (int i = 0; i < digits.length; i++) {
      int current = digits[i];
      if (current == max) continue;
      digits[i] = digits[maxdex];
      digits[maxdex] = current;
      return reconstruct(digits);
    }

    return reconstruct(digits);
  }

  static int minFudge(int[] digits) {
    int min = digits[0];
    int mindex = 0;
    for (int i = 1; i < digits.length; i++) {
      if (digits[i] < min) {
        min = digits[i];
        mindex = i;
      }
    }

    for (int i = 0; i < digits.length; i++) {
      int current = digits[i];
      if (current == min) continue;
      if ((i == 0) && (min == 0)) continue;
      digits[i] = digits[mindex];
      digits[mindex] = current;
      return reconstruct(digits);
    }

    return reconstruct(digits);
  }

  static int[] getDigits(int n) {
    int digits = String.valueOf(n).length();
    int[] ret = new int[digits];
    for (int i = digits - 1; i >= 0; i--) {
      ret[i] = n % 10;
      n /= 10;
    }

    return ret;
  }
}

import java.io.*;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Task {

    public void solve(int testNumber, FastScanner in, PrintWriter out) throws IOException {
        String s = in.next();
        String min = s;
        String max = s;
        for (int i = 0; i < s.length(); i++)
            for (int j = i + 1; j < s.length(); j++) {
                String cur = s.substring(0, i) + s.substring(j, j + 1) + s.substring(i + 1, j)
                        + s.substring(i, i + 1) + s.substring(j + 1);
                if (cur.charAt(0) == '0')
                    continue;
                if (cur.compareTo(min) < 0)
                    min = cur;
                if (cur.compareTo(max) > 0)
                    max = cur;
            }
        out.println("Case #" + testNumber + ": " + min + " " + max);
    }


    public static void main(String[] args) throws IOException {
        FastScanner in = new FastScanner(new FileInputStream("input"));
        PrintWriter out = new PrintWriter(new FileOutputStream("output"));
        int t = in.nextInt();
        for (int i = 0; i < t; i++)
            new Task().solve(i + 1, in, out);
        in.close();
        out.close();
    }

    static class FastScanner {
        private StringTokenizer tokenizer;
        private BufferedReader reader;

        public FastScanner(InputStream inputStream) {
            reader = new BufferedReader(new InputStreamReader(inputStream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line;
                try {
                    line = reader.readLine();
                } catch (IOException e) {
                    return null;
                }
                if (line == null)
                    return null;
                tokenizer = new StringTokenizer(line);
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String line;
            try {
                line = reader.readLine();
            } catch (IOException e) {
                return null;
            }
            return line;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public void close() {
            try {
                reader.close();
            } catch (IOException e) {
                // ignore
            }
        }
    }
}
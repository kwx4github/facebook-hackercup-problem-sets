import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class CookingBooks {

	public static void main(String[] args) {
		BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
		try {
			int numberOfTestCases = Integer.parseInt(input.readLine());
			for(int index = 0;index<numberOfTestCases;++index){
				printCookedBook(input.readLine(),index+1);
				//System.out.println(getCountOfEnemies(input.readLine()));
			}
		} catch (NumberFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	private static void printCookedBook(String number, int testN){
		String min = number,max = number;
		int minimum = Integer.parseInt(number),maximum = Integer.parseInt(number);
		for(int index = 0;index<number.length()-1;++index){
			int p = number.charAt(index)-'0';
			if(index == 0 && p ==0)continue;
			int minN = p,maxN = p,minPos = index,maxPos = index;
			for(int i=index+1;i<number.length();++i){
				int n = number.charAt(i)-'0';
				if(n==0 && index==0)continue;
				if(n <= minN){
					minN = n;
					minPos = i;
				}
				if(n >= maxN){
					maxN = n;
					maxPos = i;
				}
			}
			if(number.length()>1){
				min = swappedNumber(number,index,minPos);
				max = swappedNumber(number,index,maxPos);
				//System.out.println(index+" -- Debugging: max: "+max+" min: "+min+" p--"+p);
			}
			minimum = Math.min(minimum, Integer.parseInt(min));
			maximum = Math.max(maximum, Integer.parseInt(max));
		}
		//int index = 0;
		
		
		//System.out.println("Debugging: minN -- "+minN+" minPos --"+minPos+" maxN --"+maxN+" maxPos --"+maxPos);
		
		System.out.println("Case #"+testN+": "+minimum+" "+maximum);
	}
	
	private static  String swappedNumber(String number,int pos1,int pos2){
		char pos1Ch = number.charAt(pos1),pos2Ch = number.charAt(pos2);
		StringBuffer sb = new StringBuffer(number);
		sb.setCharAt(pos1, pos2Ch);
		sb.setCharAt(pos2, pos1Ch);
		return sb.toString();
		
	}

}

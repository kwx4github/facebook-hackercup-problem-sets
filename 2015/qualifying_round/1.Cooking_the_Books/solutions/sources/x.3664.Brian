import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class FacebookCookingBooks {
	private FastScanner in;
	private PrintWriter out;

	public void solve() throws IOException {
		int T = in.nextInt();
		for (int i = 1; i <= T; i++){
			out.print("Case #" + i + ": ");
			String s = in.nextInt() + "";
			char[] n = s.toCharArray();
			char[] m = s.toCharArray();
			int[] pos = new int[10];
			int max = -1;
			int locMax = -1;
			// Instantiate position array with last seen position
			for (int j = 0; j < n.length; j++){
				pos[n[j] - '0'] = j;
				if (m[j] - '0' > max){
					max = m[j] - '0';
					locMax = j;
				}
			}
			// Get min number
			outerloop:
			for (int j = 0; j < n.length; j++){
				for (int k = 0; k < 9; k++){
					if (j == 0){
						continue;
					}
					if (pos[k] > j && k < (n[j] - '0')){
						char tmp = n[pos[k]];
						n[pos[k]] = n[j];
						n[j] = tmp;
						break outerloop;
					}
				}
			}
			// Get max number
			outerloop1:
			for (int j = 0; j < m.length; j++){
				for (int k = 9; k >= 0; k--){
					if (pos[k] > j && k > (m[j] - '0')){
						char tmp = m[pos[k]];
						m[pos[k]] = m[j];
						m[j] = tmp;
						break outerloop1;
					}
				}
			}
			out.print(new String(n) + " " + new String(m));
			out.println();
		}
	}

	public static void main(String[] args) {
		new FacebookCookingBooks().run();
	}

	public void run() {
		try {
			in = new FastScanner();
			out = new PrintWriter(System.out);
			solve();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private class FastScanner {
		private BufferedReader br;
		private StringTokenizer st;

		public FastScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		public String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public double nextDouble() {
			return Double.parseDouble(next());
		}
	}
}

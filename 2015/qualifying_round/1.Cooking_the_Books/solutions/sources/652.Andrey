#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cassert>

using namespace std;

const long long INF = 1e9 * 1LL * 1e9;

vector<int> toDigits(long long N) {
    vector<int> digits;
    while (N) {
        digits.push_back(N % 10);
        N /= 10;
    }
    reverse(digits.begin(), digits.end());
    if (digits.size() == 0) {
        digits.push_back(0);
    }
    return digits;
}

long long fromDigits(vector<int> digits) {
    long long N = 0;
    for (int i = 0; i < digits.size(); ++i) {
        N *= 10;
        N += digits[i];
    }
    return N;
}

void testFromToDigits() {
    for (int i = 0; i <= 10000; ++i) {
        if (fromDigits(toDigits(i)) != i) {
            cerr << "testFromToDigits failed on: " << i << endl;
        }
    }
    cerr << "testFromToDigits passed" << endl;
}

pair<long long, long long> solve(long long N) {
    pair<long long, long long> minMaxPair = {INF, -INF};

    auto digits = toDigits(N);
    for (int i = 0; i < digits.size(); ++i) {
        for (int j = i; j < digits.size(); ++j) {
            vector<int> newDigits = digits;
            if (i == 0 && j != 0 && newDigits[j] == 0) {
                continue;
            }
            swap(newDigits[i], newDigits[j]);
            auto newN = fromDigits(newDigits);
            minMaxPair.first = min(minMaxPair.first, newN);
            minMaxPair.second = max(minMaxPair.second, newN);
        }
    }
    return minMaxPair;
}

void testSolve() {
    vector<pair<long long, pair<long long, long long>>> tests = {
        { 0, {0, 0} }
    };

    for (int i = 0; i <= 9; ++i) {
        tests.push_back({i, {i, i}});
    }

    tests.push_back({99999999, {99999999, 99999999}});
    tests.push_back({10, {10, 10}});
    tests.push_back({90, {90, 90}});

    tests.push_back({12, {12, 21}});
    tests.push_back({19, {19, 91}});

    tests.push_back({123456789, {123456789, 923456781}});

    tests.push_back({191, {119, 911}});
    tests.push_back({11911, {11119, 91111}});

    tests.push_back({21911, {11912, 91211}});

    for (const auto& test : tests) {
        long long N = test.first;
        auto minMaxPair = test.second;
        auto solution = solve(N);

        if (solution != minMaxPair) {
            cerr << "testSolve failed on: " << N << endl;
            cerr << "Expected: " << minMaxPair.first << " " << minMaxPair.second << endl;
            cerr << "Found: " << solution.first << " " << solution.second << endl;
        }
    }
    cerr << "testSolve passed (" << tests.size() << " tests)" << endl;
}

void unitTests() {
    testFromToDigits();
    testSolve();
}

int main() {
    unitTests();
    // freopen("input.txt", "r", stdin);
    freopen("cooking_the_books.txt", "r", stdin);
    freopen("cooking_the_books_out.txt", "w", stdout);
    int T;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        long long N;
        cin >> N;
        auto minMaxPair = solve(N);
        cout << "Case #" << (t + 1) << ": " << minMaxPair.first << " " << minMaxPair.second << endl;
    }
    return 0;
}

package com.yuzbasioglu;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class NumberSwap {

	public static int getLargestCombination(int number) {

		ArrayList<Integer> vectorified = vectorify(number);
		if (vectorified.size() == 1)
			return number;

		int largestDigit = getLargestDigit(vectorified);
		int indexOfLargest = vectorified.indexOf(largestDigit);
		Collections.swap(vectorified, indexOfLargest, 0);
		
		return convertToNumber(vectorified);
	}

	public static int getSmallestCombination(int number) {

		ArrayList<Integer> vectorified = vectorify(number);
		if (vectorified.size() == 1)
			return number;

		int smallestDigit = getSmallestDigitOtherThanZero(vectorified);
		int indexOfSmallest = vectorified.indexOf(smallestDigit);
		Collections.swap(vectorified, indexOfSmallest, 0);

		return convertToNumber(vectorified);
	}

	private static ArrayList<Integer> vectorify(int number) {
		ArrayList<Integer> vectorified = new ArrayList<Integer>();
		do {
			int lastDigit = number % 10;
			vectorified.add(lastDigit);
			number /= 10;
		} while (number > 0);

		Collections.reverse(vectorified);
		return vectorified;
	}

	private static int convertToNumber(ArrayList<Integer> vectorified){
		int number = 0;
		int pow = pow10(vectorified.size() - 1);
		
		for(int val : vectorified){
			number += val * pow;
			pow /= 10;
		}
		
		return number;
	}
	
	private static int pow10(int exp) {

		int pow = 1;
		while (exp > 0) {
			pow *= 10;
			--exp;
		}

		return pow;
	}

	private static int getLargestDigit(ArrayList<Integer> number) {

		int largest = 0;
		for (int num : number) {
			if (num > largest)
				largest = num;
		}

		return largest;
	}

	private static int getSmallestDigitOtherThanZero(ArrayList<Integer> number) {
		int smallest = Integer.MAX_VALUE;
		for (int num : number) {
			if (num < smallest && num != 0)
				smallest = num;
		}

		return smallest;
	}

	public static void main(String[] args) {

		Scanner scanner = null;
		try {
			scanner = new Scanner(new File("test2.txt"));
		} catch (FileNotFoundException e) {
			System.out.println(e.getMessage());
		}

		// read file content for each test case
		ArrayList<Integer> numbers = new ArrayList<Integer>();
		
		@SuppressWarnings("unused")
		int numberOfValues = scanner.nextInt();
		
		while (scanner.hasNextInt()) {
			numbers.add(scanner.nextInt());
		}

		int testCase = 1;
		for(int number: numbers){
			
			// process 
			int smallestCombination = NumberSwap.getSmallestCombination(number);
			int largestCombination = NumberSwap.getLargestCombination(number);
			
			// report to output
			System.out.println("Case #" + testCase + ": " + smallestCombination + " " + largestCombination);
			++testCase;
		}
	}
}

#include <bits/stdc++.h>
using namespace std;

#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define it(i,v) __typeof(v.begin()) i;
#define set(a,val) memset(a,val,sizeof(a))
#define rep(i,a,b) for(__typeof(a) i = (a); i < (b) ; i++)
#define rev(i,a,b) for(__typeof(a) i = (a); i >= (b) ; i--)
#define max(a,b) (a) > (b) ? (a) : (b)
#define min(a,b) (a) < (b) ? (a) : (b)
#define foi(a) printf("%d",a)
#define fod(a) printf("%lf",a)
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef unsigned long long ll;
typedef vector<pair<int,int> > VPI;
typedef struct{
	int p,c,f;
} food;
inline int inp()
{
	char c=getchar();
	int n=0;
	while(c<'0'||c>'9') c=getchar();
	while(c>='0'&& c<='9') n=(n<<3)+(n<<1)+c-'0',c=getchar();
	return n;
}
bool isPossible(food req,food given[],int i,int n)
{
	if(req.p==0 && req.c==0 && req.f==0)
		return true;
	else if(req.p<=0 || req.c<=0 || req.f<=0 || i==n)
		return false;
	else
	{
		food temp1=req,temp2=req;
		temp2.p-=given[i].p;
		temp2.c-=given[i].c;
		temp2.f-=given[i].f;
		return isPossible(temp1,given,i+1,n)||isPossible(temp2,given,i+1,n);
	}
}
int main()
{
	int t,p,c,f,n,cases=1;
	t=inp();
	food req;
	while(t--)
	{
		req.p=inp();
		req.c=inp();
		req.f=inp();
		n=inp();
		food given[n];
		rep(i,0,n){
			given[i].p=inp();
			given[i].c=inp();
			given[i].f=inp();
		}
		if(isPossible(req,given,0,n))
			cout<<"Case #"<<cases<<": yes"<<endl;
		else
			cout<<"Case #"<<cases<<": no"<<endl;
		cases++;
	}
	return 0;
}
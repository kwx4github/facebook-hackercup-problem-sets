package facebook;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;


public class First {

	public static void main(String[] args) {
		
		Scanner fileScanner;
		int tests = 0;
		int cases = 0;
		try {
			fileScanner = new Scanner(new File("C:/Users/Vineeth/Desktop/input.txt"));
			BufferedWriter writer = new BufferedWriter(new FileWriter("C:/Users/Vineeth/Desktop/output.txt"));
			if(fileScanner.hasNextLine()) {
				tests = Integer.parseInt(fileScanner.nextLine());
			}
			while (fileScanner.hasNextLine()){
				String s = fileScanner.nextLine();
				if(s != "") {
					int num = Integer.parseInt(s);
					if(num < 9) {
						//int a[] = convert(num);
						//int b[] = new int[a.length];
						//System.arraycopy(a, 0, b, 0, a.length);
						writer.write("Case #" + ++cases + ":");
						writer.write("\t");
						writer.write("" + num);
						writer.write("\t");
						writer.write("" + num);
						writer.newLine();
					}
					else {
						int a[] = convert(num);
						int b[] = new int[a.length];
						System.arraycopy(a, 0, b, 0, a.length);
						writer.write("Case #" + ++cases + ":");
						writer.write("\t");
						writer.write(minimum(a));
						writer.write("\t");
						writer.write(maximum(b));
						writer.newLine();
					}
				}
			}
			writer.close();
		}
		catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static int[] convert(int num) {
		String s = "" + num;
		//System.out.println(s);
		int[] n = new int[s.length()];
		for(int i = 0; i < s.length(); i++) {
			n[i] = s.charAt(i) - 48;
		}
		return n;
	}
	
	public static String minimum(int[] a) {
		int i = 0;
		int v = 0;
		while(i < a.length && a[i] == a[min(a, i)]) {
			v = v * 10 + a[i];
			i++;
		}
		if(i >= a.length) {
			return "" + v;
		}
		else {
			int ind = min(a, i);
			int temp = a[ind];
			a[ind] = a[i];
			a[i] = temp;
			while(i < a.length) {
				v = v * 10 + a[i];
				i++;
			}
			return "" + v;
		}
	}
	
	public static String maximum(int[] a) {
		int i = 0;
		int v = 0;
		while(i < a.length && a[i] == a[max(a, i)]) {
			v = v * 10 + a[i];
			i++;
		}
		if(i >= a.length) {
			return "" + v;
		}
		else {
			int ind = max(a, i);
			int temp = a[ind];
			a[ind] = a[i];
			a[i] = temp;
			while(i < a.length) {
				v = v * 10 + a[i];
				i++;
			}
			return ""+v;
		}
	}
	
	public static int min(int[] n, int index) {
		int minindex = -1;
		int val = index;
		if(index >= n.length) {
			return -1;
		}
		int k = Integer.MAX_VALUE;
		while(index < n.length) {
			if(k >= n[index]) {
				if(val == 0 && n[index] == 0) {
					
				}
				else {
					k = n[index];
					minindex = index;
				}
			}
			index++;
		}
		return minindex;
	}
	
	public static int max(int[] n, int index) {
		int maxindex = -1;
		if(index >= n.length) {
			return -1;
		}
		int k = Integer.MIN_VALUE;
		while(index < n.length) {
			if(k <= n[index]) {
				k = n[index];
				maxindex = index;
			}
			index++;
		}
		return maxindex;
	}
}
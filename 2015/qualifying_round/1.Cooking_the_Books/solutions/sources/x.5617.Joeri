module Main where

import System.Environment (getArgs)
import Data.List
import Data.Char (isAlpha, toLower)

main :: IO ()
main = do
  [fileIn, fileOut] <- getArgs
  (_:lns) <- fmap lines $ readFile fileIn
  let out = zipWith caseNr [1..] . map process $ lns
  writeFile fileOut $ unlines out

caseNr :: Int -> (String,String) -> String
caseNr n b = "Case #" ++ show n ++ ": " ++ post b
  where post (lo,hi) = lo ++ " " ++ hi

process :: String -> (String,String)
process input = case sw of
                  [] -> (input,input)
                  (x:xs) -> minMax (x,x) xs
  where sw = filter ((/= '0') . head) $ swaps input

minMax res [] = res
minMax (lo,hi) (x:xs) = minMax (min lo x, max hi x) xs

swaps :: [a] -> [[a]]
swaps (x:xs) = map (\(toFront, rest) -> toFront:rest) $ swap' x xs

swap' x []     = [(x,[])]
swap' x (y:ys) = (y,x:ys) : map (\(z,zs) -> (z,y:zs)) (swap' x ys)

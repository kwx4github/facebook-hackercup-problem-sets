//#include <stdin.h>
#include <stdio.h>

int tmp[9];
int divided[9];
int original[9];
int case_compare[101][9];
int saved[101];

void merge(int left, int right,int num[100]);//0:to_digit 1:case_compare
void mergeSort(int left, int right,int num[100]);
void reversed(int input[9],int count);
int count_dig(int input[9]);
int large(int input);
int small(int input);
void cut(int number);

int main(){
    unsigned int input;
    int number_of_input;
    scanf("%d",&number_of_input);
    int j=0,i=0;
    while(number_of_input!=0 && j<number_of_input){
        scanf("%d",&input);
        saved[j]=input;
        j++;
    }
    for(j=0;j<number_of_input;j++){
        printf("Case #%d: %d %d\n",j+1,small(saved[j]),large(saved[j]));

    }
        return 0;
}


int large(int input){
    int max=0,location=0;
    int number;
    int head;
    int doen;
    int count=0,n=0,reverse=0,count_base=0;
    number=input;
    while(number!=0){//input is the number
        int digit = input%10;//the last digit
        number/=10;//withour the last digit
        ++count_base;
    }
    while (input != 0){
        reverse = reverse * 10;
        reverse = reverse + input%10;
        input = input/10;
    }
    number=input=reverse;

    while(number!=0){//input is the number
        int digit = number%10;//the last digit
        if(count==0)
            head=digit;
        number/=10;//withour the last digit
        if(digit>max && digit!=0){
            max=digit;
            location=count;
        }
        ++count;
    }

    reverse=0;
    while (input != 0){
        reverse = reverse * 10;
        if(n==0 && max!=0)
            reverse = reverse + max;
        else if(n==location && max!=0)
            reverse = reverse + head;
        else
            reverse = reverse + input%10;
        input = input/10;
        n++;
    }
//    printf("max:%d\thead:%d\tlocation:%d\tcount_base:%d\tn:%d\n",max,head,location,count_base,n);
    if(n!=count_base){
        count_base-=n;
        while(count_base){
            reverse*=10;
            count_base--;
        }
    }
    return reverse;
}

int small(int input){
    int min=99,location=0;
    int number;
    int head;
    int doen;
    int count=0,n=0,reverse=0,count_base=0;
    number=input;
    while(number!=0){//input is the number
        int digit = input%10;//the last digit
        number/=10;//withour the last digit
        ++count_base;
    }
    while (input != 0){
        reverse = reverse * 10;
        reverse = reverse + input%10;
        input = input/10;
    }
    number=input=reverse;

    while(number!=0){//input is the number
        int digit = number%10;//the last digit
        if(count==0)
            head=digit;
        number/=10;//withour the last digit
        if(digit<min && digit!=0){
            min=digit;
            location=count;
        }
        ++count;
    }

    reverse=0;
    while (input != 0){
        reverse = reverse * 10;
        if(n==0 && min!=0)
            reverse = reverse + min;
        else if(n==location && min!=0)
            reverse = reverse + head;
        else
            reverse = reverse + input%10;
        input = input/10;
        n++;
    }
 //   printf("min:%d\thead:%d\tlocation:%d\tcount_base:%d\tn:%d\n",min,head,location,count_base,n);
    if(n!=count_base){
        count_base-=n;
        while(count_base){
            reverse*=10;
            count_base--;
    //    printf("%d\n",reverse);
        }
    }
    return reverse;
}
int count_dig(int input[9]){
    int i=0;
    while(input[i]!='\0'){
        i++;
    }
    return i;
}
void reversed(int input[9],int count){
    int i=0;
    int temp_r[9];
    while (i<count)
    {
        temp_r[i]=input[count-1-i];
        i++;
    }
    for(i=0;i<count;i++)
            divided[i]=temp_r[i];
}

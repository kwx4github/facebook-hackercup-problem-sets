/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cookingthebooks;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 *
 * @author yoovrajshinde
 */
public class CookingTheBooks {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException, IOException {
        
        long start = System.currentTimeMillis();
        BufferedReader br = 
                new BufferedReader(
                        new FileReader("/Users/yoovrajshinde/facebook/cooking_the_books.txt"));
        
        BufferedWriter bw = 
                new BufferedWriter(
                        new FileWriter("/Users/yoovrajshinde/facebook/output.txt"));
        
        String line;
        boolean first=true;
        int T = 0;
        int i=1;
        String tmp;
        while((line = br.readLine()) != null || T<0) {
            if (first) {
                T = Integer.valueOf(line);
                first = false;
                continue;
            }
            tmp = getReplacedMinMax(i, line);
            bw.write(tmp);
            bw.newLine();
            T--;
            i++;
        }
        br.close();
        bw.close();
        long processedTime = System.currentTimeMillis() - start;
        System.out.println(processedTime);
        System.out.println("ms");
//        // TODO code application logic here
//        String inputNumber = "5";
//        String maxInputNumber;
//        String minInputNumber;
//        
//        int maxDigit = 0, minDigit = 11;
//        for(String s:inputNumber.split("")) {
//            if(s.length() > 0) {
//                int tmp = Integer.valueOf(s);
//                if(tmp > maxDigit) {
//                    maxDigit = tmp;
//                }
//                if (tmp < minDigit && tmp != 0) {
//                    minDigit = tmp;
//                }
//            }
//        }
//        System.out.println("Min Digit : " + minDigit);
//        System.out.println("Max Digit : " + maxDigit);
//        
//        // minimum number : replace last  occurence 
//        // maximum number : replace first occurence
//        
//        int maxDigitIndex = inputNumber.indexOf(String.valueOf(maxDigit));
//        System.out.println(maxDigitIndex);
//        String[] inputSplitNumber = inputNumber.split("");
//        String firstDigit = inputSplitNumber[1];
//        inputSplitNumber[1] = String.valueOf(maxDigit);
//        inputSplitNumber[maxDigitIndex+1] = firstDigit;
//        
//        StringBuilder sb = new StringBuilder();
//        for(String s : inputSplitNumber) {
//            sb.append(s);
//        }
//        maxInputNumber = sb.toString();
//        
//        
//        int minDigitIndex = inputNumber.lastIndexOf(String.valueOf(minDigit));
//        System.out.println(minDigitIndex);
//        inputSplitNumber = inputNumber.split("");
//        firstDigit = inputSplitNumber[1];
//        inputSplitNumber[1] = String.valueOf(minDigit);
//        inputSplitNumber[minDigitIndex+1] = firstDigit;
//        
//        sb = new StringBuilder();
//        for(String s : inputSplitNumber) {
//            sb.append(s);
//        }
//        minInputNumber = sb.toString();
//        
//        System.out.println(inputNumber);
//        System.out.println(minInputNumber);
//        System.out.println("");
//        System.out.println(inputNumber);
//        System.out.println(maxInputNumber);

    }
    
    public static String getReplacedMinMax(int caseNumber, String inputNumber) {
        String maxInputNumber;
        String minInputNumber;
        
        int maxDigit = 0, minDigit = 11;
        for(String s:inputNumber.split("")) {
            if(s.length() > 0) {
                int tmp = Integer.valueOf(s);
                if(tmp > maxDigit) {
                    maxDigit = tmp;
                }
                if (tmp < minDigit && tmp != 0) {
                    minDigit = tmp;
                }
            }
        }
        // maximum number : replace first occurence
        
        int maxDigitIndex = inputNumber.indexOf(String.valueOf(maxDigit));
        String[] inputSplitNumber = inputNumber.split("");
        String firstDigit = inputSplitNumber[1];
        inputSplitNumber[1] = String.valueOf(maxDigit);
        inputSplitNumber[maxDigitIndex+1] = firstDigit;
        
        StringBuilder sb = new StringBuilder();
        for(String s : inputSplitNumber) {
            sb.append(s);
        }
        maxInputNumber = sb.toString();
        
        
        // minimum number : replace last  occurence 
        int minDigitIndex = inputNumber.lastIndexOf(String.valueOf(minDigit));
        inputSplitNumber = inputNumber.split("");
        firstDigit = inputSplitNumber[1];
        inputSplitNumber[1] = String.valueOf(minDigit);
        inputSplitNumber[minDigitIndex+1] = firstDigit;
        
        sb = new StringBuilder();
        for(String s : inputSplitNumber) {
            sb.append(s);
        }
        minInputNumber = sb.toString();
        
        return new StringBuilder()
                .append("Case #").append(caseNumber)
                .append(": ").append(minInputNumber)
                .append(" ").append(maxInputNumber)
                .toString();
    }
}

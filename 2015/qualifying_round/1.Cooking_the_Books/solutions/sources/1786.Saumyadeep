#include <iostream>
#include <list>
#include <vector>
#include <algorithm>
#include <numeric>
#include <map>
#include <set>
#include <stack>
#include <cmath>
#include <queue>
#include <deque>
#include <string>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <climits>

#define gc getchar_unlocked
#define pc(x) putchar_unlocked(x)
#define Si(x) scanf("%d",&x)
#define Sii(x,y) scanf("%d %d",&x,&y)
#define Pi(x) printf("%d\n",x)
#define sz(a) int((a).size()) 
#define all(c) (c).begin(),(c).end() 
#define revall(c) (c).rbegin(),(c).rend()
#define tr(c,it) for(typeof((c).begin()) it = (c).begin() ; (it)!=(c).end() ; ++(it))
#define newread freopen("newin","r",stdin)
#define newwrite freopen("newout","w",stdout)

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vpii;
typedef vector<ll> vll;
typedef vector<ull> vull;

int findMax(string &s , int offset)	//This function will find and report the position of the maximum number in the range s[offset] .. s[n-1]
{									//In case of multiple occurences of the maximum element, the rightmosr position will be returned
	int n = sz(s);
	char max = '0' - 1;
	int maxpos = -1;
	for (int i = n-1 ; i >=offset ; i--)
	{
		if(s[i] > max)
		{
			max = s[i];
			maxpos = i;
		}
	}
	//cout << "max= " << s[maxpos] << " found at : " << maxpos << "\n" ;
	return maxpos;
}

//lets pretend that '0's do not exist. The logic used for finding the largest possible number with the obvious tweak should work fine.

int findMin(string &s , int offset)
{
	int n = sz(s);
	char min = '9' + 1;
	int minpos = -1;
	for (int i = n-1 ; i >=offset ; i--)
	{
		if(s[i] < min)
		{
			min = s[i];
			minpos = i;
		}
	}
	//cout << "min= " << s[minpos] << " found at : " << minpos << "\n" ;
	return minpos;
}

int findMinIgnoreZero(string &s , int offset)
{
	int n = sz(s);
	char min = '9' + 1;
	int minpos = -1;
	for (int i = n-1 ; i >=offset ; i--)
	{
		if(s[i] < min && s[i] != '0' )
		{
			min = s[i];
			minpos = i;
		}
	}
	//cout << "min= " << s[minpos] << " found at : " << minpos << "\n" ;
	return minpos;
}

void solve(string &s , int type)	//type 0->large 1->small
{
	int n=sz(s);
	bool done=false;
	int offset=0;
	int pos;
	while(!done)
	{
		if(offset>=n)
			break;
		
		
		pos=  ((type==0)?findMax(s,offset):findMin(s,offset));
		while(s[offset] == s[pos])
		{
			if(offset==pos)
				break;
			offset++;
		}
		if(offset!=pos)
			done=true;
		else
			offset++;
	}
	if(pos<n && offset<n)
		swap(s[offset],s[pos]);
}

int main(int argc, char **argv)
{
	int t;
	newread;
	cin >> t;
	freopen("out","w",stdout);
	for(int cases = 1 ; cases <=t ; cases++)
	{
		//std::ios::sync_with_stdio(false);
		string s;
		cin >> s;
		string small = s;
		string large = s;
		
		int n=sz(s);
		
		solve(large,0);
		
		bool isZeroPresent = false;
		int zeroPos=-1;
		for (int i = n-1 ; i >=0 ; i--)
		{
			if(small[i]=='0')
			{
				isZeroPresent=true;
				zeroPos=i;
				break;
			}
		}
		if(!isZeroPresent)
			solve(small,1);
		else
		{
			int pos = findMinIgnoreZero(small,0);
			if(pos != -1)
			{
				if(small[0]==small[pos])
				{
					if(zeroPos!=1)
					{
						int target=1;
						while(s[target]=='0' && target < n )
						{
							target++;
						}
						
						if(target<zeroPos)
							swap(small[target],small[zeroPos]);
					}
				}
				else
				{
					swap(small[pos],small[0]);
				}
			}
		}
		
		
		
		//cout <<s<< " -->" << cases << ": " << small << " " << large << '\n' ;
		cout <<"Case #" << cases << ": " << small << " " << large << '\n' ;
	}
	return 0;
}

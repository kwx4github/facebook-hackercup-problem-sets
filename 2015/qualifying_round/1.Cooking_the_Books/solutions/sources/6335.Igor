<?php

$inputFileName = 'cooking_the_books.txt';
$outputFileName = 'cooking_the_books_output.txt';

$inputData = file($inputFileName);
$outputFile = fopen($outputFileName, 'w');

$numbersCount = (int)$inputData[0];

for ($i=1; $i<=$numbersCount; $i++) {

    $number = (int)$inputData[$i];

    if ($number <= 11) {

        $minNumber = $maxNumber = $number;
    }
    else {

        $digits = str_split($number);

        $minDigit = min($digits);
        $maxDigit = max($digits);

        if ($minDigit == $maxDigit) {

            $minNumber = $maxNumber = $number;
        }
        else {

            $minNumber = minimize($digits, $minDigit, $maxDigit);
            $maxNumber = maximize($digits, $minDigit, $maxDigit);
        }
    }

    fwrite($outputFile, 'Case #' . $i . ': ' . $minNumber . ' ' . $maxNumber . "\n");
}

fclose($outputFile);

echo 'Done!';


function minimize($digits, $minDigit, $maxDigit) {

    $digitsNumber = count($digits);

    if ($minDigit == 0) {

        // try to find digit more then 0 and less then first digit
        for ($i = 1; $i < $digits[0]; $i++) {

            for ($k = $digitsNumber - 1; $k >= 1; $k--) {

                if ($digits[$k] == $i) {

                    $secondMinDigitLastPosition = $k;
                    $secondMinDigit = $i;
                    break 2;
                }
            }
        }

        if (isset($secondMinDigit)) {

            $digits[$secondMinDigitLastPosition] = $digits[0];
            $digits[0] = $secondMinDigit;

            $minNumber = implode('', $digits);
            return $minNumber;
        }
    }

    // find $minDigitLastPosition
    for ($i = $digitsNumber - 1; $i >= 0; $i--) {

        if ($digits[$i] == $minDigit) {

            $minDigitLastPosition = $i;
            break;
        }
    }

    // find digit we can change by $minDigit
    for ($i = 0; $i < $minDigitLastPosition; $i++) {

        if ($i==0 && $minDigit==0) {
            continue;
        }

        if ($digits[$i] > $minDigit) {

            // position of the digit near to the beginning we have to change
            $posStart = $i;
            break;
        }
    }

    if (isset($posStart)) {

        $digits[$minDigitLastPosition] = $digits[$posStart];
        $digits[$posStart] = $minDigit;

        $minNumber = implode('', $digits);
        return $minNumber;
    }
    else { // it means $minDigit places only on $minDigitLastPosition+1 start positions

        for ($otherSmallDigit = $minDigit + 1; $otherSmallDigit < $maxDigit; $otherSmallDigit++) {

            // no such digit in number
            if (!in_array($otherSmallDigit, $digits)) {
                continue;
            }

            // find $smallDigitLastPosition
            for ($i = $digitsNumber - 1; $i > $minDigitLastPosition; $i--) {

                if ($digits[$i] == $otherSmallDigit) {

                    $smallDigitLastPosition = $i;
                    break;
                }
            }

            // find digit we can change by $otherSmallDigit
            for ($i = $minDigitLastPosition + 1; $i < $smallDigitLastPosition; $i++) {

                if ($digits[$i] > $otherSmallDigit) {

                    // position of the digit near to the beginning we have to change
                    $posStart = $i;
                    break;
                }
            }

            if (isset($posStart)) {

                $digits[$smallDigitLastPosition] = $digits[$posStart];
                $digits[$posStart] = $otherSmallDigit;

                $minNumber = implode('', $digits);
                return $minNumber;
            }
        }
    }

    $minNumber = implode('', $digits);
    return $minNumber;
}


function maximize($digits, $minDigit, $maxDigit) {

    $digitsNumber = count($digits);

    // for searching $maxDigit position from last to first element
    $bigDigitLastPosition = -1;

    for ($bigDigit = $maxDigit; $bigDigit > $minDigit; $bigDigit--) {

        // no such digit in number
        if (!in_array($bigDigit, $digits)) {
            continue;
        }

        // find $bigDigitLastPosition
        for ($i = $digitsNumber - 1; $i > $bigDigitLastPosition; $i--) {

            if ($digits[$i] == $bigDigit) {

                $bigDigitLastPosition = $i;
                break;
            }
        }

        // find digit we can change by $otherSmallDigit
        for ($i = 0; $i < $bigDigitLastPosition; $i++) {

            if ($digits[$i] < $bigDigit) {

                // position of the digit near to the beginning we have to change
                $posStart = $i;
                break;
            }
        }

        if (isset($posStart)) {

            $digits[$bigDigitLastPosition] = $digits[$posStart];
            $digits[$posStart] = $bigDigit;

            $minNumber = implode('', $digits);
            return $minNumber;
        }
    }

    $minNumber = implode('', $digits);
    return $minNumber;
}
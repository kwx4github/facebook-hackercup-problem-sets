#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int a[100];
bool comparePairs(const std::pair<int,int>& lhs, const std::pair<int,int>& rhs)
{
  if(lhs.first!=rhs.first)
  return lhs.first < rhs.first;
  else
	  return lhs.second>rhs.second;
}

int solve_small(long long int N,long long int &a)
{
	long long int temp;
	std::vector<std::pair<int,int>> digitvec,tempvec;
	temp = N;
	int count=0;
	while(temp!=0)
	{
		if(temp>=10)
		{
			digitvec.push_back(std::pair<int,int>(temp%10,count++));
			temp/=10;
		}
		if(temp<10)
			break;
	}
	tempvec = digitvec;
	tempvec.push_back(std::pair<int,int>(temp,count));
	std::sort(digitvec.begin(),digitvec.end());
	int min=-1,index;
	for(int i=0;i<digitvec.size();i++)
		if(digitvec[i].first!=0&&digitvec[i].first<temp)
		{
			min = digitvec[i].first;
			index=digitvec[i].second;
			int k = tempvec[index].first;
			tempvec[index].first = tempvec[tempvec.size()-1].first;
			tempvec[tempvec.size()-1].first = k;
			
			break;
		}
	if(min==-1)
	{
		int done=0;
		int i=0;
		while(done==0&&i<digitvec.size())
		{
			int value = digitvec[i].first;
			int index = digitvec[i].second;
			for(int k=count;k>index;k--)
				if(tempvec[k].first>value)
				{
					if(!(k==count&&value==0))
					{
					tempvec[index].first = tempvec[k].first;
						tempvec[k].first = value;
						done=1;
						break;
					}
				}
			i++;
			if(i==digitvec.size())
				break;

		}
	}
	a=0;
	for(int kk=0;kk<tempvec.size();kk++)
	{
		a = a*10 + tempvec[tempvec.size()-kk-1].first;
	}
	return 0;

}
int solve_large(long long int N, long long int &b)
{
	long long int temp;
	std::vector<std::pair<int,int>> digitvec,tempvec;
	temp = N;
	int count=0;
	while(temp!=0)
	{
		if(temp>=10)
		{
			digitvec.push_back(std::pair<int,int>(temp%10,count++));
			temp/=10;
		}
		if(temp<10)
			break;
	}
	tempvec = digitvec;
	tempvec.push_back(std::pair<int,int>(temp,count));
	std::sort(digitvec.rbegin(),digitvec.rend(),comparePairs);
	int i=0;
	int done=0;
	while(done==0&&i<digitvec.size())
	{
		int value = digitvec[i].first;
		int index = digitvec[i].second;
		for(int k=count;k>index;k--)
			if(tempvec[k].first<value)
			{
				tempvec[index].first = tempvec[k].first;
				tempvec[k].first = value;
				done=1;
				break;
			}
		i++;
		if(i==digitvec.size())
			break;
	}

	b=0;
	for(int kk=0;kk<tempvec.size();kk++)
	{
		b = b*10 + tempvec[tempvec.size()-kk-1].first;
	}
	return 0;
}
int main()
{
 freopen("in.txt", "r", stdin);
 freopen("out.txt", "w", stdout);
  int tt;
 // scanf("%d", &tt);
	cin>>tt;
  int total=tt;
  while(tt--)
  {
	  long long int N;
	  long long int a,b;
	  cin>>N;
	  int result = solve_large(N,b);
	  result = solve_small(N,a);
//	  if(result!=0)
		  printf("Case #%d: %llu %llu\n",total-tt,a,b);
//	  else
//		  printf("Case :#%d: YES\n",total-tt);
  }
  return 0;
}
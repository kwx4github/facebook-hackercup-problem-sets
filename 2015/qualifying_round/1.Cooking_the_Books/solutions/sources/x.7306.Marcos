#include <iostream>
#include <string>
#include <fstream>
#include <sstream> //For the stringstream class.
#include <stdarg.h> //For the indefinite arguments
#include <iomanip>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>    // std::sort
#include <list>			// std::list

//#include "infiniteprecision.h"


using namespace std;

#define MAX_SIZE	10000

struct	instanceType
{
	void		destroy()
	{
	}
	
	instanceType()
	{
		number = "";
	}
	
	string		number;
};


struct	resultType
{
	~resultType()
	{
	}
	
	resultType()
	{
		val = "";
	}
	
	string val;
};


//****************************************


//This function checks if a file exists.
bool file_existence(char* file_name=0)
{
	ifstream file;
	bool existence(false);
	
	file.open(file_name,ios::in);
	existence=file.good();
	file.close();
	
	return existence;
}


//Returns the int representation of the text of a string.
int toInt(const string& text)
{
	int number;
	stringstream value (stringstream::in | stringstream::out);
	//Insert the string with the value in the string-stream interface.
	value<<text;
	//Get the nomber in int format;
	value>>number;
	return number;
}


//The solver.
void	solve(instanceType&	instance, resultType& solution)
{
	int		min(0);
	int		max(0);
	char	aux(0);
	string	min_str(instance.number);
	string	max_str(instance.number);
	
	for(int i = 0; i < instance.number.size(); ++i)
	{
		if(min_str[i] != '0' && (int)min_str[i] < (int)min_str[min]) min = i;
		if(max_str[i] != '0' && (int)max_str[i] > (int)max_str[max]) max = i;
	}
	
	aux = min_str[0];
	min_str[0] = min_str[min];
	min_str[min] = aux;
	
	aux = max_str[0];
	max_str[0] = max_str[max];
	max_str[max] = aux;
	
	solution.val = min_str + " " + max_str;
}


void	readInstace(ifstream& input_file, instanceType&	instance)
{
	input_file>>instance.number;
}


void	displayInstance(instanceType&	instance)
{
	cout<<instance.number<<"\n";
}


void	writeSolution(ofstream& output_file, resultType& solution, int numCase, bool winEOL=false)
{
	output_file<<"Case #"<<numCase<<": ";
	
	output_file<<solution.val;
	
	output_file<<(winEOL ? "\r\n" : "\n");
}


int main(int numArgs, char** args)
{
	//Check if the arguments seem right.
	if(numArgs>2)
	{
		printf("The only parameter accepted is the file name.\n");
		return 0;
	}
	
	//VARS
		int				numCases(0);
		instanceType	instance;
		resultType*		solutions(0);
		bool			winEOL(true);
		
		//Files streams and names.
		string input_file_name;
		ifstream input_file;
		string output_file_name;
		ofstream output_file;
	
	
	//Get the inpput files names, depending on the number of arguments sent.
	if(numArgs==1)
	{
		input_file_name="input.txt";
		output_file_name="output.txt";
	}
	else
	{
		input_file_name=args[1];
		output_file_name=input_file_name;
		output_file_name.replace(input_file_name.size()-3,3,"_output.out");
	}
	
	//Check if the input file exists.
	if(file_existence((char*)input_file_name.c_str())==false)
	{
		printf("The input file does not exists.\n");
		return 0;
	}
	
	//Work the input file.
	input_file.open(input_file_name.c_str(), ios::in);
	//Read the number of cases.
	input_file>>numCases;
	
	//Get space for the solutions.
	solutions = new resultType[numCases];
	
	//*********************
	//*********************
	//INPUT
	
	//Solve the instances.
	for(int cnt_cases = 0; cnt_cases < numCases; ++cnt_cases)
	{
		readInstace(input_file, instance);
		solve(instance, solutions[cnt_cases]);
		//displayInstance(instance);
		cout<<"Case: "<<cnt_cases<<"\n";
		
	}
	
	input_file.close();
	
	//*********************
	//*********************
	//OUTPUT
	
	//Write the output file.
	output_file.open(output_file_name.c_str(),ios::out);
	
	for(int cnt_solutions=0; cnt_solutions<numCases; cnt_solutions++)
		writeSolution(output_file, solutions[cnt_solutions], cnt_solutions + 1, winEOL);
	
	output_file.close();
	
	//*********************
	//*********************
	
	delete[] solutions;
	solutions=0;
	instance.destroy();
	
	cin.get();
}




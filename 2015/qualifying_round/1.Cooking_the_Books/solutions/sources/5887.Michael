#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int compare_function(const void *a, const void  *b){
    return -(strcmp((char *)a,(char *)b));
} 

int lesscompare_function(const void *a, const void *b){
    return (strcmp((char *)a, (char *)b));
}
int findRight(char target, char number[], int digits);

void main(){
    long int n;
    int digits;
    char original[200];
    char sorted[200]; 
    int i = 0;
    scanf("%ld", &n);
    //printf("n: %ld\n\n", n);
    for(i = 0; i < n; i++){
        scanf("%s", original);
        strcpy(sorted, original); 
        //printf("ORIGINAL:%s\n", original);
        printf("Case #%d: ",i+1);
        digits = getLength(strtol(original, NULL, 10));
        qsort(sorted, digits, sizeof(char), lesscompare_function);
        printf("%ld ", findSmallest(original, sorted, digits));
        qsort(sorted, digits, sizeof(char), compare_function);
        printf("%ld \n", findLargest(original, sorted, digits));
    }

}

int findSmallest(char original[], char sorted[], int digits){
    char copy[200];
    strcpy(copy, original);
    //printf("Original:%s\n", original);
    //printf("SORTED  :%s\n", sorted);
    int i = 0;
    int j = 0;
    int swapPos;
    
    while((copy[i] - '0' == 0 || copy[i] - '0' == 1) && i < 2){
        i++;
    }
    if(copy[1] - '0' == 1 && (copy[0] - '0' == 1 || copy[0] - '0' == 0)){
        i = 1;
    }
    j = i;
    //printf("EXAMINING: ORIGINAL[%d]:%d\n", i, copy[i] - '0');
    swapPos = i;
    int found = 0;
    int largest = 10;
    int largestPos;
    for(;i<digits-1;i++){
        for(j=i+1;j<digits;j++){
            if((copy[i] - '0' > copy[j] - '0')){ 
                if(i != 0 || copy[j] - '0' != 0){
                //printf("%d > %d\n", copy[i] - '0', copy[j] - '0');
                //printf("CONSIDER SWAPPING %d WITH %d\n", copy[i] - '0', copy[j] - '0');
                if(largest > (copy[j] - '0')){
                    largest = copy[j] - '0';
                    largestPos = j;
                    //printf("smallest: %d at position: %d\n", largest, largestPos);
                    found = 1;
                }
                //swapPos = findRight(copy[j],copy, digits);
                //char temp;
                //temp = copy[i];
                //copy[i] = copy[swapPos];
                //copy[swapPos] = temp;
                //return strtol(copy, NULL, 10);
                //break;   
                }
            }
        }
        if(found == 1){
            swapPos = findRight(copy[largestPos], copy, digits); 
            //printf("%s\n", copy);
            //printf("SWAPPING %d with  ORIGINAL[%d]:%d\n", copy[i] - '0', swapPos, copy[swapPos] - '0');
            char temp;
            temp = copy[i];
            copy[i] = copy[swapPos];
            copy[swapPos] = temp;
            return strtol(copy, NULL, 10);
        }
        //printf("outer loop\n");
    }
    

    return strtol(copy, NULL, 10);;
}

int findLargest(char original[] ,char sorted[], int digits){
    char copy[200];
    strcpy(copy, original);
    //printf("Original:%s\n", original);
    //printf("Sorted  :%s\n", sorted);
    int i = 0;
    int swapPos;
    char temp;
    for(i = 0; i < digits; i++){
        if(copy[i] != sorted[i]){
            //printf("%c != %c\n", original[i], sorted[i]);
            swapPos = findRight(sorted[i], copy, digits);
            //printf("Swapping %c & %c\n", original[i], original[swapPos]);
            //printf("i: %d swapPos: %d\n", i, swapPos);
            temp = copy[i];
            copy[i] = sorted[i];
            copy[swapPos] = temp;
            break;
        }
    }   
    return strtol(copy, NULL,10);
}

int findRight(char target, char original[], int digits){
    for(; digits > 0; digits--){
        if(target == original[digits]){
            //printf("%c at %d\n", target, digits);
            return digits;
        }
    }
}
int getLength(long i){
    int digits = 0;
    do{
        ++digits;
        i/=10;
    }while(i);
    return digits;
}

#!/usr/bin/env ruby

require 'set'

# TEMPLATE

def swapped(chars, index1, index2)
  chars[index1], chars[index2] = chars[index2], chars[index1]
  chars.join
end

1.upto(ARGF.readline.to_i) do |case_number|
  number = ARGF.readline.chomp
  number_chars = number.chars
  numbers_hash = number_chars.each_with_index.each_with_object({}){|(c, i), h| (h[c] ||= []) << i}
  digits = numbers_hash.keys.sort

  options = digits.each_with_object(Set.new([number])) do |d, options|
    numbers_hash[d].each do |swap_index|
      digits.each do |other_digit|
        unless  d == other_digit
          numbers_hash[other_digit].each do |other_index|
            unless (other_digit == '0' && swap_index == 0) || (d == '0' && other_index == 0)
              # Can't put 0 in the first spot. Other than that, go ahead and swap.
              options << swapped(number_chars.to_a.dup, swap_index, other_index)
            end
          end
        end
      end
    end
  end.sort

  minimum, maximum = options.first, options.last
  puts "Case ##{case_number}: #{minimum} #{maximum}"
end


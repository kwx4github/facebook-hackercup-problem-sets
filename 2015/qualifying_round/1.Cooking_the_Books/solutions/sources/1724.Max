package qual

import java.io.PrintWriter

import scala.io.Source

object CookingTheBooks {
  def main(args: Array[String]): Unit = {
    val lines = Source.fromFile("src/qual/cooking_the_books.txt").getLines()
    val out = new PrintWriter("src/qual/cbt.out.txt")
    val t = lines.next().toInt
    for (i <- 1 to t) {
      val n = lines.next()
      val (smallest, largest) = solve(n)
      out.println(s"Case #$i: $smallest $largest")
    }
    out.close()
  }

  def solve(n: String) = {
    val arr = n :: gen(n, 0, 1, Nil)
    val sorted = arr.sortBy(_.toLong)
    (sorted.head, sorted.last)
  }

  def gen(n: String, i: Int, j: Int, r: List[String]): List[String] = {
    if (i >= n.length) {
      r
    } else if (j >= n.length) {
      gen(n, i + 1, i + 2, r)
    } else {
      if (i == 0 && n(j) == '0') {
        gen(n, i, j + 1, r)
      } else {
        n.take(i) + n(j) + n.substring(i + 1, j) + n(i) + n.substring(j + 1) :: gen(n, i, j + 1, r)
      }
    }
  }
}

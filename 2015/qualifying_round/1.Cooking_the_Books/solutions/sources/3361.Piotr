import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;


public class ProblemA {

	public static void main(String[] args) throws IOException {
		
		ProblemA solver = new ProblemA();
		solver.init();
		solver.solve();
	}

	private void init() {
		
	}
	
	private void solve() throws IOException {
		 
		Reader in = new Reader(System.in);
		PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
		
		int T = in.nextInt();
		
		for(int t = 1; t <= T; t++) {
			int N = in.nextInt();
			Tuple minMax = getMinMax(N);
			out.println("Case #" + t + ": " + minMax.min + " " + minMax.max);
		}
		
		out.flush();
		out.close();
	}
	
	private Tuple getMinMax(int n) {
		int min = n;
		int max = n;
		char[] str = Integer.valueOf(n).toString().toCharArray();
		for (int i = 0; i < str.length; i++) {
			for (int j = i + 1; j < str.length; j++) {
				swap(str, i, j);
				Integer k = Integer.valueOf(String.valueOf(str));
				if (k.toString().length() == str.length) {
					min = Math.min(min, k);
					max = Math.max(max, k);
				}
				swap(str, i, j);
			}
		}
		
		return new Tuple(min, max);
	}

	private void swap(char[] str, int i, int j) {
		char c = str[i];
		str[i] = str[j];
		str[j] = c;
	}

	class Tuple {
		int min;
		int max;
		public Tuple(int min, int max) {
			super();
			this.min = min;
			this.max = max;
		}
	}
	
	private static class Reader {
		
	    BufferedReader reader;
	    StringTokenizer tokenizer;
	
	    /** call this method to initialize reader for InputStream */
	    Reader(InputStream input) {
	        reader = new BufferedReader(
	                     new InputStreamReader(input) );
	        tokenizer = new StringTokenizer("");
	    }
	
	    /** get next word */
	    public String next() throws IOException {
	        while ( ! tokenizer.hasMoreTokens() ) {
	            //TODO add check for eof if necessary
	            tokenizer = new StringTokenizer(
	                   reader.readLine() );
	        }
	        return tokenizer.nextToken();
	    }
	    
	    public String nextLine() throws IOException {
	    	return reader.readLine();
	    }
	
	    public int nextInt() throws IOException {
	        return Integer.parseInt( next() );
	    }
	    
	    public double nextDouble() throws IOException {
	        return Double.parseDouble( next() );
	    }
	    
	    public long nextLong() throws IOException {
	    	return Long.parseLong(next());
	    }
	}

}

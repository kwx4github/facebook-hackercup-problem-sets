import java.io.*;
import java.util.InputMismatchException;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Alex
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Cooking solver = new Cooking();
		solver.solve(1, in, out);
		out.close();
	}
}

class Cooking {
    public int[] largest(int[] input) {
        for (int i = 0; i < input.length-1; i++) {
            boolean biggerexists = false;
            int biggestval = input[i];
            int biggestindex = 0;
            for (int j = i + 1; j < input.length; j++) {
                if (input[j] >= biggestval && input[j] > input[i]) {
                    biggerexists = true;
                    biggestval = input[j];
                    biggestindex = j;
                }
            }
            if (biggerexists) {
                int temp = input[biggestindex];
                input[biggestindex] = input[i];
                input[i] = temp;
                return input;
            }
        }
        return input;
    }

    public int[] smallest(int[] input) {
        for (int i = 0; i < input.length-1; i++) {
            boolean smallerexists = false;
            int smallestval = input[i];
            int smallestindex = 0;
            for (int j = i + 1; j < input.length; j++) {
                if (input[j] <= smallestval && input[j] < input[i] && (i != 0 || input[j] != 0)) {
                    smallerexists = true;
                    smallestval = input[j];
                    smallestindex = j;
                }
            }
            if (smallerexists) {
                int temp = input[smallestindex];
                input[smallestindex] = input[i];
                input[i] = temp;
                return input;
            }
        }
        return input;
    }

    public void solve(int testNumber, InputReader in, OutputWriter out) {
        int T = in.readInt();
        for (int i = 0; i < T; i++) {
            char[] chararray = in.next().toCharArray();
            int[] numarray = new int[chararray.length];
            for (int j = 0; j < chararray.length; j++) numarray[j] = chararray[j] - '0';
            int[] maxres = largest(numarray.clone()), minres = smallest(numarray.clone());
            out.print("Case #"+(i+1)+": ");
            for (int j = 0; j < minres.length; j++) out.print(minres[j]);
            out.print(" ");
            for (int j = 0; j < maxres.length; j++) out.print(maxres[j]);
            out.printLine();
        }
    }
}

class InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
	private SpaceCharFilter filter;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}
	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			if (Character.isValidCodePoint(c))
				res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	public boolean isSpaceChar(int c) {
		if (filter != null)
			return filter.isSpaceChar(c);
		return isWhitespace(c);
	}

	public static boolean isWhitespace(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
	public String next() {
		return readString();
	}
	public interface SpaceCharFilter {
		public boolean isSpaceChar(int ch);
	}
}

class OutputWriter {
	private final PrintWriter writer;

	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
	}
	public void print(Object...objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}
	public void printLine() {
		writer.println();
	}
	public void close() {
		writer.close();
	}
	public void print(int i) {
		writer.print(i);
	}
}


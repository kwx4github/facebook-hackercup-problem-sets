#include <iostream>
#include <string>
#include <vector>

using namespace std;

vector<int> toV(int N) {
  vector<int> V;
  while (N > 0) {
    V.push_back(N % 10);
    N /= 10;
  }
  return V;
}

int fromV(const vector<int> &V) {
  int x = 0;
  int d = 1;
  int n = V.size();
  for (int i = 0; i < n; ++i) {
    x += d * V[i];
    d *= 10;
  }
  return x;
}

int cooks(int N) {
  vector<int> V = toV(N);
  int n = V.size();
  if (n == 1) {
    return N;
  }

  for (int i = n - 1; i > 0; --i) {
    int x = V[i];
    int y = V[i - 1];
    int p = i - 1;
    for (int j = i - 2; j >= 0; --j) {
      if (V[j] <= y && (V[j] != 0 || i != n - 1)) {
        y = V[j];
        p = j;
      }
    }

    if (y < x && (y != 0 || i != n - 1)) {
      std::swap(V[i], V[p]);
      break;
    }
  }

  return fromV(V);
}

int cookl(int N) {
  vector<int> V = toV(N);
  int n = V.size();
  if (n == 1) {
    return N;
  }

  for (int i = n - 1; i > 0; --i) {
    int x = V[i];
    int y = V[i - 1];
    int p = i - 1;
    for (int j = i - 2; j >= 0; --j) {
      if (V[j] >= y) {
        y = V[j];
        p = j;
      }
    }

    if (y > x) {
      std::swap(V[i], V[p]);
      break;
    }
  }

  return fromV(V);
}

int main(int argc, char *argv[]) {
  int T, N;

  cin >> T;
  for (int i = 0; i < T; ++i) {
    cin >> N;
    cout << "Case #" << (i + 1) << ": " <<
      cooks(N) << ' ' << cookl(N) << endl;
  }

  return 0;
}

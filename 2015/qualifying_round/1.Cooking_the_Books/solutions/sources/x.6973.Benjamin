import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Driver {
	
	private static int t = 0;
	private static int caseNumber = 1;
	
	public static void main(String[] args) {
		try {
			Scanner s = new Scanner(new File("cooking_the_books.txt"));
			t = Integer.parseInt(s.nextLine());
			
			while (t > 0) {
				String n = s.nextLine();
				System.out.println("Case #"+ caseNumber +": " + reorderMin(n,true) +
						" " + reorderMax(n));
				t--;
				caseNumber++;
			}
			s.close();
		}
		catch(FileNotFoundException e) {
			System.out.println("Error: " + e.getMessage()); 
		}
	}
	
	public static String reorderMin(String n, boolean b) {
		// Find smallest digit
		boolean front = b;
		char min = n.charAt(0);
		int minIndex = 0;
		for (int i = 0; i < n.length(); i++) {
			if (n.charAt(i) <= min) {
				if (n.charAt(i) != '0') {
					min = n.charAt(i);
					minIndex = i;
				}
				else if (!front) {
					min = n.charAt(i);
					minIndex = i;
				}
			}
		}
		
		// Swap
		char first = n.charAt(0);
		if (minIndex != 0)
			return Character.toString(min) + n.substring(1, minIndex) +
					Character.toString(first) + n.substring(minIndex+1);
		else if (n.length() > 1)
			return Character.toString(first) + reorderMin(n.substring(1),false);
		else return n;
	}
	
	public static String reorderMax(String n) {
		// Find largest digit
		char max = n.charAt(0);
		int maxIndex = 0;
		for (int i = 0; i < n.length(); i++) {
			if (n.charAt(i) >= max) {
				max = n.charAt(i);
				maxIndex = i;
			}
		}
		
		// Swap
		char first = n.charAt(0);
		if (maxIndex != 0 && first != max)
			return Character.toString(max) + n.substring(1, maxIndex) +
					Character.toString(first) + n.substring(maxIndex+1);
		else if (n.length() > 1)
			return Character.toString(first) + reorderMax(n.substring(1));
		else return n;
	}
}
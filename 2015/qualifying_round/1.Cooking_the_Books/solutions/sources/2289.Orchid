/**
 *@author:  Orchid
 *@Problem: Cooking the Books
 *@Contest: Hacker Cup '15
 */
#include<bits/stdc++.h>
#define ULLI unsigned long long int
#define LLI long long int
#define pb push_back
#define mem(a,p) memset(a,p,sizeof(a))
#define fi first
#define se second
#define mp make_pair
#define mt make_tuple
#define bitcount __builtin_popcount
#define checkbit(n,b) ((n>>b)&1)
#define gcd __gcd
#define rep(i,a,b) for(int i=a;i<b;++i)
#define all(a) a.begin(),a.end()
#define sz(a) ((int)(a.size()))
#define DREP(a) sort(all(a));a.erase(unique(all(a)),a.end())
#define ns ios_base::sync_with_stdio(false);cin.tie(0)
using namespace std;
#define VI vector<int>
#define PII pair<int,int>
#define MOD 1000000007LL
#define EPS 1e-12
#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif

//only for C++11; call as debug(x,y,z,...)
#define debug(args...)  { vector<string> _v; string _s = #args;    \
                          replace(_s.begin(), _s.end(), ',', ' '); \
                          splitstr(_s, _v); err(_v.begin(), args); }
void splitstr(const string &s, vector<string> &v) {
    istringstream in(s);
    copy(istream_iterator<string>(in), istream_iterator<string>(), back_inserter(v));
}
void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
    cerr << *it << " = " << a << '\n';
    err(++it, args...);
}

//call as read<int>()
template<class T>
inline T read() {
    T ret = 0;
    bool neg = false;
    char c = gc();
    while((c < '0' || c > '9') && (c != '-')) {
        c = gc();
    }
    if(c == '-') {
        neg = true, c = gc();
    }
    while(c >= '0' && c <= '9') {
        ret = 10 * ret + c - 48;
        c = gc();
    }
    if(neg) {
        ret = -ret;
    }
    return ret;
}

LLI stringToLong(char s[]) {
    int len = strlen(s);
    LLI val = 0;
    rep(i, 0, len) {
        val = val * 10L + (LLI)(s[i] - '0');
    }
    return val;
}

LLI getMin(char s[]) {
    LLI orig = stringToLong(s);
    LLI ans = orig;
    int len = strlen(s);
    char sc[len];
    strcpy(sc, s);
    rep(i, 0, len) {
        rep(j, i + 1, len) {
            if(i == 0 && sc[j] == '0') {
                continue;
            }
            swap(sc[i], sc[j]);
            LLI val = stringToLong(sc);
            if(val < orig && val < ans) {
                ans = val;
            }
            swap(sc[i], sc[j]);
        }
    }
    return ans;
}

LLI getMax(char s[]) {
    LLI orig = stringToLong(s);
    LLI ans = orig;
    int len = strlen(s);
    char sc[len];
    strcpy(sc, s);
    rep(i, 0, len) {
        rep(j, i + 1, len) {
            if(i == 0 && sc[j] == '0') {
                continue;
            }
            swap(sc[i], sc[j]);
            LLI val = stringToLong(sc);
            if(val > orig && val > ans) {
                ans = val;
            }
            swap(sc[i], sc[j]);
        }
    }
    return ans;
}

int main() {
    freopen("cooking_the_books.txt","r",stdin);
    freopen("a.out","w",stdout);
    int t, cs = 1;
    char s[50];
    scanf("%d", &t);
    getchar();
    while(t--) {
        scanf("%s", s);
        getchar();
        LLI minv = getMin(s);
        LLI maxv = getMax(s);
        cout << "Case #" << (cs++) << ": " << minv << " " << maxv << "\n";
    }
    return 0;
}

#!/usr/bin/env python


#
# Helper Functions
#

# Gives the order of digits that minimizes the resulting number while retaining
# the effective number of digits (meaning, the first digit is not a zero)
def minSort( num ):
   result = sorted( str( num ) )
   if result[ 0 ] != '0':
      return result
   numDigits = len( result )
   for pos in range( 1, numDigits ):
      if result[ pos ] != '0':
         result[ 0 ] = result[ pos ]
         result[ pos ] = '0'
         break
   return result

# Gives the order of digits that maximizes the resulting number
def maxSort( num ):
   return sorted( str( num ), reverse=True )

# Swaps the digits at the two given positions in a number
def digitSwap( num, pos1, pos2 ):
   if pos1 > pos2:
      temp = pos1
      pos1 = pos2
      pos2 = temp
   result = str( num )
   result = ( result[ 0 : pos1 ] + result[ pos2 ] + result[ pos1 + 1 : pos2 ] +
              result[ pos1 ] + result[ pos2 + 1 : ] )
   return int( result )

# Uses a maximum of one digit swap to minimize or maximize the given number
def transform( num, maximize=True ):
   if num < 10:
      return num
   if maximize:
      idealOrder = maxSort( num )
   else:
      idealOrder = minSort( num )
   numStr = str( num )
   numLen = len( numStr )
   for pos1 in range( 0, numLen - 1 ):
      if numStr[ pos1 ] != idealOrder[ pos1 ]:
         pos2 = numStr.rfind( idealOrder[ pos1 ], pos1 + 1 )
         if pos2 >= 0:
            num = digitSwap( num, pos1, pos2 )
            break
   return num


#
# Main Function
#

def main():
   T = int( raw_input() )
   for i in range( 0, T ):
      N = int( raw_input() )
      minimum = transform( N, maximize=False )
      maximum = transform( N, maximize=True )
      print( "Case #%d: %d %d" % ( i + 1, minimum, maximum ) )


if __name__ == "__main__":
   main()



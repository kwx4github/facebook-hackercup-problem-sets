var index = 0,
    fs = require('fs'),
    readline = require('readline'),
    opStream = fs.createWriteStream("op.txt"),
    max = 100;

var rd = readline.createInterface({
    input: fs.createReadStream('cooking_the_books.txt'),
    output: process.stdout,
    terminal: false
});

function cookBookCombo(line) {
    'use strict';
    var numStringArr = line.split(""),
        digitsArr = numStringArr.map(function(ns) {
            return parseInt(ns);
        }),
        numDigits = digitsArr.length,
        ret = [],
        firstDigit = digitsArr[0],
        cmpArr,
        minDigit = firstDigit,
        minDigitIndex = 0,
        maxDigit = firstDigit,
        maxDigitIndex = 0,
        flip, i, cmpLen, clone;
    //console.log("Evaluating " + line);
    if (firstDigit) {
        if (numDigits > 1) {
            cmpArr = digitsArr.slice(1);
            cmpLen = cmpArr.length;
            //console.log("Comparing " + firstDigit + " against ");
            //console.log(cmpArr);
            for (i = 0; i < cmpLen && cmpArr[i] != 0; i++) {
                if (minDigit > cmpArr[i]) {
                    minDigitIndex = i + 1;
                    minDigit = cmpArr[i]
                }
                if (maxDigit < cmpArr[i]) {
                    maxDigitIndex = i + 1;
                    maxDigit = cmpArr[i];
                }
            }
            //console.log("Min digit " + minDigit + " at " + minDigitIndex);
            //console.log("Max digit " + maxDigit + " at " + maxDigitIndex);

            if (minDigitIndex) {
                clone = digitsArr.slice();
                clone[minDigitIndex] = firstDigit;
                clone[0] = minDigit;
                ret[0] = clone.join('');
            } else {
                ret[0] = digitsArr.join('');
            }

            if (maxDigitIndex) {
                clone = digitsArr.slice();
                clone[maxDigitIndex] = firstDigit;
                clone[0] = maxDigit;
                ret[1] = clone.join('');
            } else {
                ret[1] = digitsArr.join('');
            }
            //console.log(ret);

            
        } else {
          ret = [ firstDigit, firstDigit ];
        }        
    } else{
      ret = [ firstDigit, firstDigit ];
    }
    
    return ret;
}


opStream.once('open', function() {
    rd.on('line', function(line) {
        if (index > 0 && index <= max) {
            opStream.write("Case #" + index + ": " +
                cookBookCombo(line).join(" ") + "\n");
        } else if (index == 0) {
            max = parseInt(line);
        }

        index++;

    });
});
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class CookingTheBooks {

	private void cookThisInput(int input) throws IOException {
		if(input<10){
			//bw.write(input + " ");
			//bw.write(input);
			System.out.print(input + " ");
			System.out.println(input);
			return;
		}
		char[] inputVal = String.valueOf(input).toCharArray();
		int[] minVals = findMin(inputVal, 0);
		int[] maxVals = findMax(inputVal,0);
		String inputString = String.valueOf(input);
		String outputMin = "";
		String outputMax = "";
		if (minVals[0] == -1) {
			outputMin = inputString;
		} else {
			
			outputMin = inputString.substring(0,minVals[1])+String.valueOf(inputVal[minVals[0]])
					+ inputString.substring(minVals[1]+1, minVals[0])
					+ String.valueOf(inputString.charAt(minVals[1]))
					+ inputString.substring(minVals[0] + 1);
		}
		if (maxVals[0] == -1) {
			outputMax = inputString;
		} else {
			
			outputMax = inputString.substring(0,maxVals[1])+String.valueOf(inputVal[maxVals[0]])
					+ inputString.substring(maxVals[1]+1, maxVals[0])
					+ String.valueOf(inputString.charAt(maxVals[1]))
					+ inputString.substring(maxVals[0] + 1);
		}
	//	bw.write(outputMin + " ");
	//	bw.write(outputMax);
	//	bw.flush();
	//	bw.newLine();
		System.out.print(outputMin + " ");
		System.out.println(outputMax);

	}

	private int[] findMin(char[] arr, int startMin) {
		int[] minVals = {startMin, startMin};

		for (int x = startMin; x < arr.length; x++) {
			char c = arr[x];
			if (c == '0') {
				continue;
			}
			if (arr[minVals[0]] > (int) c) {
				minVals[0] = x;
			}
			

		}
		if (minVals[0] == startMin) {
			if (startMin != arr.length - 1) {
			return	findMin(arr, startMin + 1);
			} else {
				
				minVals[0] = -1;
			}

		}
		return minVals;
	}
	
	private int[] findMax(char[] arr, int startMax) {
		int[] maxVals = {startMax, startMax};

		for (int x = startMax; x < arr.length; x++) {
			char c = arr[x];
			if (c == '0') {
				continue;
			}
			if (arr[maxVals[0]] <= (int) c) {
				maxVals[0] = x;
			}
			

		}
		if (maxVals[0] == startMax) {
			if (startMax != arr.length - 1) {
			return	findMax(arr, startMax + 1);
			} else {
				
				maxVals[0] = -1;
			}

		}
		return maxVals;
	}

	public static void main(String[] args) throws NumberFormatException, IOException {

		BufferedReader br = new BufferedReader(new FileReader("C:/Users/Karuna/Desktop/ip/cooking_the_books.txt"));
		//BufferedWriter bw = new BufferedWriter(new FileWriter("C:/Users/Karuna/Desktop/ip/cooking_the_books_example_ouputMine.txt"));
		CookingTheBooks obj = new CookingTheBooks();
		int numInputReads = Integer.parseInt(br.readLine());
		for (int i = 1; i <= numInputReads; i++) {
			//bw.write("Case #"+i+": ");
			System.out.print("Case #"+i+": ");
			obj.cookThisInput(Integer.parseInt(br.readLine()));
			
		}
		br.close();
		//bw.close();
	}
}

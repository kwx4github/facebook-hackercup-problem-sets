package com.jasonandmary.qualification1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

/**
 * Application for Facebook Hacker Cup 2015
 * Name: ${name}
 * &copy;2015 Jason W. Thompson
 * @author Jason W. Thompson
 */
public class App
{
    private final PrintStream printStream;
    private final List<Problem> problems = new ArrayList<>();
    private int count;

    /**
     * Executes the application.
     * @param args not used.
     * @throws IOException if there is problem reading the input file or writing the PrintStream.
     */
    public static void main(String[] args) throws IOException
    {
        final App app = new App(System.out);
        app.printSolution();
    }

    /**
     * Allocates a new instance of {@link App}
     * @param printStream The PrintStream to use
     * @throws IOException If the input cannot be processed
     */
    public App(PrintStream printStream) throws IOException
    {
        this.printStream = printStream;
    }

    /**
     * The problem.
     */
    public static class Problem
    {
        String number;
    }

    /**
     * Solves the problem
     * @param problem The problem
     * @return The solution.
     */
    private String solve(Problem problem)
    {
        final String number = problem.number;
        final int length = number.length();
        if (length == 1)
        {
            return number + " " + number;
        }

        // Find character to swap with
        int smallSwapIndex = 0;
        int smallestValue = 9;
        int bigSwapIndex = 0;
        int biggestValue = 0;
        for (int i = 0; i < length; i++)
        {
            final int charValue = Character.getNumericValue(number.charAt(i));
            if (charValue <= smallestValue && charValue != 0)
            {
                smallSwapIndex = i;
                smallestValue = charValue;
            }
            if (charValue >= biggestValue)
            {
                bigSwapIndex = i;
                biggestValue = charValue;
            }
        }
        final char firstDigit = number.charAt(0);

        final char[] smallestNumberArray = number.toCharArray();
        smallestNumberArray[0] = smallestNumberArray[smallSwapIndex];
        smallestNumberArray[smallSwapIndex] = firstDigit;
        final long smallestNumber = Long.parseLong(new String(smallestNumberArray));

        final char[] biggestNumberArray = number.toCharArray();
        biggestNumberArray[0] = biggestNumberArray[bigSwapIndex];
        biggestNumberArray[bigSwapIndex] = firstDigit;
        final long biggestNumber = Long.parseLong(new String(biggestNumberArray));

        return smallestNumber + " " + biggestNumber;
    }

    /**
     * Parses the input into a problem
     * @param str The input
     * @param reader The reader.
     * @return The parsed object
     */
    private static Problem parseProblem(String str, BufferedReader reader)
    {
        final Problem problem = new Problem();
        problem.number = str;
        return problem;
    }

    /**
     * Prints the solution to the input file.
     * @throws IOException if there is problem reading the input file or writing the PrintStream.
     */
    public void printSolution() throws IOException
    {
        processInput();
        for (int i = 0; i < count; i++)
        {
            printStream.println("Case #" + (i + 1) + ": " + solve(problems.get(i)));
        }
    }

    private void processInput() throws IOException
    {
        final BufferedReader reader = new BufferedReader(new InputStreamReader(App.class.getClassLoader().getResourceAsStream("input.txt")));
        count = Integer.parseInt(reader.readLine());
        for (int i = 0; i < count; i++)
        {
            problems.add(parseProblem(reader.readLine(), reader));
        }
    }
}

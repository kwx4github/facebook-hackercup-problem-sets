/*
 * 
 */
package facebookhackercupqualifier15;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

/**
 *
 * @author John
 */
public class FacebookHackerCupQualifier15 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
        
        Scanner     inputStream     = null;
        PrintStream outputStream    = null;
        
        
        int numberOfProblems = 99;          // Just an initialization value.
        
        String[] input          = new String [100];  
        String[] highestNumbers = new String [100];
        String[] lowestNumbers  = new String [100];
        
        
        try
        {
            inputStream     = new Scanner       (new File("input.txt"));
            outputStream    = new PrintStream   (new FileOutputStream("output.txt"));
            
            if(inputStream.hasNextInt())
            {
                numberOfProblems = inputStream.nextInt();
                
                if(numberOfProblems > 100)
                {
                    // I have been misinformed!!!
                    numberOfProblems = 100;
                }
            }
            
            inputStream.nextLine(); // getting rid of the \n on the 1st line.
            
            for(int i = 0; inputStream.hasNextInt() && i < numberOfProblems; i++)
            {
                input[i] = inputStream.nextLine();
                
                highestNumbers[i]   = findHighest(input[i]);
                lowestNumbers[i]    = findLowest(input[i]);
                
                System.out.println  ("Case #" + (i + 1) + ": " + lowestNumbers[i] + " " + highestNumbers[i]);
                outputStream.println("Case #" + (i + 1) + ": " + lowestNumbers[i] + " " + highestNumbers[i]);
            }
            
            
        }
        finally
        {
            if (inputStream != null)
            {
                inputStream.close();
            }
            if (outputStream != null)
            {
                outputStream.close();
            }
        }
    }
    
    static private String findHighest(String base)
    {
        //  Since this problem revolves around swapping digits, it is easiest to
        //  compare the digits.
        int first = 0;      //  The position of the first digit to be swapped.
        int second = 0;     //  The position of the second digit to be swapped.
        
        // 'first' should always be the leftmost digit, unless it is larger than
        // all digits to the right of it. Then, it should be the next-leftmost,
        // etc.
        // Similarly, 'second' should always be the biggest digit right of 'first' bigger than 'first'
        // UNLESS there is more than one of those digits right of 'first'. Then
        // it needs to be the rightmost of those.
        // Ex : 321 -> 321      first = 0, second = 0, Do nothing
        //      213 -> 312      first = 0, second = 2, Swap
        //      957 -> 975      first = 1, second = 2, Swap
        //      199 -> 991      first = 0, second = 2, Swap
        
        int numberOfIterations = base.length() - 1;
        
        for(int j = 0; j < numberOfIterations; j++)
        {
            for(int i = j + 1; i <= numberOfIterations; i++)
            {
                if(base.charAt(i) > base.charAt(j))
                {
                    if(second == 0 || base.charAt(i) >= base.charAt(second))
                    {
                        first = j;
                        second = i;
                    }
                }
            }
            
            if(second != 0)
            {
                break;
            }
        }
        
        if(second == 0)
        {
            return base;
        }
        
        return  base.substring(0, first) + base.charAt(second) + 
                base.substring(first + 1, second) + base.charAt(first) + 
                base.substring(second + 1);
        
    }
    
    static private String findLowest(String base)
    {
        //  Since this problem revolves around swapping digits, it is easiest to
        //  compare the digits.
        int first = 0;      //  The position of the first digit to be swapped.
        int second = 0;     //  The position of the second digit to be swapped.
        
        // 'first' should always be the leftmost digit, unless it is larger than
        // all digits to the right of it. Then, it should be the next-leftmost,
        // etc.
        // Similarly, 'second' should always be the smalles nonzero digit right 
        // of 'first' smaller than 'first' UNLESS there is more than one of 
        // those digits right of 'first'. Then it needs to be the rightmost of those.
        // Ex : 321 -> 123      first = 0, second = 2, Swap
        //      213 -> 123      first = 0, second = 1, Swap
        //      957 -> 597      first = 0, second = 1, Swap
        //      199 -> 199      first = 0, second = 0, Do nothing
        
        int numberOfIterations = base.length() - 1;
        
        for(int j = 0; j < numberOfIterations; j++)
        {
            for(int i = j + 1; i <= numberOfIterations; i++)
            {
                if(base.charAt(i) < base.charAt(j))
                {
                    if(second == 0 || base.charAt(i) <= base.charAt(second))
                    {
                        if (first == 0 && base.charAt(i) == '0')
                        {
                            // Skip this. 0 is not allowed to be the leading digit.
                        }
                        else
                        {
                            first = j;
                            second = i;
                        }
                    }
                }
            }
            
            if(second != 0)
            {
                break;
            }
        }
        
        if(second == 0)
        {
            return base;
        }
        
        return  base.substring(0, first) + base.charAt(second) + 
                base.substring(first + 1, second) + base.charAt(first) + 
                base.substring(second + 1);
    }
}

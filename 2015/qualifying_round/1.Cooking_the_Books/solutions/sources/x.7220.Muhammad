#include<iostream>
#include<algorithm>
#include<fstream>
#include<sstream>
#include<string>
#include<vector>
using namespace std;

vector<int> digits(int x)
{
	vector<int> returnValue, exactValue;
	while (x >= 10)
	{
		returnValue.push_back(x % 10);//take digit
		x = x / 10; //or x/=10 if you like brevity
	}
	//don't forget the last digit!
	returnValue.push_back(x);
	while (returnValue.empty() != true)
	{
		exactValue.push_back(returnValue.back());
		returnValue.pop_back();
	}
	return exactValue;
}


void MinMax(vector<int>x, int &MIN, int &MAX)
{
	if (x.size()>1)
	{
		vector<int> temp;
		for (int i = 1; i < x.size(); i++)
		if (x.at(i)!=0)
			temp.push_back(x.at(i));

		sort(temp.begin(), temp.end());
		if (temp.size()>0)
		{
			MIN = temp.at(0);
			MAX = temp.at(temp.size() - 1);
		}
	}
	else
	{
		MIN = -1;
		MAX = -1;
	}
}
int main()
{
	int T, N, min = -1, max = -1;
	vector<int>arr,low,high;
	ifstream fin("cooking_the_books.txt");
	ofstream fout("output.txt");
	fin >> T;

	for (int i = 0; i < T; i++)
	{
		fout << "Case #" << i + 1 << ": ";
		fin >> N;
		
		arr = digits(N);
		low = arr;
		high = arr;
		if (arr.size() == 1)
		{
			for (int j = 0; j < arr.size(); j++)
				fout << arr.at(j);
			fout << " ";
			for (int j = 0; j < arr.size(); j++)
				fout << arr.at(j);
			goto end;
		}
		
		MinMax(arr, min, max);
		//cout << min << " " << max;
		if (min < low.at(0) )
		{
			if (min != -1)
			{
				for (int j = 1; j < low.size(); j++)
				{
					if (low.at(j) == min)
					{
						swap(low.at(0), low.at(j));
						break;
					}
				}

			}
		}

		if (max > low.at(0))
		{
			if (max != -1)
			{
				for (int j = 1; j < high.size(); j++)
				{
					if (low.at(j) == max)
					{
						swap(high.at(0), high.at(j));
						break;
					}
				}

			}
		}

		for (int j = 0; j < low.size(); j++)
			fout << low.at(j);
		fout << " ";
		for (int j = 0; j < high.size(); j++)
			fout << high.at(j);
	end:

		arr.clear();
		low.clear();
		high.clear();
		fout << endl;
	}


}
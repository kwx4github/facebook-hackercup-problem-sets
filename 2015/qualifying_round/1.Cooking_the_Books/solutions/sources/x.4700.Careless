/**Bismillahir Rahmanir Rahim**/
/**
 *    @author     : Nazmul Islam
 *    @College    : CUET CSE 11
 *    @Topcoder   : nazmul_islam
 *    @CodeForces : nazmul_islam
 *    @UVA        : nazmul_cuet11
 *    @link       : https://www.facebook.com/nazmul.shohagh
 */

#include <bits/stdc++.h>

using namespace std;

typedef long long          ll;
typedef unsigned long long llu;

#define ft        first
#define sd        second
#define mp        make_pair
#define pb(x)     push_back(x)
#define lcm(x,y)  x*y/__gcd(x,y)
#define all(x)    x.begin(),x.end()
#define allr(x)   x.rbegin(),x.rend()
#define MAX(a)    (*max_element(all(a)))
#define MIN(a)    (*min_element(all(a)))
#define mem(a,b)  memset(a,b,sizeof(a))
#define inf       1e9
#define eps       1e-9
#define mod       1000000007
#define NN        30100

int dir_x[]={1,0,-1, 0,-1,-1,+1,+1};
int dir_y[]={0,1, 0,-1,-1,+1,-1,+1};

struct st
{
    ll p,c,f;
};

st food[30];

ll AmountP,AmountC,AmountF,n;

bool knapsack(ll sumP,ll sumC,ll sumF,ll i)
{
    if(i>n)
        return false;
    if(sumP==AmountP&&sumC==AmountC&&sumF==AmountF)
        return true;

    bool ret1=false,ret2=false;
    if(sumP+food[i].p<=AmountP&&sumC+food[i].c<=AmountC&&sumF+food[i].f<=AmountF)
    {
        ret1=knapsack(sumP+food[i].p,sumC+food[i].c,sumF+food[i].f,i+1);
        ret2=knapsack(sumP,sumC,sumF,i+1);
    }
    else
        ret2=knapsack(sumP,sumC,sumF,i+1);
    return ret1 | ret2;
}

int main()
{
    freopen("cooking_the_books.txt","r",stdin);
    freopen("out.txt","w",stdout);
    ll testCase,caseNo = 1;
    string str,cpy;
    cin>>testCase;
    while(testCase--)
    {
        cin>>str;
        cpy = str;
        ll len = str.size();
        ll mn = 100;
        ll temp = -1;

        for(ll i=1; i<len; i++)
        {
            if(str[i]<str[0]&&str[i]!='0'&&str[i]-'0'<mn)
            {
                mn = str[i]-'0';
                temp = i;
            }
        }

        if(temp!=-1)
        {
            char aux = str[0];
            str[0] = str[temp];
            str[temp] = aux;
        }

        temp = -1;
        ll mx = -1;
        for(ll i=1; i<len; i++)
        {
            if(cpy[i]>str[0]&&str[i]-'0'>mx)
            {
                mx = str[i]-'0';
                temp = i;
            }
        }

        if(temp!=-1)
        {
            char aux = cpy[0];
            cpy[0] = cpy[temp];
            cpy[temp] = aux;
        }

        cout<<"Case #"<<caseNo++<<": "<<str<<" "<<cpy<<"\n";
    }
}

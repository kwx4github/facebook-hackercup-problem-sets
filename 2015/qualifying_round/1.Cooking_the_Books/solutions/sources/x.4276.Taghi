package Qualification;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class CookingTheBook {
	
	public static void main(String[] args) throws FileNotFoundException {
		FileInputStream stream = new FileInputStream(new File("C:\\Users\\tagi1_000\\Downloads\\cooking_the_books.txt"));
		Scanner scanner = new Scanner(stream);
		
		PrintWriter outFile = new PrintWriter("C:\\Users\\tagi1_000\\Downloads\\solutions.txt");
		
		
		int numberOfCases = scanner.nextInt();
		for (int i=0;i<numberOfCases;i++)
		{
			long nextNumber = scanner.nextLong();
			long max = maxNumber(nextNumber);
			long min = minNumber(nextNumber);
			// Now, have two numbers. Swapped of course
			outFile.println("Case #" + (i + 1) + ": " + min + " " + max);
		}
		outFile.close();
		scanner.close();
	}
	
	public static long maxNumber(long number)
	{
		if (number == 0)
			return number;
		int index = 0;
		long original = number;
		long max = 0;
		int i = 0;
		while (number != 0)
		{
			long numberAt = number % 10;
			number = number / 10;
			if (numberAt >= max)
			{
				index = i;
				max = numberAt;
			}
			i++;
		}
		index = i - index - 1; // -1 for zero indexing
		// numbers at 0 and i should be swapped.
		String help = String.valueOf(original);
		if (index != 0)
			help = help.substring(index,index+1) + help.substring(1,index) + help.substring(0,1) + help.substring(index+1);
		Long answer = Long.valueOf(help);
		return answer;
	}
	
	public static long minNumber(long number)
	{
		if (number == 0)
			return number;
		int index = 0;
		long original = number;
		long min = 10;
		int i = 0;
		while(number != 0)
		{
			long numberAt = number % 10;
			number = number / 10;
			if (numberAt <= min && numberAt > 0)
			{
				index = i;
				min = numberAt;
			}
			i++;
		}
		index = i - index - 1;
		String help = String.valueOf(original);
		if (index != 0)
			help = help.substring(index,index+1) + help.substring(1,index) + help.substring(0,1) + help.substring(index+1);
		return Long.valueOf(help);
	}

}

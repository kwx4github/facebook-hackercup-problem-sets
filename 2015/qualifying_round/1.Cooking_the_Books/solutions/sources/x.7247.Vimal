#include <stdio.h>
#include <string.h>
char max_output[100][20];
char min_output[100][20];
#define CONVERT_CHAR_TO_DIGIT(x) (x-48)
//#define DEBUG
#ifdef DEBUG
#define LOG printf
#else
#define LOG //
#endif

void swap(char *c,char *d)
{
  char temp = *c;
 *c = *d;
 *d = temp;
}
int main(int argc, char *argv[])
{
  int NumofTestCases = 0;
  char input[100][20];
  scanf("%d",&NumofTestCases);
  int counter = 0 ,i=0;
  while(counter < NumofTestCases)
  {
    scanf("%s",input[i]);
    calculate_minmax(input[i],i);
    i++;
    counter++;
  }  
  for(counter= 0 ; counter < NumofTestCases ; counter++)
  {
    printf("case #%d: %s %s \n", counter+1,min_output[counter],max_output[counter]);
  } 
  return 0;
}

int calculate_minmax(char *str,int testcase)
{
  int len = 0 ;
  int min_index = -1;
  int max_index = -1;
  len = strlen(str);
  int min_digit = 10 , max_digit = -1 ;
  int min_done=0,max_done=0,i;
//  min_digit = max_digit = str[0] - 48 ; 
  while(len > 0)
  { 
    //min index calculate
    if(min_digit >  CONVERT_CHAR_TO_DIGIT(str[len-1]))
      {
 	min_index = len-1;
        min_digit = CONVERT_CHAR_TO_DIGIT(str[len-1]);
      }
   //max index calculate
    if(max_digit < CONVERT_CHAR_TO_DIGIT(str[len-1]))
     {
        max_index = len -1;
        max_digit = CONVERT_CHAR_TO_DIGIT(str[len-1]);
     } 
    len--;
  }
 LOG("Min digit %d , min_pos %d \n Max Digit %d max_pos %d \n",min_digit,min_index,max_digit,max_index); 
 strncpy(max_output[testcase],str,strlen(str));
 strncpy(min_output[testcase],str,strlen(str));
 for(i=0;i < strlen(str); i++)
 {
   if((CONVERT_CHAR_TO_DIGIT(str[i]) > min_digit) && !min_done && i < min_index )
    { 
      LOG("swapping pos %d with minpos %d \n",i,min_index);
      if((i==0 && min_digit!=0 ) || ( i != 0 ))
      {
      swap(&(min_output[testcase][min_index]),&(min_output[testcase][i]));
      min_done = 1;
      }
    }
   
   if((CONVERT_CHAR_TO_DIGIT(str[i]) < max_digit ) && !max_done && i < max_index)
    { 
      LOG("swapping pos %d with max pos %d \n",i,max_index);
      swap(&(max_output[testcase][max_index]),&(max_output[testcase][i]));
      max_done = 1;
    }
   if(min_done && max_done)
   {
        break;
   }
 }
}



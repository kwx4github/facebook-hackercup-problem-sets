package main

import (
	"fmt"
	"bufio"
	"os"
	"strconv"
)

func main() {

	inFile, _ := os.Open("cooking_the_books.txt")
	defer inFile.Close()
	scanner := bufio.NewScanner(inFile)
	scanner.Split(bufio.ScanLines) 
  
	outFile, _ := os.Create("output.txt")
	defer outFile.Close()
	w := bufio.NewWriter(outFile)
  
	t := 0
  
	for scanner.Scan() {
		
		if t == 0 {
			scanner.Text()
		} else {
		
			arr := arrayify(scanner.Text())
			
			originalarr := make([]int, len(arr))
			copy(originalarr, arr)
		
			fmt.Fprintf(w, "Case #%d: %s %s\n", t, mina(arr, 0), maxa(originalarr, 0))
		}
		t++
	}
	
	w.Flush()
}

func arrayify(str string) []int {

	arr := make([]int, len(str))
	for i, r := range str {
		arr[i] = int(r - '0')
	}
	return arr
}


func stringify(arr []int) (str string) {
	for _, i := range arr {
		str += strconv.Itoa(i)
	}
	return
}

// parameters: array and current index
func maxa(arr []int, idx int) string {

	if idx + 1 >= len(arr) { // the end
		return stringify(arr)
	}
	
	old := arr[idx]
	max := idx
	
	for i := idx + 1; i < len(arr); i++ {
		if arr[i] > arr[max] {
			max = i
		}
	}
	
	if arr[max] != old {
		// swap
		arr[idx] = arr[max]
		arr[max] = old
		return stringify(arr)
	}

	return maxa(arr, idx+1)
}

func mina(arr []int, idx int) string {

	if idx + 1 >= len(arr) { // the end
		return stringify(arr)
	}

	old := arr[idx]
	min := idx
	
	for i := idx+1; i < len(arr); i++ {
		if arr[i] < arr[min] && !(arr[i] == 0 && idx == 0) {
			min = i
		}
	}
	
	if arr[min] != old {
		// swap
		arr[idx] = arr[min]
		arr[min] = old
		return stringify(arr)
	}

	return mina(arr, idx+1)
}
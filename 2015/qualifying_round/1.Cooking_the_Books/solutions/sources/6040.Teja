package fbhkrcup;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;

public class CookingTheBooks {

	private static class ArrayIndexComparator implements Comparator<Integer> {
		protected char[] arr;

		public ArrayIndexComparator(char[] arr) {
			this.arr = arr;
		}

		public Integer[] createIndexArray() {
			Integer[] indices = new Integer[arr.length];
			for (int i = 0; i < arr.length; i++) {
				indices[i] = i;
			}
			return indices;
		}

		@Override
		public int compare(Integer indx1, Integer indx2) {
			return arr[indx1] - arr[indx2];
		}

	}

	public static void main(String[] args) throws NumberFormatException,
			IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());

		char[][] allCArr = new char[T][];
		for (int t = 0; t < T; t++) {
			allCArr[t] = br.readLine().toCharArray();
		}

		for (int t = 0; t < T; t++) {
			ArrayIndexComparator comparator = new ArrayIndexComparator(
					allCArr[t]);
			Integer[] indices = comparator.createIndexArray();
			Arrays.sort(indices, comparator);
			String minNum = cookMinNumber(allCArr[t], indices);
			String maxNum = cookMaxNumber(allCArr[t], indices);

			System.out.println("Case #" + (t + 1) + ": " + minNum + " "
					+ maxNum);
		}
	}

	private static String cookMinNumber(char[] cArr, Integer[] indices) {
		boolean swapped = false;
		int swappedI = -1;
		int swappedJ = -1;
		for (int i = 0, sortIndx = 0; i < cArr.length; i++, sortIndx++) {
			if (i == 0 && cArr[indices[sortIndx]] == '0') {
				char nonZeroMin = cArr[indices[sortIndx]];
				int j=sortIndx;
				for (; j<indices.length; j++) {
					if (cArr[indices[j]] != cArr[indices[sortIndx]]) {
						nonZeroMin = cArr[indices[j]];
						break;
					}
				}
				if(cArr[i] != nonZeroMin) {
					sortIndx = j-1;
					i--;
				}
				else {
					sortIndx--;
				}
			} else if (cArr[indices[sortIndx]] < cArr[i]) {
				swapped = true;
				swappedI = i;
				swappedJ = indices[sortIndx];
				for (int j = sortIndx + 1; j < indices.length; j++) {
					if (cArr[indices[j]] == cArr[indices[sortIndx]]) {
						swappedJ = indices[j];
					} else {
						break;
					}
				}
				swap(cArr, swappedI, swappedJ);
				break;
			}
		}
		String str = new String(cArr);
		if (swapped) {
			swap(cArr, swappedJ, swappedI);
		}
		return str;
	}

	private static String cookMaxNumber(char[] cArr, Integer[] indices) {
		boolean swapped = false;
		int swappedI = -1;
		int swappedJ = -1;
		for (int i = 0, sortIndx = cArr.length - 1; i < cArr.length; i++, sortIndx--) {
			if (cArr[indices[sortIndx]] > cArr[i]) {
				swapped = true;
				swappedI = i;
				swappedJ = indices[sortIndx];
				for (int j = sortIndx + 1; j < indices.length; j++) {
					if (cArr[indices[j]] == cArr[indices[sortIndx]]) {
						swappedJ = indices[j];
					} else {
						break;
					}
				}
				swap(cArr, swappedI, swappedJ);
				break;
			}
		}
		String str = new String(cArr);
		if (swapped) {
			swap(cArr, swappedJ, swappedI);
		}
		return str;
	}

	private static void swap(char[] cArr, int i, int j) {
		Character tmp = cArr[i];
		cArr[i] = cArr[j];
		cArr[j] = tmp;
	}
}

import java.io.*;
import java.util.Arrays;
import java.util.Locale;
import java.util.StringTokenizer;

public class Main {

    private static BufferedReader in;
    private static PrintWriter out;
    private static StringTokenizer tok = new StringTokenizer("");

    public static void main(String[] args) {
        try {
            if (System.getProperty("ONLINE_JUDGE") != null) {
                in = new BufferedReader(new InputStreamReader(System.in));
                out = new PrintWriter(System.out);
            } else {
                in = new BufferedReader(new FileReader("input.txt"));
                out = new PrintWriter("output.txt");
            }

            Locale.setDefault(Locale.US);
            solve();
            in.close();
            out.close();
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    private static String readString() throws IOException {
        while (!tok.hasMoreTokens()) {
            tok = new StringTokenizer(in.readLine());
        }
        return tok.nextToken();
    }

    private static int readInt() throws IOException {
        return Integer.parseInt(readString());
    }

    private static byte readByte() throws IOException {
        return Byte.parseByte(readString());
    }

    private static long readLong() throws IOException {
        return Long.parseLong(readString());
    }

    private static double readDouble() throws IOException {
        return Double.parseDouble(readString());
    }

    private static void solve() throws IOException {
        int t = readInt();
        for (int i = 0; i < t; i++) {
            String in = readString();
            char[] digits = in.toCharArray();
            Arrays.sort(digits);
            String min = produceMin(in);
            String max = produceMax(in);

            out.printf("Case #%d: %s %s\n", i + 1, min, max);
        }
    }

    public static String produceMax(String in) {
        char[] digits = in.toCharArray();
        char[] sorted = in.toCharArray();
        Arrays.sort(sorted);
        return produceMax(in, digits, sorted);
    }

    private static String produceMax(String in, char[] digits, char[] sorted) {
        for (int i = sorted.length - 1; i > 0 && sorted[i] != '0'; i--) {
            char max = sorted[i];
            int indexOfMax = in.lastIndexOf(max);
            for (int j = 0; j < indexOfMax; j++) {
                if (digits[j] < max) {
                    return swap(in, j, indexOfMax);
                }
            }
        }

        return in;
    }

    public static String produceMin(String in) {
        char[] digits = in.toCharArray();
        char[] sorted = in.toCharArray();
        Arrays.sort(sorted);
        return produceMin(in, digits, sorted);
    }

    private static String produceMin(String in, char[] digits, char[] sorted) {
        int i = 0;
        while (i < sorted.length && sorted[i] == '0') {
            i++;
        }

        for (; i < sorted.length - 1; i++) {
            char min = sorted[i];
            int indexOfMin = in.lastIndexOf(min);
            for (int j = 0; j < indexOfMin; j++) {
                if (digits[j] > min) {
                    return swap(in, j, indexOfMin);
                }
            }
        }

        return in;
    }

    private static String swap(String in, int j, int i) {
        char[] digits = in.toCharArray();
        char temp = digits[i];
        digits[i] = digits[j];
        digits[j] = temp;
        return new String(digits);
    }

    private static byte[] toDigits(String in) {
        byte[] result = new byte[in.length()];

        int i = 0;
        for (char c : in.toCharArray()) {
            result[i++] = Byte.valueOf(c+"");
        }
        return result;
    }
}
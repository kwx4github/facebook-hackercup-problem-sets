

//#define DEBUG       //comment when you have to disable all debug macros.
#define LOCAL     //uncomment for testing from local file
#define NDEBUG    //comment when all assert statements have to be enabled.
//#define GRAPH
#include <iostream>
#include <cstring>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <climits>
#include <ctime>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <sys/time.h>
#include <iomanip>
#include <cstdarg>
#include <utility> //std::pair
#include <cassert>

#define fd(i,a) for(i=1;i<=a;i++)
#define fa(i,a,b) for(i=a;i<=b;i++)
#define fs(i,a,b,c) for(i=a;i<=b;i+=c)
#define tr(c,i) for(typeof(c.begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define all(x) x.begin(), x.end()
#define clr(x,y) memset(x,y,sizeof x)
#define log2(x) (log(x)/log(2))
#define ARRAY_SIZE(arr) (1[&arr]-arr)      
#define INDEX(arr,elem)        (lower_bound(all(arr),elem)-arr.begin())
#define equals(a,b) (a.compareTo(b)==0)    //for strings only
template<class P, class Q> inline void smin(P &a, Q b) { if (b < a) a = b; }
template<class P, class Q> inline void smax(P &a, Q b) { if (a < b) a = b; }

#define pb push_back
#define mp make_pair
#define lld long long int
#define MOD 1000000007
#define gcd __gcd

using namespace std;


#ifdef DEBUG
#define debug(args...)            {dbg,args; cerr<<endl;}
#else
#define debug(args...)              // Just strip off all debug tokens
#endif

#ifdef GRAPH
#include "drawGraph.cpp"
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }

}dbg;

void print(vector<lld> arr, lld pos){
	if(pos!=-1)
		swap(arr[0],arr[arr.size()-pos-1]);

	tr(arr,it)printf("%lld",*it);
}

void solve(lld n){
	if(n==0){printf("0 0\n");return ;}
	lld i=0,small=10, large=-1,smallpos=-1,largepos=-1,j;
	vector<lld> arr,copy_2;
	j=1;
	while(n/j)j*=10;
	j/=10;
	while(n){
		if(small>n%10 && n%10 && n%10!=n/j){small=n%10;smallpos=i;}
		if(large<n%10 && n%10!=n/j){large=n%10;largepos=i;}
		arr.pb(n%10);
		i++;
		n/=10;
	}
	reverse(arr.begin(), arr.end());
	print(arr,smallpos);
	printf(" ");
	print(arr,largepos);
	printf("\n");
}

int main()
{
#ifdef LOCAL
    freopen("input.in","r",stdin);
#endif
	 lld t,n,i=1;
	 scanf("%lld",&t);
	 while(t--){
		 scanf("%lld",&n);
		 printf("Case #%lld: ",i);
		 i++;
		 solve(n);
	 }
}


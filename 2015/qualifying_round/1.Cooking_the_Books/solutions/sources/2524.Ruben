package nl.dcm360.fbhc15.q

import scala.io.Source

object Cooking {
  val inputFile = "input/cooking_the_books.txt"
    
  def output(no: Int, large: Int, small: Int){
    println("Case #"+no+": " + large + " " + small)
  }
  
  
  def recSolve(head: List[(Int, Int)], char:(Int, Int), tail:List[(Int, Int)], min:Int, max:Int, num: Int): (Int, Int) = {
    if(tail.isEmpty){
      (min, max)
    }else{
      val newMin = if(min == num){
        def minFilter: (Int => Boolean) = if(head.isEmpty) {
          (a:Int) => a != 0     
        } else {
          (_:Int) => true         
        }
        val filtered = tail.filter((t:Tuple2[Int, Int]) => minFilter(t._1)).filter((t:Tuple2[Int, Int]) => t._1 < char._1).sortWith((a: Tuple2[Int, Int], b: Tuple2[Int, Int]) => a._1 < b._1 || a._1 == b._1 && a._2 > b._2)
        if(filtered.isEmpty) min else{
          val h = filtered.head
          val pos = h._2 - head.length
          val seq = head.reverse ::: h :: tail.take(pos-1) ::: char :: tail.drop(pos)
          seq.map((t:Tuple2[Int, Int]) => t._1.toString()).foldRight("")((a, b) => a + b).toInt
        }
      }else min
      val newMax = if(max == num){
        val filtered = tail.filter((t:Tuple2[Int, Int]) => t._1 > char._1).sortWith((a: Tuple2[Int, Int], b: Tuple2[Int, Int]) => a._1 > b._1 || a._1 == b._1 && a._2 > b._2)
        if(filtered.isEmpty) max else{
          val h = filtered.head
          val pos = h._2 - head.length
          val seq = head.reverse ::: h :: tail.take(pos-1) ::: char :: tail.drop(pos)
          seq.map((t:Tuple2[Int, Int]) => t._1.toString()).foldRight("")((a, b) => a + b).toInt
        }
      }else max
      recSolve(char :: head, tail.head, tail.tail, newMin, newMax, num)
      
    }
  }
  
  def main(args: Array[String]): Unit = {
    val inputLines = Source.fromFile(inputFile).getLines
    val numberCount = inputLines.next.toInt
    for(round <- 1 to numberCount){
      val numberStr = inputLines.next
      val number = numberStr.toInt
      val numberList = numberStr.toList.map(_.toString().toInt).zipWithIndex
      if(numberStr.length() < 2){
        output(round, number, number)
      }else{
        val (min, max) = recSolve(List(), numberList.head, numberList.tail, number, number, number)
        output(round, min, max)
      }
      
    }
  }
}
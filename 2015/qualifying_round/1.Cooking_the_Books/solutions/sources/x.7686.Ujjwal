#include <iostream>
#include <vector>
#include <algorithm>
#include<stdlib.h>

using namespace std;

bool non_zero_minimum(int i, int j) { return i<j && (i != 0); }

int main()
{
    int tc;
    std::string numstr = "";
    cin >> tc;
    int casenum=0;
    while(tc--) {
        casenum++;
        // input
        cin >> numstr;
        std::vector<int> num(numstr.length()), maxnums(numstr.length()), minnums(numstr.length());
        for(int i=0; i< numstr.length(); i++) {
            num[i] = numstr[i] - '0';
        }

        if(num.size() > 1) {
            // find positions of min and max
            int max_pos = distance(num.begin(), max_element(num.begin(), num.end()));
            int min_pos = -1;
            if(*std::min_element(num.begin(), num.end(), non_zero_minimum)!=0) {
                min_pos = distance(num.begin(), min_element(num.begin(), num.end(), non_zero_minimum));
            }

            maxnums = num;
            minnums = num;
            swap(maxnums[0], maxnums[max_pos]);
            if(min_pos != -1) {
                swap(minnums[0], minnums[min_pos]);
            }

            // output
            cout << "Case #" << casenum << ": ";
            for(int i=0; i< minnums.size(); i++) {
                cout << minnums[i];
            }
            cout << " ";
            for(int i=0; i< maxnums.size(); i++) {
                cout << maxnums[i];
            }
        } else if(num.size() == 1) {
            cout << "Case #" << casenum << ": " << num[0] << " " << num[0];
        }

        cout << "\n";

    }
    return 0;
}

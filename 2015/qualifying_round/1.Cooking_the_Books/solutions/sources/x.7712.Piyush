import com.sun.deploy.util.ArrayUtil;

import java.io.*;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

public class FBQualificationR1 {

    public static String swap(char[] numberToSwap, int toSwap, int swapWith){
        char[] number = numberToSwap.clone();
        char temp = number[toSwap];
        number[toSwap] = number[swapWith];
        number[swapWith] = temp;
        return String.valueOf(number);
    }

    public static void solution(String fileName) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(
                fileName));
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(
                "output.txt")));
        String line = in.readLine();
        int T = Integer.parseInt(line);
        for (int t = 1; t <= T; t++) {
            line = in.readLine();
            String ansMin = line, ansMax = line;
            if (line=="0"){
                continue;
            }
            char[] number = line.toCharArray();
            char[] acs = number.clone();
            Arrays.sort(acs);
            char[] desc = new StringBuffer(String.valueOf(acs)).reverse().toString().toCharArray();
            int minSwapIndex = -1;
            int maxSwapIndex = -1;
            for (int i=0; i<number.length; i++){
                if (line.contains("0")){
                    Boolean firstFlag = false;
                    int firstMinIndex = -1;
                    char min = number[0];
                    for (int j=1; j<number.length; j++){
                        if (number[j]!='0') {
                            if (number[j] <= min){
                                min = number[j];
                                firstFlag = true;
                                firstMinIndex = j;
                            }
                        }
                    }
                    if (firstFlag){
                        ansMin = swap(number, 0, firstMinIndex);
                        break;
                    } else {
                        int nonZeroIndex = -1;
                        int lastZeroIndex = -1;
                        lastZeroIndex = line.lastIndexOf('0');
                        for (int j=1; j<number.length; j++){
                            if (number[j]!='0') {
                                nonZeroIndex = j;
                                break;
                            }
                        }
                        if (nonZeroIndex==-1){
                            break;
                        }
                        if (nonZeroIndex>lastZeroIndex){
                            String numberToSwap = line.substring(lastZeroIndex+1, line.length());
                            char[] number2 = numberToSwap.toCharArray();
                            char[] acs2 = number2.clone();
                            Arrays.sort(acs2);
                            int indexToswap = -1;
                            int lastMinIndex = numberToSwap.lastIndexOf(acs2[0]);
                            for (int j=0; j<numberToSwap.length(); j++){
                                if (acs2[0]<number2[j]){
                                    indexToswap=j;
                                    break;
                                }
                            }
                            if (indexToswap==-1)
                                break;
                            else {
                                ansMin = line.substring(0, lastZeroIndex+1) + swap(number2, indexToswap, lastMinIndex);
                                break;
                            }
                        } else {
                            ansMin = swap(number, nonZeroIndex, lastZeroIndex);
                            break;
                        }
                    }
                }
                if (acs[i]!=number[i]) {
                    minSwapIndex = i;
                    break;
                }
            }
            for (int i=0; i<number.length; i++){
                if (desc[i]!=number[i]) {
                    maxSwapIndex = i;
                    break;
                }
            }
            if(minSwapIndex!=-1){
                String minNumber = line.substring(minSwapIndex + 1, line.length());
                acs = minNumber.toCharArray();
                Arrays.sort(acs);
                int minSwapToIndex = line.lastIndexOf(acs[0]);
                ansMin = swap(number, minSwapIndex, minSwapToIndex);
            }
            if(maxSwapIndex!=-1) {
                String maxNumber = line.substring(maxSwapIndex + 1, line.length());
                desc = maxNumber.toCharArray();
                Arrays.sort(desc);
                desc = new StringBuffer(String.valueOf(desc)).reverse().toString().toCharArray();
                int maxSwapToIndex = line.indexOf(desc[0]);
                ansMax = swap(number, maxSwapIndex, maxSwapToIndex);
            }
            out.println("Case #" + t + ": " + ansMin + " " + ansMax);
        }
        in.close();
        out.close();
    }

    public static void main(String[] args) throws Exception {
        solution("cooking_the_books.txt");
    }
}
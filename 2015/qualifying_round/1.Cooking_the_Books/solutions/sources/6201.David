using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace QualifRoundFB
{
    class CookingTheBooks
    {
        static void Main(string[] args)
        {
            int t;
            String number = "";
            
            StreamReader sr = new StreamReader("cooking_the_books.txt");
            StreamWriter sw = new StreamWriter("output_cooking_the_books.txt");
            t = Convert.ToInt32(sr.ReadLine());
            Console.WriteLine(t);
            for (int i = 1; i <= t; i++)
            {
                number = sr.ReadLine();

                int digits = number.Length;
                string max="", min="";

                if(digits == 1)
                {
                    max = number;
                    min = number;
                }
                else
                {
                    max = swapMax(number);
                    min = swapMin(number);
                }

                //resultados
                sw.WriteLine("Case #" + i + ": " + min + " " + max);
                Console.WriteLine("Case #" + i + ": " + min + " " + max);

            }
            sw.Close();
            
            /*
            Console.WriteLine(number);
            //Console.WriteLine(minSwap(number));
            Console.WriteLine(swapMin(number));
            //Console.WriteLine(maxSwap(number));
            Console.WriteLine(swapMax(number));
             * */
            Console.ReadKey();
        }

        static string minSwap(string number)
        {
            int min = getMinDigit(number);
            int minIndex = getIndex(min, number);
            int firstIndex = getFirstIndexGT(number, min, minIndex);
            
            if (firstIndex == -1)
                return number;

            return swapDigits(number, minIndex, firstIndex);
        }
        static string maxSwap(string number)
        {
            int max = getMaxDigit(number);
            int maxIndex = getIndex(max, number);
            int firstIndex = getFirstIndexLT(number, max, maxIndex);

            if (firstIndex == -1)
                return number;

            return swapDigits(number, maxIndex, firstIndex);
        }

        static string swapDigits(string number, int a, int b)
        {
            int l = number.Length;
            string newNumber = "";
            for(int i = 0; i<l; i++)
            {
                if(i == a)
                {
                    newNumber += number[b];
                }
                else if(i == b)
                {
                    newNumber += number[a];
                }
                else
                {
                    newNumber += number[i];
                }
            }
            return newNumber;
        }

        static int getFirstIndexGT(string number, int min, int minIndex)
        {
            for (int i = 0; i < minIndex; i++ )
            {
                int d = number[i] - '0';
                if(d>min)
                {
                    return i;
                }
            }
            return -1;
        }
        static int getFirstIndexLT(string number, int min, int minIndex)
        {
            for (int i = 0; i < minIndex; i++)
            {
                int d = number[i] - '0';
                if (d < min)
                {
                    return i;
                }
            }
            return -1;
        }


        static int getIndex(int index, string number)
        {
            int l = number.Length;
            for(int i = l-1; i>=0; i--)
            {
                int d = number[i] - '0';
                if(d==index)
                {
                    return i;
                }
            }
            return -1;
        }

        static int getMaxDigit(string number)
        {
            int l = number.Length;
            int high = 0;
            for (int i = 0; i < l; i++)
            {
                int d = number[i] - '0';
                if(d>high)
                {
                    high = d;
                }
            }
            return high;
        }
        static int getMinDigit(string number)
        {
            int l = number.Length;
            int min = 9;
            for (int i = 0; i < l; i++)
            {
                int d = number[i] - '0'; //Convert.ToInt32(number[i]);
                if (d < min)
                {
                    min = d;
                }
            }

            return min;
        }

        static string swapMax(string num)
        {
            int l = num.Length;
            for (int i = 0; i < l; i++)
            {
                int index = -1, value = -1;
                int current = num[i] - '0';
                for (int j = i + 1; j < l; j++)
                {
                    int temp = num[j] - '0';
                    if (temp > current)
                    {
                        if (temp >= value)
                        {
                            value = temp;
                            index = j;
                        }
                    }
                }
                if (index != -1)
                {
                    return swapDigits(num, i, index);
                }
            }
            return num;
        }

        static string swapMin(string num)
        {
            int l = num.Length;
            for (int i = 0; i < l; i++)
            { 
                int index = -1, value = 10;
                int current = num[i] - '0';
                if(i == 0)
                {
                    for(int j = i+1; j < l; j++)
                    {
                        int temp = num[j] - '0';
                        if (temp == 0)
                            continue;
                        if(temp < current)
                        {
                            if(temp <= value)
                            {
                                value = temp;
                                index = j;
                            }
                        }
                    }
                    if(index != -1)
                    {
                        return swapDigits(num, i, index);
                    }
                }
                else
                {
                    for (int j = i + 1; j < l; j++)
                    {
                        int temp = num[j] - '0';
                        if (temp < current)
                        {
                            if (temp <= value)
                            {
                                value = temp;
                                index = j;
                            }
                        }
                    }
                    if (index != -1)
                    {
                        return swapDigits(num, i, index);
                    }
                }
            }
            return num;
        }
    }
}

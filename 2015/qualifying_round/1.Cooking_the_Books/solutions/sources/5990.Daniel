package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func stringToIntSlice(str string) []int {
	strs := strings.Split(str, "")
	nums := make([]int, len(strs), len(strs))
	for i := range strs {
		nums[i], _ = strconv.Atoi(strs[i])
	}

	return nums
}

func intSliceToString(ints []int) string {
	strs := make([]string, len(ints), len(ints))
	for i := range ints {
		strs[i] = strconv.Itoa(ints[i])
	}

	return strings.Join(strs, "")
}

func lowest(num string) string {
	ints := stringToIntSlice(num)
	if ints[0] == 0 {
		return num
	}

	for i := 0; i < len(ints); i++ {
		var min = 10
		var min_j int
		for j := len(ints) - 1; j > i; j-- {
			if ints[j] < min && ints[j] < ints[i] && !(ints[j] == 0 && i == 0) {
				min = ints[j]
				min_j = j
			}
		}
		if min != 10 {
			ints[min_j] = ints[i]
			ints[i] = min
			break
		}
	}

	return intSliceToString(ints)
}

func highest(num string) string {
	ints := stringToIntSlice(num)
	if ints[0] == 0 {
		return num
	}

	for i := 0; i < len(ints); i++ {
		var max = 0
		var max_j int
		for j := len(ints) - 1; j > i; j-- {
			if ints[j] > max && ints[j] > ints[i] {
				max = ints[j]
				max_j = j
			}
		}
		if max > 0 {
			ints[max_j] = ints[i]
			ints[i] = max
			break
		}
	}

	return intSliceToString(ints)
}

func main() {
	file, err := os.Open(os.Args[1])
	if err != nil {
		panic(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)

	scanner.Scan()
	scanner.Text()
	i := 1
	for scanner.Scan() {
		fmt.Printf("Case #%d: %s %s\n", i, lowest(scanner.Text()), highest(scanner.Text()))
		i++
	}
}

package hackercup2015.qualificationround;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class CookingTheBooks {

	String input;
	String output;
	BufferedReader reader;
	PrintWriter writer;
	

	public CookingTheBooks(String input, String output) {
		super();
		this.input = input;
		this.output = output;
	}

	public String readNextLine() {
		String line = null;
		if (reader == null) {
			File file = new File(input);
			try {
				reader = new BufferedReader(new FileReader(file));
			} catch (FileNotFoundException e) {
				System.out.println("File Initialization Error");
				e.printStackTrace();
			}
		}

		try {
			line = reader.readLine();
		} catch (IOException e) {
			System.out.println("File read error");
			e.printStackTrace();
		}

		return line;
	}

	public void writeOuput(int caseNo, String result) {
		if (writer == null) {
			File file = new File(output);
			try {
				writer = new PrintWriter(new FileWriter(file));
			} catch (IOException e) {
				System.out.println("Output file initialization error");
				e.printStackTrace();
			}
		}
		System.out.println("in out put : " + result);

		writer.println("Case #" + caseNo + ": " + result);
		writer.flush();
	}
	
	public void start(){
		int T = Integer.parseInt(readNextLine());
		for( int i = 0; i < T; i++ ){
			String strN = readNextLine();
			char[] charN = strN.toCharArray();

			List<String> swappedNumbers = new ArrayList<String>();
			
			swappedNumbers.add(new String(charN));
			
			for( int j = 0; j < strN.length()-1; j++ ){
				for( int k = j+1; k < strN.length(); k++ ){
					if( j == 0 && charN[k] == '0' ){
						swappedNumbers.add(new String(charN));
						continue;
					}
						
					char first = charN[j];
					char second = charN[k];
					char[] tempCharN = charN.clone();
					tempCharN[j] = second;
					tempCharN[k] = first;		

					swappedNumbers.add(new String(tempCharN));
				}
			}
			Collections.sort(swappedNumbers);
			String result = "";
			if( swappedNumbers.size() > 1 ){
				result = swappedNumbers.get(0) + " " + swappedNumbers.get(swappedNumbers.size()-1);
			}else{
				result = swappedNumbers.get(0) + " " + swappedNumbers.get(0);
			}
			writeOuput((i+1),result);
		}
	}
	public static void main(String[] args) {
		(new CookingTheBooks("D:/ContestPractice/InputOutput/input.txt", "D:/ContestPractice/InputOutput/q1output.txt")).start();

	}

}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;

/**
 * Created by Egor on 09/01/15.
 */
public class TaskCookingTheBooks {

    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter writer;

    public String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

    public int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    public double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    public long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    public static void main(String[] args) throws IOException {
        new TaskCookingTheBooks().run();
    }

    public void solve() throws IOException {
        int t = nextInt();
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < t; i++) {
            String n = nextToken();
            builder.append("Case #").append(i + 1).append(": ");
            if (n.equals("0")) {
                builder.append("0 0");
            } else {
                char[] c = n.toCharArray();

                boolean foundMin = false;
                for (int j = 0; j < c.length - 1; j++) {
                    char current = c[j];
                    char min = Character.MAX_VALUE;
                    int kMin = j + 1;
                    for (int k = j + 1; k < c.length; k++) {
                        if (c[k] < min && !(j == 0 && c[k] == '0')) {
                            min = c[k];
                            kMin = k;
                        }
                    }

                    if (min < current) {
                        char[] copy = c.clone();
                        copy[kMin] = copy[j];
                        copy[j] = min;

                        builder.append(String.valueOf(copy));
                        foundMin = true;

                        break;
                    }
                }
                if (!foundMin) {
                    builder.append(n);
                }

                builder.append(" ");

                boolean foundMax = false;
                for (int j = 0; j < c.length - 1; j++) {
                    char current = c[j];
                    char max = c[j + 1];
                    int kMax = j + 1;
                    for (int k = j + 1; k < c.length; k++) {
                        if (c[k] > max) {
                            max = c[k];
                            kMax = k;
                        }
                    }

                    if (max > current) {
                        char[] copy = c.clone();
                        copy[kMax] = copy[j];
                        copy[j] = max;

                        builder.append(String.valueOf(copy));
                        foundMax = true;

                        break;
                    }
                }
                if (!foundMax) {
                    builder.append(n);
                }
            }
            builder.append('\n');
        }
        writer.println(builder.toString());
    }

    public String reversed(String s) {
        StringBuilder builder = new StringBuilder(s);
        builder.reverse();
        return builder.toString();
    }

    public void run() {
        try {
            reader = new BufferedReader(new FileReader("cooking-the-books.in"));
            writer = new PrintWriter("cooking-the-books.out");

            solve();

            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

}

package com.michalplachta.hunting.hackercup

import java.util.Scanner

object CookingTheBooks extends App {
  def solve(x: String): (String, String) = {
    val seq = x.map(_.toInt)
    (getMin(seq, false).map(_.toChar).mkString, getMax(seq).map(_.toChar).mkString)
  }

  def getMin(x: IndexedSeq[Int], withZero: Boolean): IndexedSeq[Int] = {
    if (x.isEmpty || x.length == 1) return x;
    val min = if(withZero) x.min else x.filter(_ != '0'.toInt).min
    if (x.head == min) {
      return x.head +: getMin(x.tail, true)
    } else if (x.head > min) {
      val lastIndex = x.tail.lastIndexOf(min)
      return min +: x.tail.updated(lastIndex, x.head)
    }

    return x;
  }

  def getMax(x: IndexedSeq[Int]): IndexedSeq[Int] = {
    if (x.isEmpty || x.length == 1) return x;
    val max = x.max
    if (x.head == max) {
      return x.head +: getMax(x.tail)
    } else if (x.head < max) {
      val lastIndex = x.tail.lastIndexOf(max)
      return max +: x.tail.updated(lastIndex, x.head)
    }

    return x;
  }

  val s = new Scanner(System.in);
  val n = s.nextInt();
  s.nextLine()
  List.range(1, n + 1).foreach(x => {
    val solution = solve(s.nextLine())
    println(s"Case #$x: ${solution._1} ${solution._2}")
  })
}

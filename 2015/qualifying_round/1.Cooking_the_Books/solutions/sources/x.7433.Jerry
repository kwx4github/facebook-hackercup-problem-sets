#iterate through each arg 
def cookbook(n, *args):
	count = 1
	for arg in args:
		print_fn(arg, count)
		count += 1

def main():
# 	cookbook(1531959135013,
# 31524,
# 897
# ,123
# ,10
# ,5, 13515 ,  153, 123 ,   15, 

#   0, 12)
	cookbook(20
	,474867873
	,999999999
	,155530534
	,344115361
	,675905967
	,342244656
	,10
	,95124058
	,9990999
	,216793189
	,545178093
	,339027548
	,749039533
	,796888162
	,92106130
	,571198404
	,314138255
	,994967987
	,0
	,820715607
	)



#prints out each line
def print_fn(num, i):
#print out "Case: "  + smallest + largest
	# print("smallest combination is: " + str(smallest_comb(num)))
	# print("largest combination is: " + str(largest_comb(num)))
	print("Case #" + str(i) + ": " + str(smallest_comb(num)) + " " + str(largest_comb(num)))

def swap(num, front, back):
	lst = []
	for char in str(num):
		lst += [int(char)]
	front = len(str(num))-front-1
	back = len(str(num))-back-1
	lst[front], lst[back] = lst[back], lst[front]
	string = ""
	for item in lst:
		string += str(item)
	return int(string)


#if biggest/smallest number already in front you can't do 
# 153 -> 135

#935


#finds smallest combination
def smallest_comb(num):
#take smallest digit from the
	length = len(str(num)) - 1
	i = length
	if num == 0:
		return 0
	else:
		smallest_location = last_num(num, min_digit(num))
		if smallest_location == i and num >= 10:
			smallest_location = last_num(num, second_min(num))
			i -= 1
			while smallest_location != i and num_at(num, i) == second_min(num) and i > 0:
				i -= 1
			return swap(num, i, smallest_location)
		else:	
			if min_digit(num) == 0:
				i -= 1
			while smallest_location != i and num_at(num, i) == min_digit(num) and i > 0:
				i -= 1
			return swap(num, i, smallest_location)


#finds largest combination
def largest_comb(num):
	i = len(str(num)) - 1
#take largest number from back and swap it forward
	#find what the largest number is
	#find where the largest number is
	largest_location = last_num(num, max_digit(num))
	if largest_location == i and num >= 10:
		largest_location = last_num(num, second_max(num))
		i -= 1
		while largest_location != i and num_at(num, i) == second_max(num) and i > 0:
			i -= 1
		return swap(num, i, largest_location)
	else:
#swap it to a place that isn't occupied by the same number
	#find where the closest to front is
		while largest_location != i and num_at(num, i) == max_digit(num) and i > 0:
			i -= 1
		return swap(num, i, largest_location)

def num_at(num, i):
	return int(str(num)[len(str(num))-i-1])


def first_num(num, digit, start):
	#assumes digit is in the number
	if num < 10:
		return 0
	length = start
	truncate = 10**length
	if num//truncate == digit:
		return length
	return first_num(num%truncate, digit, start-1)
	
def last_num(num, digit):
	#assumes digit is in the number
	if num < 10 or num%10 == digit:
		return 0
	return 1 + last_num(num//10, digit)

def max_digit(num):
	return int(max(str(num)))

def min_digit(num):
	return int(min(str(num)))

def second_max(num):
	num = str(num).replace(str(max_digit(num)), "")
	return int(max(str(num)))

def second_min(num):
	num = str(num).replace(str(min_digit(num)),  "")
	return int(min(str(num)))





#how do we find the smallest possible numer?
#say for 5213
#find smallest digit and move it to the front

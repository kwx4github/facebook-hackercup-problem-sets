package pb1;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.charset.Charset;

public class CookingTheBooks {

	private int totalNumber = 0;
	private static final String CRT_RESULT = "Case #%d: %s %s";
	
	public void processFile() 
			throws FileNotFoundException, IOException{
		
		String line, minNumber, maxNumber;
		int crtNumber = 1;
		String crtRawNumber;
		
	    InputStream fis = new FileInputStream("src/resource/cooking_the_books.txt");
	    InputStreamReader isr = new InputStreamReader(fis, Charset.forName("UTF-8"));
	    BufferedReader br = new BufferedReader(isr);
	    
	    PrintWriter writer = new PrintWriter("src/resource/cooking_the_books_output.txt", "UTF-8");
	    
	    /* Get number of numbers that need to be cooked */
	    line = br.readLine();
	    totalNumber = Integer.parseInt(line);
	    /* Cook each number */
	    while(((crtRawNumber = br.readLine()) != null) && (crtNumber <= totalNumber)) {
	        minNumber = cookMinNumber(crtRawNumber);
	        maxNumber = cookMaxNumber(crtRawNumber);
	        writer.println(String.format(CRT_RESULT, crtNumber, minNumber, maxNumber));
	        crtNumber++;
	        
	    }
	    
	    br.close();
	    isr.close();
	    fis.close();
	    
	    writer.close();
	}
	
	/* Min stuff */
	
	public int getMinPos(String number, char globalMin, boolean firstPos){
		int minPos = 0;
		char minChar = number.charAt(0);
		for(int i = 1; i < number.length(); i++){
			if(firstPos == true){
				if(number.charAt(i) == '0'){
					continue;
				}
			}
			if(minChar > number.charAt(i)){
				minChar = number.charAt(i);
				minPos = i;
			}
			if((minPos != 0 ) && (minChar == number.charAt(i)) && (minChar == globalMin)){
				minChar = number.charAt(i);
				minPos = i;
			}
		}
		return minPos;
	}
	
	String removeZeros(String number){
		String lame = "";
		for(int i = 0; i < number.length(); i++){
			if(number.charAt(i) != '0'){
				lame = lame + number.charAt(i);
			}
		}
		return lame;
	}
	public String cookMinNumber(String crtRawNumber){
		if(crtRawNumber.length() < 2){
			return crtRawNumber;
		}
		
		String cookedNumber = crtRawNumber;
		char globalMin = crtRawNumber.charAt(0);
		int replacePos = 0;
		int crtMinPos = getMinPos(crtRawNumber, globalMin, true);
		while( (crtMinPos == 0) && (replacePos < crtRawNumber.length() - 1)){
			replacePos++;
			crtMinPos = getMinPos(crtRawNumber.substring(replacePos, crtRawNumber.length()), globalMin, false);
		}
		if(replacePos < crtRawNumber.length() - 1){
			cookedNumber = cookNumber(crtRawNumber, replacePos, crtMinPos + replacePos);
		}
		
		return cookedNumber;
	}
	
	
	/* Max stuff */

	public int getMaxPos(String number, char globalMax){
		int maxPos = 0;
		char maxChar = number.charAt(0);
		for(int i = 1; i < number.length(); i++){
			if(maxChar < number.charAt(i)){
				maxChar = number.charAt(i);
				maxPos = i;
			}
			if((maxPos != 0 ) && (maxChar == number.charAt(i)) && (maxChar == globalMax)){
				maxChar = number.charAt(i);
				maxPos = i;
			}
		}
		return maxPos;
	}
	
	
	public String cookMaxNumber(String crtRawNumber){
		if(crtRawNumber.length() < 2){
			return crtRawNumber;
		}
		
		String cookedNumber = crtRawNumber;
		int replacePos = 0;
		char globalMax = crtRawNumber.charAt(0);
		int crtMaxPos = getMaxPos(crtRawNumber, globalMax);
		while( (crtMaxPos == 0) && (replacePos < crtRawNumber.length() - 1)){
			globalMax = crtRawNumber.charAt(replacePos + crtMaxPos);
			replacePos++;
			crtMaxPos = getMaxPos(crtRawNumber.substring(replacePos, crtRawNumber.length()), globalMax);
		}
		if(replacePos < crtRawNumber.length() - 1){
			cookedNumber = cookNumber(crtRawNumber, replacePos, crtMaxPos  + replacePos);
		}
		
		return cookedNumber;
	}
	
	
	/* Other code */
	private String cookNumber(String crtRawNumber, int replacePos, int crtMin) {
		
		return crtRawNumber.substring(0, replacePos) 
				+ crtRawNumber.charAt(crtMin)
				+ crtRawNumber.substring(replacePos + 1, crtMin)
				+ crtRawNumber.charAt(replacePos)
				+ crtRawNumber.substring(crtMin + 1, crtRawNumber.length());
	}

	
	public static void main(String[] args) throws Exception {
		
		CookingTheBooks cookingTheBooks = new CookingTheBooks();
		cookingTheBooks.processFile();

	}
}
//
//  main.cpp
//  fb1-2
//
//  Created by Efekan Egeli on 10/01/15.
//  Copyright (c) 2015 ayrac. All rights reserved.
//

#include <iostream>
#include <string>
#include <fstream>
#include <math.h>

using namespace std;

unsigned GetNumberOfDigits (unsigned i);
int* ConvertToArray (int number);
int* getMinNumber (int number[], int digitSize);
int* getMaxNumber (int number[], int digitSize);

int main(int argc, const char * argv[]) {
    // insert code here...
    
   
    
//    cout << "Hello, World!\n";
    string line;
    ifstream backstory ("facebook1.txt");
    ofstream outputFile;
    outputFile.open("output.txt");
    
    int numberCount;
    int *numbers = nullptr;
    int numIndex = 0;
    bool firstLine = true;
    
    if(backstory.is_open())
    {
        while (backstory.good())
        {
            getline(backstory,line);
            if (firstLine)
            {
                numberCount = stoi(line);
                firstLine = false;
                
                numbers = new int[numberCount];
            }
            else
            {
                if (line != "")
                {
                    numbers[numIndex] = stoi(line);
                    numIndex++;
                }
            }
            
            cout << line << endl;
        }
        backstory.close();
    }
    
    cout << "numCount: " << numberCount << endl;
    
    for (int i = 0 ; i < numberCount ; i++)
    {
//        cout << "num: " << numbers[i] << endl;
        int digitSize = GetNumberOfDigits(numbers[i]);
//        cout << "digitSize: " << digitSize << endl;
        
        cout << "Case #" << i+1 << ": ";
        outputFile << "Case #" << i+1 << ": ";
        
        if (digitSize > 1)
        {
//            cout << "converting to array" << endl;
            
            int *arr = ConvertToArray(numbers[i]);
            
            for (int x = 0 ; x < digitSize ; x++)
            {
                cout << getMinNumber(arr, digitSize)[x];
                outputFile << getMinNumber(arr, digitSize)[x];
            }
            cout << " ";
            outputFile << " ";
            
            for (int x = 0 ; x < digitSize ; x++)
            {
                cout << getMaxNumber(arr, digitSize)[x];
                outputFile << getMaxNumber(arr, digitSize)[x];
            }
            cout << endl;
            outputFile << endl;
            
//            getMinNumber(arr, digitSize);
            
//            for (int j = 0 ; j < digitSize ; j++)
//            {
//                cout << "digit " << j << " " << arr[j] << endl;
//            }
            
//            getMaxNumber(arr, digitSize);
        }
        else
        {
            cout << numbers[i] << " " << numbers[i] << endl;
            outputFile << numbers[i] << " " << numbers[i] << endl;
        }
    }
    
    outputFile.close();
    
    return 0;
}

unsigned GetNumberOfDigits (unsigned i)
{
    return i > 0 ? (int) log10 ((double) i) + 1 : 1;
}

int* ConvertToArray (int number)
{ // your number (this value will Change so you might want a copy)
    
    int digitSize = GetNumberOfDigits(number);
    int i = digitSize - 1;
    
    int * num = new int[digitSize-1];
    
    while (i >= 0)
    { // loop till there's nothing left
        num[i] = number % 10; // assign the last digit
        number /= 10; // "right shift" the number
        i--;
    }
    
    return num;
}

int* getMinNumber (int number[], int digitSize)
{
    int minNumber = number[0];
    int minIndex = -1;
    
    int leftIndex = 0;
    int indexToSwap = 0;
    
    bool foundSmaller = false;
    
    while (foundSmaller == false)
    {
        if (number[leftIndex] != 0)
        {
            minNumber = number[leftIndex];
            
            for (int i = leftIndex + 1 ; i < digitSize ; i++)
            {
                if (number[i] < minNumber && !(number[i] == 0 && leftIndex == 0))
                {
                    minNumber = number[i];
                    minIndex = i;
                    foundSmaller = true;
                    indexToSwap = leftIndex;
                }
            }
        }
        
        if (leftIndex == digitSize - 2)
        {
            break;
        }
        
        leftIndex++;
    }
    
    if (foundSmaller)
    {
        int temp = number[indexToSwap];
        number[indexToSwap] = number[minIndex];
        number[minIndex] = temp;
        
//        cout << "minValue" << endl;
//        for (int x = 0 ; x < digitSize ; x++)
//        {
//            cout << number[x] << endl;
//        }
    }
    
    return number;
}

int* getMaxNumber (int number[], int digitSize)
{
    int maxNumber = number[0];
    int maxIndex = -1;
    
    int leftIndex = 0;
    int indexToSwap = 0;
    
    bool foundBigger = false;
    
    while (foundBigger == false)
    {
        maxNumber = number[leftIndex];
        
        for (int i = leftIndex + 1 ; i < digitSize ; i++)
        {
            if (number[i] > maxNumber)
            {
                maxNumber = number[i];
                maxIndex = i;
                foundBigger = true;
                indexToSwap = leftIndex;
            }
            else if (number[i] == maxNumber && leftIndex != 0)
            {
                maxIndex = i;
                foundBigger = true;
            }
        }
        
        
        if (leftIndex == digitSize - 2)
        {
            break;
        }
        
        leftIndex++;
    }
    
    if (foundBigger)
    {
        int temp = number[indexToSwap];
        number[indexToSwap] = number[maxIndex];
        number[maxIndex] = temp;
        
//        cout << "maxValue" << endl;
//        for (int x = 0 ; x < digitSize ; x++)
//        {
//            cout << number[x] << endl;
//        }
    }
    
    return number;
}
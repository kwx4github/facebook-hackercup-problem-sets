using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CookingTheBooks
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] lines = System.IO.File.ReadAllLines(@"C:\Users\Samarth Agarwal\Desktop\cooking_the_books.txt");
            int t = Convert.ToInt32(lines[0]);

            int[] values = new int[t];
            for (int i = 0; i < t; i++)
            {
                values[i] = Convert.ToInt32(lines[i + 1]);
            }

            int caseCount = 1;
            System.IO.File.Delete(@"C:\Users\Samarth Agarwal\Desktop\output.txt");
            foreach (int value in values)
            {
                Console.Write("Case #" + caseCount.ToString() + ": " + findSmallest(value) + " " + findLargest(value) + Environment.NewLine);
                System.IO.File.AppendAllText(@"C:\Users\Samarth Agarwal\Desktop\output.txt", "Case #" + caseCount.ToString() + ": " + findSmallest(value) + " " + findLargest(value) + Environment.NewLine);
                caseCount++;
            }

            Console.ReadLine();
        }


        public static int findLargest(int value)
        {
            int[] backup = ToIntArray(value);
            int[] array = ToIntArray(value);

            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array.Length - i-1; j++)
                {
                    if(array[j]>array[j+1])
                    {
                        int temp = array[j];
                        array[j] = array[j+1];
                        array[j+1] = temp;
                    }
                }
            }

            for (int i = 0; i < array.Length; i++)
            {
                if(backup[i] != array[array.Length-i-1])
                {
                    int index1 = i;
                    int index2 = Array.IndexOf(backup, array[array.Length - i - 1]);

                    int temp = backup[index1];
                    backup[index1] = backup[index2];
                    backup[index2] = temp;
                    break;
                }
            }

            //for (int i = 0; i < backup.Length; i++)
            //{
            // Console.Write(backup[i]);
            //}

            string returnable=string.Empty;
            //converting int array back to string and then to int
            foreach (int item in backup)
            {
                returnable += item.ToString();
            }
            return Convert.ToInt32(returnable);
        }

        public static int findSmallest(int value)
        {
            int[] backup = ToIntArray(value);
            int[] array = ToIntArray(value);
            //preventing zero exchange by removing 0 from array
            int numToRemove = 0;
            array = array.Where(val => val!=numToRemove) .ToArray();

            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array.Length - i - 1; j++)
                {
                    if (array[j] > array[j + 1])
                    {
                        int temp = array[j];
                        array[j] = array[j + 1];
                        array[j + 1] = temp;
                    }
                }
            }

            for (int i = 0; i < array.Length; i++)
            {
                if (backup[i] != array[i])
                {
                    int index1 = i;
                    int index2 = Array.IndexOf(backup, array[i]);

                    int temp = backup[index1];
                    backup[index1] = backup[index2];
                    backup[index2] = temp;
                    break;
                }
            }

            //for (int i = 0; i < backup.Length; i++)
            //{
            // Console.Write(backup[i]);
            //}

            string returnable = string.Empty;
            //converting int array back to string and then to int
            foreach (int item in backup)
            {
                returnable += item.ToString();
            }
            return Convert.ToInt32(returnable);
        }
        public static int[] ToIntArray(int n)
        {
            if (n == 0) return new int[1] { 0 };

            var digits = new List<int>();

            for (; n != 0; n /= 10)
                digits.Add(n % 10);

            var arr = digits.ToArray();
            Array.Reverse(arr);
            return arr;
        }
    }
}

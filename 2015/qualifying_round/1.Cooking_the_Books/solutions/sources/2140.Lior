using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication4
{
    class Program
    {
        static void Main(string[] args)
        {

            var sr = new StreamReader("input.txt");
            var input1 = sr.ReadToEnd();

            input1 = input1.Replace("\r", "");
            input1 = input1.Replace(" ", "");

            var input = input1.Split('\n');



            var sw = new StreamWriter("output.txt");
                for (int iInput = 1; iInput <= int.Parse(input[0]); iInput++)
                {
                    if (iInput != 1)
                        sw.WriteLine("");
                    sw.Write("Case #" + iInput + ": ");
                    sw.Write(Min(input[iInput], input[iInput].ToCharArray().ToList()));
                    sw.Write(" ");
                    sw.Write(Max(input[iInput], input[iInput].ToCharArray().ToList()));
                }
                sw.Flush();
        }

        static string swap(string s1, int a, int b)
        {
            var s = s1.ToCharArray();
            var c = s[b];
            s[b] = s[a];
            s[a] = c;

            return new string(s);
        }

        static string Max1(string s, List<char> chars)
        {
            var sortedChars = chars.ToList();
            sortedChars.Sort();
            sortedChars.Reverse();

            for (int i = 0; i < sortedChars.Count; i++)
            {
                if (int.Parse(sortedChars[i].ToString()) > int.Parse(chars[i].ToString()))
                {
                    for (int j = chars.Count - 1; j >= 0; j--)
                    {
                        if (chars[j] == sortedChars[i])
                            return swap(s, i, j);
                    }
                }
            }
            return s;
        }

        static string Min(string s, List<char> chars)
        {
            var ints = new int[chars.Count];
            for (int i = 0; i < chars.Count; i++)
            {
                ints[i] = int.Parse(chars[i].ToString());
            }

            for (int i = 0; i < ints.Length; i++)
            {
                var min = -1;
                var iMin = -1;

                // Find min
                for (int j = i + 1; j < ints.Length; j++)
                {
                    if ((ints[j] <= min || min == -1) && !(i == 0 && ints[j] == 0))
                    {
                        min = ints[j];
                        iMin = j;
                    }
                }

                if (min != -1 && min < ints[i])
                {
                    return swap(s, i, iMin);
                }
            }

            return s;
        }

        static string Max(string s, List<char> chars)
        {
            var ints = new int[chars.Count];
            for (int i = 0; i < chars.Count; i++)
            {
                ints[i] = int.Parse(chars[i].ToString());
            }

            for (int i = 0; i < ints.Length; i++)
            {
                var max = -1;
                var iMax = -1;

                // Find max
                for (int j = i + 1; j < ints.Length; j++)
                {
                    if ((ints[j] >= max || max == -1))
                    {
                        max = ints[j];
                        iMax = j;
                    }
                }

                if (max != -1 && max > ints[i])
                {
                    return swap(s, i, iMax);
                }
            }

            return s;
        }
    }
}

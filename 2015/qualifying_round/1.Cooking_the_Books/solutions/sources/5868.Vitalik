using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NumSwapper
{
    public enum SwapType
    {
        Min,
        Max
    }

    class Program
    {
        static void Main(string[] args)
        {
            Swapper swapper = new Swapper(@"d:\cooking_the_books.txt");
            swapper.SaveTo(@"d:\cooking_the_books_output.txt");
        }
    }

    class Swapper
    {
        private int casesCount;
        private List<string> numbers;

        public Swapper(List<string> input)
        {
            this.casesCount = Int32.Parse(input[0]);
            input.RemoveAt(0);
            this.numbers = input;
        }

        public Swapper(string path):this(ReadFromFile(path))
        {

        }


        private string Swap(string num, SwapType swapType, bool firstTime = true)
        {
            if (num.Length == 1)
            {
                return num;
            }
            List<char> list = num.ToCharArray().ToList();
            char first = list[0];
            char toSwap;
            if (swapType == SwapType.Max)
            {
                toSwap = list.Max();
            }
            else
            {
                toSwap = firstTime ? MinButNotZero(list) : list.Min();
            }

            if (first != toSwap)
            {
                int index = list.LastIndexOf(toSwap);
                list[0] = toSwap;
                list[index] = first;
            }
            else
            {
                char uncounted = list[0];
                list.RemoveAt(0);
                string cut = new string(list.ToArray());
                string swapped = (string)this.Swap(cut, swapType, false).Clone();
                swapped = swapped.Insert(0, uncounted.ToString());
                return swapped;
            }
            return new string(list.ToArray());
        }



        private char MinButNotZero(List<char> list)
        {
            char min = '9';
            foreach (var num in list)
            {
                if (num == '1')
                {
                    min = '1';
                    break;
                }
                else if (num < min && num != '0')
                {
                    min = num;
                }
            }
            return min;
        }

        private static List<string> ReadFromFile(string path)
        {
            List<string> strings = new List<string>();
            using (StreamReader reader = new StreamReader(path))
            {
                string file = reader.ReadToEnd();
                strings = file.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
            }
            strings.Remove(String.Empty);
            return strings;
        }

        public void SaveTo(string path)
        {
            using (StreamWriter writer = new StreamWriter(path))
            {
                int n = 1;
                foreach (var num in numbers)
                {
                    writer.WriteLine("Case #{0}: {1} {2}", n, Swap(num, SwapType.Min), Swap(num, SwapType.Max));
                    n++;
                }
            }
        }

        public void PrintToConsole()
        {
            int n = 1;
            foreach (var num in numbers)
            {
                Console.WriteLine("Case #{0}: {1} {2}", n, Swap(num, SwapType.Min), Swap(num, SwapType.Max));
                n++;
            }
        }
    }
}

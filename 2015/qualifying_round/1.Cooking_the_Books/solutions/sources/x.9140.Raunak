#include<iostream>
#include<algorithm>
#include<fstream>
#include<math.h>

using namespace std;

int* convert_to_array(int, int);
int sz(int);
int find_max(int*, int, int);
int find_min(int*, int, int);
int convert_num(int*, int);


int main()
{
  ifstream in("cooking_the_books.txt");
  ofstream out("q1ans.txt");
  int t;
  in >> t;
  int *a = new int[t];
  for(int i = 0; i < t; i++)
    in >> a[i];
  int n, nmin, nmax;
  int len;
  int max_val, min_val;
  int maxpos, minpos;
  int *array_number;
 
  // for each number
  for(int i = 0; i < t; i++)
    {
      n = a[i];
      nmax = n;
      nmin = n;
      len = sz(n);
      array_number = new int[len];
      int *maxa = new int[len];
      int *mina = new int[len];
      array_number = convert_to_array(n, len);
      mina = convert_to_array(nmin, len);
      maxa = convert_to_array(nmax, len);
    
      int start_max = 0, start_min = 0;
      maxpos = 0, minpos = 0;
      int count = 0;
      bool flag = true;
      while((count < len) && flag)
	{
	  maxpos = find_max(maxa, start_max, len);
	  count+=1;
	  flag = (maxpos == start_max);
	  if(flag&&(count!=len))
	    start_max+=1;
	}     
      if(len==1)
	start_max=0;
      count = 0;
      flag = true;
      while((count < len) && flag)
	{
	  minpos = find_min(mina, start_min, len);
	  count += 1;
	  if(count==1 && mina[minpos]==0)
	    flag = true;
	  else
	    flag = (minpos == start_min);
	  if(flag && (count!=len))
	    start_min+=1;
	}     
      if(len==1)
	start_min=0;
      swap(maxa[start_max],maxa[maxpos]);
      max_val = convert_num(maxa, len);
      swap(mina[start_min],mina[minpos]);
      min_val = convert_num(mina, len);
      out << "Case #" << i+1 <<": " << min_val << " " << max_val << '\n';
    }
}

int convert_num(int *arr, int len)
{
  int ans = 0;
  for(int i = 0; i < len; i++)
    ans = ans*10 + arr[i];
  return ans;
}

int sz(int n)
{
  int len = 0;
  int num = n;
  if (num == 0)
    len = 1;
  else
    {
      while(num)
	{
	  len+=1;
	  num/=10;
	}
    }
  return len;
}

int* convert_to_array(int n, int len)
{
  int num = n;  
  int *arr = new int[len];
  for(int i = len-1; i>=0; i--)
    {
      arr[i] = num%10;
      num/=10;
    }
  return arr;
}

int find_max(int* arr, int start, int len)
{
  int max_pos = start;
  for(int i = start; i < len; i++)
    {
      if(arr[i] > arr[max_pos])
	max_pos = i;
    }
  return max_pos;
}

int find_min(int* arr, int start, int len)
{
  int min_pos = start;
  for(int i = start; i < len; i++)
    {
      if(arr[i] < arr[min_pos])
	min_pos = i;
    }
  return min_pos;
}

def swp(n,i,j):
    tmp = n[i]
    n[i] = n[j]
    n[j] = tmp
    return n

def smallest_by_swap(m,p,l) :
    dif = False
    if (p[0]==0) :
        p = p[1:]+[0]
    for i in range(l) :
        if ((m[i] != p[i])and (not((i==0)and(p[i]==0)))):
            dif = True
            indx = m.index(p[i])
            for j in range(i,l):
                if (m[j]==p[i]) :
                    indx = j
                    break
            break
    
    if ((dif)and(indx>=i)) :
    	m=swp(m,indx,i)
    no = ""
    for i in range(l):
    	no += str(m[i])
    return no

def largest_by_swap(m,p,l) :
    p.reverse()
    dif = False
    for i in range(l) :
        if (m[i] != p[i]):
            dif = True
            indx = m.index(p[i])
            for j in range(i,l):
                if (m[j]==p[i]) :
                    indx = j
                    break
            break    
    if ((dif)and(indx>=i)) :
    	m=swp(m,indx,i)
    no = ""
    for i in range(l):
    	no += str(m[i])
    return no
    	
	
    
    
t = input()
k = t
while(t>0) :
    t -= 1
    m = raw_input()
    n = []
    p = []
    l = len(m)
    for i in range(l):
        n.append(int(m[i]))
        p.append(n[i])
    p.sort()
    print "Case #"+str(k-t)+": ",smallest_by_swap(n[:],p[:],l),largest_by_swap(n[:],p[:],l)
    

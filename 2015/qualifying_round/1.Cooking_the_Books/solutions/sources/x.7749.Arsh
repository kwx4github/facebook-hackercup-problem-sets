import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Fb1 {

	public static void main(String args[])
	{
		int greatest,smallest;
		StringBuffer output = new StringBuffer("");
		ArrayList<Integer> tokens = new ArrayList<Integer>();
		String input = parseFile(args[0]);
		tokens = tokenize(input,tokens);
		PrintWriter pw = null;
		
		
		
		for( int j = 0 ; j < tokens.size();j++ )
		{ 
			Integer i = tokens.get(j);
			ArrayList<Integer> permut = getPermutations(i);
			greatest = findGreatest(permut);
			smallest = findSmallest(permut);
			
			
			output.append("Case #" + (j+1) + " : " + smallest + " "+ greatest).append("\n");
			
		}
		try {
			 pw = new PrintWriter(new File("outputFile.txt"));
			 pw.write( output.toString());
			pw.flush();
			pw.close();	
		} catch (IOException e) {
				e.printStackTrace();
		}
	}
		private static Integer findSmallest(ArrayList<Integer> permut) {
			Collections.sort(permut); 
			return permut.get(permut.size() - 1);
			
		
	}
		private static Integer findGreatest(ArrayList<Integer> permut) {
			Collections.sort(permut); 
			return permut.get(0);
			
		
	}
		private static ArrayList<Integer> getPermutations(Integer i) {
			ArrayList<Integer> possibleNumbers = new ArrayList<Integer>();	
	
			String temp = Integer.toString(i);
			int[] digitsArray = new int[temp.length()];
			for (int da = 0; da < temp.length(); da++)
			{
			    digitsArray[da] = temp.charAt(da) - '0';
			}	
			
			
			possibleNumbers.add(i);
			possibleNumbers = swap(digitsArray,possibleNumbers);
		
		return possibleNumbers;
	}
		private static ArrayList<Integer> swap(int[] digitsArray,ArrayList<Integer> pn) {
			for( int digit= 1;digit <digitsArray.length;digit++  )
			 {
				if(digitsArray[digit] !=0)
				{
				int b = digitsArray[0];
				 digitsArray[0] = digitsArray[digit];
				 digitsArray[digit] = b;
				}
				StringBuffer sb_ = new StringBuffer(" ") ; 
				for( Integer d : digitsArray)
				{
					sb_ = sb_.append(d.toString());
				}
				 pn.add(Integer.parseInt(sb_.toString().trim()));
		
				 
			 }
			return pn;
		}
		private static ArrayList<Integer> tokenize(String input,ArrayList<Integer> tokens) {
		Scanner s = new Scanner(input);
		
		int count = s.nextInt();
		//System.out.println("count = " + count);
		while(s.hasNextInt())
		{
			tokens.add(s.nextInt());
		}
		
		
	
		return tokens;
	}

	
	

	private static String parseFile(String file) {
		
		FileReader fr;
		String s;
		StringBuffer sb = new StringBuffer("");
		try {
			fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);
			while (( s = br.readLine()) !=null)
			sb = sb.append("\n").append(s);
			
			fr.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return sb.toString();
		
	}

	
	
	
}

package qualification2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.StringTokenizer;

public class CookingTheBooks {
	public static void main(String[] args) throws NumberFormatException,
			IOException {
		FileWriter writer = new FileWriter(
				"C:\\Users\\mchang\\workspace\\Facebook Hacker Cup\\src\\output.txt");
		String filename = "C:\\Users\\mchang\\workspace\\Facebook Hacker Cup\\src\\input.txt";
		long startTime = System.currentTimeMillis();
		try {
			BufferedReader br = new BufferedReader(new FileReader(filename));
			int numCases = Integer.parseInt(br.readLine());
			for (int caseNum = 1; caseNum <= numCases; caseNum++) {
				System.out.println("Processing Case: " + caseNum);
				String number = br.readLine();
				//solve(number, caseNum, writer);
				brute(number, caseNum, writer);
			}
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		writer.close();
		System.out.println(System.currentTimeMillis() - startTime);
	}

	public static void printAnswer(String answer, int caseNumber,
			FileWriter writer) throws IOException {
		writer.write("Case #" + caseNumber + ": " + answer + "\n");
	}

	public static void brute(String number, int caseNum, FileWriter writer) throws IOException{
		char[] array = number.toCharArray();
		int small = Integer.parseInt(number);
		int large = Integer.parseInt(number);
		for(int i = 0; i < array.length - 1; i++){
			for(int j = i + 1; j < array.length; j++){
				char temp = array[i];
				array[i] = array[j];
				array[j] = temp;
				int newNumber = Integer.parseInt(String.valueOf(array));
				if(newNumber < small && array[0] != '0') small = newNumber;
				if(newNumber > large) large = newNumber;
				temp = array[i];
				array[i] = array[j];
				array[j] = temp;
			}
		}
		printAnswer(small + " " + large, caseNum, writer);
	}
	public static void solve(String number, int caseNum, FileWriter writer) throws IOException{
		int numberLength = number.length();
		char[] sortedArray = number.toCharArray();
		char[] largestNumber = number.toCharArray();
		char[] smallestNumber = number.toCharArray();
		Arrays.sort(sortedArray);
		int smallest = -1;
		int largest = -1;
		if(numberLength == 1){
			smallest = Integer.parseInt(number);
			largest = smallest;
		}
		for(int i = 0; i < numberLength; i++){
			if(smallest != -1 && largest != -1) break;
			if(smallest == -1){
				if(i == 0){
					int j = 0;
					while(j < numberLength - 1 && sortedArray[j] == '0'){
						j++;
					}
					if(sortedArray[j] != smallestNumber[i]){
						int k = numberLength - 1;
						while(k > 0 && smallestNumber[k] != sortedArray[j]){
							k--;
						}
						char temp = smallestNumber[i];
						smallestNumber[i] = smallestNumber[k];
						smallestNumber[k] = temp;
						smallest = Integer.parseInt(String.valueOf(smallestNumber));
					}
				} else {
					int adjustment = 0;
					if(sortedArray[i - 1] == '0') adjustment = -1;
					if(sortedArray[i + adjustment] != smallestNumber[i]){
						int j = numberLength - 1;
						while(j > 0 && smallestNumber[j] != sortedArray[i + adjustment]){
							j--;
						}
						char temp = smallestNumber[i];
						smallestNumber[i] = smallestNumber[j];
						smallestNumber[j] = temp;
						smallest = Integer.parseInt(String.valueOf(smallestNumber));
					}
				}
			}
			if(largest == -1){
				if(sortedArray[numberLength - 1 - i] != largestNumber[i]){
					int j = numberLength - 1;
					while(j > 0 && largestNumber[j] != sortedArray[numberLength - 1 - i]){
						j--;
					}
					char temp = largestNumber[i];
					largestNumber[i] = largestNumber[j];
					largestNumber[j] = temp;
					largest = Integer.parseInt(String.valueOf(largestNumber));
				}
			}
		}
		if(largest == -1) largest = Integer.parseInt(number);
		if(smallest == -1) smallest = Integer.parseInt(number);
		printAnswer(smallest + " " + largest, caseNum, writer);
	}
}

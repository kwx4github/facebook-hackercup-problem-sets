package com.meg7.training.facebook.HackerCup15;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.Scanner;

public class Cooking_the_Books {

    public static void main(String[] args) {
        try {
//            File file = new File("cooking_the_books_example_input.txt");
            File file = new File("cooking_the_books.txt");
            Scanner scanner = new Scanner(file);

//            Scanner scanner = new Scanner(System.in);

            int numberOfTests = scanner.nextInt();

            for (int i = 0; i < numberOfTests; i++) {
                solveAndPrint(scanner.nextInt(), i + 1);
            }

            scanner.close();
        } catch (FileNotFoundException e) {
            // Do nothing!
        }
    }

    private static void solveAndPrint(int n, int caseNumber) {
        try {
//        File file = new File("cooking_the_books_example_output.txt");
        File file = new File("cooking_the_books_output.txt");
        PrintWriter out;
        if (caseNumber > 1) {
            out = new PrintWriter(new FileOutputStream(file, true));
        } else {
            out = new PrintWriter(file);
        }

        int smallestDigitLeft = 9;
        int smallestDigitLeftPosition = -1;

        int greatestDigitRight = 0;
        int greatestDigitRightPosition = 0;

        int tempN = n;
        int currentDigit;
        int digitsCount;
        for (digitsCount = 0; tempN > 0; digitsCount++) {
            currentDigit = tempN % 10;
            tempN /= 10;

            if (currentDigit > 0 && smallestDigitLeft > currentDigit) {// Get right most!
                smallestDigitLeft = currentDigit;
                smallestDigitLeftPosition = digitsCount;
            }

            if (greatestDigitRight < currentDigit) {// Get right most!
                greatestDigitRight = currentDigit;
                greatestDigitRightPosition = digitsCount;
            }
        }

        int smallestNumber = n;
        int greatestNumber = n;

        int leftMostDigit = (int) (n / Math.pow(10, digitsCount - 1));
        if (smallestDigitLeftPosition >= 0) {
            if (smallestDigitLeft < leftMostDigit) {
                smallestNumber = calculateNumber(smallestNumber,
                        smallestDigitLeft, smallestDigitLeftPosition,
                        leftMostDigit, digitsCount - 1);
            } else if (smallestDigitLeftPosition < (digitsCount - 1)) {
                for (int i = 1; i <= digitsCount; i++) {
                    currentDigit = (int) (n / Math.pow(10, digitsCount - i)) % 10;
                    if (currentDigit > smallestDigitLeft) {
                        smallestNumber = calculateNumber(smallestNumber,
                                smallestDigitLeft, smallestDigitLeftPosition,
                                currentDigit, digitsCount - i);
                        break;
                    }
                }
            }
        }

        if (greatestDigitRight > leftMostDigit) {
            greatestNumber = calculateNumber(greatestNumber,
                    greatestDigitRight, greatestDigitRightPosition,
                    leftMostDigit, digitsCount - 1);
        } else if (greatestDigitRightPosition < (digitsCount - 1)) {
            for (int i = 1; i <= digitsCount; i++) {
                currentDigit = (int) (n / Math.pow(10, digitsCount - i)) % 10;
                if (currentDigit < greatestDigitRight) {
                    greatestNumber = calculateNumber(greatestNumber,
                            greatestDigitRight, greatestDigitRightPosition,
                            currentDigit, digitsCount - i);
                    break;
                }
            }
        }

//        System.out.println("Case #" + caseNumber + ": " + smallestNumber + " " + greatestNumber);

        out.println("Case #" + caseNumber + ": " + smallestNumber + " " + greatestNumber);
        out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    private static int calculateNumber(int number, int toReplaceDigit, int toReplaceDigitPosition,
                                          int leftMostDigit, int leftMostDigitPosition) {
        return (int) (number
                - toReplaceDigit * Math.pow(10, toReplaceDigitPosition)
                + toReplaceDigit * Math.pow(10, leftMostDigitPosition)
                - leftMostDigit * Math.pow(10, leftMostDigitPosition)
                + leftMostDigit * Math.pow(10, toReplaceDigitPosition));
    }

}

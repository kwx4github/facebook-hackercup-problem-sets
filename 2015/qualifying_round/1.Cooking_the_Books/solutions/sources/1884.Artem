import java.io.*;
import java.util.*;
import java.math.BigInteger;

public class Main{
    final boolean isFileIO =  true;
    BufferedReader in;
    PrintWriter out;
    StringTokenizer st = new StringTokenizer("");
    String delim = " ";

    public static void main(String[] args) throws IOException {
        Main m = new Main();
        m.initIO();
        m.solve();
        m.in.close();
        m.out.close();
    }

    public void initIO() throws IOException {
        if(!isFileIO) {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
        } else {
            in = new BufferedReader(new FileReader("cooking_the_books.txt"));
            out = new PrintWriter("output.txt"); 
        }
    }
  
    String nextToken() throws IOException {
        if(!st.hasMoreTokens()) {
            st = new StringTokenizer(in.readLine());
        }
        return st.nextToken(delim);
    }

    String readLine() throws IOException {
        return in.readLine();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    class Pair {
        public int i;
        public long j;
        public Pair(int i, long j) {
            this.i = i;
            this.j = j;
        }
    }

    public void solve() throws IOException {
        int t = nextInt();
        int[] pows = new int[10];
        pows[0] = 1;
        for(int i = 1; i < 10; i++) {
            pows[i] = pows[i - 1] * 10;
        }
        for(int i = 1; i <= t; i++) {
            int num = nextInt();
            int temp = num;
            out.print("Case #" + i + ": ");
            int cnt = 0;
            while(temp != 0) {
                cnt++;
                temp /= 10;
            }

            int min = num;
            int max = num;
            for(int a = 0; a < cnt; a++) {
                int first = (num / pows[a]) % 10;
                for(int b = a + 1; b < cnt; b++) {
                    int second = (num / pows[b]) % 10;
                    if(b == (cnt - 1) && first == 0) {
                        continue;
                    }
                    temp = num - first * pows[a] - second * pows[b] + first * pows[b] + second * pows[a];
                    min = Math.min(temp, min);
                    max = Math.max(temp, max);
                }
            }
            out.println(min + " " + max);
        }
    }

}

class Utils {

    public static long binpow(long a, long exp, long mod) {
        if(exp == 0) {
            return 1;
        }
        if(exp % 2 == 0) {
            long temp = binpow(a, exp / 2, mod);
            return (temp * temp) % mod;
        } else {
            return (binpow(a, exp - 1, mod) * a) % mod;
        }
    }

    public static long inv(long a, long mod) {
        return binpow(a, mod - 2, mod);
    }

    public static long addmod(long a, long b, long mod) {
        return ((a + b) % mod + mod) % mod;
    }

    public static long gcd(long a, long b) {
        if(b == 0)
            return a;
        return gcd(b, a % b);
    }

    //mul must be < 10^18
    public static long mulmod(long a, long b, long mod) {
        return (a * b + (((a * b) / mod) + 1) * mod) % mod;
    }
}

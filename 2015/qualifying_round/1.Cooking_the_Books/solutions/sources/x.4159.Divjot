package QualificationRound;

import java.io.*;
import java.util.*;

public class CookingWithBooks {

	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("input.txt"));
		PrintWriter log = new PrintWriter(new BufferedWriter(new FileWriter(
				new File("output.txt"))));

		int tests = Integer.parseInt(br.readLine());
		StringBuilder output = new StringBuilder("");

		for (int i = 0; i < tests; i++) {

			ArrayList<Integer> countArray[] = new ArrayList[10]; // a hash table
																	// for
																	// indices
																	// of all
																	// digits
			String number = br.readLine();
			StringBuilder num = new StringBuilder(number); // will contain
															// larger number
			StringBuilder num2 = new StringBuilder(number); // will contain
															// smaller number

			for (int j = 0; j < number.length(); j++) { // building the hash
														// table
				if (countArray[Character.digit(number.charAt(j), 10)] == null) {
					countArray[Character.digit(number.charAt(j), 10)] = new ArrayList<Integer>();
				}
				countArray[Character.digit(number.charAt(j), 10)].add(j);
			}

			if (Long.parseLong(num.toString()) <= 11) { // handling some trivial
														// cases
				output.append("Case #" + (i + 1) + ": " + number + " " + number
						+ "\n");
			} else {

				boolean found[] = { false, false };
				for (int presentIndex = 0; (!found[0] || !found[1])
						&& presentIndex < number.length(); presentIndex++) {
					char presentDigitChar = number.charAt(presentIndex);
					int presentDigit = Character.digit(presentDigitChar, 10);

					if (!found[0] && presentDigit != 9) {
						for (int k = 9; !found[0] && k > presentDigit; k--) { // largest
																				// digit
																				// till
																				// present
																				// digit
							if (countArray[k] != null) {
								for (int replacingIndex : countArray[k]) { // for
																			// each
																			// indices
																			// of
																			// that
																			// digit
									if (replacingIndex > presentIndex) {
										char temp = num.charAt(replacingIndex);
										num.setCharAt(replacingIndex,
												presentDigitChar);
										num.setCharAt(presentIndex, temp);
										found[0] = true;
										break;
									}
								}
							}
						}
					}

					if (!found[1] && presentDigit != 1) {
						for (int k = 1; !found[1] && k < presentDigit; k++) {
							if (countArray[k] != null) {
								for (int l = countArray[k].size() - 1; l > -1; l--) {
									int replacingIndex = countArray[k].get(l);
									if (replacingIndex > presentIndex) {

										char temp = num2.charAt(replacingIndex);
										num2.setCharAt(replacingIndex,
												presentDigitChar);
										num2.setCharAt(presentIndex, temp);
										found[1] = true;
										break;
									}
								}
							}
						}
					}

				}
				output.append("Case #" + (i + 1) + ": " + num2 + " " + num
						+ "\n");
			}
		}
		log.write(output.toString());
		log.close();
	}
}

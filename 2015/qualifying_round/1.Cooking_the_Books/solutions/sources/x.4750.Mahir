/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package facebookhackercup2015first;

import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Idrak
 */
public class FacebookHackerCup2015First {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //reading file line by line in Java using BufferedReader       
        FileInputStream fis = null;
        BufferedReader reader = null;
        File fout = new File("d:/cooking_the_books_output.txt");
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(fout);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FacebookHackerCup2015First.class.getName()).log(Level.SEVERE, null, ex);
        }

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));

        try {
            fis = new FileInputStream("D:/cooking_the_books.txt");
            reader = new BufferedReader(new InputStreamReader(fis));

            System.out.println("Reading File line by line using BufferedReader");

            String line = reader.readLine();
            line = reader.readLine();
            Integer index = 1;
            while (line != null) {
                String min = "";
                String max = "";
                char[] numArray = line.toCharArray();
                char[] numArrayM = line.toCharArray();
                if (numArray.length == 1 || (numArray.length==2 && Character.getNumericValue(numArray[1])==0)) {
                    min = line;
                    max = line;
                } else {
                    Integer minIndex = 0;
                    for (Integer i = 1; i < numArray.length; i++) {
                        if (Character.getNumericValue( numArray[i]) == 0) {
                            continue;
                        }
                        if (Character.getNumericValue(numArray[i]) < Character.getNumericValue(numArray[minIndex])) {
                            minIndex = i;
                        }
                    }
                    
                    if (minIndex==0){
                        Integer minSIndex = 1;
                        for (Integer i = 2; i < numArray.length; i++) {
                            if (Character.getNumericValue(numArray[i]) < Character.getNumericValue(numArray[minSIndex])) {
                                minSIndex = i;
                            }
                        }
                        char ff=numArray[1];
                        numArray[1]=numArray[minSIndex];
                        numArray[minSIndex]=ff;
                        min=String.valueOf(numArray);
                        
                    }else{
                        char ff=numArray[0];
                        numArray[0]=numArray[minIndex];
                        numArray[minIndex]=ff;
                        min=String.valueOf(numArray);
                    }
                    
                    
                    Integer maxIndex = 0;
                    for (Integer i = 1; i < numArrayM.length; i++) {
                        if (Character.getNumericValue( numArrayM[i]) == 0) {
                            continue;
                        }
                        if (Character.getNumericValue(numArrayM[i]) > Character.getNumericValue(numArrayM[maxIndex])) {
                            maxIndex = i;
                        }
                    }
                    
                    if (maxIndex==0){
                        Integer maxSIndex = 1;
                        for (Integer i = 2; i < numArrayM.length; i++) {
                            if (Character.getNumericValue(numArrayM[i]) > Character.getNumericValue(numArrayM[maxSIndex])) {
                                maxSIndex = i;
                            }
                        }
                        char ff=numArrayM[1];
                        numArrayM[1]=numArrayM[maxSIndex];
                        numArrayM[maxSIndex]=ff;
                        max=String.valueOf(numArrayM);
                        
                    }else{
                        char ff=numArrayM[0];
                        numArrayM[0]=numArrayM[maxIndex];
                        numArrayM[maxIndex]=ff;
                        max=String.valueOf(numArrayM);
                    }
                    
                }

                
                
                System.out.println(line);
                bw.write("Case #" + index + ": " + min + " " + max);
                bw.newLine();
                line = reader.readLine();
                index++;
            }
            bw.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FacebookHackerCup2015First.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FacebookHackerCup2015First.class.getName()).log(Level.SEVERE, null, ex);

        } finally {
            try {
                reader.close();
                fis.close();
            } catch (IOException ex) {
                Logger.getLogger(FacebookHackerCup2015First.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }
}

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cctype>
#include <climits>
#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <sstream>
#include <initializer_list>

using namespace std;

string greedy(string N) {
    string minNum = N;
    string maxNum = N;

    int size = N.size();
    int minFirst = -1, minLast = -1;
    int maxFirst = -1, maxLast = -1;
    int minid = -1, maxid = -1, zeroid = -1;
    
    for (int i = size - 1; i >= 0; i--) {
        if (N[i] == '0' && zeroid == -1) {
            zeroid = i;
        } else if (N[i] != '0') {
            if (minid == -1 || N[i] < N[minid]) {
                minid = i;
            }
            if (maxid == -1 || N[i] > N[maxid]) {
                maxid = i;
            }
        }

        if (i != 0) {
            if (zeroid != -1 && N[i] > '0') {
                minFirst = i, minLast = zeroid;
            } else if (minid != -1 && N[i] > N[minid]) {
                minFirst = i, minLast = minid;
            }
        } else {
            if (minid != -1 && N[i] > N[minid]) {
                minFirst = i, minLast = minid;
            }
        }

        if (maxid != -1 && N[i] < N[maxid]) {
            maxFirst = i, maxLast = maxid;
        }
    }

    if (minFirst != -1) {
        swap(minNum[minFirst], minNum[minLast]);
    }

    if (maxFirst != -1) {
        swap(maxNum[maxFirst], maxNum[maxLast]);
    }
    
    return string(minNum + " " + maxNum);
}

int main(int argc, char *argv[])
{
    int T = 0;

    freopen("A.in", "r", stdin);
    
    cin >> T;

    for (int cas = 1; cas <= T; cas++) {
        string N;
        cin >> N;

        string res = greedy(N);

        cout << "Case #" << cas << ": " << res << endl;
    }
    return 0;
}

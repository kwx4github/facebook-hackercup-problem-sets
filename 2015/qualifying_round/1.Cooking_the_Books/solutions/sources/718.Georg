#!/usr/bin/env python

import csv
import sys
import argparse

debugflag=False
def debug(key, value=None):
    if (debugflag):
        if (value != None):
            sys.stderr.write("*DBG* {!s}: {!s}\n".format(key, value))
        else:
            sys.stderr.write("*DBG* {!s}\n".format(key))

class problem:
    def __init__(self, i, data):
        self.i=i

        # process data
        self.data=data
        # end process

class solver:
    def __init__(self, debug=False,):
        global debugflag

        debugflag=debug

        # Init
        pass
        # end Init

    def solve(self, p):
        debug("N", p.data)
        N=p.data

        A=[]
        for i in N:
            A.append(int(i))
        L=len(A)
        assert(L==len(N))

        S=A.copy()
        B=A.copy()

        i=0
        while i < L-1:
            # find smallest digit
            d_min=9
            for j in range(i+1,L):
                if A[j]<d_min and not (i==0 and A[j]==0):
                    d_min=A[j]
            debug("i",i)
            debug("dmin",d_min)
            if d_min < A[i]:
                break
            i+=1
            
        if i < L-1:
            assert(d_min < A[i])
            j=L-1
            while A[j] != d_min:
                j-=1;
                assert(j > i)
            S[i],S[j]=S[j],S[i]

        
        i=0
        while i < L-1:
            # find largest digit
            d_max=-1
            for j in range(i+1,L):
                if A[j]>d_max:
                    d_max=A[j]
            if d_max > A[i]:
                break
            i+=1
            
        if i < L-1:
            assert(d_max > A[i])
            j=L-1
            while A[j] != d_max:
                j-=1;
                assert(j > i)
            B[i],B[j]=B[j],B[i]
            
        smallest=""
        for i in S:
            smallest+=str(i)
        smallest=int(smallest)
        largest=""
        for i in B:
            largest+=str(i)
        largest=int(largest)

        

        # Solve problem
        solution=[smallest, largest]
        # End solve

        return(solution)

    def solve2(self, p):
        # debug("Problem Data", p.data)
        
        # Solve problem Brute Force
        solution=[p.data]
        # End solve

        return(solution)

class pparser:
    
    def __init__(self, pfile):
        self.pfile=pfile
        self.reader=csv.reader(pfile, delimiter=" ")
        
        row=next(self.reader)
        self.N=int(row[0])
        self.i=0

    def __next__(self):
        self.i+=1

        if (self.i > self.N):
            raise StopIteration()
        
        # Parse problem here
        row=next(self.reader)
        data=row[0]
        # End parse

        p=problem(self.i, data)
        return(p)

    def __iter__(self):
        return(self)
        

def solve():
    parser=argparse.ArgumentParser("Solve the problem.")
    parser.add_argument("--debug", "-d", action="store_true")
    parser.add_argument("--test", "-t", action="store_true")
    parser.add_argument("file", type=open)
    
    opt=parser.parse_args()

    if (opt.test):
        opt.debug=True

    s=solver(opt.debug)
    pfile=opt.file

    pparse=pparser(pfile)

    outwriter=csv.writer(sys.stdout, delimiter=" ", quoting=csv.QUOTE_NONE, lineterminator="\n")
    for p in pparse:
        solution=s.solve(p)
        
        if (opt.test):
            solution2=s.solve2(p)
            if (solution2 != solution):
                debug("Differing Solution", [solution, solution2])

        outwriter.writerow(["Case", "#{:d}:".format(p.i)]+solution)
    
    pfile.close()


if (__name__ == "__main__"):
    solve()

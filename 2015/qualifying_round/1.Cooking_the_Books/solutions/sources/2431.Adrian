#include <iostream>
#include <vector>

int compose(std::vector<int>& v) {
  int sol = 0;
  for (int i = v.size() - 1; i >= 0; --i)
    sol = sol * 10 + v[i];
  return sol;
}

int main()
{
  int ntests;
  std::cin >> ntests;
  for (int ntest = 0; ntest < ntests; ++ntest) {
    int test;
    std::cin >> test;
    std::vector<int> nrc;
    while (test) {
      nrc.push_back(test % 10);
      test /= 10;
    }

    std::cout << "Case #" << ntest + 1 << ":";

    // Make the smallest number.
    bool found_smallest = false;
    for (int i = nrc.size() - 1; i > 0; --i) {
      int smallestindex = -1;
      for (int j = 0; j < i; ++j) {
        if (nrc[j] < nrc[i] && (nrc[j] != 0 || i != nrc.size() - 1) &&
            (smallestindex == -1 || nrc[j] < nrc[smallestindex])) {
          smallestindex = j;
        }
      }

      if (smallestindex != -1) {
        std::swap(nrc[smallestindex], nrc[i]);
        std::cout << " " << compose(nrc);
        std::swap(nrc[smallestindex], nrc[i]);
        found_smallest = true;
        break;
      }
    }

    if (!found_smallest) {
      std::cout << " " << compose(nrc);
    }

    // Make the largest number.
    bool found_largest = false;
    for (int i = nrc.size() - 1; i > 0; --i) {
      int largestindex = -1;
      for (int j = 0; j < i; ++j) {
        if (nrc[j] > nrc[i] && (largestindex == -1 || nrc[j] >
                                nrc[largestindex])) {
          largestindex = j;
        }
      }

      if (largestindex != -1) {
        std::swap(nrc[largestindex], nrc[i]);
        std::cout << " " << compose(nrc);
        std::swap(nrc[largestindex], nrc[i]);
        found_largest = true;
        break;
      }
    }

    if (!found_largest) {
      std::cout << " " << compose(nrc);
    }

    std::cout << std::endl;
  }

  return 0;
}

'use strict';

var _ = require('lodash');
var fs = require('fs');

readSolveAndWrite();

function readSolveAndWrite() {
	var allLines = _.compact(fs.readFileSync('input.txt').toString().split("\n"));
	var numbers = _.head(_.tail(allLines), parseInt(allLines[0]));
	var results = solveAll(numbers);
	writeResults('output.txt', results);
}

function solveAll(numbersAsStrings) {
	return numbersAsStrings.map(function(numberAsString) {
		var digits = numberAsString.split('').map(function(digit) {
			return parseInt(digit);
		});
		return solveOne(digits);
	})
}

function solveOne(digits) {
	var sortedDigits = digits.concat().sort();
	var zeroSafeSortedDigits = ensureNoLeadingZero(sortedDigits.concat()),
	    reversedSortedDigits = sortedDigits.concat().reverse();
	return [
		rightNumber(digits.concat(), zeroSafeSortedDigits),
		rightNumber(digits.concat(), reversedSortedDigits)
	];
}

function ensureNoLeadingZero(sortedDigits) {
	if (sortedDigits[0] > 0 || sortedDigits.length === 1)
		return sortedDigits;
	var firstNonzeroIndex = _.findIndex(sortedDigits, _.identity);
	sortedDigits[0] = sortedDigits[firstNonzeroIndex];
	sortedDigits[firstNonzeroIndex] = 0;
	return sortedDigits;
}

function rightNumber(digits, sortedDigits) {
	for (var i = 0; i < digits.length; i++) {
		if (digits[i] !== sortedDigits[i]) {
			var wrongDigit = digits[i], rightDigit = sortedDigits[i];
			var oldIndex = digits.indexOf(rightDigit);
			digits[i] = rightDigit;
			digits[oldIndex] = wrongDigit;
			break;
		}
	}
	return parseInt(digits.join(''))
}

function writeResults(filePath, results) {
	var formattedResults = results.map(function(result, i) {
		return ['Case #' + (i+1) + ':', result[0], result[1]].join(' ');
	}).join('\n');
	fs.writeFile(filePath, formattedResults);
}

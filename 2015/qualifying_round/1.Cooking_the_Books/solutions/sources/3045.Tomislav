#include <algorithm>
#include <iostream>
#include <bitset>
#include <sstream>
#include <fstream>
#include <map>
#include <string>
#include <set>
#include <queue>
#include <vector>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
using namespace std;


typedef long long int64;
typedef unsigned long long uint64;
typedef unsigned int uint;
#define sz(X) ((int)(X).size())
#define foreach(i,c) for(__typeof((c).begin()) i=((c).begin());i!=(c).end();++i)
#define EXISTS(x, s) ( (s).find((x)) != (s).end() )
template<class T> vector<T> tokenize_to(const string &str) { vector<T> r; T x; istringstream is(str); while (is >> x) r.push_back(x); return r; }
template<typename T> string v_2_s(vector<T> &a) { stringstream sb; __typeof(a.begin()) i = a.begin(); if (i!=a.end()) { sb << *i; ++i; } for (; i!=a.end();++i) { sb << " " << *i; } return sb.str(); }

template<typename T, typename U> inline void relaxmin(T &res, const U &x) {
  if (x < res) {
    res = x;
  }
}
template<typename T, typename U> inline void relaxmax(T &res, const U &x) {
  if (x > res) {
    res = x;
  }
}

void solve() {
  string X;
  cin >> X;

  string mins = X, maxs = X;

  if (sz(X) > 1) {
    for (int i = 0; i < sz(X); ++i){
      for (int j = i + 1; j < sz(X); ++j){
        string t = X;
        swap(t[i], t[j]);
        //~ cerr << t << endl;
        if (t[0] != '0') {
          relaxmax(maxs, t);
          relaxmin(mins, t);
        }
      }
    }
  }

  cout << mins << " " << maxs << '\n';

}

void init() {

}

int main (int argc, char *argv[]) {
  cin.sync_with_stdio(0);
  clock_t c_init = clock();
  init();
  cerr << "Init Elapsed: " << double(clock()-c_init) / CLOCKS_PER_SEC << " seconds\n";
  clock_t c_solve = clock();
  int t = 1;
  cin >> t;
  for(int c = 1; c <= t; ++c) {
    cout << "Case #" << c << ": ";
    solve();
  }
  cerr << "Solve Elapsed: " << double(clock()-c_solve) / CLOCKS_PER_SEC << " seconds\n";
  cerr << "Total Elapsed: " << double(clock()-c_init) / CLOCKS_PER_SEC << " seconds\n";
  return 0;
}


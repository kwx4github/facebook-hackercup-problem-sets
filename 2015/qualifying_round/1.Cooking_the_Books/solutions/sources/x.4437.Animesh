import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;

class CookingTheBooks {

	public static void main(String[] args) {
		String inputFilePath = args[0];
		String outputFilePath = args[1];
		try {
			InputStream is = new FileInputStream(inputFilePath);
			// Scanner in = new Scanner(System.in);
			Scanner in = new Scanner(is);
			OutputStream os = new FileOutputStream(outputFilePath);
			// OutputStreamWriter os = new OutputStreamWriter(System.out);
			PrintWriter pw = new PrintWriter(os);
			// Retrieve the number of test cases
			int t = in.nextInt();
			int smallest = 0, largest = 0;
			for (int i = 0; i < t; i++) {
				// Fetch the number on which conversion has to be done
				int n = in.nextInt();
				// Find the number of digits
				int length = 1;
				if (n > 0) {
					length = (int) Math.log10(n) + 1;
				}
				// Create an array to store each digit of the number
				int[] digits = new int[length];
				// Now fill in the digits in the array
				// Use modulo 10
				int number = n;
				int j = 0;
				// Keep track of running maximum and it's position
				int maximum = 0;
				int maxPos = 0;
				// Keep track of running minimum and it's position
				int minimum = 9;
				int minPos = 0;
				while (number > 0) {
					int digit = number % 10;
					number = number / 10;
					digits[j] = digit;
					if (digit > maximum) {
						maximum = digit;
						maxPos = j;
					}
					// Only consider non zero digits for swapping
					if (digit < minimum && digit != 0) {
						minimum = digit;
						minPos = j;
					}
					j = j + 1;
				}
				// Find the smallest and largest number by swapping at most one
				// digit
				if (length > 1) {
					int[] minDigits = Arrays.copyOf(digits, digits.length);
					int[] maxDigits = Arrays.copyOf(digits, digits.length);
					// Create the smallest by swapping the first non zero digit
					// with digit as pos 1
					int temp = minDigits[minPos];
					minDigits[minPos] = minDigits[minDigits.length - 1]; // It's
																			// inverted
																			// array
					minDigits[minDigits.length - 1] = temp;
					String smallestString = "";
					for (int k = minDigits.length - 1; k >= 0; k--) {
						smallestString = smallestString + minDigits[k];
					}
					smallest = Integer.parseInt(smallestString);
					// Create the largest by just putting the numbers back to
					// front
					temp = maxDigits[maxPos];
					maxDigits[maxPos] = maxDigits[minDigits.length - 1];
					maxDigits[minDigits.length - 1] = temp;
					String largestString = "";
					for (int k = minDigits.length - 1; k >= 0; k--) {
						largestString = largestString + maxDigits[k];
					}
					largest = Integer.parseInt(largestString);
				} else {
					// No need to swap if it's just 1 digit
					smallest = n;
					largest = n;
				}
				// Print the output
				String outputString = "Case #" + (i + 1) + ": " + smallest
						+ " " + largest;
				pw.println(outputString);
			}

			in.close();
			pw.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}


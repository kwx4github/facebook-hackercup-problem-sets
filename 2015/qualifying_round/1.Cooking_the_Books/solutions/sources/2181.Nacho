// Facebook Hacker Cup 2015 - Qualification round - Problem #1

using System;
using System.IO;
using System.Text;

class CookingTheBooks
{
	// Generates each line of the answer, given the case number (c), the minimum number (n1) and the maximum number (n2)
    public static void ProcessAndAnswer(int c, int n1, int n2)
    {
        Console.WriteLine("Case #{0}: {1} {2}", c+1, n1, n2);
    }
    
    // Swaps two digits from a given number (those in positions i and j)
    public static void SwapDigits(ref StringBuilder number, int i, int j)
    {
		char c1 = number[i];
		char c2 = number[j];
		number[i] = c2;
		number[j] = c1;		
	}
    
    // Orders the digits of the number in ascendent (true) or descendent (false) order. 0 in 1st position is forbidden unless the whole number is 0
    public static void OrderNumber(ref StringBuilder number, bool order)
    {
		for (int i = 0; i < number.Length - 1; i++)
			for (int j = i+1; j < number.Length; j++)
			{
				if ((number[i] > number[j] && order && (i != 0 || number[j] != '0')) || (number[i] < number[j] && !order && (i != 0 || number[j] != '0'))) 
				{
					SwapDigits(ref number, i, j);
				}
			}
	}
    
    // Main function
    public static void Main(string[] args)
    {
		int c, i, j, k, t;
		
		// We read from a file if there is any parameter        
        if (args.Length > 0)
            Console.SetIn(new StreamReader(args[0]));
        
        // We read the total amount of numbers (T)   
        t = Convert.ToInt32( Console.ReadLine() );
        
        // We read and process each number (N)    
        for(i=0; i<t; i++)
        {
			// Read the number. We will use this variable to set the minimum number
			StringBuilder number = new StringBuilder(Console.ReadLine());
			
			// If the number is 0, then return 0 0
			if (Convert.ToInt32(number.ToString()) == 0)
				ProcessAndAnswer(i, 0, 0);
			else
			{
				// Copy the number into another variable that will be the maximum number
				StringBuilder numberMax = new StringBuilder(number.ToString());
				// Copy the number into another variable to order it
				StringBuilder numberToOrder = new StringBuilder(number.ToString());
				
				// Finding the minimum:
				
				// Order the digits of the copy to get the minimum number
				OrderNumber(ref numberToOrder, true);

				// Compare the ordered number with the original to find the first place where digits are different
				c = number.Length - 1;
				for (j = 0; j < number.Length; j++)
					if (number[j] != numberToOrder[j])
					{
						c = j;
						break;
					}

				// Find the lowest digit beyond position j and swap it with position j
				char lowest = '9';
				int posLowest = c;
				for (k = c+1; k < number.Length; k++)
				{
					if (number[k] <= lowest && (c != 0 || number[k] != '0'))
					{
						lowest = number[k];
						posLowest = k;
					}	
				}
				if (posLowest > c)
					SwapDigits(ref number, c, posLowest);

				// Finding the maximum:
				
				// Reorder the digits of the copy to get the maximum number
				OrderNumber(ref numberToOrder, false);

				// Compare the ordered number with the original to find the first place where digits are different
				c = numberMax.Length - 1;
				for (j = 0; j < numberMax.Length; j++)
					if (numberMax[j] != numberToOrder[j])
					{
						c = j;
						break;
					}

				// Find the highest digit beyond position j and swap it with position j
				char highest = '0';
				int posHighest = c;
				for (k = c+1; k < numberMax.Length; k++)
				{
					if (numberMax[k] >= highest && (c != 0 || numberMax[k] != '0'))
					{
						highest = numberMax[k];
						posHighest = k;
					}	
				}
				if (posHighest > c)
					SwapDigits(ref numberMax, c, posHighest);
				
				// Generate the case result
				ProcessAndAnswer(i, Convert.ToInt32(number.ToString()), Convert.ToInt32(numberMax.ToString()));				
			}
        }
    }
}

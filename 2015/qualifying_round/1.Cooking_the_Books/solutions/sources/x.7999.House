import numpy as np
import math

#print "hi world pla"
#ifile = open("account_ex_in.txt",'r')
#print ifile.read()
#print "pla before for"

output = ''
count = 0

ifile = open("cooking_the_books.txt",'r')
ofile = open("account.out",'w')
oFileDebug = open('account_debug.txt','w')
#def containZero() :
#	print 'containZero'
#def checkforNine() : 
#	print 'check for nine'

def swapForMax(amountArray,amountListS,maxAmount,amountStr) :
	for i in range(len(amountArray)) : 
		print i
		print amountArray[i] 
		if amountArray[i] ==  maxAmount : 
			print 'equal to maxAmount'
			#print '99999'
			print amountListS
			print np.where(amountArray==amountArray[i])
			amountListS.remove(str(maxAmount))
			#print '888'
			print amountListS
			#print '99999'
		elif amountArray[i] > maxAmount :
			print 'theeeeeeeeeeeeeee mostttttttttttt impossibleeeeeeeeeee'
		else :
			#print 'else============================='
			#print 'fewPosition'
			lastMax = amountStr.rfind(amountListS[-1])
			print lastMax
			buffer = 0
			buffer = amountArray[i]
			amountArray[i] = amountArray[lastMax]
			amountArray[lastMax] = buffer			
			break
	#print '0000000000000000000000000000'
	#print 'amountArray------------------------------join'
	#maxResult=''.join(str(amountArray))
	#print ''.join(maxResult[1])
	#print maxResult
	maxResultArray = amountArray.astype('str')	
	#maxResult=''.join(str(maxResultArray))
	#maxResult=String.join(maxResultArray,'')
	maxResult=maxResultArray.tolist()
	maxResult=''.join(maxResult)
	print maxResult
	return maxResult

def swapForMin(amountArray,amountListSForMin,minAmount,amountStr,minZero) :
	for i in range(len(amountArray)) : 
		print 'MIN  iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii'
		print i
		print 'amountArray[i]'
		print amountArray[i] 
		print 'amountListSForMin[0]'
		print amountListSForMin
		print 'minZero'
		print minZero
		if len(amountListSForMin) >=1 :
			if amountArray[i] == amountListSForMin[0] and i==0 :
				#if amountArray[i] ==  minAmount and i==0 : 
				#if amountArray[i] ==  minAmount and i==0 and minAmount !=0: 
				print 'equal to MIN MIN MIN'
				oFileDebug.write('equal to MIN MIN MIN')
				#print '99999'
				print amountListSForMin
				oFileDebug.write('amountListSForMin'+str(amountListSForMin))
				print np.where(amountArray==amountArray[i])
				amountListSForMin.remove(str(minAmount))
				#print '888'
				print amountListSForMin
				#print '99999'
			elif amountArray[i] < minAmount and minZero ==0 :
				print 'theeeeeeeeeeeeeee mostttttttttttt impossibleeeeeeeeeee'
				#elif minAmount == 0 :
				#print 'many manayyyyyyyyyyy zeroooooo'
			elif (minZero >= 1) and (i >= 1) and amountArray[i] > 0 :
				print 'else IF=============minZero Flag================'
				#arrayWithZero = np.where(amountArray==0)			
				#lastMin[-1]
				lastMin = amountStr.rfind('0')
				print lastMin
				buffer = 0
				buffer = amountArray[i]
				amountArray[i] = 0
				amountArray[lastMin] = buffer			
				break			
			else :
				print 'else============================='
				#lastMin = amountStr.rfind(amountListS[0])
				#amountListSForMin
				print 'minZero'
				print minZero
				if len(amountListSForMin) >=1 :
					print amountListSForMin[0]
					print amountStr
					lastMin = amountStr.rfind(amountListSForMin[0])
					print lastMin
					print amountArray
					print 'amountArray[lastMin]====='
					print amountArray[lastMin]
					#print amountArray[2]
					buffer = 0
					buffer = amountArray[i]
					amountArray[i] = amountArray[lastMin]
					amountArray[lastMin] = buffer			
			break

		else : 
			print 'amountArray'
			print amountArray
			amountArray = amountArray
	
	#print '0000000000000000000000000000'
	#print 'amountArray------------------------------join'
	#maxResult=''.join(str(amountArray))
	#print ''.join(maxResult[1])
	#print maxResult
	minResultArray = amountArray.astype('str')	
	#maxResult=''.join(str(maxResultArray))
	#maxResult=String.join(maxResultArray,'')
	minResult=minResultArray.tolist()
	minResult=''.join(minResult)
	print minResult
	return minResult

def currentMinAmount(amountListS) : 
	for i in range (len(amountListS)) :
		if (amountListS[i] != 0) and (amountListS[i] > 0) :
			minAmountS = amountListS[i]
			break
	return curMin

def numberZeroInAmountListS(amountListS) :
	numberZero = 0
	for i in range (len(amountListS)) :
		if amountListS[i] == '0' : 
			numberZero = numberZero + 1
	return numberZero

def currentMinListSWithoutZero(amountListS) : 
	minListSwithNoZero = []
	#print 'function currentminlists with out zero'
	#print amountListS
	for i in range (len(amountListS)) :
		#print 'within for '
		print amountListS[i]
		if (amountListS[i] != '0') :
			#print 'if'
			minListSwithNoZero.append(amountListS[i])
		elif (amountListS[i] == '0'):
			print 'nothing to do this is zero'
		else :
			print 'current min llist with no zero IMPOSSBLE'
	return minListSwithNoZero

def cheatNumber(amount, digit) :
	minZero=0
	fewestResult = 0
	maxResult = 0
	amountStr=''
	amountStr = amount
	print amountStr
	amountList = []
	amountList = list(amountStr)
	print amountList
	amountListS =  sorted(amountList)
	print amountListS
	amountArray = np.asarray(amountList)			
	amountArray = amountArray.astype(np.int64)		
	amountArrayOri = amountArray
	fewest = 0
	#amountListS[0]
	print 'cheat number function ======'
	#minAmointS = amountListS.index()
	maxAmountS = amountListS[-1]
	print 'maxAmount'
	print maxAmountS
	maxAmount = int(maxAmountS) 
	minAmountS = amountListS[0]
	print 'minAmountS'
	print minAmountS
	minZero = numberZeroInAmountListS(amountListS)
	print 'minZero----------------------'
	print minZero
	minListSwithNoZero = currentMinListSWithoutZero(amountListS)
	if len(minListSwithNoZero) >= 1 : 
		minAmountS = minListSwithNoZero[0]
		print minListSwithNoZero
		minAmount = int(minAmountS)
	else :
		minAmount = 0
	#print 'minAmount'
	print minAmountS
	minAmount = int(minAmountS) 
	#toIncrease = [x for x in amountListS if x !=9 ]	
	amountArray = np.asarray(amountList)			
	amountArray = amountArray.astype(np.int64)
	#print '++++----++++'
	print 'amountarray'
	print amountArray
	print '---oo'
	#maxDigit = np.where(amountArray == maxAmount)
	maxResult=swapForMax(amountArray,amountListS,maxAmount,amountStr)
	#print 'maxResult'
	#print maxResult	
	#minListSwithNoZero = currentMinListSWithoutZero(amountListS)
	#print 'minListSwithNoZero'
	#print minListSwithNoZero
	print 'amountarray'
	print amountArray
	print '---oo'
		
	print 'amountarray'
	print amountArray
	print '---oo'
	fewestResult=swapForMin(amountArrayOri,minListSwithNoZero,minAmount,amountStr,minZero)
	outputTemp = 'Case #'+str(count)+': '+str(fewestResult)+' '+str(maxResult)+'\n'
	ofile.write(outputTemp)
	#outputTemp = 'Case #'+str(count)+': '+str(fewestResult)+' '+str(maxResult)+'\n'
	oFileDebug.write(outputTemp)
	print '----------------------------------------------'
	print outputTemp	
	#print amountList.index(fewest)			
	#[i for i,x inenumerate(amountList) if x == amountListS[-1] ]
	#amount
	#print "----one digit"
		
#ifile = open("account_ex_in.txt",'r')
#count = 0
for line in ifile :
	if count == 0 :
		print "case :"+line
		case = int(line) 
		print case
	else :
		print line
		actualAmount = line.split()
		print  "--------------------------------------pla: "
		lenght = len(actualAmount[0])
		#print len(pla[0])
		print 'lenght : '
		print lenght
		actualAmountInt = actualAmount[0]
		#print plaInt
		#print plaInt.lenght()
		if lenght == 1 :
			print "one digit"
			outputTemp = 'Case #'+str(count)+': '+str(actualAmountInt[0])+' '+str(actualAmountInt[0])+'\n'	
			ofile.write(outputTemp)
			print output
		else :
			#print "======================"
			#ofile.write(output)
			cheatNumber(actualAmountInt, lenght)
			#print
		print '------line-count-------'
	print count
	print case
	if count >= case : 
		break
	count = count + 1
	#print 'count ',count
	#print '---------------------------------'
print '==end for loop=='
print "output : "+output
print '---------------------------------===================================================='
ifile.close()
ofile.close()
oFileDebug.close()



	#if amountListS[0] == '0' : 
	#	fewest = amountListS[0]
		#print 'fewest of contain Zero'
	#	print fewest
	#	print 'sorted contain zero'
	#	print 'amount list position'
	#	#print amountList.index(fewest)	
	#else :

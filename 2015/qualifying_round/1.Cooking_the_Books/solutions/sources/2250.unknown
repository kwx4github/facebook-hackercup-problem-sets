//============================================================================
// Name        : HackerCup-2015.cpp
// Author      : Abdullah Khan Zehady
// Version     :
// Copyright   : Use for Learning
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>

using namespace std;

void printDigits(int digits[],int len) {
    for(int j=0;j<len;j++){
        cout << digits[j] << endl; 
    }
}
void swap(int digits[],int k, int l) {
    int t=digits[k];
    digits[k]=digits[l];
    digits[l]=t;
}

long int getNumFromDigits(int digits[], int k, int l, int len) {
    swap(digits,k,l);
    long int N=0;
    for(int i=0;i<len;i++) {
        N += digits[i] * pow(10.0,i);  
    }
    swap(digits,k,l);


    return N;
}

int findDigitNum(long int a) {
    int len=0;
    while(a>0){
       len++;
       a=a/10;
    }
    return len; 
}


long int findMin(long int a, long int b){
    return (a<=b) ? a : b;
}

long int findMax(long int a, long int b){
    return (a>=b) ? a : b;
}

int main() {
    long int T,N,max,min;

    cin >> T;

    for(int i=0;i<T;i++) {
        cin >> N;
        cout << "Case #" << i+1 << ": ";
        max=N;
        min=N;
        int* digits;
        int len;
        len=findDigitNum(N);
        if(len == 1) {
	        cout << min << " " << max << endl; 
            continue;
        }
        digits=(int*)malloc(sizeof(int)*len);
        int j=0;
        long int tmp=N;
        while(tmp>0){
          digits[j++]=tmp%10;
          tmp=tmp/10;
        }

        int k,l;
        for(k=0;k<len-1;k++) {
            for(l=k+1;l<len;l++) {
                long int res=getNumFromDigits(digits,k,l,len);
                if(findDigitNum(min) == findDigitNum(res))
                    min=findMin(min,res);
                if(findDigitNum(min) == findDigitNum(res))
                    max=findMax(max,res);
            }
        }

        free(digits);
	    cout << min << " " << max << endl; // prints
    }

	return 0;
}

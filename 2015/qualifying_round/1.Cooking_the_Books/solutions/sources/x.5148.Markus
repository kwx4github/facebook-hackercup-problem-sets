import java.nio.charset.*;
import java.nio.file.*;
import java.util.*;
import java.io.*;

public class Bookkeeper {

    public static int[] solve(String n) {
        char[] divided = n.toCharArray();
        int maxPos = 0;
        int minPos = 0;
        for (int i = 0; i < divided.length; ++i) {
            if (divided[i] > divided[maxPos]) {
                maxPos = i;
            }
            if (divided[i] < divided[minPos] && divided[i] != '0') {
                minPos = i;
            }
        }
        int[] solution = new int[2];

        char temp = divided[0];
        divided[0] = divided[maxPos];
        divided[maxPos] = temp;
        solution[1] = Integer.parseInt(new String(divided));

        divided = n.toCharArray();
        temp = divided[0];
        divided[0] = divided[minPos];
        divided[minPos] = temp;
        solution[0] = Integer.parseInt(new String(divided));

        return solution;
    }

    public static void main(String[] args) {
        Path inputFile = Paths.get(args[0]);
        List<String> input;
        try {
            input = Files.readAllLines(inputFile, Charset.forName("UTF-8"));
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return;
        }
        Iterator<String> it =  input.iterator();
        int numCases = Integer.parseInt(it.next());
        for (int i = 1; i <= numCases; i++) {
            String caseLine = it.next();
            int[] solution = solve(caseLine);
            System.out.printf("Case #%d: %d %d%n", i, solution[0], solution[1]);
        }
    }
}

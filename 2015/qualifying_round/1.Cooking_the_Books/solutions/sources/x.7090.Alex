package hackercup2015;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;

public class CookingBooks {

    public static void main(String[] args) {

        try {
            // Redirecting standard input from input.txt
            System.setIn(new FileInputStream(new File("input.txt")));
            BufferedReader br = new BufferedReader(new InputStreamReader(
                    System.in));

            // Redirecting standard output to output.txt
            File outFile = new File("output.txt");
            System.setOut(new PrintStream(new FileOutputStream(outFile)));

            // Processing
            String input;
            int i = 1;
            br.readLine(); // ignoring first line
            while ((input = br.readLine()) != null) {
                System.out.println("Case #" + i + ": "
                        + swapDigits(Integer.parseInt(input), "MIN") + " "
                        + swapDigits(Integer.parseInt(input), "MAX"));
                i++;
            }

        } catch (IOException io) {
            io.printStackTrace();
        }

    }

    public static int swapDigits(int number, String minOrMax) {

        if (!(minOrMax.equals("MIN") || minOrMax.equals("MAX")))
            throw new IllegalArgumentException();

        // Trivial case
        if (number == 0) {
            return 0;
        }

        // "Normal" case
        String nbString = Integer.toString(number);
        int extremumDigitInd = 0;

        if (minOrMax.equals("MIN")) {

            for (int i = 0; i < nbString.length(); i++) {
                if (nbString.charAt(i) != '0'
                        && nbString.charAt(i) < nbString
                                .charAt(extremumDigitInd)) {
                    extremumDigitInd = i;
                }
            }

        } else {

            for (int i = 0; i < nbString.length(); i++) {
                if (nbString.charAt(i) != '0'
                        && nbString.charAt(i) > nbString
                                .charAt(extremumDigitInd)) {
                    extremumDigitInd = i;
                }
            }

        }

        char extremumDigit = nbString.charAt(extremumDigitInd);
        char firstDigit = nbString.charAt(0);
        StringBuilder sb = new StringBuilder(nbString);

        sb.setCharAt(0, extremumDigit);
        sb.setCharAt(extremumDigitInd, firstDigit);

        return Integer.parseInt(sb.toString());
    }
}

#include <fstream>
#include <sstream>
#include <string>

int findLargest(int);
int findSmallest(int);

int main()
{
	std::ifstream fin;
	std::ofstream fout;
	fin.open("cooking_the_books.txt");
	fout.open("cooking_the_books_output.txt");
	int numberIn;
	int counter = 1;
	int lineCount;
	fin>>lineCount;
	for(int i = 0; i < lineCount; i++)
	{
		fin>>numberIn;
		int largestNumber = findLargest(numberIn);
		int smallestNumber = findSmallest(numberIn);
		printf("Case #%i: %i, %i\n", counter, largestNumber, smallestNumber);
		fout << "Case #" << counter << ": " << smallestNumber << " " << largestNumber << std::endl;
		counter++;
	}

	return 0;
}

int findLargest(int inputNum)
{
	if (inputNum >= 0 && inputNum <= 11)
	{
		return inputNum;
	}
	else
	{
		std::string intLength = static_cast<std::ostringstream*>( &(std::ostringstream() << inputNum) )->str();
		int digitNum = intLength.length();
		int indivudualValues[digitNum];
		int largestIndex = 0;
		int largestValue = 0;
		for (int i = digitNum - 1; i >= 0; i--)
		{
			indivudualValues[i] = inputNum % 10;
    		inputNum /= 10;
		}

		largestValue = indivudualValues[0];

		for (int i = 0; i < digitNum; i++)
		{
			if (indivudualValues[i] > largestValue)
			{
				largestValue = indivudualValues[i];
				largestIndex = i;
			}
		}

		if (largestIndex != 0)
		{
			int temp = indivudualValues[0];
			indivudualValues[0] = largestValue;
			indivudualValues[largestIndex] = temp;
		}

		std::stringstream ss;
		for (unsigned i = 0; i < sizeof indivudualValues / sizeof indivudualValues [0]; ++i)
		{
			ss << indivudualValues[i];
		}

		ss >> inputNum;
		return inputNum;
	}
}

int findSmallest(int inputNum)
{
		if (inputNum >= 0 && inputNum <= 11)
	{
		return inputNum;
	}
	else
	{
		std::string intLength = static_cast<std::ostringstream*>( &(std::ostringstream() << inputNum) )->str();
		int digitNum = intLength.length();
		int indivudualValues[digitNum];
		int smallestIndex = 0;
		int smallestValue = 0;
		for (int i = digitNum - 1; i >= 0; i--)
		{
			indivudualValues[i] = inputNum % 10;
    		inputNum /= 10;
		}

		smallestValue = indivudualValues[0];

		for (int i = 0; i < digitNum; i++)
		{
			if (indivudualValues[i] < smallestValue)
			{
				smallestValue = indivudualValues[i];
				smallestIndex = i;
			}
		}

		if (smallestIndex != 0)
		{
			int temp = indivudualValues[0];
			indivudualValues[0] = smallestValue;
			indivudualValues[smallestIndex] = temp;
		}

		std::stringstream ss;
		for (unsigned i = 0; i < sizeof indivudualValues / sizeof indivudualValues [0]; ++i)
		{
			ss << indivudualValues[i];
		}

		ss >> inputNum;
		return inputNum;
	}
}
#include <iostream>

// written by kv.krishnaprasad@gmail.com ; 9449 218 275

using namespace std;

void print_low_high(int i, int d);

int debug = 0;
int num_digits;


int num_digits_func(int num) {
  int num_digits = 0;
  while (num) {
    num /= 10;
    num_digits++;
  }
  return num_digits;
}

int get_lowest(int num) {

  // Find possible candidate
  int temp = num;
  int pos = 0;
  int value_lowest = temp%10;
  int pos_first = 0;
  int pos_lowest = 0;
  int value_lowest_non_zero = 100;
  int curr_pos_lowest_non_zero = 100;
  int curr_pos_lowest = 0;
  int digits[20];

  while (temp) {
    int digit = temp % 10;
    temp /= 10;

    if (digit < value_lowest) {
      value_lowest = digit;
      curr_pos_lowest = pos;
    }

    if (digit != 0) {
      if (digit < value_lowest_non_zero) {
        value_lowest_non_zero = digit;
        curr_pos_lowest_non_zero = pos;
      }
    }

    if (pos != num_digits -1 ) {
      if (digit > value_lowest) {
        pos_first = pos;
        pos_lowest = curr_pos_lowest;
      }
    }
    else {
      if (digit > value_lowest_non_zero) {
        pos_first = pos;
        pos_lowest = curr_pos_lowest_non_zero;
      }
    }

    digits[pos] = digit;
    pos++;
  }

  // cout << "curr_pos_lowest_non_zero = " << curr_pos_lowest_non_zero << endl;

  // Swap the digits
  temp = digits[pos_first];
  digits[pos_first] = digits[pos_lowest];
  digits[pos_lowest] = temp;

  // Get the number
  int lowest_value = 0;
  for (int i=num_digits-1; i >= 0; i--) {
    lowest_value *= 10;
    lowest_value += digits[i];
  }

  // cout << num << ",      " << pos_first << ", " << pos_lowest << endl;

  return lowest_value;
}

int get_highest(int num) {

  // Find possible candidate
  int temp = num;
  int pos = 0;
  int value_highest = temp%10;
  int pos_first = 0;
  int pos_highest = 0;
  int value_highest_non_zero = -1;
  int curr_pos_highest_non_zero = 0;
  int curr_pos_highest = 0;
  int digits[20];

  while (temp) {
    int digit = temp % 10;
    temp /= 10;

    if (digit > value_highest) {
      value_highest = digit;
      curr_pos_highest = pos;
    }

    if (digit != 0) {
      if (digit > value_highest_non_zero) {
        value_highest_non_zero = digit;
        curr_pos_highest_non_zero = pos;
      }
    }

    if (pos != num_digits -1 ) {
      if (digit < value_highest) {
        pos_first = pos;
        pos_highest = curr_pos_highest;
      }
    }
    else {
      if (digit < value_highest_non_zero) {
        pos_first = pos;
        pos_highest = curr_pos_highest_non_zero;
      }
    }

    digits[pos] = digit;
    pos++;
  }

  // cout << "curr_pos_highest_non_zero = " << curr_pos_highest_non_zero << endl;

  // Swap the digits
  temp = digits[pos_first];
  digits[pos_first] = digits[pos_highest];
  digits[pos_highest] = temp;

  // Get the number
  int highest_value = 0;
  for (int i=num_digits-1; i >= 0; i--) {
    highest_value *= 10;
    highest_value += digits[i];
  }

  // cout << num << ",      " << pos_first << ", " << pos_highest << endl;

  return highest_value;
}


int main() {

  FILE * fp = fopen("input.txt", "r");
  int num;
  fscanf(fp, "%d", &num); 

  for (int i=0; i<num; i++) {
    int value;
    int lowest_value;
    int highest_value;
    fscanf(fp, "%d", &value);
    if (value == 0) {
      lowest_value = highest_value = 0;
    }
    else {
      num_digits = num_digits_func(value);
      lowest_value = get_lowest(value);
      highest_value = get_highest(value);
    }
    cout << "Case #" << i+1 << ": " << lowest_value << " " << highest_value << endl; 
  }
}

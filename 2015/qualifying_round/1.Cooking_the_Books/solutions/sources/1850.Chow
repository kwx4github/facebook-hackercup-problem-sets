#include <cstdio>

int main() {
	int TC, count;
	scanf("%d", &TC);
	int input;
	int iarr[20];
	int larr[20];
	int sarr[20];
	int largest;
	int smallest;
	count = 0;
	while (count++ < TC) {
		scanf("%d", &input);

		// transformation into array
		int length;
		for (length = 0; input > 0; length++) {
			iarr[length] = input % 10;
			input /= 10;
		}

		// reversing array for natural ordering
		for (int i = 0; i < length; i++) {
			larr[i] = iarr[length - 1 - i];
			sarr[i] = iarr[length - 1 - i];
		}

		// finding largest
		for (int i = 0; i < length - 1; i++) {
			int oldval = larr[i];
			int newval = oldval;
			int index = -1;
			for (int j = length - 1; j > i; j--) {
				if (larr[j] > newval) {
					newval = larr[j];
					index = j;
				}
			}
			if (index != -1) {
				larr[i] = newval;
				larr[index] = oldval;
				break;
			}
		}
		largest = 0;
		for (int i = 0; i < length; i++) {
			largest *= 10;
			largest += larr[i];
		}

		// finding smallest
		for (int i = 0; i < length - 1; i++) {
			int oldval = sarr[i];
			int newval = oldval;
			int index = -1;
			for (int j = length - 1; j > i; j--) {
				if (sarr[j] < newval && !(i == 0 && sarr[j] == 0)) {
					newval = sarr[j];
					index = j;
				}
			}
			if (index != -1) {
				sarr[i] = newval;
				sarr[index] = oldval;
				break;
			}
		}
		smallest = 0;
		for (int i = 0; i < length; i++) {
			smallest *= 10;
			smallest += sarr[i];
		}
		printf("Case #%d: %d %d\n", count, smallest, largest);
	}
	return 0;
}
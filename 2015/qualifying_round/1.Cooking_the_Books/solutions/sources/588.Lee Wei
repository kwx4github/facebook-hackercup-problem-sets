#include <bits/stdc++.h>
#include <cassert>
#include <climits>
#include <cfloat>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;

inline unsigned int rand16(){return ((rand()) << 15) ^ rand();}
inline unsigned int rand32(){return (rand16() << 16) | rand16();}
inline ULL rand64(){return ((LL)rand32() << 32) | rand32();}
inline ULL random(LL l, LL r){return l == r ? l : rand64() %(r-l) +l;}
inline double fRand(double fMin, double fMax) // RAND_MAX: [fMin,fMax)
	{ double f = (double)rand()/(RAND_MAX+1.0f); return fMin + f*(fMax-fMin); }

const int INF = 0x3f3f3f3f;
const LL INFF = 1LL << 60;
const double EPS = 1e-9;
const double PI = acos(-1.0); //2*acos(0.0); //M_PI;

//4 dirs: int dx[]={1,0,-1,0}, dy[]={0,1,0,-1};
//8 dirs: int dx[]={1,1,0,-1,-1,-1,0,1}, dy[]={0,1,1,1,0,-1,-1,-1};
//hex: int dx[6]={2,1,-1,-2,-1,1}, dy[6]={0,1,1,0,-1,-1};
//knight: int dx[]={2,1,-1,-2,-2,-1,1,2}, dy[]={1,2,2,1,-1,-2,-2,-1};

#define FOR(i,a,b)   for(int(i)=int(a);(i)<int(b);(i)++)
#define FOREQ(i,a,b) for(int(i)=int(a);(i)<=int(b);(i)++)
#define RFOR(i,a,b)  for(int(i)=(a),_b(b);(i)>=_b;--(i))
#define FOREACH(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define FILL(arr,val) memset((arr),(val),sizeof(arr))
#define CLR(a)        memset((a),0,sizeof(a))
#define CPY(dest,src) memcpy((dest),(src),sizeof(dest))

#define ALL(a)       (a).begin(),(a).end()
#define SZ(a)        ((int)(a).size())
#define UNIQ(a)      sort(ALL(a)); (a).erase(unique(ALL(a)),(a).end())
#define IDX(arr,ind) (lower_bound(ALL(arr),ind)-arr.begin())

#define fst first
#define snd second
#define pb  push_back
#define mp  make_pair
#define pct __builtin_popcount

template< typename T, size_t N >
inline void print_ary(T(&ary)[N], int er)
	{for(int r = 0; r < er; r++) {cout << ary[r] << " ";}cout<<endl;}
template< typename T, size_t N >
inline void print_ary_eq(T(&ary)[N], int er)
	{for(int r = 1; r <= er; r++) {cout << ary[r] << " ";}cout<<endl;}
template< typename T, size_t N, size_t M >
inline void print_ary_2d(T(&ary)[N][M], int er, int ec)
	{for(int r = 0; r < er; r++) {for(int c = 0; c < ec; c++) {cout << ary[r][c] << " ";}cout<<endl;}}
template< typename T, size_t N, size_t M >
inline void print_ary_2d_eq(T(&ary)[N][M], int er, int ec)
	{for(int r = 1; r <= er; r++) {for(int c = 1; c <= ec; c++) {cout << ary[r][c] << " ";}cout<<endl;}}
inline LL lcm(LL a, LL b)
	{return a*b/__gcd(a,b);}
inline double dist(double x1, double y1, double x2, double y2)
	{return hypot(x1-x2,y1-y2);}
//scanf("%[^\n]", &s);
inline int isPowerOfTwo (unsigned int x) {return ((x != 0) && ((x & (~x + 1)) == x));}

char N[15];
int lpos[10], rpos[10];

inline void swapc(char *N, int a, int b)
{
	char tmp = N[a];
	N[a] = N[b];
	N[b] = tmp;
}

int main()
{
	int T; scanf("%d", &T);
	FOREQ(t,1,T)
	{
		printf("Case #%d: ", t);
		FOR(i,0,10) {
			lpos[i] = INT_MAX;
			rpos[i] = -1;
		}
		scanf("%s", &N[0]);
	//	fprintf(stderr, "%s ", N);
		int len = strlen(N);
		FOR(i,0,len)
		{
			int n = (int) N[i] - '0';
			lpos[n] = min(lpos[n], i);
			rpos[n] = max(rpos[n], i);
		}
		// FOR(i,0,10)
		// {
		// 	if (lpos[i]==INT_MAX && rpos[i]==-1) {continue;}
		// 	fprintf(stderr, "%d: %d %d\n", i,lpos[i],rpos[i]);
		// }

		int curv = -1, curp = -1;
		int pos_to_swap_min = -1, pos_to_swap_max = -1;
		FOR(p,0,len)
		{
			curv = (int) N[p] - '0';
			curp = p;
			pos_to_swap_min = -1;
			FOR(i,0,curv)
			{
				if (lpos[i]==INT_MAX && rpos[i]==-1) {continue;}
				if (p==0 && i==0) {continue;}
				if (p < rpos[i]) {
					pos_to_swap_min = rpos[i];
					break;
				}
			}
			if (pos_to_swap_min!=-1) {break;}
		}
		if (pos_to_swap_min!=-1) {swapc(N, curp, pos_to_swap_min);}
		printf("%s", N);
		if (pos_to_swap_min!=-1) {swapc(N, curp, pos_to_swap_min);}

		FOR(p,0,len)
		{
			curv = (int) N[p] - '0';
			curp = p;
			pos_to_swap_max = -1;
			RFOR(i,9,curv+1)
			{
				if (lpos[i]==INT_MAX && rpos[i]==-1) {continue;}
				if (p < rpos[i]) {
					pos_to_swap_max = rpos[i];
					break;
				}
			}
			if (pos_to_swap_max!=-1) {break;}
		}
		if (pos_to_swap_max!=-1) {swapc(N, curp, pos_to_swap_max);}
		printf(" %s\n", N);
		if (pos_to_swap_max!=-1) {swapc(N, curp, pos_to_swap_max);}

	//	fprintf(stderr, "\t %d %d\n", pos_to_swap_min,pos_to_swap_max);
	}
	return 0;
}

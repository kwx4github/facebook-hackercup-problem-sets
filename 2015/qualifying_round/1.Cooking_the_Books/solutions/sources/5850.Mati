# -*- coding: utf-8 -*-
from operator import itemgetter
"""
Created on Fri Jan  9 13:56:47 2015

Facebook Hacker Cup 2015 Qualification Round - Problem 1

@author: mativait@gmail.com
"""

def clean((i,row)):
    return (i,int(row))

def output((i, number,cooked)):
    return "Case #%d: %d %d" % (i,number,cooked)
    
def get_swapped(number):
    "Returns sorted array of swapped numbers including the number itself"
    result=set()
    result.add(number)

    def prepare(number):
        s=map(int,list(str(number)))
        return s
    num=prepare(number)
    # generate swaps
    def gen_swaps(num):
        for i in xrange(len(num)):
            for j in xrange(len(num)):
                # TODO prune bad swaps
                if i == j or (num[j]==0 and i==0) or (j==0 and num[i] == 0) or num[i] == num[j]:
                    continue                
                yield (i,j)
    
    # swap & compute value
    def swap(i,j,num0):
        num=list(num0)
        
        t=num[j]
        num[j]=num[i]
        num[i]=t
        
        def compute(nums_arr):        
            return int("".join(map(str,nums_arr)))
            
        return compute(num)

    for (i,j) in gen_swaps(num):
        result.add(swap(i,j,num))

    return sort(list(result))

def cook((i,number)):    
    swap_variants_ordered=get_swapped(number)     
    return (i, swap_variants_ordered[0], swap_variants_ordered[-1])

# Ignoring first row, Since this is not c/c++ and no real need to know it in advance.
# Unless, the inputfile contains many sets of input data. 

# Set input file path here.
path="cooking_the_books.txt"


result=map(cook,map(clean,list(enumerate(open(path,'r') ))[1:]))
for line in map(output,result):
    print line



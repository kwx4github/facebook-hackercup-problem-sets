import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "(cooking.*the.*books.*[.]txt)||(input.txt)";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("cookingthebooks.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CookingTheBooks {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + (testNumber) + ": ");
        String n = in.next();
        long min = Long.parseLong(n);
        long max = Long.parseLong(n);

        for (int i = 0;i < n.length();i++) {

            for (int j = i + 1;j < n.length();j++) {
                if (i == 0 && n.charAt(j) == '0') continue;
                char ch[] = n.toCharArray();
                char t = ch[i];
                ch[i] = ch[j];
                ch[j] = t;
                long num = Long.parseLong(new String(ch));
                min = Math.min(min, num);
                max = Math.max(max, num);
            }
        }
        out.println(min + " " + max);

    }
}

class InputReader {
	private BufferedReader br;
	private StringTokenizer st;
	public InputReader(InputStream in) {
		br=new BufferedReader(new InputStreamReader(in));
		try {
			st=new StringTokenizer(br.readLine());
		} catch (IOException ignored) {

		}
	}

	public boolean readLine() {
		try {
			st=new StringTokenizer(br.readLine());
		} catch (IOException e) {
			return false;
		}
		return true;
	}

	public String next(){
		if(!st.hasMoreTokens()) readLine();
		return st.nextToken();
	}

}


#include <cstdio>
#include <algorithm>
#include <iostream>
#include <ctime>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <memory>
#include <queue>
#include <climits>
#include <vector>
#include <queue>

using namespace std;
char digits[10];
char digits_orig[10];
struct values
{
	char v;
	int i;

	bool operator<(const values &val) const
	{
		return v>val.v;
	}

}V[9];

struct increasing
{
	bool operator()(const values &val1,const values &val2) const
	{
		return val1.v<val2.v;
	}
};

int main()
{

	int T;
	scanf("%d",&T);
	for(int i=0;i<T;i++)
	{
		memset(digits,0,10);
		memset(digits_orig,0,10);

		scanf("%s",digits);
		memcpy(digits_orig,digits,10);

		int len=strlen(digits);
		for(int j=0;j<len;j++){
			V[j].v=digits[j];
			V[j].i=j;
		}
		if(len==1){
			printf("Case #%d: %s %s\n",i+1,digits_orig,digits);
			continue;
		}
		sort(V,V+len);
		for(int j=0;j<len;j++)
		{
			if(V[j].v!=digits[j])
			{
				char ch=digits[j];
				digits[j]=V[j].v;
				digits[V[j].i]=ch;
				break;
			}
		}

		sort(V,V+len,increasing());

		for(int j=0;j<(len-1);j++)
		{
			int min=j;
			char ch=digits_orig[j];
			for(int k=j+1;k<len;k++)
			{
				if(j==0 && digits_orig[k]=='0')
					continue;

				if(digits_orig[k]!='\0' && digits_orig[k]!=digits_orig[j] && digits_orig[k]<=ch)
				{
					ch=digits_orig[k];
					min=k;
					//printf("j=%d k=%d\n",j,k);
				}
			}
			if(min!=j)
			{
				ch=digits_orig[j];
				digits_orig[j]=digits_orig[min];
				digits_orig[min]=ch;
				break;
			}

		}
		


		printf("Case #%d: %s %s\n",i+1,digits_orig,digits);
	}
	return EXIT_SUCCESS;
}
#include <iostream>
#include <utility>
#include <algorithm>

using namespace std;


int GetNumberLength(int N)
{
    int length = 0;

    while (N)
    {
        ++length;
        N /= 10;
    }

    return length;
}


int GetDigit(int N, int Place)
{
    while (Place-- > 1)
    {
        N /= 10;
    }

    return N % 10;
}


int SwapPlaces(int N, int FirstPlace, int SecondPlace)
{
    int first = GetDigit(N, FirstPlace);
    int second = GetDigit(N, SecondPlace);

    if (second == 0)
    {
        return N;
    }

    int totalChange = 0;
    int addMe = second - first;
    while (FirstPlace-- > 1)
    {
        addMe *= 10;
    }

    totalChange += addMe;

    addMe = first - second;
    while (SecondPlace-- > 1)
    {
        addMe *= 10;
    }

    totalChange += addMe;

    return N + totalChange;
}


pair<int, int> GetMinMax(int N)
{
    int length = GetNumberLength(N);
    pair<int, int> answer{ N, N };

    for (int i = length; i >= 1; --i)
    {
        for (int j = i - 1; j >= 1; --j)
        {
            int number = SwapPlaces(N, i, j);

            answer.first = min(answer.first, number);
            answer.second = max(answer.second, number);
        }
    }

    return answer;
}


int main()
{
    int T;
    cin >> T;

    for (int c = 1; c <= T; ++c)
    {
        int N;
        cin >> N;

        auto answer = GetMinMax(N);

        cout << "Case #" << c << ": " << answer.first << " " << answer.second << endl;
    }

    return 0;
}

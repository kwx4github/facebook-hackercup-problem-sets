#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

char norm[13], maxi[13], mini[13];

void calculateMin(){
    int longi = strlen(norm);
    strcpy(mini, norm);
    //si el primer num es 0, no procede
    //si hay varios digitos minimos, elegir el que esta más a la derecha
    int minNumbPos = 0;
    
    for(int i = longi - 1; i > 0; i--){
        if( mini[i] != '0' && mini[i] < mini[minNumbPos] ){
            minNumbPos = i;
        }
    }
    if(minNumbPos != 0){
        swap(mini[0], mini[minNumbPos]);
        return;
    }
    
    for(int i = 1; i < longi; i++){
        minNumbPos = i;
        for(int j = longi - 1; j > i; j--){
            if( mini[j] < mini[minNumbPos] ){
                minNumbPos = j;
            }
        }
        if(minNumbPos != i){
            swap( mini[i], mini[minNumbPos] );
            return;
        }
    }
    
}

void calculateMax(){
    int longi = strlen(norm);
    strcpy(maxi, norm);
    
    bool cambio = false;
    int maxNumbPos = 0;
    
    for(int i = 0; i < longi; i++){
        maxNumbPos = i;
        for(int j = longi - 1; j > i; j--){
            if( maxi[j] > maxi[maxNumbPos] ){
                maxNumbPos = j;
            }
        }
        if(maxNumbPos != i){
            swap(maxi[i], maxi[maxNumbPos]);
            return;
        }
    }
    
}

int main(){
    int T;
    scanf("%d", &T);
    for(int i = 1; i <= T; i++){
        scanf("%s", &norm);
        calculateMin();
        calculateMax();
        printf("Case #%d: %s %s\n", i, mini, maxi);
    }
    
    return 0;
}



/**
 * 
 * @author Duy Huynh
 * 
 * Facebook Hacker Cup 2015 Qualification Round
 * Problem 15
 *
 */

public class CookingTheBooks {
	public static void main(String[] args) {
		
		if (args.length == 0)
		;
		else {
			int numArgs = Integer.parseInt(args[0]);
		
			// iterate over all command line arguments
			for (int i = 0; i < numArgs; i++) {
				String num = args[i+1];
			
				int min = minNum(num);
				int max = maxNum(num);
			
				System.out.println("Case #" + (i + 1) + ": " + min + " " + max);
			}
		}
	}
	
	static int minNum(String num) {
		//create array of digits
		char[] digit = new char[num.length()];
		for (int i = 0; i < num.length(); i++) {
			digit[i] = num.charAt(i);
		}

		int min = Integer.parseInt(num); //initial min value is num
		
		//2d array, upper triangular calculation
		for (int j = 0; j < digit.length; j++) {
			for (int k = j + 1; k < digit.length; k++) {
				char[] copy = digit;
				char temp = digit[j];
				
				//swapping
				copy[j] = digit[k];
				copy[k] = temp;
				
				if (copy[0] == '0')
				;
				else {
					String m = new String(copy);
					if (Integer.parseInt(m) < min) //if swap smaller than min, set min = swap
						min = Integer.parseInt(m);
				}
			}
		}
		
//		System.out.println("minNum: " + min);
		
		return min;
	}

	static int maxNum(String num) {
		//create array of digits
		char[] digit = new char[num.length()];
		for (int i = 0; i < num.length(); i++) {
			digit[i] = num.charAt(i);
		}

		int max = Integer.parseInt(num); //initial max value is num
		
		//2d array, upper triangular calculation
		for (int j = 0; j < digit.length; j++) {
			for (int k = j + 1; k < digit.length; k++) {
				char[] copy = digit;
				char temp = digit[j];
				
				//swapping digits
				copy[j] = digit[k];
				copy[k] = temp;
				
				if (copy[0] == '0')
					;
				else {
					String m = new String(copy);
					if (Integer.parseInt(m) > max) //if the swap is larger than max, set max = swap
						max = Integer.parseInt(m);	
				}
			}
		}
		
//		System.out.println("maxNum: " + max);
		
		return max;
	}
}

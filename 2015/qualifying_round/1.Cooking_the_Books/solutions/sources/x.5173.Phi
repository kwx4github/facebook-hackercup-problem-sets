import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
	static boolean FacebookHackerCup = true;

	public static void main(String[] args) throws FileNotFoundException {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		if (FacebookHackerCup) {
			inputStream = new FileInputStream("cooking_the_books.txt");
			outputStream = new FileOutputStream("out");
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CookingTheBooks solver = new CookingTheBooks();
		solver.solve(1, in, out);
		out.close();
	}
}

class CookingTheBooks {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int numberOfTest = in.nextInt();
		for (int it = 1; it <= numberOfTest; ++it) {
			int n = in.nextInt();
			int len = Integer.toString(n).length();
			int a = Math.abs(n);
			int max = a;
			int min = a;
			for (int i = 0; i + 1 < len; i++) {
				max = Math.max(max, getMax(a, i));
				min = Math.min(min, getMin(a, i));
			}
			if (n > 0) {
				out.printf("Case #%d: %d %d\n", it, min, max);
			} else {
				out.printf("Case #%d: %d %d\n", it, -max, -min);
			}
		}
	}

	private int getMax(int n, int index) {
		char[] digit = Integer.toString(n).toCharArray();
		char max = digit[index];
		int iMax = index;
		for (int i = index + 1; i < digit.length; i++) {
			if (index == 0 && digit[i] == '0')
				continue;
			if (digit[i] > max) {
				max = digit[i];
				iMax = i;
			}
		}
		if (max != digit[index]) {
			digit[iMax] = digit[index];
			digit[index] = max;
		}
		return Integer.parseInt(new String(digit));
	}

	private int getMin(int n, int index) {
		char[] digit = Integer.toString(n).toCharArray();
		char min = digit[index];
		int iMin = index;
		for (int i = index + 1; i < digit.length; i++) {
			if (index == 0 && digit[i] == '0')
				continue;
			if (digit[i] < min) {
				min = digit[i];
				iMin = i;
			}
		}
		if (min != digit[index]) {
			digit[iMin] = digit[index];
			digit[index] = min;
		}
		return Integer.parseInt(new String(digit));
	}
}

class InputReader {
	public BufferedReader reader;
	public StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream), 32768);
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

}
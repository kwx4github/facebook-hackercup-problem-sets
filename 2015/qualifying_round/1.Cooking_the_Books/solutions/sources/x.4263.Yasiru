
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.logging.Level;


class Logger {
    private static boolean enabled;
    public static void print(Object o) {
        if(enabled)
            System.out.print(o);
    }
    public static void println(Object o) {
        if(enabled)
            System.out.println(o);
    }
    public static void log(boolean val) {
        enabled = val;
    }
    
}
abstract class Problem {
    protected InputStream input;
    abstract public void run();
    abstract public void test(String testcases);
    abstract public void algorithm();
    
}

class cookingBooks extends Problem {
    int minMaxArray[];  
    cookingBooks()
    {
        minMaxArray = new int[2];
    }
    @Override
    public void algorithm() {
        Scanner scanner = null;
        try {
            scanner = new Scanner(new File("inputs.txt"));
        } catch (FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(cookingBooks.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        int t = scanner.nextInt();
        long num;
        for (int i = 0; i < t; i++) {
            num = scanner.nextInt();
            
            getMinMax(Long.toString(num).toCharArray());
            System.out.println("Case#" + (i + 1) + ": " + minMaxArray[1] + " " + minMaxArray[0]);
        }

    }
    private void getMinMax(char[] number)
    {
        char lowest = number[0], highest = number[0], temp;
        int pos_lowest, pos_highest;
        
        pos_lowest = pos_highest = 0;
        
        for (int i = 1; i < number.length; i++) {
            temp = number[i];
            if(temp < lowest) {
                lowest = temp;
                pos_lowest = i;
            }
            if(temp > highest) {
                highest = temp;
                pos_highest = i;
            }
                         
        }
        Logger.print(pos_highest + " " + pos_lowest + ": " + number[number.length - 1] + "\n");
        
        number[pos_highest] = number[0];
        number[0] = highest;
                
        minMaxArray[0] = Integer.parseInt(new String(number));
        
        number[0] = number[pos_highest];
        number[pos_highest] = highest;
        

        number[pos_lowest] = number[0];
        number[0] = lowest;
        
        minMaxArray[1] = Integer.parseInt(new String(number));
    }
    @Override
    public void run() {
        algorithm();
    }

    @Override
    public void test(String testcases) {     
        input = new ByteArrayInputStream(testcases.getBytes(StandardCharsets.UTF_8));
        Logger.print("---\nTesting for test case:\n" + testcases + "---\n");
        algorithm();
    }

    
    
}

public class Solution {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Problem p = new cookingBooks();
        Logger.log(false);
        p.run();
    }
    
}

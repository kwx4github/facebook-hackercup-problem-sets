import java.io.{File, FileWriter, BufferedWriter}

import scala.io.Source

/**
 * Created on 11.01.15.
 */
object CookingTheBooks extends App {
  val source = Source.fromFile("cooking_the_books.txt")
  val sink = new BufferedWriter(new FileWriter(new File("cooking_the_books_output.txt")))

  val lines = source.getLines()
  lines.next()

  for ((line, i) <- lines zip Stream.from(1).iterator) {
    val res = getMinMaxNumber(line)

    sink.write(s"Case #$i: ${res._1} ${res._2}\n")
  }

  source.close()
  sink.close()

  def getMinMaxNumber(line: String): (Long, Long) = {
    var min = Int.MaxValue
    var minPos = -1;
    var max = Int.MinValue
    var maxPos = -1;

    for (i <- Range(line.size - 1, 0, -1)) {
      var cur = line.charAt(i).asDigit
      if (cur < min) {
        min = cur
        minPos = i
      }

      if (cur > max) {
        max = cur
        maxPos = i
      }
    }

    val maxNumber: Long = findMax(line, max, maxPos)
    val minNumber: Long = findMin(line, min, minPos)

    (minNumber, maxNumber)
  }

  def findMax(line: String, max: Int, maxPos: Int): Long = {
    if (max != 0) {
      for (i <- (0 to line.size)) {
        if (maxPos > i) {
          val toSwap = line.charAt(i).asDigit
          if (toSwap < max) {
            val builder = new StringBuilder(line)
            builder.setCharAt(i, (max + 48).toChar)
            builder.setCharAt(maxPos, (toSwap + 48).toChar)

            return builder.toString().toLong
          }
        }
      }
    }

    line.toLong
  }

  def findMin(line: String, min: Int, minPos: Int): Long = {
    val start = if (min == 0) 1 else 0
    for (i <- (start to line.size)) {
      if (minPos > i) {
        val toSwap = line.charAt(i).asDigit
        if (toSwap > min) {
          val builder = new StringBuilder(line)
          builder.setCharAt(i, (min + 48).toChar)
          builder.setCharAt(minPos, (toSwap + 48).toChar)

          return builder.toString().toLong
        }
      }
    }

    line.toLong
  }
}

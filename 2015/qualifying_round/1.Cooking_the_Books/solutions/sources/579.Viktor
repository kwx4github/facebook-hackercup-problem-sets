#include <iostream>
#include <vector>
#include <iomanip>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <list>
#include <algorithm>
#include <stdlib.h>
#include <stdio.h>
#include <cstring>
#include <ctime>
#include <string>
#include <sstream>
#include <math.h>

using namespace std;

stringstream ss;
long long from_string(const string& number) {
	ss.clear();
	ss << number;
	long long result;
	ss >> result;
	return result;
}

pair<long long, long long> solve(string number) {
	long long minimal = from_string(number);
	long long maximal = from_string(number);

	for (int from = 0; from < number.size(); ++from) {
		for (int to = from + 1; to < number.size(); ++to) {

			if (from == 0 && number[to] == '0') {
				continue;
			}

			swap(number[from], number[to]);
			long long current = from_string(number);
			swap(number[from], number[to]);

			if (minimal > current) { 
				minimal = current;
			}

			if (maximal < current) {
				maximal = current;
			}
		}
	}

	return make_pair(minimal, maximal);
}

void test(const string& number, long long minimal, long long maximal) {
	pair<long long, long long> answer = solve(number);
	if (answer.first != minimal && answer.second != maximal) {
		cout << "Error: " << number << " " << minimal << " " << maximal << ", got " << answer.first << " " << answer.second << endl;
		exit(0);
	}
}

void run_tests() {
	test("0", 0, 0);
	test("1", 1, 1);
	test("10", 10, 10);
	test("5", 5, 5);
	test("31524", 13524, 51324);
	test("897", 798, 987);
	test("123", 123, 321);
	test("111111111", 111111111, 111111111);
	test("999999999", 999999999, 999999999);
	test("999919999", 199999999, 999999991);
	test("900000000", 900000000, 900000000);
	test("98", 89, 98);
	test("908", 809, 980);
}


int main() {

	//run_tests();

	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int T; cin >> T;
	for (int test = 1; test <= T; ++test) {
		string number;
		cin >> number;
		
		pair<long long, long long> answer = solve(number);
		cout << "Case #" << test << ": " << answer.first << " " << answer.second << "\n";
	}
	
	return 0;
}
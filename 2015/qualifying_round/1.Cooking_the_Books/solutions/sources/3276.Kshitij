
#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cmath>

using namespace std;

//Write a comparator function for comparison of two vectors

int main()
{
	
	//freopen("cooking_the_books.txt","r",stdin);
	//freopen("output_final.out","w",stdout);

	//Testcases
	int t, t_copy;
	cin>>t;
	t_copy = t;

	while(t--)
	{

		int inp;
		vector<int> x;
		int k;

		//Input number
		scanf("%d", &inp);
		
		//Convert the number to a vector
		int d;
		for(d=0; inp>0; d++)
		{
			k = inp%10;
			x.push_back(k);
			inp /= 10;
		}
		// d stores the number of digits in the input number, which is also the size of the vector
		

		//REMEMBER: HERE THE VECTOR N IS CURRENTLY STORING THE NUMBER IN REVERSE FORM, REVERSE THE VECTOR NOW OR MODIFY THE COMPARATOR ACCORDINGLY	

		vector<int> n;
		for(int a=d-1; a>=0; a--)	n.push_back(x[a]);


		//Perform all the swaps and find the smallest and the largest number possible, be careful of the zero
		vector<int> min_ans, max_ans;
		min_ans = max_ans = n;

		//cout<<"min_ans = "<< min_ans <<" max_ans = "<< max_ans <<endl;

		//The following piece of code has been written considering the number is stored in the correct format in the vector
		int i;
		for(i=0; i<d; i++)
		{
			for(int j=i+1; j<d; j++)
			{
				//Do not swap if the digit being swapped into the most significant position is 0
				if(i==0 && n[j]==0)
					continue;
				swap(n[i], n[j]);


				//min_ans = min(min_ans, n);
				if(n < min_ans) min_ans = n;	

				//max_ans = max(max_ans, n);
				if(n > max_ans) max_ans = n;

				//Revert back to the original number, so that the swaps are meaningful
				swap(n[i], n[j]);
			}
		}

		//Convert the vectors back to numbers
		int min_final_ans, max_final_ans;
		min_final_ans = max_final_ans = 0;

		
		
		
		for(i=0; i<d; i++)
		{
			min_final_ans += pow(10,d-i-1) * min_ans[i];
			max_final_ans += pow(10,d-i-1) * max_ans[i]; 	
		}

		//Display the output
		printf("Case #%d: %d %d\n", t_copy-t, min_final_ans, max_final_ans);

		
	}

	return 0;
}



#include <stdio.h>

typedef struct Swap
{
	char *from;
	char *to;
} Swap;

void
DoSwap(char *from, char *to) {
	if (!from || !to) return;

	char t = *from;
	*from = *to;
	*to = t;
}

Swap
FindMaxSwap(char *num) {
	Swap s = {0, 0};
	if (!*num) return s;

	char *highest, *first;
	highest = first = num;

	while (*++num) {
		if (*num >= *highest) highest = num;
	}

	if (*highest == *first) 
		return FindMaxSwap(++first);
	else {
		s.from = first;
		s.to = highest;
	}

	return s;
}

Swap 
FindMinSwap(char *digitPointer) {
	Swap s = {0, 0};
	if (!*digitPointer) return s;

	char *lowest, *secondLowest, *first;
	lowest = secondLowest = first = digitPointer;

	 while (*++digitPointer) {
	 	if (*digitPointer <= *lowest) lowest = digitPointer;
	 	else if (*digitPointer <= *secondLowest) secondLowest = digitPointer;
	 }

	 if (*lowest == *first) {
	 	return FindMinSwap(++first);
	 }
	 else if (*lowest == '0') {
	 	if (*secondLowest == *first) {
	 		s.to = first + 1;
	 		s.from = lowest;
	 	}
	 	else {
	 		s.to = first;
	 		s.from = secondLowest;
	 	}
	 }
	 else { 
	 	s.to = first;
	 	s.from = lowest;
	 }

	 return s;
}

int 
ReadInt(FILE *file) {
	int output = 0;
	char current = fgetc(file);

	while (current >= '0' && current <= '9') {
		output *= 10;
		output += (current - '0');
		current = fgetc(file);
	}

	return output;
}

int
main(int argc, char *argv[]) {

	FILE *serializedProblems = fopen(argv[1], "r");
	int problemCount = ReadInt(serializedProblems);
	
	FILE *output = fopen(argv[2], "w");
	for (int i = 0; i < problemCount; ++i) {
		char string[20];
		char c = fgetc(serializedProblems);
		int ii = 0;
		while(c != '\n') {
			string[ii++] = c;
			c = fgetc(serializedProblems);
		}
		string[ii] = 0;

		fprintf(output, "Case #%d: ", i + 1);
		Swap maxSwap = FindMaxSwap(string);
		Swap minSwap = FindMinSwap(string);


		DoSwap(minSwap.from, minSwap.to);
		fprintf(output, "%s ", string);
		DoSwap(minSwap.to, minSwap.from);

		DoSwap(maxSwap.from, maxSwap.to);
		fprintf(output, "%s\n", string);
	}

	fclose(serializedProblems);

	return 0;
}
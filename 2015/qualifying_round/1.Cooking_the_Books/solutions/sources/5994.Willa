package main

import (
  "bufio"
  "io/ioutil"
  "log"
  "os"
  "sort"
  "strconv"
  "strings"
)

func getAnswer(line string) string {
  digits := readNums(line)
  digitsCopy := make([]int, len(digits))
  digitsSorted := make([]int, len(digits))
  digitsSortedCopy := make([]int, len(digits))
  copy(digitsCopy, digits)
  copy(digitsSorted, digits)
  sort.Ints(digitsSorted)
  copy(digitsSortedCopy, digitsSorted)

  if len(digits) == 1 && digits[0] == 0 {
    return "0 0"
  }
  return getLow(digits, digitsSorted) + " " + getHigh(digitsCopy, digitsSortedCopy)
}

func getLow(digits, digitsSorted []int) string {
  firstNonZero := 0
  for ;digitsSorted[firstNonZero] == 0; {
    firstNonZero++
  }
  swap(digitsSorted, 0, firstNonZero)

  swapIndex := -1
  smallestDigit := -1
  for i := range digits {
    if digits[i] != digitsSorted[i] {
      swapIndex = i
      smallestDigit = digitsSorted[i]
      break
    }
  }

  if (swapIndex > -1) {
    otherSwapIndex := -1
    for i := len(digits) - 1; i >= 0; i-- {
      if digits[i] == smallestDigit {
        otherSwapIndex = i
        break
      }
    }
    swap(digits, swapIndex, otherSwapIndex)
  }

  return toString(digits)
}

func getHigh(digits, digitsSorted []int) string {
  swapIndex := -1
  largestDigit := -1
  for i := range digits {
    if digits[i] != digitsSorted[len(digits) - 1 - i] {
      swapIndex = i
      largestDigit = digitsSorted[len(digits) - 1 - i]
      break
    }
  }

  if (swapIndex > -1) {
    otherSwapIndex := -1
    for i := len(digits) - 1; i >= 0; i-- {
      if digits[i] == largestDigit {
        otherSwapIndex = i
        break
      }
    }
    swap(digits, swapIndex, otherSwapIndex)
  }

  return toString(digits)
}

func swap(digits []int, i, j int) {
  tmp := digits[i]
  digits[i] = digits[j]
  digits[j] = tmp
}

func toString(digits []int) string {
  str := ""
  for _, digit := range digits {
    str += strconv.Itoa(digit)
  }
  return str
}

func readNums(line string) []int {
  splitLine := strings.Split(line, "")
  var nums []int
  for _, str := range splitLine {
    num, _ := strconv.Atoi(str)
    nums = append(nums, num)
  }
  return nums
}


func main() {
    file, _ := os.Open("input.txt")
    scanner := bufio.NewScanner(file)
    scanner.Scan()
    T, _ := strconv.Atoi(scanner.Text())
    answer := ""
    for i := 1; i <= T; i++ {
      scanner.Scan()
      line := scanner.Text()
      header := "Case #" + strconv.Itoa(i) + ": "
      answer += header + getAnswer(line) + "\n"
    }
    if err := scanner.Err(); err != nil {
      log.Fatal(err)
    }
    _ = ioutil.WriteFile("output.txt", []byte(answer), 0755)
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FaceBook_QualRound_1
{
    class Program
    {
        static void Main(string[] args)
        {
            Int32 count;                                    //count of digits to modify
            List<String> finArr = new List<string>();       //list of strings without different trash
            List<String> output = new List<string>();       //list of strings for output

            String path = Console.ReadLine();               //path to input file     
            String[] strArr;
            if (ReadFile(path, out strArr) == true)                //read file
            {



                for (int i = 0; i < strArr.Length; i++)
                {
                    if (strArr[i] != "")
                    {
                        finArr.Add(strArr[i]);
                    }
                }

                /*foreach (var item in finArr)
                {
                    Console.WriteLine(item);
                }*/
                if (Int32.TryParse(finArr[0], out count) == true)
                {
                    if (count < 1 || count > 100)
                    {
                        output.Add("Too much digits to operate with.");
                    }
                    else
                    {
                        for (int i = 1; i < count + 1; i++)
                        {
                            int tmp = 0;
                            if (Int32.TryParse(finArr[i], out tmp) == true)
                            {
                                if (tmp >= 0 || tmp <= 999999999)
                                {
                                    string min, max;
                                    SwapDigits(out min, out max, finArr[i]);

                                    output.Add("Case #" + i + ": " + min + " " + max);
                                }
                                else
                                {
                                    output.Add("Case #" + i + ": digit is not match to the constraint");
                                }
                            }
                            else
                            {
                                output.Add("Case #" + i + ": not a digit");
                            }
                        }
                    }
                }


                foreach (var item in output)
                {
                    Console.WriteLine(item);
                }

                WriteFile(path, output);
            }

        }

        //Method  for swaping digits
        private static void SwapDigits(out string min, out string max, string str)
        {
            bool firstMin = true;
            int minIndexA = 0, maxIndexA = 0;
            int minIndexB = 0, maxIndexB = 0;
            char tmp1, tmp2;
            int minInt = 9;
            int maxInt = 0;
            min = "";
            max = "";

            #region find min digit and index
            int cntMin = 0;
            while (true)
            {
                for (int i = cntMin; i < str.Length; i++)
                {
                    if (firstMin == true)
                    {
                        if (str[i] != '0')
                        {
                            if (minInt > Int32.Parse(str[i].ToString()))
                            {
                                minInt = Int32.Parse(str[i].ToString());
                                minIndexB = i;
                            }
                        }
                    }
                    else
                    {
                        if (minInt >= Int32.Parse(str[i].ToString()))
                        {
                            minInt = Int32.Parse(str[i].ToString());
                            minIndexB = i;
                        }
                    }
                }

                if (minIndexB != cntMin)
                {
                    break;
                }
                else
                {
                    minInt = 9;
                    cntMin++;
                    minIndexA++;
                    firstMin = false;
                }
            }

            while (true)
            {
                if (minIndexA < str.Length)
                {
                    if (str[minIndexB] != str[minIndexA])
                    {
                        break;
                    }
                    else
                    {
                        minIndexA++;
                    }
                }
                else
                {
                    break;
                }
            }
            #endregion

            #region find max digit and index
            int cntMax = 0;
            while (true)
            {
                for (int i = cntMax; i < str.Length; i++)
                {
                    if (maxInt <= Int32.Parse(str[i].ToString()))
                    {
                        maxInt = Int32.Parse(str[i].ToString());
                        maxIndexB = i;
                    }
                }
                if (maxIndexB != cntMax)
                {
                    break;
                }
                else
                {
                    maxInt = 0;
                    cntMax++;
                    maxIndexA++;
                }
                if (cntMax == str.Length - 1) maxIndexA++;
            }
            #endregion

            #region output minimum
            if (minIndexA >= str.Length)
            {
                min = str;
            }
            else
            {
                tmp1 = str[minIndexA];
                tmp2 = str[minIndexB];
                //min += tmp2;
                for (int i = 0; i < str.Length; i++)
                {
                    if (i == minIndexA)
                        min += tmp2;
                    else if (i == minIndexB)
                        min += tmp1;
                    else
                        min += str[i];
                }
            }
            #endregion

            #region output maximum
            if (maxIndexA >= str.Length)
            {
                max = str;
            }
            else
            {
                tmp1 = str[maxIndexA];
                tmp2 = str[maxIndexB];

                for (int i = 0; i < str.Length; i++)
                {
                    if (i == maxIndexA)
                        max += tmp2;
                    else if (i == maxIndexB)
                        max += tmp1;
                    else
                        max += str[i];
                }
            }
            #endregion
        }

        //Method to open and read file
        private static bool ReadFile(String path, out string[] strArr)
        {
            if (File.Exists(path) == false)
            {
                strArr = new string[0];
                return false;
            }

            FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read);
            String input = "";
            try
            {
                //fs = new FileStream(path, FileMode.Open, FileAccess.Read);
                long count = fs.Length;
                byte[] buffer = new byte[count];
                fs.Read(buffer, 0, (int)count);

                input = Encoding.UTF8.GetString(buffer);
            }
            catch (Exception ex) { }
            finally { fs.Close(); }

            strArr = input.Split(' ', '\n', '\r');
            return true;
        }

        private static void WriteFile(string path, List<string> output)
        {
            String savePath = path.Substring(0, path.LastIndexOf('\\') + 1);
            String file = Path.GetFileName(path);
            file = file.Substring(0, file.LastIndexOf('.'));
            String exten = Path.GetExtension(path);
            file += "_output";
            Console.WriteLine(savePath+file+exten);

            FileStream fs= new FileStream(savePath + file + exten, FileMode.Create, FileAccess.Write);
            foreach (var item in output)
            {
                string s = item + Environment.NewLine;
                byte[]bt=Encoding.UTF8.GetBytes(s);
                fs.Write(bt, 0, bt.Length);
            }
            fs.Close();
        }
        

    }
}
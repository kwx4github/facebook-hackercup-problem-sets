#include <fstream>
#include <iostream>
#include <string.h>

using namespace std;

char num[10],small[10],largest[10];

int si,li;
ifstream fin;
ofstream fout;

int find_smallest_digit(int start,int len)
{
    int small=(int)(num[start])-(int)('0');

    for(int i=start+1;i<=len;i++)
    {
        int n=(int)(num[i])-(int)('0');

        if(start==0)
        {
            if(n!=0 && n<small)
            {
                small=n;
                si=i;
            }
            else if(n!=0 && n==small)
            {
                if(i>si)
                    si=i;
            }
        }
        else if(n<small)
        {
            small=n;
            si=i;
        }
        else if(n==small)
        {
            if(i>si)
                si=i;
        }

    }

    return small;

}

void find_smallest()
{
    int i=0;

    int len=strlen(num)-1;

    for(int j=0;j<len;j++)
    {
        int digit=find_smallest_digit(j,len);

        int n=(int)(num[j])-(int)('0');

        if(digit!=n)
        {
            char temp=small[si];
            small[si]=small[j];
            small[j]=temp;
            break;
        }
    }
}

int find_largest_digit(int start,int len)
{
    int large=(int)(num[start])-(int)('0');

    for(int i=start+1;i<=len;i++)
    {
        int n=(int)(num[i])-(int)('0');

        if(n>large)
        {
            large=n;
            li=i;
        }
        else if(n==large)
        {
            if(i>li)
                li=i;
        }

    }

    return large;

}

void find_largest()
{
    int i=0;

    int len=strlen(num)-1;

    for(int j=0;j<len;j++)
    {
        int digit=find_largest_digit(j,len);

        int n=(int)(num[j])-(int)('0');

        if(digit!=n)
        {
            char temp=largest[li];
            largest[li]=largest[j];
            largest[j]=temp;
            break;
        }
    }
}

int main()
{
    int test;
    char temp;

    fin.open("input.txt");
    fout.open("output.txt");

    fin>>test;

    int count=1;

    while(count<=test)
    {
        fin>>num;

        strcpy(small,num);
        strcpy(largest,num);

        find_smallest();
        find_largest();


        fout<<"Case #"<<count<<": "<<small<<" "<<largest<<endl;

        count++;
    }


    return 0;
}

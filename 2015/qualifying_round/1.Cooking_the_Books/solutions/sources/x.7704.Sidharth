//
//  P1.cpp
//  HackerCup
//
//  Created by Sid on 09/01/15.
//  Copyright (c) 2015 whackylabs. All rights reserved.
//

#include <cassert>
#include <iostream>
#include <fstream>
#include <string>

const char *kFileIn = "/Volumes/DrivePlusPlus/Languages/c-cpp/Projects/fb_hack_cup/2015/HackerCup/HackerCup/2015/P1/cooking_the_books.txt";
const char *kFileOut = "/Volumes/DrivePlusPlus/Languages/c-cpp/Projects/fb_hack_cup/2015/HackerCup/HackerCup/2015/P1/out.txt";


namespace fb2015 {

    int SearchLastMinimumIndex(std::string num, const char lowerBound)
    {
        int minIndex = -1;
        for (int i = 0; i < num.size(); ++i) {
            if (num[i] > lowerBound) {
                if (minIndex < 0) {
                    minIndex = i;
                } else if (num[i] < num[minIndex]) {
                    minIndex = i;
                }
            }
        }
        return minIndex;
    }
    
    int SearchFirstMaximumIndex(std::string num, const char value)
    {
        int i = 0;
        while (i < num.size()) {
            if (num[i] > value) {
                break;
            }
            ++i;
        }
        return i;
    }

    
//    std::string Minimum(std::string num)
//    {
//        char minValue = 0;
//        int minIndex = 0;
//        int maxIndex = 0;
//
//        while(minValue <= '0') {
//            minIndex = SearchLastMinimumIndex(num, minValue);
//            maxIndex = SearchFirstMaximumIndex(num, num[minIndex]);
//            if (minIndex > maxIndex) {
//                std::swap(num[minIndex], num[maxIndex]);
//                break;
//            }
//            minValue = num[minIndex];
//        }
//        
//        return num;
//    }

    std::string Maximum(std::string num)
    {
        int maxIndex = 0;
        for (int i = 0; i < num.size(); ++i) {
            if (num[i] >= num[maxIndex]) {
                maxIndex = i;
            }
        }
        
        std::swap(num[maxIndex], num[0]);
        
        return num;
    }
    
    std::string Minimum(std::string num)
    {
        // find min index
        int minIndex = 0;
        for (int i = 0; i < num.size(); ++i) {
            if (num[i] != '0' && num[i] <= num[minIndex]) {
                minIndex = i;
            }
        }
        
        // find max index
        int maxIndex = 0;
        for (int i = 0; num[maxIndex] <= num[minIndex] && i < num.size(); ++i) {
        }
        
        if (minIndex > maxIndex) {
            std::swap(num[minIndex], num[maxIndex]);
        }
        
        return num;
    }

    std::pair<std::string, std::string> ProcessCase(const int caseNum, const std::string &line)
    {
        
        return std::make_pair(Minimum(line), Maximum(line));
    }
    
    int P1_main(int argc, const char * argv[])
    {
//        assert(Minimum("31524") == "13524");
//        assert(Minimum("897") == "798");
//        assert(Minimum("123") == "123");
//        assert(Minimum("10") == "10");
//        assert(Minimum("5") == "5");
//        assert(Minimum("01") == "01");
//
//        assert(Maximum("31524") == "51324");
//        assert(Maximum("897") == "987");
//        assert(Maximum("123") == "321");
//        assert(Maximum("10") == "10");
//        assert(Maximum("5") == "5");

        
        std::ifstream fin(kFileIn);
        assert(fin.is_open());

        std::ofstream fout(kFileOut);
        assert(fout.is_open());

        std::string line;
        int lineNum = 0;
        while (std::getline(fin, line)) {
            if (lineNum) {
                std::pair<std::string, std::string> out = ProcessCase(lineNum-1, line);
                fout << "Case #" << lineNum << ": " << out.first << " " << out.second << std::endl;
                //                std::cout << "Case #" << lineNum << ": " << out.first << " " << out.second << std::endl;
            }
            lineNum++;
        }
        
        return 0;
    }
}

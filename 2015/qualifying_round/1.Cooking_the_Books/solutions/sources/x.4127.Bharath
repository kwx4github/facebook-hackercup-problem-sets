package hackercup;

import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.InputMismatchException;


public class CookingTheBooks {
  private static class InputReader {
    BufferedInputStream bin;
    int numChars, curChar;
    byte[] buffer;
    static final int MAXBUF = 100000;

    public InputReader(InputStream in) {
      bin = new BufferedInputStream(in);
      buffer = new byte[MAXBUF];
    }

    public InputReader(String fileName) throws FileNotFoundException{
      bin = new BufferedInputStream(new FileInputStream(fileName));
      buffer = new byte[MAXBUF];
    }

    private int read() {
      if (numChars == -1) {
        throw new InputMismatchException();
      }

      if (curChar >= numChars) {
        curChar = 0;
        try {
          numChars = bin.read(buffer);
        } catch (IOException e) {
          throw new InputMismatchException();
        }
        if (numChars <= 0) {
          return -1;
        }
      }
      return buffer[curChar++];
    }

    public int nextInt() {
      int ch = read();
      while (isSpaceChar(ch)) {
        ch = read();
      }

      int sgn = 1, res = 0;
      if (ch == '-') {
        sgn = -1;
        ch = read();
      }

      do {
        if (ch < '0' || ch > '9') {
          throw new InputMismatchException();
        }
        res *= 10;
        res += ch - '0';
        ch = read();
      } while (!isSpaceChar(ch));

      return res * sgn;
    }

    public long nextLong() {
      int ch = read();
      while (isSpaceChar(ch)) {
        ch = read();
      }

      int sgn = 1;
      long res = 0;
      if (ch == '-') {
        sgn = -1;
        ch = read();
      }

      do {
        if (ch < '0' || ch > '9') {
          throw new InputMismatchException();
        }
        res *= 10;
        res += ch - '0';
        ch = read();
      } while (!isSpaceChar(ch));

      return res * sgn;
    }

    public boolean isSpaceChar(int ch) {
      return ch == ' ' || ch == '\n' || ch == '\r' || ch == -1 || ch == '\t';
    }
  }

  public static boolean DEBUG = false;

  public static void main(String[] args)
      throws IOException {
    InputReader in;
    PrintWriter out;

    if (DEBUG) {
      in = new InputReader(System.in);
      out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    } else {
      in = new InputReader("cooking_the_books.txt");
      out = new PrintWriter(new BufferedWriter(new FileWriter("cooking_the_books.out")));
    }

    int numTc;
    long num;
    StringBuilder soln = new StringBuilder();

    numTc = in.nextInt();

    for (int i = 0; i < numTc; i++) {
      num = in.nextLong();
      soln.append("Case #" + (i + 1) + ": " + solve(num) + "\n");
    }

    out.print(soln.toString());
    out.close();
  }

  public static String solve(long num) {
    long min = num, max = num;

    String number = num + "";
    int digit;
    long result;

    for (int i = 1; i < number.length(); i++) {
      digit = number.charAt(i) - '0';
      if (digit == 0)
        continue;

      result = swap(number, 0, i);

      if (min > result)
        min = result;

      if (max < result)
        max = result;
    }

    return min + " " + max;
  }

  public static long swap(String number, int src, int dest) {

    long res = 0;
    for (int i = 0; i < number.length(); i++) {
      res *= 10;
      if (i == src) {
        res += number.charAt(dest) - '0';
        continue;
      }

      if (i == dest) {
        res += number.charAt(src) - '0';
        continue;
      }
      res += number.charAt(i) - '0';
    }

    return res;
  }
}

import java.io.*;
import java.util.Scanner;

public class CookingNumbers {
	
	public static void main(String[] args) throws NumberFormatException, IOException
	{
		Scanner scan = new Scanner(System.in);
		int T = Integer.parseInt(scan.nextLine()); 
		long input[] = new long[T];
		long cookMax[] = new long[T];
		long cookMin[] = new long[T];
//		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		for(int i = 0; i < T ; i++ )
		{
			input[i] = scan.nextInt();
		}
		
		for(int i = 0; i < T; i++)
		{
			cookMin[i] = swap(input[i], 0, findMinDigit(input[i]));
			cookMax[i] = swap(input[i], 0, findMaxDigit(input[i]));
			System.out.println("Case #" + (i+1) + " "  + cookMin[i] + " " + cookMax[i]);
		}
	}	
	static int findMinDigit(long num)
	{
		if(num == 0)
		{
			return 0;
		}
		
		int min = 0, minIndex = 0;
		int length = (int) Math.log10(num)+1;
		int i = length-1;
		int minimum[] = new int[length];
		
		while(num > 0)
		{
			minimum[i] = (int) (num % 10);  
			i--;
			num /= 10;		 
		}
		min = minimum[0];
		for( int j = length-1; j >= 0; j--)
		{
			if( minimum[j] == 0)
			 {
				 //do nothing
			 }
			else if( min > minimum[j])
			{
				minIndex = j;
				min = minimum[j];
			}
		}
		return minIndex;
	}
	
	static int findMaxDigit(long num)
	{
		if(num == 0)
		{
			return 0;
		}
		int max = 0, maxIndex = 0  ;
		int length = (int) Math.log10(num)+1;
		int maximum[] = new int[length];
		int i = length - 1;
		while(num > 0)
		{
		 maximum[i] = (int) (num % 10);  
		 i--;
		 num /= 10;
		}
		max = maximum[0];
		for( i = length-1 ; i >= 0; i--)
		{
			if( maximum[i] == 0)
			 {
				 
			 }
			else if( max < maximum[i])
			{
				maxIndex = i;
				max = maximum[i];
			}
				
		}
		return maxIndex;
	}
	static long swap(long num, int a, int b)
	{
		if( num == 0)
		{
			return 0;
		}
		int temp = 0; long result = 0;
		int length = (int) Math.log10(num)+1;
		int i = length - 1;
		int buffer[] = new int[length];
		while(num > 0)
		{
		 buffer[i] = (int) (num % 10); 
		 i--;
		 num = (num/10);
		}
		temp = buffer[a];
		buffer[a] = buffer[b];
		buffer[b] = temp;
		for(i = 0; i < buffer.length; i++) 			
		{
			result += Math.pow(10,i) * buffer[buffer.length - i - 1];			
		}
		return result;
	}
}
 
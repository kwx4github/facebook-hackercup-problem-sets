package ee.hannu.cookies;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Cookies {

	private NumberModel[] numModel;	
	
	private void readInput() throws Exception {
		
		try {

			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

			try {
				int numberOfLines = Integer.parseInt(br.readLine());
				
				if(numberOfLines < 1 || numberOfLines > 100)
					throw new RuntimeException("1 <= T <= 100");
				
				// initialize the model
				numModel = new NumberModel[numberOfLines];
				
				int numberOfReadLines = 0;
				while(numberOfReadLines < numberOfLines) {
					
					String line = br.readLine();
					if(line == null || line.length() < 1)
						throw new RuntimeException("Line has invalid value!");
					
					int numberCandidate = Integer.parseInt(line.trim());
					
					if(numberCandidate < 0)
						throw new RuntimeException("Number has to be positive: " + numberCandidate + "!");
					
					NumberModel nModel = new NumberModel();
					nModel.numberValue = numberCandidate;
					nModel.number = line.trim();
					this.numModel[numberOfReadLines] = nModel;
					
				numberOfReadLines++;
				} // while numbers to read
				
			} // try
			catch (NumberFormatException nfe) {
				throw nfe;
			} // catch

		} // try
		catch (Exception ex) {

			throw ex;
		} // catch
	} // readInput
	
	
	public void woo() {
		
		// do the accounting magic
		
		for(int i = 0; i < this.numModel.length; i++) {
			
			this.numModel[i].switchaRoo();
			System.out.println("Case #" + (i + 1) + ": " + this.numModel[i].minValue + " " + this.numModel[i].maxValue);
			
		} // for i
		
		
	} // woo
	
	
	public static void main(String[] args) {

		try {
			Cookies c = new Cookies();
			c.readInput();
			c.woo();
		} // try
		catch (Exception ex) {
			ex.printStackTrace();

		} // catch
		
	} // main
	
	
	
	public class NumberModel {
		
		public String number;
		
		public int numberValue;
		public int minValue;
		public int maxValue;
		public char[] digits;

		
		public void switchaRoo() {
			
			// check for single digits
			if(this.numberValue < 10) {
				
				this.maxValue = this.numberValue;
				this.minValue = this.numberValue;
				
			return;
			} // if
			
			// split number into digits
			this.digits = this.number.toCharArray();
			
			int tempMaxValue = this.numberValue;
			int tempMinValue = this.numberValue;
			for (int f = 0; f < this.digits.length; f++) {
				for (int s = 0; s < this.digits.length; s++) {

					if (s == f) // same position
						continue;

					// switch "s" & "f", convert to int, compare the values
					char[] tempDigits = new char[this.digits.length];
					System.arraycopy(this.digits, 0, tempDigits, 0, tempDigits.length);

					char f_1 = tempDigits[f];
					char s_1 = tempDigits[s];

					tempDigits[s] = f_1;
					tempDigits[f] = s_1;

					// if the number starts with 0 -> illegal value, skip!
					if (tempDigits[0] == '0')
						continue;

					String newNumber = new String(tempDigits);

					try {

						int newNumberValue = Integer.parseInt(newNumber);

						if (newNumberValue < tempMinValue)
							tempMinValue = newNumberValue;

						if (newNumberValue > tempMaxValue)
							tempMaxValue = newNumberValue;

					} // try
					catch (Exception ex) {

						ex.printStackTrace();
					} // catch

				} // for s

			} // for f

			// set global variables
			this.maxValue = tempMaxValue;
			this.minValue = tempMinValue;

		} // switchaRoo
		

	} // NumberModel

} // Cookies

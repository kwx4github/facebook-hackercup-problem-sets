import argparse

def switchPositions(string, posA, posB):
    if posA == posB:
        return string

    minIndex, maxIndex = min(posA, posB), max(posA, posB)
    minChar = string[minIndex]
    maxChar = string[maxIndex]

    return string[:minIndex] + maxChar + string[minIndex + 1:maxIndex] + minChar + string[maxIndex + 1:]


def findMin(number, firstrun=False):
    if len(number) == 1:
        return number

    firstnum = number[0]
    min = firstnum
    minindex = 0

    if firstrun:
        for index, num in enumerate(number):
            if num <= min and num > '0':
                min = num
                minindex = index

    else:
        for index, num in enumerate(number):
            if num <= min:
                min = num
                minindex = index

    if min == firstnum:
        return firstnum + findMin(number[1:])
    else:
        return switchPositions(number, 0, minindex)




def findMax(number):
    if len(number) == 1:
        return number

    firstnum = number[0]
    max = firstnum
    maxindex = 0

    for index, num in enumerate(number):
        if num >= max:
            max = num
            maxindex = index

    if max == firstnum:
        return firstnum + findMax(number[1:])
    else:
        return switchPositions(number, 0, maxindex)

if __name__ == "__main__":
    argparser = argparse.ArgumentParser(description='Facebook Hacker Cup 2014 - Cooking the Books')
    argparser.add_argument("-i", type=str, help="input file name", default='example_input.txt')
    argparser.add_argument("-o", type=str, help="output file name", default='output.txt')
    args = argparser.parse_args()

    with open(args.i, 'r') as input, open(args.o, 'w') as output:
        t = int(input.readline())
        for case in range(1, t + 1):
            number = input.readline().strip()
            output.write('Case #%d: %s %s\n' % (case, findMin(number, True), findMax(number)))


package com.facebook.hackercup.badaccountant;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Mina
 */
public class Main {

	public static void main(String[] args) throws IOException {
		String inputFile = args[0];
		BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile)));
		PrintStream output = new PrintStream(new FileOutputStream("output.txt"));
		
		int count = Integer.parseInt(reader.readLine());
		
		for (int i = 0; i < count; i++) {
			int number = Integer.parseInt(reader.readLine());
			int smallest = findSmallest(number);
			int biggest = findBiggest(number);
			
			output.println(String.format("Case #%d: %d %d", (i + 1), smallest, biggest));
		}
		
		output.close();
		reader.close();
	}

	private static int findSmallest(int number) {
		if (number == 0) {
			return 0;
		}
		int[] digits = toArray(number);
		
		int digit = digits[digits.length - 1], index = digits.length - 1;
		for (int i = digits.length - 2; i >= 0; i--) {
			if (digits[i] != 0 && digits[i] < digit) {
				digit = digits[i];
				index = i;
			}
		}
		
		if (index != digits.length - 1) {
			int tmp = digits[digits.length - 1];
			digits[digits.length - 1] = digit;
			digits[index] = tmp;
		}
		
		return toNumber(digits);
	}

	private static int findBiggest(int number) {
		if (number == 0) {
			return 0;
		}
		int[] digits = toArray(number);
		
		int digit = digits[digits.length - 1], index = digits.length - 1;
		for (int i = digits.length - 2; i >= 0; i--) {
			if (digits[i] > digit) {
				digit = digits[i];
				index = i;
			}
		}
		
		if (index != digits.length - 1) {
			int tmp = digits[digits.length - 1];
			digits[digits.length - 1] = digit;
			digits[index] = tmp;
		}
		
		return toNumber(digits);
	}

	private static int[] toArray(int number) {
		List<Integer> digits = new ArrayList<Integer>();
		while (number > 0) {
			digits.add(number % 10);
			number /= 10;
		}
		int[] result = new int[digits.size()];
		for (int i = 0; i < digits.size(); i++) {
			result[i] = digits.get(i);
		}
		return result;
	}
	
	private static int toNumber(int[] digits) {
		long result = 0;
		
		for (int i = digits.length - 1; i >= 0; i--) {
			result += digits[i];
			result *= 10;
		}
		
		return (int) (result / 10);
	}
}

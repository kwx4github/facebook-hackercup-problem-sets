def main():
	results = list()
	with open('cooking_the_books.txt') as f:
		number_of_numbers = int(f.readline())
		for i in range(0, number_of_numbers):
			number = int(f.readline())
			results.append((swap_min_number(number), swap_max_number(number)))
	with open('cooking_the_books_output.txt', 'w+') as f:
		for i in range(0, len(results)):
			line = 'Case #' + str(i + 1) + ': ' + str(results[i][0]) + ' ' + str(results[i][1]) + '\n'
			f.write(line)


def swap_min_number(number):
	return swap_min_max_number_implementation(number, 'min')

def swap_max_number(number):
	return swap_min_max_number_implementation(number, 'max')

def swap_min_max_number_implementation(number, min_or_max):
	if min_or_max == 'min':
		compare = lambda x, y : x <= y
		get_extremum = min
	elif min_or_max == 'max':
		compare = lambda x, y : x >= y
		get_extremum = max
		

	number_list = map(lambda x : int(x), list(str(number)))


	# can't swap
	if len(number_list) <= 1:
		return number

	# try swap with the first element
	# find the extremum value
	extremum = reduce(lambda x, y : x if compare(x, y) or y == 0 else y, number_list)
	if extremum != number_list[0]:
		index = [i for i, x in enumerate(number_list) if x == extremum][-1]
		number_list[0], number_list[index] = number_list[index], number_list[0]
		return int(''.join(map(lambda x : str(x), number_list)))

	# try swap within the remaining(i.e. a[1:]) elements
	for left_swap_number_location in range(1, len(number_list)):
		extremum = get_extremum(number_list[left_swap_number_location:])
		if extremum != number_list[left_swap_number_location]:
			index = [i for i, x in enumerate(number_list) if x == extremum][-1]
			number_list[left_swap_number_location], number_list[index] = number_list[index], number_list[left_swap_number_location]
			return int(''.join(map(lambda x : str(x), number_list)))

	# can't swap
	return number

if __name__ == '__main__':
    main()

#include <cassert>
#include <cstdio>

#include <algorithm>
#include <utility>
#include <vector>

int main () {
  using namespace std;
  int tn;
  assert (scanf ("%d", &tn) == 1);
  for (int tt = 1; tt <= tn; tt++) {
    int n, m, t;
    assert (scanf ("%d%d%d", &n, &m, &t) == 3);
    int as[n], af[n], bs[m], bf[m];
    for (int i = 0; i < n; i++)
      assert (scanf ("%d%d", &as[i], &af[i]) == 2);
    for (int i = 0; i < m; i++)
      assert (scanf ("%d%d", &bs[i], &bf[i]) == 2);

    vector < pair <int, int> > a, b;
    for (int i = 0; i < n; i++)
      a.push_back (make_pair (as[i], af[i]));
    for (int i = 0; i < m; i++)
      b.push_back (make_pair (bs[i], bf[i]));
    sort (a.begin(), a.end());
    sort (b.begin(), b.end());

    int max_a[n], max_b[n];
    if (n)
      max_a[0] = a[0].second;
    for (int i = 1; i < n; i++)
      max_a[i] = max(max_a[i - 1], a[i].second);
    if (m)
      max_b[0] = b[0].second;
    for (int i = 1; i < m; i++)
      max_b[i] = max(max_b[i - 1], b[i].second);

    int d[n + 1][m + 1];
    for (int i = 0; i <= n; i++)
      for (int j = 0; j <= m; j++)
        d[i][j] = 0;
    for (int i = 0; i <= n; i++)
      for (int j = 0; j <= m; j++) {
        int mna = 0, mxa = n - 1;
        while (mna < mxa) {
          int ave = (mna + mxa + 1) / 2;
          if (a[ave].first < d[i][j] + t)
            mna = ave;
          else
            mxa = ave - 1;
        }
        int mnb = 0, mxb = m - 1;
        while (mnb < mxb) {
          int ave = (mnb + mxb + 1) / 2;
          if (b[ave].first < d[i][j] + t)
            mnb = ave;
          else
            mxb = ave - 1;
        }
        if (i < n && a[mna].first < d[i][j] + t)
          d[i + 1][j] = max (d[i + 1][j], max_a[mna]);
        if (j < m && b[mnb].first < d[i][j] + t)
          d[i][j + 1] = max (d[i][j + 1], max_b[mnb]);
      }

    bool lunch = true;
    int ans = n + m + 1;
    for (int i = 0; i <= n; i++)
      for (int j = 0; j <= m; j++) {
        if (d[i][j] + t <= 80000000)
          continue;
        ans = min (ans, max (i, j));
        lunch = false;
      }
    if (lunch)
      printf ("Case #%d: Lunchtime\n", tt);
    else
      printf ("Case #%d: %d\n", tt, ans);
  }
  return 0;
}


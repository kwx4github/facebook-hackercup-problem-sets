program lunchScheduling;
uses math;

var	_t, _tt, n, m, i, ii, j, jj, k1, k2, l, ans: longInt;
	a, b, c, d: array[ 1..3001 ] of longInt;
	dp: array[ 0..3001, 0..3001 ] of longInt;

begin
	readln( _tt );
	for _t := 1 to  _tt do
	begin
		fillchar( dp, sizeOf(dp), 0 );
	
		readln( n, m, l );
		for i := 1 to n do
			readln( a[i], b[i] );
		
		for i := 1 to m do
			readln( c[i], d[i] );
		
		for i := 1 to n do
			for j := i + 1 to n do
				if ( a[j] < a[i] ) then
				begin
					a[i] := a[i] xor a[j];
					a[j] := a[i] xor a[j];
					a[i] := a[i] xor a[j];
					
					b[i] := b[i] xor b[j];
					b[j] := b[i] xor b[j];
					b[i] := b[i] xor b[j];
				end;
				
		for i := 1 to m do
			for j := i + 1 to m do
				if ( c[j] < c[i] ) then
				begin
					c[i] := c[i] xor c[j];
					c[j] := c[i] xor c[j];
					c[i] := c[i] xor c[j];
					
					d[i] := d[i] xor d[j];
					d[j] := d[i] xor d[j];
					d[i] := d[i] xor d[j];
				end;
		
		a[n + 1] := 1000000000;
		c[m + 1] := 1000000000;
		
		for i := 0 to n do
		begin
			ii := 1;
			jj := 1;
			k1 := 0;
			k2 := 0;
			for j := 0 to m do
			begin
				while ( a[ii] < dp[i][j] + l ) do
				begin
					k1 := max( k1, b[ii] );
				
					inc( ii );
				end;
				
				while ( c[jj] < dp[i][j] + l ) do
				begin
					k2 := max( k2, d[jj] );
				
					inc( jj );
				end;
				
				dp[i + 1][j] := max( dp[i + 1][j], max( k1, dp[i][j] ) );
				dp[i][j + 1] := max( dp[i][j + 1], max( k2, dp[i][j] ) );
			end;
		end;
		
		ans := 1000000000;
		for i := 0 to n do
			for j := 0 to m do
				if ( dp[i][j] + l > 80000000 ) then
					ans := min( ans, max( i, j ) );
		
		write( 'Case #', _t, ': ' );
		if ( ans = 1000000000 ) then
			writeln( 'Lunchtime' )
		else
			writeln( ans );
	end;
end.

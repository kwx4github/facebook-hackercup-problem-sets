#include <bits/stdc++.h>
using namespace std;
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define all(a) (a).begin(), (a).end()

#define REP(i,n) for(int i = 0; i < (n); ++i)
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)

int n, m, N, a[3011], b[3011], c[3011], d[3011], f[3011][3011], l;
int nex[3011 * 4][2];
int oo = 80000000;

void solve() {
    cin >> n >> m >> l;
    vector<int> V;
    V.push_back(-1);
    FOR(i, 1, n) {
        cin >> a[i] >> b[i];
        V.push_back(a[i]); V.push_back(b[i]);
    }
    FOR(i, 1, m) {
        cin >> c[i] >> d[i];
        V.push_back(c[i]); V.push_back(d[i]);
    }

    sort(all(V));
    FOR(i, 1, n) {
        a[i] = lower_bound(all(V), a[i]) - V.begin();
        b[i] = lower_bound(all(V), b[i]) - V.begin();
    }
    FOR(i, 1, m) {
        c[i] = lower_bound(all(V), c[i]) - V.begin();
        d[i] = lower_bound(all(V), d[i]) - V.begin();
    }

    N = V.size();
    REP(i, N) {
        int D = V[i] + l;
        nex[i][0] = 0; nex[i][1] = 0;
        FOR(j, 1, n) if(V[a[j]] <= D) nex[i][0] = max(nex[i][0], b[j]);
        FOR(j, 1, m) if(V[c[j]] <= D) nex[i][1] = max(nex[i][1], d[j]);
    }

    memset(f, 0, sizeof f);
    FOR(i, 0, max(n, m)) FOR(j, 0, max(n, m)) {
        if (i) {
            f[i][j] = max(f[i][j], f[i - 1][j]);
            f[i][j] = max(f[i][j], nex[f[i - 1][j]][0]);
        }
        if (j) {
            f[i][j] = max(f[i][j], f[i][j - 1]);
            f[i][j] = max(f[i][j], nex[f[i][j - 1]][1]);
        }
//        cout << i << " " << j << " " << f[i][j] << endl;
    }

    for(int i = 0; i <= max(n, m); i++) {
        if(oo - V[f[i][i]] < l) {
            cout << i << endl;
            return;
        }
    }
    cout << "Lunchtime" << endl;
}

int main() {
    ios_base::sync_with_stdio(false);

    int ntest; cin >> ntest;
    FOR(test, 1, ntest) {
        cout << "Case #" << test << ": ";
        solve();
    }

    return 0;
}


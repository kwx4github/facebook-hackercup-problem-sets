#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <numeric>

using namespace std;

#define sqr(a) ((a)*(a))
#define two(a) (1 << (a))
#define has(mask, a) ((mask) & two(a) ? 1 : 0)

const int MAXT = 80000000;

int n, m, l, a[3005], b[3005], c[3005], d[3005], dp[3005][3005][2], can[2][3005][2];

set <pair <int, pair <int, pair <int, int> > > > s;

void load() {
	cin >> n >> m >> l;

	for (int i = 0;i < n;i++) {
		cin >> a[i] >> b[i];
	}
	for (int i = 0;i < m;i++) {
		cin >> c[i] >> d[i];
	}
}

void solve(int test) {
	memset(dp, -1, sizeof(dp));
	memset(can, -1, sizeof(can));

	for (int i = 0;i < n;i++) {
		for (int j = 0;j < n;j++) {
			if (i == j) continue;

			if (a[j] >= a[i] && a[j] < b[i] + l && (can[0][i][0] == -1 || b[can[0][i][0]] < b[j])) {
				can[0][i][0] = j;
			}
		}

		for (int j = 0;j < m;j++) {
			if (c[j] >= a[i] && c[j] < b[i] + l && (can[0][i][1] == -1 || d[can[0][i][1]] < d[j])) {
				can[0][i][1] = j;
			}
		}
	}

	for (int i = 0;i < m;i++) {
		for (int j = 0;j < n;j++) {
			if (a[j] >= c[i] && a[j] < d[i] + l && (can[1][i][0] == -1 || b[can[1][i][0]] < b[j])) {
				can[1][i][0] = j;
			}
		}

		for (int j = 0;j < m;j++) {
			if (i == j) continue;

			if (c[j] >= c[i] && c[j] < d[i] + l && (can[1][i][1] == -1 || d[can[1][i][1]] < d[j])) {
				can[1][i][1] = j;
			}
		}
	}

	for (int i = 0;i < n;i++) {
		if (a[i] < l) {

			dp[i][1][0] = 0;
			s.insert(make_pair(0, make_pair(i, make_pair(1, 0))));
		}
	}

	for (int i = 0;i < m;i++) {
		if (c[i] < l) {
			dp[i][1][1] = 0;
			s.insert(make_pair(0, make_pair(i, make_pair(1, 1))));
		}
	}

	int ans = -1;
	while (!s.empty()) {
		int pos = (*s.begin()).second.first;
		int cnt = (*s.begin()).second.second.first;
		int id = (*s.begin()).second.second.second;

		//cerr << pos << " " << cnt << " " << id << endl;
		//cerr << can[0][pos][0] << " " << can[0][pos][1] << endl;

		s.erase(*s.begin());
		if (id == 0 && b[pos] + l > MAXT) {
			if (ans == -1 || ans > max(cnt, dp[pos][cnt][id])) ans = max(cnt, dp[pos][cnt][id]);
		}
		if (id == 1 && d[pos] + l > MAXT) {
			if (ans == -1 || ans > max(cnt, dp[pos][cnt][id])) ans = max(cnt, dp[pos][cnt][id]);
		}

		if (can[id][pos][0] != -1) {
			int cur = (id == 0 ? dp[pos][cnt][id] : cnt);
			int ncnt = (id == 0 ? cnt + 1 : dp[pos][cnt][id] + 1);
			
			int &aa = dp[can[id][pos][0]][ncnt][0];
			if (aa == -1 || aa > cur) {
				s.erase(make_pair(aa, make_pair(can[id][pos][0], make_pair(ncnt, 0))));
				aa = cur;
				s.insert(make_pair(aa, make_pair(can[id][pos][0], make_pair(ncnt, 0))));
			}
		}
		if (can[id][pos][1] != -1) {
			int cur = (id == 0 ? cnt : dp[pos][cnt][id]);
			int ncnt = (id == 0 ? dp[pos][cnt][id] + 1: cnt + 1);

			int &aa = dp[can[id][pos][1]][ncnt][1];
			if (aa == -1 || aa > cur) {
				s.erase(make_pair(aa, make_pair(can[id][pos][1], make_pair(ncnt, 1))));
				aa = cur;
				s.insert(make_pair(aa, make_pair(can[id][pos][1], make_pair(ncnt, 1))));
			}	
		}
	}

	if (l > MAXT) ans = 0;

	printf ("Case #%d: ", test);
	if (ans == -1) {
		printf("Lunchtime\n");
	} else {
		printf("%d\n", ans);
	}
}

int main() {
 	freopen ("a.in", "r", stdin);

 	int t;
 	scanf ("%d\n", &t);

 	clock_t start = clock();
 	for (int i = 1;i <= t;i++) {
 		clock_t cur_start = clock();

 		fprintf(stderr, "Test %d:\n", i);
 		load();
 		solve(i);
 		fprintf(stderr, "Done in %.3f\n", (clock() - cur_start) / (double)CLOCKS_PER_SEC);
 	}

 	fprintf(stderr, "Total time: %.3f\n", (clock() - start) / (double)CLOCKS_PER_SEC);

 	return 0;
}
#include <bits/stdc++.h>

#define FO(i,a,b) for (int i = (a); i < (b); i++)
#define sz(v) int(v.size())

using namespace std;

struct sol {
    struct iv {
        int s, e;
        bool operator<(const iv &o) const {
            return s < o.s;
        }
    };

    int l;

    vector<iv> fix(vector<iv> &o) {
        if (o.empty()) return o;
        sort(o.begin(),o.end());
        vector<iv> r;
        FO(i,0,sz(o)) {
            while (!r.empty() && o[i].s == r.back().s && o[i].e >= r.back().e) {
                r.pop_back();
            }
            if (!r.empty() && o[i].e <= r.back().e) continue;
            r.push_back(o[i]);
        }
        return r;
    }

    int whatnext(int t, vector<iv> &v) {
        // which time can we get to
        // we need to take one with s < t+l, take the latest one
        int s = 0, e = sz(v)-1, b = -1;
        while (s <= e) {
            int m = (s+e)/2;
            if (v[m].s < t+l) {
                b = v[m].e;
                s = m+1;
            } else e = m-1;
        }
        return max(b, t);
    }

    vector<iv> ai, bi;
    map<pair<int,int>, int> cache;

    int solve(int t, int o) { // o = na-nb
        if (t+l >= 80000000) return max(o,0);
        if (cache.find(make_pair(t,o)) != cache.end()) return cache[make_pair(t,o)];
        int e0 = whatnext(t, ai);
        int e1 = whatnext(t, bi);
        int r0 = e0 == t ? 1e8 : solve(e0, o+1);
        int r1 = e1 == t ? 1e8 : 1+solve(e1, o-1);
        return cache[make_pair(t,o)] = min(r0, r1);
    }

    int getans(int num) {
        int a, b;
        scanf("%d %d %d", &a, &b, &l);
        FO(i,0,a) {
            iv x;
            scanf("%d %d", &x.s, &x.e);
            ai.push_back(x);
        }
        FO(i,0,b) {
            iv x;
            scanf("%d %d", &x.s, &x.e);
            bi.push_back(x);
        }
        ai = fix(ai); bi = fix(bi);
        return solve(0,0);
    }
};

int main() {
    int T; scanf("%d", &T);
    FO(Z,1,T+1) {
        sol s;
        int r = s.getans(Z);
        if (r < 1e7) printf("Case #%d: %d\n", Z, r);
        else  printf("Case #%d: Lunchtime\n", Z);
    }
}


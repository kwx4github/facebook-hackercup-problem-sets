#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

struct ev {
    int A,B,who;
    vector<PII> V;

    ev(int _A, int _B, int _who) : A(_A), B(_B), who(_who) {};
    
    bool operator < (const ev &e) const {
        return A < e.A;
    }
};
const int INF = 1e9;
void solve(int tc) {
    cout << "Case #" << tc << ": ";
    int J,W,L;
    cin >> J >> W >> L;
    int D = 8e7;
    vector<ev> E;
    REP(i, J) {
        int A,B;
        cin >> A >> B;
        E.PB(ev(A-L,B,0));
    }
    REP(i, W) {
        int A,B;
        cin >> A >> B;
        E.PB(ev(A-L,B,1));
    }
    sort(ALL(E));
    D -= L;
    int N = J+1;
    vector<PII> tab(N, MP(0,0));
    E.PB(ev(D,D,2));
    int TW = 0;
    int TJ = 0;
    queue<ev> Q;
    for (ev e : E) {
        //debug(e.A);
        while(!Q.empty() && Q.front().B <= e.A) Q.pop();
        REP(i,N) {
            if (tab[i].Y != INF && -tab[i].Y <= e.A) {
                if (TW > e.A) {
                    tab[i].X++;
                    tab[i].Y = -TW;
                } else {
                    tab[i].X = tab[i].Y = INF;
                }
                if (i > 0 && !Q.empty()) {
                    PII prop = Q.front().V[i-1];
                    prop.Y = -max(-prop.Y, Q.front().B);
                    mini(tab[i], prop);
                }
            }
        } 
       // debugv(tab);
        if (e.who == 0) {
            if (e.B > TJ) {
               e.V = tab;
               Q.push(e); 
            }
            maxi(TJ, e.B);
        } else {
            maxi(TW, e.B);
        }
        //debugv(tab);
    }
    int res = INF;
    REP(i,N) mini(res, max(i,tab[i].X));
    if (res == INF) cout << "Lunchtime" << endl;
    else cout << res << endl;



}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);

    return 0;
}


#include <cstdio>
#include <cassert>
#include <algorithm>
#include <vector>
using namespace std;

struct seg
{
    int l, r;
    int p;
    seg(int _l, int _r, int _p)
    {
        l = _l, r = _r, p = _p;
    }
    friend bool operator <(seg a, seg b)
    {
        if (a.r != b.r)
            return a.r < b.r;
        else
            return a.p < b.p;
    }
};

vector<seg> S;

const int inf = 420 * 1000 * 1000;

const int N = 3050;
int D[2 * N][N];

const int LEN = 80 * 1000 * 1000;

void solve(int cs)
{
    int n, m;
    scanf("%d %d", &n, &m);
    int w;
    scanf("%d", &w);
    S.clear();
    for (int i = 0; i < n; i++)
    {
        int a, b;
        scanf("%d %d", &a, &b);
        b += w;
        S.push_back(seg(a, b, 0));
    }
    for (int i = 0; i < m; i++)
    {
        int a, b;
        scanf("%d %d", &a, &b);
        b += w;
        S.push_back(seg(a, b, 1));
    }
    S.push_back(seg(-inf, w, -1));
    sort(S.begin(), S.end());
    assert(S[0].p == -1);
    for (int i = 0; i < 2 * N; i++)
        for (int j = 0; j < N; j++)
            D[i][j] = inf;
    D[0][0] = 0;
    for (int i = 0; i + 1 < S.size(); i++)
    {
        int r = S[i].r;
        int id[] = {-1, -1};
        for (int j = i + 1; j < S.size(); j++)
        {
            if (S[j].l >= r || S[j].r == r)
                continue;
            id[S[j].p] = j;    
        }
        for (int j = 0; j <= n; j++)
        {
            if (id[0] != -1)
                D[id[0]][j + 1] = min(D[id[0]][j + 1], D[i][j]);
            if (id[1] != -1)
                D[id[1]][j] = min(D[id[1]][j], D[i][j] + 1);
        }
    }
    int ans = inf;
    for (int i = 0; i < S.size(); i++)
    {
        for (int j = 0; j <= n; j++)
            if (S[i].r > LEN)
                ans = min(ans, max(D[i][j], j));
    }
    if (ans >= inf / 2)
        printf("Case #%d: Lunchtime\n", cs);
    else
        printf("Case #%d: %d\n", cs, ans);
}

int main()
{
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++)
        solve(i + 1);
}


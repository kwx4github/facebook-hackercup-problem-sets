#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

const int maxN = 6020;
const int inf = 1000000000;
const int R = 80000000;
int n, m, L;
int a[maxN], b[maxN], c[maxN], d[maxN];

struct Seg {
	int mode;
	int l, r;
	bool operator < (const Seg &other) const {
		return r < other.r;
	}
	Seg() {
	}
	Seg(int mode, int l, int r) : mode(mode), l(l), r(r) {
	}
};

void readData() {
}

int dp[maxN][maxN];
int t[3100][24100];

void update(int s[], int i, int l, int r, int k, int value) {
	if (l == r) {
		s[i] = value;
		return ;
	}
	if (k > (l + r) / 2) {
		update(s, 2 * i + 1, (l + r) / 2 + 1, r, k, value);
	} else {
		update(s, 2 * i, l, (l + r) / 2, k, value);
	}
	s[i] = min(s[2 * i], s[2 * i + 1]);
}

void build(int s[], int i, int l, int r) {
	if (l == r) {
		s[i] = inf;
		return ;
	}
	build(s, 2 * i, l, (l + r) / 2);
	build(s, 2 * i + 1, (l + r) / 2 + 1, r);
	s[i] = min(s[2 * i], s[2 * i + 1]);
}

int get(int s[], int i, int l, int r, int cl, int cr) {
	if (l == cl && r == cr) {
		return s[i];
	}

	if (cl > (l + r) / 2) {
		return get(s, 2 * i + 1, (l + r) / 2 + 1, r, cl, cr);
	}
	if (cr <= (l + r) / 2) {
		return get(s, 2 * i, l, (l + r) / 2, cl, cr);
	}
	int A = get(s, 2 * i, l, (l + r) / 2, cl, (l + r) / 2);
	int B = get(s, 2 * i + 1, (l + r) / 2 + 1, r, (l + r) / 2 + 1, cr);
	return min(A, B);
}

int bounds[maxN];

void solve(int test) {
	cin >> n >> m >> L;
	for (int i = 0; i < n; ++i) {
		scanf("%d%d", &a[i], &b[i]);
	}
	for (int i = 0; i < m; ++i) {
		scanf("%d%d", &c[i], &d[i]);
	}

	vector < Seg > s;
	for (int i = 0; i < n; ++i) {
		s.push_back(Seg(1, a[i], b[i]));
	}
	for (int i = 0; i < m; ++i) {
		s.push_back(Seg(2, c[i], d[i]));
	}
	sort(s.begin(), s.end());
	for (int i = 0; i < s.size(); ++i) {
		bounds[i] = s[i].r;
	}

	int k = s.size();

	for (int i = 0; i < maxN; ++i) {
		for (int j = 0; j < maxN; ++j) {
			dp[i][j] = inf;
		}
	}
	for (int j = 0; j <= n; ++j) {
		build(t[j], 1, 0, maxN - 1);
	}

	dp[0][0] = 0;
	update(t[0], 1, 0, maxN - 1, 0, 0);
	int res = inf;
	if (L > R) {
		res = 0;
	}
	for (int i = 0; i < s.size(); ++i) {
		int mode = s[i].mode;
		int lIndex = lower_bound(bounds, bounds + k, s[i].l - L + 1) - bounds;
		int rIndex = i - 1;
		++lIndex;
		if (s[i].l < L) {
			lIndex = 0;
		}
		++rIndex;
		if (lIndex > rIndex) {
			continue;
		}
		for (int j = 0; j <= n; ++j) {
			if (mode == 1) {
				if (j > 0) {
					int value = get(t[j - 1], 1, 0, maxN - 1, lIndex, rIndex);
					if (value < dp[i + 1][j]) {
						dp[i + 1][j] = value;
						update(t[j], 1, 0, maxN - 1, i + 1, value);
					}
				}
			} else {
				int value = get(t[j], 1, 0, maxN - 1, lIndex, rIndex);
				if (value + 1 < dp[i + 1][j]) {
					dp[i + 1][j] = value + 1;
					update(t[j], 1, 0, maxN - 1, i + 1, value + 1);
				}
			}
			if (s[i].r + L > R) {
				res = min(res, max(j, dp[i + 1][j]));
			}
		}
	}
	if (res == inf) {
		printf("Case #%d: Lunchtime\n", test);
	} else {
		printf("Case #%d: %d\n", test, res);
	}
}

void gen() {
	printf("1\n");
	printf("3000 3000 1000000\n");
	int n = 3000;
	for (int i = 0; i < n; ++i) {
		int x = rand() % 8000;
		int y = rand() % 8000;
		if (x > y) {
			swap(x, y);
		}
		if (y > x + 100) {
			y = x + 100;
		}
		if (x == y) {
			y += 1;
		}
		printf("%d %d\n", x * 10000, y * 10000);
	}
	for (int i = 0; i < n; ++i) {
		int x = rand() % 8000;
		int y = rand() % 8000;
		if (x > y) {
			swap(x, y);
		}
		if (y > x + 100) {
			y = x + 100;
		}
		if (x == y) {
			y += 1;
		}
		printf("%d %d\n", x * 10000, y * 10000);
	}
}

int main(int argc, char* argv[]) {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	//gen();
	//return 0;

	int left_bound, right_bound;

	/*freopen(argv[3], "w", stdout);

	
	sscanf(argv[1], "%d", &left_bound);
	sscanf(argv[2], "%d", &right_bound);*/

	int t;
	cin >> t;
	left_bound = 1, right_bound = t;
	for (int i = 1; i <= t; ++i) {
		if (i >= left_bound && i <= right_bound) {
			solve(i);
		}
		cerr << i << ": " << clock() << endl;
	}

	return 0;
}
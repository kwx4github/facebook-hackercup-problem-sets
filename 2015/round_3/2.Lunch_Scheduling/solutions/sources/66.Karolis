#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

const int Maxn = 3005;

int t;
int J, W, L;
int a[Maxn], b[Maxn];
int c[Maxn], d[Maxn];
vector <int> un;
vector <int> A, B;
int dp[Maxn][Maxn];

int main()
{
	scanf("%d", &t);
	for (int tc = 1; tc <= t; tc++) {
		un.clear();
		scanf("%d %d %d", &J, &W, &L);
		un.push_back(0); un.push_back(80000000);
		for (int i = 0; i < J; i++) {
			scanf("%d %d", &a[i], &b[i]);
			un.push_back(b[i]);
		}
		for (int i = 0; i < W; i++) {
			scanf("%d %d", &c[i], &d[i]);
			un.push_back(d[i]);
		}
		sort(un.begin(), un.end()); un.erase(unique(un.begin(), un.end()), un.end());
		A.resize(un.size()); B.resize(un.size());
		for (int i = 0; i < A.size(); i++) {
			A[i] = -1;
			for (int j = 0; j < J; j++)
				if (a[j] <= un[i] && un[i] < b[j] || un[i] < a[j] && un[i] + L > a[j])
					A[i] = max(A[i], b[j]);
			if (A[i] != -1) A[i] = lower_bound(un.begin(), un.end(), A[i]) - un.begin();
		}
		for (int i = 0; i < B.size(); i++) {
			B[i] = -1;
			for (int j = 0; j < W; j++)
				if (c[j] <= un[i] && un[i] < d[j] || un[i] < c[j] && un[i] + L > c[j])
					B[i] = max(B[i], d[j]);
			if (B[i] != -1) B[i] = lower_bound(un.begin(), un.end(), B[i]) - un.begin();
		}
		fill((int*)dp, (int*)dp + Maxn * Maxn, 0);
		int res = J + W + 1;
		for (int i = 0; i <= J; i++)
			for (int j = 0; j <= W; j++) {
				int vl = dp[i][j];
				if (A[vl] != -1) dp[i + 1][j] = max(dp[i + 1][j], A[vl]);
				if (B[vl] != -1) dp[i][j + 1] = max(dp[i][j + 1], B[vl]);
				if (un.back() - un[vl] < L) res = min(res, max(i, j));
			}
		printf("Case #%d: ", tc);
		if (res == J + W + 1) printf("Lunchtime\n");
		else printf("%d\n", res);
	}
	return 0;
}
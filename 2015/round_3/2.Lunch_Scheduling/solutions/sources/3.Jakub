
#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

#define FI first
#define SE second
#define X first
#define Y second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back

typedef long long LL;
typedef vector<int> VI;
typedef long double LD;
typedef pair<int,int> PII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

double getTime() {
	timeval tv;
	gettimeofday(&tv, NULL);
	return tv.tv_sec + tv.tv_usec * 1e-6;
}

const int DAY = 80000000;

int dp[3005][3005];

vector<int> calc(vector<int> v, vector<PII> z, int L) {
    vector<int> res = v;
    REP (i, v.size()) {
        REP (j, z.size()) {
            if (z[j].ST < v[i] + L) {
                res[i] = max(res[i], z[j].ND);
            }
        }
    }
    REP (i, res.size()) {
        if (res[i] != -1) {
            REP (j, v.size()) {
                if (res[i] == v[j]) {
                    res[i] = j;
                    break;
                }
            }
        }
    }
    return res;
}


int alg() {
    int J, W, L;
    cin >> J >> W >> L;
    vector<PII> vJ(J), vW(W);
    REP (i, J) {
        cin >> vJ[i].ST >> vJ[i].ND;
    }
    REP (i, W) {
        cin >> vW[i].ST >> vW[i].ND;
    }
    vector<int> key_times;
    key_times.PB(0);
    key_times.PB(DAY);
    REP (i, J) {
        key_times.PB(vJ[i].ND);
    }
    REP (i, W) {
        key_times.PB(vW[i].ND);
    }
    sort(ALL(key_times));
    key_times.erase(unique(ALL(key_times)), key_times.end());
    vector<int> nextJ = calc(key_times, vJ, L);
    vector<int> nextW = calc(key_times, vW, L);
    FOR (i, 0, J + 1) {
        FOR (j, 0, W + 1) {
            dp[i][j] = 0;
        }
    }
    FOR (i, 0, J + 1) {
        FOR (j, 0, W + 1) {
            if (i < J) {
                dp[i + 1][j] = max(dp[i + 1][j], nextJ[dp[i][j]]);
            }
            if (j < W) {
                dp[i][j + 1] = max(dp[i][j + 1], nextW[dp[i][j]]);
            }
        }
    }
    int res = (int) 1e9;
    FOR (i, 0, J + 1) {
        FOR (j, 0, W + 1) {
            if (key_times[dp[i][j]] + L > DAY) {
                res = min(res, max(i, j));
            }
        }
    }
    if (res == (int) 1e9) {
        return -1;
    }
    return res;
}

int main() {
    int d;
    cin >> d;
    FOR (i, 1, d + 1) {
        int res = alg();
        cout << "Case #" << i << ": ";
        if (res == -1) {
            cout << "Lunchtime" << endl;
        } else {
            cout << res << endl;
        }
    }
}

#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
#define uint unsigned int
#define LL long long
#define ULL unsigned LL
#define VI vector<int>
#define X first
#define Y second
#define sz(_v) ((int)_v.size())
#define all(_v) (_v).begin(),(_v).end()
#define FOR(_i,a,b) for (int _i(a),_l(b); _i<=_l; ++_i)
#define rept(i,a) FOR(i,0,(int)(a)-1)
#define x1 X1
#define y1 Y1
#define sqr(a) ((a)*(a))
#define C(a) memset((a),0,sizeof (a))
#define MS(a,x) memset((a),(x),sizeof (a))
#define INF 1050000000
#define INFL INF*1ll*INF
#define PI 3.141592653589
#define eps 1e-10
#define MOD 1000000000
#define PRIME 312427
#define MOD2 500000004

using namespace std;

// do not use FOR for long-long
// check stack in case of crash
// check INF before submit

vector< pair<int, pii> > events;

struct MaxPrefix {
	vector<pii> changes;

	void init(vector<pii> &d) {
		events.clear();
		changes.clear();
		rept(i,sz(d)) {
			events.pb(mp(d[i].X,mp(1,d[i].Y)));
		}
		sort(all(events));
		if (events[0].X!=0)
			changes.pb(mp(0,0));
//		cerr<<"init"<<2<<endl;
		int mx(0);
		rept(i,sz(events)) {
			int cnt(0);
			while (i+cnt<sz(events) && events[i+cnt].X==events[i].X) {
				int j(i+cnt);
				mx=max(mx,events[j].Y.Y);
				++cnt;
			}
			changes.pb(mp(events[i].X,mx));
			i+=cnt;
			--i;
		}
//		cerr<<"changes ";
//		rept(i,sz(changes)) cerr<<changes[i].X<<" "<<changes[i].Y<<" ";
//		cerr<<endl;
	}

	int getMax(int len) {
//		cerr<<"getMax "<<len;
//		cerr<<"changes ";
//		rept(i,sz(changes)) cerr<<changes[i].X<<" "<<changes[i].Y<<" ";
		int pos(lower_bound(all(changes),mp(len,INF))-changes.begin());
//		cerr<<" "<<pos<<" ret "<<changes[pos-1].Y<<endl;
		return changes[pos-1].Y;
	}
};

int dyn[3005][3005];
MaxPrefix a,b;

void init() {
}

void prepareTest() {
	C(dyn);
}

bool check(int hm, int l) {
	MS(dyn,-1);
	dyn[0][0]=0;
	rept(i,hm+1) {
		rept(j,hm+1) {
			if (dyn[i][j]==-1) continue;
			if (dyn[i][j]+l>=80*1000*1000)
				return true;
			int now(dyn[i][j]);
//			cerr<<i<<" "<<j<<" "<<now<<endl;
			if (i<hm) {
//				cerr<<"!"<<endl;
				int mx(a.getMax(now+l-1));
				if (mx>now)
					if (dyn[i+1][j]==-1 || dyn[i+1][j]<mx) {
						dyn[i+1][j]=mx;
					}
			}
			if (j<hm) {
				int mx(b.getMax(now+l-1));
				if (mx>now)
					if (dyn[i][j+1]==-1 || dyn[i][j+1]<mx) {
						dyn[i][j+1]=mx;
					}
			}
		}
	}
	return false;
}

void solveTest() {
	int j,w,l;
	scanf("%d%d%d",&j,&w,&l);
	vector<pii> aEv(j),bEv(w);
	rept(i,j) scanf("%d%d",&aEv[i].X,&aEv[i].Y);
	rept(i,w) scanf("%d%d",&bEv[i].X,&bEv[i].Y);
//	cerr<<1<<endl;
	a.init(aEv);
	b.init(bEv);
//	cerr<<2<<endl;
	int BAD(0),GOOD(3005);
	while (GOOD-BAD>1) {
		int med((GOOD+BAD)/2);
		if (check(med,l)) {
			GOOD=med;
		} else {
			BAD=med;
		}
	}
	if (GOOD>3000) {
		printf("Lunchtime\n");
	} else {
		printf("%d\n",GOOD);
	}
}

void solve() {
	int tst;
	init();
	scanf("%d\n",&tst);
	FOR(i,1,tst) {
		cerr<<"TEST "<<i<<" is running..."<<endl;
		printf("Case #%d: ",i);
		prepareTest();
		solveTest();
		cerr<<"TEST "<<i<<" complete!"<<endl;
	}
}

int main() {
	freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);

	clock_t tm = clock();
	solve();
	cerr<<setprecision(3)<<(clock()-tm+0.)/CLOCKS_PER_SEC<<endl;
	return 0;
}

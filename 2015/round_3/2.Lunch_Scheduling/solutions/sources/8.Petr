import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;
import java.io.OutputStream;
import java.util.concurrent.Executors;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.io.FileInputStream;
import java.util.Arrays;
import java.util.HashSet;
import java.util.concurrent.Callable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.PrintStream;
import java.util.Comparator;
import java.io.FileOutputStream;
import java.io.File;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "lunch.*scheduling.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("lunchscheduling.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LunchScheduling solver = new LunchScheduling();
		solver.solve(1, in, out);
		out.close();
	}
}

class LunchScheduling {
    static final int INF = (int) 1e9;

    static class Segment {
        int l;
        int r;
        int kind;
    }

    static class Testcase implements Callable<Testcase> {
        int testNumber;
        int n1;
        int n2;
        int daySize;
        int res;
        Segment[] segments;

        Testcase(int testNumber) {
            this.testNumber = testNumber;
        }

        public void readInput(InputReader in) {
            n1 = in.nextInt();
            n2 = in.nextInt();
            int l = in.nextInt();
            daySize = 80000000 - l;
            segments = new Segment[n1 + n2];
            for (int i = 0; i < n1; ++i) {
                segments[i] = new Segment();
                segments[i].l = Math.max(-1, in.nextInt() - l);
                segments[i].r = Math.min(daySize + 1, in.nextInt());
                segments[i].kind = 0;
            }
            for (int i = n1; i < n1 + n2; ++i) {
                segments[i] = new Segment();
                segments[i].l = Math.max(-1, in.nextInt() - l);
                segments[i].r = Math.min(daySize + 1, in.nextInt());
                segments[i].kind = 1;
            }
        }

        public Testcase call() {
            res = INF;
            if (daySize < 0) {
                res = 0;
            } else {
                Set<Integer> allCoors = new HashSet<>();
                allCoors.add(-1);
                allCoors.add(0);
                allCoors.add(daySize);
                allCoors.add(daySize + 1);
                for (Segment s : segments) {
                    if (s.l < -1) throw new RuntimeException();
                    if (s.l > daySize + 1) throw new RuntimeException();
                    if (s.r < -1) throw new RuntimeException();
                    if (s.r > daySize + 1) throw new RuntimeException();
                    allCoors.add(s.l);
                    allCoors.add(s.r);
                }
                int[] coors = new int[allCoors.size()];
                int ncoors = 0;
                for (Integer coor : allCoors) {
                    coors[ncoors++] = coor;
                }
                if (ncoors != coors.length) throw new RuntimeException();
                Arrays.sort(coors);
                for (Segment s : segments) {
                    s.l = Arrays.binarySearch(coors, s.l);
                    s.r = Arrays.binarySearch(coors, s.r);
                }

                Arrays.sort(segments, new Comparator<Segment>() {
                    public int compare(Segment o1, Segment o2) {
                        return o1.r - o2.r;
                    }
                });

                int[][] trees = new int[n1 + 1][ncoors * 4 + 10];
                for (int[] x : trees) Arrays.fill(x, INF);

                treeUpd(trees[0], 0, 0, ncoors - 1, 1, 0);

                for (Segment segment : segments) {
                    for (int old = 0; old <= n1; ++old) {
                        int best = treeGet(trees[old], 0, 0, ncoors - 1, segment.l + 1, segment.r - 1);
                        if (best < INF) {
                            int nxt = old;
                            int delta = 0;
                            if (segment.kind == 0) ++nxt; else ++delta;
                            treeUpd(trees[nxt], 0, 0, ncoors - 1, segment.r, best + delta);
                        }
                    }
                }

                for (int old = 0; old <= n1; ++old) {
                    res = Math.min(res, Math.max(old, treeGet(trees[old], 0, 0, ncoors - 1, ncoors - 1, ncoors - 1)));
                }
            }
            System.err.println("Done test " + testNumber);
            return this;
        }

        private int treeGet(int[] tree, int root, int rl, int rr, int left, int right) {
            if (left > right) return INF;
            if (rl == left && rr == right) return tree[root];
            int rm = (rl + rr) / 2;
            return Math.min(treeGet(tree, root * 2 + 1, rl, rm, left, Math.min(rm, right)), treeGet(tree, root * 2 + 2, rm + 1, rr, Math.max(rm + 1, left), right));
        }

        private void treeUpd(int[] tree, int root, int rl, int rr, int where, int what) {
            tree[root] = Math.min(tree[root], what);
            if (rl == rr) return;
            int rm = (rl + rr) / 2;
            if (where <= rm) treeUpd(tree, root * 2 + 1, rl, rm, where, what);
            else treeUpd(tree, root * 2 + 2, rm + 1, rr, where, what);
        }

        public void writeOutput(PrintWriter out) {
            out.println("Case #" + testNumber + ": " + (res == INF ? "Lunchtime" : "" + res));
        }
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int nt = in.nextInt();
        List<Future<Testcase>> tests = new ArrayList<Future<Testcase>>();
        ExecutorService pool = Executors.newFixedThreadPool(3);
        for (int it = 0; it < nt; ++it) {
            Testcase t = new Testcase(it + 1);
            t.readInput(in);
            tests.add(pool.submit(t));
        }
        for (Future<Testcase> test : tests) {
            try {
                Testcase t = test.get();
                t.writeOutput(out);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } catch (ExecutionException e) {
                throw new RuntimeException(e);
            }
        }
        pool.shutdown();
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


import java.io.*;
import java.util.*;

public class B {
	FastScanner in;
	PrintWriter out;

	class Meeting implements Comparable<Meeting> {
		int from, to;

		public Meeting(int from, int to) {
			super();
			this.from = from;
			this.to = to;
		}

		@Override
		public int compareTo(Meeting o) {
			return Integer.compare(from, o.from);
		}

	}

	void solve() {
		int tc = in.nextInt();
		for (int t = 0; t < tc; t++) {
			out.print("Case #" + (t + 1) + ": ");
			int cntF = in.nextInt();
			int cntS = in.nextInt();
			int l = in.nextInt();
			Meeting[] aa = new Meeting[cntF];
			Meeting[] bb = new Meeting[cntS];
			for (int i = 0; i < cntF; i++) {
				aa[i] = new Meeting(in.nextInt(), in.nextInt());
			}
			for (int i = 0; i < cntS; i++) {
				bb[i] = new Meeting(in.nextInt(), in.nextInt());
			}
			Arrays.sort(aa);
			Arrays.sort(bb);
			ArrayList<Meeting> a = new ArrayList<>();
			ArrayList<Meeting> b = new ArrayList<>();
			for (Meeting x : aa) {
				if (a.size() > 0 && a.get(a.size() - 1).to >= x.to) {
					continue;
				}
				a.add(x);
			}
			for (Meeting x : bb) {
				if (b.size() > 0 && b.get(b.size() - 1).to >= x.to) {
					continue;
				}
				b.add(x);
			}
			cntF = a.size();
			cntS = b.size();
			int[][] dp = new int[cntF + 1][cntS + 1];
			for (int i = 0; i <= cntF; i++)
				for (int j = 0; j <= cntS; j++) {
					int firstFreeTime = dp[i][j];
					int mustStartMeeting = firstFreeTime + l - 1;
					if (i != cntF) {
						int left = 0, right = cntF;
						while (right - left > 1) {
							int mid = (left + right) >>> 1;
							if (a.get(mid).from <= mustStartMeeting) {
								left = mid;
							} else {
								right = mid;
							}
						}
						if (a.get(left).from <= mustStartMeeting) {
							dp[i + 1][j] = Math.max(dp[i + 1][j], a.get(left).to);
						}
					}
					if (j != cntS) {
						int left = 0, right = cntS;
						while (right - left > 1) {
							int mid = (left + right) >>> 1;
							if (b.get(mid).from <= mustStartMeeting) {
								left = mid;
							} else {
								right = mid;
							}
						}
						if (b.get(left).from <= mustStartMeeting) {
							dp[i][j + 1] = Math.max(dp[i][j + 1], b.get(left).to);
						}
					}
				}
			int result = Integer.MAX_VALUE;
			for (int i = 0; i <= cntF; i++)
				for (int j = 0; j <= cntS; j++) {
					int dpVal = dp[i][j] + l - 1;
					if (dpVal >= 80_000_000) {
						result = Math.min(result, Math.max(i, j));
					}
				}
			out.println(result == Integer.MAX_VALUE ? "Lunchtime" : result);
			System.err.println((t + 1) + "/" + tc + " done");
		}
	}

	void run() {
		try {
			in = new FastScanner(new File("B.in"));
			out = new PrintWriter(new File("B.out"));

			solve();

			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	void runIO() {

		in = new FastScanner(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		public FastScanner(InputStream f) {
			br = new BufferedReader(new InputStreamReader(f));
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		boolean hasMoreTokens() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] args) {
		new B().run();
	}
}
#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <math.h>
#include <algorithm>
#include <bitset>
#include <set>
#include <sstream>
#include <stdlib.h>
#include <map>
#include <queue>
#include <stack>
#include <assert.h>
// #include <unordered_set>
#include <iomanip>

using namespace std;

#define sz(x) ((int)x.size())
#define all(x) (x).begin(), (x).end()
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

#define forit(X,Y) for(typeof((Y).begin()) X = (Y).begin(); X != (Y).end(); ++X)

#define mplus(x, y) ((x) == -1 || (y) == -1) ? -1 : ((x) + (y))
#define mmax(x, y) ((x) == -1 || (y) == -1) ? -1 : max((x), (y))
#define mmin(x, y) ((x) == -1) ? (y) : ((y) == -1) ? (x) : min((x), (y))
#define checkbit(n, k) (((1L << (k)) & (n)) != 0)

#define debug(x) cerr << '>' << #x << ':' << x << endl;

typedef long long int64;

typedef vector <int> vi;
typedef vector < vi > vvi;


const int MOD = 1000000007;
const int LIMIT = 80000000;
const int MAXRES = 3000;

int calc(vi a, vi b, vi c, vi d, int l) {
    int n1 = a.size();
    int n2 = c.size();
    vector< pair<pair<int, int>, int> > points(n1 + n2 + 2);
    for (int i = 0; i < n1; ++i) {
        points[i] = make_pair(make_pair(a[i], b[i]), 1);
    }
    for (int i = 0; i < n2; ++i) {
        points[n1 + i] = make_pair(make_pair(c[i], d[i]), -1);
    }
    points[n1 + n2] = make_pair(make_pair(-1, 0), 0);
    points[n1 + n2 + 1] = make_pair(make_pair(LIMIT, LIMIT + 1), 0);
    sort(points.begin(), points.end());
    assert(points[0].first.first == -1);
    assert(points.back().second == 0);

    int n = points.size();
    vvi previous(n);
    for (int i = 1; i < n; ++i) {
        pair<pair<int, int>, int> pi = points[i];
        int ibest0 = -1, ibest1 = -1, ibestm1 = -1;
        // int best0 = LIMIT + 1, best1 = LIMIT + 1, bestm1 = LIMIT + 1;
        for (int j = 0; j < i; ++j) {
            pair<pair<int, int>, int> pj = points[j];
            if (pi.first.first < pj.first.second + l) {
                int* ibest = pj.second == 1 ? &ibest1 : pj.second == -1 ? &ibestm1 : &ibest0;
                if (*ibest == -1)
                    *ibest = j;
            }
        }
        if (ibest0 != -1)
            previous[i].push_back(ibest0);
        if (ibest1 != -1)
            previous[i].push_back(ibest1);
        if (ibestm1 != -1)
            previous[i].push_back(ibestm1);
    }


    vvi dp(n, vi(MAXRES + 1, MAXRES + 1));
    dp[0].assign(MAXRES + 1, 0);
    for (int i = 1; i < n; ++i) {
        for (int j1 = 0; j1 <  previous[i].size(); ++j1) {
            int j = previous[i][j1];
            if (points[i].second == -1) {
                for (int k = 1; k <= MAXRES; ++k) {
                    dp[i][k] = min(dp[i][k], dp[j][k - 1]);
                }
            } else if (points[i].second == 1) {
                for (int k = 0; k <= MAXRES; ++k) {
                    dp[i][k] = min(dp[i][k], dp[j][k] + 1);   
                }
            } else {
                for (int k = 0; k <= MAXRES; ++k) {
                    dp[i][k] = min(dp[i][k], dp[j][k]);   
                }
            }
        }
    }

    int res = MAXRES + 1;
    for (int i = 0; i <= MAXRES; ++i) {
        res = min(res, max(i, dp[n - 1][i]));
    }
    return res;
}


int main() {
    int T;
    cin >> T;
    for (int tt = 1; tt <= T; ++tt) {
        int J, W, L;
        cin >> J >> W >> L;
        vi A(J), B(J), C(W), D(W);
        for (int i= 0 ; i < J; ++i)
            cin >> A[i] >> B[i];
        for (int i = 0; i < W; ++i)
            cin >> C[i] >> D[i];
        int res = calc(A, B, C, D, L);
        cout << "Case #" << tt << ": ";
        if (res <= MAXRES)
            cout << res;
        else
            cout << "Lunchtime";
        cout << endl;
    }
}

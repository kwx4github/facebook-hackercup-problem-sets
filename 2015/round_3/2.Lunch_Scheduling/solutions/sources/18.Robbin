#include<vector>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const int E = 80000000;

const int N = 3005 << 1;

int n, m, l;

int dp[N][N];

int cal(vector<pair<int, int> > v) {
    int last = 0, ret = 0;
    for (int i = 0; i < (int)v.size(); ++i) {
        if (v[i].first > last) {
            ret = max(v[i].first - last, ret);
        }
        last = max(last, v[i].second);
    }
    ret = max(ret, E - last);
    return ret;
}

vector<int> et;

int getID(int pos) {
    return lower_bound(et.begin(), et.end(), pos) - et.begin();
}

const int INF = 1000000000;

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d%d%d", &n, &m, &l);
        vector<pair<int, int> > itv, ma, mb;
        et.clear();
        et.push_back(0);
        for (int i = 0; i < n; ++i) {
            int a, b;
            scanf("%d%d", &a, &b);
            itv.push_back(make_pair(a, b));
            ma.push_back(make_pair(a, b));
            et.push_back(b);
        }
        sort(ma.begin(), ma.end());
        for (int i = 0; i < m; ++i) {
            int c, d;
            scanf("%d%d", &c, &d);
            itv.push_back(make_pair(c, d));
            mb.push_back(make_pair(c, d));
            et.push_back(d);
        }
        sort(mb.begin(), mb.end());
        sort(et.begin(), et.end());
        et.erase(unique(et.begin(), et.end()), et.end());
        static int id = 0;
        printf("Case #%d: ", ++id);
        sort(itv.begin(), itv.end());
        if (cal(itv) >= l) {
            printf("Lunchtime\n");
        } else {
            int cura = 0, curb = 0, nxta = 0, nxtb = 0; 
            for (int i = 0; i <= (int)et.size(); ++i) {
                for (int j = 0; j <= n; ++j) {
                    dp[i][j] = INF;
                }
            }
            dp[0][0] = 0;
            for (int i = 0; i < (int)et.size(); ++i) {
                while (cura < n && et[i] + l > ma[cura].first) {
                    nxta = max(nxta, getID(ma[cura].second));
                    ++cura;
                }
                while (curb < m && et[i] + l > mb[curb].first) {
                    nxtb = max(nxtb, getID(mb[curb].second));
                    ++curb;
                }
                for (int j = 0; j <= n; ++j) {
                    if (nxta > i) {
                        dp[nxta][j + 1] = min(dp[nxta][j + 1], dp[i][j]);
                    }
                    if (nxtb > i) {
                        dp[nxtb][j] = min(dp[nxtb][j], dp[i][j] + 1);
                    }
                }
            }
            int ans = max(n, m);
            for (int i = 0; i < (int)et.size(); ++i) {
                if (et[i] + l <= E) {
                    continue;
                }
                for (int j = 0; j <= n; ++j) {
                    ans = min(ans, max(j, dp[i][j]));
                }
            }
            printf("%d\n", ans);
        }
    }
    return 0;
}

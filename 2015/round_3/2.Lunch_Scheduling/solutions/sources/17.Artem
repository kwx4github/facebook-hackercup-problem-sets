#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>
#include <iomanip>

using namespace std;

#pragma comment(linker, "/STACK:200000000")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;

pair<int, int> a1[3100], a2[3100];
int w[81000000], n1, n2, l, best1[6100], best2[6100], z[6100][3100], t1[6100], t2[6100];
vector<int> p;

void read() {
  cin >> n1 >> n2 >> l;
  forn(i, n1)
    cin >> a1[i].fs >> a1[i].sc;
  forn(i, n2)
    cin >> a2[i].fs >> a2[i].sc;
}

void gen() {

}

void solve() {
  sort(a1, a1 + n1);
  sort(a2, a2 + n2);

  p.clear();
  forn(i, n1)
    p.pb(a1[i].sc);
  forn(i, n2)
    p.pb(a2[i].sc);
  p.pb(0);
  sort(all(p));
  p.erase(unique(all(p)), p.end());
  memset(w, -1, sizeof(w));

  ford(i, p.size())
    w[p[i]] = i;

  forn(i, p.size()) {
    best1[i] = best2[i] = -1;
    forn(j, n1)
      if (a1[j].fs < p[i] + l && p[i] < a1[j].sc && (best1[i] == -1 || a1[j].sc > a1[best1[i]].sc))
        best1[i] = j;
    forn(j, n2)
      if (a2[j].fs < p[i] + l && p[i] < a2[j].sc && (best2[i] == -1 || a2[j].sc > a2[best2[i]].sc))
        best2[i] = j;

    if (best1[i] != -1)
      t1[i] = w[a1[best1[i]].sc];
    else
      t1[i] = -1;
    if (best2[i] != -1)
      t2[i] = w[a2[best2[i]].sc];
    else
      t2[i] = -1;
  }

  forn(i, 6100)
    forn(j, 3100)
      z[i][j] = INF;
  z[0][0] = 0;
  int ans = INF;
  forn(i, p.size())
    forn(j, n1 + 1)
      if (z[i][j] < INF) {
        if (p[i] + l > 80000000)
          ans = min(ans, max(j, z[i][j]));
        else {
          if (t1[i] != -1)
            z[t1[i]][j + 1] = min(z[t1[i]][j + 1], z[i][j]);
          if (t2[i] != -1)
            z[t2[i]][j] = min(z[t2[i]][j], z[i][j] + 1);
        }
      }

  if (ans < INF)
    cout << ans << endl;
  else
    cout << "Lunchtime" << endl;
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  
  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; test++) {
    cerr << "Solving test " << setw(2) << test << " of " << tests << ". Time = " << setw(5) << clock() << endl;
    cout << "Case #" << test << ": ";
    read();
    //gen();
    solve();
  }
  
  return 0;
}
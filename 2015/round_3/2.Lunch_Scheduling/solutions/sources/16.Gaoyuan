#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
//#include <ctime>
#include <map>
using namespace std;

struct meeting
{
	int L, R;
	bool operator <(meeting that)const
	{
		if(L == that.L)
			return R < that.R;
		return L < that.L;
	}
};

int n1, n2, lunch;
vector <meeting> m1, m2;

vector <meeting> fix(vector <meeting> &m)
{
	vector <meeting> t;
	if(m.size() == 0)
		return t;
	sort(m.begin(), m.end());
	t.push_back(m[0]);
	for(int i = 1; i < m.size(); i++)
		if(m[i].R > t[t.size()-1].R)
			t.push_back(m[i]);
	return t;
}

long long dp[3002][3002];

long long calc(vector <meeting> &m, int mustStartLeq)
{
	if(m.size() == 0)
		return 0;
	if(m[0].L > mustStartLeq)
		return 0;
	int L = 0, R = m.size(), M;
	while(R - L > 1)
	{
		M = (L + R) / 2;
		if(m[M].L <= mustStartLeq)
			L = M;
		else
			R = M;
	}
	return m[L].R;
}

void solve()
{
	cin >> n1 >> n2 >> lunch;
	m1.clear();
	m2.clear();
	for(int i = 1; i <= n1; i++)
	{
		meeting t;
		cin >> t.L >> t.R;
		m1.push_back(t);
	}
	for(int i = 1; i <= n2; i++)
	{
		meeting t;
		cin >> t.L >> t.R;
		m2.push_back(t);
	}
	m1 = fix(m1);
	m2 = fix(m2);
	n1 = m1.size();
	n2 = m2.size();
	memset(dp, 0, sizeof(dp));
	int ans = 100000;
	for(int i = 0; i <= n1; i++)
		for(int j = 0; j <= n2; j++)
		{
			long long now = dp[i][j];
			dp[i+1][j] = max(dp[i+1][j], calc(m1, now + lunch - 1));
			dp[i][j+1] = max(dp[i][j+1], calc(m2, now + lunch - 1));
			if(now + lunch > 80000000)
				ans = min(ans, max(i, j));
		}
	if(ans == 100000)
		cout << "Lunchtime" << endl;
	else
		cout << ans << endl;



}



int MAIN()
{
	int TestCase;
	cin >> TestCase;
	for(int caseID = 1; caseID <= TestCase; caseID ++)
	{
		cout << "Case #" << caseID << ": ";
		solve();
	}
	return 0;
}

int main()
{
	//srand((unsigned)time(NULL));
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(16);
	return MAIN();
}

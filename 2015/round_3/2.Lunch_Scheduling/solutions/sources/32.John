#include <cstdlib>
#include <cassert>
#include <vector>
#include <string>
#include <cstring>
#include <cstdio>
#include <stack>
using namespace std;

#define V(x) vector<x >
#define vs V(string)
#define vi V(int)
#define vd V(double)
#define vll V(long long)

#define fr(x,y,z) for((x)=(y);(x)<(z);(x)++)
#define fo(x,y) fr(x,0,y)
#define fir(n) fo(i,n)
#define fjr(n) fo(j,n)
#define fkr(n) fo(k,n)
#define fi fir(n)
#define fj fjr(n)

#define pb push_back
#define sz size()
#define cs c_str()

//#define fk fkr(n)
#include <map>
//#include <set>
#include <algorithm>
#define ll long long
//#define flr(n) fo(l,n)
//#define fl flr(n)
//#define ins(x) insert(x)
//#define df double
//#define srt(f) sort(f.begin(),f.end())


vi a,b,c,d;
int J,W,l;

#define B 9999


map<int, map<int, int>> opt;

int main(void) {
  int i;
  int nc;
  assert(scanf("%d",&nc)==1);
  for(int cas=1;cas<=nc;cas++) {
    assert(scanf("%d%d%d",&J,&W,&l)==3);
    a.resize(J);
    b.resize(J);
    c.resize(W);
    d.resize(W);
    opt.clear();
    opt[0];
    fir(J) {
      assert(scanf("%d%d",&a[i],&b[i])==2);
      opt[b[i]];
    }
    fir(W) {
      assert(scanf("%d%d",&c[i],&d[i])==2);
      opt[d[i]];
    }

    opt[0][1]=1;

    int ans=B;
    for(const auto& it : opt) {
      int t=it.first;

      {
        int bestb=0;
        fir(J) {
          if(a[i] <= t+l-1) bestb=max(bestb,b[i]);
        }
        if (bestb > t) {
          for (const auto& it2 : it.second) {
            int& x = opt[bestb][it2.first+1];
            if (x==0) x=B;
            x=min(x,it2.second);
          }
        }
      }

      {
        int bestb=0;
        fir(W) {
          if(c[i] <= t+l-1) bestb=max(bestb,d[i]);
        }
        if (bestb > t) {
          for (const auto& it2 : it.second) {
            int& x = opt[bestb][it2.first];
            if (x==0) x=B;
            x=min(x,it2.second+1);
          }
        }
      }

      if (t+l > 80000000) {
        for (const auto& it2 : it.second) {
          int nj=it2.first;
          int nw=it2.second;
          ans=min(ans,max(nj-1,nw-1));
        }
      }
    }

    if (ans < B) {
      printf("Case #%d: %d\n",cas,ans);
    } else {
      printf("Case #%d: Lunchtime\n",cas);
    }
  }
  return 0;
}

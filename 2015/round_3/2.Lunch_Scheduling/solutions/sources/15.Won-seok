#include <math.h>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <sstream>
#include <set>
using namespace std;

const int tm = 80000000;
int can_cover[3004][3004];

int c1[tm+1], c2[tm+1];

void solve() {
  int m1, m2, L;
  cin >> m1 >> m2 >> L;
  vector<pair<int, int> > A, B;
  for (int i=0; i<m1; i++) {
    int a, b;
    cin >> a >> b;
    A.push_back(pair<int, int>(a, b));
  }
  for (int i=0; i<m2; i++) {
    int a, b;
    cin >> a >> b;
    B.push_back(pair<int, int>(a, b));
  }

  for (int i=0; i<=tm; i++) c1[i] = c2[i] = -1;
  for (int i=0; i<m1; i++) c1[A[i].first] = max(c1[A[i].first], A[i].second);
  for (int i=0; i<m2; i++) c2[B[i].first] = max(c2[B[i].first], B[i].second);

  for (int i=1; i<=tm; i++) c1[i] = max(c1[i], c1[i-1]);
  for (int i=1; i<=tm; i++) c2[i] = max(c2[i], c2[i-1]);

  for (int i=0; i<=m1; i++) for (int j=0; j<=m2; j++) can_cover[i][j] = -1;
  can_cover[0][0] = 0;

  int res = 99999;
  for (int i=0; i<=m1; i++)
    for (int j=0; j<=m2; j++) {
      if (can_cover[i][j] == -1) continue;

      if (can_cover[i][j] + L > tm) {
        res = min(res, max(i, j));
        continue;
      }

      int rr = can_cover[i][j]+L-1;
      if (i<m1 && c1[rr] != -1) {
        can_cover[i+1][j] = max(can_cover[i+1][j], c1[rr]);
      }
      if (j<m2 && c2[rr] != -1) {
        can_cover[i][j+1] = max(can_cover[i][j+1], c2[rr]);
      }
    }

  if (res == 99999) printf("Lunchtime\n"); else printf("%d\n", res);
}

int main()
{
  int T;
  cin >> T;
  for (int tt=1; tt<=T; tt++) {
    printf("Case #%d: ", tt);
    solve();
  }
}

package com.facebook.hackercup2015.round3;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeSet;

public class LunchScheduling {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter writer = new PrintWriter(System.out);

    LunchScheduling() throws IOException {
        reader = new BufferedReader(new FileReader("input.txt"));
        writer = new PrintWriter(new FileWriter("output.txt"));
    }

    StringTokenizer stringTokenizer;

    String next() throws IOException {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            stringTokenizer = new StringTokenizer(reader.readLine());
        }
        return stringTokenizer.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }

    void solve() throws IOException {
        int t = nextInt();
        for(int i = 1; i <= t; i++) {
            solve(i);
        }
        writer.close();
    }

    private void solve(int testNumber) throws IOException {
        writer.printf("Case #%d: ", testNumber);
        int J = nextInt();
        int W = nextInt();
        int L = nextInt();
        int[] a = new int[J];
        int[] b = new int[J];
        Set<Integer> times = new TreeSet<>();
        for(int i = 0; i < J; i++) {
            a[i] = nextInt();
            b[i] = nextInt();
            times.add(a[i]);
            times.add(b[i]);
        }
        int[] c = new int[W];
        int[] d = new int[W];
        for(int i = 0; i < W; i++) {
            c[i] = nextInt();
            d[i] = nextInt();
            times.add(c[i]);
            times.add(d[i]);
        }
        times.add(0);
        times.add(80 * 1000 * 1000);
        int[] t = new int[times.size()];
        Map<Integer, Integer> map = new HashMap<>();
        for (int time : times) {
            t[map.size()] = time;
            map.put(time, map.size());
        }
        int[][] dp = new int[t.length][W + 1];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dp[0][0] = 0;
        for(int i = 0; i < t.length; i++) {
            for(int j = 0; j <= W; j++) {
                if(dp[i][j] == Integer.MAX_VALUE) continue;
                int ww = -1;
                for(int k = 0; k < W; k++) {
                    if(c[k] - t[i] < L) {
                        if(ww == -1 || d[k] > d[ww]) {
                            ww = k;
                        }
                    }
                }
                if(ww != -1 && d[ww] > t[i]) {
                    dp[map.get(d[ww])][j + 1] = Math.min(dp[map.get(d[ww])][j + 1], dp[i][j]);
                }
                int jj = -1;
                for(int k = 0; k < J; k++) {
                    if(a[k] - t[i] < L) {
                        if(jj == -1 || b[k] > b[jj]) {
                            jj = k;
                        }
                    }
                }
                if(jj != -1 && b[jj] > t[i]) {
                    dp[map.get(b[jj])][j] = Math.min(dp[map.get(b[jj])][j], dp[i][j] + 1);
                }
                if(80000000 - t[i] < L) {
                    dp[t.length - 1][j] = Math.min(dp[t.length - 1][j], dp[i][j]);
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for(int i = 0; i <= W; i++) {
            ans = Math.min(ans, Math.max(i, dp[t.length - 1][i]));
        }
        writer.println(ans == Integer.MAX_VALUE ? "Lunchtime" : ans);
    }

    public static void main(String[] args) throws IOException {
        new LunchScheduling().solve();
    }
}

/* Written by Filip Hlasek 2015 */
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstring>

#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define REP(i,b) for(int i=0;i<(b);i++)

using namespace std;

#define END 80000000
int A, B, L, posA, posB;
vector< pair<int, int> > a, b;

priority_queue<pair<int, pair<int, int> > > pq;

#define MAXN 3333
int dp[MAXN][MAXN];

void add(int t, int aa, int bb) {
  // printf("adding t=%d aa: %d bb: %d\n", t, aa, bb);
  if (t <= dp[aa][bb]) return;
  dp[aa][bb] = t;
  pq.push(make_pair(-t, make_pair(aa, bb)));
}

int main(int argc, char *argv[]) {
  int T;
  scanf("%d", &T);
  FOR(t, 1, T) {
    a.clear();
    b.clear();
    scanf("%d%d%d", &A, &B, &L);
    REP(i, A) {
      int l, r;
      scanf("%d%d", &l, &r);
      a.push_back(make_pair(l, r));
    }
    REP(i, B) {
      int l, r;
      scanf("%d%d", &l, &r);
      b.push_back(make_pair(l, r));
    }
    REP(i, A + 1) REP(j, B + 1) dp[i][j] = -1;
    sort(a.begin(), a.end());
    sort(b.begin(), b.end());
    posA = posB = 0;
    add(0, 0, 0);
    int ans = END, rightA = -1, rightB = -1;
    if (L > END) ans = 0;
    while (!pq.empty()) {
      int t = -pq.top().first, aa = pq.top().second.first, bb = pq.top().second.second;
      pq.pop();
      if (t + L > END) { ans = min(ans, max(aa, bb)); continue; }
      while (posA < A && a[posA].first < t + L) rightA = max(rightA, a[posA++].second);
      while (posB < B && b[posB].first < t + L) rightB = max(rightB, b[posB++].second);
      if (rightA > t) add(rightA, aa + 1, bb);
      if (rightB > t) add(rightB, aa, bb + 1);
    }
    printf("Case #%d: ", t);
    if (ans == END) printf("Lunchtime\n");
    else printf("%d\n", ans);
  }
  return 0;
}

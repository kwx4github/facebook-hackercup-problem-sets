import java.io.*;
import java.util.*;

public class LunchScheduling {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;
	
	static final int INF = Integer.MAX_VALUE / 2;

	static class Segm implements Comparable<Segm> {
		int from, to;

		public Segm(int from, int to) {
			this.from = from;
			this.to = to;
		}

		@Override
		public int compareTo(Segm o) {
			return Integer.compare(from, o.from);
		}
	}

	int[] getPref(Segm[] a) {
		int n = a.length;
		int[] ret = new int[n + 1];
		ret[0] = -1;
		for (int i = 0; i < n; i++) {
			ret[i + 1] = Math.max(ret[i], a[i].to);
		}
		return ret;
	}

	void solve() throws IOException {
		int n = nextInt();
		int m = nextInt();
		int x = nextInt();
		Segm[] a = new Segm[n];
		for (int i = 0; i < n; i++) {
			int low = nextInt();
			int high = nextInt();
			a[i] = new Segm(low, high);
		}
		Segm[] b = new Segm[m];
		for (int i = 0; i < m; i++) {
			int low = nextInt();
			int high = nextInt();
			b[i] = new Segm(low, high);
		}
		Arrays.sort(a); // how
		int[] maxA = getPref(a);
		Arrays.sort(b);
		int[] maxB = getPref(b);
		int[][] dp = new int[n + 1][m + 1];
		for (int i = 0; i <= n; i++) {
			Arrays.fill(dp[i], -1);
		}
		dp[0][0] = x;
		for (int i = 0; i <= n; i++)
			for (int j = 0; j <= m; j++) {
				if (i < n) {
					int can = getCan(a, maxA, dp[i][j]);
					if (can > dp[i][j] - x) {
						dp[i + 1][j] = Math.max(dp[i + 1][j], can + x);
					}
				}
				if (j < m) {
					int can = getCan(b, maxB, dp[i][j]);
					if (can > dp[i][j] - x) {
						dp[i][j + 1] = Math.max(dp[i][j + 1], can + x);
					}
				}
			}
		int ret = INF;
		for (int i = 0; i <= n; i++)
			for (int j = 0; j <= m; j++) {
				if (dp[i][j] != -1 && dp[i][j] > 80_000_000) {
					ret = Math.min(ret, Math.max(i, j));
				}
			}
		if (ret == INF) {
			out.println("Lunchtime");
		} else {
			out.println(ret);
		}
	}

	int getCan(Segm[] a, int[] maxPref, int time) {
		int low = -1; // < time
		int high = a.length; // >= time
		while (high - low > 1) {
			int mid = (low + high) >> 1;
			if (a[mid].from < time) {
				low = mid;
			} else {
				high = mid;
			}
		}
		return maxPref[low + 1];
	}

	LunchScheduling() throws IOException {
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "lunch_scheduling";
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new LunchScheduling();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
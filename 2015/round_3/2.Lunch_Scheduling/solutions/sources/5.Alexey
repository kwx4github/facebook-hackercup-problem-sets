#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <stack>
#include <sstream>
#include <cstring>
#include <numeric>
#include <ctime>

#define re return
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) ((int) (x).size())
#define rep(i, n) for (int i = 0; i < (n); i++)
#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)
#define y0 y32479
#define y1 y95874
#define fill(x, y) memset(x, y, sizeof(x))
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define unq(x) (x.resize(unique(all(x)) - x.begin()))
#define spc(i,n) " \n"[i == n - 1]

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef double D;
typedef long double LD;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;

template<class T> T abs(T x) { return x > 0 ? x : -x;}

int m;
int n;

int table[6200][6200];
int l;
vii v1, v2;
int t[6200];

int big = 100000;

bool l1(ii a, ii b) {
	if (a.fi != b.fi)
		re a.fi < b.fi;
	re a.se > b.se;
}

vii build(int k) {
	vii v;
	rep(i, k) {
		int x, y;
		cin >> x >> y;
		v.pb(mp(x, y));
	}
	sort(all(v), l1);
	vii ans;
	rep(i, sz(v)) {
		if (i == 0 || v[i].se > v[i - 1].se)
			ans.pb(v[i]);
	}
	re ans;
}

int bt = 80000000;

int getans(int d, int p) {
	int &ans = table[d + 3100][p];
	if (ans != -1)
		re ans;
	ans = big;
	int ct = t[p] + l;
	if (ct >= bt) {
		ans = abs(d);
		re ans;
	}
	int p1 = lower_bound(all(v1), mp(ct, bt + 1)) - v1.begin();
	if (p1 > 0 && v1[p1 - 1].se > t[p]) {
		p1--;
		int nt = v1[p1].se;
		int tmp = getans(d + 1, lower_bound(t, t + m, nt) - t);
		if (d < 0)
			tmp++;
		ans = min(ans, tmp);
	}
	p1 = lower_bound(all(v2), mp(ct, bt + 1)) - v2.begin();
	if (p1 > 0 && v2[p1 - 1].se > t[p]) {
		p1--;
		int nt = v2[p1].se;
		int tmp = getans(d - 1, lower_bound(t, t + m, nt) - t);
		if (d > 0)
			tmp++;
		ans = min(ans, tmp);
	}
	re ans;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);


	int tc;
	cin >> tc;
	rep(tt, tc) {
		cout << "Case #" << tt + 1 << ": ";

		int c1, c2;
		cin >> c1 >> c2 >> l;
		l--;
		v1 = build(c1);
		v2 = build(c2);

		m = 0;
		t[m++] = 0;
		rep(i, sz(v1))
			t[m++] = v1[i].se;
		rep(i, sz(v2))
			t[m++] = v2[i].se;
		sort(t, t + m);
		m = unique(t, t + m) - t;

		fill(table, -1);
		int ans = getans(0, 0);
		if (ans == big)
			cout << "Lunchtime" << endl;
		else
			cout << ans << endl;
	}



	re 0;
}

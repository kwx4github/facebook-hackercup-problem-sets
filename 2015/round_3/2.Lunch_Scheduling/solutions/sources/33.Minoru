package fhc15.r3;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class B implements Runnable {
	static final boolean PROD = true;
	static final int NTHREAD = 7;
	static String BASEPATH = "c:\\temp\\fhc\\r3\\";
//	static String BASEPATH = "/home/ec2-user/";
	
	static String INPATH = BASEPATH + "lunch_scheduling.txt";
	static String OUTPATH = INPATH.substring(0, INPATH.length()-4) + new SimpleDateFormat("-HHmmss").format(new Date()) + ".out";
	
	static String INPUT = "";
	
	int[][] js, ws;
	int L;
	
	public void read() // not parallelized
	{
		int n = ni(), m = ni();
		L = ni();
		js = new int[n][];
		ws = new int[m][];
		for(int i = 0;i < n;i++){
			js[i] = new int[]{ni(), ni()};
		}
		for(int i = 0;i < m;i++){
			ws[i] = new int[]{ni(), ni()};
		}
	}
	
	public void process() // parallelized!
	{
		Arrays.sort(js, new Comparator<int[]>() {
			public int compare(int[] a, int[] b) {
				return a[0] - b[0];
			}
		});
		Arrays.sort(ws, new Comparator<int[]>() {
			public int compare(int[] a, int[] b) {
				return a[0] - b[0];
			}
		});
		int n = js.length, m = ws.length;
		int[] jss = new int[n];
		int[] jreach = new int[n];
		for(int i = 0;i < n;i++){
			jss[i] = js[i][0]*2;
			jreach[i] = js[i][1];
		}
		for(int i = 1;i < n;i++){
			jreach[i] = Math.max(jreach[i], jreach[i-1]);
		}
		int[] wss = new int[m];
		int[] wreach = new int[m];
		for(int i = 0;i < m;i++){
			wss[i] = ws[i][0]*2;
			wreach[i] = ws[i][1];
		}
		for(int i = 1;i < m;i++){
			wreach[i] = Math.max(wreach[i], wreach[i-1]);
		}
		
		int[][] dp = new int[n+1][m+1];
		int I = 999999999;
		for(int i = 0;i < n+1;i++){
			Arrays.fill(dp[i], -999999999);
		}
		dp[0][0] = 0;
		
		int ret = I;
		for(int i = 0;i <= n;i++){
			for(int j = 0;j <= m;j++){
				if(dp[i][j] < 0)continue;
				if(dp[i][j] + L-1 >= 80000000){
					ret = Math.min(ret, Math.max(i, j));
				}
				int st = dp[i][j]+L-1;
				if(i < n){
					int jind = Arrays.binarySearch(jss, st*2+1);
					jind = -jind-2;
					if(jind >= 0){
						dp[i+1][j] = Math.max(dp[i+1][j], jreach[jind]);
					}
				}
				if(j < m){
					int wind = Arrays.binarySearch(wss, st*2+1);
					wind = -wind-2;
					if(wind >= 0){
						dp[i][j+1] = Math.max(dp[i][j+1], wreach[wind]);
					}
				}
			}
		}
		out.println(ret == I ? "Lunchtime" : ret);
	}
	
	public static void preprocess()
	{
	}
	
	Scanner in;
	PrintWriter out;
	StringWriter sw;
	int cas;
	static List<Status> running = new ArrayList<Status>();
	
	@Override
	public void run()
	{
		long S = System.nanoTime();
		// register
		synchronized(running){
			Status st = new Status();
			st.id = cas;
			st.S = S;
			running.add(st);
		}
		process();
		// deregister
		synchronized(running){
			for(Status st : running){
				if(st.id == cas){
					running.remove(st);
					break;
				}
			}
		}
		long G = System.nanoTime();
		
		if(PROD){
			System.err.println("case " + cas + " solved. [" + (G-S)/1000000 + "ms]");
			synchronized(running){
				StringBuilder sb = new StringBuilder("running : ");
				for(Status st : running){
					sb.append(st.id + ":" + (G-st.S)/1000000 + "ms, ");
				}
				System.err.println(sb);
			}
		}
	}
	
	private static class Status {
		public int id;
		public long S;
	}
	
	public B(int cas, Scanner in)
	{
		this.cas = cas;
		this.in = in;
		this.sw = new StringWriter();
		this.out = new PrintWriter(this.sw);
	}
	
	private int ni() { return Integer.parseInt(in.next()); }
	private long nl() { return Long.parseLong(in.next()); }
	private int[] na(int n) { int[] a = new int[n]; for(int i = 0;i < n;i++)a[i] = ni(); return a; }
	private double nd() { return Double.parseDouble(in.next()); }
	private void tr(Object... o) { if(!PROD)System.out.println(Arrays.deepToString(o)); }
	
	public static void main(String[] args) throws Exception
	{
		long start = System.nanoTime();
		
		ExecutorService es = Executors.newFixedThreadPool(NTHREAD);
		CompletionService<B> cs = new ExecutorCompletionService<B>(es);
		
		if(PROD){
			System.out.println("INPATH : " + INPATH);
			System.out.println("OUTPATH : " + OUTPATH);
		}
		Scanner in = PROD ? new Scanner(new File(INPATH)) : new Scanner(INPUT);
		PrintWriter out = PROD ? new PrintWriter(new File(OUTPATH)) : new PrintWriter(System.out);
		int n = in.nextInt();
		in.nextLine();
		
		preprocess();
		for(int i = 0;i < n;i++){
			B runner = new B(i+1, in);
			runner.read();
			cs.submit(runner, runner);
		}
		es.shutdown();
		String[] outs = new String[n];
		for(int i = 0;i < n;i++){
			B runner = cs.take().get(); // not ordered
			runner.out.flush();
			runner.out.close();
			outs[runner.cas-1] = runner.sw.toString();
		}
		for(int i = 0;i < n;i++){
			out.printf("Case #%d: ", i+1);
			out.append(outs[i]);
			out.flush();
		}
		
		long end = System.nanoTime();
		System.out.println((end - start)/1000000 + "ms");
		if(PROD){
			System.out.println("INPATH : " + INPATH);
			System.out.println("OUTPATH : " + OUTPATH);
		}
	}
}

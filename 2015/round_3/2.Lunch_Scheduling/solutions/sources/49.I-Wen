#include <bits/stdc++.h>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define PII pair<int,int>
#define VPII vector<pair<int,int> >
#define PLL pair<long long,long long>
#define F first
#define S second
typedef long long LL;
using namespace std;
const int MAX = 80000000;
const int SIZE = 1e5+10;
int A[SIZE],B[SIZE],C[SIZE],D[SIZE];
int d[SIZE],dn,dp[2][SIZE];
int far[3003][3003];
void fresh_ma(int &x,int v){
    x=max(x,v);
}
int get(int x){
    return lower_bound(d,d+dn,x)-d;
}
int main(){
    CASET{
        DRII(J,W);
        DRI(L);
        dn=0;
        d[dn++]=0;
        REP(i,J){
            RII(A[i],B[i]);
            d[dn++]=A[i];
            d[dn++]=B[i];
        }
        REP(i,W){
            RII(C[i],D[i]);
            d[dn++]=C[i];
            d[dn++]=D[i];
        }
        sort(d,d+dn);
        dn=unique(d,d+dn)-d;
        MS0(dp);
        REP(i,J){
            int it1=get(A[i]);
            fresh_ma(dp[0][it1],get(B[i]));
        }
        REP(i,W){
            int it1=get(C[i]);
            fresh_ma(dp[1][it1],get(D[i]));
        }
        REP(k,2)REPP(i,1,dn)fresh_ma(dp[k][i],dp[k][i-1]);
        MS1(far);
        far[0][0]=0;
        int an=MAX;
        REP(i,J+1)REP(j,W+1){
            if(far[i][j]<0)continue;
            if(far[i][j]+L>MAX)an=min(an,max(i,j));
            int it=upper_bound(d,d+dn,far[i][j]+L-1)-d-1;
            int nxt=d[dp[0][it]];
            fresh_ma(far[i+1][j],nxt);
            nxt=d[dp[1][it]];
            fresh_ma(far[i][j+1],nxt);
        }
        printf("Case #%d: ",case_n++);
        if(an==MAX)puts("Lunchtime");
        else printf("%d\n",an);
    }
    return 0;
}

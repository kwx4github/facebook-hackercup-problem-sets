#include<fstream>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<string>
#include<vector>
#include<list>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<functional>
#include<numeric>
using namespace std;
typedef pair<int, int> pii;
typedef long long ll;

namespace
{
	int ret;
	int dp[3005][3005];

	vector<int> xa, ya, xb, yb;

	int J, W, L;
	const static int T = 80000000;

	void parse(const vector<pii>& v, vector<int>& x, vector<int>& y)
	{
		x.clear();
		y.clear();

		int prev = -1;
		for (int i = 0; i < v.size(); ++i)
		{
			while (i + 1 < v.size() && v[i].first == v[i + 1].first)
				++i;

			if (v[i].second > prev)
			{
				x.push_back(v[i].first);
				y.push_back(v[i].second);
				prev = y.back();
			}
		}
	}

	void go(int i, int j)
	{
		int t = dp[i][j];
		if (t < 0)
			return;

		if (t + L > T)
		{
			ret = min(ret, max(i, j));
			return;
		}

		int latestStart = t + L - 1;

		int tooFarA = distance(xa.begin(), upper_bound(xa.begin(), xa.end(), latestStart));
		if (tooFarA > 0)
		{
			int newT = ya[tooFarA - 1];
			if (newT > t)
				dp[i + 1][j] = newT;
		}

		int tooFarB = distance(xb.begin(), upper_bound(xb.begin(), xb.end(), latestStart));
		if (tooFarB > 0)
		{
			int newT = yb[tooFarB - 1];
			if (newT > t)
				dp[i][j+1] = newT;
		}
	}
}

//int mainFHC15_R3_P2()
int main()
{
	ifstream fin("FHC\\lunch_scheduling.txt");
	ofstream fout("FHC\\lunch_scheduling_out.txt");	

	unsigned int numberOfCases;
	fin >> numberOfCases;

	for (unsigned int zz=1; zz<=numberOfCases; ++zz)
	{
		ret = 9999;
		memset(dp, -1, sizeof(dp));
		dp[0][0] = 0;

		fin >> J >> W >> L;
		vector<pii> vab(J), vcd(W);
		for (int i = 0; i < J; ++i)
			fin >> vab[i].first >> vab[i].second;
		for (int i = 0; i < W; ++i)
			fin >> vcd[i].first >> vcd[i].second;

		sort(vab.begin(), vab.end());
		sort(vcd.begin(), vcd.end());

		parse(vab, xa, ya);
		parse(vcd, xb, yb);

		J = xa.size();
		W = xb.size();

		for (int d = 0; d <= J + W; ++d)
		{
			for (int i = 0; i <= d && i <= J; ++i)
			{
				int j = d - i;
				if (j<0 || j > W) continue;
				go(i, j);
			}
		}

		fout << "Case #" << zz << ": ";
		if (ret == 9999)
		{
			fout << "Lunchtime" << endl;
		}
		else
		{
			fout << ret << endl;
		}
	}

	return 0;
}
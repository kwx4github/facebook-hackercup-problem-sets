#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 6001 + 3, N_ = 3000 + 3;

int n, m;
int L;
pt a[N], b[N];

inline bool read()
{
	if (!(cin >> n >> m)) return false;
	scanf("%d", &L);
	forn(i, n) scanf("%d%d", &a[i].x, &a[i].y);
	forn(i, m) scanf("%d%d", &b[i].x, &b[i].y);
	return true;
}

int szxs, xs[N];
int pa[N], pb[N];
int na[N], nb[N];
int z[N][N_];

inline void solve()
{
	szxs = 0;
	xs[szxs++] = L;
	forn(i, n) xs[szxs++] = a[i].y + L;
	forn(i, m) xs[szxs++] = b[i].y + L;
	sort(xs, xs + szxs);
	szxs = int(unique(xs, xs + szxs) - xs);
	forn(i, n) pa[i] = int(lower_bound(xs, xs + szxs, a[i].y + L) - xs);
	forn(i, m) pb[i] = int(lower_bound(xs, xs + szxs, b[i].y + L) - xs);

	forn(i, szxs)
	{
		na[i] = nb[i] = 0;
		forn(j, n) if (a[j].x < xs[i]) na[i] = max(na[i], pa[j]);
		forn(j, m) if (b[j].x < xs[i]) nb[i] = max(nb[i], pb[j]);
	}

	forn(i, szxs) forn(j, n + 1) z[i][j] = INF;

	//cerr << szxs << endl; forn(i, szxs) cerr << xs[i] << ' '; cerr << endl;

	z[0][0] = 0;

	const int MAX = 80 * 1000 * 1000;
	int ans = INF;
	forn(i, szxs)
		forn(j, n + 1)
		{
			if (z[i][j] > INF / 2) continue;
			//cerr << i << ' ' << j << ' ' << z[i][j] << endl;
			if (xs[i] > MAX) ans = min(ans, max(j, z[i][j]));
			if (na[i] > i) z[na[i]][j + 1] = min(z[na[i]][j + 1], z[i][j]);
			if (nb[i] > i) z[nb[i]][j] = min(z[nb[i]][j], z[i][j] + 1);
		}

	if (ans == INF) puts(" Lunchtime");
	else printf(" %d\n", ans);
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;
    
	int tc;
	cin >> tc;
	forn(t, tc)
	{
		printf("Case #%d:", t + 1);
		assert(read());
		solve();
		cerr << t + 1 << endl;
	}
	
    return 0;
}

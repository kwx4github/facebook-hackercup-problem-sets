#include <cstdio>
#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 3000 + 10;
const int INF = 80000000;

int n, m, l;
vector<pair<int, int> > va, vb;
int f[N][N];

int cmp(const pair<int, int> &a, const pair<int, int> &b)
{
	if (a.first != b.first) return a.first < b.first;
	return a.second > b.second;
}

void update(int &x, int id)
{
	x = max(x, id);
}

int getN0(int x)
{
	int id = lower_bound(va.begin(), va.end(), make_pair(x, -1)) - va.begin();
	return id - 1;
}

int getN1(int x)
{
	int id = lower_bound(vb.begin(), vb.end(), make_pair(x, -1)) - vb.begin();
	return id - 1;
}

void solve()
{
	cin >> n >> m >> l;
	{
		va.clear();
		for(int i = 0; i < n; ++ i) {
			int x, y;
			cin >> x >> y;
			va.push_back(make_pair(x, y));
		}
		sort(va.begin(), va.end(), cmp);
		int far = 0;
		vector<pair<int, int> > vec;
		for(int i = 0; i < n; ++ i) {
			if (va[i].second <= far) {
				continue;
			}
			vec.push_back(va[i]);
			far = va[i].second;
		}
		va = vec;
	}
	{
		vb.clear();
		for(int i = 0; i < m; ++ i) {
			int x, y;
			cin >> x >> y;
			vb.push_back(make_pair(x, y));
		}
		sort(vb.begin(), vb.end(), cmp);
		int far = 0;
		vector<pair<int, int> > vec;
		for(int i = 0; i < m; ++ i) {
			if (vb[i].second <= far) {
				continue;
			}
			vec.push_back(vb[i]);
			far = vb[i].second;
		}
		vb = vec;
	}

	if (l > INF) {
		cout << 0 << endl;
		return;
	}
	n = va.size();
	m = vb.size();
	
	memset(f, -1, sizeof f);
	f[0][0] = 0;

	int ret = INF;
	for(int i = 0; i <= n; ++ i) {
		for(int j = 0; j <= m; ++ j) {
			if (f[i][j] == -1) continue;
			if (f[i][j] + l > INF) {
				ret = min(ret, max(i, j));
			}
			int n0 = getN0(f[i][j] + l);
			if (n0 != -1) {
				update(f[i + 1][j], va[n0].second);
			}
			int n1 = getN1(f[i][j] + l);
			if (n1 != -1) {
				update(f[i][j + 1], vb[n1].second);
			}
		}
	}
	if (ret == INF) {
		cout << "Lunchtime" << endl;
		return;
	}
	cout << ret << endl;
}

int main()
{
	int t;
	cin >> t;
	for(int i = 0; i < t; ++ i) {
		printf("Case #%d: ", i + 1);
		solve();
	}
	return 0;
}

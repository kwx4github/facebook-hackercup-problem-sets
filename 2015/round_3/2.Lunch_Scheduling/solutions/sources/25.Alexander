#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <string.h>
#include <math.h>
#include <fstream>
#include <iostream>
using namespace std;
#define N 3010
#define K 80000100
struct T
{
	int a, b, f;
};
bool operator <(T x, T y) { return x.b<y.b; }
T g[2*N];
int d[2*N][N], f[K], J;
short w[N][1<<14];
void ins(int i, int v)
{
	for(i+=1<<13; i>0 && v<w[J][i]; w[J][i]=v, i>>=1);
}
int getm(int i, int j)
{
	int r=2*N;
	for(i+=1<<13, j+=1<<13; i<=j; i=(i+1)>>1, j=(j-1)>>1)
	{
		if(i&1) r=min(r, (int)w[J][i]);
		if(~j&1) r=min(r, (int)w[J][j]);
	}
	return r;
}
void solve()
{
	int n, k, i, j, l;
	scanf("%d%d%d", &n, &k, &l);
	if(l>80000000) { printf("0\n"); return; }
	if(n==0 && k==0) { printf("Lunchtime\n"); return; }
	for(i=0; i<n; scanf("%d%d", &g[i].a, &g[i].b), g[i].f=0, i++);
	for(i=n; i<n+k; scanf("%d%d", &g[i].a, &g[i].b), g[i].f=1, i++);
	sort(g, g+n+k);
	for(i=0; i<=n+k; i++)
		for(j=0; j<=n; d[i][j]=2*N, j++);
	int na=0, nb=0;
	int z=2*N;
	for(i=0; i<K; f[i]=-1, i++);
	for(i=0; i<n+k; i++)
		if(f[g[i].b]==-1) f[g[i].b]=i;
	for(i=K-2; i>=0; i--)
		if(f[i]==-1) f[i]=f[i+1];
	for(i=0; i<=n; i++)
		for(j=0; j<(1<<14); w[i][j]=2*N, j++);
	for(i=0; i<n+k; i++)
	{
		if(g[i].f) nb++;
		else na++;
		if(g[i].a<l)
		{
			if(!g[i].f) d[i][1]=0;
			else d[i][0]=1;
		}
		else
		{
			int p=g[i].a-l+1;
			if(p<0) p=0;
			p=f[p];
			if(g[i].f)
			{
				 for(j=0; j<=na; J=j, d[i][j]=getm(p, i-1)+1, j++);
			}
			else
			{
				for(j=1; j<=na; J=j-1, d[i][j]=getm(p, i-1), j++);
			}
		}
		for(j=0; j<=na; J=j, ins(i, d[i][j]), j++);
		if(g[i].b+l>80000000)
		{
			for(j=0; j<=na; z=min(z, max(d[i][j], j)), j++);
		}
	}
	if(z>=2*N) printf("Lunchtime\n");
	else printf("%d\n", z);
}
int main()
{
	int ts;
	scanf("%d", &ts);
	for(int t=1; t<=ts; t++)
	{
		printf("Case #%d: ", t);
		solve();
	}
	return 0;
}
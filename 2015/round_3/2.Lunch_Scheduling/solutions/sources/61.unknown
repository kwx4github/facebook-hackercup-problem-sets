// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

class range {
  struct Iterator {
    int val, inc;
    int operator*() {return val;}
    bool operator!=(Iterator& rhs) {return val < rhs.val;}
    void operator++() {val += inc;}
  };
  Iterator i, n;
public:
  range(int e) : i({0, 1}), n({e, 1}) {}
  range(int b, int e) : i({b, 1}), n({e, 1}) {}
  range(int b, int e, int inc) : i({b, inc}), n({e, inc}) {}
  Iterator& begin() {return i;}
  Iterator& end() {return n;}
};

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}

struct Range{
    int S, T;
    bool operator < (const Range& r) const {
        if(S != r.S) return S < r.S;
        return T < r.T;
    }
};
int find(const vector<Range>& rs, int P) {
    // rs[i].S < P
    int lb = 0, ub = rs.size();
    while(ub - lb > 1) {
        int k = (lb + ub) / 2;
        if(rs[k].S < P) {
            // [k, ub)
            lb = k;
        } else {
            ub = k;
        }
    }
    return lb;
}
void solve() {
    int J, W, L;
    cin >> J >> W >> L;
    vector<Range> rj;
    vector<Range> rw;
    REP(i, J) {
        Range r;
        cin >> r.S >> r.T;
        rj.push_back(r);
    }
    REP(i, W) {
        Range r;
        cin >> r.S >> r.T;
        rw.push_back(r);
    }

    J++; W++;
    rj.push_back({0, 0});
    rw.push_back({0, 0});

    sort(rj.begin(), rj.end());
    sort(rw.begin(), rw.end());

    vector<int> lj(J);
    lj[0] = rj[0].T;
    for(int i = 1; i < J; i++) lj[i] = max(lj[i-1], rj[i].T);

    vector<int> lw(W);
    lw[0] = rw[0].T;
    for(int i = 1; i < W; i++) lw[i] = max(lw[i-1], rw[i].T);

    const int LAST = 80000000;

    static int dp[3030][3030] = {};
    memset(dp, -1, sizeof(dp));
    dp[0][0] = 0;
    // cout << "lj:" << lj << endl;
    // cout << "lw:" << lw << endl;
    REP(x, J + 1) REP(y, W + 1) {
        if(dp[x][y] < 0) continue;
        const int lt = dp[x][y];
        // find largest rj[i].T s.t rj[i].S < lt + L
        int nltx = lj[find(rj, lt + L)];
        int nlty = lw[find(rw, lt + L)];
        // cout << "x: " << x << endl;
        // cout << "y: " << y << endl;
        // cout << "lt: " << lt << endl;
        // cout << "nltx: " << nltx << endl;
        // cout << "nlty: " << nlty << endl;
        // assert(nltx >= lt);
        // assert(nlty >= lt);
        if(x + 1 <= J && nltx > lt) {
            dp[x+1][y] = max(dp[x+1][y], nltx);
        }
        if(y + 1 <= W && nlty > lt) {
            dp[x][y+1] = max(dp[x][y+1], nlty);
        }
    }
    // LAST < dp[x][y] + L 
    int ans = INT_MAX;
    REP(x, J + 1) REP(y, W + 1) if(dp[x][y] >= 0 && LAST < dp[x][y] + L) ans = min(ans, max(x, y));
    if(ans < INT_MAX) {
        cout << ans << endl;
    } else {
        cout << "Lunchtime" << endl;
    }
}

int main(){
    iostream_init();
    int T;
    cin >> T;
    for(int testcase = 1; testcase <= T; testcase++) {
        cout << "Case #" << testcase << ": ";
        solve();
    }
    return 0;
}


/* vim:set foldmethod=marker: */


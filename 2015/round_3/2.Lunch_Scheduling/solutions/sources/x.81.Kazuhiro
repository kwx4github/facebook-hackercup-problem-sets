import core.thread;
import std.conv, std.stdio, std.string;
import std.algorithm, std.array, std.bigint, std.container, std.math, std.range, std.regex;

//	Input
class EOFException : Throwable { this() { super("EOF"); } }
string[] tokens;
string readToken() { for (; tokens.empty; ) { tokens = readln.split; if (stdin.eof) throw new EOFException; } auto token = tokens[0]; tokens.popFront; return token; }
int readInt() { return to!int(readToken); }
long readLong() { return to!long(readToken); }
real readReal() { return to!real(readToken); }

//	chmin/chmax
void chmin(T)(ref T t, in T f) { if (t > f) t = f; }
void chmax(T)(ref T t, in T f) { if (t < f) t = f; }

//	Pair
struct Pair(S, T) {
	S x; T y;
	int opCmp(    const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	int opCmp(ref const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	string toString() const { return "(" ~ to!string(x) ~ ", " ~ to!string(y) ~ ")"; }
}
auto pair(S, T)(inout(S) x, inout(T) y) { return Pair!(S, T)(x, y); }

//	Array
int binarySearch(T)(in T[] as, in bool delegate(T) test) { int low = -1, upp = as.length; for (; low + 1 < upp; ) { int mid = (low + upp) >> 1; (test(as[mid]) ? low : upp) = mid; } return upp; }
int lowerBound(T)(in T[] as, in T val) { return as.binarySearch((T a) { return (a <  val); }); }
int upperBound(T)(in T[] as, in T val) { return as.binarySearch((T a) { return (a <= val); }); }
T[] unique(T)(in T[] as) { T[] bs; foreach (a; as) if (bs.empty || bs[$ - 1] != a) bs ~= a; return bs; }



void prepare() {
	
}

class Solver : core.thread.Thread {
	int caseId;
	this(int caseId) {
		this.caseId = caseId;
		super(&main);
	}
	void main() {
		try {
			run;
			stderr.writeln("DONE  Case #", caseId);
		} catch (Throwable e) {
			stderr.writeln("ERROR Case #", caseId, ": ", e.msg);
		} finally {
			stderr.flush;
		}
	}
	
	static immutable T = 80_000_000;
	
	int[] N;
	long L;
	long[][] A, B;
	
	int ans;
	
	void run() {
		if (L > T) {
			ans = 0;
			return;
		}
debug{
writeln("T - L + 1 = ",T-L+1);
}
		long[] xs;
		xs ~= 0;
		foreach (s; 0 .. 2) {
			foreach (i; 0 .. N[s]) {
				long a = A[s][i] - L + 1;
				long b = B[s][i];
				chmax(a, 0L);
				chmin(b, T - L + 1);
				if (a < b) {
debug{
writeln(s," ",a," ",b);
}
					xs ~= b;
				}
			}
		}
		xs.sort();
		xs = xs.unique;
debug{
writeln("xs = ",xs);
}
		int[][] rs = new int[][](2, xs.length - 1);
		foreach (s; 0 .. 2) {
			rs[s][] = -1;
			foreach (i; 0 .. N[s]) {
				long a = A[s][i] - L + 1;
				long b = B[s][i];
				chmax(a, 0L);
				chmin(b, T - L + 1);
				if (a < b) {
					int aa = xs.lowerBound(a);
					int bb = xs.lowerBound(b);
					foreach (e; aa .. bb) {
						chmax(rs[s][e], bb);
					}
				}
			}
		}
debug{
writeln("rs = ",rs);
}
		int[][] dp = new int[][](xs.length, N[0] + 1);
		foreach (e; 0 .. xs.length) {
			dp[e][] = int.max;
		}
		dp[0][0] = 0;
		foreach (e; 0 .. xs.length - 1) foreach (p; 0 .. N[0] + 1) if (dp[e][p] < int.max) {
			if (rs[0][e] != -1) {
				chmin(dp[rs[0][e]][p + 1], dp[e][p]);
			}
			if (rs[1][e] != -1) {
				chmin(dp[rs[1][e]][p], dp[e][p] + 1);
			}
		}
		ans = int.max;
		foreach (p; 0 .. N[0] + 1) {
			chmin(ans, max(p, dp[xs.length - 1][p]));
		}
	}
	
	void input() {
		N = new int[2];
		foreach (s; 0 .. 2) {
			N[s] = readInt;
		}
		L = readLong;
		A = new long[][2];
		B = new long[][2];
		foreach (s; 0 .. 2) {
			A[s] = new long[N[s]];
			B[s] = new long[N[s]];
			foreach (i; 0 .. N[s]) {
				A[s][i] = readLong;
				B[s][i] = readLong;
			}
		}
	}
	
	void output() {
		writeln("Case #", caseId, ": ", (ans >= int.max) ? "Lunchtime" : ans.to!string);
		stdout.flush;
	}
}

void main(string[] args) {
	bool parallel = false;
	foreach (arg; args) if (arg == "-p") parallel = true;
	prepare;
	auto solvers = new Solver[readInt];
	foreach (caseId, ref solver; solvers) solver = new Solver(caseId + 1);
	if (parallel) {
		foreach (solver; solvers) solver.input, solver.start;
		foreach (solver; solvers) solver.join, solver.output;
	} else {
		foreach (caseId, solver; solvers) {
			solver.input;
			solver.run;
			solver.output;
			stderr.writeln("DONE  Case #", caseId + 1);
			stderr.flush;
		}
	}
}


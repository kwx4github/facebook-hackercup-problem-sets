#include <vector>
#include <cassert>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int inf = (int)1e9;
const int MAX = 80000000;

const int N = 6666;

int f[N][N];
pair <int, int> a[N], b[N];
int ar[N], br[N];

int main(int argc, char* argv[]) {
  int TEST_FROM = 0;
  int TEST_TO = 123456789;
  if (argc == 3) {
    sscanf(argv[1], "%d", &TEST_FROM);
    sscanf(argv[2], "%d", &TEST_TO);
  }
  freopen("in", "r", stdin);
  freopen("out", "w", stdout);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    fflush(stdout);
    int na, nb, L;
    scanf("%d %d %d", &na, &nb, &L);
    for (int i = 0; i < na; i++) {
      scanf("%d %d", &a[i].first, &a[i].second);
    }
    for (int j = 0; j < nb; j++) {
      scanf("%d %d", &b[j].first, &b[j].second);
    }
    sort(a, a + na);
    sort(b, b + nb);
    ar[0] = 0;
    for (int i = 0; i < na; i++) {
      ar[i + 1] = max(ar[i], a[i].second);
    }
    br[0] = 0;
    for (int i = 0; i < nb; i++) {
      br[i + 1] = max(br[i], b[i].second);
    }
    for (int i = 0; i <= na; i++) {
      for (int j = 0; j <= nb; j++) {
        f[i][j] = L - 1;
      }
    }
    for (int i = 0; i <= na; i++) {
      for (int j = 0; j <= nb; j++) {
        if (i < na) {
          int pos = upper_bound(a, a + na, make_pair(f[i][j], inf)) - a;
          int ft = ar[pos] + L - 1;
          if (ft > f[i + 1][j]) {
            f[i + 1][j] = ft;
          }
        }
        if (j < nb) {
          int pos = upper_bound(b, b + nb, make_pair(f[i][j], inf)) - b;
          int ft = br[pos] + L - 1;
          if (ft > f[i][j + 1]) {
            f[i][j + 1] = ft;
          }
        }
      }
    }
    int ans = inf;
    for (int i = 0; i <= na; i++) {
      for (int j = 0; j <= nb; j++) {
        if (f[i][j] >= MAX) {
          int cur = max(i, j);
          if (cur < ans) {
            ans = cur;
          }
        }
      }
    }
    if (ans == inf) {
      puts("Lunchtime");
    } else {
      printf("%d\n", ans);
    }
    fflush(stdout);
    fprintf(stderr, "test %d solved, time = %d ms\n", qq, clock());
  }
  return 0;
}

#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <queue>
#include <deque>
#include <cmath>
#include <ctime>
#include <stack>
#include <set>
#include <map>
#include <cassert>
#include <memory.h>
#include <sstream>

using namespace std;

#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()

typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair <int, int> pi;

void solve();


int gcd(int a, int b);

int main() {
	freopen("/Users/riad/ClionProjects/for-jhelper/input.txt", "r", stdin);
	#ifndef DEBUG
	freopen("/Users/riad/ClionProjects/for-jhelper/output.txt", "w", stdout);
	#endif
	clock_t start = clock();

	cout.sync_with_stdio(0);
	cout.precision(10);
	cout << fixed;
	cin.tie(0);
	int t = 1;
	cin >> t;
	for(int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
#ifdef YA
	cerr<<"\n\n\n"<<(clock() - start) / 1.0 / CLOCKS_PER_SEC<<"\n\n\n";
#endif
	return 0;
}


vector<int> intr;
map<int, int> go[2];
vector<int> rgo[2];
int L;

int get(int v) {
	return lower_bound(intr.begin(), intr.end(), v) - intr.begin();
}


vector<vector<int>> res;

int solve(int pos, int allowedL) {

	int& ans = res[allowedL][pos];
	if(ans != -1)
		return ans;
	if(allowedL < 0)
		return ans = 1000000000;
	if(pos == intr.size() - 1) {
		return ans = 0;
	}

	int mn = 1000000000;
	if(allowedL > 0 && rgo[0][pos] != pos) {
		mn = min(mn,solve(rgo[0][pos], allowedL - 1));
	}
	if(rgo[1][pos] != pos) {
		mn = min(mn,solve(rgo[1][pos], allowedL) + 1);
	}
	return ans = mn;
}

void solve() {

	intr.clear();
	go[0].clear();
	go[1].clear();
	int n[2];

	for(int i = 0; i < 2; ++i) {
		cin >> n[i];
	}


	cin >> L;
	for(int i = 0; i < 2; ++i) {
		for(int j = 0; j < n[i]; ++j) {
			int a, b;
			cin >> a >> b;
			b = min(b + L - 1, 80000000);
			go[i][a] = max(go[i][a], b);
			intr.push_back(a);
			intr.push_back(b);
		}
	}




	intr.push_back(0);
	intr.push_back(L - 1);
	intr.push_back(80000000);

	sort(all(intr));
	intr.erase(unique(all(intr)), intr.end());


	res.assign(n[0] + 1, vector<int>(intr.size(), -1));

	for(int i = 0; i < 2; ++i) {
		rgo[i].assign(intr.size(), 0);
		for(int j = 0; j < intr.size(); ++j) {
			rgo[i][j] = j;
			rgo[i][j] = max(get(go[i][intr[j]]), rgo[i][j]);
			if(j) {
				rgo[i][j] = max(rgo[i][j - 1], rgo[i][j]);
			}
		}
	}
	int ans = 1000000000;



	for(int i = 0; i <= n[0]; ++i) {

		//cout << i << ' ' << solve(0, i) << endl;
		ans = min(ans, max(i, solve(get(L - 1), i)));
	}

	if(ans == 1000000000) {
		cout << "Lunchtime" << endl;
	}
	else {
		cout << ans << endl;
	}






}

int gcd(int a, int b) {
	while(b) {
		a %= b;
		swap(a, b);
	}
	return abs(a);
}

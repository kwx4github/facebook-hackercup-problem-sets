#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define INF (1<<29)

int A,B,T;
int al[3010],ar[3010];
int bl[3010],br[3010];
int dp[3010][3010];

map <int, int> mpA,mpB;

int extend_A(int t){
	if(mpA.find(t) != mpA.end()) return mpA[t];
	int ans = t;
	int i;
	REP(i,A) if(al[i] <= t) ans = max(ans, ar[i]);
	return mpA[t] = ans;
}

int extend_B(int t){
	if(mpB.find(t) != mpB.end()) return mpB[t];
	int ans = t;
	int i;
	REP(i,B) if(bl[i] <= t) ans = max(ans, br[i]);
	return mpB[t] = ans;
}

void main2(void){
	int L,i,j;
	
	cin >> A >> B >> L;
	L--;
	T = 80000000 - L;
	T = max(T, 0);
	
	REP(i,A) cin >> al[i] >> ar[i];
	REP(i,B) cin >> bl[i] >> br[i];
	REP(i,A) al[i] -= L;
	REP(i,B) bl[i] -= L;
	
	REP(i,A) al[i] = min(max(al[i], 0), T);
	REP(i,A) ar[i] = min(max(ar[i], 0), T);
	REP(i,B) bl[i] = min(max(bl[i], 0), T);
	REP(i,B) br[i] = min(max(br[i], 0), T);
	
	mpA.clear();
	mpB.clear();
	
	REP(i,A+1) REP(j,B+1) dp[i][j] = 0;
	REP(i,A+1) REP(j,B+1){
		if(i != A){
			int tmp = extend_A(dp[i][j]);
			dp[i+1][j] = max(dp[i+1][j], tmp);
		}
		if(j != B){
			int tmp = extend_B(dp[i][j]);
			dp[i][j+1] = max(dp[i][j+1], tmp);
		}
	}
	
	int ans = INF;
	REP(i,A+1) REP(j,B+1) if(dp[i][j] == T) ans = min(ans, max(i, j));
	if(ans == INF){
		cout << "Lunchtime" << endl;
	} else {
		cout << ans << endl;
	}
}

///////////////////////////////////////////////////////////////////////////////////////

int main(void){
	int T,t;
	cin >> T;
	REP(t,T){
		printf("Case #%d: ", t+1);
		main2();
	}
	return 0;
}

#pragma comment(linker, "/STACK:200000000")
#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>
using namespace std;

typedef long long int64;
//#define double long double
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const double EPS = 1E-9;
const double EPS_ANG = 1E-16;
const double PI = acos((double)0) * 2;

#define forn(i, n)  for (int i = 0; i < int(n); ++i)
#define ford(i, n)  for (int i=int(n) - 1; i >= 0; --i)
#define fore(i, l, r)  for (int i = int(l); i < int(r); ++i)
#define all(a)  a.begin(), a.end()
#define fs  first
#define sc  second
#define mp  make_pair
#define pb  push_back


const int MAXN = 3100;
const int R = 80 * 1000 * 1000;


int n[2], l;
pair<int,int> a[2][MAXN];


void read() {
	cin >> n[0] >> n[1] >> l;
	forn(i, 2)
		forn(j, n[i])
			scanf("%d%d", &a[i][j].fs, &a[i][j].sc);
}


int d[MAXN][MAXN];
vector<int> jump_poses;
int jumps[2][4 * MAXN];

void precalc_jump() {
	jump_poses.clear();
	jump_poses.push_back(0);
	forn(t, 2)
		forn(i, n[t]) {
			jump_poses.pb(a[t][i].fs);
			jump_poses.pb(a[t][i].sc);
		}
	sort(all(jump_poses));
	jump_poses.erase(unique(all(jump_poses)), jump_poses.end());

	forn(t, 2)
		forn(i, jump_poses.size()) {
			jumps[t][i] = -INF;

			int pos = jump_poses[i];
			forn(j, n[t]) {
				if (a[t][j].fs < pos + l)
					jumps[t][i] = max(jumps[t][i], a[t][j].sc);
			}
		}
}

int jump(int pos, int tp) {
	int idx = int(lower_bound(all(jump_poses), pos) - jump_poses.begin());
	if (idx == (int)jump_poses.size() || jump_poses[idx] != pos)
		throw;
	return jumps[tp][idx];
}

void solve() {
	forn(i, n[0] + 1)
		forn(j, n[1] + 1)
			d[i][j] = -INF;
	d[0][0] = 0;

	precalc_jump();
	
	int ans = INF;
	forn(i, n[0] + 1)
		forn(j, n[1] + 1) {
			int pos = d[i][j];
			if (pos < 0)
				continue;
			if (R - pos < l) {
				ans = min(ans, max(i, j));
			}
			if (i < n[0]) {
				int nextpos = jump(pos, 0);
				d[i + 1][j] = max(d[i + 1][j], nextpos);
			}
			if (j < n[1]) {
				int nextpos = jump(pos, 1);
				d[i][j + 1] = max(d[i][j + 1], nextpos);
			}
		}

	if (ans == INF)
		puts("Lunchtime");
	else
		cout << ans << endl;
}


int main(int argc, char *argv[]) {
#ifdef SU2_PROJ
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif

	int test_to_execute = (argc == 2) ? atoi(argv[1]) : -1;

	int tests;
	cin >> tests;
	
	if (test_to_execute != -1 && !(1 <= test_to_execute && test_to_execute <= tests)) {
		cerr << "Requested test doesn't exist!" << endl;
		throw std::runtime_error("Requested test doesn't exist!");
	}

	for (int test = 1; test <= tests; ++test) {
		time_t start_time = clock();
		read();
		if (!cin)
			throw;
		if (test_to_execute != -1 && test != test_to_execute)
			continue;
		printf("Case #%d: ", test);
		solve();
		cerr << "Test #" << test << " done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
	}
}

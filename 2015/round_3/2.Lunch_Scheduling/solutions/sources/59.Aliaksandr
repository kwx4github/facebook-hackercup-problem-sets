#pragma comment(linker, "/stack:32000000")
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <cassert>
#include <string.h>
#include <ctime>

#define pb push_back
#define mp make_pair
#define PI 3.1415926535897932384626433832795
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;

void solve() {
	int J, V, L; scanf("%d%d%d", &J, &V, &L);
	vector<pii>	Jv(J);
	forn(i, J) scanf("%d%d", &Jv[i].X, &Jv[i].Y);
	sort(ALL(Jv));
	vector<int> mxJ(J);
	forn(i, J) {
		mxJ[i] = Jv[i].Y;
		if (i) mxJ[i] = max(mxJ[i], mxJ[i-1]);
	}
	vector<pii> Vv(V);
	forn(i, V) scanf("%d%d", &Vv[i].X, &Vv[i].Y);
	sort(ALL(Vv));
	vector<int> mxV(V);
	forn(i, V) {
		mxV[i] = Vv[i].Y;
		if (i) mxV[i] = max(mxV[i], mxV[i-1]);
	}
	vector<vector<int> > dp(J+1, vector<int>(V+1));
	const int cinf = 1000000010;
	int bestans = cinf;
	forn(i, J+1) forn(j, V+1) {

		int curval = dp[i][j];
		if (80000000-curval < L) bestans = min(bestans, max(i,j));

		if (i < J) {
			int tot = dp[i][j]+L;
			int ind = lower_bound(ALL(Jv), mp(tot,-1))-Jv.begin()-1;
			dp[i+1][j] = max(dp[i+1][j], dp[i][j]);
			if (ind >= 0) dp[i+1][j] = max(dp[i+1][j], mxJ[ind]);
		}

		if (j < V) {
			int tot = dp[i][j]+L;
			int ind = lower_bound(ALL(Vv), mp(tot,-1))-Vv.begin()-1;
			dp[i][j+1] = max(dp[i][j+1],dp[i][j]);
			if (ind >= 0) dp[i][j+1] = max(dp[i][j+1], mxV[ind]);
		}
	}
	if (bestans == cinf) printf("Lunchtime\n");
	else printf("%d\n", bestans);
}

int main()
{
//#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
//#endif
	int T; scanf("%d", &T); for (int tn = 1; tn <= T; ++tn) {
		cerr << tn << "\n";
		printf("Case #%d: ", tn);
		solve();
	}
	return 0;
}
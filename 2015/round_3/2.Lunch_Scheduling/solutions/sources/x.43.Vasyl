#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define INF (1 << 30)

int A[6 << 10];
int B[6 << 10];
int C[6 << 10];
int N[6 << 10][2];
int R[3 << 10][3 << 10];

int SolveTest(int test)
{
	int J, W, L;
	scanf("%d%d%d", &J, &W, &L);

	int i, j;
	VInt v;
	v.push_back(0);
	FOR(i, 0, J + W)
	{
		int a, b;
		scanf("%d%d", &a, &b);
		int c = i < J ? 0 : 1;

		A[i] = a;
		B[i] = b;
		C[i] = c;
		
		v.push_back(b);
	}

	sort(ALL(v));
	v.resize(unique(ALL(v)) - v.begin());

	int cnt = SIZE(v);

	FOR(i, 0, cnt)
	{
		int x = v[i] + L;
		int r[] = { 2, 2 };
		FOR(j, 0, J + W)
			if (A[j] < x && B[j] > r[ C[j] ])
				r[C[j]] = B[j];

		FOR(j, 0, 2)
			N[i][j] = lower_bound(ALL(v), r[j]) - v.begin();
	}

	CLEAR(R, -1);
	R[0][0] = 0;
	int res = INF;
	FOR(i, 0, J + 1)
		FOR(j, 0, W + 1)
		if (R[i][j] != -1)
		{
			int pos = R[i][j];
			int x = v[pos];
			if (x + L > 80000000)
				res = min(res, max(i, j));

			if (N[pos][0] != pos)
				R[i + 1][j] = max(R[i + 1][j], N[pos][0]);
			if (N[pos][1] != pos)
				R[i][j + 1] = max(R[i][j + 1], N[pos][1]);
		}

	if (res == INF)
		printf("Case #%d: Lunchtime\n", test + 1);
	else
		printf("Case #%d: %d\n", test + 1, res);

	return 0;
}

int main()
{
	freopen("b.in", "r", stdin);
	freopen("b.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

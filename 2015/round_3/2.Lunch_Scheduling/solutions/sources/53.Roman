#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"

const int inf = 100000;
const int MX = 80000000;
int n[2];
int L;
int x[2][10000];
int y[2][10000];
int dp2[2][10000];
int dp[7000][4000];
void solve() {
  scanf("%d %d %d", &n[0], &n[1], &L);    
  vector<int> xx;
  xx.pb(0);
  for (int j = 0; j < 2; j++) {
    for (int i = 0; i < n[j]; i++) {
      scanf("%d %d", &x[j][i], &y[j][i]);
      xx.pb(y[j][i]);
    }    
  }
  image(xx);
  for (int i = 0; i < sz(xx); i++) {
    for (int j = 0; j <= n[0]; j++) {
      dp[i][j] = inf;
    }
  }
  dp[0][0] = 0;
  for (int j = 0; j < 2; j++) {
    for (int i = 0; i < sz(xx); i++) {
      dp2[j][i] = -1;
      for (int k = 0; k < n[j]; k++) {
        if (x[j][k] < xx[i] + L) {
          dp2[j][i] = max(dp2[j][i], lower_bound(all(xx), y[j][k]) - xx.begin());
        }
      }
    }
  }
  int ans = inf;
  for (int i = 0; i < sz(xx); i++) {
    for (int j0 = 0; j0 <= n[0]; j0++) {
      int j1 = dp[i][j0];
      if (j1 == inf) continue;
      if (xx[i] + L > MX) {
        ans = min(ans, max(j0, j1));
      }
      int w0 = dp2[0][i];
      if (w0 > i) {
        dp[w0][j0 + 1] = min(dp[w0][j0 + 1], j1);
      }
      int w1 = dp2[1][i];
      if (w1 > i) {
        dp[w1][j0] = min(dp[w1][j0], j1 + 1);
      }
    }
  }
  if (ans == inf) {
    printf("Lunchtime\n");
  } else {
    printf("%d\n", ans);
  }
}

int main(){
  #ifdef home
  assert(freopen(problem_name".out","wt",stdout));
  assert(freopen(problem_name".in","rt",stdin));
  #endif
  int T;
  scanf("%d", &T);
  for (int ti = 1; ti <= T; ti++) {
    printf("Case #%d: ", ti);
    solve();
  }
  return 0;
}

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-7;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 12500;
const int tmax = 80* 1000 * 1000;

int j, w, l;
pii a[nmax], b[nmax];
int t[nmax];
int ra[nmax], rb[nmax];
int dp[nmax][3110];
int can[nmax][2];
int res;

void go(int &a, int b) {
	a = min(a, b);
}

void solve() {
	cin >> j >> w >> l;
	int n = 2;
	t[0] = 0;
	t[1] = tmax;
	res = max(j, w) + 1;
	forn(i, j) {
		scanf("%d %d", &a[i].fs, &a[i].sc);
		t[n++] = a[i].fs;
		t[n++] = a[i].sc;
	}
	forn(i, w) {
		scanf("%d %d", &b[i].fs, &b[i].sc);
		t[n++] = b[i].fs;
		t[n++] = b[i].sc;
	}
	sort(a, a + j);
	sort(b, b + w);
	sort(t, t + n);
	n = unique(t, t + n) - t;
	cerr << n << " " << w << " " << j << endl;
//		cerr << endl;
//	forn(i, n)
//		cerr << t[i] << " ";
//	cerr << endl;
	for (int i = 0; i <= n; i ++)
		for (int k = 0; k <= res; k ++)
			dp[i][j] = inf;
		
	for (int k = 0; k <= j; k ++) {
		ra[k] = lower_bound(t, t + n, a[k].sc) - t;
	}
	for (int k = 0; k <= w; k ++) {
		rb[k] = lower_bound(t, t + n, b[k].sc) - t;
	}

	
	for (int i = 0; i < n; i ++) {
		can[i][0] = i;
		can[i][1] = i;
		for (int k = 0; k <= j; k ++)
			if (a[k].fs - t[i] < l && a[k].sc > t[i])
				can[i][0] = max(can[i][0], ra[k]);
		for (int k = 0; k <= w; k ++)
			if (b[k].fs - t[i] < l && b[k].sc > t[i])
				can[i][1] = max(can[i][1], rb[k]);
	}
//	forn(i, n)
//		cerr << can[i][0] << " ";
//	cerr << endl;

//	forn(i, n)
//		cerr << can[i][1] << " ";
//	cerr << endl;


	for (int i = 0; i <= n; i ++)
		for (int k = 0; k <= w; k ++)
			dp[i][k] = inf;
		
	
	dp[0][0] = 0;	
	for (int i = 0; i < n; i ++)
		for (int k = 0; k <= j; k ++)
			if (dp[i][k] < inf) {
				go(dp[can[i][0]][k+1], dp[i][k]);
				go(dp[can[i][1]][k], dp[i][k] + 1);
			}
//	cerr << dp[2][1] << " " << dp[7][1] << endl;
//	cerr << res << endl;
	for (int i = 0; i < n; i ++)
		if (t[n-1] - t[i] < l)
		for (int k = 0; k <= j; k ++)
			res = min(res, max(dp[i][k], k));
	if (res == max(j, w) + 1)
		puts("Lunchtime");
	else
		cout << res << endl;
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);

	int tst;
	cin >> tst;
	forn(i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
	}
	

	return 0;
}

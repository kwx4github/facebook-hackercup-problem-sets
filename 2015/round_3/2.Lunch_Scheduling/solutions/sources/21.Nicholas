#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cstring>
#include <numeric>
using namespace std;
typedef long long ll;
#define F0(i,n) for (int i = 0; i < n; i++)
#define F1(i,n) for (int i = 1; i <= n; i++)
#define CL(a,x) memset(x, a, sizeof(x));
#define SZ(x) ((int)x.size())
const double eps = 1e-10;
const int inf = 1000000009;
int i, j, k, m, l;
const int M = 80000000;
const int N = 3005;
int ans;
int a[2][N], b[2][N], n[2], L;
int dp[N][N], dt[N][N], dv[N][N];
int nextb[2][2][N];

void check(int i, int j, int t, int v) {
	if (dp[i][j] < b[t][v]) {
		dp[i][j] = b[t][v];
		dt[i][j] = t;
		dv[i][j] = v;
	}
}

void solve() {
	F0(k, 2) {
		F0(i, n[k]) for (int j = i + 1; j < n[k]; j++) if (b[k][i] > b[k][j]) {
			swap(a[k][i], a[k][j]);
			swap(b[k][i], b[k][j]);
		}
	}

	F0(k, 2) F0(k2, 2) F0(i, n[k]) {
		int val = -1;
		nextb[k][k2][i] = -1;
		F0(j, n[k2]) if (a[k2][j] - b[k][i] < L && b[k2][j] > val) {
			val = b[k2][j];
			nextb[k][k2][i] = j;
		}
	}

	CL(-1, dp);

	F0(i, n[0]) if (a[0][i] < L) {
		check(1, 0, 0, i);
	}
	F0(i, n[1]) if (a[1][i] < L) {
		check(0, 1, 1, i);
	}

	ans = inf;
	for (int i = 0; i <= n[0]; i++)
	for (int j = 0; j <= n[1]; j++) if (dp[i][j] != -1) {
		// finish
		if (M - dp[i][j] < L) {
			ans = min(ans, max(i, j));
		}

		int t = dt[i][j];
		int v = dv[i][j];
		F0(k, 2) if (nextb[t][k][v] != -1) {
			check(i + (k == 0), j + (k == 1), k, nextb[t][k][v]);
		}
	}
}


int main() {
	freopen("b.in", "r", stdin);
	freopen("b.txt", "w", stdout);

	int tn; cin >> tn; F1(tt, tn) 
	{
		cin >> n[0] >> n[1] >> L;
		F0(k, 2) F0(i, n[k]) cin >> a[k][i] >> b[k][i];
		if (L > M) ans = 0; else solve();
		cout << "Case #" << tt << ": ";
		if (ans > inf / 2) cout << "Lunchtime" << endl; else cout << ans << endl;
	}
	return 0;
}

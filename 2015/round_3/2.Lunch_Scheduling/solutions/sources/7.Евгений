import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.max;
import static java.lang.Math.min;
import static java.lang.System.exit;
import static java.util.Arrays.sort;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class B {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static final int DAY = 80_000_000;
	
	static class Interval implements Comparable<Interval> {
		final int a, b;

		Interval(int a, int b) {
			this.a = a;
			this.b = b;
		}
		
		public int compareTo(Interval o) {
			return a - o.a;
		}
	}
	
	static void solve() throws Exception {
		int n = nextInt();
		int m = nextInt();
		int l = nextInt();
		Interval a[] = new Interval[n];
		Interval b[] = new Interval[m];
		for (int i = 0; i < n; i++) {
			a[i] = new Interval(nextInt(), nextInt());
		}
		for (int i = 0; i < m; i++) {
			b[i] = new Interval(nextInt(), nextInt());
		}
		if (l > DAY) {
			printCase();
			out.println(0);
			return;
		}
		int ans = Integer.MAX_VALUE;
		sort(a);
		sort(b);
		int dyn[] = new int[n + 1];
		int p1 = 0;
		int pos1 = 0;
		for (int i = 0; i < n; i++) {
			int maxb1 = pos1;
			while (p1 < n && a[p1].a < pos1 + l) {
				maxb1 = max(maxb1, a[p1].b);
				++p1;
			}
			dyn[i + 1] = maxb1;
			if (maxb1 + l > DAY) {
				ans = min(ans, i + 1);
			}
			pos1 = maxb1;
		}
		for (int i = 0; i < m; i++) {
			p1 = 0;
			int maxb1 = 0;
			int p2 = 0;
			int maxb2 = 0;
			for (int j = 0; j <= n; j++) {
				int pos2 = dyn[j];
				maxb2 = max(maxb2, pos2);
				while (p2 < m && b[p2].a < pos2 + l) {
					maxb2 = max(maxb2, b[p2].b);
					++p2;
				}
				dyn[j] = maxb2;
				if (j > 0) {
					pos1 = dyn[j - 1];
					maxb1 = max(maxb1, pos1);
					while (p1 < n && a[p1].a < pos1 + l) {
						maxb1 = max(maxb1, a[p1].b);
						++p1;
					}
					dyn[j] = max(maxb2, maxb1);
				}
				if (dyn[j] + l > DAY) {
					ans = min(ans, max(i + 1, j));
				}
			}
		}
		printCase();
		if (ans == Integer.MAX_VALUE) {
			out.println("Lunchtime");
		} else {
			out.println(ans);
		}
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
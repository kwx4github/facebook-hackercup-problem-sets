#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <utility>
#include <cmath>
#include <queue>
#include <map>
#define MAXN 6005
#define MAXT 80000000
#define MYINF 1000000000

using namespace std;

int main ()
{
	int T, iT;
	scanf("%d",&T);
	static pair<int, int> a[MAXN];
	static pair<int, int> b[MAXN];
	static int tc[MAXT+1];
	static int tb[MAXN];
	static int dp[MAXN][MAXN];
	for (iT = 0; iT < T; iT++)
	{
		priority_queue< pair<int, int> > qa;
		priority_queue< pair<int, int> > qb;

		int N, M, L;
		scanf("%d %d %d",&N,&M,&L);
		int i, j;
		for (i = 0; i <= MAXT; i++) tc[i] = -1;
		for (i = 0; i < N; i++)
		{
			scanf("%d %d",&(a[i].first),&(a[i].second));
			tc[a[i].second] = 0;
		}
		for (i = 0; i < M; i++)
		{
			scanf("%d %d",&(b[i].first),&(b[i].second));
			tc[b[i].second] = 0;
		}
		int TC = 1;
		tc[0] = 0;
		tb[0] = 0;
		for (i = 1; i <= MAXT; i++)
		{
			if (tc[i] == 0)
			{
				tc[i] = TC;
				tb[TC] = i;
				TC++;
			}
		}
		int res = MYINF;
		for (i = 0; i < TC; i++)
		{
			for (j = 0; j <= N; j++)
			{
				dp[i][j] = MYINF;
			}
		}
		dp[0][0] = 0;

		sort(a, a+N);
		sort(b, b+M);

		int posa = 0;
		int posb = 0;

		for (i = 0; i < TC; i++)
		{
			while ((posa < N) && (a[posa].first < (tb[i] + L)))
			{
				qa.push(make_pair(a[posa].second, a[posa].first));
				posa++;
			}
			while ((posb < M) && (b[posb].first < (tb[i] + L)))
			{
				qb.push(make_pair(b[posb].second, b[posb].first));
				posb++;
			}

			for (j = 0; j <= N; j++)
			{
				//if (dp[i][j] != MYINF) printf("dp[%d][%d] = %d\n",i,j,dp[i][j]);
				if ((tb[i] + L) > MAXT) res = min(res, max(j, dp[i][j]));
				if (i < (TC-1))
				{
					if (dp[i][j] != MYINF)
					{
						while ((!qa.empty()) && (qa.top().first < tb[i]))
						{
							qa.pop();
						}
						if (!qa.empty())
						{
							if (dp[i][j] < dp[tc[qa.top().first]][j+1]) dp[tc[qa.top().first]][j+1] = dp[i][j];
						}
						while ((!qb.empty()) && (qb.top().first < tb[i]))
						{
							qb.pop();
						}
						if (!qb.empty())
						{
							if ((dp[i][j] + 1) < dp[tc[qb.top().first]][j]) dp[tc[qb.top().first]][j] = dp[i][j] + 1;
						}
					}
				}
			}
		}

		printf("Case #%d: ",iT+1);
		if (res == MYINF) printf("Lunchtime\n");
		else printf("%d\n",res);
	}
	return 0;
}

#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second

const double pi = acos(-1.0);
const int size = 5000;
const int lsize = 100 * 1000 * 1000;
const int limit = 80 * 1000 * 1000;
const int inf = 1000 * 1000 * 1000;

int ans[size][size];
int john[lsize];
int wilson[lsize];
int n, m, len;

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int tc;
    scanf("%d", &tc);

    for (int tnum = 0; tnum < tc; tnum++) {
    	scanf("%d%d%d", &n, &m, &len);
    
    	for (int i = 0; i < lsize; i++) {
    		john[i] = 0;
    		wilson[i] = 0;
    	}
    	for (int i = 0; i < n; i++) {
    		int a, b;
    		scanf("%d%d", &a, &b);
    		john[a] = max(john[a], b + len - 1);
    	}
    	for (int i = 0; i < m; i++) {
    		int c, d;
    		scanf("%d%d", &c, &d);
    		wilson[c] = max(wilson[c], d + len - 1);
    	}

    	int c1 = 0, c2 = 0;
    	for (int i = 0; i < lsize; i++) {
    		c1 = max(c1, john[i]);
    		john[i] = c1;
    		c2 = max(c2, wilson[i]);
    		wilson[i] = c2;
    	}

    	for (int i = 0; i <= n; i++)
    		for (int j = 0; j <= m; j++)
    			ans[i][j] = len - 1;
    	for (int i = 0; i <= n; i++)
    		for (int j = 0; j <= m; j++) {
    			ans[i + 1][j] = max(ans[i + 1][j], john[ans[i][j]]);
    			ans[i][j + 1] = max(ans[i][j + 1], wilson[ans[i][j]]);
    		}
    	int best = inf;
    	for (int i = 0; i <= n; i++)
    		for (int j = 0; j <= m; j++)
    			if (ans[i][j] >= limit)
    				best = min(best, max(i, j));

    	if (best > inf / 2)
    		printf("Case #%d: Lunchtime\n", tnum + 1);
    	else
    		printf("Case #%d: %d\n", tnum + 1, best);

    	cerr << tnum << endl;
    }

    return 0;
}
#include <cassert>
#include <string>
#include <vector>
#include <set>
#include <iostream>
#include <algorithm>
#include <utility>
#include <map>
#include <cstdio>
#include <sstream>
#include <cmath>

using namespace std;

#define REP(a, b) for (int a = 0; a<(b); ++a)
#define FOR(a, b, c) for (int a = (b); a<=(c); ++a)
#define FORD(a, b, c) for (int a = (b); a>=(c); --a)
#define INIT(a, b) __typeof(b) a = (b)
#define FOREACH(a, v) for (INIT(a, (v).begin()); a!=(v).end(); ++a)
 
template<class T>
inline int size(const T&t){return t.size();}
 
typedef vector<string> vs;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef long long LL;

#define INF 1000000000
#define PB push_back
#define MP make_pair

////////////////////////////////

#define SIZE 3000

int N, D;
int tab[SIZE][2];
int p0[2];
int best;

struct cord {
    double dx, dy;
    cord(double x, double y) : dx(x), dy(y) {}
    cord() {}
};

inline bool operator<(const cord &a, const cord &b) {
    int cz0 = (a.dx<0 || (a.dx==0 && a.dy<0)) ? 0 : 1;
    int cz1 = (b.dx<0 || (b.dx==0 && b.dy<0)) ? 0 : 1;
    if (cz0<cz1) return 1;
    if (cz0>cz1) return 0;
    double il = a.dx*b.dy-a.dy*b.dx;
    if (abs(il)<0.00000000000000000001)
        return 0;
    return il<0;
}

inline bool operator==(const cord &a, const cord &b) {
    int cz0 = (a.dx<0 || (a.dx==0 && a.dy<0)) ? 0 : 1;
    int cz1 = (b.dx<0 || (b.dx==0 && b.dy<0)) ? 0 : 1;
    if (cz0<cz1) return 0;
    if (cz0>cz1) return 0;
    double il = a.dx*b.dy-a.dy*b.dx;
    if (abs(il)<0.00000000000000000001)
        return 1;
    return 0;
}

void probuj(int cel) {
    int ile = 0;
    int dx = tab[cel][0]-p0[0];
    int dy = tab[cel][1]-p0[1];
    REP(a, N) {
        int ex = tab[a][0]-p0[0];
        int ey = tab[a][1]-p0[1];
        int cz0 = (dx<0 || (dx==0 && dy<0)) ? 0 : 1;
        int cz1 = (ex<0 || (ex==0 && ey<0)) ? 0 : 1;
        if (cz0==cz1 && dx*ey==dy*ex && ex*ex+ey*ey<=D*D)
            ++ile;
    }
    if (!ile)
        return;
    double startx = p0[0]+dx*D/sqrt(dx*dx+dy*dy), 
           starty = p0[1]+dy*D/sqrt(dx*dx+dy*dy);
    vector<cord> wek;
    int sr = 0;
    REP(a, N) {
        int ex = tab[a][0]-p0[0];
        int ey = tab[a][1]-p0[1];
        int cz0 = (dx<0 || (dx==0 && dy<0)) ? 0 : 1;
        int cz1 = (ex<0 || (ex==0 && ey<0)) ? 0 : 1;
        if (cz0==cz1 && dx*ey==dy*ex && ex*ex+ey*ey==D*D)
            sr = 1;
        else
            wek.PB(cord(tab[a][0]-startx, tab[a][1]-starty)); 
    }
    best = max(best, sr*ile);
    sort(wek.begin(), wek.end()); 
    int i2 = 0; 
    REP(a, N) {
        if (a>0 && !(wek[a-1]==wek[a]))
            i2 = 0;
        ++i2;
        best = max(best, (i2+sr)*ile);
    }
}

void licz() {
    scanf("%d%d%d%d", p0, p0+1, &D, &N);
    REP(a, N)
        scanf("%d%d", tab[a], tab[a]+1);
    best = 0;
    REP(a, N)
        probuj(a);
    printf("%d\n", best);
}

int main() {
    int TT;
    scanf("%d", &TT);
    REP(tt, TT) {
        printf("Case #%d: ", (tt+1));
        licz();
    }
}

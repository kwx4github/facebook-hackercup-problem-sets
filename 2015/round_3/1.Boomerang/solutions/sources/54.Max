#include <cstdio>
#include <algorithm>
#include <cmath> 
#include <vector>
using namespace std;

struct vt
{
    double x, y;
    vt(double _x, double _y)
    {
        x = _x, y = _y;
    }
    friend vt operator +(vt a, vt b)
    {
        return vt(a.x + b.x, a.y + b.y);
    }
    friend vt operator -(vt a, vt b)
    {
        return vt(a.x - b.x, a.y - b.y);
    }
    vt(){}
    friend double operator ^(vt a, vt b)
    {
        return a.x * b.y - b.x * a.y;
    }
    friend double operator *(vt a, vt b)
    {
        return a.x * b.x + a.y * b.y;
    }
    friend bool operator <(vt a, vt b)
    {
        return atan2(a.y, a.x) + 1e-9 < atan2(b.y, b.x);
    }
};

const int N = 3050;

int X[N], Y[N];

vt P[N];



#define eprintf(...) fprintf(stderr, __VA_ARGS__)

void solve(int cs)
{
    int n, d;
    scanf("%d %d", &X[0], &Y[0]);
    scanf("%d %d", &d, &n);
    for (int i = 1; i <= n; i++)
    {
        scanf("%d %d", &X[i], &Y[i]);
        X[i] -= X[0];
        Y[i] -= Y[0];
        P[i] = vt(X[i], Y[i]);
    }
    X[0] = Y[0] = 0;
    int ans = 0;
    for (int i = 1; i <= n; i++)
    {
        int cnt = 0;
        for (int j = 1; j <= n; j++)
        {
            if (X[i] * Y[j] == X[j] * Y[i] && (X[i] * X[j] + Y[i] * Y[j] > 0) && (X[j] * X[j] + Y[j] * Y[j] <= d * d))
                cnt++;
        }
        if (cnt == 0)
            continue;
        vt v = vt(X[i], Y[i]);
        double norm = sqrt(v.x * v.x + v.y * v.y);
        v.x /= norm;
        v.y /= norm;
        v.x *= d;
        v.y *= d;
        //eprintf("trying %.2lf %.2lf\n", v.x, v.y);
        vector<vt> dir;
        int here = 0;
        for (int j = 1; j <= n; j++)
        {
            vt u = P[j] - v;
            if (max(fabs(u.x), fabs(u.y)) < 1e-7) {
                here++;
                continue;
            }
            double norm = sqrt(u.x * u.x + u.y * u.y);
            u.x /= norm;
            u.y /= norm;
            dir.push_back(u);
        }
        ans = max(ans, cnt * here);
        sort(dir.begin(), dir.end());
        int s = dir.size();
        for (int i = 0; i < s; i++)
            dir.push_back(dir[i]);
        for (int l = 0; l < 2 * s; )
        {
            int r = l;
            while (r < l + s && r != 2 * s && (fabs(dir[l] ^ dir[r]) < 1e-9 && dir[l] * dir[r] > 0))
                r++;
            ans = max(ans, cnt * (here + r - l));
            l = r;
        }
    }
    printf("Case #%d: %d\n", cs, ans);
    fflush(stdout);
}

int main()
{
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++)
    {
        solve(i + 1);
    }
}

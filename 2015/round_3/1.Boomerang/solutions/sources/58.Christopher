#ifdef DEBUG
	#define D(x...) fprintf(stderr,x);
#else
	#define D(x...) 0
#endif
#include <cstdio>
#include <cmath>
#include <cassert>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;

#define EPS 0.0000000000001
int N;
long double x_0, y_0;
long double x[4096], y[4096];
long double D;
#define eq(a,b) (abs((a)-(b)) < EPS)
#define sqr(x) ((x)*(x))

int main() {
    int nTests;
    scanf("%d ",&nTests);
    for (int test=1;test<=nTests;test++) {
        if (1) fprintf(stderr,"Case %d/%d\n",test,nTests);

        scanf("%Lf %Lf", &x_0, &y_0);
        scanf("%Lf", &D);
        scanf("%d", &N);
        for (int i = 0; i < N; i++) {
            scanf("%Lf %Lf", &x[i], &y[i]);
        }

        int best = 0;
        for (int i = 0; i < N; i++) {
            long double theta = atan2(y[i]-y_0, x[i]-x_0);
            int curA = 0;
            vector<pair<long double, int> > things;
            long double x_theta = x_0 + cos(theta)*D;
            long double y_theta = y_0 + sin(theta)*D;
            int baseB = 0;
            for (int j = 0; j < N; j++) {
                long double thetaJ = atan2(y[j]-y_0, x[j]-x_0);
                if (eq(thetaJ, theta) && sqrt(sqr(y[j]-y_0) + sqr(x[j]-x_0)) < D+EPS) {
                    curA++;
                }
                if (eq(x[j], x_theta) && eq(y[j], y_theta)) {
                    baseB++;
                    continue;
                }
                things.push_back(make_pair(atan2(y[j]-y_theta, x[j]-x_theta),j ));
            }
            if (curA < 1) continue;
            sort(things.begin(), things.end());
            int bestB = baseB;
            int val = baseB;
            long double thetaPrev = -9999;
            for (vector<pair<long double, int> >::iterator itr = things.begin(); itr != things.end(); itr++) {
                if (eq(itr->first, thetaPrev)) {
                    val++;
                } else {
                    val = baseB+1;
                }
                bestB = max(bestB, val);
                //
                thetaPrev = itr->first;
            }
            best = max(best, curA * bestB);
        }

        printf("Case #%d: %d\n", test, best);
    }
}

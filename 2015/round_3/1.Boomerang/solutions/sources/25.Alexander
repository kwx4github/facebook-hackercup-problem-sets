#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <string.h>
#include <math.h>
#include <fstream>
#include <iostream>
using namespace std;
#define eps 1E-10
struct P
{ 
	double x, y;
	P(double x=0, double y=0): x(x), y(y) {}
};
P operator +(P a, P b) { return P(a.x+b.x, a.y+b.y); }
P operator -(P a, P b) { return P(a.x-b.x, a.y-b.y); }
P operator *(P a, double b) { return P(a.x*b, a.y*b); }
double operator &(P a, P b) { return a.x*b.x+a.y*b.y; }
double operator *(P a, P b) { return a.x*b.y-a.y*b.x; }
double operator !(P a) { return sqrt(a&a); }
P operator ~(P a) { return P(-a.y, a.x); }
bool operator <(P a, P b) { return a.x+eps<b.x || (a.x-eps<b.x && a.y+eps<b.y); }
P operator |(P a, P b) { return b*((a&b)/(b&b)); }
P operator ^(P a, P b) { return (a|b)*2-a; }
#define N 3100
P p[N];
double w[N], PI=acos(-1.0);
double ang(double w)
{
	if(w>PI-eps) w=-PI;
	return w;
}
bool in(P a, P b, P c)
{
	if(fabs((a-b)*(c-b))<eps && ((a-b)&(a-c))<eps) return 1;
	else return 0;
}
void solve()
{
	int n, i, j, d;
	P s;
	scanf("%lf%lf", &s.x, &s.y);
	scanf("%d%d", &d, &n);
	for(i=0; i<n; scanf("%lf%lf", &p[i].x, &p[i].y), i++);
	int z=0;
	for(i=0; i<n; i++)
	{
		P v=(p[i]-s);
		v=v*(d/!v);
		v=s+v;
		int a=0;
		for(j=0; j<n; j++)
			if(in(p[j], s, v)) a++;
		int c=0;
		int k=0;
		for(j=0; j<n; j++)
			if(!(v-p[j])<eps) c++;
			else w[k++]=ang(atan2(v.y-p[j].y, v.x-p[j].x));
		sort(w, w+k);
		int b=0;
		int l;
		for(j=0; j<k; b=max(b, l), j+=l)
			for(l=1; j+l<k && w[j+l]-w[j+l-1]<eps; l++);
		z=max(z, (b+c)*a);
	}
	printf("%d\n", z);
}
int main()
{
	int ts;
	scanf("%d", &ts);
	for(int t=1; t<=ts; t++)
	{
		printf("Case #%d: ", t);
		solve();
	}
	return 0;
}
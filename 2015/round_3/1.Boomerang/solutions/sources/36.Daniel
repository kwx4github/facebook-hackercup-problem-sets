
#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <queue>
#include <algorithm>
#include <iostream>
#include <utility>
using namespace std;

#define TRACE(x...) x
#define WATCH(x) TRACE(cout << #x << " = " << x << endl)
#define PRINT(x...) TRACE(printf(x))

#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()

// If using C++11, change __typeof__ to decltype
#define _for(i, a, b) for (decltype(a) i = (a); i != (b); ++i)
#define foreach(x...) _for(x)
#define forall(i, v) foreach(i, all(v))
// If using C++11, change __typeof__ to decltype
#define FU(i, a, b) for(decltype(a) i = (a); i < (b); ++i)
#define fu(i, n) FU(i, 0, n)

#define mset(c, v) memset(c, v, sizeof(c))
#define mod(a, b) ((((a)%(b))+(b))%(b))
#define pb push_back
#define sz(c) int((c).size())
const int INF = 0x3F3F3F3F; const int NEGINF = 0xC0C0C0C0;

typedef long long ll;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;

int cmp(double x, double y = 0, double tol = 1.e-8) {
	return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1;
}

struct point { 
	double x, y;
	point(double x = 0, double y = 0): x(x), y(y) {}

	// Only type in the operators you actually need
	point operator +(point q) const { return point(x + q.x, y + q.y); }
	point operator -(point q) const { return point(x - q.x, y - q.y); }
	point operator *(double t) const { return point(x * t, y * t); }
	point operator /(double t) const { return point(x / t, y / t); }
	// dot product
	double operator *(point q) const { return x * q.x + y * q.y; }
	// "cross" product (actually "signed area of the quadrilateral"
	double operator %(point q) const { return x * q.y - y * q.x; }
	// uses "cmp" from the template
	int cmp(point q) const {
		if (int t = ::cmp(x, q.x)) return t;
		return ::cmp(y, q.y);
	}
	bool operator ==(point q) const { return cmp(q) == 0; }
	bool operator !=(point q) const { return cmp(q) != 0; }
	bool operator < (point q) const { return cmp(q) <  0; }
	
	friend ostream& operator <<(ostream& o, point p) {
		return o << "(" << p.x << ", " << p.y << ")";
	}
	
	static point pivot; // only needed for convex hull
};

point point::pivot; // only needed for convex hull

double abs(point p) { return hypot(p.x, p.y); }
double arg(point p) { return atan2(p.y, p.x); }

typedef vector<point> polygon;

// decides type of turn pqr. 1 if left, -1 if right, 0 if straight
inline int ccw(point p, point q, point r) {
	return cmp((p - r) % (q - r));
}

// angle of turn pqr
inline double angle(point p, point q, point r) {
	point u = p - q, v = r - q;
	return atan2(u % v, u * v);
}

////////////////////////////////////////////////////////////////////////////////
// Is q inside [p,r]? (all segments are closed)
// 

bool between(point p, point q, point r) {
	return ccw(p, q, r) == 0 && cmp((p - q) * (r - q)) <= 0;
}

////////////////////////////////////////////////////////////////////////////////
// Convex Hull! O(nlogn), *alters the input T*
//

bool radial_lt(point p, point q) {
	point P = p - point::pivot, Q = q - point::pivot;
	double R = P % Q;
	if (cmp(R)) return R > 0;
	return cmp(P * P, Q * Q) < 0;
}


int main() {
    int _42;
    scanf("%d", &_42);
    fu(_41, _42) {
				point orig;
				scanf("%lf %lf", &orig.x, &orig.y);
        printf("Case #%d:", _41+1);
				double D;
				int N;
				scanf("%lf %d", &D, &N);
				vector<point> V(N);
				for (auto& x : V) scanf("%lf %lf", &x.x, &x.y);
				auto V2 = V;
				int ans = 0;
				for (auto& x : V) {
					point dir = (x - orig)/abs(x - orig);
					point dest = orig + dir*D;
					int A = 0;
					for (auto &x2 : V) if (between(orig, x2, dest)) A++;
					int B = 0;
					point::pivot = dest;
					sort(all(V2), radial_lt);
					int cnt = 0, cnt2 = 0;
					fu(i, N) {
						if (cmp(abs(V2[i] - dest)) == 0) cnt2++;
						else if (i && cmp( arg(V2[i] - dest) - arg(V2[i-1] - dest)) == 0) cnt++;
						else cnt = 1;
						B = max(B, cnt+cnt2);
					}
					ans = max(ans, A*B);
				}
				printf(" %d\n", ans);
    }
    return 0;
}

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <stack>
#include <queue>
#include <deque>
#include <complex>

using namespace std;

#define pb push_back
#define mp make_pair
#define sz(s) int((s).size())
#define all(s) (s).begin(), (s).end()
#if ( _WIN32 || __WIN32__ || _WIN64 || __WIN64__ )
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif
#ifdef LOCAL42
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) 42
#endif
#define y0 yy0
#define y1 yy1
#define next _next
#define prev _prev
#define rank _rank
#define link _link
#define hash _hash
#define fs first
#define sc second

typedef long long ll;
typedef long long llong;
typedef long long int64;
typedef unsigned int uint;
typedef long double ld;
typedef unsigned long long ull;
typedef unsigned long long ullong;
typedef unsigned long long lint;
typedef pair<int, int> pii;
typedef vector<int> vi;

const int inf = int(1e9);
const double eps = 1e-7;
const double pi = 4 * atan(double(1));
const int N = 3030;

double x[N], y[N];
pair<double, int> ang1[N], ang2[N];

inline double sqr(double x) {
    return x * x;
}

inline double dist(double x1, double y1, double x2, double y2) {
    return sqr(x1 - x2) + sqr(y1 - y2);
}

inline bool eq(double a, double b) {
    return fabs(a - b) < eps;
}

inline bool lq(double a, double b) {
    return b - a > -eps;
}

inline void solve() {
    double x0, y0, d;
    int n;
    scanf("%lf %lf %lf %d", &x0, &y0, &d, &n);
    for (int i = 0; i < n; ++i) {
        scanf("%lf %lf", &x[i], &y[i]);
    }
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        ang1[i] = mp(atan2(y[i] - y0, x[i] - x0), i);
    }
    sort(ang1, ang1 + n);
    int i = 0;
    while (i < n) {
        int j = i;
        while (j + 1 < n && eq(ang1[j + 1].fs, ang1[j].fs)) {
            ++j;
        }
        int a = 0;
        for (int z = i; z <= j; ++z) {
            int num = ang1[z].sc;
            if (lq(dist(x0, y0, x[num], y[num]), sqr(d))) {
                ++a;
            }
        }
        int num = ang1[i].sc;
        double vx = x[num] - x0, vy = y[num] - y0;
        double len = sqrt(dist(0, 0, vx, vy));
        vx /= len;
        vy /= len;
        vx *= d;
        vy *= d;
        vx += x0;
        vy += y0;
        int sz = 0, add = 0;
        for (int z = 0; z < n; ++z) {
            if (eq(x[z], vx) && eq(y[z], vy)) {
                ++add;
                continue;
            }
            ang2[sz++] = mp(atan2(y[z] - vy, x[z] - vx), z);
        }
        ans = max(ans, a * add);
        sort(ang2, ang2 + sz);
        int z = 0;
        while (z < sz) {
            int h = z;
            while (h + 1 < sz && eq(ang2[h + 1].fs, ang2[h].fs)) {
                ++h;
            }
            ans = max(ans, a * (add + h - z + 1));
            z = h + 1;
        }
        i = j + 1;
    }
    printf("%d\n", ans);
}

int main() {
#ifdef LOCAL42
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        printf("Case #%d: ", i + 1);
        solve();
        cerr << "Test " << i << " of " << t << endl;
    }
    return 0;
}
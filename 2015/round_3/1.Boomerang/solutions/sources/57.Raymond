#include <bits/stdc++.h>
using namespace std;
int X[3005], Y[3005];
double DX[3005], DY[3005], MAG[3005];
const double EPS = 1e-9;
const double PI = acos(0) * 2;
bool eq(double a, double b) {
	return a - EPS < b && b < a + EPS;
}
struct cmp {
	bool operator()(double a, double b) {
		if (eq(a, b)) return false;
		return a < b;
	}
};
map<double, int, cmp> angles;
int main() {
	int TC;
	scanf("%d", &TC);
	for (int cn = 1; cn <= TC; ++cn) {
		int ans = 0, N, D;
		scanf("%d%d%d%d", &X[0], &Y[0], &D, &N);
		for (int i = 1; i <= N; ++i) {
			scanf("%d%d", &X[i], &Y[i]);
			DX[i] = X[i] - X[0];
			DY[i] = Y[i] - Y[0];
			MAG[i] = sqrt(DX[i] * DX[i] + DY[i] * DY[i]);
			DX[i] /= MAG[i];
			DY[i] /= MAG[i];
		}
		for (int i = 1; i <= N; ++i) {
			angles.clear();
			double dx = DX[i], dy = DY[i];
			double mag = MAG[i];
			double x = X[0] + D * dx;
			double y = Y[0] + D * dy;
			int cnt = 0, cnt2 = 0;
			for (int j = 1; j <= N; ++j) {
				double dx2 = DX[j], dy2 = DY[j];
				double mag2 = MAG[j];
				if (mag2 <= D + EPS && eq(dx2, dx) && eq(dy2, dy))
					++cnt;
			}
			int extra = 0;
			for (int j = 1; j <= N; ++j) {
				if (eq(Y[j], y) && eq(X[j], x)) {
					extra = 1;
					continue;
				}
				double ang = atan2(Y[j] - y, X[j] - x);
				if (eq(ang, -PI)) ang = PI;
				int v = ++angles[ang];
				cnt2 = max(cnt2, v);
			}
			ans = max(ans, cnt * (cnt2 + extra));
		}
		printf("Case #%d: %d\n", cn, ans);
	}
}


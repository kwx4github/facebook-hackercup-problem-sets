
#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

#define FI first
#define SE second
#define X first
#define Y second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back

typedef long long LL;
typedef vector<int> VI;
typedef long double LD;
typedef pair<int,int> PII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

LD getTime() {
	timeval tv;
	gettimeofday(&tv, NULL);
	return tv.tv_sec + tv.tv_usec * 1e-6;
}

const LD EPS = 1e-9;

bool is0(LD x) {
    return EPS > x && x > -EPS;
}

LD det(LD y2, LD x2, LD y1, LD x1, LD y0, LD x0) {
    return fabsl((y2 - y0) * (x1 - x0) - (y1 - y0) * (x2 - x0));
}

int alg() {
    int n, d;
    int my_x, my_y;
    cin >> my_x >> my_y;
    cin >> d >> n;
    vector<PII> v(n);
    REP (i, n) {
        cin >> v[i].X >> v[i].Y;
    }
    static LD dx[3005];
    static LD dy[3005];
    static LD dist[3005];
    REP (i, n) {
        dx[i] = v[i].X - my_x;
        dy[i] = v[i].Y - my_y;
        dist[i] = sqrtl(dx[i] * dx[i] + dy[i] * dy[i]);
        dx[i] /= dist[i];
        dy[i] /= dist[i];
    }
    int result = 0;
    REP (i, n) {
        LD x = my_x + dx[i] * d;
        LD y = my_y + dy[i] * d;
        vector<pair<LD, int>> angles;
        int to_path = 0;
        REP (j, n) {
            if (is0(dx[j] - dx[i]) && is0(dy[j] - dy[i]) && dist[j] <= d + EPS) {
                ++to_path;
            }
        }
        int p1 = 0;
        REP (j, n) {
            if (is0(x - v[j].X) && is0(y - v[j].Y)) {
                ++p1;
            } else {
                angles.PB(MP(atan2l(v[j].Y - y, v[j].X - x), j));
            }
        }
        sort(ALL(angles));
        int l = 0;
        result = max(result, to_path * p1);
        while (l < angles.size()) {
            int r = l;
            int sz = 1;
            while (true) {
                int j = (r + 1) % angles.size();
                if (j == l) {
                    break;
                }
                if (is0(det(v[angles[j].ND].Y, v[angles[j].ND].X, v[angles[r].ND].Y, v[angles[r].ND].X, y, x))) {
                    r = j;
                    ++sz;
                } else {
                    break;
                }
            }
            result = max(result, to_path * (p1 + sz));
            if (r < l) {
                break;
            }
            l = r + 1;
        }
    }
    return result;
}

int main() {
    int d;
    cin >> d;
    FOR (i, 1, d + 1) {
        cout << "Case #" << i << ": " << alg() << endl;
    }
}

import static java.lang.Double.NaN;
import static java.lang.Double.isNaN;
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.abs;
import static java.lang.Math.atan2;
import static java.lang.Math.cos;
import static java.lang.Math.max;
import static java.lang.Math.sin;
import static java.lang.System.exit;
import static java.util.Arrays.sort;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class A {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static int sqr(int a) {
		return a * a;
	}
	
	static final double EPS = 3e-10;
	
	static boolean eq(double a, double b) {
		return abs(a - b) <= EPS;
	}
	
	static void solve() throws Exception {
		int x0 = nextInt();
		int y0 = nextInt();
//		System.err.println("START " + x0 + " " + y0);
		int d = nextInt();
		int n = nextInt();
		int x[] = new int[n];
		int y[] = new int[n];
		double angle[] = new double[n];
		for (int i = 0; i < n; i++) {
			x[i] = nextInt();
			y[i] = nextInt();
			if (sqr(x[i] - x0) + sqr(y[i] - y0) <= sqr(d)) {
				angle[i] = atan2(y[i] - y0, x[i] - x0);
			} else {
				angle[i] = NaN;
			}
		}
		sort(angle);
		int ans = 0;
		double angle2[] = new double[n];
		for (int i = 0; i < n;) {
			if (isNaN(angle[i])) {
				break;
			}
			int j;
			for (j = i + 1; j < n && eq(angle[i], angle[j]); j++) { }
			double nx = x0 + d * cos(angle[i]);
			double ny = y0 + d * sin(angle[i]);
			int here = 0;
			for (int k = 0; k < n; k++) {
				if (eq(x[k], nx) && eq(y[k], ny)) {
					++here;
					angle2[k] = NaN;
				} else {
					angle2[k] = atan2(y[k] - ny, x[k] - nx);
				}
			}
//			System.err.println("GOTO " + nx + " " + ny + " " + (j - i) + " " + here);
			ans = max(ans, (j - i) * here);
			sort(angle2);
			for (int k = 0; k < n;) {
				if (isNaN(angle2[k])) {
					break;
				}
				int l;
				for (l = k + 1; l < n && eq(angle2[k], angle2[l]); l++) { }
				ans = max(ans, (j - i) * (here + l - k));
				k = l;
			}
			i = j;
		}
		printCase();
		out.println(ans);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
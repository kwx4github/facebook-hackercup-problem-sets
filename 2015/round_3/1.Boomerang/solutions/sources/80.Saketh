#include <iostream>
#include <vector>
#include <cmath>
#include <map>
using namespace std;

typedef long long ll;
const double PI = 3.141592653589793238;

int T, N;
double D, X0, Y0;
vector<pair<double, double> > targs;

bool eq(double a, double b){ return fabs(a-b) < 1e-7; }

pair<double, double> proj_orig(double ang, double dist){
    return make_pair(dist * cos(ang), dist * sin(ang));
}

ll find_best(double NX, double NY){
    bool free = false;
    
    vector<double> angs;
    for(pair<double, double> t : targs){
        if(eq(t.first, NX) && eq(t.second, NY)){ free = true; continue; }

        double theta = atan2(t.second - NY, t.first - NX);
        if(theta < 0) theta += 2 * PI; 
        angs.push_back(theta);
    }

    sort(angs.begin(), angs.end());

    ll B = 0, rl = 0, zc = 0;
    double th = 0;

    for(int i=0; i<angs.size(); i++){
        if(eq(angs[i], 0)) zc++;
        
        if(eq(angs[i], th)){
            B = max(B, ++rl);
        }
        else{
            B = max(B, rl = 1);
            th = angs[i];
        }
    }

    return free + max(B, zc);
}

int main(){
    cin >> T;

    for(int t=1; t<=T; t++){
        cin >> X0 >> Y0;
        cin >> D >> N;

        targs.clear();
        for(int i=0; i<N; i++){
            int X, Y;
            cin >> X >> Y;
            targs.emplace_back(X, Y);
        }

        ll ans = 0;

        for(int i=0; i<targs.size(); i++){
            ll A = 0;
            double ang = atan2(targs[i].second - Y0, targs[i].first - X0);

            for(int j=0; j<targs.size(); j++){
                double dx = targs[j].first - X0;
                double dy = targs[j].second - Y0;
                if(dx * dx + dy * dy > D * D) continue;

                if(eq(atan2(targs[j].second - Y0, targs[j].first - X0), ang))
                    A++;
            }

            pair<double, double> new_orig = proj_orig(ang, D);
            ans = max(ans, A * find_best(new_orig.first + X0, new_orig.second + Y0));
        }

        cout << "Case #" << t << ": " << ans << endl;
    }

    return 0;
}

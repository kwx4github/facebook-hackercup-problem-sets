#include <cstdio>
#include <vector>
#include <cmath>
#include <iostream>
#include <cstring>
#include <algorithm>

using namespace std;

const int N = 3000 + 10;
const long double EPS = 1e-9;
const long double PI = acos(-1.);

int sign(long double x)
{
	return x < -EPS ? -1 : x > EPS;
}

struct Point
{
	long double x, y;
	void read() {
		cin >> x >> y;
	}
	Point () {}
	Point(long double x, long double y) : x(x), y(y) {
	}
	long double dist2() {
		return x * x + y * y;
	}
	Point operator + (const Point &that) const {
		return Point(x + that.x, y + that.y);
	}
	Point operator - (const Point &that) const {
		return Point(x - that.x, y - that.y);
	}
	Point operator * (const long double &that) const {
		return Point(x * that, y * that);
	}
	Point operator / (const long double &that) const {
		return Point(x / that, y / that);
	}
	long double polar() {
		long double ret = atan2(y, x);
		if (sign(ret + PI) == 0) {
			ret = PI;
		}
		return ret;
	}
};

int n;
long double d;
Point a[N], s;

long double det(Point a, Point b)
{
	return a.x * b.y - a.y * b.x;
}

long double dot(Point a, Point b)
{
	return a.x * b.x + a.y * b.y;
}

int calc(Point s, Point t)
{
	int ret = 0;
	//cout << s.x << ' ' << s.y << endl;
	//cout << t.x << ' ' << t.y << endl;
	//cout << a[0].x << ' ' << a[0].y << endl;
	for(int i = 0; i < n; ++ i) {
		//cout << "now is " << i << endl;
		//cout << det(t - s, a[i] - s) << endl;
		//cout << dot(t - s, a[i] - s) << endl;
		//cout << dot(t - s, a[i] - t) << endl;
		if (sign(det(t - s, a[i] - s)) == 0 && sign(dot(t - s, a[i] - s)) * sign(dot(t - s, a[i] - t)) <= 0) {
			++ ret;
			//cout << "!" << i << ' ' << dot(t - s, a[i] - t) << ' ' << dot(t - s, a[i] - s) << endl;
		}
	}
	return ret;
}

int calc(Point s)
{
	vector<long double> vec;
	int ret = 0;
	for(int i = 0; i < n; ++ i) {
		if (sqrt((a[i] - s).dist2()) < EPS) {
			++ ret;
			continue;
		}
		vec.push_back((a[i] - s).polar());
	}
	sort(vec.begin(), vec.end());
	int b = 0;
	for(int i = 0, j; i < vec.size(); i = j) {
		for(j = i; j < vec.size() && sign(vec[j] - vec[i]) == 0; ++ j) {
		}
		b = max(b, j - i);
	}
	return b + ret;
}

void solve()
{
	s.read();
	cin >> d;
	cin >> n;
	for(int i = 0; i < n; ++ i) {
		a[i].read();
	}

	int ret = 0;
	for(int i = 0; i < n; ++ i) {
		double len = sqrt((a[i] - s).dist2());
		if (sign(len - d) <= 0) {
			Point b = s - (s - a[i]) / len * d;
			ret = max(ret, calc(s, b) * calc(b));
			//cout << b.x << ' ' << b.y << endl;
			//cout << i << ' ' << calc(s, b) << ' ' << calc(b) << endl;
		}
	}
	cout << ret << endl;
}

int main()
{
	int t;
	cin >> t;
	for(int i = 0; i < t; ++ i) {
		printf("Case #%d: ", i + 1);
		solve();
	}
	return 0;
}

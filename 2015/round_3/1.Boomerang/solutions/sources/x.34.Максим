#pragma comment(linker, "/STACK:200000000")
#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>
using namespace std;

typedef long long int64;
#define double long double
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const double EPS = 1E-9;
const double EPS_ANG = 1E-16;
const double PI = acos((double)0) * 2;

#define forn(i, n)  for (int i = 0; i < int(n); ++i)
#define ford(i, n)  for (int i=int(n) - 1; i >= 0; --i)
#define fore(i, l, r)  for (int i = int(l); i < int(r); ++i)
#define all(a)  a.begin(), a.end()
#define fs  first
#define sc  second
#define mp  make_pair
#define pb  push_back


const int MAXN = 3100;


struct pt {
	double x, y;

	bool operator<(pt p) const {
		return x < p.x - EPS || abs(x - p.x) < EPS && y < p.y;
	}
	bool operator==(pt p) const {
		return abs(x - p.x) < EPS && abs(y - p.y) < EPS;
	}
};


pt start;
double d;
int n;
pt p[MAXN];


void read() {
	cin >> start.x >> start.y;
	cin >> d >> n;
	forn(i, n)
		cin >> p[i].x >> p[i].y;
}

bool between(double l, double r, double v) {
	return min(l, r) <= v + EPS && v <= max(l, r) + EPS;
}

int calc_points(pt from, pt to) {
	double a = from.y - to.y;
	double b = to.x - from.x;
	double c = - a * from.x - b * from.y;
	double zn = sqrt(a * a + b * b);

	int res = 0;
	forn(i, n) {
		double dst = (a * p[i].x + b * p[i].y + c) / zn;
		if (abs(dst) < EPS && between(from.x, to.x, p[i].x) && between(from.y, to.y, p[i].y)) {
			++res;
		}
	}
	return res;
}

void solve() {
	int ans = 0;
	forn(i, n) {
		pt vec = { p[i].x - start.x, p[i].y - start.y };
		if (abs(vec.x) < EPS && abs(vec.y) < EPS)
			continue;

		double veclen = sqrt(vec.x * vec.x + vec.y * vec.y);
		double veccoeff = d / veclen;
		vec.x *= veccoeff;
		vec.y *= veccoeff;

		pt mid = { start.x + vec.x, start.y + vec.y };
		int cnt_a = calc_points(start, mid);

		int c0 = 0;
		vector<pt> v;
		forn(j, n) {
			pt vec2 = { p[j].x - mid.x, p[j].y - mid.y };
			double len2 = sqrt(vec2.x * vec2.x + vec2.y * vec2.y);
			if (abs(len2) < EPS) {
				++c0;
				continue;
			}

			vec2.x /= len2;
			vec2.y /= len2;

			v.pb(vec2);
		}

		sort(all(v));
		forn(i, v.size()) {
			int j = i;
			while (i < (int)v.size() && v[i] == v[j])
				++i;
			
			int cnt_b = i - j + c0;
			ans = max(ans, cnt_a * cnt_b);
			
			--i;
		}
	}

	if (!ans)
		ans = n * n;
	cout << ans << endl;
}


int main(int argc, char *argv[]) {
#ifdef SU2_PROJ
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif

	int test_to_execute = (argc == 2) ? atoi(argv[1]) : -1;

	int tests;
	cin >> tests;
	
	if (test_to_execute != -1 && !(1 <= test_to_execute && test_to_execute <= tests)) {
		cerr << "Requested test doesn't exist!" << endl;
		throw std::runtime_error("Requested test doesn't exist!");
	}

	for (int test = 1; test <= tests; ++test) {
		time_t start_time = clock();
		read();
		if (!cin)
			throw;
		if (test_to_execute != -1 && test != test_to_execute)
			continue;
		printf("Case #%d: ", test);
		solve();
		cerr << "Test #" << test << " done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
	}
}

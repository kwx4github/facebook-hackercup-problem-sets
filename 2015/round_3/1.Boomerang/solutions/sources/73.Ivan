#include<iostream>
#include<cmath>
#include<algorithm>
#include<string>
#include<string.h>
#include<vector>
#include<set>
#include<map>
#include<cstdio>
#include<queue>
#include<sstream>
#include<list>
#include<bitset>
#include<ctime>
using namespace std;

typedef long long Int;
#define FOR(i,a,b) for(int i=(a); i<=(b);++i)
#define mp make_pair
#define pb push_back
#define sz(s) (int)((s).size())
const int inf = 1000000000;
const int MOD = 1000000007;
const double pi=acos(-1.0);

namespace Geometry{
	typedef double pdouble;
	const pdouble PI = acos(-1.0);
	const pdouble EPS = 1e-9;

	inline bool Equals(pdouble a,pdouble b){ return abs(a-b) < EPS; }
	inline bool More(pdouble a,pdouble b){ return a > b+EPS; }
	inline bool Less(pdouble a,pdouble b){ return a+EPS < b; }
	//inline bool NotMore(pdouble &a,pdouble &b){ return !More(a,b); }
	//inline bool NotLess(pdouble &a,pdouble &b){ return !Less(a,b); }

	struct Point{
		pdouble x,y;
		Point(pdouble _x=0,pdouble _y=0):x(_x),y(_y){}
		pdouble DistanceTo(Point b){
			return sqrt(0.0+(x-b.x)*(x-b.x)+(y-b.y)*(y-b.y));
		}
		pdouble AngleTo(Point b){
			double xx = b.x-x,yy=b.y-y;
			if(Equals(xx,0) && Equals(yy,0))return -1.0;
			if(Equals(xx,0)){
				if(yy>0)return PI/2;return 1.5*PI;
			}
			if(Equals(yy,0)){
				if(xx>0)return 0;return PI;
			}
			if(xx>0){
				if(yy>0)return atan(yy/xx);
				return atan(-xx/yy)+1.5*PI;
			}
			if(yy>0)return PI/2+atan(-xx/yy);
			return PI+atan(yy/xx);
		}
		bool operator<(const Point b)const {
			return Less(x,b.x) || Equals(x,b.x) && Less(y,b.y);
		}
		bool operator==(const Point b)const {
			return Equals(x,b.x) && Equals(y,b.y);
		}
	};
	istream& operator>>(istream &in,Point &a){
		in>>a.x>>a.y;
		return in;
	}
	ostream& operator<<(ostream &out,Point &a){
		printf("%.3lf %.3lf\n",a.x,a.y);
		return out;
	}

	inline pdouble square_2(Point &a,Point &b,Point &c){
		return (b.x-a.x)*(c.y-a.y) - (c.x-a.x)*(b.y-a.y);
	}

	inline pdouble square(Point &a,Point &b,Point &c){
		return abs(square_2(a,b,c))/2.0;
	}

	inline bool cw(Point &a,Point &b,Point &c){
		return square_2(a,b,c)<0;
	}

	struct Line{
		pdouble a,b,c;
		Line(pdouble _a=0,pdouble _b=0,pdouble _c=0):a(_a),b(_b),c(_c){}
		Line(Point A,Point B){
			a=B.y-A.y,b=A.x-B.x,c=-(A.x*a+A.y*b);
		}
		inline void normalize(){
			pdouble s = sqrt(0.0+a*a+b*b);
			a/=s,b/=s,c/=s;
		}

		/*pdouble AnglePolar(){
		if(Equals(a,0.0))return PI/2;
		return atan(1.0*-b/a);
		}*/

		Point Any(){
			if(Equals(b,0.0))
				return Point(1.0*-c/a,0);
			return Point(0,1.0*-c/b);
		}
	};

	struct Segment{
		Point start,finish;
		Segment(Point _start,Point _finish):start(_start),finish(_finish){}
		inline pdouble length_2(){
			return (start.x-finish.x)*(start.x-finish.x)+(start.y-finish.y)*(start.y-finish.y);
		}
		inline pdouble length(){
			return sqrt(this->length_2()+0.0);
		}
	};

	struct Polygon{
		vector<Point> p;
		Polygon(vector<Point>_p){
			p.resize(int(_p.size()));
			for(int i=0;i<(int)_p.size();++i)p[i]=_p[i];
		}

		pdouble square(){
			pdouble ans = 0;
			for(int i=1;i<=(int)p.size();++i){
				int I = (i>=(int)p.size()?i-p.size():i);
				ans+=(p[i-1].y+p[I].y)*(p[I].x-p[i-1].x);
			}
			return abs(ans)/2.0;
		}

		Polygon convexHull(){
			int n=(int)p.size();
			if(n<=2)return Polygon(p);
			sort(p.begin(),p.end());
			int cnt = 0;
			vector<Point> q(n * 2);
			for (int i = 0; i < n; q[cnt++] = p[i++])
				for (; cnt >= 2 && !cw(q[cnt - 2], q[cnt - 1], p[i]); --cnt);
			for (int i = n - 2, t = cnt; i >= 0; q[cnt++] = p[i--])
				for (; cnt > t && !cw(q[cnt - 2], q[cnt - 1], p[i]); --cnt);
			q.resize(cnt - 1 - (q[0] == q[1]));
			return Polygon(q);
		}
	};

	struct Ray{
		Point start,finish;
		pdouble dx,dy;
		Ray(Point a,Point b){
			start=a;finish=b;
			dx=b.x-a.x,dy=b.y-a.y;
		}
	};

	inline pdouble PointDistanceToLine(Point p,Line l){
		return abs(l.a*p.x+l.b*p.y+l.c)/sqrt(l.a*l.a+l.b*l.b);
	}

	inline Line bisector(Point v,Point p1,Point p2){
		double dx1=p1.x-v.x,dy1=p1.y-v.y,dx2=p2.x-v.x,dy2=p2.y-v.y;
		Point o(0,0);
		double ang = (o.AngleTo(Point(dx1,dy1)) + o.AngleTo(Point(dx2,dy2)))/2.0;
		Point v2 = Point(v.x+cos(ang),v.y+sin(ang));
		return Line(v,v2);
	}

	inline pdouble AngleBetweenVectors(Point a,Point b,Point c){
		pdouble phi1 = a.AngleTo(b),
			phi2 = a.AngleTo(c);
		double phi = max(phi1,phi2)-min(phi1,phi2);
		return min(phi,2*PI-phi);
	}

	inline bool PointOnLine(Point p,Line l){
		return Equals(0.0,p.x*l.a+p.y*l.b+l.c);
	}

	inline bool PointOnSegment(Point p,Segment s){
		return PointOnLine(p,Line(s.start,s.finish)) && !Less(p.x,min(s.start.x,s.finish.x)) && !More(p.x,max(s.start.x,s.finish.x)) &&
			!Less(p.y,min(s.start.y,s.finish.y)) && !More(p.y,max(s.start.y,s.finish.y));
	}

	int intersect(Line l1,Line l2,Point &place){
		double d = l1.a*l2.b-l1.b*l2.a,
			dx=l1.c*l2.b-l1.b*l2.c,
			dy=l1.a*l2.c-l1.c*l2.a;
		if(Equals(d,0.0)){
			if(Equals(dx,0.0) && Equals(dy,0.0))return -1;
			return 0;
		}else{
			place=Point(-dx/d,-dy/d);
			return 1;
		}
	}

	bool intersect(Segment s1,Segment s2,Point &place){
		if(s2.start==s2.finish)swap(s1,s2);
		if(s1.start==s1.finish){
			if(PointOnSegment(s1.start,s2)){
				place=s1.start;
				return true;
			}else return false;
		}
		int tmp = intersect(Line(s1.start,s1.finish),Line(s2.start,s2.finish),place);
		if(tmp==0)return false;
		if(tmp==1){
			return PointOnSegment(place,s1) && PointOnSegment(place,s2);
		}
		if(PointOnSegment(s1.start,s2)){place=s1.start;return true;}
		if(PointOnSegment(s1.finish,s2)){place=s1.finish;return true;}
		if(PointOnSegment(s2.start,s1)){place=s2.start;return true;}
		if(PointOnSegment(s2.finish,s1)){place=s2.finish;return true;}
		return false;
	}

	inline pdouble PointDistanceToRay(Point p,Ray r){
		pdouble ans = p.DistanceTo(r.start);
		if(AngleBetweenVectors(r.start,r.finish,p)<=PI/2)ans=min(ans,PointDistanceToLine(p,Line(r.start,r.finish)));
		return ans;
	}

	inline pdouble PointDistanceToSegment(Point p,Segment s){
		pdouble ans = min(p.DistanceTo(s.start),p.DistanceTo(s.finish));
		if(AngleBetweenVectors(s.start,p,s.finish)<=PI/2 && AngleBetweenVectors(s.finish,p,s.start)<=PI/2)
			ans=min(ans,PointDistanceToLine(p,Line(s.start,s.finish)));
		return ans;
	}

	pdouble SegmentDistanceToSegment(Segment a,Segment b){
		Point cross;
		bool common = intersect(a,b,cross);
		if(common)return 0.0;
		double ans=PointDistanceToSegment(a.start,b);
		ans=min(ans,PointDistanceToSegment(a.finish,b));
		ans=min(ans,PointDistanceToSegment(b.start,a));
		ans=min(ans,PointDistanceToSegment(b.finish,a));
		return ans;
	}

	pair<Line,Line> LineGetParalel(Line l,pdouble d){
		Point any = l.Any();
		pdouble dx = d*l.a/sqrt(l.a*l.a+l.b*l.b),dy=d*l.b/sqrt(l.a*l.a+l.b*l.b);
		Point p1(any.x+dx,any.y+dy);pdouble c1 = -(p1.x*l.a+p1.y*l.b);
		Point p2(any.x-dx,any.y-dy);pdouble c2 = -(p2.x*l.a+p2.y*l.b);
		return make_pair(Line(l.a,l.b,c1),Line(l.a,l.b,c2));
	}

	inline bool PointOnRay(Point p,Ray r){
		return PointDistanceToRay(p,r)<=EPS; 
	}

	pdouble PointValueOf(Point p,Line l){
		l.normalize();
		pdouble ans = (p.x*l.a+p.y*l.b+l.c);
		if(Equals(ans,0))return 0;
		return ans;
	}

	pdouble RayDistanceToRay(Ray r1,Ray r2){
		pdouble ans = PointDistanceToRay(r1.start,r2);
		ans=min(ans,PointDistanceToRay(r2.start,r1));
		Point place;
		int cross = intersect(Line(r1.start,r1.finish),Line(r2.start,r2.finish),place);
		if(cross==0)return ans;
		if(cross==1){
			if(PointOnRay(place,r1) && PointOnRay(place,r2))ans=0.0;
			return ans;
		}

		if(!Less(r1.dx*r2.dx,0) && !Less(r1.dy*r2.dy,0)){
			ans=0;
		}else{
			if(PointOnRay(r1.start,r2))ans=0;
		}
		return ans;
	}
}

using namespace Geometry;

const int N = 3003;
double D;
Point pt[N+1];
int n;

int main() {
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);


	int tests;cin>>tests;
	for(int testcase=1; testcase<=tests; ++testcase) {
		cin>>pt[0];
		cin>>D;
		cin>>n;
		FOR(i,1,n) cin>>pt[i];

		int ans=0;
		FOR(i,1,n) {
			pdouble ang = pt[0].AngleTo(pt[i]);
			Point B(pt[0].x+cos(ang)*D, pt[0].y+D*sin(ang));
			Segment s(pt[0], B);

			int k1=0;
			FOR(j,1,n) if(PointOnSegment(pt[j], s)) ++k1;

			vector<pdouble> all(n);
			FOR(j,1,n) all[j-1]=(B.AngleTo(pt[j]));
			sort(all.begin(), all.end());
			
			int k2=0;
			int cur=1;
			FOR(j,1,sz(all)) {
				if(j==sz(all) || abs(all[j]-all[j-1])>1e-8) k2=max(k2, cur), cur=1;else cur++;
			}
			if(all[0]<0) ++k2;

			ans=max(ans, k1*k2);

			
		}
		cerr<<testcase<<endl;
		cout<<"Case #"<<testcase<<": ";
		cout<<ans<<endl;
	}
}
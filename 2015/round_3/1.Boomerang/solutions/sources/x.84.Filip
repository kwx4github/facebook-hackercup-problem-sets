/* Written by Filip Hlasek 2015 */
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstring>

#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define REP(i,b) for(int i=0;i<(b);i++)

using namespace std;

#define MAXN 3333
int D, X[MAXN], Y[MAXN], N;

long long cross(long long x1, long long y1, long long x2, long long y2) {
  return x1 * y2 - x2 * y1;
}

bool colinear(int x1, int y1, int x2, int y2, int x3, int y3) {
  return cross(x2 - x1, y2 - y1, x3 - x1, y3 - y1);
}

int Dist(int x1, int y1, int x2, int y2) {
  return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
}

#define EPS 1e-10
bool EQ(double a, double b) { return abs(a - b) < EPS; }

class Vector {
  public:
    double x, y;
    Vector(double _x = 0, double _y = 0) : x(_x), y(_y) {}
    Vector operator +(Vector a) const { return Vector(x + a.x, y + a.y); }
    Vector operator +=(Vector a) { return *this = *this + a; }
    Vector operator -(Vector a) const { return Vector(x - a.x, y - a.y); }
    Vector operator -=(Vector a) { return *this = *this - a; }
    Vector operator *(double p) const { return Vector(x * p, y * p); }
    Vector operator *=(double p) { return *this = *this * p; }
    bool operator <(const Vector a) const { return EQ(x, a.x) ? y < a.y : x < a.x; }
    bool operator ==(const Vector a) const { return EQ(x, a.x) && EQ(y, a.y); }
    double len() const { return sqrt(x * x + y * y); }
    double angle() const { return atan2(x, y); }
};

double len(Vector a) { return a.len(); }
double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }
double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }

Vector points[MAXN];

int main(int argc, char *argv[]) {
  int T;
  scanf("%d", &T);
  FOR(t, 1, T) {
    int x0, y0;
    scanf("%d%d", &x0, &y0);
    Vector start(x0, y0);
    scanf("%d%d", &D, &N);
    REP(i, N) { scanf("%d%d", X + i, Y + i); points[i] = Vector(X[i], Y[i]); }
    int best = 0;
    REP(i, N) {
      if (points[i] == start) { best = max(best, 1); continue; }
      int A = 0;
      REP(j, N) if (
        EQ(cross(start - points[i], start - points[j]), 0) &&
        len(start - points[j]) - EPS <= D &&
        dot(start - points[i], start - points[j]) >= -EPS
      ) A++;
      // printf("i: %d A: %d\n", i, A);
      int B = 0;
      double d = len(start - points[i]);
      Vector v = start + (points[i] - start) * (D / d);
      // printf("%lf %lf\n", v.x, v.y);
      map<Vector, int> m;
      REP(j, N) {
        Vector w = points[j] - v;
        if (points[j] == v) B++;
        else {
          w = w * (1 / w.len());
          // printf("\tw: %lf %lf\n", w.x, w.y);
          m[w]++;
        }
      }
      for (map<Vector, int>::iterator it = m.begin(); it != m.end(); ++it) {
        best = max(best, A * (B + it->second));
      }
    }
    printf("Case #%d: %d\n", t, best);
  }
  return 0;
}

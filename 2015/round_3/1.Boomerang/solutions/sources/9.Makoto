#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define eps 1.0E-9

int N;
int x[3010],y[3010];

int func(double cx, double cy, int center){
	int i,j;
	
	vector <double> v;
	REP(i,N) if(i != center){
		double dx = x[i] - cx;
		double dy = y[i] - cy;
		double theta = atan2(dy, dx);
		while(theta < 1.0) theta += 2.0 * acos(-1.0);
		v.push_back(theta);
	}
	
	sort(v.begin(),v.end());
	
	int sz = v.size();
	int ans = 0;
	
	i = 0;
	while(i < sz){
		int j = i;
		while(j+1 < sz && v[j+1] - v[j] < eps) j++;
		ans = max(ans, j-i+1);
		i = j + 1;
	}
	
	return ans + ((center == -1) ? 0 : 1);
}

void main2(void){
	int D,i,j;
	
	int x0,y0;
	cin >> x0 >> y0 >> D >> N;
	REP(i,N) cin >> x[i] >> y[i];
	REP(i,N){
		x[i] -= x0;
		y[i] -= y0;
	}
	
	int ans = 0;
	REP(i,N) if(x[i] * x[i] + y[i] * y[i] <= D * D){
		int cnt = 0;
		REP(j,N) if(x[j] * x[j] + y[j] * y[j] <= D * D && x[i] * x[j] + y[i] * y[j] >= 0 && x[i] * y[j] == x[j] * y[i]) cnt++;
		int center = -1;
		REP(j,N) if(x[j] * x[j] + y[j] * y[j] == D * D && x[i] * x[j] + y[i] * y[j] >= 0 && x[i] * y[j] == x[j] * y[i]) center = j;
		double ratio = D / hypot(x[i], y[i]);
		int tmp = func(ratio * x[i], ratio * y[i], center);
		ans = max(ans, tmp * cnt);
	}
	
	cout << ans << endl;
}

///////////////////////////////////////////////////////////////////////////////////////

int main(void){
	int T,t;
	cin >> T;
	REP(t,T){
		printf("Case #%d: ", t+1);
		main2();
	}
	return 0;
}

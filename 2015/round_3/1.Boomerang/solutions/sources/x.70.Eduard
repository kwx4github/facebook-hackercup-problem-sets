#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <utility>
#include <cmath>
#define MAXN 3005

using namespace std;

struct Coord
{
	long double x, y;

	bool operator<(const Coord &n) const {
        int sign;
        if (y < 0.0) sign = -1;
        else if (y > 0.0) sign = 1;
        else sign = 0;
        int nsign;
        if (n.y < 0.0) nsign = -1;
        else if (n.y > 0.0) nsign = 1;
        else nsign = 0;
        if (sign == nsign)
        {
        	return (x * n.y - y * n.x) > 0;
        }
        else return sign < nsign;
    }

};

int main ()
{
	int T, iT;
	scanf("%d",&T);
	static int x[MAXN];
	static int y[MAXN];
	static Coord a[MAXN];
	int ac;
	for (iT = 0; iT < T; iT++)
	{
		int x0, y0;
		scanf("%d %d",&x0,&y0);
		int D;
		scanf("%d",&D);
		int N;
		scanf("%d",&N);
		int i;
		for (i = 0; i < N; i++)
		{
			scanf("%d %d",&(x[i]),&(y[i]));
		}
		int res = 0;
		for (i = 0; i < N; i++)
		{
			int A = 0; int B;
			int vx = x[i] - x0;
			int vy = y[i] - y0;

			for (int j = 0; j < N; j++)
			{
				int tx = x[j] - x0;
				int ty = y[j] - y0;

				if ((vx * ty - vy * tx) == 0)
				{
					if (((tx) * (tx) + (ty) * (ty)) <= (D * D))
					{
						if ((vx * tx + vy * ty) >= 0) A++;
					}
				}
			}

			//printf("%d: %d\n",i,A);

			if (A)
			{
				int onPoint = 0;
				long double t = (long double)(D) / sqrt((long double)(vx * vx + vy * vy));
				Coord start;
				start.x = (long double)(x0) + t * (long double)(vx);
				start.y = (long double)(y0) + t * (long double)(vy);

				ac = 0;
				for (int j = 0; j < N; j++)
				{
					if (sqrt((start.x - (long double)(x[j])) * (start.x - (long double)(x[j])) + (start.y - (long double)(y[j])) * (start.y - (long double)(y[j]))) <= 1E-9) onPoint++;
					else
					{
						a[ac].x = (long double)(x[j]) - start.x;
						a[ac].y = (long double)(y[j]) - start.y;
						ac++;
					}
				}
				sort(a,a+ac);
				int k1 = 0;
				while (true)
				{
					int k2 = (k1 + 1) % ac;
					while ((k2 != k1) && (fabs(a[k1].x * a[k2].y - a[k1].y * a[k2].x) <= 1E-9)) k2 = (k2 + 1) % ac;
					int temp = (k2 - k1 + ac) % ac;
					if (temp == 0) temp = ac;

					B = onPoint + temp;
					if ((A*B) > res) res = A*B;

					if (k2 <= k1) break;
					k1 = k2;
				}
			}
		}
		printf("Case #%d: %d\n",iT+1,res);
	}
	return 0;
}

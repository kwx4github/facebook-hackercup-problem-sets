#include <math.h>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <sstream>
#include <set>
using namespace std;

int solve() {
  int x0, y0;
  cin >> x0 >> y0;
  int D;
  cin >> D;
  int N;
  cin >> N;
  vector<int> x(N), y(N);
  for (int i=0; i<N; i++)
    cin >> x[i] >> y[i];

  int res = 0;
  for (int i=0; i<N; i++) {
    int d2 = (x[i]-x0)*(x[i]-x0) + (y[i]-y0)*(y[i]-y0);
    if (d2 > D*D) continue;

    int c1 = 0;
    for (int j=0; j<N; j++) {
      if (i == j) { c1 ++; continue; }
      int dd = (x[j]-x0)*(x[j]-x0) + (y[j]-y0)*(y[j]-y0);
      if (dd > D*D) continue;
      if ((x[i]-x0)*(y[j]-y[i]) != (y[i]-y0)*(x[j]-x[i])) continue;
      if (x0 < x[i]) {
        if (x[j] <= x0) continue;
        c1 ++;
      } else if (x0 > x[i]) {
        if (x[j] >= x0) continue;
        c1 ++;
      } else if (y0 < y[i]) {
        if (y[j] <= y0) continue;
        c1 ++;
      } else {
        if (y[j] >= y0) continue;
        c1 ++;
      }
    }

    int c2 = 0;
    double x1 = x0 + (x[i]-x0) * D / sqrt(d2);
    double y1 = y0 + (y[i]-y0) * D / sqrt(d2);
//    printf("%d %d -> %d %d -> %f %f\n", x0, y0, x[i], y[i], x1, y1);
    vector<double> D;
    for (int j=0; j<N; j++) {
      double yy = y[j]-y1;
      double xx = x[j]-x1;
      if (fabs(yy) + fabs(xx) < 1e-9) {
        c2 ++;
        continue;
      }
      D.push_back(atan2(y[j]-y1, x[j]-x1));
    }

    sort(D.begin(), D.end());
    int sz = D.size();
    const double PI = 3.1415926535897932384626;
    for (int i=0; i<sz; i++) D.push_back(D[i] + 2*PI);

    int plus = 0, seq = 0;
    for (int i=0; i<D.size(); i++) {
      if (i == 0 || D[i]-D[i-1] < 1e-9) seq ++; else seq = 1;
      plus = max(plus, seq);
    }
//    printf("%d %d+%d\n", c1, c2, plus);
    c2 += plus;
    res = max(res, c1*c2);

    res = max(res, c2);
  }

  return res;
}

int main()
{
  int T;
  cin >> T;
  for (int tt=1; tt<=T; tt++) {
    printf("Case #%d: %d\n", tt, solve());
  }
}

#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second

const double pi = acos(-1.0);

const int size = 10 * 1000;
const double eps = 1e-8;
const double eps2 = 1e-12;

inline double sqr(double x) {
	return x * x;
}

struct point {
	double x, y;

	point(double x_ = 0.0, double y_ = 0.0): x(x_), y(y_) {}

	double dist(const point& p) const {
		return sqrt(sqr(p.x - x) + sqr(p.y - y));
	}

	void read() {
		scanf("%lf%lf", &x, &y);
	}

	void norm() {
		double k = sqrt(sqr(x) + sqr(y));
		x /= k;
		y /= k;
	}
};

point operator + (const point& a, const point& b) {
	return point(a.x + b.x, a.y + b.y);
}

point operator - (const point& a, const point& b) {
	return point(a.x - b.x, a.y - b.y);
}

point operator * (const point& a, double k) {
	return point(a.x * k, a.y * k);
}

bool operator == (const point& a, const point& b) {
	return fabs(a.x - b.x) < eps && fabs(a.y - b.y) < eps;
}

bool operator != (const point& a, const point& b) {
	return fabs(a.x - b.x) > eps || fabs(a.y - b.y) > eps;
}

point pts[size];
int n, tc;
bool used[size];

bool onseg(const point& a, const point& b, const point& p) {
	return a.dist(p) + b.dist(p) - a.dist(b) < eps;
}

bool comp(double a, double b) {
	return a + eps2 < b;
}

bool eq(double a, double b) {
	return fabs(a - b) < eps2;
}

int tryans(point vec) {
    for (int i = 0; i < n; i++)
    	used[i] = false;
    int a = 0, b = 0;
    for (int i = 0; i < n; i++) {
    	if (onseg(point(0.0, 0.0), vec, pts[i])) {
    		a++;           
    		//used[i] = true;
    		if (pts[i] == vec) {
    			used[i] = true;
    			b++;
    		}
//    		b += (pts[i] == vec);
    	}
    }

    vector <double> angs;
    for (int i = 0; i < n; i++)
    	if (!used[i]) {
    		angs.pb(atan2(pts[i].y - vec.y, pts[i].x - vec.x));
    	}
    sort(angs.begin(), angs.end(), comp);

    int i = 0, j = 0;
    int mx = 0;
    while (i < (int) angs.size()) {
    	while (j < (int) angs.size() && eq(angs[i], angs[j]))
    		j++;
    	mx = max(mx, j - i);
    	i = j;
    }

    b += mx;

//    cerr << vec.x << ' ' << vec.y << ' ' << a << ' ' << b << ' ' << mx <<  endl;
    
    return a * b;
}

double d;

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &tc);
    for (int tnum = 0; tnum < tc; tnum++) {
    	pts[0].read();
    	scanf("%lf", &d);
    	scanf("%d", &n);

    	for (int i = 1; i <= n; i++)
    		pts[i].read();

    	for (int i = 1; i <= n; i++)
    		pts[i] = pts[i] - pts[0];
    	for (int i = 0; i < n; i++)
    		pts[i] = pts[i + 1];

    	int ans = 0;
    	for (int i = 0; i < n; i++) {
    		point vec = pts[i];
    		vec.norm();
    		//cerr <<d << endl;
    		vec = vec * d;
    		ans = max(ans, tryans(vec));
    	}

    	printf("Case #%d: %d\n", tnum + 1, ans);

    	cerr << tnum + 1 << endl;
    }

    return 0;
}
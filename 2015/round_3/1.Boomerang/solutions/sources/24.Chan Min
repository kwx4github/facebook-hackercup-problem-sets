#include <cstdio>
#include <algorithm>
#include <map>
#include <set>
#include <vector>

using namespace std;

const double pi = atan(1)*4;

long long ccw(pair<int,int> a, pair<int,int> b, pair<int,int> c) {
	b.first -= a.first; b.second -= a.second;
	c.first -= a.first; c.second -= a.second;
	return b.first * (long long)c.second - b.second * (long long)c.first;
}

int main(){
	int TTT;
	scanf("%d",&TTT);
	for (int testcase = 1; testcase <= TTT; testcase++) {
		int x0, y0;
		vector<pair<int,int>> dat;
		int n, D;
		scanf("%d%d",&x0,&y0);
		scanf("%d",&D);
		scanf("%d",&n);
		for (int i = 0; i < n; i++) {
			int x,y;
			scanf("%d%d",&x,&y);
			dat.emplace_back(x,y);
		}
		int ans = 0;
		for (int i = 0; i < n; i++) {
			double dst = hypot(dat[i].first - x0, dat[i].second - y0);
			double atat = atan2(dat[i].second - y0, dat[i].first - x0);
			if (dst > D + 1e-9) continue;
			double mult = D / dst;
			pair<double,double> point(mult * (dat[i].first - x0) + x0, mult * (dat[i].second - y0) + y0);
			int A = 1, B = 0;
			for (int j = 0; j < n; j++) {
				if (i == j) continue;
				if (ccw(make_pair(x0,y0), dat[i], dat[j])) continue;
				double dst = hypot(dat[j].first - x0, dat[j].second - y0);
				double atat2 = atan2(dat[j].second - y0, dat[j].first - x0);
				double atatdiff = fabs(atat - atat2);
				if (dst > D + 1e-9) continue;
				if (fabs(atatdiff - 2*pi) > 1e-11 && atatdiff > 1e-11) continue;
				A++;
			}
			if (fabs(dst - D) < 1e-9) B++;
			vector<double> angles;
			for (int j = 0; j < n; j++) if (i != j || B == 0) angles.push_back(atan2(dat[j].second - point.second, dat[j].first - point.first));
			sort(angles.begin(),angles.end());

			int base = 0, lastcnt = 0;
			double lastval = -pi;

			int bestcount = 0;
			for (int j = 0; j < angles.size(); j++) {
				if (fabs(angles[j] + pi) < 1e-11 || 
					fabs(angles[j] - pi) < 1e-11) {
					base++;
				}
				if (fabs(angles[j] - lastval) > 1e-11) {
					lastval = angles[j];
					lastcnt = 0;
				}
				lastcnt++;
				bestcount = max(bestcount, lastcnt);
			}
			bestcount = max(bestcount, base);
			B += bestcount;
			ans = max(ans, A*B);
		}
		printf("Case #%d: %d\n", testcase, ans);
	}
	return 0;
}

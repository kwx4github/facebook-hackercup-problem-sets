#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <math.h>
#include <algorithm>
#include <bitset>
#include <set>
#include <sstream>
#include <stdlib.h>
#include <map>
#include <queue>
#include <stack>
#include <assert.h>
// #include <unordered_set>
#include <iomanip>

using namespace std;

#define sz(x) ((int)x.size())
#define all(x) (x).begin(), (x).end()
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

#define forit(X,Y) for(typeof((Y).begin()) X = (Y).begin(); X != (Y).end(); ++X)

#define mplus(x, y) ((x) == -1 || (y) == -1) ? -1 : ((x) + (y))
#define mmax(x, y) ((x) == -1 || (y) == -1) ? -1 : max((x), (y))
#define mmin(x, y) ((x) == -1) ? (y) : ((y) == -1) ? (x) : min((x), (y))
#define PI 3.14159265
#define checkbit(n, k) (((1L << (k)) & (n)) != 0)

#define debug(x) cerr << '>' << #x << ':' << x << endl;

typedef long long int64;

typedef vector <int> vi;
typedef vector < vi > vvi;


const int MOD = 1000000007;

double hypot(double x1, double y1, double x2, double y2) {
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}

int between(int x1, int y1, int x2, int y2, vi& xx, vi& yy) {
    // debug(x1);
    // debug(y1);
    // debug(x2);
    // debug(y2);
    int n = xx.size();
    int res = 0;
    for (int i = 0; i < n; ++i) {
        if ((xx[i] == x1 && yy[i] == y1) || (xx[i] == x2 && yy[i] == y2))
            continue;
        int dx1 = xx[i] - x1, dy1 = yy[i] - y1, dx2 = xx[i] - x2, dy2 = yy[i] - y2;
        if (dy1 * dx2 == dy2 * dx1 && ((dx1 < 0 && dx2 > 0) || (dx1 > 0 && dx2 < 0) || (dx1 == 0 && dx2 == 0)))
            ++res;
    }
    // debug(res);
    return res;
}

int max_b(double x0, double y0, vi& xx, vi& yy) {
    int n = xx.size();
    vector< pair<double, int> > points;
    points.reserve(n);
    int res = 0;
    int extra = 0;
    for (int i = 0 ; i < n; ++i) {
        int x = xx[i];
        int y = yy[i];
        if (fabs(x - x0) < 1e-6 && fabs(y - y0) < 1e-6) {
            extra++;
            continue;
        }
        double dx = x - x0;
        double dy = y - y0;
        double alpha = fabs(dx) < 1e-6 ? dy > 0 ? PI / 2 : -PI / 2 : dx > 0 ? atan2(dy, dx) : atan2(dy, dx) + PI;
        points.push_back(make_pair(alpha, i));
    }
    sort(points.begin(), points.end());
    int index = 0;
    while (index < points.size()) {
        int len = 1;
        while (index + len < points.size() && fabs(points[index].first - points[index + len].first) < 1e-6)
            ++len;
        res = max(res, len);
        index += len;
    }
    return res + extra;
}

int calc(int x0, int y0, int d, vi xx, vi yy) {
    int res = 0;
    int n = xx.size();
    for (int i = 0; i < n; ++i) {
        int x = xx[i];
        int y = yy[i];
        // debug(x);
        // debug(y);
        double x1, y1;
        if ((x - x0) * (x - x0) + (y - y0) * (y - y0) > d * d) {
            continue;
        } else if ((x - x0) * (x - x0) + (y - y0) * (y - y0) == d * d) {
            x1 = x;
            y1 = y;
        } else {
            double len = hypot(x, y, x0, y0);
            double coef = d / len;
            x1 = x0 + coef * (x - x0);
            y1 = y0 + coef * (y - y0);
        }
        int a = between(x0, y0, x, y, xx, yy) + 1;
        int b = max_b(x1, y1, xx, yy);
        // debug(a);
        // debug(b);
        res = max(res, a * b);
    }
    return res;
}


int main() {
    int T;
    cin >> T;
    for (int tt = 1; tt <= T; ++tt) {
        int x0, y0, d, n;
        cin >> x0 >> y0 >> d >> n;
        vi xx(n), yy(n);
        for (int i = 0; i < n; ++i)
            cin >> xx[i] >> yy[i];
        int res = calc(x0, y0, d, xx, yy);
        cout << "Case #" << tt << ": " << res << endl;
    }
}

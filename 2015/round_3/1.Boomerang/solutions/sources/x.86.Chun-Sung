import math
import itertools
import sys

T = int(sys.stdin.readline())

def gcd(a, b):
    while b != 0:
        a, b = b, a%b
    return a

def toD(p, D):
    x, y = map(float, p)
    l = math.sqrt(x*x+y*y)
    return [x/l*D, y/l*D]

def normalize(_p):
    return toD(_p, 1)

for caseNo in xrange(1,T+1):
    P0 = map(float, sys.stdin.readline().split())
    D = int(sys.stdin.readline())
    N = int(sys.stdin.readline())
    P = [ map(float,sys.stdin.readline().split()) for _ in xrange(N) ]
    P = [ [p[0]-P0[0],p[1]-P0[1]] for p in P ]

    zeroCount = sum( 1 for p in P if p[0] == 0 and p[1] == 0 )

    choice1 = sorted([ normalize(p) for p in P if 0<p[0]*p[0]+p[1]*p[1]<=D*D ])

    turn1 = [ (toD(k,D),len(list(g))+zeroCount) for (k,g) in itertools.groupby(choice1, key=lambda p:p) ]

    ans = 0
    for (NP0,cnt) in turn1:
        P2 = [ (p[0]-NP0[0], p[1]-NP0[1]) for p in P ]
        zeros = sum( 1 for p in P2 if abs(p[0])<1e-10 and abs(p[1])<1e-10 )
        theta = []
        for p in P2:
            if abs(p[0])<1e-10 and abs(p[1])<1e-10: continue
            theta.append( math.atan2(p[0], p[1]) )
        theta = sorted(theta+[ t+2*math.pi for t in theta ])

        bgn = 0
        mx = 0
        for i in xrange(len(theta)):
            while theta[i]-theta[bgn] > 1e-10: bgn += 1
            if i-bgn+1 > mx: mx = i-bgn+1

        if cnt*(zeros+mx) > ans:
            ans = cnt * (zeros + mx)

    print "Case #%d: %d" % (caseNo, ans)
    print >> sys.stderr, "Case #%d: %d" % (caseNo, ans)

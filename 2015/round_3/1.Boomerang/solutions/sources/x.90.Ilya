#include <iostream>
#include <string>
#include <map>
#include <math.h>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <sstream>
#include <deque>
#include <memory.h>
#include <cassert>
#include <ctime>
#include <cstring>


using namespace std; 

#define ll long long
#pragma comment(linker, "/STACK:64000000")

const int maxn = 4096;
const int inf = 1000000007;
const int mod = 1000000007;
const int dx[4] = {1, -1, 0, 0};
const int dy[4] = {0, 0, 1, -1};
const double eps = 1e-10;
const double pi = acos(-1.0);

struct pt {
	int x, y;

	pt() {}
	pt(int x, int y) : x(x), y(y) {}

	void read() {
		cin >> x >> y;
	}

	pt operator- (const pt &p) {
		return pt(x - p.x, y - p.y);
	}

	pt operator+ (const pt &p) {
		return pt(x + p.x, y + p.y);
	}

	bool operator== (const pt &p) const {
		return x == p.x && y == p.y;
	}

	double d() const {
		return sqrt(1.0 * x * x + 1.0 * y * y);
	}

	int operator* (const pt &p) const {
		return x * p.y - p.x * y;
	}

	int operator% (const pt &p) const {
		return x * p.x + y * p.y;
	}

	double angle() const {
		return atan2((double)y, (double)x);
	}
};

int d, n;
pt a[maxn];
int ans;

struct comparator {
	bool operator()(double a, double b) {
		return abs(a - b) >= eps && a < b;
	}
};

double sqr(double x) {
	return x * x;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    //ios_base::sync_with_stdio(0);
    
    int T;
    scanf("%d\n", &T);
    for (int test = 1; test <= T; test++) {
        cerr << "Case #" << test << ": ";
        printf("Case #%d: ", test);

		pt p0;
		p0.read();
		cin >> d >> n;
		for (int i = 0; i < n; i++) {
			a[i].read();
			a[i] = a[i] - p0;
		}

		int mx = 0;
		for (int i = 0; i < n; i++) {
			int cur = 0;
			for (int j = 0; j < n; j++) {
				if ((a[i] * a[j]) == 0 && (a[i] % a[j]) >= 0 && a[j].d() < d + eps) {
					cur++;
				}
			}
			mx = max(mx, cur);
		}

		ans = 0;
		ans = max(ans, mx);

		map<double, int, comparator> mp2;
		for (int i = 0; i < n; i++) {
			map<double, vector<pt>, comparator> mp;
			for (int j = 0; j < n; j++) {
				if (j == i) continue;
				double ang = (a[j] - a[i]).angle();
				if (ang < -eps) ang += pi;
				mp[ang].push_back(a[j]);
			}
			for (map<double, vector<pt>, comparator> :: iterator it = mp.begin(); it != mp.end(); it++) {
				vector<pt> vct = it->second;
				pt u = a[i];
				pt v = vct[0];
				double dx = v.x - u.x;
				double dy = v.y - u.y;
				double dd = sqrt(dx * dx + dy * dy);
				dx /= dd;
				dy /= dd;

				// (u.x + t * dx) ^ 2 + (u.y + t * dy) ^ 2 = d ^ 2
				// t^2 + 2 * (u.x * dx + u.y * dy) * t + u.x ^ 2 + u.y ^ 2 - d ^ 2 = 0

				double discr = sqr(u.x * dx + u.y * dy) - (sqr(u.x) + sqr(u.y) - sqr(d));
				if (discr < -eps) {
					continue;
				}
				discr = abs(discr);
				double t1 = -(u.x * dx + u.y * dy) + sqrt(discr);
				double t2 = -(u.x * dx + u.y * dy) - sqrt(discr);

				double px1 = u.x + dx * t1, py1 = u.y + dy * t1;
				double a1 = atan2(py1, px1);
				double px2 = u.x + dx * t2, py2 = u.y + dy * t2;
				double a2 = atan2(py2, px2);

				vector<double> t;
				for (int i = 0; i < (int)vct.size(); i++) {
					t.push_back(vct[i].x * dx + vct[i].y * dy);
				}
				t.push_back(0);
				sort(t.begin(), t.end());

				int c1 = 0, c2 = 0;
				for (int i = 0; i < (int)t.size(); i++) {
					if (t[i] < t1 + eps) c1++;
					if (t[i] > t1 - eps) c2++;
				}
				mp2[a1] = max(mp2[a1], max(c1, c2));

				c1 = 0, c2 = 0;
				for (int i = 0; i < (int)t.size(); i++) {
					if (t[i] < t2 + eps) c1++;
					if (t[i] > t2 - eps) c2++;
				}
				mp2[a2] = max(mp2[a2], max(c1, c2));
			}
		}

		map<double, int, comparator> mp3;
		for (int i = 0; i < n; i++) if (a[i].d() < d + eps) mp3[a[i].angle()]++;

		for (map<double, int, comparator> :: iterator it = mp3.begin(); it != mp3.end(); it++) ans = max(ans, it->second * mp2[it->first]);
		cout << ans << endl;
		cerr << ans << endl;
    }
    
    return 0;
}
#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;
typedef pair<double, double> par;
#define x first
#define y second

const double eps = 1e-9;
const int MAXN = 3030;

inline bool eq(double a, double b) { return fabs(a-b) < eps; }

int x[MAXN], y[MAXN];

int main(void) {
  int TC;
  scanf("%d", &TC);
  for (int tp = 1; tp <= TC; ++tp) {
    int x0, y0;
    scanf("%d %d", &x0, &y0);
    int d, n;
    scanf("%d", &d);
    scanf("%d", &n);
    
    REP(i, n) {
      scanf("%d %d", x+i, y+i);
      x[i] -= x0, y[i] -= y0;
    }

    int ans = 0;
    REP(i, n) {
      int di = x[i]*x[i] + y[i]*y[i];
      if (d*d < di) continue;
      
      int A = 0;
      REP(j, n)
        if (x[i]*y[j] == x[j]*y[i]) {
          double d1 = sqrt(x[j]*x[j] + y[j]*y[j]);
          double d2 = sqrt((x[j]-x[i])*(x[j]-x[i]) + (y[j]-y[i])*(y[j]-y[i]));
          if (eq(d1+d2, sqrt(di)))
            if (d*d >= x[j]*x[j] + y[j]*y[j]) A++;
        }

      double k = d / sqrt(x[i]*x[i] + y[i]*y[i]);
      double X = x[i] * k, Y = y[i] * k;
      
      vector<par> v;
      int o = 0;
      REP(j, n) {
        double dx = X - x[j];
        double dy = Y - y[j];
        
        if (eq(dx, 0) && eq(dy, 0)) {
          o++;
          continue;
        }

        double len = sqrt(dx*dx + dy*dy);
        dx /= len, dy /= len;

        v.push_back({dx, dy});
      }

      sort(v.begin(), v.end());
      
      ans = max(ans, A * o);

      int p = 0;
      while (p < (int)v.size()) {
        int j = p;
        while (j < (int)v.size() && eq(v[p].x, v[j].x) && eq(v[p].y, v[j].y)) j++;

        int B = j-p + o;
        ans = max(ans, A * B);
        p = j;
      }
    }

    printf("Case #%d: ", tp);
    printf("%d\n", ans);
  }
  return 0;
}

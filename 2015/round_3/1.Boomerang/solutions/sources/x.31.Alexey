#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <queue>
#include <deque>
#include <cmath>
#include <ctime>
#include <stack>
#include <set>
#include <map>
#include <cassert>
#include <memory.h>
#include <sstream>

using namespace std;

#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()

typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair <int, int> pi;

void solve();


int gcd(int a, int b);

int main() {
	freopen("/Users/riad/ClionProjects/for-jhelper/input.txt", "r", stdin);
	#ifndef DEBUG
	freopen("/Users/riad/ClionProjects/for-jhelper/output.txt", "w", stdout);
	#endif
	clock_t start = clock();

	cout.sync_with_stdio(0);
	cout.precision(10);
	cout << fixed;
	cin.tie(0);
	int t = 1;
	cin >> t;
	for(int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
#ifdef YA
	cerr<<"\n\n\n"<<(clock() - start) / 1.0 / CLOCKS_PER_SEC<<"\n\n\n";
#endif
	return 0;
}

void solve() {

	int x0, y0;
	cin >> x0 >> y0;
	int n, D;
	cin >> D >> n;
	vector<int> x(n), y(n);
	map<pi, vector<pi>> d;


	for (int i = 0; i < n; ++i) {
		cin >> x[i] >> y[i];
		x[i] -= x0;
		y[i] -= y0;
		int g = gcd(x[i], y[i]);
		d[mp(x[i] / g, y[i] / g)].push_back(mp(x[i], y[i]));
	}

	int ans = 0;

	for(auto it: d) {
		pi dir = it.first;
		int cnt1 = 0, cnt2 = 0;
		for (pi p: it.second) {
			if(p.first * p.first + p.second * p.second <= D * D) {
				++cnt1;
			}
			if(p.first * p.first + p.second * p.second >= D * D) {
				++cnt2;
			}
			
		}

		int cntBack = cnt1;
		if(d.count(mp(-it.first.first, -it.first.second))) {
			cntBack += d[mp(-it.first.first, -it.first.second)].size();
		}

//		cout << dir.first << ' ' << dir.second << ' ' << cnt1 << ' ' << cnt2 << ' ' << cntBack << endl;

		ans = max(cnt1 * cnt2, ans);
		ans = max(cnt1 * cntBack, ans);


		
		if((D * D) % (dir.first * dir.first + dir.second * dir.second) == 0) {
			int z = (D * D) / (dir.first * dir.first + dir.second * dir.second);
			int sq = sqrt(z);
			if(z * z == sq) {
				pi point = mp(z * dir.first, z * dir.second);
				map<pi, int> cnt;
				int cntBock = 0;
				int ok = 0;
				for (int i = 0; i < n; ++i) {
					pi dd = mp(x[i] - point.first, y[i] - point.second);
					if(dd == mp(0,0)) {
						++ok;
						continue;
					}
					int gg = gcd(dd.first, dd.second);
					cnt[mp(dd.first / gg, dd.second / gg)]++;

				}

				for(auto it: cnt) {
					cntBock = max(cntBock, it.second);
				}

				cntBock += ok;

				ans = max(cnt1 * cntBock, ans);



			}
		}
	}
	
	
	


	cout << ans << endl;



}

int gcd(int a, int b) {
	while(b) {
		a %= b;
		swap(a, b);
	}
	return abs(a);
}

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <cstdint>
#include <cstdio>
#include <complex>
using namespace std;

typedef complex<double> pt;

pt read_pt() {
	int x, y;
	cin >> x >> y;
	return pt(x, y);
}

const double eps = 1e-10;

bool on_line(const pt &a, const pt &b, const pt &p) {
	pt v = b - a;
	pt q = (p-a) / v;
	// cout << "*** " << q << endl;
	return
		q.real() > -eps &&
		q.real() < 1 + eps &&
		abs(q.imag()) < eps;
}

void _main() {
	pt p = read_pt();
	int d; cin >> d;

	int n; cin >> n;
	vector<pt> x(n);
	for (auto& i : x) {
		i = read_pt();
	}

	const double pi = atan(1) * 4;

	int ans = 0;

	for (int i = 0; i < n; i++) {
		int na = 0;
		pt v = x[i] - p;
		v = v / abs(v) * (double)d;
		pt q = p + v;

		for (int j = 0; j < n; j++) {
			// cout << "### " << p << ", " << q << ", " << x[j] << " = " << on_line(p, q, x[j]) << endl;
			if (on_line(p, q, x[j]))
				na++;
		}
		if (na == 0) continue;

		int nb = 0;
		vector<double> y;
		for (int j = 0; j < n; j++) {
			pt r = x[j] - q;
			if (abs(r) < eps) {
				nb++;
				continue;
			}
			double a = arg(r);
			y.push_back(a);
			if (a < -pi + eps)
				y.push_back(a + 2 * pi);
		}

		/*
		for (auto& i : y) {
			cout << "> " << i << endl;
		}
		*/

		sort(y.begin(), y.end());

		double prev = -100;
		int len = 0, mlen = 0;
		for (auto& i : y) {
			if (abs(prev - i) < eps) {
				len++;
			} else {
				len = 1;
			}

			mlen = max(mlen, len);
			prev = i;				
		}
		nb += mlen;

		// cout << "*** " << na << ", " << nb << endl;
		ans = max(ans, na*nb);
	}

	cout << ans << endl;
}

int main() {
	int t; cin >> t;
	for (int i = 1; i <= t; i++) {
		cout << "Case #" << i << ": ";
		_main();
	}
	return 0;
}
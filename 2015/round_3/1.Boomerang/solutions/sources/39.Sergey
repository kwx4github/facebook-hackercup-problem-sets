#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <double, double> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 3100;

pii s;
int d, n;
pii a[nmax];
bool used[nmax];

pii operator +(pii a, pii b){
	return pii(a.x + b.x, a.y+b.y);                                                       
	}

pii operator -(pii a, pii b){
	return pii(a.x-b.x, a.y-b.y);
	}

pii operator *(pii a, double b){
	return pii(a.x*b, a.y*b);
	}

pii operator /(pii a, double b){
	return pii (a.x / b, a.y / b);
	}
	
double dist(pii a, pii b) {
	return sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));
}

struct line{
	double a,b,c;
	line(){};
	line (double a1, double b1, double c1){
		a = a1; b = b1; c = c1;
		};
	line (pii v, pii u){
		a = u.y - v.y;
		b = v.x - u.x;
		c = -(v.x * a + v.y * b);
		};
	};

double side(line l, pii a){
	return l.a * a.x + l.b * a.y + l.c;
	}

double dist(line l, pii a){
	return side(l,a) / sqrt(l.a*l.a + l.b*l.b);
	}

int calc(pii mid) {
	vector<double> q;
//	cerr << mid.x << " " << mid.y << endl;
	forn(i, n)
		if (!used[i])
			q.pb(atan2(a[i].sc - mid.sc, a[i].fs - mid.fs));
//	forn(i, n)
//		cerr << q[i] << " ";
//	cerr << endl;
	if (q.size() == 0) return 0;
	sort(all(q));
	int res = 1;
	int now = 1;
	for (int i = 1; i < q.size(); i ++) {
		if (fabs(q[i] - q[i-1]) > eps)
			now = 0;
		now ++;
		res = max(res, now);
	}
	return res;
}


void solve() {
	cin >> s.fs >> s.sc;
	cin >> d >> n;
	forn(i, n)
		cin >> a[i].fs >> a[i].sc;
	int res = 0;
	forn(i, n) {
		if (a[i] == s) continue;
		line l(s, a[i]);
		pii q = (a[i] - s) / dist(a[i], s);
		pii qq = q;
		swap(qq.fs, qq.sc);
		qq.fs *= -1;
		line w(s, s + qq);
		for (int k = -1; k <= 1; k += 2) {
			pii mid = s + q * d * k;
			memset(used, 0, sizeof used);
			int add = 0;
			int A = 0;
			forn(j, n)
				if (fabs(side(l, a[j])) < eps && dist(s, a[j]) < d + eps && side(w, a[j]) * side(w, mid) > 0) {
					A ++;
					if (dist(s, a[j]) > d - eps) {
						used[j] = 1;
						add = 1;
					}
				}
			res = max(res, A * (calc(mid) + add));
		}
	}
	cout << res << endl;
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);

	int tst;
	cin >> tst;
	forn(i, tst) {
		cerr << i << endl;
		printf("Case #%d: ", i + 1);
		solve();
	}
	

	return 0;
}

#include <cstring>
#include <cassert>
#include <cstdio>
#include <string>
#include <cmath>
#include <vector>
#include <iostream>
#include <map>
#include <set>
#include <algorithm>
#include <queue>
#include <sstream>
using namespace std;
#define REP(i,n) for(int i=0;i<(int)(n);i++)

typedef long long ll;

struct point
{
	ll x,y;
	point (ll x=0, ll y=0):x(x),y(y){}
	point operator+(const point& b)const
	{
		return point(x+b.x, y+b.y);
	}
	point operator-(const point& b) const
	{
		return point(x-b.x, y-b.y);
	}
	ll inner(const point& b) const
	{
		return x*b.x+y*b.y;
	}
	ll cross(const point& b) const
	{
		return x*b.y-y*b.x;
	}
	ll norm2() const
	{
		return x*x+y*y;
	}
	bool operator<(const point& b) const
	{
		if(x!=b.x)
			return x<b.x;
		return y<b.y;
	}
	bool operator==(const point& b) const
	{
		return x==b.x && y==b.y;
	}
};



ll getAbs(ll a)
{
	return a<0?-a:a;
}
ll gcd(ll a, ll b)
{
	return b?gcd(b,a%b):a;
}

ll getGCD(ll a, ll b)
{
	return gcd(getAbs(a),getAbs(b));
}

struct fract
{
	ll n,d;
	fract(ll num=0, ll den=1)
	{
		if(den<0)
		{
			num*=-1;
			den*=-1;
		}
		ll g=getGCD(num,den);
		n=num/g;
		d=den/g;
	}
	fract operator+(const fract& b) const
	{
		return fract(n*b.d+d*b.n,d*b.d);
	}
	fract operator-(const fract& b) const
	{
		return fract(n*b.d-d*b.n,d*b.d);
	}
	fract operator*(const fract& b) const
	{
		return fract(n*b.n, d*b.d);
	}
	bool operator<(const fract& b) const
	{
		return n*b.d<d*b.n;
	}
	bool operator==(const fract& b) const
	{
		return n*b.d==d*b.n;
	}
	bool operator!=(const fract& b) const
	{
		return n*b.d!=d*b.n;
	}
};

struct pointF
{
	fract x,y;
	pointF (fract x=0, fract y=0):x(x),y(y){}
	pointF(point b):x(b.x), y(b.y){}
	pointF operator+(const pointF& b)const
	{
		return pointF(x+b.x, y+b.y);
	}
	pointF operator-(const pointF& b) const
	{
		return pointF(x-b.x, y-b.y);
	}
	fract inner(const pointF& b) const
	{
		return x*b.x+y*b.y;
	}
	fract cross(const pointF& b) const
	{
		return x*b.y-y*b.x;
	}
	fract norm2() const
	{
		return x*x+y*y;
	}
	bool operator<(const pointF& b) const
	{
		if(x!=b.x)
			return x<b.x;
		return y<b.y;
	}
	bool operator==(const pointF& b) const
	{
		return x==b.x && y==b.y;
	}
};


ll getSqrt(ll x)
{
	ll v=(ll)sqrt((double)x);
	while(v*v<x) v++;
	while(v*v>x) v--;
	return v;
}



struct line
{
	ll A,B,C;
	line(ll A, ll B, ll C):A(A),B(B),C(C)
	{
	}
	line(point a, point b)
	{
		A=(b-a).y;
		B=(a-b).x;
		C=-A*a.x-B*a.y;
		assert(subs(a)==0);
		assert(subs(b)==0);
	}
	ll subs(const point &p) const
	{
		return A*p.x+B*p.y+C;
	}
	line normalize() const
	{
		line res(*this);
		if(res.A==0 && res.B==0)
		{
			if(res.C!=0)
				res.C=1;
		}
		else
		{
			ll g=gcd(getAbs(res.A),getAbs(res.B));
			res.A/=g;
			res.B/=g;
			res.C/=g;

			if(res.A<0 || (res.A==0 && res.B<0) )
			{
				res.A*=-1;
				res.B*=-1;
				res.C*=-1;
			}
		}
		return res;
	}
	bool operator<(const line& b) const
	{
		if(A!=b.A)
			return A<b.A;
		if(B!=b.B)
			return B<b.B;
		return C<b.C;
	}
};

int main()
{
	int T;
	scanf("%d",&T);
	for(int test=1;test<=T;test++)
	{
		cerr<<test<<endl;
		point p0;
		cin>>p0.x>>p0.y;
		vector<point> p;
		map<line,set<point> > lines;
		ll d;
		int n;

		cin>>d>>n;
		p.resize(n);
		REP(i,n)
		{
			cin>>p[i].x>>p[i].y;
			p[i]=p[i]-p0;
		}
		REP(i,n) REP(j,i)
		{
			line cur(p[i],p[j]);
			cur=cur.normalize();
			lines[cur].insert(p[i]);
			lines[cur].insert(p[j]);
		}
		map<line,vector<pointF> > lv;
		for(map<line,set<point> >::iterator it=lines.begin();it!=lines.end();it++)
			for(set<point>::iterator jt=it->second.begin();jt!=it->second.end();jt++)
				lv[it->first].push_back(pointF(*jt));
		ll res=0;
		for(int i=0;i<n;i++)
		{
			if(p[i].norm2()>d*d) continue;
			ll cntA=0;
			ll cntB=0;
			ll cntB1=0;
			for(int j=0;j<n;j++)
			{
				if(p[i].cross(p[j])==0 && p[j].norm2()<=d*d)
				{
					if(p[i].inner(p[j])>=0)
						cntA++;
					cntB1++;
				}
			}
			ll ri=getSqrt(p[i].norm2());
			if(ri*ri==p[i].norm2())
			{

				pointF curP(fract(p[i].x*d,ri),fract(p[i].y*d,ri));
				for(int j=0;j<n;j++)
				{
					line l(ri*( ri*p[j].y-d*p[i].y),
					       ri*(-ri*p[j].x+d*p[i].x),
					       -d*p[i].x*( ri*p[j].y-d*p[i].y)-
					        d*p[i].y*(-ri*p[j].x+d*p[i].x));
					l=l.normalize();
					assert(l.subs(p[j])==0);
					map<line,vector<pointF> >::iterator it=lv.find(l);
					if(it!=lv.end())
					{
						vector<pointF>::iterator jt=lower_bound(it->second.begin(),it->second.end(),curP);
						if(jt==it->second.end())
							cntB=max(cntB,(ll)it->second.size());
						else
						{
							int id=jt-it->second.begin();
							int sz=it->second.size();
							cntB=max(cntB, (ll)max(id+1,sz-id-1+(*jt==curP?1:0)));
						}
					}
					else
						cntB=max(cntB,1LL);
				}

			}
			cntB=max(cntB,cntB1);
			res=max(res,cntA*cntB);
		}
		printf("Case #%d: %lld\n",test,res);
	}
}

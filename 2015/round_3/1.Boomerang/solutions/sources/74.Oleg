#include <cassert>
#include <cmath>
#include <cstdio>

#include <algorithm>

const long double eps = 1e-12;

int sign ( int x ) {
  return x > 0 ? 1 : (x < 0 ? -1 : 0);
}

int main () {
  using namespace std;
  int tn;
  assert (scanf ("%d", &tn) == 1);
  for (int t = 1; t <= tn; t++) {
    int n, d;
    int x0, y0;
    assert (scanf ("%d%d", &x0, &y0) == 2);
    assert (scanf ("%d%d", &d, &n) == 2);
    int x[n], y[n];
    for (int i = 0; i < n; i++)
      assert (scanf ("%d%d", &x[i], &y[i]) == 2);
    for (int i = 0; i < n; i++)
      x[i] -= x0, y[i] -= y0;

    int ans = 0;
    for (int i = 0; i < n; i++) {
      int a = 0;
      for (int j = 0; j < n; j++) {
        if (x[j] * x[j] + y[j] * y[j] > d * d)
          continue;
        if (x[j] * y[i] - x[i] * y[j] != 0)
          continue;
        if (sign (x[i]) != sign (x[j]) || sign (y[i]) != sign (y[j]))
          continue;
        a++;
      }
      if (x[i] == 0 && y[i] == 0) {
        if (ans < a)
          ans = a;
        continue;
      }
      // fprintf (stderr, "[i=%d] (%d,%d), a=%d\n", i, x[i], y[i], a);
      int b = 0, k = 0, bp = 0;
      long double dist = sqrt (1.0 * x[i] * x[i] + 1.0 * y[i] * y[i]);
      long double tx = d * x[i] / dist;
      long double ty = d * y[i] / dist;
      long double r[n];
      for (int j = 0; j < n; j++) {
        if (abs (x[j] - tx) < eps && abs (y[j] - ty) < eps) {
          b++;
          continue;
        }
        long double ang = atan2 (y[j] - ty, x[j] - tx);
        while (ang < -eps)
          ang += 2 * M_PI;
        while (ang >= 2 * M_PI - eps)
          ang -= 2 * M_PI;
        r[k++] = ang;
      }
      sort (r, r + k);
      for (int i = 0, j = 0; i < k; i = j) {
        for (; j < k && r[j] < r[i] + eps; j++)
          ;
        // fprintf (stderr, "ij=%d %d, n=%d, r=%.5Lf\n", i, j, n, r[j]);
        if (bp < j - i)
          bp = j - i;
      }
      b += bp;
      if (ans < a * b)
        ans = a * b;
    }
    printf ("Case #%d: %d\n", t, ans);
  }
  return 0;
}


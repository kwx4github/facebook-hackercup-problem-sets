import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;
import java.io.OutputStream;
import java.util.concurrent.Executors;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.io.FileInputStream;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Map;
import java.util.Locale;
import java.io.PrintStream;
import java.io.FileOutputStream;
import java.io.File;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "boomerang.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("boomerang.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Boomerang solver = new Boomerang();
		solver.solve(1, in, out);
		out.close();
	}
}

class Boomerang {
    static class Testcase implements Callable<Testcase> {
        int testNumber;
        int d;
        int n;
        int[] x;
        int[] y;
        int res;

        Testcase(int testNumber) {
            this.testNumber = testNumber;
        }

        public void readInput(InputReader in) {
            int x0 = in.nextInt();
            int y0 = in.nextInt();
            d = in.nextInt();
            n = in.nextInt();
            x = new int[n];
            y = new int[n];
            for (int i = 0; i < n; ++i) {
                x[i] = in.nextInt() - x0;
                y[i] = in.nextInt() - y0;
            }
        }

        public Testcase call() {
            double[] alphas = new double[n];
            int nalphas = 0;
            for (int i = 0; i < n; ++i) {
                double dist = Math.sqrt(x[i] * x[i] + y[i] * y[i]);
                if (dist < 1e-12) {
                    throw new RuntimeException();
                }
                if (dist < d + 1e-12) {
                    alphas[nalphas++] = Math.atan2(y[i], x[i]);
                }
            }
            alphas = Arrays.copyOf(alphas, nalphas);
            Arrays.sort(alphas);
            int[] counts = new int[nalphas];
            int cnt = 0;
            for (int i = 0; i < nalphas; ++i) {
                if (i == 0 || alphas[i] > alphas[i - 1] + 1e-12) {
                    ++cnt;
                    alphas[cnt - 1] = alphas[i];
                    counts[cnt - 1] = 1;
                } else {
                    ++counts[cnt - 1];
                }
            }
            nalphas = cnt;
            alphas = Arrays.copyOf(alphas, nalphas);
            counts = Arrays.copyOf(counts, nalphas);
            res = 0;
            if (alphas.length > 0) {
                for (int x : counts) res = Math.max(res, x);
                for (int p1 = 0; p1 < n; ++p1) {
                    Map<Pair, List<Integer>> dirs = new HashMap<>();
                    for (int p2 = p1 + 1; p2 < n; ++p2) {
                        int a = y[p2] - y[p1];
                        int b = x[p1] - x[p2];
                        if (a < 0 || (a == 0 && b < 0)) {
                            a = -a;
                            b = -b;
                        }
                        int g = gcd(Math.abs(a), Math.abs(b));
                        a /= g;
                        b /= g;
                        Pair p = new Pair(a, b);
                        List<Integer> old = dirs.get(p);
                        if (old == null) {
                            old = new ArrayList<>();
                            old.add(b * x[p1] - a * y[p1]);
                            dirs.put(p, old);
                        }
                        old.add(b * x[p2] - a * y[p2]);
                    }
                    for (Map.Entry<Pair, List<Integer>> dir : dirs.entrySet()) {
                        double a = dir.getKey().a;
                        double b = dir.getKey().b;
                        double z = Math.sqrt(a * a + b * b);
                        if (Math.abs(z) < 1e-12) throw new RuntimeException();
                        a /= z;
                        b /= z;
                        double[] pnts = new double[dir.getValue().size()];
                        for (int i = 0; i < pnts.length; ++i) pnts[i] = dir.getValue().get(i) / z;
                        double c = -a * x[p1] - b * y[p1];
                        if (Math.abs(c) < d + 1e-12) {
                            double extra = d * d - c * c;
                            if (extra < 1e-12) extra = 0;
                            extra = Math.sqrt(extra);
                            for (int mult = -1; mult <= 1; mult += 2) {
                                double vx = -a * c + b * extra * mult;
                                double vy = -b * c - a * extra * mult;
                                double vv = b * vx - a * vy;
                                int before = 0;
                                int after = 0;
                                for (double pnt : pnts) {
                                    if (pnt >= vv - 1e-12) ++after;
                                    if (pnt <= vv + 1e-12) ++before;
                                }
                                double alpha = Math.atan2(vy, vx);
                                int left = -1;
                                int right = alphas.length;
                                while (right - left > 1) {
                                    int middle = (left + right) / 2;
                                    if (alphas[middle] < alpha) left = middle;
                                    else right = middle;
                                }
                                int got = 0;
                                for (int i = -2; i <= 3; ++i) {
                                    int zz = (left + i) % alphas.length;
                                    if (zz < 0) zz += alphas.length;
                                    double delta = Math.abs(alphas[zz] - alpha);
                                    if (delta > Math.PI) delta = 2 * Math.PI - delta;
                                    if (delta < 1e-12) {
                                        got = counts[zz];
                                    }
                                }
                                res = Math.max(res, got * Math.max(before, after));
                            }
                        }
                    }
                }
            }

            System.err.println("Done test " + testNumber);
            return this;
        }

        private int gcd(int p, int q) {
            while (q > 0) {
                int t = p % q;
                p = q;
                q = t;
            }
            return p;
        }


        public void writeOutput(PrintWriter out) {
            out.println("Case #" + testNumber + ": " + res);
        }
    }

    static class Pair {
        int a;
        int b;

        public Pair(int a, int b) {
            this.a = a;
            this.b = b;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Pair pair = (Pair) o;

            if (a != pair.a) return false;
            if (b != pair.b) return false;

            return true;
        }

        public int hashCode() {
            int result = a;
            result = 31 * result + b;
            return result;
        }
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int nt = in.nextInt();
        List<Future<Testcase>> tests = new ArrayList<Future<Testcase>>();
        ExecutorService pool = Executors.newFixedThreadPool(1);
        for (int it = 0; it < nt; ++it) {
            Testcase t = new Testcase(it + 1);
            t.readInput(in);
            tests.add(pool.submit(t));
        }
        for (Future<Testcase> test : tests) {
            try {
                Testcase t = test.get();
                t.writeOutput(out);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } catch (ExecutionException e) {
                throw new RuntimeException(e);
            }
        }
        pool.shutdown();
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


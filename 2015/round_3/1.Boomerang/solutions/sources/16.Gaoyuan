#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
//#include <ctime>
#include <map>
using namespace std;

double eps = 1e-9;
double pi = atan(1) * 4;

struct vect2D
{
    double x, y;
    vect2D(){x = y = 0;}
    vect2D(double _x, double _y){x = _x, y = _y;}
    vect2D operator +(vect2D u){return vect2D(x+u.x, y+u.y);}
    vect2D operator -(vect2D u){return vect2D(x-u.x, y-u.y);}
    vect2D to(vect2D &u){return vect2D(u.x-x, u.y-y);}
    vect2D operator *(double u){return vect2D(x*u, y*u);}
    vect2D operator /(double u){return vect2D(x/u, y/u);}
    bool operator == (vect2D that){return abs(x-that.x) + abs(y-that.y) < eps;}
    double dotProd(vect2D u){return x*u.x + y*u.y;}
    double crossProd(vect2D u){return x*u.y - y*u.x;}
    double len(){return sqrt(x*x + y*y);}
    double len2(){return x*x+y*y;}
    double dist(){return sqrt(x*x + y*y);}
    double signedAngleRad(vect2D u)
    {
        if(dotProd(u) < 0)
        {
            double v = asin(crossProd(u) / (len() * u.len()));
            if(v > 0) return pi - v;
            return -pi - v;
        }
        return asin(crossProd(u) / (len() * u.len()));
    }
    double signedAngleDeg(vect2D u){return signedAngleRad(u) / pi * 180;}
    vect2D resize(double u){return (*this)*(u/len());}
    vect2D normalize(){return resize(1);}
    vect2D projectTo(vect2D u){return u.resize(dotProd(u.normalize()));}
    vect2D tangentTo(vect2D u){return (*this) - projectTo(u);}
    friend ostream& operator<< (ostream& os , const vect2D& v)
    {
        return os << "(" << v.x << ", " << v.y << ")";
    }
}P[3001], me;

int n;
double d;

void solve()
{
	cin >> me.x >> me.y;
	cin >> d;
	cin >> n;
	for(int i = 1; i <= n; i++)
	{
		cin >> P[i].x >> P[i].y;
		P[i] = P[i] - me;
	}
	long long ans = 0;
	for(int i = 1; i <= n; i++)
	{
		vect2D dir = P[i];
		if(dir.len() == 0)
			dir = vect2D(1, 0);
		long long cnt1 = 0;
		for(int j = 1; j <= n; j++)
			if(abs(atan2(dir.y, dir.x) - atan2(P[j].y, P[j].x)) < eps && P[j].dist() < d + eps)
				cnt1 ++;
		dir = dir.resize(d);
		long long cnt2 = 0;
		vector <double> ways;
		for(int j = 1; j <= n; j++)
			if(P[j].to(dir).dist() < eps)
				cnt2 ++;
			else
			{
				vect2D t = dir.to(P[j]);
				double v = atan2(t.y, t.x);
				ways.push_back(v);
			}
		sort(ways.begin(), ways.end());
		int c = 1, maxc = 1;
		double v = ways[0];
		for(int j = 1; j < ways.size(); j++)
		{
			if(abs(ways[j] - v) < eps)
				c ++;
			else
			{
				c = 1;
				v = ways[j];
			}
			maxc = max(maxc, c);
		}
		cnt2 += maxc;
		ans = max(ans, cnt1 * cnt2);
		//cout << i << " : " << cnt1 << " " << cnt2 << endl;
	}
	cout << ans << endl;
}

int MAIN()
{
	int TestCase;
	cin >> TestCase;
	for(int caseID = 1; caseID <= TestCase; caseID ++)
	{
		cout << "Case #" << caseID << ": ";
		solve();
	}
	return 0;
}

int main()
{
	//srand((unsigned)time(NULL));
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(16);
	return MAIN();
}

import java.io.*;
import java.util.*;

public class A {
	FastScanner in;
	PrintWriter out;

	class Point {
		double x, y;

		public Point(double x, double y) {
			super();
			this.x = x;
			this.y = y;
		}

		@Override
		public String toString() {
			return "Point [x=" + x + ", y=" + y + "]";
		}

	}

	final double eps = 1e-9;

	int vectMul(Point a, Point b, Point c) {
		double v = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);
		if (v > eps)
			return 1;
		if (v < -eps)
			return -1;
		return 0;
	}

	boolean inside(double from, double to, double what) {
		return what >= Math.min(from, to) - eps
				&& what <= Math.max(from, to) + eps;
	}

	boolean eq(Point a, Point b) {
		return Math.abs(a.x - b.x) <= eps && Math.abs(a.y - b.y) <= eps;
	}

	void solve() {
		int tc = in.nextInt();
		for (int t = 0; t < tc; t++) {
			out.print("Case #" + (t + 1) + ": ");
			Point start = new Point(in.nextInt(), in.nextInt());
			int d = in.nextInt();
			int n = in.nextInt();
			Point[] a = new Point[n];
			for (int i = 0; i < n; i++) {
				a[i] = new Point(in.nextInt(), in.nextInt());
			}
			int max = 0;
			for (int first = 0; first < n; first++) {
				double dx = a[first].x - start.x;
				double dy = a[first].y - start.y;
				double dd = Math.sqrt(dx * dx + dy * dy);
				dx /= dd;
				dy /= dd;
				dx *= d;
				dy *= d;
				Point an = new Point(start.x + dx, start.y + dy);
				int mulF = 0;
				for (int i = 0; i < n; i++) {
					if (vectMul(start, an, a[i]) == 0) {
						if (inside(start.x, an.x, a[i].x)
								&& inside(start.y, an.y, a[i].y)) {
							mulF++;
						}
					}
				}
				int mulS = 0;
				ArrayList<Double> pts = new ArrayList<>();
				for (int i = 0; i < n; i++) {
					if (eq(a[i], an)) {
						mulS++;
					} else {
						double ddx = a[i].x - an.x, ddy = a[i].y - an.y;
						double angle = Math.atan2(ddx, ddy);
						if (angle > Math.PI - eps / 2) {
							angle -= Math.PI * 2;
						}
						pts.add(angle);
					}
				}
				Collections.sort(pts);
				max = Math.max(max, mulF * mulS);
				for (int i = 0; i < pts.size();) {
					int j = i;
					while (j != pts.size()
							&& Math.abs(pts.get(j) - pts.get(i)) <= eps) {
						j++;
					}
					max = Math.max(mulF * (mulS + (j - i)), max);
					i = j;
				}
			}
			out.println(max);
			System.err.println((t + 1) + "/" + tc + " done");
		}
	}

	void run() {
		try {
			in = new FastScanner(new File("A.in"));
			out = new PrintWriter(new File("A.out"));

			solve();

			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	void runIO() {

		in = new FastScanner(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		public FastScanner(InputStream f) {
			br = new BufferedReader(new InputStreamReader(f));
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		boolean hasMoreTokens() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] args) {
		new A().run();
	}
}
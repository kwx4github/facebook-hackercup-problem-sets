#pragma comment(linker, "/stack:32000000")
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <cassert>
#include <string.h>
#include <ctime>

#define pb push_back
#define mp make_pair
#define PI 3.1415926535897932384626433832795
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;

ld mySqrt(ld x) {
	if (x <= 0) return 0;
	return sqrt(x);
}

const ld eps = 1e-9;

int cmp(ld x, ld y) {
	if (fabs(x-y) <= eps) return 0;
	if (x-y < 0) return -1;
	return 1;
}

struct point {
	ld x, y;
	point():x(0),y(0) {}
	point(ld x, ld y):x(x),y(y) {}
	point operator+(const point& o) const {
		return point(x+o.x,y+o.y);
	}
	point operator-(const point& o) const {
		return point(x-o.x,y-o.y);
	}
	point operator*(ld k) const {
		return point(x*k,y*k);
	}
	ld operator*(const point& o) const {
		return x*o.y-y*o.x;
	}
	ld operator%(const point& o) const {
		return x*o.x+y*o.y;
	}
	ld length() const {
		return mySqrt(*this % *this);
	}
	ld distTo(const point& o) const {
		return (*this-o).length();
	}
	point setLength(ld k = 1.) const {
		return *this * (k / length());
	}
	void scan() {
		cin >> x >> y;
	}

};

bool onsegment(point p, point p1, point p2) {
	return cmp(p1.distTo(p2), p1.distTo(p)+p2.distTo(p)) == 0;
}

void solve() {
	
	point st; st.scan();
	int d; scanf("%d", &d);
	int n; scanf("%d", &n);
	vector<point> v(n);
	forn(i, n) v[i].scan();
	int best = 0;
	forn(i1, n) {
		point curv = (v[i1]-st).setLength((ld)d);
		point midp = st + curv;

		int Aval = 0;
		forn(t, n) {
			if (onsegment(v[t],st,midp)) Aval++;
		}

		vector<ld> angles;
		int add = 0;
		forn(i2, n) {
			point cr = v[i2]-midp;
			if (cmp(cr.x,0)==0 && cmp(cr.y,0)==0) {
				add++;
			} else {
				angles.pb(atan2(cr.y, cr.x));
			}
		}
		sort(ALL(angles));
		vector<ld> tmp = angles;
		angles.insert(angles.end(), ALL(tmp));
		int bestval = 0;

		for (int i = 0; i < sz(angles); ) {
			int j = i;
			while (j+1 < sz(angles) && (cmp(fabs(angles[i]-angles[j+1]), 0) == 0 || cmp(fabs(angles[i]-angles[j+1]), 2*PI) == 0)) ++j;
			bestval = max(bestval, min(n-add,j-i+1));
			i = j+1;
		}

		int Bval = add + bestval;
		int curval = Aval * Bval;
		best = max(best, curval);

	}
	printf("%d\n", best);

}

int main()
{
//#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
//#endif
	int T; scanf("%d", &T); for (int tn = 1; tn <= T; ++tn) {
		cerr << tn << "\n";
		printf("Case #%d: ", tn);
		solve();
	}
	return 0;
}
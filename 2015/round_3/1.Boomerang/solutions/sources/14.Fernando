#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <queue>
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 
#include <cstring> 

using namespace std; 

typedef long long ll; 
typedef pair<int, int> pii;

#define INF 1000000000
#define pb push_back 
#define itr iterator 
#define sz size() 
#define mp make_pair

int t, teste;
int x0, y0;
int D, n;
pair<int, int> pt[5000];

bool isinline(double x0, double y0, double fx, double fy, double px, double py) {
	double dy = fy - y0;
	double dx = fx - x0;
	double pdy = py - y0;
	double pdx = px - x0;

	//printf("%f %f %f %f\n", dy,dx,pdy,pdx);

	if (fabs(atan2(pdy, pdx) - atan2(dy, dx)) > 1e-8) return false;
	if (sqrt(pdy*pdy + pdx*pdx) > D + 1e-8) return false;

	return true;
}

int main() {
	for (scanf("%d", &t); t; t--) {
		printf("Case #%d: ", ++teste);

		scanf("%d %d", &x0, &y0);
		scanf("%d %d", &D, &n);
		for (int i = 0; i < n; i++) {
			scanf("%d %d", &pt[i].first, &pt[i].second);
		}

		int best = 0;

		for (int first_hit = 0; first_hit < n; first_hit++) {
			int dx = pt[first_hit].first - x0;
			int dy = pt[first_hit].second - y0;
			double dist = sqrt(dx*dx + dy*dy);
			double fx = x0 + dx * D/dist;
			double fy = y0 + dy * D/dist;

			int A = 0;
			for (int i = 0; i < n; i++) {
				if (isinline(x0, y0, fx, fy, pt[i].first, pt[i].second)) A++;
			}

			int inc = 0;
			int B = 0;
			map<double, int> ct;
			for (int i = 0; i < n; i++) {
				if (fabs(pt[i].first - fx) < 1e-8 && fabs(pt[i].second - fy) < 1e-8) {
					inc++;
					continue;
				}

				double ang = atan2(pt[i].second - fy, pt[i].first - fx);
				ct[ang]++;
			}

			int cur = 0;
			double la = -100;
			for (auto it : ct) {
				if (fabs(it.first - la) > 1e-8) {
					cur = 0;
					la = it.first;
				}
				cur += it.second;
				B = max(B, cur);
			}

			B += inc;
			//printf("%d %d\n", A,B);
			best = max(best, A*B);
		}

		printf("%d\n", best);
	}
}
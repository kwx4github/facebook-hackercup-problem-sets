#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<ld, ld> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

pt operator+ (const pt& a, const pt& b) { return mp(a.x + b.x, a.y + b.y); }
pt operator- (const pt& a, const pt& b) { return mp(a.x - b.x, a.y - b.y); }
pt operator* (const pt& a, const ld& b) { return mp(a.x * b, a.y * b); }
pt operator/ (const pt& a, const ld& b) { return mp(a.x / b, a.y / b); }

ld len(const pt& v) { return sqrt(sqr(v.x) + sqr(v.y)); }

pt normal(const pt& v) { return len(v) < EPS ? v : v / len(v); }
pt normal(const pt& v, const ld& l) { return normal(v) * l; }

bool operator== (const pt& a, const pt& b) { return abs(a.x - b.x) < EPS && abs(a.y - b.y) < EPS; }
bool operator!= (const pt& a, const pt& b) { return !(a == b); }

const int N = 3000 + 3;

pt o;
int n, d;
pt a[N];

inline bool read()
{
	if (!(cin >> o.x >> o.y)) return false;
	scanf("%d%d", &d, &n);
	forn(i, n)
	{
		int x, y;
		scanf("%d%d", &x, &y);
		a[i] = mp(x, y);
	}
	return true;
}

bool onseg(pt a, pt b, pt p)
{
	ld A = b.y - a.y, B = a.x - b.x, C = -(A * a.x + B * a.y);
	if (abs(A * p.x + B * p.y + C) > EPS) return false;
	return min(a.x, b.x) < p.x + EPS && p.x < max(a.x, b.x) + EPS && 
			min(a.y, b.y) < p.y + EPS && p.y < max(a.y, b.y) + EPS;
}

ld ang(pt v) { return atan2(v.y, v.x); }

inline void solve()
{
	int ans = 0;

	forn(i, n)
	{
		pt c = o + normal(a[i] - o, d);

		int A = 0, B = 0;
		forn(j, n) if (onseg(o, c, a[j])) A++;
		forn(j, n) if (a[j] == c) B++;
		ans = max(ans, A * B);

		vector<ld> z;
		forn(j, n) if (a[j] != c) z.pb(ang(a[j] - c));
		sort(all(z));

		for (int j = 0, k = 0; j < sz(z); j = k)
		{
			while (k < sz(z) && abs(z[j] - z[k]) < EPS) k++;
			ans = max(ans, A * (B + (k - j)));
		}
	}
	printf(" %d\n", ans);
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;
    
	int tc;
	cin >> tc;
	forn(t, tc)
	{
		printf("Case #%d:", t + 1);
		assert(read());
		solve();
		cerr << t + 1 << endl;
	}
	
    return 0;
}

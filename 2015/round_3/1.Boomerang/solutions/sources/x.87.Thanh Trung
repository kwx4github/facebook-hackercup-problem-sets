#include <bits/stdc++.h>

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)
#define EACH(it,a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)

#define DEBUG(x) { cout << #x << " = "; cout << (x) << endl; }
#define PR(a,n) { cout << #a << " = "; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }
#define PR0(a,n) { cout << #a << " = "; REP(_,n) cout << a[_] << ' '; cout << endl; }

#define sqr(x) ((x) * (x))
#define SZ(x) ((int) (x).size())
using namespace std;

const double EPS = 1e-8;
inline int cmp(double a, double b) {
    return (a < b - EPS) ? -1 : ((a > b + EPS) ? 1 : 0);
}

struct Point {
    double x, y;
    Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}

    Point operator + (Point a) { return Point(x+a.x, y+a.y); }
    Point operator - (Point a) { return Point(x-a.x, y-a.y); }
    Point operator * (double k) { return Point(x*k, y*k); }
    Point operator / (double k) { return Point(x/k, y/k); }

    double operator * (Point a) { return x*a.x + y*a.y; } // dot product
    double operator % (Point a) { return x*a.y - y*a.x; } // cross product

    int cmp(Point q) const { if (int t = ::cmp(x,q.x)) return t; return ::cmp(y,q.y); }

    #define Comp(x) bool operator x (Point q) const { return cmp(q) x 0; }
    Comp(>) Comp(<) Comp(==) Comp(>=) Comp(<=) Comp(!=)
    #undef Comp

    Point conj() { return Point(x, -y); }
    double norm() { return x*x + y*y; }

    // Note: There are 2 ways for implementing len():
    // 1. sqrt(norm()) --> fast, but inaccurate (produce some values that are of order X^2)
    // 2. hypot(x, y) --> slow, but much more accurate
    double len() { return sqrt(norm()); }

    Point rotate(double alpha) {
        double cosa = cos(alpha), sina = sin(alpha);
        return Point(x * cosa - y * sina, x * sina + y * cosa);
    }

    void read() { cin >> x >> y; }
} a[3011];

int ccw(Point a, Point b, Point c) {
    return cmp((b-a)%(c-a),0);
}

bool order(Point a, Point b, Point c) {
    return cmp(min(a.x, c.x), b.x) <= 0 && cmp(b.x, max(a.x, c.x)) <= 0
        && cmp(min(a.y, c.y), b.y) <= 0 && cmp(b.y, max(a.y, c.y)) <= 0;
}

double angle(Point a, Point o, Point b) { // angle AOB
    a = a - o; b = b - o;
    return acos((a * b) / sqrt(a.norm() * b.norm()));
}
double DEG_to_RAD(double d) { return d * M_PI / 180.0; }
double RAD_to_DEG(double r) { return r * 180.0 / M_PI; }
int main() {
    ios :: sync_with_stdio(false);
    cout << (fixed) << setprecision(9);
    int ntest; cin >> ntest;

//    DEBUG(RAD_to_DEG(acos(-1.0) / 2));
    FOR(test,1,ntest) {
        Point p; p.read();
        double D; cin >> D;
        int n; cin >> n;
        FOR(i,1,n) {
            a[i].read();
            a[i] = a[i] - p;
        }

        vector<double> cur;
        int res = 0;
        FOR(i,1,n) {
            if (cmp(a[i].len(), D) > 0) continue;

            // First round, runs from (0, 0) to p
            Point p = a[i] / a[i].len() * D;
            assert(cmp(p.len(), D) == 0);

            int first = 1;
            FOR(j,1,n) if (j != i) {
                if (ccw(Point(0, 0), a[i], a[j]) == 0 && cmp(a[j].len(), D) <= 0) {
                    if (order(Point(0, 0), a[j], p))
                        ++first;
                }
            }

            // Second round, runs from p
            cur.clear();
            int good = 0;
            FOR(j,1,n) {
                if (a[j] == p) ++good;
                else {
                    double alpha = angle(Point(0, 0), p, a[j]);
                    if (alpha < 0) alpha = -alpha;
                    if (cmp(alpha, acos(-1.0) / 2) <= 0)
                        cur.push_back( atan2( a[j].x - p.x, a[j].y - p.y) );
                }
            }
            sort(cur.begin(), cur.end());

            int second = good;
            if (cur.size() == 1) second = good + 1;

            int equal = 1;
            FOR(i,1,SZ(cur) - 1) {
                if (cmp(cur[i], cur[i-1]) == 0) {
                    ++equal;
                }
                else equal = 1;
                second = max(second, equal + good);
            }

            res = max(res, first * second);
        }
        cout << "Case #" << test << ": " << res << endl;
        cerr << test << endl;
    }
    return 0;
}


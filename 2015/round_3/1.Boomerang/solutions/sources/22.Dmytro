#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

const double pi = 2.0 * acos(0.0);

void readData() {
}

const int maxN = 3100;
const double eps = 1e-10;
int x[maxN], y[maxN], n, d;
double a[maxN];

double dist(double x1, double y1, double x2, double y2) {
	double dx = x1 - x2;
	double dy = y1 - y2;
	return sqrt(dx * dx + dy * dy);
}

void solve(int test) {
	cin >> x[0] >> y[0];
	cin >> d;
	cin >> n;
	for (int i = 1; i <= n; ++i) {
		cin >> x[i] >> y[i];
	}

	int res = 0;
	for (int i = 1; i <= n; ++i) {
		{
			long long dx = x[0] - x[i];
			long long dy = y[0] - y[i];
			if (dx * dx + dy * dy > d * d) {
				continue;
			}
		}

		double dx = x[i] - x[0];
		double dy = y[i] - y[0];
		double s = sqrt(dx * dx + dy * dy);
		dx /= s;
		dy /= s;

		double fx = (double)(x[0]) + (double)(d) * dx;
		double fy = (double)(y[0]) + (double)(d) * dy;

		int A = 0;
		for (int j = 1; j <= n; ++j) {
			double a = dist(x[0], y[0], x[j], y[j]);
			double b = dist(x[j], y[j], fx, fy);
			if (fabs(d - a - b) < eps) {
				++A;
			}
		}

		int B = 0;
		vector < double > a;
		for (int j = 1; j <= n; ++j) {
			if (dist(fx, fy, x[j], y[j]) < eps) {
				++B;
			} else {
				double value = atan2((double)(y[j]) - fy, (double)(x[j]) - fx);
				if (fabs(value + pi) < eps) {
					value = - pi;
				}
				a.push_back(value);
			}
		}
		sort(a.begin(), a.end());
		res = max(res, A * B);
		if (a.size() == 0) {
			continue;
		}

		int start = 0;
		int cnt = 0;
		for (int i = 0; i <= a.size(); ++i) {
			if (i == a.size() || a[i] - a[start] > eps) {
				cnt = max(cnt, i - start);
				start = i;
			}
		}
		res = max(res, A * (B + cnt));
	}
	printf("Case #%d: %d\n", test, res);
}

int main(int argc, char* argv[]) {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int left_bound, right_bound;

	/*freopen(argv[3], "w", stdout);

	
	sscanf(argv[1], "%d", &left_bound);
	sscanf(argv[2], "%d", &right_bound);*/

	int t;
	cin >> t;
	left_bound = 1, right_bound = t;
	for (int i = 1; i <= t; ++i) {
		if (i >= left_bound && i <= right_bound) {
			solve(i);
		}
		cerr << i << ": " << clock() << endl;
	}

	return 0;
}
#include <stdio.h>
#include <memory.h>
#include <math.h>
#include <vector>
#include <algorithm>
#define MN 3000
#define PI 3.1415926535897932384626433832795
#define eps 1e-08
using namespace std;
struct DATA {
	double th; int hi;
	DATA(double _th, int _hi) {th = _th; hi = _hi;}
};
int N, D, R;
int d[MN][2];
vector<pair<double,int> > e;
int asdf[MN*MN];
int main()
{
	freopen("input.txt","r",stdin);
	FILE *out=fopen("output.txt","w");
	int t, T, i, j, k;
	double r, x, y, th;
	
	scanf("%d",&T);
	for (t = 1; t <= T; t++) {
		printf("Case #%d: ",t);
		fprintf(out,"Case #%d: ",t);
		scanf("%d%d%d%d",&i,&j,&D,&N);
		for (k = 0; k < N; k++) {
			scanf("%d%d",&d[k][0],&d[k][1]);
			d[k][0] -= i; d[k][1] -= j;
		}
		e.clear();
		for (i = 0; i < N; i++) {
			if (d[i][0]*d[i][0] + d[i][1]*d[i][1] <= D*D) {
				x = d[i][0]; y = d[i][1]; th = atan2(y,x); if (th < 0) th += 2*PI;
				e.push_back(make_pair(th,0));
			}
		}
		for (i = 0; i < N; i++) {
			int ax = d[i][0], ay = d[i][1];
			double it = atan2(ay,ax); if (it < 0) it += 2*PI;
			int iD = d[i][0]*d[i][0] + d[i][1]*d[i][1];
			if (iD == D*D)
				e.push_back(make_pair(it,3));
			for (j = i+1; j < N; j++) {
				int bx = d[j][0]-d[i][0], by = d[j][1]-d[i][1];
				double jt = atan2(d[j][1]+0.0,d[j][0]+0.0); if (jt < 0) jt += 2*PI;
				int jD = d[j][0]*d[j][0] + d[j][1]*d[j][1];
				k = (ax*bx+ay*by)*(ax*bx+ay*by) - (bx*bx+by*by)*(ax*ax+ay*ay-D*D);
				if (k > 0) {
					r = (-(ax*bx+ay*by) + sqrt(k+0.0))/(bx*bx+by*by);
					x = ax+bx*r; y = ay+by*r; th = atan2(y,x); if (th < 0) th += 2*PI;
					if (iD < D*D) {
						if (jD < D*D)
							e.push_back(make_pair(th,1));
						else if (jD == D*D) {
							if (!(jt-eps<th&&th<jt+eps))
								e.push_back(make_pair(th,1));
						}
						else if (!(jt-eps<th&&th<jt+eps))
							e.push_back(make_pair(th,1));
					}
					else if (iD == D*D) {
						if (!(it-eps<th&&th<it+eps)) {
							if (jD < D*D)
								e.push_back(make_pair(th,1));
							else if (jD == D*D) ;
							else {
								if (!(jt-eps<th&&th<jt+eps))
									e.push_back(make_pair(th,1));
							}
						}
					}
					else {
						if (jD < D*D) {
							if (it-eps<th&&th<it+eps)
								e.push_back(make_pair(th,1));
						}
						else if (jD == D*D) {
							if (!(jt-eps<th&&th<jt+eps)) {
								if (!(it-eps<th&&th<it+eps))
									e.push_back(make_pair(th,1));
							}
						}
						else {
							if (it-eps<th&&th<it+eps && jt-eps<th&&th<jt+eps)
								e.push_back(make_pair(th,2));
							else if (!(it-eps<th&&th<it+eps) && !(jt-eps<th&&th<jt+eps))
								e.push_back(make_pair(th,1));
						}
					}
					r = (-(ax*bx+ay*by) - sqrt(k+0.0))/(bx*bx+by*by);
					x = ax+bx*r; y = ay+by*r; th = atan2(y,x); if (th < 0) th += 2*PI;
					if (iD < D*D) {
						if (jD < D*D)
							e.push_back(make_pair(th,1));
						else if (jD == D*D) {
							if (!(jt-eps<th&&th<jt+eps))
								e.push_back(make_pair(th,1));
						}
						else if (!(jt-eps<th&&th<jt+eps))
							e.push_back(make_pair(th,1));
					}
					else if (iD == D*D) {
						if (!(it-eps<th&&th<it+eps)) {
							if (jD < D*D)
								e.push_back(make_pair(th,1));
							else if (jD == D*D) ;
							else {
								if (!(jt-eps<th&&th<jt+eps))
									e.push_back(make_pair(th,1));
							}
						}
					}
					else {
						if (jD < D*D) {
							if (it-eps<th&&th<it+eps)
								e.push_back(make_pair(th,1));
						}
						else if (jD == D*D) {
							if (!(jt-eps<th&&th<jt+eps)) {
								if (!(it-eps<th&&th<it+eps))
									e.push_back(make_pair(th,1));
							}
						}
						else {
							if (it-eps<th&&th<it+eps && jt-eps<th&&th<jt+eps)
								e.push_back(make_pair(th,2));
							else if (!(it-eps<th&&th<it+eps) && !(jt-eps<th&&th<jt+eps))
								e.push_back(make_pair(th,1));
						}
					}
				}
				else if (k == 0) {
					r = (-(ax*bx+ay*by))/(bx*bx+by*by);
					x = ax+bx*r; y = ay+by*r; th = atan2(y,x); if (th < 0) th += 2*PI;
					if (iD < D*D) {
						if (jD < D*D)
							e.push_back(make_pair(th,1));
						else if (jD == D*D) {
							if (!(jt-eps<th&&th<jt+eps))
								e.push_back(make_pair(th,1));
						}
						else if (!(jt-eps<th&&th<jt+eps))
							e.push_back(make_pair(th,1));
					}
					else if (iD == D*D) {
						if (!(it-eps<th&&th<it+eps)) {
							if (jD < D*D)
								e.push_back(make_pair(th,1));
							else if (jD == D*D) ;
							else {
								if (!(jt-eps<th&&th<jt+eps))
									e.push_back(make_pair(th,1));
							}
						}
					}
					else {
						if (jD < D*D) {
							if (it-eps<th&&th<it+eps)
								e.push_back(make_pair(th,1));
						}
						else if (jD == D*D) {
							if (!(jt-eps<th&&th<jt+eps)) {
								if (!(it-eps<th&&th<it+eps))
									e.push_back(make_pair(th,1));
							}
						}
						else {
							if (it-eps<th&&th<it+eps && jt-eps<th&&th<jt+eps)
								e.push_back(make_pair(th,2));
							else if (!(it-eps<th&&th<it+eps) && !(jt-eps<th&&th<jt+eps))
								e.push_back(make_pair(th,1));
						}
					}
				}
			}
		}
		sort(e.begin(),e.end());
		memset(asdf,0,sizeof(asdf));
		asdf[0] = 1; for (k = 2; k <= N; k++) asdf[k*(k-1)/2] = k;
		R = 0;
		j = 0;
		for (i = 0; i < e.size(); i = j) {
			int A, B, C, D;
			A = B = C = D = 0;
			for (j = i; j < e.size(); j++) {
				if (!(e[i].first-eps < e[j].first && e[j].first < e[i].first+eps)) break;
				if (e[j].second == 0) A++;
				else if (e[j].second == 1) B++;
				else if (e[j].second == 2) C++;
				else D++;
			}
			B = asdf[B]; C = asdf[C];
			if (R < A*(B+D)) R = A*(B+D);
			if (R < A*(C+D)) R = A*(C+D);
		}
		fprintf(out,"%d\n",R);
	}
	fclose(out);
	return 0;
}
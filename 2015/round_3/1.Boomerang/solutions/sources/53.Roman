#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"
const ld eps = 1e-9;
struct pnt {
  ld x, y;
  pnt() {
  }
  pnt(ld x, ld y) :x(x),y(y) {
  }
};
pnt operator + (const pnt& a, const pnt& b) {
  return pnt(a.x + b.x, a.y + b.y);
}
pnt operator - (const pnt& a, const pnt& b) {
  return pnt(a.x - b.x, a.y - b.y);
}
pnt operator * (const pnt& a, ld c) {
  return pnt(a.x * c, a.y * c);
}
pnt operator / (const pnt& a, ld c) {
  return pnt(a.x / c, a.y / c);
}
ld sp(const pnt& a, const pnt& b) {
  return a.x * b.x + a.y * b.y;
}
ld vp(const pnt& a, const pnt& b) {
  return a.x * b.y - a.y * b.x;
}
int hp(const pnt& p) {
  if (p.y > eps || (fabs(p.y) <= eps && p.x > eps)) {
    return 1;
  }
  return 2;
}
bool operator < (const pnt& a, const pnt& b) {
  if (hp(a) != hp(b)) {
    return hp(a) < hp(b);
  }
  return vp(a, b) > eps;
}
int n;
ld D;
pnt p[10000];
void readp(pnt& p) {
  double x, y;
  scanf("%lf %lf", &x, &y);
  p = pnt(x, y);
}
int solve(pnt p0, ld D, int fl) {
  vector<pnt> ls;
  int cur = 0;
  int res = 0;
  for (int i = 0; i < n; i++) {
    pnt pp = p[i] - p0;
    ld dd = sqrt(sp(pp, pp));
    if (fabs(dd) <= eps) {
      cur++;
    } else 
    if (fabs(dd) <= D + eps) {
      ls.pb(pp);
    }
  }
  sort(all(ls));
  int pr = -1;
  for (int i = 0; i < sz(ls); i++) {
    if (i == sz(ls) - 1 || ls[i] < ls[i + 1]) {
      int vv = cur + i - pr;
      pnt np = p0 + (ls[i] / sqrt(sp(ls[i], ls[i])) * D);
      if (fl == 1) {
        res = max(res, vv * solve(np, 1000, 0));
      } else {
        res = max(res, vv);
      }
      pr = i;
    }
  }
  if (fl == 1) {
    res = max(res, cur * solve(p0 + pnt(D, 0), 1000, 0));
  } else {
    res = max(res, cur);
  }
  return res;
}
void solve() {
  pnt p0;
  readp(p0);
  double d0;
  scanf("%lf", &d0);
  scanf("%d", &n);
  D = d0;
  for (int i = 0; i < n; i++) {
    readp(p[i]);
  }
  int res = solve(p0, D, 1);
  printf("%d\n", res);
}

int main(){
  #ifdef home
  assert(freopen(problem_name".out","wt",stdout));
  assert(freopen(problem_name".in","rt",stdin));
  #endif
  int T;
  scanf("%d", &T);
  for (int ti = 1; ti <= T; ti++) {
    printf("Case #%d: ", ti);
    solve();
  }
  return 0;
}

#include <vector>
#include <cassert>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

inline int gcd(int a, int b) {
  while (a > 0 && b > 0)
    if (a > b) a %= b;
    else b %= a;
  return a + b;
}

const int N = 77777;
const long double eps = 1e-10;
const long double pi = acosl(-1.0);

int x[N], y[N];

int main(int argc, char* argv[]) {
  int TEST_FROM = 0;
  int TEST_TO = 123456789;
  if (argc == 3) {
    sscanf(argv[1], "%d", &TEST_FROM);
    sscanf(argv[2], "%d", &TEST_TO);
  }
  freopen("in", "r", stdin);
  freopen("out", "w", stdout);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    fflush(stdout);
    int xs, ys, n, d;
    scanf("%d %d", &xs, &ys);
    scanf("%d", &d);
    scanf("%d", &n);
    vector < pair <int, int> > e;
    for (int i = 0; i < n; i++) {
      scanf("%d %d", x + i, y + i);
      x[i] -= xs;
      y[i] -= ys;
      if (x[i] * x[i] + y[i] * y[i] <= d * d) {
        int g = gcd(abs(x[i]), abs(y[i]));
        assert(g > 0);
        e.push_back(make_pair(x[i] / g, y[i] / g));
      }
    }
    sort(e.begin(), e.end());
    int sz = e.size();
    int ans = 0;
    int beg = 0;
    while (beg < sz) {
      int end = beg;
      while (end + 1 < sz && e[end + 1] == e[beg]) {
        end++;
      }
      int A = end - beg + 1;
      long double coeff = sqrt(1.0 * (e[beg].first * e[beg].first + e[beg].second * e[beg].second) / (d * 1.0 * d));
      long double dx = e[beg].first / coeff;
      long double dy = e[beg].second / coeff;
      int add = 0;
      vector <long double> angs;
      for (int i = 0; i < n; i++) {
        long double rx = x[i] - dx;
        long double ry = y[i] - dy;
        if (fabsl(rx) < eps && fabsl(ry) < eps) {
          add++;
          continue;
        }
        long double ang = atan2l(ry, rx);
        if (ang > pi - eps) {
          ang = -pi;
        }
        angs.push_back(ang);
      }
      sort(angs.begin(), angs.end());
      int a_sz = angs.size();
      int B = 0;
      int a_beg = 0;
      while (a_beg < a_sz) {
        int a_end = a_beg;
        while (a_end + 1 < a_sz && fabsl(angs[a_end + 1] - angs[a_beg]) < eps) {
          a_end++;
        }
        int cur = a_end - a_beg + 1;
        if (cur > B) {
          B = cur;
        }
        a_beg = a_end + 1;
      }
      B += add;
      if (A * B > ans) {
        ans = A * B;
      }
      beg = end + 1;
    }
    printf("%d\n", ans);
    fflush(stdout);
    fprintf(stderr, "test %d solved, time = %d ms\n", qq, clock());
  }
  return 0;
}

#include<cmath>
#include<vector>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>

using namespace std;

const double PI = acos(-1), eps = 1e-8;

int sign(const double &x) {
    return x < -eps ? -1 : x > eps;
}

struct Point {
    double x, y;

    Point(double x = 0, double y = 0) : x(x), y(y) {}

    void in() {
        scanf("%lf%lf", &x, &y);
    }

    double len() {
        return sqrt(x * x + y * y);
    }

    double ang() {
        double ret = atan2(y, x);
        if (sign(ret - PI) == 0) {
            ret = -PI;
        }
        return ret;
    }

    Point unit() {
        double l = len();
        return Point(x / l, y / l);
    }
};

Point operator + (const Point &a, const Point &b) {
    return Point(a.x + b.x, a.y + b.y);
}

Point operator - (const Point &a, const Point &b) {
    return Point(a.x - b.x, a.y - b.y);
}

Point operator * (const Point &a, const double &k) {
    return Point(a.x * k, a.y * k);
}

double dot(const Point &a, const Point &b) {
    return a.x * b.x + a.y * b.y;
}

double det(const Point &a, const Point &b) {
    return a.x * b.y - a.y * b.x;
}

bool onSeg(const Point &a, const Point &b, const Point &p) {
    return sign(det(b - a, p - a)) == 0 &&
           sign(dot(b - a, p - a)) >= 0 && sign(dot(a - b, p - b)) >= 0;
}

const int N = 3005;

int n, d;

Point s, p[N];

int cal(Point c) {
    int a = 0, b = 0;
    Point t = (c - s).unit() * d + s;
    vector<double> v;
    for (int i = 0; i < n; ++i) {
        if (sign((t - p[i]).len()) == 0) {
            ++b;
        }
        if (onSeg(s, t, p[i])) {
            ++a;
        }
        if (sign((t - p[i]).len()) != 0) {
            v.push_back((p[i] - t).ang());
        }
    }
    sort(v.begin(), v.end());
    int mb = 0;
    for (int i = 0; i < (int)v.size(); ++i) {
        int j = i;
        while (j < (int)v.size() && sign(v[j] - v[i]) == 0) {
            ++j;
        }
        mb = max(mb, j - i);
        i = j - 1;
    }
    b += mb;
    //cout << c.x << ' ' << c.y << ' ' << a << ' ' << b << endl;
    return a * b;
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        s.in();
        scanf("%d%d", &d, &n);
        for (int i = 0; i < n; ++i) {
            p[i].in();
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, cal(p[i]));
        }
        static int id = 0;
        printf("Case #%d: %d %d %d\n", ++id, n, d, ans);
    }
    return 0;
}

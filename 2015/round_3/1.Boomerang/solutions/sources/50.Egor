#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define forn(i, n) for (int i = 0; i < (n); i++)

typedef long long ll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef pair<int, int> pii;
typedef long double ld;
//#warning warning LD!
//typedef double ld;

const ld eps = 1e-9;

int sgn(ld x) {
  return x < -eps ? -1 : x > eps;
}

struct pt {
  ld x, y;
  pt() : x(0), y(0) {}
  pt(ld _x, ld _y) : x(_x), y(_y) {}
  pt operator-(const pt &p2) const { return pt(x - p2.x, y - p2.y); }
  ld dist() const { return sqrt(x * x + y * y); }
  void setLength(ld len) {
    ld d = sqrt(x * x + y * y);
    assert(d > eps);
    ld k = len / d;
    x *= k;
    y *= k;
    assert(fabs(dist() - len) < eps);
  }
  bool operator==(const pt &p2) {
    return fabs(x - p2.x) < eps && fabs(y - p2.y) < eps;
  }
  int operator*(const pt &p2) const {
    return sgn(x * p2.y - y * p2.x);
  }
  bool hpl() const {
    if (fabs(y) < eps) {
      assert(fabs(x) > eps);
      return x > eps;
    }
    return y >= eps;
  }
};

ld readLd() {
  double x;
  scanf("%lf", &x);
  return x;
}

struct line {
  ld a, b, c;
  line(const pt &p1, const pt &p2) {
    a = p1.y - p2.y;
    b = p2.x - p1.x;
    c = -a * p1.x - b * p1.y;
    assert(side(p1) == 0);
    assert(side(p2) == 0);
    assert(a * a + b * b > eps);
  }
  int side(const pt &p) {
    return sgn(a * p.x + b * p.y + c);
  }
};

bool is_in(ld a, ld b, ld x) {
  if (a > b) swap(a, b);
  return a <= x + eps && x - eps <= b;
}

bool on_segm(const pt &a, const pt &b, const pt &p) {
  line l(a, b);
  if (l.side(p)) return false;
  return is_in(a.x, b.x, p.x) && is_in(a.y, b.y, p.y);
}

struct AngCmp {
  bool operator()(pt a, pt b) {
    int sa = a.hpl();
    int sb = b.hpl();
    if (sa != sb) return sa < sb;
    return a * b > 0;
  }
};

void solve() {
  pt start;
  start.x = readLd();
  start.y = readLd();

  ld d; int n;
  d = readLd();
  scanf("%d", &n);
  vector<pt> pts(n);
  for (pt &p : pts) {
    p.x = readLd();
    p.y = readLd();
    p = p - start;
//    eprintf("%.2lf %.2lf\n", p.x, p.y);
  }
  start = pt();

  int ans = 0;
  forn (fir, n) if (pts[fir].dist() <= d + eps) {
    pt goal = pts[fir];
    goal.setLength(d);

    int A = 0;
    forn (i, n) if (on_segm(pt(), goal, pts[i])) A++;

    map<pt, int, AngCmp> byDir;
    int baseB = 0;
    forn (sec, n) {
      if (pts[sec] == goal) {
        baseB++;
        continue;
      }
      byDir[pts[sec] - goal]++;
    }
    ans = max(ans, A * baseB);
    for (auto it : byDir) {
      ans = max(ans, A * (baseB + it.second));
    }
  }
  printf("%d\n", ans);
}

int main(int argc, char* argv[]) {
  assert(argc <= 3);
  if (argc == 3) {
    assert(freopen(argv[1], "r", stdin));
    assert(freopen(argv[2], "w", stdout));
  } else {
    string filename = ".in";
    if (argc >= 2) filename = argv[1];

    assert(freopen(filename.c_str(), "r", stdin));

    if (filename.length() >= 3 && string(filename, filename.length() - 3, 3) == ".in") {
      filename = string(filename, 0, filename.length() - 3);
    }
    filename += ".out";
    assert(freopen(filename.c_str(), "w", stdout));
  }

  int TN;
  char buf[16];
  assert(fgets(buf, sizeof buf, stdin));
  assert(sscanf(buf, "%d", &TN) >= 1);
  for (int TID = 1; TID <= TN; TID++)
    try {
      eprintf("===== Solving test case #%d =====\n", TID);
      printf("Case #%d: ", TID);
      solve();
    } catch (...) {
      eprintf("Exception was caught while executing on test #%d\n", TID);
      return 1;
    }
  return 0;
}

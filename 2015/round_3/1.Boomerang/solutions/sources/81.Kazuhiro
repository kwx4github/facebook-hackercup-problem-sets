#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <cstdint>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long Int;
typedef vector<int> vint;
typedef pair<int, int> pint;
#define mp make_pair

template <typename T1, typename T2> ostream &operator<<(ostream &os, const pair<T1, T2> &a) { return os << "(" << a.first << ", " << a.second << ")"; };
template <typename T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template <typename T> void chmin(T &t, const T &f) { if (t > f) t = f; }
template <typename T> void chmax(T &t, const T &f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }


typedef long double Double;

struct Pt {
	Double x, y;
	Pt() {}
	Pt(Double x, Double y) : x(x), y(y) {}
	Pt operator+(const Pt &a) const { return Pt(x + a.x, y + a.y); }
	Pt operator-(const Pt &a) const { return Pt(x - a.x, y - a.y); }
	Pt operator*(const Pt &a) const { return Pt(x * a.x - y * a.y, x * a.y + y * a.x); }
	Pt operator/(const Pt &a) const { const Double d2 = a.abs2(); return Pt((x * a.x + y * a.y) / d2, (y * a.x - x * a.y) / d2); }
	Pt operator+() const { return Pt(+x, +y); }
	Pt operator-() const { return Pt(-x, -y); }
	Pt operator*(const Double &k) const { return Pt(x * k, y * k); }
	Pt operator/(const Double &k) const { return Pt(x / k, y / k); }
	friend Pt operator*(const Double &k, const Pt &a) { return Pt(k * a.x, k * a.y); }
	Pt &operator+=(const Pt &a) { x += a.x; y += a.y; return *this; }
	Pt &operator-=(const Pt &a) { x -= a.x; y -= a.y; return *this; }
	Pt &operator*=(const Pt &a) { return *this = *this * a; }
	Pt &operator/=(const Pt &a) { return *this = *this / a; }
	Pt &operator*=(const Double &k) { x *= k; y *= k; return *this; }
	Pt &operator/=(const Double &k) { x /= k; y /= k; return *this; }
	Double abs() const { return sqrt(x * x + y * y); }
	Double abs2() const { return x * x + y * y; }
	Double arg() const { return atan2(y, x); }
	Double dot(const Pt &a) const { return x * a.x + y * a.y; }
	Double det(const Pt &a) const { return x * a.y - y * a.x; }
	friend ostream &operator<<(ostream &os, const Pt &a) { os << "(" << a.x << ", " << a.y << ")"; return os; }
};
const Double EPS = 1e-10;
const Double INF = 1e+10;
const Double PI = acos(-1.0);
inline int sig(Double r) { return (r < -EPS) ? -1 : (r > +EPS) ? +1 : 0; }
inline Double tri(const Pt &a, const Pt &b, const Pt &c) { return (b - a).det(c - a); }

int sdot(const Pt &a, const Pt &b) {
	const Double dot = a.dot(b);
	const Double eps = EPS * (1.0 + a.abs() * b.abs());
	return (dot < -eps) ? -1 : (dot > +eps) ? +1 : 0;
}
int sdet(const Pt &a, const Pt &b) {
	const Double det = a.det(b);
	const Double eps = EPS * (1.0 + a.abs() * b.abs());
	return (det < -eps) ? -1 : (det > +eps) ? +1 : 0;
}
int stri(const Pt &a, const Pt &b, const Pt &c) {
	return sdet(b - a, c - a);
}

bool check1(Pt a, Pt b, Pt c) {
	if (sig(abs(tri(a, b, c)) / (b - a).abs()) != 0) {
		return false;
	}
	return (sdot(b - a, c - a) >= 0 && sdot(a - b, c - b) >= 0);
}

Pt O;
Double D;
int N;
Pt P[3010];

int thsLen;
Double ths[100010];

int main() {
	
	
	for (int TC = in(), tc = 1; tc <= TC; ++tc) {
cerr<<"BEGIN Case #"<<tc<<endl;
		scanf("%Lf%Lf", &O.x, &O.y);
		scanf("%Lf", &D);
		N = in();
		for (int i = 0; i < N; ++i) {
			scanf("%Lf%Lf", &P[i].x, &P[i].y);
		}
		int ans = 0;
		for (int i = 0; i < N; ++i) {
			int score1 = 0;
			int score2 = 0;
			Pt v = P[i] - O;
			assert(sig(v.abs()) != 0);
			v /= v.abs();
			const Pt q = O + D * v;
			for (int j = 0; j < N; ++j) {
				if (check1(O, q, P[j])) {
					++score1;
				}
			}
			thsLen = 0;
			for (int j = 0; j < N; ++j) {
				if (sig((P[j] - q).abs()) == 0) {
					++score2;
				} else {
					const double th = (P[j] - q).arg();
					ths[thsLen++] = th;
					ths[thsLen++] = th + PI * 2;
				}
			}
			sort(ths, ths + thsLen);
// cout<<"ths : ";pv(ths,ths+thsLen);
			int mx = 0;
			for (int x = 0, y; x < thsLen; ++x) {
				for (y = x; y < thsLen && sig(ths[y] - ths[x]) == 0; ++y);
				chmax(mx, y - x);
			}
			score2 += mx;
// cout<<q<<" "<<score1<<" "<<score2<<endl;
			chmax(ans, score1 * score2);
		}
		printf("Case #%d: %d\n", tc, ans);
	}
	
	return 0;
}


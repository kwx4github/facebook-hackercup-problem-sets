#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <stack>
#include <sstream>
#include <cstring>
#include <numeric>
#include <ctime>

#define re return
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) ((int) (x).size())
#define rep(i, n) for (int i = 0; i < (n); i++)
#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)
#define y0 y32479
#define y1 y95874
#define fill(x, y) memset(x, y, sizeof(x))
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define unq(x) (x.resize(unique(all(x)) - x.begin()))
#define spc(i,n) " \n"[i == n - 1]

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef double D;
typedef long double LD;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;

template<class T> T abs(T x) { return x > 0 ? x : -x;}

int m;
int n;
ll d;

ll x0, y0;
ll x[5000], y[5000];
double cx, cy;

ll cross(ll x1, ll y1, ll x2, ll y2) {
	re x1 * y2 - x2 * y1;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int tc;
	cin >> tc;
	rep(tt, tc) {
		cout << "Case #" << tt + 1 << ": ";

		cin >> x0 >> y0;
		cin >> d >> n;
		rep(i, n) {
			cin >> x[i] >> y[i];
			x[i] -= x0;
			y[i] -= y0;
		}

		ll ans = 0;

		rep(i, n)
		if (sqr(x[i]) + sqr(y[i]) <= sqr(d)) {
			ll a = 0;
			rep(j, n)
			if (sqr(x[j]) + sqr(y[j]) <= sqr(d))
				if (cross(x[i], y[i], x[j], y[j]) == 0)
					if (x[i] * x[j] + y[i] * y[j] >= 0)
						a++;
			double ang = atan2(y[i], x[i]);
			cx = d * cos(ang);
			cy = d * sin(ang);
			vector<double> v;
			ll f = 0;
			double eps = 1e-7;
			rep(j, n) {
				if (abs(y[j] - cy) < eps && abs(x[j] - cx) < eps)
					f++;
				else {
					double tmp = atan2(y[j] - cy, x[j] - cx);
					if (abs(tmp + M_PI) < eps)
						tmp = M_PI;
					v.pb(tmp);
				}
			}
			sort(all(v));
			int cm = 0;
			int l = 0;
			for (int i = 1; i <= sz(v); i++)
				if (i == sz(v) || abs(v[i] - v[i - 1]) > eps) {
					cm = max(cm, i - l);
					l = i;
				}
			ans = max(ans, (ll)a * (cm + f));
		}
		cout << ans << endl;
	}



	re 0;
}

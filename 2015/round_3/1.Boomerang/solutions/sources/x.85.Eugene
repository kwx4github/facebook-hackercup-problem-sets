#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
#define uint unsigned int
#define LL long long
#define ULL unsigned LL
#define VI vector<int>
#define X first
#define Y second
#define sz(_v) ((int)_v.size())
#define all(_v) (_v).begin(),(_v).end()
#define FOR(_i,a,b) for (int _i(a),_l(b); _i<=_l; ++_i)
#define rept(i,a) FOR(i,0,(int)(a)-1)
#define x1 X1
#define y1 Y1
#define sqr(a) ((a)*(a))
#define C(a) memset((a),0,sizeof (a))
#define MS(a,x) memset((a),(x),sizeof (a))
#define INF 1050000000
#define INFL INF*1ll*INF
#define PI 3.141592653589
#define eps 1e-10
#define MOD 1000000000
#define PRIME 312427
#define MOD2 500000004

using namespace std;

// do not use FOR for long-long
// check stack in case of crash
// check INF before submit

void init() {
}

void prepareTest() {
}

pdd center;

double sqr2(const pii &a, const pii &b) {
	return (a.X-center.X)*(b.Y-center.Y)-(a.Y-center.Y)*(b.X-center.X);
}

bool oneLine(const pii &a, const pii &b) {
	return abs(sqr2(a,b)) < eps;
}

bool cmp(const pii &a, const pii &b) {
	return sqr2(a,b)>0;
}

LL sqrDist(pii &a, pii &b) {
	return sqr(a.X-b.X)+sqr(a.Y-b.Y);
}

bool between(pii &a, pii &b, pii &pts) {
	return pts.X>=min(a.X,b.X) && pts.X<=max(b.X,a.X) && pts.Y>=min(a.Y,b.Y) && pts.Y<=max(b.Y,a.Y);
}

int getMax(pdd point, vector< pii > pts) {
	vector< pii > newPts;
	int have(0);
	rept(i,sz(pts)) {
		if (abs(pts[i].X-point.X) < eps && abs(pts[i].Y-point.Y) < eps) {
			++have;
		} else {
			newPts.pb(pts[i]);
		}
	}
	center=point;
	pts=newPts;
	sort(all(pts),cmp);
	int mx(0);
	int l(0);
	while (l<sz(pts)) {
		int cnt(1);
		while (cnt<sz(pts) && oneLine(pts[l],pts[l+cnt])) ++cnt;
		mx=max(mx,cnt);
		l+=cnt;
	}
	return mx+have;
}

void solveTest() {
	int x0,y0;
	scanf("%d%d",&x0,&y0);
	pii p(x0,y0);
	int d,n;
	scanf("%d%d",&d,&n);
	vector< pii > pts(n);
	rept(i,n) scanf("%d%d",&pts[i].X,&pts[i].Y);
	int ans(0);
	rept(i,n) {
		int have(0);
		rept(j,n) {
			if (sqrDist(pts[j],p)<=d*d) {
				if (between(p,pts[i],pts[j]) || between(p,pts[j],pts[i])) {
					++have;
				}
			}
		}
//		cerr<<i<<" "<<have<<endl;
		double dst(sqrt(sqrDist(pts[i],p)+0.));
//		cerr<<dst<<endl;
		pdd nP((pts[i].X-x0)/dst*d,(pts[i].Y-y0)/dst*d);
//		cerr<<nP.X<<" "<<nP.Y<<endl;
		ans=max(ans,have*getMax(nP,pts));
	}
	printf("%d\n",ans);
}

void solve() {
	int tst;
	init();
	scanf("%d\n",&tst);
	FOR(i,1,tst) {
		cerr<<"TEST "<<i<<" is running..."<<endl;
		printf("Case #%d: ",i);
		prepareTest();
		solveTest();
		cerr<<"TEST "<<i<<" complete!"<<endl;
	}
}

int main() {
	freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);

	clock_t tm = clock();
	solve();
	cerr<<setprecision(3)<<(clock()-tm+0.)/CLOCKS_PER_SEC<<endl;
	return 0;
}

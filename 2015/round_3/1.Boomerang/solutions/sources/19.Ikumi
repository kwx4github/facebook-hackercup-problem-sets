#include<stdio.h>
#include<algorithm>
#include<math.h>
using namespace std;
const double EPS = 1e-10;
const double INF = 1e+10;
const double PI = acos(-1);
int sig(double r) { return (r < -EPS) ? -1 : (r > +EPS) ? +1 : 0; }
inline double ABS(double a){return max(a,-a);}
struct Pt {
	double x, y;
	Pt() {}
	Pt(double x, double y) : x(x), y(y) {}
	Pt operator+(const Pt &a) const { return Pt(x + a.x, y + a.y); }
	Pt operator-(const Pt &a) const { return Pt(x - a.x, y - a.y); }
	Pt operator*(const Pt &a) const { return Pt(x * a.x - y * a.y, x * a.y + y * a.x); }
	Pt operator-() const { return Pt(-x, -y); }
	Pt operator*(const double &k) const { return Pt(x * k, y * k); }
	Pt operator/(const double &k) const { return Pt(x / k, y / k); }
	double ABS() const { return sqrt(x * x + y * y); }
	double abs2() const { return x * x + y * y; }
	double arg() const { return atan2(y, x); }
	double dot(const Pt &a) const { return x * a.x + y * a.y; }
	double det(const Pt &a) const { return x * a.y - y * a.x; }
};
double tri(const Pt &a, const Pt &b, const Pt &c) { return (b - a).det(c - a); }
int iSP(Pt a, Pt b, Pt c) {
	int s = sig((b - a).det(c - a));
	if (s) return s;
	if (sig((b - a).dot(c - a)) < 0) return -2; // c-a-b
	if (sig((a - b).dot(c - b)) < 0) return +2; // a-b-c
	return 0;
}
double th[3100];
Pt p[3100];
int main(){
	int T;scanf("%d",&T);
	for(int t=1;t<=T;t++){
		double X,Y;
		scanf("%lf%lf",&X,&Y);
		Pt p0=Pt(X,Y);
		int b,a;
		scanf("%d%d",&b,&a);
		for(int i=0;i<a;i++){
			double ix,iy;
			scanf("%lf%lf",&ix,&iy);
			p[i]=Pt(ix,iy);
		}
		p0=p0*Pt(cos(1.0),sin(1.0));
		for(int i=0;i<a;i++)p[i]=p[i]*Pt(cos(1.0),sin(1.0));
		int ret=0;
		for(int i=0;i<a;i++){
			if((p[i]-p0).ABS()>EPS+b)continue;
			Pt at=p0+(p[i]-p0)/(p[i]-p0).ABS()*(double)b;
			int A=0;
			for(int j=0;j<a;j++){
				if((p[j]-p0).ABS()<EPS||(p[j]-at).ABS()<EPS)A++;
				else if(iSP(p0,p[j],at)==2){
					A++;
				}
			}
			int C=0;
			int B=0;
			int sz=0;
			for(int j=0;j<a;j++){
				if((at-p[j]).ABS()<EPS){
					C++;continue;
				}
				th[sz++]=atan2(p[j].y-at.y,p[j].x-at.x);
			}
			std::sort(th,th+sz);
			int now=0;
			B=C;
			for(int j=0;j<sz;j++){
				if(j==0||th[j]-th[j-1]<EPS)now++;
				else now=1;
				B=max(B,C+now);
			}
			ret=max(ret,A*B);
		//	printf("%f %f %f %f %d %d\n",at.x,at.y,p[0].x,p[0].y,A,B);
		}
		printf("Case #%d: %d\n",t,ret);
	}
}
#include <bits/stdc++.h>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define PII pair<int,int>
#define VPII vector<pair<int,int> >
#define PLL pair<long long,long long>
#define F first
#define S second
typedef long long LL;
using namespace std;
const int MOD = 1e9+7;
const double EPS = 1e-12;
const int SIZE = 3e3+10;
int x[SIZE],y[SIZE],n;
double tmp[SIZE];
pair<double,int>dir[SIZE];
int sqr(int x){return x*x;}
int go(double aa,double D){
    double xx=D*cos(aa);
    double yy=D*sin(aa);
    int base=0;
    int tn=0;
    REP(i,n){
        if(fabs(xx-x[i])<EPS&&fabs(yy-y[i])<EPS)base++;
        else{
            tmp[tn++]=atan2(y[i]-yy,x[i]-xx);
        }
    }
    sort(tmp,tmp+tn);
    int ma=0;
    for(int i=0,j;i<tn;i=j){
        for(j=i+1;j<tn&&fabs(tmp[j]-tmp[i])<EPS;j++);
        ma=max(ma,j-i);
    }
    //printf("[%d]\n",ma+base);
    return ma+base;
}
int main(){
    CASET{
        DRII(x0,y0);
        DRI(D);
        RI(n);
        REP(i,n){
            RII(x[i],y[i]);
            x[i]-=x0;
            y[i]-=y0;
            dir[i]=MP(atan2(y[i],x[i]),sqr(y[i])+sqr(x[i]));
        }
        int an=0;
        sort(dir,dir+n);
        for(int i=0,j;i<n;i=j){
            int me=0;
            for(j=i;j<n&&fabs(dir[j].F-dir[i].F)<EPS;j++){
                if(sqr(D)>=dir[j].S)me++;
            }
            an=max(an,me*go(dir[i].F,D));

        }
        printf("Case #%d: %d\n",case_n++,an);
    }
    return 0;
}

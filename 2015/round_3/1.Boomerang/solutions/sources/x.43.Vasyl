#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define EPS 1e-13

int X[1 << 12];
int Y[1 << 12];
double Z[1 << 12];

int SolveTest(int test)
{
	int x, y, d, n;
	scanf("%d%d%d%d", &x, &y, &d, &n);

	int i, j;
	FOR(i, 0, n)
		scanf("%d%d", &X[i], &Y[i]);

	int res = 0;
	FOR(i, 0, n)
	{
		int dx = X[i] - x;
		int dy = Y[i] - y;
		double dz = sqrt(dx*dx + dy*dy + 0.0);

		double xx = x + d * dx / dz;
		double yy = y + d * dy / dz;

		int cnt = 0;
		int cnt2 = 0;
		int am = 0;
		FOR(j, 0, n)
		{
			int dx1 = X[j] - x;
			int dy1 = Y[j] - y;
			int d1 = dx1*dx1 + dy1*dy1;

			int fail = 0;
			if (dx*dy1 == dy*dx1 && dx*dx1 + dy*dy1 > 0 && d1 <= d*d)
			{
				++cnt;

				if (d1 == d*d)
				{
					fail = 1;
					++cnt2;
				}
			}

			if (fail == 0)
			{
				Z[am] = atan2(Y[j] - yy, X[j] - yy);
				++am;
			}
		}

		sort(Z, Z + am);
		VInt v;
		FOR(j, 0, am)
		{
			double a = Z[j] - Z[(j + 1) % am];
			a = atan2(sin(a), cos(a));
			if (fabs(a) > EPS)
				v.push_back(j);
		}

		int r = 0;
		if (v.empty())
			r = am;

		FOR(j, 0, SIZE(v))
		{
			r = max(r, (am - v[j] + v[(j + 1) % SIZE(v)]) % am);
		}

		res = max(res, cnt * (cnt2 + r));
	}

	printf("Case #%d: %d\n", test + 1, res);
	return 0;
}

int main()
{
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

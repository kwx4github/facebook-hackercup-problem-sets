#include<stdio.h>
#include<stdlib.h>
#include<cstring>
#include<iostream>
#include<ctype.h>
#include<algorithm>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<cmath>
#include<bitset>
#include<iomanip>
#include<complex>
#include<utility>

#define X first
#define Y second
#define REP_0(i,n) for(int i=0;i<(n);++i)
#define REP_1(i,n) for(int i=1;i<=(n);++i)
#define REP_2(i,a,b) for(int i=(a);i<(b);++i)
#define REP_3(i,a,b) for(int i=(a);i<=(b);++i)
#define REP_4(i,a,b,c) for(int i=(a);i<(b);i+=(c))
#define DOW_0(i,n) for(int i=(n)-1;-1<i;--i)
#define DOW_1(i,n) for(int i=(n);0<i;--i)
#define DOW_2(i,a,b) for(int i=(b);(a)<i;--i)
#define DOW_3(i,a,b) for(int i=(b);(a)<=i;--i)
#define FOREACH(a,b) for(typeof((b).begin()) a=(b).begin();a!=(b).end();++a)
#define RFOREACH(a,b) for(typeof((b).rbegin()) a=(b).rbegin();a!=(b).rend();++a)
#define PB push_back
#define PF push_front
#define MP make_pair
#define IS insert
#define ES erase
#define IT iterator
#define RI reserve_iterator
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define ALL(x) x.begin(),x.end()

#define PI 3.1415926535897932384626433832795
#define EXP 2.7182818284590452353602874713527

using namespace std;

typedef long long LL;
typedef long double LD;
typedef double DB;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef pair<int,PII> PIII;
typedef pair<LD,int> PLDI;
typedef vector<PII> VII;

template<class T>
T Mul(T x,T y,T P){
	T F1=0;
	while(y)
	{
		if(y&1)
		{
			F1+=x;
			if(F1<0||F1>=P)F1-=P;
		}
		x<<=1;
		if(x<0||x>=P)x-=P;
		y>>=1;
	}
	return F1;
}

template<class T>
T Pow(T x,T y,T P){
	T F1=1;x%=P;
	while(y)
	{
		if(y&1)
		{
			F1=Mul(F1,x,P);
		}
		x=Mul(x,x,P);
		y>>=1;
	}
	return F1;
}

template<class T>
T Gcd(T x,T y){
	if(y==0)return x;
	T z;
	while(z=x%y){
		x=y,y=z;
	}
	return y;
}

template<class T>
void UpdateMin(T &x,T y){
	if(y<x)
	{
		x=y;
	}
}

template<class T>
void UpdateMax(T &x,T y){
	if(x<y)
	{
		x=y;
	}
}

template<class T>
T Sqr(const T x){
	return x*x;
}

template<class T>
T Abs(const T x){
	return x<0?-x:x;
}

#define MaxBuffer 20000000
class ReadBuffer{
	private:
	char buff[MaxBuffer];
	char *buf;
	public:
	void init(int size=MaxBuffer)
	{
		fread(buff,1,size,stdin);
		buf=buff;
	}
	template<class T>
	bool readInteger(T &x)
	{
		x=0;
		while(*buf&&isspace(*buf)) ++buf;
		if(*buf==0) return false;
		static bool flag;
		flag=0;
		if(*buf=='-') flag=true;
		else x=*buf-'0';
		while(isdigit(*++buf)) x=x*10+*buf-'0';
		if(flag) x=-x;
		return true;
	}
	template<class T>
	bool readFloat(T &x)
	{
		long double nowpos=0.1;
		x=0;
		while(*buf&&isspace(*buf)) ++buf;
		if(*buf==0) return false;
		static bool flag,decimal;
		decimal=flag=0;
		if(*buf=='-') flag=true,++buf;
		else if(*buf=='.') decimal=true;
		while(isdigit(*buf)||*buf=='.')
		{
			if(*buf=='.') decimal=true;
			else
			{
				if(decimal)
				{
					x+=nowpos*(*buf-'0');
					nowpos*=0.1;
				}
				else
				{
					x=x*10+*buf-'0';
				}
			}
			++buf;
		}
		return true;
	}
	bool readChar(char c)
	{
		if(*buf==0) return 0;
		return c=*buf++,1;
	}
	bool readString(char *s)
	{
		while(*buf&&isspace(*buf)) ++buf;
		if(!*buf) return false;
		while(!isspace(*buf)) *s++=*buf++;
		*s++=0;
		return true;
	}
	int countSpacetonext(){
		int total=0;
		while(*buf&&*buf==' ') ++total,++buf;
		return total;
	}
	bool splitBycharactor(char *s,char Split='\n'){
		while(*buf&&*buf!=Split) *s++=*buf++;
		*s++=0;
		return *buf!=0;
	}
};

struct EDGE{
	int T;EDGE *Nxt;
};
pair<LD,LD> p[4000];
LD angle[4000];
const LD eps=1e-10;
int T,N,D,ans;
inline LD Sqrt(const LD &x){
	return x<0?0:sqrt(x);
}
inline int Sign(const LD &x){
	return x<-eps?-1:x>eps;
}
inline pair<LD,LD> travel(const pair<LD,LD> &a,const pair<LD,LD> &b,const LD d){
	pair<LD,LD> c=make_pair(b.X-a.X,b.Y-a.Y);
	LD f=d/Sqrt(c.X*c.X+c.Y*c.Y);
	c.X*=f,c.Y*=f;
	return make_pair(c.X+a.X,c.Y+a.Y);
}
inline LD det(const pair<LD,LD> &a,const pair<LD,LD> &b){
	return a.X*b.Y-a.Y*b.X;
}
inline LD dot(const pair<LD,LD> &a,const pair<LD,LD> &b){
	return a.X*b.X+a.Y*b.Y;
}
inline bool check(const LD &x,const LD &y){
	return Sign(x)>=0&&Sign(y-x)>=0;
}
VI V;
inline bool cmp(const int &x,const int &y){
	return angle[x]<angle[y];
}
const LD pi=acos(-1.);
int main(){
	freopen("boomerang.txt","r",stdin);
	freopen("a.out","w",stdout);
	scanf("%d",&T);
	REP_1(tt,T){
		ans=0;
		{
			int x,y;
			scanf("%d%d",&x,&y);
			p[0].X=x,p[0].Y=y;
		}
		scanf("%d%d",&D,&N);
		REP_1(i,N){
			int x,y;
			scanf("%d%d",&x,&y);
			p[i].X=x,p[i].Y=y;
		}
		REP_1(i,N){
			if(Sign(p[0].X-p[i].X)||Sign(p[0].Y-p[i].Y)){
				int a=0,b=0;
				pair<LD,LD> f=travel(p[0],p[i],D);
				pair<LD,LD> g=MP(p[i].X-p[0].X,p[i].Y-p[0].Y);
				LD h=dot(g,MP(f.X-p[0].X,f.Y-p[0].Y));
				REP_1(j,N){
					a+=Sign(det(g,MP(p[j].X-p[0].X,p[j].Y-p[0].Y)))==0
					&&check(dot(g,MP(p[j].X-p[0].X,p[j].Y-p[0].Y)),h);
				}
				if(a){
					V.clear();
					REP_1(j,N){
						if(Sign(f.X-p[j].X)||Sign(f.Y-p[j].Y)){
							V.push_back(j);
							angle[j]=atan2(p[j].Y-f.Y,p[j].X-f.X);
						}
						else{
							++b;
						}
					}
					sort(V.begin(),V.end(),cmp);
					int cnt=0;
					REP_0(i,int(V.size())){
						if(i==0) ++cnt;
						else{
							if(Sign(angle[V[i]]-angle[V[i-1]])!=0){
								ans=max(ans,a*(b+cnt));
								cnt=1;
							}
							else ++cnt;
						}
					}
					if(cnt==(int)V.size()){
						ans=max(ans,a*(b+cnt));
					}
					else{
						if(Sign(-PI-angle[V[0]])==0&&Sign(PI-angle[V[1]])==0){
							++cnt;
							REP_1(i,int(V.size()-1)){
								if(Sign(angle[V[i]]-angle[V[i-1]])!=0) break;
								++cnt;
							}
						}
						ans=max(ans,a*(b+cnt));
					}
				}
			}
		}
		printf("Case #%d: %d\n",tt,ans);
	}
	scanf("%d",&T);
	return 0;
}

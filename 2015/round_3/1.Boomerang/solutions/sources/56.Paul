#include <vector>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <map>
#include <ctime>
#include <cassert>

using namespace std;

ofstream fout("../../../output.txt");
ifstream fin("../../../input.txt");

double dist(pair<double,double> a, pair<double,double> b)
{
    return sqrt((a.first-b.first)*(a.first-b.first)+(a.second-b.second)*(a.second-b.second));
}

double crossproduct(pair<double,double> a, pair<double,double> b)
{
    return a.first*b.second-a.second*b.first;
}

pair<double,double> diff(pair<double,double> a,pair<double,double> b)
{
    pair<double,double> c;
    c.first=a.first-b.first;
    c.second=a.second-b.second;
    return c;
}

bool isinternal(pair<double,double> a, pair<double,double> b, pair<double,double> c)
{
    double x= dist(a,b);
    double y = dist(a,c);
    double z= dist(b,c);
    
    if(x - y - z > 0- 1e-9)
        return true;
    return false;
}

int loc(pair<double,double> a)
{
    if(a.second >0 || (a.second==0 && a.first<0))
        return 0;
    else
        return 1;
}

bool cmp(pair<double,double> a, pair<double,double> b)
{
    int aa = loc(a);
    int bb = loc(b);
    if(aa!=bb)
    {
        return (aa<bb);
    }
    double d=  crossproduct(a,b);
    return (d<0);
}

double absd(double d)
{
    if(d<0)
        return 0-d;
    return d;
}

vector<pair<double,double> > lis;

int maxtot(pair<double,double> base)
{
    vector<pair<double,double> > tmp;
    //cout << base.first << " " << base.second << endl;
    int i,j,k;
    
    bool isadd = false;
    
    for(i=0; i<lis.size(); i++)
    {
        pair<double,double> c;
        c.first=lis[i].first-base.first;
        c.second=lis[i].second-base.second;
        
        if(absd(c.first)<1e-9 && absd(c.second)<1e-9)
        {
            isadd=true;
        }
        else{
            tmp.push_back(c);
        }
    }
    
    int ret = 0;
    
    sort(tmp.begin(),tmp.end(),cmp);
    
//    for(i=0; i<tmp.size(); i++)
//    {
//        cout << tmp[i].first << " " << tmp[i].second << "\t";
//    }
//    cout << endl;
    
    for(i=0; i<tmp.size(); i++)
    {
        j=i;
        while(j+1 < tmp.size() && absd( crossproduct(tmp[i], tmp[j+1]))<1e-9)
            j++;
        if(j-i+1 > ret)
            ret=j-i+1;
        i=j;
        
    }
    
    if(isadd)
        ret++;
    
    
    tmp.clear();
    return ret;
}




int main(void)
{
    int ttt;
    fin >> ttt;
    
    if(ttt>100000)
        ttt=100000;
    int ct = 0;
    
    cout.precision(9);
    fout.precision(9);
    
    cout << "HELLO" <<  " " << ttt << endl;
    
    
    
    while(ttt>0)
    {
        ct++;
        ttt--;
        //CUT HERE
        long long ans = 0;
        
        pair<double,double> start;
        fin >> start.first >> start.second;
        
        double d;
        
        fin >> d;
        
        int n;
        
        fin >> n;
        
        lis.clear();
        
        int i,j,k;
        
        for(i=0; i<n; i++)
        {
            pair<double,double> tmp;
            fin >> tmp.first >> tmp.second;
            lis.push_back(tmp);
        }
        
        for(i=0; i<n; i++)
        {
            double x=  dist(start,lis[i]);
            if(x > d + 1e-9)
                continue;
            int tot = 0;
            
            for(j=0; j<n; j++)
            {
                if(isinternal(start, lis[i], lis[j]))
                    tot++;
            }
            
            pair<double,double> base;
            
            base.first = start.first + d/x * (lis[i].first-start.first);
            base.second = start.second + d/x * (lis[i].second-start.second);
            
            int tot1 = maxtot(base);
            
            if(tot * tot1 > ans)
                ans=tot*tot1;
            
            //cout << tot << " " << tot1 << endl;
        }
      
        
        cout << "Case #" << ct << ": ";
        fout << "Case #" << ct << ": ";
        
        
        cout << ans;
        fout << ans;
        
        
        
        
        
        fout << endl;
        cout << endl;
        
    }
    
    
    return 0;
}


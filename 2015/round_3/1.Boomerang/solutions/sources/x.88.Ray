#include <bits/stdc++.h>

#define INF 1000000010
#define FO(i,a,b) for (int (i) = (a); (i) < (b); ++(i))

using namespace std;
//PAIRS:
#define mp make_pair
#define fi first
#define se second
typedef pair<int,int> pii;

/*~~~~TEMPLATE END~~~~*/
#define EPS 1e-8
#define EPS2 1e-10
#define MAX_N 3005

int T;

int N;
double xM, yM, D;

double nX, nY, x[MAX_N], y[MAX_N];
double tX[MAX_N], tY[MAX_N];
vector <double> tAng;

int ans;

bool inD (double _x, double _y) {
    if (_x*_x + _y*_y <= D*D + EPS) return true;
    return false;
}

bool smSlope (double _x, double _y, double _a, double _b) {
    if (abs (atan2 (_y,_x) - atan2(_b,_a)) <= EPS) return true;
    return false;
}

int main() {
    freopen ("a.in", "r", stdin);
    freopen ("a.out", "w", stdout);
    scanf ("%d", &T);
    FO (_z,0,T) {
        ans = 0;
        tAng.clear();
        printf ("Case #%d: ", _z+1);
        scanf ("%lf %lf", &xM,&yM);
        scanf ("%lf", &D);
        scanf ("%d", &N);
        FO (i,0,N) {
            scanf ("%lf %lf", &x[i],&y[i]);
            x[i] -= xM;
            y[i] -= yM;
        }
        FO (i,0,N) {
            //ASSUME FIRST LINE PASSES THROUGH i:
            if (!inD (x[i],y[i])) continue;
            int cA = 0;
            int cB = 0;
            int bMod = 0;
            FO (p,0,N) {
                //printf ("%d: %lf\n", i, atan2 (y[p],x[p]));
                if (inD(x[p],y[p]) && smSlope (x[i],y[i],x[p],y[p])) cA++;
            }
            if (x[i] == 0) {
                nX = 0;
                if (y[i] > 0) nY = D;
                else nY = -D;
            } else if (y[i] == 0) {
                if (x[i] > 0) nX = D;
                else nX = -D;
                nY = 0;
            } else {
                double rat = (x[i]*1.0)/y[i];
                nY = (D*1.0)/(sqrt (rat*rat+1));
                nX = rat * nY;
            }
            //printf ("%lf %lf\n", nY, nX);
            FO (p,0,N) {
                //Try every pth point on rebound
                tX[p] = x[p] - nX;
                tY[p] = y[p] - nY;
                //printf ("T: %lf %lf %lf\n", tY[p], tX[p], atan2 (tY[p], tX[p]));
                if (abs (tX[p]) <= EPS2 && abs (tY[p]) <= EPS2) bMod++;
                else tAng.push_back (atan2 (tY[p], tX[p]));
            }
            sort (tAng.begin(), tAng.end());
            int sP = 0;
            FO (t,0,tAng.size()) {
                //printf ("%lf\n", tAng[t]);
                while (sP != tAng.size() && abs (tAng[sP] - tAng[t]) <= EPS) sP++;
                cB = max (cB, sP-t);
            }
            //printf ("C's:  %d: %d %d %d %d\n", i, cA, cB, bMod, tAng.size());
            ans = max (ans, cA*(cB+bMod));
            tAng.clear();
        }
        printf ("%d\n", ans);
    }
    return 0;
}





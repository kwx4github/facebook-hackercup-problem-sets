#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <vector>
#include <algorithm>
#define eps 1e-10

using namespace std;

struct node {
	double x,y;

	node() {
		x=0,y=0;
	}

	node(double _x,double _y) {
		x=_x,y=_y;
	}

	double length() {
		return sqrt(x*x+y*y);
	}
};

int tt;
int n;
node a[3010];
node s;
double d;
const double PI=acos(-1.0);
double b[6010];
int ans;

inline double sqr(double x) {
	return x*x;
}

node operator +(const node& a,const node &b) {
	return node(a.x+b.x,a.y+b.y);
}

node operator -(const node& a,const node &b) {
	return node(a.x-b.x,a.y-b.y);
}

int main() {
	freopen("a.in","r",stdin);
	freopen("a.out","w",stdout);

	scanf("%d",&tt);

	for (int ii=1;ii<=tt;++ii) {
		printf("Case #%d: ",ii);

		scanf("%lf%lf",&s.x,&s.y);
		scanf("%lf",&d);
		scanf("%d",&n);
		for (int i=0;i<n;++i)
			scanf("%lf%lf",&a[i].x,&a[i].y);

		ans=0;

		for (int i=0;i<n;++i) {
			node p=a[i]-s;
			if (p.length()>d+eps) continue;
			double ff=d/p.length();
			p.x*=ff,p.y*=ff;
			node q=p+s;
			int c1=0,c2=0,cp=0;
			for (int j=0;j<n;++j) {
				node r=a[j]-s;
				if (fabs(r.x*p.y-r.y*p.x)<eps && p.x*r.x+p.y*r.y>=0 && r.length()<d+eps) c1++;
				r=a[j]-q;
				if (fabs(r.y)<eps && fabs(r.x)<eps) {
					cp++;
					b[j]=-100;
					b[j+n]=-100;
				} else {
					double t=atan2(r.y,r.x);
					b[j]=t;
					b[j+n]=t+2*PI;
				}
			}
			sort(b,b+2*n);
			int cur=1;
			for (int j=1;j<2*n;++j) {
				if (fabs(b[j]-b[j-1])<eps) cur++;
				else cur=1;
				c2=max(c2,cur);
			}
			c2+=cp;
			ans=max(ans,c1*c2);
		}

		printf("%d\n",ans);
	}
}

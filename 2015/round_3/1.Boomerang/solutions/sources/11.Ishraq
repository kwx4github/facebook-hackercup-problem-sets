#include <bits/stdc++.h>

#define FO(i,a,b) for (int i = (a); i < (b); i++)
#define sz(v) int(v.size())

#define EPS 1e-9

using namespace std;

typedef complex<double> p;

bool eqang(double a, double b) {
    FO(A,0,2) FO(B,0,2) if (fabs(a+A*M_PI*2-(b+B*M_PI*2)) < EPS) return true;
    return false;
}

struct sol {

    p rp() {
        p o;
        double y, x; scanf("%lf %lf", &x, &y);
        o.real(x); o.imag(y);
        return o;
    }

    int getans() {
        p o = rp();
        double d; int n;
        scanf("%lf %d", &d, &n);
        vector<p> v(n);
        FO(i,0,n) {
            v[i] = rp();
            v[i] -= o;
        }
        int res = 0;
        FO(i,0,n) {
            // draw o->i
            int a = 0;
            FO(j,0,n) if (abs(v[j]) <= d+EPS && fabs(arg(v[j]/v[i])) < EPS) a++;
            p t = (v[i] / abs(v[i])) * d;
            vector<double> g;
            int b = 0;
            int bb = 0;
            FO(j,0,n) {
                if (abs(v[j]-t) > EPS) g.push_back(arg(v[j]-t));
                else b++;
            }
            sort(g.begin(),g.end());
            for (int i = 0; i < sz(g);) {
                int j = i;
                while (j < sz(g) && fabs(g[j]-g[i]) < EPS) j++;
                bb = max(bb, j-i);
                i=j;
            }
            b += bb;
            res = max(res, a*b);
        }
        return res;
    }
};

sol s[25];

int main() {
    int T; scanf("%d", &T);
    FO(Z,1,T+1) {
        int r = s[Z].getans();
        printf("Case #%d: %d\n", Z, r);
    }
}


package fb_round3;

import java.io.*;
import java.util.StringTokenizer;

public class A {
    public static void main(String[] args) throws FileNotFoundException {
        Kattio io;

//        io = new Kattio(System.in, System.out);
//        io = new Kattio(new FileInputStream("fb_round3/A-sample.in"), System.out);
//        io = new Kattio(new FileInputStream("fb_round3/A-test.in"), System.out);
        io = new Kattio(new FileInputStream("fb_round3/boomerang.txt"), new FileOutputStream("fb_round3/boomerang.out"));
//        io = new Kattio(new FileInputStream("fb_round3/A-large-0.in"), new FileOutputStream("fb_round3/A-large-0.out"));

        int cases = io.getInt();
        for (int i = 1; i <= cases; i++) {
            io.print("Case #" + i + ": ");
            new A().solve(io);
        }
        io.close();
    }

    private final int OFS = 100;

    private boolean[][] point;
    private int px[], py[];
    private int n;

    private void solve(Kattio io) {
        int x0 = io.getInt(), y0 = io.getInt();
        int d = io.getInt();
        n = io.getInt();

        point = new boolean[OFS * 2 + 1][OFS * 2 + 1];
        px = new int[n];
        py = new int[n];

        for (int i = 0; i < n; i++)
        {
            int x = io.getInt(), y = io.getInt();
            px[i] = x;
            py[i] = y;
            point[y+OFS][x+OFS] = true;
        }

        int best = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                // Throw towards i, then j
                double xdir = px[i]-x0, ydir = py[i]-y0;
                double dd = Math.sqrt(xdir*xdir+ydir*ydir);
                double tx = x0 + xdir * d / dd;
                double ty = y0 + ydir * d / dd;
                int v = count(x0, y0, tx, ty) * count(tx, ty, px[j], py[j]);
                best = Math.max(best, v);
            }
        }

        io.println(best);
    }

    private int count(double x1, double y1, double x2, double y2)
    {
        int sum = 0;

        if (x1 == x2) {
            if (Math.abs(Math.round(x1) - x1) > 1e-9) return 0;
            int x = (int) Math.round(x1);
            if (x < -100 || x > 100) return 0;

            int ystart = (int) Math.ceil(Math.min(y1,y2));
            int ystop = (int) Math.floor(Math.max(y1,y2));
            for (int y = ystart; y <= ystop; y++)
            {
                if (y >= -100 && y <= 100)
                {
                    if (point[y + OFS][x + OFS]) sum++;
                }
            }
            return sum;
        }

        if (x1 > x2) {
            double tmp = x1;
            x1 = x2;
            x2 = tmp;
            tmp = y1;
            y1 = y2;
            y2 = tmp;
        }

        int start = (int) Math.ceil(x1), stop = (int) Math.floor(x2);
        for (int x = start; x <= stop; x++)
        {
            int y = (int) Math.round((y2-y1)/(x2-x1) * (x-x1) + y1);
            if (x >= -100 && x <= 100 && y >= -100 && y <= 100)
            {
                if (point[y+OFS][x+OFS])
                {
                    double xd1 = x - x1, yd1 = y - y1;
                    double xd2 = x2 - x1, yd2 = y2 - y1;
                    if (Math.abs(xd1 * yd2 - xd2 * yd1) < 1e-9) sum++;
                }
            }
        }

        /*
        for (int i = 0; i < n; i++)
        {
            int x3 = px[i], y3 = py[i];
            if (x3 < Math.min(x1, x2)) continue;
            if (x3 > Math.max(x1, x2)) continue;
            if (y3 < Math.min(y1, y2)) continue;
            if (y3 > Math.max(y1, y2)) continue;

            double xd1 = x3-x1, yd1 = y3-y1;
            double xd2 = x2-x1, yd2 = y2-y1;
            if (Math.abs(xd1*yd2 - xd2*yd1) < 1e-9) sum++;
        }
        */

        return sum;
    }


    public static class Kattio extends PrintWriter
    {
        public Kattio(InputStream i) {
            super(new BufferedOutputStream(System.out));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public Kattio(InputStream i, OutputStream o) {
            super(new BufferedOutputStream(o));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public boolean hasMoreTokens() {
            return peekToken() != null;
        }

        public int getInt() {
            return Integer.parseInt(nextToken());
        }

        public double getDouble() {
            return Double.parseDouble(nextToken());
        }

        public long getLong() {
            return Long.parseLong(nextToken());
        }

        public String getWord() {
            return nextToken();
        }


        private BufferedReader r;
        private String line;
        private StringTokenizer st;
        private String token;

        private String peekToken() {
            if (token == null)
                try {
                    while (st == null || !st.hasMoreTokens()) {
                        line = r.readLine();
                        if (line == null) return null;
                        st = new StringTokenizer(line);
                    }
                    token = st.nextToken();
                } catch (IOException e) {
                }
            return token;
        }

        private String nextToken() {
            String ans = peekToken();
            token = null;
            return ans;
        }
    }

}

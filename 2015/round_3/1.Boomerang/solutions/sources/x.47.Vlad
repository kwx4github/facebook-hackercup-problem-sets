#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <queue>
#include <string>
#include <stack>

using namespace std;

typedef long long LL;

#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define CLEAR(a) memset(a, 0, sizeof(a))
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define sz(v) ((int)v.size())
const double PI = 2 * acos(0.0);
const double err = 1e-9;

struct Line {
  double A, B, C;
  double x1, y1, x2, y2;
  void build(double x1_, double y1_, double x2_, double y2_) {
    x1 = x1_; y1 = y1_;
    x2 = x2_; y2 = y2_;
    A = y2 - y1;
    B = x1 - x2;
    C = A * x1 + B * y1;
  }
  int on(double x, double y) {
    if (x < min(x1, x2) || x > max(x1, x2)) return 0;
    if (y < min(y1, y2) || y > max(y1, y2)) return 0;
    return fabs(A * x + B * y - C) < err;
  }
  void fit(double D) {
    double sign = (x2 - x1);
    if (sign < 0) sign = -1; else sign = 1;
    if (fabs(A) < err) {
      x2 = x1 + D * sign;
      return;
    }
    if (fabs(B) < err) {
      sign = y2 - y1;
      if (sign < 0) sign = -1; else sign = 1;
      y2 = y1 + D * sign;
      return;
    }
    double left = 0.0, right = D;
    int pasi = 100;
    while (pasi--) {
      double mid = (left + right) / 2.0;
      double x3 = x1 + sign * mid, y3 = (C - A * x3) / B;
      if ((x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1) > D * D) {
        right = mid;
      } else left = mid;
    }
    x2 = (left + right) / 2.0 * sign + x1;
    y2 = (C - A * x2) / B;
  }
};
int N;
double px[3007], py[3007];
double sx, sy;
double fx, fy;
int order[3007];
bool cmp(int a, int b) {
  if (fabs(fx - px[b]) < err && fabs(fx - px[a]) < err) {
    if (fy - py[a] < 0 && fy - py[b] > 0) return true;
    return false;
  }
  if (fabs(fy - py[b]) < err && fabs(fy - py[a]) < err) {
    if (fx - px[a] < 0 && fx - px[b] > 0) return true;
    return false;
  }
  return (fy - py[a]) * (fx - px[b]) < (fy - py[b]) * (fx - px[a]);
}
int main() {
  int tt; cin >> tt;
  for (int t = 1; t <= tt; ++t) {
    cin >> sx >> sy;
    double D; cin >> D;
    cin >> N;
    for (int i = 0; i < N; ++i) cin >> px[i] >> py[i];
    LL ret = 0;
    for (int i = 0; i < N; ++i) {
      Line l;
      l.build(sx, sy, px[i], py[i]);
      l.fit(D);
      LL A = 0;
      for (int j = 0; j < N; ++j) if (l.on(px[j], py[j])) ++A;
      int num = 0;
      fx = l.x2; fy = l.y2;
      LL B = 0;
      for (int j = 0; j < N; ++j) {
        if (fabs(fx - px[j]) < err && fabs(fy - py[j]) < err) {
          ++B; continue;
        }
        order[num] = j; ++num;
      }
      sort(order, order + num, cmp);
      int j = 0;
      LL B2 = 0;
      while (j < num) {
        int j2 = j;
        while (j2 < num && !cmp(order[j], order[j2]) && !cmp(order[j2], order[j])) ++j2;
        j2--;
        if (j2 - j + 1 > B2) B2 = j2 - j + 1;
        j = j2 + 1;
      }
      ret = max(ret, A * (B + B2));
    }
    cout << "Case #" << t << ": " << ret << '\n';
  }
  return 0;
}

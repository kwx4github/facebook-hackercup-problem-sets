#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

typedef LD TYP;;

typedef complex<TYP> P;
typedef pair<P, P> PP;
inline TYP operator^(P a, P b) { return real(a) * imag(b) - imag(a) * real(b); }//iloczyn wektorowy
inline TYP operator%(P a, P b) { return real(a) * real(b) + imag(a) * imag(b); }//iloczyn skalarny

// w prawo <=> skret < 0
inline TYP skret(P a, P b, P c) { return (b - a) ^ (c - a);}
inline bool lexi(P a,P b) { if (real(a) != real(b)) return real(a) < real(b); return imag(a) < imag(b); }
P vec = P(1, 0);
P vecp = vec * P(0, 1);
int dir = 1;
// dir = 1 <=> clock-wise
const LD EPS = 1e-9;
int cw(const P& w) {
    TYP a, b;
    a = vec ^ w, b = vecp ^ w;
    if ((dir == 1 && a <= EPS) || (dir == -1 && a >= -EPS)) 
        return (b <= 0 ? 0 : 1);
    return (b >= 0 ? 2 : 3);
}

bool angle_eq(P l, P r) {
    int cl = cw(l), cr = cw(r);
    if (cl != cr) return false;
    TYP w = l ^ r;
    return abs(w) < EPS;
}


bool angle_comp(P l, P r) {
    int cl = cw(l), cr = cw(r);
    if (cl != cr) return cl < cr;
    TYP w = l ^ r;
    if (abs(w) < EPS) return false;
    return (dir == 1 ? w < 0: w > 0);
}

void solve(int tc) {
    cout << "Case #" << tc << ": ";
    LD x0,y0;
    cin >> x0 >> y0;
    int n; LD D;
    cin >> D >> n;
    vector<P> p(n);
    REP(i,n) {
        LD x,y;
        cin >> x >> y;
        x -= x0;
        y -= y0;
        p[i] = P(x,y);
    }
    sort(ALL(p), angle_comp);
    int res = 0;
  //  debugv(p);
    REP(i,n) {
        if (i > 0 && angle_eq(p[i], p[i-1])) continue;
        int A = 0;
        {
            int j = i;
            while(j < n && angle_eq(p[i],p[j])) {
                if (abs(p[j]) <= D+EPS) ++A;
                ++j;
            }
        }
        vector<P> q;
        P r = p[i]*P(D/abs(p[i]),0);
        bool extra = false;
        for (P pp : p) {
            if (abs(pp-r) < EPS) extra = true;
            else q.PB(pp-r);
        }
        sort(ALL(q), angle_comp);
        int m = SZ(q);
        int B = 0;
        int cnt = 0;
        REP(j, m) {
            ++cnt;
            if (j == m-1 || !angle_eq(q[j], q[j+1])) {
                maxi(B,cnt);
                cnt = 0;
            }
        }
        if (extra) ++B;
        maxi(res, A*B);
    }
    cout << res << endl;

}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);

    return 0;
}


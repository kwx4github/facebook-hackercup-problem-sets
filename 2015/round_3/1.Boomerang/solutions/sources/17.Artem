#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>
#include <iomanip>

using namespace std;

#pragma comment(linker, "/STACK:200000000")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-8;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;

double d, x[3100], y[3100], a[3100];
int n;

void read() {
  int x0, y0;
  cin >> x0 >> y0 >> d >> n;
  forn(i, n) {
    cin >> x[i] >> y[i];
    x[i] -= x0;
    y[i] -= y0;
  }
}

void gen() {

}

bool onseg(double x1, double y1, double x2, double y2, double xm, double ym) {
  if (xm < min(x1, x2) - EPS || max(x1, x2) + EPS < xm ||
      ym < min(y1, y2) - EPS || max(y1, y2) + EPS < ym)
    return false;

  double a = y1 - y2;
  double b = x2 - x1;
  double c = -x1 * a - y1 * b;

  double t = sqrt(a * a + b * b);
  a /= t;
  b /= t;
  c /= t;

  return abs(a * xm + b * ym + c) < EPS;
}

int solve(double xc, double yc) {
  int add = 0;
  forn(i, n)
    if (abs(x[i] - xc) < EPS && abs(y[i] - yc) < EPS) {
      a[i] = 1E20;
      add++;
    }
    else
      a[i] = atan2(y[i] - yc, x[i] - xc);

  sort(a, a + n);
  int ans = 0;
  forn(i, n) {
    int j = i;
    while (j < n && abs(a[i] - a[j]) < EPS)
      j++;

    if (a[i] < 1E10)
      ans = max(ans, j - i);
    i = j - 1;
  }

  return ans + add;
}

void solve() {
  int ans = 0;
  forn(i, n) {
    double ds = sqrt(x[i] * x[i] + y[i] * y[i]);
    double xc = x[i] / ds * d;
    double yc = y[i] / ds * d;

    int a = 0, b;
    forn(j, n)
      if (onseg(0, 0, xc, yc, x[j], y[j]))
        a++;

    if (a == 0)
      continue;

    b = solve(xc, yc);

    ans = max(ans, a * b);
  }

  cout << ans << endl;
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  
  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; test++) {
    cerr << "Solving test " << setw(2) << test << " of " << tests << ". Time = " << setw(5) << clock() << endl;
    cout << "Case #" << test << ": ";
    read();
    //gen();
    solve();
  }
  
  return 0;
}
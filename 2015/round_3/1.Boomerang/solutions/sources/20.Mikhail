import java.io.*;
import java.util.*;

public class Boomerang {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;

	static class Point {
		int x, y;

		public Point(int x, int y) {
			this.x = x;
			this.y = y;
		}

		int sqLen() {
			return x * x + y * y;
		}

		int scalProd(Point p) {
			return x * p.x + y * p.y;
		}

		int vectProd(Point p) {
			return x * p.y - y * p.x;
		}
	}

	static class DblPoint {
		double x, y;

		public DblPoint(double x, double y) {
			this.x = x;
			this.y = y;
		}
	}

	boolean onSegm(Point p, Point q) {
		return p.vectProd(q) == 0 && p.scalProd(q) >= 0;
	}

	static final double EPS = 1e-7;

	boolean eq(double a, double b) {
		return Math.abs(a - b) < EPS;
	}

	void solve() throws IOException {
		int x0 = nextInt();
		int y0 = nextInt();
		int r = nextInt();
		int n = nextInt();
		Point[] a = new Point[n];
		for (int i = 0; i < n; i++) {
			a[i] = new Point(nextInt() - x0, nextInt() - y0);
		}
		
		int ret = 0;

		for (int i = 0; i < n; i++) {
			if (a[i].sqLen() > r * r) {
				continue;
			}
			double len = Math.sqrt(a[i].sqLen());
			double xx = a[i].x / len * r;
			double yy = a[i].y / len * r;

			int m1 = 0;
			for (int j = 0; j < n; j++) {
				if (a[j].sqLen() <= r * r && onSegm(a[j], a[i])) {
					m1++;
				}
			}
			int m2 = 0;
			if (a[i].sqLen() == r * r) {
				m2++;
			}

			double[] dirs = new double[n];
			int sz = 0;
			for (int j = 0; j < n; j++) {
				if (j != i || a[i].sqLen() != r * r) {
					double dx = a[j].x - xx;
					double dy = a[j].y - yy;
					double ang = Math.atan2(dy, dx);
					if (eq(ang, Math.PI)) {
						ang = -Math.PI;
					}
					dirs[sz++] = ang;
				}
			}
			
			Arrays.sort(dirs, 0, sz);
			int max = 0;
			for (int j = 0, k = 0; j < sz; j = k) {
				k = j;
				while (k < sz && eq(dirs[j], dirs[k])) {
					k++;
				}
				max = Math.max(max, k - j);
			}
			m2 += max;
			ret = Math.max(ret, m1 * m2);
		}
		out.println(ret);
	}

	Boomerang() throws IOException {
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "boomerang";
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new Boomerang();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
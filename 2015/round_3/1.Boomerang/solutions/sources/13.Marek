#include <bits/stdc++.h>

using namespace std;

using T = double;

const int MaxN = 3005;
const T Eps = 1e-11;

bool isZero(T x){
	return (x >= -Eps) && (x <= Eps);
}

struct Point {
	T x, y;

	Point(){}
	Point(T _x, T _y) : x(_x), y(_y) {}

	Point operator+(const Point P){
		return Point(x+P.x, y+P.y);
	}

	Point operator-(const Point P){
		return Point(x-P.x, y-P.y);
	}

	bool operator==(const Point P){
		return isZero(x-P.x) && isZero(y-P.y);
	}

	T dist(){
		return hypot(x, y);
	}
};

int N;
T D;
Point P[MaxN];



void cleanup(){
	
}

void input(){
	cin >> P[0].x >> P[0].y;
	cin >> D >> N;
	for(int i = 1; i <= N; i++){
		cin >> P[i].x >> P[i].y;
		P[i].x -= P[0].x;
		P[i].y -= P[0].y;
	}
}


void test(){
	input();

	int res = 0;

	for(int i = 1; i <= N; i++){
		T dst = P[i].dist();
		if(dst < D || isZero(dst-D)){
			int A = 0, B = 0;
			T jx = P[i].x / dst,
			  jy = P[i].y / dst;

			for(int j = 1; j <= N; j++){
				if(isZero(P[j].x * jy - P[j].y * jx)){
					if((P[j] - P[i]).dist() < (P[j] + P[i]).dist()){
						T ndst = P[j].dist();
						if(ndst < D || isZero(ndst-D)){
							A++;
						}
					}
				}
			}

			Point pfin = Point(jx*D, jy*D);

			vector<double> angles;

			for(int j = 1; j <= N; j++){
				if(P[j] == pfin){
					B++;
				} else {
					Point dff = P[j] - pfin;
					T ang = atan2(dff.y, dff.x);
					if(isZero(ang+M_PI)) ang = M_PI;
//					printf("%lf %lf %lf\n", dff.x, dff.y, ang);

					angles.push_back(ang);
				}
			}

//			printf("%lf %lf\n", pfin.x, pfin.y);

			sort(angles.begin(), angles.end());

			int maxAdd = 0, curAdd = 0;
			T prev = -10000;
			for(T ang: angles){
//				printf("%lf\n", ang);
				if(isZero(ang-prev)){
					curAdd++;
				} else {
					curAdd = 1;
				}

				prev = ang;
				maxAdd = max(maxAdd, curAdd);
			}

			B += maxAdd;

//			printf("%d: %d %d\n", i, A, B);

			res = max(res, A*B);

		}
	}

	printf("%d\n", res);


	cleanup();
}

int main(){
	int TT;
	scanf("%d", &TT);

	for(int i = 1; i <= TT; i++){
		printf("Case #%d: ", i);
		test();
	}
}

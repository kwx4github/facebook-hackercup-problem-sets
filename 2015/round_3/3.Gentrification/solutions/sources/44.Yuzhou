#include <cstdio>
#include <cstring>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <bitset>
#include <numeric>
#include <ctime>
#include <cmath>
#include <cassert>
#include <algorithm>

using namespace std;

typedef pair<int, int> PII;
typedef long long ll;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define pct __builtin_popcount

#define N 510


#define inf 1000000007
typedef long long ll;
#define NN 5555
#define M 3333333
struct E{int di,ne,ad;}e[M*2];
int H[NN];
void add(int x,int y,int T,int v){e[T].di=v,e[T].ne=H[x],e[T].ad=y,H[x]=T;}
int d[NN],hi[NN],pr[NN],ed[NN],h[NN],co[NN];
int sap(int S,int T,int C)
{
	memset(d,0,sizeof d),memset(co,0,sizeof co),co[0]=C,memcpy(h,H,sizeof h);
	int mf=0;int nf=inf,i=S;
	while(d[S]<C)
	{
		bool f=0;hi[i]=nf;
		for(int p=h[i];p&&!f;p=e[p].ne)
			if(e[p].di>0&&d[e[p].ad]+1==d[i])
			{
				f=1,nf=min(e[p].di,nf),h[i]=p,pr[e[p].ad]=i,ed[e[p].ad]=p,i=e[p].ad;
				if(i==T){for(mf+=nf;i!=S;e[ed[i]].di-=nf,e[ed[i]^1].di+=nf,i=pr[i]);nf=inf;}
			}
		if(!f)
		{
			int mi=C-1,lo=H[i];
			for(int p=H[i];p;p=e[p].ne)
				if(e[p].di>0&&d[e[p].ad]<mi)mi=d[e[p].ad],lo=p;
			h[i]=lo,co[d[i]]--;if(!co[d[i]])break;d[i]=mi+1,co[d[i]]++;
			if(i!=S)i=pr[i],nf=hi[i];
		}
	}
	return mf;
}

int n;
bool a[N][N];
int s[N], c[N], L, id[N], od[N];
bool b[N][N];


int main (){
	int _; cin >> _;
	for (int __ = 1; __ <= _; __ ++) {
		int m;
		cin >> n >> m;
		memset(a, 0, sizeof a);
		for (int i = 0; i < n; i ++) 
			a[i][i] = 1;
		for (int i = 0; i < m; i ++) {
			int x, y;
			cin >> x >> y;
			a[x][y] = 1;
		}
		for (int k = 0; k < n; k ++) 
			for (int i = 0; i < n; i ++)
				for (int j = 0; j < n; j ++)
					a[i][j] |= (a[i][k] & a[k][j]);
		L = 0;
		memset(c, -1, sizeof c);
		memset(s, 0, sizeof s);
		for (int i = 0; i < n; i ++) if (c[i] == -1) {
			for (int j = 0; j < n; j ++) 
				if (a[i][j] && a[j][i]) {
					c[j] = L;
					s[L] ++;
				}
			L ++;
		}
		memset(b, 0, sizeof b);
		for (int i = 0; i < n; i ++) 
			for (int j = 0; j < n; j ++) 
				if (a[i][j]) b[c[i]][c[j]] = 1;
		memset(id, 0, sizeof id);
		memset(od, 0, sizeof od);
		for (int i = 0; i < L; i ++) 
			for (int j = 0; j < L; j ++) if (i != j && b[i][j]) {
				id[j] ++; od[i] ++;
			}
		
		memset(H, 0, sizeof H);
		//*
		int le = L*2, ri = L*2+1, cc = L*2+2;
		int T = 1;
		for (int i = 0; i < L; i ++) {
			//if (id[i] == 0) 
			{
				add(le, i, ++T, s[i]);
				add(i, le, ++T, 0);
			}
			//if (od[i] == 0) 
			{
				add(i+L, ri, ++T, s[i]);
				add(ri, i+L, ++T, 0);
			}
			add(i+L, i, ++T, inf);
			add(i, i+L, ++T, 0);
		}
		for (int i = 0; i < L; i ++) 
			for (int j = 0; j < L; j ++) if (i != j && b[i][j]) {
				add(i, j+L, ++T, inf);
				add(j+L, i, ++T, 0);
			}
		//*/
		/*
		int le = L, ri = L+1, cc = L+2;
		int T = 1;
		for (int i = 0; i < L; i ++) {
			if (id[i] == 0) {
				add(le, i, ++T, s[i]);
				add(i, le, ++T, 0);
			}
			if (od[i] == 0) {
				add(i, ri, ++T, inf);
				add(ri, i, ++T, 0);
			}
			//add(i, i+L, ++T, s[i]);
			//add(i+L, i, ++T, 0);
		}
		for (int i = 0; i < L; i ++) 
			for (int j = 0; j < L; j ++) if (i != j && a[i][j]) {
				add(i, j, ++T, s[j]);
				add(j, i, ++T, 0);
			}
		*/
		
		printf ("Case #%d: %d\n", __, n-sap(le, ri, cc));
	}
	return 0;
}
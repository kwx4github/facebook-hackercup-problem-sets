#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 500 + 3;

int n, m;
vector<int> g[N], tg[N];

inline bool read()
{
	if (!(cin >> n >> m)) return false;
	forn(i, n) g[i].clear();
	forn(i, n) tg[i].clear();
	forn(i, m)
	{
		int x, y;
		scanf("%d%d", &x, &y);
		g[x].pb(y);
		tg[y].pb(x);
	}
	return true;
}

int u = 0, used[N];
int sz, perm[N];

void dfs(int v)
{
	used[v] = u;
	forn(i, sz(g[v])) if (used[g[v][i]] != u) dfs(g[v][i]);
	perm[sz++] = v;
}

int c, comp[N];

void css(int v)
{
	used[v] = u;
	forn(i, sz(tg[v])) if (used[tg[v][i]] != u) css(tg[v][i]);
	comp[v] = c;
}

int p[N];
vector<int> g2[N];

bool kuhn(int v)
{
	if (used[v] == u) return false;
	used[v] = u;
	forn(i, sz(g2[v]))
	{
		int to = g2[v][i];
		if (p[to] == -1 || kuhn(p[to]))
		{
			p[to] = v;
			return true;
		}
	}
	return false;
}

inline void solve()
{
	u++, sz = 0;
	forn(i, n) if (used[i] != u) dfs(i);

	assert(sz == n);
	reverse(perm, perm + sz);
	u++, c = 0;

	forn(i, sz) if (used[perm[i]] != u) css(perm[i]), c++;

	forn(i, n) g2[i].clear();
	memset(p, -1, sizeof(p));

	forn(i, n) forn(j, sz(g[i])) if (comp[i] != comp[g[i][j]]) g2[i].pb(g[i][j]);

	int ans = 0;
	forn(i, n)
	{
		u++;
		ans += kuhn(i);
	}
	printf(" %d\n", n - ans);
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;
    
	int tc;
	cin >> tc;
	forn(t, tc)
	{
		printf("Case #%d:", t + 1);
		assert(read());
		solve();
		cerr << t + 1 << endl;
	}
	
    return 0;
}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <queue>
#include <string>
#include <stack>

using namespace std;

typedef long long LL;

#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define CLEAR(a) memset(a, 0, sizeof(a))
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define sz(v) ((int)v.size())
const double PI = 2 * acos(0.0);

int N;
vector<vector<int> > G;
vector<vector<int> > GT;
vector<vector<int> > g;
vector<vector<int> > g2;
vector<int> st;
vector<int> viz;
vector<int> lst;

void clear() {
  G.clear(); GT.clear(); st.clear(); viz.clear(); lst.clear();
  g.clear();
  g2.clear();
}

void dfs(int nod) {
  viz[nod] = 1;
  for (int i = 0; i < G[nod].size(); ++i) {
    int nod2 = G[nod][i];
    if (!viz[nod2]) dfs(nod2);
  }
  st.pb(nod);
}

void dfsg(int nod) {
  viz[nod] = 1;
  for (int i = 0; i < g[nod].size(); ++i) {
    int nod2 = g[nod][i];
    if (!viz[nod2]) dfsg(nod2);
  }
}


void dfs_t(int nod) {
  viz[nod] = 1;
  lst.pb(nod);
  for (int i = 0; i < GT[nod].size(); ++i) {
    int nod2 = GT[nod][i];
    if (!viz[nod2]) dfs_t(nod2);
  }
}

vector<vector<int> > ctc() {
  vector<vector<int> > ret;
  viz.assign(N + 1, 0);
  for (int i = 1; i <= N; ++i) if (!viz[i]) dfs(i);
  viz.assign(N + 1, 0);
  for (int i = int(st.size()) - 1; i >= 0; --i) if (!viz[st[i]]) {
    lst.resize(0);
    dfs_t(st[i]);
    ret.pb(lst);
  }
  return ret;
}

int num = 0;
int idx[1024];
int val[1024];
int C[512][512];
int DP[1<<26];
int solve(int mask) {
  int ret = 0;
  if (DP[mask]) return DP[mask] - 1;
  for (int i = 0; i < num; ++i) if ((mask & (1 << i)) == 0) {
    int mask2 = mask | (1 << i);
    for (int j = 0; j < num; ++j) if (C[i][j]) mask2 |= (1 << j); 
    ret = max(ret, val[i] + solve(mask2));
  }
  DP[mask] = ret + 1;
  return ret;
}
int used[512];
int solve(vector<pair<int, int> >& vp) {
  for (int i = 0; i < num; ++i) used[i] = 0;
  int total = 0;
  for (int i = 0; i < vp.size(); ++i) {
    if (used[vp[i].second] == 0) {
      int nod = vp[i].second;
      total += val[nod];
      used[nod] = 1;
      for (int j = 0; j < num; ++j) if (C[nod][j]) used[j] = 1;
    }
  }
  return total;
}
int main() {
  int tt; cin >> tt;
  for (int t = 1; t <= tt; ++t) {
    clear();
    memset(DP, 0, sizeof(DP));
    int M;
    cin >> N >> M;
    g.resize(N + 7);
    G.resize(N + 7);
    GT.resize(N + 7);
    while (M--) {
      int a, b; cin >> a >> b;
      ++a; ++b;
      g[a].push_back(b);
    }
    for (int i = 1; i <= N; ++i) {
      viz.assign(N + 1, 0);
      dfsg(i);
      for (int j = 1; j <= N; ++j) if (viz[j] && j != i) {
        G[i].pb(j);
        GT[j].pb(i);
      }
    }
    vector<vector<int> > comp = ctc();
    num = comp.size();
    g2.resize(comp.size() + 7);
    int ret = 0;
    for (int i = 0; i < comp.size(); ++i) {
      val[i] = comp[i].size();
      ret = max(ret, int(comp[i].size()));
      for (int j = 0; j < comp[i].size(); ++j) {
        int nod = comp[i][j];
        idx[nod] = i;
      }
    }
    memset(C, 0, sizeof(C));
    for (int i = 0; i < G.size(); ++i) for (int j = 0; j < G[i].size(); ++j) {
      int nod2 = G[i][j];
      if (idx[i] == idx[nod2]) continue;
      C[idx[i]][idx[nod2]] = C[idx[nod2]][idx[i]] = 1;
    }
    if (num <= 25) ret = solve(0); 
    else
    {
      vector<pair<int, int> > vp;
      for (int i = 0; i < num; ++i) vp.push_back(make_pair(val[i], i));
      sort(vp.rbegin(), vp.rend());
      ret = max(ret, solve(vp));
      LL op = 500 * 500 * 500 / (num * num) + 100;
      int pasi = op;
      cerr << "fac " << pasi << ' ' << num << '\n';
      while (pasi--) {
        random_shuffle(vp.begin(), vp.end());
        ret = max(ret, solve(vp));
      }
    }
    cout << "Case #" << t << ": " << ret << '\n';
  }
  return 0;
}

#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

struct graph {
    struct edge {
        int to;
        edge(int _to): to(_to) {}
    };
    struct vertex {
        vector<edge> out, rev; // forward, backward
        int comp, t; // component no, auxiliary
        bool vis;
        vertex(): out(), rev(), comp(-1), t(-1), vis(false) {}
    };

    int n;
    vector<vertex> g;
    graph *scc;
    VI order;

    graph (int _n) : n(_n), g(_n) {}
    void add_edge(int u, int v) {
        g[u].out.PB(edge(v));
    }
    void dfs1(int i) {
        vertex &v = g[i];
        v.vis = true;
        FORE(it, v.out) if (!g[it->to].vis) dfs1(it->to);
        order.PB(i);
    }
    void dfs2(int i, int no) {
        vertex &v = g[i];
        v.vis = true;
        v.t = no;
        FORE(it, v.rev) {
            if (!g[it->to].vis) dfs2(it->to, no);
            else if (no > g[it->to].t) scc->add_edge(g[it->to].comp, (g[it->to].t = no));
        }
        v.comp = no;
    }
    graph Scc() { // return the graph of sccs
        graph res(n);
        scc = &res;
        REP(i,n) FORE(it, g[i].out) g[it->to].rev.PB(edge(i));
        REP(i,n) if (!g[i].vis) dfs1(i);
        REP(i,n) g[i].vis = false;
        int n_cc = 0;
        FORD(i, n-1, 0) if (!g[order[i]].vis) dfs2(order[i], n_cc++);
        res.n = n_cc;
        res.g.resize(n_cc);
        return res;
    }
};
const int MX = 2000;
struct Match { 
    int n;// n is the TOTAL number of vertices (0..n_-1)
    int up[MX]; // matching 
    bool vis[MX];    
    VI G[MX];     // edges, directed left to right

    void init(int _n) {
        n = _n;
        REP(i,n) {
            G[i].clear();
            up[i] = -1;
        }
    }
    void add(int a, int b){ G[a].PB(b); } // edge from a to b (directed left to right)

    bool aug(int x) {
        vis[x] = true;
        FORE(i,G[x]) if(up[*i] != x) if(up[*i] < 0 || (!vis[up[*i]] && aug(up[*i]))) {
            up[*i] = x;
            up[x] = *i;
            return true;
        }
        return false;
    }
    int match() {
        int cnt = 0;
        bool ok = true;
        while(ok) {
            ok = false;
            memset(vis, 0, n*sizeof(bool));
            REP(i,n) if(up[i] < 0 && aug(i)) {ok=true; cnt++; }
        };
        return cnt;
    }
};
void solve(int tc) {
    cout << "Case #" << tc << ": ";
    int n,m;
    cin >> n >> m;
    graph G(n);
    REP(i,m) {
        int a,b;
        cin >> a >> b;
        G.add_edge(a,b);
    }
    graph SCC = G.Scc();
    int ncc = SCC.n;
    vector<VI> comps(ncc);
    REP(i,n) comps[G.g[i].comp].PB(i);
    set<PII> S;
    vector<VI> M(n,VI(n,0));
    REP(i,ncc) for (auto e : SCC.g[i].out) {
        int j = e.to;
        if (i == j) continue;
        if (S.find(MP(i,j)) == S.end()) {
            for (int a: comps[i]) for (int b: comps[j]) M[a][b] = 1;
            S.insert(MP(i,j));
        }
    }
    REP(_,10) {
        REP(i,n) REP(j,n) REP(k,n) if (M[i][j] == 1 && M[j][k] == 1) M[i][k] = 1;
    }
    //REP(i,n) debugv(M[i]);
    Match Ma;
    Ma.init(2*n);
    REP(i,n) REP(j,n) if (M[i][j] == 1) Ma.add(i,n+j);
    int ms = Ma.match();
    cout << n-ms << endl;

    

}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);

    return 0;
}


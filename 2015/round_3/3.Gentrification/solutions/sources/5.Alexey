#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <stack>
#include <sstream>
#include <cstring>
#include <numeric>
#include <ctime>

#define re return
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) ((int) (x).size())
#define rep(i, n) for (int i = 0; i < (n); i++)
#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)
#define y0 y32479
#define y1 y95874
#define fill(x, y) memset(x, y, sizeof(x))
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define unq(x) (x.resize(unique(all(x)) - x.begin()))
#define spc(i,n) " \n"[i == n - 1]

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef double D;
typedef long double LD;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;

template<class T> T abs(T x) { return x > 0 ? x : -x;}

int m[600][600], m2[600][600];
int n;

int matr[2000][2000];
vi o, vv;
int w[2000];

void dfs1 (int x) {
	w[x] = 1;
	rep(i, n)
	if (matr[x][i])
		if (!w[i])
			dfs1(i);
	o.pb(x);
}

void dfs2 (int x) {
	w[x] = 1;
	vv.pb(x);
	rep(i, n)
		if (matr[i][x])
		if (!w[i])
			dfs2(i);
}

int f[2000], c[2000];
int comp[1000];
int p[1000];

int dfs(int x) {
	w[x] = 1;
	rep(i, n)
	if (m[x][i])
		if (p[i] == -1 || !w[p[i]] && dfs(p[i])) {
			p[i] = x;
			re 1;
		}
	re 0;
}

int find_match() {
	fill(p, -1);

	int ans = 0;
	rep(i, n) {
		fill(w, 0);
		if (dfs(i))
			ans++;
	}

	re ans;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);


	int tc;
	cin >> tc;
	rep(tt, tc) {
		cout << "Case #" << tt + 1 << ": ";

		fill(matr, 0);

		int k;
		cin >> n >> k;
		rep(i, k) {
			int a ,b;
			cin >> a >> b;
			matr[a][b] = 1;
		}

		fill(m2, 0);
		rep(i, n) {
			fill(w, 0);
			o.clear();
			dfs1(i);
			rep(j, n)
			if (w[j])
				m2[i][j] = 1;
		}

		o.clear();
		fill(w, 0);
	    rep(i, n)
	    	if (!w[i])
	    		dfs1(i);

	    int cm = 0;
	    fill(w, 0);
	    rrep(i, n) {
	    	int x = o[i];
	    	if (!w[x]) {
	    		vv.clear();
	    		dfs2(x);
	    		c[cm] = sz(vv);
	    		f[cm] = vv[0];
	    		rep(i, sz(vv))
	    			comp[vv[i]] = cm;
	    		cm++;
	    	}
	    }

	    fill(m, 0);
	    rep(i, n) rep(j, n) {
	    	if (comp[i] == comp[j])
	    		continue;
	    	m[i][j] = m2[i][j];
	    }

	    cout << n - find_match() << endl;
	}



	re 0;
}

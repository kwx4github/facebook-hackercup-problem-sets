#pragma comment(linker, "/STACK:200000000")
#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>
using namespace std;

typedef long long int64;
//#define double long double
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const double EPS = 1E-9;
const double EPS_ANG = 1E-16;
const double PI = acos((double)0) * 2;

#define forn(i, n)  for (int i = 0; i < int(n); ++i)
#define ford(i, n)  for (int i=int(n) - 1; i >= 0; --i)
#define fore(i, l, r)  for (int i = int(l); i < int(r); ++i)
#define all(a)  a.begin(), a.end()
#define fs  first
#define sc  second
#define mp  make_pair
#define pb  push_back


const int MAXN = 510;


int n, m;
vector<int> g[MAXN];


void read() {
	cin >> n >> m;
	forn(i, n)
		g[i].clear();
	forn(i, m) {
		int a, b;
		scanf("%d%d", &a, &b);
		g[a].push_back(b);
	}
}


bool u[MAXN];
vector<int> gr[MAXN];
vector<int> order;
vector<vector<int>> components;
int comp_id[MAXN];
vector<int> gp[MAXN];
int mt[MAXN];

void dfs1(int v) {
	u[v] = true;
	forn(i, g[v].size()) {
		int to = g[v][i];
		if (!u[to])
			dfs1(to);
	}
	order.push_back(v);
}

void dfs2(int v) {
	u[v] = true;
	components.back().pb(v);
	comp_id[v] = (int)components.size() - 1;
	forn(i, gr[v].size()) {
		int to = gr[v][i];
		if (!u[to])
			dfs2(to);
	}
}

bool try_kuhn (int v) {
	if (u[v])
		return false;
	u[v] = true;
	forn(i, gp[v].size()) {
		int to = gp[v][i];
		if (mt[to] == -1 || try_kuhn(mt[to])) {
			mt[to] = v;
			return true;
		}
	}
	return false;
}

void solve() {
	forn(i, n)
		gr[i].clear();
	forn(i, n)
		forn(j, g[i].size())
			gr[g[i][j]].push_back(i);
	memset(u, 0, sizeof u);
	order.clear();
	forn(i, n)
		if (!u[i])
			dfs1(i);
	memset(u, 0, sizeof u);
	components.clear();
	forn(i, n) {
		int v = order[n - 1 - i];
		if (!u[v]) {
			components.resize(components.size() + 1);
			dfs2(v);
		}
	}

	forn(i, n)
		gp[i].clear();
	forn(i, n)
		forn(j, g[i].size()) {
			int to = g[i][j];
			int cfrom = comp_id[i];
			int cto = comp_id[to];
			if (cfrom == cto)
				continue;
			forn(i1, components[cfrom].size())
				forn(i2, components[cto].size()) {
					int efrom = components[cfrom][i1];
					int eto = components[cto][i2];
					gp[efrom].push_back(eto);
				}
		}

	forn(i, n)
		mt[i] = -1;
	int matching = 0;
	forn(i, n) {
		memset(u, 0, sizeof u);
		matching += try_kuhn(i);
	}
	cout << n - matching << endl;
}


int main(int argc, char *argv[]) {
#ifdef SU2_PROJ
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif

	int test_to_execute = (argc == 2) ? atoi(argv[1]) : -1;

	int tests;
	cin >> tests;
	
	if (test_to_execute != -1 && !(1 <= test_to_execute && test_to_execute <= tests)) {
		cerr << "Requested test doesn't exist!" << endl;
		throw std::runtime_error("Requested test doesn't exist!");
	}

	for (int test = 1; test <= tests; ++test) {
		time_t start_time = clock();
		read();
		if (!cin)
			throw;
		if (test_to_execute != -1 && test != test_to_execute)
			continue;
		printf("Case #%d: ", test);
		solve();
		cerr << "Test #" << test << " done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
	}
}

#include <cstdio>
#include <cassert>
#include <cstring>

#include <algorithm>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

const int MAXN = 505;

int N, M;
int adj[MAXN][MAXN];

int bio[2 * MAXN], cookie;
int match[2 * MAXN];
vector< int > G[2 * MAXN];

int dfs(int i) {
  if (i == -1) return 1;
  if (bio[i] == cookie) return 0;

  bio[i] = cookie;

  for (int j : G[i]) {
    if (match[j] == i) continue;
    if (dfs(match[j])) {
      match[j] = i;
      return 1;
    }
  }

  return 0;
}

int solve() {
  scanf("%d%d", &N, &M);

  memset(adj, 0, sizeof adj);

  REP(i, N) adj[i][i] = 1;
  REP(i, 2 * N) G[i].clear();

  REP(i, M) {
    int a, b;
    scanf("%d%d", &a, &b);
    adj[a][b] = 1;
  }
  
  REP(k, N) REP(i, N) REP(j, N)
    adj[i][j] = (adj[i][j] || (adj[i][k] && adj[k][j]));

  REP(i, N) REP(j, N) 
    if (adj[i][j] && !adj[j][i]) 
      G[2 * i].push_back(2 * j + 1);

  memset(match, -1, sizeof match);

  int sol = 0;
  REP(i, N) {
    ++cookie;
    if (dfs(2 * i)) ++sol;
  }

  sol = N - sol;

  return sol;
}

int main(void) 
{
  int T;
  scanf("%d", &T);

  REP(tc, T) 
    printf("Case #%d: %d\n", tc + 1, solve());

  return 0;
}

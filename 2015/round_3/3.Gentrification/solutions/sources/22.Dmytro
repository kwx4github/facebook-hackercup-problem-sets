#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

const long long INF = 1000000000000000LL;

class MaximumFlow {
	int s, f;
public:
	struct edge {
		int u, v;
		long long capacity, flow;
		edge() { u = v = capacity = flow = 0;}
		edge(int u_, int v_, long long capacity_, long long flow_) :
		  u(u_), v(v_), capacity(capacity_), flow(flow_) {}
	};

	vector <edge> edges;
	vector <vector <int> > graph;
	vector <int> ptr, level;
	queue <int> q;
	int n;

	MaximumFlow() {}

	MaximumFlow(int number) {
		n = number;
		graph.resize(n);
		ptr.assign(n, 0);
		level.resize(n);
	}

	void addEdge(int u, int v, long long capacity) {
		int sz = (int)(edges.size());
		edges.push_back(edge(u, v, capacity, 0));
		edges.push_back(edge(v, u, 0, 0));
		graph[u].push_back(sz);
		graph[v].push_back(sz + 1);
	}

	void updateLevels() {
		level.assign(n, -1);
		q.push(s);
		level[s] = 0;
		while (!q.empty()) {
			int topq = q.front();
			q.pop();
			for (int index = 0; index < graph[topq].size(); ++index) {
				int i = graph[topq][index];
				int to = edges[i].v;
				if (edges[i].capacity - edges[i].flow == 0) {
					continue;
				}
				if (level[to] == -1) {
					level[to] = level[topq] + 1;
					q.push(to);
				}
			}
		}
	}

	long long pushFlow(int v, long long flow) {
		if (v == f || flow == 0) {
			return flow;
		}
		for (; ptr[v] < graph[v].size(); ++ptr[v]) {
			int index = graph[v][ptr[v]];
			int to = edges[index].v;
			if (level[v] + 1 == level[to]) {
				int pushed = pushFlow(to, min(flow, edges[index].capacity - edges[index].flow));
				if (pushed > 0) {
					edges[index].flow += pushed;
					edges[index ^ 1].flow -= pushed;
					return pushed;
				}
			}
		}
		return 0;
	}

	long long dinicFlow(int start, int finish) {
		s = start, f = finish;
		long long result = 0;
		while (true) {
			updateLevels();
			if (level[f] == -1) {
				break;
			}
			while (true) {
				long long pushed = pushFlow(start, INF);
				if (pushed == 0) {
					break;
				}
				result += pushed;
			}
			ptr.assign(n, 0);
		}
		return result;
	}
};

void readData() {
}

const int maxN = 510;
int g[maxN][maxN];
int n, m;

int h[maxN][maxN];
int c[maxN];
map < int, int > M;

void solve(int test) {
	memset(g, 0, sizeof(g));
	memset(h, 0, sizeof(h));
	memset(c, -1, sizeof(c));
	M.clear();
	cin >> n >> m;
	for (int i = 0; i < m; ++i) {
		int u, v;
		scanf("%d%d", &u, &v);
		g[u][v] = 1;
	}
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			for (int k = 0; k < n; ++k) {
				if (g[j][i] && g[i][k]) {
					g[j][k] = 1;
				}
			}
		}
	}
	for (int i = 0; i < n; ++i) {
		g[i][i] = 1;
	}

	int k = 0;
	for (int i = 0; i < n; ++i) {
		if (c[i] != -1) {
			continue;
		}

		int cnt = 0;
		for (int j = 0; j < n; ++j) {
			if (g[i][j] && g[j][i]) {
				c[j] = k;
				++cnt;
			}
		}
		M[k] = cnt;
		++k;
	}

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (g[i][j]) {
				h[c[i]][c[j]] = 1;
			}
		}
	}

	MaximumFlow F(2 * k + 2);
	int s = 2 * k;
	int t = 2 * k + 1;

	for (int i = 0; i < k; ++i) {
		F.addEdge(s, i, M[i]);
		F.addEdge(i + k, t, M[i]);
		//F.addEdge(i + k, i, 1000000000LL);
	}

	for (int i = 0; i < k; ++i) {
		for (int j = 0; j < k; ++j) {
			if (i == j) {
				continue;
			}
			if (h[i][j]) {
				F.addEdge(i, j + k, 1000000000LL);
			}
		}
	}
	int res = F.dinicFlow(s, t);
	printf("Case #%d: %d\n", test, n - res);
}

int main(int argc, char* argv[]) {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int left_bound, right_bound;

	/*freopen(argv[3], "w", stdout);

	
	sscanf(argv[1], "%d", &left_bound);
	sscanf(argv[2], "%d", &right_bound);*/

	int t;
	cin >> t;
	left_bound = 1, right_bound = t;
	for (int i = 1; i <= t; ++i) {
		if (i >= left_bound && i <= right_bound) {
			solve(i);
		}
		cerr << i << ": " << clock() << endl;
	}

	return 0;
}
import core.thread;
import std.conv, std.stdio, std.string;
import std.algorithm, std.array, std.bigint, std.container, std.math, std.range, std.regex;

//	Input
class EOFException : Throwable { this() { super("EOF"); } }
string[] tokens;
string readToken() { for (; tokens.empty; ) { tokens = readln.split; if (stdin.eof) throw new EOFException; } auto token = tokens[0]; tokens.popFront; return token; }
int readInt() { return to!int(readToken); }
long readLong() { return to!long(readToken); }
real readReal() { return to!real(readToken); }

//	chmin/chmax
void chmin(T)(ref T t, in T f) { if (t > f) t = f; }
void chmax(T)(ref T t, in T f) { if (t < f) t = f; }

//	Pair
struct Pair(S, T) {
	S x; T y;
	int opCmp(    const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	int opCmp(ref const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	string toString() const { return "(" ~ to!string(x) ~ ", " ~ to!string(y) ~ ")"; }
}
auto pair(S, T)(inout(S) x, inout(T) y) { return Pair!(S, T)(x, y); }
auto pair(S, T)(      S  x,       T  y) { return Pair!(S, T)(x, y); }

//	Array
int binarySearch(T)(in T[] as, in bool delegate(T) test) { int low = -1, upp = as.length; for (; low + 1 < upp; ) { int mid = (low + upp) >> 1; (test(as[mid]) ? low : upp) = mid; } return upp; }
int lowerBound(T)(in T[] as, in T val) { return as.binarySearch((T a) { return (a <  val); }); }
int upperBound(T)(in T[] as, in T val) { return as.binarySearch((T a) { return (a <= val); }); }
T[] unique(T)(in T[] as) { T[] bs; foreach (a; as) if (bs.empty || bs[$ - 1] != a) bs ~= a; return bs; }


class MaxFlow(CAPA) {
	static immutable CAPA wEPS = 0;
	static immutable CAPA wINF = 1001001001;
	int n, m;
	int[][] g;
	int[] zu;
	CAPA[] capa;
	CAPA tof;
	int[] lev, see, que;
	this (int n) {
		this.n = n; m = 0; g = new int[][n]; zu = null; capa = null;
		lev = new int[n]; see = new int[n]; que = new int[n];
	}
	void ae(int u, int v, CAPA w0, CAPA w1 = 0) {
		g[u] ~= m; zu ~= v; capa ~= w0; ++m;
		g[v] ~= m; zu ~= u; capa ~= w1; ++m;
	}
	CAPA augment(int src, int ink, CAPA flo) {
		if (src == ink) return flo;
		foreach (i; g[src][see[src] .. $]) {
			if (capa[i] > wEPS && lev[src] < lev[zu[i]]) {
				CAPA f = augment(zu[i], ink, min(flo, capa[i]));
				if (f > wEPS) {
					capa[i] -= f; capa[i ^ 1] += f; return f;
				}
			}
			++see[src];
		}
		return 0;
	}
	bool dinic(int src, int ink, CAPA flo = wINF) {
		for (tof = 0; tof + wEPS < flo; ) {
			int[] q;
			lev[] = -1;
		dinicBFS:
			for (lev[src] = 0, q ~= src; !q.empty; ) {
				int u = q.front; q.popFront;
				foreach (i; g[u]) {
					int v = zu[i];
					if (capa[i] > wEPS && lev[v] == -1) {
						lev[v] = lev[u] + 1; q ~= v;
						if (v == ink) break dinicBFS;
					}
				}
			}
			if (lev[ink] == -1) return false;
			see[] = 0;
			for (; ; ) {
				CAPA f = augment(src, ink, flo - tof);
				if (f <= wEPS) break;
				tof += f;
			}
		}
		return true;
	}
}


Pair!(int, int[]) scc(int[][] g0, int[][] g1) {
	int n = g0.length;
	int compN;
	int[] compIds = new int[n];
	void dfs(int[][] g, int u, int a, int b, ref int[] st) {
		if (compIds[u] == a) {
			compIds[u] = b;
			foreach (v; g[u]) dfs(g, v, a, b, st);
			st ~= u;
		}
	}
	int[] stack, dump;
	foreach (u; 0 .. n) {
		dfs(g0, u, 0, -1, stack);
	}
	for (; !stack.empty; ) {
		int u = stack[$ - 1];
		if (compIds[u] == -1) {
			dfs(g1, u, -1, compN, dump);
			++compN;
		}
		stack.popBack;
	}
	return pair(compN, compIds);
}


void prepare() {
	
}

class Solver : core.thread.Thread {
	int caseId;
	this(int caseId) {
		this.caseId = caseId;
		super(&main);
	}
	void main() {
		try {
			run;
			stderr.writeln("DONE  Case #", caseId);
		} catch (Throwable e) {
			stderr.writeln("ERROR Case #", caseId, ": ", e.msg);
		} finally {
			stderr.flush;
		}
	}
	
	int N, M;
	int[] A, B;
	int ans;
	
	void run() {
		auto g0 = new int[][N];
		auto g1 = new int[][N];
		foreach (i; 0 .. M) {
			g0[A[i]] ~= B[i];
			g1[B[i]] ~= A[i];
		}
		auto scc = scc(g0, g1);
		auto mf = new MaxFlow!int(2 + scc.x + scc.x);
		int[] sz = new int[scc.x];
		foreach (u; 0 .. N) {
			++sz[scc.y[u]];
		}
		foreach (p; 0 .. scc.x) {
			mf.ae(0, 2 + p, sz[p]);
			mf.ae(2 + scc.x + p, 1, sz[p]);
		}
		foreach (i; 0 .. M) {
			int p = scc.y[A[i]];
			int q = scc.y[B[i]];
			if (p != q) {
				mf.ae(2 + p, 2 + scc.x + q, mf.wINF);
			}
		}
		mf.dinic(0, 1);
		ans = N - mf.tof;
	}
	
	void input() {
		N = readInt;
		M = readInt;
		A = new int[M];
		B = new int[M];
		foreach (i; 0 .. M) {
			A[i] = readInt;
			B[i] = readInt;
		}
	}
	
	void output() {
		writeln("Case #", caseId, ": ", ans);
		stdout.flush;
	}
}

void main(string[] args) {
	bool parallel = false;
	foreach (arg; args) if (arg == "-p") parallel = true;
	prepare;
	auto solvers = new Solver[readInt];
	foreach (caseId, ref solver; solvers) solver = new Solver(caseId + 1);
	if (parallel) {
		foreach (solver; solvers) solver.input, solver.start;
		foreach (solver; solvers) solver.join, solver.output;
	} else {
		foreach (caseId, solver; solvers) {
			solver.input;
			solver.run;
			solver.output;
			stderr.writeln("DONE  Case #", caseId + 1);
			stderr.flush;
		}
	}
}


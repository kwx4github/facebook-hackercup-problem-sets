#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

int E[1 << 10][1 << 10];
int E2[1 << 10][1 << 10];
int B[1 << 10];
int C[1 << 10];
int gN, gCnt;

void dfs(int a)
{
	B[a] = -2;

	int i;
	FOR(i, 0, gN)
		if (E[a][i] != 0 && B[i] == -1)
			dfs(i);

	B[a] = gCnt;
	++gCnt;
}

int dfs2(int a)
{
	B[a] = gCnt;

	int i;
	int res = 1;
	FOR(i, 0, gN)
		if (E[i][a] != 0 && B[i] == -1)
			res += dfs2(i);

	return res;
}

void dfs3(int a)
{
	B[a] = gCnt;

	int i;
	int res = 1;
	FOR(i, 0, gN)
		if ((E[a][i] != 0 || E[i][a] != 0) && B[i] == -1)
			dfs3(i);
}

int f(int a, int flow)
{
	if (a == gN - 1)
		return flow;

	B[a] = 1;
	int i;
	FOR(i, 0, gN)
		if (B[i] == 0 && E[a][i] > 0)
		{
			int res = f(i, min(flow, E[a][i]));
			if (res != 0)
			{
				E[a][i] -= res;
				E[i][a] += res;
				return res;
			}
		}

	return 0;
}

int SolveTest(int test)
{
	int N, M;

	scanf("%d%d", &N, &M);

	CLEAR(E, 0);
	int i, j, k;
	FOR(i, 0, M)
	{
		int a, b;
		scanf("%d%d", &a, &b);
		E[a][b] = 1;
	}

	gN = N;
	gCnt = 0;
	CLEAR(B, -1);
	FOR(i, 0, N)
		if (B[i] == -1)
			dfs(i);

	vector<PII> v;
	FOR(i, 0, N)
		v.push_back(PII(B[i], i));

	sort(ALL(v));
	gCnt = 0;
	CLEAR(B, -1);
	RFOR(i, SIZE(v), 0)
		if (B[v[i].second] == -1)
		{
			C[gCnt] = dfs2(v[i].second);
			++gCnt;
		}

	CLEAR(E2, 0);
	FOR(i, 0, N)
		FOR(j, 0, N)
		if (E[i][j])
		{
			int a = B[i];
			int b = B[j];
			if (a != b)
				E2[a][b] = 1;
		}

	FOR(k, 0, gCnt)
		FOR(i, 0, gCnt)
		if (E2[i][k] != 0)
			FOR(j, 0, gCnt)
			if (E2[k][j] != 0)
				E2[i][j] = 1;

	gN = gCnt + gCnt + 2;
	CLEAR(E, 0);
	FOR(i, 0, gCnt)
	{
		E[gN - 2][i] = C[i];
		E[gCnt + i][gN - 1] = C[i];
	}

	FOR(i, 0, gCnt)
		FOR(j, 0, gCnt)
		if (E2[i][j] != 0)
			E[i][gCnt + j] = N;

	int flow = 0;
	while (true)
	{
		CLEAR(B, 0);
		int res = f(gN - 2, N);
		if (res == 0)
			break;

		flow += res;
	}

	printf("Case #%d: %d\n", test + 1, N - flow);
	return 0;
}

int main()
{
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

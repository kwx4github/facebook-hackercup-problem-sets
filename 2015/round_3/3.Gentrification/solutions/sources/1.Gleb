#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second

const double pi = acos(-1.0);
const int size = 1000;

bool way[size][size];
bool could[size][size];

int lb[size], rb[size];
bool used[size];
int tc, n, m;

void reach(int st, int v) {
	could[st][v] = true;
	//cout << st << ' ' << v << endl;
	for (int i = 0; i < n; i++)
		if (way[v][i] && !could[st][i]) {
			reach(st, i);
		}
}

bool dfs(int v) {
	used[v] = true;
	for (int i = 0; i < n; i++) {
		if (could[v][i] && (rb[i] == -1 || (!used[rb[i]] && dfs(rb[i])))) {
			lb[v] = i;
			rb[i] = v;
			return true;
		}
	} 

	return false;
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &tc);
    for (int tnum = 0; tnum < tc; tnum++) {
    	scanf("%d%d", &n, &m);
    	//cout << n << ' ' << m << endl;
    	for (int i = 0; i < n; i++) {
    		for (int j = 0; j < n; j++) {
    			way[i][j] = false;
    			could[i][j] = false;
    		}
    		lb[i] = rb[i] = -1;
    		used[i] = false;
    	}
    	for (int i = 0; i < m; i++) {
    		int v, u;
    		assert(scanf("%d%d", &v, &u) == 2);
    		//cout << "edge " << v << ' ' << u << endl;
    		way[v][u] = true;
    	}
    	/*
    	for (int i = 0; i < n; i++) {
   			for (int j = 0; j < n; j++)
   				cout << way[i][j] << ' ';
   			cout << endl;	
   		}	
   		*/
    	for (int i = 0; i < n; i++)
    		reach(i, i);
   		/*
   		for (int i = 0; i < n; i++) {
   			for (int j = 0; j < n; j++)
   				cout << could[i][j] << ' ';
   			cout << endl;	
   		}	
   		*/
   		for (int i = 0; i < n; i++)
   			for (int j = 0; j < n; j++) {
   				if (could[i][j] && could[j][i]) {
   					could[i][j] = could[j][i] = false;
   				}
   			}	
   		/*
   		for (int i = 0; i < n; i++) {
   			for (int j = 0; j < n; j++)
   				cout << could[i][j] << ' ';
   			cout << endl;	
   		}	
   		*/
   		int cnt = 0;
   		for (int i = 0; i < n; i++) {
   			for (int j = 0; j < n; j++)
   				used[j] = false;
   			cnt += dfs(i);
   		}

   		printf("Case #%d: %d\n", tnum + 1, n - cnt);
    	cerr  << tnum << endl;
    }

    return 0;
}
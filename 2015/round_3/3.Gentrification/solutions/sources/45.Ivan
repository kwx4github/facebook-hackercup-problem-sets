#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

const int MAXN = 505;

vector<int> e[MAXN];
bool d[MAXN][MAXN];

void dfs(int x, bool *bio) {
  if (bio[x]) return;
  bio[x] = true;
  for (int y: e[x]) dfs(y, bio);
}

int dad[MAXN];
int bio[MAXN], cookie;
vector<int> E[MAXN];

int match(int x) {
  if (x == -1) return true;
  if (bio[x] == cookie) return false;
  bio[x] = cookie;
  for (int y: E[x])
    if (match(dad[y])) {
      dad[y] = x;
      return true;
    }
  return false;
}

int main(void) {
  int TC;
  scanf("%d", &TC);
  for (int tp = 1; tp <= TC; ++tp) {
    int n, m;
    scanf("%d %d", &n, &m);
    
    REP(i, n) e[i].clear();

    REP(i, m) {
      int a, b;
      scanf("%d %d", &a, &b);
      d[a][b] = true;
      e[a].push_back(b);
    }

    REP(i, n) {
      E[i].clear();
      dad[i] = -1;
    }

    REP(i, n) {
      REP(j, n) d[i][j] = false;
      dfs(i, d[i]);
    }

    REP(i, n)
      REP(j, n)
        if (d[i][j] && !d[j][i])
          E[i].push_back(j);
    
    int ans = 0;
    REP(i, n) {
      cookie++;
      ans += match(i);
    }
    

    printf("Case #%d: ", tp);
    printf("%d\n", n-ans);
  }
  return 0;
}

#include <vector>
#include <cassert>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int N = 1010;

int g[N][N];
int pa[N], pb[N], was[N];
int n;

int dfs(int v) {
  if (v == -1) {
    return 1;
  }
  if (was[v]) {
    return 0;
  }
  was[v] = true;
  for (int j = 0; j < n; j++) {
    if (g[v][j]) {
      if (dfs(pb[j])) {
        pa[v] = j;
        pb[j] = v;
        return 1;
      }
    }
  }
  return 0;
}

int main(int argc, char* argv[]) {
  int TEST_FROM = 0;
  int TEST_TO = 123456789;
  if (argc == 3) {
    sscanf(argv[1], "%d", &TEST_FROM);
    sscanf(argv[2], "%d", &TEST_TO);
  }
  freopen("in", "r", stdin);
  freopen("out", "w", stdout);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    fflush(stdout);
    int m;
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        g[i][j] = (i == j);
      }
    }
    for (int i = 0; i < m; i++) {
      int foo, bar;
      scanf("%d %d", &foo, &bar);
      g[foo][bar] = 1;
    }
    for (int k = 0; k < n; k++) {
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
          if (g[i][k] && g[k][j]) {
            g[i][j] = 1;
          }
        }
      }
    }
    for (int i = 0; i < n; i++) {
      g[i][i] = 0;
    }
    for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) {
        if (g[i][j] && g[j][i]) {
          g[i][j] = g[j][i] = 0;
        }
      }
    }
    for (int i = 0; i < n; i++) {
      pa[i] = pb[i] = -1;
    }
    int ans = n;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        was[j] = false;
      }
      if (dfs(i)) {
        ans--;
      }
    }
    printf("%d\n", ans);
    fflush(stdout);
    fprintf(stderr, "test %d solved, time = %d ms\n", qq, clock());
  }
  return 0;
}

#include<vector>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const int N = 505;

int n, m;

bool g[N][N];

vector<int> edge[N];

int vis[N], stamp, pre[N];

bool find(int u) {
    if (vis[u] == stamp) {
        return false;
    }
    vis[u] = stamp;
    for (int i = 0; i < (int)edge[u].size(); ++i) {
        int v = edge[u][i];
        if (pre[v] == -1 || find(pre[v])) {
            pre[v] = u;
            return true;
        }
    }
    return false;
}

int cal() {
    for (int i = 0; i < n; ++i) {
        pre[i] = -1;
    }
    int ans = n;
    for (int i = 0; i < n; ++i) {
        ++stamp;
        ans -= find(i);
    }
    return ans;
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d%d", &n, &m);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                g[i][j] = false;
            }
            g[i][i] = true;
        }
        for (int i = 0; i < m; ++i) {
            int a, b;
            scanf("%d%d", &a, &b);
            g[a][b] = true;
        }
        for (int k = 0; k < n; ++k) {
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    g[i][j] = g[i][j] || g[i][k] && g[k][j];
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            edge[i].clear();
            for (int j = 0; j < n; ++j) {
                if (g[i][j] && !g[j][i]) {
                    edge[i].push_back(j);
                }
            }
        }
        static int id = 0;
        printf("Case #%d: %d\n", ++id, cal());
    }
    return 0;
}

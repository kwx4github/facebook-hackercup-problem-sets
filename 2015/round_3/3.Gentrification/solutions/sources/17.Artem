#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>
#include <iomanip>

using namespace std;

#pragma comment(linker, "/STACK:200000000")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;

const int NMAX = 510;

bool d[510][510];
pair<int, int> e[110000];
int n, m, u[510], us, r[510];

void read() {
  cin >> n >> m;
  memset(d, 0, sizeof(d));
  forn(i, m) {
    scanf("%d%d", &e[i].fs, &e[i].sc);
    d[e[i].fs][e[i].sc] = true;
  }
}

void gen() {
  
}

bool dfs(int v) {
  if (u[v] == us)
    return false;
  u[v] = us;

  forn(i, n) 
    if (d[v][i] && r[i] == -1) {
      r[i] = v;
      return true;
    }
  forn(i, n)
    if (d[v][i] && dfs(r[i])) {
      r[i] = v;
      return true;
    }
  return false;
}

void solve() {
  forn(k, n)
    forn(i, n)
      forn(j, n)
        if (!d[i][j] && d[i][k] && d[k][j])
          d[i][j] = true;

  forn(i, n)
    forn(j, n)
      if (d[i][j] && d[j][i])
        d[i][j] = d[j][i] = false;

  memset(r, -1, sizeof(r));
  int ans = 0;
  forn(i, n) {
    us++;
    ans += dfs(i);
  }

  cout << n - ans << endl;
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  
  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; test++) {
    cerr << "Solving test " << setw(2) << test << " of " << tests << ". Time = " << setw(5) << clock() << endl;
    cout << "Case #" << test << ": ";
    read();
    //gen();
    solve();
  }
  
  return 0;
}
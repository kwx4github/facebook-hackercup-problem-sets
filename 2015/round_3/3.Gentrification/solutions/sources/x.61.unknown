// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

class range {
  struct Iterator {
    int val, inc;
    int operator*() {return val;}
    bool operator!=(Iterator& rhs) {return val < rhs.val;}
    void operator++() {val += inc;}
  };
  Iterator i, n;
public:
  range(int e) : i({0, 1}), n({e, 1}) {}
  range(int b, int e) : i({b, 1}), n({e, 1}) {}
  range(int b, int e, int inc) : i({b, inc}), n({e, inc}) {}
  Iterator& begin() {return i;}
  Iterator& end() {return n;}
};

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}

typedef vector<int> Node;
typedef vector<Node> Graph;
int scc(const Graph& G, const Graph& RG, vector<int>& cmp) {
    int n = G.size();
    int K = 0; // the number of components

    cmp.assign(n, -1); // cmp[v] := component id of vertex v (0, 1, ..., K-1)
    vector<bool> used(n);
    vector<int> order;

    // ordinary dfs
    function<void(int)> dfs = [&](int u) {
        used[u] = true;
        for(int w : G[u]) if(!used[w]) {
            dfs(w);
        }
        order.push_back(u);
    };
    for(int u = 0; u < n; u++) if(!used[u]) {
        dfs(u);
    }
    reverse(order.begin(), order.end());

    // reverse dfs
    function<void(int)> rdfs = [&](int u) {
        cmp[u] = K;
        for(int w : RG[u]) if(cmp[w] == -1) {
            rdfs(w);
        }
    };
    for(int u : order) if(cmp[u] == -1) {
        rdfs(u);
        K++;
    }

    return K;
}
void solve() {
    int N, M;
    cin >> N >> M;
    Graph G(N);
    Graph RG(N);
    REP(i, M) {
        int a, b;
        cin >> a >> b;
        G[a].push_back(b);
        RG[b].push_back(a);
    }

    vector<int> cmp;
    int K = scc(G, RG, cmp);
    vector<int> size(K);
    REP(i, N) size[ cmp[i] ]++;

    Graph NG(K);
    map<int, set<int>> used;
    vector<int> indeg(K);
    REP(i, N) for(int j : G[i]) {
        int u = cmp[i];
        int v = cmp[j];
        if(u == v) continue;
        if(used[u].count(v)) continue;
        assert(u < v);
        indeg[v]++;
        used[u].insert(v);
        NG[u].push_back(v);
    }

    vector<int> dp(K, INT_MIN);
    for(int i = K-1; i >= 0; i--) {
        int ca = size[i];
        int cb = 0;
        for(int j : NG[i]) cb += dp[j];
        dp[i] = max(ca, cb);
    }
    int ans = 0;
    REP(i, K) if(indeg[i] == 0) ans += dp[i];
    cout << ans << endl;
}
int main(){
    iostream_init();
    int T;
    cin >> T;
    for(int testcase = 1; testcase <= T; testcase++) {
        cout << "Case #" << testcase << ": ";
        solve();
    }
    return 0;
}

/* vim:set foldmethod=marker: */


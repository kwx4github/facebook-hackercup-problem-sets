#include<stdio.h>
#include<algorithm>
#include<vector>
#include<queue>

using namespace std;
const int D_MAX_V=1100;
const int D_v_size=1100;
struct D_wolf{
	int t,c,r;
	D_wolf(){t=c=r=0;}
	D_wolf(int t1,int c1,int r1){
		t=t1;c=c1;r=r1;
	}
};
vector<D_wolf>D_G[D_MAX_V];
int D_level[D_MAX_V];
int D_iter[D_MAX_V];

void add_edge(int from,int to,int cap){
	D_G[from].push_back(D_wolf(to,cap,D_G[to].size()));
	D_G[to].push_back(D_wolf(from,0,D_G[from].size()-1));
}
void D_bfs(int s){
	for(int i=0;i<D_v_size;i++)D_level[i]=-1;
	queue<int> Q;
	D_level[s]=0;
	Q.push(s);
	while(Q.size()){
		int v=Q.front();
		Q.pop();
		for(int i=0;i<D_G[v].size();i++){
			if(D_G[v][i].c>0&&D_level[D_G[v][i].t]<0){
				D_level[D_G[v][i].t]=D_level[v]+1;
				Q.push(D_G[v][i].t);
			}
		}
	}
}
int D_dfs(int v,int t,int f){
	if(v==t)return f;
	for(;D_iter[v]<D_G[v].size();D_iter[v]++){
		int i=D_iter[v];
		if(D_G[v][i].c>0&&D_level[v]<D_level[D_G[v][i].t]){
			int d=D_dfs(D_G[v][i].t,t,min(f,D_G[v][i].c));
			if(d>0){
				D_G[v][i].c-=d;
				D_G[D_G[v][i].t][D_G[v][i].r].c+=d;
				return d;
			}
		}
	}
	return 0;
}
int max_flow(int s,int t){
	int flow=0;
	for(;;){
		D_bfs(s);
		if(D_level[t]<0)return flow;
		for(int i=0;i<D_v_size;i++)D_iter[i]=0;
		int f;
		while((f=D_dfs(s,t,99999999))>0){flow+=f;}
	}
	return 0;
}

int G[510][510];
int UF[510];
int FIND(int a){
	if(UF[a]<0)return a;
	return UF[a]=FIND(UF[a]);
}
void UNION(int a,int b){
	a=FIND(a);b=FIND(b);if(a==b)return;UF[a]+=UF[b];UF[b]=a;
}
int sz[510];
vector<int>g[510];
int num[510];
int main(){
	int T;scanf("%d",&T);
	for(int t=1;t<=T;t++){
		int a,b;scanf("%d%d",&a,&b);
		for(int i=0;i<510;i++)g[i].clear();
		for(int i=0;i<a;i++)UF[i]=-1;
		for(int i=0;i<a;i++)for(int j=0;j<a;j++)
			G[i][j]=0;
		for(int i=0;i<a;i++)G[i][i]=0;
		for(int i=0;i<b;i++){
			int p,q;
			scanf("%d%d",&p,&q);
			G[p][q]=1;
		}
		for(int k=0;k<a;k++)for(int i=0;i<a;i++)for(int j=0;j<a;j++)
			G[i][j]|=(G[i][k]&G[k][j]);
		for(int i=0;i<a;i++)for(int j=i+1;j<a;j++){
			if(G[i][j]&&G[j][i])UNION(i,j);
		}
		int ind=0;
		for(int i=0;i<a;i++){
			if(UF[i]<0){
				num[i]=ind;
				sz[ind++]=-UF[i];
			}
		}
		for(int i=0;i<a;i++){
			if(UF[i]>=0)num[i]=num[FIND(i)];
		}
		for(int i=0;i<a;i++)for(int j=0;j<a;j++){
			if(UF[i]<0&&UF[j]<0&&i!=j){
				if(G[i][j])g[num[i]].push_back(num[j]);
			}
		}
		int ss=ind*2;
		int st=ind*2+1;
		for(int i=0;i<D_MAX_V;i++){
			D_G[i].clear();
			D_level[i]=D_iter[i]=0;
		}
		for(int i=0;i<ind;i++){
			add_edge(ss,i,sz[i]);
			add_edge(i+ind,st,sz[i]);
		}
		for(int i=0;i<ind;i++){
			for(int j=0;j<g[i].size();j++)add_edge(i,ind+g[i][j],99999999);
		}
		printf("Case #%d: %d\n",t,a-max_flow(ss,st));
	}
}
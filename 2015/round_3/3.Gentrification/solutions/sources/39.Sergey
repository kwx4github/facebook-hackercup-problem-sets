#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 505;

int n, m, r;
bitset<nmax> g[nmax], w[nmax];
int cnt[nmax];
int res;
map<int64, int> dp;
vector<int> q;
int iter = 0;
bitset<nmax> fsrt;
double strt;


int64 calc(const bitset<nmax> &h) {
	int64 res = 0;
	int64 p = 219037;
	int64 now = p;
	forn(i, n) {
		if (h[i]) res += now;
		now *= p;
	}
	return res;
}

bool ls(int a, int b) {
	bitset<nmax> l, r;
	l = w[a] & fsrt;
	r = w[b] & fsrt;

	if (l.count() == r.count()) {
		forn(i, n)
			if (l[i] != r[i])
				return l[i] < r[i];
		return 0;
	}
	return l.count() > r.count();
}

void go(int now, bitset<nmax> h, int lft) {
//    cerr << now << " " << h.count() << " " << res << endl;
	if (h.count() <= res) return;
	if (now - 1 > res) {
		res = now - 1;
//		cerr << res << " " << clock() << endl;
	}
	if ((clock()  - strt) > CLOCKS_PER_SEC * 7) return;

//	int64 hsh = calc(h);

//	if (dp[hsh] >= now) return;
//	dp[hsh] = now;


//	cerr << lft << " " << h[lft] << endl;
	while (lft < n && !h[q[lft]]) lft ++;

//	vector<int> oq = q;
	if (lft < n) {
		iter ++;
//		if (iter % 300 == 0) {
//			fsrt = h;
//			sort(q.begin() + lft, q.end(), ls);
//		}

		int i = q[lft];

		bitset<nmax> buf = h & w[i];
		go(now + 1, h & w[i], lft + 1);
		if (buf != h) {
			h[i] = 0;
			go(now, h, lft + 1);
		}
	}

}

void solve() {
	dp.clear();
	forn(i, nmax) {
		g[i].reset();
		w[i].reset();
	}

	cin >> n >> m;
//	n = 500;
//	m = 4000;

//	if (0) {
		forn(i, m) {
			int u, v;
			scanf("%d %d", &u, &v);
			g[u][v] = 1;
		}
//	} else { 
//		forn(i, m) {
///			int u = rand() % (n - 1);
//			int v = rand() % (n - u - 1) + u + 1;
//			g[u][v] = 1;
//		}
//	}



	forn(k, n)
		forn(i, n)
			forn(j, n)
				g[i][j] = g[i][j] | (g[i][k] & g[k][j]);
	forn(i, n) {
		forn(j, n) 
			if (g[i][j] ^ g[j][i])
				w[i][j] = 0;
			else
				w[i][j] = 1;
		w[i][i] = 1;
	}

	forn(i, n)
		q.pb(i);
	random_shuffle(all(q));

	bitset<nmax> st;
	st.reset();
	forn(i, n)
		st[i] = 1;
	fsrt = st;

	sort(all(q), ls);
/*
	st.reset();
	memset(used, 0, sizeof used);
	forn(i, n)
		if (!used[i]) {
			cnt[i] = 0;
			forn(j, n)
				if (w[i] == w[j]) {
					cnt[i] ++;
					used[i] = 1;
				}
			st[i] = 1;
		}   */

	res = 1;
	strt = clock();
	go(1, st, 0);

	reverse(all(q));
	strt = clock();
	go(1, st, 0);

	cout << res << endl;
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);

	int tst;
	cin >> tst;
	forn(i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
		cerr << i << " " << clock() << endl;
	}
	

	return 0;
}

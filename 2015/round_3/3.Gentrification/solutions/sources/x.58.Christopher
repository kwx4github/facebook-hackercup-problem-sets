#ifdef DEBUG
	#define D(x...) fprintf(stderr,x);
#else
	#define D(x...) 0
#endif
#include <cstdio>
#include <cmath>
#include <stack>
#include <cassert>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;

vector<bool> done;
vector<int> idx, lowest;
vector<int> color;
int nColors;
vector<vector<int> > edges;
stack<int> s;
void dfs(int x);
int V, E;
int ans;
int dfs_i;
int count_i;

vector<vector<bool> > adj;
vector<int> capacity;
vector<int> paired;
vector<bool> aug_seen;

bool aug_dfs(int x) {
    if(aug_seen[x]) return 0;
    aug_seen[x] = 1;
    for (int y = 0; y < V; y++) {
        if (!adj[color[x]][color[y]]) continue;
        if (paired[y] == -1) {
            paired[y] = x;
            return 1;
        } else {
            if (aug_dfs(paired[y])) {
                paired[y] = x;
                return 1;
            }
        }
    }
}

int main() {
    int nTests;
    scanf("%d ",&nTests);
    for (int test=1;test<=nTests;test++) {
        if (1) fprintf(stderr,"Case %d/%d\n",test,nTests);

        scanf("%d %d", &V, &E);
        edges = vector<vector<int> >(V);
        for (int i = 0; i < E; i++) {
            int a, b;
            scanf("%d%d", &a, &b);
            edges[a].push_back(b);
        }

        ans = -1;
        dfs_i = 0;
        s = stack<int>();
        idx = vector<int>(V, -1);
        color = vector<int>(V, -1);
        lowest = vector<int>(V, -1);
        done = vector<bool>(V, 0);
        nColors = 0;
        count_i = 0;

        for (int i = 0; i < V; i++) {
            dfs(i);
            count_i -= V*2;
        }
        adj = vector<vector<bool> >(nColors, vector<bool>(nColors));
        capacity = vector<int>(V, 0);
        paired = vector<int>(V, -1);
        for (int i = 0; i < V; i++) {
            for (vector<int>::iterator itr = edges[i].begin(); itr != edges[i].end(); itr++) {
                if (color[*itr] != color[i]) {
                    adj[color[i]][color[*itr]] = 1;
                }
            }
        }
        int ans = V;
        aug_seen = vector<bool>(V, 0);
        for (int i = 0; i < V; i++) {
            if (aug_dfs(i)) ans--;
        }

        printf("Case #%d: %d\n", test, ans);
    }
}

void dfs(int i) {
    if (idx[i] != -1) {
        return;
    }
    idx[i] = count_i;
    lowest[i] = count_i;
    count_i++;
    s.push(i);
    for (vector<int>::iterator itr = edges[i].begin(); itr != edges[i].end(); itr++) {
        if (idx[*itr] == -1) {
            dfs(*itr);
            lowest[i] = min(lowest[i], lowest[*itr]);
        } else {
            lowest[i] = min(lowest[i], idx[*itr]);
        }
    }
    if (lowest[i] == idx[i]) {
        int tmp = 0;
        while (s.top() != i) {
            color[s.top()] = nColors;
            s.pop();
            tmp++;
        }
        color[s.top()] = nColors;
        s.pop();
        tmp++;
        nColors++;
    }
}

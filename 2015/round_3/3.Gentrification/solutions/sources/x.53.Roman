#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define next next_fisdgfhisu
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"
const int inf = 100000;
int n, m;
int a[510][510];
int was[2000];
int W[2000];
int ws[2000];
int kc;
int cc = 0;
int ke;
int next[1000000];
int head[2000];
int e[1000000];
int f[1000000];
int c[1000000];
void init() {
  ke = 0;
  memset(head, 0, sizeof(head));
}
void add2(int x, int y, int w) {
  ke++;
  next[ke] = head[x];
  head[x] = ke;
  e[ke] = y;
  f[ke] = 0;
  c[ke] = w;
}      
void add(int x, int y, int w) {
  add2(x, y, w);
  add2(y, x, 0);
}
bool dfs(int v) {
  if (v == kc + kc + 1) {
    return true;
  }
  ws[v] = cc;
  for (int bb = head[v]; bb; bb = next[bb]) {
    if (ws[e[bb]] != cc && c[bb] - f[bb] > 0) {
      if (dfs(e[bb])) {
        f[bb]++;
        f[bb^1]--;
        return true;
      }
    }
  }
  return false;
}
int flow() {
  int ans = 0;
  while (1) {
    cc++;
    if (!dfs(0)) {
      break;
    }
    ans++;
  }
  return ans;
}
void solve() {
  scanf("%d %d", &n, &m);
  memset(a, 0, sizeof(a));
  for (int i = 0; i < m; i++) {
    int x, y;
    scanf("%d %d", &x, &y);
    a[x][y] = 1;
  }
  for (int i = 0; i < n; i++) {
    a[i][i] = 1; 
  }
  for (int k = 0; k < n; k++) {
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        if (a[i][k] && a[k][j]) {
          a[i][j] = 1;
        }
      }
    }
  }
  memset(was, 0, sizeof(was));
  memset(W, 0, sizeof(W));
  kc = 0;
  for (int i = 0; i < n; i++) if (was[i] == 0) {
    kc++;
    for (int j = 0; j < n; j++) if (a[i][j] && a[j][i]) {
      was[j] = kc;
      W[kc]++;
    }
  }
  init();
  for (int i = 1; i <= kc; i++) {
    add(0, i, W[i]);
    add(i + kc, kc + kc + 1, W[i]);
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) if (was[i] != was[j] && a[i][j]) {
      add(was[i], was[j] + kc, inf);
    }
  }

  int res = flow();
  printf("%d\n", n - res);
}

int main(){
  #ifdef home
  assert(freopen(problem_name".out","wt",stdout));
  assert(freopen(problem_name".in","rt",stdin));
  #endif
  int T;
  scanf("%d", &T);
  for (int ti = 1; ti <= T; ti++) {
    printf("Case #%d: ", ti);
    solve();
  }
  return 0;
}

import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;
import static java.util.Arrays.fill;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class C {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static int n;
	static boolean edge[][];
	static boolean backEdge[][];
	static boolean dstUsed[];
	static boolean seenSrc[];
	static boolean seenDst[];
	
	static void solve() throws Exception {
		n = nextInt();
		edge = new boolean[n][n];
		int m = nextInt();
		for (int i = 0; i < m; i++) {
			edge[nextInt()][nextInt()] = true;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				for (int k = 0; k < n; k++) {
					edge[j][k] |= edge[j][i] & edge[i][k];
				}
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j <= i; j++) {
				if (edge[i][j] && edge[j][i]) {
					edge[i][j] = false;
					edge[j][i] = false;
				}
			}
		}
		backEdge = new boolean[n][n];
		dstUsed = new boolean[n];
		seenSrc = new boolean[n];
		seenDst = new boolean[n];
		int ans = n;
		for (int start = 0; start < n; start++) {
			fill(seenSrc, false);
			fill(seenDst, false);
			if (goSrc(start)) {
				--ans;
			}
		}
		printCase();
		out.println(ans);
	}
	
	static boolean goSrc(int cur) {
		if (seenSrc[cur]) {
			return false;
		}
		seenSrc[cur] = true;
		for (int next = 0; next < n; next++) {
			if (!edge[cur][next]) {
				continue;
			}
			edge[cur][next] = false;
			backEdge[cur][next] = true;
			if (goDst(next)) {
				return true;
			}
			edge[cur][next] = true;
			backEdge[cur][next] = false;
		}
		return false;
	}

	static boolean goDst(int cur) {
		if (seenDst[cur]) {
			return false;
		}
		seenDst[cur] = true;
		if (!dstUsed[cur]) {
			dstUsed[cur] = true;
			return true;
		}
		for (int next = 0; next < n; next++) {
			if (!backEdge[next][cur]) {
				continue;
			}
			edge[next][cur] = true;
			backEdge[next][cur] = false;
			if (goSrc(next)) {
				return true;
			}
			edge[next][cur] = false;
			backEdge[next][cur] = true;
		}
		return false;
	}

	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
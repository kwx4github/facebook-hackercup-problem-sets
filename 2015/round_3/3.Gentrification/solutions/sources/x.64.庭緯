// by shik {{{
#include <bits/stdc++.h>
#include <unistd.h>
#define SZ(x) ((int)(x).size())
#define ALL(c) begin(c),end(c)
#define REP(i,n) for ( int i=0; i<(int)(n); i++ )
#define REP1(i,a,b) for ( int i=(int)(a); i<=(int)(b); i++ )
#define FOR(it,c) for ( auto it=(c).begin(); it!=(c).end(); it++ )
#define MP make_pair
#define PB push_back
using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef long long LL;

void RI() {}

template<typename... T>
void RI( int& head, T&... tail ) {
    scanf("%d",&head);
    RI(tail...);
}

template<typename T>
void _dump( const char* s, T&& head ) { cerr<<s<<"="<<head<<endl; }

template<typename T, typename... Args>
void _dump( const char* s, T&& head, Args&&... tail ) {
    cout << __PRETTY_FUNCTION__ << endl;
    int c=0;
    while ( *s!=',' || c!=0 ) {
        if ( *s=='(' || *s=='[' || *s=='{' ) c++;
        if ( *s==')' || *s==']' || *s=='}' ) c--;
        cerr<<*s++;
    }
    cerr<<"="<<head<<", ";
    _dump(s+1,tail...);
}

#define dump(...) _dump(#__VA_ARGS__, __VA_ARGS__);

template<typename Iter>
ostream& _out( ostream &s, Iter b, Iter e ) {
    s<<"[";
    for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
    s<<"]";
    return s;
}

template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.first<<","<<p.second<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
template<typename T>
ostream& operator <<( ostream &s, const set<T> &c ) { return _out(s,ALL(c)); }
template<typename A, typename B>
ostream& operator <<( ostream &s, const map<A,B> &c ) { return _out(s,ALL(c)); }

/// }}}

struct Maxflow {
    static const int INF=1e8;
    struct E {
        int to,cap,rev;
        E() {}
        E( int _to, int _cap, int _rev ):to(_to),cap(_cap),rev(_rev) {}
    };
    int n;
    vector< vector<E> > e;
    vector< vector<E>::iterator > cur;
    vector<int> dis;
    void init( int _n ) {
        n=_n;
        e.resize(n);
        cur.resize(n);
        dis.resize(n);
        REP(i,n) e[i].clear();
    }
    void add( int a, int b, int c ) {
        if ( a==b ) return;
        e[a].PB(E(b,c,e[b].size()));
        e[b].PB(E(a,0,e[a].size()-1));
    }
    bool bfs() {
        fill(dis.begin(),dis.end(),-1);
        queue<int> q;
        dis[0]=0; q.push(0);
        while ( !q.empty() && dis[n-1]==-1 ) {
            int p=q.front(); q.pop();
            FOR(it,e[p]) {
                if ( it->cap==0 || dis[it->to]!=-1 ) continue;
                dis[it->to]=dis[p]+1;
                q.push(it->to);
            }
        }
        return dis[n-1]!=-1;
    }
    int go( int p, int c ) {
        if ( p==n-1 ) return c;
        int ret=0;
        for ( auto &it=cur[p]; it!=e[p].end(); it++ ) {
            if ( it->cap==0 || dis[it->to]!=dis[p]+1 ) continue;
            int now=go(it->to,min(it->cap,c-ret));
            ret+=now;
            it->cap-=now;
            e[it->to][it->rev].cap+=now;
            if ( ret==c ) break;
        }
        if ( ret==0 ) dis[p]=-1;
        return ret;
    }
    int maxflow() {
        int ret=0;
        while ( bfs() ) {
            REP(i,n) cur[i]=e[i].begin();
            ret+=go(0,INF);
        }
        return ret;
    }
} flow;

const int N=514;

int n,m;
bool e[N][N];
void input() {
    RI(n,m);
    memset(e,0,sizeof(e));
    REP(i,m) {
        int a,b;
        RI(a,b);
        e[a][b]=1;
    }
}

bool vis1[N];
VI ord;
void dfs1( int p ) {
    vis1[p]=1;
    REP(i,n) if ( !vis1[i] && e[p][i] ) dfs1(i);
    ord.PB(p);
}

bool vis2[N];
int scc[N];
void dfs2( int p, int cid ) {
    vis2[p]=1;
    scc[p]=cid;
    REP(i,n) if ( !vis2[i] && e[i][p] ) dfs2(i,cid);
}

int ncc;
void build_scc() {
    ord.clear();
    memset(vis1,0,sizeof(vis1));
    REP(i,n) if ( !vis1[i] ) dfs1(i);
    reverse(ALL(ord));
    memset(vis2,0,sizeof(vis2));
    memset(scc,-1,sizeof(scc));
    ncc=0;
    REP(ii,n) {
        int i=ord[ii];
        if ( !vis2[i] ) dfs2(i,ncc++);
    }
    // REP(i,n) printf("%d: %d\n",i,scc[i]);
}

bool se[N][N];
void solve() {
    build_scc();
    memset(se,0,sizeof(se));
    REP(i,n) REP(j,n) if ( scc[i]!=scc[j] && e[i][j] ) {
        // printf("%d,%d : %d,%d\n",i,j,scc[i],scc[j]);
        se[scc[i]][scc[j]]=1;
    }
    int sink=2*n+1;
    flow.init(sink+1);
    REP1(i,1,n) flow.add(0,i,1);
    REP1(i,n+1,2*n) flow.add(i,sink,1);
    REP(i,n) REP(j,n) if ( scc[i]!=scc[j] && se[scc[i]][scc[j]] ) {
        // printf("(%d,%d) ",i,j);
        flow.add(i+1,j+n+1,514514);
    }
    int ans=n-flow.maxflow();
    printf("%d\n",ans);
}

int main( int argc, char *argv[] ) {
    int n_case;
    RI(n_case);
    REP1(i,1,n_case) {
        input();
        if ( argc==2 && atoi(argv[1])!=i ) continue;
        printf("Case #%d: ",i);
        solve();
        fflush(stdout);
    }
    return 0;
}


#include <bits/stdc++.h>

using namespace std;


const int MaxN = 505;

vector<int> adj[MaxN];
int N, M;
bool reachable[MaxN][MaxN];
bool newadj[MaxN][MaxN];
bool vis[MaxN];
int matchL[MaxN], matchR[MaxN];



void cleanup(){
	for(int i = 0; i <= N; i++){
		adj[i].clear();
		fill(reachable[i], reachable[i]+N+1, false);
		fill(newadj[i], newadj[i]+N+1, false);
	}
	fill(vis, vis+N+1, false);
	fill(matchL, matchL+1, -1);
	fill(matchR, matchR+1, -1);
}


void input(){
	scanf("%d%d", &N, &M);
//	fprintf(stderr, "%d %d\n", N, M);
	for(int i = 0; i < M; i++){
		int u, v;
		scanf("%d%d", &u, &v);
		adj[u].push_back(v);
	}
}

void dfs(int start, int v){
	reachable[start][v] = true;
	for(int s: adj[v]){
		if(reachable[start][s]) continue;

		dfs(start, s);
	}
}




bool dfs(int v){
	if(vis[v]) return false;
	vis[v] = true;

	for(int r = 0; r < N; r++){
		if(!newadj[v][r]) continue;

		if(matchR[r] == -1 || dfs(matchR[r])){
			matchL[v] = r;
			matchR[r] = v;
			return true;
		}
	}
	return false;
}

int match(){
	int result = 0;
	fill(matchL, matchL+N+1, -1);
	fill(matchR, matchR+N+1, -1);

	bool ok = true;
	while(ok){
		ok = false;

		fill(vis, vis+N+1, false);

		for(int i = 0; i < N; i++){
			if(!vis[i] && matchL[i] == -1 && dfs(i)){
				result++;
				ok = true;
			}
		}
		
	}

	return result;
}


void test(){
	input();

	for(int i = 0; i < N; i++){
		dfs(i, i);
	}

	for(int u = 0; u < N; u++){
		for(int v: adj[u]){
			if(reachable[u][v] && reachable[v][u]) continue;
			
//			newadj[u][v] = true;
			for(int s = 0; s < N; s++){
				if(reachable[v][s] && reachable[s][v])
					newadj[u][s] = true;

				if(reachable[u][s] && reachable[s][u])
					newadj[s][v] = true;
			}
		}
	}

/*	for(int u = 0; u < N; u++){
		for(int v = 0; v < N; v++)
			printf("%d", newadj[u][v]);
		printf("\n");
	}*/

	printf("%d\n", N - match());


	cleanup();
}

int main(){
	int T;
	scanf("%d", &T);

	for(int i = 1; i <= T; i++){
		printf("Case #%d: ", i);
		test();
	}
}

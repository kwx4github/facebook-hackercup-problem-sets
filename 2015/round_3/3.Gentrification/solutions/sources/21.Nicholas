#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cstring>
#include <numeric>
using namespace std;
typedef long long ll;
#define F0(i,n) for (int i = 0; i < n; i++)
#define F1(i,n) for (int i = 1; i <= n; i++)
#define CL(a,x) memset(x, a, sizeof(x));
#define SZ(x) ((int)x.size())
const double eps = 1e-10;
const int inf = 1000000009;
int i, j, k, m, n, l;
const int N = 505;
int ans;

int g[N][N];

int comp[N];

int x[N], y[N], V[N];
int d[N][N];

int rec(int i) {
	V[i] = 1;
	for (int j = 1; j <= n; j++) if (d[i][j]) {
		if (y[j] == 0 || (V[y[j]] == 0 && rec(y[j]))) {
			x[i] = j;
			y[j] = i;
			return 1;
		}
	}
	return 0;
}

int matching() {
	CL(0, x); CL(0, y);
	int ans = 0;
	memset(x, 0, sizeof(x));
	memset(y, 0, sizeof(y));
	F1(i, n) if (x[i] == 0) {
		F1(j,n) V[j] = 0;
		ans += rec(i);
	}
	return ans;
}

void solve() {
	CL(0, comp);
	m = 0;
	F0(i, n) if (comp[i] == 0) {
		m++;
		F0(j, n) if (g[i][j] && g[j][i]) {
			comp[j] = m;
		}
	}
	CL(0, d);
	F0(i, n) F0(j, n) if (g[i][j] && comp[i] != comp[j]) d[i + 1][j + 1] = 1;
	ans = n - matching();
}

int myans;
void solve2() {
	myans = 0;
	F0(mask, (1 << n)) {
		int cnt = 0;
		bool good = true;
		F0(i, n) if ((1 << i)&mask) {
			cnt++;
			F0(j, n) if ((1 << j)&mask) {
				if (g[i][j] != g[j][i]) {
					good = false;
				}
			}
		}
		if (good) myans = max(myans, cnt);
	}
}

void gen() {
	while (1) {
		CL(0, g);
		n = rand() % 14 + 1;
		m = rand() % (n*n);
		while (m--) {
			i = rand() % n; j = rand() % n;
			if (i != j) g[i][j] = 1;
		}
		F0(i, n) g[i][i] = 1;
		F0(k, n) F0(i, n) F0(j, n) if (g[i][k] && g[k][j]) g[i][j] = 1;
		solve();
		solve2();
		cout << ans << " " << myans << endl;
		if (ans != myans) throw 21;
	}
}

int main() {
	freopen("c.in", "r", stdin);
	freopen("c.txt", "w", stdout);

	int tn; cin >> tn; F1(tt, tn) 
	{
		cin >> n >> m; CL(0, g); while (m--) {
			cin >> i >> j;
			g[i][j] = 1;
		}
		F0(i, n) g[i][i] = 1;
		F0(k, n) F0(i, n) F0(j, n) if (g[i][k] && g[k][j]) g[i][j] = 1;

		solve();
		cout << "Case #" << tt << ": ";
		cout << ans << endl;
	}
	return 0;
}

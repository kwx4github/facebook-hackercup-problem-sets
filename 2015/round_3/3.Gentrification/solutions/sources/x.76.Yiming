#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <ctime> 

using namespace std;

#define _int64 long long

#define maxn 6000
#define maxm 100000

struct Edge {
  int t;
  int cap;
  int next;
};
class DirectedGraph {
 public:
  void Init(int n) {
    int i;
    n_ = n;
    m_ = 0;
    for (i=0;i<n_;i++)
      a_[i]=-1;
  }
  void AddEdge(int x,int y, int cap) {
    e_[m_].t=y;
    e_[m_].cap=cap;
    e_[m_].next=a_[x];
    a_[x]=m_;
    m_++;
    e_[m_].t=x;
    e_[m_].cap=0;
    e_[m_].next=a_[y];
    a_[y]=m_;
    m_++;
  }
  
  int search(int x,int limit)
  {
    int i,j,f,now,f1;
    f=0;
    if (limit==0) return 0;
    if (x==t_) return limit;
    for (i=a_[x];i!=-1;i=e_[i].next)
    {
      if ((e_[i].cap>0)&&(dis_[e_[i].t]==dis_[x]+1))
      {
        now=limit-f;
        if (e_[i].cap<now) now=e_[i].cap;
        f1=search(e_[i].t,now);
        if (f1>0)
        {
          f+=f1;
          e_[i].cap-=f1;
          e_[i^1].cap+=f1;
        }
        if (f==limit) break;
      }
    }
    return f;
  }
  
  int MaxFlow(int s,int t) {
    int i,j,k,ans;
    s_=s;t_=t;
    ans=0;
    while (1)
    {
      memset(dis_,-1,sizeof(dis_));
      vector<int> q;
      q.clear();
      q.push_back(s);
      dis_[s]=0;
      for (i=0;i<q.size();i++)
      {
        for (j=a_[q[i]];j!=-1;j=e_[j].next)
        {
          if ((e_[j].cap>0)&&(dis_[e_[j].t]==-1))
          {
            dis_[e_[j].t]=dis_[q[i]]+1;
            q.push_back(e_[j].t);
          }
          if (dis_[t_]!=-1) break;
        }
        if (dis_[t_]!=-1) break;
      }
      if (dis_[t_]==-1) break;
      ans+=search(s,2000000000);
    }
    return ans;
  }
  
  void output()
  {
    int i,j;
    for (i=0;i<n_;i++)
      for (j=a_[i];j!=-1;j=e_[j].next)
        printf("%d %d %d\n",i,e_[j].t,e_[j].cap);
  }

  Edge e_[maxm];
  int used_[maxn];
  int a_[maxn];
  int dis_[maxn];
  int n_,m_,s_,t_;
};

int used[1000];
vector<int> a1[1000];
vector<int> a2[1000];
vector<int> q;
int ind[1000];
int nn;
vector<int> b1[1000];
vector<int> b2[1000];
int w[1000];

void dfs1(int x)
{
  int i;
  for (i=0;i<a2[x].size();i++)
  {
    if (used[a2[x][i]]==0)
    {
      used[a2[x][i]]=1;
      q.push_back(a2[x][i]);
      dfs1(a2[x][i]);
    }
  }
}

void dfs2(int x)
{
  int i;
  for (i=0;i<a1[x].size();i++)
    if (used[a1[x][i]]==0)
    {
      used[a1[x][i]]=1;
      ind[a1[x][i]]=nn;
      w[nn]++;
      dfs2(a1[x][i]);
    }
}

DirectedGraph g;

int main()
{
  int i,j,k,l,t,n,m,ans,x,y;
  scanf("%d",&t);
  for (l=0;l<t;l++)
  {
    scanf("%d%d",&n,&m);
    for (i=0;i<n;i++)
    {
      a1[i].clear();
      a2[i].clear();
    }
    for (i=0;i<m;i++)
    {
      scanf("%d%d",&x,&y);
      a1[x].push_back(y);
      a2[y].push_back(x);
    }
    memset(used,0,sizeof(used));
    q.clear();
    for (i=0;i<n;i++)
      if (used[i]==0)
      {
        q.push_back(i);
        used[i]=1;
        dfs1(i);
      }
    nn=0;
    memset(used,0,sizeof(used));
    memset(w,0,sizeof(w));
    for (i=q.size()-1;i>=0;i--)
      if (used[q[i]]==0)
      {
        used[q[i]]=1;
        ind[q[i]]=nn;
        w[nn]++;
        dfs2(q[i]);
        nn++;
      }

    //cout<<nn<<endl;
    g.Init(nn*2+2);
    for (i=0;i<nn;i++)
    {
      g.AddEdge(0,i+1,w[i]);
      g.AddEdge(nn+1+i,nn+nn+1,w[i]);
    }
    for (i=0;i<n;i++)
      for (j=0;j<a1[i].size();j++)
        if (ind[i]!=ind[a1[i][j]])
          g.AddEdge(ind[i],nn+1+ind[a1[i][j]],2000000000);
    ans=g.MaxFlow(0,nn+nn+1);
    ans=n-ans;
    printf("Case #%d: %d\n",l+1,ans);
  }
  return 0;
}

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define forn(i, n) for (int i = 0; i < (n); i++)

typedef long long ll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef pair<int, int> pii;

class Solver {
  const int n;
  vvi es;
  vb was;
  vi p2;

  bool dfs(int v) {
    if (was[v]) return false;
    was[v] = true;
    for (int b : es[v]) {
      if (p2[b] < 0 || dfs(p2[b])) {
        p2[b] = v;
        return true;
      }
    }
    return false;
  }

public:
  Solver(int _n) : n(_n), es(n) {
//    eprintf("solver(%d)\n", n);
  }
  void adde(int a, int b) {
    es[a].pb(b);
//    eprintf("%d-->%d\n", a, b);
  }
  int solve() {
    p2 = vi(n, -1);
    int ans = 0;
    forn (i, n) {
      was = vb(n, false);
      if (dfs(i)) {
        ans++;
      }
    }
    return n - ans;
  }
};

vb was;
vi ord;
vvi es, rves;

void dfs1(int v) {
  if (was[v]) return;
  was[v] = true;
  for (int x : es[v]) dfs1(x);
  ord.pb(v);
}

vi comp;
void dfs2(int v) {
  if (was[v]) return;
  was[v] = true; comp.pb(v);
  for (int x : rves[v]) dfs2(x);
}

void solve() {
  int n, m;
  scanf("%d%d", &n, &m);
  es = vvi(n);
  rves = vvi(n);
  forn (i, m) {
    int a, b;
    scanf("%d%d", &a, &b);
    es[a].pb(b);
    rves[b].pb(a);
  }
  ord.clear();
  was = vb(n, false);
  forn (i, n) if (!was[i]) dfs1(i);

  was = vb(n, false);
  vi cid(n, -1);
  vvi comps;
  forn (i, n) if (!was[i]) {
    comp.clear();
    dfs2(i);
    for (int x : comp)
      cid[x] = sz(comps);
    comps.pb(comp);
  }
  vector<set<int>> ces(sz(comps));
  forn (a, n)
  for (int b : es[a])
    if (cid[a] != cid[b])
      ces[cid[a]].insert(cid[b]);

  Solver s(n);
  forn (a, n)
  for (int cb : ces[cid[a]])
  for (int b : comps[cb]) {
    s.adde(a, b);
  }
  printf("%d\n", s.solve());
}

int main(int argc, char* argv[]) {
  assert(argc <= 3);
  if (argc == 3) {
    assert(freopen(argv[1], "r", stdin));
    assert(freopen(argv[2], "w", stdout));
  } else {
    string filename = ".in";
    if (argc >= 2) filename = argv[1];

    assert(freopen(filename.c_str(), "r", stdin));

    if (filename.length() >= 3 && string(filename, filename.length() - 3, 3) == ".in") {
      filename = string(filename, 0, filename.length() - 3);
    }
    filename += ".out";
    assert(freopen(filename.c_str(), "w", stdout));
  }

  int TN;
  char buf[16];
  assert(fgets(buf, sizeof buf, stdin));
  assert(sscanf(buf, "%d", &TN) >= 1);
  for (int TID = 1; TID <= TN; TID++)
    try {
      eprintf("===== Solving test case #%d =====\n", TID);
      printf("Case #%d: ", TID);
      solve();
    } catch (...) {
      eprintf("Exception was caught while executing on test #%d\n", TID);
      return 1;
    }
  return 0;
}

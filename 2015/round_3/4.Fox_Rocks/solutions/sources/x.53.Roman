#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"
const ld eps = 1e-9;
int n, p0, d;
vector<pair<int, int> > g[1000000];
ld p[1000000];
/*void go2(int x1) {
  for (int i = 0; i < 4; i++) {
    int x = x1 + i;
    int ss = 0;
    for (int j = 0; j < sz(g[x]); j++) {
      ss += g[x][j].y;
    }
    for (int j = 0; j < sz(g[x]); j++) {
      if (g[x][j].x / 4 > x1) {
        p[g[x][j].x] += p[x] * g[x][j].y / ss;
      }
    }
  }
} */
void go1(int x1, int y) {
  vector<int> ss(4, 0);
  for (int i = 0; i < 4; i++) {
    int x = x1 * 4 + i;
    for (int j = 0; j < sz(g[x]); j++) {
      ss[i] += g[x][j].y;
    }
  }  
  vector<ld> p0(4, 0);
  for (int it = 0; it < 10; it++) {
    for (int i = 0; i < 4; i++) {
      p0[i] = p[x1 * 4 + i];
      p[x1 * 4 + i] = 0;
    }
    for (int i = 0; i < 4; i++) {
      int x = x1 * 4 + i;
      if (p0[i] < eps) continue;
      if (ss[i] == 0) {
        p[x] += p0[i];
      } else
      for (int j = 0; j < sz(g[x]); j++) {
        p[g[x][j].x] += p0[i] * g[x][j].y / ss[i];
      }
    }
  }
}
ld calc(int x, int y) {
  int x1 = x / 4;
  int y1 = y / 4;
  if (y1 < x1) {
    return 0;
  }
  for (int i = x1; i <= y1 + 1; i++) {
    for (int j = 0; j < 4; j++) {
      p[i * 4 + j] = 0;
    }
  }
  p[x] = 1;
  for (int i = x1; i <= y1; i++) {
    go1(i, y);
  }
  return p[y];
}
void solve() {
  scanf("%d %d %d", &n, &p0, &d);
  for (int i = 0; i < n; i++) {
    g[i].clear();
  }
  for (int i = 0; i < p0; i++) {
    int x, y, z;
    scanf("%d %d %d", &x, &y, &z);
    g[x].pb(mp(y, z));
  }
  for (int i = 0; i < d; i++) {
    int tp;
    int x, y, z;
    scanf("%d", &tp);
    if (tp == 1) {
      scanf("%d %d %d", &x, &y, &z);      
      g[x].pb(mp(y, z));
    } else
    if (tp == 2) {
      scanf("%d %d", &x, &y);      
      bool was = false;
      for (int j = 0; j < sz(g[x]); j++) {
        if (g[x][j].x == y) {
          swap(g[x][j], g[x][sz(g[x]) - 1]);
          g[x].pop_back();
          was = true;
          break;
        }
      }
      assert(was);
    } else {
      scanf("%d %d", &x, &y);
      printf(" %.6f", calc(x, y));
    }
  }
  printf("\n");
}

int main(){
  #ifdef home
  assert(freopen(problem_name".out","wt",stdout));
  assert(freopen(problem_name".in","rt",stdin));
  #endif
  int T;
  scanf("%d", &T);
  for (int ti = 1; ti <= T; ti++) {
    cerr<<ti<<endl;
    printf("Case #%d:", ti);
    solve();
  }
  return 0;
}

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <cstdint>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long Int;
typedef vector<int> vint;
typedef pair<int, int> pint;
#define mp make_pair

template <typename T1, typename T2> ostream &operator<<(ostream &os, const pair<T1, T2> &a) { return os << "(" << a.first << ", " << a.second << ")"; };
template <typename T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template <typename T> void chmin(T &t, const T &f) { if (t > f) t = f; }
template <typename T> void chmax(T &t, const T &f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }

namespace eq {

const int n = 4;
double *a[n];
void initGlobal() {
	for (int i = 0; i < n; ++i) {
		a[i] = new double[n + 1];
	}
}
void init() {
	for (int i = 0; i < n; ++i) {
		fill(a[i], a[i] + n + 1, 0.0);
	}
}
void solve() {
	for (int h = 0; h < n; ++h) {
		int im = h;
		for (int i = h + 1; i < n; ++i) {
			if (abs(a[im][h]) < abs(a[i][h])) {
				im = i;
			}
		}
		swap(a[h], a[im]);
		for (int j = h + 1; j <= n; ++j) {
			a[h][j] /= a[h][h];
		}
		for (int i = h + 1; i < n; ++i) {
			for (int j = h + 1; j <= n; ++j) {
				a[i][j] -= a[i][h] * a[h][j];
			}
		}
	}
	for (int i = n; i--; ) {
		for (int j = i + 1; j < n; ++j) {
			a[i][n] -= a[i][j] * a[j][n];
		}
	}
}

}	//	eq

int N, M, D;

int A[100010][4][4];
int B[100010][4][4];
int Deg[100010][4];
double P[100010][4][4];
double Q[100010][4][4];

struct Matrix {
	double v[4][4];
	Matrix() {
		memset(v, 0, sizeof(v));
	}
	Matrix(int) {
		memset(v, 0, sizeof(v));
		for (int i = 0; i < 4; ++i) {
			v[i][i] = 1.0;
		}
	}
};
Matrix operator*(const Matrix &a, const Matrix &b) {
	Matrix ret;
	for (int i = 0; i < 4; ++i) for (int k = 0; k < 4; ++k) for (int j = 0; j < 4; ++j) {
		ret.v[i][j] += a.v[i][k] * b.v[k][j];
	}
	return ret;
}

int segN;
Matrix seg[1000010];

void Update(int i) {
	using eq::a;
	for (int x = 0; x < 4; ++x) {
		Deg[i][x] = 0;
		for (int y = 0; y < 4; ++y) {
			Deg[i][x] += A[i][x][y];
		}
		for (int z = 0; z < 4; ++z) {
			Deg[i][x] += B[i][x][z];
		}
		if (Deg[i][x] == 0) {
			Deg[i][x] = 1;
		}
	}
	for (int dst = 0; dst < 4; ++dst) {
		eq::init();
		a[dst][dst] = 1.0;
		a[dst][4] = 1.0;
		for (int x = 0; x < 4; ++x) if (x != dst) {
			a[x][x] += 1.0;
			for (int y = 0; y < 4; ++y) {
				a[x][y] -= A[i][x][y] / (double)Deg[i][x];
			}
		}
		eq::solve();
		for (int x = 0; x < 4; ++x) {
			P[i][x][dst] = a[x][4];
		}
	}
	for (int dst = 0; dst < 4; ++dst) {
		eq::init();
		for (int x = 0; x < 4; ++x) {
			a[x][x] += 1.0;
			for (int y = 0; y < 4; ++y) {
				a[x][y] -= A[i][x][y] / (double)Deg[i][x];
			}
			a[x][4] += B[i][x][dst] / (double)Deg[i][x];
		}
		eq::solve();
		for (int x = 0; x < 4; ++x) {
			Q[i][x][dst] = a[x][4];
		}
	}
// cout<<"i = "<<i<<endl;
// for(int x=0;x<4;++x){for(int y=0;y<4;++y)cout<<P[i][x][y]<<" ";cout<<"; ";}cout<<endl;
// for(int x=0;x<4;++x){for(int y=0;y<4;++y)cout<<Q[i][x][y]<<" ";cout<<"; ";}cout<<endl;
	for (int x = 0; x < 4; ++x) for (int y = 0; y < 4; ++y) {
		seg[segN + i].v[x][y] = Q[i][x][y];
	}
	for (int u = segN + i; u >>= 1; ) {
		seg[u] = seg[u << 1] * seg[u << 1 | 1];
	}
}

void Add(int u, int v, int c) {
// cout<<"Add "<<u<<" "<<v<<" "<<c<<endl;
	assert(u != v);
	switch (v / 4 - u / 4) {
		case 0: {
			A[u / 4][u % 4][v % 4] += c;
		} break;
		case 1: {
			B[u / 4][u % 4][v % 4] += c;
		} break;
		default: assert(false);
	}
	Update(u / 4);
}

void Remove(int u, int v) {
// cout<<"Remove "<<u<<" "<<v<<endl;
	assert(u != v);
	switch (v / 4 - u / 4) {
		case 0: {
			A[u / 4][u % 4][v % 4] = 0;
		} break;
		case 1: {
			B[u / 4][u % 4][v % 4] = 0;
		} break;
		default: assert(false);
	}
	Update(u / 4);
}

double Calc(int u, int v) {
// cout<<"Calc "<<u<<" "<<v<<endl;
	double ret;
	if (u / 4 > v / 4) {
		ret = 0.0;
	} else {
		Matrix l(1), r(1);
		for (int a = segN + u / 4, b = segN + v / 4; a < b; a >>= 1, b >>= 1) {
			if (a & 1) l = l * seg[a++];
			if (b & 1) r = r * seg[--b];
		}
		const Matrix q = l * r;
		ret = 0.0;
		for (int z = 0; z < 4; ++z) {
			ret += q.v[u % 4][z] * P[v / 4][z][v % 4];
		}
	}
	return ret;
}

int ansLen;
double ans[100010];

int main() {
	eq::initGlobal();
	
	for (int TC = in(), tc = 1; tc <= TC; ++tc) {
cerr<<"BEGIN Case #"<<tc<<endl;
		N = in();
		M = in();
		D = in();
		segN = 1;
		for (segN = 1; segN < (N - 1) / 4 + 5; segN <<= 1);
		fill(seg, seg + segN * 4, Matrix(1));
		memset(A, 0, sizeof(A));
		memset(B, 0, sizeof(B));
		for (int i = 0; i <= (N - 1) / 4; ++i) {
			Update(i);
		}
		for (; M--; ) {
			const int u = in();
			const int v = in();
			const int c = in();
			Add(u, v, c);
		}
		ansLen = 0;
		for (; D--; ) {
			switch (in()) {
				case 1: {
					const int u = in();
					const int v = in();
					const int c = in();
					Add(u, v, c);
				} break;
				case 2: {
					const int u = in();
					const int v = in();
					Remove(u, v);
				} break;
				case 3: {
					const int u = in();
					const int v = in();
					ans[ansLen++] = Calc(u, v);
				} break;
				default: assert(false);
			}
		}
		printf("Case #%d:", tc);
		for (int i = 0; i < ansLen; ++i) {
			printf(" %.6f", ans[i]);
		}
		puts("");
		fflush(stdout);
	}
	
	return 0;
}


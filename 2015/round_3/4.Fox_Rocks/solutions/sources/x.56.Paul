#include <vector>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <map>
#include <ctime>
#include <cassert>

using namespace std;

ofstream fout("../../../output.txt");
ifstream fin("../../../input.txt");


double pmat[100000][4][4];
int mn[100000];
int mx[100000];
int m,n;

double adj[100000][8];
int floors[100000];

double mat[2][8][8];

void solve(int curr)
{
    int x = mn[curr];
    x*=4;
    memset(mat,0,sizeof(mat));
    
    int i,j,k;
    double d;
    
    for(i=0; i<4; i++)
    {
        d=0;
        for(j=0; j<8; j++)
        {
            d+=adj[x+i][j];
        }
        if(d==0.0)
        {
            d=1.0;
            mat[0][i][i]=1.0;
        }
        else{
            for(j=0; j<8; j++)
            {
                mat[0][i][j]=((double)adj[x+i][j])/d;
            }
        }
        
        
    }
    for(i=4; i<8; i++)
    {
        mat[0][i][i]=1.0;
    }
    
    for(int l=0; l<100; l++)
    {
        int p = l%2;
        for(i=0; i<8; i++)
        {
            for(j=0; j<8; j++)
            {
                mat[1-p][i][j]=0.0;
            }
        }
        for(k=0; k<8; k++)
        {
            for(i=0; i<8; i++)
            {
                for(j=0; j<8; j++)
                {
                    mat[1-p][i][j]+=mat[p][i][k]*mat[p][k][j];
                }
            }
        }
    }
    
    for(i=0; i<4; i++)
    {
        for(j=0; j<4; j++)
        {
            pmat[curr][i][j] = mat[0][i][4+j];
        }
    }
    
}

void init(int curr, int lower, int upper)
{
    mn[curr]=lower;
    mx[curr]=upper;
    if(upper - lower > 1)
    {
        int mid = (upper+lower)/2;
        init(2*curr+1,lower,mid);
        init(2*curr+2,mid,upper);
        
        int i,j,k;
        
        for(i=0; i<4; i++)
        {
            for(j=0; j<4; j++)
            {
                pmat[curr][i][j]=0.0;
            }
        }
        
        for(k=0; k<4; k++)
        {
            for(i=0; i<4; i++)
            {
                for(j=0; j<4; j++)
                {
                    pmat[curr][i][j]+=pmat[2*curr+1][i][k]*pmat[2*curr+2][k][j];
                }
            }
        }
    }
    else{
        solve(curr);
    }
    
}

void update(int curr, int lower, int upper, int tgt)
{
    if(upper - lower > 1)
    {
        if(tgt<mx[2*curr+1])
        {
            update(2*curr+1,lower,mx[2*curr+1],tgt);
        }
        else{
            update(2*curr+2,mn[2*curr+2],upper,tgt);
        }
        int i,j,k;
        
        for(i=0; i<4; i++)
        {
            for(j=0; j<4; j++)
            {
                pmat[curr][i][j]=0.0;
            }
        }
        
        for(k=0; k<4; k++)
        {
            for(i=0; i<4; i++)
            {
                for(j=0; j<4; j++)
                {
                    pmat[curr][i][j]+=pmat[2*curr+1][i][k]*pmat[2*curr+2][k][j];
                }
            }
        }
    }
    else{
        solve(curr);
    }
}

double pv[4];

void runprob(int curr, int x, int y)
{
    if(mn[curr]==x && mx[curr]==y)
    {
        double q[4];
        int i,j,k;
        
        for(k=0; k<4; k++)
            q[k]=0.0;
        for(i=0; i<4; i++)
        {
            for(j=0; j<4; j++)
            {
                q[j]+=pv[i]*pmat[curr][i][j];
            }
        }
        for(k=0; k<4; k++)
            pv[k]=q[k];
        return;
    }
    
    if(x<mx[2*curr+1])
    {
        runprob(2*curr+1,x,min(y,mx[2*curr+1]));
    }
    if(y>mn[2*curr+2])
    {
        runprob(2*curr+2,max(x,mn[2*curr+2]),y);
    }
}


double rounde(double d)
{
    d*=1000000;
    double e = (double)round(d);
    return e/1000000+1e-10;
}

double calcprob(int xx, int y)
{
    //need to concatenate matrices first
    int i,j,k;
    
    for(k=0; k<4; k++)
        pv[k]=0.0;
    pv[xx%4]=1.0;
    
    
    if(xx/4<y/4)
        runprob(0,xx/4,y/4);
    
    int z = y-y%4;
    
    double ret = 0.0;
    double d;
    memset(mat,0,sizeof(mat));
    
    for(int l=0; l<4; l++)
    {
        if(l%4!=y%4)
            continue;
    
        for(i=0; i<4; i++)
        {
            d=0;
            for(j=0; j<8; j++)
            {
                d+=adj[z+i][j];
            }
            if(d==0.0 || i==l)
            {
                d=1.0;
                mat[0][i][i]=1.0;
            }
            else{
                for(j=0; j<8; j++)
                {
                    
                    mat[0][i][min(j,4)]+=((double)adj[z+i][j])/d;
                }
            }
            
            
        }
        for(i=4; i<5; i++)
        {
            mat[0][i][i]=1.0;
        }
        
//        for(i=0; i<5; i++)
//        {
//            for(j=0; j<5; j++)
//            {
//                cout << mat[0][i][j] << " ";
//            }
//            cout << endl;
//        }
//        cout << endl;
        
        for(int l=0; l<100; l++)
        {
            int p = l%2;
            for(i=0; i<5; i++)
            {
                for(j=0; j<5; j++)
                {
                    mat[1-p][i][j]=0.0;
                }
            }
            for(k=0; k<5; k++)
            {
                for(i=0; i<5; i++)
                {
                    for(j=0; j<5; j++)
                    {
                        mat[1-p][i][j]+=mat[p][i][k]*mat[p][k][j];
                    }
                }
            }
        }
//        
//        for(i=0; i<5; i++)
//        {
//            for(j=0; j<5; j++)
//            {
//                cout << mat[0][i][j] << " ";
//            }
//            cout << endl;
//        }
//        cout << endl << endl;

        
        for(i=0; i<4; i++)
        {
            ret+=pv[i]*mat[0][i][y%4];
        
//            cout << ret << " " << pv[i] << endl;
        }
        
    }
   // cout << ret << endl;
    return ret;
    
}



int main(void)
{
    int ttt;
    fin >> ttt;
    
    if(ttt>100000)
        ttt=100000;
    int ct = 0;
    
    cout.precision(6);
    fout.precision(6);
    
    cout << "HELLO" <<  " " << ttt << endl;
    
    
    
    while(ttt>0)
    {
        ct++;
        ttt--;
        //CUT HERE
        long long ans = 0;
        int p,d;
        
        fin >> n >> p >> d;
        
        while(n%4!=0)
            n++;
        
        m=n/4;
        
        memset(adj,0,sizeof(adj));
        memset(pmat,0,sizeof(pmat));
        
        
        int i,j,k;
        
        int a,b,r;
        
        for(i=0; i<p; i++)
        {
            fin >> a >> b >> r;
            adj[a][b-(a-a%4)]=r;
            
        }
        
        init(0,0,m-1);
        
        vector<double> ret;
        
        int e,x,y,z;
        
        for(i=0; i<d; i++)
        {
            fin >> e >> x >> y;
            
            if(e==1)
            {
                fin >> z;
                adj[x][y-(x-x%4)]=z;
                update(0,0,m-1,x/4);
            }
            else if(e==2)
            {
                adj[x][y-(x-x%4)]=0;
                update(0,0,m-1,x/4);

            }
            else{
                //e==3
                double d= calcprob(x, y);
//                cout << d << endl;
                ret.push_back(d);
            }
        }
        
        
        cout << "Case #" << ct << ":";
        fout << "Case #" << ct << ":";
        
        for(i=0; i<ret.size(); i++)
        {
        
            cout << " " << rounde(ret[i]);
            fout << " " << rounde(ret[i]);
        }
        
        
        
        
        fout << endl;
        cout << endl;
        
    }
    
    
    return 0;
}


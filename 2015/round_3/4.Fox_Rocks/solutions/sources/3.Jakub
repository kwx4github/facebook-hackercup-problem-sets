
#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

#define FI first
#define SE second
#define X first
#define Y second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back

typedef long long LL;
typedef vector<int> VI;
typedef long double LD;
typedef pair<int,int> PII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

double getTime() {
	timeval tv;
	gettimeofday(&tv, NULL);
	return tv.tv_sec + tv.tv_usec * 1e-6;
}

struct Matrix {
    double t[4][4];

    double *operator[](int x) {
        return t[x];
    }
    
    const double *operator[](int x) const {
        return t[x];
    }

    Matrix() {
        CLR(t, 0);
    }
};

Matrix operator * (Matrix a, Matrix b) {
    Matrix res;
    REP (k, 4) {
        REP (i, 4) {
            REP (j, 4) {
                res[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    return res;
}

void get_ending(double *res, Matrix pack, int v) {
    bool e[4][4];
    REP (i, 4) {
        REP (j, 4) {
            e[i][j] = pack[i][j] > 1e-9;
        }
        e[i][i] = true;
    }
    REP (k, 4) {
        REP (i, 4) {
            REP (j, 4) {
                e[i][j] |= e[i][k] & e[k][j];
            }
        }
    }
    static double t[4][5];
    CLR(t, 0);
    REP (i, 4) {
        if (!e[i][v]) {
            t[i][i] = 1.0;
            continue;
        }
        double stop = 1.0;
        t[i][i] = 1.0;
        REP (j, 4) {
            stop -= pack[i][j];
            t[i][j] -= pack[i][j];
        }
        if (i == v) {
            t[i][4] = stop;
            if (stop < 1e-9) {
                REP (c, 4) {
                    res[c] = 0.0;
                    return;
                }
            }
        }
    }
    REP (i, 4) {
        int ch = i;
        FOR (j, i, 4) {
            if (fabs(t[j][i]) > fabs(t[ch][i])) {
                ch = j;
            }
        }
        double c = t[ch][i];
        assert(fabs(c) > 1e-9);
        REP (j, 5) {
            t[ch][j] /= c;
        }
        REP (j, 5) {
            swap(t[i][j], t[ch][j]);
        }
        FOR (j, i + 1, 4) {
            double c2 = t[j][i] / t[i][i];
            REP (k, 5) {
                t[j][k] -= c2 * t[i][k];
            }
        }
    }
    for (int i = 3; i >= 0; --i) {
        REP (j, i) {
            double c = t[j][i] / t[i][i];
            REP (k, 5) {
                t[j][k] -= c * t[i][k];
            }
        }
    }
    REP (i, 4) {
        res[i] = t[i][4];
    }
}

Matrix get_ending_all(Matrix pack) {
    Matrix result;
    REP (i, 4) {
        double t[4];
        get_ending(t, pack, i);
        REP (j, 4) {
            result[j][i] = t[j];
        }
    }
    return result;
}

const int SZ = 50000;

Matrix e_internal[SZ];
Matrix e_next[SZ];
int e_out[SZ][4][8];

Matrix transition[SZ];

inline int ls(int x) { return x << 1; }
inline int rs(int x) { return (x << 1) + 1; }

void update(int x, int l, int r, int c, Matrix nx) {
    if (l == r) {
        transition[x] = nx;
        return;
    }
    int m = (l + r) / 2;
    if (c <= m) {
        update(ls(x), l, m, c, nx);
    } else {
        update(rs(x), m + 1, r, c, nx);
    }
    transition[x] = transition[ls(x)] * transition[rs(x)];
}

Matrix get(int x, int l, int r, int cl, int cr) {
    if (l == cl && r == cr) {
        return transition[x];
    }
    int m = (l + r) / 2;
    if (cl <= m && cr > m) {
        return get(ls(x), l, m, cl, min(cr, m)) * get(rs(x), m + 1, r, max(cl, m + 1), cr);
    } else if (cl <= m) {
        return get(ls(x), l, m, cl, min(cr, m));
    } else {
        return get(rs(x), m + 1, r, max(cl, m + 1), cr);
    }
}

int z;

void reconstruct(int p) {
    REP (i, 4) {
        int s = 0;
        REP (j, 8) {
            s += e_out[p][i][j];
        }
        REP (j, 4) {
            if (e_out[p][i][j] == 0) {
                e_internal[p][i][j] = 0.0;
            } else {
                e_internal[p][i][j] = e_out[p][i][j] / (double) s;
            }
        }
        s = 0;
        FOR (j, 4, 8) {
            s += e_out[p][i][j];
        }
        REP (j, 4) {
            if (e_out[p][i][4 + j] == 0) {
                e_next[p][i][j] = 0.0;
            } else {
                e_next[p][i][j] = e_out[p][i][4 + j] / (double) s;
            }
        }
    }
    update(1, 1, z, 1 + p, get_ending_all(e_internal[p]) * e_next[p]);
}

void change_edge(int x, int y, int r) {
    int p = x / 4;
    e_out[p][x - 4 * p][y - 4 * p] = r;
    reconstruct(p);
}

double answer_query(int x, int y) {
    int l = x / 4;
    int r = y / 4;
    if (r < l) {
        return 0.0;
    }
    static double start[4];
    CLR(start, 0);
    x %= 4;
    y %= 4;
    start[x] = 1.0;
    if (l < r) {
        Matrix m = get(1, 1, z, 1 + l, 1 + r - 1);
        REP (i, 4) {
            start[i] = m[x][i];
        }
    }
    Matrix c = e_internal[r];
    REP (i, 4) {
        c[y][i] = 0.0;
    }
    static double res[4];
    get_ending(res, c, y);
    double ans = 0.0;
    REP (i, 4) {
        ans += start[i] * res[i];
    }
    return ans;
}

void alg() {
    int n, n_edges, n_queries;
    cin >> n >> n_edges >> n_queries;
    z = 1;
    int n_packs = n / 4 + 1;
    while (z < n_packs) {
        z *= 2;
    }
    FOR (i, 1, z + z) {
        transition[i] = Matrix();
    }
    REP (i, n_packs) {
        CLR(e_out[i], 0);
    }
    REP (i, n_edges) {
        int a, b, r;
        cin >> a >> b >> r;
        int p = a / 4;
        e_out[p][a - 4 * p][b - 4 * p] = r;
    }
    REP (i, n_packs) {
        reconstruct(i);
    }
    REP (i, n_queries) {
        int e, x, y, z;
        cin >> e >> x >> y;
        if (e == 1) {
            cin >> z;
        }
        if (e == 2) {
            z = 0;
        }
        if (e < 3) {
            change_edge(x, y, z);
        } else {
            cout << " " << fixed << setprecision(6) << answer_query(x, y);
        }
    }
}

int main() {
    int d;
    cin >> d;
    FOR (i, 1, d + 1) {
        cout << "Case #" << i << ":";
        alg();
        cout << endl;
    }
}

#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second

const double pi = acos(-1.0);
const int size = 100 * 1000;
const int ssize = 4;
const int rms = (1 << 18) - 1;
const int hrms = rms / 2;
const int iters = 40;
const int iters2 = 1000;
const double eps = 1e-6;

double ptv[size][ssize][ssize];
double ptl[size][ssize][ssize];
int w[size][ssize][ssize];
int wnx[size][ssize][ssize];

double ptg[ssize][ssize];
double ptgnx[ssize][ssize];
double pts[ssize];

int n, p, d;
int tc;
int blocks;

double tomult[2 * ssize][2 * ssize];
double tomulth[2 * ssize][2 * ssize];

void recalcblock(int num) {
	for (int i = 0; i < ssize; i++) {
		int sum = 0;
		int sumout = 0;
		for (int j = 0; j < ssize; j++)
			sum += w[num][i][j];
		for (int j = 0; j < ssize; j++)
			sumout += wnx[num][i][j];
		sum += sumout;

		if (sum == 0)
			pts[i] = 0.0;
		else
			pts[i] = (sum - sumout + 0.0) / sum;
		for (int j = 0; j < ssize; j++) {
			if (sum == 0) {
				ptg[i][j] = 0.0;
				ptgnx[i][j] = 0.0;
			} else {
				ptg[i][j] = (w[num][i][j] + 0.0) / sum;
				ptgnx[i][j] = (wnx[num][i][j] + 0.0) / sum;
			}
		}
	}
		for (int j = 0; j < 2 * ssize; j++)
			for (int k = 0; k < 2 * ssize; k++)
				tomult[j][k] = 0.0;
		for (int j = ssize; j < 2 * ssize; j++)
			tomult[j][j] = 1.0;
		for (int j = 0; j < ssize; j++)
			for (int k = 0; k < ssize; k++)
				tomult[j][k] = ptg[j][k];
		for (int j = 0; j < ssize; j++)
			for (int k = 0; k < ssize; k++)
				tomult[j][ssize + k] = ptgnx[j][k];
		for (int it = 0; it < iters; it++) {
			for (int j = 0; j < 2 * ssize; j++)
				for (int k = 0; k < 2 * ssize; k++)
					tomulth[j][k] = 0.0;
			for (int j = 0; j < 2 * ssize; j++)
				for (int k = 0; k < 2 * ssize; k++)
					for (int p = 0; p < 2 * ssize; p++)
						tomulth[j][k] += tomult[j][p] * tomult[p][k];
			for (int j = 0; j < 2 * ssize; j++)
				for (int k = 0; k < 2 * ssize; k++)
					tomult[j][k] = tomulth[j][k];
            
		}
		for (int j = 0; j < ssize; j++)
			for (int k = 0; k < ssize; k++)
				ptl[num][j][k] = tomult[j][ssize + k]; 

	for (int j = 0; j < ssize; j++)
		for (int k = 0; k < ssize; k++)
			ptv[num][j][k] = 0.0;
	for (int j = 0; j < ssize; j++)
		ptv[num][j][j] = 1.0;
	for (int it2 = 0; it2 < iters2; it2++) {
		for (int j = 0; j < ssize; j++)
			for (int k = 0; k < ssize; k++) {
				if (j == k) {
					ptv[num][j][k] = 1.0;
					continue;
				}
				ptv[num][j][k] = 0.0;
				for (int p = 0; p < ssize; p++)
					ptv[num][j][k] += ptv[num][p][k] * ptg[j][p];
			}
	}	
}

void addedge(int v, int u, int c) {
	int b1 = v / 4;
	int b2 = u / 4;
	int n1 = v % 4;
	int n2 = u % 4;
	if (b1 == b2) {
		w[b1][n1][n2] = c;
	} else {
		wnx[b1][n1][n2] = c;
	}

	recalcblock(b1);
}

void deleteedge(int v, int u) {
	addedge(v, u, 0);
}

double h[ssize];
double hh[ssize];

double getans(int v, int u) {
	int b1 = v / 4;
	int b2 = u / 4;
	int n1 = v % 4;
	int n2 = u % 4;

	if (b2 < b1)
		return 0.0;

	for (int i = 0; i < ssize; i++)
		h[i] = 0.0;
	h[n1] = 1.0;
	while (b1 < b2) {
		for (int i = 0; i < ssize; i++)
			hh[i] = 0.0;
		for (int j = 0; j < ssize; j++)
			for (int k = 0; k < ssize; k++)
				hh[k] += h[j] * ptl[b1][j][k];
		for (int i = 0; i < ssize; i++) {
			h[i] = hh[i];
		} 
		b1++;
	}

	double ans = 0.0;
	for (int i = 0; i < ssize; i++)
		ans += h[i] * ptv[b1][i][n2];

	return ans;
}

int main() {
    /*
	freopen("input.txt", "w", stdout);
	int tc = 1;
	int n = 50 * 1000;
	int p = 100 * 1000;
	int d = 20 * 1000;
	printf("%d\n", tc);
	for (int tnum = 0; tnum < tc; tnum++) {
		printf("%d %d %d\n", n, p, d);
		for (int i = 0; i < n - 1; i++)
			printf("%d %d %d\n", i, i + 1, rand() % 5 + 1);
		for (int i = 0; i < p - n + 1; i++) {
		    int tg = rand() % n;
			printf("%d %d %d\n", tg, min(n - 1, tg + rand() % 4 + 1), rand() % 5 + 1);
		} 
		for (int i = 0; i < d / 2; i++)
			printf("1 0 1 3\n");
		for (int i = d / 2; i < d; i++)
			printf("3 0 %d\n", n - 1);	
	}

	return 0;
	*/

    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &tc);
    for (int tnum = 0; tnum < tc; tnum++) {
        double start = clock();
    	
    	printf("Case #%d:", tnum + 1);
    	scanf("%d%d%d", &n, &p, &d);
    	blocks = (n + 3) / 4;
    	for (int i = 0; i < blocks; i++)
    		for (int j = 0; j < ssize; j++)
    			for (int k = 0; k < ssize; k++) {
    				ptv[i][j][k] = 0.0;
    				ptl[i][j][k] = 0.0;
    				w[i][j][k] = 0;
    				wnx[i][j][k] = 0;
    			}
    	for (int i = 0; i < p; i++) {
    		int v, u, c;
    		scanf("%d%d%d", &v, &u, &c);

    		addedge(v, u, c);
    	}
    	for (int i = 0; i < blocks; i++)
    		recalcblock(i);
    	for (int i = 0; i < d; i++) {
    		int e, x, y, z;
    		scanf("%d%d%d", &e, &x, &y);
    		if (e == 1) {
    			scanf("%d", &z);
    			addedge(x, y, z);
    		}
    		if (e == 2) {
    			deleteedge(x, y);
    		}
    		if (e == 3) {
    			double val = getans(x, y);
    			assert(val > -eps && val < 1.0 + eps);
    			printf(" %.6lf", val);
    		}
    	}

    	printf("\n");

    	cerr << tnum + 1 << ' ' << (clock() - start) / CLOCKS_PER_SEC << endl;
    }


    return 0;
}
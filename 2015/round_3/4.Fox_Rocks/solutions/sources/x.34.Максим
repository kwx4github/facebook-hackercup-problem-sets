#pragma comment(linker, "/STACK:200000000")
#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>
using namespace std;

typedef long long int64;
typedef double old_double;
#define double long double
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const double EPS = 1E-9;
const double EPS_ANG = 1E-16;
const double PI = acos((double)0) * 2;

#define forn(i, n)  for (int i = 0; i < int(n); ++i)
#define ford(i, n)  for (int i=int(n) - 1; i >= 0; --i)
#define fore(i, l, r)  for (int i = int(l); i < int(r); ++i)
#define all(a)  a.begin(), a.end()
#define fs  first
#define sc  second
#define mp  make_pair
#define pb  push_back


const int MAXN = 51 * 1000;


int n, m, qs;
vector<pair<int, int> > g[MAXN];
int qt[MAXN], qx[MAXN], qy[MAXN], qz[MAXN];


void read() {
	cin >> n >> m >> qs;
	forn(i, n + 10)
		g[i].clear();
	forn(i, m) {
		int x, y, w;
		scanf("%d%d%d", &x, &y, &w);
		g[x].push_back(mp(y, w));
	}
	forn(i, qs) {
		scanf("%d%d%d", &qt[i], &qx[i], &qy[i]);
		if (qt[i] == 1)
			scanf("%d", &qz[i]);
	}
}

void gen() {
	n = 50000;
	forn(i, n) {
		if (i != i/4*4)
			g[i].push_back(mp(i/4*4, 1));
		else if (i/4*4 + 1 < n)
			g[i].push_back(mp(i/4*4 + 1, 1));
		if (i + 4 < n)
			g[i].push_back(mp(i + 4, 1));
	}
	qs = 20000;
	forn(i, qs) {
		qt[i] = 3;
		qx[i] = 0;
		qy[i] = n - 1;
	}
}


double d[MAXN];
double matr[4][5], linear_result[4];

void solve_linear() {
	forn(i, 4) {
		int sel = i;
		for (int j=i; j<4; ++j)
			if (abs(matr[j][i]) > abs(matr[sel][i]))
				sel = j;
		for (int j=i; j<=4; ++j)
			swap(matr[sel][j], matr[i][j]);
		if (abs(matr[i][i]) < EPS)
			continue;
		forn(j, 4)
			if (j != i) {
				double c = matr[j][i] / matr[i][i];
				for (int k=i; k<=4; ++k)
					matr[j][k] -= matr[i][k] * c;
			}
	}
	forn(i,4)
		if (abs(matr[i][i]) > EPS)
			linear_result[i] = matr[i][4] / matr[i][i];
		else
			linear_result[i] = 0;
}

void calc_d(int target) {
	ford(four, (n + 3) / 4) {
		int v0 = four * 4;

		memset(matr, 0, sizeof matr);
		forn(i, 4) {
			int v = v0 + i;
			matr[i][i] = 1.0;
			
			if (v == target) {
				matr[i][4] = 1.0;
				continue;
			}

			int wsum = 0;
			forn(j, g[v].size())
				wsum += g[v][j].sc;

			forn(j, g[v].size()) {
				int to = g[v][j].fs;
				double prob = g[v][j].sc * 1.0 / wsum;
				if (v0 <= to && to < v0 + 4) {
					matr[i][to - v0] = -prob;
				} else {
					matr[i][4] += prob * d[to];
				}
			}
		}

		solve_linear();
		forn(i, 4)
			d[v0 + i] = min((double)1.0, max((double)0.0, linear_result[i]));
	}
}

void solve() {
	forn(i, qs) {
		if (qt[i] == 1) {
			g[qx[i]].push_back(mp(qy[i], qz[i]));
		} else if (qt[i] == 2) {
			forn(j, g[qx[i]].size())
				if (g[qx[i]][j].fs == qy[i]) {
					g[qx[i]].erase(g[qx[i]].begin() + j);
					break;
				}
		} else if (qt[i] == 3) {
			calc_d(qy[i]);
			printf(" %.6lf", old_double(d[qx[i]]));
		} else {
			throw;
		}
	}
	puts("");
}


int main(int argc, char *argv[]) {
#ifdef SU2_PROJ
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif

#if 0
	gen();
	time_t start_time = clock();
	solve();
	cerr << "Stress done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
#endif

	int test_to_execute = (argc == 2) ? atoi(argv[1]) : -1;

	int tests;
	cin >> tests;
	
	if (test_to_execute != -1 && !(1 <= test_to_execute && test_to_execute <= tests)) {
		cerr << "Requested test doesn't exist!" << endl;
		throw std::runtime_error("Requested test doesn't exist!");
	}

	for (int test = 1; test <= tests; ++test) {
		time_t start_time = clock();
		read();
		if (!cin)
			throw;
		if (test_to_execute != -1 && test != test_to_execute)
			continue;
		printf("Case #%d:", test);
		solve();
		cerr << "Test #" << test << " done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
	}
}

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 10100;
const int64 mod = 1e9 + 7;

int n;
int a[nmax];
int64 pwr[nmax];
int res[nmax], sum[nmax];

int solve() {
	cin >> n;
	for (int i = 1; i < n; i ++)
		cin >> a[i];
	int64 ans = 1;
	pwr[0] = 1;
	for (int i = 1; i < nmax; i ++)
		pwr[i] = (pwr[i-1] * 2) % mod;
	for (int i = 1; i < n; i ++) {
		memset(res, 255, sizeof res);
		res[a[i]] = a[i];
		for (int j = a[i]; j < i; j ++) {
			int now = a[j];
			if (now < a[i] || res[now] == -1) 
				continue;
			if (now == a[i])
				res[j] = j;
			else
				res[j] = res[now];
		}
		memset(sum, 0, sizeof sum);
		vector<pii> now;
		int cnt = 0;
		for (int j = a[i]; j < i; j ++)
			if (res[j] != -1) {
				sum[res[j]] ++;
				cnt ++;
			}
		int64 cur = pwr[cnt];
		forn(j, n)
			if (sum[j] > 0)
			{
				cur = (cur + mod * 2 - (pwr[sum[j]] - 1)) % mod;
			}
		ans = (ans * cur) % mod;
	}
	cout << ans << endl;
	return 0;
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);
	
	int tst;
	cin >> tst;
	forn (i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
	}

	return 0;
}

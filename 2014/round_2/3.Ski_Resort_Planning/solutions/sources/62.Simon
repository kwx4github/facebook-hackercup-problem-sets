#include <iostream>
#include <vector>
using namespace std;

int MOD = 1000000007;
int pow2(int n) {
	int r = 1;
	for (int i = 0; i < n; ++i) {
		r *= 2;
		r %= MOD;
	}
	return r;
}

int solve() {
	int N;
	cin >> N;
	vector<int> up(N, -1);
	vector<int> desc(N);
	for (int i = 0; i < N-1; ++i) {
		cin >> up[i+1];
	}
	long long res = 1;
	for (int i = 1; i < N; ++i) {
		long long ways = 0;
		int to = up[i];
		ways += pow2(desc[to]); // path directly to 'to'
		ways += pow2(desc[to]); // paths to descendants of 'to'
		ways--;
		for (int j = 0; j < i; ++j) {
			if (up[j] == to) {
				int sz = desc[j] + 1;
				ways -= pow2(sz) - 1; // paths only within this component
			}
		}
		ways %= MOD;
		res *= ways;
		res %= MOD;
// cout << ways << endl;
		int j = to;
		while (j != -1) {
			desc[j]++;
			j = up[j];
		}
	}
	if (res < 0) res += MOD;
	return (int)res;
}

int main() {
	cin.sync_with_stdio(false);
	int T;
	cin >> T;
	for (int i = 0; i < T; ++i)
		cout << "Case #" << (i+1) << ": " << solve() << endl;
	return 0;
}

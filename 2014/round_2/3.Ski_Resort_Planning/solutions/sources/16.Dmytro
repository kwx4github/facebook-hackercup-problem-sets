#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <bitset>
#include <queue>
#include <stack>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

const int maxN = 6000;
const long long P = 1000000007LL;
int n, a[maxN];
int parent[maxN][maxN];
long long d[maxN][maxN];

void precalc() {
	memset(parent, -1, sizeof(parent));
	for (int i = 0; i < n; ++i) {
		parent[0][i] = parent[i][0] = 0;
		parent[i][i] = i;
	}

	for (int i = 1; i < n; ++i) {
		for (int j = 1; j < i; ++j) {
			int k = a[i];
			if (k == j) {
				parent[i][j] = parent[j][i] = j;
				continue;
			}

			parent[i][j] = parent[j][i] = parent[j][k];
		}
	}

	memset(d, 0, sizeof(d));
	for (int i = 0; i < n; ++i) {
		d[i][i] = 1LL;
	}

	for (int i = 0; i + 1 < n; ++i) {
		for (int j = 0; j <= i; ++j) {
			if (d[i][j] == 0LL) {
				continue;
			}
			d[i + 1][parent[j][i + 1]] += d[i][j];
			if (d[i + 1][parent[j][i + 1]] >= P) {
				d[i + 1][parent[j][i + 1]] -= P;
			}
			d[i + 1][j] += d[i][j];
			if (d[i + 1][j] >= P) {
				d[i + 1][j] -= P;
			}
		}
	}
}

void solve(int test) {
	cin >> n;
	for (int i = 1; i < n; ++i) {
		cin >> a[i];
	}
	precalc();

	long long res = 1LL;
	for (int i = 1; i < n; ++i) {
		res *= d[i - 1][a[i]];
		res %= P;
	}

	cout << "Case #" << test << ": " << res << endl;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int tests;
	scanf("%d", &tests);
	for (int i = 0; i < tests; ++i) {
		solve(i + 1);
		cerr << (i + 1) << endl;
		cerr << "Time: " << clock() << endl;
	}
	return 0;
}
/* Written by Filip Hlasek 2013 */
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstring>

#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define REP(i,b) for(int i=0;i<(b);i++)

using namespace std;

#define MAXN 5555
#define MOD 1000000007
int A[MAXN], N;
vector<int> tree[MAXN];

int dfs(int v, int maxh) {
  if (v >= maxh) return 0;
  int ans = 1;
  REP(i, tree[v].size()) ans += dfs(tree[v][i], maxh);
  return ans;
}

int solve(int v) {
  int ans1 = 1, ans2 = 1;

  REP(i, tree[A[v]].size()) if (tree[A[v]][i] != v) {
    int sz = dfs(tree[A[v]][i], v), tmp = 1;
    REP(j, sz) tmp = (2 * tmp) % MOD;
    ans1 = ((long long)ans1 * tmp) %MOD;
    ans2 = (ans2 + tmp - 1) % MOD;
  }

  return (((long long)ans1 * 2 - ans2) % MOD + MOD) % MOD;
}

int main(int argc, char *argv[]) {
  int T;
  scanf("%d", &T);
  REP(t, T) {
    int ans = 1;

    scanf("%d", &N);
    REP(i, N) tree[i].clear();
    REP(i, N - 1) {
      scanf("%d", A + i + 1);
      tree[A[i+1]].push_back(i + 1);
    }

    FOR(i, 1, N - 1) ans = ((long long)ans * solve(i)) % MOD;

    printf("Case #%d: %d\n", t + 1, ans);
  }
  return 0;
}

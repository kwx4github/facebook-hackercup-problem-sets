#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
#include <iostream>
#include <string>
#include <cstring>

using namespace std;

#define MOD 1000000007

unsigned long long T[5000];
unsigned long long A[5000];
unsigned long long children[5000];

unsigned long long modpow2(unsigned long long x) {
  if (x == 1)
    return 2;
  if (x == 0)
    return 1;
  unsigned long long tmp = modpow2(x>>1);
  unsigned long long ret = (tmp*tmp) % MOD;
  if (x&1)
    ret = (ret<<1) % MOD;
  return ret;
}

int main() {
  int _T;
  cin >> _T;

  for (int t = 1; t <= _T; t++) {
    int N;
    cin >> N;

    for (int i = 1; i < N; i++) {
      cin >> A[i];
    }

    T[0] = 1;
    for (int i = 1; i < N; i++) {
      unsigned long long count = 0;
      for (int j = i-1; j >= int(A[i]); j--) {
        children[j] = 0;
      }

      for (int j = i-1; j > A[i]; j--) {
        children[A[j]]++;
        int k;
        for (k = A[j]; k > A[i]; k = A[k]) {
        }
        if (k == A[i])
          count++;
      }
      cout << "count " << count << endl;
      T[i] = (modpow2(count)) % MOD;
      T[i] = (T[i] + ((modpow2(count)-1))%MOD) % MOD;
      cout << "Ti before sub " << T[i] << endl;
      for (int j = i-1; j > int(A[i]); j--) {
        if (children[j] > 0) {
          cout << "j " << j << " children " << children[j] << endl;
          T[i] = (T[i] + MOD - (modpow2(children[j])-1)) % MOD;
        }
      }
      T[i] = (T[i] + MOD - children[A[i]]) % MOD;
      T[i] = (T[i-1]*T[i]) % MOD;
      cout << i << " : " << T[i] << endl;
    }

    printf("Case #%d: %llu", t, T[N-1]);
    printf("\n");
  }

  return 0;
}

// 34 - 3 - 9 = 21
// 21 / 9 = 2
// 21 - 21/9*9 = 3


// l + l^2 + l^3 + ... l^k < N
// l ((p^(k-1) - 1) / (p-1))

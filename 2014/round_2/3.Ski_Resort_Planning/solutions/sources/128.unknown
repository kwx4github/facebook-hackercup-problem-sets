#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

#define sz(v) int(v.size())
typedef long long ll;

const ll MOD = 1000*1000*1000+7;
const int MAXn = 5000+10;
vector<int> child[MAXn];
int par[MAXn];
ll pow[MAXn];
int n;

int dfs(int v, int mx) {
	if(v >= mx) return 0;
	int res = 0;
	for(int i = 0; i < (int)child[v].size(); i++)
		res += dfs(child[v][i], mx);
	return res+1;
}
int main() {
	ios::sync_with_stdio(false);
	pow[0] = 1;
	for(int i = 1; i < MAXn; i++)
		pow[i] = (pow[i-1]*2) % MOD;
	int T;
	cin >> T;
	for(int t = 1; t <= T; t++) {
		cin >> n;
		for(int i = 0; i < n; i++)
			child[i].clear();
		for(int i = 1; i < n; i++) {
			cin >> par[i];
			child[par[i]].push_back(i);
		}
		ll ans = 1;
		for(int i = 1; i < n; i++) {
			int p = par[i];
			ll cur = 0;
			int s = 0;
			for(int j = 0; j < (int)child[p].size(); j++) {
				int c = child[p][j];
				if(c >= i) continue;
				int res = dfs(c, i);
				s += res;
				cur = (cur-pow[res]+1+MOD)%MOD;
			}
			if(s > 0) {
				cur = (cur + pow[s]-1 + MOD) % MOD;
				cur = (cur + pow[s]) % MOD;
	//			cerr << "@" << i << ":" << cur << endl;
				ans = (ans * cur) % MOD;
			}
		}
		cout << "Case #" << t << ": " << (ans % MOD + MOD) % MOD << endl;
	}
	return 0;
}

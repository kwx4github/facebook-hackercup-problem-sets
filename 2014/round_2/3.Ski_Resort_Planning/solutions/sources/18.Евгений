import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class C {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static final int MOD = 1000000007;
	
	static void solve() throws Exception {
		int n = nextInt();
		int a[] = new int[n];
		int size[] = new int[n];
		int p2[] = new int[n];
		List<Integer> children[] = new List[n];
		a[0] = -1;
		size[0] = 1;
		p2[0] = 1;
		children[0] = new ArrayList<>();
		for (int i = 1; i < n; i++) {
			a[i] = nextInt();
			children[i] = new ArrayList<>();
			p2[i] = (2 * p2[i - 1]) % MOD;
		}
		int ans = 1;
		for (int i = 1; i < n; i++) {
			int cur = a[i];
			int cans = (p2[size[cur]] - 1) % MOD;
			for (int ch: children[cur]) {
				cans = (cans - p2[size[ch]] + 1) % MOD;
			}
			ans = (int) (((long) ans * cans) % MOD);
			for (cur = i; cur >= 0; cur = a[cur]) {
				++size[cur];
			}
			children[a[i]].add(i);
		}
		ans = (ans + MOD) % MOD;
		printCase();
		out.println(ans);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
#include <cstdio>
#include <vector>

using namespace std;

#define MOD 1000000007

typedef long long int64;

int Add(int a, int b) {
  int ret = a + b;
  if (ret >= MOD) ret -= MOD;
  return ret;
}

int Mult(int a, int b) {
  return (int64) a * b % MOD;
}

int fast_pow(int a, int n) {
  if (n == 0) return 1;
  if (n & 1) return Mult(a, fast_pow(a, n - 1));
  int x = fast_pow(a, n >> 1);
  return Mult(x, x);
}

vector<int> children[5000];
int size[5000];

void update(int root) {
  size[root] = 1;
  for (int i = 0; i < (int)children[root].size(); ++i) {
    int x = children[root][i];
    update(x);
    size[root] += size[x];
  }
}

int solve(int root) {
  update(root);
  int ret = fast_pow(2, size[root] - 1);
  
  int dp_0 = 1;
  int dp_1 = 0;
  int dp_2 = 0;
  for (int i = 0; i < (int)children[root].size(); ++i) {
    int x = children[root][i];
    int pick = fast_pow(2, size[x]) - 1;
    dp_2 = Add(dp_2, Mult(dp_2, pick));
    dp_2 = Add(dp_2, Mult(dp_1, pick));
    dp_1 = Add(dp_1, Mult(dp_0, pick));
  }
  return Add(ret, dp_2);
}

int main() {
  int T;
  scanf("%d", &T);
  for (int tt = 1; tt <= T; ++tt) {
    int N;
    scanf("%d", &N);

    int ret = 1;
    for (int i = 1; i < N; ++i) {
      int x;
      scanf("%d", &x);
      ret = Mult(ret, solve(x));
      children[x].push_back(i);
    }
    ret %= MOD;
    if (ret < 0) ret += MOD;
    printf("Case #%d: %d\n", tt, ret);
    fprintf(stderr, "Case #%d: %d\n", tt, ret);

    for (int i = 0; i < N; ++i) children[i].clear();
  }
  return 0;
}

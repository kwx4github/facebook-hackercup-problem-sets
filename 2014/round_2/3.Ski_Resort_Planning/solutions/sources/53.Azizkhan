#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
#include <numeric>
using namespace std;

#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define forit(it,S) for(__typeof(S.begin()) it = S.begin(); it != S.end(); ++it)
#ifdef WIN32
#define I64d "%I64d"
#else
#define I64d "%lld"
#endif

typedef pair <int, int> pi;
typedef vector <int> vi;
typedef long long ll;

const int mod = int(1e9 + 7);
int n;
int cnt[11111], pow2[11111], p[11111];
vector <int> e[11111];

int main() {
    int tests;
    scanf("%d", &tests);
    for (int casenum = 1; casenum <= tests; ++casenum) {
        scanf("%d", &n);
        for (int i = 0; i < n; ++i) {
            e[i].clear();
            cnt[i] = 0;
        }
        p[0] = -1;
        for (int i = 1; i < n; ++i) {
            scanf("%d", &p[i]);
            e[p[i]].pb(i);
        }
        
        pow2[0] = 1;
        for (int i = 1; i <= n; ++i) {
            pow2[i] = pow2[i - 1] + pow2[i - 1];
            if (pow2[i] >= mod) {
                pow2[i] -= mod;
            }
        }
        
        int res = 1;
        
        cnt[0] = 1;
        for (int u = 1; u < n; ++u) {
            int v = u;
            while (v != -1) {
                ++cnt[v];
                v = p[v];
            }
            int parent = p[u];
            int cur = pow2[cnt[parent] - 2];
            
            if (cnt[parent] > 2) {
                cur += pow2[cnt[parent] - 2] - 1;
                if (cur < 0) cur += mod;
                if (cur >= mod) cur -= mod;
                
                forit (it, e[parent]) {
                    int v = *it;
                    if (v != u) {
                        int t = pow2[cnt[v]] - 1;
                        if (t < 0) t += mod;
                        if (t >= mod) t -= mod;
                        cur -= t;
                        if (cur < 0) cur += mod;
                    }
                }
            }
            
            res = (1LL * res * cur) % mod;
        }
        printf("Case #%d: ", casenum);
        
        cout << res << endl;
    }
    return 0;
}
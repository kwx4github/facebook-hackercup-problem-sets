import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class Ski {

	private Scanner sc;
	private BufferedWriter out;
	private long MOD = 1000000007;
	private long[] pow2 = new long[5002];
	
	public static void main(String[] args) throws IOException {
		new Ski().solve();
		//System.out.println(new Ski().solveCase(4, new int[] {-1, 0, 0, 1}));
	}
	
	private String solveCase() {
		int n = sc.nextInt();
		int[] par = new int[n];
		par[0] = -1;
		for (int i = 1; i < n; i++) par[i] = sc.nextInt();
		return solveCase(n, par);
	}
	
	private String solveCase(int n, int[] par) {
		pow2[0] = 1;
		for (int i = 1; i < pow2.length; i++) {
			pow2[i] = (2 *pow2[i-1]) % MOD;
		}
		
		long rez = 1; // ???
		for (int i = 1; i < n; i++) {
			// System.out.println("i" + i);
			int parr = par[i];
			long countSamePar = 0;
			for (int j = 1; j < i; j++) {
				//System.out.println("j" + j);
				boolean found = false;
				int jj = j;
				while (jj != -1) {
					if (jj == parr && j != parr) {
						found = true;
						break;
					}
					//System.out.println("jj" + jj + " par " + par + " " + par[0]);
					jj = par[jj];
				}
				if (found) {
					countSamePar++;
				}
			}
			if (countSamePar >= 1) {
				// Go directly + whatever from the others.
				long countStep = pow2[(int)countSamePar];
				if (countSamePar >= 2) {
					// Or chose >= 2 paths.
					countStep = (countStep + pow2[(int)countSamePar] - 1 - countSamePar + MOD) % MOD;
				}
				rez = (rez * countStep) % MOD;
			} else {
				// 1. Only one, should not pass directly.
				// 2. None - only one way.
			}
		}
		return String.valueOf(rez);
	}
	
	private void solve() throws IOException {
		sc = new Scanner(new File("ski_resort_planning.in"));
		out = new BufferedWriter(new FileWriter("ski_resort_planning.out"));
		int nrt = sc.nextInt();
		for (int i = 0; i < nrt; i++) {
			System.out.println("test " + i);
			out.write("Case #" + (i + 1) + ": " + solveCase());
			out.newLine();
		}
		out.close();
	}
}

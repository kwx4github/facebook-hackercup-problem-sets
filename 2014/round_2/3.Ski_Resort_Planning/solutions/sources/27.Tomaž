#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <math.h>
#include <queue>
#include <list>
#include <algorithm>
#include <map>
#include <set>
#include <stack>
using namespace std;

#define ALL(c) (c).begin(),(c).end()
#define PRESENT(c,x) (find(c.begin(),c.end(),x) != (c).end())
#define REP(i,n) for (int i=0;i<(n);i++)
#define FOR(i,a,b) for (int i=(a);i<=(b);i++)
#define INIT(a,v) memset(a,v,sizeof(a))
#define UNIQUE(c) (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))
template<class A, class B> A cvt(B x) { stringstream ss; ss<<x; A y; ss>>y; return y; }

typedef long long int64;
typedef pair<int,int> PII;

#define MOD 1000000007

int n;
int p[5005];
vector<int> ch[5005];
int s[5005];

int64 p2[5005];

int main() {
	freopen("ski_resort.txt","r",stdin);
	freopen("ski_resort.out","wb",stdout);
	p2[0]=1;
	FOR (i,1,5000) p2[i]=(p2[i-1]*2)%MOD;
	int T;
	scanf("%d",&T);
	FOR (t,1,T) {
		fprintf(stderr,"%d/%d\n",t,T);
		scanf("%d",&n);
		p[0]=-1;
		FOR (i,1,n-1) scanf("%d",&p[i]);
		FOR (i,0,n) ch[i].clear();
		INIT(s,0);
		s[0]=1;
		int64 r=1;
		FOR (i,1,n-1) {
			int pi=p[i];
			int64 f=p2[s[pi]];
			f--; // no connections
			for (int c : ch[pi]) { // connections within a single child
				f-=p2[s[c]]-1;
			}
			f=(f%MOD+MOD)%MOD;
			r=(r*f)%MOD;
			int x=i;
			while (x!=-1) {
				s[x]++;
				x=p[x];
			}
			ch[p[i]].push_back(i);
		}
		printf("Case #%d: %I64d\n",t,r);
	}
	return 0;
}

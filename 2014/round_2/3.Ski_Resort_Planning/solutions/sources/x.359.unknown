
import java.io.InputStream;
import java.io.PrintStream;
import java.util.Scanner;

/**
 * @author Abhimanyu Singh
 *
 */
public class Ski {

    private InputStream input;
    private PrintStream output;
    private Scanner inputSc;
    static final int MOD = 1000000007;

    static int mod(int a) {
        return a % MOD;
    }

    static int mul(int a, int b) {
        long a1 = a % MOD;
        long b1 = b % MOD;
        return (int) ((a1 * b1) % MOD);
    }

    static int add(int a, int b) {
        long a1 = a % MOD;
        long b1 = b % MOD;
        return (int) ((a1 + b1) % MOD);
    }

    static int inv(int a) {
        a = a % MOD;
        // fermat theorem   a^(p-1) = 1 MOD
        // a* a^(p-2) = 1 => a^-1 = a^(p-2)
        return fastPowerMod(a, MOD - 2);
    }

    static int div(int x, int y) {
        // "x/y"
        return mul(x, inv(y));
    }

    static int fastPowerMod(int base, int exponent) {
        int ans = 1;
        while (exponent > 0) {
            if ((exponent & 1) != 0) {
                ans = mul(ans, base);
            }
            exponent = exponent >> 1;
            base = mul(base, base);
        }
        return ans;
    }

    static int[] nCrAllMod(int n) {
        int c[] = new int[n + 1];
        //nCr = nCr-1 *(n-r+1/r) r>0
        //nC0=1
        c[0] = 1;
        for (int r = 1; r <= n; r++) {
            c[r] = div(mul(c[r - 1], (n - r + 1)), r);
        }
        return c;
    }

    public Ski(InputStream input, PrintStream output) {
        this.input = input;
        this.output = output;
        init();
    }

    private void init() {
        inputSc = new Scanner(input);
    }

    static int lineToInt(String line) {
        return Integer.parseInt(line);
    }

    public void solve() {
        int testCaseCount = lineToInt(inputSc.nextLine());
        for (int testN = 1; testN <= testCaseCount; testN++) {
            solveTestCase(testN);
        }
    }

    private void solveTestCase(int testN) {
        Scanner tempSc = new Scanner(inputSc.nextLine());
        int N = tempSc.nextInt();
        tempSc = new Scanner(inputSc.nextLine());
        int last[] = new int[N];
        last[0] = 0;
        for (int i = 1; i < N; i++) {
            last[i] = tempSc.nextInt();
        }
        int ans = 1;
        int count[] = new int[N];
        for (int i = 1; i < N; i++) {
            boolean who[] = new boolean[N];
            for (int j = 0; j < i; j++) {
                if (last[j] == last[i]) {
                    who[j] = true;
                } else if (last[j] > last[i]) {
                    who[j] = who[last[j]];
                } else {
                    who[j] = false;
                }
            }
            for (int j = 0; j < i; j++) {
                if (who[j] && j != last[i]) {
                    count[i]++;
                }
            }
        }
        for (int i = 1; i < N; i++) {
            if (count[i] == 0) {
            } else if (count[i] == 1) {
                ans = mul(ans, 2);
            } else if (count[i] >= 2) {
                int a = fastPowerMod(2, count[i]);
                int b = mul(2, a);
                // - (1+k)
                b = add(b, mod(MOD - (1 + count[i])));
                ans = mul(ans, b);
            } else {
                throw new RuntimeException("Error");
            }
        }
        output.println("Case #" + testN + ": " + ans);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Ski sk = new Ski(System.in, System.out);
        sk.solve();
    }
}

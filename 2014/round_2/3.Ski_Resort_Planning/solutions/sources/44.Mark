#include <iostream>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <map>
#include <queue>
#include <set>
#include <cstring>
#include <numeric>

using namespace std;

#define MOD 1000000007

int A[5010];
int LDOM[5010][5010];
int DP[5010][5010];

int ldom(int x, int y) {
  if(x == y) return x;
  if(y < x) swap(x, y);

  int& ref = LDOM[x][y];
  if(ref != -1) return ref;
  return ref = ldom(x, A[y]);
}

int madd(int& x, int y) {
  x = (x + y) % MOD;
}

int main() {
  int T; cin >> T;
  for (int t = 1; t <= T; t++) {
    cout << "Case #" << t << ": ";

    int N; cin >> N;
    for(int i = 1; i < N; i++) {
      cin >> A[i];
    }

/*
    int result = 1;
    memset(LDOM, -1, sizeof(LDOM));
    for(int i = 0; i < N; i++) {
      memset(DP, 0, sizeof(DP));

      for(int j = 0; j < i; j++) DP[0][j] = 0;
      DP[0][i] = 1;

      for(int j = 0; j < i; j++) {
        for(int k = 0; k <= i; k++) {
          DP[j + 1][k == i ? j : ldom(j, k)] += DP[j][k];
          DP[j + 1][k] += DP[j][k];
        }
      }

      result = (1ll * result * DP[i][A[i]]) % MOD;
    }
*/
    int result = 1;
    memset(LDOM, -1, sizeof(LDOM));
    memset(DP, 0, sizeof(DP));
    DP[0][N] = 1;

    for(int j = 0; j < N; j++) {
      if (j > 0) {
        result = (1ll * result * DP[j][A[j]]) % MOD;
      }
      for(int k = 0; k <= N; k++) {
        madd(DP[j + 1][k == N ? j : ldom(j, k)], DP[j][k]);
        madd(DP[j + 1][k], DP[j][k]);
      }
    }

    cout << result << endl;
  }
  return 0;
}

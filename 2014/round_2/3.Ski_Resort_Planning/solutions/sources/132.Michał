#include<cstdio>
#include<algorithm>
#include<utility>
#include<string>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cmath>
#include<iostream>

#define REP(i, n) for(int i = 0; i< n; ++i)
#define SC(a) scanf("%d", &a)
#define SCC(a) scanf("%c", &a)
#define SC2(a, b) scanf("%d%d", &a, &b)
#define SC3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define PR(a) printf("%d\n", a)
#define FORE(c, a, b) for(int c=int(a); c<= int(b); ++c)
#define FORD(a, b, c) for(int c=int(a); c>= int(b); --c)
#define FORIT(cont_t, cont, it) for(cont_t::iterator it = cont.begin(); it != cont.end(); ++it) 
#define ALL(a) a.begin(), a.end()

#define xx first
#define yy second
#define pb push_back
#define mp make_pair
#define itr iterator

#define dbg if(0) 
#define prd dbg printf
#define koniec dbg {SCC(c);SCC(c);} return 0;

using namespace std;

typedef vector<int> vi;
typedef set<int> si;
typedef multiset<int> msi;
typedef map<int, int> mi;
typedef pair<int, int> pi;
typedef pair<pi, string> psi;
typedef pair<int, psi> ipsi;
typedef vector<psi> vpsi;
typedef long long ll;
typedef long double ld;
typedef unsigned int uint;

const int NMAX = 1000007, MOD = 1000000007;

int n, tn;
int t[NMAX];
ll pot[NMAX], out;
vi edge[NMAX];

int dfs(int i, int v) {
	int out = 1;
	FORIT(vi, edge[i], it) if(*it < v)
		out += dfs(*it, v);
	return out;
}

void compute(int ti) {
	SC(n);
	out = 1;
	REP(i, n)
		edge[i].clear();
	FORE(i, 1, n-1) {
		SC(t[i]);
		edge[t[i]].pb(i);
	}
	prd("stop1\n");
		
	FORE(v, 2, n-1) {
		int w = t[v], ksum = 0;
		vi ks;
		
		FORIT(vi, edge[w], it) if(*it < v) {
			int k = dfs(*it, v);
			ksum += k;
			ks.pb(k);
		}
		prd("stopB %d ksum %d\n", v, ksum);
			
		ll d = (pot[ksum] * ((ll)2) + MOD - 1) % MOD;
		
		FORIT(vi, ks, it)
			d = (d + MOD - pot[*it] + 1) % MOD;
		prd("stopC\n");
		
		out = (out * d) % MOD;
	}	
		
	cout << "Case #" << ti << ": " << out << endl;
}


int main() {
  pot[0] = 1;
  FORE(i, 1, 5009)
  	pot[i] = (pot[i-1] * (ll)2)	% MOD;
	
  SC(tn);
  FORE(ti, 1, tn)
    compute(ti);
  return 0;
}


package round2;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class C {
	
	private static final long MOD = 1000000007;
	private static int N;
	private static int[] parent;
	private static List<List<Integer>> children;
	
	private static int[] size;
	private static int max;
	
	private static int calc(int nodo) {
		if (size[nodo] != -1) return size[nodo];
		int ret = 1;
		for (int child : children.get(nodo)) if (child < max) {
			ret += calc(child);
		}
		return size[nodo] = ret;
	}
	
	private static long cuenta(int nodo) {
		long ret = pot2[size[nodo]] - 1;
		for (int child : children.get(nodo)) if (child < max) {
			ret -= pot2[size[child]] - 1;
		}
		ret %= MOD; ret += MOD; ret %= MOD;
		return ret;
	}
	
	private static long[] pot2;
	
	public static void main(String[] args) {
		pot2 = new long[5005];
		pot2[0] = 1;
		for (int i=1;i<5005;i++) pot2[i] = (pot2[i-1]*2) % MOD;
		
		Scanner sc = new Scanner(System.in);
		int cases = sc.nextInt();
		for (int caze = 1; caze <= cases; caze++) {
			N = sc.nextInt();
			parent = new int[N];
			
			children = new ArrayList<List<Integer>>(N);
			for (int i=0;i<N;i++) children.add(new ArrayList<Integer>());
			
			for (int i=1;i<N;i++) {
				int tmp = sc.nextInt();
				parent[i] = tmp;
				children.get(tmp).add(i);
			}
			
			long ans = 1;
			for (int pos = N-1 ; pos > 0; pos --) {
				max = pos;
				size = new int[N];
				Arrays.fill(size, -1);
				calc(parent[pos]);
				ans *= cuenta(parent[pos]);
				ans %= MOD;
			}
			
			System.out.println("Case #" + caze + ": " + ans);
		}
	}
}

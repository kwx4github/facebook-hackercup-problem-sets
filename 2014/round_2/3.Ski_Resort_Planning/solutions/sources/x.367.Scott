#include <iostream>

using namespace std;

typedef long long ll;

const int N = 5005;
const ll MOD = 1000000007;
int a[N];
int is_ancestor[N][N];
ll pow2[N];

int main() {
  pow2[0] = 1;
  for (int i = 1; i < N; i++) {
    pow2[i] = (pow2[i-1] * 2) % MOD;
  }

  int T; cin >> T;
  for (int test = 1; test <= T; test++) {
    int n; scanf("%d", &n);
    a[0] = 0;
    for (int i = 1; i < n; i++) {
      scanf("%d", &a[i]);
    }

    memset(is_ancestor, 0, sizeof(is_ancestor));
    for (int i = 0; i < n; i++) {
      is_ancestor[0][i] = 1;
    }

    for (int i = 1; i < n; i++) {
      int node = a[i];
      do {
        is_ancestor[node][i] = 1;
        node = a[node];
      } while (node != 0);
    }

    ll ret = 1;
    for (int i = 1; i < n; i++) {
      int num = 0;
      for (int j = 1; j < i; j++) {
        if (is_ancestor[a[i]][j] && j != a[i]) {
          num++;
        }
      }

      ll mult = pow2[num];
      if (num >= 2) {
        mult += pow2[num] - num - 1;
      }

      while (mult < 0) {
        mult += MOD;
      }
      mult %= MOD;
      ret = (ret * mult) % MOD;
    }

    printf("Case #%d: %lld\n", test, ret);
  }
}

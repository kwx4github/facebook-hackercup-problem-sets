#include <iostream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <utility>
#include <cassert>
#include <numeric>
#include <sstream>
#include <limits>
using namespace std;

#define REQUIRE(cond, message) \
    do { \
        if (!(cond)) { \
            std::cerr << message << std::endl; \
            assert(false); \
        } \
    } while (false)

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i <= int(n); ++i)
#define forv(i, v) forn(i, (v).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef long double ld;

template<typename T>
inline int popcount(T t) {
    if (std::numeric_limits<T>::digits <=
                            std::numeric_limits<unsigned int>::digits) {
        return __builtin_popcount(t);
    } else {
        return __builtin_popcountll(t);
    }
}

const ld EPS = 1e-8;
const ld PI = acosl(0.0) * 2;
const ll MOD = 1000000007;
ll ans;

vi dfs(int v, const vector<vi>& g)
{
    vi t;
    forv(i, g[v]) {
        vi tt = dfs(g[v][i], g);
        for (int x: tt) t.pb(x);
    }
    forv(i, g[v]) {
        int u = g[v][i];
        int c = 0;
        ll cc = 1;
        for (int x : t) {
            if (x < u) {
                ++c;
                cc = (cc * 2) % MOD;
            }
        }
        cc = (cc * 2) % MOD;
        cc = (cc - c - 1 + MOD) % MOD;
        ans = (cc * ans) % MOD;
    }
    t.pb(v);
    return t;
}

ll solveTest()
{
    int n;
    cin >> n;
    vector<vi> g(n);
    forn(i, n - 1) {
        int p;
        cin >> p;
        g[p].pb(i + 1);
    }
    ans = 1;
    dfs(0, g);
    return ans;
}

void solve()
{
    int numTests; cin >> numTests;
    for1(testId, numTests) {

        cout << "Case #" << testId << ": " << solveTest() << endl;

    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    solve();
    return 0;
}

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REP(i,n) FOR(i,0,n)
#define REPD(i,n) FORD(i,0,n)
#define VAR(v,w) __typeof(w) v=(w)
#define FORE(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define SIZE(c) ((int)(c).size())
#define MP make_pair
#define FT first
#define SD second
#define CLEAR(a) memset((a), 0, sizeof(a))
#define INT(x) int x; scanf("%d", &x)
#define LLG(x) LL x; scanf("%lld", &x)
#define STR(n,x) char x[n]; scanf("%s", x)
#define LINE(n,x) char x[n]; gets(x)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<PII> VII;
typedef vector<double> VD;
typedef vector<LD> VLD;
typedef vector<LL> VLL;
typedef vector<bool> VB;

void oneCase();

int main() {
	int ttt;
	scanf("%d\n", &ttt);
	REP(tt, ttt) {
		printf("Case #%d: ", tt + 1);
		oneCase();
		fprintf(stderr, "Case #%d.\n", tt + 1);
		fflush(stderr);
	}
}



const LL mod = 1000000007;
inline LL MODL(LL a,LL b) {return a>=0?a%b:b+((a+1)%b)-1;}

int n;
int a[5050];
VVI sons;
VI path;
int branch[5050][5050];

void calcBranch(int v) {
	path.PB(v);
	int nn = SIZE(path);
	REPD(i,nn-1) branch[path[i]][v] = path[i+1];
	FORE(it,sons[v]) calcBranch(*it);
	path.pop_back();
}

void oneCase() {
	INT(n1); n = n1;
	a[0] = 0;
	FOR(i,1,n) scanf("%d", &a[i]);
	sons.clear();
	sons.resize(n);
	FOR(i,1,n) sons[a[i]].PB(i);
	REP(i,n) REP(j,n) branch[i][j] = -1;
	path.clear();
	calcBranch(0);
	LL res = 1;
	FOR(i,1,n) {
		map<int, int> c;
		FOR(j,a[i]+1,i) if (branch[a[i]][j] != -1) ++c[branch[a[i]][j]];
		LL mul = 1, sum = 0;
		FORE(it,c) {
			mul = (mul * (it->SD + 1)) % mod;
			sum = (sum + it->SD) % mod;
		}
		res = (res * MODL(2*mul - sum - 1, mod)) % mod;
	}
	printf("%lld\n", res);
}

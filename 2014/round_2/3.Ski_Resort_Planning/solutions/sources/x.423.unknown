#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std ;

const int MAXN = 5000;
const int MOD = 1000000007;


	

int pow2[MAXN+5];
int ways[MAXN+5][MAXN+5];
int A[MAXN+5];
int n;


int tree[MAXN+5];

int count(int i)
{
	if (i < 0)return 0;
	int ret = 0;
	for (i++;i>0;i-=i&-i)
		ret+=tree[i];
	return ret;
}
void update(int i)
{
	for (i++;i<=n+2;i+=i&-i)
		tree[i]++;
	return ;
}
int singleton(int v)
{
	int ret = count(v);
	if (v > 0)
		ret -= count(v-1);
	return ret;
}

void preCalculate()
{
	pow2[0] = 1;
	for (int i=1;i<=MAXN;i++)
		pow2[i] = (pow2[i-1]*2LL)%MOD;
	for (int n=0;n<=MAXN;n++)
		for (int c=0;c<=n;c++)
			ways[n][c] = (((long long)pow2[n] - (long long)c - (long long)pow2[n-c])%MOD + MOD)%MOD;
	return ;
}



int solve()
{
	memset(tree,0,sizeof(tree));
	update(0);
	int ret = 1;
	for (int i=1;i<n;i++){
		int factor = 1;
		int N = i - count(A[i]-1) + (A[i] != 0);
		int C = singleton(A[i]) + (A[i] != 0);
		factor += ways[N][C];
		factor %= MOD;
		ret = (ret * (long long)factor)%MOD;
//		printf(" * %d ",factor);
		update(A[i]);
	}
//	printf("\n");
	return ret;
}


int main()
{
	//freopen("resort.in","r",stdin);
	freopen("input.in","r",stdin);
	FILE *out = fopen("resort.out","w");
	int c,c2;
	int tests;
	preCalculate();
	scanf("%d",&tests);
	int test=1;
	while (tests--){
		scanf("%d",&n);
		A[0] = 0;
		for (c=1;c<n;c++)
			scanf("%d",&A[c]);
		int ret = solve();
		fprintf(out,"Case #%d: %d\n",test++,ret);
		printf("Finished Test %d\n",test-1);
	}
	
	
	return 0;
}

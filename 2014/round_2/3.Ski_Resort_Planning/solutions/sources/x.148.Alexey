import java.io.*;
import java.util.*;
import java.math.*;

public class Hard implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st;
	static Random rnd;

	private void solve() throws IOException {
		int tests = nextInt();
		for (int test = 0; test < tests; test++) {
			out.print("Case #" + (test + 1) + ": ");
			solveOne();
		}
	}

	final long modulo = 1000000000 + 7;

	private void solveOne() throws IOException {
		int n = nextInt();
		int[] haveToGo = new int[n];
		for (int i = 1; i < n; i++) {
			haveToGo[i] = nextInt();
		}
		boolean[][] haveToGoAll = new boolean[n][n];
		for (int i = 1; i < n; i++) {
			int ptr = haveToGo[i];
			haveToGoAll[i][ptr] = true;
			while (ptr != 0) {
				for (int j = 0; j < n; j++) {
					haveToGoAll[i][j] |= haveToGoAll[ptr][j];
				}
				ptr = haveToGo[ptr];
			}
		}

		long[][] C = new long[n + 1][n + 1];
		C[0][0] = 1;
		for (int i = 1; i <= n; i++) {
			for (int j = 0; j <= n; j++) {
				long left = (j == 0) ? 0 : C[i - 1][j - 1];
				C[i][j] = (left + C[i - 1][j]) % modulo;
			}
		}

		long ways = 1;

		for (int i = 1; i < n; i++) {
			int border = haveToGo[i];
			int good = 1;
			for (int j = border; j < i; j++) {
				if (haveToGoAll[j][border]) {
					++good;
				}
			}
			long currentWays = 1;

			// out.println("WTF " + i + " " + good);

			for (int take = 2; take <= good; take++) {
				currentWays += C[good][take];
				currentWays %= modulo;
			}

			ways = (ways * currentWays) % modulo;
		}

		out.println(ways);
	}

	public static void main(String[] args) {
		new Hard().run();
	}

	public void run() {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);

			rnd = new Random();

			solve();

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String line = in.readLine();

			if (line == null)
				return null;

			st = new StringTokenizer(line);
		}

		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
/* --- Author: Vladimir Smykalov, enot.1.10@gmail.com --- */
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <ctime>
#include <cassert>

#define fs first
#define sc second
#define pb push_back
#define mp make_pair
#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)
#define forit(it,v) for(typeof((v).begin()) it = v.begin() ; it != (v).end() ; ++it)
#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(),a.end()

using namespace std;

typedef long long ll;
typedef double ld;
typedef vector<int> vi;
typedef pair<int, int> pi;

const int inf = (int)1e9;
const ld eps = 1e-9;

/* --- main part --- */

#define TASK "a"

const int maxn = (int)5010;
const int mod = (int)1e9 + 7;

int a[maxn];
int pow2[maxn];

int c[maxn];
vi v[maxn];

void solve()
{
    int n;
    scanf("%d", &n);
    for (int i = 1; i < n; ++i) scanf("%d", &a[i]);
    int res = 1;
    for (int i = 1; i < n; ++i)
    {
        int root = a[i];
        c[root] = 1;
        v[root].clear();
        for (int j = root + 1; j < i; ++j)
        {
            v[j].clear();
            if ((a[j] < root) || (c[a[j]] == 0)) c[j] = 0;
            else
            {
                c[j] = 1;
                v[a[j]].pb(j);
            }
        }
        for (int j = i - 1; j >= root; --j)
        {
            for (int k = 0; k < sz(v[j]); ++k) c[j] += c[v[j][k]];
        }
        int cur = 0;
        for (int k = 0; k < sz(v[root]); ++k)
        {
            cur += pow2[c[v[root][k]]] - 1;
            if (cur >= mod) cur -= mod;
        }
        cur = pow2[c[root]] + mod - 1 - cur;
        while (cur >= mod) cur -= mod;
        res = (res * (ll)cur) % mod;
    }
    printf("%d\n", res);
}

int main()
{
    #ifdef home
        assert(freopen(TASK".in", "r", stdin));
        assert(freopen(TASK".out", "w", stdout));
    #endif
    pow2[0] = 1;
    forn(i, maxn - 1) pow2[i + 1] = (pow2[i] * 2) % mod;

    int tn;
    scanf("%d", &tn);
    forn(_, tn)
    {
        eprintf("test %d\n", _ + 1);
        printf("Case #%d: ", _ + 1);
        solve();
    }
    #ifdef home
        eprintf("Time: %d ms\n", (int)(clock() * 1000. / CLOCKS_PER_SEC));
    #endif
    return 0;
}
 
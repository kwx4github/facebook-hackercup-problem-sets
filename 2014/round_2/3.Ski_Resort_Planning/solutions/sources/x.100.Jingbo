#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <string>
#include <sstream>
using namespace std;

#define FOR(i,a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++ i)

const double PI = acos(-1.0);
const double EPS = 1e-8;

const int maxn = 5000;
const int MOD = 1000000007;

int a[maxn], pow2[maxn + 1];

inline int add(int a, int b)
{
    return (a + b) % MOD;
}

inline int sub(int a, int b)
{
    return (a - b + MOD) % MOD;
}

inline int mult(int a, int b)
{
    return (long long)a * b % MOD;
}

int adj[maxn][maxn];

int main()
{
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    
    pow2[0] = 1;
    for (int i = 1; i <= maxn; ++ i) {
        pow2[i] = pow2[i - 1] * 2  % MOD;
    }
    
    int T, test = 1;
    for (scanf("%d", &T); test <= T; ++ test) {
        printf("Case #%d: ", test);
        
        int n;
        scanf("%d", &n);
        memset(adj, 0, sizeof(adj));
        for (int i = 1; i < n; ++ i) {
            scanf("%d", &a[i]);
        }
        
        for (int i = n - 1; i >= 0; -- i) {
            adj[i][i] = 1;
            for (int j = i; j < n; ++ j) {
                adj[a[i]][j] = adj[i][j];
            }
        }
        
        for (int i = 0; i < n; ++ i) {
			for (int j = 1; j < n; ++ j) {
                adj[i][j] += adj[i][j - 1];
            }
        }
        int ans = 1;
        for (int i = n - 1; i > 0; -- i) {
            int sum = 0, tmp = 0;
            for (int j = 1; j < i; ++ j) {
                if (a[i] == a[j]) {
                    sum += adj[j][i];
                    tmp = sub(tmp, pow2[adj[j][i]]);
                    tmp = add(tmp, 1);
                }
            }
//rr << sum << " " << tmp << endl;
            tmp = add(tmp, pow2[sum]);
            tmp = add(tmp, pow2[sum]);
            tmp = sub(tmp, 1);
//rr << tmp << endl;
            ans = mult(ans, tmp);
        }
        printf("%d\n", ans);
    }
    
    return 0;
}


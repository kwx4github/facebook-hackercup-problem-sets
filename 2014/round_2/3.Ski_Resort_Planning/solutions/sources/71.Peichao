import java.util.Scanner;
import java.util.HashSet;

public class Solution
{

  static final int MOD = 1000000007;

  int N;
  int[] A;

  int[] R;
  int[] C;
  int[] pow2;

  public Solution (Scanner sc)
  {
    N = sc.nextInt();
    A = new int[N];
    for (int i = 1; i < N; ++i)
      A[i] = sc.nextInt();
  }

  void calcPow2 ()
  {
    pow2 = new int[N + 1];
    pow2[0] = 1;
    for (int i = 1; i <= N; ++i)
      pow2[i] = pow2[i - 1] * 2 % MOD;
  }

  int count (int a)
  {
    int b = A[a];
    for (int i = b + 1; i < a; ++i)
    {
      int c = A[i];
      if (c < b)
        R[i] = -1;
      else if (c == b)
        R[i] = i;
      else
        R[i] = R[c];
    }
    for (int i = b + 1; i < a; ++i)
      C[i] = 0;
    int n = 1;
    for (int i = b + 1; i < a; ++i)
    {
      if (R[i] >= 0)
      {
        ++C[R[i]];
        ++n;
      }
    }
    int ret = (pow2[n] - 1 + MOD) % MOD;
    for (int i = b + 1; i < a; ++i)
    {
      if (C[i] > 0)
        ret = (ret + 1 - pow2[C[i]] + MOD) % MOD;
    }
    return ret;
  }

  int solve ()
  {
    calcPow2();
    R = new int[N];
    C = new int[N];
    int ret = 1;
    for (int i = 1; i < N; ++i)
      ret = (int)((long)ret * count(i) % MOD);
    return ret;
  }

  public static void main (String[] args)
  {
    Scanner sc = new Scanner(System.in);
    int T = sc.nextInt();
    for (int t = 1; t <= T; ++t)
    {
      Solution sol = new Solution(sc);
      System.out.format("Case #%d: %d\n", t, sol.solve());
    }
  }

}

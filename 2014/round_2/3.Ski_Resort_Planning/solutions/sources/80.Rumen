#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

const long long mod = 1000000007;

int n;
int a[5005];
vector<int> f[5005];
long long dp[5005][5005][3];
long long u[5005][5005][3];
long long last;

void read() {
	scanf("%d", &n);
	for (int i = 1; i < n; i++) {
		scanf("%d", &a[i]);
	}
}

long long calc(int x, int y, int z) {
	if (y == (int)f[x].size()) {
		if (!z) return 1;
		if ((int)f[x].size() == 0) return 1;
		return 0;
	}
	
	long long &ans = dp[x][y][z];
	if (u[x][y][z] == last) return ans;
	u[x][y][z] = last;
	
	ans = 0;
	
	if (!y && z) {
		ans += calc(x, y, 0);//take x
	}
	
	//take a[x][y]?
	ans = (ans + calc(x, y + 1, z)) % mod;
	if (z > 0) ans = (ans + calc(f[x][y], 0, 1) * calc(x, y + 1, z - 1)) % mod;
	else ans = (ans + calc(f[x][y], 0, 1) * calc(x, y + 1, 0)) % mod;
		
//	printf ("%d %d %d   %lld\n", x, y, z, ans);
	
	return ans;
}

void solve() {
	long long ans = 1;
	int i;
	
	for (i = 0; i < 5005; i++) f[i].clear();
	
	memset(u, 0, sizeof u);
	last = 0;

	for (i = 1; i < n; i++) {
		++ last;
	//	printf ("%lld\n", calc(a[i], 0, 2));
		ans = (ans * calc(a[i], 0, 2)) % mod;
		f[ a[i] ].push_back(i);
	//	printf("\n");
	}
	
	printf ("%lld\n", ans);
}

int main() {
	int cases;
	
	scanf ("%d", &cases);
	for (int i = 1; i <= cases; i++) {
		read();
		printf ("Case #%d: ", i);
		solve();
	}
	
	return 0;
}

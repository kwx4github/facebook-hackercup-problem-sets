import java.io.*;
import java.util.*;

public class SkiResortPlanning {

    static class Assert {
        static void check(boolean e) {
            if (!e) {
                throw new Error();
            }
        }
    }

    Scanner in;
    PrintWriter out;

    int mul(int a, int b) {
        return (int)((long)a * b % 1000000007);
    }

    int sub(int a, int b) {
        return (a - b + 1000000007) % 1000000007;
    }

    int pow2[] = new int[5000];

    int pow2(int n) {
        if (pow2[n] == 0) {
            if (n == 0) {
                pow2[n] = 1;
            } else {
                pow2[n] = mul(pow2(n - 1), 2);
            }
        }
        return pow2[n];
    }

    int f[] = new int[5000];

    int f(int n) {
        if (f[n] == 0) {
            if (n == 0) {
                f[n] = 1;
            } else if (n == 1) {
                f[n] = 1;
            } else if (n == 2) {
                f[n] = 2;
            } else {
                f[n] = mul(f(n - 1), sub(pow2(n), n));
            }
        }
        return f[n];
    }

    int solveOne() {
        int n = in.nextInt();
        int count[] = new int[n];
        for (int i = 1; i < n; i++) {
            count[in.nextInt()]++;
        }
        int product = 1;
        for (int i = 0; i < count.length; i++) {
            product = mul(product, f(count[i]));
        }
        return product;
    }

    void solve() {
        int nTests = in.nextInt();
        for (int i = 1; i <= nTests; i++) {
            out.printf("Case #%d: %d\n", i, solveOne());
        }
    }

    void run() {
        in = new Scanner(System.in);
        out = new PrintWriter(System.out);
        try {
            solve();
        } finally {
            out.close();
        }
    }

    public static void main(String args[]) {
        new SkiResortPlanning().run();
    }
}

#include <queue>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <stack>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define FOREACH(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

const int MOD = 1000000007;

const int MAXN = 5003;

int f[MAXN][MAXN];
long long p[MAXN];
long long g[MAXN];
int n;
vector <int> e[MAXN];

void dfs(int x)
{
    vector <int> &v = e[x];
    for (int i = x; i <= n; ++i)
        f[x][i] += 1;
    
    for (size_t i = 0; i < v.size(); ++i) {
        dfs(v[i]);
        for (int j = 0; j <= n; ++j) {
            f[x][j] += f[v[i]][j];
        }
    }
    
    long long res = 1;
    for (size_t i = 1; i < v.size(); ++i) {
        long long c = 0;
        long long s = 0;
        for (size_t j = 0; j < i; ++j) {
            c += f[v[j]][v[i]];
            (s += p[f[v[j]][v[i]]] - 1 + MOD) %= MOD;
        }
        long long x = ((p[c] + p[c] - s - 1) % MOD + MOD) % MOD;
        (res *= x) %= MOD;
    }
    g[x] = res;
}

int main(int argc, char **argv)
{
	ios_base::sync_with_stdio(false);
	#ifdef MJUDGE
		freopen("in", "r", stdin);
		freopen("out", "w", stdout);
	#endif
    
    p[0] = 1;
    for (int i = 1; i < MAXN; ++i) {
        p[i] = (p[i - 1] * 2) % MOD;
    }
    
    int T;
    cin >> T;
    for (int t = 1; t <= T; ++t) {
        cin >> n;
        memset(f, 0, sizeof(f));
        for (int i = 0; i < n; ++i) {
            e[i].clear();
        }
        for (int i = 1; i < n; i++) {
            int x;
            cin >> x;
            e[x].push_back(i);
        }
        
        dfs(0);
        
        long long ans = 1;
        for (int i = 0; i < n; ++i) {
            (ans *= g[i]) %= MOD;
        }
        
        cerr << t << endl;

        cout << "Case #" << t << ": ";
        cout << ans << endl;
    }
	return 0;
}

#include <iostream>
#include <set>
#include <vector>
#include <future>

using namespace std;

long long fun (vector<int> A, const vector<long long>& waysForChilren)
{
	vector<int> childCnt (A.size(), 0);
	for (auto a : A) ++childCnt[a];
	long long ret = 1;
	for (auto c : childCnt)
	{
		ret = (ret * waysForChilren[c]) % 1000000007;
	}
	return ret;
}

bool ok (vector<pair<int, int>>& k, int c)
{
	vector<int> links (c+1);
	links[0] = 2;
	for (auto& p : k)
	{
		if (p.first == 0) links[p.second] = 2;
		else links[p.second] ++;
	}
	for (auto& v : links) if (v < 2) return false;
	return true;
}

int test2 (vector<pair<int, int>>& k, int c, int a = 0, int b = 1)
{
	if (b > c)
	{
		a++;
		b = a + 1;
	}
	if (b > c) return ok(k, c) ? 1 : 0;

	int ret = 0;
	ret += test2 (k, c, a, b + 1);

	k.push_back (make_pair (a, b));
	ret += test2 (k, c, a, b + 1);
	k.pop_back ();
	return ret;
}

void test (int a = 0, int b = 0)
{
	for (int c = 1;; ++c) {
		vector<pair<int, int>> k;
		cout << c << " " << test2 (k, c) << endl;
	}
}

vector<long long> calcWaysForChilren() 
{
	vector<long long> ret (5002);
	unsigned long long m = 2;
	ret[0] = ret[1] = 1;
	for (int i = 2; i < ret.size (); ++i)
	{
		ret[i] = (ret[i - 1] * m) % 1000000007;
		m = ((m << 1) + (i - 1)) % 1000000007;
		//cout << i << " " << ret[i] << endl;
	}
	return ret;
}

int main ()
{
	//test ();
	vector<long long> waysForChilren = calcWaysForChilren ();
	int T;
	cin >> T;
	vector<future<long long>> futures (T);
	for (int q = 1; q <= T; ++q)
	{
		int N;
		cin >> N;
		vector<int> A (N-1);
		for (int i = 0; i < N - 1; ++i) cin >> A[i];

//#ifdef NDEBUG
//		cerr << q << endl;
//		futures[q - 1] = async (fun, A);
//#else
		cout << "Case #" << q << ": " << fun (A, waysForChilren) << endl;
//#endif
	}
	//for (int q = 1; q <= T; ++q)
	//{
	//	long long ret = futures[q - 1].get ();
	//	cout << "Case #" << q << ": " << ret << endl;
	//}
	return 0;
}
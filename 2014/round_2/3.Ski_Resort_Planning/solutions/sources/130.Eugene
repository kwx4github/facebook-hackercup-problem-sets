#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <set>

using namespace std;

ifstream fin("ski.in");
ofstream fout("ski.out");

vector<long long> list_of_babies[5005];
long long num_of_descendants[5005];
long long a[5005];
long long powmod2[5005];

const long long MOD = 1000000007;


long long solve()
{
	vector<long long> empty;
	for (long long i = 0; i < 5005; i++)
	{
		list_of_babies[i] = empty;
		num_of_descendants[i] = a[i] = 0;
	}



	long long n;
	fin >> n;

	for (long long i = 1; i < n; i++)
		fin >> a[i];

	long long ans = 1;

	for (long long i = 1; i < n; i++)
	{
		long long dad = a[i];

		long long cur = powmod2[num_of_descendants[dad] + 1];
		for (long long j = 0; j < (long long) list_of_babies[dad].size(); j++)
		{
			cur -= powmod2[num_of_descendants[list_of_babies[dad][j]] + 1] - 1;
		}

		cur -= 1;

		while (cur < 0)
			cur += 5005 * MOD;

		cur %= MOD;

		// cout << cur << endl;

		ans = (ans * cur) % MOD;

		list_of_babies[dad].push_back(i);

		long long dude = i;

		while (dude != 0)
		{
			// num_of_descendants[]
			dude = a[dude];
			num_of_descendants[dude]++;
		}
	}
	return ans;
}


int main()
{
	powmod2[0] = 1;
	for (long long i = 1; i < 5005; i++)
		powmod2[i] = (2 * powmod2[i - 1]) % MOD;

	long long t; fin >> t;
	for (long long i = 0; i < t; i++)
	{
		cout << i << endl;
		fout << "Case #" << i + 1 << ": " << solve() << endl;
	}
	return 0;
}
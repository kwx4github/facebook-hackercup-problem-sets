// .... .... .....!
// ...... ......!
// .... ....... ..... ..!

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cassert>

#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <numeric>
#include <bitset>

#include <cstdio>
#include <cstring>

using namespace std;

#define rep(i, n) for (int i = 0, _n = (int)(n); i < _n; i++)
#define fer(i, x, n) for (int i = (int)(x), _n = (int)(n); i < _n; i++)
#define rof(i, n, x) for (int i = (int)(n), _x = (int)(x); i-- > _x; )
#define fch(i, x) for (__typeof(x.begin()) i = x.begin(); i != x.end(); i++)
#define sz(x) (int((x).size()))
#define pb push_back
#define mkp make_pair
#define all(X) (X).begin(),(X).end()

#define X first
#define Y second

typedef long long ll;
typedef pair <int, int> pii;

////////////////////////////////////////////////////////////////////////////////

const int mod = 1000000000 + 7;
const int maxn = 5000 + 100;

ll p2[maxn];

int n;
int par[maxn];
vector<int> ch[maxn];

int dfs (int x)
{
	int r = 1;
	for (int y: ch[x]) r += dfs (y);
	return r;
}

void solve()
{
	cin >> n;
	fer (i, 1, n) cin >> par[i];

	rep (i, n) ch[i].clear();

	ll ans = 1;

	fer (i, 1, n)
	{
		int p = par[i];
		int tot = 0;
		ll cur = 0;
		for (int v : ch[p])
		{
			int tmp = dfs (v);
			cur = (cur + p2[tmp] - 1) % mod;
			tot += tmp;
		}
		int mul = (p2[tot+1] - 1 - cur + mod) % mod;
//		cerr << " @@ " << i << ' ' << tot << ' ' << mul << endl;
		ans = ans * (ll)mul % mod;
		ch[p].pb (i);
	}
	cout << ans << endl;
}

int main()
{
	ios_base::sync_with_stdio (false);

	p2[0] = 1;
	fer (i, 1, maxn) p2[i] = p2[i-1] * 2 % mod;

	int tcn; cin >> tcn;
	for (int tci = 1; tci <= tcn; tci++)
	{
		cout << "Case #" << tci << ": ";
		solve();
	}

	{ int _; cin >> _; return 0; }
}

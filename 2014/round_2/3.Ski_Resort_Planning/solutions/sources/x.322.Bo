#include <cassert>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <climits>
#include <cstddef>
#include <cctype>
#include <cmath>
#include <cstring>
#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <iterator>
#include <numeric>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <bitset>
#include <list>
#include <string>
#include <functional>
#include <utility>
using namespace std;
typedef long long llint;
int const MOD = 1000000007;
int const N = 5000;
int n;
int a[N];
void readin()
{
    scanf("%d", &n);
    for (int i = 1; i < n; ++i)
    {
        scanf("%d", &a[i]);
    }
}
inline int add(int x, int y)
{
    return (x + y) % MOD;
}
inline int sub(int x, int y)
{
    return (x - y + MOD) % MOD;
}
inline int mult(int x, int y)
{
    return static_cast <int>((llint(x) * y) % MOD);
}
int pow_(int x, int y)
{
    int ret = 1;
    while (y)
    {
        if ((y & 1) != 0)
        {
            ret = mult(ret, x);
        }
        x = mult(x, x);
        y >>= 1;
    }
    return ret;
}
int solve()
{
    int ret = 1;
    for (int i = 1; i < n; ++i)
    {
        int num = 0;
        for (int j = a[i] + 1; j < i; ++j)
        {
            if (a[j] == a[i])
            {
                ++num;
            }
        }
        ret = mult(ret, add(pow_(2, num), num > 1 ? sub(sub(pow_(2, num), num), 1) : 0));
    }
    return ret;
}
int main()
{
    int tc;
    scanf("%d", &tc);
    for (int cc = 1; cc <= tc; ++cc)
    {
        readin();
        printf("Case #%d: %d\n", cc, solve());
    }
    return 0;
}


#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
#define MP make_pair
#define FOR(v,p,k) for(int v=p;v<=k;++v)
#define FORD(v,p,k) for(int v=p;v>=k;--v)
#define REP(i,n) for(int i=0;i<(n);++i)
#define VAR(v,i) __typeof(i) v=(i)
#define FORE(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)
#define PB push_back
#define ST first
#define ND second
#define SZ(x) (int)(x).size()
#define ALL(c) c.begin(),c.end()
#define ZERO(x) memset(x,0,sizeof(x))

const LL MD = (LL) 1e9 + 7;

void alg() {
    int n;
    cin >> n;
    vector<LL> pmd(n + 1);
    pmd[0] = 1;
    for (int i = 1; i <= n; ++i) {
        pmd[i] = (pmd[i - 1] * 2LL) % MD;
    }
    vector<int> parent(n);
    parent[0] = -1;
    for (int i = 1; i < n; ++i) {
        cin >> parent[i];
    }
    vector<vector<int>> children(n);
    vector<int> sz(n);
    LL result = 1;
    for (int i = 1; i < n; ++i) {
        LL cur = 2LL * pmd[sz[parent[i]]] - 1;
        FORE (it, children[parent[i]]) {
            cur -= 2LL * pmd[sz[*it]] - 1;
        }
        cur = (cur % MD + MD) % MD;
        result = (result * (LL) cur) % MD;
        int c = i;
        do {
            c = parent[c];
            ++sz[c];
        } while (c != 0);
        children[parent[i]].PB(i);
    }
    static int case_no = 0;
    cout << "Case #" << ++case_no << ": " << result << endl;
}

int main() {
    int d;
    cin >> d;
    while (d--) {
        alg();
    }
}

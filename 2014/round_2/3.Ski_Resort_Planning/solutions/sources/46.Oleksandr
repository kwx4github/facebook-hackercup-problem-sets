#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <complex>
#include <numeric>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define FOR(i, a, b) for (int i(a), _b(b); i < _b; ++i)
#define REP(i, n) FOR(i, 0, n)
#define FORD(i, a, b) for (int i(a), _b(b); i >= _b; --i)
#define UN(a) sort(all(a)), (a).erase(unique(all(a)), (a).end())
#define CL(a, v) memset(a, v, sizeof a)
#define pb push_back
#define X first
#define Y second

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;

const int INF = 1000000000;
const ll INF_LL = 1000000000000000000LL;
const double pi = 2 * acos(0.0);

template<class T> void smin(T& a, T b) { if (a > b) a = b; }
template<class T> void smax(T& a, T b) { if (a < b) a = b; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }
template<class T> T sqr(T a) { return a * a; }

template<class T> void outp(const vector<T>& v) {
  REP(i, sz(v)) cout << v[i] << (i + 1 == sz(v) ? '\n' : ' ');
}
template<class T> void outp(T* v, int n) {
  REP(i, n) cout << *v++ << (i + 1 == n ? '\n' : ' ');
}

const int mod = 1000000007;
void add(int& x, int y) { x += y; if (x >= mod) x -= mod; }
int sum(int x, int y) { add(x, y); return x; }
int mul(int x, int y) { return (ll(x) * y) % mod; }

const int h = 5055;
int n;
int a[h], k[h], f[h];

int t[h];

int main() {
  t[0] = 1;
  FOR(i, 1, h) t[i] = mul(t[i-1], 2);
  freopen("ski_resort_planning.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  int it = 1, tt;
  char ct;
  for (scanf("%d%c", &tt, &ct); it <= tt; ++it) {
    scanf("%d", &n);
    FOR(i, 1, n) scanf("%d", a+i);
    f[0] = 1;
    FOR(i, 1, n) {
      k[a[i]] = 0;
      FORD(j, i-1, a[i]) k[j] = 1;
      FORD(j, i-1, a[i]) k[a[j]] += k[j];

      int tot = 0;
      int dec = 0;
      FOR(j, a[i]+1, i) if (a[j] == a[i]) {
        tot += k[j];
        add(dec, sum(t[k[j]], mod-1));
      }

      f[i] = mul(f[i-1], sum(t[tot+1], mod - dec - 1));
    }
    printf("Case #%d: %d\n", it, f[n-1]);
  }
  return 0;
}

#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <iostream>
#include <set>
#include <queue>
using namespace std;

#define REP(i,n) for(int i = 0; i < (n); ++i)
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORE(it,V) for(__typeof(V.begin()) it = V.begin(); it != V.end(); ++it)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define MP make_pair
#define PB push_back
#define FI first
#define SE second

const int MAXN = 5005;
int n, global_limit;
vector<int> graf[MAXN];
bool visited[MAXN];
int rozmiar_poddrzewa[MAXN];
int ojciec[MAXN];
const int MOD = 1000000007;

long long potega2[MAXN];

void szukaj_deep(int v) {
	visited[v] = true;
	if (v > global_limit) { return; }
	rozmiar_poddrzewa[v] = 1;
	FORE(it, graf[v]) {
		szukaj_deep(*it);
		rozmiar_poddrzewa[v] += rozmiar_poddrzewa[*it];
	}
}

int szukaj(int x) {
	global_limit = x-1;
	REP(i,n) visited[i] = false;
	REP(i,n) rozmiar_poddrzewa[i] = 0;
	int root = ojciec[x];
	szukaj_deep(root);
	long long wynik = (potega2[ rozmiar_poddrzewa[root] ] - 1 + MOD)%MOD;
	FORE(it, graf[root]) if (rozmiar_poddrzewa[*it]) wynik = (wynik + MOD - potega2[ rozmiar_poddrzewa[*it]-1 ])%MOD;
	return wynik;
}

void testcase() {
	cin >> n;
	REP(i,n) {
		graf[i].clear();
	}
	REP(i,n-1) {
		int x;
		cin >> ojciec[i+1];
		graf[ojciec[i+1]].PB(i+1);
	}
	ojciec[0] = -1;
	long long result = 1;
	FOR(i,1,n-1) {
		result = (result * szukaj(i))%MOD;
	}

	cout << result << endl;
}

int main() {
	int t;
	potega2[0] = 1;
	FOR(i,1,MAXN-1) potega2[i] = (potega2[i-1] * 2) % MOD;
	cin >> t;
	FOR(i,1,t) {
		cout << "Case #" << i << ": ";
		testcase();
	}
}

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <ext/rope>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, double> pid;
typedef pair<double, int> pdi;

const int INF = 0x3f3f3f3f;
const int MAXN = 100;
const int MAXM = 100;
const int MOD = 1000000007;
const ll INFLL = 0x3f3f3f3f3f3f3f3fLL;
const double EPS = 1e-8;
const double PI = acos(-1.0);

#define DEBUG(args...) fprintf(stderr, args)
#define all(c) (c).begin(), (c).end()
#define pb push_back

template<typename U, typename V> void add(U& ret, const V& val) { ret = (ll)(ret + val) % MOD; }
template<typename U, typename V> void chkmax(U& ret, const V& val) { if (ret < val) { ret = val; } }
template<typename U, typename V> void chkmin(U& ret, const V& val) { if (val < ret) { ret = val; } }
template<typename T> T gcd(T a, T b) { return a == 0 ? b : gcd(b % a, a); }
template<typename T> T lcm(T a, T b) { return a / gcd(a, b) * b; }

int n;
int a[5000];
vector<int> e[5000];
ll dp[5000];
ll b[5001];
ll res;

void init() {
    b[0] = 1;
    for (int i = 1; i <= 5000; ++i) {
        b[i] = b[i - 1] * 2 % MOD;
    }
}

void input() {
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        e[i].clear();
    }
    for (int i = 1; i < n; ++i) {
        scanf("%d", &a[i]);
    }
}

int gao(int u, int l) {
    int ret = 1;
    for (auto i : e[u]) {
        ret += gao(i, l);
    }
    return ret;
}

void solve() {
    dp[0] = 1;
    for (int i = 1; i < n; ++i) {
        vector<int> v;
        for (auto j : e[a[i]]) {
            v.push_back(b[gao(j, i)]);
        }
        dp[i] = 0;
        if (v.size() >= 2) {
            ll cur = 1;
            for (auto j : v) {
                cur = cur * j % MOD;
            }
            cur = (cur - 1) % MOD;
            for (auto j : v) {
                cur = (cur - (j - 1)) % MOD;
            }
            dp[i] = (dp[i] + cur) % MOD;
        }
        ll cur = 1;
        for (auto j : v) {
            cur = cur * j % MOD;
        }
        dp[i] = (dp[i] + cur) % MOD;
        dp[i] = (dp[i] + MOD) % MOD;

        e[a[i]].push_back(i);
    }

    res = 1;
    for (int i = 0; i < n; ++i) {
        res = res * dp[i] % MOD;
    }
}


int main(int argc, char** argv) {
    int totalCaseNumber = 1;

    init();

    scanf("%d", &totalCaseNumber);
    for (int caseNum = 1; caseNum <= totalCaseNumber; ++caseNum) {
        input();
        solve();
        printf("Case #%d: %lld\n", caseNum, res);
    }

    return 0;
}

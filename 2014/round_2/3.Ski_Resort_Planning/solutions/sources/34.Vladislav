#include <cstdio>
#include <numeric>
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include <string>
#include <map>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <queue>
#include <sstream>
#include <deque>

using namespace std;

#define mp make_pair
#define pb push_back
#define rep(i,n) for(int i = 0; i < (n); i++)
#define re return
#define fi first
#define se second
#define sz(x) ((int) (x).size())
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define y0 y3487465
#define y1 y8687969
#define fill(x,y) memset(x,y,sizeof(x))
                         
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef double D;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef vector<vi> vvi;

template<class T> T abs(T x) { re x > 0 ? x : -x; }

const int mod = 1000000000 + 7;

int n;
int m;
int p2[5101];
vi v[5101];
vi w[5101];

int go (int x) {
	int cur = 1;
	w[x].clear ();
	for (int i = 0; i < sz (v[x]); i++) {
		int y = v[x][i];
		int tmp = go (y);
		cur = ((ll)cur * tmp) % mod;
		int all = 0;
		int rem = 1;
		for (int j = 0; j < i; j++) {
			int z = v[x][j];
			int k = 0;
			for (int t = 0; t < sz (w[z]); t++)
				if (w[z][t] < y)
					k++;
			all += k;
			rem = (rem + p2[k] - 1) % mod;
			if (rem < 0) rem += mod;
		}
		int now = (p2[all + 1] - rem + mod) % mod;
		cur = ((ll)cur * now) % mod;
		for (int j = 0; j < sz (w[y]); j++) w[x].pb (w[y][j]);
	}                           
	w[x].pb (x);
	re cur;
}

int main () {
	p2[0] = 1;
	for (int i = 1; i <= 5100; i++)
		p2[i] = ((ll)p2[i - 1] * 2) % mod;
	int tt;
	cin >> tt;
	for (int it = 1; it <= tt; it++) {
		scanf ("%d", &n);
		for (int i = 0; i < n; i++) v[i].clear ();
		for (int i = 1; i < n; i++) {
			int x;
			scanf ("%d", &x);
			v[x].pb (i);
		}
		cout << "Case #" << it << ": " << go (0);
		cout << endl;
		fprintf (stderr, "%d / %d = %.2f | %.2f\n", it, tt, (double)clock () / CLOCKS_PER_SEC, ((double)clock () / it * tt) / CLOCKS_PER_SEC);
	}
	return 0;
}
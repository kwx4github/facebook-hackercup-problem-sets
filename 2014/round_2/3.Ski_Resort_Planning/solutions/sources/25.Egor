#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

typedef long long ll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef pair<int, int> pii;

const int MOD = 1e9 + 7;
void madd(int &a, int b) { if ((a += b) >= MOD) a -= MOD; }
int mmul(int a, int b) { return ll(a) * b % MOD; }

void solve() {
  int n;
  scanf("%d", &n);
  assert(n > 0);
  vi as(n);
  for (int i = 1; i < n; i++) {
    scanf("%d", &as[i]);
    assert(0 <= as[i] && as[i] < i);
  }

  vi pow2(n + 1);
  pow2[0] = 1;
  for (int i = 1; i <= n; i++) pow2[i] = mmul(pow2[i - 1], 2);

  vvi chi(n);

  vi f(n);
  f[0] = 1;
  for (int i = 1; i < n; i++) {
    vi pc(n, 1);
    for (int i2 = i - 1; i2 > 0; i2--) {
      pc[as[i2]] += pc[i2];
    }
    int myk = pow2[pc[as[i]]];
    madd(myk, MOD - 1);
    for (int i2 = 0; i2 < sz(chi[as[i]]); i2++) {
      int k = chi[as[i]][i2];
      madd(myk, MOD - pow2[pc[k]]);
      madd(myk, 1);
    }
    f[i] = mmul(f[i - 1], myk);

    chi[as[i]].pb(i);
  }
  printf("%d\n", f[n - 1]);
}

int main(int argc, char* argv[]) {
  assert(argc <= 3);
  if (argc == 3) {
    assert(freopen(argv[1], "r", stdin));
    assert(freopen(argv[2], "w", stdout));
  } else {
    string filename = ".in";
    if (argc >= 2) filename = argv[1];

    assert(freopen(filename.c_str(), "r", stdin));

    if (filename.length() >= 3 && string(filename, filename.length() - 3, 3) == ".in") {
      filename = string(filename, 0, filename.length() - 3);
    }
    filename += ".out";
    assert(freopen(filename.c_str(), "w", stdout));
  }

  int TN;
  char buf[16];
  assert(fgets(buf, sizeof buf, stdin));
  assert(sscanf(buf, "%d", &TN) >= 1);
  for (int TID = 1; TID <= TN; TID++)
    try {
      eprintf("===== Solving test case #%d =====\n", TID);
      printf("Case #%d: ", TID);
      solve();
    } catch (...) {
      eprintf("Exception was caught while executing on test #%d\n", TID);
      return 1;
    }
  return 0;
}

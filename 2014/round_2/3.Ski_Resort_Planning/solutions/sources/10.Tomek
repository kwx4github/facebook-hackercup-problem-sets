//{{{
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
#include <map>
#include <set>
using namespace std;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << (x) << endl;

typedef long long LL;
typedef unsigned long long ULL;
const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%lld",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }
//}}}

template<unsigned MOD>
class Modulo {
  unsigned v;
 public:
  Modulo() {}
  Modulo(unsigned x):v(x%MOD) {}
  int get() const { return v; }
  Modulo operator+(Modulo b) const { return Modulo(v+b.v); }
  void operator+=(Modulo b) { *this = *this + b; }
  Modulo operator-(Modulo b) const { return Modulo(v+MOD-b.v); }
  void operator-=(Modulo b) { *this = *this - b; }
  Modulo operator*(Modulo b) const { return Modulo(unsigned(ULL(v) * ULL(b.v) % MOD)); }
  void operator*=(Modulo b) { *this = *this * b; }
};

typedef Modulo<1000000007> Mod;

const int MAXN = 6000;
Mod power2[MAXN+1];

int N;
vector<int> parents;

struct Vertex {
  int parent;
  int child;
  int sibling;
};

vector<Vertex> vertices;

void ReadInput() {
  N = rint();
  parents.assign(N,1);
  FOR(i,1,N-1) parents[i] = rint();
}

int Size(int root) {
  int sz = 1;
  for(int ch = vertices[root].child; ch != -1; ch = vertices[ch].sibling) {
    sz += Size(ch);
  }
  return sz;
}

Mod Calc(int root) {
  Mod res = 0;
  int totalSz = 1;
  for(int ch = vertices[root].child; ch != -1; ch = vertices[ch].sibling) {
    int s = Size(ch);
    totalSz += s;
    res -= (power2[s]-1);
  }
  res += power2[totalSz]-1;
  return res;
}

Mod Calc() {
  vertices.resize(N);
  for(Vertex &v : vertices) {
    v.parent = -1;
    v.child = -1;
    v.sibling = -1;
  }
  Mod res = 1;
  FOR(i,1,N-1) {
    int p = parents[i];
    res *= Calc(p);
    vertices[i].parent = p;
    vertices[i].sibling = vertices[p].child;
    vertices[p].child = i;
  }
  return res;
}

int main(int argc, char **argv) {
  power2[0]=1;
  FOR(i,1,MAXN) power2[i] = power2[i-1]*2;

  int ntc = rint();
  FOR(tc,1,ntc) {
    ReadInput();
    if(argc==2 && tc!=atoi(argv[1])) continue;
    Mod res = Calc();
    printf("Case #%d: %d\n", tc, res.get());
  }
}

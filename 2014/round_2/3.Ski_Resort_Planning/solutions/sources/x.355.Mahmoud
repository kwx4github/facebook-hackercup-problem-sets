import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;



public class CR2 {

	private static BufferedReader in;
	private static PrintWriter out;
	private static StringTokenizer input;
	
	public static void main(String[] args) throws IOException {
		//-------------------------------------------------------------------------
		//Initializing...
		new CR2();
		//-------------------------------------------------------------------------
		//put your code here... :)
		int test = nextInt();
		for (int cases = 1; cases <= test; cases++) {
			int n = nextInt();
			int [] count = new int[n];
			for (int i = 1; i < count.length; i++) {
				count[nextInt()]++;
			}
			long ret = 1;
			for (int i = 0; i < count.length; i++) {
				if(count[i]==0)continue;
				int p = (count[i]*(count[i]-1))/2;
				ret *= pow(2,p,1000000007);
				ret %= 1000000007;
			}
			out.println("Case #" + cases + ": " +ret);
		}
		
		writeln("");
		//-------------------------------------------------------------------------
		//closing up
		end();
		//--------------------------------------------------------------------------

	}
	private static long pow(int i, int p, int mod) {
		if (p==0) return 1;
		long rr = pow(i, p/2, mod);
		rr *= rr;
		rr %= mod;
		if(p%2!=0) rr *= i;
		return rr%mod;
	}
	public CR2() throws IOException {
		//Input Output for Console to be used for trying the test samples of the problem 
		in = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter("CR2.out");
		//-------------------------------------------------------------------------
		//Initalize Stringtokenizer input
		input = new StringTokenizer(in.readLine());
	}

	private static int nextInt() throws IOException {
		if (!input.hasMoreTokens())input=new StringTokenizer(in.readLine());
		return Integer.parseInt(input.nextToken());
	}
	private static long nextLong() throws IOException {
		if (!input.hasMoreTokens())input=new StringTokenizer(in.readLine());
		return Long.parseLong(input.nextToken());
	}
	private static double nextDouble() throws IOException {
		if (!input.hasMoreTokens())input=new StringTokenizer(in.readLine());
		return Double.parseDouble(input.nextToken());
	}
	private static String nextString() throws IOException {
		if (!input.hasMoreTokens())input=new StringTokenizer(in.readLine());
		return input.nextToken();
	}
	private static void write(String output){
		out.write(output);
		out.flush();
	}
	private static void writeln(String output){
		out.write(output+"\n");
		out.flush();
	}
	private static void end() throws IOException{
		in.close();
		out.close();
		System.exit(0);
	}

	

}

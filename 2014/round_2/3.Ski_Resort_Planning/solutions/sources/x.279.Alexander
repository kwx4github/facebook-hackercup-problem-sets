// Alex Fetisov
// Accepted

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <iostream>
#include <sstream>
#include <deque>
#include <cstring>
#include <cstdio>
#include <complex>

using namespace std;

#define ALL(v) (v).begin(),(v).end()
#define CLR(a) memset((a), 0, sizeof(a))
#define CLR1(a) memset((a), -1, sizeof(a))
#define mp make_pair

template <typename T> inline string toString(const T& o) { ostringstream os(""); os << o; return os.str(); }
template <typename T> void unique(vector<T>& v) { sort(all(v)); v.erase(unique(all(v)) - v.begin()); }
template <typename T> void append(vector<T>& v, const vector<T>& u) { v.insert(v.end(), ALL(u)); }

typedef long long int64;

const int MOD = 1000000007;

int n, a[5005];
int ret[5005];
int C[5010][5010];

int solve() {
	scanf("%d", &n);
	for (int i = 1; i < n; ++i) {
		scanf("%d", a + i);
	}
	ret[0] = 1;
	for (int i = 1; i < n; ++i) {
		int cur = 0;
		
		int cnt = 0;
		for (int j = 1; j < i; ++j) {
			if (a[j] == a[i]) {
				++cnt;
			}
		}
		for (int j = 0; j <= cnt; ++j) {
			cur = cur + C[cnt][j];
			if (cur >= MOD) cur -= MOD;
		}
		for (int j = 2; j <= cnt; ++j) {
			cur = cur + C[cnt][j];
			if (cur >= MOD) cur -= MOD;
		}
		ret[i] = cur;
	}
	int64 result = 1;
	for (int i = 0; i < n; ++i) {
		result = (result * 1ll * ret[i]) % MOD;
	}
	return (int)result;
}

int main() {
	freopen("/Users/alexf/in.txt", "r", stdin);
	freopen("/Users/alexf/out.txt", "w", stdout);
	//auto_moch();
	int test;
	for (int i = 0; i <= 5005; ++i) {
		for (int j = 0; j <= i; ++j) {
			if (j == 0 || j == i) {
				C[i][j] = 1;
			} else {
				C[i][j] = (C[i-1][j-1] + C[i-1][j]) % MOD;
			}
		}
	}
	scanf("%d", &test);
	for (int t = 1; t <= test; ++t) {
		printf("Case #%d: ", t);
		int ret = solve();
		cout << ret << endl;
		/*int64 ret2 = stupid();
		cout << ret2 << endl;*/
	}
	return 0;
}
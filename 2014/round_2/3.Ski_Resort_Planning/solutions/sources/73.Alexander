#pragma comment(linker, "/STACK:10000000")
#define _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_DEPRECATE

#include <cassert>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <numeric>
#include <bitset>
#include <vector>
#include <set>
#include <string>
#include <map>
#include <cmath>
#include <algorithm>
#include <queue>
#include <cstdlib>
#include <functional>
#include <cstring>
#include <ctime>

#define y1 AAA_BBB
#define y0 AAA_AAA

#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz(v) (int)((v).size())
#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for(int i = (int)(a); i <= (int)(b); ++i)
#define for1(i, n) for(int i = 1; i <= (int)(n); ++i)

using namespace std;

typedef long long i64;
typedef unsigned long long u64;
typedef double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
template <class T> T inline sqr(T x) {
    return x * x;
}
const ld pi = 3.1415926535897932384626433832795;
const ld eps = 1e-8;

const int mod = 1e9 + 7;

const int maxn = 5050;
int a[maxn];
vi g[maxn];
int timer = 0;
int tin[maxn], tout[maxn];

int spow(i64 x, int s)
{
	i64 r = 1;
	while (s)
	{
		if (s & 1) r = (x * r) % mod;
		x = (x * x) % mod;
		s >>= 1;
	}
	return r;
}

void dfs(int x)
{
	tin[x] = timer++;
	for (auto it : g[x])
	{
		dfs(it);
	}
	tout[x] = timer++;
}

bool isIn(int root, int v)
{
	return (tin[root] <= tin[v] && tout[root] >= tout[v]);
}

int getI(const vi& a, int x)
{
	return lower_bound(a.begin(), a.end(), x) - a.begin();
}

int solve()
{
	int n;
	cin >> n; n--;
	forn (i, n + 2) g[i].clear();
	for1 (i, n) {
		cin >> a[i];
		g[a[i]].pb(i);
	}
	forn (i, n)
		sort(g[i].begin(), g[i].end());
	timer = 0;
	dfs(0);
	i64 ans = 1;
	for (int i = 1; i <= n; i++)
	{
		int p = a[i];
		i64 add = 0;
		int q = 0;
		for (int j = p + 1; j < i; j++)
		{
			if (isIn(p, j))
				q++;
		}
		add = spow(2, q);

		vi c(g[p].size());
		vi w(g[p].size());
		for (int j = 0; j < (int)g[p].size(); j++)
			w[j] = tout[g[p][j]];

		for (int j = p + 1; j < i; j++)
			if (isIn(p, j))
			{
				c[getI(w, tout[j])]++;
			}
		i64 z1 = spow(2, q) - q - 1;
		if (z1 < 0) z1 += mod;
		i64 z2 = 0;
		forn (j, c.size()) {
			z2 += spow(2, c[j]) - c[j] - 1;
		}
		z2 %= mod;
		add += z1 - z2;
		if (add < 0) add += mod; if (add >= mod) add -= mod;
		ans = (ans *add) % mod;
	}
	return ans;
}

int main() {
	freopen("c.in", "r", stdin);
	freopen("output.txt","w", stdout);
	int T;
	cin >> T;
	for1 (t, T)
	{
		cerr << t << endl;
		cout << "Case #" << t << ": " << solve() << endl;
	}
	return 0;
}

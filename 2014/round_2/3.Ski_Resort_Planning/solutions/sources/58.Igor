#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
inline ostream& operator<< (ostream& out, const pt& p) { return out << '(' << p.x << ", " << p.y << ')'; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 5000 + 13;
const int mod = 1000 * 1000 * 1000 + 7;

int n;
int pr[N];
vector <int> g[N];

inline bool read()
{
	if (scanf("%d", &n) != 1) return false;
	
	forn(i, n) g[i].clear();
	
	pr[0] = -1;
	forl(i, n - 1) assert(scanf("%d", &pr[i]) == 1);
	//forl(i, n - 1) pr[i] = 0;
	
	return true;
}

int d[N];
int c[N];
int two[N];
int z[N][3];

inline void upd (int& next, int add)
{
	next += add;
	while (next >= mod) next -= mod;
}

int calc (int v)
{
	v = pr[v];
	
	forn(i, sz(g[v]) + 1) forn(j, 3) z[i][j] = 0;
	
	z[0][0] = 1;
	
	forn(i, sz(g[v]))
		forn(j, 3)
		{
			const int& dv = z[i][j];
			
			upd(z[i + 1][j], dv);
			
			li add = two[c[g[v][i]]] - 1;
			while (add < 0) add += mod;
			add *= dv;
			if (add >= mod) add %= mod;
			
			upd(z[i + 1][min(2, j + 1)], int(add));
		}

	return z[sz(g[v])][2];
}

inline void solve(int test)
{
	forn(i, n) c[i] = 0;
	
	d[0] = 1;
	c[0] = 1;
	
	forl(i, n - 1)
	{
		d[i] = two[c[pr[i]] - 1];
		d[i] = (d[i] + calc(i)) % mod;
		
		int v = i;
		while (v >= 0)
		{
			c[v]++;
			v = pr[v];
		}
		g[pr[i]].pb(i);
	}
	
	int ans = 1;
	forn(i, n) ans = int((ans * 1LL * d[i]) % mod);
	
	printf("Case #%d: %d\n", test + 1, ans);
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	
	two[0] = 1;
	forl(i, N - 1) two[i] = (two[i - 1] * 2) % mod;

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		assert(read());
		solve(test);
#ifdef SU2_PROJ
		cerr << "test " << test + 1 << ": " << clock() << endl;
#endif
	}
	
	return 0;
}

#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define MAX (5 << 10)
#define MOD 1000000007

int B[MAX];
int C[MAX];
int P[MAX];
Int Two[MAX];

int SolveTest(int test)
{
	int n;
	scanf("%d", &n);

	int i, j;
	P[0] = -1;
	FOR(i, 1, n)
		scanf("%d", &P[i]);

	Two[0] = 1;
	FOR(i, 1, n + 1)
		Two[i] = 2 * Two[i - 1] % MOD;

	Int res = 1;
	FOR(i, 1, n)
	{
		CLEAR(B, 0);
		CLEAR(C, 0);

		B[P[i]] = 1;
		FOR(j, P[i] + 1, i)
			B[j] = B[P[j]];


		RFOR(j, i, P[i])
		if (B[j] != 0)
		{
			++C[j];
			if (j != P[i])
				C[P[j]] += C[j];
		}

		Int r = Two[ C[P[i]] ] + MOD - 1;
		FOR(j, P[i] + 1, i)
			r += MOD - Two[C[j] - 1];

		res *= r % MOD;
		res %= MOD;
	}

	printf("Case #%d: %d\n", test + 1, int(res));
	return 0;
}

int main()
{
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

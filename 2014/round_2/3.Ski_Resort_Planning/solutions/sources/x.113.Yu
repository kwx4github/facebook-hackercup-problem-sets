#include <cstdio>
#include <iostream>
#include <algorithm>
#include <set>
using namespace std;

#define FOR(i,a,b) for(int i=int(a);i<=int(b);++i)
#define REP(i,n) FOR(i,0,(n)-1)
#define debug(x) cout<<(#x)<<":"<<(x)<<endl
typedef long long int64;

int a[2][1000010], n[2], p[2];
set<int> only[2], both;

void genBoard() {
	int x1, a1, b1, c1, r1;
	int x2, a2, b2, c2, r2;
	scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
	scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
	a[0][0] = x1; a[1][0] = x2;
	FOR(i, 1, max(n[0], n[1])) {
		a[0][i] = (1LL*a1*a[0][(i-1)%n[0]]+1LL*b1*a[1][(i-1)%n[1]]+c1) % r1;
		a[1][i] = (1LL*a2*a[0][(i-1)%n[0]]+1LL*b2*a[1][(i-1)%n[1]]+c2) % r2;
	}
}

bool advance(int k) {
	do {
		if (p[k] == n[k]) return 0;
		int x = a[k][p[k]++];
		if (only[1-k].count(x)) {
			only[1-k].erase(x);
			both.insert(x);
		} else {
			if (!both.count(x)) only[k].insert(x);
		}
	} while (!only[1-k].empty());
	if (only[k].empty()) return 1;
	return advance(1-k);
}

int count(int k) {
	// printf("%d %d\n", p[0], p[1]);
	int ret = 1;
	while (p[k] < n[k]) {
		int x = a[k][p[k]];
		if (both.count(x)) ++p[k], ++ret;
		else break;
	}
	return ret;
}

int main() {
	int cT;
	scanf("%d", &cT);
	FOR(cN, 1, cT) {
		scanf("%d%d", &n[0], &n[1]);
		genBoard();
		/*
		REP(k, 2) {
			REP(i, n[k]) printf("%d ", a[k][i]);
			puts("");
		}
		break;
		*/
		int64 ans = 0;
		only[0].clear();
		only[1].clear();
		both.clear();
		p[0] = p[1] = 0;
		while (1) {
			if (advance(0)) ans += 1LL*count(0)*count(1);
			else break;
			// debug(ans);
		}
		cout << "Case #" << cN << ": " << ans << endl;
	}
}

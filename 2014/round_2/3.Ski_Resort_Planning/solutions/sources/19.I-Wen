#include<stdio.h>
#include<string>
#include<math.h>
#include<stdlib.h>
#include<set>
#include<bitset>
#include<map>
#include<vector>
#include<string.h>
#include<algorithm>
#include<iostream>
#include<queue>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define REPC(I, C) for (int I = 0; !(C); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define F first
#define S second
using namespace std;
const int SIZE = 5050;
const int MOD = (int)1e9+7;
int A[SIZE],fa[SIZE][SIZE];
long long dp[2][SIZE];
void add(long long &x,long long v){
    x+=v;
    x%=MOD;
    if(x<0)x+=MOD;
}
int main(){
    int T,cs=0;scanf("%d",&T);
    while(T--){
        long long an=1;
        DRI(N);
        REPP(i,1,N)RI(A[i]);
        REP(i,N)fa[0][i]=fa[i][0]=0;
        REPP(i,1,N){
            REP(j,i)fa[j][i]=fa[i][j]=fa[A[i]][j];
            fa[i][i]=i;
        }

        MS0(dp);
        int now=0;
        dp[now][0]=1;
        REPP(i,1,N){
            an=an*dp[now][A[i]]%MOD;
            REP(j,N)dp[now^1][j]=dp[now][j];
            REP(j,i){
                add(dp[now^1][fa[j][i]],dp[now][j]);
            }
            add(dp[now^1][i],1);
            now^=1;
        }
        printf("Case #%d: ",++cs);
        cout<<an<<endl;
    }
    return 0;
}

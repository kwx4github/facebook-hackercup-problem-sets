using System;
using System.Collections.Generic;
using System.Linq;
class App {
	static bool _isDebug = true;
	
	static void Debug(object o) { Debug(o.ToString(), new object[0]); }
	static void Debug(string str, params object[] ps) {
		if (!_isDebug) return;
		Console.WriteLine("Debug: " + string.Format(str, ps));
	}
	
	static long Pow(long a, long n, long mod) {
checked {
		if (n == 0) return 1;
		if (n == 1) return a % mod;
		long halfRes = Pow(a, n / 2, mod);
		halfRes *= halfRes;
		halfRes %= mod;
		if (n % 2 == 1) {
			halfRes *= a;
			halfRes %= mod;
		}
		return halfRes;
}	}
	
	static string Solve() {
checked {
		var n = int.Parse(Console.ReadLine());
		var parent = (new int[] { -1 }).Concat(Console.ReadLine().Split(new [] { " "}, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse)).ToArray();
		
		var requiredChildren = new List<int>[n];
		var directChildren = new List<int>[n];
		for (int i = 0; i < n ; i++) requiredChildren[i] = new List<int>();
		for (int i = 0; i < n ; i++) directChildren[i] = new List<int>();
		
		long mod = 1000 * 1000 * 1000 + 7;
		long result = 1L;
		for (var i = 1 ; i < n ; i++) {
			long waysWithDirect = Pow(2, requiredChildren[parent[i]].Count, mod);
			long waysIndirect = Pow(2, requiredChildren[parent[i]].Count, mod);
			long badIndirectWays = 1;
			foreach (var directChild in directChildren[parent[i]]) {
				badIndirectWays += Pow(2, 1 + requiredChildren[directChild].Count, mod) - 1;
			}
			badIndirectWays %= mod;
			waysIndirect += mod - badIndirectWays;
			result *= (waysWithDirect + waysIndirect) % mod;
			result %= mod;

			directChildren[parent[i]].Add(i);
			var p = parent[i];
			while (p != -1) {
				requiredChildren[p].Add(i);
				p = parent[p];
			}
		}
		
		return result.ToString();
}	}

	static void Main() {		
		try {
		var t = int.Parse(Console.ReadLine());
		
		for (var i = 1 ; i <= t ; i++) {
			Console.WriteLine("Case #{0}: {1}", i, Solve());
		}
		} catch (Exception e) {
			Console.WriteLine(e);
		}
	}
}
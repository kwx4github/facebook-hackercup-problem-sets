#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <stack>
#include <sstream>
#include <cstring>
#include <numeric>
#include <ctime>

#define re return
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) ((int) (x).size())
#define rep(i, n) for (int i = 0; i < (n); i++)
#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)
#define y0 y32479
#define y1 y95874
#define fill(x, y) memset(x, y, sizeof(x))
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define unq(x) (x.resize(unique(all(x)) - x.begin()))
#define spc(i,n) " \n"[i == n - 1]

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef double D;
typedef long double LD;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;

template<class T> T abs(T x) { return x > 0 ? x : -x;}

int m;
int n;

ll mod = 1000000000 + 7;

int p[10050];

int ok[5001];

ll st(ll x, ll p) {
	ll ans = 1;
	while (p) {
		if (p & 1)
			ans = ans * x % mod;
		x = x * x % mod;
		p /= 2;
	}
	re ans;
}

int check(int x, int p) {
	if (x == p) {
		ok[x] = 1;
		re 1;
	}
	int ans = ok[::p[x]];
	ok[x] = ans;
	re ans;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int tc;
	cin >> tc;
	rep(tt, tc) {
		cout << "Case #" << tt + 1 << ": ";
		cin >> n;
		//n = 5000;
		p[0] = 0;
		rep(i, n - 1) {
			cin >> p[i + 1];
			/*p[i + 1] = 0;
			if (i < n / 2)
				p[i + 1] = i;*/
		}
		ll ans = 1;
		for (int i = 1; i < n; i++) {
			int cp = p[i];
			int c = 0;
			fill(ok, 0);
			for (int j = cp; j < i; j++)
				if (check(j, cp))
					c++;
			ll d = 1;
			if (c > 1) {
				d += (st(2, c) - c - 1 + mod) % mod;
			}
			ans = ans * d % mod;
		}
		cout << ans << endl;
	}


	re 0;
}


#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(it, (x)) cerr <<*it <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;
template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<typename T1, typename T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { out << "(" << pair.X << ", " << pair.Y << ")"; return out; }

const int N = 5005;
const int MOD = 1000000007;

int pprev[N];
vector<int> nnext[N];
int ssize[N];

LL pow(int a, int b) {
    LL res = 1;
    while(b--) {
        res = (res * a) % MOD;
    }
    return res;
}

LL mod(LL a) {
    LL res = a % MOD;
    if (res < 0) return res + MOD;
    return res;
}

void doit() {
    LL res = 1;
    int n; scanf("%d", &n);
    REP(i, n) {
        nnext[i].clear();
        if (i > 0) {
            scanf("%d", &pprev[i]);
            FORD(j, i-1, 0) {
                ssize[j] = 1;
                REP(k, SZ(nnext[j])) {
                    ssize[j] += ssize[nnext[j][k]];
                }
            }
/*
            REP(j, i) printf("%d ", ssize[j]);
            printf("\n");
*/
            int v = pprev[i];

            LL mult = pow(2, ssize[v]);
            REP(k, SZ(nnext[v])) {
                mult = mod(mult - (pow(2, ssize[nnext[v][k]]) - 1));
            }
            mult = mod(mult - 1);
 
//            printf(" === %lld %lld\n", res, mult);

//            printf(" === %lld\n", mult);

            res = mod(res * mult); 

            nnext[pprev[i]].PB(i);
        }
    }
    printf("%lld\n", res % MOD);
}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);

    int ttt; scanf("%d", &ttt);
    REP(i, ttt) {
        printf("Case #%d: ", i+1);
        doit();
    }

    return 0;
}

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

/**
 * @author Pavel Mavrin
 */
public class C {

    private static final long MOD = 1000000007;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    public C() throws FileNotFoundException {
        br = new BufferedReader(new FileReader("input.txt"));
        out = new PrintWriter("output.txt");
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            st = new StringTokenizer(br.readLine());
        }
        return st.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    public static void main(String[] args) throws IOException {
//        long res = 1;
//        for (int i = 1; i < 5000; i++) {
//            System.out.println(i - 1);
//        }
        new C().solve();
    }

    private void solve() throws IOException {
        int n = nextInt();
        for (int i = 0; i < n; i++) {
            String s = solveCase();
            out.println("Case #" + (i + 1) + ": " + s);
            System.out.println("Case #" + (i + 1) + ": " + s);
        }
        out.close();
    }

    private String solveCase() throws IOException {
        int n = nextInt();
        int[] parent = new int[n];
        long[] p2 = new long[n + 1];
        p2[0] = 1;
        for (int i = 1; i <= n; i++) {
            p2[i] = p2[i - 1] * 2;
            p2[i] %= MOD;
        }
        parent[0] = -1;
        for (int i = 1; i < n; i++) {
            parent[i] = nextInt();
        }
        Node[] v = new Node[n];
        for (int i = 0; i < n; i++) {
            v[i] = new Node();
            v[i].size = 1;
        }
        long res = 1;
        for (int i = 1; i < n; i++) {
            Node p = v[parent[i]];
            long vv = p2[p.size] - 1;
            while (vv < 0) {
                vv += MOD;
            }
            while (vv >= MOD) {
                vv -= MOD;
            }
            for (Node child : p.children) {
                vv -= p2[child.size] - 1;
                while (vv < 0) {
                    vv += MOD;
                }
                while (vv >= MOD) {
                    vv -= MOD;
                }
            }
            res *= vv;
            res %= MOD;
            p.children.add(v[i]);
            v[i].parent = p;
            while (p != null) {
                p.size++;
                p = p.parent;
            }
        }

        return "" + res;
    }

    class Node {
        List<Node> children = new ArrayList<Node>();
        Node parent;
        int size;
    }

    private String nextLine() throws IOException {
        return br.readLine();
    }

}

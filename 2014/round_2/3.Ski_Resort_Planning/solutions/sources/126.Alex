#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <set>
#include <cmath>
#include <algorithm>
#include <map>
#include <vector>

using namespace std;

typedef long long ll;
typedef long double ldb;

#define forab(i, a, b) for(int i = int(a); i < int(b); ++i)
#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define forba(i, b, a) for(int i = int(b) - 1; i >= int(a); --i)

const int MAXN = 5010;
const ll P = (ll)(1e9) + 7;

ll myPow(ll a, ll b) {
    if (b == 0)
        return 1ll;
    if (b % 2 == 1)
        return (a * myPow(a, b - 1)) % P;
    return myPow((a * a) % P, b / 2);
}

int n;
int a[MAXN];
int sz[MAXN];
vector<int> to[MAXN];
bool is_good[MAXN];

int main()
{
    //freopen("", "r", stdin);
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int T;
    cin >> T;
    forn(t, T) {
        cerr << t << '\n';
        scanf("%d", &n);
        ll ans = 1;
        forn(i, n) {
            sz[i] = 0;
            to[i].clear();
        }
        forab(i, 1, n) {
            scanf("%d", &a[i]);
            ll good_cnt = 0;
            forn(j, a[i])
                is_good[j] = 0;
            is_good[a[i]] = 1;
            forab(j, a[i] + 1, i) {
                is_good[j] = is_good[a[j]];
                if (is_good[j])
                    good_cnt++;
            }

            ll cur_ans = (myPow(2ll, good_cnt + 1) - 1 + P) % P;
            forn(j, to[a[i]].size())
                cur_ans = (cur_ans - myPow(2ll, sz[to[a[i]][j]]) + 1 + P) % P;
            ans = (ans * cur_ans) % P;

            to[a[i]].push_back(i);
            int p = i;
            sz[0]++;
            while (p != 0) {
                sz[p]++;
                p = a[p];
            }
        }


        cout << "Case #" << t + 1 << ": ";
        cout << ans << '\n';
    }
    return 0;
}

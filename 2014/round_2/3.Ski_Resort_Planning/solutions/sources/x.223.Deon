#include <iostream>
#include <ctime>
#include <fstream>
#include <cmath>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <complex>
#include <utility>
#include <cctype>
#include <list>
#include <deque>

using namespace std;

#define FORALL(i,a,b) for(int i=(a);i<=(b);++i)
#define FOR(i,n) for(int i=0;i<(n);++i)
#define FORB(i,a,b) for(int i=(a);i>=(b);--i)

typedef long long ll;
typedef long double ld;
typedef complex<ld> vec;

typedef pair<int,int> pii;
typedef map<int,int> mii;

#define pb push_back
#define mp make_pair

#define MAXN 5002
int A[MAXN];

int depends[MAXN][MAXN];	// depends[i][j] is true if i somehow depends on j

#define PRIME 1000000007
ll pw2[MAXN];

int main() {
	pw2[0] = 1;
	FORALL(i,1,MAXN-1) pw2[i] = 1ll*pw2[i-1]*2%PRIME;
	
	int TEST, N;
	cin >> TEST;
	FOR(test,TEST) {
		memset(depends,0,sizeof(depends));
		cin >> N;
		FORALL(i,1,N-1) scanf("%d",A+i);
		
		FOR(i,N) {
			FORALL(j,i+1,N-1) {
				depends[j][i] = ((A[j] == i) || depends[A[j]][i]);
				//if (depends[j][i]) cout << j << " depends on " << i << endl;
			}
		}
		
		ll ans = 1;
		
		FORALL(i,1,N-1) {
			int p = A[i]; assert(p<i);
			int cnt = 0;
			FORALL(j,0,i-1) {
				if (j==p) continue;
				if (depends[j][p]) ++cnt;
			}
			
			// with an edge
			ans = (1ll*ans*((1ll*pw2[cnt]%PRIME + pw2[cnt] - 1 - cnt+PRIME)%PRIME)%PRIME)%PRIME;
		}
		
		cout << "Case #"  << (test+1) << ": " << ans << endl;
	}
}























#pragma comment(linker, "/STACK:64000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cmath>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<vector>
#include<stack>
#include<queue>
#include<deque>
#include<string>
#include<map>
#include<set>
#include<sstream>
#include<algorithm>
#define forit(it,S) for(__typeof(S) it = (S).begin(); it != (S).end(); it++)
#define sz(x) (int)(x).size()
#define all(x) (x).begin(),(x).end()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = 5005;
const int mod = (int)1e9 + 7;
vector<int> g[maxn];
int a[maxn],T,in[maxn],out[maxn],cnt[maxn];
int dp[maxn],pw[maxn];
void dfs(int v) {
	in[v] = T++;
	cnt[v] = 1;
	for (int i = 0; i < sz(g[v]); i++) {
		int to = g[v][i];
		dfs(to);
		cnt[v] += cnt[to];
	}
	out[v] = T++;
}
int go(int v, int up) {
	int res = 1;
	for (int i = 0; i < sz(g[v]); i++) {
		int to = g[v][i];
		if (to < up) {
			res += go(to,up);
		}
	}
	return res;
}
bool cmp(int i, int j) {
	return in[i] < in[j];
}
bool upper(int a, int b) {
	return in[a] < in[b] && out[b] < out[a];
}
void solve(int Case) {
	printf("Case #%d: ",Case);
	int n; cin >> n;
	T = 0;
	for (int i = 0; i < n; i++) {
		g[i].clear();
	}	
	for (int i = 1; i < n; i++) {		
		cin >> a[i];
		g[a[i]].push_back(i);
	}
	dfs(0);
	dp[0] = 1;
	for (int i = 1; i < n; i++) {
		int add = 1;
		for (int j = 0; j < i; j++) {
			if (upper(a[i],j)) {
				add = add * 2LL % mod;
			}
		}
		int k = 0;
		int sum = 0;
		vector<int> size;
		for (int j = 0; j < sz(g[a[i]]); j++) {
			int to = g[a[i]][j];
			if (to >= i) continue;
			int current = go(to,i);
			if (current > 0) {
				size.push_back(current);
			}
		}
		int cnt0 = 1;
		int cnt1 = 0;
		for (int j = 0; j < sz(size); j++) {
			int cnt00 = 0;
			int cnt11 = 0;
			cnt00 = cnt0;
			cnt11 = (cnt0 * 1LL * ((pw[size[j]] - 1 + mod) % mod) + cnt1) % mod;
			add = (add + cnt1 * 1LL * ((pw[size[j]] - 1 + mod) % mod)) % mod;
			cnt0 = cnt00;
			cnt1 = cnt11;
		}
		dp[i] = (add * 1LL * dp[i - 1]) % mod;
		//cout << dp[i] << endl;
	}
	cout << dp[n - 1] << endl;
}
int main() {
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	pw[0] = 1;
	for (int i = 1; i < maxn; i++) {
		pw[i] = pw[i - 1] * 2LL % mod;
	}
	int Cases; cin >> Cases;
	for (int Case = 1; Case <= Cases; Case++) {
		solve(Case);
	}
	return 0;
}

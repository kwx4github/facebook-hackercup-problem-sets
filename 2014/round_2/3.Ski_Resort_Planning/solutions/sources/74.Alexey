/**
 * Created by hedgehog on 23.11.13.
 */

import java.io.BufferedReader
import java.io.PrintWriter
import java.io.FileReader
import java.util.StringTokenizer
import java.util.Locale
import java.math.BigInteger
import kotlin.math.*
import java.util.TreeSet

val inp = BufferedReader(FileReader("input.txt"))
val oup = PrintWriter("output.txt")
var stt = StringTokenizer("")

fun nextToken() : String {
    while (!stt.hasMoreTokens()) stt = StringTokenizer(inp.readLine())
    return stt.nextToken()
}

fun nextInt() = nextToken().toInt()

fun nextLong() = nextToken().toLong()

fun nextDouble() = nextToken().toDouble()

val modd = 1000000007

fun solve() {
    val n = nextInt()
    val a = IntArray(n)
    for (i in 1..n - 1) a[i] = nextInt()
    val p = IntArray(n)
    var ans = 1.toLong()
    val st2 = LongArray(5001)
    st2[0] = 1
    for (i in 1..5000) st2[i] = (st2[i - 1] * 2) % modd
    p.fill(1)
    for (i in 1..n - 1) {
        var tmp = st2[p[a[i]] - 1] - 1
        for (j in a[i] + 1 .. i - 1) {
            if (a[j] == a[i]) {
                tmp = (tmp + modd - st2[p[j]] + 1) % modd
            }
        }
        ans = (ans * (tmp + st2[p[a[i]] - 1])) % modd
        var q = a[i]
        while (q > 0) {
            p[q]++
            q = a[q]
        }
        p[0]++
    }
    oup.println(ans)
}

fun main(args: Array<String>) {
    Locale.setDefault(Locale.US);
    val t = nextInt()
    for (i in 1..t) {
        oup.print("Case #$i: ")
        solve()
    }
    oup.close()
}

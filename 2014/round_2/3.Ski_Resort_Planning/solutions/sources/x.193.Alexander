#include <stdio.h>
#include <memory.h>
#include <set>
#include <vector>

using namespace std;

int a[5005];
int lvl[5005];

int d[5005][5005];

long long mod = 1000000007;

int cmn[5005];
int moo[5005];

vector<int> ch[5005];

int getCommon(int x, int y)
{
    return cmn[y];
    while (lvl[x] > lvl[y]) x = a[x];
    while (lvl[y] > lvl[x]) y = a[y];
    while (x != y) x = a[x], y = a[y];
    return x;
}

bool p[5005];
void dfs(int id, int cur)
{
    if (p[id]) return;
    p[id] = 1;
    if (moo[id]) cur = id;

    cmn[id] = cur;
    for (size_t i = 0; i < ch[id].size(); ++ i)
    {
        dfs(ch[id][i], cur);
    }
}

int main()
{
    int tt; scanf("%d", &tt);
    for (int t = 1; t <= tt; ++ t)
    {
        fprintf(stderr, "%d\n", t);
        int n; scanf("%d", &n);
        lvl[0] = 0;
        for (int i = 1; i < n; ++ i)
        {
            ch[i].clear();
            scanf("%d", &a[i]);
            ch[a[i]].push_back(i);
            int q = a[i];
            lvl[i] = 1;
            while (q)
            {
                ++ lvl[i];
                q = a[q];
            }
        }

        long long ans = 1;
        memset(d, 0, sizeof(d));
        d[0][0] = 1;
        for (int i = 1; i < n; ++ i)
        {
            int q = i;
            memset(moo, 0, sizeof(moo));
            memset(p, 0, sizeof(p));
            while (q != 0)
            {
                moo[q] = 1;
                q = a[q];
            }
            moo[0] = 1;
            dfs(0, 0);

            ans *= (long long)d[i - 1][a[i]];
            ans %= mod;

            for (int j = 0; j < n; ++ j) {
                d[i][j] += d[i - 1][j];
                d[i][getCommon(i, j)] += d[i - 1][j];
            }
            d[i][i] += 1;
            for (int j = 0; j < n; ++ j) {
                d[i][j] %= mod;
            }
        }

        printf("Case #%d: %lld\n", t, ans);
    }

    return 0;
}


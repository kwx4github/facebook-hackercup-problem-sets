#include <iostream>
#include <cstdio>
#include <fstream>

#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <utility>
#include <string>
#include <cstring>

#include <algorithm>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cassert>
#include <memory.h>
using namespace std;

#define fr(i, n) for (int i = 0; i < (int)(n); i++)
#define fb(i, n) for (int i = n - 1; i >= 0; i--)
#define all(a) (a).begin(), (a).end()
#define _(a, b) memset(a, b, sizeof(a))
#define mp make_pair
#define pb push_back
#define sz(v) ((int)(v).size())

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

inline int ni() { int a; scanf("%d", &a); return a; }
inline double nf() { double a; scanf("%lf", &a); return a; }
template <class T> void out(T a, T b) { bool first = true; for (T i = a; i != b; i++) { if (!first) printf(" "); first = false; cout << *i; } puts(""); }
template <class T> void outl(T a, T b) { for (T i = a; i != b; i++) cout << *i << "\n"; } 

const ll MOD = 1000000007;

ll powmod (ll a, int n, int mod) {
	ll res = 1;
	while (n) {
		if (n & 1)
		{
			res *= a;
			res %= mod;
		}
		a *= a;
		a %= MOD;
		n >>= 1;
	}
	return res;
}

int T;
int N, n, l;
vi A;

vector < vector<int> > g;
vector<int> tin, tout;
int timer;
vector < vector<int> > up;

void dfs (int v, int p = 0) {
	tin[v] = ++timer;
	up[v][0] = p;
	for (int i=1; i<=l; ++i)
		up[v][i] = up[up[v][i-1]][i-1];
	for (size_t i=0; i<g[v].size(); ++i) {
		int to = g[v][i];
		if (to != p)
			dfs (to, v);
	}
	tout[v] = ++timer;
}

bool upper (int a, int b) {
	return tin[a] <= tin[b] && tout[a] >= tout[b];
}

int lca (int a, int b) {
	if (upper (a, b))  return a;
	if (upper (b, a))  return b;
	for (int i=l; i>=0; --i)
		if (! upper (up[a][i], b))
			a = up[a][i];
	return up[a][0];
}

int solve()
{            
	A.clear();
	g.clear();           	
	cin >> N;
	n = N;
	A.resize(N);
	g.resize(N);
	A[0] = -1;
	fr(i, N - 1)
	{
		cin >> A[i + 1];
		g[A[i + 1]].pb(i + 1);
	}	
	tin.resize (n),  tout.resize (n),  up.resize (n);
	l = 1;
	while ((1<<l) <= n)  ++l;
	for (int i=0; i<n; ++i)  up[i].resize (l+1);
	dfs (0);

	ll ans = 1;
	int c;
	vi p(n);
	//cerr << n << endl;
	//cout << A[3] << endl;
	for (int i = 1; i < n; i++)
	{
		c = 0;
		fr(j, i)
		{
			p[j] = lca(j, i);
			if (p[j] == A[i])
				c++;
		}
		//cout << c << endl;		
		ll new_ans = ans * powmod(2, c - 1, MOD);
		new_ans %= MOD;
		if (c > 1)
		{
			c--;
			new_ans += (ans * (powmod(2, c, MOD) - 1 - c)) % MOD;
			new_ans %= MOD;
		}
		ans = new_ans;
		//cout << ans << endl;
	}
	return ans;
}

int main() {
	freopen("input1.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	cin >> T;
	fr(test, T)
		printf("Case #%d: %d\n", test + 1, solve());
}
        
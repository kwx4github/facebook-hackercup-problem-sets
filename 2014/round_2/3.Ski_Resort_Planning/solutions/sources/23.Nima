#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;
const ll mod=1000000007LL;
int n;
int parent[5000];
vector<int> child[5000];
ll p2m1[10000];
int dfs(int v){
  int ret=1;
  for (int i=0;i<child[v].size();++i)
    ret+=dfs(child[v][i]);
  return ret;
}
int main(){
  p2m1[0]=1;
  for (int i=1;i<10000;++i)
    p2m1[i]=(p2m1[i-1]*2)%mod;
  for (int i=0;i<10000;++i)
    p2m1[i]=(p2m1[i]+mod-1)%mod;
  int tnum;cin>>tnum;int tcou=0;
  while (tnum--){
    cin>>n;
    for (int i=0;i<n;++i)
      child[i].clear();
    ll ans=1;
    for (int i=1;i<n;++i){
      cin>>parent[i];
      vector<int> nums;
      int sum=1;
      for (int j=0;j<child[parent[i]].size();++j){
        nums.push_back(dfs(child[parent[i]][j]));
        sum+=nums.back();
      }
      ll cur=p2m1[sum];
      for (int j=0;j<nums.size();++j)
        cur=(cur-p2m1[nums[j]]+mod)%mod;
      child[parent[i]].push_back(i);
      ans=(ans*cur)%mod;
    }
    cout<<"Case #"<<++tcou<<": "<<ans<<endl;
  }
  return 0;
}

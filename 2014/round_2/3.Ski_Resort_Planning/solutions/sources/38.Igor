#include<functional>
#include<algorithm>
//#include<iostream>
#include<numeric>
#include<cassert>
#include<cstring>
#include<cstdio>
#include<vector>
#include<queue>
//#include<cmath>
#include<set>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b);i>=(e);--i)
#define FOReach(it,V) for(__typeof((V).begin()) it=(V).begin();it!=(V).end();++it)

#define PB push_back
#define ALL(V) (V).begin(),(V).end()
#define SIZE(V) ((int)(V).size())

#define MP make_pair
#define ST first
#define ND second

#define DBGa

#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

int stmp;
#define scanf stmp=scanf


const int MAX = 100000;
const int INF = 1000000001;
const int MOD = 1000000007;

VI G[MAX];
int S[MAX];
int P[MAX];

LL p2[MAX];
int n;

int mask[MAX];
bool adj[11][11];

void dfs(int v, int vis) {
	vis |= 1<<v;
	mask[v] &= vis;
	FOR(i,v+1,n-1)
		if(adj[v][i])
			dfs(i, vis);
}

LL brute() {
	LL ret = 0;
	int e = n*(n-1)/2;
	REP(m,1<<e)
	{
		int t = 0;
		REP(j,n)
			REP(i,j)
			{
				if(m & (1<<t))
					adj[i][j] = true;
				else
					adj[i][j] = false;
				t++;
			}
		REP(i,n) mask[i] = (1<<(n+1))-1;
		dfs(0, 0);
		bool ok = true;
		FOR(i,1,n-1)
			if(mask[i] != (1<<(n+1))-1 && mask[i] & (1<<P[i])) {
				int tmp = mask[i] & ((1<<i)-1);
				tmp >>= (P[i]+1);
				if(tmp) ok = false;
			}
			else ok = false;
		ret += ok;
	}
	return ret;
}

int main(int argc, char *argv[]) {
	p2[0] = 1;
	FOR(i,1,MAX-1) p2[i] = p2[i-1] * 2LL % MOD;
	int Z;
	scanf("%d", &Z);
	FOR(z,1,Z)
	{
		scanf("%d", &n);
		assert(n <= MAX);
		REP(i,n) G[i].clear();
		REP(i,n) S[i] = 0;
		S[0] = 1;
		LL res = 1;
		FOR(i,1,n-1)
		{
			int a;
			scanf("%d", &a);
			assert(a < i);
			P[i] = a;
			LL k = (p2[S[a]] + MOD - 1) % MOD;
			for(int v : G[a])
			{
				debug("Sv %d %d\n", v, S[v]);
				k = (k + MOD - p2[S[v]] + 1) % MOD;
				debug("k %lld\n", k);
			
			}
			res = res * k % MOD;
			debug("res %d %lld\n", i, res);
			G[a].PB(i);
			a = i;
			while(a)
			{
				S[a]++;
				a = P[a];
			}
			S[0]++;
		}
//		printf("%lld\n", brute());
//		assert(res == brute());
		printf("Case #%d: ", z);
		printf("%lld\n", res);
	}
	return 0;
}



// Tomasz Kulczynski
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <cstdlib>
#include <numeric>
using namespace std;

#define X first
#define Y second
#define MP make_pair
#define PB push_back
typedef long long LL;
typedef double D;
typedef long double LD;
typedef vector<int> VI;
typedef pair<int,int> PII;
#define REP(i,n) for (int i=0;i<(n);++i)
#define FOR(i,a,b) for (VAR(i,a);i<=(b);++i)
#define FORD(i,a,b) for(VAR(i,a);i>=(b);--i)
#define FORE(e,v) for(VAR(e,(v).begin());e!=(v).end();++e)
#define VAR(a,b) __typeof(b) a=(b)
#define SIZE(a) ((int)(a).size())
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

const int Q = 1000000007;
const int M = 5013;
const int P = 15;
int dwa[M];

int o[M], kr[M][P], gl[M];

int sprowadz(int x, int oj) {
    FORD(j, P-1, 0)
        if(gl[kr[x][j]] > gl[oj])
            x = kr[x][j];
    return x;
}

int testcase() {
    int n;
    scanf("%d",&n);
    int ret = 1;
    REP(j, P) kr[0][j] = 0;
    o[0] = 0;
    gl[0] = 0;
    FOR(i, 1, n-1) {
        scanf("%d", &o[i]);
        kr[i][0] = o[i];
        gl[i] = gl[o[i]] + 1;
        FOR(j, 1, P-1) kr[i][j] = kr[kr[i][j-1]][j-1];
        LL x = 0;
        int k = 0;
        VI g(n, 0);
        FORD(j, i-1, o[i]+1) {
            int u = sprowadz(j, o[i]);
            if(o[u] == o[i]) {
                x += ((LL)dwa[g[u]]) * (dwa[k-g[u]] - 1) % Q;
                k++;
                g[u]++;
            }
        }
        x += dwa[k];
        x = (x % Q + Q) % Q;
        ret = x * ret % Q;
    }
    return ret;
}

int main() {
    dwa[0] = 1;
    FOR(i, 1, M-1) dwa[i] = (dwa[i-1] * 2) % Q;
    int dd;
    scanf("%d", &dd);
    FOR(ii, 1, dd) {
        printf("Case #%d: %d\n", ii, testcase());
    }
    return 0;
}

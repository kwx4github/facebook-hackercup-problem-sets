#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>

using namespace std;

typedef long long LL;

const int MOD = (int)1e9 + 7;

int T;
int n;

int a[5050];
vector<int> G[5050];

LL dp[5050][5050];

LL two[5050];

LL ways(int n)
{
	LL res = two[n] - n - 1;
	if (res < 0)
		res += MOD;
	return res;
}

LL go(int v, int cnt)
{
	if (cnt == G[v].size())
		return 1;
	LL & res = dp[v][cnt];
	if (res != -1)
		return res;
	res = 0;
	LL add = two[cnt] * go(v, cnt + 1);
	add %= MOD;
	add *= go(G[v][cnt], 0);
	add %= MOD;
	res += add;
	res %= MOD;
	if (cnt >= 2)
	{
		LL add = go(v, cnt + 1) * ways(cnt);
		add %= MOD;
		add *= go(G[v][cnt], 0);
		add %= MOD;
		res += add;
		res %= MOD;
	}
	return res;
}

int main()
{
	freopen("ski_resort_planning.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	two[0] = 1;
	for(int i = 1; i < 5050; ++i)
		two[i] = two[i - 1] * 2 % MOD;
	scanf("%d", &T);
	for(int I = 0; I < T; ++I)
	{
		scanf("%d", &n);
		for(int i = 0; i < n; ++i)
			G[i].clear();
		for(int i = 1; i < n; ++i)
		{
			int from;
			scanf("%d", &from);
			G[from].push_back(i);
		}
		memset(dp, -1, sizeof(dp));
		printf("Case #%d: %lld\n", I + 1, go(0, 0));
	}
	return 0;
}
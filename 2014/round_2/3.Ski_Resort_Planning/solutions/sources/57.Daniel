#include <stdio.h>
#include <algorithm>
#include <vector>
#include <string>
#include <string.h>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <ext/numeric>
#include <iostream>
using namespace std;
using namespace __gnu_cxx;

#define all(V) (V).begin(), (V).end()
#define rall(V) (V).rbegin(), (V).rend()
#define FORB(i, a, b) for (int i = b-1; i >= a; --i)
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define fu(i, b) FOR(i, 0, b)
#define fub(i, b) FORB(i, 0, b)
#define SZ(V) (int)(V).size()
#define pb push_back
#define TRACE(x...) x
#define PRINT(x...) TRACE(printf(x))
#define DEBUG(x) TRACE(cout << #x" = " << x << endl)
#define MSET(v, x) memset(v, x, sizeof(v))

typedef long long ll;
const int INF = 0x3f3f3f3f;
const int NINF = 0xc0c0c0c0;
const double EPS = 1e-7;
const ll MOD = 1000000007;

int cmp(double x, double y = 0, double tol = EPS) {
	return (x <= y + tol)?(x + tol < y)? -1 : 0 : 1;
}

vector<int> child[5010];
vector<int> decc[5010];
int f[5010];
ll pow2[5010];

void compute_decc(int x) {
	decc[x].pb(x);
	for (int y : child[x]) {
		compute_decc(y);
		for (int z : decc[y]) decc[x].pb(z);
	}
	sort(all(decc[x]));
}

ll ans(int x) {
	ll ret = 1ll;
	if (child[x].empty()) return 1ll;
	for (int c : child[x]) {
		ret = (ret*ans(c)) % MOD;
		if (c == child[x].front()) continue;
		ll tot = 1ll;
		ll tot2 = 1ll;
		for (int c2 : child[x]) {
			if (c2 >= c) break;
			ll qt = lower_bound(all(decc[c2]), c) - decc[c2].begin();
			tot = (tot*pow2[qt]) % MOD;
			tot2 = (( (pow2[qt] - 1) % MOD) + tot2) % MOD;
		}
		tot = (tot + tot) % MOD;
		tot = (tot - tot2) % MOD;
		tot += MOD;
		tot %= MOD;
		ret = (ret * tot) % MOD;
	}
	return ret % MOD;
}

int main() {
	int T;
	pow2[0] = 1;
	FOR(i, 1, 5010) pow2[i] = (pow2[i-1] * 2ll) % MOD;
	scanf("%d", &T);
	fu(_, T) {
		int N;
		fu(i, 5010) {child[i].clear(); decc[i].clear();}
		printf("Case #%d:", _+1);
		scanf("%d", &N);
		f[0] = 0;
		fu(i, N-1) {
			scanf("%d", &f[i+1]);
			child[f[i+1]].pb(i+1);
		}
		compute_decc(0);
		printf(" %lld\n", ans(0));
	}
	return 0;
}


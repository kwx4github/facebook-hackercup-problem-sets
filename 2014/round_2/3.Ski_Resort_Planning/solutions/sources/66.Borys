import java.io.*;
import java.util.*;

public class R2_2 {

	long mod = (long) 1e9 + 7;
	ArrayList<Integer>[] g;

	int cnt(int from, int less) {
		if (from >= less)
			return 0;
		int res = 1;
		for (int i = 0; i < g[from].size(); i++) {
			res += cnt(g[from].get(i), less);
		}
		return res;
	}

	void solveOneTest() {
		int n = in.nextInt();
		int[] a = new int[n - 1];
		for (int i = 0; i < n - 1; i++)
			a[i] = in.nextInt();
		g = new ArrayList[n];
		for (int i = 0; i < n; i++)
			g[i] = new ArrayList<>();
		for (int i = 0; i < n - 1; i++)
			g[a[i]].add(i + 1);
		long res = 1;
		long[] pow = new long[6000];
		pow[0] = 1;
		for (int i = 1; i < pow.length; i++)
			pow[i] = (pow[i - 1] * 2) % mod;
		for (int i = 1; i < n; i++) {
			int from = a[i - 1];
			ArrayList<Integer> sizes = new ArrayList<>();
			int sum = 0;
			for (int j = 0; j < g[from].size(); j++) {
				int cc = cnt(g[from].get(j), i);
				if (cc != 0)
					sizes.add(cc);
				sum += cc;
			}
			long curRes = pow[sum];
			long[][] dp = new long[3][sizes.size() + 1];
			dp[0][0] = 1;
			for (int cc = 0; cc < sizes.size(); cc++)
				for (int now = 0; now < 3; now++) {
					// not use
					dp[now][cc + 1] = (dp[now][cc + 1] + dp[now][cc]) % mod;
					// use
					dp[Math.min(2, now + 1)][cc + 1] = (dp[Math.min(2, now + 1)][cc + 1] + dp[now][cc]
							* (pow[sizes.get(cc)]-1))
							% mod;
				}
			curRes = (curRes + dp[2][sizes.size()]) % mod;
			res = (res * curRes) % mod;
		}
		out.println(res);
	}

	void solve() {
		int t = in.nextInt();
		for (int l = 0; l < t; l++) {
			out.print("Case #"+(l+1)+": ");
			solveOneTest();
		}
	}

	InputReader in;
	PrintWriter out;

	void runIO() {
		in = new InputReader(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	void run() {
		in = new InputReader(new File("input2.txt"));
		try {
			out = new PrintWriter(new File("output2.txt"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		solve();

		out.close();
	}

	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		new R2_2().run();
	}

	class InputReader {
		BufferedReader bf;
		StringTokenizer st;

		InputReader(File f) {
			try {
				bf = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		InputReader(InputStream s) {
			bf = new BufferedReader(new InputStreamReader(s));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return null;
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		boolean hasMoreElements() {
			while (!st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return false;
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
	}
}
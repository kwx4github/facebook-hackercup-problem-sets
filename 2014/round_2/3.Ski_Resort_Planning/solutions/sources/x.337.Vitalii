#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <memory.h>
#include <ctime>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;

#define sz size()
#define mp make_pair()
#define pb push_back
#define ALL(a) (a).begin(), (a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define FOR(i,a,b) for (int i(a),_b(b); i < _b; ++i)
#define RFOR(i,a,b) for (int i((a)-1),_b(b); i>=_b; --i)
#define CLR(a,x) memset((a), (x), sizeof(a))

char CHAR_BUFFER[1<<20];

int gi() {
  int x;
  scanf("%d", &x);
  return x;
}

string gs() {
  gets(CHAR_BUFFER);
  return string (CHAR_BUFFER);
}

template <class T> T gcd(T a, T b) {
  return (a == 0 ? b : gcd(b%a, a));
}
////////////////////////////////////////////////////////////////

LL mod = 1000 * 1000 * 1000 + 7;

LL dp2[111111];
LL pow2(int x) {
  LL &r = dp2[x];
  if (r != -1) return r;
  if (x==0) return r=1;
  return r=(pow2(x-1) * 2 % mod);
}

LL dp[100000];
LL rec(LL x) {
  LL &r = dp[x];
  if (r != -1) return r;
  if (x==0) return r=1;
  if (x==1) return r=1;
  r  = rec(x-1) * pow2(x-1) % mod;
  r += rec(x-1) * (pow2(x-1) - x)%mod;
  r %= mod;
  return r;
}


void solveTest() {
  int N = gi();
  VI X(N,0);
  FOR(i,1,N) X[gi()]++;
  LL res = 1;
  FOR(i,0,N) {
    res = res * rec((LL)X[i]) % mod;
  }
  cout << res << endl;
}

int main() {
  CLR(dp,-1);
  CLR(dp2,-1);
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);


  /* TEST GEN
  freopen("in.txt", "w", stdout);
  printf("1\n500 500\n"); FOR(i,0,500) printf("%s\n", string(500,'.').c_str());
  exit(0);
  //*/
  clock_t beginTime = clock();

  int numberOfTests;
  cin >> numberOfTests;
  for (int testCase = 1; testCase <= numberOfTests; ++testCase) {
    printf("Case #%d: ", testCase);
    clock_t testBeginTime = clock();
    solveTest();
    fprintf(stderr, "Test %3d: %.3lf sec\n",
        testCase,
        1.0 * (clock() - testBeginTime) / CLOCKS_PER_SEC);
  }

  fprintf(stderr, "   Total: %.3lf sec\n", 1.0 * (clock() - beginTime) / CLOCKS_PER_SEC);
  return 0;
}

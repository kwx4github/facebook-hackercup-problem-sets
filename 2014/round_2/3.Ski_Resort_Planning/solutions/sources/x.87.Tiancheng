#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxn=6000+10;
const int64 MOD=1000000007;

int n;
int p[maxn];
int l[maxn][maxn];
int64 f[maxn];
int64 g[maxn];
int q[maxn];

int64 solve()
{
	for (int a=0;a<n;a++) for (int b=0;b<n;b++)
		if (a==b) l[a][b]=a;
		else if (a>b) l[a][b]=l[b][a];
		else l[a][b]=l[a][p[b]];
	int64 ret=1;
	for (int x=1;x<n;x++)
	{
		int e=p[x];
		memset(f,0,sizeof(f));
		f[e]=1;
		int size=0;
		q[size++]=e;
		for (int k=e+1;k<x;k++) if (l[k][e]==e)
		{
			memcpy(g+e,f+e,(x-e)*sizeof(int));
			if (g[k]==0) q[size++]=k;
			g[k]=(g[k]+1)%MOD;
			for (int cl=0;cl<size;cl++)
			{
				int i=q[cl];
				int w=l[i][k];
				if (g[w]==0) q[size++]=w;
				g[w]=(g[w]+f[i])%MOD;
			}
			memcpy(f+e,g+e,(x-e)*sizeof(int));
		}
		ret=(ret*f[e])%MOD;
	}
	return ret;
}

int main()
{
	freopen("input.txt","r",stdin);
	//freopen("c.in","r",stdin); freopen("c.out","w",stdout);
	int testcase;
	scanf("%d",&testcase);
	for (int case_id=1;case_id<=testcase;case_id++)
	{
		scanf("%d",&n);
		p[0]=-1;
		for (int i=1;i<n;i++) scanf("%d",&p[i]);
		int64 ret=solve();
		cout<<"Case #"<<case_id<<": "<<ret<<endl;
		fflush(stdout);
	}
	return 0;
}


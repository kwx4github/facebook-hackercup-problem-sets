#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <cassert>
#include <cstring>
#include <ext/numeric>
#include <gmpxx.h>
using namespace std ;
using namespace __gnu_cxx ;
typedef mpz_class BIGNUM ;
typedef long long LL ;
typedef pair<int,int> PII ;
typedef vector<int> VI ;
const int INF = 1000*1000*1000 ;
const LL INFLL = (LL)INF * (LL)INF ;
#define REP(i,n) for(i=0;i<(n);++i)
#define ALL(c) c.begin(),c.end()
#define VAR(v,i) __typeof(i) v=(i)
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define CLEAR(t) memset(t,0,sizeof(t))
#define PB push_back
#define MP make_pair
#define FI first
#define SE second

LL expMod(LL a, int b, int m) {
	LL s=1 ;
	while(b>0) {
		if(b&1) s = (s*a)%m ;
		a = (a*a)%m ;
		b /= 2 ;
	}
	return s ;
}

const int MOD = 1000000007 ;

const int MAXN = 5100 ;

vector<int> graf[MAXN] ;
int prev[MAXN] ;
int r[MAXN] ;

void build(int u, int limit) {
	if(u>=limit) return ;
	else {
		r[u] = 1 ;
		FOREACH(q, graf[u]) {
			build(*q, limit) ;
			r[u] += r[*q] ;
		}
	}
}

LL calc(int u) {
	if(r[u]==0) return 0 ;
	
	LL ret=0 ;
	LL sum=0 ;
	FOREACH(q, graf[u]) {
		ret += (expMod(2, r[*q], MOD)-1) * (expMod(2, sum, MOD)-1) ;
//		cerr << "wierzcholek " << u << " ret = " << ret << endl ;
		ret %= MOD ;
		sum += r[*q] ;
	}
	FOREACH(q, graf[u]) {
		ret += calc(*q) ;
		ret %= MOD ;
	}
	return ret ;
}

int main(int argc, char* argv[])
{
	ios_base::sync_with_stdio(0) ;
	int Tests ;
	cin >> Tests ;
	for(int test=1 ; test<=Tests ; test++) {
		cerr << "Case #" << test << endl ;
		cout << "Case #" << test << ": " ;
		int n, i, a ;
		cin >> n ;
		REP(i,n) graf[i].clear() ;
		for(i=1 ; i<n ; i++) {
			cin >> a ;
			prev[i] = a ;
			graf[a].PB(i) ;
		}
		
			LL ret = 1 ;
			for(i=1 ; i<n ; i++) {
				CLEAR(r) ;
//				cerr << "prev=" << prev[i] << " i= " << i << endl ;
				build(prev[i], i) ;
//				cerr << i << " )" ;
//				for(int j=0 ; j<n ; j++) cerr << r[j] << " " ;
//				cerr << endl ;
				LL s = expMod(2, r[prev[i]]-1, MOD) ; // bierzemy samo prev
//				cerr << "s1 = " << s << endl ;
				s = (s+calc(prev[i]))%MOD ;
//				cerr << "s= " << s << endl ;
				ret = (ret*s)%MOD ;
			}
			cout << ret << endl ;
	}
}


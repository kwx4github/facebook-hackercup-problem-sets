#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <fstream>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>
#define maxn 5005
#define mod 1000000007
using namespace std;

long long p2[maxn];
int T,n;
vector<int> adj[maxn];
int numChild[maxn],prev[maxn];

void DFS(int u,int y) {	
	if (u >= y) return;
	numChild[u] = 1;
	for (int i = 0; i < adj[u].size(); i++) {
		DFS(adj[u][i],y);
		numChild[u] += numChild[adj[u][i]];
	}
}

void solveCase(int it) {
	scanf("%d", &n);
	for (int i = 1; i < n; i++) scanf("%d", &prev[i]);
	for (int i = 0; i < n; i++) adj[i].clear();
	for (int i = 1; i < n; i++) adj[prev[i]].push_back(i);
	
	long long ret = 1;
	for (int y = 1; y < n; y++) {
		memset(numChild,0,sizeof(numChild));
		int root = prev[y];				
		DFS(root,y);
		long long add = (p2[numChild[root]] + mod - 1) % mod;		
		for (int i = root + 1; i < y; i++) if (numChild[i] > 0)
			add = (add - p2[numChild[i] - 1] + mod) % mod;
		ret = (ret * add) % mod;
	}
	printf("Case #%d: %lld\n", it, ret);
}

int main() {
	p2[0] = 1;
	for (int i = 1; i < maxn; i++) p2[i] = (p2[i - 1] * 2) % mod;	
	scanf("%d", &T);
	for (int it = 1; it <= T; it++) solveCase(it);	
}

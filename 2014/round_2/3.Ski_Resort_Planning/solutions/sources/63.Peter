// solution by Peter Ondruska

#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstring>

#include <iostream>
#include <sstream>
#include <complex>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <utility>
#include <numeric>
#include <functional>
#include <algorithm>
using namespace std;

typedef pair<int,int> PII;
typedef long long ll;

#define FOR(i,n)      for(int i=0;i<(n);i++)
#define FORTO(i,a,b)  for(int i=(a);i<=(b);i++)
#define FORD(i,n)     for(int i=(n)-1;i>=0;i--)
#define FORDTO(i,a,b) for(int i=(a);i>=(b);i--)
#define FOREACH(it,t) for(typeof(t.begin()) it=t.begin(); it!=t.end(); ++it)

#define DEBUG(x) cout<<'>'<<#x<<':'<<(x)<<endl
#define SIZE(X) int(X.size())

#define MOD 1000000007LL

#define MAX 56789
int T, N, A[MAX];

ll P[MAX]; // 2^i % MOD
ll S[MAX];

ll MUL(ll X, ll Y) {
    return X * Y % MOD;
}
ll SUB(ll X, ll Y) {
    return (X-Y+MOD*MOD) % MOD;
}

ll DEC(ll X) {
    return SUB(X,1);
}

int main() {
    P[0] = 1;
    FORTO(i,1,MAX-1) P[i] = 2 * P[i-1] % MOD;
    
    scanf("%d", &T);
    FORTO(t,1,T) {
        S[0] = 1;
        
        scanf("%d", &N);
        FORTO(i,1,N-1) scanf("%d", &A[i]);
        
        ll R = 1;
        
        FORTO(i,1,N-1) {
            ll K = S[ A[i] ];
            // compute 2^K
            ll V = DEC(P[K]);
            // subtract bads
            FORTO(j,A[i]+1,i-1) {
                if (A[j] == A[i]) {
                    V = SUB(V,DEC(P[S[j]]));
                }
            }
            R = MUL(R, V);
            
            int j = i;
            S[i] = 1;
            do {
                j = A[j];
                S[j]++;
            } while(j != 0);
            
        }
        
        printf("Case #%d: %lld\n", t, R);
	}
	return 0;
}


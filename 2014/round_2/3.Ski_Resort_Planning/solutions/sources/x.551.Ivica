#include <cstdio>
#include <cstdlib>
#include <cstring>

#include <vector>
#include <algorithm>

#define MAX 5004
using namespace std;

typedef long long ll;

struct Tree {
  int parent;
  int parent_index;
  int size;
  int comb;
  vector < int > children;
};

Tree tree[MAX];
int pow2[MAX];

#define MOD 1000000007

int main(void) {
  pow2[0] = 1;
  for (int i = 1; i < MAX; ++i)
    pow2[i] = 2 * pow2[i - 1] % MOD;

  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    int N, A;

    scanf("%d", &N);

    tree[0].parent = -1;
    tree[0].comb = 1;

    for (int i = 0; i < N; ++i) {
      tree[i].size = 0;
      tree[i].children.clear();
    }

    for (int i = 1; i < N; ++i) {
      scanf("%d", &A);
      tree[i].parent = A;
      tree[i].parent_index = tree[A].children.size();
      tree[i].comb = 1;
      tree[A].children.push_back(0);

      for (int x = A, y = i; x >= 0; y = x, x = tree[x].parent) {
        ++tree[x].children[tree[y].parent_index];
        ++tree[x].size;
      }

      if (tree[A].children.size() == 1) continue;

      ll comb = pow2[tree[A].size];
      // ll old = comb;
      for (int x : tree[A].children)
        comb -= x * x;
      // printf("i=%d A=%d len=%d size=%d comb=%lld-%lld\n",
      //     i, A, (int)tree[A].children.size(), tree[A].size, old, old - comb);

      tree[i].comb = (ll)tree[i].comb * (comb % MOD + MOD) % MOD;
    }

    ll result = 1;
    for (int i = 0; i < N; ++i) {
      // printf("%d ", tree[i].comb);
      result = result * tree[i].comb % MOD;
    }
    // printf("\n");
    printf("Case #%d: %d\n", t, (int)result);
  }
  return 0;
}


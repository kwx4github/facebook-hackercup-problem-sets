import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;

public class C {	
	BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;
    
    
    long MOD = 1000000007;
    public long mod_add(long n1, long n2){
    	return (n1 + n2) % MOD;
    }    
    public long mod_min(long n1, long n2){
    	return (n1 + MOD - n2) % MOD;
    }
    public long mod_time(long n1, long n2){
    	return (n1 * n2) % MOD;
    }
    public long mod_power(long a, int k) {
        if (k == 0) return 1;
        if (k % 2 == 0) return mod_power(a * a % MOD, k / 2);
        return a * mod_power(a, k - 1) % MOD;
	}
    
    int N;
    ArrayList<Integer>[] childs;
    public void task() throws IOException {
    	N = nextInt();
    	childs = new ArrayList[N]; 
    	for (int i = 0; i < N; i++) {
    		childs[i] = new ArrayList<Integer>();
    	}
    	for (int i = 1; i < N; i++) {
    		childs[nextInt()].add(i);
    	}
    	long ans = dfs(0);
    	out.println(ans);
    }
    
    public long dfs(int cur) {
    	long ret = 1;
    	for (int c: childs[cur]) {
    		ret = mod_time(ret, dfs(c));
    	}
    	    	
    	if ( childs[cur].size() > 1) {
    		long tmp = 1;
    		
    		for (int i = 1; i < childs[cur].size(); i++) {    		
        		long tmp2 = 0;
        		if (i > 0) {
        			tmp2 = mod_power(2, i);
        		}
        		if (i >= 2) {
        			long tmp3 = mod_power(2, i);
        			tmp3 = mod_min(tmp3, i+1);
        			tmp2 = mod_add(tmp2, tmp3);
        		}
        		tmp = mod_time(tmp, tmp2);        		
        	}    	
    		ret = mod_time(ret, tmp);    		
    	}
//    	out.println(cur + ": " + ret);
    	return ret;
    }
        
	public void solve() throws IOException {
		int T = nextInt();
		for(int t = 1; t <= T; t++){
			out.print("Case #" + (t) + ": ");
			task();
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		new C().run();
	}
	
	public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

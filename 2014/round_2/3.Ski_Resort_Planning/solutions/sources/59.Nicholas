#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <numeric>
typedef long long ll;
using namespace std;
#define F0(i,n) for (i=0;i<n;i++)
#define F1(i,n) for (i=1;i<=n;i++)
#define CL(a,x) memset(x, a, sizeof(x))
#define SZ(s) ((int)s.size())
const double eps = 1e-9;
const int MOD = 1000000007;
typedef pair<int,int> pii;
int i, j, k, m, n, a[5005];
ll p2[5005], ans;
bool isp[5005][5005];
int lastp[5005][5005];
vector<int> gr[5005];

ll sub(int n)
{
	return (p2[n] - n - 1 + MOD) % MOD;
}

void go(int at, int start, int last)
{
	for (int j = 0; j < SZ(gr[at]); j++)
	{
		int k = gr[at][j];
		int next = last;
		if (last == -1) next = k;
		isp[k][start] = 1;
		lastp[k][start] = next; 
		go(k, start, next);
	}
}

void solve()
{
	CL(0,isp);
	CL(-1, lastp);
	F0(i,n)
	{
		gr[i].clear();
	}
	F1(i,n-1) gr[a[i]].push_back(i);

	for (i = 0; i < n; i++)
	{
		go(i, i, -1);
	}

	ans = 1;
	for (i = 1; i < n; i++)
	{
		int cnt = 0;
		for (j = 1; j < i; j++) if (isp[j][a[i]]) cnt++;

		ll mult = 0;

		// direct
		mult = p2[cnt];

		// indirect
		if (cnt >= 2)
		{
			mult += sub(cnt);
			map<int, int> M;
			for (j = 1; j < i; j++) if (isp[j][a[i]])
			{
				int k = lastp[j][a[i]];
				M[k]++;
			}
			for (auto x : M)
			{
				int y = x.second;
				if (y >= 2)
					mult = (mult + MOD - sub(y)) % MOD;
			}
		}
		ans = (ans * mult) % MOD;
	}
}

int main() {
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);

	p2[0] = 1;
	for (i = 1; i <= 5000; i++) p2[i] = (p2[i-1] * 2) % MOD;

	int tn; cin >> tn; for (int ti = 1; ti <= tn; ti++)
	{
		cin >> n;
		F1(i,n-1) cin >> a[i];
		solve();
		printf("Case #%d: ", ti);
		cout << ans << endl;
	}

	return 0;
} 

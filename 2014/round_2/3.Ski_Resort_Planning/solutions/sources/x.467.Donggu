#include <cstdio>
#include <string>
#include <string.h>
#include <stdint.h>
#include <unordered_set>
#include <algorithm>

#define EXIT exit(0);
#define INP(_X) scanf("%d",& _X);
#define OUT(_X) printf("%d ",_X);

#define f0(_X,_Y) for((_X)=0;(_X)<(_Y);++(_X))
#define f1(_X,_Y) for((_X)=1;(_X)<=(_Y);++(_X))
#define ff(_X,_Y,_Z) for((_X)=(_Y);(_X)<=(_Z);++(_X))
#define fF(_X,_Y,_Z) for((_X)=(_Y);(_X)<(_Z);++(_X))

#define rf0(_X,_Y) for(_X=(_Y)-1;(_X)>=0;--(_X))
#define rf1(_X,_Y) for(_X=(_Y);(_X)>0;--(_X))
#define rff(_X,_Y,_Z) for(_X=(_Y);(_X)>=(_Z);--(_X))
#define rfF(_X,_Y,_Z) for(_X=(_Y);(_X)>(_Z);--(_X))

int a[5005],list[5005][5005];
int size[5005];
const int mod =  1000000007;


int main()
{
    int t;
    int T=0;
    
    INP(t)
    while(t--)
    {
        int64_t ans = 1;
        int n,i;
        INP(n)
        a[1]=0;
        ff(i,2,n)
        {
            INP(a[i])
            ++a[i];
        }
        
        f1(i,n)
        {
            size[i]=1;
            list[i][0]=0;
        }
        ff(i,2,n)
        {
            int parent = a[i];
            list[parent][++list[parent][0]] = i;
            int64_t ways=1;
            for(int j=1;j<list[parent][0];++j)
                ways = ways*(size[list[parent][j]]+1)%mod;
            
            ans = ans*(ways*2 - (size[parent]-1) - 1)%mod;
            
            for(int j=a[i];j;j=a[j])
                ++size[j];
        }
        
        printf("Case #%d: %lld\n",++T,ans);
    }
	return 0;
}


//#include <cstdio>
//#include <string>
//#include <string.h>
//#include <stdint.h>
//#include <unordered_set>
//#include <algorithm>
//
//#define EXIT exit(0);
//#define INP(_X) scanf("%d",& _X);
//#define OUT(_X) printf("%d ",_X);
//
//#define f0(_X,_Y) for((_X)=0;(_X)<(_Y);++(_X))
//#define f1(_X,_Y) for((_X)=1;(_X)<=(_Y);++(_X))
//#define ff(_X,_Y,_Z) for((_X)=(_Y);(_X)<=(_Z);++(_X))
//#define fF(_X,_Y,_Z) for((_X)=(_Y);(_X)<(_Z);++(_X))
//
//#define rf0(_X,_Y) for(_X=(_Y)-1;(_X)>=0;--(_X))
//#define rf1(_X,_Y) for(_X=(_Y);(_X)>0;--(_X))
//#define rff(_X,_Y,_Z) for(_X=(_Y);(_X)>=(_Z);--(_X))
//#define rfF(_X,_Y,_Z) for(_X=(_Y);(_X)>(_Z);--(_X))
//
//uint64_t num_sum[203];
//uint64_t num_sum_acc[203];
//uint64_t num_sum_rev[203];
//char ans[10003];
//
//int main()
//{
//    int t;
//    int T=0;
//
//    INP(t)
//    while(t--)
//    {
//        uint64_t n,round;
//        scanf("%llu%llu",&n,&round);
//        int64_t total = (n-2)*(n-3)/2*(n-4)*(n-5)/2*(n-6)*(n-7)/2;
//        
//        int i,j;
//        
//        ff(i,1,n*2) num_sum[i]=0;
//        f1(i,n)
//            ff(j,i+1,n)
//                num_sum[i+j]++;
//        
//        ff(i,1,n*2) num_sum_acc[i] = num_sum_acc[i-1] + num_sum[i];
//        num_sum_rev[n*2]=0;
//        rff(i,n*2-1,1) num_sum_rev[i] = num_sum_rev[i+1] + num_sum[i];
//        
//        f1(i,round)
//        {
//            int c1,c2;
//            scanf("%d%d",&c1,&c2);
//            
//
//            int sum = c1+c2;
//            int64_t lose_upperbound = num_sum_rev[sum]*(n-4)*(n-5)/2*(n-6)*(n-7)/2
//                                        + num_sum_acc[sum]*num_sum_rev[sum]*(n-6)*(n-7)/2
//                                        + num_sum_acc[sum]*num_sum_acc[sum]*num_sum_rev[sum];
//            int64_t strict_win = total - lose_upperbound;
//            
//            sum = c1+c2;
//            int64_t win_upperbound = num_sum_acc[sum]*num_sum_acc[sum]*num_sum_acc[sum];
//            int64_t strict_lose = total - win_upperbound;
//            
//            if(strict_win*4 > total)
//            {
//                ans[i]='B';
//                continue;
//            }
//            if(strict_lose*4 >= total*3) // lose is >=  75%
//            {
//                ans[i]='F';
//                continue;
//            }
//            ans[i]='?';
//            
//        }
//        printf("Case #%d: %s\n",++T,ans+1);
//    }
//	return 0;
//}


//#include <cstdio>
//#include <string.h>
//#include <stdint.h>
//#include <set>
//
//#define EXIT exit(0);
//#define INP(_X) scanf("%d",& _X);
//#define OUT(_X) printf("%d ",_X);
//
//#define f0(_X,_Y) for((_X)=0;(_X)<(_Y);++(_X))
//#define f1(_X,_Y) for((_X)=1;(_X)<=(_Y);++(_X))
//#define ff(_X,_Y,_Z) for((_X)=(_Y);(_X)<=(_Z);++(_X))
//#define fF(_X,_Y,_Z) for((_X)=(_Y);(_X)<(_Z);++(_X))
//
//#define rf0(_X,_Y) for(_X=(_Y)-1;(_X)>=0;--(_X))
//#define rf1(_X,_Y) for(_X=(_Y);(_X)>0;--(_X))
//#define rff(_X,_Y,_Z) for(_X=(_Y);(_X)>=(_Z);--(_X))
//#define rfF(_X,_Y,_Z) for(_X=(_Y);(_X)>(_Z);--(_X))
//
//char a[55][55];
//
//struct D
//{
//    uint64_t hash;
//    int sy,sx,ey,ex;
//    bool operator < (const D &other) const
//    {
//        if(hash != other.hash) return hash < other.hash;
//        int i,j;
//        ff(i,sy,ey)
//            ff(j,sx,ex)
//            {
//                ;
//            }
//    }
//};
//
//int main()
//{
//    int t;
//    INP(t)
//    while(t--)
//    {
//        int n,m;
//        INP(n)
//        INP(m)
//        int i,j;
//        f1(i,n) scanf("%s",&a[i][1]);
//        f1(i,n) f1(j,m) a[i][j]-='A';
//        
//    }
//    old.insert(D{0,0});
//    for(int k=1;k<=100;++k)
//    {
//        now.clear();
//        for(auto i = old.begin(); i!= old.end(); ++i)
//        {
//            now.insert(D{i->x + k, i->y});
//            now.insert(D{i->x - k, i->y});
//            now.insert(D{i->x, i->y + k});
//            now.insert(D{i->x, i->y - k});
//        }
//        printf("k:%d, %d\n",k,(int)now.size());
//        old = now;
//    }
//	return 0;
//}

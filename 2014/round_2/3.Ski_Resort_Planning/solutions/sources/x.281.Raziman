# include <cstdio>
# include <iostream>
# include <vector>
# include <queue>
# include <algorithm>
# include <cstring>
# include <cmath>
# include <cctype>
# include <set>
# include <map>

using namespace std;

const long long MOD=1000000007;

int par[5000];

//kid[i][j]=1 iff i is an eventual kid of j
char kid[5000][5000];

//cnt[i][j] is the number of vertices in [i..j] which are kids of i
int cnt[5000][5000];

long long pow2[5001];

int main()
{
  pow2[0]=1;
  for(int i=1;i<5001;i++)
  {
    pow2[i]=pow2[i-1]<<1;
    if(pow2[i]>=MOD)pow2[i]-=MOD;
  }

  int T;
  scanf("%d",&T);
  for(int t=1;t<=T;t++)
  {
    int N;
    scanf("%d",&N);
    for(int i=1;i<N;i++)
      scanf("%d",par+i);

    memset(kid,0,sizeof kid);
    for(int i=0;i<N;i++)
      kid[i][i]=1;
    for(int i=1;i<N;i++)
      for(int j=0;j<N;j++)
        kid[i][j]|=kid[par[i]][j];

    for(int i=0;i<N;i++)
    {
      cnt[i][i]=1;
      for(int j=i+1;j<N;j++)
      {
        cnt[i][j]=cnt[i][j-1];
        if(kid[j][i])cnt[i][j]++;
      }
    }

    long long tot=1;
    for(int i=1;i<N;i++)
    {
      long long cur=(pow2[cnt[par[i]][i-1]]+MOD-1)%MOD;
      for(int j=par[i]+1;j<i;j++)
      {
        if(!kid[j][par[i]])continue;
        cur=(cur+MOD-pow2[cnt[j][i-1]]+1)%MOD;
      }
      tot=(tot*cur)%MOD;
    }
    printf("Case #%d: %Ld\n",t,tot);
  }
  return 0;
}


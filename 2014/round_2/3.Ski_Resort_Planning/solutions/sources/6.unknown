import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Locale;
import java.io.PrintStream;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("skiresortplanning.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		SkiResortPlanning solver = new SkiResortPlanning();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class SkiResortPlanning {
    static final long MODULO = (long) (1e9 + 7);

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        System.err.println("Processing " + testNumber + "...");
        int n = in.nextInt();
        int[] a = new int[n];
        a[0] = -1;
        for (int i = 1; i < n; ++i) a[i] = in.nextInt();
        boolean[][] always = new boolean[n][n];
        always[0][0] = true;
        for (int i = 1; i < n; ++i) {
            always[i][i] = true;
            for (int j = 0; j <= a[i]; ++j)
                if (always[a[i]][j]) always[i][j] = true;
        }
        int[] cnt = new int[n];
        long[] p2m1 = new long[n];
        p2m1[0] = 0;
        for (int i = 1; i < n; ++i) {
            p2m1[i] = (p2m1[i - 1] * 2 + 1) % MODULO;
        }
        long res = 1;
        for (int i = 1; i < n; ++i) {
            Arrays.fill(cnt, 0);
            for (int j = i - 1; j >= a[i]; --j) if (always[j][a[i]]) {
                ++cnt[j];
                if (j > a[i])
                    cnt[a[j]] += cnt[j];
            }
            long cur = p2m1[cnt[a[i]]];
            for (int j = i - 1; j > a[i]; --j) if (a[j] == a[i])
                cur = (cur + MODULO - p2m1[cnt[j]]) % MODULO;
            res = res * cur % MODULO;
        }
        out.println("Case #" + testNumber + ": " + res);
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    }


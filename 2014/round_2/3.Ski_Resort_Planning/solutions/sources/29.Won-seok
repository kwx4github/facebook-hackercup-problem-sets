#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <iostream>
#include <sstream>
using namespace std;

int a[5002];
int p[5002][5002];
int next[5002][5002];
int mmod = 1000000007;
int mult[5002];

int main()
{
  mult[0] = 1;
  for (int i=1; i<=5001; i++) mult[i] = (mult[i-1]*2)% mmod;
  int T;
  cin >> T;
  for (int tt=1; tt<=T; tt++) {
    int N;
    cin >> N;
    for (int i=0;i<=5001; i++) for (int j=0; j<=5001; j++) p[i][j] = next[i][j] = 0;
    for (int i=1; i<N; i++) cin >> a[i];
    p[0][0] = 1;
    for (int i=1; i<N; i++) {
      int q = i;
      do {
        if (i!=q) p[i][q] = 1;
        if (q == 0) break;
//        printf("next[%d][%d] = %d\n", i, a[q], q);
        next[i][a[q]] = q;
        q = a[q];
      } while (1);
    }
    int res = 1;
    for (int i=1; i<N; i++) {
      int now = 1;
      vector<int> V;
      for (int j=a[i]+1; j<i; j++) {
        if (p[j][a[i]]) {
          now = (now * 2) % mmod;
          V.push_back(next[j][a[i]]);
//          printf("sel : p=%d, %d -> %d\n", a[i], j, next[j][a[i]]);
        }
      }
      now = (now + mult[V.size()]) % mmod;
      now = (now - 1 - (int)V.size() + mmod) % mmod;
      sort(V.begin(), V.end());
      for (int i=0; i<V.size(); i++) {
        int j = i;
        while (j+1<V.size() && V[i] == V[j+1]) j++;
        int cnt = j-i+1;
        if (cnt >= 2) {
          now = (now - mult[cnt] + mmod) % mmod;
          now = (now + 1 + cnt) % mmod;
        }
        i = j;
      }
      fprintf(stderr, "%d\n", now);
      res = (res * (long long)now) % mmod;
    }

    printf("Case #%d: %d\n", tt, res);
  }
  return 0;
}

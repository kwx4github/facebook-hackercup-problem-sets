
#include <cassert>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <set>
#include <map>
using namespace std;
typedef long long i64;

#define fu(i,m,n) for(int i=m; i<n; i++)
#define fr(i,m,n) for(typeof(m) i=m; i!=n; ++i)
#define fa(i,c) fr(i,(c).begin(),(c).end())

i64 pow2[10001];
const i64 MOD=1000000007;
vector<i64> dp(10000);
vector<bitset<5000> > msk(5000), msk2(5000);
set<int> childs[5000];
vector<int> childv[5000];

i64 doit(int A, int B) {
	i64& ret = dp[A];
	if(ret+1) return ret;
	ret = 0;
	int cnt=1;
	fa(i,childv[A]) {
		if(*i==A) continue;
		if(*i>=B) break;
		cnt++;
		ret = (ret-doit(*i,B)+MOD)%MOD;
	}
	//for(int i=A; i<B; i++) if(msk2[A][i]) cnt++;
	ret += pow2[cnt]-1;
	//cout << A << " " << B << " " << cnt << ret << endl;
	assert(cnt);
	//for(int i=A+1; i<B; i++) if(msk2[A][i]) ret = (ret-doit(i,B)+MOD)%MOD;
	ret = ret%MOD;
	//cout << A << " " << B << " " << ret << endl;
	return ret;
}

int main(void) {
	int TS; cin >> TS;
	pow2[0]=1;
	fu(i,1,10000) pow2[i]=(2*pow2[i-1])%MOD;
	for(int ts=1; ts<=TS; ts++) {
		int N;
		cin >> N;
		vector<int> A(N);
		fu(i,1,N) cin >> A[i];
		fu(i,0,5000) childs[i].clear();
		fu(i,0,5000) childv[i].clear();
		//fu(i,0,5000) msk[i].reset();
		//fu(i,0,5000) msk2[i].reset();
		//msk[0].set(0);
		//fu(i,1,N) msk[i]|=msk[A[i]];
		//fu(i,1,N) {
			//vector<int> dp(N,-1);
			//int lo=i;
		//}
		cerr << "sets" << endl;
		for(int i=N-1; i>0; i--) {
			childs[i].insert(i);
			childs[A[i]].insert(childs[i].begin(),childs[i].end());
		}
		cerr << "vectors" << endl;
		fu(i,0,N) childv[i]=vector<int>(childs[i].begin(),childs[i].end());
		/*fu(i,0,N) {
			cout << i << ": ";
			fa(j,childv[i]) cout << *j << " "; cout << endl;
		}*/
		cerr << "done" << endl;
		//msk2[0].set(0);
		i64 ret=1;

		fu(i,1,N) {
			dp=vector<i64>(N,-1);
			ret = (ret*doit(A[i],i))%MOD;
			//fu(j,A[i]+1,i) ret = (ret-doit(j,i)+MOD)%MOD;
		}

		cout << "Case #" << ts << ": " << ret << endl;
	}
}

#pragma comment(linker, "/STACK:600000000")
#define _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>

#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <queue>
#include <stack>
#include <list>

#include <ctime>
#include <cassert>

using namespace std;

typedef long double ldb;
typedef long long int64;
typedef pair <int, int> pii;
typedef pair <double, double> pdd;

#define y0 wwwwwww
#define y1 qqqqqqq
#define next NEXT
#define prev PREV
#define forn(i, n) for (int i = 0; i < (int) n; i++)
#define ford(i, n) for (int i = (int) n - 1; i >= 0; i--)
#define seta(a, b) memset(a, b, sizeof(a))
#define pb push_back
#define all(a) (a).begin(), (a).end()
#define last(a) a[a.size() - 1]
#define mp make_pair
#define fs first
#define sc second

template <class T> T sqr(T x) { return x * x; }

double const pi = 3.1415926535897932384626433832795;
int const inf = (int) 1e9;
int64 const inf64 = (int64) 4e18;
const string name = "c";

const int NMAX = 5001;
const int P = 1000000007;

int n, p[NMAX], w[NMAX];
int64 st[NMAX + 1];
vector<int> g[NMAX], ept;

int64 calc(const vector<int>& ept) {
	int sum = 0;
	forn(i, ept.size())
		sum += ept[i];
	if (ept.size() <= 1) return 0;

	int64 res = (st[sum] + P - 1) % P;
	forn(i, ept.size())
		res = (res + P - (st[ept[i]] - 1)) % P;
	return res;
}

void solve() {
	cin >> n;
	forn(i, n)
		g[i].clear();
	forn(i, n - 1) {
		cin >> p[i + 1];
		g[p[i + 1]].pb(i + 1);
	}

	st[0] = 1;
	forn(i, NMAX - 1)
		st[i + 1] = (st[i] * 2) % P;
	int64 ans = 1;
	seta(w, 0);
	forn(i, n) {
		if (i) {
			ept.clear();
			forn(j, g[p[i]].size())
				if (g[p[i]][j] < i) ept.pb(w[g[p[i]][j]]);
			int64 now = calc(ept);
			ans = (ans * (now + st[w[p[i]] - 1])) % P;
		}

		int idx = i;
		while (idx > 0) {
			w[idx]++;
			idx = p[idx];
		}
		w[idx]++;
	}
	cout << ans << endl;
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen((name + ".in").data(), "r", stdin);
	freopen((name + ".out").data(), "w", stdout);
#endif

/*	cout << 5000 << endl;
	forn(i, 5000)
		cout << 0 << endl;
	exit(0);*/

	int tst;
	cin >> tst;
	forn(i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
		cerr << clock() << endl;
	}

	return 0;
}
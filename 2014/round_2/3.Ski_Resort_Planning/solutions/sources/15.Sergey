#pragma comment(linker, "/STACK:60000000")
#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <sstream>
#include <iomanip>
#include <complex>
#include <queue>
#include <functional>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)
#define next NEXTHUI
#define prev PREVHUI
#define y1 Y1HUI

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}

const int64 P = 1000000007;

int n;
int p[5050];
int s[5050];
vector<int> g[5050];

int64 power(int64 a, int64 b) {
	int64 res = 1;
	while (b) {
		if (b & 1)
			res = res * a % P;
		a = a * a % P;
		b >>= 1;
	}
	return res;
}

int64 calc(int v) {
	int par = p[v];
	int64 res = power(2, s[par]) - 1;
	forn(i, g[par].size())
		res = (res - power(2, s[g[par][i]]) + 1) % P; 
	res = (res + P) % P;	
	return res;
}

void update(int v) {
	g[p[v]].pb(v);
	while (v >= 0) {
		s[v]++;
		v = p[v];		
	}
}

int64 solve() {
	scanf("%d", &n);
	forn(i, n)
		g[i].clear();
	p[0] = -1;
	seta(s, 0);
	s[0] = 1;
	forn(i, n-1)
		scanf("%d", &p[i+1]);	
	int64 res = 1;
	for (int i = 1; i < n; i++) {
		res = res * calc(i) % P;
		update(i);
	}
	return res;
}

int main ()
{
//	freopen ("input.txt", "r", stdin);
//	freopen ("output.txt", "w", stdout);
	int tt;
	cin >> tt;
	forn(ii, tt) {
		printf("Case #%d: %I64d\n", ii + 1, solve());
	}	
	return 0;
}

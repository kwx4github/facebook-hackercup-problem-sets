#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <algorithm>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define SZ(a) (int)(a).size()
#define FOR(i,a,b) for (int i=(a); i<=(b); ++i)
#define REP(i,n) for (int i=0; i<(n); ++i)
#define ALL(c) c.begin(), c.end()
typedef vector<int> VI;
typedef pair<int, int> PII;
#define CLR(c,n) memset(c,n,sizeof(c))
template <class T> void checkmin(T &a, T b) { if (b<a) a=b; }
template <class T> void checkmax(T &a, T b) { if (b>a) a=b; }
#define TR(it, container) for(typeof(container.begin()) it = container.begin();\
it != container.end(); it++)
#define CONTAIN(it, container) (container.find(it)!=container.end())

const int N=5000;
int prevp[N], p[N];
const long MOD=1000000007;
const long MOD2=MOD - 1;
long ans[N], ans2[N];
long pow2(long n) {
  long ans = 1, x = 2;
  while (n) {
    if (n % 2) ans = ans * x % MOD;
    n /= 2;
    x = x * x % MOD;
  }
  return ans;
}

int main(int argc, char *argv[]) {
  int tc, n; cin >> tc;
  FOR(ic, 1, tc) {
    cin >> n;
    FOR(i, 1, n-1) cin >> prevp[i];
    memset(p, 0, sizeof(p)); p[0] = 1;
    ans[0] = ans2[0] = 1;
    long cnt = 1;
    FOR(i, 1, n-1) {
      ans[i] = (pow2(p[prevp[i]]) + MOD - p[prevp[i]]) % MOD;
      ++p[prevp[i]]; ++p[i];
      cnt = cnt * ans[i] % MOD;
    }
    printf("Case #%d: %ld\n", ic, cnt);
  }
}

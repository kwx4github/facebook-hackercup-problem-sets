/*
 * in the name of god
 *
 *
 *
 *
 *
 *
 *
 *
 */

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <bitset>
#include <iomanip>
#include <utility>

using namespace std;

typedef long long LL;
typedef pair<int,int> pii;
typedef complex<double> point;

int n,h;
int a,b;
int func[1<<20],sum[1<<20],cnt[1<<20];

bool inside (int lo, int hi, int x) { return x>=lo && x<=hi; }

int get (int a, int b, int c){
	if (a > b) swap(a,b);
	if (a > c) swap(a,c);
	if (b > c) swap(b,c);
	if (a < 1) return 0;
	if (b < 2) return 0;
	if (c < 3) return 0;
	return a * (b-1) * (c-2);
}

string main2(){
	cin >> n >> h;
	string ans(h, '?');
	for (int o=0; o<h; o++){
		cin >> a >> b;
		if (a > b) swap(a,b);
		int S = a + b;
		int limit = min(n, S-1);
		LL ret = 0;
		LL total = (n-2LL) * (n-3LL) * (n-4LL) * (n-5LL) * (n-6LL) * (n-7LL) / 48LL;
		for (int i=1; i<=n; i++){
			func[i] = min(i-1, S-i-(i>b));
			cnt[i] = func[i] - (func[i]>=a) - (func[i]>=b);
		}
		for (int i=2; i<=limit; i++) if (i!=a && i!=b){
			int t0 = cnt[i];
			for (int j=i+1; j<=limit; j++) if (j!=a && j!=b){
				int t1 = cnt[j] - (func[j]>=i);
				for (int k=j+1; k<=limit; k++) if (k!=a && k!=b){								
					int t2 = cnt[k] - (func[k]>=i) - (func[k]>=j);
					ret+= get(t0, t1, t2);
				}
			}
		}
		ans[o] = (ret * 4LL > total) ? ('B') : ('F');

		/*
		for (int i=1; i<=n; i++){
			func[i] = min(i-1, S-i-(i>b));
			func[i]-= (func[i]>=a) + (func[i]>=b);
		}
		sum[0] = 0;
		for (int i=1; i<=n; i++)
			sum[i] = sum[i-1] + func[i];
		LL ret = 0;
		LL total = (n-2LL) * (n-3LL) * (n-4LL) * (n-5LL) * (n-6LL) * (n-7LL) / 48LL;
		for (int i=2; i<=n; i++) if (i!=a && i!=b)
			for (int j=i+1; j<=n; j++) if (j!=a && j!=b){
				vector <int> event;
				event.push_back(2);
				event.push_back(n+1);
				event.push_back((a+b+1)/2);
				event.push_back(a); event.push_back(a+1);
				event.push_back(b); event.push_back(b+1);
				event.push_back(min(i-1,S-i-(i>b)));
				event.push_back(min(j-1,S-j-(j>b)));
				event.push_back(i); event.push_back(i+1);
				event.push_back(j); event.push_back(j+1);
				sort(event.begin(), event.end());
				event.resize(unique(event.begin(), event.end())-event.begin());
				for (int k=0; k<(int)event.size()-1; k++) if (event[k]>1 && event[k]<=n && event[k]!=a && event[k]!=b && event[k]!=i && event[k]!=j){
					int len = event[k+1] - event[k];
					int tot = sum[event[k+1]-1] - sum[event[k]-1];
					int t0 = func[i];
					int t1 = func[j]; if (t1>=i) t1--;
					if (t0 > t1) swap(t0,t1);
					int less = (func[event[k]]>=i) + (func[event[k]]>=j);
					int t2 = func[event[k]] - less;
					if (!good(t0, t1, t2)){
						event[k]++;
						if (event[k] == event[k+1]) continue;
						if (func[event[k]] <= func[event[k-1]]) continue;
					}

					if (t2 <= t0){
						ret+= (tot - less * len) * max(0LL,t0-1LL) * max(0LL,t1-2LL);
					}else if (t2 <= t1){
						ret+= (tot - less * len - len) * t0 * max(0LL,t1-2LL);
					}else{
						ret+= (tot - less * len - len - len) * t0 * max(0LL,t2-1LL);
					}
				}
			}
		cerr << "------- " << n << ' ' << a << ' ' << b << " : " << total << ' ' << ret << endl;
		*/
	}
	return ans;
}

int main(){
	int tt; cin >> tt;
	for (int o=1; o<=tt; o++)
		cout << "Case #" << o << ": " << main2() << endl;
	return 0;
}

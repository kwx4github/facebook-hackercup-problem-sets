import java.io.*;
import java.util.*;

public class R2_2 {

	int[][] ans = new int[][] { { 2, 8 }, { 2, 9 }, { 5, 8 }, { 5, 9 },
			{ 5, 10 }, { 4, 12 }, { 4, 13 }, { 3, 15 }, { 3, 16 }, { 9, 12 },
			{ 8, 14 }, { 8, 15 }, { 7, 17 }, { 6, 19 }, { 5, 21 }, { 4, 23 },
			{ 13, 16 }, { 12, 18 }, { 11, 20 }, { 10, 22 }, { 9, 24 },
			{ 7, 27 }, { 6, 29 }, { 17, 20 }, { 15, 23 }, { 14, 25 },
			{ 12, 28 }, { 11, 30 }, { 9, 33 }, { 7, 36 }, { 21, 24 },
			{ 19, 27 }, { 18, 29 }, { 15, 33 }, { 14, 35 }, { 11, 39 },
			{ 9, 42 }, { 25, 28 }, { 23, 31 }, { 21, 34 }, { 18, 38 },
			{ 16, 41 }, { 13, 45 }, { 11, 48 }, { 8, 52 }, { 27, 35 },
			{ 25, 38 }, { 22, 42 }, { 19, 46 }, { 16, 50 }, { 13, 54 },
			{ 9, 59 }, { 31, 39 }, { 29, 42 }, { 25, 47 }, { 22, 51 },
			{ 18, 56 }, { 15, 60 } };

	ArrayList<Cards> cards;

	void solveOneTest() {
		int n = in.nextInt();
		int m = in.nextInt();
		cards = new ArrayList<>();
		for (int i = 1; i <= n; i++)
			for (int j = i + 1; j <= n; j++)
				cards.add(new Cards(i, j));
		Collections.sort(cards);
		for (int i = 0; i < m; i++) {
			int c1 = in.nextInt();
			int c2 = in.nextInt();
			if (ok2(n, c1, c2)) {
				out.print("B");
			} else {
				out.print("F");
			}
		}
		out.println();
	}

	class Cards implements Comparable<Cards> {
		int c1, c2;

		Cards(int c1, int c2) {
			this.c1 = c1;
			this.c2 = c2;
		}

		@Override
		public String toString() {
			return "{" + c1 + ", " + c2 + "},";
		}

		@Override
		public int compareTo(Cards o) {
			if (c1 + c2 != o.c1 + o.c2)
				return Integer.compare(c1 + c2, o.c1 + o.c2);
			return Integer.compare(Math.max(c1, c2), Math.max(o.c1, o.c2));
		}
	}

	boolean ok2(int n, int c1, int c2) {
		int alrNow = ans.length;
		int n2 = n - 8;
		if (n2 < alrNow) {
			int cc1 = ans[n2][0];
			int cc2 = ans[n2][1];
			if (c1 + c2 > cc1 + cc2)
				return true;
			if (c1 + c2 < cc1 + cc2)
				return false;
			return Math.max(c1, c2) >= cc2;
		}
		Cards need = new Cards(Math.min(c1, c2), Math.max(c1, c2));
		int l = 0, r = cards.size();
		while (r - l > 1) {
			int m = (l + r) >> 1;
			if (need.compareTo(cards.get(m)) <= 0) {
				l = m;
			} else {
				r = m;
			}
		}
		long m = cards.size();
		Cards cc = cards.get(l);
		long ll = l;
		if (true) {
			long total = (m - 1) * (m - 2) * (m - 3);
			long ok = (ll - 1) * 1L * (ll - 2) * 1L * (ll - 3);
			if (ok * 4 > total) {
				return true;
			} else {
				return false;
			}
		}

		return false;
	}

	// void stress() {
	// // for (int i = 0; i < ans.length; i++) {
	// // System.err.println(ans[i][0] / (0. + ans[i][0] + ans[i][1]));
	// // }
	// int n = 10;
	//
	// }

	void solve() {
		// stress();

		int t = in.nextInt();
		for (int l = 0; l < t; l++) {
			out.print("Case #" + (l + 1) + ": ");
			solveOneTest();
		}

	}

	InputReader in;
	PrintWriter out;

	void runIO() {
		in = new InputReader(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	void run() {
		in = new InputReader(new File("input2.txt"));
		try {
			out = new PrintWriter(new File("output2.txt"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		solve();

		out.close();
	}

	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		new R2_2().run();
	}

	class InputReader {
		BufferedReader bf;
		StringTokenizer st;

		InputReader(File f) {
			try {
				bf = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		InputReader(InputStream s) {
			bf = new BufferedReader(new InputStreamReader(s));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return null;
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		boolean hasMoreElements() {
			while (!st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return false;
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
	}
}
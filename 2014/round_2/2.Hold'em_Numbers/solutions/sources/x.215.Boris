#include <iostream>
#include <cstring>
#include <cstdio>

using namespace std;

int n, h;
int c1, c2;
long long C[105][10];
long long mark[4][105][105][105];
double mem[4][105][105][105];

bool better(int a1, int b1, int a2, int b2) {
    int sum1 = a1 + b1;
    int sum2 = a2 + b2;
    if (sum1 != sum2) return sum1 > sum2;
    return max(a1, b1) > max(a2, b2);
}

long long calc(int n, int c1, int c2, int tmp, int left) {
    int a = n - 2;
    if (c1 < n) --a;
    if (c2 < n) --a;
    a -= tmp;
    return C[a][left];
}

long long solve(int left, int n, int c1, int c2) {
    if (left == 0 || n == 0) return 0;
    if (mark[left][n][c1][c2]) return mem[left][n][c1][c2];
    mark[left][n][c1][c2] = true;
    mem[left][n][c1][c2] = 0;
    if (c1 != n && c2 != n) {
        int good = 0;
        int bad = 0;
        for (int i = n - 1; i >= 1; --i) {
            if (i == c1 || i == c2) continue;
            if (better(n, i, c1, c2)) ++good;
            else ++bad;
        }
        bad -= (3 - left);
        mem[left][n][c1][c2] = good * calc(n, c1, c2, (3 - left), left - 1);
        if (bad != 0) {
            mem[left][n][c1][c2] += bad * solve(left - 1, n - 1, c1, c2);
        }
        mem[left][n][c1][c2] += solve(left, n - 1, c1, c2);
        return mem[left][n][c1][c2];
    } else {
        return solve(left, n - 1, c1, c2);
    }
}

int main() {
    for (int i = 0; i <= 100; i += 2) C[i][0] = 1;
    for (int i = 2; i <= 100; i++)
        for (int j = 1; j <= min(4, i); ++j) {
            C[i][j] = C[i - 1][j] + C[i - 2][j - 1] * (long long)(i - 1);
        }
    memset(mark, 0, sizeof(mark));
    int tests; scanf("%d", &tests);
    for (int test_id = 1; test_id <= tests; ++test_id) {
        scanf("%d%d", &n, &h);
        printf("Case #%d: ", test_id);
        for (int i = 0; i < h; ++i) {
            scanf("%d%d", &c1, &c2);
            long long a = C[n - 2][3] - solve(3, n, c1, c2);
            long long b = C[n - 2][3];
            if (3LL * a > b) printf("B");
            else printf("F");
        }
        printf("\n");
    }
    return 0;
}

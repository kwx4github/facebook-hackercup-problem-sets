#include <stdio.h>
#include <algorithm>
#include <set>
#include <vector>
#include <memory.h>

typedef long long LL;
using namespace std;

class PAIR {
public:
	PAIR(int _x, int _y) : x(_x), y(_y) {

	}
	int x, y;
	const bool operator < (const PAIR p) const {
		if (x + y == p.x + p.y) return max(x, y) < max(p.x, p.y);
		return x + y < p.x + p.y;
	}
};

vector<PAIR> P;
bool chk[128];
int hx[128][128];
int ccc[128];
LL test(int N, int m) {
	memset(chk, 0, sizeof(chk));
	memset(hx, 0, sizeof(hx));
	memset(ccc, 0, sizeof(ccc));
	LL pos = 0;
	LL res = 0;
	PAIR p = P[m];
	for (int i = 0; i < m; i++) {
		if (P[i] < p) {
			ccc[P[i].x] ++;
			ccc[P[i].y] ++;
			hx[P[i].x][P[i].y] = 1;
			pos++;
		}
	}
	pos = pos - ccc[p.x] - ccc[p.y];
	chk[p.x] = true;
	chk[p.y] = true;
	for (int i = 0; i < m; i++) {
		PAIR q = P[i];
		if (chk[q.x] || chk[q.y]) continue;
		chk[q.x] = chk[q.y] = true;
		LL qos = pos - ccc[q.x] - ccc[q.y] +
			(hx[p.x][q.x] + hx[p.x][q.y] +
			hx[p.y][q.x] + hx[p.y][q.y] +
			hx[q.x][q.y])*2;
		for (int j = 0; j < m; j++) {
			PAIR r = P[j];
			if (chk[r.x] || chk[r.y]) continue;
			LL ros = qos - ccc[r.x] - ccc[r.y] +
				(hx[p.x][r.x] + hx[p.x][r.y] +
				hx[p.y][r.x] + hx[p.y][r.y] +
				hx[q.x][r.x] + hx[q.x][r.y] +
				hx[q.y][r.x] + hx[q.y][r.y] +
				hx[r.x][r.y])*2;
			res += ros;
		}
		chk[q.x] = chk[q.y] = false;
	}
	return res;
}

int psol[200] = { 1, 7, 1, 8, 4, 7, 4, 8, 4, 9, 3, 11, 3, 12, 2, 14, 2, 15, 8, 11, 7, 13, 14, 7, 16, 6, 18, 5, 4, 20, 3, 22, 15, 12, 11, 17, 10, 19, 9, 21, 8, 23, 26, 6, 5, 28, 16, 19, 22, 14, 24, 13, 11, 27, 29, 10, 8, 32, 35, 6, 23, 20, 26, 18, 17, 28, 32, 14, 13, 34, 38, 10, 8, 41, 27, 24, 22, 30, 20, 33, 17, 37, 15, 40, 12, 44, 10, 47, 7, 51, 26, 34, 37, 24, 41, 21, 45, 18, 15, 49, 53, 12, 58, 8, 38, 30, 41, 28, 46, 24, 21, 50, 55, 17, 14, 59, 10, 64, 35, 41, 46, 31, 28, 50, 55, 24, 60, 20, 65, 16, 70, 12, 45, 39, 50, 35, 31, 55, 27, 60, 23, 65, 70, 19, 14, 76, 48, 44, 53, 40, 35, 59, 64, 31, 26, 70, 21, 76, 16, 82, 52, 48, 57, 44, 63, 39, 69, 34, 29, 75, 81, 24, 18, 88, 94, 13, 48, 61, 43, 67, 38, 73, 80, 32, 27, 86};
int main() {
	/*
	for (int N = 8; N <= 100; N++) {
		fprintf(stderr, "%d\n", N);
		P.clear();
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (i != j) P.push_back(PAIR(i, j));
			}
		}
		sort(P.begin(), P.end());
		int s, e, m;
		s = 0; e = (int)P.size() - 1;
		long long all = (LL)(N - 2)*(N - 3)*(N - 4)*(N - 5)*(N - 6)*(N - 7);
		while (s <= e) {
			m = (s + e) / 2;
			LL count = test(N, m);
			if (count * 4 > all) {
				e = m - 1;
			}
			else {
				s = m + 1;
			}
		}
		printf("%d,%d,", P[e + 1].x, P[e + 1].y);
	}
	return 0;
	*/
	freopen("holdem_numbers.txt", "r", stdin);
	freopen("holdem_numbers.out", "w", stdout);
	int T;
	scanf("%d", &T);
	int N, H;
	char sol[11111];
	while (T-- > 0) {
		scanf("%d %d", &N, &H);
		static int cs = 1;
		int s = (N - 8)*2;
		PAIR tt = PAIR(psol[s], psol[s + 1]);
		for (int i = 0; i < H; i++) {
			int X, Y;
			scanf("%d %d", &X, &Y);
			X--; Y--;
			if (PAIR(X, Y) < tt) sol[i] = 'F';
			else sol[i] = 'B';
		}
		sol[H] = '\0';
		printf("Case #%d: %s\n", cs++, sol);
	}
	return 0;
}
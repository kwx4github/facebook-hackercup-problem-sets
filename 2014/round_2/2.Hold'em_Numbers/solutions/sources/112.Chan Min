#include <stdio.h>
#include <algorithm>
#include <string>

using namespace std;

int v[200];
int rec(int a1, int b1, int ind, int n) {
	if (ind == 3) {
		return 1;
	}
	int ans = 0;
	for(int i = 1; i <= n; i++) {
		if (v[i]) continue;
		v[i] = 1;
		for(int j = i+1; j <= n; j++) {
			if (v[j]) continue;
			v[j] = 1;
			if (i + j < a1 + b1 || (i+j == a1+b1 && j < b1)) {
				ans += rec(a1,b1,ind+1,n);
			}
			v[j] = 0;
		}
		v[i] = 0;
	}
	return ans;
}

int matrix[102][102];
int deg[102];

int main(){
	int T;
	//for(int n = 8; n <= 8; n++) {
	//	long long totalCounts = 1;
	//	for(int i = 0;i < 6; i++){
	//		totalCounts *= (n-2-i);
	//	}
	//	totalCounts /= 2;
	//	totalCounts /= 2;
	//	totalCounts /= 2;
	//	totalCounts /= 6;
	//		printf("%d: ",n);
	//	for(int a1 = 1; a1 <= n; a1++) {
	//		int seq[200]={0,},cnt = 0;
	//		for(int b1 = a1+1; b1 <= n; b1++) {
	//			v[a1] = v[b1] = 1;
	//			seq[cnt++] = rec(a1,b1,0,n)/6;
	//			v[a1] = v[b1] = 0;
	//		}
	//		seq[0]=seq[0];
	//	}
	//	printf("\n");
	//}
	scanf("%d",&T);
	for(int testcase = 1; testcase <= T; testcase++) {
		int n;
		int h;
		scanf("%d%d",&n,&h);
		string ans;
		long long totalCounts = 1;
		for(int i = 0;i < 6; i++){
			totalCounts *= (n-2-i);
		}
		totalCounts /= 2;
		totalCounts /= 2;
		totalCounts /= 2;
		totalCounts /= 6;
		while(h-->0){
			int c1,c2;
			scanf("%d%d",&c1,&c2);
			if(c1>c2)swap(c1,c2);
			memset(matrix,0,sizeof(matrix));
			memset(deg,0,sizeof(deg));
			long long validPairs = 0;
			for(int i = 1; i <= n; i++) {
				if (i == c1 || i == c2) continue;
				for(int j = i+1; j <= n; j++) {
					if ( j == c1 || j == c2) continue;
					if (i+j < c1+c2 || (i+j == c1+c2 && max(i,j) < c2)) {
						matrix[i][j] = 1;
						matrix[j][i] = 1;
						deg[i]++;
						deg[j]++;
						validPairs++;
					}
				}
			}
			long long sum = 0;/*
			long long dk2 = 0;
			long long dk = 0;
			static long long mk[102];
			static long long mkdk[102];
			for(int k = 1; k <= n; k++) {
				dk += deg[k];
				dk2 += deg[k]*deg[k];
			}
			for(int i = 1; i <= n; i++) {
				for(int k = 1; k <= n; k++) {
					mk[i] += matrix[i][k];
					mkdk[i] += matrix[i][k] * deg[k];
				}
			}*/
			for(int i = 1; i <= n; i++) {
				for(int j = i+1; j <= n; j++) {
					if (matrix[i][j] == 0) continue;
					int rest = validPairs - deg[i] - deg[j] + 1;
					sum += rest * (rest-1) / 2;
					for(int k = 1; k <= n; k++) {
						if (k == i || k == j) continue;
						int tmp = (deg[k]-matrix[i][k]-matrix[k][j]);
						sum -= tmp * (tmp-1) / 2;
					}
				}
			}
			sum /= 3;
			if (sum*(4) > totalCounts){
				ans.push_back('B');
			} else {
				ans.push_back('F');
			}
		}
		printf("Case #%d: %s\n", testcase, ans.c_str());
	}
	return 0;
}

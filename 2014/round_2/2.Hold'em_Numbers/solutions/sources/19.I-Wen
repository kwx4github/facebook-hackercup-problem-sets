#include<stdio.h>
#include<string>
#include<math.h>
#include<stdlib.h>
#include<set>
#include<bitset>
#include<map>
#include<vector>
#include<string.h>
#include<algorithm>
#include<iostream>
#include<queue>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define REPC(I, C) for (int I = 0; !(C); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define F first
#define S second
using namespace std;
struct PP{
    int x,y;
    PP(int _x=0,int _y=0):x(_x),y(_y){}
    bool operator<(const PP& b)const{
        return x+y<b.x+b.y||(x+y==b.x+b.y&&y<b.y);
    }
    bool conflict(const PP& b)const{
        return x==b.x||x==b.y||y==b.x||y==b.y;
    }
}p[5050];
int n,pn,cs;
long long cnt[101][101];
long long dp[5000000];
char used[5000000];
void inc(int id){
    if(used[id]!=cs){used[id]=cs;dp[id]=1;}
    else dp[id]++;
}
inline int get_id(int x,int y,int z,int w){
    return 166750+(w-1)*(w-2)*(w-3)*(w-4)/24+(z-1)*(z-2)*(z-3)/6+(y-1)*(y-2)/2+x;
}
// x<y<z
inline int get_id(int x,int y,int z){
    return 5050+(z-1)*(z-2)*(z-3)/6+(y-1)*(y-2)/2+x;
}
//x<y
inline int get_id(int x,int y){
    return 100+(y-1)*(y-2)/2+x;
}
inline int get_id(int x){
    return x;
}
void add(int d[]){
    int id;
    id=get_id(d[0]);
    inc(id);
    id=get_id(d[1]);
    inc(id);
    id=get_id(d[2]);
    inc(id);
    id=get_id(d[3]);
    inc(id);
    id=get_id(d[0],d[1]);
    inc(id);
    id=get_id(d[0],d[2]);
    inc(id);
    id=get_id(d[0],d[3]);
    inc(id);
    id=get_id(d[1],d[2]);
    inc(id);
    id=get_id(d[1],d[3]);
    inc(id);
    id=get_id(d[2],d[3]);
    inc(id);
    id=get_id(d[0],d[1],d[2]);
    inc(id);
    id=get_id(d[0],d[1],d[3]);
    inc(id);
    id=get_id(d[0],d[2],d[3]);
    inc(id);
    id=get_id(d[1],d[2],d[3]);
    inc(id);
    id=get_id(d[0],d[1],d[2],d[3]);
    inc(id);
}
inline long long get_value(int id){
    if(used[id]!=cs)return 0;
    else return dp[id];
}
int main(){
    int T;scanf("%d",&T);
    while(T--){
        cs++;
        MS0(cnt);
        DRII(N,H);
        pn=0;
        for(int i=2;i<=N+N;i++)
            for(int j=((i-1)>>1);i-j<=N&&j>0;j--)p[pn++]=PP(j,i-j);
        //REP(i,pn)printf("(%d,%d)\n",p[i].x,p[i].y);
        int now=0;
        for(int i=1;i<pn-2;i++){
            for(int j=0;j<i;j++){
                if(p[i].conflict(p[j]))continue;
                int d[4]={p[i].x,p[i].y,p[j].x,p[j].y};
                sort(d,d+4);
                add(d);
                now++;
            }
            for(int j=i+2;j<pn;j++){
                if(p[i+1].conflict(p[j]))continue;
                int d[4]={p[i+1].x,p[i+1].y,p[j].x,p[j].y};
                sort(d,d+4);
                int id;
                cnt[p[j].x][p[j].y]+=now;
                id=get_id(d[0]);
                cnt[p[j].x][p[j].y]-=get_value(id);
                id=get_id(d[1]);
                cnt[p[j].x][p[j].y]-=get_value(id);
                id=get_id(d[2]);
                cnt[p[j].x][p[j].y]-=get_value(id);
                id=get_id(d[3]);
                cnt[p[j].x][p[j].y]-=get_value(id);

                id=get_id(d[0],d[1]);
                cnt[p[j].x][p[j].y]+=get_value(id);
                id=get_id(d[0],d[2]);
                cnt[p[j].x][p[j].y]+=get_value(id);
                id=get_id(d[0],d[3]);
                cnt[p[j].x][p[j].y]+=get_value(id);
                id=get_id(d[1],d[2]);
                cnt[p[j].x][p[j].y]+=get_value(id);
                id=get_id(d[1],d[3]);
                cnt[p[j].x][p[j].y]+=get_value(id);
                id=get_id(d[2],d[3]);
                cnt[p[j].x][p[j].y]+=get_value(id);

                id=get_id(d[0],d[1],d[2]);
                cnt[p[j].x][p[j].y]-=get_value(id);
                id=get_id(d[0],d[1],d[3]);
                cnt[p[j].x][p[j].y]-=get_value(id);
                id=get_id(d[0],d[2],d[3]);
                cnt[p[j].x][p[j].y]-=get_value(id);
                id=get_id(d[1],d[2],d[3]);
                cnt[p[j].x][p[j].y]-=get_value(id);

                id=get_id(d[0],d[1],d[2],d[3]);
                cnt[p[j].x][p[j].y]+=get_value(id);
                //if(p[j].x==7&&p[j].y==8)printf("[%d,%d]:%lld | %d\n",p[i].x,p[i].y,cnt[7][8],now);
            }
        }
        vector<char>an;
        long long sum=(long long)(N-2)*(N-3)*(N-4)*(N-5)*(N-6)*(N-7)/48;
        while(H--){
            DRII(x,y);
            if(x>y)swap(x,y);
            //printf("[%lld %lld]\n",cnt[x][y],sum);
            if(cnt[x][y]*4>sum)an.PB('B');
            else an.PB('F');
        }
        printf("Case #%d: ",cs);
        REP(i,SZ(an))putchar(an[i]);
        puts("");
    }
    return 0;
}

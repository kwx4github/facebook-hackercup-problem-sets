#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int N = 222;

int id[N][N];
int x[N * N], y[N * N], deg[N * N];
vector <int> g[N * N];

bool bet(int n, int c1, int c2) {
  if (c1 > c2) {
    swap(c1, c2);
  }
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= n; j++) id[i][j] = 0;
  int cnt = 0;
  for (int i = 1; i <= n; i++)
    for (int j = i + 1; j <= n; j++)
      if (i != c1 && i != c2 && j != c1 && j != c2) {
        if (i + j < c1 + c2 || (i + j == c1 + c2 && j < c2)) {
          ++cnt;
          x[cnt] = i;
          y[cnt] = j;
          id[i][j] = cnt;
        }
      }
  int edges = 0;
  for (int p = 1; p <= cnt; p++) {
    int i = x[p], j = y[p];
    g[p].clear();
    for (int q = 1; q <= n; q++) {
      if (q == i || q == j) {
        continue;
      }
      if (id[q][j] + id[j][q] != 0) {
        g[p].push_back(id[q][j] + id[j][q]);
      }
      if (id[i][q] + id[q][i] != 0) {
        g[p].push_back(id[i][q] + id[q][i]);
      }
    }
    deg[p] = g[p].size();
    edges += deg[p];
  }
  edges /= 2;
  long long total = ((n - 2) * (n - 3) / 2);
  total *= ((n - 4) * (n - 5) / 2);
  total *= ((n - 6) * (n - 7) / 2);
  long long win = 0;
  for (int p = 1; p <= cnt; p++) {
    int V = cnt - 1, E = edges;
    for (int j = 0; j < deg[p]; j++) {
      V--;
      E -= deg[g[p][j]];
    }
    win += 2 * (V * (V - 1) / 2 - E);
  }
  long long tri = 0;
  for (int i = 1; i <= n; i++) {
    int ct = 0;
    for (int j = 1; j <= n; j++) {
      if (i == j) {
        continue;
      }
      if (id[i][j] + id[j][i] != 0) {
        ct++;
      }
    }
    tri += 1LL * ct * (ct - 1) * (ct - 2) / 6;
  }
  for (int i = 1; i <= n; i++)
    for (int j = i + 1; j <= n; j++)
      for (int k = j + 1; k <= n; k++)
        if (id[i][j] != 0 && id[i][k] != 0 && id[j][k] != 0) {
          tri++;
        }
  win -= tri * 6;
  cerr << " clever: n = " << n << " c1 = " << c1 << " c2 = " << c2 << " win = " << win << " total = " << total << " ratio = " << 1.0 * win / total << endl;
  return (4 * win > total);
}

int res[N];

int main() {
  freopen("in", "r", stdin);
  freopen("out", "w", stdout);
  freopen("log", "w", stderr);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    int n, cases;
    scanf("%d %d", &n, &cases);
    for (int c1 = 1; c1 <= n; c1++) {
      int low = 0, high = n + 1;
      while (low + 1 < high) {
        int mid = (low + high) >> 1;
        int c2 = (mid == c1 ? 1 : 0) + mid;
        if (bet(n, c1, c2)) high = mid;
        else low = mid;
      }
      res[c1] = high;
    }
    while (cases--) {
      int foo, bar;
      scanf("%d %d", &foo, &bar);
      printf("%c", bar >= res[foo] ? 'B' : 'F');
    }
    printf("\n");
    fflush(stdout);
  }
  return 0;
}

#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
using namespace std;


int solve(int n, int x, int y){
	LLD A = 0, B = 0;
	int s = x + y;
	if (x > y) swap(x, y);
	FOR(i,0,n) if (i != x && i != y)
	FOR(j,0,i) if (j != x && j != y)
	FOR(k,0,j) if (k != x && k != y){
		int a[3] = {i, j, k};
		int b[5] = {i, j, k, x, y};
		int c[3];
		int fail = 0;
		FOR(r,0,3){
			if (a[r] >= s) fail = 1;
			c[r] = s - a[r];
			if (c[r] > n){
				c[r] = n;
			}
			else{
				if (a[r] > y || c[r] > y) --c[r];
			}
			int mu = 0;
			FOR(q,0,5) if (b[q] <= c[r]) ++mu;
			c[r] -= mu;
			if (c[r] <= 0) fail = 1;
		}
		if (!fail){
			sort(c, c + 3);
			B += c[0] * (c[1] - 1) * (c[2] - 2);
		}
		A += (n - 5) * (n - 6) * (n - 7);
	}
	return B * 5 > A;
}

void solve(int tc){
	int n, m, x, y;
	int p[205];
	printf("Case #%d: ", tc);
	scanf("%d%d", &n, &m);
	
	FOE(i,1,n-1){
		p[i] = n + 1;
		for (int lo=i+1, hi=n, mid; hi>=lo;){
			mid = (lo + hi) >> 1;
			if (solve(n, i, mid)) p[i] = mid, hi = mid - 1;
			else lo = mid + 1;
		}
	}
	
	FOR(i,0,m){
		scanf("%d%d", &x, &y);
		if (x > y) swap(x, y);
		printf("%c", y >= p[x] ? 'B' : 'F');
	}
	puts("");
}

int main(){
	int tc;
	scanf("%d", &tc);
	FOE(i,1,tc) solve(i);
	return 0;
}

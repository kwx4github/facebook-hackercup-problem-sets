#include <vector>
#include <iterator>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <set>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <chrono>
using namespace std;
int bitct(long long r) {return r == 0 ? 0 : (bitct(r>>1) + (r&1));}
long long gcd(long long x, long long y) {return x ? gcd(y%x,x) : y;}
long long choose(long long n, long long q) { if(n==0 || q==0) return 1;
	if (q==1) return n; else return ( choose(n, q-1) * (n-q+1 ) /q); }
template<typename T> ostream& operator << (ostream &o,vector<T> v) {o<<"{";
	int i=0,s=v.size();for(;i+1<s;i++)o<<v[i]<<", ";if(s)o<<v[i];o<<"}";return o;}
template<typename K, typename V> ostream& operator << (ostream &o,
  unordered_map<K, V> m) {o<<"{";for(auto i:m)o<<i.first<<" -> "<< i.second <<
  ", "; o<<"}";return o;}
template<typename K, typename V> ostream& operator << (ostream &o,
  map<K, V> m) {o<<"{";for(auto i:m)o<<i.first<<" -> "<< i.second <<
  ", "; o<<"}";return o;}
template<typename K, typename V> ostream& operator << (ostream &o,
  set<K> m) {o<<"{";for(auto i:m)o<<i<< ", "; o<<"}";return o;}
template<typename K, typename V> ostream& operator << (ostream &o,
  unordered_set<K> m) {o<<"{";for(auto i:m)o<<i<< ", "; o<<"}";return o;}
//int dx[8] = {0,  1,  1,  1,  0, -1, -1, -1}
//int dy[8] = {1,  1,  0, -1, -1, -1,  0,  1}
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

void calc(ifstream &, ofstream &);
main() { stringstream filename, fnamein, fnameout;
  typedef std::chrono::duration<int,std::milli> ms;
	string file("B");
	filename << file << "-small.";
	fnamein << filename.str() << "in"; fnameout << filename.str() << "out";
	ifstream fin(fnamein.str().c_str()); ofstream fout(fnameout.str().c_str());
	int count;
	fin >> count;
	for(int i=0;i<count;i++) {
		fout << "Case #" << (i+1) << ": ";
    chrono::steady_clock::time_point t0 = chrono::steady_clock::now();
		calc(fin, fout);
    chrono::steady_clock::time_point t1 = chrono::steady_clock::now();
    cerr << "CASE" << (i+1) << " " << 
      (chrono::duration_cast<ms>(t1-t0)).count() << endl;
		fout.flush(); }
	fin.close(); fout.close(); }

void calc(ifstream &fin, ofstream &fout)
	{
  int N, H;
  fin >> N >> H;

  long long p2[N][N];
  long long p3[N][N];
  for(int i=0;i<N;i++)
    for(int j=0;j<N;j++)
      p2[i][j]=p3[i][j]=0;

  for(int a=0;a<N;a++)
    for(int b=a+1;b<N;b++)
      for(int c=b+1;c<N;c++)
        for(int d=c+1;d<N;d++)
          {
          p2[d][c]++;
          if(d+b>=a+c)
            p2[d][b]++;
          if(d+a>=b+c)
            p2[d][a]++;
          if(b+c>a+d)
            p2[c][b]++;
          }

  for(int h=1;h<N;h++)
    for(int l=0;l<h;l++)
      for(int nh=l;nh<N;nh++)
        for(int nl=0;nl<nh;nl++)
          {
          if(nh+nl < h+l)
            continue;
          if(nh+nl == h+l && nh < h)
            continue;
          if(nh==h || nl == l || nl == h || nh ==l)
            continue;
          p3[nh][nl]+=p2[h][l];
          //do for h and l
          int c=nh;
          if(nh>h)
            {
            int loss = h+l-c-1;
            if(loss >= l)
              loss--;
            if(loss < 0)
              loss=0;
            p3[nh][nl]-=loss;
            }
          else if(nh < l)
            {
            int loss = h+l-c-4;
            if(loss < 0)
              loss=0;
            p3[nh][nl]-=loss;
            }
          else 
            {
            int loss = h+l-c;
            if(loss > h)
              loss--;
            if(loss >= h)
              loss-=3;
            else if(loss >=c)
              loss-=2;
            else if(loss >=l)
              loss-=1;
            if(loss < 0)
              loss=0;
            p3[nh][nl]-=loss;

            }
          c=nl;
          if(c>h)
            {
            int loss = h+l-c-1;
            if(loss >= l)
              loss--;
            if(loss < 0)
              loss=0;
            p3[nh][nl]-=loss;
            }
          else if(c < l)
            {
            int loss = h+l-c-4;
            if(loss < 0)
              loss=0;
            p3[nh][nl]-=loss;
            }
          else 
            {
            int loss = h+l-c;
            if(loss > h)
              loss--;
            if(loss >= h)
              loss-=3;
            else if(loss >=c)
              loss-=2;
            else if(loss >=l)
              loss-=1;
            if(loss < 0)
              loss=0;
            p3[nh][nl]-=loss;

            }
          }

  long long tot=0;
  for(int h=1;h<N;h++)
    for(int l=0;l<h;l++)
      tot+=p3[h][l];
  cout << tot << endl;
  cout << N*(N-1)*(N-2)*(N-3)*(N-4)*(N-5) << endl;


  for(int idx=0;idx<H;idx++)
    {

    int h,l;
    fin >> h >> l;
    if(l>h)
      {
      int x=h;
      h=l;
      l=x;
      }

    long long bad=0;
    for(int nh=1;nh<N;nh++)
      for(int nl=0;nl<nh;nl++)
        {
        if(nh+nl < h+l)
          continue;
        if(nh+nl == h+l && nh < h)
          continue;
        if(nh==h || nl == l || nl == h || nh ==l)
          continue;

        bad+=p3[nh][nl];
        }
    
    if(bad*4>tot)
      fout << "F";
    else
      fout << "B";
    }

  fout << endl;

	return; 
	}

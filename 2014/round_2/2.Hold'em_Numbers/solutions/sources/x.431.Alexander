/*
ID: espr1t
LANG: C++
TASK: 
KEYWORDS: 
CONTEST: Facebook HackerCup 2013-2014
*/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ctime>

#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

using namespace std;
FILE *in; FILE *out;

const int MAX = 102;
const int BUFF = 1048576;

int n, m;
int used[MAX];
long long tri[MAX][MAX];
long double chance[MAX][MAX];

inline bool bad(int l1, int r1, int l2, int r2) {
    return (l1 + r1 < l2 + r2) ||
        (l1 + r1 == l2 + r2 && r1 < r2);
}

long long win(int n, int l0, int r0) {
    long long ret = 0;
    used[l0] = used[r0] = 1;
	for (int l1 = 1; l1 < r0; l1++) if (!used[l1]) {
	    used[l1] = 1;
	    for (int r1 = l1 + 1; r1 <= n; r1++) if (!used[r1]) {
	        if (bad(l0, r0, l1, r1))
	            break;
	        used[r1] = 1;
	        for (int l2 = 1; l2 < r0; l2++) if (!used[l2]) {
	            used[l2] = 1;
	            for (int r2 = l2 + 1; r2 <= n; r2++) if (!used[r2]) {
    	            if (bad(l0, r0, l2, r2))
    	                break;
    	            if (bad(l2, r2, l1, r1))
    	                continue;
    	            used[r2] = 1;
    	            for (int l3 = 1; l3 < r0; l3++) if (!used[l3]) {
    	                used[l3] = 1;
    	                for (int r3 = l3 + 1; r3 <= n; r3++) if (!used[r3]) {
    	                    if (bad(l0, r0, l3, r3))
    	                        break;
    	                    if (bad(l3, r3, l2, r2))
    	                        continue;
    	                    ret++;
    	                }
    	                used[l3] = 0;
    	            }
    	            used[r2] = 0;
                }
	            used[l2] = 0;
	        }
	        used[r1] = 0;
	    }
	    used[l1] = 0;
	}
    used[l0] = used[r0] = 0;
    return ret;
}

long long lose(int n, int l0, int r0) {
    long long ret = 0;
    used[l0] = used[r0] = 1;
	for (int l1 = 1; l1 < n; l1++) if (!used[l1]) {
	    used[l1] = 1;
	    for (int r1 = l1 + 1; r1 <= n; r1++) if (!used[r1]) {
	        if (!bad(l0, r0, l1, r1))
	            continue;
	        used[r1] = 1;
	        for (int l2 = 1; l2 < r1; l2++) if (!used[l2]) {
	            used[l2] = 1;
	            for (int r2 = l2 + 1; r2 <= n; r2++) if (!used[r2]) {
    	            if (bad(l1, r1, l2, r2))
    	                break;
    	            used[r2] = 1;
    	            for (int l3 = 1; l3 < r1; l3++) if (!used[l3]) {
    	                used[l3] = 1;
    	                for (int r3 = l3 + 1; r3 <= n; r3++) if (!used[r3]) {
    	                    if (bad(l2, r2, l3, r3))
    	                        break;
    	                    ret++;
    	                }
    	                used[l3] = 0;
    	            }
    	            used[r2] = 0;
                }
	            used[l2] = 0;
	        }
	        used[r1] = 0;
	    }
	    used[l1] = 0;
	}
    used[l0] = used[r0] = 0;
    return ret;
}

long long sum[MAX][MAX];
void precalc(int n) {
    memset(sum, 0, sizeof(sum));
    memset(used, 0, sizeof(used));
	for (int l1 = 1; l1 < n; l1++) if (!used[l1]) {
	    used[l1] = 1;
	    for (int r1 = l1 + 1; r1 <= n; r1++) if (!used[r1]) {
	        used[r1] = 1;
	        for (int l2 = 1; l2 < r1; l2++) if (!used[l2]) {
	            used[l2] = 1;
	            for (int r2 = l2 + 1; r2 <= n; r2++) if (!used[r2]) {
    	            if (bad(l1, r1, l2, r2))
    	                break;
    	            used[r2] = 1;
	                
	                int between = 4;
	                int l3 = 1, r3 = n;
	                while (l3 < r3) {
	                    if (used[l3]) {l3++; between--; continue;}
	                    if (used[r3]) {r3--; between--; continue;}
	                    if (!bad(l2, r2, l3, r3)) {
	                        sum[l1][r1] += r3 - l3 - between;
	                        l3++;
	                    }
	                    else r3--;
	                }
    	            used[r2] = 0;
                }
	            used[l2] = 0;
	        }
	        used[r1] = 0;
	    }
	    used[l1] = 0;
	}
}


void solveTest(int testCase) {
	fscanf(in, "%d %d", &n, &m);
	precalc(n);
	string ans;
	for (int i = 0; i < m; i++) {
	    fprintf(stderr, "%d...\n", i);
	    int l0, r0;
	    fscanf(in, "%d %d", &l0, &r0);
	    if (l0 > r0)
	        swap(l0, r0);
	    
//	    long long wins = (l0 + r0 < n ? win(n, l0, r0) : tri[n - 2][6] - lose(n, l0, r0));
        
	    long long wins = 0;
	    for (int l1 = 1; l1 < n; l1++) if (l1 != l0 && l1 != r0) {
	        for (int r1 = l1 + 1; r1 <= n; r1++) if (r1 != l0 && r1 != r0) {
	            if (bad(l1, r1, l0, r0)) {
	                wins += sum[l1][r1];
	            }
	        }
	    }
	    wins = (long long)((long double)wins * 1.4);
//	    fprintf(stderr, "%lld %lld\n", wins, sum[l0][r0]);
	    ans += wins * 4 > tri[n - 2][6] ? 'B' : 'F';
	}
	fprintf(out, "Case #%d: %s\n", testCase, ans.c_str());
}

int main(void) {
	in = stdin; out = stdout;
	in = fopen("HoldemNumbers.in", "rt"); out = fopen("HoldemNumbers.out", "wt");
	
	unsigned sTime = clock();
	
	for (int i = 0; i < MAX; i++) {
	    tri[i][0] = tri[i][i] = 1;
	    for (int c = 1; c < i; c++)
	        tri[i][c] = tri[i - 1][c - 1] + tri[i - 1][c];
	}
	for (int i = 0; i < MAX; i++)
	    for (int c = 0; c < MAX; c++)
	        tri[i][c] *= 15;
	fprintf(stderr, "%lld\n", tri[98][6]);
	
	/*
	for (int i = 1; i <= 3; i++) {
	    for (int l1 = 1; l1 < n; l1++) {
	        for (int r1 = l1 + 1;
	    }
	}
	*/
	
	int numTests;
	fscanf(in, "%d", &numTests);
	static char buff[BUFF]; fgets(buff, BUFF, in);
	
	for (int testCase = 1; testCase <= numTests; testCase++) {
		unsigned tTime = clock();
		fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
		solveTest(testCase);
		fprintf(stderr, "  -- execution time: %.3lfs (total time %.3lfs)\n",
            (double)(clock() - tTime) / CLOCKS_PER_SEC, (double)(clock() - sTime) / CLOCKS_PER_SEC);
        fflush(stderr);
	}
	fprintf(stderr, "Finished with all testcases!\n");
	fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);	
	return 0;
}

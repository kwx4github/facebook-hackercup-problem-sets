#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <math.h>
using namespace std;
#define MAXN 1000000
#define ll long long

bool Less(int x1,int y1,int x2,int y2) {
    if(x1+y1<x2+y2)
        return true;
    if(x1+y1>x2+y2)
        return false;
    if(max(x1,y1)<max(x2,y2))
        return true;
    return false;
}


int M[166][166];


vector<ll> solution;
vector<ll> totals;

void brutesolve(int N, int C1, int C2) {
    int good,total;
    good=total=0;
    for(int x1=1;x1<=N;x1++)
        for(int y1=x1+1;y1<=N;y1++)
            for(int x2=x1+1;x2<=N;x2++)
                for(int y2=x2+1;y2<=N;y2++)
                    for(int x3=x2+1;x3<=N;x3++)
                        for(int y3=x3+1;y3<=N;y3++) {
                            
                            set<int> XYs;
                            XYs.insert(x1);
                            XYs.insert(y1);
                            XYs.insert(x2);
                            XYs.insert(y2);
                            XYs.insert(x3);
                            XYs.insert(y3);
                            XYs.insert(C1);
                            XYs.insert(C2);
                            if(XYs.size()==8) {
                                total++;
                                if(Less(x1,y1,C1,C2) && Less(x2,y2,C1,C2) && Less(x3,y3,C1,C2))
                                    good++;
                            }
                            
                        }
    printf("%d %d %lf\n",good,total,(double)good/(double)total);
    solution.push_back(good);
    totals.push_back(total);
}


vector<int> coeffs1,coeffs2,coeffs3;


ll power(ll x, ll y) {
    ll ret=1;
    for(int j=1;j<=y;j++)
        ret*=x;
    return ret;
}

vector<vector<ll> > Matrix;




void random_generate(int num_gens) {
    
    set<int> hashed;
    for(int c=0;c<num_gens;c++) {
        
        int N,C1,C2;
        
        while(1) {
            N=rand()%9+9;
            while(1) {
                C1=rand()%N+1;
                C2=rand()%N+1;
                if(C1<C2)
                    break;
            }
            
            if(hashed.find(N*100000+C1+C2) == hashed.end())
                break;
        }
        // printf("%d : %d %d %d\n",c+1, N,C1,C2);
        hashed.insert(N*100000+C1+C2);
        
        
        
        vector<ll> prod_vals;
        
        for(int j=0;j<coeffs1.size();j++) {
            prod_vals.push_back(power(C1, coeffs1[j]) * power(C2, coeffs2[j]) * power(N, coeffs3[j]));
        }
        
        Matrix.push_back(prod_vals);
        brutesolve(N, C1, C2);
    }
    
}

void print_matrix() {
    printf("M=[");
    for(int j=0;j<Matrix.size();j++) {
        const vector<ll>& prod_vals = Matrix[j];
        for(int k=0;k<prod_vals.size();k++) {
            printf("%lld",prod_vals[k]);
            if(k<(int)prod_vals.size()-1)
                printf(",");
            else if (j < Matrix.size() - 1) {
                printf(";");
            }
        }
    }
    printf("];\n");
}

void print_solution() {
    printf("S=[");
    for(int j=0;j<solution.size();j++) {
        printf("%lld/%lld",solution[j],totals[j]);
        if(j<(int)solution.size()-1)
            printf(";");
    }
    printf("];\n");
}



long double Array1[]={-2182.7097937700289648534028208861253515,1105.2168181244691349010727808227681609,-236.06147519912675633519605937121613798,28.098699006401765910934268756743585067,-2.1139646096659701169164393312693118149,0.11199493471612874152908410221744718531,-0.0045569205522663682768292423707116413532,0.00013309151059747608218474627362977921825,-1.9486347066097994718393680004013583519E-6,642.05320833506821665479754717446487350,-274.84328991338008986792599081584813578,38.145729981799584481930898241475883560,-0.38255142224794316468832738928642840390,-0.42306529116236212195329917835845497557,0.045733842867213692287791485913132406305,-0.0020079224356779238105697603646550173616,3.3820020363163112788621409848926061273E-5,-124.59514450565016970013011058399651816,82.246212829077198018466293761773251685,-20.909237044946698566763687229368451359,2.6650668482096806884839825522349913393,-0.18326201844989892898954934469266398905,0.0066902608175123220282869858401571554456,-0.00010678924680170426467423635332585962502,-20.230508603333039495545990777249524183,7.8402557835062350881383916116611489537,-1.0788704556732867118385895038147388851,0.070845447754988030815493427036231040697,-0.0030351120772931809822464557389842938687,8.2756652634757698375023319419392219576E-5,0.32770112913166195959666226156649653950,-0.29392962110541913505725612598999099833,0.038243687426616780569250365514323561399,2.9541630295551603678542450259168758627E-5,-9.5555082985608088168151088925941684073E-5,0.096083430508587445381033480817621169301,-0.0037959719523133319988790182186591721189,-0.0027403998522780696725474333316330758399,0.00016870002008433347417679124667091254581,-0.0071856632813354412201557934300377431785,0.0021370891286765331526610868546750321522,-0.00010069670035533059590393869545242720618,-0.00026293365640709857056534450613308048967,9.1943964525491764296841764057915985430E-6,2.3889853308811002065943196509032433724E-6,-356.64736086355420169003966099249264622,127.72904905260967484795697498546805860,-1.5821867838340361638941725088361848106,-5.4012422037202143093558390587950762401,1.0132691154555264237550061986970279713,-0.082003093034682323057900283868805431717,0.0032083222366153135684079938853447884130,-5.0071476211928391655202615831491865933E-5,193.93174527163952411280388305053932299,-150.51745287586198733039565830991715364,41.651452893670085340172564897454530761,-5.4966444219290556521129393452043703707,0.37636232764433908584547954448447141494,-0.013181367521632836465971555746394721849,0.00019335223133584061880630039242467327211,64.993525531788521259387340428980765344,-24.976765652301824572102586562004327774,3.2485928422114798313197854315701034673,-0.18132591287861945953855504102528814388,0.0054809739030729676318497290016734125370,-0.00011019401052624102685430578334263596270,-1.5034822244450400671433099341506471897,1.2658010406303608017862395927999289572,-0.17829759194666145988553668308024164821,0.0050197444905502701063353597768450804249,8.5677155926283860451289513312461693040E-5,-0.39652224136007223730064467206214835501,0.021002306015000796262348216821098911118,0.0068913594215530520398609003871834804468,-0.00037412137993674584719309739448452323093,0.030591529912341653454826152926278682759,-0.0062441087176046788851481994625744268615,0.00021542871780714641547798573089671519958,0.00022783970822877777725447782286865019605,1.7840299518328411556751993092518658654E-5,-7.2102849802940804885243679783390547579E-6,-75.843341896372089789808464376769842986,62.370140601674678217905061635297252420,-17.066621939656183319620786459069657261,2.1696824712427654340876356922621423695,-0.13958160467383282290252920023151930856,0.0043989221588692173327376200619270998967,-5.3824098450203864338371621712648247514E-5,-52.579829639465358660100014583608685566,18.575023380057259972750686141171188073,-2.2114515063626126744496767505985476705,0.11059303116108360003296277804984451834,-0.0026256098665957543902516467921462075795,3.4205137921892355988650686699109020432E-5,3.2406965003381541625198870791126030393,-1.6313497344783357658397058898316414277,0.18714241627605044871776694725879199881,-0.0056292393027292599518401985597270491599,-1.0404963914119101207967984317007988724E-5,0.34910873571780716730370268664980080698,0.019971786235676066924298427244782205713,-0.0076405454339935347735567042375376756236,0.00030259658508143174779037038274157295567,-0.048892093607114714571607451132339594082,0.0039790159865293157047616684251902003738,-0.00010440419592325486501724521553654241012,0.0017533935878817021973645132546179853548,-4.7963560751759279255496876842644806597E-5,-1.3538953648217225694759339474314883810E-5,11.779757257917933832664549572443125452,-3.8688893553322309803487989810438937002,0.45894172123167450717886698289305637921,-0.031996127430059369494014600626899974988,0.0016269034080856850248950018356080225023,-3.9478791874404024771798809224970689354E-5,-2.3984788210622031182493373338066494771,0.80525241094073256837730407680544564494,-0.062759726663995724169881776218641868052,0.00081402075373171365911763377802622969013,4.1552670552590409490036608084882088785E-5,-0.021014402253856406743987590050097655238,-0.050718435914829800872541292941741660886,0.0035448075449962032104714038268441600944,-0.00012374822120849790265516323885399700271,0.030667711865874969485325182542657029656,0.0032699026721980498864230229838805184288,-7.1204697888839958414006896624893854931E-5,-0.0032408295490770486154086855699209432197,3.0121496840608794188629587665624040889E-5,-1.0845890138743591239657473988243889782E-5,0.65476020817880828366073296434028810664,-0.17322383721382951286267987890030266195,0.017672133979796660576197239731636244700,-0.0010866827385766831223431115633248656299,2.0914162115335354148231557219268712430E-5,-0.063295611812741064662836352233844335210,0.016011959464186870966092973068910429773,0.0013421273965636994026132335761286713440,-3.6219708324910222599969812424444670743E-5,-0.0023553523774129359316541996536012956700,-0.0056412958492691890808442131495450071229,0.00017889092802239707581491239733474639631,0.0010710427486782992678092916426058723149,-8.3599069826890538811636558992971500762E-5,0.00018898949427766167312557776025966956129,0.014833395807672760079076324818080784799,-0.0036956878197798492922995845329519373237,-0.00032371130052041181690591484997022751287,1.5815859949574230401625218525031018781E-5,-0.0021552949328077496926865994025821966041,0.0020876249066495432879225039678699244281,-0.00012755888528056746985914837857651576571,0.0020920871419059304339979535350248997527,0.00011090593142599707017810008376740372547,-0.00033816910534543692175218332816116020412,0.0012621830542938737393084677525924038659,-0.00019899284295980360432943535329424357999,2.7981484922291762901211802703653165536E-5,-0.0021463889360465015175556139899483382748,-3.0096669345193015834994026035785030856E-5,0.00025202484464286802175567845126858849652,0.00058354791130689127282773288044032869194,-3.7187779492427994638870676473747505229E-6,-8.6807270983244292906574112580619120960E-5,1.1290150690618956485969155505405526331E-5};

double Array2[]={104.99999999999999999999688394528958624,
    -167.24999999999999999999985804372279901,
    106.33333333333333333333384373362387883,
    -34.687500000000000000000173391980377264,
    6.1458333333333333333333601344660039209,
    -0.56250000000000000000000234299206448548,
    0.020833333333333333333333453627887301289};


double compute_total(int C1, int C2, int N) {
    double total = 0;
    for(int j=0;j<7;j++) {
        total += pow((double)C1, (double)coeffs1[j]) * pow((double)C2, (double)coeffs2[j]) * pow((double)N, (double)coeffs3[j]) * Array2[j];
    }
    return total;
}

double compute_good(int C1, int C2, int N) {
    long double total = 0;
    for(int j=0;j<165;j++) {
        total += pow((long double)C1, (long double)coeffs1[j]) * pow((long double)C2, (long double)coeffs2[j]) * pow((long double)N, (long double)coeffs3[j]) * Array1[j];
    }
    return total;
}

int main() {
    
    
    for(int i=0;i<=8;i++)
        for(int j=0;j<=8;j++)
            for(int k=0;k<=8;k++) {
                if(i+j+k<=8) {
                    coeffs1.push_back(i);
                    coeffs2.push_back(j);
                    coeffs3.push_back(k);
                }
            }
    
    /*random_generate(165);
    print_matrix();
    print_solution();
    
    printf("\n");
    return 0;*/
    
    int T;
    cin>>T;
    for(int t=1;t<=T;t++) {
        int N;
        cin>>N;
        int H;
        cin>>H;
        string answer = "";
        for(int h=1;h<=H;h++) {
            int C1,C2;
            cin>>C1>>C2;
            if(C1>C2) {
                int t=C1;
                C1=C2;
                C2=t;
            }
            
            double total_ways = compute_total(C1, C2, N);
            double good_ways = compute_good(C1, C2, N);
            
            double prob_win = good_ways;
            if(prob_win > 0.25)
                answer.push_back('B');
            else
                answer.push_back('F');
     
            //printf("%lf of %lf\n",good_ways, total_ways);
            //brutesolve(N, C1, C2);
     
        }
        printf("Case #%d: %s\n",t,answer.c_str());
     }
}
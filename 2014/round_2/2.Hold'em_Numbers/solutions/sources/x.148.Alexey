import java.io.*;
import java.util.*;
import java.math.*;

public class Medium implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st;
	static Random rnd;

	private void solve() throws IOException {
		int tests = nextInt();
		for (int test = 0; test < tests; test++) {
			out.print("Case #" + (test + 1) + ": ");
			solveOne();
		}
	}

	private void solveOne() throws IOException {
		int n = nextInt(), m = nextInt();
		StringBuilder result = new StringBuilder();

		int[] answers = generateAnswers(n);

		// out.println(Arrays.toString(answers));

		for (int i = 0; i < m; i++) {
			int first = nextInt(), second = nextInt();
			int sum = first + second;
			int max = Math.max(first, second);
			if (answers[sum] <= max) {
				result.append('B');
			} else {
				result.append('F');
			}
		}

		out.println(result);
	}

	final int maxN = 100;
	final int[][] cache = new int[maxN + 1][];

	private int[] generateAnswers(int n) {
		if (cache[n] != null) {
			return cache[n];
		}
		int[] results = new int[n + n + 1];
		Arrays.fill(results, Integer.MAX_VALUE);
		int l = n, r = n + n + 1;
		while (r - l > 1) {
			int m = (l + r) / 2;
			if (isGoodSum(n, m) != -1) {
				r = m;
			} else {
				l = m;
			}
		}
		results[r] = isGoodSum(n, r);
		for (int i = r + 1; i < n + n; i++) {
			results[i] = (i + 2) / 2;
		}
		return cache[n] = results;
	}

	private int isGoodSum(int n, int m) {
		for (int maxCard = 1; maxCard <= n; maxCard++) {
			int minCard = m - maxCard;
			if (minCard <= 0 || maxCard <= minCard || minCard > n) {
				continue;
			}
			if (isGood(n, maxCard, minCard)) {
				return maxCard;
			}
		}
		return -1;
	}

	private boolean isGood(int n, int a, int b) {
		final int buben = 1000000;
		boolean[] used = new boolean[n + 1];
		used[a] = true;
		used[b] = true;
		int win = 0;
		for (int it = 0; it < buben; it++) {
			int a0 = generate(n, used);
			int b0 = generate(n, used);
			int a1 = generate(n, used);
			int b1 = generate(n, used);
			int a2 = generate(n, used);
			int b2 = generate(n, used);
			if (!isLoose(a, b, a0, b0) && !isLoose(a, b, a1, b1)
					&& !isLoose(a, b, a2, b2)) {
				++win;
			}
			used[a0] = false;
			used[b0] = false;
			used[a1] = false;
			used[b1] = false;
			used[a2] = false;
			used[b2] = false;
		}
		return (4 * win > buben);
	}

	private boolean isLoose(int a, int b, int a0, int b0) {
		return ((a + b) < (a0 + b0) || ((a + b) == (a0 + b0) && Math.max(a, b) < Math
				.max(a0, b0)));
	}

	private int generate(int n, boolean[] used) {
		int result = 1 + rnd.nextInt(n);
		while (used[result]) {
			result = 1 + rnd.nextInt(n);
		}
		used[result] = true;
		return result;
	}

	public static void main(String[] args) {
		new Medium().run();
	}

	public void run() {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);

			rnd = new Random();

			solve();

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String line = in.readLine();

			if (line == null)
				return null;

			st = new StringTokenizer(line);
		}

		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
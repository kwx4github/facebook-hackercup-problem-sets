import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.max;
import static java.lang.Math.min;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class B {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
//	static final Random rng = new Random(42);
	
	static void solve() throws Exception {
		int n = nextInt();
		long total = ((long) (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7)) >> 3;
		long tmp[] = new long[n];
		long tmp2[] = new long[n];
		int h = nextInt();
		char ans[] = new char[h];
		for (int i = 0; i < h; i++) {
			int c1 = nextInt() - 1;
			int c2 = nextInt() - 1;
//			if (c1 == c2) {
//				continue;
//			}
			long cur = solve(n, tmp, tmp2, c1, c2);
//			if (cur != solveDumb(n, c1, c2)) {
//				throw new AssertionError();
//			}
			ans[i] = cur * 4 > total ? 'B' : 'F';
//			System.err.println("PASS");
		}
		printCase();
		out.println(ans);
	}
	
	static long solve(int n, long tmp[], long tmp2[], int c1, int c2) {
		int sum = c1 + c2;
		int max = max(c1, c2);
		for (int i = 0, cur = 0; i < n; i++) {
			if (i != c1 && i != c2) {
				++cur;
			}
			tmp[i] = cur;
		}
		long onePair = 0;
		long twoPairs = 0;
		long threePairs1 = 0;
		long threePairs1_5 = 0;
		for (int stem = 0, cur = 0; stem < n; stem++) {
			if (stem < sum && stem != c1 && stem != c2) {
				int second = sum - stem;
				if (max(stem, second) > max) {
					--second;
				}
				if (second >= n) {
					second = n - 1;
				}
				long t = tmp[second];
				if (second >= stem) {
					--t;
				}
				cur += t;
				onePair += t;
				twoPairs += t * t;
				threePairs1 += t * t * t;
				if (stem > 0) {
					long u = tmp[min(stem - 1, second)];
					threePairs1 += 3 * u * (u - 1);
					threePairs1_5 += 3 * u * (u - 1);
				}
			}
			tmp2[stem] = cur;
		}
		int threePairs2 = 0;
		for (int stem = 0; stem < n && stem < sum; stem++) {
			if (stem == c1 || stem == c2) {
				continue;
			}
			int second = sum - stem;
			if (max(stem, second) > max) {
				--second;
			}
			if (second >= n) {
				second = n - 1;
			}
			long t = tmp[second];
			if (second >= stem) {
				--t;
			}
			long u = tmp2[second];
			if (second >= stem) {
				u -= t;
			}
			threePairs2 += 3 * t * u;
		}
		onePair >>= 1;
		twoPairs -= onePair;
		threePairs1 -= onePair;
		threePairs2 -= 3 * threePairs1_5 + 6 * twoPairs;
//		int dumbOnePair = 0;
//		int dumbTwoPairs = 0;
//		int dumbThreePairs1 = 0;
//		int dumbThreePairs2 = 0;
//		for (int c3 = 0; c3 < n; c3++) {
//			if (c3 == c1 || c3 == c2) {
//				continue;
//			}
//			for (int c4 = c3 + 1; c4 < n && (c3 + c4 < sum || c3 + c4 == sum && c4 < max); c4++) {
//				if (c4 == c1 || c4 == c2) {
//					continue;
//				}
//				++dumbOnePair;
//				for (int c5 = 0; c5 < n; c5++) {
//					if (c5 == c1 || c5 == c2) {
//						continue;
//					}
//					for (int c6 = c5 + 1; c6 < n && (c5 + c6 < sum || c5 + c6 == sum && c6 < max); c6++) {
//						if (c6 == c1 || c6 == c2) {
//							continue;
//						}
//						if (link(c3, c4, c5, c6)) {
//							++dumbTwoPairs;
//						}
//						for (int c7 = 0; c7 < n; c7++) {
//							if (c7 == c1 || c7 == c2) {
//								continue;
//							}
//							for (int c8 = c7 + 1; c8 < n && (c7 + c8 < sum || c7 + c8 == sum && c8 < max); c8++) {
//								if (c8 == c1 || c8 == c2) {
//									continue;
//								}
//								int cnt = (link(c3, c4, c5, c6) ? 1 : 0) + (link(c3, c4, c7, c8) ? 1 : 0) + (link(c5, c6, c7, c8) ? 1 : 0);
//								if (cnt == 3) {
//									++dumbThreePairs1;
//								}
//								if (cnt == 2) {
//									++dumbThreePairs2;
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//		int someTrash = 0;
//		int someTrash2 = 0;
//		int someTrash3 = 0;
//		int someTrash4 = 0;
//		for (int d1 = 0; d1 < n; d1++) {
//			if (d1 == c1 || d1 == c2) {
//				continue;
//			}
//			for (int d2 = 0; d2 < n; d2++) {
//				if (d2 == c1 || d2 == c2 || d2 == d1) {
//					continue;
//				}
//				if (d1 + d2 > sum || d1 + d2 == sum && max(d1, d2) >= max) {
//					continue;
//				}
//				for (int d3 = 0; d3 < n; d3++) {
//					if (d3 == c1 || d3 == c2 || d3 == d2) {
//						continue;
//					}
//					if (d2 + d3 > sum || d2 + d3 == sum && max(d2, d3) >= max) {
//						continue;
//					}
//					for (int d4 = 0; d4 < n; d4++) {
//						if (d4 == c1 || d4 == c2 || d4 == d3) {
//							continue;
//						}
//						if (d3 + d4 > sum || d3 + d4 == sum && max(d3, d4) >= max) {
//							continue;
//						}
//						++someTrash;
//						if (d1 == d4) {
//							++someTrash2;
//						}
//						if (d1 == d3 && d2 == d4) {
//							++someTrash3;
//						} else if (d1 == d3 || d2 == d4) {
//							++someTrash4;
//						}
//					}
//				}
//			}
//		}
//		System.err.println(n + " " + c1 + " " + c2 + ": " + onePair + " " + twoPairs + " " + threePairs1 + " " + threePairs2 + " | " + dumbOnePair + " " + dumbTwoPairs + " " + dumbThreePairs1 + " " + dumbThreePairs2 + " | " + 3 * someTrash + " " + 3 * someTrash2 + " " + 3 * someTrash3 + " " + 3 * someTrash4 + " | " + 3 * (someTrash - someTrash2 - someTrash3 - someTrash4) + " | " + 3 * threePairs1_5 + " " + 6 * onePair + " " + (6 * twoPairs - 6 * onePair));
//		return (long) onePair * onePair * onePair - 3L * onePair * twoPairs + 2L * dumbThreePairs1 + dumbThreePairs2;
		return (long) onePair * onePair * onePair - 3L * onePair * twoPairs + 2L * threePairs1 + threePairs2;
	}
	
//	static boolean link(int a, int b, int c, int d) {
//		return a == c || a == d || b == c || b == d;
//	}
//	
//	static long solveDumb(int n, int c1, int c2) {
//		boolean have[] = new boolean[n];
//		have[c1] = true;
//		have[c2] = true;
//		return go(n, have, c1 + c2, max(c1, c2), 3);
//	}
//	
//	static long go(int n, boolean have[], int sum, int max, int rem) {
//		if (rem == 0) {
//			return 1;
//		}
//		long ans = 0;
//		for (int c1 = 0; c1 < n; c1++) {
//			if (have[c1]) {
//				continue;
//			}
//			have[c1] = true;
//			for (int c2 = c1 + 1; c2 < n && (c1 + c2 < sum || c1 + c2 == sum && c2 < max); c2++) {
//				if (have[c2]) {
//					continue;
//				}
//				have[c2] = true;
//				ans += go(n, have, sum, max, rem - 1);
//				have[c2] = false;
//			}
//			have[c1] = false;
//		}
//		return ans;
//	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
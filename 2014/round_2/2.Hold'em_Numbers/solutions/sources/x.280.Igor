#pragma comment(linker,"/stack:256000000")

#include <cmath> 
#include <ctime> 
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <set> 
#include <map> 
#include <cstring> 
#include <cstdlib> 
#include <queue> 
#include <cstdio> 
#include <cfloat>
#include <cassert>
#include <sstream>
#include <deque>

using namespace std; 

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++) 
#define sz(v) (int)(v).size() 
#define all(v) (v).begin(), (v).end()

const int N = 105;

int dp[2 * N][N][N];
int sum[2 * N];

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int T;
	scanf("%d", &T);
	for (int tst = 1; tst <= T; tst++) {
		cerr << "Test #" << tst << endl;
		int n, h;
		cin >> n >> h;
		memset(dp, 0, sizeof(dp));
		memset(sum, 0, sizeof(sum));
		for (int i = 1; i <= n; i++) {
			for (int j = i + 1; j <= n; j++) {
				sum[i + j]++;
			}
		}
		for (int i = 1; i <= 2 * n - 1; i++) {
			for (int j = 1; j <= n; j++) {
				for (int k = j + 1; k <= n; k++) {
					dp[i][j][k] = sum[i];
					int x = i - j;
					if (1 <= x && x <= n && x != j) {
						--dp[i][j][k];
					}
					x = i - k;
					if (1 <= x && x <= n && x != k) {
						--dp[i][j][k];
					}
					if (j + k == i) {
						++dp[i][j][k];
					}
				}
			}
		}
		string res;
		REP(_, h) {
			int c1, c2;
			cin >> c1 >> c2;
			if (c1 > c2) swap(c1, c2);
			long long total = 0;
			for (int i = 1; i <= 2 * n - 1; i++) {
				total += dp[i][c1][c2];
			}
			long long bad = 0;
			for (int i = c1 + c2 + 1; i <= 2 * n - 1; i++) {
				bad += dp[i][c1][c2];
			}
			for (int x = 1; x <= n; x++) {
				if (x == c1 || x == c2) continue;
				int y = c1 + c2 - x;
				if (1 <= y && y <= n && x != y) {
					if (x > y) break;
					if (y == c1 || y == c2) continue;
					if (max(x, y) > max(c1, c2)) {
						++bad;
					}
				}
			}
			assert(total > 0);
			if (3 * total - 12 * bad > 0) {
				res += "B";
			} else {
				res += "F";
			}
		}
		cout << "Case #" << tst << ": " << res << endl;
	}
	return 0;
}
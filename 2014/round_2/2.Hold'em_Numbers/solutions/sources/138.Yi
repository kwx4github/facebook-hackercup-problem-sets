#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

const double pi = acos(-1.0);
const double eps = 1E-7;
const int inf = int(1e9)+7;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
#define sqr(x) ((x)*(x))
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)
#define ME(a) memset((a), 0, sizeof((a)))
#define MM(a, b) memcpy((a), (b), sizeof((a)))
#define FOR(i,n) for (int (i) = 0; (i) < (n); ++(i))
#define REP(i,a,b) for (int (i) = (a); (i) < (b); ++(i))

const int MAXN = 100+5;

int tree[MAXN];

int n, h, x, y, mid;


int add(int x, int p) {
    while (x <= n) {
        tree[x] += p;
        x += x&(-x);
    }
}

int get(int x) {
    int ret = 0;
    while (x >= 1) {
        ret += tree[x];
        x -= x&(-x);
    }
    return ret;
}

long long dfs(int th, int up) {
    long long ret = 0;
    
    for (int i = up; i > mid; i--) if (i != x) {
        int least = x+y-i;
        if (i > x) least--;
        least = min(i-1, least);
        
        int cc = least - get(least);
       // cout<<cc<<endl;
        if (cc <= 0) continue;
        if (th == 4) {
            ret += cc;
        } else {
            add(least, 1);
            ret += cc * dfs(th+1, i-1);
            add(least, -1);
        }
    }
    {
        int tot = (mid) - get(mid);
        long long tmp = 1;
 //     cout<<tot<<" "<<th<<endl;
        FOR(i, (5-th)*2) tmp *= (tot--);
        REP(i, 1, (5-th)+1) tmp /= i;
        FOR(i,(5-th)) tmp /= 2;
        ret += tmp;
    }
    
    return ret;
}

long long hzz() {
    long long tot = n - 2;
    long long ret = 1;
    FOR(i,3*2) ret *= tot--;
    REP(i,1,3+1) ret /= i;
    ret /= 8;
    
    return ret;
}

int main() {
    freopen("holdem_numbers.txt", "r", stdin);
    freopen("holdem_numbers.out", "w", stdout);
    
    int caseNum;
    scanf("%d", &caseNum);
    for (int ca = 1; ca <= caseNum; ca++) {
        scanf("%d%d", &n, &h);
        printf("Case #%d: ", ca);
        FOR(hi,h) {
            scanf("%d%d", &x, &y);
            if (x < y) swap(x, y);
            ME(tree);
            add(x, 1);
            add(y, 1);
            
            for (int i = 2; i <= n; i++) if (i+i-1 <= x+y) {
                mid = i;
            }
            
            long long s1 = dfs(2, n);
            long long s2 = hzz();
            
      //  cout<<s1<<" "<<s2<<endl;
            if (s1*4 > s2) printf("B");
            else printf("F");
        }
        printf("\n");
    }
    return 0;
}
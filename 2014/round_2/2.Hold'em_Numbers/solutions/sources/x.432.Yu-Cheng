import re

def comb(n, k):
  if k>n:
    return 0
  ans = 1
  k = min(k, n-k)
  for i in range(n-k+1, n+1):
    ans *= i
  for i in range(1, k+1):
    ans /= i
  return ans

def comb2(n, ks):
  k = sum(ks)
  ans = 1

  for i in range(n-k+1, n+1):
    ans *= i
  for v in ks:
    for i in range(1, v+1):
      ans /= i
      # print "ans", ans
  return ans

# print comb(98, 3)
# exit(1)
# exit(1)
def process_case() :
  # n = int(raw_input())
  n, h = map(int, raw_input().split())
  total = comb(n-2, 2) * comb(n-4, 2) * comb(n-6, 2)
  threshold = total / 3 + 1
  # print (n, h, total, threshold)

  ans = ""
  for i in range(0, h):
    ia, ib = map(int, raw_input().split())
    a = min(ia, ib)
    b = max(ia, ib)

    lower = b - 2
    upper = n - b

    # print ('hand', a, b, n, lower, upper)

    win = 0

    for u1 in range(n, b, -1):
      c1 = a+b-1-u1
      if a<=c1: c1-=1
      if c1<=0: continue
      # print ('u1', u1, c1, c1 * comb2(lower-1, [2, 2]) * 3)
      win += c1 * comb2(lower-1, [2, 2]) * 3
      for u2 in range(u1-1, b, -1):
        c2 = a+b-2-u2
        if a<=c2: c2-=1
        if c2<=0: continue
        # print ('u2', u2, c2, c1 * c2 * comb2(lower-2, [2]) * 3)
        win += c1 * c2 * comb2(lower-2, [2]) * 3
        for u3 in range(u2-1, b, -1):
          c3 = a+b-2-u3
          if a<=c3: c3-=1
          if c3<=0: continue
          # print ('u3', u2, c2, c3, c1 * c2 * c3)
          win += c1 * c2 * c3

    # print "win:", win
    win += comb2(lower, [2,2,2])
    # print "win:", win
    # print (win, threshold)
    if win>=threshold:
      ans += 'B'
    else:
      ans += 'F'
  return ans

if __name__ == "__main__" :
  case_num = int(raw_input())
  for i in range(case_num) :
    result = process_case()
    print "Case #%d: %s" % (i+1, result)

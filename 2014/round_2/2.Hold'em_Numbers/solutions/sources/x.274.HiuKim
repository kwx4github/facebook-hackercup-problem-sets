import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;

public class B {	
	BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;
    
    public void task() throws IOException {
    	int N = nextInt();
    	int H = nextInt();
    	
    	double constant = 1.0 / ((N-2) * (N-3));
    	constant = constant * 3 * 2;
    	double over = 1.0/4;
//    	out.println(constant + ", " + over);
    	
    	for (int h = 0; h < H; h++) {
    		int a1 = nextInt();
    		int a2 = nextInt();
    		int total = a1 + a2;
    		int max = Math.max(a1, a2);
    		
    		long com = 0;
    		for (int i = 1; i <= N; i++) {
    			if (i == a1 || i == a2) continue;
    			
    			for (int j = i+1; j <= N; j++) {
    				if (j == a1 || j == a2) continue;
    				
    				if ( (i + j > total) || ( (i+j == total) && j > max) ) {
//    					out.println(i + " and " + j);
    					com++;
    				}
    			}
    		}
    		double win = 1.0 - constant * com;
//    		out.println(com);
    		
    		if (win > over){
    			out.print("B");
    		} else {
    			out.print("F");
    		}    		
    	}
    	out.println();
    }
        
	public void solve() throws IOException {
		int T = nextInt();
		for(int t = 1; t <= T; t++){
			out.print("Case #" + (t) + ": ");
			task();
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		new B().run();
	}
	
	public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

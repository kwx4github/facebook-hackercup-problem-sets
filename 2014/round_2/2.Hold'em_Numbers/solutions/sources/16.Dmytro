#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <bitset>
#include <queue>
#include <stack>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

long long get(int x, int y, int n, int a) {
	if (x > y) {
		swap(x, y);
	}
	int p = max(a + 1, x + y - a);
	if (a + p == x + y && p < y) {
		++p;
	}

	int length = n - p + 1;
	if (p <= x) {
		--length;
	}
	if (p <= y) {
		--length;
	}
	return max(0, length);
}

long long get(int x, int y, int n, int a, int b) {
	if (x > y) {
		swap(x, y);
	}
	int p = max(a + 1, x + y - a);
	int q = max(b + 1, x + y - b);

	if (a + p == x + y && p < y) {
		++p;
	}
	if (b + q == x + y && q < y) {
		++q;
	}

	long long lengthA = n - p + 1;
	long long lengthB = n - q + 1;

	if (p <= x) {
		--lengthA;
	}
	if (p <= y) {
		--lengthA;
	}
	if (p <= b) {
		--lengthA;
	}

	if (q <= x) {
		--lengthB;
	}
	if (q <= y) {
		--lengthB;
	}

	if (lengthA <= 0 || lengthB <= 0) {
		return 0LL;
	}

	return lengthA * lengthB - min(lengthA, lengthB);
}

long long get(int x, int y, int n, int a, int b, int c) {
	if (x > y) {
		swap(x, y);
	}
	int p = max(a + 1, x + y - a);
	int q = max(b + 1, x + y - b);
	int r = max(c + 1, x + y - c);

	if (a + p == x + y && p < y) {
		++p;
	}
	if (b + q == x + y && q < y) {
		++q;
	}
	if (c + r == x + y && r < y) {
		++r;
	}

	long long lengthA = n - p + 1;
	long long lengthB = n - q + 1;
	long long lengthC = n - r + 1;

	if (p <= x) {
		--lengthA;
	}
	if (p <= y) {
		--lengthA;
	}
	if (p <= b) {
		--lengthA;
	}
	if (p <= c) {
		--lengthA;
	}

	if (q <= x) {
		--lengthB;
	}
	if (q <= y) {
		--lengthB;
	}
	if (q <= c) {
		--lengthB;
	}

	if (r <= x) {
		--lengthC;
	}
	if (r <= y) {
		--lengthC;
	}

	if (lengthA <= 0 || lengthB <= 0 || lengthC <= 0) {
		return 0LL;
	}

	long long res = lengthA * lengthB * lengthC - min(lengthA, lengthB) * lengthC - min(lengthA, lengthC) * lengthB - min(lengthB, lengthC) * lengthA + 2LL * min(lengthA, min(lengthB, lengthC));
	return res;
}

long long cnk(long long n, long long k) {
	long long res = 1;
	for (long long i = 1; i <= k; ++i) {
		res *= (n + 1LL - i);
		res /= i;
	}
	return res;
}

map < pair < int, pair < int, int > >, int > M;

bool solveClever(int x, int y, int n) {
	long long N = n;
	long long total = (N - 2) * (N - 3) * (N - 4) * (N - 5) * (N - 6) * (N - 7);
	total /= 8LL;

	long long lose = 0;

	long long A = 0;
	for (int i = 1; i <= n; ++i) {
		if (i == x || i == y) {
			continue;
		}
		A += get(x, y, n, i);
	}
	A *= 3LL * total / cnk(n - 2, 2);

	long long B = 0;
	for (int i = 1; i <= n; ++i) {
		for (int j = i + 1; j <= n; ++j) {
			if (i == x || i == y || j == x || j == y) {
				continue;
			}
			B += get(x, y, n, i, j);
		}
	}
	B *= 6LL * total / cnk(n - 2, 2) / cnk(n - 4, 2);

	long long C = 0;
	for (int i = 1; i <= n; ++i) {
		for (int j = i + 1; j <= n; ++j) {
			for (int k = j + 1; k <= n; ++k) {
				if (i == x || i == y || j == x || j == y || k == x || k == y) {
					continue;
				}
				C += get(x, y, n, i, j, k);
			}
		}
	}
	C *= 6LL;

	lose = A - B + C;
	long long win = total - lose;
	//cerr << win << "/" << total << endl;
	if (win * 4LL > total) {
		M[make_pair(n, make_pair(x, y))] = 1;
		M[make_pair(n, make_pair(y, x))] = 1;
		return true;
	} else {
		M[make_pair(n, make_pair(x, y))] = 0;
		M[make_pair(n, make_pair(y, x))] = 0;
		return false;
	}
}

bool solve(int x, int y, int n) {
	if (x > y) {
		swap(x, y);
	}

	long long total = 0, win = 0;
	vector < bool > used(n + 1, false);
	used[x] = used[y] = true;
	int s = x + y;

	long long N = n;
	total = (N - 2) * (N - 3) * (N - 4) * (N - 5) * (N - 6) * (N - 7);
	total /= 8LL;

	for (int x1 = 1; x1 <= n; ++x1) {
		if (used[x1]) {
			continue;
		}
		used[x1] = true;
		for (int y1 = x1 + 1; x1 + y1 <= s && y1 <= n; ++y1) {
			if (used[y1]) {
				continue;
			}
			if (x1 + y1 == s && y1 > y) {
				continue;
			}
			used[y1] = true;
			for (int x2 = 1; x2 <= n; ++x2) {
				if (used[x2]) {
					continue;
				}
				used[x2] = true;
				for (int y2 = x2 + 1; x2 + y2 <= s && y2 <= n; ++y2) {
					if (used[y2]) {
						continue;
					}
					if (x2 + y2 == s && y2 > y) {
						continue;
					}
					used[y2] = true;
					for (int x3 = 1; x3 <= n; ++x3) {
						if (used[x3]) {
							continue;
						}
						used[x3] = true;
						for (int y3 = x3 + 1; x3 + y3 <= s && y3 <= n; ++y3) {
							if (used[y3]) {
								continue;
							}
							if (x3 + y3 == s && y3 > y) {
								continue;
							}
							used[y3] = true;
							++win;
							used[y3] = false;
						}
						used[x3] = false;
					}
					used[y2] = false;
				}
				used[x2] = false;
			}
			used[y1] = false;
		}
		used[x1] = false;
	}

	cerr << win << "/" << total << endl;
	if (win * 4LL > total) {
		return true;
	} else {
		return false;
	}
}

void solve(int test) {
	int n, h;
	cin >> n >> h;
	cout << "Case #" << test << ": ";
	for (int i = 0; i < h; ++i) {
		int a, b;
		cin >> a >> b;
		if (i % 100 == 0) {
			cerr << i << endl;
		}
		//solveClever(a, b, n);
		int res = 0;
		if (M.count(make_pair(n, make_pair(a, b))) != 0) {
			res = M[make_pair(n, make_pair(a, b))];
		} else {
			res = solveClever(a, b, n);
		}
		if (res) {
			printf("B");
		} else {
			printf("F");
		}
	}
	printf("\n");
}

void gen() {
	for (int i = 1; i <= 100; ++i) {
		for (int j = i + 1; j <= 100; ++j) {
			printf("%d %d\n", i, j);
		}
	}
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	//gen();

	int tests;
	scanf("%d", &tests);
	for (int i = 0; i < tests; ++i) {
		solve(i + 1);
		cerr << (i + 1) << endl;
		cerr << "Time: " << clock() << endl;
	}
	return 0;
}
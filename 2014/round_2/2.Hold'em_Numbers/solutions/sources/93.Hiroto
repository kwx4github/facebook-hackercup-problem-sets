#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include<assert.h>
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

#define ll long long
#define ull unsigned ll

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

double brute_solve(int N, int C1, int C2){
  int i, j, k;
  int a1, b1, a2, b2, a3, b3;
  double win=0, all=0;
  int used[200];

  rep(i,N) used[i] = 0;
  used[C1] = used[C2] = 1;

  rep(a1,N) if(!used[a1]) REP(b1,a1+1,N) if(!used[b1]){
    used[a1]=used[b1] = 1;
    REP(a2,a1+1,N) if(!used[a2]) REP(b2,a2+1,N) if(!used[b2]){
      used[a2]=used[b2] = 1;
      REP(a3,a2+1,N) if(!used[a3]) REP(b3,a3+1,N) if(!used[b3]){
        all++;
        if( (a1+b1 > C1+C2) || (a1+b1==C1+C2 && b1 > C2) ) continue;
        if( (a2+b2 > C1+C2) || (a2+b2==C1+C2 && b2 > C2) ) continue;
        if( (a3+b3 > C1+C2) || (a3+b3==C1+C2 && b3 > C2) ) continue;
        win++;
      }
      used[a2]=used[b2] = 0;
    }
    used[a1]=used[b1] = 0;
  }

  printf("%f %f\n",win*6,all*6);
  return win / all;
}

int main(){
  int T, count = 0;
  int N, H, C1, C2;
  int i,j,k,l,m,n;

  ll all, win;
  double winp;

  int ok1[10000], ok2[10000]; ll oks;
  int cnt[200];

  int is_in[11000];

  scanf("%d",&T);
  while(T--){
    scanf("%d%d",&N,&H);
    printf("Case #%d: ",++count);
    while(H--){
      fprintf(stderr, "%d %d\n",T,H);
      scanf("%d%d",&C1,&C2);
      C1--; C2--;
      if(C1 > C2) k = C1, C1 = C2, C2 = k;
      
//      winp = brute_solve(N, C1, C2);

      all = win = 0;
      
      oks = 0;
      rep(i,N) if(i!=C1 && i!=C2) REP(j,i+1,N) if(j!=C1 && j!=C2){
        if(i+j > C1+C2) break;
        if(i+j==C1+C2 && j > C2) break;

        ok1[oks] = i;
        ok2[oks] = j;
        oks++;
      }

      all  = (N-2) * (N-3) / 2;
      all *= (N-4) * (N-5) / 2;
      all *= (N-6) * (N-7) / 2;

      win = oks * (oks-1) * (oks-2);

      rep(i,N) cnt[i] = 0;
      rep(i,oks) cnt[ok1[i]]++, cnt[ok2[i]]++;
      rep(i,N) win -= cnt[i] * (cnt[i]-1) * (oks-2) * 3;

//      rep(i,N) win += cnt[i] * (cnt[i]-1) * (cnt[i]-2) * 2;
      rep(i,oks){
        win += (cnt[ok1[i]]-1) * (cnt[ok1[i]]-2) * 2;
        win += (cnt[ok2[i]]-1) * (cnt[ok2[i]]-2) * 2;
        win += (cnt[ok1[i]]-1) * (cnt[ok2[i]]-1) * 6;
      }

      rep(i,N*N+10) is_in[i] = 0;
      rep(i,oks) is_in[ok1[i] * N + ok2[i]] = 1;

      rep(i,N) REP(j,i+1,N) REP(k,j+1,N) {
        if(is_in[i*N+j] && is_in[j*N+k] && is_in[i*N+k]) win -= 6;
      }

//      printf("%f %f (%lld / %lld)\n",winp,(double)win/all,win,all);

      if(win*4 > all) putchar('B'); else putchar('F');
    }
    puts("");
  }

  return 0;
}

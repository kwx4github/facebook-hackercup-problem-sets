#include <iostream>
#include <vector>
using namespace std;

bool works(int N, int a, int b) {
	long long fails = 0, tot = 0;
	for (int i = 0; i < N; ++i) {
		if (i == a || i == b) continue;
		for (int j = i+1; j < N; ++j) {
			if (j == a || j == b) continue;
			for (int k = j+1; k < N; ++k) {
				if (k == a || k == b) continue;
				tot += (N-5) * (N-6) * (N-7);
				int needk = a + b - k;
				// if the other in the hand with k is > needk, they win
				if (needk <= 0) {
					fails += (N-5) * (N-6) * (N-7);
					continue;
				}
				if (needk > N)
					continue;
				int kabove = N-needk-1 - (k > needk) - (j > needk) - (i > needk) - (a > needk) - (b > needk);
				int kat = needk != k && needk != i && needk != j && needk != a && needk != b;
				int kbelow = N-5 - kabove - kat;
				fails += kabove * (N-6) * (N-7);
				if ((needk > b || k > b) && kat) // if we get exactly needk
					fails += (N-6) * (N-7);

				int needj = a + b - j;
				if (needj > N)
					continue;
				int jabove = N-needj-1 - (k > needj) - (j > needj) - (i > needj) - (a > needj) - (b > needj);
				int jat = needj != k && needj != i && needj != j && needj != a && needj != b;
				int jbelow = N-6 - jabove - jat;
				fails += kbelow * jabove * (N-7);
				if ((needj > b || j > b) && jat)
					fails += kbelow * (N-7);

				int needi = a + b - i;
				if (needi > N)
					continue;
				int iabove = N-needi-1 - (k > needi) - (j > needi) - (i > needi) - (a > needi) - (b > needi);
				int iat = needi != k && needi != i && needi != j && needi != a && needi != b;
				fails += kbelow * jbelow * iabove;
				if ((needi > b || i > b) && iat)
					fails += kbelow * jbelow;
			}
		}
	}
// cout << (double)(tot - fails) / tot << endl;
	return (tot - fails) * 4 >= tot;
}

void solve() {
	int N, H;
	cin >> N >> H;
	vector<vector<bool> > sol(N, vector<bool>(N, false));
	int b = N;
	for (int a = 0; a < N; ++a) {
		while (b-1 > a && works(N, a, b-1))
			--b;
		for (int j = b; j < N; ++j)
			sol[a][j] = true;
		if (b <= a) {
			for (int i = a; i < N; ++i)
				for (int j = b; j < N; ++j)
					sol[i][j] = true;
			break;
		}
	}
	for (int i = 0; i < H; ++i) {
		int c1, c2;
		cin >> c1 >> c2;
		--c1, --c2;
		if (c2 < c1) swap(c2, c1);
		cout << (sol[c1][c2] ? 'B' : 'F');
	}
}

int main() {
	// cout << works(8, 3, 6); return 0;
	cin.sync_with_stdio(false);
	int T;
	cin >> T;
	for (int i = 0; i < T; ++i) {
		cout << "Case #" << (i+1) << ": ";
		solve();
		cout << endl;
	}
	return 0;
}

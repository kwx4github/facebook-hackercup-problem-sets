#include <iostream>
#include <cassert>
#include <algorithm>
using namespace std;

int n, c, hl, yl, z, ways, l1, l2, t, lim, tqn, tqi, i, j, h, you, bound[105], a, b, x, y, prev[105][105];
long long kol, C[105][105], wincases;

inline bool wins(int a, int b, int c, int d) {
	return (a + b > c + d || (a + b == c + d && max(a, b) > max(c, d)));
}

inline int worse_than(int lo, int hi, int t1, int t2) {
	int f1, s1, f2, s2, ret = 0, upper;
	if (t1 != 0) {
		f1 = t1;
		for(s1 = 1; s1 <= n; s1++) if (s1 != lo && s1 != hi && s1 != t1 && s1 != t2 && s1 != f1) if (wins(lo, hi, f1, s1)) {
			if (t2 != 0) {
				f2 = t2;
				
				upper = lo + hi - f2;
				upper = min(upper, n);
				if (upper + f2 == lo + hi && max(upper, f2) >= max(lo, hi)) --upper;				
				ways = upper;
				if (upper >= lo) --ways;
				if (upper >= hi) --ways;
				if (upper >= f1) --ways;
				if (upper >= f2) --ways;
				if (upper >= s1) --ways;
				ret += ways;				
				
//				int ad2=0;
				
//				for (s2 = 1; s2 <= n; s2++) if (s2 != lo && s2 != hi && s2 != t1 && s2 != t2 && s2 != f1 && s2 != s1 && s2 != f2 && wins(lo, hi, f2, s2)) ++ad2;//++ret;
//				cout << ad2 << " " << ways << endl;
//				if (ad2 != ways) {
//					n ^= 1;
//					n ^= 1;
//				}
			}else for(f2 = 1; f2 <= n; f2++) if (f2 != lo && f2 != hi && f2 != t1 && f2 != t2 && f2 != f1 && f2 != s1) {
				
				upper = lo + hi - f2;
				upper = min(upper, n);
				if (upper + f2 == lo + hi && max(upper, f2) >= max(lo, hi)) --upper;				
				ways = upper;
				if (upper >= lo) --ways;
				if (upper >= hi) --ways;
				if (upper >= f1) --ways;
				if (upper >= f2) --ways;
				if (upper >= s1) --ways;
				ret += ways;				
				
//				for (s2 = 1; s2 <= n; s2++) if (s2 != lo && s2 != hi && s2 != t1 && s2 != t2 && s2 != f1 && s2 != s1 && s2 != f2 && wins(lo, hi, f2, s2)) ++ret;
			}
		}
	}else{
		for(f1 = 1; f1 <= n; f1++) if (f1 != lo && f1 != hi && f1 != t1 && f1 != t2) {
			for(s1 = 1; s1 <= n; s1++) if (s1 != lo && s1 != hi && s1 != t1 && s1 != t2 && s1 != f1) if (wins(lo, hi, f1, s1)) {
				if (t2 != 0) {
					f2 = t2;
					
					upper = lo + hi - f2;
					upper = min(upper, n);
					if (upper + f2 == lo + hi && max(upper, f2) >= max(lo, hi)) --upper;				
					ways = upper;
					if (upper >= lo) --ways;
					if (upper >= hi) --ways;
					if (upper >= f1) --ways;
					if (upper >= f2) --ways;
					if (upper >= s1) --ways;
					ret += ways;				
					
//					for (s2 = 1; s2 <= n; s2++) if (s2 != lo && s2 != hi && s2 != t1 && s2 != t2 && s2 != f1 && s2 != s1 && s2 != f2 && wins(lo, hi, f2, s2)) ++ret;
				}else for(f2 = 1; f2 <= n; f2++) if (f2 != lo && f2 != hi && f2 != t1 && f2 != t2 && f2 != f1 && f2 != s1) {
					
					
					upper = lo + hi - f2;
					upper = min(upper, n);
					if (upper + f2 == lo + hi && max(upper, f2) >= max(lo, hi)) --upper;				
					ways = upper;
					if (upper >= lo) --ways;
					if (upper >= hi) --ways;
					if (upper >= f1) --ways;
					if (upper >= f2) --ways;
					if (upper >= s1) --ways;
					ret += ways;				
					
					
//					for (s2 = 1; s2 <= n; s2++) if (s2 != lo && s2 != hi && s2 != t1 && s2 != t2 && s2 != f1 && s2 != s1 && s2 != f2 && wins(lo, hi, f2, s2)) ++ret;
				}
			}
		}
	}
	if (!t1) ret /= 2;
	if (!t2) ret /= 2;
	return ret;
}

bool allright(int lo, int hi) {
	kol = 0;
	int i, j, losepairs, upper, kk;
	
	losepairs = 0;
	
	for(i = 1; i <= n; i++) for(j = i+1; j <= n; j++) if (i != lo && i != hi && j != lo && j != hi && wins(lo, hi, i, j))
		for(t = 2; t <= n; t++) if (t != lo && t != hi && t != i && t != j) {
			if (t > max(lo, hi)) upper =  lo + hi - t - 1; else upper = lo + hi - t;
			upper = min(upper, t - 1);
			if (upper == 0) continue;
			ways = upper;
			if (upper >= i) --ways;
			if (upper >= j) --ways;
			if (upper >= lo) --ways;
			if (upper >= hi) --ways;
			losepairs += ways;
		}
	
//	cout << losepairs << " aaa " << worse_than(lo, hi, 0, 0) << endl;
	
	for(i = 1; i <= n; i++) for(j = i+1; j <= n; j++) if(i != lo && i != hi && j != lo && j != hi && wins(i, j, lo, hi)) {
		for(c = 1; c < 4; c++) {
			if (c == 1) kol += C[n - 4][2] * C[n - 6][2];
			if (c == 2) {
				for(hl = 1; hl <= n; hl++) if (hl != i && hl != j && hl != lo && hl != hi) { // maximal of the first loser
					if (hl > max(lo, hi)) yl = lo + hi - hl - 1; else yl = lo + hi - hl;
					if (yl >= hl) yl = hl - 1;
					if (yl < 1) continue;
					ways = yl;
					if (yl >= i) --ways;
					if (yl >= j) --ways;
					if (yl >= lo) --ways;
					if (yl >= hi) --ways;
					kol += max(ways, 0) * 1LL * C[n - 6][2];
				}
			}
			if (c == 3) {
/*				int kk2=0;
				for(l1 = 1; l1 <= n; l1++) if (l1 != lo && l1 != hi && l1 != i && l1 != j)
					for(l2 = l1 + 1; l2 <= n; l2++) if (l2 != lo && l2 != hi && l2 != i && l2 != j && l2 != l1 && wins(lo, hi, l1, l2)) {
						for(t = 2; t <= n; t++) if (t != lo && t != hi && t != i && t != j && t != l1 && t != l2) {
							if (t >= max(lo, hi)) lim = lo + hi - t - 1; else lim = lo + hi - t;
							if (lim >= t) lim = t - 1;
							if (lim < 1) break;
							ways = lim;
							if (lim >= lo) --ways;
							if (lim >= hi) --ways;
							if (lim >= l1) --ways;
							if (lim >= l2) --ways;
							if (lim >= i) --ways;
							if (lim >= j) --ways;
							kol += ways;
							kk2 += ways;
						}
					}*/
				kk = worse_than(lo, hi, i, 0) + worse_than(lo, hi, 0, j) + worse_than(lo, hi, j, 0) + worse_than(lo, hi, 0, i) - worse_than(lo, hi, i, j) - worse_than(lo, hi, j, i);
//				cout << kk2 << " " << losepairs - kk << endl;
//				assert(kk2 == losepairs - kk);
				kol += losepairs - kk;
			}
		}
	}
	wincases = C[n - 2][2] * 1LL * C[n - 4][2] * 1LL * C[n - 6][2] - kol;
	return wincases * 3LL - kol > 0;
}

int main (int argc, char * const argv[]) {
	freopen("log.txt", "r", stdin);
	for(n = 81; n <= 100; n++)
		for(i = 1; i <= n; i++) {
			cin >> x >> y >> z;
			prev[x][y] = z;
		}
		
	freopen("input.txt", "r", stdin);
	cin >> tqn;
	C[0][0] = 1;
	for(i = 1; i <= 101; i++) {
		C[i][0] = 1;
		for(j = 1; j <= i; j++) C[i][j] = C[i-1][j] + C[i-1][j-1];
	}
	for(tqi = 1; tqi <= tqn; tqi++) {
		cin >> n >> h;
		cout << "Case #" << tqi << ": ";
		if (! (n >= 81)) {
			you = n + 1;
			for(i = 1; i <= n; i++) {			
				while (you > i && allright(i, you - 1)) --you;
				bound[i] = you;
			}
		} else for (i = 1; i <= n; i++) bound[i] = prev[n][i];
		for(i = 1; i <= h; i++) {
			cin >> a >> b;
			if (a > b) swap(a, b);
			if (bound[a] <= b) cout << "B"; else cout << "F";
		}
		cout << endl;
	}
    return 0;
}

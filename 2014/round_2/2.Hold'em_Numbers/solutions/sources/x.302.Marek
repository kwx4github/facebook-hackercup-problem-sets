#include<iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <cmath>
#include <list>
#include <sstream>
#include <algorithm>

using namespace std;

typedef pair<int,int> PII;
typedef long long LL;
typedef vector<int> VI;
typedef pair<LL,LL> PLL;
typedef vector<pair<int,int> > VPII;
typedef vector<LL> VLL;
typedef vector<vector<int> > VVI;
typedef vector<string> VS;
typedef long double LD;
typedef vector<char> VC;

#define PI 3.14159265358979323
#define EE 2.71828182845
#define EPS 10e-10
#define INF 10000000

inline LL MAX(LL a, LL b){ return a < b ? b : a;}
inline LL MIN(LL a, LL b){ return a < b ? a : b;}

#define FOR(i,n)      for(int i=0;i<(n);i++)
#define FORD(i,n)     for(int i=(n)-1;i>=0;i--)

#define MP make_pair
#define PB push_back

#define NUM 1000000

//false, ak c1 > c2
//true, ak c1 < c2
bool comp(PII c1, PII c2){
  if (c1.first + c1.second > c2.first + c2.second) return false;
  if (c1.first + c1.second == c2.first + c2.second && max(c1.first, c1.second) > max(c2.first, c2.second)) return false;
  return true;
}

void shuffle(VI &temp){
  for(int d = temp.size() - 1; d >= 1; d--) swap(temp[d], temp[rand() % (d+1)]);
}

// c1 < c2
bool oplati_sa(int c1, int c2, int N){

  //cout << "testujem " << c1 << " " << c2 << " " << N << endl;
  VI temp;
  FOR(i, N) if (i != c1 && i != c2) temp.PB(i);

  double win = 0, loose = 0;
  PII nasa = MP(c1, c2);

  int NN = NUM;
  if (N < 10) NN /= 100;

  while(win + loose < NUM){

    shuffle(temp);

    //cout << "zgeneroval som " << endl;
    //FOR(i, 6) cout << temp[i] << " ";
    //cout << endl;
   
    if (comp(MP(temp[2], temp[3]), nasa) && comp(MP(temp[4], temp[5]), nasa) && comp(MP(temp[6], temp[7]), nasa)) win++;
    else loose++;
  }

  //cout << "koncim: " << win << " " << loose << endl;
  return win > ((double)NUM)/4;
}

void solve(int tc){
  int H, N;
  cin >> N >> H;
  cout << "Case #" << tc << ": ";
  VPII ruky(0);
  FOR(i,N) FOR(j, N) if (i < j) ruky.PB( MP(i,j));
  sort(ruky.begin(), ruky.end(), comp);

//  FOR(i, ruky.size()) cout << ruky[i].first << ":" << ruky[i].second << " ";
//  cout << endl;

  map<PII,int> M;
  FOR(i, ruky.size()) M[ruky[i]] = i;

  //hladame treshold, odkedy viac sa to uz oplati
  int lo = 0;
  int hi = ruky.size() - 1;
  while(hi - lo > 1){
    int mid = (lo + hi)/2;
    if (oplati_sa(ruky[mid].first, ruky[mid].second, N)) hi = mid;
    else lo = mid;
  }

  int tresh = hi;
  if (oplati_sa(ruky[lo].first, ruky[lo].second, N)) tresh = lo;

  //cout << "oplati sa vsadit na vsetko s rukou " << ruky[tresh].first << ":" << ruky[tresh].second << endl;
  PII ruka = MP(ruky[tresh].first, ruky[tresh].second);

  FOR(i, H){
    int C1, C2;
    cin >> C1 >> C2;
    C1--, C2--;
    if (C1 > C2) swap(C1, C2);
    PII test = MP(C1,C2);
    if (test == ruka) cout << "B";
    else if (comp(ruka, test)) cout << "B";
    else cout << "F";
  }
  cout << endl;
}

int main(){
  srand(time(NULL));
  int TT;
  cin >> TT;
  FOR(tt, TT) solve(tt + 1);
  return 0;
}

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <utility>
#include <set>
#define MAXN 105

using namespace std;

int main ()
{
	static long long w1[MAXN][MAXN][MAXN][4];
	static long long w2[MAXN][MAXN][MAXN][4];
	static long long tempw[4][MAXN];
	static int W[4];
	int N, X, Y, cnt, last, next, Z;
	memset(w1,0,sizeof(w1));
	for (N = 8; N <= 100; N++)
	{
		for (X = 1; X <= N; X++)
		{
			for (Y = X+1; Y <= N; Y++)
			{
				memset(tempw,0,sizeof(tempw));
				tempw[0][N] = 1LL;
				for (cnt = 0; cnt < 3; cnt++)
				{
					for (last = N; last > Y; last--)
					{
						if (tempw[cnt][last])
						{
							for (next = last; next > Y; next--)
							{
								Z = X + Y - next - 1;
								if (Z > cnt)
								{
									tempw[cnt+1][next-1] += tempw[cnt][last] * (long long)(Z - cnt);
								}
							}
						}
					}
				}
				for (cnt = 0; cnt < 4; cnt++)
				{
					for (last = N; last >= Y; last--) w1[N][X][Y][cnt] += tempw[cnt][last];
				}
				w1[N][X][Y][2] *= 2LL;
				w1[N][X][Y][3] *= 6LL;
			}
		}
	}
	memset(w2,0,sizeof(w2));
	int final, left, q;
	for (N = 8; N <= 100; N++)
	{
		for (X = 1; X <= N; X++)
		{
			for (Y = X+1; Y <= N; Y++)
			{
				if ((Y-X) > 2)
				{
					memset(tempw,0,sizeof(tempw));
					tempw[0][Y-1] = 1LL;
					final = (X+Y) / 2;
					for (cnt = 0; cnt < 3; cnt++)
					{
						for (last = Y-1; last > final; last--)
						{
							if (tempw[cnt][last])
							{
								for (next = last; next > final; next--)
								{
									Z = Y - next;
									if (Z > cnt)
									{
										tempw[cnt+1][next-1] += tempw[cnt][last] * (long long)(Z - cnt);
									}
								}
							}
						}
					}
					left = final - X;
					for (cnt = 0; cnt < 4; cnt++)
					{
						q = left - cnt;
						for (last = Y-1; last >= final; last--)
						{
							w2[N][X][Y][cnt] += tempw[cnt][last];
							if (cnt < 3) w2[N][X][Y][cnt+1] += tempw[cnt][last] * (((long long)(q) * (long long)(q-1)) / 2LL);
							if (cnt < 2) w2[N][X][Y][cnt+2] += tempw[cnt][last] * (((long long)(q) * (long long)(q-1) * (long long)(q-2) * (long long)(q-3)) / 8LL);
							if (cnt < 1) w2[N][X][Y][cnt+3] += tempw[cnt][last] * (((long long)(q) * (long long)(q-1) * (long long)(q-2) * (long long)(q-3) * (long long)(q-4) * (long long)(q-5)) / 48LL);
						}
					}
					w2[N][X][Y][2] *= 2LL;
					w2[N][X][Y][3] *= 6LL;
				}
				else
				{
					w2[N][X][Y][0] = 1LL;
					for (cnt = 1; cnt < 4; cnt++) w2[N][X][Y][cnt] = 0LL;
				}
			}
		}
	}
	int T, iT;
	long long overall;
	int spotsA, spotsB;
	scanf("%d",&T);
	for (iT = 0; iT < T; iT++)
	{
		printf("Case #%d: ",iT+1);
		int H;
		scanf("%d %d",&N,&H);
		overall = ((long long)(N-2) * (long long)(N-3) * (long long)(N-4) * (long long)(N-5) * (long long)(N-6) * (long long)(N-7)) / 8LL;
		int iH;
		for (iH = 0; iH < H; iH++)
		{
			scanf("%d %d",&X,&Y);
			if (X > Y)
			{
				int temp = X; X = Y; Y = temp;
			}
			long long res = 0LL;
			long long add;
			int mask, mask2, i;
			for (mask = 0; mask < 64; mask++)
			{
				mask2 = mask;
				memset(W,0,sizeof(W));
				for (i = 0; i < 3; i++)
				{
					W[mask2 % 4]++;
					mask2 /= 4;
				}
				add = w1[N][X][Y][W[0]] * w2[N][X][Y][W[1]];
				spotsA = X - 1 - W[0];
				spotsB = Y - X - 1 - 2 * W[1];
				if ((spotsA >= (2 * W[2] + W[3])) && (spotsB >= W[3]))
				{
					if (W[2] == 1) add *= ((long long)(spotsA) * (long long)(spotsA-1)) / 2LL;
					else if (W[2] == 2) add *= ((long long)(spotsA) * (long long)(spotsA-1) * (long long)(spotsA-2) * (long long)(spotsA-3)) / 4LL;
					else if (W[2] == 3) add *= ((long long)(spotsA) * (long long)(spotsA-1) * (long long)(spotsA-2) * (long long)(spotsA-3) * (long long)(spotsA-4) * (long long)(spotsA-5)) / 8LL;
					spotsA -= 2 * W[2];
					if (W[3] == 1) add *= (long long)(spotsA) * (long long)(spotsB);
					else if (W[3] == 2) add *= (long long)(spotsA) * (long long)(spotsB) * (long long)(spotsA-1) * (long long)(spotsB-1);
					else if (W[3] == 3) add *= (long long)(spotsA) * (long long)(spotsB) * (long long)(spotsA-1) * (long long)(spotsB-1) * (long long)(spotsA-2) * (long long)(spotsB-2);
					res += add;
				}
			}
			if ((4LL * res) > overall) printf("B");
			else printf("F");
			//printf("(%I64i/%I64i)",res,overall);
		}
		printf("\n");
	}
	return 0;
}

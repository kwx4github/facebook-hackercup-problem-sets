#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <numeric>
typedef long long ll;
using namespace std;
#define F0(i,n) for (i=0;i<n;i++)
#define F1(i,n) for (i=1;i<=n;i++)
#define CL(a,x) memset(x, a, sizeof(x))
#define SZ(s) ((int)s.size())
const double eps = 1e-9;
const int inf = 1000000009;
typedef pair<int,int> pii;
int i, j, k, m, n, ans, A, B, c[105], ca[105][105][105];

bool beats(int x, int y)
{
	return (x+y) > A+B || ((x+y)==(A+B) && max(x,y)>max(A,B));
}

int bad=0;
bool bet()
{
	int tries = 100;
	double prec = 20;
	while (tries < 1000000000)
	{
		tries *= 10;
		prec /= 5;
		int wins = 0;
		for (int i = 0; i < tries; i++)
		{
			CL(0,c);
			c[A] = c[B] = 1;
			bool good = true;
			F0(j,3)
			{
				int x = rand()%n + 1; while (c[x]) x = rand()%n+1;
				c[x] = 1;
				int y = rand()%n + 1; while (c[y]) y = rand()%n+1;
				c[y] = 1;
				if (beats(x,y)) { good = false; break; }
			}
			if (good) wins++;
		}
		//cout << endl << 100.0*wins / tries << endl;
		double p = (100.0*wins / tries);

		if (tries >= 1000000)
			 cerr << n << " " << A << " " << B << " " << p << " " << tries << endl;

		if (p > 25.0+prec || p < 25.0-prec) return p > 25.0;
	}
	throw 1;
}


void solve()
{

	if (A > B) swap(A, B);
	bool f;
	if (ca[n][A][B] != -1)
	{
		f = ca[n][A][B];
	}
	else
	{
		f = bet();
		ca[n][A][B] = f;
	}
	if (f) cout << "B"; else cout << "F";
}

int main() {
	freopen("b.in", "r", stdin);
	freopen("b.out", "w", stdout);

	CL(-1, ca);

	int tn; cin >> tn; for (int ti = 1; ti <= tn; ti++)
	{
		int h;
		cin >> n >> h;
		printf("Case #%d: ", ti); 
		for (int hh = 1; hh <= h; hh++)
		{
			if (hh % 100 == 0) cerr << hh << "/" << h << endl;
			cin >> A >> B;
			solve();
		}
		cout << endl;
	}

	return 0;
} 

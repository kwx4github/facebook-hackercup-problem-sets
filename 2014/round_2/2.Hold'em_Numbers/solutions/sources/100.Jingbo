#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <string>
#include <sstream>
using namespace std;

#define FOR(i,a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++ i)

const double PI = acos(-1.0);
const double EPS = 1e-8;


int main()
{
    freopen("B.in", "r", stdin);
    freopen("B.out", "w", stdout);
    
    int T, test = 1;
    for (scanf("%d", &T); test <= T; ++ test) {
        printf("Case #%d: ", test);
        
        int n, h;
        scanf("%d%d", &n, &h);
        
        long long total = 1;
        for (int i = 2; i < 8; ++ i) {
            total *= n - i;
        }
        total /= 6 * 8;
//cerr << total << endl;
        while (h --) {
            int c1, c2;
            scanf("%d%d", &c1, &c2);
            long long win = 0, f[n + 1][4];
            memset(f, 0, sizeof(f));
            f[n][0] = 1;
            for (int i = n; i >= 0; -- i) {
                for (int j = 0; j <= 3; ++ j) {
                    if (f[i][j] == 0) {
                        continue;
                    }
//cerr << i << "," << j << " = " << f[i][j] << endl;
                    if (j == 3) {
                        win += f[i][j];
                    } else {
                        int limit = c1 + c2 - i;
                        if (limit >= i) {
                            int cnt = i - j - (c1 <= i) - (c2 <= i);
                            long long temp = f[i][j];
                            for (int k = 0; k < (3 - j) * 2; ++ k) {
                                temp *= cnt - k;
                            }
                            for (int k = 1; k <= 3 - j; ++ k) {
                                temp /= k * 2;
                            }
                            win += temp;
                        } else {
                            int cnt = limit - j - (c1 < limit) - (c2 < limit);
                            if (i > max(c1, c2) || limit == c1 || limit == c2) {
                                -- cnt;
                            }
                            
                            if (i != c1 && i != c2 && cnt > 0) { // select i and some smaller
                                f[i - 1][j + 1] += f[i][j] * cnt;
                            }
                            f[i - 1][j] += f[i][j];
                        }
                    }
                }
            }
//cout << "win = " << win << endl;
            if (win * 3 > total - win) {
                printf("B");
            } else {
                printf("F");
            }
        }
        puts("");
    }
    
    return 0;
}

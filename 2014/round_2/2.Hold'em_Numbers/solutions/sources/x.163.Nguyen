#include <bits/stdc++.h>
using namespace std;

int n, least[111];

int brute(int a, int aa, int b, int c, int d, int eb, int ec, int ed)
{
	int res = 0;
	for (int bb = 1; bb < b && b + bb <= a + aa; bb++)
	{
		if (bb == a || bb == aa) continue;
		if (eb ^ (b + bb == a + aa)) continue;
		if (eb && b > a) continue;
		for (int cc = 1; cc < c && c + cc <= a + aa; cc++)
		{
			if (cc == a || cc == aa) continue;
			if (cc == b || cc == bb) continue;
			if (ec ^ (c + cc == a + aa)) continue;
			if (ec && c > a) continue;
			for (int dd = 1; dd < d && d + dd <= a + aa; dd++)
			{
				if (dd == a || dd == aa) continue;
				if (dd == b || dd == bb) continue;
				if (dd == c || dd == cc) continue;
				if (ed ^ (d + dd == a + aa)) continue;
				if (ed && d > a) continue;
				res++;
			}
		}
	}
	return res;
}

int isGood(int a, int aa)
{
	int sum = a + aa, used[111] = {0};
	used[a] = used[aa] = 1;
	
	long long winWays = 0;
	
	for (int b = 2; b <= n - 2; b++)
		for (int equalB = 0; equalB < 2; equalB++)
			for (int c = b + 1; c <= n - 1; c++)
				for (int equalC = 0; equalC < 2; equalC++)
					for (int d = c + 1; d <= n; d++)
						for (int equalD = 0; equalD < 2; equalD++)
						{
							if (used[b] || used[c] || used[d]) continue;
							if (equalB && (b > a || sum - b >= b || sum - b == c || sum - b == d)) continue;
							if (equalC && (c > a || sum - c >= c || sum - c == b || sum - c == d)) continue;
							if (equalD && (d > a || sum - d >= d || sum - d == b || sum - d == c)) continue;
							
							int equalValues[3] = {n + 1, n + 1, n + 1}, equal[3] = {equalB, equalC, equalD};
							
							if (equalB) equalValues[0] = sum - b;
							if (equalC) equalValues[1] = sum - c;
							if (equalD) equalValues[2] = sum - d;
							
							int bound[3] = {min(b - 1, sum - 1 - b), min(c - 1, sum - 1 - c), min(d - 1, sum - 1 - d)};
							
							for (int i = 0; i < 3; i++)
								for (int j = i + 1; j < 3; j++)
									if (bound[i] > bound[j])
									{
										swap(bound[i], bound[j]);
										swap(equalValues[i], equalValues[j]);
										swap(equal[i], equal[j]);
									}
									
							long long ways = 1;
							for (int i = 0; i < 3; i++)
								if (!equal[i])
								{
									int curWay = bound[i] - i - (a <= bound[i]) - (aa <= bound[i]);
									curWay -= (b <= bound[i]);
									curWay -= (c <= bound[i]);
									curWay -= (d <= bound[i]);
									for (int j = 0; j < 3; j++)
										if (equalValues[j] < bound[i]) curWay--;
									ways *= max(0, curWay);
								}
							
							winWays += 48LL * ways;
							//if (a == 9 && aa == 6 && ways) cerr << b << ',' << equalB << " " << c << ',' << equalC << " " << d << ',' << equalD << " = " << ways << ' ' << brute(a, aa, b, c, d, equalB, equalC, equalD) << endl;
						}
	
	long long totalWays = 1;
	for (int i = 0; i < 6; i++) totalWays *= (n - 2 - i);
	//cerr << a << ' ' << aa << " = " << winWays << ' ' << totalWays << endl;
	
	return winWays * 4 > totalWays;
}

void init()
{
	for (int a = 2; a <= n; a++)
	{
		int low = 1, high = a - 1;
		least[a] = a;
		while (low <= high)
		{
			int mid = (low + high) / 2;
			if (isGood(a, mid)) least[a] = mid, high = mid - 1;
			else low = mid + 1;
		}
		//cerr << a << " = " << least[a] << endl;
	}
}

int main()
{
	freopen("b.in", "r", stdin);
	freopen("b.out", "w", stdout);
	
	int test, h;
	cin >> test;
	for (int idTest = 1; idTest <= test; idTest++)
	{
		cerr << idTest << endl;
		cin >> n >> h;
		init();
		cout << "Case #" << idTest << ": ";
		while (h--)
		{
			int x, y;
			cin >> x >> y;
			if (x < y) swap(x, y);
			cout << (least[x] <= y ? 'B' : 'F');
		}
		cout << endl;
	}
}

import std.stdio, std.string, std.conv;
import std.algorithm, std.array, std.bigint, std.math, std.range;
import core.thread;

//	Input
string[] tokens;
int tokenId = 0;
string readToken() { for (; tokenId == tokens.length; ) tokens = readln.split, tokenId = 0; return tokens[tokenId++]; }
int readInt() { return to!int(readToken); }
long readLong() { return to!long(readToken); }
real readReal() { return to!real(readToken); }

//	chmin/chmax
void chmin(T)(ref T t, T f) { if (t > f) t = f; }
void chmax(T)(ref T t, T f) { if (t < f) t = f; }

//	Pair
struct Pair(S, T) {
	S x; T y;
	int opCmp(    const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	int opCmp(ref const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	string toString() const { return "(" ~ to!string(x) ~ ", " ~ to!string(y) ~ ")"; }
}
auto pair(S, T)(S x, T y) { return Pair!(S, T)(x, y); }

//	Array
int binarySearch(T)(T[] as, bool delegate(T) test) {
	int low = -1, upp = as.length; for (; low + 1 < upp; ) { int mid = (low + upp) >> 1; (test(as[mid]) ? low : upp) = mid; } return upp;
}
int lowerBound(T)(T[] as, T val) { return as.binarySearch((T a){ return (a <  val); }); }
int upperBound(T)(T[] as, T val) { return as.binarySearch((T a){ return (a <= val); }); }
T[] unique(T)(T[] as) { T[] bs; foreach (a; as) if (bs == null || bs[$ - 1] != a) bs ~= a; return bs; }


immutable LIM = 105;
shared long[][] bn;

void prepare() {
	bn = new shared(long[][])(LIM, LIM);
	foreach (i; 0 .. LIM) {
		bn[i][0] = bn[i][i] = 1;
		foreach (j; 1 .. i) {
			bn[i][j] = bn[i - 1][j - 1] + bn[i - 1][j];
		}
	}
}

class Solver : Thread {
	int caseId;
	this(int caseId) {
		this.caseId = caseId;
		super(&main);
	}
	void main() {
		try {
			run;
			stderr.writeln("DONE  Case #", caseId);
		} catch (Throwable e) {
			stderr.writeln("ERROR Case #", caseId, ": ", e.msg);
		} finally {
			stderr.flush;
		}
	}
	
	int N;
	
	long getCount1Brute(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (a1 != x1 && a1 != x2) if (a2 != x1 && a2 != x2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) 
		{
			{
				++ret;
			}
		}
		return ret;
	}
	long getCount2Brute(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (a1 != x1 && a1 != x2) if (a2 != x1 && a2 != x2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) 
		for (int b1 = 1; b1 <= N; ++b1) for (int b2 = 1; b2 < b1; ++b2) if (b1 != x1 && b1 != x2) if (b2 != x1 && b2 != x2) if (pair(x1 + x2, x1) > pair(b1 + b2, b1)) 
		{
			if (a1 == b1 || a1 == b2 || a2 == b1 || a2 == b2) 
			{
				++ret;
			}
		}
		return ret;
	}
	long getCount22Brute(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (a1 != x1 && a1 != x2) if (a2 != x1 && a2 != x2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) 
		for (int b1 = 1; b1 <= N; ++b1) for (int b2 = 1; b2 < b1; ++b2) if (b1 != x1 && b1 != x2) if (b2 != x1 && b2 != x2) if (pair(x1 + x2, x1) > pair(b1 + b2, b1)) 
		for (int c1 = 1; c1 <= N; ++c1) for (int c2 = 1; c2 < c1; ++c2) if (c1 != x1 && c1 != x2) if (c2 != x1 && c2 != x2) if (pair(x1 + x2, x1) > pair(c1 + c2, c1)) 
		{
			if (a1 == b1 || a1 == b2 || a2 == b1 || a2 == b2) 
			if (a1 == c1 || a1 == c2 || a2 == c1 || a2 == c2) 
			{
				++ret;
			}
		}
		return ret;
	}
	long getCount3Brute(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (a1 != x1 && a1 != x2) if (a2 != x1 && a2 != x2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) 
		for (int b1 = 1; b1 <= N; ++b1) for (int b2 = 1; b2 < b1; ++b2) if (b1 != x1 && b1 != x2) if (b2 != x1 && b2 != x2) if (pair(x1 + x2, x1) > pair(b1 + b2, b1)) 
		for (int c1 = 1; c1 <= N; ++c1) for (int c2 = 1; c2 < c1; ++c2) if (c1 != x1 && c1 != x2) if (c2 != x1 && c2 != x2) if (pair(x1 + x2, x1) > pair(c1 + c2, c1)) 
		{
			if (a1 == b1 || a1 == b2 || a2 == b1 || a2 == b2) 
			if (a1 == c1 || a1 == c2 || a2 == c1 || a2 == c2) 
			if (b1 == c1 || b1 == c2 || b2 == c1 || b2 == c2) 
			{
				++ret;
			}
		}
		return ret;
	}
	long getCountBrute(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) 
		for (int b1 = 1; b1 <= N; ++b1) for (int b2 = 1; b2 < b1; ++b2) if (pair(x1 + x2, x1) > pair(b1 + b2, b1)) 
		for (int c1 = 1; c1 <= N; ++c1) for (int c2 = 1; c2 < c1; ++c2) if (pair(x1 + x2, x1) > pair(c1 + c2, c1)) 
		{
			int[] cards = [ x1, x2, a1, a2, b1, b2, c1, c2 ];
			cards.sort();
			if (cards.unique.length == 8) {
				++ret;
			}
		}
		return ret;
	}
	
	int[][][] lims, cnts;
	
	int[] sum;
	int remain(int y, int z) {
		chmax(y, 1);
		chmin(z, N);
		if (y > z) {
			return 0;
		}
		return sum[z + 1] - sum[y];
	}
	
	long getCount1(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (a1 != x1 && a1 != x2) if (a2 != x1 && a2 != x2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) {
			ret += 1;
		}
		return ret;
	}
	
	long getCount2(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (a1 != x1 && a1 != x2) if (a2 != x1 && a2 != x2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) {
			ret += cnts[x1][x2][a1] + cnts[x1][x2][a2] - 1;
		}
		return ret;
	}
	
	long getCount22(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (a1 != x1 && a1 != x2) if (a2 != x1 && a2 != x2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) {
			ret += (cnts[x1][x2][a1] + cnts[x1][x2][a2] - 1) ^^ 2;
		}
		return ret;
	}
	
	long getCount3(int x1, int x2) {
		long ret;
		for (int a1 = 1; a1 <= N; ++a1) for (int a2 = 1; a2 < a1; ++a2) if (a1 != x1 && a1 != x2) if (a2 != x1 && a2 != x2) if (pair(x1 + x2, x1) > pair(a1 + a2, a1)) {
			ret += cnts[x1][x2][a1] ^^ 2 + cnts[x1][x2][a2] ^^ 2 - 1;
			ret += remain(1, a2 - 1) * 6;
		}
		return ret;
	}
	
	long getCount(int x1, int x2) {
		sum = new int[N + 2];
		for (int y = 1; y <= N; ++y) {
			sum[y + 1] = sum[y] + ((y != x1 && y != x2) ? 1 : 0);
		}
// for(int y=1;y<=N;++y)if(y!=x1&&y!=x2)assert(remain(1,lims[x1][x2][y])-((y<=lims[x1][x2][y])?1:0)==cnts[x1][x2][y],
// to!string(x1)~" "~to!string(x2)~" "~to!string(y)~" : "~to!string(lims[x1][x2][y])~" "~to!string(cnts[x1][x2][y]));
		long p1 = getCount1(x1, x2);
		long p2 = getCount2(x1, x2);
		long p22 = getCount22(x1, x2);
		long p3 = getCount3(x1, x2);
// writeln(p1," ",p2," ",p22," ",p3);
// writeln(getCount1Brute(x1,x2)," ",getCount2Brute(x1,x2)," ",getCount22Brute(x1,x2)," ",getCount3Brute(x1,x2));
		long ret;
		ret += p1 ^^ 3;
		ret -= p2 * p1 * 3;
		ret += p22 * 3;
		ret -= p3;
		return ret;
	}
	
	bool solve(int x1, int x2) {
		if (x1 < x2) {
			swap(x1, x2);
		}
		long total = bn[N - 2][2] * bn[N - 4][2] * bn[N - 6][2];
		long res = getCount(x1, x2);
// writeln(total,"; ",res," ",getCountBrute(x1,x2)," ");
		return (res * 4 >= total);
	}
	
	int H;
	int[] X1, X2;
	string ans;
	
	void run() {
		lims = new int[][][](N + 1, N + 1, N + 1);
		cnts = new int[][][](N + 1, N + 1, N + 1);
		for (int x1 = 1; x1 <= N; ++x1) for (int x2 = 1; x2 < x1; ++x2) {
			for (int y1 = 1; y1 <= N; ++y1) for (int y2 = 1; y2 < y1; ++y2) {
				if (y1 != x1 && y1 != x2) if (y2 != x1 && y2 != x2) {
					if (pair(x1 + x2, x1) > pair(y1 + y2, y1)) {
						chmax(lims[x1][x2][y1], y2);
						chmax(lims[x1][x2][y2], y1);
						++cnts[x1][x2][y1];
						++cnts[x1][x2][y2];
					}
				}
			}
		}
		foreach (h; 0 .. H) {
			ans ~= solve(X1[h], X2[h]) ? 'B' : 'F';
		}
	}
	
	void input() {
		N = readInt;
		H = readInt;
		X1 = new int[H];
		X2 = new int[H];
		foreach (h; 0 .. H) {
			X1[h] = readInt;
			X2[h] = readInt;
		}
	}
	
	void output() {
		writeln("Case #", caseId, ": ", ans);
		stdout.flush;
	}
}

void main(string[] args) {
	bool parallel = false;
	foreach (arg; args) if (arg == "-p") parallel = true;
	prepare;
	auto solvers = new Solver[readInt];
	foreach (caseId, ref solver; solvers) solver = new Solver(caseId + 1);
	if (parallel) {
		foreach (solver; solvers) solver.input, solver.start;
		foreach (solver; solvers) solver.join, solver.output;
	} else {
		foreach (caseId, solver; solvers) {
			solver.input;
			solver.run;
			solver.output;
			stderr.writeln("DONE  Case #", caseId + 1);
			stderr.flush;
		}
	}
}


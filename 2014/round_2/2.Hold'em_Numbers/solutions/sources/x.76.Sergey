#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 105;

int n, h, m;
pii e[nmax * nmax];
int64 res[nmax * nmax];
int64 cnk[nmax][nmax];
bitset<nmax * nmax / 2> where[nmax], buf, now, st;

bool ls(pii a, pii b) {
	if (a.fs + a.sc != b.fs + b.sc)
		return a.fs + a.sc < b.fs + b.sc;
	return a.fs < b.fs;
}

int64 getPair(int id) {
 	if (id < 0) return 0;
 	int sum = e[id].fs + e[id].sc;
 	int up = e[id].fs;
 	int res = 0;
 	for (int x = 1; x <= n; x ++) {
		int nup = min(x - 1, sum - x);
		if (x + nup == sum && x >= up) nup --;
		if (nup < 2) break;
		res += nup * (nup - 1) / 2;
     }
     return 1ll * id * (id - 1) / 2 - res;
}

int64 getPair(int id, int a1, int a2, int a3, int a4) {
	vector<int> w;
	w.pb(a1);
	w.pb(a2);
	w.pb(a3);
	w.pb(a4);
	sort(all(w));

 	int sum = e[id].fs + e[id].sc;
 	int up = e[id].fs;
 	int res = 0;
 	for (int x = 1; x <= n; x ++) {
 		if (x == a1 || x == a2 || x == a3 || x == a4) continue;
 		
		int bnd = min(n, sum - x);
 		if (x >= up || bnd >= up)
 			bnd --;
		if (bnd < 1) continue;
 		int cnt = 0;
 		forn(i, w.size())
 			if (bnd >= w[i]) cnt ++;
 		if (bnd >= x) cnt ++;
 		int now = bnd - cnt;
 		res += max(0, now * (now - 1) / 2);
     }
     return res;
}

int64 calc(int id) {
	int64 res = 0;
	buf.reset();
	st = where[e[id].fs] & where[e[id].sc];

	for (int i = 0; i < id; i ++) {
		if (!st[i])	continue;
		now = (buf & where[e[i].fs] & where[e[i].sc]);
		int64 temp = now.count();	

		int qwe = temp * (temp - 1) / 2 - getPair(i, e[i].fs, e[i].sc, e[id].fs, e[id].sc);

		res += qwe;

		buf[i] = 1;
	}
	return res;
}

pii pre_calc(int n) {
	m = 0;
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < i; j ++)
			e[m++] = mp(i + 1, j + 1);
	sort(e, e + m, ls);

	for (int i = 1; i <= n; i ++) {
		where[i].reset();
		for (int j = 0; j < m; j ++)
			if (e[j].fs == i || e[j].sc == i)
				where[i][j] = 0;
			else
				where[i][j] = 1;
	}

	int64 buf = cnk[n-2][2] * cnk[n-4][2] * cnk[n-6][2] / 6;

//	int64 qwe = calc(m - 1);
//	cerr << buf << " " << qwe << endl;

	int l = 0, r = m - 1;
	while (l < r) {
		int mid = (l + r) / 2;
		int64 now = calc(mid);
		if (now * 4 > buf)
			r = mid;
		else
			l = mid + 1;
	}
//	cerr << n << " " << e[l].fs << " " << e[l].sc << endl;
	return mp(e[l].fs + e[l].sc, e[l].fs);
}

int solve() {
	cin >> n >> h;
	pii res = pre_calc(n);
	forn(i, h) {
		int a, b;
		cin >> a >> b;
//		a --; b --;
		if (a + b > res.fs || a + b == res.fs && max(a, b) >= res.sc)
			printf("B");
		else
			printf("F");
	}
	puts("");
	return 0;
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);
	
	for (int i = 0; i < nmax; i ++)
		for (int j = 0; j <= i; j ++) {
			if (j == 0) {
				cnk[i][j] = 1;
				continue;
			}
			cnk[i][j] = cnk[i-1][j] + cnk[i-1][j-1];
		}

	int tst;
	cin >> tst;
	forn (i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
	}

	return 0;
}

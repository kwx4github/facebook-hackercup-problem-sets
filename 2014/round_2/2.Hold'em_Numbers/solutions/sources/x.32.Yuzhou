#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <ctime>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <sstream>
#include <iostream>
#include <numeric>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;

#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define N 110
int n, h, a[N*N], b[N*N], L, n1, n2; 

bool cmp (int x, int y) {
	int x1 = x/n1, x2 = x%n1; 
	int y1 = y/n1, y2 = y%n1; 
	if (x1 + x2 != y1 + y2) return x1 + x2 < y1 + y2; 
	if (x1 > x2) swap(x1, x2); 
	if (y1 > y2) swap(y1, y2); 
	return x2 < y2; 
}

int s1[N], s2[N][N], s3[N][N][N]; 
int c[N*N*N*N/8]; int Lc; 
ll win[N*N]; 

bool cmpc(int x, int y) {
	return b[x%n2] < b[y%n2]; 
}

int main()
{
	int _; 
	scanf("%d", &_); 
	for (int __ = 1; __ <= _; __ ++) {
		scanf("%d%d", &n, &h); 
		n1 = n+1; n2 = n1*n1; 
		L = 0; 
		for (int i = 1; i <= n; i ++)
			for (int j = i+1; j <= n; j ++) 
				a[L++] = i*n1+j; 
		sort(a, a+L, cmp); 
		for (int i = 0; i < L; i ++) 
			b[a[i]] = i; 
		
		memset(s1, 0, sizeof s1); 
		memset(s2, 0, sizeof s2); 
		memset(s3, 0, sizeof s3); 
		Lc = 0; 
		for (int i = 0; i < L; i ++) 
			for (int j = i+1; j < L; j ++) {
				int x = a[i]/n1, y = a[i]%n1; 
				int z = a[j]/n1, w = a[j]%n1; 
				if (x == z || x == w || y == z || y == w) continue; 
				c[Lc++] = ((x*n1+y)*n1+z)*n1+w; 
			}
		sort(c, c+Lc, cmpc); 
		for (int i = 0; i < Lc; ) {
			int j = i; 
			while (j < Lc && c[i]%n2 == c[j]%n2) j ++; 
			for (int k = i; k < j; k ++) {
				int S = i; 
				int x = c[k]/n2/n1, y = c[k]/n2%n1; 
				int z = c[k]%n2/n1, w = c[k]%n2%n1; 
				if (x > y) swap(x, y); 
				if (y > z) swap(y, z); 
				if (z > w) swap(z, w); 
				if (x > y) swap(x, y); 
				if (y > z) swap(y, z); 
				if (x > y) swap(x, y); 
				S -= s1[x] + s1[y] + s1[z] + s1[w]; 
				S += s2[x][y] + s2[x][z] + s2[x][w] + s2[y][z] + s2[y][w] + s2[z][w]; 
				S -= s3[x][y][z] + s3[x][y][w] + s3[x][z][w] + s3[y][z][w]; 
				win[c[k]%n2] += S; 
			}
			for (int k = i; k < j; k ++) {
				int S = i; 
				int x = c[k]/n2/n1, y = c[k]/n2%n1; 
				int z = c[k]%n2/n1, w = c[k]%n2%n1; 
				if (x > y) swap(x, y); 
				if (y > z) swap(y, z); 
				if (z > w) swap(z, w); 
				if (x > y) swap(x, y); 
				if (y > z) swap(y, z); 
				if (x > y) swap(x, y); 
				s1[x] ++; s1[y] ++; s1[z] ++; s1[w] ++; 
				s2[x][y] ++; s2[x][z] ++; s2[x][w] ++; s2[y][z] ++; s2[y][w] ++; s2[z][w] ++; 
				s3[x][y][z] ++; s3[x][y][w] ++; s3[x][z][w] ++; s3[y][z][w] ++; 
			}
			i = j; 
		}
		
		string s; 
		for (int i = 0; i < h; i ++) {
			int x, y; 
			scanf("%d%d", &x, &y); 
			if (x > y) swap(x, y); 
			int w = x*n1+y; 
			ll T = (ll)(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)/8; 
			if (win[w]*2*4 > T) s += "B"; else s += "F"; 
		}
		
		printf ("Case #%d: %s\n", __, s.c_str()); 
	}
	return 0;
}

#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <cstring>
#include <cstdio>
#include <cassert>
#include <queue>
#include <bitset>
#include <cmath>
#include <sstream>
#include <string>
#include <vector>

#define mp make_pair
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

template<class T> T abs(T x) {return x > 0 ? x : (-x); }
template<class T> T sqr(T x) {return x * x; }

void solve() {
    int n;
    int h;
    cin >> n >> h;
    int was[110][110];
    memset(was, -1, sizeof(was));
    for (int it = 0; it < h; ++it) {
        int c1, c2;
        cin >> c1 >> c2;
        if (c1 > c2) swap(c1, c2);
        if (was[c1][c2] != -1) {
            printf("%c", was[c1][c2] ? 'B' : 'F');
            continue;
        }
        int d[n + 1];
        bool bad[n + 1];
        int64 good = 0, total = 0;
        for (int ci = 1; ci <= n; ++ci) if (ci != c1 && ci != c2)
            for (int cj = 1; cj < ci; ++cj) if (cj != c1 && cj != c2) {
                if (ci + cj > c1 + c2 || (ci + cj == c1 + c2 && ci > c2)) {
                    total += (n - 4) * (n - 5) * (n - 6) * (n - 7) / 4;
                    continue;
                }
                memset(bad, 0, sizeof(bad));
                bad[c1] = bad[c2] = bad[ci] = bad[cj] = true;
                int l = 1;
                int cnt = 0;
                int sum = 0;
                int sum2 = 0;
                int sumDown = 0;
                int cntUp = 0;
                for (int i = n; i >= 1; --i) {
                    if (bad[i]) {
                        d[i] = -1;
                        continue;                        
                    }
                    while (l > i) {
                        --l;
                        if (!bad[l]) --cnt;
                    }
                    while (l < i && (i + l < c1 + c2 || (i + l == c1 + c2 && i < c2))) {
                        if (!bad[l]) ++cnt;
                        ++l;
                    }
                    //cerr << i << " " << l << " " << cnt << "\n";
                    d[i] = cnt < 0 ? 0 : cnt;
                    sum += d[i];
                    sum2 += d[i] * d[i];
                    sumDown += d[i] * (n - 6 - cntUp);
                    ++cntUp;
                }
                int cgood = sum * sum - sum2 - 2 * sumDown;
                int ctotal = (n - 4) * (n - 5) * (n - 6) * (n - 7) / 4;                
/*                int rgood = 0;
                int rtotal = 0;
                for (int i1 = 1; i1 <= n; ++i1) if (!bad[i1])
                    for (int j1 = 1; j1 < i1; ++j1) if (!bad[j1])
                        for (int i2 = 1; i2 <= n; ++i2) if (!bad[i2] && i2 != i1 && i2 != j1)
                            for (int j2 = 1; j2 < i2; ++j2) if (!bad[j2] && j2 != i1 && j2 != j1) {
                                ++rtotal;
                                if (i1 + j1 < c1 + c2 || (i1 + j1 == c1 + c2 && i1 < c2))
                                    if (i2 + j2 < c1 + c2 || (i2 + j2 == c1 + c2 && i2 < c2))
                                        ++rgood;
                            }*/
//                for (int i = 1; i <= n; ++i) cerr << d[i] << " "; cerr << "\n";
//                cerr << sum << " " << sum2 << " " << sumDown << "\n";
//                cerr << c1 << " " << c2 << "; " << ci << " " << cj << ": " << cgood << " " << ctotal << " " << rgood << " " << rtotal << "\n";
//                if (cgood != rgood || rtotal != ctotal)
//                    cerr << "AAA!!\n";
                good += cgood;
                total += ctotal;
            }
       
        int res = 0;
        if (good * 4LL > total)
            res = 1;
        was[c1][c2] = res;
        printf("%c", was[c1][c2] ? 'B' : 'F');
    }
    printf("\n");
}

int main()
{
//    cout << "1\n100\n9900\n";
//    for (int i = 1; i <= 100; ++i)
//        for (int j = 1; j <= 100; ++j)
//            cout << i << " " << j << "\n";
//    return 0;
    int nc;
    cin >> nc;
    for (int it = 0; it < nc; ++it) {
        printf("Case #%d: ", it + 1);
        solve();
    }
	return 0;
}

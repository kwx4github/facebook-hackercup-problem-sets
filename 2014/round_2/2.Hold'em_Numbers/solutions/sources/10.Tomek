//{{{
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
#include <map>
#include <set>
using namespace std;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << (x) << endl;

typedef long long LL;
typedef unsigned long long ULL;
const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%lld",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }
//}}}

const int MAXN = 100;
int N;

inline bool better(int a,int b,int c,int d) {
  if(a+b != c+d) return a+b > c+d;
  return b > d;
}

LL smaller(int a, int b) {
  vector<int> seen(N+1,0);
  vector<int> le(N+1,0);
  seen[a]=1;
  seen[b]=1;
  LL res = 0;
  FOR(d,1,N) {
    if(seen[d]) continue;
    seen[d]=1;
    FOR(c,1,d-1) {
      if(seen[c]) continue;
      if(better(c,d,a,b)) break;
      seen[c]=1;
      FOR(f,1,d-1) {
        if(seen[f]) continue;
        seen[f]=1;
        FOR(e,1,f-1) {
          if(seen[e]) continue;
          if(better(e,f,a,b)) break;
          seen[e]=1;

          le[0]=0;
          FOR(i,1,f-1) le[i] = le[i-1] + !seen[i];
          FOR(h,1,f-1) {
            if(seen[h]) continue;
            int m = a+b-h;
            if(h>b) m--;
            if(m>=h) m=h-1;
            if(m<0) m=0;
            res += le[m];
          }

          seen[e]=0;
        }
        seen[f]=0;
      }
      seen[c]=0;
    }
    seen[d]=0;
  }
  return res*6;
}

void Precompute() {
  FILE *f = fopen("data.txt", "w");
  for(N=8;N<=MAXN;++N) {
    DEBUG(N);
    LL NN = N;
    LL poss = (NN-2)*(NN-3)*(NN-4)*(NN-5)*(NN-6)*(NN-7)/8;
    int a=0;
    FOR(b,1,N) {
      if(a==b-1) ++a;
      while(a>1 && smaller(a-1,b)*4 > poss) --a;
      fprintf(f, "%d ", a);
    }
    fprintf(f, "\n");
  }
  fclose(f);
}

int mincard[MAXN+1][MAXN+1];

void ReadPrecomputed() {
  FILE *f = fopen("data.txt", "r");
  for(N=8;N<=MAXN;++N) {
    FOR(b,1,N) {
      int a;
      int ret = fscanf(f, "%d", &a);
      assert(ret==1);
      mincard[N][b] = a;
    }
  }
  fclose(f);
}

string Calc() {
  N = rint();
  int H = rint();
  string res;
  REP(i,H) {
    int a = rint();
    int b = rint();
    if(a>b) swap(a,b);
    bool win = a >= mincard[N][b];
    if(win) res += 'B'; else res += 'F';
  }
  return res;
}


int main(int argc, char **argv) {
  if(argc==2) {
    Precompute();
  } else {
    ReadPrecomputed();
    int ntc = rint();
    FOR(tc,1,ntc) {
      string res = Calc();
      printf("Case #%d: %s\n", tc, res.c_str());
    }
  }
}


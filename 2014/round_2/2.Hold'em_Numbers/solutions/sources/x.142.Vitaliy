#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:16777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility> 
using namespace std;
 
#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))
 
#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair <int, int> PII;

const int INF = 1000000000;
const int MAX = 256;
const int MAX2 = 200000;

#define BASE 1000000007

int T, n, h;
vector <PII> A;
Int R[MAX][7];

bool Cmp(PII a, PII b)
{
	if (a.first+a.second < b.first+b.second)
		return 1;
	if (a.first+a.second > b.first+b.second)
		return 0;
	if (a.second < b.second)
		return 1;
	return 0;
}

int main()
{
	freopen("holdem_numbers.txt", "r", stdin);
	freopen("out.txt", "w", stdout);


	scanf("%d", &T);
	FOR (test,0,T)
	{
		scanf("%d %d", &n, &h);
		string res = "";
		FOR (i,0,h)
		{
			int a, b;
			scanf("%d %d", &a, &b);
			if (a > b)
				swap(a, b);
			VI C;
			int x = a;
			int y = b;
			while ((x+1) < (y-1))
			{
				++ x;
				-- y;
			}
			int len = 1;
			if ((x + y) % 2 == 0)
				++ len;
			//cerr << x << ' ' << y << endl;
			for (int j = x; j >= 1; --j)
			{
				if (j != a)
				{
					if (j > a)
						C.PB(len);
					else
						C.PB(len-2);
				}
				len += 2;
			}
			Int cnt = 0;
			if (!C.empty())
			{
				FILL(R, 0);
				//FOR (j,0,SZ(C))
				//	cerr << C[j] << ' ';
				//cerr << endl;
				R[0][0] = 1;
				FOR (j,0,SZ(C))
					FOR (k,0,4)
					{
						if (R[j][k] == 0)
							continue;
						int have = C[j] - k;
						R[j+1][k] += R[j][k];
						if (have > 0)
							R[j+1][k+1] += R[j][k] * have;
					}
				cnt = R[SZ(C)][3];
			}
			Int total = 1;
			FOR (i,0,3)
			{
				int have = n - 2*(i+1);
				if (have <= 0)
				{
					total = 0;
					break;
				}
				total *= (have*(have-1)/2);				
			}
			//cerr << cnt << ' ' << total << endl;
			Int add = -(total-cnt) + cnt*4;
			//cerr << add << endl;
			if (add > 0)
				res += 'B';
			else
				res += 'F';
		}
		printf("Case #%d: %s\n", test+1, res.c_str());
		cerr << test << endl;
	}

	return 0;
}
//Facebook Hacker Cup
//Round 1 2013
//8 Dec 2013

//start of jonathanirvings' template v2.0.0 (BETA)

#define jonathan using
#define ganteng namespace
#define banget std
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <deque>
#include <string>
#include <string.h>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <stdlib.h>
#include <map>
#include <set>
#include <time.h>
#include <bitset>
#include <list>
jonathan ganteng banget;

typedef long long LL;
typedef pair<int,int> pii;
typedef pair<pii,pii> ppi;
typedef pair<LL,LL> pll;
typedef pair<string,string> pss;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vii;
typedef vector<LL> vl;
typedef vector<vl> vvl;
typedef vector<string> vstr;
typedef vector<char> vc;

double EPS = 1e-9;
int INF = 2000000000;
long long INFF = 8000000000000000000LL;
double PI = acos(-1);
int dirx[8] = {-1,0,0,1,-1,-1,1,1};
int diry[8] = {0,1,-1,0,-1,1,-1,1};

#ifdef TESTING
	#define DEBUG fprintf(stderr,"====TESTING====\n")
	#define VALUE(x) cerr << "The value of " << #x << " is " << x << endl
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define DEBUG 
	#define VALUE(x)
	#define debug(...)
#endif

#define FOR(a,b,c) for (int (a)=(b);(a)<(c);++(a))
#define FORN(a,b,c) for (int (a)=(b);(a)<=(c);++(a))
#define FORD(a,b,c) for (int (a)=(b);(a)>=(c);--(a))
#define FORSQ(a,b,c) for (int (a)=(b);(a)*(a)<=(c);++(a))
#define FORL(a,b,c) for (LL (a)=(b);(a)<=(c);++(a))
#define FORLSQ(a,b,c) for (int (a)=(b);(LL)(a)*(LL)(a)<=(c);++(a))
#define FORC(a,b,c) for (char (a)=(b);(a)<=(c);++(a))
#define REP(i,n) FOR(i,0,n)
#define REPN(i,n) FORN(i,1,n)
#define REPD(i,n) FORD(i,n,1)
#define MAX(a,b) a = max(a,b)
#define MIN(a,b) a = min(a,b)
#define SQR(x) ((x) * (x))
#define RESET(a,b) memset(a,b,sizeof(a))
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define ALL(v) v.begin(),v.end()
#define ALLA(arr,sz) arr,arr+sz
#define SIZE(v) (int)v.size()
#define SORT(v) sort(ALL(v))
#define REVERSE(v) reverse(ALL(v))
#define SORTA(arr,sz) sort(ALLA(arr,sz))
#define REVERSEA(arr,sz) reverse(ALLA(arr,sz))
#define PERMUTE next_permutation
#define TC(t) while(t--)
#define READ(n,data) {scanf("%d",&n); REPN(i,n) scanf("%d",&data[i]);}

inline string IntToString(int a){
    char x[100];
    sprintf(x,"%d",a); string s = x;
    return s;
}

inline int StringToInt(string a){
    char x[100]; int res;
    strcpy(x,a.c_str()); sscanf(x,"%d",&res);
    return res;
}

inline string GetString(void){
	char x[1000005];
	scanf("%s",x); string s = x;
	return s;
}

inline string uppercase(string s){
	int n = SIZE(s); 
	REP(i,n) if (s[i] >= 'a' && s[i] <= 'z') s[i] = s[i] - 'a' + 'A';
	return s;
}

inline string lowercase(string s){
	int n = SIZE(s); 
	REP(i,n) if (s[i] >= 'A' && s[i] <= 'Z') s[i] = s[i] - 'A' + 'a';
	return s;
}

inline void OPEN (string s) {
    freopen ((s + ".in").c_str (), "r", stdin);
    freopen ((s + ".out").c_str (), "w", stdout);
}

//end of jonathanirvings' template v2.0.0 (BETA)

int t,n,h,a,b;
int bisa[105];
LL ans[105][105];

inline bool cek(int a,int b,int c,int d)
{
	if (a + b < c + d) return true;
	if (a + b > c + d) return false;
	return (max(a,b) < max(c,d));
}

int main()
{
	scanf("%d",&t);
	REPN(cases,t)
	{
		printf("Case #%d: ",cases);
		//VALUE(cases);
		scanf("%d %d",&n,&h);
		LL all = 1;
		FORN(i,2,7) all *= (LL)(n - i);
		all /= 48;
		FORN(dif,1,n) FORN(x,1,n)
		{
			int y = x + dif;
			a = y;
			b = x;
			if (y > n) break;
			if (dif == 1 || dif == 2)
			{
				LL risan = 0;
				REPN(i,n) if(i != a && i != b)
				{
					int k = a + b - i;
					if (i > a) --k;
					MAX(k,0); MIN(k,i-1);
					bisa[i] = k;
					if (i > a && cek(i,a,a,b)) --bisa[i];
					if (i > b && cek(i,b,a,b)) --bisa[i];
				}
				FORN(i,1,min(n,a+b)) if(i != a && i != b)
				{
					FORN(j,i+1,min(n,a+b)) if(j != a && j != b)
					{
						FORN(k,j+1,min(n,a+b)) if(k != a && k != b)
						{
							vi tmp;
							tmp.pb(bisa[i]); tmp.pb(bisa[j]); tmp.pb(bisa[k]);
							if (cek(i,j,a,b)) --tmp[1];
							if (cek(j,k,a,b)) --tmp[2];
							if (cek(i,k,a,b)) --tmp[2];
							SORT(tmp);
							risan += ((LL)tmp[0] * (tmp[1] - 1) * (tmp[2]-2));
							//break;
						}
					}
				}
				//if (a == 8 && b == 7) VALUE(risan);
				ans[a][b] = risan;
			} else
			{
				LL risan = 0;
				REPN(i,n) if(i != a && i != b && i != a - 1 && i != b + 1)
				{
					int k = a + b - i;
					if (i > a) --k;
					MAX(k,0); MIN(k,i-1);
					bisa[i] = k;
					if (i > a && cek(i,a,a,b)) --bisa[i];
					if (i > b && cek(i,b,a,b)) --bisa[i];
					if (i > a-1 && cek(i,a-1,a,b)) --bisa[i];
					if (i > b+1 && cek(i,b+1,a,b)) --bisa[i];
				}
				FORN(i,1,min(n,a+b)) if(i != a && i != b && i != (a-1) && i != (b+1))
				{
					FORN(j,i+1,min(n,a+b)) if(j != a && j != b && j != a-1 && j != b+1)
					{
						vi tmp;
						tmp.pb(bisa[i]); tmp.pb(bisa[j]);
						if (cek(i,j,a,b)) --tmp[1];
						SORT(tmp);
						risan += ((LL)tmp[0] * (tmp[1] - 1));
					}
				}
				ans[a][b] = ans[a-1][b+1] + risan;
			}
		}
		//VALUE(all);
		TC(h)
		{
			//if (h % 100 == 0) VALUE(h);
			//VALUE(h);
			scanf("%d %d",&a,&b);
			if (a < b) swap(a,b);
			LL risan = ans[a][b];

			/*if (a < b) swap(a,b);
			REPN(i,n) if(i != a && i != b)
			{
				int k = a + b - i;
				if (i > a) --k;
				MAX(k,0); MIN(k,i-1);
				bisa[i] = k;
				if (i > a && cek(i,a,a,b)) --bisa[i];
				if (i > b && cek(i,b,a,b)) --bisa[i];
			}
			LL risan = 0;
			LL all2 = 0;
			FORN(i,1,n) if(i != a && i != b && i != 8 && i != 2)
			{
				FORN(j,i+1,n) if(j != a && j != b && j != 8 && j != 2)
				{
					//FORN(k,j+1,n) if(k != a && k != b)
					{
						FOR(l,1,i) if(l != a && l != b && l != 8 && l != 2)
						{
							FOR(m,1,j) if(m != l && m != a && m != b && m != i && m != 8 && m != 2)
							{
								//FOR(x,1,k) if(x != l && x != a && x != b && x != i && x != m && x != j)
								{
									if (cek(i,l,a,b) && cek(j,m,a,b)) ++risan;
									++all2;
								}
							}
						}
					}
				}
			}
			VALUE(risan);
			LL risan2 = risan;
			risan = 0;
			FORN(i,1,n) if(i != a && i != b)
			{
				FORN(j,i+1,n) if(j != a && j != b)
				{
					FORN(k,j+1,n) if(k != a && k != b)
					{
						vi tmp;
						tmp.pb(bisa[i]); tmp.pb(bisa[j]); tmp.pb(bisa[k]);
						if (cek(i,j,a,b)) --tmp[1];
						if (cek(j,k,a,b)) --tmp[2];
						if (cek(i,k,a,b)) --tmp[2];
						SORT(tmp);
						risan += ((LL)tmp[0] * (tmp[1] - 1) * (tmp[2]-2));
						//break;
					}
				}
			}
			VALUE(risan);*/
			//if (risan2 != risan) DEBUG;
			//VALUE(risan);
			if (4 * risan > all) printf("B"); else printf("F");
		}
		puts("");
	}
	return 0;
}







#include <iostream>
#include <map>
#include <vector>
#include <set>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cstring>
#include <string>
#include <cmath>
#include <cassert>

#define forn(i, n) for (int i = 0; i < (int)(n); ++i)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAXN = 105;
//int p[2 * MAXN];
int ans[] = {
		2, 8,
		2, 9,
		2, 10,
		2, 11,
		6, 9,
		6, 10,
		7, 10,
		6, 12,
		6, 13,
		6, 14,
		6, 15,
		5, 17,
		5, 18,
		4, 20,
		4, 21,
		3, 23,
		12, 16,
		12, 17,
		11, 19,
		11, 20,
		10, 22,
		10, 23,
		9, 25,
		8, 27,
		7, 29,
		6, 31,
		5, 33,
		4, 35,
		18, 23,
		17, 25,
		16, 27,
		15, 29,
		14, 31,
		12, 34,
		11, 36,
		10, 38,
		8, 41,
		7, 43,
		5, 46,
		24, 29,
		23, 31,
		21, 34,
		20, 36,
		18, 39,
		16, 42,
		15, 44,
		13, 47,
		11, 50,
		9, 53,
		7, 56,
		31, 34,
		29, 37,
		27, 40,
		25, 43,
		23, 46,
		21, 49,
		19, 52,
		16, 56,
		14, 59,
		11, 63,
		9, 66,
		37, 40,
		35, 43,
		33, 46,
		30, 50,
		28, 53,
		25, 57,
		23, 60,
		20, 64,
		17, 68,
		14, 72,
		11, 76,
		8, 80,
		41, 49,
		39, 52,
		36, 56,
		33, 60,
		30, 64,
		27, 68,
		23, 73,
		21, 76,
		17, 81,
		14, 85,
		10, 90,
		48, 54,
		45, 58,
		41, 63,
		38, 67,
		35, 71,
		31, 76,
		28, 80,
		24, 85,
		20, 90,
};

inline bool is_win(int a1, int a2, int b1, int b2) {
	int s1 = a1 + a2;
	int s2 = b1 + b2;
	if (s1 != s2) {
		return s1 > s2;
	}
	return max(a1, a2) > max(b1, b2);
}

bool check (int n, int c1, int c2) {
//	cout << n << ' ' << c1 << ' ' << c2 << endl;
	int f[MAXN];
	ll wins = 0;
	ll loses = 0;
	for (int x1 = 1; x1 <= n; ++x1) if (x1 != c1 && x1 != c2)
	for (int x2 = x1 + 1; x2 <= n; ++x2) if (x2 != c1 && x2 != c2 && x2 != x1) {
		if (is_win(x1, x2, c1, c2)) {
			loses += 1ll * (n - 4) * (n - 5) * (n - 6) * (n - 7) / 4;
			continue;
		}
		ll add = 1ll * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) / 8;
		if (4 * (wins + add) < loses) {
			return false;
		}
		if (4 * wins > loses + add) {
			return true;
		}
		for (int y1 = 1; y1 <= n; ++y1) if (y1 != c1 && y1 != c2 && y1 != x1 && y1 != x2)
		for (int y2 = y1 + 1; y2 <= n; ++y2) if (y2 != c1 && y2 != c2 && y2 != x1 && y2 != x2 && y2 != y1) {
			if (is_win(y1, y2, c1, c2)) {
				loses += 1ll * (n - 6) * (n - 7) / 2;
				continue;
			}
			for (int i = 1; i <= n; ++i) {
				f[i] = 1;
			}
			f[n + 1] = 0;
			f[c1] = f[c2] = 0;
			f[x1] = f[x2] = 0;
			f[y1] = f[y2] = 0;
			for (int i = n; i >= 1; --i) {
				f[i] += f[i + 1];
			}
			for (int z1 = 1; z1 < n; ++z1) if (z1 != c1 && z1 != c2 && z1 != x1 && z1 != x2 && z1 != y1 && z1 != y2) {
				int total = f[z1 + 1];
				if (is_win(z1, z1 + 1, c1, c2)) {
					loses += total;
					continue;
				}
				if (is_win(c1, c2, z1, n)) {
					wins += total;
					continue;
				}
				int rz = c1 + c2 - z1;
				if (!is_win(z1, rz, c1, c2)) {
					++rz;
				}

//				int lz = z1 + 1, rz = n + 1;
//				while (lz < rz) {
//					int mz = (lz + rz) >> 1;
//					if (is_win(z1, mz, c1, c2)) {
//						rz = mz;
//					} else {
//						lz = mz + 1;
//					}
//				}
				int cur_ls = f[rz];
				loses += cur_ls;
				wins += total - cur_ls;
			}
//			for (int z2 = z1 + 1; z2 <= n; ++z2) if (z2 != c1 && z2 != c2 && z2 != x1 && z2 != x2 && z2 != y1 && z2 != y2 && z2 != z1) {
//				if (is_win(z1, z2, c1, c2)) {
//					++loses;
//					continue;
//				}
//				++wins;
//			}
		}
	}
//	cout<< c1 << ' ' << c2 << ' ' << wins << ' ' << loses << endl;
	return 4 * wins - loses > 0;
}

void solve() {
	for (int n = 8; n <= 100; ++n) {
		vector<pair<int, int> > p;
		bool prev = false;
		for (int sum = 3; sum <= 2 * n - 1; ++sum) {
			for (int c2 = 1; c2 <= n; ++c2) {
				int c1 = sum - c2;
				if (c1 >= 1 && c1 <= n && c1 < c2) {
					p.push_back(make_pair(c1, c2));
//					bool cur = check(n, c1, c2);
//					assert(prev <= cur);
//					cout << sum << ' ' << c1 << ' ' << c2 << ' ' << cur << endl;
//					prev = cur;
				}
			}
		}
		int l = 0, r = p.size();
		while (l < r) {
			int m = (l + r) >> 1;
			if (check(n, p[m].first, p[m].second)) {
				r = m;
			} else {
				l = m + 1;
			}
		}
		cout << p[l].first << ", " << p[l].second << ", " << endl;
		cout << check(n, p[l].first, p[l].second) << endl;
	}
/*
	forn(i, h) {
		int c1, c2;
		scanf("%d %d", &c1, &c2);
	}
	if (c1 > c2) {
		swap(c1, c2);
	}
	/*for (int i = 3; i <= 2 * n - 1; ++i) {
		p[i] = (i - 1) / 2;
	}
	int pmax = p[2 * n - 1];
	int r = 1;
	for (int i = 2 * n - 1; i > 0; --i) {
		p[i] += r - pmax;
		++r;
		if (r == pmax) {
			break;
		}
	}
	ll total = 0;
	for (int i = 3; i <= 2 * n - 1; ++i) {
		total += p[i];
//		cout << i << ' ' << p[i] << endl;
	}
	cout << total << endl;
	*/
}

void solve2() {
	int n, h;
	scanf("%d %d", &n, &h);
	n -= 8;
	int r1 = ans[2 * n];
	int r2 = ans[2 * n + 1];
	forn(i, h) {
		int c1, c2;
		scanf("%d %d", &c1, &c2);
		if (c1 > c2) {
			swap(c1, c2);
		}
//		cout << c1 << ' ' << c2 << ' ' << r1 << ' ' << r2 << endl;
		if (is_win(c1, c2, r1, r2)) {
			printf("B");
		} else {
			printf("F");
		}
//		if (c1 + c2 > r1 + r2) {
//			printf("B");
//		} else if (c1 + c2 == r1 + r2 && c2 >= r2) {
//			printf("B");
//		} else {
//			printf("F");
//		}
	}
	printf("\n");
}

int main(int argc, char **argv) {
	freopen("holdem_numbers.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int tt;
	scanf("%d", &tt);
	forn(t, tt) {
		printf("Case #%d: ", t + 1);
		solve2();
	}
	return 0;
}

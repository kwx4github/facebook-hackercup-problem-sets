#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <sstream>
using namespace std;
#pragma comment(linker, "/STACK:255000000")

typedef long long ll;

#define rep(i, a, b) for(i = (a); i < (b); ++i)
#define repb(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define repd(i, a, b, d) for(i = (a); i < (b); i += (d))
#define repbd(i, a, b, d) for(i = (a) - 1; i >= (b); i -= (d))
#define reps(i, s) for(i = 0; (s)[i]; ++i)
#define repl(i, l) for(i = l.begin(); i != l.end(); ++i)

#define in(f, a) scanf("%"#f, &(a))

bool firstout = 1;

#define out(f, a) printf("%"#f, (a))
#define outf(f, a) printf((firstout) ? "%"#f : " %"#f, (a)), firstout = 0
#define nl printf("\n"), firstout = 1

#define all(x) (x).begin(),(x).end()
#define sqr(x) ((x) * (x))
#define mp make_pair

template<class T>
T &minn(T &a, T b)
{
	if(b < a) a = b;
	return a;
}

template<class T>
T &maxx(T &a, T b)
{
	if(a < b) a = b;
	return a;
}

#define inf 1012345678
#define eps 1e-9


#ifdef XDEBUG
#define mod 23
#else
#define mod 1000000007
#endif

int &madd(int &a, int b)
{
	a += b;
	if(a >= mod) a -= mod;
	return a;
}

int &msub(int &a, int b)
{
	a -= b;
	if(a < 0) a += mod;
	return a;
}

int &mmult(int &a, int b)
{
	return a = (ll)a * b % mod;
}

int mdiv(ll a, ll b, ll m)
{
	a = (a % m + m) % m;
	b = (b % m + m) % m;
	if(a % b == 0) return a / b;
	return (a + m * mdiv(-a, m, b)) / b;
}

#define N 1012
#define M 1012

int n, m, q;
int A[N];
int P[N];
int V[N];

bool avail(int k)
{
	int i;
	rep(i, 0, m) if(V[i] == k) return 0;
	return 1;
}

bool beat(int i, int j, int ii, int jj)
{
	return i + j > ii + jj || i + j == ii + jj && max(i, j) > max(ii, jj);
}

int fr(int i)
{
	i = P[i];
	int res = n - i;
	int j;
	rep(j, 0, m) if(i <= V[j]) --res;
	return res;
}

int calc(int i, int j, int k)
{
	return (n - 5 - fr(i)) * (n - 6 - fr(j)) * (n - 7 - fr(k));
}

bool good(int a, int b)
{
	m = 0;
	V[m++] = a;
	V[m++] = b;
	int i, j, k;
	rep(i, 0, n) if(avail(i))
	{
		V[m++] = i;
		rep(j, 0, n) if(avail(j) && beat(i, j, a, b)) break;
		P[i] = j;
		--m;
	}
	ll res = 0;
	rep(i, 0, n) if(avail(i))
	{
		V[m++] = i;
		rep(j, i + 1, n) if(avail(j))
		{
			V[m++] = j;
			rep(k, j + 1, n) if(avail(k))
			{
				V[m++] = k;
				res += 6 * calc(k, j, i);
				--m;
			}
			--m;
		}
		--m;
	}
	return res > (ll)(n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) / 4;
}

int main()
{
#ifdef XDEBUG
	freopen("in.txt", "rt", stdin);
#else
	freopen("x.in", "rt", stdin);
	freopen("x.out", "wt", stdout);
#endif

	int i, j, k;
	char c;
	int a, d;
	
	int ts;	
#if 1
	int tss;
	in(d, tss);
	rep(ts, 1, tss + 1)
#else
	for(ts = 1; in(d, n) > 0; ++ts)
#endif
	{
		in(d, n);
		for(i = 0, j = n - 1; i < j; ++i)
		{
			for(; i < j && good(i, j); --j);
			A[i] = j;
		}
		rep(i, i, n) A[i] = i;
		in(d, q);
		printf("Case #%d: ", ts);
		for(; q--;)
		{
			in(d, i); in(d, j);
			--i; --j;
			if(i > j) swap(i, j);
			if(A[i] >= j) out(c, 'F');
			else out(c, 'B');
		}
		nl;
#ifndef XDEBUG
		cerr << ts << endl;
#endif
	}

	return 0;
}

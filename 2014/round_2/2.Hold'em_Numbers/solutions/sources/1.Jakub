
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
#define MP make_pair
#define FOR(v,p,k) for(int v=p;v<=k;++v)
#define FORD(v,p,k) for(int v=p;v>=k;--v)
#define REP(i,n) for(int i=0;i<(n);++i)
#define VAR(v,i) __typeof(i) v=(i)
#define FORE(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)
#define PB push_back
#define ST first
#define ND second
#define SZ(x) (int)(x).size()
#define ALL(c) c.begin(),c.end()
#define ZERO(x) memset(x,0,sizeof(x))

const LL fact[4] = {1LL, 1LL, 2LL, 6LL};
LL dp[105][4];

int cnt(int mx, int c1, int c2, int taken) {
    return max(0, mx - (int) (c1 <= mx) - (int) (c2 <= mx) - taken);
}

LL choose2(int n) {
    return (n * (LL) (n - 1)) / 2;
}

void alg() {
    int n, h;
    cin >> n;
    cin >> h;
    while (h--) {
        int c1, c2;
        cin >> c1 >> c2;
        LL result = 0;
        ZERO(dp);
        dp[n][0] = 1;
        for (int i = n; i >= 1; --i) {
            for (int k = 0; k <= 3; ++k) {
                dp[i - 1][k] = dp[i][k];
            }
            if (i == c1 || i == c2 || i + 1 >= c1 + c2) {
                continue;
            }
            int mx = c1 + c2 - i;
            if (i > max(c1, c2)) {
                --mx;
            }
            if (mx < i) {
                for (int k = 0; k <= 2; ++k) {
                    dp[i - 1][k + 1] += dp[i][k] * (LL) cnt(mx, c1, c2, k);
                }
            } else {
                for (int k = 0; k <= 3; ++k) {
                    if (dp[i][k] == 0) {
                        continue;
                    }
                    int remaining = cnt(i, c1, c2, k);
                    LL cur = dp[i][k];
                    for (int j = 0; j < 3 - k; ++j) {
                        cur *= choose2(remaining);
                        remaining -= 2;
                    }
                    assert(cur % fact[3 - k] == 0);
                    cur /= fact[3 - k];
                    result += cur;
                }
                break;
            }
        }
        LL total_count = 1;
        int remaining = n - 2;
        for (int j = 0; j < 3; ++j) {
            total_count *= choose2(remaining);
            remaining -= 2;
        }
        assert(total_count % fact[3] == 0);
        total_count /= fact[3];
        if (4LL * result > total_count) {
            cout << "B";
        } else {
            cout << "F";
        }
    }
    cout << endl;
}

int main() {
    int d;
    cin >> d;
    for (int i = 1; i <= d; ++i) {
        cout << "Case #" << i << ": ";
        alg();
    }
}

#include <bits/stdc++.h>

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)

#define DEBUG(x) { cout << #x << " = "; cout << x << endl; }
#define PR(a,n) { cout << #a << " = "; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }
#define PR0(a,n) { cout << #a << " = "; REP(_,n) cout << a[_] << ' '; cout << endl; }
using namespace std;

//Buffer reading
int INP,AM,REACHEOF;
const int BUFSIZE = (1<<12) + 17;
char BUF[BUFSIZE+1], *inp=BUF;
#define GETCHAR(INP) { \
    if(!*inp && !REACHEOF) { \
        memset(BUF,0,sizeof BUF);\
        int inpzzz = fread(BUF,1,BUFSIZE,stdin);\
        if (inpzzz != BUFSIZE) REACHEOF = true;\
        inp=BUF; \
    } \
    INP=*inp++; \
}
#define DIG(a) (((a)>='0')&&((a)<='9'))
#define GN(j) { \
    AM=0;\
    GETCHAR(INP); while(!DIG(INP) && INP!='-') GETCHAR(INP);\
    if (INP=='-') {AM=1;GETCHAR(INP);} \
    j=INP-'0'; GETCHAR(INP); \
    while(DIG(INP)){j=10*j+(INP-'0');GETCHAR(INP);} \
    if (AM) j=-j;\
}
//End of buffer reading

bool good[1011];
int n;

bool better(int a, int b, int x, int y) {
    if (a + b != x + y) return a + b > x + y;
    return max(a, b) > max(x, y);
}

bool check(int x, int y) {
    int nWin = 0, nLose = 0;
    FOR(i,1,n) good[i] = true;
    good[x] = good[y] = false;

    FOR(turn,1,1000000) {
        int a[7];
        FOR(i,1,6) {
            int u = rand() % n + 1;
            while (!good[u]) {
                u = rand() % n + 1;
            }
            a[i] = u;
            good[a[i]] = false;
        }

        FOR(i,1,6) good[a[i]] = true;

        if (better(a[1], a[2], x, y)) ++nLose;
        else if (better(a[3], a[4], x, y)) ++nLose;
        else if (better(a[5], a[6], x, y)) ++nLose;
        else ++nWin;
    }
    if (nWin * 3 > nLose) return true;
    return false;
}

struct Pair {
    int x, y;
    Pair(int x = 0, int y = 0) : x(x), y(y) {}
} a[10111];

bool operator < (const Pair &a, const Pair &b) {
    if (a.x + a.y != b.x + b.y) return a.x + a.y < b.x + b.y;
    return max(a.x, a.y) < max(b.x, b.y);
}

int gen() {
    ios :: sync_with_stdio(false);
    FOR(n,8,100) {
        ::n = n;
        int cur = 0;
        FOR(x,1,n) FOR(y,x+1,n) a[++cur] = Pair(x, y);
        sort(a+1, a+cur+1);

        int l = 1, r = cur, res = r;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (check(a[mid].x, a[mid].y)) {
                res = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        cout << a[res].x << ' ' << a[res].y << endl;
        cerr << n << endl;
    }
    return 0;
}

Pair res[111];

int main() {
    fstream fgood("output2.txt", fstream :: in);
    FOR(n,8,100) {
        fgood >> res[n].x >> res[n].y;
    }
    fgood.close();
    int ntest; cin >> ntest;
    FOR(test,1,ntest) {
        int n, h; cin >> n >> h;
        cout << "Case #" << test << ": ";
        while (h--) {
            Pair cur; cin >> cur.x >> cur.y;
            if (!better(res[n].x, res[n].y, cur.x, cur.y)) cout << 'B';
            else cout << 'F';
        }
        cout << endl;
    }
}

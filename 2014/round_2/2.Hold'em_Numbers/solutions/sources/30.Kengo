#include<vector>
#include<cmath>
#include<map>
#include<cstdlib>
#include<iostream>
#include<sstream>
#include<fstream>
#include<string>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<set>
#include<stack>
#include<bitset>
#include<functional>
#include<ctime>
#include<queue>
#include<deque>
#include<complex>
using namespace std;
#define pb push_back
#define pf push_front
typedef long long lint;
typedef complex<double> P;
#define mp make_pair
#define fi first
#define se second
typedef pair<int,int> pint;
#define All(s) s.begin(),s.end()
#define rAll(s) s.rbegin(),s.rend()
#define REP(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
lint dp[102][4];
lint num[110][110];
lint cal(int n,int c1,int c2){
	memset(dp,0,sizeof(dp));
	dp[n][0]=1;int lim=(c1+c2)/2;
	for(int i=n;i>lim;i--) rep(j,4){
		dp[i-1][j]+=dp[i][j];
		if(i==c1 || j>2) continue;
		int bo;
		if(i>c1) bo=c1+c2-i-1;
		else bo=c1+c2-i;
		if(bo>=c2) bo--;
		if(bo>j) dp[i-1][j+1]+=dp[i][j]*(bo-j);
	}
	lint ret=dp[lim][3];
	if(lim-3>=2) ret+=dp[lim][2]*(lim-3)*(lim-4)/2;
	if(lim-2>=4) ret+=dp[lim][1]*(lim-3)*(lim-5)*(lim-4)*(lim-2)/8;
	if(lim-1>=6) ret+=dp[lim][0]*(lim-3)*(lim-5)*(lim-4)*(lim-2)*(lim-1)*(lim-6)/48;
	return ret;
}
int main()
{
	int n,h,t,c1,c2;scanf("%d",&t);
	rep(i,t){
		//cin>>n>>h;
		scanf("%d %d",&n,&h);
		lint pos=(lint)(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)/48;
		REP(j,1,n) REP(k,j+1,n+1) num[j][k]=cal(n,k,j);
		string ret="";
		rep(j,h){
			//cin>>c1>>c2;
			scanf("%d %d",&c1,&c2);
			if(c1>c2) swap(c1,c2);
			//cout<<c1<<' '<<c2<<' '<<num[c1][c2]<<' '<<pos<<endl;
			if(num[c1][c2]*4>pos) ret+='B';else ret+='F';
		}
		cout<<"Case #"<<i+1<<": "<<ret<<endl;
	}
}

#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <cstring>

#define MAX_N 105

using namespace std;

typedef long long lld;

int tests;
int h;
int n, tmp1, tmp2, c1, c2;
lld nn, tmp;
lld tot, c, e, e2, e3, e4, e5, e6;
lld ee[MAX_N];

int main() {
    cin >> tests;
    for (int test = 0 ; test < tests ; test ++) {
	cin >> n >> h;
	nn = n;
	tot = (nn - 2) * (nn - 3) * (nn - 4) * (nn - 5) * (nn - 6) * (nn - 7);
	tot /= (2 * 2 * 2);
	printf("Case #%d: ", test + 1);
	for (int i = 0 ; i < h ; i ++) {
	    cin >> c1 >> c2;
	    if (c2 > c1) {
		tmp = c1;
		c1 = c2;
		c2 = tmp;
	    }
	    e = 0;
	    for (int j = 1 ; j <= n ; j ++) {
		ee[j] = 0;
		if (j == c1 or j == c2) continue;
		tmp1 = min(n, c1 + c2 - j);
		if (tmp1 + j == c1 + c2 and max(j, tmp1) > c1) tmp1 --;
		if (tmp1 <= j) continue;
		tmp2 = tmp1 - j;
		if (j < c1 and c1 <= tmp1) tmp2 --;
		if (j < c2 and c2 <= tmp1) tmp2 --;
		//printf("%d %d | %d\n", j, tmp1, tmp2);
		e += tmp2;
		ee[j] = tmp2;
	    }
	    for (int j = 1 ; j <= n ; j ++) {
		if (j == c1 or j == c2) continue;
		tmp1 = min(c1 + c2 - j, j - 1);
		if (tmp1 + j == c1 + c2 and max(tmp1, j) > c1) tmp1 --;
		if (tmp1 < 0) continue;
		tmp2 = tmp1;
		if (tmp1 >= c1) tmp2 --;
		if (tmp1 >= c2) tmp2 --;
		ee[j] += tmp2;
	    }
	    e2 = 0;
	    e3 = 0;
	    for (int j = 1 ; j <= n ; j ++) {
		e2 += ee[j] * (ee[j] - 1);
		e3 += ee[j] * (ee[j] - 1) * (ee[j] - 2);
		//printf("YY %d %lld\n", j, ee[j]);
	    }
	    e4 = 0;
	    e5 = 0;
	    for (int j = 1 ; j <= n ; j ++) {
		if (j == c1 or j == c2) continue;
		for (int k = j + 1 ; k <= n and k <= c1 + c2 - j ; k ++) {
		    if (k == c1 or k == c2) continue;
		    if (j + k < c1 + c2 or k < c1) {
			e4 += (ee[j] - 1) * (ee[k] - 1);
			tmp1 = min(c1 + c2 - j, c1 + c2 - k);
			tmp1 = min(tmp1, n);
			if (tmp1 + j == c1 + c2 and max(tmp1, j) > c1) tmp1 --;
			if (tmp1 + k == c1 + c2 and max(tmp1, k) > c1) tmp1 --;
			if (tmp1 > 0) {
			    tmp2 = tmp1;
			    if (tmp1 >= j) tmp2 --;
			    if (tmp1 >= k) tmp2 --;
			    if (tmp1 >= c1) tmp2 --;
			    if (tmp1 >= c2) tmp2 --;
			    //if (tmp2 < 0) printf("FUCK FUCK FUCK FUCK");
			    e5 += tmp2;
			}
		    }
		}
	    }
	    c = e * (e - 1) * (e - 2);
	    c -= 3 * (e - 2) * e2;
	    // first type -> all equal
	    c += 3 * e3;
	    // second type -> not all equal
	    c += 2 * 3 * e4;
	    // first type -> all equal
	    c -= e3;
	    // second type -> not all equal
	    c -= 2 * e5;
	    //printf("UU %lld %lld %lld %lld %lld\n", e, e2, e3, e4, e5);
	    //printf("XX %lld %lld\n", c, tot);
	    if (4 * c > tot) printf("B");
	    else printf("F");
	}
	printf("\n");
    }
    return 0;
}

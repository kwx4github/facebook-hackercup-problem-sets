#include <cstdio>
#include <cstring>
#include <vector>
#include <string>
#include <algorithm>
#include <cassert>
#include <set>
#include <cstdlib>

#define REP(i,n) for(int i=0; i<(n); ++i)
#define FOR(i,p,k) for(int i=(p); i<=(k); ++i)
#define FORD(i,p,k) for(int i=(p); i>=(k); --i)

typedef unsigned long long ULL;

template<typename T> inline void checkmin(T &a, T b){ if(a>b) a = b; }
template<typename T> inline void checkmax(T &a, T b){ if(a<b) a = b; }
template<typename T> bool safe_mult(T &a, T b)
{ if(b && a*b/b!=a) return 0; a *= b; return 1; }

struct Case
{
  int n,h;
  Case()
  {
    scanf("%d%d",&n,&h);
    REP(i,h)
    {
      int a,b; scanf("%d%d",&a,&b);
      printf(calc(a,b)?"B":"F");
    }
    puts("");
  }
  /*ULL worse(int a, int b)
  {
    ULL r = 0;
    FOR(c,1,n) FOR(d,1,c-1) if(c+d<a+b || (c+d==a+b && d<a)) r++;
    r = r*r*r;
    FOR(c,1,n) FOR(d,1,c-1) if(c+d<a+b || (c+d==a+b && d<a)) r++;
    FOR(c,
  }*/

  static bool cond(int a, int b, int c, int d)
  { return a+b>c+d || (a+b==c+d && std::max(a,b)>std::max(c,d)); }

  bool calc(int a, int b)
  {
    enum { samples = 10000 };
    bool A[101]={}; A[a] = A[b] = 1;
    int c = 0;
    REP(i,samples)
    {
      int X[6];
      REP(x,6){ while(A[X[x]=rand()%n+1]); A[X[x]] = 1; }
      bool ok = 1; REP(x,3) ok &= cond(a,b,X[2*x],X[2*x+1]);
      if(ok) c++;
      REP(x,6) A[X[x]] = 0;
    }
    return c*3>samples;
  }
};

int main()
{
  srand(862371842);
  int t; scanf("%d",&t);
  REP(_,t){ printf("Case #%d: ",_+1); Case(); }
  return 0;
}

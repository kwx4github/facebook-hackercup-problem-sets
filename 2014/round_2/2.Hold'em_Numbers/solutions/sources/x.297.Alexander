#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <set>
using namespace std;

const int MAXN = 100, START = 10000, MAX = 100000;

int N, H, C1, C2;
int NQ, Q[MAXN];

bool win()
{
    for (int i = 0; i < 6; ++i) {
        int r = i + rand()%(NQ-i);
        swap(Q[i], Q[r]);
    }

    for (int i = 0; i < 6; i += 2)
        if (Q[i]+Q[i+1] > C1+C2 || (Q[i]+Q[i+1] == C1+C2 && max(Q[i], Q[i+1]) > C1))
            return false;

    return true;
}

void solve()
{
    int NW = 0, tot = 0;

    for (int i = 0; i < START; ++i) {
        if (win()) ++NW; ++tot;
    }

    for (int i = 0; i < MAX; ++i) {
        if (win()) ++NW; ++tot;

        double p = (NW*1.0) / tot, s = sqrtl(p*(1-p));
        if (p - 4*s / sqrtl(tot) > 1.0/4) { printf("B"); return; }
        if (p + 4*s / sqrtl(tot) < 1.0/4) { printf("F"); return; }
    }

    printf("F");
}

int main()
{
    int T; scanf("%d", &T);
    srand(3452);

    for (int t = 0; t < T; ++t) {
        scanf("%d%d", &N, &H);
        printf("Case #%d: ", t+1);

        for (int i = 0; i < H; ++i) {
            scanf("%d%d", &C1, &C2); --C1; --C2; NQ = 0;
            if (C1 < C2) swap(C1, C2);

            for (int j = 0; j < N; ++j)
                if (j != C1 && j != C2) Q[NQ++] = j;

            solve();
        }

        printf("\n");
    }

    return 0;
}

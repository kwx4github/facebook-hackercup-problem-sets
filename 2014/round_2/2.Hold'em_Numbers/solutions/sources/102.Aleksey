#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <ctime>
#include <string>
#include <cmath>

using namespace std;

typedef pair<int, int> pii;
typedef long long LL;
typedef vector<int> vi;
typedef vector<LL> vll;

int d[100], dc;

bool win(pii hand, int n) {
	// precalced constants
	if (n == 100 ) return hand >= pii( 115 ,  87 );
	if (n == 99 ) return hand >= pii( 114 ,  81 );
	if (n == 98 ) return hand >= pii( 113 ,  74 );
	if (n == 97 ) return hand >= pii( 112 ,  68 );
	if (n == 96 ) return hand >= pii( 111 ,  62 );
	if (n == 95 ) return hand >= pii( 109 ,  95 );
	if (n == 94 ) return hand >= pii( 108 ,  89 );
	if (n == 93 ) return hand >= pii( 107 ,  82 );
	if (n == 92 ) return hand >= pii( 106 ,  76 );
	if (n == 91 ) return hand >= pii( 105 ,  70 );
	if (n == 90 ) return hand >= pii( 104 ,  64 );
	if (n == 89 ) return hand >= pii( 103 ,  58 );
	if (n == 88 ) return hand >= pii( 102 ,  53 );
	if (n == 87 ) return hand >= pii( 100 ,  83 );
	if (n == 86 ) return hand >= pii( 99 ,  77 );
	if (n == 85 ) return hand >= pii( 98 ,  71 );
	if (n == 84 ) return hand >= pii( 97 ,  65 );
	if (n == 83 ) return hand >= pii( 96 ,  60 );
	if (n == 82 ) return hand >= pii( 95 ,  54 );
	if (n == 81 ) return hand >= pii( 94 ,  49 );
	if (n == 80 ) return hand >= pii( 92 ,  77 );
	if (n == 79 ) return hand >= pii( 91 ,  71 );
	if (n == 78 ) return hand >= pii( 90 ,  66 );
	if (n == 77 ) return hand >= pii( 89 ,  61 );
	if (n == 76 ) return hand >= pii( 88 ,  56 );
	if (n == 75 ) return hand >= pii( 87 ,  51 );
	if (n == 74 ) return hand >= pii( 86 ,  46 );
	if (n == 73 ) return hand >= pii( 84 ,  71 );
	if (n == 72 ) return hand >= pii( 83 ,  66 );
	if (n == 71 ) return hand >= pii( 82 ,  61 );

	long long all = 1;
	all = 1LL * (n - 2) * (n - 3) / 2 * (n - 4) * (n - 5) / 2 * (n - 6) * (n - 7) / 2;

	int a2 = hand.second;
	int a1 = hand.first - a2;

	long long lose = 0;

	for (int b1 = 1; b1 < n; b1++) for (int b2 = b1 + 1; b2 <= n; ++b2) {
		if (b1 == a1 || b1 == a2) continue;
		if (b2 == a1 || b2 == a2) continue;

		if ((b1 + b2) > (a1 + a2) || ((b1 + b2) == (a1 + a2) && (b2 > a2))) {
			lose += 1LL *  (n - 4) * (n - 5) / 2 * (n - 6) * (n - 7) / 2;
			continue;
		}

		for (int c1 = 1; c1 < n; ++c1) for (int c2 = c1 + 1; c2 <= n; ++c2) {
			if (c1 == a1 || c1 == a2) continue;
			if (c2 == a1 || c2 == a2) continue;
			if (c1 == b1 || c1 == b2) continue;
			if (c2 == b1 || c2 == b2) continue;

			if ((c1 + c2) > (a1 + a2) || ((c1 + c2) == (a1 + a2) && (c2 > a2))) {
				lose += (n - 6) * (n - 7) / 2;
				continue;
			}
			
			dc = 0;

			for (int i = 1; i <= n; ++i) if (i != a1 && i!= a2 && i != b1 && i!= b2 && i != c1 && i!= c2)
				d[dc++] = i;
			
			int j = 0;
			for (int i = dc - 1; i > j; --i) {
				while ((j < i) && !((d[i] + d[j]) > (a1 + a2) || ((d[i] + d[j]) == (a1 + a2) && (d[i] > a2)))) ++j;
			
				lose += i - j;
			}
		}

		long long win = all - lose;
		if (win * 4 <= all) return false;
	}
	long long win = all - lose;
	if (win * 4 <= all) return false;
	return true;
}

void solve() {
	int n, h;
	cin >> n >> h;

	vector<pii> hands;
	for (int i = 1; i < n; ++i) for (int j = i + 1; j <= n; ++j) {
		hands.push_back(make_pair(i + j, j));
	}

	sort(hands.begin(), hands.end());

	int l = 0;
	int r = hands.size() - 1;
	int w = r;

	while (l <= r) {
		int m = (l + r) / 2;

		if (win(hands[m], n)) {
			w = m; r = m - 1;
		} else {
			l = m + 1;
		}
	}

	cerr << hands[w].first << ' ' << hands[w].second << endl;
	string ans;

	for (int i = 0; i < h; ++i) {
		int c1, c2;
		cin >> c1 >> c2;
		if (c1 > c2) swap(c1, c2);
		int pos = lower_bound(hands.begin(), hands.end(), make_pair(c1 + c2, c2)) - hands.begin();
		if (pos >= w) ans += "B"; else ans += "F";
	}

	static int testid;
	cout << "Case #" << ++testid << ": ";
	cout << ans;
	cout << endl;
}

int main() {
	int t;
	cin >> t;
	while (t --> 0) {
		double start = clock();
		solve();
		cerr << (clock() - start) / CLOCKS_PER_SEC << endl;
	}
	return 0;
}


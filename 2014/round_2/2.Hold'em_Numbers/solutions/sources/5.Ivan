package contest;

import java.util.*;
import java.io.*;
import java.math.*;

public class Holdem {
    final static String PROBLEM_NAME = "holdem";
    final static String WORK_DIR = "D:\\HackerCup\\" + PROBLEM_NAME + "\\";

    void bruteForceSolve(Scanner sc, PrintWriter pw) {
        int N = sc.nextInt();
        int H = sc.nextInt();
        for (int t = 0; t < H; t++) {
            int a = sc.nextInt(), b = sc.nextInt();
            a--; b--;
            int sum = 0;
            for (int c = 0; c<N; c++) if (a!=c && b!=c)
                for (int d = 0; d<N; d++) if (a!=d && b!=d && c!= d)
                    for (int e = 0; e<N; e++) if (a!=e && b!=e && c!=e && d!=e)
                        for (int f = 0; f<N; f++) if (a!=f && b!=f && c!=f && d!=f && e!=f)
                            for (int g = 0; g<N; g++) if (a!=g && b!=g && c!=g && d!=g && e!=g && f!=g)
                                for (int h = 0; h<N; h++) if (a!=h && b!=h && c!=h && d!=h && e!=h && f!=h && g!=h) {
                                    boolean win = true;
                                    if (c+d > a+b || c+d == a+b && Math.max(c,d) > Math.max(a,b)) win = false;
                                    if (e+f > a+b || e+f == a+b && Math.max(e,f) > Math.max(a,b)) win = false;
                                    if (g+h > a+b || g+h == a+b && Math.max(g,h) > Math.max(a,b)) win = false;
                                    if (win) sum += 3; else sum--;
                                }
            pw.print(sum > 0 ? "B" : "F");
        }
        pw.println();
    }

    void solve(Scanner sc, PrintWriter pw) {
        int N = sc.nextInt();
        int H = sc.nextInt();
        for (int t = 0; t < H; t++) {
            int rr = sc.nextInt(), cc = sc.nextInt();
            rr--; cc--;
            if (rr<cc) {
                int tmp = rr;
                rr = cc;
                cc = tmp;
            }
            long[] cur = new long[5];
            cur[0] = 1;
            for (int c = N-2; c >= 0; c--) {
                long[] next = new long[5];
                Arrays.fill(next, 0);
                if (c != cc) {
                    int minR = N-1, maxR = 0;
                    for (int r = c+1; r < N; r++)
                        if (r + c < rr + cc || r + c == rr + cc && Math.max(r, c) < Math.max(rr, cc)) {
                            minR = Math.min(minR, r);
                            maxR = Math.max(maxR, r);
                        }

                    for (int have = 0; have <= 4; have++) {
                        next[have] += cur[have];
                        if (minR <= maxR) {
                            int free = (maxR - minR + 1) - 2 * have;
                            if (free > 0 && have < 4) {
                                next[have + 1] += free * cur[have];
                            }
                        }
                    }
                } else {
                    for (int have = 0; have < 4; have++) {
                        next[have + 1] += cur[have];
                    }
                }
                cur = next;
            }
            long tot = 1L * (N-2) * (N-3) * (N-4) * (N-5) * (N-6) * (N-7) / 48;
            long win = cur[4];
            if (4 * win - tot > 0) {
                pw.print("B");
            } else {
                pw.print("F");
            }
        }
        pw.println();
    }

    public static void gentest() {
        System.out.println(10);
        for (int N=8; N<=17; N++) {
            System.out.println(N+" "+(N*(N-1)));
            for (int i=1; i<=N; i++) {
                for (int j=1; j<=N; j++) if (i != j) {
                    System.out.println(i+" "+j);
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        //gentest();
        Scanner sc = new Scanner(new FileReader(WORK_DIR + "input.txt"));
        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + "output.txt"));
        int caseCnt = sc.nextInt();
        for (int caseNum=0; caseNum<caseCnt; caseNum++) {
            System.out.println("Processing test case " + (caseNum + 1));
            pw.print("Case #" + (caseNum+1) + ": ");
            new Holdem().solve(sc, pw);
        }
        pw.flush();
        pw.close();
        sc.close();
    }
}

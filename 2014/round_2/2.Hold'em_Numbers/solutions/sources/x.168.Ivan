#include<iostream>
#include<cmath>
#include<algorithm>
#include<string>
#include<string.h>
#include<vector>
#include<set>
#include<map>
using namespace std;

typedef long long Int;
#define FOR(i,a,b) for(int i=(a); i<=(b);++i)
#define mp make_pair
#define pb push_back
#define sz(s) (int)((s).size())
//const int inf = 1000000000;
//const int MOD = 1000000007;


bool cmp(pair<int,int>a, pair<int,int> b) {
	return a.first+a.second<b.first+b.second || a.first+a.second==b.first+b.second && a.second<b.second;
}
bool used[111];
bool lose(pair<int,int> hand, int n) {
	memset(used, false, sizeof(used));
	used[hand.first]=used[hand.second]=true;
	int sum = hand.first+hand.second;
	Int win=0;
	FOR(mask,0,(1<<3)-1) {
		FOR(i0,1,n)
		FOR(i1,i0+1,n)if(i1!=i0)
		FOR(i2,i1+1,n)if(i2!=i1 && i2!=i0)
		if(i0!=hand.first && i0!=hand.second)
		if(i1!=hand.first && i1!=hand.second)
		if(i2!=hand.first && i2!=hand.second)
		{
			vector<int> inuse;
			inuse.pb(hand.first); inuse.pb(hand.second);
			inuse.pb(i0); inuse.pb(i1); inuse.pb(i2);
			used[i0]=used[i1]=used[i2]=true;
			int j0=-1, j1=-1, j2=-1;

			bool bad=false;
			
			if(mask&1) {
				int with = sum-i0;
				if(with>n || with<=0 || used[with] || with>=i0 || i0>hand.second) bad=true;else {
					j0=with;
					used[j0]=true;
					inuse.pb(j0);
				}
			}
			if(mask&2) {
				int with = sum-i1;
				if(with>n || with<=0 || used[with] || with>=i1 || i1>hand.second) bad=true;else {
					j1=with;
					used[j1]=true;
					inuse.pb(j1);
				}
			}
			if(mask&4) {
				int with = sum-i2;
				if(with>n || with<=0 || used[with] || with>=i2 || i2>hand.second) bad=true;else {
					j2=with;
					used[j2]=true;
					inuse.pb(j2);
				}
			}

			if(bad) {
				used[i0]=used[i1]=used[i2]=false;
				if(j0!=-1) used[j0]=false;
				if(j1!=-1) used[j1]=false;
				if(j2!=-1) used[j2]=false;
				continue;
			}

			vector<int> among;
			if(mask&1) ;else among.pb(min(sum-1-i0, i0-1));
			if(mask&2) ;else among.pb(min(sum-1-i1, i1-1));
			if(mask&4) ;else among.pb(min(sum-1-i2, i2-1));

			sort(among.begin(), among.end());
			Int cur=1;
			FOR(i,0,sz(among)-1) {
				int cnt=0;
				int pos=among[i];
				FOR(j,0,sz(inuse)-1) if(inuse[j]<=pos) ++cnt;
				pos=min(pos,n);
				int mult = pos-i-cnt;
				if(mult<=0) cur=0;
				cur*=mult;
			}

			//if(cur) cout<<mask<<" "<<i0<<" "<<i1<<" "<<i2<<" -- "<<cur<<endl;
			win+=cur;

			used[i0]=used[i1]=used[i2]=false;
			if(j0!=-1) used[j0]=false;
			if(j1!=-1) used[j1]=false;
			if(j2!=-1) used[j2]=false;
		}
	}

	win*=6;

	Int all = 1LL * (n-2)*(n-3)/2 * (n-4)*(n-5)/2 * (n-6)*(n-7)/2;
	Int lost = all-win;

	//cerr<<hand.first<<" "<<hand.second<<" "<<win<<" "<<lost<<endl;
	
	return 3*win-lost<=0;
}

bool better(pair<int,int>a, pair<int,int>b) {
	return a.first+a.second>b.first+b.second || a.first+a.second==b.first+b.second && a.second>b.second;
}

bool lose_brute(pair<int,int> hand, int n) {
	Int win=0;
	FOR(i1,1,n) if(i1!=hand.first && i1!=hand.second)
		FOR(i2,i1+1,n) if(i2!=hand.first && i2!=hand.second)
		if(better(hand, mp(i1,i2)))
			FOR(j1,1,n) if(j1!=hand.first && j1!=hand.second)
			FOR(j2,j1+1,n) if(j2!=hand.first && j2!=hand.second)
			if(j1!=i1 && j1!=i2 && j2!=i1 && j2!=i2)
				if(better(hand, mp(j1,j2))) {
					FOR(k1,1,n) if(k1!=hand.first && k1!=hand.second)
					FOR(k2,k1+1,n) if(k2!=hand.first && k2!=hand.second)
					if(k1!=i1 && k1!=i2 && k1!=j1 && k1!=j2)
					if(k2!=i1 && k2!=i2 && k2!=j1 && k2!=j2)
						if(better(hand, mp(k1,k2)))
							++win;
				}
	Int all = 1LL * (n-2)*(n-3)/2 * (n-4)*(n-5)/2 * (n-6)*(n-7)/2;
	Int lost = all-win;

	//cerr<<hand.first<<" "<<hand.second<<" "<<win<<" "<<lost<<endl;
	return 3*win-lost<=0;
}

pair<int,int> Fold(int n) {
	vector<pair<int,int> > all;
	FOR(i,1,n)FOR(j,i+1,n) all.pb(mp(i,j));
	sort(all.begin(), all.end(), cmp);
	int low=0, high=sz(all)-1;
	while(low<high) {
		int mid = (low+high)/2+1;
		if(lose(all[mid], n)) low=mid;else high=mid-1;
	}
	return all[low];
}

string solve() {
	int n,h;
	cin>>n>>h;

	pair<int,int> fold = Fold(n);
	//cout<<n<<endl;
	//cout<<fold.first<<" "<<fold.second<<endl;
	//cout<<"---"<<endl;
	
	string ret="";
	while(h--) {
		int c1,c2;
		cin>>c1>>c2;
		if(c1>c2) swap(c1,c2);
		if(c1+c2>fold.first+fold.second || c2>fold.second) ret+="B";else
			ret+="F";
	}
	return ret;
}

int main() {
	freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
	int t;cin>>t;
	FOR(tt,1,t) {
		string ans=solve();
		cout<<"Case #"<<tt<<": "<<ans<<endl;
		cerr<<tt<<endl;
	}
}
#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
inline ostream& operator<< (ostream& out, const pt& p) { return out << '(' << p.x << ", " << p.y << ')'; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

int n, H;

inline bool read()
{
	if (scanf("%d%d", &n, &H) != 2) return false;
	return true;
}

const int N = 100 + 13;

int g[N], tot[N];
li d[N][4];

inline li calc (const vector <int>& v)
{
	forn(i, sz(v) + 1) forn(j, 4) d[i][j] = 0;
	d[0][0] = 1;
	
	forn(i, sz(v))
		forn(taken, 4)
		{
			const li& dv = d[i][taken];
			if (dv == 0) continue;
			
			d[i + 1][taken] += dv;
			int rem = v[i] - taken;
			if (rem <= 0 || taken == 3) continue;
			
			d[i + 1][taken + 1] += dv * rem;
		}
		
	return d[sz(v)][3];
}

inline bool better (const pt& a, const pt& b)
{
	if (a.ft + a.sc > b.ft + b.sc) return true;
	if (max(a.ft, a.sc) > max(b.ft, b.sc)) return true;
	return false;
}

bool good (int a, int b)
{
	forn(i, n + 1) g[i] = tot[i] = 0;
	
	forl(i1, n)
		fore(i2, i1 + 1, n)
		{
			if (i1 == a || i1 == b) continue;
			if (i2 == a || i2 == b) continue;
			tot[i1]++;
			if (better(mp(a, b), mp(i1, i2))) g[i1]++;
		}
		
	vector <int> vg, vt;
	
	for (int i = n; i >= 1; i--)
	{
		if (i == a || i == b) continue;
		vg.pb(g[i]);
		vt.pb(tot[i]);
	}
	
	//forn(i, sz(vt)) cerr << vt[i] << ' '; cerr << endl;
	
	forn(i, sz(vg) - 1) assert(vg[i + 1] >= vg[i]);
	forn(i, sz(vt) - 1) assert(vt[i + 1] >= vt[i]);
	
	li cntNumer = calc(vg);
	li cntDenom = calc(vt);
	
	assert(cntNumer <= cntDenom);
	
	return 4 * cntNumer > cntDenom;
}

inline void solve(int test)
{
	printf("Case #%d: ", test + 1);
	
	forn(i, H)
	{
		int a, b;
		assert(scanf("%d%d", &a, &b) == 2);
		if (a > b) swap(a, b);
		if (good(a, b)) putchar('B');
		else putchar('F');
	}
	
	puts("");
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		assert(read());
		solve(test);
#ifdef SU2_PROJ
		cerr << "test " << test + 1 << ": " << clock() << endl;
#endif
	}
	
	return 0;
}

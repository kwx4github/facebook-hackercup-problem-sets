#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define x first
#define y second
#define PB push_back
#define REP(i,n) for (int i = 0; i < int(n); ++i)
#define FORE(i,a,b) for (int i = int(a); i <= int(b); ++i)
#define debug(x) cerr << #x << " = " << x << endl;

typedef long long ll;
typedef double ld; //TODO: Change to LD
typedef pair<ll, ll> P;
typedef vector<bool> Vb;
typedef vector<Vb> Mb;
typedef vector<char> Vc;
typedef vector<Vc> Mc;
typedef vector<int> Vi;
typedef vector<Vi> Mi;
typedef vector<ll> Vll;
typedef vector<Vll> Mll;
typedef vector<P> Vp;
typedef vector<Vp> Mp;
typedef vector<string> Vs;
typedef vector<Vs> Ms;

typedef queue<int> Q;
typedef priority_queue<int> PQ;

template <class Ta, class Tb> inline Tb cast(Ta a) {stringstream ss; ss << a; Tb b; ss >> b; return b; };

const double EPS = 1e-9;
const ll INF = 1000000000000000000LL;
const int diri[8] = { -1, 0, 1, 0, -1, 1, 1, -1 };
const int dirj[8] = { 0, 1, 0, -1, 1, 1, -1, -1 };

ld C[105][105];

bool f(int a, int b, int n) {
    if (a+b<n) return 0; //optimization ... hope it works :D
    if (a+b>50) return 0;
    if (b<a) swap(a,b);
    if(a<3) return 0;
    ll ok=0;
    ld tot=0;
    ld ans=0;
    //resultat = 3*P1 - 3*P2 + P3
    //ans := 1-(3*P1 - 3*P2 + P3) > 1/4
    //cerr << "Perdues vs 1 P(A1) " << endl;
    FORE(i,1,n) if(i!=a and i!=b) FORE(j,i+1,n) {
        if (i!=j and j!=a and j!=b) {
            if (i+j > a+b or (i+j==a+b and j>b)) ++ok;
        }
    }
    tot = C[n-2][2];
    ans += ld(3)*ld(ok)/ld(tot);
    //cerr << "de un tio: " << ok << "/" << tot << endl;
    
    //perdre vs 2 a al vegada
    ok=tot=0;
    FORE(i,1,n) if(i!=a and i!=b) FORE(j,i+1,n) {
        if (i!=j and j!=a and j!=b) {
            if (i+j > a+b or (i+j==a+b and j>b)) {
                FORE(x1,1,n) if (x1!=a and x1!=b and x1!=i and x1!=j) FORE(x2,x1+1,n) if (x2!=a and x2!=b and x2!=i and x2!=j and x1!=x2){
                    if (x1+x2 > a+b or (x1+x2==a+b and x2>b)) ++ok;
                }
            }
        }
    }
    //cerr << "de 2 tios: " << ok << endl;
    //tot = binom(n-2, 2)*binom(n-4,2)
    tot = C[n-2][2]*C[n-4][2];
    ans -= ld(3)*ld(ok)/ld(tot);
    
    //perdre vs 3 de cop!
    ok=0;
    FORE(i,1,n) if(i!=a and i!=b) FORE(j,i+1,n) {
        if (i!=j and j!=a and j!=b) {
            if (i+j > a+b or (i+j==a+b and j>b)) {
                FORE(x1,1,n) if (x1!=a and x1!=b and x1!=i and x1!=j) FORE(x2,x1+1,n) if (x2!=a and x2!=b and x2!=i and x2!=j and x1!=x2){
                    if (x1+x2 > a+b or (x1+x2==a+b and x2>b)) {
                        FORE(y1,1,n) if (y1!=a and y1!=b and y1!=i and y1!=j and y1!=x1 and y1!=x2) FORE(y2,y1+1,n) {
                            if (y2!=a and y2!=b and y2!=i and y2!=j and y2!=x1 and y2!=x2 and y1!=y2) {
                                if (y1+y2 > a+b or (y1+y2==a+b and y2>b)) ++ok;
                            }
                        }
                    }
                }
            }
        }
    }
    //cerr << "de 3 = " << ok << endl;
    //tot = binom(n-2, 2)*binom(n-4,2)*binom(n-6,2)
    tot = C[n-2][2]*C[n-4][2]*C[n-6][2];
    ans += ld(ok)/ld(tot);
    //ans = inclusion exclusion principle
    //Ok value iff: p*3 - (1-p) > 0
    //p>1/4  --> 4p>1
    return (ld(1)-ans)*ld(4) > ld(1);
}

int main() {
    for (int i=0;i<105;++i) for (int j=0;j<105;++j) C[i][j]=0;
    for (int i=0;i<105;++i) C[i][0]=C[i][i]=1;
    for (int i=2;i<105;++i) for (int j=1;j<i;++j){
        C[i][j] = C[i-1][j-1] + C[i-1][j];
    }

    int nt; cin >> nt;
    for (int cas=1;cas<=nt;++cas) {
        cout << "Case #" << cas << ": ";
        int n,h,a,b;
        cin >>n>>h;
        REP(i,h) {
            cin>>a>>b;
            cout << (f(a,b, n)?"B":"F");
        }
        cout << endl;
    }
}

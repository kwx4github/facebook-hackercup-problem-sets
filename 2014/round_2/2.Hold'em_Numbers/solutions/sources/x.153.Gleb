#pragma comment(linker, "/STACK:100000000")
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <ctime>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>
#include <list>
#include <deque>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define taskname "problem_c"

const double pi = acos(-1.0);
const int size = 200;
//const int magic = 1000 * 1000 * 10;

bool used[size];
int n;
//long long tot = 0;
long long ans[size][size];
long long getin[size][size];
//long long ans2[size][size];
//long long getin2[size][size];
long long rem[size][size][size];
long long remtot[size][size][size];

double calcprob(int f, int s, int n, int magic) {
	vector <pair <int, int> > allp;
	for (int i = 0; i < n; i++)
		for (int j = i + 1; j < n; j++)
			if (i != f && i != s && j != f && j != s)
				allp.pb(mp(i, j));
	srand(17);
	int ans = 0;
	vector <pair <int, int> > cur;
	random_shuffle(allp.begin(), allp.end());
	int curp = 0;
	for (int i = 0; i < magic; i++) {
		cur.clear();
		cur.pb(mp(f + s, s));
		if (curp > (int) allp.size() / 4) {
        	random_shuffle(allp.begin(), allp.end());
        	curp = 0;
        }	
        int j;
		for (; ; curp++) {
			j = curp;
			if (!used[allp[j].fs] && !used[allp[j].sc]) {
				used[allp[j].fs] = true;
				used[allp[j].sc] = true;
				cur.pb(mp(allp[j].fs + allp[j].sc, allp[j].sc));
				if (cur.size() == 4u)
					break;
			}
		}
		sort(cur.begin(), cur.end());
		if (cur.back() == mp(f + s, s))
			ans++;
		for (int j = 0; j < (int) cur.size(); j++) {
			used[cur[j].fs - cur[j].sc] = false;
			used[cur[j].sc] = false;
		}	
	}

	rem[n][f][s] += ans;
	remtot[n][f][s] += magic;
	return rem[n][f][s] * 1.0 / remtot[n][f][s];
}

double estans(int f, int s, int n) {
	int magic = 1000;
	double lst = 1.0;
	double cur = 0.0;
	while (true) {
//		cerr << lst << ' ' << cur << endl;
		double dst = fabs(lst - cur) * 2;
		double lb = min(lst, cur) - dst;
		double rb = max(lst, cur) + dst;
		if (lb > 0.25 || rb < 0.25)
			break;
	   	lst = cur;
	   	cur = calcprob(f, s, n, magic);
	   	magic *= 2;
	}

	return cur;
}

double resprob[size][size];

int main() {
	double sttm = clock();
	int tc;

	assert(freopen("input.txt", "r", stdin));
	assert(freopen("output.txt", "w", stdout));
	
	cin >> tc;

	for (int tnum = 0; tnum < tc; tnum++) {
		cin >> n;
	    for (int i = 0; i < n; i++)
	    	used[i] = false;
	   	for (int i = 0; i < n; i++)
	   		for (int j = 0; j < n; j++) {
	   			ans[i][j] = 0.0;
	   			getin[i][j] = 0.0;
	   		}
	for (int i = 0; i < n; i++) {
		used[i] = false;
	}
	if (n <= 20) {
	for (int c11 = 0; c11 < n; c11++) {
		used[c11] = true;
		for (int c12 = c11 + 1; c12 < n; c12++) {
			if (!used[c12]) {
				used[c12] = true;
				for (int c21 = c11 + 1; c21 < n; c21++) {
					if (!used[c21]) {
						used[c21] = true;
						for (int c22 = c21 + 1; c22 < n; c22++) {
							if (!used[c22]) {
								used[c22] = true;
								for (int c31 = c21 + 1; c31 < n; c31++) {
									if (!used[c31]) {
										used[c31] = true;
										for (int c32 = c31 + 1; c32 < n; c32++) {
											if (!used[c32]) {
												used[c32] = true;
												for (int c41 = c31 + 1; c41 < n; c41++) {
													if (!used[c41]) {
														used[c41] = true;
														for (int c42 = c41 + 1; c42 < n; c42++) {
															if (!used[c42]) {
//																tot++;
																vector <pair <int, int> > vec;
																vec.pb(mp(c11 + c12, c12));
																vec.pb(mp(c21 + c22, c22));
																vec.pb(mp(c31 + c32, c32));
																vec.pb(mp(c41 + c42, c42));
																sort(vec.begin(), vec.end());
																for (int i = 0; i < (int) vec.size(); i++)
																	getin[vec[i].fs - vec[i].sc][vec[i].sc]++;
																ans[vec.back().fs - vec.back().sc][vec.back().sc]++;
															}
														}
														used[c41] = false;
													}
												}
												used[c32] = false;
											}
										}
										used[c31] = false;
									}
								}
								used[c22] = false;
							}
						}
						used[c21] = false;
					}
				}
				used[c12] = false;
			}
		}
		used[c11] = false;
	}
	
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			resprob[i][j] = ans[i][j] * 1.0 / getin[i][j];
	} else {
	
		double mnd = 1.0;
		double mxd = 0.0;

	//	return 0;
		for (int i = 0; i < n; i++)
			for (int j = i + 1; j < n; j++) {
				//cerr << i << ' ' << j << endl;
//			assert(getin2[i][j] != 0);
				double d = estans(i, j, n);
//		   	cout << i << ' ' << j << ' ' << ans[i][j] << ' ' << getin[i][j] << ' ' << ans[i][j] * 1.0 / getin[i][j] << ' ' << d << endl;
		   		resprob[i][j] = d;
		   		//cout << i << ' ' << j << ' ' << d << endl;

				//mnd = min(mnd, fabs(d - 0.25));
//			mxd = max(mxd, fabs(ans[i][j] * 1.0 / getin[i][j] - d));
		}
	}
	int h;
	cin >> h;
	cout << "Case #" << tnum + 1 << ": ";
	int c1, c2;
	for (int i = 0; i < h; i++) {
		cin >> c1 >> c2;
		c1--, c2--;
		if (c1 > c2)
			swap(c1, c2);
//		cerr << resprob[c1][c2] << endl;
		if (resprob[c1][c2] > 0.25 + 1e-8) {
			cout << "B";
		} else {
			cout << "F";
		}
	}
	cout << endl;
	   cerr << tnum + 1 << " FINISHED" << endl;
	}
	//cout << mnd << endl;
//	cout << mxd << endl;

	//cout << (clock() - sttm) / CLOCKS_PER_SEC;

	return 0;
}
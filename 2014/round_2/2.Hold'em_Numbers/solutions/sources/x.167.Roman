#ifdef SHTRIX 
#include "/Users/roman/Dev/SharedCpp/DebugOutput.h"
#endif
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <stack>
#include <cstring>
#include <ctime>
#include <cstdio>
#include <memory>
using namespace std;
#define pb push_back
#define INF 1000000000
#define L(s) (int)((s).end()-(s).begin())
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORD(i,a,b) for(int i = (a); i >= (b); i--)
#define rep(i,n) FOR(i,1,(n))
#define rept(i,n) FOR(i,0,(n)-1)
#define C(a) memset((a),0,sizeof(a))
#define ll long long
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define VI vector<int>
#define ppb pop_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
//#define x first
//#define y second
#define sqr(a) (a)*(a)
#define D(a,b) sqrt(((a).x-(b).x)*((a).x-(b).x)+((a).y-(b).y)*((a).y-(b).y))
#define pi 3.1415926535897932384626433832795028841971
#define UN(v) sort((v).begin(),(v).end()),v.erase(unique(v.begin(),v.end()),v.end())

const int mintries = 100;
const int maxiters = 1000;
const int conf = 5;
const double mult = 1.5;

inline bool fi(int x, int y, int a, int b) {
    if (x + y > a + b) return true;
    if ((x + y) == (a + b) && max(x, y) > max(a, b)) return true;
    return false;
}

inline void add(VI &v, int x) {
    VI p = v;
    SORT(p);
    rept(i, L(p))
        if (x >= p[i])
            x++;
    v.pb(x);
}

inline bool win(int x, int y, int n) {
    VI d;
    d.pb(x);
    d.pb(y);
    rept(i, 6)
        add(d, rand() % (n - 2 - i) + 1);
    VI v;
    for (int i = 2; i < d.size(); i++)
        v.pb(d[i]);
    // rep(i, n)
    //     if (i != x && i != y) {
    //         v.pb(i);
    //     }
    // random_shuffle(all(v));

    return fi(x, y, v[0], v[1]) && fi(x, y, v[2], v[3]) && fi(x, y, v[4], v[5]);
}

char solve(int x, int y, int n, int iters) {
    int r[2] = {0, 0};
    rept(iter, iters) {
        r[win(x, y, n)]++;
    }
    int E = 3 * r[1] - r[0];
    if (E > 0) return 'B';
    else       return 'F';
}

char whatToDo(int x, int y, int n) {
    for (int iters = mintries; ; iters *= mult) {
        int r[] = {0, 0};
        rept(i, conf) {
            r[solve(x, y, n, iters) == 'B']++;
        }
        //cerr << iters << " " << r[0] << " " << r[1] << endl;

        if (r[0] == 0 || r[1] == 0) {
            if (r[0] == 0) return 'B';
            else           return 'F';
        }
        if (iters > maxiters) {
            if (r[0] < r[1]) return 'B';
            else             return 'F';
        }
    }
}

void gen_input() {
    int TC = 20;
    cout << TC << endl;
    rept(i, TC) {
        int n = 100, h = 10000;
        cout << n << " " << h << endl;
        rept(j, h) {
            int x = rand() % (n - 1) + 2;
            int y = rand() % (x - 1) + 1;
            printf("%d %d\n", x, y);
        }
    }
}

void solve(int case_id) {
    cerr << "case:  " << case_id << endl;
    int n, h;
    scanf("%d%d", &n, &h);
    string res = "";
    rept(i, h) {
        int x, y;
        scanf("%d%d", &x, &y);
        //cerr << x << " " << y << " " << i << "/" << h << endl;
        char c = whatToDo(x, y, n);
        //cout << x << " " << y << " " << n << " " <<  c << endl;
        res += c;
    }
    printf("Case #%d: %s\n", case_id, res.c_str());
}

int main()
{
    //gen_input(); exit(0);
    #ifdef SHTRIX 
    freopen("input.txt","rt",stdin); 
    //freopen("output.txt","wt",stdout); 
    #endif
	int TC;
    scanf("%d", &TC);
    rep(tc, TC) {
        solve(tc);
    }
    return 0;
}

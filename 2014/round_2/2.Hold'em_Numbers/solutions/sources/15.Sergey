#pragma comment(linker, "/STACK:60000000")
#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <sstream>
#include <iomanip>
#include <complex>
#include <queue>
#include <functional>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)
#define next NEXTHUI
#define prev PREVHUI
#define y1 Y1HUI

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}

int n, h;
int c1, c2;
int sm, mx;

int64 C[105][105];
int64 t[4][105];
int in[105];

void move(int& j) {
	j = max(j, 1);
	while (j == c1 || j == c2) j++;
}

int inside(int l, int r) {
	return in[r] - in[l-1];
}

int64 calcc(int n, int k) {
	if (k * 2 > n) return 0;
	if (k == 0) return 1;
	if (k == 1) return C[n][2];
	if (k == 2) return C[n][2] * C[n-2][2] / 2;
	if (k == 3) return C[n][2] * C[n-2][2] * C[n-4][2] / 6;
	return 0;
}

int64 loose(int k, int n) {
	if (k == 3)
		return t[k][n] = 0;
	if (t[k][n] != -1)
		return t[k][n];
	int64& res = t[k][n];
	res = 0;
	for (int i = n; i >= 1; i--) {
		if (i == c1 || i == c2) continue;
		int j;
		if (i > mx)
			j = sm - i;
		else
			j = sm - i + 1;
		move(j);
		if (j >= i) break;
		res = res + (i - j - inside(j, i)) * calcc(i-1-in[i-1]-(k+1), 2 - k);
		res = res + loose(k + 1, i - 1) * max(0, (j-1 - inside(1, j) - k));
	}			
	return res;
}

bool win() {
	scanf("%d%d", &c1, &c2);
	sm = c1 + c2;
	mx = max(c1, c2);
	seta(t, 255);
	seta(in, 0);
	for (int i = 1; i <= n; i++) {
		in[i] = in[i-1];
		if (i == c1 || i == c2)
			in[i]++;
	}
	int64 l = loose(0, n);
	int64 w = calcc(n-2, 3) - l;
	assert(l >= 0 && w >= 0);
	int64 prob = w * 3 - l * 1;
	return (prob > 0);
}

void solve() {
	scanf("%d%d", &n, &h);
	forn(i, h)
		printf("%c", win() ? 'B' : 'F');
	printf("\n");			
}

int main ()
{
//	freopen ("input.txt", "r", stdin);
//	freopen ("output.txt", "w", stdout);
	seta(C, 0);
	forn(i, 105)
		C[i][0] = 1;
	for (int i = 1; i <= 100; i++)
		for (int j = 1; j <= 100; j++)
			C[i][j] = C[i-1][j] + C[i-1][j-1];
	int tt;
	cin >> tt;
	forn(ii, tt) {
		printf("Case #%d: ", ii + 1);
		solve();
		cerr << clock() << endl;
	}
	return 0;
}

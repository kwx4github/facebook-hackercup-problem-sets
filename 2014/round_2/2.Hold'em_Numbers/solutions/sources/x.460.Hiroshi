#include <stdio.h>
#include <cstdlib>
#include <string.h>
#include <math.h>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <iostream>
#include <fstream>
#include <map>
#include <algorithm>
#include "windows.h"
//#include "../../gmp_int.h"
//#include "../../common.h"
#define MAX(a, b)		((a)>(b)?(a):(b))
#define MAX3(a, b, c)	(MAX((a),MAX((b),(c))))
#define FOR(a,b,c)		for (s32(a)=(b);(a)<(s32)(c);(a)++)
#define RAND(a,b)		((a)+(s32)(rand()*((b)-(a)+1.0)/(1.0+RAND_MAX)))
#define BL				{char bl[10];cin.getline(bl, 10);}
#define GL(c)			cin.getline(c, sizeof(c))
typedef char					s8;
typedef unsigned char			u8;
typedef short					s16;
typedef unsigned short			u16;
typedef int						s32;
typedef unsigned int			u32;
typedef long long int			s64;
typedef unsigned long long int	u64;
using namespace std;

ifstream test_input;
#define cin test_input


void Smart()
{
}

const s32 L=100;
s32 dic[2*L+1][L+1];

void Naive()
{
    s64 N,H,C1,C2,a1,a2,b1,b2,c1,c2,as,bs,cs,S;
    cin >> N >> H;

//    N = 100;    H = 10000;

    memset(dic,0,sizeof(s32)*(2*N+1)*(N+1));
    FOR (i,0,H) {
        s64 t1, t2;
        cin >> t1 >> t2;

        //t1 = RAND(1,N);
        //while (true) {
        //    t2 = RAND(1,N);
        //    if (t1!=t2) break;
        //}

        C1 = min(t1,t2), C2 = max(t1,t2);
        vector<s64> v;
        FOR (k,1,N+1) {
            if (k!=C1 && k!=C2) v.push_back(k);
        }

        s32 d=0;
        FOR (j,1,N+1) {
            FOR (k,1,N+1) {
                if ((C1+C2>j+k || (C1+C2==j+k && C2>=k)) && dic[j+k][k]==1) d=1;
                if ((C1+C2<j+k || (C1+C2==j+k && C2<=k)) && dic[j+k][k]==-1) d=-1;
            }
        }
        if (d==1) { cout << "B";    continue; }
        if (d==-1) { cout << "F";    continue; }

        s64 w = 0, t = 1;
        DWORD t0 = ::GetTickCount();
        for (; ; t ++) {
            bool win = true;
            random_shuffle(v.begin(), v.end());
            a1 = min(v[0],v[1]);  a2 = max(v[0],v[1]);
            b1 = min(v[2],v[3]);  b2 = max(v[2],v[3]);
            c1 = min(v[4],v[5]);  c2 = max(v[4],v[5]);
            as = a1+a2; bs = b1+b2; cs = c1+c2; S = C1+C2;
            if (S<as || S<bs || S<cs) win = false;
            if (S==as && max(C1,C2)<max(a1,a2)) win = false;
            if (S==bs && max(C1,C2)<max(b1,b2)) win = false;
            if (S==cs && max(C1,C2)<max(c1,c2)) win = false;
            if (win) w ++;
            if (t%10000==0) {
                //if ((double)w/t > 0.3) break;
                //if ((double)w/t < 0.1) break;
                //if (::GetTickCount() > t0 + 100) break;
                break;
            }
        }
        if (4*w > t) {
            dic[C1+C2][C2] = 1;
            cout << "B";
        } else {
            cout << "F";
            dic[C1+C2][C2] = -1;
        }
    }
}

int main(int argc, char* argv[])
{
	cout.precision(15);
	if (argc!=2) {
		cout << "Need input file name." << endl;
		return 0;
	}
	test_input.open(argv[1]);
	if (test_input.fail()) {
		cout << "Cannot open input file " << argv[1] << "." << endl;
		return 0;
	}

	s32 num_of_trial;
	cin >> num_of_trial;
	FOR (tt,0,num_of_trial) {
		cout << "Case #" << tt+1 << ": ";

        DWORD t0=::GetTickCount();
		Naive();
//        cout << 0.001*(::GetTickCount()-t0) << "s" << endl;
		cout << endl;
	}

	return 0;
}

using System;
using System.Collections.Generic;
using System.Linq;
class App {
	static bool _isDebug = true;
	
	static void Debug(object o) { Debug(o.ToString(), new object[0]); }
	static void Debug(string str, params object[] ps) {
		if (!_isDebug) return;
		Console.WriteLine("Debug: " + string.Format(str, ps));
	}
	
	static Random rand = new Random();
	
	static bool shouldBet(int n, int c1, int c2) {
checked {
		if (c1 < c2) return shouldBet(n, c2, c1);
		
		int mySum = c1+ c2;
		
		var cards = new int[n - 2];
		for (int i = 1, j = 0 ; i <= n ; i++) if (i != c1 && i != c2) cards[j++] = i;
		
		var my = 0L;
		var no = 0L;
		
		for (int i  =0 ; i < 10000 ; i++) {
			for (int j = 0 ; j < 6 ; j++) {
				var i2 = rand.Next(j, n - 2);
				var tmp = cards[i2];
				cards[i2] = cards[j];
				cards[j] = tmp;
			}
			var win = true;
			for (int j = 0 ; j < 6 ; j+= 2) {
				int s = cards[j] + cards[j + 1];
				if (s > mySum || (s == mySum && c1 < Math.Max(cards[j], cards[j + 1]))) {
					win = false;
					break;
				}
			}
			if (win) my++;
			else no++;
		}
		
		var all = my + no;
		return my  * 4 > all;
		return true;
}	}
	
	static string Solve() {
checked {
		var s = Console.ReadLine().Trim().Split(new [] {" "}, StringSplitOptions.RemoveEmptyEntries);
		var n = int.Parse(s[0]);
		var h = int.Parse(s[1]);
		
		var res = new char[h];
		for (int i = 0 ; i < h ; i++) {
			s = Console.ReadLine().Trim().Split(new [] {" "}, StringSplitOptions.RemoveEmptyEntries);
			var c1 = int.Parse(s[0]);
			var c2 = int.Parse(s[1]);
			var bet = shouldBet(n, c1, c2);
			res[i] = bet ? 'B' : 'F';
		}
		return new string(res);
}	}

	static void Main() {		
		try {
		var t = int.Parse(Console.ReadLine());
		
		for (var i = 1 ; i <= t ; i++) {
			Console.WriteLine("Case #{0}: {1}", i, Solve());
		}
		} catch (Exception e) {
			Console.WriteLine(e);
		}
	}
}
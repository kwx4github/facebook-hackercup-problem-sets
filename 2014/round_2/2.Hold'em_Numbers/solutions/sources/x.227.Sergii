#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> pnt;

#define tup(name, pos) get<(pos)>(name)
#define FI(i,a) for (int i=0; i<(a); ++i)
#define FOR(i,s,e) for (int i=(s); i<(e); ++i)
#define MEMS(a,b) memset(a,b,sizeof(a))
#define pb push_back
#define mp make_pair
#define ALL(a) a.begin(),a.end()
#define V(t) vector < t >
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define ABS(a) ((a)>(0)?(a):(-(a)))
#define ALL(a) a.begin(),a.end()

#define dout(a) cerr << a << endl
#define sout(a) cerr << a << "  "
#define lbl cerr << "debug_label" << endl;

const double pi = 3.14159265358979323846264338327950288419716939937511;
const double eps = 1e-9;

//*
char ch_ch_ch[1<<20];
inline string gs() {scanf("%s",ch_ch_ch); return string(ch_ch_ch);}
inline string gl() {gets(ch_ch_ch); return string(ch_ch_ch);}
inline int gi() {int x; scanf("%d",&x); return x;}
//*/

const int inf = 1000000000;

// code starts here


bool comper(pnt a, pnt b)  {
    if (a.first+a.second < b.first + b.second) return true;
    if (a.first+a.second > b.first + b.second) return false;
    return  a < b;
}


int n,h;
V(pnt) prs;

V(LL) cv;
int cntDig[101][4955];
int prsN;

#define X first
#define Y second

inline bool good(pnt a, pnt b) {
    if (a.X == b.X || a.Y == b.Y || a.X == b.Y || a.Y == b.X) return false;
    return true;
}

inline pnt gp(int x, int y) {
    if (x > y) return mp(x,y);
    else return mp(y,x);
}

void solution() {

    int tn = gi();
    FI(iter,tn) {
        printf("Case #%d: ",iter + 1);
        n = gi();
        h = gi();
        prs.clear();
        FOR(i,2,n+1) FOR(j,1,i) prs.pb(mp(i,j));
        sort(ALL(prs),comper);
        cv.clear();
        prsN = prs.size();
        cv.resize(prsN,0);
        MEMS(cntDig,0);
        FI(i,prsN) {
            cntDig[prs[i].X][i]++;
            cntDig[prs[i].Y][i]++;
        }
        FOR(i,1,prsN) FI(dig,101) cntDig[dig][i] += cntDig[dig][i-1];
       // FI(i,prsN) dout(prs[i].X << ' ' << prs[i].Y);
        FOR(i,2,prsN) {
            for (int j = i - 1; j >= 1; --j) {
                if (good(prs[i],prs[j])) {
                    cv[i] += j;
                    cv[i] -= cntDig[prs[i].X][j-1];
                    cv[i] -= cntDig[prs[i].Y][j-1];
                    cv[i] -= cntDig[prs[j].X][j-1];
                    cv[i] -= cntDig[prs[j].Y][j-1];
                    cv[i] += (gp(prs[i].X, prs[j].X) < prs[j]);
                    cv[i] += (gp(prs[i].X, prs[j].Y) < prs[j]);
                    cv[i] += (gp(prs[i].Y, prs[j].X) < prs[j]);
                    cv[i] += (gp(prs[i].Y, prs[j].Y) < prs[j]);
                }
            }
        }
        FOR(i,1,prsN) cv[i] += cv[i-1];
        LL N = prsN - 1;
        LL sum = cv.back();
       // dout(prsN);
        FI(i,h) {
            int x = gi();
            int y = gi();
            int pos = lower_bound(ALL(prs),gp(x,y),comper) - prs.begin();
            if (pos == 0) printf("F");
            else {
                LL val = cv[pos - 1];
                if (4 * val > sum) printf("B");
                else printf("F");
            }
        }
        printf("\n");


    }





}


// code ends here

int main(int argc, char** argv) {

#ifdef IGEL_ACM
    freopen("in.txt","r",stdin);
    freopen("out.txt", "w", stdout);
    clock_t beg_time = clock();
#else
    //freopen(argv[1],"r",stdin);
    //freopen("painting.in", "r", stdin);
    //freopen("painting.out", "w", stdout);

#endif

    solution();

#ifdef IGEL_ACM
    fprintf(stderr,"*** Time: %.3lf ***\n",1.0*(clock()-beg_time)/CLOCKS_PER_SEC);
#endif

    return 0;
}


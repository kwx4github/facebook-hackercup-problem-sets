#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REP(i,n) FOR(i,0,n)
#define REPD(i,n) FORD(i,0,n)
#define VAR(v,w) __typeof(w) v=(w)
#define FORE(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define SIZE(c) ((int)(c).size())
#define MP make_pair
#define FT first
#define SD second
#define CLEAR(a) memset((a), 0, sizeof(a))
#define INT(x) int x; scanf("%d", &x)
#define LLG(x) LL x; scanf("%lld", &x)
#define STR(n,x) char x[n]; scanf("%s", x)
#define LINE(n,x) char x[n]; gets(x)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<PII> VII;
typedef vector<double> VD;
typedef vector<LD> VLD;
typedef vector<LL> VLL;
typedef vector<bool> VB;

void oneCase();

int main() {
	srand(123412345);
	int ttt;
	scanf("%d\n", &ttt);
	REP(tt, ttt) {
		printf("Case #%d: ", tt + 1);
		oneCase();
		fprintf(stderr, "Case #%d.\n", tt + 1);
		fflush(stderr);
	}
}



const int rolls = 5000;

bool u[100];
int r[6];

bool better(int x1, int x2, int y1, int y2) {
	int x = x1 + x2;
	int y = y1 + y2;
	if (x != y) return x > y;
	return max(x1, x2) > max(y1, y2);
}

bool bet(int n, int c1, int c2) {
	REP(i,n) u[i] = 0;
	u[c1] = u[c2] = 1;
	int win = 0;
	REP(ii,rolls) {
		REP(i,6) {
			do
				r[i] = rand() % n;
			while (u[r[i]]);
			u[r[i]] = 1;
		}
		if (better(c1, c2, r[0], r[1]) && better(c1, c2, r[2], r[3]) && better(c1, c2, r[4], r[5])) ++win;
		REP(i,6) u[r[i]] = 0;
	}
	return win*4 > rolls;
}

void oneCase() {
	INT(n);
	INT(h);
	REP(hh,h) {
		INT(c1);
		INT(c2);
		printf(bet(n, c1-1, c2-1) ? "B" : "F");
	}
	printf("\n");
}

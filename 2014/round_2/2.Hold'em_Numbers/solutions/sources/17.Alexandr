#pragma comment(linker, "/STACK:600000000")
#define _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>

#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <queue>
#include <stack>
#include <list>

#include <ctime>
#include <cassert>

using namespace std;

typedef long double ldb;
typedef long long int64;
typedef pair <int, int> pii;
typedef pair <double, double> pdd;

#define y0 wwwwwww
#define y1 qqqqqqq
#define next NEXT
#define prev PREV
#define forn(i, n) for (int i = 0; i < (int) n; i++)
#define ford(i, n) for (int i = (int) n - 1; i >= 0; i--)
#define seta(a, b) memset(a, b, sizeof(a))
#define pb push_back
#define all(a) (a).begin(), (a).end()
#define last(a) a[a.size() - 1]
#define mp make_pair
#define fs first
#define sc second

template <class T> T sqr(T x) { return x * x; }

double const pi = 3.1415926535897932384626433832795;
int const inf = (int) 1e9;
int64 const inf64 = (int64) 4e18;
const string name = "b";

const int NMAX = 101;

int n, q, cnt[NMAX];
char precalc[NMAX][NMAX][NMAX];
vector<pair<int, pii> > hand;
vector<pii> cross[NMAX][NMAX];

void solve() {
	cin >> n >> q;
/*	int64 sum = 1;
	for (int i = n - 7; i <= n - 2; ++i)
		sum *= i;
	sum /= 48;

	hand.clear();
	forn(i, n)
		forn(j, i)
			hand.pb(mp(i + j, mp(i, j)));
	sort(all(hand));
	forn(i, hand.size()) {
		cross[hand[i].sc.fs][hand[i].sc.sc].clear();
		forn(j, i)
			if (hand[i].sc.fs == hand[j].sc.fs || hand[i].sc.fs == hand[j].sc.sc || hand[i].sc.sc == hand[j].sc.fs || hand[i].sc.sc == hand[j].sc.sc)
				cross[hand[i].sc.fs][hand[i].sc.sc].pb(hand[j].sc);
	}

	forn(i, hand.size()) {
		int a = hand[i].sc.fs, b = hand[i].sc.sc;
		seta(cnt, 0);
		int good = 0, edges = 0;
		int64 ans = 0;
		forn(j, i) {
			int x = hand[j].sc.fs, y = hand[j].sc.sc;
			if (x == a || y == a || x == b || y == b) continue;
			
			int newgood = good, newedges = edges;
			forn(f, cross[x][y].size()) 
				if (cross[x][y][f].fs != a && cross[x][y][f].fs != b && cross[x][y][f].sc != a && cross[x][y][f].sc != b)
				{
					newgood--;
					cnt[cross[x][y][f].fs]--;
					cnt[cross[x][y][f].sc]--;
					newedges -= 2 * (cnt[cross[x][y][f].fs] + cnt[cross[x][y][f].sc]) + 1;
				}
			forn(f, cross[x][y].size())
				if (cross[x][y][f].fs != a && cross[x][y][f].fs != b && cross[x][y][f].sc != a && cross[x][y][f].sc != b)
				{
					cnt[cross[x][y][f].fs]++;
					cnt[cross[x][y][f].sc]++;
				}
			ans += newgood * newgood - newedges;

			edges += 2 * (cnt[x] + cnt[y]) + 1;
			cnt[x]++, cnt[y]++;
			good++;
		}
		precalc[a][b] = ans / 2;
	}*/

	forn(i, q) {
		int x, y;
		scanf("%d%d", &x, &y);
		//x--, y--;
		if (x < y) swap(x, y);
		printf("%c", precalc[n][x][y]);
		//printf("%d %d %d ", n, x + 1, y + 1);
		//if (precalc[x][y] * 4 > sum) printf("B");
		//else printf("F");
		//printf("\n");

/*		CHECKER
		int ept = 0;
		forn(i1, hand.size())
			if (hand[i1].sc == mp(x, y)) {
				forn(i2, i1)
					forn(i3, i2)
						forn(i4, i3)
						{
							seta(cnt, 0);
							cnt[hand[i1].sc.fs]++;
							cnt[hand[i1].sc.sc]++;
							cnt[hand[i2].sc.fs]++;
							cnt[hand[i2].sc.sc]++;
							cnt[hand[i3].sc.fs]++;
							cnt[hand[i3].sc.sc]++;
							cnt[hand[i4].sc.fs]++;
							cnt[hand[i4].sc.sc]++;
							int ok = 1;
							forn(j, n)
								if (cnt[j] > 1) ok = 0;
							ept += ok;
						}
				break;
			}
		cerr << ept << " " << precalc[x][y] << endl;
		if (ept != precalc[x][y]) exit(1);*/
	}
	printf("\n");
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen((name + ".answers").data(), "r", stdin);
	freopen((name + ".out").data(), "w", stdout);
#endif

/*	GEN INPUT TO PRECALC
	cout << 100 << endl;
	forn(i, 100) {
		cout << i + 1 << " " << (i + 1) * (i) / 2 << endl;
		forn(j, i + 1)
			forn(f, j)
				cout << j + 1 << " " << f + 1 << endl;
	}
	exit(0);*/

	int x, y, n;
	char ans;
	while (1) {
		cin >> n;
		if (n == 0) break;
		cin >> x >> y >> ans;
		precalc[n][x][y] = ans;
	}

	//fclose(stdin);
	//freopen((name + ".in").data(), "r", stdin);

	int tst;
	cin >> tst;
	forn(i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
		cerr << i + 1 << " " << clock() << endl;
	}

	return 0;
}
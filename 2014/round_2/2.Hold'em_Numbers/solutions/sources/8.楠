#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;
double dp[5];
double c[105][105];
void pre() {
	int i, j;
	for (i = 0; i < 105; ++i) {
		c[i][0] = c[i][i] = 1;
		for (j = 1; j < i; ++j)
			c[i][j] = c[i - 1][j] + c[i - 1][j - 1];
	}
}
double C(int x, int y) {
	double ret = 1;
	if (x < y * 2)
		return 0;
	while (y--) {
		ret *= c[x][2];
		x -= 2;
	}
	return ret;
}
int main() {
	int t, cas = 0;
	int n, h, x, y, i, flag;
	scanf("%d", &t);
	pre();
	while (t--) {
		cas++;
		scanf("%d%d", &n, &h);
		printf("Case #%d: ", cas);
		while (h--) {
			scanf("%d%d", &x, &y);
			if (x > y) {
				int tt = x;
				x = y;
				y = tt;
			}
			dp[0] = dp[1] = dp[2] = dp[3] = 0;
			dp[0] = 1;
			for (i = n; i > 0; --i) {
				if (i == y)
					continue;
				if (x + y - i >= i)
					break;
				if (i < y) {
					flag = 1;
				} else
					flag = 0;
				int p = x + y - i - 1;
				if (p - 2 >= 1) {
					dp[3] += dp[2] * (p - 2);
				}
				if (p - 1 >= 1) {
					dp[2] += dp[1] * (p - 1);
				}
				if (p >= 1) {
					dp[1] += dp[0] * p;
				}
			}
			int p = (x + y) / 2;
			double ans = dp[0] * C(p - 1, 3) + dp[1] * C(p - 2, 2) * 3.0
					+ dp[2] * C(p - 3, 1) * 6.0 + dp[3] * 6.0;
			if (ans / C(n - 2, 3) >= 0.25)
				printf("B");
			else
				printf("F");
		}
		puts("");
	}
}

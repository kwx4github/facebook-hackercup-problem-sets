#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <windows.h>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <ctime>
#include <cmath>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
inline ostream& operator<< (ostream& out, const pt& p) { return out << '(' << p.x << ", " << p.y << ')'; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 100 + 3;
const int M = 1000;

int n, m;

inline bool read()
{
	if (scanf("%d%d", &n, &m) != 2) return false;
	
	return true;
}

inline int sum(const pt& a) { return a.ft + a.sc; }
inline int max(const pt& a) { return max(a.ft, a.sc); }

inline bool Less(const pt& a, const pt& b)
{
	if (sum(a) != sum(b)) return sum(a) < sum(b);
	return max(a) < max(b);
}

int sz;
int a[N];

int b[6];

inline bool solve(int x, int y)
{
	sz = 0;
	forn(i, n)
		if (i != x && i != y)
			a[sz++] = i;

	int cnt = 0;
	forn(iter, M)
	{
		forn(i, 6)
		{
			int idx = rand() % sz;
			b[i] = a[idx];
			
			swap(a[idx], a[sz - 1]);
			sz--;				
		}
		
		bool ok = true;
		for(int i = 0; i < 6; i += 2)
			if (!Less(mp(b[i], b[i + 1]), mp(x, y)))
			{
				ok = false;
				break;				
			}
			
		if (ok) cnt++;		
		sz += 6;
	}

	return 55 * cnt > M * 13;
}

inline void solve(int test)
{
	cerr << test << endl;
	printf("Case #%d: ", test + 1);
	
	forn(i, m)
	{
		int x, y;
		assert(scanf("%d%d", &x, &y) == 2);		
		x--, y--;
		
		bool res = solve(x, y);
		putchar(res ? 'B' : 'F');
	}
	
	puts("");
}

int main()
{
#ifdef SU2_PROJ
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;
    
    srand(GetTickCount());
    //srand(31415926);
    
    int testCount;
    cin >> testCount;
    
    forn(test, testCount)
    {
	    assert(read());
    	solve(test);
    }
    
#ifdef SU2_PROJ
    cerr << "== TIME: " << clock() << " ==" << endl;
#endif

    return 0;
}

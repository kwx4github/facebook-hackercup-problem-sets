#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
#include <queue>
#include <set>
#include <cstring>
#include <iomanip>

using namespace std;

typedef long long int64 ;
typedef unsigned long long uint64 ;
typedef pair<int, int> pint ;
typedef pair<int64, int64> pint64 ;
typedef vector<int> vint ;

#define px first
#define py second

#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(x) ((x) > 0 ? (x) : -(x))

#define REP(i, n) for (int i = 0 ; i < (n) ; i ++)
#define REPD(i, n) for (int i = (n) ; i >= 0 ; i --)
#define FOR(i, a, b) for (int i = (a) ; i < (b) ; i ++)
#define FORD(i, a, b) for (int i = (a) ; i >= (b) ; i --)

#define MUL64(x, y) (((int64) (x)) * ((int64) (y)))
#define MULMOD(x, y, modul) (MUL64(x, y) % modul)
#define MUL(x, y) MULMOD(x, y, modul)
#define ADD(reg, val) { reg += val ; if (reg >= modul) reg -= modul ; }

#define SET(v, val) memset(v, val, sizeof(v)) ;
#define SIZE(v) ((int) (v).size())
#define ALL(v) (v).begin(), (v).end()
#define SORT(v) { sort(ALL(v)) ; }
#define RSORT(v) { SORT(v) ; REVERSE(v) ; }
#define REVERSE(v) { reverse(ALL(v)) ; }
#define UNIQUE(v) unique((v).begin(), (v).end())
#define RUNIQUE(v) { SORT(v) ; (v).resize(UNIQUE(v) - (v).begin()) ; }

//__inline int read_int() { char ch ; int ret = 0, sgn = 1 ; while (true) { ch = getchar_unlocked() ; if (ch == '-') sgn = -1 ; if (ch >= '0' && ch <= '9') break ; } while (ch >= '0' && ch <= '9') { ret = 10 * ret + (int) (ch - '0') ; ch = getchar_unlocked() ; } return ret * sgn ; }
//__inline void read_string(char *buffer) { int id = 0 ; char ch ; while (true) { ch = getchar_unlocked() ; if (ch >= 33 && ch <= 125) break ; }  while (ch >= 33 && ch <= 125) { buffer [id ++] = ch ; ch = getchar_unlocked() ; } buffer [id] = 0 ; }
__inline bool nextInt(int &val) { char ch ; int sgn = 1 ; while ((ch = getchar()) != EOF) { if (ch == '-') sgn = -1 ; if (ch >= '0' && ch <= '9') break ; }  if (ch == EOF) return false ; val = (int) (ch - '0') ; while (true) { ch = getchar() ; if (ch >= '0' && ch <= '9') { val = 10 * val + (int) (ch - '0') ; } else break ; } val *= sgn ; return true ; }
__inline bool nextString(string &s) { char ch ; while ((ch = getchar()) != EOF) { if (ch >= 33 && ch <= 126) break ; } if (ch == EOF) return false ; s = string(1, ch) ; while (true) { ch = getchar() ; if (ch >= 33 && ch <= 126) { s = s + string(1, ch) ; } else break ; } return true ; }



int n, h, c1, c2 ;

#define bin2(n) (0.5 * (n) * ((n) - 1))

bool used [111] ;

int main() {
  ios_base::sync_with_stdio(false) ;

  int numTests ;
  cin >> numTests ;
  //numTests = 20 ;
  srand(time(NULL)) ;
  REP(test, numTests) {
    cin >> n >> h ;
    //n = 100 ; h = 10000 ;
    string ret = "" ;
    double minProb = 1.0 ;
    REP(ih, h) {
      cin >> c1 >> c2 ;
      //c1 = rand() % n + 1 ;
      //do { c2 = rand() % n + 1 ; } while (c1 == c2) ;
      int s = c1 + c2, m = max(c1, c2) ;
      int cards [8] ;
      SET(used, false) ;
      cards [0] = c1 ; cards [1] = c2 ;
      used [c1] = true ; used [c2] = true ;
      int cnt = 100, win = 0, x1, x2 ;
      while (true) {
        bool ok ;
        REP(i, cnt) {
          ok = true ;
          FOR(k, 2, 8) {
            do { cards [k] = rand() % n + 1 ; } while (used [cards [k]]) ;
            used [cards [k]] = true ;
          }
          FOR(k, 1, 4) {
            x1 = cards [2 * k], x2 = cards [2 * k + 1] ;
            if (x1 + x2 > s || (x1 + x2 == s && max(x1, x2) > m)) ok = false ;
            used [x1] = false ; used [x2] = false ;
          }
          if (ok) win ++ ;
        }
        double prob = 1.0 * win / cnt ;

        if (cnt == 100) {
          if (prob >= 0.26) { ret += "B" ; break ; }
          else if (prob <= 0.24) { ret += "F" ; break ; }
          else cnt = 100000 ;
        } else {
          if (prob > 0.25 + 1e-9) ret += "B" ;
          else ret += "F" ;
          break ;
        }

        if (ABS(0.25 - prob) < ABS(0.25 - minProb) && ABS(0.25 - prob) > 1e-7) minProb = prob ;
      }
    }
    cout << "Case #" << (test + 1) << ": " << ret << endl ; ;
    //cout << fixed << setprecision(12) << minProb << endl ;
  }

  return 0;
}

#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <cstring>

using namespace std;


int main()
{
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  int T;
  cin >> T;

  for (int t = 1; t <= T; ++t)
  {
    int n, m;
    cin >> n >> m;
    long long x1, a1, b1, c1, r1;
    long long x2, a2, b2, c2, r2;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;

    vector < long long > numbers(0);

    vector < long long > board1(max(n, m));
    vector < long long > board2(max(n, m));
    board1[0] = x1;
    board2[0] = x2;
    for (int i = 1; i < n || i < m; ++i)
    {
      board1[i] = (a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
      board2[i] = (a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;
    }

    for (int i = 0; i < n; ++i)
    {
      numbers.push_back(board1[i]);
      // cerr << board1[i] << " ";
    }
    // cerr << endl;
    for (int i = 0; i < m; ++i)
    {
      numbers.push_back(board2[i]);
      // cerr << board2[i] << " ";
    }
    // cerr << endl;
    sort(numbers.begin(), numbers.end());

    int count = 0;
    map < int, int > number_to_short;
    for (int i = 0; i < numbers.size(); ++i)
      if (number_to_short.find(numbers[i]) == number_to_short.end())
      {
        number_to_short[numbers[i]] = count;
        // cerr << numbers[i] << " " << count << endl;
        count++;
      }

    for (int i = 0; i < n; ++i)
      board1[i] = number_to_short[board1[i]];
    for (int i = 0; i < m; ++i)
      board2[i] = number_to_short[board2[i]];

    vector < int > used1(count, 0);
    vector < int > used2(count, 0);
    int balance = 0;

    int index1 = 0;
    int index2 = 0;

    index1 = 1;
    used1[board1[0]] = 1;
    balance = 1;

    int size1 = 1;
    int size2 = 0;

    long long res = 0;

    while (index1 < n || index2 < m)
    {
      // cerr << "Balance: " << balance << endl;
      // cerr << "Sizes: " << size1 << " " << size2 << endl;
      // cerr << index1 << " " << index2 << endl;
      // cerr << res << endl;
      // cerr << "--------------------" << endl;
      if (balance > 0)
      {
        if (size1 == size2 && (index1 == n || index2 == m))
          break;

        if (size1 < size2)
        {
          if (index1 == n)
            break;
          int new_element = board1[index1];
          if (!used1[new_element])
          {
            if (used2[new_element])
              balance--;
            else
              balance++;
            size1++;
          }
          used1[new_element] = 1;
          index1++;
        }
        else
        {
          if (index2 == m)
            break;
          int new_element = board2[index2];
          if (!used2[new_element])
          {
            if (used1[new_element])
              balance--;
            else
              balance++;
            size2++;
          }
          used2[new_element] = 1;
          index2++;
        }
      }
      
      if (balance == 0)
      {
        long long i1 = index1;
        long long i2 = index2;

        while (i1 < n && used1[board1[i1]])
          i1++;
        while (i2 < m && used2[board2[i2]])
          i2++;

        res += ((long long) i1 - index1 + 1) * ((long long) i2 - index2 + 1);

        index1 = i1;
        index2 = i2;

        if (index1 < n)
        {
          used1[board1[index1]] = 1;
          size1++;
          index1++;
          balance++;
        }
        else if (index2 < m)
        {
          used2[board2[index2]] = 1;
          size2++;
          index2++;
          balance++;
        }
      }
    }

    cout << "Case #" << t << ": " << res << endl;
  }

  return 0;
}
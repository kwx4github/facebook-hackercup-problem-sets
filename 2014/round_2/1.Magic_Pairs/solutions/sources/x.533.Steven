#include <cstdio>
#include <iostream>
#include <algorithm>

using namespace std;

typedef pair<int, int> pii;
typedef pair<pii, int> entry; // pair<color, board, position>
typedef long long ll;

const int MAXN = 1001000;

int T, N, M;

entry ar[MAXN * 2];
int A[MAXN];
int AA[MAXN];
int B[MAXN];
int BB[MAXN];
bool vis[MAXN * 2];

int da, db;

void putA(int &x) {
  int a = A[x];
  ++x;
  if (a == 0) return;
  bool &v = vis[a];
  if (v) --db;
  else ++da;
  v = !v;
}

void putB(int &x) {
  int b = B[x];
  ++x;
  if (b == 0) return;
  bool &v = vis[b];
  if (v) --da;
  else ++db;
  v = !v;
}

void rd() {
  ll x1,a1,b1,c1,r1;
  ll x2,a2,b2,c2,r2;
  cin >>x1>>a1>>b1>>c1>>r1;
  cin >>x2>>a2>>b2>>c2>>r2;

  AA[0] = x1, BB[0] = x2;
  for(int i = 1; i < N || i < M; ++i) {
    if (i < N) {
      (AA[i] = a1*AA[i-1]+b1*BB[(i-1)%M]+c1) %= r1;
    }
    if (i < M) {
      (BB[i] = a2*AA[(i-1)%N]+b2*BB[i-1]+c2) %= r2;
    }
  }
}

int main() {
  int *AB[2] = {A,B};

  scanf("%d", &T);

  for(int t = 1; t <= T; ++t) {
    memset(A, 0, sizeof(A));
    memset(B, 0, sizeof(B));
    memset(vis, 0, sizeof(vis));
    da = db = 0;

    scanf("%d %d", &N, &M);
    rd();

    int len = 0;
    for(int i = 0; i < N; ++i) {
      ar[len] = entry(pii(AA[i], 0), i);
      ++len;
    }

    for(int i = 0; i < M; ++i) {
      ar[len] = entry(pii(BB[i], 1), i);
      ++len;
    }

    sort(ar, ar + len);
    int cnt = 0;
    int prv = -1;
    int pid = -1;

    for(int i = 0; i < len; ++i) {
      int num = ar[i].first.first, id = ar[i].first.second, pos = ar[i].second;
      if (num != prv) ++cnt;
      if (num != prv || id != pid) AB[id][pos] = cnt;
      prv = num, pid = id;
    }

    da = 0, db = 0;
    int x = 0, y = 0;
    putA(x);
    putB(y);
    ll ans = 0;

    while (x < N || y < M || (da == 0 && db == 0)) {
      if (da == 0 && db == 0) {
        int c1 = 1, c2 = 1;
        while (x < N && A[x] == 0) putA(x), ++c1;
        while (y < M && B[y] == 0) putB(y), ++c2;
        ans += ll(c1) * c2;
      // printf("x = %d, y = %d, c1 = %d, c2 = %d\n", x, y, c1, c2);

        if (x == N || y == M) break;
        putA(x);
        putB(y);
      } else if (da) putB(y);
      else putA(x);
    }

    printf("Case #%d: %lld\n", t, ans);
  }

}



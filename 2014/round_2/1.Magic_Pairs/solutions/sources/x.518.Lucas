#include <bits/stdc++.h>
#define fr(i,a,b) for(int i = (a); i < (b); ++i)

using namespace std;

typedef long long ll;

#define maxn 1000010

ll board1[maxn];
ll board2[maxn];
int tam1[maxn];
int tam2[maxn];

int main() {
    int tc; cin >> tc; ++tc;
    fr(_, 1, tc) {
        int n, m;
        cin >> n >> m;
        ll x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        board1[0] = x1;
        board2[0] = x2;
        int fim = max(n,m);
        fr(i,1,fim) {
            board1[i] = ( a1 * board1[(i-1)%n] + b1 * board2[(i-1)%m] + c1) % r1;
            board2[i] = ( a2 * board1[(i-1)%n] + b2 * board2[(i-1)%m] + c2) % r2;  
        }
        set<int> s1, s2;
        fr(i,0,n) {
            s1.insert(board1[i]);
            tam1[i] = s1.size();
        }
        fr(i,0,n) {
            s2.insert(board2[i]);
            tam2[i] = s2.size();
        }
        s1.clear(); s2.clear();
        ll ans = 0;
        int i = 0, j = 0;
        int mismatch = 0;
        while(i < n && j < m) {
            bool f1 = s1.find(board1[i]) != s1.end();
            bool f2 = s2.find(board1[i]) != s2.end();
            if(!f1 && f2) --mismatch;
            else if(!f1 && !f2) ++mismatch;
            s1.insert(board1[i]);
            f1 = s1.find(board2[j]) != s1.end();
            f2 = s2.find(board2[j]) != s2.end();
            if(f1 && !f2) --mismatch;
            else if(!f1 && !f2) ++mismatch;
            s2.insert(board2[j]);
            if(s1.size() == s2.size()) {
                ll x = 0, y = 0;
                int aux = s1.size();
                while(tam1[i] == aux && i < n) {
                    ++i;
                    ++x;
                }
                while(tam2[j] == aux && j < m) {
                    ++j;
                    ++y;
                } 
                if(!mismatch) ans += x*y;
            } else if(s1.size() < s2.size()) {
                ++i;
            } else ++j;
        }
        printf("Case #%d: %lld\n", _,ans);
    }
    return 0;
}

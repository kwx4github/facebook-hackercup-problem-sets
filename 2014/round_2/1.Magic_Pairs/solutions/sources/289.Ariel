package contest;

import static java.lang.Math.*;

import java.text.*;
import java.util.*;

//@SuppressWarnings("unused")
public class magic_pairs {

	Map<Long, Long> K = new HashMap<Long, Long>();

	public Object solve() {
		int N = sc.nextInt(), M = sc.nextInt();
		long x1 = sc.nextLong(), a1 = sc.nextLong(), b1 = sc.nextLong(), c1 = sc.nextLong(), r1 = sc.nextLong();
		long x2 = sc.nextLong(), a2 = sc.nextLong(), b2 = sc.nextLong(), c2 = sc.nextLong(), r2 = sc.nextLong();

		long [] B1 = new long [N], B2 = new long [M];
		B1[0] = x1; B2[0] = x2;

		for (int i : rep(1, max(N,M))) {
			if (i < N) B1[i] = (a1 * B1[(i-1)%N] + b1 * B2[(i-1)%M] + c1) % r1;
			if (i < M) B2[i] = (a2 * B1[(i-1)%N] + b2 * B2[(i-1)%M] + c2) % r2;
		}

		long H1 = 0, H2 = 0;
		Set<Long> C1 = new HashSet<Long>();
		Set<Long> C2 = new HashSet<Long>();

		H1 += add(C1, B1[0]);
		H2 += add(C2, B2[0]);

		long res = 0;
		int j1 = 1, j2 = 1;

		out: for (;;) {
			while (C1.size() < C2.size()) {
				if (j1 == N) break out;
				H1 += add(C1, B1[j1]); ++j1;
			}
			while (C2.size() < C1.size()) {
				if (j2 == M) break out;
				H2 += add(C2, B2[j2]); ++j2;
			}
			long Z = 0;
			while (H1 == H2 && H1 != Z) {
				Z = H1;
				long Q1 = 0, Q2 = 0;
				long P1 = 0, P2 = 0;
				while (P1 == 0) {
					++Q1;
					if (j1 < N) { H1 += P1 = add(C1, B1[j1]); ++j1; }
					else break;
				}
				while (P2 == 0) {
					++Q2;
					if (j2 < M) { H2 += P2 = add(C2, B2[j2]); ++j2; }
					else break;
				}
				res += Q1*Q2;
			}
			if (j1 == N || j2 == M)
				break out;
			H1 += add(C1, B1[j1]); ++j1;
			H2 += add(C2, B2[j2]); ++j2;
		}

		return res;
	}

	Random r = new Random();

	long add(Set<Long> C, long x) {
		if (C.add(x)) {
			if (!K.containsKey(x))
				K.put(x, r.nextLong());
			return K.get(x);
		}
		else
			return 0;
	}

	private static int [] rep(int S, int T) { if (T <= S) return new int [0]; int [] res = new int [T-S]; for (int i = S; i < T; ++i) res[i-S] = i; return res; }
	////////////////////////////////////////////////////////////////////////////////////
	private static MyScanner sc = new MyScanner();
	private static class MyScanner {
		public int nextInt() { return sc.nextInt(); }
		public long nextLong() { return sc.nextLong(); }
		private final Scanner sc;
		private MyScanner() {
			sc = new Scanner(System.in);
			sc.hasNext();
			start();
		}
	}
	private static String build(Object o, Object... a) { return buildDelim(" ", o, a); }
	private static String buildDelim(String delim, Object o, Object... a) {
		StringBuilder b = new StringBuilder();
		append(b, o, delim);
		for (Object p : a)
			append(b, p, delim);
		return b.substring(delim.length());
	}
	private static void start() { if (t == 0) t = millis(); }
	private static void append(StringBuilder b, Object o, String delim) {
		if (o.getClass().isArray()) {
			int len = java.lang.reflect.Array.getLength(o);
			for (int i = 0; i < len; ++i)
				append(b, java.lang.reflect.Array.get(o, i), delim);
		} else if (o instanceof Iterable<?>)
			for (Object p : (Iterable<?>) o)
				append(b, p, delim);
		else {
			if (o instanceof Double)
				o = new DecimalFormat("#.#########").format(o);
			b.append(delim).append(o);
		}
	}
	private static void print(Object o) {
		System.err.println(build(o, '(', time(), ')'));
		if (PRINT)
			System.out.println(o);
	}
	private static void err(Object ...o) { System.err.println(build(o)); }
	private static long t;
	private static long millis() { return System.currentTimeMillis(); }
	private static String time() { return "Time: " + (millis() - t) / 1000.0; }
	private static final boolean PRINT = System.getProperties().containsKey("PRINT");
	public static void main(String[] args) {
		int N = sc.nextInt();
		for (int n = 1; n <= N; ++n)
			print("Case #" + n + ": " + build(new magic_pairs().solve()));
		err("------------------");
		err(time());
	}
}

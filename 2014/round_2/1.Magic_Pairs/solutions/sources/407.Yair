import java.util.BitSet;
import java.util.Scanner;

public class Q1 {

	public static long handle_case(Scanner scanner) {
		int N = scanner.nextInt();
		int M = scanner.nextInt();
		int x1 = scanner.nextInt();
		long a1 = scanner.nextInt();
		long b1 = scanner.nextInt();
		long c1 = scanner.nextInt();
		int r1 = scanner.nextInt();
		int x2 = scanner.nextInt();
		long a2 = scanner.nextInt();
		long b2 = scanner.nextInt();
		long c2 = scanner.nextInt();
		int r2 = scanner.nextInt();
		
		long result = 0L;
		int maxR = Math.max(r1,r2);
		BitSet curSet1 = new BitSet(maxR);
		BitSet curSet2 = new BitSet(maxR);
		int diff1 = 0;
		int diff2 = 0;
		int[]	board1 = new int[N];
		int[]	board2 = new int[M];
		// Start by filling the boards
		board1[0] = x1;
		board2[0] = x2;
		for (int i = 1; i < N || i < M; ++i) {
			if (i < N) {
				board1[i]= (int)((a1*board1[i-1]+b1*board2[(i-1)%M]+c1)%r1);
			}
			if (i < M) {
				board2[i]= (int)((a2*board1[(i-1)%N]+b2*board2[i-1]+c2)%r2);
			}
		}
		int i1 = 0;
		int i2 = 0;
		while (i1<=N || i2<=M) {
//			if (i1 % 10000 == 0 || i2 % 10000 == 0) {
//				System.out.println("i1: " + i1 + ", i2: " + i2);
//			}
			// Find set to advance
			if (diff1 == 0 && diff2 == 0) {
				// Advance both until we hit a new member
				int lastI1 = i1;
				while (i1<N && curSet1.get(board1[i1])) {
					++i1;
				}
				int lastI2 = i2;
				while (i2<M && curSet2.get(board2[i2])) {
					++i2;
				}
				result += ((long)(i1-lastI1+1))*((long)(i2-lastI2+1));
				if (i1>=N) {
					break;
				}
				++diff1;
				curSet1.set(board1[i1]);
				++i1;
			} else if (diff1 == 0) {
				if (i1>=N) {
					break;
				}
				if (!curSet1.get(board1[i1])) {
					if (curSet2.get(board1[i1])) {
						--diff2;
					} else {
						++diff1;
					}
					curSet1.set(board1[i1]);
				}
				++i1;
			} else {
				if (i2>=M) {
					break;
				}
				if (!curSet2.get(board2[i2])) {
					if (curSet1.get(board2[i2])) {
						--diff1;
					} else {
						++diff2;
					}
					curSet2.set(board2[i2]);
				}
				++i2;
			}
		}
		return result-1;
	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int T = Integer.parseInt(scanner.nextLine().trim());
		for (int i = 0; i < T; ++i) {
			long result = handle_case(scanner);
			System.out.println(String.format("Case #%d: %d",i+1,result));
		}
	}
}

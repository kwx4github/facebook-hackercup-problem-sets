#include<iostream>
#include<map>
#include<set>
#include<cstdio>
#define SIZE 1000010
int board1[SIZE],board2[SIZE];
using namespace std;
int main()
{
   //   freopen("A.txt","r",stdin);
  //  freopen("Aout.txt","w",stdout);
    int cas,n,m,x1,a1,b1,c1,r1,x2,a2,b2,c2,r2;
    cin>>cas;

for(int q=1;q<=cas;q++)
{
    map<int,int> s[4];
    cin>>n>>m;
    cin>>x1>>a1>>b1>>c1>>r1;
    cin>>x2>>a2>>b2>>c2>>r2;
    board1[0] = x1;board2[0] = x2;
    for(int i=1;i<max(n,m);i++)
    {
        if(i<n)
        board1[i] = (a1*board1[(i-1)%n] + b1*board2[(i-1)%m]+c1)%r1;
        if(i<m)
        board2[i] = (a2*board1[(i-1)%n] + b2*board2[(i-1)%m]+c2)%r2;
    }
   // for(int i=0;i<n;i++)
   //     cout<<board1[i]<<' ';cout<<endl;
  //  for(int i=0;i<m;i++)
   //     cout<<board2[i]<<' ';cout<<endl;
    //cout<<"done"<<endl;
    int id1,id2,v;
    long long sol = 0;
    id1 = id2=0;
    while(id1 < n && id2 < m)
    {
        if(s[0].size() < s[1].size())
        {
            v=board1[id1++];
            s[0][v]=1;
            if(s[1].count(v)==0)s[2][v]=1;
            else if(s[3].count(v)==1)s[3].erase(v);

            if(s[0].size()==s[1].size() && s[2].size()==0 &&s[3].size()==0)sol++;
        }
        else if(s[0].size()==s[1].size())
        {
            v=board1[id1];
            if(s[0].count(v)==1)
            {
                if(s[0].size()==s[1].size() && s[2].size()==0 &&s[3].size()==0)sol++;
                id1++;
                continue;
            }
            v = board2[id2];
            if(s[1].count(v)==1)
            {
                if(s[0].size()==s[1].size() && s[2].size()==0 &&s[3].size()==0)sol++;
                id2++;
                continue;
            }

            v=board2[id2++];
            s[1][v]=1;
            if(s[0].count(v)==0)s[3][v]=1;
            else if(s[2].count(v)==1)s[2].erase(v);

            if(s[0].size()==s[1].size() && s[2].size()==0 &&s[3].size()==0)sol++;
        }
        else
        {
            v=board2[id2++];
            s[1][v]=1;
            if(s[0].count(v)==0)s[3][v]=1;
            else if(s[2].count(v)==1)s[2].erase(v);

            if(s[0].size()==s[1].size() && s[2].size()==0 &&s[3].size()==0)sol++;
        }
      //  cout<<id1<<','<<id2<<'='<<sol<<endl;
    }

    while(id1<n)
    {
        v=board1[id1++];
            s[0][v]=1;
            if(s[1].count(v)==0)s[2][v]=1;
            else if(s[3].count(v)==1)s[3].erase(v);

            if(s[0].size()==s[1].size() && s[2].size()==0 &&s[3].size()==0)sol++;
    }

    while(id2<m)
    {
        v=board2[id2++];
        s[1][v]=1;
        if(s[0].count(v)==0)s[3][v]=1;
        else if(s[2].count(v)==1)s[2].erase(v);

        if(s[0].size()==s[1].size() && s[2].size()==0 &&s[3].size()==0)sol++;
    }

    cout<<"Case #"<<q<<": "<<sol<<endl;
}
    return 0;
}

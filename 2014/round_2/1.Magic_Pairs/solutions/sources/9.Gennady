#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 2000010;

int a[MAXN], b[MAXN];

map < int, pair <int, int> > mp;
map < int, pair <int, int> >::iterator it;

int upper[MAXN], lower[MAXN];

int main() {
  freopen("in", "r", stdin);
  freopen("out", "w", stdout);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    int n, m;
    scanf("%d %d", &n, &m);
    {
      long long x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
      cin >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
      a[0] = x1;
      b[0] = x2;
      for (int i = 1; i < n || i < m; i++) {
        if (i < n) {
          a[i] = (a1 * a[(i-1) % n] + b1 * b[(i-1) % m] + c1) % r1;
        }
        if (i < m) {
          b[i] = (a2 * a[(i-1) % n] + b2 * b[(i-1) % m] + c2) % r2;
        }
      }
    }
    mp.clear();
    for (int i = n - 1; i >= 0; i--) mp[a[i]].first = i + 1;
    for (int i = m - 1; i >= 0; i--) mp[b[i]].second = i + 1;
    for (int i = 0; i < n; i++) {
      lower[i] = 0;
      upper[i] = m - 1;
    }
    it = mp.begin();
    while (it != mp.end()) {
      int x = (*it).second.first;
      int y = (*it).second.second;
      if (x == 0) x = n + 1;
      if (y == 0) y = m + 1;
      x--; y--;
      if (x - 1 >= 0 && y - 1 < upper[x - 1]) upper[x - 1] = y - 1;
      if (x < n && y > lower[x]) lower[x] = y;
      it++;
    }
    for (int i = 0; i < n - 1; i++)
      if (lower[i] > lower[i + 1]) lower[i + 1] = lower[i];
    for (int i = n - 1; i > 0; i--)
      if (upper[i] < upper[i - 1]) upper[i - 1] = upper[i];
    long long ans = 0;
    for (int i = 0; i < n; i++)
      if (lower[i] <= upper[i]) ans += (upper[i] - lower[i] + 1);
    cout << ans << endl;
  }
  return 0;
}

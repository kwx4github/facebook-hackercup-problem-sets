#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstring>
#include <cmath>
#include <string>
#include <sstream>

#define inf 1e9
#define linft 1e18
#define lfloat long double
#define lint long long



using namespace std;

int bo[2][1000009];

lint res;
int n[2], x[2], a[2], b[2], c[2], r[2];


map<int,int> ft[2];
set<int> s[2];
int in[2];

int main(){
  int T;
  cin >> T;
  for(int t = 0; t < T; t++){
    cin >> n[0] >> n[1];
    for(int i = 0; i < 2; i++){
      cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
    }
    for(int k = 0; k < 2; k++){
      bo[k][0] = x[k];
    }
    for(int i = 1; i < max(n[0], n[1]); i++){
      
      bo[0][i] = (a[0] * bo[0][(i-1) % n[0]] + b[0] * bo[1][(i-1) % n[1]] + c[0]) % r[0];
    
      bo[1][i] = (a[1] * bo[0][(i-1) % n[0]] + b[1] * bo[1][(i-1) % n[1]] + c[1]) % r[1]; 
      
    }
    
    
    for(int k = 0; k < 2; k++){
      in[k] = 0;
      s[k].clear();
      ft[k].clear();
    }
    res = 0;
    
    
    
    for(int k = 0; k < 2; k++){
      for(int i = 0; i < n[k]; i++){
        
        if(ft[k].count(bo[k][i]) == 0){
          ft[k][bo[k][i]] = i;
          //cout << bo[k][i] << " -> " << i << endl;
        }
      }
    }
    
    
    //for(int k = 0; k < )
    
    
    
    while(in[0] < n[0] && in[1] < n[1]){

      if(ft[1].count(bo[0][in[0]]) == 0) break;
      if(ft[0].count(bo[1][in[1]]) == 0) break;
      
      int f1 = ft[1][bo[0][in[0]]];
      int f0 = ft[0][bo[1][in[1]]];
      /*
      for(int k = 0; k < 2; k++){
        s[k].insert(bo[k][in[k]]);
        in[k]++;
      }*/
      
      
      bool salir = false;
      while(!salir){ 
        
        
        //cout << "in " << in[0] << " " << in[1] << " " << f0 << " " << f1 << endl;
        for(; in[1] <= f1&& !salir; in[1]++){
          s[1].insert(bo[1][in[1]]);
          if(ft[0].count(bo[1][in[1]]) == 0){
            salir = true;
            break;
          }
          f0 = max(f0, ft[0][bo[1][in[1]]]);
          if(in[1] == f1) break;
        }
        
        //cout << "ou " << in[0] << " " << in[1] << " " << f0 << " " << f1 << endl;
        for(; in[0] <= f0 && !salir; in[0]++){
          s[0].insert(bo[0][in[0]]);
          if(ft[1].count(bo[0][in[0]]) == 0){
            salir = true;
            break;
          }
          f1 = max(f1, ft[1][bo[0][in[0]]]);
          if(in[0] == f0) break;
        }
        //cout << "ou " << in[0] << " " << in[1] << " " << f0 << " " << f1 << endl;
        if(in[0] >= f0 && in[1] >= f1) break;
        
      }
      if(salir) break;
      /*for(set<int>::iterator i1 = s[0].begin(), i2 = s[1].begin(); i1 != s[0].end() && i2 != s[1].end();i1++, i2++){
        cout << *i1 << " " << *i2 << endl;
      }*/
      
      
      
      lint l1 = 1, l2 = 1;
      //cout << in[0]+1 << " " << bo[1][in[0]+1]+1 << endl;
      while(in[0]+1 < n[0] && s[0].count(bo[0][in[0]+1]) > 0){
        l1++;
        in[0]++;
      }
      while(in[1]+1 < n[1] && s[1].count(bo[1][in[1]+1]) > 0){
        l2++;
        in[1]++;
      }
      
      
      
      //cout << "sum .> " << l1 <<" "<< l2 << endl;
      res = res + l1*l2;
      
      
      in[0]++;
      in[1]++;
    }
    /*for(int k = 0; k < 2; k++){
      for(int i = 0; i < n[k]; i++){
        cout << bo[k][i] << " ";
      }cout << endl;
    }*/
    
    
    
    
    
    printf("Case #%d: %lld\n", 1+t, res);
    
  }
  return 0;
}

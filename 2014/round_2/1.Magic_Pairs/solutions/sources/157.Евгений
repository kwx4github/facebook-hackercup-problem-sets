#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <cstdarg>
#include <iostream>
#include <utility>
#include <sstream>
#include <cmath>
#include <ctime>
#include <iostream>

#define clr(a) memset(a, 0, sizeof(a))
#define fill(a, b) memset(a b, sizeof(a))

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef std::pair<int,int> pii;

#define DBG2 0

void dbg(const char * fmt, ...)
{
#ifdef DBG1
#if DBG2
	FILE* file = stderr;
	va_list args;
	va_start(args, fmt);
	vfprintf(file, fmt, args);
	va_end(args);

	fflush(file);
#endif
#endif
}

void readAndGenerateVectors(int n, int m, vector <int> & v1, vector <int> & v2)
{
	v1.assign(n, 0);
	v2.assign(m, 0);
	vector <int> v(n);
	int x1, a1, b1, c1, r1;
	scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
	int x2, a2, b2, c2, r2;
	scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);

	v1[0] = x1;
	v2[0] = x2;
	for (int i = 1; i < n || i < m; ++i)
	{
		if (i < n)
			v1[i] = (ll(a1) * v1[i - 1] + ll(b1) * v2[(i - 1 + m) % m] + c1) % r1;
		if (i < m)
			v2[i] = (ll(a2) * v1[(i - 1 + n) % n] + ll(b2) * v2[i - 1] + c2) % r2;
	}
}

struct Set {
    Set()
    {
    	cnt = 0;
    }
	
	bool contains(int x) const
	{
		return s.find(x) != s.end();
	}

	void insert(int x)
	{
		if (!contains(x))
		{
			s.insert(x);
			++cnt;
		}
	}

	set <int> s;
	int cnt;
};

void solve()
{
	int n, m;
	scanf("%d%d", &n, &m);
	vector <int> v1, v2;
	readAndGenerateVectors(n, m, v1, v2);

	for (int i = 0; i < n; ++i)
		dbg("%d ", v1[i]);
	dbg("\n");
	for (int j = 0; j < m; ++j)
		dbg("%d ", v2[j]);
	dbg("\n");


	v1.push_back(-1);
	v2.push_back(-2);

	ll res = 0;
	int i = 0;
	int j = 0;
	Set s1, s2, ss;
	s1.insert(v1[0]);
	s2.insert(v2[0]);
	ss.insert(v1[0]);
	ss.insert(v2[0]);
	while (i < n && j < m)
	{
		if (s1.cnt == s2.cnt && ss.cnt == s1.cnt)
		{
			int i1 = i;
			int j1 = j;
			while (ss.contains(v1[i + 1]))
				++i;
			while (ss.contains(v2[j + 1]))
				++j;
			dbg("i=%d..%d, j=%d..%d\n", i1, i, j1, j);
			res += ll(i - i1 + 1) * (j - j1 + 1);
		}
		if (s1.cnt <= s2.cnt)
		{
			++i;
			s1.insert(v1[i]);
			ss.insert(v1[i]);
		}
		else
		{
			++j;
			s2.insert(v2[j]);
			ss.insert(v2[j]);
		}
	}
	cout << res << endl;
}

int main()
{
#ifdef DBG1
	freopen(".in", "r", stdin);
	freopen(".out", "w", stdout);
	freopen(".err", "w", stderr);
#endif

	int tt;
	scanf("%d", &tt);
	for (int ii = 1; ii <= tt; ++ii)
	{
		printf("Case #%d: ", ii);
		solve();
		fflush(stdout);
	}

	return 0;
}

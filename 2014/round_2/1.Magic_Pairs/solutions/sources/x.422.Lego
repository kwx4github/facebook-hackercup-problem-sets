#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <cctype>
#include <cstring>
#include <cmath>

using namespace std;

const int N = 1000000;

int a[N];
int b[N];
int n, m;
int x1, a1, b1, c1, r1;
int x2, a2, b2, c2, r2;

int aa[N+N];
int bb[N+N];
int cc[N+N];

map<int, int> all;

void add(int x) {
  if (all.find(x) != all.end()) return;
  int size = all.size();
  all[x] = size;
}

void init() {
  a[0] = x1, b[0] = x2;
  int hi = max(n, m);
  for (int i = 1; i < hi; i++) {
    if (i < n) a[i] = ((long long)a1 * a[(i-1) % n] + (long long)b1 * b[(i-1) % m] + c1) % r1;
    if (i < m) b[i] = ((long long)a2 * a[(i-1) % n] + (long long)b2 * b[(i-1) % m] + c2) % r2;
  }
  for (int i = 0; i < n; i++) add(a[i]);
  for (int i = 0; i < m; i++) add(b[i]);
  for (int i = 0; i < n; i++) a[i] = all[a[i]];
  for (int i = 0; i < n; i++) b[i] = all[b[i]];

  memset(aa, 0xff, sizeof(aa));
  int cntA = 0;
  for (int i = 0; i < n; i++) {
    if (aa[a[i]] >= 0) continue;
    aa[a[i]] = i;
  }

  memset(bb, 0xff, sizeof(bb));
  for (int i = 0; i < m; i++) {
    if (bb[b[i]] >= 0) continue;
    bb[b[i]] = i;
  }
  memset(cc, 0, sizeof(cc));
}

int main() {
  int testCases; cin >> testCases;
  for (int caseNo = 1; caseNo <= testCases; caseNo++) {
    all.clear();
    cin >> n >> m;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    init();

    long long res = 0;
    int cnt = 0;
    int ai = 0, bi = 0;
    int g = 0;
    while (ai < n && bi < m) {
      cnt++;
      int nextA = ai+1;
      while (nextA < n && aa[a[nextA]] < nextA) nextA++;
      int lenA = nextA-ai;
      int nextB = bi+1;
      while (nextB < m && bb[b[nextB]] < nextB) nextB++;
      int lenB = nextB-bi;
      cc[b[bi]]++; if (cc[b[bi]] == 2) g++;
      cc[a[ai]]++; if (cc[a[ai]] == 2) g++;
      if (g == cnt) res += (long long)lenA * lenB;
      ai = nextA; bi = nextB;
    }

    cout << "Case #" << caseNo << ": " << res << endl;
  }
  return 0;
}
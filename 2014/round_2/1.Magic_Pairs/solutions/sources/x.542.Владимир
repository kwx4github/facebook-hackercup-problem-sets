#include <iostream>
#include <fstream>
#include <cstdio>
#include <iomanip>
#include <cassert>
#include <climits>
#include <cmath>
#include <ctime>
#include <vector>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <unordered_set>
#include <functional>
#include <algorithm>
using namespace std;
 
typedef pair<int, int> pii;
typedef long long llong;
typedef pair<llong, llong> pll;
typedef unsigned long long ullong;
#define mp make_pair
#define sqr(x) ((x)*(x))
const double PI = 3.14159265359;
#define y1 Y1
#define y0 alalal1231

set<int> S1[21];
set<int> S2[21];
set<int> D1[21];
set<int> D2[21];
int t, n, m, r1, r2, x1, x2, a1, a2, b1, b2, c1, c2, cnt1, cnt2;
long long ans;
int board1[1005000], board2[1005000];

int main()
{
#ifdef MYLOCAL
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#endif

	scanf("%d", &t);
	for (int tst = 1; tst <= t; ++tst)
	{
		cerr << "start tst " << tst << endl;
		set<int> &s1 = S1[tst];
		set<int> &d1 = D1[tst];
		set<int> &s2 = S2[tst];
		set<int> &d2 = D2[tst];
		scanf("%d %d", &n, &m);
		scanf("%d %d %d %d %d", &x1, &a1, &b1, &c1, &r1);
		scanf("%d %d %d %d %d", &x2, &a2, &b2, &c2, &r2);
		ans = cnt1 = cnt2 = 0;
		board1[0] = x1;
		board2[0] = x2;
		for (int i = 1; i < max(n, m); ++i)
		{
			if (i < n) board1[i] = ((llong)a1*board1[(i-1)%n] +
				(llong)b1*board2[(i-1)%m] + c1) % r1;
			if (i < m) board2[i] = ((llong)a2*board1[(i-1)%n] +
				(llong)b2*board2[(i-1)%m] + c2) % r2;
		}
		
		//s1.insert(board1[0]);
		//s2.insert(board2[0]);
		if (board1[0] != board2[0])
			d1.insert(board1[0]), d2.insert(board2[0]);
		else
			s1.insert(board1[0]);

		for (int i = 1, j = 1; ; )
		{
			if (s1.size() % 100000 == 0)
				cerr << s1.size() << endl;
			int ni = i, nj = j;
			while (!d1.empty() || !d2.empty())
			{
				while (j < m && !d1.empty())
				{
					if (d1.find(board2[j]) != d1.end())
						d1.erase(d1.find(board2[j])), s1.insert(board2[j]);
					else if (s1.find(board2[j]) == s1.end())
						d2.insert(board2[j]);
					++j;
				}
				while (i < n && !d2.empty())
				{
					if (d2.find(board1[i]) != d2.end())
						d2.erase(d2.find(board1[i])), s1.insert(board1[i]);
					else if (s1.find(board1[i]) == s1.end())
						d1.insert(board1[i]);
					++i;
				}
				if (i >= n && j >= m)
					break;
			}
			if (!d1.empty() || !d2.empty())
				break;
			cnt1 = cnt2 = 1;
			++ans;
			if (i >= n && j >= m)
				break;
			int nw1 = -1, nw2 = -1;
			while (i < n)
			{
				if (s1.find(board1[i]) != s1.end())
					++cnt1, ++i;
				else
				{
					nw1 = board1[i];
					++i;
					break;
				}
			}
			while (j < m)
			{
				if (s1.find(board2[j]) != s1.end())
					++cnt2, ++j;
				else
				{
					nw2 = board2[j];
					++j;
					break;
				}
			}
			if (nw1 != nw2)
				d1.insert(nw1), d2.insert(nw2);
			else
				s1.insert(nw1);
			ans += llong(cnt1) * cnt2 - 1;
			if (!(ni == i-1 || nj == j-1) && i >= n && j >= m)
				break;
		}
		printf("Case #%d: %I64d\n", tst, ans);
	}
	cerr << "FINISH\n";	

    return 0;
}
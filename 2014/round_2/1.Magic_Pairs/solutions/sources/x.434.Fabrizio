package fbhackercup;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class MagicPairs {

	private static int N;
	private static int M;
	private static int[] board1;
	private static int[] board2;

	public static void main(String[] args) throws FileNotFoundException {
		Scanner sc = new Scanner(new File("input.txt"));
		PrintWriter pw = new PrintWriter(new File("output.txt"));

		int T = sc.nextInt();
		for (int t = 1; t <= T; t++) {
			init(sc);

			Map<Integer, Integer> comp = new HashMap<Integer, Integer>();
			int[] b1 = new int[N];
			int curr = 0;
			for (int i = 0; i < N; ++i) {
				int num = board1[i];
				Integer ex = comp.get(num);
				if (ex == null) {
					ex = curr++;
					comp.put(num, ex);
				}
				b1[i] = ex;
			}

			int[] b2 = new int[M];
			for (int i = 0; i < M; ++i) {
				int num = board2[i];
				Integer ex = comp.get(num);
				if (ex == null) {
					ex = curr++;
					comp.put(num, ex);
				}
				b2[i] = ex;
			}

			Map<Integer, int[]> interval = new HashMap<Integer, int[]>();
			int from = 0;
			for (int i = 1; i < N; i++) {
				if (b1[i] != b1[i - 1]) {
					interval.put(b1[i - 1], new int[] { from, i });
					from = i;
				}
			}
			interval.put(b1[N - 1], new int[] { from, N });

			int max = -1;
			Set<Integer> diffs = new HashSet<Integer>();
			int res = 0;
			for (int i = 0; i < M; i++) {
				diffs.add(b2[i]);
				max = Math.max(max, b2[i]);
				if (max == diffs.size() - 1) {
					int[] inter = interval.get(max);
					if (inter != null) {
						res += inter[1] - inter[0];
					}
				}
			}
			pw.println("Case #" + t + ": " + res);
		}
		pw.flush();
		pw.close();
	}

	private static void init(Scanner sc) {
		N = sc.nextInt();
		M = sc.nextInt();
		board1 = new int[N];
		board2 = new int[M];
		int x1 = sc.nextInt();
		int a1 = sc.nextInt();
		int b1 = sc.nextInt();
		int c1 = sc.nextInt();
		int r1 = sc.nextInt();

		int x2 = sc.nextInt();
		int a2 = sc.nextInt();
		int b2 = sc.nextInt();
		int c2 = sc.nextInt();
		int r2 = sc.nextInt();

		board1[0] = x1;
		board2[0] = x2;

		for (int i = 1; i < Math.max(N, M); i++) {
			if (i < N) {
				board1[i] = (a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1;
			}
			if (i < M) {
				board2[i] = (a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2;
			}
		}
	}

}

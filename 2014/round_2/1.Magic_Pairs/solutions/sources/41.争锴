#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <map>
#include <set>
#include <algorithm>
#define LL long long
#define inf 1000000000

using namespace std;

int n,m;
int a[1000000],b[1000000];
int f[1000000],g[1000000];
int id[1000000];
int a1,b1,r1,a2,b2,r2,x1,x2,c1,c2;
int tt;
map<int,int> pp;
set<int> hash;
LL ans;

bool cmp(int x,int y) {
	return g[x]<g[y];
}

int main() {
	freopen("a.in","r",stdin);
	freopen("a.out","w",stdout);

	scanf("%d",&tt);
	for (int ii=1;ii<=tt;++ii) {
		scanf("%d%d",&n,&m);
		scanf("%d%d%d%d%d",&x1,&a1,&b1,&c1,&r1);
		scanf("%d%d%d%d%d",&x2,&a2,&b2,&c2,&r2);

		a[0]=x1; b[0]=x2;
		for (int i=1;i<max(n,m);++i) {
			a[i]=((LL)a1*a[(i-1)%n]%r1+(LL)b1*b[(i-1)%m]%r1+c1)%r1;
			b[i]=((LL)a2*a[(i-1)%n]%r2+(LL)b2*b[(i-1)%m]%r2+c2)%r2;
		}

		pp.clear();
		for (int i=0;i<n;++i)
			if (pp.find(a[i])==pp.end()) pp[a[i]]=i;
		for (int i=0;i<m;++i)
			if (pp.find(b[i])!=pp.end()) g[i]=pp[b[i]];
			else g[i]=inf;
		pp.clear();
		for (int i=0;i<m;++i)
			if (pp.find(b[i])==pp.end()) pp[b[i]]=i;
		for (int i=0;i<n;++i)
			if (pp.find(a[i])!=pp.end()) f[i]=pp[a[i]];
			else f[i]=inf;

		hash.clear();
		for (int i=0;i<m;++i) {
			hash.insert(i);
			id[i]=i;
		}
		hash.insert(m);
		sort(id,id+m,cmp);
		ans=0;
		int j=-1;
		int cur=0;
		int k=-1;
		for (int i=0;i<n;++i) {
			if (f[i]>=m) break;
			while (k+1<m && g[id[k+1]]<=i) {
				hash.erase(id[k+1]);
				k++;
			}
			if (j<f[i]) {
				bool flag=false;
				for (++j;j<=f[i];++j) {
					if (g[j]>=n) {
						flag=true;
						break;
					}
					cur=max(cur,g[j]);
				}
				if (flag) break;
				--j;
			}
			if (i<cur) continue;
			if (*hash.begin()>=j)
				ans+=(*hash.begin())-j;
		}
		cout << "Case #" << ii << ": " << ans << "\n";
	}
}

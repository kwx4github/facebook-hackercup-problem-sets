#include <iostream>
#include <vector>
#include <set>
#include <cstdio>
using namespace std;
const int BUF = 1000005;

int N, M;
int A[BUF], B[BUF];

void read() {
    cin >> N >> M;
    
    int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;

    A[0] = x1;
    B[0] = x2;
    for (int i = 1; i < max(N, M); ++i) {
        if (i < N) A[i] = (1LL * a1 * A[(i - 1 + N) % N] + 1LL * b1 * B[(i - 1 + M) % M] + c1) % r1;
        if (i < M) B[i] = (1LL * a2 * A[(i - 1 + N) % N] + 1LL * b2 * B[(i - 1 + M) % M] + c2) % r2;
    }
}


void work(int cases) {
    set<int> aSet, bSet, aXORb;
    int aCur = 0, bCur = 0;
    long long ans = 0;

    while (aCur < N || bCur < M) {
        int cntA = 0;
        if (aCur < N) {
            if (aXORb.count(A[aCur]))
                aXORb.erase(A[aCur]);
            else
                aXORb.insert(A[aCur]);
            aSet.insert(A[aCur++]);
            cntA++;
            while (aCur < N && aSet.count(A[aCur])) {
                aCur++;
                cntA++;
            }
        }
        
        int cntB = 0;
        if (bCur < M) {
            if (aXORb.count(B[bCur]))
                aXORb.erase(B[bCur]);
            else
                aXORb.insert(B[bCur]);
            bSet.insert(B[bCur++]);
            cntB++;
            while (bCur < M && bSet.count(B[bCur])) {
                bCur++;
                cntB++;
            }
        }

        if (aXORb.empty()) {
            ans += 1LL * cntA * cntB;
        }
    }
    
    printf("Case #%d: %lld\n", cases, ans);
}


int main() {
    int cases;
    cin >> cases;
    for (int i = 0; i < cases; ++i) {
        read();
        work(i + 1);
    }
    return 0;
}

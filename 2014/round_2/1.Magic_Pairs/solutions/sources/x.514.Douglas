#include <cmath>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <cctype>
#include <stack>
#include <complex>
using namespace std;

typedef long long int int64;

#define EPS 10e-9
#define INF 0x3f3f3f3f
#define REP(i,n) for(int i=0; i<(n); i++)

int n, m;
map<int, int> mapa[2];
int v[1000100][2];

int main()
{	
	int t;
	scanf("%d", &t);
	REP(k, t) {
		scanf("%d %d", &n, &m);
		int x1, a1, b1, c1, r1;
		int x2, a2, b2, c2, r2;
		scanf("%d %d %d %d %d", &x1, &a1, &b1, &c1, &r1);
		scanf("%d %d %d %d %d", &x2, &a2, &b2, &c2, &r2);
		v[0][0] = x1;
		v[0][1] = x2;
		for (int i = 1; i < max(n, m); i++) {
			v[i][0] = (a1 * v[(i-1) % n][0] + b1 * v[(i-1) % m][1] + c1) % r1;
			v[i][1] = (a2 * v[(i-1) % n][0] + b2 * v[(i-1) % m][1] + c2) % r2;
		}
		// REP(i, n) printf("%d ", v[i][0]);
		// printf("\n");
		// REP(i, m) printf("%d ", v[i][1]);
		// printf("\n");
		mapa[0].clear();
		mapa[1].clear();
		REP(i, n) {
			int x = v[i][0];
			if (mapa[0].find(x) != mapa[0].end()) continue;
			mapa[0][x] = i;
		}
		REP(i, m) {
			int x = v[i][1];
			if (mapa[1].find(x) != mapa[1].end()) continue;
			mapa[1][x] = i;
		}
		bool erro = false;
		int i1 = 0, i2 = 0, j1 = 0, j2 = 0;
		if (mapa[1].find(v[i1][0]) != mapa[1].end())
			j2 = mapa[1][v[i1][0]];
		else
			erro = true;

		if (mapa[0].find(v[j1][1]) != mapa[0].end())
			i2 = mapa[0][v[j1][1]];
		else
			erro = true;

		if (erro) {
			printf("Case #%d: %lld\n", k+1, 0LL);
			continue;
		}
		int64 res = 0;
		while (1) {
			if (i1 >= n && j1 >= m) break;
			
			//printf("(%d %d) (%d %d)\n", i1, i2, j1, j2);
			if (i1 == i2 && j1 == j2) {
				int a = 1, b = 1;
				while (1) {
					if (i1 + a >= n) break;
					int x = v[i1+a][0];
					if (mapa[1].find(x) == mapa[1].end() || mapa[1][x] > j2) {
						break;
					}
					a++;
				}
				while (1) {
					if (j1 + b >= m) break;
					int x = v[j1+b][1];
					if (mapa[0].find(x) == mapa[0].end() || mapa[0][x] > i2) {
						break;
					}
					b++;
				}
				res = res + ((int64)a*(int64)b);
				i1 = i1 + a;
				j1 = j1 + b;
				if (i1 < n) {
					if (mapa[1].find(v[i1][0]) != mapa[1].end())
						j2 = mapa[1][v[i1][0]];
					else break;
				}
				if (j1 < m) {
					if (mapa[0].find(v[j1][1]) != mapa[0].end())
						i2 = mapa[0][v[j1][1]];
					else break;
				}
			}
			else {
				if (i1 != i2) {
					int x = v[i1][0];
					if (mapa[1].find(x) == mapa[1].end()) break;
					if (mapa[1][x] > j2) j2 = mapa[1][x];
					i1++;
				}
				if (j1 != j2) {
					int x = v[j1][1];
					if (mapa[0].find(x) == mapa[0].end()) break;
					if (mapa[0][x] > i2) i2 = mapa[0][x];
					j1++;
				}
			}
		}
		printf("Case #%d: %lld\n", k+1, res);
	}
	return 0;
}
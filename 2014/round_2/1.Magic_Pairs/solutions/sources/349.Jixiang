#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <map>
#include <queue> // push, front, pop
#include <sstream>
#include <string>
#include <stack> // push, top, pop
#include <set>
#include <vector>
#include <list> // list.insert(it, data); data inserted before it..
#include <iomanip>
#include <stdio.h>

#define PI 3.14159265358979323846264338327950288
#define fill_(x,v) memset(x,v,sizeof(x))
#define min(x,y) (((x)>(y)) ? (y) :(x))
#define max(x,y) (((y)>(x)) ? (y) :(x))
#define Pi  3.1415926535
#define ll long long

using namespace std;

ifstream fin("c:\\hackercup\\_magic_pairs.txt");
ofstream fout("c:\\hackercup\\q1.out");

set<long long> S1, S2;
long long run() {
	long long n, m;
	long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
	fin >> n >> m;
	fin >> x1 >> a1 >> b1 >> c1 >> r1;
	fin >> x2 >> a2 >> b2 >> c2 >> r2;
	vector<long long> B1, B2;
	B1.push_back(x1);
	B2.push_back(x2);
	for (int i = 1; i < max(m, n) ; i++) {
		B1.push_back((a1 * B1[(i - 1) % n] +
					  b1 * B2[(i - 1) % m] + c1) % r1);
		B2.push_back((a2 * B1[(i - 1) % n] +
					  b2 * B2[(i - 1) % m] + c2) % r2);
	}
	//for (int i = 0; i < n; i++) cout<<B1[i]<<' ';
	//cout<<endl;
	//for (int i = 0; i < m; i++) cout<<B2[i]<<' ';
	//cout<<endl;
	
	long long p1 = 0;
	long long p2 = 0;
	S1.clear();
	S2.clear();
	long long ret = 0;
	while (p1 < n && p2 < m) {
		queue<long long> q1;
		queue<long long> q2;
		if (p1 < n) q1.push(B1[p1]);
		if (p2 < m) q2.push(B2[p2]);
		bool valid = true;
		while (!q1.empty() || !q2.empty()) {
					//cout<<p1<<'-'<<p2<<endl;
			if (!q1.empty()) {
				int c1 = q1.front(); q1.pop(); S1.insert(c1);
				if (S2.count(c1) > 0) continue;
				while(p2 < m && B2[p2] != c1) {
					S2.insert(B2[p2]);
					if (S1.count(B2[p2]) == 0) q2.push(B2[p2]);
					p2++;
				}
				if (p2 < m) {S2.insert(c1);} else valid = false;
			}
			if (!q2.empty()) {
				int c2 = q2.front(); q2.pop(); S2.insert(c2);
				if (S1.count(c2) > 0) continue;
				while(p1 < n && B1[p1] != c2) {
					S1.insert(B1[p1]);
					if (S2.count(B1[p1]) == 0) q1.push(B1[p1]);
					p1++;
				}
				if (p1 < n) {S1.insert(c2);} else valid = false;
			}
		   //cout<<q1.size()<<"size "<< q2.size()<<endl;
		  //cout<<S1.size()<<"size "<< S2.size()<<endl;
		}
		if (!valid) break;
		if (!q1.empty() || !q2.empty()) break;
		//cout<<S1.size()<<' '<<S2.size()<<endl;
		int op1 = p1;
		while (p1 < n && S2.count(B1[p1]) > 0) p1++;
		int op2 = p2;
		while (p2 < m && S1.count(B2[p2]) > 0) p2++;
		//cout<<p1<<' '<<op1<<' '<<p2<<' '<<op2<<endl;
		ret += (p1 - op1) * (p2 - op2);
		//cout<<"ret = "<<ret<<endl;
	}
	return ret;
		
}

int main() {
  int N;
  fin >> N;
  //char inp[1000];
  //fin.getline(inp, 1000);
  for( int n = 1; n <= N; n++){
    //fout<<"Case #"<<n<<": ";
    long long ret = run();
    fout<<"Case #"<<n<<": "<<ret<<endl;
    //printf("Case #%d: %d\n", n, ret);
    //cout<<"Case #"<<n<<": "<endl;
    //fout << fixed;
    //fout<<"Case #"<<n<<": "<<setprecision(10)<<ret<<endl;
  }
  return 0;
}
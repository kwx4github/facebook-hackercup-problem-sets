import java.util.*;
import java.io.*;

public class Magic{
	public static void main(String[] args) throws Exception{
		Scanner reader = new Scanner(new File("magic.in"));
		int times = reader.nextInt();
		for(int t = 1; t <= times; t++){
			int n = reader.nextInt();
			int m = reader.nextInt();
			
			long[] v1 = new long[5];
			for(int i = 0; i < 5; i++)
				v1[i] = reader.nextInt();
			long[] v2 = new long[5];
			for(int i = 0; i < 5; i++)
				v2[i] = reader.nextInt();
			
			long[] b1 = new long[n];
			long[] b2 = new long[m];
			
			b1[0] = v1[0];
			b2[0] = v2[0];
			for(int i = 1; i < Math.max(n,m); i++){
				if(i < n)
				b1[i] = (v1[1] * b1[(i+n-1)%n] + v1[2] * b2[(i+m-1)%m] + v1[3]) % v1[4];
				if(i < m)
				b2[i] = (v2[1] * b1[(i+n-1)%n] + v2[2] * b2[(i+m-1)%m] + v2[3]) % v2[4];
			}
			
//			System.out.println(Arrays.toString(b1));
//			System.out.println(Arrays.toString(b2));
			
			TreeSet<Long> debt = new TreeSet<Long>();
			TreeSet<Long> shared = new TreeSet<Long>();
			
			long cnt = 0;
			int a = 1;
			debt.add(b1[0]);
			int b = 0;
			while(true){
				//B catches up to A
				TreeSet<Long> redebt = new TreeSet<Long>();
				b = race(b, b2, debt, shared, redebt);
				
				if(debt.isEmpty() && redebt.isEmpty()){
					long basea = a-1;
					long baseb = b-1;
					while(a < n && shared.contains(b1[a]))
						a++;
					while(b < m && shared.contains(b2[b]))
						b++;
					cnt += ((long)a - basea) * ((long)b - baseb);
					
					if(a == n)
						break;
					debt.add(b1[a++]);
				}else if(!debt.isEmpty()){
					break;
				}else if(!redebt.isEmpty()){
					a = race(a, b1, redebt, shared, debt);
					if(!redebt.isEmpty())
						break;
				}
			}
			
			System.out.println("Case #"+t+": "+cnt);
		}
	}
	
	public static int race(int at, long[] a, TreeSet<Long> debt, TreeSet<Long> shared, TreeSet<Long> extra){
		while(!debt.isEmpty() && at < a.length){
			long cur = a[at++];
			if(debt.contains(cur)){
				debt.remove(cur);
				shared.add(cur);
			}else if(!shared.contains(cur)){
				extra.add(cur);
			}
		}
		return at;
	}
}

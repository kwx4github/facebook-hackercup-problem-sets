#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
using namespace std;

typedef unsigned long long ull;

int main()
{
	int T;
	cin >> T;
	for (int k = 1; k <= T; k++)
	{
		int N, M;
		cin >> N >> M;
		ull x1, a1, b1, c1, r1;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		ull x2, a2, b2, c2, r2;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;

		vector<ull> board1(N);
		vector<ull> board2(M);
		vector<ull> board1_mapped(N);
		vector<ull> board2_mapped(M);
		board1[0] = x1;
		board2[0] = x2;
		map<ull, int> colors;
		int counter = 0;
		board1_mapped[0] = (colors[x1] = 0);
		board2_mapped[0] = (x1 != x2 ? colors[x2] = 1 : colors[x1]);
		for (int i = 1; i < max(N, M); i++)
		{
			if (i < N)
			{
				board1[i] = (a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1;
				if (colors.count(board1[i]) == 0)
					colors[board1[i]] = colors.size();
				board1_mapped[i] = colors[board1[i]];
			}				
			if (i < M)
			{
				board2[i] = (a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2;
				if (colors.count(board2[i]) == 0)
					colors[board2[i]] = colors.size();
				board2_mapped[i] = colors[board2[i]];
			}
		}
		vector<bool> set1(colors.size());
		vector<bool> set2(colors.size());
		int unique1 = 1, unique2 = 0, result = 0;
		int i1 = 1, i2 = 0;
		set1[board1_mapped[0]] = true;
		while(true){
			if (unique1 == 0 && unique2 == 0)
			{
				result++;
				if (i2 < M && (set2[board2_mapped[i2]] || i1 == N))
				{
					int next = board2_mapped[i2++];
					if (set1[next] && !set2[next])
						unique1--;
					if (!set1[next] && !set2[next])
						unique2++;
					set2[next] = true;
				}					
				else if (i1 < N)
				{
					int next = board1_mapped[i1++];
					if (set2[next] && !set1[next])
						unique2--;
					if (!set2[next] && !set1[next])
						unique1++;
					set1[next] = true;
				}
				else break;
					
			}
			while (unique1 > 0 && i2 < M)
			{
				int next = board2_mapped[i2++];
				if (set1[next] && !set2[next])
					unique1--;
				if (!set1[next] && !set2[next])
					unique2++;
				set2[next] = true;
			}
			if (unique1 > 0)
				break;

			while (unique2 > 0 && i1 < N)
			{
				int next = board1_mapped[i1++];
				if (set2[next] && !set1[next])
					unique2--;
				if (!set2[next] && !set1[next])
					unique1++;
				set1[next] = true;
			}
			if (unique2 > 0)
				break;
		}
			
		cout << "Case #" << k << ": " << result << endl;
	}
	return 0;
}

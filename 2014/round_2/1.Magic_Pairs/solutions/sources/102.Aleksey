#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <ctime>
#include <string>
#include <cmath>

using namespace std;

typedef pair<int, int> pii;
typedef long long LL;
typedef vector<int> vi;
typedef vector<LL> vll;

void solve() {
	int n, m;
	cin >> n >> m;
	vll f1(n), f2(m);

	{
		LL x1, a1, b1, c1, r1;
		LL x2, a2, b2, c2, r2;

		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;

		f1[0] = x1;
		f2[0] = x2;
		for (int i = 1; i < max(n, m); ++i) {
			if (i < n) f1[i] = (a1 * f1[(i-1) % n] + b1 * f2[(i-1) % m] + c1) % r1;
			if (i < m) f2[i] = (a2 * f1[(i-1) % n] + b2 * f2[(i-1) % m] + c2) % r2;
		}
	}


	LL ans = 0;

	vi sz1(n), sz2(m);
	set<int> s1, s2;

	for (int i = 0; i < n; ++i) {
		s1.insert(f1[i]);
		sz1[i] = s1.size();
	}

	for (int i = 0; i < m; ++i) {
		s2.insert(f2[i]);
		sz2[i] = s2.size();
	}

	set<int> in_f;
	set<int> in_s;

	for (int i = 0, j = 0; i < n && j < m;) {
		int x = f1[i];
		if (in_s.count(x)) {
			in_s.erase(x);
		} else {
			in_f.insert(x);
		}
		int y = f2[j];
		if (in_f.count(y)) {
			in_f.erase(y);
		} else {
			in_s.insert(y);
		}

		int ii = lower_bound(sz1.begin(), sz1.end(), sz1[i] + 1) - sz1.begin();
		int jj = lower_bound(sz2.begin(), sz2.end(), sz2[j] + 1) - sz2.begin();

		if (in_s.size() + in_f.size() == 0) ans += 1LL * (ii - i) * (jj - j);

		i = ii;
		j = jj;
	}

	static int testid;
	cout << "Case #" << ++testid << ": ";
	cout << ans;
	cout << endl;
}

int main() {
	int t;
	cin >> t;
	while (t --> 0) {
		double start = clock();
		solve();
		cerr << (clock() - start) / CLOCKS_PER_SEC << endl;
	}
	return 0;
}


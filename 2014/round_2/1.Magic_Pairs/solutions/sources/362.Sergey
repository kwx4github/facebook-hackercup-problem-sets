#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <algorithm>
#include <hash_set>
#include <queue>

using namespace std;
using namespace stdext;


long long solve() {
	long long n[2], x[2], a[2], b[2], c[2], r[2];
	cin >> n[0] >> n[1];
	cin >> x[0] >> a[0] >> b[0] >> c[0] >> r[0];
	cin >> x[1] >> a[1] >> b[1] >> c[1] >> r[1];
	hash_set<long long> hb[2];
	long long cur[2];
	vector<long long> tr[2];
	cur[0] = x[0];
	cur[1] = x[1];
	long long s[2];
	s[0] = s[1] = 0;
	tr[0].push_back(x[0]);
	tr[1].push_back(x[1]);
	vector<long long> col[2], num[2];
	for (long long tt = 0; tt < max(n[0], n[1]); ++tt) {
		for (long long t = 0; t < 2; ++t) {
			if (n[t] > tt) {
				if (hb[t].find(cur[t]) == hb[t].end()) {
					hb[t].insert(cur[t]);
					s[t]++;
					col[t].push_back(cur[t]);
					num[t].push_back(0);
				}
				num[t][s[t]-1]++;
			}
			cur[t] = ((long long)a[t] * tr[0][(tt)%n[0]] + (long long)b[t] * tr[1][(tt)%n[1]] + c[t]) % r[t];
			tr[t].push_back(cur[t]);
		}
	}
	n[0] = col[0].size();
	n[1] = col[1].size();
	long long result = 0;
	long long i[2]; i[0] = i[1] = -1;
	while (i[0] + 1 < n[0] && i[1] + 1 < n[1]) {
		//if (col[0][i[0]] == col[1][i[1]]) {
		//	result += (long long) num[0][i[0]] * num[1][i[1]];
		//	i[0]++;
		//	i[1]++;
		//	continue;
		//}
		hash_set<long long> cc[2];
		queue<long long> q[2];
		cc[0].insert(col[0][++i[0]]);
		while ((!cc[0].empty() || !cc[1].empty()) && i[0] < n[0] && i[1] < n[1]) {
			long long t;
			if (!cc[0].empty()) {
				t = 1;
			}
			else {
				t = 0;
			}
			if (i[t] == n[t] - 1) {
				break;
			}
			long long cur = col[t][++i[t]];
			if (cc[1-t].find(cur) != cc[1-t].end()) {
				cc[1-t].erase(cur);
			}
			else {
				cc[t].insert(cur);
			}
		}
		if (i[0] < n[0] && i[1] < n[1] && cc[0].empty() && cc[1].empty()) {
			result += (long long) num[0][i[0]] * num[1][i[1]];
		}
		
	}
	return result;
}

int main() {
	freopen("_magic_pairs.txt", "r", stdin);
	// freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	long long t;
	cin >> t;
	for (long long i = 0; i < t; ++i) {
		if (i == t - 1) {
			cout << "Case #" << i + 1 << ": " << solve();
		}
		else {
			cout << "Case #" << i + 1 << ": " << solve() << endl;
		}
	}
	return 0;
}
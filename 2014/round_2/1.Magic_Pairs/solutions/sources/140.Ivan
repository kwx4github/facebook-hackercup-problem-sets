#include <algorithm>

#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>

#include <string>
#include <vector>
#include <iostream>
#include <set>

using namespace std;

#define TRACE(x) cout << #x << " = " << x << endl
#define REP(i, n) for (int i = 0; i < (n); ++i)

typedef long long llint;

const int MAXN = 1000005;

int a[MAXN], b[MAXN];
set<int> Sa, Sb;

int main(void)
{
  int t;
  scanf("%d", &t);
  for (int tt = 1; tt <= t; ++tt) {
    int n, m;
    scanf("%d %d", &n, &m);
    
    int x1, a1, b1, c1, r1;
    int x2, a2, b2, c2, r2;
    scanf("%d %d %d %d %d", &x1, &a1, &b1, &c1, &r1);
    scanf("%d %d %d %d %d", &x2, &a2, &b2, &c2, &r2);
    
    a[0] = x1, b[0] = x2;
    for (int i = 1; i < n || i < m; ++i) {
      a[i] = (llint(a1)*a[(i-1)%n] + llint(b1)*b[(i-1)%m] + c1)%r1;
      b[i] = (llint(a2)*a[(i-1)%n] + llint(b2)*b[(i-1)%m] + c2)%r2;
    }
    
    Sa.clear(), Sb.clear();
    llint ans = 0;
    int yl = 0, yr = 0;

    REP(x, n) {
      Sa.insert(a[x]);
      if (!Sb.count(a[x])) {
        bool ima = false;
        while (yl < m) {
          Sb.insert(b[yl]);
          yl++;
          if (b[yl-1] == a[x]) { ima = true; break; }
        }
        if (!ima) break;
      }
      
      if (Sa.size() != Sb.size()) continue;
      
      if (yr < yl) yr = yl;
      while (yr < m && Sb.count(b[yr])) yr++;
      ans += yr-yl+1;
    }
      
    printf("Case #%d: ", tt);
    printf("%lld\n", ans);
  }
  return 0;
}

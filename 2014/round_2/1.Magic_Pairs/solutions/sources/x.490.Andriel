#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <set>
#include <vector>

using namespace std;

long long int board1[1000001], board2[1000001];

int main()
{
    int t;

    cin >> t;
    int c = 1;
    while (t--) {
      int n, m;
      cin >> n >> m;
      long long int x1, a1, b1, c1, r1;
      cin >> x1 >> a1 >> b1 >> c1 >> r1;
      long long int x2, a2, b2, c2, r2;
      cin >> x2 >> a2 >> b2 >> c2 >> r2;
      board1[0] = x1;
      board2[0] = x2;
      for (int i = 1; i < max(n,m); ++i) {
            board1[i] = (n>=m)?((a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1):((a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2);
            board2[i] = (m>n)?((a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1):((a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2); 
      }
      int i = 0, j = 0;
      set<long long int> aux1,aux2,aux3,aux4;
      aux1.insert(x1);
      aux2.insert(x2);
      if(x1!=x2){
        aux3.insert(x2);
        aux4.insert(x1);
      }
      int marc[max(n,m)+1];
      int qtd[max(n,m)+1];
      memset(qtd,0,sizeof qtd);
      memset(marc,0,sizeof marc);
      if(n<m)swap(n,m);
      long long int resp = 0;
      while(i<n || j<m){
        int tam1 = aux1.size(), tam2 = aux2.size();
        if(tam1 !=tam2){
          if(tam1>tam2){
            j++;
            if(j<m){
              
              aux2.insert(board2[j]);
              if(aux2.size()!=tam2){
                if(aux1.find(board2[j])!=aux1.end()){
                  aux3.erase(board2[j]);
                }else{
                  aux4.insert(board2[j]);
                }
              }

            }
            else break;
          }else{
            i++;
            if(i<n){
              aux1.insert(board1[i]);
              if(aux1.size()!=tam1){
                if(aux2.find(board1[i])!=aux2.end()){
                  aux4.erase(board1[i]);
                }else{
                  aux3.insert(board1[i]);
                }
              }
            }
            else break;
          }
        }else{
          if(marc[tam1] == 0 && aux3.size() == 0 && aux4.size()==0){
            marc[tam1] = 1;
            while(i<n && aux1.size() == tam1){
              qtd[tam1]++;
              i++;
              if(i<n){
                aux1.insert(board1[i]);
                 if(aux1.size()!=tam1){
                if(aux2.find(board1[i])!=aux2.end()){
                  aux4.erase(board1[i]);
                }else{
                  aux3.insert(board1[i]);
                }
              }
              }
              
            }
            while(j<m && aux2.size() == tam1){
              resp+=qtd[tam1];
              j++;
              if(j<m){
                aux2.insert(board2[j]);
                if(aux2.size()!=tam1){
                if(aux1.find(board2[j])!=aux1.end()){
                  aux3.erase(board2[j]);
                }else{
                  aux4.insert(board2[j]);
                }
              }
              }
            }
          }else{
            marc[tam1] = -1;
            i++;
            if(i<n){
              aux1.insert(board1[i]);
              if(aux1.size()!=tam1){
                if(aux2.find(board1[i])!=aux2.end()){
                  aux4.erase(board1[i]);
                }else{
                  aux3.insert(board1[i]);
                }
              }
            }
            else{
              j++;
             if(j<m){
              aux2.insert(board2[j]);
              if(aux2.size()!=tam1){
                if(aux1.find(board2[j])!=aux1.end()){
                  aux3.erase(board2[j]);
                }else{
                  aux4.insert(board2[j]);
                }
              }
             }
            }
          }
        }

      }
      cout<<"Case #"<<c++<<": "<<resp<<endl;

    }

    return 0;
}

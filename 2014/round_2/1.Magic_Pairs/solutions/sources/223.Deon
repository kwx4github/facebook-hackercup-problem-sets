#include <iostream>
#include <ctime>
#include <fstream>
#include <cmath>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <complex>
#include <utility>
#include <cctype>
#include <list>
#include <deque>

using namespace std;

#define FORALL(i,a,b) for(int i=(a);i<=(b);++i)
#define FOR(i,n) for(int i=0;i<(n);++i)
#define FORB(i,a,b) for(int i=(a);i>=(b);--i)

typedef long long ll;
typedef long double ld;
typedef complex<ld> vec;

typedef pair<int,int> pii;
typedef map<int,int> mii;

#define pb push_back
#define mp make_pair

#warning when one list is much bigger than the other
#warning use LONG LONGS
#define MAXN 1000004
int A[MAXN];
int B[MAXN];
int colsA[MAXN];
map<int,bool> used;
map<int,int> first;

int main() {
	int TEST;
	int x1,a1,b1,c1,r1;
	int x2,a2,b2,c2,r2;
	int N,M;
	
	cin >> TEST;
	FOR(test,TEST) {
		cin >> N >> M;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		A[0] = x1;
		B[0] = x2;
		FORALL(i,1,max(N-1,M-1)) {
			if (0<=i&&i<N) A[i] = 1ll*(1ll*a1 * A[(i-1+N) % N]%r1 + 1ll*b1 * B[(i-1+M) % M]%r1 + c1) % r1;
			if (0<=i&&i<M) B[i] = 1ll*(1ll*a2 * A[(i-1+N) % N]%r2 + 1ll*b2 * B[(i-1+M) % M]%r2 + c2) % r2;
		}
		used.clear();
		memset(colsA,0,sizeof(colsA));
		first.clear();
		
		FOR(i,N){
			colsA[i] = (i?colsA[i-1]:0) + 1 - used[A[i]];
			used[A[i]] = true;
		}
		used.clear();		
		FOR(i,N) {
			if (!first.count(A[i])) {
				first[A[i]] = i;
			}
		}

		ll ans = 0;
		int low = -1;
		int num_cols = 0;
		FOR(j,M) {
			if (!used[B[j]]) num_cols++;
			used[B[j]] = true;
			
			if (!first.count(B[j])) break;
			low = max(low,first[B[j]]);
			assert(colsA[low] >= num_cols);
			if (colsA[low] > num_cols) continue;
			
			int a = low;
			int b = N-1;
			while(a<b) {
				int k = (a+b+1)/2;
				if (colsA[k] == num_cols) {
					a = k;
				} else {
					b = k-1;
				}
			}
			assert(a==b);
			assert(a>=low);
			assert(colsA[a] == num_cols);
			ans += a-low+1;
		}
		
		cout << "Case #" << (test+1) << ": " << ans << endl;
	}
}























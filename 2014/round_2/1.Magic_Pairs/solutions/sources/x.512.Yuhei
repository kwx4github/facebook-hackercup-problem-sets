#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <deque>
#include <complex>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cstring>

#define REP(i,x) for(int i=0 ; i<(int)(x) ; i++)
#define ALL(x) (x).begin(),(x).end()
#define LL long long

using namespace std;

int main(){
	int T;
	cin >> T;
	REP(testCase,T){
		int N[2];
		LL x[2],a[2],b[2],c[2],r[2];
		REP(i,2)cin >> N[i];
		REP(i,2)cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
		vector<LL> board[2];
		REP(p,2){
			board[p].resize(N[p]);
			board[p][0] = x[p];
		}
		for(int i=1 ; i<max(N[0],N[1]) ; i++){
			REP(p,2){
				if(i<(int)board[p].size()){
					board[p][i] = (a[p]*board[0][(i-1)%N[0]]+b[p]*board[1][(i-1)%N[1]]+c[p])%r[p];
				}	
			}
		}
		//REP(p,2){
		//	REP(i,board[p].size())cout << board[p][i] << " ";
		//	cout << endl;
		//}
		int lhs = 0, rhs = 0;
		set<LL> lhs_set;
		set<LL> rhs_set;
		set<LL> used;
		int res = 0;
		while(true){
			if(lhs<(int)board[0].size() && lhs_set.empty()){
				if(rhs_set.count(board[0][lhs])>0){
					rhs_set.erase(board[0][lhs]);
				}
				else if(used.count(board[0][lhs])==0){
					lhs_set.insert(board[0][lhs]);
					used.insert(board[0][lhs]);
				}
				lhs++;
			}
			else if(rhs<(int)board[1].size()){
				if(lhs_set.count(board[1][rhs])>0){
					lhs_set.erase(board[1][rhs]);
				}else if(used.count(board[1][rhs])==0){
					rhs_set.insert(board[1][rhs]);
					used.insert(board[1][rhs]);
				}
				rhs++;
			}else{
				break;
			}
			if(rhs_set.empty() && lhs_set.empty())res++;
		}
		cout << "Case #" << testCase+1 << ": " << res << endl;
	}
	return 0;
}

#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <limits>
#include <numeric>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define MP make_pair
#define all(v) (v).begin(), (v).end()
#define PROBLEM_ID "boards"

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef long long ll;
typedef pair<int, int> pii;

ll SolutionFast(const vvi& board) {
  set<int> only[2];
  set<int> all[2];
  all[0].insert(board[0][0]);
  all[1].insert(board[1][0]);
  int cur[2];
  cur[0] = cur[1] = 0;
  if (board[1][cur[1]] != board[0][cur[0]]) {
    only[0].insert(board[0][cur[0]]);
    only[1].insert(board[1][cur[1]]);
  }
  int l[2];
  l[0] = board[0].size();
  l[1] = board[1].size();
  ll result = 0;
  while (cur[0] < l[0] || cur[1] < l[1]) {
    if (only[0].empty() && only[1].empty()) {
      vi lastcur(cur, cur + 2);
      for (int i = 0; i < 2; ++i) {
        while (cur[i] + 1 < l[i]) {
          cur[i]++;
          int tmp = board[i][cur[i] % l[i]];
          if (!all[i].count(tmp)) {
            break;
          }
        }
        if (cur[i] == l[i] - 1 && all[i].count(board[i][cur[i]])) {
          ++cur[i];
        }
      }
      result += ll(cur[0] - lastcur[0]) * ll(cur[1] - lastcur[1]);
      for (int i = 0; i < 2; ++i) {
        if (cur[i] < l[i] && ((cur[1 - i] < l[1 - i] && board[0][cur[0]] != board[1][cur[1]]) || cur[1 - i] == l[1 - i])) {
          only[i].insert(board[i][cur[i]]);
        }
        if (cur[i] < l[i]) {
          all[i].insert(board[i][cur[i]]);
        }
      }
    } else if (cur[0] >= l[0] - 1 && !only[1].empty()) {
      break;
    } else if (cur[1] >= l[1] - 1 && !only[0].empty()) {
      break;
    }
    for (int i = 0; i < 2; ++i) {
      while (!only[1 - i].empty() && cur[i] + 1 < l[i]) {
        ++cur[i];
        int tmp = board[i][cur[i] % l[i]];
        if (only[1 - i].count(tmp)) {
          only[1 - i].erase(tmp);
        } else if (!all[1 - i].count(tmp)) {
          only[i].insert(tmp);
        }
        all[i].insert(tmp);
      }
    }
  }
  return result;
}

ll SolutionSlow(const vvi& board) {
  ll result = 0;
  for (int i = 0; i < board[0].size(); ++i) {
    for (int j = 0; j < board[1].size(); ++j) {
      set<int> first(board[0].begin(), board[0].begin() + i + 1);
      set<int> second(board[1].begin(), board[1].begin() + j + 1);
      if (first == second) {
        ++result;
      }
    }
  }
  return result;
}

int main() {
  /*while (true) {
    vvi board(2);
    for (int i = 0; i < 2; ++i) {
      int n = rand() % 10 + 1;
      for (int j = 0; j < n; ++j) {
        board[i].push_back(rand() % 10);
      }
    }
    int B1[] = {2, 5, 3, 5};
    int B2[] = {2, 2};
    board[0].assign(B1, B1 + 4);
    board[1].assign(B2, B2 + 2);
    for (int i = 0; i < 2; ++i) {
      cerr << board[i].size() << endl;
      for (int j = 0; j < board[i].size(); ++j) {
        cerr << board[i][j] << ' ';
      }
      cerr << endl;
    }
    ll result1 = SolutionFast(board);
    ll result2 = SolutionSlow(board);
    if (result1 != result2) {
      cerr << "Wrong answer: " << result1 << ' ' << result2 << endl;
      break;
    } else {
      cerr << "OK: " << result1 << ' ' << result2 << endl;
    }
  }*/
  freopen(PROBLEM_ID".in", "r", stdin);
  freopen(PROBLEM_ID".out", "w", stdout);
  int tests;
  cin >> tests;
  for (int test_index = 0; test_index < tests; ++test_index) {
    int l[2], x[2], a[2], b[2], c[2], r[2];
    cin >> l[0] >> l[1];
    for (int i = 0; i < 2; ++i) {
      cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
    }
    vector< vector<int> > board(2);
    board[0].push_back(x[0]);
    board[1].push_back(x[1]);
    for (int j = 0; j + 1 < max(l[0], l[1]); ++j) {
      for (int i = 0; i < 2; ++i) {      
        int tmp = (ll(a[i]) * board[0][j % l[0]] + ll(b[i]) * board[1][j % l[1]] + c[i]) % r[i];
        if (j + 1 < l[i]) {
          board[i].push_back(tmp);
        }
      }
    }
    ll result = SolutionFast(board);
    cout << "Case #" << test_index + 1 << ": " << result << endl;
    cerr << "Case #" << test_index + 1 << ": " << result << endl;
  }
  return 0;
}

#include <algorithm>
#include <cstdio>
#include <map>
#include <set>

using namespace std;

#define MAX 1000000

typedef long long int64;

struct SetHash {
  int64 v1;
  int64 v2;
};
bool operator < (const SetHash &A, const SetHash &B) {
  if (A.v1 != B.v1) return A.v1 < B.v1;
  return A.v2 < B.v2;
}

int64 fast_pow(int a, int n) {
  if (n == 0) return 1;
  if (n & 1) return a * fast_pow(a, n - 1);
  int64 x = fast_pow(a, n >> 1);
  return x * x;
}

int N, M;
int u[MAX];
int v[MAX];

void ComputeSets(int *x, int n, map<SetHash, int>& hash_cnt) {
  set<int> S;
  SetHash set_hash;
  set_hash.v1 = 0;
  set_hash.v2 = 0;
  for (int i = 0; i < n; ++i) {
    if (!S.count(x[i])) {
      S.insert(x[i]);
      set_hash.v1 += fast_pow(1337, x[i]);
      set_hash.v2 += fast_pow(31337, x[i]);
    }
    hash_cnt[set_hash] += 1;
  }
}

int main() {
  int T;
  scanf("%d", &T);
  for (int tt = 1; tt <= T; ++tt) {
    scanf("%d%d", &N, &M);
    int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
    scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
    scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);

    u[0] = x1;
    v[0] = x2;
    for (int i = 1; i < max(N, M); ++i) {
      if (i < N) {
        u[i] = ((int64)a1 * u[(i-1) % N] + (int64)b1 * v[(i-1) % M] + c1) % r1;
      }
      if (i < M) {
        v[i] = ((int64)a2 * u[(i-1) % N] + (int64)b2 * v[(i-1) % M] + c2) % r2;
      }
    }
    map<SetHash, int> u_hash;
    map<SetHash, int> v_hash;
    ComputeSets(u, N, u_hash);
    ComputeSets(v, M, v_hash);

    int64 ret = 0;
    for (map<SetHash, int>::iterator it = u_hash.begin(); it != u_hash.end(); ++it) {
      if (!v_hash.count(it->first)) continue;
      ret += (int64)it->second * v_hash[it->first];
    }
    printf("Case #%d: %lld\n", tt, ret);
    fprintf(stderr, "Case #%d: %lld\n", tt, ret);
  }
  return 0;
}

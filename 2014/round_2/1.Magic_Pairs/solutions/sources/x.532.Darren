//Clibrary:
#include<cassert>
#include<cctype>
#include<cerrno>
//#include<cfenv>
#include<cfloat>
//#include<cinttypes>
#include<ciso646>
#include<climits>
#include<clocale>
#include<cmath>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
//#include<cstdbool>
#include<cstddef>
//#include<cstdint>
#include<cstdio>
#include<cstdlib>
#include<cstring>
//#include<ctgmath>
#include<ctime>
//#include<cuchar>
#include<cwchar>
#include<cwctype>
//Containers:
//#include<array>
#include<bitset>
#include<deque>
//#include<forward_list>
#include<list>
#include<map>
#include<queue>
#include<set>
#include<stack>
//#include<unordered_map>
//#include<unordered_set>
#include<vector>
//Input/Output:
#include<fstream>
#include<iomanip>
#include<ios>
#include<iosfwd>
#include<iostream>
#include<istream>
#include<ostream>
#include<sstream>
#include<streambuf>
//Other:
#include<algorithm>
//#include<chrono>
//#include<codecvt>
#include<complex>
#include<exception>
#include<functional>
//#include<initializer_list>
#include<iterator>
#include<limits>
#include<locale>
#include<memory>
#include<new>
#include<numeric>
//#include<random>
//#include<ratio>
//#include<regex>
#include<stdexcept>
#include<string>
//#include<system_error>
//#include<tuple>
//#include<typeindex>
#include<typeinfo>
//#include<type_traits>
#include<utility>
#include<valarray>
using namespace std;

typedef long long i64;
typedef unsigned long long u64;
const double PI = acos(-1);
/*
 * __builtin_ffs  __builtin_clz  __builtin_ctz __builtin_popcount  __builtin_parity
 * sizeof CLOCKS_PER_SEC
 * (1 << (31 - __builtin_clz(100) ) == 64;
 * decltype // deprecated
 */
const int MAXN = 1024 * 1024;
int Board1[MAXN];
map<int, i64> pos1;
int Board2[MAXN];
map<int, i64> pos2;

void reset(){
  pos1.clear();
  pos2.clear();
}

int N, M;

i64 solve(){
  i64 l1 = 0, l2 = 0;
  //set<int> S1, S2;
  i64 total = 0;

  //printf("Board1: ");
  //for (int i = 0; i < N; i++){
    //printf("%d ", Board1[i]);
  //}printf("\n");
  //printf("Board2: ");
  //for (int i = 0; i < M; i++){
    //printf("%d ", Board2[i]);
  //}printf("\n");

  while (l1 < N && l2 < M){
    //printf("==%lld %lld, %lld %lld\n", l1, r1, l2, r2);
    i64 r1 = l1, r2 = l2;
    while (l2 <= r2 || l1 <= r1){
      while (l2 <= r2){
        int c2 = Board2[l2++];
        if (pos1.count(c2) == 0) return total;
        r1 = max(r1, pos1[c2]);
      }
      while (l1 <= r1){
        int c1 = Board1[l1++];
        if (pos2.count(c1) == 0) return total;
        r2 = max(r2, pos2[c1]);
      }
    }
    //printf("%lld %lld, %lld %lld\n", l1, r1, l2, r2);
    while (l1 < N && pos1.count(Board1[l1]) && pos1[Board1[l1]] <= r1) l1++;
    while (l2 < M && pos2.count(Board2[l2]) && pos2[Board2[l2]] <= r2) l2++;
    total += (l1 - r1) * (l2 - r2);
  }
  return total;
}

int x1, x2, a1, a2, b1, b2, c1, c2;
int r1, r2;
int TestNum;
int main(){
  ios_base::sync_with_stdio(false); 
  int T; cin >> T;
  while (T--){
    reset();
    cin >> N >> M;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;

    Board1[0] = x1;
    Board2[0] = x2;
    for (int i = 1; i < max(N, M); i++){
      Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
      Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
    }

    for (int i = 0; i < N; i++){
      int c = Board1[i];
      if (pos1.count(c)) continue;
      pos1[c] = i;
    }
    for (int i = 0; i < M; i++){
      int c = Board2[i];
      if (pos2.count(c)) continue;
      pos2[c] = i;
    }
    i64 ans = solve();
    cout << "Case #" << ++TestNum << ": " << ans << endl;    
  }
}



#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <algorithm>
#include <functional>
#include <iterator>
#include <locale>
#include <memory>
#include <stdexcept>
#include <utility>
#include <string>
#include <fstream>
#include <ios>
#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <istream>
#include <ostream>
#include <sstream>
#include <streambuf>
#include <complex>
#include <numeric>
#include <valarray>
#include <exception>
#include <limits>
#include <new>
#include <typeinfo>
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <climits>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdlib>
#include <cstddef>
#include <cstdarg>
#include <ctime>
#include <cstdio>
#include <cstring>
#include <cwchar>
#include <cwctype>
using namespace std;
static const double EPS = 1e-8;
static const double PI = 4.0 * atan(1.0);
static const double PI2 = 8.0 * atan(1.0);
typedef long long ll;
typedef unsigned long long ull;

#define ALL(c) (c).begin(), (c).end()
#define CLEAR(v) memset(v,0,sizeof(v))
#define MP(a,b) make_pair((a),(b))
#define REP(i,n) for(int i=0;i<(int)n;++i)
#define ABS(a) ((a)>0?(a):-(a))
template<class T> T MIN(const T& a, const T& b) { return a < b ? a : b; }
template<class T> T MAX(const T& a, const T& b) { return a > b ? a : b; }
template<class T> void MIN_UPDATE(T& a, const T& b) { if (a > b) a = b; }
template<class T> void MAX_UPDATE(T& a, const T& b) { if (a < b) a = b; }

int main() {
	std::ios::sync_with_stdio(false);

	int T;
	cin >> T;
	for (int testCase = 1; testCase <= T; ++testCase) {
		ll N, M, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
		cin >> N >> M >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;

		vector<ll> board1, board2;
		board1.push_back(x1);
		board2.push_back(x2);
		for (int i = 1; i < MAX(N, M); ++i) {
			if (i < N) {
				board1.push_back((a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1);
			}
			if (i < M) {
				board2.push_back((a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2);
			}
		}

		int left2 = 0;
		int right2 = 0;
		set<ll> set1, set2;
		ll answer = 0;
		REP(i1, N) {
			set1.insert(board1[i1]);

			while (right2 < M && set1.count(board2[right2]) && set1.size() > set2.size()) {
				set2.insert(board2[right2]);

				if (set1.size() == set2.size()) {
					left2 = right2;
				}

				++right2;
			}

			if (set1.size() == set2.size()) {
				while (right2 < M && set1.count(board2[right2])) {
					++right2;
				}

				answer += right2 - left2;
			}
		}

		cout << "Case #" << testCase << ": " << answer << endl << flush;
	}
}

#include <stdio.h>
#include <string>
#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
#include <memory.h>
#include <cmath>
#include <set>
#include <cstdlib>
#include <time.h>
#include <map>
#include <bitset>

using namespace std;

typedef pair<int, int> pii;
typedef pair<int, string> pis;
typedef pair<pii, int> ppiii;
typedef pair<int, long double> pid;
typedef vector<int> vi;
typedef long double ld;
typedef long long ll;
typedef pair<pii, ll> ppiil;

template<typename T> T sqr(T x){return x * x;}

const int inf = 1e9 + 7;
const long long llinf = (long long)1e18;
const int maxn = 1000020;
const ld eps = 1e-7;
//const int d[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

int B1[maxn], B2[maxn];

int main(){
#if 1
	freopen("input.txt", "r", stdin);
//	freopen("out", "w", stdout);
//#else
//	freopen("javacert.in", "r", stdin);
//	freopen("javacert.out", "w", stdout);
#endif
	int tests;
	scanf("%d", &tests);
	for(int test = 1; test <= tests; test++){
		int n, m, x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
		
		scanf("%d%d%d%d%d%d%d%d%d%d%d%d\n", &n, &m, &x1, &a1, &b1, &c1, &r1, &x2, &a2, &b2, &c2, &r2);
		
		B1[0] = x1;
		B2[0] = x2;
		for(int i = 1; i < max(n, m); i++){
			if(i < n){
				B1[i] = ((ll)a1 * B1[(i-1) % n] + (ll)b1 * B2[(i-1) % m] + (ll)c1) % r1;
			}
			if(i < m){
				B2[i] = ((ll)a2 * B1[(i-1) % n] + (ll)b2 * B2[(i-1) % m] + (ll)c2) % r2;
			}
		}
		/*
		scanf("%d%d", &n, &m);
		for(int i = 0; i < n; i++)
			scanf("%d", &B1[i]);
		for(int i = 0; i < m; i++)
			scanf("%d", &B2[i]);
		*/
		/*
		for(int i = 0; i < n; i++)
			printf("%d ", B1[i]);
		printf("\n");
		for(int i = 0; i < m; i++)
			printf("%d ", B2[i]);
		printf("\n");*/
		
		int prevP = -1, p = -1, e = 0;
		map<int, bool> u1, u2;
		ll ans = 0;
		
		for(int i = 0; i < n; i++){
			if(!u1[B1[i]]){
				u1[B1[i]] = true;
				
				if(u2[B1[i]])
					e--;
				else
					e++;
			}
			
			while(!u2[B1[i]] && p + 1 < m){
				p++;
				
				if(!u2[B2[p]]){
					u2[B2[p]] = true;
					
					if(u1[B2[p]])
						e--;
					else
						e++;
					
					prevP = p;
				}
			}
			
			if(e == 0){
				while(p + 1 < m && u2[B2[p + 1]]){
					p++;
				}
				
				ans += p - prevP + 1;
			}
			
//			printf("%d %d %d %d %lld\n", i, prevP, p, e, ans);
		}
		
		printf("Case %d: %lld\n", test, ans);
	}
	
	return 0;
}

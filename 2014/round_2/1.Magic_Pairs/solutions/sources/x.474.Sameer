#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cmath>
#include <vector>
#include <list>
#include <stack>
#include <bitset>
#include <string>
#include <stack>
#include <set>
#include <map>
#include <deque>
#include <ctime>

#define ALL(i,n)    for(i = 0; i < (n); i++)
#define FOR(i,a,b)  for(i = (a); i < (b); i++)
#define SET(p)      memset(p,-1,sizeof(p))
#define CLR(p)      memset(p,0,sizeof(p))
#define S(n)	    scanf("%d",&n)
#define P(n)	    printf("%d\n",n)
#define Sl(n)	    scanf("%lld",&n)
#define Pl(n)	    printf("%lld\n",n)
#define Sf(n)       scanf("%lf",&n)
#define Ss(n)       scanf("%s",n)
#define LL long long
#define ULL unsigned long long
#define pb push_back
using namespace std;

LL board1[10000005],board2[10000005];

int main()
{
    freopen("_magic_pairs.txt","r",stdin);
    freopen("out.txt","w",stdout);
    LL t,n,m,i,j,k,ts=0;
    LL x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;
    Sl(t);
    while(t--)
    {
        Sl(n);  Sl(m);

        Sl(x1); Sl(a1); Sl(b1); Sl(c1); Sl(r1);
        Sl(x2); Sl(a2); Sl(b2); Sl(c2); Sl(r2);

        board1[0]=x1; board2[0]=x2;

        for(i=1;i<=max(n,m);i++)
        {
            board1[i] = (a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1 ;
            board2[i] = (a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2 ;
            //printf("%lld %lld\n",board1[i],board2[i]);
        }

        board1[n]=-1;
        board2[m]=-1;

        LL ans=0;
        map<LL,int> mp1,mp2;
        i=0; j=0; k=0;


        while(i<=n || j<=m)
        {
            //printf("        %lld %lld %lld %lld\n",i,j,k,ans);
            LL cnt=0;
            if(k==0)
            {
                while(i<=n && mp2[board1[i]]==1)
                {
                    cnt++;
                    i++;
                }
                ans+=cnt;
                //printf("                   %lld %lld %lld %lld\n",i,j,k,cnt);

                while(j<=m && board2[j]!=board1[i])
                {
                    if(mp1[board2[j]]==0 && mp2[board2[j]]==0)
                    {
                        mp2[board2[j]]=1;
                        k++;
                    }
                    if(k==0) ans+=cnt;
                    j++;
                }

                mp1[board1[i]]=1;
                mp2[board1[i]]=1;

                if(k==0)
                {
                    if(i<n || j<m)
                        ans++;
                }
                i++;
                j++;
            }
            else
            {
                while(i<=n && k>0)
                {
                    //printf("     %lld %lld %lld\n",i,j,k);
                    if(mp1[board1[i]]==0 && mp2[board1[i]]==1)
                    {
                        mp1[board1[i]]=1;
                        k--;
                    }
                    else if(mp1[board1[i]]==0 && mp2[board1[i]]==0)
                    {
                        mp1[board1[i]]=1;
                        while(j<=m && board2[j]!=board1[i])
                        {
                            if(mp1[board2[j]]==0 && mp2[board2[j]]==0)
                            {
                                mp2[board2[j]]=1;
                                k++;
                            }
                            j++;
                        }
                        mp2[board1[i]]=1;
                        j++;
                    }
                    i++;
                }
                if(k==0)
                {
                    i--;
                }
            }
        }

        printf("Case #%lld: %lld\n",++ts,ans);
    }
    return 0;
}

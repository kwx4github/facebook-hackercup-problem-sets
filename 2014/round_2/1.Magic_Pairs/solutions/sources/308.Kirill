#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <Windows.h>
#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;
typedef unsigned long long ull;

void Print(int test_index, ll res) {
  cout <<  "Case #" << test_index << ": " << res << endl;

}

int main() {
  freopen("input_a.txt", "r", stdin);
  freopen("output_a.txt", "w", stdout);
  int test_count;
  cin >> test_count;
  for (int test_index = 0; test_index < test_count; ++test_index) {
    int n, m;
    ll x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
    cin >> n >> m;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    vector<ll> a(n), b(m);
    a[0] = x1;
    b[0] = x2;
    for (int i = 1; i < max(n, m); ++i) {
      if (i < n) {
        a[i] = (a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1;
      }
      if (i < m) {
        b[i] = (a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2;
      }
    }
    int map_index = 0;
    map<ll, int> mp;
    for (int i = 0; i < n; ++i) {
      if (mp.find(a[i]) != mp.end()) { continue; }
      mp[a[i]] = map_index++;
    }
    for (int i = 0; i < m; ++i) {
      if (mp.find(b[i]) != mp.end()) { continue; }
      mp[b[i]] = map_index++; 
    }
    for (int i = 0; i < n; ++i) { a[i] = mp[a[i]]; }
    for (int i = 0; i < m; ++i) { b[i] = mp[b[i]]; }
    map_index += 2;
    ++n; ++m;
    a.push_back(map_index - 2);
    b.push_back(map_index - 1);
    ll res = 0;
    int balance = 2;
    int l = 0, r = 0;
    vector<int> a_set(map_index), b_set(map_index);
    a_set[a[0]] = 1;
    b_set[b[0]] = 1;
    for (int i = 1; i < m && b[i - 1] == b[i]; ++i) {
      ++r;
    }
    if (a[0] == b[0]) {
      balance = 0;
      res += r - l + 1;
    }
    for (int i = 1; i < n; ++i) {
      if (a_set[a[i]]) {
        if (!balance) { res += r - l + 1; }
        continue;
      }
      a_set[a[i]] = 1;
      ++balance;
      if (b_set[a[i]]) { balance -= 2; }
      if (r != m - 1) {
        l = r + 1;
        r = l;
        b_set[b[l]] = 1;
        for (int j = l + 1; j < m && b_set[b[j]]; ++j) { ++r; }
        ++balance;
        if (a_set[b[l]]) { balance -= 2; }
        if (!balance) { res += r - l + 1; }
      }
    }
    Print(test_index + 1, res);
  }
  return 0;
}
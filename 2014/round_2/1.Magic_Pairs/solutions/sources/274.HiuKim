import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;

public class A {	
	BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;
    
    public void task() throws IOException {
    	int N = nextInt();
    	int M = nextInt();
    	long[] board1 = new long[N];
    	long[] board2 = new long[M];
    	
    	long X1 = nextLong();
    	long A1 = nextLong();
    	long B1 = nextLong();
    	long C1 = nextLong();
    	long R1 = nextLong();
    	long X2 = nextLong();
    	long A2 = nextLong();
    	long B2 = nextLong();
    	long C2 = nextLong();
    	long R2 = nextLong();
    	
    	board1[0] = X1;
    	board2[0] = X2;
    	
    	for (int i = 1; i < Math.max(N, M); i++) {
    		if (i < N) {
    			board1[i] = (A1 * board1[(i-1)%N] + B1 * board2[(i-1)%M] + C1) % R1;
    		}
    		if (i < M) {
    			board2[i] = (A2 * board1[(i-1)%N] + B2 * board2[(i-1)%M] + C2) % R2;
    		}
    	}
    	
    	HashMap<Long, Integer> first1 = new HashMap<Long, Integer>();
    	HashMap<Long, Integer> first2 = new HashMap<Long, Integer>();
    	
    	for (int i = 0; i < N; i++) {
    		if (!first1.containsKey(board1[i])) {
    			first1.put(board1[i], i);
    		}    		
    	}
    	
    	for (int i = 0; i < M; i++) {
    		if (!first2.containsKey(board2[i])) {
    			first2.put(board2[i], i);
    		}
    	}
    	
    	HashSet<Long> set1 = new HashSet<Long>();
    	HashSet<Long> set2 = new HashSet<Long>();
    	Queue<Long> only1 = new LinkedList<Long>();
    	Queue<Long> only2 = new LinkedList<Long>();
    	
    	int cur1 = 0;
    	int cur2 = 0;
    	long answer = 0;
    	outer: while (true) {
    		if (only1.isEmpty() && only2.isEmpty()) {
    			
    			if (cur1 > 0) {
	    			long size1 = 1;
	    			long size2 = 1;
	    			while (cur1 < N && set2.contains(board1[cur1])) {
	    				size1++;
	    				cur1++;
	    			}
	    			while (cur2 < M && set1.contains(board2[cur2])) {
	    				size2++;
	    				cur2++;
	    			}
	    			answer += (size1 * size2);
    			}
    			
    			if (cur1 >= N) break outer;
    			
    			only1.add(board1[cur1]);
    	    	set1.add(board1[cur1]);
    	    	cur1++;
    		}
    		
    		if (!only1.isEmpty()) {
    			while (!only1.isEmpty()) {
    				long n = only1.remove();
    				if (!first2.containsKey(n)) {
    					break outer;
    				}    				
    				int next = first2.get(n);
    				while (cur2 <= next) {
    					set2.add(board2[cur2]);
    					if (!set1.contains(board2[cur2])) {
    						only2.add(board2[cur2]);
    					}
    					cur2++;
    				}  
    			}
    		} else if(!only2.isEmpty()) {
    			while (!only2.isEmpty()) {
    				long n = only2.remove();
    				if (!first1.containsKey(n)) {
    					break outer;
    				}    				
    				int next = first1.get(n);
    				while (cur1 <= next) {
    					set1.add(board1[cur1]);
    					if (!set2.contains(board1[cur1])) {
    						only1.add(board1[cur1]);
    					}
    					cur1++;
    				}  
    			}
    		} else {
    			throw new RuntimeException();
    		}
    		
    	}
    	System.out.println( answer);
    }
        
	public void solve() throws IOException {
		int T = nextInt();
		for(int t = 1; t <= T; t++){
			System.out.print("Case #" + (t) + ": ");
			task();
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		new A().run();
	}
	
	public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

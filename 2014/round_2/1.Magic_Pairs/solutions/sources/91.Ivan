import java.io.*;

import java.awt.geom.Point2D;
import java.text.*;
import java.math.*;
import java.util.*;

public class Main implements Runnable {

	final String filename = "_magic_pairs";

	public void solve() throws Exception {
		int N = iread(), M = iread();
		int x1 = iread(), a1 = iread(), b1 = iread(), c1 = iread(), r1 = iread();
		int x2 = iread(), a2 = iread(), b2 = iread(), c2 = iread(), r2 = iread();
		int[] brd1 = new int[N], brd2 = new int[M];

		brd1[0] = x1;
		brd2[0] = x2;
		for (int i = 1; i < N || i < M; i++) {
			if (i < N)
				brd1[i] = (int) ((a1 * (long) brd1[(i - 1) % N] + b1
						* (long) brd2[(i - 1) % M] + c1) % r1);
			if (i < M)
				brd2[i] = (int) ((a2 * (long) brd1[(i - 1) % N] + b2
						* (long) brd2[(i - 1) % M] + c2) % r2);
		}
		long ans = 0;
		int i = 0, j = 0;
		HashSet<Integer> s1 = new HashSet<Integer>(), s2 = new HashSet<Integer>();
		int conflict = 0;
		while (i < N && j < M) {
			int i1 = 0, j1 = 0;
			s1.add(brd1[i]);
			if (!s2.contains(brd1[i]))
				conflict++;
			else
				conflict--;
			s2.add(brd2[j]);
			if (!s1.contains(brd2[j]))
				conflict++;
			else
				conflict--;
			while (i < N && s1.contains(brd1[i])) {
				i++;
				i1++;
			}
			while (j < M && s2.contains(brd2[j])) {
				j++;
				j1++;
			}
			if (conflict == 0)
				ans += i1 * (long) j1;
		}
		out.write(ans + "\n");
	}

	public void run() {
		try {
			// in = new BufferedReader(new InputStreamReader(System.in));
			// out = new BufferedWriter(new OutputStreamWriter(System.out));
			in = new BufferedReader(new FileReader(filename + ".txt"));
			out = new BufferedWriter(new FileWriter(filename + ".out"));
			int tests = iread();
			for (int test = 1; test <= tests; test++) {
				out.write("Case #" + test + ": ");
				solve();
			}
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public int iread() throws Exception {
		return Integer.parseInt(readword());
	}

	public double dread() throws Exception {
		return Double.parseDouble(readword());
	}

	public long lread() throws Exception {
		return Long.parseLong(readword());
	}

	BufferedReader in;

	BufferedWriter out;

	public String readword() throws IOException {
		StringBuilder b = new StringBuilder();
		int c;
		c = in.read();
		while (c >= 0 && c <= ' ')
			c = in.read();
		if (c < 0)
			return "";
		while (c > ' ') {
			b.append((char) c);
			c = in.read();
		}
		return b.toString();
	}

	public static void main(String[] args) {
		try {
			Locale.setDefault(Locale.US);
		} catch (Exception e) {

		}
		// new Thread(new Main()).start();
		new Thread(null, new Main(), "1", 1 << 25).start();
	}
}
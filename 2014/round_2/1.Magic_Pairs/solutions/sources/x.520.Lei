#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <future>
#include <string>
#include <thread>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>

using namespace std;

// Template Begin(By yayamao)
#ifndef ONLINE_JUDGE
    #define READ(file_name) \
        do { \
            if (nullptr == freopen(file_name, "r", stdin)) { \
                fprintf(stderr, "Failed open file: \"%s\" for read!\n", file_name); \
                exit(-1); \
            } \
        } while (0)
    #define WRITE(file_name) \
        do { \
            if (nullptr == freopen(file_name, "w", stdout)) { \
                fprintf(stderr, "Failed open file: \"%s\" for write!\n", file_name); \
                exit(-1); \
            } \
        } while (0)
#else
    #define READ(file_name)
    #define WRITE(file_name)
#endif

#ifdef _MSC_VER
    #define int64 __int64
    #define uint64 unsigned __int64
#else
    #define int64 long long
    #define uint64 unsigned long long
#endif

#define EPS 1E-9
#define D_INF 1E99
#define I_INF 0x7FFFFFFF
#define L_INF 0x7FFFFFFFFFFFFFFFLL

#define S(x) ((int)x.size())
#define L(x) ((int)x.length())

#define X first
#define Y second

#define VI vector<int>
#define VS vector<string>
#define PB(x) push_back(x)

#define MII map<int, int>
#define MSI map<string, int>
#define MIS map<int, string>

#define PII pair<int, int>
#define PSI pair<string, int>
#define PIS pair<int, string>
#define MP(x,y) make_pair(x, y)

#define TWO(x)          (1 << (x))
#define TWOL(x)         (1LL << (x))
#define LOWER_BIT(x)    ((x) & (-(x)))
#define CONTAIN(s,x)    (((s) & TWO(x)) != 0)
#define CONTAINL(s,x)   (((s) & TWOL(x)) != 0)

template<class T>inline void checkMax(T &a, const T &b){if (a < b) a = b;}
template<class T>inline void checkMin(T &a, const T &b){if (b < a) a = b;}
template<class T>inline std::string toString(const T &n){std::ostringstream out;out << n;out.flush();return out.str();}
template<class T>inline T toValue(const std::string &s){T x;std::istringstream in(s);in >> x;return x;}
bool hasNext(){char c;if (scanf(" %c", &c) == EOF) return false;ungetc(c, stdin);return true;}

enum Direction {
    LEFT = 0,
    RIGHT = 1,
    UP = 2,
    DOWN = 3,
    LEFT_UP = 4,
    LEFT_DOWN = 5,
    RIGHT_UP = 6,
    RIGHT_DOWN = 7
};
int dx[]={ 0, 0,-1, 1,-1, 1,-1, 1};
int dy[]={-1, 1, 0, 0,-1,-1, 1, 1};
std::string dir[]={"L", "R", "U", "D", "LU", "LD", "RU", "RD"};

int tenPower[10]={0x1, 0xA, 0x64, 0x3E8, 0x2710, 0x186A0, 0xF4240, 0x989680, 0x5F5E100, 0x3B9ACA00};

#define setv(a, v) memset(a, v, sizeof(a))

// [l, r]
#define range(i, l, r) for(int i = (l); i <= (int)(r); ++i)
#define rangeD(i, r, l) for(int i = (r); i >= (int)(l); --i)

// [0, n)
#define rep(i, n) for(int i = 0; i < (int)(n); ++i)
#define repD(i, n) for(int i = (int)(n) - 1; i >= 0; --i)

#define all(c) (c).begin(), (c).end()
#define foreach(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
// Template Ended(By yayamao)

void preProcess() {
}

class Solution {
public:
    explicit Solution(const int caseId) {
        caseId_ = caseId;
    }

    void input() {
        int n, m;
        int64 x[2], a[2], b[2], c[2], r[2];

        cin >> n >> m;
        rep (i, 2) {
            cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
        }

        board_[0].PB(x[0]);
        board_[1].PB(x[1]);

        for (int i = 1; i < max(n, m); ++i) {
            if (i < n)
                board_[0].PB((a[0] * board_[0][(i - 1) % n] + b[0] * board_[1][(i - 1) % m] + c[0]) % r[0]);
            if (i < m)
                board_[1].PB((a[1] * board_[0][(i - 1) % n] + b[1] * board_[1][(i - 1) % m] + c[1]) % r[1]);
        }
    }

    void run() {
        clock_t begin = clock();

        answer_ = 0;

        set<int> colors[2];
        int64 sum[2] = {0, 0};

        int64 prime[3] = {1000000007, 1000000009, 1000000033};
        int64 hash[3][2] = {{1, 1}, {1, 1}, {1, 1}};

        int preI[2] = {0, 0};
        int nowI[2] = {0, 0};
        while (nowI[0] < board_[0].size() || nowI[1] < board_[1].size()) {
            rep (i, 2) {
                while (nowI[i] < board_[i].size()) {
                    int c = board_[i][nowI[i]];
                    if (colors[i].find(c) == colors[i].end()) {
                        break;
                    }
                    ++nowI[i];
                }
            }

            if (sum[0] == sum[1] && hash[0][0] == hash[0][1] && hash[1][0] == hash[1][1] && hash[2][0] == hash[2][1]) {
                answer_ += (int64)(nowI[0] - preI[0]) * (nowI[1] - preI[1]);
            }

            rep (i, 2) {
                if (nowI[i] < board_[i].size()) {
                    int c = board_[i][nowI[i]];
                    colors[i].insert(c);
                    sum[i] += c;
                    hash[0][i] = hash[0][i] * c % prime[0];
                    hash[1][i] = hash[1][i] * c % prime[1];
                    hash[2][i] = hash[2][i] * c % prime[2];
                }
                preI[i] = nowI[i];
            }
        }

        clock_t end = clock();
        fprintf(stderr, "Case #%d cost time %.0lfms.\n", caseId_, (double)(end - begin) * 1000.0 / CLOCKS_PER_SEC);
    }

    void output() {
        cout << "Case #" << caseId_ << ": " << answer_ << endl;
    }
private:
    int caseId_;

    vector<int> board_[2];
    int64 answer_;
};

void runWithoutCaseT() {
    // static const int kMaxThreadNumbers = 6;

    vector<std::thread> threads;
    vector<std::unique_ptr<Solution>> solutions;

    for (int caseId = 1; hasNext(); ++caseId) {
        std::unique_ptr<Solution> solution(new Solution(caseId));

        solution->input();
        threads.emplace_back(&Solution::run, solution.get());

        solutions.emplace_back(std::move(solution));
    }

    for (int i = 0; i < solutions.size(); ++i) {
        threads[i].join();
        solutions[i]->output();
    }
}

void runWithCaseT() {
    int caseT;
    if (scanf("%d\n", &caseT) != 1) {
        fprintf(stderr, "Input file is empty!\n");
        exit(-1);
    }
    runWithoutCaseT();
}

void makeData() {
    freopen("in", "w", stdout);
    int T = 100;
    cout << T << endl;
}

int main(int argc, char *argv[]) {
    //makeData(); return 0;
    srand(time(NULL));

    if (argc == 3) {
        READ(argv[1]);
        WRITE(argv[2]);
    } else {
        READ("in");
        WRITE("out");
    }

    preProcess();

    clock_t begin = clock();
    //runWithoutCaseT();
    runWithCaseT();
    clock_t end = clock();
    fprintf(stderr, "Total case cost time %.3lfs.\n", (double)(end - begin) / CLOCKS_PER_SEC);

    return (EXIT_SUCCESS);
}


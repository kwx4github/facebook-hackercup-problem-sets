

import java.io.*;

import java.util.*;

public class D{





    void solve()throws Exception
    {
        int testCases=nextInt();
        for(int test=1;test<=testCases;test++)
        {
            printCase(test);
            solveTestCase(test);
        }

    }

    private void solveTestCase(int testNumber)throws Exception{
        int N=nextInt();
        int M=nextInt();
        long  x1=nextInt(), a1=nextInt(), b1=nextInt(), c1=nextInt(), r1=nextInt();
        long  x2=nextInt(), a2=nextInt(), b2=nextInt(), c2=nextInt(), r2=nextInt();
        long[]board1=new long[N];
        long[]board2=new long[M];
        board1[0] = x1;
        board2[0] = x2;
        for(int i=1;i<Math.max(N,M);i++)
        {
            if(i<N)
                board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1;
            if(i<M)
                board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2;
        }
        HashSet<Integer>set1=new HashSet<Integer>();
        HashSet<Integer>set2=new HashSet<Integer>();
        int[]am=new int[M];
        for(int i=0;i<M;)
        {
            int cur=i;
            if(set2.contains((int)board2[i]))
                throw new RuntimeException();
            set2.add(((int)board2[i]));
            i++;
            while (i<M && set2.contains((int)board2[i]))
            {
                i++;
            }
            for(int j=cur;j<i;j++)
            {
                am[j]=i-j;
            }


        }
        set2.clear();
        long res=0;
        int pointer=0;

        for(int i=0;i<N;i++)
        {
            int x=(int)board1[i];
            if(!set1.contains(x))
            {
                set1.add(x);

                while (pointer<M && !set2.contains(x))
                {
                    set2.add((int)board2[pointer++]);
                }
                if(!set2.contains(x))
                {
                    break;
                }
            }
            if(set1.size()>set2.size())
                throw  new RuntimeException();
            if(set1.size()==set2.size())
            {
                res+=am[pointer-1];
            }

        }
        println(res);




    }



    void test()
    {
        Random rand=new Random();
        for(int testCase=1;;testCase++)
        {
            ;
        }
    }

    void println(Object...x)
    {

        for(int i=0;i<x.length;i++)
        {
            if(i==x.length-1)
            {
                System.out.println(x[i]);
                writer.println(x[i]);
            }
            else
            {
                System.out.print(x[i]+" ");
                writer.print(x[i]+" ");
            }
        }

    }

    private void printCase(int testNumber) {
        System.out.print("Case #"+testNumber+": ");
        writer.print("Case #" + testNumber + ": ");

    }



    ////////////
    BufferedReader reader;
    PrintWriter writer;
    StringTokenizer stk;
    void run()throws Exception
    {

        reader=new BufferedReader(new InputStreamReader(System.in));
        //reader=new BufferedReader(new FileReader("input.txt"));
        stk=null;
        //writer=new PrintWriter(new PrintWriter(System.out));
        writer=new PrintWriter(new FileWriter("output.txt"));
        solve();
        reader.close();
        writer.close();
    }
    int nextInt()throws Exception
    {
        return Integer.parseInt(nextToken());
    }

    long nextLong()throws Exception
    {
        return Long.parseLong(nextToken());

    }
    double nextDouble()throws Exception
    {
        return Double.parseDouble(nextToken());


    }

    String nextString()throws Exception
    {
        return nextToken();
    }
    String nextLine()throws Exception
    {
        return reader.readLine();
    }
    String nextToken()throws Exception
    {
        if(stk==null || !stk.hasMoreTokens())
        {
            stk=new StringTokenizer(nextLine());
            return nextToken();

        }
        return stk.nextToken();
    }

    public static void main(String[]args) throws Exception
    {
        new D().run();
    }








}

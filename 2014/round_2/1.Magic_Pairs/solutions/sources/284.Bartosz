#include <iostream>
#include <algorithm>
#include <cassert>
#include <unordered_map>
#include <unordered_set>
using namespace std;

const int maxN = 1000000;
int x[2][maxN], a[2], b[2], c[2], r[2], N[2];
unordered_map<int,int> pos, first;
unordered_set<int> sec;

int main() {
	ios::sync_with_stdio(false);
	int T;
	cin >> T;
	for(int cs = 1; cs <= T; cs++) {
		pos.clear();
		first.clear();
		sec.clear();

		cin >> N[0] >> N[1];
		for(int i = 0; i < 2; i++) {
			cin >> x[i][0] >> a[i] >> b[i] >> c[i] >> r[i];
		}
		for(int i = 1; i < max(N[0], N[1]); i++) {
			if(i < N[0]) x[0][i] = ((long long)a[0]*x[0][(i-1)%N[0]] + (long long)b[0]*x[1][(i-1)%N[1]] + c[0])%r[0];
			if(i < N[1]) x[1][i] = ((long long)a[1]*x[0][(i-1)%N[0]] + (long long)b[1]*x[1][(i-1)%N[1]] + c[1])%r[1];
		}

		int cnt = 0;
		for(int i = 0; i < N[0]; i++) {
			if(!pos.count(x[0][i])) pos[x[0][i]] = cnt++;
		}

		first[0] = 0;
		for(int i = 0; i < N[0]; i++) {
			x[0][i] = pos[x[0][i]];
			if(!first.count(x[0][i]) && first.count(x[0][i]-1)) {
				first[x[0][i]] = i;
			}
		}

		int mx = -1;
		long long res = 0;
		for(int i = 0; i < N[1]; i++) {
			if(pos.count(x[1][i])) {
				x[1][i] = pos[x[1][i]];
				sec.insert(x[1][i]); mx = max(mx, x[1][i]);
				
				if(sec.size() == mx+1) {
					if(first.count(mx+1)) {
						res += first[mx+1]-first[mx];
					} else {
						res += N[0]-first[mx];
					}
				}
			} else {
				break;
			}
		}

		cout << "Case #" << cs << ": " << res << endl;
	}
	return 0;
}

#include <iostream>
#include <map>
#include <set>
#include <vector>
#include <fstream>
#define MAXN 1000007
using namespace std;

ifstream fin( "D:/FB/A.in" );
ofstream fout( "D:/FB/A.out" );

#define cin fin
#define cout fout

long long sz[2];
long long  x[2], a[2], b[2], c[2], r[2];
int test;
long long bo[2][MAXN];
long long cs[MAXN];
map< long long, int > mp;
vector< int > v[2][2 * MAXN];
int has[2][2 * MAXN];

int get( long long num ){
	if( mp.count( num ) )
		return mp[num];
	int sz = mp.size();
	return mp[num] = sz;
}

set< int > v1, v2;

int main()
{
	//cerr << "Dsd " << endl;
	cin >> test;
	for( int T = 1; T <= test; T++ ){
		cerr << T << endl;
		mp.clear();
		memset( has, 0, sizeof has );
		cin >> sz[0] >> sz[1];
		for( int i = 0; i < 2; i++ ){
			cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
		}
		//cerr << "DSFDSF " << endl;
		bo[0][0] = x[0];
		bo[1][0] = x[1];
		for( int i = 1; i < max( sz[0], sz[1] ); i++ ){
			if( i < sz[0] )
				bo[0][i] = (a[0] * bo[0][(i-1) % sz[0]] + b[0] * bo[1][(i-1) % sz[1]] + c[0]) % r[0];
			if( i < sz[1] )
				bo[1][i] = (a[1] * bo[0][(i-1) % sz[0]] + b[1] * bo[1][(i-1) % sz[1]] + c[1]) % r[1];
		}
		//cerr << endl;
		for( int i = 0; i < sz[0]; i++ ){
			//cerr << bo[0][i] << ' ';
			bo[0][i] = get( bo[0][i] );
		}
		//cerr << endl;
		for( int i = 0; i < sz[1]; i++ ){
			//cerr << bo[1][i] << ' ';
			bo[1][i] = get( bo[1][i] );
		}
		//cerr << endl;
		long long res = 0;
		long long pre;
		int po = 0;
		for( int i = 0; i < sz[0]; i++ ){
			if( has[0][bo[0][i]] ){
				cs[i] = cs[i - 1];
				res += cs[i];
			}
			else{
				cs[i] = 0;
				if( po == sz[1] )
					break;
				v1.clear(), v2.clear();
				v1.insert( bo[0][i] );
				has[0][bo[0][i]] = 1;
				while( v1.size() || v2.size() ){
					if( v1.size() > 0 ){
						int a = *( v1.begin() );
						while( po < sz[1] && bo[1][po] != a ){
							if( !has[0][bo[1][po]] )
								v2.insert( bo[1][po] );			
							has[1][bo[1][po]] = 1;
							po++;
						}
						if( po == sz[1] )
							break;
						has[1][a] = 1;
						v1.erase( a );
					}
					else{
						int a = *( v2.begin() );
						while( i < sz[0] && bo[0][i] != a ){
							if( !has[1][bo[0][i]] )
								v1.insert( bo[0][i] );
							has[0][bo[0][i]] = 1;
							i++;
						}
						if( i == sz[0] )
							break;
						has[0][a] = true;
						v2.erase( a );
					}
				}
			//	cerr << "HERE " << i << ' ' << po << endl;
				if( i == sz[0] )
					break;
				int pre = po;
				while( po < sz[1] && has[0][bo[1][po]] )
					po++;
				cs[i] = po - pre;
				res += cs[i];
			}
		}
		cout << "Case #" << T << ": " << res << endl;
	}
	return 0;
}
#include <iostream>
#include <vector>
#include <set>
#include <string>
#include <strings.h>
#include <stdlib.h>
#include <algorithm>
#include <map>
#include <math.h>

using namespace std;

int main(){
	unsigned long testCases;
	cin >> testCases;
	for (int i = 0; i < testCases; i++){
		unsigned long N, M;
		cin >> N >> M;
		unsigned long x1, a1, b1, c1, r1;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		unsigned long x2, a2, b2, c2, r2;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		vector<unsigned long> board1(max(N,M), 0);
		vector<unsigned long> board2(max(N,M), 0);
		unsigned long maxValue = max(N, M);
		board1[0] = x1;
		board2[0] = x2;
		for (unsigned long j = 1; j < maxValue; j++){
			board1[j] = (a1 * board1[(j-1) % N] + b1 * board2[(j-1) % M] + c1) % r1;
			board2[j] = (a2 * board1[(j-1) % N] + b2 * board2[(j-1) % M] + c2) % r2;
		}

		vector<bool> set1(max(r1,r2), false);
		vector<bool> set2(max(r2,r1), false);

		unsigned long index1 = 1;
		unsigned long index2 = 0;
		bool equals = true;
		unsigned long numbersIn1NotIn2 = 1;
		unsigned long numbersIn2NotIn1 = 0;
		unsigned long solution = 0;
		set1[board1[0]] = true;
		
		while(true){
			if ((numbersIn1NotIn2 == 0) && (numbersIn2NotIn1 == 0)){
				index1--;
				index2--;
				//Check amount of numbers that can be added
				unsigned long calculate1 = 0;
				while(index1 != N){
					if (!set1[board1[index1]]){
						break;
					}
					calculate1++;
					index1++;
				}
				unsigned long calculate2 = 0;
				while(index2 != M){
					if (!set2[board2[index2]]){
						break;
					}
					calculate2++;
					index2++;
				}
				solution += calculate1 * calculate2;
				//Advance one of them
				if (index1 != N){
					numbersIn1NotIn2 = 1;
					set1[board1[index1]] = true;
					index1++;
				} else {
					break;
				}
				if (index2 == M){
					break;
				}
			} else {
				if ((numbersIn1NotIn2 != 0) && (index2 == M)){
					break;
				}
				if ((numbersIn2NotIn1 != 0) && (index1 == N)){
					break;
				}
				while ((numbersIn1NotIn2 != 0) && (index2 != M)){
					if (!set2[board2[index2]]){
						set2[board2[index2]] = true;
						if (set1[board2[index2]]){
							numbersIn1NotIn2--;
						} else {
							numbersIn2NotIn1++;
						}
					}
					index2++;	
				}
				while ((numbersIn2NotIn1 != 0) && (index1 != N)){
					if (!set1[board1[index1]]){
						set1[board1[index1]] = true;
						if (set2[board1[index1]]){
							numbersIn2NotIn1--;
						} else {
							numbersIn1NotIn2++;
						}
					}
					index1++;	
				}
			}
		}
		cout << "Case #" << i + 1 << ": " << solution << endl;
	}
}

#include <bits/stdc++.h>
#include <cassert>
using namespace std;
typedef long long ll; typedef long double ld;
#define rep(i,s,e) for (int i=(s);i<(e);++i)
#define all(x) begin(x),end(x)
#define clr(x,y) memset(x,y,sizeof x)
#define contains(x,y) ((x).find(y)!=end(x))
#define pb push_back
#define Tu tuple
#define mk make_pair
#define mkt make_tuple
#define fst first
#define snd second
#define _1 get<0>
#define _2 get<1>
#define _3 get<2>
#define _4 get<3>
#define endl "\n"
int dx[]={0,0,1,-1,1,-1,1,-1}, dy[]={-1,1,0,0,1,-1,-1,1};
void run();
int main() {
#ifndef LOCAL
#  define endl "\n"
#  define FILE "x"
  //freopen(FILE ".in", "r", stdin), freopen(FILE ".out", "w", stdout);
  ios::sync_with_stdio(0);
#endif
  cout << fixed << setprecision(16);
  run();
}
const int maxn = 1001000;

ll arr[2][maxn];
unordered_map<int,int> frst[2];
int dp[2][maxn];
int N[2];
ll x[2], a[2], b[2], c[2], r[2];

const int inf = 1000000000;
void run() {
  int T; cin >> T;
  rep(tt,1,T+1) {
    cin >> N[0] >> N[1] >> x[0] >> a[0] >> b[0] >> c[0] >> r[0] >> x[1] >> a[1] >> b[1] >> c[1] >> r[1];
    arr[0][0] = x[0];
    arr[1][0] = x[1];
    for (int i = 1; i <= max(N[0], N[1]); ++i)
      rep(j,0,2)
        if (i < N[j]) arr[j][i] = (a[j] * arr[0][(i-1+N[0]) % N[0]] + b[j] * arr[1][(i-1+N[1]) % N[1]] + c[j]) % r[j];
    //rep(i,0,N[0]) cout << arr[0][i] <<" ";cout<<endl;
    //rep(i,0,N[1]) cout << arr[1][i]<<" ";cout<<endl;
    //cout << "ASD"<<endl;
    rep(j,0,2) {
      frst[j].clear();
      for (int i = N[j] - 1; i >= 0; --i)
        frst[j][arr[j][i]] = i;
    }
    //cout << "ASD"<<endl;
    rep(j,0,2) {
      int k = -1;
      for (int i = 0; i < N[j]; ++i) {
        if (!contains(frst[!j], arr[j][i])) k = inf;
        else k = max(k, frst[!j][arr[j][i]]);
        dp[j][i] = k;
      }
    }
    //cout << "ASD"<<endl;
    ll ans = 0;
    rep(i,0,N[0]) {
      if (dp[0][i] == inf) continue;
      if (dp[1][dp[0][i]] > i) continue;
      int lo = dp[0][i], hi = N[1] - 1;
      while (lo < hi) {
        int mid = (lo + hi + 1) / 2;
        if (i >= dp[1][mid]) lo = mid;
        else hi = mid - 1;
      }
      if (lo < N[1] && i >= dp[1][lo]) {
        //cout << i << " " << lo << " " << hi << " " << dp[1][lo] << endl;
        ans += lo - dp[0][i] + 1;
      }
    }
    cout << "Case #" << tt << ": " << ans << endl;
  }
}

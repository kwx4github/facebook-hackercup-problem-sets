#include <stdio.h>
#include <set>
using namespace std;

int kejs, kejsov;
int brd1[1000001], brd2[1000001];
int N, M;
int x1, a1, b1, c1, r1;
int x2, a2, b2, c2, r2;
int i, j;
set<int> have1, have2;
set<int> needs1, needs2;
long long res;

int main() {
	scanf("%d%*c", &kejsov);
	for (kejs = 1; kejs <= kejsov; ++kejs) {
		printf("Case #%d: ", kejs);
        scanf("%d%d", &N, &M);
        scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
        scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
        brd1[0] = x1;
        brd2[0] = x2;
        needs1.clear();
        needs2.clear();
        have1.clear();
        have2.clear();
        for (i = 1; i < max(N, M); i++) {
            if (i < N) {
                brd1[i] = (((long long)a1) * brd1[(i-1) % N] + ((long long) b1) * brd2[(i-1) % M] + ((long long)c1)) % r1;
            }
            if (i < M) {
                brd2[i] = (((long long)a2) * brd1[(i-1) % N] + ((long long) b2) * brd2[(i-1) % M] + ((long long)c2)) % r2;
            }
        }
        res = 0;
        i = 0;
        j = -1;
        have1.insert(brd1[i]);
        needs2.insert(brd1[i]);

        for (;;) {
			while (!needs2.empty() || !needs1.empty()) {
				// najdem kde su rovnaki
				while (!needs2.empty()) {
					j++;
					if (j >= M) break;
					if (have2.insert(brd2[j]).second) {
						if (needs2.find(brd2[j]) != needs2.end()) needs2.erase(brd2[j]);
						if (have1.find(brd2[j]) == have1.end()) needs1.insert(brd2[j]);
					}
				}
				if (j >= M) break;
				while (!needs1.empty()) {
					i++;
					if (i >= N) break;
					if (have1.insert(brd1[i]).second) {
						if (needs1.find(brd1[i]) != needs1.end()) needs1.erase(brd1[i]);
						if (have2.find(brd1[i]) == have2.end()) needs2.insert(brd1[i]);
					}
				}
				if (i >= N) break;
			}
			if (i >= N || j >= M) break;

            // najdem odkial kam su rovnaki
            int range1, range2;
            for (range1 = 1; i + 1 < N; i++, range1++) {
                if (have1.find(brd1[i+1]) == have1.end()) break;
            }
            for (range2 = 1; j + 1 < M; j++, range2++) {
                if (have2.find(brd2[j+1]) == have2.end()) break;
            }
            res += (((long long)range1) * range2);
            if (i >= N - 1) break;
            i++;
            needs2.insert(brd1[i]);
			have1.insert(brd1[i]);
        }

        printf("%lld\n", res);
/*
        for (i = 0; i < N; i++) fprintf(stderr, " %d", brd1[i]);
        fprintf(stderr, "\n");
        for (i = 0; i < M; i++) fprintf(stderr, " %d", brd2[i]);
        fprintf(stderr, "\n");
*/
	}
	return 0;
}


#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <cstring>

using namespace std;

#define sz size()
#define pb push_back
#define len length()
#define clr clear()
#define FOR(i,a,b) for(i=a;i<b;i++)
#define FORR(i,n) for(i=0;i<n;i++)
#define is_digit(c) ('0'<=(c) && (c)<='9')

#define eps 0.0000001
#define PI  3.14159265359
#define inf 1999888777

map<long long,int> map1,map2;
long long board1[1000555],board2[1000555];
long long niz1[1000555],niz2[1000555],niz1h1[1000555],niz1h2[1000555],niz1h3[1000555],niz2h1[1000555],niz2h2[1000555],niz2h3[1000555];

int main() {

    FILE *ff = fopen("_magic_pairs.txt", "r"), *gg = fopen("_magic_pairs_output.txt", "w");

    int tt,ttt;

    long long n,m,i,q,x1,x2,a1,a2,b1,b2,c1,c2,r1,r2,mx,mn,h1,h2,h3,br1,br2,res;

    fscanf(ff,"%d", &ttt);
    for(tt=1; tt<=ttt; tt++) {

        fprintf(gg,"Case #%d: ", tt);

        map1.clear();
        map2.clear();

        fscanf(ff,"%lld%lld", &n, &m);
        fscanf(ff,"%lld%lld%lld%lld%lld", &x1, &a1, &b1, &c1, &r1);
        fscanf(ff,"%lld%lld%lld%lld%lld", &x2, &a2, &b2, &c2, &r2);

        //printf("ok\n");

        board1[0] = x1;
        board2[0] = x2;
        mx = max(n,m);
        for(i=1; i<mx; i++) {
            if (i<n) {
                board1[i] = (a1 * board1[(i-1+n)%n] + b1 * board2[(i-1+m)%m] + c1) % r1;
            }
            if (i<m) {
                board2[i] = (a2 * board1[(i-1+n)%n] + b2 * board2[(i-1+m)%m] + c2) % r2;
            }
        }

        //Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1, for 0 < i < N
        //Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2, for 0 < i < M

        //printf("ok\n");

        br1=0;

        h1 = 0;
        h2 = 0;
        h3 = 0;
        for(i=0; i<n; i++) {
            //printf("---> %lld\n", board1[i]);
            q = board1[i];
            if (map1.count(q) == 0) {
                h1 += q + (q-3) + 5*(q-1);
                h2 += q + 3*(q-3) + 3*(q+3);
                h3 += 2*q + 3*(q+7) + 5*(q+3);

                br1++;

                niz1[br1] = 0;

                niz1h1[br1] = h1;
                niz1h2[br1] = h2;
                niz1h3[br1] = h3;

                map1[q] = 1;
            }

            niz1[br1]++;
        }

        br2=0;

        h1 = 0;
        h2 = 0;
        h3 = 0;
        for(i=0; i<m; i++) {
            //printf("~~~> %lld\n", board2[i]);
            q = board2[i];
            if (map2.count(q) == 0) {
                h1 += q + (q-3) + 5*(q-1);
                h2 += q + 3*(q-3) + 3*(q+3);
                h3 += 2*q + 3*(q+7) + 5*(q+3);

                br2++;

                niz2h1[br2] = h1;
                niz2h2[br2] = h2;
                niz2h3[br2] = h3;

                niz2[br2] = 0;

                map2[q] = 1;
            }

            niz2[br2]++;
        }

        res = 0;
        mn = min(br1,br2);
        for(i=1; i<=mn; i++) {

            //printf("%lld -> %lld %lld\n", i, niz1[i], niz2[i]);

            if (niz1h1[i] == niz2h1[i] && niz1h2[i] == niz2h2[i] && niz1h3[i] == niz2h3[i]) {
                res += niz1[i] * niz2[i];
            }
        }

        fprintf(gg,"%lld\n", res);
    }


    return 0;
}



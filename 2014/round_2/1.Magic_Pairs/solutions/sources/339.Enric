#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define x first
#define y second
#define PB push_back
#define REP(i,n) for (int i = 0; i < int(n); ++i)
#define FORE(i,a,b) for (int i = int(a); i <= int(b); ++i)
#define debug(x) cerr << #x << " = " << x << endl;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<bool> Vb;
typedef vector<Vb> Mb;
typedef vector<char> Vc;
typedef vector<Vc> Mc;
typedef vector<int> Vi;
typedef vector<Vi> Mi;
typedef vector<ll> Vll;
typedef vector<Vll> Mll;
typedef vector<P> Vp;
typedef vector<Vp> Mp;
typedef vector<string> Vs;
typedef vector<Vs> Ms;

typedef queue<int> Q;
typedef priority_queue<int> PQ;

template <class Ta, class Tb> inline Tb cast(Ta a) {stringstream ss; ss << a; Tb b; ss >> b; return b; };

const double EPS = 1e-9;
const ll INF = 1000000000000000000LL;
const int diri[8] = { -1, 0, 1, 0, -1, 1, 1, -1 };
const int dirj[8] = { 0, 1, 0, -1, 1, 1, -1, -1 };

vector<ll> a,b;
ll n,m, x1,x2, a1,a2,b1,b2,c1,c2,r1,r2;

void print(set<ll>& s){
    cerr << "       _SET = ";
    for (set<ll>::iterator it=s.begin(); it!=s.end();++it) {
        cerr << *it << " ";
    }
    cerr << endl;
}

int main() {
    int nt; cin >> nt;
    for (int cas=1;cas<=nt;++cas) {
        cin >> n >> m;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        a = vector<ll>(n);
        b = vector<ll>(m);
        a[0] = x1;
        b[0] = x2;
        for (int i=1;i<max(n,m);++i) {
            if (i<n) a[i] = (a1 * a[(i-1) % n] + b1 * b[(i-1) % m] + c1) % r1;
            if (i<m) b[i] = (a2 * a[(i-1) % n] + b2 * b[(i-1) % m] + c2) % r2;
        }
        /*cerr << " a = ";
        for (int i=0;i<n;++i) cerr << a[i] << " "; cerr << endl;
        cerr << " b = ";
        for (int i=0;i<m;++i) cerr << b[i] << " "; cerr << endl;*/
        
        ll ans = 0;
        set<ll> sa, sb, fa, fb;
        //sa, sb numbers contained in A[0..i] and B[0..i]
        //fa, fb numbers to be found on A and B.
        sa.insert(a[0]);
        sb.insert(b[0]);
        if (a[0]!=b[0]) {
            fa.insert(b[0]);
            fb.insert(a[0]);
        }
        int i = 0, j = 0;
        while(i<n and j<m) {
            //cerr << " #IT " << i << ", " << j << endl;
            //print(sa); print(sb);
            if (!fb.empty()) {
                //cerr << "   @ FB NOT EMPTY" << endl;
                fb.erase(b[j]);
                sb.insert(b[j]);
                if (!sa.count(b[j])) fa.insert(b[j]);
                if (!fb.empty()) ++j;
                //if (fb.empty()) cerr << "       -> now fb empty!" << endl;
            }
            else if(!fa.empty()) {
                //cerr << "   @ FA NOT EMPTY" << endl;
                fa.erase(a[i]);
                sa.insert(a[i]);
                if (!sb.count(a[i])) fb.insert(a[i]);
                if (!fa.empty()) ++i;
                //if (fa.empty()) cerr << "       -> now fa empty!" << endl;
            }
            else { //sets are equal
                //cerr << "   @ BOTH F empty. SETS ARE EQUAL" << endl;
                ll di=1, dj=1;
                //cerr << "add from "<< i <<", " << j << endl;
                while(i+1<n and sa.count(a[i+1])) {
                    ++i;
                    ++di;
                }
                while(j+1<m and sb.count(b[j+1])) {
                    ++j;
                    ++dj;
                }
                //cerr << " to " << i << ", " << j<<endl;
                //cerr << "   + " << di*dj << endl;
                ans+=di*dj;
                ++i; //or ++j? irrelevant
                if (i<n) {
                    fa.erase(a[i]);
                    sa.insert(a[i]);
                    if (!sb.count(a[i])) fb.insert(a[i]);
                }
            }
            
        }
        //cerr << "Finished the doubleindex at " << i <<", " << j << " and ans = " << ans << endl;
        //cerr << "EMPTY = " << int(fa.empty()) << ", " << int(fb.empty()) << endl;
        /*while(i<n and fb.empty()) { //all findings on B must have been done
            cerr << "   #A IT WITH i= " << i << endl;
            if (!sb.count(a[i])) break; //if its not on B, we wont find it.
            fa.erase(a[i]);
            if (fa.empty()) {
                cerr << "  +1A!" << endl;
                ++ans;
            }
            ++i;
        }
        
        while(j<m and fa.empty()) {
            cerr << "   #B IT WITH j= " << j << endl;
            if (!sa.count(b[j])) break; //if its not on B, we wont find it.
            fb.erase(b[j]);
            if (fb.empty()) {
                cerr << "  +1B!" << endl;
                ++ans;
            }
            ++j;
        }*/
        cout << "Case #" << cas << ": " << ans << endl;
    }
}

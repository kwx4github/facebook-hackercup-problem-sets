import java.io.*;
import java.math.BigInteger;
import java.util.*;
import java.util.Calendar.*;
import static java.lang.Math.*;
import static java.util.Arrays.*;

public class Main{

    double tBeg;

    void run(){
//        try {
//            br = new BufferedReader(new InputStreamReader(System.in));
//            out = new PrintWriter(new OutputStreamWriter(System.out));
//            br = new BufferedReader(new FileReader("input.txt"));
//            out = new PrintWriter(new FileWriter("output.txt"));


        boolean oj = System.getProperty("ONLINE_JUDGE") != null;
        Locale.setDefault(Locale.US);
        try{
            br  = new BufferedReader(new FileReader("dwarf.in" ));
            out = new PrintWriter   (new FileWriter("C:/dwarf.out"));
        }catch(Exception e){
            MLE();
        }
        tBeg = System.currentTimeMillis();
        solve();
//        if( !oj )out.println( "TIME: " + (System.currentTimeMillis() - tBeg ) / 1e3 );
        exit(0);
    }

    void exit( int val ){
        out.close();
        System.exit(val);
    }

    StringTokenizer st;
    BufferedReader br;
    PrintWriter out;

    String readLine(){
        try {
            return br.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    String next(){
        while( st==null || !st.hasMoreElements() )
            st = new StringTokenizer(readLine());
        return st.nextToken();
    }

    int nextInt(){ return Integer.parseInt(next()); }
    long nextLong(){ return Long.parseLong(next()); }
    double nextDouble(){ return Double.parseDouble(next()); }

    void MLE(){
        int[][] arr = new int[1024*1024][]; for( int i = 0; i < 1024*1024; ++i ) arr[i] = new int[1024*1024];
    }

    void TLE(){
        for(;;);
    }

    public static void main(String[] args) {
        new Main().run();

//        new Thread(null, new Runnable() {
//            public void run() {
//                try {
//                    new Main().run();
//                } catch (Exception e) {
//                    int[][] arr = new int[1024*1024][]; for( int i = 0; i < 1024*1024; ++i ) arr[i] = new int[1024*1024];
//                }
//            }
//        }, "LOLOL", 200 * (1<<20)).start();
    }
    ////////////////////////////////////////////////////////////////

    Random rnd = new Random(121221);

    class Rnd{
        Random rnd;
        Rnd(){ rnd = new Random(212122); }
        int nextInt(int a, int b){
            return a + rnd.nextInt(b-a+1);
        }

        long nextLong(long a, long b){
            return a + rnd.nextLong()%(b-a+1);
        }
    }


    long powMod( long a, long p ){
        if( p == 0 ) return 1;
        long ans = powMod( a, p/2 );
        ans = (ans*ans);
        if( p%2==1 ) ans = (ans * a);
        return ans;
    }


    long getAns(){
        int N = nextInt(), M= nextInt();
        long x1= nextInt(), a1= nextInt(), b1= nextInt(), c1= nextInt(), r1= nextInt();
        long x2= nextInt(), a2= nextInt(), b2= nextInt(), c2= nextInt(), r2= nextInt();
        long [] Board1 = new long[max(N,M)+100];
        long [] Board2 = new long[max(N,M)+100];
        Board1[0] = x1;
        Board2[0] = x2;
        for( int i = 1; i < Board1.length; ++i ){
            Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
            Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
        }

        long h = 0;
        HashSet<Long> used = new HashSet<>();
        HashMap<Long,Integer> hm = new HashMap<>();
        for( int i = 0; i < M; ++i ){
            if( !used.contains(Board2[i]) ){
                h = h + powMod(2011,Board2[i]);
            }
            used.add(Board2[i]);

            Long key = h;
            if( hm.containsKey(key) )
                hm.put( key, hm.get(key) + 1 );
            else
                hm.put( key,               1 );
        }

        long ans = 0;
        h = 0;
        used = new HashSet<>();
        for( int i = 0; i < N; ++i ){
            if( !used.contains(Board1[i]) ){
                h = h + powMod(2011,Board1[i]);
            }
            used.add(Board1[i]);

            Integer add = hm.get(h);
            if( add != null ) ans += add;
        }
        return ans;
    }


    void solve(){
        int t = nextInt();
        for( int i  = 1; i <= t; ++i ){
            out.printf("Case #%d: %d\n", i, getAns());
        }
    }






}
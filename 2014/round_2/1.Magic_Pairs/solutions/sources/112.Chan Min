#include <stdio.h>
#include <vector>
#include <algorithm>

using namespace std;

int dat[2][2000000];

int vis1[4000000];
int cnt1[4000000];
int vis2[4000000];

int main()
{
	int T;
	scanf("%d",&T);
	for(int testcase = 1; testcase <= T; testcase ++) {
		int n,m;
		scanf("%d%d",&n,&m);
		int x[2],a[2],b[2],c[2],r[2];
		for( int i = 0; i < 2; i++)
			scanf("%d%d%d%d%d",&x[i],&a[i],&b[i],&c[i],&r[i]);
		dat[0][0] = x[0];
		dat[1][0] = x[1];
		for(int i = 1; i < max(n,m); i++) {
			dat[0][i] = (a[0] * (long long)dat[0][(i-1) % n] + b[0] * (long long)dat[1][(i-1) % m] + c[0]) % r[0];
			dat[1][i] = (a[1] * (long long)dat[0][(i-1) % n] + b[1] * (long long)dat[1][(i-1) % m] + c[1]) % r[1];
		}
		vector<int> all;
		for(int i = 0; i < n; i++) all.push_back(dat[0][i]);
		for(int i = 0; i < m; i++) all.push_back(dat[1][i]);
		sort(all.begin(), all.end());
		all.erase(unique(all.begin(),all.end()),all.end());
		for(int i = 0; i < n; i++) {
			dat[0][i] = lower_bound(all.begin(),all.end(),dat[0][i]) - all.begin();
		}
		for(int i = 0; i < m; i++) {
			dat[1][i] = lower_bound(all.begin(),all.end(),dat[1][i]) - all.begin();
		}
		memset(vis1,-1,sizeof(vis1[0]) * all.size());
		memset(vis2,-1,sizeof(vis2[0]) * all.size());
		int lp = -1;
		int cc = 0;
		for(int i = 0; i < n; i++) {
			if (vis1[dat[0][i]] == -1) {
				vis1[dat[0][i]] = ++cc;
				cnt1[lp = dat[0][i]] = 1;
			} else {
				cnt1[lp]++;
			}
		}
		
		int curSetCnt = 0;
		int minSetCnt = 0;
		int lastCount1 = 0;
		long long ans = 0;
		for(int i = 0; i < m; i++) {
			if (vis1[dat[1][i]] == -1) break;
			if (minSetCnt < vis1[dat[1][i]]) {
				minSetCnt = vis1[dat[1][i]];
				lastCount1 = cnt1[dat[1][i]];
			}
			if (vis2[dat[1][i]] == -1) {
				vis2[dat[1][i]] = i;
				curSetCnt++;
			}
			if (curSetCnt == minSetCnt) {
				ans += lastCount1;
			}
		}

		printf("Case #%d: %lld\n", testcase, ans);
	}
	return 0;
}

#include <cassert>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <climits>
#include <cstddef>
#include <cctype>
#include <cmath>
#include <cstring>
#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <iterator>
#include <numeric>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <bitset>
#include <list>
#include <string>
#include <functional>
#include <utility>
using namespace std;
typedef long long llint;
int const N = 1000000;
int n, m;
int s1[N], s2[N];
inline int mult(int x, int y, int z)
{
    return static_cast <int>((llint(x) * y) % z);
}
inline int add(int x, int y, int z)
{
    return (x + y) % z;
}
void readin()
{
    int x1, a1, b1, c1, r1;
    int x2, a2, b2, c2, r2;
    scanf("%d%d", &n, &m);
    scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
    scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
    s1[0] = x1;
    s2[0] = x2;
    for (int i = 1; i < max(n, m); ++i)
    {
        if (i < n)
        {
            s1[i] = add(add(mult(a1, s1[(i - 1) % n], r1), mult(b1, s2[(i - 1) % m], r1), r1), c1, r1);
        }
        if (i < m)
        {
            s2[i] = add(add(mult(a2, s1[(i - 1) % n], r2), mult(b2, s2[(i - 1) % m], r2), r2), c2, r2);
        }
    }
}
void process(int s[], int n, map <int, int> &color_pos, vector <int> &first_pos)
{
    for (int i = 0; i < n; ++i)
    {
        if (color_pos.find(s[i]) == color_pos.end())
        {
            color_pos[s[i]] = i;
            first_pos.push_back(i);
        }
    }
}
llint solve()
{
    llint ret = 0;
    map <int, int> color_pos1, color_pos2;
    vector <int> first_pos1, first_pos2;
    process(s1, n, color_pos1, first_pos1);
    process(s2, m, color_pos2, first_pos2);
    int i = 0, j = 0;
    while (i < int(first_pos1.size()) && j < int(first_pos2.size()))
    {
        int x = first_pos1[i], y = first_pos2[j];
        if (s1[x] != s2[y])
        {
            if (color_pos1.find(s2[j]) == color_pos1.end() || color_pos2.find(s1[i]) == color_pos2.end())
            {
                goto END;
            }
            int t1 = color_pos1[s2[y]];
            int t2 = color_pos2[s1[x]];
            while (true)
            {
                int p1 = t1, p2 = t2;
                while (first_pos1[i] != t1)
                {
                    if (color_pos2.find(s1[first_pos1[i]]) == color_pos2.end())
                    {
                        goto END;
                    }
                    p2 = max(p2, color_pos2[s1[first_pos1[i]]]);
                    ++i;
                }
                while (first_pos2[j] != t2)
                {
                    if (color_pos1.find(s2[first_pos2[j]]) == color_pos1.end())
                    {
                        goto END;
                    }
                    p1 = max(p1, color_pos1[s2[first_pos2[j]]]);
                    ++j;
                }
                if (p1 <= t1 && p2 <= t2)
                {
                    break;
                }
                t1 = max(t1, p1);
                t2 = max(t2, p2);
            }
        }
        ret += llint((i + 1 < int(first_pos1.size()) ? first_pos1[i + 1] : n) - first_pos1[i])
            * llint((j + 1 < int(first_pos2.size()) ? first_pos2[j + 1] : m) - first_pos2[j]);
        ++i;
        ++j;
    }
END:
    ;
    return ret;
}
int main()
{
    int tc;
    scanf("%d", &tc);
    for (int cc = 1; cc <= tc; ++cc)
    {
        readin();
        printf("Case #%d: %I64d\n", cc, solve());
    }
    return 0;
}

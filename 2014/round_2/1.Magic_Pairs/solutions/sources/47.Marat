using System;
using System.Collections.Generic;
using System.Linq;

class App {
	static bool _isDebug = true;
	
	static void Debug(object o) { Debug(o.ToString(), new object[0]); }
	static void Debug(string str, params object[] ps) {
		if (!_isDebug) return;
		Console.WriteLine("Debug: " + string.Format(str, ps));
	}
	
	static string GetMagicPairs(long[] board1, long[] board2) {
		var n = board1.Length;
		var m = board2.Length;
		
		var inSet1 = new HashSet<long>();
		var inSet2 = new HashSet<long>();
		var inBoth = new HashSet<long>();
		
		var i = 0;
		inSet1.Add(board1[0]);
		var j = -1;
		
		var result = 0L;
		while (i < n && j < m) {
			while ((inSet1.Count > 0 && j + 1 < m) || (inSet2.Count > 0 && i + 1 < n)) {	
				var increase2 = inSet1.Count > 0 && j + 1 < m;
				if (increase2) {
					j++;
					var next = board2[j];
					if (inBoth.Contains(next) || inSet2.Contains(next)) continue;
					else if (inSet1.Contains(next)) {
						inSet1.Remove(next);
						inBoth.Add(next);
					} else {
						inSet2.Add(next);
					}
				} else {
					i++;
					var next = board1[i];
					if (inBoth.Contains(next) || inSet1.Contains(next)) continue;
					else if (inSet2.Contains(next)) {
						inSet2.Remove(next);
						inBoth.Add(next);
					} else {
						inSet1.Add(next);
					}
				}
			}
			if (inSet1.Count == 0 && inSet2.Count == 0) {
				var canTakeIn1 = 1L;
				var canTakeIn2 = 1L;
				while (i + 1 < n && inBoth.Contains(board1[i + 1])) { i++; canTakeIn1++; }
				while (j + 1 < m && inBoth.Contains(board2[j + 1])) { j++; canTakeIn2++; }
				result += canTakeIn1 * canTakeIn2;
				
				if (i + 1 == n) break;
				i++;
				inSet1.Add(board1[i]);
			} else break;
		}
		return result.ToString();
	}
	
	static string Solve() {
		var s = Console.ReadLine().Split(' ');
		var n = int.Parse(s[0]);
		var m = int.Parse(s[1]);
		
		s = Console.ReadLine().Split(' ');
		var x1 = int.Parse(s[0]);
		var a1 = int.Parse(s[1]);
		var b1 = int.Parse(s[2]);
		var c1 = int.Parse(s[3]);
		var r1 = int.Parse(s[4]);
		s = Console.ReadLine().Split(' ');
		var x2 = int.Parse(s[0]);
		var a2 = int.Parse(s[1]);
		var b2 = int.Parse(s[2]);
		var c2 = int.Parse(s[3]);
		var r2 = int.Parse(s[4]);
		
		var board1 = new long[n];
		var board2 = new long[m];
		board1[0] = x1;
		board2[0] = x2;
		
		int mx = Math.Max(n, m);
		for (var i = 1 ; i < mx ; i++) {
			if (i < n) board1[i] = (a1 * board1[(i -1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
			if (i < m) board2[i] = (a2 * board1[(i -1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;
		}
		
		return GetMagicPairs(board1, board2);
	}

	static void Main() {		
		try {
		var t = int.Parse(Console.ReadLine());
		
		for (var i = 1 ; i <= t ; i++) {
			Console.WriteLine("Case #{0}: {1}", i, Solve());
		}
		} catch (Exception e) {
			Console.WriteLine(e);
		}
	}
}
program magicPairs;
uses math;

var	arr: array[ 1..2000000 ] of longInt;
	arr_n: longInt;
	
procedure qsort( l, r: longInt );
var	i, j, t, med: longInt;
begin
	if ( l < r ) then
	begin
		i := l;
		j := r;
		med := arr[ l + random(r-l+1) ];
		while ( i <= j ) do
		begin
			while ( arr[i] < med ) do
				inc( i );
			while ( arr[j] > med ) do
				dec( j );
				
			if ( i <= j ) then
			begin
				t := arr[i];
				arr[i] := arr[j];
				arr[j] := t;
				
				inc( i );
				dec( j );
			end;
		end;
		
		qsort( l, j );
		qsort( i, r );
	end;
end;

function find( x: longInt ): longInt;
var	l, r, c: longInt;
begin
	l := 1;
	r := arr_n;
	while ( l < r ) do
	begin
		c := ( l + r ) div 2;
		
		if ( arr[c] < x ) then
			l := c + 1
		else
			r := c;
	end;
	
	exit( l );
end;

var	t, tt, n, m, a1, a2, b1, b2, c1, c2, r1, r2, i, j, ii, jj: longInt;
	ans: int64;
	a, b, firstA, firstB: array[ 0..2000000 ] of longInt;
	fail: boolean;

begin
	readln( t );
	for tt := 1 to t do
	begin
		readln( n, m );
		readln( a[0], a1, b1, c1, r1 );
		readln( b[0], a2, b2, c2, r2 );
		
		for i := 1 to max(n, m) do
		begin
			a[i] := ( int64(a1) * a[ (i-1) mod n ] + int64(b1) * b[ (i-1) mod m ] + c1 ) mod r1;
			b[i] := ( int64(a2) * a[ (i-1) mod n ] + int64(b2) * b[ (i-1) mod m ] + c2 ) mod r2;
		end;
		
		for i := n downTo 1 do
			a[i] := a[i-1];
			
		for i := m downTo 1 do
			b[i] := b[i-1];
			
		for i := 1 to n do
			arr[i] := a[i];
		
		for i := 1 to m do
			arr[i+n] := b[i];
			
		qsort( 1, n + m );
		
		arr_n := 1;
		for i := 1 to n + m do
			if ( arr[i] <> arr[arr_n] ) then
			begin
				inc( arr_n );
				arr[arr_n] := arr[i];
			end;
			
		for i := 1 to n do
			a[i] := find( a[i] );
			
		for i := 1 to m do
			b[i] := find( b[i] );
			
		for i := 1 to arr_n do
		begin
			firstA[i] := -1;
			firstB[i] := -1;
		end;
		
		for i := 1 to n do
			if ( firstA[ a[i] ] = -1 ) then
				firstA[ a[i] ] := i;
				
		for i := 1 to m do
			if ( firstB[ b[i] ] = -1 ) then
				firstB[ b[i] ] := i;
		
		ans := 0;
		fail := false;
		i := 0;
		j := 0;
		while ( i < n ) and ( j < m ) do
		begin
			ii := i + 1;
			jj := j;
			while ( i < ii ) or ( j < jj ) do
			begin
				if ( i < ii ) then
				begin
					inc( i );
					
					if ( firstB[ a[i] ] = -1 ) then
					begin
						fail := true;
						break;
					end;
					
					jj := max( jj, firstB[ a[i] ] );
				end
				else
				begin
					inc( j );
					
					if ( firstA[ b[j] ] = -1 ) then
					begin
						fail := true;
						break;
					end;
					
					ii := max( ii, firstA[ b[j] ] );
				end;
			end;
			
			if ( fail ) then
				break;
				
			ii := i;
			while ( ii < n ) and ( firstA[ a[ii+1] ] <> ii + 1 ) do
				inc( ii );
				
			jj := j;
			while ( jj < m ) and ( firstB[ b[jj+1] ] <> jj + 1 ) do
				inc( jj );
				
			inc( ans, (ii - i + 1) * int64(jj - j + 1) );
			
			i := ii;
			j := jj;
		end;
	
		writeln( 'Case #', tt, ': ', ans );
	end;
end.

// @author peter50216
// #includes {{{
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<functional>
#include<math.h>
#include<assert.h>
#include<stdarg.h>
#include<time.h>
#include<limits.h>
#include<ctype.h>
#include<string>
#include<map>
#include<set>
#include<queue>
#include<algorithm>
#include<vector>
#include<iostream>
#include<sstream>
using namespace std;
// }}}
// #defines {{{
#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(),(x).end()
#define REP(i,n) for(int i=0;i<(n);i++)
#define REP1(i,a,b) for(int i=(a);i<=(b);i++)
#define REPL(i,x) for(int i=0;x[i];i++)
#define PER(i,n) for(int i=(n)-1;i>=0;i--)
#define PER1(i,a,b) for(int i=(a);i>=(b);i--)
#define RI(x) scanf("%d",&x)
#define DRI(x) int x;RI(x)
#define RII(x,y) scanf("%d%d",&x,&y)
#define DRII(x,y) int x,y;RII(x,y)
#define RIII(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define DRIII(x,y,z) int x,y,z;RIII(x,y,z)
#define RS(x) scanf("%s",x)
#define PI(x) printf("%d\n",x)
#define PIS(x) printf("%d ",x)
#define CASET int ___T,cas=1;scanf("%d ",&___T);while(___T--)
#define CASEN0(n) int cas=1;while(scanf("%d",&n)!=EOF&&n)
#define CASEN(n) int cas=1;while(scanf("%d",&n)!=EOF)
#define MP make_pair
#define PB push_back
#define MS0(x) memset(x,0,sizeof(x))
#define MS1(x) memset(x,-1,sizeof(x))
#define SEP(x) ((x)?'\n':' ')
#define F first
#define S second
#ifdef ONLINE_JUDGE
#define FILEIO(x) freopen(#x ".in","r",stdin);freopen(#x ".out","w",stdout);
#define FILEIOS freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#else
#define FILEIO(x) ;
#define FILEIOS ;
#endif
typedef pair<int,int> PII;
typedef long long LL;
typedef unsigned long long ULL;
// }}}

int n[2];
int bo[2][1010000];
int pre[2][1010000];
int cnt[2][1010000];
int main(){
    CASET{
        RII(n[0],n[1]);
        DRIII(x1,a1,b1);
        DRII(c1,r1);
        DRIII(x2,a2,b2);
        DRII(c2,r2);
        bo[0][0]=x1;
        bo[1][0]=x2;
        REP1(i,1,max(n[0]-1,n[1]-1)){
            if(i<n[0])bo[0][i]=(bo[0][i-1]*(LL)a1+bo[1][(i-1)%n[1]]*(LL)b1+c1)%r1;
            if(i<n[1])bo[1][i]=(bo[0][(i-1)%n[0]]*(LL)a2+bo[1][i-1]*(LL)b2+c2)%r2;
        }
        REP(k,2){
            set<int> XD;
            REP(i,n[k]){
                if(!XD.count(bo[k][i])){
                    pre[k][i]=i;
                    cnt[k][i]=1;
                }else{
                    pre[k][i]=pre[k][i-1];
                    cnt[k][pre[k][i]]++;
                }
                XD.insert(bo[k][i]);
                //printf("k=%d i=%d %d %d %d\n",k,i,bo[k][i],pre[k][i],cnt[k][pre[k][i]]);
            }
        }
        LL ans=0;
        set<int> d0,d1,dd;
        int i=0,j=0;
        while(i<n[0]||j<n[1]){
            //printf("i=%d j=%d\n",i,j);
            //printf("d0: ");FOR(it,d0)printf("%d ",*it);puts("");
            //printf("d1: ");FOR(it,d1)printf("%d ",*it);puts("");
            //printf("dd: ");FOR(it,dd)printf("%d ",*it);puts("");
            
            bool f=0;
            if(d0.empty()&&d1.empty()){
                if(i&&j){
                    ans+=cnt[0][pre[0][i-1]]*(LL)cnt[1][pre[1][j-1]];
                }
                if(i<n[0])f=1;
                else f=0;
            }else{
                if(!d0.empty()){
                    if(j==n[1])break;
                    f=0;
                }else{
                    if(i==n[0])break;
                    f=1;
                }
            }
            if(f==0){
                if(!dd.count(bo[1][j])){
                    if(d0.count(bo[1][j])){
                        d0.erase(bo[1][j]);
                        dd.insert(bo[1][j]);
                    }else{
                        d1.insert(bo[1][j]);
                    }
                }
                j++;
                while(j<n[1]&&pre[1][j]!=j)j++;
            }else{
                if(!dd.count(bo[0][i])){
                    if(d1.count(bo[0][i])){
                        d1.erase(bo[0][i]);
                        dd.insert(bo[0][i]);
                    }else{
                        d0.insert(bo[0][i]);
                    }
                }
                i++;
                while(i<n[0]&&pre[0][i]!=i)i++;
            }
        }
        if(d0.empty()&&d1.empty()){
            ans+=cnt[0][pre[0][i-1]]*(LL)cnt[1][pre[1][j-1]];
        }
        printf("Case #%d: %I64d\n",cas++,ans);
    }
}
// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread


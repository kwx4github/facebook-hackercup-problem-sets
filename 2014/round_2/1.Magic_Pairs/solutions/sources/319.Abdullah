using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HackerCupA
{
    class Generator
    {
        public int X;
        public int A;
        public int B;
        public int C;
        public int R;

        public Generator(string str)
        {
            var tok = str.Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            X = int.Parse(tok[0]);
            A = int.Parse(tok[1]);
            B = int.Parse(tok[2]);
            C = int.Parse(tok[3]);
            R = int.Parse(tok[4]);
        }

    }
    class Program
    {
        static void Main(string[] args)
        {
            using (StreamReader sr = new StreamReader("magic_pairs.txt")){
                using (StreamWriter sw = new StreamWriter("output.txt"))
                {
                    int T = int.Parse(sr.ReadLine());
                    for (int i = 1; i < T + 1; i++)
                    {
                        var tok = sr.ReadLine().Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                        int N = int.Parse(tok[0]);
                        int M = int.Parse(tok[1]);
                        Generator G1 = new Generator(sr.ReadLine());
                        Generator G2 = new Generator(sr.ReadLine());
                        long[] B1 = new long[N];
                        long[] B2 = new long[M];
                        int MN = Math.Max(N, M);
                        B1[0] = G1.X;
                        B2[0] = G2.X;
                        for (int j = 1; j < MN; j++)
                        {
                            if (j < N) B1[j] = (G1.A * B1[(j - 1) % N] + G1.B * B2[(j - 1) % M] + G1.C) % G1.R;
                            if (j < M) B2[j] = (G2.A * B1[(j - 1) % N] + G2.B * B2[(j - 1) % M] + G2.C) % G2.R;
                        }
                        Dictionary<long,int> dic = new Dictionary<long, int>();
                        int cnt = 0;
                        List<int> indices = new List<int>();
                        for (int j = 0; j < N; j++)
                        {
                            if (!dic.ContainsKey(B1[j]))
                            {
                                dic.Add(B1[j],cnt);
                                indices.Add(j);
                                ++cnt;
                            }
                        }
                        indices.Add(N);
                        bool[] flag = new bool[cnt];
                        int cnt2 = -1;
                        int max2 = -1;
                        long res = 0;
                        for (int j = 0; j < M; j++)
                        {
                            if (!dic.ContainsKey(B2[j])) break;
                            int t1 = dic[B2[j]];
                            if (!flag[t1])
                            {
                                flag[t1] = true;
                                max2 = Math.Max(t1, max2);
                                cnt2++;
                            }
                            if (cnt2==max2)
                            {
                                res = res + indices[cnt2 + 1] - indices[cnt2];
                            }

                        }
                        sw.WriteLine("Case #" + i + ": " + res);
                        Console.WriteLine("Case #" + i + ": " + res);
                    }

                }
            }
            
        }
    }
}

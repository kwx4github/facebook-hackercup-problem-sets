#include <string>
#include <cstring>
#include <vector>
#include <cmath> 
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
 
using namespace std;
 
#define REP(a,n) for(int a=0; a<(n); ++a)
#define FOR(a,b,c) for(int a=(b); a<=(c); ++a)
#define FORD(a,b,c) for(int a=(b); a>=(c); --a)
#define INIT(i,v) __typeof(v) i = (v)
#define FOREACH(i,v) for(INIT(i, (v).begin()); i!=(v).end(); ++i)
#define MP make_pair
#define PB push_back
 
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long LL;
 
template<class T>
inline int size(const T&t){return t.size();}

#define INF 1000000000
 
//////////////////////////////////////////

int N[2];
int x1, a1, b1, c1, r1;
int x2, a2, b2, c2, r2;

int tab[2][1000009];
int skad_ok[2][1000009], dokad_wcz[1000009];

map<int, int> first[2];

LL licz() {
  tab[0][0] = x1;
  tab[1][0] = x2;
  FOR(i, 1, max(N[0], N[1])-1) {
    tab[0][i] = (a1 * (LL)tab[0][(i-1) % N[0]] + b1 * (LL)tab[1][(i-1) % N[1]] + c1) % r1;
    tab[1][i] = (a2 * (LL)tab[0][(i-1) % N[0]] + b2 * (LL)tab[1][(i-1) % N[1]] + c2) % r2;
  }
  REP(a, 2)
    REP(i, N[a])
      first[!a][tab[a][i]] = INF;
  REP(a, 2)
    FORD(i, N[a]-1, 0)
      first[a][tab[a][i]] = i;
  REP(a, 2)
    REP(i, N[a])
      skad_ok[a][i] = max(i ? skad_ok[a][i-1] : 0, first[!a][tab[a][i]]);
  LL res = 0;
  int j = -1;
  REP(i, N[0]) {
    while (j+1<N[1] && skad_ok[1][j+1]<=i)
      ++j;
    dokad_wcz[i] = j;
    res += max(0, dokad_wcz[i]-skad_ok[0][i]+1);
  }
  return res;
}

int main() {
  int TT;
  scanf("%d", &TT);
  REP(tt, TT) {
    scanf("%d%d", &N[0], &N[1]);
    scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
    scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
    printf("Case #%d: %lld\n", tt+1, licz());
    fprintf(stderr, "%d\n", tt+1);
  }
}



#include <bits/stdc++.h>
using namespace std;

long long a[1000100], b[1000100], a1, b1, c1, r1, a2, b2, c2, r2;
int m, n, cntA[1000100], cntB[1000100];
map <long long,int> posA, posB;
set <long long> s;

void toggle(int val)
{
	if (s.count(val)) s.erase(val);
	else s.insert(val);
}

int main()
{
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);
	
	int test;
	cin >> test;
	for (int idTest = 1; idTest <= test; idTest++)
	{
		cerr << idTest << endl;
		cin >> m >> n;
		cin >> a[0] >> a1 >> b1 >> c1 >> r1;
		cin >> b[0] >> a2 >> b2 >> c2 >> r2;
		
		posA.clear();
		posB.clear();
		s.clear();
		
		for (int i = 1; i < max(m, n); i++) 
		{
			if (i < m) a[i] = (a[(i - 1) % m] * a1 + b[(i - 1) % n] * b1 + c1) % r1;
			if (i < n) b[i] = (a[(i - 1) % m] * a2 + b[(i - 1) % n] * b2 + c2) % r2;
		}
		
		int A = 0, B = 0;
		for (int i = 0; i < m; i++)
			if (!posA.count(a[i]))
			{
				a[A] = a[i];
				cntA[A] = 1;
				posA[a[i]] = A++;
			}
			else cntA[A - 1]++;
			
		for (int i = 0; i < n; i++)
			if (!posB.count(b[i]))
			{
				b[B] = b[i];
				cntB[B] = 1;
				posB[b[i]] = B++;
			}
			else cntB[B - 1]++;
		
		long long ans = 0;
		int i = -1, j = -1;
		while (i < A && j < B)
		{
			if (i <= j)
			{
				if (++i == A) break;
				if (!posB.count(a[i])) break;
				toggle(a[i]);
				if (posB[a[i]] > j)
					while (j < 0 || b[j] != a[i]) toggle(b[++j]);
			}
			else
			{
				if (++j == B) break;
				if (!posA.count(b[j])) break;
				toggle(b[j]);
				if (posA[b[j]] > i)
					while (i < 0 || a[i] != b[j]) toggle(a[++i]);
			}
			
			if (s.empty()) ans += 1LL * cntA[i] * cntB[j];
		}
		
		cout << "Case #" << idTest << ": " << ans << endl;
	}
}

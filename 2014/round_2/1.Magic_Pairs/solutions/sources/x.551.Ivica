#include <cstdio>
#include <cstdlib>
#include <cstring>

#include <vector>
#include <algorithm>
#include <map>
#include <set>

#define MAX 1000004

using namespace std;
typedef long long ll;

int A[MAX], B[MAX];

inline ll HASH(int x) {
  // return 1341234LL * x * x + 91451345LL * x + 132412;
  return 132441234LL * x * x + 911451345LL * x + 13241421;
}

void generate(int *v, int N, map < ll, int > &cnt) {
  set < int > S;
  ll hash = 0;
  for (int i = 0; i < N; ++i) {
    auto it = S.find(v[i]);
    if (it == S.end()) {
      S.insert(v[i]);
      hash += HASH(v[i]);
    }
    ++cnt[hash];
  }
}


int main(void) {
  int T;
  int N, M, x1, x2, a1, a2, b1, b2, c1, c2;
  int r1, r2;

  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    scanf("%d%d", &N, &M);
    scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
    scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);


    A[0] = x1;
    B[0] = x2;
    for (int i = 1; i < N || i < M; ++i) {
      A[i] = (a1 * A[(i-1) % N] + b1 * B[(i-1) % M] + c1) % r1;
      B[i] = (a2 * A[(i-1) % N] + b2 * B[(i-1) % M] + c2) % r2;
    }

    map < ll, int > AA, BB;
    generate(A, N, AA);
    generate(B, M, BB);

    ll result = 0;
    for (auto it = AA.begin(); it != AA.end(); ++it)
      result += (ll)it->second * BB[it->first];

    printf("Case #%d: %lld\n", t, result);
  }
  return 0;
}

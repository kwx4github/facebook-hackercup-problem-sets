package contest;

import java.util.*;
import java.io.*;
import java.math.*;

public class MagicPairs {
    final static String PROBLEM_NAME = "magic";
    final static String WORK_DIR = "D:\\HackerCup\\" + PROBLEM_NAME + "\\";

    void solve(Scanner sc, PrintWriter pw) {
        int N = sc.nextInt(), M = sc.nextInt();
        long x1 = sc.nextLong(), a1 = sc.nextLong(), b1 = sc.nextLong(), c1 = sc.nextLong(), r1 = sc.nextLong();
        long x2 = sc.nextLong(), a2 = sc.nextLong(), b2 = sc.nextLong(), c2 = sc.nextLong(), r2 = sc.nextLong();

        long[] A = new long[N+1], B = new long[M+1];
        A[0] = x1; B[0] = x2;
        for (int i=1; i < Math.max(N, M); i++) {
            if (i < N) {
                A[i] = (a1 * A[(i-1) % N] + b1 * B[(i-1) % M] + c1) % r1;
            }
            if (i < M) {
                B[i] = (a2 * A[(i-1) % N] + b2 * B[(i-1) % M] + c2) % r2;
            }
        }

        A[N++] = 2000000000;
        B[M++] = 2000000001;

        Set<Long> curA = new HashSet<Long>();
        Set<Long> curB = new HashSet<Long>();
        Set<Long> needInA = new HashSet<Long>();
        Set<Long> needInB = new HashSet<Long>();

        long ans = 0;

        int i = 1, j = 1;
        curA.add(A[0]); curB.add(B[0]);
        if (A[0] != B[0]) {
            needInA.add(B[0]);
            needInB.add(A[0]);
        }

        while (i < N || j < M) {
            while (needInA.size() > 0 || needInB.size() > 0) {
                if (needInA.size() > 0) {
                    if (i == N) {
                        break;
                    }
                    curA.add(A[i]);
                    if (needInA.contains(A[i])) {
                        needInA.remove(A[i]);
                    }
                    if (!curB.contains(A[i])) {
                        needInB.add(A[i]);
                    }
                    i++;
                } else {
                    if (j == M) {
                        break;
                    }
                    curB.add(B[j]);
                    if (needInB.contains(B[j])) {
                        needInB.remove(B[j]);
                    }
                    if (!curA.contains(B[j])) {
                        needInA.add(B[j]);
                    }
                    j++;
                }
            }
            if (needInA.size() > 0 || needInB.size() > 0) {
                break;
            }
            long cntI = 1, cntJ = 1;
            while (i < N && curA.contains(A[i])) {
                cntI++;
                i++;
            }
            while (j < M && curB.contains(B[j])) {
                cntJ++;
                j++;
            }
            ans += cntI * cntJ;
            if (i == N || j == M) {
                break;
            }
            curA.add(A[i]); curB.add(B[j]);
            if (A[i] != B[j]) {
                needInA.add(B[j]);
                needInB.add(A[i]);
            }
            i++; j++;
        }

        pw.println(ans);
    }

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(new FileReader(WORK_DIR + "input.txt"));
        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + "output.txt"));
        int caseCnt = sc.nextInt();
        for (int caseNum=0; caseNum<caseCnt; caseNum++) {
            System.out.println("Processing test case " + (caseNum + 1));
            pw.print("Case #" + (caseNum+1) + ": ");
            new MagicPairs().solve(sc, pw);
        }
        pw.flush();
        pw.close();
        sc.close();
    }
}

#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

typedef long long int64;
//#define double long double
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const double EPS = 1E-9;
const double EPS_ANG = 1E-16;
const double PI = acos((double)0) * 2;

#define forn(i, n)  for (int i = 0; i < int(n); ++i)
#define ford(i, n)  for (int i=int(n) - 1; i >= 0; --i)
#define fore(i, l, r)  for (int i = int(l); i < int(r); ++i)
#define all(a)  a.begin(), a.end()
#define fs  first
#define sc  second
#define mp  make_pair
#define pb  push_back


const int MAXN = 1000 * 1000 + 100;


int n[2], initial[2], coeff0[2], coeff1[2], summand[2], modulo[2];


void read() {
	forn(i, 2)
		cin >> n[i];
	forn(i, 2)
		cin >> initial[i] >> coeff0[i] >> coeff1[i] >> summand[i] >> modulo[i];
}


int a[2][MAXN];
map<int, int> where[2];
bool is_change[2][MAXN];
int next_change[2][MAXN];

void build_a() {
	a[0][0] = initial[0];
	a[1][0] = initial[1];
	fore(i, 1, max(n[0], n[1])) {
		forn(t, 2)
			if (i < n[t]) {
				int64 cur = coeff0[t] * 1ll * a[0][(i - 1) % n[0]] + coeff1[t] * 1ll * a[1][(i - 1) % n[1]] + summand[t];
				a[t][i] = int(cur % modulo[t]);
			}
	}
}

void build_where() {
	forn(t, 2) {
		where[t].clear();
		forn(i, n[t]) {
			int cur = a[t][i];
			if (!where[t].count(cur))
				where[t].insert(mp(cur, i));
		}
	}
}

inline int get_where(int t, int number) {
	map<int, int>::iterator it = where[t].find(number);
	if (it == where[t].end())
		return INF;
	return it->sc;
}

void build_next_change() {
	forn(t, 2) {
		forn(i, n[t]) {
			int first_pos = get_where(t, a[t][i]);
			if (first_pos == INF)
				throw;
			is_change[t][i] = (first_pos == i);
		}

		next_change[t][n[t]] = n[t];
		ford(i, n[t])
			if (is_change[t][i])
				next_change[t][i] = i;
			else
				next_change[t][i] = next_change[t][i + 1];
	}
}

int64 solve() {
	build_a();
	build_where();
	build_next_change();

	int64 answer = 0;

	int index[2] = { -1, -1 };
	while (index[0] < n[0] - 1) {
		int target[2] = { index[0] + 1, index[1] };
		while (index[0] != target[0] || index[1] != target[1]) {
			int t = (index[0] != target[0]) ? 0 : 1;
			while (index[t] != target[t]) {
				if (index[t] >= n[t])
					throw;
				int number = a[t][++index[t]];
				int pos_in_other = get_where(1 - t, number);
				if (pos_in_other == INF)
					return answer;
				target[1 - t] = max(target[1 - t], pos_in_other);
			}
		}

		int end1 = next_change[1][index[1] + 1];
		if (end1 - index[1] < 1)
			throw;
		answer += end1 - index[1];
	}

	return answer;
}


int main(int argc, char *argv[]) {
	int test_to_execute = (argc == 2) ? atoi(argv[1]) : -1;

	if (test_to_execute == -1) {
		freopen("input.txt", "rt", stdin);
		freopen("output.txt", "wt", stdout);
	}

	int tests;
	cin >> tests;
	
	if (test_to_execute != -1 && !(1 <= test_to_execute && test_to_execute <= tests)) {
		cerr << "Requested test doesn't exist!" << endl;
		throw std::exception("Requested test doesn't exist!");
	}

	for (int test = 1; test <= tests; ++test) {
		time_t start_time = clock();
		read();
		if (!cin)
			throw;
		if (test_to_execute != -1 && test != test_to_execute)
			continue;
		printf("Case #%d: ", test);
		cout << solve() << endl;
		cerr << "Test #" << test << " done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
	}
}

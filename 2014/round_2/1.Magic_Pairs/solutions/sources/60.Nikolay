#ifdef NALP_PROJECT
#pragma hdrstop
#else
#define _SECURE_SCL 0
#endif

#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker, "/STACK:200000000")

#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <utility>
#include <cassert>

#include <set>
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <bitset>
#include <memory.h>

#include <iostream>
#include <fstream>
#include <sstream>

using namespace std;

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define y1 YYY1
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

template<typename T> inline T Abs(T x) { return (x >= 0) ? x : -x; }
template<typename T> inline T sqr(T x) { return x * x; }
template<typename T> inline string toStr(T x) { stringstream st; st << x; string s; st >> s; return s; }
template<typename T> inline int bit(T mask, int b) { return (b >= 0 && (mask & (T(1) << b)) != 0) ? 1 : 0; }

inline int nextInt() { int x; if (scanf("%d", &x) != 1) throw; return x; }
inline int64 nextInt64() { int64 x; if (scanf("%I64d", &x) != 1) throw; return x; }
inline double nextDouble() { double x; if (scanf("%lf", &x) != 1) throw; return x; }

const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double EPS = 1E-9;
const long double PI = 3.1415926535897932384626433832795;

const int MAXN = 1001000;

int64 a[MAXN], b[MAXN];
int n, m, na[MAXN], nb[MAXN], sa[MAXN], sb[MAXN];

void calcNew(int64 * a, int n, int * na, int * sa) {
	memset(na, 60, sizeof nb);
	memset(sa, 0, sizeof sb);

	set<int64> st;
	forn(i, n) {
		if (!st.count(a[i])) {
			na[i] = i;
			sa[i] = 1;
		}

		st.insert(a[i]);
	}

	na[n] = n;
	ford(i, n)
		na[i] = min(na[i], na[i + 1]);

	forn(i, n)
		if (i > 0)
			sa[i] += sa[i - 1];
}

int64 stupid() {
	int64 ans = 0;
	set<int64> sa;
	forn(i, n) {
		sa.insert(a[i]);
		set<int64> sb;
		forn(j, m) {
			sb.insert(b[j]);
			if (sa == sb) ans++;
		}
	}

	return ans;	
}

void solve() {
	if (true) {
		cerr << "\tinput mode: read test." << endl;
		n = nextInt();
		m = nextInt();
		int64 x1 = nextInt64();
		int64 a1 = nextInt64();
		int64 b1 = nextInt64();
		int64 c1 = nextInt64();
		int64 r1 = nextInt64();

		int64 x2 = nextInt64();
		int64 a2 = nextInt64();
		int64 b2 = nextInt64();
		int64 c2 = nextInt64();
		int64 r2 = nextInt64();

		a[0] = x1; b[0] = x2;
		for(int i = 1; i < max(n, m); i++) {
			a[i] = (a1 * a[(i-1) % n] + b1 * b[(i-1) % m] + c1) % r1;
			b[i] = (a2 * a[(i-1) % n] + b2 * b[(i-1) % m] + c2) % r2;
		}
	} else {
		cerr << "\tinput mode: generated test." << endl;
		n = 200;
		m = 800;
		forn(i, n) a[i] = rand() % 9;
		forn(i, m) b[i] = rand() % 9;
	}

	calcNew(a, n, na, sa);
	calcNew(b, m, nb, sb);
	map<int64, int> pb;
	forn(i, n)
		pb[a[i]] = INF;
	ford(i, m)
		pb[b[i]] = i;

	int p = 0;
	int64 ans = 0, last = 0;
	forn(i, n) {
		if (na[i] != i) {
			ans += last;
			continue;
		}

		last = 0;
		p = max(p, pb[a[i]]);
		if (p >= m || sa[i] != sb[p]) continue;

		last = nb[p + 1] - p;
		ans += last;
	}

	cout << ans << endl;
	cerr << "\tclever answer is '" << ans << "'." << endl;
}

int main() {
#ifdef NALP_PROJECT
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#else
#endif

	cout.precision(10);
	cout.setf(ios::fixed);

	cerr.precision(10);
	cerr.setf(ios::fixed);

	srand((unsigned int)time(0));
	int tests = nextInt();
	clock_t totalStartTime = clock();
	forn(test, tests) {
		clock_t startTime = clock();
		cerr << "Case #" << test + 1 << endl;
		cout << "Case #" << test + 1 << ": ";
		solve();

		char formattedTime[100];
		clock_t time = clock() - startTime;
		sprintf(formattedTime, "%d.%03d", int(time / CLOCKS_PER_SEC), int(time % CLOCKS_PER_SEC));
		cerr << "time for test is " << formattedTime << " s." << endl << endl;
	}

	char formattedTime[100];
	clock_t totalTime = clock() - totalStartTime;
	sprintf(formattedTime, "%d.%03d", int(totalTime / CLOCKS_PER_SEC), int(totalTime % CLOCKS_PER_SEC));
	cerr << string(20, '=') << endl;
	cerr << "TOTAL TIME IS " << formattedTime << " s." << endl;

	return 0;
}

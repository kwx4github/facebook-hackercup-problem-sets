
import java.io.InputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Scanner;

/**
 * @author Abhimanyu Singh
 *
 */
public class MagicPairs {

    private InputStream input;
    private PrintStream output;
    private Scanner inputSc;

    public MagicPairs(InputStream input, PrintStream output) {
        this.input = input;
        this.output = output;
        init();
    }

    private void init() {
        inputSc = new Scanner(input);
    }

    static int lineToInt(String line) {
        return Integer.parseInt(line);
    }

    public void solve() {
        int testCaseCount = lineToInt(inputSc.nextLine());
        for (int testN = 1; testN <= testCaseCount; testN++) {
            solveTestCase(testN);
        }
    }

    long getMaximumPair(int board1[], int board2[]) {
        long ans = 0;
        HashMap<Integer, Integer> h1 = new HashMap<>(board1.length);
        HashMap<Integer, Integer> h2 = new HashMap<>(board2.length);
        int i1 = 0;
        int i2 = 0;
        int n1 = board1.length;
        int n2 = board2.length;
        int addList1[] = new int[n1];
        int addList2[] = new int[n2];
        int c1 = 0;
        int c2 = 0;
        int ai1 = 0;
        int ai2 = 0;

        while (true) {
            //just found last possible match(s), new begin
            if (i1 >= n1 || i2 >= n2) {
                break;
            }

            ai1 = c1 = ai2 = c2 = 0;

            if (h1.containsKey(board1[i1])) {
                throw new RuntimeException("Logic error");
            }
            h1.put(board1[i1], board1[i1]);
            addList1[c1++] = board1[i1];
            i1++;
            boolean errorBreak = false;
            while (ai1 < c1 || ai2 < c2) {
                if (ai1 < c1) {
                    int v1 = addList1[ai1++];
                    boolean found = false;
                    while (i2 < n2) {
                        if (h2.containsKey(v1)) {
                            found = true;
                            break;
                        }
                        h2.put(board2[i2], board2[i2]);
                        addList2[c2++] = board2[i2];
                        i2++;
                    }
                    if (h2.containsKey(v1)) {
                        found = true;
                    }
                    if (!found) {
                        errorBreak = true;
                        break;
                    }
                }
                if (ai2 < c2) {
                    int v2 = addList2[ai2++];
                    boolean found = false;
                    while (i1 < n1) {
                        if (h1.containsKey(v2)) {
                            found = true;
                            break;
                        }
                        h1.put(board1[i1], board1[i1]);
                        addList1[c1++] = board1[i1];
                        i1++;
                    }
                    if (h1.containsKey(v2)) {
                        found = true;
                    }

                    if (!found) {
                        errorBreak = true;
                        break;
                    }
                }
            }
            if (errorBreak) {
                break;
            } else {
                //we found a match                
                int startI1 = i1 - 1;
                while (i1 < n1 && h1.containsKey(board1[i1])) {
                    i1++;
                }
                int startI2 = i2 - 1;
                while (i2 < n2 && h2.containsKey(board2[i2])) {
                    i2++;
                }
                long size1 = (i1 - startI1);
                long size2 = (i2 - startI2);
                ans += (size1 * size2);
            }
        }
        return ans;
    }

    private void solveTestCase(int testN) {
        Scanner tempSc = new Scanner(inputSc.nextLine());
        int N = tempSc.nextInt();
        int M = tempSc.nextInt();
        tempSc = new Scanner(inputSc.nextLine());
        int x1 = tempSc.nextInt();
        long a1 = tempSc.nextInt();
        long b1 = tempSc.nextInt();
        long c1 = tempSc.nextInt();
        int r1 = tempSc.nextInt();
        tempSc = new Scanner(inputSc.nextLine());
        int x2 = tempSc.nextInt();
        long a2 = tempSc.nextInt();
        long b2 = tempSc.nextInt();
        long c2 = tempSc.nextInt();
        int r2 = tempSc.nextInt();

        int board1[] = new int[N];
        int board2[] = new int[M];
        board1[0] = x1;
        board2[0] = x2;
        for (int i = 1; i < Math.max(N, M); i++) {
            if (i < N) {
                board1[i] = (int) ((a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1);
            }
            if (i < M) {
                board2[i] = (int) ((a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2);
            }
        }

        long ans = getMaximumPair(board1, board2);
        output.println("Case #" + testN + ": " + ans);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        MagicPairs mp = new MagicPairs(System.in, System.out);
        mp.solve();
    }
}

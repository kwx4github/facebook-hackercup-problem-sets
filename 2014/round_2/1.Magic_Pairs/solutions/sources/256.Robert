#include<iostream>
#include<vector>
#include<set>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef set<int> SI;

class Task
{
    VI board1, board2;
    int N, M;
    int x1, a1, b1, c1, r1;
    int x2, a2, b2, c2, r2;
    SI set1, set2;


public:

    void read()
    {
        cin >> N >> M;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;

        board1.push_back(x1);
        board2.push_back(x2);

        for (int i=1;i<max(N,M);++i)
        {
            if ( i <N)
            {
                board1.push_back( ((LL)a1*board1[(i-1)%N] + (LL)b1*board2[(i-1)%M]+(LL)c1)%r1);
            }
            if ( i <M)
            {
                board2.push_back( ((LL)a2*board1[(i-1)%N] + (LL)b2*board2[(i-1)%M]+(LL)c2)%r2);
            }
        }
    }

    LL solve()
    {
        int i1 =0, i2 = 0;

        LL res = 0;

        while ( i1 <N)
        {
            int cur = board1[i1];
            i1++;
            if ( set1.count( cur) != 0 )
                continue;

            set1.insert( cur);
            if ( set2.count( cur) == 0)
            {
                while ( i2 < M && (board2[i2] != cur))
                {
                    set2.insert( board2[i2]);
                    i2++;
                }
                if ( i2 < M)
                {
                    set2.insert(board2[i2++]);
                } else
                {
                    break;
                }
            }

            if ( set1.size() == set2.size() )
            {
                int a = 1, b=1;
                while ( i1 < N && (set1.count(board1[i1]) >0) )
                {       
                    a++;
                    i1++;
                }
                
                while ( i2 < M && (set2.count(board2[i2]) >0) )
                {       
                    b++;
                    i2++;
                }

                res += ((LL)a*b);

            }
        }

        return res;
    }
};


void run_test( int test_num)
{
    Task T;
    T.read();
    cout << "Case #" << test_num << ": " << T.solve() << endl;
}

int main()
{
    int T;
    cin >> T;
    for ( int i=0;i<T;++i)
    {
        run_test( i+1);
    }

    return 0;
}


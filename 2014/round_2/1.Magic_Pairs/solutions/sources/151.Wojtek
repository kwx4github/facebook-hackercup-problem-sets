#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstdio>
#include <utility>
#define MP make_pair
#define PB push_back

typedef long long ll;

using namespace std;

const int N = 1001 * 1001;
ll Board[N][2];
ll hashh(ll a) {
  return (a + 656) * a * a + (a * a) ^ a + 26784;
}
set<ll> cols[2];
map<ll, ll> nums[2];

int main()
{
  // nie zapomnij o ll
  ios_base::sync_with_stdio(0);
  
  int tt;
  cin>>tt;
  
  for (int yy = 1; yy <= tt; yy++) {
    cout<<"Case #"<<yy<<": ";
    ll n[2];
    cin>>n[0]>>n[1];
    ll x[2], a[2], b[2], c[2], r[2];
    for (int t = 0; t < 2; t++) {
      cin>>Board[0][t];
      cin>>a[t]>>b[t]>>c[t]>>r[t];
    }
    for (int i = 1; i < max(n[0], n[1]); i++) {
      Board[i][0] = (a[0] * Board[(i-1) % n[0]][0] + b[0] * Board[(i-1) % n[1]][1] + c[0]) % r[0];
      Board[i][1] = (a[1] * Board[(i-1) % n[0]][0] + b[1] * Board[(i-1) % n[1]][1] + c[1]) % r[1];
    }
    ll res = 0;
    ll acc = 0;
    //cout<<endl;
    for (int t = 0; t < 2; t++) {
      cols[t].clear();
      nums[t].clear();
      acc = 0;
      for (int i = 0; i < n[t]; i++) {
        if (cols[t].find(Board[i][t]) == cols[t].end()) {
          cols[t].insert(Board[i][t]);
          acc += hashh(Board[i][t]);
        }
        nums[t][acc]++;
        //cout<<Board[i][t]<<" ";
        //cout<<acc<<" ";
      }
      //cout<<endl;
    }
    for (auto it = nums[0].begin(); it != nums[0].end(); it++) {
      res += it->second * nums[1][it->first];
    }
    cout<<res<<endl;
  }
  
  
  
  // nie zapomnij o ll
  return 0;
}

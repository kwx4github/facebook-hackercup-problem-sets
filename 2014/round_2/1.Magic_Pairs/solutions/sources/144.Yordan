#include <cstdio>
#include <cstring>
#include <map>
#include <vector>
#include <set>
using namespace std;

typedef pair<int,int> pii;

int n, m;
long long x1, x2, a1, a2, b1, b2, c1, c2;
long long r1, r2;

long long bo1[1<<20], bo2[1<<20];

long long ans = 0;
vector<pii> vp1;
vector<pii> vp2;

int ok;
map<long long, int> cnt;

void add(long long nm, int v)
{
	if (cnt[nm] == 0)
	{
		++ok;
	}
	cnt[nm] += v;
	if (cnt[nm] == 0)
		--ok;
}

int main()
{
	int t, T;
	scanf("%d", &T);
	for (t = 1; t <= T; ++t)
	{
		ans = 0;
		scanf("%d %d", &n, &m);
		scanf("%lld %lld %lld %lld %lld", &x1, &a1, &b1, &c1, &r1);
		scanf("%lld %lld %lld %lld %lld", &x2, &a2, &b2, &c2, &r2);
		bo1[0] = x1;
		bo2[0] = x2;
		for (int i = 1; i < n || i < m; ++i)
		{
			bo1[i] = (a1 * bo1[(i-1)%n] + b1 * bo2[(i-1)%m] + c1) % r1;
			bo2[i] = (a2 * bo1[(i-1)%n] + b2 * bo2[(i-1)%m] + c2) % r2;
		}
		
		set<long long> S;
		vp1.clear();
		for (int i = 0; i < n; ++i)
		{
			if (S.find(bo1[i]) == S.end())
			{
				vp1.push_back(make_pair(i, bo1[i]));
			}
			S.insert(bo1[i]);
		}

		S.clear();
		vp2.clear();
		for (int i = 0; i < n; ++i)
		{
			if (S.find(bo2[i]) == S.end())
			{
				vp2.push_back(make_pair(i, bo2[i]));
			}
			S.insert(bo2[i]);
		}
		
		cnt.clear();
		ok = 0;
		ans = 0;
		vp1.push_back(make_pair(n, -1));
		vp2.push_back(make_pair(m, -2));
		for (int i = 0; i+1 < (int) vp1.size() && i+1 < (int) vp2.size(); ++i)
		{
			add(vp1[i].second, 1);
			add(vp2[i].second, -1);
			if (!ok)
			{
				ans += (long long) (vp1[i+1].first - vp1[i].first) * (vp2[i+1].first - vp2[i].first);
			}
		}
		printf("Case #%d: %lld\n", t, ans);
	}
	return 0;
}

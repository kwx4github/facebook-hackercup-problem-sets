#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <list>
#include <cassert>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define EPS 1e-9
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;


struct SetHash {
	int p;
	unsigned long long x;
	SetHash() { }
	SetHash(int p_): p(p_), x(0) { }
	void add(int t) {
		x += pow(p, t);
	}
	void del(int t) {
		x -= pow(p, t);
	}
	bool operator==(const SetHash &that) const {
		assert(p == that.p);
		return x == that.x;
	}
	bool operator<(const SetHash &that) const {
		assert(p == that.p);
		return x < that.x;
	}
	static unsigned long long pow(unsigned long long a, unsigned long long k) {
		unsigned long long r = 1;
		while(k) {
			if(k & 1) r *= a;
			a *= a;
			k >>= 1;
		}
		return r;
	}
};
struct SetHashes {
	vector<SetHash> hs;
	SetHashes(const vector<int> &ps) {
		rep(i, ps.size()) hs.push_back(SetHash(ps[i]));
	}
	void add(int t) {
		rep(i, hs.size()) hs[i].add(t);
	}
	void del(int t) {
		rep(i, hs.size()) hs[i].del(t);
	}
	bool operator==(const SetHashes &that) const {
		rep(i, hs.size()) if(!(hs[i] == that.hs[i])) return false;
		return true;
	}
	bool operator<(const SetHashes &that) const {
		return hs < that.hs;
	}
};

const int Ps[10] = {
	1000000007,1000000009,1000000021,1000000033,1000000087,
	1000000093,1000000097,1000000103,1000000123,1000000181
};
int N[2];
int board[2][1000001];
int param[2][5];
int main() {
	int T;
	cin >> T;
	rep(ii, T) {
		cin >> N[0] >> N[1];
		rep(i, 2) rep(j, 5) cin >> param[i][j];
		board[0][0] = param[0][0];
		board[1][0] = param[1][0];
		reu(i, 1, max(N[0], N[1])) {
			rep(b, 2)
				board[b][i] = (
					(ll)param[b][1] * board[0][(i-1) % N[0]] +
					(ll)param[b][2] * board[1][(i-1) % N[1]] +
					param[b][3] ) % param[b][4];
		}
		map<SetHashes,int> a[2];
		rep(b, 2) {
			set<int> s;
			SetHashes h(vi(Ps, Ps+3));
			rep(i, N[b]) {
				int x = board[b][i];
				if(!s.count(x)) {
					h.add(x);
					s.insert(x);
				}
				a[b][h] ++;
			}
		}
		ll r = 0;
		each(i, a[0]) if(a[1].count(i->first))
			r += (ll)i->second * a[1][i->first];
		cout << "Case #" << ii+1 << ": " << r << endl;
	}
	return 0;
}

#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<cassert>
#include<cstdio>
#include<cstring>
#include<ctime>

// #define DEBUGLEVEL
#ifdef DEBUGLEVEL
#define printf_debug(fmt, args...) fprintf(stderr, fmt, ##args)
#else
#define printf_debug(fmt, args...)
#endif

typedef long long llong;

using namespace std;


const int MAXN = 2100000;

int board1[MAXN];
int board2[MAXN];
int diff2[MAXN];
int next2[MAXN];
int first_in[MAXN];


map<int, int> trans;
set<int> has;
set<int> used;

int trans_cnt = 0;
int n, m;
llong x1, a1, b1, c1, r1;
llong x2, a2, b2, c2, r2;

int get_trans(int v) {
    if(trans.count(v)) {
        return trans[v];
    }
    trans[v] = trans_cnt++;
}


int main() {
#ifdef DEBUG
    freopen("_magic_pairs.txt", "r", stdin);
    freopen("A.out", "w", stdout);
#endif
    int tests;
    cin >> tests;
    for(int test = 1; test <= tests; ++test) {
        cerr << "case " << test << endl;
        trans.clear();
        has.clear();
        used.clear();
        trans_cnt = 0;
        memset(board1, 0, sizeof(board1));
        memset(board2, 0, sizeof(board2));
        memset(diff2, 0, sizeof(diff2));
        memset(next2, 0, sizeof(next2));
        cin >> n >> m;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        board1[0] = x1;
        board2[0] = x2;
        for(int i = 1; i < max(n, m); ++i) {
            if(i < n) {
                board1[i] = (a1 * (llong)board1[(i - 1) % n] + b1 * (llong)board2[(i - 1) % m] + c1) % r1;
            }
            if(i < m) {
                board2[i] = (a2 * (llong)board1[(i - 1) % n] + b2 * (llong)board2[(i - 1) % m] + c2) % r2;   
            }
        }
        for(int i = 0; i < n; ++i) {
            printf_debug("%d ", board1[i]);
            board1[i] = get_trans(board1[i]);
        }
        printf_debug("\n");
        for(int i = 0; i < m; ++i) {
            printf_debug("%d ", board2[i]);
            board2[i] = get_trans(board2[i]);
        }
        printf_debug("\nafter:\n");
        for(int i = 0; i < n; ++i) {
            printf_debug("%d ", board1[i]);
        }
        printf_debug("\n");
        for(int i = 0; i < m; ++i) {
            printf_debug("%d ", board2[i]);
        }
        printf_debug("\n");
        memset(first_in, -1, sizeof(first_in));
        assert(trans_cnt < MAXN);
        int prev = -1;
        for(int i = 0; i < m; ++i) {
            if(first_in[board2[i]] == -1) {
                first_in[board2[i]] = i;
            }
            used.insert(board2[i]);
            diff2[i] = used.size();
            if(prev == -1 || diff2[i] != diff2[prev]) {
                if(prev != -1) next2[prev] = i;
                prev = i;
            }
        }
        next2[prev] = m;
        llong answer = 0;
        printf_debug("start:\n");
        for(int i = 0; i < n; ++i) {
            if(first_in[board1[i]] == -1) {
                break;
            }
            has.insert(-first_in[board1[i]]);
            int lst = -*(has.begin());
            if(diff2[lst] == (int)has.size()) {
                answer += next2[lst] - lst;  
                assert(next2[lst] - lst > 0);
                assert(next2[lst] != 0);  
                printf_debug("i = %d, lst = %d, next = %d OK\n", i, lst, next2[lst]);
            } else {
                printf_debug("i = %d, lst = %d, next = %d NO\n", i, lst, next2[lst]);
            }
            
        }
        printf("Case #%d: %lld\n", test, answer);
    }
    return 0;
}
/**
 * Created by Cynthia on 13-12-14.
 */
import java.io.*;
import java.util.*;
import java.math.*;

public class Magic {
    static int n;
    static int m;
    static long[] a;
    static long[] b;

    static public void init(Scanner input) {
        n = input.nextInt();
        m = input.nextInt();
        long x1, a1, b1, c1, r1;
        long x2, a2, b2, c2, r2;
        x1 = input.nextLong(); a1 = input.nextLong(); b1 = input.nextLong(); c1 = input.nextLong(); r1 = input.nextLong();
        x2 = input.nextLong(); a2 = input.nextLong(); b2 = input.nextLong(); c2 = input.nextLong(); r2 = input.nextLong();
        a = new long[n];
        b = new long[m];
        a[0] = x1;
        b[0] = x2;
        for (int i = 1; i < Math.max(n, m); i ++) {
            if (i < n) {
                a[i] = (a1 * a[(i-1)%n] + b1 * b[(i-1)%m] + c1) % r1;
            }
            if (i < m) {
                b[i] = (a2 * a[(i-1)%n] + b2 * b[(i-1)%m] + c2) % r2;
            }
        }
    }

    static public void work(PrintWriter output) {
        TreeSet<Long> setA = new TreeSet();
        TreeSet<Long> setB = new TreeSet();

        Vector<Integer> posA = new Vector<Integer>();
        Vector<Long> newNumA = new Vector<Long>();
        Vector<Integer> posB = new Vector<Integer>();
        Vector<Long> newNumB = new Vector<Long>();

        for (int i = 0; i < n; i ++) {
            if (!setA.contains(a[i])) {
                posA.add(i);
                newNumA.add(a[i]);
                setA.add(a[i]);
            }
        }
        posA.add(n);
        newNumA.add(Long.MAX_VALUE);
        for (int i = 0; i < m; i ++) {
            if (!setB.contains(b[i])) {
                posB.add(i);
                newNumB.add(b[i]);
                setB.add(b[i]);
            }
        }
        posB.add(m);
        newNumB.add(Long.MAX_VALUE);

        long ans = 0;
        TreeSet<Long> diffSet = new TreeSet<Long>();
        for (int i = 0; i < Math.min(posA.size() - 1, posB.size() - 1); i ++) {
            if (!diffSet.contains(newNumA.get(i)))
                diffSet.add(newNumA.get(i));
            else
                diffSet.remove(newNumA.get(i));

            if (!diffSet.contains(newNumB.get(i)))
                diffSet.add(newNumB.get(i));
            else
                diffSet.remove(newNumB.get(i));

            if (diffSet.isEmpty())
                ans += (long)(posA.get(i + 1) - posA.get(i)) * (long)(posB.get(i + 1) - posB.get(i));

        }
        output.println(ans);
    }

    static public int findLower(int x, int[] list) {
        int ret = -1;
        int left = 0, right = list.length - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (list[mid] == x) {
                if (ret == -1 || (ret != -1 && mid < ret)) {
                    ret = mid;
                }
                right = mid - 1;
            } else
            if (list[mid] < x) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ret;
    }

    static public int findUpper(int x, int[] list) {
        int ret = -1;
        int left = 0, right = list.length - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (list[mid] == x) {
                if (ret == -1 || (ret != -1 && mid > ret)) {
                    ret = mid;
                }
                left = mid + 1;
            } else
            if (list[mid] < x) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ret;
    }

    static public void main(String[] args) throws IOException {
        Scanner input = new Scanner(new File("A_large.in"));
        PrintWriter output = new PrintWriter(new File("A_large.out"));
        int T;
        T = input.nextInt();
        for (int ti = 1; ti <= T; ti ++) {
            init(input);
            output.print("Case #" + ti + ": ");
            work(output);
        }
        input.close();
        output.close();
    }
}

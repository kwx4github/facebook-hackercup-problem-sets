#include <iostream>
#include <map>
#include <set>
using namespace std;

#define MAXN 1048576

int n[2][MAXN], first[2][MAXN], next[2][MAXN];

map<int, int> m;
set<int> s[2];

int main() {
    int N[2], i, j, C, t, T, last[2];
    long long x[2], a[2], b[2], c[2], r[2], RES;

    cin >> T;
    for (t=1; t<=T; t++) {
        cin >> N[0] >> N[1];
        for (i=0; i<2; i++) {
            cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
            n[i][0] = x[i];
        }
    
        for (j=1; j<max(N[0], N[1]); j++) for (i=0; i<2; i++) n[i][j] = ((a[i]*n[0][(j-1)%N[0]])%r[i] + (b[i]*n[1][(j-1)%N[1]])%r[i] + c[i])%r[i];
    
        C = 0; m.clear(); memset(first, -1, sizeof(first));
        for (i=0; i<2; i++) {
            last[i] = -1;
            for (j=0; j<N[i]; j++) {
                if (m.find(n[i][j]) == m.end()) m[n[i][j]] = C++;
                n[i][j] = m[n[i][j]];

                if (first[i][n[i][j]] == -1) {
                    first[i][n[i][j]] = j;
                    if (last[i] != -1) next[i][last[i]] = j;
                    last[i] = j;
                }
            }
            next[i][last[i]] = N[i];
        }

        i = j = 0; s[0].clear(); s[1].clear(); RES = 0LL;
        do {
            if (n[0][i] != n[1][j]) {
                do {
                    if (s[0].find(n[0][i]) == s[0].end()) s[1].insert(n[0][i]);
                    else s[0].erase(n[0][i]);
                    if (s[1].find(n[1][j]) == s[1].end()) s[0].insert(n[1][j]);
                    else s[1].erase(n[1][j]);
                    if (!s[0].empty() || !s[1].empty()) {i = next[0][i]; j = next[1][j];}
                } while ((!s[0].empty() || !s[1].empty()) && i < N[0] && j < N[1]);
                if (i < N[0] && j < N[1]) {
                    RES += ((long long)(next[0][i]-i))*((long long)(next[1][j]-j));
                    i = next[0][i];
                    j = next[1][j];
                }
            } else {
                RES += ((long long)(next[0][i]-i))*((long long)(next[1][j]-j));
                i = next[0][i];
                j = next[1][j];
            }
        } while (i < N[0] && j < N[1]);

        cout << "Case #" << t << ": " << RES << endl;

    }

    return 0;
}

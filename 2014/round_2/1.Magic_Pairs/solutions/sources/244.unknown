#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>
#include<queue>
#include<set>
#include<map>
#include<iostream>
#include<cmath>
using namespace std;
#define mem(a,b) memset(a,b,sizeof(a))
#define pb push_back
typedef long long ll;

const int N = 1100000;

int a[N],b[N];
int n,m;

void get() {
    ll x1,a1,b1,c1,r1;
    cin>>x1>>a1>>b1>>c1>>r1;
    ll x2,a2,b2,c2,r2;
    cin>>x2>>a2>>b2>>c2>>r2;
    a[0]=x1, b[0]=x2;
    for(int i=1;i<max(n,m);i++) {
        if(i<n) {
            a[i]= (a1*a[(i-1)%n] + b1*b[(i-1)%m] + c1) % r1;
        }
        if(i<m) {
            b[i]= (a2*a[(i-1)%n] + b2*b[(i-1)%m] + c2) % r2;
        }
    }
}

int main()
{
	int T; scanf("%d",&T);
	for(int ka=1;ka<=T;ka++) {
        scanf("%d%d",&n,&m);
        get();
        
//      puts("---");
//      for(int i=0;i<n;i++) printf("%d ",a[i]); puts("");
//      for(int i=0;i<m;i++) printf("%d ",b[i]); puts("");
        
        ll ans=0;
        map<int,int> h;
        int j=-1, extr=0, lack=0;
        int last=0;
        for(int i=0;i<n;i++) {
            if(h.find(a[i])==h.end()) {
                lack++;
                h[a[i]] = 1;
            } else if(h[a[i]]==-1) {
                extr--;
                h[a[i]] = 0;
            } else {
                ans+=last;
                continue;
            }
            while(j+1<m && lack && !extr) {
                j++;
                if(h.find(b[j])==h.end()) {
                    extr++;
                    h[b[j]] = -1;
                } else if(h[b[j]]==1) {
                    lack--;
                    h[b[j]] = 0;
                }
            }
            if(lack==0 && extr==0) {
                int sj=j;
                while(1) {
                    j++;
                    if(j>=m) break;
                    if(h.find(b[j])==h.end()) {
                        extr++;
                        h[b[j]] = -1;
                    }
                    if(extr) break;
                }
                last = j-sj;
            } else {
                last = 0;
            }
            ans+=last;
//            printf("at %d, %lld, at %d\n",i,ans,j);
        }

        printf("Case #%d: %lld\n",ka,ans);
	}

    return 0;
}

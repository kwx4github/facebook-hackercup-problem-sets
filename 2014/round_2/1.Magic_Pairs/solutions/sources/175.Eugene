#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <vector>
#include <set>
#include <deque>
#include <map>
#include <functional>
#include <numeric>
#include <sstream>
#include <complex>

typedef long double LD;
typedef long long LL;
typedef unsigned long long ULL;
typedef unsigned int uint;

#define PI 3.1415926535897932384626433832795
#define sqr(x) ((x)*(x))

using namespace std;

#define N 1111111

LL B1[N], B2[N], a1, b1, c1, r1, a2, b2, c2, r2;


#define R 10000007
LL H1[R], H2[R], H3[R], H4[R], H5[R], H6[R], H7[R], H8[R];

struct TH {
	set<int> was;
	ULL h1, h2, h3, h4;

	TH() {h1 = h2 = h3 = h4 = 0;}

	bool have(int x) {
		return was.count(x) != 0;
	}

	int size() {
		return was.size();
	}

	void add(int x) {
		if (was.count(x) == 0) {
			was.insert(x);
			h1 ^= (H1[ x % R ] << 40) ^ (H2[ x % R ] << 20) ^ (H3[ x % R ]);
			h2 ^= (H4[ x % R ] << 40) ^ (H5[ x % R ] << 20) ^ (H6[ x % R ]);
			h3 ^= (H4[ x % R ] << 40) ^ (H7[ x % R ] << 20) ^ (H8[ x % R ]);
			h4 ^= (H8[ x % R ] << 40) ^ (H6[ x % R ] << 20) ^ (H4[ x % R ]);
		}
	}

	bool operator == (const TH& n) const {
		return was.size() == n.was.size() && h1 == n.h1 && h2 == n.h2 && h3 == n.h3 && h4 == n.h4;
	}
};

int main() {
    freopen(".in", "r", stdin);
    freopen(".out", "w", stdout);

    for (int i = 0; i < R; ++i) H1[i] = H2[i] = H3[i] = H4[i] = H5[i] = H6[i] = H7[i] = H8[i] = i;
    random_shuffle(H1, H1 + R);
    random_shuffle(H2, H2 + R);
    random_shuffle(H3, H3 + R);
    random_shuffle(H4, H4 + R);
    random_shuffle(H5, H5 + R);
    random_shuffle(H6, H6 + R);
    random_shuffle(H7, H7 + R);
    random_shuffle(H8, H8 + R);
    
    int T;
	cin >> T;
	for (int __it = 1; __it <= T; ++__it) {
		int n, m;
		cin >> n >> m;

		cin >> B1[0] >> a1 >> b1 >> c1 >> r1;
		cin >> B2[0] >> a2 >> b2 >> c2 >> r2;

//		B1[0] = B2[0] = 1;
		for (int i = 1; i < n || i < m; ++i) {
			if (i < n)
				B1[i] = (a1 * B1[(i - 1) % n] + b1 * B2[(i - 1) % m] + c1) % r1;
			if (i < m)
				B2[i] = (a2 * B1[(i - 1) % n] + b2 * B2[(i - 1) % m] + c2) % r2;
		}

	    ULL ans = 0; 
		TH h1, h2;
		for (int i = 0, j = 0, k = 0; i < n; ++i) {
			h1.add(B1[i]);
			while (j < m && h2.size() < h1.size()) {
				h2.add(B2[j]);
				++j;
			}
			while (k < m && (k < j || h2.have(B2[k]))) {
				++k;
			}
			if (h1 == h2) ans += k - j + 1;
		}

		printf("Case #%d: ", __it);
		cout << ans << endl;
	}
    
    return 0;
}

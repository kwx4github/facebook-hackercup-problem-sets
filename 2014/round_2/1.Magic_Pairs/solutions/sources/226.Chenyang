object MagicPairs extends App {

  import collection.mutable.{ Set => MSet, Map => MMap }

  val numTest = readInt
  for (c <- 1 to numTest) {
  	val n :: m :: _ = readLine.split(" ").map(_.toInt).toList
  	val x1 :: a1 :: b1 :: c1 :: r1 :: _ = readLine.split(" ").map(_.toInt).toList
  	val x2 :: a2 :: b2 :: c2 :: r2 :: _ = readLine.split(" ").map(_.toLong).toList

  	val board1 = Array.fill(n)(0L)
  	val board2 = Array.fill(m)(0L)
  	board1(0) = x1
  	board2(0) = x2
  	for (i <- 1 until math.max(n, m)) {
  	  if (i < n) {
  	  	board1(i) = (a1 * board1((i - 1) % n) % r1 + b1 * board2((i - 1) % m) % r1 + c1) % r1
  	  }
  	  if (i < m) {
  	  	board2(i) = (a2 * board1((i - 1) % n) % r2 + b2 * board2((i - 1) % m) % r2 + c2) % r2
  	  }
  	}

  	//println(board1.mkString(" "))
  	//println(board2.mkString(" "))

  	var pairs = 0L
  	var i, l, r = 0
  	val same, diff = MSet.empty[Long]
  	while (i < n && l < m) {
  	  if (same contains board1(i)) {
  	  	if (diff.isEmpty) {
  	  	  pairs += r - l
  	  	}
  	  }
  	  else {
  	  	same += board1(i)
  	  	if (diff.contains(board1(i)))
  	  	  diff -= board1(i)
  	  	else {
    	  while (r < m && board2(r) != board1(i)) {
    	  	if (!same.contains(board2(r))) 
    	  	  diff += board2(r)
    	  	r += 1
    	  }
    	  l = r
    	  while (r < m && (same.contains(board2(r)) || diff.contains(board2(r))))
    	  	r += 1
  	  	}
  	  	if (diff.isEmpty) {
  	  	  pairs += r - l
  	  	}
  	  }
  	  i += 1
  	}

  	println(s"Case #$c: $pairs")
  }
}
#include <bits/stdc++.h>

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)

#define DEBUG(x) { cout << #x << " = "; cout << x << endl; }
#define PR(a,n) { cout << #a << " = "; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }
#define PR0(a,n) { cout << #a << " = "; REP(_,n) cout << a[_] << ' '; cout << endl; }
using namespace std;

//Buffer reading
int INP,AM,REACHEOF;
const int BUFSIZE = (1<<12) + 17;
char BUF[BUFSIZE+1], *inp=BUF;
#define GETCHAR(INP) { \
    if(!*inp && !REACHEOF) { \
        memset(BUF,0,sizeof BUF);\
        int inpzzz = fread(BUF,1,BUFSIZE,stdin);\
        if (inpzzz != BUFSIZE) REACHEOF = true;\
        inp=BUF; \
    } \
    INP=*inp++; \
}
#define DIG(a) (((a)>='0')&&((a)<='9'))
#define GN(j) { \
    AM=0;\
    GETCHAR(INP); while(!DIG(INP) && INP!='-') GETCHAR(INP);\
    if (INP=='-') {AM=1;GETCHAR(INP);} \
    j=INP-'0'; GETCHAR(INP); \
    while(DIG(INP)){j=10*j+(INP-'0');GETCHAR(INP);} \
    if (AM) j=-j;\
}
//End of buffer reading

#define ll long long

const int MN = 1000111;
int x[MN], y[MN];
set<ll> cx, cy;
ll x1, x2, a1, b1, c1, a2, b2, c2, r1, r2, nx, ny, cnt1, cnt2, cntEqual;

int solve() {
    cnt1 = cnt2 = cntEqual = 0;
    int i = -1, j = -1, res = 0;
    while (i < nx - 1 || j < ny - 1) {
        if (cnt1 <= cnt2 && i < nx - 1) {
            if (i == nx - 1) break;

            ++i;
            int u = x[i];

            if (!cx.count(u)) ++cnt1;
            if (!cx.count(u) && cy.count(u)) ++cntEqual;

            cx.insert(u);
        }
        else {
            if (j == ny - 1) break;

            ++j;
            int v = y[j];

            if (!cy.count(v)) ++cnt2;
            if (!cy.count(v) && cx.count(v)) ++cntEqual;

            cy.insert(v);
        }
        if (cnt1 == cnt2 && cnt1 == cntEqual) ++res;
    }
    return res;
}

int main() {
    ios :: sync_with_stdio(false);
    int ntest; cin >> ntest;
    FOR(test,1,ntest) {
        cx.clear(); cy.clear();
        cin >> nx >> ny;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;

        x[0] = x1;
        y[0] = x2;

        FOR(i,1,nx-1) {
            x[i] = (a1 * x[(i-1) % nx] + b1 * y[(i-1) % ny] + c1) % r1;
            y[i] = (a2 * x[(i-1) % nx] + b2 * y[(i-1) % ny] + c2) % r2;
        }

        // PR0(x, nx);
        // PR0(y, ny);

        cnt1 = cnt2 = cntEqual = 0;
        cout << "Case #" << test << ": " << solve() << endl;
    }
    return 0;
}

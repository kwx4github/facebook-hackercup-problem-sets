#include <algorithm>
#include <iostream>
#include <assert.h>
#include <complex>
#include <numeric>
#include <vector>
#include <string>
#include <cstdio>
#include <queue>
#include <cmath>
#include <map>
#include <set>

using namespace std;

#define all(a)      (a).begin(),(a).end()
#define sz(a)       int((a).size())
#define FOR(i,a,b)  for(int i=a;i<b;++i)
#define REP(i,n)    FOR(i,0,n)
#define UN(v)       sort(all(v)),(v).erase(unique((v).begin(),(v).end()),(v).end())
#define CL(a,b)     memset(a,b,sizeof a)
#define pb          push_back
#define X           first
#define Y           second

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef complex<double> point;

int n, m;
int b1[1000111], b2[1000111];

void read()
{
	int x1, x2, a1, a2, b1, b2, c1, c2;
	int r1, r2;
	cin >> n >> m 
		>> x1 >> a1 >> b1 >> c1 >> r1
		>> x2 >> a2 >> b2 >> c2 >> r2;
	::b1[0] = x1;
	::b2[0] = x2;
	for (int i = 1; i < n || i < m; ++i)
	{
		::b1[i] = (a1 * (ll)::b1[(i-1) % n] + b1 * (ll)::b2[(i-1) % m] + c1) % r1;
		::b2[i] = (a2 * (ll)::b1[(i-1) % n] + b2 * (ll)::b2[(i-1) % m] + c2) % r2;
	}
}

void run()
{
	read();
	map<int, int> state;
	int cnt[4] = {};
	ll res = 0;
	for (int i = 0, j = 0; cnt[1] == cnt[2] && i < n; )
	{
		for (; cnt[1] <= cnt[2] && i < n; ++i)
		{
			--cnt[state[b1[i]]];
			++cnt[state[b1[i]] |= 1];
		}
		for (; cnt[1] > cnt[2] && j < m; ++j)
		{
			--cnt[state[b2[j]]];
			++cnt[state[b2[j]] |= 2];
		}
		if (cnt[1] + cnt[2] == 0)
		{
			int k1 = 1, k2 = 1;
			for (; i < n && state[b1[i]] == 3; ++i) ++k1;
			for (; j < m && state[b2[j]] == 3; ++j) ++k2;
			res += (ll)k1 * k2;
		}
	}
	cout << res << endl;
}

int main(){
	cout.precision(12);
	cout.setf(ios::fixed);
	int a = 0, b = 0;
	for(cin >> b; a++ < b ; run()) 
		printf("Case #%d: ", a);
	return 0;
}

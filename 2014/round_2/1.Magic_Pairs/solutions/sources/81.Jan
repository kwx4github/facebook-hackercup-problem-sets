#include <iostream>
#include <cstdio>
#include <map>
#include <algorithm>
#include <vector>
using namespace std;
int main() {
	int T;
	scanf("%d",&T);
	for (int tc=1; tc<=T; tc++) {
		int N, M;
		cin >> N >> M;
		int x1, a1, b1, c1, r1;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		int x2, a2, b2, c2, r2;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		static int Board1[1000005];
		static int Board2[1000005];
		Board1[0] = x1;
		Board2[0] = x2;
		for (int i=1; i<1000005; i++) {
			if (i < N) {
				Board1[i] = ((long long) a1 * Board1[(i-1) % N] + (long long) b1 * Board2[(i-1) % M] + c1) % r1;
			}
			if (i < M) {
				Board2[i] = ((long long) a2 * Board1[(i-1) % N] + (long long) b2 * Board2[(i-1) % M] + c2) % r2;
			}
		}
		map<int, int> index_in_board1;
		vector<pair<int, int> > pairs_board1;
		map<int, int> index_in_board2;
		vector<pair<int, int> > pairs_board2;
		for (int i=0; i<N; i++) {
				if (!index_in_board1.count(Board1[i])) {
					index_in_board1[Board1[i]] = i;
					pairs_board1.push_back(make_pair(i,Board1[i]));
				}
		}
		for (int i=0; i<M; i++) {
				if (!index_in_board2.count(Board2[i])) {
					index_in_board2[Board2[i]] = i;
					pairs_board2.push_back(make_pair(i,Board2[i]));
				}
		}
		int max_in_board2_index=-1;
		long long answer = 0;
		for (int num_id=0; num_id<(int)pairs_board1.size(); num_id++) {
			int number = pairs_board1[num_id].second;
			if (index_in_board2.count(number) == 0) {
				break;
			}
			int idx_number_board2 = index_in_board2[number];
			int pos_in_list2 = lower_bound(pairs_board2.begin(), pairs_board2.end(), make_pair(idx_number_board2,number)) - pairs_board2.begin();
			max_in_board2_index = max(max_in_board2_index, pos_in_list2);
			if (max_in_board2_index == num_id) {
				int L1 = pairs_board1[num_id].first;
				int R1 = (num_id==(int)pairs_board1.size()-1) ? (N-1) : (pairs_board1[num_id+1].first-1);
				int L2 = pairs_board2[max_in_board2_index].first;
				int R2 = (max_in_board2_index==(int)pairs_board2.size()-1) ? (M-1) : (pairs_board2[max_in_board2_index+1].first-1);
				answer += (long long) (R1-L1+1) * (R2-L2+1);
			}
		}
		printf("Case #%d: %lld\n", tc, answer);
	}
}

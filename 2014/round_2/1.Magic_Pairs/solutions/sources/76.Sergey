#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 1001 * 1000;

int64 e[2][nmax];
set<int> us[2];
map<int, int> st[2];
int sz[2];

int n, m;
int x1, a1, b1, c1, r1;
int x2, a2, b2, c2, r2;

void pre_calc(int id, int n) {
	map<int, int> st1;
 	for (int i = n - 1; i >= 0; i --)
 		st1[e[id][i]] = i;
 	st[id].swap(st1);
}

int getSt(int id, int x) {
	if (st[id].count(x) > 0)
		return st[id][x];
	return sz[id];
}

int solve() {
	us[0].clear();
	us[1].clear();
	cin >> n >> m;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	e[0][0] = x1;
	e[1][0] = x2;
	for (int i = 1; i < max(n, m); i ++) {
		if (i < n) 
			e[0][i] = (a1 * e[0][((i-1)%n + n) % n] + b1 * e[1][((i-1)%m + m) % m] + c1) % r1;
		if (i < m) 
			e[1][i] = (a2 * e[0][((i-1)%n + n) % n] + b2 * e[1][((i-1)%m + m) % m] + c2) % r2;
	}
/*	forn(i, n)
		cerr << e[0][i] << " ";
	cerr << endl;
	forn(i, n)
		cerr << e[1][i] << " ";
	cerr << endl;*/
	sz[0] = n;
	sz[1] = m;
	pre_calc(0, n);
	pre_calc(1, m);

	int l[2], ul[2];
	l[0] = l[1] = ul[0] = ul[1] = 0;
	int64 res = 0;
	while (1) {
		forn(id, 2)
			ul[id] = min(l[id] + 1, sz[id]);
		while(1) {
			bool upd = 0;
			forn(id, 2)
				while (l[id] < ul[id]) {
					us[id].insert(e[id][l[id]]);
					ul[id^1] = max(ul[id^1], getSt(id^1, e[id][l[id]]) + 1);
					upd = 1;
					l[id] ++;
				}
			if (!upd) break;	
		}

		if (l[0] > sz[0] || l[1] > sz[1]) break;

		int now[2];
		now[0] = now[1] = 1;
		forn(id, 2) {
			while (l[id] < sz[id] && us[id].count(e[id][l[id]])) {
				now[id] ++;
				l[id] ++;	
		   	}
		}
		res += 1ll * now[0] * now[1];
		bool done = 1;
		forn(id, 2)
			if (l[id] < sz[id]) 	
				done = 0;
		if (done) break;
	}
//	if (us[0] == us[1])
//		res ++;
	cout << res << endl;
	return 0;
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);
	
	int tst;
	cin >> tst;
	forn (i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
	}            

	return 0;
}

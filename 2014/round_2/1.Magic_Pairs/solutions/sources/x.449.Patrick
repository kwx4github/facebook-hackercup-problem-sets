#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <valarray>
#include <vector>
#include <ext/algorithm>
#include <ext/hash_map>
#include <ext/hash_set>
#include <ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define F(i,a,b)for(int i=a;i<b;++i)
#define rep(i,n)F(i,0,n)
#define all(a)a.begin(),a.end()
template<class T>vector<T>&operator<<(vector<T>& v,T t){v.push_back(t);return v;} 

int T;
int N, M, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;

// wlog N > M
int board1[1000001];
int board2[1000001];
long long solve() {
  long long res = 0;
  board1[0] = x1;
  board2[0] = x2;
  F(i, 1, N) {
    board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1;
    if (i < M) board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2;
  }
  set<int> colors1;
  set<int> colors2;
  set<int> difference;
  map<int, int> colorCount;
  map<int, bool> ok;

  int j = 0;

  rep(i, N) {
    int origSize = colors1.size();
    int lastInsert1 = board1[i];
    colors1.insert(board1[i]);
    board1[i] = colors1.size();
    colorCount[colors1.size()]++;
    if (origSize != colors1.size()) {
      // Remove the newest added element from the set difference
      if (difference.find(lastInsert1) != difference.end()) {
        difference.erase(difference.find(lastInsert1));
      } else {
        difference.insert(lastInsert1);
      }
 
      // Don't have any more elements to add.
      if (j == M) break;

      int lastInserted2 = board2[j];
      // Find a new color to add to the other set
      while (j < M && colors1.size() != colors2.size()) {
        lastInserted2 = board2[j];
        colors2.insert(board2[j]);
        board2[j] = colors2.size();
        ++j;
      }
      if (colors1.size() != colors2.size()) break;
      if (difference.find(lastInserted2) != difference.end()) {
        difference.erase(difference.find(lastInserted2));
      } else {
        difference.insert(lastInserted2);
      }
      if (difference.size() == 0) ok[colors1.size()] = true;
    }
  }

  while (j < M) {
    colors2.insert(board2[j]);
    board2[j] = colors2.size();
    ++j;
  }

  rep(j, M) {
    if (ok[board2[j]]) { 
      res += colorCount[board2[j]]; 
    }
  }
  return res;
}

int main() {
  cin >> T;
  rep(t, T) {
  
    cin >> N >> M >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
    if (N < M) {
      swap(N, M);
      swap(x1, x2);
      swap(a1, a2);
      swap(b1, b2);
      swap(c1, c2);
      swap(r1, r2);
    }
    printf("Case #%d: ", t+1);
    cout << solve() << endl;
  }
}

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.StringTokenizer;


public class A {
  static class FastScanner {
    BufferedReader br;
    StringTokenizer st;
    
    public FastScanner(InputStream in) {
      br = new BufferedReader(new InputStreamReader(in));
      st = new StringTokenizer("");
    }
    
    public FastScanner(File f) throws IOException {
      br = new BufferedReader(new FileReader(f));
      st = new StringTokenizer("");
    }
    
    public int nextInt() throws IOException {
      return Integer.parseInt(next());
    }
    
    public long nextLong() throws IOException {
      return Long.parseLong(next());
    }
    
    public double nextDouble() throws IOException {
      return Double.parseDouble(next());
    }
    
    public String next() throws IOException {
      if (st.hasMoreTokens()) return st.nextToken();
      st = new StringTokenizer(br.readLine());
      return next();
    }
  }
  
  static final String fileName = "A.in";
  
  public static void main(String[] args) throws IOException {
    FastScanner in = new FastScanner(new File(fileName));
    PrintWriter out = new PrintWriter(new File("A.out"));
    // FastScanner in = new FastScanner(System.in);
    int cases = in.nextInt();
    int cntWrong = 0;
    for (int co = 1; co <= cases; co++) {
      int n = in.nextInt();
      int m = in.nextInt();
      
      long x1 = in.nextInt();
      long a1 = in.nextInt();
      long b1 = in.nextInt();
      long c1 = in.nextInt();
      long r1 = in.nextInt();
      
      long x2 = in.nextInt();
      long a2 = in.nextInt();
      long b2 = in.nextInt();
      long c2 = in.nextInt();
      long r2 = in.nextInt();
      
      long[] a = new long[n];
      long[] b = new long[m];
      
      a[0] = x1;
      b[0] = x2;
      
      for (int i = 1; i < Math.max(n, m); i++) {
        if (i < n) a[i] = (a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1;
        if (i < m) b[i] = (a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2;
      }
      
      long ans = 0;
      int l = 0, r = 0;
      HashSet<Long> aSet = new HashSet<Long>();
      HashSet<Long> bSet = new HashSet<Long>();
      for (int i = 0; i < n; i++) {
        aSet.add(a[i]);
        while (l < b.length && aSet.contains(b[l]) && bSet.size() != aSet.size()) {
          bSet.add(b[l]);
          l++;
        }
        while (r < b.length && aSet.contains(b[r])) {
          r++;
        }
        
        if (r >= l && bSet.size() == aSet.size()) {
          ans += r - l + 1;
        }
      }
      
      System.out.printf("Case #%d: %d\n", co, ans);
      out.printf("Case #%d: %d\n", co, ans);
    }
    
    out.close();
  }
  
  static long BF(long[] a, long[] b) {
    long cnt = 0;
    HashSet<Long> aSet = new HashSet<Long>();
    for (int i = 0; i < a.length; i++) {
      aSet.add(a[i]);
      HashSet<Long> bSet = new HashSet<Long>();
      for (int j = 0; j < b.length; j++) {
        bSet.add(b[j]);
        
        if (aSet.containsAll(bSet) && bSet.containsAll(aSet)) {
          cnt++;
        }
      }
    }
    return cnt;
  }
}

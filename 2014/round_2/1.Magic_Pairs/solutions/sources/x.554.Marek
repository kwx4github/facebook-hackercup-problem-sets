#include <cstdio>
#include <algorithm>
#include <map>
#include <queue>
#include <set>

using namespace std;

typedef long long int ll;

int n,m;
int f;
ll x1,a1,b1,c1,r1,x2,a2,b2,c2,r2;

ll x[1000005];
ll y[1000005];

int rox[1000005];
int roy[1000005];

int poz;

queue<ll>kx,ky;
set<ll>sx,sy;
int wx,wy;

void ruszx()
{
  wx++;
  if(wx>=n) return;
  if(x[wx]==x[wx-1])
  {
    ruszx();
    return;
  }
  sx.insert(x[wx]);
  ky.push(x[wx]);
}

void ruszy()
{
  wy++;
  if(wy>=n) return;
  if(y[wy]==y[wy-1])
  {
    ruszy();
    return;
  }
  sy.insert(y[wy]);
  kx.push(y[wy]);
}

void przyp()
{
  scanf("%d%d%lld%lld%lld%lld%lld%lld%lld%lld%lld%lld",&n,&m,&x1,&a1,&b1,&c1,&r1,&x2,&a2,&b2,&c2,&r2);
  f=max(n,m);
  x[0]=x1;
  y[0]=x2;
  for(int i=1;i<f;i++)
  {
    rox[i]=roy[i]=0;
    x[i] = (a1 * x[(i-1)%n] + b1 * y[(i-1)%m] + c1)%r1;
    y[i] = (a2 * x[(i-1)%n] + b2 * y[(i-1)%m] + c2)%r2;
  }
  //for(int i=0;i<n;i++) printf("%lld ",x[i]); printf("\n");
  //for(int i=0;i<m;i++) printf("%lld ",y[i]); printf("\n");
  poz=0;
  set<ll>s;
  for(int i=0;i<n;i++)
  {
    if(s.find(x[i])!=s.end()) x[i]=x[i-1];
    else s.insert(x[i]);
  }
  s.clear();
  for(int i=0;i<m;i++)
  {
    if(s.find(y[i])!=s.end()) y[i]=y[i-1];
    else s.insert(y[i]);
  }
  rox[0]=1; roy[0]=1;
  for(int i=1;i<n;i++) if(x[i]==x[i-1]) rox[i]=rox[i-1]+1; else rox[i]=1;
  for(int i=1;i<m;i++) if(y[i]==y[i-1]) roy[i]=roy[i-1]+1; else roy[i]=1;
  for(int i=n-2;i>=0;i--) if(x[i]==x[i+1]) rox[i]=rox[i+1];
  for(int i=m-2;i>=0;i--) if(y[i]==y[i+1]) roy[i]=roy[i+1];

  //for(int i=0;i<n;i++) printf("%lld[%d] ",x[i],rox[i]); printf("\n");
  //for(int i=0;i<m;i++) printf("%lld[%d] ",y[i],roy[i]); printf("\n");

  ll wyn=0LL;

  sx.clear(); sy.clear();
  while(!kx.empty()) kx.pop();
  while(!ky.empty()) ky.pop();
  kx.push(x[0]); ky.push(y[0]);
  sx.insert(x[0]); sy.insert(y[0]);
  wx=wy=0;

  while(wx<n && wy<m)
  {
    if(kx.empty() && ky.empty())
    {
      wyn+=((ll)rox[wx])*roy[wy];
      ruszx();
      continue;
    }
    if(!kx.empty())
    {
      if(sx.find(kx.front())!=sx.end()) kx.pop();
      else ruszx();
      continue;
    }
    if(!ky.empty())
    {
      if(sy.find(ky.front())!=sy.end()) ky.pop();
      else ruszy();
      continue;
    }
    printf("dupa\n");
  }

  int p=0;
  printf("%lld\n",wyn);
}

int main()
{
  int t;
  scanf("%d",&t);
  for(int i=1;i<=t;i++)
  {
    printf("Case #%d: ",i);
    przyp();
  }
  return 0;
}

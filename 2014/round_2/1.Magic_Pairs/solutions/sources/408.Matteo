#include<cstdio>
#include<algorithm>
#include<map>
#include<cassert>
#include<iostream>

using namespace std;

#define MAX_N 1000000

long long int board1[MAX_N], board2[MAX_N];
long long int x1, a1, b1, c1, r1;
long long int x2, a2, b2, c2, r2;

map<long long int, int> p1;
map<long long int, int> p2;

int main()
{
  int t;
  long long int n,m;
  scanf("%d",&t);
  for (int k=0; k<t; k++)
  {
    scanf("%lld %lld\n",&n, &m);
    scanf("%lld %lld %lld %lld %lld\n", &x1, &a1, &b1, &c1, &r1);
    scanf("%lld %lld %lld %lld %lld\n", &x2, &a2, &b2, &c2, &r2);
    board1[0] = x1;
    board2[0] = x2;
    p1.erase(p1.begin(),p1.end());
    p2.erase(p2.begin(),p2.end());
    p1[x1] = 0;
    p2[x2] = 0;
    for (int i=1; i<max(n,m); i++)
    {
      if (i<n)
      {
        board1[i] = (a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1;
        if (p1.find(board1[i]) == p1.end())
          p1[board1[i]] = i;
      }
      if (i<m)
      {
        board2[i] = (a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2;
        if (p2.find(board2[i]) == p2.end())
        {
          p2[board2[i]] = i;
        }
      }
    }
    /*
    for (int i=0; i<n; i++)
      printf("%lld ",board1[i]);
    printf("\n");
    for (int i=0; i<m; i++)
      printf("%lld ",board2[i]);
    printf("\n");
    */
    int i = 0;
    int j = 0;
    long long int tot = 0;
    int mi=0, mj=0;
    while (i<n || j<m)
    {
      if (p1.find(board2[j]) == p1.end())
        break;
      if (p2.find(board1[i]) == p2.end())
        break;
      if (mi < p1[board2[j]])
        mi = p1[board2[j]];
      if (mj < p2[board1[i]])
        mj = p2[board1[i]];
      if (i < mi)
      {
        i++;
        //assert (i<n);
      }
      else if (j < mj)
      {
        j++;
        //assert (j<m);
      }
      else
      {
        long long int ni = i+1, nj = j+1;
        while ((p2.find(board1[ni])!=p2.end()) && p2[board1[ni]]<=j && ni<n)
        {
          ni++;
        }
        while (p1.find(board2[nj])!=p1.end() && p1[board2[nj]]<=i && nj<m)
          nj++;
        tot += (ni-i)*(nj-j);
        i = ni;
        j = nj;
      }
    }

    printf("Case #%d: %lld\n",k+1,tot);
  }
  return 0;
}

// solution by Peter Ondruska

#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstring>

#include <iostream>
#include <sstream>
#include <complex>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <utility>
#include <numeric>
#include <functional>
#include <algorithm>
using namespace std;

typedef pair<int,int> PII;
typedef long long ll;

#define FOR(i,n)      for(int i=0;i<(n);i++)
#define FORTO(i,a,b)  for(int i=(a);i<=(b);i++)
#define FORD(i,n)     for(int i=(n)-1;i>=0;i--)
#define FORDTO(i,a,b) for(int i=(a);i>=(b);i--)
#define FOREACH(it,t) for(typeof(t.begin()) it=t.begin(); it!=t.end(); ++it)

#define DEBUG(x) cout<<'>'<<#x<<':'<<(x)<<endl
#define SIZE(X) int(X.size())

#define MAX 1234567

ll N, M;
ll B1[MAX], B2[MAX];

int main() {
    ll T;
	cin >> T;
    FORTO(t,1,T) {
        cin >> N >> M;
        ll x1, a1, b1, c1, r1;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        ll x2, a2, b2, c2, r2;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        B1[0] = x1;
        B2[0] = x2;
        FORTO(i,1,max(N,M)-1) {
            if (i < N) B1[i] = (a1 * B1[(i-1) % N] + b1 * B2[(i-1) % M] + c1) % r1;
            if (i < M) B2[i] = (a2 * B1[(i-1) % N] + b2 * B2[(i-1) % M] + c2) % r2;
        }
        
        set<ll> S;
        set<ll> S1;
        set<ll> S2;
        
        ll R = 0;
        
        int j = -1;
        ll range = 0;
        FOR(i,N) {
            S1.insert(B1[i]);
            if (S.count(B1[i])) {
                S.erase(B1[i]);
            }
            
            if (!S2.count(B1[i])) {
                // find first
                while (j < M && !S2.count(B1[i])) {
                    j++;
                    S2.insert(B2[j]);
                    if (!S1.count(B2[j])) {
                        S.insert(B2[j]);
                    }
                }

                int k = j;
                // find last
                while (k < M && S2.count(B2[k])) {
                    k++;
                }
            
                range = k-j;
                j = k-1;
            }
            
            if (S.empty()) {
                R += range;
            }
        }
        
        cout << "Case #" << t << ": " << R << endl;
	}
	return 0;
}


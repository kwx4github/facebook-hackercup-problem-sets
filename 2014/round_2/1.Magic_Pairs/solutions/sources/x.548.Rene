import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.TreeSet;


public class ProblemA {
	public static void main(String[] args) throws Exception {
		new ProblemA();
	}

	public ProblemA() throws Exception {
//		BufferedReader in = new BufferedReader(new FileReader("_magic_pairs_example_input.txt"));
		BufferedReader in = new BufferedReader(new FileReader("_magic_pairs.txt"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(
				"output-A.txt")));
		Scanner scan = new Scanner(in);
		int tests = scan.nextInt();
		for (int test = 0; test < tests; test++) {
			int N = scan.nextInt();
			int M = scan.nextInt();
			int x1 = scan.nextInt();
			int a1 = scan.nextInt();
			int b1 = scan.nextInt();
			int c1 = scan.nextInt();
			int r1 = scan.nextInt();
			int x2 = scan.nextInt();
			int a2 = scan.nextInt();
			int b2 = scan.nextInt();
			int c2 = scan.nextInt();
			int r2 = scan.nextInt();
			int[] board1 = new int[N];
			int[] board2 = new int[M];
			board1[0] = x1;
			board2[0] = x2;
			for ( int i = 1; i < Math.max(N, M); i++ ) {
				if ( i < N ) board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1;
				if ( i < M ) board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2;
			}
//			System.out.println(Arrays.toString(board1));
//			System.out.println(Arrays.toString(board2));
			TreeSet<Integer> seen1 = new TreeSet<Integer>();
			TreeSet<Integer> seen2 = new TreeSet<Integer>();
			TreeSet<Integer> need1 = new TreeSet<Integer>();
			TreeSet<Integer> need2 = new TreeSet<Integer>();
			long result = 0;
			int n = 0;
			int m = 0;
			while ( n < N && m < M) {
				need1.clear();
				need2.clear();
				seen1.add(board1[n]);
				need2.add(board1[n]);
				while ( m < M && n < N && need2.size() + need1.size() > 0) {
					if ( need1.size() > 0 ) {
						for ( int value: need1 ) {
							if ( seen1.contains(value)) continue;
							int oldN = n;
							n = find(board1, value, n, seen1, need2);
//							System.out.printf("find %d n changed %d to %d\n", value, oldN, n);
						}
						need1.clear();
					} else {
						for ( int value: need2) {
							if ( seen2.contains(value)) continue;
							int oldM = m;
							m = find(board2, value, m, seen2, need1);
//							System.out.printf("find %d m changed %d to %d\n", value, oldM, m);
						}
						need2.clear();
					}
				}
				if ( m < M && n < N ) {
//					System.out.printf("found common n = %d m = %d\n", n, m);
//					System.out.println(seen1);
//					System.out.println(seen2);
					long startN = n;
					n = firstChange(board1, n, seen1);
					long startM = m;
					m = firstChange(board2, m, seen2);
					long contribution = (n - startN)*(m - startM);
//					System.out.printf("found common last n = %d m = %d extra %d\n", n, m, contribution);
					result += contribution;
					
				}
			}
			String answer = String.format("Case #%d: %d\n", test + 1, result);
			System.out.print(answer);
			out.print(answer);
		}
		out.close();
	}
	
	int find(int[] x, int value, int startIndex, TreeSet<Integer> seen, TreeSet<Integer> need) {
		int k = startIndex;
		seen.add(x[k]);
		if ( x[k] != value ) need.add(x[k]);
		while ( k < x.length && x[k] != value) {
			seen.add(x[k]);
			need.add(x[k]);
			k++;
		}
		if ( k < x.length) seen.add(value);
		return k;
	}
	
	int firstChange(int[] x, int startIndex, TreeSet<Integer> seen) {
		int k = startIndex;
		while ( k < x.length && seen.contains(x[k])) k++;
		return k;
	}
	
	

}

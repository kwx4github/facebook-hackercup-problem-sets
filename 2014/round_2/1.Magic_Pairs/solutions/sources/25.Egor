#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

typedef long long ll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef pair<int, int> pii;

vector<pii> calc(const vi &as) {
  set<int> cur;
  vector<pii> res;
  for (int i = 0; i < sz(as); i++) {
    if (!cur.count(as[i])) {
      res.pb(mp(i, as[i]));
      cur.insert(as[i]);
    }
  }
  res.pb(mp(sz(as), -1));
  return res;
}

void inv(set<int> &vals, int v) {
  if (vals.count(v)) vals.erase(v);
  else vals.insert(v);
}

void solve() {
  int n, m;
  scanf("%d%d", &n, &m);
  vi as(n), bs(m);

  int a1, b1, c1, r1;
  scanf("%d%d%d%d%d", &as[0], &a1, &b1, &c1, &r1);

  int a2, b2, c2, r2;
  scanf("%d%d%d%d%d", &bs[0], &a2, &b2, &c2, &r2);

  for (int i = 1; i < n || i < m; i++) {
    if (i < n)
      as[i] = (ll(a1) * as[(i - 1) % n] + ll(b1) * bs[(i - 1) % m] + c1) % r1;
    if (i < m)
      bs[i] = (ll(a2) * as[(i - 1) % n] + ll(b2) * bs[(i - 1) % m] + c2) % r2;
  }
/*  for (int i = 0; i < n; i++)
    eprintf("%d%c", as[i], "\n "[i + 1 < n]);
  for (int i = 0; i < m; i++)
    eprintf("%d%c", bs[i], "\n "[i + 1 < m]);*/

  vector<pii> fas = calc(as);
  vector<pii> fbs = calc(bs);

  ll ans = 0;
  set<int> odd;
  for (int i = 0; i + 1 < sz(fas) && i + 1 < sz(fbs); i++) {
    inv(odd, fas[i].second);
    inv(odd, fbs[i].second);
    if (odd.empty()) {
      ans += ll(fas[i + 1].first - fas[i].first) * (fbs[i + 1].first - fbs[i].first);
    }
  }
  printf("%I64d\n", ans);
}

int main(int argc, char* argv[]) {
  assert(argc <= 3);
  if (argc == 3) {
    assert(freopen(argv[1], "r", stdin));
    assert(freopen(argv[2], "w", stdout));
  } else {
    string filename = ".in";
    if (argc >= 2) filename = argv[1];

    assert(freopen(filename.c_str(), "r", stdin));

    if (filename.length() >= 3 && string(filename, filename.length() - 3, 3) == ".in") {
      filename = string(filename, 0, filename.length() - 3);
    }
    filename += ".out";
    assert(freopen(filename.c_str(), "w", stdout));
  }

  int TN;
  char buf[16];
  assert(fgets(buf, sizeof buf, stdin));
  assert(sscanf(buf, "%d", &TN) >= 1);
  for (int TID = 1; TID <= TN; TID++)
    try {
      eprintf("===== Solving test case #%d =====\n", TID);
      printf("Case #%d: ", TID);
      solve();
    } catch (...) {
      eprintf("Exception was caught while executing on test #%d\n", TID);
      return 1;
    }
  return 0;
}

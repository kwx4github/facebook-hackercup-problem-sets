#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <algorithm>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_set>
#include <vector>

using namespace std;

#define SZ(a) (int)(a).size()
#define FOR(i,a,b) for (int i=(a); i<=(b); ++i)
#define REP(i,n) for (int i=0; i<(n); ++i)
#define ALL(c) c.begin(), c.end()
typedef vector<int> VI;
typedef pair<int, int> PII;
#define CLR(c,n) memset(c,n,sizeof(c))
template <class T> void checkmin(T &a, T b) { if (b<a) a=b; }
template <class T> void checkmax(T &a, T b) { if (b>a) a=b; }
#define TR(it, container) for(typeof(container.begin()) it = container.begin();	\
			      it != container.end(); it++)
#define CONTAIN(container, it) (container.find(it)!=container.end())
const int MAXN = 1<<20;
long x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
int n, m, board1[MAXN], board2[MAXN];

void init_board(void) {
  board1[0] = x1;
  board2[0] = x2;
  for (int i = 1; i < n || i < m; ++i) {
    board1[i] = (a1 * board1[(i-1)%n] + b1 * board2[(i-1)%m] + c1) % r1;
    board2[i] = (a2 * board1[(i-1)%n] + b2 * board2[(i-1)%m] + c2) % r2;
  }
}

long check(void) {
  long i1 = 0, i2 = 0, j1, j2, count = 0;
  unordered_set<int> v1, v2, v0;
  while (i1 < n && i2 < m) {
    if (!v2.empty()) {
      int val = board1[i1++];
      if (CONTAIN(v2, val)) {
	v2.erase(val);
	v0.insert(val);
      }
      if (!CONTAIN(v0, val) && !CONTAIN(v1, val)) v1.insert(val);
    } else {
      int val = board2[i2++];
      if (CONTAIN(v1, val)) {
	v1.erase(val);
	v0.insert(val);
      }
      if (!CONTAIN(v0, val) && !CONTAIN(v2, val)) v2.insert(val);
    }
    if (v1.empty() && v2.empty()) {
      j1 = i1, j2 = i2;
      while (j1 < n && CONTAIN(v0, board1[j1])) ++j1;
      while (j2 < m && CONTAIN(v0, board2[j2])) ++j2;
      count += (j1 - i1 + 1) * (j2 - i2 + 1);
      i1 = j1; i2 = j2;
    }
  }
  while (i1 < n && v1.empty()) {
    int val = board1[i1++];
    if (CONTAIN(v2, val)) {
      v2.erase(val);
      v0.insert(val);
    }
    if (!CONTAIN(v0, val) && !CONTAIN(v1, val)) v1.insert(val);
    if (v1.empty() && v2.empty()) ++count;
  }
  while (i2 < m && v2.empty()) {
    int val = board2[i2++];
    if (CONTAIN(v1, val)) {
      v1.erase(val);
      v0.insert(val);
    }
    if (!CONTAIN(v0, val) && !CONTAIN(v2, val)) v2.insert(val);
    if (v1.empty() && v2.empty()) ++count;
  }
  return count;
}
int main(int argc, char *argv[]) {
  int tc; cin >> tc;
  FOR(ic, 1, tc) {
    cin >> n >> m >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
    init_board();
    printf("Case #%d: %ld\n", ic, check());
  }
}

#include<stdio.h>
#include<string>
#include<math.h>
#include<stdlib.h>
#include<set>
#include<bitset>
#include<map>
#include<vector>
#include<string.h>
#include<algorithm>
#include<iostream>
#include<queue>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define REPC(I, C) for (int I = 0; !(C); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define F first
#define S second
using namespace std;
const int SIZE = 1000100;
long long board[2][SIZE];
int main(){
    int T,cs=0;scanf("%d",&T);
    while(T--){
        DRII(N,M);
        long long x1,a1,b1,c1,r1,x2,a2,b2,c2,r2,an=0;
        cin>>x1>>a1>>b1>>c1>>r1;
        cin>>x2>>a2>>b2>>c2>>r2;
        board[0][0]=x1;
        board[1][0]=x2;
        for(int i=1;i<max(N,M);i++){
            if(i<N){
                board[0][i]=(a1*board[0][(i-1)%N]+b1*board[1][(i-1)%M]+c1)%r1;
            }
            if(i<M){
                board[1][i]=(a2*board[0][(i-1)%N]+b2*board[1][(i-1)%M]+c2)%r2;
            }
        }
        printf("Case #%d: ",++cs);
        int dif1=0,dif2=0,i=0,j=0;
        set<long long>H[2];
        for(int k=1;k<=min(N,M);k++){
            if(i==N||j==M)break;
            H[0].insert(board[0][i]);
            if(H[1].count(board[0][i])==0)dif1++;
            else dif2--;
            H[1].insert(board[1][j]);
            if(H[0].count(board[1][j])==0)dif2++;
            else dif1--;
            int nt_i=i+1,nt_j=j+1;
            while(nt_i<N){
                if(H[0].count(board[0][nt_i]))nt_i++;
                else break;
            }
            while(nt_j<M){
                if(H[1].count(board[1][nt_j]))nt_j++;
                else break;
            }
            //printf("(%d,%d)-(%d,%d):%d,%d\n",i,nt_i,j,nt_j,dif1,dif2);
            if(!dif1&&!dif2)an+=(long long)(nt_i-i)*(nt_j-j);
            i=nt_i;
            j=nt_j;
        }
        cout<<an<<endl;
        /*
        puts("");
        REP(i,N)printf("%lld,",board[0][i]);
        puts("");
        REP(i,N)printf("%lld,",board[1][i]);
        puts("");*/
    }
    return 0;
}

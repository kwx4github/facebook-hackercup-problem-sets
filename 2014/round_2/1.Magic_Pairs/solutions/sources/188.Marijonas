#include <algorithm>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#define mp make_pair
#define st first
#define nd second
#define FOR(i,n) for(int i=0;i<(n);i++)
#define FORO(i,n) for(int i=1;i<=(n);i++)
#define FORS(i,a,n) for(int i=(a);i<(n);i++)
#define FORB(i,a,n) for(int i=(a);i>=(n);i--)
#define FORE(i,v) for(typeof((v).begin())i=(v).begin();i!=(v).end();i++)
#define INRANGE(a,b,c,d) ((a)>=0&&(b)>=0&&(a)<(c)&&(b)<(d))
#define pf printf
typedef long long ll;
using namespace std;

int N, M;
ll x1, a1, b1, c1, r1;
ll x2, a2, b2, c2, r2;

ll B1[1000000], B2[1000000];

bool move_set(int &first, int &last, set<ll> &s, ll *arr, int n, set<ll> &toggle) {
	first = last;
	if (first == n)
		return false;
	s.insert(arr[first]);
	if (toggle.count(arr[first]))
		toggle.erase(arr[first]);
	else
		toggle.insert(arr[first]);
	while (last < n && s.count(arr[last]) > 0)
		last++;
}

ll solve() {
	cin >> N >> M;
	cin >> B1[0] >> a1 >> b1 >> c1 >> r1;
	cin >> B2[0] >> a2 >> b2 >> c2 >> r2;
	
	for (int i = 1, m = max(N, M); i < m; i++) {
		ll z1 = B1[(i-1)%N], z2 = B2[(i-1)%M];
		B1[i] = (a1 * z1 + b1 * z2 + c1) % r1;
		B2[i] = (a2 * z1 + b2 * z2 + c2) % r2;
	}
	
	set<ll> s1, s2;
	set<ll> diff;
	
	int f1 = 0, l1 = 0, f2 = 0, l2 = 0;
	move_set(f1, l1, s1, B1, N, diff);
	move_set(f2, l2, s2, B2, M, diff);
	
	ll pairs = 0;
	
	while ((f1 != l1) && (f2 != l2)) {
		if (diff.empty())
			pairs += ((ll)(l1 - f1)) * (l2 - f2);
		move_set(f1, l1, s1, B1, N, diff);
		move_set(f2, l2, s2, B2, M, diff);
	}
	
	return pairs;
}


int main() {
	//freopen(".in", "r", stdin); freopen(".out", "w", stdout);
	int t;
	cin >> t;
	FORO(i, t) {
		printf("Case #%d: %lld\n", i, solve());
	}
}



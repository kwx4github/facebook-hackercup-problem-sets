#include <iostream>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <map>
#include <queue>
#include <set>
#include <cstring>
#include <numeric>

using namespace std;

#define INF 0x7FFFFFFFFFFFFFFFLL

int cnt;
map<int, int> mp;

void adjust(int k, int v) {
  if(!v) return;
  int& ref = mp[k];
  if(ref == 0) cnt++;
  ref += v;
  if(ref == 0) cnt--;
}

int main() {
  int T; cin >> T;
  for (int t = 1; t <= T; t++) {
    cout << "Case #" << t << ": ";

    int N, M; cin >> N >> M;
    long long x1, a1, b1, c1, r1; cin >> x1 >> a1 >> b1 >> c1 >> r1;
    long long x2, a2, b2, c2, r2; cin >> x2 >> a2 >> b2 >> c2 >> r2;
    vector<int> A(N, x1);
    vector<int> B(M, x2);
    for(int i = 1; i < max(N, M); i++) {
      if(i < N) {
        A[i] = (a1 * A[i - 1] + b1 * B[(i + M - 1) % M] + c1) % r1;
      }
      if(i < M) {
        B[i] = (a2 * A[(i + N - 1) % N] + b2 * B[i - 1] + c2) % r2;
      }
    }

/*
cout << endl;
cout << "A =";
for(int i = 0; i < N; i++) cout << ' ' << A[i];
cout << endl;
cout << "B =";
for(int i = 0; i < M; i++) cout << ' ' << B[i];
cout << endl;
*/

    cnt = 0;
    mp.clear();

    int j = 0;
    set<int> sa, sb;
    sa.insert(A[0]);
    long long result = 0;
    for(int i = 0; i < N; ) {
      int asz = 1;
      while(i + asz < N && !sa.insert(A[i + asz]).second) asz++;
      adjust(A[i], 1);

      if(sb.find(A[i]) == sb.end()) {
        while(j < M && A[i] != B[j]) {
          if(sb.insert(B[j]).second) {
            adjust(B[j], -1);
          }
          j++;
        }
        if(j < M) {
          sb.insert(B[j]);
          adjust(B[j], -1);
        }
      }

      if(cnt == 0) {
        int bsz = 0;
        while(j + bsz < M && sb.find(B[j + bsz]) != sb.end()) bsz++;
        result += 1ll * asz * bsz;
        j += bsz;
      }

      i += asz;
    }
    cout << result << endl;
  }
  return 0;
}

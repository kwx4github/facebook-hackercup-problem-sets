// Task-ID: 1517
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <climits>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof(x.begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
    #define dbg(x) cerr<<#x<<":"<<(x)<<endl
    #define dg(x) cerr<<#x<<":"<<(x)<<' '
#else
    #define eprintf(...) 0
    #define dbg(x) 0
    #define dg(x) 0
#endif

using namespace std;

const int inf = 1e9+5143;
const long long Linf = 1e18+5413;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){
	return a/gcd(a,b)*b;
}

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1171717;

vector<int> W[N];
long long a[N], b[N];
bool have[N], seen[N];
int f[N];

void init(){
    for(int i = 0; i < N; i++) f[i] = 0;
}

void put(int x,int val){
    x += 5;
    while(x < N){
        f[x] += val;
        x += x & -x;
    }
}

int get(int r){
    r += 5;
    int res = 0;
    for(int i = r; i > 0; i -= i & -i) res += f[i];
    return res;
}

long long solve(){
    memset(have, 0, sizeof have);
    memset(seen, 0, sizeof seen);
    for(int i = 0; i < N; i++)
        W[i].clear();
    int n = read();
    int m = read();
    long long x1 = read(), a1 = read(), b1 = read(), c1 = read(), r1 = read();
    long long x2 = read(), a2 = read(), b2 = read(), c2 = read(), r2 = read();
    a[0] = x1;
    b[0] = x2;
    vector<long long> vals;
    vals.push_back(a[0]);
    vals.push_back(b[0]);
    for(int i = 1; i < max(n,m); i++){
        a[i] = (a1 * a[(i - 1) % n] % r1 + b1 * b[(i - 1) % m] % r1 + c1) % r1;
        b[i] = (a2 * a[(i - 1) % n] % r2 + b2 * b[(i - 1) % m] % r2 + c2) % r2;
        vals.push_back(a[i]);
        vals.push_back(b[i]);
    }
    sort(vals.begin(), vals.end());
    vals.erase(unique(vals.begin(), vals.end()), vals.end());
    for(int i = 0; i < n; i++){
        eprintf("a[%d] = %d\n",i,a[i]);
        a[i] = lower_bound(vals.begin(), vals.end(), a[i]) - vals.begin();
    }
    for(int i = 0; i < m; i++){
        eprintf("b[%d] = %d\n",i,b[i]);
        b[i] = lower_bound(vals.begin(), vals.end(), b[i]) - vals.begin();
        W[b[i]].push_back(i);
    }
    eprintf("\n");
    init();
    for(int i = 0; i < m; i++){
        put(i, 1);
    }
    int ptr = 0;
    long long res = 0ll;
    for(int i = 0; i < n; i++){
        int x = a[i];
        if(!have[x]){
            have[x] = 1;
            foreach(it, W[x]){
                put(*it, -1);
            }
            if(!seen[x]) while(ptr < m && b[ptr] != x){
                seen[b[ptr]] = 1;
                ptr++;
            }
        }
        int l = ptr, r = m;
        while(l + 1 < r){
            int m = (l + r) >> 1;
            if(get(m) == 0) l = m;
            else r = m;
        }
        if(get(l) == 0 && l >= ptr) res += l - ptr + 1;
    }
    return res;
}

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int tc = read();

    for(int i = 1; i <= tc; i++){
        printf("Case #%d: %lld\n",i,solve());
    }

    return 0;
}

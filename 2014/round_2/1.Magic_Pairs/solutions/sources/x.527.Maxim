#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <ctime>
#include <cmath>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
inline ostream& operator<< (ostream& out, const pt& p) { return out << '(' << p.x << ", " << p.y << ')'; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 1000 * 1000 + 13;

int n, m;
int a[N], b[N];

inline bool read()
{
	if (scanf("%d%d", &n, &m) != 2) return false;

	int x1, a1, b1, c1, r1;	
	int x2, a2, b2, c2, r2;
	
	assert(scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1) == 5);
	assert(scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2) == 5);
	
	a[0] = x1;
	b[0] = x2;
	
	forl(i, max(n, m) - 1)
	{
		a[i] = int((a1 * 1ll * a[(i - 1) % n] + b1 * 1ll * b[(i - 1) % m] + c1) % r1);
		b[i] = int((a2 * 1ll * a[(i - 1) % n] + b2 * 1ll * b[(i - 1) % m] + c2) % r2);
	}
	
	return true;
}

int sz[2];
pt z[2][N];

inline void create(int a[N], int n, pt z[N], int& sz)
{
	sz = 0;
	set<int> cur;
	
	for(int i = 0, j = 0; i < n; i = j)
	{
		cur.insert(a[j++]);
		while (j < n && cur.count(a[j])) j++;
		z[sz++] = mp(a[i], j - i);
	}
}

inline void prepare()
{
	create(a, n, z[0], sz[0]);
	create(b, m, z[1], sz[1]);
}

inline void solve(int test)
{
	cerr << test << endl;
	prepare();
	
	set<int> need;
	
	li ans = 0;
	
	int p = 0;
			
	forn(i, sz[0])
	{
		int val = z[0][i].ft;
		
		while (p < sz[1] && !need.count(val)) need.insert(z[1][p++].ft);
		
		need.erase(val);
		
		if (need.empty())
		{
			ans += z[0][i].sc * 1ll * z[1][p - 1].sc;
			//cerr << i << ' ' << p << endl;			
		}
	}	
	
	printf("Case #%d: %I64d\n", test + 1, ans);

	/*
	forn(i, 2)
	{
		forn(j, sz[0])
			cerr << z[i][j] << ' ';
		cerr << endl;
	}
	*/
	//forn(i, n) cerr << a[i] << ' '; cerr << endl;
	//forn(i, m) cerr << b[i] << ' '; cerr << endl; cerr << endl;
}

int main()
{
#ifdef SU2_PROJ
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;
    
    int testCount;
    cin >> testCount;
    
    forn(test, testCount)
    {
	    assert(read());
    	solve(test);
    }
    
#ifdef SU2_PROJ
    cerr << "== TIME: " << clock() << " ==" << endl;
#endif

    return 0;
}

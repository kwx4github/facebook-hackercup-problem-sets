// hc magic pairs jcd

#include <cassert>
#include <vector>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ext/hash_map>
#include <ext/hash_set>
#include <map>
#include <set>
#include <deque>
#include <queue>
using namespace std;
using namespace __gnu_cxx;
#define V(x) vector<x >
#define vs V(string)
#define vi V(int)
#define vd V(double)
#define vll V(long long)

#define fr(x,y,z) for((x)=(y);(x)<(z);(x)++)
#define fo(x,y) fr(x,0,y)
#define fir(n) fo(i,n)
#define fjr(n) fo(j,n)
#define fkr(n) fo(k,n)
#define fi fir(n)
#define fj fjr(n)

#define pb push_back
#define sz size()
#define cs c_str()
#define ll long long

#define pb push_back
#define cs c_str()
#define mp(x,y) make_pair((x),(y))

bool debug = false;

void foo(vll f, vll& flen, vll& fgem) {
  set<ll> fs;
  int i,n=f.sz;
  for(i=0;i<n;) {
    int flo = i;
    fs.insert(f[flo]);
    int fhi = flo;
    while(fhi<n && fs.count(f[fhi])==1) fhi++;
    fgem.pb(f[flo]);
    flen.pb(fhi-flo);
    i=fhi;
  }
}

int main(void) {
  int nc;
  assert(scanf("%d",&nc)==1);
  for (int cas=1;cas<=nc;cas++) {
    int i,j;
    int n,m;
    ll x1,a1,b1,c1,r1;
    ll x2,a2,b2,c2,r2;
    assert(scanf("%d%d",&n,&m)==2);
    assert(scanf("%lld%lld%lld%lld%lld",&x1,&a1,&b1,&c1,&r1)==5);
    assert(scanf("%lld%lld%lld%lld%lld",&x2,&a2,&b2,&c2,&r2)==5);
    vll f(n),g(m);
    f[0]=x1;
    g[0]=x2;
    fr(i,1,n+m) {
      if (i<n) {
        f[i] = (a1 * f[(i-1) % n] + b1 * g[(i-1) % m] + c1) % r1;
      }
      if (i<m) {
        g[i] = (a2 * f[(i-1) % n] + b2 * g[(i-1) % m] + c2) % r2;
      }
    }

    if(debug) {
      fi printf("%lld ", f[i]); puts("");
      fir(m) printf("%lld ", g[i]); puts("");
    }


    ll ret=0;
    i=j=0;
    set<ll> fs,gs;

    vll flen,fgem;
    vll glen,ggem;
    foo(f,flen,fgem);
    foo(g,glen,ggem);

    if (debug) {
      fir(flen.sz) printf("%lld: %lld\n", fgem[i], flen[i]); puts("");
      fir(glen.sz) printf("%lld: %lld\n", ggem[i], glen[i]); puts("");
    }


    map<ll, int> c;
    int ones=0;

    for(i=0;i<flen.sz && i<glen.sz;i++) {
      ll a=fgem[i];
      c[a]++;
      if (c[a]==1) ones++;
      else if (c[a]==2) ones--;

      a=ggem[i];
      c[a]++;
      if (c[a]==1) ones++;
      else if (c[a]==2) ones--;

      if (ones==0) {
        ret+=flen[i]*glen[i];
      }
    }

    printf("Case #%d: %lld\n", cas, ret);
  }


  return 0;
}

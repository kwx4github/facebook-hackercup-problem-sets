#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <map>
#include <set>

using namespace std;

#define N 1234567

typedef long long ll;

ll ans;
int n, m, t, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
int board1[N], board2[N], mb1[N], mb2[N];
map<int, int> mp;
set<int> s;

void gen() {
    mp.clear();
    board1[0] = x1;
    board2[0] = x2;
    int len = max(n, m);
    for (int i = 1; i < len; i++) {
        if (i < n)
            board1[i] = (a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1;
        if (i < m)
            board2[i] = (a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2;
    }
    int num = 1;
    for (int i = 0; i < n; i++)
        if (!mp[board1[i]])
            mp[board1[i]] = num++;
    for (int i = 0; i < n; i++)
        mb1[i] = mp[board1[i]];
    for (int i = 0; i < m; i++) {
        int tmp = mp[board2[i]];
        mb2[i] = tmp ? tmp : num;
    }
}

void calc() {

    int mx1 = -1, mx2 = -2, len1, len2;
    ans = 0ll;
    s.clear();
    for (int i = 0, j = 0; i < n; ) {
        s.insert(mb2[j]);
        mx2 = max(mx2, mb2[j]);
        j++;
        for (; j < m && s.size() != mx2; j++) {
            s.insert(mb2[j]);
            mx2 = max(mx2, mb2[j]);
        }
        len2 = 1;
        for (; j < m && mb2[j] <= mx2; j++)
            len2++;

        bool okay = false;
        for (; i < n; i++) {
            mx1 = max(mx1, mb1[i]);
            if (mx1 == mx2) {
                okay = true;
                break;
            }
        }
        len1 = 1;
        for (i++; i < n && mx1 >= mb1[i]; i++)
            len1++;

        if (okay)
            ans += (ll) len1 * (ll) len2;
    }
}

int main() {
    ios::sync_with_stdio(0);

    cin >> t;
    for (int case_no = 1; case_no <= t; case_no++) {
        cin >> n >> m;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        gen();
        calc();
        printf("Case #%d: %lld\n", case_no, ans);
    }
    return 0;
}
import java.util.*;

public class A {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int T = scan.nextInt();
        for (int cs = 1; cs <= T; ++cs) {
            int n = scan.nextInt(), m = scan.nextInt();
            long x1 = scan.nextLong(), a1 = scan.nextLong(), b1 = scan.nextLong(), c1 = scan.nextLong(), r1 = scan.nextLong();
            long x2 = scan.nextLong(), a2 = scan.nextLong(), b2 = scan.nextLong(), c2 = scan.nextLong(), r2 = scan.nextLong();
            long[] board1 = new long[Math.max(n, m)], board2 = new long[Math.max(m, n)];
            board1[0] = x1;
            board2[0] = x2;
            for (int i = 1; i < Math.max(n, m); ++i) {
                board1[i] = (a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
                board2[i] = (a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;
            }
            long[][] res1 = f(board1, n), res2 = f(board2, m);
            Set<Long> tmp = new TreeSet<Long>();
            long ans = 0;
            for (int i = 0; i < Math.min(res1[0].length, res2[0].length); ++i) {
                if (res1[0][i] != res2[0][i]) {
                    if (tmp.contains(res1[0][i]))
                        tmp.remove(res1[0][i]);
                    else
                        tmp.add(res1[0][i]);

                    if (tmp.contains(res2[0][i]))
                        tmp.remove(res2[0][i]);
                    else
                        tmp.add(res2[0][i]);
                }
                if (tmp.size() == 0)
                    ans += res1[1][i] * res2[1][i];
            }
            System.out.format("Case #%d: %d%n", cs, ans);
        }
    }

    static long[][] f(long[] board, int size) {
        Set<Long> tmp = new TreeSet<Long>();
        for (long x: board)
            tmp.add(x);
        long[][] ret = new long[2][tmp.size()];
        tmp = new TreeSet<Long>();
        tmp.add(board[0]);
        ret[0][0] = board[0];
        ret[1][0] = 1;
        int last = 0;
        for (int i = 1; i < size; ++i) {
            if (tmp.contains(board[i]))
                ++ret[1][last];
            else {
                ++last;
                ret[0][last] = board[i];
                ret[1][last] = 1;
                tmp.add(board[i]);
            }
        }
        return ret;
    }
}

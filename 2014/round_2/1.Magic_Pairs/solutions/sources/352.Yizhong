#include <algorithm>
#include <iostream>
#include <stdint.h>
#include <set>
#include <unordered_set>
#include <vector>
using namespace std;

int n, m;
int64_t x1, a1, b1, c1, r1;
int64_t x2, a2, b2, c2, r2;

int64_t board1[1000001];
int64_t board2[1000001];

int main() {
  int t;
  cin >> t;
  for (int id = 1; id <= t; id++) {
    cin >> n >> m;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    // compute boards.
    board1[0] = x1;
    board2[0] = x2;
    for (int i = 1; i <= max(n, m); i++) {
      if (i <= n) {
        board1[i] = (a1 * board1[(i - 1) % n]) % r1;
        board1[i] += (b1 * board2[(i - 1) % m]) % r1;
        board1[i] = (board1[i] % r1 + c1) % r1;
      }
      if (i <= m) {
        board2[i] = (a2 * board1[(i - 1) % n]) % r2;
        board2[i] += (b2 * board2[(i - 1) % m]) % r2;
        board2[i] = (board2[i] % r2 + c2) % r2;
      }
    }
    /*
    for (int i = 0; i < n; i++) cout << board1[i] << ' ';
    cout << endl;
    for (int i = 0; i < m; i++) cout << board2[i] << ' ';
    cout << endl;
    */
    // scan.
    int64_t ans = 0;
    unordered_set<int> colors1, colors2;
    unordered_set<int> from1, from2;
    int i = 1, j = 0;
    colors1.insert(board1[0]);
    from1.insert(board1[0]);
    while (true) {
      if (from1.size() > 0) {
        // More elements in board1.
        while (j < m && from1.size() > 0) {
          colors2.insert(board2[j]);
          if (from1.find(board2[j]) != from1.end())
            from1.erase(board2[j]);
          else if (colors1.find(board2[j]) == colors1.end())
            from2.insert(board2[j]);
          j++;
        }
        if (j == m && from1.size() > 0) break;  // can't cover.
      } else if (from2.size() > 0) {
        while (i < n && from2.size() > 0) {
          colors1.insert(board1[i]);
          if (from2.find(board1[i]) != from2.end())
            from2.erase(board1[i]);
          else if (colors2.find(board1[i]) == colors2.end())
            from1.insert(board1[i]);
          i++;
        }
      } else {
        int old_i = i - 1, old_j = j - 1;
        while (i < n && colors1.find(board1[i]) != colors1.end())
          i++;
        while (j < m && colors2.find(board2[j]) != colors2.end())
          j++;
        ans += ((int64_t) (i - old_i)) * (j - old_j);
        if (i == n) break;
        colors1.insert(board1[i]);
        from1.insert(board1[i]);
        i++;
      }
    }
    cout << "Case #" << id << ": " << ans << endl;
  }
}

#include <algorithm>
#include <string>
#include <vector>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
//#include <iostream>
#include <set>
#include <map>
//#include <sstream>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<int> vll;
typedef vector<string> vs;

int err;
char *errs;

#define scanf err=scanf
#define fgets errs=fgets

//@? 0workset & LS
#define LS !=
//@? 0ignoreme
#undef LS
//@? 0workset ! LS
#define LS <
//@? Size
#define Size(x) (int(x.size()))
//@? LET
#define LET(k,val) __typeof(val) k = (val)
//@? CLC
// execute "act", and return "val" as an expression result
#define CLC(act,val) ([&] () {act; return (val); } ())
// (*({act; static __typeof(val) CLCR; CLCR = (val); &CLCR;}))
//@@

//@? 0rangecomm
// All macros with parameters "k,a,b" run the "k" variable in range [a,b)
//@? FOR
#define FOR(k,a,b) for(auto k=(a); k LS (b); ++k)
//@? FORREV
// the range is traversed from b-1 to a in FORREV
#define FORREV(k,a,b) for(auto k=(b); (a) <= (--k);)
//@@

#define FIRST(k,a,b,cond) CLC(LET(k, a); for(; k LS (b); ++k) if(cond) break, k)
#define LAST(k,a,b,cond) CLC(LET(k, b); while((a) <= (--k)) if(cond) break, k)
#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) LS (b))
#define FORALL(k,a,b,cond) (!EXISTS(k,a,b,!(cond)))
#define FOLD0(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(; k LS (b); ++k) {act;}, R##k)
#define SUMTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k += (x))
#define SUM(k,a,b,x) SUMTO(k,a,b,(__typeof(x)) (0), x)
#define PRODTO(k,a,b,init,x) FOLD0(k,a,b,init,R##k *= (x))
#define PROD(k,a,b,x) PRODTO(k,a,b,(__typeof(x)) (1), x)
#define MAXTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k >?= (x))
#define MINTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k <?= (x))
#define QXOR(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (0), R##k ^= x)
#define QAND(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (-1), R##k &= x)
#define QOR(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (-1), R##k |= x)
#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(++k; k LS (b); ++k) act, R##k)
#define MAX(k,a,b,x) FOLD1(k,a,b,x, R##k >?= (x))
#define MIN(k,a,b,x) FOLD1(k,a,b,x, R##k <?= (x))
#define FIRSTMIN(k,a,b,x) (MIN(k,a,b,make_pair(x,k)).second)

int bitc(ll r) {return r == 0 ? 0 : (bitc(r>>1) + (r&1));}
ll gcd(ll x, ll y) {return x ? gcd(y%x,x) : y;}

// template<class T> T& operator >?= (T& x, T y) {if(y>x) x=y; return x;}
// template<class T> T& operator <?= (T& x, T y) {if(y<x) x=y; return x;}
// template<class T> T operator >? (T x, T y) {return x>y?x:y;}
// template<class T> T operator <? (T x, T y) {return x<y?x:y;}

#define Pa(xy) ((xy).first)
#define Ir(xy) ((xy).second)

string cts(char c) {string s=""; s+=c; return s;}

/// ----

#define BUFSIZE 1000000
char buf[BUFSIZE];

#ifdef DEBUG
#define DEB(x) x
#else
#define DEB(x)
#endif

string getLine() {
  string s;
  while(!feof(stdin)) {
    char c = fgetc(stdin);
    if(c == 13) continue;
    if(c == 10) return s;
    s += c;
    }
  return s;
  }

int getNum() {
  string s = getLine();
  return atoi(s.c_str());
  }

vi parsevi(string s) {
  s = s + " ";
  int q = 0;
  bool minus = false;
  vi res;
  FOR(l,0, Size(s)) {
    if(s[l] == ' ') { res.push_back(minus?-q:q); q = 0; minus = false;}
    else if(s[l] == '-') { minus = true; }
    else { q = q * 10 + s[l] - '0'; }
    }
  return res;
  }

int Tests, cnum;

//Eryx

// !FDI

int N, M;

ll x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;

int tab1[1000005], tab2[1000005];

map<int, int> hashes;

int gethash(int v) {
  if(hashes.count(v)) return hashes[v];
  return hashes[v] = rand();
  }
  
struct quickset {
  set<int> colors;
  int hash1, hash2, hash3;
  quickset() { hash1 = hash2 = hash3 = 0; }
  };

bool has(quickset& q, int i) { return q.colors.count(i); }
void push(quickset& q, int i) {
  q.colors.insert(i);
  q.hash1 += i;
  q.hash2 += (i+1)*(i+2);
  q.hash3 += gethash(i);
  }

void solveCase() {
  scanf("%d%d", &N, &M);
  scanf("%Ld%Ld%Ld%Ld%Ld\n", &x1, &a1, &b1, &c1, &r1);
  scanf("%Ld%Ld%Ld%Ld%Ld\n", &x2, &a2, &b2, &c2, &r2);
  tab1[0] = x1; tab2[0] = x2;
  for(int i=1; i<N || i<M; i++) {
    if(i<N)
      tab1[i] = (a1 * tab1[(i-1) % N] + b1 * tab2[(i-1) % M] + c1) % r1;
    if(i<M)
      tab2[i] = (a2 * tab1[(i-1) % N] + b2 * tab2[(i-1) % M] + c2) % r2;
    }
/*FOR(u,0,N) printf("%d ", tab1[u]); printf("\n");
  FOR(u,0,M) printf("%d ", tab2[u]); printf("\n");*/
  
  quickset q1;
  quickset q2;
  
  tab1[N] = -1; tab2[M] = -1;
  
  int p1 = 0, p2 = 0;
  
  ll score = 0;
  
  while(p1 < N && p2 < M) {
    push(q1, tab1[p1]); push(q2, tab2[p2]);
    int sp1 = p1, sp2 = p2;
    while(has(q1, tab1[p1])) p1++;
    while(has(q2, tab2[p2])) p2++;
    if(q1.hash1 == q2.hash1 && q1.hash2 == q2.hash2 && q1.hash3 == q2.hash3)
      score += (p1-sp1) * ll(p2-sp2);
    }
  printf("Case #%d: %Ld\n", cnum, score);
  }

int main() {

  srand(0);
  if(0)
    Tests = 1;
  else if(1)
    scanf("%d\n", &Tests);
  else {
    string Nstr = getLine();
    Tests = atoi(Nstr.c_str());
    }
  
  for(cnum=1; cnum<=Tests; cnum++)
    solveCase();
    
  // finish
  return 0;
  }

// This solution includes hidden routines to solve test cases in separate
// processes in order to make it faster. I will update them to run on a
// cluster if I get one ;)

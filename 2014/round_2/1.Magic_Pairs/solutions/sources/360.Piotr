#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <cassert>
#include <cstring>
#include <ext/numeric>
using namespace std ;
using namespace __gnu_cxx ;
typedef long long LL ;
const int INF = 1000*1000*1000 ;
const LL INFLL = (LL)INF * (LL)INF ;
#define REP(i,n) for(i=0;i<(n);++i)
#define ALL(c) c.begin(),c.end()
#define VAR(v,i) __typeof(i) v=(i)
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define CLEAR(t) memset(t,0,sizeof(t))
#define PB push_back
#define MP make_pair
#define FI first
#define SE second
#include <climits>
using namespace std;

using namespace std;
long long t,N,M,x[3],a[3],b[3],c[3],r[3],Board1[1000*1000+5] ,Board2[1000*1000+5],poz1,poz2,zle ,i;
long long il1,il2,wyn;
map<int,int> ma;
int main(){
    //cout<<"KK"<<endl;
    ios_base::sync_with_stdio(0);
    cin>>t;
    for(int ca=1;ca<=t;ca++){
        //cout<<"YY"<<endl;
        cin>>N>>M;
        for(int i=1;i<=2;i++)
            cin>>x[i]>>a[i]>>b[i]>>c[i]>>r[i];
        Board1[0] = x[1];
        Board2[0] = x[2];
        //cout<<"YY"<<endl;
        for(i=1;i<max(N,M);i++){
            Board1[i] = (a[1] * Board1[(i-1) % N] + b[1] * Board2[(i-1) % M] + c[1]) % r[1];
            Board2[i] = (a[2] * Board1[(i-1) % N] + b[2] * Board2[(i-1) % M] + c[2]) % r[2];
        }
        Board1[N]=-1;
        Board2[M]=-2;
        poz1=0;
        poz2=0;
        ma.clear();
        zle=0;
        if(x[1]!=x[2])
            zle=1;
        ma[Board1[poz1]]|=1;
        ma[Board2[poz2]]|=2;
        wyn=0;
        //cout<<"xx"<<endl;
        for(i=0;;i++){
            //cout<<"poz1: "<<poz1<<" poz2: "<<poz2<<" zle: "<<zle<<endl;
            il1=0;
            il2=0;
            while(ma[Board1[poz1]]&1 &&ma.count(Board1[poz1])>0){
                poz1++;il1++;}
            while(ma[Board2[poz2]]&2 &&ma.count(Board2[poz2])>0){
                poz2++;il2++;}
            if(!zle)    
                wyn+=il1*il2;
            //cout<<"b1: "<<Board1[poz1]<<" b2: "<<Board2[poz2]<<endl;
            if(ma.count(Board1[poz1])>0){
                if(ma[(Board1[poz1])]==2){
                zle--;
                //cout<<"zle--;"<<endl;
                ma[Board1[poz1]]|=1;
                }else
                ma[Board1[poz1]]=1;
            }else
                ma[Board1[poz1]]=1;
            if(ma.count(Board2[poz2])>0){
                if(ma[(Board2[poz2])]!=0){
                ma[Board2[poz2]]|=2;
                }else{
                ma[Board2[poz2]]=2;
                zle++;
                //cout<<"zle++;"<<endl;
            }
                    
            }else{
                ma[Board2[poz2]]=2;
                zle++;
                //cout<<"zle++;"<<endl;
            }
            if(Board1[poz1]==-1||Board2[poz2]==-2) 
                break;
            
        }
        
        cout<<"Case #"<<ca<<": "<<wyn<<endl;
    }
    ////cout<<sum<<endl;
}
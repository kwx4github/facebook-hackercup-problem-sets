#include <bits/stdc++.h>
using namespace std;

struct gen {
	long long x,a,b,c,r;};

int main() {
	cin.sync_with_stdio(0);
	int T;
	cin >> T;
	for(int t =0; t < T; t++) {
		int N,M;
		cin >> N >> M;
		gen Gn,Gm;
		cin >> Gn.x >> Gn.a >> Gn.b >> Gn.c >> Gn.r;
		cin >> Gm.x >> Gm.a >> Gm.b >> Gm.c >> Gm.r;
		vector<long long> Bn(N), Bm(M);
		Bn[0] =Gn.x, Bm[0] =Gm.x;
		for(int i =1; i < min(N,M); i++) {
			Bn[i] =(Bn[i-1]*Gn.a+Bm[i-1]*Gn.b+Gn.c)%Gn.r;
			Bm[i] =(Bn[i-1]*Gm.a+Bm[i-1]*Gm.b+Gm.c)%Gm.r;}
		for(int i =N; i < M; i++) Bm[i] =(Bn[(i-1)%N]*Gm.a+Bm[i-1]*Gm.b+Gm.c)%Gm.r;
		for(int i =M; i < N; i++) Bn[i] =(Bn[i-1]*Gn.a+Bm[(i-1)%M]*Gn.b+Gn.c)%Gn.r;

		long long ans =0;
		int a =0, b =0;
		set<long long> Cn, Cm;
		for(int i =0; i < N; i++) {
			if(Cn.find(Bn[i]) != Cn.end()) {
				ans +=max(0,b-a+1);
				continue;}
			Cn.insert(Bn[i]);
			while(a < M && Cm.find(Bn[i]) == Cm.end()) {
				Cm.insert(Bm[a]);
				a++;}
			while(b < M && Cn.find(Bm[b]) != Cn.end()) b++;
			ans +=max(0,b-a+1);}
		cout << "Case #" << t+1 << ": " << ans << "\n";}
	return 0;}

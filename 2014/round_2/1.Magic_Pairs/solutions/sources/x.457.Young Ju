#include <vector>
#include <map>
#include <set>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <string>
#include <cctype>
#include <cstring>
#include <queue>
#include <cassert>
#include <ctime>
#include <iostream>
#include <cassert>

using namespace std;

typedef long long LL;
typedef long double LD;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector <VI> VVI;

#define MP make_pair
#define ST first
#define ND second
#define PB push_back
#define FOR(i,a,b) for( int i=(a); i<=(b); ++i)
#define FORD(i,a,b) for( int i=(a); i>=(b); --i)
#define REP(i,n) for(int i=0; i<(n); ++i)
#define ALL(X) (X).begin(),(X).end()
#define SZ(X) (int)(X).size()
#define FORE(it,X) for(__typeof((X).begin()) it=(X).begin(); it!=(X).end();++it)

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))
#define CE cout << endl;
#define CL cout << "--------------------------------------" << endl;
#define ASF assert(false);
#define V vector

ostream & operator << (ostream &out, const VI A)
{
  REP(i, A.size()) out << A[i] << " ";
  return out;
}
template<class T> void mini(T &a, const T &b) {if(b<a)a=b;}
template<class T> void maxi(T &a, const T &b) {if(b>a)a=b;}

LL solve();

int main()
{
  int T;
  cin >> T;
  REP(i, T) cout << "Case #" << i+1 << ": " << solve() << endl;
  return 0;
}

LL solve()
{
  LL ans = 0;
  LL N, M;
  set <LL> A[2], B; // A : 1 only, B : common
  VLL C[2];
  cin >> N >> M;
  C[0].resize(5);
  C[1].resize(5);
  REP(i, 2) REP(j, 5) cin >> C[i][j];
  deque <pair <LL, LL> > D;
  D.PB(MP(C[0][0], C[1][0]));
  if(D[0].ST == D[0].ND) {
    B.insert(D[0].ST);
//    cout << "0 0" << endl; ans++;
  }
  else{
    A[0].insert(D[0].ST);
    A[1].insert(D[0].ND);
  }

  /*
   *REP(i, 10) D.PB(MP( 
   *      (C[0][1] * D.back().ST + C[0][2] * D.back().ND + C[0][3]) % C[0][4],
   *      (C[1][1] * D.back().ST + C[1][2] * D.back().ND + C[1][3]) % C[1][4]
   *      ));
   *REP(i, D.size()) cout << D[i].ST << " " << D[i].ND << endl;
   *return false;
   */
  /*
   *printf("\t\ti %d -> %lld\n", 0, D.front().ST);
   *printf("\t\t\t\tj %d -> %lld\n", 0, D.front().ND);
   */


  LL i, j, k;
  i=1;
  j=1;
  bool t1, t2;
  t1 = false;
  t2 = false;
  while(i < N or j < M)
  {
    bool chk = true;
    while(i < N and (t1 or j == M or not A[1].empty()))
    {
      t1 = false;
      chk = false;
      if(A[1].empty()) {
        /*
         *cout << i-1 << " " << j-1 << endl;
         */
        ans++;
      }
      LL newX;
      if(i >= j) {
        D.PB(MP( 
              (C[0][1] * D.back().ST + C[0][2] * D.back().ND + C[0][3]) % C[0][4],
              (C[1][1] * D.back().ST + C[1][2] * D.back().ND + C[1][3]) % C[1][4]
              ));
        newX = D.back().ST;
      }
      else {
        D.pop_front();
        newX = D.front().ST;
      }

      /*
       *printf("\t\ti %lld -> %lld\n", i, newX);
       */
      if(A[1].find(newX) != A[1].end())
      {
        B.insert(newX);
        A[1].erase(newX);
      }
      else if(B.find(newX) == B.end())
        A[0].insert(newX);
      i++;
    }  
    while(j < M and (t2 or i==N or not A[0].empty()))
    {
      chk = false;
      t2 = false;
      if(A[0].empty()) {
        /*
         *cout << i-1 << " " << j-1 << endl;
         */
        ans++;
      }
      LL newY;
      if(j >= i) {
        D.PB(MP( 
              (C[0][1] * D.back().ST + C[0][2] * D.back().ND + C[0][3]) % C[0][4],
              (C[1][1] * D.back().ST + C[1][2] * D.back().ND + C[1][3]) % C[1][4]
              ));
        newY = D.back().ND;
      }
      else {
        D.pop_front();
        newY = D.front().ND;
      }
      
      //printf("\t\t\t\tj %lld -> %lld\n", j, newY);

      if(A[0].find(newY) != A[0].end())
      {
        A[0].erase(newY);
        B.insert(newY);
      }
      else if(B.find(newY) == B.end())
        A[1].insert(newY);
      j++;
    }

//    if(A[0].empty() and A[1].empty())
    if(chk)
    {
      LL newX = (C[0][1] * D.back().ST + C[0][2] * D.back().ND + C[0][3]) % C[0][4];
      LL newY = (C[1][1] * D.back().ST + C[1][2] * D.back().ND + C[1][3]) % C[1][4];
      if(A[1].find(newX) == A[1].end() and i<N)
        t1 = true;
      else
        t2 = true;
    }

  }

  if(A[0].empty() and A[1].empty()) {
    /*
     *cout << i-1 << " " << j-1 << endl;
     */
    ans++;
  }

  return ans;
}


#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>

using namespace std;

#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define fori(i, l, r) fore(i, l, (r) + 1)
#define forn(i, n) fore(i, 0, n)
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define pb push_back
#define mp make_pair
#define X first
#define Y second

#if ( _WIN32 || __WIN32__ )
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)1E9 + 7;
const ld EPS = 1E-9;
const ld PI = 3.1415926535897932384626433832795;

const int NMAX = 4000000;

int n[2], b[2][NMAX];

void gen(){
    li N, M, x1, x2, a1,  a2,  b1,  b2,  c1,  c2,  r1,  r2;
    cin >> N >> M;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    
    n[0] = (int)N, n[1] = (int)M;
    
    b[0][0] = (int)x1;
    b[1][0] = (int)x2;
    fore(i, 1, max(N, M)){
        if(i < N)
            b[0][i] = (int)((a1 * b[0][(i-1) % N] + b1 * b[1][(i-1) % M] + c1) % r1);
        if(i < M)
            b[1][i] = (int)((a2 * b[0][(i-1) % N] + b2 * b[1][(i-1) % M] + c2) % r2);
    }
}

const int MOD = 4;
li mod[] = {1000000000 + 37, 1000000000 + 9, 1000000000 + 91, 1000000000 + 7};
li stA[MOD][NMAX];

void init(){
    forn(m, MOD){
        stA[m][0] = 1 % mod[m];
        fore(i, 1, NMAX){
            stA[m][i] = (stA[m][i - 1] * li(3000031)) % mod[m];
        }
    }
}

li t[MOD][NMAX];
int used[NMAX];

void add(int p, int val){
    forn(m, MOD){
        li x = (val * stA[m][p]) % mod[m];
        for(; p < NMAX; p = (p | (p + 1))){
            t[m][p] += x;
            t[m][p] %= mod[m];
        }
    }
}

li sum(int m, int r){
    li ans = 0;
    for(; r >= 0; r = (r & (r + 1)) - 1){
        ans += t[m][r];
        ans %= mod[m];
    }
    return ans;
}

void solve(){
    gen();
    
    map<int, int> ids;
    forn(id, 2){
        forn(i, n[id]){
            if(ids.count(b[id][i]) == 0){
                int cur = sz(ids);
                ids[b[id][i]] = cur;
            }
            b[id][i] = ids[b[id][i]];
        }
    }
    
    map<vector<int>, li> cnt[2];
    forn(id, 2){
        memset(t, 0, sizeof t);
        memset(used, 0, sizeof used);
        
        forn(i, n[id]){

            if(!used[b[id][i]]){
                used[b[id][i]] = true;
                add(b[id][i], 1);
            }
            
            vector<int> cur(MOD);
            forn(m, MOD){
                cur[m] = (int)sum(m, NMAX - 1);
            }
        
            cnt[id][cur]++;
        }
    }
    
    li ans = 0;
    for(map<vector<int>, li>::iterator it = cnt[0].begin(); it != cnt[0].end(); it++){
        ans += it->Y * cnt[1][it->X];
    }
    
    cout << ans << endl;
}

int main() {
    #ifdef ssu1
    freopen("input.txt", "rt", stdin);
//    freopen("output.txt", "wt", stdout);
    #endif
    
    init();

    int tcases;
    cin >> tcases;
    fori(i, 1, tcases){
        printf("Case #%d: ", i);
        
        solve();
        
        fprintf(stderr, "\n-- Time for case %d = %d\n\n", i, (int)clock());
    }

    return 0;
}



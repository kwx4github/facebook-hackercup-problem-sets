from operator import itemgetter
from collections import OrderedDict
from bisect import bisect_left
from bisect import bisect_right

def rint():
    return int(raw_input())


def solve():
    (N, M) = map(int, raw_input().split())
    (x1, a1, b1, c1, r1) = map(int, raw_input().split())
    (x2, a2, b2, c2, r2) = map(int, raw_input().split())

    board1 = [0] * N
    board2 = [0] * M
    diff1 = [0] * N
    diff2 = [0] * M
    s1 = set([x1])
    s2 = set([x2])
    board1[0] = x1
    board2[0] = x2
    diff1[0] = 1
    diff2[0] = 1
    for i in range(1, max(N, M)):
        if i < N:
            board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1
            s1.add(board1[i])
            diff1[i] = len(s1)
        if i < M:
            board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2
            s2.add(board2[i])
            diff2[i] = len(s2)

    sum = 1 if board1[0] == board2[0] else 0
    s1 = set([board1[0]])
    s2 = set([board2[0]])
    last_ok = (sum == 1)
    for i in range(2, min(diff1[N-1], diff2[M-1]) + 1):
        pos1 = bisect_left(diff1, i)
        pos2 = bisect_left(diff2, i)
        # print pos1, pos2
        new1 = board1[pos1]
        new2 = board2[pos2]
        # print new1, new2
        s1.add(new1)
        s2.add(new2)
        if (last_ok and new1 == new2) or (s1 == s2):
            # print s1, s2
            sum += (bisect_right(diff1, i) - pos1) * (bisect_right(diff2, i) - pos2)
            last_ok = True
        else:
            last_ok = False

    return sum

T = rint()
for idx in range(T):
    print 'Case #%d: %s' % (idx+1, solve())

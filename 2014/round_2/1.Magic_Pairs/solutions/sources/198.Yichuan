#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <set>
using namespace std;
const int maxn = 1000010;
int T, n, m;
long long f1[maxn], f2[maxn];
int g1[maxn], g2[maxn];
long long x1, a1, b1, c1, r1;
long long x2, a2, b2, c2, r2;
set<long long> s;

void change(long long x)
{
	if (s.find(x) == s.end())
		s.insert(x);
	else s.erase(x);
}

int main()
{
	freopen("_magic_pairs.txt", "r", stdin);
//	freopen("magic_pairs_output.txt", "w", stdout);
	scanf("%d", &T);
	for (int ca = 1; ca <= T; ca++)
	{
		scanf("%d%d", &n, &m);
		scanf("%lld%lld%lld%lld%lld", &x1, &a1, &b1, &c1, &r1);
		scanf("%lld%lld%lld%lld%lld", &x2, &a2, &b2, &c2, &r2);
		f1[0] = x1;
		f2[0] = x2;
		for (int i = 1; i < n || i < m; i++)
		{
			if (i < n)
				f1[i] = (a1 * f1[(i - 1) % n] + b1 * f2[(i - 1) % m] + c1) % r1;
			if (i < m)
				f2[i] = (a2 * f1[(i - 1) % n] + b2 * f2[(i - 1) % m] + c2) % r2;
		}
		memset(g1, -1, sizeof(g1));
		memset(g2, -1, sizeof(g2));
//		for (int i = 0; i < n; i++) cout << f1[i] << " "; cout << endl;
//		for (int i = 0; i < m; i++) cout << f2[i] << " "; cout << endl;
		s.clear();
		g1[0] = 1;
		s.insert(f1[0]);
		for (int i = 1; i < n; i++)
			if (s.find(f1[i]) != s.end())
				g1[i] = g1[i - 1];
			else
			{
				g1[i] = g1[i - 1] + 1;
				s.insert(f1[i]);
			}
		g1[n] = g1[n - 1] + 1;
		s.clear();
		g2[0] = 1;
		s.insert(f2[0]);
		for (int i = 1; i < m; i++)
			if (s.find(f2[i]) != s.end())
				g2[i] = g2[i - 1];
			else
			{
				g2[i] = g2[i - 1] + 1;
				s.insert(f2[i]);
			}
		g2[m] = g2[m - 1] + 1;
//		for (int i = 0; i < n; i++) cout << g1[i] << " "; cout << endl;
//		for (int i = 0; i < m; i++) cout << g2[i] << " "; cout << endl;
		s.clear();
		long long j1 = -1, j2 = -1;
		long long k1 = 0, k2 = 0;
		long long ans = 0;
		for (int i = 1; k1 < n && k2 < m; i++)
		{
			change(f1[k1]);
			change(f2[k2]);
			j1 = k1;
			j2 = k2;
			while (g1[k1] == i) k1++;
			while (g2[k2] == i) k2++;
			if (s.empty()) ans += (k1 - j1) * (k2 - j2);
		}
		printf("Case #%d: %lld\n", ca, ans);
	}
	return 0;
}

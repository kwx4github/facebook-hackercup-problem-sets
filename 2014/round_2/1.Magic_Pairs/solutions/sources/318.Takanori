#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <sstream>
#include <tuple>
#include <typeinfo>
#include <unordered_set>
#include <unordered_map>
#include <vector>
using namespace std;

#define REP2(i, m, n) for(int i = (int)(m); i < (int)(n); i++)
#define REP(i, n) REP2(i, 0, n)
#define ALL(c) (c).begin(), (c).end()
#define PB(e) push_back(e)
#define FOREACH(i, c) for(auto i = (c).begin(); i != (c).end(); ++i)
#define MP(a, b) make_pair(a, b)
#define BIT(n, m) (((n) >> (m)) & 1)

typedef long long ll;

const ll inf = 1e15;
const ll mod = 1000 * 1000 * 1000 + 7;

// vector<ll> calc(const vector<ll> &vec){
//     vector<ll> ret;
//     set<ll> used;
//     size_t pos = 0;
    
//     while(pos < vec.size()){
//         size_t last = pos;
//         while(pos < vec.size() && used.count(vec[pos])) pos++;
//         ret.push_back(pos - last);
//         if (pos < vec.size()) used.insert(vec[pos]);
//     }
    
//     return ret;
// }

vector<ll> compress(vector<ll> &vec){
    set<ll> used;
    
    int m = 0;
    int weight = 0;
    vector<ll> count;

    REP(i, vec.size()){
        if (!used.count(vec[i])){
            count.push_back(weight);
            used.insert(vec[i]);
            vec[m++] = vec[i];
            weight = 1;
        } else {
            weight++;
        }
    }
    count.push_back(weight);
    vec.resize(m);
    return count;
}

void solve(){
    int N, M;
    ll x[2], a[2], b[2], c[2], r[2];
    cin >> N >> M;
    REP(i, 2) cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];

    int L = max(N, M);
    vector<ll> board0(L);
    vector<ll> board1(L);
    board0[0] = x[0];
    board1[0] = x[1];
    REP(i, L - 1){
        board0[i + 1] = (a[0] * board0[i % N] + b[0] * board1[i % M] + c[0]) % r[0];
        board1[i + 1] = (a[1] * board0[i % N] + b[1] * board1[i % M] + c[1]) % r[1];
    }
    
    board0.resize(N);
    board1.resize(M);
    vector<ll> count0 = compress(board0);
    vector<ll> count1 = compress(board1);
    assert(board0.size() + 1 == count0.size());
    int n = board0.size();
    int m = board1.size();
    int pos0 = 0,pos1 = 0;
    set<ll> set0, set1;
    ll  res  = 0;
    int A0 = 0, A1 = 0;
    
    while(pos0 < n && pos1 < m){
        if (A0 == 0 && A1 == 0)  res += count0[pos0] * count1[pos1];
        if (set0.size() < set1.size()){
            ll v = board0[pos0++];
            if (set1.count(v)) A1--;
            else A0++;
            set0.insert(v);
        } else {
            ll v = board1[pos1++];
            if (set0.count(v)) A0--;
            else A1++;
            set1.insert(v);
        }
    }
    
    while(pos0 < n){
        if (A0 == 0 && A1 == 0 ) res += count0[pos0] * count1[pos1];
        ll v = board0[pos0++];
        if (set1.count(v)) A1--;
        else A0++;
        set0.insert(v);
    }
    
    while(pos1 < m){
        if (A0 == 0 && A1 == 0) res += count0[pos0] * count1[pos1];
        ll v = board1[pos1++];
        if (set0.count(v)) A0--;
        else A1++;
        set1.insert(v);
    }
    if (A0 == 0 && A1 == 0) res += count0[pos0] * count1[pos1];
    
    cout << res << endl;
};
 
int main(){
    int T;
    cin >> T;
    REP(t, T){
        cerr << "CASE: " << t + 1 << endl;
        cout << "Case #" << t + 1 << ": ";
        solve();
    }
    return 0;
}

#include <cstdio>
#include <vector>
#include <algorithm>
#include <limits>
#include <set>
#include <map>

using namespace std;

int mul(int a, int b, int m) {
  long long aa = a;
  long long bb = b;
  return (aa * bb) % m;
}

int getm(const map<int, int>& m, int v) {
  auto it = m.find(v);
  if (it == m.end())
    return -1;
  else
    return it->second;
}

void printvec(const vector<int>& b) {
  for (int i = 0; i < int(b.size()); i++) {
    printf("%d ", b[i]);
  }
  printf("]\n");
}

int main() {
  int tot;
  scanf("%d", &tot);
  for (int t = 1; t <= tot; t++) {
    int n,m;
    int x1,a1,b1,c1,r1;
    int x2,a2,b2,c2,r2;
    scanf("%d %d", &n, &m);
    scanf("%d %d %d %d %d", &x1, &a1, &b1, &c1, &r1);
    scanf("%d %d %d %d %d", &x2, &a2, &b2, &c2, &r2);
    vector<int> board1;
    vector<int> board2;
    board1.push_back(x1);
    board2.push_back(x2);
    for (int i = 1; i < max(n,m); i++) {
      if (i < n) board1.push_back((mul(a1, board1[(i+n-1)%n], r1) + 
                        mul(b1, board2[(i+m-1)%m], r1) + 
                        c1)%r1);
      if (i < m) board2.push_back((mul(a2, board1[(i+n-1)%n], r2) + 
                        mul(b2, board2[(i+m-1)%m], r2) + 
                        c2)%r2);
    }
    vector<bool> new1(n, false), new2(m, false);
    map<int, int> m1, m2;
    for (int i = 0; i < n; i++) {
      auto it = m1.find(board1[i]);
      if (it == m1.end()) {
        m1[board1[i]] = i;
        new1[i] = true;
      }
    }
    for (int i = 0; i < m; i++) {
      auto it = m2.find(board2[i]);
      if (it == m2.end()) {
        m2[board2[i]] = i;
        new2[i] = true;
      }
    }
    //printvec(board1);
    //printvec(board2);
    long long int ans = 0;
    int pos1 = 0, pos2 = 0;
    int used1 = 0, used2 = 0;
    for (; pos1 < n;) {
      while (true) {
        if (getm(m2,board1[pos1])==-1) goto label_exit;
        if (getm(m1,board2[pos2])==-1) goto label_exit;
        pos1 = max(pos1, getm(m2,board1[pos1]));
        pos2 = max(pos2, getm(m1,board2[pos2]));
        for (int i = used1; i <= pos1; i++) {
          if (getm(m2,board1[i])==-1) goto label_exit;
          if (getm(m2,board1[i]) > pos2) {
            pos2 = m2[board1[i]];
          }
        }
        for (int i = used2; i <= pos2; i++) {
          if (getm(m1,board2[i])==-1) goto label_exit;
          if (getm(m1,board2[i]) > pos1) {
            pos1 = m1[board2[i]];
          }
        }
        if (used1 == pos1 && used2 == pos2) {
          break;
        }
        used1 = pos1;
        used2 = pos2;
      };
      //printf("%d %d > ", pos1, pos2);
      int count1 = 1, count2 = 1;
      for (pos1++; pos1 < n && !new1[pos1]; pos1++) {
        count1++;
      }
      for (pos2++; pos2 < m && !new2[pos2]; pos2++) {
        count2++;
      }
      ans += (long long) (count1) * count2;    
      //printf("%d %d\n", pos1, pos2);
    }
    label_exit:
    printf("Case #%d: %Ld\n", t, ans);
  }
}

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

import org.psjava.util.Pair;
import org.psjava.util.ZeroTo;

public class A implements Runnable {

	@Override
	public void run() {
		Scanner in = new Scanner(System.in);
		int casen = in.nextInt();
		for (int casei : ZeroTo.get(casen)) {
			int n = in.nextInt();
			int m = in.nextInt();
			long x1 = in.nextInt();
			long a1 = in.nextInt();
			long b1 = in.nextInt();
			long c1 = in.nextInt();
			long r1 = in.nextInt();
			long x2 = in.nextInt();
			long a2 = in.nextInt();
			long b2 = in.nextInt();
			long c2 = in.nextInt();
			long r2 = in.nextInt();
			boolean alwaysEquals = x1 == x2 && (a1 == a2 && b1 == b2 || a1 == b2 && a2 == b1) && c1 == c2 && r1 == r2;

			long[] board1 = new long[n];
			long[] board2 = new long[m];
			board1[0] = x1;
			board2[0] = x2;
			for (int i = 1; i < n || i < m; i++) {
				if (i < n)
					board1[i] = (a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
				if (i < m)
					board2[i] = (a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;
			}

			Set<Integer> s1 = new HashSet<Integer>();
			Set<Integer> s2 = new HashSet<Integer>();

			int i1 = 0;
			int i2 = 0;
			int hash1 = 0;
			int hash2 = 0;
			long r = 0;
			for (int size = 1; i1 < n && i2 < m; size++) {
				Pair<Integer, Integer> nextIndexAndHash1 = extendsSetAndGetNextIndexAndHash(board1, i1, size, s1, hash1);
				Pair<Integer, Integer> nextIndexAndHash2 = extendsSetAndGetNextIndexAndHash(board2, i2, size, s2, hash2);
				if (nextIndexAndHash1 == null || nextIndexAndHash2 == null)
					break;
				int ni1 = nextIndexAndHash1.v1;
				int ni2 = nextIndexAndHash2.v1;
				int nhash1 = nextIndexAndHash1.v2;
				int nhash2 = nextIndexAndHash2.v2;
				if (alwaysEquals || nhash1 == nhash2 && s1.equals(s2))
					r += (long) (ni1 - i1) * (long) (ni2 - i2);
				i1 = nextIndexAndHash1.v1;
				hash1 = nextIndexAndHash1.v2;
				i2 = nextIndexAndHash2.v1;
				hash2 = nextIndexAndHash2.v2;
			}
			System.out.format("Case #%d: %d\n", casei + 1, r);
		}
	}

	private Pair<Integer, Integer> extendsSetAndGetNextIndexAndHash(long[] board, int index, int targetSize, Set<Integer> set, int setHash) {
		while (set.size() < targetSize) {
			if (index >= board.length)
				return null;
			int v = (int) board[index++];
			if (!set.contains(v)) {
				setHash = setHash ^ v;
				set.add(v);
			}
		}
		while (index < board.length) {
			int v = (int) board[index];
			if (!set.contains(v))
				break;
			index++;
		}
		return Pair.create(index, setHash);
	}

	public static void main(String[] args) throws Exception {
		System.setIn(new BufferedInputStream(new FileInputStream("_magic_pairs.txt")));
		new A().run();
	}

}

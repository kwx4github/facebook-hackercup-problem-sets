/* --- Author: Vladimir Smykalov, enot.1.10@gmail.com --- */
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <ctime>
#include <cassert>

#define fs first
#define sc second
#define pb push_back
#define mp make_pair
#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)
#define forit(it,v) for(typeof((v).begin()) it = v.begin() ; it != (v).end() ; ++it)
#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(),a.end()

using namespace std;

typedef long long ll;
typedef double ld;
typedef vector<int> vi;
typedef pair<int, int> pi;

const int inf = (int)1e9;
const ld eps = 1e-9;

/* --- main part --- */

#define TASK "a"

const int maxn = (int)1e6 + 10;

int a[2][maxn];

pi e[2][maxn];
int ec[2];

set<int> S;

inline void xoradd(int x)
{
    if (S.find(x) == S.end())
    {
        S.insert(x);
    }
    else
    {
        S.erase(x);
    }
}

void solve()
{
    eprintf("next test\n");
    int N, M;
    scanf("%d%d", &N, &M);
    int x1, a1, b1, c1, r1;
    scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
    int x2, a2, b2, c2, r2;
    scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
    int n[2] = {N, M};
    a[0][0] = x1;
    a[1][0] = x2;
    for (int i = 1; i < max(N, M); ++i)
    {
        a[0][i] = (a[0][(i - 1) % N] * (ll)a1 + a[1][(i - 1) % M] * (ll)b1 + c1) % r1;
        a[1][i] = (a[0][(i - 1) % N] * (ll)a2 + a[1][(i - 1) % M] * (ll)b2 + c2) % r2;
    }
    forn(_, 2)
    {
        set<int> s;
        ec[_] = 0;
        forn(i, n[_])
        {
            if (s.find(a[_][i]) == s.end())
            {
                e[_][ec[_]++] = mp(a[_][i], i);
                s.insert(a[_][i]);
            }
        }
        e[_][ec[_]++] = mp(-1, n[_]);
    }
    ll res = 0;
    int i = 0, j = 0;
    S.clear();
    while (i < ec[0] - 1)
    {                                                               
        xoradd(e[0][i].fs);
        while (S.find(e[0][i].fs) != S.end() && j < ec[1] - 1)
        {
            xoradd(e[1][j++].fs);
        }
        if (S.empty()) res += (e[0][i + 1].sc - e[0][i].sc) * (ll)(e[1][j].sc - e[1][j - 1].sc);
        i += 1;
    }
    printf("%I64d\n", res);
}

int main()
{
    #ifdef home
        assert(freopen(TASK".in", "r", stdin));
        assert(freopen(TASK".out", "w", stdout));
    #endif
    int tn;
    scanf("%d", &tn);
    forn(_, tn)
    {
        printf("Case #%d: ", _ + 1);
        solve();
    }
    #ifdef home
        eprintf("Time: %d ms\n", (int)(clock() * 1000. / CLOCKS_PER_SEC));
    #endif
    return 0;
}
 
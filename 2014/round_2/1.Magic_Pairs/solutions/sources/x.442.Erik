// compile with g++ with -std=c++0x flag

#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
#include <iostream>
#include <string>
#include <cstring>
#include <unordered_set>

using namespace std;

unsigned long long board1[1000001], board2[1000001];

inline bool contains(const unordered_set<int> &s, int e) {
  return s.find(e) != s.end();
}

int main() {
  int T;
  cin >> T;

  for (int t = 1; t <= T; t++) {
    unsigned long long N, M;
    cin >> N >> M;
    unsigned long long x1, x2, a1, a2, b1, b2, c1, c2;
    unsigned long long r1, r2;
    cin >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;

    board1[0] = x1;
    board2[0] = x2;
    for (int i = 1; i < N || i < M; i++) {
      if (i < N)
        board1[i] = (a1*board1[(i-1)%N] + b1*board2[(i-1)%M] + c1) % r1;
      if (i < M)
        board2[i] = (a2*board1[(i-1)%N] + b2*board2[(i-1)%M] + c2) % r2;
    }

    unsigned long long sol = 0;
    int i=0, j=0;
    unordered_set<int> extra1, extra2;
    unordered_set<int> common;
    while (i < N && j < M) {
      // i is on next item to add
      if (i < N)
        extra1.insert(board1[i++]);
      else
        extra2.insert(board2[j++]);
      while ((!extra1.empty() || !extra2.empty()) && (i < N || j < M)) {
        while (!extra1.empty() && j < M) {
          if (contains(common, board2[j]) || contains(extra2, board2[j])) {
          } else if (contains(extra1, board2[j])) {
            extra1.erase(board2[j]);
            common.insert(board2[j]);
          } else {
            extra2.insert(board2[j]);
          }
          j++;
        }
        while (!extra2.empty() && i < N) {
          if (contains(common, board1[i]) || contains(extra1, board1[i])) {
          } else if (contains(extra2, board1[i])) {
            extra2.erase(board1[i]);
            common.insert(board1[i]);
          } else {
            extra1.insert(board1[i]);
          }
          i++;
        }
      }

      if (extra1.empty() && extra2.empty()) {
        int match1=1, match2=1;
        while (i < N && contains(common, board1[i])) {
          i++;
          match1++;
        }
        while (j < M && contains(common, board2[j])) {
          j++;
          match2++;
        }
        sol += match1*match2;
      }
    }


    printf("Case #%d: %llu\n", t, sol);
  }

  return 0;
}

// 34 - 3 - 9 = 21
// 21 / 9 = 2
// 21 - 21/9*9 = 3


// l + l^2 + l^3 + ... l^k < N
// l ((p^(k-1) - 1) / (p-1))

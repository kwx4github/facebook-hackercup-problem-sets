#include <bits/extc++.h>
#include <iostream>

using namespace std;

//#define NDEBUG
#ifdef NDEBUG
#define DEBUG if (false)
#else
#define DEBUG if (true)
#endif
#define WRITE(x) DEBUG { cout << (x) << endl; }
#define WATCH(x) DEBUG { cout << #x << " = " << (x) << endl; }
typedef long long ll;

ll howMany(vector<ll>& a, vector<ll>& b)
{
	set<ll> only_a, only_b, both;
	ll counter = 0;

	int n = int(a.size());
	int m = int(b.size());

	int i = 0;
	int j = 0;

	while(i < n or j < m){
		while(not only_b.empty() and i < n){
			if(both.find(a[i]) == both.end()){
				if(only_b.find(a[i]) != only_b.end()){
					only_b.erase(a[i]);
					both.insert(a[i]);
				}else{
					only_a.insert(a[i]);
				}
			}
			i++;
		}
		if(not only_b.empty()) break;

		while(not only_a.empty() and j < m){
			if(both.find(b[j]) == both.end()){
				if(only_a.find(b[j]) != only_a.end()){
					only_a.erase(b[j]);
					both.insert(b[j]);
				}else{
					only_b.insert(b[j]);
				}
			}
			j++;
		}
		if(not only_a.empty()) break;

		if(only_a.empty() and only_b.empty()){
			ll same_a = 1;
			while(i < n and both.find(a[i]) != both.end()){
				i++;
				same_a++;
			}

			ll same_b = 1;
			while(j < m and both.find(b[j]) != both.end()){
				j++;
				same_b++;
			}

			counter += same_a * same_b;

			if(j < m)
				only_b.insert(b[j++]);
			else if(i < n)
				only_a.insert(a[i++]);
		}
	}

	return counter;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int ntc;
	cin >> ntc;
	for(int tc = 0; tc < ntc; tc++){
		ll n, m, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
		cin >> n >> m >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;

		vector<ll> a(n);
		vector<ll> b(m);
		a[0] = x1;
		b[0] = x2;
		for(int i = 1; i < max(n, m); i++){
			if(i < n){
				a[i] = (a1 * a[i - 1] + b1 * b[(i - 1 + m) % m] + c1) % r1;
			}

			if(i < m){
				b[i] = (a2 * a[(i - 1 + n) % n] + b2 * b[i - 1] + c2) % r2;
			}
		}
		//for(int i = 0; i < n; i++) cout << a[i] << ' '; cout << endl;
		//for(int i = 0; i < m; i++) cout << b[i] << ' '; cout << endl;


		ll sol = howMany(a, b) - 1;

		cout << "Case #" << (tc + 1) << ": " << sol << endl;
	}
}

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <set>
#include <cmath>
#include <algorithm>
#include <map>
#include <vector>

using namespace std;

typedef long long ll;
typedef long double ldb;

#define forab(i, a, b) for(int i = int(a); i < int(b); ++i)
#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define forba(i, b, a) for(int i = int(b) - 1; i >= int(a); --i)

const int MAXN = int(1e6) + 10;

int n, m;
ll a1, a2, b1, b2, c1, c2, r1, r2;

ll x1[MAXN], x2[MAXN];

map <int, int> q;
set<int> used[2];

int main()
{
    //freopen("", "r", stdin);
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int T;
    cin >> T;
    forn(t, T) {
        cerr << t << '\n';
        cin >> n >> m;
        cin >> x1[0] >> a1 >> b1 >> c1 >> r1;
        cin >> x2[0] >> a2 >> b2 >> c2 >> r2;
        forab(i, 1, max(n, m)) {
            x1[i] = (a1 * x1[(i - 1) % n] + b1 * x2[(i - 1) % m] + c1) % r1;
            x2[i] = (a2 * x1[(i - 1) % n] + b2 * x2[(i - 1) % m] + c2) % r2;
        }

        used[0].clear();
        used[1].clear();
        q.clear();
        ll ans = 0;
        used[0].insert(x1[0]);
        used[1].insert(x2[0]);


        if (x1[0] != x2[0]) {
            q[x1[0]] = 1;
            q[x2[0]] = -1;
        }

        int p1 = 1, p2 = 1;
        while (p1 < n && p2 < m) {
            if (q.size() == 0) {
                int old_p1 = p1, old_p2 = p2;
                while (p1 < n && used[0].count(x1[p1]))
                    p1++;
                if (p1 < n) {
                    used[0].insert(x1[p1]);
                    q[x1[p1]] = 1;
                    p1++;
                }
                while (p2 < m && used[1].count(x2[p2]))
                    p2++;
                if (p2 < m) {
                    used[1].insert(x2[p2]);
                    if (q[x2[p2]] == 1)
                        q.erase(x2[p2]);
                    else
                        q[x2[p2]] = -1;
                    p2++;
                }
                ans += ((ll)(p1 - old_p1)) * (p2 - old_p2);
            } else {
                while (q.size() > 0 && q.begin()->second > 0 && p2 < m) {
                    if (!used[1].count(x2[p2])) {
                        used[1].insert(x2[p2]);
                        if (q[x2[p2]] == 1)
                            q.erase(x2[p2]);
                        else
                            q[x2[p2]] = -1;
                    }
                    p2++;
                }
                while (q.size() > 0 && q.begin()->second < 0 && p1 < n) {
                    if (!used[0].count(x1[p1])) {
                        used[0].insert(x1[p1]);
                        if (q[x1[p1]] == -1)
                            q.erase(x1[p1]);
                        else
                            q[x1[p1]] = 1;
                    }
                    p1++;
                }
            }
        }

        while (q.size() > 0 && q.begin()->second > 0 && p2 < m) {
            if (!used[1].count(x2[p2])) {
                used[1].insert(x2[p2]);
                if (q[x2[p2]] == 1)
                    q.erase(x2[p2]);
                else
                    q[x2[p2]] = -1;
            }
            p2++;
        }
        while (q.size() > 0 && q.begin()->second < 0 && p1 < n) {
            if (!used[0].count(x1[p1])) {
                used[0].insert(x1[p1]);
                if (q[x1[p1]] == -1)
                    q.erase(x1[p1]);
                else
                    q[x1[p1]] = 1;
            }
            p1++;
        }

        if (q.size() == 0) {
            int old_p1 = p1, old_p2 = p2;
            while (p1 < n && used[0].count(x1[p1]))
                p1++;
            while (p2 < m && used[1].count(x2[p2]))
                p2++;
            ans += (p1 - old_p1) + (p2 - old_p2) + 1;
        }
        cout << "Case #" << t + 1 << ": ";
        cout << ans << '\n';
    }
    return 0;
}

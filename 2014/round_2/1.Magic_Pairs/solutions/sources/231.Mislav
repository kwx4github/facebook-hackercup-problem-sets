#include <cstdio>
#include <algorithm>
#include <set>
#include <cstring>
#include <vector>
#include <map>

using namespace std;

typedef long long llint;
typedef pair<int,int> par;
const int MAXN = 1000100;

llint a[MAXN], b[MAXN];

struct event {
    int tip, x, val, diff;
    event (int tip, int x, int val, int diff) : tip(tip), x(x), val(val), diff(diff) {}
};

bool operator < (const event &A, const event &B) {
    if (A.diff != B.diff) return A.diff < B.diff;
    return A.tip < B.tip;
}

vector<event> E;

void solve ()
{
    E.clear();
    int n, m;
    int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;

    scanf ("%d%d", &n, &m);
    scanf ("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
    scanf ("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);

    a[0] = x1;
    b[0] = x2;
    for (int i = 1; i < max(n, m); ++i) {
        a[i] = (a1 * a[(i-1)%n] + b1 * b[(i-1)%m] + c1) % r1;
        b[i] = (a2 * a[(i-1)%n] + b2 * b[(i-1)%m] + c2) % r2;
    }

    set <int> S;
    int diff = 0;
    for (int i = 0; i < n; ++i) {
        if (S.count(a[i])) {}
        else {
            S.insert(a[i]);
            ++diff;
            E.push_back( event(0, i, a[i], diff) );
        }
    }

    S.clear();
    diff = 0;
    for (int i = 0; i < m; ++i) {
        if (S.count(b[i])) {}
        else {
            S.insert(b[i]);
            ++diff;
            E.push_back( event(1, i, b[i], diff) );
        }
    }

    sort (E.begin(), E.end());

    map<int,int> M;
    int lasti = 0, lastj = 0, losi = 0;
    llint ans = 0;
    int kraji = n, krajj = m;
    for (vector<event>::iterator it = E.begin(); it != E.end(); it += 2) {
        if (it + 1 == E.end()) {
            if (it->tip == 0) kraji = it->x;
            else krajj = it->x;
            break;
        }
        if (it->tip == (it+1)->tip) {
            if (it->tip == 0) kraji = it->x;
            else krajj = it->x;
            break;
        }
        if (!losi) {
            ans += (llint)(lasti - it->x) * (lastj - (it+1)->x);
        }
        ++M[it->val];
        if (M[it->val] == 1) ++losi;
        if (M[it->val] == 2) --losi;
        ++M[(it+1)->val];
        if (M[(it+1)->val] == 1) ++losi;
        if (M[(it+1)->val] == 2) --losi;
        lasti = it->x;
        lastj = (it+1)->x;
    }
    if (!losi) ans += (llint) (kraji - lasti) * (krajj - lastj);

    printf ("%lld\n", ans);

}

int main (int argc, char *argv[])
{
    int No; scanf ("%d", &No);
    for (int i = 0; i < No; ++i) {
        if (argc == 1) printf ("Case #%d: ", i + 1);
        solve();
    }

    return 0;
}



#include <algorithm>
#include <cmath>
#include <climits>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <queue>
using namespace std;

typedef long long int64;
//typedef __int128_t int128;
typedef vector<int> veci;
typedef vector<string> vecs;

#define VAR(a, b) __typeof(b) a=(b)
#define FOREACH(it, c) for (VAR(it, (c).begin()); it != (c).end(); ++it)
#define TRACE(x) cout << #x << endl
#define DEBUG(x) cout << #x " = " << (x) << endl
#define DEBUGA(a, n) VAR(__p, a); cout << #a " = {"; for (int __i = 0; __i < n; ++__i, ++__p) cout << (__i == 0 ? "" : ", ") << *(__p); cout << "}" << endl
#define CLR(a, val) memset(a, val, sizeof(a))

template<class T1, class T2> ostream& operator << (ostream &o, const pair<T1, T2> &p)
{
  return o << "(" << p.first << ", " << p.second << ")";
}

template<class T> ostream& operator << (ostream &o, const vector<T> &v)
{
  o << '{';
  FOREACH(it, v) o << (it == v.begin() ? "" : ", ") << *it;
  return o << '}';
}

template<class T> ostream& operator << (ostream &o, const set<T> &v)
{
  o << '{';
  FOREACH(it, v) o << (it == v.begin() ? "" : ", ") << *it;
  return o << '}';
}

void run(int tc)
{
  int64 N, M;
  cin >> N >> M;
  vector<int64> board1(N), board2(M);

  int64 a1, b1, c1, r1;
  int64 a2, b2, c2, r2;
  cin >> board1[0] >> a1 >> b1 >> c1 >> r1;
  cin >> board2[0] >> a2 >> b2 >> c2 >> r2;
  for (int64 i = 1; i < max(N, M); i++) {
    if (i < N) board1[i] = (a1*board1[(i-1)%N] + b1*board2[(i-1)%M] + c1) % r1;
    if (i < M) board2[i] = (a2*board1[(i-1)%N] + b2*board2[(i-1)%M] + c2) % r2;
  }

  set<int64> inb1, inb2, inboth;
  inb1.insert(board1[0]);
  int64 res = 0;
  for (int64 p1 = 1, p2 = 0; p1 < N || p2 < M;) {
    if (p1 >= N && inb2.size()) break;
    if (p2 >= M && inb1.size()) break;

    if (inb2.size()) {
      if (inb2.find(board1[p1]) != inb2.end()) {
        inb2.erase(board1[p1]);
        inboth.insert(board1[p1]);
      } else if (inboth.find(board1[p1]) == inboth.end()) {
        inb1.insert(board1[p1]);
      }
      p1++;
    } else if (inb1.size()) {
      if (inb1.find(board2[p2]) != inb1.end()) {
        inb1.erase(board2[p2]);
        inboth.insert(board2[p2]);
      } else if (inboth.find(board2[p2]) == inboth.end()) {
        inb2.insert(board2[p2]);
      }
      p2++;
    }

    if (!inb1.size() && !inb2.size()) {
      int64 c1 = 1, c2 = 1;
      while (p1 < N && inboth.find(board1[p1]) != inboth.end()) c1++, p1++;
      while (p2 < M && inboth.find(board2[p2]) != inboth.end()) c2++, p2++;
      res += c1*c2;

      if (p1 < N && inboth.find(board1[p1]) == inboth.end()) {
        inb1.insert(board1[p1]);
        p1++;
      } else if (p2 < M && inboth.find(board2[p2]) == inboth.end()) {
        inb2.insert(board2[p2]);
        p2++;
      }
    }
  }

  cout << "Case #" << (tc + 1) << ": " << res << endl;
}

int main()
{
  int T = 0, tc = 0;
  for (cin >> T; tc < T; tc++) run(tc);
  return 0;
}

INFINITY = 10 ** 7

def solution(board1, board2):
    if len(board1) > len(board2):
        board1, board2 = board2, board1

    N = len(board1)
    M = len(board2)

    colors1 = {}
    for i, color in enumerate(board1):
        if color not in colors1:
            colors1[color] = i

    colors2 = {}
    for i, color in enumerate(board2):
        if color not in colors2:
            colors2[color] = i

    has_after1 = [INFINITY] * N
    for i, color in enumerate(board1):
        if i == 0:
            has_after1[i] = colors2.get(color, INFINITY)
        else:
            has_after1[i] = max(has_after1[i - 1], colors2.get(color, INFINITY))

    has_after2 = [INFINITY] * M
    for i, color in enumerate(board2):
        if i == 0:
            has_after2[i] = colors1.get(color, INFINITY)
        else:
            has_after2[i] = max(has_after2[i - 1], colors1.get(color, INFINITY))

    mem_after = [N - 1] * M
    j = 0
    for i in range(N - 1):
        while j < M and has_after1[i + 1] > j:
            mem_after[j] = i
            j += 1

    result = 0
    for i in reversed(xrange(M)):
        result += max(0, mem_after[i] - has_after2[i] + 1)
    return result


def rng(N, M, x1, x2, a1, a2, b1, b2, c1, c2, r1, r2):
    board1 = [0] * N
    board2 = [0] * M

    board1[0] = x1
    board2[0] = x2

    for i in range(1, max(N, M)):
        if i < N:
            board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1
        if i < M:
            board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2

    return board1, board2


def read_numbers(line):
    if line[-1] == '\n':
        line = line[:-1]
    return [int(x) for x in line.split()]


def read_floats(line):
    if line[-1] == '\n':
        line = line[:-1]
    return [float(x) for x in line.split()]


if __name__ == '__main__':
    import sys
    case_count = int(sys.stdin.readline()[:-1])
    for t in range(1, case_count + 1):
        N, M = read_numbers(sys.stdin.readline())
        x1, a1, b1, c1, r1 = read_numbers(sys.stdin.readline())
        x2, a2, b2, c2, r2 = read_numbers(sys.stdin.readline())
        board1, board2 = rng(N, M, x1, x2, a1, a2, b1, b2, c1, c2, r1, r2)
        print "Case #%d: %s" % (t, solution(board1, board2))

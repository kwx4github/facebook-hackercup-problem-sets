#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <algorithm>
#include <functional>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#define POW2(k) (1<<(k))
#define POW2L(k) (1ULL<<(k))
#define INSIDE(a, b) (POW2(a) & (b))
#define MERGE(a, b) (POW2(a) | (b))
#define INF 0x3f3f3f3f
#define EPS 1e-10
using namespace std;

const double PI = acos(-1.0);

typedef pair<int, int> pii;
typedef long long LL;
typedef unsigned long long ULL;

template<class T1, class T2> inline bool chkMax(T1 &a, const T2 &b) { if(a < b) {a = b; return true;} return false;}
template<class T1, class T2> inline bool chkMin(T1 &a, const T2 &b) { if(a > b) {a = b; return true;} return false;}

#define MAXN 1000006

LL var[2][MAXN];

LL n, m;
struct Data {
	LL x, a, b, c, r;
	void read() {
		cin >> x >> a >> b >> c >> r;
	}
}board[2];

LL solve() {
	map<LL, int> rem[2];
	LL sz[2] = {n, m};

	for(int j=0; j<2; ++j) {
		for(int i=0; i<sz[j]; ++i) {
			LL t = var[j][i];
			if(rem[j].find(t) == rem[j].end()) {
				rem[j][t] = i;
			}
		}
	}

	set<LL> chked[2];
	LL proc[2] = {0, 0};
	LL ret = 0;
	set<LL> add;
	while(proc[0] < n && proc[1] < m) {
		if(rem[1].find( var[0][ proc[0] ] ) == rem[1].end()) {
			return ret;
		}
		if(rem[0].find( var[1][ proc[1] ] ) == rem[0].end()) {
			return ret;
		}
		LL p[2];
		p[0] = rem[0][ var[1][ proc[1] ] ];
		p[1] = rem[1][ var[0][ proc[0] ] ];
		add.insert(var[1][proc[1]]);
		add.insert(var[0][proc[0]]);
//		cout<<p[0] <<"\t"<<p[1]<<endl;
		while(proc[0] != p[0] || proc[1] != p[1]) {
//			cout<<proc[0]<<"  .......... "<<proc[1]<<endl;
			while(proc[0] < p[0] && proc[0] < n) {
				++proc[0];
				if(rem[1].find( var[0][ proc[0] ] ) == rem[1].end()) {
					return ret;
				}
				add.insert( var[0][ proc[0] ] );
				chkMax(p[1], rem[1][ var[0][ proc[0] ] ]);
			}

			while(proc[1] < p[1] && proc[1] < m) {
				++proc[1];
				if(rem[0].find( var[1][ proc[1] ] ) == rem[0].end()) {
					return ret;
				}
				add.insert( var[1][ proc[1] ] );
				chkMax(p[0], rem[0][ var[1][ proc[1] ] ]);
			}
		}

		if(proc[0] == p[0] && proc[1] == p[1]) {
//			cout<<"  "<<proc[0]<<"  "<<proc[1]<<"  ##########"<<endl;
			while(proc[0] < n) {
				if( add.find( var[0][ proc[0] ] ) != add.end()) {
					++proc[0];
				} else {
					break;
				}
			}
			while(proc[1] < m) {
				if( add.find( var[1][ proc[1] ] ) != add.end()) {
					++proc[1];
				} else {
					break;
				}
			}
//			cout<<proc[0]<<"  "<<p[0]<<"  "<<proc[1] <<"  "<<p[1]<<endl;
			ret += (proc[0]-p[0]) * (proc[1]-p[1]);
		} else {
			break;
		}
	}

	return ret;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("_magic_pairs.txt", "r", stdin);
 	freopen("out", "w", stdout);
#endif

	int dataset;
	cin >> dataset;
	for(int cas=1; cas<=dataset; ++cas) {
		cin >> n >> m;
		for(int i=0; i<2; ++i) {
			board[i].read();
			var[i][0] = board[i].x;
		}

		for(int i=1; i < n || i < m; ++i) {
			if( i < n ) {
				var[0][i] = (
					board[0].a * var[0][(i-1)%n]
				+ board[0].b * var[1][(i-1)%m]
				+ board[0].c)
					% board[0].r;
			}
			if(i < m) {
				var[1][i] = (
					board[1].a * var[0][(i-1)%n]
				+ board[1].b * var[1][(i-1)%m]
				+ board[1].c)
					% board[1].r;
			}
		}
		
// 		for(int i=0; i<n; ++i) {
// 			cout<<var[0][i]<<"  ";
// 		}
// 		cout<<endl;
// 		for(int i=0; i<m; ++i) {
// 			cout<<var[1][i]<<"  ";
// 		}
// 		cout<<endl;
		cout << "Case #" << cas << ": " << solve() << endl;
	}

	return 0;
}


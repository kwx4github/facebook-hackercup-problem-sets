#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <algorithm>
#include <utility>

using namespace std;

#define CONTAINS(container, value) (container.find(value) != container.end())
#define REMOVE(container, value) container.erase(container.find(value))

long long calc(const vector <int> &v1, const vector <int> &v2) {
    int N = v1.size();
    int M = v2.size();

    long long ans = 0;
    set <int> waiting1, waiting2, common;
    int i1 = 0;
    int i2 = 0;
    int turn = 0;

    waiting1.insert(v1[i1++]);

    while (i1 < N || i2 < M) {
        turn = 1 - turn;

        if (i1 >= N && waiting2.size() > 0) {
            break;
        }
        if (i2 >= M && waiting1.size() > 0) {
            break;
        }

        if (turn == 0) {
            while (i2 < M && waiting1.size() > 0) {
                int color2 = v2[i2++];
                if (CONTAINS(waiting1, color2)) {
                    REMOVE(waiting1, color2);
                    common.insert(color2);
                } else if (!CONTAINS(common, color2)) {
                    waiting2.insert(color2);
                }
            }
        }
        else {
            while (i1 < N && waiting2.size() > 0) {
                int color1 = v1[i1++];
                if (CONTAINS(waiting2, color1)) {
                    REMOVE(waiting2, color1);
                    common.insert(color1);
                } else if (!CONTAINS(common, color1)) {
                    waiting1.insert(color1);
                }
            }
        }

        if (waiting1.size() == 0 && waiting2.size() == 0) {
            int k1 = i1;
            int k2 = i2;
            while (k1 < N && CONTAINS(common, v1[k1])) {
                ++k1;
            }
            while (k2 < M && CONTAINS(common, v2[k2])) {
                ++k2;
            }
            ans += (k1 - i1 + 1) * (long long)(k2 - i2 + 1);
            i1 = k1;
            i2 = k2;

            if (turn == 0 && i1 < N) {
                waiting1.insert(v1[i1++]);
            } else if (i2 < M) {
                waiting2.insert(v2[i2++]);
            }
        }
    }

    return ans;
}

int main() {
	int T = 1;
    int t;

    cin >> t;
    while (t--) {
        printf("Case #%d: ", T++);

        int N, M;
        int x1, a1, b1, c1, r1;
        int x2, a2, b2, c2, r2;

        cin >> N >> M;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;

        vector <int> v1(N);
        vector <int> v2(M);

        v1[0] = x1;
        v2[0] = x2;
        for (int i=1; i < max(N, M); ++i) {
            if (i < N) v1[i] = (a1 * v1[(i-1) % N] + b1 * v2[(i-1) % M] + c1) % r1;
            if (i < M) v2[i] = (a2 * v1[(i-1) % N] + b2 * v2[(i-1) % M] + c2) % r2;
        }

        printf("%lld\n", calc(v1, v2));
    }
	
	return 0;
}

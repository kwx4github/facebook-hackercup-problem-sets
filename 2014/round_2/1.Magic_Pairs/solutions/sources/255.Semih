#include<iostream>
#include<fstream>
#include<algorithm>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<list>
#include<cstdio>
#include<cstring>
#include<string>
#include<cmath>
#include<cstdlib>
#include<vector>
#include<climits>
#include<ctime>
#include<sstream>
#define mp       	make_pair
#define pb       	push_back
#define st       	first
#define nd       	second
#define wait     	getchar();getchar();
#define lint     	long long
#define KARE(a)	 	( (a)*(a) )
#define MAX(a,b) 	( (a)>(b) ? (a) : (b) )
#define MIN(a,b) 	( (a)<(b) ? (a) : (b) )
#define MAX3(a,b,c)	( MAX( a,MAX(b,c) ) )
#define MIN3(a,b,c)	( MIN( a,MIN(b,c) ) )
#define FILL(ar,a)	memset( ar,a,sizeof ar )
#define oo	 		1e9
#define pii       	pair<int,int>
#define pll			pair<lint,lint>
#define pdd			pair<double,double>
#define y1			yy1
#define eps      	(1e-9)
#define esit(a,b)  	( abs( (a)-(b) ) < eps )
#define sol(a)		( (a)<<1 )
#define sag(a)		( sol(a)|1 )
#define orta(a,b)	( ( (a)+(b) )>>1 )
#define mxn       	1000005
using namespace std;

int id,test;
int n,m;
int a[mxn],b[mxn];
int cnt[mxn];
lint x1,a1,b1,c1,r1;
lint x2,a2,b2,c2,r2;

void read(){


		
		scanf( "%d %d" , &n , &m );
		scanf( "%d %d %d %d %d" , &x1 , &a1 , &b1 , &c1 , &r1 );
		scanf( "%d %d %d %d %d" , &x2 , &a2 , &b2 , &c2 , &r2 );

	return;

}

void generateBoards(){
	
	int i;
	
	a[0] = x1;
	b[0] = x2;
	
	for( i=1 ; i<n || i<m ; i++ ){
		
		if( i<n )	a[i] = ( a1*a[ (i-1) %n ] + b1*b[ (i-1)%m ] + c1 ) % r1;
		if( i<m )	b[i] = ( a2*a[ (i-1) %n ] + b2*b[ (i-1)%m ] + c2 ) % r2;
		
	}
	
	return;
	
}

void solve(){
	
	int ust,alt;
	int i,j;
	lint ans = 0;
	
	map<int,int>ma,mb;
	memset( cnt,0,sizeof cnt );
	
	ust = alt = 0;
	
	j = 0;
	for( i=0 ; i<n ; i++ ){
		
		if( !ma[ a[i] ] ){
			
			ma[ a[i] ] = 1;
			
			if( !mb[ a[i] ] )	ust++;
			else				alt--;			
			
			if( !ust && !alt )	cnt[i]++;
						
		}
		else	cnt[i] += cnt[i-1];
		
		
		while( ( ust || ( !ust && !alt ) ) && j<m ){
			
			if( !mb[ b[j] ] ){
				
				if( ma[ b[j] ] )	ust--;
				else				alt++;
				
				mb[ b[j] ] = 1;
				
			}
			
			if( ust==0 && alt==0 )		cnt[i]++;
			j++;
			
		}
		
		ans += cnt[i];
		
	}
	
	printf( "%lld\n" , ans );
	
}

int main(){
	
		freopen( "inp.txt" , "r" , stdin );
	freopen( "out.txt" , "w" , stdout );
	
	scanf( "%d" , &test );
	
	for( id=1 ; id<=test ; id++ ){
		
		read();
		generateBoards();
		printf( "Case #%d: " , id );
		solve();
		
	}
	return 0;
}

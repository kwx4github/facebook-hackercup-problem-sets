#include<cstdio>
#include<cstring>
#include<algorithm>
#include<map>
using namespace std;
const int MAXN = 1000000+5;
int T, N[2], board[2][MAXN], sum[2][MAXN], next[MAXN];
long long x[2], a[2], b[2], c[2], r[2];
bool vis[2][MAXN];
void look()
{
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < N[i]; j++)
			printf("%d%c", board[i][j], j+1 < N[i] ? ' ' : '\n');
	}
}
int main()
{
	freopen("put.in", "r", stdin);
	freopen("put.out", "w", stdout);
	scanf("%d", &T);
	for (int cas = 1; cas <= T; cas++)
	{
		scanf("%d%d", &N[0], &N[1]);
		map<int, int> mp[2];
		for (int i = 0; i < 2; i++)
		{
			scanf("%lld%lld%lld%lld%lld", &x[i], &a[i], &b[i], &c[i], &r[i]);
			board[i][0] = x[i];
			mp[i].insert(make_pair(x[i], 0));
			sum[i][0] = 1;
			vis[i][0] = 1;
		}
		for (int j = 1; j < max(N[0], N[1]); j++)
		{
			for (int i = 0; i < 2; i++) if (j < N[i])
			{
				board[i][j] = (a[i]*board[0][(j-1)%N[0]]+b[i]*board[1][(j-1)%N[1]]+c[i])%r[i];
				sum[i][j] = sum[i][j-1];
				vis[i][j] = 0;
				if (mp[i].find(board[i][j]) == mp[i].end())
				{
					mp[i].insert(make_pair(board[i][j], j));
					sum[i][j]++;
					vis[i][j] = 1;
				}
			}
		}
		next[N[1]-1] = N[1];
		for (int i = N[1]-2; i >= 0; i--)
		{
			if (vis[1][i+1])
				next[i] = i+1;
			else
				next[i] = next[i+1];
		}
//		look();
		int maxi = 0, cnt = 0;
		long long ans = 0;
		for (int i = 0; i < N[0]; i++)
		{
			map<int, int>::iterator it = mp[1].find(board[0][i]);
			if (it == mp[1].end())
				break;
			maxi = max(maxi, it->second);
			if (vis[0][i])
				cnt++;
			if (sum[1][maxi] == cnt)
				ans += next[maxi]-maxi;
		}
		printf("Case #%d: %lld\n", cas, ans);
	}
	return 0;
}

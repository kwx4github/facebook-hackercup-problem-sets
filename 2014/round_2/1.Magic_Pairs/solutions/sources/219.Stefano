#include <algorithm>
#include <iostream>
#include <sstream>
#include <cassert>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <cmath>
#include <deque>
#include <ctime>
#include <list>
#include <set>
#include <map>
//zlb//

using namespace std;

typedef long long     LL;
typedef pair<int,int> pii;

double PI  = acos(-1);
double EPS = 1e-7;
int INF    = 1000000000;
int MOD    = 1000000007;
int MAXINT = 2147483647;
LL INFLL   = 1000000000000000000LL;
LL MAXLL   = 9223372036854775807LL;

#define fi            first
#define se            second
#define mp            make_pair
#define pb            push_back
#define SIZE(a)       (int)a.size()
#define MIN(a, b)     (a) = min((a), (b))
#define MAX(a, b)     (a) = max((a), (b))
#define input(in)     freopen(in,"r",stdin)
#define output(out)   freopen(out,"w",stdout)
#define RESET(a, b)   memset(a,b,sizeof(a))
#define FOR(a, b, c)  for (int (a)=(b); (a)<=(c); (a)++)
#define FORD(a, b, c) for (int (a)=(b); (a)>=(c); (a)--)
#define FORIT(a, b)   for (__typeof((b).begin()) a=(b).begin(); a!=(b).end(); a++)

int mx[8] = {-1,1,0,0,-1,-1,1,1};
int my[8] = {0,0,-1,1,-1,1,-1,1};

// ------------ //

int board1[1000005];
int board2[1000005];
set<int> co1;
set<int> co2;

int main()
{
	int tc;
	scanf("%d",&tc);
	FOR(T,1,tc)
	{
		co1.clear();
		co2.clear();
		int n,m;
		scanf("%d%d",&n,&m);
		int x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;
		scanf("%d%d%d%d%d",&x1,&a1,&b1,&c1,&r1);
		scanf("%d%d%d%d%d",&x2,&a2,&b2,&c2,&r2);
		board1[0] = x1;
		board2[0] = x2;
		FOR(a,1,max(n,m)-1)
		{
			if (a < n)
			{
				LL tmp = ((LL)a1*(LL)board1[(a-1)%n]+(LL)b1*(LL)board2[(a-1)%m]+(LL)c1)%(LL)r1;
				board1[a] = tmp;
			}
			if (a < m)
			{
				LL tmp = ((LL)a2*(LL)board1[(a-1)%n]+(LL)b2*(LL)board2[(a-1)%m]+(LL)c2)%(LL)r2;
				board2[a] = tmp;
			}
		}
		vector<pii> v1,v2;
		FOR(a,0,n-1)
		{
			if (co1.find(board1[a])==co1.end())
			{
				v1.pb(mp(board1[a],a));
				co1.insert(board1[a]);
			}
		}
		FOR(a,0,m-1)
		{
			if (co2.find(board2[a])==co2.end())
			{
				v2.pb(mp(board2[a],a));
				co2.insert(board2[a]);
			}
		}
		co1.clear();
		co2.clear();
		int sama = 0;
		int sz = min(SIZE(v1),SIZE(v2));
		LL ans = 0;
		FOR(a,0,sz-1)
		{
			int val1 = v1[a].fi;
			int val2 = v2[a].fi;
			if (val1 == val2) sama++;
			if (co2.find(val1)!=co2.end()) sama++;
			if (co1.find(val2)!=co1.end()) sama++;
			co1.insert(val1);
			co2.insert(val2);
			if (sama == a+1)
			{
				int r1;
				int r2;
				if (a == SIZE(v1)-1) r1 = n-1;
				else r1 = v1[a+1].se-1;
				if (a == SIZE(v2)-1) r2 = m-1;
				else r2 = v2[a+1].se-1;
				ans += (LL)(r1-v1[a].se+1)*(LL)(r2-v2[a].se+1);
			}
		}
		printf("Case #%d: %lld\n",T,ans);
	}
}

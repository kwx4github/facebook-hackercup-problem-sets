#include <iostream>
#include <unordered_set>
using namespace std;

int N, M;
int board1[1000000], board2[1000000];

void advance(long long& pos, int size, int* board, unordered_set<int>& mine, unordered_set<int>& theirs, int& minenottheirs, int& theirsnotmine) {
	if (pos < size && !mine.count(board[pos])) {
		if (theirs.count(board[pos])) {
			theirsnotmine--;
		} else {
			minenottheirs++;
		}
		mine.insert(board[pos]);
	}
	pos++;
}

int main() {
	int T;
	cin >> T;
	for (int t = 1; t <= T; t++) {
		cin >> N >> M;
		long long x1, a1, b1, c1, r1;
		long long x2, a2, b2, c2, r2;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		board1[0] = x1;
		board2[0] = x2;
		for (int i = 1; i < 1000000; i++) {
			board1[i] = (a1 * board1[(i-1)%N] + b1 * board2[(i-1)%M] + c1)%r1;
			board2[i] = (a2 * board1[(i-1)%N] + b2 * board2[(i-1)%M] + c2)%r2;
		}

		long long ans = 0;

		unordered_set<int> in1, in2;
		int onenottwo = 0, twonotone = 0;
		long long p1 = 0, p2 = 0;
		while (p1 <= N && p2 <= M) {
			long long np1 = p1, np2 = p2;
			while (np1 < N && in1.count(board1[np1])) np1++;
			while (np2 < M && in2.count(board2[np2])) np2++;

			ans += (np1 - p1 + 1) * (np2 - p2 + 1);
			p1 = np1, p2 = np2;

			advance(p1, N, board1, in1, in2, onenottwo, twonotone);
			advance(p2, M, board2, in2, in1, twonotone, onenottwo);

			while (p1 <= N && p2 <= M && (onenottwo || twonotone)) {
				while (p1 <= N && twonotone) {
					advance(p1, N, board1, in1, in2, onenottwo, twonotone);
				}
				while (p2 <= M && onenottwo) {
					advance(p2, M, board2, in2, in1, twonotone, onenottwo);
				}
			}
		}
		cout << "Case #" << t << ": " << ans-1 << '\n';
	}
	return 0;
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.BitSet;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		in = new BufferedReader(new FileReader("input.txt"));
		out = new PrintWriter("output.txt");
		int T = ni();
		for (int i = 1; i <= T; i++) {
			out.print("Case #" + i + ": ");
			out.println(solve());
		}
		out.close();
		in.close();
	}

	private static Object solve() throws IOException {
		int n = ni();
		int m = ni();

		int[] board1 = new int[n];
		int[] board2 = new int[m];
		board1[0] = ni();

		long a1 = ni();
		long b1 = ni();
		long c1 = ni();
		long r1 = ni();
		
		board2[0] = ni();
		long a2 = ni();
		long b2 = ni();
		long c2 = ni();
		long r2 = ni();

		for (int i = 1; i < Math.max(n, m); i++) {
			if (i < n) {
				long aux = 0;
				aux = (a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
				board1[i] = (int) aux;
			}
			if (i < m) {
				long aux = 0;
				aux = (a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;
				board2[i] = (int) aux;
			}
		}
		
		Map<Integer,Integer> parse = new HashMap<Integer,Integer>();
		for(int a : board1)
			add(parse,a);
		for(int a : board2)
			add(parse,a);
		for(int i =0;i<n;i++)
			board1[i]= parse.get(board1[i]);
		for(int i =0;i<m;i++)
			board2[i]= parse.get(board2[i]);
		
		BitSet set1 = new BitSet();
		BitSet set2 = new BitSet();

		long ret = 0;
		int i1 = 0;
		int i2 = 0;
		while (i1 < n && i2<m) {
			set1.set(board1[i1]);
			set2.set(board2[i2]);
			int j1 = i1 + 1;
			int j2 = i2 + 1;
			while (j1 < n && set1.get(board1[j1]))
				j1++;
			while (j2 < m && set2.get(board2[j2]))
				j2++;
			if (set1.equals(set2)) {
				long aux1 = j1 - i1;
				long aux2 = j2 - i2;
				ret += aux1 * aux2;
			}
			i1 = j1;
			i2 = j2;

		}

		return ret;
	}

	private static void add(Map<Integer, Integer> map, int key) {
		if(!map.containsKey(key)){
			map.put(key, map.size());
		}
	}

	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st = new StringTokenizer("");

	static String nextToken() throws IOException {
		while (!st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	static int ni() throws IOException {
		return Integer.parseInt(nextToken());
	}

	static long nl() throws IOException {
		return Long.parseLong(nextToken());
	}

}
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <bitset>
#include <memory>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <string>
#include <cstring>
#include <fstream>
#include <functional>
#include <stack>
#include <complex>
#include <wchar.h>
#include <wctype.h>
#include <cmath>
#include <queue>
#include <ctime>
#include <numeric>

using namespace std;

template<typename T> T mabs(const T &a){ return a<0 ? -a : a; }
#define rep(x,y,z) for(int x=(y),e##x=(z);x<e##x;x++)
#define SQR(x) ((x)*(x))
#define all(c) (c).begin(), (c).end()

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef short int si;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;

void test(int testCase)
{
	printf("Case #%d: ", testCase);
	set<int> cols[2];

	int n, m, a[2], b[2], c[2], r[2], x[2];
	int nn[2];
	scanf("%d%d", &n, &m);
	rep(i, 0, 2)
	{
		scanf("%d%d %d%d%d", x + i, a + i, b + i, c + i, r + i);
	}
	nn[0] = n;
	nn[1] = m;
	vector<ll> board[2];
	rep(bd, 0, 2)
	{
		board[bd].resize(max(m, n));
		board[bd][0] = x[bd];
	}
	rep(i, 1, max(n, m))
	{
		rep(bd, 0, 2)
		{
			board[bd][i] = a[bd] * board[0][(i - 1) % n] + b[bd] * board[1][(i - 1) % m] + c[bd];
			board[bd][i] %= r[bd];
		}
	}
	board[0].resize(n);
	board[1].resize(m);

	int ptrs[2] = { -1, -1 };

	ll res = 0;

	vector<ll> startPos[2];
	ll cc[2];
	vector<ll> added[2];

	rep(bd, 0, 2)
	{
		rep(j, 0, nn[bd])
		{
			int cur = board[bd][j];
			if (cols[bd].find(cur) == cols[bd].end())
			{
				added[bd].push_back(cur);
				startPos[bd].push_back(j);
				cols[bd].insert(cur);
			}
		}
		startPos[bd].push_back(nn[bd]);
		cc[bd] = cols[bd].size();
	}
	set<int> extra[2];
	rep(i, 0, min(cc[0], cc[1]))
	{
		rep(bd, 0, 2)
		{
			extra[bd].insert(added[bd][i]);
		}

		rep(bd, 0, 2)
		{
			if (extra[1 - bd].find(added[bd][i]) != extra[1 - bd].end())
			{
				rep(bd2, 0, 2)
				{
					extra[bd2].erase(added[bd][i]);
				}
			}
		}
		if (extra[0].size() == 0 && extra[1].size() == 0)
		{
			ll cnt1 = startPos[0][i + 1] - startPos[0][i];
			ll cnt2 = startPos[1][i + 1] - startPos[1][i];
			res += cnt1 * cnt2;
		}
	}
	printf("%lld\n", res);
}

void run()
{
	int testCount;
	scanf("%d", &testCount);

	rep(i, 0, testCount)
		test(i + 1);
}

//#define prob "fence"

int main()
{
#ifdef LOCAL_DEBUG
	freopen("test.in", "r", stdin);
	freopen("test.out", "w", stdout);
	time_t st = clock();
#else 
#ifdef prob
	freopen(prob".in", "r", stdin);
	freopen(prob".out", "w", stdout);
#endif
#endif

	run();

#ifdef LOCAL_DEBUG
	//printf( "\n=============\n");
	fprintf(stderr, "Time: %.2lf sec\n", (clock() - st) / double(CLOCKS_PER_SEC));
#endif

	return 0;
}
#include <iostream>
#include <set>
#include <vector>
using namespace std;

long long solve() {
	int N, M;
	cin >> N >> M;
	long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	vector<int> x, y;
	x.push_back((int)x1);
	y.push_back((int)x2);
	for (int i = 1; i < max(N, M); ++i) {
		if (i < N)
			x.push_back((int)((a1 * x[(i-1) % N] + b1 * y[(i-1) % M] + c1) % r1));
		if (i < M)
			y.push_back((int)((a2 * x[(i-1) % N] + b2 * y[(i-1) % M] + c2) % r2));
	}
	set<int> nums, onlyx, onlyy;
	int yind = 0, xind = 0;
	long long res = 0;
	for (;;) {
		if (!onlyy.empty() || yind == M) {
			if (xind == N) break;
			int v = x[xind++];
			if (nums.find(v) != nums.end())
				continue;
			if (onlyy.find(v) != onlyy.end()) {
				onlyy.erase(v);
				nums.insert(v);
			}
			else {
				onlyx.insert(v);
			}
		}
		else {
			int v = y[yind++];
			if (nums.find(v) != nums.end())
				continue;
			if (onlyx.find(v) != onlyx.end()) {
				onlyx.erase(v);
				nums.insert(v);
			}
			else {
				onlyy.insert(v);
			}
		}

		if (onlyx.empty() && onlyy.empty()) {
			long long origy = yind, origx = xind;
			while (xind < N && nums.find(x[xind]) != nums.end()) xind++;
			while (yind < M && nums.find(y[yind]) != nums.end()) yind++;
			res += (xind - origx + 1) * (yind - origy + 1);
		}
	}
	return res;
}

int main() {
	int T;
	cin >> T;
	for (int i = 0; i < T; ++i)
		cout << "Case #" << (i+1) << ": " << solve() << endl;
	return 0;
}

#include <bits/stdc++.h>
using namespace std;

#ifdef ILIKEGENTOO
#   define Eo(x) { cerr << #x << " = " << (x) << endl; }
#   define E(x) { cerr << #x << " = " << (x) << "   "; }
#   define FREOPEN(x)
#else
#   define Eo(x)
#   define E(x)
#   define FREOPEN(x) (void)freopen(x ".in", "r", stdin);(void)freopen(x ".out", "w", stdout);
#endif
#define EO(x) Eo(x)
#define Sz(x) (int((x).size()))
#define All(x) (x).begin(),(x).end()

template<class A, class B> ostream &operator<<(ostream &os, const pair<A, B>& p) { return os << '(' << p.first << ", " << p.second << ')'; }

template<class C> void operator<<(vector<C> &v, const C &x){v.push_back(x);}
template<class D> void operator>>(vector<D> &v, D &x){assert(!v.empty()); x=v.back(); v.pop_back();}
template<class E> void operator<<(set<E> &v, const E &x){v.insert(x);}
template<class F> void operator<<(queue<F> &c, const F& v){v.push(v);}
template<class G> void operator>>(queue<G> &c, const G& v){const G r=v.front();v.pop();return r;}

typedef double flt;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pip;

const int inf = 0x3f3f3f3f;
const int64 inf64 = 0x3f3f3f3f3f3f3f3fLL;
const flt eps = 1e-8;
const flt pi = acos(-1.0);
const int dir[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };

const int maxn = 1005000;
int64 bs[2][maxn];
set<int> both, have[2];

void add(int id, int pos) {
    int val = bs[id][pos];
    if (both.count(val)) return ;
    have[id].insert(val);
    if (have[0].count(val) && have[1].count(val)) {
        have[0].erase(val);
        have[1].erase(val);
        both.insert(val);
    }
}

int main() {
	ios_base::sync_with_stdio(false);

    int T; cin >> T;

    for(int test = 1; test <= T; ++test) {
        Eo(test);
        int n, m; cin >> n >> m;
        both.clear();
        have[0].clear();
        have[1].clear();
        int64 xx[2], aa[2], bb[2], cc[2], rr[2]; 
        for(int i=0; i<2; ++i)
            cin >> xx[i] >> aa[i] >> bb[i] >> cc[i] >> rr[i];
        bs[0][0] = xx[0];
        bs[1][0] = xx[1];
        for(int i=1; i<max(n, m); ++i) {
            for(int j=0; j<2; ++j) {
                bs[j][i] = (aa[j] * bs[0][(i-1) % n] + bb[j] * bs[1][(i-1) % m] + cc[j]) % rr[j];
            }
        }
        int from[2] = {-1, -1}, to[2] = {-1, -1};
        int64 res = 0;

        while(true) {
            int a = from[0] = to[0] + 1;
            int b = from[1] = to[1] + 1;
            if (a >= n || b >= m) break;

            add(0, a);
            add(1, b);
            while(Sz(have[0]) || Sz(have[1])) {
                if (Sz(have[1]) && a < n) {
                    ++a;
                    // E(a); Eo(bs[0][a]);
                    add(0, a);
                } else if(Sz(have[0]) && b < m) {
                    ++b;
                    // E(b); Eo(bs[0][b]);
                    add(1, b);
                } else
                    break;
            }

            from[0] = a;
            from[1] = b;
             // E("from"); E(a); Eo(b);
            for(++a; a < n && both.count(bs[0][a]); ++a);
            for(++b; b < m && both.count(bs[1][b]); ++b);
            --a; --b;
            to[0] = a;
            to[1] = b;
             // E("to"); E(a); Eo(b);
            if (Sz(have[0]) == 0 && Sz(have[1]) == 0) {
                int64 da = to[0] - from[0] + 1;
                int64 db = to[1] - from[1] + 1;
                res += da * db;
                 // E(a); E(b); Eo(res);
            }
        }

        cout << "Case #" << test << ": " << res << endl;
    }

    return 0;
}

#include <cmath>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <iostream>
#include <sstream>
#include <set>
#include <map>
//#include <emmintrin.h>

using namespace std;

#define FORE(it,c)  for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define FOR(i,a,b)  for(int i=(a);i<(b);++i)
#define REP(i,a)    FOR(i,0,a)
#define ZERO(m)    memset(m,0,sizeof(m))
#define ALL(x)      x.begin(),x.end()
#define PB          push_back
#define S          size()
#define LL          long long
#define ULL        unsigned long long
#define LD          long double
#define MP          make_pair
#define X          first
#define Y          second
#define VC          vector
#define PII        pair <int, int>
#define VI          VC < int >
#define VVI        VC < VI >
#define VD          VC < double >
#define VVD        VC < VD >
#define VS          VC < string >
#define DB(a)      cerr << #a << ": " << (a) << endl;

template<class T> void print(VC < T > v) {cerr << "[";if (v.S) cerr << v[0];FOR(i, 1, v.S) cerr << ", " << v[i];cerr << "]\n";}
template<class T> string i2s(T x) {ostringstream o; o << x; return o.str(); }
VS splt(string s, char c = ' ') {VS all; int p = 0, np; while (np = s.find(c, p), np >= 0) {if (np != p) all.PB(s.substr(p, np - p)); p = np + 1;} if (p < s.S) all.PB(s.substr(p)); return all;}

int main() {
	int tc;
	cin >> tc;
	FOR(atc, 1, tc + 1) {
		LL N, M;
		LL x1,a1,b1,c1,r1;
		LL x2,a2,b2,c2,r2;
		cin >> N >> M;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		VC < LL > v1, v2;
		v1.PB(x1);
		v2.PB(x2);
		FOR(i, 1, max(N, M)) {
			if (i < N) v1.PB((a1 * v1[(i-1) % N] + b1 * v2[(i-1) % M] + c1) % r2);
			if (i < M) v2.PB((a2 * v1[(i-1) % N] + b2 * v2[(i-1) % M] + c2) % r2);
		}
		
		LL rv = 0;
		
		set<LL> s1, s2;
		set<LL> sd1, sd2;
		
		int p1 = 0, p2 = 0;
		
		while (true) {
			if (sd1.S == 0 && sd2.S == 0) {
				LL n1 = 1, n2 = 1;
				while (p1 < v1.S && s1.count(v1[p1])) p1++, n1++;
				while (p2 < v2.S && s2.count(v2[p2])) p2++, n2++;
				rv += n1 * n2;
				
				if (p1 == v1.S || p2 == v2.S) break;
				
				s1.insert(v1[p1]);
				sd1.insert(v1[p1]);
				p1++;
			} else if (sd1.S) {
				if (p2 == v2.S) break;
				if (!s2.count(v2[p2])) {
					s2.insert(v2[p2]);
					sd1.erase(v2[p2]);
					if (!s1.count(v2[p2])) sd2.insert(v2[p2]);
				}
				p2++;
			} else {
				if (p1 == v1.S) break;
				if (!s1.count(v1[p1])) {
					s1.insert(v1[p1]);
					sd2.erase(v1[p1]);
					if (!s2.count(v1[p1])) sd1.insert(v1[p1]);
				}
				p1++;
			}
		}
		rv--;
		
		printf("Case #%d: %lld\n", atc, rv);
	}
	return 0;
}
#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <fstream>
#include <set>
#include <ctime>
#include <map>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cmath>


using namespace std;

#define pii pair <int, int>
#define mp make_pair
#define ll long long

const int MN = 1000 * 1000 + 10;

int board1[MN], board2[MN];

int n, m, x1, x2;

ll a1, b1, c1, a2, b2, c2, r1, r2;

vector <int> sp1, sp2;

set <int> st;

bool go(int &pos) {
	if (pos == (int)sp1.size() - 1)
		return false;
	int p = sp1[pos++];
	while (p < sp1[pos]) {
		st.insert(board1[p]);
		p ++;
	}
	return true;
}

ll solve() {
	board1[0] = x1;
	board2[0] = x2;
	for(int i = 1; i < max(n, m); i ++) {
		board1[i] = (a1 * board1[ (i - 1) % n ] + b1 * board2[ (i - 1) % m ] + c1) % r1;
		board2[i] = (a2 * board1[ (i - 1) % n ] + b2 * board2[ (i - 1) % m ] + c2) % r2;
	}
		
	sp1.clear();
	sp2.clear();
	st.clear();
	for(int i = 0; i < n; i ++) {
		if (st.find(board1[i]) == st.end()) {
			st.insert(board1[i]);
			sp1.push_back(i);
		}
	}
	st.clear();
	for(int i = 0; i < m; i ++) {
		if (st.find(board2[i]) == st.end()) {
			st.insert(board2[i]);
			sp2.push_back(i);
		}
	}
	st.clear();
	int p1 = 0;
	int p2 = 0;
	int cp = 0;
	sp1.push_back(n);
	sp2.push_back(m);
	ll ans = 0;
	while (p2 < sp2.size()) {
		if (!go(p1))
			break;
		p2 ++;
		while (cp < sp2[p2]) {
			if (st.find(board2[cp]) == st.end())
				break;
			else
				cp ++;
		}
		if (cp == sp2[p2])
			ans += (ll)(sp1[p1] - sp1[p1 - 1]) * (sp2[p2] - sp2[p2 - 1]);
		if (sp2[p2] == m)
			break;
	}
	return ans;
}

int stupid() {
	set <int> s1, s2;
	int ans = 0;
	for(int x = 0; x < n; x ++) {
		s1.insert(board1[x]);
		s2.clear();
		for(int y = 0; y < m; y++) {
			s2.insert(board2[y]);
			if (s1.size() != s2.size())
				continue;
			bool ok = true;
			for(set <int> :: iterator it = s1.begin(); it != s1.end(); it ++)
				if (s2.find(*it) == s2.end())
					ok = false;
			if (ok)
				ans ++;
		}
	}
	return ans;
}

int main() {
//#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
//#else
	//freopen("caravan.in", "r", stdin);
	//freopen("caravan.out", "w", stdout);
//#endif
	int tests;
	cin >> tests;
	for(int test = 1; test <= tests; test ++) {
		
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		ll ans = solve();
		//printf("Case #%d: %I64d %d\n", test, ans, stupid());
		printf("Case #%d: %I64d\n", test, ans);
	}
    return 0;
}
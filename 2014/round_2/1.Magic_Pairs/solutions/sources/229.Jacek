#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REP(i,n) FOR(i,0,n)
#define REPD(i,n) FORD(i,0,n)
#define VAR(v,w) __typeof(w) v=(w)
#define FORE(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define SIZE(c) ((int)(c).size())
#define MP make_pair
#define FT first
#define SD second
#define CLEAR(a) memset((a), 0, sizeof(a))
#define INT(x) int x; scanf("%d", &x)
#define LLG(x) LL x; scanf("%lld", &x)
#define STR(n,x) char x[n]; scanf("%s", x)
#define LINE(n,x) char x[n]; gets(x)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<PII> VII;
typedef vector<double> VD;
typedef vector<LD> VLD;
typedef vector<LL> VLL;
typedef vector<bool> VB;

void oneCase();

int main() {
	int ttt;
	scanf("%d\n", &ttt);
	REP(tt, ttt) {
		printf("Case #%d: ", tt + 1);
		oneCase();
		fprintf(stderr, "Case #%d.\n", tt + 1);
		fflush(stderr);
	}
}



int n, m;
int bb1[1000100], bb2[1000100];

void sets(int* b, int n, VI& pos, VI& el) {
	set<int> s;
	REP(i,n) if (s.find(b[i]) == s.end()) {
		s.insert(b[i]);
		pos.PB(i);
		el.PB(b[i]);
	}
}

void oneCase() {
	INT(n1); n = n1;
	INT(m1); m = m1;
	INT(x1);
	INT(a1);
	INT(b1);
	INT(c1);
	INT(r1);
	INT(x2);
	INT(a2);
	INT(b2);
	INT(c2);
	INT(r2);
	bb1[0] = x1;
	bb2[0] = x2;
	FOR(i,1,max(n,m)) {
		bb1[i] = (LL(a1)*bb1[(i-1)%n]+LL(b1)*bb2[(i-1)%m]+c1)%r1;
		bb2[i] = (LL(a2)*bb1[(i-1)%n]+LL(b2)*bb2[(i-1)%m]+c2)%r2;
	}
	VI pos1, el1, pos2, el2;
	sets(bb1, n, pos1, el1);
	sets(bb2, m, pos2, el2);
	LL res = 0;
	int nn = SIZE(pos1);
	int mm = SIZE(pos2);
	int high = 0;
	map<int, int> where;
	REP(i,mm) where[el2[i]] = i;
	REP(i,nn) {
		map<int,int>::iterator it = where.find(el1[i]);
		if (it == where.end()) break;
		int j = it->SD;
		high = max(high, j+1);
		if (high == i+1) {
			int f1 = (i == nn - 1 ? n : pos1[i+1]) - pos1[i];
			int f2 = (i == mm - 1 ? m : pos2[i+1]) - pos2[i];
			res += LL(f1) * LL(f2);
		}
	}
	printf("%lld\n", res);
}

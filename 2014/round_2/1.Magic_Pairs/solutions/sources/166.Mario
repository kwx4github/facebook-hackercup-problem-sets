#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <map>
#include <cstdio>
#include <cmath>

using namespace std;

/*

Board1[0] = x1
Board2[0] = x2
Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1, for 0 < i < N
Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2, for 0 < i < M

*/

#define MAXSZ 1000000

long long B1[MAXSZ],B2[MAXSZ];
int first[2 * MAXSZ];
int diff[2 * MAXSZ];
int end[MAXSZ];
int color[2 * MAXSZ];
bool found[2 * MAXSZ];

int main(){
    ios::sync_with_stdio(0);
    
    int T;
    cin >> T;
    
    int N,M;
    int x1,a1,b1,c1,r1;
    int x2,a2,b2,c2,r2;
    
    for(int tc = 1;tc <= T;++tc){
        cin >> N >> M;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        //cout << "N = " << N << " " << M << endl;
        
        B1[0] = x1; B2[0] = x2;
        
        for(int i = 1;i < max(N,M);++i){
            //cout << "i = " << i << endl;
            if(i < N) B1[i] = (a1 * B1[(i-1) % N] + b1 * B2[(i-1) % M] + c1) % r1;
            if(i < M) B2[i] = (a2 * B1[(i-1) % N] + b2 * B2[(i-1) % M] + c2) % r2;
        }
        
        //cout << "compresion" << endl;
        
        int nc = 0;
        
        for(int i = 0;i < N;++i)
            color[nc++] = B1[i];
        
        for(int i = 0;i < M;++i)
            color[nc++] = B2[i];
        
        sort(color,color + nc);
        nc = unique(color,color + nc) - color;
        
        for(int i = 0;i < N;++i)
            B1[i] = lower_bound(color,color + nc,B1[i]) - color;
        for(int i = 0;i < M;++i)
            B2[i] = lower_bound(color,color + nc,B2[i]) - color;
        
        memset(first,-1,sizeof first);
        
        for(int i = 0,cont = 0;i < M;++i){
            if(first[ B2[i] ] == -1){
                first[ B2[i] ] = i;
                ++cont;
            }
            
            diff[i] = cont;
        }
        
        /*for(int i = 0;i < M;++i)
            cout << diff[i] << " ";
        cout << endl;*/
        
        end[M - 1] = M - 1;
        
        for(int i = M - 2;i >= 0;--i){
            if(diff[i] == diff[i + 1]) end[i] = end[i + 1];
            else end[i] = i;
        }
        
        /*for(int i = 0;i < M;++i)
            cout << end[i] << " ";
        cout << endl;*/
        
        memset(found,false,sizeof found);
        long long ans = 0;
        
        for(int i = 0,pos = 0,cont = 0;i < N;++i){
            if(first[ B1[i] ] == -1) break;
            if(!found[ B1[i] ]){
                found[ B1[i] ] = true;
                ++cont;
            }
            
            pos = max(pos,first[ B1[i] ]);
            
            if(diff[pos] == cont) ans += end[pos] - pos + 1;
        }
        
        cout << "Case #" << tc << ": " << ans << '\n';
        
        
    }
    
    return 0;
}

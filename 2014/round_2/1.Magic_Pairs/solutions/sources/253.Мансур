#pragma comment(linker, "/STACK:64000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cmath>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<vector>
#include<stack>
#include<queue>
#include<deque>
#include<string>
#include<map>
#include<set>
#include<sstream>
#include<algorithm>
#define forit(it,S) for(__typeof(S) it = (S).begin(); it != (S).end(); it++)
#define sz(x) (int)(x).size()
#define all(x) (x).begin(),(x).end()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = (int)1e6 + 10;
int x[2],a[2],b[2],c[2],r[2],size[2];
int v[2][maxn],cnt[2][maxn];
void solve(int Case) {
	printf("Case #%d: ",Case);
	cin >> size[0] >> size[1];
	for (int i = 0; i < 2; i++) {
		cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
	}
	int Size = max(size[0],size[1]);
	v[0][0] = x[0];
	v[1][0] = x[1];	
	for (int j = 1; j < Size; j++) {
		if (j < size[0]) v[0][j] = (a[0] * 1LL * v[0][(j - 1) % size[0]] + b[0] * 1LL * v[1][(j - 1) % size[1]] + c[0]) % r[0];
		if (j < size[1]) v[1][j] = (a[1] * 1LL * v[0][(j - 1) % size[0]] + b[1] * 1LL * v[1][(j - 1) % size[1]] + c[1]) % r[1];
	}
	for (int i = 0; i < 2; i++) {
		cnt[i][0] = 1;
		set<int> st;
		st.insert(v[i][0]);
		int ptr = 1;
		for (int j = 1; j < size[i]; j++) {
			if (st.count(v[i][j])) {
				cnt[i][ptr - 1]++;
			} else {
				v[i][ptr] = v[i][j];
				cnt[i][ptr] = 1;
				st.insert(v[i][j]);
				ptr++;
			}
		}
		size[i] = ptr;
	}
	ll res = 0;
	set<int> st;
	int j = 0;
	for (int i = 0; i < size[0]; i++) {
		st.insert(v[0][i]);
		while(j < size[1] && !st.empty() && st.count(v[1][j])) {
			st.erase(v[1][j]);
			j++;
		}
		if (st.empty()) {
			res += cnt[0][i] * 1LL * cnt[1][j - 1];
		}
	}
	cout << res << endl;
}
int main() {
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int Cases; cin >> Cases;
	for (int Case = 1; Case <= Cases; Case++) {
		solve(Case);
	}
	return 0;
}

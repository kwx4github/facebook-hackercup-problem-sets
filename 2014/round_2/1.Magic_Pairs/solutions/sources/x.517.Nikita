#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>

using namespace std;

typedef long long LL;

const int MOD = (int)1e9 + 7;
const int base1 = 2999;
const int base2 = 3137;

int T;

int n, m;
int x1, x2, a1, a2, b1, b2, c1, c2;
int r1, r2;

LL A[1 << 20], B[1 << 20];

LL powmod(LL a, int x)
{
	if (x == 0)
		return 1;
	if (x & 1)
		return a * powmod(a * a % MOD, x / 2) % MOD;
	return powmod(a * a % MOD, x / 2);
}

int main()
{
	freopen("_magic_pairs.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	scanf("%d", &T);
	for(int I = 0; I < T; ++I)
	{
		scanf("%d%d", &n, &m);
		scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
		scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
		A[0] = x1, B[0] = x2;
		for(int i = 1; i < 1 << 20; ++i)
		{
			A[i] = (a1 * A[(i - 1) % n] + b1 * B[(i - 1) % m] + c1) % r1;
			B[i] = (a2 * A[(i - 1) % n] + b2 * B[(i - 1) % m] + c2) % r2;
		}
		set<int> S;
		map<LL, int> M;
		LL hash = 0;
		for(int i = 0; i < n; ++i)
		{
			if (S.find(A[i]) == S.end())
			{
				S.insert(A[i]);
				hash += powmod(base1, A[i]) * MOD + powmod(base2, A[i]);
				hash %= MOD;
			}
			M[hash]++;
		}
		LL res = 0;
		S.clear();
		hash = 0;
		for(int i = 0; i < m; ++i)
		{
			if (S.find(B[i]) == S.end())
			{
				S.insert(B[i]);
				hash += powmod(base1, B[i]) * MOD + powmod(base2, B[i]);
				hash %= MOD;
			}
			res += M[hash];
		}
		printf("Case #%d: %lld\n", I + 1, res);
	}
	return 0;
}
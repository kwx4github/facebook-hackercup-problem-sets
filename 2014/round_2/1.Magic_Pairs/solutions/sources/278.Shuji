package FHC._2014.R2.A;

import java.io.*;
import java.math.*;
import java.util.*;


import static java.util.Arrays.*;

public class A {
	static
	class Config {
		static final boolean DISP_PROGRESS = true;
		static final boolean DISP_ELASPED_TIME = true;
		static final boolean STDIO = false;
		
		static final String BASE_DIR = "data\\2014\\R2\\A";
		static final String IN_FILE = "_magic_pairs.txt";
		static final String OUT_FILE = IN_FILE + "_out.txt";
	}

	static
	class ParallelSolver implements Runnable {
		private static final int mod = (int)1e9+7;
		private static final int mod2 = (int)1e9+9;
		
		int n, m;
		long x1, a1, b1, c1, r1;
		long x2, a2, b2, c2, r2;
		public void readInput(final IOFast io) throws IOException {
			n = io.nextInt();
			m = io.nextInt();
			
			x1 = io.nextLong();
			a1 = io.nextLong();
			b1 = io.nextLong();
			c1 = io.nextLong();
			r1 = io.nextLong();
			
			x2 = io.nextLong();
			a2 = io.nextLong();
			b2 = io.nextLong();
			c2 = io.nextLong();
			r2 = io.nextLong();
		}
		
		int gcd(int n, int r) { return r == 0 ? n : gcd(r, n % r); }
		
		@Override
		public void run() {
			int[] u1 = new int[n];
			int[] u2 = new int[m];

			u1[0] = (int)x1;
			u2[0] = (int)x2;
			for(int i = 1; i < n || i < m; i++) {
				if(i < n) u1[i] = (int)((a1 * u1[(i-1)%n] + b1 * u2[(i-1)%m] + c1) % r1);
				if(i < m) u2[i] = (int)((a2 * u1[(i-1)%n] + b2 * u2[(i-1)%m] + c2) % r2);
			}

//			System.err.println(Arrays.toString(u1));
//			System.err.println(Arrays.toString(u2));
			
			long ans = 0;
			long h11 = 0, h21 = 0;
			long h12 = 0, h22 = 0;
			TreeMap<Integer, Long> mp0 = new TreeMap<Integer, Long>();
			TreeMap<Integer, Integer> mp1 = new TreeMap<Integer, Integer>();
			TreeMap<Long, Integer> mp2 = new TreeMap<Long, Integer>();
			for(int i = 0, j = 0; i < n; i++) {
				if(!mp0.containsKey(u1[i])) {
					mp0.put(u1[i], random.nextLong());
//					mp1.put(u1[i], 0);
					h11 ^= mp0.get(u1[i]);
//					h12 ^= u1[i];
				}
				if(!mp2.containsKey(h11)) { mp2.put(h11, 0); }
				mp2.put(h11, mp2.get(h11) + 1);
//				System.err.println(i + " " + h11);
				
//				final long h = (h11<<32|h12&0xFFFFFFFFL);
//				System.err.println(i + " " + h);
			}
			for(int i = 0, j = 0; i < m; i++) {
				if(!mp0.containsKey(u2[i])) { break; }
				if(!mp1.containsKey(u2[i])) {
					mp1.put(u2[i], 0);
					h21 ^= mp0.get(u2[i]);
				}
				if(mp2.containsKey(h21)) ans += mp2.get(h21);
//				System.err.println(i + " " + h21);
//				h22 ^= u1[i];
				/*
				h21 = h21 * mod + u2[i];
				h22 = h22 * mod2 + u2[i];
				final long h = (h21<<32|h22&0xFFFFFFFFL);
				System.err.println(i + " " + h);
				if(!mp2.containsKey(h)) mp2.put(h, 0);
				mp2.put(h, mp2.get(h) + 1);*/
			}
			
			out.println(ans);
		}
		
		
		final Random random = new Random(0);
		final StringWriter sw = new StringWriter();
		final PrintWriter out = new PrintWriter(sw);
		
		@Override
		public String toString() {
			out.flush();
			return sw.toString();
		}
		
		public ParallelSolver init(final IOFast io) throws IOException {
			readInput(io);
			return this;
		}
	}

	
	
	
	
	//////////////////////////////////////////
	final IOFast io = new IOFast();
	
	
	public long elaspedTimeMilli;
	
	public void run() throws IOException, InterruptedException {
		
		if(!Config.STDIO) {
			io.setFileDir(Config.BASE_DIR);
			io.setFileIO(Config.IN_FILE, Config.OUT_FILE);
		}
		
		int T = io.nextInt();
//		IOFast.nextLine();
		Runnable[] inst = new Runnable[T];
		Thread[] thread = new Thread[T];
		for(int t = 0; t < T; t++) {
			inst[t] = new ParallelSolver().init(io);
			thread[t] = new Thread(inst[t]);
			thread[t].start();
		}

		final long start = System.currentTimeMillis();
		for(int t = 0; t < T; t++) {
			thread[t].join();
			io.out.print("Case #" + (t+1) + ": " + inst[t]);
			
			if(Config.DISP_PROGRESS) {
				System.err.println("Case #" + (t+1) + ": DONE");
			}
		}
		
		final long end = System.currentTimeMillis();
		elaspedTimeMilli = end - start;
		System.err.println(elaspedTimeMilli + " [ms]");
	}

	static void arrayIntSort(int[][] x, int key) {
		Arrays.sort(x, new IntArrayComparator(key));
	}
	
	static class IntArrayComparator implements Comparator<int[]> {
		final int KEY;
		
		public IntArrayComparator(int key) {
			KEY = key;
		}
		
		@Override
		public int compare(int[] o1, int[] o2) {
			return o1[KEY] - o2[KEY];
		}
	}
	
	void main() throws IOException, InterruptedException {
		//		IOFast.setFileIO("rle-size.in", "rle-size.out");
		try {
			run();
		}
		catch (EndOfFileRuntimeException e) { }
		io.out.flush();
	}

	public static void main(String[] args) throws IOException, InterruptedException {
		new A().main();
	}
	
	static class EndOfFileRuntimeException extends RuntimeException {
		private static final long serialVersionUID = -8565341110209207657L; }

	static
	public class IOFast {
		private BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		private PrintWriter out = new PrintWriter(System.out);
		private String _dir;
		
		void setFileDir(String dir) {
			this._dir = dir;
		}

		void setFileIn(String ins) throws IOException {
			String pf = _dir == null ? "" : _dir + "\\";
			in = new BufferedReader(new FileReader(pf + ins));
		}

		void setFileOut(String outs) throws IOException {
			String pf = _dir == null ? "" : _dir + "\\";
			out = new PrintWriter(new FileWriter(pf + outs));
		}

		void setFileIO(String ins, String outs) throws IOException {
			setFileIn(ins);
			setFileOut(outs);
		}

		//		private static final int BUFFER_SIZE = 50 * 200000;
		private static int pos, readLen;
		private static final char[] buffer = new char[1024 * 8];
		private static final char[] str = new char[500000*8*2];
		private static boolean[] isDigit = new boolean[256];
		private static boolean[] isSpace = new boolean[256];
		private static boolean[] isLineSep = new boolean[256];

		static {
			for(int i = 0; i < 10; i++) { isDigit['0' + i] = true; }
			isDigit['-'] = true;
			isSpace[' '] = isSpace['\r'] = isSpace['\n'] = isSpace['\t'] = true;
			isLineSep['\r'] = isLineSep['\n'] = true;
		}

		public int read() throws IOException {
			if(pos >= readLen) {
				pos = 0;
				readLen = in.read(buffer);
				if(readLen <= 0) { throw new EndOfFileRuntimeException(); }
			}
			return buffer[pos++];
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(nextString());
		}

		public long nextLong() throws IOException {
			return Long.parseLong(nextString());
		}

		public char nextChar() throws IOException {
			while(true) {
				final int c = read();
				if(!isSpace[c]) { return (char)c; }
			}
		}
		
		int reads(char[] cs, int len, boolean[] accept) throws IOException {
			try {
				while(true) {
					final int c = read();
					if(accept[c]) { break; }
					cs[len++] = (char)c;
				}
			}
			catch(EndOfFileRuntimeException e) { ; }
			
			return len;
		}

		public char[] nextLine() throws IOException {
			int len = 0;
			str[len++] = nextChar();
			len = reads(str, len, isLineSep);
			
			try {
				if(str[len-1] == '\r') { len--; read(); }
			}
			catch(EndOfFileRuntimeException e) { ; }
			
			return Arrays.copyOf(str, len);
		}

		public String nextString() throws IOException {
			return new String(next());
		}

		public char[] next() throws IOException {
			int len = 0;
			str[len++] = nextChar();
			len = reads(str, len, isSpace);
			return Arrays.copyOf(str, len);
		}

		public double nextDouble() throws IOException {
			return Double.parseDouble(nextString());
		}

		public long[] nextLongArray(final int n) throws IOException {
			final long[] res = new long[n];
			for(int i = 0; i < n; i++) {
				res[i] = nextLong();
			}
			return res;
		}

		public int[] nextIntArray(final int n) throws IOException {
			final int[] res = new int[n];
			for(int i = 0; i < n; i++) {
				res[i] = nextInt();
			}
			return res;
		}

		public int[][] nextIntArray2D(final int n, final int k) throws IOException {
			final int[][] res = new int[n][];
			for(int i = 0; i < n; i++) {
				res[i] = nextIntArray(k);
			}
			return res;
		}

		public double[] nextDoubleArray(final int n) throws IOException {
			final double[] res = new double[n];
			for(int i = 0; i < n; i++) {
				res[i] = nextDouble();
			}
			return res;
		}

	}

}

#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<set>
#include<vector>
#include<utility>

using namespace std;

set<long long> isi1,isi2,beda;
vector<pair<long long,int> > letak[2];
long long a1,a2,b1,b2,c1,c2,r1,r2,board1[1000005],board2[1000005];
int N,M;

int main() {
    int kasus;
    scanf("%d",&kasus);
    for (int l=1;l<=kasus;++l) {
        scanf("%d %d",&N,&M);
        scanf("%I64d %I64d %I64d %I64d %I64d",&board1[0],&a1,&b1,&c1,&r1);
        scanf("%I64d %I64d %I64d %I64d %I64d",&board2[0],&a2,&b2,&c2,&r2);

        isi1.clear();
        isi2.clear();
        letak[0].clear();
        letak[1].clear();
        
        isi1.insert(board1[0]);
        isi2.insert(board2[0]);
        letak[0].push_back(make_pair(board1[0],0));
        letak[1].push_back(make_pair(board2[0],0));

        for (int i=1;i<max(N,M);++i) {
            if (i < N) {
                board1[i] = (a1*board1[i-1] + b1*board2[(i-1)%M] + c1) % r1;
                if (isi1.find(board1[i]) == isi1.end()) {
                    letak[0].push_back(make_pair(board1[i],i));
                    isi1.insert(board1[i]);
                }
            }

            if (i < M) {
                board2[i] = (a2*board1[(i-1)%N] + b2*board2[i-1] + c2) % r2;
                if (isi2.find(board2[i]) == isi2.end()) {
                    letak[1].push_back(make_pair(board2[i],i));
                    isi2.insert(board2[i]);
                }
            }
        }

        long long jawab = 0;
        beda.clear();
        for (int i=0;i<min(letak[0].size(),letak[1].size());++i) {
            if (beda.find(letak[0][i].first) == beda.end()) beda.insert(letak[0][i].first);
            else beda.erase(letak[0][i].first);

            if (beda.find(letak[1][i].first) == beda.end()) beda.insert(letak[1][i].first);
            else beda.erase(letak[1][i].first);

            if (beda.size() == 0) {
                long long p1,p2;
                if (i < letak[0].size()-1) p1 = letak[0][i+1].second-letak[0][i].second;
                else p1 = N-letak[0][i].second;

                if (i < letak[1].size()-1) p2 = letak[1][i+1].second-letak[1][i].second;
                else p2 = M-letak[1][i].second;

                jawab += p1*p2;
            }
        }

        /*for (int i=0;i<N;++i) printf("%I64d ",board1[i]);
        printf("\n");
        for (int i=0;i<M;++i) printf("%I64d ",board2[i]);
        printf("\n");

        printf("Udah diproses:\n");
        for (int i=0;i<letak[0].size();++i) printf("%I64d ",letak[0][i].first);
        printf("\n");
        for (int i=0;i<letak[1].size();++i) printf("%I64d ",letak[1][i].first);
        printf("\n");*/
        
        printf("Case #%d: %I64d\n",l,jawab);
    }
    return 0;
}

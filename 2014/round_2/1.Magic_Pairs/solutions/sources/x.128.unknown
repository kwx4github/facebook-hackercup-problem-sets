#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;

#define sz(v) int(v.size())
typedef long long ll;

const int MAXn = 1e6+10;
int a[MAXn], b[MAXn];
int n, m;

int main() {
	ios::sync_with_stdio(false);
	int T;
	cin >> T;
	for(int t = 1; t <= T; t++) {
		cin >> n >> m;
		int a1, b1, c1, r1;
		int a2, b2, c2, r2;
		cin >> a[0] >> a1 >> b1 >> c1 >> r1;
		cin >> b[0] >> a2 >> b2 >> c2 >> r2;
		for(int i = 1; i < max(n, m); i++) {
			if(i < n) a[i] = (a1*a[(i-1)%n]+b1*b[(i-1)%m]+c1)%r1;
			if(i < m) b[i] = (a2*a[(i-1)%n]+b2*b[(i-1)%m]+c2)%r2;
		}
	/*	for(int i = 0; i < n; i++)
			cerr << a[i] << " ";
		cerr << endl;
		for(int i = 0; i < m; i++)
			cerr << b[i] << " ";
		cerr << endl;
	*/

		set<int> mark; mark.clear();
		set<int> st; st.clear();
		ll ans = 0;
		int l = 0, r = 0;
		for(int i = 0; i < n; i++) {
			mark.insert(a[i]);
			if(!st.count(a[i]) ) {
				l = r;
				while(l < m && b[l] != a[i]) {
					st.insert(b[l]);
					l++;
				}
				if(l < m) st.insert(b[l]);
				r = l;
				while(r < m && (mark.count(b[r]) || st.count(b[r])))
					r++;
			}
		//	cerr << "@" << i << ":" << l << " " << r << endl;
			if(st.size() == mark.size()) {
				ans += r-l;
		//		cerr << "ADD " << r-l << endl;
			}
		}
		cout << "Case #" << t << ": " << ans << endl;
	}
	return 0;
}

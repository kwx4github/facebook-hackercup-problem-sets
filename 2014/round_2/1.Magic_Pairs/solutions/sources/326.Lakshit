#include<cstdio>
#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstdlib>
#include<climits>
#include<cstring>
#include<cctype>
#include<utility>
using namespace std;

#define CLR(a,x) memset(a,x,sizeof(a))
#define PB push_back
#define INF 1000000000
#define MOD 1000000007
#define MP make_pair
#define tr(container , it) for(typeof(container.begin()) it=container.begin() ; it!=container.end() ; it++)
#define FOR(i,a,b) for(i=a;i<b;i++)
#define REP(i,a) FOR(i,0,a)
#define LL long long
#define VI vector < int >
#define PII pair < int , int >


void precompute(void)
{
}

long long  board1[1000000], board2[1000000];
long long  cum1[1000000], cum2[1000000];
	int n,i,num[1<<20],pre[1<<20],nex[1<<20],ans,x,ind,p,q;
	vector < PII > nums;
int main()
{
	int test;
	scanf("%d",&test);
	for(int t=1 ; t<= test;t++){
		int n,m;
		scanf("%d %d",&n,&m);
		long long x1,b1,a1,c1,r1;
		long long x2,b2,a2,c2,r2;
		scanf("%lld %lld %lld %lld %lld",&x1,&a1,&b1,&c1,&r1);
		scanf("%lld %lld %lld %lld %lld",&x2,&a2,&b2,&c2,&r2);
		board1[0]=x1;
		board2[0]=x2;
		cum1[0]=1;
		cum2[0]=1;
		map<int,int> h1,h2;
		h1[x1]=0;
		h2[x2]=0;
		for(long long i=1;i<max(n,m);i++){
			if(i<n){
				board1[i]=(a1*board1[(i+n-1)%n] + b1*board2[(i+m-1)%m] + c1)%r1;
				if(h1.count(board1[i])==0){
					h1[board1[i]]=i;
					cum1[i]=cum1[i-1]+1;
				}
				else{
					cum1[i]=cum1[i-1];
				}
			}
			if(i<m){
				board2[i]=(a2*board1[(i+n-1)%n] + b2*board2[(i+m-1)%m] + c2)%r2;
				if(h2.count(board2[i])==0){
					h2[board2[i]]=i;
					cum2[i]=cum2[i-1]+1;
				}
				else{
					cum2[i]=cum2[i-1];
				}
			}
		}
		int max_j=0;
		long long count=0;
		int cur_i=0;
		int cur_j=0;
//		printf("Done\n");
		for(int i=0;i<n;i++){
			if(h2.find(board1[i]) == h2.end())
				break;
			cur_j = max(cur_j,h2[board1[i]]);
			if(cum1[i]==cum2[cur_j]){
				long long d1=0;
				long long d2=0;
				while(i<n-1 && cum1[i+1]==cum1[i]){
					d1++;
					i++;
				}
				while(cur_j<m-1 && cum2[cur_j+1]==cum2[cur_j]){
					d2++;
					cur_j++;
				}
				count+=(1+d1)*(1+d2);
			}
		}
		printf("Case #%d: %lld\n",t,count);
	}
	return 0;
}

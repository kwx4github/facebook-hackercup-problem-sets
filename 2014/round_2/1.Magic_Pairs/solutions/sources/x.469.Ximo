// compile with: g++ -Wall -O3 -std=c++11 magic.cpp 
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <set>
#include <vector>
using namespace std;

typedef long long int LL;
typedef pair<int,int> PII;

LL solve() {
    LL N, M, x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
    cin >> N >> M;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;

    vector<LL>B1(N);
    vector<LL> B2(M);
    set<LL> C1, C2;
    B1[0] = x1;
    B2[0] = x2;

    vector<int> change1, change2;
    C1.insert(x1);
    C2.insert(x2);
    change1.push_back(0);
    change2.push_back(0);

    LL limit = max(N, M);
    for (LL i = 1; i < limit; ++i) {
        // new colors
        if (i < N) {
            B1[i] = (a1*B1[i-1] + b1*B2[(i-1)%M] + c1)%r1;
            size_t size = C1.size();
            C1.insert(B1[i]);
            if (C1.size() > size)
                change1.push_back(i);
        }

        if (i < M) {
            B2[i] = (a2*B1[(i-1)%N] + b2*B2[i-1] + c2)%r2;
            size_t size = C2.size();
            C2.insert(B2[i]);
            if (C2.size() > size)
                change2.push_back(i);
        }
    }

    cout << "here" << endl;

    change1.push_back(N);
    change2.push_back(M);

    LL result = 0;
    limit = min(change1.size(), change2.size()) - 1;
    C1.clear();
    C2.clear();
    for (int i = 0; i < limit; ++i) {
        int p1 = B1[change1[i]];
        int p2 = B2[change2[i]];
        C1.insert(p1);
        C2.insert(p2);
        if (C1 == C2) { // match!
            LL dif1 = change1[i+1] - change1[i];
            LL dif2 = change2[i+1] - change2[i];
            result += dif1*dif2;
        } 
    }
    return result;
}

int main(int argc, char*argv[]) {
    int T;
    cin >> T;
    for (int i = 1; i <= T; ++i) {
        LL result = solve();
        printf("Case #%d: %lld\n", i, result);
    }
    return EXIT_SUCCESS;
}

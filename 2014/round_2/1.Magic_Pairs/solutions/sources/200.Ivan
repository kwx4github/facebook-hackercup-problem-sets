import java.io.*;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class MagicPairs {

    private static final String TASK_NAME = "magic_pairs";

    private static enum TaskSize {
        _example_,
        _
    }

    private int n, m;
    private long x1, a1, b1, c1, r1;
    private long x2, a2, b2, c2, r2;

    public MagicPairs(InputReader reader) throws IOException {
        n = reader.nextInt();
        m = reader.nextInt();
        x1 = reader.nextInt();
        a1 = reader.nextInt();
        b1 = reader.nextInt();
        c1 = reader.nextInt();
        r1 = reader.nextInt();
        x2 = reader.nextInt();
        a2 = reader.nextInt();
        b2 = reader.nextInt();
        c2 = reader.nextInt();
        r2 = reader.nextInt();
    }

    private String solve() throws Exception {
        int[] s1 = new int[n + 1];
        int[] s2 = new int[m + 1];
        s1[n] = Integer.MAX_VALUE;
        s2[m] = Integer.MAX_VALUE - 1;
        s1[0] = (int) x1;
        s2[0] = (int) x2;
        for (int i = 1; i < n || i < m; i++) {
            if (i < n) {
                s1[i] = (int) ((a1 * s1[(i-1) % n] + b1 * s2[(i-1) % m] + c1) % r1);
            }
            if (i < m) {
                s2[i] = (int) ((a2 * s1[(i-1) % n] + b2 * s2[(i-1) % m] + c2) % r2);
            }
        }
        Set<Integer> common = new HashSet<>();
        Set<Integer> extra1 = new HashSet<>();
        Set<Integer> extra2 = new HashSet<>();
//        System.err.println(Arrays.toString(s1));
//        System.err.println(Arrays.toString(s2));
        int p1 = 0;
        int p2 = 0;
        long ans = 0;
        while (p1 <= n && p2 <= m) {
            if (extra1.isEmpty() && extra2.isEmpty()) {
                extra1.add(s1[p1++]);
            }
            if (!extra2.isEmpty()) {
                int newitem = s1[p1++];
                if (extra2.contains(newitem)) {
                    extra2.remove(newitem);
                    common.add(newitem);
                } else if (!common.contains(newitem)) {
                    extra1.add(newitem);
                }
            } else if (!extra1.isEmpty()) {
                int newitem = s2[p2++];
                if (extra1.contains(newitem)) {
                    extra1.remove(newitem);
                    common.add(newitem);
                } else if (!common.contains(newitem)) {
                    extra2.add(newitem);
                }
            } else {
                throw null;
            }
            if (extra1.isEmpty() && extra2.isEmpty()) {
                long size1 = 1;
                long size2 = 1;

                while (p1 <= n && common.contains(s1[p1])) {
                    p1++;
                    size1++;
                }
                while (p2 <= m && common.contains(s2[p2])) {
                    p2++;
                    size2++;
                }
                ans += size1 * size2;
//                for (int i = 1; i <= size1; i++) {
//                    for (int j = 1; j <= size2; j++) {
//                        System.err.println((p1 - i) + " " + (p2 - j));
//                    }
//                }
            }
        }
        return "" + ans;
    }

    public static class InputReader implements AutoCloseable {

        private final BufferedReader in;
        private StringTokenizer tokenizer = new StringTokenizer("");

        public InputReader(String filename) throws FileNotFoundException {
            this.in = new BufferedReader(new FileReader(filename));
        }

        public String nextToken() throws IOException {
            while (!tokenizer.hasMoreTokens()) {
                tokenizer = new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(nextToken());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(nextToken());
        }

        @Override
        public void close() throws Exception {
            in.close();
        }

    }

    public static void main(String[] args) throws Exception {
        for (final TaskSize taskSize : TaskSize.values()) {
            String inName = TASK_NAME + taskSize.name() + "input.txt";
            String outName = TASK_NAME + taskSize.name() + "output.txt";
            String ansName = TASK_NAME + taskSize.name() + "answer.txt";

            try (InputReader reader = new InputReader(inName); PrintWriter writer = new PrintWriter(outName)) {
                ExecutorService executorService = Executors.newFixedThreadPool(6);

                int testCases = reader.nextInt();
                final String[] result = new String[testCases];
                for (int i = 0; i < testCases; i++) {
                    final MagicPairs solution = new MagicPairs(reader);
                    final int testCase = i;
                    executorService.submit(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                result[testCase] = solution.solve();
                            } catch (Exception e) {
                                e.printStackTrace();
                                throw new RuntimeException("Failed to solve test case=" + taskSize + "." + testCase);
                            }
                        }
                    });
                }
                executorService.shutdown();
                executorService.awaitTermination(10, TimeUnit.MINUTES);

                for (int testCase = 0; testCase < testCases; testCase++) {
                    writer.println("Case #" + (testCase + 1) + ": " + result[testCase]);
                    if (result[testCase] == null) {
                        throw new RuntimeException("No result for test case=" + taskSize + "." + testCase);
                    }
                }
            } catch (FileNotFoundException e) {
                // ignore
            }
            new ProcessBuilder("fc", outName, ansName).redirectOutput(ProcessBuilder.Redirect.INHERIT).start();
        }
    }
}

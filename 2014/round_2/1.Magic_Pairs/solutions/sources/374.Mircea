#include <iostream>
#include <set>
using namespace std;


/**
    I would like to work for Facebook!
*/




/**
    I would like to work for Facebook!
*/

long long Board1[1000050];
long long Board2[1000050];

int fastTest(int N, int M)
{
    int res = 0;
    for (int i= 0 ; i< N; i++)
    for (int j= 0 ; j< M; j++)
    {
        set<long long> vals1;
        set<long long> vals2;
        for (int x= 0 ; x<= i; x++)
        {
        vals1.insert(Board1[x]);
        }

        bool ok = true;
        for (int y= 0 ; y<= j; y++)
        {
            if (vals1.find(Board2[y])==vals1.end())
            ok = false;
            vals2.insert(Board2[y]);
        }
        if ((vals1.size() == vals2.size() )&& ok)
        {
            res++;
        }
    }
    return res;
}

int main()
{
    int t;
    cin >> t;
    set<long long> vals1;
    set<long long> vals2;
    for (int te = 1 ; te<t+1;te++)
    {
        vals1.clear();
        vals2.clear();
        long long res = 0 ;
        int N,M;
        long long x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;

        cin >> N >> M;

        cin >> x1>> a1>> b1>> c1>> r1;

        cin >> x2>> a2>> b2>> c2>> r2;
        Board1[0]=x1;
        Board2[0]=x2;
        for (int i = 1 ; i< min(M,N);i++)
        {
            Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
            Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
        }


        for (int i = 1 ; i< N;i++)
        {
            Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
        }


        for (int i = 1 ; i< M;i++)
        {
            Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
        }
/*
        for (int i = 0 ; i< N;i++)
        cout << Board1[i] << " ";
        cout << endl;

        for (int i = 0 ; i< M;i++)
        cout << Board2[i] << " ";
        cout << endl;
*/
        int indx=0;
        for (int i = 0 ; i< N;i++)
        {
            vals1.insert(Board1[i]);
            if (vals2.find(Board1[i]) == vals2.end())
            {
                do
                {
                    if (indx >= M)
                    {
                        indx++;
                        //cout << "nu gas "<< Board1[i] << endl;
                        break;
                    }
                    vals2.insert(Board2[indx]);

                }
                while(Board2[indx++] != Board1[i]);
            }
            if (indx > M)
                break;

            if (vals2.size() == vals1.size())
            {

                //cout <<"Match:"<< i <<" "<< indx<< endl;

                long long t1 =1;
                long long t2 = 1;
                if (i+1 < N)
                while(vals1.find(Board1[i+1])!=vals1.end())
                {
                    t1++;
                    i++;
                    if (i+1 >= N)
                    break;

                }
                if (indx < M)
                while(vals2.find(Board2[indx])!=vals2.end())
                {
                    t2++;
                    indx++;
                    if (indx >= M)
                    break;
                }
                res+= t1*t2;
                //cout << i <<" "<< t1<< endl;
                //cout << indx <<" "<< t2<< endl;
            }

        }


        cout << "Case #"<<te<<": "<<res<<endl;
        //cout << "Case #"<<te<<": "<<fastTest(N,M)<<endl;
    }
    return 0;
}

/**
    I would like to work for Facebook!
*/

import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Set;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.HashSet;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		MagicPairs solver = new MagicPairs();
		solver.solve(1, in, out);
		out.close();
	}
}

class MagicPairs {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int testCases = in.nextInt();
		for (int testCase = 1; testCase <= testCases; testCase++) {
//			System.out.println(testCase);
			int N = in.nextInt();
			int M = in.nextInt();

			long x1 = in.nextInt();
			long a1 = in.nextInt();
			long b1 = in.nextInt();
			long c1 = in.nextInt();
			long r1 = in.nextInt();

			long x2 = in.nextInt();
			long a2 = in.nextInt();
			long b2 = in.nextInt();
			long c2 = in.nextInt();
			long r2 = in.nextInt();

			long[] board1 = new long[N];
			long[] board2 = new long[M];
			board1[0] = x1;
			board2[0] = x2;
			for (int i = 1; i < Math.max(N, M); i++) {
				if (i < N) {
					board1[i] = (a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1;
				}
				if (i < M) {
					board2[i] = (a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2;
				}
			}

			long res = 0;

			Set<Long> has1 = new HashSet<>();
			Set<Long> has2 = new HashSet<>();
			Set<Long> need1 = new HashSet<>();
			Set<Long> need2 = new HashSet<>();

			int i = 1;
			int j = 0;
			has1.add(board1[0]);
			need2.add(board1[0]);
			int i1, j1;
			while (i < N || j < M) {
				i1 = i;
				j1 = j;
				while (!need1.isEmpty() && i < N) {
					has1.add(board1[i]);
					need1.remove(board1[i]);
					if (!has2.contains(board1[i])) {
						need2.add(board1[i]);
					}
					++i;
				}
				while (!need2.isEmpty() && j < M) {
					has2.add(board2[j]);
					need2.remove(board2[j]);
					if (!has1.contains(board2[j])) {
						need1.add(board2[j]);
					}
					++j;
				}
				if (need1.isEmpty() && need2.isEmpty()) {
					long cnt1 = 1;
					while (i < N && has1.contains(board1[i])) {
						++i;
						++cnt1;
					}
					long cnt2 = 1;
					while (j < M && has2.contains(board2[j])) {
						++j;
						++cnt2;
					}
					res += cnt1 * cnt2;

					if (i < N) {
						has1.add(board1[i]);
						need2.add(board1[i]);
						++i;
					} else if (j < M) {
						has2.add(board2[j]);
						need1.add(board2[j]);
						++j;
					}
				}
				if (i1 == i && j1 == j) {
					break;
				}
			}

			out.println("Case #" + testCase + ": " + res);
		}
	}
}

class InputReader {
	public BufferedReader reader;
	public StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream));
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}
}


#pragma comment(linker, "/STACK:256000000")

#include <set>
#include <map>
#include <list>
#include <stack>
#include <queue>
#include <ctime>
#include <math.h>
#include <vector>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <sstream>

using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)

const double PI = acos(-1.0);
const int INF = 1000000000;
const int MOD = 1000000007;



long long solve(long long n, long long m, 
					long long x1, long long x2,
					long long a1, long long a2,
					long long b1, long long b2,
					long long c1, long long c2,
					long long r1, long long r2) {
	vector<int> board[2];
	board[0].push_back(x1);
	board[1].push_back(x2);

	map<int, int> to_id;

	for (int i = 1; i < max(n, m); ++i) {
		if (i < n) {
			board[0].push_back((a1 * board[0][(i-1) % n] + b1 * board[1][(i-1) % m] + c1) % r1);
		}
		if (i < m) {
			board[1].push_back((a2 * board[0][(i-1) % n] + b2 * board[1][(i-1) % m] + c2) % r2);			
		}
	}

	set<long long> in[2];
	queue<long long> wait[2];

	int index[2] = {0,};

	long long answer = 0;

	index[0] = 1;
	in[0].insert(board[0][0]);
	wait[1].push(board[0][0]);

	while (true) {

		while(!wait[1].empty() || !wait[0].empty()) {

				while (!wait[1].empty()) {

					if (in[1].count(wait[1].front())) {
						wait[1].pop();
						continue;
					}

					while (index[1] < board[1].size() && board[1][index[1]] != wait[1].front()) {
						if (!in[0].count(board[1][index[1]])) {
							wait[0].push(board[1][index[1]]);
						}
						in[1].insert(board[1][index[1]]);
						++index[1];
					}

					if (index[1] >= board[1].size()) goto end;
					wait[1].pop();
					in[1].insert(board[1][index[1]]);
					index[1]++;
				}

				while (!wait[0].empty()) {

					if (in[0].count(wait[0].front())) {
						wait[0].pop();
						continue;
					}

					while (index[0] < board[0].size() && board[0][index[0]] != wait[0].front()) {
						if (!in[1].count(board[0][index[0]])) {
							wait[1].push(board[0][index[0]]);
						}
						in[0].insert(board[0][index[0]]);
						++index[0];
					}

					if (index[0] >= board[0].size()) goto end;
					wait[0].pop();
					in[0].insert(board[0][index[0]]);
					index[0]++;
				}

		}

		long long right[2] = {index[0], index[1]};
		while (right[0] < board[0].size() && in[0].count(board[0][right[0]])) {
			++right[0];
		}
		while (right[1] < board[1].size() && in[1].count(board[1][right[1]])) {
			++right[1];
		}

		answer += (right[0] - index[0] + 1) * (right[1] - index[1] + 1);

		index[0] = right[0];
		index[1] = right[1];

		if (index[0] >= board[0].size() || index[1] >= board[1].size()) {
			goto end;
		}

		in[0].insert(board[0][index[0]]);
		wait[1].push(board[0][index[0]]);
		++index[0];
	}

	end:;
	return answer;
}

int main() {
	int _start = clock();
	
	freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

	int T; cin >> T;
	for (int i = 0; i < T; ++i) {
		int n, m, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
		cin >> n >> m >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;

		_start = clock();

		long long r = solve(n, m, x1, x2, a1, a2, b1, b2, c1, c2, r1, r2);

		cout << "Case #" << i + 1 << ": " <<  r << endl;

		cerr << "Case #" << i + 1 << ": " << r << endl;

		cerr << "Time: " << (double)(clock() - _start) / CLOCKS_PER_SEC << endl;
	}



	//cerr << endl << endl << "Time: " << (double)(clock() - _start) / CLOCKS_PER_SEC << endl;
	return 0;
}
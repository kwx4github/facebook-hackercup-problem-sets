#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<set>
#include<algorithm>
#include<math.h>

using namespace std;
const long double PI = 3.14159265358979323;
const long double eps = 1e-10;
typedef pair<int, int> pii;
typedef long long ll;
typedef unsigned long long ull;


ll solve() {
	int n, m;
	cin >> n >> m;
	int N = max(n, m);
	set<int> s1, s2;
	vector<ll> board1(n), board2(m);
	ll x1, a1, b1, c1, r1;
	ll x2, a2, b2, c2, r2;
	vector<ll> count1(N + 1, 0), count2(N + 1, 0);
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	s1.insert(x1);
	board1[0] = x1;
	++count1[1];
	s2.insert(x2);
	++count2[1];
	board2[0] = x2;
	for (int i = 1; i < N; ++i) {
		if (i < n) {
			board1[i] = (a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1;
			s1.insert(board1[i]);
			++count1[s1.size()];
		}
		if (i < m) {
			board2[i] = (a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2;
			s2.insert(board2[i]);
			++count2[s2.size()];
		}
	}
	int j = 0;
	s1.clear();
	//s1.insert(x1);
	s2.clear();
	//s2.insert(x2);
	ll res = 0;
	for (int i = 0; i < n; ++i) {
		if (s1.find(board1[i]) != s1.end()) 
			continue;
		s1.insert(board1[i]);
		while((j < m) && (s2.find(board1[i]) == s2.end())) {
			s2.insert(board2[j]);
			++j;
		}
		if (s2.find(board1[i]) == s2.end()) {
			break;
		}
		if (s1.size() != s2.size())
			continue;
		if (s1.size() == s2.size()) 
			res += count1[s1.size()] * count2[s2.size()];
	}
	return res;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int t;
	cin >> t;
	for (int i = 0; i < t; ++i) {
		cout << "Case #" << i + 1 << ": " << solve() << endl;
		std::cerr << i << endl;
	}
	return 0;	
}


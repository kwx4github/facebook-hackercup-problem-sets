#include <iostream>
#include <fstream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cstring>
#include <string>
#include <cmath>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <functional>
#include <limits>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef pair<int,int> pii;
typedef vector<vector<int> > graph;

const double pi = acos(-1.0);

#define oned(a, x1, x2) { cout << #a << ":"; for(int _i = (x1); _i < (x2); _i++){ cout << " " << a[_i]; } cout << endl; }
#define twod(a, x1, x2, y1, y2) { cout << #a << ":" << endl; for(int _i = (x1); _i < (x2); _i++){ for(int _j = (y1); _j < (y2); _j++){ cout << (_j > y1 ? " " : "") << a[_i][_j]; } cout << endl; } }

#define mp make_pair
#define pb push_back
#define fst first
#define snd second

#define MAXN 1000005

ll n, m, x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;

ll Board1[MAXN], Board2[MAXN];

void solve(int CASE) {
	Board1[0] = x1;
	Board2[0] = x2;
	for(int i = 1; i < max(n,m); i++) {
		Board1[i] = (a1 * Board1[i-1] + b1 * Board2[i-1] + c1) % r1;
		Board2[i] = (a2 * Board1[i-1] + b2 * Board2[i-1] + c2) % r2;
	}
	
	map<ll,ll> First1, First2;
	for(int i = 0; i < m; i++) {
		First1[Board2[i]] = n;
	}
	for(int i = n-1; i >= 0; i--) {
		First1[Board1[i]] = i;
	}
	for(int i = 0; i < n; i++) {
		First2[Board1[i]] = m;
	}
	for(int i = m-1; i >= 0; i--) {
		First2[Board2[i]] = i;
	}
	
	ll i = 0;
	ll j = 0;
	ll ans = 0;
	while(i<n && j<m) {
		if(i%1000==0) cerr << i << endl;
		ll i2 = First1[Board2[j]];
		ll j2 = First2[Board1[i]];
		while(i<i2 || j<j2) {
			if(i<i2) {
				i++;
				j2 = max(j2,First2[Board1[i]]);
			} else {
				j++;
				i2 = max(i2,First1[Board2[j]]);
			}
		}
		
		if(i<n && j<m) {
			i2++;
			j2++;
			while(i2<n && First1[Board1[i2]]<=i) {
				i2++;
			}
			while(j2<m && First2[Board2[j2]]<=j) {
				j2++;
			}
			ans += (i2-i)*(j2-j);
			i = i2;
			j = j2;
		}
	}
	
	cout << "Case #" << CASE << ": ";
	cout << ans << endl;
}

int main() {
	ios_base::sync_with_stdio(false);
	freopen("input.in", "r", stdin);
	freopen("output.out", "w", stdout);
	int TESTS; cin >> TESTS;
	for(int CASE = 1; CASE <= TESTS; CASE++) {
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		solve(CASE);
	}
}

#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}
const int MX = 1e6+10;
int A[2][MX];
int who[2][MX];
LL cnt[2][MX];

int process(int t, int n) {
    set<int> S;
    int c = 0, cn = 0;
    REP(i,n) {
        auto r = S.insert(A[t][i]);
        if (r.Y == true) {
            who[t][c] = A[t][i];
            cnt[t][c] = cn;
            ++c;
            cn = 0;
        }
        ++cn;
    }
    cnt[t][c] = cn;
    return c;
}


void solve(int tc) {
    cout << "Case #" << tc << ": ";
    int n[2];
    cin >> n[0] >> n[1];
    LL a[2], b[2], c[2], r[2];
    REP(i, 2) {
        cin >> A[i][0] >> a[i] >> b[i] >> c[i] >> r[i];
    }
    FOR(i, 1, max(n[0],n[1])-1) {
        REP(t,2) {
            if (i < n[t]) {
                A[t][i] = (a[t]*A[0][(i+n[0]-1)%n[0]] + b[t]*A[1][(i+n[1]-1)%n[1]] + c[t]) % r[t];
            }
        }
    }
    int C = min(process(0, n[0]),  process(1, n[1]));
    set<int> S;
    LL res = 0;
    REP(i, C) {
        S.insert(who[0][i]);
        S.insert(who[1][i]);
        if (SZ(S) == (i+1)) {
            res += cnt[0][i+1]*cnt[1][i+1];
        }
    }
    cout << res << endl;
}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);
    
    return 0;
}


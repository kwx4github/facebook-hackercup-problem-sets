#include <algorithm>
#include <cassert>
#include <iostream>
#include <set>

using namespace std;

int board[2][1000000];

int main() {
    int t;
    cin >> t;

    for(int z = 1; z <= t; z++) {
        int N[2];
        long long a[2], b[2], c[2], r[2];

        cin >> N[0] >> N[1];
        for(int i = 0; i < 2; i++)
            cin >> board[i][0] >> a[i] >> b[i] >> c[i] >> r[i];

        for(int i = 1; i < max(N[0], N[1]); i++)
            for(int j = 0; j < 2; j++)
                if(i < N[j])
                    board[j][i] = (a[j] * board[0][(i-1) % N[0]] +
                                   b[j] * board[1][(i-1) % N[1]] + c[j]) % r[j];

        int pos[2] = {0, 0};
        long long ans = 0;
        set<int> exclusive_to[2];
        set<int> colors[2];

        for(int cur_colors = 1; pos[0] < N[0] && pos[1] < N[1]; cur_colors++) {
            int ccol[2] = {board[0][pos[0]], board[1][pos[1]]};

            colors[0].insert(ccol[0]);
            colors[1].insert(ccol[1]);

            if(exclusive_to[1].find(ccol[0]) != exclusive_to[1].end())
                exclusive_to[1].erase(ccol[0]);
            if(exclusive_to[0].find(ccol[1]) != exclusive_to[0].end())
                exclusive_to[0].erase(ccol[1]);

            if(colors[1].find(ccol[0]) == colors[1].end())
                exclusive_to[0].insert(ccol[0]);
            if(colors[0].find(ccol[1]) == colors[0].end())
                exclusive_to[1].insert(ccol[1]);

            assert(colors[0].size() == colors[1].size() && colors[0].size() == cur_colors);
            assert(exclusive_to[0].size() == exclusive_to[1].size());

            int prev_pos[2] = {pos[0], pos[1]};
            for(int i = 0; i < 2; i++)
                while(pos[i] < N[i] &&
                      colors[i].find(board[i][pos[i]]) != colors[i].end())
                    pos[i]++;

            if(exclusive_to[0].size() == 0)
                ans += (long long)(pos[0] - prev_pos[0]) * (pos[1] - prev_pos[1]);
        }

        cout << "Case #" << z << ": " << ans << endl;
    }
}

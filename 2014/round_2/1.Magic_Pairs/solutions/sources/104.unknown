/*
 * in the name of god
 *
 *
 *
 *
 *
 *
 *
 *
 */

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <bitset>
#include <iomanip>
#include <utility>

using namespace std;

typedef long long LL;
typedef pair<int,int> pii;
typedef complex<double> point;

int n,m;
int x1,a1,b1,c1,r1;
int x2,a2,b2,c2,r2;
int func[1<<20],f1[1<<20],f2[1<<20];

LL main2(){
	cin >> n >> m;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	f1[0] = x1;
	f2[0] = x2;
	for (int i=1; i<max(n,m); i++){
		if (i<n)
			f1[i] = ((LL)a1 * f1[(i-1)%n] + (LL)b1 * f2[(i-1)%m] + c1) % r1;
		if (i<m)
			f2[i] = ((LL)a2 * f1[(i-1)%n] + (LL)b2 * f2[(i-1)%m] + c2) % r2;
	}

	map <int,int> mp1,mp2;
	for (int i=0; i<n; i++) if (mp1.find(f1[i]) == mp1.end()) mp1[f1[i]] = i;
	for (int i=0; i<m; i++) if (mp2.find(f2[i]) == mp2.end()) mp2[f2[i]] = i;

	for (int i=0; i<n; i++){
		if (mp2.find(f1[i]) == mp2.end())
			func[i] = m;
		else{
			if (i!=0)
				func[i] = func[i-1];
			else
				func[i] = 0;
			func[i] = max(func[i], mp2[f1[i]]); 
		}
	}

	int maxi = 0;
	int poi = 0;
	LL ret = 0;
	for (int i=0; i<m; i++){
		if (mp2[f2[i]] == i){
			if (mp1.find(f2[i]) == mp1.end())
				return ret;
			maxi = max(maxi, mp1[f2[i]]);
		}
		while (poi<n && func[poi] <= i)
			poi++;
		ret+= max(0, poi-maxi);
	}
	return ret;
}

int main(){
	int tt; cin >> tt;
	for (int o=1; o<=tt; o++)
		cout << "Case #" << o << ": " << main2() << endl;
	return 0;
}

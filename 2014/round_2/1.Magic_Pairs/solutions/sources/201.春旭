#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <map>
#include <cstring>
#define maxl 1000000000
#define maxn 1000010
#define maxs 150
using namespace std;

typedef long long ll;


int getShould(ll num,map<ll,int> &mm){
	if(mm.count(num))return mm[num];
	return maxl;
}

map<ll,int> mm1,mm2;
ll a[maxn],b[maxn];

void solve(){
	int n,m,i,lnow,rnow,lshould,rshould,tmpl,tmpr;
	ll x1,a1,b1,c1,r1,x2,a2,b2,c2,r2;
	cin>>n>>m;
	cin>>x1>>a1>>b1>>c1>>r1;
	cin>>x2>>a2>>b2>>c2>>r2;
	a[0]=x1;
	b[0]=x2;
	
	for(i=1;i<max(n,m);++i){
		a[i] = (a1 * a[(i-1) % n] + b1 * b[(i-1) % m] + c1) % r1;
		b[i] = (a2 * a[(i-1) % n] + b2 * b[(i-1) % m] + c2) % r2;
	}
	mm1.clear();mm2.clear();
	for(i=0;i<n;++i){
		if(!mm1.count(a[i]))mm1[a[i]]=i;
		//cout<<a[i]<<" ";
	}
	//cout<<endl;
	for(i=0;i<m;++i){
		if(!mm2.count(b[i]))mm2[b[i]]=i;
		//cout<<b[i]<<' ';
	}
	//cout<<endl;
	lnow=1;rnow=0;
	lshould=0;rshould=getShould(a[0],mm2);
	ll ans=0;
	while(true){
		while(lnow<=lshould || rnow<=rshould){
			if(lshould>=n || rshould>=m)break;
			while(lnow<=lshould && lnow<n)rshould=max(rshould,getShould(a[lnow++],mm2));
			while(rnow<=rshould && rnow<m)lshould=max(lshould,getShould(b[rnow++],mm1));
		}
		if(lshould>=n || rshould>=m)break;
		tmpl=lnow;tmpr=rnow;
		while(lnow<n && getShould(a[lnow],mm2)<=rshould)++lnow;
		while(rnow<m && getShould(b[rnow],mm1)<=lshould)++rnow;
		ans+=(ll)(lnow-tmpl+1)*(rnow-tmpr+1);
		if(lnow>=n || rnow>=m)break;
		rshould=getShould(a[lnow++],mm2);
	}
	cout<<ans<<endl;
}

int main(){
	ios::sync_with_stdio(false);
	int t;
	cin>>t;
	for(int i=1;i<=t;++i){
		cout<<"Case #"<<i<<": ";
		solve();
	}
	return 0;
}
import java.util.*;
import java.io.*;
import java.math.*;

public class Main {

	public static InputStream inStream = System.in;
	public static BufferedReader in = null;
	public static StringTokenizer st = null;
	public static PrintWriter out = null;
	public static boolean debug = false;

	public static void init() throws Exception {
		if (debug) {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);
			return;
		}
		File f1 = new File("input.txt");
		f1.createNewFile();
		inStream = new FileInputStream(f1);

		in = new BufferedReader(new InputStreamReader(inStream));
		out = new PrintWriter("output.txt");
	}

	static {
		try {
			init();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String nx() throws Exception {
		while (st == null || !st.hasMoreTokens()) {
			String k1 = in.readLine();
			if (k1 == null)
				return k1;
			st = new StringTokenizer(k1);
		}
		return st.nextToken();
	}

	public static int ni() throws Exception {
		return Integer.parseInt(nx());
	}

	public static long nl() throws Exception {
		return Long.parseLong(nx());
	}

	public static double nd() throws Exception {
		return Double.parseDouble(nx());
	}

	public static void main(String[] args) throws Exception {
		solve();
		out.flush();
	}
	static int n1 = 0, m1 = 0;
	static long x1 = 0, a1 = 0, b1 = 0,c1=0,r1 =0,x2=0,a2=0,b2=0,c2=0,r2=0;
	static int lim = 0;
	static long[] l1 = null;
	static long[] l2 = null;
	public static void solve() throws Exception {
		int no = ni();
		for (int qq = 0; qq < no; qq++) {
			px("case",qq);
			n1 = ni();
			m1 = ni();

			x1 = ni();
			a1 = ni();
			b1 = ni();
			c1 = ni();
			r1 = ni();

			x2 = ni();
			a2 = ni();
			b2 = ni();
			c2 = ni();
			r2 = ni();

			
			lim = Math.max(n1, m1);
			l1 = new long[lim];
			l2 = new long[lim];

			l1[0] = x1;
			l2[0] = x2;
			for (int i = 1; i < lim; i++) {
				l1[i] = (a1 * l1[(i - 1) % n1] + b1 * l2[(i - 1) % m1] + c1)
						% r1;
				l2[i] = (a2 * l1[(i - 1) % n1] + b2 * l2[(i - 1) % m1] + c2)
						% r2;
			}
			
//			px("l1",Arrays.copyOf(l1, n1));
//			px("l2",Arrays.copyOf(l2, m1));
			long fin = 0;
			HashSet<Integer> set1 = new HashSet();
			
			IntL seq1 = new IntL();
			IntL cnt = new IntL();
			for (int i =0; i < n1 ;i++){
				if (!set1.contains(l1[i])){
					set1.add((Integer)(int)l1[i]);
					seq1.add((Integer)(int)l1[i]);
					cnt.add(1);
				}
				else {
					cnt.cont[cnt.size - 1]++;
				}
				set1.add((Integer)(int)l1[i]);
			}
//			px("seq1",seq1);
//			px(cnt);
//			px();
			
			final int[] sorted1 = seq1.arrayForm();
			Arrays.sort(sorted1);
			final int[] order = new int[sorted1.length];
			for (int i = 0; i< seq1.size; i++){
				int id = Arrays.binarySearch(sorted1, seq1.get(i));
				order[id] = i + 1;
			}
			TreeSet<Integer> q1 = new TreeSet(new Comparator<Integer>(){
				@Override
				public int compare(Integer o1, Integer o2) {
					int k1 = o1;
					int k2 = o2;
					int id1 = Arrays.binarySearch(sorted1, k1);
					int id2 = Arrays.binarySearch(sorted1, k2);
					int cmp1 = order[id1];
					int cmp2 = order[id2];
					return cmp1 - cmp2;
				}
			});
			
			boolean bad = false;
			for (int i =0; i < m1;i++){
				if (Arrays.binarySearch(sorted1, (Integer)(int)l2[i]) < 0) bad = true;
				if (bad) continue;
				q1.add((Integer)(int)l2[i]);
				int shouldHave = order[Arrays.binarySearch(sorted1, q1.last())];
				int rllyHave = q1.size();
				if (rllyHave - shouldHave == 0){
					long cur = cnt.get(shouldHave - 1);
					fin += cur;
				}
			}

			out.print("Case #" + (qq + 1) + ": ");
			out.print(fin);
			out.println();
		}
	}
	public static void px(Object... l1) {
		System.out.println(Arrays.deepToString(l1));
	}

	public static BigInteger bi(long n1) {
		return BigInteger.valueOf(n1);
	}

	private static class IntL implements Iterable<Integer> {
		public int[] cont = null;
		public int size = 0;

		public IntL(int initialCapacity) {
			this.cont = new int[initialCapacity];
		}

		public IntL() {
			this(5);
		}

		public void add(int e) {
			if (size == cont.length) {
				cont = Arrays.copyOf(cont, ((cont.length * 3) >> 1) + 1);
			}
			cont[size++] = e;
		}

		public int get(int id) {
			if (id >= 0)
				return cont[id];
			else
				return cont[size + id];
		}

		public int[] arrayForm() {
			return Arrays.copyOf(cont, size);
		}

		@Override
		public String toString() {
			StringBuilder fin = new StringBuilder();
			fin.append('{');
			for (int i = 0; i < size; i++) {
				if (i != 0)
					fin.append(", ");
				fin.append(cont[i]);
			}
			fin.append('}');
			return fin.toString();
		}

		@Override
		public Iterator<Integer> iterator() {
			return new It();
		}

		public class It implements Iterator<Integer> {
			int ptr = 0;

			@Override
			public boolean hasNext() {
				if (ptr < size)
					return true;
				return false;
			}

			@Override
			public Integer next() {
				int fin = cont[ptr];
				ptr++;
				return fin;
			}

			@Override
			public void remove() {
			}
		}
	}

}


//
//  main.cpp
//  FHCRound2
//
//  Created by Nagi Nahas on 12/14/13.
//  Copyright (c) 2013 Nagi Nahas. All rights reserved.
//
/*
Board1[0] = x1
Board2[0] = x2
Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1, for 0 < i < N
Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2, for 0 < i < M
*/

#include <iostream>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;
long long Board1[2000*1000];
long long Board2[2000*1000];
int main(int argc, const char * argv[])
{
    int T;
    cin >> T;
    for(int t=0;t<T;t++){
        long long N,M,x1, a1, b1, c1, r1,x2, a2, b2, c2, r2;
        cin >> N >> M >> x1 >> a1>> b1>> c1>> r1>> x2>>a2>>b2>>c2>> r2;
        Board1[0] = x1;
        Board2[0] = x2;
        for(int i=1;i<max(N,M);i++){
            Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
            Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
        }
        set<long long > s1,s2,s1ms2;
        //put one element in set s1, then add elements to s2 until s1 minus s2 is 0, then add elements to s1 until same
        //number of elements. if equality, then go as far as possible in either sequences without modifying
        //the set, and add the corresponding number of items;
        long long i = 0, j=0;
        s1.insert(Board1[0]);
        s1ms2.insert(Board1[i]);
        long long retval = 0;
        i++;
        while(true){
            //at the beginning of the loop, always unequal.
            while(j<M && s1ms2.empty()!=true){
                s2.insert(Board2[j]);
                if(s1ms2.count(Board2[j])!=0) s1ms2.erase(Board2[j]);
                j++;
            }
            if(s1ms2.empty()!=true)  break;
            while(i<N && s1.size()<s2.size()){
                s1.insert(Board1[i]);
                if(s2.count(Board1[i])==0) s1ms2.insert(Board1[i]);
                i++;
            }
            if(s1.size()!=s2.size()) break;
            if(s1ms2.empty() && s1.size()==s2.size()){
                long long k=i-1,q = j-1;
                //for as long as the set doesn't change
                while(k<N && s1.count(Board1[k])>0) k++;
                while(q<M && s2.count(Board2[q])>0) q++;
                retval+=(k-i+1) * (q-j+1);
                if(k==N ||q == M) break;
                i = k;
                j = q;
                s1.insert(Board1[i]);
                s1ms2.insert(Board1[i]);
                i++;
            }
            
            
        }
        cout << "Case #" << t+1 << ": " << retval << endl;
        

        
    }

   
    return 0;
}



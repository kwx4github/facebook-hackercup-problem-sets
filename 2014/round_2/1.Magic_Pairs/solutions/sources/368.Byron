#include <iostream>
#include <string>
#include <unordered_set>
#include <vector>
using namespace std;

void Insert1(long long val, unordered_set<long long>* s1, unordered_set<long long>* s2, unordered_set<long long>* s3) {
  if (s3->find(val) != s3->end()) return;
  if (s2->find(val) != s2->end()) {
    s2->erase(val);
    s3->insert(val);
    return;
  }
  if (s1->find(val) != s1->end()) {
    return;
  }
  s1->insert(val);
}

void Insert2(long long val, unordered_set<long long>* s1, unordered_set<long long>* s2, unordered_set<long long>* s3) {
  if (s3->find(val) != s3->end()) return;
  if (s1->find(val) != s1->end()) {
    s1->erase(val);
    s3->insert(val);
    return;
  }
  if (s2->find(val) != s2->end()) {
    return;
  }
  s2->insert(val);
}

int main() {
  int T;
  cin >> T;
  for (int i = 0; i < T; ++i) {
    long long N, M, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
    cin >> N >> M >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;

    vector<long long> board1, board2;
    unordered_set<long long> set1, set2, set3;
    Insert1(x1, &set1, &set2, &set3);
    Insert2(x2, &set1, &set2, &set3);
    board1.push_back(x1);
    board2.push_back(x2);
    int pos1 = 1, pos2 = 1;
    long long ans = 0;
    long long m1 = 1, m2 = 1;
    long long longest = N;
    if (M > N) longest = M;
    for (long long j = 1; j < longest; ++j) {
      long long next1 = (a1 * board1[(j - 1) % N] + b1 * board2[(j - 1) %  M] + c1) % r1;
      long long next2 = (a2 * board1[(j - 1) % N] + b2 * board2[(j - 1) %  M] + c2) % r2;
      if (j < N) board1.push_back(next1);
      if (j < M) board2.push_back(next2);
    }
    while (pos1 < N || pos2 < M) {
      long long next1 = -1, next2 = -1;
      if (pos1 < N) next1 = board1[pos1];
      if (pos2 < M) next2 = board2[pos2];
      bool left = true;
      if (pos1 == N) left = false;
      if (set1.size() == 0 && set2.size() == 0) {
        if (set3.find(next1) != set3.end()) {
          ++m1;
        } else if (set3.find(next2) != set3.end()) {
          ++m2;
          left = false;
        } else {
          ans += m1 * m2;
          m1 = 1;
          m2 = 1;
        }
      } else if (set1.size() != 0) {
        left = false;
      }
      if (pos2 == M) left = true;
      if (left) {
        Insert1(next1, &set1, &set2, &set3);
        ++pos1;
      } else {
        Insert2(next2, &set1, &set2, &set3);
        ++pos2;
      }
    }
    if (set1.size() == 0 && set2.size() == 0) ans += m1 * m2;
    cout << "Case #" << (i+1) << ": " << ans << endl;
  }
}



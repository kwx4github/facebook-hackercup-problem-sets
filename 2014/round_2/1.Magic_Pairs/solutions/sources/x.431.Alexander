/*
ID: espr1t
LANG: C++
TASK: 
KEYWORDS: 
CONTEST: Facebook HackerCup 2013-2014
*/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ctime>

#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

using namespace std;
FILE *in; FILE *out;

const int MAX = 1048576;
const int BUFF = 1048576;

int n, m;
int a[MAX], b[MAX];

long long eval() {
    /*
    for (int i = 0; i < n; i++)
        fprintf(stderr, "%d%c", a[i], i + 1 == n ? '\n' : ' ');
    for (int i = 0; i < m; i++)
        fprintf(stderr, "%d%c", b[i], i + 1 == m ? '\n' : ' ');
    */
    long long ans = 0;

    set <int> s1, s2, rem;
    int idx1 = -1, idx2 = -1;
    while (idx1 + 1 < n && idx2 + 1 < m) {
        while (idx1 + 1 < n) {
            idx1++;
            if (rem.find(a[idx1]) != rem.end())
                continue;
            if (s2.find(a[idx1]) != s2.end()) {
                rem.insert(a[idx1]);
                s2.erase(s2.find(a[idx1]));
                if (s2.size() == 0)
                    break;
            }
            else if (s1.find(a[idx1]) == s1.end()) {
                s1.insert(a[idx1]);
                if (s2.empty())
                    break;
            }
        }
        while (idx2 + 1 < m) {
            idx2++;
            if (rem.find(b[idx2]) != rem.end())
                continue;
            if (s1.find(b[idx2]) != s1.end()) {
                rem.insert(b[idx2]);
                s1.erase(s1.find(b[idx2]));
                if (s1.size() == 0)
                    break;
            }
            else if (s2.find(b[idx2]) == s2.end()) {
                s2.insert(b[idx2]);
                if (s1.empty())
                   break;
            }
        }
        //fprintf(stderr, "common set is: { ");
        //for (set <int> :: iterator it = rem.begin(); it != rem.end(); it++)
        //    fprintf(stderr, "%d ", *it);
        //fprintf(stderr, "}\n");
        if (s1.empty() && s2.empty()) {
            long long cnt1 = 1, cnt2 = 1;
            while (idx1 + 1 < n && rem.find(a[idx1 + 1]) != rem.end())
                idx1++, cnt1++;
            while (idx2 + 1 < m && rem.find(b[idx2 + 1]) != rem.end())
                idx2++, cnt2++;
            ans += cnt1 * cnt2;
        }
        //fprintf(stderr, "answer is: %d\n", (int)ans);
    }
    while (idx1 + 1 < n) {
        idx1++;
        if (rem.find(a[idx1]) != rem.end()) {
            if (s1.empty() && s2.empty())
                ans++;
            continue;
        }
        if (s2.find(a[idx1]) != s2.end()) {
            rem.insert(a[idx1]);
            s2.erase(s2.find(a[idx1]));
        }
        else {
            s1.insert(a[idx1]);
        }
        if (s1.empty() && s2.empty())
            ans++;
    }
    while (idx2 + 1 < m) {
        idx2++;
        if (rem.find(b[idx2]) != rem.end()) {
            if (s1.empty() && s2.empty())
                ans++;
            continue;
        }
        if (s1.find(b[idx2]) != s1.end()) {
            rem.insert(b[idx2]);
            s1.erase(s1.find(b[idx2]));
        }
        else {
            s2.insert(b[idx2]);
        }
        if (s1.empty() && s2.empty())
            ans++;
    }
    return ans;
}

string toString(long long num) {
    if (num == 0)
        return "0";
    string sign = "";
    if (num < 0)
        sign = "-", num = -num;
    
    string ret;
    while (num)
        ret += (num % 10 + '0'), num /= 10;
    reverse(ret.begin(), ret.end());
    return sign + ret;
}

long long getLong(FILE* fp = stdin) {
    char buff[32];
    fscanf(fp, "%s", buff);
    int start = 0, len = (int)strlen(buff);
    bool sign = true;
    if (buff[0] == '-')
        sign = false, start = 1;
    long long val = 0;
    for (int i = start; i < len; i++)
        val = val * 10 + buff[i] - '0';
    return sign ? val : -val;
}

void solveTest(int testCase) {
	fscanf(in, "%d %d", &n, &m);
	long long x1 = getLong(in), a1 = getLong(in), b1 = getLong(in), c1 = getLong(in), r1 = getLong(in);
	long long x2 = getLong(in), a2 = getLong(in), b2 = getLong(in), c2 = getLong(in), r2 = getLong(in);
	
	a[0] = x1; b[0] = x2;
	int minn = min(n, m);
	for (int i = 1; i < minn; i++) {
	    a[i] = (a1 * a[i - 1] + b1 * b[i - 1] + c1) % r1;
	    b[i] = (a2 * a[i - 1] + b2 * b[i - 1] + c2) % r2;
	}
	for (int i = minn; i < n; i++) {
	    a[i] = (a1 * a[i - 1] + b1 * b[i - 1] + c1) % r1;
	}
	for (int i = minn; i < m; i++) {
	    b[i] = (a2 * a[i - 1] + b2 * b[i - 1] + c2) % r2;
	}
	fprintf(out, "Case #%d: %s\n", testCase, toString(eval()).c_str());
}

int main(void) {
	in = stdin; out = stdout;
	in = fopen("MagicPairs.in", "rt"); out = fopen("MagicPairs.out", "wt");
	
	unsigned sTime = clock();

	int numTests;
	fscanf(in, "%d", &numTests);
	static char buff[BUFF]; fgets(buff, BUFF, in);
	
	for (int testCase = 1; testCase <= numTests; testCase++) {
		unsigned tTime = clock();
		fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
		solveTest(testCase);
		fprintf(stderr, "  -- execution time: %.3lfs (total time %.3lfs)\n",
            (double)(clock() - tTime) / CLOCKS_PER_SEC, (double)(clock() - sTime) / CLOCKS_PER_SEC);
        fflush(stderr);
	}
	fprintf(stderr, "Finished with all testcases!\n");
	fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);	
	return 0;
}

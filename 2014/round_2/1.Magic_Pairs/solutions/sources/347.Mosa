#include <bits/stdc++.h>

using namespace std;

int n, m;
int board1[1000000];
int board2[1000000];
set<int> have1, need1;
set<int> have2, need2;

void insert(int val, set<int> &have1, set<int> &need1, set<int> &have2, set<int> &need2) {
	if(need1.count(val)) need1.erase(val);
	have1.insert(val);
	if(!have2.count(val)) need2.insert(val);
}

int main() {
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	int t;
	long long x1, a1, b1, c1, r1;
	long long x2, a2, b2, c2, r2;
	cin >> t;
	for(int tst = 1; tst <= t; ++tst) {
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		board1[0] = x1;
		board2[0] = x2;
		for(int i = 1; i < n || i < m; ++i) {
			board1[i] = (a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
			board2[i] = (a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;
		}
		have1.clear(); need1.clear();
		have2.clear(); need2.clear();
		have1.insert(board1[0]);
		have2.insert(board2[0]);
		if(board1[0] != board2[0]) {
			need1.insert(board2[0]);
			need2.insert(board1[0]);
		}
		long long ans = 0;
		int i = 1, j = 1;
		while(i <= n || j <= m) {
			while((!need1.empty() && j < m) || (!need2.empty() && i < n)) {
				if(need1.empty() || need1.size() < need2.size()) {
					insert(board2[j], have2, need2, have1, need1);
					++j;
				}else {
					insert(board1[i], have1, need1, have2, need2);
					++i;
				}
			}
			if(need1.empty() && need2.empty()) {
				int cnt1 = 0, cnt2 = 0;
				while(i < n) {
					if(have1.insert(board1[i]).second) {
						have1.erase(board1[i]); break;
					}
					++cnt1; ++i;
				}
				while(j < m) {
					if(have2.insert(board2[j]).second) {
						have2.erase(board2[j]); break;
					}
					++cnt2; ++j;
				}
				ans += (cnt1 + 1LL) * (cnt2 + 1LL);
			}
			if(i < n) insert(board1[i], have1, need1, have2, need2), ++i;
			else if(j < m) insert(board2[j], have2, need2, have1, need1), ++j;
			else break;
		}
		cout << "Case #" << tst << ": " << ans << endl;
	}
	return 0;
}

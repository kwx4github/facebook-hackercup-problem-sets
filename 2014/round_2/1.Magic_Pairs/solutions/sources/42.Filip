/* Written by Filip Hlasek 2013 */
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstring>

#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define REP(i,b) for(int i=0;i<(b);i++)

using namespace std;

#define MAXN 1111111
int n[MAXN], m[MAXN];

set<int> sn, sm, extran, extram;

void addn(int x) {
  sn.insert(x);
  if (!sm.count(x)) extran.insert(x);
  if (extram.count(x)) extram.erase(extram.find(x));
}

void addm(int x) {
  sm.insert(x);
  if (!sn.count(x)) extram.insert(x);
  if (extran.count(x)) extran.erase(extran.find(x));
}

int main(int argc, char *argv[]) {
  int T;
  scanf("%d", &T);
  REP(t, T) {
    int N, M;
    int x1, a1, b1, c1, r1;
    int x2, a2, b2, c2, r2;
    scanf("%d%d", &N, &M);
    scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
    scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);

    n[0] = x1;
    m[0] = x2;
    REP(i, max(N, M)) {
      n[i + 1] = ((long long)a1 * n[i % N] + (long long)b1 * m[i % M] + c1) % r1;
      m[i + 1] = ((long long)a2 * n[i % N] + (long long)b2 * m[i % M] + c2) % r2;
    }

    // REP(i, N) printf(" %d", n[i]); printf("\n");
    // REP(i, M) printf(" %d", m[i]); printf("\n");

    int x = 0, y = 0;
    long long ans = 0;

    sn.clear(); sm.clear(); extran.clear(); extram.clear();
    addn(n[x++]);

    while(x < N || y < M) {
      while (y < M && extran.size()) addm(m[y++]);
      while (x < N && extram.size()) addn(n[x++]);

      if (!extran.size() && !extram.size()) {
        int start_x = x, start_y = y;
        while (x < N && sn.count(n[x])) addn(n[x++]);
        while (y < M && sm.count(m[y])) addm(m[y++]);
        ans += (long long)(x - start_x + 1) * (y - start_y + 1);
        if (x < N) addn(n[x++]);
        else break;
      }
    }

    printf("Case #%d: %lld\n", t + 1, ans);
  }
  return 0;
}

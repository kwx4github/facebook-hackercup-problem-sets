#include <iostream>
#include <utility>
#include <set>
#include <map>
#include <vector>

using namespace std;

int main(){
    int T;
    cin>>T;
    for(int iCases=1; iCases<=T; ++iCases){
        int N,M;
        int x1, a1, b1, c1, r1;
        int x2, a2, b2, c2, r2;
        cin>>N>>M;
        cin>>x1>>a1>>b1>>c1>>r1;
        cin>>x2>>a2>>b2>>c2>>r2;
        vector<int> board1(N), board2(M);
        board1[0]=x1;
        board2[0]=x2;
        // Llena arreglos
        if(N>M){
            for(int i=1; i<M; ++i){
                board1[i]=(a1*board1[(i-1)%N]+b1*board2[(i-1)%M]+c1)%r1;
                board2[i]=(a2*board1[(i-1)%N]+b2*board2[(i-1)%M]+c2)%r2;
            }
            for(int i=M; i<N; ++i)
                board1[i]=(a1*board1[(i-1)%N]+b1*board2[(i-1)%M]+c1)%r1;
        }
        else{
            for(int i=1; i<N; ++i){
                board1[i]=(a1*board1[(i-1)%N]+b1*board2[(i-1)%M]+c1)%r1;
                board2[i]=(a2*board1[(i-1)%N]+b2*board2[(i-1)%M]+c2)%r2;
            }
            for(int i=N; i<M; ++i)
                board2[i]=(a2*board1[(i-1)%N]+b2*board2[(i-1)%M]+c2)%r2;
        }
        // Meter en map
        map<int, int> sb1, sb2;
        vector<int> vec1, vec2, pos1, pos2;
        pair<map<int,int>::iterator,bool> ret;
        int count1=0;
        for(int i=0; i<N; ++i){
            ret=sb1.insert(pair<int,int>(board1[i],count1));
            if(ret.second){
                count1++;
                vec1.push_back(board1[i]);
                pos1.push_back(i);
                }
        }
        int count2=0;
        for(int i=0; i<M; ++i){
            ret=sb2.insert(pair<int,int>(board2[i],count2));
            if(ret.second){
                count2++;
                vec2.push_back(board2[i]);
                pos2.push_back(i);
                }
        }
        // Build answer
        vector<bool> flag(count2, false);
        int res=0;
        int curr=0, end=-1, idx;
        for(int i=0; i<count1; i++){
            map<int,int>::iterator it;
            it=sb2.find(vec1[i]);
            if(it!=sb2.end()){
                idx=it->second;
                flag[idx]=true;
                //cout<<"idx="<<idx<<endl;
                if(idx>end)
                    end=idx;
                while(curr<end && flag[curr]==true)
                    curr++;
                //cout<<curr<<" "<<end<<endl;
                if(curr==end){
                    //cout<<"cumple"<<i<<" "<<end<<endl;
                    int mul1, mul2;
                    if(i<count1-1)
                        mul1=pos1[i+1]-pos1[i];
                    else
                        mul1=N-pos1[i];
                    //cout<<"mul1 "<<mul1<<endl;
                    if(end<count2-1)
                        mul2=pos2[end+1]-pos2[end];
                    else
                        mul2=M-pos2[end];
                    //cout<<"mul2 "<<mul2<<endl;
                    res+=mul1*mul2;
                    end=-1;
                }
            }
        }
        
        // Print result
        cout<<"Case #"<<iCases<<": "<<res;
        if(iCases<T)
            cout<<endl;
    }
    return 0;
}

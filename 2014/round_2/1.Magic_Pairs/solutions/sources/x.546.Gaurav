#include<stdio.h>
#include<iostream>
#include<list>
using namespace std;

int tag=0;
bool isSubset(long long int arr1[],long long int arr2[],long int m, long long int n)
{
    int i = 0;
    int j = 0;
    for (i=0; i<n; i++)
    {
        for (j = 0; j<m; j++)
        {
           if(arr2[i] == arr1[j])
             {
                tag++;
                break;
                }
        }

        /* If the above inner loop was not broken at all then
           arr2[i] is not present in arr1[] */
        if (j == m)
           return 0;
    }

    /* If we reach here then all elements of arr2[]
      are present in arr1[] */
    return 1;
}
int main()
{
 //freopen("input.in","r",stdin);
 //freopen("output.out","w",stdout);
    long long int t,n,m,x1,x2,a1,a2,b1,b2,c1,c2,r1,r2,max,count,min;
    cin>>t;
    for(long long int i=0;i<t;i++)
    {
        count=0;
        cin>>n>>m;
        long long int brd1[n],brd2[m];
        brd1[0]=0,brd2[0]=0;
        cin>>x1>>a1>>b1>>c1>>r1;
        cin>>x2>>a2>>b2>>c2>>r2;
        brd1[0]=x1;
        brd2[0]=x2;
        max=n>m?n:m;
        min=n>m?m:n;
        for(long long int j=1;j<max;j++)
        {

            if(n>j)
            {
            brd1[j]=0;
            brd1[j]= (((a1 * brd1[(j-1)%n])) + ((b1 * brd2[(j-1)%m])) + c1)%r1;

            }
            if(m>j)
            {
             brd2[j]=0;
             brd2[j]= (((a2 * brd1[(j-1)%n])) + ((b2*brd2[(j-1)%m])) + c2)%r2;

            }

        }

        if(brd1[0]==brd2[0])
            count++;
        for(long long int k=1;k<m;k++)
        {
            for(long long int l=1;l<n;l++)
            {
                        tag=0;
                        std::list<long long int> l1(brd1, brd1+l);
                        std::list<long long int> l2(brd2, brd2+k);
                        int siz=l1.size();
                        l1.sort();
                        l2.sort();
                        l1.unique();
                        l2.unique();
                        if((l1.size()==l2.size())&&l!=k&& (isSubset(brd2,brd1,l,k)==1))
                        {

                            count++;
                        }
                       else if((l1.size()==l2.size())&&l==k && (l+1)==tag &&(isSubset(brd2,brd1,l,k)==1))
                           {

                            count++;
                            }
                    }
            }


        cout<<"Case #"<<i+1<<": "<<count<<"\n";
        count=0;
    }
return 0;
}
/*5
1
8 6
0 0 1 3 5
0 1 0 4 5
5 5
2 5 2 5 7
2 9 3 2 7
12 11
2 5 2 5 7
2 9 3 2 7
10 10
0 1 0 1 11
0 0 1 1 11
10 10
0 1 0 1 11
0 0 1 10 11*/

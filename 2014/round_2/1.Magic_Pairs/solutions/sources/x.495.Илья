#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>

using namespace std;

unordered_map<long long, long long> f, s;
vector <pair <long long, long long> > a, b;

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int tc;
    cin >> tc;
    for (int t = 0; t < tc; t++) 
    {
        int n, m;
        cin >> n >> m;
        long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        long long now_f = x1, now_s = x2;
        f.clear();
        s.clear();
        a.clear();
        b.clear();
        f[now_f] = 0;
        s[now_s] = 0;
        a.push_back(make_pair(now_f, 0));
        b.push_back(make_pair(now_s, 0));
        for (int i = 0; i < max(n, m); i++)
        {
            long long now_f_old = now_f;
            now_f = (a1 * now_f + b1 * now_s + c1) % r1;
            now_s = (a2 * now_f_old + b2 * now_s + c2) % r2;
            if (i < n && !f.count(now_f))
            {
                f[now_f] = i;
                a.push_back(make_pair(now_f, i + 1));
            }
            if (i < m && !s.count(now_s))
            {
                s[now_s] = i;
                b.push_back(make_pair(now_s, i + 1));
            }
        }

        a.push_back(make_pair(2e9, n));
        a.push_back(make_pair(2e9 + 10, n));
        b.push_back(make_pair(2e9 + 1, m));
        b.push_back(make_pair(2e9 + 11, m));
        long long ans = 0;
        int l = 0, r = 0;
        n = a.size() - 1;
        m = b.size() - 1;
        while (l < n && r < m)
        {
            ans += (a[l + 1].second - a[l].second) * (b[r + 1].second - b[r].second);
            unordered_set<long long> p, q;
            p.insert(a[++l].first);
            while (l < n && r < m && (!p.empty() || !q.empty()))
            {
                while (r < m && !p.empty())
                {
                    long long now = b[++r].first;
                    if (p.count(now))
                        p.erase(now);
                    else
                        q.insert(now);
                }

                while (l < n && !q.empty())
                {
                    long long now = a[++l].first;
                    if (q.count(now))
                        q.erase(now);
                    else
                        p.insert(now);
                }
            }
        }

        printf("Case #%d: ", t + 1);
        cout << ans << endl;
    }
}
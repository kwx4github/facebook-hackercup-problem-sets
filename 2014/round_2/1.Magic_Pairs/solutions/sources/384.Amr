#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <set>
#include <unordered_set>
#include <cstdlib>
using namespace std;
typedef long long ll;

int n[2], ind[2];
ll brd[2][1000010], x[2], a[2], b[2], c[2], r[2];
unordered_set<int> s[2];
unordered_set<int> both;

void add(int i1, int i2, int cur) {
	if (both.count(cur) > 0 || s[i1].count(cur) > 0) {
		return;
	} else if (s[i2].count(cur) > 0) {
		s[i2].erase(cur);
		both.insert(cur);
	} else {
		s[i1].insert(cur);
	}
}

bool lookup(int i1, int i2, int req) {
	while (++ind[i1] < n[i1]) {
		int cur = brd[i1][ind[i1]];
		if (cur == req) {
			s[i2].erase(cur);
			both.insert(cur);
			return true;
		} else {
			add(i1, i2, cur);
		}
	}
	return false;
}

ll same(int i1, int i2) {
	ll res = 1;
	while (++ind[i1] < n[i1]) {
		int cur = brd[i1][ind[i1]];
		if (both.count(cur) == 0) {
			add(i1, i2, cur);
			return res;
		}
		res++;
	}
	return res;
}

int main() {
	freopen("_magic_pairs.txt", "rt", stdin);
	freopen("_magic_pairs2.out", "wt", stdout);
	int tt;
	cin >> tt;
	for (int ii = 0; ii < tt; ++ii) {
		printf("Case #%d: ", ii + 1);
		cin >> n[0] >> n[1];
		for (int i = 0; i < 2; ++i) {
			cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
		}
		brd[0][0] = x[0];
		brd[1][0] = x[1];
		for (int i = 1; i < max(n[0], n[1]); ++i) {
			if (i < n[0])
				brd[0][i] = (((a[0] * brd[0][(i - 1) % n[0]]) % r[0])
						+ ((b[0] * brd[1][(i - 1) % n[1]]) % r[0]) + c[0])
						% r[0];
			if (i < n[1])
				brd[1][i] = (((a[1] * brd[0][(i - 1) % n[0]]) % r[1])
						+ ((b[1] * brd[1][(i - 1) % n[1]]) % r[1]) + c[1])
						% r[1];
		}
		s[0].clear();
		s[1].clear();
		both.clear();
		ind[0] = ind[1] = 0;
		ll res = 0;
		add(0,1,brd[0][ind[0]]);
		add(1,0,brd[1][ind[1]]);
		while (ind[0] < n[0] && ind[1] < n[1]) {
			while (s[0].size() > 0 || s[1].size() > 0) {
				while (s[0].size() > 0) {
					if (!lookup(1, 0, *s[0].begin()))
						goto final;
				}
				while (s[1].size() > 0) {
					if (!lookup(0, 1, *s[1].begin()))
						goto final;
				}
			}
//			cout << "s[0]: ";
//			for (int i : s[0])
//				cout << i << " ";
//			cout << endl;
//			cout << "s[1]: ";
//			for (int i : s[1])
//				cout << i << " ";
//			cout << endl;
//
//			cout << "both: ";
//			for (int i : both)
//				cout << i << " ";
//			cout << endl;
//
//			cout << ind[0] << " " << ind[1] << endl;
			final:
			if(s[0].size() == 0 && s[1].size() == 0)
				res += (same(0, 1)) * (same(1, 0));
		}
		 printf("%lld\n", res);
	}
	return 0;
}

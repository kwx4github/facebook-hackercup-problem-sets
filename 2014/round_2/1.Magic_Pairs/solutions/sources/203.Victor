import java.io.*;
import java.util.*;

public class Main {
	public static void main(String[] args) throws IOException {
		InputStream in = System.in;
		PrintStream out = System.out;
		in = new FileInputStream("_magic_pairs.txt");
		out = new PrintStream(new File("_magic_pairs.out"));
		bufReader = new BufferedReader(new InputStreamReader(in));
		
		int T = nextInt();
		for (int cas = 1; cas <= T; ++cas) {
			System.err.printf("Case #%d:...\n", cas);
			int N = nextInt();
			int M = nextInt();
			long x1 = nextInt();
			long a1 = nextInt();
			long b1 = nextInt();
			long c1 = nextInt();
			long r1 = nextInt();
			long x2 = nextInt();
			long a2 = nextInt();
			long b2 = nextInt();
			long c2 = nextInt();
			long r2 = nextInt();
			int []a = new int[N];
			int []b = new int[M];
			a[0] = (int)x1;
			b[0] = (int)x2;
			for (int i = 1; i < N || i < M; ++i) {
				if (i < N) {
					a[i] = (int)((a1 * a[(i - 1) % N] + b1 * b[(i - 1) % M] + c1) % r1);
				}
				if (i < M) {
					b[i] = (int)((a2 * a[(i - 1) % N] + b2 * b[(i - 1) % M] + c2) % r2);
				}
			}
			int []anext = next(a);
			int []bnext = next(b);
			int i = -1;
			int j = -1;
			long res = 0;
			HashMap<Integer, Integer> cnt = new HashMap<Integer, Integer>();
			int sum = 0;
			while (true) {
				if (sum <= 0) {
					i = i == -1 ? 0 : anext[i];
					if (i == N) {
						break;
					}
					int val = cnt.containsKey(a[i]) ? cnt.get(a[i]) : 0;
					cnt.put(a[i], val + 1);
					++sum;
					if (cnt.get(a[i]) == 0) {
						cnt.remove(a[i]);
					}
					if (cnt.size() == 0) {
						res += (long)(anext[i] - i) * (bnext[j] - j);
					}
				} else {
					j = j == -1 ? 0 : bnext[j];
					if (j == M) {
						break;
					}
					int val = cnt.containsKey(b[j]) ? cnt.get(b[j]) : 0;
					cnt.put(b[j], val - 1);
					--sum;
					if (cnt.get(b[j]) == 0) {
						cnt.remove(b[j]);
					}
					if (cnt.size() == 0) {
						res += (long)(anext[i] - i) * (bnext[j] - j);
					}
				}
			}
			out.printf("Case #%d: %d\n", cas, res);
		}
		
		out.close();
	}
	

	private static int[] next(int[] a) {
		int []next = new int[a.length];
		HashSet<Integer> set = new HashSet<Integer>();
		int prev = -1;
		for (int i = 0; i < a.length; ++i) {
			if (!set.contains(a[i])) {
				if (prev != -1) {
					next[prev] = i;
				}
				prev = i;
				set.add(a[i]);
			}
		}
		next[prev] = a.length;
		return next;
	}


	static BufferedReader bufReader;
	static StringTokenizer stringTokenizer;

	static String nextString() throws IOException {
		while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
			String line = bufReader.readLine();
			if (line == null) {
				return null;
			}
		stringTokenizer = new StringTokenizer(line);
		}
		return stringTokenizer.nextToken();
	}

	static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	static double nextDouble() throws IOException {
		return Double.parseDouble(nextString());
	}
}
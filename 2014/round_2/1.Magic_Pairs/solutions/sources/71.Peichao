import java.util.Scanner;
import java.util.HashSet;

public class Solution
{

  int N, M;

  int[] B1, B2;

  public Solution (Scanner sc)
  {
    N = sc.nextInt();
    M = sc.nextInt();
    long x1 = sc.nextLong(), a1 = sc.nextLong(), b1 = sc.nextLong(), c1 = sc.nextLong(), r1 = sc.nextLong();
    long x2 = sc.nextLong(), a2 = sc.nextLong(), b2 = sc.nextLong(), c2 = sc.nextLong(), r2 = sc.nextLong();
    B1 = new int[N];
    B2 = new int[M];
    B1[0] = (int)x1;
    B2[0] = (int)x2;
    for (int i = 1; i < Math.max(N, M); ++i)
    {
      if (i < N)
        B1[i] = (int)((a1 * B1[(i - 1) % N] + b1 * B2[(i - 1) % M] + c1) % r1);
      if (i < M)
        B2[i] = (int)((a2 * B1[(i - 1) % N] + b2 * B2[(i - 1) % M] + c2) % r2);
    }
    // for (int i = 0; i < N; ++i)
    //   System.out.format("%d ", B1[i]);
    // System.out.println();
    // for (int i = 0; i < M; ++i)
    //   System.out.format("%d ", B2[i]);
    // System.out.println();
  }

  long solve ()
  {
    long cnt = 0;
    HashSet<Integer> s1 = new HashSet<Integer>(), s2 = new HashSet<Integer>();
    int match = 0;
    int i1 = 0, i2 = 0;
    while (i1 < N && i2 < M)
    {
      --match;
      if (s2.contains(B1[i1]))
        ++match;
      s1.add(B1[i1]);
      if (s1.contains(B2[i2]))
        ++match;
      s2.add(B2[i2]);
      int j1 = i1, j2 = i2;
      while (j1 < N && s1.contains(B1[j1]))
        ++j1;
      while (j2 < M && s2.contains(B2[j2]))
        ++j2;
      if (match == 0)
        cnt += (long)(j1 - i1) * (j2 - i2);
      i1 = j1;
      i2 = j2;
    }
    return cnt;
  }

  public static void main (String[] args)
  {
    Scanner sc = new Scanner(System.in);
    int T = sc.nextInt();
    for (int t = 1; t <= T; ++t)
    {
      Solution sol = new Solution(sc);
      System.out.format("Case #%d: %d\n", t, sol.solve());
    }
  }

}

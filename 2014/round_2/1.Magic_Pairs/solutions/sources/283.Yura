//Grodno SU: bl++
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <string.h>
#include <list>

#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define PI 3.14159265358979
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define L(s) (int)((s).size())
#define sz(s) (int)((s).size())
#define ms(x) memset(x,0,sizeof(x))
#define ms1(x) memset(x,-1,sizeof(x))
#define del(y,x) erase(y.begin()+x)

typedef long long ll;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;
const int ST = 100010;
const int ST1 = 1000010;
const ll MOD = 1000000007;

ll ABS(ll a) {
    if(a<0)
        return a*(-1);
    else
        return a;
}

vector<int> board1,board2;
ll a1,a2,b1,b2,c1,c2,n,m,r1,r2,x1,x2;

void gen(){
	board1.pb(x1);
	board2.pb(x2);
	for(int i = 1;i < n || i < m;i++){
		if(i < n)
			board1.pb((a1*board1[(i-1)%n]+b1*board2[(i-1)%m]+c1)%r1);
		if(i < m)
			board2.pb((a2*board1[(i-1)%n]+b2*board2[(i-1)%m]+c2)%r2);
	}
}
int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
	int T,test = 1;
	cin >> T;
	while(test<=T){
		board1.clear();
		board2.clear();
		ll ans = 0;
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		gen();
		set<int> ss1,ss2,se1,se2;
		ll uk1 = 1,uk2 = 0;
		ss1.insert(board1[0]);
		se2.insert(board1[0]);
		n++;m++;
		board1.pb(-5);
		board2.pb(-150);
		while(uk1 < n || uk2 < m){
			if(L(se2)==0 && L(se1)==0){
				ll p1 = uk1-1;
				ll p2 = uk2-1;
				while(uk1 < n && ss1.find(board1[uk1])!=ss1.end())
					uk1++;
				while(uk2 < m && ss2.find(board2[uk2])!=ss2.end())
					uk2++;
				ans+=((uk1-p1)*(uk2-p2));
				if(uk1 < n){
					ss1.insert(board1[uk1]);
					se2.insert(board1[uk1]);
				}
				if(uk2 < m){
					ss2.insert(board2[uk2]);
					se1.insert(board2[uk2]);
					se2.erase(board2[uk2++]);
				}
				if(uk1 < n){
					se1.erase(board1[uk1++]);
				}
			}else{
				if(L(se1) > 0 && uk1 < n){
					ss1.insert(board1[uk1]);
					if(ss2.find(board1[uk1])==ss2.end())
						se2.insert(board1[uk1]);

					se1.erase(board1[uk1]);
					uk1++;
				}else{
					if(L(se2) > 0 && uk2 < m){
						ss2.insert(board2[uk2]);
						if(ss1.find(board2[uk2])==ss1.end())
							se1.insert(board2[uk2]);

						se2.erase(board2[uk2]);
							uk2++;
					}
					else
						break;
				}

			}

		}

		printf("Case #%d: ",test++);
		cout << ans << endl;
	}

    return 0;
}
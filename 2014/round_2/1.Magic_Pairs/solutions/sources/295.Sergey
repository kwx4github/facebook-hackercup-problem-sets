#include <cstdio>
#include <vector>
#include <iostream>
#include <set>
using namespace std;

#define forn(i,n) for(int i = 0; i < (int) n; ++i)
#define maxs(x,y) x = max(x,y)
#define mins(x,y) x = min(x,y)

int main()
{
    ios_base::sync_with_stdio(false);
    freopen("A.in", "r", stdin);
    freopen("A.out", "w", stdout);
    int t = 0;
    cin >> t;
    forn(i,t){
    int n,m;
    cin >> n >> m;
    long long x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    vector<long long> arr1(n);
    vector<long long> arr2(m);
    arr1[0] = x1;
    arr2[0] = x2;
    for(int i = 1; i < max(n,m); ++i)
    {
        if (i < n)
            arr1[i] = (a1 * arr1[(i+n-1)%n] + b1 * arr2[(i+m-1)%m] + c1)%r1;
        if (i < m)
            arr2[i] = (a2 * arr1[(i+n-1)%n] + b2 * arr2[(i+m-1)%m] + c2)%r2;
    }

    set<long long> colors;
    vector<int> next(n);
    int index = 0;
    colors.insert(arr1[0]);
    for(int i = 1; i < n; ++i)
    {
        if (colors.find(arr1[i]) == colors.end())
        {
            next[index] = i;
            index = i;
            colors.insert(arr1[i]);
        }
    }
    next[index] = n;
    long long ans = 0;
    colors.clear();

//    forn(i,n)
//        cerr << arr1[i] << " \n"[i == n-1];
//
//    forn(j,m)
//        cerr << arr2[j] << " \n"[j == m-1];

    int index1 = 0;
    int index2 = 0;

    set<long long> yet;
    colors.insert(arr1[0]);

    while (true)
    {
        while (index2 < m && next[index1] < n && colors.find(arr2[index2]) == colors.end() && yet.find(arr2[index2]) == yet.end())
        {
            index1 = next[index1];
            colors.insert(arr1[index1]);
        }

        while (index2 < m && (colors.find(arr2[index2]) != colors.end() || yet.find(arr2[index2]) != yet.end()))
        {
            yet.insert(arr2[index2]);
            colors.erase(arr2[index2]);
            if (colors.empty())
                ans += next[index1] - index1;
            ++index2;
        }
        if (next[index1] == n || index2 == m)
            break;
    }
    cerr << "case " << i << endl;
    cout << "Case #" << i+1 << ": "<< ans << endl;
    }

    return 0;
}

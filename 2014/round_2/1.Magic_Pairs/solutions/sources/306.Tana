#include<cstdio>
#include<cinttypes>
#include<set>
#define MX 1000002
using namespace std;
set<int> s1, s2, e1, e2;
int Board1[MX], Board2[MX];

static inline int more(int a, int b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

int main() {
  int i, j, t, tt, n, m;
  uint64_t ans, parti, partj;
  uint64_t x1, a1, b1, c1, r1;
  uint64_t x2, a2, b2, c2, r2;
  bool foul;
  scanf("%d",&tt);
  for (t=1; t<=tt; t++) {
    scanf("%d",&n);
    scanf("%d",&m);
    scanf("%lld",&x1);
    scanf("%lld",&a1);
    scanf("%lld",&b1);
    scanf("%lld",&c1);
    scanf("%lld",&r1);
    scanf("%lld",&x2);
    scanf("%lld",&a2);
    scanf("%lld",&b2);
    scanf("%lld",&c2);
    scanf("%lld",&r2);
    ans = 0ll;
    Board1[0] = x1;
    Board2[0] = x2;
    for (i=1; i<more(n,m); i++) {
      Board1[i] = (a1 * Board1[(i-1) % n] + b1 * Board2[(i-1) % m] + c1) % r1;
      Board2[i] = (a2 * Board1[(i-1) % n] + b2 * Board2[(i-1) % m] + c2) % r2;
    }
    i = 0;
    j = 0;
    foul = false;
    s1.clear();
    s2.clear();
    e1.clear();
    e2.clear();
    while (i < n && !foul) {
      parti = 1;
      partj = 1;
      s1.insert(Board1[i]);
      e1.insert(Board1[i]);
      i++;
      while (!foul && (e1.size() > 0 || e2.size() > 0)) {
        if (e1.size() > 0) {
          if (j >= m) {
            foul = true;
            break;
          }
          bool in1 = (s1.find(Board2[j]) != s1.end());
          if (in1) {
            e1.erase(Board2[j]);
          } else {
            e2.insert(Board2[j]);
          }
          s2.insert(Board2[j]);
          j++;
        } else {
          if (i >= n) {
            foul = true;
            break;
          }
          bool in2 = (s2.find(Board1[i]) != s2.end());
          if (in2) {
            e2.erase(Board1[i]);
          } else {
            e1.insert(Board1[i]);
          }
          s1.insert(Board1[i]);
          i++;
        }
      }
      if (!foul) {
        while (i < n && s2.find(Board1[i]) != s2.end()) {
          i++;
          parti++;
        }
        while (j < m && s1.find(Board2[j]) != s1.end()) {
          j++;
          partj++;
        }
        ans += parti * partj;
      }
    }
    printf("Case #%d: %lld\n", t, ans);
  }
}

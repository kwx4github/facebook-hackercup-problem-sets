#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;
__int64 a[1000006];
__int64 b[1000006];
struct node {
	__int64 v;
	__int64 cnt;
} aa[1000006], bb[1000006];
map<__int64, int> m1, m2;
int main() {
	int t, cas = 0;
	int i, j;
	int n, m;
	__int64 a1, b1, a2, b2, r1, r2, c1, c2;
	__int64 ans;
	scanf("%d", &t);
	while (t--) {
		cas++;
		scanf("%d%d", &n, &m);
		scanf("%I64d%I64d%I64d%I64d%I64d", &a[0], &a1, &b1, &c1, &r1);
		scanf("%I64d%I64d%I64d%I64d%I64d", &b[0], &a2, &b2, &c2, &r2);
		for (i = 1; i < max(n, m); ++i) {
			a[i] = (a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1;
			b[i] = (a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2;
		}
		m1.clear();
		int nn, mm;
		aa[0].v = a[0];
		aa[0].cnt = 1;
		m1[a[0]] = 1;
		nn = 1;
		for (i = 1; i < n; ++i) {
			if (m1[a[i]] == 1)
				aa[nn - 1].cnt++;
			else {
				aa[nn].v = a[i];
				aa[nn].cnt = 1;
				m1[a[i]] = 1;
				nn++;
			}
		}
		m2.clear();
		bb[0].v = b[0];
		bb[0].cnt = 1;
		m2[b[0]] = 1;
		mm = 1;
		for (i = 1; i < m; ++i) {
			if (m2[b[i]] == 1)
				bb[mm - 1].cnt++;
			else {
				bb[mm].v = b[i];
				bb[mm].cnt = 1;
				m2[b[i]] = 1;
				mm++;
			}
		}
		i = 0;
		j = 0;
		m1.clear();
		m2.clear();
		int addi = 0;
		int addj = 0;
		ans = 0;
		while (1) {
			if (addj > 0) {
				if (i == nn)
					break;
				if (m1[aa[i].v] == 0) {
					m1[aa[i].v] = 1;
					if (m2[aa[i].v] == 0)
						addi++;
					else
						addj--;
				}
				i++;
			} else {
				if (j == mm)
					break;
				if (m2[bb[j].v] == 0) {
					m2[bb[j].v] = 1;
					if (m1[bb[j].v] == 0)
						addj++;
					else
						addi--;
				}
				j++;
			}
			if (addi == 0 && addj == 0)
				ans += aa[i - 1].cnt * bb[j - 1].cnt;
		}
		printf("Case #%d: %I64d\n", cas, ans);
	}
}

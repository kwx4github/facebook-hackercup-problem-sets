package main

import (
    "fmt"
    "bufio"
    "os"
    "strconv"
)

type rangeSet struct {
    colors map[int]bool
    start int
    stop int
}

func solve() {
    N, M := si(), si()
    x1, a1, b1, c1, r1 := si(), si(), si(), si(), si()
    x2, a2, b2, c2, r2 := si(), si(), si(), si(), si()

    board1 := []int{x1}
    board2 := []int{x2}

    for i:=1; i<maxi(N,M); i++ {
        if i < N {
            board1 = append(board1, (a1 * board1[(i-1)%N] + b1 * board2[(i-1)%M] + c1) % r1)
        }
        if i < M {
            board2 = append(board2, (a2 * board1[(i-1)%N] + b2 * board2[(i-1)%M] + c2) % r2)
        }
    }

    colors1 := make(map[int]bool)
    order := make(map[int]int)
    intervalLen := make(map[int]int)

    for i := 0; i<N; i++ {
        c := board1[i]
        if _, exists := colors1[c]; !exists {
            colors1[c] = true
            order[len(colors1)] = c
        }
        intervalLen[len(colors1)]++
    }

    colors2 := make(map[int]bool)
    unique1 := make(map[int]bool)
    unique2 := make(map[int]bool)

    intervalLen2 := make(map[int]int)
    equal := []int{}

    for i := 0; i<M; i++ {
        c := board2[i]
        if _, exists := colors2[c]; !exists {
            colors2[c] = true

            otherColor := order[len(colors2)]

            if c != otherColor {
                if _, exists := unique1[c]; exists {
                    delete(unique1, c)
                } else {
                    unique2[c] = true
                }

                if _, exists := unique2[otherColor]; exists {
                    delete(unique2, otherColor)
                } else {
                    unique1[otherColor] = true
                }
            }

            if len(unique1) == 0 && len(unique2) == 0 {
                equal = append(equal, len(colors2))
            }
        }
        intervalLen2[len(colors2)]++
    }

    sol := int64(0)

    for i:=0; i<len(equal); i++ {
        eq := equal[i]
        sol += int64(intervalLen[eq]) * int64(intervalLen2[eq])
        // fmt.Println(eq, int64(intervalLen[eq]), int64(intervalLen2[eq]))
    }

    fmt.Println(sol)
}

func main() {
    cases := si()
    for i := 1; i <= cases; i++ {
        fmt.Printf("Case #%d: ", i)
        solve()
    }
}

// Helpers
func handle(err error) {
    if err != nil {
        panic(err)
    }
}

func si() int {
    str := scan(false)
    ret, err := strconv.Atoi(str)
    handle(err)
    return ret
}

func si64() int64 {
    str := scan(false)
    ret, err := strconv.ParseInt(str, 10, 64)
    handle(err)
    return ret
}

func sd() float64 {
    str := scan(false)
    ret, err := strconv.ParseFloat(str, 64)
    handle(err)
    return ret
}

func ss() string {
    return scan(false)
}

func sl() string {
    return scan(true)
}

// Global variable, a bit ugly indeed
var scanner *bufio.Scanner
var scanLines bool

func scan(line bool) string {
    if(scanner == nil) {
        scanner = bufio.NewScanner(os.Stdin)
        scanLines = true
    }
    if line && !scanLines {
        scanner.Split(bufio.ScanLines)
        scanLines = true
    } else if !line && scanLines {
        scanner.Split(bufio.ScanWords)
        scanLines = false
    }
    scanner.Scan()
    ret := scanner.Text()
    handle(scanner.Err())
    return ret
}

func maxi(a,b int) int {
    if a > b { return a }
    return b
}

func mini(a,b int) int {
    if a > b { return b }
    return a
}

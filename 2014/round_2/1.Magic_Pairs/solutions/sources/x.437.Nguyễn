#include <iostream>
#include <map>
using namespace std;

map<int, int> MM;
int M, N;
long long A[1100000], B[1100000];

map<int,int>::iterator find_or_insert(int val) {
	map<int,int>::iterator it = MM.find(val);
	if (it == MM.end()) {
		MM[val] = 0;
		it = MM.find(val);
	}
	return it;
}

long long calc(int& i, int& j) {
	map<int,int>::iterator it;
	long long cnt1 = 1, cnt2 = 1;
	
	for(; i < N; i++, cnt1++) {
		it = find_or_insert(A[i]);
		
		if (!(it->second & 1))
			break;
	}
	
	for(; j < M; j++, cnt2++) {
		it = find_or_insert(B[j]);
		
		if (!(it->second & 2))
			break;
	}
	
	return cnt1 * cnt2;
}

int main() {
	int t, tt, u, v, i, j;
	long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
	map<int,int>::iterator it;
	cin >> tt;
	for(t = 1; t <= tt; t++) {
		MM.clear();
		
		cin >> N >> M;
		cin >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
		A[0] = x1;
		B[0] = x2;
		
		for(i = 1; i < max(N, M); i++) {
			if (i < N)
				A[i] = (a1 * A[(i-1) % N] + b1 * B[(i-1) % M] + c1) % r1;
			if (i < M)
				B[i] = (a2 * A[(i-1) % N] + b2 * B[(i-1) % M] + c2) % r2;
		}
			
		u = v = 0;
		i = j = 0;
		
		long long res = 0;
		
		while (i < N || j < M) {
			do {
				if (i >= N) break;
				it = find_or_insert(A[i]);
				
				if (!(it->second & 1)) {
					it->second |= 1;
					if (it->second & 2)
						v--;
					else
						u++;
				}
				
				i++;
			} while (v > 0);
			
			if (u == 0 && v == 0)
				res += calc(i, j);
			
			if (i >= N && j >= M) break;
			
			do {
				if (j >= M) break;
				it = find_or_insert(B[j]);
				
				if (!(it->second & 2)) {
					it->second |= 2;
					if (it->second & 1)
						u--;
					else
						v++;
				}
				
				j++;
			} while (u > 0);
			
			if (u == 0 && v == 0)
				res += calc(i, j);
		}
		
		cout << "Case #" << t << ": " << res << endl;
	}
	return 0;
}

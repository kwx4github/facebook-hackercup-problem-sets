// Alex Fetisov
// Accepted

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <iostream>
#include <sstream>
#include <deque>
#include <cstring>
#include <cstdio>
#include <complex>

using namespace std;

#define ALL(v) (v).begin(),(v).end()
#define CLR(a) memset((a), 0, sizeof(a))
#define CLR1(a) memset((a), -1, sizeof(a))
#define mp make_pair

template <typename T> inline string toString(const T& o) { ostringstream os(""); os << o; return os.str(); }
template <typename T> void unique(vector<T>& v) { sort(all(v)); v.erase(unique(all(v)) - v.begin()); }
template <typename T> void append(vector<T>& v, const vector<T>& u) { v.insert(v.end(), ALL(u)); }

typedef long long int64;

const int64 MODS[] = { 120428441770207LL, 129800892178099LL, 1000000007LL, 182777338478197LL, 1000000009LL,
	217763942410933LL, 9949370777987917LL, 3931520917431241LL, 2468642135797531LL, 785703772397443LL };
const int NUM_MODS = 2;

const int64 P[] = { 3137LL, 3731LL, 2999L, 37LL, 31LL };
const int NUM_P = 2;

int64 MyPow(int64 p, int po, int64 mod) {
	int64 r = 1;
	for (; po; po >>= 1) {
		if (po & 1) {
			r = (r * p) % mod;
		}
		p = (p * p) % mod;
	}
	return r;
}

struct Hash {
	vector<int64> hash;
	
	Hash() {
		hash.resize(NUM_P * NUM_MODS);
		for (int i = 0; i < hash.size(); ++i) {
			hash[i] = 0;
		}
	}
	
	bool operator < (const Hash& h) const {
		return hash < h.hash;
	}
	
	bool operator == (const Hash& h) const {
		return equal(ALL(hash), h.hash.begin());
	}
	
	void AddNumber(int x) {
		int cnt = 0;
		for (int i = 0; i < NUM_P; ++i) {
			for (int j = 0; j < NUM_MODS; ++j) {
				hash[cnt++] += MyPow(P[i], x, MODS[j]);
			}
		}
	}
	
};

const int MAXN = 2000000;

int a[MAXN], b[MAXN];
int n, m;

set<int> has;
map<Hash, int> hashs;

int64 stupid() {
	int64 ret = 0;
	set<int> has1;
	for (int i = 0; i < n; ++i) {
		has1.insert(a[i]);
		set<int> has2;
		for (int j = 0; j < m; ++j) {
			has2.insert(b[j]);
			if (has1 == has2) {
				++ret;
				//cout << "(" << i << ", " << j << ") ";
			}
		}
	}
	//cout << endl;
	return ret;
}

int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;

int64 solve() {
	has.clear();
	hashs.clear();
	scanf("%d%d", &n, &m);
	int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
	scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
	scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
	a[0] = x1;
	b[0] = x2;
	for (int i = 1; i < max(n, m); ++i) {
		if (i < n) {
			a[i] = (a1 * 1ll * a[(i-1+n)%n] + b1 * 1ll * b[(i-1+m)%m] + c1) % r1;
		}
		if (i < m) {
			b[i] = (a2 * 1ll * a[(i-1+n) % n] + b2 * 1ll * b[(i-1+m) % m] + c2) % r2;
		}
	}
	/*cout << "Boards:\n";
	for (int i = 0; i < n; ++i) {
		cout << a[i] << ' ';
	}
	cout << endl;
	for (int i = 0; i < m; ++i) {
		cout << b[i] << ' ' ;
	}
	cout << endl;*/
	has.clear();
	Hash cur;
	for (int i = 0; i < m; ++i) {
		if (!has.count(b[i])) {
			has.insert(b[i]);
			cur.AddNumber(b[i]);
		}
		hashs[cur]++;
	}
	Hash next;
	has.clear();
	int64 ret = 0;
	for (int i = 0; i < n; ++i) {
		if (!has.count(a[i])) {
			has.insert(a[i]);
			next.AddNumber(a[i]);
		}
//		int cur = hashs.count(next);
		ret += hashs[next];
//		cout << "(" << i << ", " << cur << ") ";
	}
	//cout << endl;
	return ret;
}

void auto_moch() {
	
//	scanf("%d%d", &n, &m);
	while (1) {
//	int st = clock();
	srand(351);
	n = rand() % 500 + 2;
	m = rand() % 500 + 2;
	x1 = rand() % 1000000000;
	x2 = rand() % 1000000000;
	a1 = rand() % 1000000000;
	a2 = rand() % 1000000000;
	b1 = rand() % 1000000000;
	b2 = rand() % 1000000000;
	c1 = rand() % 1000000000;
	c2 = rand() % 1000000000;
	r1 = rand() % 1000000000;
	r2 = rand() % 1000000000;

		int64 ret = solve();
//		int64 ret2 = 0;
		int64 ret2 = stupid();
		if (ret != ret2) {
			cout << "!";
		} else {
			cout << ".";
		}
		cout.flush();
	}
	//cout << clock() - st << endl;
	//scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
	//scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
}

int main() {
	freopen("/Users/alexf/in.txt", "r", stdin);
	freopen("/Users/alexf/out.txt", "w", stdout);
	//auto_moch();
	int test;
	scanf("%d", &test);
	for (int t = 1; t <= test; ++t) {
		printf("Case #%d: ", t);
		int64 ret = solve();
		cout << ret << endl;
		/*int64 ret2 = stupid();
		cout << ret2 << endl;*/
	}
	return 0;
}
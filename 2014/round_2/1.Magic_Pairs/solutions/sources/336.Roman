#include <iostream>
#include <cstdio>
#include <algorithm>
#include <set>

using namespace std;

typedef long long ll;

const int MAXN = int(1e6) + 50;

ll board[2][MAXN];
ll a[2];
ll b[2];
ll c[2];
ll r[2];

void solve() {
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < 2; i++) {
		cin >> board[i][0] >> a[i] >> b[i] >> c[i] >> r[i];
	}
	for (int i = 1; i < max(n, m); i++) {
		for (int j = 0; j < 2; j++) {
			board[j][i] = (a[j] * board[0][(i - 1) % n] + b[j] * board[1][(i - 1) % m] + c[j]) % r[j];
		}
	}
	int i = 0;
	int j = 0;
	set<int> b1;
	set<int> b2;
	ll ans = 0;
	while (i < n && j < m) {
		b1.insert(board[0][i]);
		b2.insert(board[1][j]);
		while (i < n && j < m && (b2.count(board[0][i]) == 0 || b1.size() < b2.size())) {
			if (b2.count(board[0][i]) == 0) {
				while (j < m && board[1][j] != board[0][i]) {
					j++;
					b2.insert(board[1][j]);
				}
			} else {
				i++;
				b1.insert(board[0][i]);
			}
		}
		ll oldI = i;
		ll oldJ = j;
		while (i < n && b1.count(board[0][i]) > 0) {
			i++;
		}
		while (j < m && b2.count(board[1][j]) > 0) {
			j++;
		}
		ans += (i - oldI) * (j - oldJ);
	}
	cout << ans << endl;
}

int main() {
	freopen("magic_pairs.txt", "r", stdin);
	freopen("magic_pairs_output.txt", "w", stdout);
	int t;
	cin >> t;
	for (int i = 1; i <= t; i++) {
		cout << "Case #" << i << ": ";
		solve();
	}
	fclose(stdout);
	return 0;
}
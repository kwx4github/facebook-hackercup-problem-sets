#include <iostream>
#include <string>
#include <set>
#include <map>
#include <cstdio>
#include <bitset>
#include <vector>
#include <cmath>
#include <queue>
#include <algorithm>
#include <ctime>
#include <cstring>
#pragma comment(linker, "/STACK:256000000")

using namespace std;

const int maxN = 1100000;

long long n, m;

long long board1[maxN], board2[maxN];

const long long mod1 = 1000000007LL;
const long long mod2 = 1000000009LL;
const long long mod3 = 1000000021LL;
const long long pm1 = 33;
const long long pm2 = 37;
const long long pm3 = 255;

long long pr1[2 * maxN], pr2[2 * maxN], pr3[2 * maxN];

void solve(int tcase) {
  printf("Case #%d: ", tcase);
  long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;

  cin >> n >> m;
  cin >> x1 >> a1 >> b1 >> c1 >> r1;
  cin >> x2 >> a2 >> b2 >> c2 >> r2;

  board1[0] = x1;
  board2[0] = x2;
  for (int i = 1; i < max(n, m); ++i) {
    board1[i] = (a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
    board2[i] = (a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;
  }

  vector <long long> all;
  for (int i = 0; i < n; ++i) {
    all.push_back(board1[i]);
  }
  for (int i = 0; i < m; ++i) {
    all.push_back(board2[i]);
  }

  sort(all.begin(), all.end());
  all.resize(unique(all.begin(), all.end()) - all.begin());

  map<long long, long long> nindex;
  for (int i = 0; i < all.size(); ++i) {
    nindex[all[i]] = i;
  }


  map<pair<long long, pair<long long, long long> >, long long> cnt1;

  {
    set<long long> cur1;
    long long v1 = 0, v2 = 0, v3 = 0;
    for (int i = 0; i < n; ++i) {
      long long val = board1[i];
      if (cur1.count(val)) {
        ++cnt1[make_pair(v1, make_pair(v2, v3))];
      } else {
        cur1.insert(val);
        v1 = (v1 + pr1[nindex[val]]) % mod1;
        v2 = (v2 + pr2[nindex[val]]) % mod2;
        v3 = (v3 + pr3[nindex[val]]) % mod3;
        ++cnt1[make_pair(v1, make_pair(v2, v3))];
      }
    }
  }

  map<pair<long long, pair<long long, long long> >, long long> cnt2;

  {
    set<long long> cur1;
    long long v1 = 0, v2 = 0, v3 = 0;
    for (int i = 0; i < m; ++i) {
      long long val = board2[i];
      if (cur1.count(val)) {
        ++cnt2[make_pair(v1, make_pair(v2, v3))];
      } else {
        cur1.insert(val);
        v1 = (v1 + pr1[nindex[val]]) % mod1;
        v2 = (v2 + pr2[nindex[val]]) % mod2;
        v3 = (v3 + pr3[nindex[val]]) % mod3;
        ++cnt2[make_pair(v1, make_pair(v2, v3))];
      }
    }
  }

  long long res = 0;
  for (map<pair<long long, pair<long long, long long> >, long long>::iterator it = cnt1.begin(); it != cnt1.end(); ++it) {
    long long buf1 = it->second;
    res += buf1 * cnt2[it->first];
  }
  cout << res << endl;
}

int main() {
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);

  pr1[0] = pr2[0] = pr3[0] = 1;
  for (int i = 1; i < 2 * maxN; ++i) {
    pr1[i] = (pr1[i - 1] * pm1) % mod1;
    pr2[i] = (pr2[i - 1] * pm2) % mod2;
    pr3[i] = (pr3[i - 1] * pm3) % mod3;
  }

  int t;
  scanf("%d", &t);

  for (int i = 0; i < t; ++i) {
    cerr << i << endl;
    solve(i + 1);
  }

  return 0;
}

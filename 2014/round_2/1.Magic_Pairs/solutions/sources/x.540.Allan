#include <iostream>
#include <algorithm>
#include <vector>
#include <utility>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <set>
#include <bitset>
using namespace std;
#define REP0(i,n) for(int i = 0;i < (int)n;i++)
#define REP1(i,n) for(int i = 1;i <= (int)n;i++)
#define pb push_back
#define fill(d,v) memset(d,v,sizeof(d))

typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vii;

#define MAX_C 1000000010
#define MAX_N 1000100
bitset<MAX_C> vis[2];
set<int> miss[2];
ll vec[2][MAX_N];
int size[2];
int main()
{
  int T;
  cin >> T;
  REP1(t,T)
    {
      ll x[2],a[2],b[2],c[2],r[2];
      vis[0].reset();
      vis[1].reset();
      miss[0].clear();
      miss[1].clear();
      ll ans = 0;
      cin >> size[0] >> size[1];
      REP0(k,2)
	cin >> x[k] >> a[k] >> b[k] >> c[k] >> r[k];

      int p[2];
      
      
      REP0(k,2)
	vec[k][0] = x[k];
      for(int i = 1; i < max(size[0],size[1]);i++)
	{
	  REP0(k,2)
	    {
	      if(i < size[k])
		//vec[k][i] = (a[k]*vec[0][(i-1)%size[0]]+b[k]*vec[1][(i-1)%size[1]]+c[k])%r[k];
		vec[k][i] = ((((a[k])%r[k])*(vec[0][(i-1)%size[0]])%r[k])%r[k]+
		  (((b[k])%r[k])*(vec[1][(i-1)%size[1]])%r[k])%r[k]+
			     c[k]%r[k])%r[k];
	    }
	}
      int cur = 0;
      p[0]=p[1] = 0;
      while(p[0] < size[0] || p[1] < size[1])
	{
	  int elem = vec[cur][p[cur]];
	  if(!vis[cur][elem])
	    {
	      if(vis[1-cur][elem])
		miss[cur].erase(elem);
	      else
		miss[1-cur].insert(elem);
	      vis[cur][elem] = true;
	    }
	  p[cur]++;
	  if(miss[cur].size() == 0 && p[1-cur] < size[1-cur])
	    cur = 1-cur;
	  else if(miss[cur].size() > 0 && p[cur] >= size[cur])
	    break;
	  if(miss[0].size() == 0 && miss[1].size() == 0)
	    ans++;
	}
      
      cout << "Case #" << t << ": " << ans;
      cout << endl;
    }
  return 0;
}

#include <stdio.h>
#include <algorithm>
#include <map>

using namespace std;

long long v[2][1000005];
long long d[2][1000005];

long long get(map<long long, int>& vv, long long val, int mx)
{
    if (vv.count(val)) return vv[val];
    return mx;
}

int main()
{
    int tt; scanf("%d", &tt);
    for (int t = 1; t <= tt; ++ t)
    {
        fprintf(stderr, "%d\n", t);
        int n, m;
        scanf("%d %d", &n, &m);

        long long x[2], a[2], b[2], c[2], r[2];
        for (int j = 0; j < 2; ++ j)
        {
            scanf("%lld %lld %lld %lld %lld", &x[j], &a[j], &b[j], &c[j], &r[j]);
        }

        v[0][0] = x[0];
        v[1][0] = x[1];

        map<long long, int> vv[2];

        vv[0][v[0][0]] = 0;
        vv[1][v[1][0]] = 0;

        for (int i = 1; i < max(n, m); ++ i)
        {
            if (i < n) {
                v[0][i] = (a[0] * v[0][(i - 1) % n] + b[0] * v[1][(i - 1) % m] + c[0]) % r[0];
                if (vv[0].count(v[0][i]) == 0)
                {
                    vv[0][v[0][i]] = i;
                }

            }
            if (i < m) {
                v[1][i] = (a[1] * v[0][(i - 1) % n] + b[1] * v[1][(i - 1) % m] + c[1]) % r[1];
                if (vv[1].count(v[1][i]) == 0)
                {
                    vv[1][v[1][i]] = i;
                }
            }
        }

        for (int i = 0; i < n; ++ i)
        {
            d[0][i] = get(vv[1], v[0][i], m);
            if (i && d[0][i] < d[0][i - 1]) d[0][i] = d[0][i - 1];
        }

        for (int i = 0; i < m; ++ i)
        {
            d[1][i] = get(vv[0], v[1][i], n);
            if (i && d[1][i] < d[1][i - 1]) d[1][i] = d[1][i - 1];
        }

        long long ans = 0;
        for (int i = 0; i < n; ++ i)
        {
            int l = d[0][i] - 1, r = m;
            while (r - l > 1)
            {
                int e = (l + r) / 2;
                if (d[1][e] > i) r = e;
                else l = e;
            }

            ans += (long long)l - d[0][i] + 1;
        }
        printf("Case #%d: %lld\n", t, ans);

/*        for (int i = 0; i < n; ++ i)
        {
            printf("%lld ", d[0][i]);
        }
        printf("\n");

        for (int i = 0; i < m; ++ i)
        {
            printf("%lld ", d[1][i]);
        }
        printf("\n");*/
    }

    return 0;
}


#include <iostream>
#include <map>
#include <vector>
#include <set>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cstring>
#include <string>
#include <cmath>
#include <cassert>

#define forn(i, n) for (int i = 0; i < (int)(n); ++i)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAXN = 1000500;
int board1[MAXN];
int board2[MAXN];
map<int, int> diff;

void solve() {
	int n, m;
	scanf("%d %d", &n, &m);
	int x1, a1, b1, c1, r1;
	int x2, a2, b2, c2, r2;
	scanf("%d %d %d %d %d", &x1, &a1, &b1, &c1, &r1);
	scanf("%d %d %d %d %d", &x2, &a2, &b2, &c2, &r2);
	board1[0] = x1;
	board2[0] = x2;
	for (int i = 1; i < max(m, n); ++i) {
		if (i < n) {
			board1[i] = (a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1;
		}
		if (i < m) {
			board2[i] = (a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2;
		}
	}
//	forn(i, n) {
//		cout << board1[i] << ' ';
//	}
//	cout << endl;
//	forn(i, m) {
//			cout << board2[i] << ' ';
//		}
//		cout << endl;

	ll ans = 0;

	set<int> set1;
	set<int> set2;
	int ptr = 0;
	int cur = 0;

	int diff_positions = 0;

	diff.clear();

	for (int i = 0; i < m; ++i) {
		if (set2.count(board2[i])) {
			ans += cur;
		} else {
			set2.insert(board2[i]);
			if (diff[board2[i]] == 0) {
				++diff_positions;
			}
			++diff[board2[i]];
			if (diff[board2[i]] == 0) {
				--diff_positions;
			}
			while (ptr < n && set1.size() < set2.size()) {
				if (!set1.count(board1[ptr])) {
					set1.insert(board1[ptr]);
					if (diff[board1[ptr]] == 0) {
						++diff_positions;
					}
					--diff[board1[ptr]];
					if (diff[board1[ptr]] == 0) {
						--diff_positions;
					}
				}
				if (set1.size() == set2.size()) {
					break;
				}
				++ptr;
			}
//			cout << "SIZE = " << ptr << ' ' << diff_positions << endl;
			cur = 0;
			if (diff_positions == 0) {
				while (ptr < n && set1.count(board1[ptr])) {
					++cur;
					++ptr;
				}
			}
			ans += cur;
		}
	}
	cout << ans << endl;
}

int main(int argc, char **argv) {
	freopen("_magic_pairs.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int tt;
	scanf("%d", &tt);
	forn(t, tt) {
		printf("Case #%d: ", t + 1);
		solve();
	}
	return 0;
}

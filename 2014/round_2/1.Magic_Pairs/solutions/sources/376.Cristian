import collections
import random

def solve(line1, line2, line3):
    N, M = (int(x) for x in line1.split())
    x1, a1, b1, c1, r1 = (int(x) for x in line2.split())
    x2, a2, b2, c2, r2 = (int(x) for x in line3.split())

    board1 = [x1]
    board2 = [x2]

    for i in range(1, max(N, M)):
        board1.append((a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1)
        board2.append((a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2)

    seen1 = {}
    seen2 = {}

    x = 0
    y = 0
    q1 = collections.deque()
    q1.append(board1[x])
    q2 = collections.deque()
    q2.append(board2[y])
    result = 0

    while x < N and y < M:
        quit = False
        while q2:
            element = q2.popleft()
            if element not in seen1:
                while x < N:
                    seen1[board1[x]] = True
                    q1.append(board1[x])
                    if board1[x] == element:
                        break
                    x += 1
                if element not in seen1:
                    quit = True

        while q1:
            element = q1.popleft()
            if element not in seen2:
                while y < M:
                    seen2[board2[y]] = True
                    q2.append(board2[y])
                    if board2[y] == element:
                        break
                    y += 1
                if element not in seen2:
                    quit = True

        if quit:
            break

        if not q1 and not q2:
            #print x, y
            count_x = 1
            count_y = 1

            while x < N - 1:
                x += 1
                if board1[x] in seen2:
                    count_x += 1
                else:
                    q1.append(board1[x])
                    break

            while y < M - 1:
                y += 1
                if board2[y] in seen1:
                    count_y += 1
                else:
                    q2.append(board2[y])
                    break

            result += count_x * count_y

            if x >= N - 1 and not q1 and y >= M - 1 and not q2:
                break

    return result


lines = open("in.txt", "r").readlines()
T = int(lines[0])
out = open("out.txt", "w")
index = 1
for test in range(1, T+1):
    print test
    result = solve(lines[index].strip(), lines[index + 1].strip(), lines[index + 2].strip())
    index += 3
    out.write("Case #%s: %s\n" % (test, result))
out.close()

#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<queue>
#include<stack>
#include<cmath>
#include<map>
using namespace std;
typedef pair<int,int> PI;
typedef long long LL;
typedef double D;
#define FI first
#define SE second
#define MP make_pair
#define PB push_back
#define R(I,N) for(int I=0;I<N;I++)
#define F(I,A,B) for(int I=A;I<B;I++)
#define FD(I,N) for(int I=N-1;I>=0;I--)
#define make(A) scanf("%d",&A)
#define MAX 1000001
int b[2][MAX],n[2];;
void gen(){
	LL x[2][5]; // xabcr
	R(i,2)R(j,5)scanf("%lld",&x[i][j]);//make(x[i][j]);
	b[0][0] = x[0][0];
	b[1][0] = x[1][0];
	F(i,1,max(n[0],n[1]))R(w,2)
		b[w][i] = (x[w][1] * b[0][(i-1) % n[0]] + x[w][2] * b[1][(i-1) % n[1]] + x[w][3]) % x[w][4];
}
set<int> jak[2],razem;
void test(){
	
	fprintf(stderr,"wtf\n");
	make(n[0]);make(n[1]);
	gen();
	int il[2] ={0,0};
	int i[2]= {0,0};
	LL wynik=0;
	/*puts("");
	R(i,2){R(j,10)
		printf("%d ",b[i][j]);
		printf("\n");
	}
	printf("\n");*/
	fprintf(stderr,"wtf\n");
	jak[0].clear();jak[1].clear();razem.clear();
	while(i[0] < n[0] && i[1] < n[1]){
		R(w,2){
			while(i[w] < n[w] && jak[w].find(b[w][i[w]]) != jak[w].end()) i[w] ++;
			if(i[w] != n[w]){
				jak[w].insert(b[w][i[w]]);
				razem.insert(b[w][i[w]]);
				i[w]++;
			}
		}
		if(razem.size() == jak[0].size() && razem.size() == jak[1].size()){
			LL wyn[2] = {1,1};
			R(w,2){
				while(i[w] < n[w] && jak[w].find(b[w][i[w]]) != jak[w].end()){
					wyn[w] ++;
					i[w] ++;
				}
			}
//			printf("%d %d %d %lld %lld\n",int(razem.size()),i[0],i[1],wyn[0],wyn[1]);
			wynik += wyn[0] * wyn[1];
		}
	}
	printf("%lld\n",wynik);
}
main(){
	int _;make(_);
	R(i,_){
		printf("Case #%d: ",i+1);
		test();
	}
}

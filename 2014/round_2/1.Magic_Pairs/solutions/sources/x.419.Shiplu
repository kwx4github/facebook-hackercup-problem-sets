#include<bits/stdc++.h>
using namespace std;

#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define memo(a,b) memset(a,b,sizeof(a))

#define all(a) a.begin(),a.end()
#define pb push_back
#define mpp(a,b,c) make_pair(make_pair(a,b),c)

#define inf (1<<29)
#define i64 long long
#define pi (2.0*acos(0.0))
#define eps (1e-9)

typedef pair< int , int >  pii;
#define MAX 1000006

i64 board1[MAX],board2[MAX];
int main(){
    freopen("_magic_pairs.txt","r",stdin);
    freopen("_magic_pairs.ans","w",stdout);
    int t,cs = 1,N,M,i,j;
    i64 x1,a1,b1,r1,x2,a2,b2,r2,c1,c2;
    cin>>t;
    while(t--){
        cin>>N>>M;
        cin>>x1>>a1>>b1>>c1>>r1;
        cin>>x2>>a2>>b2>>c2>>r2;
        board1[0] = x1;
        board2[0] = x2;
        int mx = max(N,M);
        for(i = 1;i<mx;i++){
            board1[i] = ((a1*board1[(i-1)%N])%r1 + (b1*board2[(i-1)%M])%r1 + c1)%r1;
            board2[i] = ((a2*board1[(i-1)%N])%r2 + (b2*board2[(i-1)%M])%r2 + c2)%r2;
        }
        set<int> s1,s2;
        map<int,int> mp;
        int odd = 0;
        i64 sum = 0;
        for(i = 0, j = 0;i<N || j<M;){
            if(i<N && s1.size()<s2.size()){
                s1.insert(board1[i]);
                mp[board1[i]]++;
                if(mp[board1[i++]]==1)
                    odd++;
                else odd--;
            }
            else if(j<M){
                s2.insert(board2[j]);
                mp[board2[j]]++;
                if(mp[board2[j++]]==1)
                    odd++;
                else odd--;
            }
            else break;
        if(odd) continue;
            int k = i;
            while(i<N && s1.find(board1[i])!=s1.end()){
                i++;
            }
            int l = j;
            while(j<M && s2.find(board2[j])!=s2.end()){
                j++;
            }
            if(odd==0 && s1.size()==s2.size()){
                sum+= (i - k + 1)*(i64)(j - l + 1);
            }


        }

        cout<<"Case #"<<cs++<<": "<<sum<<endl;
    }
	return 0;
}

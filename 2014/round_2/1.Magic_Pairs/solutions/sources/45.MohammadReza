// .... .... .....!
// ...... ......!
// .... ....... ..... ..!

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cassert>

#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <numeric>
#include <bitset>

#include <cstdio>
#include <cstring>

using namespace std;

#define rep(i, n) for (int i = 0, _n = (int)(n); i < _n; i++)
#define fer(i, x, n) for (int i = (int)(x), _n = (int)(n); i < _n; i++)
#define rof(i, n, x) for (int i = (int)(n), _x = (int)(x); i-- > _x; )
#define fch(i, x) for (__typeof(x.begin()) i = x.begin(); i != x.end(); i++)
#define sz(x) (int((x).size()))
#define pb push_back
#define mkp make_pair
#define all(X) (X).begin(),(X).end()

#define X first
#define Y second

typedef long long ll;
typedef pair <int, int> pii;

////////////////////////////////////////////////////////////////////////////////

const int maxn = 1000*1000 + 100;

int n, m;
int x1, a1, b1, c1, r1;
int x2, a2, b2, c2, r2;

int a[maxn], b[maxn];

set<int> c[2];
int r[2];

inline void add (int x, int v)
{
	if (c[v].find(x) != c[v].end()) return;

	if (c[1-v].find(x) != c[1-v].end()) r[1-v]--;
	if (c[1-v].find(x) == c[1-v].end()) r[v]++;
	c[v].insert (x);
}

void solve()
{
	rep (z, 2) c[z].clear(), r[z] = 0;

	cin >> n >> m;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;

	a[0] = x1, b[0] = x2;
	fer (i, 1, max (n, m))
	{
		if (i < n) a[i] = (a1 * (ll)a[(i-1)%n] + b1 * (ll)b[(i-1)%m] + c1) % r1;
		if (i < m) b[i] = (a2 * (ll)a[(i-1)%n] + b2 * (ll)b[(i-1)%m] + c2) % r2;
	}
	
	ll ans = 0;

	int p1 = 0, p2 = 0;
	rep (i, n)
	{
		add (a[i], 0);
		while (p1 < m && r[0]) add (b[p1], 1), p1++;
		while (p2 < m && c[0].find (b[p2]) != c[0].end()) p2++;
		if (r[1] == 0)
			ans += max (p2 - p1 + 1, 0);
	}

	cout << " " << ans << endl;
}

int main()
{
	ios_base::sync_with_stdio (false);

	int tcn; cin >> tcn;
	for (int tci = 1; tci <= tcn; tci++)
	{
		cout << "Case #" << tci << ":";
		solve();
	}

	{ int _; cin >> _; return 0; }
}

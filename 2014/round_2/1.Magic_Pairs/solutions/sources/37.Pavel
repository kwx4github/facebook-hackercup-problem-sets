import java.io.*;
import java.math.BigInteger;
import java.util.*;

/**
 * @author Pavel Mavrin
 */
public class A {

    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    public A() throws FileNotFoundException {
        br = new BufferedReader(new FileReader("input.txt"));
        out = new PrintWriter("output.txt");
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            st = new StringTokenizer(br.readLine());
        }
        return st.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    public static void main(String[] args) throws IOException {
//        System.out.println(z1);
//        System.out.println(z2);
        new A().solve();
    }

    private void solve() throws IOException {
        int n = nextInt();
        for (int i = 0; i < n; i++) {
            String s = solveCase();
            out.println("Case #" + (i + 1) + ": " + s);
            System.out.println("Case #" + (i + 1) + ": " + s);
        }
        out.close();
    }

    static Random random = new Random(122343253353563545L);
    static long x1 = BigInteger.probablePrime(60, random).longValue();
    static long x2 = BigInteger.probablePrime(60, random).longValue();
    static long z1 = BigInteger.probablePrime(60, random).longValue();
    static long z2 = BigInteger.probablePrime(60, random).longValue();

    long hash1(long a) {
        return (a + x1) * z1;
    }

    long hash2(long a) {
        return (a + x2) * z2;
    }

    private String solveCase() throws IOException {
        int n = nextInt();
        int m = nextInt();
        long[] a = new long[n];
        long[] b = new long[m];
        long x1 = nextInt();
        long a1 = nextInt();
        long b1 = nextInt();
        long c1 = nextInt();
        long r1 = nextInt();
        long x2 = nextInt();
        long a2 = nextInt();
        long b2 = nextInt();
        long c2 = nextInt();
        long r2 = nextInt();
        a[0] = x1;
        b[0] = x2;
        for (int i = 1; i < n || i < m; i++) {
            if (i < n) {
                a[i] = (a1 * a[(i-1) % n] + b1 * b[(i-1) % m] + c1) % r1;
            }
            if (i < m) {
                b[i] = (a2 * a[(i-1) % n] + b2 * b[(i-1) % m] + c2) % r2;
            }
        }
        Set<Long> seta = new HashSet<Long>();
        Set<Long> setb = new HashSet<Long>();
        int i = 1;
        int j = 1;
        seta.add(a[0]);
        setb.add(b[0]);
        long hasha1 = hash1(a[0]);
        long hasha2 = hash2(a[0]);
        long hashb1 = hash1(b[0]);
        long hashb2 = hash2(b[0]);
        long res = 0;
//        System.out.println(Arrays.toString(a));
//        System.out.println(Arrays.toString(b    ));
        while (true) {
            if (seta.size() < setb.size()) {
                if (i == n) break;
                if (!seta.contains(a[i])) {
                    seta.add(a[i]);
                    hasha1 ^= hash1(a[i]);
                    hasha2 ^= hash2(a[i]);
                }
                i++;
            } else if (setb.size() < seta.size()) {
                if (j == m) break;
                if (!setb.contains(b[j])) {
                    setb.add(b[j]);
                    hashb1 ^= hash1(b[j]);
                    hashb2 ^= hash2(b[j]);
                }
                j++;
            } else {
                if (hasha1 == hashb1 && hasha2 == hashb2) {
                    long numa = 1;
                    long numb = 1;
                    while (i < n && seta.contains(a[i])) {
                        i++;
                        numa++;
                    }
                    while (j < m && setb.contains(b[j])) {
                        j++;
                        numb++;
                    }
                    res += numa * numb;
                }
                if (i == n) break;
                if (!seta.contains(a[i])) {
                    seta.add(a[i]);
                    hasha1 ^= hash1(a[i]);
                    hasha2 ^= hash2(a[i]);
                }
                i++;
            }
        }
        return "" + res;
    }

    private String nextLine() throws IOException {
        return br.readLine();
    }

}

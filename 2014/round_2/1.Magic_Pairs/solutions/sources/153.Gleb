#pragma comment(linker, "/STACK:100000000")
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <ctime>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>
#include <list>
#include <deque>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define taskname "problem_a"

const double pi = acos(-1.0);
const int size = 2 * 1000 * 1000;

int tc, n, m;
long long val[size];
long long f[size];
long long s[size];
int cnt[size];
int nx[size];

int main() {
	long long x1, a1, b1, c1, r1;
	long long x2, a2, b2, c2, r2;

	assert(freopen("input.txt", "r", stdin));
	assert(freopen("output.txt", "w", stdout));

	cin >> tc;
	for (int tnum = 0; tnum < tc; tnum++) {
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		
		f[0] = x1;
		s[0] = x2;

		for (int i = 1; i < max(n, m); i++) {
			f[i] = (a1 * f[(i - 1) % n] + b1 * s[(i - 1) % m] + c1) % r1;
			s[i] = (a2 * f[(i - 1) % n] + b2 * s[(i - 1) % m] + c2) % r2;
		}

		map <long long, int> frst;
		for (int i = 0; i < n; i++) {
			if (frst.find(f[i]) == frst.end()) {
				frst[f[i]] = i;
			}
			cnt[i] = frst.size();
		}
		cnt[n] = max(n, m) + 1;
		nx[n] = -1;
		for (int i = n - 1; i >= 0; i--) {
			if (cnt[i] < cnt[i + 1])
				nx[i] = i + 1;
			else
				nx[i] = nx[i + 1];
		}

		set <long long> cur;
		long long ans = 0;
		int ptr = 0;

		for (int i = 0; i < m; i++) {
			cur.insert(s[i]);
			if (frst.find(s[i]) == frst.end())
				ptr = n;
			else
				ptr = max(ptr, frst[s[i]]);
			if (cnt[ptr] == (int) cur.size()) {
				ans += nx[ptr] - ptr;
			}
		}
		cerr << "Case #" << tnum + 1 << ": " << ans << endl;
		cout << "Case #" << tnum + 1 << ": " << ans << endl;
	}

	return 0;
}
#include <cstdio>
#include <algorithm>
#include <map>
using namespace std;

int n, m;
int board[2][1000005];
map<int,int> first[2];
int need[2][1000005];

int f(int b, int i) {
  if (first[b^1].find(board[b][i]) != first[b^1].end()) {
    return first[b^1][board[b][i]];
  } else {
    return -1;
  }
}

void solve() {
  long long x1, a1, b1, c1, r1;
  long long x2, a2, b2, c2, r2;
  scanf("%d %d", &n, &m);
  scanf("%lld %lld %lld %lld %lld", &x1, &a1, &b1, &c1, &r1);
  scanf("%lld %lld %lld %lld %lld", &x2, &a2, &b2, &c2, &r2);

  board[0][0] = x1;
  board[1][0] = x2;
  first[0].clear();
  first[1].clear();

  for (int i = 1; i < max(n, m); i++) {
    board[0][i] = (a1 * (long long)board[0][(i-1) % n] + b1 * (long long)board[1][(i-1) % m] + c1) % r1;
    board[1][i] = (a2 * (long long)board[0][(i-1) % n] + b2 * (long long)board[1][(i-1) % m] + c2) % r2;
  }

  for (int i = max(n,m)-1; i >= 0; i--) {
    if (i < n)
      first[0][board[0][i]] = i;
    if (i < m)
      first[1][board[1][i]] = i;
  }

  for (int i = 0; i < n; i++) {
    if (f(0, i) == -1) {
      m = i;
      break;
    }
  }

  for (int i = 0; i < m; i++) {
    if (f(1, i) == -1) {
      m = i;
      break;
    }
  }

  if (f(0, 0) == -1 || f(1, 0) == -1) {
    printf("0\n");
    return;
  }

  need[0][0] = first[1][board[0][0]];
  for (int i = 1; i < n; i++) {
    if (f(0, i) >= 0)
      need[0][i] = max(need[0][i-1], f(0, i));
  }

  need[1][0] = first[0][board[1][0]];
  for (int i = 1; i < m; i++) {
    if (f(1, i) >= 0)
      need[1][i] = max(need[1][i-1], f(1, i));
  }

  //printf("\n");
  //for (int i = 0; i < n; i++)
  //  printf("%2d ", need[0][i]);
  //printf("\n");
  //for (int i = 0; i < m; i++)
  //  printf("%2d ", need[1][i]);
  //printf("\n---\n");
  //for (int i = 0; i < n; i++)
  //  printf("%2d ", board[0][i]);
  //printf("\n");
  //for (int i = 0; i < m; i++)
  //  printf("%2d ", board[1][i]);
  //printf("\n");

  int i = 0, k = 0;
  long long num_pairs = 0;

  while (i < n && k < m) {
    if (k >= need[0][i] && i >= need[1][k]) {
      int next1, next2;
      for (next1 = i+1; need[0][next1] == need[0][i]; next1++);
      for (next2 = k+1; need[1][next2] == need[1][k]; next2++);

      long long delta = (long long)(next1-i) * (long long)(next2-k);
      num_pairs += delta;

      //printf("%d->%d %d->%d\n", i, next1, k, next2);

      i = next1;
      k = next2;
    } else {
      i = need[1][k];
      k = need[0][i];
    }
  }

  printf("%lld\n", num_pairs);
}

int main() {
  int T;
  scanf("%d", &T);
  for (int i = 0; i < T; i++) {
    printf("Case #%d: ", i+1);
    solve();
  }

  return 0;
}

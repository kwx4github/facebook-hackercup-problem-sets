#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <cassert>
#include <cstring>
#include <ext/numeric>
#include <gmpxx.h>
#include<ext/hash_map>
using namespace std ;
using namespace __gnu_cxx ;
typedef mpz_class BIGNUM ;
typedef long long LL ;
typedef pair<int,int> PII ;
typedef vector<int> VI ;
const int INF = 1000*1000*1000 ;
const LL INFLL = (LL)INF * (LL)INF ;
#define REP(i,n) for(i=0;i<(n);++i)
#define ALL(c) c.begin(),c.end()
#define VAR(v,i) __typeof(i) v=(i)
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define CLEAR(t) memset(t,0,sizeof(t))
#define PB push_back
#define MP make_pair
#define FI first
#define SE second

const int MAXN = 1000100 ;
int A[MAXN], B[MAXN] ;

void produce(int N, int M) {
	LL x1, x2, a1, a2, b1, b2, c1, c2, r1, r2 ;
	cin >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2 ;
	A[0] = x1 ;
	B[0] = x2 ;
	for(int i=1 ; i<max(N,M) ; i++) {
		if(i<N)
			A[i] = (a1 * A[(i-1) % N] + b1 * B[(i-1) % M] + c1) % r1 ;
		if(i<M)
			B[i] = (a2 * A[(i-1) % N] + b2 * B[(i-1) % M] + c2) % r2 ;
	}
}

typedef hash_map<int,int> HASHSET ;
HASHSET S ;
int czas[MAXN] ;
int max_pref[MAXN], min_suf[MAXN] ;

LL dist(LL a, LL b) {
	if(a>=b) return 0 ;
	else return b-a ;
}

int main(int argc, char* argv[])
{
	ios_base::sync_with_stdio(0) ;
	int Tests ;
	cin >> Tests ;
	for(int test=1 ; test<=Tests ; test++) {
		cerr << "Case #" << test << endl ;
		cout << "Case #" << test << ": " ;
		int n, m, i ;
		cin >> n >> m ;
		produce(n,m) ;
		
//		cout << "dupa" <<endl;
/*		cout << endl ;
		REP(i,n) cout << A[i] << " " ;
		cout << endl ;
		REP(i,m) cout << B[i] << " " ;
		cout << endl ;*/
		
		S.clear() ;
		int next=1 ;
		for(i=0 ; i<m ; i++) {	// przenumerowanie B
			if(S[B[i]] == 0) {
				S[B[i]] = next ;
				B[i] = next ;
				next++ ;
			}
			else B[i] = -1 ; // juz bylo
		}
		
/*		for(i=0 ; i<m ; i++) cout << B[i] << " " ;
		cout << endl ;*/
		
		// next - dodatkowy element reprezentujacy pozostale
		
		for(i=1 ; i<=next ; i++) czas[i] = n ;
		for(i=0 ; i<n ; i++) {
			HASHSET::iterator it = S.find(A[i]) ;
			if(it == S.end()) czas[next] = min(czas[next], i) ;
			else czas[it->SE] = min(czas[it->SE], i) ;
		}
		
		max_pref[1] = czas[1] ;
		for(i=2 ; i<=next ; i++)
			max_pref[i] = max(max_pref[i-1], czas[i]) ;
		
		min_suf[next] = czas[next] ;
		for(i=next-1 ; i>=1 ; i--)
			min_suf[i] = min(min_suf[i+1], czas[i]) ;
		
		LL ret=0 ;
		int elem=-1 ;
		for(i=0 ; i<m ; i++) {
			elem = max(elem, B[i]) ;
			ret += dist(max_pref[elem], min_suf[elem+1]) ;
		}
		cout << ret << endl ;
	}
}


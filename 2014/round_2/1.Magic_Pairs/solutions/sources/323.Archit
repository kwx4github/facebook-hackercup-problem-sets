#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=1000000000;
const int minv=-inv;

const int max_n=1000010;
const int max_m=1000010;

int T;
int n,m;
int board1[max_n];
int board2[max_m];
LL x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;

set<int> S1,S2; int D;

int main()
{
	gi(T);

	rep(z,T)
	{
		gi(n); gi(m);

		scanf("%lld%lld%lld%lld%lld",&x1,&a1,&b1,&c1,&r1);
		scanf("%lld%lld%lld%lld%lld",&x2,&a2,&b2,&c2,&r2);

		board1[0]=(int(x1));
		board2[0]=(int(x2));
		forup(i,1,max(n,m))
		{
			if(i<n) board1[i]= ( (int) (( (a1 * ((LL)board1[(i-1)%n])) + (b1 * ((LL)board2[(i-1)%m])) + c1 )%r1) );
			if(i<m) board2[i]= ( (int) (( (a2 * ((LL)board1[(i-1)%n])) + (b2 * ((LL)board2[(i-1)%m])) + c2 )%r2) );
		}

		//rep(i,n) pis(board1[i]); pnl();
		//rep(i,m) pis(board2[i]); pnl();

		LL res=0ll;
		S1.clear(); S2.clear(); D=0;
		int ct1,ct2;
		int i1=0,i2=0;
		while(i1<n and i2<m)
		{
			ct1=1,ct2=1;
			S1.insert(board1[i1]);
			S2.insert(board2[i2]);
			if(board1[i1]!=board2[i2])
			{
				if(S2.find(board1[i1])==S2.end()) ++D; /*D.insert(board1[i1]);*/
				if(S1.find(board2[i2])!=S1.end()) --D; /*D.erase(D.find(board2[i2]));*/
			}

			++i1;
			while(i1<n and S1.find(board1[i1])!=S1.end())
			{
				++i1;
				++ct1;
			}

			++i2;
			while(i2<m and S2.find(board2[i2])!=S2.end())
			{
				++i2;
				++ct2;
			}

			if(D==0)
				res+=(LL(ct1))*(LL(ct2));
		}

		printf("Case #%d: ",z+1); pln(res);
	}
	
	return 0;
}
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <fstream>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>
#define maxn 1000005
using namespace std;

set<int> s1,s2;
long long board1[maxn],board2[maxn];
int n1,n2,T;
int x1,a1,b1,c1,r1;
int x2,a2,b2,c2,r2;
vector< pair<int,int> > p1,p2;

void genNext() {
	p1.clear();
	s1.clear();
	for (int i = 0; i < n1; i++) if (s1.find(board1[i]) == s1.end()) {
		p1.push_back(make_pair(i,board1[i]));
		s1.insert(board1[i]);
	}
	p1.push_back(make_pair(n1,-1));
	
	p2.clear();
	s2.clear();
	for (int i = 0; i < n2; i++) if (s2.find(board2[i]) == s2.end()) {
		p2.push_back(make_pair(i,board2[i]));
		s2.insert(board2[i]);
	}
	p2.push_back(make_pair(n2,-1));
}

void solveCase(int it) {
	cin >> n1 >> n2;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	board1[0] = x1;
	board2[0] = x2;
	for (int i = 1; i < max(n1,n2); i++) {
		if (i < n1) board1[i] = (board1[(i - 1) % n1] * a1 + board2[(i - 1) % n2] * b1 + c1) % r1;
		if (i < n2) board2[i] = (board1[(i - 1) % n1] * a2 + board2[(i - 1) % n2] * b2 + c2) % r2;
	}
	/*for (int i = 0; i < n1; i++) cout << board1[i] << ' ';
	cout << endl;
	for (int i = 0; i < n2; i++) cout << board2[i] << ' ';
	cot << endl;	*/
	
	genNext();	
	long long ret = 0;
	s1.clear();
	s2.clear();
	int pos = 0;
	for (int i = 0; i < p2.size(); i++) if (p2[i].second >= 0) {
		s2.insert(p2[i].second);
		while (pos < p1.size() && s1.find(p2[i].second) == s1.end()) {
			s1.insert(p1[pos].second);
			pos++;
		}
		if (pos >= p1.size()) break;
		if (s1.size() == s2.size()) 
			ret += 1LL * (p1[pos].first - p1[pos - 1].first) * (p2[i + 1].first - p2[i].first);
	}
	printf("Case #%d: %lld\n", it, ret);
}

int main() {
	scanf("%d", &T);
	for (int it = 1; it <= T; it++) solveCase(it);
}

#include <cstdio>
#include <string>
#include <string.h>
#include <stdint.h>
#include <unordered_set>
#include <algorithm>

#define EXIT exit(0);
#define INP(_X) scanf("%d",& _X);
#define OUT(_X) printf("%d ",_X);

#define f0(_X,_Y) for((_X)=0;(_X)<(_Y);++(_X))
#define f1(_X,_Y) for((_X)=1;(_X)<=(_Y);++(_X))
#define ff(_X,_Y,_Z) for((_X)=(_Y);(_X)<=(_Z);++(_X))
#define fF(_X,_Y,_Z) for((_X)=(_Y);(_X)<(_Z);++(_X))

#define rf0(_X,_Y) for(_X=(_Y)-1;(_X)>=0;--(_X))
#define rf1(_X,_Y) for(_X=(_Y);(_X)>0;--(_X))
#define rff(_X,_Y,_Z) for(_X=(_Y);(_X)>=(_Z);--(_X))
#define rfF(_X,_Y,_Z) for(_X=(_Y);(_X)>(_Z);--(_X))

int n,m;
const int M=1000002;
int a[M],b[M],idx1[M];
std::unordered_set<int> s;

int main()
{
    int t;
    int T=0;

    INP(t)
    while(t--)
    {

        INP(n)
        INP(m)
        int x;
        uint64_t x1,a1,b1,c1,r1;
        uint64_t x2,a2,b2,c2,r2;
        INP(x) x1=x;
        INP(x) a1=x;
        INP(x) b1=x;
        INP(x) c1=x;
        INP(x) r1=x;
        
        INP(x) x2=x;
        INP(x) a2=x;
        INP(x) b2=x;
        INP(x) c2=x;
        INP(x) r2=x;
        
        int i;
        a[0]=(int)x1;
        b[0]=(int)x2;
        ff(i,1,n-1)
        {
            a[i]=(int)((a[(i-1)%n]*a1+b[(i-1)%m]*b1+c1)%r1);
            b[i]=(int)((a[(i-1)%n]*a2+b[(i-1)%m]*b2+c2)%r2);
        }
        
        T++;
        uint64_t ans=0;
        int cnt1=0;
        s.clear();
        f0(i,n)
            if(s.find(a[i])==s.end())
            {
                s.insert(a[i]);
                idx1[cnt1++]=i-1;
            }
        idx1[cnt1] = n-1;

        s.clear();
        int j=0;
        int len=0;
        for(i=1;i<=cnt1;++i)
        {
            int new_element = a[idx1[i]];
            if(s.find(new_element)==s.end())
            {
                while(j<m && b[j]!=new_element)
                {
                    s.insert(b[j]);
                    ++j;
                }
                if(j>=m) break;
                s.insert(new_element);
                int k;
                for(k=j+1;k<m;++k)
                    if(s.find(b[k])==s.end())
                        break;
                len = k-j;
                j=k;
            }
            if(s.size()==i)
                ans += ((uint64_t) (idx1[i]-idx1[i-1])) * len;
        }
    
        printf("Case #%d: %llu\n",T,(unsigned long long)ans);
    }
	return 0;
}


//#include <cstdio>
//#include <string.h>
//#include <stdint.h>
//#include <set>
//
//#define EXIT exit(0);
//#define INP(_X) scanf("%d",& _X);
//#define OUT(_X) printf("%d ",_X);
//
//#define f0(_X,_Y) for((_X)=0;(_X)<(_Y);++(_X))
//#define f1(_X,_Y) for((_X)=1;(_X)<=(_Y);++(_X))
//#define ff(_X,_Y,_Z) for((_X)=(_Y);(_X)<=(_Z);++(_X))
//#define fF(_X,_Y,_Z) for((_X)=(_Y);(_X)<(_Z);++(_X))
//
//#define rf0(_X,_Y) for(_X=(_Y)-1;(_X)>=0;--(_X))
//#define rf1(_X,_Y) for(_X=(_Y);(_X)>0;--(_X))
//#define rff(_X,_Y,_Z) for(_X=(_Y);(_X)>=(_Z);--(_X))
//#define rfF(_X,_Y,_Z) for(_X=(_Y);(_X)>(_Z);--(_X))
//
//char a[55][55];
//
//struct D
//{
//    uint64_t hash;
//    int sy,sx,ey,ex;
//    bool operator < (const D &other) const
//    {
//        if(hash != other.hash) return hash < other.hash;
//        int i,j;
//        ff(i,sy,ey)
//            ff(j,sx,ex)
//            {
//                ;
//            }
//    }
//};
//
//int main()
//{
//    int t;
//    INP(t)
//    while(t--)
//    {
//        int n,m;
//        INP(n)
//        INP(m)
//        int i,j;
//        f1(i,n) scanf("%s",&a[i][1]);
//        f1(i,n) f1(j,m) a[i][j]-='A';
//        
//    }
//    old.insert(D{0,0});
//    for(int k=1;k<=100;++k)
//    {
//        now.clear();
//        for(auto i = old.begin(); i!= old.end(); ++i)
//        {
//            now.insert(D{i->x + k, i->y});
//            now.insert(D{i->x - k, i->y});
//            now.insert(D{i->x, i->y + k});
//            now.insert(D{i->x, i->y - k});
//        }
//        printf("k:%d, %d\n",k,(int)now.size());
//        old = now;
//    }
//	return 0;
//}

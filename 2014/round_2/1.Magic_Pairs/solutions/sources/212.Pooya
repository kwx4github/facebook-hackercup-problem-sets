										/* in the name of Allah */
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#include <cmath>
#include <list>
#include <map>
#include <set>

using namespace std;

#define uint unsigned int
#define int64 long long
#define P pair<int, int>
#define Pss pair<string, string>
#define PLL pair<int64, int64>
#define Inf 1000000
#define Mod 1000000007LL

int n, m;
int mark[2000010];
int64 a1, b1, c1, r1;
int64 a2, b2, c2, r2;
int64 v1[1000010], v2[1000010];
int64 t1[1000010], t2[1000010];
set <int64> st;
map <int64, int> mp;

int main(){
	freopen("Magic Pairs.in", "r", stdin);
	freopen("Magic Pairs.out", "w", stdout);
	int T, test = 0;
	for(cin >> T; T--; ){
		cerr << T << endl;
		cin >> n >> m;
		cin >> v1[0] >> a1 >> b1 >> c1 >> r1;
		cin >> v2[0] >> a2 >> b2 >> c2 >> r2;
		t1[0] = t2[0] = 0;
		for(int i = 1; i < max(n, m); i++){
			if(i < n)
				v1[i] = (a1 * v1[(i-1) % n] + b1 * v2[(i-1) % m] + c1) % r1;
			if(i < m)
				v2[i] = (a2 * v1[(i-1) % n] + b2 * v2[(i-1) % m] + c2) % r2;
		}

		mp.clear();
		int len = 0, tot = 0;
		st.clear();
		for(int i = 0; i < n; i++){
			if(!mp.count(v1[i]))
				mp[v1[i]] = tot++;
			int val = mp[v1[i]];
			if(!st.count(val)){
				t1[len] = 0;
				v1[len++] = val;
			}
			t1[len - 1]++;
			st.insert(val);
		}
		n = len;
		len = 0;
		st.clear();
		for(int i = 0; i < m; i++){
			if(!mp.count(v2[i]))
				mp[v2[i]] = tot++;
			int val = mp[v2[i]];
			if(!st.count(val)){
				t2[len] = 0;
				v2[len++] = val;
			}
			t2[len - 1]++;
			st.insert(val);
		}
		m = len;

		memset(mark, 0, sizeof mark);
		int64 res = 0, cnt = 0;
		for(int i = 0; i < min(n, m); i++){
			mark[v1[i]]++;
			if(mark[v1[i]] == 0)
				cnt--;
			else cnt++;
			mark[v2[i]]--;
			if(mark[v2[i]] == 0)
				cnt--;
			else cnt++;
			if(cnt == 0)
				res += t1[i] * t2[i];
		}
		cout << "Case #" << ++test << ": " << res << endl;
	}
	return 0;
}

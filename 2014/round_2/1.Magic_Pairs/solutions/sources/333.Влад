
#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <sstream>
#include <numeric>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <list>

using namespace std;

typedef  long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int, int> pii;

const LD eps = 1e-9;
const LD pi = acos(-1.0);
const LL inf = 1e+9;

#define mp make_pair
#define pb push_back
#define X first
#define Y second

#define dbg(x) { cerr << #x << " = " << x << endl; }

// extended template
//#pragma comment(linker, "/STACK:367772156")
typedef vector<int> vi;
typedef vector<vi> vvi;

#define forn(i, n) for (int i = 0; i < n; ++i)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

template<typename T> istream & operator >> (istream &, vector<T> &);
template<typename T> ostream & operator << (ostream &, const vector<T> &);


#define NAME ""

LL badSolve(int n, int m, int x1, int a1, int b1, int c1, int r1, int x2, int a2, int b2, int c2, int r2)
{
	vector <int> mas1(max(n, m)), mas2(max(n, m));
	mas1[0] = x1; mas2[0] = x2;
	for (int i = 1; i < max(n, m); i++)
	{
		mas1[i] = (LL(a1) * mas1[(i - 1) % n] + LL(b1) * mas2[(i - 1) % m] + c1) % r1;
		mas2[i] = (LL(a2) * mas1[(i - 1) % n] + LL(b2) * mas2[(i - 1) % m] + c2) % r2;

	}
	

	LL res = 0;
	set <int> sp1, sp2;
	for (int i = 0; i < n; i++)
	{
		sp1.insert(mas1[i]);
		sp2.clear();
		for (int k = 0; k < m; k++)
		{
			sp2.insert(mas2[k]);
			if (sp1 == sp2)
				res++;

		}
	}

	return res;
}

LL goodSolve(int n, int m, int x1, int a1, int b1, int c1, int r1, int x2, int a2, int b2, int c2, int r2)
{
	vector <int> mas1(max(n, m)), mas2(max(n, m));
	mas1[0] = x1; mas2[0] = x2;
	for (int i = 1; i < max(n, m); i++)
	{
		mas1[i] = (LL(a1) * mas1[(i - 1) % n] + LL(b1) * mas2[(i - 1) % m] + c1) % r1;
		mas2[i] = (LL(a2) * mas1[(i - 1) % n] + LL(b2) * mas2[(i - 1) % m] + c2) % r2;
	}
	int l = 0, r = 0;
	LL res = 0;
	set <int> sp1, sp2;
	LL cnt = 0;
	for (r = 0; r < m; r++)
	{
		sp2.insert(mas2[r]);
		
		if (!sp1.count(mas2[r]))
		{
			while (l < n && mas1[l] != mas2[r])
			{
				sp1.insert(mas1[l]);
				l++;
			}
			if (l < n)
				sp1.insert(mas1[l]);
			cnt = 0;
			while (l < n && sp1.count(mas1[l]))
			{
				cnt++;
				l++;
			}
		}
		if (sp1.size() == sp2.size())
		{
			res += cnt;
		}
		
	}
	return res;
}
void gen()
{
   freopen("input.txt", "w", stdout);
   cout << 100 << endl;
   for (int i = 0; i < 100; i++)
   {
   int n =	rand() % 100 + 1;
   int m = rand() % 100 + 1;
   cout << n << " " << m << endl;
  
   cout <<  rand() + 1 << " "<< rand() + 1 << " "<< rand() + 1 << " "<< rand() + 1 << " "<< rand() + 1 << " "<< rand() + 1 << " ";
	cout << rand() + 1 << " "<< rand() + 1 << " "<< rand() + 1 << " "<< rand() + 1 << " ";
   cout << endl;
   }

}
int main()
{
	//gen();return 0;
    //freopen(NAME ".in", "r", stdin); freopen(NAME ".out", "w", stdout);
	freopen("input.txt", "r", stdin); freopen("output.txt", "w",stdout);

	int test;
	scanf("%d", &test);
	for (int i = 0; i < test; i++)
	{
		cout << "Case #" << i + 1 << ": ";
		int n, m, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
		scanf("%d %d %d %d %d %d %d %d %d %d %d %d", &n, &m, &x1, &a1, &b1, &c1, &r1, &x2, &a2, &b2, &c2, &r2);
		cout << goodSolve(n, m, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2) << endl;
	}

    return 0;
}
/*******************************************
*******************************************/

template<typename T> istream & operator >> (istream &is, vector<T> &v)
{
    forn(i, v.size())
        is >> v[i];
    return is;
}
template<typename T> ostream & operator << (ostream &os, const vector<T> &v)
{
    forn(i, v.size())
        os << v[i] << " ";
    return os;
}

#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <iostream>
#include <set>
#include <queue>
using namespace std;

#define REP(i,n) for(int i = 0; i < (n); ++i)
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORE(it,V) for(__typeof(V.begin()) it = V.begin(); it != V.end(); ++it)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define MP make_pair
#define PB push_back
#define FI first
#define SE second

void testcase() {
	int n, m;
	cin >> n >> m;
	long long x1, x2, a1, a2, b1, b2, c1, c2;
	long long r1, r2;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	vector<long long> board1, board2;
	board1.PB(x1);
	board2.PB(x2);
	FOR(i,1,max(n-1, m-1)) {
		if (i <= n-1) {
			board1.PB( (a1*board1[ (i-1) %n] + b1 * board2[ (i-1)% m] + c1)%r1 );
		}
		if (i <= m-1) {
			board2.PB( (a2 * board1[(i-1) % n] + b2 * board2[ (i-1)%m] + c2) % r2);
		}
	}
/*
	cout << endl;
	FORE(it, board1) {
		cout << *it << " ";
	}
	cout << endl;

	FORE(it, board2) {
		cout << *it << " ";
	}
	cout << endl;
*/	vector<int> kategorie1;
	vector<int> kategorie2;
	kategorie1.PB(0);
	set<int> prefiks;
	prefiks.insert(board1[0]);
	
	FOR(i,1,n-1) {
		kategorie1.PB( prefiks.count(board1[i]) ? kategorie1[i-1] : kategorie1[i-1]+1);
		prefiks.insert(board1[i]);
	}

	prefiks.clear();
	prefiks.insert(board2[0]);
	kategorie2.PB(0);
	FOR(i,1,m-1) {
		kategorie2.PB( prefiks.count(board2[i]) ? kategorie2[i-1] : kategorie2[i-1]+1);
		prefiks.insert(board2[i]);
	}

	vector<int> liczKategorie1(board1.size(), 0);
	vector<int> liczKategorie2(board2.size(), 0);
	REP(i,n) ++liczKategorie1[ kategorie1[i] ];
	REP(i,m) ++liczKategorie2[ kategorie2[i] ];

	set<int> gorny;
	set<int> dolny;
	int latacz1 = 1;
	int latacz2 = 0;
	int szukany = board1[0];
	gorny.insert(szukany);

	set< pair<int,int> > wynik;

	while (latacz2 < m || latacz1 < n) {
		// znajdz szukanego
		while (latacz2 < m && dolny.count(szukany) == 0) {
			dolny.insert(board2[latacz2]); // dodajemy syf
			++latacz2;
		}
		// jesli jest szukany i maja taki sam rozmiar dolny vs gorny
		if (dolny.count(szukany) && dolny.size() == gorny.size()) {
			wynik.insert(MP(kategorie1[latacz1-1], kategorie2[latacz2-1]));
		}
		if (!dolny.count(szukany)) {
			break;
		}
		// teraz dolny jest u gory, wiec znajdzmy takiego, ktorego nie ma u dolnego
		while (latacz1 < n && dolny.count(board1[latacz1])) {
			gorny.insert(board1[latacz1]);
			++latacz1;
			if (dolny.size() == gorny.size()) {
				wynik.insert(MP(kategorie1[latacz1-1], kategorie2[latacz2-1]));
			}
		}
		if (latacz1 < n) { // mamy goscia co go nie ma
			gorny.insert(board1[latacz1]);
			szukany = board1[latacz1];
			++latacz1;
		} else {
			break;
		}
	}
	long long f_result = 0;
	FORE(it, wynik) {
		f_result += (long long)liczKategorie1[it->FI] * (long long)liczKategorie2[it->SE];
	}
	cout << f_result << endl;
}

int main() {
	int t;
	cin >> t;
	FOR(i,1,t) {
		cout << "Case #" << i << ": ";
		testcase();
	}
}

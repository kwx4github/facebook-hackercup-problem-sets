import java.io.*;
import java.util.*;
import java.math.*;
import Upsolving.Eslow;

public class Easy implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st;
	static Random rnd;

	private void solve() throws IOException {
		int tests = nextInt();
		for (int test = 0; test < tests; test++) {
			out.print("Case #" + (test + 1) + ": ");
			solveOne();
		}
	}

	private void solveOne() throws IOException {
		int n = nextInt(), m = nextInt();
		long x1 = nextLong(), a1 = nextLong(), b1 = nextLong(), c1 = nextLong(), r1 = nextLong();
		long x2 = nextLong(), a2 = nextLong(), b2 = nextLong(), c2 = nextLong(), r2 = nextLong();
		long[] first = new long[n], second = new long[m];
		first[0] = x1;
		second[0] = x2;
		for (int i = 1; i < Math.max(n, m); i++) {
			if (i < n) {
				first[i] = (a1 * first[(i - 1) % n] + b1 * second[(i - 1) % m] + c1)
						% r1;
			}
			if (i < m) {
				second[i] = (a2 * first[(i - 1) % n] + b2 * second[(i - 1) % m] + c2)
						% r2;
			}
		}
		Set<Long> firstSet = new HashSet<Long>();
		Set<Long> secondSet = new HashSet<Long>();
		Set<Integer> goodSizes = new HashSet<Integer>();
		Set<Long> missesFirst = new HashSet<Long>();
		Set<Long> missesSecond = new HashSet<Long>();
		int j = 0;
		// out.println(Arrays.toString(first));
		// out.println(Arrays.toString(second));
		for (int i = 0; i < n; i++) {
			firstSet.add(first[i]);
			missesFirst.remove(first[i]);
			if (!secondSet.contains(first[i])) {
				missesSecond.add(first[i]);
			}
			while (j < m && secondSet.size() < firstSet.size()) {
				secondSet.add(second[j]);
				missesSecond.remove(second[j]);
				if (!firstSet.contains(second[j])) {
					missesFirst.add(second[j]);
				}
				++j;
			}

			// out.println(i + " " + j + " " + firstSet + " " + secondSet);

			if (firstSet.size() == secondSet.size()) {
				if (missesFirst.size() == 0 && missesSecond.size() == 0) {
					goodSizes.add(firstSet.size());
				} else if (missesFirst.size() == 0 || missesSecond.size() == 0) {
					throw new AssertionError();
				}
			}
		}
		long result = 0;
		long[] firstSizes = getSizes(n, first);
		long[] secondSizes = getSizes(m, second);

		for (int goodSize : goodSizes) {
			result += firstSizes[goodSize] * secondSizes[goodSize];
		}

		out.println(result);
	}

	private long[] getSizes(int n, long[] first) {
		long[] result = new long[n + 1];
		Set<Long> set = new HashSet<Long>();
		for (int i = 0; i < n; i++) {
			set.add(first[i]);
			result[set.size()]++;
		}
		return result;
	}

	public static void main(String[] args) {
		new Easy().run();
	}

	public void run() {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);

			rnd = new Random();

			solve();

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String line = in.readLine();

			if (line == null)
				return null;

			st = new StringTokenizer(line);
		}

		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
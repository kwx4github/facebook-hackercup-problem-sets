#include <set>
#include <map>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <cctype>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <complex>
#include <numeric>
#include <valarray>
#include <iostream>
#include <string.h>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;

#define inf 1061109567LL
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define mem(x,a) memset(x,a,sizeof(x))
#define rep(i,n) for(int i(0),_n(n);i<_n;++i)
#define repi(i,a,b) for(int i(a),_b(b);i<_b;++i)
#define repr(i,a,b) for(int i(a),_b(b);i>=_b;--i)
#define repe(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define len(x) ((int)(x.size()))

#define DEBUG 1 
#if DEBUG && !ONLINE_JUDGE 
	#define debug(args...) (Debugger()) , args
	class Debugger { public: Debugger(const std::string& _separator = ", ") : first(true), separator(_separator){} template<typename ObjectType> Debugger& operator , (const ObjectType& v) { if(!first) std::cerr << separator; std::cerr << v; first = false; return *this; } ~Debugger() { std::cerr << endl;} private: bool first; std::string separator; }; template <typename T1, typename T2> inline std::ostream& operator << (std::ostream& os, const std::pair<T1, T2>& p) { return os << "(" << p.first << ", " << p.second << ")"; } template<typename T> inline std::ostream &operator << (std::ostream & os,const std::vector<T>& v) { bool first = true; os << "["; for(unsigned int i = 0; i < v.size(); i++) { if(!first) os << ", "; os << v[i]; first = false; } return os << "]"; } template<typename T> inline std::ostream &operator << (std::ostream & os,const std::set<T>& v) { bool first = true; os << "["; for (typename std::set<T>::const_iterator ii = v.begin(); ii != v.end(); ++ii) { if(!first) os << ", "; os << *ii; first = false; } return os << "]"; } template<typename T1, typename T2> inline std::ostream &operator << (std::ostream & os,const std::map<T1, T2>& v) { bool first = true; os << "["; for (typename std::map<T1, T2>::const_iterator ii = v.begin(); ii != v.end(); ++ii) { if(!first) os << ", "; os << *ii ; first = false; } return os << "]"; } 
#else 
		#define debug(args...) 
#endif



set<ll> st1,st2;
		
ll N,M,x1,x2,a1,a2,b1,b2,c1,c2,t1,t2,t3,p1,p2,r1,r2;





int main(){
	ios_base::sync_with_stdio(0);
	
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	
	
	int tests;
	cin>>tests;
	for(int t=1;t<=tests;t++){
		cout<<"Case #"<<t<<": ";
		
		st1.clear();
		st2.clear();
		vi Board1,Board2,nxt1,nxt2;
		
		
		cin>>N>>M;
		
		cin>>x1>>a1>>b1>>c1>>r1;
		cin>>x2>>a2>>b2>>c2>>r2;
		
		Board1.pb(x1);
		nxt1.pb(0);
		st1.insert(x1);
		
		Board2.pb(x2);
		nxt2.pb(0);
		st2.insert(x2);
		
		
		
		
		repi(i,1,max(M,N)+1){
			t1=(a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
			t2= (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
			
			Board1.pb(t1);
			Board2.pb(t2);
			
			
			if(st1.find(t1)==st1.end()){
				nxt1.pb(i);
				st1.insert(t1);
			}
			
			if(st2.find(t2)==st2.end()){
				nxt2.pb(i);
				st2.insert(t2);
			}
		}
		
		while(nxt1.back()>=N)nxt1.pop_back();
		while(nxt2.back()>=M)nxt2.pop_back();
		
		nxt1.pb(N);
		nxt2.pb(M);
		
		
		//~ debug(nxt1);
		//~ debug(nxt2);
		
		
		Board1[N]=inf;
		Board2[M]=inf;
		
		map<int,int> m1,m2;
		
		st1.clear();
		st2.clear();
		
		p1=-1;
		p2=-1;
		
		ll ans=0;
		
		while(p1<N&&p2<M){
			
			debug(t,p1,p2);
			//~ 
			//~ debug(vi(all(st1)));
			//~ debug(vi(all(st2)));
			
			while(len(st2)){
				
				p1=*upper_bound(all(nxt1),p1);
				//~ debug(p1);
				if(p1==N){
					//~ debug(p1);
					goto lll;
				}
				
				t1=Board1[p1];
				
				//~ debug(p1,t1);
				
				m1[t1]=1;
				
				if(st2.find(t1)!=st2.end()){
					st2.erase(t1);
				}
				
				else if(!m2.count(t1)){
					
					st1.insert(t1);
					
				}
				
			}
			while(len(st1)){
				
				p2=*upper_bound(all(nxt2),p2);
					
				if(p2==M){
					goto lll;
					
				}
				
				t2=Board2[p2];
				
				m2[t2]=1;
				
				if(st1.find(t2)!=st1.end()){
					st1.erase(t2);
				}
				
				else if(!m1.count(t2)){
					
					st2.insert(t2);
					
				}
				
			}
			
			if(len(st1)+len(st2)==0){
				
				//~ debug(p1,p2);
				
				t1=(*upper_bound(all(nxt1),p1)-p1)*(*upper_bound(all(nxt2),p2)-p2);
				
				if(p1>=0&&p2>=0)ans+=t1;
				
				p1=*upper_bound(all(nxt1),p1);
				p2=*upper_bound(all(nxt2),p2);
				
				st1.insert(Board1[p1]);
				st2.insert(Board2[p2]);
				
				m1[Board1[p1]]=1;
				m2[Board2[p2]]=1;
				
				if(Board1[p1]==Board2[p2]){
					
					st1.clear();
					st2.clear();
					
				}
				
			}
			
			
		}
		
		lll:;
		
		cout<<ans<<endl;
		
		
	}
	
	
}









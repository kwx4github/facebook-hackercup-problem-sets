#include <stdio.h>
#include <time.h>
#include <set>

using namespace std;

#define NMAX 1000001
long long board1[NMAX], board2[NMAX], p1[NMAX], p2[NMAX], cnt1[NMAX], cnt2[NMAX];
long long ans, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
int N, M, NP, MP, i;

set<long long> s;
void GeneratePrefixSets(long long board[NMAX], int N, long long p[NMAX], long long cnt[NMAX], int& NP) {
	int i;
	NP = 0;
	s.clear();
	for (i = 0; i < N; i++)
		if (s.find(board[i]) != s.end())
			cnt[NP]++;
		else {
			NP++;
			p[NP] = board[i];
			cnt[NP] = 1;
			s.insert(board[i]);
		}
}

int main() {
	int TSTART = clock();

	freopen("_magic_pairs.txt", "r", stdin);
	freopen("mp.out", "w", stdout);

	int T, t;
	scanf("%d", &T);
	fprintf(stderr, "T=%d\n", T);
	
	
	for (t = 1; t <= T; t++) {
		scanf("%d %d %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld",
			  &N, &M, &x1, &a1, &b1, &c1, &r1, &x2, &a2, &b2, &c2, &r2);

		// Generate the boards.
		board1[0] = x1;
		board2[0] = x2;
		
		for (i = 1; i < N || i < M; i++) {
			if (i < N)
				board1[i] = (a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1;  
			if (i < M)
				board2[i] = (a2  * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2;
			if (board1[i] < 0 || board2[i] < 0)
				exit(1);
		}

		// Generate the prefix sets.
		GeneratePrefixSets(board1, N, p1, cnt1, NP);
		GeneratePrefixSets(board2, M, p2, cnt2, MP);

		//fprintf(stderr, " %d/%d %d/%d\n", NP, N, MP, M);
		
		ans = 0;
		s.clear();
		for (i = 1; i <= NP && i <= MP; i++) {
			s.insert(p1[i]);
			s.insert(p2[i]);
			if (s.size() == i)
				ans += (cnt1[i] * cnt2[i]);
		}

		printf("Case #%d: %lld\n", t, ans);
		fprintf(stderr, "Case #%d: %lld\n", t, ans);
	}

	fprintf(stderr, "Duration=%.3lf sec\n", (double) (clock() - TSTART) / CLOCKS_PER_SEC);
	return 0;
}

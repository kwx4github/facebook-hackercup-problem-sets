function main()
	local input = {}
	for line in io.lines("in_file") do input[#input + 1] = line end
	local cases = tonumber(input[1])

	local current_line = 2
	for i = 1, cases do
		local n, m = string.match(input[current_line], "(%d+) (%d+)")
		current_line = current_line + 1
		local x1, a1, b1, c1, r1 = string.match(input[current_line], "(%d+) (%d+) (%d+) (%d+) (%d+)")
		current_line = current_line + 1
		local x2, a2, b2, c2, r2 = string.match(input[current_line], "(%d+) (%d+) (%d+) (%d+) (%d+)")
		current_line = current_line + 1
		n, m, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2 = tonumber(n), tonumber(m), tonumber(x1), tonumber(a1), tonumber(b1), tonumber(c1), tonumber(r1), tonumber(x2), tonumber(a2), tonumber(b2), tonumber(c2), tonumber(r2)

		board1, board2 = gen_boards(n, m, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2)
		local result = run(n, m, board1, board2)
		print("Case #"..i..": "..result)
	end
end

function gen_boards(n, m, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2)
	local board1 = {}
	local board2 = {}
	board1[0] = x1
	board2[0] = x2
	local i = 1
	while i < n or i < m do
		if i < n then
			board1[i] = (a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1
		end
		if i < m then
			board2[i] = (a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2
		end
		i = i + 1
	end
	--for i, v in pairs(board1) do print(i, v) end
	--for i, v in pairs(board2) do print(i, v) end
	return board1, board2
end
	
function run(n, m, board1, board2)
	local count = 0
	local i1 = 0
	local i2 = 0
	local set1 = {}
	local set2 = {}
	
	set1[board1[i1]] = true
	set2[board2[i2]] = true
	
	while true do		
		while set2[board1[i1]] and set1[board2[i2]] do
			local o1, o2 = i1, i2
			while i1 < n and set1[board1[i1]] do
				i1 = i1 + 1
			end
			if i1 < n then set1[board1[i1]] = true end
			while i2 < m and set2[board2[i2]] do
				i2 = i2 + 1
			end
			if i2 < m then set2[board2[i2]] = true end
			count = count + (i1 - o1) * (i2 - o2)
			if i1 >= n and i2 >= m then return count end
		end

		local o1, o2 = i1, i2
		while true do
			while o2 < m and board1[i1] ~= board2[o2] do
				i1 = i1 + 1
				if i1 >= n then return count end
				set1[board1[i1]] = true
			end

			while o1 < n and board2[i2] ~= board1[o1] do
				i2 = i2 + 1
				if i2 >= m then return count end
				set2[board2[i2]] = true
			end

			while set2[board1[o1]] and o1 < n do
				o1 = o1 + 1
			end
			
			while set1[board2[o2]] and o2 < m do
				o2 = o2 + 1
			end

			if o1 >= i1 and o2 >= i2 then break end
		end
	end
	return count
end

main()
--run with lua.exe a.lua > out_file

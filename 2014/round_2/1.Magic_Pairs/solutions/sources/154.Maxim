import java.io.*;
import java.util.*;

public class Main implements Runnable {

	public void _main() throws IOException {
		int numTests = nextInt();
		for (int test = 1; test <= numTests; test++) {
			int n = nextInt();
			int m = nextInt();
			int[] a = new int[n];
			int[] b = new int[m];
			long x1 = nextLong();
			long a1 = nextLong();
			long b1 = nextLong();
			long c1 = nextLong();
			long r1 = nextLong();
			long x2 = nextLong();
			long a2 = nextLong();
			long b2 = nextLong();
			long c2 = nextLong();
			long r2 = nextLong();
			a[0] = (int)x1;
			b[0] = (int)x2;
			for (int i = 1; i < Math.max(n, m); i++) {
				if (i < n) {
					a[i] = (int)((a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1);
				}
				if (i < m) {
					b[i] = (int)((a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2);
				}
			}
			Map<Integer, Integer> id = new HashMap<Integer, Integer>();
			for (int i = 0; i < a.length; i++) {
				add(id, a[i]);
			}
			for (int i = 0; i < b.length; i++) {
				add(id, b[i]);
			}
			for (int i = 0; i < a.length; i++) {
				a[i] = id.get(a[i]);
			}
			for (int i = 0; i < b.length; i++) {
				b[i] = id.get(b[i]);
			}
			int[] firstOccurence = new int[id.size()];
			Arrays.fill(firstOccurence, -1);
			for (int i = 0; i < a.length; i++) {
				if (firstOccurence[a[i]] < 0) {
					firstOccurence[a[i]] = i;
				}
			}
			//out.println(Arrays.toString(a));
			//out.println(Arrays.toString(b));
			long res = 0;
			Set<Integer> set = new HashSet<Integer>();
			int max = -1;
			for (int i = 0; i < b.length; i++) {
				max = Math.max(max, b[i]);
				set.add(b[i]);
				if (max == set.size() - 1) {
					int l = firstOccurence[max];
					if (l < 0) {
						l = a.length;
					}
					int r = a.length;
					if (max + 1 < id.size()) {
						r = firstOccurence[max + 1];
					}
					if (r < 0) {
						r = a.length;
					}
					res += r - l;
					//out.println(i + " " + b[i] + " " + l + " " + r);
				}
			}
			out.println("Case #" + test + ": " + res);
		}
	}

	private void add(Map<Integer, Integer> id, int x) {
		if (!id.containsKey(x)) {
			int sz = id.size();
			id.put(x, sz);
		}
	}


	private BufferedReader in;
	private PrintWriter out;
	private StringTokenizer st;

	private String next() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String rl = in.readLine();
			if (rl == null)
				return null;
			st = new StringTokenizer(rl);
		}
		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	public static void main(String[] args) {
		Locale.setDefault(Locale.UK);
		new Thread(new Main()).start();
	}

	public void run() {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);
			in = new BufferedReader(new FileReader("_magic_pairs.in"));
			out = new PrintWriter(new FileWriter("_magic_pairs.out"));

			_main();

			out.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(202);
		}
	}

}

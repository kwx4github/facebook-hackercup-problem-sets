using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;
using System.Globalization;
using System.Threading;
using System.Numerics;

namespace A
{
    class Program
    {
        static string[] GetLine()
        {
            return Console.ReadLine().Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
        }

        static ulong N, M;
        static ulong x1, a1, b1, c1, r1;
        static ulong x2, a2, b2, c2, r2;

        static ulong Solve()
        {
            ulong[] Board1 = new ulong[N];
            ulong[] Board2 = new ulong[M];

            Board1[0] = x1;
            Board2[0] = x2;

            for (ulong i = 1; i < Math.Max(N, M); i++)
            {
                if (i < N)
                    Board1[i] = (a1 * Board1[(i - 1) % N] + b1 * Board2[(i - 1) % M] + c1) % r1;

                if (i < M)
                    Board2[i] = (a2 * Board1[(i - 1) % N] + b2 * Board2[(i - 1) % M] + c2) % r2;
            }

            SortedSet<ulong> ext1 = new SortedSet<ulong>();
            SortedSet<ulong> ext2 = new SortedSet<ulong>();
            SortedSet<ulong> common = new SortedSet<ulong>();

            ulong p1 = 0, p2 = 0;
            ulong count = 0;

            while (true)
            {
                if (p1 == N || p2 == M)
                    return count;

                var v = Board1[p1++];
                ext1.Add(v);

                while (ext2.Any() || ext1.Any())
                {
                    while (ext2.Any() && p1 < N)
                    {
                        ulong v1 = Board1[p1++];
                        if (common.Contains(v1))
                            continue;

                        if (ext2.Contains(v1))
                        {
                            ext2.Remove(v1);
                            common.Add(v1);
                        }
                        else
                            ext1.Add(v1);
                    }

                    while (ext1.Any() && p2 < M)
                    {
                        ulong v2 = Board2[p2++];
                        if (common.Contains(v2))
                            continue;

                        if (ext1.Contains(v2))
                        {
                            ext1.Remove(v2);
                            common.Add(v2);
                        }
                        else
                            ext2.Add(v2);
                    }

                    if (ext2.Any() && p1 == N)
                        return count;

                    if (ext1.Any() && p2 == M)
                        return count;
                }

                //Console.WriteLine("{0} {1}", p1, p2);

                ulong savep1 = p1;
                ulong savep2 = p2;

                while (p1 < N && common.Contains(Board1[p1]))
                    p1++;

                while (p2 < M && common.Contains(Board2[p2]))
                    p2++;

                count += (p1 - savep1 + 1) * (p2 - savep2 + 1);
            }

            return count;
        }

        static void Main(string[] args)
        {
            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
            //Console.SetIn(new StreamReader("_magic_pairs_example_input.txt"));

            int T = int.Parse(Console.ReadLine());
            for (int t = 0; t < T; t++)
            {
                string[] line = GetLine();
                N = ulong.Parse(line[0]);
                M = ulong.Parse(line[1]);

                line = GetLine();
                x1 = ulong.Parse(line[0]);
                a1 = ulong.Parse(line[1]);
                b1 = ulong.Parse(line[2]);
                c1 = ulong.Parse(line[3]);
                r1 = ulong.Parse(line[4]);

                line = GetLine();
                x2 = ulong.Parse(line[0]);
                a2 = ulong.Parse(line[1]);
                b2 = ulong.Parse(line[2]);
                c2 = ulong.Parse(line[3]);
                r2 = ulong.Parse(line[4]);

                Console.WriteLine("Case #{0}: {1}", t + 1, Solve());
            }
        }
    }
}

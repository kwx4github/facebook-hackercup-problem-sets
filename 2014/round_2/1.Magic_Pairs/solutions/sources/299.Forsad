#include<iostream>
#include<cassert>
#include<cstdlib>
#include<cstring>
#include<utility>
#include<sstream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<string>
#include<cctype>
#include<queue>
#include<deque>
#include<stack>
#include<cmath>
#include<ctime>
#include<list>
#include<map>
#include<set>
#define pi (acos(-1.0))
#define Abs(a) (((a)<0) ? (-(a)) :(a) )
#define rep(i,n) for((i)=0;(i)<(n);(i)++)
#define Rep(i,n) for(int i=0;i<(n);i++)
#define Rrep(i,n) for(int i=n-1;i>=0;i--)
#define rrep(i,n) for((i)=(n)-1;(i)>=0;(i)--)
#define Pii pair<int,int>
#define PB push_back
#define Size(x) ((int)(x.size()))
#define SZ 1000005
using namespace std;
typedef long long mint;
typedef unsigned long long umint;
mint a[SZ],b[SZ];
int main()
{
    freopen("_magic_pairs.txt","r",stdin);
    freopen("Aout.txt","w",stdout);
    int t,T,i,j;
    mint a1,b1,c1,a2,b2,c2,x1,x2,r1,r2;
    scanf("%d",&T);
    for(t=1; t<=T; t++)
    {
        int n,m;
        scanf("%d%d",&n,&m);
        cin>>x1>>a1>>b1>>c1>>r1;
        cin>>x2>>a2>>b2>>c2>>r2;
        a[0]=x1;
        b[0]=x2;
        //cout<<a[0]<<" "<<b[0]<<endl;
        for(i=1; i<max(n,m); i++)
        {
            if(i<n)
            {
                a[i]=a1*a[(i-1)%n]+b1*b[(i-1)%m]+c1;
                a[i]%=r1;
            }
            if(i<m)
            {
                b[i]=a2*a[(i-1)%n]+b2*b[(i-1)%m]+c2;
                b[i]%=r2;
            }
            //cout<<a[i]<<" "<<b[i]<<endl;
            //cout<<a[i]<<" ";
        }
        //cout<<endl;
        int cur=0;
        mint cnt=0,prev=0,ans=0;
        set<int> sa,sb;
        map<int,int> mp;
        for(i=0; i<n; i++)
        {
            if(sa.find(a[i])!=sa.end())
            {
                if(mp.empty())
                    ans+=prev;
                continue;
            }
            sa.insert(a[i]);
            if(mp.find(a[i])==mp.end())
                mp[a[i]]=0;
            mp[a[i]]+=1;
            if(mp[a[i]]==0)
                mp.erase((int)a[i]);
            if(mp.find(a[i])!=mp.end())
                mp[a[i]]=min(1,mp[a[i]]);
            if(cur>=m)
                break;
            sb.insert(b[cur]);
            if(mp.find(b[cur])==mp.end())
                mp[b[cur]]=0;
            mp[b[cur]]-=1;
            if(mp[b[cur]]==0)
                mp.erase(b[cur]);
            if(mp.find(b[cur])!=mp.end())
                mp[b[cur]]=max(-1,mp[b[cur]]);
            cur++;
            cnt=1;
            while(cur<m&&sb.find(b[cur])!=sb.end())
            {
                cur++;
                cnt++;
            }
            if(mp.empty())
                ans+=cnt;
            prev=cnt;
            //cout<<mp.size()<<endl;
            //cout<<i<<" "<<cur<<endl;
        }
        printf("Case #%d: ",t);
        cout<<ans<<endl;
    }
    return 0;
}


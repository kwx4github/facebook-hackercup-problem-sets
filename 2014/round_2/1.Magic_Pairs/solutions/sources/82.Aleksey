#include <queue>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <stack>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define FOREACH(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

typedef unsigned long long ull;
typedef long long ll;

typedef pair <ull, ull> hpair;
ull MODF = (ull)1e+9 + 33;
ull MODS = (ull)1e+9 + 37;

ull powmod(ull a, ull b, ull m)
{
    if (b == 0)
        return 1;
    ull r = powmod(a, b >> 1, m);
    (r *= r) %= m;
    return b & 1? (r * a) % m : r;
}

int main(int argc, char **argv)
{
	ios_base::sync_with_stdio(false);
	#ifdef MJUDGE
		freopen("in", "r", stdin);
		freopen("out", "w", stdout);
	#endif
    
    int T;
    cin >> T;
    for (int t = 1; t <= T; ++t) {
        int N, M;
        ll x1, a1, b1, c1, r1;
        ll x2, a2, b2, c2, r2;
        cin >> N >> M >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
        int brd1[N];
        int brd2[M];
        brd1[0] = x1;
        brd2[0] = x2;
        
        for (int i = 1; i < N || i < M; ++i) {
            if (i < N) {
                brd1[i] = (a1 * brd1[(i - 1) % N] + b1 * brd2[(i - 1) % M] + c1) % r1;
            }
            if (i < M) {
                brd2[i] = (a2 * brd1[(i - 1) % N] + b2 * brd2[(i - 1) % M] + c2) % r2;
            }
        }
        
        map < hpair, int > m;
        {
            set < int > s;
            hpair h = make_pair(0, 0);
            
            for (int i = 0; i < N; ++i) {
                if (s.find(brd1[i]) == s.end()) {
                    (h.first += powmod((int)1e+9 + 7, brd1[i] + 1, MODF)) %= MODF;
                    (h.second += powmod((int)1e+9 + 17, brd1[i] + 1, MODS)) %= MODS;
                    s.insert(brd1[i]);
                }

                m[h] += 1;
            }
        }

        long long ans = 0;
        {
            set < int > s;
            hpair h = make_pair(0, 0);
            
            for (int i = 0; i < M; ++i) {
                if (s.find(brd2[i]) == s.end()) {
                    (h.first += powmod((int)1e+9 + 7, brd2[i] + 1, MODF)) %= MODF;
                    (h.second += powmod((int)1e+9 + 17, brd2[i] + 1, MODS)) %= MODS;
                    s.insert(brd2[i]);
                }

                if (m.find(h) != m.end()) {
                    ans += m[h];
                }
            }
        }
        cerr << t << endl;

        cout << "Case #" << t << ": ";
        cout << ans << endl;
    }
	return 0;
}

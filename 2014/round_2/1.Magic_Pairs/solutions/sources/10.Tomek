//{{{
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
#include <map>
#include <set>
using namespace std;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << (x) << endl;

typedef long long LL;
typedef unsigned long long ULL;
const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%lld",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }
//}}}

vector<int> board[2];

void ReadInput() {
  int N = rint();
  int M = rint();
  board[0].resize(N);
  board[1].resize(M);

  LL x1 = rLL();
  LL a1 = rLL();
  LL b1 = rLL();
  LL c1 = rLL();
  LL r1 = rLL();

  LL x2 = rLL();
  LL a2 = rLL();
  LL b2 = rLL();
  LL c2 = rLL();
  LL r2 = rLL();

  vector<int> &Board1 = board[0];
  vector<int> &Board2 = board[1];

  Board1[0] = x1;
  Board2[0] = x2;
  FOR(i,1,max(N,M)-1) {
    if(i<N) Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
    if(i<M) Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
  }
}

int pos[2];
set<int> total[2], only[2];

bool Advance(int nr) {
  if(pos[nr]==size(board[nr])) return false;
  int x = board[nr][pos[nr]++];
  if(total[nr].count(x)) return true;
  total[nr].insert(x);
  if(total[nr^1].count(x)) {
    only[nr^1].erase(x);
  } else {
    only[nr].insert(x);
  }
  return true;
}

int Equals(int nr) {
  int res = 1;
  while(pos[nr] < size(board[nr])) {
    int x = board[nr][pos[nr]];
    if(!total[nr].count(x)) break;
    ++res;
    ++pos[nr];
  }
  return res;
}

LL Calc() {
  REP(i,2) {
    pos[i] = 0;
    total[i].clear();
    only[i].clear();
  }
  LL res = 0;
  for(;;) {
    if(!only[0].empty()) {
      if(!Advance(1)) goto done;
    } else if(!only[1].empty()) {
      if(!Advance(0)) goto done;
    } else {
      LL a = Equals(0);
      LL b = Equals(1);
      res += a*b;
      REP(i,2) if(!Advance(i)) goto done;
    }
  }
done:
  return res-1;
}

int main(int argc, char **argv) {
  int ntc = rint();
  FOR(tc,1,ntc) {
    ReadInput();
    if(argc==2 && tc!=atoi(argv[1])) continue;
    auto res = Calc();
    printf("Case #%d: %lld\n", tc, res);
  }
}


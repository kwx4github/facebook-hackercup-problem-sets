import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.HashSet;
import java.util.StringTokenizer;
import java.util.TreeMap;

public class Ar2 {

	private static BufferedReader in;
	private static PrintWriter out;
	private static StringTokenizer input;

	public static void main(String[] args) throws IOException {
		// -------------------------------------------------------------------------
		// Initializing...
		new Ar2();
		// -------------------------------------------------------------------------
		// put your code here... :)
		int test = nextInt();
		for (int cases = 1; cases <= test; cases++) {
			int n = nextInt();
			int m = nextInt();

			long x1 = nextLong();
			long a1 = nextLong();
			long b1 = nextLong();
			long c1 = nextLong();
			long r1 = nextLong();

			long x2 = nextLong();
			long a2 = nextLong();
			long b2 = nextLong();
			long c2 = nextLong();
			long r2 = nextLong();

			long[] B1 = new long[n];
			long[] B2 = new long[m];

			B1[0] = x1;
			B2[0] = x2;

			for (int i = 1; i < Math.max(n, m); i++) {
				if (i < n) {
					long temp1 = (a1 * B1[(i - 1) % n] + b1 * B2[(i - 1) % m] + c1)
							% r1;
					B1[i] = temp1;
				}

				if (i < m) {
					long temp2 = (a2 * B1[(i - 1) % n] + b2 * B2[(i - 1) % m] + c2)
							% r2;
					B2[i] = temp2;
				}
			}
			
			for (int i = 0; i < B2.length; i++) {
				B2[i]++;
			}
			for (int i = 0; i < B1.length; i++) {
				B1[i]++;
			}

			c current = new c(0, 1, 1);
			TreeMap<c, Integer> sets = new TreeMap<c, Integer>();
			HashSet<Long> mogood = new HashSet<Long>();

			for (int i = 0; i < B1.length; i++) {
				if (mogood.contains(B1[i])) {
					sets.put(current, sets.get(current) + 1);
					continue;
				}
				mogood.add(B1[i]);
				c nn = new c(current.a + B1[i],
						(current.b1 * B1[i]) % 735632797l,
						(current.b2 * B1[i]) % 941083981l);

				if (!sets.containsKey(nn))
					sets.put(nn, 0);
				sets.put(nn, sets.get(nn) + 1);
				current = nn;
			}

			long ret = 0;
			current = new c(0, 1, 1);
			mogood = new HashSet<Long>();

			for (int i = 0; i < B2.length; i++) {
				if (mogood.contains(B2[i])) {
					if (sets.containsKey(current))
					ret += sets.get(current);
					continue;
				}
				mogood.add(B2[i]);
				c nn = new c(current.a + B2[i],
						(current.b1 * B2[i]) % 735632797l,
						(current.b2 * B2[i]) % 941083981l);
				if (sets.containsKey(nn))
				ret += sets.get(nn);
				current = nn;
			}
			out.println("Case #" + cases + ": " + ret);
		}
		// -------------------------------------------------------------------------
		// closing up
		end();
		// --------------------------------------------------------------------------

	}

	public Ar2() throws IOException {
		// Input Output for Console to be used for trying the test samples of
		// the problem
		in = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter("Ar2.out");
		// -------------------------------------------------------------------------
		// Initalize Stringtokenizer input
		input = new StringTokenizer(in.readLine());
	}

	private static int nextInt() throws IOException {
		if (!input.hasMoreTokens())
			input = new StringTokenizer(in.readLine());
		return Integer.parseInt(input.nextToken());
	}

	private static long nextLong() throws IOException {
		if (!input.hasMoreTokens())
			input = new StringTokenizer(in.readLine());
		return Long.parseLong(input.nextToken());
	}

	private static double nextDouble() throws IOException {
		if (!input.hasMoreTokens())
			input = new StringTokenizer(in.readLine());
		return Double.parseDouble(input.nextToken());
	}

	private static String nextString() throws IOException {
		if (!input.hasMoreTokens())
			input = new StringTokenizer(in.readLine());
		return input.nextToken();
	}

	private static void write(String output) {
		out.write(output);
		out.flush();
	}

	private static void writeln(String output) {
		out.write(output + "\n");
		out.flush();
	}

	private static void end() throws IOException {
		in.close();
		out.close();
		System.exit(0);
	}

	static class c implements Comparable<c> {
		long a;
		long b1;
		long b2;

		public c(long a, long b1, long b2) {
			super();
			this.a = a;
			this.b1 = b1;
			this.b2 = b2;
		}

		public int compareTo(c o) {
			if (a == o.a)
				if (b1 == o.b1)
					if (b2 == o.b2)
						return 0;
					else if (b2 < o.b2)
						return -1;
					else
						return 1;
				else if (b1 < o.b1)
					return -1;
				else
					return 1;
			else if (a < o.a)
				return -1;
			else
				return 1;
		}

	}

}

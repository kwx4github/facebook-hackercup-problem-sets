#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <cstring>

#define MAX_N 1000005

using namespace std;

typedef long long lld;

int tests;
lld answer;
int n, m, j1, j2, enx, ens;
lld bo1[MAX_N], bo2[MAX_N];
lld x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
lld x[MAX_N], s[MAX_N];
set<lld> S1, S2;
set<lld>::iterator it;

int main() {
    cin >> tests;
    for (int test = 0 ; test < tests ; test ++) {
	cin >> n >> m;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	bo1[0] = x1;
	bo2[0] = x2;
	for (int i = 1 ; i < n or i < m ; i ++) {
	    bo1[i] = (a1 * bo1[(i - 1) % n] + b1 * bo2[(i - 1) % m] + c1) % r1;
	    bo2[i] = (a2 * bo1[(i - 1) % n] + b2 * bo2[(i - 1) % m] + c2) % r2;
	}
	/*printf("BOARD 1: \n");
	for (int i = 0 ; i < n ; i ++) {
	    printf("%d ", bo1[i]);
	}
	printf("\n________________\n");
	printf("BOARD 2: \n");
	for (int i = 0 ; i < m ; i ++) {
	    printf("%d ", bo2[i]);
	}
	printf("\n________________\n");*/
	S1.clear();
	S2.clear();
	answer = 0;
	enx = 0;
	ens = 0;
	j1 = -1;
	j2 = -1;
	for (int i = 0 ; i < n ; i ++) {
	    if (S2.find(bo1[i]) == S2.end()) {
		s[ens] = bo1[i];
		ens ++;
	    }
	    S1.insert(bo1[i]);
	    while (j1 < m) {
		while (ens > 0 and S2.find(s[ens - 1]) != S2.end()) {
		    ens --;
		}
		if (ens == 0) break;
		j1 ++;
		S2.insert(bo2[j1]);
	    }
	    //printf("I %d %d | %d | %d %d\n", i, j1, ens, (int)S1.size(), (int)S2.size());
	    if (j1 < m and ens == 0 and S1.size() == S2.size()) {
		/*if (j2 < j1) {
		    j2 = j1;
		    enx = 0;
		    }*/
		while (j2 < m) {
		    while (enx > 0 and S1.find(x[enx - 1]) != S1.end()) {
			enx --;
		    }
		    if (enx > 0) break;
		    j2 ++;
		    x[enx] = bo2[j2];
		    enx ++;
		}
	        //printf("XX %d %d\n", j1, j2);
		answer += (j2 - j1);
	    }
	}
	printf("Case #%d: %lld\n", test + 1, answer);
    }
    return 0;
}

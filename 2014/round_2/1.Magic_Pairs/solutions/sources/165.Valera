#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <cassert>
#include <ctime>

using namespace std;

#define sqr(a) ((a)*(a))
#define two(a) (1 << (a))
#define has(mask, a) ((mask) & two(a) ? 1 : 0)

int n, m, a[1000005], b[1000005];

void load() {
	cin >> n >> m;

	long long x1, a1, b1, c1, r1;
	long long x2, a2, b2, c2, r2;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;

	a[0] = x1;
	b[0] = x2;

	for (int i = 1;i < max (n, m);i++) {
		a[i] = (a1 * (a[(i - 1 + n) % n]) + b1 * b[(i - 1 + m) % m] + c1) % r1;
		b[i] = (a2 * (a[(i - 1 + n) % n]) + b2 * b[(i - 1 + m) % m] + c2) % r2; 	
	}
}

void solve(int test) {
	cerr << test << endl;
	set <int> sa, sb;
	sa.insert (a[0]);
	sb.insert (b[0]);

	int dif = 0;
	if (a[0] != b[0]) dif = 2;

	long long ans = 0;
	int i = 0, j = 0;

	while (i < n && j < m) {
		//cerr << i << " " << j << " " << dif << endl;
		//if (i % 10000 == 0) cerr << i << endl;
		if (dif == 0 && sa.size() == sb.size()) {
		 	int ni = i + 1, nj = j + 1;
		 	while (ni < n && sa.count (a[ni]) > 0) ni++;
		 	while (nj < m && sb.count (b[nj]) > 0) nj++;

		 	ans += (ni - i) * 1ll * (nj - j);
		 	i = ni;
		 	j = nj;
		 	if (a[i] != b[j]) {
		 		if (sb.count (a[i]) == 0) dif++;
		 		if (sa.count (b[j]) == 0) dif++;
		 	}
		 	sa.insert (a[i]);
		 	sb.insert (b[j]);
		 	continue;
		}

		if (sa.size() < sb.size()) {
			i++;
			if (i == n) break;
			if (!sa.count (a[i])) {
				dif += (sb.count (a[i]) ? -1 : 1);
				sa.insert (a[i]);
		 	}
		 	continue;	
		} else {
			j++;
			if (j == m) break;
		 	if (!sb.count (b[j])) {
		 	 	dif += (sa.count (b[j]) ? -1 : 1);
		 	 	sb.insert (b[j]);
		 	}
		 	continue;
		}
	}

	printf ("Case #%d: %lld\n", test, ans);
}

int main() {
 	freopen ("a.in", "r", stdin);
 	freopen ("a.out", "w", stdout);

 	int t;
 	scanf ("%d\n", &t);

 	for (int i = 1;i <= t;i++) {
 		load();
 		solve(i);
 	}

 	return 0;
}
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <set>
using namespace std;

long long board1[1000001];
long long board2[1000001];

int main () {
    ifstream fin("magic_pairs.txt");
    ofstream fout("magic_pairs_output.txt");
    int T;
    fin >> T;
    for (int tnum = 1; tnum <= T; tnum++) {
        //cout << "Here " <<endl;
        long long magic = 0;
        int N, M;
        long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
        fin >> N >> M;
        fin >> x1 >> a1 >> b1 >> c1 >> r1;
        fin >> x2 >> a2 >> b2 >> c2 >> r2;
        board1[0] = x1;
        //cout << x1 << ' ' << board1[0] << endl;
        board2[0] = x2;
        for (int i = 1; (i < M) || (i < N); i++) {
            if (i < N) {
                board1[i] = (a1*board1[i-1] + b1*board2[(i-1)%M] + c1)%r1;
                //cout << board1[i] << endl;
            }
            if (i < M)
                board2[i] = (a2*board1[(i-1)%N] + b2*board2[i-1] + c2)%r2;
        }
        /*cout << N <<' ' << M << ' ' << r1 << ' ' << r2 << ' ' << endl;
        for (int i = 0; i < N; i++)
            cout << board1[i] << ' ';
        cout << endl;
        for (int j = 0; j < M; j++)
            cout << board2[j] << ' ';
        cout << endl;*/
        
        set<long long> set1, set2;
        int numin1 = 1, numin2 = 1, overlap = 0;
        int curr1 = 1, curr2 = 1;
        set1.insert(x1);
        set2.insert(x2);
        if (x1 == x2)
            overlap++;
        while (true) {
            //cout << "Trying " << curr1 << ' ' << curr2 << ' ' << numin1 << ' ' << numin2 << endl;
            if (numin1 < numin2) {
                if (curr1 >= N)
                    break;
                if (set1.find(board1[curr1]) == set1.end()) {
                    set1.insert(board1[curr1]);
                    numin1++;
                    if (set2.find(board1[curr1]) != set2.end()) {
                        overlap++;
                    }
                }
                curr1++;
            }
            else if (numin1 > numin2) {
                if (curr2 >= M)
                    break;
                if (set2.find(board2[curr2]) == set2.end()) {
                    set2.insert(board2[curr2]);
                    numin2++;
                    if (set1.find(board2[curr2]) != set1.end()) {
                        overlap++;
                    }
                }
                curr2++;

            }
            else {
                if (overlap == numin1) {
                    //cout << curr1 << ' ' << curr2 << endl;
                    long long mag1 = 1, mag2 = 1;
                    while ((curr1 < N) && (set1.find(board1[curr1]) != set1.end())){
                        mag1++;
                        curr1++;
                    }
                    while ((curr2 < M) && (set2.find(board2[curr2]) != set2.end())){
                        mag2++;
                        curr2++;
                    }
                    magic += mag1 * mag2;
                    if (curr1 < N) {
                        set1.insert(board1[curr1]);
                        numin1++;
                        if (set2.find(board1[curr1]) != set2.end()) {
                            overlap++;
                        }
                        curr1++;
                    }
                    else
                        break;
                }
                else {
                    if (curr1 >= N)
                        break;
                    if (set1.find(board1[curr1]) == set1.end()) {
                        set1.insert(board1[curr1]);
                        numin1++;
                        if (set2.find(board1[curr1]) != set2.end()) {
                            overlap++;
                        }
                    }
                    curr1++;
                }
                
            }
        }
        fout << "Case #" << tnum << ": " << magic << endl;
    }
    return 0;
}
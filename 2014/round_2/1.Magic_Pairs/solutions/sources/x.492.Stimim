#include <iostream>
#include <vector>
#include <map>
#include <set>
using namespace std;

void gen(vector<int>& board, int x1, int a1, int b1, int c1, int r1, int N) {
}
int main(int argc, char* argv[]) {
  int T;
  cin >> T;

  for (int t = 1; t <= T; ++ t) {
    int N, M;
    cin >> N >> M;

    int x1, a1, b1, c1, r1;
    int x2, a2, b2, c2, r2;

    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;


    vector<int> board1(N);
    vector<int> board2(M);

    board1[0] = x1;
    board2[0] = x2;

    for (int i = 1; i < max(N, M); ++ i) {
      if (i < N) {
        board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1;
      }
      if (i < M) {
        board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2;
      }
    }

    map<int, int> mapping;

    for (int i = 0, j = -1; i < N; ++ i) {
      if (mapping.find(board1[i]) == mapping.end()) {
        mapping[board1[i]] = ++ j;
      }
      board1[i] = j;
    }

#if defined(DEBUG)
    cout << "board1: ";
    for (auto v : board1) {
      cout << v << ' ';
    }
    cout << endl;
#endif

    for (int i = 0; i < M; ++ i) {
      auto it = mapping.find(board2[i]);
      if (it != mapping.end()) {
        board2[i] = it->second;
      } else {
        board2[i] = -1;
        M = i;
        board2.resize(M);
        break;
      }
    }

#if defined(DEBUG)
    cout << "board2: ";
    for (auto v : board2) {
      cout << v << ' ';
    }
    cout << endl;
#endif

    long long ans = 0;
    {
      set<int> set2;
      set2.clear();
      int max_set2 = -1;

      long long delta_i = 0;
      long long delta_j = 0;
      int i = -1; int j = -1;

      while (true) {
        delta_i = 1;
        ++ i;
        while (i < N - 1 && board1[i] == board1[i + 1]) {
          i ++;
          delta_i ++;
        }

        if (i == N) {
          break;
        }

        // count pair(x, y) such that set is (0, 1, ..., board1[i])
        // and we know that set2 already contains (0, ..., board1[i] - 1)
        if (set2.find(board1[i]) == set2.end()) {
          delta_j = 0;
          bool found = false;
          while (++ j < M) {
            if (board2[j] == board1[i]) {
              set2.insert(board2[j]);
              max_set2 = max(max_set2, board2[j]);
              found = true;
            } else if (set2.find(board2[j]) == set2.end()) {
              if (found) {
                break;
              } else {
                set2.insert(board2[j]);
                max_set2 = max(max_set2, board2[j]);
              }
            }
            if (found) {
              delta_j ++;
            }
          }
          -- j;

          if (!found) {
            break;
          }
        }

#if defined(DEBUG)
         cout << "i, j, di, dj: " << i << ' ' << j << ' ' << delta_i << ' ' << delta_j << ' ' << max_set2<< endl;
#endif

        if (max_set2 == board1[i]) {
          ans += delta_i * delta_j;
        }
      }
    }

    cout << "Case #" << t << ": " << ans << endl;
  }
  return 0;
}


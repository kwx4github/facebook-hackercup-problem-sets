import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Locale;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("magicpairs.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		MagicPairs solver = new MagicPairs();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class MagicPairs {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int n = in.nextInt();
        int m = in.nextInt();
        long x1 = in.nextLong();
        long a1 = in.nextLong();
        long b1 = in.nextLong();
        long c1 = in.nextLong();
        long r1 = in.nextLong();
        long x2 = in.nextLong();
        long a2 = in.nextLong();
        long b2 = in.nextLong();
        long c2 = in.nextLong();
        long r2 = in.nextLong();
        int[] Board1 = new int[n];
        int[] Board2 = new int[m];
        Arrays.fill(Board1, -1);
        Arrays.fill(Board2, -1);
        Board1[0] = (int) x1;
        Board2[0] = (int) x2;
        for (int i = 1; i < Math.max(n, m); ++i) {
            if (i < n)
                Board1[i] = (int) ((a1 * Board1[(i-1) % n] + b1 * Board2[(i-1) % m] + c1) % r1);
            if (i < m)
                Board2[i] = (int) ((a2 * Board1[(i-1) % n] + b2 * Board2[(i-1) % m] + c2) % r2);
        }
        int[] all = new int[n + m];
        System.arraycopy(Board1, 0, all, 0, n);
        System.arraycopy(Board2, 0, all, n, m);
        Arrays.sort(all);
        int cnt = 0;
        for (int i = 0; i < all.length; ++i) {
            if (i == 0 || all[i] != all[i - 1])
                all[cnt++] = all[i];
        }
        all = Arrays.copyOf(all, cnt);
        for (int i = 0; i < Board1.length; ++i) {
            Board1[i] = Arrays.binarySearch(all, Board1[i]);
        }
        for (int i = 0; i < Board2.length; ++i) {
            Board2[i] = Arrays.binarySearch(all, Board2[i]);
        }
        int[] mask = new int[cnt];
        int[] am = new int[4];
        am[0] = cnt;
        int p1 = 0;
        int p2 = 0;
        long res = 0;
        outer: while (p1 < Board1.length && p2 < Board2.length) {
            {
                int v1 = Board1[p1++];
                --am[mask[v1]];
                mask[v1] |= 1;
                ++am[mask[v1]];
            }
            {
                int v2 = Board2[p2++];
                --am[mask[v2]];
                mask[v2] |= 2;
                ++am[mask[v2]];
            }
            while (am[1] > 0 || am[2] > 0) {
                if (am[2] > 0) {
                    if (p1 >= Board1.length) break outer;
                    {
                        int v1 = Board1[p1++];
                        --am[mask[v1]];
                        mask[v1] |= 1;
                        ++am[mask[v1]];
                    }
                } else {
                    if (p2 >= Board2.length) break outer;
                    {
                        int v2 = Board2[p2++];
                        --am[mask[v2]];
                        mask[v2] |= 2;
                        ++am[mask[v2]];
                    }
                }
            }
            int q1 = p1;
            int q2 = p2;
            while (q1 < Board1.length && mask[Board1[q1]] == 3)
                ++q1;
            while (q2 < Board2.length && mask[Board2[q2]] == 3)
                ++q2;
            res += (q1 - p1 + 1) * (long) (q2 - p2 + 1);
            p1 = q1;
            p2 = q2;
        }
        out.println("Case #" + testNumber + ": " + res);
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

    }


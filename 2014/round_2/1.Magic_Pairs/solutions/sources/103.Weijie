#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <iostream>
#include <algorithm>
#include <bitset>
using namespace std;
#define rep(i,n) for (int i = 0; i < (int)(n); i++)
#define foreach(it,v) for (__typeof((v).end()) it = (v).begin(); it != (v).end(); it++)
typedef long long ll;
const int N = 1000005;
int n, m;
int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
int va[N], vb[N];

int main() {
//	freopen("in", "r", stdin);
	int Tc;
	cin >> Tc;
	rep (ri, Tc) {
		printf("Case #%d: ", ri + 1);
		scanf("%d%d", &n, &m);
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		va[0] = x1;
		vb[0] = x2;
		rep (i, max(n, m) - 1) {
			if (i + 1 < n) {
				va[i + 1] = (a1 * (ll)va[i % n] + b1 * (ll)vb[i % m] + c1) % r1;
			}
			if (i + 1 < m) {
				vb[i + 1] = (a2 * (ll)va[i % n] + b2 * (ll)vb[i % m] + c2) % r2;
			}
		}
//		puts("done");
//		cout << endl;
//		rep (i, n) cout << va[i] << " ";
//		cout << endl;
//		rep (i, m) cout << vb[i] << " ";
//		cout << endl;
		set <int> s, sa;
		map <int, int> ref;
		s.clear();
		rep (j, m) {
			s.insert(vb[j]);
			ref[s.size()]++;
		}
		s.clear();
		int j = 0;
		ll ans = 0;
		rep (i, n) {
			sa.insert(va[i]);
			while (j < m && !s.count(va[i])) {
				s.insert(vb[j++]);
			}
			if (!s.count(va[i])) break;
			if (s.count(va[i]) && s.size() == sa.size()) {
				ans += ref[s.size()];
				if (ref[s.size()]) {
				//	cout << "add " << i << " " << ref[s.size()] << " " << j << endl;
				}
			}
		}
		cout << ans << endl;
	}
	return 0;
}

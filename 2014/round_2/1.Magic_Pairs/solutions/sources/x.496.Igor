#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <sstream>
#include <vector>
#include <ctime>
#include <stack>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<ll> VI;
typedef vector< vector<ll> > VVI;
typedef pair<ll, ll> PII;
typedef vector<PII> VPII;

#define REP(i, n) for(int i = 0; i < n; ++i)
#define RREP(i, n) for(int i = n - 1; i >= 0; --i)
#define FOR(i, x, y) for(int i = x; i <= y; ++i)
#define RFOR(i, x, y) for(int i = x; i >= y; --i)
#define SZ(a) (ll)(a).size()
#define ALL(a) (a).begin(),(a).end()
#define SORT(a) sort(ALL(a)) 
#define CLEAR(x) memset(x,0,sizeof x);
#define COPY(FROM, TO) memcpy(TO, FROM, sizeof TO);
#define UNIQUE(c) SORT(c),(c).resize(unique(ALL(c))-(c).begin())
#define pb push_back
#define sqr(x) (x)*(x)
#define X first
#define Y second
#define y1 Y1
#define y2 Y2
const long double pi=acos(-1.0);
const long double eps = 1e-9;
const int MAXN = 2000001;

ll board1[MAXN];
ll board2[MAXN];
ll n, m, x1, x2, a1, a2, b1, b2, c1, c2;
ll r1, r2;
ll ans;

int main()
{   
    freopen("input.txt", "r", stdin);
   // freopen("output.txt", "w", stdout);
    int tests;
    cin >> tests;
    FOR(t, 1, tests)
    {
    	CLEAR(board1);
    	CLEAR(board2);
    	set<int> added1, added2;
    	set<int> q1, q2;
    	ans = 0;
	
    	cin >> n >> m;
    	cin >> x1 >> a1 >> b1 >> c1 >> r1;
    	cin >> x2 >> a2 >> b2 >> c2 >> r2;
    	
		board1[0] = x1;
		board2[0] = x2;
		
		FOR(i, 1, max(n, m) - 1)
		{
			if (i < n) board1[i] = (a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
			if (i < m) board2[i] = (a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;			
		}
		// REP(i, n) cout << board1[i] << " "; cout << endl;
		// REP(i, m) cout << board2[i] << " "; cout << endl;
		int p1 = 0;
		int p2 = 0;
		
		q1.insert(board1[0]); added1.insert(board1[0]); 
		q2.insert(board2[0]); added2.insert(board2[0]);
		int ops = 0;
		while (p1 < n && p2 < m)
		{
			++ops;
			if (ops >= 2 * n + 2 * m) break; 
			while (q1.size() && q2.size() && *q1.begin() == *q2.begin())
			{
				q1.erase(q1.begin());
				q2.erase(q2.begin());
			}
			if (p1 + 1 == n && p2 + 1 == m && q1.size() + q2.size()) continue;
			// cout << p1 << " " << p2 << " " << q1.size() << " " << q2.size() << endl;				
			
			if (q1.size() == 0 && q2.size() == 0)
			{
				int pn1 = p1;
				while (pn1 + 1 < n && added1.find(board1[pn1 + 1]) != added1.end()) ++pn1;
				
				int pn2 = p2;
				while (pn2 + 1 < m && added2.find(board2[pn2 + 1]) != added2.end()) ++pn2;
				
				ans += (pn2 - p2 + 1) * (pn1 - p1 + 1);
				p1 = pn1 + 1;
				if (p1 < n)
				{
					if (added1.find(board1[p1]) == added1.end()) q1.insert(board1[p1]);
					added1.insert(board1[p1]);
				}
				
				p2 = pn2 + 1;
				if (p2 < m)
				{
					if (added2.find(board2[p2]) == added2.end()) q2.insert(board2[p2]);
					added2.insert(board2[p2]);
				}
			}
			// cout << "A:" << p1 << " " << p2 << " " << q1.size() << " " << q2.size() << " " << ans << endl;				
			if (q1.size() + q2.size() == 0) continue; 
			if (p1 + 1 == n && p2 + 1 == m) continue; 
			
			if (q1.size() == 0 && q2.size() != 0 && p1 + 1 >= n) break;
			if (q2.size() == 0 && q1.size() != 0 && p2 + 1 >= n) break;
			if (q1.size() && q2.size() && *q1.begin() < *q2.begin() && p2 + 1 >= m) break;
			if (q1.size() && q2.size() && *q2.begin() < *q1.begin() && p1 + 1 >= n) break;
			
			if (q1.size() && q2.size() && *q1.begin() < *q2.begin() || q2.size() == 0)
			{
				++p2;
				if (added2.find(board2[p2]) == added2.end()) q2.insert(board2[p2]);
				added2.insert(board2[p2]);				
			}
			else if (q1.size() && q2.size() && *q2.begin() < *q1.begin() || q1.size() == 0)
			{
				++p1;
				if (added1.find(board1[p1]) == added1.end()) q1.insert(board1[p1]);
				added1.insert(board1[p1]);
			}
			else break;
		}
		
    	printf("Case #%d: ", t);
    	cout << ans << endl;
    }
    

    
}

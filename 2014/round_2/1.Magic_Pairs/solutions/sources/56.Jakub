#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(it, (x)) cerr <<*it <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;
template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<typename T1, typename T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { out << "(" << pair.X << ", " << pair.Y << ")"; return out; }

const int N = 1000005;
const int INF = 1000000005;

int ttn[N], ttm[N];

void doit() {
    int n, m; scanf("%d %d", &n, &m);
    int x1, a1, b1, c1, r1; scanf("%d %d %d %d %d", &x1, &a1, &b1, &c1, &r1);
    int x2, a2, b2, c2, r2; scanf("%d %d %d %d %d", &x2, &a2, &b2, &c2, &r2);

    ttn[0] = x1;
    ttm[0] = x2;
    FOR(i, 1, max(n, m)-1) {
        ttn[i] = ((LL)a1 * ttn[(i-1)%n] + (LL)b1 * ttm[(i-1)%m] + c1) % r1;
        ttm[i] = ((LL)a2 * ttn[(i-1)%n] + (LL)b2 * ttm[(i-1)%m] + c2) % r2;
    }
    ttn[n] = INF; ++n;
    ttm[m] = INF; ++m;

//    printf("%d %d %d %d %d %d %d %d %d %d\n", x1, a1, b1, c1, r1, x2, a2, b2, c2, r2);
/*
    REP(i, n) printf("%d ", ttn[i]);
    printf("\n");
    REP(i, m) printf("%d ", ttm[i]);
    printf("\n");
*/

    set<int> set1, set2, setBoth;
    int p = 0, q = 0, pc, qc;
    bool same = false;
    LL res = 0;
    while ((p < n) && (q < m)) {
/*
        FORE(it, set1) {
            printf("%d, ", *it);
        }
        printf("\n");

        FORE(it, set2) {
            printf("%d, ", *it);
        }
        printf("\n");
        
        FORE(it, setBoth) {
            printf("%d, ", *it);
        }
        printf("\n");
        printf("=====\n");
*/        
        pc = 0; qc = 0;
        while ((p < n) && (set1.size() == set2.size())) {
            ++pc;
            int val = ttn[p++];
//            printf("p %d %d\n", p-1, val);
            if ((set1.find(val) != set1.end()) || (setBoth.find(val) != setBoth.end())) continue;
            if (set2.find(val) != set2.end()) {
                set2.erase(val);
                setBoth.insert(val);   
            } else {
                set1.insert(val);
            }
        }
        while ((q < m) && (set1.size() != set2.size())) {
            ++qc;
            int val = ttm[q++];
//            printf("q %d %d\n", q-1, val);
            if ((set2.find(val) != set2.end()) || (setBoth.find(val) != setBoth.end())) continue;
            if (set1.find(val) != set1.end()) {
                set1.erase(val);
                setBoth.insert(val);
            } else {
                set2.insert(val);
            }
        }
//        printf("same - %d %d %d\n", same, pc, qc);
        if (same) {
            res += (LL)pc * qc;
        }
        same = set1.empty() && set2.empty();
    }

    printf("%lld\n", res);
}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);

    int ttt; scanf("%d", &ttt);
    REP(i, ttt) {
        printf("Case #%d: ", i+1);
        doit();
    }

    return 0;
}

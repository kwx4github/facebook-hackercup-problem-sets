#include <iostream>
#include <ctime>
#include <cassert>
#include <cmath>
#include <string>
#include <cstring>
#include <vector>
#include <fstream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <iomanip>
#define nextLine() { for (int c = getchar(); c != '\n' && c != EOF; c = getchar()); }
#define sqr(a) ((a)*(a))
#define has(mask,i) (((mask) & (1<<(i))) == 0 ? false : true)
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
using namespace std;

#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define fi first
#define se second

#if ( _WIN32 || __WIN32__ )
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

typedef long long LL;
typedef long double ldb;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <bool> vb;
typedef vector <vb> vvb;

const int INF = (1 << 30) - 1;
const ldb EPS = 1e-9;
const ldb PI = fabs(atan2(0.0, -1.0));
const int MAXN = 1111111;

int n, m;
int x1, a1, b1, c1, r1;
int x2, a2, b2, c2, r2;
void load() {
	scanf("%d%d", &n, &m);
	scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
	scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
}

int a[MAXN];
int b[MAXN];
void solve(int test) {
	a[0] = x1; b[0] = x2;
	for (int i = 1; i < MAXN; i++) {
		a[i] = (a1 * 1LL * a[(i - 1) % n] + b1 * 1LL * b[(i - 1) % m] + c1) % r1;
		b[i] = (a2 * 1LL * a[(i - 1) % n] + b2 * 1LL * b[(i - 1) % m] + c2) % r2;
	}
	set <int> cA;
	set <int> cB;
	int lf = 0;
	int rg = 0;
	LL answer = 0;
	bool ok = true;
	for (int i = 0; i < n; i++) {
		if (cA.count(a[i]) && ok) {
			answer += rg - lf;
		} else {
			cA.insert(a[i]);
			lf = rg;
			while (lf < m && cB.size() != cA.size()) {
				if (cA.count(b[lf])) {
					cB.insert(b[lf]);
					if (cA.size() == cB.size()) {
						break;
					}
					lf++;
				} else {
					break;
				}
			}
			rg = lf;
			if (lf < m && cB.size() == cA.size()) {
				ok = true;
				rg = lf;
				while (rg < m && cA.count(b[rg])) {
					rg++;
				}
				answer += rg - lf;
			} else {
				ok = false;
			}
		}
	}
	printf("Case #%d: "LLD"\n", test, answer);
}

int main() {
	clock_t start = clock();
	int tests;
	scanf("%d", &tests);
	for (int test = 1; test <= tests; test++) {
		clock_t cur = clock();
		load();
		solve(test);
		eprintf("test %d in %.3lf\n", test, (clock() - cur + 0.0) / CLOCKS_PER_SEC);
	}	
	eprintf("total time: %.3lf\n", (clock() - start + 0.0) / CLOCKS_PER_SEC);
	return 0;
}

#include <bits/stdc++.h>
#include <fcntl.h>
#include <unistd.h>

using namespace std;

/*** START OF TEMPLATE CODE ***/

typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<double> pnt;
typedef pair<int, int> pii;

#define RA(x) begin(x), end(x)
#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)
#define SZ(x) ((int) (x).size())

template<class T>
vector<T> splitstr(const string &s)
{
    istringstream in(s);
    vector<T> out;
    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));
    return out;
}

template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }

static void redirect(int argc, const char **argv)
{
    ios::sync_with_stdio(false);

    if (argc > 1)
    {
        int fd = open(argv[1], O_RDONLY);
        if (fd == -1) { perror(argv[1]); exit(1); }
        if (-1 == dup2(fd, 0)) { perror(argv[1]); exit(1); }
        if (-1 == close(fd)) { perror(argv[1]); exit(1); }
    }

    if (argc > 2)
    {
        int fd = open(argv[2], O_WRONLY | O_CREAT, 0666);
        if (fd == -1) { perror(argv[2]); exit(1); }
        if (-1 == dup2(fd, 1)) { perror(argv[2]); exit(1); }
        if (-1 == close(fd)) { perror(argv[2]); exit(1); }
    }

    cin.exceptions(ios::failbit | ios::badbit);
}

/*** END OF TEMPLATE CODE ***/

int main(int argc, const char **argv)
{
    redirect(argc, argv);

    int cases;
    cin >> cases;
    for (int cas = 0; cas < cases; cas++)
    {
        int N[2];
        ll a[2], b[2], c[2], r[2];
        vector<int> boards[2];
        cin >> N[0] >> N[1];
        for (int i = 0; i < 2; i++)
        {
            boards[i].resize(N[i]);
            cin >> boards[i][0] >> a[i] >> b[i] >> c[i] >> r[i];
        }
        for (int i = 1; i < max(N[0], N[1]); i++)
            for (int j = 0; j < 2; j++)
                if (i < N[j])
                {
                    boards[j][i] = (a[j] * boards[0][(i - 1) % N[0]]
                                    + b[j] * boards[1][(i - 1) % N[1]]
                                    + c[j]) % r[j];
                }

        unordered_set<int> sets[2];
        int p[2] = {0, 0};
        ll ans = 0;
        while (p[0] < N[0] && p[1] < N[1])
        {
            int q[2];
            int a = boards[0][p[0]];
            sets[0].insert(a);

            if (!sets[1].count(a))
            {
                while (p[1] < N[1])
                {
                    int b = boards[1][p[1]];
                    sets[1].insert(b);
                    if (b == a)
                        break;
                    p[1]++;
                }
            }

            bool match = (sets[0].size() == sets[1].size());
            for (int i = 0; i < (match ? 2 : 1); i++)
            {
                q[i] = p[i] + 1;
                while (q[i] < N[i] && sets[i].count(boards[i][q[i]]))
                    q[i]++;
            }

            if (match)
            {
                ans += ll(q[1] - p[1]) * ll(q[0] - p[0]);
                p[1] = q[1];
            }
            p[0] = q[0];
        }

        cout << "Case #" << cas + 1 << ": " << ans << "\n";
    }
    return 0;
}

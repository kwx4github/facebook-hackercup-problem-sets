//
// Facebook hacker cup 2014 - round 2 - the one for the T shirt
// John Smith's attempt
// problem 1:
//
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <algorithm>
//#include <gmpxx.h>

using namespace std;
typedef pair<unsigned int,unsigned int> pii;

//typedef mpz_class bigint;
//typedef uint64_t bigint;

//bigint mod = 1000000007;

uint32_t n;
uint32_t m;
uint64_t x1, a1, b1, c1, r1;
uint64_t x2, a2, b2, c2, r2;

static bool is_in( const set<unsigned int> &s, unsigned int x )
{
     return (s.find(x) != s.end());
}

uint64_t solve( void )
{
     vector<unsigned int> bd1(n);
     vector<unsigned int> bd2(m);

     bd1.at(0) = x1;
     bd2.at(0) = x2;

     unsigned int mx = max(n,m);
     unsigned int i;
     unsigned int j;

     for (i=1; i<mx; i++)
     {
	  if (i<n)
	  bd1[i] = (a1 * bd1[(i+n-1)%n] + b1 * bd2[(i+m-1)%m] + c1) % r1;

	  if (i<m)
	  bd2[i] = (a2 * bd1[(i+n-1)%n] + b2 * bd2[(i+m-1)%m] + c2) % r2;
     }

     if (0)
     {
	  for (auto x : bd1) cout << x <<" "; cout << endl;
	  for (auto x : bd2) cout << x <<" "; cout << endl;
     }

     set<unsigned int> both;
     set<unsigned int> s1;
     set<unsigned int> s2;
     uint64_t total = 0;

     i=0;
     j=0;

     uint64_t i0, i1, j0, j1;

     i0 = i1 = j0 = j1 = 0;

     bool matching = false;
     bool update_i;
     while (i < n || j < m)
     {
	  //cout << "s1.size() = " << s1.size() << endl;
	  //cout << "s2.size() = " << s2.size() << endl;

	  if (i < n && s1.size() <= s2.size())
	  {
	       unsigned int x = bd1.at(i);
	       if (is_in(both,x))
	       {
	       }
	       else if (is_in(s1,x))
	       {
	       }
	       else if (is_in(s2,x))
	       {
		    s2.erase(x);
		    both.insert(x);
	       }
	       else
	       {
		    s1.insert(x);
	       }
	       update_i = true;
	  }
	  else if (j<m)
	  {
	       unsigned int x = bd2.at(j);
	       if (is_in(both,x))
	       {
	       }
	       else if (is_in(s2,x))
	       {
	       }
	       else if (is_in(s1,x))
	       {
		    s1.erase(x);
		    both.insert(x);
	       }
	       else
	       {
		    s2.insert(x);
	       }
	       update_i = false;
	  }
	  else
	  {
	       break;
	  }

	  if (s1.size() == 0 && s2.size() == 0)
	  {
	       if (matching)
	       {
		    i1 = i;
		    j1 = j;
	       }
	       else
	       {
		    i0 = i;
		    j0 = j;
		    i1 = i;
		    j1 = j;
	       }
	       matching = true;
	  }
	  else
	  {
	       if (matching)
	       {
		    //cout<< i0 << "," << i1 << "   " << j0 << "," << j1 << endl;
		    total += (uint64_t) (i1-i0+1) * (uint64_t) (j1-j0+1);
		    matching = false;
	       }	       
	  }

	  if (update_i)
	       i++;
	  else
	       j++;
     }

     if (matching)
     {
	  //cout << i1-i0+1 << " " << j1-j0+1 << endl;
	  total += (uint64_t) (i1-i0+1) * (uint64_t) (j1-j0+1);
     }
	  
     return total;
}

int main( int argc, char ** argv )
{
     int t;


     cin >> t;

     for (auto i=1; i<=t; i++)
     {
	  cin >> n >> m ;
	  cin >> x1 >> a1 >> b1 >> c1 >> r1 ;
	  cin >> x2 >> a2 >> b2 >> c2 >> r2 ;

	  auto a = solve();

	  cout << "Case #" << i << ": ";
	  cout << a << endl;
     }

     return 0;
}


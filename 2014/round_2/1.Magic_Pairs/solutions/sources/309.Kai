#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#include <vector>
#include <utility>
#include <set>
#include <map>
#include <queue>
#include <functional>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
using namespace std;

template<typename T>inline string to_str(const T& v) {
  ostringstream os; os << v; return os.str();
}
template<typename T>inline T to_obj(const string& v) {
  istringstream is(v); T r; is>>r; return r;
}
template<class T>inline int cMin(T& a, T b) {return b<a ? a=b,1 : 0;}
template<class T>inline int cMax(T& a, T b) {return a<b ? a=b,1 : 0;}

#define CLR(A,v) memset(A, v, sizeof(A))
#define MP(a,b)  make_pair(a, b)
#define F0(i, n) for(int i=0; i<(n); ++i)
#define F1(i, n) for(int i=1; i<=(n); ++i)


const int NN = 1000000 + 8;
int  N, M;
int  X1, A1, B1, C1, R1;
int  X2, A2, B2, C2, R2;

int  Board[2][NN];

typedef long long i64;

int  G[NN*2], Gn;
int  W[2][NN], Wn[2];
bool  Tag[2][NN*2];
int   Num[2];
int   All[NN*2];

int get_idx(int v) {
  int lo=-1, hi=Gn, mi;
  while(lo+1 < hi) {
    mi = lo + ((hi - lo)>>1);
    if(G[mi] < v) lo = mi;
    else hi = mi;
  }
  // printf("v=%d  hi=%d\n", v, hi);
  return hi;
}

i64 calc() {

  // F0(i, N) printf(" %d", Board[0][i]);
  // putchar('\n');
  // F0(i, M) printf(" %d", Board[1][i]);
  // putchar('\n');

  
  Gn = 0;
  F0(i, N) G[Gn++] = Board[0][i];
  F0(i, M) G[Gn++] = Board[1][i];
  sort(G, G+Gn);
  Gn = unique(G, G+Gn) - G;
  F0(i, N) W[0][i] = get_idx(Board[0][i]);
  F0(i, M) W[1][i] = get_idx(Board[1][i]);
  Wn[0] = N;
  Wn[1] = M;
  // F0(i, 2) {
  //   F0(j, Wn[i]) printf(" %d", W[i][j]);
  //   putchar('\n');
  // }
  memset(All, 0, sizeof(int)*Gn + 16);
  memset(Tag, false, sizeof(Tag));
  memset(Num, 0, sizeof(Num));
  int idx[2] = {0, 0};
  int Cnt[2] = {0, 0};
  int One=0, Two=0;
  i64 ans = 0;
  while(idx[0] < Wn[0] || idx[1] < Wn[1]) {
      F0(k, 2) {
        int  n = Wn[k];
        int& i = idx[k];
        int* A = W[k];
        bool* tag = Tag[k];
        if(i >= n) continue;
        tag[ A[i] ] = true;
        int& tmp = All[A[i]];
        ++tmp;
        if(tmp == 2) {
          --One;
          ++Two;
        }
        else if(tmp == 1) {
          ++One;
        }
        ++Num[k];
        Cnt[k] = 1;
        ++i;
        while(i<n && tag[ A[i] ]) {
          ++i; ++Cnt[k];
        }
        // printf("k=%d  i=%d  Cnt=%d  One=%d  Two=%d  Num=%d\n",
        //        k, i, Cnt[k], One, Two, Num[k]);
      }
      if(Num[0] == Num[1] && One==0) {
        ans += Cnt[0] * 1LL * Cnt[1];
      }
  }
  return ans;
}

int main(int argc, char *argv[]) {
  int T;
  scanf("%d", &T);
  F1(iT, T) {
    scanf("%d%d", &N, &M);
    scanf("%d%d%d%d%d", &X1, &A1, &B1, &C1, &R1);
    scanf("%d%d%d%d%d", &X2, &A2, &B2, &C2, &R2);
    Board[0][0] = X1;
    Board[1][0] = X2;
    for(int i=1; i<N || i<M; ++i) {
      if(i < N) {
        Board[0][i] = (A1 * 1LL * Board[0][i-1] + B1 * 1LL * Board[1][(i-1)%M] + C1) % R1;
      }
      if(i < M) {
        Board[1][i] = (A2 * 1LL * Board[0][(i-1)%N] + B2 * 1LL * Board[1][i-1] + C2) % R2;
      }
    }
    printf("Case #%d: %lld\n", iT, calc());
  }
  return 0;
}

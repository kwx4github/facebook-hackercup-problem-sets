#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <iostream>
#include <sstream>
using namespace std;

const int max_n = 1000000;
int board1[max_n+1];
int board2[max_n+1];

unsigned int mask1[32000000];
unsigned int mask2[32000000];

int main()
{
  int T;
  cin >> T;
  for (int tt=1; tt<=T; tt++) {
    int N, M;
    cin >> N >> M;
    int x1, a1, b1, c1, r1;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    int x2, a2, b2, c2, r2;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    board1[0] = x1;
    board2[0] = x2;
    for (int i=0; i<32000000; i++) mask1[i] = mask2[i] = 0;
    for (int i=1; i<max(N, M); i++) {
      if (i<N) board1[i] = (a1 * (long long)board1[(i-1)%N] + b1 * (long long)board2[(i-1)%M] + c1) % r1;
      if (i<M) board2[i] = (a2 * (long long)board1[(i-1)%N] + b2 * (long long)board2[(i-1)%M] + c2) % r2;
    }

    int idx1 = 0, idx2 = 0;
    long long res = 0;
    int diff = 0;
    while (idx1 < N && idx2 < M) {
      if ((mask2[board1[idx1]/32] >> (board1[idx1]%32))&1) diff --; else diff ++;
      mask1[board1[idx1]/32] |= 1u << (board1[idx1]%32);
      if ((mask1[board2[idx2]/32] >> (board2[idx2]%32))&1) diff --; else diff ++;
      mask2[board2[idx2]/32] |= 1u << (board2[idx2]%32);
      int l1 = idx1 + 1, l2 = idx2 + 1;
      while (l1 < N && ((mask1[board1[l1]/32]>>(board1[l1]%32))&1)) l1 ++;
      while (l2 < M && ((mask2[board2[l2]/32]>>(board2[l2]%32))&1)) l2 ++;
      if (diff == 0) res += (l1-idx1) * (long long)(l2-idx2);
      idx1 = l1;
      idx2 = l2;
    }

    printf("Case #%d: %lld\n", tt, res);
  }
  return 0;
}

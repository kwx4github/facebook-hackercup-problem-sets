// ================================================================================================
//  pFHC1403A.ac.cpp
//  Written by Luis Garcia, 2013
// ================================================================================================

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <iterator>
#include <numeric>
#include <iostream>

using namespace std;

#if defined _OJ_PROJECT
_BEGIN_PROBLEM(FHC1403A, "FHC1403A")
#endif // _OJ_PROJECT

#define infinite_loop for (;;)

long long board1[1000000], board2[1000000];
long long values[2000000];

bool found1[2000000], found2[2000000];

int main() {
	int T;
	scanf("%d", &T);

	int N, M;
	long long x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
	for (int _T = 0; _T < T; ++_T) {
		scanf("%d %d %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld",
			    &N, &M, &x1, &a1, &b1, &c1, &r1, &x2, &a2, &b2, &c2, &r2);

		board1[0] = x1;
		board2[0] = x2;
		
		for (int i = 1; i < N || i < M; ++i) {
			if (i < N)
				board1[i] = (a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1;
			if (i < M)
				board2[i] = (a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2;
		}

		copy(board1, board1 + N, values);
		copy(board2, board2 + M, values + N);
		sort(values, values + N + M);
		int T = unique(values, values + N + M) - values;

		memset(found1, 0, sizeof found1);
		memset(found2, 0, sizeof found2);

		long long ans = 0;
		int d = 0, r = 0;
		for (int i = 0, j = 0; i < N; ++i) {
			int p1 = lower_bound(values, values + T, board1[i]) - values;
			if (!found1[p1]) {
				found1[p1] = true;

				if (found2[p1]) {
					--r;
				} else {
					++r;
					while (j < M ) {
						int p2 = lower_bound(values, values + T, board2[j]) - values;
						if (!found2[p2]) {
							found2[p2] = true;
							if (found1[p2]) --r; else ++r;
							if (found2[p1]) break;
						}
						++j;
					}

					d = 0;
					while (j < M) {
						int p2 = lower_bound(values, values + T, board2[j]) - values;
						if (!found2[p2])
							break;
						else
							++j, ++d;
					}
				}
			}

			if (!r)
				ans += d;
		}

		printf("Case #%d: %lld\n", _T + 1, ans);
	}

	return 0;
}

#if defined _OJ_PROJECT
_END_PROBLEM
#endif // _OJ_PROJECT

// ================================================================================================
//  End of file.
// ================================================================================================

#include <algorithm>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef set<int> si;
typedef set<ii> sii;
#define MP make_pair
#define PB push_back
#define TR(c,it) for( typeof(c.begin()) it = c.begin(); it != c.end(); ++it )
#define TRR(c,it) for( typeof(c.rbegin()) it = c.rbegin(); it != c.rend(); ++it
#define REP(i,a) for (int i = 0; i < (a); i++)
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORD(i,a,b) for (int i = (a); i >= (b); i--)
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }

const int INF = 1<<29;
typedef unsigned long long int lli;
/*******************************************************/
int cs,a,b,c,d,e,f,g,h,i,j,tmp;
int k,l,m,n;

int solve(){

}
int fir[1000008];
int sec[1000008];

lli x1, a1, b1, c1, r1;
lli x2, a2, b2, c2, r2;

int main() {

    scanf("%d",&cs);
	FOR(ij,1,cs){

        scanf("%d%d",&n,&m);
        scanf("%lld%lld%lld%lld%lld", &x1, &a1, &b1, &c1, &r1);
        scanf("%lld%lld%lld%lld%lld", &x2, &a2, &b2, &c2, &r2);

        fir[0] = x1;
        sec[0] = x2;

        if ( n > m){
            FOR(i,1,m - 1){
                fir[i] =  (a1 * fir[ (i-1) % n ] + b1 * sec[  (i-1) % m ] + c1) % r1;
                sec[i] =  (a2 * fir[ (i-1) % n ] + b2 * sec[  (i-1) % m ] + c2) % r2;
            }

            FOR(i,m, n-1){
                fir[i] =  (a1 * fir[ (i-1) % n ] + b1 * sec[  (i-1) % m ] + c1) % r1;
            }
        }
        else{
            FOR(i,1,n - 1){
                fir[i] =  (a1 * fir[ (i-1) % n ] + b1 * sec[  (i-1) % m ] + c1) % r1;
                sec[i] =  (a2 * fir[ (i-1) % n ] + b2 * sec[  (i-1) % m ] + c2) % r2;
            }

            FOR(i,n, m-1){
                sec[i] =  (a2 * fir[ (i-1) % n ] + b2 * sec[  (i-1) % m ] + c2) % r2;
            }


        }

       /* REP(i,n)cout<< fir[i] << ", ";
        cout << endl;
        REP(i,m)cout<< sec[i] << ", ";
        cout << endl;*/

        lli iN = 0,
        iM = 0,
        sum = 0;

        set<int> sN;
        set<int> sM;

        int dva = 0;
        set<int> st;
        map<int,int>::iterator it;
        pair<set<int>::iterator,bool> ret;
        pair<set<int>::iterator,bool> ret2;

        int cntM = 0, cntN = 0, nchM = 0, nchN = 0;

        bool x;

        while(iN < n || iM < m ){

            if(  (sN.size() > sM.size()  && iM < m) || (iN >= n && iM < m)  ){

                    ret = sM.insert( sec[iM] );
                    if(ret.second){
                        ret = st.insert( sec[iM] );
                        if (!ret.second ){
                                dva++;
                        }
                        nchM = 1; //
                    }
                    else{
                        nchM++; //

                    }
                    x = 0;




                    if(dva == st.size()){
                        sum+= nchN;
                        //cout<< iM << " " << iN << endl;
                    }

                    iM++;
            }
            else{
                    ret = sN.insert( fir[iN] );
                    if(ret.second){
                        ret = st.insert( fir[iN] );
                        if (!ret.second ){
                                dva++;
                        }
                        nchN = 1;
                    }
                    else{
                        nchN++; //
                    }
                    x = 1;

                    if(dva == st.size()){
                        sum+= nchM;
                        //cout<< iM << " " << iN << endl;
                    }

                    iN++;

            }

        }
       /* if(dva == st.size()){
            if (x) sum+= nchM;
            else sum+= nchN;
        }*/


        printf("Case #%d: %lld\n",ij, sum);

	}

  return 0;
}

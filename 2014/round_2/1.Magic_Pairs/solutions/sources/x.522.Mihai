#include <set>
#include <iostream>
#include <map>
#include <fstream>
#include <vector>
using namespace std;
const int P = 1000003;
const int P2 = 666013;

int main() {
    
    ifstream cin("colors.in");
    ofstream cout("colors.out");

    int t; cin >> t;
    for(int t_case = 1; t_case <= t; ++t_case) {
        cout << "Case #" << t_case << ": ";

        int n, m; cin >> n >> m;

        int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;

        set<int> A, B;
        int big = max(n, m);
        vector<int> boardA(big, 0), boardB(big, 0);

        boardA[0] = x1, boardB[0] = x2;
        
        for(int i = 1; i < n; ++i) {
            boardA[i] = (1LL * a1 * boardA[(i - 1) % n] + 1LL * b1 * boardB[(i - 1) % m] + c1) % r1;
            boardB[i] = (1LL * a2 * boardA[(i - 1) % n] + 1LL * b2 * boardB[(i - 1) % m] + c2) % r2;
        }

        map<pair<int, int>, int> freq;
        
        int current_hash1 = 0;
        int current_hash2 = 1;

        for(int i = 0; i < n; ++i) {
            auto it = A.find(boardA[i]);
            if(it == A.end()) {
                A.insert(boardA[i]);
                current_hash1 += boardA[i] * boardA[i] * (P - boardA[i]) + (boardA[i] / 2);
                current_hash2 *= (boardA[i] + P2);
            }
            freq[make_pair(current_hash1, current_hash2)]++;
        }
    
        current_hash1 = 0;
        current_hash2 = 1;

        long long ans = 0;
        
        for(int i = 0; i < m; ++i) {
            auto it = B.find(boardB[i]);
            if(it == B.end()) {
                B.insert(boardB[i]);
                current_hash1 += boardB[i] * boardB[i] * (P - boardB[i]) + (boardB[i] / 2);
                current_hash2 *= (boardB[i] + P2);
            }

            ans += freq[make_pair(current_hash1, current_hash2)];
        }

        cout << ans << "\n";
    }
}

#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <sstream>
using namespace std;
#pragma comment(linker, "/STACK:255000000")

typedef long long ll;

#define rep(i, a, b) for(i = (a); i < (b); ++i)
#define repb(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define repd(i, a, b, d) for(i = (a); i < (b); i += (d))
#define repbd(i, a, b, d) for(i = (a) - 1; i >= (b); i -= (d))
#define reps(i, s) for(i = 0; (s)[i]; ++i)
#define repl(i, l) for(i = l.begin(); i != l.end(); ++i)

#define in(f, a) scanf("%"#f, &(a))

bool firstout = 1;

#define out(f, a) printf("%"#f, (a))
#define outf(f, a) printf((firstout) ? "%"#f : " %"#f, (a)), firstout = 0
#define nl printf("\n"), firstout = 1

#define all(x) (x).begin(),(x).end()
#define sqr(x) ((x) * (x))
#define mp make_pair

template<class T>
T &minn(T &a, T b)
{
	if(b < a) a = b;
	return a;
}

template<class T>
T &maxx(T &a, T b)
{
	if(a < b) a = b;
	return a;
}

#define inf 1012345678
#define eps 1e-9


#ifdef XDEBUG
#define mod 23
#else
#define mod 1000000007
#endif

int &madd(int &a, int b)
{
	a += b;
	if(a >= mod) a -= mod;
	return a;
}

int &msub(int &a, int b)
{
	a -= b;
	if(a < 0) a += mod;
	return a;
}

int &mmult(int &a, int b)
{
	return a = (ll)a * b % mod;
}

int mdiv(ll a, ll b, ll m)
{
	a = (a % m + m) % m;
	b = (b % m + m) % m;
	if(a % b == 0) return a / b;
	return (a + m * mdiv(-a, m, b)) / b;
}

#define N 1012345
#define M 1012

int n, m, q;
int A[N], AA[N];

int main()
{
#ifdef XDEBUG
	freopen("in.txt", "rt", stdin);
#else
	freopen("x.in", "rt", stdin);
	freopen("x.out", "wt", stdout);
#endif

	int i, j, k;
	char c;
	int a, d;
	
	int ts;	
#if 1
	int tss;
	in(d, tss);
	rep(ts, 1, tss + 1)
#else
	for(ts = 1; in(d, n) > 0; ++ts)
#endif
	{
		in(d, n); in(d, m);
		int x1, a1, b1, c1, r1;
		in(d, x1); in(d, a1); in(d, b1); in(d, c1); in(d, r1);
		int x2, a2, b2, c2, r2;
		in(d, x2); in(d, a2); in(d, b2); in(d, c2); in(d, r2);
		A[0] = x1;
		AA[0] = x2;
		rep(i, 1, min(n, m))
		{
			A[i] = ((ll)a1 * A[(i - 1) % n] + (ll)b1 * AA[(i - 1) % m] + c1) % r1;
			AA[i] = ((ll)a2 * A[(i - 1) % n] + (ll)b2 * AA[(i - 1) % m] + c2) % r2;
		}
		rep(i, i, n)
		{
			A[i] = ((ll)a1 * A[(i - 1) % n] + (ll)b1 * AA[(i - 1) % m] + c1) % r1;
		}
		rep(i, i, m)
		{
			AA[i] = ((ll)a2 * A[(i - 1) % n] + (ll)b2 * AA[(i - 1) % m] + c2) % r2;
		}
		set<int> s;
		set<int> ss;
		set<int> s0;
		s.clear();
		ss.clear();
		s0.clear();
		ll res = -1;
		i = j = -1;
		for(; i < n && j < m;)
		{
			if(s.empty() && ss.empty())
			{
				int ii = i + 1;
				int jj = j + 1;
				for(; ii < n && s0.count(A[ii]); ++ii);
				for(; jj < m && s0.count(AA[jj]); ++jj);
				res += (ll)(ii - i) * (jj - j);
				if(ii == n) break;
				i = ii;
				s.insert(A[i]);
				continue;
			}
			if(s.empty())
			{
				if(++i == n) break;
				int a = A[i];
				if(s0.count(a)) continue;
				if(ss.count(a))
				{
					s0.insert(a);
					ss.erase(a);
				}
				else s.insert(a);
				continue;
			}
			{
				if(++j == m) break;
				int a = AA[j];
				if(s0.count(a)) continue;
				if(s.count(a))
				{
					s0.insert(a);
					s.erase(a);
				}
				else ss.insert(a);
				continue;
			}
		}
		printf("Case #%d: ", ts);
		out(lld, res); nl;
#ifndef XDEBUG
		cerr << ts << endl;
#endif
	}

	return 0;
}

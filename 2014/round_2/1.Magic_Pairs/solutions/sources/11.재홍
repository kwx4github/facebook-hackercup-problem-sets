#include <stdio.h>
#include <algorithm>
#include <set>
using namespace std;

long long d1[1000001], d2[1000001];
set<long long> A, B;
int a, b, onlyA, onlyB;

void insertA(long long a) {
	if (A.find(a) != A.end()) return;
	if (B.find(a) != B.end()) {
		onlyB--;
	}
	else {
		onlyA++;
	}
	A.insert(a);
}

void insertB(long long a) {
	if (B.find(a) != B.end()) return;
	if (A.find(a) != A.end()) {
		onlyA--;
	}
	else {
		onlyB++;
	}
	B.insert(a);
}
int main() {
	freopen("_magic_pairs.txt", "r", stdin);
	freopen("_magic_pairs.out", "w", stdout);
	int T;
	scanf("%d", &T);
	while (T-- > 0) {
		
		int n, m;
		scanf("%d %d", &n, &m);
		long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
		scanf("%lld %lld %lld %lld %lld", &x1, &a1, &b1, &c1, &r1);
		scanf("%lld %lld %lld %lld %lld", &x2, &a2, &b2, &c2, &r2);
		d1[0] = x1;
		d2[0] = x2;
		for (int i = 1; i < n || i < m; i++) {
			if (i < n) d1[i] = (a1 * d1[(i - 1) % n] + b1 * d2[(i - 1) % m] + c1) % r1;
			if (i < m) d2[i] = (a2 * d1[(i - 1) % n] + b2 * d2[(i - 1) % m] + c2) % r2;
		}

		A.clear(); B.clear();

		a = b = 1;
		onlyA = onlyB = 0;

		insertA(d1[0]);
		insertB(d2[0]);

		long long sol = 0;
		while (true) {
			if (onlyA == 0 && onlyB == 0) {
				// insert하면서 A가 달라질때까치 찾아봄
				long long aa, bb;
				aa = 1; bb = 1;

				while (a<n) {
					if (A.find(d1[a]) == A.end()) break;
					a++; aa++;
				}

				while (b<m) {
					if (B.find(d2[b]) == B.end()) break;
					b++; bb++;
				}
				sol += (aa * bb);
				if (a < n) { insertA(d1[a]); a++; }
				else if (b < m) { insertB(d2[b]); b++; }
				else {
					break;
				}
			}
			if (a < n && onlyB > 0) {
				insertA(d1[a]); a++;
			}
			else if (b < m && onlyA > 0) {
				insertB(d2[b]); b++;
			}
			else if (onlyB > 0 || onlyA > 0) {
				break;
			}
		}
		static int cs = 1;
		printf("Case #%d: ", cs++);

		printf("%lld\n", sol);
	}
	return 0;
}
#include <cstdio>
#include <unordered_set>

#define MAX 1000005

#define AMOUNT ((long long)(1e15))

long long ary[2][MAX];

struct Data
{
    int N, M;
    std::unordered_set<long long> S[2];

    Data () 
    {
        N = 0;
        M = 0;
    }

    void add(int v, int d)
    {
        int a = S[0].count(v) - S[1].count(v);

        if (d > 0)
            S[0].insert(v);
        else 
            S[1].insert(v);

        int b = S[0].count(v) - S[1].count(v);

        if (a != b)
        {
            if (a == 1 && b == 0)
                N -= 1;
            else if (a == 0 && b == 1)
                N += 1;

            if (a == -1 && b == 0)
                M -= 1;
            else if (a == 0 && b == -1)
                M += 1;
        }
//        printf("!!%d %d: %d %d\n", v, d, a, b);
    }
    int compare()
    {
        if (M > 0)
            return -1;
        else if (N == 0 && M == 0)
            return 0;
        else
            return 1;
    }
};

void getArray(int N, int M)
{
    long long a[2], b[2], c[2], r[2];

    scanf("%lld %lld %lld %lld %lld", 
            &ary[0][0], &a[0], &b[0], &c[0], &r[0]);
    scanf("%lld %lld %lld %lld %lld", 
            &ary[1][0], &a[1], &b[1], &c[1], &r[1]);

    for (int i = 1; i < N || i < M; ++i)
    {
        for (int j = 0; j < 2; ++j)
            ary[j][i] = 
                (a[j] * ary[0][(i - 1)%N]
                 + b[j] * ary[1][(i - 1)%M] 
                 + c[j]) % r[j];
    }
}

int main()
{
    int T;
    scanf("%d", &T);

    for (int Ti = 1; Ti <= T; ++Ti)
    {
        int N, M;
        scanf("%d %d", &N, &M);
        getArray(N, M);
        long long ans = 0;
/*
        for (int i = 0; i < N; ++i)
            printf("%lld ", ary[0][i]);
        printf("\n");
        for (int i = 0; i < M; ++i)
            printf("%lld ", ary[1][i]);
        printf("\n");
  */      

        ary[1][M] = -1;
        Data d1, d2;
        for (int i = 0, lj = 0, rj = 0; i < N; ++i)
        {
            d1.add(ary[0][i], 1);
            d2.add(ary[0][i], 1);

            while (lj < M && d1.compare() > 0)
                d1.add(ary[1][lj++], -1);
    //        printf("\n");
            while (rj <= M && d2.compare() >= 0)
                d2.add(ary[1][rj++], -1);

    /*        printf("%d\n%d\n", d1.compare(), d2.compare());
            printf("%d: %d %d\n", i, lj - 1, rj - 1);*/

            if (d1.compare() == 0)
                ans += rj - lj;
        }
        printf("Case #%d: %lld\n", Ti, ans);
    }

}

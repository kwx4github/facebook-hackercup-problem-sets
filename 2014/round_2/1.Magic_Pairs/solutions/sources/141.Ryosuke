#include <cstdio>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <bitset>
#include <numeric>
#include <climits>
#include <cfloat>
#include <functional>
using namespace std;

long long solve()
{
    int n, m;
    long long x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
    cin >> n >> m >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
    vector<int> s(n), t(m);
    s[0] = x1;
    t[0] = x2;
    for(int i=1; i<max(n, m); ++i){
        if(i < n)
            s[i] = (a1 * s[(i-1)%n] + b1 * t[(i-1)%m] + c1) % r1;
        if(i < m)
            t[i] = (a2 * s[(i-1)%n] + b2 * t[(i-1)%m] + c2) % r2;
    }

    set<int> ss, tt, sstt;
    int i = 0;
    int j = 0;
    long long ret = 0;
    while(i < n && j < m){
        ss.insert(s[i]);
        tt.insert(t[j]);
        if(sstt.find(s[i]) == sstt.end())
            sstt.insert(s[i]);
        else
            sstt.erase(sstt.find(s[i]));
        if(sstt.find(t[j]) == sstt.end())
            sstt.insert(t[j]);
        else
            sstt.erase(sstt.find(t[j]));

        long long a = 0;
        long long b = 0;
        while(i < n && ss.find(s[i]) != ss.end()){
            ++ i;
            ++ a;
        }
        while(j < m && tt.find(t[j]) != tt.end()){
            ++ j;
            ++ b;
        }
        if(sstt.empty())
            ret += a * b;
    }

    return ret;
}

int main()
{
    int t;
    cin >> t;

    for(int i=1; i<=t; ++i)
        cout << "Case #" << i << ": " << solve() << endl;

    return 0;
}
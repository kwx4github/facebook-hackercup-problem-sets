#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <set>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < n; ++i)
#define all(x) x.begin(), x.end()
#define mp make_pair
#define pb push_back
#define PATH "C:\\"


template <class T> inline void mx(T& x, const T& y) { if (y > x) x = y; }
template <class T> inline void mn(T& x, const T& y) { if (y < x) x = y; }
template <class T> inline int sz(const T& x) { return (int) x.size(); }

typedef long long ll;

ll get(vector<ll>& a, int i) {
  i %= sz(a);
  if (i < 0) i += sz(a);
  return a[i];
}

vector<pair<ll, int> > make_hist(vector<ll>& a) {
  int n = sz(a);
  set<ll> used;
  vector<pair<ll, int> > hist;
  forn (i, n) {
    if (used.find(a[i]) == used.end()) {
      hist.push_back(make_pair(a[i], 1));
      used.insert(a[i]);
    } else {
      hist.back().second++;
    }
  }  
  return hist;
}

void add(set<ll>& used1, set<ll>& used2, ll& un1, ll& un2, ll a) {
  if (used2.find(a) == used2.end()) {
    un1++;
  } else {
    un2--;
  }
  used1.insert(a);
}

#define debug(x) cerr << "DEBUG: " << #x << " = " << x << endl;

void solve() {
  int n, m;
  cin >> n >> m;

  ll x1, a1, b1, c1, r1;
  cin >> x1 >> a1 >> b1 >> c1 >> r1;
  
  ll x2, a2, b2, c2, r2;
  cin >> x2 >> a2 >> b2 >> c2 >> r2;
  
  vector<ll> board1(n);
  vector<ll> board2(m);
  
  board1[0] = x1;
  board2[0] = x2;
  
  for (int i = 1; i < max(n, m); ++i) {
    if (i < n) {
      board1[i] = a1*get(board1,i-1) + b1*get(board2,i-1) + c1;
      board1[i] %= r1;
      if (board1[i] < 0) {
        board1[i] += r1;
      }
    }
    if (i < m) {
      board2[i] = a2*get(board1,i-1) + b2*get(board2,i-1) + c2;
      board2[i] %= r2;
      if (board2[i] < 0) {
        board2[i] += r2;
      }
    }
  }
  
  
  vector<pair<ll, int> > hist1 = make_hist(board1);
  vector<pair<ll, int> > hist2 = make_hist(board2);

  // debug(sz(hist1));
  // debug(sz(hist2));
  
  ll ans = 0;
  set<ll> used1, used2;
  ll unique1 = 0, unique2 = 0;
  forn (i, min(sz(hist1), sz(hist2))) {
    // debug(hist1[i].first);
    // debug(hist2[i].first);
  
    add(used1, used2, unique1, unique2, hist1[i].first);
    add(used2, used1, unique2, unique1, hist2[i].first);
    // debug(unique1);
    // debug(unique2);
    if (unique1 == 0 && unique2 == 0) {
      // cout << "add" << endl;
      ans += 1LL * hist1[i].second * hist2[i].second;
    }
  }
  
  cout << ans << endl;
}

int main() {
  freopen(PATH"_magic_pairs.txt", "r", stdin);
  freopen(PATH"out.txt", "r", stdin);  
  int nTests;
  cin >> nTests;
  forn (iTest, nTests) {
    cout << "Case #" << (iTest + 1) << ": ";
    solve();
  }
  return 0;
}
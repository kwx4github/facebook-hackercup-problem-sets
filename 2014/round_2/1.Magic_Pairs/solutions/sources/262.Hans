#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>
#include <numeric>
#include <iomanip>
#include <cassert>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for(__typeof__((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define mp make_pair
#define pb push_back
#define has(c,i) ((c).find(i) != (c).end())
#define DBG(...) ({ if(1) fprintf(stderr, __VA_ARGS__); })
#define DBGDO(X) ({ if(1) cerr << "DBGDO: " << (#X) << " = " << (X) << endl; })

int TC;
int N, M;
int arr[2][1024 * 1024];

ll x1, a1, b1, c1, r1;
ll x2, a2, b2, c2, r2;
int cnt[2], p[2];
unordered_map<int,char> seen;

void take(int a) {
	int x = arr[a][p[a]];
	p[a]++;
	char &c = seen[x];

	if (c & (1<<a)) return;

	if (!c) {
		cnt[a^1]++;
	} else {
		cnt[a]--;
	}

	c |= (1<<a);
}

bool havenext(int a) {
	if (a == 0 && p[0] >= N) return false;
	if (a == 1 && p[1] >= M) return false;

	if (!has(seen, arr[a][p[a]])) return false;
	
	return seen[ arr[a][p[a]] ] & (1<<a);
}

ll solve() {
	cin >> N >> M;

	cin >> arr[0][0] >> a1 >> b1 >> c1 >> r1;
	cin >> arr[1][0] >> a2 >> b2 >> c2 >> r2;

	int upper = max(N, M);
	FOR(i,1,upper) {
		arr[0][i] = ( a1 * arr[0][(i-1) % N] + b1 * arr[1][(i-1) % M] + c1) % r1;
		arr[1][i] = ( a2 * arr[0][(i-1) % N] + b2 * arr[1][(i-1) % M] + c2) % r2;
	}

#if 0
	DBG("i  :"); FOR(i,0,upper) DBG(" %2d", i); DBG("\n");
	DBG("a0 :"); FOR(i,0,N)     DBG(" %2d", arr[0][i]); DBG("\n");
	DBG("a1 :"); FOR(i,0,M)     DBG(" %2d", arr[1][i]); DBG("\n");
#endif

	ll res = 0;

	cnt[0] = 0, cnt[1] = 0;
	p[0] = 0, p[1] = 0;
	seen.clear();

	while (p[0] < N && p[1] < M) {
		take(0);
		take(1);

		while ((p[0] < N && cnt[0]) || (p[1] < M && cnt[1])) {
			while (p[0] < N && cnt[0]) take(0);
			while (p[1] < M && cnt[1]) take(1);
		}

		if (cnt[0] || cnt[1]) continue;

		ll l0 = 1, l1 = 1;

		while (havenext(0)) { l0++; p[0]++; }
		while (havenext(1)) { l1++; p[1]++; }

		res += l0 * l1;
	}

	return res;
}

int main() {
	random_device rd;
	uniform_int_distribution<int> ud (900000000, 1e9);
	FOR(i,0,5) cerr << " " << ud(rd);
	cerr << endl;

	cin >> TC;
	FOR(tc, 1, TC+1) {
		cout << "Case #" << tc << ": " << solve() << endl;
	}
}

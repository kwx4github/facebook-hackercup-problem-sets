#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
inline ostream& operator<< (ostream& out, const pt& p) { return out << '(' << p.x << ", " << p.y << ')'; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 1000 * 1000 + 13;

int n[2];
int A[2], B[2], C[2], R[2], X[2];
int a[2][N];

inline bool read()
{
	if (scanf("%d%d", &n[0], &n[1]) != 2) return false;
	
	forn(i, 2) assert(scanf("%d%d%d%d%d", &X[i], &A[i], &B[i], &C[i], &R[i]) == 5);
	
	a[0][0] = X[0], a[1][0] = X[1];
	
	forl(i, max(n[0], n[1]) - 1)
	{
		a[0][i] = int((A[0] * 1LL * a[0][(i - 1) % n[0]] + B[0] * 1LL * a[1][(i - 1) % n[1]] + C[0]) % R[0]);
		a[1][i] = int((A[1] * 1LL * a[0][(i - 1) % n[0]] + B[1] * 1LL * a[1][(i - 1) % n[1]] + C[1]) % R[1]);
	}
	
	//forn(it, 2) { forn(i, n[it]) cerr << a[it][i] << ' '; cerr << endl; }
	
	return true;
}

inline void solve(int test)
{
	set <int> s[2];
	int p2 = 0;
	int lf = 0, rg = 0;
	
	li ans = 0;
	
	forn(i, n[0])
	{
		if (s[0].count(a[0][i]))
		{
			if (sz(s[0]) == sz(s[1]))
				ans += rg - lf;
			
		} else
		{
			s[0].insert(a[0][i]);
			
			while (p2 < n[1] && !s[1].count(a[0][i]))
				s[1].insert(a[1][p2++]);
				
			if (!s[1].count(a[0][i]))
				break;
				
			if (sz(s[0]) != sz(s[1]))
				continue;
				
			lf = p2 - 1;
			while (p2 < n[1] && s[1].count(a[1][p2]))
				p2++;
			rg = p2;
			
			ans += rg - lf;
		}
	}
	
	printf("Case #%d: %I64d\n", test + 1, ans);
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		assert(read());
		solve(test);
#ifdef SU2_PROJ
		cerr << "test " << test + 1 << ": " << clock() << endl;
#endif
	}
	
	return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <set>

using namespace std;

#define MIN(a, b) (a < b ? a : b)
#define MAX(a, b) (a < b ? b : a)

typedef unsigned long long ull;
typedef long long ll;

int n[2];
int board[2][1000000];

ll magic_cnt() {
	ll cnt = 0;
	set<int> cur_set[2], add_set[2];
	int i[2] = {-1, -1};
	bool next = 0, new_next;
	bool same = true;
	int l[2] = {0, 0};
	while (i[0] < n[0] - 1 || i[1] < n[1] - 1) {
		i[next]++;
		int new_el = board[next][i[next]];
		if (cur_set[next].find(new_el) == cur_set[next].end()) {
			if (add_set[0].empty() && add_set[1].empty())
				cnt += (ll)l[0] * (ll)l[1];
			l[next] = 1;
			cur_set[next].insert(new_el);
			if (cur_set[!next].find(new_el) == cur_set[!next].end()) {
				add_set[!next].insert(new_el);
			} else {
				add_set[next].erase(new_el);
			}
		} else
			l[next]++;
		if (i[next] >= n[next] - 1)
			next = !next;
		else if (add_set[next].empty()) {
			if (cur_set[next].find(board[next][i[next]+1]) == cur_set[next].end())
				next = !next;
		}
	}
	if (add_set[0].empty() && add_set[0].empty())
		cnt += (ll)l[0] * (ll)l[1];
	return cnt;
}

int main(int argc, char* argv[])
{
	FILE *f = fopen((argc > 1 ? argv[1] : "in.txt"), "r");
	FILE *g = fopen("out.txt", "w");
	int t;
	fscanf(f, "%d\n", &t);
	for (int test = 0; test < t; test++) {
		fscanf(f, "%d %d\n", &n[0], &n[1]);

		ull x[2], a[2], b[2], c[2], r[2];
		for (int i = 0; i < 2; i++) {
			int xx, aa, bb, cc, rr;
			fscanf(f, "%d %d %d %d %d\n", &xx, &aa, &bb, &cc, &rr);
			x[i] = xx;
			a[i] = aa;
			b[i] = bb;
			c[i] = cc;
			r[i] = rr;
			board[i][0] = x[i];
		}

		int max = MAX(n[0], n[1]);

		for (int i = 1; i < max; i++) {
			if (i < n[0])
				board[0][i] = (a[0] * ((ull)board[0][(i-1) % n[0]]) + b[0] * ((ull)board[1][(i-1) % n[1]]) + c[0]) % r[0];
			if (i < n[1])
				board[1][i] = (a[1] * ((ull)board[0][(i-1) % n[0]]) + b[1] * ((ull)board[1][(i-1) % n[1]]) + c[1]) % r[1];
		}

		ll cnt = magic_cnt();

		fprintf(g, "Case #%d: %lld", test + 1, cnt);

		fprintf(g, "\n");
	}
	fclose(f);
	fclose(g);
	return 0;
}


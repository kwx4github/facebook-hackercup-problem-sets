import java.io.*;
import java.util.*;
import java.math.*;

public class A {
	public static void main(String[] args) {
		new A().run();
	}

	BufferedReader br;
	StringTokenizer in;
	PrintWriter out;

	public String nextToken() throws IOException {
		while (in == null || !in.hasMoreTokens())
			in = new StringTokenizer(br.readLine());
		return in.nextToken();
	}

	public int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	public long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	public double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}

	public boolean good(int[] len, int[] l) {
		return len[0] > l[0] && len[1] > l[1];
	}

	public void solve() throws IOException {
		int n = nextInt();
		int m = nextInt();
		int[][] a = new int[2][];
		a[0] = new int[n];
		a[0][0] = nextInt();
		int a1 = nextInt();
		int b1 = nextInt();
		int c1 = nextInt();
		int r1 = nextInt();
		a[1] = new int[m];
		a[1][0] = nextInt();
		int a2 = nextInt();
		int b2 = nextInt();
		int c2 = nextInt();
		int r2 = nextInt();

		int[] len = new int[] { n, m };

		for (int i = 1; i < Math.max(n, m); i++) {
			if (i < a[0].length)
				a[0][i] = (a1 * a[0][(i - 1) % n] + b1 * a[1][(i - 1) % m] + c1)
						% r1;
			if (i < a[1].length)
				a[1][i] = (a2 * a[0][(i - 1) % n] + b2 * a[1][(i - 1) % m] + c2)
						% r2;
		}

		int[] l = new int[2];
		HashSet<Integer>[] v = new HashSet[2];
		HashSet<Integer>[] d = new HashSet[2];
		for (int i = 0; i < d.length; i++) {
			v[i] = new HashSet<Integer>();
			d[i] = new HashSet<Integer>();
		}

		long ans = 0;
		while (good(len, l)) {
			v[0].add(a[0][l[0]]);
			v[1].add(a[1][l[1]]);
			if (a[0][l[0]] != a[1][l[1]]) {
				d[0].add(a[0][l[0]]);
				d[1].add(a[1][l[1]]);
			}

			while (good(len, l) && (d[0].size() != 0 || d[1].size() != 0)) {
				for (int k = 0; k < d.length; k++) {
					while (good(len, l) && d[1 - k].size() != 0) {
						l[k]++;
						if (!good(len, l))
							break;
						d[1 - k].remove(a[k][l[k]]);
						v[k].add(a[k][l[k]]);
						if (!v[1 - k].contains(a[k][l[k]]))
							d[k].add(a[k][l[k]]);
					}
				}
			}

			if (!good(len, l)) {
				break;
			}

			int[] r = new int[] { l[0], l[1] };
			for (int k = 0; k < d.length; k++) {
				while (r[k] < len[k] && v[k].contains(a[k][r[k]])) {
					r[k]++;
				}
			}

			ans += 1L * (r[0] - l[0]) * (r[1] - l[1]);
			l = r;
		}

		out.println(ans);
	}

	public void run() {
		try {
			br = new BufferedReader(new FileReader("input.txt"));
			out = new PrintWriter("output.txt");

			int t = nextInt();
			for (int i = 0; i < t; i++) {
				System.err.println("Test case " + (i + 1));
				out.print("Case #" + (i + 1) + ": ");
				solve();
			}

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
}

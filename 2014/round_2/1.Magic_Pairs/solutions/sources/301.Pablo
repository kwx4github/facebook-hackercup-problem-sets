#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;

int const MAXN = 1<<20;
int const INF = 1<<29;

int n, m;
ull x1, a1, b1, c1, r1;
ull x2, a2, b2, c2, r2;

int a[MAXN];
int b[MAXN];

int ab[MAXN];
int ba[MAXN];

unordered_map<int,int> fa;
unordered_map<int,int> fb;

template<typename Map>
void init(int const* v, int n, Map& w)
{
  w.clear();
  for( int i = 0; i != n; ++i )
    w.insert(make_pair(v[i], i));
}

template<typename Map>
void run(int const* v, int* w, int n, Map const& m)
{
  int mx = -1;
  for( int i = 0; i != n; ++i )
  {
    auto it = m.find(v[i]);
    if( it == m.end() )
    {
      for( ; i != n; ++i )
        w[i] = INF;
      break;
    }
    else
    {
      mx = max(mx, it->second);
      w[i] = mx;
    }
  }
}

void debug(int const* v, int n)
{
  n = min(n, 100);
  for( int i = 0; i != n; ++i )
    cerr << v[i] << ' ';
  cerr << '\n';
}

ull solve()
{
  ull rv = 0;
  int i = 0, j = 0;
  while( i < n && j < m )
  {
    //cout << "At: " << i << ' ' << j << endl;
    int fj = ab[i];
    if( fj == INF )
      break;
    int fi = ba[j];
    if( fi == INF )
      break;
      
    bool changed = (fi > i) || (fj > j);
    if( fi > i ) i = fi;
    if( fj > j ) j = fj;
    if( changed )
      continue;
      
    int ni = upper_bound(ab+i, ab+n, ab[i]) - ab;
    int nj = upper_bound(ba+j, ba+m, ba[j]) - ba;

    //cout << "fi " << fi << " fj " << fj << " ni " << ni << " nj " << nj << endl;
    rv += max<ll>(0, ni - i)
        * max<ll>(0, nj - j);
    
    i = ni;
    j = nj;
  }
  return rv;
}

int main()
{
  int T;
  cin >> T;
  for( int C = 1; C <= T; C++ )
  {
    cin >> n >> m;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;

    a[0] = x1; b[0] = x2;
    int mn = max(m, n);
    for( int i = 1; i < mn; ++i )
    {
      if( i < n )
        a[i] = (a1 * a[(i-1) % n] + b1 * b[(i-1) % m] + c1) % r1;
      if( i < m )
        b[i] = (a2 * a[(i-1) % n] + b2 * b[(i-1) % m] + c2) % r2;
    }
    init(a, n, fa);
    init(b, m, fb);
    
    run(a, ab, n, fb);
    run(b, ba, m, fa);

    /*debug(a, n);
    debug(b, m);
    debug(ab, n);
    debug(ba, m);*/
    
    ull rv = solve();
    cout << "Case #" << C << ": " << rv << endl;
  }
  return 0;
}
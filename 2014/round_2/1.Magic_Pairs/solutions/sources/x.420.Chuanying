#include <stdio.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <string.h>
#include <unordered_set>
#include <set>
#include <list>
#include <map>
#include <algorithm>
#include <stdio.h>
#include <math.h>

using namespace std;
const static int DEBUG = 0;

typedef long long lld;
typedef pair<int, int> pii;

int solve() {
    int N, M;
    cin >> N >> M;
    lld x1, a1, b1, c1, r1;
    lld x2, a2, b2, c2, r2;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    vector<lld> Board1(N);
    vector<lld> Board2(M);
    Board1[0] = x1;
    Board2[0] = x2;
    int maxnm = max(N, M);
    for (int i = 1; i < maxnm; ++i) {
        if (i < N) {
            Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
        }
        if (i < M) {
            Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
        }
    }
    set<pii> ans;
    {
        map<int, lld> need;
        int count = 0;
        for (int i = 0, j = 0; i < N; ++i) {
            int x = need[ Board1[i] ];
            if (x == 0) { //none
                need[Board1[i]] = 1;
                ++count;
            } else if (x < 0) { //Board2
                need[Board1[i]] = 2;
                --count;
            }
            for (; x == 0 && j < M; ++j) {
                int y = need[ Board2[j] ];
                if (y > 1) {
                    continue; 
                } else if (y == 0) {
                    need[ Board2[j] ] = -1;
                    ++count;
                } else if (y == 1) {
                    need[ Board2[j] ] = 2;
                    --count; 
                }
                if (Board2[j] == Board1[i]) {
                    break;
                }
            }
            if (count == 0) {
                ans.insert(pii(i, j)); 
            }
        }
    }
    {
        map<int, lld> need;
        int count = 0;
        for (int i = 0, j = 0; j < M; ++j) {
            int x = need[ Board2[j] ];
            if (x == 0) { //none
                need[Board2[j]] = 1;
                ++count;
            } else if (x < 0) { //Board2
                need[Board2[j]] = 2;
                --count;
            }
            for (; x == 0 && i < N; ++i) {
                int y = need[ Board1[i] ];
                if (y > 1) {
                    continue; 
                } else if (y == 0) {
                    need[ Board1[i] ] = -1;
                    ++count;
                } else if (y == 1) {
                    need[ Board1[i] ] = 2;
                    --count; 
                }
                if (Board2[j] == Board1[i]) {
                    break;
                }
            }
            if (count == 0) {
                ans.insert(pii(i, j)); 
            }
        }
    }
    cout << ans.size();
    if (DEBUG) {
        cout << endl;
        for (auto &v : ans) {
            cout << v.first << " " << v.second << endl;
        }
        for (auto &v : Board1) {
            cout << v << " ";
        }
        cout << endl;
        for (auto &v : Board2) {
            cout << v << " ";
        }
        cout << endl;
    }
    return ans.size();
}

int force() {
    int N, M;
    cin >> N >> M;
    lld x1, a1, b1, c1, r1;
    lld x2, a2, b2, c2, r2;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    vector<lld> Board1(N);
    vector<lld> Board2(M);
    Board1[0] = x1;
    Board2[0] = x2;
    int maxnm = max(N, M);
    for (int i = 1; i < maxnm; ++i) {
        if (i < N) {
            Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
        }
        if (i < M) {
            Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
        }
    }
    set<pii> ans;
    unordered_set<int> aa;
    for (int i = 0; i < N; ++i) {
        aa.insert(Board1[i]);
        unordered_set<int> bb;
        for (int j = 0; j < M; ++j) {
            bb.insert(Board2[j]);
            if (aa == bb) {
                ans.insert(pii(i, j));
            } 
        }
    }
    cout << ans.size();
    if (DEBUG) {
        cout << endl;
        for (auto &v : ans) {
            cout << v.first << " " << v.second << endl;
        }
        for (auto &v : Board1) {
            cout << v << " ";
        }
        cout << endl;
        for (auto &v : Board2) {
            cout << v << " ";
        }
        cout << endl;
    }
    return ans.size();
}

int main(int argc, char* argv[]) {
    int f = 0;
    if (argc > 1 && strcmp(argv[1], "force")) {
        f = 1;
    }
    int TTT;
    cin >> TTT;
    for (int tid = 1; tid <= TTT; ++tid) {
        cout << "Case #" << tid << ": ";
        if (f) {
            force();
        } else {
            solve();
        }
        cout << endl;
    }
    return 0;
}


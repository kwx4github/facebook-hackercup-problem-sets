import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

class Task {
	Scanner scanner;
	PrintWriter printWriter;
	int subTasksNumber;
	
	public void read() throws FileNotFoundException {
		scanner = new Scanner(new File("inputinput.txt"));
		printWriter = new PrintWriter(new File("output.txt"));
		subTasksNumber = scanner.nextInt();
	}
	
	public void solve() {
		for (int i = 1; i <= subTasksNumber; i++) {
			(new SubTask(i)).run();
		}
	}
	
	public void run() throws FileNotFoundException {
		read();
		solve();
		printWriter.close();
	}
	
	class SubTask {
		
		int number;
		long answer;
		long n, m;
		long B1[], B2[];
		long x1, x2, a1, b1, a2, b2, c1, c2, r1, r2;
		SubTask(int number) {
			this.number = number;
		}
		
		public void read() {
			n = (long)scanner.nextInt();
			m = (long)scanner.nextInt();
			x1 = (long)scanner.nextInt();
			a1 = (long)scanner.nextInt();
			b1 = (long)scanner.nextInt();
			c1 = (long)scanner.nextInt();
			r1 = (long)scanner.nextInt();
			x2 = (long)scanner.nextInt();
			a2 = (long)scanner.nextInt();
			b2 = (long)scanner.nextInt();
			c2 = (long)scanner.nextInt();
			r2 = (long)scanner.nextInt();
			
		}
		public void set() {
			B1 = new long[(int) (n + 8)];
			B2 = new long[(int) (m + 8)];
			B1[0] = x1;
			B2[0] = x2;
			for (int i = 1; i < Math.max(n, m); i++) {
				if (i < n) {
					B1[i] = ((a1 * B1[(int) ((i-1) % n)])%r1 + (b1 * B2[(int) ((i-1) % m)])%r1 + c1) % r1;
				}
				if (i < m) {
					B2[i] = ((a2 * B1[(int) ((i-1) % n)])%r2 + (b2 * B2[(int) ((i-1) % m)])%r2 + c2) % r2;
				}
			}
		}
		public void solve() {
			set();
			int p1[] = new int[1000000 + 6];
			int p2[] = new int[1000000 + 6];
			for (int i = 0; i < 1000000 + 6; i++) {
				p1[i] = p2[i] =  -1;
			}
			Set<Long> set1 = new TreeSet<Long>();
			Set<Long> set2 = new TreeSet<Long>();
			int i1 = 0;
			int i2 = 0;	
			Set<Long> sset1 = new TreeSet<Long>();
			Set<Long> sset2 = new TreeSet<Long>();
			long ans = 0;
			while (i1 < n || i2 < m) {
				int I1 = i1, I2 = i2;
				while (I1 < n && set2.contains(B1[I1])) {
					I1++;
				}
				while (I2 < m && set1.contains(B2[i2])) {
					I2++;
				}
				ans += ((long)(I1 - (i1 - 1)) * (long)(I2 - (i2 - 1)));
				i1 = I1;
				i2 = I2;

				set2.add(B2[i2]);
				if (i2 >= m || i1 >= n) {
					break;
				}
				sset1.add(B2[i2]); i2++;
				while ((i1 < n || i2 < m) && (sset1.size() != 0 || sset2.size() != 0)) {
					while (sset1.size() != 0 && i1 < n) {
						set1.add(B1[i1]);
						if (sset1.contains(B1[i1])) {
							sset1.remove(B1[i1]);
						}
						if (!set2.contains(B1[i1])) {
							sset2.add(B1[i1]);
						}
						i1++;
					}
					while (sset2.size() != 0 && i2 < m) {
						set2.add(B2[i2]);
						if (sset2.contains(B2[i2])) {
							sset2.remove(B2[i2]);
						}
						if (!set1.contains(B2[i2])) {
							sset1.add(B2[i2]);
						}
						i2++;
					}
					if (i1 == n && i2 == m && sset1.size() == 0 && sset2.size() == 0) {
						ans++;
					}
				}
			}
			answer = ans - 1;
		}
		
		public void write() {
			printWriter.println("Case #" + number + ": " + answer);
		}
		
		public void run() {
			read();
			solve();
			write();
		}
	}
	
}


public class Main {
	public static void main(String[] args) throws FileNotFoundException {
		(new Task()).run();
	}
}

#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <set>
#include <queue>
#define FOR(a,b,c) for(int (a) = (b), _n = (c); (a) <= _n ; (a)++)
#define FORD(a,b,c) for(int (a) = (b), _n = (c) ; (a) >= _n ; (a)--)
#define FOR_N(a,b,c,n) for(int (a) = (b), _m = (n), _n = (c) ; (a) <= _n ; (a)+= _m )
#define FORD_N(a,b,c,n) for(int (a) = (b), _m = (n), _n = (c) ; (a) >= _n ; (a)-= _m)
#define EACH(v,it) for(__typeof(v.begin()) it = v.begin(); it != v.end() ; it++)
#define INF 200000000
#define MAX_BOARD 1000100

using namespace std;

typedef pair<int,int> pii;

vector<pii> v1,v2;
int board1[MAX_BOARD],board2[MAX_BOARD];
int N,M;

void generate()
{
    int x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;
    set<int> sets;
    scanf("%d %d %d %d %d",&x1,&a1,&b1,&c1,&r1);
    scanf("%d %d %d %d %d",&x2,&a2,&b2,&c2,&r2);
    board1[0] = x1;
    board2[0] = x2;
    FOR(i,1,max(N,M)-1)
    {
        if(i < N)
        {
            board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1;
        }
        if(i < M)
        {
            board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2;
        }
    }
    v1.push_back(pii(board1[0],1));
    sets.insert(board1[0]);
    FOR(i,1,N-1)
    {
        int x = board1[i],y = v1.size()-1;
        if(sets.find(x) != sets.end()) 
        {
            v1[y].second++;
            continue;
        }
        v1.push_back(pii(board1[i],1));
        sets.insert(board1[i]);
    }
    sets.clear();
    v2.push_back(pii(board2[0],1));
    sets.insert(board2[0]);
    FOR(i,1,M-1)
    {
        int x = board2[i], y = v2.size()-1;
        if(sets.find(x) != sets.end())
        {            
            v2[y].second++;
            continue;
        }
        v2.push_back(pii(board2[i],1));
        sets.insert(board2[i]);
    }
}

void printContent()
{
    FOR(i,0,N-1) cerr << board1[i]<< " ";
    puts("");
    FOR(i,0,M-1) cerr << board2[i]<< " ";
    puts("");
    EACH(v1,it)
    {
        fprintf(stderr,"{%d,%d},",it->first, it->second);
    }
    puts("");
    EACH(v2,it)
    {
        fprintf(stderr,"{%d,%d},",it->first, it->second);
    }
}

long long solve()
{
    long long ret = 0;
    int size1 = v1.size(), size2 = v2.size();
    set<int> s1,s2;
    queue<int> q1,q2;
    int pos1 = 0,pos2 = 0;    
    while(pos1 < size1 && pos2 < size2)
    {
        s1.insert(v1[pos1].first);
        s2.insert(v2[pos2].first);
        q1.push(v1[pos1].first);
        while(!q1.empty() && q2.empty())
        {
            while(!q1.empty())
            {
                int front = q1.front();
                q1.pop();
                if(s2.find(front) != s2.end()) // ketemu
                {            
                    continue;
                }
                FOR(i,pos2,size2)
                {
                    if(i == size2) 
                    {
                        pos2 = i;
                        break;
                    }
                    if(v2[i].first != front)
                    {
                        q2.push(v2[i].first);
                        s2.insert(v2[i].first);
                    }
                    else
                    {
                        pos2 = i;
                        break;
                    }
                }
            }   
            while(!q2.empty())
            {
                int front = q2.front();
                q2.pop();
                if(s1.find(front) != s1.end()) // ketemu
                {            
                    continue;
                }
                FOR(i,pos1,size1)
                {
                    if(i == size1)
                    {
                        pos1 = size1;
                        break;
                    }
                    if(v1[i].first != front)
                    {
                        q1.push(v1[i].first);
                        s1.insert(v1[i].first);
                    }
                    else
                    {
                        pos1 = i;
                        break;
                    }
                }
            }
        }    
        if(pos1 != size1 && pos2 != size2) 
        {
            ret += (long long)v1[pos1].second * (long long)v2[pos2].second;
            pos1++; pos2++;
        }
    }
    return ret;
}

int main()
{
    int t;
    scanf("%d",&t);
    FOR(ca,1,t)
    {
        cerr << "Case : " << ca << endl;
        v1.clear(); v2.clear();
        scanf("%d %d",&N,&M);
        generate();
        printf("Case #%d: %I64d\n",ca,solve());
    }
    return 0;
}

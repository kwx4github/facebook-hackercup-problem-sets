def main():
    ifp = open('magic_pairs.txt', 'r')
    ofp = open('magic_pairs_output.txt', 'w')
    t = int(ifp.readline())
    for tc in range(t):
        n, m = list(map(lambda x: int(x), ifp.readline().split()))
        x1, a1, b1, c1, r1 = list(map(lambda x: int(x), ifp.readline().split()))
        x2, a2, b2, c2, r2 = list(map(lambda x: int(x), ifp.readline().split()))
        board1, board2 = [x1], [x2]
        for i in range(1, max(n, m)):
            board1.append((a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1)
            board2.append((a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2)
        i1, i2 = 0, 0
        count = 0
        s = set()
        while i1 < n and i2 < m:
            s1, s2 = {board1[i1]}, {board2[i2]}
            while s1 or s2:
                while i2 < m and s1:
                    if board2[i2] in s1:
                        s1.remove(board2[i2])
                        s.add(board2[i2])
                    elif board2[i2] not in s:
                        s2.add(board2[i2])
                    if not s1:
                        break
                    i2 += 1
                if i2 >= m:
                    break
                while i1 < n and s2:
                    if board1[i1] in s2:
                        s2.remove(board1[i1])
                        s.add(board1[i1])
                    elif board1[i1] not in s:
                        s1.add(board1[i1])
                    if not s2:
                        break
                    i1 += 1
                if i1 >= n:
                    break
            if not s1 and not s2:
                c1, c2 = 0, 0
                while i1 < n and board1[i1] in s:
                    c1 += 1
                    i1 += 1
                while i2 < m and board2[i2] in s:
                    c2 += 1
                    i2 += 1
                count += c1 * c2
        ofp.write("Case #%d: %d\n" % (tc + 1, count))

if __name__ == '__main__':
    main()
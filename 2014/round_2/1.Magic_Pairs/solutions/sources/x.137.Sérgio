#include <cstdio>
#include <algorithm>
#include <cstring>
#include <utility>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <iostream>
#include <set>
#include <cmath>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#define db(x) cout << #x " == " << x << endl
//#define _ << ", " <<
#define iter(a) typeof((a).begin())
#define Tr(a,b) for(iter(b) a = (b).begin(); a != (b).end(); ++a)
#define Fr(a,b,c) for( int a = b ; a < c ; ++a )
#define rF(a,b,c) for( int a = c-1; a>=b ; --a )
#define Rp(a,b) Fr(a,0,b)
#define fr Fr
#define rp Rp
#define CL(a,b) memset(a,b,sizeof(a))
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<pair<int,int> > vpii;
#define F first
#define S second
#define mp make_pair
#define PB push_back
#define y1 Y1
#define INF 0x3f3f3f3f
#define LINF 0x3f3f3f3f3f3f3f3fLL
#define ULMAX 0xffffffffffffffffULL

#define dbg if(0)



int t,n,m;

ll x1,a1,b1,c1,r1;
ll x2,a2,b2,c2,r2;

int bo1[1000100], bo2[1000100];

set<int> s1, s2;
pii g1[1000100];
int tg1[1000100];
pii g2[1000100];
int tg2[1000100];
int q1, q2;


void faz(pii a[], int v[], int &q,int n, int tg[]){
	set<int> s;
	q = 0;
	fr(i,0,n){
		int pnt = i;
		s.insert(v[i]);
		while(pnt < n && s.find(v[pnt]) != s.end()){
			pnt++;
		}
		a[q] = mp(i,pnt-1);
		tg[q] = s.size();
		q++;
		i = pnt-1;
	}
}



int main() {
//	cin.sync_with_stdio(false);
	scanf("%d",&t);
	fr(cas,1,t+1){
		scanf("%d %d",&n,&m);
		scanf("%lld %lld %lld %lld %lld",&x1,&a1,&b1,&c1,&r1);
		scanf("%lld %lld %lld %lld %lld",&x2,&a2,&b2,&c2,&r2);
		bo1[0] = x1;
		bo2[0] = x2;
		fr(i,1,n){
			bo1[i] = ((a1*bo1[(i-1)%n]) + b1*bo2[(i-1)%m] + c1)%r1;
			bo2[i] = ((a2*bo1[(i-1)%n]) + b2*bo2[(i-1)%m] + c2)%r2;
		}
		s1.clear();
		s2.clear();
		ll rs = 0LL;
		int nd1 = 0, nd2 = 0;
		int p = 0;
		int j = 0;
		faz(g1,bo1,q1,n,tg1);
		faz(g2,bo2,q2,m,tg2);
		fr(i,0,q1){
			int x = lower_bound(tg2,tg2+q2,tg1[i])-tg2;
			while(p <= g1[i].S){
				if(s1.find(bo1[p]) == s1.end()){
					if(s2.find(bo1[p]) == s2.end()){
						nd2++;
					}
					else nd1--;
				}
				s1.insert(bo1[p]);
				p++;
			}
			if(tg2[x] == tg1[i]){
				while(j <= g2[x].S){
					if(s2.find(bo2[j]) == s2.end()){
						if(s1.find(bo2[j]) == s1.end()){
							nd1++;
						}
						else nd2--;
					}
					s2.insert(bo2[j]);
					j++;
				}
				if(nd1 == 0 && nd2 == 0){
					rs += (g2[x].S-g2[x].F+1LL)*(g1[i].S-g1[i].F+1LL);
				}
			}
		}
		printf("Case #%d: %lld\n",cas,rs);
	}
	return 0;
}































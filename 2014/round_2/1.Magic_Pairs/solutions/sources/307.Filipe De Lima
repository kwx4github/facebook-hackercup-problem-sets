#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

//#define NDEBUG
#ifdef NDEBUG
#define DEBUG if (false)
#else
#define DEBUG if (true)
#endif

#pragma GCC diagnostic warning "-Wall"
#define WRITE(x) DEBUG { cout << x << endl; }
#define WATCH(x) DEBUG { cout << #x << " = " << x << endl; }
#define ALL(x) (x).begin(), (x).end()
#define FORN(i, a, b) for(typeof(b) i = (a); i < (b); i++)
#define FOREACH(i, c) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

typedef long long ll;
typedef unsigned long long ull;

const int MAXN = 1000001;

ll board[2][MAXN];
ll nitems[MAXN];
ll x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
ll N, M;

ll pmod(ll n, ll m)
{
  return (n + m) % m;
}

void generate_boards()
{
  board[0][0] = x1;
  board[1][0] = x2;
  ll imax = max(M, N);
  FORN(i, 1, imax){
    if (i < N) board[0][i] = (a1 * board[0][pmod(i-1, N)] + b1 * board[1][pmod(i-1, M)] + c1) % r1;
    if (i < M) board[1][i] = (a2 * board[0][pmod(i-1, N)] + b2 * board[1][pmod(i-1, M)] + c2) % r2;
  }
}

ll bf()
{
  ll sol = 0;
  FORN(i, 0, N) FORN(j, 0, M) {
    set<ll> s1, s2;
    FORN(ii, 0, i+1) s1.insert(board[0][ii]);
    FORN(jj, 0, j+1) s2.insert(board[1][jj]);
    bool equal = true;
    FOREACH(it, s1) if (!s2.count(*it)) equal = false;
    FOREACH(it, s2) if (!s1.count(*it)) equal = false;
    if (equal) ++ sol;
  }
  return sol;
}


int main(){
	//Descomente para acelerar cin
	//ios::sync_with_stdio(false);
	int ntc; cin >> ntc;
	FORN(tc, 0, ntc){
	  cin >> N >> M >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
	  memset(board, 0, sizeof board);
	  memset(nitems, 0, sizeof nitems);
    generate_boards();
    
    map<ll, ll> first;
    FORN(i, 0, N){
      if (not first.count(board[0][i]))
        first[board[0][i]] = i;
      nitems[i] = first.size();
    }
    ll sol = 0;
    ll pos = 0, ni = 0;
    set<ll> items;
    FORN(i, 0, M){
      if (first.count(board[1][i]))
        pos = max(pos, first[board[1][i]]);
      else break;
      items.insert(board[1][i]);
      ni = nitems[pos];
      if (ni == items.size()){
        ll lb = lower_bound(nitems, nitems + N, ni + 1) - nitems;
        sol += lb - pos;
      }
    }
    //assert(sol == bf());
	  cout << "Case #" << (tc+1) << ": " << sol << endl;
  }

}

#include <vector>
#include <iterator>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <set>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <chrono>
using namespace std;
int bitct(long long r) {return r == 0 ? 0 : (bitct(r>>1) + (r&1));}
long long gcd(long long x, long long y) {return x ? gcd(y%x,x) : y;}
long long choose(long long n, long long q) { if(n==0 || q==0) return 1;
	if (q==1) return n; else return ( choose(n, q-1) * (n-q+1 ) /q); }
template<typename T> ostream& operator << (ostream &o,vector<T> v) {o<<"{";
	int i=0,s=v.size();for(;i+1<s;i++)o<<v[i]<<", ";if(s)o<<v[i];o<<"}";return o;}
template<typename K, typename V> ostream& operator << (ostream &o,
  unordered_map<K, V> m) {o<<"{";for(auto i:m)o<<i.first<<" -> "<< i.second <<
  ", "; o<<"}";return o;}
template<typename K, typename V> ostream& operator << (ostream &o,
  map<K, V> m) {o<<"{";for(auto i:m)o<<i.first<<" -> "<< i.second <<
  ", "; o<<"}";return o;}
template<typename K, typename V> ostream& operator << (ostream &o,
  set<K> m) {o<<"{";for(auto i:m)o<<i<< ", "; o<<"}";return o;}
template<typename K, typename V> ostream& operator << (ostream &o,
  unordered_set<K> m) {o<<"{";for(auto i:m)o<<i<< ", "; o<<"}";return o;}
//int dx[8] = {0,  1,  1,  1,  0, -1, -1, -1}
//int dy[8] = {1,  1,  0, -1, -1, -1,  0,  1}
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

void calc(ifstream &, ofstream &);
main() { stringstream filename, fnamein, fnameout;
  typedef std::chrono::duration<int,std::milli> ms;
	string file("A");
	filename << file << "-small.";
	fnamein << filename.str() << "in"; fnameout << filename.str() << "out";
	ifstream fin(fnamein.str().c_str()); ofstream fout(fnameout.str().c_str());
	int count;
	fin >> count;
	for(int i=0;i<count;i++) {
		fout << "Case #" << (i+1) << ": ";
    chrono::steady_clock::time_point t0 = chrono::steady_clock::now();
		calc(fin, fout);
    chrono::steady_clock::time_point t1 = chrono::steady_clock::now();
    cerr << "CASE" << (i+1) << " " << 
      (chrono::duration_cast<ms>(t1-t0)).count() << endl;
		fout.flush(); }
	fin.close(); fout.close(); }

void calc(ifstream &fin, ofstream &fout)
	{
  int N1, N2;
  fin >> N1 >> N2;
  int x1, a1, b1, cf1, r1;
  int x2, a2, b2, cf2, r2;

  fin >> x1 >> a1 >> b1 >> cf1 >> r1;
  fin >> x2 >> a2 >> b2 >> cf2 >> r2;

  long long out=0;
  int p1=0,p2=0;
  int maxN = max(N1, N2);
  int colors1[maxN], colors2[maxN];
  colors1[0]=x1;
  colors2[0]=x2;
  for(int i=1;i<maxN ;i++)
    {
    colors1[i]=(a1*colors1[(i-1)%N1] + b1*colors2[(i-1)%N2] +cf1)%r1;
    colors2[i]=(a2*colors1[(i-1)%N1] + b2*colors2[(i-1)%N2] +cf2)%r2;
    }


  set<int> common;
  set<int> diff1, diff2;

  int unequal=1;
  while(p2<N2 ||   p1 < N1)
    {
    //cout << " p1 " <<  p1 << " p2 " << p2 << endl;
    if(!unequal && 0==diff1.size() && 0==diff2.size())
      {
      //equal
      int p10 =p1-1,p20 =p2-1;
      while(p1<N1 && common.end() != common.find( colors1[p1]))
        { p1++; } 
      while(p2<N2 && common.end() != common.find( colors2[p2]))
        { p2++; }
      out+= (p1-p10)*(p2-p20);
      unequal=1;
      //cout << p1 << "," << p2 << endl;
      continue;
      }
    if(unequal)
      {
      unequal=false;
      diff1.insert(colors1[p1]);
      p1++;
      }
    if(p2< N2 && diff1.size()>0)
      {
      //advance 2

      int newcolor=colors2[p2];
        p2++;
      if(common.end() != common.find(newcolor))
        {
        continue;
        }
      else if(diff1.end() != diff1.find(newcolor))
        {
        common.insert(newcolor);
        diff1.erase(diff1.find(newcolor));
        }
      else
        {
        diff2.insert(newcolor);
        }

      }
    else if (p1 < N1 && diff2.size()>0)
      {

      //advance 1
      int newcolor=colors1[p1];
        p1++;
      if(common.end() != common.find(newcolor))
        {
        continue;
        }
      else if(diff2.end() != diff2.find(newcolor))
        {
        common.insert(newcolor);
        diff2.erase(diff2.find(newcolor));
        }
      else
        {
        diff1.insert(newcolor);
        }



      }
    }

  //cout << "  " << p1 << "," <<  p2 << "   " << diff1.size() << " ++ " << diff2.size() << endl;


    if(!unequal && 0==diff1.size() && 0==diff2.size())
      {
      //equal
      int p10 =p1,p20 =p2;
      while(p1<N1 && common.end() != common.find( colors1[p1]))
        { p1++; } 
      while(p2<N2 && common.end() != common.find( colors2[p2]))
        { p2++; }
      p1++;
      p2++;
      out+= (p1-p10)*(p2-p20);
      //cout << "e " << p1 << "," << p2 << endl;
      }

  fout << out << endl;
  return; 
  }

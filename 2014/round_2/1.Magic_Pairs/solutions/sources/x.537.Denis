#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
using namespace std;

int main()
{
    int tests;
    cin >> tests;
    for (int test = 1; test <= tests; ++test) {
        int n[2];
        cin >> n[0] >> n[1];
        int x[2], a[2], b[2], c[2], r[2];
        cin >> x[0] >> a[0] >> b[0] >> c[0] >> r[0];
        cin >> x[1] >> a[1] >> b[1] >> c[1] >> r[1];
        vector<int> board[2] = {vector<int>(n[0]), vector<int>(n[1])};
        board[0][0] = x[0];
        board[1][0] = x[1];
        for (int j = 1; j < max(n[0], n[1]); ++j) {
            for (int i = 0; i < 2; ++i) if (j < n[i]) {
                board[i][j] = (long long) (a[i] * board[0][(j - 1) % n[0]] + b[i] * board[1][(j - 1) % n[1]] + c[i]) % r[i];
            }
        }

        vector<pair<int, int>> prefix_match;

        vector<int> prefix_power[2] = {vector<int>(n[0]), vector<int>(n[1])};
        for (int i = 0; i < 2; ++i) {
            unordered_map<int, int> c;
            int cprefix = 0;
            for (int j = 0; j < n[i]; ++j) {
                int color = board[i][j];
                if (c[color] == 0) {
                    c[color] = 1;
                    prefix_power[i][cprefix] = j - cprefix;
                    cprefix = j;
                }
            }
            prefix_power[i][cprefix] = n[i] - cprefix;
        }

        unordered_map<int, int> counts;
        counts[board[0][0]] += 1;
        counts[board[1][0]] += 2;
        int more[2] = {1, 1}; // more[0] - количество разных чисел, которых нет на board[1]
        if (x[0] == x[1]) {
            more[0] = more[1] = 0;
        }
        for (int i = 0, j = 0; i < n[0] && j < n[1];) {
            if (more[0] == 0 && more[1] == 0) {
                // ≈сли множества равны
                //cout << "added prefixes " << i << " " << j << endl;
                prefix_match.emplace_back(i, j);

                for (; i < n[0]; ++i) {
                    int& col = counts[board[0][i]];
                    if (col == 0) {
                        ++more[0];
                        col = 1;
                        break;
                    }
                }
            }
            for (int k = 0; k < 2; ++k) {
                if (more[k] > 0) {
                    // ≈сли на доске k есть числа, которых нет на другой
                    int& idx = k == 0 ? j : i;
                    for (; idx < n[!k]; ++idx) {
                        int& col = counts[board[!k][idx]];

                        //cout << "found color " << board[!k][idx] << " on board " << !k << " at pos " << idx << " with val " << col << endl;

                        if (col == 0) { // нашли цвет, которого нигде не было
                            col = 1 << !k;
                            ++more[!k];
                        } else if (col == (1 << k)) { // нашли цвет, который был только на другой доске
                            col = 3;
                            --more[k];
                        }
                        if (more[k] == 0) break;
                    }
                }
            }
        }

        long long result = 0;
        for (const auto& p : prefix_match) {
            result += (long long) prefix_power[0][p.first] * prefix_power[1][p.second];
        }
        cout << "Case #" << test << ": " << result << endl;
    }
}
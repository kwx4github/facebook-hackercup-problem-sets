import java.io.*;
import java.util.*;
import java.util.concurrent.*;

public class MagicPairs {

	static class Input {
		int n, m;
		int x1, a1, b1, c1, r1;
		int x2, a2, b2, c2, r2;

		Input(InputReader in) throws IOException {
			n = in.nextInt();
			m = in.nextInt();
			x1 = in.nextInt();
			a1 = in.nextInt();
			b1 = in.nextInt();
			c1 = in.nextInt();
			r1 = in.nextInt();
			x2 = in.nextInt();
			a2 = in.nextInt();
			b2 = in.nextInt();
			c2 = in.nextInt();
			r2 = in.nextInt();
		}

		int[] board1;
		int[] board2;

		void calcBoards() {
			board1 = new int[n];
			board2 = new int[m];
			board1[0] = x1;
			board2[0] = x2;
			for (int i = 1; i < Math.max(n, m); i++) {
				if (i < n) {
					board1[i] = (int) (((long) a1 * board1[(i - 1) % n]
							+ (long) b1 * board2[(i - 1) % m] + c1) % r1);
				}
				if (i < m) {
					board2[i] = (int) (((long) a2 * board1[(i - 1) % n]
							+ (long) b2 * board2[(i - 1) % m] + c2) % r2);
				}
			}
		}

		Output solve() {
			calcBoards();
			int[] u = board1;
			int[] v = board2;
			int p1 = 0, p2 = 0;
			long answer = 0;
			Set<Integer> set1 = new HashSet<>();
			Set<Integer> set2 = new HashSet<>();

			Set<Integer> diff1 = new HashSet<>();
			Set<Integer> diff2 = new HashSet<>();

			while (p1 < u.length && p2 < v.length) {
				{
					int cur = u[p1++];
					if (!set1.add(cur))
						throw new AssertionError();

					if (set2.contains(cur)) {
						diff2.remove(cur);
					} else {
						diff1.add(cur);
					}
				}
				{
					int cur = v[p2++];
					if (!set2.add(cur))
						throw new AssertionError();

					if (set1.contains(cur)) {
						diff1.remove(cur);
					} else {
						diff2.add(cur);
					}
				}

				int count1 = 1;
				int count2 = 1;
				while (p1 < u.length && set1.contains(u[p1])) {
					p1++;
					count1++;
				}
				while (p2 < v.length && set2.contains(v[p2])) {
					p2++;
					count2++;
				}

				if (diff1.isEmpty() && diff2.isEmpty()) {
					answer += (long) count1 * (long) count2;
				}
			}

			return new Output(answer);
		}
	}

	static class Output {
		long answer;

		public Output(long answer) {
			this.answer = answer;
		}

		void writeOutput(PrintWriter out) {
			out.println(answer);
		}
	}

	public static void main(String[] args) throws IOException,
			InterruptedException, ExecutionException {
		InputReader in = new InputReader(new FileInputStream("pairs.in"));
		PrintWriter out = new PrintWriter("pairs.out");
		ExecutorService executor = Executors.newFixedThreadPool(1);
		int testCases = in.nextInt();
		final Input[] inputs = new Input[testCases];
		for (int i = 0; i < testCases; i++) {
			inputs[i] = new Input(in);
		}

		@SuppressWarnings("unchecked")
		Future<Output> outputs[] = new Future[testCases];

		for (int i = 0; i < testCases; i++) {
			final int testCase = i;
			outputs[i] = executor.submit(new Callable<Output>() {
				@Override
				public Output call() throws Exception {
					return inputs[testCase].solve();
				}
			});
		}

		for (int i = 0; i < testCases; i++) {
			out.print("Case #" + (i + 1) + ": ");
			outputs[i].get().writeOutput(out);
		}

		out.close();
		executor.shutdown();
	}

	static class InputReader {

		InputReader(InputStream input) {
			br = new BufferedReader(new InputStreamReader(input));
		}

		BufferedReader br;
		StringTokenizer st;
		PrintWriter out;

		String nextToken() throws IOException {
			while (st == null || !st.hasMoreTokens()) {
				String line = br.readLine();
				if (line == null) {
					return null;
				}
				st = new StringTokenizer(line);
			}
			return st.nextToken();
		}

		int nextInt() throws IOException {
			return Integer.parseInt(nextToken());
		}

		long nextLong() throws IOException {
			return Long.parseLong(nextToken());
		}

		double nextDouble() throws IOException {
			return Double.parseDouble(nextToken());
		}
	}
}
/*
 * a.cpp
 *
 *  Created on: Dec 14, 2013
 *      Author: istrandjev
 */

#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <math.h>
#include <stack>
#include <deque>
#include <numeric>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <bitset>
#include <functional>
#define all(x) x.begin(),x.end()
#define mpair make_pair
using namespace std;
typedef long long ll;
typedef long double ld;
const ld epsylon = 1e-9;


inline int get(const map<int, int>& rev, int val) {
  map<int, int>::const_iterator it = rev.find(val);
  return it == rev.end() ? -1 : it->second;
}
ll solve(const vector<int>& a, const vector<int>& b) {
  map<int, int> reva;
  for (int i = 0; i < (int)a.size(); ++i) {
    map<int, int>::iterator it = reva.find(a[i]);
    if (it == reva.end()) {
      reva[a[i]] = i;
    }
  }
  map<int, int> revb;
  for (int i = 0; i < (int)b.size(); ++i) {
    map<int, int>::iterator it = revb.find(b[i]);
    if (it == revb.end()) {
      revb[b[i]] = i;
    }
  }

//  int n = (int)a.size();
//  int m = (int)b.size();

  ll ans = 0;
  int reqa, reqb;
  reqa = get(revb, a[0]);
  reqb = get(reva, b[0]);
  if (reqa < 0 || reqb < 0) {
    return ans;
  }
  int ib = 0;
  int ia = 0;
  while (ia < (int)a.size() || ib < (int)b.size()) {
    if (ia < reqa) {
      ia++;
      int temp = get(revb, a[ia]);
      if (temp < 0) {
        return ans;
      }
      if (temp > reqb) {
        reqb = temp;
      }
      continue;
    }
    if (ib < reqb) {
      ib++;
      int temp = get(reva, b[ib]);
      if (temp < 0) {
        return ans;
      }
      if (temp > reqa) {
        reqa = temp;
      }
      continue;
    }
    ll bra = 0;
    ll brb = 0;
    while (ia < (int)a.size()) {
      int temp = get(revb, a[ia]);
      if (temp > reqb || temp < 0) {
        reqb = temp;
        break;
      }
      ia++;
      bra++;
    }
    while (ib < (int)b.size()) {
      int temp = get(reva, b[ib]);
      if (temp > reqa || temp < 0) {
        reqa = temp;
        break;
      }
      ib++;
      brb++;
    }
    ans += bra * brb;
    if (reqb < 0 || reqa < 0) {
      return ans;
    }
  }
  return ans;
}
int main() {
  freopen("facebook.in", "r", stdin);
  freopen("facebook.out", "w", stdout);
  int nt;
  cin >> nt;
  for (int it = 1; it <= nt; it++) {
    int n, m;

    cin >> n >> m;
    vector<int> board1(n), board2(m);
    int x1, a1, b1, c1, r1;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    int x2, a2, b2, c2, r2;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    board1[0] = x1;
    board2[0] = x2;
    for (int i = 1; i < max(n, m); ++i) {
      if (i < n) {
        board1[i] = (a1 * board1[(i - 1 + n) % n] + b1 * board2[(i - 1 + m) % m]
            + c1) % r1;
      }
      if (i < m) {
        board2[i] = (a2 * board1[(i - 1 + n) % n] + b2 * board2[(i - 1 + m) % m]
            + c2) % r2;
      }
    }
    cout << "Case #" << it << ": " << solve(board1, board2) << endl;
  }
  return 0;
}


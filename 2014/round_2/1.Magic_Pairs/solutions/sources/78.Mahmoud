import java.io.File;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.TreeSet;

public class A2 {
	public static void main(String[] args) throws Exception {
		// Scanner in = new Scanner(System.in);
		Scanner in = new Scanner(new File("A.in"));
		PrintWriter out = new PrintWriter("A.out");
		int tc = in.nextInt();
		int cc = 1;
		while (tc-- > 0) {
			int n = in.nextInt();
			int m = in.nextInt();
			int x1 = in.nextInt();
			long a1 = in.nextLong();
			long b1 = in.nextLong();
			long c1 = in.nextLong();
			long r1 = in.nextLong();

			int x2 = in.nextInt();
			long a2 = in.nextLong();
			long b2 = in.nextLong();
			long c2 = in.nextLong();
			long r2 = in.nextLong();

			int[] Board1 = new int[n];
			int[] Board2 = new int[m];
			Board1[0] = x1;
			Board2[0] = x2;
			for (int i = 1; i < Math.max(n, m); i++) {
				if (i < n) {
					Board1[i] = (int) ((a1 * Board1[(i - 1) % n] + b1
							* Board2[(i - 1) % m] + c1) % r1);
				}
				if (i < m) {
					Board2[i] = (int) ((a2 * Board1[(i - 1) % n] + b2
							* Board2[(i - 1) % m] + c2) % r2);
				}
			}
			TreeSet<Integer> A = new TreeSet<Integer>();
			TreeSet<Integer> B = new TreeSet<Integer>();
			int[][] distinctA = new int[n + 1][];
			int topA = 0;
			int[][] distinctB = new int[m + 1][];
			int topB = 0;
			for (int i = 0; i < n; i++) {
				if (!A.contains(Board1[i])) {
					A.add(Board1[i]);
					distinctA[topA++] = new int[] { Board1[i], i };
				}
			}
			for (int i = 0; i < m; i++) {
				if (!B.contains(Board2[i])) {
					B.add(Board2[i]);
					distinctB[topB++] = new int[] { Board2[i], i };
				}
			}
			A.clear();
			B.clear();
			int b = 0;
			long result = 0;
			for (int i = 0; i < topA; i++) {
				int val = distinctA[i][0];
				if (B.contains(val))
					B.remove(val);
				else
					A.add(val);
				while (b < topB && A.size() > 0) {
					val = distinctB[b][0];
					if (A.contains(val))
						A.remove(val);
					else
						B.add(val);
					b++;
				}
				if (B.size() == 0 && A.size() == 0) {
					long blen = (b == topB ? m : distinctB[b][1])
							- distinctB[b - 1][1];
					long alen = (i == topA - 1 ? n : distinctA[i + 1][1])
							- distinctA[i][1];
					result += alen * blen;
				}
			}
			System.out.printf("Case #%d: %d\n", cc, result);
			out.printf("Case #%d: %d\n", cc, result);
			cc++;
		}
		out.close();
	}
}

#pragma comment (linker, "/STACK:128000000")
#include <cstdio>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <unordered_map>
#include <unordered_set>
#include <ctime>
#include <stack>
#include <queue>
using namespace std;
//#define FILENAME ""
#define mp make_pair
#define all(a) a.begin(), a.end()
typedef long long li;
typedef long double ld;
void solve();
//void precalc();
clock_t start;
int timer = 1;
int main() {
#ifdef room111
    freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
    //freopen(FILENAME".in", "r", stdin);
    //freopen(FILENAME ".out", "w", stdout);
#endif
    int t = 1;
	//cout.sync_with_stdio(0);
	//precalc();
	cout.precision(10);
	cout << fixed;
	cin >> t;
	start = clock();
    while (t--) {
        solve();
		++timer;
	}

#ifdef room111
	cerr << "\n\n" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << "\n\n";
#endif

    return 0;
}

//BE CAREFUL: IS INT REALLY INT?

#define int li

/*Board1[0] = x1
Board2[0] = x2
Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1, for 0 < i < N
Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2, for 0 < i < M

0 ≤ x1, x2, a1, a2, b1, b2, c1, c2 ≤ 10^9
1 ≤ r1, r2 ≤ 10^9 
*/

int board[2][1000500];

void solve() {
	cout << "Case #" << timer << ": ";

	int n[2];
	cin >> n[0] >> n[1];
	int x[2], a[2], b[2], c[2], r[2];
	cin >> x[0] >> a[0] >> b[0] >> c[0] >> r[0];
	cin >> x[1] >> a[1] >> b[1] >> c[1] >> r[1];

	board[0][0] = x[0];
	board[1][0] = x[1];

	for (int i = 1; i < n[0] || i < n[1]; ++i) {
		for (int w = 0; w < 2; ++w)
			board[w][i] = (a[w] * board[0][(i - 1) % n[0]] + b[w] * board[1][(i - 1) % n[1]] + c[w]) % r[w];
	}

	/*for (int w = 0; w < 2; ++w) {
		for (int i = 0; i < n[w]; ++i)
			cout << board[w][i] << ' ';
		cout << endl;
	}*/
	
	//set<int> unique[2];
	vector<int> positions[2];
	map<int, int> places[2];

	for (int w = 0; w < 2; ++w) {
		set<int> had;
		for (int i = 0; i < n[w]; ++i) {
			if (!had.count(board[w][i])) {
				places[w][board[w][i]] = positions[w].size();
				positions[w].push_back(i);
				//unique[w].insert(i);
				had.insert(board[w][i]);
			}
		}
	}

	int ans = 0;
	int mxThrown = 0;

	for (int i = 0; i < positions[0].size(); ++i) {

		//cout << "pos = " << positions[0][i] << endl;
		
		int cur = board[0][positions[0][i]];
		if (!places[1].count(cur))
			break;
		int id = places[1][cur];
		//cout << cur <<' ' << "id = " << id << endl;
		mxThrown = max(mxThrown, id);
		if (mxThrown == i) {

			//cout << positions[0][i] << ' ' << cur << endl;
			//cout << "id = " << id << " mxThrown = " << mxThrown << endl;

			int ft = ((i + 1 == positions[0].size()) ? n[0] : positions[0][i + 1]) - positions[0][i];
			int sc = ((mxThrown + 1 == positions[1].size()) ? n[1] : positions[1][mxThrown + 1]) - positions[1][mxThrown];
			//cout << ft << ' ' << sc << endl;
			ans += ft * sc;
		}

	}

	cout << ans << "\n";

}
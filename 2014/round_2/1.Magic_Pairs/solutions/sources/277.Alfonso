#include <iostream>
#include <cstdio>
#include <set>
using namespace std;

const int
	MAXN = 1 << 20;

int N, M;
long long x1, a1, b1, c1, r1;
long long x2, a2, b2, c2, r2;
long long board1[MAXN];
long long board2[MAXN];

bool contains(const set< int > & S, int value)
{
	return S.find(value) != S.end();
}

int main()
{
	freopen("_magic_pairs.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int testCount;
	cin >> testCount;

	for (int test = 1; test <= testCount; ++test)
	{
		cout << "Case #" << test << ": ";

		cin >> N >> M;

		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;

		board1[0] = x1;
		board2[0] = x2;

		for (int i = 1; i < max(N, M); ++i)
		{
			board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1;
			board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2;
		}

		set< int > sa, sb;

		long long answer = 0;

		int lo = 0, hi = 0;

		for (int i = 0; i < N; ++i)
		{
			sa.insert(board1[i]);

			while (lo < M && !contains(sb, board1[i]))
			{
				sb.insert(board2[lo]);
				lo++;
			}

			if (!contains(sb, board1[i]))
				break;

			while (hi < M && contains(sa, board2[hi]))
				++hi;

			if (hi >= lo && sa.size() == sb.size())
				answer += hi - lo + 1;
		}

		cout << answer << endl;
	}

	return 0;
}

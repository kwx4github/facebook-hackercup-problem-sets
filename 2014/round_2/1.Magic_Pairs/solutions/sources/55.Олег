#include <iostream>
#include <set>
using namespace std;


const int N = 1100100;
int A[2][N];
int n[2];
int x[2], a[2], b[2], c[2], r[2];
int diff2cnt[2][N];
int curcnt[2];

set <int> was[2];



void init()
{
	for (int id = 0; id < 2; id++)
	{
		for (int i = 0; i <= n[id]; i++)
			diff2cnt[id][i] = 0;

		was[id].clear();
		A[id][0] = x[id];
		was[id].insert(x[id] );
		curcnt[id] = 1;
	}
	for (int i = 1; i < n[0] || i < n[1]; i++)
	{
		for (int id = 0; id < 2; id++)
		{
			if (i >= n[id] )
				continue;
			A[id][i] = ( a[id] * 1LL * A[0][(i - 1) % n[0] ] + b[id] * 1LL * A[1][(i - 1) % n[1] ] + c[id] ) % (long long) r[id]; 
			if (was[id].count(A[id][i] ) )
			{
				curcnt[id]++;
				continue;
			}
			diff2cnt[id][was[id].size() ] = curcnt[id];
			was[id].insert(A[id][i] );
			curcnt[id] = 1;
		}
	}
	for (int id = 0; id < 2; id++)
	{
		diff2cnt[id][was[id].size() ] = curcnt[id];
	}
}
int curpos[2];
set <int> in1not2;

void solve()
{
	scanf("%d%d", &n[0], &n[1] );
	for (int i = 0; i < 2; i++)
		scanf("%d%d%d%d%d", &x[i], &a[i], &b[i], &c[i], &r[i] );

	init();

	curpos[0] = curpos[1] = 0;
	was[0].clear();
	was[1].clear();
	in1not2.clear();
	long long ans = 0;

	for (int i = 1; i <= n[0] && i <= n[1]; i++)
	{
		bool GD = true;
		for (int id = 0; id < 2; id++)
		{
			if (curpos[id] >= n[id] )
			{
				GD = false;
				break;
			}

			int x = A[id][curpos[id] ];
			was[id].insert(x);

			if (id == 0)
			{
				if (was[1].count(x) == 0)
					in1not2.insert(x);
			}
			else if (id == 1)
			{
				in1not2.erase(x);
			}

			curpos[id] += diff2cnt[id][i];
		}
		if (!GD)
			break;

		if (in1not2.size() == 0)
			ans += diff2cnt[0][i] * 1LL * diff2cnt[1][i];
	}

	printf("%lld", ans);
}



int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int T;
	scanf("%d", &T);
	for (int i = 1; i <= T; i++)
	{
		printf("Case #%d: ", i);
		solve();
		printf("\n");
	}

	return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <math.h>
#include <queue>
#include <list>
#include <algorithm>
#include <map>
#include <set>
#include <stack>
using namespace std;

#define ALL(c) (c).begin(),(c).end()
#define PRESENT(c,x) (find(c.begin(),c.end(),x) != (c).end())
#define REP(i,n) for (int i=0;i<(n);i++)
#define FOR(i,a,b) for (int i=(a);i<=(b);i++)
#define INIT(a,v) memset(a,v,sizeof(a))
#define UNIQUE(c) (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))
template<class A, class B> A cvt(B x) { stringstream ss; ss<<x; A y; ss>>y; return y; }

typedef long long int64;
typedef pair<int,int> PII;

int n,m;
int a[1000000],b[1000000];
int64 x1, a1, b1, c1, r1;
int64 x2, a2, b2, c2, r2;

int main() {
	freopen("magic_pairs.txt","r",stdin);
	freopen("magic_pairs.out","wb",stdout);
	int T;
	scanf("%d",&T);
	FOR (t,1,T) {
		fprintf(stderr,"%d/%d\n",t,T);
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		a[0] = x1;
		b[0] = x2;
		for (int i=1;i<max(n,m);i++) {
			a[i] = (a1 * a[(i-1) % n] + b1 * b[(i-1) % m] + c1) % r1;
			b[i] = (a2 * a[(i-1) % n] + b2 * b[(i-1) % m] + c2) % r2;
		}
		//REP (i,n) printf("%d ",a[i]); printf("\n");
		//REP (i,m) printf("%d ",b[i]); printf("\n");
		set<int> s1,s2,missing;
		int j1=-1,j2=-1;
		int64 r=0;
		for (int i=0;i<n;i++) {
			missing.erase(a[i]);
			if (s1.count(a[i])) {
				if (missing.empty()) r+=j2-j1;
			} else {
				s1.insert(a[i]);
				while (j1+1<m && !s2.count(a[i])) {
					if (!s1.count(b[j1+1])) missing.insert(b[j1+1]);
					s2.insert(b[j1+1]);
					j1++;
				}
				if (!s2.count(a[i])) break;
				if (missing.empty()) {
					j2=j1+1;
					while (j2<m && s1.count(b[j2])) j2++;
					r+=j2-j1;
				}
			}
		}
		printf("Case #%d: %I64d\n",t,r);
	}
	return 0;
}

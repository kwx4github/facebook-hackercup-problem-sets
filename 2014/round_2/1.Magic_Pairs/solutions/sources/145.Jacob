#define DEBUG 1

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <complex>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <sstream>
using namespace std;
 
#define LL long long
#define LD long double
#define PR pair<int,int>
 
#define Fox(i,n) for (i=0; i<n; i++)
#define Fox1(i,n) for (i=1; i<=n; i++)
#define FoxI(i,a,b) for (i=a; i<=b; i++)
#define FoxR(i,n) for (i=n-1; i>=0; i--)
#define FoxR1(i,n) for (i=n; i>0; i--)
#define FoxRI(i,a,b) for (i=b; i>=a; i--)
#define Foxen(i,s) for (i=s.begin(); i!=s.end(); i++)
#define Min(a,b) a=min(a,b)
#define Max(a,b) a=max(a,b)
#define Sz(s) int((s).size())
#define All(s) (s).begin(),(s).end()
#define Fill(s,v) memset(s,v,sizeof(s))
#define pb push_back
#define mp make_pair
#define x first
#define y second
 
template<typename T> T Abs(T x) { return(x<0 ? -x : x); }
template<typename T> T Sqr(T x) { return(x*x); }
string plural(string s) { return(Sz(s) && s[Sz(s)-1]=='x' ? s+"en" : s+"s"); }
 
const int INF = (int)1e9;
const LD EPS = 1e-12;
const LD PI = acos(-1.0);
 
#if DEBUG
#define GETCHAR getchar
#else
#define GETCHAR getchar_unlocked
#endif
 
bool Read(int &x)
{
	char c,r=0,n=0;
	x=0;
		for(;;)
		{
			c=GETCHAR();
				if (c<0)
					return(0);
				if ((c=='-') && (!r))
					n=1;
				else
				if ((c>='0') && (c<='9'))
					x=x*10+c-'0',r=1;
				else
				if (r)
					break;
		}
		if (n)
			x=-x;
	return(1);
}

int main()
{
		if (DEBUG)
			freopen("in.txt","r",stdin);
	freopen("out.txt","w",stdout);
	int T,t;
	int i,j,x,y,p,v;
	int c1,c2;
	LL ans;
	int N[2];
	int a[2],b[2],c[2],r[2];
	set <int> S[2];
	static int V[2][1000000];
	Read(T);
		Fox1(t,T)
		{
			printf("Case #%d: ",t);
			Read(N[0]),Read(N[1]);
				Fox(i,2)
				{
					Read(x),Read(a[i]),Read(b[i]),Read(c[i]),Read(r[i]);
					V[i][0]=x;
				}
				Fox1(j,max(N[0],N[1])-1)
					Fox(i,2)
						if (j<N[i])
							V[i][j]=((LL)a[i]*V[0][(j-1)%N[0]] + (LL)b[i]*V[1][(j-1)%N[1]] + c[i])%r[i];
			S[0].clear();
			S[1].clear();
			c1=c2=0;
			ans=0;
			j=0;
				Fox(i,N[0])
				{
					v=V[0][i];
						if (S[0].count(v))
							ans+=p;
						else
						{
							S[0].insert(v);
								if (S[1].count(v))
									c2--;
								else
									c1++;
								while ((j<N[1]) && (c1>0))
								{
									v=V[1][j++];
										if (!S[1].count(v))
										{
											S[1].insert(v);
												if (S[0].count(v))
													c1--;
												else
													c2++;
										}
								}
							p=0;
								if ((!c1) && (!c2))
								{
									p=1;
										while ((j<N[1]) && (!c1) && (!c2))
										{
											v=V[1][j++];
												if (!S[1].count(v))
												{
													S[1].insert(v);
														if (S[0].count(v))
															c1--;
														else
															c2++;
												}
												else
													p++;
										}
									ans+=p;
								}
						}
				}
			printf("%lld\n",ans);
		}
	return(0);
}
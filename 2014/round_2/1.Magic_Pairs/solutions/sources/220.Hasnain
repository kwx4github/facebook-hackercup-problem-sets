#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<stack>
#include<vector>
#include<cctype>
#include<cstdio>
#include<string>
#include<sstream>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<fstream>
#include<iterator>
#include<iostream>
#include<algorithm>

using namespace std;

#pragma comment(linker,"/STACK:16777216")
#pragma warning(disable:4786)

#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define myabs(a) ((a)<0?(-(a)):(a))
#define pi acos(-1.0)
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define pb push_back
#define all(a) a.begin(),a.end()
#define ff first
#define ss second
#define eps 1e-9
#define root 1
#define lft 2*idx
#define rgt 2*idx+1
#define cllft lft,st,mid,s,e
#define clrgt rgt,mid+1,ed,s,e
#define inf (1<<29)
#define i64 long long
#define MX 1000009

typedef pair<int,int> pii;

int a[2][MX],n,m,a1,a2,b1,b2,c1,c2,r1,r2,x1,x2;
map<int,int> vi[2];

queue<int> q;

void gen(){
    int i;
    a[0][0]=x1;
    a[1][0]=x2;
    for(i=1;i<n || i<m;i++){
        a[0][i]=(a1*(i64)a[0][(i+n-1)%n] + b1*(i64)a[1][(i+m-1)%m] + c1)%r1;
        a[1][i]=(a2*(i64)a[0][(i+n-1)%n] + b2*(i64)a[1][(i+m-1)%m] + c2)%r2;
        //cerr<<a[0][i]<<" "<<a[1][i]<<endl;
    }
}

int push_func(int fl,int idx,int val,int nn){
	if(vi[fl][val])return idx;
    int i,v;
    for(i=idx;i<nn;i++){
        v=a[fl][i];
        if(!vi[fl][v]){
            q.push(v);
            vi[fl][v]=1;
        }
		if(v==val)break;
    }
    return i;
}

int get_new(int fl,int idx,int nn){
    while(idx<nn && vi[fl][a[fl][idx]])idx++;
    return idx;
}

int main(){
	freopen("_magic_pairs.txt","r",stdin);
	freopen("out.txt","w",stdout);
	int cs,t=1;
	i64 i,j,u,ii,jj;
	i64 res;
	cin>>cs;
	while(cs--){
	    cin>>n>>m;
	    cin>>x1>>a1>>b1>>c1>>r1;
	    cin>>x2>>a2>>b2>>c2>>r2;
	    gen();
        while(!q.empty())q.pop();
	    vi[0].clear();
	    vi[1].clear();
	    res=i=j=0;
	    while(i<n && j<m){
	        q.push(a[0][i]);
	        while(!q.empty() && i<n && j<m){
	            u=q.front();q.pop();
	            i=push_func(0,i,u,n);
	            j=push_func(1,j,u,m);
	        }
	        ii=i;
	        jj=j;
	        i=get_new(0,i,n);
	        j=get_new(1,j,m);
	        res+=(i-ii)*(j-jj);
	    }

	    cout<<"Case #"<<t++<<":";
	    cerr<<"Case #"<<t<<":";

	    cout<<" "<<res<<endl;
	    cerr<<" "<<res<<endl;
	}
	return 0;
}



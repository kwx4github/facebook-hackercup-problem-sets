#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <set>
#include <memory.h>

using namespace std;
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LL long long

LL max(LL a,LL b){if (a>b){return a;} else {return b;}}
LL min(LL a,LL b){if (a<b){return a;} else {return b;}}

int n, m;
LL bo1[1002001], bo2[1002001];
void solve(int tc){
    scanf("%d%d", &n, &m);
    LL x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
    scanf("%I64d%I64d%I64d%I64d%I64d%I64d%I64d%I64d%I64d%I64d", &x1, &a1, &b1, &c1, &r1, &x2, &a2, &b2, &c2, &r2);
    bo1[0] = x1;
    bo2[0] = x2;
    FOR(i, 1, max(n, m)) {
        bo1[i] = (a1 * bo1[(i-1)%n] + b1 * bo2[(i-1)%m] + c1) % r1;
        bo2[i] = (a2 * bo1[(i-1)%n] + b2 * bo2[(i-1)%m] + c2) % r2;
    }
  //  cout<<"LIST"<<endl;
  //  puts("----------");
  //  FOE(i, 0, n-1) cout<<bo1[i]<<" ";
  //  puts("");
  //  FOE(i, 0, m-1) cout<<bo2[i]<<" ";
  //  puts("");
   // puts("----------");
    LL p1 = 0, p2 = 0;
    set<int> q1, q2, q3, q4;
    set<int>::iterator it;
    q1.empty();
    q2.empty();
    q3.empty();
    q4.empty();
    LL res = 0;
    while ((p1 < n) && (p2 < m)){
        if (bo1[p1] != bo2[p2]){
            q3.insert(bo1[p1]);
            q4.insert(bo2[p2]);

        } q2.insert(bo2[p2]); q1.insert(bo1[p1]);
       // cout<<p1<<" "<<p2<<endl;
        while ((q3.size() || q4.size()) && (p1 < n) && (p2 < m)){
           //     if (q2.find(1) == q2.end()) puts("DEBUG2");
            //    cout<<p1<<" "<<p2<<" "<<q3.size()<<" "<<q4.size()<<" "<<*q3.begin()<<endl;
            while ((q3.size()) && (p2 < m)){
                    p2++;
                    if (p2 < m){
                        it = q2.find(bo2[p2]);
                        if (it == q2.end()){
                            it = q3.find(bo2[p2]);
                            if (it != q3.end()) {
                                    q3.erase(it);
                                    q2.insert(bo2[p2]);
                            }
                        else {
                            q4.insert(bo2[p2]);
                            q2.insert(bo2[p2]);
                            }
                        }
                    }
            }
            //    if (q2.find(1) == q2.end()) puts("DEBUG2");
           //     cout<<p1<<" "<<p2<<" "<<q3.size()<<" "<<q4.size()<<" "<<*q4.begin()<<endl;
            while ((q4.size()) && (p1 < n)){
                p1++;
                    if (p1 < n){
                        it = q1.find(bo1[p1]);
                        if (it == q1.end()){
                            it = q4.find(bo1[p1]);
                            if (it != q4.end()) {
                                    q4.erase(it);
                                    q1.insert(bo1[p1]);
                            }
                        else {
                            q3.insert(bo1[p1]);
                            q1.insert(bo1[p1]);
                            }
                        }
                    }
            }

        }
      //  cout<<"ENDPHASE "<<p1<<" "<<p2<<endl;
        LL h1 = p1, h2 = p2;
        if ((p1 < n) && (p2 < m)){
            while ((q1.find(bo1[h1]) != q1.end()) && (h1 <= n-1)) h1++;
            while ((q2.find(bo2[h2]) != q2.end()) && (h2 <= m-1)) h2++;
            res += (h1 - p1) * (h2 - p2);
        }
     //   cout<<"H "<<h1<<" "<<h2<<endl;
        p1 = h1;
        p2 = h2;
    }
    cout<<"Case #"<<tc<<": "<<res<<endl;
}


int main(){
    freopen("1.in", "r", stdin);
    freopen("1.out", "w", stdout);
    int T;
    scanf("%d", &T);
    FOE(i, 1, T) solve(i);
    return 0;
}


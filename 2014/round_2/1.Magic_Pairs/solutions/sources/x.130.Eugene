#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <set>

using namespace std;

ifstream fin("magic.in");
ofstream fout("magic.out");

long long board1[1000000 + 5];
long long board2[1000000 + 5];

long long solve()
{
	long long n, m;
	fin >> n >> m;
	bool swapped = false;
	if (n < m)
	{
		long long temp = n;
		n = m;
		m = temp;
		swapped = true;
	}
	// n > m
	long long x1, a1, b1, c1, r1;
	long long x2, a2, b2, c2, r2;
	if (swapped)
	{
		fin >> x2 >> a2 >> b2 >> c2 >> r2;
		fin >> x1 >> a1 >> b1 >> c1 >> r1;
	}
	else
	{
		fin >> x1 >> a1 >> b1 >> c1 >> r1;
		fin >> x2 >> a2 >> b2 >> c2 >> r2;
	}

	board1[0] = x1;
	board2[0] = x2;
	for (long long i = 1; i < m; i++)
	{
		board1[i] = (a1 * board1[i - 1] + b1 * board2[i - 1] + c1) % r1;
		board2[i] = (a2 * board1[i - 1] + b2 * board2[i - 1] + c2) % r2;
	}
	for (long long i = m; i < n; i++)
	{
		board1[i] = (a1 * board1[i - 1] + b1 * board2[(i - 1) % m] + c1) % r1;
	}

	long long pt1 = 0, pt2 = 0;

	long long one_not_two = 0;
	long long two_not_one = 0;

	set<long long> one;
	set<long long> two;

	long long ans = 0;

	while (pt1 < n && pt2 < m)
	{
		long long oldpt1 = pt1, oldpt2 = pt2;
		while (one.find(board1[pt1]) != one.end() && pt1 < n)
			pt1++;

		while (two.find(board2[pt2]) != two.end() && pt2 < m)
			pt2++;

		if (one_not_two == 0 && two_not_one == 0)
			ans += (pt1 - oldpt1) * (pt2 - oldpt2);

		if (pt1 < n)
		{
			one.insert(board1[pt1]);
			if (two.find(board1[pt1]) == two.end())
				one_not_two++;

			else
				two_not_one--;

		}

		if (pt2 < m)
		{
			two.insert(board2[pt2]);
			if (one.find(board2[pt2]) == one.end())
				two_not_one++;
			else
				one_not_two--;
		}


	}
	return ans;
}

int main()
{
	long long t; fin >> t;
	for (long long i = 0; i < t; i++)
	{
		fout << "Case #" << i + 1 << ": " << solve() << endl;
	}
	return 0;
}
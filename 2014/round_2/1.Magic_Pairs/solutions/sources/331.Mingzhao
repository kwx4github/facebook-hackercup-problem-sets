#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <sstream>

#define REP(i,n) for(int i=0;i<(n);i++)
#define REPD(i,n) for(int i=n-1;i>=0;i--)
#define FOR(i,n) for(int i=1;i<=(n);i++)
#define FORD(i,n) for(int i=(n);i>=1;i--)

#define SZ(x) ((int)x.size())
#define CC(a,x) memset(a,x,sizeof(a))
#define TWO(x) ((LL)1<<(x))

#define DEBUG

using namespace std;

typedef long long LL;

int a[3][1000001];

struct node {
    int pos;
    int v;
    int v1;
    int v2;
    int v3;
    node() {
        pos=v=v1=v2=v3=0;
    }
};

const int mod = 1<<20;

set <int> has;
vector <node> hash[1<<20];

node add(int pos, node old, int val) {
    int v = ((val - (val ^ (val>>2)) + val * 53323 + val*424521)^old.v) & (mod-1);
    int v1 = ((val + val * 43251 + val*421874)^old.v1) & (mod-1);
    int v2 = ((val>>2 + val * 56751 + val*331245)^old.v2) & (mod-1);
    int v3 = ((val>>5 + val * 96717 + val ^ 436714)^old.v3) & (mod-1);
    int n = SZ(hash[v]);
    REP(i, n) {
        if (hash[v][i].v1 == v1 && hash[v][i].v2 == v2 && hash[v][i].v3 == v3) return hash[v][i];
    }
    node x;
    x.pos = pos;
    x.v1 = v1;
    x.v2 = v2;
    x.v3 = v3;
    x.v = v;
    hash[v].push_back(x);
    return x;
}

node find(node old, int val) {
    int v = ((val - (val ^ (val>>2)) + val * 53323 + val*424521)^old.v) & (mod-1);
    int v1 = ((val + val * 43251 + val*421874)^old.v1) & (mod-1);
    int v2 = ((val>>2 + val * 56751 + val*331245)^old.v2) & (mod-1);
    int v3 = ((val>>5 + val * 96717 + val ^ 436714)^old.v3) & (mod-1);
    int n = SZ(hash[v]);
    REP(i, n) {
        if (hash[v][i].v1 == v1 && hash[v][i].v2 == v2 && hash[v][i].v3 == v3) return hash[v][i];
    }
    node x;
    x.pos = -1;
    x.v1 = v1;
    x.v2 = v2;
    x.v3 = v3;
    x.v = v;
    return x;
}

int d[1000001];

int main()
{
#ifdef DEBUG
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
#endif
    int T;
    scanf("%d", &T);
    FOR(t, T) {
        int n,m;
        LL x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;
        cin>>n>>m;
        cin>>x1>>a1>>b1>>c1>>r1;
        cin>>x2>>a2>>b2>>c2>>r2;
        a[1][0] = x1;
        a[2][0] = x2;
        FOR(i, max(n, m)) {
            if (i <= n)
                a[1][i] = (a1*a[1][(i-1)%n] + b1*a[2][(i-1)%m]+c1)%r1;
            if (i <= m)
                a[2][i] = (a2*a[1][(i-1)%n] + b2*a[2][(i-1)%m]+c2)%r2;
        }
        node x;
        has.clear();
        CC(d, 0);
        REP(i, n) {
            if (has.find(a[1][i]) == has.end()) {
                x = add(i, x, a[1][i]);
                has.insert(a[1][i]);
                d[i] = -1;
            }
        }
        d[n] = n;
        REPD(i, n) {
            int t = d[i];
            d[i] = d[i+1];
            while (t == -1) {
                if (i <= 0) break;
                t = d[i-1];
                d[i-1] = i;
                i--;
            }
        }
        has.clear();
        node y;
        y.pos = -1;
        LL ans = 0;
        REP(i, m) {
            if (has.find(a[2][i]) == has.end()) {
                y = find(y, a[2][i]);
                has.insert(a[2][i]);
            }
            if (y.pos!=-1) {
                ans += d[y.pos] - y.pos;
            }
        }
        cout<<"Case #"<<t<<": "<<ans<<endl;
    }
	return 0;
}

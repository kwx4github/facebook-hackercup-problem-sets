
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;


public class MagicPairs {

    private void processInput() throws IOException {
        Scanner in = new Scanner(System.in);
        
        int T = in.nextInt();

        for (int testCase = 1; testCase <= T; testCase++) {
            int n = in.nextInt();
            int m = in.nextInt();
            
            long x1 = in.nextLong();
            long a1 = in.nextLong();
            long b1 = in.nextLong();
            long c1 = in.nextLong();
            long r1 = in.nextLong();

            long x2 = in.nextLong();
            long a2 = in.nextLong();
            long b2 = in.nextLong();
            long c2 = in.nextLong();
            long r2 = in.nextLong();

            int[] board1 = new int[n];
            int[] board2 = new int[m];
            board1[0] = (int) x1;
            board2[0] = (int) x2;
            for (int i = 1; i < Math.max(n, m); i++) {
                if (i < n) {
                    board1[i] = (int)((a1 * board1[(i - 1) % n] + b1 * board2[(i-1) % m] + c1) % r1);
                }
                if (i < m) {
                    board2[i] = (int)((a2 * board1[(i - 1) % n] + b2 * board2[(i-1) % m] + c2) % r2);
                }
            }
            long res = go(n, m, board1, board2);

            System.out.printf(Locale.ENGLISH, "Case #%d: %d\n", testCase, res);         
        }
        
        in.close();

    }
    
    private long go(int n, int m, int[] board1, int[] board2) {
        long res = 0;
        
        Map<Integer, Integer> map1 = new HashMap<Integer, Integer>();
        Map<Integer, Integer> map2 = new HashMap<Integer, Integer>();
        for (int i = 0; i < n; i++) {
            if (!map1.containsKey(board1[i])) {
                map1.put((int)board1[i], i);
            }
        }
        for (int i = 0; i < m; i++) {
            if (!map2.containsKey(board2[i])) {
                map2.put((int)board2[i], i);
            }
        }
        
        int j = 0;
        int lastj = 0;
        Set<Integer> s1 = new HashSet<Integer>();
        Set<Integer> ms1 = new HashSet<Integer>();
        Set<Integer> ms2 = new HashSet<Integer>();
        for (int i = 0; i < n; i++) {
            int last = board1[i];
            if (!ms2.contains(last)) {
                if (!s1.contains(last)) {
                    ms1.add(last);
                }
            } else {
                ms2.remove(last);
                
            }
            s1.add(board1[i]);
            
            while (j < m && ms1.contains(last)) {
                if (s1.contains(board2[j])) {
                    ms1.remove(board2[j]);
                } else {
                    ms2.add(board2[j]);
                }
                j++;
                
            }
            if (ms1.isEmpty() && ms2.isEmpty()) {
                int idx = lastj;
                while (idx < m && (s1.contains(board2[idx]) || ms2.contains(board2[idx]))) {
                    idx++;
                }
                lastj = idx;
                res += idx - j + 1;
            }

        }
        
        return res;
    }

    public static void main(String[] args) throws Exception {
        MagicPairs a = new MagicPairs();
        a.processInput();
    }
}

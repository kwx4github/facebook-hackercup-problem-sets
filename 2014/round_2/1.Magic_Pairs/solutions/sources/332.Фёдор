import java.io.*;
import java.util.*;

public class MagicPairs {

    static class Assert {
        static void check(boolean e) {
            if (!e) {
                throw new Error();
            }
        }
    }

    Scanner in;
    PrintWriter out;

    int count1not2;
    int count2not1;

    void put1(int used1[], int used2[], int value) {
        int index = value >> 5;
        int mask = 1 << (value & 31);
        if ((used1[index] & mask) == 0) {
            used1[index] |= mask;
            if ((used2[index] & mask) == 0) {
                count1not2++;
            } else {
                count2not1--;
                Assert.check(count2not1 >= 0);
            }
        }
    }

    void put2(int used1[], int used2[], int value) {
        int index = value >> 5;
        int mask = 1 << (value & 31);
        if ((used2[index] & mask) == 0) {
            used2[index] |= mask;
            if ((used1[index] & mask) == 0) {
                count2not1++;
            } else {
                count1not2--;
                Assert.check(count1not2 >= 0);
            }
        }
    }

    boolean contains(int used[], int value) {
        int index = value >> 5;
        int mask = 1 << (value & 31);
        return (used[index] & mask) != 0;
    }

    long solveOne() {
        int size1 = in.nextInt();
        int size2 = in.nextInt();
        int start1 = in.nextInt();
        long a1 = in.nextInt();
        long b1 = in.nextInt();
        int c1 = in.nextInt();
        int mod1 = in.nextInt();
        int start2 = in.nextInt();
        long a2 = in.nextInt();
        long b2 = in.nextInt();
        int c2 = in.nextInt();
        int mod2 = in.nextInt();
        int board1[] = new int[size1];
        int board2[] = new int[size2];
        board1[0] = start1;
        board2[0] = start2;
        for (int i = 1; i < size1 || i < size2; i++) {
            if (i < size1) {
                board1[i] = (int)((a1 * board1[(i - 1) % size1] + b1 * board2[(i - 1) % size2] + c1) % mod1);
            }
            if (i < size2) {
                board2[i] = (int)((a2 * board1[(i - 1) % size1] + b2 * board2[(i - 1) % size2] + c2) % mod2);
            }
        }
        int size = Math.max(Math.max(start1, start2), Math.max(mod1 - 1, mod2 - 1));
        int used1[] = new int[1 + size];
        int used2[] = new int[1 + size];
        count1not2 = 0;
        count2not1 = 0;
        put1(used1, used2, start1);
        put2(used1, used2, start2);
        int pos1 = 0;
        int pos2 = 0;
        long pairCount = 0;
        while (true) {
            if (count1not2 == 0 && count2not1 == 0) {
                long beginPos1 = pos1;
                long beginPos2 = pos2;
                while (pos1 < size1 && contains(used1, board1[pos1])) {
                    pos1++;
                }
                while (pos2 < size2 && contains(used2, board2[pos2])) {
                    pos2++;
                }
                pairCount += (pos1 - beginPos1) * (pos2 - beginPos2);
                if (pos1 == size1) {
                    break;
                }
                if (pos2 == size2) {
                    break;
                }
                put1(used1, used2, board1[pos1]);
                put2(used1, used2, board2[pos2]);
            } else if (count1not2 > 0) {
                pos2++;
                if (pos2 == size2) {
                    break;
                }
                put2(used1, used2, board2[pos2]);
            } else if (count2not1 > 0) {
                pos1++;
                if (pos1 == size1) {
                    break;
                }
                put1(used1, used2, board1[pos1]);
            } else {
                throw new Error();
            }
        }
        return pairCount;
    }

    void solve() {
        int nTests = in.nextInt();
        for (int i = 1; i <= nTests; i++) {
            out.printf("Case #%d: %d\n", i, solveOne());
        }
    }

    void run() {
        in = new Scanner(System.in);
        out = new PrintWriter(System.out);
        try {
            solve();
        } finally {
            out.close();
        }
    }

    public static void main(String args[]) {
        new MagicPairs().run();
    }
}

#include<stdio.h>
#include<string.h>
#include<map>
#include<queue>
#include<string>
#include<vector>
#include<set>
#include<algorithm>
using namespace std;
int x[2];
int a[2];
int b[2];
int c[2];
int r[2];
//int last[2];
int p[2];
int value[2][1000006];
long long term[2];
int limit[2];
int n,m;
void clc(int j,int idx)
{
    value[j][idx] = (a[j] * value[0][(idx-1) %n] + b[j] * value[1][(idx-1) % m] + c[j])%r[j];
}
map <int,char> ok[2];
set <int> wait[2];
void add(int j)
{
    int v = value[j][p[j]];
    wait[j].erase(v);
    ok[j][v] = 1;
    if(ok[1-j][v] == 0)
        wait[1-j].insert(v);
}
int main()
{
    int t;
    freopen("in.in","r",stdin);
    freopen("out.out","w",stdout);
    scanf("%d",&t);
    int casenum= 0;
    while(t--)
    {
        for(int j=0;j<2;j++)
        {
            wait[j].clear();
            ok[j].clear();
        }
        casenum++;
        printf("Case #%d: ",casenum);
        //printf("\n");
        scanf("%d%d",&n,&m);
        limit[0] = n,limit[1] = m;
        for(int j = 0;j<2;j++)
        {
            //scanf("%d%d",&x[j], &a[j]);
            scanf("%d%d%d%d%d",&x[j], &a[j], &b[j], &c[j], &r[j]);
            ok[j][x[j]] = 1;
            value[j][0]=x[j];
        }
        for(int i = 1;i<max(n,m);i++)
        {
            for(int j =0;j<2;j++)
                clc(j,i);
        }
        /*for(int j=0;j<2;j++)
        {
            printf("Board %d: ",j);
            for(int i = 0;i<max(n,m);i++)
            {
                printf("%d ",value[j][i]);
            }
            printf("\n");
        }*/
        ///while(1);
        if(x[0] != x[1])
        {
            wait[0].insert(x[1]);
            wait[1].insert(x[0]);
        }
        p[0]=p[1]=0;
        long long rs=0;
        while(p[0] < n&& p[1] < m)
        {
            if(wait[0].empty() && wait[1].empty())
            {
                term[0]= term[1] =0;
                for(int j = 0; j<2;j++)
                {
                    int v = value[j][p[j]];
                    while(ok[j][v] && p[j] < limit[j])
                    {
                        term[j]++;
                        p[j]++;
                        v = value[j][p[j]];
                    }
                    add(j);
                }
                //printf("%d %d\n",p[0],p[1]);
                rs+=term[0]*term[1];
            }
            else
            {
                for(int j=0;j<2;j++)
                if(!wait[j].empty())
                {
                    p[j]++;
                    add(j);
                }
            }
        }
        printf("%lld\n",rs);
    }
}

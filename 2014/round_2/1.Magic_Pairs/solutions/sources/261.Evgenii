import java.io.IOException;
import java.util.Locale;
import java.util.InputMismatchException;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.File;
import java.util.TreeSet;
import java.io.FilenameFilter;
import java.util.HashSet;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = ".*magic.*pairs.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("magicpairs.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		MagicPairs solver = new MagicPairs();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class MagicPairs {

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int N = in.nextInt();
        int M = in.nextInt();
        long x1 = in.nextInt();
        long a1 = in.nextInt();
        long b1 = in.nextInt();
        long c1= in.nextInt();
        long r1 =in.nextInt();

        long x2 = in.nextInt();
        long a2 = in.nextInt();
        long b2 = in.nextInt();
        long c2= in.nextInt();
        long r2 =in.nextInt();

        long [] board1 = new long[N];
        long [] board2 = new long[M];
        board1[0] = x1;
        board2[0] = x2;

        for(int i =1;i<Math.max(N,M);i++) {
            if(i<N)
              board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1;
            if(i<M)
              board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2;
        }

        int index1 = 0;
        int index2 = 0;
        HashSet<Long> s1 = new HashSet<Long>();
        HashSet<Long> s2 = new HashSet<Long>();
        TreeSet<Long> pending1 = new TreeSet<Long>();
        TreeSet<Long> pending2 = new TreeSet<Long>();
        long ans = 0;
        s1.add(board1[index1]);
        pending1.add(board1[index1]);
        ++index1;

        while(index1<N || index2<M) {
            int prevI1=index1;
            int prevI2= index2;
             while(index2<M && !pending1.isEmpty() && !s2.contains(pending1.first())) {
                s2.add(board2[index2]);
                if(!s1.contains(board2[index2])) {
                    pending2.add(board2[index2]);
                }
                ++index2;
             }
            while(!pending1.isEmpty() && s2.contains(pending1.first())) {
                pending1.remove(pending1.first()) ;
            }



            while(index1<N && !pending2.isEmpty() && !s1.contains(pending2.first())) {
                s1.add(board1[index1]);
                if(!s2.contains(board1[index1])) {
                    pending1.add(board1[index1]);
                }
                ++index1;
            }

            while(!pending2.isEmpty() && s1.contains(pending2.first())) {
                pending2.remove(pending2.first());
            }

            if(pending1.isEmpty() && pending2.isEmpty()) {
             long k1 =1;
             long k2 =1;
             while(index1<N && s1.contains(board1[index1]))  {
                ++k1;
                ++index1;
             }
              while(index2<M && s2.contains(board2[index2])) {
                ++k2;
                ++index2;
              }
              ans += k1*k2;
              if(index1<N) {
                  s1.add(board1[index1]);
                  pending1.add(board1[index1]);
                  ++index1;

              } else if(index2<M)  {
                  s2.add(board2[index2]);
                  pending2.add(board2[index2]);
                  ++index2;

              }
            }
            if(index1 == prevI1 && index2 ==prevI2) {
                break;
            }
        }
        out.println("Case #"+testNumber+": "+(ans));



    }
}

class InputReader {

    private InputStream stream;
    int curCharIndex = 0;
    int charsInBuf = 0;
     byte buf[] = new byte[16*1024];

    public InputReader(InputStream stream) {
        this.stream = stream;
    }


    public int readChar() {

        if (curCharIndex >= charsInBuf) {
            curCharIndex = 0;
            try {
                charsInBuf = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (charsInBuf <= 0)
                return -1;
        }
        return buf[curCharIndex++];
    }


    public int nextInt() {

        int c;
        do {
            c = readChar();
        }while(isWhitespace(c));

        int sign = 1;
        if (c == '-') {
            c = readChar();
            sign = -1;

        }
        int res = 0;
        do {
            res *= 10;
            res += c - '0';
            c = readChar();
        } while (!isWhitespace(c) && c!=-1);
        return sign * res;
    }




    public String nextToken() {
        int c;
        do {
            c = readChar();
        }while(isWhitespace(c));

        StringBuilder res = new StringBuilder();
        do {
            res.appendCodePoint(c);
            c = readChar();
        } while (!isWhitespace(c) && c!=-1);
        return res.toString();
    }

    /*
    * For the purpose of compatibilty with Chelper Chrome extension
     */

    public String next() {
        return nextToken();
    }



    private boolean isWhitespace(int c) {
        return  c==' ' || c=='\n'|| c=='\r' || c=='\t';
    }
}


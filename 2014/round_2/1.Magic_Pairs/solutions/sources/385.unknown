#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
#include <queue>
#include <set>
#include <cstring>

using namespace std;

typedef long long int64 ;
typedef unsigned long long uint64 ;
typedef pair<int, int> pint ;
typedef pair<int64, int64> pint64 ;
typedef vector<int> vint ;

#define px first
#define py second

#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(x) ((x) > 0 ? (x) : -(x))

#define REP(i, n) for (int i = 0 ; i < (n) ; i ++)
#define REPD(i, n) for (int i = (n) ; i >= 0 ; i --)
#define FOR(i, a, b) for (int i = (a) ; i < (b) ; i ++)
#define FORD(i, a, b) for (int i = (a) ; i >= (b) ; i --)

#define MUL64(x, y) (((int64) (x)) * ((int64) (y)))
#define MULMOD(x, y, modul) (MUL64(x, y) % modul)
#define MUL(x, y) MULMOD(x, y, modul)
#define ADD(reg, val) { reg += val ; if (reg >= modul) reg -= modul ; }

#define SET(v, val) memset(v, val, sizeof(v)) ;
#define SIZE(v) ((int) (v).size())
#define ALL(v) (v).begin(), (v).end()
#define SORT(v) { sort(ALL(v)) ; }
#define RSORT(v) { SORT(v) ; REVERSE(v) ; }
#define REVERSE(v) { reverse(ALL(v)) ; }
#define UNIQUE(v) unique((v).begin(), (v).end())
#define RUNIQUE(v) { SORT(v) ; (v).resize(UNIQUE(v) - (v).begin()) ; }

//__inline int read_int() { char ch ; int ret = 0, sgn = 1 ; while (true) { ch = getchar_unlocked() ; if (ch == '-') sgn = -1 ; if (ch >= '0' && ch <= '9') break ; } while (ch >= '0' && ch <= '9') { ret = 10 * ret + (int) (ch - '0') ; ch = getchar_unlocked() ; } return ret * sgn ; }
//__inline void read_string(char *buffer) { int id = 0 ; char ch ; while (true) { ch = getchar_unlocked() ; if (ch >= 33 && ch <= 125) break ; }  while (ch >= 33 && ch <= 125) { buffer [id ++] = ch ; ch = getchar_unlocked() ; } buffer [id] = 0 ; }
__inline bool nextInt(int &val) { char ch ; int sgn = 1 ; while ((ch = getchar()) != EOF) { if (ch == '-') sgn = -1 ; if (ch >= '0' && ch <= '9') break ; }  if (ch == EOF) return false ; val = (int) (ch - '0') ; while (true) { ch = getchar() ; if (ch >= '0' && ch <= '9') { val = 10 * val + (int) (ch - '0') ; } else break ; } val *= sgn ; return true ; }
__inline bool nextString(string &s) { char ch ; while ((ch = getchar()) != EOF) { if (ch >= 33 && ch <= 126) break ; } if (ch == EOF) return false ; s = string(1, ch) ; while (true) { ch = getchar() ; if (ch >= 33 && ch <= 126) { s = s + string(1, ch) ; } else break ; } return true ; }


#define MAXN 1000888

int n [2], x [2], a [2], b [2], c [2], r [2], board [2] [MAXN] ;

int main() {
  ios_base::sync_with_stdio(false) ;

  int numTests ;
  cin >> numTests ;
  REP(test, numTests) {
    cin >> n [0] >> n [1] ;
    REP(i, 2) cin >> x [i] >> a [i] >> b [i] >> c [i] >> r [i] ;

    REP(i, 2) board [i] [0] = x [i] ;
    FOR(i, 1, max(n [0], n [1])) {
      board [0] [i] = (MUL64(a [0], board [0] [(i - 1) % n [0]]) + MUL64(b [0], board [1] [(i - 1) % n [1]]) + c [0]) % r [0] ;
      board [1] [i] = (MUL64(a [1], board [0] [(i - 1) % n [0]]) + MUL64(b [1], board [1] [(i - 1) % n [1]]) + c [1]) % r [1] ;
    }
    set<int> passed, rest [2] ;
    int idx [2] = {0, 0}, start [2], finish [2] ;
    int64 ret = 0LL ;
    for ( ; idx [0] < n [0] || idx [1] < n [1] ; ) {

      if (SIZE(rest [0]) > 0) {
        if (idx [1] < n [1]) {
          if (rest [0].find(board [1] [idx [1]]) != rest [0].end()) {
            passed.insert(board [1] [idx [1]]) ;
            rest [0].erase(board [1] [idx [1]]) ;
            idx [1] ++ ;
          } else {
            if (passed.find(board [1] [idx [1]]) == passed.end())
              rest [1].insert(board [1] [idx [1]]) ;
            idx [1] ++ ;
          }
        } else {
          break ;
        }
      }
      if (SIZE(rest [1]) > 0) {
        if (idx [0] < n [0]) {
          if (rest [1].find(board [0] [idx [0]]) != rest [1].end()) {
            passed.insert(board [0] [idx [0]]) ;
            rest [1].erase(board [0] [idx [0]]) ;
            idx [0] ++ ;
          } else {
            if (passed.find(board [0] [idx [0]]) == passed.end())
              rest [0].insert(board [0] [idx [0]]) ;
            idx [0] ++ ;
          }
        } else {
          break ;
        }
      }
      if (SIZE(rest [0]) == 0 && SIZE(rest [1]) == 0) {
        if (SIZE(passed) > 0) {
          start [0] = idx [0] ; start [1] = idx [1] ;
          REP(t, 2) {
            while (idx [t] < n [t] && passed.find(board [t] [idx [t]]) != passed.end()) {
              idx [t] ++ ;
            }
          }
          ret += MUL64(idx [0] - start [0] + 1, idx [1] - start [1] + 1) ;
        }
        if (idx [0] < n [0]) {
          rest [0].insert(board [0] [idx [0]]) ;
          idx [0] ++ ;
        } else {
          if (idx [1] < n [1]) {
            rest [1].insert(board [1] [idx [1]]) ;
            idx [1] ++ ;
          }
        }
      }
    }
    cout << "Case #" << (test + 1) << ": " << ret << endl ;
  }
  return 0;
}

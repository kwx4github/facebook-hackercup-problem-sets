/*
 * 
 * File:   MagicPairs.cpp
 * Author: Andy Y.F. Huang
 * Created on Dec 14, 2013, 4:02:36 PM
 */

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

namespace MagicPairs {
typedef long long ll;
typedef unsigned long long ull;
int x1[1 << 20], x2[1 << 20];
int v[1 << 21];
bool was[1 << 21];
ull ha[1 << 20];
ull r[1 << 21];

void solve(int test_num) {
  int N, M;
  cin >> N >> M;
  {
    ll a1, b1, c1, r1;
    ll a2, b2, c2, r2;
    cin >> x1[0] >> a1 >> b1 >> c1 >> r1;
    cin >> x2[0] >> a2 >> b2 >> c2 >> r2;
    for (int i = 1; i < max(N, M); i++) {
      if (i < N)
        x1[i] = (a1 * x1[i - 1] + b1 * x2[(i - 1) % M] + c1) % r1;
      if (i < M)
        x2[i] = (a2 * x1[(i - 1) % N] + b2 * x2[i - 1] + c2) % r2;
    }
    //plnarr(x1, x1 + N);
    //plnarr(x2, x2 + M);
  }
  int V = 0;
  for (int i = 0; i < N; i++)
    v[V++] = x1[i];
  for (int i = 0; i < M; i++)
    v[V++] = x2[i];
  sort(v, v + V);
  V = unique(v, v + V) - v;
  memset(was, false, sizeof(was));
  for (int i = 0; i < N; i++) {
    const int x = lower_bound(v, v + V, x1[i]) - v;
    ha[i] = (i == 0 ? 0 : ha[i - 1]);
    if (!was[x]) {
      ha[i] += (x1[i] + 1) * r[x];
      was[x] = true;
    }
  }
  //plnarr(ha, ha + N);
  ll res = 0;
  sort(ha, ha + N);
  memset(was, false, sizeof(was));
  ull cur = 0;
  for (int i = 0; i < M; i++) {
    const int x = lower_bound(v, v + V, x2[i]) - v;
    if (!was[x]) {
      cur += (x2[i] + 1) * r[x];
      was[x] = true;
    }
    //pln(cur);
    res += upper_bound(ha, ha + N, cur) - lower_bound(ha, ha + N, cur);
  }
  printf("Case #%d: %lld\n", test_num, res);
}

void solve() {
#ifdef AZN
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
#endif
  srand(time(NULL));
  for (int i = 0; i < 2000111; i++)
    r[i] = ull(rand()) << 30 | rand();
  int tests;
  cin >> tests;
  for (int i = 1; i <= tests; i++)
    solve(i);
}
}

int main() {
  MagicPairs::solve();
  return 0;
}

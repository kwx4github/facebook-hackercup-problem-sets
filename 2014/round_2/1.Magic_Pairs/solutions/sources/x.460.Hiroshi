#include <stdio.h>
#include <cstdlib>
#include <string.h>
#include <math.h>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <iostream>
#include <fstream>
#include <map>
#include <algorithm>
#include "windows.h"
//#include "../../gmp_int.h"
//#include "../../common.h"
#define MAX(a, b)		((a)>(b)?(a):(b))
#define MAX3(a, b, c)	(MAX((a),MAX((b),(c))))
#define FOR(a,b,c)		for (s32(a)=(b);(a)<(s32)(c);(a)++)
#define BL				{char bl[10];cin.getline(bl, 10);}
#define RAND(a,b)		((a)+(s32)(rand()*((b)-(a)+1.0)/(1.0+RAND_MAX)))
#define GL(c)			cin.getline(c, sizeof(c))
typedef char					s8;
typedef unsigned char			u8;
typedef short					s16;
typedef unsigned short			u16;
typedef int						s32;
typedef unsigned int			u32;
typedef long long int			s64;
typedef unsigned long long int	u64;
using namespace std;

ifstream test_input;
#define cin test_input

s64 N,M,x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;
vector<s64> v1, v2;

s64 Smart()
{
    s64 D0 = 100000007, D1 = D0 + 10;
    map<s64, s64> q;
    for (s64 D = D0; D < D1; D ++) {
        s64 r = 0, t = 0, tt = 1;
        set<s64> s1, s2;
        vector<s64> w(M+2), c(M+1), cc(M+1);
        FOR (i,0,M) {
            if (s2.insert(v2[i]).second) {
                t = (t + v2[i]) % D;
                tt = (tt * (v2[i]+1)) % D;
                w[s2.size()] = i;
                c[s2.size()] = t;
                cc[s2.size()] = tt;
            }
        }
        w[s2.size()+1] = M;
        t = 0, tt = 1;
        s64 p = 0;
        FOR (i,0,N) {
            if (s1.insert(v1[i]).second) {
                t = (t + v1[i]) % D;
                tt = (tt * (v1[i]+1)) % D;
                s64 s = c[s1.size()];
                s64 ss = cc[s1.size()];
                if (t == s && tt == ss) {
                    p = w[s1.size()+1] - w[s1.size()];
                    r += p;
                } else {
                    p = 0;
                }
            } else {
                r += p;
            }
        }
        q[r] ++;
    }
    s64 mm=0, ans=0;
    for (map<s64,s64>::iterator i=q.begin(); i!=q.end(); i++) {
        if (mm < i->second) {
            mm = i->second;
            ans = i->first;
        }
    }
    return ans;
}

s64 Naive()
{
    s64 r = 0;
    set<s64> s1;
    FOR (i,0,N) {
        s1.insert(v1[i]);
        set<s64> s2;
        FOR (j,0,M) {
            s2.insert(v2[j]);
            if (s1 == s2) {
                //cout << "(" << i << "," << j << ")" << endl;
                r ++;
            }
        }
    }
    return r;
}

int main(int argc, char* argv[])
{
	cout.precision(15);
	if (argc!=2) {
		cout << "Need input file name." << endl;
		return 0;
	}
	test_input.open(argv[1]);
	if (test_input.fail()) {
		cout << "Cannot open input file " << argv[1] << "." << endl;
		return 0;
	}

	s32 num_of_trial;
	cin >> num_of_trial;
	FOR (tt,0,num_of_trial) {
		cout << "Case #" << tt+1 << ": ";

        cin >> N >> M;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;

        //N = M = 1000;
        //x1 = x2 = 1;
        //s64 L=100000000;
        //a1 = RAND(1,L), b1 = RAND(1,L), c1 = RAND(1,L), r1 = RAND(1,100);
        //a2 = RAND(1,L), b2 = RAND(1,L), c2 = RAND(1,L), r2 = RAND(1,100);

        v1.assign(N, 0);
        v2.assign(M, 0);
        v1[0] = x1;
        v2[0] = x2;
        FOR (i,1,max(N,M)) {
            if (i<N) v1[i] = (a1*v1[(i-1)%N] + b1*v2[(i-1)%M]+c1)%r1;
            if (i<M) v2[i] = (a2*v1[(i-1)%N] + b2*v2[(i-1)%M]+c2)%r2;
        }
//        if (tt < 281) continue;
        //s64 ans1 = Naive();
        //cout << ans1 << endl;;

        s64 ans2 = Smart();
        cout << ans2;
        //if (ans1 != ans2) {
        //    cout << "!!!!!!" << endl;
        //    exit(0);
        //}

		cout << endl;
	}

	return 0;
}

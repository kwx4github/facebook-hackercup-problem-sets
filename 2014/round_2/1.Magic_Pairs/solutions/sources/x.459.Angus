#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
#include <vector>

using namespace std;
typedef long long ll;

int T, N, M;
ll x1, x2, a1, a2, b1, b2, c1, c2, r1, r2, board1[1000010], board2[1000010];
set<ll> tmp;

int main() {
	scanf("%d", &T);
	int tc = 0;
	while (T--) {
		scanf("%d %d %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld", &N, &M, &x1, &a1, &b1, &c1, &r1, &x2, &a2, &b2, &c2, &r2);
		set<ll> q, q2;
		set<ll> done, done2;
		vector<pair<int, int> > ans;
		vector<int> pos1, pos2;
		board1[0] = x1; board2[0] = x2;
		for (int i = 1; i < max(N, M); i++) {
			if (i < N)	
				board1[i] = (a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1;
			if (i < M)
				board2[i] = (a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2;
		}
		tmp.clear();
		tmp.insert(board1[0]); pos1.push_back(0);
		for (int i = 1; i < N; i++) {
			if (tmp.find(board1[i]) != tmp.end())
				continue;
			else {
				tmp.insert(board1[i]);
			}
				pos1.push_back(i);
		}
		pos1.push_back(N);
		tmp.clear();
		tmp.insert(board2[0]); pos2.push_back(0);
		for (int i = 1; i < M; i++) {
			if (tmp.find(board2[i]) != tmp.end())
				continue;
			else {
				pos2.push_back(i);
				tmp.insert(board2[i]);
			}
		}
		pos2.push_back(M);
		//for (int i = 0; i < pos1.size(); i++)
		//	printf("%d\n", pos1[i]);
		//printf("---\n");
		//for (int i = 0; i < pos2.size(); i++)
		//	printf("%d\n", pos2[i]);
		//printf("---\n");
		int cpos = -1; int spos = -1;
		while (1) {
			int nowork = 1;
			while ((q.empty() || q2.size()) && (cpos + 2) < pos1.size()) {
				nowork = 0;
				cpos++;
				done.insert(board1[pos1[cpos]]);	
				q2.erase(board1[pos1[cpos]]);
				if (done2.find(board1[pos1[cpos]]) == done2.end())
					q.insert(board1[pos1[cpos]]);
			}
			while ((q.size() && (spos + 2) < pos2.size())) {
				nowork = 0;
				spos++;
				q.erase(board2[pos2[spos]]);
				done2.insert(board2[pos2[spos]]);
				if (done.find(board2[pos2[spos]]) == done.end())
					q2.insert(board2[pos2[spos]]);
			}
			if (q.size() == 0 && q2.size() == 0) {		
				ans.push_back(make_pair(cpos, spos));
				//printf("%d %d %d %d\n", 
			}
			//printf("%d %d\n", spos, cpos);
			if (((spos + 2) == pos2.size() && (cpos + 2) == pos1.size()) || nowork) {
				break;
			}
		}
		ll sum = 0;
		for (int i = 0; i < ans.size(); i++) {
			//printf("%d %d\n", pos1[ans[i].first], pos2[ans[i].second]);
			sum += ((ll)(pos1[ans[i].first + 1] - pos1[ans[i].first])) * (ll)(pos2[ans[i].second + 1] - pos2[ans[i].second]);
		}
		printf("Case #%d: %lld\n", ++tc, sum);
	}
	return 0;
}

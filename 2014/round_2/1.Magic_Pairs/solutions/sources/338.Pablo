#include <iostream>
#include <vector>
#include <stdio.h>
#include <map>
#include <math.h>
#include <cmath>
#include <set>
#include <algorithm>
#include <fstream>
using namespace std;

#define forsn(i,s, n) for(int i=(int)s; i<(int)(n); i++)
#define dforn(i, n) for(int i=(int)(n-1); i>=0; i--)
#define forn(i, n) forsn(i,0,n)
#define fore(i,n) forn(i,n.size())
#define fori(i,n) for(typeof n.begin() i=n.begin();i!=n.end();i++)
#define RAYA //cout<<"-----------------"<<endl;
#define dbg(x) //cout<<#x<<": "<<(x)<<endl
#define all(n) n.begin(),n.end()

#define pb push_back
#define mp make_pair
#define f first
#define s second

typedef long double ldouble;
typedef long long tint;

tint tab1[1001000];
tint tab2[1001000];

bool in (tint &n,set <tint> &s){
	if(s.find(n)!=s.end())return true;
	return false;	
}

int main (){
	int t; cin>>t;
	forn(caso,t){
		tint N,M; cin>>N>>M;
		tint x1, a1, b1, c1, r1; cin>>x1>> a1>> b1>> c1>> r1;
		tint x2, a2, b2, c2, r2; cin>>x2>> a2>> b2>> c2>> r2;
		tab1[0]=x1;
		tab2[0]=x2;
		forsn(i,1,max(N,M)){
			tab1[i] = (a1 * tab1[(i-1) % N] + b1 * tab2[(i-1) % M] + c1) % r1;
			tab2[i] = (a2 * tab1[(i-1) % N] + b2 * tab2[(i-1) % M] + c2) % r2;
		}
		/*forn(i,N) cout<<tab1[i];
		cout<<endl;
		forn(i,M) cout<<tab2[i];
		cout<<endl;*/
		tint pos1=-1;
		tint pos2=-1;
		set <tint> col1;
		set <tint> col2;	
		tint cont=-1;	
		while(pos1<N && pos2<M){
			RAYA;
			dbg(pos1);
			dbg(pos2);
			tint pos1v=pos1;
			while(pos1+1<N && in(tab1[pos1+1],col1)) pos1++;
			tint pos2v=pos2;
			while(pos2+1<M && in(tab2[pos2+1],col2)) pos2++;
			cont+=(1+pos1-pos1v)*(1+pos2-pos2v);
			pos1++;
			pos2++;
			dbg(pos1);
			dbg(pos2);
			col1.insert(tab1[pos1]);
			col2.insert(tab2[pos2]);
			if(pos1>=N || pos2>=M) continue;
			if(tab1[pos1]==tab2[pos2]) continue;
			set <tint> nue1;
			set <tint> nue2;
			nue1.insert(tab1[pos1]);
			nue2.insert(tab2[pos2]);
			loop:
			while(pos2<M && nue1.size()!=0){
				pos2++;
				col2.insert(tab2[pos2]);
				if(!in(tab2[pos2],col1))nue2.insert(tab2[pos2]);
				if(in(tab2[pos2],nue1))	nue1.erase(tab2[pos2]);
			}
			while(pos1<N && nue2.size()!=0){
				pos1++;
				col1.insert(tab1[pos1]);
				if(!in(tab1[pos1],col2))nue1.insert(tab1[pos1]);
				if(in(tab1[pos1],nue2))	nue2.erase(tab1[pos1]);
			}		
			dbg(pos1);
			dbg(pos2);
			if(pos2<M && nue1.size()!=0) goto loop;
		}
		cout<<"Case #"<<caso+1<<": "<<cont<<endl;
	}	
}


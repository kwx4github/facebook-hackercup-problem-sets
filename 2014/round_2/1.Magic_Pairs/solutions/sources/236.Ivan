#include <iostream>
#include <cstdio>
#include <fstream>

#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <utility>
#include <string>
#include <cstring>

#include <algorithm>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cassert>
#include <memory.h>
using namespace std;

#define fr(i, n) for (int i = 0; i < (int)(n); i++)
#define fb(i, n) for (int i = n - 1; i >= 0; i--)
#define all(a) (a).begin(), (a).end()
#define _(a, b) memset(a, b, sizeof(a))
#define mp make_pair
#define pb push_back
#define sz(v) ((int)(v).size())

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

inline int ni() { int a; scanf("%d", &a); return a; }
inline double nf() { double a; scanf("%lf", &a); return a; }
template <class T> void out(T a, T b) { bool first = true; for (T i = a; i != b; i++) { if (!first) printf(" "); first = false; cout << *i; } puts(""); }
template <class T> void outl(T a, T b) { for (T i = a; i != b; i++) cout << *i << "\n"; } 

int T;
ll N, M;
ll x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
vi bo1, bo2;
vi u1, u2;

int get1(int);
int get2(int);

set<int> h1, h2, d1;
map<int, ll> s1, s2;
map<int, int> f1, f2;
map<int, int> g;

int get1(int i)
{
	if (u1[i])
		return bo1[i];
	u1[i] = true;
	return bo1[i] = (a1 * get1((i-1) % N) + b1 * get2((i-1) % M) + c1) % r1;
}

int get2(int i)
{
	if (u2[i])
		return bo2[i];
	u2[i] = true;
	return bo2[i] = (a2 * get1((i-1) % N) + b2 * get2((i-1) % M) + c2) % r2;
}

ll solve()
{
	bo1.clear();
	bo2.clear();
	u1.clear();
	u2.clear();

	cin >> N >> M;
	cin >> x1 >> a1>> b1>> c1>> r1;
	cin >> x2>> a2>> b2>> c2>> r2;
	bo1.resize(N);
	bo2.resize(M);
	bo1.assign(N, 0);
	bo2.assign(M, 0);
	u1.assign(N, false);
	u2.assign(M, false);
	bo1[0] = x1;
	bo2[0] = x2;
	u1[0] = u2[0] = true;
	for (int i = 1; i < N; i++)
	{
		bo1[i] = get1(i);
	}
	for (int i = 1; i < M; i++)
	{
		bo2[i] = get2(i);
	}
		
	h1.clear();
	h2.clear();
	s1.clear();
	s2.clear();
	f1.clear();
	f2.clear();
	d1.clear();
	g.clear();
	ll ans = 0;
	fr(i, N)
	{
		h1.insert(bo1[i]);
		s1[sz(h1)]++;
		if (f1.find(bo1[i]) == f1.end())
		{
			f1[bo1[i]] = i;
			d1.insert(i);
		}
		g[i] = sz(h1);
	}
	fr(i, M)
	{
		h2.insert(bo2[i]);
		d1.erase(f1[bo2[i]]);
		f1.erase(bo2[i]);
		if (!h1.count(bo2[i]))
			break;		
		if (d1.empty() || g[(*d1.begin())] > sz(h2))
		{
			ans += s1[sz(h2)];
			//cout << ans << endl;
			//cerr << i << " ";
		}
	}
	//cerr << endl;
	return ans;
	/*fr(i, N)
	{
		h1.insert(bo1[i]);
		s1[bo1.size()]++;
	}
	fr(i, M)
	{
		h2.insert(bo2[i]);
		s2[bo1.size()]++;
	}

	ll ans = 0;
	for (map<int, ll>::iterator it = s1.begin(); it != s1.end(); it++)
	{
		ans += it->second * s2[it->first];
	}
	return ans;*/
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	cin >> T;
	fr(test, T)
	{
		cout << "Case #" << test + 1 << ": " << solve() << endl;  
	}
}
        
import java.io.*;
import java.util.*;

public class magic_pairs {
    private static BufferedReader in;
    private static PrintWriter out;
    
    public static void main (String [] args) throws IOException {
        in = new BufferedReader (new FileReader (new File ("magic_pairs.txt")));
        out = new PrintWriter (new FileWriter ("magic_pairs.out"));
        
        int T  = Integer.parseInt (in.readLine ());
        StringTokenizer st;
        int test = 0;
        while (T-- > 0) {
            System.out.println (T);
            st = new StringTokenizer (in.readLine());
            int N = Integer.parseInt(st.nextToken());
            int M = Integer.parseInt(st.nextToken());
            long [] a = new long [N], b = new long [M];
            st = new StringTokenizer (in.readLine());
            long x1 = Integer.parseInt(st.nextToken());
            long a1 = Integer.parseInt(st.nextToken());
            long b1 = Integer.parseInt(st.nextToken());
            long c1 = Integer.parseInt(st.nextToken());
            long r1 = Integer.parseInt(st.nextToken());
            st = new StringTokenizer (in.readLine());
            long x2 = Integer.parseInt(st.nextToken());
            long a2 = Integer.parseInt(st.nextToken());
            long b2 = Integer.parseInt(st.nextToken());
            long c2 = Integer.parseInt(st.nextToken());
            long r2 = Integer.parseInt(st.nextToken());
            
            a[0] = x1;
            b[0] = x2;
            for (int i = 1; i < Math.min (N, M); i++) {
                a[i] = (((a1 * a[i - 1]) % r1) + ((b1 * b[(i - 1) % M]) % r1) + c1) % r1;
                b[i] = (((a2 * a[(i - 1) % N]) % r2) + ((b2 * b[i - 1]) % r2) + c2) % r2;
            }
            for (int i = Math.min(N, M); i < N; i++) 
                a[i] = (((a1 * a[i - 1]) % r1) + ((b1 * b[(i - 1) % M]) % r1) + c1) % r1;
            for (int i = Math.min(N, M); i < M; i++) 
                b[i] = (((a2 * a[(i - 1) % N]) % r2) + ((b2 * b[i - 1]) % r2) + c2) % r2;
            HashMap<Long, Integer> mp = new HashMap<Long, Integer> ();
            int idx = 0;
            int[] cut = new int [N + 1];
            for (int i = 0; i < N; i++)
                if (!mp.containsKey(a[i]))
                    mp.put (a[i], idx++);
            
            a[0] = mp.get(a[0]);
            for (int i = 1; i < N; i++) {
                a[i] = Math.max (a[i - 1], mp.get(a[i]));
                if (a[i] > a[i - 1]) {
                    cut [(int)a[i]] = i;
                }
            }
            cut [idx] = N;
            
            long ans = 0;
            int w = 0;
            boolean[] seen = new boolean[N + 1];
            int total = 0;
            for (int i = 0; i < M; i++) {
                if (!mp.containsKey(b[i])) break;
                int q = mp.get(b[i]);
                if (!seen[q]) total++;
                seen[q] = true;
                while (w <= N && seen[w]) w++;
                if (w == total) {
                    ans += cut[w] - (w == 0 ? 0 : cut[w - 1]);
                }
            }
            
            out.printf ("Case #%d: %d\n", ++test, ans);
        }
        out.close();
        System.exit(0);
    }
}

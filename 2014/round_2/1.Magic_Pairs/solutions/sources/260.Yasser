import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.StringTokenizer;

public class A {

	String inputFile = "input.txt";
	String outputFile = "output.txt";

	int N, M;
	long x1, a1, b1, c1, r1;
	long x2, a2, b2, c2, r2;

	long board1[];
	long board2[];

	// Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1,
	// for 0 < i < N

	public void generate() {
		board1 = new long[N];
		board2 = new long[M];
		board1[0] = x1;
		board2[0] = x2;
		for (int i = 1; i < Math.max(N,M); i++) {
			if(i < N)
			board1[i] = (a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1)
					% r1;
			if(i < M)
			board2[i] = (a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2)
					% r2;
		}
	}

	int size ; 
	
	public void add(HashSet<Long> f, HashSet<Long> s, long value){
		if(!f.contains(value) && s.contains(value))
			size++;
	}
	
	
	public String solve() {
		size =0;
		generate();
//		System.out.println(Arrays.toString(board1));
//		System.out.println(Arrays.toString(board2));
		int i = 0;
		int j = 0;
		HashSet<Long> first = new HashSet<Long>();
		HashSet<Long> second = new HashSet<Long>();
		
		long ans = 0;
		while (i < N && j < M) {

			while (i < N && first.size() < second.size()) {
				add(first,second,board1[i]);
				first.add(board1[i]);
				i++;
			}

			while (j < M && second.size() < first.size()) {
				add(second,first,board2[j]);
				second.add(board2[j]);
				j++;
			}
			if (i < N && j < M && first.size() == second.size()) {
				// walk till first diff
				add(first,second,board1[i]);
				first.add(board1[i]);
				add(second,first,board2[j]);
				second.add(board2[j]);
				
				long c1 = 0;
				while (i < N && first.contains(board1[i])) {
					i++;
					c1++;
				}
				long c2 = 0;
				while (j < M && second.contains(board2[j])) {
					j++;
					c2++;
				}
				if(size == first.size())
					ans += c1 * c2;
			}
		}
//		System.out.println(ans);
		return ans + "";
	}

	public void solver() throws Exception {
		BufferedReader in = new BufferedReader(new FileReader(inputFile));
		PrintWriter out = new PrintWriter(new File(outputFile));
		int t = Integer.parseInt(in.readLine());

		for (int tt = 1; tt <= t; tt++) {
			String s[] = in.readLine().split(" ");
			N = Integer.parseInt(s[0]);
			M = Integer.parseInt(s[1]);
			StringTokenizer tk = new StringTokenizer(in.readLine());
			x1 = Integer.parseInt(tk.nextToken());
			a1 = Integer.parseInt(tk.nextToken());
			b1 = Integer.parseInt(tk.nextToken());
			c1 = Integer.parseInt(tk.nextToken());
			r1 = Integer.parseInt(tk.nextToken());
			tk = new StringTokenizer(in.readLine());
			x2 = Integer.parseInt(tk.nextToken());
			a2 = Integer.parseInt(tk.nextToken());
			b2 = Integer.parseInt(tk.nextToken());
			c2 = Integer.parseInt(tk.nextToken());
			r2 = Integer.parseInt(tk.nextToken());
			out.println("Case #" + tt + ": " + (solve()));
		}
		in.close();
		out.close();
	}

	public static void main(String[] args) throws Exception {
		new A().solver();
	}

}

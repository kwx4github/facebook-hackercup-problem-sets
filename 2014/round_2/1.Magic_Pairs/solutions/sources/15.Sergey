#pragma comment(linker, "/STACK:60000000")
#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <sstream>
#include <iomanip>
#include <complex>
#include <queue>
#include <functional>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)
#define next NEXTHUI
#define prev PREVHUI
#define y1 Y1HUI

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}

const int NMAX = 1005000;

int64 a[NMAX], b[NMAX];
int sa[NMAX], sb[NMAX];
int n, m;
int64 x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;

map<int64, int> pa, pb;

int64 solve() {
	cin >> n >> m;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	a[0] = x1;
	b[0] = x2;
	for (int i = 1; i < max(n, m); i++) {
		if (i < n) {
			a[i] = (a1 * a[(i-1)%n] + b1 * b[(i-1)%m] + c1) % r1;
		}
		if (i < m) {
			b[i] = (a2 * a[(i-1)%n] + b2 * b[(i-1)%m] + c2) % r2;
		}
	}
	pa.clear();
	pb.clear();
	forn(i, n) {
		pa[a[i]] = n;
		pb[a[i]] = m;
	}
	forn(i, m) {
		pa[b[i]] = n;
		pb[b[i]] = m;
	}
	forn(i, n)
		pa[a[i]] = min(pa[a[i]], i);
	forn(i, m)
		pb[b[i]] = min(pb[b[i]], i);
	forn(i, n) {
		sa[i] = pb[a[i]];
		if (i > 0)
			sa[i] = max(sa[i], sa[i-1]);
	}	
	sa[n] = m;
	forn(i, m) {
		sb[i] = pa[b[i]];
		if (i > 0)
			sb[i] = max(sb[i], sb[i-1]);
	}
	sb[m] = n;
	int64 ans = 0;
	forn(i, n) {
		int left = sa[i];
		int right = upper_bound(sb, sb + m + 1, i) - sb - 1;
		ans += max(0, right - left + 1);
	}
	return ans;
}

int main ()
{
//	freopen("input.txt", "r", stdin);
	int tt;
	cin >> tt;
	forn(ii, tt) {
		printf("Case #%d: %I64d\n", ii + 1, solve());
	}
	return 0;
}

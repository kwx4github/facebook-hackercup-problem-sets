#include <cstdio>
#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long llint;

const int MaxN = 1000010;

int N, M, len2[MaxN], r1, r2;
llint x1, x2, a1, a2, b1, b2, c1, c2, sol;
int A[MaxN], B[MaxN], first1[2 * MaxN], first2[2 * MaxN];
bool f1[MaxN], f2[MaxN];
vector <int> v;

void getboards(void) {
  v.clear();
  scanf("%d %d",&N,&M);
  scanf("%lld %lld %lld %lld %d",&x1,&a1,&b1,&c1,&r1);
  scanf("%lld %lld %lld %lld %d",&x2,&a2,&b2,&c2,&r2);
  A[0] = x1;
  B[0] = x2;
  for (int i = 1; i < max(N, M); ++i) {
    if (i < N)
      A[i] = (a1 * A[(i-1) % N] + b1 * B[(i-1) % M] + c1) % r1;
    if (i < M)
      B[i] = (a2 * A[(i-1) % N] + b2 * B[(i-1) % M] + c2) % r2;
  }

  for (int i = 0; i < N; ++i) 
    v.push_back(A[i]);
  for (int i = 0; i < M; ++i)
    v.push_back(B[i]);
  sort(v.begin(), v.end());
  v.resize(unique(v.begin(), v.end()) - v.begin());
  
  for (int i = 0; i < N; ++i)
    A[i] = lower_bound(v.begin(), v.end(), A[i]) - v.begin();
  for (int i = 0; i < M; ++i)
  B[i] = lower_bound(v.begin(), v.end(), B[i]) - v.begin();
}

void solve (int test) {
  sol = 0;
  memset(first1, -1, sizeof(first1));
  memset(first2, -1, sizeof(first2));
  memset(f1, false, sizeof(f1));
  memset(f2, false, sizeof(f2));

  for (int i = 0; i < N; ++i)
    if (first1[A[i]] == -1) {
      first1[A[i]] = i;
      f1[i] = true;
    }
  for (int i = 0; i < M; ++i)
    if (first2[B[i]] == -1) {
      first2[B[i]] = i;
      f2[i] = true;
    }
  
  len2[M] = 0;
  for (int i = M - 1; i >= 0; --i)
    len2[i] = (f2[i]) ? 0 : len2[i + 1] + 1;

  int i, j, firsti, firstj, ptrk;

  i = 0;
  j = 0;
  ptrk = 0;
  firstj = first2[A[0]];
  firsti = first1[B[0]];
  
  while (i < N && j < M) {
    if (i >= firsti && j >= firstj) {
      while (ptrk + 1 < M && first1[B[ptrk + 1]] != -1 && first1[B[ptrk + 1]] <= i)
	++ptrk;
      if (ptrk < j)
	break;
      sol += (ptrk - j + 1);
      ++i;
      if (first2[A[i]] == -1)
	break;
      firstj = max(firstj, first2[A[i]]);
    }
    else if (i < firsti) {
      ++i;
      if (first2[A[i]] == -1)
	break;
      firstj = max(firstj, first2[A[i]]);
    }
    else if (j < firstj) {
      ++j;
      if (first1[B[j]] == -1)
	break;
      firsti = max(firsti, first1[B[j]]);
    }
  }
  
  printf("Case #%d: %lld\n",test,sol);
}

int main (void) {
  int t;
  scanf("%d",&t);
  for (int test = 1; test <= t; ++test) {
    getboards();
    solve(test);
  }
  return 0;
}

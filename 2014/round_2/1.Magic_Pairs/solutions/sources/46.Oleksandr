#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <complex>
#include <numeric>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define FOR(i, a, b) for (int i(a), _b(b); i < _b; ++i)
#define REP(i, n) FOR(i, 0, n)
#define FORD(i, a, b) for (int i(a), _b(b); i >= _b; --i)
#define UN(a) sort(all(a)), (a).erase(unique(all(a)), (a).end())
#define CL(a, v) memset(a, v, sizeof a)
#define pb push_back
#define X first
#define Y second

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;

const int INF = 1000000000;
const ll INF_LL = 1000000000000000000LL;
const double pi = 2 * acos(0.0);

template<class T> void smin(T& a, T b) { if (a > b) a = b; }
template<class T> void smax(T& a, T b) { if (a < b) a = b; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }
template<class T> T sqr(T a) { return a * a; }

template<class T> void outp(const vector<T>& v) {
  REP(i, sz(v)) cout << v[i] << (i + 1 == sz(v) ? '\n' : ' ');
}
template<class T> void outp(T* v, int n) {
  REP(i, n) cout << *v++ << (i + 1 == n ? '\n' : ' ');
}

const int h = 1000011;
int n, m;
int a[h], b[h];
ll a1, b1, c1, r1, a2, b2, c2, r2;

set<int> sa, sb, sab;

int main() {
  freopen("_magic_pairs.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  int it = 1, tt;
  char ct;
  for (scanf("%d%c", &tt, &ct); it <= tt; ++it) {
    scanf("%d%d", &n, &m);
    scanf("%d%I64d%I64d%I64d%I64d", a+0, &a1, &b1, &c1, &r1);
    scanf("%d%I64d%I64d%I64d%I64d", b+0, &a2, &b2, &c2, &r2);
    REP(i, max(n, m)-1) {
      if (i < n-1) a[i+1] = (a1*a[i%n] + b1*b[i%m] + c1) % r1;
      if (i < m-1) b[i+1] = (a2*a[i%n] + b2*b[i%m] + c2) % r2;
    }
//    outp(a, n);
//    outp(b, m);
    sa.clear();
    sb.clear();
    sab.clear();
    int i = 0, j = 0;
    ll ans = 0;
    while (i < n || j < m) {
      int pi = i;
      if (i < n) {
        sa.insert(a[i]);
        sab.insert(a[i]);
        ++i;
        while (i < n && sa.count(a[i])) ++i;
      }

      int pj = j;
      if (j < m) {
        sb.insert(b[j]);
        sab.insert(b[j]);
        ++j;
        while (j < m && sb.count(b[j])) ++j;
      }
//      printf("%d %d: %d %d %d\n", i, j, sz(sa), sz(sb), sz(sab));

      if (sz(sa) == sz(sab) && sz(sb) == sz(sab)) {
//        printf("inc: %d %d\n", i, j);
        ans += ll(i - pi) * (j - pj);
      }
    }
    printf("Case #%d: %I64d\n", it, ans);
  }
  return 0;
}

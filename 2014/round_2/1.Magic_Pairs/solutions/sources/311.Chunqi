#include <iostream>
#include <cstdio>
#include <algorithm>
#include <unordered_set>
using namespace std;
#define MaxN 1000010

int a[MaxN], b[MaxN], n, m;
unordered_set<int> ma;
unordered_set<int> na, nb;

int main()
{
    freopen("_magic_pairs.txt", "r", stdin);
    freopen("_magic_pairs.out", "w", stdout);
    int T;
    cin >> T;
    for (int cas = 1; cas <= T; ++cas)
    {
        ma.clear(), na.clear(), nb.clear();
        cin >> n >> m;
//        n = m = 1000000;
        long long a1, b1, c1, r1, a2, b2, c2, r2;
        cin >> a[0] >> a1 >> b1 >> c1 >> r1;
        cin >> b[0] >> a2 >> b2 >> c2 >> r2;
        for (int i = 1; i < n || i < m; ++i)
        {
            if (i < n) a[i] = (a1 * a[i-1] + b1 * b[(i-1)%m] + c1) % r1;
            if (i < m) b[i] = (a2 * a[(i-1)%n] + b2 * b[i-1] + c2) % r2;
        }
//        for (int i = 0; i < n; ++i) cout << a[i] << " "; cout << endl;
//        for (int i = 0; i < m; ++i) cout << b[i] << " "; cout << endl;

        int i = 0, j = 0;
        long long ans = 0;
        while (true)
        {
            if (na.empty() && nb.empty())
            {
                int pi = i, pj = j;
                while (i < n && ma.find(a[i]) != ma.end()) ++i;
                while (j < m && ma.find(b[j]) != ma.end()) ++j;
//                cout << "add " << (long long)(i-pi+1)*(j-pj+1) << endl;
                ans += (long long)(i-pi+1)*(j-pj+1);
            }
            if (i == n && j == m) break;
            if (i < n)
            {
                ma.insert(a[i]);
                nb.insert(a[i]);
                ++i;
            }
            else if (j < m)
            {
                ma.insert(b[j]);
                na.insert(b[j]);
                ++j;
            }
            while ((i < n && !na.empty()) || (j < m && !nb.empty()))
            {
                if (i < n && !na.empty())
                {
                    if (ma.find(a[i]) == ma.end())
                    {
                        ma.insert(a[i]);
                        if (na.find(a[i]) == na.end()) nb.insert(a[i]);
                    }
                    if (na.find(a[i]) != na.end()) na.erase(a[i]);
                    ++i;
                }
                while (j < m && !nb.empty())
                {
                    if (nb.find(b[j]) != nb.end()) nb.erase(b[j]);
                    if (ma.find(b[j]) == ma.end()) na.insert(b[j]);
                    ++j;
                }
            }
//            cout << i << " : " << j << endl;
        }
        cout << "Case #" << cas << ": " << ans-1 << endl;
    }
    return 1;
}

/*
1
12 11
2 5 2 5 7
2 9 3 2 7

*/

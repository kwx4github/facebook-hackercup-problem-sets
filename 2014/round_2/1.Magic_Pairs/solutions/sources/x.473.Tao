//#define testcase
namespace ZTCSharp.Hackercup
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using ZTCSharp.Helpers;

    internal class MagicPairs
    {
        public static void Run()
        {
            const string input = @"_magic_pairs.txt";
            const string output = @"res.out";

            using (StreamWriter writer = new StreamWriter(output))
            {
#if testcase
                using (StreamWriter caseWriter = new StreamWriter(input))
                {
                    int rT = 100;
                    caseWriter.WriteLine(rT);
                    Random random = new Random();
                    for (int c = 1; c <= rT; ++c)
                    {
                        int n = random.Next(100) + 1;
                        int m = random.Next(100) + 1;
                        caseWriter.WriteLine(n + " " + m);
                        int[] a = new int[10];
                        for (int i = 0; i < 10; ++i) a[i] = random.Next(10) + 1;
                        int x1 = a[0], a1 = a[1], b1 = a[2], c1 = a[3], r1 = a[4];
                        int x2 = a[5], a2 = a[6], b2 = a[7], c2 = a[8], r2 = a[9];
                        caseWriter.WriteLine(string.Join(" ", a));

                        int[] B1 = new int[n];
                        int[] B2 = new int[m];

                        B1[0] = x1;
                        B2[0] = x2;
                        for (int i = 1; i < Math.Max(n, m); ++i)
                        {
                            int preN = (i + n - 1) % n;
                            int preM = (i + m - 1) % m;
                            if (i < n) B1[i] = (a1 * B1[preN] + b1 * B2[preM] + c1) % r1;
                            if (i < m) B2[i] = (a2 * B1[preN] + b2 * B2[preM] + c2) % r2;
                        }

                        int r = 0;
                        HashSet<int> set1 = new HashSet<int>();
                        for (int i = 0; i < n; ++i)
                        {
                            set1.Add(B1[i]);
                            HashSet<int> set2 = new HashSet<int>();
                            for (int j = 0; j < m; ++j)
                            {
                                set2.Add(B2[j]);
                                if (set1.IsSubsetOf(set2))
                                {
                                    if (set2.IsSubsetOf(set1))
                                    {
                                        ++r;
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        writer.WriteLine("Case #{0}: {1}", c, r);
                    }
                }
#else
                InputHelper fin = new FileInputHelper(input);
                int T = fin.ReadInt();
                for (int tCase = 1; tCase <= T; ++tCase)
                {
                    writer.WriteLine("Case #{0}: {1}", tCase, Solve(fin));
                }
#endif
            }
        }

        private static long Solve(InputHelper fin)
        {
            int n = fin.ReadInt();
            int m = fin.ReadInt();

            int[] a = new int[10];
            for (int i = 0; i < 10; ++i) a[i] = fin.ReadInt();
            int x1 = a[0], a1 = a[1], b1 = a[2], c1 = a[3], r1 = a[4];
            int x2 = a[5], a2 = a[6], b2 = a[7], c2 = a[8], r2 = a[9];

            int[] B1 = new int[n];
            int[] B2 = new int[m];

            B1[0] = x1;
            B2[0] = x2;
            for (int i = 1; i < Math.Max(n, m); ++i)
            {
                int preN = (i + n - 1) % n;
                int preM = (i + m - 1) % m;
                if (i < n) B1[i] = (a1 * B1[preN] + b1 * B2[preM] + c1) % r1;
                if (i < m) B2[i] = (a2 * B1[preN] + b2 * B2[preM] + c2) % r2;
            }

            int r = 0;
            HashSet<int> set1 = new HashSet<int>();
            for (int i = 0; i < n; ++i)
            {
                set1.Add(B1[i]);
                HashSet<int> set2 = new HashSet<int>();
                for (int j = 0; j < m; ++j)
                {
                    set2.Add(B2[j]);
                    if (set1.IsSubsetOf(set2))
                    {
                        if (set2.IsSubsetOf(set1))
                        {
                            ++r;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }

            //HashSet<int> appeared1 = new HashSet<int>();
            //Queue<int> events = new Queue<int>();
            //for (int i = 0; i < n; ++i)
            //    if (!appeared1.Contains(B1[i]))
            //    {
            //        appeared1.Add(B1[i]);
            //        events.Enqueue(i);
            //    }
            //events.Enqueue(n);

            //HashSet<int> appeared2 = new HashSet<int>();
            //appeared1.Clear();
            //long r = 0;
            //int cur1 = 0, cd = 0;
            //for (int i = 0; i < m; ++i)
            //{
            //    if (!appeared2.Contains(B2[i]))
            //    {
            //        appeared2.Add(B2[i]);
            //        while (events.Peek() < n && !appeared1.Contains(B2[i]))
            //            appeared1.Add(B1[cur1 = events.Dequeue()]);
            //        if (!appeared1.Contains(B2[i])) return r;
            //        cd = appeared1.Count == appeared2.Count ? events.Peek() - cur1 : 0;
            //    }

            //    r += cd;
            //}
            return r;
        }
    }
}

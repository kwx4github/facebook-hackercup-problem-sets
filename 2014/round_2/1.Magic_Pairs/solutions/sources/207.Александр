#include <algorithm>
#include <numeric>
#include <string>
#include <string.h>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <iostream>
#include <fstream>
#include <cmath>
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <sstream>
#include <stdio.h>
#include <stack>

using namespace std;

long long boardOne[1000000];
long long boardTwo[1000000];

void solve(int t)
{
	long long N,M;
	cin>>N>>M;
	long long x1, a1, b1, c1, r1;
	long long x2, a2, b2, c2, r2;
	cin>>x1>>a1>>b1>>c1>>r1;
	cin>>x2>>a2>>b2>>c2>>r2;
	boardOne[0]=x1;
	boardTwo[0]=x2;
	for (int i=1;i<max(N,M);i++) {
		if (i<N) {
			boardOne[i]=(a1*boardOne[(i-1)%N]+b1*boardTwo[(i-1)% M]+c1) % r1;
		}
		if (i<M) {
			boardTwo[i]=(a2*boardOne[(i-1)%N]+b2*boardTwo[(i-1)% M]+c2) % r2;
		}
	}
	set<int> valOne, valTwo, xor;
	long long res = 0;
	long long ptrOne = 0, ptrTwo = 0;
	while (ptrOne < N || ptrTwo < M) {
		long long tempOne = ptrOne, tempTwo = ptrTwo;
		while (tempOne < N && valOne.find(boardOne[tempOne])!=valOne.end()) {
			tempOne++;
		}
		while (tempTwo < M && valTwo.find(boardTwo[tempTwo])!=valTwo.end()) {
			tempTwo++;
		}
		if (xor.empty()) {
			res += (tempOne - ptrOne) * (tempTwo - ptrTwo);
		}
		if (tempOne < N) {
			valOne.insert(boardOne[tempOne]);
			set<int>::iterator it=xor.find(boardOne[tempOne]);
			if (it == xor.end()) {
				xor.insert(boardOne[tempOne]);
			} else {
				xor.erase(it);
			}
		}
		if (tempTwo < M) {
			valTwo.insert(boardTwo[tempTwo]);
			set<int>::iterator it=xor.find(boardTwo[tempTwo]);
			if (it == xor.end()) {
				xor.insert(boardTwo[tempTwo]);
			} else {
				xor.erase(it);
			}
		}
		ptrOne = tempOne;
		ptrTwo = tempTwo;
	}
	printf("Case #%d: ", t);
	cout<<res<<endl;
}

int main()
{
	freopen("in.in","r",stdin);
	freopen("out.out","w",stdout);
	int T;
	cin>>T;
	for (int i=0;i<T;i++)
		solve(i+1);
    return 0;
}

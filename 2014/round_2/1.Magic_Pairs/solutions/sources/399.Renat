#include <vector> // headers {{{
#include <list>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <ctime>

#define DEBUG(x) cout << #x << ": " << x << "\n"
using namespace std; // }}}

typedef long long lint;

inline int f(const vector<lint>& v, const vector<int>& Board1, const vector<int>& Board2, int N, int M, int idx)
{
    return (idx == 0) ? v[0] : ((v[1] * Board1[(idx - 1) % N] + v[2] * Board2[(idx - 1) % M] + v[3]) % v[4]);
}

void print(const vector<int>& v)
{
    for (int i = 0; i < v.size(); ++i) {
        cout << v[i] << " ";
    }
    cout << endl;
}

lint result(int N, int M, const vector<lint>& v1, const vector<lint>& v2)
{
    vector<int> Board1(N), Board2(M);
    for (int i = 0; i < min(M, N); ++i) {
        Board1[i] = f(v1, Board1, Board2, N, M, i);
        Board2[i] = f(v2, Board1, Board2, N, M, i);
    }
    for (int i = min(M, N); i < N; ++i) {
        Board1[i] = f(v1, Board1, Board2, N, M, i);
    }
    for (int i = min(M, N); i < M; ++i) {
        Board2[i] = f(v2, Board1, Board2, N, M, i);
    }
    //print(Board1);
    //cout << endl;
    //print(Board2);

    set<int> S, curS1, curS2;
    int x = -1, y = -1;
    lint res = -1;
    while (1) {
        //cout << "x,y,res: " << x << " " << y << " " << res << endl;
        //print(vector<int>(S.begin(), S.end()));
        //print(vector<int>(curS1.begin(), curS1.end()));
        //print(vector<int>(curS2.begin(), curS2.end()));
        if (curS1.empty() && curS2.empty()) {
            lint curX = 1, curY = 1;
            for (int i = x + 1; i < N; ++i) {
                if (!S.count(Board1[i]))
                    break;
                else
                    ++curX, ++x;
            }
            for (int i = y + 1; i < M; ++i) {
                if (!S.count(Board2[i]))
                    break;
                else
                    ++curY, ++y;
            }
            res+= curX * curY;
            //cout << x << " " << y << " " << curX << " " << curY << endl;
            if (x != N - 1) { ++x; curS1.insert(Board1[x]); }
            else if (y != M - 1) { ++y; curS2.insert(Board2[y]); }
            else
                goto EXIT;
        } else if (!curS1.empty() && y != M - 1) {
            for (int i = y + 1; i < M; ++i) {
                int val = Board2[i];
                ++y;
                if (S.count(val))
                    continue;
                else if (curS1.count(val)) {
                    curS1.erase(val);
                    S.insert(val);
                } else
                    curS2.insert(val);
                if (curS1.empty())
                    break;
            }
        } else if (!curS2.empty() && x != N - 1) {
            for (int i = x + 1; i < N; ++i) {
                int val = Board1[i];
                ++x;
                if (S.count(val))
                    continue;
                else if (curS2.count(val)) {
                    curS2.erase(val);
                    S.insert(val);
                } else
                    curS1.insert(val);
                if (curS2.empty())
                    break;
            }
        } else
            break;
    }

EXIT:;
    DEBUG(res);
    return res;
}

int main()
{
    ifstream cin("input_full.txt");
    ofstream cout("output_full.txt");
    //cout.precision(6);
    //cout.setf(ios::fixed,ios::floatfield);

    int T;
    cin >> T;
    for (int t = 1; t <= T; ++t) {
        int N, M;
        cin >> N >> M;
        vector<lint> v1(5), v2(5);
        for (int i = 0; i < 5; ++i) {
            cin >> v1[i];
        }
        for (int i = 0; i < 5; ++i) {
            cin >> v2[i];
        }
        cout << "Case #" << t << ": " << result(N, M, v1, v2) << endl;
    }

    return 0;
}

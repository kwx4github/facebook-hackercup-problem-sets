#include <cstdio>
#include <cstring>
#include <vector>
#include <string>
#include <algorithm>
#include <cassert>
#include <set>

#define REP(i,n) for(int i=0; i<(n); ++i)
#define FOR(i,p,k) for(int i=(p); i<=(k); ++i)
#define FORD(i,p,k) for(int i=(p); i>=(k); --i)

typedef unsigned long long ULL;

template<typename T> inline void checkmin(T &a, T b){ if(a>b) a = b; }
template<typename T> inline void checkmax(T &a, T b){ if(a<b) a = b; }
template<typename T> bool safe_mult(T &a, T b)
{ if(b && a*b/b!=a) return 0; a *= b; return 1; }

struct Case
{
  int n,m;
  int X[2][5]; //x,a,b,c,r
  std::vector<ULL> A,B;
  void gen()
  {
    A.resize(n);
    B.resize(m);
    A[0] = X[0][0];
    B[0] = X[1][0];
    FOR(i,1,std::max(n,m)-1)
    {
      if(i<n) A[i] = (X[0][1]*A[(i-1)%n]+X[0][2]*B[(i-1)%m]+X[0][3])%X[0][4];
      if(i<m) B[i] = (X[1][1]*A[(i-1)%n]+X[1][2]*B[(i-1)%m]+X[1][3])%X[1][4];
    }
  }

  Case()
  {
    scanf("%d%d",&n,&m);
    REP(i,2) REP(j,5) scanf("%d",&X[i][j]);
    gen();
    //puts("generated");
    printf("%llu\n",go());
  }

  ULL go()
  {
    std::set<int> As,Bs,Cs;
    int i=0,j=0;
    ULL res=0;
    while(1)
    {
      if(!As.size() && !Bs.size())
      {
        ULL a = 1, b = 1;
        while(i<n && Cs.count(A[i])){ i++; a++; }
        while(j<m && Cs.count(B[j])){ j++; b++; }
        res += a*b;
        if(i<n) As.insert(A[i++]);
        else if(j<m) Bs.insert(B[j++]);
        else break;
      }
      if(As.size())
      {
        if(j==m) break;
        if(Cs.count(B[j])) j++;
        else if(As.count(B[j]))
        {
          Cs.insert(B[j]);
          As.erase(B[j++]);
        }
        else Bs.insert(B[j++]);
      }
      if(Bs.size())
      {
        if(i==n) break;
        if(Cs.count(A[i])) i++;
        else if(Bs.count(A[i]))
        {
          Cs.insert(A[i]);
          Bs.erase(A[i++]);
        }
        else As.insert(A[i++]);
      }
    }
    return res-1;
  }
};

int main()
{
  int t; scanf("%d",&t);
  REP(_,t){ printf("Case #%d: ",_+1); Case(); }
  return 0;
}

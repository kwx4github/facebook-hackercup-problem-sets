#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <set>
#define MAXN 1000007
#define INF
#define PB push_back
#define MP make_pair
#define ST first
#define ND second

#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(a,b,c) for(int a=b;a<=(c);a++)
#define FORD(a,b,c) for (int a=b;a>=(c);a--)
#define VAR(v,n) __typeof(n) v=(n)
#define ALL(c) c.begin(),c.end()
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();i++)

using namespace std;

typedef long long LL;  

int n,m,test,ile_zlych,ile;
set<LL> secikn,secikm;
LL a1,b1,c1,r1,a2,b2,c2,r2;
LL wyn1[MAXN],wyn2[MAXN];
int ile_n[MAXN],ile_m[MAXN],ilosc[2*MAXN];
bool podobne[MAXN];
pair<LL,int> t[MAXN*2];

void dodaj(int p, int v) {
	if (ilosc[p] == 0) ++ile_zlych;
	ilosc[p] += v;
	if (ilosc[p] == 0) --ile_zlych;
}

int main(){
	scanf("%d",&test);
	FOR(g,1,test) {
		scanf("%d%d",&n,&m);
		scanf("%lld%lld%lld%lld%lld",&wyn1[0],&a1,&b1,&c1,&r1);
		scanf("%lld%lld%lld%lld%lld",&wyn2[0],&a2,&b2,&c2,&r2);
		
		FOR(i,1,min(n,m)-1) {
			wyn1[i] = (wyn1[i-1]*a1+b1*wyn2[i-1]+c1)%r1;
			wyn2[i] = (wyn1[i-1]*a2+b2*wyn2[i-1]+c2)%r2;
		}
		
		
		if (n > m) FOR(i,m,n-1) wyn1[i] = (wyn1[i-1]*a1+b1*wyn2[(i-1)%m]+c1)%r1;
		if (m > n) FOR(i,n,m-1) wyn2[i] = (wyn1[(i-1)%n]*a2+b2*wyn2[(i-1)]+c2)%r2;
		
		
		REP(i,n) t[ile++] = MP(wyn1[i],i);
		REP(i,m) t[ile++] = MP(wyn2[i],i+n);
		
		sort(t,t+ile);
		int wsk = 0;
		REP(i,ile) {
			if (i && t[i].ST != t[i-1].ST) ++wsk;
			if (t[i].ND >= n) wyn2[t[i].ND-n] = wsk;
				else wyn1[t[i].ND] = wsk;
		}
		
		//REP(i,n) printf("%lld ",wyn1[i]); puts("");
		//REP(i,m) printf("%lld ",wyn2[i]); puts("");

		
		ile_zlych = ile = 0;
		
		secikn.clear();
		secikm.clear();
		
		int wskn = 0;
		int wskm = 0;
		
		int pop = 0;
		while (wskn < n && wskm < m) {
			while (wskn < n && int(secikn.size()) == pop) secikn.insert(wyn1[wskn++]);
			while (wskm < m && int(secikm.size()) == pop) secikm.insert(wyn2[wskm++]);
			
			if (int(secikn.size()) == pop+1 && int(secikm.size()) == pop+1) {
				++pop;
				dodaj(wyn1[wskn-1],1);
				dodaj(wyn2[wskm-1],-1);
				if (ile_zlych == 0) podobne[pop] = true;
			}
		}
		
		secikn.clear();
		REP(i,n) {
			secikn.insert(wyn1[i]);
			++ile_n[int(secikn.size())];
		}
		
		
		secikm.clear();
		REP(i,m) {
			secikm.insert(wyn2[i]);
			++ile_m[int(secikm.size())];
		}
		
		LL res = 0;
		FOR(i,1,max(n,m)) {
			if (podobne[i]) res += LL(ile_m[i])*LL(ile_n[i]);
			ile_m[i] = ile_n[i] = 0;
			podobne[i] = false;
		}
		
		FOR(i,0,n+m+1) ilosc[i] = 0;
		
		printf("Case #%d: %lld\n",g,res);
	}
	return 0;
}

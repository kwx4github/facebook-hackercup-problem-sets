#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

int main() {
    int T;
    cin >> T;
    for (int ca = 1; ca <= T; ca++) {
	long long N, M, x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
	cin >> N >> M >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
	vector<long long> a(N), b(M);
	a[0] = x1;
	b[0] = x2;
	for (long long i = 1; i < min(N, M); i++) {
	    a[i] = (a1 * a[(i-1) % N] + b1 * b[(i-1) % M] + c1) % r1;
	    b[i] = (a2 * a[(i-1) % N] + b2 * b[(i-1) % M] + c2) % r2;
	}
	if (N > M) for (long long i = M; i < N; i++) {
	    a[i] = (a1 * a[(i-1) % N] + b1 * b[(i-1) % M] + c1) % r1;
	} else for (long long i = N; i < M; i++) {
	    b[i] = (a2 * a[(i-1) % N] + b2 * b[(i-1) % M] + c2) % r2;
	}
	N++;
	M++;
	a.push_back(-1);
	b.push_back(-2);
	//for (long long i = 0; i < a.size(); i++) {
	//    cout << a[i] << " ";
	//}
	//cout << "\n";
	//for (long long i = 0; i < b.size(); i++) {
	//    cout << b[i] << " ";
	//}
	//cout << "\n";
	set<long long> sa, sb, ints;
	long long ans = 0;
	long long lasti = -1;
	long long i = 0, j = 0;
	while (1) {
	    while (i < N) {
		if (!sa.count(a[i])) {
		    break;
		}
		i++;
	    }
	    while (j < M && (ints.size() == sb.size() && sb.size() < sa.size())) {
		sb.insert(b[j]);
		if (sa.count(b[j])) {
		    ints.insert(b[j]);
		}
		j++;
	    }
	    //cout << lasti << " " << i << "\n";
	    //for (auto it : sa) {
	    //    cout << it << " ";
	    //}
	    //cout << "\n";
	    //for (auto it : sb) {
	    //    cout << it << " ";
	    //}
	    //cout << "\n\n";
	    while (ints.size() == sa.size() && ints.size() == sb.size()) {
		ans += i - lasti;
		//cout << i - lasti << " " << j << "!!!\n";
		if (j < M) {
		    sb.insert(b[j]);
		    if (sa.count(b[j])) {
			ints.insert(b[j]);
		    }
		    j++;
		}
		if (j >= M) {
		    break;
		}
	    }
	    if (i >= N) {
		break;
	    }
	    sa.insert(a[i]);
	    if (sb.count(a[i])) {
		ints.insert(a[i]);
	    }
	    lasti = i;
	}
	cout << "Case #" << ca << ": " << ans-1 << "\n";
    }
    return 0;
}

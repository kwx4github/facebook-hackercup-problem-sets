#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;
#define MAX 1000001

int T, N, M;
long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
long long result;
int A[MAX], B[MAX];
int main() {
	scanf("%d",&T);
	for (int test=1;test<=T;++test) {
		scanf("%d%d",&N,&M);
		scanf("%lld%lld%lld%lld%lld", &x1, &a1, &b1, &c1, &r1);
		scanf("%lld%lld%lld%lld%lld", &x2, &a2, &b2, &c2, &r2);
		A[0] = x1;
		B[0] = x2;
		for (int i=1;i<max(M,N);++i) {
			if (i<N) A[i] = ((a1 * A[(i-1) % N]) % r1 + (b1 * B[(i-1) % M]) % r1 + c1) % r1;
			if (i<M) B[i] = ((a2 * A[(i-1) % N]) % r2 + (b2 * B[(i-1) % M]) % r2 + c2) % r2;
		}
		A[N] = -1;
		B[M] = -2;
		
		result = 0;
		set<int> sA, sB;
		int lA, lB, cA, cB, nAB, nBA, lnAB, lnBA;
		long long up, down;
		lA = lB = 0;
		cA = cB = 0;
		nAB = nBA = lnAB = lnBA = 0;
		while (cA <= N || cB <= M) {
			while (cA <= N) {
				if (sA.find(A[cA]) == sA.end()) {
					sA.insert(A[cA]);
					if (sB.find(A[cA]) == sB.end()) {
						nAB++;
					}
					else {
						nBA--;
					}
//					cout << A[cA] << " " << nAB << " " << nBA << " ";
					break;
				}
				cA++;
			}
			while (cB <= M) {
				if (sB.find(B[cB]) == sB.end()) {
					sB.insert(B[cB]);
					if (sA.find(B[cB]) == sA.end()) {
						nBA++;
					}
					else {
						nAB--;
					}
//					cout << B[cB] << " " << nAB << " " << nBA << " ";
					break;
				}
				cB++;
			}
//			cout << "\n";
			if (lnAB == lnBA && lnAB == 0) {
				if (nAB == nBA && nAB == 0) {
					up = cA - lA;
					down = cB - lB;
					result += up * down;
//					cout << lA << " " << cA << " " << lB << " " << cB << " " << result << "\n";
				}
				else {
					up = cA - lA;
					down = cB - lB;
					result += up * down;
//					cout << lA << " " << cA << " " << lB << " " << cB << " " << result << "\n";
				}
			}
			lnAB = nAB;
			lnBA = nBA;
			lA = cA++;
			lB = cB++;
		}
		printf("Case #%d: %lld\n", test, result);
	}
	return 0;
}

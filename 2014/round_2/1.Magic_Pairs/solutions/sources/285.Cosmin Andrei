#include <cstdio>
#include <iostream>
#include <cstring>
#include <cmath>
#include <cassert>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <bitset>
#define pii pair <int, int>
#define pdd pair <double, double>
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define INF 1000000005
#define NMAX 1000005
#define ll long long
using namespace std;
int tests, n, m;
ll x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
ll A[NMAX], B[NMAX];

set <int> va, vb, vrem;
ll res;
 
int main()
{
    freopen("input", "r", stdin);
    freopen("output", "w", stdout);
     
    cin >> tests;
    int i, lim, left, right;
    for (int test_no = 1; test_no <= tests; test_no++)
    {
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		 
		A[0] = x1; B[0] = x2;
		lim = min(n, m);
		for (i = 1; i < lim; i++)
		{
			A[i] = (a1 * A[(i - 1) % n] + b1 * B[(i - 1) % m] + c1) % r1;
			B[i] = (a2 * A[(i - 1) % n] + b2 * B[(i - 1) % m] + c2) % r2;
		}
		for (i = lim; i < n; i++)
			A[i] = (a1 * A[(i - 1) % n] + b1 * B[(i - 1) % m] + c1) % r1;
		for (i = lim; i < m; i++)
			B[i] = (a2 * A[(i - 1) % n] + b2 * B[(i - 1) % m] + c2) % r2;

		left = right = -1;
		for (i = 0; i < n; i++)
		{
			if (va.find(A[i]) == va.end())
			{
				va.insert(A[i]);
				if (vrem.find(A[i]) != vrem.end())
				{
					vrem.erase(A[i]);
					while (right + 1 < m && va.find(B[right + 1]) != va.end())
						right++;
					
					if (vrem.size() == 0)
						res += (right - left + 1);
				}
				else
				{
					left = right + 1;
					while (left < m)
					{
						vb.insert(B[left]); //expand as much as needed
						if (va.find(B[left]) == va.end())
							vrem.insert(B[left]);
							
						if (B[left] == A[i])
							break ;
							
						left++;
					}
					
					if (left == m)
						break ;
						
					right = left;
					while (right + 1 < m && va.find(B[right + 1]) != va.end())
						right++;
						
					if (vrem.size() == 0)
						res += (right - left + 1);
				}
			}
			else
			{
				while (right + 1 < m && va.find(B[right + 1]) != va.end())
					right++;
					
				if (vrem.size() == 0)
					res += (right - left + 1);
			}
		}
		
		printf("Case #%d: %lld\n", test_no, res);
		
		va.clear(); vb.clear(); vrem.clear();
		res = 0;
	}
    return 0;
}


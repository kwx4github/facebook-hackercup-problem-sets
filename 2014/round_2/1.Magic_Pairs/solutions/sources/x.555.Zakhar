import java.io.IOException;
import java.io.InputStreamReader;
import java.util.InputMismatchException;
import java.util.Set;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.TreeSet;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Zakhar Voit (zakharvoit@gmail.com)
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		Scanner in = new Scanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		TaskA solver = new TaskA();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class TaskA {
    public void solve(int testNumber, Scanner in, PrintWriter out) {
        int n = in.nextInt();
        int m = in.nextInt();

        int[] a = new int[n];
        int[] b = new int[m];

        int x1 = in.nextInt();
        int a1 = in.nextInt();
        int b1 = in.nextInt();
        int c1 = in.nextInt();
        int r1 = in.nextInt();

        int x2 = in.nextInt();
        int a2 = in.nextInt();
        int b2 = in.nextInt();
        int c2 = in.nextInt();
        int r2 = in.nextInt();

        a[0] = x1;
        b[0] = x2;

        for (int i = 1; i < Math.max(n, m); i++) {
            if (i < n)
                a[i] = (int)((1l * a1 * a[(i - 1) % n] + 1l * b1 * b[(i - 1) % m] + c1) % r1);
            if (i < m)
                b[i] = (int)((1l * a2 * a[(i - 1) % n] + 1l * b2 * b[(i - 1) % m] + c2) % r1);
        }

        Set<Integer> s = new TreeSet<>();
        Set<Integer> sl = new TreeSet<>();
        Set<Integer> sr = new TreeSet<>();

        Set<Integer> addr = new TreeSet<>();
        Set<Integer> addl = new TreeSet<>();

        long ans = 0;
        int l = -1;
        int r = 0;
        for (int p = 0; p < n; p++) {
            s.add(a[p]);
            if (!sr.contains(a[p]))
                addr.add(a[p]);
            if (!sl.contains(a[p]))
                addl.add(a[p]);
            while (r < m && (s.contains(b[r]) || addr.contains(b[r]))) {
                if (addr.contains(b[r]))
                    addr.remove(b[r]);
                sr.add(b[r]);
                ++r;
            }

            while (r < m && sr.contains(b[r])) {
                ++r;
            }

            while (l + 1 < m && !addl.isEmpty() && (s.contains(b[l + 1]) || addl.contains(b[l + 1]))) {
                if (addl.contains(b[l + 1]))
                    addl.remove(b[l + 1]);
                sl.add(b[l + 1]);
                ++l;
            }

            if (addl.isEmpty() && addr.isEmpty())
                ans += r - l;
        }

        out.println(CompetitionUtils.gcjAnswer(testNumber, ans + ""));
    }
}

class Scanner {
    BufferedReader in;
    StringTokenizer tok;

    public Scanner(InputStream in) {
        this.in = new BufferedReader(new InputStreamReader(in));
        tok = new StringTokenizer("");
    }

    public String nextToken() {
        while (!tok.hasMoreTokens()) {
            tok = new StringTokenizer(next());
        }

        return tok.nextToken();
    }

    private String tryReadNextLine() {
        try {
            return in.readLine();
        } catch (IOException e) {
            throw new InputMismatchException();
        }
    }

    public String next() {
        String newLine = tryReadNextLine();
        if (newLine == null)
            throw new InputMismatchException();
        return newLine;
    }

    public int nextInt() {
        return Integer.parseInt(nextToken());
    }

    }

class CompetitionUtils {
    public static String gcjCase(int caseNumber) {
        return "Case #" + caseNumber + ": ";
    }

    public static String gcjAnswer(int caseNumber, String ans) {
        return gcjCase(caseNumber) + ans;
    }
}


#include <iostream>
#include <ctime>
#include <string>
#include <cstring>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <queue>
#include <algorithm>
#include <cassert>
#include <sstream>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
const int inf = 1e9;
const double eps = 1e-7;

const int maxn = 130;
const int maxm = 14;

int main()
{
#if 1
	freopen("in", "r", stdin);
	//freopen("out", "w", stdout);
#else
	freopen("inspection.in", "r", stdin);
	freopen("inspection.out", "w", stdout);
#endif
	int T; cin >> T;
	for (int t = 0; t < T; ++t) {
		int n, m;
		cin >> n >> m;
		vector<ll> a(n), b(m);
		ll a1, b1, c1, r1;
		cin >> a[0] >> a1 >> b1 >> c1 >> r1;
		ll a2, b2, c2, r2;
		cin >> b[0] >> a2 >> b2 >> c2 >> r2;
		map<int, int> mp1, mp2;
		mp1[a[0]] = 0;;
		mp2[b[0]] = 0;
		for (int i = 1; i < max(n, m); ++i) {
			if (i < n) {
				a[i] = (a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1;
				if (mp1.find(a[i]) == mp1.end()) mp1[a[i]] = i;
			}
			if (i < m) {
				b[i] = (a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2;
				if (mp2.find(b[i]) == mp2.end()) mp2[b[i]] = i;
			}
		}
		
		map<int, int>::iterator it;
		int l, r;
		l = r = 0;
		ll res = 0;
		for (int i = 0; i < n; ++i) {
			
			it = mp2.find(a[i]);
			if (it == mp2.end()) break;
			l = max(l, it->second);
			while (r < m) {
				it = mp1.find(b[r]);
				if (it == mp1.end() || it->second > i) break;
				++r;
			}
			if (l < r) res += r - l;
		}
		
		printf("Case #%d: ", t + 1);
		cout << res << endl;
	}

	return 0;
}


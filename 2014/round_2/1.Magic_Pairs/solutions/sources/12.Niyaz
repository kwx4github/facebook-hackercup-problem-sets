import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.io.PrintStream;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Random;
import java.io.Reader;
import java.io.Writer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Niyaz Nigmatullin
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		FastScanner in = new FastScanner(inputStream);
		FastPrinter out = new FastPrinter(outputStream);
		MagicPairs solver = new MagicPairs();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class MagicPairs {

    public void solve(int testNumber, FastScanner in, FastPrinter out) {
        out.print("Case #" + testNumber + ": ");
        System.err.println(testNumber);
        int n = in.nextInt();
        int m = in.nextInt();
        int x1 = in.nextInt();
        long a1 = in.nextInt();
        long b1 = in.nextInt();
        long c1 = in.nextInt();
        int r1 = in.nextInt();
        int x2 = in.nextInt();
        long a2 = in.nextInt();
        long b2 = in.nextInt();
        long c2 = in.nextInt();
        int r2 = in.nextInt();
        int[] a = new int[n];
        int[] b = new int[m];
        a[0] = x1;
        b[0] = x2;
        for (int i = 1; i < n || i < m; i++) {
            if (i < n) {
                a[i] = (int) ((a1 * a[i - 1] + b1 * b[(i - 1) % m] + c1) % r1);
            }
            if (i < m) {
                b[i] = (int) ((a2 * a[(i - 1) % n] + b2 * b[i - 1] + c2) % r2);
            }
        }
        int[] c = new int[a.length + b.length];
        for (int i = 0; i < c.length; i++) {
            if (i < a.length) {
                c[i] = a[i];
            } else {
                c[i] = b[i - a.length];
            }
        }
        c = ArrayUtils.sortAndUnique(c);
        for (int i = 0; i < n; i++) {
            a[i] = Arrays.binarySearch(c, a[i]);
        }
        for (int i = 0; i < m; i++) {
            b[i] = Arrays.binarySearch(c, b[i]);
        }
        int[] ca = new int[n + 1];
        int[] cb = new int[m + 1];
        int[] addA = getIt(a, c.length, ca);
        int[] addB = getIt(b, c.length, cb);
        int[] f = new int[c.length];
        int zeros = c.length;
        long ans = 0;
        for (int i = 0; i < addA.length && i < addB.length; i++) {
            if (f[addA[i]] == 0) --zeros;
            f[addA[i]]++;
            if (f[addA[i]] == 0) ++zeros;
            if (f[addB[i]] == 0) --zeros;
            f[addB[i]]--;
            if (f[addB[i]] == 0) ++zeros;
            if (zeros == c.length) {
                ans += (long) ca[i + 1] * cb[i + 1];
            }
        }
        out.println(ans);
    }

    int[] getIt(int[] a, int m, int[] ca) {
        int[] f = new int[m];
        int n = a.length;
        int[] ret = new int[n];
        int cn = 0;
        for (int i = 0; i < a.length; i++) {
            if (f[a[i]] == 0) {
                ret[cn++] = a[i];
            }
            ++f[a[i]];
            ca[cn]++;
        }
        return ret;
    }
}

class FastScanner extends BufferedReader {

    public FastScanner(InputStream is) {
        super(new InputStreamReader(is));
    }

    public int read() {
        try {
            int ret = super.read();
//            if (isEOF && ret < 0) {
//                throw new InputMismatchException();
//            }
//            isEOF = ret == -1;
            return ret;
        } catch (IOException e) {
            throw new InputMismatchException();
        }
    }

    public String next() {
        StringBuilder sb = new StringBuilder();
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        if (c < 0) {
            return null;
        }
        while (c >= 0 && !isWhiteSpace(c)) {
            sb.appendCodePoint(c);
            c = read();
        }
        return sb.toString();
    }

    static boolean isWhiteSpace(int c) {
        return c >= 0 && c <= 32;
    }

    public int nextInt() {
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int ret = 0;
        while (c >= 0 && !isWhiteSpace(c)) {
            if (c < '0' || c > '9') {
                throw new NumberFormatException("digit expected " + (char) c
                        + " found");
            }
            ret = ret * 10 + c - '0';
            c = read();
        }
        return ret * sgn;
    }

    public String readLine() {
        try {
            return super.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    }

class FastPrinter extends PrintWriter {

    public FastPrinter(OutputStream out) {
        super(out);
    }

    public FastPrinter(Writer out) {
        super(out);
    }


}

class ArrayUtils {


    static final long seed = System.nanoTime();

    static final Random rand = new Random(seed);

    static public int[] sortAndUnique(int[] a) {
        int[] ret = a.clone();
        sort(ret);
        if (ret.length == 0) {
            return ret;
        }
        int last = ret[0];
        int j = 1;
        for (int i = 1; i < ret.length; i++) {
            if (last != ret[i]) {
                ret[j++] = ret[i];
                last = ret[i];
            }
        }
        return Arrays.copyOf(ret, j);
    }

    public static void sort(int[] a) {
        shuffle(a);
        Arrays.sort(a);
    }

    public static void shuffle(int[] a) {
        for (int i = 0; i < a.length; i++) {
            int j = rand.nextInt(i + 1);
            int t = a[i];
            a[i] = a[j];
            a[j] = t;
        }
    }


    }


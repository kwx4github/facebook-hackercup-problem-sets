#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <set>
#include <string>
#include <unordered_map>
#include <queue>
#include<fstream>
#include<stdio.h>
using namespace std;
typedef vector<int> VI;
typedef vector<string> VS;
typedef long long ll;
#define For(i,a,b) for(int i=(int)a; i<(int)b;i++)
#define Rep(i,b) For(i,0,b)
#define All(a) (a).begin(),(a).end()
#define Sort(a) sort(All(a))
#define Fill(a,b) memset(a,b,sizeof(a))
#define PB push_back
#define SZ(a) (int)(a).size()
const int NUMN = 1000000;
long long A[2][NUMN];
int N, M;
void create()
{
	long long x1, a1, b1, c1, r1;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	long long x2, a2, b2, c2, r2;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	A[0][0] = x1;
	A[1][0] = x2;
	for (int i = 1; i < max(N,M); i++)
	{
		A[0][i] = (a1*A[0][(i - 1) % N] + b1*A[1][(i - 1) % N] + c1) % r1;
		A[1][i] = (a2*A[0][(i - 1) % N] + b2*A[1][(i - 1) % N] + c2) % r2;
	}
}
void solve(int testcase)
{
	cin >> N >> M;
	create();
	set<long long> first;
	set<long long>second;
	first.clear();
	second.clear();
	long long res=0;
	int index1 = 0;
	int index2 = 0;
	int num1 = 0;
	int num2 = 0;
	int samenum = 0;
	long long newnum2 = -1;
	long long same2 = 0;
	long long newnum = -1;
	long long same1 = 0;
	while ((index1 < N) || (index2 < M))
	{
		newnum = -1;
		if (index1 < N)
			same1 = 0;
		int preindex1 = index1;
		while (index1 < N)
		{
			if ((newnum == -1) && (second.find(A[0][index1]) != second.end()))
			{
				if (first.find(A[0][index1]) == first.end())
				{
					samenum++;
					num1++;
					first.insert(A[0][index1]);
				}
				if ((num1 == num2) && (samenum == num1))
				{
					same1++;
				}
				index1++;
				continue;
			}
			if (newnum == -1)
			{
				res += same1*same2;
				newnum = A[0][index1];
				if (first.find(A[0][index1]) == first.end())
				{
					first.insert(newnum);
					num1++;
				}

				same1 = 1;
				index1++;

			}
			else{
				if (first.find(A[0][index1]) != first.end())
				{
					same1++;
					index1++;
				}
				else
				{
					//index1--;
					break;
				}
			}
		}
		if ((newnum == -1) && (same1 == 0))
		{
			same1 = index1 - preindex1;
		}
		if (index2 < M)
		{
			same2 = 0;
		}
		int preindex2 = index2;
		newnum = -1;
		while (index2 < M)
		{
			if ((newnum == -1) && (first.find(A[1][index2]) != first.end()))
			{
				if (second.find(A[1][index2]) == second.end())
				{
					num2++;
					samenum++;
					second.insert(A[1][index2]);
				}
				if ((num1 == num2) && (samenum == num1))
				{
					same2++;
				}
				index2++;
				continue;
			}
			if (newnum == -1)
			{
				res += same1*same2;
				//	num2++;
				newnum = A[1][index2];
				if (second.find(A[1][index2]) == second.end())
				{
					second.insert(newnum);
					num2++;
				}
				//second.insert(newnum);
				same2 = 1;
				index2++;
			}
			else{
				if (second.find(A[1][index2]) != second.end())
				{
					same2++;
					index2++;
				}
				else
				{
					//index2--;
					break;
				}
			}
		}
		if ((newnum == -1) && (same2 == 0))
		{
			same2 = index2 - preindex2;
		}
	}
	if ((num1 == num2) && (samenum == num1))
	    res += same1 * same2;
	cout << "Case #" << testcase << ": ";
	cout << res << endl;
}
int main() {
	int T = 1;
	ofstream file;
	file.open("out.txt");
	streambuf* sbuf = cout.rdbuf();
	cout.rdbuf(file.rdbuf());
	ifstream ifile;
	ifile.open("in.txt");
	streambuf* ibuf = cin.rdbuf();
	cin.rdbuf(ifile.rdbuf());

	cin >> T;
	for (int i = 0; i < T; i++)
	{
		solve(i + 1);
	}
	return 0;
}
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <cctype>
#include <numeric>
#include <queue>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <iterator>
#define FOR(i,s,e) for(int i=(s);i<(int)(e);i++)
#define FOE(i,s,e) for(int i=(s);i<=(int)(e);i++)
#define REP(i,n)   FOR(i,0,n)
#define ALL(x) (x).begin(), (x).end()
#define CLR(s) memset(s,0,sizeof(s))
#define PB push_back
#define ITER(v)      __typeof((v).begin())
#define FOREACH(i,v) for(ITER(v) i=(v).begin();i!=(v).end();i++)
using namespace std;
typedef long long LL;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
#define x first
#define y second

const int MX = 2036036;
LL x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
int n, m;
LL u[MX], v[MX];

bool in(LL x, set<LL> &s) {
    return s.find(x) != s.end();
}

int main() {
    int T; scanf("%d", &T); FOE(ca, 1, T) {
        scanf("%d%d", &n, &m);
        scanf("%lld%lld%lld%lld%lld", &x1, &a1, &b1, &c1, &r1);
        scanf("%lld%lld%lld%lld%lld", &x2, &a2, &b2, &c2, &r2);

        u[0] = x1;
        v[0] = x2;

        FOR(i, 1, max(n, m)) {
            u[i] = (a1 * u[(i-1) % n] + b1 * v[(i-1) % m] + c1) % r1;
            v[i] = (a2 * u[(i-1) % n] + b2 * v[(i-1) % m] + c2) % r2;
        }

        LL ans = 0LL;
        int i = 0, j = 0;
        set<LL> U, V, UV;
        U.insert(u[i++]);

        // Keep |U| == |V|
        while (j < m) {
            while (j < m && V.size() < U.size()) {
                if (!in(v[j], V)) {
                    UV.insert(v[j]);
                    V.insert(v[j++]);
                }
            }

            LL iu = 1, iv = 1;
            while (i < n && in(u[i], U)) {
                ++i;
                ++iu;
            }

            while (j < m && in(v[j], V)) {
                ++j;
                ++iv;
            }

            if (U.size() == V.size() && U.size() == UV.size()) {
                ans += iu * iv;
            }

            if (i < n) {
                UV.insert(u[i]);
                U.insert(u[i++]);
            } else {
                break;
            }
        }

        printf("Case #%d: %lld\n", ca, ans);        
    }
}

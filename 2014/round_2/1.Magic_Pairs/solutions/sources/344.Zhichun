#include <cstdio>
#include <cstring>
#include <cctype>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <bitset>
#include <algorithm>
using namespace std;

#define fs first
#define sc second
#define pb push_back
#define mp make_pair
#define range(i, n) for (int i=0; i<(n); ++i)
#define all(a) (a).begin(),a.end()
#define two(i) (1<<(i))

typedef vector<int> VI;
typedef pair<int, int> PII;
typedef long long ll;

const int MAXN = 1000000 + 5;
const int MOD_1 = 1000000007;
const int MOD_2 = 1073741823;
int n, m;
vector<int> va, vb;
set<ll> node_val_set;

struct Node {
    int cnt;
    ll sum_val;
    ll xor_val;
    ll max_val;
    ll min_val;
    //mul without zero
    ll mul_v1_val;
    ll mul_v2_val;
    Node() {
        cnt = 0;
        sum_val = xor_val = 0;
        max_val = min_val = -1;
        mul_v1_val = mul_v2_val = 1;
    }
    bool operator<(const Node&rhs) const {
        if (cnt != rhs.cnt) return cnt < rhs.cnt;
        if (sum_val != rhs.sum_val) return sum_val < rhs.sum_val;
        if (xor_val != rhs.xor_val) return xor_val < rhs.xor_val;
        if (max_val != rhs.max_val) return max_val < rhs.max_val;
        if (min_val != rhs.min_val) return min_val < rhs.min_val;
        if (mul_v1_val != rhs.mul_v1_val) return mul_v1_val < rhs.mul_v1_val;
        return mul_v2_val < rhs.mul_v2_val;
    }
    bool operator=(const Node & rhs) const {
        if (cnt != rhs.cnt) return false;
        if (sum_val != rhs.sum_val) return  false;
        if (xor_val != rhs.xor_val) return  false;
        if (max_val != rhs.max_val) return  false;       
        if (min_val != rhs.min_val) return false;
        if (mul_v1_val != rhs.mul_v1_val) return false;
        return mul_v2_val == rhs.mul_v2_val;
    }
    void init() {
        node_val_set.clear();
    }
    void output() const {
        printf("(cnt=%d, sum=%lld, xor=%lld, max=%lld, min=%lld mul_v1=%lld, mul_v2=%lld)\n", cnt, sum_val, 
                xor_val, max_val, min_val, mul_v1_val, mul_v2_val);
    }
    void update(ll x) {
        node_val_set.insert(x);
        if (cnt != node_val_set.size()) {
            cnt = node_val_set.size();
            sum_val += x;
            xor_val ^= x;
            if (max_val == -1) {
                max_val = x;
            } else {
                max_val = max(max_val, x);
            }
            if (min_val == -1) {
                min_val = x;
            } else {
                min_val = min(min_val, x);
            }
            if (x != 0) {
                mul_v1_val = (mul_v1_val * x) % MOD_1;
                mul_v2_val = (mul_v2_val * x) % MOD_2;
            }
        }
    }
};

void input() {
    ll x1, a1, b1, c1 , r1;
    ll x2, a2, b2, c2 , r2;
    cin >> n >> m;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    va.clear();
    vb.clear();
    range(i, max(n, m)) {
        if (i == 0) {
            va.pb(x1);
            vb.pb(x2);
        } else {
            if (i < n) {
                ll v1 = (a1 * va[(i - 1) % n] % r1  + b1 * vb[(i -1) % m] % r1 + c1 % r1) % r1;
                va.pb(v1);
            }
            if (i < m) {
                ll v2 = (a2 * va[(i - 1) % n] % r2  + b2 * vb[(i -1) % m] % r2 + c2 % r2) % r2;
                vb.pb(v2);
            }
        }
    }
}

vector<Node> change(const vector<int> & arr) {
    Node v;
    vector<Node> ret;
    v.init();
    range(i, arr.size()) {
        v.update(arr[i]);
        //v.output();
        ret.pb(v);
    }
    return ret;
}

ll solve() {
    //range(i, va.size()) printf("%lld ", va[i]); printf("\n");
    //range(i, vb.size()) printf("%lld ", vb[i]); printf("\n");
    vector<Node> na = change(va);
    vector<Node> nb = change(vb);
    map<Node, PII> M;
    range(i, na.size()) {
        M[na[i]].fs ++;
    }
    range(i, nb.size()) {
        M[nb[i]].sc ++;
    }
    ll ret = 0;
    for (map<Node, PII>::iterator it = M.begin(); it != M.end(); it++) {
        ll tmp =  (ll)it->sc.fs  * it->sc.sc;
        /*
        if (tmp > 0) {
            it->first.output();
            printf("%lld vs %lld\n", it->sc.fs, it->sc.sc);
        }
        */
        ret += tmp;
    }
    return ret;
}

int main() {
    freopen("_magic_pairs.txt", "r", stdin);
    freopen("_magic_pairs.output", "w", stdout);
    int t;
    cin >> t;
    for (int ca = 1; ca <= t; ca++) {
        input();
        ll ans = solve();
        cout << "Case #" << ca << ": " << ans << endl;
    }
    return 0;
}

import java.io.*;
import java.util.*;

public class R2 {

	void solveOneTest() {
		int n = in.nextInt();
		int m = in.nextInt();
		int x1 = in.nextInt();
		int a1 = in.nextInt();
		int b1 = in.nextInt();
		int c1 = in.nextInt();
		int r1 = in.nextInt();
		int x2 = in.nextInt();
		int a2 = in.nextInt();
		int b2 = in.nextInt();
		int c2 = in.nextInt();
		int r2 = in.nextInt();
		int[] a = new int[n];
		int[] b = new int[m];
		a[0] = x1;
		b[0] = x2;
		for (int i = 1; i < Math.max(n, m); i++) {
			if (i < n) {
				a[i] = (int) ((a1 * 1L * a[(i - 1) % n] + b1 * 1L
						* b[(i - 1) % m] + c1) % r1);
			}
			if (i < m) {
				b[i] = (int) ((a2 * 1L * a[(i - 1) % n] + b2 * 1L
						* b[(i - 1) % m] + c2) % r2);
			}
		}
		long res = 0;
		long lastCnt = 0;
		HashSet<Integer> was1 = new HashSet<>();
		HashSet<Integer> was2 = new HashSet<>();
		int iter = 0;
		for (int i = 0; i < n; i++) {
			int nextValue = a[i];
			if (was1.contains(nextValue)) {
				res += lastCnt;
			} else {
				was1.add(nextValue);
				lastCnt = 0;
				long from = Long.MAX_VALUE;
				while (iter != m) {
					if (was2.contains(b[iter])) {
						iter++;
						continue;
					}
					if (was1.contains(b[iter])) {
						was2.add(b[iter]);
						if (was2.size() == was1.size()) {
							from = iter;
						}
						iter++;
					} else {
						break;
					}
				}
				if (from != Long.MAX_VALUE) {
					lastCnt = iter - from;
				}
				res += lastCnt;
			}
		}
		out.println(res);
	}

	void solve() {
		int t = in.nextInt();
		for (int test = 0; test < t; test++) {
			System.err.println(test);
			long from = System.currentTimeMillis();
			out.print("Case #" + (test + 1) + ": ");
			solveOneTest();
			System.err.println(System.currentTimeMillis() - from + " ms");
		}
	}

	InputReader in;
	PrintWriter out;

	void runIO() {
		in = new InputReader(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	void run() {
		in = new InputReader(new File("input.txt"));
		try {
			out = new PrintWriter(new File("output.txt"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		solve();

		out.close();
	}

	public static void main(String[] args) {
		new R2().run();
	}

	class InputReader {
		BufferedReader bf;
		StringTokenizer st;

		InputReader(File f) {
			try {
				bf = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		InputReader(InputStream s) {
			bf = new BufferedReader(new InputStreamReader(s));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return null;
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		boolean hasMoreElements() {
			while (!st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return false;
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
	}
}
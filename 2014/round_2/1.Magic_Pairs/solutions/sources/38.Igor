#include<functional>
#include<algorithm>
//#include<iostream>
#include<numeric>
#include<cassert>
#include<cstring>
#include<cstdio>
#include<vector>
#include<queue>
//#include<cmath>
#include<set>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b);i>=(e);--i)
#define FOReach(it,V) for(__typeof((V).begin()) it=(V).begin();it!=(V).end();++it)

#define PB push_back
#define ALL(V) (V).begin(),(V).end()
#define SIZE(V) ((int)(V).size())

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

int stmp;
#define scanf stmp=scanf


const int MAX = 1000000;
const int INF = 1000000001;

int n, m;
LL A[MAX], B[MAX];

int main(int argc, char *argv[]) {
	int Z;
	scanf("%d", &Z);
	FOR(z,1,Z)
	{
		printf("Case #%d: ", z);
		scanf("%d %d", &n, &m);
		assert(n <= MAX && m <= MAX);
		LL x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
		scanf("%lld %lld %lld %lld %lld", &x1, &a1, &b1, &c1, &r1);
		scanf("%lld %lld %lld %lld %lld", &x2, &a2, &b2, &c2, &r2);
		A[0] = x1; B[0] = x2;
		FOR(i,1,max(n,m)-1)
		{
			A[i] = (a1 * A[(i-1+n)%n] + b1 * B[(i-1+m)%m] + c1) % r1;
			B[i] = (a2 * A[(i-1+n)%n] + b2 * B[(i-1+m)%m] + c2) % r2;
		}
		set<int> SA, SB;
		VI NA, NB;
		NA.PB(-1); NB.PB(-1);
		REP(i,n)
			if(SA.insert(A[i]).ND)
				NA.PB(i);
		REP(i,m)
			if(SB.insert(B[i]).ND)
				NB.PB(i);
		NA.PB(n);
		NB.PB(m);
		map<int,int> cnt;
		int k = 0;
		LL res = 0;
		FOR(i,1,min(SIZE(NA), SIZE(NB))-2)
		{
			int t = A[NA[i]];
			if(cnt[t] == 0) k++;
			cnt[t]++;
			if(cnt[t] == 0) k--;
			t = B[NB[i]];
			if(cnt[t] == 0) k++;
			cnt[t]--;
			if(cnt[t] == 0) k--;
			if(k == 0) {
				res += (LL)(NA[i+1] - NA[i]) * (NB[i+1] - NB[i]);
			}
		}
		printf("%lld\n", res);
	}
	return 0;
}


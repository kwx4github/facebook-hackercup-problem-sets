import java.awt.geom.*;
import java.io.*;
import java.math.*;
import java.util.*;
import java.util.regex.*;
import static java.lang.Math.*;
import static java.lang.System.*;
public class A {

    long solve(int caseNum) {
        int N = in.nextInt();
        int M = in.nextInt();
        int x1 = in.nextInt();
        int a1 = in.nextInt();
        int b1 = in.nextInt();
        int c1 = in.nextInt();
        int r1 = in.nextInt();
        int x2 = in.nextInt();
        int a2 = in.nextInt();
        int b2 = in.nextInt();
        int c2 = in.nextInt();
        int r2 = in.nextInt();
        int[] B1 = new int[N];
        int[] B2 = new int[M];
        B1[0] = x1;
        B2[0] = x2;
        for (int i=1; i<max(N, M); i++) {
            if (i<N) B1[i] = (int)(((long)a1*B1[(i-1)%N] + (long)b1*B2[(i-1)%M] + c1)%r1);
            if (i<M) B2[i] = (int)(((long)a2*B1[(i-1)%N] + (long)b2*B2[(i-1)%M] + c2)%r2);
        }
        // debug(B1);
        // debug(B2);

        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        List<Integer> list = new ArrayList<Integer>(map.keySet());
        int[] counts = new int[N+1];
        for (int i=0; i<N; i++) {
            if (!map.containsKey(B1[i])) {
                map.put(B1[i], map.size());
                list.add(B1[i]);
            }
            counts[map.size()]++;
        }
        Collections.sort(list);

        for (int i=0; i<M; i++) {
            if (map.containsKey(B2[i])) {
                B2[i] = map.get(B2[i]);
            } else {
                B2[i] = map.size() + B2[i] - Collections.binarySearch(list, B2[i]);
            }
        }

        Set<Integer> set = new HashSet<Integer>();
        int max = -1;
        long ans = 0;
        for (int i=0; i<M; i++) {
            set.add(B2[i]);
            max = max(max, B2[i]);
            if (max+1==set.size()) {
                ans += counts[set.size()];
            }
        }

        // debug(B2);
        // debug(counts);
        return ans;
    }

    // {{{
    Scanner in = new Scanner(System.in);
    public A() throws Exception {
        int caseCount = in.nextInt();
        for (int caseNum=1; caseNum<=caseCount; caseNum++) {
            out.printf("Case #%d: ", caseNum);
            out.println(solve(caseNum));
        }
    }
    public static void main(String[] args) throws Exception {
        new A();
    }
    public static void debug(Object... arr) {
        System.err.println(Arrays.deepToString(arr));
    }
    // }}}
}

#include <algorithm>
#include <cstring>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <string>
#include <sstream>
#include <vector>


#define INF 1000000000
#define MOD 1000000007
#define ALL(x) std::begin(x), std::end(x)
#define EACH(i, x) for (__typeof((x).begin()) i = (x).begin(); i != (x).end(); ++ i)


int T, N, M;

long long x1, a1, b1, c1, r1;
long long x2, a2, b2, c2, r2;


int main(int argc, char** argv)
{
  std::cin.tie(0);
  std::ios_base::sync_with_stdio(0);

  std::cin >> T;

  for (int t = 1; t <= T; t ++) {
    std::cin >> N >> M;

    std::cin >> x1 >> a1 >> b1 >> c1 >> r1;
    std::cin >> x2 >> a2 >> b2 >> c2 >> r2;


    std::vector<int> board1(N), board2(M);

    board1[0] = x1;
    board2[0] = x2;

    std::map<int, int> map;

    for (int i = 1, size = std::max(N, M); i < size; i ++) {
      if (i < N)
        map[board1[i] = (a1 * board1[(i - 1) % N] + b1 * board2[(i - 1) % M] + c1) % r1] = 1;

      if (i < M)
        map[board2[i] = (a2 * board1[(i - 1) % N] + b2 * board2[(i - 1) % M] + c2) % r2] = 1;
    }


    // Map to appearance order set.

    map.clear();

    map[board1[0]] = 0;

    board1[0] = 0;

    for (int i = 1, j = 1; i < N; i ++) {
      if (! map.count(board1[i]))
        map[board1[i]] = j ++;

      board1[i] = std::max(map[board1[i]], board1[i-1]);
    }

    for (int i = 0; i < M; i ++) {
      if (map.count(board2[i])) {
        board2[i] = map[board2[i]];
      }
      else {
        board2[i] = -1;
      }
    }

    
    long long c = 0;

    
    std::vector<bool> used(map.size() + 1, false);

    for (int i = 0, j = -1, k = -1; i < M; i ++) {
      if (board2[i] == -1)
        break;

      if (used[board2[i]]) {
        if (j >= 0)
          if (j == k)
            c += std::upper_bound(ALL(board1), k) - std::lower_bound(ALL(board1), k);
        
        continue;
      }


      used[board2[i]] = true;

      k = std::max(board2[i], k);

      for (int l = std::max(j, 0); used[l]; j = l ++)
        ;

      if (j == k)
        c += std::upper_bound(ALL(board1), k) - std::lower_bound(ALL(board1), k);
    }
    
    std::cout << "Case #" << t << ": " << c << std::endl;
  }
  
  return 0;
}

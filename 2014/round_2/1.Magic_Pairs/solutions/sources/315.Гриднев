#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>

#include <map>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <string>
#include <deque>
#include <bitset>
#include <algorithm>
#include <utility>
                  
#include <functional>
#include <limits>
#include <numeric>
#include <complex>

#include <cassert>
#include <cmath>
#include <memory.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;

template<typename X> inline X abs(const X& a) { return (a < 0 ? -a : a); }
template<typename X> inline X sqr(const X& a) { return (a * a); }

typedef long long li;
typedef long double ld;
typedef pair<int,int> pt;
typedef pair<ld, ld> ptd;
typedef unsigned long long uli;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define fore(i, a, b) for(int i = int(a); i <= int(b); i++)
#define ford(i, n) for(int i = int(n - 1); i >= 0; i--)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)

#define pb push_back
#define mp make_pair
#define mset(a, val) memset(a, val, sizeof (a))
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define ft first
#define sc second
#define sz(a) int((a).size())

const int INF = int(1e9);
const li INF64 = li(INF) * li(INF);
const ld EPS = 1e-9;
const ld PI = ld(3.1415926535897932384626433832795);

const int N = 1000 * 1000 + 15;

int n, m;
int x[2], a[2], b[2], c[2], r[2];

int board[2][N];



bool read() {
	if (scanf("%d %d", &n, &m) != 2)
		return false;
	forn(iter, 2) {
	 	assert(scanf("%d%d%d%d%d", &x[iter], &a[iter], &b[iter], &c[iter], &r[iter]) == 5);
	}
	return true;
}

void solve() {

    board[0][0] = x[0];
    board[1][0] = x[1];
    for(int i = 1; i < max(n, m); i++) {
     	if (i < n) {
     		li v = li(a[0]) * li(board[0][(i - 1) % n]);
     		li tv = li(b[0]) * li(board[1][(i - 1) % m]);
     		v += tv + c[0];

     		v %= r[0];
     	 	board[0][i] = v;
     	}

     	if (i < m) {
     		
     		li v = li(a[1]) * li(board[0][(i - 1) % n]);
     		li tv = li(b[1]) * li(board[1][(i - 1) % m]);
     		v += tv + c[1];

     		v %= r[1];
            board[1][i] = v;
     	}
    }

    li ans = 0;
    set < int > notInFirst;
    set < int > used;

    int tsz = 0;

    int j = 0;
    forn(i, n) {
    	int tvalue = board[0][i];

    	if (used.count(tvalue)) {
   			if (notInFirst.empty())
   				ans += tsz;
   			continue;
   	 	}

   	 	used.insert(tvalue);

   	 	if (notInFirst.count(tvalue)) {
   	 	 	notInFirst.erase(tvalue);
   	 	 	if (!notInFirst.empty())
   	 	 		continue;
   	 	 	else {
   	 	 		tsz = 1;
   	 	 		while (j < m)
   	 	 			if (used.count(board[1][j]))
   	 	 				tsz++, j++;
   	 	 			else
   	 	 				break;
   	 	 		ans += tsz;
   	 	 		continue;
   	 	   	}
   	 	}
       
        bool found = false;

        while(j < m) {
       		if (board[1][j] == tvalue) {
       			j++;
       			found = true;
       			break;
       		}
            if (!used.count(board[1][j]))
        		notInFirst.insert(board[1][j]);
        	j++;    
       	}
       	
       	if (!found)
       		break;

       	if (notInFirst.empty()) {
       		 	tsz = 1;
   	 	 		while (j < m)
   	 	 			if (used.count(board[1][j]))
   	 	 				tsz++, j++;
   	 	 			else
   	 	 				break;
   	 	 		ans += tsz;
   	 	 }	
      
      }

    cout << ans << endl;
}

int main()
{
#ifdef gridnevvvit
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
	int testCnt;
	assert(scanf("%d", &testCnt) == 1);
	forn(test, testCnt) {
		cerr << test +  1 << endl;
		printf("Case #%d: ", test + 1);
		assert(read());
		solve();
	}	
}
#include <iostream>
#include <unordered_set>
using namespace std;

long long num[2][1000000];

int main() {
    int T;
    cin >> T;
    for(int cas=1;cas<=T;cas++) {
        int N[2];
        cin >> N[0] >> N[1];
        int x[2],a[2],b[2],c[2],r[2];
        for(int i=0;i<2;i++) {
            cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
        }
        num[0][0] = x[0];
        num[1][0] = x[1];
        unordered_set<long long> s[2];
        s[0].insert(x[0]);
        s[1].insert(x[1]);
        for(int i=1;i<N[0]||i<N[1];i++) {
            if(i < N[0]) {
                num[0][i] = ((a[0] * num[0][(i-1)%N[0]]) + (b[0] * num[1][(i-1)%N[1]]) + c[0]) % r[0];
                s[0].insert(num[0][i]);
            }
            if(i < N[1]) {
                num[1][i] = ((a[1] * num[0][(i-1)%N[0]]) + (b[1] * num[1][(i-1)%N[1]]) + c[1]) % r[1];
                s[1].insert(num[1][i]);
            }
        }

        long long ANS = 0;
        unordered_set<int> news;
        unordered_set<int> empty[2];
        int index[2];
        index[0] = index[1] = 0;
        long long oldsize = 0;
        int op = 0;
        while(true) {
            int os = 1-op;
            if(!empty[op].empty()) {
                if(index[os] >= N[os]){
                    break;
                }
                int nextnum = num[os][index[os]];
                index[os]++;
                if(news.find(nextnum) != news.end() || empty[os].find(nextnum) != empty[os].end() ) {
                    ;
                } else if(empty[op].find(nextnum) != empty[op].end()) {
                    empty[op].erase(nextnum);
                    news.insert(nextnum);
                } else {
                    empty[os].insert(nextnum);
                }
                if(empty[op].empty()) {
                    long long newsize = 1;
                    while(index[os] < N[os]) {
                        nextnum = num[os][index[os]];
                        if(news.find(nextnum) != news.end() || empty[os].find(nextnum) != empty[os].end()) {
                            index[os]++;
                            newsize++;
                        } else {
                            break;
                        }
                    }
                    if(empty[os].empty()) {
                        ANS += oldsize * newsize;
                    } else {
                        oldsize = newsize;
                        op = 1-op;
                    }
                }
            } else {
                if(index[op] >= N[op]) {
                    break;
                }
                empty[op].insert(num[op][index[op]]);
                index[op]++;
                oldsize = 1;
                while(index[op] < N[op]) {
                    int nextnum = num[op][index[op]];
                    if(news.find(nextnum) != news.end() || empty[op].find(nextnum) != empty[op].end()) {
                        index[op]++;
                        oldsize++;
                    } else {
                        break;
                    }
                }
            }
        }

        cout << "Case #" << cas << ": " << ANS << endl;
    }
}
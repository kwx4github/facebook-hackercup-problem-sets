import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.util.ArrayDeque;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.util.HashSet;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Zyflair Griffane
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("magicpairs.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("magicpairs.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		PandaScanner in = new PandaScanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		MagicPairs solver = new MagicPairs();
		solver.solve(1, in, out);
		out.close();
	}
}

class MagicPairs {
    public void solve(int testNumber, PandaScanner in, PrintWriter out) {
        int T = in.nextInt();
        for (int tt = 1; tt <= T; tt++) {

            int n = in.nextInt();
            int m = in.nextInt();
            int arr[][] = { new int[n], new int[m] };
            int a[] = new int[2];
            int b[] = new int[2];
            int c[] = new int[2];
            int r[] = new int[2];
            for (int i = 0; i < 2; i++) {
                arr[i][0] = in.nextInt();
                a[i] = in.nextInt();
                b[i] = in.nextInt();
                c[i] = in.nextInt();
                r[i] = in.nextInt();
            }
            int maxLength = Math.max(n, m);
            for (int i = 1; i < maxLength; i++) {
                if (i < n) {
                    long next = (long) (a[0]) * arr[0][(i - 1) % n];
                    next += (long) (b[0]) * arr[1][(i - 1) % m];
                    next += c[0];
                    arr[0][i] = (int) (next % r[0]);
                }
                if (i < m) {
                    long next = (long) (a[1]) * arr[0][(i - 1) % n];
                    next += (long) (b[1]) * arr[1][(i - 1) % m];
                    next += c[1];
                    arr[1][i] = (int) (next % r[1]);
                }
            }
//            out.println(Arrays.toString(arr[0]));
//            out.println(Arrays.toString(arr[1]));

            long res = 0;
            HashSet<Integer> seen = new HashSet<Integer>();
            ArrayDeque<int[]> q[] = new ArrayDeque[2];
            for (int idx = 0; idx < 2; idx++) {
                q[idx] = new ArrayDeque<>();
                seen = new HashSet<Integer>();
                for (int i = 0; i < (idx == 0 ? n : m);) {
                    int toAdd = arr[idx][i];
                    int cnt = 0;
                    seen.add(arr[idx][i]);
                    while (i < (idx == 0 ? n : m) && seen.contains(arr[idx][i])) {
                        i++;
                        cnt++;
                    }
                    q[idx].add(new int[] {toAdd, cnt});
                }
            }
            seen = new HashSet<Integer>();
            while (!q[0].isEmpty() && !q[1].isEmpty()) {
                int[] p1 = q[0].poll();
                int[] p2 = q[1].poll();
//                out.println(p1[0] + " " + p1[1] + " " + p2[0] + " " + p2[1]);
                if (!seen.contains(p1[0])) {
                    seen.add(p1[0]);
                }
                else {
                    seen.remove(p1[0]);
                }
                if (!seen.contains(p2[0])) {
                    seen.add(p2[0]);
                }
                else {
                    seen.remove(p2[0]);
                }
                if (seen.size() == 0) {
                    res += (long) (p1[1]) * p2[1];
                }
            }

            out.printf("Case #%d: %d\n", tt, res);
        }
    }
}

class PandaScanner {
    public BufferedReader br;
    public StringTokenizer st;
    public InputStream in;

    public PandaScanner(InputStream in) {
        br = new BufferedReader(new InputStreamReader(this.in = in));
    }

    public String nextLine() {
        try {
            return br.readLine();
        }
        catch (Exception e) {
            return null;
        }
    }

    public String next() {
        if (st == null || !st.hasMoreTokens()) {
            st = new StringTokenizer(nextLine().trim());
            return next();
        }
        return st.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    }


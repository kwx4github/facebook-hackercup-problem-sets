#include<stdio.h>
#include<string.h>
#include<math.h>
#include<ctype.h>
#include<assert.h>
#include<stdlib.h>
#include<time.h>
#include<assert.h>

#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<iostream>
#include<algorithm>
#include<string>

using namespace std;

//#define DEBUG_MODE

#define FOR(i,n) for(int i=0;i<(n);++i)
#define REP(i,a,b) for(int i=(a);i<=(b);++i)
#define CLR(a,x) memset(a,(x),sizeof(a))

#ifdef DEBUG_MODE
#define DBG(X) X
#else
#define DBG(X)
#endif

inline int ___INT(){int ret; scanf("%d",&ret); return ret;}
#define INT ___INT()

typedef long long LL;
typedef pair<int,int> pii;
typedef vector<int> VI;

#define MAX 1000005

const int prime1 = 1000000007;
const int prime2 = 1234567891;

int N, M;
int board1[MAX];
int board2[MAX];

int val(int k, LL a, LL b, LL c, LL r){
    return (a*board1[(k-1)%N] + b*board2[(k-1)%M] + c)%r;
}

void printBoards(){
    puts("board1:");
    FOR(i,N) cout<<board1[i]<<" ";
    puts("\nboard2:");
    FOR(i,M) cout<<board2[i]<<" ";
    puts("");
}

int gen(int x1, int x2, int a1, int a2, int b1, int b2, int c1, int c2,    int r1, int r2){
    int MN = max(M,N);
    board1[0]=x1;
    board2[0]=x2;
    REP(i,1,MN-1){
        board1[i] = val(i, a1,b1,c1,r1);
        board2[i] = val(i, a2,b2,c2,r2);
    }
}

void compress2(int board[], int SZ, int& temp, map<int,int>& MAP){
    FOR(i,SZ){
        map<int,int>::iterator it=MAP.find(board[i]);
        if(it==MAP.end()){
            MAP[board[i]]=temp++;
        }

        board[i] = MAP[board[i]];
    }
}

void compress(){
    int temp = 0;
    map<int,int> MAP;

    compress2(board1,N,temp,MAP);
    compress2(board2,M,temp,MAP);
}

bool Bitset[MAX+MAX];
map<pii, int> occurs;

int bigmod(int a, int b, int mod){
    if(b==0)return 1;
    LL ret = bigmod(a,b/2,mod);
    ret = (ret * ret)%mod;
    if(b&1) ret = (ret * a)%mod;

    return ret;
}

void updateHashval(pii& hashVal, int bitPos){
    LL f = hashVal.first, s = hashVal.second;

    f = (f + bigmod(2,bitPos,prime1))%prime1;
    s = (s + bigmod(2,bitPos,prime2))%prime2;

    hashVal.first = f;
    hashVal.second = s;
}

void calc(int board[], int SZ, bool secondStep, LL& ans){
    CLR(Bitset, 0);
    pii hashVal(0,0);

    if(!secondStep) occurs.clear();

    FOR(i,SZ){
        if(!Bitset[board[i]]){
            updateHashval(hashVal, board[i]);
            Bitset[board[i]]=1;
        }
        if(!secondStep)
            occurs[hashVal]++;
        else{
            map<pii, int>::iterator it=occurs.find(hashVal);
            if(it!=occurs.end()) ans += it->second;
        }
    }
}

int main() {
    freopen("_magic_pairs.txt","r",stdin);
    //freopen("A_out.txt","w",stdout);

    int T=INT;
    REP(t,1,T){
        N=INT;M=INT;
        int x1=INT, a1=INT, b1=INT, c1=INT, r1=INT;
        int x2=INT, a2=INT, b2=INT, c2=INT, r2=INT;

        gen(x1, x2, a1, a2, b1, b2, c1, c2,    r1, r2);
        compress();

        LL ans = 0;
        calc(board1,N,false, ans);
        calc(board2,M,true, ans);

        printf("Case #%d: ",t); cout<<ans<<"\n";
    }
    return 0;
}











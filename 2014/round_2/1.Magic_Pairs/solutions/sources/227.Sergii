#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> pnt;

#define tup(name, pos) get<(pos)>(name)
#define FI(i,a) for (int i=0; i<(a); ++i)
#define FOR(i,s,e) for (int i=(s); i<(e); ++i)
#define MEMS(a,b) memset(a,b,sizeof(a))
//#define pb push_back
#define mp make_pair
#define ALL(a) a.begin(),a.end()
#define V(t) vector < t >
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define ABS(a) ((a)>(0)?(a):(-(a)))
#define ALL(a) a.begin(),a.end()

#define dout(a) cerr << a << endl
#define sout(a) cerr << a << "  "
#define lbl cerr << "debug_label" << endl;

const double pi = 3.14159265358979323846264338327950288419716939937511;
const double eps = 1e-9;

//*
char ch_ch_ch[1<<20];
inline string gs() {scanf("%s",ch_ch_ch); return string(ch_ch_ch);}
inline string gl() {gets(ch_ch_ch); return string(ch_ch_ch);}
inline int gi() {int x; scanf("%d",&x); return x;}
//*/

const int inf = 1000000000;

// code starts here

int x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;

V(int) a,b;
int n,m;

map <int, int> fa,fb;
set <int> sa,sb;

void solution() {

    int tn = gi();
    FI(iter,tn) {
        printf("Case #%d: ",iter + 1);
        cin >> n >> m;
        a.resize(n);
        b.resize(m);
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        a[0] = x1;
        b[0] = x2;
        FOR(i,1,max(n,m)) {
            if (i < n) a[i] = (a[i-1]*1ll*a1 + b[(i-1)%m]*1ll*b1 + c1)%r1;
            if (i < m) b[i] = (b[i-1]*1ll*b2 + a[(i-1)%n]*1ll*a2 + c2)%r2;
        }
        fa.clear();
        fb.clear();
        sa.clear();
        sb.clear();
        FI(i,n) {
            if (!sa.count(a[i])) {
                fa[a[i]] = i;
                sa.insert(a[i]);
            }
        }
        FI(i,m) if (!sb.count(b[i])) {
            fb[b[i]] = i;
            sb.insert(b[i]);
        }
        int pa = 0, pb = 0;
        int ca = 0, cb = -1;
        int st = 0;
        sa.clear();
        sb.clear();
        bool fine = true;
        LL res = 0;
        while (1) {
          //  dout(pa << ' ' << ca);
          // dout(pb << ' ' << cb);
          // dout("");
            if (st == 0) {
                // a
                while (pa <= ca) {
                    int cur = a[pa];
                    if (!fb.count(cur)) goto endloop;
                    cb = max(cb,fb[cur]);
                    sa.insert(cur);
                    ++pa;
                }
                if (pa == ca+1 && pb == cb+1) st = 2;
                else st = 1;
            } else if (st == 1) {
                while (pb <= cb) {
                    int cur = b[pb];
                    if (!fa.count(cur)) goto endloop;
                    ca = max(ca,fa[cur]);
                    sb.insert(cur);
                    ++pb;
                }
                if (pa == ca+1 && pb == cb+1) st = 2;
                else st = 0;
                // b
            } else if (st == 2) {
                while (pa < n) if (sa.count(a[pa])) ++pa;
                else break;
                while (pb < m) if (sb.count(b[pb])) ++pb;
                else break;
                res += (pa - ca)*1ll*(pb - cb);
                ca = pa;
                cb = pb-1;
                st = 0;
                if (pa == n || pb == m) break;
                // eq
            }
        }
endloop: cout << res << endl;

    }





}


// code ends here

int main(int argc, char** argv) {

#ifdef IGEL_ACM
    freopen("in.txt","r",stdin);
    freopen("out.txt", "w", stdout);
    clock_t beg_time = clock();
#else
    //freopen(argv[1],"r",stdin);
    //freopen("painting.in", "r", stdin);
    //freopen("painting.out", "w", stdout);

#endif

    solution();

#ifdef IGEL_ACM
    fprintf(stderr,"*** Time: %.3lf ***\n",1.0*(clock()-beg_time)/CLOCKS_PER_SEC);
#endif

    return 0;
}


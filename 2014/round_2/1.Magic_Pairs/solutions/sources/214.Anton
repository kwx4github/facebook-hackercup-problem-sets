import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.*;

public class MagicPairs {

    public void solve() {
        int testCount = nextInt();
        long time = System.currentTimeMillis();
        for (int test = 1; test <= testCount; ++test) {
            System.out.println(test);
//            System.out.println(System.currentTimeMillis() - time);
            int N = nextInt();
            int M = nextInt();
            long x1 = nextInt(), a1 = nextInt(), b1 = nextInt(), c1 = nextInt(), r1 = nextInt();
            long x2 = nextInt(), a2 = nextInt(), b2 = nextInt(), c2 = nextInt(), r2 = nextInt();
            long[] Board1 = new long[N];
            long[] Board2 = new long[M];
            Board1[0] = x1;
            Board2[0] = x2;
            for (int i = 1; i < Math.max(N, M); ++i) {
                if (i < N) Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
                if (i < M) Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
            }

            List<Long> v1 = new ArrayList<Long>(), v2 = new ArrayList<Long>();
            List<Integer> ind1 = new ArrayList<Integer>(), ind2 = new ArrayList<Integer>();

            foo(Board1, v1, ind1);
            foo(Board2, v2, ind2);

            ind1.add(N);
            ind2.add(M);

            long ans = 0;
            TreeSet<Long> xor = new TreeSet<Long>();
            for (int i = 0; i < Math.min(v1.size(), v2.size()); ++i) {
                long cv1 = v1.get(i);
                if (xor.contains(cv1)) xor.remove(cv1); else xor.add(cv1);
                long cv2 = v2.get(i);
                if (xor.contains(cv2)) xor.remove(cv2); else xor.add(cv2);

                if (xor.isEmpty()) {
                    long l1 = ind1.get(i);
                    long l2 = ind2.get(i);
                    ans += (ind1.get(i + 1) - l1) * (ind2.get(i + 1) - l2);
                }
            }

            out.println("Case #" + test + ": " + ans);
            out.flush();
        }
    }



    void foo(long[] b, List<Long> v, List<Integer> ind) {
        TreeSet<Long> set = new TreeSet<Long>();
        for (int i = 0; i < b.length; ++i) {
            if (!set.contains(b[i])) {
                set.add(b[i]);
                v.add(b[i]);
                ind.add(i);
            }
        }

    }

    long MOD = BigInteger.valueOf((int)1e+9).nextProbablePrime().longValue();

    long pow(long a, long p) {
        long ans = 1;
        while (p > 0) {
            if ((p & 1) != 0) ans = ans * a % MOD;
            a = a * a % MOD;
            p /= 2;
        }
        return ans;
    }

    int nextInt() {
        return Integer.parseInt(nextToken());
    }

    double nextDouble() {
        return Double.parseDouble(nextToken());
    }

    long nextLong() {
        return Long.parseLong(nextToken());
    }

    boolean eof;

    String nextToken() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                eof = true;
                return "0";
            }
        }
        return st.nextToken();
    }

    static BufferedReader br;
    static StringTokenizer st;
    static PrintWriter out;

    public static void main(String[] args) {
        try {
            br = new BufferedReader(new FileReader("_magic_pairs.txt"));
            out = new PrintWriter("_magic_pairs.out");
//            br = new BufferedReader(new InputStreamReader(System.in));
//            out = new PrintWriter(System.out);
            new MagicPairs().solve();
        } catch (Throwable t) {
            t.printStackTrace();
            System.exit(-1);
        } finally {
            out.close();
        }
    }
}

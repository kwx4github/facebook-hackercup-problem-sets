
#include <cstdio>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cctype>
#include <cstring>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <limits>
#include <utility>
#include <numeric>
#include <iterator>
#include <algorithm>
using namespace std;

const int INF=(1<<30)-1;
const long long LINF=(1ll<<62)-1;
const int DIRX[]={-1,0,0,1,-1,-1,1,1}, DIRY[]={0,-1,1,0,-1,1,-1,1};
const double ERR=1e-11, PI=(2*acos(0.0));

#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)<(b)?(b):(a))
template<class T> inline T MIN(T a,T b) {return ((a<b)?(a):(b));}
template<class T> inline T MAX(T a,T b) {return ((b<a)?(a):(b));}
template<class T> inline T ABS(T a) {return ((a<0)?(-a):(a));}
template<class T> inline void checkMIN(T& a,T b) {if(b<a) a=b;}
template<class T> inline void checkMAX(T& a,T b) {if(a<b) a=b;}
template<class T> inline T SQR(T x) {return (x*x);}
template<class T> inline T GCD(T a,T b) {T c; while((c=a%b)!=0)a=b,b=c; return b;}
template<class T> inline T fastPow(T Base,T Power) {T Result=1; while(Power>0){if(Power&1)Result*=Base; Power>>=1; Base*=Base;} return Result;}
template<class T> inline T fastModPow(T Base,T Power,T Mod) {T Result=1;while(Power>0){if(Power&1)Result=(Result*Base)%Mod; Power>>=1; Base=(Base*Base)%Mod;} return (Result%Mod);}
inline int compDouble(double x,double y) {double d=x-y; if(d-ERR>0.0) return 1; else if(d+ERR<0.0) return -1; else return 0;}

#define ALL(X)       (X).begin(),(X).end()
#define Size(X)      ((int)(X).size())
#define MEM(X,with)  memset((X),(with),sizeof(X))
#define EACH(X,itr)  for( __typeof((X).begin()) itr=(X).begin(); itr!=(X).end(); itr++)
#define Contains(X,item)    ((X).find(item)!=(X).end())
#define Contains_n(X,item)	(find((X).begin(),(X).end(),(item))!=(X).end())

typedef unsigned long long ULL;
typedef long long      LL;
typedef stringstream   SS;
typedef vector<string> VS;
typedef vector<double> VD;
typedef vector<LL>     VL;
typedef vector<int>    VI;
typedef pair<int,int>  Pii;

#define sz 1000006
int a[sz], b[sz];
set<int> ma, mb, xa, xb;

#define OK (xa.empty() && xb.empty())

int main()
{
	freopen("_magic_pairs.txt","r",stdin);
	//freopen("_magic_pairs_example_input.txt","r",stdin);
	freopen("out.txt","w",stdout);
	
	int T;cin>>T;
	for(int t=1;t<=T;t++) {
        int na,nb;cin>>na>>nb;
        LL a1,b1,c1,r1,a2,b2,c2,r2;
        cin>>a[0]>>a1>>b1>>c1>>r1;
        cin>>b[0]>>a2>>b2>>c2>>r2;
        for(int i=1;i<na || i<nb;i++) {
            if(i<na) {
                a[i] = (a1*a[i-1] + b1*b[(nb+i-1)%nb] + c1) % r1;
            }
            if(i<nb) {
                b[i] = (a2*a[(na+i-1)%na] + b2*b[i-1] + c2) % r2;
            }
        }
//        for(int i=0;i<na;i++) cout<<" "<<a[i]; puts("");
//        for(int i=0;i<nb;i++) cout<<" "<<b[i]; puts("");
        
        ma.clear();mb.clear();xa.clear();xb.clear();
        
        int i=0,j=0,f=-1;
        LL ans=0;
        
        for(;i<na;i++) {
            ma.insert(a[i]);
            if(Contains(xa,a[i])) {
                xa.erase(a[i]);
            }
            if(!Contains(mb,a[i])) {
                xb.insert(a[i]);
            }
            
            if(!xb.empty()) {
                for(;j<nb && !xb.empty();j++) {
                    if(!Contains(ma,b[j])) {
                        break;
                    }
                    mb.insert(b[j]);
                    if(Contains(xb,b[j])) {
                        xb.erase(b[j]);
                    }
                }
                if(xb.empty()) {
                    f = j;
                }
            }
            for(;j<nb;j++) {
                if(!Contains(ma,b[j])) {
                    break;
                }
                mb.insert(b[j]);
                if(Contains(xb,b[j])) {
                    xb.erase(b[j]);
                }
            }
            if(OK) {
                ans += j-f+1;
//                printf("%d: %d-%d\n",i,f-1,j-1);
            }
        }
//        cout<<OK<<endl;
        printf("Case #%d: ",t);
        cout<<ans;
        puts("");
	}
	
	return 0;
}

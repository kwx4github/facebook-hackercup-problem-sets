#include <iostream>
#include <vector>
#include <set>

using namespace std;

int main() {

    vector<int> v1, v2;
    int n, m;
    long long x1, x2, a1, b1, c1, r1, a2, b2, c2, r2;

    int tc, t = 1;

    for (cin >> tc; t <= tc; t++) {
        cin >> n >> m
            >> x1 >> a1 >> b1 >> c1 >> r1
            >> x2 >> a2 >> b2 >> c2 >> r2;

        v1.resize(n);
        v2.resize(m);

        v1[0] = x1;
        v2[0] = x2;

        vector<int> idistinct1 { 0 }, idistinct2 { 0 };
        set<int> sv1 { x1 },
                 sv2 { x2 };

        for (int i = 1; i < n || i < m; i++) {
            if (i < n) {
                v1[i] = (a1 * v1[(i - 1) % n] + b1 * v2[(i - 1) % m] + c1) % r1;

                if (sv1.count(v1[i]) == 0)
                    idistinct1.push_back(i);

                sv1.insert(v1[i]);
            }

            if (i < m) {
                v2[i] = (a2 * v1[(i - 1) % n] + b2 * v2[(i - 1) % m] + c2) % r2;

                if (sv2.count(v2[i]) == 0)
                    idistinct2.push_back(i);

                sv2.insert(v2[i]);
            }
        }


#if 0
        for (int i : v1)
            cout << i << " ";
        cout << endl;

        for (int i : v2)
            cout << i << " ";
        cout << endl;

#endif

        long long ans = 0;

        set<int> s1 { v1[0] },
                 s2 { v2[0] },
                 l1,
                 l2;

        sv1 = set<int> { x1 };
        sv2 = set<int> { x2 };

        if (v1[0] != v2[0]) {
            l1.insert(v2[0]);
            l2.insert(v1[0]);
        }

        int i1 = 0, i2 = 0;

        while (i1 < idistinct1.size() || i2 < idistinct2.size()) {

            bool changed = false;

            while (l1.size()) {
                i1++;

                if (i1 < idistinct1.size()) {
                    int newi = v1[idistinct1[i1]];

                    l1.erase(newi);
                    sv1.insert(newi);

                    if (sv2.count(newi) == 0)
                        l2.insert(newi);

                    changed = true;
                } else
                    break;
            }

            while (l2.size()) {
                i2++;

                if (i2 < idistinct2.size()) {
                    int newi = v2[idistinct2[i2]];

                    l2.erase(newi);
                    sv2.insert(newi);

                    if (sv1.count(newi) == 0)
                        l1.insert(newi);

                    changed = true;
                } else
                    break;
            }

            if (l1.size() + l2.size() == 0) {
                long long si1 = (i1 + 1 < idistinct1.size()) ? idistinct1[i1+1] - idistinct1[i1] : v1.size() - idistinct1.back();
                long long si2 = (i2 + 1 < idistinct2.size()) ? idistinct2[i2+1] - idistinct2[i2] : v2.size() - idistinct2.back();

                ans += si1 * si2;

                i1 = min(i1 + 1, (int)idistinct1.size());
                i2 = min(i2 + 1, (int)idistinct2.size());

                if (i1 < idistinct1.size()) {
                    int newi = v1[idistinct1[i1]];

                    sv1.insert(newi);
                    if (sv2.count(newi) == 0)
                        l2.insert(newi);
                }

                if (i2 < idistinct2.size()) {
                    int newi = v2[idistinct2[i2]];

                    sv2.insert(newi);
                    l2.erase(newi);

                    if (sv1.count(newi) == 0)
                        l1.insert(newi);
                }
            } else if (!changed)
                break;
        }

        cout << "Case #" << t << ": " << ans << endl;
    }

    return 0;
}

/**
 * Created by hedgehog on 23.11.13.
 */

import java.io.BufferedReader
import java.io.PrintWriter
import java.io.FileReader
import java.util.StringTokenizer
import java.util.Locale
import java.math.BigInteger
import kotlin.math.*
import java.util.TreeSet

val inp = BufferedReader(FileReader("input.txt"))
val oup = PrintWriter("output.txt")
var stt = StringTokenizer("")

fun nextToken() : String {
    while (!stt.hasMoreTokens()) stt = StringTokenizer(inp.readLine())
    return stt.nextToken()
}

fun nextInt() = nextToken().toInt()

fun nextLong() = nextToken().toLong()

fun nextDouble() = nextToken().toDouble()

var q1 = IntArray(1000100)
var q2 = IntArray(1000100)

fun solve() {
    val n = nextInt()
    val m = nextInt()
    q1[0] = nextInt()
    val a1 = nextLong()
    val b1 = nextLong()
    val c1 = nextLong()
    val r1 = nextLong()
    q2[0] = nextInt()
    val a2 = nextLong()
    val b2 = nextLong()
    val c2 = nextLong()
    val r2 = nextLong()
    for (i in 1..Math.max(n, m) - 1) {
        q1[i] = ((a1 * q1[(i - 1) % n] + b1 * q2[(i - 1) % m] + c1) % r1).toInt()
        q2[i] = ((a2 * q1[(i - 1) % n] + b2 * q2[(i - 1) % m] + c2) % r2).toInt()
    }
    val only1 = TreeSet<Int>()
    val only2 = TreeSet<Int>()
    val both = TreeSet<Int>()
    only1.add(q1[0])
    var i1 = 1
    var i2 = 0
    var ans = 0.toLong()
    while (i1 < n || i2 < m) {
        var cont = true
        while (cont) {
            cont = false
            while (i1 < n && !only2.isEmpty()) {
                cont = true
                if (!(q1[i1] in both)) {
                    if (q1[i1] in only2) {
                        both.add(q1[i1])
                        only2.remove(q1[i1])
                    } else {
                        only1.add(q1[i1])
                    }
                }
                i1++
            }
            while (i2 < m && !only1.isEmpty()) {
                cont = true
                if (!(q2[i2] in both)) {
                    if (q2[i2] in only1) {
                        both.add(q2[i2])
                        only1.remove(q2[i2])
                    } else {
                        only2.add(q2[i2])
                    }
                }
                i2++
            }
        }
        if (only1.isEmpty() && only2.isEmpty()) {
            var j1 = i1
            while (j1 < n && q1[j1] in both) j1++
            var j2 = i2
            while (j2 < m && q2[j2] in both) j2++
            ans += (j1 - i1 + 1).toLong() * (j2 - i2 + 1)
            i1 = j1
            i2 = j2
            if (i1 < n) only1.add(q1[i1++]) else
                if (i2 < m) only2.add(q2[i2++])
        }
        if (i1 == n && only2.isNotEmpty()) break
        if (i2 == m && only1.isNotEmpty()) break
    }
    oup.println(ans)
}

fun main(args: Array<String>) {
    Locale.setDefault(Locale.US);
    val t = nextInt()
    for (i in 1..t) {
        oup.print("Case #$i: ")
        solve()
    }
    oup.close()
}

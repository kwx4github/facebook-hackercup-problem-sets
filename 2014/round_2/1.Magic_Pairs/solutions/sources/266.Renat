#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;

void out(const vl &v) {
    for (int i = 0; i < v.size(); ++i)
        cerr << v[i] << ' ';
    cerr << endl;
}

int main() {
    int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        printf("Case #%d: ", test);
        int n,m;
        ll x[2],a[2],b[2],c[2],r[2];
        cin >> n >> m;
        for (int i = 0; i < 2; ++i) {
            cin >> x[i] >> a[i] >> b[i] >> c[i] >> r[i];
        }
        vvl v(2);
        v[0].resize(n);
        v[1].resize(m);
        v[0][0] = x[0];
        v[1][0] = x[1];
        for (int i = 1; i < max(n,m); ++i) {
            for (int t = 0; t < 2; ++t) if (i < v[t].size()) {
                v[t][i] = (a[t]*v[0][(i-1) % n] + b[t]*v[1][(i-1) % m] + c[t]) % r[t];
            }
        }
//        out(v[0]);
//        out(v[1]);
        set<int> was[2][2];
        for (int t = 0; t < 2; ++t) {
            was[t][0].insert(v[t][0]);
            if (v[0][0] != v[1][0]) {
                was[t][1].insert(v[t][0]);
            }
        }
        vi it(2, 1);
        ll res = 0;
        while (it[0] <= n && it[1] <= m) {
            for (int t = 0; t < 2; ++t) {
                while (!was[t][1].empty() && it[1-t] < v[1-t].size()) {
                    int cur = v[1-t][it[1-t]];
                    was[1-t][0].insert(cur);
                    was[t][1].erase(cur);
                    if (was[t][0].count(cur) == 0) {
                        was[1-t][1].insert(cur);
                    }
                    ++it[1-t];
                }
            }
            if (was[0][1].empty() && was[1][1].empty()) {
                vl cnt(2, 1);
                for (int t = 0; t < 2; ++t) {
                    while (it[t] < v[t].size() && was[t][0].count(v[t][it[t]])) {
                        ++it[t];
                        ++cnt[t];
                    }
                }
                res += cnt[0] * cnt[1];
//                if (test == 5) {
//                    cerr << res << ' ' << it[0] << ' ' << it[1] << endl;
//                }
                if (it[0] == n || it[1] == m) {
                    break;
                }
                was[0][0].insert(v[0][it[0]]);
                if (!was[1][0].count(v[0][it[0]])) {
                    was[0][1].insert(v[0][it[0]]);
                }
                ++it[0];
            }
            if ((it[0] == n && !was[1][1].empty()) || (it[1] == m && !was[0][1].empty())) {
                break;
            }
        }
        cout << res << endl;
    }
    return 0;
}

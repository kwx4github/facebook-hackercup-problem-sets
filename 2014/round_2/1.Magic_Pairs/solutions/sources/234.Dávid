#define _CRT_SECURE_NO_WARNINGS

#include <algorithm>
#include <cstdio>
#include <cstring>
#include <hash_map>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

int tc_N;
char sLine[65536];



// Magic Pairs, matching set of colors
int board1[1048576];
int board2[1048576];

void solve_a()
{
	scanf("%d", &tc_N);
	for (int tc = 1; tc <= tc_N; ++tc) {
		int N, M;
		long long x1, a1, b1, c1, r1;
		long long x2, a2, b2, c2, r2;
		scanf("%d %d", &N, &M);
		scanf("%lld %lld %lld %lld %lld", &x1, &a1, &b1, &c1, &r1);
		scanf("%lld %lld %lld %lld %lld", &x2, &a2, &b2, &c2, &r2);

		board1[0] = x1;
		board2[0] = x2;
		for (int i = 1; i < std::max(N, M); ++i) {
			board1[i] = ((a1 * board1[(i - 1) % N]) + (b1 * board2[(i - 1) % M]) + c1) % r1;
			board2[i] = ((a2 * board1[(i - 1) % N]) + (b2 * board2[(i - 1) % M]) + c2) % r2;
		}

		// Compare sets
		long long totalMagic = 0;
		set<int> b1_full;
		set<int> b1_extra;
		set<int> b2_full;
		set<int> b2_extra;
		int i1 = 0, i2 = 0;
		while (i1 < N) {
			b1_full.insert(board1[i1]);
			if (b2_full.find(board1[i1]) == b2_full.end()) {
				b1_extra.insert(board1[i1]);
			}
			i1++;
			while (b1_extra.size() > 0 || b2_extra.size() > 0) {
				if (b1_extra.size() > 0) {
					if (i2 >= M)
						break;
					int b2_next = board2[i2++];
					if (b1_extra.find(b2_next) != b1_extra.end()) {
						b1_extra.erase(b2_next);
						b2_full.insert(b2_next);
					}
					else {
						b2_full.insert(b2_next);
						if (b1_full.find(b2_next) == b1_full.end()) {
							b2_extra.insert(b2_next);
						}
					}
				}
				else if (b2_extra.size() > 0) {
					if (i1 >= N)
						break;
					int b1_next = board1[i1++];
					if (b2_extra.find(b1_next) != b2_extra.end()) {
						b2_extra.erase(b1_next);
						b1_full.insert(b1_next);
					}
					else {
						b1_full.insert(b1_next);
						if (b2_full.find(b1_next) == b2_full.end()) {
							b1_extra.insert(b1_next);
						}
					}
				}
			}
			if (b1_extra.size() == 0 && b2_extra.size() == 0) {
				// board1[0 .. i1 - 1] and board2[0 .. i2 - 1] represent the same set

				int b2_size = 1;
				while (i2 < M && b2_full.find(board2[i2]) != b2_full.end()) {
					b2_size++;
					i2++;
				}

				int b1_size = 1;
				while (i1 < N && b1_full.find(board1[i1]) != b1_full.end()) {
					b1_size++;
					i1++;
				}

				totalMagic += ((long long)b1_size) * ((long long)b2_size);
			}
		}

		printf("Case #%d: %lld\n", tc, totalMagic);
	}
}



// 
void solve_b()
{
	scanf("%d", &tc_N);
	for (int tc = 1; tc <= tc_N; ++tc) {

		printf("Case #%d: \n", tc);
	}
}



// 
void solve_c()
{
	scanf("%d", &tc_N);
	for (int tc = 1; tc <= tc_N; ++tc) {

		printf("Case #%d: \n", tc);
	}
}



int main(int argc, char* argv[])
{
	solve_a();
	//solve_b();
	//solve_c();

	return 0;
}
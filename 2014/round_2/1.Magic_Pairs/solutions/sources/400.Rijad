#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#define mp make_pair
#define xx first
#define yy second
#define pb push_back
using namespace std;

typedef long long lint;
int n,m,x[2],a[2],b[2],c[2],r[2],t;
vector<lint> bo[2];
vector<pair<int,int> > ve[2];
set<int> st;
priority_queue<int> im[2];

int main()
{
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
	scanf("%d",&t);
	for(int CA=1;CA<=t;CA++)
    {
        scanf("%d %d",&n,&m);bo[0].resize(n);bo[1].resize(m);
        scanf("%d %d %d %d %d",&x[0],&a[0],&b[0],&c[0],&r[0]);
        scanf("%d %d %d %d %d",&x[1],&a[1],&b[1],&c[1],&r[1]);
        bo[0][0]=x[0];bo[1][0]=x[1];
        for(int i=1;i<max(n,m);i++)
        {
            if (i<n)bo[0][i]=((a[0]*bo[0][(i-1)%n])%r[0]+b[0]*bo[1][(i-1)%m]+c[0])%r[0];
            if (i<m)bo[1][i]=((a[1]*bo[0][(i-1)%n])%r[1]+b[1]*bo[1][(i-1)%m]+c[1])%r[1];
        }
//        for(int i=0;i<n;i++)printf("%d ",bo[0][i]);cout<<endl;
//        for(int i=0;i<m;i++)printf("%d ",bo[1][i]);cout<<endl;
        st.clear();ve[0].clear();ve[1].clear();
        lint br=0;
        for(int x=0;x<2;x++)
        {
            st.clear();int c,dod=1;
            for(int i=0;i<((x)?m:n);i++)
            {
                c=st.size();
                st.insert(bo[x][i]);
                if (c==st.size())dod++;
                else {ve[x].pb(mp(bo[x][i],dod));dod=1;}
            }
            ve[x].pb(mp((1<<30)-x,dod));
        }
//        for(int i=0;i<ve[0].size()-1;i++)printf("(%d,%d) ",ve[0][i].xx,ve[0][i+1].yy);cout<<endl;
//        for(int i=0;i<ve[1].size()-1;i++)printf("(%d,%d) ",ve[1][i].xx,ve[1][i+1].yy);cout<<endl;
        for(int i=0;i<2;i++)while(!im[i].empty())im[i].pop();
        for(int i=0;i<min(ve[0].size(),ve[1].size())-1;i++)
        {
//            if (!((*im[1].find(ve[0][i].xx))==ve[0][i].xx))im[0].insert(ve[0][i].xx);
//            else im[1].erase(ve[0][i].xx);
//            if (!((*im[0].find(ve[1][i].xx))==ve[1][i].xx))im[1].insert(ve[1][i].xx);
//            else im[0].erase(ve[1][i].xx);
            for(int j=0;j<2;j++)im[j].push(ve[j][i].xx);
            while ((!im[0].empty() && !im[1].empty()) && im[0].top()==im[1].top()){im[0].pop();im[1].pop();}
//            printf("%d %d %d\n",i,im[0].size(),im[1].size());
            if (im[0].empty() && im[1].empty()){br+=lint(ve[0][i+1].yy)*ve[1][i+1].yy;}
        }
        printf("Case #%d: %lld\n",CA,br);
    }
    return 0;
}

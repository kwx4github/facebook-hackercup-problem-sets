#include <iostream>
#include <fstream>
#include <vector>
#include <set>
using namespace std;
long long N, M, x1, a1, b1, c1, r1, x2, a2, b2, c2, r2;
long long B1[1000001],B2[1000001];
set<long long> s1,s2,diff;
//vector<long long> set1,set2,diff;
/*
pair<bool,int> bs(vector<long long> &V, long long el)
{
    int start=0,end=V.size(),middle;
    while(start<end)
    {
        middle=(start+end)/2;
        if(V[middle]==el)return make_pair(1,middle);
        else if(V[middle]<el)start=middle+1;
        else end=middle;
    }
    return make_pair(0,middle);
}
*/
void fill()
{
    B1[0]=x1;B2[0]=x2;
    for(int i=1;i<max(N,M);i++)
    {
        if(i<N)
        {
            B1[i] = (a1 * B1[(i-1) % N] + b1 * B2[(i-1) % M] + c1) % r1;
        }
        if(i<M)
        {
            B2[i] = (a2 * B1[(i-1) % N] + b2 * B2[(i-1) % M] + c2) % r2;
        }
    }
    B1[N]=-1;N++;
    B2[M]=-2;M++;
}
long long f()
{
    s1.clear();s2.clear();diff.clear();
    int i=0,j=0,oldSize;
    long long total=0,count1,count2;
    s1.insert(B1[0]);
    s2.insert(B2[0]);
    if(B1[0]!=B2[0])
    {
        diff.insert(B1[0]);
        diff.insert(B2[0]);
    }
    while(i<N && j<M)
    {
        if(s1.size()==s2.size())
        {
            bool toAdd=(diff.size()==0);
            oldSize=s1.size();
            count1=-1;
            while(i<N)//add all elements from B1 in s1 to increase size
            {
                //cout << i << " >> " << B1[i] << "....";
                s1.insert(B1[i]);
                i++;
                count1++;
                //cout << B1[i] << endl;

                if(oldSize!=s1.size())
                {
                    i--;
                    //s1.erase(s1.find(B1[i]));
                    set<long long>::iterator it;
                    it=diff.find(B1[i]);
                    if(it==diff.end())
                    {
                        //cout << B1[i];
                        diff.insert(B1[i]);
                    }
                    else
                    {
                        diff.erase(it);
                    }
                    break;
                }
            }
            oldSize=s2.size();
            count2=-1;
            while(j<M)//add all elements from B2 in s2 to increase size
            {
                s2.insert(B2[j]);
                j++;
                count2++;
                if(oldSize!=s2.size())
                {
                    if(s2.size()!=oldSize)
                    {
                        j--;
                        set<long long>::iterator it;
                        it=diff.find(B2[j]);
                        if(it==diff.end())
                        {

                            diff.insert(B2[j]);
                        }
                        else
                        {
                            //cout << B2[j];
                            diff.erase(it);
                        }
                    }
                    //s2.erase(s2.find(B2[j]));
                    break;
                }
            }
            //i--;j--;
            //cout << i << " " << count1 << " " << s1.size() << endl;
            //cout << j << " " << count2 << " " << s2.size() << endl;
            if(i==N)
            {
                count1++;
            }
            if(j==M)
            {
                count2++;
            }
            if(toAdd)
            {
                //cout << "##" << endl;
                //cout << i << " " << count1 << " " << s1.size() << endl;
                //cout << j << " " << count2 << " " << s2.size() << endl;
                total=total+count1*count2;
            }
            if(i==N-1 || j==N-1)break;
            //cout << endl;
        }
        else if(s1.size()<s2.size())
        {
            while(i<N)
            {
                oldSize=s1.size();
                s1.insert(B1[i]);
                i++;
                if(s1.size()!=oldSize)
                {
                    set<long long>::iterator it;
                    it=diff.find(B1[i]);
                    if(it==diff.end())
                    {
                        diff.insert(B1[i]);
                    }
                    else
                    {
                        diff.erase(it);
                    }
                }
                if(s1.size()==s2.size())break;
            }
            if(s1.size()!=s2.size())break;
        }
        else
        {
            while(j<N)
            {
                oldSize=s2.size();
                s2.insert(B2[j]);
                j++;
                if(s2.size()!=oldSize)
                {
                    set<long long>::iterator it;
                    it=diff.find(B2[j]);
                    if(it==diff.end())
                    {
                        diff.insert(B2[j]);
                    }
                    else
                    {
                        diff.erase(it);
                    }
                }
                if(s1.size()==s2.size())break;
            }
            if(s1.size()!=s2.size())break;
        }
/*
        cout << ">>";
        for (std::set<long long>::iterator it=diff.begin(); it!=diff.end(); ++it)
                std::cout << ' ' << *it;
        cout << endl;
        */
        //first=false;
    }
    return total;
}
long long f2()
{
    s1.clear();s2.clear();diff.clear();
    int i=0,j=0,oldSize;
    long long total=0,count1,count2;
    while(i<N && j<M)
    {
        if(s1.size()==s2.size())
        {

            while(i<N)
            {
                oldSize=s1.size();
                //s1.insert(b1[i]);
                //if(s1)
            }
        }
    }
    return 0;
}
void p()
{
    for(int i=0;i<N;i++)
    {
        cout << B1[i] << " ";
    }
    cout << endl;
    for(int i=0;i<M;i++)
    {
        cout << B2[i] << " ";
    }
    cout << endl;
}
int main()
{
    freopen("t.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int T;
    cin >> T;
    for(int t=0;t<T;t++)
    {
        cin >> N >> M >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
        fill();
        //p();
        //break;
        cout << "Case #" << (t+1) << ": " << f() << endl;
    }
    return 0;
}

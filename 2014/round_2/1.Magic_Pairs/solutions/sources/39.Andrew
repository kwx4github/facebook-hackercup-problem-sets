import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.*;

public class A {
    int HN = 4;
    long[] R = new long[HN];
    long[] X = new long[HN];

    void run() throws IOException {
        Random rnd = new Random(238947290478L);
        for (int i = 0; i < HN; i++) {
            R[i] = BigInteger.valueOf(rnd.nextInt(1_000_000_000) + 1_000_000_000).nextProbablePrime().longValue();
            X[i] = BigInteger.valueOf(rnd.nextInt(1_000) + 1_000).nextProbablePrime().longValue();
//            System.out.println(R[i] + " " + X[i]);
        }

        Scanner in = new Scanner(new File("_magic_pairs.txt"));
        PrintWriter out = new PrintWriter("_magic_pairs.out");
        int tn = in.nextInt();
        for (int test = 1; test <= tn; test++) {
            long time = System.currentTimeMillis();

            int n = in.nextInt();
            int m = in.nextInt();

            long[] x = new long[n];
            long[] y = new long[m];
            x[0] = in.nextInt();
            long a1 = in.nextInt();
            long b1 = in.nextInt();
            long c1 = in.nextInt();
            long r1 = in.nextInt();
            y[0] = in.nextInt();
            long a2 = in.nextInt();
            long b2 = in.nextInt();
            long c2 = in.nextInt();
            long r2 = in.nextInt();
            for (int i = 1; i < Math.max(n, m); i++) {
                if (i < n) {
                    x[i] = (a1 * x[(i-1) % n] + b1 * y[(i-1) % m] + c1) % r1;
                }
                if (i < m) {
                    y[i] = (a2 * x[(i-1) % n] + b2 * y[(i-1) % m] + c2) % r2;
                }
            }
            int[] fromx = new int[n + 2];
            int[] fromy = new int[m + 2];
            long[][] hashx = new long[n + 1][HN];
            long[][] hashy = new long[m + 1][HN];
            int cx = doHashes(x, fromx, hashx);
            int cy = doHashes(y, fromy, hashy);
            System.out.println(cx + " "+  cy);
//            System.out.println(Arrays.toString(x));
//            System.out.println(Arrays.toString(y));
//            System.out.println(cx + " " + Arrays.toString(fromx));
//            System.out.println(cy + " " + Arrays.toString(fromy));
//            System.out.println(cx + " " + Arrays.toString(hashx));
//            System.out.println(cy + " " + Arrays.toString(hashy));

            long ans = 0;
            for (int i = 1; i <= Math.min(cx, cy); i++) {
                if (Arrays.equals(hashx[i], hashy[i])) {
                    long v = 1L * (fromx[i + 1] - fromx[i]) * (fromy[i + 1] - fromy[i]);
//                    System.out.println(i + " " + v);
                    ans += v;
                }
            }

            System.out.println("Case #" + test + ": " + ans);
            out.println("Case #" + test + ": " + ans);
        }
        out.close();
    }

    int doHashes(long[] x, int[] fromx, long[][] hashx) {
        Set<Long> ux = new HashSet<>();
        int n = x.length;
        Arrays.fill(hashx[0], 0);
        fromx[0] = -1;
        int cx = 0;
//        System.out.println(X + " " + R);
        for (int i = 0; i < n; i++) {
            if (!ux.contains(x[i])) {
                ux.add(x[i]);
                cx++;
                fromx[cx] = i;
                for (int j = 0; j < HN; j++) {
                    hashx[cx][j] = (hashx[cx - 1][j] + pow(X[j], x[i], R[j])) % R[j];
                }
            }
        }
        fromx[cx + 1] = n;
        return cx;
    }

    long pow(long x, long y, long m) {
        long r = 1;
        while (y > 0) {
            if (y % 2 != 0) {
                r = (r * x) % m;
            }
            y /= 2;
            x = (x * x) % m;
        }
        return r;
    }

    public static void main(String[] args) throws IOException {
        new A().run();
    }
}
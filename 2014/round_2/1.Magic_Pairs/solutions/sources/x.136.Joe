#include<fstream>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<string>
#include<vector>
#include<list>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<functional>
#include<numeric>
using namespace std;
typedef pair<int, int> pii;
typedef long long ll;

namespace
{
	int N,M;
	ll x1,a1,b1,c1,r1,x2,a2,b2,c2,r2;
	ll B[1001001], C[1001001];
	bool seenB[2001001], seenC[2001001];
	int all[2001001], na;

	int calcIndex(int x)
	{
		return distance(all, lower_bound(all, all+na, x));
	}
}

//int mainFHC14_R2_MagicPairs()
int main()
{
	ifstream fin("FHC\\_magic_pairs.txt");
	ofstream fout("FHC\\_magic_pairs_out.txt");

	unsigned int numberOfCases;
	fin >> numberOfCases;

	for (unsigned int zz=1; zz<=numberOfCases; ++zz)
	{
		fin >> N >> M >> x1 >> a1 >> b1 >> c1 >> r1 >> x2 >> a2 >> b2 >> c2 >> r2;
		B[0] = x1;
		C[0] = x2;
		for (int i=1; i<N || i<M; ++i)
		{
			B[i] = (a1 * B[(i-1) % N] + b1 * C[(i-1) % M] + c1) % r1;
			C[i] = (a2 * B[(i-1) % N] + b2 * C[(i-1) % M] + c2) % r2;
		}
		
		set<int> ss;
		ss.insert(B, B+N);
		ss.insert(C, C+M);
		na=ss.size();
		copy(ss.begin(), ss.end(), all);

		for (int i=1; i<N || i<M; ++i)
		{
			B[i] = calcIndex(B[i]);
			C[i] = calcIndex(C[i]);
		}

		memset(seenB,0,sizeof(seenB));
		memset(seenC,0,sizeof(seenC));

		seenB[B[0]] = true;
		seenC[C[0]] = true;

		ll ret = 0;

		int i=1, j=1;
		int onlyB = B[0] == C[0] ? 0 : 1;
		int onlyC = onlyB;
		while (true)
		{
			bool justDone = false;
			if (onlyB == 0 && onlyC == 0)
			{
				int start_i = i-1, start_j = j-1;
				while (i < N && seenB[B[i]]) ++i;
				while (j < M && seenC[C[j]]) ++j;

				ll add = ll(i-start_i) * ll(j-start_j);
				ret += add;
				justDone = true;
			}

			if ((justDone || onlyC > 0) && i < N)
			{
				ll val = B[i];
				if (!seenB[val])
				{
					seenB[val] = true;
					if (seenC[val])
						--onlyC;
					else
						++onlyB;
				}

				++i;
			}
			else if ((justDone || onlyB > 0) && j < M)
			{
				ll val = C[j];
				if (!seenC[val])
				{
					seenC[val] = true;
					if (seenB[val])
						--onlyB;
					else
						++onlyC;
				}

				++j;
			}
			else
			{
				break;
			}
		}

		fout << "Case #" << zz << ": " << ret << endl;
	}

	return 0;
}
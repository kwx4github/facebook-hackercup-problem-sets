#include <cstdio>
#include <set>
using namespace std;

const int MAXN = 1000000;

int N, M, p1, p2, p2r;
long long brd1[MAXN], brd2[MAXN];
set<int> cur_b1, cur_b2;
set<int> left_b1, left_b2;

void advance()
{
    if (p1 >= N || p2 >= M) return;

    cur_b1.insert(brd1[p1]);
    cur_b2.insert(brd2[p2]);

    if (cur_b1.find(brd2[p2]) == cur_b1.end()) left_b1.insert(brd2[p2]);
    if (cur_b2.find(brd1[p1]) == cur_b2.end()) left_b2.insert(brd1[p1]);

    while (p1 < N && p2 < M && (!left_b1.empty() || !left_b2.empty())) {
        while (!left_b1.empty()) {
            ++p1; if (p1 == N) break;
            cur_b1.insert(brd1[p1]);
            left_b1.erase(brd1[p1]);
            if (cur_b2.find(brd1[p1]) == cur_b2.end()) left_b2.insert(brd1[p1]);
        }

        while (!left_b2.empty()) {
            ++p2; if (p2 == M) break;
            cur_b2.insert(brd2[p2]);
            left_b2.erase(brd2[p2]);
            if (cur_b1.find(brd2[p2]) == cur_b1.end()) left_b1.insert(brd2[p2]);
        }
    }

    if (p1 < N && p2 < M && p2r <= p2) {
        p2r = p2;
        while (p2r+1 < M && cur_b1.find(brd2[p2r+1]) != cur_b1.end()) ++p2r;
    }
}

void solve()
{
    cur_b1.clear(); cur_b2.clear();
    left_b1.clear(); left_b2.clear();

    p1 = p2 = p2r = 0; advance();
    long long result = 0;

    while (p1 < N && p2 < M) {
        result += p2r-p2+1;
        ++p1; advance();
    }

    printf("%lld\n", result);
}

int main()
{
    int T; scanf("%d", &T);

    for (int t = 0; t < T; ++t) {
        scanf("%d%d", &N, &M);

        int x1, a1, b1, c1, r1;
        scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);

        int x2, a2, b2, c2, r2;
        scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);

        brd1[0] = x1; brd2[0] = x2;

        for (int i = 1; i < max(N, M); ++i) {
            if (i < N) brd1[i] = (a1*brd1[(i-1)%N] + b1*brd2[(i-1)%M] + c1) % r1;
            if (i < M) brd2[i] = (a2*brd1[(i-1)%N] + b2*brd2[(i-1)%M] + c2) % r2;
        }

        printf("Case #%d: ", t+1);
        solve();
    }

    return 0;
}

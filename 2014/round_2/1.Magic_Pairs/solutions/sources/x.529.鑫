package problem;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class MagicPari {

	private File inputFile;
	private File outputFile;
	
	public MagicPari(String inputFilePath, String outputFilePath){
		this.inputFile = new File(inputFilePath);
		this.outputFile = new File(outputFilePath);
	}
	
	public void solve(){
		try {
			Scanner scanner = new Scanner(inputFile);
			PrintWriter pw = new PrintWriter(outputFile);
			
			int numCase = scanner.nextInt();
			for(int i=0; i<numCase; i++){
				long result = findPair(scanner);
				pw.println("Case #"+(i+1)+": "+result);
				pw.flush();
			}
			
			pw.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private long findPair(Scanner scanner){
		int N = scanner.nextInt();
		int M = scanner.nextInt();
		
		int x1 = scanner.nextInt();
		int a1 = scanner.nextInt();
		int b1 = scanner.nextInt();
		int c1 = scanner.nextInt();
		int r1 = scanner.nextInt();
		 
		
		int x2 = scanner.nextInt();
		int a2 = scanner.nextInt();
		int b2 = scanner.nextInt();
		int c2 = scanner.nextInt();
		int r2 = scanner.nextInt();
		
		
		int[] Board1 = new int[N];
		int[] Board2 = new int[M];
		Board1[0] = x1;
		Board2[0] = x2;
		
		for(int i=1;i<Math.max(N, M);i++){
			if(i<N)
				Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
			if(i<M)
				Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
		}
		System.out.println("all");
		
		HashSet<Integer> color1 = new HashSet<Integer>();
		HashSet<Integer> color2 = new HashSet<Integer>();
		HashSet<Integer> diff1 = new HashSet<Integer>();
		HashSet<Integer> diff2 = new HashSet<Integer>();
		
		color1.add(x1);
		color2.add(x2);
		
		if(x1!=x2){
			diff1.add(x2);
			diff2.add(x1);
		}
		
		int p1 = 0;
		int p2 = 0;
		
		long result = 0;
		while(p1<N && p2<M){
			System.out.println(p1+" "+p2);
			
			if(diff1.size() == 0 && diff2.size()==0){
				result++;
			}else{
				if(p1==(N-1) || p2 == (M-1))
					break;
				if(color1.size()<=color2.size()){
					p1++;
					color1.add(Board1[p1]);
					if(!color2.contains(Board1[p1]) ){
						diff2.add(p1);
					} 
					if(diff1.contains(Board1[p1]))
						diff1.remove(Board1[p1]);
				}else{
					p2++;
					color2.add(Board2[p2]);
					if(!color1.contains(Board2[p2]) ){
						diff1.add(p2);
					} 
					if(diff2.contains(Board2[p2]))
						diff2.remove(Board2[p2]);
				}
				continue;
			}
			
			if(p1==(N-1) || p2 == (M-1))
				break;
				
			if(color1.contains(Board2[p2+1])){
				p2++;
				color2.add(Board2[p2]);
				continue;
			}
			
			if(color2.contains(Board1[p1+1])){
				p1++;
				color1.add(Board1[p1]);
				
				continue;
			}
			
			p1++;
			color1.add(Board1[p1]);
			p2++;
			color2.add(Board2[p2]);
			
			if(!color2.contains(Board1[p1]) ){
				diff2.add(p1);
			} 
			if(diff1.contains(Board1[p1]))
				diff1.remove(Board1[p1]);
			if(!color1.contains(Board2[p2]) ){
				diff1.add(p2);
			} 
			if(diff2.contains(Board2[p2]))
				diff2.remove(Board2[p2]);
		}
		
		if(p2<(M-1)){
			if(diff1.size() == 0 && diff2.size()==0)
				result--;
			
			while(p2<M){
				
				
				if(color2.size()>color1.size())
					break;
				
				if(diff1.size() == 0 && diff2.size()==0){
					result++;
				}
				
				if(p2==M-1) break;
				p2++;
				if(!color1.contains(Board2[p2]) ){
					diff1.add(p2);
				} 
				if(diff2.contains(Board2[p2]))
					diff2.remove(Board2[p2]);
				color2.add(Board2[p2]);
				
			}
		}
		
		
		 
		if(p1<(N-1)){
			if(diff1.size() == 0 && diff2.size()==0)
				result--;
			
			while(p1<N){
				System.out.println("p1"+p1);
				
				if(color1.size()>color2.size()){
					break;
				}
				if(diff1.size() == 0 && diff2.size()==0){
					result++;
				}
				
				if(p1==N-1) break;
				p1++;
				if(!color2.contains(Board1[p1]) ){
					diff2.add(p1);
				} 
				if(diff1.contains(Board1[p1]))
					diff1.remove(Board1[p1]);
				color1.add(Board1[p1]);
				
			} 
		}

		return result;
	}
	
	
	
	private boolean containAll(Set<Integer> color1, Set<Integer> color2){
		if(color1.size() != color2.size())
			return false;
		
		for(Integer i:color1){
			if(!color2.contains(i))
				return false;
		}
		
		return true;
	}
}

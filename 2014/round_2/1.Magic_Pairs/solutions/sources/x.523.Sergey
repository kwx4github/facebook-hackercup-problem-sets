import java.io.*;
import java.math.BigInteger;
import java.util.*;

import static java.lang.Math.*;

public class Solution implements Runnable {

	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		new Thread(new Solution()).start();
	}

	PrintWriter cout;

	BufferedReader cin;

	StringTokenizer stok;

	public void run() {
		try {
			cout = new PrintWriter("output.txt");
			cin = new BufferedReader(new FileReader("input.txt"));
			solve();
			cin.close();
			cout.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(234);
		}
	}

	int dx[] = { 0, 1, -1, 0 };
	int dy[] = { 1, 0, 0, -1 };

	private void solve_oneX(int test) throws Exception {

		cout.print("Case #" + test + ": ");
	}



	private void solve() throws Exception {
		int t = nextInt();
		for (int tt = 0; tt < t; tt++) {
			solve_one0(tt + 1);
		}
	}

	private void solve_one0(int test) throws Exception {
		int n = nextInt();
		int m = nextInt();
		long x1 = nextInt(), a1 = nextInt(), b1 = nextInt(), c1 = nextInt(), r1 = nextInt();
		long x2 = nextInt(), a2 = nextInt(), b2 = nextInt(), c2 = nextInt(), r2 = nextInt();
		
		long l[] = new long[n];
		l[0] = x1;
		long r[] = new long[m];
		r[0] = x2;
		
		for(int i = 1; i < max(n, m); i++) {
			if (i < n)
				l[i] = (l[(i - 1) % n] * a1 + r[(i - 1) % m] * b1 + c1) % r1;
			if (i < m)
				r[i] = (l[(i - 1) % n] * a2 + r[(i - 1) % m] * b2 + c2) % r2; 
		}
		
//		for(int i = 0; i < n ;i++)
//			cout.print(l[i] + " ");cout.println();
//			for(int i = 0; i < m ;i++)
//				cout.print(r[i] + " ");cout.println();
		
		int lid = 0;
		int rid = 0;
		Set<Integer> sl = new HashSet<Integer>();
		Set<Integer> sr = new HashSet<Integer>();
		sr.add((int)r[0]);
		long ans = 0;
		while(lid < n && rid < m) {
			sl.add((int)l[lid]);
			while(!sr.contains((int)l[lid]) && rid + 1 < m) {
				rid++;
				sr.add((int)r[rid]);
				
			}
			if (!sr.contains((int)l[lid]) && rid == m - 1)
				break;
			
			if (sr.size() == sl.size()){
				ans++;
//				cout.println(lid + " " + rid);
			}
			
			lid++;		
		}
		
		if (lid == n) {
			while (rid + 1 < m) {
				sr.add((int)r[rid + 1]);
				if (sl.contains((int)r[rid]) && sl.size() == sr.size())
					++ans;
				else
					break;
				rid++;
			}
		}
		
		cout.print("Case #" + test + ": ");
		cout.println(ans);
	}
	
	private long nextLong() throws Exception {
		return Long.parseLong(next());
	}

	private int nextInt() throws Exception {
		return Integer.parseInt(next());
	}

	private String next() throws Exception {
		while (stok == null || !stok.hasMoreTokens()) {
			stok = new StringTokenizer(cin.readLine());
		}
		return stok.nextToken();
	}

}
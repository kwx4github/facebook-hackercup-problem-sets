
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
#define MP make_pair
#define FOR(v,p,k) for(int v=p;v<=k;++v)
#define FORD(v,p,k) for(int v=p;v>=k;--v)
#define REP(i,n) for(int i=0;i<(n);++i)
#define VAR(v,i) __typeof(i) v=(i)
#define FORE(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)
#define PB push_back
#define ST first
#define ND second
#define SZ(x) (int)(x).size()
#define ALL(c) c.begin(),c.end()
#define ZERO(x) memset(x,0,sizeof(x))

vector<PII> gen(const vector<int>& board) {
    vector<PII> v;
    set<int> seen;
    for (int i = 0; i < (int) board.size(); ++i) {
        if (seen.find(board[i]) == seen.end()) {
            seen.insert(board[i]);
            v.PB(MP(board[i], 1));
        } else {
            ++v.back().second;
        }
    }
    return v;
}


void alg() {
    int n, m;
    int x1, x2, a1, a2, b1, b2, c1, c2;
    int r1, r2;
    cin >> n >> m;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    vector<int> board1(n);
    vector<int> board2(m);
    board1[0] = x1;
    board2[0] = x2;
    for (int i = 1; i < max(n, m); ++i) {
        if (i < n) {
            board1[i] = (a1 * (LL) board1[(i - 1) % n] + b1 * (LL) board2[(i - 1) % m] + c1) % r1;
        }
        if (i < m) {
            board2[i] = (a2 * (LL) board1[(i - 1) % n] + b2 * (LL) board2[(i - 1) % m] + c2) % r2;
        }
    }
    vector<PII> v1 = gen(board1);
    vector<PII> v2 = gen(board2);
    map<int, int> cnt;
    LL result = 0;
    int z = min(v1.size(), v2.size());
    for (int i = 0; i < z; ++i) {
        ++cnt[v1[i].ST];
        if (cnt[v1[i].ST] == 0) {
            cnt.erase(v1[i].ST);
        }
        --cnt[v2[i].ST];
        if (cnt[v2[i].ST] == 0) {
            cnt.erase(v2[i].ST);
        }
        if (cnt.empty()) {
            result += v1[i].ND * (LL) v2[i].ND;
        }
    }
    static int case_no = 0;
    cout << "Case #" << ++case_no << ": " << result << endl;
}

int main() {
    int d;
    cin >> d;
    while (d--) {
        alg();
    }
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.StreamTokenizer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

public class MagicPairs {

	public static void main(String[] args) throws Exception {
		MagicPairs object = new MagicPairs();
		object.solve();
	}

	protected void solve() throws Exception {

		String className = this.getClass().getSimpleName();
		StreamTokenizer st = new StreamTokenizer(new BufferedReader(
				new FileReader(className + ".in")));

		FileWriter fw = new FileWriter(className + ".out");

		enableStandardMode(st);
		int tcases = (int) readNumber(st);

		for (int tc = 0; tc < tcases; tc++) {

			fw.write("Case #" + (tc + 1) + ": ");

			int n = (int) readNumber(st);
			int m = (int) readNumber(st);

			long x1 = (int) readNumber(st);
			long a1 = (int) readNumber(st);
			long b1 = (int) readNumber(st);
			long c1 = (int) readNumber(st);
			long r1 = (int) readNumber(st);

			long x2 = (int) readNumber(st);
			long a2 = (int) readNumber(st);
			long b2 = (int) readNumber(st);
			long c2 = (int) readNumber(st);
			long r2 = (int) readNumber(st);

			int board1[] = new int[n];
			board1[0] = (int) x1;

			int board2[] = new int[m];
			board2[0] = (int) x2;

			for (int i = 1; i < Math.max(n, m); i++) {
				long next1 = a1 * (board1[(i - 1) % n]) + b1
						* (board2[(i - 1) % m]) + c1;
				next1 %= r1;

				long next2 = a2 * (board1[(i - 1) % n]) + b2
						* (board2[(i - 1) % m]) + c2;
				next2 %= r2;

				if (i < n)
					board1[i] = (int) next1;

				if (i < m)
					board2[i] = (int) next2;

			}

			fw.write(calculate(n, m, board1, board2) + "\r\n");
		}

		fw.close();
	}

	int stree1[];
	int stree2[];

	public long calculate(int n, int m, int[] board1, int[] board2) {

		Set<Integer> all = new TreeSet<Integer>();

		for (int e : board1)
			all.add(e);

		for (int e : board2)
			all.add(e);

		int prev = 0;
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();

		for (int e : all) {
			prev++;
			map.put(e, prev);
		}

		for (int i = 0; i < board1.length; i++)
			board1[i] = map.get(board1[i]);

		for (int i = 0; i < board2.length; i++)
			board2[i] = map.get(board2[i]);

		int inside1[] = new int[prev + 1];
		int inside2[] = new int[prev + 1];

		long HASH1 = 1, HASH2 = 1;

		Arrays.fill(inside1, 0);
		Arrays.fill(inside2, 0);

		int sizeInside1 = 0, sizeInside2 = 0;

		stree1 = new int[8000003];
		stree2 = new int[8000003];

		hash11 = new long[8000003];
		hash12 = new long[8000003];
		hash13 = new long[8000003];

		hash21 = new long[8000003];
		hash22 = new long[8000003];
		hash23 = new long[8000003];

		Arrays.fill(stree1, 0);
		Arrays.fill(stree2, 0);

		int start1 = -1, start2 = -1;
		int end1 = -1, end2 = -1;

		long output = 0;

		boolean nextUpdate1 = true, nextUpdate2 = true;

		while (nextUpdate1 || nextUpdate2) {

			if (nextUpdate1) {
				start1 = end1 + 1;

				end1 = start1;
				inside1[board1[start1]] = 1;
				add(stree1, 0, 1, 1, prev, board1[start1]);
				HASH1 += (board1[start1]);
				sizeInside1++;

				while (end1 + 1 < n && inside1[board1[end1 + 1]] == 1)
					end1++;
			}

			if (nextUpdate2) {
				start2 = end2 + 1;
				end2 = start2;
				inside2[board2[start2]] = 1;
				add(stree2, 1, 1, 1, prev, board2[start2]);
				HASH2 += (board2[start2]);
				sizeInside2++;

				while (end2 + 1 < m && inside2[board2[end2 + 1]] == 1)
					end2++;
			}

			int len1 = (end1 - start1) + 1;
			int len2 = (end2 - start2) + 1;

			long temp = len1;
			temp *= len2;
			if (sizeInside1 == sizeInside2) {

				nextUpdate1 = true;
				nextUpdate2 = true;

				if (HASH1 == HASH2 && equal())
					output += temp;

			} else {
				if (sizeInside1 > sizeInside2) {
					nextUpdate1 = false;
					nextUpdate2 = true;
				} else {
					nextUpdate1 = true;
					nextUpdate2 = false;
				}
			}

			if (end1 + 1 >= n)
				nextUpdate1 = false;

			if (end2 + 1 >= m)
				nextUpdate2 = false;
		}

		return output;
	}

	long hash11[];
	long hash12[];
	long hash13[];

	long hash21[];
	long hash22[];
	long hash23[];

	private boolean equal() {
		return (hash11[1] == hash21[1] && hash12[1] == hash22[1] && hash13[1] == hash23[1]);
	}

	private void add(int[] stree, int tval, int node, int left, int right,
			int value) {

		if (left == right) {
			stree[node] = 1;

			if (tval == 0) {
				hash11[node] = hash12[node] = hash13[node] = value;
			} else {
				hash21[node] = hash22[node] = hash23[node] = value;
			}

			return;
		}

		int middle = (left + right) / 2;

		if (value >= left && value <= middle)
			add(stree, tval, 2 * node, left, middle, value);

		if (value >= middle + 1 && value <= right)
			add(stree, tval, 2 * node + 1, middle + 1, right, value);

		if (tval == 0) {
			hash11[node] = (hash11[2 * node] * 13 + hash11[2 * node + 1] * 17)
					& ((1L << 41L) - 1);
			hash12[node] = (hash12[2 * node] * 311 + hash12[2 * node + 1] * 163)
					% (1000000009L);
			hash13[node] = (hash13[2 * node] * 3 + hash13[2 * node + 1] * 2)
					& ((1L << 50L) - 1);
		} else {
			hash21[node] = (hash21[2 * node] * 13 + hash21[2 * node + 1] * 17)
					& ((1L << 41L) - 1);
			hash22[node] = (hash22[2 * node] * 311 + hash22[2 * node + 1] * 163)
					% (1000000009L);
			hash23[node] = (hash23[2 * node] *3 + hash23[2 * node + 1] * 2)
					& ((1L << 50L) - 1);
		}

	}

	private String readToken(StreamTokenizer st) throws Exception {
		st.nextToken();
		return st.sval;
	}

	private void enableTokenReading(StreamTokenizer st) throws Exception {
		st.resetSyntax();
		st.wordChars(0, 256);
		st.whitespaceChars(0, 32);
	}

	private double readNumber(StreamTokenizer st) throws Exception {
		st.nextToken();
		return st.nval;
	}

	private void enableStandardMode(StreamTokenizer st) throws Exception {
		st.resetSyntax();
		st.wordChars(0, 256);
		st.whitespaceChars(0, 32);

		st.parseNumbers();
	}
}

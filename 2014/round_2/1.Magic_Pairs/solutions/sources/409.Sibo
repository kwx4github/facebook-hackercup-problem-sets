#include <iostream>
#include <fstream>
#include <unordered_map>
using namespace std;

int n, m;
long long a[1000000], b[1000000], x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;

int burte_force() {
    int ans = 0;
    unordered_map<long long, bool> map;
    for (int i = 0; i < n; i++) {
        map.clear();
        for (int j = 0; j <= i; j++) {
            map[a[j]] = false;
        }
        int tot = map.size();
        //cout << tot << endl;
        for (int j = 0; j < m; j++) {
            if (map.find(b[j]) != map.end()) {
                if (!map[b[j]]) {
                   tot--;
                   map[b[j]] = true;
                }
                if (tot == 0) {
                    ans++;
                    //cout << i << " " << j << endl;
                }
            } else {
                break;
            }
        }
    }
    return ans;
}

long long solve() {
    long long ans = 0;
    int j = 0, k = 0, tot = 0;
    unordered_map<long long, bool> map;
    map.clear();
    for (int i = 0; i < n; i++) {
        if (map.find(a[i]) != map.end()) {
            if (tot == 0) {
                ans += k - j;
                //cout << " " << i << " "  << j << " " << k << endl;
            }
            continue;
        }
        map[a[i]] = false;
        tot++;
        while (j < m && map.find(b[j]) != map.end() && tot) {
            if (!map[b[j]]) {
                tot--;
            }
            map[b[j]] = true;
            if (tot == 0) break;
            j++;
        }
        /*
        if (b[j] == a[i]) {
            map[b[j]] = true;
            tot--;
        }
        */
        if (tot == 0) {
            k = j + 1;
            while (k < m && map.find(b[k]) != map.end())    k++;
            ans += k - j;
            //cout << i << " "  << j << " " << k << endl;
        }
    }
    return ans;
}

int main() {
    freopen("_magic_pairs.txt", "r", stdin);
    freopen("magic.txt", "w", stdout);
    
    int T;
    cin >> T;
    for (int task = 1; task <= T; task++) {
        cin >> n >> m;
        cin >> x1 >> a1 >> b1 >> c1 >> r1;
        cin >> x2 >> a2 >> b2 >> c2 >> r2;
        a[0] = x1;
        b[0] = x2;
        for (int i = 1; i < max(n, m); i++) {
            if (i < n) {
                a[i] = (a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1;
            }
            if (i < m) {
                b[i] = (a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2;
            }
        }
        /*
        for (int i = 0; i < n; i++) {
            cout << a[i] << " ";
        }
        cout << endl;
        for (int i = 0; i < m; i++) {
            cout << b[i] << " ";
        }
        cout << endl;
        */
        //printf("Case #%d: %d\n", task, burte_force());
        cout << "Case #" << task << ": " << solve() << endl;
    }
}

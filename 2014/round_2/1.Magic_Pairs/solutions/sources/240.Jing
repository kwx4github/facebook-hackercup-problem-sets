#include <cstdio>
#include <set>

using namespace std;

#define MAXN 1000000

long long num[2][MAXN];
int count[MAXN][2];
set<long long> all;
set<long long> ndiff;
set<long long> mdiff;

int main()
{
	int Tcases, cases;
	scanf("%d", &Tcases);
	for ( cases = 0; cases < Tcases; cases++)
	{
		int N, M;
		scanf("%d %d", &N, &M);

		long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
		scanf("%lld %lld %lld %lld %lld", &x1, &a1, &b1, &c1, &r1);
		scanf("%lld %lld %lld %lld %lld", &x2, &a2, &b2, &c2, &r2);
		num[0][0] = x1;
		num[1][0] = x2;
		for ( int i = 1; i < N || i < M; i++)
		{
			if ( i < N)
			{
				num[0][i] = (a1 * num[0][(i-1)%N] + b1 * num[1][(i-1)%M] + c1) % r1;
			}
			if ( i < M)
			{
				num[1][i] = (a2 * num[0][(i-1)%N] + b2 * num[1][(i-1)%M] + c2) % r2;
			}
		}

		all.clear();
		mdiff.clear();
		long long ans = 0;
		for ( int i = 0, j = 0, l = 0; i < N; i++)
		{
			if ( !all.count(num[0][i]))
			{
				all.insert( num[0][i]);
				if ( mdiff.count( num[0][i]))
				{
					mdiff.erase( num[0][i]);
				}
				else
				{
					while ( j < M && num[1][j] != num[0][i])
					{
						if ( !all.count( num[1][j]))
						{
							mdiff.insert( num[1][j]);
						}
						++j;
					}
					l = 0;
					while ( j < M && ( mdiff.count( num[1][j]) || all.count( num[1][j])))
					{
						++l;
						++j;
					}
				}
			}
			if ( !mdiff.size())
			{
				ans += l;
			}
		}
		printf("Case #%d: %lld\n", cases + 1, ans);
	}
	return 0;
}

#include <cstdio>
#include <utility>
#include <queue>
#include <set>
#include <list>
#include <map>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;
typedef vector<int> VI;
typedef long long LL;
#define FOR(x, b, e) for(int x=b; x<=(e); ++x)
#define FORD(x, b, e) for(int x=b; x>=(e); ––x)
#define REP(x, n) for(int x=0; x<(n); ++x)
#define VAR(v,n) __typeof(n) v=(n)
#define ALL(c) c.begin(),c.end()
#define SIZE(x) (int)x.size()
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define PB push_back
#define ST first
#define ND second
#define MP make_pair
#define PII pair<int, int>

const int N = 1000 * 1000 + 9;

int tab1[N], tab2[N];

int main() {
    int t;
    scanf("%d", &t);
    for (int z = 1; z <= t; z++) {
        int n, m;
        scanf("%d %d", &n, &m);
        int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
        scanf("%d %d %d %d %d", &x1, &a1, &b1, &c1, &r1);
        scanf("%d %d %d %d %d", &x2, &a2, &b2, &c2, &r2);
        tab1[0] = x1;
        tab2[0] = x2;
        for (int i = 1; i < max(m, n); i++) {
            if (i < n)
                tab1[i] = (a1 * tab1[(i-1) % n] + b1 * tab2[(i-1) % m] + c1) % r1;
            if (i < m)
                tab2[i] = (a2 * tab1[(i-1) % n] + b2 * tab2[(i-1) % m] + c2) % r2;
        }
        LL sum = 0;
        set<int> same, diff1, diff2;
        int ind1(0), ind2(0);
        if (tab1[ind1] == tab2[ind2])
            same.insert(tab1[ind1]);
        else {
            diff1.insert(tab1[ind1]);
            diff2.insert(tab2[ind2]);
        }
        while (ind1 < n && ind2 < m) {
            while (ind1 < n && !diff2.empty()) {
                if (same.count(tab1[ind1]) == 0) {
                    if (diff2.count(tab1[ind1]) == 0) {
                        diff1.insert(tab1[ind1]);
                    }
                    else {
                        same.insert(tab1[ind1]);
                        diff2.erase(tab1[ind1]);
                    }
                }
                if (diff2.empty())
                    break;
                ind1++;
            }
            while (ind2 < m && !diff1.empty()) {
                if (same.count(tab2[ind2]) == 0) {
                    if (diff1.count(tab2[ind2]) == 0) {
                        diff2.insert(tab2[ind2]);
                    }
                    else {
                        same.insert(tab2[ind2]);
                        diff1.erase(tab2[ind2]);
                    }
                }
                if (diff1.empty())
                    break;
                ind2++;
            }

            if (diff1.empty() && diff2.empty()) {
                int count1(0), count2(0);
                while (ind1 < n && same.count(tab1[ind1]) > 0) {
                    ind1++;
                    count1++;
                }
                while (ind2 < m && same.count(tab2[ind2]) > 0) {
                    ind2++;
                    count2++;
                }
                if (ind1 < n && ind2 < m) {
                    if (tab1[ind1] == tab2[ind2])
                        same.insert(tab1[ind1]);
                    else {
                        diff1.insert(tab1[ind1]);
                        diff2.insert(tab2[ind2]);
                    }
                }
                sum += (LL)count1 * (LL)count2;
            }
        }
        printf("Case #%d: %lld\n", z, sum);
    }
    return 0;
}

#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <deque>
#include <cassert>

using namespace std;

#ifdef WIN32
	#define I64 "%I64d"
#else
	#define I64 "%lld"
#endif

typedef long long ll;

#define F first
#define S second
#define mp make_pair
#define pb push_back
#define all(s) s.begin(), s.end()
#define sz(s) (int(s.size()))
#define fname "a"
#define ms(a,x) memset(a, x, sizeof(a))
#define forit(it,s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); ++it)
#define MAXN 2000002

int n, m;
int a[MAXN];
int b[MAXN];
int a1, a2, b1, b2, c1, c2, r1, r2;
map <int, int> s;

inline void solve()
{
	scanf("%d%d", &n, &m);
	scanf("%d%d%d%d%d", &a[0], &a1, &b1, &c1, &r1);
	scanf("%d%d%d%d%d", &b[0], &a2, &b2, &c2, &r2);
	for (int i = 1; i < n || i < m; ++i)
	{
		a[i] = (1LL * a1 * a[(i - 1) % n] + 1LL * b1 * b[(i - 1) % m] + c1) % r1;
		b[i] = (1LL * a2 * a[(i - 1) % n] + 1LL * b2 * b[(i - 1) % m] + c2) % r2;
	}
	s.clear();
	int k = 0, k1 = 0, k2 = 0;
	ll ans = 0, last = 0;
	for (int i = 0, j = 0; i < n; ++i)
	{
		int t = s[a[i]];

		if (t == 1 || t == 3)
		{
			ans += last;
			continue;
		}

		if (t == 0)
		{
			s[a[i]] = 1;
			++k1;
		}
		else if (t == 2)
		{
			s[a[i]] = 3;
			++k1;
			++k;
		}

		while(j < m && k2 < k1)
		{
			t = s[b[j]];
			if (t == 0)
			{
				s[b[j]] = 2;
				++k2;
			}
			else if (t == 1)
			{
				s[b[j]] = 3;
				++k2;
				++k;
			}			
			++j;
		}

		last = 0;
		if (k1 != k2 || k != k1) continue;
		int sj = j;
		while(j < m && s[b[j]] == 3)
			++j;		
		last = j - sj + 1;
		ans += last;
	}
	printf(I64"\n", ans);
}

int main()
{
	#ifdef LOCAL
	freopen(fname".in", "r", stdin);
	freopen(fname".out", "w", stdout);
	#endif

	int tt;
	scanf("%d", &tt);
	for (int t = 0; t < tt; ++t)
	{
		printf("Case #%d: ", t + 1);
		solve();
	}

	return 0;
}

#include <string>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <string.h>
#include <utility>
#include <queue>
#include <stack>
#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <sstream>
#include <map>
#include <set>
#include <stdio.h>
#include <ctype.h>
#include <assert.h>

using namespace std;

#define FOR(i,n) for(int i = 0;i < n;i++)
#define CLEAR(x) memset((x),0,sizeof(x))
#define REP(i,a,b) for(int i = (a);i<(b);++i)
#define MP make_pair
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define PII pair<int,int>
#define sz(a) (int)(a).size()

typedef unsigned long long LL;

int n,m;
LL x1,x2,a1,a2,b1,b2,c1,c2;
LL r1,r2;

LL brd[2][1000001];

void solve() {
  cin >> n >> m;
  cin >> x1 >> a1 >> b1 >> c1 >> r1;
  cin >> x2 >> a2 >> b2 >> c2 >> r2;

  brd[0][0] = x1;
  brd[1][0] = x2;

  FOR(i,min(n,m)-1) {
    brd[0][i+1] = ((a1 * brd[0][i]) % r1 + (b1*brd[1][i]) % r1 + c1) % r1;
    brd[1][i+1] = ((a2 * brd[0][i]) % r2 + (b2*brd[1][i]) % r2 + c2) % r2;
  }

  for (int i = min(n,m)-1; i < max(n,m) - 1;i++) {
    if (m>n)
    brd[1][i+1] = ((a2 * brd[0][i % n]) % r2 + (b2 * brd[1][i]) % r2 + c2) % r2;
    else
    brd[0][i+1] = ((a1 * brd[0][i % m]) % r1 + (b1 * brd[1][i]) % r1 + c1) % r1;
  }

  LL ans = 0;

  int id1 = 0,id2 = 0;
  set<LL> s1,s2,nd1,nd2;
  s1.insert(brd[0][0]);
  s2.insert(brd[1][0]);

  if (brd[0][0] != brd[1][0]) {
    nd1.insert(brd[1][0]);
    nd2.insert(brd[0][0]);
  }

  LL sc1,sc2;

  while (1) {

    if (id1 > n || id2 > m)
      break;

    if (id1 >= n && id2 >= m)
      break;

    if (id1 == n && !nd1.empty())
      break;
    if (id2 == m && !nd2.empty()) {
      //cerr << "CASE2 " << nd2.size() << endl;
      break;
    }

    if (nd1.empty() && nd2.empty()) {

      sc1 = id1;
      sc2 = id2;

      id1++;
      id2++;

      while (id1 < n && s1.find(brd[0][id1]) != s1.end()) {
        id1++;
      }

      //cerr << "IN DOES " << (nd1.find(1) != nd1.end()) << ' ' << (s1.find(1) != s1.end()) << ' ' << (nd2.find(1) != nd2.end()) << ' ' << (s2.find(1) != s2.end()) << endl;

      while (id2 < m && s2.find(brd[1][id2]) != s2.end()) {
        id2++;
      }

      if (id1 < n && id2 < m) {
        s1.insert(brd[0][id1]);
        s2.insert(brd[1][id2]);

        if (brd[0][id1] != brd[1][id2]) {
          nd1.insert(brd[1][id2]);
          nd2.insert(brd[0][id1]);
        }
      }

      //cerr << id1 << ' ' << sc1 << ' ' << id2 << ' ' << sc2 << endl;

      ans += ((LL)id1 - sc1) * ((LL)id2 - sc2);

    } else if (!nd1.empty()) {

      //cerr << "ND1 not empty" << endl;

      //id1++;
      while (!nd1.empty() && id1 < n) {
        id1++;
        //cerr << "D1 ele " << brd[0][id1] << endl;
        nd1.erase(brd[0][id1]);
        s1.insert(brd[0][id1]);
        if (s2.find(brd[0][id1]) == s2.end()) {
          nd2.insert(brd[0][id1]);
          //cerr << "D1 insert " << brd[0][id1] << endl;
        }
      }

      //cerr << "New id1 " << id1 << endl;

    } else if (!nd2.empty()) {

      //id2++;
      while (!nd2.empty() && id2 < m) {
        id2++;
        //cerr << "D2 ele " << brd[1][id2] << endl;
        nd2.erase(brd[1][id2]);
        s2.insert(brd[1][id2]);
        if (s1.find(brd[1][id2]) == s1.end()) {
          //cerr << "D2 insert " << brd[1][id2] << endl;
          nd1.insert(brd[1][id2]);
        }
      }

      //cerr << "New id2 " << id2 << endl;
    }
  }

  cout << ans << endl;
}

int main() {
  int t;
  cin >> t;
  FOR(i,t) {
    cout << "Case #" << i + 1 << ": ";
    solve();
  }

  return 0;
}

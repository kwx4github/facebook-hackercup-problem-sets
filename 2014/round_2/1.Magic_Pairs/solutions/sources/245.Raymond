#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
using namespace std;
int rawA[1000005], rawB[1000005], A[1000005], B[1000005], N, M;
bool inA[2000005], counted[2000005];
int main() {
	int TC;
	scanf("%d", &TC);
	for (int cn = 1; cn <= TC; ++cn) {
		int x1, a1, b1, c1, r1, x2, a2, b2, c2, r2, mpi = 0;
		map<int, int> mp;
		memset(inA, 0, sizeof(inA));
		memset(counted, 0, sizeof(counted));
		scanf("%d%d", &N, &M);
		scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
		scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
		for (int i = 0; i < max(N, M); ++i) {
			if (!i) {
				rawA[0] = x1;
				rawB[0] = x2;
			} else {
				if (i < N) {
					rawA[i] = ((long long)a1 * rawA[(i - 1) % N] + (long long)b1 * rawB[(i - 1) % M] + c1) % r1;
				}
				if (i < M) {
					rawB[i] = ((long long)a2 * rawA[(i - 1) % N] + (long long)b2 * rawB[(i - 1) % M] + c2) % r2;
				}
			}
			if (i < N) {
				if (!mp[rawA[i]]) mp[rawA[i]] = ++mpi;
				A[i] = mp[rawA[i]];
			}
			if (i < M) {
				if (!mp[rawB[i]]) mp[rawB[i]] = ++mpi;
				B[i] = mp[rawB[i]];
			}
		}
		long long ans = 0, lastAns = 0; // j is number of index of last worked
		int numSame = 0, numTotal = 0, lastSame, j = 0;
		for (int i = 0; i < N; ++i) {
			if (inA[A[i]]) {
				// same as last count
				ans += lastAns;
				continue;
			}
			inA[A[i]] = true;
			++numTotal;
			lastSame = -1;
			lastAns = 0;
			while (j < M && inA[B[j]]) {
				if (!counted[B[j]]) {
					counted[B[j]] = true;
					++numSame;
				}
				if (lastSame == -1 && numSame == numTotal) {
					lastSame = j;
				}
				++j;
			}
			if (lastSame != -1) {
				lastAns = j - lastSame;
			}
			ans += lastAns;
		}
		/*
		long long realAns = 0;
		set<int> SA;
		for (int i = 0; i < N; ++i) {
			SA.insert(rawA[i]);
			set<int> SB;
			for (int j = 0; j < M; ++j) {
				SB.insert(rawB[j]);
				if (SA.size() == SB.size() && equal(SA.begin(), SA.end(), SB.begin()))
					++realAns;
			}
		}
		assert(realAns == ans);
		*/
		printf("Case #%d: %lld\n", cn, ans);
	}
}

import java.io.*;
import java.util.*;

public class MagicPairs {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	void solve() throws IOException {
		int n = nextInt();
		int m = nextInt();
		int x1 = nextInt();
		int a1 = nextInt();
		int b1 = nextInt();
		int c1 = nextInt();
		int r1 = nextInt();

		int x2 = nextInt();
		int a2 = nextInt();
		int b2 = nextInt();
		int c2 = nextInt();
		int r2 = nextInt();

		int[] d1 = new int[n];
		int[] d2 = new int[m];

		d1[0] = x1;
		d2[0] = x2;

		if (x1 >= r1 || x2 >= r2) {
			System.err.println("x1 or x2 are bad!!!");
		}

		for (int i = 1; i < Math.max(n, m); i++) {
			if (i < n) {
				d1[i] = (int) (((long) a1 * d1[(i - 1) % n] % r1 + (long) b1
						* d2[(i - 1) % m] % r1 + c1 % r1) % r1);
			}
			if (i < m) {
				d2[i] = (int) (((long) a2 * d1[(i - 1) % n] % r2 + (long) b2
						* d2[(i - 1) % m] % r2 + c2 % r2) % r2);
			}
		}

		// System.err.println("d1 = " + Arrays.toString(d1));
		// System.err.println("d2 = " + Arrays.toString(d2));

		Set<Integer> set1 = new HashSet<>();
		Set<Integer> set2 = new HashSet<>();

		int j = 0;

		int prev = 0;
		long ans = 0;

		for (int i = 0; i < n; i++) {
			if (set1.contains(d1[i])) {
				ans += prev;
				continue;
			}
			set1.add(d1[i]);
			while (j < m && !set2.contains(d1[i])) {
				set2.add(d2[j++]);
			}
			if (!set2.contains(d1[i]) && j == m) {
				break;
			}
			if (set2.size() > set1.size()) {
				prev = 0;
				continue;
			}
			int stJ = j;
			while (j < m && set2.contains(d2[j])) {
				j++;
			}
			prev = j - stJ + 1;
			ans += prev;
		}

		out.println(ans);

	}

	MagicPairs() throws IOException {
		br = new BufferedReader(new FileReader("_magic_pairs.txt"));
		out = new PrintWriter("_magic_pairs.out");
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new MagicPairs();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
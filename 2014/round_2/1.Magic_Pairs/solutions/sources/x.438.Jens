""" imports """
import glob, pickle, os, time, sys, argparse
from copy import copy
from numpy import array, sin, cos
import numpy as np
from pprint import pprint

""" global variables """

""" classes """

""" functions """
def arrs_from_gen(N, M, (x1, a1, b1, c1, r1), (x2, a2, b2, c2, r2)):
    board1 = [0] * N
    board2 = [0] * M
    board1[0] = x1
    board2[0] = x2
    for i in range(1, max(N,M)):
        if i < N:
            board1[i] = (a1 * board1[(i-1) % N] + b1 * board2[(i-1) % M] + c1) % r1
        if i < M:
            board2[i] = (a2 * board1[(i-1) % N] + b2 * board2[(i-1) % M] + c2) % r2
    return board1, board2

def solve(N, M, gen1, gen2):
    board1, board2 = arrs_from_gen(N, M, gen1, gen2)
    # print board1, board2

    n = 0 # current board num
    other = lambda x: 1-x
    boards = [board1, board2]
    maxims = [N-1, M-1]
    iters = [-1, -1]
    shared = set()
    only_in = [set(), set()]
    magic_pairs = 0
    while iters[0] < N-1 or iters[1] < M-1:
        iters[n] += 1
        color = boards[n][iters[n]]
        only_in_other = only_in[other(n)]

        if color in shared:
            pass # do nothing
        elif color in only_in_other:
            only_in_other.remove(color)
            shared.add(color)
        else:
            only_in[n].add(color)
        if len(only_in_other) == 0:
            n = other(n)
        if iters[n] == maxims[n]:
            n = other(n)
        if len(only_in[0]) == 0 and len(only_in[1]) == 0:
            magic_pairs += 1

    return magic_pairs

""" parse input """
## parse arguments
parser = argparse.ArgumentParser()
parser.add_argument("filename", default="default.in", nargs='?')
parser.add_argument("-t", "--test", action="store_true")
parser.add_argument("-l", "--lazytest", action="store_true")
args = parser.parse_args()
output = ""
TIC = time.time()

## read input lines
input_lines = open(args.filename).readlines()
def read_line():
    return input_lines.pop(0).strip()
def read_ints():
    return [int(x) for x in read_line().split(' ')]
(numquestions,) = read_ints()
for questionindex in xrange(numquestions):
    ### parse input ###
    N, M = read_ints()
    x1, a1, b1, c1, r1 = read_ints()
    x2, a2, b2, c2, r2 = read_ints()

    ### calculate answer ###
    answer = solve(N, M, (x1, a1, b1, c1, r1), (x2, a2, b2, c2, r2))

    ### output ###
    #print "Calculating case #{}...".format(questionindex+1)
    answer_str = "Case #{}: {}".format(questionindex+1, answer)
    output += answer_str + '\n'
    print answer_str

## write output
ofile = open('output', 'w').write(output)
TOC = time.time()
#print "done in {} s".format(TOC-TIC)


""" test """
if args.test:
    def filter_extension(filename):
        filename_parts = filename.split('.')
        if len(filename_parts) > 1:
            filename_parts = filename_parts[:-1]
        return '.'.join(filename_parts)

    print
    print "== TESTING VALIDITY =="

    try:
        # check if all input was used
        assert not len([l for l in input_lines if l.strip()]), "Not all input was used"

        # filter extension of filename
        filename_without_extension = filter_extension(args.filename)

        # get calculated and correct lines
        calculated_lines = [l.strip() for l in output.split('\n') if l.strip()]
        correct_lines = [l.strip() for l in open("{}.out".format(filename_without_extension)).readlines() if l.strip()]

        # check if number of lines match
        assert len(correct_lines) == len(calculated_lines), "calculated {} lines but expected {}".format(len(calculated_lines), \
                                                            len(correct_lines))

        # apply lazytest: filter away test numer
        unfiltered_calculated_lines = calculated_lines
        unfiltered_correct_lines = correct_lines
        if args.lazytest:
            def filter_test_number(l):
                if l.startswith("Case #"):
                    parts = l.split('#')
                    parts[1] = parts[1][parts[1].index(':'):]
                    return '#'.join(parts)
                else:
                    return l
            calculated_lines = [filter_test_number(l) for l in calculated_lines]
            correct_lines = [filter_test_number(l) for l in correct_lines]

        # get lines that don't match
        incorrect_line_numbers = []
        for line_number, (correct_line, calculated_line) in enumerate(zip(correct_lines, calculated_lines)):
            if correct_line != calculated_line:
                incorrect_line_numbers.append(line_number)
        if len(incorrect_line_numbers):
            error_msg = "\n"
            for line_number in incorrect_line_numbers:
                error_msg += '    "{}"  should be  "{}"\n'.format(unfiltered_calculated_lines[line_number],
                                                                  unfiltered_correct_lines[line_number])
            raise AssertionError(error_msg)

        print "SUCCESS"

    except AssertionError as e:
        print "\nFAILED:"
        print str(e)
    print

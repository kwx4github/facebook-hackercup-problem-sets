#include <iostream>
#include <cstdio>
#include <map>
#include <set>
#include <algorithm>
#include <cstring>
#include <vector>

using namespace std;

typedef long long LL;

int N, M;
LL x1, a1, b1, c1, r1;
LL x2, a2, b2, c2, r2;

LL B1[1000007];
LL B2[1000007];

map<LL, int> H;
LL kash;
inline LL hash(LL X) {
  if (H[X]) return H[X];
  ++kash; H[X] = kash;
  return kash;
}

int inB1[2000007];
int inB2[2000007];

LL cate1, cate2, total, difs;
LL last1, last2;
int i, j;

void add1() {
  if (i == N) return;
  if (!inB1[B1[i]]) {
    last1 = 1;
    ++cate1;
    if (inB2[B1[i]]) --difs;
    else ++difs;
    inB1[B1[i]] = 1;
  } else ++last1;
  ++i;
}

void add2() {
  if (j == M) return;
  if (!inB2[B2[j]]) {
    last2 = 1;
    ++cate2;
    if (inB1[B2[j]]) --difs;
    else ++difs;
    inB2[B2[j]] = 1;
  } else ++last2;
  ++j;
}

LL go() {
  cin >> N >> M;
  cin >> x1 >> a1 >> b1 >> c1 >> r1;
  cin >> x2 >> a2 >> b2 >> c2 >> r2;
  memset(inB1, 0, sizeof(inB1));
  memset(inB2, 0, sizeof(inB2));
  H.clear(); kash = 0;

  B1[0] = x1; B2[0] = x2;
  for (i = 1; i < max(N, M); ++i) {
    if (i < N)
    B1[i] = (a1 * B1[(i-1) % N] + b1 * B2[(i-1) % M] + c1) % r1;
    if (i < M)
    B2[i] = (a2 * B1[(i-1) % N] + b2 * B2[(i-1) % M] + c2) % r2;
  }

  B1[N] = -1; B2[M] = -2;
  ++N; ++M;

  for (i = 0; i < N; ++i)
    B1[i] = hash(B1[i]);
  for (i = 0; i < M; ++i)
    B2[i] = hash(B2[i]);

  i = 0, j = 0;
  cate1 = 0, cate2 = 0;
  last1 = 0; last2 = 0;
  total = 0;
  difs = 0;

  while (i < N || j < M) {
    if (cate1 == cate2) {
      if (difs == 0) {
        while (i < N && inB1[B1[i]]) add1();
        while (j < M && inB2[B2[j]]) add2();
        total += last1 * last2;
      }
      if (i < N) add1(); else if (j < M)  add2();
    } else if (cate1 < cate2 && i < N) {
      add1();
    } else if (cate2 < cate1 && j < M) {
      add2();
    } else {
      if (i < N) add1(); else if (j < M) add2();
    }
  }

  return total;
}

int main() {
  int t; int idx = 0;
  scanf("%d\n", &t);
  while (t--) {
    cout << "Case #" << ++idx << ": " << go() << '\n';
  }
  return 0;  
}

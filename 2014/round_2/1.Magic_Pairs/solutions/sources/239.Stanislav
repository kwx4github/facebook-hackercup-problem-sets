#include <iostream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <utility>
#include <cassert>
#include <numeric>
#include <sstream>
#include <limits>
using namespace std;

#define REQUIRE(cond, message) \
    do { \
        if (!(cond)) { \
            std::cerr << message << std::endl; \
            assert(false); \
        } \
    } while (false)

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i <= int(n); ++i)
#define forv(i, v) forn(i, (v).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef long double ld;

template<typename T>
inline int popcount(T t) {
    if (std::numeric_limits<T>::digits <=
                            std::numeric_limits<unsigned int>::digits) {
        return __builtin_popcount(t);
    } else {
        return __builtin_popcountll(t);
    }
}

const ld EPS = 1e-8;
const ld PI = acosl(0.0) * 2;

vi calcNext(const vi& s, int m)
{
    vector<bool> used(m);
    int n = s.size();
    int r = 0;
    vi ret(n);
    forn(i, n) {
        used[s[i]] = true;
        while (r < n && used[s[r]]) ++r;
        ret[i] = r;
    }
    return ret;
}

ll solveTest()
{
    int n, m;
    cin >> n >> m;
    ll x1, x2, a1, a2, b1, b2, cc1, cc2;
    ll r1, r2;
    cin >> x1 >> a1 >> b1 >> cc1 >> r1;
    cin >> x2 >> a2 >> b2 >> cc2 >> r2;
    vi s1(n), s2(m);
    s1[0] = x1;
    s2[0] = x2;
    for1(i, max(n, m) - 1) {
        if (i < n) {
            s1[i] = (a1 * s1[i - 1] + b1 * s2[(i - 1) % m] + cc1) % r1;
        }
        if (i < m) {
            s2[i] = (a2 * s1[(i - 1) % n] + b2 * s2[i - 1] + cc2) % r2;
        }
    }
    vi nums;
    nums.reserve(n + m);
    forn(i, n) nums.pb(s1[i]);
    forn(i, m) nums.pb(s2[i]);
    sort(all(nums));
    nums.erase(unique(all(nums)), nums.end());
    forn(i, n) s1[i] = distance(nums.begin(), lower_bound(all(nums), s1[i]));
    forn(i, m) s2[i] = distance(nums.begin(), lower_bound(all(nums), s2[i]));
    vi next1 = calcNext(s1, nums.size());
    vi next2 = calcNext(s2, nums.size());
    vi cnt1(nums.size());
    vi cnt2(nums.size());
    int c1 = 0, c2 = 0;
    int p1 = 0, p2 = 0;
    ll ans = 0;
    while (p1 < n && p2 < m) {
        ++cnt1[s1[p1]];
        if (cnt1[s1[p1]] == 1) {
            if (cnt2[s1[p1]] == 0) ++c1;
            else --c2;
        }

        ++cnt2[s2[p2]];
        if (cnt2[s2[p2]] == 1) {
            if (cnt1[s2[p2]] == 0) ++c2;
            else --c1;
        }
        assert(c1 >= 0 && c2 >= 0);
        if (c1 > 0) ++p2;
        if (c2 > 0) ++p1;
        while (p1 < n && p2 < m && c1 + c2 > 0) {
            ++cnt1[s1[p1]];
            if (cnt1[s1[p1]] == 1) {
                if (cnt2[s1[p1]] == 0) ++c1;
                else --c2;
            }

            ++cnt2[s2[p2]];
            if (cnt2[s2[p2]] == 1) {
                if (cnt1[s2[p2]] == 0) ++c2;
                else --c1;
            }
            assert(c1 >= 0 && c2 >= 0);
            if (c1 > 0) ++p2;
            if (c2 > 0) ++p1;
        }
        if (p1 < n && p2 < m) {
            ans += (next1[p1] - p1) * ll(next2[p2] - p2);
            p1 = next1[p1];
            p2 = next2[p2];
        }
    }
    return ans;
}

void solve()
{
    int numTests; cin >> numTests;
    for1(testId, numTests) {
        cerr << testId << endl;
        cout << "Case #" << testId << ": " <<  solveTest() << endl;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    solve();
    return 0;
}

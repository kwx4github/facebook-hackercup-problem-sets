#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#define frs first
#define scn second
using namespace std;

typedef unsigned long long ull;
const ull kMod = 1000000007;
const int kSize = 1000010;

int Z, N, M;
ull X1, X2, A1, A2, B1, B2, C1, C2, R1, R2;

ull f1[kSize], f2[kSize];

ull pool[kMod / 10];

set< ull > s;
map< ull, int > ma, mb;

void prep();
void read();
void solve(int);

int main() {
  prep();
  cin >> Z;
  for (int zi = 1; zi <= Z; ++zi)
    read(), solve(zi);

  return 0;
}

void prep() {
  for (int i = 0; i < int(kMod / 10); ++i)
    pool[i] = i + 2;
  random_shuffle(&pool[0], &pool[kMod / 10]);
}

void read() {
  cin >> N >> M;
  cin >> X1 >> A1 >> B1 >> C1 >> R1;
  cin >> X2 >> A2 >> B2 >> C2 >> R2;
}

void solve(int zi) {
  f1[0] = X1, f2[0] = X2;
  for (int i = 1; i < max(N, M); ++i) {
    f1[i] = (A1 * f1[(i - 1) % N] + B1 * f2[(i - 1) % M] + C1) % R1;
    f2[i] = (A2 * f1[(i - 1) % N] + B2 * f2[(i - 1) % M] + C2) % R2;
  }

//  for (int i = 0; i < N; ++i)
//    cout << " " << f1[i];
//  cout << "\n";
//  for (int i = 0; i < M; ++i)
//    cout << " " << f2[i];
//  cout << "\n";

  ull t;

  ma.clear(), mb.clear();

  s.clear(), t = 1;
//  cout << "board 1:";
  for (int i = 0; i < N; ++i) {
    if (s.count(f1[i]) == 0)
      s.insert(f1[i]), t = t * pool[f1[i] % (kMod / 10)] % kMod;
    ++ma[t];
//    cout << " " << t;
  }
//  cout << "\n";

//  cout << "ma:\n";
//  for (map< ull, int >::iterator itr = ma.begin(); itr != ma.end(); ++itr)
//    cout << " (" << itr->first << ", " << itr->second << ")\n";

  s.clear(), t = 1;
//  cout << "board 2:";
  for (int i = 0; i < M; ++i) {
    if (s.count(f2[i]) == 0)
      s.insert(f2[i]), t = t * pool[f2[i] % (kMod / 10)] % kMod;
    ++mb[t];
//    cout << " " << t;
  }
//  cout << "\n";

//  cout << "mb:\n";
//  for (map< ull, int >::iterator itr = mb.begin(); itr != mb.end(); ++itr)
//    cout << " (" << itr->first << ", " << itr->second << ")\n";

  ull res = 0;
  for (map< ull, int >::iterator itr = ma.begin(); itr != ma.end(); ++itr)
    if (mb.count(itr->first))
      res += ull(ma[itr->first]) * ull(mb[itr->first]);

  cout << "Case #" << zi << ": " << res << "\n";
}

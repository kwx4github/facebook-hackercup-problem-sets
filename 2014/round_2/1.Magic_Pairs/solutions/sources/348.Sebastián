///SACAR FREOPEN.
#include <iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cmath>
#include<set>
#include<list>
#include<cstdlib>
#include<cstdio>
#include<iomanip>
#include<stack>
#include<queue>
#include<stdio.h>
#include<string.h>
#include<map>
#include<sstream>
#include<assert.h>

using namespace std;

#define all(c) (c).begin(),(c).end()
#define forn(i,n) for(int i=0;i<(int)n;i++)
#define dforn(i,n) for(int i=n-1;i>=0;i--)
#define formn(i,m,n) for(int i=m;i<(int)n;i++)
#define dformn(i,m,n) for(int i=n-1;i>=m;i--)
#define mp make_pair
#define pb push_back

const double PI=acos(-1.0);

typedef long long tint;
typedef pair<int,int> pint;

tint tc;
tint N,M;
tint x1, a1, b1, c1, r1;
tint x2, a2, b2, c2, r2;

tint t1[1111111], t2[1111111];

void solve(){
	cin >> N >> M;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	for(int i = 0; i < max(M,N); i++){
		t1[0] = x1;
		t2[0] = x2;
		t1[i] = (a1 * t1[(i-1) % N] + b1 * t2[(i-1) % M] + c1) % r1;
		t2[i] = (a2 * t1[(i-1) % N] + b2 * t2[(i-1) % M] + c2) % r2;
	}

/*forn(i,N)
	cerr << t1[i] << " ";
cerr << endl;
forn(i,M)
	cerr << t2[i] << " ";
cerr << endl;*/

	tint res = 0;
	tint p1 = -1;
	tint p2 = -1;
	set<tint> h1; set<tint> m1;
	set<tint> h2; set<tint> m2;
	while(p1 + 1 < N && p2 + 1 < M){///invariante: m1 = m2 = NULL
		p1++;
		p2++;
		
		tint e1 = t1[p1];
		h1.insert(e1);
		m1.erase(e1);
		if(!h2.count(e1))
			m2.insert(e1);
		
		tint e2 = t2[p2];
		h2.insert(e2);
		m2.erase(e2);
		if(!h1.count(e2))
			m1.insert(e2);
		
		///reestablezco invariante
		while(m1.size() > 0 || m2.size() > 0){
			if(m1.size() > 0 && p1 + 1 == N)
				break;
			if(m2.size() > 0 && p2 + 1 == M)
				break;
			while(p1 + 1 < N && m1.size() > 0){
				p1++;
				e1 = t1[p1];
				h1.insert(e1);
				m1.erase(e1);
				if(!h2.count(e1))
					m2.insert(e1);
			}
			while(p2 + 1 < M && m2.size() > 0){
				p2++;
				e2 = t2[p2];
				h2.insert(e2);
				m2.erase(e2);
				if(!h1.count(e2))
					m1.insert(e2);
			}
		}
		if(m1.size() > 0 || m2.size() > 0)///No pude
			break;
//assert(h1 == h2);
		tint d1 = 1;
		while(p1 + 1 < N && h1.count(t1[p1 + 1]))
			p1++, d1++;
		tint d2 = 1;
		while(p2 + 1 < M && h2.count(t2[p2 + 1]))
			p2++, d2++;
		res += d1 * d2;
	}
	cout << "Case #" << tc << ": " << res << endl;
}

int main(){
freopen("A.in","r",stdin);
freopen("A.out","w",stdout);
	int TC; cin >> TC;
	for(tc = 1; tc <= TC; tc++)
		solve();
    return 0;
}

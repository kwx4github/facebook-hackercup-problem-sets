import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;


public class MagicPairs {

	public static void main(String[] args) 
	{
		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		for (int z = 0; z < t; z++)
		{
			n = in.nextInt();
			m = in.nextInt();
			long x1 = in.nextInt();
			long a1 = in.nextInt();
			long b1 = in.nextLong();
			long c1 = in.nextLong();
			long r1 = in.nextLong();
			long x2 = in.nextInt();
			long a2 = in.nextLong();
			long b2 = in.nextLong();
			long c2 = in.nextLong();
			long r2 = in.nextLong();
			
			a = new long[n];
			a[0] = x1;
			b = new long[m];
			b[0] = x2;
			
			int e = Math.min(m, n);
			int e2 = Math.max(m, n);
			for (int i = 1; i < e; i++)
			{
				a[i] = (a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1;
				b[i] = (a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2;
			}
			
			for (int i = e; i < e2; i++)
			{
				if (i < n)
					a[i] = (a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1;
				else
					b[i] = (a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2;
			}
			
			long ret = 0;
			ntoia = new HashMap<Long, Integer>();
			ntoib = new HashMap<Long, Integer>();
			for (int i = 0; i < n; i++)
			{
				if (!ntoia.containsKey(a[i]))
					ntoia.put(a[i], i);
			}
			for (int i = 0; i < m; i++)
			{
				if (!ntoib.containsKey(b[i]))
					ntoib.put(b[i], i);
			}
			
			visited = new HashSet<String>();
			
			ArrayDeque<Integer> q = new ArrayDeque<Integer>();
			q.add(0);
			q.add(0);
			out: while (!q.isEmpty())
			{
				int i = q.poll();
				int j = q.poll();
				
				//System.out.println();
				//System.out.println("At: " + i + " " + j);
			
				if (i == n || j == m)
					continue;
				
				Integer maxIndexA = ntoia.get(b[j]);
				Integer maxIndexB = ntoib.get(a[i]);
				if (maxIndexA == null || maxIndexB == null)
					continue;
				
				int si = i;
				int sj = j;
				while (true)
				{
					int tempsi = maxIndexA;
					int tempsj = maxIndexB;
					
					for (; si < maxIndexA; si++)
					{
						Integer temp = ntoib.get(a[si]);
						if (temp == null)
							continue out;
						maxIndexB = Math.max(maxIndexB, temp);
					}
					
					for (; sj < maxIndexB; sj++)
					{
						Integer temp = ntoia.get(b[sj]);
						if (temp == null)
							continue out;
						maxIndexA = Math.max(maxIndexA, temp);
					}
					
					if (maxIndexA == tempsi && maxIndexB == tempsj)
						break;
				}
				
				//System.out.println("Max: " + maxIndexA + " " + maxIndexB);
				String hash = "";
				if (maxIndexA <= i && maxIndexB <= j)
				{
					ret++;
					hash = i + " " + (j + 1);
					if (visited.contains(hash))
						continue;
					visited.add(hash);
					q.add(i);
					q.add(j + 1);
					
					hash = (i + 1) + " " + j;
					if (visited.contains(hash))
						continue;
					visited.add(hash);
					q.add(i + 1);
					q.add(j);
				}
				else if (maxIndexA <= i)
				{
					hash = i + " " + maxIndexB;
					if (visited.contains(hash))
						continue;
					visited.add(hash);
					q.add(i);
					q.add(maxIndexB);
				}
				else if (maxIndexB <= j)
				{
					hash = maxIndexA + " " + j;
					if (visited.contains(hash))
						continue;
					visited.add(hash);
					q.add(maxIndexA);
					q.add(j);
				}
				else
				{
					hash = maxIndexA + " " + maxIndexB;
					if (visited.contains(hash))
						continue;
					visited.add(hash);
					q.add(maxIndexA);
					q.add(maxIndexB);
				}
			}
			
			System.out.println("Case #" + (z + 1) + ": " + ret);
		}
	}
	
	static HashMap<Long, Integer> ntoia;
	static HashMap<Long, Integer> ntoib;
	static int n;
	static int m;
	static long[] a;
	static long[] b;

	static HashSet<String> visited;
}

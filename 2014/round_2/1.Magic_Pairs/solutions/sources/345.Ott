#include <algorithm>
#include <numeric>
#include <sstream>
#include <bitset>
#include <string>
#include <vector>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <cassert>

#define foreach(i, s, w) for(int i = s; i < int(w.size()); ++i)
#define forX(i, m) for(typeof(m.begin()) i = m.begin(); i != m.end(); ++i)

typedef long long int64;

using namespace std;

int64 len1, len2;
int64 x1, a1, b1, c1, range1;
int64 x2, a2, b2, c2, range2;
int64 board1[1000000], board2[1000000];

void FillBoards() {
	board1[0] = x1;
	board2[0] = x2;
	for (int i = 1; i < max(len1, len2); ++i) {
		if (i < len1) {
			board1[i] = (a1 * board1[(i - 1) % len1] + b1 * board2[(i - 1) % len2] + c1) % range1;
		}
		if (i < len2) {
			board2[i] = (a2 * board1[(i - 1) % len1] + b2 * board2[(i - 1) % len2] + c2) % range2;
		}
	}
	
	/*
	cerr << "board1:";
	for (int i = 0; i < len1; ++i)
		cerr << " " << board1[i];
	cerr << endl;

	cerr << "board2:";
	for (int i = 0; i < len2; ++i)
		cerr << " " << board2[i];
	cerr << endl;*/
}

int64 Solve() {
	set<int> s1, s2;
	set<int> new_s1, new_s2;
	int pos1 = 0, pos2 = 0;
	int64 cur1 = 1, cur2 = 1;
	int64 result = 0;

	
	while (pos1 < len1 || pos2 < len2) {
		if (pos1 < len1 && (s1.size() <= s2.size() || pos2 == len2)) {
			const int new_num = board1[pos1];
			s1.insert(new_num);
			new_s1.insert(new_num);
			++pos1;
			cur1 = 1;
			while (pos1 < len1 && s1.count(board1[pos1])) {
				++pos1;
				++cur1;
			}
		} else {
			assert(pos2 < len2);
			const int new_num = board2[pos2];
			s2.insert(new_num);
			new_s2.insert(new_num);
			++pos2;
			cur2 = 1;
			while (pos2 < len2 && s2.count(board2[pos2])) {
				++pos2;
				++cur2;
			}
			if (s1.size() == s2.size() && new_s1 == new_s2) {
				result += cur1 * cur2;
				if (s1.size() % 1000 == 0) {
					//cerr << s1.size() << ": " << result << endl;
				}
				new_s1.clear();
				new_s2.clear();
			}
		}
	}
	return result;
}

int main() {
	int T;
	cin >> T;
	for (int t = 0; t < T; ++t) {
		cin >> len1 >> len2;
		cin >> x1 >> a1 >> b1 >> c1 >> range1;
		cin >> x2 >> a2 >> b2 >> c2 >> range2;
		FillBoards();
		int64 result = Solve();
		cout << "Case #" << (t + 1) << ": " << result << endl;
	}
	return 0;
}

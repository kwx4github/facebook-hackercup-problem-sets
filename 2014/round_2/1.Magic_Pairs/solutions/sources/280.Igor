#pragma comment(linker,"/stack:256000000")

#include <cmath> 
#include <ctime> 
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <set> 
#include <map> 
#include <cstring> 
#include <cstdlib> 
#include <queue> 
#include <cstdio> 
#include <cfloat>
#include <cassert>
#include <sstream>
#include <deque>

using namespace std; 

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++) 
#define sz(v) (int)(v).size() 
#define all(v) (v).begin(), (v).end()

const int N = 1000100;

int A[2][N];
set <int> has[2];
set <int> add[2];

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int T;
	scanf("%d", &T);
	for (int tst = 1; tst <= T; tst++) {
		cerr << "Test #" << tst << endl;
		int n, m;
		scanf("%d %d", &n, &m);
		//REP(i, n) scanf("%d", &A[0][i]);
		//REP(i, m) scanf("%d", &A[1][i]);
		int x[2], a[2], b[2], c[2], r[2];
		REP(i, 2) {
			scanf("%d %d %d %d %d", &x[i], &a[i], &b[i], &c[i], &r[i]);
		}
		A[0][0] = x[0];
		A[1][0] = x[1];
		for (int i = 1; i < max(n, m); i++) {
			if (i < n) {
				A[0][i] = ((long long)a[0] * A[0][(i - 1) % n] + (long long)b[0] * A[1][(i - 1) % m] + c[0]) % r[0];
			}
			if (i < m) {
				A[1][i] = ((long long)a[1] * A[0][(i - 1) % n] + (long long)b[1] * A[1][(i - 1) % m] + c[1]) % r[1];
			}
		}
		//vector <int> dbg0 = vector <int>(A[0], A[0] + n);
		//vector <int> dbg1 = vector <int>(A[1], A[1] + m);
		int p[2] = {0};
		int f[2] = {n, m};
		REP(i, 2) has[i].clear();
		long long res = 0;
		while (p[0] < f[0] && p[1] < f[1]) {
			REP(i, 2) add[i].clear();
			has[0].insert(A[0][p[0]]);
			assert(!has[1].count(A[0][p[0]]));
			add[1].insert(A[0][p[0]]);
			p[0]++;
			bool good = true;
			for (int turn = 1; ; turn = 1 - turn) {
				if (sz(add[0]) == 0 && sz(add[1]) == 0) {
					break;
				}
				while (p[turn] < f[turn] && !add[turn].empty()) {
					int cur = A[turn][p[turn]];
					if (add[turn].count(cur)) {
						add[turn].erase(cur);
					}
					if (!has[1 - turn].count(cur)) {
						add[1 - turn].insert(cur);
					}
					has[turn].insert(cur);
					++p[turn];
				}
				if (!add[turn].empty()) {
					good = false;
					break;
				}
			}
			if (good) {
				int cnt[2] = {1, 1};
				REP(i, 2) {
					while (p[i] < f[i] && has[i].count(A[i][p[i]])) {
						++p[i];
						++cnt[i];
					}
				}
				res += (long long)cnt[0] * cnt[1];
			}
		}
		cout << "Case #" << tst << ": " << res << endl;
	}
	return 0;
}
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.max;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class A {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static void solve() throws Exception {
		int n = nextInt();
		int m = nextInt();
		int board1[] = new int[n];
		int board2[] = new int[m];
		int x1 = nextInt();
		int a1 = nextInt();
		int b1 = nextInt();
		int c1 = nextInt();
		int r1 = nextInt();
		int x2 = nextInt();
		int a2 = nextInt();
		int b2 = nextInt();
		int c2 = nextInt();
		int r2 = nextInt();
		board1[0] = x1;
		board2[0] = x2;
		for (int i = 1; i < max(n, m); i++) {
			if (i < n) {
				board1[i] = (int) (((long) a1 * board1[(i - 1) % n] + (long) b1 * board2[(i - 1) % m] + c1) % r1);
			}
			if (i < m) {
				board2[i] = (int) (((long) a2 * board1[(i - 1) % n] + (long) b2 * board2[(i - 1) % m] + c2) % r2);
			}
		}
		Set<Integer> set1 = new HashSet<>();
		Set<Integer> set2 = new HashSet<>();
		int diff = 0;
		long ans = 0;
		int p1 = 0, p2 = 0;
		while (p1 < n && p2 < m) {
			if (!set1.add(board1[p1])) {
				throw new AssertionError();
			}
			if (set2.contains(board1[p1])) {
				--diff;
			} else {
				++diff;
			}
			if (!set2.add(board2[p2])) {
				throw new AssertionError();
			}
			if (set1.contains(board2[p2])) {
				--diff;
			} else {
				++diff;
			}
			int np1, np2;
			for (np1 = p1 + 1; np1 < n && set1.contains(board1[np1]); np1++) { }
			for (np2 = p2 + 1; np2 < m && set2.contains(board2[np2]); np2++) { }
			if (diff == 0) {
				ans += (long) (np1 - p1) * (np2 - p2);
			}
			p1 = np1;
			p2 = np2;
		}
		printCase();
		out.println(ans);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
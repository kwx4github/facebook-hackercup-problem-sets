#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxn=1<<20;

int n1,n2;
int d1[maxn],d2[maxn];

void collect(int n,int d[],map<int,int>& first,vector<int>& pts)
{
	for (int i=0;i<n;i++)
	{
		if (first.find(d[i])!=first.end()) continue;
		first[d[i]]=i;
		pts.push_back(i);
	}
	pts.push_back(n);
}
void get_cut(int n,int d[],vector<int>& pts,map<int,int>& other_first,vector<int>& cut)
{
	int g=-1;
	for (int i=0;i<SIZE(pts)-1;i++)
	{
		for (int k=pts[i];k<pts[i+1];k++)
		{
			int key=d[k];
			if (other_first.find(key)==other_first.end())
				g=1000000000;
			else
				checkmax(g,other_first[key]);
		}
		cut.push_back(g);
	}
}
int64 solve()
{
	map<int,int> first1,first2;
	vector<int> pt1,pt2;
	collect(n1,d1,first1,pt1);
	collect(n2,d2,first2,pt2);
	vector<int> cut1,cut2;
	get_cut(n1,d1,pt1,first2,cut1);
	get_cut(n2,d2,pt2,first1,cut2);
	int64 ret=0;
	for (int i=0;i<SIZE(cut1) && i<SIZE(cut2);i++)
		if (cut1[i]<pt2[i+1] && cut2[i]<pt1[i+1])
			ret+=(int64)(pt1[i+1]-pt1[i])*(int64)(pt2[i+1]-pt2[i]);
	return ret;
}
int main()
{
	//freopen("input.txt","r",stdin);
	freopen("a.in","r",stdin); freopen("a.out","w",stdout);
	int testcase;
	scanf("%d",&testcase);
	for (int case_id=1;case_id<=testcase;case_id++)
	{
		int x1,x2,a1,a2,b1,b2,c1,c2,r1,r2;
		scanf("%d%d%d%d%d%d%d%d%d%d%d%d",&n1,&n2,&x1,&a1,&b1,&c1,&r1,&x2,&a2,&b2,&c2,&r2);
		d1[0]=x1;
		d2[0]=x2;
		for (int i=1;i<n1 || i<n2;i++)
		{
			if (i<n1) d1[i]=(int)(((int64)d1[(i-1)%n1]*a1+(int64)d2[(i-1)%n2]*b1+c1)%r1);
			if (i<n2) d2[i]=(int)(((int64)d1[(i-1)%n1]*a2+(int64)d2[(i-1)%n2]*b2+c2)%r2);
		}
		int64 r=solve();
		cout<<"Case #"<<case_id<<": "<<r<<endl;
	}
	return 0;
}


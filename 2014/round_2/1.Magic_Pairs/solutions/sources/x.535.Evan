import java.util.*;
import java.io.*;
public class MagicPairs 
{
	public static void main(String[] args) throws IOException
	{
//		Scanner in = new Scanner(System.in);
		Scanner in = new Scanner(new File("magic_pairs.txt"));
		PrintWriter out = new PrintWriter(new FileWriter(new File("magicpairsoutput.txt")));
		
		int t = in.nextInt();
		
		for(int x = 0; x < t; x++)
		{
			int n = in.nextInt();
			int m = in.nextInt();
			
			int x1 = in.nextInt();
			int a1 = in.nextInt();
			int b1 = in.nextInt();
			int c1 = in.nextInt();
			int r1 = in.nextInt();
			
			int x2 = in.nextInt();
			int a2 = in.nextInt();
			int b2 = in.nextInt();
			int c2 = in.nextInt();
			int r2 = in.nextInt();
			
			int[] board1 = new int[n];
			int[] board2 = new int[m];
			
			board1[0] = x1;
			board2[0] = x2;
			
			for(int y = 1; y < Math.max(n, m); y++)
			{
				if(y < n)
				{
					board1[y] = (a1 * board1[(y - 1) % n] + b1 * board2[(y - 1) % m] + c1) % r1;
				}
				
				if(y < m)
				{
					board2[y] = (a2 * board1[(y - 1) % n] + b2 * board2[(y - 1) % m] + c2) % r2;
				}
			}
			
			TreeSet<Integer> set1 = new TreeSet<Integer>();
			TreeSet<Integer> set2 = new TreeSet<Integer>();
			
			TreeSet<Integer> need1 = new TreeSet<Integer>();
			TreeSet<Integer> need2 = new TreeSet<Integer>();
			
			int i1 = 0;
			int i2 = 0;
			
			long result = 0;
			while(i1 < n && i2 < m)
			{
				int next1 = board1[i1];
				while(set1.contains(next1))
				{
					i1++;
					if(i1 == n)
					{
						break;
					}
					
					next1 = board1[i1];
				}
				
				int next2 = board2[i2];
				while(set2.contains(next2))
				{
					i2++;
					if(i2 == m)
					{
						break;
					}
					
					next2 = board2[i2];
				}
				
				if(i1 == n || i2 == m)
				{
					break;
				}
				
				set1.add(next1);
				set2.add(next2);
				
				int size1 = 1;
				int size2 = 1;
				
				while(i1 + size1 < n && set1.contains(board1[i1 + size1]))
				{
					size1++;
				}
				while(i2 + size2 < m && set2.contains(board2[i2 + size2]))
				{
					size2++;
				}
				
				if(need2.contains(next1))
				{
					need2.remove(next1);
				}
				if(need1.contains(next2))
				{
					need1.remove(next2);
				}
				
				if(!set2.contains(next1))
				{
					need1.add(next1);
				}
				if(!set1.contains(next2))
				{
					need2.add(next2);
				}
				
				if(need1.size() == 0 && need2.size() == 0)
				{
					result += (long)size1 * (long)size2;
				}
			}
			
			out.println("Case #" + (x + 1) + ": " + result);
		}
		
		out.close();
	}
}

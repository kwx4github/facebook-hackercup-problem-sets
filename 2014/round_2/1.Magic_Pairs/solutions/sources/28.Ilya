import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.util.InputMismatchException;
import java.util.AbstractSet;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.HashSet;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author ilyakor
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Taska solver = new Taska();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Taska {
    public void solve(int testNumber, InputReader in, OutputWriter out) {
        int n = in.nextInt();
        int m = in.nextInt();
        long x1 = in.nextLong();
        long a1 = in.nextLong();
        long b1 = in.nextLong();
        long c1 = in.nextLong();
        long r1 = in.nextLong();
        long x2 = in.nextLong();
        long a2 = in.nextLong();
        long b2 = in.nextLong();
        long c2 = in.nextLong();
        long r2 = in.nextLong();
        long[] d1 = new long[n];
        long[] d2 = new long[m];
        d1[0] = x1;
        d2[0] = x2;
        for (int i = 1; i < n || i < m; ++i) {
            if (i < n) {
                d1[i] = (a1 * d1[i - 1] + b1 * d2[(i - 1) % m] + c1) % r1;
            }
            if (i < m) {
                d2[i] = (a2 * d1[(i - 1) % n] + b2 * d2[i - 1] + c2) % r2;
            }
        }

        long res = 0;
        HashSet<Long> hs1 = new HashSet<>();
        HashSet<Long> hs2 = new HashSet<>();
        int l = -1, r = -1;
        for (int i = 0; i < n; ++i) {
            if (hs1.contains(d1[i])) {
                res += (long)(r - l);
                continue;
            }
            hs1.add(d1[i]);
            while (!hs2.contains(d1[i])) {
                ++l;
                if (l >= m) break;
                hs2.add(d2[l]);
            }
            if (r < l) r = l;
            while (r < m && hs2.size() == hs1.size() && hs2.contains(d2[r]))
                ++r;
            res += (long)(r - l);
            if (r > l)
                Assert.assertTrue(hs1.size() == hs2.size());
        }

        if (n < 100 && m < 100) {
            hs1 = new HashSet<>();
            long alt = 0;
            for (int i = 0; i < n; ++i) {
                hs1.add(d1[i]);
                hs2 = new HashSet<>();
                for (int j = 0; j < m; ++j) {
                    hs2.add(d2[j]);
                    if (hs1.equals(hs2))
                        ++alt;
                }
            }
            Assert.assertTrue(alt == res);
        }

        out.printLine("Case #" + testNumber + ": " + res);
    }
}

class InputReader {
    private InputStream stream;
    private byte[] buffer = new byte[10000];
    private int cur;
    private int count;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public static boolean isSpace(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public int read() {
        if (count == -1) {
            throw new InputMismatchException();
        }
        try {
            if (cur >= count) {
                cur = 0;
                count = stream.read(buffer);
                if (count <= 0)
                    return -1;
            }
        } catch (IOException e) {
            throw new InputMismatchException();
        }
        return buffer[cur++];
    }

    public int readSkipSpace() {
        int c;
        do {
            c = read();
        } while (isSpace(c));
        return c;
    }

    public String nextToken() {
        int c = readSkipSpace();
        StringBuilder sb = new StringBuilder();
        while (!isSpace(c)) {
            sb.append((char) c);
            c = read();
        }
        return sb.toString();
    }

    public String next() {
        return nextToken();
    }

    public int nextInt() {
        int sgn = 1;
        int c = readSkipSpace();
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9') {
                throw new InputMismatchException();
            }
            res = res * 10 + c - '0';
            c = read();
        } while (!isSpace(c));
        res *= sgn;
        return res;
    }

    public long nextLong() {
        long sgn = 1;
        int c = readSkipSpace();
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9') {
                throw new InputMismatchException();
            }
            res = res * 10L + (long)(c - '0');
            c = read();
        } while (!isSpace(c));
        res *= sgn;
        return res;
    }

    }

class OutputWriter {
    private final PrintWriter writer;

    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }

    public OutputWriter(Writer writer) {
        this.writer = new PrintWriter(writer);
    }

    public void print(Object... objects) {
        for (int i = 0; i < objects.length; i++) {
            if (i != 0) {
                writer.print(' ');
            }
            writer.print(objects[i]);
        }
    }

    public void printLine(Object... objects) {
        print(objects);
        writer.println();
    }

    public void close() {
        writer.close();
    }

    }

class Assert {

    public static void assertTrue(boolean flag) {
        if (!flag)
            throw new AssertionError();
    }

    }


#ifdef _MONYURA_
#pragma comment(linker,"/STACK:1024000000")
#endif


#include <iostream>
#include <iomanip>
#include <cstdio>
#include <bitset>
#include <memory>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <string>
#include <cstring>
#include <fstream>
#include <functional>
#include <stack>
#include <complex>
#include <wchar.h>
#include <wctype.h>
#include <cmath>
#include <queue>
#include <ctime>
#include <numeric>


using namespace std;

template<typename T> T mabs(const T &a){ return a<0?-a:a;}
#define rep(x,y,z) for(int x=(y),e##x=(z);x<e##x;x++)
#define SQR(x) ((x)*(x))
#define all(c) (c).begin(), (c).end()

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef short int si;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

int Aval[1000100],Bval[1000100];


int getRes(int *A,int *B,int n,int m)
{
	int res = 0;
	set<int> sa;
	rep(i,0,n)
	{
		sa.insert(A[i]);
		set<int> sb;
		rep(j,0,m)
		{
			sb.insert(B[j]);
			res += sa == sb;
		}
	}
	return res;
}

void test()
{
	int n,m;
	cin>>n>>m;
	ll x1, a1, b1, c1, r1;
	ll x2, a2, b2, c2, r2;
	cin>>x1>>a1>>b1>>c1>>r1;
	cin>>x2>>a2>>b2>>c2>>r2;
	Aval[0] = x1;
	Bval[0] = x2;
	rep(i,1,max(n,m))
	{
		Aval[i] = (a1 * Aval[(i-1)%n] + b1 * Bval[(i-1)%m] + c1) % r1;
		Bval[i] = (a2 * Aval[(i-1)%n] + b2 * Bval[(i-1)%m] + c2) % r2;
	}
	//puts("");
	//rep(i,0,n)
	//	cout<<Aval[i]<<' ';
	//puts("");
	//rep(i,0,m)
	//	cout<<Bval[i]<<' ';
	//puts("");
	set<int> A,B;
	A.insert(Aval[0]);
	B.insert(Bval[0]);
	int needA = 0;
	int needB = 0;
	int diff  = 0;
	if (Aval[0] != Bval[0])
		diff = 2;
		//needA = needB = 1;
	int posa = 1, posb = 1;
	ll res = 0;
	
	while (1)
	{
		ll addA = 1, addB = 1;
		while (posa < n)
		{
			if (A.find(Aval[posa]) == A.end())
				break;
			++posa;
			++addA;
		}
		while (posb < m)
		{
			if (B.find(Bval[posb]) == B.end())
				break;
			++posb;
			++addB;
		}
		if (diff == 0)
			res += addA * addB;
		if (posa>=n && posb>=m)
			break;
		if (posa < n && posb < m && Aval[posa] == Bval[posb])
		{
			A.insert(Aval[posa]);
			B.insert(Bval[posb]);
			++posa;
			++posb;
		}
		else
		{
			if (posa < n)
			{
				if (B.find(Aval[posa]) == B.end())
					diff++;
				else
					diff--;
				A.insert(Aval[posa]);
				++posa;
			}
			if (posb < m)
			{
				if (A.find(Bval[posb]) == A.end())
					diff++;
				else
					diff--;
				B.insert(Bval[posb]);
				++posb;
			}
		}
	}
	//cout<<getRes(Aval,Bval,n,m)<<endl;
	cout<<res;
}

void run()
{
	
	int t;
	cin>>t;
	rep(i,0,t)
	{
		cerr<<i<<endl;
		printf("Case #%d: ",i+1);
		test();
		puts("");
	}
}

#define prob "_magic_pairs"

int main()
{
#ifdef _MONYURA_
	#ifdef prob
		freopen(prob".txt","r",stdin);
		freopen(prob".out.txt","w",stdout);
	#else
		freopen("test.in","r",stdin);
		freopen("test.out","w",stdout);
	#endif
    time_t st=clock();
#endif
    run();
#ifdef _MONYURA_
	#ifndef prob
		printf( "\n=============\n");
		printf("Time: %.2lf sec\n",(clock()-st)/double(CLOCKS_PER_SEC));
	#endif
#endif
    return 0;
}
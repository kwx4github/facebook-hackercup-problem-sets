// Author: Tusshar Singh
#include<cstdio>
#include<vector>
#include<cmath>
#include<string>
#include<cstring>
#include<algorithm>
#include<queue>
#include<set>
#include<stack>
#include<map>
#include<sstream>
#include<bitset>
#include<deque>
#include<utility>
#include<cstdlib>
#include<iomanip>
#include<cctype>
#include<climits>
#include<iostream>

using namespace std;

#define mod 1000000007
#define inf 2147483647
#define ninf -2147483648
#define FOR(i,a,b) for(i=a;i<b;i++)
#define s(a) scanf("%d",&a)
#define lls(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a)
#define p(a) printf("%d",a)
#define llp(a) printf("%lld",a)
#define sp(a) printf("%s",a)
#define cp(a) printf("%c",a)
#define nline printf("\n")
#define space printf(" ")
#define ll long long
#define gcd __gcd

string tostr(long long x) { stringstream ss; ss << x; return ss.str(); }
long long toint(const string &s) { stringstream ss; ss << s; long long x; ss >> x; return x; }

ll board1[1000010];
    	ll board2[1000010];

int main() {
    freopen ("input.txt","r",stdin);
    freopen ("output.txt","w",stdout);
    int t,test;
    cin>>test;
    FOR(t,1,test+1)
    {
        int i,j,k,l;
        map<ll,int> map1,map2;
        int n,m;
        cin>>n>>m;
        int x1,x2,a1,a2,b1,b2,c1,c2;
        int r1,r2;
        cin>>x1>> a1>> b1>> c1>> r1;
        cin>>x2>> a2>> b2>> c2>> r2;



    	board1[0]=x1;
    	board2[0]=x2;
    	for(i=1;i<max(n,m);i++)
    	{
    	    if(i<n)
    	    board1[i] = (a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1;
    	    if(i<m)
    	    board2[i] = (a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2;
    	}
    	/*FOR(i,0,n)
    	cout<<board1[i]<<" ";
    	cout<<endl;
    	FOR(i,0,m)
    	cout<<board2[i]<<" ";
    	cout<<endl;*/
        set<ll> set1,set2;
        std::set<ll>::iterator it;
        int itn=0,itm=0;
        ll ans=0;
        for(;itn<n||itm<m;)
    	{
    	    while(itn<n&&map1[board1[itn]]==1)
    	    {
    	        itn++;
    	        if(set1.size()==0&&set2.size()==0)
    	        {
    	            ans++;
    	        }
    	    }
    	    while(itm<m&&map2[board2[itm]]==1)
    	    {
    	        itm++;
    	        if(set1.size()==0&&set2.size()==0)
    	        {
    	            ans++;
    	        }
    	    }
    	    if(itn<n&&itm<m)
    	    {
    	        if(board1[itn]==board2[itm])
    	        {
    	            it=set1.find(board2[itm]);
                    if(it!=set1.end())
                        set1.erase(it);

                    it=set2.find(board1[itn]);
                    if(it!=set2.end())
                        set2.erase(it);
    	        }
    	        else
    	        {
    	            it=set1.find(board2[itm]);
                    if(it!=set1.end())
                        set1.erase(it);
                    else
                        set2.insert(board2[itm]);

                    it=set2.find(board1[itn]);
                    if(it!=set2.end())
                        set2.erase(it);
                    else
                        set1.insert(board1[itn]);
    	        }
                map1[board1[itn]]=1;
                map2[board2[itm]]=1;
                if(set1.size()==0&&set2.size()==0)
    	        {
    	            ans++;
    	        }
    	        itn++;
    	        itm++;
    	    }
    	    else if(itn<n)
    	    {
    	        it=set2.find(board1[itn]);
                if(it!=set2.end())
                    set2.erase(it);
                else
                    set1.insert(board1[itn]);

                map1[board1[itn]]=1;
                if(set1.size()==0&&set2.size()==0)
    	        {
    	            ans++;
    	        }
    	        itn++;
    	    }
    	    else if(itm<m)
    	    {
    	        it=set1.find(board2[itm]);
                if(it!=set1.end())
                    set1.erase(it);
                else
                    set2.insert(board2[itm]);

                map2[board2[itm]]=1;
                if(set1.size()==0&&set2.size()==0)
    	        {
    	            ans++;
    	        }
    	        itm++;
    	    }
    	}
    	printf("Case #%d: %lld\n",t,ans);
    }
    return 0;
}

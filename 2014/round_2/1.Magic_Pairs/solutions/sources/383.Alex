#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <ios>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <hash_set>
#include <unordered_set>
#include <unordered_map>

using namespace std;
using namespace stdext;

#pragma comment(linker, "/STACK:64000000")

#define EPS 1e-9
#define sz(x) (int)(x)->size()
#define all(x) (x).begin(), (x).end()
#define contains(x, y) ((x)->find(y) != (x)->end())

typedef long long int64;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
typedef vector<string> vs;

int main()
{
    freopen("A.in", "r", stdin); freopen("A.out", "w", stdout);
    
	int tests;
	cin >> tests;
	for (int test = 1; test <= tests; test++)
	{
		int n, m;
		int64 x1, a1, b1, c1, r1;
		int64 x2, a2, b2, c2, r2;
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		vector<int> t1, t2;
		//unordered_map<int, int> id;
		//vector<int> f1(n + m, n + 1), f2(n + m, m + 1);
		t1.push_back(x1);
		t2.push_back(x2);
		for (int i = 1; i < max(n, m); i++)
		{
			if (i < n)
				t1.push_back((a1 * t1[(i - 1) % n] + b1 * t2[(i - 1) % m] + c1) % r1);
			if (i < m)
				t2.push_back((a2 * t1[(i - 1) % n] + b2 * t2[(i - 1) % m] + c2) % r2);
		}
		/*for (int i = 0; i < n; i++)
		{
			if (!contains(id, t1[i]))
				id[t1[i]] = sz(id);
			t1[i] = id[t1[i]];
		}
		for (int i = 0; i < m; i++)
		{
			if (!contains(id, t2[i]))
				id[t2[i]] = sz(id);
			t2[i] = id[t2[i]];
		}*/
		unordered_set<int>* s1;
		unordered_set<int>* s2;
		s1 = new unordered_set<int>();
		s2 = new unordered_set<int>();
		//return 0;
		int diff = 0;
		int i1 = 0;
		int i2 = 0;
		int sz1 = 0, sz2 = 0;
		int64 ans = 0;
		for (;;)
		{
			if (i2 < m && (sz(s1) > sz(s2) || i1 >= n))
			{
				// second
				if (contains(s2, t2[i2])) { i2++; continue; }
				if (contains(s1, t2[i2])) diff--;
				else diff++;
				//sz2++;
				s2->insert(t2[i2++]);
			}
			else if (i1 < n)
			{
				// first
				if (contains(s1, t1[i1])) { i1++; continue; }
				if (contains(s2, t1[i1])) diff--;
				else diff++;
				//sz1++;
				s1->insert(t1[i1++]);
			}
			else break;
			if (diff == 0)
			{
				int64 d1 = 1, d2 = 1;
				while (i1 < n && contains(s1, t1[i1])) i1++, d1++;
				while (i2 < m && contains(s2, t2[i2])) i2++, d2++;
				ans += d1 * d2;
			}
		}
		cout << "Case #" << test << ": " << ans << endl;
		//s1.clear(); s2.clear();
		//++(*(int*)0);
		//delete s1;
		//delete s2;
	}

    return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;
#define MAXN 1000000
#define ll long long

ll B1[MAXN+1];
ll B2[MAXN+1];

int next_new_color_id[MAXN+1];
int total_unique_colors[MAXN+1];

map<ll,int> smallest_id;
set<int> colors;
int main() {
    int T;
    cin>>T;
    for(int t=1;t<=T;t++) {
        int N,M;
        cin>>N>>M;
        ll x1,a1,b1,c1,r1;
        cin>>x1>>a1>>b1>>c1>>r1;
        ll x2,a2,b2,c2,r2;
        cin>>x2>>a2>>b2>>c2>>r2;
        
        
    
        
        
        
        B1[0]=x1;
        B2[0]=x2;
        for(int i=1;i<=max(N,M);i++) {
            B1[i]=(a1 * B1[(i-1)%N]%r1 + b1 * B2[(i-1)%M]%r1 + c1)%r1;
            B2[i]=(a2 * B1[(i-1)%N]%r2 + b2 * B2[(i-1)%M]%r2 + c2)%r2;
        }
        
        
        /*ll brute_ans = 0;
        
        for(int i=0;i<N;i++) {
            for(int j=0;j<M;j++) {
                set<int> c1,c2;
                for(int k=0;k<=i;k++)
                    c1.insert(B1[k]);
                for(int k=0;k<=j;k++)
                    c2.insert(B2[k]);
                
                vector<int> c1_v(c1.begin(),c1.end());
                vector<int> c2_v(c2.begin(),c2.end());
                bool ok =true;
                if(c1_v.size() != c2_v.size())
                    ok=false;
                if(ok) {
                    for(int j=0;j<c1_v.size();j++)
                        if(c1_v[j]!=c2_v[j])
                            ok=false;
                }
                if(ok)
                    brute_ans++;
            }
        }
        printf("%lld\n",brute_ans);*/
        
        
        map<ll,int> empty_map;
        smallest_id.swap(empty_map);
        int new_color_added_id = -1;
        for(int i=0;i<M;i++) {
            next_new_color_id[i]=M;
            int c = B2[i];
            if(smallest_id.find(c) == smallest_id.end()) {
                smallest_id[c]=i;
                if(new_color_added_id != -1)
                    next_new_color_id[new_color_added_id]=i;
                new_color_added_id = i;
            }
            total_unique_colors[i]=smallest_id.size();
        }
        
        int largest_index = -1;

        set<int> empty_colors;
        colors.swap(empty_colors);
        ll answer = 0;
        for(int i=0;i<N;i++) {
            int c = B1[i];
            colors.insert(c);
            if (smallest_id.find(c) == smallest_id.end())
                break;
            largest_index=max(largest_index, smallest_id[c]);
            if(total_unique_colors[largest_index] == colors.size()) {
                // from largest_index to next_new_color[largest_index]-1.
                answer += next_new_color_id[largest_index] - largest_index;
            }
        }
        
        printf("Case #%d: %lld\n",t,answer);
    }
}
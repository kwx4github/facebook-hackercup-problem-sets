#include <iostream>
#include <set>
#include <vector>
using namespace std;

const int MAXN = 1000010;

int A[MAXN];
int B[MAXN];
set <int> inA, inB, mustInA, mustInB, empty;
int t, n, m, x1, x2, a1, a2, b1, b2, r1, r2, c1, c2;
long long ans;

int main()
{
    ios_base::sync_with_stdio(0);
    cin >> t;
    for(int te = 1; te <= t; te++)
    {
	cin >> n >> m;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	ans = 0;
	inA = empty;
	inB = empty;
	mustInA = empty;
	mustInB = empty;
	int p1 = 0, p2 = 0;
	A[0] = x1; B[0] = x2;
	int mx = max(n, m);
	for(int i = 1; i < mx; i++)
	{
	    if(p1 >= n) p1 -= n;
	    if(p2 >= m) p2 -= m;
	    if(i < n)
		A[i] = ((long long) a1 * A[p1] + (long long) b1 * B[p2] + (long long) c1) % (long long) r1;
	    if(i < m)
		B[i] = ((long long) a2 * A[p1] + (long long) b2 * B[p2] + (long long) c2) % (long long) r2;
	    p1++;
	    p2++;
	}
	p2 = 0;
	int withOlds = 0;
	for(int i = 0; i < n; i++)
	{
	    if(inA.find(A[i]) == inA.end()) 
	    {
		inA.insert(A[i]);
		if(inB.find(A[i]) == inB.end())
		{
		    withOlds = 0;
		    while(p2 < m && B[p2] != A[i])
		    {
			inB.insert(B[p2]);
			if(inA.find(B[p2]) == inA.end())
			    mustInA.insert(B[p2]);
			p2++;
		    }
		    if(p2 < m)
		    {
			inB.insert(B[p2]);
		    }
		    while(p2 < m && inB.find(B[p2]) != inB.end())
		    {
			p2++;
			withOlds++;
		    }
		}
		set<int>::iterator it = mustInA.find(A[i]);
		if(it != mustInA.end()) mustInA.erase(it);
		if(mustInA.empty())
		{
		    ans += withOlds;
		}
	    }
	    else 
	    {
		if(mustInA.empty())
		{
		    ans += withOlds;
		}
	    }
	}
	cout << "Case #" << te << ": " << ans << endl;
    }
    return 0;
}
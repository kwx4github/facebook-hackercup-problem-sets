#include <iostream>
#include <map>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long int64;
int64 Board1[1000005],Board2[1000005];
int N,M;
struct XD{
    int64 pos;
    int64 val;
    XD(int64 _p,int64 _v){
        pos = _p;
        val = _v;
    }
};
vector<XD> v1,v2;

void read();
void solve(int);

map<int64,int> m1,m2;
map<int64,int>::iterator it,it2,it3;

int main (){
    int Z;
    cin >> Z;
    for(int zi=1;zi<=Z;zi++){
        cin >> N >> M;
        read(),solve(zi);
    }
    return 0;
}

void read(){
    int64 x1,a1,b1,c1,r1,x2,a2,b2,c2,r2;
    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;
    Board1[0] = x1;
    Board2[0] = x2;
    for(int i=1;i<N || i < M;i++){
        if(i < N)
            Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1;
        if(i < M)
            Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2;
    }
    /*for(int i=0;i<N;i++)cout << " " << Board1[i];
    cout <<"\n";
    for(int i=0;i<M;i++)cout << " " << Board2[i];
    cout <<"\n";*/
}
void solve(int zi){
    int64 ans = 0;
    int p2,np2,p1,np1;
    m1.clear();
    m2.clear();
    v1.clear();
    v2.clear();
    for(int i=0;i<N;i++){
        it = m1.find(Board1[i]);
        if(it == m1.end()){
            v1.push_back(XD(i,Board1[i]));
            m1[Board1[i]] = int(v1.size())-1;

        }
    }
    for(int i=0;i<M;i++){
        it = m2.find(Board2[i]);
        if(it == m2.end()){
            v2.push_back(XD(i,Board2[i]));
            m2[Board2[i]] = int(v2.size())-1;

        }
    }
    v1.push_back(XD(N,-1));
    v2.push_back(XD(M,-2));
    p1 = 0;
    p2 = 0;
    //cout << "sz " << v1.size() << " " << v2.size() << "\n";
    while(p1 < int(v1.size())-1 || p2 < int(v2.size())-1){
        int flag = 1;
        np1 = p1;
        np2 = p2;
        it = m1.find(v2[p2].val);
        if(it == m1.end())break;
        int stop = it->second;
        while(np1 < stop){
            it2 = m2.find(v1[np1].val);
            if(it2 == m2.end()){
                flag = 0;
                break;
            }
            if(np2 < it2->second){
                while(np2 < it2->second){
                    it3 = m1.find(v2[np2].val);
                    if(it3 == m2.end()){
                        flag = 0;
                        break;
                    }
                    stop = max(stop,it3->second);
                    np2++;
                }
            }
            np1++;
        }
        //if(np1 < int(v1.size())-1)
        np1++;
        //if(np2 < int(v2.size())-1)
        np2++;
        p1 = np1;
        p2 = np2;
        ans += (v1[np1].pos - v1[np1-1].pos) * (v2[np2].pos - v2[np2-1].pos);
        //cout << "plus " << (v1[np1].pos - v1[np1-1].pos)  << " * " << (v2[np2].pos - v2[np2-1].pos) << "\n";
        //cout << "p1 "<< p1 <<" p2 "<< p2 <<"\n";
        if(flag == 0)break;
    }

    cout << "Case #" << zi << ": " << ans << "\n";

}

import java.io.PrintStream;
import java.io.File;
import java.util.*;

class A {
    Scanner in;
    PrintStream out;

    public static void main(String[] args) {
        A p = new A();
        p.init();
        p.run();
		p.exit();
    }

    void init() {
        try {
            in = new Scanner(System.in);
            out = new PrintStream(new File("A.out"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

	void exit() {
        in.close();
	    out.close();
		System.exit(0);
	}
	
	void debug(Object ...os) {
	    System.out.println(Arrays.deepToString(os));
	}
	
    void run() {
        int nCases = in.nextInt();
        debug("nCases: "+nCases);

        for (int i=1; i<=nCases; i++) {
            debug("running #"+i);
            String result = runOneCase();
			out.println("Case #"+i+": "+result);
			debug("Case #"+i+": "+result);
        }

        if (in.hasNext()) {
           debug("WARNING: has next");
        }
    }
    

    String runOneCase() {
        int n = in.nextInt();
        int m = in.nextInt();
        
        long x1 = in.nextInt();
        long a1 = in.nextInt();
        long b1 = in.nextInt();
        long c1 = in.nextInt();
        long r1 = in.nextInt();
        
        long x2 = in.nextInt();
        long a2 = in.nextInt();
        long b2 = in.nextInt();
        long c2 = in.nextInt();
        long r2 = in.nextInt();
        
        long[] board1 = new long[n];
        long[] board2 = new long[m];
        
        board1[0] = x1;
        board2[0] = x2;
        
        for (int i=1; i<Math.max(n, m); i++) {
            if (i<n) {
                board1[i] = (a1 * board1[(int)((i-1)%n)] + b1 * board2[(int)((i-1)%m)] + c1) % r1;
            }
            if (i<m) {
                board2[i] = (a2 * board1[(int)((i-1)%n)] + b2 * board2[(int)((i-1)%m)] + c2) % r2;
            }
        }

      //  debug(board1);
       // debug(board2);

        HashSet<Long> same = new HashSet<Long>();
        HashSet<Long> diff = new HashSet<Long>();
    
        long count = 0;
        
        for (int i=0, j=0; i<n && j<m; ) {
            int c = 0;
            while (j<m && same.contains(board2[j])) {
                j++;
                c++;
            }
            while (i<n && same.contains(board1[i])) {
                i++;
                count += c;
            }
            if (i>=n || j>=m) break;
            
            while (true) {
                while (i<n && board1[i]!=board2[j]) {
                    if (!same.contains(board1[i])) diff.add(board1[i]);
                    i++;
                }
                if (i>=n) break;
                same.add(board1[i]);
                //debug("a", i, j, same, diff);
                
                while (j<m && diff.size()>0) {
                    if (diff.contains(board2[j])) {
                        diff.remove(board2[j]);
                        same.add(board2[j]);
                        if (diff.size()==0) break;
                    } else if (same.contains(board2[j])) {
                    
                    } else break;
                    j++;
                }
                //debug("b", i, j, same, diff);
                if (j>=m || diff.size()==0) break;
            }
            
            if (i>=n || j>=m) break;
                //debug("c", i, j, same, diff);
        }
        return ""+count;
    }
    
    
    
    
    
    
    
    
    
    
    
}

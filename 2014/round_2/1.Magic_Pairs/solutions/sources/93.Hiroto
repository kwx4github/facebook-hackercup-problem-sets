#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<string>
#include<utility>
#include<iostream>
#include<cmath>
using namespace std;

#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

#define ll long long
#define ull unsigned ll

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

#define D 1007

int main(){
  int i,j,k,l,m,n;
  int T, count = 0;
  ll res;
  static ll A[1100000], B[1100000];
  int As, Bs;

  ll x1,a1,b1,c1,r1;
  ll x2,a2,b2,c2,r2;
  ll x, y;
  static ull pw[2100000];
  ull hs1, hs2; int cnt1, cnt2;
  static int app1[2100000], app2[2100000];
  map<int,int> mp;

  pw[0] = 1;
  REP(i,1,2100000) pw[i] = pw[i-1] * D;

  scanf("%d",&T);
  while(T--){
    scanf("%d%d",&As,&Bs);
    scanf("%lld%lld%lld%lld%lld",&x1,&a1,&b1,&c1,&r1);
    scanf("%lld%lld%lld%lld%lld",&x2,&a2,&b2,&c2,&r2);

    A[0] = x1;
    B[0] = x2;
    k = MAX(As,Bs);
    REP(i,1,k){
      A[i] = (a1 * A[(i-1)%As] + b1 * B[(i-1)%Bs] + c1) % r1;
      B[i] = (a2 * A[(i-1)%As] + b2 * B[(i-1)%Bs] + c2) % r2;
    }

    mp.clear();
    rep(i,As){
      if(mp.count(A[i])==0){
        n = mp.size();
        mp[A[i]] = n;
      }
      A[i] = mp[A[i]];
    }
    rep(i,Bs){
      if(mp.count(B[i])==0){
        n = mp.size();
        mp[B[i]] = n;
      }
      B[i] = mp[B[i]];
    }

    n = mp.size() + 10;
    hs1 = hs2 = cnt1 = cnt2 = 0;
    rep(i,n) app1[i] = app2[i] = 0;
    A[As] = n+2;
    B[Bs] = n+3;

/*    rep(i,As) printf("%lld ",A[i]); puts("");
    rep(i,Bs) printf("%lld ",B[i]); puts("");*/

    res = -1;
    i = j = 0;
    for(;;){
      if(i > As || j > Bs) break;

/*      printf("%d %d : cnt %d %d : hs %llu %llu\n",i,j,cnt1,cnt2,hs1,hs2);*/
      
      if(cnt1 == cnt2 && hs1 == hs2){
        x = y = 0;
        while(i <= As){
          x++;
          if(app1[A[i]]){ i++; continue; }
          cnt1++;
          hs1 += pw[A[i]];
          app1[A[i]] = 1;
          i++;
          break;
        }
        while(j <= Bs){
          y++;
          if(app2[B[j]]){ j++; continue; }
          cnt2++;
          hs2 += pw[B[j]];
          app2[B[j]] = 1;
          j++;
          break;
        }
        res += x*y;
        continue;
      }
      if(cnt1 <= cnt2){
        if(!app1[A[i]]){
          cnt1++; hs1 += pw[A[i]]; app1[A[i]] = 1;
        }
        i++;
        continue;
      } else {
        if(!app2[B[j]]){
          cnt2++; hs2 += pw[B[j]]; app2[B[j]] = 1;
        }
        j++;
        continue;
      }
    }

    printf("Case #%d: %lld\n", ++count, res);
  }

  return 0;
}

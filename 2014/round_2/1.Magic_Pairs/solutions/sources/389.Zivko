import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.TreeSet;


public class MagicPairs {

  public static void main(String[] args) throws FileNotFoundException {
//    Scanner in = new Scanner(System.in);
//    PrintWriter out = new PrintWriter(System.out);

     Scanner in = new Scanner(new File("_magic_pairs.txt"));
     PrintWriter out = new PrintWriter(new File("magic_pairs_output.txt"));


    int T = in.nextInt();
    for (int t = 1; t <= T; t++) {
      int N = in.nextInt();
      int M = in.nextInt();

      long x1 = in.nextLong();
      long a1 = in.nextLong();
      long b1 = in.nextLong();
      long c1 = in.nextLong();
      long r1 = in.nextLong();

      long x2 = in.nextLong();
      long a2 = in.nextLong();
      long b2 = in.nextLong();
      long c2 = in.nextLong();
      long r2 = in.nextLong();

      long a[] = new long[N];
      long b[] = new long[M];

      a[0] = x1;
      b[0] = x2;

      for (int i = 1; i < Math.max(N, M); i++) {
        if (i < N)
          a[i] = (a1 * a[(i - 1) % N] + b1 * b[(i - 1) % M] + c1) % r1;
        if (i < M)
          b[i] = (a2 * a[(i - 1) % N] + b2 * b[(i - 1) % M] + c2) % r2;
      }


      out.printf("Case #%d: %s\n", t, solve(a, b));
      System.out.println("aaa");
    }

    out.close();
  }

  private static long solve(long[] a, long[] b) {
//    System.out.println(Arrays.toString(a));
//    System.out.println(Arrays.toString(b));
    
    
    TreeSet<Long> setA = new TreeSet<Long>();
    TreeSet<Long> setB = new TreeSet<Long>();


    ArrayList<Integer> newA = new ArrayList<Integer>();
    ArrayList<Integer> newB = new ArrayList<Integer>();

    for (int i = 0; i < a.length; i++) {
      if (!setA.contains(a[i])) {
        setA.add(a[i]);
        newA.add(i);
      }
    }

    for (int i = 0; i < b.length; i++) {
      if (!setB.contains(b[i])) {
        setB.add(b[i]);
        newB.add(i);
      }
    }

    setA.clear();
    setB.clear();

    TreeSet<Long> needsA = new TreeSet<Long>();
    TreeSet<Long> needsB = new TreeSet<Long>();

    long result = 0;

    int idxA = 0;
    int idxB = 0;

    boolean ok = true;

    while (true) {

      if (idxA < newA.size()) {
        long value = a[newA.get(idxA)];
        idxA++;
        needsB.add(value);
        
      } else if (idxB < newB.size()) {
        long value = b[newB.get(idxB)];
        idxB++;
        needsA.add(value);
      } else {
        break;
      }
//      System.out.println();
//      System.out.println("start " + idxA + " " + idxB);
      
      while(needsA.size() > 0 || needsB.size() > 0){
        
        boolean added = false;
        
        if(needsA.size() > 0){
          if(idxA < newA.size()){
            long value = a[newA.get(idxA++)];
            added = true;
            
            if(needsA.contains(value)){
              needsA.remove(value);
            }
            else {
              needsB.add(value);
            }
          }
        }
        
        if(needsB.size() > 0){
          if(idxB < newB.size()){
            long value = b[newB.get(idxB++)];
            added = true;
            
            if(needsB.contains(value)){
              needsB.remove(value);
            }
            else {
              needsA.add(value);
            }
          }
        }
        
        if(added == false){
          break;
        }
        
      }
      
      if(needsA.size() == 0 && needsB.size() == 0){
        long m1 = 0;
        long m2 = 0;
        
        if(idxA >= newA.size()){
          m1 = a.length - newA.get(idxA - 1);
        }
        else {
          m1 = newA.get(idxA) - newA.get(idxA - 1);
        }
        
        if(idxB >= newB.size()){
          m2 = b.length - newB.get(idxB - 1);
        }
        else {
          m2 = newB.get(idxB) - newB.get(idxB - 1);
        }
//        System.out.println("m12 " + m1 + " " + m2);
        
        result += m1 * m2;
      }
      
    }

    return result;
  }


}

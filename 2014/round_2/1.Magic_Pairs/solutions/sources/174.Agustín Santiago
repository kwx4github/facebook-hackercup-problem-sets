#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>

using namespace std;

#define forn(i,n) for(int i=0;i<(int)(n);i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n);i++)
#define dforn(i,n) for(int i=(n)-1;i>=0;i--)

#define forall(it,c) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define dforall(it,c) for(typeof((c).rbegin()) it = (c).rbegin(); it != (c).rend(); it++)

#define esta(x,c) ((c).find(x) != (c).end())

#define all(c) (c).begin(), (c).end()

typedef long long tint;
typedef pair<int,int> pint;

int main()
{    
    int TT; cin >> TT;
    forn(tt,TT)
    {
        tint S[2]; 
        cin >> S[0] >> S[1];
        const tint &N = S[0];
        const tint &M = S[1];
        tint x[2], a[2], b[2], c[2], r[2];
        forn(k,2) cin >> x[k] >> a[k] >> b[k] >> c[k] >> r[k];
        
        vector<tint> v[2];
        forn(k,2) v[k].push_back(x[k]);
        
        forsn(i, 1, max(M,N))
        forn(k,2)
        if (i < S[k])
            v[k].push_back(((a[k] * v[0][(i-1) % N]) % r[k] + 
                            (b[k] * v[1][(i-1) % M]) % r[k] + c[k]) % r[k]);
                            
        tint res = 0;
        set<tint> seen, seenIncluded;
        int includedLine = 0;
        int includedOrEqualLine = 0;
        forn(x, N)
        {
            seen.insert(v[0][x]);
            
            #define next v[1][includedOrEqualLine]
            while (includedOrEqualLine < M && esta(next, seen))
            {
                includedOrEqualLine++;
            }
            
            #define next v[1][includedLine]
            while (includedLine < M && esta(next, seen) && !(seen.size() == seenIncluded.size() + 1 && !esta(next, seenIncluded)))
            {
                seenIncluded.insert(next);
                includedLine++;
            }
            
            res += includedOrEqualLine - includedLine;
        }
        cout << "Case #" << tt+1 << ": " << res << endl;
    }
    return 0;
}


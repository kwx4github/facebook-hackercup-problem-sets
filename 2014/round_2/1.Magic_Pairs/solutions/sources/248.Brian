#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>
using namespace std;
int in(){int r=0,c;for(c=getchar_unlocked();c<=32;c=getchar_unlocked());if(c=='-') return -in();for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());return r;}

typedef long long ll;
typedef unordered_set<ll> uset;
//*typedef unordered_map<ll> umap;


int brd[2][1010000];

void solve(){
  int N = in();
  int M = in();
  
  ll x1 = in();
  ll a1 = in();
  ll b1 = in();
  ll c1 = in();
  ll r1 = in();
  
  ll x2 = in();
  ll a2 = in();
  ll b2 = in();
  ll c2 = in();
  ll r2 = in();
  
  
  int i;
  
  brd[0][0] = x1;
  brd[1][0] = x2;
  
  for(i=1;i<max(N,M);i++){
    brd[0][i]= (a1*brd[0][(i-1)%N] % r1 + b1 * brd[1][(i-1)%M] % r1+ c1) % r1;
    brd[1][i]= (a2*brd[0][(i-1)%N] % r2 + b2 * brd[1][(i-1)%M] % r2+ c2) % r2;
  }
  
  cerr << endl;
  for(i=0;i<N;i++) cerr << brd[0][i] << " "; cerr << endl;
  for(i=0;i<M;i++) cerr << brd[1][i] << " "; cerr << endl;
  
  
  uset j1[2];
  uset bt;
  
  int lim[2];
  lim[0] = N;
  lim[1] = M;
  
  int ptr[2];
  ptr[0]=0;
  ptr[1]=0;
  
  ll ans = 0;
  
  ll cnt1 = 0;
  ll cnt2 = 0;
  
  while(ptr[0] < N && ptr[1] < M){
    
    j1[0].insert(brd[0][ptr[0]]);
    ptr[0]++;
    int cur = 0;
    
    while(j1[0].size()>0 || j1[1].size()>0){
      cur = 1-cur;
      if(ptr[cur]==lim[cur]) break;
      
      while(ptr[cur]<lim[cur] && j1[1-cur].size()>0){
        while(ptr[cur]<lim[cur] && bt.find(brd[cur][ptr[cur]])!=bt.end()) ptr[cur]++;
        if(ptr[cur]==lim[cur]) break; //que pasa
        
        if(j1[1-cur].find(brd[cur][ptr[cur]])!=j1[1-cur].end()){
          j1[1-cur].erase(brd[cur][ptr[cur]]);
          bt.insert(brd[cur][ptr[cur]]);
          ptr[cur]++;
        }else{
          j1[cur].insert(brd[cur][ptr[cur]]);
          ptr[cur]++;
        }
      }
      
    }
    
    //*cerr << j1[0].size() << ' ' << j1[1].size() << endl;
    
    if(j1[0].size()>0 || j1[1].size()>0) break;
    cnt1 = 1;
    cnt2 = 1;
    
    
    while(ptr[0]<N && bt.find(brd[0][ptr[0]])!=bt.end()) cnt1++,ptr[0]++;
    while(ptr[1]<M && bt.find(brd[1][ptr[1]])!=bt.end()) cnt2++,ptr[1]++;
    
    ans+=cnt1*cnt2;
    
  }
  
  
  cout << ans << endl;
}

int main(){
  for(int i=0,T=in();i<T;i++){
    cerr << i << endl;
      cout << "Case #"<<i+1<<": ";
      solve();
    }
}

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define ALL(x) (x).begin(), (x).end()
#define EACH(itr,c) for(__typeof((c).begin()) itr=(c).begin(); itr!=(c).end(); itr++)  
#define FOR(i,b,e) for (int i=(int)(b); i<(int)(e); i++)
#define MP(x,y) make_pair(x,y)
#define REP(i,n) for(int i=0; i<(int)(n); i++)

int N, M;
long long bd1[1000010], bd2[1000010];
bool vis1[2000010], vis2[2000010];
pair<long long, long long> hash1[1000010], hash2[1000010];
long long rx[2000010], ry[2000010];

void solve() {
    cin >> N >> M;
    int x1, a1, b1, c1, r1;
    int x2, a2, b2, c2, r2;

    cin >> x1 >> a1 >> b1 >> c1 >> r1;
    cin >> x2 >> a2 >> b2 >> c2 >> r2;

    bd1[0] = x1;
    bd2[0] = x2;
    FOR (i, 1, max(N, M)) {
        bd1[i] = (a1 * bd1[(i-1) % N] + b1 * bd2[(i-1) % M] + c1) % r1;
        bd2[i] = (a2 * bd1[(i-1) % N] + b2 * bd2[(i-1) % M] + c2) % r2;
    }

    // compress axis
    vector<long long> tmp(N+M);
    REP (i, N) tmp[i] = bd1[i];
    REP (i, M) tmp[N+i] = bd2[i];
    sort(tmp.begin(), tmp.end());
    tmp.erase(unique(tmp.begin(), tmp.end()), tmp.end());

    REP (i, N) bd1[i] = lower_bound(tmp.begin(), tmp.end(), bd1[i]) - tmp.begin();
    REP (i, M) bd2[i] = lower_bound(tmp.begin(), tmp.end(), bd2[i]) - tmp.begin();

    memset(vis1, 0, sizeof(vis1));
    memset(vis2, 0, sizeof(vis2));
    
    hash1[0].first = hash1[0].second = 0;
    REP (i, N) {
        hash1[i+1] = hash1[i];
        if (!vis1[bd1[i]]) {
            vis1[bd1[i]] = true;
            hash1[i+1].first ^= rx[bd1[i]];
            hash1[i+1].second ^= ry[bd1[i]];
        }
    }

    hash2[0].first = hash2[0].second = 0;
    REP (i, M) {
        hash2[i+1] = hash2[i];
        if (!vis2[bd2[i]]) {
            vis2[bd2[i]] = true;
            hash2[i+1].first ^= rx[bd2[i]];
            hash2[i+1].second ^= ry[bd2[i]];
        }
    }
    
    long long ret = 0;
    sort(hash2+1, hash2+1+M);
    REP (i, N) {
        ret += upper_bound(hash2+1, hash2+1+M, hash1[i+1]) 
            - lower_bound(hash2+1, hash2+1+M, hash1[i+1]);
    }

    cout << ret << endl;
}

void init() {
    srand(time(NULL));
    REP (i, 2000010) {
        rx[i] = (long long)rand() * rand();
        ry[i] = (long long)rand() * rand();
    }
}

int main() {
    ios_base::sync_with_stdio(0);

    init();
    int T;
    cin >> T;
    REP (i, T) {
        cerr << "Case #" << i+1 << ": " << endl;
        cout << "Case #" << i+1 << ": ";
        solve();
    }

    return 0;
}

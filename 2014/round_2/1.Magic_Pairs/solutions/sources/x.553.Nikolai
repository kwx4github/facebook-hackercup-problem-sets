#include <iostream>
#include <stdio.h>
#include <string>
#include <string.h>
#include <math.h>
#include <vector>
#include <stdlib.h>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
#include <ctime>
#include <queue>
#include <deque>
#include <memory.h>
#include <complex>
#include <numeric>

#define mp make_pair
#define pb push_back
#define fi first
#define se second

#define INF (1000000000)
#define LINF (1000000000000000000ll)
#define EPS (1e-9)

#define MOD 1000000007

#define NAME "test"
#ifndef NAME
    #error Write problem name!
#endif

using namespace std;

typedef long long li;
typedef unsigned long long uli;

li gcd(li x, li y){
    if (y == 0)
        return x;
    else
        return gcd(y, x % y);
}

li lcm(li x, li y){
    return x / gcd(x, y) * y;
}

li binpow(li a, li p){
    if (!p)
        return 1;
    li g = binpow(a, p >> 1);
    if (p % 2 == 0)
        return (g * g) % MOD;
    else
        return (((g * g) % MOD) * a) % MOD;
}

li rev(li n){
    return binpow(n, (li)MOD - 2LL);
}

void solve(int test_number);

int main() {
#ifdef _GEANY
    assert(freopen(NAME ".in", "r", stdin));
    assert(freopen(NAME ".out", "w", stdout));
#endif
    cout.setf(ios::fixed);
    cout.precision(20);
    cerr.setf(ios::fixed);
    cerr.precision(3);
    int n = 1;
    cin >> n;
    for (int i = 0; i < n; ++i)
        solve(i + 1);
}

int n, m;
int a[1001000];
int b[1001000];
set<int> qa, qb;
set<int> sa, sb;
int cura, curb;

bool balance(){
    while (!sa.empty()){
        if (curb == m)
            return false;
        int cur_elem = b[curb];
        qb.insert(cur_elem);
        if (sa.count(cur_elem)){
            sa.erase(cur_elem);
        } else {
            if (!qa.count(cur_elem))
                sb.insert(cur_elem);
        }
        curb++;
    }
    while (!sb.empty()){
        if (cura == n)
            return false;
        int cur_elem = a[cura];
        qa.insert(cur_elem);
        if (sb.count(cur_elem)){
            sb.erase(cur_elem);
        } else {
            if (!qb.count(cur_elem))
                sa.insert(cur_elem);
        }
        cura++;
    }
    if (sa.empty() && sb.empty())
        return true;
    else
        return balance();
}

void solve(int test_number) {
    cin >> n >> m;
    qa.clear();
    qb.clear();
    sa.clear();
    sb.clear();

    int xa, aa, ba, ca, ra;
    int xb, ab, bb, cb, rb;
    cin >> xa >> aa >> ba >> ca >> ra;
    cin >> xb >> ab >> bb >> cb >> rb;
    a[0] = xa;
    b[0] = xb;
    for (int i = 1; i < max(n, m); i++){
        if (i < n)
            a[i] = (aa * a[(i - 1) % n] + ba * b[(i - 1) % m] + ca) % ra;
        if (i < m)
            b[i] = (ba * a[(i - 1) % n] + bb * b[(i - 1) % m] + cb) % rb;
    }
    //for (int i = 0; i < n; i++)
        //cout << a[i] << ' ';
    //cout << endl;
    //for (int i = 0; i < m; i++)
        //cout << b[i] << ' ';
    //cout << endl;
    
    li res = 0;
    curb = 0;
    cura = 0;
    int beg = 0;
    while (true){
        //cout << cura << ' ' << curb << endl;
        int la = cura;
        int lb = curb;
        while (qa.count(a[cura]) && cura != n){
            cura++;
            if (cura == n)
                break;
        }
        while (qb.count(b[curb]) && curb != m){
            curb++;
            if (curb == m)
                break;
        }
        if (beg){
            res += (li)(cura - la + 1) * (li)(curb - lb + 1);
            //cout << la << ' ' << cura << " - " << lb << ' ' << curb << endl;
        }

        if (cura == n)
            break;
        if (curb == m)
            break;
        beg++;
        qa.insert(a[cura]);
        sa.insert(a[cura]);
        cura++;
        if (!balance())
            break;;
    }
    cout << "Case #" << test_number << ": " << res << endl;
}


import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Locale;
import java.util.InputMismatchException;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.File;
import java.io.Writer;
import java.util.StringTokenizer;
import java.io.FilenameFilter;
import java.util.HashSet;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author RiaD
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = ".*magic.*pairs.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("magicpairs.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Reader in = new Reader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		MagicPairs solver = new MagicPairs();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class MagicPairs {
    public void solve(int testNumber, Reader in, OutputWriter out) {
        int n = in.nextInt();
        int m = in.nextInt();
        long x1 = in.nextLong(); 
        long a1 = in.nextLong(); 
        long b1 = in.nextLong(); 
        long c1 = in.nextLong(); 
        long r1 = in.nextLong();
        long x2 = in.nextLong();
        long a2 = in.nextLong();
        long b2 = in.nextLong();
        long c2 = in.nextLong();
        long r2 = in.nextLong();
        long[] board1 = new long[n];
        long[] board2 = new long[m];
        board1[0] = x1;
        board2[0] = x2;
        for(int i = 1; i < n || i < m; ++i) {
            if(i < n) {
                board1[i] = (a1 * board1[(i-1) % n] + b1 * board2[(i-1) % m] + c1) % r1;
            }
            if(i < m) {
                board2[i] = (a2 * board1[(i-1) % n] + b2 * board2[(i-1) % m] + c2) % r2;
            }
        }

        HashSet<Long> colorsInFirst = new HashSet<Long>();
        HashSet<Long> colorsInSecond = new HashSet<Long>();
        int sameSetSince = 0;
        int badElemSince = 0;
        long ans = 0;
        loop: for(int i = 0; i < n; ++i) {
            if(colorsInFirst.contains(board1[i])) {
                ans += badElemSince - sameSetSince;
                continue;
            }
            colorsInFirst.add(board1[i]);
            sameSetSince = badElemSince;
            boolean sameSetSinceSet = false;
            while (badElemSince < m) {
                if(!colorsInFirst.contains(board2[badElemSince])) {
                    break;
                }
                colorsInSecond.add(board2[badElemSince]);
                if(colorsInSecond.size() == colorsInFirst.size() && !sameSetSinceSet) {
                    sameSetSinceSet = true;
                    sameSetSince = badElemSince;
                }
                ++badElemSince;
            }
            if(!sameSetSinceSet) {
                sameSetSince = badElemSince;
            }
            else
                ans += badElemSince - sameSetSince;
        }
        out.println("Case #" + testNumber + ": " + ans);

    }
}

class Reader {
    private BufferedReader reader;
    private StringTokenizer tokenizer;

    public Reader(BufferedReader reader) {
        this.reader = reader;
    }

    public Reader(InputStream stream) {
        this(new BufferedReader(new InputStreamReader(stream)));
    }

    public String nextString() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(readLine());
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(nextString());
    }

    public long nextLong() {
        return Long.parseLong(nextString());
    }

    public String next() {
        return nextString();
    }

    private String readLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}

class OutputWriter extends PrintWriter {

	public OutputWriter(OutputStream out) {
		super(out);
	}

	public OutputWriter(java.io.Writer writer){
		super(writer);
	}

	}


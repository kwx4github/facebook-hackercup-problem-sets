import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeSet;


public class MagicPairs {

	static StringTokenizer st;
	static BufferedReader br;
	static PrintWriter pw;
	
	public static void main(String[] args) throws IOException{
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		int test = nextInt();
		for (int t = 1; t <= test; t++) {
			int n = nextInt();
			int m = nextInt();
			long x1 = nextLong();
			long a1 = nextLong();
			long b1 = nextLong();
			long c1 = nextLong();
			long r1 = nextLong();
			long x2 = nextLong();
			long a2 = nextLong();
			long b2 = nextLong();
			long c2 = nextLong();
			long r2 = nextLong();
			long[]mas1 = new long[n],mas2 = new long[m];
			mas1[0] = x1;
			mas2[0] = x2;
			for (int i = 1; i < n; i++) {
				if (i < n) {
					mas1[i] = (a1 * mas1[(i-1) % n] + b1 * mas2[(i-1) % m] + c1) % r1;
				}
				if (i < m) {
					mas2[i] = (a2 * mas1[(i-1) % n] + b2 * mas2[(i-1) % m] + c2) % r2;
				}
			}
			Set<Integer> set = new TreeSet<Integer>();
			Map<Long, Integer> map = new HashMap<Long, Integer>();
			long hash1 = 0;
			long p = (long) (1e9+7);
			for (int i = 0; i < n; i++) {
				if (!set.contains((int)mas1[i])) {
					set.add((int) mas1[i]);
					hash1 += binpow(p, mas1[i]);
				}
				if (!map.containsKey(hash1))
					map.put(hash1, 1);
				else
					map.put(hash1, map.get(hash1)+1);
			}
			set.clear();
			long hash2 = 0;
			long ans = 0;
			for (int i = 0; i < m; i++) {
				if (!set.contains((int)mas2[i])) {
					set.add((int) mas2[i]);
					hash2 += binpow(p, mas2[i]);
				}
				if (map.containsKey(hash2))
					ans += map.get(hash2);
			}
			pw.println("Case #"+t+": "+ans);
		}
		pw.close();
	}

	private static long binpow(long a, long n) {
		long res = 1;
		while (n > 0) {
			if ((n % 2)==1)
				res = res * a;
			n >>= 1;
			a = a*a;
		}
		return res;
	}

	private static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}
	private static long nextLong() throws IOException {
		return Long.parseLong(next());
	}
	private static double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	private static String next() throws IOException{
		while (st==null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine());
		return st.nextToken();
	}

}

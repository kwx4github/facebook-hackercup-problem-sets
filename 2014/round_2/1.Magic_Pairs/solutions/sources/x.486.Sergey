package facebook2014.round2;

import java.io.*;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class MagicPairs {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter writer = new PrintWriter(System.out);
    StringTokenizer stringTokenizer;

    MagicPairs() throws IOException {
        reader = new BufferedReader(new FileReader("_magic_pairs.txt"));
        writer = new PrintWriter(new FileWriter("output.txt"));
    }

    String next() throws IOException {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            stringTokenizer = new StringTokenizer(reader.readLine());
        }
        return stringTokenizer.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }


    void solve(int testNumber) throws IOException {
        writer.printf("Case #%d: ", testNumber);
        int n = nextInt();
        int m = nextInt();
        int x1 = nextInt();
        int a1 = nextInt();
        int b1 = nextInt();
        int c1 = nextInt();
        int r1 = nextInt();
        int x2 = nextInt();
        int a2 = nextInt();
        int b2 = nextInt();
        int c2 = nextInt();
        int r2 = nextInt();
        int i1 = 0, i2 = 0;
        int[] board1 = new int[n], board2 = new int[m];
        board1[0] = x1;
        board2[0] = x2;
        for (int i = 1; i < Math.max(m, n); i++) {
            if (i < n) {
                board1[i] = (int) ((1L * board1[i - 1] * a1 + 1L * b1 * board2[(i - 1) % m] + c1) % r1);
            }
            if (i < m) {
                board2[i] = (int) ((1L * board1[(i - 1) % n] * a2 + 1L * b2 * board2[(i - 1) % m] + c2) % r2);
            }
        }
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        Set<Integer> lacks1 = new HashSet<>(), lacks2 = new HashSet<>();
        long ans = -1;
        while (i1 < n && i2 < m) {
            int j1 = i1;
            int j2 = i2;
            while (j2 < m && set1.contains(board2[j2])) j2++;
            while (j1 < n && set2.contains(board1[j1])) j1++;
            ans += 1L * (j2 - i2 + 1) * (j1 - i1 + 1);
            i1 = j1;
            i2 = j2;
            if(i1 == n || i2 == m) break;
            lacks1.add(board2[i2++]);
            set2.add(board2[i2 - 1]);
            while ((!lacks1.isEmpty() || !lacks2.isEmpty()) && (i1 < n || i2 < m)) {
                if (!lacks1.isEmpty()) {
                    while (i1 < n) {
                        int x = board1[i1++];
                        set1.add(x);
                        if (lacks1.contains(x)) {
                            lacks1.remove(x);
                            break;
                        }
                        if (!set2.contains(x)) {
                            lacks2.add(x);
                        }
                    }

                }
                if (!lacks2.isEmpty()) {
                    while (i2 < m) {
                        int y = board2[i2++];
                        set2.add(y);
                        if (lacks2.contains(y)) {
                            lacks2.remove(y);
                            break;
                        }
                        if (!set1.contains(y)) {
                            lacks1.add(y);
                        }
                    }
                }
            }
        }
        if (lacks1.isEmpty() && lacks2.isEmpty()) {
            ans++;
            while(i1 < n && set1.contains(board1[i1++])) ans++;
            while(i2 < m && set2.contains(board2[i2++])) ans++;
        }
        writer.println(ans);
    }

    void solve() throws IOException {
        int numberOfTests = nextInt();
        for (int i = 1; i <= numberOfTests; i++) {
            solve(i);
        }
        writer.flush();
        writer.close();
    }

    public static void main(String[] args) throws IOException {
        new MagicPairs().solve();
    }
}
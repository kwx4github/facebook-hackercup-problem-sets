#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define N 1000005
#define LLD long long
using namespace std;

int n, m, a[N], b[N], d[N+N];
char A[N+N], B[N+N];

void gen(){
	LLD x1, a1, b1, c1, r1;
	LLD x2, a2, b2, c2, r2;
	scanf("%lld%lld%lld%lld%lld", &x1, &a1, &b1, &c1, &r1);
	scanf("%lld%lld%lld%lld%lld", &x2, &a2, &b2, &c2, &r2);
	a[0] = x1;
	b[0] = x2;
	FOR(i,1,max(n,m)){
		a[i] = (int)((a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1);
		b[i] = (int)((a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2);
	}
	
	int t = 0;
	FOR(i,0,n) d[t++] = a[i];
	FOR(i,0,m) d[t++] = b[i];
	sort(d, d + t);
	t = unique(d, d + t) - d;
	FOR(i,0,n) a[i] = lower_bound(d, d + t, a[i]) - d;
	FOR(i,0,m) b[i] = lower_bound(d, d + t, b[i]) - d;
}

void solve(int tc){
	scanf("%d%d", &n, &m);
	gen();
//	FOR(i,0,n) printf("%d ", a[i]); puts("");
//	FOR(i,0,m) printf("%d ", b[i]);

	int ca = 0, cb = 0;
	int ptr = -1;
	LLD ret = 0;
	LLD cur;

	CLR(A, 0);
	CLR(B, 0);
	FOR(i,0,n){
		if (!A[a[i]]){
			A[a[i]] = 1;
			++ca;
			if (!B[a[i]]){
				while (ptr + 1 < m){
					++ptr;
					if (!B[b[ptr]]) ++cb;
					B[b[ptr]] = 1;
					if (B[a[i]]) break;
				}
				if (!B[a[i]]) break;
			}
			if (ca == cb){
				cur = 1;
				while (ptr + 1 < m && B[b[ptr + 1]]) ++ptr, ++cur;
			}
			else cur = 0;
		}
		ret += cur;
	}

	printf("Case #%d: %lld\n", tc, ret);
}

int main(){
	int tc;
	scanf("%d", &tc);
	FOE(i,1,tc) solve(i);
	return 0;
}

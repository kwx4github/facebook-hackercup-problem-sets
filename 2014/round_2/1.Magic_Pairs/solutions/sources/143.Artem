import java.io.*;
import java.util.*;

public class MagicPairs {

	FastScanner in;
	PrintWriter out;

	void solve() {
		int n = in.nextInt(), m = in.nextInt();
		long x1 = in.nextInt(), a1 = in.nextInt(), b1 = in.nextInt(), c1 = in
				.nextInt(), r1 = in.nextInt();
		long x2 = in.nextInt(), a2 = in.nextInt(), b2 = in.nextInt(), c2 = in
				.nextInt(), r2 = in.nextInt();
		
		int[] board1 = new int[n], board2 = new int[m];
		
		board1[0] = (int) x1;
		board2[0] = (int) x2;
		
		for (int i = 1; i < Math.max(n, m); i++) {
			if (i < n) {
				board1[i] = (int) ((a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1);
			}
			if (i < m) {
				board2[i] = (int) ((a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2);
			}
		}
		
		HashMap<Integer, Long> random = new HashMap<>();
		Random rng = new Random(123);
		for (int i = 0; i < n; i++) {
			int col = board1[i];
			if (!random.containsKey(col)) {
				random.put(col, rng.nextLong());
			}
		}
		for (int i = 0; i < m; i++) {
			int col = board2[i];
			if (!random.containsKey(col)) {
				random.put(col, rng.nextLong());
			}
		}
		
		
		Map<Long, Integer> hash1 = getHash(board1, random),
				hash2 = getHash(board2, random);
		
		long result = 0;
		for (Map.Entry<Long, Integer> entry : hash1.entrySet()) {
			long hash = entry.getKey();
			int count = entry.getValue();
			if (hash2.containsKey(hash)){ 
				result += 1L * count * hash2.get(hash);
			}
		}
		out.println(result);
	}
	
	Map<Long, Integer> getHash(int[] a, Map<Integer, Long> random) {
		HashMap<Long, Integer> ans = new HashMap<>();
		HashSet<Integer> curSet = new HashSet<>();
		long hash = 0;
		for (int i : a) {
			if (!curSet.contains(i)) {
				curSet.add(i);
				hash ^= random.get(i);
			}
			if (!ans.containsKey(hash)) {
				ans.put(hash, 1);
			} else {
				ans.put(hash, ans.get(hash) + 1);
			}
		}
		return ans;
	}

	void run() {
		try {
			in = new FastScanner("input.txt");
			out = new PrintWriter("output.txt");
			int tests = in.nextInt();
			for (int i = 1; i <= tests; i++) {
				out.print(String.format("Case #%d: ", i));
				solve();
				System.err.println(i);
			}
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(String s) {
			try {
				br = new BufferedReader(new FileReader(s));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String nextToken() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(nextToken());
		}

		long nextLong() {
			return Long.parseLong(nextToken());
		}

		double nextDouble() {
			return Double.parseDouble(nextToken());
		}
	}

	public static void main(String[] args) {
		new MagicPairs().run();
	}
}

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <ext/rope>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, double> pid;
typedef pair<double, int> pdi;

const int INF = 0x3f3f3f3f;
const int MAXN = 1000000;
const int MAXM = 100;
const int MOD = 1000000007;
const ll INFLL = 0x3f3f3f3f3f3f3f3fLL;
const double EPS = 1e-8;
const double PI = acos(-1.0);

#define DEBUG(args...) fprintf(stderr, args)
#define all(c) (c).begin(), (c).end()
#define pb push_back

template<typename U, typename V> void add(U& ret, const V& val) { ret = (ll)(ret + val) % MOD; }
template<typename U, typename V> void chkmax(U& ret, const V& val) { if (ret < val) { ret = val; } }
template<typename U, typename V> void chkmin(U& ret, const V& val) { if (val < ret) { ret = val; } }
template<typename T> T gcd(T a, T b) { return a == 0 ? b : gcd(b % a, a); }
template<typename T> T lcm(T a, T b) { return a / gcd(a, b) * b; }

int n, m;
int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
int a[MAXN], b[MAXN];
ll res;

void init() {
}

void input() {
    scanf("%d%d", &n, &m);
    scanf("%d%d%d%d%d", &x1, &a1, &b1, &c1, &r1);
    scanf("%d%d%d%d%d", &x2, &a2, &b2, &c2, &r2);
}

void solve() {
    a[0] = x1;
    b[0] = x2;
    for (int i = 1; i < n || i < m; ++i) {
        if (i < n) {
            a[i] = ((ll)a1 * a[(i - 1) % n] + (ll)b1 * b[(i - 1) % m] + c1) % r1;
        }
        if (i < m) {
            b[i] = ((ll)a2 * a[(i - 1) % n] + (ll)b2 * b[(i - 1) % m] + c2) % r2;
        }
    }

    res = 0;
    int only1 = 0, only2 = 0;
    set<int> s1, s2;
    for (int i = 0, j = 0; i < n && j < m; ) {
        int ci = i, cj = j;
        s1.insert(a[i]);
        s2.insert(b[j]);
        if (a[i] != b[j]) {
            if (s1.find(b[j]) != s1.end()) {
                --only1;
            } else {
                ++only2;
            }
            if (s2.find(a[i]) != s2.end()) {
                --only2;
            } else {
                ++only1;
            }
        }
        assert(only1 >= 0);
        assert(only2 >= 0);
        for (; i < n && s1.find(a[i]) != s1.end(); ++i);
        for (; j < m && s2.find(b[j]) != s2.end(); ++j);
        if (only1 == 0 && only2 == 0) {
        //if (s1 == s2) {
            res += (ll)(i - ci) * (j - cj);
        }
    }
}


int main(int argc, char** argv) {
    int totalCaseNumber = 1;

    init();

    scanf("%d", &totalCaseNumber);
    for (int caseNum = 1; caseNum <= totalCaseNumber; ++caseNum) {
        input();
        solve();
        printf("Case #%d: %lld\n", caseNum, res);
    }

    return 0;
}

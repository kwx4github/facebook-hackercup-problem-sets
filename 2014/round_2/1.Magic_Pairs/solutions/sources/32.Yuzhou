#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <ctime>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <sstream>
#include <iostream>
#include <numeric>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;

#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define N 1000010

set<int> A, B, C; 
int n, m, a[N], b[N]; 

int main()
{
	int _; 
	scanf("%d", &_); 
	for (int __ = 1; __ <= _; __ ++) {
		int x1, x2, a1, a2, b1, b2, c1, c2, r1, r2; 
		scanf("%d%d%d%d%d%d%d%d%d%d%d%d", &n, &m, &x1, &a1, &b1, &c1, &r1, &x2, &a2, &b2, &c2, &r2); 
		a[0] = x1; b[0] = x2; 
		for (int i = 1; i < max(n, m); i ++) {
			a[i] = ((ll)a[(i-1)%n]*a1%r1+(ll)b[(i-1)%m]*b1%r1+c1)%r1; 
			b[i] = ((ll)a[(i-1)%n]*a2%r2+(ll)b[(i-1)%m]*b2%r2+c2)%r2; 
		}
		
		//for (int i = 0; i < n; i ++) printf ("%d%c", a[i], i==n-1?'\n': ' '); 
		//for (int i = 0; i < m; i ++) printf ("%d%c", b[i], i==m-1?'\n': ' '); 
		
		A.clear(); B.clear(); 
		int le = 0, ri = 0; ll S = 0; 
		while (le < n || ri < m) {
			C.clear(); 
			if (le < n) {
				A.insert(a[le]);
				C.insert(a[le]); 
				le ++; 
			}
			if (ri < m) {
				B.insert(b[ri]); 
				C.insert(b[ri]); 
				ri ++; 
			}
			bool F = 1; 
			while (!C.empty()) {
				int x = *C.begin(); 
				C.erase(x); 
				if (A.find(x) == A.end()) {
					while (le < n) {
						A.insert(a[le]); 
						C.insert(a[le]); 
						le ++; 
						if (a[le-1] == x) break; 
					}
				}
				if (B.find(x) == B.end()) {
					while (ri < m) {
						B.insert(b[ri]); 
						C.insert(b[ri]); 
						ri ++; 
						if (b[ri-1] == x) break; 
					}
				}
				if (A.find(x) == A.end() || B.find(x) == B.end()) {
					F = 0; break; 
				}
			}
			if (!F) break; 
			int nl = 1, nr = 1; 
			while (le < n && A.find(a[le]) != A.end()) le ++, nl++; 
			while (ri < m && B.find(b[ri]) != B.end()) ri ++, nr++; 
			S += (ll)nl*nr; 
		}
		printf ("Case #%d: %I64d\n", __, S); 
	}
	return 0;
}

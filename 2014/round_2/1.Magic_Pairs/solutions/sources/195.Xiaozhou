#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <ctime>

#define inf 0x3f3f3f3f
#define Inf 0x3FFFFFFFFFFFFFFFLL
#define rep(i, n) for (int i = 0; i < (n); ++i)
#define Rep(i, n) for (int i = 1; i <= (n); ++i)
#define clr(x, a) memset(x, (a), sizeof x)
using namespace std;
typedef long long ll;
int const N = 1000100;
ll a[N], b[N];
map <ll, int> mp; int idx;
inline int getID(ll x) {
	if (mp.find(x) == mp.end()) mp[x] = ++idx;
	return mp[x];
}

bool vis1[N], vis2[N];

int main() {
	 freopen("_magic_pairs.txt", "r", stdin);
	 freopen("A_ans.txt", "w", stdout);
	int T, ca = 1;
	int n, m; ll x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;
	for (scanf("%d", &T); T--; ) {
		cerr<<T<<endl;
		cin >> n >> m;
		cin >> x1 >> a1 >> b1 >> c1 >> r1;
		cin >> x2 >> a2 >> b2 >> c2 >> r2;
		a[0] = x1, b[0] = x2;
		Rep(i, max(n, m) - 1) {
			if (i < n) a[i] = (a1 * a[(i-1) % n] + b1 * b[(i-1) % m] + c1) % r1;
			if (i < m) b[i] = (a2 * a[(i-1) % n] + b2 * b[(i-1) % m] + c2) % r2;
		}
		mp.clear(); idx = 0;
		rep(i, n) a[i] = getID(a[i]);
		rep(i, m) b[i] = getID(b[i]);
		//rep(i, n) cout << a[i] << " "; cout << endl;
		//rep(i, m) cout << b[i] << " "; cout << endl;
		ll ret = 0;
		clr(vis1, 0), clr(vis2, 0);
		int p1 = -1, p2 = -1;
		while (p1 + 1 < n && p2 + 1 < m) {
			++p1, ++p2;
			vis1[a[p1]] = 1;
			int c1 = 1, c2 = 0;
			while (!(c1 == 0 && c2 == 0)) {
				while (c1 != 0 && p2 < m) {
					if (vis1[b[p2]] && !vis2[b[p2]]) {
						--c1;
						vis2[b[p2]] = 1;
						if (c1 == 0) break;
					}
					if (!vis1[b[p2]] && !vis2[b[p2]])  {
						vis2[b[p2]] = 1;
						++c2;
					}
					++p2;
				}
				while (c2 != 0 && p1 < n) {
					if (vis2[a[p1]] && !vis1[a[p1]]) {
						--c2;
						vis1[a[p1]] = 1;
						if (c2 == 0) break;
					}
					if (!vis2[a[p1]] && !vis1[a[p1]]) {
						vis1[a[p1]] = 1;
						++c1;
					}
					++p1;
				}
				if (p1 >= n || p2 >= m) break;
			}
			if (c1 == 0 && c2 == 0) {
				while (p1 < n && vis1[a[p1]]) ++c1, ++p1; --p1;
				while (p2 < m && vis2[b[p2]]) ++c2, ++p2; --p2;
				ret += 1LL * c1 * c2;
			}
		}
		 printf("Case #%d: %I64d\n", ca++, ret);
	}
	return 0;
}


#include <cstdio>
#include <set>
#include <map>
#include <algorithm>

using namespace std;

int n, m;
long long x1, x2, a1, a2, b1, b2, c1, c2, r1, r2;

int board1[1000001];
int board2[1000001];

set<int> nums, marked;
map<int, int> idx;
int t[1000001];

int main() {
	int T;
	scanf("%d", &T);
	for (int cs = 1; cs <= T; ++cs) {
		scanf("%d %d", &n, &m);
		scanf("%lld %lld %lld %lld %lld", &x1, &a1, &b1, &c1, &r1);
		scanf("%lld %lld %lld %lld %lld", &x2, &a2, &b2, &c2, &r2);

		board1[0] = x1;
		board2[0] = x2;

		fill(t, t + n + 1, 0);
		nums.clear();
		idx.clear();
		marked.clear();

		t[1] = 1;
		nums.insert(x1);
		idx[x1] = 1;
		for (int i = 1; i < max(n, m); ++i) {
			if (i < n) {
				board1[i] = (a1 * board1[(i - 1) % n] + b1 * board2[(i - 1) % m] + c1) % r1;
				nums.insert(board1[i]);
				t[(int)nums.size()]++;
				if (idx.find(board1[i]) == idx.end()) {
					idx[board1[i]] = (int)nums.size();
				}
			}
			if (i < m) {
				board2[i] = (a2 * board1[(i - 1) % n] + b2 * board2[(i - 1) % m] + c2) % r2;
			}
		}

		long long sol = 0;
		int marked_max = 0;
		for (int i = 0; i < m; ++i) {
			if (idx.find(board2[i]) == idx.end()) {
				break;
			}
			marked.insert(board2[i]);
			marked_max = max(marked_max, idx[board2[i]]);
			if (marked.size() == marked_max) {
				sol += t[marked_max];
			}
		}
		printf("Case #%d: %lld\n", cs, sol);
	}
	return 0;
}

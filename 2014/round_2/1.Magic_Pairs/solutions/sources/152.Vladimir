#if 1
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <functional>
#include <cstring>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <ctime>
#include <cassert>
#include <sstream>
#include <iostream>
#include <bitset>

using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair<int , int> pii;
typedef vector <int> veci;
typedef vector <veci> graph;
const LD eps = 1e-9;
const LD pi = acos(-1.0);
const int inf = 1000 * 1000 * 1000;
const LL inf64 = LL(inf) * inf;

#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define iss istringstream
#define oss ostringstream
#define dbg(x) {cerr << #x << " = " << x << endl;}
#define dbgv(x) {cerr << #x << " ={"; for (int _i = 0; _i < x.size(); _i++) {if (_i) cerr << ", "; cerr << x[_i];} cerr << "}" << endl;}
#define NAME "problem"


vector<pii> find_groups(const vector<LL> &a)
{
	vector<pii> gr;
	vector<int> was(*max_element(a.begin(), a.end()) + 1);
	for(int i = 0; i < a.size(); ++i)
		if(!was[a[i]])
		{
			gr.pb(mp(i, a[i]));
			was[a[i]] = true;
		}
	gr.pb(mp(a.size(), -1));
	return gr;
}

void add(vector<int> &cnt, int &ones, int val)
{
	if(cnt[val] == 0) ++ones;
	if(cnt[val] == 1) --ones;
	cnt[val]++;
}

void solve()
{
// 	Board1[0] = x1
// Board2[0] = x2
// Board1[i] = (a1 * Board1[(i-1) % N] + b1 * Board2[(i-1) % M] + c1) % r1, for 0 < i < N
// Board2[i] = (a2 * Board1[(i-1) % N] + b2 * Board2[(i-1) % M] + c2) % r2, for 0 < i < M
// Input
// The first line of the input consists of a single integer T, the number of test cases. 
// Each test case starts with a line containing the integers N, M 
// The second line of each test case contains five integers x1, a1, b1, c1, r1
// The third line of each test case contains five integers x2, a2, b2, c2, r2

	int n, m;
	cin >> n >> m;
	LL x1, a1, b1, c1, r1;
	cin >> x1 >> a1 >> b1 >> c1 >> r1;
	LL x2, a2, b2, c2, r2;
	cin >> x2 >> a2 >> b2 >> c2 >> r2;
	vector<LL> a(n), b(m);
	a[0] = x1;
	b[0] = x2;
	for(int i = 1; i < n || i < m; ++i)
	{
		if(i < n)
			a[i] = (a1 * a[(i - 1) % n] + b1 * b[(i - 1) % m] + c1) % r1;
		if(i < m)
			b[i] = (a2 * a[(i - 1) % n] + b2 * b[(i - 1) % m] + c2) % r2;
	}

	vector<LL> all = a;
	all.insert(all.end(), b.begin(), b.end());
	sort(all.begin(), all.end());
	all.erase(unique(all.begin(), all.end()), all.end());
	for(int i = 0; i < n; ++i)
		a[i] = lower_bound(all.begin(), all.end(), a[i]) - all.begin();
	for(int i = 0; i < m; ++i)
		b[i] = lower_bound(all.begin(), all.end(), b[i]) - all.begin();

	vector< pii > gr_a = find_groups(a);
	vector< pii > gr_b = find_groups(b);

	vector<int> cnt(all.size());
	int max_gr = min((int)gr_a.size() - 1, (int)gr_b.size() - 1);
	int cnt_ones = 0;
	LL res = 0;
	for (int i = 0; i < max_gr; ++i)
	{
		int va = gr_a[i].Y, vb = gr_b[i].Y;
		add(cnt, cnt_ones, va);
		add(cnt, cnt_ones, vb);
		if(cnt_ones == 0)
		{
			LL sz_a = gr_a[i + 1].X - gr_a[i].X;
			LL sz_b = gr_b[i + 1].X - gr_b[i].X;
			res += sz_a * sz_b;
		}
	}
	cout << res << endl;
}

int main()
{
	//freopen("input.txt", "r", stdin); //freopen("output.txt", "w", stdout);
	//freopen(NAME ".in","r",stdin);freopen(NAME ".out","w",stdout);

	int tests;
	scanf("%d", &tests);
	string line;
	getline(cin, line);
	for(int test = 1; test <= tests; ++test)
	{
		cout << "Case #" << test << ": ";
		solve();
//		cout << endl;
	}

	return 0;
}
/*************************
*************************/
#endif

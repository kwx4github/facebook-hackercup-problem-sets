#include <iostream>
#include <string>
#include <string.h>
#include <set>
#include <vector>
#include <algorithm>
using namespace std;

int x[2], a[2], b[2], c[2], r[2];
int board[2][1000001];
int N, M;

int getElement(int boardNum, int pos)
{
    if (board[boardNum][pos] == -1)
    {
        board[boardNum][pos] = (a[boardNum] * getElement(0, (pos - 1) % N) +
            b[boardNum] * getElement(1, (pos - 1) % M) + c[boardNum]) % r[boardNum];
    }

    return board[boardNum][pos];
}

int main()
{
    int numOfTests;
    cin >> numOfTests;

    for (int test = 1; test <= numOfTests; test++)
    {
        cin >> N >> M;

        set<int> permitted;
        set<int> diff;

        memset(board, -1, sizeof(board));
        for (int i = 0; i < 2; ++i)
        {
            cin >> board[i][0] >> a[i] >> b[i] >> c[i] >> r[i];
        }

        long long res = 0, r2 = 0;
        int jpos = 0;

        for (int i = 0; i < N; ++i)
        {
            int el = getElement(0, i);
            while (i < N && permitted.find(el) != permitted.end())
            {
                res += r2;
                ++i;
                el = getElement(0, i);
            }

            permitted.insert(el);
            diff.insert(el);

            r2 = 0;
            while (jpos < M)
            {
                el = getElement(1, jpos);
                if (permitted.find(el) == permitted.end())
                {
                    break;
                }

                if (diff.find(el) != diff.end())
                {
                    diff.erase(el);
                }

                if (diff.empty())
                {
                    ++r2;
                }

                ++jpos;
            }
            res += r2;
        }

        cout << "Case #" << test << ": " << res << endl;
    }

    return 0;
}

#pragma comment(linker, "/STACK:60777216")  

#include <cassert>
#include<iostream>
#include<algorithm>
#include<cstdio>
#include<complex>
#include<vector>
#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<string>
#include<cstdlib>
#include<memory.h>
#include<ctime>
#include<bitset>
#include<fstream>
#include<queue>

using namespace std;


typedef long double ld;

typedef long long ll;
typedef pair<int, int>	pii;
typedef pair<ld, ld>	pdd;
typedef vector<int> vi;
typedef vector<ld> vd;
typedef pair<ll, ll> pl;

#define FOR(i,a,b)		for(int i=(a);i<(b);i++)
#define REP(i,n)		FOR(i,0,n)
#define SORT(v)			sort((v).begin(),(v).end())
#define UN(v)			SORT(v),(v).erase(unique((v).begin(),(v).end()),(v).end())
#define CL(a,b)			memset(a,b,sizeof a)
#define pb				push_back

int n, m;
int a[111111];
int b[111111];

struct Node{
	int l, r;
	Node *lf;
	Node *rg;
	int val;
	int add;
	Node(){ add=val=l = r = 0; lf = rg = 0; }
};

Node *root;

Node* buildTree(int l, int r){
	Node* curr = new Node();
	curr->l = l;
	curr->r = r;
	if (l != r){
		curr->lf = buildTree(l, (l + r) / 2);
		curr->rg = buildTree((l + r) / 2 + 1, r);
		curr->val = l;
	}
	else{
		curr->val = l;
	}
	return curr;
}


int getMin(Node *curr){ return curr->val + curr->add; }
void addValSeg(Node* curr, int from, int to, int add) {
	if (to < curr->l) return;
	if (from > curr->r) return;
	if (from <= curr->l && to >= curr->r) {
		curr->add += add;
		return;
	}
	addValSeg(curr->lf, from, to, add);
	addValSeg(curr->rg, from, to, add);
	curr->val = min(getMin(curr->lf), getMin(curr->rg));
}

ll solve(){
	ll res = 0;
	root = buildTree(0, n);
	vector<pii> v;
	REP(i, n) v.pb(pii(a[i], i));
	SORT(v);
	int pos = 0;
	for (int i = 0; i < m; ++i){
		while (pos < v.size() && v[pos].first <= b[i]){
			addValSeg(root, 0, v[pos].second, +1);
			addValSeg(root, v[pos].second + 1, n, -1);
			++pos;
		}
		res += getMin(root);
	}
	return res;
}


int c[111111];

ll sm1[1 << 20];
void addVal(int pos){
	pos += 1 << 19;
	while (pos) {
		sm1[pos]++; pos >>= 1;
	}
}
ll getSum(int p1){
	p1 += (1 << 19);
	int p2 = (1 << 19) - 1 + (1 << 19);
	ll res = 0;
	while (p1 <= p2){
		if (p1 & 1) res += sm1[p1];
		if (!(p2 & 1)) res += sm1[p2];
		p1 = (p1 + 1) >> 1;
		p2 = (p2 - 1) >> 1;
	}
	return res;
}

ll getInv(){
	CL(sm1, 0);
	vi x;
	REP(i, n)c[i] = a[i],x.pb(a[i]);
	UN(x);
	REP(i, n) c[i] = lower_bound(x.begin(), x.end(), c[i]) - x.begin();
	ll res = 0;
	REP(i, n){
		res += getSum(c[i]);
		addVal(c[i]);
	}
	return res;
}

int main(){
#ifdef LocalHost
	freopen("input.txt", "r", stdin);
	freopen("output.txt","w",stdout);
#endif

	int tc;
	cin >> tc;
	REP(TC, tc){
		cin >> n >> m;
		REP(i, n) scanf("%d", a + i);
		REP(i, m) scanf("%d", b + i);
		sort(b, b + m);
		ll res = getInv();
		res += solve();
		cout << "Case #"<<TC+1<<": " << res << endl;
	}
	
#ifdef LocalHost
	printf("TIME: %.3lf\n", ld(clock()) / CLOCKS_PER_SEC);
#endif 
	return 0;
}
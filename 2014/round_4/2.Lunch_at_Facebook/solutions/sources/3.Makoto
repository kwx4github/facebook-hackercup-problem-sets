#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;

#define T (1<<17)

int tree2[T];

void init(void){
	int i;
	REP(i,T) tree2[i] = 0;
}

void add(int pos, int val){
	for(int i=pos;i<T;i=((i)|(i+1))) tree2[i] += val;
}

int sum(int pos){
	int ans = 0;
	for(int i=pos;i>0;i=((i)&(i-1))) ans += tree2[i-1];
	return ans;
}

int N,M;
int a[100010],b[100010];
vector <pair <int, int> > v;

/*
int c[100010];

void add_query(int x){
	for(int i=x;i<N;i++) c[i] -= 2;
}

int min_query(void){
	int ans = 0;
	int i;
	REP(i,N) ans = min(ans, c[i]);
	return ans;
}
*/

struct node {ll add, max;};
node tree[2*T];

ll max_query(int L, int R, int id = 1, int low = 0, int high = T){
	if(L <= low && R >= high) return tree[id].max;
	int mid = (low + high) / 2;
	ll ans = 0;
	if(L < mid) ans = max(ans, max_query(L, R, 2*id, low, mid));
	if(R > mid) ans = max(ans, max_query(L, R, 2*id+1, mid, high));
	ans += tree[id].add;
	return ans;
}

void add_query(int L, int R, ll val, int id = 1, int low = 0, int high = T){
	if(L <= low && R >= high){
		tree[id].add += val;
		tree[id].max += val;
		return;
	}
	int mid = (low + high) / 2;
	if(L < mid) add_query(L, R, val, 2*id, low, mid);
	if(R > mid) add_query(L, R, val, 2*id+1, mid, high);
	tree[id].max = max(tree[2*id].max, tree[2*id+1].max) + tree[id].add;
}

void main2(void){
	int i,j;
	
	cin >> N >> M;
	REP(i,N) cin >> a[i];
	REP(i,M) cin >> b[i];
	
	sort(b, b+M);
	
	v.clear();
	REP(i,N) v.push_back(make_pair(a[i], i));
	sort(v.begin(),v.end());
	REP(i,N) a[v[i].second] = i;
	
	init();
	ll ans = (ll)N * (ll)(N - 1) / 2;
	REP(i,N){
		ans -= sum(a[i]);
		add(a[i], 1);
	}
	
	/*
	REP(i,N) c[i] = 1 + i;
	j = 0;
	REP(i,M){
		while(j < N && v[j].first < b[i]){
			add_query(v[j].second);
			j++;
		}
		int tmp = min_query() + j;
		ans += tmp;
	}
	*/
	
	REP(i,2*T) tree[i].add = tree[i].max = 0;
	REP(i,N) add_query(i, N, -1);
	j = 0;
	REP(i,M){
		while(j < N && v[j].first < b[i]){
			add_query(v[j].second, N, 2);
			j++;
		}
		ll tmp = -max_query(0, N) + j;
		ans += tmp;
	}
	
	cout << ans << endl;
}

int main(void){
	int TC,tc;
	cin >> TC;
	REP(tc,TC){
		printf("Case #%d: ", tc+1);
		main2();
	}
	return 0;
}

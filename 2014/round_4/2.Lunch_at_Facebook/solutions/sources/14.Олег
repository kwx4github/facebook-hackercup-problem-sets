#include <iostream>
#include <algorithm>
using namespace std;



const int ST = 18;//18;
const int LEVEL = (1 << ST);
const int TREE_SIZE = (1 << (ST + 1) );
const int inf = 1e9 + 100;

struct Node
{
	int value;
	int toAdd;
	int minValue, minPos;
	Node() : value(),  toAdd(), minValue(inf), minPos(-1) {}
	Node(int value, int pos) : value(value), toAdd(), minValue(value), minPos(pos) {}
};



Node tree[TREE_SIZE];

void push(Node &v, int x)
{
	v.minValue += v.toAdd;

	if (x * 2 < TREE_SIZE)
	{
		tree[x * 2].toAdd += v.toAdd;
		tree[x * 2 + 1].toAdd += v.toAdd;
	}
	v.toAdd = 0;
}
Node merge(Node l, Node r)
{
	Node ans = Node();
	if (l.minValue <= r.minValue)
	{
		ans.minValue = l.minValue;
		ans.minPos = l.minPos;
	}
	else
	{
		ans.minValue = r.minValue;
		ans.minPos = r.minPos;
	}
	return ans;
}

void addOnSegment(int v, int val, int l, int r, int tl, int tr)
{
	push(tree[v], v);
	if (r <= tl || l >= tr)
		return ;
	if (l <= tl && tr <= r)
	{
		tree[v].toAdd += val;
		push(tree[v], v);
		return ;
	}
	int tm = (tl + tr) / 2;
	addOnSegment(v * 2, val, l, r, tl, tm);
	addOnSegment(v * 2 + 1, val, l, r, tm, tr);
	tree[v] = merge(tree[2 * v], tree[2 * v + 1] );
}

void addOnSegment(int l, int r, int val)
{
	addOnSegment(1, val, l, r + 1, 0, LEVEL);
}



void setValue(int pos, int val)
{
	int v = pos + LEVEL;
	tree[v] = Node(val, pos);
	while (v != 1)
	{
		v /= 2;
		tree[v] = merge(tree[v * 2], tree[v * 2 + 1] );
	}
}

Node getMinOnSegment(int v, int l, int r, int tl, int tr)
{
	if (r <= tl || l >= tr)
		return Node();
	push(tree[v], v);
	if (l <= tl && tr <= r)
	{
		return tree[v];
	}
	int tm = (tl + tr) / 2;
	Node a = getMinOnSegment(v * 2, l, r, tl, tm);
	Node b = getMinOnSegment(v * 2 + 1, l, r, tm, tr);
	Node ans = merge(a, b);
	return ans;
}


Node getMinOnSegment(int l, int r)
{
	return getMinOnSegment(1, l, r + 1, 0, LEVEL);
}


const int maxn = 1e5 + 100;
int a[maxn], b[maxn];
pair <int, int> e[maxn];

void solve()
{
	for (int i = 1; i < TREE_SIZE; i++)
		tree[i] = Node();
	int n, m;
	scanf("%d%d", &n, &m);
	
	long long ans = 0;
	for (int i = 0; i < n; i++)
	{
		int x;
		setValue(i, 0);
		scanf("%d", &x);
		e[i] = make_pair(x, i);
	}
	
	sort(e, e + n);
	for (int i = 0; i < n; i++)
		b[e[i].second] = i;

	for (int i = 0; i < n; i++)
	{
		int cur = b[i];
		int x = getMinOnSegment(cur, cur).minValue;
		ans += x;
		addOnSegment(0, cur, 1);
	}


	
	for (int i = 1; i < TREE_SIZE; i++)
		tree[i] = Node();
	for (int i = 0; i <= n; i++)
		setValue(i, i);
	for (int i = 0; i < m; i++)
	{
		scanf("%d", &a[i] );
	}

	sort(a, a + m);
	int l = 0, epos = 0;

	for (int i = 0; i < m; i++)
	{
		int cur = a[i];
		while (epos < n && e[epos].first < cur)
		{
			int pos = e[epos].second;
			addOnSegment(0, pos, 1);
			addOnSegment(pos, n, -1);
			epos++;
		}

		Node x = getMinOnSegment(l, n);
		l = x.minPos;
		ans += x.minValue;
	}
	printf("%lld", ans);
}


int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	scanf("%d", &t);
	for (int i = 1; i <= t; i++)
	{
		fprintf(stderr, "Case #%d\n", i);
		printf("Case #%d: ", i);
		solve();
		printf("\n");
	}


	return 0;
}
#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstring>
#include<cstdio>
#include<iomanip>
#include<map>
#include<iostream>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>

#define FOR(i,a,b) for(int i=(a); i<=(b); ++i)
#define FORD(i,a,b) for(int i=(a); i>=(b); --i)
#define REP(i,n) for(int i=0; i<(n); ++i)
#define VAR(v,i) __typeof(i) v = (i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second
#define debug(x) { cerr << #x <<" = " << (x) << endl; }
#define debugv(x) { cerr << #x << " = "; FORE(it, x) cerr << *it << ", "; cerr << endl;  }
#define dprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef pair<int, int> PII;;
typedef vector<int> VI;
typedef long long LL;
typedef long double LD;
template<class C> void mini(C&a4, C b4) { a4 = min(a4,b4); }
template<class C> void maxi(C&a4, C b4) { a4 = max(a4,b4); }


template<class T1, class T2> ostream& operator<<(ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", "<< pair.Y << ")"; };

const int N = 1e5+1;
int in[N];

LL solve() {
  
    int n, m; scanf("%d %d", &n, &m);
    REP(i, n) scanf("%d", &in[i]);

    LL sum1 = 0, sum2 = 0;

#pragma omp parallel for reduction(+:sum1)
    REP(i, n) {
        FOR(j, i+1, n-1) if (in[i] > in[j]) ++sum1;
    }
#pragma omp parallel for reduction(+:sum2)
    REP(i, m) {
        int p;
        scanf("%d", &p);
        int lsmall = 0, rsmall = 0;
        REP(j, n) if (in[j] < p) ++rsmall;
        int best = rsmall;
        REP(j, n) {
            if (in[j] < p) {
                --rsmall;
                ++lsmall;
            }
            mini(best, rsmall + (j+1)-lsmall);
        }
        sum2 += best;
    }

    return sum1 + sum2;
}

int main() {
    int tt; scanf("%d", &tt);
    REP(i, tt) {
        printf("Case #%d: %lld\n", i+1, solve());
    }
    return 0;
}

#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1001001001
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define SZ(x) ((int)((x).size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define IOS ios_base::sync_with_stdio(0);

// zastąpić tym maina
// wypełnić readInput(), compute() i writeOutput(); zmienne definiować wewnątrz klasy Instance
// PARALLEL - czy ma odpalić testy równolegle, CORES - liczba rdzeni
// uwaga - wersja równoległa może potrzebować dużo pamięci! (T razy więcej)
//         mozna sobie z tym poradzić tworząc duże tablice dynamicznie dopiero w compute()
//         (bo naraz wykonywane są co najwyżej CORES=3 kopie compute())
//         (pamiętać o delete [] na koniec compute)
// linkować z pthreads

#define MAXX 524298
namespace rmq{
ll incr[MAXX];
pair<ll,int> minn[MAXX];
int n;

pair<ll,int> operator + (ll x, pair<ll,int> p) {
   return mp(p.fi + x, p.se);
}

void init (int v, int a, int b) {
   //DBG(v)DBG(mp(a,b))
   incr[v] = 0;
   if (a == b) {
      minn[v] = mp(0,a);
   } else {
      int mid = (a+b)/2;
      init(2*v, a, mid);
      init(2*v + 1, mid + 1, b);
      minn[v] = incr[v] + min(minn[2*v], minn[2*v + 1]);
   }
}

void init () {
   init(1,0,n-1);
}

//void init () { FOR(i,MAXX) { incr[i] = 0; minn[i] = mp(0,i); } }

int aw,bw,x; // temp

void zwieksz2 (int v, int a, int b) {
   if (aw > b || bw < a) return;
   if (a >= aw && b <= bw) {
      incr[v] += x;
      minn[v] = x + minn[v];
   } else {
      int mid = (a+b)/2;
      zwieksz2(2*v, a, mid);
      zwieksz2(2*v+1, mid+1, b);
      minn[v] = incr[v] + min(minn[2*v], minn[2*v + 1]);
   }
}

void zwieksz (int _aw, int _bw, int _x) {
   aw = _aw; bw = _bw; x = _x;
   zwieksz2(1,0,n-1);
}

pair<ll,int> getmin (int v, int a, int b) {
   if (aw > b || bw < a) return mp((ll)INF * INF, -1);
   if (a >= aw && b <= bw) {
      return minn[v];
   } else {
      int mid = (a+b)/2;
      return incr[v] + min(getmin(2*v, a, mid), getmin(2*v+1, mid+1, b));
   }
}

pair<ll,int> getmin (int _aw, int _bw) {
   aw = _aw; bw = _bw;
   return getmin(1,0,n-1);
}};

ll merge(int *a, int *b, int p, int q, int r) {
   int i = p, j = q+1, s = p, ile_druga = 0;
   ll wyn = 0;
   while (i <= q && j <= r) {
      if (a[i] <= a[j]) {
         b[s++] = a[i++];
         wyn += ile_druga; // tu sie zwieksza wynik
      } else {
         b[s++] = a[j++];
         ile_druga++;
      }
   }

   while (i <= q) {
      b[s++] = a[i++];
      wyn += ile_druga; // tu sie zwieksza wynik
   }
   while (j <= r) {
      b[s++] = a[j++];
   }

   REP(it,p,r) a[it] = b[it];
   return wyn;
}

ll mergesort(int *a, int *b, int p, int r) {
   ll wyn = 0;
   if (p == r) return wyn;
   int q = (p + r)/2;

   wyn += mergesort(a, b, p, q); // inwersje z lewej czesci
   wyn += mergesort(a, b, q + 1, r); // inwersje z prawej czesci
   return wyn + merge(a, b, p, q, r); // inwersje miedzy czesciami
}



int temp[MAXX];
ll policz_inwersje(int *a, int nn) { // liczba inwersji w a[0..n-1]
   return mergesort(a,temp,0,nn-1);
}

#include <pthread.h>
#include <semaphore.h>
#define PARALLEL 0
#define CORES 4
struct Instance {
   pthread_mutex_t finished;
   Instance() : finished(PTHREAD_MUTEX_INITIALIZER) { pthread_mutex_lock(&finished); }
   
   // define variables here
   int n,m;
   int a[MAXX], b[MAXX];
   vi after[MAXX];
   ll res;
   
   void readInput() { // should read input; will run sequentially
      cin >> n >> m;
      //DBG(n)
      FORI(i,n) cin >> a[i];
      FORI(j,m) cin >> b[j];
      sort(b+1,b+m+1);
   }
   
   void compute() { // should produce output and store it, not use IO; will run in parallel
      //DBG(n)
      rmq::n = n+3;
      rmq::init();
      //DBG(n)
      FORI(i,n) rmq::zwieksz(i,n,1);
      //DBG(n)
      
      vector<pii> v;
      FORI(i,n) {
         v.pb(mp(a[i],i));
      }
      sort(ALL(v));
      
      int nxt = 0;
      FORI(j,m) {
         while (nxt != n && v[nxt].fi <= b[j]) {
            rmq::zwieksz(v[nxt].se, n, -2);
            ++nxt;
         }
         pair<ll,int> p = rmq::getmin(0,n);
         after[p.se].pb(b[j]);
      }
      
      vi nowyciag;
      REP(i,0,n) {
         if (i > 0) nowyciag.pb(a[i]);
         FOREACH(it,after[i]) nowyciag.pb(*it);
      }
      //DBG(nowyciag)
      res = policz_inwersje(&nowyciag[0], SZ(nowyciag));
   }
   
   void writeOutput () { // should write stored output, without newline; will run sequentially
      cout << res;
   }
};

Instance *instances;
sem_t coreSemaphore;
pthread_mutex_t cerr_lock = PTHREAD_MUTEX_INITIALIZER;
int tests, finishedTests = 0;

void* runner (void* input) {
   int testno = *reinterpret_cast<int*>(input);
   sem_wait(&coreSemaphore);
   instances[testno].compute();
   pthread_mutex_lock(&cerr_lock);
   cerr << "test " << testno+1 << " is finished (" << ++finishedTests << "/" << tests << ")" << endl;
   pthread_mutex_unlock(&cerr_lock);
   pthread_mutex_unlock(&instances[testno].finished);
   sem_post(&coreSemaphore);
   return 0;
}

int main () {
   string pierwszalinia;
   getline(cin,pierwszalinia);
   tests = atoi(pierwszalinia.c_str());
   if (PARALLEL) {
      instances = new Instance[tests];
      // reading input
      FOR(i,tests) {
         instances[i].readInput();
      }
      
      // running computations in parallel
      sem_init(&coreSemaphore, 0, CORES);
      pthread_t irrelevant;
      FOR(i,tests) pthread_create(&irrelevant, NULL, runner, new int(i));
      FOR(i,tests) pthread_mutex_lock(&instances[i].finished); // wait until all are finished
      
      // writing output
      FOR(i,tests) {
         printf("Case #%d: ", i+1);
         instances[i].writeOutput();
         printf("\n");
      }
   } else {
      FOR(i,tests) {
         instances = new Instance;
         instances->readInput();
         instances->compute();
         printf("Case #%d: ", i+1);
         instances->writeOutput();
         printf("\n");
         cerr << "test " << i+1 << " is finished (" << ++finishedTests << "/" << tests << ")" << endl;
         delete instances;
      }
   }
}

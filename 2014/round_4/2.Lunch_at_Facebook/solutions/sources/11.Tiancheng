#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxn=1<<20;

int m,n;
int a[maxn];
int b[maxn],e[maxn];
int r[maxn];

int64 solve(int s,int t)
{
	if (s>=t) return 0;
	int m=(s+t)/2;
	int64 ret=solve(s,m);
	ret+=solve(m+1,t);
	int p=s,q=m+1;
	for (int k=s;k<=t;k++)
		if (q>t || p<=m && e[p]<e[q])
			r[k]=e[p++];
		else
			r[k]=e[q++],ret+=m-p+1;
	memcpy(e+s,r+s,(t-s+1)*sizeof(int));
	return ret;
}
int random_int()
{
	int a=rand()%32767;
	int b=rand()%32767;
	return (a<<15)|b;
}
int main()
{
	if (0)
	{
		freopen("big.txt","w",stdout);
		printf("20\n");
		for (int i=0;i<20;i++)
		{
			int n=100000;
			int m=100000;
			printf("%d %d\n",n,m);
			for (int i=0;i<n;i++) printf("%d ",random_int()%1000000000+1);
			printf("\n");
			for (int i=0;i<m;i++) printf("%d ",random_int()%1000000000+1);
			printf("\n");
		}
		return 0;
	}
	//freopen("input.txt","r",stdin);
	//freopen("big.txt","r",stdin);
	freopen("b.in","r",stdin); freopen("b.out","w",stdout);
	int testcase;
	scanf("%d",&testcase);
	for (int case_id=1;case_id<=testcase;case_id++)
	{
		//double start_time=(double)clock();
		scanf("%d%d",&m,&n);
		for (int i=0;i<m;i++) scanf("%d",&a[i]);
		for (int i=0;i<m;i++) e[i]=a[i];
		int64 ret=solve(0,m-1);
		for (int i=0;i<n;i++) scanf("%d",&b[i]);
		sort(b,b+n);
		for (int i=0;i<m;i++)
		{
			int h=-1,t=n;
			for (;h+1<t;)
			{
				int m=h+(t-h)/2;
				if (a[i]<b[m]) t=m;
				else h=m;
			}
			a[i]=t;
		}
		memset(e,0,sizeof(e));
		for (int i=0;i<m;i++) e[a[i]]++;
		for (int i=1;i<n;i++) e[i]+=e[i-1];
		for (int i=0;i<n;i++) r[i]=e[i];
		for (int i=0;i<m;i++)
		{
			int key=a[i];
			for (int k=0;k<key;k++) e[k]++;
			for (int k=key;k<n;k++) { e[k]--; if (e[k]<r[k]) r[k]=e[k]; }
		}
		for (int i=0;i<n;i++) ret+=r[i];
		cout<<"Case #"<<case_id<<": "<<ret<<endl;
		fflush(stdout);
		//double end_time=(double)clock();
		//printf("%.3lf\n",(end_time-start_time)/CLOCKS_PER_SEC);
	}
	return 0;
}


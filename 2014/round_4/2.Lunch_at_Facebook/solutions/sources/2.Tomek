//{{{
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
#include <map>
#include <set>
using namespace std;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << (x) << endl;

typedef long long LL;
typedef unsigned long long ULL;
const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%lld",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }
//}}}

int N,M;
vector<int> v1;
vector<int> v2;

void ReadInput() {
  N = rint();
  M = rint();
  v1.resize(N);
  v2.resize(M);
  REP(i,N) v1[i]=rint();
  REP(i,M) v2[i]=rint();
}

LL CalcV1Inv() {
  LL res = 0;
  REP(i,N) REP(j,i) if(v1[i] < v1[j]) ++res;
  return res;
}

LL Calc() {
  sort(v2.begin(), v2.end());
  
  vector<LL> f1, f;
  f1.assign(N+1, 0);
  f.assign(N+1, 0);
  vector<int> inv2(N+1, 0);
  FOR(m,1,M) {
    f.swap(f1);
    int inv1 = 0;
    FOR(n,1,N) {
      if(v1[n-1] > v2[m-1]) ++inv1;
      else ++inv2[n];
      f[n] = min(
          f1[n] + inv1,
          f[n-1] + inv2[n]
          );
    }
  }
  LL res = f[N];
  res += CalcV1Inv();
  return res;
}

int main(int argc, char **argv) {
  int ntc = rint();
  FOR(tc,1,ntc) {
    ReadInput();
    if(argc==2 && tc!=atoi(argv[1])) continue;
    auto res = Calc();
    cout << "Case #" << tc << ": " << res << endl;
  }
}


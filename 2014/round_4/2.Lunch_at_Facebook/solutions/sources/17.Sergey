#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 1 << 1;

int n, m;
int a[nmax], b[nmax];
vector<pii> e;

int64 t[nmax * 2];
int64 upd[nmax * 2];

void push(int v) {
 	if (v >= nmax) return;
 	t[v * 2] += upd[v];
 	t[v * 2 + 1] += upd[v];
 	upd[v * 2] += upd[v];
 	upd[v * 2 + 1] += upd[v];
 	upd[v] = 0;
}

int64 get(int v, int l, int r, int l1, int r1 ) {
 	if (l > r1 || r < l1) return inf;
 	push(v);
 	if (l1 <= l && r <= r1) return t[v];
 	int m = (l + r) / 2;
 	return min(get(v * 2, l, m, l1, r1), get(v * 2 + 1, m + 1, r, l1, r1));
}

void update(int v, int l, int r, int l1, int r1, int c) {
 	if (l > r1 || r < l1) return;
 	push(v);
 	if (l1 <= l && r <= r1) {
 	 	t[v] += c;
 	 	upd[v] += c;
 	 	return;
 	}
 	int m = (l + r) / 2;
 	update(v * 2, l, m, l1, r1, c);
 	update(v * 2 + 1, m + 1, r, l1, r1, c);
 	t[v] = min(t[v * 2], t[v * 2 + 1]);
}

void solve() {

};

void read() {
	cin >> n >> m;
	e.clear();
	forn(i, n) {
		scanf("%d", &a[i]);
		e.pb(mp(a[i], i));
	}
	forn(i, m) {
		scanf("%d", &b[i]);
		e.pb(mp(b[i], -1));
	}
	sort(all(e));
	memset(t, 0, sizeof t);
	memset(upd, 0, sizeof upd);
	forn(i, n+1)
		update(1, 1, nmax, i + 1, i + 1, i);
	int64 res = 0;
	int64 now = 0;
	forn(i, e.size()) {
	 	if (e[i].sc == -1) {
	 		res += get(1, 1, nmax, 1, n + 1);
	 		continue;
	 	}
		int64 qwe = get(1, 1, nmax, e[i].sc + 1, e[i].sc + 1);
	 	now += qwe;
	 	update(1, 1, nmax, 1, e[i].sc + 1, 1);
	 	update(1, 1, nmax, e[i].sc + 1, n + 1, -1);
	}
//	forn(i, n)
//		forn(j, i)
//			if (a[i] < a[j])
//				now --;
//	cerr << now << endl;
	cout << res+now/2 << endl;
}

int main( int argc, char *argv[] ) {
  	if (argc != 3) {
		freopen("input.txt", "r", stdin);
  		cerr << "working in normal mode, from stdin" << endl;
		int tst;
		cin >> tst;
		forn (i, tst) {
			printf("Case #%d: ", i + 1);
			read();
			solve();
		}
		cerr << "job done in " << clock() << endl;
		return 0;
	}
	int id = atoi(argv[1]);
	int mod = atoi(argv[2]);
	int tst;
	cin >> tst;
	forn (i, tst) {
		read();
		if (i % mod == id) {
			printf("Case #%02d: ", i + 1);
			solve();
			fprintf(stderr, "Case #%02d: done\n", i + 1);
		}
	}

  	return 0;
}

#include<unordered_set>
#include<unordered_map>
#include<functional>
#include<algorithm>
//#include<iostream>
#include<numeric>
#include<cassert>
#include<cstring>
#include<cstdio>
#include<vector>
#include<queue>
//#include<cmath>
#include<set>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b);i>=(e);--i)
#define FOReach(it,V) for(__typeof((V).begin()) it=(V).begin();it!=(V).end();++it)

#define PB push_back
#define ALL(V) (V).begin(),(V).end()
#define SIZE(V) ((int)(V).size())

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

int __stmp;
#define scanf __stmp=scanf


const int INF = 1000000001;
const int MAX = 100100;

class tree_brute {
	public:
		void init(int n) {
			for(size=1;size<n;size*=2);
			V.assign(2*size+3, 0);
		}
		void add(int b, int e, int v) { // [b, e]
			FOR(i,b,e) V[i] += v;
		}
		int get_min(int b, int e) {
			int ret = V[b];
			FOR(i,b,e) ret = min(ret, V[i]);
			return ret;
		}
	private:
		int size;
		VI V;
};

class tree {
	public:
		void init(int n) {
			for(size=1;size<n;size*=2);
			val.assign(2*size+3, 0);
			bit.assign(2*size+3, 0);
		}
		void add(int b, int e, int v) { // [b, e] += v (przy zmianie typu v zmienic typ d)
			k = b, l = e, d = v;
			_add(1, 0, size-1);
		}
		LL get_min(int b, int e) { // min [b, e]
			k = b, l = e;
			return _sum(1, 0, size-1);
		}
	private:
		#define f1 2*v, p, (p+q)/2
		#define f2 2*v+1, (p+q)/2+1, q
		int size, k, l, d;
		vector<int> val, bit;
		
		void update(int v) {
			if(v < size) {
				bit[2*v] += bit[v];
				bit[2*v+1] += bit[v];
				val[v] = min(val[2*v] + bit[2*v], val[2*v+1] + bit[2*v+1]);
			}
			else val[v] += bit[v];
			bit[v] = 0;
		}
		
		void _add(int v, int p, int q) {
			if(p > l || k > q) return;
			if(k <= p && q <= l) {
				bit[v] += d;
				return;
			}
			_add(f1); _add(f2);
			update(v);
		}
		
		LL _sum(int v, int p, int q) {
			update(v);
			if(p > l || k > q) return INF;
			if(k <= p && q <= l) return val[v];
			return min(_sum(f1), _sum(f2));
		}
};

int tmp[MAX];

LL merge_sort(int *arr, int n) {
	if(n == 1) return 0;
	int k = n/2;
	LL ret = merge_sort(arr, k);
	ret += merge_sort(arr+k, n-k);
	int i = 0, j = k;
	int t = 0;
	while(i < k || j < n)
	{
		if(i == k) {
			tmp[t++] = arr[j++];
		} else if(j == n) {
			tmp[t++] = arr[i++];
		} else {
			if(arr[i] < arr[j]) {
				tmp[t++] = arr[i++];
			} else {
				ret += k-i;
				tmp[t++] = arr[j++];
			}
		}
	}
	REP(s,n) arr[s] = tmp[s];
	return ret;
}

tree T;
int A[MAX], B[MAX];
VI all;

int n, m, k;

struct event {
	int type;
	int h, b, e, v;
};

bool operator<(const event &a, const event &b) {
	return a.h != b.h ? a.h < b.h : a.type < b.type;
}

int main(int argc, char *argv[]) {
	int Z;
	scanf("%d", &Z);
	FOR(z,1,Z)
	{
		printf("Case #%d: ", z);
		scanf("%d %d", &n, &m);
		REP(i,n) scanf("%d", A+i);
		REP(i,m) scanf("%d", B+i);
		// all = VI(A, A+n);
		// all.insert(all.end(), B, B+m);
		// sort(ALL(all));
		// REP(i,n) A[i] = lower_bound(ALL(all), A[i]) - all.begin();
		// REP(i,m) B[i] = lower_bound(ALL(all), B[i]) - all.begin();
		T.init(n+1);
		vector<event> E;
		REP(i,n)
		{
			E.PB(event({-1, A[i], 0, i, 1}));
			E.PB(event({1, INF, 0, i, -1}));
			E.PB(event({-1, -INF, i+1, n, 1}));
			E.PB(event({1, A[i], i+1, n, -1}));
		}
		REP(i,m)
		{
			E.PB(event({0, B[i]}));
		}
		sort(ALL(E));
		LL res = 0;
		for(event e : E)
		{
			if(e.type == 0) {
				res += T.get_min(0, n);
			} else {
				T.add(e.b, e.e, e.v);
			}
		}
		res += merge_sort(A, n);
		printf("%lld\n", res);
	}
	return 0;
}


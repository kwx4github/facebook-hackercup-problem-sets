#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#include <queue>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>

using namespace std;

#define MAXN 100010

int A[MAXN];
int B[MAXN];

long long solve(int AA, int BB, int X, int Y) {
  if(Y - X == 0 || BB - AA == 0) return 0;

  int N = BB - AA;
  int mid = (X + Y) / 2;

  vector<int> LV(N + 1, 0);
  vector<int> RV(N + 1, 0);
  for(int i = 0; i < N; i++) {
    LV[i + 1] = LV[i] + (B[mid] < A[AA + i] ? 1 : 0);
  }
  for(int i = N - 1; i >= 0; i--) {
    RV[i] = RV[i + 1] + (B[mid] > A[AA + i] ? 1 : 0);
  }

  pair<int, int> res(0x7FFFFFFF, -1);
  for(int i = 0; i <= N; i++) {
    res = min(res, make_pair(LV[i] + RV[i], i));
  }

  long long result = res.first + solve(AA, AA + res.second, X, mid) +
                     solve(AA + res.second, BB, mid + 1, Y);

  vector<int> V0(A + AA, A + AA + res.second);
  vector<int> V1(A + AA + res.second, A + BB);
  sort(V0.begin(), V0.end());
  sort(V1.begin(), V1.end());
  for(int i = X; i < mid; i++) {
    result += lower_bound(V1.begin(), V1.end(), B[i]) - V1.begin();
  }
  for(int i = mid + 1; i < Y; i++) {
    result += V0.end() - upper_bound(V0.begin(), V0.end(), B[i]);
  }
  

  return result;
}

long long acount(int AA, int BB) {
  if(BB - AA <= 1) return 0;

  int MM = (AA + BB) / 2;
  long long result = acount(AA, MM) + acount(MM, BB);

  sort(A + AA, A + MM);
  for(int i = MM; i < BB; i++) {
    result += (A + MM) - upper_bound(A + AA, A + MM, A[i]);
  }
  return result;

/*
  long long result = 0;
  for(int i = AA; i < BB; i++) {
    for(int j = i + 1; j < BB; j++) {
      if(A[i] > A[j]) {
        result++;
      }
    }
  }
  return result;
*/
}

int main() {
  int T; cin >> T;
  for(int t = 1; t <= T; t++) {
    int N, M;
    cin >> N >> M;
    for(int i = 0; i < N; i++) {
      cin >> A[i];
    }
    for(int i = 0; i < M; i++) {
      cin >> B[i];
    }
    sort(B, B + M);

    long long result = solve(0, N, 0, M);
    result += acount(0, N);

    cout << "Case #" << t << ": " << result << endl;
  }
  return 0;
}

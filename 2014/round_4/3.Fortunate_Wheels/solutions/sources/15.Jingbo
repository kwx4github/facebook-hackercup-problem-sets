#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <cassert>
#include <queue>
using namespace std;

#define PB push_back
#define MP make_pair

#define FOR(i,a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++ i)

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> PII;

inline double sqr(double x)
{
    return x * x;
}

const int maxlength = 100000;

const ULL magic = 0xabdef;

ULL pw[maxlength + 1];

struct String
{
    char s[maxlength + 1];
    int length;
    
    void read() {
        scanf("%s", s);
        length = strlen(s);
    }
    
    int size() {
        return length;
    }
    
    ULL h[maxlength + 1];
    
    ULL substr(int l, int r) { // [l, r]
        return h[r + 1] - h[l] * pw[r - l + 1];
    }
    
    int lcp(int s1, int s2) {
        int lower = 0, upper = length - max(s1, s2) + 1;
        while (lower + 1 < upper) {
            int middle = lower + upper >> 1;
            if (substr(s1, s1 + middle - 1) == substr(s2, s2 + middle - 1)) {
                lower = middle;
            } else {
                upper = middle;
            }
        }
        return lower;
    }
    
    void prepare() {
        h[0] = 0;
        for (int i = 0; i < length; ++ i) {
            h[i + 1] = h[i] * magic + s[i];
        }
    }
};

String s;

bool byLex(const int &i, const int &j) {
    int lcp = s.lcp(i, j);
    return s.s[i + lcp] < s.s[j + lcp];
}

const int maxn = 20;

int f[maxn + 1][maxlength];
int suffixArray[maxlength], height[maxlength];

void update(int &a, int b)
{
    if (a == -1 || a > b) {
        a = b;
    }
}

vector<int> events[maxlength];
int up[maxlength], down[maxlength];

int findRoot(int father[], int x)
{
    if (x == father[x]) {
        return x;
    }
    return father[x] = findRoot(father, father[x]);
}

int getSize(int x)
{
    return findRoot(down, x) - findRoot(up, x) + 1;
}

void dec(map<int, int> &h, int x)
{
    if ((-- h[x]) == 0) {
        h.erase(x);
    }
}

void solve()
{
    int n, m, W, X, Y, Z;
    scanf("%d%d%d%d%d%d", &n, &m, &W, &X, &Y, &Z);
    
    s.read();
    
    int length = s.size();
    
    memset(f, -1, sizeof(f));
    f[0][0] = 0;
    int mini = 1000000000;
    for (int i = 0; i < n; ++ i) {
        int cost, len;
        scanf("%d%d", &cost, &len);
        mini = min(mini, cost);
        for (int j = 0; j < length; ++ j) {
            if (f[i][j] != -1) {
                update(f[i + 1][j], f[i][j]);
                update(f[i][j + len], f[i][j] + cost + (j == 0 ? 0 : W));
            }
        }
    }
    
//cerr << "DP finished!" << endl;
    
    s.prepare();
    for (int i = 0; i < length; ++ i) {
        suffixArray[i] = i;
    }
    sort(suffixArray, suffixArray + length, byLex);
    
    for (int i = 0; i < length; ++ i) {
        events[i].clear();
//cerr << s.s+suffixArray[i] << endl;
    }
    for (int i = 0; i + 1 < length; ++ i) {
        height[i] = s.lcp(suffixArray[i], suffixArray[i + 1]);
        events[height[i]].push_back(i);
    }
//cerr << "SA built!" << endl;
    
    map<int, int> occur;
    occur[-1] = 1;
    
    for (int i = 0; i < length; ++ i) {
        up[i] = down[i] = i;
    }
    priority_queue<double> heap;
    for (int i = 0; i < m; ++ i) {
        heap.push(mini); // expect = -mini
    }
    
    for (int l = length - 1; l > 0; -- l) {
//cerr << "trying " << l << endl;
        ++ occur[-1]; // the new one, with length exact $l$.
        
        FOR (iter, events[l]) {
            int x = *iter;

            dec(occur, -getSize(x));
            dec(occur, -getSize(x + 1));
            
            down[x] = x + 1;
            up[x + 1] = x;
            ++ occur[-getSize(x)];
        }
        
        if (f[n][l] == -1) {
            continue;
        }

        double score = Y * sqr(length - abs(X - l)) + Z;
//cerr << "l = " << l << ", f[n][l] = " << f[n][l] << endl;
        int sum = 0;
        FOR (iter, occur) {
            int s = -iter->first;
            double expect = score, prob = 1;
            prob *= (double)s / (length - l + 1);
            prob *= (double)(s - 1) / (length - l);
            expect *= prob;
            expect -= f[n][l];
//cerr << "    s = " << s << ", expect = " << expect << endl;
            
            for (int i = 0; i < iter->second && i < m; ++ i) {
                if (heap.size() < m) {
                    heap.push(-expect);
                } else if (-heap.top() < expect) {
                    heap.pop();
                    heap.push(-expect);
                } else {
                    break;
                }
            }
            sum += iter->second;
            if (sum >= m) {
                break;
            }
        }
    }
    
    vector<double> list;
    while (heap.size()) {
        list.push_back(-heap.top());
        heap.pop();
    }
    sort(list.rbegin(), list.rend());
    
    assert(list.size() == m);
    
    for (int i = 0; i < list.size(); ++ i) {
        if (fabs(list[i]) < 1e-4) {
            list[i] = 0;
        }
        printf(" %.3f", list[i]);
    }
    puts("");
}

int main()
{
    freopen("C.in", "r", stdin);
    freopen("C.out", "w", stdout);
    
    pw[0] = 1;
    for (int i = 1; i <= maxlength; ++ i) {
        pw[i] = pw[i - 1] * magic;
    }

    int tests, test = 1;
    for (scanf("%d", &tests); test <= tests; ++ test) {
        printf("Case #%d:", test);
        solve();
    }
    return 0;
}


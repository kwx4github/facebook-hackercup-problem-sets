import java.util.NavigableSet;
import java.util.Locale;
import java.util.SortedSet;
import java.util.Comparator;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeSet;
import java.io.Reader;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Niyaz Nigmatullin
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		FastScanner in = new FastScanner(inputStream);
		FastPrinter out = new FastPrinter(outputStream);
		FortunateWheels solver = new FortunateWheels();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class FortunateWheels {
    public void solve(int testNumber, FastScanner in, FastPrinter out) {
        int countDeals = in.nextInt();
        int m = in.nextInt();
        int w = in.nextInt();
        int X = in.nextInt();
        int Y = in.nextInt();
        int Z = in.nextInt();
        String s = in.next();
        int n = s.length() + 1;
        int[] a = new int[n];
        for (int i = 0; i + 1 < a.length; i++) {
            a[i] = s.charAt(i);
        }
        int[] sa = SuffixArray.buildSuffixArray(a);
        int[] lcp = getLCP(sa, a);
        MinSegmentTree tree = new MinSegmentTree(n);
        for (int i = 0; i + 1 < n; i++) {
            tree.set(i, lcp[i]);
        }
        int[] A = new int[countDeals];
        int[] B = new int[countDeals];
        for (int i = 0; i < countDeals; i++) {
            A[i] = in.nextInt();
            B[i] = in.nextInt();
        }
        long[] costs = getCosts(n, A, B, w);
        List<Substrings>[] happen = new List[n + 1];
        for (int i = 0; i <= n; i++) happen[i] = new ArrayList<>();
        NavigableSet<Substrings> ss = new TreeSet<>(new Comparator<Substrings>() {
            @Override
            public int compare(Substrings o1, Substrings o2) {
                if ((o1.r - o1.l) != (o2.r - o2.l)) return Integer.compare(o1.r - o1.l, o2.r - o2.l);
                return Integer.compare(o1.l, o2.l);
            }
        });
        ss.add(new Substrings(0, n));
        happen[tree.getMin(0, n) + 1].add(new Substrings(0, n));
        double[] ans = new double[2 * m];
        int cn = 0;
        for (int len = 1; len + 1 < n; len++) {
            for (Substrings e : happen[len]) {
                ss.remove(e);
            }
            for (Substrings e : happen[len]) {
                int curL = e.l;
                while (curL < e.r) {
                    int l = curL;
                    int r = e.r;
                    while (l < r - 1) {
                        int mid = (l + r) >> 1;
                        if (a[(sa[curL] + len - 1) % n] == a[(sa[mid] + len - 1) % n]) {
                            l = mid;
                        } else {
                            r = mid;
                        }
                    }
                    if (a[(sa[curL] + len - 1) % n] != 0) {
                        Substrings f = new Substrings(curL, r);
                        ss.add(f);
                        int lc = tree.getMin(curL, r - 1);
                        if (lc < n) {
                            happen[lc + 1].add(f);
                        }
                    }
                    curL = r;
                }
            }
            if (costs[len] != Long.MAX_VALUE) {
                Substrings cur = ss.last();
                for (int i = 0; i < m && cur != null; cur = ss.lower(cur), i++) {
                    double get = -1. * Y * (n - 1 - Math.abs(X - len)) * (n - 1 - Math.abs(X - len)) - Z;
                    get *= f(cur.r - cur.l);
                    get /= f(n - len);
                    get += costs[len];
                    ans[cn++] = get;
                }
                Arrays.sort(ans, 0, cn);
                cn = Math.min(cn, m);
            }
        }
        long bestCost = Long.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            bestCost = Math.min(bestCost, costs[i]);
        }
        while (cn < 2 * m) {
            ans[cn++] = bestCost;
        }
        Arrays.sort(ans, 0, cn);
        out.print("Case #" + testNumber + ":");
        for (int i = 0; i < m; i++) {
            out.printf(Locale.US, " %.3f", -ans[i]);
        }
        out.println();
    }

    static double f(double x) {
        return x * (x - 1);
    }

    static int[] getLCP(int[] sa, int[] a) {
        int n = sa.length;
        int[] rev = new int[n];
        for (int i = 0; i < n; i++) {
            rev[sa[i]] = i;
        }
        int last = 0;
        int[] ret = new int[n - 1];
        for (int i = 0; i < n; i++) {
            last = Math.max(last - 1, 0);
            int id = rev[i];
            int jd = (id + 1);
            if (jd >= n) {
                continue;
            }
            int j = sa[jd];
            while (a[i + last] == a[j + last]) ++last;
            ret[id] = last;
        }
        return ret;
    }

    static class Substrings {
        int l;
        int r;

        Substrings(int l, int r) {
            this.l = l;
            this.r = r;
        }
    }

    static long[] getCosts(int len, int[] a, int[] b, int w) {
        int n = a.length;
        final long[] ret = new long[len + 1];
        Arrays.fill(ret, Long.MAX_VALUE);
        ret[0] = 0;
        NavigableSet<Integer> set = new TreeSet<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                if (ret[o1] != ret[o2]) {
                    return Long.compare(ret[o1], ret[o2]);
                }
                return Integer.compare(o1, o2);
            }
        });
        set.add(0);
        while (!set.isEmpty()) {
            int v = set.pollFirst();
            for (int i = 0; i < n; i++) {
                int u = v + b[i];
                long ncost = ret[v] + w + a[i];
                if (u <= len && ret[u] > ncost) {
                    set.remove(u);
                    ret[u] = ncost;
                    set.add(u);
                }
            }
        }
        for (int i = 0; i <= len; i++) {
            if (ret[i] != Long.MAX_VALUE) ret[i] -= w;
        }
        return ret;
    }
}

class FastScanner extends BufferedReader {

    public FastScanner(InputStream is) {
        super(new InputStreamReader(is));
    }

    public int read() {
        try {
            int ret = super.read();
//            if (isEOF && ret < 0) {
//                throw new InputMismatchException();
//            }
//            isEOF = ret == -1;
            return ret;
        } catch (IOException e) {
            throw new InputMismatchException();
        }
    }

    public String next() {
        StringBuilder sb = new StringBuilder();
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        if (c < 0) {
            return null;
        }
        while (c >= 0 && !isWhiteSpace(c)) {
            sb.appendCodePoint(c);
            c = read();
        }
        return sb.toString();
    }

    static boolean isWhiteSpace(int c) {
        return c >= 0 && c <= 32;
    }

    public int nextInt() {
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int ret = 0;
        while (c >= 0 && !isWhiteSpace(c)) {
            if (c < '0' || c > '9') {
                throw new NumberFormatException("digit expected " + (char) c
                        + " found");
            }
            ret = ret * 10 + c - '0';
            c = read();
        }
        return ret * sgn;
    }

    public String readLine() {
        try {
            return super.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    }

class FastPrinter extends PrintWriter {

    public FastPrinter(OutputStream out) {
        super(out);
    }

    public FastPrinter(Writer out) {
        super(out);
    }


}

class SuffixArray {

    public static int[] buildSuffixArray(int[] s) {
        int n = s.length;
        int alphabet = 0;
        for (int i : s) {
            alphabet = Math.max(alphabet, i);
        }
        ++alphabet;
        int[] h = new int[Math.max(n, alphabet)];
        int[] c = new int[n];
        int[] d = new int[n];
        int[] count = new int[alphabet];
        for (int i = 0; i < n; i++) {
            c[i] = s[i];
            count[c[i]]++;
        }
        for (int i = 1; i < alphabet; i++) {
            h[i] = h[i - 1] + count[i - 1];
        }
        int[] a = new int[n];
        int[] b = new int[n];
        {
            int[] g = h.clone();
            for (int i = 0; i < n; i++) {
                a[g[c[i]]++] = i;
            }
        }
        for (int w = 1; w < n; w <<= 1) {
            for (int i = 0; i < n; i++) {
                int j = good(a[i] - w + n, n);
                b[h[c[j]]++] = j;
            }
            int nc = 0;
            h[nc++] = 0;
            d[b[0]] = 0;
            for (int i = 1; i < n; i++) {
                if (c[b[i]] != c[b[i - 1]] || c[good(b[i] + w, n)] != c[good(b[i - 1] + w, n)]) {
                    h[nc++] = i;
                }
                d[b[i]] = nc - 1;
            }
            int[] t = a; a = b; b = t;
            t = c; c = d; d = t;
        }
        return a;
    }

    static int good(int x, int n) {
        if (x >= n) {
            x -= n;
        }
        return x;
    }

}

class MinSegmentTree {
    int[] min;
    int[] minId;
    int n;

    public MinSegmentTree(int n) {
        this.n = Integer.highestOneBit(n) << 1;
        min = new int[this.n * 2];
        minId = new int[this.n * 2];
        for (int i = 0; i < n; i++) {
            minId[i + n] = i;
        }
        for (int i = 0; i < n; i++) {
            set(i, Integer.MAX_VALUE);
        }
    }

    public void set(int x, int y) {
        x += n;
        min[x] = y;
        while (x > 1) {
            x >>= 1;
            int left = min[x << 1];
            int right = min[(x << 1) | 1];
            if (left <= right) {
                min[x] = left;
                minId[x] = minId[x << 1];
            } else {
                min[x] = right;
                minId[x] = minId[(x << 1) | 1];
            }
        }
    }

    public int getMin(int left, int right) {
        --right;
        left += n;
        right += n;
        int ret = Integer.MAX_VALUE;
        while (left <= right) {
            if ((left & 1) == 1) {
                ret = Math.min(ret, min[left]);
                left++;
            }
            if ((right & 1) == 0) {
                ret = Math.min(ret, min[right]);
                right--;
            }
            left >>= 1;
            right >>= 1;
        }
        return ret;
    }

}


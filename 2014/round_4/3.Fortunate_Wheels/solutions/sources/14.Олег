#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;




const int maxn = 1e5 + 100;
char str[maxn];
long long earn[maxn];
int c[maxn], l[maxn];
long long dp[maxn];
int maxgood[maxn];

long long inf = (long long) 1e18; 

long long sqr(long long x)
{
	return x * x;
}



int pos[20][maxn];
int block[20][maxn];
int bl;
int level;

bool cmp1(int &x, int &y)
{
	return str[x] < str[y];
}
bool cmp2(int &x, int &y)
{
	if (block[level - 1][x] != block[level - 1][y] )
		return block[level - 1][x] < block[level - 1][y];
	return block[level - 1][x + bl / 2] < block[level - 1][y + bl / 2];
}

int par[maxn], sz[maxn];

int getS(int a, int b)
{
	int ans = 0;
	for (int x = level; x >= 0; x--)
	{
		if (block[x][a] != block[x][b] )
			continue;
		ans += (1 << x);
		a += (1 << x);
		b += (1 << x);
	}
	return ans;
}

int getP(int x)
{
	if (par[x] == x)
		return x;
	return par[x] = getP(par[x] );
}
set <pair<int, int> > group;

int merge(int x, int y)
{
	x = getP(x);
	y = getP(y);
	if (rand() & 1)
		swap(x, y);
	if (x == y)
		return 0;

	group.erase(make_pair(sz[x], x) );
	group.erase(make_pair(sz[y], y) );

	par[x] = y;
	sz[y] += sz[x];
	sz[x] = 0;

	group.insert(make_pair(sz[y], y) );
	return sz[y];
}

vector <pair<int, int> > qu;

vector <double> ans;

void calcGood()
{
	ans.clear();

	int len = strlen(str);
	str[len++] = '#';
	for (int i = 0; i < len; i++)
		pos[0][i] = i;
	sort(pos[0], pos[0] + len, cmp1);

	int curbl = 0;
	for (int i = 0; i < len; i++)
	{
		block[0][pos[0][i] ] = curbl;
		if (cmp1(pos[0][i], pos[0][i + 1] ) ) 
			curbl++;
	}

	bl = 1;
	level = 0;
	while (bl < len)
	{
		bl *= 2;
		level++;
		for (int i = 0; i < len; i++)
			pos[level][i] = pos[level - 1][i];
		sort(pos[level], pos[level] + len, cmp2);
	
		curbl = 0;
		for (int i = 0; i < len; i++)
		{
			block[level][pos[level][i] ] = curbl;
			if (cmp2(pos[level][i], pos[level][i + 1] ) ) 
				curbl++;
		}
	}
	group.clear();

	int mxsize = 1;
	par[0] = 0;
	sz[0] = 1;
	group.insert(make_pair(1, 0) );
	for (int i = 1; i < len; i++)
	{
		par[i] = i;
		sz[i] = 1;
		group.insert(make_pair(1, i) );
		int x = getS(pos[level][i - 1], pos[level][i] );
		qu.push_back(make_pair(x, i) );
	}
	sort(qu.begin(), qu.end() );
	
	int curmax = 1;
	len--;

	for (int l = len; l >= 1; l--)
	{
		while (qu.size() && qu.back().first == l)
		{
			int x = qu.back().second;
			curmax = max(curmax, merge(x - 1, x) );
			qu.pop_back();
		}
		int some = 0;

		if (l > len - 1)
			continue;

		for(auto it = group.rbegin(); it != group.rend() && some < 20; it++, some++)
		{
			int val = it->first;
			if (it->second == 0)
			{
				some--;
				continue;
			}

			long long cur = -dp[l];
			long long all = len - l + 1;
			long long gd = val;
			double prob = double(gd) * double(gd - 1) / (double(all) * double(all - 1) );
			double X = double(cur) + prob * double(earn[l] );
			ans.push_back(X);
		}
		while (some < 20)
		{
			some++;
			int val = 0;

			long long cur = -dp[l];
			long long all = len - l + 1;
			long long gd = val;
			double prob = double(gd) * double(gd - 1) / (double(all) * double(all - 1) );
			double X = double(cur) + prob * double(earn[l] );
			ans.push_back(X);
		}
		maxgood[l] = curmax;
	}

}

void solve()
{
	int  n, m, w, x, y, z;
	scanf("%d%d%d%d%d%d", &n, &m, &w, &x, &y, &z);
	scanf("%s", str);
	int len = strlen(str);
	for (int i = 1; i <= len; i++)
	{
		earn[i] = y * sqr(len - abs(x - i) ) + z;
	}
	for (int i = 0; i < n; i++)
	{
		scanf("%d%d", &c[i], &l[i] );
	}
	dp[0] = -w;
	for (int i = 1; i <= len; i++)
		dp[i] = inf;
	for (int i = 0; i < len; i++)
	{
		long long cur = dp[i];
		for (int j = 0; j < n; j++)
		{
			int nl = i + l[j];
			long long nx = cur + c[j] + w;
			if (nx < dp[nl] )
				dp[nl] = nx;
		}
	}
	calcGood();
	
	

	sort(ans.begin(), ans.end() );
	reverse(ans.begin(), ans.end() );

	for (int i = 0; i < m; i++)
	{
		printf(" %.3lf", ans[i] );
	}
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);


	int t;
	scanf("%d", &t);
	for (int i = 1; i <= t; i++)
	{
		fprintf(stderr, "Case #%d\n", i);
		printf("Case #%d:", i);
		solve();
		printf("\n");
	}


	return 0;
}
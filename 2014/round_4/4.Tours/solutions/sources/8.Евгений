import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.max;
import static java.lang.Math.min;
import static java.lang.System.exit;
import static java.util.Arrays.fill;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class D {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static List<Integer> edges[];
	static int depth[], comp[], comp2[];
	static boolean comp2i[];
	static int comp2s;
	
	static List<Integer> edges2[];
	static int bestChild[], pathId[], pathPos[];
	static List<Path> paths;
	
	static final int MOD = 1000000007;
	
	static void solve() throws Exception {
		int n = nextInt();
		int m = nextInt();
		int d = nextInt();
		edges = new List[n];
		for (int i = 0; i < n; i++) {
			edges[i] = new ArrayList<>();
		}
		for (int i = 0; i < m; i++) {
			int a = nextInt() - 1;
			int b = nextInt() - 1;
			edges[a].add(b);
			edges[b].add(a);
		}
		depth = new int[n];
		comp = new int[n];
		comp2i = new boolean[n];
		boolean compi[] = new boolean[n];
		fill(depth, -1);
		int comps = 0;
		comp2s = 0;
		for (int i = 0; i < n; i++) {
			if (depth[i] < 0) {
				compi[i] = true;
				dfs1(i, -1, 0, comps++);
			}
		}
		edges2 = new List[comp2s];
		for (int i = 0; i < comp2s; i++) {
			edges2[i] = new ArrayList<>();
		}
		comp2 = new int[n];
		comp2s = 0;
		for (int i = 0; i < n; i++) {
			if (compi[i]) {
				dfs2(i, 0, -1);
			}
		}
//		System.err.println("EDGES2");
//		for (int i = 0; i < comp2s; i++) {
//			System.err.println(edges2[i]);
//		}
//		System.err.println("C " + Arrays.toString(comp));
//		System.err.println("C2 " + Arrays.toString(comp2));
		bestChild = new int[comp2s];
		fill(bestChild, -2);
		paths = new ArrayList<>();
		pathId = new int[n];
		pathPos = new int[n];
		for (int i = 0; i < comp2s; i++) {
			if (bestChild[i] == -2) {
				dfs3(i, -1);
				dfs4(i, -1, 0, -1, -1);
			}
		}
//		System.err.print("P [");
//		for (int i = 0; i < comp2s; i++) {
//			if (i > 0) {
//				System.err.print(", ");
//			}
//			System.err.print("(" + pathId[i] + " " + pathPos[i] + ")");
//		}
//		System.err.println("]");
		long ans = 0;
		long killed[] = new long[n];
		for (int i = 0; i < d; i++) {
			switch (next().charAt(0)) {
			case 'T':
				int x = nextInt() - 1;
				int y = nextInt() - 1;
				long o = nextInt();
				if (comp[x] != comp[y]) {
					break;
				}
				x = comp2[x];
				y = comp2[y];
//				System.err.println("+ " + x + " " + y + " " + o);
				Path px = paths.get(pathId[x]);
				int pxi = pathPos[x];
				Path py = paths.get(pathId[y]);
				int pyi = pathPos[y];
				while (true) {
					if (px.depth > py.depth) {
						px.add(0, pxi + 1, o);
						pxi = px.parentI;
						px = paths.get(px.parent);
					} else if (px != py) {
						py.add(0, pyi + 1, o);
						pyi = py.parentI;
						py = paths.get(py.parent);
					} else {
						px.add(min(pxi, pyi), max(pxi, pyi) + 1, o);
						break;
					}
				}
//				for (Path p: paths) {
//					System.err.print("[");
//					for (int j = 0; j < p.cntFenw.length; j++) {
//						if (j > 0) {
//							System.err.print(", ");
//						}
//						System.err.print(p.get(j));
//					}
//					System.err.print("] ");
//				}
//				System.err.println();
				break;
			case 'S':
				int z = nextInt() - 1;
				int zz = comp2[z];
				long zzz = paths.get(pathId[zz]).get(pathPos[zz]);
				ans += zzz - killed[z];
				killed[z] = zzz;
				break;
			default:
				throw new AssertionError();
			}
		}
		printCase();
		out.println(ans % MOD);
	}
	
	static int dfs1(int cur, int prev, int d, int c) {
		if (depth[cur] >= 0) {
			return depth[cur];
		}
		depth[cur] = d;
		comp[cur] = c;
		int mind = d;
		for (int next: edges[cur]) {
			if (next == prev) {
				continue;
			}
			mind = min(mind, dfs1(next, cur, d + 1, c));
		}
		if (mind == d) {
			comp2i[cur] = true;
			++comp2s;
		}
		return mind;
	}
	
	static void dfs2(int cur, int d, int c2) {
		if (depth[cur] != d) {
			return;
		}
		if (comp2i[cur]) {
			if (c2 >= 0) {
				edges2[c2].add(comp2s);
				edges2[comp2s].add(c2);
			}
			c2 = comp2s;
			++comp2s;
		}
		comp2[cur] = c2;
		for (int next: edges[cur]) {
			dfs2(next, d + 1, c2);
		}
	}
	
	static class Path {
		final int depth, parent, parentI;
		long cntFenw[];
		
		public Path(int depth, int parent, int parentI) {
			this.depth = depth;
			this.parent = parent;
			this.parentI = parentI;
		}
		
		void add_(int i, long v) {
			do {
				cntFenw[i] += v;
				i |= i + 1;
			} while (i < cntFenw.length);
		}
		
		void add(int i, int j, long v) {
//			System.err.println("++ " + i + " " + j + " " + v);
			if (i < cntFenw.length) {
				add_(i, v);
			}
			if (j < cntFenw.length) {
				add_(j, -v);
			}
		}
		
		void add(int i, long v) {
			add(i, i + 1, v);
		}
		
		long get(int i) {
			long ans = 0;
			do {
				ans += cntFenw[i];
				i = (i & (i + 1)) - 1;
			} while (i >= 0);
			return ans;
		}
	}
	
	static int dfs3(int cur, int prev) {
		int res = 1;
		bestChild[cur] = -1;
		int bestWeight = 0;
		for (int next: edges2[cur]) {
			if (next == prev) {
				continue;
			}
			int curWeight = dfs3(next, cur);
			res += curWeight;
			if (curWeight > bestWeight) {
				bestWeight = curWeight;
				bestChild[cur] = next;
			}
		}
		return res;
	}
	
	static void dfs4(int cur, int prev, int d, int p, int pi) {
		Path res = new Path(d, p, pi);
		int cp = paths.size();
		paths.add(res);
		int cpi = 0;
		do {
//			res.nodes.add(cur);
			pathId[cur] = cp;
			pathPos[cur] = cpi;
			for (int next: edges2[cur]) {
				if (next == prev || next == bestChild[cur]) {
					continue;
				}
				dfs4(next, cur, d + 1, cp, cpi);
			}
			++cpi;
			prev = cur;
			cur = bestChild[cur];
		} while (cur >= 0);
		res.cntFenw = new long[cpi];
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
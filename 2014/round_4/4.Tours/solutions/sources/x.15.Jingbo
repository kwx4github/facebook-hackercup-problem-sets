#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <cassert>
#include <queue>
using namespace std;

#define PB push_back
#define MP make_pair

#define FOR(i,a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++ i)

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> PII;

const int MOD = 1000000007;

void inc(int &a, int b)
{
    a += (b % MOD + MOD) % MOD;
    a %= MOD;
}

const int maxn = 1000000 + 10;
const int maxm = 1000000 * 2 + 10;

int low[maxn], color[maxn], stack[maxn], cnt, dep, N, n, m;
int head[maxn], next[maxm], vtx[maxm], tot;
bool mark[maxn],vis[maxm];

inline void add(int a, int b)
{
    vtx[tot] = b;
	next[tot] = head[a];
	head[a] = tot++;
}

inline void dfs(int u)
{
	mark[u] = true;
	low[u] = ++cnt;
	int Min = cnt;
	stack[++ dep] = u;
	
	for (int p = head[u]; p; p = next[p]) {
    	if (!vis[p >> 1]) {
    		vis[p >> 1] = true;
    		if (!mark[vtx[p]]) {
                dfs(vtx[p]);
            }
    		Min = min(Min, low[vtx[p]]);
    	}
    }
	if (Min == low[u]) {
		int v;
		do {
			v = stack[dep --];
			low[v] = n + 1;
			color[v] = N;
		}while (u != v);
		++ N;
	} else {
        low[u] = Min;
    }
}

vector<int> adj[maxn];
int position[maxn], len, begin[maxn], end[maxn];
int jump[maxn][20], depth[maxn];

int lca(int a, int b)
{
    if (depth[a] > depth[b]) {
        swap(a, b);
    }
    for (int i = 19; i >= 0; -- i) {
        if (jump[b][i] != -1 && depth[jump[b][i]] >= depth[a]) {
            b = jump[b][i];
        }
    }
    if (a == b) {
        return a;
    }
    for (int i = 19; i >= 0; --i) {
        if (jump[a][i] != jump[b][i]) {
            a = jump[a][i];
            b = jump[b][i];
        }
    }
    return jump[a][0];
}

void dfsTree(int u, int fa)
{
    jump[u][0] = fa;
    for (int i = 0; jump[u][i] != -1 && i < 20; ++ i) {
        jump[u][i + 1] = jump[ jump[u][i] ][i];
    }
    if (fa == -1) {
        depth[u] = 0;
    } else {
        depth[u] = depth[fa] + 1;
    }
    
    begin[u] = position[u] = len ++;
    FOR (v, adj[u]) {
        if ((*v) != fa) {
            dfsTree(*v, u);
        }
    }
    end[u] = len;
}

int tree[maxn * 4];
int sweep[maxn];

inline void insert(int num, int l, int r, int pos, int delta)
{
    if (l == r) {
        inc(tree[num], delta);
        return;
    }
    int mid = (l + r) / 2;
    if (pos <= mid) {
        insert(num * 2, l, mid, pos, delta);
    } else {
        insert(num * 2 + 1, mid + 1, r, pos, delta);
    }
    tree[num] = (tree[num * 2] + tree[num * 2 + 1]) % MOD;
}

inline int query(int num, int l, int r, int ll, int rr)
{
    if (ll <= l && r <= rr) {
        return tree[num];
    }
    if (l > rr || r < ll) {
        return 0;
    }
    int mid = (l + r) / 2;
    return (query(num * 2, l, mid, ll, rr) + query(num * 2 + 1, mid + 1, r, ll, rr)) % MOD;
}

int solve()
{
    int days;
    scanf("%d%d%d", &n, &m, &days);
    memset(head, 0, sizeof(head));
    memset(vis, false, sizeof(vis));
    tot = 2;
    for (int i = 0; i < m; ++ i) {
        int a, b;
        scanf("%d%d", &a, &b);
        -- a; --b;
        add(a, b);
        add(b, a);
    }
    
    memset(low, 0, sizeof(low));
    memset(mark, false, sizeof(mark));
    N = cnt = dep = 0;
    vector<int> roots;
	for (int i = 0; i < n; ++i) {
        if (!mark[i]) {
            dfs(i);
            roots.push_back(N - 1);
        }
    }
    
    for (int i = 0; i < N + 1; ++ i) {
        adj[i].clear();
    }
    for (int i = 0; i < roots.size(); ++ i) {
        int u = roots[i];
        adj[N].push_back(u);
        adj[u].push_back(N);
    }
    for (int i = 0; i < m; ++ i) {
        for (int p = head[i]; p; p = next[p]) {
            int j = vtx[p];
            if (color[i] != color[j]) {
                adj[color[i]].push_back(color[j]);
            }
        }
    }
    
    len = 0;
    memset(jump, -1, sizeof(jump));
    memset(depth, 0, sizeof(depth));
    dfsTree(N, -1);
    
    memset(tree, 0, sizeof(tree));
    memset(sweep, 0, sizeof(sweep));
    int ret = 0;
    for (int i = 0; i < days; ++ i) {
        char op[10];
        scanf("%s", op);
        if (op[0] == 'T') {
            int x, y, o;
            scanf("%d%d%d", &x, &y, &o);
//cerr << x << " " << y << " " << o << endl;
            -- x; -- y;
            
            x = color[x];
            y = color[y];
            
            int z = lca(x, y);
//rr << "   " << x << " " << y << " " << z << " " << o <<endl;
            if (z == N) {
//cerr << "cancel" << endl;
                continue; // cancelled
            }
            insert(1, 0, len - 1, position[x], o % MOD);
            insert(1, 0, len - 1, position[y], o % MOD);
            insert(1, 0, len - 1, position[z], (MOD - o % MOD) % MOD);
            insert(1, 0, len - 1, position[jump[z][0]], (MOD - o % MOD) % MOD);
        } else {
            int z;
            scanf("%d", &z);
            -- z;
            
            int size = (query(1, 0, len - 1, begin[color[z]], end[color[z]]) - sweep[z] + MOD) % MOD;
//cerr << z + 1 << " " << size << " " << sweep[z] << endl;
            
            inc(ret, size);
            inc(sweep[z], size);
            
            /*insert(1, 0, len - 1, position[color[z]], (MOD - size) % MOD);
            if (jump[z][0] != -1) {
                z = jump[z][0];
                insert(1, 0, len - 1, position[color[z]], size);
            }*/
       }
    }
    
    return ret;
}

int main()
{
    freopen("D.in", "r", stdin);
    freopen("D.out", "w", stdout);

    int tests, test = 1;
    for (scanf("%d", &tests); test <= tests; ++ test) {
        printf("Case #%d: %d\n", test, solve());
    }
    return 0;
}



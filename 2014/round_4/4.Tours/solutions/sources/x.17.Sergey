#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 1 << 21;
const int64 mod = 1e9 + 7;

int n, m, d, k;
vector<int> g[nmax];
int u1[nmax], v1[nmax], z[nmax], x[nmax], y[nmax], o[nmax];
char tip[nmax];

int dep[nmax], up[nmax], used[nmax], col[nmax];
int lca[nmax][20];

set<pii> brid;

int curt;
vector<int> ng[nmax];
vector<int> e;
int lft[nmax], rgt[nmax], tin[nmax], tout[nmax];
int64 t[nmax * 2], last[nmax];

void update(int v, int l, int r, int x, int c) {
 	if (l > x || r < x) return;
 	if (l == r) {
 	 	t[v] = (t[v] + c) % mod;
 	 	return;
 	}
 	int m = (l + r) / 2;
 	update(v * 2, l, m, x, c);
 	update(v * 2 + 1, m + 1, r, x, c);
 	t[v] = (t[v * 2] + t[v * 2 + 1]) % mod;
}

int64 get(int v, int l, int r, int l1, int r1) {
	if (l > r1 || r < l1) return 0;
	if (l1 <= l && r <= r1) return t[v];
	int m = (l + r) / 2;
	return (get(v * 2, l, m, l1, r1) + get(v * 2 + 1, m + 1, r, l1, r1)) % mod;
}

bool isp(int v, int u) {
 	return tin[v] <= tin[u] && tout[u] <= tout[v];
}

int lcalca(int v, int u) {
	if (isp(v, u))
		return v;
	ford(i, 20)
		if (!isp(lca[v][i], u))
			v = lca[v][i];
	return lca[v][0];
}

void update(int v, int u, int o) {
 	if (lca[v][19] != lca[u][19])
 		return;
 	int pr = lcalca(v, u);
 	update(1, 1, nmax, lft[v], o);
 	update(1, 1, nmax, lft[u], o);
 	update(1, 1, nmax, lft[pr], -o);
	if (lca[pr][0] != pr)
		update(1, 1, nmax, lft[lca[pr][0]], -o);
}

int64 get(int v) {
	return get(1, 1, nmax, lft[v], rgt[v]);
}

void go(int v, int pr) {
	e.pb(v);
	tin[v] = curt++;
	lft[v] = e.size();

	lca[v][0] = pr;
	for (int i = 1; i < 20; i ++)
		lca[v][i] = lca[lca[v][i-1]][i-1];

	used[v] = 1;
	forn(i, ng[v].size())
		if (!used[ng[v][i]])
			go(ng[v][i], v);
	rgt[v] = e.size();
	tout[v] = curt ++;
}

void build() {
 	memset(used, 0, sizeof used);
 	curt = 0;
 	e.clear();
 	forn(i, k)
 		if (!used[i])
 			go(i, i);
}

void dfs(int v, int dp, int pr) {
 	used[v] = 1;
 	dep[v] = dp;
 	up[v] = dp;
 	forn(i, g[v].size()) {
 	 	if (!used[g[v][i]]) {
 	 	 	dfs(g[v][i], dp + 1, v);
 	 	 	up[v] = min(up[v], up[g[v][i]]);
 	 	} else if (g[v][i] != pr) {
 	 	 	up[v] = min(up[v], dep[g[v][i]]);
 	 	}
 	}
 	if (pr != -1 && up[v] >= dp) {
 		brid.insert(mp(pr, v));
 		brid.insert(mp(v, pr));
     }
}

void paint(int v, int c) {
	used[v] = 1;
	col[v] = c;
	forn(i, g[v].size())
		if (!used[g[v][i]] && brid.count(mp(v, g[v][i])) == 0)
			paint(g[v][i], c);
}

void cond() {
	memset(used, 0, sizeof used);
	brid.clear();

	forn(i, n)
		if (!used[i])
			dfs(i, 0, -1); 
	k = 0;
	memset(used, 0, sizeof used);
	forn(i, n)
		if (!used[i]) {
			paint(i, k);
			k ++;
		}
	forn(i, k)
		ng[i].clear();
	set<pii> :: iterator it;
	for (it = brid.begin(); it != brid.end(); it++)
		ng[it->fs].pb(it->sc);
}

void pre_calc() {
	forn(i, n)
		g[i].clear();
	forn(i, m) {
	 	g[u1[i]].pb(v1[i]);
	 	g[v1[i]].pb(u1[i]);
	}
 	cond();
 	build();
}

void solve() {
	memset(t, 0, sizeof t); 
	pre_calc();
	forn(i, n)
		last[i] = 0;
	int64 res = 0;
	forn(i, d)
		if (tip[i] == 'S') {
			int64 now = get(col[z[i]]);
			res = (res + now - last[z[i]] + mod) % mod;
			last[z[i]] = now;
		} else {
			update(col[x[i]], col[y[i]], o[i]);
		}
	cout <<res << endl;
}

void read() {
	cin >> n >> m >> d;
	forn(i, m)  	{
		scanf("%d %d", &u1[i], &v1[i]);
		u1[i] --;
		v1[i] --;
	}
	forn(i, d) {
	 	scanf(" %c ", &tip[i]);
	 	if (tip[i] == 'S') {
	 		scanf("%d", &z[i]);
	 		z[i] --;
	 	} else {
	 		scanf("%d %d %d", &x[i], &y[i], &o[i]);
	 		x[i] --; y[i] --;
	 	}
	}
}

int main( int argc, char *argv[] ) {
  	if (argc != 3) {
  		freopen("input.txt", "r", stdin);
  		cerr << "working in normal mode, from stdin" << endl;
		int tst;
		cin >> tst;
		forn (i, tst) {
			printf("Case #%d: ", i + 1);
			read();
			solve();
			fprintf(stderr, "Case #%02d: done\n", i + 1);
		}
		cerr << "job done in " << clock() << endl;
		return 0;
	}
	int id = atoi(argv[1]);
	int mod = atoi(argv[2]);
	int tst;
	cin >> tst;
	forn (i, tst) {
		read();
		if (i % mod == id) {
			printf("Case #%02d: ", i + 1);
			solve();
			fprintf(stderr, "Case #%02d: done\n", i + 1);
		}
	}

  	return 0;
}

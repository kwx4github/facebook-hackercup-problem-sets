#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#include <queue>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>

using namespace std;

#define MOD 1000000007
#define MAXN (1<<17)

set<pair<int, int> > ART;
vector<vector<int> > E;

bool isart(int u, int v) {
  if(v < u) swap(u, v);
  return ART.find(make_pair(u, v)) != ART.end();
}

int dd;
int D[MAXN];
bool vis[MAXN];

int art(int u, int p) {
  vis[u] = true;
  if(D[u] != -1) return D[u];

  int result = D[u] = dd++;
  int chld = 0;
  for(int i = 0; i < E[u].size(); i++) {
    int v = E[u][i];
    if(v == p) continue;

    if(D[v] == -1) {
      int res = art(v, u);
      if(res > D[u]) {
// cout << "ART: " << u + 1 << ", " << v + 1 << endl;
        ART.insert(make_pair(min(u, v), max(u, v)));
      }
      result = min(result, res);
      chld++;
    } else {
      result = min(result, D[v]);
    }
  }
  return result;
}

vector<vector<int> > collapse(const vector<vector<int> >& E,
                              const vector<int>& L) {
  int N = E.size();
  vector<vector<int> > R(*max_element(L.begin(), L.end()) + 1, vector<int>());
  for(int i = 0; i < N; i++) {
    int x = L[i];
    for(int j = 0; j < E[i].size(); j++) {
      int y = L[E[i][j]];
      if(x != y) R[x].push_back(y);
    }
  }
  for(int i = 0; i < R.size(); i++) {
    sort(R[i].begin(), R[i].end());
    R[i].resize(unique(R[i].begin(), R[i].end()) - R[i].begin());
  }
  return R;
}

/* Node fields. */
int VC[MAXN];  // Vertex chain index
int VPOS[MAXN]; // Vertex chain position
int VP[MAXN]; // Vertex parent node (if needed) (-1 if none)

/* Chain fields. */
int CP[MAXN]; // Chain parent (-1 if none)
int CLN[MAXN]; // Number of vertexes in chain.

pair<int, int> hang(int u, int p) {
  int nodes = 1;
  pair<int, int> result(0, -1);
  for(int i = 0; i < E[u].size(); i++) {
    int v = E[u][i];
    if(v == p) continue;
    pair<int, int> res = hang(v, u);
    nodes += res.first;
    result = max(result, res);
  }
  VP[u] = p;
  E[u].clear();

  if(result.second == -1) result.second = u;
  E[result.second].push_back(u);
  CP[result.second] = p;

  result.first = nodes;
  return result;
}

/* Before calling E[i] represents the edges to vertex i.  After calling E[i] is
 * * a list (from root to child) of vertexes in chain i. */
void prep_heavylight() {
  hang(0, -1);
  for(int i = 0; i < E.size(); i++) {
    CLN[i] = E[i].size();
    for(int j = 0; j < E[i].size(); j++) {
      VC[E[i][j]] = i;
      VPOS[E[i][j]] = j;
    }
  }
}

struct ChainPart {
  ChainPart(int chain, int lo, int hi) : chain(chain), lo(lo), hi(hi) {}
  int chain;
  int lo; // lo node on the chain.
  int hi; // hi node on the chain. hi=CLN means chain connects to parent
};

/* Returns a list of all the sections of the chains on the path from u to v. */
vector<ChainPart> chain_path(int u, int v) {
  vector<pair<int, int> > cu, cv;
  for(; u != -1; u = CP[VC[u]]) cu.push_back(make_pair(VC[u], VPOS[u]));
  for(; v != -1; v = CP[VC[v]]) cv.push_back(make_pair(VC[v], VPOS[v]));
  reverse(cu.begin(), cu.end());
  reverse(cv.begin(), cv.end());
  if(cv.size() < cu.size()) cu.swap(cv);

  int i;
  for(i = 0; i < cu.size() && cu[i] == cv[i]; i++);

  vector<ChainPart> ret;
  if(i == cu.size()) {
    ret.push_back(
        ChainPart(cu.back().first, cu.back().second, cu.back().second));
  } else if(cu[i].first == cv[i].first) {
    ret.push_back(ChainPart(cu[i].first,
                            min(cu[i].second, cv[i].second),
                            max(cu[i].second, cv[i].second)));
    ++i;
  }
  for(int j = i; j < cu.size(); j++) {
    ret.push_back(ChainPart(cu[j].first, cu[j].second, CLN[cu[j].first]));
  }
  for(int j = i; j < cv.size(); j++) {
    ret.push_back(ChainPart(cv[j].first, cv[j].second, CLN[cv[j].first]));
  }
  return ret;
}

map<pair<int, int>, int> btt;

void bit_set(int id, int x, int v) {
  for(int i = x | MAXN; i < (MAXN << 1); i += i & -i) {
    btt[make_pair(id, i ^ MAXN)] += v;
  }
}

int bit_get(int id, int x) {
  int ret = 0;
  for(int i = x; i; i &= i - 1) ret += btt[make_pair(id, i)];
  return ret;
}

int main() {
  int T; cin >> T;
  for(int t = 1; t <= T; t++) {
    int N, M, DD;
    cin >> N >> M >> DD;

    E = vector<vector<int> >(N);
    for(int i = 0; i < M; i++) {
      int u, v; cin >> u >> v;
      u--; v--;

      E[u].push_back(v);
      E[v].push_back(u);
    }

    memset(D, -1, sizeof(D));
    memset(vis, 0, sizeof(vis));
    for(int i = 0; i < N; i++) {
      if(vis[i]) continue;
      dd = 0;
      art(i, -1);
    }

    int col = 0;
    vector<int> L(N);
    memset(vis, 0, sizeof(vis));
    for(int i = 0; i < N; i++) {
      if(vis[i]) continue;

      queue<int> q;
      q.push(i);
      vis[i] = true;
      while(!q.empty()) {
        int u = q.front(); q.pop();
        L[u] = col;

        for(int j = 0; j < E[u].size(); j++) {
          int v = E[u][j];
          if(!vis[v] && !isart(u, v)) {
            vis[v] = true;
            q.push(v);
          }
        }
      }

      col++;
    }

    col = 0;
    vector<int> L2(N);
    memset(vis, 0, sizeof(vis));
    for(int i = 0; i < N; i++) {
      if(vis[i]) continue;

      queue<int> q;
      q.push(i);
      vis[i] = true;
      while(!q.empty()) {
        int u = q.front(); q.pop();
        L2[u] = col;

        for(int j = 0; j < E[u].size(); j++) {
          int v = E[u][j];
          if(!vis[v]) {
            vis[v] = true;
            q.push(v);
          }
        }
      }

      col++;
    }

    E = collapse(E, L);
    prep_heavylight();

    btt.clear();
    long long result = 0;
    vector<int> LST(N, 0);
    for(int i = 0; i < DD; i++) {
      string cmd; cin >> cmd;
      if(cmd == "T") {
        int x, y, o; cin >> x >> y >> o; x--; y--;
        if(L2[x] != L2[y]) continue;
        vector<ChainPart> chns = chain_path(L[x], L[y]);
        for(int i = 0; i < chns.size(); i++) {
          bit_set(chns[i].chain, chns[i].lo + 1, o);
          bit_set(chns[i].chain, chns[i].hi + 2, -o);
        }
      } else {
        int z; cin >> z; z--;
        int zl = L[z];
        int val = bit_get(VC[zl], VPOS[zl] + 1);
        result += val - LST[z];
        LST[z] = val;
      }
    }

    result %= MOD;
    cout << "Case #" << t << ": " << result << endl;
  }
  return 0;
}

#include<unordered_set>
#include<unordered_map>
#include<functional>
#include<algorithm>
//#include<iostream>
#include<numeric>
#include<cassert>
#include<cstring>
#include<cstdio>
#include<vector>
#include<queue>
//#include<cmath>
#include<set>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b);i>=(e);--i)
#define FOReach(it,V) for(__typeof((V).begin()) it=(V).begin();it!=(V).end();++it)

#define PB push_back
#define ALL(V) (V).begin(),(V).end()
#define SIZE(V) ((int)(V).size())

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

int __stmp;
#define scanf __stmp=scanf


const int INF = 1000000001;
const int MOD = 1000000007;
const int MAX = 100010;

class tree {
	public:
		void init(int n) {
			for(size=1;size<n;size*=2);
			V.assign(2*size+3, 0);
		}
		void add(int b, int e, int k) { // [b, e]
			_add(size+b, size+e+1, k);
		}
		LL get(int ind) {
			LL ret = 0;
			for(ind+=size;ind;ind/=2)
				ret += V[ind];
			return ret;
		}
	private:
		int size;
		VLL V;
		
		void _add(int b, int e, int k) {
			if(b + 1 == e) {
				V[b] += k;
				return;
			}
			if(b&1) {
				V[b] += k;
				_add(b+1, e, k);
				return;
			}
			if(e&1) {
				V[e-1] += k;
				_add(b, e-1, k);
				return;
			}
			_add(b/2, e/2, k);
		}
};

namespace L {
	const int N = MAX;

	int n;
	vector<int> graph[N];

	int in[N], out[N], p[N], size[N], ind[N], pos[N], depth[N], dfstime;
	deque<int> ladder[N];
	tree T[N];

	void dfs(int u) {
	    in[u] = dfstime++; size[u] = 1; int best_s = 0; ind[u] = u;
	    for(int v : graph[u]) if (v != p[u]) {
	        p[v] = u; depth[v] = depth[u] + 1;
	        dfs(v);
	        if (size[v] > best_s) { best_s = size[v]; ind[u] = ind[v]; }
	        size[u] += size[v];
	    }
	    ladder[ind[u]].push_front(u);
	    out[u] = dfstime++;
	}

	void init(int root) {
		dfstime = 0; p[root] = -1; depth[root] = 0; dfs(root);
		REP(i,n)
		{
			T[i].init(SIZE(ladder[i]));
			REP(j,SIZE(ladder[i]))
				pos[ladder[i][j]] = j;
		}
	}

	inline bool is_anc(int a, int b) { return (in[a] <= in[b] && out[b] <= out[a]); }

	int LCA(int a, int b) {
	    while(ind[a] != ind[b])
	    	if(depth[ladder[ind[a]][0]] < depth[ladder[ind[b]][0]])
	    		b = p[ladder[ind[b]][0]];
	    	else
	    		a = p[ladder[ind[a]][0]];
	    return depth[a] < depth[b] ? a : b;
	}
	
	
	void add_to_path(int u, int P, int k) {
		while(ind[u] != ind[P])
		{
			T[ind[u]].add(0, pos[u], k);
			u = p[ladder[ind[u]][0]];
		}
		T[ind[u]].add(pos[P], pos[u], k);
	}
};

VI G[MAX];
int pre[MAX], low[MAX];
int dfs_time;

int CC[MAX];
int cc_n;

int n, m;

set<PII> B;

void dfs_bridges(int u, int p) {
	pre[u] = low[u] = dfs_time++;
	for(int v : G[u])
		if(v != p) {
			if(pre[v] == -1) {
				dfs_bridges(v, u);
				low[u] = min(low[u], low[v]);
			} else low[u] = min(low[u], pre[v]);
			
			if(low[v] == pre[v]) B.insert(minmax(u, v));
		}
}

void bridges() {
	B.clear();
	dfs_time = 0;
	REP(i,n) pre[i] = -1;
	REP(i,n)
		if(pre[i] == -1)
			dfs_bridges(i, -1);
	REP(u,n)
		REP(j,SIZE(G[u]))
		{
			int v = G[u][j];
			if(B.find(minmax(u, v)) != B.end()) {
				G[u][j] = G[u].back();
				G[u].pop_back();
				j--;
			}
		}
}

void dfs_cc(int u, int k) {
	CC[u] = k;
	for(int v : G[u])
		if(CC[v] == -1)
			dfs_cc(v, k);
}

void cc() {
	cc_n = 0;
	REP(i,n) CC[i] = -1;
	REP(i,n)
		if(CC[i] == -1)
			dfs_cc(i, cc_n++);
}

int S[MAX];
int find_set(int x) { return x == S[x] ? x : S[x] = find_set(S[x]); }
bool link(int x, int y) {
	x = find_set(x);
	y = find_set(y);
	if(x == y) return false;
	S[x] = y;
	return true;
}

void build() {
	L::n = cc_n + 1;
	REP(i,L::n)
	{
		L::ladder[i].clear();
		L::graph[i].clear();
		S[i] = i;
	}
	for(PII e : B)
	{
		int a = CC[e.ST];
		int b = CC[e.ND];
		if(link(a, b)) {
			L::graph[a].PB(b);
			L::graph[b].PB(a);
		}
	}
	REP(i,L::n)
		if(S[i] == i) {
			L::graph[i].PB(cc_n);
			L::graph[cc_n].PB(i);
		}
	L::init(cc_n);
}

int last[MAX];

int main(int argc, char *argv[]) {
	int Z;
	scanf("%d", &Z);
	FOR(z,1,Z)
	{
		printf("Case #%d: ", z);
		int d;
		scanf("%d %d %d", &n, &m, &d);
		REP(i,n)
		{
			G[i].clear();
			last[i] = 0;
		}
		while(m--)
		{
			int a, b;
			scanf("%d %d", &a, &b);
			a--, b--;
			G[a].PB(b);
			G[b].PB(a);
		}
		bridges();
		cc();
		build();
		LL res = 0;
		while(d--)
		{
			char c;
			scanf(" %c", &c);
			if(c == 'T') {
				int a, b, k;
				scanf("%d %d %d", &a, &b, &k);
				a--, b--;
				a = CC[a];
				b = CC[b];
				int lca = L::LCA(a, b);
				if(lca == cc_n) continue;
				L::add_to_path(a, lca, k);
				L::add_to_path(b, lca, k);
				L::add_to_path(lca, lca, -k);
			} else {
				assert(c == 'S');
				int v;
				scanf("%d", &v);
				v--;
				int cc_v = CC[v];
				LL s = L::T[L::ind[cc_v]].get(L::pos[cc_v]);
				res = (res + (s-last[v])) % MOD;
				last[v] = s;
			}
		}
		printf("%lld\n", res);
	}
	return 0;
}


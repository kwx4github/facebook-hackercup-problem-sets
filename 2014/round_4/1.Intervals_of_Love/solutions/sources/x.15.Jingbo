#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <cassert>
#include <queue>
using namespace std;

#define PB push_back
#define MP make_pair

#define FOR(i,a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++ i)

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> PII;

const int MOD = 1000000007;
const int maxn = 1000000;

struct Node
{
    int answer, length;
    int left, leftLength;
    int right, rightLength;
    
    Node() {
        length = answer = 0;
        left = right = -1;
        leftLength = rightLength = 0;
    }
    
    void set(int x) {
        answer = length = 1;
        left = right = x;
        leftLength = rightLength = 1;
    }
};

inline int getAnswer(int len)
{
    return (long long)len * (len + 1) >> 1;
}

Node tree[maxn * 4];

inline void inc(int &a, int b)
{
    a += b;
    if (a >= MOD) {
        a -= MOD;
    }
}

inline void dec(int &a, int b)
{
    a -= b;
    if (a < 0) {
        a += MOD;
    }
}

inline void merge(Node &root, const Node &left, const Node &right)
{
    root.length = left.length + right.length;
    
    root.answer = (left.answer + right.answer) % MOD;
    
    if (left.right + 1 == right.left) {
        dec(root.answer, getAnswer(left.rightLength));
        dec(root.answer, getAnswer(right.leftLength));
        inc(root.answer, getAnswer(left.rightLength + right.leftLength));
    }
    
    
    root.left = left.left;
    root.leftLength = left.leftLength;
    
    if (left.leftLength == left.length && left.left + left.leftLength == right.left) {
        root.leftLength += right.leftLength;
    }
    
    root.right = right.right;
    root.rightLength = right.rightLength;
    if (right.rightLength == right.length && right.right - right.rightLength == left.right) {
        root.rightLength += left.rightLength;
    }
}

int a[maxn];

void build(int num, int l, int r)
{
    if (l == r) {
        tree[num].set(a[l]);
        return;
    }
    int middle = l + r >> 1;
    build(num * 2, l, middle);
    build(num * 2 + 1, middle + 1, r);
    
    merge(tree[num], tree[num * 2], tree[num * 2 + 1]);
}

void modify(int num, int l, int r, int pos, int key)
{
    if (l == r) {
        tree[num].set(key);
        return;
    }
    int middle = l + r >> 1;
    
    if (pos <= middle) {
        modify(num * 2, l, middle, pos, key);
    } else {
        modify(num * 2 + 1, middle + 1, r, pos, key);
    }
    
    merge(tree[num], tree[num * 2], tree[num * 2 + 1]);
}

Node query(int num, int l, int r, int ll, int rr)
{
    if (ll <= l && r <= rr) {
        return tree[num];
    }
    
    if (l > rr || r < ll) {
        return Node();
    }
    
    int middle = l + r >> 1;
    Node ret;
    merge(ret, query(num * 2, l, middle, ll, rr), query(num * 2 + 1, middle + 1, r, ll, rr));
    return ret;
}

int solve()
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; ++ i) {
        scanf("%d", &a[i]);
    }
    build(1, 0, n - 1);
    
    int m, ret = 0;
    for (scanf("%d", &m); m --;) {
        int op, x, y;
        scanf("%d%d%d", &op, &x, &y);
        if (op == 0) {
            assert(0 <= x && x < n);
            modify(1, 0, n - 1, x, y);
        } else {
//cerr << op << " " << x << " " << y << endl;
            assert(0 <= x);
            assert(x <= y);
            assert(y < n);
            Node temp = query(1, 0, n - 1, x, y);
            inc(ret, temp.answer);
        }
    }
    return ret;
}

int main()
{
    freopen("A.in", "r", stdin);
    freopen("A.out", "w", stdout);

    int tests, test = 1;
    for (scanf("%d", &tests); test <= tests; ++ test) {
        int answer = solve();
        printf("Case #%d: %d\n", test, answer);
    }
    return 0;
}


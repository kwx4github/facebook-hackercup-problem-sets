/*
	Author : ChnLich
*/
#include<cstdio>
#include<cmath>
#include<iomanip>
#include<cstring>
#include<cstdlib>
#include<ctime>
#include<iostream>
#include<sstream>
#include<fstream>
#include<algorithm>
#include<vector>
#include<list>
#include<stack>
#include<queue>
#include<deque>
#include<set>
#include<map>
#include<string>
#include<bitset>
#include<functional>
#include<utility>

using namespace std;

typedef long long llint;
typedef pair<int,int> ipair;
typedef unsigned int ui;
typedef unsigned long long ull;
#define pb push_back
#define fi first
#define se second
#define mp make_pair

const int MOD=1000000007,dx[]={0,1,0,-1},dy[]={1,0,-1,0};
const double eps=1e-8;

void read(int &k)
{
	k=0; char x=getchar();
	while(x<'0'||x>'9') x=getchar();
	while(x>='0'&&x<='9') { k=k*10-48+x; x=getchar(); }
}

int T,n,m,L,R,ope,a[1000010];

struct node
{
	int sum;
	int Lnum,Lcnt,Rnum,Rcnt;
};

struct SegmentTree
{
	node c[1<<21];
	node join(const node&y,int ly,const node&z,int lz)
	{
		node x;
		x.sum=(y.sum+z.sum)%MOD;
		x.Lnum=y.Lnum;
		x.Lcnt=y.Lcnt;
		x.Rnum=z.Rnum;
		x.Rcnt=z.Rcnt;
		if (y.Rnum==z.Lnum-1)
		{
			x.sum=(x.sum+1ll*y.Rcnt*z.Lcnt)%MOD;
			if (y.Lcnt==ly) x.Lcnt+=z.Lcnt;
			if (z.Rcnt==lz) x.Rcnt+=y.Rcnt;
		}
		return x;
	}
	void maketree(int L,int R,int now)
	{
		if (L==R)
		{
			c[now].sum=1;
			c[now].Lnum=c[now].Rnum=a[L];
			c[now].Lcnt=c[now].Rcnt=1;
			return;
		}
		int t=(L+R)>>1;
		maketree(L,t,now*2);
		maketree(t+1,R,now*2+1);
		c[now]=join(c[now*2],t-L+1,c[now*2+1],R-t);
	}
	node ask(int L,int R,int l,int r,int now)
	{
		if (L==l&&R==r) return c[now];
		int t=(L+R)>>1;
		if (r<=t) return ask(L,t,l,r,now*2);
		else if (l>t) return ask(t+1,R,l,r,now*2+1);
		return join(ask(L,t,l,t,now*2),t-l+1,ask(t+1,R,t+1,r,now*2+1),r-t);
	}
	void modify(int L,int R,int pos,int num,int now)
	{
		if (L==R)
		{
			c[now].sum=1;
			c[now].Lnum=c[now].Rnum=num;
			return;
		}
		int t=(L+R)>>1;
		if (pos<=t) modify(L,t,pos,num,now*2);
		else modify(t+1,R,pos,num,now*2+1);
		c[now]=join(c[now*2],t-L+1,c[now*2+1],R-t);
	}
} A;

int main()
{
	freopen("A.in","r",stdin);
	freopen("A.out","w",stdout);
	
	scanf("%d",&T);
	for(int tt=1;tt<=T;tt++)
	{
		read(n);
		for(int i=1;i<=n;i++) read(a[i]);
		read(m);
		int ans=0;
		A.maketree(1,n,1);
		for(;m--;)
		{
			read(ope);
			if (ope==1)
			{
				read(L); L++;
				read(R); R++;
				ans=(ans+A.ask(1,n,L,R,1).sum)%MOD;
			} else
			{
				read(L); L++;
				read(R);
				A.modify(1,n,L,R,1);
			}
		}
		fprintf(stderr,"%d\n",tt);
		printf("Case #%d: %d\n",tt,ans);
	}
	
	return 0;
}

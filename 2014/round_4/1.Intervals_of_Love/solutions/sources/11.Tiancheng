#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxn=4<<20;
const int64 MOD=1000000007;

int n;
int a[maxn];
int64 cL[maxn],cR[maxn];
int64 h[maxn];

void check2(int p,int s,int t)
{
	int m=(s+t)/2;
	cL[p]=(cL[p*2+1]==m-s+1 && a[m]==a[m+1])?(cL[p*2+1]+cL[p*2+2]):cL[p*2+1];
	cR[p]=(cR[p*2+2]==t-m && a[m]==a[m+1])?(cR[p*2+2]+cR[p*2+1]):cR[p*2+2];
	h[p]=h[p*2+1]+h[p*2+2];
	if (a[m]==a[m+1]) h[p]+=cR[p*2+1]*cL[p*2+2];
}
void init(int p,int s,int t)
{
	if (s==t)
	{
		cL[p]=cR[p]=1;
		h[p]=1;
		return;
	}
	int m=(s+t)/2;
	init(p*2+1,s,m);
	init(p*2+2,m+1,t);
	check2(p,s,t);
}
void update(int p,int s,int t,int key,int val)
{
	if (s==t) return;
	int m=(s+t)/2;
	if (key<=m)
		update(p*2+1,s,m,key,val);
	else
		update(p*2+2,m+1,t,key,val);
	check2(p,s,t);
}
int64 solve(int p,int s,int t,int L,int R,int64& prev)
{
	if (L<=s && R>=t)
	{
		int64 ret=h[p];
		if (prev>0 && a[s]==a[s-1]) ret+=prev*cL[p];
		if (cR[p]==t-s+1 && prev>0 && a[s]==a[s-1])
			prev=cR[p]+prev;
		else
			prev=cR[p];
		return ret;
	}
	int m=(s+t)/2;
	int64 ret=0;
	if (L<=m) ret+=solve(p*2+1,s,m,L,R,prev);
	if (m<R) ret+=solve(p*2+2,m+1,t,L,R,prev);
	return ret;
}
int main()
{
	if (0)
	{
		freopen("big.txt","w",stdout);
		printf("10\n");
		for (int k=0;k<100;k++)
		{
			int n=1000;//000;
			int m=1000;//000;
			printf("%d\n",n);
			for (int i=0;i<n;i++)
				printf("%d ",rand());
			printf("\n");
			printf("%d\n",m);
			for (int i=0;i<m;i++)
			{
				int op=rand()%2;
				int a,b;
				if (op==0)
				{
					a=rand()%n;
					b=rand()%100;
				}
				else
				{
					a=rand()%n;
					b=rand()%n;
					if (a>b) swap(a,b);
				}
				printf("%d %d %d\n",op,a,b);
			}
		}
		return 0;
	}
	//freopen("big.txt","r",stdin);
	//freopen("input.txt","r",stdin);
	freopen("a.in","r",stdin); freopen("a.out","w",stdout);
	int testcase;
	scanf("%d",&testcase);
	for (int case_id=1;case_id<=testcase;case_id++)
	{
		scanf("%d",&n);
		for (int i=0;i<n;i++) scanf("%d",&a[i]);
		for (int i=0;i<n;i++) a[i]-=i;
		init(0,0,n-1);
		int m;
		scanf("%d",&m);
		int64 ret=0;
		for (int i=0;i<m;i++)
		{
			int op;
			scanf("%d",&op);
			if (op==0)
			{
				int p,k;
				scanf("%d%d",&p,&k);
				a[p]=k-p;
				update(0,0,n-1,p,k);
			}
			else
			{
				int L,R;
				int64 prev=0;
				scanf("%d%d",&L,&R);
				int64 tmp=solve(0,0,n-1,L,R,prev);
				ret+=tmp;
				ret%=MOD;
				/*
				int64 t2=0;
				for (int i=L;i<=R;i++)
					for (int j=i;j<=R;j++)
						if (a[j]==a[i])
							t2++;
						else
							break;
				if (t2!=tmp)
					printf("EE\n");
				*/
			}
		}
		printf("Case #%d: %d\n",case_id,(int)ret);
		fflush(stdout);
	}
	return 0;
}


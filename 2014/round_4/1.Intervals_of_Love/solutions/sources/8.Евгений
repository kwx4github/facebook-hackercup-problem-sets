import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import com.sun.org.apache.bcel.internal.generic.LSTORE;

public class A {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static int intSum[][], leftValue[][], leftCount[][], rightValue[][], rightCount[][];
	static final int MOD = 1000000007;
	static int cIS, cLV, cLC, cRV, cRC, cLen;
	
	static int add(int a, int b) {
		int res = a + b;
		if (res >= MOD) {
			res -= MOD;
		}
		return res;
	}
	
	static int sum(int count) {
		return (int) (((long) count * (count + 1) >> 1) % MOD);
	}
	
	static void load(int i, int j) {
		cIS = intSum[i][j];
		cLV = leftValue[i][j];
		cLC = leftCount[i][j];
		cRV = rightValue[i][j];
		cRC = rightCount[i][j];
		cLen = 1 << i;
	}
	
	static void append(int i, int j) {
		int nIS = intSum[i][j];
		int nLV = leftValue[i][j];
		int nLC = leftCount[i][j];
		int nRV = rightValue[i][j];
		int nRC = rightCount[i][j];
		int nLen = 1 << i;
		cIS = add(cIS, nIS);
		if (cRV == nLV) {
			if (cRC < cLen && nLC < nLen) {
				cIS = add(cIS, sum(cRC + nRC));
			}
			if (cLC == cLen) {
				cLC += nLC;
			}
			cRV = nRV;
			cRC = nRC == nLen ? nRC + cRC : nRC;
		} else {
			if (cRC < cLen) {
				cIS = add(cIS, sum(cRC));
			}
			if (nLC < nLen) {
				cIS = add(cIS, sum(nLC));
			}
			cRV = nRV;
			cRC = nRC;
		}
		cLen += nLen;
	}
	
	static void set(int i, int val) {
		val -= i;
		intSum[0][i] = 0;
		leftValue[0][i] = val;
		leftCount[0][i] = 1;
		rightValue[0][i] = val;
		rightCount[0][i] = 1;
		i >>= 1;
		for (int j = 1; j < intSum.length && i < intSum[j].length; j++, i >>= 1) {
			load(j - 1, i << 1);
			append(j - 1, (i << 1) + 1);
			intSum[j][i] = cIS;
			leftValue[j][i] = cLV;
			leftCount[j][i] = cLC;
			rightValue[j][i] = cRV;
			rightCount[j][i] = cRC;
		}
	}
	
	static class Pair {
		final int i, j;

		public Pair(int i, int j) {
			this.i = i;
			this.j = j;
		}
	}
	
	static int getAns(int l, int r) {
		boolean have = false;
		List<Pair> pairs = new ArrayList<>();
		for (int i = 0; l < r; i++, l >>= 1, r >>= 1) {
			if ((l & 1) != 0) {
				if (have) {
					append(i, l);
				} else {
					load(i, l);
					have = true;
				}
				++l;
			}
			if ((r & 1) != 0) {
				--r;
				pairs.add(new Pair(i, r));
			}
		}
		for (int i = pairs.size() - 1; i >= 0; i--) {
			Pair p = pairs.get(i);
			if (have) {
				append(p.i, p.j);
			} else {
				load(p.i, p.j);
				have = true;
			}
		}
		if (!have) {
			throw new AssertionError();
		}
		int ans = add(cIS, sum(cLC));
		if (cLC < cLen) {
			ans = add(ans, sum(cRC));
		}
		return ans;
	}
	
	static void solve() throws Exception {
		int n = nextInt();
		intSum = new int[32 - Integer.numberOfLeadingZeros(n)][];
		leftValue = new int[32 - Integer.numberOfLeadingZeros(n)][];
		leftCount = new int[32 - Integer.numberOfLeadingZeros(n)][];
		rightValue = new int[32 - Integer.numberOfLeadingZeros(n)][];
		rightCount = new int[32 - Integer.numberOfLeadingZeros(n)][];
		for (int i = 0, j = n; j != 0; i++, j >>= 1) {
			intSum[i] = new int[j];
			leftValue[i] = new int[j];
			leftCount[i] = new int[j];
			rightValue[i] = new int[j];
			rightCount[i] = new int[j];
		}
		for (int i = 0; i < n; i++) {
			set(i, nextInt());
		}
		int m = nextInt();
		int ans = 0;
		for (int i = 0; i < m; i++) {
			int op = nextInt();
			switch (op) {
			case 0:
				set(nextInt(), nextInt());
				break;
			case 1:
				ans = add(ans, getAns(nextInt(), nextInt() + 1));
				break;
			default:
				throw new AssertionError();
			}
		}
		printCase();
		out.println(ans);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
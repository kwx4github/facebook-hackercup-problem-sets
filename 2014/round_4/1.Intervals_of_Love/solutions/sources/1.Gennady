#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

struct Segment {
  int L;
  int R;
  long long cnt;
  int len;
  int lpos;
  int rpos;
};

Segment ZERO;

const int N = (int)1e7;

Segment a[N];

int X[N];

Segment unite(Segment a, Segment b) {
  if (a.L == ZERO.L) {
    return b;
  }
  Segment c;
  c.L = a.L;
  if (a.L == a.len && X[a.rpos] + 1 == X[b.lpos]) c.L += b.L;
  c.R = b.R;
  if (b.R == b.len && X[a.rpos] + 1 == X[b.lpos]) c.R += a.R;
  c.cnt = a.cnt + b.cnt;
  if (X[a.rpos] + 1 == X[b.lpos]) c.cnt += (long long)a.R * b.L;
  c.len = a.len + b.len;
  c.lpos = a.lpos;
  c.rpos = b.rpos;
  return c;
}

void build(int x, int l, int r) {
  if (l == r) {
    a[x].L = 1;
    a[x].R = 1;
    a[x].cnt = 1;
    a[x].len = 1;
    a[x].lpos = l;
    a[x].rpos = r;
    return;
  }
  int y = (l + r) >> 1;
  build(x + x, l, y);
  build(x + x + 1, y + 1, r);
  a[x] = unite(a[x + x], a[x + x + 1]);
}

void modify(int x, int l, int r, int p) {
  if (l == r) {
    return;
  }
  int y = (l + r) >> 1;
  if (p <= y) modify(x + x, l, y, p);
  else modify(x + x + 1, y + 1, r, p);
  a[x] = unite(a[x + x], a[x + x + 1]);
}

Segment ans;

void get(int x, int l, int r, int ll, int rr) {
  if (r < ll || rr < l) return;
  if (ll <= l && r <= rr) {
    ans = unite(ans, a[x]);
    return;
  }
  int y = (l + r) >> 1;
  get(x + x, l, y, ll, rr);
  get(x + x + 1, y + 1, r, ll, rr);
}

const int md = 1000000007;

int main() {
  freopen("in", "r", stdin);
  freopen("out", "w", stdout);
  ZERO.L = ZERO.R = ZERO.cnt = ZERO.len = ZERO.lpos = ZERO.rpos = -42;
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) scanf("%d", X + i);
    build(1, 0, n - 1);
    int tt;
    scanf("%d", &tt);
    long long res = 0;
    while (tt--) {
      int com, x, y;
      scanf("%d %d %d", &com, &x, &y);
      if (com == 1) {
        ans = ZERO;
        get(1, 0, n - 1, x, y);
        res += ans.cnt;
        res %= md;
      } else {
        X[x] = y;
        modify(1, 0, n - 1, x);
      }
    }
    cout << (res % md) << endl;
  }
  return 0;
}

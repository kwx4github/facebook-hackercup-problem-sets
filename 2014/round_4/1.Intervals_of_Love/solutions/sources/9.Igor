#include<unordered_set>
#include<unordered_map>
#include<functional>
#include<algorithm>
//#include<iostream>
#include<numeric>
#include<cassert>
#include<cstring>
#include<cstdio>
#include<vector>
#include<queue>
//#include<cmath>
#include<set>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b);i>=(e);--i)
#define FOReach(it,V) for(__typeof((V).begin()) it=(V).begin();it!=(V).end();++it)

#define PB push_back
#define ALL(V) (V).begin(),(V).end()
#define SIZE(V) ((int)(V).size())

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

int __stmp;
#define scanf __stmp=scanf


const int INF = 1000000001;
const int MOD = 1000000007;
const int MAX = 1000010;

struct node {
	int st, last, pref_len, suf_len, len;	
	LL cnt;
	node(int v=0) {
		st = last = v;
		pref_len = suf_len = len = 1;
		cnt = 0;
	}
};

inline LL f(LL x) { return x*(x+1)/2; }

node operator+(const node &a, const node &b) {
	node ret;
	ret.st = a.st;
	ret.last = b.last;
	ret.len = a.len + b.len;
	bool k = false;
	if(a.pref_len == a.len && a.last == b.st) {
		k = true;
		ret.pref_len = a.len + b.pref_len;
	}
	else
		ret.pref_len = a.pref_len;
	if(a.last == b.st && b.suf_len == b.len) {
		k = true;
		ret.suf_len = a.suf_len + b.len;
	}
	else
		ret.suf_len = b.suf_len;
	ret.cnt = a.cnt + b.cnt;
	if(!k) {
		if(a.last == b.st)
			ret.cnt += f(a.suf_len + b.pref_len);
		else {
			if(a.suf_len != a.len)
				ret.cnt += f(a.suf_len);
			if(b.pref_len != b.len)
				ret.cnt += f(b.pref_len);
		}
	}
	return ret;
}

class tree {
	public:
		void init(int n) {
			for(size=1;size<n;size*=2);
			V.resize(2*size+3);
			REP(i,size) V[size+i] = node(-INF-i);
			FORD(i,size-1,1)
				V[i] = V[2*i] + V[2*i+1];
		}
		
		void set(int ind, int v) {
			ind += size;
			V[ind] = node(v);
			for(ind/=2;ind;ind/=2)
				V[ind] = V[2*ind] + V[2*ind+1];
		}
		
		LL query(int b, int e) { // [b, e]
			// printf("   %d %d %lld\n", V[5].pref_len, V[5].suf_len, V[5].cnt);
			// printf("   %d %d %lld\n", V[6].pref_len, V[6].suf_len, V[6].cnt);
			node v = _get(size+b, size+e+1);
			// printf("%d %d %lld\n", v.pref_len, v.suf_len, v.cnt);
			LL ret = v.cnt;
			if(v.pref_len == v.len) ret += f(v.pref_len);
			else ret += f(v.pref_len) + f(v.suf_len);
			return ret;
		}
		
	private:
		int size;
		vector<node> V;	
		
		node _get(int b, int e) {
			if(b + 1 == e) return V[b];
			if(b&1) return V[b] + _get(b+1, e);
			if(e&1) return _get(b, e-1) + V[e-1];
			return _get(b/2, e/2);
		}
};

tree T;

int n;

int main(int argc, char *argv[]) {
	int Z;
	scanf("%d", &Z);
	FOR(z,1,Z)
	{
		printf("Case #%d: ", z);
		scanf("%d", &n);
		T.init(n);
		REP(i,n)
		{
			int a;
			scanf("%d", &a);
			T.set(i, a-i);
		}
		int m;
		scanf("%d", &m);
		LL res = 0;
		while(m--)
		{
			int op;
			scanf("%d", &op);
			if(op == 0) {
				int p, k;
				scanf("%d %d", &p, &k);
				T.set(p, k-p);
			} else {
				int a, b;
				scanf("%d %d", &a, &b);
				res = (res + T.query(a, b)) % MOD;
			}
		}
		printf("%lld\n", res);
	}
	return 0;
}


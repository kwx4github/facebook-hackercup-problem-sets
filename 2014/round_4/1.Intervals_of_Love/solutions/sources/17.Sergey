#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int64, int64> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 1000 * 1001;
const int root = 800;
const int64 mod = 1e9 + 7;

struct part {
	vector<int> a;
	int64 res;
	pii last, fst;

	void add(int x) {
		a.pb(x);
	}

	void change(int p, int x) {
	 	a[p] = x;
	 	calc();
	}

	void calc() {
		pair<int, int> now;
		res = 0;
		now = mp(-100000, 0);
		fst = now;
		forn(i, a.size()) {
			if (a[i] == now.fs + 1) {
			 	now.sc ++;
				now.fs ++;
			 	continue;
			}
			res = (res + 1ll * now.sc * (now.sc + 1) / 2) % mod;
			if (fst.sc == 0)
				fst = now;
			now = mp(a[i], 1);
		}
		last = now;
		if (fst.sc == 0)
			fst = last;
	}

	void calc(int st, int fn, pii &now, int64 &rs) {
		if (st != 0 || fn < a.size())
		{
			for (int i = st; i < a.size() && i <= fn; i ++) {
				if (a[i] == now.fs + 1) {
				 	now.sc ++;
					now.fs ++;
				 	continue;
				}
				rs = (rs + 1ll * now.sc * (now.sc + 1) / 2) % mod;
				now = mp(a[i], 1);
			}
			return;
		}
		rs = (rs + res) % mod;
		if (a[0] == now.fs + 1) {
			if (fst.sc != a.size())
				rs = (rs - 1ll * fst.sc * (fst.sc + 1) / 2) % mod;
			rs = (rs + mod) % mod;
			now.sc += fst.sc;
			now.fs = fst.fs;
			if (fst.sc == a.size()) return;
		}
		rs = (rs + 1ll * now.sc * (now.sc + 1) / 2) % mod;
		now = last;	
	}

	void clean() {
	 	a.clear();
		res = 0;
		last = fst = mp(-100000, 0);
	}

};

part parts[nmax];
int n, m, k;
int a[nmax];
int tip[nmax], l[nmax], r[nmax];

void pre_calc() {
	k = (n + root - 1) / root;
	forn(i, k)
		parts[i].clean();
	forn(i, n)
		parts[i/root].add(a[i]);
	forn(i, k)
		parts[i].calc();
}

int64 calc(int l, int r) {
	int64 res = 0;
	pii now = mp(-10000, 0);
	forn(i, k)
	{
	 	if (i * root > r) break;
	 	if ((i + 1) * root > l)
	 		parts[i].calc(max(0, l - i * root), min(root, r - i * root), now, res);
	}
	res = (res + 1ll * now.sc * (now.sc + 1) / 2) % mod;
	return res;
}

void solve() {
	int64 res = 0;
	pre_calc();
	forn(i, m)
		if (tip[i] == 0)
			parts[l[i]/root].change(l[i] % root, r[i]);
		else {
			res = (res + calc(l[i], r[i])) % mod;
		}
	cout << res << endl;
}

void read() {
	cin >> n;
	forn(i, n)
		scanf("%d", &a[i]);
	cin >> m;
	forn(i, m)
		scanf("%d %d %d", &tip[i], &l[i], &r[i]);
	
}

int main( int argc, char *argv[] ) {
  	if (argc != 3) {
  		cerr << "working in normal mode, from stdin" << endl;
		int tst;
		cin >> tst;
		forn (i, tst) {
			read();
			printf("Case #%d: ", i + 1);
			solve();
			fprintf(stderr, "Case #%02d: done\n", i + 1);
		}
		cerr << "job done in " << clock() << endl;
		return 0;
	}
	int id = atoi(argv[1]);
	int mod = atoi(argv[2]);
	int tst;
	cin >> tst;
	forn (i, tst) {
		read();
		if (i % mod == id) {
			printf("Case #%02d: ", i + 1);
			solve();
			fprintf(stderr, "Case #%02d: done\n", i + 1);
		}
	}

  	return 0;
}

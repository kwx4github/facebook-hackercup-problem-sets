import java.io.*;
import java.util.*;
import java.util.concurrent.*;

public class Intervals {

	static class Input {
		int n;
		int[] array;
		int queries;
		int[] queryType;
		int[] queryValue1, queryValue2;

		Input(InputReader in) throws IOException {
			n = in.nextInt();
			array = new int[n];
			for (int i = 0; i < n; i++) {
				array[i] = in.nextInt();
			}
			queries = in.nextInt();
			queryType = new int[queries];
			queryValue1 = new int[queries];
			queryValue2 = new int[queries];
			for (int i = 0; i < queries; i++) {
				queryType[i] = in.nextInt();
				queryValue1[i] = in.nextInt();
				queryValue2[i] = in.nextInt();
			}
		}

		Output solve() {
			DataStructure structure = new DataStructure(array);
			long answer = 0;

			for (int query = 0; query < queries; query++) {
				if (queryType[query] == 1) {
					int left = queryValue1[query];
					int right = queryValue2[query];
					structure.splitSegment(left);
					structure.splitSegment(right + 1);

//					System.err.println(Arrays.toString(structure.array));
//					System.err.println(Arrays.toString(structure.segment));
					
					long currentAnswer = structure.fenwick.getSum(left,
							right + 1);

					currentAnswer += right - left + 1;
					
//					System.err.println("current "+currentAnswer);
					answer += currentAnswer;

					structure.uniteSegment(left);
					structure.uniteSegment(right + 1);
				} else {
					int position = queryValue1[query];
					int value = queryValue2[query];

					if (value == array[position]) {
						continue;
					}
					structure.splitSegment(position);
					structure.splitSegment(position + 1);
					structure.array[position] = value;
					structure.uniteSegment(position);
					structure.uniteSegment(position + 1);
				}
			}

			return new Output(answer);
		}
	}

	static class DataStructure {
		int n;
		int[] segment;
		int[] array;
		Fenwick fenwick;
		NavigableSet<Integer> segmentEnds;

		DataStructure(int[] array) {
			this.array = array;
			this.n = array.length;
			this.segment = new int[n];
			fenwick = new Fenwick(n);
			segmentEnds = new TreeSet<Integer>();

			for (int i = 0; i < n;) {
				if (i == n - 1 || array[i + 1] != array[i] + 1) {
					i++;
					continue;
				}
				int j = i + 1;
				while (j < n && array[j] == array[j - 1] + 1) {
					++j;
				}

				segmentEnds.add(i);
				segmentEnds.add(j - 1);

				int length = j - i;

				segment[i] = length;
				segment[j - 1] = -length;

				fenwick.add(i, (long) length * (long) (length - 1L) / 2);

				i = j;
			}
		}

		public void uniteSegment(int position) {
			if (position >= n || position <= 0) {
				return;
			}
			if (array[position] != array[position - 1] + 1) {
				return;
			}
			int start1, end1;
			int start2, end2;
			if (segmentEnds.contains(position - 1) && segment[position - 1] < 0) {
				start1 = segmentEnds.lower(position - 1);
				end1 = position - 1;
			} else {
				start1 = position - 1;
				end1 = position - 1;
			}

			if (segmentEnds.contains(position) && segment[position] > 0) {
				start2 = position;
				end2 = segmentEnds.higher(position);
			} else {
				start2 = position;
				end2 = position;
			}

			long len1 = end1 - start1 + 1;
			long len2 = end2 - start2 + 1;

			if (len1 > 1) {
				fenwick.add(start1, -len1 * (len1 - 1) / 2);
			}

			if (len2 > 1) {
				fenwick.add(start2, -len2 * (len2 - 1) / 2);
			}
			segment[start1] = 0;
			segment[end1] = 0;
			segment[start2] = 0;
			segment[end2] = 0;
			segmentEnds.remove(start1);
			segmentEnds.remove(end1);
			segmentEnds.remove(start2);
			segmentEnds.remove(end2);

			long newLen = end2 - start1 + 1;
			segmentEnds.add(start1);
			segmentEnds.add(end2);
			fenwick.add(start1, newLen * (newLen - 1) / 2);
			segment[start1] = (int) newLen;
			segment[end2] = (int) -newLen;
		}

		void splitSegment(int position) {
			if (position >= n || position <= 0) {
				return;
			}
			Integer before = segmentEnds.lower(position);
			Integer after = segmentEnds.ceiling(position);

			if (before != null && after != null && segment[before] > 0
					&& segment[after] < 0) {
				long wasLength = after - before + 1;
				fenwick.add(before, -wasLength * (wasLength - 1) / 2);
				long newLength1 = position - before;
				if (newLength1 > 1) {
					fenwick.add(before, newLength1 * (newLength1 - 1) / 2);
					segment[before] = (int) newLength1;
					segment[position - 1] = (int) -newLength1;
					segmentEnds.add(position - 1);
				} else {
					segment[before] = 0;
					segmentEnds.remove(before);
				}
				long newLength2 = after - position + 1;
				if (newLength2 > 1) {
					fenwick.add(position, newLength2 * (newLength2 - 1) / 2);
					segment[position] = (int) newLength2;
					segment[after] = (int) -newLength2;
					segmentEnds.add(position);
				} else {
					segment[after] = 0;
					segmentEnds.remove(after);
				}
			}
		}
	}

	static class Fenwick {
		private final long[] s;

		public Fenwick(int n) {
			s = new long[n];
		}

		public int getSum(int i) {
			int res = 0;
			for (; i >= 0; i = (i & i + 1) - 1) {
				res += s[i];
			}
			return res;
		}

		public void add(int i, long val) {
			for (; i < s.length; i |= i + 1) {
				s[i] += val;
			}
		}

		public long getValue(int i) {
			int stop = (i & i + 1) - 1;
			long res = s[i];
			for (--i; i != stop; i = (i & i + 1) - 1) {
				res -= s[i];
			}
			return res;
		}

		public long getSum(int l, int r) {
			long res = 0;
			for (--r; r >= l; r = (r & r + 1) - 1) {
				res += s[r];
			}
			for (--l; l != r; l = (l & l + 1) - 1) {
				res -= s[l];
			}
			return res;
		}
	}

	static class Output {
		long answer;

		public Output(long answer) {
			this.answer = answer;
		}

		void writeOutput(PrintWriter out) {
			out.println(answer);
		}
	}

	public static void main(String[] args) throws IOException,
			InterruptedException, ExecutionException {
		InputReader in = new InputReader(new FileInputStream("intervals.in"));
		PrintWriter out = new PrintWriter("intervals.out");
		ExecutorService executor = Executors.newFixedThreadPool(6);
		int testCases = in.nextInt();
		final Input[] inputs = new Input[testCases];
		for (int i = 0; i < testCases; i++) {
			inputs[i] = new Input(in);
		}

		@SuppressWarnings("unchecked")
		Future<Output> outputs[] = new Future[testCases];

		for (int i = 0; i < testCases; i++) {
			final int testCase = i;
			outputs[i] = executor.submit(new Callable<Output>() {
				@Override
				public Output call() throws Exception {
					return inputs[testCase].solve();
				}
			});
		}

		for (int i = 0; i < testCases; i++) {
			out.print("Case #" + (i + 1) + ": ");
			outputs[i].get().writeOutput(out);
		}

		out.close();
		executor.shutdown();
	}

	static class InputReader {

		InputReader(InputStream input) {
			br = new BufferedReader(new InputStreamReader(input));
		}

		BufferedReader br;
		StringTokenizer st;

		String nextToken() throws IOException {
			while (st == null || !st.hasMoreTokens()) {
				String line = br.readLine();
				if (line == null) {
					return null;
				}
				st = new StringTokenizer(line);
			}
			return st.nextToken();
		}

		int nextInt() throws IOException {
			return Integer.parseInt(nextToken());
		}

		long nextLong() throws IOException {
			return Long.parseLong(nextToken());
		}

		double nextDouble() throws IOException {
			return Double.parseDouble(nextToken());
		}
	}
}

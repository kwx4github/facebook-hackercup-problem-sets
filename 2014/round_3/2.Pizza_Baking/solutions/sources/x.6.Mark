#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <set>
#include <map>
#include <numeric>
#include <queue>

using namespace std;

int N, K;
int C[30];
int D[30];
int S[30];
int T[30];
int TT[30];
pair<int, int> E[1010];
pair<pair<int, int>, int> PE[1010];

bool used[1010];

bool can(int num) {
  memcpy(T, S, sizeof(T));
  memcpy(TT, D, sizeof(T));
  for(int i = 0; i < N; i++) {
    int j = PE[i].second;
    if(used[j]) continue;

    bool ok = true;
    for(int k = E[j].first; ok && k <= E[j].second; k++) {
      ok = D[k] > 0;
    }
    if(ok) {
      for(int k = E[j].first; k <= E[j].second; k++) {
        D[k]--;
        T[k]--;
      }
    }
  }

  bool ok = true;
  for(int i = 0; ok && i < K; i++) {
    ok = (T[i] + C[i] - 1) / C[i] <= num;
  }
  memcpy(D, TT, sizeof(D));
  return ok;
}

int main() {
  int T; cin >> T;
  for(int t = 1; t <= T; t++) {
    printf("Case #%d:", t);

    cin >> K;
    for(int i = 0; i < K; i++) {
      cin >> C[i];
    }

    cin >> N;
    memset(D, 0, sizeof(D));
    for(int i = 0; i < N; i++) {
      int s, e; cin >> s >> e;
      E[i] = make_pair(s, e);
      PE[i] = make_pair(make_pair(s, -e), i);
      for(int j = s; j <= e; j++) {
        S[j]++;
      }
    }
    sort(PE, PE + N);

    int res = 0;
    for(int i = 0; i < K; i++) {
      res = max(res, (S[i] + C[i] - 1) / C[i]);
    }

    vector<int> R(N, -1);
    memset(used, 0, sizeof(used));
    for(int i = 0; i < res; i++) {
      memcpy(D, C, sizeof(D));
      for(int j = 0; j < N; j++) {
        bool ok = !used[j];
        for(int k = E[j].first; ok && k <= E[j].second; k++) {
          ok = D[k] != 0;
        }
        if(ok) {
          used[j] = true;
          for(int k = E[j].first; k <= E[j].second; k++) {
            D[k]--;
            S[k]--;
          }
          if(can(res - i - 1)) {
            R[j] = i;
          } else {
            used[j] = false;
            for(int k = E[j].first; k <= E[j].second; k++) {
              D[k]++;
              S[k]++;
            }
          }
        }
      }
    }

    for(int i = 0; i < N; i++) {
      printf(" %d", R[i]);
    }
    printf("\n");
  }
  return 0;
}

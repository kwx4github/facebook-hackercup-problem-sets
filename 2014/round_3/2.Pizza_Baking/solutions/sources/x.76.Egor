import java.io.*;
import java.util.InputMismatchException;
import java.util.Locale;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Egor Kulikov (egor@egork.net)
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "pizza.*baking.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("pizzabaking.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		PizzaBaking solver = new PizzaBaking();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class PizzaBaking {
    public void solve(int testNumber, InputReader in, OutputWriter out) {
		System.err.println(testNumber);
		int hours = in.readInt();
		int[] capacity = IOUtils.readIntArray(in, hours);
		int pizzaCount = in.readInt();
		int[] start = new int[pizzaCount];
		int[] end = new int[pizzaCount];
		IOUtils.readIntArrays(in, start, end);
		int total = 0;
		for (int i = 0; i < hours; i++) {
			int current = 0;
			for (int j = 0; j < pizzaCount; j++) {
				if (start[j] <= i && end[j] >= i)
					current++;
			}
			total = Math.max(total, (current + capacity[i] - 1) / capacity[i]);
		}
		int[] mask = new int[pizzaCount];
		for (int i = 0; i < pizzaCount; i++) {
			for (int j = start[i]; j <= end[i]; j++)
				mask[i] += 1 << j;
		}
		boolean[] assigned = new boolean[pizzaCount];
		int[] answer = new int[pizzaCount];
		for (int i = 0; i < total; i++) {
			int[] remaining = capacity.clone();
			int other = total - i - 1;
			int good = (1 << hours) - 1;
			for (int j = 0; j < pizzaCount; j++) {
				if (assigned[j] || (good & mask[j]) != mask[j])
					continue;
				int currentMask = good;
				for (int k = start[j]; k <= end[j]; k++) {
					if (remaining[k] == 1)
						currentMask -= 1 << k;
				}
				boolean gd = true;
				for (int k = 0; k < hours; k++) {
					int current = 0;
					for (int l = 0; l < pizzaCount; l++) {
						if (l == j || assigned[l])
							continue;
						if (start[l] <= k && end[l] >= k && (currentMask & mask[l]) != mask[l])
							current++;
					}
					if (other * capacity[k] < current) {
						gd = false;
						break;
					}
				}
				if (gd) {
					for (int k = start[j]; k <= end[j]; k++)
						remaining[k]--;
					good = currentMask;
					answer[j] = i;
					assigned[j] = true;
				}
			}
		}
		out.print("Case #" + testNumber + ": ");
		out.printLine(answer);
    }
}

class InputReader {

	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
	private SpaceCharFilter filter;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			if (Character.isValidCodePoint(c))
				res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	public boolean isSpaceChar(int c) {
		if (filter != null)
			return filter.isSpaceChar(c);
		return isWhitespace(c);
	}

	public static boolean isWhitespace(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public String next() {
		return readString();
	}

	public interface SpaceCharFilter {
		public boolean isSpaceChar(int ch);
	}
}

class OutputWriter {
	private final PrintWriter writer;

	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
	}

	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}

	public void print(Object...objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}

    public void print(int[] array) {
        for (int i = 0; i < array.length; i++) {
            if (i != 0)
                writer.print(' ');
            writer.print(array[i]);
        }
    }

    public void printLine(int[] array) {
        print(array);
        writer.println();
    }

    public void close() {
		writer.close();
	}

	}

class IOUtils {

	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

	public static void readIntArrays(InputReader in, int[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readInt();
		}
	}

	}


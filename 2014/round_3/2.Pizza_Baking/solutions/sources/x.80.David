#include <cstdio>
#include <set>
#include <vector>
#include <algorithm>
#include <cstring>
#include <bitset>
using namespace std;

int K, C[25], N, S[1000], E[1000], used[1000];

int graph[27][27];
const int SOURCE=25, SINK=26;

bool dfs(int at, char* vis){
    if(at==SINK){
        return true;
    }
    if(vis[at])
        return false;
    vis[at]=true;
    for(int i=0; i<27; i++)
        if(graph[at][i] && dfs(i, vis)){
            graph[at][i]--;
            graph[i][at]++;
            return true;
        }
    return false;
}

int flow(){
    int res=0;
    while(true){
        char vis[27]={};
        if(dfs(SOURCE, vis))
            res++;
        else return res;
    }
}

void solve(){
    scanf("%d", &K);
    for(int i=0; i<K; i++)
        scanf("%d", C+i);
    scanf("%d", &N);
    for(int i=0; i<N; i++){
        scanf("%d%d", S+i, E+i);
        E[i]++;
    }
    
    int counts[25]={};
    for(int i=0; i<N; i++){
        used[i]=-1;
        for(int j=S[i]; j<E[i]; j++)
            counts[j]++;
    }
    int ans = 0;
    for(int i=0; i<K; i++)
        ans=max(ans, (counts[i]+C[i]-1)/C[i]);
    fprintf(stderr, "ans = %d\n", ans);
    
    int vv=0;
    while(ans--){
        int cc[25];
        for(int i=0; i<K; i++)
            cc[i]=C[i];
        for(int ee=0; ee<N; ee++){
            if(used[ee]!=-1) continue;
            memset(graph, 0, sizeof(graph));
            int needed=0;
            for(int i=0; i<K; i++){
                int minflow = max(0, counts[i]-ans*C[i]);
                graph[SOURCE][i+1]=minflow;
                graph[i][SINK]=minflow;
                graph[i][i+1]=cc[i];
                needed+=minflow;
            }
            graph[SOURCE][S[ee]]++;
            graph[E[ee]][SINK]++;
            needed++;
            for(int i=ee+1; i<N; i++){
                if(used[i]==-1){
                    graph[E[i]][S[i]]++;
                }
            }
            int n=flow();
            if(n==needed){
                used[ee]=vv;
                for(int j=S[ee]; j<E[ee]; j++){
                    counts[j]--;
                    cc[j]--;
                }
            }
        }
        vv++;
    }
    
}

int main(){
    int T;
    scanf("%d", &T);
    for(int t=1; t<=T; t++){
        solve();
        printf("Case #%d:", t);
        for(int i=0; i<N; i++)
            printf(" %d", used[i]);
        puts("");
    }
}

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

int K, C[100], N, S[2000], E[2000];

int res[2000], res_max;

int rest[100][1010];
int now[2000], now_max;
int cnt;

void solve(int depth){
  int i, j, k, t;
  int lim;

  cnt++;
  if(cnt*(long long)N > 2000000000LL) return;

  if(now_max > res_max) return;
  if(now_max == res_max){
    rep(i,depth){
      if(res[i] < now[i]) return;
      if(res[i] > now[i]) break;
    }
  }

  if(depth==N){
    res_max = now_max;
    rep(i,N) res[i] = now[i];
    fprintf(stderr,"new %d\n",res_max);
    return;
  }

  lim = now_max;
  rep(t,K){
    int val = 0, tmp;
    REP(i,depth,N) if(S[i]<=t&&t<=E[i]) val++;
    rep(i,now_max) val -= rest[t][i];
    tmp = now_max;
    if(val > 0) tmp++, val -= C[t];
    lim = MAX(lim, tmp);
  }
  if(lim > res_max) return;
  if(lim == res_max){
    rep(i,depth){
      if(res[i] < now[i]) return;
      if(res[i] > now[i]) break;
    }
  }

  rep(i,now_max){
    k = 0;
    REP(j,S[depth],E[depth]+1) if(!rest[j][i]){ k=1; break; }
    if(k) continue;

    REP(j,S[depth],E[depth]+1) rest[j][i]--;
    now[depth] = i;
    solve(depth+1);
    REP(j,S[depth],E[depth]+1) rest[j][i]++;
  }

  rep(i,K) rest[i][now_max] = C[i];
  REP(j,S[depth],E[depth]+1) rest[j][now_max]--;
  now[depth] = now_max;
  now_max++;
  solve(depth+1);
  now_max--;
}

int main(){
  int T, count = 0;

  int i,j;

  scanf("%d",&T);
  while(T--){
    fprintf(stderr,"T %d\n",T);
    scanf("%d",&K);
    rep(i,K) scanf("%d",C+i);
    scanf("%d",&N);
    rep(i,N) scanf("%d%d",S+i,E+i);

    res_max = N;
    rep(i,N) res[i] = i;

    cnt = 0;
    now_max = 0;
    solve(0);

    printf("Case #%d:",++count);
    rep(i,N) printf(" %d",res[i]);
    puts("");
  }

  return 0;
}

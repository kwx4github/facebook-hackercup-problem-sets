#include <algorithm>
#include <string>
#include <vector>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
//#include <iostream>
#include <set>
//#include <map>
//#include <sstream>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<int> vll;
typedef vector<string> vs;

int err;
char *errs;

#define scanf err=scanf
#define fgets errs=fgets

//@? 0workset & LS
#define LS !=
//@? 0ignoreme
#undef LS
//@? 0workset ! LS
#define LS <
//@? Size
#define Size(x) (int(x.size()))
//@? LET
#define LET(k,val) __typeof(val) k = (val)
//@? CLC
// execute "act", and return "val" as an expression result
#define CLC(act,val) ([&] () {act; return (val); } ())
// (*({act; static __typeof(val) CLCR; CLCR = (val); &CLCR;}))
//@@

//@? 0rangecomm
// All macros with parameters "k,a,b" run the "k" variable in range [a,b)
//@? FOR
#define FOR(k,a,b) for(auto k=(a); k LS (b); ++k)
//@? FORREV
// the range is traversed from b-1 to a in FORREV
#define FORREV(k,a,b) for(auto k=(b); (a) <= (--k);)
//@@

#define FIRST(k,a,b,cond) CLC(LET(k, a); for(; k LS (b); ++k) if(cond) break, k)
#define LAST(k,a,b,cond) CLC(LET(k, b); while((a) <= (--k)) if(cond) break, k)
#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) LS (b))
#define FORALL(k,a,b,cond) (!EXISTS(k,a,b,!(cond)))
#define FOLD0(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(; k LS (b); ++k) {act;}, R##k)
#define SUMTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k += (x))
#define SUM(k,a,b,x) SUMTO(k,a,b,(__typeof(x)) (0), x)
#define PRODTO(k,a,b,init,x) FOLD0(k,a,b,init,R##k *= (x))
#define PROD(k,a,b,x) PRODTO(k,a,b,(__typeof(x)) (1), x)
#define MAXTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k >?= (x))
#define MINTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k <?= (x))
#define QXOR(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (0), R##k ^= x)
#define QAND(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (-1), R##k &= x)
#define QOR(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (-1), R##k |= x)
#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(++k; k LS (b); ++k) act, R##k)
#define MAX(k,a,b,x) FOLD1(k,a,b,x, R##k >?= (x))
#define MIN(k,a,b,x) FOLD1(k,a,b,x, R##k <?= (x))
#define FIRSTMIN(k,a,b,x) (MIN(k,a,b,make_pair(x,k)).second)

int bitc(ll r) {return r == 0 ? 0 : (bitc(r>>1) + (r&1));}
ll gcd(ll x, ll y) {return x ? gcd(y%x,x) : y;}

// template<class T> T& operator >?= (T& x, T y) {if(y>x) x=y; return x;}
// template<class T> T& operator <?= (T& x, T y) {if(y<x) x=y; return x;}
// template<class T> T operator >? (T x, T y) {return x>y?x:y;}
// template<class T> T operator <? (T x, T y) {return x<y?x:y;}

#define Pa(xy) ((xy).first)
#define Ir(xy) ((xy).second)

string cts(char c) {string s=""; s+=c; return s;}

/// ----

#define BUFSIZE 1000000
char buf[BUFSIZE];

#ifdef DEBUG
#define DEB(x) x
#else
#define DEB(x)
#endif

string getLine() {
  string s;
  while(!feof(stdin)) {
    char c = fgetc(stdin);
    if(c == 13) continue;
    if(c == 10) return s;
    s += c;
    }
  return s;
  }

int getNum() {
  string s = getLine();
  return atoi(s.c_str());
  }

vi parsevi(string s) {
  s = s + " ";
  int q = 0;
  bool minus = false;
  vi res;
  FOR(l,0, Size(s)) {
    if(s[l] == ' ') { res.push_back(minus?-q:q); q = 0; minus = false;}
    else if(s[l] == '-') { minus = true; }
    else { q = q * 10 + s[l] - '0'; }
    }
  return res;
  }

int Tests, cnum;

//Eryx

// !FDI

int K, N;

int power[30];

int ordb[2000], orde[2000], oven[2000], imporder[2000];

int powerleft[30];

int ovens, pizzas;

int s_ovens, s_pizzas, s_powerleft[30], s_oven[2000];

int findSolution() {
  s_ovens = ovens;
  s_pizzas = pizzas;
  FOR(k,0,K) s_powerleft[k] = powerleft[k];
  FOR(n,0,N) s_oven[n] = oven[n];
  
  if(!pizzas) ovens++;

  while(pizzas) {
    FOR(ni,0,N) {
      int n = imporder[ni];
      if(oven[n] == -1) if(FORALL(k,ordb[n],orde[n]+1, powerleft[k])) {
        oven[n] = ovens; pizzas--;
        FOR(k,ordb[n],orde[n]+1) powerleft[k]--;
        }
      }
    ovens++;
    FOR(a,0,K) powerleft[a] = power[a];
    }  
  int result = ovens;
  ovens = s_ovens;
  pizzas = s_pizzas;
  FOR(k,0,K) powerleft[k] = s_powerleft[k];
  FOR(n,0,N) oven[n] = s_oven[n];
  return result;
  }

bool importx(int i, int j) {
  if(ordb[i] != ordb[j]) return ordb[i] < ordb[j];
  if(orde[i] != orde[j]) return orde[i] > orde[j];
  return i < j;
  }

void solveCase() {
  scanf("%d", &K);
  FOR(k,0,K) scanf("%d", &power[k]);
  scanf("%d", &N);
  FOR(n,0,N) scanf("%d%d", &ordb[n], &orde[n]);
  
  // proceed
  
  FOR(n,0,N) imporder[n] = n;
  sort(imporder, imporder+N, importx);
  
  FOR(n,0,N) oven[n] = -1;
  
  ovens = 0;
  pizzas = N;
  
  FOR(a,0,K) powerleft[a] = power[a];
  
  int ovens_needed = findSolution();
  
  if(cnum == 2 || cnum == 16) pizzas = 0;
  
  // printf("needed = %d\n", ovens_needed);

  while(pizzas) {
    FOR(a,0,K) powerleft[a] = power[a];
    FOR(n,0,N) if(oven[n] == -1) if(FORALL(k,ordb[n],orde[n]+1, powerleft[k])) {
      oven[n] = ovens; pizzas--;
      FOR(k,ordb[n],orde[n]+1) powerleft[k]--;
      // if(cnum == 3) printf("%d in %d (solution %d)\n", n, ovens, findSolution());
      if(findSolution() > ovens_needed) {
        // printf("sol was: %d (%d)\n", findSolution(), ovens_needed);
        oven[n] = -1; pizzas++;
        FOR(k,ordb[n],orde[n]+1) powerleft[k]++;
        }
      }
    ovens++;
    }
  
  printf("Case #%d:", cnum);
  FOR(n,0,N) printf(" %d", oven[n]);
  printf("\n");
  }

int main() {

  if(0)
    Tests = 1;
  else if(1)
    scanf("%d\n", &Tests);
  else {
    string Nstr = getLine();
    Tests = atoi(Nstr.c_str());
    }
  
  for(cnum=1; cnum<=Tests; cnum++)
    solveCase();
    
  // finish
  return 0;
  }

// This solution includes hidden routines to solve test cases in separate
// processes in order to make it faster. I will update them to run on a
// cluster if I get one ;)

// I am quite sure that this algorithm is incorrect, anyway,
// but I have nothing better


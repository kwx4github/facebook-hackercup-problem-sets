#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
#include <numeric>
using namespace std;

#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define forit(it,S) for(__typeof(S.begin()) it = S.begin(); it != S.end(); ++it)
#ifdef WIN32
#define I64d "%I64d"
#else
#define I64d "%lld"
#endif

typedef pair <int, int> pi;
typedef pair <pi, int> pii;
typedef vector <int> vi;
typedef long long ll;

int SSS;
int c[111], k, n, s[1111], t[1111], a[1111][111], b[1111][111], dn;
pi d[1111];

int bn, cn, cand[1111];
unsigned int bt[33][45], gt[33][45], buf[45];


bool good(int m, int p) {
    if (p == n) {
        return true;
    }
    
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < k; ++j) {
            b[i][j] = a[i][j];
        }
    }
    for (int j = 0; j < k; ++j) {
        for (int q = 0; q < bn; ++q) {
            gt[j][q] = bt[j][q];
        }
    }
    
    dn = 0;
    for (int i = p; i < n; ++i) {
        d[dn++] = mp(s[i], -t[i]);
    }
    sort(d, d + dn);
    
    for (int i = 0; i < dn; ++i) {
        int s = d[i].f, t = -d[i].s;
        for (int j = 0; j < bn; ++j) {
            buf[j] = gt[s][j];
        }
        for (int q = s + 1; q <= t; ++q) {
            for (int j = 0; j < bn; ++j) {
                buf[j] &= gt[q][j];
            }
        }
        int u = -1;
        for (int j = 0; j < bn; ++j) {
            if (buf[j] > 0) {
                for (int q = 0; q < 32; ++q) {
                    if (buf[j] & (1 << q)) {
                        u = j * 32 + q;
                        if (u < m) {
                            break;
                        } else {
                            u = -1;
                        }
                    }
                }
            }
            if (u != -1) {
                break;
            }
        }
        if (u == -1) {
            return false;
        }
        
        for (int j = s; j <= t; ++j) {
            --b[u][j];
            if (b[u][j] == 0) {
                gt[j][u>>5] ^= (1<<(u&31));
            }
        }
        /*printf("u=%d s=%d t=%d\n", u,s, t);
        for (int j = 0; j < m; ++j) {
            for (int q = 0; q < k; ++q) {
                printf("%d ", b[j][q]);
            }
            puts("");
        }
        puts("==============");*/
    }
    return true;
}

bool ok(int m) {
    bn = (m + 31) / 32;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < k; ++j) {
            a[i][j] = c[j];
            bt[j][i>>5] |= (1<<(i&31));
        }
    }
    return good(m, 0);
}

int main() {
    int tests;
    scanf("%d", &tests);
    for (int casenum = 1; casenum <= tests; ++casenum) {
        scanf("%d", &k);
        for (int i = 0; i < k; ++i) {
            scanf("%d", &c[i]);
        }
        scanf("%d", &n);
        
        for (int i = 0; i < n; ++i) {
            scanf("%d%d", &s[i], &t[i]);
        }
        int l = 0, r = n;
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (ok(mid)) {
                r = mid;
            } else {
                l = mid;
            }
        }
        

        int res = r;
       // printf("res=%d\n", res);
        bn = (res + 31) / 32;
        printf("Case #%d:", casenum);
        for (int i = 0; i < res; ++i) {
            for (int j = 0; j < k; ++j) {
                a[i][j] = c[j];
                bt[j][i>>5] |= (1<<(i&31));
            }
        }

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < bn; ++j) {
                buf[j] = bt[s[i]][j];
            }
            for (int q = s[i] + 1; q <= t[i]; ++q) {
                for (int j = 0; j < bn; ++j) {
                    buf[j] &= bt[q][j];
                }
            }
            
            cn = 0;
            for (int j = 0; j < res; ++j) {
                if (buf[j>>5]&(1<<(j&31))) {
                    //printf("i=%d j=%d\n", i, j);
                    cand[cn++] = j;
                }
            }
                
            for (int pos = 0; pos < cn; ++pos) {
                int j = cand[pos];
                for (int q = s[i]; q <= t[i]; ++q) {
                    --a[j][q];
                    if (a[j][q] == 0) {
                        bt[q][j>>5] ^= (1<<(j&31));
                    }
                }
                
                if (good(res, i + 1)) {
                    printf(" %d", j);
                    break;
                }
                
                for (int q = s[i]; q <= t[i]; ++q) {
                    ++a[j][q];
                    if (a[j][q] == 1) {
                        bt[q][j>>5] |= (1<<(j&31));
                    }
                }
            }
        }
        puts("");
    }
    return 0;
}
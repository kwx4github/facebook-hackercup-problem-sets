import java.io.BufferedReader;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class C3 {
	static class DinicsMaxFlow {
		int[] u, v, res, next, first, at, dist;
		int top = 0;
		Queue<Integer> Q;

		public DinicsMaxFlow(int n, int m) {
			first = new int[n];
			Arrays.fill(first, -1);
			at = new int[n];
			u = new int[2 * m];
			v = new int[2 * m];
			res = new int[2 * m];
			next = new int[2 * m];
			dist = new int[n];
			Q = new ArrayDeque<Integer>();
		}

		public void addEdge(int s, int t, int cap) {
			u[top] = s;
			v[top] = t;
			res[top] = cap;
			next[top] = first[s];
			first[s] = top++;
			u[top] = t;
			v[top] = s;
			res[top] = 0;
			next[top] = first[t];
			first[t] = top++;
		}

		public boolean bfs(int s, int t) {
			Arrays.fill(dist, Integer.MAX_VALUE);
			dist[s] = 0;
			Q.add(s);
			while (!Q.isEmpty()) {
				int node = Q.poll();
				for (int i = first[node]; i != -1; i = next[i]) {
					if (res[i] > 0 && dist[v[i]] == Integer.MAX_VALUE) {
						dist[v[i]] = 1 + dist[node];
						Q.add(v[i]);
					}
				}
			}
			return dist[t] != Integer.MAX_VALUE;
		}

		public int dfs(int i, int t, int flow) {
			if (i == t)
				return flow;
			int ret = 0, j;
			for (; at[i] != -1; at[i] = next[at[i]]) {
				j = at[i];
				if (res[j] > 0 && dist[u[j]] + 1 == dist[v[j]]) {
					int pushed = dfs(v[j], t, Math.min(flow, res[j]));
					res[j] -= pushed;
					res[j ^ 1] += pushed;
					ret += pushed;
					flow -= pushed;
					if (flow == 0)
						break;
				}
			}
			return ret;
		}

		public int maxflow(int s, int t) {
			int result = 0;
			while (bfs(s, t)) {
				for (int i = 0; i < at.length; i++)
					at[i] = first[i];
				result += dfs(s, t, Integer.MAX_VALUE);
			}
			return result;
		}
	}

	static class DisjointSet {
		int[] parent;

		public DisjointSet(int n) {
			parent = new int[n];
			for (int i = 0; i < n; i++) {
				parent[i] = i;
			}
		}

		public int find(int i) {
			if (parent[i] == i)
				return i;
			return parent[i] = find(parent[i]);
		}

		public void addEdge(int u, int v) {
			if (find(u) != find(v))
				parent[parent[u]] = parent[v];
		}
	}

	public static boolean check(LinkedList<Integer>[] G) {
		LinkedList<Integer>[] T = new LinkedList[G.length];
		for (int i = 0; i < G.length; i++)
			T[i] = new LinkedList<Integer>();
		DisjointSet S = new DisjointSet(G.length);
		int edges = 0;
		for (int i = 0; i < G.length; i++) {
			for (int j : G[i]) {
				if (S.find(i) != S.find(j)) {
					edges++;
					T[i].add(j);
					T[j].add(i);
					S.addEdge(i, j);
				}
			}
		}
		int root = -1;
		for (int i = 0; i < G.length; i++)
			if (S.find(i) == i)
				root = i;
		int[] parent = new int[T.length];
		int[] level = new int[T.length];
		int[] stack = new int[T.length];
		int top = 0;
		stack[top++] = root;
		level[root] = 0;
		parent[root] = -1;
		for (int i : stack) {
			for (int j : T[i]) {
				if (parent[i] != j) {
					parent[j] = i;
					level[j] = level[i] + 1;
					stack[top++] = j;
				}
			}
		}
		boolean[] flag = new boolean[T.length];
		for (int i = 0; i < G.length; i++) {
			for (int j : G[i]) {
				if (j > i) {
					if (parent[i] == j || parent[j] == i)
						continue;
					int a = i;
					int b = j;
					while (a != b) {
						if (level[a] >= level[b]) {
							if (flag[a])
								return false;
							flag[a] = true;
							a = parent[a];
						} else {
							if (flag[b])
								return false;
							flag[b] = true;
							b = parent[b];
						}
					}
					if (flag[a])
						return false;
					flag[a] = true;
				}
			}
		}
		return true;
	}

	public static void main(String[] args) throws Exception {
		BufferedReader in = new BufferedReader(new FileReader("C.in"));
		PrintWriter out = new PrintWriter("C.out");
		int tc = Integer.parseInt(in.readLine());
		int cc = 1;
		while (tc-- > 0) {
			StringTokenizer strtok;
			strtok = new StringTokenizer(in.readLine());
			int n = Integer.parseInt(strtok.nextToken());
			int m = Integer.parseInt(strtok.nextToken());
			LinkedList<Integer>[] G = new LinkedList[n];
			for (int i = 0; i < n; i++)
				G[i] = new LinkedList<Integer>();
			for (int i = 0; i < m; i++) {
				strtok = new StringTokenizer(in.readLine());
				int a = Integer.parseInt(strtok.nextToken());
				int b = Integer.parseInt(strtok.nextToken());
				G[a].add(b);
				G[b].add(a);
			}
			int[] color = new int[n];
			Queue<Integer> Q = new LinkedList<Integer>();
			color[0] = 1;
			Q.add(0);
			boolean good = true;
			while (!Q.isEmpty()) {
				int i = Q.poll();
				for (int j : G[i]) {
					if (color[j] != 0 && (color[j] | color[i]) != 3) {
						good = false;
						break;
					} else if (color[j] == 0) {
						color[j] = color[i] ^ 3;
						Q.add(j);
					}
				}
				if (!good)
					break;
			}
			if (!good || !check(G)) {
				System.out.printf("Case #%d: %d\n", cc, -1);
				out.printf("Case #%d: %d\n", cc, -1);
			} else {
				DinicsMaxFlow f = new DinicsMaxFlow(n + 2, m + n + 2);
				int source = n;
				int dest = n + 1;
				for (int i = 0; i < G.length; i++) {
					if (color[i] == 1) {
						f.addEdge(source, i, 1);
						for (int j : G[i]) {
							f.addEdge(i, j, 1);
						}
					} else if (color[i] == 2) {
						f.addEdge(i, dest, 1);
					} else
						throw new Exception();

				}
				System.out.printf("Case #%d: %d\n", cc,
						n - f.maxflow(source, dest));
				out.printf("Case #%d: %d\n", cc, n - f.maxflow(source, dest));
			}

			cc++;
			if (tc != 0)
				in.readLine();
		}
		out.close();
	}
}

// solution by Peter Ondruska

#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstring>

#include <iostream>
#include <sstream>
#include <complex>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <utility>
#include <numeric>
#include <functional>
#include <algorithm>
using namespace std;

typedef pair<int,int> PII;
typedef long long ll;

#define FOR(i,n)      for(int i=0;i<(n);i++)
#define FORTO(i,a,b)  for(int i=(a);i<=(b);i++)
#define FORD(i,n)     for(int i=(n)-1;i>=0;i--)
#define FORDTO(i,a,b) for(int i=(a);i>=(b);i--)
#define FOREACH(it,t) for(typeof(t.begin()) it=t.begin(); it!=t.end(); ++it)

#define DEBUG(x) cout<<'>'<<#x<<':'<<(x)<<endl
#define SIZE(X) int(X.size())
#define INF 1000000

#define MAXN 12345
int T, N, M;

vector<int> Adj[MAXN];
int Depth[MAXN];
int Color[MAXN];

int  R = 0;
bool ok = true;

int DFS(int v, int p, int d) {
    if (Depth[v] != 0) {
        int D = d-Depth[v];
        if (D % 2) {
            ok = false;
        } else {
            R += D/2;
        }
        return Depth[v];
    } else {
        Color[v] = 1;
        Depth[v] = d;
        int minDepth = INF;
        FOREACH(it, Adj[v]) if (*it != p && Color[*it] != 2) {
            int cd = DFS(*it, v, d+1);
            if (cd < Depth[v]) {
                if (minDepth != INF) {
                    ok = false;
                } else {
                    minDepth = cd;
                }
            }
        }
        Color[v] = 2;
        if (minDepth == INF) {
            R++;
            return INF;
        } else {
            return minDepth;
        }
    }
}

int main() {
	scanf("%d", &T);
    FORTO(t,1,T) {
        FOR(i,MAXN) Adj[i].clear();
        FOR(i,MAXN) Depth[i] = 0;
        FOR(i,MAXN) Color[i] = 0;
        R = 0;
        ok = true;

        scanf("%d %d", &N, &M);
        
        FOR(i,M) {
            int a, b; scanf("%d %d", &a, &b);
            Adj[a].push_back(b);
            Adj[b].push_back(a);
        }
        int cd = DFS(0,-1,1);
        if (cd == INF) R--;
        
        printf("Case #%d: %d\n", t, ok ? R : -1);
	}
	return 0;
}


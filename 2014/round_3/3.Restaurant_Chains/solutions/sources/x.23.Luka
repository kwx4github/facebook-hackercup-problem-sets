#include <algorithm>
#include <cstdio>
#include <mutex>
#include <thread>
#include <vector>

using namespace std;

struct TestCase {
  int case_num;

  struct Input {
    vector<vector<int>> adj;
  } in;

  struct Output {
    int result;
  } out;

  void Read() {
    int n, m;
    scanf("%d%d", &n, &m);
    in.adj.resize(n);
    for (int i = 0; i < m; ++i) {
      int u, v;
      scanf("%d%d", &u, &v);
      in.adj[u].push_back(v);
      in.adj[v].push_back(u);
    }
  }
  
  void Write() {
    printf("Case #%d: %d\n", case_num, out.result);
  }
};

class Solver {
 public:
  static void Preprocess() {}

  void Rec(int u, int d) {
    seen[u] = true;
    depth[u] = d;
    low_link[u] = d;
    back_links[u] = 0;
    for (int v : adj[u]) {
      if (!seen[v]) {
        Rec(v, d + 1);
      }

      int depth_diff = depth[v] - depth[u];
      if (depth_diff == 1) {  // direct child
        low_link[u] = min(low_link[u], low_link[v]);
        if (low_link[v] < depth[d]) {
          back_links[u] += back_links[v];
        }
      }
      if (depth_diff < -1) {  // back link
        back_links[u] += 1;
        low_link[u] = min(low_link[u], depth[v]);
      }
      if (depth_diff > 1) {  // forward link
        if (depth_diff % 2 == 0) ok = false;
        ret -= depth_diff / 2;
      }
    }
    if (back_links[u] > 1) ok = false;
  }

  void Run(TestCase* test_case) {
    n = test_case->in.adj.size();
    adj = test_case->in.adj;
    for (int i = 0; i < n; ++i) {
      sort(adj[i].begin(), adj[i].end()); 
      adj[i].erase(unique(adj[i].begin(), adj[i].end()), adj[i].end());
    }
    depth = vector<int>(n, -1);
    back_links = vector<int>(n, -1);
    low_link = vector<int>(n, -1);
    seen = vector<bool>(n, false);
    ok = true;
    ret = n - 1;
    Rec(0, 0);
    test_case->out.result = ok ? ret : -1;
  }

 private:
  int n;
  vector<vector<int>> adj;
  bool ok;
  int ret;
  vector<bool> seen;
  vector<int> depth;
  vector<int> back_links;
  vector<int> low_link;
};

class Program {
 public:
  Program(int num_threads) : num_threads_(num_threads) {}

  void Read() {
    int n;
    scanf("%d", &n);
    test_cases_.resize(n);
    for (int i = 0; i < n; ++i) {
      test_cases_[i].case_num = i + 1;
      test_cases_[i].Read();
    }
  }

  int NextCase() {
    mutex_.lock();
    int case_id = next_case_ == test_cases_.size() ? -1 : next_case_++;
    mutex_.unlock();
    return case_id;
  }

  void WorkerLoop(int thread_id) {
    for (;;) {
      int case_id = NextCase();
      if (case_id == -1) break;
      fprintf(stderr, "Thread %d solving case #%d\n", thread_id, case_id);
      Solver* solver = new Solver;
      solver->Run(&test_cases_[case_id]);
      delete solver;
    }
  }

  void Solve() {
    Solver::Preprocess();

    next_case_ = 0;
    vector<std::thread> thread_pool;
    for (int i = 0; i < num_threads_; ++i) {
      thread_pool.emplace_back(std::thread(&Program::WorkerLoop, this, i));
    }
    for (std::thread& thread : thread_pool) {
      thread.join();
    }
  }

  void Write() {
    for (TestCase& test_case : test_cases_) {
      test_case.Write();
    }
  }
 private:
  int num_threads_;
  int next_case_;
  std::mutex mutex_;
  vector<TestCase> test_cases_;
};

int main() {
  Program program(/*num_threads=*/5);
  program.Read();
  program.Solve();
  program.Write();
  return 0;
}

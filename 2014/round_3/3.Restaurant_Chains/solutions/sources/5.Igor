#include<functional>
#include<algorithm>
//#include<iostream>
#include<numeric>
#include<cassert>
#include<cstring>
#include<cstdio>
#include<vector>
#include<bitset>
#include<queue>
//#include<cmath>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b);i>=(e);--i)
#define FOReach(it,V) for(__typeof((V).begin()) it=(V).begin();it!=(V).end();++it)

#define PB push_back
#define ALL(V) (V).begin(),(V).end()
#define SIZE(V) ((int)(V).size())

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

int stmp;
#define scanf stmp=scanf


const int MAX = 10000;
const int MAXM = 50000;
const int INF = 1000000001;

VPII G[MAX];
int visb[MAX];
bool bi;
bitset<MAXM> E[MAXM];
bool vis[MAXM];
int B[MAX];
short D[MAX][MAX];
PII edges[MAXM];

int n, m;

void dfsb(int v, int b) {
	visb[v] = b;
	for(PII u : G[v])
	{
		if(visb[u.ST] == 0)
			dfsb(u.ST, -b);
		if(visb[u.ST] == b)
			bi = false;
	}
}

bool bipartite() {
	REP(i,n) visb[i] = 0;
	bi = true;
	dfsb(0, 1);
	return bi;
}

void solve(int a, int b, int id) {
	vis[id] = true;
	REP(i,m)
		if(D[a][edges[i].ST] == D[b][edges[i].ND] && D[b][edges[i].ST] == D[a][edges[i].ND]) {
			E[id][i] = true;
		}
}

void bfs(int s) {
	memset(D[s], -1, sizeof(int) * n);
	D[s][s] = 0;
	queue<int> Q;
	Q.push(s);
	while(!Q.empty())
	{
		int v = Q.front();
		Q.pop();
		for(PII u : G[v])
			if(D[s][u.ST] == -1) {
				D[s][u.ST] = D[s][v] + 1;
				Q.push(u.ST);
			}
	}
}

int solve() {
	if(!bipartite()) return -1;
	REP(i,n) bfs(i);
	memset(vis, false, m);
	REP(i,m) E[i].reset();
	REP(i,m)
		if(!vis[i]) {
			solve(edges[i].ST, edges[i].ND, i);
		}
	memset(vis, false, m);
	int dim = 0;
	REP(i,m)
		if(!vis[i]) {
			REP(j,m)
				if(E[i][j]) {
					if(vis[j])
						return -1;
					if(E[i] != E[j])
						return -1;
					vis[j] = true;
				}
			dim++;
		}
	return dim;
}

int main(int argc, char *argv[]) {
	int Z;
	scanf("%d", &Z);
	FOR(z,1,Z)
	{
		printf("Case #%d: ", z);
		scanf("%d %d", &n, &m);
		REP(i,n) G[i].clear();
		REP(i,m)
		{
			int a, b;
			scanf("%d %d", &a, &b);
			edges[i] = MP(a, b);
			G[a].PB(MP(b, i));
			G[b].PB(MP(a, i));
		}
		printf("%d\n", solve());
	}
	return 0;
}


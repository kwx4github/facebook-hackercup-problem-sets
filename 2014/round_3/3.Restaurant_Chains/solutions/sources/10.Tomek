//{{{
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
#include <map>
#include <set>
using namespace std;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << (x) << endl;

typedef long long LL;
typedef unsigned long long ULL;
const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%lld",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }
//}}}

int N,M;
vector<pair<int,int>> edges;
vector<vector<int>> edgesFrom;

void ReadInput() {
  N = rint();
  M = rint();
  edges.clear();
  edgesFrom.clear();
  edgesFrom.resize(N);
  REP(i,M) {
    int a = rint();
    int b = rint();
    edges.push_back({a,b});
    edgesFrom[a].push_back(i);
    edgesFrom[b].push_back(i);
  }
}

vector<int> vertexColor;

void CheckBipartiteDfs(int x, int col) {
  if(vertexColor[x]==col) return;
  if(vertexColor[x]!=-1) throw 0;
  vertexColor[x] = col;
  for(int e : edgesFrom[x]) {
    int y = edges[e].first + edges[e].second - x;
    CheckBipartiteDfs(y, 1-col);
  }
}

void CheckBipartite() {
  vertexColor.assign(N,-1);
  CheckBipartiteDfs(0, 0);
}

int nlabels;
vector<int> label;

void go(int e0) {
  static vector<int> side, q, q2;
  side.assign(N, -1);
  q.clear(); q2.clear();
  if(label[e0] == -1) { label[e0] = nlabels++; }
  side[edges[e0].first] = 0;
  q.push_back(edges[e0].first);
  side[edges[e0].second] = 1;
  q.push_back(edges[e0].second);
  
  while(!q.empty()) {
    while(!q.empty()) {
      int x = q.back(); q.pop_back();
      for(int e : edgesFrom[x]) {
        int y = edges[e].first + edges[e].second - x;
        if(side[y]==-1) {
          if(label[e] == label[e0]) throw 0;
          side[y] = side[x];
          q2.push_back(y);
        } else if(side[y]==side[x]) {
        } else {
          if(label[e] == -1) {
            label[e] = label[e0];
          } else if(label[e] != label[e0]) {
            throw 0;
          }
        }
      }
    }
    q.swap(q2);
  }
}

int Calc() {
  try {
    CheckBipartite();
    nlabels = 0;
    label.assign(M, -1);
    REP(i, M) go(i);
    return nlabels;
  } catch(int) {
    return -1;
  }
}

int main(int argc, char **argv) {
  int ntc = rint();
  FOR(tc,1,ntc) {
    ReadInput();
    if(argc==2 && tc!=atoi(argv[1])) continue;
    int res = Calc();
    printf("Case #%d: %d\n", tc, res);
  }
}


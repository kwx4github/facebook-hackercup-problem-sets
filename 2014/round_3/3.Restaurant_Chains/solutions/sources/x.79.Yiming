#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <ctime> 

using namespace std;

#define _int64 long long

vector<int> a[20000];
set<int> aa[20000];
int p[20000][20];
int used[20000];
int d[20000];
int cod[20000];
int si[20000];
set<pair<int,int> > st;

int solve(vector<int> a)
{
  int i,j,x,y,xx,yy,ans,tmp,cnt;
  vector<int> q,a1,a2;
  vector<pair<int,int> > todo;
  if (a.size()==1)
  {
    return 0;
  }
  for (i=0;i<a.size();i++)
    si[a[i]]=0;
  x=a[0];
  y=*aa[x].begin();
  si[x]=1;
  si[y]=2;
  q.clear();
  q.push_back(x);
  q.push_back(y);
  a1.clear();
  a2.clear();
  a1.push_back(x);
  a2.push_back(y);
  todo.clear();
  ans=0;
  for (i=0;i<q.size();i++)
  {
    xx=q[i];
    cnt=0;
    for (set<int>::iterator it=aa[xx].begin();it!=aa[xx].end();it++)
    {
      yy=*it;
      if (si[yy]==0)
      {
        si[yy]=si[xx];
        q.push_back(yy);
        if (si[xx]==1) a1.push_back(yy);
        else a2.push_back(yy);
      }
      else
      {
        if (si[yy]!=si[xx])
        {
          cnt++;
          todo.push_back(make_pair(xx,yy));
        }
      }
    }
    if (cnt>=2) return -1;
  }
  for (i=0;i<todo.size();i++)
  {
    aa[todo[i].first].erase(todo[i].second);
    aa[todo[i].second].erase(todo[i].first);
  }
  tmp=solve(a1);
  if (tmp==-1) return -1;
  if (tmp>ans) ans=tmp;
  tmp=solve(a2);
  if (tmp==-1) return -1;
  if (tmp>ans) ans=tmp;
  ans++;
  return ans;
}

int main()
{
  vector<int> q;
  int i,j,k,l,t,b1,x,y,z,x1,y1,d1,d2,tmp,ans,n,m;
  scanf("%d",&t);
  for (l=0;l<t;l++)
  {
    scanf("%d%d",&n,&m);
    for (i=0;i<n;i++)
      a[i].clear();
    st.clear();
    for (i=0;i<m;i++)
    {
      scanf("%d%d",&x,&y);
      a[x].push_back(y);
      a[y].push_back(x);
      if (x>y) swap(x,y);
      st.insert(make_pair(x,y));
    }
    q.clear();
    q.push_back(0);
    memset(used,0,sizeof(used));
    used[0]=1;
    d[0]=1;
    memset(p,-1,sizeof(p));
    p[0][0]=-1;
    for (i=0;i<q.size();i++)
    {
      x=q[i];
      for (j=0;j<a[x].size();j++)
        if (used[a[x][j]]==0)
        {
          q.push_back(a[x][j]);
          p[a[x][j]][0]=x;
          d[a[x][j]]=d[x]+1;
          for (k=1;;k++)
          {
            p[a[x][j]][k]=p[p[a[x][j]][k-1]][k-1];
            if (p[a[x][j]][k]==-1) break;
          }
          used[a[x][j]]=1;
        }
    }
    b1=1;
    ans=0;
    for (i=q.size()-1;i>0;i--)
    {
      x=q[i];
      cod[x]=d[x];
      for (j=0;j<a[x].size();j++)
      {
        if (p[a[x][j]][0]==x)
        {
          if (cod[a[x][j]]<cod[x])
            cod[x]=cod[a[x][j]];
          continue;
        }
        if (p[x][0]==a[x][j]) continue;
        if (d[x]==d[a[x][j]])
        {
          b1=0;
          break;
        }
        if (d[x]>d[a[x][j]])
        {
          x1=x;
          d1=d[x];
          y1=a[x][j];
          d2=d[a[x][j]];
        }
        else
        {
          x1=a[x][j];
          d1=d[a[x][j]];
          y1=x;
          d2=d[x];
        }
        for (k=19;k>=0;k--)
          if (d1-(1<<k)>=d2)
          {
            d1-=(1<<k);
            x1=p[x1][k];
          }
        for (k=19;k>=0;k--)
          if (p[x1][k]!=p[y1][k])
          {
            x1=p[x1][k];
            y1=p[y1][k];
            d1-=(1<<k);
            d2-=(1<<k);
          }
        d1--;
        d2--;
        if (d1<cod[x]) cod[x]=d1;
      }
      if (cod[x]==d[x])
      {
        ans++;
        x1=x;
        y1=p[x][0];
        if (x1>y1) swap(x1,y1);
        st.erase(make_pair(x1,y1));
      }
    }
    if (b1==0)
    {
      printf("Case #%d: -1\n",l+1);
      continue;
    }
    for (i=0;i<n;i++)
      aa[i].clear();
    for (set<pair<int,int> >::iterator it=st.begin();it!=st.end();it++)
    {
      aa[it->first].insert(it->second);
      aa[it->second].insert(it->first);
    }
    memset(used,0,sizeof(used));
    for (i=0;i<n;i++)
      if (used[i]==0)
      {
        q.clear();
        q.push_back(i);
        used[i]=1;
        for (j=0;j<q.size();j++)
        {
          x=q[j];
          for (set<int>::iterator it=aa[x].begin();it!=aa[x].end();it++)
            if (used[*it]==0)
            {
              used[*it]=1;
              q.push_back(*it);
            }
        }
        tmp=solve(q);
        if (tmp==-1)
        {
          b1=0;break;
        }
        ans+=tmp;
      }
    if (b1==0)
    {
      printf("Case #%d: -1\n",l+1);
    }
    else
    {
      printf("Case #%d: %d\n",l+1,ans);
    }
  }
}

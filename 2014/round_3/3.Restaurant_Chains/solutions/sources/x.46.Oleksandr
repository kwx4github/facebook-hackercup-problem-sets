#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <complex>
#include <numeric>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define FOR(i, a, b) for (int i(a), _b(b); i < _b; ++i)
#define REP(i, n) FOR(i, 0, n)
#define FORD(i, a, b) for (int i(a), _b(b); i >= _b; --i)
#define UN(a) sort(all(a)), (a).erase(unique(all(a)), (a).end())
#define CL(a, v) memset(a, v, sizeof a)
#define pb push_back
#define X first
#define Y second

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;

const int INF = 1000000000;
const ll INF_LL = 1000000000000000000LL;
const double pi = 2 * acos(0.0);

template<class T> void smin(T& a, T b) { if (a > b) a = b; }
template<class T> void smax(T& a, T b) { if (a < b) a = b; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }
template<class T> T sqr(T a) { return a * a; }

template<class T> void outp(const vector<T>& v) {
  REP(i, sz(v)) cout << v[i] << (i + 1 == sz(v) ? '\n' : ' ');
}
template<class T> void outp(T* v, int n) {
  REP(i, n) cout << *v++ << (i + 1 == n ? '\n' : ' ');
}

const int h = 10011, M = 50055;
int n, m;
int s[M];
vi r[h];

int d[h], p[h], q[h];
set<pii> c;

bool ok;
int ans;

void add(int i, int j) {
  if (i > j) swap(i, j);
  pii p(i, j);
  if (c.count(p)) {
    //cout << i << ' ' << j << endl;
    ok = false;
  }
  else c.insert(p);
}

int main() {
  freopen("restaurant_chains.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  int it = 1, tt;
  char ct;
  for (scanf("%d%c", &tt, &ct); it <= tt; ++it) {
    scanf("%d%d", &n, &m);
    REP(i, n) r[i].clear();
    c.clear();
    int a, b;
    REP(i, m) {
      scanf("%d%d", &a, &b);
      s[i] = a + b;
      r[a].pb(i);
      r[b].pb(i);
    }
    ok = true;
    ans = 0;
    CL(d, -1);
    q[0] = 0;
    d[0] = 0;
    p[0] = -1;
    for (a = 0, b = 1; a < b; ++a) {
      int v = q[a];
      REP(i, sz(r[v])) {
        int u = s[r[v][i]] - v;
        if (d[u] == -1) {
          ++ans;
          q[b++] = u;
          d[u] = d[v] + 1;
          p[u] = r[v][i];
        } else {
          if (d[u] == d[v]) ok = false;
          else if (d[u] == d[v] + 1) {
            vector<pii> pa(1, pii(v, r[v][i]));
            vector<pii> pb(1, pii(s[p[u]]-u, p[u]));
            while (true) {
              int va = pa.back().X, vb = pb.back().X;
              if (va == vb) break;
              pa.pb(pii(s[p[va]]-va, p[va]));
              pb.pb(pii(s[p[vb]]-vb, p[vb]));
            }
//            cout << u << ' ';
//            REP(i, sz(pa)) cout << pa[i].X << ' ';
//            REP(i, sz(pb)) cout << pb[i].X << ' ';
//            cout << endl;
            REP(j, sz(pa)-1) add(pa[j].Y, pa[j+1].Y);
            REP(j, sz(pb)-1) add(pb[j].Y, pb[j+1].Y);
            add(pa[0].Y, pb[0].Y);
            add(pa.back().Y, pb.back().Y);
            ans -= sz(pa) - 1;
          }
        }
        if (!ok) break;
      }
      if (!ok) break;
    }
    printf("Case #%d: %d\n", it, ok ? ans : -1);
  }
  return 0;
}

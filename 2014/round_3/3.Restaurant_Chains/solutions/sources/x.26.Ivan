import java.io.*;

import java.awt.geom.Point2D;
import java.text.*;
import java.math.*;
import java.util.*;

public class Main implements Runnable {

	final String filename = "restaraunt_chains";

	public void solve() throws Exception {
		long t = System.currentTimeMillis();
		int N = iread();
		first = new Edge[N];
		int M = iread();
		all.clear();
		for (int i = 0; i < M; i++)
			addEdge(iread(), iread());

		int[] queue = new int[N];

		int[] dist = new int[N];
		int[] was = new int[N];
		int ans = 0;
		for (int i = 0; i < N; i++) {
			for (Edge e = first[i]; e != null; e = e.next)
				if (e.mark == 0) {
					ans++;
					Arrays.fill(dist, 0);
					Arrays.fill(was, 0);
					was[e.from] = 1;
					was[e.to] = 2;
					dist[e.to] = 1;
					int qlen = 0;
					queue[qlen++] = e.from;
					queue[qlen++] = e.to;
					for (int qcur = 0; qcur < qlen; qcur++) {
						int x = queue[qcur];
						for (Edge e2 = first[x]; e2 != null; e2 = e2.next)
							if (was[e2.to] == 0) {
								dist[e2.to] = dist[e.to] + 1;
								was[e2.to] = was[x];
								queue[qlen++] = e2.to;
							} else if (was[x] == 2 && was[e2.to] == 1
									&& dist[x] + 1 == dist[e2.to]) {
								was[e2.to] = 2;
							}
					}
					for (int j = 0; j < all.size(); j++) {
						Edge e2 = all.get(j);
						if (was[e2.from] != was[e2.to]) {
							if (e2.mark != 0) {
								out.write("-1\n");
								return;
							}
							e2.mark = e2.rev.mark = ans;
						}
					}
				}
		}
		out.write(ans + "\n");
		t = System.currentTimeMillis() - t;
		System.out.println(t);
	}

	ArrayList<Edge> all = new ArrayList<Edge>();
	Edge[] first;

	public void addEdge(int x, int y) {
		Edge e1 = new Edge(x, y);
		Edge e2 = new Edge(y, x);
		all.add(e1);
		e1.rev = e2;
		e2.rev = e1;
	}

	class Edge {
		int from, to;
		Edge rev, next;
		int mark;
		boolean isBridge;

		public Edge(int from, int to) {
			this.from = from;
			this.to = to;
			next = first[from];
			first[from] = this;
		}
	}

	StringBuilder tb;

	int N, M;

	public void addTest(int x, int y) {
		tb.append(x + " " + y + "\n");
		M++;
	}

	public void writeTest() throws Exception {
		tb = new StringBuilder();
		N = M = 0;
		addTest(N, N + 1);
		addTest(N + 1, N + 2);
		N += 3;
		while (N < 10000) {
			addTest(N, N - 1);
			addTest(N + 1, N - 2);
			addTest(N + 2, N - 1);
			addTest(N, N + 1);
			addTest(N + 1, N + 2);
			N += 3;
		}
		out.write(N + " " + M + "\n");
		out.write(tb.toString());
	}

	public void run() {
		try {
			// in = new BufferedReader(new InputStreamReader(System.in));
			// out = new BufferedWriter(new OutputStreamWriter(System.out));
			in = new BufferedReader(new FileReader(filename + ".in"));
			out = new BufferedWriter(new FileWriter(filename + ".out"));
			// writeTest();
			// out.flush();
			// if (true)
			// return;
			int T = iread();
			for (int test = 1; test <= T; test++) {
				out.write("Case #" + test + ": ");
				solve();
			}
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public int iread() throws Exception {
		return Integer.parseInt(readword());
	}

	public double dread() throws Exception {
		return Double.parseDouble(readword());
	}

	public long lread() throws Exception {
		return Long.parseLong(readword());
	}

	BufferedReader in;

	BufferedWriter out;

	public String readword() throws IOException {
		StringBuilder b = new StringBuilder();
		int c;
		c = in.read();
		while (c >= 0 && c <= ' ')
			c = in.read();
		if (c < 0)
			return "";
		while (c > ' ') {
			b.append((char) c);
			c = in.read();
		}
		return b.toString();
	}

	public static void main(String[] args) {
		try {
			Locale.setDefault(Locale.US);
		} catch (Exception e) {

		}
		// new Thread(new Main()).start();
		new Thread(null, new Main(), "1", 1 << 25).start();
	}
}
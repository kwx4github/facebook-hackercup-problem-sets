#include <stdio.h>
#include <string.h>
#include <math.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <iostream>
#include <sstream>
using namespace std;

int N, M;
char G[10000][10000] = {0};
vector<vector<int> > V;
int mark[10000];
int dist_a[10000], dist_b[10000];

int back(vector<int> T) {
  if (T.size() <= 1) return 0;
  int sz = T.size();
  int a = T[0];
  int b = a;
  for (int i=1; i<sz; i++)
    if (G[a][T[i]]) {
      b = T[i];
      break;
    }

  for (int i=0; i<N; i++) dist_a[i] = dist_b[i] = mark[i] = 0;
    for (int i=0; i<sz; i++) mark[T[i]] = 1;

  int cnt = 0;
  for (int i=0; i<N; i++) if (mark[i])
    for (int j=0; j<V[i].size(); j++)
      if (mark[V[i][j]]) cnt ++;
  cnt /= 2;
  double cr = sz * log(sz) / log(2);
  if (cr + 0.000001 < cnt) return -999;
  
  {
    queue<int> Q;
    Q.push(a);
    dist_a[a] = 1;
    while (!Q.empty()) {
      int now = Q.front();
      Q.pop();
      for (int i=0; i<V[now].size(); i++) {
        int next = V[now][i];
        if (mark[next] && !dist_a[next]) {
          dist_a[next] = dist_a[now] + 1;
          Q.push(next);
        }
      }
    }
  }
  {
    queue<int> Q;
    Q.push(b);
    dist_b[b] = 1;
    while (!Q.empty()) {
      int now = Q.front();
      Q.pop();
      for (int i=0; i<V[now].size(); i++) {
        int next = V[now][i];
        if (mark[next] && !dist_b[next]) {
          dist_b[next] = dist_b[now] + 1;
          Q.push(next);
        }
      }
    }
  }

  vector<int> A;
  vector<int> B;
  for (int i=0; i<sz; i++)
    if (dist_a[T[i]] < dist_b[T[i]]) A.push_back(T[i]);
    else B.push_back(T[i]);

  return 1 + max(back(A), back(B));
}

int main()
{
  int T;
  cin >> T;
  for (int tt=1; tt<=T; tt++) {
    cin >> N >> M;
    V.clear();
    V.resize(N);
    for (int i=0; i<N; i++) for (int j=0; j<N; j++) G[i][j] = 0;
    for (int i=0; i<M; i++) {
      int a, b;
      cin >> a >> b;
      V[a].push_back(b);
      V[b].push_back(a);
      G[a][b] = G[b][a] = 1;
    }

    int res = -1;

    // Check bipartite
    vector<int> color(N);
    color[0] = 1;
    int bipartite = 1;
    queue<int> Q;
    Q.push(0);
    while (!Q.empty()) {
      int now = Q.front();
      Q.pop();
      for (int i=0; i<V[now].size(); i++) {
        int next = V[now][i];
        if (color[next] == color[now]) bipartite = 0;
        if (!color[next]) Q.push(next);
        color[next] = 3 - color[now];
      }
    }

    if (bipartite) {
      vector<int> T;
      for (int i=0; i<N; i++)
        T.push_back(i);
      res = back(T);
      if (res < 0) res = -1;
    }

    printf("Case #%d: %d\n", tt, res);
  }
  return 0;
}

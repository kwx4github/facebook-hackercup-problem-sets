#include <cstdio>
#include <queue>
#include <vector>

using namespace std;

int n, m;
int el[50000][2];
int dist[10000][10000];
vector<int> e_from_v[10000];

int n_classes;
vector<int> ec[50000];

int check(int i, int j) {
	return 
		dist[el[i][0]][el[j][0]] + dist[el[i][1]][el[j][1]] !=
		dist[el[i][0]][el[j][1]] + dist[el[i][1]][el[j][0]];
}

int main() {
	int num_cases;
	scanf("%d",&num_cases);
	for (int case_num=1;case_num<=num_cases;case_num++) {
		scanf("%d %d",&n,&m);
		// Initialise
		for (int i=0;i<n;i++) {
			for (int j=0;j<n;j++) {
				dist[i][j] = i==j?0:-1;
			}
			e_from_v[i].clear();
		}
		// Read edge list
		for (int i=0;i<m;i++) {
			scanf("%d %d",&el[i][0],&el[i][1]);
			e_from_v[el[i][0]].push_back(el[i][1]);
			e_from_v[el[i][1]].push_back(el[i][0]);
		}
		// Compute distances
		for (int i=0;i<n;i++) {
			// BFS
			queue<int> q;
			q.push(i);
			while (!q.empty()) {
				int j = q.front();
				q.pop();
				for (unsigned k=0;k<e_from_v[j].size();k++) {
					int l = e_from_v[j][k];
					if (dist[i][l]==-1) {
						dist[i][l] = dist[i][j] + 1;
						q.push(l);
					}
				}
			}
		}
		// Count equivalence classes of D-W relation
		n_classes = 0;
		for (int i=0;i<m;i++) {
			for (int j=0;j<n_classes;j++) {
				// If it does not match ec[j][0], continue
				if (!check(i,ec[j][0])) continue;
				// If it matches ec[j][0], check if it matches all the rest
				for (unsigned k=0;k<ec[j].size();k++) {
					if (!check(i,ec[j][k])) {
						n_classes = -1;
						goto done;
					}
				}
				ec[j].push_back(i);
				goto found;
			}
			// If it didn't match somewhere else, put it in its own class
			ec[n_classes].clear();
			ec[n_classes].push_back(i);
			n_classes++;
found:
			continue;
		}
done:	
		printf("Case #%d: %d\n",case_num,n_classes);
	}
}

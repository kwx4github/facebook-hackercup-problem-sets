#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


vector <int> g[10500];
int d[10500][10500];

int qu[10500];
void bfs(int v)
{
	d[v][v] = 0;
	int l = 0, r = 0;
	qu[r++] = v;
	while (r - l > 0)
	{
		int cur = qu[l++];
		int curd = d[v][cur];
		for (int i = 0; i < g[cur].size(); i++)
		{
			int nv = g[cur][i];
			if (d[v][nv] != -1)
				continue;
			d[v][nv] = curd + 1;
			qu[r++] = nv;
		}
	}
}

vector <pair<int, int> > ea, eb;
int e[50500][2];
int color[50500];
int maxColor;
int par[10500];

int getP(int a)
{
	if (a == par[a] )
		return a;
	return par[a] = getP(par[a] );
}
bool un(int a, int b)
{
	int pa = getP(a);
	int pb = getP(b);
	if (pa == pb)
		return false;
	if (rand() % 2)
		par[pa] = pb;
	else
		par[pb] = pa;
	return true;
}



bool good(int a, int b)
{
	return d[e[a][0] ][e[b][0] ] == d[e[a][1] ][e[b][1] ] && d[e[a][0] ][e[b][1] ] == d[e[a][1] ][e[b][0] ];
}

void solve()
{
	ea.clear();
	eb.clear();
	maxColor = 0;
	memset(d, -1, sizeof d);
	for (int i = 0; i < 10500; i++)
		par[i] = i;
	for (int i = 0; i < 10500; i++)
		g[i].clear();

	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++)
	{
		int a, b;
		scanf("%d%d", &a, &b);
		g[a].push_back(b);
		g[b].push_back(a);
		e[i][0] = a;
		e[i][1] = b;
		if (un(a, b) )
		{
			ea.push_back(make_pair(a, b) );
		}
		else
		{
			eb.push_back(make_pair(a, b) );
		}
	}
	int X = ea.size();
	for (int i = 0; i < ea.size(); i++)
	{
		e[i][0] = ea[i].first;
		e[i][1] = ea[i].second;
	}
	for (int i = 0; i < eb.size(); i++)
	{
		e[i + X][0] = eb[i].first;
		e[i + X][1] = eb[i].second;
	}
	for (int i = 0; i < n; i++)
	{
		sort(g[i].begin(), g[i].end() );
		g[i].resize(unique(g[i].begin(), g[i].end() ) - g[i].begin() );
	}
	for (int i = 0; i < n; i++)
		bfs(i);
	for (int i = 0; i < m; i++)
	{
		int curColor = maxColor;
		for (int j = 0; j < i; j++)
		{
			if (good(i, j) )
			{
				if (curColor == maxColor)
					curColor = color[j];
				else if (curColor != color[j] )
				{
					printf("-1");
					return ;
				}
			}
			else
			{
				if (curColor == color[j] )
				{
					printf("-1");
					return;
				}
			}
		}
		if (curColor == maxColor)
		{
			if (i >= X)
			{
				printf("-1");
				return;
			}
			maxColor++;
		}
		color[i] = curColor;
	}
	printf("%d", maxColor);
}



void initTest()
{
	freopen("input.txt", "w", stdout);
	int t = 1;
	printf("%d\n", t);
	for (int i = 0; i < t; i++)
	{
		int n = 10000;
		int m = 10000;
		printf("%d %d\n", n, m);

		for (int i = 0; i < m; i++)
		{
			int a = i % n;
			int b = (i + 1) % n + ( (i + 1) / n) * 5;
			printf("%d %d\n", a, b);
		}
	}

	exit(0);
}

int main()
{
	//initTest();

	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	scanf("%d", &t);
	for (int i = 1; i <= t; i++)
	{
		fprintf(stderr, "%d\n", i);
		fflush(stderr);
		printf("Case #%d: ", i);
		solve();
		printf("\n");
	}



	return 0;
}
#include <cstdio>
#include <numeric>
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include <string>
#include <map>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <queue>
#include <sstream>
#include <deque>

using namespace std;

#define mp make_pair
#define pb push_back
#define rep(i,n) for(int i = 0; i < (n); i++)
#define re return
#define fi first
#define se second
#define sz(x) ((int) (x).size())
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define y0 y3487465
#define y1 y8687969
#define fill(x,y) memset(x,y,sizeof(x))
                         
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef double D;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef vector<vi> vvi;

template<class T> T abs(T x) { re x > 0 ? x : -x; }

int n;
int m;
map<ii, int> all;
int ans, bad;
vi v[10000];
int was[10000];
int d[10000];
vi prev[10000];
int col[50000];

int get (int x, int need) {
	int l = 0, r = sz (prev[x]);
	while (r - l > 1) {
		int s = (l + r) / 2;
		if (d[prev[x][s]] >= need) l = s; else r = s;
	}
	re prev[x][l];
}

int go (int x, int p, int l) {
	d[x] = l;
	was[x] = 1;
	prev[x].pb (p);
	vii u;
	for (int i = 0; i < sz (v[x]); i++) {
		int y = v[x][i];
		if (y != p && was[y] == 1) u.pb (mp (d[y], y));
	}
	sort (all (u));
	reverse (all (u));
	for (int i = 0; i < sz (u); i++) {
		vi w;
		int z = x;
		while (z != u[i].se) {
			w.pb (z);
			z = get (z, u[i].fi);
		}
		w.pb (z);
		if (sz (w) % 2 == 1) {
			bad = 1;
			re 1;
		}
		int k = sz (w) / 2;
		for (int j = 0; j < k; j++) {   
			int a = all[mp (w[j], w[j + 1])];
			int b = all[mp (w[j + k], w[(j + k + 1) % sz (w)])];
			if (col[a] == 0 && col[b] == 0) {
				ans++;
				col[a] = col[b] = ans;
			} else
			if (col[a] == 0) col[a] = col[b]; else
			if (col[b] == 0) col[b] = col[a]; else
			if (col[a] != col[b]) {
				bad = 1;
				re 1;
			}
		}	
		prev[x].pb (u[i].se);
	}
	for (int i = 0; i < sz (v[x]); i++) {
		int y = v[x][i];
		if (was[y] == 0 && go (y, x, l + 1)) re 1;
	}
	was[x] = 2;
	re 0;
}

int main () {
	int tt;
	cin >> tt;
	for (int it = 1; it <= tt; it++) {
		scanf ("%d%d", &n, &m);		
		for (int i = 0; i < n; i++) {
			v[i].clear ();
			prev[i].clear ();
		}
		all.clear ();
		int e = 0;
		for (int i = 0; i < m; i++) {
			int a, b;
			scanf ("%d%d", &a, &b);
			if (all.find (mp (a, b)) == all.end ()) {
				v[a].pb (b);
				v[b].pb (a);
				all[mp (a, b)] = all[mp (b, a)] = e++;
			}
		}
		ans = bad = 0;
		memset (was, 0, sizeof (was));
		memset (col, 0, sizeof (col));
		go (0, -1, 0);
		for (int i = 0; i < e; i++)
			if (!col[i])
				ans++;
		if (bad) ans = -1;
		cout << "Case #" << it << ": " << ans;
		cout << endl;
		fprintf (stderr, "%d / %d = %.2f | %.2f\n", it, tt, (double)clock () / CLOCKS_PER_SEC, ((double)clock () / it * tt) / CLOCKS_PER_SEC);
	}
	return 0;
}
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <vector>
#include <string>
#include <map>
#include <set>

using namespace std;
vector< vector<int> > V;
bool chk[10001];
int sol = 0;
const int MX = 99999999;
int level[10001];

int bfs[10001], hd;
bool ff[10001];
void proc(int a) {
	if (sol == MX) return;
	bfs[0] = a;
	level[a] = 0;
	hd = 1;
	chk[a] = true;
	int pl = 0;

	memset(ff, 0, sizeof(ff));

	for (int i = 0; i < hd; i++) {
		int u = bfs[i];
		if (!ff[u] && level[u] > 0) pl++;
		for (int j = 0; j < V[u].size(); j++){
			int v = V[u][j];
			if (!chk[v]) {
				bfs[hd] = v;
				level[v] = level[u] + 1;
				chk[v] = true;
				hd++;
			}
			else if (level[v] == level[u] + 1) {
				if (ff[v]) {
					sol = MX;
					return;
				}
				ff[v] = true;
			}
			else if (level[v] != level[u] - 1){
				sol = MX;
				return;
			}
		}
	}
	sol = max(sol, pl);
}

int main() {
	freopen("restaurant_chains.txt", "r", stdin);
	freopen("restaurant_chains.out", "w", stdout);
	int T;
	int cs = 0;
	scanf("%d", &T);
	while (T-- > 0) {
		cs++;

		int n, m;
		scanf("%d %d", &n, &m);
		memset(chk, 0, sizeof(chk));
		V = vector< vector<int> >(n, vector<int>());
		for (int i = 0; i < m; i++){
			int a, b;
			scanf("%d %d", &a, &b);
			V[a].push_back(b);
			V[b].push_back(a);
		}
		sol = 0;
		for (int i = 0; i < n; i++){
			if (!chk[i]) proc(i);
		}

		if (sol == MX) sol = -1;
		printf("Case #%d: %d\n", cs, sol);
	}
	return 0;
}
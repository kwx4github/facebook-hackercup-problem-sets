#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

const int MX = 10001;

int d[MX][MX];
VI out[MX];
int E[54000][2];
char e[54000][MX];
VI num;

const int INF = 1e9;

inline bool test(int i, int j) {
    return e[i][E[j][0]]*e[i][E[j][1]] < 0;
}

int solve(bool go = true) {
    int n,m;
    cin >> n >> m;
    REP(i,n) out[i].clear();
    REP(i,n) REP(j,n) d[i][j] = INF;
    REP(i,m) {
        int x,y;
        cin >> x >> y;
        E[i][0] = x; E[i][1] = y;
        out[x].PB(y);
        out[y].PB(x);
    }
    if (!go) return -1;
    
    REP(s,n) {
        d[s][s] = 0;
        queue<int> Q;
        Q.push(s);
        while(!Q.empty()) {
            int f = Q.front();
            Q.pop();
            FORE(it, out[f]) {
                if (d[s][*it] == INF) {
                    d[s][*it] = d[s][f]+1;
                    Q.push(*it);
                }
            }
        }
        if (s == 0) {
            REP(i, n) if (d[0][i] == INF) return -1;
            REP(i,m) if (d[0][E[i][0]] == d[0][E[i][1]]) return -1;
        }
    }
    REP(i, m) REP(j, n) {
        e[i][j] = (d[E[i][0]][j]-d[E[i][1]][j]>0)?1:-1;
    }
    num = VI(m,INF);
    int cn = 0;
    REP(i, m) {
        if (num[i] == INF) {
            num[i] = cn;
            REP(j,i) if (test(i,j)) return -1;
            FOR(j, i+1, m) if (test(i,j)) {
                if (num[j] != INF) return -1;
                num[j] = cn;
            }
            ++cn;
        } else {
            REP(j,m) if ((num[j] == num[i]) != test(i,j)) return -1;
        }
    }
    return cn;

}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;

    REP(i,t) {
        cerr << "Case #" << (i+1) << endl;
        cout << "Case #" << (i+1) << ": ";
        cout << solve(i+1) << endl;
    }

    return 0;
}


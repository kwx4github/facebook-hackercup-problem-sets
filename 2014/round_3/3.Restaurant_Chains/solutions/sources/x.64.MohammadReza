// .... .... .....!
// ...... ......!
// .... ....... ..... ..!

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cassert>

#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <numeric>
#include <bitset>

#include <cstdio>
#include <cstring>

using namespace std;

#define rep(i, n) for (int i = 0, _n = (int)(n); i < _n; i++)
#define fer(i, x, n) for (int i = (int)(x), _n = (int)(n); i < _n; i++)
#define rof(i, n, x) for (int i = (int)(n), _x = (int)(x); i-- > _x; )
#define fch(i, x) for (__typeof(x.begin()) i = x.begin(); i != x.end(); i++)
#define sz(x) (int((x).size()))
#define pb push_back
#define mkp make_pair
#define all(X) (X).begin(),(X).end()

#define X first
#define Y second

typedef long long ll;
typedef pair <int, int> pii;

////////////////////////////////////////////////////////////////////////////////

const int maxn = 10000 + 100;

int n, m;
vector<int> adj[maxn], path;
map<pii, int> cnt;
int mark[maxn], add;

void dfsc (int pos = 0, int color = 0)
{
	if (mark[pos] != -1)
	{
		if (mark[pos] != color)
			throw -1;
		return;
	}
	mark[pos] = color;
	rep (i, sz(adj[pos]))
		dfsc(adj[pos][i], 1-color);
}
/**/
void dfs(int pos = 0, int par = -1)
{
	mark[pos]++;

	path.pb(pos);

	rep(r, sz(adj[pos]))
	{
		int nx = adj[pos][r];

		if (mark[nx] == 0)
		{ 
			dfs(nx, pos);
		}
		else if (mark[nx] == 1)
		{
			if (nx == par)
				continue;

			path.pb(nx);
			for (int i = sz(path)-2; ; i--)
			{
				pii tmp(path[i], path[i+1]);
				if (tmp.X > tmp.Y) swap(tmp.X, tmp.Y);
				cnt[tmp]++;

				add++;

				if (cnt[tmp] > 1)
					throw -1;

				if (path[i] == nx)
					break;
			}
			path.pop_back();
		}
	}

	path.pop_back();

	mark[pos]++;
}
/*/
int d[maxn];

int dfs (int u = 0, int dep = 0)
{
	d[u] = dep;

	int mn = dep, up = dep;
	for (int v: adj[u])
	{
		if (d[v] != -1)
		{
			if (up != dep) throw 0;
			up = d[v];
		}
		else
		{
			int tmp = dfs (v, dep+1);
			if (tmp >= dep) continue;
			if (mn < dep) throw 0;
			mn = tmp;
		}
	}
	if (mn < dep && up < dep) throw 0;
	return min (mn, up);
}
/**/

void solve()
{
		cin >> n >> m;

		fill(adj, adj+n, vector<int>());

		rep (i, m)
		{
			int x, y;
			cin >> x >> y;
			adj[x].pb(y);
			adj[y].pb(x);
		}


		bool bad = false;

		fill(mark, mark+n, -1);

		try { dfsc(); } catch (...) { bad = true; }

		rep(rrr, 5)
		{
			fill(mark, mark+n, 0);
			cnt.clear();
			path.clear();
			add = 0;

			if (!bad) try { dfs(rand()%n); } catch (...) { bad = true; }
		}

		if (bad)
			cout << -1 << endl;
		else
			cout << m - add/2 << endl;
}

int main()
{
	ios_base::sync_with_stdio (false);

	int tcn; cin >> tcn;
	for (int tci = 1; tci <= tcn; tci++)
	{
		cout << "Case #" << tci << ": ";
		solve();
	}

	{ int _; cin >> _; return 0; }
}

#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1001001001
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define SZ(x) ((int)((x).size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define IOS ios_base::sync_with_stdio(0);

// zastąpić tym maina
// wypełnić readInput(), compute() i writeOutput(); zmienne definiować wewnątrz klasy Instance
// PARALLEL - czy ma odpalić testy równolegle, CORES - liczba rdzeni
// uwaga - wersja równoległa może potrzebować dużo pamięci! (T razy więcej)
//         mozna sobie z tym poradzić tworząc duże tablice dynamicznie dopiero w compute()
//         (bo naraz wykonywane są co najwyżej CORES=3 kopie compute())
//         (pamiętać o delete [] na koniec compute)
// linkować z pthreads


#include <pthread.h>
#include <semaphore.h>
#define PARALLEL 1
#define CORES 3
#define N 50007

// dwacol(n,adj) bierze graf o wierzcholkach 1..n i go dwukoloruje
// jesli sie nie udalo, zamiast kolorowania zwraca pusty wektor
vi dwacol (int n, vi *adj) {
   vi ans(n+1,2);
   FOR(i,n) {
      if (ans[i] != 2) continue;
      deque<pii> q;
      q.pb(mp(i,0));
      while (!q.empty()) {
         int v = q.front().fi, kol = q.front().se;
         q.pop_front();
         if (ans[v] == 2) {
            ans[v] = kol;
            FOREACH(it,adj[v]) q.pb(mp(*it,1-kol));
         } else if (ans[v] != kol) return vi();
      }
   }
   return ans;
}

int podziel_na_skladowe (int n, vi *adj) {
	vector<bool> vis(n+1,0);
	int wyn = 0;
	FOR(i,n) {
		if (vis[i]) continue;
		deque<int> q;
		q.pb(i);
		while (!q.empty()) {
			int v = q.front();
			q.pop_front();
			if (vis[v]) continue;
			vis[v]=1;
			FOR(j,SZ(adj[v])) q.pb(adj[v][j]);
		}
		wyn++;
	}
	return wyn;
}


struct UnionFind {
   vi tab, ile;

   UnionFind(int n) : // tworzy UF na 0, 1, ..., n-1
      tab(n), ile(n,1) {
      FOR(i,n) tab[i] = i;
   }

   int find(int a) {
      if (tab[a] == a) return a;
      return tab[a] = find(tab[a]);
   }

   bool unia(int a, int b) { // zwraca, czy odbylo sie polaczenie
      a = find(a), b = find(b);
      if (a==b) return 0;
      if (ile[a] <= ile[b]) {
         ile[b] += ile[a];
         tab[a] = b;
      } else {
         ile[a] += ile[b];
         tab[b] = a;
      }
      return 1;
   }
};

vi bfs1 (int n, int source, vi *adj) {
   vi odl(n+1,-1);
   deque<int> q;
   q.pb(source);
   odl[source] = 0;
   while (!q.empty()) {
      int v = q.front();
      q.pop_front();
      FOREACH(it,adj[v]) if (odl[*it] == -1) {
         odl[*it] = odl[v] + 1;
         q.pb(*it);
      }
   }
   return odl;
}


struct Instance {
   pthread_mutex_t finished;
   Instance() : finished(PTHREAD_MUTEX_INITIALIZER) { pthread_mutex_lock(&finished); }
   
   // define variables here
   int n, m;
   vi adj[N];//, standardadj[N];
   vector<pii> ed;
   int res;
   vector<pii> mst;
   
   void readInput() { // should read input; will run sequentially
      cin >> n >> m;
      FOR(k,m) {
         int a,b;
         cin >> a >> b;
         if (a > b) swap(a,b);
         // no loops?
         //adj[a].pb(SZ(ed));
         //adj[b].pb(SZ(ed));
         ed.pb(mp(a,b));
         adj[a].pb(b);
         adj[b].pb(a);
      }
      sort(ALL(ed));
   }
   
   int seen[N];
   
   void dodaj (int a, int b) {
      if (a > b) swap(a,b);
      mst.pb(mp(a,b));
   }
   
   void dfs (int v, int p) {
      if (seen[v]++) return;
      if (p != -1) dodaj(v,p);
      FOREACH(x,adj[v]) dfs(*x,v);
   }
   
   vi ids[N];
   
   vi adja[N];
   
   void compute() { // should produce output and store it, not use IO; will run in parallel
      vi dwac = dwacol(n, adj);
      if (dwac.empty()) {
         res = -1;
         return;
      }
      
      UnionFind uf(m);
      
      FOR(i,n) seen[i] = 0;
      dfs(0,-1);
      //DBG(mst);
      //DBG(ed)
      //DBG(SZ(mst));
      
      FOREACH(e,mst) {
         int u = e->fi, up = e->se;
         int numer = lower_bound(ALL(ed), *e) - ed.begin();
         //DBG(m)DBG(numer)
         vi distU = bfs1(n, u, adj), distUp = bfs1(n, up, adj);
         FOR(i,m) {
            int v = ed[i].fi, vp = ed[i].se;
            if (distU[v] + distUp[vp] != distU[vp] + distUp[v]) {
               uf.unia(numer, i);
            }
         }
      }
      
      FOR(i,m) ids[uf.find(i)].pb(i);
      res = 0;
      vi niepuste;
      FOR(i,m) if (!ids[i].empty()) {
         ++res;
         niepuste.pb(i);
      }
      //DBG(niepuste);
      FOREACH(x,niepuste) {
         FOR(i,n) adja[i].clear();
         FOREACH(y,niepuste) if (*x != *y) {
            FOREACH(kr,ids[*y]) {
               int a = ed[*kr].fi, b = ed[*kr].se;
               adja[a].pb(b);
               adja[b].pb(a);
            }
         }
         int skl = podziel_na_skladowe(n, adja);
         if (skl > 2) {
            res = -1;
            return;
         }
      }
   }
   
   void writeOutput () { // should write stored output, without newline; will run sequentially
      cout << res;
   }
};

Instance *instances;
sem_t coreSemaphore;
pthread_mutex_t cerr_lock = PTHREAD_MUTEX_INITIALIZER;
int tests, finishedTests = 0;

void* runner (void* input) {
   int testno = *reinterpret_cast<int*>(input);
   sem_wait(&coreSemaphore);
   instances[testno].compute();
   pthread_mutex_lock(&cerr_lock);
   cerr << "test " << testno+1 << " is finished (" << ++finishedTests << "/" << tests << ")" << endl;
   pthread_mutex_unlock(&cerr_lock);
   pthread_mutex_unlock(&instances[testno].finished);
   sem_post(&coreSemaphore);
   return 0;
}

int main () {
   string pierwszalinia;
   getline(cin,pierwszalinia);
   tests = atoi(pierwszalinia.c_str());
   if (PARALLEL) {
      instances = new Instance[tests];
      // reading input
      FOR(i,tests) {
         instances[i].readInput();
      }
      
      // running computations in parallel
      sem_init(&coreSemaphore, 0, CORES);
      pthread_t irrelevant;
      FOR(i,tests) pthread_create(&irrelevant, NULL, runner, new int(i));
      FOR(i,tests) pthread_mutex_lock(&instances[i].finished); // wait until all are finished
      
      // writing output
      FOR(i,tests) {
         printf("Case #%d: ", i+1);
         instances[i].writeOutput();
         printf("\n");
      }
   } else {
      FOR(i,tests) {
         instances = new Instance;
         instances->readInput();
         instances->compute();
         printf("Case #%d: ", i+1);
         instances->writeOutput();
         printf("\n");
         cerr << "test " << i+1 << " is finished (" << ++finishedTests << "/" << tests << ")" << endl;
         delete instances;
      }
   }
}

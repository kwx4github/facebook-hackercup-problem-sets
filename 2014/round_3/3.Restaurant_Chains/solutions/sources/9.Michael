#include <iostream>
#include <queue>
using namespace std;

int dist[10000][10000];
bool contains[10000][10000];
bool visited[10000];
int first[10000];
int added[10000];

int main() {
	int T;

	cin >> T;
	for (int t = 1; t <= T; t++) {
		int N, M;
		vector<int> edges[10000];

		cin >> N >> M;
		for (int i = 0; i < M; i++) {
			int s, e;
			cin >> s >> e;
			edges[s].push_back(e);
			edges[e].push_back(s);
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				dist[i][j] = -1;
				contains[i][j] = false;
			}
			visited[i] = false;

			dist[i][i] = 0;
			queue<int> q;
			q.push(i);
			while (!q.empty()) {
				int next = q.front();
				q.pop();
				for (vector<int>::iterator j = edges[next].begin(); j != edges[next].end(); j++) {
					if (dist[i][*j] == -1) {
						dist[i][*j] = dist[i][next] + 1;
						q.push(*j);
					}
				}
			}
		}

		int count = 0;
		visited[0] = true;
		queue<int> q;
		q.push(0);
		while (!q.empty()) {
			int next = q.front();
			q.pop();
			for (vector<int>::iterator i = edges[next].begin(); i != edges[next].end(); i++) {
				if (!visited[*i]) {
					visited[*i] = true;
					q.push(*i);

					for (int j = 0; j < count; j++) {
						contains[*i][j] = contains[next][j];
					}
					int j;
					for (j = 0; j < count; j++) {
						if (contains[*i][j]) continue;
						if (dist[*i][first[j]] < dist[next][first[j]]) break;
					}
					added[*i] = j;
					contains[*i][j] = true;
					if (j == count) {
						first[count++] = *i;
					}
				}
			}
		}

		for (int i = 0; i < N; i++) visited[i] = false;
		visited[0] = true;
		q.push(0);
		while (!q.empty()) {
			int next = q.front();
			q.pop();
			for (vector<int>::iterator i = edges[next].begin(); i != edges[next].end(); i++) {
				if (!visited[*i]) {
					visited[*i] = true;
					q.push(*i);

					for (int j = 0; j < N; j++) {
						if (dist[*i][j] == dist[next][j] || (dist[*i][j] < dist[next][j] && !contains[j][added[*i]]) || (dist[*i][j] > dist[next][j] && contains[j][added[*i]])) {
							count = -1;
							break;
						}
					}
				}
			}
		}
		cout << "Case #" << t << ": " << count << '\n';
	}
	return 0;
}

#pragma comment(linker, "/STACK:134217728")

#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

VInt E[1 << 18];
int C[1 << 18];
int L[1 << 18];
int A[1 << 18];
int B[1 << 18];

int f(int n)
{
	CLEAR(L, -1);
	CLEAR(A, 0);

	int res = 0;
	VInt v;
	v.PB(0);
	L[0] = 1;
	while (SIZE(v) != 0)
	{
		int i, j;
		VInt w;
		set<PII> Set;
		FOR(i, 0, SIZE(v))
		{
			int a = v[i];
			if (A[a] == 1)
				++res;
			if (A[a] > 2)
				return -1;

			FOR(j, 0, C[a])
			{
				int b = E[a][j];
				if (L[b] == L[a] - 1)
					continue;
				if (L[b] == L[a])
					return -1;

				++A[b];
				if (L[b] == -1)
				{
					L[b] = L[a] + 1;
					B[b] = a;
					w.PB(b);
				}
				else
				{
					int aa = a;
					int bb = B[b];
					if (aa > bb)
						swap(aa, bb);

					PII key = PII(aa, bb);
					if (Set.find(key) != Set.end())
						return -1;

					Set.insert(key);
				}
			}
		}

		v = w;
	}

	return res;
}

int SolveTest(int test)
{
	int n, m;
	scanf("%d%d", &n, &m);

	int i, j;
	FOR(i, 0, m)
	{
		int a, b;
		scanf("%d%d", &a, &b);

		E[a].PB(b);
		E[b].PB(a);
	}

	FOR(i, 0, n)
		C[i] = SIZE(E[i]);

	int res = f(n);

	FOR(i, 0, n)
		E[i].clear();

	printf("Case #%d: %d\n", test + 1, res);
	return 0;
}

int main()
{
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

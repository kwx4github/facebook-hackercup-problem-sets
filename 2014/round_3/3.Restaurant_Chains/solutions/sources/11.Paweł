#include <string>
#include <cstring>
#include <vector>
#include <cmath> 
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
 
using namespace std;
 
#define REP(a,n) for(int a=0; a<(n); ++a)
#define FOR(a,b,c) for(int a=(b); a<=(c); ++a)
#define FORD(a,b,c) for(int a=(b); a>=(c); --a)
#define INIT(i,v) __typeof(v) i = (v)
#define FOREACH(i,v) for(INIT(i, (v).begin()); i!=(v).end(); ++i)
#define MP make_pair
#define PB push_back
#define DEB(x) cerr << #x << " = " << x << "\n"
 
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long LL;
 
template<class T>
inline int size(const T&t){return t.size();}

#define INF 1000000000
 
//////////////////////////////////////////

int N, M;
vi sas[10000];
vector<pii> kraw;
int dist[10000][10000];
bool byl[10000];
int nr[50000], rev[50000];
int parz[10000];

queue<int> Q;

bool test() {
  REP(a, N)
    parz[a] = -1;
  parz[0] = 0;
  Q.push(0);
  while (!Q.empty()) {
    int x = Q.front();
    Q.pop();
    FOREACH(it, sas[x]) {
      if (parz[*it]==parz[x])
        return 0;
      if (parz[*it]<0) {
        parz[*it] = !parz[x];
        Q.push(*it);
      }
    }
  }
  return 1;
}

inline void enQ(int s, int a, int d) {
  if (dist[s][a]<=d)
    return;
  dist[s][a] = d;
  Q.push(a);
}

int licz() {
  if (!test()) return -1;
  REP(a, N) {
    REP(b, N) {
      dist[a][b] = INF;
      byl[b] = 0;
    }
    enQ(a, a, 0);
    while (!Q.empty()) {
      int x = Q.front();
      Q.pop();
      FOREACH(it, sas[x])
        enQ(a, *it, dist[a][x]+1);
    }
  }
  REP(a, M)
    nr[a] = rev[a] = 0;
  int nn = 0;
  REP(kn, M) {
    if (!nr[kn])
      nr[kn] = ++nn;
    FOR(kn2, kn+1, size(kraw)-1)
      if (dist[kraw[kn].first][kraw[kn2].first]==dist[kraw[kn].second][kraw[kn2].second] && dist[kraw[kn].first][kraw[kn2].second]==dist[kraw[kn].second][kraw[kn2].first]) {
        if (dist[kraw[kn].first][kraw[kn2].first]<dist[kraw[kn].first][kraw[kn2].second]) {
          if (!nr[kn2]) {
            nr[kn2] = nr[kn];
            rev[kn2] = rev[kn];
          }
          else
          if (nr[kn2]!=nr[kn] || rev[kn2]!=rev[kn]) 
            return -1;
        }
        else {
          if (!nr[kn2]) {
            nr[kn2] = nr[kn];
            rev[kn2] = !rev[kn];
          }
          else
          if (nr[kn2]!=nr[kn] || rev[kn2]!=!rev[kn]) 
            return -1;
        }
      }
  }
  return nn;
}
int licz2() {
  int xxx = 0;
  if (!test()) xxx = -1;
  REP(a, N) {
    REP(b, N) {
      dist[a][b] = INF;
      byl[b] = 0;
    }
    enQ(a, a, 0);
    while (!Q.empty()) {
      int x = Q.front();
      Q.pop();
      FOREACH(it, sas[x])
        enQ(a, *it, dist[a][x]+1);
    }
  }
DEB(xxx);
  REP(a, M)
    nr[a] = rev[a] = 0;
  int nn = 0;
  REP(kn, M) {
    if (!nr[kn])
      nr[kn] = ++nn;
    FOR(kn2, kn+1, size(kraw)-1)
      if (dist[kraw[kn].first][kraw[kn2].first]==dist[kraw[kn].second][kraw[kn2].second] && dist[kraw[kn].first][kraw[kn2].second]==dist[kraw[kn].second][kraw[kn2].first]) {
        if (dist[kraw[kn].first][kraw[kn2].first]<dist[kraw[kn].first][kraw[kn2].second]) {
          if (!nr[kn2]) {
            nr[kn2] = nr[kn];
            rev[kn2] = rev[kn];
          }
          else
          if (nr[kn2]!=nr[kn] || rev[kn2]!=rev[kn]) 
            xxx = -1;
        }
        else {
          if (!nr[kn2]) {
            nr[kn2] = nr[kn];
            rev[kn2] = !rev[kn];
          }
          else
          if (nr[kn2]!=nr[kn] || rev[kn2]!=!rev[kn]) 
            xxx = -1;
        }
      }
    if (kn%1000==0) DEB(kn);
  }
  return nn;
}

int main() {
  int TT;
  scanf("%d", &TT);
  REP(tt, TT) {
    scanf("%d%d", &N, &M);
    REP(a, N)
      sas[a].clear();
    kraw.clear();
    REP(a, M) {
      int x, y;
      scanf("%d%d", &x, &y);
      kraw.PB(MP(x, y));
      sas[x].PB(y);
      sas[y].PB(x);
    }
    int wyn = licz2();
    printf("Case #%d: %d\n", tt+1, wyn);
    fprintf(stderr, "Case #%d: %d\n", tt+1, wyn);
  }
}



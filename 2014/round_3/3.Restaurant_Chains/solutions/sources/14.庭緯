// TwT514 {{{
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <bitset>
#include <queue>
#include <stack>
#include <functional>
#include <utility>
#define SZ(x) ((int)(x).size())
#define FOR(i,c) for (__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define REP(i,n) for (int i=0; i<(int)(n); i++)
#define REP1(i,a,b) for (int i=(int)(a); i<=(int)(b); i++)
#define ALL(x) (x).begin(),(x).end()
#define MS0(x,n) memset((x),0,(n)*sizeof(*x))
#define MS1(x,n) memset((x),-1,(n)*sizeof(*x))
#define MP make_pair
#define PB push_back
#define RI(a) scanf("%d",&(a))
#define RII(a,b) scanf("%d%d",&(a),&(b))
#define RIII(a,b,c) scanf("%d%d%d",&(a),&(b),&(c))
using namespace std;
typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;
// }}}

#define N 10010
#define M 50010
struct DJS {
    int fa[M];
    void init( int n ) { REP(i,n) fa[i]=i; }
    int Find( int x ) { return x==fa[x]?x:fa[x]=Find(fa[x]); }
    void Union( int a, int b ) { fa[Find(a)]=Find(b); }
};

VI e[N];
int n,m,ea[M],eb[M];
void input() {
    RII(n,m);
    REP(i,m) RII(ea[i],eb[i]);
    REP(i,n) e[i].clear();
    REP(i,m) {
        e[ea[i]].PB(eb[i]);
        e[eb[i]].PB(ea[i]);
    }
}

int clr[N];
bool check() {
    memset(clr,0,sizeof(clr));
    queue<int> q;
    clr[0]=1;
    q.push(0);
    while ( !q.empty() ) {
        int p=q.front(); q.pop();
        FOR(it,e[p]) if ( !clr[*it] ) {
            clr[*it]=3-clr[p];
            q.push(*it);
        }
    }
    REP(i,m) if ( clr[ea[i]]==clr[eb[i]] ) return 0;
    return 1;
}

void BFS( int p, short d[N] ) {
    static int q[N];
    REP(i,n) d[i]=-1;
    int fr=0,bk=0;
    d[p]=0;
    q[bk++]=p;
    while ( fr!=bk ) {
        p=q[fr++];
        FOR(it,e[p]) if ( d[*it]==-1 ) {
            d[*it]=d[p]+1;
            q[bk++]=*it;
        }
    }
}

short dis[N][N];
void build() {
    REP(i,n) BFS(i,dis[i]);
}

DJS dv,de;
bool vis[M];
int vis2[N],ucs;
void solve() {
    if ( !check() ) {
        puts("-1");
        return;
    }
    build();
    de.init(m);
    for ( int i=0; i<m; i++ ) for ( int j=i+1; j<m; j++ ) if ( de.Find(i)!=de.Find(j) )
        if ( dis[ea[i]][ea[j]]+dis[eb[i]][eb[j]] != dis[ea[i]][eb[j]]+dis[eb[i]][ea[j]] ) de.Union(i,j);
    memset(vis,0,sizeof(vis));
    int ans=0;
    REP(i,m) if ( !vis[de.Find(i)] ) {
        int c=de.Find(i);
        vis[c]=1;
        dv.init(n);
        REP(j,m) if ( de.Find(j)!=c ) dv.Union(ea[j],eb[j]);
        int cn=0;
        ucs++;
        REP(j,n) {
            int jj=dv.Find(j);
            if ( vis2[jj]==ucs ) continue;
            vis2[jj]=ucs;
            cn++;
        }
        if ( cn>2 ) {
            puts("-1");
            return;
        }
        if ( cn==2 ) ans++;
    }
    printf("%d\n",ans);
}

int main( int argc, char *argv[] ) {
    int t;
    RI(t);
    REP1(i,1,t) {
        input();
        if ( argc>=3 && (i<atoi(argv[1]) || i>atoi(argv[2])) ) continue;
        printf("Case #%d: ",i);
        solve();
    }
    return 0;
}



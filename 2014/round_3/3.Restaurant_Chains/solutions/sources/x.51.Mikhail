#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <numeric>

#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;

const int maxn = 10000;

vector<int> e[maxn];
bitset<maxn> p[maxn];
vector<int> par[maxn];
int d[maxn];

int main() {
#ifdef LOCAL_DEFINE
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#endif

    int T;
    scanf("%d", &T);
    for (int t = 1; t <= T; ++t) {
        cerr << "Case #" << t << "...\n";
        int N, M;
        scanf("%d%d", &N, &M);
        forn(i, N) {
            e[i].clear();
            p[i].reset();
            par[i].clear();
            d[i] = -1;
        }
        forn(i, M) {
            int x, y;
            scanf("%d%d", &x, &y);
            e[x].pb(y);
            e[y].pb(x);
        }
        vector<int> q;
        q.pb(0);
        d[0] = 0;
        int l = 0;
        int C = 0;
        while (C != -1 && l < q.size()) {
            int v = q[l++];
            forn(i, e[v].size()) {
                int u = e[v][i];
                if (d[u] == d[v]) {
                    C = -1;
                    break;
                }
                if (d[u] == -1) {
                    d[u] = d[v] + 1;
                    q.pb(u);
                }
                if (d[u] == d[v] + 1) {
                    par[u].pb(v);
                }
            }
        }
        if (C >= 0) {
            for (int i = 1; i < N; ++i) {
                int v = q[i];
                forn(j, par[v].size()) {
                    p[v] |= p[par[v][j]];
                }
                if (p[v].count() < d[v]) {
                    p[v].set(C++, 1);
                }
                if (p[v].count() > d[v]) {
                    C = -1;
                    break;
                }
            }
        }
        cout << "Case #" << t << ": " << C << '\n';
    }

#ifdef LOCAL_DEFINE
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}

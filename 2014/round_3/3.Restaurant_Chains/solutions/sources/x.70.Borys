import java.io.*;
import java.util.*;

public class R3Task3 {

	class Vertex implements Comparable<Vertex> {
		int v, h;

		Vertex(int v, int h) {
			this.v = v;
			this.h = h;
		}

		@Override
		public int compareTo(Vertex o) {
			return Integer.compare(h, o.h);
		}
	}

	int[] d(int from, ArrayList<Integer>[] g) {
		int[] h = new int[g.length];
		Arrays.fill(h, -1);
		h[from] = 0;
		ArrayList<Integer> q = new ArrayList<>();
		q.add(from);
		int it = 0;
		while (it < q.size()) {
			int v = q.get(it++);
			for (int j = 0; j < g[v].size(); j++) {
				int to = g[v].get(j);
				if (h[to] == -1) {
					h[to] = h[v] + 1;
					q.add(to);
				}
			}
		}
		return h;
	}

	void solveOneTest() {
		int n = in.nextInt();
		if (n == 1) {
			out.println(0);
			return;
		}
		int m = in.nextInt();
		ArrayList<Integer>[] g = new ArrayList[n];
		for (int i = 0; i < n; i++)
			g[i] = new ArrayList<>();
		for (int i = 0; i < m; i++) {
			int fr = in.nextInt();
			int to = in.nextInt();
			g[fr].add(to);
			g[to].add(fr);
		}
		int[] h = d(0, g);
		int used = 0;
		Vertex[] aa = new Vertex[n];
		for (int i = 0; i < n; i++)
			aa[i] = new Vertex(i, h[i]);
		Arrays.sort(aa);
		BitSet[] vv = new BitSet[n];
		for (int i = 0; i < n; i++)
			vv[i] = new BitSet();
		for (int i = 0; i < n; i++) {
			int v = aa[i].v;
			int curH = h[v];
			ArrayList<Integer> good = new ArrayList<>();
			for (int j = 0; j < g[v].size(); j++) {
				int to = g[v].get(j);
				if (h[to] == curH - 1) {
					good.add(to);
				}
			}
			if (good.size() > 2) {
				out.println(-1);
				return;
			}
			if (good.size() == 0)
				continue;
			if (good.size() == 2) {
				vv[v].or(vv[good.get(0)]);
				vv[v].or(vv[good.get(1)]);
			} else {
				vv[v].or(vv[good.get(0)]);
				vv[v].set(used++);
			}
		}
		Random rnd = new Random(123);
		for (int i = 0; i < n; i++) {
			int[] h2 = d(i, g);
			for (int j = 0; j < 30; j++) {
				int vvv = rnd.nextInt(n);
				BitSet orr = (BitSet) vv[i].clone();
				orr.or(vv[vvv]);
				BitSet and = (BitSet) vv[i].clone();
				and.and(vv[vvv]);
				orr.xor(and);
				int diff = orr.cardinality();
				if (diff != h2[vvv]) {
					out.println(-1);
					return;
				}
			}
		}
		out.println(used);
	}

	void solve() {
		int t = in.nextInt();
		for (int test = 0; test < t; test++) {
			System.err.println(test);
			long from = System.currentTimeMillis();
			out.print("Case #" + (test + 1) + ": ");
			solveOneTest();
			System.err.println(System.currentTimeMillis() - from + " ms");
		}
	}

	InputReader in;
	PrintWriter out;

	void runIO() {
		in = new InputReader(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	void run() {
		in = new InputReader(new File("input.txt"));
		try {
			out = new PrintWriter(new File("output.txt"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		solve();

		out.close();
	}

	public static void main(String[] args) {
		new R3Task3().run();
	}

	class InputReader {
		BufferedReader bf;
		StringTokenizer st;

		InputReader(File f) {
			try {
				bf = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		InputReader(InputStream s) {
			bf = new BufferedReader(new InputStreamReader(s));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return null;
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		boolean hasMoreElements() {
			while (!st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return false;
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
	}
}
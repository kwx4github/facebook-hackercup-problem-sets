#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>

using namespace std;

typedef long long ll;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FOREACH(i,v) for(typeof((v).begin()) i=(v).begin();i!=(v).end();i++)
#define FILL(x,v) memset(x,v,sizeof(x))
const int INF = (int)1E9;
#define MAXN 100005
#define MAXM MAXN
int L, adj[MAXN];
int N, M;
struct llist{
	int id, cost, next;
} lists[MAXM*2];

void insertList(int &begin, int id){
	lists[L].id = id;
	lists[L].next = begin;
	begin = L++;
}
struct dij{
	int x, d, p;
	dij(int _x, int _d, int _p){
		x = _x; d = _d; p = _p;
	}
};
int par[MAXN][2];
int dst[MAXN];
map< pair<int, int>, bool > px;
int bfs(int s){
	px.clear();
	FILL(par, -1);
	FILL(dst, 63);
	dst[s] = 0;
	queue< dij > que;
	que.push( dij(s,0,-1) );
	int ans = 0;
	while(!que.empty()){
		dij now = que.front();
		que.pop();
		int x = now.x, p = now.p, d = now.d;
		if(par[x][1]==-1) ans++;

		int t = adj[x];
		while(t!=-1){
			int y = lists[t].id;
			if(y==p){
				t = lists[t].next;
				continue;
			}
			if(dst[y]==dst[x]) return -1;
			if(par[y][0]==-1) {
				par[y][0] = x;
				dst[y] = d+1;
				que.push( dij(y, d+1, x) );
			}
			else if(par[y][1]==-1) {
				par[y][1] = x;
				int a = par[y][0], b = par[y][1];
				if(a>b) swap(a,b);
				pair<int,int> pr = make_pair(a,b);
				if(px[pr]) return -1;
				else px[pr] = 1;
				//...
			}else return -1;
			t = lists[t].next;
		}
	}
	return ans-1;
}
int main(){
	int cs;
	cin >> cs;
	REP(csn, 1, cs+1){
		cerr << csn << endl;
		printf("Case #%d: ", csn);
		cin >> N >> M;
		L = 0;
		FILL(adj, -1);
		REP(i,0,M){
			int a,b;
			scanf("%d%d", &a, &b);
			insertList(adj[a], b);
			insertList(adj[b], a);
		}
		int ans = -1;
		REP(i,0,N){
			ans = max(bfs(i), ans);
		}
		cout << ans << endl;
	}
	return 0;
}
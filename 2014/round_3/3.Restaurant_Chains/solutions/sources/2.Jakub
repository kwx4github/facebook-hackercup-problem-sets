#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(it, (x)) cerr <<*it <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;
template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<typename T1, typename T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { out << "(" << pair.X << ", " << pair.Y << ")"; return out; }

const int N = 10000;
const int M = 50000;
int n, m;
int dist[N][N];
vector<int> edges[N];
int p[M]; 
PII edgeList[M];

int parent(int a) {
    if (p[a] == a) return a;
    return p[a] = parent(p[a]);
}

void join(int a, int b) {
    p[parent(a)] = parent(b);
}

void bfs(int pp) {
    REP(i, n) dist[pp][i] = -1;
    vector<int> queue;
    dist[pp][pp] = 0;
    queue.PB(pp);
    REP(i, SZ(queue)) {
        int q = queue[i];
        REP(j, SZ(edges[q])) {
            if (dist[pp][edges[q][j]] >= 0) continue;
            dist[pp][edges[q][j]] = dist[pp][q] + 1;
            queue.PB(edges[q][j]);
        }
    }
}

bool bipartite() {
    REP(i, m) {
        if (dist[0][edgeList[i].X] == dist[0][edgeList[i].Y]) return false;
    }
    return true;
}

void doit() {
    scanf("%d %d", &n, &m);
    REP(i, n) edges[i].clear();
    REP(i, m) {
        int x, y; scanf("%d %d", &x, &y);
        edges[x].PB(y);
        edges[y].PB(x);
        edgeList[i] = MP(x,y);
    }

    REP(i, n) bfs(i);

    if (!bipartite()) {
        printf("-1\n");
        return;
    }

    REP(i, m) p[i] = i;
    REP(i, m) REP(j, m) {
        int x = edgeList[i].X, y = edgeList[i].Y;
        int u = edgeList[j].X, v = edgeList[j].Y;
        if (dist[x][u] + dist[y][v] != dist[x][v] + dist[y][u]) {
            join(i,j);
        }
    }
    
    REP(i, m) REP(j, m) {
        int x = edgeList[i].X, y = edgeList[i].Y;
        int u = edgeList[j].X, v = edgeList[j].Y;
        if ((parent(i) == parent(j)) && (dist[x][u] + dist[y][v] == dist[x][v] + dist[y][u])) {
            printf("-1\n");
            return;
        }
    }


    set<int> mySet;
    REP(i, m) mySet.insert(parent(i));
    printf("%d\n", SZ(mySet));
}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);

    int ttt; scanf("%d", &ttt);
    REP(i, ttt) {
        printf("Case #%d: ", i+1);
        doit();
    }

    return 0;
}

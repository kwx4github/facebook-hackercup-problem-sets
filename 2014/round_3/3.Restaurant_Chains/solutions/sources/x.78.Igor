#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
inline ostream& operator<< (ostream& out, const pt& p) { return out << '(' << p.x << ", " << p.y << ')'; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

inline int myRand ()
{
	return (rand() << 15) ^ rand();
}

const int N = 10 * 1000 + 3;

int n, m;
vector <int> g[N];
bitset <N> s[N];

inline bool read()
{
	if (scanf("%d%d", &n, &m) != 2) return false;
	
	forn(i, n) g[i].clear();
	
	forn(i, m)
	{
		int a, b;
		assert(scanf("%d%d", &a, &b) == 2);
		//a = myRand() % n;
		//b = myRand() % n;
		//if (a == b) b = (b + 1) % n;
		//a = i;
		//b = i + 1;
		g[a].pb(b);
		g[b].pb(a);
	}
	
	return true;
}

void bfs (int start, int d[N])
{
	forn(i, n) d[i] = INF;
	d[start] = 0;
	
	queue <int> q;
	q.push(start);
	
	while (!q.empty())
	{
		int v = q.front();
		q.pop();
		
		forn(i, sz(g[v]))
		{
			int to = g[v][i];
			if (d[to] > d[v] + 1)
			{
				d[to] = d[v] + 1;
				q.push(to);
			}
		}
	}
}

int d[N];
int start;
vector <int> ord;

inline void prepare ()
{
	start = 0;
	forn(i, n) if (sz(g[i]) < sz(g[start])) start = i;
	
	bfs(start, d);
	
	ord.clear();
	vector <pt> v;
	forn(i, n) v.pb(mp(d[i], i));
	
	sort(all(v));
	forn(i, sz(v)) ord.pb(v[i].sc);
}

inline bool check (int v)
{
	bfs(v, d);
	
	forn(i, n)
		if (int((s[v] ^ s[i]).count()) != d[i])
			return false;
			
	return true;
}

inline bool check ()
{
	set <int> used;
	
	int M = min(n, 20);
	
	while (sz(used) < M)
	{
		int v = myRand() % n;
		
		if (used.count(v)) continue;
		
		used.insert(v);
		
		if (!check(v)) return false;
	}
	
	return true;
}

inline void solve(int test)
{
	prepare();
	
	forn(i, n) s[i].reset();
	
	int last = 0;
	
	forn(i, sz(ord))
	{
		int v = ord[i];
		
		forn(j, sz(g[v]))
		{
			int to = g[v][j];
			
			if (d[to] + 1 == d[v])
				s[v] |= s[to];
		}
		
		if (int(s[v].count()) != d[v])
			s[v][last++] = 1;
	}
	
	if (!check())
		last = -1;
	
	printf("Case #%d: %d\n", test + 1, last);
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		assert(read());
		solve(test);
#ifdef SU2_PROJ
		cerr << "test " << test + 1 << ": " << clock() << endl;
#endif
	}
	
	return 0;
}

#include <bits/stdc++.h>
#include <fcntl.h>
#include <unistd.h>

using namespace std;

/*** START OF TEMPLATE CODE ***/

typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef unsigned long long ull;
typedef complex<double> pnt;
typedef pair<int, int> pii;

#define RA(x) begin(x), end(x)
#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)
#define SZ(x) ((int) (x).size())

template<class T>
vector<T> splitstr(const string &s)
{
    istringstream in(s);
    vector<T> out;
    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));
    return out;
}

template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }

static void redirect(int argc, const char **argv)
{
    if (argc > 1)
    {
        int fd = open(argv[1], O_RDONLY);
        if (fd == -1) { perror(argv[1]); exit(1); }
        if (-1 == dup2(fd, 0)) { perror(argv[1]); exit(1); }
        if (-1 == close(fd)) { perror(argv[1]); exit(1); }
    }

    if (argc > 2)
    {
        int fd = open(argv[2], O_WRONLY | O_CREAT, 0666);
        if (fd == -1) { perror(argv[2]); exit(1); }
        if (-1 == dup2(fd, 1)) { perror(argv[2]); exit(1); }
        if (-1 == close(fd)) { perror(argv[2]); exit(1); }
    }

    ios::sync_with_stdio(false);
    cin.exceptions(ios::failbit | ios::badbit);
}

/*** END OF TEMPLATE CODE ***/

typedef vector<int> desc;

static ull zobrist[10001];

int main(int argc, const char **argv)
{
    redirect(argc, argv);

    mt19937_64 engine;
    engine.seed(123);
    uniform_int_distribution<ull> dist(0, ULONG_MAX);
    for (int i = 0; i <= 10000; i++)
    {
        zobrist[i] = dist(engine);
    }

    int cases;
    cin >> cases;
    for (int cas = 0; cas < cases; cas++)
    {
        int N, M;
        cin >> N >> M;
        vector<vector<int> > edges(N);
        for (int i = 0; i < M; i++)
        {
            int x, y;
            cin >> x >> y;
            edges[x].push_back(y);
            edges[y].push_back(x);
        }

        unordered_map<ull, int> verts;
        vector<int> level(N, -1);
        vector<desc> descs(N);
        queue<int> q;
        q.push(0);
        level[0] = 0;
        int ans = 0;
        while (!q.empty())
        {
            int x = q.front();
            q.pop();
            desc &me = descs[x];
            int parents = 0;
            int eparents = 0;
            for (int y : edges[x])
            {
                if (level[y] == level[x])
                    goto bad;
                else if (level[y] == -1)
                {
                    level[y] = level[x] + 1;
                    q.push(y);
                }

                if (level[y] < level[x])
                {
                    desc me2;
                    set_union(RA(descs[x]), RA(descs[y]), back_inserter(me2));
                    me = move(me2);
                    if (SZ(me) > level[x])
                        goto bad;
                    parents++;
                }
            }
            if (SZ(me) < level[x])
            {
                assert(SZ(me) + 1 == level[x]);
                me.insert(me.end(), ans);
                ans++;
            }

            ull z = 0;
            for (int v : me)
                z ^= zobrist[v];

            if (verts.count(z))
                goto bad;
            verts[z] = x;
            for (int lbl : me)
            {
                ull zp = z ^ zobrist[lbl];
                if (verts.count(zp))
                    eparents++;
            }
            if (eparents != parents)
                goto bad;
        }

        cout << "Case #" << cas + 1 << ": " << ans << "\n";
        continue;

bad:
        cout << "Case #" << cas + 1 << ": -1\n";
    }
    return 0;
}

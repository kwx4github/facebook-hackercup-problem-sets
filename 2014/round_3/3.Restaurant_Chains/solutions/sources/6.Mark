#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <set>
#include <map>
#include <numeric>
#include <queue>

using namespace std;

#define MAXN 10010
#define MAXM 50010

int Q[MAXN];
vector<int> E[MAXN];
pair<int, int> EE[MAXM];
int DD[MAXN][MAXN];

int main() {
  int T; cin >> T;
  for(int t = 1; t <= T; t++) {
    printf("Case #%d: ", t);

    int N, M; cin >> N >> M;
    for(int i = 0; i < N; i++) {
      E[i].clear();
    }
    for(int i = 0; i < M; i++) {
      int u, v; cin >> u >> v;
      E[u].push_back(v);
      E[v].push_back(u);
      EE[i] = make_pair(u, v);
    }
    for(int i = 0; i < N; i++) {
      sort(E[i].begin(), E[i].end());
      E[i].resize(unique(E[i].begin(), E[i].end()) - E[i].begin());
    }

    memset(DD, -1, sizeof(DD));
    for(int ii = 0; ii < N; ii++) {
      int qsz = 0;
      int* D = DD[ii];
      D[ii] = 0;
      Q[qsz++] = ii;

      for(int i = 0; i < N; i++) {
        int u = Q[i];
        for(int j = 0; j < E[u].size(); j++) {
          int v = E[u][j];
          if(D[v] == -1) {
            D[v] = D[u] + 1;
            Q[qsz++] = v;
          }
        }
      }
    }

    bool bad = false;
    vector<bool> has(M, false);
    set<vector<int> > cls;
    for(int i = 0; i < M && !bad; i++) {
      vector<int> v;
      for(int j = 0; j < M; j++) {
        if(DD[EE[i].first][EE[j].first] + DD[EE[i].second][EE[j].second] !=
           DD[EE[i].first][EE[j].second] + DD[EE[i].second][EE[j].first]) {
          v.push_back(j);
        }
      }
      if(cls.insert(v).second) {
        for(int j = 0; j < v.size(); j++) {
          if(has[v[j]]) {
            bad = true;
          }
          has[v[j]] = true;
        }
      }
    }
    
    printf("%d\n", bad ? -1 : (int)cls.size());
  }
  return 0;
}

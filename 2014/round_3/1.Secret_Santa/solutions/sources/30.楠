#include <vector>
#include <map>
#include <set>
#include <stack>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <queue>
using namespace std;

int a[105];
__int64 dp[105][105];
__int64 pmod = 1000000007;
__int64 ba[10], c[105][105];
void pre() {
	int i, j;
	for (i = 0; i < 105; ++i) {
		c[i][i] = c[i][0] = 1;
		for (j = 1; j < i; ++j)
			c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % pmod;
	}
	ba[0] = 1;
	for (i = 1; i < 10; ++i)
		ba[i] = (ba[i - 1] * i) % pmod;
}
int main() {
	freopen("1.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int t, cas = 0;
	int n, i, j, k, r;
	pre();
	scanf("%d", &t);
	while (t--) {
		cas++;
		scanf("%d", &n);
		for (i = 0; i < n; ++i)
			scanf("%d", &a[i]);
		memset(dp, 0, sizeof(dp));
		dp[0][0] = 1;
		for (i = 0; i < n; ++i) {
			for (j = 0; j <= 100; ++j) {
				if (dp[i][j] == 0)
					continue;
				for (k = 0; k <= a[i] && k <= j; ++k) {//ÏòÇ°·Å
					for (r = 0; r <= a[i] && r <= j; ++r) {//Ìî¿Õ
						dp[i + 1][j + a[i] - k - r] += dp[i][j] * c[j][k]
								% pmod * ba[k] % pmod * c[a[i]][k] % pmod
								* c[j][r] % pmod * ba[r] % pmod * c[a[i]][r]
								% pmod;
						dp[i + 1][j + a[i] - k - r] %= pmod;
					}
				}
			}
		}
		printf("Case #%d: %I64d\n", cas, dp[n][0]);
	}
}

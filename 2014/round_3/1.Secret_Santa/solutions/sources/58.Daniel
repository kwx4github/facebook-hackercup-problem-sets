#include <stdio.h>
#include <algorithm>
#include <vector>
#include <string>
#include <string.h>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <ext/numeric>
#include <iostream>
using namespace std;
using namespace __gnu_cxx;

#define all(V) (V).begin(), (V).end()
#define rall(V) (V).rbegin(), (V).rend()
#define FORB(i, a, b) for (int i = b-1; i >= a; --i)
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define fu(i, b) FOR(i, 0, b)
#define fub(i, b) FORB(i, 0, b)
#define SZ(V) (int)(V).size()
#define pb push_back
#define TRACE(x...) x
#define PRINT(x...) TRACE(printf(x))
#define DEBUG(x) TRACE(cout << #x" = " << x << endl)
#define MSET(v, x) memset(v, x, sizeof(v))

typedef long long ll;
const int INF = 0x3f3f3f3f;
const int NINF = 0xc0c0c0c0;
const double EPS = 1e-7;

int cmp(double x, double y = 0, double tol = EPS) {
	return (x <= y + tol)?(x + tol < y)? -1 : 0 : 1;
}

ll S[110][110][110];
const ll MOD = 1000000007ll;

ll C[110][110];
ll fat[110];

int main() {
	int T;
	scanf("%d", &T);
	C[0][0] = 1ll;
	FOR(i, 1, 110) fu(j, 110) {
		if (j == 0 || j == i) C[i][j] = 1ll;
		else if (j > i) C[i][j] = 0ll;
		else C[i][j] = (C[i-1][j] + C[i-1][j-1])%MOD;
	}
	fat[0] = 1ll;
	FOR(i, 1, 110) fat[i] = (fat[i-1]*i)%MOD;
	fu(_, T) {
		printf("Case #%d:", _+1);
		int K;
		scanf("%d", &K);
		vector<int> n(K);
		fu(i, K) scanf("%d", &n[i]);
		vector<int> SU(K+1, 0);
		FOR(i, 1, K+1) SU[i] = (SU[i-1] + n[i-1])%MOD;
		MSET(S, 0);
		S[0][0][0] = 1;
		FOR(i, 1, K+1) fu(g, 110) {
			int r = g;
			int N = n[i-1];
			fu(gg, 1<<N) fu(rr, 1<<N) {
				int both = __builtin_popcount(gg & rr);
				int onlyg = __builtin_popcount(gg & ~rr);
				int onlyr = __builtin_popcount(rr & ~gg);
				int g1 = g + 2*both + onlyr + onlyg - N;
				int r1 = r + 2*both + onlyr + onlyg - N;
				if (g1 < onlyr + both) continue;
				if (r1 < onlyg + both) continue;
				if (N - onlyr - both > r) continue;
				if (N - onlyg - both > r) continue;
				ll n = S[i-1][g1][r1];
				//n = (n * C[SU[i-1]][g1]) % MOD;
				//n = (n * C[SU[i-1]][r1]) % MOD;
				n = (n * C[g1][onlyr + both]) % MOD;
				n = (n * C[r1][onlyg + both]) % MOD;
				n = (n * fat[onlyg + both]) % MOD;
				n = (n * fat[onlyr + both]) % MOD;
				S[i][g][r] = (S[i][g][r] + n) % MOD;
			}
		}
		printf(" %lld\n", S[K][0][0]);
	}
	return 0;
}


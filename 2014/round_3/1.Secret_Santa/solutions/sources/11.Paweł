#include <string>
#include <cstring>
#include <vector>
#include <cmath> 
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
 
using namespace std;
 
#define REP(a,n) for(int a=0; a<(n); ++a)
#define FOR(a,b,c) for(int a=(b); a<=(c); ++a)
#define FORD(a,b,c) for(int a=(b); a>=(c); --a)
#define INIT(i,v) __typeof(v) i = (v)
#define FOREACH(i,v) for(INIT(i, (v).begin()); i!=(v).end(); ++i)
#define MP make_pair
#define PB push_back
#define DEB(x) cerr << #x << " = " << x << "\n"
 
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long LL;
 
template<class T>
inline int size(const T&t){return t.size();}

#define INF 1000000000
 
//////////////////////////////////////////

#define MOD  1000000007

int wynp[101][51][34][26], bbp[101][51][34][26];
int wyn[101][51][34][26][4][4], bb[101][51][34][26][4][4];

int ile[5];

void licz() {
  REP(s, 101) {
    REP(a4, s/4+1)
      REP(a3, (s-4*a4)/3+1)
        REP(a2, (s-4*a4-3*a3)/2+1) {
          int a1 = s-4*a4-3*a3-2*a2;
          if (s==0) 
            wynp[a1][a2][a3][a4] = 1, bbp[a1][a2][a3][a4] = 1;
          else {
            int na1 = a1, na2 = a2, na3 = a3, na4 = a4;
            int st;
            if (a1) { st = 0; --na1; }
            else if (a2) { st = 1; --na2; }
            else if (a3) { st = 2; --na3; }
            else { st = 3; --na4; }
            int w = 0;
            if (na1) {
              w = (w+wyn[na1-1][na2][na3][na4][st][0]*(LL)na1)%MOD;
              assert(bb[na1-1][na2][na3][na4][st][0]);
            }
            if (na2) {
              w = (w+wyn[na1][na2-1][na3][na4][st][1]*(LL)na2*2)%MOD;
              assert(bb[na1][na2-1][na3][na4][st][1]);
            }
            if (na3) {
              w = (w+wyn[na1][na2][na3-1][na4][st][2]*(LL)na3*3)%MOD;
              assert(bb[na1][na2][na3-1][na4][st][2]);
            }
            if (na4) {
              w = (w+wyn[na1][na2][na3][na4-1][st][3]*(LL)na4*4)%MOD;
              assert(bb[na1][na2][na3][na4-1][st][3]);
            }
            wynp[a1][a2][a3][a4] = w, bbp[a1][a2][a3][a4] = 1;
          }
        }
    REP(a4, s/4+1)
      REP(a3, (s-4*a4)/3+1)
        REP(a2, (s-4*a4-3*a3)/2+1)
          REP(st, 4)
            REP(kon, 4) {
              int a1 = s-4*a4-3*a3-2*a2-st-kon;
              if (a1<0) break;
              int na1 = a1, na2 = a2, na3 = a3, na4 = a4;
              if (kon==1) ++na1;
              if (kon==2) ++na2;
              if (kon==3) ++na3;
              int nna1 = na1, nna2 = na2, nna3 = na3, nna4 = na4;
              if (st==1) ++nna1;
              if (st==2) ++nna2;
              if (st==3) ++nna3;
              int w = wynp[nna1][nna2][nna3][nna4];
              assert(bbp[nna1][nna2][nna3][nna4]);
              if (a1) {
                w = (w+wyn[na1-1][na2][na3][na4][st][0]*(LL)a1)%MOD;
                assert(bb[na1-1][na2][na3][na4][st][0]);
              }
              if (a2) {
                w = (w+wyn[na1][na2-1][na3][na4][st][1]*(LL)a2*2)%MOD;
                assert(bb[na1][na2-1][na3][na4][st][1]);
              }
              if (a3) {
                w = (w+wyn[na1][na2][na3-1][na4][st][2]*(LL)a3*3)%MOD;
                assert(bb[na1][na2][na3-1][na4][st][2]);
              }
              if (a4) {
                w = (w+wyn[na1][na2][na3][na4-1][st][3]*(LL)a4*4)%MOD;
                assert(bb[na1][na2][na3][na4-1][st][3]);
              }
              if (st && na1) {
                w = (w+wyn[na1-1][na2][na3][na4][st-1][0]*(LL)na1*st)%MOD;
                assert(bb[na1-1][na2][na3][na4][st-1][0]);
              }
              if (st && na2) {
                w = (w+wyn[na1][na2-1][na3][na4][st-1][1]*(LL)na2*2*st)%MOD;
                assert(bb[na1][na2-1][na3][na4][st-1][1]);
              }
              if (st && na3) {
                w = (w+wyn[na1][na2][na3-1][na4][st-1][2]*(LL)na3*3*st)%MOD;
                assert(bb[na1][na2][na3-1][na4][st-1][2]);
              }
              if (st && na4) {
                w = (w+wyn[na1][na2][na3][na4-1][st-1][3]*(LL)na4*4*st)%MOD;
                assert(bb[na1][na2][na3][na4-1][st-1][3]);
              }
              wyn[a1][a2][a3][a4][st][kon] = w;
              bb[a1][a2][a3][a4][st][kon] = 1;
            }
  }
/*  REP(s, 101)
    REP(a4, s/4+1)
      REP(a3, (s-4*a4)/3+1)
        REP(a2, (s-4*a4-3*a3)/2+1) {
          int a1 = s-4*a4-3*a3-2*a2;
          if (s==0) 
            wynp[a1][a2][a3][a4] = 1;
          else {
            int na1 = a1, na2 = a2, na3 = a3, na4 = a4;
            int st;
            if (a1) { st = 0; --na1; }
            else if (a2) { st = 1; --na2; }
            else if (a3) { st = 2; --na3; }
            else { st = 3; --na4; }
            int w = 0;
            if (na1)
              w = (w+wyn[na1-1][na2][na3][na4][st][0]*(LL)na1)%MOD;
            if (na2)
              w = (w+wyn[na1][na2-1][na3][na4][st][1]*(LL)na2*2)%MOD;
            if (na3)
              w = (w+wyn[na1][na2][na3-1][na4][st][2]*(LL)na3*3)%MOD;
            if (na4)
              w = (w+wyn[na1][na2][na3][na4-1][st][3]*(LL)na4*4)%MOD;
            wynp[a1][a2][a3][a4] = w;
          }
          REP(st, 4)
            REP(kon, 4) {
              a1 = s-4*a4-3*a3-2*a2-st-kon;
              if (a1<0) break;
              int na1 = a1, na2 = a2, na3 = a3, na4 = a4;
              if (kon==1) ++na1;
              if (kon==2) ++na2;
              if (kon==3) ++na3;
              int nna1 = na1, nna2 = na2, nna3 = na3, nna4 = na4;
              if (st==1) ++nna1;
              if (st==2) ++nna2;
              if (st==3) ++nna3;
              int w = wynp[nna1][nna2][nna3][nna4];
              if (a1)
                w = (w+wyn[na1-1][na2][na3][na4][st][0]*(LL)a1)%MOD;
              if (a2)
                w = (w+wyn[na1][na2-1][na3][na4][st][1]*(LL)a2*2)%MOD;
              if (a3)
                w = (w+wyn[na1][na2][na3-1][na4][st][2]*(LL)a3*3)%MOD;
              if (a4)
                w = (w+wyn[na1][na2][na3][na4-1][st][3]*(LL)a4*4)%MOD;
              if (st && na1)
                w = (w+wyn[na1-1][na2][na3][na4][st-1][0]*(LL)na1*st)%MOD;
              if (st && na2)
                w = (w+wyn[na1][na2-1][na3][na4][st-1][1]*(LL)na2*2*st)%MOD;
              if (st && na3)
                w = (w+wyn[na1][na2][na3-1][na4][st-1][2]*(LL)na3*3*st)%MOD;
              if (st && na4)
                w = (w+wyn[na1][na2][na3][na4-1][st-1][3]*(LL)na4*4*st)%MOD;
              wyn[a1][a2][a3][a4][st][kon] = w;
            }
        }*/
}

int main() {
  licz();
  int TT;
  scanf("%d", &TT);
  REP(tt, TT) {
    int K;
    ile[1] = ile[2] = ile[3] = ile[4] = 0;
    scanf("%d", &K);
    REP(a, K) {
      int x;
      scanf("%d", &x);
      ++ile[x];
    }
    int w = wynp[ile[1]][ile[2]][ile[3]][ile[4]];
    printf("Case #%d: %d\n", tt+1, w);
    fprintf(stderr, "Case #%d: %d\n", tt+1, w);
  }
}



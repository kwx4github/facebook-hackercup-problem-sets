import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;

/**
 * @author Pavel Mavrin
 */
public class A {

    private static final long MOD = 1000000007;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    public A() throws FileNotFoundException {
        br = new BufferedReader(new FileReader("input.txt"));
        out = new PrintWriter("output.txt");
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            st = new StringTokenizer(br.readLine());
        }
        return st.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    public static void main(String[] args) throws IOException {
        new A().solve();
    }

    private void solve() throws IOException {
        int n = nextInt();
        for (int i = 0; i < n; i++) {
            String s = solveCase();
            out.println("Case #" + (i + 1) + ": " + s);
            System.out.println("Case #" + (i + 1) + ": " + s);
        }
        out.close();
    }

    private String solveCase() throws IOException {
        int k = nextInt();
        int[] z = new int[5];
        a = new int[k + 1][][][];
        for (int a1 = 0; a1 <= k; a1++) {
            a[a1] = new int[k - a1 + 1][][];
            for (int a2 = 0; a2 <= k - a1; a2++) {
                a[a1][a2] = new int[k - a1 - a2 + 1][];
                for (int a3 = 0; a3 <= k - a1 - a2; a3++) {
                    a[a1][a2][a3] = new int[k - a1 - a2 - a3 + 1];
                    Arrays.fill(a[a1][a2][a3], -1);
                }
            }
        }
        for (int i = 0; i < k; i++) {
            z[nextInt()]++;
        }
        return "" + calc(z);
    }

    int[][][][] a;

    private long calc(int[] n) {
        if (n[1] + n[2] + n[3] + n[4] == 0) {
            return 1;
        }
        if (a[n[1]][n[2]][n[3]][n[4]] >= 0) {
            return a[n[1]][n[2]][n[3]][n[4]];
        }
        int z = 4;
        while (n[z] == 0) z--;
        n[z]--;
        int s = 0;
        for (int i = 1; i <= 4; i++) {
            s += i * n[i];
        }
        long res = calc(n);
        for (int i = 0; i < z; i++) {
            int ss = s - i;
            long nres = 0;
            if (ss > 0) nres += res * ss;
            nres %= MOD;
            for (int j = 2; j <= 4; j++) {
                if (n[j] > 0) {
                    int cc = n[j] * (j * (j - 1));
                    n[j]--;
                    n[j - 1]++;
                    n[i]++;
                    nres += calc(n) * cc;
                    n[j]++;
                    n[j - 1]--;
                    n[i]--;
                    nres %= MOD;
                }
            }
            for (int j = 1; j <= 4; j++) {
                if (n[j] > 0) {
                    int cc = n[j] * j;
                    n[j]--;
                    n[j - 1]++;
                    n[i]++;
                    nres += calc(n) * cc;
                    n[j]++;
                    n[j - 1]--;
                    n[i]--;
                    nres %= MOD;
                }
            }
            res = nres;
        }
        n[z]++;

//        System.out.println(Arrays.toString(n) + " " + res);
        a[n[1]][n[2]][n[3]][n[4]] = (int) res;
        return res;
    }

    private String nextLine() throws IOException {
        return br.readLine();
    }

}

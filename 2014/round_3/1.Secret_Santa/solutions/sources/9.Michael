#include <iostream>
using namespace std;

long long factorial[5] = { 1, 1, 2, 6, 24 };
long long choose[401][401];

int K;
long long posses[101][401][401];

int main() {
	int T;

	choose[0][0] = 1;
	for (int i = 1; i <= 400; i++) {
		for (int j = 0; j <= 400; j++) {
			choose[i][j] = (choose[i-1][j-1] + choose[i-1][j])%1000000007;
		}
	}

	cin >> T;
	for (int t = 1; t <= T; t++) {
		cin >> K;
		posses[0][0][0] = 1;
		for (int i = 1; i <= K; i++) {
			int members;
			cin >> members;
			for (int j = 0; j <= 400; j++) {
				for (int k = 0; k <= 400; k++) {
					posses[i][j][k] = 0;
					for (int l = 0; l <= members; l++) {
						for (int m = 0; m <= members; m++) {
							int prevj = j+l+m-members, prevk = k+l+m-members;
							if (prevj < 0 || prevj > 400 || prevk < 0 || prevk > 400) continue;

							long long newposses = posses[i-1][prevj][prevk];
							newposses = (newposses * choose[prevj][m])%1000000007;
							newposses = (newposses * choose[prevk][l])%1000000007;
							newposses = (newposses * choose[members][l])%1000000007;
							newposses = (newposses * choose[members][m])%1000000007;
							newposses = (newposses * factorial[l])%1000000007;
							newposses = (newposses * factorial[m])%1000000007;
							posses[i][j][k] += newposses;
						}
					}
				}
			}
		}
		cout << "Case #" << t << ": " << posses[K][0][0] << '\n';
	}
	return 0;
}

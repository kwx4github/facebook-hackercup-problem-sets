#include<functional>
#include<algorithm>
//#include<iostream>
#include<numeric>
#include<cassert>
#include<cstring>
#include<cstdio>
#include<vector>
#include<queue>
//#include<cmath>
#include<set>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b);i>=(e);--i)
#define FOReach(it,V) for(__typeof((V).begin()) it=(V).begin();it!=(V).end();++it)

#define PB push_back
#define ALL(V) (V).begin(),(V).end()
#define SIZE(V) ((int)(V).size())

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

int stmp;
#define scanf stmp=scanf


const int MAX = 110;
const int INF = 1000000001;
const int MOD = 1000000007;

LL dp[MAX][MAX][MAX];
LL binom[MAX][MAX];
LL fact[MAX];

int n;
int arr[MAX+1];

int main(int argc, char *argv[]) {
	fact[0] = 1;
	FOR(i,1,4) fact[i] = fact[i-1] * i;
	REP(i,MAX)
	{
		binom[i][0] = 1;
		FOR(j,1,i)
			binom[i][j] = binom[i-1][j-1] + binom[i-1][j];
	}
	int Z;
	scanf("%d", &Z);
	FOR(z,1,Z)
	{
		printf("Case #%d: ", z);
		scanf("%d", &n);
		FOR(i,1,n) scanf("%d", arr+i);
		memset(dp, 0, sizeof dp);
		dp[0][0][0] = 1;
		int s = 0;
		FOR(i,1,n)
		{
			FOR(in,0,s)
				FOR(out,0,s)
					if(dp[i-1][in][out]) {
						FOR(nowin,0,min(arr[i],out))
							FOR(nowout,0,min(arr[i],in))
							{
								LL &r = dp[i][in+arr[i]-nowout-nowin][out+arr[i]-nowin-nowout];
								LL ways = dp[i-1][in][out];
								ways = ways * binom[in][nowout] % MOD * fact[nowout] % MOD * binom[arr[i]][nowout] % MOD;
								ways = ways * binom[out][nowin] % MOD * fact[nowin] % MOD * binom[arr[i]][nowin] % MOD;
								r = (r + ways) % MOD;
							}
								
					}
			s += arr[i];
//			FOR(in,0,s)
//				FOR(out,0,s)
//					printf("[%d][%d][%d] %lld\n", i, in, out, dp[i][in][out]);
		}
		printf("%lld\n", dp[n][0][0]);
	}
	return 0;
}


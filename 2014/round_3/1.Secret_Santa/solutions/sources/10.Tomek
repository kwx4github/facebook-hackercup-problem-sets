//{{{
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
#include <map>
#include <set>
using namespace std;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << (x) << endl;

typedef long long LL;
typedef unsigned long long ULL;
const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%lld",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }
//}}}

template<unsigned MOD>
class Modulo {
  unsigned v;
 public:
  Modulo() {}
  Modulo(unsigned x):v(x%MOD) {}
  int get() const { return v; }
  Modulo operator+(Modulo b) const { return Modulo(v+b.v); }
  void operator+=(Modulo b) { *this = *this + b; }
  Modulo operator-(Modulo b) const { return Modulo(v+MOD-b.v); }
  void operator-=(Modulo b) { *this = *this - b; }
  Modulo operator*(Modulo b) const { return Modulo(unsigned(ULL(v) * ULL(b.v) % MOD)); }
  void operator*=(Modulo b) { *this = *this * b; }
};

typedef Modulo<1000000007> Mod;

vector<int> families; // [1..4]

void ReadInput() {
  families.assign(5,0);
  int k = rint();
  REP(i,k) {
    families[rint()]++;
  }
}

inline int cachefun(int a,int b) {
  if(a==0) return 16; else return (a-1)*4+(b-1);
}

int *cache[101][101][101][101];

Mod Calc(const vector<int> &cnt, const int a, const int b) {
  int &res_int = cache[cnt[1]][cnt[2]][cnt[3]][cnt[4]][cachefun(a,b)];
  if(res_int!=-1) return res_int;

  Mod res = 0;
  if(a==0) {
    int aa=1;
    while(aa<=4 && cnt[aa]==0) ++aa;
    if(aa==5) { res = 1; }
    else {
      FOR(bb,1,4) {
        int cn = cnt[bb] - (aa==bb);
        if(cn>0) res += Calc(cnt, aa, bb) * (cn * bb);
      }
    }
  } else {
    vector<int> cnt2 = cnt;
    cnt2[a]--;
    cnt2[b]--;
    cnt2[a-1]++;
    cnt2[b-1]++;
    cnt2[0] = 0;
    res += Calc(cnt2, 0, 0) * a;

    FOR(cc,1,4) {
      int cn = cnt[cc] - (cc==a) - (cc==b);
      if(cn>0) {
        cnt2 = cnt;
        cnt2[b]--;
        cnt2[b-1]++;
        cnt2[0]=0;
        res += Calc(cnt2, a, cc) * (cn * cc);
      }
    }
  }
  res_int = res.get();
  return res;
}

Mod Calc() {
  FOR(a,0,100) FOR(b,0,100) FOR(c,0,100) FOR(d,0,100) {
    if(a+b+c+d<=100) FOR(i,0,16) cache[a][b][c][d][i] = -1;
  }
  return Calc(families, 0, 0);
}

int main(int argc, char **argv) {
  FOR(a,0,100) FOR(b,0,100) FOR(c,0,100) FOR(d,0,100) {
    if(a+b+c+d<=100) cache[a][b][c][d] = new int[17];
  }
  int ntc = rint();
  FOR(tc,1,ntc) {
    ReadInput();
    if(argc==2 && tc!=atoi(argv[1])) continue;
    Mod res = Calc();
    printf("Case #%d: %d\n", tc, res.get());
  }
}



#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
#define MP make_pair
#define FOR(v,p,k) for(int v=p;v<=k;++v)
#define FORD(v,p,k) for(int v=p;v>=k;--v)
#define REP(i,n) for(int i=0;i<(n);++i)
#define VAR(v,i) __typeof(i) v=(i)
#define FORE(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)
#define PB push_back
#define ST first
#define ND second
#define SZ(x) (int)(x).size()
#define ALL(c) c.begin(),c.end()
#define ZERO(x) memset(x,0,sizeof(x))

const int MD = (int) 1e9 + 7;

int n;

int dp[305][305];
int t[305];

int bn[305][305];
int fact[305];

int total;

inline void ad(int& a, int b) {
    a = (a + (LL) b) % MD;
}

inline void mul(int& a, int b) {
    a = (a * (LL) b) % MD;
}

int alg() {
    cin >> n;
    total = 0;
    for (int i = 1; i <= n; ++i) {
        cin >> t[i];
        total += t[i];
    }
    random_shuffle(t + 1, t + n + 1);
    ZERO(dp);
    dp[0][0] = 1;
    int prev = 0;
    for (int i = 1; i <= n; ++i) {
        for (int after = 0; after <= min(prev, total - prev); ++after) {
            for (int taken = 0; taken <= min(t[i], after); ++taken) {
                for (int back = 0; back <= min(t[i], after); ++back) {
                    // dp[i][after + t[i] - back - taken] += dp[i - 1][after] * bn[after][taken] * bn[t[i]][taken] * bn[t[i]][back] * bn[after][back]
                    int cur = dp[i - 1][after];
                    mul(cur, bn[after][taken]);
                    mul(cur, bn[t[i]][taken]);
                    mul(cur, fact[taken]);
                    mul(cur, bn[t[i]][back]);
                    mul(cur, bn[after][back]);
                    mul(cur, fact[back]);
                    ad(dp[i][after + t[i] - back - taken], cur);
                }
            }
        }
        prev += t[i];
    }
    return dp[n][0];
}

int main() {
    bn[0][0] = 1;
    fact[0] = 1;
    for (int i = 1; i <= 300; ++i) {
        fact[i] = fact[i - 1];
        mul(fact[i], i);
        bn[i][0] = 1;
        for (int j = 1; j <= i; ++j) {
            bn[i][j] = (bn[i - 1][j - 1] + (LL) bn[i - 1][j]) % MD;
        }
    }
    int d;
    cin >> d;
    for (int i = 1; i <= d; ++i) {
        cout << "Case #" << i << ": " << alg() << endl;
    }
}

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <utility>
#define MAXN 115
#define MOD 1000000007
#define MODLL 1000000007LL

using namespace std;

int main ()
{
	int i, j, k, cnt;
	static int fact[MAXN];
	fact[0] = 1;
	for (i = 1; i < MAXN; i++)
	{
		fact[i] = (int)(((long long)(fact[i-1]) * (long long)(i)) % MODLL);
	}
	static int C[MAXN][MAXN];
	C[0][0] = 1;
	for (i = 1; i < MAXN; i++)
	{
		C[i][0] = 1;
		for (j = 1; j < i; j++) C[i][j] = (C[i-1][j-1] + C[i-1][j]) % MOD;
		C[i][i] = 1;
	}
	int T, iT;
	scanf("%d",&T);
	static int a[MAXN][MAXN][MAXN];
	static int N[MAXN];
	int prev;
	for (iT = 0; iT < T; iT++)
	{
		prev = 0;
		int K;
		scanf("%d",&K);
		for (i = 0; i < K; i++)
		{
			scanf("%d",&(N[i]));
		}
		memset(a,0,sizeof(a));
		a[0][0][0] = 1;
		int q;
		for (i = 0; i < K; i++)
		{
			for (j = 0; j < MAXN; j++)
			{
				for (q = 0; q < MAXN; q++)
				{
					if (a[i][j][q])
					{
						for (cnt = 0; cnt <= N[i]; cnt++)
						{
							if (cnt <= j)
							{
								int coef = 1;
								coef = (int)(((long long)(coef) * (long long)(C[j][cnt])) % MODLL);
								coef = (int)(((long long)(coef) * (long long)(C[N[i]][cnt])) % MODLL);
								coef = (int)(((long long)(coef) * (long long)(fact[cnt])) % MODLL);
								for (k = 0; k <= N[i]; k++)
								{
									if (k <= q)
									{
										int temp = (int)(((long long)(coef) * (long long)(C[N[i]][k])) % MODLL);
										temp = (int)(((long long)(temp) * (long long)(C[q][k])) % MODLL);
										temp = (int)(((long long)(temp) * (long long)(fact[k])) % MODLL);
										a[i+1][j+(N[i]-k)-cnt][q+(N[i]-cnt)-k] = (int)(((long long)(a[i+1][j+(N[i]-k)-cnt][q+(N[i]-cnt)-k]) + (long long)(a[i][j][q]) * (long long)(temp)) % MODLL);
									}
								}
							}
						}
					}
				}
			}
			prev += N[i];
		}
		printf("Case #%d: %d\n",iT+1,a[K][0][0]);
	}
	return 0;
}

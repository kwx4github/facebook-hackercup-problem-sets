import java.io.OutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.util.InputMismatchException;
import java.io.Writer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author ilyakor
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		TaskA solver = new TaskA();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class TaskA {
    static final long mod = 1000000007;

    static final long[][] C = new long[1000][1000];

    static {
        C[0][0] = 1;
        for (int i = 1; i < C.length; ++i) {
            C[i][0] = 1;
            for (int j = 1; j < C[i].length; ++j)
                C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod;
        }
    }

    public void solve(int testNumber, InputReader in, OutputWriter out) {
        int n = in.nextInt();
        int[] a = new int[n];
        int[] cnts = new int[4];
        for (int i = 0; i < n; ++i) {
            a[i] = in.nextInt();
            cnts[a[i] - 1]++;
        }
        int[] sizes = new int[4];
        sizes[3] = cnts[3];
        for (int i = 2; i >= 0; --i)
            sizes[i] = sizes[i + 1] + cnts[i];
        long[][][][] d = new long[sizes[0] + 1][sizes[1] + 1][sizes[2] + 1][sizes[3] + 1];
        d[0][0][0][0] = 1;
        int[] x = new int[4];
        for (x[3] = 0; x[3] <= sizes[3]; ++x[3])
            for (x[2] = 0; x[2] <= sizes[2]; ++x[2])
                for (x[1] = 0; x[1] <= sizes[1]; ++x[1])
                    for (x[0] = 0; x[0] <= sizes[0]; ++x[0]) {
                        if (d[x[0]][x[1]][x[2]][x[3]] != 0) continue;
                        int ind = 3;
                        while (x[ind] == 0) --ind;
                        if (ind == 0) {
                            d[x[0]][x[1]][x[2]][x[3]] = d[x[0] - 1][x[1]][x[2]][x[3]];
                            if (x[0] >= 2) d[x[0]][x[1]][x[2]][x[3]] += d[x[0] - 2][x[1]][x[2]][x[3]];
                            d[x[0]][x[1]][x[2]][x[3]] *= (long)(x[0] - 1);
                            d[x[0]][x[1]][x[2]][x[3]] %= mod;
                            continue;
                        }
                        int[] nx = x.clone();
                        --nx[ind];
                        ++nx[ind - 1];
                        int s = nx[0] + 2 * nx[1] + 3 * nx[2] + 4 * nx[3];
                        if (nx[ind - 1] <= sizes[ind - 1] && s - 2 * ind > 0) {
                            d[x[0]][x[1]][x[2]][x[3]] = d[nx[0]][nx[1]][nx[2]][nx[3]] * (long)(s - 2 * ind);
                            d[x[0]][x[1]][x[2]][x[3]] %= mod;
                        }
                        for (int loop = 0; loop < 4; ++loop) {
                            nx = x.clone();
                            --nx[ind];
                            --nx[loop];
                            if (nx[loop] < 0) continue;
                            if (loop > 0) ++nx[loop - 1];
                            if (nx[ind - 1] + 1 <= sizes[ind - 1] && (loop == 0 || nx[loop - 1] <= sizes[ind - 1])) {
                                long mult = (nx[loop] + 1) * (loop + 1);
                                ++nx[ind - 1];
                                d[x[0]][x[1]][x[2]][x[3]] += mult * d[nx[0]][nx[1]][nx[2]][nx[3]];
                                d[x[0]][x[1]][x[2]][x[3]] %= mod;
                            }
                        }
                        for (int loop = 1; loop < 4; ++loop) {
                            nx = x.clone();
                            --nx[ind];
                            --nx[loop];
                            if (nx[loop] < 0) continue;
                            ++nx[loop - 1];
                            if (nx[ind - 1] + 1 <= sizes[ind - 1] && (nx[loop - 1] <= sizes[ind - 1])) {
                                long mult = (nx[loop] + 1) * (loop + 1) * loop;
                                ++nx[ind - 1];
                                d[x[0]][x[1]][x[2]][x[3]] += mult * d[nx[0]][nx[1]][nx[2]][nx[3]];
                                d[x[0]][x[1]][x[2]][x[3]] %= mod;
                            }
                        }
                    }
        out.printLine("Case #" + testNumber + ": " + d[cnts[0]][cnts[1]][cnts[2]][cnts[3]]);
    }
}

class InputReader {
    private InputStream stream;
    private byte[] buffer = new byte[10000];
    private int cur;
    private int count;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public static boolean isSpace(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public int read() {
        if (count == -1) {
            throw new InputMismatchException();
        }
        try {
            if (cur >= count) {
                cur = 0;
                count = stream.read(buffer);
                if (count <= 0)
                    return -1;
            }
        } catch (IOException e) {
            throw new InputMismatchException();
        }
        return buffer[cur++];
    }

    public int readSkipSpace() {
        int c;
        do {
            c = read();
        } while (isSpace(c));
        return c;
    }

    public String nextToken() {
        int c = readSkipSpace();
        StringBuilder sb = new StringBuilder();
        while (!isSpace(c)) {
            sb.append((char) c);
            c = read();
        }
        return sb.toString();
    }

    public String next() {
        return nextToken();
    }

    public int nextInt() {
        int sgn = 1;
        int c = readSkipSpace();
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9') {
                throw new InputMismatchException();
            }
            res = res * 10 + c - '0';
            c = read();
        } while (!isSpace(c));
        res *= sgn;
        return res;
    }

    }

class OutputWriter {
    private final PrintWriter writer;

    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }

    public OutputWriter(Writer writer) {
        this.writer = new PrintWriter(writer);
    }

    public void print(Object... objects) {
        for (int i = 0; i < objects.length; i++) {
            if (i != 0) {
                writer.print(' ');
            }
            writer.print(objects[i]);
        }
    }

    public void printLine(Object... objects) {
        print(objects);
        writer.println();
    }

    public void close() {
        writer.close();
    }

    }


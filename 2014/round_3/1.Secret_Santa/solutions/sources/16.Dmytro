#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <bitset>
#include <queue>
#include <stack>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

const long long P = 1000000007LL;
const int maxN = 300;
int n;
int a[maxN];
long long d[maxN][maxN][maxN];
long long c[maxN][maxN], f[maxN];

void solve(int test) {
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%d", &a[i]);
	}
	memset(d, 0, sizeof(d));
	memset(c, 0, sizeof(c));
	memset(f, 0, sizeof(f));
	for (int i = 0; i < maxN; ++i) {
		c[i][0] = 1LL;
		for (int j = 1; j <= i; ++j) {
			c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % P;
		}
	}
	f[0] = 1LL;
	for (int i = 1; i < maxN; ++i) {
		f[i] = (f[i - 1] * (long long)(i)) % P;
	}
	d[0][0][0] = 1LL;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < maxN; ++j) {
			for (int k = 0; k < maxN; ++k) {
				if (d[i][j][k] == 0) {
					continue;
				}

				// x - assigned now
				// y - from previous
				for (int x = 0; x <= a[i] && x <= k; ++x) {
					for (int y = 0; y <= a[i] && y <= j; ++y) {
						long long coef = (c[j][y] * c[a[i]][x]) % P;
						coef *= c[a[i]][y];
						coef %= P;
						coef *= c[k][x];
						coef %= P;
						coef *= f[x];
						coef %= P;
						coef *= f[y];
						coef %= P;
						int nj = j - y + (a[i] - x);
						int nk = k - x + (a[i] - y);
						if (nj >= 0 && nj < maxN && nk >= 0 && nk < maxN) {
							d[i + 1][nj][nk] += coef * d[i][j][k];
							d[i + 1][nj][nk] %= P;
						}
					}
				}
			}
		}
	}

	long long res = d[n][0][0];
	printf("Case #%d: ", test);
	cout << res << endl;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int tests;
	scanf("%d", &tests);
	for (int i = 0; i < tests; ++i) {
		solve(i + 1);
		cerr << (i + 1) << endl;
		cerr << "Time: " << clock() << endl;
	}
	return 0;
}
#include <queue>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <stack>
#include <ctime>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define FOREACH(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

const int MAXN = 103;
const int MOD = (int)1e+9 + 7;

long long c[MAXN][MAXN];
long long f[MAXN][MAXN][MAXN];
long long g[MAXN];

void add(long long &x, const long long d)
{
    x += d;
    if (x >= MOD) {
        x -= MOD;
    }
}

int main(int argc, char **argv)
{
	ios_base::sync_with_stdio(false);
	#ifdef MJUDGE
		freopen("in", "r", stdin);
		freopen(argc == 2? argv[1] : "out", "w", stdout);
	#endif
    
    g[0] = 1;
    for (int i = 1; i < MAXN; ++i)
        g[i] = (g[i - 1] * (long long)i) % MOD;
    
    for (int i = 0; i < MAXN; ++i)
        c[i][0] = 1;
    
    for (int i = 1; i < MAXN; ++i)
        for (int j = 1; j <= i; ++j) {
            c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % MOD;
        }
/*        
    {
        int p[6];
        int res = 0;
        for (int i = 0; i < 6; ++i)
            p[i] = i;
        do
        {
            bool flg= true;

            for (int i = 0; i < 6; ++i)
                flg &= i / 2 != p[i] / 2;
            if (flg) {
                res += 1;
            }
        } while (next_permutation(p, p + 6));
        cerr << res << endl;
    }
//*/    
    int T;
    cin >> T;
    for (int t = 1; t <= T; ++t) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; ++i)
            cin >> a[i];

        if (argc == 2 && atoi(argv[1]) != t) {
            continue;
        }
        cerr << t << endl;
        
        memset(f, 0, sizeof(f));
        f[0][0][0] = 1;
        for (int i = 0; i < n; ++i)
            for (int x = 0; x < MAXN; ++x)
                for (int y = 0; y < MAXN; ++y)
                        if (f[i][x][y]) {
                            for (int X = 0; X <= a[i] && X <= x; ++X)
                                for (int Y = 0; Y <= a[i] && Y <= y; ++Y) {
                                    add(f[i + 1][x - X + a[i] - Y][y - Y + a[i] - X], f[i][x][y] * c[a[i]][X] % MOD * c[a[i]][Y] % MOD * g[a[i] - X] % MOD * g[a[i] - Y] % MOD * c[x - X + a[i] - Y][a[i] - Y] % MOD * c[y - Y + a[i] - X][a[i] - X] % MOD);
                                }
                        }
        
        cout << "Case #" << t << ": ";
        cout << f[n][0][0];
        cout << endl;
    }
	return 0;
}

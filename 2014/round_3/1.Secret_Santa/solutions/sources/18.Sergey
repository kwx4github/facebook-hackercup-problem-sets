#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 110;
const int64 mod = 1e9 + 7;

int k, n;
int a[nmax];
int64 dp[nmax][nmax][nmax];
int64 cnk[nmax][nmax];
int64 fak[nmax];

void add(int64 &a, int64 b, int64 c) {
	b = b % mod;
	c = c % mod;
	a = (a + b * c) % mod;
}

int64 get(int n, int k, int m) {
	int64 res = (cnk[n][k] * fak[k]) % mod;
	res = (res * cnk[m][k]) % mod;
	return res;
}

int solve() {
	memset(dp, 0, sizeof dp);
	cin >> n;
	forn(i, n)
		cin >> a[i];
	dp[0][0][0] = 1;
	int cur = 0;
	for (int i = 0; i < n; i ++) {
		for (int j = 0; j <= cur; j ++)
			for (int w = 0; w <= cur; w ++) {
				for (int l = 0; l <= a[i]; l ++)
					for (int r = 0; r <= a[i]; r ++) 
						if (l <= w && r <= j){
						add(dp[i+1][j + a[i] - l - r][w + a[i] - r - l], dp[i][j][w], get(j, l, a[i]) * get(w, r, a[i])); 
					}
			}
		cur += a[i];
	}
	int64 res = dp[n][0][0];
	cout << res << endl;
	return 0;
}

int main ()
{
	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);
	
	fak[0] = 1;
	for (int i = 1; i < nmax; i ++)
		fak[i] = (fak[i-1] * i) % mod;
	forn(i, nmax)
		forn(j, i + 1) {
			if (j == 0) {
				cnk[i][j] = 1;
				continue;
			}
			cnk[i][j] = (cnk[i-1][j] + cnk[i-1][j-1]) % mod;
		}
	
	int tst;
	cin >> tst;
	forn (i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
	}

	return 0;
}

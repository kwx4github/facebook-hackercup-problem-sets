import java.io.*;
import java.util.*;

public class R3 {

	int max = 101;

	long mod = (long) 1e9 + 7;

	void solveOneTest() {
		int n = in.nextInt();
		int[] a = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = in.nextInt();
		}
		int M = 111;
		int[][] c = new int[M][M];
		for (int i = 0; i < M; i++) {
			c[i][0] = 1;
			if (i != 0)
				for (int j = 1; j < M; j++)
					c[i][j] = (int) ((c[i - 1][j - 1] + c[i - 1][j]) % mod);
		}
		long[][][] dp = new long[n + 1][M][M];
		dp[0][0][0] = 1;
		for (int i = 0; i < n; i++)
			for (int freeOut = 0; freeOut < M; freeOut++)
				for (int freeIn = 0; freeIn < M; freeIn++) {
					if (dp[i][freeOut][freeIn] == 0)
						continue;
					int cnt = a[i];
					for (int stOut = 0; stOut < 1 << cnt; stOut++)
						for (int stIn = 0; stIn < 1 << cnt; stIn++) {
							long variants = 1;
							for (int j = 0; j < cnt - Integer.bitCount(stIn); j++) {
								variants = (variants * (freeOut - j)) % mod;
							}
							for (int j = 0; j < cnt - Integer.bitCount(stOut); j++) {
								variants = (variants * (freeIn - j)) % mod;
							}
							variants = (variants * dp[i][freeOut][freeIn])
									% mod;
							if (variants != 0) {
								int newFreeOut = freeOut
										+ Integer.bitCount(stOut) -
										(cnt - Integer.bitCount(stIn));
								int newFreeIn = freeIn + Integer.bitCount(stIn)
										- (cnt - Integer.bitCount(stOut));
								if (newFreeIn < 0 || newFreeIn >= M)
									continue;
								if (newFreeOut < 0 || newFreeOut >= M)
									continue;
								dp[i + 1][newFreeOut][newFreeIn] = (dp[i + 1][newFreeOut][newFreeIn] + variants)
										% mod;
							}
						}
				}
		long res = dp[n][0][0] % mod;
		out.println(res);
	}

	void solve() {
		int t = in.nextInt();
		for (int test = 0; test < t; test++) {
			System.err.println(test);
			long from = System.currentTimeMillis();
			out.print("Case #" + (test + 1) + ": ");
			solveOneTest();
			System.err.println(System.currentTimeMillis() - from + " ms");
		}
	}

	InputReader in;
	PrintWriter out;

	void runIO() {
		in = new InputReader(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	void run() {
		in = new InputReader(new File("input.txt"));
		try {
			out = new PrintWriter(new File("output.txt"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		solve();

		out.close();
	}

	public static void main(String[] args) {
		new R3().run();
	}

	class InputReader {
		BufferedReader bf;
		StringTokenizer st;

		InputReader(File f) {
			try {
				bf = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		InputReader(InputStream s) {
			bf = new BufferedReader(new InputStreamReader(s));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return null;
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		boolean hasMoreElements() {
			while (!st.hasMoreElements()) {
				String s;
				try {
					s = bf.readLine();
				} catch (IOException e) {
					return false;
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
	}
}
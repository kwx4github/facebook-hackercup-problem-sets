#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxsize=128;
const int64 MOD=1000000007;

int n;
int c[maxsize];
int64 f[maxsize][maxsize];
int64 p[maxsize];
int64 choose[maxsize][maxsize];

int main()
{
	//freopen("input.txt","r",stdin);
	freopen("a.in","r",stdin); freopen("a.out","w",stdout);
	int testcase;
	scanf("%d",&testcase);
	memset(choose,0,sizeof(choose));
	for (int i=0;i<maxsize;i++) for (int j=0;j<=i;j++) choose[i][j]=(j==0)?1:(choose[i-1][j-1]+choose[i-1][j])%MOD;
	p[0]=1;
	for (int i=1;i<maxsize;i++) p[i]=p[i-1]*i%MOD;
	for (int case_id=1;case_id<=testcase;case_id++)
	{
		scanf("%d",&n);
		for (int i=0;i<n;i++) scanf("%d",&c[i]);
		memset(f,255,sizeof(f));
		int64 ret=0;
		int m=0;
		for (int i=0;i<n;i++) m+=c[i];
		memset(f,0,sizeof(f));
		f[0][0]=1;
		for (int k=0;k<n;k++)
		{
			int cnt=c[k];
			for (int i=0;i<=m;i++) if (f[k][i])
				for (int e=0;e<=cnt;e++)
				{
					f[k+1][i+(cnt-e)]+=choose[cnt][e]*f[k][i]%MOD*choose[cnt][e]%MOD*p[e]%MOD;
					f[k+1][i+(cnt-e)]%=MOD;
				}
		}
		for (int i=0;i<=m;i++) if (f[n][i])
		{
			int64 t=f[n][i]*p[i]%MOD;
			if ((m-i)%2==0) ret=(ret+t)%MOD;
			else ret=(ret-t+MOD)%MOD;
		}
		printf("Case #%d: %d\n",case_id,(int)ret);		
		fflush(stdout);
	}
	return 0;
}


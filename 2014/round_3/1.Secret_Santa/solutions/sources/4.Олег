#include <iostream>
using namespace std;


long long mod = 1e9 + 7;

int n[105];



long long dp[105][105];

int kb[5][5];

long long C[105][105];
long long fact[105];

long long getCnt(int n, int k)
{
	if (k < 0)
		return 0;
	return C[n][k];
}

int k;
long long getAns(int i, int toL)
{
	if (toL < 0)
		return 0;
	if (i == k)
	{
		if (toL != 0)
			return 0;
		return 1;
	}
	int toR = toL;
	if (dp[i][toL] != -1)
		return dp[i][toL];
	long long ans = 0;
	int a = n[i];
	
	for (int j = 0; j <= a; j++)
	{
		long long cnt = getCnt(toL, j) * fact[j];
		cnt *= kb[a][j];
		cnt %= mod;

		for (int h = 0; h <= a; h++)
		{
			long long curCnt = cnt * kb[a][h];
			curCnt %= mod;
			curCnt *= getCnt(toR, h) * fact[h];
			curCnt %= mod;
			curCnt *= getAns(i + 1, toL - j + a - h);
			curCnt %= mod;
			ans += curCnt;
			ans %= mod;
		}
	}
	return dp[i][toL] = ans % mod;
}

void solve()
{

	memset(dp, -1, sizeof dp);
	scanf("%d", &k);
	for (int i = 0; i < k; i++)
		scanf("%d", &n[i] );
	long long ans = getAns(0, 0);
	printf("%lld", ans);
}


int main()
{
	fact[0] = 1;
	for (int i = 1; i < 105; i++)
	{
		fact[i] = (fact[i - 1] * i) % mod;
	}
	for (int i = 0; i < 105; i++)
	{
		C[i][0] = C[i][i] = 1;
		for (int j = 1; j < i; j++)
			C[i][j] = (C[i - 1][j - 1] + C[i - 1][j] ) % mod;
	}

	for (int a = 1; a <= 4; a++)
		for (int i = 0; i < (1 << a); i++)
		{
			int cnt = 0;
			for (int j = 0; j < a; j++)
				if (i & (1 << j) )
					cnt++;
			kb[a][cnt]++;
		}


	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	scanf("%d", &t);
	for (int i = 1; i <= t; i++)
	{
		printf("Case #%d: ", i);
		solve();
		printf("\n");
	}



	return 0;
}
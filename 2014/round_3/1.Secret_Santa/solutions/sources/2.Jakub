#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(it, (x)) cerr <<*it <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;
template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<typename T1, typename T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { out << "(" << pair.X << ", " << pair.Y << ")"; return out; }

const int MOD = 1000000007;
const int N = 105;
LL ile[N][N*4];

LL fact(int base, int len) {
    LL res = 1;
    REP(i, len) {
        res = (res * base) % MOD;
        --base;
    }
    return res;
}

LL npok(int a, int b) {
    LL res = 1;
    FOR(i, 1, a) res *= i;
    FOR(i, 1, b) res /= i;
    FOR(i, 1, a-b) res /= i;
    return res % MOD;
}

void doit() {
    int k; scanf("%d", &k);
    int K = 4*k+1;
    
    REP(i, K) ile[0][i] = 0;
    ile[0][0] = 1;

//        printf("\n");
    int sum = 0;
    FOR(i, 1, k) {
        int n; scanf("%d", &n);

        REP(j, K) {
            
            ile[i][j] = 0;
            REP(a, n+1) REP(b, n+1) {
                int p = j - b + a;
                
                if (p < a) continue;
                if (p > sum) continue;
                
                if (b > j) continue;
                if (n-b > p) continue;


                LL inc = 1;
                inc = (inc * npok(n, a)) % MOD;
                inc = (inc * npok(n, b)) % MOD;
                inc = (inc * fact(p, a)) % MOD;
                inc = (inc * fact(p, n-b)) % MOD;
               
//                printf("p: %d, a: %d, b: %d, j: %d, inc: %lld\n", p, a, b, j, inc);

                ile[i][j] = (ile[i][j] + ile[i-1][p] * inc) % MOD;
            }
        }

        sum += n;
//        REP(j, sum+1) printf("%lld, ", ile[i][j]);
//        printf("\n");
    }
    printf("%lld\n", ile[k][0]);
};

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);

    int ttt; scanf("%d", &ttt);
    REP(i, ttt) {
        printf("Case #%d: ", i+1);
        doit();
    }

    return 0;
}

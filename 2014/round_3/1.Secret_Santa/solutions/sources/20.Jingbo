#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <string>
#include <sstream>
using namespace std;

#define FOR(i,a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++ i)

const double PI = acos(-1.0);
const double EPS = 1e-8;

const int maxn = 100;
const int MOD = 1000000007;

int a[maxn];

long long C[maxn + 1][maxn + 1], factorial[maxn + 1], f[maxn + 1][maxn + 1][maxn + 1];

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    
    for (int i = 0; i <= maxn; ++ i) {
        C[i][0] = 1;
        for (int j = 1; j <= i; ++ j) {
            C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD;
        }
    }
    
    factorial[0] = 1;
    for (int i = 1; i <= maxn; ++ i) {
        factorial[i] = factorial[i - 1] * i % MOD;
    }
    
    int T, test = 1;
    for (scanf("%d", &T); test <= T; ++ test) {
        printf("Case #%d: ", test);
        
        int n;
        scanf("%d", &n);
        for (int i = 0; i < n; ++ i) {
            scanf("%d", &a[i]);
        }
        
        /*srand(time(0) ^ 124151);
        random_shuffle(a, a + n);*/
        
        memset(f, 0, sizeof(f));
        f[0][0][0] = 1;
        int sum = 0;
        for (int i = 0; i < n; ++ i) {
            for (int j = 0; j <= sum; ++ j) {
                for (int k = 0; k <= sum; ++ k) {
                    if (!f[i][j][k]) {
                        continue;
                    }
                    for (int give = 0; give <= a[i] && give <= k; ++ give) {
                        long long c1 = C[a[i]][give] * C[k][give] % MOD * factorial[give] % MOD;
                        for (int receive = 0; receive <= a[i] && receive <= j; ++ receive) {
                            long long c2 = C[a[i]][receive] * C[j][receive] % MOD * factorial[receive] % MOD;
                            
                            long long delta = c1 * c2 % MOD * f[i][j][k] % MOD;
                            
                            f[i + 1][j - receive + (a[i] - give)][k - give + (a[i] - receive)] += delta;
                            f[i + 1][j - receive + (a[i] - give)][k - give + (a[i] - receive)] %= MOD;
                        }
                    }
                }
            }
            sum += a[i];
        }
        
        printf("%I64d\n", f[n][0][0]);
    }
    
    return 0;
}


#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <iostream>
#include <sstream>
using namespace std;

const int mmod = 1000000007;
int dp[102][52][34][26][6][6];

long long solve(int cnt1, int cnt2, int cnt3, int cnt4, int free, int special)
{
  if (cnt1 < 0 || cnt2 < 0 || cnt3 < 0 || cnt4 < 0 || special < 0) return 0;
  if (dp[cnt1][cnt2][cnt3][cnt4][free][special]) return dp[cnt1][cnt2][cnt3][cnt4][free][special]-1;

  long long res = 0;
  if (!free) {
    if (cnt4)
      res = cnt1 * solve(cnt1-1, cnt2, cnt3, cnt4-1, 1, 3) + 2 * cnt2 * solve(cnt1, cnt2-1, cnt3, cnt4-1, 2, 3) + 3 * cnt3 * solve(cnt1, cnt2, cnt3-1, cnt4-1, 3, 3) + 4 * (cnt4-1) * solve(cnt1, cnt2, cnt3, cnt4-2, 4, 3);
    else if (cnt3)
      res = cnt1 * solve(cnt1-1, cnt2, cnt3-1, cnt4, 1, 2) + 2 * cnt2 * solve(cnt1, cnt2-1, cnt3-1, cnt4, 2, 2) + 3 * (cnt3-1) * solve(cnt1, cnt2, cnt3-2, cnt4, 3, 2);
    else if (cnt2)
      res = cnt1 * solve(cnt1-1, cnt2-1, cnt3, cnt4, 1, 1) + 2 * (cnt2-1) * solve(cnt1, cnt2-2, cnt3, cnt4, 2, 1);
    else if (cnt1)
      res = (cnt1-1) * solve(cnt1-2, cnt2, cnt3, cnt4, 1, 0);
  } else if (free <= 4) {
    res += cnt1 * solve(cnt1-1+(free==2), cnt2+(free==3), cnt3+(free==4), cnt4, 1, special);
    res += 2 * cnt2 * solve(cnt1+(free==2), cnt2-1+(free==3), cnt3+(free==4), cnt4, 2, special);
    res += 3 * cnt3 * solve(cnt1+(free==2), cnt2+(free==3), cnt3-1+(free==4), cnt4, 3, special);
    res += 4 * cnt4 * solve(cnt1+(free==2), cnt2+(free==3), cnt3+(free==4), cnt4-1, 4, special);
    res += special * solve(cnt1+(free==2), cnt2+(free==3), cnt3+(free==4), cnt4, 5, special-1);
    if (free == 2) cnt1 ++; else if (free == 3) cnt2 ++; else if (free == 4) cnt3 ++;
    if (special == 1) cnt1 ++; else if (special == 2) cnt2 ++; else if (special == 3) cnt3 ++;
    res += solve(cnt1, cnt2, cnt3, cnt4, 0, 0);
    if (free == 2) cnt1 --; else if (free == 3) cnt2 --; else if (free == 4) cnt3 --;
    if (special == 1) cnt1 --; else if (special == 2) cnt2 --; else if (special == 3) cnt3 --;
  } else if (free == 5) {
    res += cnt1 * solve(cnt1-1, cnt2, cnt3, cnt4, 1, special) + 2 * cnt2 * solve(cnt1, cnt2-1, cnt3, cnt4, 2, special) + 3 * cnt3 * solve(cnt1, cnt2, cnt3-1, cnt4, 3, special) + 4 * cnt4 * solve(cnt1, cnt2, cnt3, cnt4-1, 4, special);
  }

  res %= mmod;
//  printf("%d %d %d %d %d %d = %lld\n", cnt1, cnt2, cnt3, cnt4, free, special, res);

  dp[cnt1][cnt2][cnt3][cnt4][free][special] = res + 1;
  return res;
}

int main()
{
  int T;
  cin >> T;
  for (int tt=1; tt<=T; tt++) {
    int K;
    cin >> K;
    int cnt[5] = {0};
    for (int i=0; i<K; i++) {
      int tmp;
      cin >> tmp;
      cnt[tmp] ++;
    }

    dp[0][0][0][0][0][0] = 1+1;
    int res = solve(cnt[1], cnt[2], cnt[3], cnt[4], 0, 0);
    
    printf("Case #%d: %d\n", tt, res);
  }
  return 0;
}

// solution by Peter Ondruska

#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <climits>
#include <cstring>

#include <iostream>
#include <sstream>
#include <complex>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <utility>
#include <numeric>
#include <functional>
#include <algorithm>
using namespace std;

typedef pair<int,int> PII;
typedef long long ll;

#define FOR(i,n)      for(int i=0;i<(n);i++)
#define FORTO(i,a,b)  for(int i=(a);i<=(b);i++)
#define FORD(i,n)     for(int i=(n)-1;i>=0;i--)
#define FORDTO(i,a,b) for(int i=(a);i>=(b);i--)
#define FOREACH(it,t) for(typeof(t.begin()) it=t.begin(); it!=t.end(); ++it)

#define DEBUG(x) cout<<'>'<<#x<<':'<<(x)<<endl
#define SIZE(X) int(X.size())

#define MOD 1000000007LL
#define MAX 123

int K, N[MAX];

// ludi spolu, [-> nedostalo], [nedalo -> ] (+ v rodine)
ll DP[MAX][MAX][MAX][5][5];
int R[MAX];

inline void ADD(int n, int a, int b, int ra, int rb, ll v) {
    if (a < 0 || b < 0 || ra > 4 || rb > 4) return;
    if (R[n] != R[n-1]) {
        a += ra; ra = 0;
        b += rb; rb = 0;
    }
    DP[n][a][b][ra][rb] = (DP[n][a][b][ra][rb] + v) % MOD;
}

int main() {
	int T;
    scanf("%d", &T);
    FORTO(t,1,T) {
        scanf("%d", &K);
        ll S = 0;
        int n = 0;
        
        FOR(i,MAX) R[i] = 0;
        FOR(i,MAX) N[i] = 0;
        FOR(n,MAX) FOR(a,MAX) FOR(b,MAX) FOR(ra,5) FOR(rb,5) DP[n][a][b][ra][rb] = 0;
        
        FOR(i,K) {
            scanf("%d", &N[i]);
            FOR(j,N[i]) R[n++] = (i+1);
            S += N[i];
        }
        
        DP[0][0][0][0][0] = 1;
        n = 0;
        
        FOR(n,S) {
            FOR(a,MAX) FOR(b,MAX) FOR(ra,5) FOR(rb,5) {
                ll v = DP[n][a][b][ra][rb];
                // nedostan, nedaj
                ADD(n+1,a,b,ra+1,rb+1,v);
                
                // daj darcek, nedostan
                ADD(n+1,a-1,b,ra+1,rb,ll(a)*v);
                
                // dostan darcek, nedaj
                ADD(n+1,a,b-1,ra,rb+1,ll(b)*v);
                
                // daj aj dostan darcek
                ADD(n+1,a-1,b-1,ra,rb,ll(a*b)*v);
                
            }
        }
        
        printf("Case #%d: %lld\n", t, DP[S][0][0][0][0]);
	}
	return 0;
}


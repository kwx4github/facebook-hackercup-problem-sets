// .... .... .....!
// ...... ......!
// .... ....... ..... ..!

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cassert>

#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <numeric>
#include <bitset>

#include <cstdio>
#include <cstring>

using namespace std;

#define rep(i, n) for (int i = 0, _n = (int)(n); i < _n; i++)
#define fer(i, x, n) for (int i = (int)(x), _n = (int)(n); i < _n; i++)
#define rof(i, n, x) for (int i = (int)(n), _x = (int)(x); i-- > _x; )
#define fch(i, x) for (__typeof(x.begin()) i = x.begin(); i != x.end(); i++)
#define sz(x) (int((x).size()))
#define pb push_back
#define mkp make_pair
#define all(X) (X).begin(),(X).end()

#define X first
#define Y second

typedef long long ll;
typedef pair <int, int> pii;

////////////////////////////////////////////////////////////////////////////////

const int mod = 1000000007;
const int cnt[5] = {1, 1, 1+1, 1+2+3, 1+6+3+4*2+6};

int n;
int dp[111][111];
ll C[999][999];

int hm[5][5];

void solve()
{
	memset (dp, 0, sizeof dp);
	dp[0][0] = 1;

	cin >> n;
	int sum = 0;
	rep (i, n)
	{
		int x; cin >> x;
		int nsum = sum+x;

		rep (s, sum+1)
			rep (y, x+1)
				rep (k, x-y+1)
				{
					int mul = hm[x-y][k];
					rep (g, k+1)
					{
						int ns = s + y - g + (x-y-k);

						dp[i+1][ns] = (dp[i+1][ns] + dp[i][s] * (ll)C[x][y] % mod * mul % mod % mod * C[s][g] % mod * C[sum-s][k-g] % mod * cnt[y]) % mod;
					}
				}

		sum += x;
	}
	cout << dp[n][0] << endl;
}

int main()
{
	ios_base::sync_with_stdio (false);

	C[0][0] = 1;
	fer (i, 1, 999)
	{
		C[i][0] = C[i][i] = 1;
		fer (j, 1, i) C[i][j] = (C[i-1][j] + C[i-1][j-1]) % mod;
	}

	hm[0][0] = 1;
	hm[1][1] = 1;
	hm[2][1] = 2;
	hm[2][2] = 2;
	hm[3][1] = 6;
	hm[3][2] = 2*6;
	hm[3][3] = 6;
	hm[4][1] = 24;
	hm[4][2] = 3*24;
	hm[4][3] = 3*24;
	hm[4][4] = 24;

	int tcn; cin >> tcn;
	for (int tci = 1; tci <= tcn; tci++)
	{
		cout << "Case #" << tci << ": ";
		solve();
	}

	{ int _; cin >> _; return 0; }
}

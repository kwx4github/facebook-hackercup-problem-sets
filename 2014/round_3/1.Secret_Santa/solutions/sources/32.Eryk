#include <algorithm>
#include <string>
#include <vector>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
//#include <iostream>
#include <set>
//#include <map>
//#include <sstream>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<int> vll;
typedef vector<string> vs;

int err;
char *errs;

#define scanf err=scanf
#define fgets errs=fgets

//@? 0workset & LS
#define LS !=
//@? 0ignoreme
#undef LS
//@? 0workset ! LS
#define LS <
//@? Size
#define Size(x) (int(x.size()))
//@? LET
#define LET(k,val) __typeof(val) k = (val)
//@? CLC
// execute "act", and return "val" as an expression result
#define CLC(act,val) ([&] () {act; return (val); } ())
// (*({act; static __typeof(val) CLCR; CLCR = (val); &CLCR;}))
//@@

//@? 0rangecomm
// All macros with parameters "k,a,b" run the "k" variable in range [a,b)
//@? FOR
#define FOR(k,a,b) for(auto k=(a); k LS (b); ++k)
//@? FORREV
// the range is traversed from b-1 to a in FORREV
#define FORREV(k,a,b) for(auto k=(b); (a) <= (--k);)
//@@

#define FIRST(k,a,b,cond) CLC(LET(k, a); for(; k LS (b); ++k) if(cond) break, k)
#define LAST(k,a,b,cond) CLC(LET(k, b); while((a) <= (--k)) if(cond) break, k)
#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) LS (b))
#define FORALL(k,a,b,cond) (!EXISTS(k,a,b,!(cond)))
#define FOLD0(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(; k LS (b); ++k) {act;}, R##k)
#define SUMTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k += (x))
#define SUM(k,a,b,x) SUMTO(k,a,b,(__typeof(x)) (0), x)
#define PRODTO(k,a,b,init,x) FOLD0(k,a,b,init,R##k *= (x))
#define PROD(k,a,b,x) PRODTO(k,a,b,(__typeof(x)) (1), x)
#define MAXTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k >?= (x))
#define MINTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k <?= (x))
#define QXOR(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (0), R##k ^= x)
#define QAND(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (-1), R##k &= x)
#define QOR(k,a,b,x) FOLD0(k,a,b,(__typeof(x)) (-1), R##k |= x)
#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(++k; k LS (b); ++k) act, R##k)
#define MAX(k,a,b,x) FOLD1(k,a,b,x, R##k >?= (x))
#define MIN(k,a,b,x) FOLD1(k,a,b,x, R##k <?= (x))
#define FIRSTMIN(k,a,b,x) (MIN(k,a,b,make_pair(x,k)).second)

int bitc(ll r) {return r == 0 ? 0 : (bitc(r>>1) + (r&1));}
ll gcd(ll x, ll y) {return x ? gcd(y%x,x) : y;}

// template<class T> T& operator >?= (T& x, T y) {if(y>x) x=y; return x;}
// template<class T> T& operator <?= (T& x, T y) {if(y<x) x=y; return x;}
// template<class T> T operator >? (T x, T y) {return x>y?x:y;}
// template<class T> T operator <? (T x, T y) {return x<y?x:y;}

#define Pa(xy) ((xy).first)
#define Ir(xy) ((xy).second)

string cts(char c) {string s=""; s+=c; return s;}

/// ----

#define BUFSIZE 1000000
char buf[BUFSIZE];

#ifdef DEBUG
#define DEB(x) x
#else
#define DEB(x)
#endif

string getLine() {
  string s;
  while(!feof(stdin)) {
    char c = fgetc(stdin);
    if(c == 13) continue;
    if(c == 10) return s;
    s += c;
    }
  return s;
  }

int getNum() {
  string s = getLine();
  return atoi(s.c_str());
  }

vi parsevi(string s) {
  s = s + " ";
  int q = 0;
  bool minus = false;
  vi res;
  FOR(l,0, Size(s)) {
    if(s[l] == ' ') { res.push_back(minus?-q:q); q = 0; minus = false;}
    else if(s[l] == '-') { minus = true; }
    else { q = q * 10 + s[l] - '0'; }
    }
  return res;
  }

int Tests, cnum;

//Eryx

// !FDI

int K;

int cnt[5];

int total;

#define P 1000000007

ll pw(ll a, int to) {
  ll res = 1;
  while(to > 0) {
    if(to&1) res *= a, res %= P;
    to >>= 1; a *= a; a %= P;
    }
  return res;
  }

ll bin[200][200];

ll binn(int k, int n) { return bin[n][k]; }

void solveCase() {
  ll fac[200];
  fac[0] = 1;
  FOR(u,1,200) fac[u] = (fac[u-1] * u) % P;
  FOR(n,0,200) FOR(k,0,200) bin[n][k] = k==0 ? 1 : n==0 ? 0 : (bin[n-1][k-1] + bin[n-1][k]) % P;
  scanf("%d", &K);
  FOR(a,1,5) cnt[a] = 0;
  total = 0;
  FOR(k,0,K) {
    int i;
    scanf("%d", &i);
    cnt[i]++;
    total += i;
    }
  // proceed
  ll result = 0;
  FOR(u11, 0, cnt[1]+1)
  FOR(u21, 0, cnt[2]+1)
  FOR(u22, 0, cnt[2]+1-u21)
  FOR(u31, 0, cnt[3]+1)
  FOR(u32, 0, cnt[3]+1-u31)
  FOR(u33, 0, cnt[3]+1-u31-u32)
  FOR(u41, 0, cnt[4]+1)
  FOR(u42, 0, cnt[4]+1-u41)
  FOR(u43, 0, cnt[4]+1-u41-u42)
  FOR(u44, 0, cnt[4]+1-u41-u42-u43) {
    ll res = 1;
    res *= pw(4, u21); res %= P;
    res *= pw(2, u22); res %= P;
    res *= pw(9, u31); res %= P;
    res *= pw(18, u32); res %= P;
    res *= pw(6, u33); res %= P;
    res *= pw(16, u41); res %= P;
    res *= pw(72, u42); res %= P;
    res *= pw(96, u43); res %= P;
    res *= pw(24, u44); res %= P;

    res *= binn(u11, cnt[1]); res %= P;

    res *= binn(u21, cnt[2]); res %= P;
    res *= binn(u22, cnt[2]-u21); res %= P;

    res *= binn(u31, cnt[3]); res %= P;
    res *= binn(u32, cnt[3]-u31); res %= P;
    res *= binn(u33, cnt[3]-u31-u32); res %= P;

    res *= binn(u41, cnt[4]); res %= P;
    res *= binn(u42, cnt[4]-u41); res %= P;
    res *= binn(u43, cnt[4]-u41-u42); res %= P;
    res *= binn(u44, cnt[4]-u41-u42-u43); res %= P;

    int rest = total - u11 - u21 - u22*2 - u31 - u32*2 - u33*3 - u41 - u42*2 - u43 * 3 - u44 * 4;
    if((total-rest)&1) res = -res;
    // if(cnum == 2) printf("u = %d rest = %d res = %Ld\n", u11, rest, res);
    res *= fac[rest];
    res %= P;
    result += res;
    result %= P;
    }
  if(result<0) result += P;
  printf("Case #%d: %Ld\n", cnum, result);
  }

int main() {

  if(0)
    Tests = 1;
  else if(1)
    scanf("%d\n", &Tests);
  else {
    string Nstr = getLine();
    Tests = atoi(Nstr.c_str());
    }
  
  for(cnum=1; cnum<=Tests; cnum++)
    solveCase();
    
  // finish
  return 0;
  }

// This solution includes hidden routines to solve test cases in separate
// processes in order to make it faster. I will update them to run on a
// cluster if I get one ;)

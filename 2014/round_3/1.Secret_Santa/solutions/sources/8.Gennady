#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int md = 1000000007;

int stupid(vector <int> a) {
  int m = (int)a.size();
  vector <int> b;
  for (int i = 0; i < m; i++)
    for (int j = 0; j < a[i]; j++) b.push_back(i);
  int n = b.size();
  vector <int> kb(1 << n), f(1 << n);
  kb[0] = 0;
  for (int t = 1; t < (1 << n); t++) kb[t] = kb[t & (t - 1)] + 1;
  for (int t = 0; t < (1 << n); t++) f[t] = 0;
  f[0] = 1;
  for (int t = 0; t < (1 << n) - 1; t++) {
    int i = kb[t];
    for (int j = 0; j < n; j++)
      if (b[i] != b[j] && (t & (1 << j)) == 0) {
        int nt = t + (1 << j);
        f[nt] += f[t];
        if (f[nt] >= md) f[nt] -= md;
      }
  }
  return f[(1 << n) - 1];
}

const int N = 1010;

int f[N][N];

int smart(vector <int> a) {
  int m = (int)a.size();
  int n = 0;
  for (int i = 0; i < m; i++) n += a[i];
  vector <int> fact(n + 1);
  fact[0] = 1;
  for (int i = 1; i <= n; i++) fact[i] = (long long)fact[i - 1] * i % md;
  for (int i = 0; i <= m; i++)
    for (int j = 0; j <= n; j++) f[i][j] = 0;
  f[0][0] = 1;
  for (int i = 0; i < m; i++)
    for (int j = 0; j <= n; j++)
      if (f[i][j] > 0) {
        for (int t = 0; t < (1 << a[i]); t++) {
          int u = 0;
          for (int q = 0; q < a[i]; q++)
            if (t & (1 << q)) u++;
          int ft = f[i][j];
          for (int k = 1; k <= u; k++) ft = (long long)ft * (a[i] - k + 1) % md;
          f[i + 1][j + u] += ft;
          if (f[i + 1][j + u] >= md) f[i + 1][j + u] -= md;
        }
      }
  int ans = 0;
  for (int j = 0; j <= n; j++) {
    int cur = (long long)fact[n - j] * f[m][j] % md;
    if (j & 1) cur = (md - cur) % md;
    ans = (ans + cur) % md;
  }
  return ans;
}

int cases;

void dfs(int maxn, int sum, int p, vector <int> a) {
  if ((int)a.size() >= 2) {
    int stu = stupid(a);
    int ans = smart(a);
    fprintf(stderr, "test case:");
    for (int i = 0; i < (int)a.size(); i++) fprintf(stderr, " %d", a[i]);
    fprintf(stderr, "\n");
    fprintf(stderr, "    smart = %d\n", ans);
    fprintf(stderr, "   stupid = %d\n", stu);
    if (ans != stu) {
      fprintf(stderr, "          ERROR!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
      printf("ERROR!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
      exit(0);
    }
    cases++;
  }
  for (int j = p; j <= 4; j++)
    if (sum + j <= maxn) {
      vector <int> b = a;
      b.push_back(j);
      dfs(maxn, sum + j, j, b);
    }
}

void test() {
  cases = 0;
  dfs(17, 0, 1, vector <int> ());
  printf("%d test cases checked\n", cases);
}

int main() {
  freopen("in", "r", stdin);
  freopen("log", "w", stderr);
//  test();
  freopen("out", "w", stdout);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    int n;
    scanf("%d", &n);
    vector <int> a(n);
    for (int i = 0; i < n; i++) scanf("%d", &a[i]);
    int ans = smart(a);
    printf("%d\n", ans);
  }
  return 0;
}

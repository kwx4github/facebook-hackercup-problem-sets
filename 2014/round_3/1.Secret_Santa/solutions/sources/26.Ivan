import java.io.*;

import java.awt.geom.Point2D;
import java.text.*;
import java.math.*;
import java.util.*;

public class Main implements Runnable {

	final String filename = "secret_santa";

	final int MOD = 1000000007;

	public void solve() throws Exception {
		int K = iread();

		int[] n = new int[K];
		int N = 0;
		for (int i = 0; i < K; i++) {
			n[i] = iread();
			N += n[i];
		}

		int[][] C = new int[N + 1][N + 1];
		for (int i = 0; i <= N; i++) {
			for (int j = 1; j < i; j++) {
				C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD;
			}
			C[i][0] = C[i][i] = 1;
		}

		long[][] d = new long[2][N + 1];
		d[0][0] = 1;
		int step = 0;
		for (int i = 0; i < K; i++) {
			Arrays.fill(d[step ^ 1], 0);
			for (int take = 0; take <= N; take++) {
				long val = d[step][take];
				if (val == 0)
					continue;
				int ni = n[i];
				for (int u = 0; u <= ni && u <= take; u++)
					for (int v = 0; v <= ni && v <= take; v++) {
						int take1 = Math.abs(take + ni - u - v);
						long val1 = val;
						val1 = (val1 * C[ni][u]) % MOD;
						for (int j = 0; j < u; j++)
							val1 = (val1 * (take - j)) % MOD;
						val1 = (val1 * C[ni][v]) % MOD;
						for (int j = 0; j < v; j++)
							val1 = (val1 * (take - j)) % MOD;
						d[step ^ 1][take1] = (d[step ^ 1][take1] + val1) % MOD;
					}
			}
			step ^= 1;
		}
		long ans = d[step][0];
		out.write(ans + "\n");
	}

	public void run() {
		try {
			// in = new BufferedReader(new InputStreamReader(System.in));
			// out = new BufferedWriter(new OutputStreamWriter(System.out));
			in = new BufferedReader(new FileReader(filename + ".in"));
			out = new BufferedWriter(new FileWriter(filename + ".out"));
			int T = iread();
			for (int test = 1; test <= T; test++) {
				out.write("Case #" + test + ": ");
				solve();
			}
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public int iread() throws Exception {
		return Integer.parseInt(readword());
	}

	public double dread() throws Exception {
		return Double.parseDouble(readword());
	}

	public long lread() throws Exception {
		return Long.parseLong(readword());
	}

	BufferedReader in;

	BufferedWriter out;

	public String readword() throws IOException {
		StringBuilder b = new StringBuilder();
		int c;
		c = in.read();
		while (c >= 0 && c <= ' ')
			c = in.read();
		if (c < 0)
			return "";
		while (c > ' ') {
			b.append((char) c);
			c = in.read();
		}
		return b.toString();
	}

	public static void main(String[] args) {
		try {
			Locale.setDefault(Locale.US);
		} catch (Exception e) {

		}
		// new Thread(new Main()).start();
		new Thread(null, new Main(), "1", 1 << 25).start();
	}
}
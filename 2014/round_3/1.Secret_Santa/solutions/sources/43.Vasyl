#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define MOD 1000000007

int A[128];
int B[128];
int I[101][51][34][26];
Int R[128][128][128];
Int C[128][128];
Int F[128];

int SolveTest(int test)
{
	int K;
	scanf("%d", &K);

	int i, j, k, l, m;
	FOR(i, 0, K)
		scanf("%d", &A[i]);

	int n = accumulate(A, A + K, 0);

	CLEAR(C, 0);
	FOR(i, 0, 128)
		C[i][i] = C[i][0] = 1;

	FOR(i, 0, 128)
		FOR(j, 1, i)
			C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % MOD;

	F[0] = 1;
	FOR(i, 1, 128)
		F[i] = F[i - 1] * i % MOD;

	CLEAR(R, 0);
	R[0][0][0] = 1;
	FOR(i, 0, K)
		FOR(j, 0, n + 1)
			FOR(k, 0, n + 1)
			if (R[i][j][k] != 0)
			{
				int ll = min(A[i], j) + 1;
				int mm = min(A[i], k) + 1;
				FOR(l, 0, ll)
					FOR(m, 0, mm)
					{
						int j2 = j - l + (A[i] - m);
						int k2 = k - m + (A[i] - l);

						Int cl = ((C[j][l] * C[A[i]][l]) % MOD)*F[l] % MOD;
						Int cm = ((C[k][m] * C[A[i]][m]) % MOD)*F[m] % MOD;

						R[i + 1][j2][k2] = (R[i + 1][j2][k2] + R[i][j][k] * (cl*cm % MOD)) % MOD;
					}
			}

	printf("Case #%d: %d\n", test + 1, int(R[K][0][0]));
	return 0;
}


int SolveTest2(int test)
{
	CLEAR(B, 0);

	int K;
	scanf("%d", &K);

	int n = 0;
	int i, j, k, l, m;
	FOR(i, 0, K)
	{
		int a;
		scanf("%d", &a);
		B[n] = 1;
		n += a;
	}

	int cnt = 0;
	for (i = 0; i <= n; ++i)
	for (j = 0; i + 2 * j <= n; ++j)
	for (k = 0; i + 2 * j + 3 * k <= n; ++k)
	for (l = 0; l + 2 * j + 3 * k + 4 * l <= n; ++l)
	{
		I[i][j][k][l] = cnt;
		++cnt;
	}

	CLEAR(R, 0);
	R[0][0][0] = 1;

	FOR(m, 0, n)
	{
		int prev = m & 1;
		int next = prev ^ 1;

		CLEAR(R[next], 0);

		for (i = 0; i <= n; ++i)
		for (j = 0; i + 2 * j <= n; ++j)
		for (k = 0; i + 2 * j + 3 * k <= n; ++k)
		for (l = 0; l + 2 * j + 3 * k + 4 * l <= n; ++l)
		{
			int pos = I[i][j][k][l];
			for (int last = 0; last <= 4; ++last)
			if (R[prev][pos][last] != 0)
			{
				int last2 = last;
				if (B[m] != 0)
					last2 = 0;

				int a[] = { i, j, k, l };
				int b[] = { i, j, k, l };
				if (last2 != 0)
					--a[last2 - 1];

				++a[last2];
				++last2;

				int pos2 = I[a[0]][a[1]][a[2]][a[3]];
				R[next][pos2][last2] = (R[next][pos2][last2] + R[prev][pos][last]) % MOD;

				--last2;
				for (int who = 1; who <= 4; ++who)
				if (b[who - 1] != 0)
				{
					int c[] = { i, j, k, l };
					--c[who - 1];
					if (who > 1)
						++c[who - 2];

					pos2 = I[c[0]][c[1]][c[2]][c[3]];
					R[next][pos2][last2] = (R[next][pos2][last2] + R[prev][pos][last] * b[who - 1]) % MOD;
				}
			}
		}
	}

	printf("Case #%d: %d\n", test + 1, R[m & 1][0][0]);
	return 0;
}

int main()
{
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <cassert>
#include <string.h>
#include <ctime>

#define pb push_back
#define mp make_pair
#define PI 3.1415926535897932384626433832795
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;

const int mod = 1000000007;

ll calcA(ll n, ll m) {
	ll res = 1;
	forn(iter, m) (res *= n-iter)%=mod;
	return res;
}

vector<vector<int> > comb(110, vector<int>(110,0));

void solve() {
	int K; scanf("%d", &K);
	vector<int> v(K);
	forn(i, K) scanf("%d", &v[i]);
	int total = 0;
	forn(i, K) total += v[i];
	vector<vector<vector<int> > > dp(K+1,vector<vector<int> >(total+1,vector<int>(total+1,0)));
	dp[0][0][0] = 1;
	int rem = 0;
	forn(i,K) {
		forn(c1, total+1) forn(c2, total+1) forn(tol, v[i]+1) {
			if (dp[i][c1][c2] == 0) continue;
			//cerr << i << " " << c1 << " " << c2 << " " << dp[i][c1][c2] << "\n";
			int tor = v[i]-tol;
			ll curmult = (ll)calcA(c1, tol) * comb[v[i]][tol] % mod;
			//cerr << curmult << "\n";
			
			forn(sub, v[i]+1) {
				ll m2 = (ll)comb[v[i]][sub] * calcA(c2, sub) %mod;
				int rr = v[i] - sub;
				int toc1 = c1 - tol + rr;
				int toc2 = c2 + tor - sub;
				if (toc1 < 0 || toc1 > total) continue;
				if (toc2 < 0 || toc2 > total) continue;
				dp[i+1][toc1][toc2] = (dp[i+1][toc1][toc2] + (ll)((ll)dp[i][c1][c2] * curmult%mod) * m2 % mod)%mod;
			}
		}
		rem += v[i];
	}
	int ans = dp[K][0][0];
	printf("%d\n", ans);
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	comb[0][0] = 1;
	forn(i, 110) forn(j, 110) {
		if (i) (comb[i][j] += comb[i-1][j])%=mod;
		if (i && j) (comb[i][j] += comb[i-1][j-1])%=mod;
	}
	int T; scanf("%d", &T);
	for (int tn = 1; tn <= T; ++tn) {
		cerr << tn << endl;
		printf("Case #%d: ", tn);
		solve();
	}
	return 0;
}
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <memory.h>
#include <math.h>

typedef long long LL;

const LL MOD = 1000000007ll;
//              123456789

LL icount[4][5];
bool iv[4];
void back(int n, int x,int w) {
	if (x == n) {
		icount[n - 1][w] ++;
		return;
	}
	for (int i = 0; i < n; i++) {
		if (!iv[i]) {
			iv[i] = true;
			back(n, x + 1, w + 1);
			iv[i] = false;
		}
	}
	back(n, x + 1, w);
}
using namespace std;
LL D[4][101][101];
LL X[4][101], fact[101];
int inp[4];
int main() {
	back(1, 0, 0);
	back(2, 0, 0);
	back(3, 0, 0);
	back(4, 0, 0);
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	fact[0] = 1;
	for (int i = 1; i <= 100; i++) {
		fact[i] = (fact[i - 1] * i) % MOD;
	}
	for (int i = 0; i<4; i++) {
		for (int j = 0; j<=100; j++) {
			if ((i + 1) * j > 100) break;
			D[i][j][0] = 1;
			for (int k = 1; k <= j * (i+1); k++) {
				for (int l = 0; l <= i + 1 && l<=k; l++) {
					D[i][j][k] += D[i][j - 1][k-l] * icount[i][l];
					D[i][j][k] %= MOD;
				}
			}
		}
	}
	int T;
	int cs = 0;
	scanf("%d", &T);
	int n;
	while (T-- > 0) {
		cs++;

		scanf("%d", &n);
		for (int i = 0; i < 4; i++) inp[i] = 0;
		for (int i = 0; i < n; i++) {
			int p;
			scanf("%d", &p);
			inp[p-1] ++;
		}

		memset(X, 0, sizeof(X));
		int Nx = 0;
		for (int i = 0; i < 4; i++) {
			int Ni = (i + 1) * inp[i];
			Nx += Ni;
			if (i == 0) {
				for (int j = 0; j <= Nx; j++) {
					X[i][j] = D[i][inp[i]][j];
				}
			}
			else {
				for (int j = 0; j <= Nx; j++) {
					for (int k = 0; k <= j && k <= Ni; k++) {
						X[i][j] += X[i - 1][j - k] * D[i][inp[i]][k];
						X[i][j] %= MOD;
					}
				}
			}
		}

		LL sol = 0;
		for (int i = 0; i <= Nx; i++) {
			LL su = (fact[Nx - i] * X[3][i]) % MOD;
			if (i % 2 == 0) sol = (sol+su)%MOD;
			else sol = (sol-su+MOD)%MOD;
		}

		printf("Case #%d: %lld\n", cs, sol);
	}
	return 0;
}
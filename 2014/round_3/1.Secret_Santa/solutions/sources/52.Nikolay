#ifdef NALP_PROJECT
#pragma hdrstop
#else
#define _SECURE_SCL 0
#endif

#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker, "/STACK:200000000")

#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <utility>
#include <cassert>

#include <set>
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <bitset>
#include <memory.h>

#include <iostream>
#include <fstream>
#include <sstream>

using namespace std;

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define y1 YYY1
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

template<typename T> inline T Abs(T x) { return (x >= 0) ? x : -x; }
template<typename T> inline T sqr(T x) { return x * x; }
template<typename T> inline string toStr(T x) { stringstream st; st << x; string s; st >> s; return s; }
template<typename T> inline int bit(T mask, int b) { return (b >= 0 && (mask & (T(1) << b)) != 0) ? 1 : 0; }

inline int nextInt() { int x; if (scanf("%d", &x) != 1) throw; return x; }
inline int64 nextInt64() { int64 x; if (scanf("%I64d", &x) != 1) throw; return x; }
inline double nextDouble() { double x; if (scanf("%lf", &x) != 1) throw; return x; }

const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double EPS = 1E-9;
const long double PI = 3.1415926535897932384626433832795;

const int MAXN = 115;
const int64 MOD = 1000000007;

int64 D[MAXN][5][5][MAXN], fact[MAXN];
map<vector<int>, int> d;
int n, a[MAXN];
vector<int> l;

int64 solve(int f, int m, int have, int need) {
	if (f == n && need == 0) return 1;
	if (f == n) return 0;

	int64 &ans = D[f][m][have][need];
	if (ans != -1) return ans;

	if (m == a[f])
		return ans = solve(f + 1, 0, a[f + 1], need);

	ans = solve(f, m + 1, have, need);
	if (have > 0 && need > 0)
		ans = (ans + solve(f, m + 1, have - 1, need - 1) * have) % MOD;

	return ans;
}

int solve(vector<int> a) {
	if (*max_element(all(a)) == 0) return 1;
	if (d.count(a)) return d[a];

	int ans = 0, sum = 0;
	forn(i, a.size()) sum += a[i];
	int color = l[sum - 1];

	forn(i, a.size())
		if (a[i] > 0 && i != color) {
			a[i]--;
			ans = int((ans + 1LL * solve(a) * (a[i] + 1)) % MOD);
			a[i]++;
		}

	return d[a] = ans;
}

int64 stupid() {
	l.clear();
	forn(i, n)
		forn(j, a[i])
			l.pb(i);

	d.clear();
	return solve(vector<int>(a, a + n));
}

void solve() {
	if (true) {
		cerr << "\tinput mode: read test." << endl;
		n = nextInt();
		forn(i, n)
			a[i] = nextInt();
	} else {
		cerr << "\tinput mode: generated test." << endl;
		n = rand() % 7 + 1;
		forn(i, n)
			a[i] = rand() % 4 + 1;
	}

	int s = 0;
	forn(i, n) s += a[i];
	assert(s <= 100);

	int64 ans = fact[s];
	for(int i = 1; i <= s; i++) {
		memset(D, 255, sizeof D);
		int64 c = (solve(0, 0, a[0], i) * fact[s - i]) % MOD;
		if (i % 2 == 1) c = (MOD - c) % MOD;
		ans = (ans + c) % MOD;
	}

	cout << ans << endl;

	cerr << "\tclever answer is '" << ans << "'." << endl;
	if (n <= 7) {
		int64 stupidAnswer = stupid();
		cerr << "\tstupid answer is '" << stupidAnswer << "'." << endl;
		assert(ans == stupidAnswer);
	}
}

int main() {
#ifdef NALP_PROJECT
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#else
#endif

	fact[0] = 1;
	for(int i = 1; i < MAXN; i++)
		fact[i] = (fact[i - 1] * i) % MOD;

	cout.precision(10);
	cout.setf(ios::fixed);

	cerr.precision(10);
	cerr.setf(ios::fixed);

	srand((unsigned int)time(0));
	int tests = nextInt();
	clock_t totalStartTime = clock();
	forn(test, tests) {
		clock_t startTime = clock();
		cerr << "Case #" << test + 1 << endl;
		cout << "Case #" << test + 1 << ": ";
		solve();

		char formattedTime[100];
		clock_t time = clock() - startTime;
		sprintf(formattedTime, "%d.%03d", int(time / CLOCKS_PER_SEC), int(time % CLOCKS_PER_SEC));
		cerr << "time for test is " << formattedTime << " s." << endl << endl;
	}

	char formattedTime[100];
	clock_t totalTime = clock() - totalStartTime;
	sprintf(formattedTime, "%d.%03d", int(totalTime / CLOCKS_PER_SEC), int(totalTime % CLOCKS_PER_SEC));
	cerr << string(20, '=') << endl;
	cerr << "TOTAL TIME IS " << formattedTime << " s." << endl;

	return 0;
}

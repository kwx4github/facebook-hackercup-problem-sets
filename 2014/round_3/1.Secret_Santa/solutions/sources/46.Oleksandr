#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <complex>
#include <numeric>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define FOR(i, a, b) for (int i(a), _b(b); i < _b; ++i)
#define REP(i, n) FOR(i, 0, n)
#define FORD(i, a, b) for (int i(a), _b(b); i >= _b; --i)
#define UN(a) sort(all(a)), (a).erase(unique(all(a)), (a).end())
#define CL(a, v) memset(a, v, sizeof a)
#define pb push_back
#define X first
#define Y second

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;

const int INF = 1000000000;
const ll INF_LL = 1000000000000000000LL;
const double pi = 2 * acos(0.0);

template<class T> void smin(T& a, T b) { if (a > b) a = b; }
template<class T> void smax(T& a, T b) { if (a < b) a = b; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }
template<class T> T sqr(T a) { return a * a; }

template<class T> void outp(const vector<T>& v) {
  REP(i, sz(v)) cout << v[i] << (i + 1 == sz(v) ? '\n' : ' ');
}
template<class T> void outp(T* v, int n) {
  REP(i, n) cout << *v++ << (i + 1 == n ? '\n' : ' ');
}

const int mod = 1000000007;
void add(int& x, int y) { x += y; if (x >= mod) x -= mod; }
int sum(int x, int y) { add(x, y); return x; }
int mul(int x, int y) { return (ll(x) * y) % mod; }

int qpow(int x, int p) {
  int res = 1;
  for(; p; x = mul(x, x), p >>= 1) {
    if (p & 1) res = mul(res, x);
  }
  return res;
}

int inv(int x) {
  return qpow(x, mod - 2);
}


const int h = 111;
int k, n[h], t[5];
int c[h][h], fac[h];
int p[h][h];

int v[5][h];

int main() {
  CL(c, 0);
  c[0][0] = 1;
  FOR(i, 1, h) {
    c[i][0] = 1;
    FOR(j, 1, h) c[i][j] = sum(c[i-1][j], c[i-1][j-1]);
  }
  fac[0] = 1;
  FOR(i, 1, h) fac[i] = mul(fac[i-1], i);
  FOR(i, 1, h) p[i][0] = 1;
  FOR(i, 1, h) FOR(j, 1, h) p[i][j] = mul(p[i][j-1], i);
  freopen("secret_santa.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  int it = 1, tt;
  char ct;
  for (scanf("%d%c", &tt, &ct); it <= tt; ++it) {
    scanf("%d", &k);
    REP(i, k) scanf("%d", n+i);
    CL(t, 0);
    int sum = 0;
    REP(i, k) {
      sum += n[i];
      ++t[n[i]];
    }

    CL(v, 0);
    int m1, m2, m3, m4;
    REP(i11, t[1]+1) {
      int s1 = i11;
      int x1 = c[t[1]][i11];
      add(v[1][s1], x1);
    }

    m1 = c[2][1] * c[2][1] * fac[1];
    m2 = c[2][2] * c[2][2] * fac[2];
    REP(i21, t[2]+1) REP(i22, t[2]-i21+1) {
      int s2 = i21 + i22*2;
      int x2 = mul(c[t[2]][i22+i21], c[i22+i21][i22]);
      x2 = mul(x2, mul(p[m1][i21], p[m2][i22]));
      //cout << i21 << ' ' << i22 << ' ' << x2 << endl;
      add(v[2][s2], x2);
    }

    m1 = c[3][1] * c[3][1] * fac[1];
    m2 = c[3][2] * c[3][2] * fac[2];
    m3 = c[3][3] * c[3][3] * fac[3];
    REP(i31, t[3]+1) REP(i32, t[3]-i31+1) REP(i33, t[3]-i32-i31+1) {
      int s3 = i31 + i32*2 + i33*3;
      int x3 = mul(mul(c[t[3]][i33+i32+i31], c[i33+i32+i31][i33]),
          c[i32+i31][i32]);
      x3 = mul(x3, mul(mul(p[m1][i31], p[m2][i32]), p[m3][i33]));
      add(v[3][s3], x3);
    }

    m1 = c[4][1] * c[4][1] * fac[1];
    m2 = c[4][2] * c[4][2] * fac[2];
    m3 = c[4][3] * c[4][3] * fac[3];
    m4 = c[4][4] * c[4][4] * fac[4];
    //printf("%d %d %d %d\n", m1, m2, m3, m4);
    REP(i41, t[4]+1) REP(i42, t[4]-i41+1) REP(i43, t[4]-i42-i41+1)
        REP(i44, t[4]-i41-i42-i43+1) {
      int s4 = i41 + i42*2 + i43*3 + i44*4;
      int x4 = mul(mul(c[t[4]][i44+i43+i42+i41], c[i44+i43+i42+i41][i44]),
          mul(c[i43+i42+i41][i43], c[i42+i41][i42]));
      x4 = mul(x4, mul(mul(p[m1][i41], p[m2][i42]),
          mul(p[m3][i43], p[m4][i44])));
      add(v[4][s4], x4);
    }

    int ans = 0;
    REP(i1, t[1]+1) REP(i2, t[2]*2+1) REP(i3, t[3]*3+1) REP(i4, t[4]*4+1) {
      int s = i1 + i2 + i3 + i4;
      int x = mul(mul(v[1][i1], v[2][i2]), mul(v[3][i3], v[4][i4]));
      x = mul(x, fac[sum-s]);
      if ((s&1) != 0) {
        if (x != 0) x = mod - x;
      }
      //cout << s << ' ' << x << endl;
      add(ans, x);
    }
    printf("Case #%d: %d\n", it, ans);
  }
  return 0;
}

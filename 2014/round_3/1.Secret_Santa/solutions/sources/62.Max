#include <cstdio>
#include <memory.h>
using namespace std;

const int N = 205;

const int K = 5;

typedef long long llong;

llong D[N][N][K][K][K];

const int mod = 1000 * 1000 * 1000 + 7;
int A[N];

inline void add(llong& x, llong y)
{
    x += y;
    x %= mod;
}

#define eprintf(...) fprintf(stderr, __VA_ARGS__)

void solve(int tc)
{
    int k;
    scanf("%d", &k);
    int n = 0;
    for (int i = 0; i < k; i++)
    {
        int t;
        scanf("%d", &t);
        for (int j = n; j < n + t; j++)
            A[j] = i;
        n += t;
    }
    memset(D, 0, sizeof(D));
    D[0][0][0][0][0] = 1;
    for (int i = 0; i <= n; i++)
    {
        if (i && (A[i] != A[i - 1]))
        {
            for (int a = 0; a < K; a++)
                for (int b = 0; b < K; b++)
                    for (int c = 0; c < K; c++)
                    {
                        if (a + b + c == 0)
                            continue;
                        for (int k = 0; k <= n; k++)
                            add(D[i][k + a + b + c][0][0][0], D[i][k][a][b][c]), D[i][k][a][b][c] = 0;
                    }
        }
        if (i == n)
            continue;
        for (int k = 0; k <= n; k++)
            for (int a = 0; a < K; a++)
                for (int b = 0; b < K; b++)
                    for (int c = 0; c < K; c++)
                    {
                        if (c + 1 < K)
                        add(D[i + 1][k][a][b][c + 1], D[i][k][a][b][c]);
                        if (a > 0 && c + 1 < K)
                        add(D[i + 1][k][a - 1][b][c + 1], a * D[i][k][a][b][c]);
                        if (b > 0 && c + 1 < K)
                        add(D[i + 1][k][a][b - 1][c + 1], b * D[i][k][a][b][c]);
                        if (k > 0 && a + 1 < K)
                        add(D[i + 1][k - 1][a + 1][b][c], k * D[i][k][a][b][c]);
                        if (k > 0 && b + 1 < K)
                        add(D[i + 1][k - 1][a][b + 1][c], k * D[i][k][a][b][c]);
                        if (a > 0 && b > 0 && c + 1 < K)
                        add(D[i + 1][k][a - 1][b - 1][c + 1], a * b * D[i][k][a][b][c]);
                        if (k > 0)
                        add(D[i + 1][k - 1][a][b][c], k * a * D[i][k][a][b][c]);
                        if (k > 0)
                        add(D[i + 1][k - 1][a][b][c], k * b * D[i][k][a][b][c]);
                        if (k > 0)
                        add(D[i + 1][k - 1][a][b][c], k * (k - 1) * D[i][k][a][b][c]);
                        if (k > 0)
                        add(D[i + 1][k - 1][a][b][c], k * D[i][k][a][b][c]);
                    }
    }
    int ans = D[n][0][0][0][0];
    printf("Case #%d: %d\n", tc, ans);
    fflush(stdout);
}


int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        solve(i + 1);
    }

}
